{"sha": "a63f35daeefc4ae89ba5b6bd0323d97bb0d050e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2M2YzNWRhZWVmYzRhZTg5YmE1YjZiZDAzMjNkOTdiYjBkMDUwZTY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-22T05:57:31Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-23T23:59:38Z"}, "message": "parse: use `parse_item_common` in `parse_foreign_item`.", "tree": {"sha": "fdfa0e3a90f8a0ec12979c3a960f884bacaa7300", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fdfa0e3a90f8a0ec12979c3a960f884bacaa7300"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a63f35daeefc4ae89ba5b6bd0323d97bb0d050e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a63f35daeefc4ae89ba5b6bd0323d97bb0d050e6", "html_url": "https://github.com/rust-lang/rust/commit/a63f35daeefc4ae89ba5b6bd0323d97bb0d050e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a63f35daeefc4ae89ba5b6bd0323d97bb0d050e6/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a920a056035d3aa8f5e90ff174764a886366d379", "url": "https://api.github.com/repos/rust-lang/rust/commits/a920a056035d3aa8f5e90ff174764a886366d379", "html_url": "https://github.com/rust-lang/rust/commit/a920a056035d3aa8f5e90ff174764a886366d379"}], "stats": {"total": 462, "additions": 392, "deletions": 70}, "files": [{"sha": "df2753813f9f3d74f86a1b21ad13b84e02581ad7", "filename": "src/librustc_expand/expand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a63f35daeefc4ae89ba5b6bd0323d97bb0d050e6/src%2Flibrustc_expand%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a63f35daeefc4ae89ba5b6bd0323d97bb0d050e6/src%2Flibrustc_expand%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fexpand.rs?ref=a63f35daeefc4ae89ba5b6bd0323d97bb0d050e6", "patch": "@@ -879,8 +879,8 @@ pub fn parse_ast_fragment<'a>(\n         }\n         AstFragmentKind::ForeignItems => {\n             let mut items = SmallVec::new();\n-            while this.token != token::Eof {\n-                items.push(this.parse_foreign_item(&mut false)?);\n+            while let Some(item) = this.parse_foreign_item()? {\n+                items.extend(item);\n             }\n             AstFragment::ForeignItems(items)\n         }"}, {"sha": "ecd2049963b3f55d35a9bd31aa76b9f162091f30", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 53, "deletions": 28, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/a63f35daeefc4ae89ba5b6bd0323d97bb0d050e6/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a63f35daeefc4ae89ba5b6bd0323d97bb0d050e6/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=a63f35daeefc4ae89ba5b6bd0323d97bb0d050e6", "patch": "@@ -457,7 +457,8 @@ impl<'a> Parser<'a> {\n \n         generics.where_clause = self.parse_where_clause()?;\n \n-        let impl_items = self.parse_item_list(attrs, |p, at_end| p.parse_impl_item(at_end))?;\n+        let impl_items =\n+            self.parse_item_list(attrs, |p, at_end| p.parse_impl_item(at_end).map(Some).map(Some))?;\n \n         let item_kind = match ty_second {\n             Some(ty_second) => {\n@@ -516,8 +517,9 @@ impl<'a> Parser<'a> {\n     fn parse_item_list<T>(\n         &mut self,\n         attrs: &mut Vec<Attribute>,\n-        mut parse_item: impl FnMut(&mut Parser<'a>, &mut bool) -> PResult<'a, T>,\n+        mut parse_item: impl FnMut(&mut Parser<'a>, &mut bool) -> PResult<'a, Option<Option<T>>>,\n     ) -> PResult<'a, Vec<T>> {\n+        let open_brace_span = self.token.span;\n         self.expect(&token::OpenDelim(token::Brace))?;\n         attrs.append(&mut self.parse_inner_attributes()?);\n \n@@ -528,7 +530,18 @@ impl<'a> Parser<'a> {\n             }\n             let mut at_end = false;\n             match parse_item(self, &mut at_end) {\n-                Ok(item) => items.push(item),\n+                Ok(None) => {\n+                    // We have to bail or we'll potentially never make progress.\n+                    let non_item_span = self.token.span;\n+                    self.consume_block(token::Brace, ConsumeClosingDelim::Yes);\n+                    self.struct_span_err(non_item_span, \"non-item in item list\")\n+                        .span_label(open_brace_span, \"item list starts here\")\n+                        .span_label(non_item_span, \"non-item starts here\")\n+                        .span_label(self.prev_span, \"item list ends here\")\n+                        .emit();\n+                    break;\n+                }\n+                Ok(Some(item)) => items.extend(item),\n                 Err(mut err) => {\n                     err.emit();\n                     if !at_end {\n@@ -631,7 +644,9 @@ impl<'a> Parser<'a> {\n         } else {\n             // It's a normal trait.\n             tps.where_clause = self.parse_where_clause()?;\n-            let items = self.parse_item_list(attrs, |p, at_end| p.parse_trait_item(at_end))?;\n+            let items = self.parse_item_list(attrs, |p, at_end| {\n+                p.parse_trait_item(at_end).map(Some).map(Some)\n+            })?;\n             Ok((ident, ItemKind::Trait(is_auto, unsafety, tps, bounds, items)))\n         }\n     }\n@@ -892,38 +907,48 @@ impl<'a> Parser<'a> {\n     /// ```\n     fn parse_item_foreign_mod(&mut self, attrs: &mut Vec<Attribute>) -> PResult<'a, ItemInfo> {\n         let abi = self.parse_abi(); // ABI?\n-        let items = self.parse_item_list(attrs, |p, at_end| p.parse_foreign_item(at_end))?;\n+        let items = self.parse_item_list(attrs, |p, _| p.parse_foreign_item())?;\n         let module = ast::ForeignMod { abi, items };\n         Ok((Ident::invalid(), ItemKind::ForeignMod(module)))\n     }\n \n     /// Parses a foreign item (one in an `extern { ... }` block).\n-    pub fn parse_foreign_item(&mut self, at_end: &mut bool) -> PResult<'a, P<ForeignItem>> {\n-        maybe_whole!(self, NtForeignItem, |ni| ni);\n+    pub fn parse_foreign_item(&mut self) -> PResult<'a, Option<Option<P<ForeignItem>>>> {\n+        maybe_whole!(self, NtForeignItem, |item| Some(Some(item)));\n \n-        let mut attrs = self.parse_outer_attributes()?;\n-        let lo = self.token.span;\n-        let vis = self.parse_visibility(FollowedByType::No)?;\n-        let (ident, kind) = self.parse_assoc_item_kind(at_end, &mut attrs, |_| true, &vis)?;\n-        let item = self.mk_item(lo, ident, kind, vis, Defaultness::Final, attrs);\n-        self.error_on_foreign_const(&item);\n-        Ok(P(item))\n+        let attrs = self.parse_outer_attributes()?;\n+        let it = self.parse_item_common(attrs, true, false)?;\n+        Ok(it.map(|Item { attrs, id, span, vis, ident, defaultness, kind, tokens }| {\n+            self.error_on_illegal_default(defaultness);\n+            let kind = match kind {\n+                ItemKind::Mac(a) => AssocItemKind::Macro(a),\n+                ItemKind::Fn(a, b, c) => AssocItemKind::Fn(a, b, c),\n+                ItemKind::TyAlias(a, b, c) => AssocItemKind::TyAlias(a, b, c),\n+                ItemKind::Static(a, b, c) => AssocItemKind::Static(a, b, c),\n+                ItemKind::Const(a, b) => {\n+                    self.error_on_foreign_const(span, ident);\n+                    AssocItemKind::Static(a, Mutability::Not, b)\n+                }\n+                _ => {\n+                    let span = self.sess.source_map().def_span(span);\n+                    self.struct_span_err(span, \"item kind not supported in `extern` block\").emit();\n+                    return None;\n+                }\n+            };\n+            Some(P(Item { attrs, id, span, vis, ident, defaultness, kind, tokens }))\n+        }))\n     }\n \n-    fn error_on_foreign_const(&self, item: &ForeignItem) {\n-        if let AssocItemKind::Const(..) = item.kind {\n-            self.struct_span_err(item.ident.span, \"extern items cannot be `const`\")\n-                .span_suggestion(\n-                    item.span.with_hi(item.ident.span.lo()),\n-                    \"try using a static value\",\n-                    \"static \".to_string(),\n-                    Applicability::MachineApplicable,\n-                )\n-                .note(\n-                    \"for more information, visit https://doc.rust-lang.org/std/keyword.extern.html\",\n-                )\n-                .emit();\n-        }\n+    fn error_on_foreign_const(&self, span: Span, ident: Ident) {\n+        self.struct_span_err(ident.span, \"extern items cannot be `const`\")\n+            .span_suggestion(\n+                span.with_hi(ident.span.lo()),\n+                \"try using a static value\",\n+                \"static \".to_string(),\n+                Applicability::MachineApplicable,\n+            )\n+            .note(\"for more information, visit https://doc.rust-lang.org/std/keyword.extern.html\")\n+            .emit();\n     }\n \n     fn is_static_global(&mut self) -> bool {"}, {"sha": "b24d7e1f6bee5681880f68b882381289b43cb887", "filename": "src/test/ui/macros/issue-54441.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a63f35daeefc4ae89ba5b6bd0323d97bb0d050e6/src%2Ftest%2Fui%2Fmacros%2Fissue-54441.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a63f35daeefc4ae89ba5b6bd0323d97bb0d050e6/src%2Ftest%2Fui%2Fmacros%2Fissue-54441.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-54441.rs?ref=a63f35daeefc4ae89ba5b6bd0323d97bb0d050e6", "patch": "@@ -1,7 +1,6 @@\n macro_rules! m {\n-    //~^ ERROR missing `fn`, `type`, `const`, or `static` for item declaration\n     () => {\n-        let\n+        let //~ ERROR macro expansion ignores token `let` and any following\n     };\n }\n "}, {"sha": "752916e665560d88a13e016f37efd88eb46b6977", "filename": "src/test/ui/macros/issue-54441.stderr", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a63f35daeefc4ae89ba5b6bd0323d97bb0d050e6/src%2Ftest%2Fui%2Fmacros%2Fissue-54441.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a63f35daeefc4ae89ba5b6bd0323d97bb0d050e6/src%2Ftest%2Fui%2Fmacros%2Fissue-54441.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-54441.stderr?ref=a63f35daeefc4ae89ba5b6bd0323d97bb0d050e6", "patch": "@@ -1,11 +1,13 @@\n-error: missing `fn`, `type`, `const`, or `static` for item declaration\n-  --> $DIR/issue-54441.rs:1:1\n+error: macro expansion ignores token `let` and any following\n+  --> $DIR/issue-54441.rs:3:9\n    |\n-LL | / macro_rules! m {\n-LL | |\n-LL | |     () => {\n-LL | |         let\n-   | |________^ missing `fn`, `type`, `const`, or `static`\n+LL |         let\n+   |         ^^^\n+...\n+LL |     m!();\n+   |     ----- caused by the macro expansion here\n+   |\n+   = note: the usage of `m!` is likely invalid in foreign item context\n \n error: aborting due to previous error\n "}, {"sha": "0fe20473587ca31840529d98341101c412b5ee64", "filename": "src/test/ui/parser/default-on-wrong-item-kind.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/a63f35daeefc4ae89ba5b6bd0323d97bb0d050e6/src%2Ftest%2Fui%2Fparser%2Fdefault-on-wrong-item-kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a63f35daeefc4ae89ba5b6bd0323d97bb0d050e6/src%2Ftest%2Fui%2Fparser%2Fdefault-on-wrong-item-kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdefault-on-wrong-item-kind.rs?ref=a63f35daeefc4ae89ba5b6bd0323d97bb0d050e6", "patch": "@@ -1,5 +1,6 @@\n // Test parsing for `default` where it doesn't belong.\n // Specifically, we are interested in kinds of items or items in certain contexts.\n+// Also test item kinds in `extern` blocks and associated contexts which are not allowed there.\n \n fn main() {}\n \n@@ -24,3 +25,38 @@ mod free_items {\n     default macro foo {} //~ ERROR item cannot be `default`\n     default macro_rules! foo {} //~ ERROR item cannot be `default`\n }\n+\n+#[cfg(FALSE)]\n+extern \"C\" {\n+    default extern crate foo; //~ ERROR item cannot be `default`\n+    //~^ ERROR item kind not supported in `extern` block\n+    default use foo; //~ ERROR item cannot be `default`\n+    //~^ ERROR item kind not supported in `extern` block\n+    default static foo: u8; //~ ERROR item cannot be `default`\n+    default const foo: u8; //~ ERROR item cannot be `default`\n+    //~^ ERROR extern items cannot be `const`\n+    default fn foo(); //~ ERROR item cannot be `default`\n+    default mod foo {} //~ ERROR item cannot be `default`\n+    //~^ ERROR item kind not supported in `extern` block\n+    default extern \"C\" {} //~ ERROR item cannot be `default`\n+    //~^ ERROR item kind not supported in `extern` block\n+    default type foo = u8; //~ ERROR item cannot be `default`\n+    default enum foo {} //~ ERROR item cannot be `default`\n+    //~^ ERROR item kind not supported in `extern` block\n+    default struct foo {} //~ ERROR item cannot be `default`\n+    //~^ ERROR item kind not supported in `extern` block\n+    default union foo {} //~ ERROR item cannot be `default`\n+    //~^ ERROR item kind not supported in `extern` block\n+    default trait foo {} //~ ERROR item cannot be `default`\n+    //~^ ERROR item kind not supported in `extern` block\n+    default trait foo = Ord; //~ ERROR item cannot be `default`\n+    //~^ ERROR item kind not supported in `extern` block\n+    default impl foo {}\n+    //~^ ERROR item kind not supported in `extern` block\n+    default!();\n+    default::foo::bar!();\n+    default macro foo {} //~ ERROR item cannot be `default`\n+    //~^ ERROR item kind not supported in `extern` block\n+    default macro_rules! foo {} //~ ERROR item cannot be `default`\n+    //~^ ERROR item kind not supported in `extern` block\n+}"}, {"sha": "e089bbbddde9168192d31164c6605d16daf7bc47", "filename": "src/test/ui/parser/default-on-wrong-item-kind.stderr", "status": "modified", "additions": 218, "deletions": 16, "changes": 234, "blob_url": "https://github.com/rust-lang/rust/blob/a63f35daeefc4ae89ba5b6bd0323d97bb0d050e6/src%2Ftest%2Fui%2Fparser%2Fdefault-on-wrong-item-kind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a63f35daeefc4ae89ba5b6bd0323d97bb0d050e6/src%2Ftest%2Fui%2Fparser%2Fdefault-on-wrong-item-kind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdefault-on-wrong-item-kind.stderr?ref=a63f35daeefc4ae89ba5b6bd0323d97bb0d050e6", "patch": "@@ -1,122 +1,324 @@\n error: item cannot be `default`\n-  --> $DIR/default-on-wrong-item-kind.rs:8:5\n+  --> $DIR/default-on-wrong-item-kind.rs:9:5\n    |\n LL |     default extern crate foo;\n    |     ^^^^^^^ `default` because of this\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n error: item cannot be `default`\n-  --> $DIR/default-on-wrong-item-kind.rs:9:5\n+  --> $DIR/default-on-wrong-item-kind.rs:10:5\n    |\n LL |     default use foo;\n    |     ^^^^^^^ `default` because of this\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n error: item cannot be `default`\n-  --> $DIR/default-on-wrong-item-kind.rs:10:5\n+  --> $DIR/default-on-wrong-item-kind.rs:11:5\n    |\n LL |     default static foo: u8;\n    |     ^^^^^^^ `default` because of this\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n error: item cannot be `default`\n-  --> $DIR/default-on-wrong-item-kind.rs:11:5\n+  --> $DIR/default-on-wrong-item-kind.rs:12:5\n    |\n LL |     default const foo: u8;\n    |     ^^^^^^^ `default` because of this\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n error: item cannot be `default`\n-  --> $DIR/default-on-wrong-item-kind.rs:12:5\n+  --> $DIR/default-on-wrong-item-kind.rs:13:5\n    |\n LL |     default fn foo();\n    |     ^^^^^^^ `default` because of this\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n error: item cannot be `default`\n-  --> $DIR/default-on-wrong-item-kind.rs:13:5\n+  --> $DIR/default-on-wrong-item-kind.rs:14:5\n    |\n LL |     default mod foo {}\n    |     ^^^^^^^ `default` because of this\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n error: item cannot be `default`\n-  --> $DIR/default-on-wrong-item-kind.rs:14:5\n+  --> $DIR/default-on-wrong-item-kind.rs:15:5\n    |\n LL |     default extern \"C\" {}\n    |     ^^^^^^^ `default` because of this\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n error: item cannot be `default`\n-  --> $DIR/default-on-wrong-item-kind.rs:15:5\n+  --> $DIR/default-on-wrong-item-kind.rs:16:5\n    |\n LL |     default type foo = u8;\n    |     ^^^^^^^ `default` because of this\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n error: item cannot be `default`\n-  --> $DIR/default-on-wrong-item-kind.rs:16:5\n+  --> $DIR/default-on-wrong-item-kind.rs:17:5\n    |\n LL |     default enum foo {}\n    |     ^^^^^^^ `default` because of this\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n error: item cannot be `default`\n-  --> $DIR/default-on-wrong-item-kind.rs:17:5\n+  --> $DIR/default-on-wrong-item-kind.rs:18:5\n    |\n LL |     default struct foo {}\n    |     ^^^^^^^ `default` because of this\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n error: item cannot be `default`\n-  --> $DIR/default-on-wrong-item-kind.rs:18:5\n+  --> $DIR/default-on-wrong-item-kind.rs:19:5\n    |\n LL |     default union foo {}\n    |     ^^^^^^^ `default` because of this\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n error: item cannot be `default`\n-  --> $DIR/default-on-wrong-item-kind.rs:19:5\n+  --> $DIR/default-on-wrong-item-kind.rs:20:5\n    |\n LL |     default trait foo {}\n    |     ^^^^^^^ `default` because of this\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n error: item cannot be `default`\n-  --> $DIR/default-on-wrong-item-kind.rs:20:5\n+  --> $DIR/default-on-wrong-item-kind.rs:21:5\n    |\n LL |     default trait foo = Ord;\n    |     ^^^^^^^ `default` because of this\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n error: item cannot be `default`\n-  --> $DIR/default-on-wrong-item-kind.rs:24:5\n+  --> $DIR/default-on-wrong-item-kind.rs:25:5\n    |\n LL |     default macro foo {}\n    |     ^^^^^^^ `default` because of this\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n error: item cannot be `default`\n-  --> $DIR/default-on-wrong-item-kind.rs:25:5\n+  --> $DIR/default-on-wrong-item-kind.rs:26:5\n+   |\n+LL |     default macro_rules! foo {}\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n+error: item cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:31:5\n+   |\n+LL |     default extern crate foo;\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n+error: item kind not supported in `extern` block\n+  --> $DIR/default-on-wrong-item-kind.rs:31:5\n+   |\n+LL |     default extern crate foo;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: item cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:33:5\n+   |\n+LL |     default use foo;\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n+error: item kind not supported in `extern` block\n+  --> $DIR/default-on-wrong-item-kind.rs:33:5\n+   |\n+LL |     default use foo;\n+   |     ^^^^^^^^^^^^^^^^\n+\n+error: item cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:35:5\n+   |\n+LL |     default static foo: u8;\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n+error: item cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:36:5\n+   |\n+LL |     default const foo: u8;\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n+error: extern items cannot be `const`\n+  --> $DIR/default-on-wrong-item-kind.rs:36:19\n+   |\n+LL |     default const foo: u8;\n+   |     --------------^^^\n+   |     |\n+   |     help: try using a static value: `static`\n+   |\n+   = note: for more information, visit https://doc.rust-lang.org/std/keyword.extern.html\n+\n+error: item cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:38:5\n+   |\n+LL |     default fn foo();\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n+error: item cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:39:5\n+   |\n+LL |     default mod foo {}\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n+error: item kind not supported in `extern` block\n+  --> $DIR/default-on-wrong-item-kind.rs:39:5\n+   |\n+LL |     default mod foo {}\n+   |     ^^^^^^^^^^^^^^^\n+\n+error: item cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:41:5\n+   |\n+LL |     default extern \"C\" {}\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n+error: item kind not supported in `extern` block\n+  --> $DIR/default-on-wrong-item-kind.rs:41:5\n+   |\n+LL |     default extern \"C\" {}\n+   |     ^^^^^^^^^^^^^^^^^^\n+\n+error: item cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:43:5\n+   |\n+LL |     default type foo = u8;\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n+error: item cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:44:5\n+   |\n+LL |     default enum foo {}\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n+error: item kind not supported in `extern` block\n+  --> $DIR/default-on-wrong-item-kind.rs:44:5\n+   |\n+LL |     default enum foo {}\n+   |     ^^^^^^^^^^^^^^^^\n+\n+error: item cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:46:5\n+   |\n+LL |     default struct foo {}\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n+error: item kind not supported in `extern` block\n+  --> $DIR/default-on-wrong-item-kind.rs:46:5\n+   |\n+LL |     default struct foo {}\n+   |     ^^^^^^^^^^^^^^^^^^\n+\n+error: item cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:48:5\n+   |\n+LL |     default union foo {}\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n+error: item kind not supported in `extern` block\n+  --> $DIR/default-on-wrong-item-kind.rs:48:5\n+   |\n+LL |     default union foo {}\n+   |     ^^^^^^^^^^^^^^^^^\n+\n+error: item cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:50:5\n+   |\n+LL |     default trait foo {}\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n+error: item kind not supported in `extern` block\n+  --> $DIR/default-on-wrong-item-kind.rs:50:5\n+   |\n+LL |     default trait foo {}\n+   |     ^^^^^^^^^^^^^^^^^\n+\n+error: item cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:52:5\n+   |\n+LL |     default trait foo = Ord;\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n+error: item kind not supported in `extern` block\n+  --> $DIR/default-on-wrong-item-kind.rs:52:5\n+   |\n+LL |     default trait foo = Ord;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: item kind not supported in `extern` block\n+  --> $DIR/default-on-wrong-item-kind.rs:54:5\n+   |\n+LL |     default impl foo {}\n+   |     ^^^^^^^^^^^^^^^^\n+\n+error: item cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:58:5\n+   |\n+LL |     default macro foo {}\n+   |     ^^^^^^^ `default` because of this\n+   |\n+   = note: only associated `fn`, `const`, and `type` items can be `default`\n+\n+error: item kind not supported in `extern` block\n+  --> $DIR/default-on-wrong-item-kind.rs:58:5\n+   |\n+LL |     default macro foo {}\n+   |     ^^^^^^^^^^^^^^^^^\n+\n+error: item cannot be `default`\n+  --> $DIR/default-on-wrong-item-kind.rs:60:5\n    |\n LL |     default macro_rules! foo {}\n    |     ^^^^^^^ `default` because of this\n    |\n    = note: only associated `fn`, `const`, and `type` items can be `default`\n \n-error: aborting due to 15 previous errors\n+error: item kind not supported in `extern` block\n+  --> $DIR/default-on-wrong-item-kind.rs:60:5\n+   |\n+LL |     default macro_rules! foo {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 43 previous errors\n "}, {"sha": "fbf87a892f0dabb4d057938f10a135446125ceb0", "filename": "src/test/ui/parser/default-unmatched-extern.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a63f35daeefc4ae89ba5b6bd0323d97bb0d050e6/src%2Ftest%2Fui%2Fparser%2Fdefault-unmatched-extern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a63f35daeefc4ae89ba5b6bd0323d97bb0d050e6/src%2Ftest%2Fui%2Fparser%2Fdefault-unmatched-extern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdefault-unmatched-extern.rs?ref=a63f35daeefc4ae89ba5b6bd0323d97bb0d050e6", "patch": "@@ -0,0 +1,8 @@\n+fn main() {}\n+\n+extern \"C\" {\n+    default!(); //~ ERROR cannot find macro `default` in this scope\n+    default do\n+    //~^ ERROR unmatched `default`\n+    //~| ERROR non-item in item list\n+}"}, {"sha": "00c8898e2ce8263bd8b6ab66b84c7373066f9e19", "filename": "src/test/ui/parser/default-unmatched-extern.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a63f35daeefc4ae89ba5b6bd0323d97bb0d050e6/src%2Ftest%2Fui%2Fparser%2Fdefault-unmatched-extern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a63f35daeefc4ae89ba5b6bd0323d97bb0d050e6/src%2Ftest%2Fui%2Fparser%2Fdefault-unmatched-extern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdefault-unmatched-extern.stderr?ref=a63f35daeefc4ae89ba5b6bd0323d97bb0d050e6", "patch": "@@ -0,0 +1,26 @@\n+error: unmatched `default`\n+  --> $DIR/default-unmatched-extern.rs:5:5\n+   |\n+LL |     default do\n+   |     ^^^^^^^ the unmatched `default`\n+\n+error: non-item in item list\n+  --> $DIR/default-unmatched-extern.rs:5:13\n+   |\n+LL | extern \"C\" {\n+   |            - item list starts here\n+LL |     default!();\n+LL |     default do\n+   |             ^^ non-item starts here\n+...\n+LL | }\n+   | - item list ends here\n+\n+error: cannot find macro `default` in this scope\n+  --> $DIR/default-unmatched-extern.rs:4:5\n+   |\n+LL |     default!();\n+   |     ^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "949b6e1dc24f4325afec2c256a593e76e023a538", "filename": "src/test/ui/parser/duplicate-visibility.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a63f35daeefc4ae89ba5b6bd0323d97bb0d050e6/src%2Ftest%2Fui%2Fparser%2Fduplicate-visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a63f35daeefc4ae89ba5b6bd0323d97bb0d050e6/src%2Ftest%2Fui%2Fparser%2Fduplicate-visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fduplicate-visibility.rs?ref=a63f35daeefc4ae89ba5b6bd0323d97bb0d050e6", "patch": "@@ -2,5 +2,6 @@ fn main() {}\n \n extern {\n     pub pub fn foo();\n-    //~^ ERROR missing `fn`, `type`, `const`, or `static` for item declaration\n+    //~^ ERROR unmatched visibility `pub`\n+    //~| ERROR non-item in item list\n }"}, {"sha": "2c79a343d0578399b6170e02ede8ac2464e8f1a9", "filename": "src/test/ui/parser/duplicate-visibility.stderr", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a63f35daeefc4ae89ba5b6bd0323d97bb0d050e6/src%2Ftest%2Fui%2Fparser%2Fduplicate-visibility.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a63f35daeefc4ae89ba5b6bd0323d97bb0d050e6/src%2Ftest%2Fui%2Fparser%2Fduplicate-visibility.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fduplicate-visibility.stderr?ref=a63f35daeefc4ae89ba5b6bd0323d97bb0d050e6", "patch": "@@ -1,8 +1,21 @@\n-error: missing `fn`, `type`, `const`, or `static` for item declaration\n-  --> $DIR/duplicate-visibility.rs:4:8\n+error: unmatched visibility `pub`\n+  --> $DIR/duplicate-visibility.rs:4:5\n    |\n LL |     pub pub fn foo();\n-   |        ^ missing `fn`, `type`, `const`, or `static`\n+   |     ^^^ the unmatched visibility\n+   |\n+   = help: you likely meant to define an item, e.g., `pub fn foo() {}`\n+\n+error: non-item in item list\n+  --> $DIR/duplicate-visibility.rs:4:9\n+   |\n+LL | extern {\n+   |        - item list starts here\n+LL |     pub pub fn foo();\n+   |         ^^^ non-item starts here\n+...\n+LL | }\n+   | - item list ends here\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n "}, {"sha": "d9f35e0eb5cfc013d18ca50e4210bf7d4f68ec0a", "filename": "src/test/ui/parser/extern-no-fn.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a63f35daeefc4ae89ba5b6bd0323d97bb0d050e6/src%2Ftest%2Fui%2Fparser%2Fextern-no-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a63f35daeefc4ae89ba5b6bd0323d97bb0d050e6/src%2Ftest%2Fui%2Fparser%2Fextern-no-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fextern-no-fn.rs?ref=a63f35daeefc4ae89ba5b6bd0323d97bb0d050e6", "patch": "@@ -1,6 +1,5 @@\n extern {\n-//~^ ERROR missing `fn`, `type`, `const`, or `static` for item declaration\n-    f();\n+    f(); //~ ERROR expected one of `!` or `::`, found `(`\n }\n \n fn main() {"}, {"sha": "023201250148e2041e9246c89f4c206c548e2e23", "filename": "src/test/ui/parser/extern-no-fn.stderr", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a63f35daeefc4ae89ba5b6bd0323d97bb0d050e6/src%2Ftest%2Fui%2Fparser%2Fextern-no-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a63f35daeefc4ae89ba5b6bd0323d97bb0d050e6/src%2Ftest%2Fui%2Fparser%2Fextern-no-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fextern-no-fn.stderr?ref=a63f35daeefc4ae89ba5b6bd0323d97bb0d050e6", "patch": "@@ -1,11 +1,8 @@\n-error: missing `fn`, `type`, `const`, or `static` for item declaration\n-  --> $DIR/extern-no-fn.rs:1:9\n+error: expected one of `!` or `::`, found `(`\n+  --> $DIR/extern-no-fn.rs:2:6\n    |\n-LL |   extern {\n-   |  _________^\n-LL | |\n-LL | |     f();\n-   | |____^ missing `fn`, `type`, `const`, or `static`\n+LL |     f();\n+   |      ^ expected one of `!` or `::`\n \n error: aborting due to previous error\n "}, {"sha": "82978e655ba38b73f73aef57e779178e5be94660", "filename": "src/test/ui/parser/foreign-const-semantic-fail.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a63f35daeefc4ae89ba5b6bd0323d97bb0d050e6/src%2Ftest%2Fui%2Fparser%2Fforeign-const-semantic-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a63f35daeefc4ae89ba5b6bd0323d97bb0d050e6/src%2Ftest%2Fui%2Fparser%2Fforeign-const-semantic-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fforeign-const-semantic-fail.rs?ref=a63f35daeefc4ae89ba5b6bd0323d97bb0d050e6", "patch": "@@ -5,4 +5,5 @@ extern {\n     //~^ ERROR extern items cannot be `const`\n     const B: isize = 42;\n     //~^ ERROR extern items cannot be `const`\n+    //~| ERROR incorrect `static` inside `extern` block\n }"}, {"sha": "f529b3ad87b2f9b8e56202f04d0faef8e08a99cc", "filename": "src/test/ui/parser/foreign-const-semantic-fail.stderr", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a63f35daeefc4ae89ba5b6bd0323d97bb0d050e6/src%2Ftest%2Fui%2Fparser%2Fforeign-const-semantic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a63f35daeefc4ae89ba5b6bd0323d97bb0d050e6/src%2Ftest%2Fui%2Fparser%2Fforeign-const-semantic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fforeign-const-semantic-fail.stderr?ref=a63f35daeefc4ae89ba5b6bd0323d97bb0d050e6", "patch": "@@ -18,5 +18,18 @@ LL |     const B: isize = 42;\n    |\n    = note: for more information, visit https://doc.rust-lang.org/std/keyword.extern.html\n \n-error: aborting due to 2 previous errors\n+error: incorrect `static` inside `extern` block\n+  --> $DIR/foreign-const-semantic-fail.rs:6:11\n+   |\n+LL | extern {\n+   | ------ `extern` blocks define existing foreign statics and statics inside of them cannot have a body\n+...\n+LL |     const B: isize = 42;\n+   |           ^          -- the invalid body\n+   |           |\n+   |           cannot have a body\n+   |\n+   = note: for more information, visit https://doc.rust-lang.org/std/keyword.extern.html\n+\n+error: aborting due to 3 previous errors\n "}]}