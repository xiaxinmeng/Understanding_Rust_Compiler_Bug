{"sha": "0e94d07b9c6f75657ab07dbf4a42a6d2c08a139a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlOTRkMDdiOWM2Zjc1NjU3YWIwN2RiZjRhNDJhNmQyYzA4YTEzOWE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-08-03T20:07:07Z"}, "committer": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-08-03T20:07:07Z"}, "message": "Merge #1638\n\n1638: Avoid cloning a TtToken in SubtreeTokenSource::mk_token r=matklad a=lnicola\n\nAccording to `perf record`, this function is the hottest one while running `ra_cli analysis-stats`:\r\n\r\nBefore:\r\n\r\n```\r\n6.05%  ra_cli  ra_cli        <ra_mbe::subtree_source::SubtreeTokenSource as ra_parser::TokenSource>::lookahead_nth\r\n5.56%  ra_cli  ra_cli        <rowan::green::GreenNode as core::hash::Hash>::hash\r\n4.16%  ra_cli  libc-2.29.so  _int_malloc\r\n3.93%  ra_cli  ra_cli        ra_mbe::subtree_source::SubtreeTokenSource::get\r\n\r\nDatabase loaded, 255 roots, 231.676882ms\r\nCrates in this dir: 27\r\nTotal modules found: 282\r\nTotal declarations: 9642\r\nTotal functions: 3287\r\nTotal expressions: 64616\r\nExpressions of unknown type: 9111 (14%)\r\nExpressions of partially unknown type: 3417 (5%)\r\nAnalysis: 24.012797561s, 0b allocated 0b resident\r\ntarget/release/ra_cli analysis-stats  24.60s user 0.56s system 100% cpu 25.125 total\r\n```\r\n\r\nAfter:\r\n\r\n```\r\n5.85%  ra_cli  ra_cli        <rowan::green::GreenNode as core::hash::Hash>::hash\r\n4.55%  ra_cli  libc-2.29.so  _int_malloc\r\n4.31%  ra_cli  ra_cli        ra_parser::parser::Parser::nth\r\n3.61%  ra_cli  ra_cli        <ra_syntax::parsing::text_token_source::TextTokenSource as ra_parser::TokenSource>::lookahead_nth\r\n3.54%  ra_cli  ra_cli        ra_syntax::syntax_node::SyntaxTreeBuilder::finish_node\r\n3.46%  ra_cli  libc-2.29.so  _int_free\r\n3.12%  ra_cli  libc-2.29.so  malloc\r\n2.76%  ra_cli  ra_cli        ra_parser::event::process\r\n2.68%  ra_cli  ra_cli        alloc::sync::Arc<T>::drop_slow\r\n2.50%  ra_cli  ra_cli        ra_mbe::subtree_source::SubtreeTokenSource::get\r\n2.31%  ra_cli  ra_cli        <smol_str::SmolStr as core::hash::Hash>::hash\r\n2.04%  ra_cli  libc-2.29.so  __memmove_avx_unaligned_erms\r\n1.92%  ra_cli  ra_cli        <ra_mbe::subtree_source::SubtreeTokenSource as ra_parser::TokenSource>::lookahead_nth\r\n\r\nDatabase loaded, 255 roots, 236.176803ms\r\nCrates in this dir: 27\r\nTotal modules found: 282\r\nTotal declarations: 9642\r\nTotal functions: 3287\r\nTotal expressions: 64620\r\nExpressions of unknown type: 9107 (14%)\r\nExpressions of partially unknown type: 3425 (5%)\r\nAnalysis: 22.562328486s, 0b allocated 0b resident\r\ntarget/release/ra_cli analysis-stats  23.12s user 0.57s system 100% cpu 23.659 total\r\n```\r\n\r\nr? @edwin0cheng, @matklad \n\nCo-authored-by: Lauren\u021biu Nicola <lnicola@dend.ro>", "tree": {"sha": "4eb35b21ec2411778eb675e88c8bbd7900c65b47", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4eb35b21ec2411778eb675e88c8bbd7900c65b47"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e94d07b9c6f75657ab07dbf4a42a6d2c08a139a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e94d07b9c6f75657ab07dbf4a42a6d2c08a139a", "html_url": "https://github.com/rust-lang/rust/commit/0e94d07b9c6f75657ab07dbf4a42a6d2c08a139a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e94d07b9c6f75657ab07dbf4a42a6d2c08a139a/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "c5bdd02503b782eb8406cfdb2692ef51c05d5f48", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5bdd02503b782eb8406cfdb2692ef51c05d5f48", "html_url": "https://github.com/rust-lang/rust/commit/c5bdd02503b782eb8406cfdb2692ef51c05d5f48"}, {"sha": "f52437371f9e82cc0ceb6c2f5e48e23d405faf5e", "url": "https://api.github.com/repos/rust-lang/rust/commits/f52437371f9e82cc0ceb6c2f5e48e23d405faf5e", "html_url": "https://github.com/rust-lang/rust/commit/f52437371f9e82cc0ceb6c2f5e48e23d405faf5e"}], "stats": {"total": 62, "additions": 32, "deletions": 30}, "files": [{"sha": "9d6d0133f90e70f07ea6c149eea7ec39bf12b5da", "filename": "crates/ra_mbe/src/subtree_source.rs", "status": "modified", "additions": 32, "deletions": 30, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/0e94d07b9c6f75657ab07dbf4a42a6d2c08a139a/crates%2Fra_mbe%2Fsrc%2Fsubtree_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e94d07b9c6f75657ab07dbf4a42a6d2c08a139a/crates%2Fra_mbe%2Fsrc%2Fsubtree_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fsubtree_source.rs?ref=0e94d07b9c6f75657ab07dbf4a42a6d2c08a139a", "patch": "@@ -1,6 +1,6 @@\n use ra_parser::{Token, TokenSource};\n use ra_syntax::{classify_literal, SmolStr, SyntaxKind, SyntaxKind::*, T};\n-use std::cell::{Cell, RefCell};\n+use std::cell::{Cell, Ref, RefCell};\n use tt::buffer::{Cursor, TokenBuffer};\n \n #[derive(Debug, Clone, Eq, PartialEq)]\n@@ -20,8 +20,8 @@ impl<'a> SubtreeTokenSource<'a> {\n     // Helper function used in test\n     #[cfg(test)]\n     pub fn text(&self) -> SmolStr {\n-        match self.get(self.curr.1) {\n-            Some(tt) => tt.text,\n+        match *self.get(self.curr.1) {\n+            Some(ref tt) => tt.text.clone(),\n             _ => SmolStr::new(\"\"),\n         }\n     }\n@@ -41,44 +41,46 @@ impl<'a> SubtreeTokenSource<'a> {\n     }\n \n     fn mk_token(&self, pos: usize) -> Token {\n-        match self.get(pos) {\n-            Some(tt) => Token { kind: tt.kind, is_jointed_to_next: tt.is_joint_to_next },\n+        match *self.get(pos) {\n+            Some(ref tt) => Token { kind: tt.kind, is_jointed_to_next: tt.is_joint_to_next },\n             None => Token { kind: EOF, is_jointed_to_next: false },\n         }\n     }\n \n-    fn get(&self, pos: usize) -> Option<TtToken> {\n-        let mut cached = self.cached.borrow_mut();\n-        if pos < cached.len() {\n-            return cached[pos].clone();\n+    fn get(&self, pos: usize) -> Ref<Option<TtToken>> {\n+        if pos < self.cached.borrow().len() {\n+            return Ref::map(self.cached.borrow(), |c| &c[pos]);\n         }\n \n-        while pos >= cached.len() {\n-            let cursor = self.cached_cursor.get();\n-            if cursor.eof() {\n-                cached.push(None);\n-                continue;\n-            }\n-\n-            match cursor.token_tree() {\n-                Some(tt::TokenTree::Leaf(leaf)) => {\n-                    cached.push(Some(convert_leaf(&leaf)));\n-                    self.cached_cursor.set(cursor.bump());\n-                }\n-                Some(tt::TokenTree::Subtree(subtree)) => {\n-                    self.cached_cursor.set(cursor.subtree().unwrap());\n-                    cached.push(Some(convert_delim(subtree.delimiter, false)));\n+        {\n+            let mut cached = self.cached.borrow_mut();\n+            while pos >= cached.len() {\n+                let cursor = self.cached_cursor.get();\n+                if cursor.eof() {\n+                    cached.push(None);\n+                    continue;\n                 }\n-                None => {\n-                    if let Some(subtree) = cursor.end() {\n-                        cached.push(Some(convert_delim(subtree.delimiter, true)));\n+\n+                match cursor.token_tree() {\n+                    Some(tt::TokenTree::Leaf(leaf)) => {\n+                        cached.push(Some(convert_leaf(&leaf)));\n                         self.cached_cursor.set(cursor.bump());\n                     }\n+                    Some(tt::TokenTree::Subtree(subtree)) => {\n+                        self.cached_cursor.set(cursor.subtree().unwrap());\n+                        cached.push(Some(convert_delim(subtree.delimiter, false)));\n+                    }\n+                    None => {\n+                        if let Some(subtree) = cursor.end() {\n+                            cached.push(Some(convert_delim(subtree.delimiter, true)));\n+                            self.cached_cursor.set(cursor.bump());\n+                        }\n+                    }\n                 }\n             }\n         }\n \n-        cached[pos].clone()\n+        Ref::map(self.cached.borrow(), |c| &c[pos])\n     }\n }\n \n@@ -103,8 +105,8 @@ impl<'a> TokenSource for SubtreeTokenSource<'a> {\n \n     /// Is the current token a specified keyword?\n     fn is_keyword(&self, kw: &str) -> bool {\n-        match self.get(self.curr.1) {\n-            Some(t) => t.text == *kw,\n+        match *self.get(self.curr.1) {\n+            Some(ref t) => t.text == *kw,\n             _ => false,\n         }\n     }"}]}