{"sha": "bc543d7e6c4c87f99eea4dc6217eee54cd7f18b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjNTQzZDdlNmM0Yzg3Zjk5ZWVhNGRjNjIxN2VlZTU0Y2Q3ZjE4YjE=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-11-19T10:19:14Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-11-19T10:19:14Z"}, "message": "Allow assignments in const contexts", "tree": {"sha": "004e4cf471dedefe96c08af34770b23af4814813", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/004e4cf471dedefe96c08af34770b23af4814813"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc543d7e6c4c87f99eea4dc6217eee54cd7f18b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc543d7e6c4c87f99eea4dc6217eee54cd7f18b1", "html_url": "https://github.com/rust-lang/rust/commit/bc543d7e6c4c87f99eea4dc6217eee54cd7f18b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc543d7e6c4c87f99eea4dc6217eee54cd7f18b1/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e82eda000c8d4abbdaa76b3563cd77f938fc411", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e82eda000c8d4abbdaa76b3563cd77f938fc411", "html_url": "https://github.com/rust-lang/rust/commit/7e82eda000c8d4abbdaa76b3563cd77f938fc411"}], "stats": {"total": 165, "additions": 143, "deletions": 22}, "files": [{"sha": "31a0dc1494ce148d8bbb2d67ac061e05c85aa234", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 28, "deletions": 6, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/bc543d7e6c4c87f99eea4dc6217eee54cd7f18b1/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc543d7e6c4c87f99eea4dc6217eee54cd7f18b1/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=bc543d7e6c4c87f99eea4dc6217eee54cd7f18b1", "patch": "@@ -243,13 +243,29 @@ impl<'a, 'tcx> Qualifier<'a, 'tcx, 'tcx> {\n             return;\n         }\n \n+        if self.tcx.features().const_let {\n+            let mut dest = dest;\n+            let index = loop {\n+                match dest {\n+                    Place::Local(index) => break *index,\n+                    Place::Projection(proj) => dest = &proj.base,\n+                    Place::Promoted(..) | Place::Static(..) => {\n+                        // Catch more errors in the destination.\n+                        self.visit_place(\n+                            dest,\n+                            PlaceContext::MutatingUse(MutatingUseContext::Store),\n+                            location\n+                        );\n+                        return;\n+                    }\n+                }\n+            };\n+            debug!(\"store to var {:?}\", index);\n+            self.local_qualif[index] = Some(self.qualif);\n+            return;\n+        }\n+\n         match *dest {\n-            Place::Local(index) if (self.mir.local_kind(index) == LocalKind::Var ||\n-                                   self.mir.local_kind(index) == LocalKind::Arg) &&\n-                                   self.tcx.sess.features_untracked().const_let => {\n-                debug!(\"store to var {:?}\", index);\n-                self.local_qualif[index] = Some(self.qualif);\n-            }\n             Place::Local(index) if self.mir.local_kind(index) == LocalKind::Temp ||\n                                    self.mir.local_kind(index) == LocalKind::ReturnPointer => {\n                 debug!(\"store to {:?} (temp or return pointer)\", index);\n@@ -478,6 +494,12 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n \n                 // Only allow statics (not consts) to refer to other statics.\n                 if self.mode == Mode::Static || self.mode == Mode::StaticMut {\n+                    if context.is_mutating_use() {\n+                        self.tcx.sess.span_err(\n+                            self.span,\n+                            \"cannot mutate statics in the initializer of another static\",\n+                        );\n+                    }\n                     return;\n                 }\n                 self.add(Qualif::NOT_CONST);"}, {"sha": "5113d73b38414c41b8997e127f67846344f7fb26", "filename": "src/test/ui/consts/const-eval/assign-to-static-within-other-static.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/bc543d7e6c4c87f99eea4dc6217eee54cd7f18b1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc543d7e6c4c87f99eea4dc6217eee54cd7f18b1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static.rs?ref=bc543d7e6c4c87f99eea4dc6217eee54cd7f18b1", "patch": "@@ -0,0 +1,35 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// New test for #53818: modifying static memory at compile-time is not allowed.\n+// The test should never compile successfully\n+\n+#![feature(const_raw_ptr_deref)]\n+#![feature(const_let)]\n+\n+use std::cell::UnsafeCell;\n+\n+struct Foo(UnsafeCell<u32>);\n+\n+unsafe impl Send for Foo {}\n+unsafe impl Sync for Foo {}\n+\n+static FOO: Foo = Foo(UnsafeCell::new(42));\n+\n+static BAR: () = unsafe {\n+    *FOO.0.get() = 5;\n+};\n+\n+static mut FOO2: u32 = 42;\n+static BOO2: () = unsafe {\n+    FOO2 = 5;\n+};\n+\n+fn main() {}"}, {"sha": "87f02e8e4cf7ef1384ab0d2bbadd15a9d0b25c47", "filename": "src/test/ui/consts/const-eval/assign-to-static-within-other-static.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bc543d7e6c4c87f99eea4dc6217eee54cd7f18b1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc543d7e6c4c87f99eea4dc6217eee54cd7f18b1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static.stderr?ref=bc543d7e6c4c87f99eea4dc6217eee54cd7f18b1", "patch": "@@ -0,0 +1,8 @@\n+error: cannot mutate statics in the initializer of another static\n+  --> $DIR/assign-to-static-within-other-static.rs:32:5\n+   |\n+LL |     FOO2 = 5;\n+   |     ^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "600931e49a08ed94275ac19592bead56ee379133", "filename": "src/test/ui/consts/const-eval/mod-static-with-const-fn.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bc543d7e6c4c87f99eea4dc6217eee54cd7f18b1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmod-static-with-const-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc543d7e6c4c87f99eea4dc6217eee54cd7f18b1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmod-static-with-const-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmod-static-with-const-fn.rs?ref=bc543d7e6c4c87f99eea4dc6217eee54cd7f18b1", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // New test for #53818: modifying static memory at compile-time is not allowed.\n-// The test should never succeed.\n+// The test should never compile successfully\n \n #![feature(const_raw_ptr_deref)]\n #![feature(const_let)]\n@@ -27,9 +27,6 @@ fn foo() {}\n \n static BAR: () = unsafe {\n     *FOO.0.get() = 5;\n-    //~^ ERROR statements in statics are unstable (see issue #48821)\n-    // This error is caused by a separate bug that the feature gate error is reported\n-    // even though the feature gate \"const_let\" is active.\n \n     foo();\n     //~^ ERROR calls in statics are limited to constant functions, tuple structs and tuple variants"}, {"sha": "899fc24f153a56ea3eb85ee6cb90a2574be19503", "filename": "src/test/ui/consts/const-eval/mod-static-with-const-fn.stderr", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/bc543d7e6c4c87f99eea4dc6217eee54cd7f18b1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmod-static-with-const-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc543d7e6c4c87f99eea4dc6217eee54cd7f18b1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmod-static-with-const-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmod-static-with-const-fn.stderr?ref=bc543d7e6c4c87f99eea4dc6217eee54cd7f18b1", "patch": "@@ -1,18 +1,9 @@\n-error[E0658]: statements in statics are unstable (see issue #48821)\n-  --> $DIR/mod-static-with-const-fn.rs:29:5\n-   |\n-LL |     *FOO.0.get() = 5;\n-   |     ^^^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(const_let)] to the crate attributes to enable\n-\n error[E0015]: calls in statics are limited to constant functions, tuple structs and tuple variants\n-  --> $DIR/mod-static-with-const-fn.rs:34:5\n+  --> $DIR/mod-static-with-const-fn.rs:31:5\n    |\n LL |     foo();\n    |     ^^^^^\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors occurred: E0015, E0658.\n-For more information about an error, try `rustc --explain E0015`.\n+For more information about this error, try `rustc --explain E0015`."}, {"sha": "a3c53a451e106732063ff34e2a8f89fc11fba354", "filename": "src/test/ui/consts/const_let_assign.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bc543d7e6c4c87f99eea4dc6217eee54cd7f18b1/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc543d7e6c4c87f99eea4dc6217eee54cd7f18b1/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign.rs?ref=bc543d7e6c4c87f99eea4dc6217eee54cd7f18b1", "patch": "@@ -0,0 +1,12 @@\n+// compile-pass\n+\n+#![feature(const_let)]\n+\n+struct S(i32);\n+\n+const A: () = {\n+    let mut s = S(0);\n+    s.0 = 1;\n+};\n+\n+fn main() {}"}, {"sha": "0de7396501adc053762a4e2a6b15b06cccd1bdd9", "filename": "src/test/ui/consts/const_let_assign2.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/bc543d7e6c4c87f99eea4dc6217eee54cd7f18b1/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc543d7e6c4c87f99eea4dc6217eee54cd7f18b1/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign2.rs?ref=bc543d7e6c4c87f99eea4dc6217eee54cd7f18b1", "patch": "@@ -0,0 +1,25 @@\n+// compile-pass\n+\n+#![feature(const_let)]\n+#![feature(const_fn)]\n+\n+pub struct AA {\n+    pub data: [u8; 10],\n+}\n+\n+impl AA {\n+    pub const fn new() -> Self {\n+        let mut res: AA = AA { data: [0; 10] };\n+        res.data[0] = 5;\n+        res\n+    }\n+}\n+\n+static mut BB: AA = AA::new();\n+\n+fn main() {\n+    let ptr = unsafe { &mut BB };\n+    for a in ptr.data.iter() {\n+        println!(\"{}\", a);\n+    }\n+}"}, {"sha": "83825456b5c61d9f732303cd858e69afdd6da34f", "filename": "src/test/ui/consts/const_let_assign3.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/bc543d7e6c4c87f99eea4dc6217eee54cd7f18b1/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc543d7e6c4c87f99eea4dc6217eee54cd7f18b1/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign3.rs?ref=bc543d7e6c4c87f99eea4dc6217eee54cd7f18b1", "patch": "@@ -0,0 +1,22 @@\n+#![feature(const_let)]\n+#![feature(const_fn)]\n+\n+struct S {\n+    state: u32,\n+}\n+\n+impl S {\n+    const fn foo(&mut self, x: u32) {\n+        self.state = x;\n+    }\n+}\n+\n+const FOO: S = {\n+    let mut s = S { state: 42 };\n+    s.foo(3); //~ ERROR references in constants may only refer to immutable values\n+    s\n+};\n+\n+fn main() {\n+    assert_eq!(FOO.state, 3);\n+}"}, {"sha": "7f9a953c10fe8ae8b9fe0190b3e5097751aa86a9", "filename": "src/test/ui/consts/const_let_assign3.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bc543d7e6c4c87f99eea4dc6217eee54cd7f18b1/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bc543d7e6c4c87f99eea4dc6217eee54cd7f18b1/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign3.stderr?ref=bc543d7e6c4c87f99eea4dc6217eee54cd7f18b1", "patch": "@@ -0,0 +1,9 @@\n+error[E0017]: references in constants may only refer to immutable values\n+  --> $DIR/const_let_assign3.rs:16:5\n+   |\n+LL |     s.foo(3); //~ ERROR references in constants may only refer to immutable values\n+   |     ^ constants require immutable values\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0017`."}]}