{"sha": "e642c5987e1885a6ea9b0f1527810a72bdcdeb3f", "node_id": "C_kwDOAAsO6NoAKGU2NDJjNTk4N2UxODg1YTZlYTliMGYxNTI3ODEwYTcyYmRjZGViM2Y", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2022-06-19T10:53:12Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2022-06-20T07:33:59Z"}, "message": "Leak pthreax_rwlock_t when it's dropped while locked.", "tree": {"sha": "a3ad3b7d6c42578b8d02784911c1c57533347495", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a3ad3b7d6c42578b8d02784911c1c57533347495"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e642c5987e1885a6ea9b0f1527810a72bdcdeb3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e642c5987e1885a6ea9b0f1527810a72bdcdeb3f", "html_url": "https://github.com/rust-lang/rust/commit/e642c5987e1885a6ea9b0f1527810a72bdcdeb3f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e642c5987e1885a6ea9b0f1527810a72bdcdeb3f/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d72294491c5d28449c49b884b620cc24b3cf010f", "url": "https://api.github.com/repos/rust-lang/rust/commits/d72294491c5d28449c49b884b620cc24b3cf010f", "html_url": "https://github.com/rust-lang/rust/commit/d72294491c5d28449c49b884b620cc24b3cf010f"}], "stats": {"total": 16, "additions": 16, "deletions": 0}, "files": [{"sha": "adfe2a88338f55bbca7f7052254d9d5bfeb5d072", "filename": "library/std/src/sys/unix/locks/pthread_rwlock.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e642c5987e1885a6ea9b0f1527810a72bdcdeb3f/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fpthread_rwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e642c5987e1885a6ea9b0f1527810a72bdcdeb3f/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fpthread_rwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Flocks%2Fpthread_rwlock.rs?ref=e642c5987e1885a6ea9b0f1527810a72bdcdeb3f", "patch": "@@ -1,4 +1,5 @@\n use crate::cell::UnsafeCell;\n+use crate::mem::forget;\n use crate::sync::atomic::{AtomicUsize, Ordering};\n use crate::sys_common::lazy_box::{LazyBox, LazyInit};\n \n@@ -17,6 +18,21 @@ impl LazyInit for RwLock {\n     fn init() -> Box<Self> {\n         Box::new(Self::new())\n     }\n+\n+    fn destroy(mut rwlock: Box<Self>) {\n+        // We're not allowed to pthread_rwlock_destroy a locked rwlock,\n+        // so check first if it's unlocked.\n+        if *rwlock.write_locked.get_mut() || *rwlock.num_readers.get_mut() != 0 {\n+            // The rwlock is locked. This happens if a RwLock{Read,Write}Guard is leaked.\n+            // In this case, we just leak the RwLock too.\n+            forget(rwlock);\n+        }\n+    }\n+\n+    fn cancel_init(_: Box<Self>) {\n+        // In this case, we can just drop it without any checks,\n+        // since it cannot have been locked yet.\n+    }\n }\n \n impl RwLock {"}]}