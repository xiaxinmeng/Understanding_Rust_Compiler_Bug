{"sha": "83f96e81423b63af89d04899e4710ca883c716f2", "node_id": "C_kwDOAAsO6NoAKDgzZjk2ZTgxNDIzYjYzYWY4OWQwNDg5OWU0NzEwY2E4ODNjNzE2ZjI", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-01-04T20:24:03Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-04-19T18:55:11Z"}, "message": "Add unstable feature flags", "tree": {"sha": "53bba5bd2040384207ce87a41769da39fca1ba8e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/53bba5bd2040384207ce87a41769da39fca1ba8e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/83f96e81423b63af89d04899e4710ca883c716f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/83f96e81423b63af89d04899e4710ca883c716f2", "html_url": "https://github.com/rust-lang/rust/commit/83f96e81423b63af89d04899e4710ca883c716f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/83f96e81423b63af89d04899e4710ca883c716f2/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39ba9dadeed12f67e44ae00ebdcbcebc0edf3d61", "url": "https://api.github.com/repos/rust-lang/rust/commits/39ba9dadeed12f67e44ae00ebdcbcebc0edf3d61", "html_url": "https://github.com/rust-lang/rust/commit/39ba9dadeed12f67e44ae00ebdcbcebc0edf3d61"}], "stats": {"total": 34, "additions": 27, "deletions": 7}, "files": [{"sha": "72b208a7132768ff7f37c1c9b02c6fc394f28ca8", "filename": "compiler/rustc_metadata/src/dependency_format.rs", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/83f96e81423b63af89d04899e4710ca883c716f2/compiler%2Frustc_metadata%2Fsrc%2Fdependency_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83f96e81423b63af89d04899e4710ca883c716f2/compiler%2Frustc_metadata%2Fsrc%2Fdependency_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fdependency_format.rs?ref=83f96e81423b63af89d04899e4710ca883c716f2", "patch": "@@ -91,9 +91,22 @@ fn calculate_type(tcx: TyCtxt<'_>, ty: CrateType) -> DependencyList {\n         //\n         // Treat cdylibs and staticlibs similarly. If `-C prefer-dynamic` is set,\n         // the caller may be code-size conscious, but without it, it makes sense\n-        // to statically link a cdylib or staticlib.\n-        CrateType::Dylib | CrateType::Cdylib | CrateType::Staticlib => {\n-            if sess.opts.cg.prefer_dynamic { Linkage::Dynamic } else { Linkage::Static }\n+        // to statically link a cdylib or staticlib. For staticlibs we use\n+        // `-Z staticlib-prefer-dynamic` for now. This may be merged into\n+        // `-C prefer-dynamic` in the future.\n+        CrateType::Dylib | CrateType::Cdylib => {\n+            if sess.opts.cg.prefer_dynamic {\n+                Linkage::Dynamic\n+            } else {\n+                Linkage::Static\n+            }\n+        }\n+        CrateType::Staticlib => {\n+            if sess.opts.unstable_opts.staticlib_prefer_dynamic {\n+                Linkage::Dynamic\n+            } else {\n+                Linkage::Static\n+            }\n         }\n \n         // If the global prefer_dynamic switch is turned off, or the final\n@@ -123,9 +136,10 @@ fn calculate_type(tcx: TyCtxt<'_>, ty: CrateType) -> DependencyList {\n \n             // Static executables must have all static dependencies.\n             // If any are not found, generate some nice pretty errors.\n-            if ty == CrateType::Executable\n-                && sess.crt_static(Some(ty))\n-                && !sess.target.crt_static_allows_dylibs\n+            if (ty == CrateType::Staticlib && !sess.opts.unstable_opts.staticlib_allow_rdylib_deps)\n+                || (ty == CrateType::Executable\n+                    && sess.crt_static(Some(ty))\n+                    && !sess.target.crt_static_allows_dylibs)\n             {\n                 for &cnum in tcx.crates(()).iter() {\n                     if tcx.dep_kind(cnum).macros_only() {"}, {"sha": "0743392b19a580a1d0e7f51e4b39d390f9e3fb1f", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83f96e81423b63af89d04899e4710ca883c716f2/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83f96e81423b63af89d04899e4710ca883c716f2/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=83f96e81423b63af89d04899e4710ca883c716f2", "patch": "@@ -1709,6 +1709,10 @@ options! {\n     #[rustc_lint_opt_deny_field_access(\"use `Session::stack_protector` instead of this field\")]\n     stack_protector: StackProtector = (StackProtector::None, parse_stack_protector, [TRACKED],\n         \"control stack smash protection strategy (`rustc --print stack-protector-strategies` for details)\"),\n+    staticlib_allow_rdylib_deps: bool = (false, parse_bool, [TRACKED],\n+        \"allow staticlibs to have rust dylib dependencies\"),\n+    staticlib_prefer_dynamic: bool = (false, parse_bool, [TRACKED],\n+        \"prefer dynamic linking to static linking for staticlibs (default: no)\"),\n     strict_init_checks: bool = (false, parse_bool, [TRACKED],\n         \"control if mem::uninitialized and mem::zeroed panic on more UB\"),\n     strip: Strip = (Strip::None, parse_strip, [UNTRACKED],"}, {"sha": "fd76f6c55784dd60ce7c87ce0bdd30819660cd93", "filename": "tests/run-make/staticlib-dylib-linkage/Makefile", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83f96e81423b63af89d04899e4710ca883c716f2/tests%2Frun-make%2Fstaticlib-dylib-linkage%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/83f96e81423b63af89d04899e4710ca883c716f2/tests%2Frun-make%2Fstaticlib-dylib-linkage%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fstaticlib-dylib-linkage%2FMakefile?ref=83f96e81423b63af89d04899e4710ca883c716f2", "patch": "@@ -2,7 +2,9 @@ include ../tools.mk\n \n all:\n \t$(RUSTC) -C prefer-dynamic bar.rs\n-\t$(RUSTC) foo.rs --crate-type staticlib --print native-static-libs 2>&1 | grep 'note: native-static-libs: ' | sed 's/note: native-static-libs: \\(.*\\)/\\1/' > $(TMPDIR)/libs.txt\n+\t$(RUSTC) foo.rs --crate-type staticlib --print native-static-libs \\\n+\t\t-Z staticlib-allow-rdylib-deps 2>&1 | grep 'note: native-static-libs: ' \\\n+\t\t| sed 's/note: native-static-libs: \\(.*\\)/\\1/' > $(TMPDIR)/libs.txt\n \tcat $(TMPDIR)/libs.txt\n \n ifdef IS_MSVC"}]}