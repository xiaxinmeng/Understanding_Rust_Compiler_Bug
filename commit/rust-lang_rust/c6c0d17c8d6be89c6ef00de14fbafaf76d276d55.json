{"sha": "c6c0d17c8d6be89c6ef00de14fbafaf76d276d55", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2YzBkMTdjOGQ2YmU4OWM2ZWYwMGRlMTRmYmFmYWY3NmQyNzZkNTU=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-06-19T22:21:59Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-07-27T19:06:36Z"}, "message": "review", "tree": {"sha": "3f6112c6764192c9e44740c179d3f3d559617fdb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f6112c6764192c9e44740c179d3f3d559617fdb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6c0d17c8d6be89c6ef00de14fbafaf76d276d55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6c0d17c8d6be89c6ef00de14fbafaf76d276d55", "html_url": "https://github.com/rust-lang/rust/commit/c6c0d17c8d6be89c6ef00de14fbafaf76d276d55", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6c0d17c8d6be89c6ef00de14fbafaf76d276d55/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bbd581c583a7168359bf94beaa111d6ad3316837", "url": "https://api.github.com/repos/rust-lang/rust/commits/bbd581c583a7168359bf94beaa111d6ad3316837", "html_url": "https://github.com/rust-lang/rust/commit/bbd581c583a7168359bf94beaa111d6ad3316837"}], "stats": {"total": 120, "additions": 45, "deletions": 75}, "files": [{"sha": "a1944781df28a7c1afe1b58142b21276305bba4b", "filename": "src/librustc_infer/traits/util.rs", "status": "modified", "additions": 14, "deletions": 28, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/c6c0d17c8d6be89c6ef00de14fbafaf76d276d55/src%2Flibrustc_infer%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6c0d17c8d6be89c6ef00de14fbafaf76d276d55/src%2Flibrustc_infer%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Futil.rs?ref=c6c0d17c8d6be89c6ef00de14fbafaf76d276d55", "patch": "@@ -11,36 +11,22 @@ pub fn anonymize_predicate<'tcx>(\n     pred: ty::Predicate<'tcx>,\n ) -> ty::Predicate<'tcx> {\n     let kind = pred.kind();\n-    let new = match kind {\n+    match kind {\n         ty::PredicateKind::ForAll(binder) => {\n-            ty::PredicateKind::ForAll(tcx.anonymize_late_bound_regions(binder))\n+            let new = ty::PredicateKind::ForAll(tcx.anonymize_late_bound_regions(binder));\n+            if new != *kind { new.to_predicate(tcx) } else { pred }\n         }\n-        &ty::PredicateKind::Trait(data, constness) => ty::PredicateKind::Trait(data, constness),\n-\n-        &ty::PredicateKind::RegionOutlives(data) => ty::PredicateKind::RegionOutlives(data),\n-\n-        &ty::PredicateKind::TypeOutlives(data) => ty::PredicateKind::TypeOutlives(data),\n-\n-        &ty::PredicateKind::Projection(data) => ty::PredicateKind::Projection(data),\n-\n-        &ty::PredicateKind::WellFormed(data) => ty::PredicateKind::WellFormed(data),\n-\n-        &ty::PredicateKind::ObjectSafe(data) => ty::PredicateKind::ObjectSafe(data),\n-\n-        &ty::PredicateKind::ClosureKind(closure_def_id, closure_substs, kind) => {\n-            ty::PredicateKind::ClosureKind(closure_def_id, closure_substs, kind)\n-        }\n-\n-        &ty::PredicateKind::Subtype(data) => ty::PredicateKind::Subtype(data),\n-\n-        &ty::PredicateKind::ConstEvaluatable(def_id, substs) => {\n-            ty::PredicateKind::ConstEvaluatable(def_id, substs)\n-        }\n-\n-        &ty::PredicateKind::ConstEquate(c1, c2) => ty::PredicateKind::ConstEquate(c1, c2),\n-    };\n-\n-    if new != *kind { new.to_predicate(tcx) } else { pred }\n+        ty::PredicateKind::Trait(_, _)\n+        | ty::PredicateKind::RegionOutlives(_)\n+        | ty::PredicateKind::TypeOutlives(_)\n+        | ty::PredicateKind::Projection(_)\n+        | ty::PredicateKind::WellFormed(_)\n+        | ty::PredicateKind::ObjectSafe(_)\n+        | ty::PredicateKind::ClosureKind(_, _, _)\n+        | ty::PredicateKind::Subtype(_)\n+        | ty::PredicateKind::ConstEvaluatable(_, _)\n+        | ty::PredicateKind::ConstEquate(_, _) => pred,\n+    }\n }\n \n struct PredicateSet<'tcx> {"}, {"sha": "5b5996e84ee7dcc2823fe0e27b26d0eb417c1e5b", "filename": "src/librustc_middle/ty/mod.rs", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c6c0d17c8d6be89c6ef00de14fbafaf76d276d55/src%2Flibrustc_middle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6c0d17c8d6be89c6ef00de14fbafaf76d276d55/src%2Flibrustc_middle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fmod.rs?ref=c6c0d17c8d6be89c6ef00de14fbafaf76d276d55", "patch": "@@ -1225,20 +1225,10 @@ impl<'tcx> Predicate<'tcx> {\n         // substitution code expects equal binding levels in the values\n         // from the substitution and the value being substituted into, and\n         // this trick achieves that).\n-\n         let substs = trait_ref.skip_binder().substs;\n-        let kind = match self.kind() {\n-            PredicateKind::ForAll(binder) => binder.skip_binder().kind(),\n-            kind => kind,\n-        };\n-\n-        let new = kind.subst(tcx, substs);\n-\n-        if new != *kind {\n-            new.to_predicate(tcx).potentially_qualified(tcx, PredicateKind::ForAll)\n-        } else {\n-            self\n-        }\n+        let pred = *self.ignore_qualifiers(tcx).skip_binder();\n+        let new = pred.subst(tcx, substs);\n+        if new != pred { new.potentially_qualified(tcx, PredicateKind::ForAll) } else { self }\n     }\n }\n "}, {"sha": "f4bfc7d4b98728b8129ff85dd0266eed0690c422", "filename": "src/librustc_mir/transform/qualify_min_const_fn.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c6c0d17c8d6be89c6ef00de14fbafaf76d276d55/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6c0d17c8d6be89c6ef00de14fbafaf76d276d55/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs?ref=c6c0d17c8d6be89c6ef00de14fbafaf76d276d55", "patch": "@@ -24,7 +24,6 @@ pub fn is_min_const_fn(tcx: TyCtxt<'tcx>, def_id: DefId, body: &'a Body<'tcx>) -\n     loop {\n         let predicates = tcx.predicates_of(current);\n         for (predicate, _) in predicates.predicates {\n-            // TODO: forall\n             match predicate.ignore_qualifiers(tcx).skip_binder().kind() {\n                 ty::PredicateKind::ForAll(_) => bug!(\"unexpected predicate: {:?}\", predicate),\n                 ty::PredicateKind::RegionOutlives(_)"}, {"sha": "aebe96f7ddc7eb2a42653e1e80c55cc613664b02", "filename": "src/librustc_trait_selection/traits/auto_trait.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c6c0d17c8d6be89c6ef00de14fbafaf76d276d55/src%2Flibrustc_trait_selection%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6c0d17c8d6be89c6ef00de14fbafaf76d276d55/src%2Flibrustc_trait_selection%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fauto_trait.rs?ref=c6c0d17c8d6be89c6ef00de14fbafaf76d276d55", "patch": "@@ -639,7 +639,6 @@ impl AutoTraitFinder<'tcx> {\n             // We check this by calling is_of_param on the relevant types\n             // from the various possible predicates\n \n-            // TODO: forall\n             match predicate.ignore_qualifiers(self.tcx).skip_binder().kind() {\n                 &ty::PredicateKind::Trait(p, _) => {\n                     if self.is_param_no_infer(p.trait_ref.substs)"}, {"sha": "75fe9b7701e0706791a8808fedbb758ec4b32dce", "filename": "src/librustc_trait_selection/traits/error_reporting/mod.rs", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c6c0d17c8d6be89c6ef00de14fbafaf76d276d55/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6c0d17c8d6be89c6ef00de14fbafaf76d276d55/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=c6c0d17c8d6be89c6ef00de14fbafaf76d276d55", "patch": "@@ -256,7 +256,6 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     return;\n                 }\n \n-                // TODO: forall\n                 match obligation.predicate.ignore_qualifiers(tcx).skip_binder().kind() {\n                     ty::PredicateKind::ForAll(_) => {\n                         bug!(\"unexpected predicate: {:?}\", obligation.predicate)\n@@ -1481,7 +1480,6 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n             return;\n         }\n \n-        // TODO: forall\n         let mut err = match predicate.ignore_qualifiers(self.tcx).skip_binder().kind() {\n             &ty::PredicateKind::Trait(data, _) => {\n                 let trait_ref = ty::Binder::bind(data.trait_ref);\n@@ -1583,8 +1581,6 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n             }\n \n             ty::PredicateKind::WellFormed(arg) => {\n-                // TODO: forall\n-\n                 // Same hacky approach as above to avoid deluging user\n                 // with error messages.\n                 if arg.references_error() || self.tcx.sess.has_errors() {\n@@ -1604,7 +1600,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 }\n             }\n \n-            ty::PredicateKind::Subtype(ref data) => {\n+            ty::PredicateKind::Subtype(data) => {\n                 if data.references_error() || self.tcx.sess.has_errors() {\n                     // no need to overload user in such cases\n                     return;\n@@ -1737,14 +1733,16 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n         err: &mut DiagnosticBuilder<'tcx>,\n         obligation: &PredicateObligation<'tcx>,\n     ) {\n-        let (pred, item_def_id, span) =\n-            match (obligation.predicate.ignore_qualifiers(self.tcx).skip_binder().kind(), obligation.cause.code.peel_derives()) {\n-                (\n-                    ty::PredicateKind::Trait(pred, _),\n-                    &ObligationCauseCode::BindingObligation(item_def_id, span),\n-                ) => (pred, item_def_id, span),\n-                _ => return,\n-            };\n+        let (pred, item_def_id, span) = match (\n+            obligation.predicate.ignore_qualifiers(self.tcx).skip_binder().kind(),\n+            obligation.cause.code.peel_derives(),\n+        ) {\n+            (\n+                ty::PredicateKind::Trait(pred, _),\n+                &ObligationCauseCode::BindingObligation(item_def_id, span),\n+            ) => (pred, item_def_id, span),\n+            _ => return,\n+        };\n \n         let node = match (\n             self.tcx.hir().get_if_local(item_def_id),"}, {"sha": "5ad43084e7f1a6c83a3b6b9a658558f916f3ab96", "filename": "src/librustc_trait_selection/traits/object_safety.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6c0d17c8d6be89c6ef00de14fbafaf76d276d55/src%2Flibrustc_trait_selection%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6c0d17c8d6be89c6ef00de14fbafaf76d276d55/src%2Flibrustc_trait_selection%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fobject_safety.rs?ref=c6c0d17c8d6be89c6ef00de14fbafaf76d276d55", "patch": "@@ -245,7 +245,6 @@ fn predicates_reference_self(\n         .iter()\n         .map(|(predicate, sp)| (predicate.subst_supertrait(tcx, &trait_ref), sp))\n         .filter_map(|(predicate, &sp)| {\n-            // TODO: forall\n             match predicate.ignore_qualifiers(tcx).skip_binder().kind() {\n                 ty::PredicateKind::Trait(ref data, _) => {\n                     // In the case of a trait predicate, we can skip the \"self\" type.\n@@ -300,7 +299,6 @@ fn generics_require_sized_self(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n     let predicates = tcx.predicates_of(def_id);\n     let predicates = predicates.instantiate_identity(tcx).predicates;\n     elaborate_predicates(tcx, predicates.into_iter()).any(|obligation| {\n-        // TODO: forall\n         match obligation.predicate.ignore_qualifiers(tcx).skip_binder().kind() {\n             ty::PredicateKind::Trait(ref trait_pred, _) => {\n                 trait_pred.def_id() == sized_def_id && trait_pred.self_ty().is_param(0)"}, {"sha": "c2ae26d9d25a5ab779eb5ba20b599dfa236a0d94", "filename": "src/librustc_trait_selection/traits/project.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6c0d17c8d6be89c6ef00de14fbafaf76d276d55/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6c0d17c8d6be89c6ef00de14fbafaf76d276d55/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs?ref=c6c0d17c8d6be89c6ef00de14fbafaf76d276d55", "patch": "@@ -933,7 +933,6 @@ fn assemble_candidates_from_predicates<'cx, 'tcx>(\n     let infcx = selcx.infcx();\n     for predicate in env_predicates {\n         debug!(\"assemble_candidates_from_predicates: predicate={:?}\", predicate);\n-        // TODO: forall\n         if let &ty::PredicateKind::Projection(data) =\n             predicate.ignore_qualifiers(infcx.tcx).skip_binder().kind()\n         {\n@@ -1228,7 +1227,6 @@ fn confirm_object_candidate<'cx, 'tcx>(\n         // select only those projections that are actually projecting an\n         // item with the correct name\n \n-        // TODO: forall\n         let env_predicates = env_predicates.filter_map(|o| {\n             match o.predicate.ignore_qualifiers(selcx.tcx()).skip_binder().kind() {\n                 &ty::PredicateKind::Projection(data)"}, {"sha": "1bc53f0c5c53ea329705a1b130833858b144d2a8", "filename": "src/librustc_trait_selection/traits/select/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c6c0d17c8d6be89c6ef00de14fbafaf76d276d55/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6c0d17c8d6be89c6ef00de14fbafaf76d276d55/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fmod.rs?ref=c6c0d17c8d6be89c6ef00de14fbafaf76d276d55", "patch": "@@ -408,7 +408,6 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             None => self.check_recursion_limit(&obligation, &obligation)?,\n         }\n \n-        // TODO: forall\n         match obligation.predicate.ignore_qualifiers(self.tcx()).skip_binder().kind() {\n             ty::PredicateKind::ForAll(_) => {\n                 bug!(\"unexpected predicate: {:?}\", obligation.predicate)"}, {"sha": "7154b3fb3784ccd3518413082a57af65cb2f9ba7", "filename": "src/librustc_traits/chalk/lowering.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c6c0d17c8d6be89c6ef00de14fbafaf76d276d55/src%2Flibrustc_traits%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6c0d17c8d6be89c6ef00de14fbafaf76d276d55/src%2Flibrustc_traits%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk%2Flowering.rs?ref=c6c0d17c8d6be89c6ef00de14fbafaf76d276d55", "patch": "@@ -223,9 +223,21 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::GoalData<RustInterner<'tcx>>> for ty::Predi\n                     // the environment.\n                     ty::Placeholder(..) => chalk_ir::GoalData::All(chalk_ir::Goals::new(interner)),\n \n-                    _ => chalk_ir::GoalData::DomainGoal(chalk_ir::DomainGoal::WellFormed(\n-                        chalk_ir::WellFormed::Ty(ty.lower_into(interner)),\n-                    )),\n+                    _ => {\n+                        let (ty, binders, _named_regions) =\n+                            collect_bound_vars(interner, interner.tcx, &ty::Binder::bind(ty));\n+\n+                        chalk_ir::GoalData::Quantified(\n+                            chalk_ir::QuantifierKind::ForAll,\n+                            chalk_ir::Binders::new(\n+                                binders,\n+                                chalk_ir::GoalData::DomainGoal(chalk_ir::DomainGoal::WellFormed(\n+                                    chalk_ir::WellFormed::Ty(ty.lower_into(interner)),\n+                                ))\n+                                .intern(interner),\n+                            ),\n+                        )\n+                    }\n                 },\n                 // FIXME(chalk): handle well formed consts\n                 GenericArgKind::Const(..) => {"}, {"sha": "8415690d41f6cfbc66028da2551f43e8f38b4b11", "filename": "src/librustc_traits/normalize_erasing_regions.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c6c0d17c8d6be89c6ef00de14fbafaf76d276d55/src%2Flibrustc_traits%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6c0d17c8d6be89c6ef00de14fbafaf76d276d55/src%2Flibrustc_traits%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fnormalize_erasing_regions.rs?ref=c6c0d17c8d6be89c6ef00de14fbafaf76d276d55", "patch": "@@ -42,7 +42,6 @@ fn normalize_generic_arg_after_erasing_regions<'tcx>(\n }\n \n fn not_outlives_predicate(tcx: TyCtxt<'tcx>, p: &ty::Predicate<'tcx>) -> bool {\n-    // TODO: forall\n     match p.ignore_qualifiers(tcx).skip_binder().kind() {\n         ty::PredicateKind::RegionOutlives(..) | ty::PredicateKind::TypeOutlives(..) => false,\n         ty::PredicateKind::ForAll(_) => bug!(\"unexpected predicate: {:?}\", p),"}, {"sha": "c028597ccd29913bf3c73ce3c706b91367e2baeb", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c6c0d17c8d6be89c6ef00de14fbafaf76d276d55/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6c0d17c8d6be89c6ef00de14fbafaf76d276d55/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=c6c0d17c8d6be89c6ef00de14fbafaf76d276d55", "patch": "@@ -1706,7 +1706,6 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     obligation.predicate\n                 );\n \n-                // TODO: forall\n                 match obligation.predicate.ignore_qualifiers(tcx).skip_binder().kind() {\n                     &ty::PredicateKind::Trait(pred, _) => {\n                         let pred = ty::Binder::bind(pred);"}, {"sha": "ddf539277b94dd28d3d81ebed418562ac674dcdf", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c6c0d17c8d6be89c6ef00de14fbafaf76d276d55/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6c0d17c8d6be89c6ef00de14fbafaf76d276d55/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=c6c0d17c8d6be89c6ef00de14fbafaf76d276d55", "patch": "@@ -631,7 +631,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         }\n                     };\n                     let mut format_pred = |pred: ty::Predicate<'tcx>| {\n-                        // TODO: forall\n                         match pred.ignore_qualifiers(tcx).skip_binder().kind() {\n                             &ty::PredicateKind::Projection(pred) => {\n                                 let pred = ty::Binder::bind(pred);"}, {"sha": "201288022edb62d84de21a700f1c9aa0a813af3f", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c6c0d17c8d6be89c6ef00de14fbafaf76d276d55/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6c0d17c8d6be89c6ef00de14fbafaf76d276d55/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=c6c0d17c8d6be89c6ef00de14fbafaf76d276d55", "patch": "@@ -2400,8 +2400,6 @@ fn bounds_from_generic_predicates<'tcx>(\n     let mut projections = vec![];\n     for (predicate, _) in predicates.predicates {\n         debug!(\"predicate {:?}\", predicate);\n-        // TODO: forall (we could keep the current behavior and just skip binders eagerly,\n-        // not sure if we want to though)\n         match predicate.ignore_qualifiers(tcx).skip_binder().kind() {\n             ty::PredicateKind::Trait(trait_predicate, _) => {\n                 let entry = types.entry(trait_predicate.self_ty()).or_default();\n@@ -3895,7 +3893,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             .borrow()\n             .pending_obligations()\n             .into_iter()\n-            // TODO: forall\n             .filter_map(move |obligation| {\n                 match obligation.predicate.ignore_qualifiers(self.tcx).skip_binder().kind() {\n                     ty::PredicateKind::ForAll(_) => {"}, {"sha": "d6551a5a3871689d412c6375101572e9390fbad9", "filename": "src/librustc_typeck/outlives/explicit.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c6c0d17c8d6be89c6ef00de14fbafaf76d276d55/src%2Flibrustc_typeck%2Foutlives%2Fexplicit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6c0d17c8d6be89c6ef00de14fbafaf76d276d55/src%2Flibrustc_typeck%2Foutlives%2Fexplicit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Foutlives%2Fexplicit.rs?ref=c6c0d17c8d6be89c6ef00de14fbafaf76d276d55", "patch": "@@ -29,12 +29,10 @@ impl<'tcx> ExplicitPredicatesMap<'tcx> {\n \n             // process predicates and convert to `RequiredPredicates` entry, see below\n             for &(predicate, span) in predicates.predicates {\n-                // TODO: forall\n                 match predicate.ignore_qualifiers(tcx).skip_binder().kind() {\n                     ty::PredicateKind::ForAll(_) => bug!(\"unepected predicate: {:?}\", predicate),\n \n-                    ty::PredicateKind::TypeOutlives(predicate) => {\n-                        let OutlivesPredicate(ref ty, ref reg) = predicate;\n+                    ty::PredicateKind::TypeOutlives(OutlivesPredicate(ref ty, ref reg)) => {\n                         insert_outlives_predicate(\n                             tcx,\n                             (*ty).into(),\n@@ -44,8 +42,7 @@ impl<'tcx> ExplicitPredicatesMap<'tcx> {\n                         )\n                     }\n \n-                    ty::PredicateKind::RegionOutlives(predicate) => {\n-                        let OutlivesPredicate(ref reg1, ref reg2) = predicate;\n+                    ty::PredicateKind::RegionOutlives(OutlivesPredicate(ref reg1, ref reg2)) => {\n                         insert_outlives_predicate(\n                             tcx,\n                             (*reg1).into(),"}]}