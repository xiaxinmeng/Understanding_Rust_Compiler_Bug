{"sha": "2a9d710d999e629c064908076420635096eb39de", "node_id": "C_kwDOAAsO6NoAKDJhOWQ3MTBkOTk5ZTYyOWMwNjQ5MDgwNzY0MjA2MzUwOTZlYjM5ZGU", "commit": {"author": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2023-04-05T08:17:40Z"}, "committer": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2023-04-06T08:34:17Z"}, "message": "Bless tests", "tree": {"sha": "89f0ab70dda4965f5d48663c534853a50577da18", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89f0ab70dda4965f5d48663c534853a50577da18"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a9d710d999e629c064908076420635096eb39de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a9d710d999e629c064908076420635096eb39de", "html_url": "https://github.com/rust-lang/rust/commit/2a9d710d999e629c064908076420635096eb39de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a9d710d999e629c064908076420635096eb39de/comments", "author": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5829c2ee544eb9931ce0d34f46b113b0a1e7f04", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5829c2ee544eb9931ce0d34f46b113b0a1e7f04", "html_url": "https://github.com/rust-lang/rust/commit/c5829c2ee544eb9931ce0d34f46b113b0a1e7f04"}], "stats": {"total": 362, "additions": 185, "deletions": 177}, "files": [{"sha": "876b9a9ab0abc154b70a137e49dd9678fe755fa7", "filename": "src/tools/miri/tests/fail/abort-terminator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a9d710d999e629c064908076420635096eb39de/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fabort-terminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a9d710d999e629c064908076420635096eb39de/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fabort-terminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fabort-terminator.rs?ref=2a9d710d999e629c064908076420635096eb39de", "patch": "@@ -1,7 +1,7 @@\n #![feature(c_unwind)]\n \n extern \"C\" fn panic_abort() {\n-    //~^ ERROR: the program aborted\n+    //~^ ERROR: panic in a function that cannot unwind\n     panic!()\n }\n "}, {"sha": "966435ef92d59b22a29ac83303635bf8c6efcd65", "filename": "src/tools/miri/tests/fail/abort-terminator.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a9d710d999e629c064908076420635096eb39de/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fabort-terminator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a9d710d999e629c064908076420635096eb39de/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fabort-terminator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fabort-terminator.stderr?ref=2a9d710d999e629c064908076420635096eb39de", "patch": "@@ -1,13 +1,13 @@\n thread 'main' panicked at 'explicit panic', $DIR/abort-terminator.rs:LL:CC\n note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n-error: abnormal termination: the program aborted execution\n+error: abnormal termination: panic in a function that cannot unwind\n   --> $DIR/abort-terminator.rs:LL:CC\n    |\n LL | / extern \"C\" fn panic_abort() {\n LL | |\n LL | |     panic!()\n LL | | }\n-   | |_^ the program aborted execution\n+   | |_^ panic in a function that cannot unwind\n    |\n    = note: inside `panic_abort` at $DIR/abort-terminator.rs:LL:CC\n note: inside `main`"}, {"sha": "e1631471ae2bef79771e582738650c40d3416f76", "filename": "src/tools/miri/tests/fail/function_calls/exported_symbol_bad_unwind2.both.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a9d710d999e629c064908076420635096eb39de/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_calls%2Fexported_symbol_bad_unwind2.both.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a9d710d999e629c064908076420635096eb39de/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_calls%2Fexported_symbol_bad_unwind2.both.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_calls%2Fexported_symbol_bad_unwind2.both.stderr?ref=2a9d710d999e629c064908076420635096eb39de", "patch": "@@ -1,14 +1,14 @@\n thread 'main' panicked at 'explicit panic', $DIR/exported_symbol_bad_unwind2.rs:LL:CC\n note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n-error: abnormal termination: the program aborted execution\n+error: abnormal termination: panic in a function that cannot unwind\n   --> $DIR/exported_symbol_bad_unwind2.rs:LL:CC\n    |\n LL | / extern \"C-unwind\" fn nounwind() {\n LL | |\n LL | |\n LL | |     panic!();\n LL | | }\n-   | |_^ the program aborted execution\n+   | |_^ panic in a function that cannot unwind\n    |\n    = note: inside `nounwind` at $DIR/exported_symbol_bad_unwind2.rs:LL:CC\n note: inside `main`"}, {"sha": "e1631471ae2bef79771e582738650c40d3416f76", "filename": "src/tools/miri/tests/fail/function_calls/exported_symbol_bad_unwind2.definition.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a9d710d999e629c064908076420635096eb39de/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_calls%2Fexported_symbol_bad_unwind2.definition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2a9d710d999e629c064908076420635096eb39de/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_calls%2Fexported_symbol_bad_unwind2.definition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_calls%2Fexported_symbol_bad_unwind2.definition.stderr?ref=2a9d710d999e629c064908076420635096eb39de", "patch": "@@ -1,14 +1,14 @@\n thread 'main' panicked at 'explicit panic', $DIR/exported_symbol_bad_unwind2.rs:LL:CC\n note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n-error: abnormal termination: the program aborted execution\n+error: abnormal termination: panic in a function that cannot unwind\n   --> $DIR/exported_symbol_bad_unwind2.rs:LL:CC\n    |\n LL | / extern \"C-unwind\" fn nounwind() {\n LL | |\n LL | |\n LL | |     panic!();\n LL | | }\n-   | |_^ the program aborted execution\n+   | |_^ panic in a function that cannot unwind\n    |\n    = note: inside `nounwind` at $DIR/exported_symbol_bad_unwind2.rs:LL:CC\n note: inside `main`"}, {"sha": "65ba3433c28c78a6c2f69c04651838e937402e1a", "filename": "src/tools/miri/tests/fail/function_calls/exported_symbol_bad_unwind2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a9d710d999e629c064908076420635096eb39de/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_calls%2Fexported_symbol_bad_unwind2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a9d710d999e629c064908076420635096eb39de/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_calls%2Fexported_symbol_bad_unwind2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Ffunction_calls%2Fexported_symbol_bad_unwind2.rs?ref=2a9d710d999e629c064908076420635096eb39de", "patch": "@@ -4,8 +4,8 @@\n #[cfg_attr(any(definition, both), rustc_nounwind)]\n #[no_mangle]\n extern \"C-unwind\" fn nounwind() {\n-    //~[definition]^ ERROR: abnormal termination: the program aborted execution\n-    //~[both]^^ ERROR: abnormal termination: the program aborted execution\n+    //~[definition]^ ERROR: abnormal termination: panic in a function that cannot unwind\n+    //~[both]^^ ERROR: abnormal termination: panic in a function that cannot unwind\n     panic!();\n }\n "}, {"sha": "f6954ab35263f3b88ad882a3930020fed9fa1e62", "filename": "tests/mir-opt/asm_unwind_panic_abort.main.AbortUnwindingCalls.after.mir", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Fasm_unwind_panic_abort.main.AbortUnwindingCalls.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Fasm_unwind_panic_abort.main.AbortUnwindingCalls.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fasm_unwind_panic_abort.main.AbortUnwindingCalls.after.mir?ref=2a9d710d999e629c064908076420635096eb39de", "patch": "@@ -9,16 +9,12 @@ fn main() -> () {\n     bb0: {\n         StorageLive(_1);                 // scope 1 at $DIR/asm_unwind_panic_abort.rs:+2:9: +2:49\n         _1 = const ();                   // scope 1 at $DIR/asm_unwind_panic_abort.rs:+2:9: +2:49\n-        asm!(\"\", options(MAY_UNWIND)) -> [return: bb1, unwind: bb2]; // scope 1 at $DIR/asm_unwind_panic_abort.rs:+2:9: +2:49\n+        asm!(\"\", options(MAY_UNWIND)) -> [return: bb1, unwind terminate]; // scope 1 at $DIR/asm_unwind_panic_abort.rs:+2:9: +2:49\n     }\n \n     bb1: {\n         StorageDead(_1);                 // scope 1 at $DIR/asm_unwind_panic_abort.rs:+2:48: +2:49\n         _0 = const ();                   // scope 1 at $DIR/asm_unwind_panic_abort.rs:+1:5: +3:6\n         return;                          // scope 0 at $DIR/asm_unwind_panic_abort.rs:+4:2: +4:2\n     }\n-\n-    bb2 (cleanup): {\n-        abort;                           // scope 0 at $DIR/asm_unwind_panic_abort.rs:+0:1: +4:2\n-    }\n }"}, {"sha": "d663c343515bc278b1a3b47b9f1122ae9619d025", "filename": "tests/mir-opt/basic_assignment.main.ElaborateDrops.diff", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Fbasic_assignment.main.ElaborateDrops.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Fbasic_assignment.main.ElaborateDrops.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbasic_assignment.main.ElaborateDrops.diff?ref=2a9d710d999e629c064908076420635096eb39de", "patch": "@@ -47,7 +47,7 @@\n   \n       bb2 (cleanup): {\n           _5 = move _6;                    // scope 4 at $DIR/basic_assignment.rs:+13:5: +13:11\n-          drop(_6) -> bb6;                 // scope 4 at $DIR/basic_assignment.rs:+13:19: +13:20\n+          drop(_6) -> [return: bb6, unwind terminate]; // scope 4 at $DIR/basic_assignment.rs:+13:19: +13:20\n       }\n   \n       bb3: {\n@@ -70,16 +70,20 @@\n       }\n   \n       bb6 (cleanup): {\n-          drop(_5) -> bb7;                 // scope 3 at $DIR/basic_assignment.rs:+14:1: +14:2\n+          drop(_5) -> [return: bb7, unwind terminate]; // scope 3 at $DIR/basic_assignment.rs:+14:1: +14:2\n       }\n   \n       bb7 (cleanup): {\n--         drop(_4) -> bb8;                 // scope 2 at $DIR/basic_assignment.rs:+14:1: +14:2\n+-         drop(_4) -> [return: bb8, unwind terminate]; // scope 2 at $DIR/basic_assignment.rs:+14:1: +14:2\n +         goto -> bb8;                     // scope 2 at $DIR/basic_assignment.rs:+14:1: +14:2\n       }\n   \n       bb8 (cleanup): {\n           resume;                          // scope 0 at $DIR/basic_assignment.rs:+0:1: +14:2\n++     }\n++ \n++     bb9 (cleanup): {\n++         unreachable;                     // scope 0 at $DIR/basic_assignment.rs:+0:1: +14:2\n       }\n   }\n   "}, {"sha": "d63497e3a98d6882975781cbc58cf1174005bf9a", "filename": "tests/mir-opt/basic_assignment.main.SimplifyCfg-initial.after.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Fbasic_assignment.main.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Fbasic_assignment.main.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbasic_assignment.main.SimplifyCfg-initial.after.mir?ref=2a9d710d999e629c064908076420635096eb39de", "patch": "@@ -51,7 +51,7 @@ fn main() -> () {\n \n     bb2 (cleanup): {\n         _5 = move _6;                    // scope 4 at $DIR/basic_assignment.rs:+13:5: +13:11\n-        drop(_6) -> bb6;                 // scope 4 at $DIR/basic_assignment.rs:+13:19: +13:20\n+        drop(_6) -> [return: bb6, unwind terminate]; // scope 4 at $DIR/basic_assignment.rs:+13:19: +13:20\n     }\n \n     bb3: {\n@@ -73,11 +73,11 @@ fn main() -> () {\n     }\n \n     bb6 (cleanup): {\n-        drop(_5) -> bb7;                 // scope 3 at $DIR/basic_assignment.rs:+14:1: +14:2\n+        drop(_5) -> [return: bb7, unwind terminate]; // scope 3 at $DIR/basic_assignment.rs:+14:1: +14:2\n     }\n \n     bb7 (cleanup): {\n-        drop(_4) -> bb8;                 // scope 2 at $DIR/basic_assignment.rs:+14:1: +14:2\n+        drop(_4) -> [return: bb8, unwind terminate]; // scope 2 at $DIR/basic_assignment.rs:+14:1: +14:2\n     }\n \n     bb8 (cleanup): {"}, {"sha": "bac5b21dfad1fb6406474e1634c45c893e574527", "filename": "tests/mir-opt/box_expr.main.ElaborateDrops.before.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Fbox_expr.main.ElaborateDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Fbox_expr.main.ElaborateDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbox_expr.main.ElaborateDrops.before.mir?ref=2a9d710d999e629c064908076420635096eb39de", "patch": "@@ -63,15 +63,15 @@ fn main() -> () {\n     }\n \n     bb6 (cleanup): {\n-        drop(_7) -> bb7;                 // scope 1 at $DIR/box_expr.rs:+3:11: +3:12\n+        drop(_7) -> [return: bb7, unwind terminate]; // scope 1 at $DIR/box_expr.rs:+3:11: +3:12\n     }\n \n     bb7 (cleanup): {\n-        drop(_1) -> bb9;                 // scope 0 at $DIR/box_expr.rs:+4:1: +4:2\n+        drop(_1) -> [return: bb9, unwind terminate]; // scope 0 at $DIR/box_expr.rs:+4:1: +4:2\n     }\n \n     bb8 (cleanup): {\n-        drop(_5) -> bb9;                 // scope 0 at $DIR/box_expr.rs:+2:22: +2:23\n+        drop(_5) -> [return: bb9, unwind terminate]; // scope 0 at $DIR/box_expr.rs:+2:22: +2:23\n     }\n \n     bb9 (cleanup): {"}, {"sha": "7cce3415fa1b7209fdfc4cba5f1e698eaa73c8b3", "filename": "tests/mir-opt/building/async_await.b-{closure#0}.generator_resume.0.mir", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Fbuilding%2Fasync_await.b-%7Bclosure%230%7D.generator_resume.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Fbuilding%2Fasync_await.b-%7Bclosure%230%7D.generator_resume.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fasync_await.b-%7Bclosure%230%7D.generator_resume.0.mir?ref=2a9d710d999e629c064908076420635096eb39de", "patch": "@@ -98,14 +98,14 @@ fn b::{closure#0}(_1: Pin<&mut [async fn body@$DIR/async_await.rs:14:18: 17:2]>,\n         StorageLive(_3);                 // scope 0 at $DIR/async_await.rs:+1:5: +1:14\n         StorageLive(_4);                 // scope 0 at $DIR/async_await.rs:+1:8: +1:14\n         StorageLive(_5);                 // scope 0 at $DIR/async_await.rs:+1:5: +1:8\n-        _5 = a() -> bb2;                 // scope 0 at $DIR/async_await.rs:+1:5: +1:8\n+        _5 = a() -> [return: bb2, unwind unreachable]; // scope 0 at $DIR/async_await.rs:+1:5: +1:8\n                                          // mir::Constant\n                                          // + span: $DIR/async_await.rs:15:5: 15:6\n                                          // + literal: Const { ty: fn() -> impl Future<Output = ()> {a}, val: Value(<ZST>) }\n     }\n \n     bb2: {\n-        _4 = <impl Future<Output = ()> as IntoFuture>::into_future(move _5) -> bb3; // scope 0 at $DIR/async_await.rs:+1:8: +1:14\n+        _4 = <impl Future<Output = ()> as IntoFuture>::into_future(move _5) -> [return: bb3, unwind unreachable]; // scope 0 at $DIR/async_await.rs:+1:8: +1:14\n                                          // mir::Constant\n                                          // + span: $DIR/async_await.rs:15:8: 15:14\n                                          // + literal: Const { ty: fn(impl Future<Output = ()>) -> <impl Future<Output = ()> as IntoFuture>::IntoFuture {<impl Future<Output = ()> as IntoFuture>::into_future}, val: Value(<ZST>) }\n@@ -126,7 +126,7 @@ fn b::{closure#0}(_1: Pin<&mut [async fn body@$DIR/async_await.rs:14:18: 17:2]>,\n         StorageLive(_12);                // scope 2 at $DIR/async_await.rs:+1:8: +1:14\n         _12 = &mut (((*(_1.0: &mut [async fn body@$DIR/async_await.rs:14:18: 17:2])) as variant#3).0: impl std::future::Future<Output = ()>); // scope 2 at $DIR/async_await.rs:+1:8: +1:14\n         _11 = &mut (*_12);               // scope 2 at $DIR/async_await.rs:+1:8: +1:14\n-        _10 = Pin::<&mut impl Future<Output = ()>>::new_unchecked(move _11) -> bb5; // scope 2 at $DIR/async_await.rs:+1:8: +1:14\n+        _10 = Pin::<&mut impl Future<Output = ()>>::new_unchecked(move _11) -> [return: bb5, unwind unreachable]; // scope 2 at $DIR/async_await.rs:+1:8: +1:14\n                                          // mir::Constant\n                                          // + span: $DIR/async_await.rs:15:8: 15:14\n                                          // + literal: Const { ty: unsafe fn(&mut impl Future<Output = ()>) -> Pin<&mut impl Future<Output = ()>> {Pin::<&mut impl Future<Output = ()>>::new_unchecked}, val: Value(<ZST>) }\n@@ -145,7 +145,7 @@ fn b::{closure#0}(_1: Pin<&mut [async fn body@$DIR/async_await.rs:14:18: 17:2]>,\n     bb6: {\n         _13 = &mut (*_14);               // scope 2 at $DIR/async_await.rs:+1:5: +1:14\n         StorageDead(_15);                // scope 2 at $DIR/async_await.rs:+1:13: +1:14\n-        _9 = <impl Future<Output = ()> as Future>::poll(move _10, move _13) -> bb7; // scope 2 at $DIR/async_await.rs:+1:8: +1:14\n+        _9 = <impl Future<Output = ()> as Future>::poll(move _10, move _13) -> [return: bb7, unwind unreachable]; // scope 2 at $DIR/async_await.rs:+1:8: +1:14\n                                          // mir::Constant\n                                          // + span: $DIR/async_await.rs:15:8: 15:14\n                                          // + literal: Const { ty: for<'a, 'b, 'c> fn(Pin<&'a mut impl Future<Output = ()>>, &'b mut Context<'c>) -> Poll<<impl Future<Output = ()> as Future>::Output> {<impl Future<Output = ()> as Future>::poll}, val: Value(<ZST>) }\n@@ -206,14 +206,14 @@ fn b::{closure#0}(_1: Pin<&mut [async fn body@$DIR/async_await.rs:14:18: 17:2]>,\n         StorageDead(_3);                 // scope 0 at $DIR/async_await.rs:+1:14: +1:15\n         StorageLive(_21);                // scope 0 at $DIR/async_await.rs:+2:8: +2:14\n         StorageLive(_22);                // scope 0 at $DIR/async_await.rs:+2:5: +2:8\n-        _22 = a() -> bb14;               // scope 0 at $DIR/async_await.rs:+2:5: +2:8\n+        _22 = a() -> [return: bb14, unwind unreachable]; // scope 0 at $DIR/async_await.rs:+2:5: +2:8\n                                          // mir::Constant\n                                          // + span: $DIR/async_await.rs:16:5: 16:6\n                                          // + literal: Const { ty: fn() -> impl Future<Output = ()> {a}, val: Value(<ZST>) }\n     }\n \n     bb14: {\n-        _21 = <impl Future<Output = ()> as IntoFuture>::into_future(move _22) -> bb15; // scope 0 at $DIR/async_await.rs:+2:8: +2:14\n+        _21 = <impl Future<Output = ()> as IntoFuture>::into_future(move _22) -> [return: bb15, unwind unreachable]; // scope 0 at $DIR/async_await.rs:+2:8: +2:14\n                                          // mir::Constant\n                                          // + span: $DIR/async_await.rs:16:8: 16:14\n                                          // + literal: Const { ty: fn(impl Future<Output = ()>) -> <impl Future<Output = ()> as IntoFuture>::IntoFuture {<impl Future<Output = ()> as IntoFuture>::into_future}, val: Value(<ZST>) }\n@@ -234,7 +234,7 @@ fn b::{closure#0}(_1: Pin<&mut [async fn body@$DIR/async_await.rs:14:18: 17:2]>,\n         StorageLive(_28);                // scope 5 at $DIR/async_await.rs:+2:8: +2:14\n         _28 = &mut (((*(_1.0: &mut [async fn body@$DIR/async_await.rs:14:18: 17:2])) as variant#4).0: impl std::future::Future<Output = ()>); // scope 5 at $DIR/async_await.rs:+2:8: +2:14\n         _27 = &mut (*_28);               // scope 5 at $DIR/async_await.rs:+2:8: +2:14\n-        _26 = Pin::<&mut impl Future<Output = ()>>::new_unchecked(move _27) -> bb17; // scope 5 at $DIR/async_await.rs:+2:8: +2:14\n+        _26 = Pin::<&mut impl Future<Output = ()>>::new_unchecked(move _27) -> [return: bb17, unwind unreachable]; // scope 5 at $DIR/async_await.rs:+2:8: +2:14\n                                          // mir::Constant\n                                          // + span: $DIR/async_await.rs:16:8: 16:14\n                                          // + literal: Const { ty: unsafe fn(&mut impl Future<Output = ()>) -> Pin<&mut impl Future<Output = ()>> {Pin::<&mut impl Future<Output = ()>>::new_unchecked}, val: Value(<ZST>) }\n@@ -253,7 +253,7 @@ fn b::{closure#0}(_1: Pin<&mut [async fn body@$DIR/async_await.rs:14:18: 17:2]>,\n     bb18: {\n         _29 = &mut (*_30);               // scope 5 at $DIR/async_await.rs:+2:5: +2:14\n         StorageDead(_31);                // scope 5 at $DIR/async_await.rs:+2:13: +2:14\n-        _25 = <impl Future<Output = ()> as Future>::poll(move _26, move _29) -> bb19; // scope 5 at $DIR/async_await.rs:+2:8: +2:14\n+        _25 = <impl Future<Output = ()> as Future>::poll(move _26, move _29) -> [return: bb19, unwind unreachable]; // scope 5 at $DIR/async_await.rs:+2:8: +2:14\n                                          // mir::Constant\n                                          // + span: $DIR/async_await.rs:16:8: 16:14\n                                          // + literal: Const { ty: for<'a, 'b, 'c> fn(Pin<&'a mut impl Future<Output = ()>>, &'b mut Context<'c>) -> Poll<<impl Future<Output = ()> as Future>::Output> {<impl Future<Output = ()> as Future>::poll}, val: Value(<ZST>) }"}, {"sha": "1112177fbbf408480626640458e14f1b50054781", "filename": "tests/mir-opt/building/enum_cast.droppy.built.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Fbuilding%2Fenum_cast.droppy.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Fbuilding%2Fenum_cast.droppy.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fenum_cast.droppy.built.after.mir?ref=2a9d710d999e629c064908076420635096eb39de", "patch": "@@ -63,7 +63,7 @@ fn droppy() -> () {\n     }\n \n     bb4 (cleanup): {\n-        drop(_2) -> bb5;                 // scope 0 at $DIR/enum_cast.rs:+6:5: +6:6\n+        drop(_2) -> [return: bb5, unwind terminate]; // scope 0 at $DIR/enum_cast.rs:+6:5: +6:6\n     }\n \n     bb5 (cleanup): {"}, {"sha": "cc135f41721526e1065e6734b9f0e9d3d4bbd7a3", "filename": "tests/mir-opt/building/issue_49232.main.built.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Fbuilding%2Fissue_49232.main.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Fbuilding%2Fissue_49232.main.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fissue_49232.main.built.after.mir?ref=2a9d710d999e629c064908076420635096eb39de", "patch": "@@ -17,7 +17,7 @@ fn main() -> () {\n     }\n \n     bb1: {\n-        falseUnwind -> [real: bb2, cleanup: bb11]; // scope 0 at $DIR/issue_49232.rs:+1:5: +9:6\n+        falseUnwind -> [real: bb2, unwind: bb11]; // scope 0 at $DIR/issue_49232.rs:+1:5: +9:6\n     }\n \n     bb2: {"}, {"sha": "54f0ea2d894235a69f022952f729c77fb5708a53", "filename": "tests/mir-opt/building/uniform_array_move_out.move_out_by_subslice.built.after.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Fbuilding%2Funiform_array_move_out.move_out_by_subslice.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Fbuilding%2Funiform_array_move_out.move_out_by_subslice.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Funiform_array_move_out.move_out_by_subslice.built.after.mir?ref=2a9d710d999e629c064908076420635096eb39de", "patch": "@@ -95,15 +95,15 @@ fn move_out_by_subslice() -> () {\n     }\n \n     bb9 (cleanup): {\n-        drop(_1) -> bb12;                // scope 0 at $DIR/uniform_array_move_out.rs:+8:1: +8:2\n+        drop(_1) -> [return: bb12, unwind terminate]; // scope 0 at $DIR/uniform_array_move_out.rs:+8:1: +8:2\n     }\n \n     bb10 (cleanup): {\n-        drop(_7) -> bb11;                // scope 0 at $DIR/uniform_array_move_out.rs:+6:5: +6:6\n+        drop(_7) -> [return: bb11, unwind terminate]; // scope 0 at $DIR/uniform_array_move_out.rs:+6:5: +6:6\n     }\n \n     bb11 (cleanup): {\n-        drop(_2) -> bb12;                // scope 0 at $DIR/uniform_array_move_out.rs:+6:5: +6:6\n+        drop(_2) -> [return: bb12, unwind terminate]; // scope 0 at $DIR/uniform_array_move_out.rs:+6:5: +6:6\n     }\n \n     bb12 (cleanup): {"}, {"sha": "5090a4ba67518843ad5322ae85100eb6c8608966", "filename": "tests/mir-opt/building/uniform_array_move_out.move_out_from_end.built.after.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Fbuilding%2Funiform_array_move_out.move_out_from_end.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Fbuilding%2Funiform_array_move_out.move_out_from_end.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Funiform_array_move_out.move_out_from_end.built.after.mir?ref=2a9d710d999e629c064908076420635096eb39de", "patch": "@@ -95,15 +95,15 @@ fn move_out_from_end() -> () {\n     }\n \n     bb9 (cleanup): {\n-        drop(_1) -> bb12;                // scope 0 at $DIR/uniform_array_move_out.rs:+8:1: +8:2\n+        drop(_1) -> [return: bb12, unwind terminate]; // scope 0 at $DIR/uniform_array_move_out.rs:+8:1: +8:2\n     }\n \n     bb10 (cleanup): {\n-        drop(_7) -> bb11;                // scope 0 at $DIR/uniform_array_move_out.rs:+6:5: +6:6\n+        drop(_7) -> [return: bb11, unwind terminate]; // scope 0 at $DIR/uniform_array_move_out.rs:+6:5: +6:6\n     }\n \n     bb11 (cleanup): {\n-        drop(_2) -> bb12;                // scope 0 at $DIR/uniform_array_move_out.rs:+6:5: +6:6\n+        drop(_2) -> [return: bb12, unwind terminate]; // scope 0 at $DIR/uniform_array_move_out.rs:+6:5: +6:6\n     }\n \n     bb12 (cleanup): {"}, {"sha": "b715a544ffea1b7afaa47c78366cfe92e5ab6f64", "filename": "tests/mir-opt/combine_clone_of_primitives.{impl#0}-clone.InstCombine.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Fcombine_clone_of_primitives.%7Bimpl%230%7D-clone.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Fcombine_clone_of_primitives.%7Bimpl%230%7D-clone.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcombine_clone_of_primitives.%7Bimpl%230%7D-clone.InstCombine.diff?ref=2a9d710d999e629c064908076420635096eb39de", "patch": "@@ -72,7 +72,7 @@\n       }\n   \n       bb4 (cleanup): {\n-          drop(_2) -> bb5;                 // scope 0 at $DIR/combine_clone_of_primitives.rs:+0:14: +0:15\n+          drop(_2) -> [return: bb5, unwind terminate]; // scope 0 at $DIR/combine_clone_of_primitives.rs:+0:14: +0:15\n       }\n   \n       bb5 (cleanup): {"}, {"sha": "168e8c610316593726cc36b20fdce1b888ba73c4", "filename": "tests/mir-opt/combine_transmutes.adt_transmutes.InstCombine.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Fcombine_transmutes.adt_transmutes.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Fcombine_transmutes.adt_transmutes.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcombine_transmutes.adt_transmutes.InstCombine.diff?ref=2a9d710d999e629c064908076420635096eb39de", "patch": "@@ -128,7 +128,7 @@\n           StorageDead(_22);                // scope 10 at $DIR/combine_transmutes.rs:+11:47: +11:48\n           StorageLive(_23);                // scope 11 at $DIR/combine_transmutes.rs:+12:9: +12:11\n           StorageLive(_24);                // scope 11 at $DIR/combine_transmutes.rs:+12:46: +12:77\n-          _24 = MaybeUninit::<String>::uninit() -> bb1; // scope 11 at $DIR/combine_transmutes.rs:+12:46: +12:77\n+          _24 = MaybeUninit::<String>::uninit() -> [return: bb1, unwind unreachable]; // scope 11 at $DIR/combine_transmutes.rs:+12:46: +12:77\n                                            // mir::Constant\n                                            // + span: $DIR/combine_transmutes.rs:46:46: 46:75\n                                            // + user_ty: UserType(23)"}, {"sha": "ae1185c7f712faf0cfd833f5bf662a39cc6be7a3", "filename": "tests/mir-opt/combine_transmutes.identity_transmutes.InstCombine.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Fcombine_transmutes.identity_transmutes.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Fcombine_transmutes.identity_transmutes.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcombine_transmutes.identity_transmutes.InstCombine.diff?ref=2a9d710d999e629c064908076420635096eb39de", "patch": "@@ -19,7 +19,7 @@\n +         _1 = const 1_i32;                // scope 0 at $DIR/combine_transmutes.rs:+2:14: +2:38\n           StorageLive(_2);                 // scope 1 at $DIR/combine_transmutes.rs:+3:9: +3:11\n           StorageLive(_3);                 // scope 1 at $DIR/combine_transmutes.rs:+3:46: +3:56\n-          _3 = Vec::<i32>::new() -> bb1;   // scope 1 at $DIR/combine_transmutes.rs:+3:46: +3:56\n+          _3 = Vec::<i32>::new() -> [return: bb1, unwind unreachable]; // scope 1 at $DIR/combine_transmutes.rs:+3:46: +3:56\n                                            // mir::Constant\n                                            // + span: $DIR/combine_transmutes.rs:15:46: 15:54\n                                            // + user_ty: UserType(0)\n@@ -31,7 +31,7 @@\n +         _2 = move _3;                    // scope 1 at $DIR/combine_transmutes.rs:+3:14: +3:57\n           StorageDead(_3);                 // scope 1 at $DIR/combine_transmutes.rs:+3:56: +3:57\n           _0 = const ();                   // scope 0 at $DIR/combine_transmutes.rs:+0:37: +4:2\n-          drop(_2) -> bb2;                 // scope 1 at $DIR/combine_transmutes.rs:+4:1: +4:2\n+          drop(_2) -> [return: bb2, unwind unreachable]; // scope 1 at $DIR/combine_transmutes.rs:+4:1: +4:2\n       }\n   \n       bb2: {"}, {"sha": "97826ed19a252e1d1c7ae2d32e987219f61609e0", "filename": "tests/mir-opt/deref-patterns/string.foo.PreCodegen.after.mir", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Fderef-patterns%2Fstring.foo.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Fderef-patterns%2Fstring.foo.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fderef-patterns%2Fstring.foo.PreCodegen.after.mir?ref=2a9d710d999e629c064908076420635096eb39de", "patch": "@@ -25,19 +25,19 @@ fn foo(_1: Option<String>) -> i32 {\n         _7 = const false;                // scope 0 at $DIR/string.rs:+3:9: +3:10\n         _6 = move _1;                    // scope 0 at $DIR/string.rs:+3:9: +3:10\n         _0 = const 4321_i32;             // scope 1 at $DIR/string.rs:+3:14: +3:18\n-        drop(_6) -> bb6;                 // scope 0 at $DIR/string.rs:+3:17: +3:18\n+        drop(_6) -> [return: bb6, unwind unreachable]; // scope 0 at $DIR/string.rs:+3:17: +3:18\n     }\n \n     bb2: {\n         _2 = &((_1 as Some).0: std::string::String); // scope 0 at $DIR/string.rs:+2:14: +2:17\n-        _3 = <String as Deref>::deref(move _2) -> bb3; // scope 0 at $DIR/string.rs:+2:14: +2:17\n+        _3 = <String as Deref>::deref(move _2) -> [return: bb3, unwind unreachable]; // scope 0 at $DIR/string.rs:+2:14: +2:17\n                                          // mir::Constant\n                                          // + span: $DIR/string.rs:9:14: 9:17\n                                          // + literal: Const { ty: for<'a> fn(&'a String) -> &'a <String as Deref>::Target {<String as Deref>::deref}, val: Value(<ZST>) }\n     }\n \n     bb3: {\n-        _4 = <str as PartialEq>::eq(_3, const \"a\") -> bb4; // scope 0 at $DIR/string.rs:+2:14: +2:17\n+        _4 = <str as PartialEq>::eq(_3, const \"a\") -> [return: bb4, unwind unreachable]; // scope 0 at $DIR/string.rs:+2:14: +2:17\n                                          // mir::Constant\n                                          // + span: $DIR/string.rs:9:14: 9:17\n                                          // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }\n@@ -65,7 +65,7 @@ fn foo(_1: Option<String>) -> i32 {\n     }\n \n     bb8: {\n-        drop(_1) -> bb7;                 // scope 0 at $DIR/string.rs:+5:1: +5:2\n+        drop(_1) -> [return: bb7, unwind unreachable]; // scope 0 at $DIR/string.rs:+5:1: +5:2\n     }\n \n     bb9: {"}, {"sha": "426d4fb213cdb1653a9c218b02e0e201f881941e", "filename": "tests/mir-opt/derefer_inline_test.main.Derefer.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Fderefer_inline_test.main.Derefer.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Fderefer_inline_test.main.Derefer.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fderefer_inline_test.main.Derefer.diff?ref=2a9d710d999e629c064908076420635096eb39de", "patch": "@@ -35,7 +35,7 @@\n       }\n   \n       bb4 (cleanup): {\n-          drop(_2) -> bb5;                 // scope 0 at $DIR/derefer_inline_test.rs:+1:17: +1:18\n+          drop(_2) -> [return: bb5, unwind terminate]; // scope 0 at $DIR/derefer_inline_test.rs:+1:17: +1:18\n       }\n   \n       bb5 (cleanup): {"}, {"sha": "c0fc1fb1df37465c2a7e34917ba7ba82cd8bba21", "filename": "tests/mir-opt/dont_yeet_assert.generic.InstCombine.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Fdont_yeet_assert.generic.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Fdont_yeet_assert.generic.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdont_yeet_assert.generic.InstCombine.diff?ref=2a9d710d999e629c064908076420635096eb39de", "patch": "@@ -7,7 +7,7 @@\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/dont_yeet_assert.rs:+1:5: +1:61\n-          _1 = assert_mem_uninitialized_valid::<&T>() -> bb1; // scope 0 at $DIR/dont_yeet_assert.rs:+1:5: +1:61\n+          _1 = assert_mem_uninitialized_valid::<&T>() -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/dont_yeet_assert.rs:+1:5: +1:61\n                                            // mir::Constant\n                                            // + span: $DIR/dont_yeet_assert.rs:10:5: 10:59\n                                            // + user_ty: UserType(0)"}, {"sha": "32b472ebeeb58e43df541a2aa453343e09bff42b", "filename": "tests/mir-opt/generator_storage_dead_unwind.main-{closure#0}.StateTransform.before.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Fgenerator_storage_dead_unwind.main-%7Bclosure%230%7D.StateTransform.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Fgenerator_storage_dead_unwind.main-%7Bclosure%230%7D.StateTransform.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fgenerator_storage_dead_unwind.main-%7Bclosure%230%7D.StateTransform.before.mir?ref=2a9d710d999e629c064908076420635096eb39de", "patch": "@@ -110,7 +110,7 @@ yields ()\n \n     bb13 (cleanup): {\n         StorageDead(_3);                 // scope 0 at $DIR/generator_storage_dead_unwind.rs:+6:5: +6:6\n-        drop(_1) -> bb14;                // scope 0 at $DIR/generator_storage_dead_unwind.rs:+6:5: +6:6\n+        drop(_1) -> [return: bb14, unwind terminate]; // scope 0 at $DIR/generator_storage_dead_unwind.rs:+6:5: +6:6\n     }\n \n     bb14 (cleanup): {\n@@ -119,6 +119,6 @@ yields ()\n \n     bb15 (cleanup): {\n         StorageDead(_3);                 // scope 0 at $DIR/generator_storage_dead_unwind.rs:+6:5: +6:6\n-        drop(_1) -> bb14;                // scope 0 at $DIR/generator_storage_dead_unwind.rs:+6:5: +6:6\n+        drop(_1) -> [return: bb14, unwind terminate]; // scope 0 at $DIR/generator_storage_dead_unwind.rs:+6:5: +6:6\n     }\n }"}, {"sha": "dc9bb533f132bc9a1a6292ed4410b36e718cd60f", "filename": "tests/mir-opt/generator_tiny.main-{closure#0}.generator_resume.0.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Fgenerator_tiny.main-%7Bclosure%230%7D.generator_resume.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Fgenerator_tiny.main-%7Bclosure%230%7D.generator_resume.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fgenerator_tiny.main-%7Bclosure%230%7D.generator_resume.0.mir?ref=2a9d710d999e629c064908076420635096eb39de", "patch": "@@ -63,7 +63,7 @@ fn main::{closure#0}(_1: Pin<&mut [generator@$DIR/generator_tiny.rs:19:16: 19:24\n         StorageDead(_7);                 // scope 1 at $DIR/generator_tiny.rs:+3:17: +3:18\n         StorageDead(_6);                 // scope 1 at $DIR/generator_tiny.rs:+3:18: +3:19\n         StorageLive(_8);                 // scope 1 at $DIR/generator_tiny.rs:+4:13: +4:21\n-        _8 = callee() -> bb4;            // scope 1 at $DIR/generator_tiny.rs:+4:13: +4:21\n+        _8 = callee() -> [return: bb4, unwind unreachable]; // scope 1 at $DIR/generator_tiny.rs:+4:13: +4:21\n                                          // mir::Constant\n                                          // + span: $DIR/generator_tiny.rs:23:13: 23:19\n                                          // + literal: Const { ty: fn() {callee}, val: Value(<ZST>) }"}, {"sha": "ba1bfec05d21831bbfe7ce1077c011d9f5203947", "filename": "tests/mir-opt/inline/asm_unwind.main.Inline.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Finline%2Fasm_unwind.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Finline%2Fasm_unwind.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Fasm_unwind.main.Inline.diff?ref=2a9d710d999e629c064908076420635096eb39de", "patch": "@@ -35,7 +35,7 @@\n +     }\n + \n +     bb3 (cleanup): {\n-+         drop(_2) -> bb4;                 // scope 1 at $DIR/asm_unwind.rs:17:1: 17:2\n++         drop(_2) -> [return: bb4, unwind terminate]; // scope 1 at $DIR/asm_unwind.rs:17:1: 17:2\n +     }\n + \n +     bb4 (cleanup): {"}, {"sha": "8da597577431be007ec8e0e9aba11feca384a20e", "filename": "tests/mir-opt/inline/cycle.f.Inline.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Finline%2Fcycle.f.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Finline%2Fcycle.f.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Fcycle.f.Inline.diff?ref=2a9d710d999e629c064908076420635096eb39de", "patch": "@@ -33,7 +33,7 @@\n       }\n   \n       bb3 (cleanup): {\n-          drop(_1) -> bb4;                 // scope 0 at $DIR/cycle.rs:+2:1: +2:2\n+          drop(_1) -> [return: bb4, unwind terminate]; // scope 0 at $DIR/cycle.rs:+2:1: +2:2\n       }\n   \n       bb4 (cleanup): {"}, {"sha": "1e6e30f9e9bef7d9ebe0215891d6e2644a8c405b", "filename": "tests/mir-opt/inline/cycle.g.Inline.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Finline%2Fcycle.g.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Finline%2Fcycle.g.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Fcycle.g.Inline.diff?ref=2a9d710d999e629c064908076420635096eb39de", "patch": "@@ -42,7 +42,7 @@\n +     }\n + \n +     bb2 (cleanup): {\n-+         drop(_2) -> bb3;                 // scope 1 at $DIR/cycle.rs:7:1: 7:2\n++         drop(_2) -> [return: bb3, unwind terminate]; // scope 1 at $DIR/cycle.rs:7:1: 7:2\n +     }\n + \n +     bb3 (cleanup): {"}, {"sha": "315634945e43246a8fa95489280414d69a91d830", "filename": "tests/mir-opt/inline/cycle.main.Inline.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Finline%2Fcycle.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Finline%2Fcycle.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Fcycle.main.Inline.diff?ref=2a9d710d999e629c064908076420635096eb39de", "patch": "@@ -42,7 +42,7 @@\n +     }\n + \n +     bb2 (cleanup): {\n-+         drop(_2) -> bb3;                 // scope 1 at $DIR/cycle.rs:7:1: 7:2\n++         drop(_2) -> [return: bb3, unwind terminate]; // scope 1 at $DIR/cycle.rs:7:1: 7:2\n +     }\n + \n +     bb3 (cleanup): {"}, {"sha": "d501b6ca8d2c653c9c61592ec03563bb6ca8ae74", "filename": "tests/mir-opt/inline/inline_diverging.h.Inline.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Finline%2Finline_diverging.h.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Finline%2Finline_diverging.h.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_diverging.h.Inline.diff?ref=2a9d710d999e629c064908076420635096eb39de", "patch": "@@ -58,11 +58,11 @@\n +     }\n + \n +     bb3 (cleanup): {\n-+         drop(_3) -> bb4;                 // scope 1 at $DIR/inline_diverging.rs:30:1: 30:2\n++         drop(_3) -> [return: bb4, unwind terminate]; // scope 1 at $DIR/inline_diverging.rs:30:1: 30:2\n +     }\n + \n +     bb4 (cleanup): {\n-+         drop(_2) -> bb5;                 // scope 1 at $DIR/inline_diverging.rs:30:1: 30:2\n++         drop(_2) -> [return: bb5, unwind terminate]; // scope 1 at $DIR/inline_diverging.rs:30:1: 30:2\n +     }\n + \n +     bb5 (cleanup): {"}, {"sha": "a1d2423ae2709679685df1377c45ed352135fdab", "filename": "tests/mir-opt/inline/inline_instruction_set.default.Inline.diff", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Finline%2Finline_instruction_set.default.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Finline%2Finline_instruction_set.default.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_instruction_set.default.Inline.diff?ref=2a9d710d999e629c064908076420635096eb39de", "patch": "@@ -16,7 +16,7 @@\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/inline_instruction_set.rs:+1:5: +1:26\n-          _1 = instruction_set_a32() -> bb1; // scope 0 at $DIR/inline_instruction_set.rs:+1:5: +1:26\n+          _1 = instruction_set_a32() -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/inline_instruction_set.rs:+1:5: +1:26\n                                            // mir::Constant\n                                            // + span: $DIR/inline_instruction_set.rs:57:5: 57:24\n                                            // + literal: Const { ty: fn() {instruction_set_a32}, val: Value(<ZST>) }\n@@ -25,7 +25,7 @@\n       bb1: {\n           StorageDead(_1);                 // scope 0 at $DIR/inline_instruction_set.rs:+1:26: +1:27\n           StorageLive(_2);                 // scope 0 at $DIR/inline_instruction_set.rs:+2:5: +2:26\n-          _2 = instruction_set_t32() -> bb2; // scope 0 at $DIR/inline_instruction_set.rs:+2:5: +2:26\n+          _2 = instruction_set_t32() -> [return: bb2, unwind unreachable]; // scope 0 at $DIR/inline_instruction_set.rs:+2:5: +2:26\n                                            // mir::Constant\n                                            // + span: $DIR/inline_instruction_set.rs:58:5: 58:24\n                                            // + literal: Const { ty: fn() {instruction_set_t32}, val: Value(<ZST>) }\n@@ -34,7 +34,7 @@\n       bb2: {\n           StorageDead(_2);                 // scope 0 at $DIR/inline_instruction_set.rs:+2:26: +2:27\n           StorageLive(_3);                 // scope 0 at $DIR/inline_instruction_set.rs:+3:5: +3:30\n--         _3 = instruction_set_default() -> bb3; // scope 0 at $DIR/inline_instruction_set.rs:+3:5: +3:30\n+-         _3 = instruction_set_default() -> [return: bb3, unwind unreachable]; // scope 0 at $DIR/inline_instruction_set.rs:+3:5: +3:30\n -                                          // mir::Constant\n -                                          // + span: $DIR/inline_instruction_set.rs:59:5: 59:28\n -                                          // + literal: Const { ty: fn() {instruction_set_default}, val: Value(<ZST>) }\n@@ -43,11 +43,11 @@\n -     bb3: {\n           StorageDead(_3);                 // scope 0 at $DIR/inline_instruction_set.rs:+3:30: +3:31\n           StorageLive(_4);                 // scope 0 at $DIR/inline_instruction_set.rs:+4:5: +4:41\n--         _4 = inline_always_and_using_inline_asm() -> bb4; // scope 0 at $DIR/inline_instruction_set.rs:+4:5: +4:41\n+-         _4 = inline_always_and_using_inline_asm() -> [return: bb4, unwind unreachable]; // scope 0 at $DIR/inline_instruction_set.rs:+4:5: +4:41\n -                                          // mir::Constant\n -                                          // + span: $DIR/inline_instruction_set.rs:60:5: 60:39\n -                                          // + literal: Const { ty: fn() {inline_always_and_using_inline_asm}, val: Value(<ZST>) }\n-+         asm!(\"/* do nothing */\", options((empty))) -> bb3; // scope 3 at $DIR/inline_instruction_set.rs:43:14: 43:38\n++         asm!(\"/* do nothing */\", options((empty))) -> [return: bb3, unwind unreachable]; // scope 3 at $DIR/inline_instruction_set.rs:43:14: 43:38\n       }\n   \n -     bb4: {"}, {"sha": "36aec4f47b08dab2551ce76452f369604f00aa88", "filename": "tests/mir-opt/inline/inline_instruction_set.t32.Inline.diff", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Finline%2Finline_instruction_set.t32.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Finline%2Finline_instruction_set.t32.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_instruction_set.t32.Inline.diff?ref=2a9d710d999e629c064908076420635096eb39de", "patch": "@@ -14,7 +14,7 @@\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/inline_instruction_set.rs:+1:5: +1:26\n-          _1 = instruction_set_a32() -> bb1; // scope 0 at $DIR/inline_instruction_set.rs:+1:5: +1:26\n+          _1 = instruction_set_a32() -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/inline_instruction_set.rs:+1:5: +1:26\n                                            // mir::Constant\n                                            // + span: $DIR/inline_instruction_set.rs:49:5: 49:24\n                                            // + literal: Const { ty: fn() {instruction_set_a32}, val: Value(<ZST>) }\n@@ -23,7 +23,7 @@\n       bb1: {\n           StorageDead(_1);                 // scope 0 at $DIR/inline_instruction_set.rs:+1:26: +1:27\n           StorageLive(_2);                 // scope 0 at $DIR/inline_instruction_set.rs:+2:5: +2:26\n--         _2 = instruction_set_t32() -> bb2; // scope 0 at $DIR/inline_instruction_set.rs:+2:5: +2:26\n+-         _2 = instruction_set_t32() -> [return: bb2, unwind unreachable]; // scope 0 at $DIR/inline_instruction_set.rs:+2:5: +2:26\n -                                          // mir::Constant\n -                                          // + span: $DIR/inline_instruction_set.rs:50:5: 50:24\n -                                          // + literal: Const { ty: fn() {instruction_set_t32}, val: Value(<ZST>) }\n@@ -32,7 +32,7 @@\n -     bb2: {\n           StorageDead(_2);                 // scope 0 at $DIR/inline_instruction_set.rs:+2:26: +2:27\n           StorageLive(_3);                 // scope 0 at $DIR/inline_instruction_set.rs:+3:5: +3:30\n--         _3 = instruction_set_default() -> bb3; // scope 0 at $DIR/inline_instruction_set.rs:+3:5: +3:30\n+-         _3 = instruction_set_default() -> [return: bb3, unwind unreachable]; // scope 0 at $DIR/inline_instruction_set.rs:+3:5: +3:30\n -                                          // mir::Constant\n -                                          // + span: $DIR/inline_instruction_set.rs:51:5: 51:28\n -                                          // + literal: Const { ty: fn() {instruction_set_default}, val: Value(<ZST>) }\n@@ -41,8 +41,8 @@\n -     bb3: {\n           StorageDead(_3);                 // scope 0 at $DIR/inline_instruction_set.rs:+3:30: +3:31\n           StorageLive(_4);                 // scope 0 at $DIR/inline_instruction_set.rs:+4:5: +4:41\n--         _4 = inline_always_and_using_inline_asm() -> bb4; // scope 0 at $DIR/inline_instruction_set.rs:+4:5: +4:41\n-+         _4 = inline_always_and_using_inline_asm() -> bb2; // scope 0 at $DIR/inline_instruction_set.rs:+4:5: +4:41\n+-         _4 = inline_always_and_using_inline_asm() -> [return: bb4, unwind unreachable]; // scope 0 at $DIR/inline_instruction_set.rs:+4:5: +4:41\n++         _4 = inline_always_and_using_inline_asm() -> [return: bb2, unwind unreachable]; // scope 0 at $DIR/inline_instruction_set.rs:+4:5: +4:41\n                                            // mir::Constant\n                                            // + span: $DIR/inline_instruction_set.rs:52:5: 52:39\n                                            // + literal: Const { ty: fn() {inline_always_and_using_inline_asm}, val: Value(<ZST>) }"}, {"sha": "a5129e0e8c8e11fbf53c11186d47fd35d6498635", "filename": "tests/mir-opt/inline/inline_into_box_place.main.Inline.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.diff?ref=2a9d710d999e629c064908076420635096eb39de", "patch": "@@ -75,7 +75,7 @@\n   \n       bb4 (cleanup): {\n -         resume;                          // scope 0 at $DIR/inline_into_box_place.rs:+0:1: +2:2\n-+         drop(_2) -> bb2;                 // scope 3 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n++         drop(_2) -> [return: bb2, unwind terminate]; // scope 3 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n       }\n   }\n   "}, {"sha": "dc3fe75559e99b22a07999761cd4950e22208086", "filename": "tests/mir-opt/inline/issue_78442.bar.Inline.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Finline%2Fissue_78442.bar.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Finline%2Fissue_78442.bar.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Fissue_78442.bar.Inline.diff?ref=2a9d710d999e629c064908076420635096eb39de", "patch": "@@ -46,11 +46,11 @@\n -     bb3: {\n -         return;                          // scope 0 at $DIR/issue_78442.rs:+5:2: +5:2\n +     bb3 (cleanup): {\n-+         drop(_1) -> bb4;                 // scope 0 at $DIR/issue_78442.rs:+5:1: +5:2\n++         drop(_1) -> [return: bb4, unwind terminate]; // scope 0 at $DIR/issue_78442.rs:+5:1: +5:2\n       }\n   \n       bb4 (cleanup): {\n--         drop(_1) -> bb5;                 // scope 0 at $DIR/issue_78442.rs:+5:1: +5:2\n+-         drop(_1) -> [return: bb5, unwind terminate]; // scope 0 at $DIR/issue_78442.rs:+5:1: +5:2\n +         resume;                          // scope 0 at $DIR/issue_78442.rs:+0:1: +5:2\n       }\n   "}, {"sha": "8f56ef2585ce92385e771bd78ba77e350be5142d", "filename": "tests/mir-opt/inline/issue_78442.bar.RevealAll.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Finline%2Fissue_78442.bar.RevealAll.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Finline%2Fissue_78442.bar.RevealAll.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Fissue_78442.bar.RevealAll.diff?ref=2a9d710d999e629c064908076420635096eb39de", "patch": "@@ -47,7 +47,7 @@\n       }\n   \n       bb4 (cleanup): {\n-          drop(_1) -> bb5;                 // scope 0 at $DIR/issue_78442.rs:+5:1: +5:2\n+          drop(_1) -> [return: bb5, unwind terminate]; // scope 0 at $DIR/issue_78442.rs:+5:1: +5:2\n       }\n   \n       bb5 (cleanup): {"}, {"sha": "537be1c2ae477020e3c357f755bcefa5dcf65b53", "filename": "tests/mir-opt/inline/unchecked_shifts.unchecked_shl_unsigned_smaller.Inline.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shl_unsigned_smaller.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shl_unsigned_smaller.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shl_unsigned_smaller.Inline.diff?ref=2a9d710d999e629c064908076420635096eb39de", "patch": "@@ -106,7 +106,7 @@\n +         _5 = move ((_6 as Some).0: u16); // scope 7 at $SRC_DIR/core/src/option.rs:LL:COL\n +         StorageDead(_10);                // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n +         StorageDead(_6);                 // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n-+         _0 = unchecked_shl::<u16>(_3, move _5) -> bb3; // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n++         _0 = unchecked_shl::<u16>(_3, move _5) -> [return: bb3, unwind unreachable]; // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n +                                          // mir::Constant\n +                                          // + span: $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n +                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(u16, u16) -> u16 {unchecked_shl::<u16>}, val: Value(<ZST>) }"}, {"sha": "517440af9f2e7d40cbe840746a5d1a3593647288", "filename": "tests/mir-opt/inline/unchecked_shifts.unchecked_shl_unsigned_smaller.PreCodegen.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shl_unsigned_smaller.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shl_unsigned_smaller.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shl_unsigned_smaller.PreCodegen.after.mir?ref=2a9d710d999e629c064908076420635096eb39de", "patch": "@@ -94,7 +94,7 @@ fn unchecked_shl_unsigned_smaller(_1: u16, _2: u32) -> u16 {\n         _3 = move ((_4 as Some).0: u16); // scope 7 at $SRC_DIR/core/src/option.rs:LL:COL\n         StorageDead(_8);                 // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n         StorageDead(_4);                 // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n-        _0 = unchecked_shl::<u16>(_1, move _3) -> bb3; // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        _0 = unchecked_shl::<u16>(_1, move _3) -> [return: bb3, unwind unreachable]; // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(u16, u16) -> u16 {unchecked_shl::<u16>}, val: Value(<ZST>) }"}, {"sha": "021ff67f5219f59ead84c9ef961e52e18ccf0505", "filename": "tests/mir-opt/inline/unchecked_shifts.unchecked_shr_signed_smaller.Inline.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shr_signed_smaller.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shr_signed_smaller.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shr_signed_smaller.Inline.diff?ref=2a9d710d999e629c064908076420635096eb39de", "patch": "@@ -106,7 +106,7 @@\n +         _5 = move ((_6 as Some).0: i16); // scope 7 at $SRC_DIR/core/src/option.rs:LL:COL\n +         StorageDead(_10);                // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n +         StorageDead(_6);                 // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n-+         _0 = unchecked_shr::<i16>(_3, move _5) -> bb3; // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n++         _0 = unchecked_shr::<i16>(_3, move _5) -> [return: bb3, unwind unreachable]; // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n +                                          // mir::Constant\n +                                          // + span: $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n +                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(i16, i16) -> i16 {unchecked_shr::<i16>}, val: Value(<ZST>) }"}, {"sha": "0d56e9a68eb4005647e4d211db3bab5c7df65596", "filename": "tests/mir-opt/inline/unchecked_shifts.unchecked_shr_signed_smaller.PreCodegen.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shr_signed_smaller.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shr_signed_smaller.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shr_signed_smaller.PreCodegen.after.mir?ref=2a9d710d999e629c064908076420635096eb39de", "patch": "@@ -94,7 +94,7 @@ fn unchecked_shr_signed_smaller(_1: i16, _2: u32) -> i16 {\n         _3 = move ((_4 as Some).0: i16); // scope 7 at $SRC_DIR/core/src/option.rs:LL:COL\n         StorageDead(_8);                 // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n         StorageDead(_4);                 // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n-        _0 = unchecked_shr::<i16>(_1, move _3) -> bb3; // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n+        _0 = unchecked_shr::<i16>(_1, move _3) -> [return: bb3, unwind unreachable]; // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(i16, i16) -> i16 {unchecked_shr::<i16>}, val: Value(<ZST>) }"}, {"sha": "49006e012dde6acb22911655e4fd33988b04a54b", "filename": "tests/mir-opt/instrument_coverage.main.InstrumentCoverage.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Finstrument_coverage.main.InstrumentCoverage.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Finstrument_coverage.main.InstrumentCoverage.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finstrument_coverage.main.InstrumentCoverage.diff?ref=2a9d710d999e629c064908076420635096eb39de", "patch": "@@ -14,7 +14,7 @@\n   \n       bb1: {\n +         Coverage::Expression(4294967295) = 1 + 2 for /the/src/instrument_coverage.rs:12:5 - 13:17; // scope 0 at /the/src/instrument_coverage.rs:+1:5: +5:6\n-          falseUnwind -> [real: bb2, cleanup: bb6]; // scope 0 at /the/src/instrument_coverage.rs:+1:5: +5:6\n+          falseUnwind -> [real: bb2, unwind: bb6]; // scope 0 at /the/src/instrument_coverage.rs:+1:5: +5:6\n       }\n   \n       bb2: {"}, {"sha": "09fc145e734d049832b62e8ccbf74932ef567ab7", "filename": "tests/mir-opt/intrinsic_asserts.generic.InstCombine.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Fintrinsic_asserts.generic.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Fintrinsic_asserts.generic.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fintrinsic_asserts.generic.InstCombine.diff?ref=2a9d710d999e629c064908076420635096eb39de", "patch": "@@ -9,7 +9,7 @@\n   \n       bb0: {\n           nop;                             // scope 0 at $DIR/intrinsic_asserts.rs:+1:5: +1:46\n-          _1 = assert_inhabited::<T>() -> bb1; // scope 0 at $DIR/intrinsic_asserts.rs:+1:5: +1:46\n+          _1 = assert_inhabited::<T>() -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/intrinsic_asserts.rs:+1:5: +1:46\n                                            // mir::Constant\n                                            // + span: $DIR/intrinsic_asserts.rs:25:5: 25:44\n                                            // + literal: Const { ty: extern \"rust-intrinsic\" fn() {assert_inhabited::<T>}, val: Value(<ZST>) }\n@@ -18,7 +18,7 @@\n       bb1: {\n           nop;                             // scope 0 at $DIR/intrinsic_asserts.rs:+1:46: +1:47\n           nop;                             // scope 0 at $DIR/intrinsic_asserts.rs:+2:5: +2:47\n-          _2 = assert_zero_valid::<T>() -> bb2; // scope 0 at $DIR/intrinsic_asserts.rs:+2:5: +2:47\n+          _2 = assert_zero_valid::<T>() -> [return: bb2, unwind unreachable]; // scope 0 at $DIR/intrinsic_asserts.rs:+2:5: +2:47\n                                            // mir::Constant\n                                            // + span: $DIR/intrinsic_asserts.rs:26:5: 26:45\n                                            // + literal: Const { ty: extern \"rust-intrinsic\" fn() {assert_zero_valid::<T>}, val: Value(<ZST>) }\n@@ -27,7 +27,7 @@\n       bb2: {\n           nop;                             // scope 0 at $DIR/intrinsic_asserts.rs:+2:47: +2:48\n           nop;                             // scope 0 at $DIR/intrinsic_asserts.rs:+3:5: +3:60\n-          _3 = assert_mem_uninitialized_valid::<T>() -> bb3; // scope 0 at $DIR/intrinsic_asserts.rs:+3:5: +3:60\n+          _3 = assert_mem_uninitialized_valid::<T>() -> [return: bb3, unwind unreachable]; // scope 0 at $DIR/intrinsic_asserts.rs:+3:5: +3:60\n                                            // mir::Constant\n                                            // + span: $DIR/intrinsic_asserts.rs:27:5: 27:58\n                                            // + literal: Const { ty: extern \"rust-intrinsic\" fn() {assert_mem_uninitialized_valid::<T>}, val: Value(<ZST>) }"}, {"sha": "c52174ef5ea28ebd054a0fd0bc1a2dd447bfce5a", "filename": "tests/mir-opt/intrinsic_asserts.panics.InstCombine.diff", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Fintrinsic_asserts.panics.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Fintrinsic_asserts.panics.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fintrinsic_asserts.panics.InstCombine.diff?ref=2a9d710d999e629c064908076420635096eb39de", "patch": "@@ -9,8 +9,8 @@\n   \n       bb0: {\n           nop;                             // scope 0 at $DIR/intrinsic_asserts.rs:+1:5: +1:50\n--         _1 = assert_inhabited::<Never>() -> bb1; // scope 0 at $DIR/intrinsic_asserts.rs:+1:5: +1:50\n-+         _1 = assert_inhabited::<Never>(); // scope 0 at $DIR/intrinsic_asserts.rs:+1:5: +1:50\n+-         _1 = assert_inhabited::<Never>() -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/intrinsic_asserts.rs:+1:5: +1:50\n++         _1 = assert_inhabited::<Never>() -> unwind unreachable; // scope 0 at $DIR/intrinsic_asserts.rs:+1:5: +1:50\n                                            // mir::Constant\n                                            // + span: $DIR/intrinsic_asserts.rs:17:5: 17:48\n                                            // + literal: Const { ty: extern \"rust-intrinsic\" fn() {assert_inhabited::<Never>}, val: Value(<ZST>) }\n@@ -19,8 +19,8 @@\n       bb1: {\n           nop;                             // scope 0 at $DIR/intrinsic_asserts.rs:+1:50: +1:51\n           nop;                             // scope 0 at $DIR/intrinsic_asserts.rs:+2:5: +2:49\n--         _2 = assert_zero_valid::<&u8>() -> bb2; // scope 0 at $DIR/intrinsic_asserts.rs:+2:5: +2:49\n-+         _2 = assert_zero_valid::<&u8>(); // scope 0 at $DIR/intrinsic_asserts.rs:+2:5: +2:49\n+-         _2 = assert_zero_valid::<&u8>() -> [return: bb2, unwind unreachable]; // scope 0 at $DIR/intrinsic_asserts.rs:+2:5: +2:49\n++         _2 = assert_zero_valid::<&u8>() -> unwind unreachable; // scope 0 at $DIR/intrinsic_asserts.rs:+2:5: +2:49\n                                            // mir::Constant\n                                            // + span: $DIR/intrinsic_asserts.rs:18:5: 18:47\n                                            // + user_ty: UserType(0)\n@@ -30,8 +30,8 @@\n       bb2: {\n           nop;                             // scope 0 at $DIR/intrinsic_asserts.rs:+2:49: +2:50\n           nop;                             // scope 0 at $DIR/intrinsic_asserts.rs:+3:5: +3:62\n--         _3 = assert_mem_uninitialized_valid::<&u8>() -> bb3; // scope 0 at $DIR/intrinsic_asserts.rs:+3:5: +3:62\n-+         _3 = assert_mem_uninitialized_valid::<&u8>(); // scope 0 at $DIR/intrinsic_asserts.rs:+3:5: +3:62\n+-         _3 = assert_mem_uninitialized_valid::<&u8>() -> [return: bb3, unwind unreachable]; // scope 0 at $DIR/intrinsic_asserts.rs:+3:5: +3:62\n++         _3 = assert_mem_uninitialized_valid::<&u8>() -> unwind unreachable; // scope 0 at $DIR/intrinsic_asserts.rs:+3:5: +3:62\n                                            // mir::Constant\n                                            // + span: $DIR/intrinsic_asserts.rs:19:5: 19:60\n                                            // + user_ty: UserType(1)"}, {"sha": "d059d47ee58619e29466fad1bdee977996dee425", "filename": "tests/mir-opt/intrinsic_asserts.removable.InstCombine.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Fintrinsic_asserts.removable.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Fintrinsic_asserts.removable.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fintrinsic_asserts.removable.InstCombine.diff?ref=2a9d710d999e629c064908076420635096eb39de", "patch": "@@ -9,7 +9,7 @@\n   \n       bb0: {\n           nop;                             // scope 0 at $DIR/intrinsic_asserts.rs:+1:5: +1:47\n--         _1 = assert_inhabited::<()>() -> bb1; // scope 0 at $DIR/intrinsic_asserts.rs:+1:5: +1:47\n+-         _1 = assert_inhabited::<()>() -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/intrinsic_asserts.rs:+1:5: +1:47\n -                                          // mir::Constant\n -                                          // + span: $DIR/intrinsic_asserts.rs:7:5: 7:45\n -                                          // + literal: Const { ty: extern \"rust-intrinsic\" fn() {assert_inhabited::<()>}, val: Value(<ZST>) }\n@@ -19,7 +19,7 @@\n       bb1: {\n           nop;                             // scope 0 at $DIR/intrinsic_asserts.rs:+1:47: +1:48\n           nop;                             // scope 0 at $DIR/intrinsic_asserts.rs:+2:5: +2:48\n--         _2 = assert_zero_valid::<u8>() -> bb2; // scope 0 at $DIR/intrinsic_asserts.rs:+2:5: +2:48\n+-         _2 = assert_zero_valid::<u8>() -> [return: bb2, unwind unreachable]; // scope 0 at $DIR/intrinsic_asserts.rs:+2:5: +2:48\n -                                          // mir::Constant\n -                                          // + span: $DIR/intrinsic_asserts.rs:8:5: 8:46\n -                                          // + literal: Const { ty: extern \"rust-intrinsic\" fn() {assert_zero_valid::<u8>}, val: Value(<ZST>) }\n@@ -29,7 +29,7 @@\n       bb2: {\n           nop;                             // scope 0 at $DIR/intrinsic_asserts.rs:+2:48: +2:49\n           nop;                             // scope 0 at $DIR/intrinsic_asserts.rs:+3:5: +3:61\n--         _3 = assert_mem_uninitialized_valid::<u8>() -> bb3; // scope 0 at $DIR/intrinsic_asserts.rs:+3:5: +3:61\n+-         _3 = assert_mem_uninitialized_valid::<u8>() -> [return: bb3, unwind unreachable]; // scope 0 at $DIR/intrinsic_asserts.rs:+3:5: +3:61\n -                                          // mir::Constant\n -                                          // + span: $DIR/intrinsic_asserts.rs:9:5: 9:59\n -                                          // + literal: Const { ty: extern \"rust-intrinsic\" fn() {assert_mem_uninitialized_valid::<u8>}, val: Value(<ZST>) }"}, {"sha": "b96c80b4216127603ad75b160bfa45249669deef", "filename": "tests/mir-opt/issue_101973.inner.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Fissue_101973.inner.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Fissue_101973.inner.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fissue_101973.inner.ConstProp.diff?ref=2a9d710d999e629c064908076420635096eb39de", "patch": "@@ -66,7 +66,7 @@\n       bb2: {\n           _6 = Shl(move _7, const 1_i32);  // scope 0 at $DIR/issue_101973.rs:+1:31: +1:57\n           StorageDead(_7);                 // scope 0 at $DIR/issue_101973.rs:+1:56: +1:57\n-          _3 = rotate_right::<u32>(_4, _6) -> bb3; // scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+          _3 = rotate_right::<u32>(_4, _6) -> [return: bb3, unwind unreachable]; // scope 3 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n                                            // + literal: Const { ty: extern \"rust-intrinsic\" fn(u32, u32) -> u32 {rotate_right::<u32>}, val: Value(<ZST>) }"}, {"sha": "ccaa508c13b504c0e80b207553b9d828291a25e3", "filename": "tests/mir-opt/issue_38669.main.SimplifyCfg-initial.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Fissue_38669.main.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Fissue_38669.main.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fissue_38669.main.SimplifyCfg-initial.after.mir?ref=2a9d710d999e629c064908076420635096eb39de", "patch": "@@ -19,7 +19,7 @@ fn main() -> () {\n     }\n \n     bb1: {\n-        falseUnwind -> [real: bb2, cleanup: bb5]; // scope 1 at $DIR/issue_38669.rs:+2:5: +7:6\n+        falseUnwind -> [real: bb2, unwind: bb5]; // scope 1 at $DIR/issue_38669.rs:+2:5: +7:6\n     }\n \n     bb2: {"}, {"sha": "ac2520249285ed7e0387d76976bee39f71b48ef7", "filename": "tests/mir-opt/issue_41110.main.ElaborateDrops.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Fissue_41110.main.ElaborateDrops.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Fissue_41110.main.ElaborateDrops.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fissue_41110.main.ElaborateDrops.diff?ref=2a9d710d999e629c064908076420635096eb39de", "patch": "@@ -46,17 +46,17 @@\n       }\n   \n       bb3 (cleanup): {\n--         drop(_3) -> bb5;                 // scope 0 at $DIR/issue_41110.rs:+1:27: +1:28\n+-         drop(_3) -> [return: bb5, unwind terminate]; // scope 0 at $DIR/issue_41110.rs:+1:27: +1:28\n +         goto -> bb5;                     // scope 0 at $DIR/issue_41110.rs:+1:27: +1:28\n       }\n   \n       bb4 (cleanup): {\n--         drop(_4) -> bb5;                 // scope 0 at $DIR/issue_41110.rs:+1:26: +1:27\n+-         drop(_4) -> [return: bb5, unwind terminate]; // scope 0 at $DIR/issue_41110.rs:+1:26: +1:27\n +         goto -> bb5;                     // scope 0 at $DIR/issue_41110.rs:+1:26: +1:27\n       }\n   \n       bb5 (cleanup): {\n--         drop(_2) -> bb6;                 // scope 0 at $DIR/issue_41110.rs:+1:27: +1:28\n+-         drop(_2) -> [return: bb6, unwind terminate]; // scope 0 at $DIR/issue_41110.rs:+1:27: +1:28\n +         goto -> bb8;                     // scope 0 at $DIR/issue_41110.rs:+1:27: +1:28\n       }\n   \n@@ -65,7 +65,7 @@\n +     }\n + \n +     bb7 (cleanup): {\n-+         drop(_2) -> bb6;                 // scope 0 at $DIR/issue_41110.rs:+1:27: +1:28\n++         drop(_2) -> [return: bb6, unwind terminate]; // scope 0 at $DIR/issue_41110.rs:+1:27: +1:28\n +     }\n + \n +     bb8 (cleanup): {"}, {"sha": "a4a07ad124340882e0ec6c9831e6894d02758259", "filename": "tests/mir-opt/issue_41110.test.ElaborateDrops.diff", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Fissue_41110.test.ElaborateDrops.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Fissue_41110.test.ElaborateDrops.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fissue_41110.test.ElaborateDrops.diff?ref=2a9d710d999e629c064908076420635096eb39de", "patch": "@@ -50,7 +50,7 @@\n   \n       bb3 (cleanup): {\n           _2 = move _5;                    // scope 2 at $DIR/issue_41110.rs:+4:5: +4:6\n-          drop(_5) -> bb8;                 // scope 2 at $DIR/issue_41110.rs:+4:9: +4:10\n+          drop(_5) -> [return: bb8, unwind terminate]; // scope 2 at $DIR/issue_41110.rs:+4:9: +4:10\n       }\n   \n       bb4: {\n@@ -72,30 +72,34 @@\n       }\n   \n       bb7 (cleanup): {\n--         drop(_4) -> bb8;                 // scope 2 at $DIR/issue_41110.rs:+3:11: +3:12\n+-         drop(_4) -> [return: bb8, unwind terminate]; // scope 2 at $DIR/issue_41110.rs:+3:11: +3:12\n +         goto -> bb8;                     // scope 2 at $DIR/issue_41110.rs:+3:11: +3:12\n       }\n   \n       bb8 (cleanup): {\n--         drop(_2) -> bb9;                 // scope 1 at $DIR/issue_41110.rs:+5:1: +5:2\n+-         drop(_2) -> [return: bb9, unwind terminate]; // scope 1 at $DIR/issue_41110.rs:+5:1: +5:2\n +         goto -> bb9;                     // scope 1 at $DIR/issue_41110.rs:+5:1: +5:2\n       }\n   \n       bb9 (cleanup): {\n--         drop(_1) -> bb10;                // scope 0 at $DIR/issue_41110.rs:+5:1: +5:2\n-+         goto -> bb12;                    // scope 0 at $DIR/issue_41110.rs:+5:1: +5:2\n+-         drop(_1) -> [return: bb10, unwind terminate]; // scope 0 at $DIR/issue_41110.rs:+5:1: +5:2\n++         goto -> bb13;                    // scope 0 at $DIR/issue_41110.rs:+5:1: +5:2\n       }\n   \n       bb10 (cleanup): {\n           resume;                          // scope 0 at $DIR/issue_41110.rs:+0:1: +5:2\n +     }\n + \n +     bb11 (cleanup): {\n-+         drop(_1) -> bb10;                // scope 0 at $DIR/issue_41110.rs:+5:1: +5:2\n++         unreachable;                     // scope 0 at $DIR/issue_41110.rs:+0:1: +5:2\n +     }\n + \n +     bb12 (cleanup): {\n-+         switchInt(_6) -> [0: bb10, otherwise: bb11]; // scope 0 at $DIR/issue_41110.rs:+5:1: +5:2\n++         drop(_1) -> [return: bb10, unwind terminate]; // scope 0 at $DIR/issue_41110.rs:+5:1: +5:2\n++     }\n++ \n++     bb13 (cleanup): {\n++         switchInt(_6) -> [0: bb10, otherwise: bb12]; // scope 0 at $DIR/issue_41110.rs:+5:1: +5:2\n       }\n   }\n   "}, {"sha": "d98f75e7502d42f5e45b0d08ea778cbe6ed07d01", "filename": "tests/mir-opt/issue_41888.main.ElaborateDrops.diff", "status": "modified", "additions": 21, "deletions": 17, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Fissue_41888.main.ElaborateDrops.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Fissue_41888.main.ElaborateDrops.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fissue_41888.main.ElaborateDrops.diff?ref=2a9d710d999e629c064908076420635096eb39de", "patch": "@@ -58,7 +58,7 @@\n   \n       bb4 (cleanup): {\n           _1 = move _3;                    // scope 1 at $DIR/issue_41888.rs:+3:9: +3:10\n-          drop(_3) -> bb11;                // scope 1 at $DIR/issue_41888.rs:+3:19: +3:20\n+          drop(_3) -> [return: bb11, unwind terminate]; // scope 1 at $DIR/issue_41888.rs:+3:19: +3:20\n       }\n   \n       bb5: {\n@@ -89,7 +89,7 @@\n       bb9: {\n           StorageDead(_2);                 // scope 1 at $DIR/issue_41888.rs:+8:5: +8:6\n -         drop(_1) -> bb10;                // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n-+         goto -> bb18;                    // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n++         goto -> bb19;                    // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n       }\n   \n       bb10: {\n@@ -101,47 +101,51 @@\n       }\n   \n       bb11 (cleanup): {\n--         drop(_1) -> bb12;                // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n+-         drop(_1) -> [return: bb12, unwind terminate]; // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n +         goto -> bb12;                    // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n       }\n   \n       bb12 (cleanup): {\n           resume;                          // scope 0 at $DIR/issue_41888.rs:+0:1: +9:2\n +     }\n + \n-+     bb13: {\n++     bb13 (cleanup): {\n++         unreachable;                     // scope 0 at $DIR/issue_41888.rs:+0:1: +9:2\n++     }\n++ \n++     bb14: {\n +         _7 = const false;                // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n +         goto -> bb10;                    // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n +     }\n + \n-+     bb14 (cleanup): {\n++     bb15 (cleanup): {\n +         goto -> bb12;                    // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n +     }\n + \n-+     bb15: {\n-+         drop(_1) -> [return: bb13, unwind: bb12]; // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n++     bb16: {\n++         drop(_1) -> [return: bb14, unwind: bb12]; // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n +     }\n + \n-+     bb16 (cleanup): {\n-+         drop(_1) -> bb12;                // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n++     bb17 (cleanup): {\n++         drop(_1) -> [return: bb12, unwind terminate]; // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n +     }\n + \n-+     bb17: {\n++     bb18: {\n +         _10 = discriminant(_1);          // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n-+         switchInt(move _10) -> [0: bb13, otherwise: bb15]; // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n++         switchInt(move _10) -> [0: bb14, otherwise: bb16]; // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n +     }\n + \n-+     bb18: {\n-+         switchInt(_7) -> [0: bb13, otherwise: bb17]; // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n++     bb19: {\n++         switchInt(_7) -> [0: bb14, otherwise: bb18]; // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n +     }\n + \n-+     bb19 (cleanup): {\n++     bb20 (cleanup): {\n +         _11 = discriminant(_1);          // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n-+         switchInt(move _11) -> [0: bb14, otherwise: bb16]; // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n++         switchInt(move _11) -> [0: bb15, otherwise: bb17]; // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n +     }\n + \n-+     bb20 (cleanup): {\n-+         switchInt(_7) -> [0: bb12, otherwise: bb19]; // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n++     bb21 (cleanup): {\n++         switchInt(_7) -> [0: bb12, otherwise: bb20]; // scope 0 at $DIR/issue_41888.rs:+9:1: +9:2\n       }\n   }\n   "}, {"sha": "8ed9101500e4d1db6bfba9b59e1737dfd793104f", "filename": "tests/mir-opt/issue_62289.test.ElaborateDrops.before.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Fissue_62289.test.ElaborateDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Fissue_62289.test.ElaborateDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fissue_62289.test.ElaborateDrops.before.mir?ref=2a9d710d999e629c064908076420635096eb39de", "patch": "@@ -109,11 +109,11 @@ fn test() -> Option<Box<u32>> {\n     }\n \n     bb11 (cleanup): {\n-        drop(_1) -> bb13;                // scope 0 at $DIR/issue_62289.rs:+4:5: +4:6\n+        drop(_1) -> [return: bb13, unwind terminate]; // scope 0 at $DIR/issue_62289.rs:+4:5: +4:6\n     }\n \n     bb12 (cleanup): {\n-        drop(_5) -> bb13;                // scope 0 at $DIR/issue_62289.rs:+3:23: +3:24\n+        drop(_5) -> [return: bb13, unwind terminate]; // scope 0 at $DIR/issue_62289.rs:+3:23: +3:24\n     }\n \n     bb13 (cleanup): {"}, {"sha": "88a383015b0914f08b20fc792c005885951ebc72", "filename": "tests/mir-opt/issue_91633.bar.built.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Fissue_91633.bar.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Fissue_91633.bar.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fissue_91633.bar.built.after.mir?ref=2a9d710d999e629c064908076420635096eb39de", "patch": "@@ -31,7 +31,7 @@ fn bar(_1: Box<[T]>) -> () {\n     }\n \n     bb3 (cleanup): {\n-        drop(_1) -> bb4;                 // scope 0 at $DIR/issue_91633.rs:+5:2: +5:3\n+        drop(_1) -> [return: bb4, unwind terminate]; // scope 0 at $DIR/issue_91633.rs:+5:2: +5:3\n     }\n \n     bb4 (cleanup): {"}, {"sha": "569135803ea30babfcfe85f7c3cc83b8c716c18f", "filename": "tests/mir-opt/issue_91633.foo.built.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Fissue_91633.foo.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Fissue_91633.foo.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fissue_91633.foo.built.after.mir?ref=2a9d710d999e629c064908076420635096eb39de", "patch": "@@ -48,7 +48,7 @@ fn foo(_1: Box<[T]>) -> T {\n     }\n \n     bb5 (cleanup): {\n-        drop(_1) -> bb6;                 // scope 0 at $DIR/issue_91633.rs:+4:2: +4:3\n+        drop(_1) -> [return: bb6, unwind terminate]; // scope 0 at $DIR/issue_91633.rs:+4:2: +4:3\n     }\n \n     bb6 (cleanup): {"}, {"sha": "43d00b29e74ee922a3fcc0b052ff435b14e4e686", "filename": "tests/mir-opt/loop_test.main.SimplifyCfg-promote-consts.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Floop_test.main.SimplifyCfg-promote-consts.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Floop_test.main.SimplifyCfg-promote-consts.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Floop_test.main.SimplifyCfg-promote-consts.after.mir?ref=2a9d710d999e629c064908076420635096eb39de", "patch": "@@ -35,7 +35,7 @@ fn main() -> () {\n     }\n \n     bb3: {\n-        falseUnwind -> [real: bb4, cleanup: bb5]; // scope 0 at $DIR/loop_test.rs:+7:5: +10:6\n+        falseUnwind -> [real: bb4, unwind: bb5]; // scope 0 at $DIR/loop_test.rs:+7:5: +10:6\n     }\n \n     bb4: {"}, {"sha": "dd742d87a2955dab039f6e2deb2be79871903c8d", "filename": "tests/mir-opt/lower_intrinsics.align_of.LowerIntrinsics.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Flower_intrinsics.align_of.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Flower_intrinsics.align_of.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.align_of.LowerIntrinsics.diff?ref=2a9d710d999e629c064908076420635096eb39de", "patch": "@@ -5,7 +5,7 @@\n       let mut _0: usize;                   // return place in scope 0 at $DIR/lower_intrinsics.rs:+0:25: +0:30\n   \n       bb0: {\n--         _0 = std::intrinsics::min_align_of::<T>() -> bb1; // scope 0 at $DIR/lower_intrinsics.rs:+1:5: +1:42\n+-         _0 = std::intrinsics::min_align_of::<T>() -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/lower_intrinsics.rs:+1:5: +1:42\n -                                          // mir::Constant\n -                                          // + span: $DIR/lower_intrinsics.rs:21:5: 21:40\n -                                          // + literal: Const { ty: extern \"rust-intrinsic\" fn() -> usize {std::intrinsics::min_align_of::<T>}, val: Value(<ZST>) }"}, {"sha": "935eccfc6f4f1b2bec78f4290af91df674db6276", "filename": "tests/mir-opt/lower_intrinsics.assume.LowerIntrinsics.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Flower_intrinsics.assume.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Flower_intrinsics.assume.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.assume.LowerIntrinsics.diff?ref=2a9d710d999e629c064908076420635096eb39de", "patch": "@@ -9,7 +9,7 @@\n   \n       bb0: {\n           StorageLive(_1);                 // scope 1 at $DIR/lower_intrinsics.rs:+2:9: +2:38\n--         _1 = std::intrinsics::assume(const true) -> bb1; // scope 1 at $DIR/lower_intrinsics.rs:+2:9: +2:38\n+-         _1 = std::intrinsics::assume(const true) -> [return: bb1, unwind unreachable]; // scope 1 at $DIR/lower_intrinsics.rs:+2:9: +2:38\n -                                          // mir::Constant\n -                                          // + span: $DIR/lower_intrinsics.rs:105:9: 105:32\n -                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(bool) {std::intrinsics::assume}, val: Value(<ZST>) }"}, {"sha": "1f03b7b0baf4b23b2627f30c9b5f5bfdfede2ae4", "filename": "tests/mir-opt/lower_intrinsics.discriminant.LowerIntrinsics.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Flower_intrinsics.discriminant.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Flower_intrinsics.discriminant.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.discriminant.LowerIntrinsics.diff?ref=2a9d710d999e629c064908076420635096eb39de", "patch": "@@ -29,7 +29,7 @@\n           StorageLive(_4);                 // scope 0 at $DIR/lower_intrinsics.rs:+1:42: +1:44\n           _4 = &_1;                        // scope 0 at $DIR/lower_intrinsics.rs:+1:42: +1:44\n           _3 = &(*_4);                     // scope 0 at $DIR/lower_intrinsics.rs:+1:42: +1:44\n--         _2 = discriminant_value::<T>(move _3) -> bb1; // scope 0 at $DIR/lower_intrinsics.rs:+1:5: +1:45\n+-         _2 = discriminant_value::<T>(move _3) -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/lower_intrinsics.rs:+1:5: +1:45\n -                                          // mir::Constant\n -                                          // + span: $DIR/lower_intrinsics.rs:82:5: 82:41\n -                                          // + literal: Const { ty: for<'a> extern \"rust-intrinsic\" fn(&'a T) -> <T as DiscriminantKind>::Discriminant {discriminant_value::<T>}, val: Value(<ZST>) }\n@@ -50,7 +50,7 @@\n                                            // + literal: Const { ty: &i32, val: Unevaluated(discriminant, [T], Some(promoted[2])) }\n           _7 = &(*_19);                    // scope 0 at $DIR/lower_intrinsics.rs:+2:42: +2:44\n           _6 = &(*_7);                     // scope 0 at $DIR/lower_intrinsics.rs:+2:42: +2:44\n--         _5 = discriminant_value::<i32>(move _6) -> bb2; // scope 0 at $DIR/lower_intrinsics.rs:+2:5: +2:45\n+-         _5 = discriminant_value::<i32>(move _6) -> [return: bb2, unwind unreachable]; // scope 0 at $DIR/lower_intrinsics.rs:+2:5: +2:45\n -                                          // mir::Constant\n -                                          // + span: $DIR/lower_intrinsics.rs:83:5: 83:41\n -                                          // + literal: Const { ty: for<'a> extern \"rust-intrinsic\" fn(&'a i32) -> <i32 as DiscriminantKind>::Discriminant {discriminant_value::<i32>}, val: Value(<ZST>) }\n@@ -71,7 +71,7 @@\n                                            // + literal: Const { ty: &(), val: Unevaluated(discriminant, [T], Some(promoted[1])) }\n           _11 = &(*_18);                   // scope 0 at $DIR/lower_intrinsics.rs:+3:42: +3:45\n           _10 = &(*_11);                   // scope 0 at $DIR/lower_intrinsics.rs:+3:42: +3:45\n--         _9 = discriminant_value::<()>(move _10) -> bb3; // scope 0 at $DIR/lower_intrinsics.rs:+3:5: +3:46\n+-         _9 = discriminant_value::<()>(move _10) -> [return: bb3, unwind unreachable]; // scope 0 at $DIR/lower_intrinsics.rs:+3:5: +3:46\n -                                          // mir::Constant\n -                                          // + span: $DIR/lower_intrinsics.rs:84:5: 84:41\n -                                          // + literal: Const { ty: for<'a> extern \"rust-intrinsic\" fn(&'a ()) -> <() as DiscriminantKind>::Discriminant {discriminant_value::<()>}, val: Value(<ZST>) }\n@@ -92,7 +92,7 @@\n                                            // + literal: Const { ty: &E, val: Unevaluated(discriminant, [T], Some(promoted[0])) }\n           _15 = &(*_17);                   // scope 0 at $DIR/lower_intrinsics.rs:+4:42: +4:47\n           _14 = &(*_15);                   // scope 0 at $DIR/lower_intrinsics.rs:+4:42: +4:47\n--         _13 = discriminant_value::<E>(move _14) -> bb4; // scope 0 at $DIR/lower_intrinsics.rs:+4:5: +4:48\n+-         _13 = discriminant_value::<E>(move _14) -> [return: bb4, unwind unreachable]; // scope 0 at $DIR/lower_intrinsics.rs:+4:5: +4:48\n -                                          // mir::Constant\n -                                          // + span: $DIR/lower_intrinsics.rs:85:5: 85:41\n -                                          // + literal: Const { ty: for<'a> extern \"rust-intrinsic\" fn(&'a E) -> <E as DiscriminantKind>::Discriminant {discriminant_value::<E>}, val: Value(<ZST>) }"}, {"sha": "b0c32e4b21a753eac810c9bd43589a238d400821", "filename": "tests/mir-opt/lower_intrinsics.f_copy_nonoverlapping.LowerIntrinsics.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Flower_intrinsics.f_copy_nonoverlapping.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Flower_intrinsics.f_copy_nonoverlapping.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.f_copy_nonoverlapping.LowerIntrinsics.diff?ref=2a9d710d999e629c064908076420635096eb39de", "patch": "@@ -47,7 +47,7 @@\n           _9 = _10;                        // scope 3 at $DIR/lower_intrinsics.rs:+4:61: +4:79\n           _8 = move _9 as *mut i32 (PtrToPtr); // scope 3 at $DIR/lower_intrinsics.rs:+4:61: +4:91\n           StorageDead(_9);                 // scope 3 at $DIR/lower_intrinsics.rs:+4:90: +4:91\n--         _3 = copy_nonoverlapping::<i32>(move _4, move _8, const 0_usize) -> bb1; // scope 3 at $DIR/lower_intrinsics.rs:+4:9: +4:95\n+-         _3 = copy_nonoverlapping::<i32>(move _4, move _8, const 0_usize) -> [return: bb1, unwind unreachable]; // scope 3 at $DIR/lower_intrinsics.rs:+4:9: +4:95\n -                                          // mir::Constant\n -                                          // + span: $DIR/lower_intrinsics.rs:98:9: 98:28\n -                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(*const i32, *mut i32, usize) {copy_nonoverlapping::<i32>}, val: Value(<ZST>) }"}, {"sha": "bfb000ccdb5c684794f5460f53cd34ced63c8043", "filename": "tests/mir-opt/lower_intrinsics.forget.LowerIntrinsics.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Flower_intrinsics.forget.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Flower_intrinsics.forget.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.forget.LowerIntrinsics.diff?ref=2a9d710d999e629c064908076420635096eb39de", "patch": "@@ -9,7 +9,7 @@\n       bb0: {\n           StorageLive(_2);                 // scope 0 at $DIR/lower_intrinsics.rs:+1:30: +1:31\n           _2 = move _1;                    // scope 0 at $DIR/lower_intrinsics.rs:+1:30: +1:31\n--         _0 = std::intrinsics::forget::<T>(move _2) -> bb1; // scope 0 at $DIR/lower_intrinsics.rs:+1:5: +1:32\n+-         _0 = std::intrinsics::forget::<T>(move _2) -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/lower_intrinsics.rs:+1:5: +1:32\n -                                          // mir::Constant\n -                                          // + span: $DIR/lower_intrinsics.rs:26:5: 26:29\n -                                          // + literal: Const { ty: extern \"rust-intrinsic\" fn(T) {std::intrinsics::forget::<T>}, val: Value(<ZST>) }"}, {"sha": "64d82907c7e361e4f3218ed5e14861af68f4976b", "filename": "tests/mir-opt/lower_intrinsics.non_const.LowerIntrinsics.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Flower_intrinsics.non_const.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Flower_intrinsics.non_const.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.non_const.LowerIntrinsics.diff?ref=2a9d710d999e629c064908076420635096eb39de", "patch": "@@ -17,7 +17,7 @@\n                                            // + literal: Const { ty: extern \"rust-intrinsic\" fn() -> usize {std::intrinsics::size_of::<T>}, val: Value(<ZST>) }\n           StorageLive(_2);                 // scope 1 at $DIR/lower_intrinsics.rs:+3:5: +3:14\n           _2 = _1;                         // scope 1 at $DIR/lower_intrinsics.rs:+3:5: +3:14\n--         _0 = move _2() -> bb1;           // scope 1 at $DIR/lower_intrinsics.rs:+3:5: +3:16\n+-         _0 = move _2() -> [return: bb1, unwind unreachable]; // scope 1 at $DIR/lower_intrinsics.rs:+3:5: +3:16\n +         _0 = SizeOf(T);                  // scope 1 at $DIR/lower_intrinsics.rs:+3:5: +3:16\n +         goto -> bb1;                     // scope 1 at $DIR/lower_intrinsics.rs:+3:5: +3:16\n       }"}, {"sha": "93863fca344a6599a84c253c6893b609e3eca900", "filename": "tests/mir-opt/lower_intrinsics.option_payload.LowerIntrinsics.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Flower_intrinsics.option_payload.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Flower_intrinsics.option_payload.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.option_payload.LowerIntrinsics.diff?ref=2a9d710d999e629c064908076420635096eb39de", "patch": "@@ -22,7 +22,7 @@\n           StorageLive(_3);                 // scope 1 at $DIR/lower_intrinsics.rs:+2:13: +2:15\n           StorageLive(_4);                 // scope 1 at $DIR/lower_intrinsics.rs:+2:55: +2:56\n           _4 = &raw const (*_1);           // scope 1 at $DIR/lower_intrinsics.rs:+2:55: +2:56\n--         _3 = option_payload_ptr::<usize>(move _4) -> bb1; // scope 1 at $DIR/lower_intrinsics.rs:+2:18: +2:57\n+-         _3 = option_payload_ptr::<usize>(move _4) -> [return: bb1, unwind unreachable]; // scope 1 at $DIR/lower_intrinsics.rs:+2:18: +2:57\n -                                          // mir::Constant\n -                                          // + span: $DIR/lower_intrinsics.rs:132:18: 132:54\n -                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(*const Option<usize>) -> *const usize {option_payload_ptr::<usize>}, val: Value(<ZST>) }\n@@ -35,7 +35,7 @@\n           StorageLive(_5);                 // scope 2 at $DIR/lower_intrinsics.rs:+3:13: +3:15\n           StorageLive(_6);                 // scope 2 at $DIR/lower_intrinsics.rs:+3:55: +3:56\n           _6 = &raw const (*_2);           // scope 2 at $DIR/lower_intrinsics.rs:+3:55: +3:56\n--         _5 = option_payload_ptr::<String>(move _6) -> bb2; // scope 2 at $DIR/lower_intrinsics.rs:+3:18: +3:57\n+-         _5 = option_payload_ptr::<String>(move _6) -> [return: bb2, unwind unreachable]; // scope 2 at $DIR/lower_intrinsics.rs:+3:18: +3:57\n -                                          // mir::Constant\n -                                          // + span: $DIR/lower_intrinsics.rs:133:18: 133:54\n -                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(*const Option<String>) -> *const String {option_payload_ptr::<String>}, val: Value(<ZST>) }"}, {"sha": "f816678b4b3aebd43e1f72feafa1716884951363", "filename": "tests/mir-opt/lower_intrinsics.read_via_copy_primitive.LowerIntrinsics.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Flower_intrinsics.read_via_copy_primitive.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Flower_intrinsics.read_via_copy_primitive.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.read_via_copy_primitive.LowerIntrinsics.diff?ref=2a9d710d999e629c064908076420635096eb39de", "patch": "@@ -11,7 +11,7 @@\n       bb0: {\n           StorageLive(_2);                 // scope 1 at $DIR/lower_intrinsics.rs:+1:46: +1:47\n           _2 = &raw const (*_1);           // scope 1 at $DIR/lower_intrinsics.rs:+1:46: +1:47\n--         _0 = read_via_copy::<i32>(move _2) -> bb1; // scope 1 at $DIR/lower_intrinsics.rs:+1:14: +1:48\n+-         _0 = read_via_copy::<i32>(move _2) -> [return: bb1, unwind unreachable]; // scope 1 at $DIR/lower_intrinsics.rs:+1:14: +1:48\n -                                          // mir::Constant\n -                                          // + span: $DIR/lower_intrinsics.rs:118:14: 118:45\n -                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(*const i32) -> i32 {read_via_copy::<i32>}, val: Value(<ZST>) }"}, {"sha": "f34164189220f690ea3c8193cd6742401be0adfa", "filename": "tests/mir-opt/lower_intrinsics.read_via_copy_uninhabited.LowerIntrinsics.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Flower_intrinsics.read_via_copy_uninhabited.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Flower_intrinsics.read_via_copy_uninhabited.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.read_via_copy_uninhabited.LowerIntrinsics.diff?ref=2a9d710d999e629c064908076420635096eb39de", "patch": "@@ -11,7 +11,7 @@\n       bb0: {\n           StorageLive(_2);                 // scope 1 at $DIR/lower_intrinsics.rs:+1:46: +1:47\n           _2 = &raw const (*_1);           // scope 1 at $DIR/lower_intrinsics.rs:+1:46: +1:47\n--         _0 = read_via_copy::<Never>(move _2); // scope 1 at $DIR/lower_intrinsics.rs:+1:14: +1:48\n+-         _0 = read_via_copy::<Never>(move _2) -> unwind unreachable; // scope 1 at $DIR/lower_intrinsics.rs:+1:14: +1:48\n -                                          // mir::Constant\n -                                          // + span: $DIR/lower_intrinsics.rs:123:14: 123:45\n -                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(*const Never) -> Never {read_via_copy::<Never>}, val: Value(<ZST>) }"}, {"sha": "27e8accea8be50e2ab03f5cd630b25bbd615570d", "filename": "tests/mir-opt/lower_intrinsics.size_of.LowerIntrinsics.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Flower_intrinsics.size_of.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Flower_intrinsics.size_of.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.size_of.LowerIntrinsics.diff?ref=2a9d710d999e629c064908076420635096eb39de", "patch": "@@ -5,7 +5,7 @@\n       let mut _0: usize;                   // return place in scope 0 at $DIR/lower_intrinsics.rs:+0:24: +0:29\n   \n       bb0: {\n--         _0 = std::intrinsics::size_of::<T>() -> bb1; // scope 0 at $DIR/lower_intrinsics.rs:+1:5: +1:37\n+-         _0 = std::intrinsics::size_of::<T>() -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/lower_intrinsics.rs:+1:5: +1:37\n -                                          // mir::Constant\n -                                          // + span: $DIR/lower_intrinsics.rs:16:5: 16:35\n -                                          // + literal: Const { ty: extern \"rust-intrinsic\" fn() -> usize {std::intrinsics::size_of::<T>}, val: Value(<ZST>) }"}, {"sha": "1b3b7685185bc9a2bd24d1c886dddfd4d3081c6d", "filename": "tests/mir-opt/lower_intrinsics.transmute_inhabited.LowerIntrinsics.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Flower_intrinsics.transmute_inhabited.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Flower_intrinsics.transmute_inhabited.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.transmute_inhabited.LowerIntrinsics.diff?ref=2a9d710d999e629c064908076420635096eb39de", "patch": "@@ -11,7 +11,7 @@\n       bb0: {\n           StorageLive(_2);                 // scope 1 at $DIR/lower_intrinsics.rs:+1:34: +1:35\n           _2 = _1;                         // scope 1 at $DIR/lower_intrinsics.rs:+1:34: +1:35\n--         _0 = transmute::<std::cmp::Ordering, i8>(move _2) -> bb1; // scope 1 at $DIR/lower_intrinsics.rs:+1:14: +1:36\n+-         _0 = transmute::<std::cmp::Ordering, i8>(move _2) -> [return: bb1, unwind unreachable]; // scope 1 at $DIR/lower_intrinsics.rs:+1:14: +1:36\n -                                          // mir::Constant\n -                                          // + span: $DIR/lower_intrinsics.rs:43:14: 43:33\n -                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(std::cmp::Ordering) -> i8 {transmute::<std::cmp::Ordering, i8>}, val: Value(<ZST>) }"}, {"sha": "c6a7d2287e75d6b3ef2b912f34b2614a393d5343", "filename": "tests/mir-opt/lower_intrinsics.transmute_ref_dst.LowerIntrinsics.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Flower_intrinsics.transmute_ref_dst.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Flower_intrinsics.transmute_ref_dst.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.transmute_ref_dst.LowerIntrinsics.diff?ref=2a9d710d999e629c064908076420635096eb39de", "patch": "@@ -11,7 +11,7 @@\n       bb0: {\n           StorageLive(_2);                 // scope 1 at $DIR/lower_intrinsics.rs:+1:34: +1:35\n           _2 = _1;                         // scope 1 at $DIR/lower_intrinsics.rs:+1:34: +1:35\n--         _0 = transmute::<&T, *const T>(move _2) -> bb1; // scope 1 at $DIR/lower_intrinsics.rs:+1:14: +1:36\n+-         _0 = transmute::<&T, *const T>(move _2) -> [return: bb1, unwind unreachable]; // scope 1 at $DIR/lower_intrinsics.rs:+1:14: +1:36\n -                                          // mir::Constant\n -                                          // + span: $DIR/lower_intrinsics.rs:53:14: 53:33\n -                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(&T) -> *const T {transmute::<&T, *const T>}, val: Value(<ZST>) }"}, {"sha": "8735a7500603dfc10f4630703b64b0d3a610f398", "filename": "tests/mir-opt/lower_intrinsics.transmute_to_box_uninhabited.LowerIntrinsics.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Flower_intrinsics.transmute_to_box_uninhabited.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Flower_intrinsics.transmute_to_box_uninhabited.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.transmute_to_box_uninhabited.LowerIntrinsics.diff?ref=2a9d710d999e629c064908076420635096eb39de", "patch": "@@ -13,7 +13,7 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/lower_intrinsics.rs:+0:51: +3:2\n           StorageLive(_2);                 // scope 0 at $DIR/lower_intrinsics.rs:+1:9: +1:10\n--         _2 = transmute::<usize, Box<Never>>(const 1_usize) -> bb1; // scope 0 at $DIR/lower_intrinsics.rs:+1:25: +1:52\n+-         _2 = transmute::<usize, Box<Never>>(const 1_usize) -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/lower_intrinsics.rs:+1:25: +1:52\n -                                          // mir::Constant\n -                                          // + span: $DIR/lower_intrinsics.rs:70:25: 70:44\n -                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(usize) -> Box<Never> {transmute::<usize, Box<Never>>}, val: Value(<ZST>) }"}, {"sha": "a772132770c36981e181a0d06078e139d028196b", "filename": "tests/mir-opt/lower_intrinsics.transmute_to_mut_uninhabited.LowerIntrinsics.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Flower_intrinsics.transmute_to_mut_uninhabited.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Flower_intrinsics.transmute_to_mut_uninhabited.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.transmute_to_mut_uninhabited.LowerIntrinsics.diff?ref=2a9d710d999e629c064908076420635096eb39de", "patch": "@@ -13,7 +13,7 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/lower_intrinsics.rs:+0:51: +3:2\n           StorageLive(_2);                 // scope 0 at $DIR/lower_intrinsics.rs:+1:9: +1:10\n--         _2 = transmute::<usize, &mut Never>(const 1_usize) -> bb1; // scope 0 at $DIR/lower_intrinsics.rs:+1:25: +1:52\n+-         _2 = transmute::<usize, &mut Never>(const 1_usize) -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/lower_intrinsics.rs:+1:25: +1:52\n -                                          // mir::Constant\n -                                          // + span: $DIR/lower_intrinsics.rs:64:25: 64:44\n -                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(usize) -> &mut Never {transmute::<usize, &mut Never>}, val: Value(<ZST>) }"}, {"sha": "c4d53d4e8c74858ef2e54be33eee410c99f86211", "filename": "tests/mir-opt/lower_intrinsics.transmute_to_ref_uninhabited.LowerIntrinsics.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Flower_intrinsics.transmute_to_ref_uninhabited.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Flower_intrinsics.transmute_to_ref_uninhabited.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.transmute_to_ref_uninhabited.LowerIntrinsics.diff?ref=2a9d710d999e629c064908076420635096eb39de", "patch": "@@ -13,7 +13,7 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/lower_intrinsics.rs:+0:51: +3:2\n           StorageLive(_2);                 // scope 0 at $DIR/lower_intrinsics.rs:+1:9: +1:10\n--         _2 = transmute::<usize, &Never>(const 1_usize) -> bb1; // scope 0 at $DIR/lower_intrinsics.rs:+1:21: +1:48\n+-         _2 = transmute::<usize, &Never>(const 1_usize) -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/lower_intrinsics.rs:+1:21: +1:48\n -                                          // mir::Constant\n -                                          // + span: $DIR/lower_intrinsics.rs:58:21: 58:40\n -                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(usize) -> &Never {transmute::<usize, &Never>}, val: Value(<ZST>) }"}, {"sha": "f0b76127dd5e6da9336fe291b7b6245e584f3f02", "filename": "tests/mir-opt/lower_intrinsics.transmute_uninhabited.LowerIntrinsics.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Flower_intrinsics.transmute_uninhabited.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Flower_intrinsics.transmute_uninhabited.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.transmute_uninhabited.LowerIntrinsics.diff?ref=2a9d710d999e629c064908076420635096eb39de", "patch": "@@ -11,7 +11,7 @@\n       bb0: {\n           StorageLive(_2);                 // scope 1 at $DIR/lower_intrinsics.rs:+1:47: +1:48\n           _2 = _1;                         // scope 1 at $DIR/lower_intrinsics.rs:+1:47: +1:48\n--         _0 = transmute::<(), Never>(move _2); // scope 1 at $DIR/lower_intrinsics.rs:+1:14: +1:49\n+-         _0 = transmute::<(), Never>(move _2) -> unwind unreachable; // scope 1 at $DIR/lower_intrinsics.rs:+1:14: +1:49\n -                                          // mir::Constant\n -                                          // + span: $DIR/lower_intrinsics.rs:48:14: 48:46\n -                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(()) -> Never {transmute::<(), Never>}, val: Value(<ZST>) }"}, {"sha": "c0cc698c48188491cfd773d38fb67f6a8145b551", "filename": "tests/mir-opt/lower_intrinsics.unreachable.LowerIntrinsics.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Flower_intrinsics.unreachable.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Flower_intrinsics.unreachable.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.unreachable.LowerIntrinsics.diff?ref=2a9d710d999e629c064908076420635096eb39de", "patch": "@@ -12,7 +12,7 @@\n       bb0: {\n           StorageLive(_2);                 // scope 0 at $DIR/lower_intrinsics.rs:+1:5: +1:47\n           StorageLive(_3);                 // scope 1 at $DIR/lower_intrinsics.rs:+1:14: +1:45\n--         _3 = std::intrinsics::unreachable(); // scope 1 at $DIR/lower_intrinsics.rs:+1:14: +1:45\n+-         _3 = std::intrinsics::unreachable() -> unwind unreachable; // scope 1 at $DIR/lower_intrinsics.rs:+1:14: +1:45\n -                                          // mir::Constant\n -                                          // + span: $DIR/lower_intrinsics.rs:31:14: 31:43\n -                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn() -> ! {std::intrinsics::unreachable}, val: Value(<ZST>) }"}, {"sha": "fb12d3dfa6e9899428ca7de8c3d8f699b7dc09a6", "filename": "tests/mir-opt/lower_intrinsics.with_overflow.LowerIntrinsics.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Flower_intrinsics.with_overflow.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Flower_intrinsics.with_overflow.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.with_overflow.LowerIntrinsics.diff?ref=2a9d710d999e629c064908076420635096eb39de", "patch": "@@ -30,7 +30,7 @@\n           _4 = _1;                         // scope 0 at $DIR/lower_intrinsics.rs:+1:50: +1:51\n           StorageLive(_5);                 // scope 0 at $DIR/lower_intrinsics.rs:+1:53: +1:54\n           _5 = _2;                         // scope 0 at $DIR/lower_intrinsics.rs:+1:53: +1:54\n--         _3 = add_with_overflow::<i32>(move _4, move _5) -> bb1; // scope 0 at $DIR/lower_intrinsics.rs:+1:14: +1:55\n+-         _3 = add_with_overflow::<i32>(move _4, move _5) -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/lower_intrinsics.rs:+1:14: +1:55\n -                                          // mir::Constant\n -                                          // + span: $DIR/lower_intrinsics.rs:111:14: 111:49\n -                                          // + literal: Const { ty: extern \"rust-intrinsic\" fn(i32, i32) -> (i32, bool) {add_with_overflow::<i32>}, val: Value(<ZST>) }\n@@ -46,7 +46,7 @@\n           _7 = _1;                         // scope 1 at $DIR/lower_intrinsics.rs:+2:50: +2:51\n           StorageLive(_8);                 // scope 1 at $DIR/lower_intrinsics.rs:+2:53: +2:54\n           _8 = _2;                         // scope 1 at $DIR/lower_intrinsics.rs:+2:53: +2:54\n--         _6 = sub_with_overflow::<i32>(move _7, move _8) -> bb2; // scope 1 at $DIR/lower_intrinsics.rs:+2:14: +2:55\n+-         _6 = sub_with_overflow::<i32>(move _7, move _8) -> [return: bb2, unwind unreachable]; // scope 1 at $DIR/lower_intrinsics.rs:+2:14: +2:55\n -                                          // mir::Constant\n -                                          // + span: $DIR/lower_intrinsics.rs:112:14: 112:49\n -                                          // + literal: Const { ty: extern \"rust-intrinsic\" fn(i32, i32) -> (i32, bool) {sub_with_overflow::<i32>}, val: Value(<ZST>) }\n@@ -62,7 +62,7 @@\n           _10 = _1;                        // scope 2 at $DIR/lower_intrinsics.rs:+3:50: +3:51\n           StorageLive(_11);                // scope 2 at $DIR/lower_intrinsics.rs:+3:53: +3:54\n           _11 = _2;                        // scope 2 at $DIR/lower_intrinsics.rs:+3:53: +3:54\n--         _9 = mul_with_overflow::<i32>(move _10, move _11) -> bb3; // scope 2 at $DIR/lower_intrinsics.rs:+3:14: +3:55\n+-         _9 = mul_with_overflow::<i32>(move _10, move _11) -> [return: bb3, unwind unreachable]; // scope 2 at $DIR/lower_intrinsics.rs:+3:14: +3:55\n -                                          // mir::Constant\n -                                          // + span: $DIR/lower_intrinsics.rs:113:14: 113:49\n -                                          // + literal: Const { ty: extern \"rust-intrinsic\" fn(i32, i32) -> (i32, bool) {mul_with_overflow::<i32>}, val: Value(<ZST>) }"}, {"sha": "0bfb34acac2db6f80b841d4e73384eb57e56730f", "filename": "tests/mir-opt/lower_intrinsics.wrapping.LowerIntrinsics.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Flower_intrinsics.wrapping.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Flower_intrinsics.wrapping.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.wrapping.LowerIntrinsics.diff?ref=2a9d710d999e629c064908076420635096eb39de", "patch": "@@ -30,7 +30,7 @@\n           _4 = _1;                         // scope 0 at $DIR/lower_intrinsics.rs:+1:45: +1:46\n           StorageLive(_5);                 // scope 0 at $DIR/lower_intrinsics.rs:+1:48: +1:49\n           _5 = _2;                         // scope 0 at $DIR/lower_intrinsics.rs:+1:48: +1:49\n--         _3 = wrapping_add::<i32>(move _4, move _5) -> bb1; // scope 0 at $DIR/lower_intrinsics.rs:+1:14: +1:50\n+-         _3 = wrapping_add::<i32>(move _4, move _5) -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/lower_intrinsics.rs:+1:14: +1:50\n -                                          // mir::Constant\n -                                          // + span: $DIR/lower_intrinsics.rs:9:14: 9:44\n -                                          // + literal: Const { ty: extern \"rust-intrinsic\" fn(i32, i32) -> i32 {wrapping_add::<i32>}, val: Value(<ZST>) }\n@@ -46,7 +46,7 @@\n           _7 = _1;                         // scope 1 at $DIR/lower_intrinsics.rs:+2:45: +2:46\n           StorageLive(_8);                 // scope 1 at $DIR/lower_intrinsics.rs:+2:48: +2:49\n           _8 = _2;                         // scope 1 at $DIR/lower_intrinsics.rs:+2:48: +2:49\n--         _6 = wrapping_sub::<i32>(move _7, move _8) -> bb2; // scope 1 at $DIR/lower_intrinsics.rs:+2:14: +2:50\n+-         _6 = wrapping_sub::<i32>(move _7, move _8) -> [return: bb2, unwind unreachable]; // scope 1 at $DIR/lower_intrinsics.rs:+2:14: +2:50\n -                                          // mir::Constant\n -                                          // + span: $DIR/lower_intrinsics.rs:10:14: 10:44\n -                                          // + literal: Const { ty: extern \"rust-intrinsic\" fn(i32, i32) -> i32 {wrapping_sub::<i32>}, val: Value(<ZST>) }\n@@ -62,7 +62,7 @@\n           _10 = _1;                        // scope 2 at $DIR/lower_intrinsics.rs:+3:45: +3:46\n           StorageLive(_11);                // scope 2 at $DIR/lower_intrinsics.rs:+3:48: +3:49\n           _11 = _2;                        // scope 2 at $DIR/lower_intrinsics.rs:+3:48: +3:49\n--         _9 = wrapping_mul::<i32>(move _10, move _11) -> bb3; // scope 2 at $DIR/lower_intrinsics.rs:+3:14: +3:50\n+-         _9 = wrapping_mul::<i32>(move _10, move _11) -> [return: bb3, unwind unreachable]; // scope 2 at $DIR/lower_intrinsics.rs:+3:14: +3:50\n -                                          // mir::Constant\n -                                          // + span: $DIR/lower_intrinsics.rs:11:14: 11:44\n -                                          // + literal: Const { ty: extern \"rust-intrinsic\" fn(i32, i32) -> i32 {wrapping_mul::<i32>}, val: Value(<ZST>) }"}, {"sha": "4f5df133181291f579faf795547bb67ad25839a2", "filename": "tests/mir-opt/lower_intrinsics_e2e.f_u64.PreCodegen.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Flower_intrinsics_e2e.f_u64.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Flower_intrinsics_e2e.f_u64.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics_e2e.f_u64.PreCodegen.after.mir?ref=2a9d710d999e629c064908076420635096eb39de", "patch": "@@ -12,7 +12,7 @@ fn f_u64() -> () {\n \n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/lower_intrinsics_e2e.rs:+1:5: +1:21\n-        _2 = f_non_zst::<u64>(const 0_u64) -> bb1; // scope 1 at $DIR/lower_intrinsics_e2e.rs:23:9: 23:21\n+        _2 = f_non_zst::<u64>(const 0_u64) -> [return: bb1, unwind unreachable]; // scope 1 at $DIR/lower_intrinsics_e2e.rs:23:9: 23:21\n                                          // mir::Constant\n                                          // + span: $DIR/lower_intrinsics_e2e.rs:23:9: 23:18\n                                          // + literal: Const { ty: fn(u64) {f_non_zst::<u64>}, val: Value(<ZST>) }"}, {"sha": "8654e80cd7c82aed9fea330e2c67ce2599f9683d", "filename": "tests/mir-opt/lower_intrinsics_e2e.f_unit.PreCodegen.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Flower_intrinsics_e2e.f_unit.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Flower_intrinsics_e2e.f_unit.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics_e2e.f_unit.PreCodegen.after.mir?ref=2a9d710d999e629c064908076420635096eb39de", "patch": "@@ -10,7 +10,7 @@ fn f_unit() -> () {\n     }\n \n     bb0: {\n-        _1 = f_zst::<()>(const ()) -> bb1; // scope 1 at $DIR/lower_intrinsics_e2e.rs:21:9: 21:17\n+        _1 = f_zst::<()>(const ()) -> [return: bb1, unwind unreachable]; // scope 1 at $DIR/lower_intrinsics_e2e.rs:21:9: 21:17\n                                          // mir::Constant\n                                          // + span: $DIR/lower_intrinsics_e2e.rs:21:9: 21:14\n                                          // + literal: Const { ty: fn(()) {f_zst::<()>}, val: Value(<ZST>) }"}, {"sha": "3081e78f26db78c3d48c90eb20a3fd55be7184ce", "filename": "tests/mir-opt/match_arm_scopes.complicated_match.SimplifyCfg-initial.after-ElaborateDrops.after.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Fmatch_arm_scopes.complicated_match.SimplifyCfg-initial.after-ElaborateDrops.after.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Fmatch_arm_scopes.complicated_match.SimplifyCfg-initial.after-ElaborateDrops.after.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fmatch_arm_scopes.complicated_match.SimplifyCfg-initial.after-ElaborateDrops.after.diff?ref=2a9d710d999e629c064908076420635096eb39de", "patch": "@@ -243,7 +243,7 @@\n       }\n   \n -     bb25 (cleanup): {\n--         drop(_2) -> bb26;                // scope 0 at $DIR/match_arm_scopes.rs:+5:1: +5:2\n+-         drop(_2) -> [return: bb26, unwind terminate]; // scope 0 at $DIR/match_arm_scopes.rs:+5:1: +5:2\n +     bb22 (cleanup): {\n +         goto -> bb27;                    // scope 0 at $DIR/match_arm_scopes.rs:+5:1: +5:2\n       }"}, {"sha": "950f8758e31c453276e51ff6cfefbdc28378b51a", "filename": "tests/mir-opt/no_spurious_drop_after_call.main.ElaborateDrops.before.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Fno_spurious_drop_after_call.main.ElaborateDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Fno_spurious_drop_after_call.main.ElaborateDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fno_spurious_drop_after_call.main.ElaborateDrops.before.mir?ref=2a9d710d999e629c064908076420635096eb39de", "patch": "@@ -40,7 +40,7 @@ fn main() -> () {\n     }\n \n     bb3 (cleanup): {\n-        drop(_2) -> bb4;                 // scope 0 at $DIR/no_spurious_drop_after_call.rs:+1:34: +1:35\n+        drop(_2) -> [return: bb4, unwind terminate]; // scope 0 at $DIR/no_spurious_drop_after_call.rs:+1:34: +1:35\n     }\n \n     bb4 (cleanup): {"}, {"sha": "81b96e3b6315d68c8924fadb0f40ff5d3b256614", "filename": "tests/mir-opt/packed_struct_drop_aligned.main.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Fpacked_struct_drop_aligned.main.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Fpacked_struct_drop_aligned.main.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fpacked_struct_drop_aligned.main.SimplifyCfg-elaborate-drops.after.mir?ref=2a9d710d999e629c064908076420635096eb39de", "patch": "@@ -33,7 +33,7 @@ fn main() -> () {\n \n     bb1 (cleanup): {\n         (_1.0: Aligned) = move _4;       // scope 1 at $DIR/packed_struct_drop_aligned.rs:+2:5: +2:8\n-        drop(_1) -> bb3;                 // scope 0 at $DIR/packed_struct_drop_aligned.rs:+3:1: +3:2\n+        drop(_1) -> [return: bb3, unwind terminate]; // scope 0 at $DIR/packed_struct_drop_aligned.rs:+3:1: +3:2\n     }\n \n     bb2: {"}, {"sha": "4eef028e1ccb99ccc8cb6687b2b9ea5b5bd27dc1", "filename": "tests/mir-opt/retag.main.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Fretag.main.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Fretag.main.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fretag.main.SimplifyCfg-elaborate-drops.after.mir?ref=2a9d710d999e629c064908076420635096eb39de", "patch": "@@ -186,11 +186,11 @@ fn main() -> () {\n     }\n \n     bb7 (cleanup): {\n-        drop(_21) -> bb9;                // scope 7 at $DIR/retag.rs:+18:24: +18:25\n+        drop(_21) -> [return: bb9, unwind terminate]; // scope 7 at $DIR/retag.rs:+18:24: +18:25\n     }\n \n     bb8 (cleanup): {\n-        drop(_5) -> bb9;                 // scope 1 at $DIR/retag.rs:+3:36: +3:37\n+        drop(_5) -> [return: bb9, unwind terminate]; // scope 1 at $DIR/retag.rs:+3:36: +3:37\n     }\n \n     bb9 (cleanup): {"}, {"sha": "c61107d25e004c5b57d1e13d913f89e4b34eb42f", "filename": "tests/mir-opt/simplify_cfg.main.SimplifyCfg-initial.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Fsimplify_cfg.main.SimplifyCfg-initial.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Fsimplify_cfg.main.SimplifyCfg-initial.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsimplify_cfg.main.SimplifyCfg-initial.diff?ref=2a9d710d999e629c064908076420635096eb39de", "patch": "@@ -12,8 +12,8 @@\n       }\n   \n       bb1: {\n--         falseUnwind -> [real: bb2, cleanup: bb11]; // scope 0 at $DIR/simplify_cfg.rs:+1:5: +5:6\n-+         falseUnwind -> [real: bb2, cleanup: bb6]; // scope 0 at $DIR/simplify_cfg.rs:+1:5: +5:6\n+-         falseUnwind -> [real: bb2, unwind: bb11]; // scope 0 at $DIR/simplify_cfg.rs:+1:5: +5:6\n++         falseUnwind -> [real: bb2, unwind: bb6]; // scope 0 at $DIR/simplify_cfg.rs:+1:5: +5:6\n       }\n   \n       bb2: {"}, {"sha": "11115c96e23e83a9502c779b3461a5813f6f1933", "filename": "tests/mir-opt/slice_drop_shim.core.ptr-drop_in_place.[String].AddMovesForPackedDrops.before.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Fslice_drop_shim.core.ptr-drop_in_place.%5BString%5D.AddMovesForPackedDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Fslice_drop_shim.core.ptr-drop_in_place.%5BString%5D.AddMovesForPackedDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fslice_drop_shim.core.ptr-drop_in_place.%5BString%5D.AddMovesForPackedDrops.before.mir?ref=2a9d710d999e629c064908076420635096eb39de", "patch": "@@ -24,7 +24,7 @@ fn std::ptr::drop_in_place(_1: *mut [String]) -> () {\n     bb3 (cleanup): {\n         _4 = &raw mut (*_1)[_3];         // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n         _3 = Add(move _3, const 1_usize); // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n-        drop((*_4)) -> bb4;              // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n+        drop((*_4)) -> [return: bb4, unwind terminate]; // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n     }\n \n     bb4 (cleanup): {"}, {"sha": "579587a430b25c9f976afb78f4685c4229e02c07", "filename": "tests/mir-opt/sroa/lifetimes.foo.ScalarReplacementOfAggregates.diff", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Fsroa%2Flifetimes.foo.ScalarReplacementOfAggregates.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Fsroa%2Flifetimes.foo.ScalarReplacementOfAggregates.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsroa%2Flifetimes.foo.ScalarReplacementOfAggregates.diff?ref=2a9d710d999e629c064908076420635096eb39de", "patch": "@@ -58,7 +58,7 @@\n           StorageLive(_2);                 // scope 0 at $DIR/lifetimes.rs:+2:12: +2:31\n           StorageLive(_3);                 // scope 0 at $DIR/lifetimes.rs:+2:15: +2:30\n           StorageLive(_4);                 // scope 0 at $DIR/lifetimes.rs:+2:15: +2:30\n-          _4 = Box::<u32>::new(const 5_u32) -> bb1; // scope 0 at $DIR/lifetimes.rs:+2:15: +2:30\n+          _4 = Box::<u32>::new(const 5_u32) -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/lifetimes.rs:+2:15: +2:30\n                                            // mir::Constant\n                                            // + span: $DIR/lifetimes.rs:19:15: 19:23\n                                            // + user_ty: UserType(1)\n@@ -113,7 +113,7 @@\n           StorageLive(_22);                // scope 4 at $DIR/lifetimes.rs:+10:20: +10:23\n           _22 = &_8;                       // scope 4 at $DIR/lifetimes.rs:+10:20: +10:23\n           _21 = &(*_22);                   // scope 4 at $DIR/lifetimes.rs:+10:20: +10:23\n-          _20 = core::fmt::ArgumentV1::<'_>::new_display::<Box<dyn std::fmt::Display>>(move _21) -> bb3; // scope 4 at $DIR/lifetimes.rs:+10:20: +10:23\n+          _20 = core::fmt::ArgumentV1::<'_>::new_display::<Box<dyn std::fmt::Display>>(move _21) -> [return: bb3, unwind unreachable]; // scope 4 at $DIR/lifetimes.rs:+10:20: +10:23\n                                            // mir::Constant\n                                            // + span: $DIR/lifetimes.rs:27:20: 27:23\n                                            // + user_ty: UserType(4)\n@@ -127,7 +127,7 @@\n           StorageLive(_25);                // scope 4 at $DIR/lifetimes.rs:+10:24: +10:27\n           _25 = &_6;                       // scope 4 at $DIR/lifetimes.rs:+10:24: +10:27\n           _24 = &(*_25);                   // scope 4 at $DIR/lifetimes.rs:+10:24: +10:27\n-          _23 = core::fmt::ArgumentV1::<'_>::new_display::<u32>(move _24) -> bb4; // scope 4 at $DIR/lifetimes.rs:+10:24: +10:27\n+          _23 = core::fmt::ArgumentV1::<'_>::new_display::<u32>(move _24) -> [return: bb4, unwind unreachable]; // scope 4 at $DIR/lifetimes.rs:+10:24: +10:27\n                                            // mir::Constant\n                                            // + span: $DIR/lifetimes.rs:27:24: 27:27\n                                            // + user_ty: UserType(5)\n@@ -143,7 +143,7 @@\n           _17 = &(*_18);                   // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n           _16 = move _17 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n           StorageDead(_17);                // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n-          _11 = Arguments::<'_>::new_v1(move _12, move _16) -> bb5; // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          _11 = Arguments::<'_>::new_v1(move _12, move _16) -> [return: bb5, unwind unreachable]; // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/std/src/macros.rs:LL:COL\n                                            // + user_ty: UserType(3)\n@@ -153,7 +153,7 @@\n       bb5: {\n           StorageDead(_16);                // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n           StorageDead(_12);                // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n-          _10 = _eprint(move _11) -> bb6;  // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          _10 = _eprint(move _11) -> [return: bb6, unwind unreachable]; // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/std/src/macros.rs:LL:COL\n                                            // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_eprint}, val: Value(<ZST>) }\n@@ -170,7 +170,7 @@\n           _9 = const ();                   // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n           StorageDead(_9);                 // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n           _0 = const ();                   // scope 4 at $DIR/lifetimes.rs:+9:22: +11:6\n-          drop(_8) -> bb8;                 // scope 3 at $DIR/lifetimes.rs:+11:5: +11:6\n+          drop(_8) -> [return: bb8, unwind unreachable]; // scope 3 at $DIR/lifetimes.rs:+11:5: +11:6\n       }\n   \n       bb7: {\n@@ -204,11 +204,11 @@\n       }\n   \n       bb12: {\n-          drop(((_5 as Ok).0: std::boxed::Box<dyn std::fmt::Display>)) -> bb10; // scope 1 at $DIR/lifetimes.rs:+12:1: +12:2\n+          drop(((_5 as Ok).0: std::boxed::Box<dyn std::fmt::Display>)) -> [return: bb10, unwind unreachable]; // scope 1 at $DIR/lifetimes.rs:+12:1: +12:2\n       }\n   \n       bb13: {\n-          drop(_5) -> bb10;                // scope 1 at $DIR/lifetimes.rs:+12:1: +12:2\n+          drop(_5) -> [return: bb10, unwind unreachable]; // scope 1 at $DIR/lifetimes.rs:+12:1: +12:2\n       }\n   }\n   "}, {"sha": "d378c260a0040d413f6f6565f8325b41820ac43d", "filename": "tests/mir-opt/sroa/structs.dropping.ScalarReplacementOfAggregates.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Fsroa%2Fstructs.dropping.ScalarReplacementOfAggregates.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Fsroa%2Fstructs.dropping.ScalarReplacementOfAggregates.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsroa%2Fstructs.dropping.ScalarReplacementOfAggregates.diff?ref=2a9d710d999e629c064908076420635096eb39de", "patch": "@@ -23,11 +23,11 @@\n           StorageDead(_4);                 // scope 0 at $DIR/structs.rs:+1:29: +1:30\n           StorageDead(_3);                 // scope 0 at $DIR/structs.rs:+1:29: +1:30\n           _1 = move (_2.1: Tag);           // scope 0 at $DIR/structs.rs:+1:5: +1:32\n-          drop(_1) -> bb1;                 // scope 0 at $DIR/structs.rs:+1:32: +1:33\n+          drop(_1) -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/structs.rs:+1:32: +1:33\n       }\n   \n       bb1: {\n-          drop((_2.0: Tag)) -> bb3;        // scope 0 at $DIR/structs.rs:+1:32: +1:33\n+          drop((_2.0: Tag)) -> [return: bb3, unwind unreachable]; // scope 0 at $DIR/structs.rs:+1:32: +1:33\n       }\n   \n       bb2: {\n@@ -38,7 +38,7 @@\n       }\n   \n       bb3: {\n-          drop((_2.2: Tag)) -> bb2;        // scope 0 at $DIR/structs.rs:+1:32: +1:33\n+          drop((_2.2: Tag)) -> [return: bb2, unwind unreachable]; // scope 0 at $DIR/structs.rs:+1:32: +1:33\n       }\n   }\n   "}, {"sha": "3074fcbdf531513e8c49206d1b513b86fb176864", "filename": "tests/mir-opt/sroa/structs.escaping.ScalarReplacementOfAggregates.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Fsroa%2Fstructs.escaping.ScalarReplacementOfAggregates.diff", "raw_url": "https://github.com/rust-lang/rust/raw/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Fsroa%2Fstructs.escaping.ScalarReplacementOfAggregates.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fsroa%2Fstructs.escaping.ScalarReplacementOfAggregates.diff?ref=2a9d710d999e629c064908076420635096eb39de", "patch": "@@ -15,7 +15,7 @@\n           StorageLive(_3);                 // scope 0 at $DIR/structs.rs:+1:7: +1:41\n           StorageLive(_4);                 // scope 0 at $DIR/structs.rs:+1:8: +1:39\n           StorageLive(_5);                 // scope 0 at $DIR/structs.rs:+1:34: +1:37\n-          _5 = g() -> bb1;                 // scope 0 at $DIR/structs.rs:+1:34: +1:37\n+          _5 = g() -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/structs.rs:+1:34: +1:37\n                                            // mir::Constant\n                                            // + span: $DIR/structs.rs:78:34: 78:35\n                                            // + literal: Const { ty: fn() -> u32 {g}, val: Value(<ZST>) }\n@@ -26,7 +26,7 @@\n           StorageDead(_5);                 // scope 0 at $DIR/structs.rs:+1:38: +1:39\n           _3 = &(_4.0: u32);               // scope 0 at $DIR/structs.rs:+1:7: +1:41\n           _2 = &raw const (*_3);           // scope 0 at $DIR/structs.rs:+1:7: +1:41\n-          _1 = f(move _2) -> bb2;          // scope 0 at $DIR/structs.rs:+1:5: +1:42\n+          _1 = f(move _2) -> [return: bb2, unwind unreachable]; // scope 0 at $DIR/structs.rs:+1:5: +1:42\n                                            // mir::Constant\n                                            // + span: $DIR/structs.rs:78:5: 78:6\n                                            // + literal: Const { ty: fn(*const u32) {f}, val: Value(<ZST>) }"}, {"sha": "c27a93e91f89b2b44005c42c29401b6166aa201a", "filename": "tests/mir-opt/unusual_item_types.core.ptr-drop_in_place.Vec_i32_.AddMovesForPackedDrops.before.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Funusual_item_types.core.ptr-drop_in_place.Vec_i32_.AddMovesForPackedDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/2a9d710d999e629c064908076420635096eb39de/tests%2Fmir-opt%2Funusual_item_types.core.ptr-drop_in_place.Vec_i32_.AddMovesForPackedDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Funusual_item_types.core.ptr-drop_in_place.Vec_i32_.AddMovesForPackedDrops.before.mir?ref=2a9d710d999e629c064908076420635096eb39de", "patch": "@@ -22,7 +22,7 @@ fn std::ptr::drop_in_place(_1: *mut Vec<i32>) -> () {\n     }\n \n     bb4 (cleanup): {\n-        drop(((*_1).0: alloc::raw_vec::RawVec<i32>)) -> bb2; // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n+        drop(((*_1).0: alloc::raw_vec::RawVec<i32>)) -> [return: bb2, unwind terminate]; // scope 0 at $SRC_DIR/core/src/ptr/mod.rs:+0:1: +0:56\n     }\n \n     bb5: {"}, {"sha": "ca7741f21e80e3e7c86cbc7c0894d2497f75f24d", "filename": "tests/run-make/coverage-reports/expected_show_coverage.abort.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a9d710d999e629c064908076420635096eb39de/tests%2Frun-make%2Fcoverage-reports%2Fexpected_show_coverage.abort.txt", "raw_url": "https://github.com/rust-lang/rust/raw/2a9d710d999e629c064908076420635096eb39de/tests%2Frun-make%2Fcoverage-reports%2Fexpected_show_coverage.abort.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fcoverage-reports%2Fexpected_show_coverage.abort.txt?ref=2a9d710d999e629c064908076420635096eb39de", "patch": "@@ -32,7 +32,7 @@\n    30|       |// Notes:\n    31|       |//   1. Compare this program and its coverage results to those of the similar tests\n    32|       |//      `panic_unwind.rs` and `try_error_result.rs`.\n-   33|       |//   2. This test confirms the coverage generated when a program includes `TerminatorKind::Abort`.\n+   33|       |//   2. This test confirms the coverage generated when a program includes  `UnwindAction::Terminate`.\n    34|       |//   3. The test does not invoke the abort. By executing to a successful completion, the coverage\n    35|       |//      results show where the program did and did not execute.\n    36|       |//   4. If the program actually aborted, the coverage counters would not be saved (which \"works as"}, {"sha": "98264bdc1afe5a3b20d7624ba7a977ab7c087476", "filename": "tests/run-make/coverage/abort.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a9d710d999e629c064908076420635096eb39de/tests%2Frun-make%2Fcoverage%2Fabort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a9d710d999e629c064908076420635096eb39de/tests%2Frun-make%2Fcoverage%2Fabort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fcoverage%2Fabort.rs?ref=2a9d710d999e629c064908076420635096eb39de", "patch": "@@ -30,7 +30,7 @@ fn main() -> Result<(), u8> {\n // Notes:\n //   1. Compare this program and its coverage results to those of the similar tests\n //      `panic_unwind.rs` and `try_error_result.rs`.\n-//   2. This test confirms the coverage generated when a program includes `TerminatorKind::Abort`.\n+//   2. This test confirms the coverage generated when a program includes `UnwindAction::Terminate`.\n //   3. The test does not invoke the abort. By executing to a successful completion, the coverage\n //      results show where the program did and did not execute.\n //   4. If the program actually aborted, the coverage counters would not be saved (which \"works as"}]}