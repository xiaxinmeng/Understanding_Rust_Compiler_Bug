{"sha": "e0635188ed30e083245482218a0de9237f14ce90", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwNjM1MTg4ZWQzMGUwODMyNDU0ODIyMThhMGRlOTIzN2YxNGNlOTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-22T16:38:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-22T16:38:12Z"}, "message": "Auto merge of #50968 - kennytm:rollup, r=kennytm\n\nRollup of 15 pull requests\n\nSuccessful merges:\n\n - #50846 (Add E0665)\n - #50849 (CheckLoopVisitor: also visit closure arguments)\n - #50863 (Make `[T]::len` and `str::len` const fn)\n - #50875 (rustdoc: use \"short form\" doc(cfg) printing even when combined with other conditionals)\n - #50913 (Fix typo in cell.rs)\n - #50914 (Issue #50636: Improve error diagnostic with missing commas after struct fields.)\n - #50931 (Inline `try_get`.)\n - #50932 (Optimize seen Predicate filtering.)\n - #50945 (Stabilize feature from_ref)\n - #50946 (rustc: Fix procedural macros generating lifetime tokens)\n - #50947 (rustdoc: set tab width in rust source blocks)\n - #50952 (Add the 2018 edition of the book to doc.rust-lang.org)\n - #50958 (Micro-optimization on PR#50697)\n - #50961 (Fix FileCheck finding with MSVC)\n - #50963 (Right-size the `VecDeque` in `coerce_unsized`.)\n\nFailed merges:", "tree": {"sha": "4975803176a0a9a8e040d30f83ac41ecf489b5a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4975803176a0a9a8e040d30f83ac41ecf489b5a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0635188ed30e083245482218a0de9237f14ce90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0635188ed30e083245482218a0de9237f14ce90", "html_url": "https://github.com/rust-lang/rust/commit/e0635188ed30e083245482218a0de9237f14ce90", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0635188ed30e083245482218a0de9237f14ce90/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f80ea32811db0bdbd05b1bef59f5db26b3e24a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f80ea32811db0bdbd05b1bef59f5db26b3e24a9", "html_url": "https://github.com/rust-lang/rust/commit/9f80ea32811db0bdbd05b1bef59f5db26b3e24a9"}, {"sha": "0c4d337c3c4bf6ec0878f98251f4d1a1482cf56c", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c4d337c3c4bf6ec0878f98251f4d1a1482cf56c", "html_url": "https://github.com/rust-lang/rust/commit/0c4d337c3c4bf6ec0878f98251f4d1a1482cf56c"}], "stats": {"total": 416, "additions": 349, "deletions": 67}, "files": [{"sha": "de785b13d067d027f575065ef282b4ae89c747eb", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e0635188ed30e083245482218a0de9237f14ce90/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0635188ed30e083245482218a0de9237f14ce90/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=e0635188ed30e083245482218a0de9237f14ce90", "patch": "@@ -272,6 +272,12 @@ impl Step for TheBook {\n             name: INTERNER.intern_string(format!(\"{}/second-edition\", name)),\n         });\n \n+        // build book 2018 edition\n+        builder.ensure(Rustbook {\n+            target,\n+            name: INTERNER.intern_string(format!(\"{}/2018-edition\", name)),\n+        });\n+\n         // build the version info page and CSS\n         builder.ensure(Standalone {\n             compiler,"}, {"sha": "f64161fb0272cc13da3cd8792dcd0ec85a42de07", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e0635188ed30e083245482218a0de9237f14ce90/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0635188ed30e083245482218a0de9237f14ce90/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=e0635188ed30e083245482218a0de9237f14ce90", "patch": "@@ -592,12 +592,20 @@ impl Build {\n             Path::new(llvm_bindir.trim()).join(exe(\"FileCheck\", &*target))\n         } else {\n             let base = self.llvm_out(self.config.build).join(\"build\");\n-            let exe = exe(\"FileCheck\", &*target);\n-            if !self.config.ninja && self.config.build.contains(\"msvc\") {\n-                base.join(\"Release/bin\").join(exe)\n+            let base = if !self.config.ninja && self.config.build.contains(\"msvc\") {\n+                if self.config.llvm_optimize {\n+                    if self.config.llvm_release_debuginfo {\n+                        base.join(\"RelWithDebInfo\")\n+                    } else {\n+                        base.join(\"Release\")\n+                    }\n+                } else {\n+                    base.join(\"Debug\")\n+                }\n             } else {\n-                base.join(\"bin\").join(exe)\n-            }\n+                base\n+            };\n+            base.join(\"bin\").join(exe(\"FileCheck\", &*target))\n         }\n     }\n "}, {"sha": "36d65d00164d1750f6fa7f8b0f52dabc3fea500b", "filename": "src/doc/book", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook?ref=e0635188ed30e083245482218a0de9237f14ce90", "patch": "@@ -1 +1 @@\n-Subproject commit f51127530d46b9acbf4747c859da185e771cfcf3\n+Subproject commit 36d65d00164d1750f6fa7f8b0f52dabc3fea500b"}, {"sha": "161493f3892264dd33d1c3a208e1593801205a76", "filename": "src/liballoc/slice.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e0635188ed30e083245482218a0de9237f14ce90/src%2Fliballoc%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0635188ed30e083245482218a0de9237f14ce90/src%2Fliballoc%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fslice.rs?ref=e0635188ed30e083245482218a0de9237f14ce90", "patch": "@@ -119,8 +119,8 @@ pub use core::slice::{SplitN, RSplitN, SplitNMut, RSplitNMut};\n pub use core::slice::{RSplit, RSplitMut};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::slice::{from_raw_parts, from_raw_parts_mut};\n-#[unstable(feature = \"from_ref\", issue = \"45703\")]\n-pub use core::slice::{from_ref, from_ref_mut};\n+#[stable(feature = \"from_ref\", since = \"1.28.0\")]\n+pub use core::slice::{from_ref, from_mut};\n #[unstable(feature = \"slice_get_slice\", issue = \"35729\")]\n pub use core::slice::SliceIndex;\n #[unstable(feature = \"exact_chunks\", issue = \"47115\")]"}, {"sha": "d50ad580ed5741987aa6b9cf3263e8d712eb10ae", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0635188ed30e083245482218a0de9237f14ce90/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0635188ed30e083245482218a0de9237f14ce90/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=e0635188ed30e083245482218a0de9237f14ce90", "patch": "@@ -1257,7 +1257,7 @@ impl<'a, T: ?Sized + fmt::Display> fmt::Display for RefMut<'a, T> {\n /// To assist with proper design, the following scenarios are explicitly declared legal\n /// for single-threaded code:\n ///\n-/// 1. A `&T` reference can be released to safe code and there it can co-exit with other `&T`\n+/// 1. A `&T` reference can be released to safe code and there it can co-exist with other `&T`\n /// references, but not with a `&mut T`\n ///\n /// 2. A `&mut T` reference may be released to safe code provided neither other `&mut T` nor `&T`"}, {"sha": "d37629ced11dbfa0175fe9d6108388a362b50a23", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e0635188ed30e083245482218a0de9237f14ce90/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0635188ed30e083245482218a0de9237f14ce90/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=e0635188ed30e083245482218a0de9237f14ce90", "patch": "@@ -119,6 +119,9 @@\n #![feature(powerpc_target_feature)]\n #![feature(mips_target_feature)]\n #![feature(aarch64_target_feature)]\n+#![feature(const_slice_len)]\n+#![feature(const_str_as_bytes)]\n+#![feature(const_str_len)]\n \n #[prelude_import]\n #[allow(unused)]"}, {"sha": "ab986e4c86d8888f9ff968791a7872100224fa8c", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 24, "deletions": 14, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/e0635188ed30e083245482218a0de9237f14ce90/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0635188ed30e083245482218a0de9237f14ce90/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=e0635188ed30e083245482218a0de9237f14ce90", "patch": "@@ -59,9 +59,16 @@ mod rotate;\n mod sort;\n \n #[repr(C)]\n-struct Repr<T> {\n-    pub data: *const T,\n-    pub len: usize,\n+union Repr<'a, T: 'a> {\n+    rust: &'a [T],\n+    rust_mut: &'a mut [T],\n+    raw: FatPtr<T>,\n+}\n+\n+#[repr(C)]\n+struct FatPtr<T> {\n+    data: *const T,\n+    len: usize,\n }\n \n //\n@@ -119,9 +126,10 @@ impl<T> [T] {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n-    pub fn len(&self) -> usize {\n+    #[rustc_const_unstable(feature = \"const_slice_len\")]\n+    pub const fn len(&self) -> usize {\n         unsafe {\n-            mem::transmute::<&[T], Repr<T>>(self).len\n+            Repr { rust: self }.raw.len\n         }\n     }\n \n@@ -135,7 +143,8 @@ impl<T> [T] {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n-    pub fn is_empty(&self) -> bool {\n+    #[rustc_const_unstable(feature = \"const_slice_len\")]\n+    pub const fn is_empty(&self) -> bool {\n         self.len() == 0\n     }\n \n@@ -418,7 +427,8 @@ impl<T> [T] {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n-    pub fn as_ptr(&self) -> *const T {\n+    #[rustc_const_unstable(feature = \"const_slice_as_ptr\")]\n+    pub const fn as_ptr(&self) -> *const T {\n         self as *const [T] as *const T\n     }\n \n@@ -3856,8 +3866,8 @@ unsafe impl<'a, T> TrustedRandomAccess for ExactChunksMut<'a, T> {\n /// ```\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub unsafe fn from_raw_parts<'a, T>(p: *const T, len: usize) -> &'a [T] {\n-    mem::transmute(Repr { data: p, len: len })\n+pub unsafe fn from_raw_parts<'a, T>(data: *const T, len: usize) -> &'a [T] {\n+    Repr { raw: FatPtr { data, len } }.rust\n }\n \n /// Performs the same functionality as `from_raw_parts`, except that a mutable\n@@ -3869,21 +3879,21 @@ pub unsafe fn from_raw_parts<'a, T>(p: *const T, len: usize) -> &'a [T] {\n /// `from_raw_parts`.\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub unsafe fn from_raw_parts_mut<'a, T>(p: *mut T, len: usize) -> &'a mut [T] {\n-    mem::transmute(Repr { data: p, len: len })\n+pub unsafe fn from_raw_parts_mut<'a, T>(data: *mut T, len: usize) -> &'a mut [T] {\n+    Repr { raw: FatPtr { data, len} }.rust_mut\n }\n \n /// Converts a reference to T into a slice of length 1 (without copying).\n-#[unstable(feature = \"from_ref\", issue = \"45703\")]\n+#[stable(feature = \"from_ref\", since = \"1.28.0\")]\n pub fn from_ref<T>(s: &T) -> &[T] {\n     unsafe {\n         from_raw_parts(s, 1)\n     }\n }\n \n /// Converts a reference to T into a slice of length 1 (without copying).\n-#[unstable(feature = \"from_ref\", issue = \"45703\")]\n-pub fn from_ref_mut<T>(s: &mut T) -> &mut [T] {\n+#[stable(feature = \"from_ref\", since = \"1.28.0\")]\n+pub fn from_mut<T>(s: &mut T) -> &mut [T] {\n     unsafe {\n         from_raw_parts_mut(s, 1)\n     }"}, {"sha": "70aaf10f4213e95b613cc6d3da727a9ccf6df007", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e0635188ed30e083245482218a0de9237f14ce90/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0635188ed30e083245482218a0de9237f14ce90/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=e0635188ed30e083245482218a0de9237f14ce90", "patch": "@@ -2166,7 +2166,8 @@ impl str {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n-    pub fn len(&self) -> usize {\n+    #[rustc_const_unstable(feature = \"const_str_len\")]\n+    pub const fn len(&self) -> usize {\n         self.as_bytes().len()\n     }\n \n@@ -2185,7 +2186,8 @@ impl str {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn is_empty(&self) -> bool {\n+    #[rustc_const_unstable(feature = \"const_str_len\")]\n+    pub const fn is_empty(&self) -> bool {\n         self.len() == 0\n     }\n \n@@ -2242,8 +2244,15 @@ impl str {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline(always)]\n-    pub fn as_bytes(&self) -> &[u8] {\n-        unsafe { &*(self as *const str as *const [u8]) }\n+    #[rustc_const_unstable(feature=\"const_str_as_bytes\")]\n+    pub const fn as_bytes(&self) -> &[u8] {\n+        unsafe {\n+            union Slices<'a> {\n+                str: &'a str,\n+                slice: &'a [u8],\n+            }\n+            Slices { str: self }.slice\n+        }\n     }\n \n     /// Converts a mutable string slice to a mutable byte slice. To convert the\n@@ -2303,7 +2312,8 @@ impl str {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n-    pub fn as_ptr(&self) -> *const u8 {\n+    #[rustc_const_unstable(feature = \"const_str_as_ptr\")]\n+    pub const fn as_ptr(&self) -> *const u8 {\n         self as *const str as *const u8\n     }\n "}, {"sha": "ffb8031b83bc65043f7972f3f4afe3544111874d", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0635188ed30e083245482218a0de9237f14ce90/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0635188ed30e083245482218a0de9237f14ce90/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=e0635188ed30e083245482218a0de9237f14ce90", "patch": "@@ -948,7 +948,7 @@ impl<'tcx> TerminatorKind<'tcx> {\n             Drop { target: ref mut t, unwind: Some(ref mut u), .. } |\n             Assert { target: ref mut t, cleanup: Some(ref mut u), .. } |\n             FalseUnwind { real_target: ref mut t, unwind: Some(ref mut u) } => {\n-                Some(t).into_iter().chain(slice::from_ref_mut(u))\n+                Some(t).into_iter().chain(slice::from_mut(u))\n             }\n             SwitchInt { ref mut targets, .. } => {\n                 None.into_iter().chain(&mut targets[..])"}, {"sha": "7a52a5cbf5acc69713a9dd58c5186e8c0eb63c1b", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e0635188ed30e083245482218a0de9237f14ce90/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0635188ed30e083245482218a0de9237f14ce90/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=e0635188ed30e083245482218a0de9237f14ce90", "patch": "@@ -3356,13 +3356,28 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                     predicate: predicate.value\n                 }))\n         }).collect();\n+\n         // We are performing deduplication here to avoid exponential blowups\n         // (#38528) from happening, but the real cause of the duplication is\n         // unknown. What we know is that the deduplication avoids exponential\n-        // amount of predicates being propogated when processing deeply nested\n+        // amount of predicates being propagated when processing deeply nested\n         // types.\n-        let mut seen = FxHashSet();\n-        predicates.retain(|i| seen.insert(i.clone()));\n+        //\n+        // This code is hot enough that it's worth avoiding the allocation\n+        // required for the FxHashSet when possible. Special-casing lengths 0,\n+        // 1 and 2 covers roughly 75--80% of the cases.\n+        if predicates.len() <= 1 {\n+            // No possibility of duplicates.\n+        } else if predicates.len() == 2 {\n+            // Only two elements. Drop the second if they are equal.\n+            if predicates[0] == predicates[1] {\n+                predicates.truncate(1);\n+            }\n+        } else {\n+            // Three or more elements. Use a general deduplication process.\n+            let mut seen = FxHashSet();\n+            predicates.retain(|i| seen.insert(i.clone()));\n+        }\n         self.infcx().plug_leaks(skol_map, snapshot, predicates)\n     }\n }"}, {"sha": "c43b7e95b35e344ca3bb121fe7a8a3581b4f40d3", "filename": "src/librustc/ty/maps/plumbing.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e0635188ed30e083245482218a0de9237f14ce90/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0635188ed30e083245482218a0de9237f14ce90/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs?ref=e0635188ed30e083245482218a0de9237f14ce90", "patch": "@@ -105,6 +105,10 @@ impl<'a, 'tcx, Q: QueryDescription<'tcx>> JobOwner<'a, 'tcx, Q> {\n     /// start executing the query, or it returns with the result of the query.\n     /// If the query is executing elsewhere, this will wait for it.\n     /// If the query panicked, this will silently panic.\n+    ///\n+    /// This function is inlined because that results in a noticeable speedup\n+    /// for some compile-time benchmarks.\n+    #[inline(always)]\n     pub(super) fn try_get(\n         tcx: TyCtxt<'a, 'tcx, '_>,\n         span: Span,"}, {"sha": "4ec75d3b5ec746e54f5217191c0107d5a622f65c", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e0635188ed30e083245482218a0de9237f14ce90/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0635188ed30e083245482218a0de9237f14ce90/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=e0635188ed30e083245482218a0de9237f14ce90", "patch": "@@ -1853,6 +1853,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                     for index in ii {\n                         if flow_state.ever_inits.contains(index) {\n                             self.used_mut.insert(*local);\n+                            break;\n                         }\n                     }\n                 }"}, {"sha": "4719f00b4d25929068af9789f80ee8693dfcbf02", "filename": "src/librustc_passes/loops.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e0635188ed30e083245482218a0de9237f14ce90/src%2Flibrustc_passes%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0635188ed30e083245482218a0de9237f14ce90/src%2Flibrustc_passes%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Floops.rs?ref=e0635188ed30e083245482218a0de9237f14ce90", "patch": "@@ -82,7 +82,8 @@ impl<'a, 'hir> Visitor<'hir> for CheckLoopVisitor<'a, 'hir> {\n             hir::ExprLoop(ref b, _, source) => {\n                 self.with_context(Loop(LoopKind::Loop(source)), |v| v.visit_block(&b));\n             }\n-            hir::ExprClosure(.., b, _, _) => {\n+            hir::ExprClosure(_, ref function_decl, b, _, _) => {\n+                self.visit_fn_decl(&function_decl);\n                 self.with_context(Closure, |v| v.visit_nested_body(b));\n             }\n             hir::ExprBlock(ref b, Some(_label)) => {"}, {"sha": "76219c6971b22773ba7024b23a61f1ad01feefd4", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e0635188ed30e083245482218a0de9237f14ce90/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0635188ed30e083245482218a0de9237f14ce90/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=e0635188ed30e083245482218a0de9237f14ce90", "patch": "@@ -537,8 +537,9 @@ impl<'f, 'gcx, 'tcx> Coerce<'f, 'gcx, 'tcx> {\n \n         let mut selcx = traits::SelectionContext::new(self);\n \n-        // Use a FIFO queue for this custom fulfillment procedure.\n-        let mut queue = VecDeque::new();\n+        // Use a FIFO queue for this custom fulfillment procedure. (The maximum\n+        // length is almost always 1.)\n+        let mut queue = VecDeque::with_capacity(1);\n \n         // Create an obligation for `Source: CoerceUnsized<Target>`.\n         let cause = ObligationCause::misc(self.cause.span, self.body_id);"}, {"sha": "dceb04a7daa2babf33b510563635d948da08a63a", "filename": "src/librustdoc/clean/cfg.rs", "status": "modified", "additions": 30, "deletions": 22, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/e0635188ed30e083245482218a0de9237f14ce90/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0635188ed30e083245482218a0de9237f14ce90/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fcfg.rs?ref=e0635188ed30e083245482218a0de9237f14ce90", "patch": "@@ -138,7 +138,7 @@ impl Cfg {\n \n     /// Renders the configuration for human display, as a short HTML description.\n     pub(crate) fn render_short_html(&self) -> String {\n-        let mut msg = ShortHtml(self).to_string();\n+        let mut msg = Html(self, true).to_string();\n         if self.should_capitalize_first_letter() {\n             if let Some(i) = msg.find(|c: char| c.is_ascii_alphanumeric()) {\n                 msg[i .. i+1].make_ascii_uppercase();\n@@ -155,7 +155,7 @@ impl Cfg {\n             \"on\"\n         };\n \n-        let mut msg = format!(\"This is supported {} <strong>{}</strong>\", on, Html(self));\n+        let mut msg = format!(\"This is supported {} <strong>{}</strong>\", on, Html(self, false));\n         if self.should_append_only_to_description() {\n             msg.push_str(\" only\");\n         }\n@@ -265,7 +265,9 @@ impl ops::BitOr for Cfg {\n     }\n }\n \n-struct Html<'a>(&'a Cfg);\n+/// Pretty-print wrapper for a `Cfg`. Also indicates whether the \"short-form\" rendering should be\n+/// used.\n+struct Html<'a>(&'a Cfg, bool);\n \n fn write_with_opt_paren<T: fmt::Display>(\n     fmt: &mut fmt::Formatter,\n@@ -295,12 +297,12 @@ impl<'a> fmt::Display for Html<'a> {\n                     };\n                     for (i, sub_cfg) in sub_cfgs.iter().enumerate() {\n                         fmt.write_str(if i == 0 { \"neither \" } else { separator })?;\n-                        write_with_opt_paren(fmt, !sub_cfg.is_all(), Html(sub_cfg))?;\n+                        write_with_opt_paren(fmt, !sub_cfg.is_all(), Html(sub_cfg, self.1))?;\n                     }\n                     Ok(())\n                 }\n-                ref simple @ Cfg::Cfg(..) => write!(fmt, \"non-{}\", Html(simple)),\n-                ref c => write!(fmt, \"not ({})\", Html(c)),\n+                ref simple @ Cfg::Cfg(..) => write!(fmt, \"non-{}\", Html(simple, self.1)),\n+                ref c => write!(fmt, \"not ({})\", Html(c, self.1)),\n             },\n \n             Cfg::Any(ref sub_cfgs) => {\n@@ -313,7 +315,7 @@ impl<'a> fmt::Display for Html<'a> {\n                     if i != 0 {\n                         fmt.write_str(separator)?;\n                     }\n-                    write_with_opt_paren(fmt, !sub_cfg.is_all(), Html(sub_cfg))?;\n+                    write_with_opt_paren(fmt, !sub_cfg.is_all(), Html(sub_cfg, self.1))?;\n                 }\n                 Ok(())\n             },\n@@ -323,7 +325,7 @@ impl<'a> fmt::Display for Html<'a> {\n                     if i != 0 {\n                         fmt.write_str(\" and \")?;\n                     }\n-                    write_with_opt_paren(fmt, !sub_cfg.is_simple(), Html(sub_cfg))?;\n+                    write_with_opt_paren(fmt, !sub_cfg.is_simple(), Html(sub_cfg, self.1))?;\n                 }\n                 Ok(())\n             },\n@@ -390,7 +392,11 @@ impl<'a> fmt::Display for Html<'a> {\n                     (\"target_endian\", Some(endian)) => return write!(fmt, \"{}-endian\", endian),\n                     (\"target_pointer_width\", Some(bits)) => return write!(fmt, \"{}-bit\", bits),\n                     (\"target_feature\", Some(feat)) =>\n-                        return write!(fmt, \"target feature <code>{}</code>\", feat),\n+                        if self.1 {\n+                            return write!(fmt, \"<code>{}</code>\", feat);\n+                        } else {\n+                            return write!(fmt, \"target feature <code>{}</code>\", feat);\n+                        },\n                     _ => \"\",\n                 };\n                 if !human_readable.is_empty() {\n@@ -405,19 +411,6 @@ impl<'a> fmt::Display for Html<'a> {\n     }\n }\n \n-struct ShortHtml<'a>(&'a Cfg);\n-\n-impl<'a> fmt::Display for ShortHtml<'a> {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n-        match *self.0 {\n-            Cfg::Cfg(ref name, Some(ref vendor)) if name == &\"target_feature\" => {\n-                write!(fmt, \"<code>{}</code>\", vendor)\n-            },\n-            ref cfg => write!(fmt, \"{}\", Html(cfg)),\n-        }\n-    }\n-}\n-\n #[cfg(test)]\n mod test {\n     use super::Cfg;\n@@ -740,6 +733,13 @@ mod test {\n                 name_value_cfg(\"target_feature\", \"sse2\").render_short_html(),\n                 \"<code>sse2</code>\"\n             );\n+            assert_eq!(\n+                (\n+                    name_value_cfg(\"target_arch\", \"x86_64\") &\n+                    name_value_cfg(\"target_feature\", \"sse2\")\n+                ).render_short_html(),\n+                \"x86-64 and <code>sse2</code>\"\n+            );\n         })\n     }\n \n@@ -818,6 +818,14 @@ mod test {\n                 name_value_cfg(\"target_feature\", \"sse2\").render_long_html(),\n                 \"This is supported with <strong>target feature <code>sse2</code></strong> only.\"\n             );\n+            assert_eq!(\n+                (\n+                    name_value_cfg(\"target_arch\", \"x86_64\") &\n+                    name_value_cfg(\"target_feature\", \"sse2\")\n+                ).render_long_html(),\n+                \"This is supported on <strong>x86-64 and target feature \\\n+                <code>sse2</code></strong> only.\"\n+            );\n         })\n     }\n }"}, {"sha": "4939505c5314452b3b82836da3495133ea293684", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0635188ed30e083245482218a0de9237f14ce90/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/e0635188ed30e083245482218a0de9237f14ce90/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=e0635188ed30e083245482218a0de9237f14ce90", "patch": "@@ -1010,6 +1010,8 @@ span.since {\n \n pre.rust {\n \tposition: relative;\n+\ttab-width: 4;\n+\t-moz-tab-width: 4;\n }\n \n .search-failed {"}, {"sha": "62d007b4240251c62f9b9720e912d475482b69d8", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e0635188ed30e083245482218a0de9237f14ce90/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0635188ed30e083245482218a0de9237f14ce90/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=e0635188ed30e083245482218a0de9237f14ce90", "patch": "@@ -5807,9 +5807,18 @@ impl<'a> Parser<'a> {\n                     return Err(err);\n                 }\n             }\n-            _ => return Err(self.span_fatal_help(self.span,\n-                    &format!(\"expected `,`, or `}}`, found `{}`\", self.this_token_to_string()),\n-                    \"struct fields should be separated by commas\")),\n+            _ => {\n+                let sp = self.sess.codemap().next_point(self.prev_span);\n+                let mut err = self.struct_span_err(sp, &format!(\"expected `,`, or `}}`, found `{}`\",\n+                                                                self.this_token_to_string()));\n+                if self.token.is_ident() {\n+                    // This is likely another field; emit the diagnostic and keep going\n+                    err.span_suggestion(sp, \"try adding a comma\", \",\".into());\n+                    err.emit();\n+                } else {\n+                    return Err(err)\n+                }\n+            }\n         }\n         Ok(a_var)\n     }"}, {"sha": "ed28d5f33b92134e19ffa7d0ee0965cc4f768b09", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e0635188ed30e083245482218a0de9237f14ce90/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0635188ed30e083245482218a0de9237f14ce90/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=e0635188ed30e083245482218a0de9237f14ce90", "patch": "@@ -22,6 +22,7 @@ use serialize::{Decodable, Decoder, Encodable, Encoder};\n use symbol::keywords;\n use syntax::parse::parse_stream_from_source_str;\n use syntax_pos::{self, Span, FileName};\n+use syntax_pos::symbol::{self, Symbol};\n use tokenstream::{TokenStream, TokenTree};\n use tokenstream;\n \n@@ -478,7 +479,13 @@ impl Token {\n                 _ => return None,\n             },\n             SingleQuote => match joint {\n-                Ident(ident, false) => Lifetime(ident),\n+                Ident(ident, false) => {\n+                    let name = Symbol::intern(&format!(\"'{}\", ident));\n+                    Lifetime(symbol::Ident {\n+                        name,\n+                        span: ident.span,\n+                    })\n+                }\n                 _ => return None,\n             },\n "}, {"sha": "cbd6a257b77e8ae2ae23951d0915495547c09624", "filename": "src/libsyntax_ext/deriving/default.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e0635188ed30e083245482218a0de9237f14ce90/src%2Flibsyntax_ext%2Fderiving%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0635188ed30e083245482218a0de9237f14ce90/src%2Flibsyntax_ext%2Fderiving%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fdefault.rs?ref=e0635188ed30e083245482218a0de9237f14ce90", "patch": "@@ -76,8 +76,8 @@ fn default_substructure(cx: &mut ExtCtxt, trait_span: Span, substr: &Substructur\n             }\n         }\n         StaticEnum(..) => {\n-            cx.span_err(trait_span,\n-                        \"`Default` cannot be derived for enums, only structs\");\n+            span_err_if_not_stage0!(cx, trait_span, E0665,\n+                                    \"`Default` cannot be derived for enums, only structs\");\n             // let compilation continue\n             cx.expr_usize(trait_span, 0)\n         }"}, {"sha": "0dd55f8d77738a4d53fa6d74844822a9bfeedd93", "filename": "src/libsyntax_ext/deriving/mod.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e0635188ed30e083245482218a0de9237f14ce90/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0635188ed30e083245482218a0de9237f14ce90/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs?ref=e0635188ed30e083245482218a0de9237f14ce90", "patch": "@@ -19,6 +19,17 @@ use syntax::ptr::P;\n use syntax::symbol::Symbol;\n use syntax_pos::Span;\n \n+macro_rules! span_err_if_not_stage0 {\n+    ($cx:expr, $sp:expr, $code:ident, $text:tt) => {\n+        #[cfg(not(stage0))] {\n+            span_err!($cx, $sp, $code, $text)\n+        }\n+        #[cfg(stage0)] {\n+            $cx.span_err($sp, $text)\n+        }\n+    }\n+}\n+\n macro path_local($x:ident) {\n     generic::ty::Path::new_local(stringify!($x))\n }"}, {"sha": "f99a6c3c2166de717d5c6993c4d660fa8d0bfe48", "filename": "src/libsyntax_ext/diagnostics.rs", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/e0635188ed30e083245482218a0de9237f14ce90/src%2Flibsyntax_ext%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0635188ed30e083245482218a0de9237f14ce90/src%2Flibsyntax_ext%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fdiagnostics.rs?ref=e0635188ed30e083245482218a0de9237f14ce90", "patch": "@@ -82,7 +82,7 @@ A clobber was surrounded by braces in the `asm` macro.\n \n Erroneous code example:\n \n-```compile_fail,E0663\n+```compile_fail,E0664\n asm!(\"mov $$0x200, %eax\"\n      :\n      :\n@@ -94,4 +94,38 @@ Considering that this would be a long explanation, we instead recommend you to\n take a look at the unstable book:\n https://doc.rust-lang.org/unstable-book/language-features/asm.html\n \"##,\n+\n+E0665: r##\"\n+The `Default` trait was derived on an enum.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0665\n+#[derive(Default)]\n+enum Food {\n+    Sweet,\n+    Salty,\n+}\n+```\n+\n+The `Default` cannot be derived on an enum for the simple reason that the\n+compiler doesn't know which value to pick by default whereas it can for a\n+struct as long as all its fields implement the `Default` trait as well.\n+\n+If you still want to implement `Default` on your enum, you'll have to do it \"by\n+hand\":\n+\n+```\n+enum Food {\n+    Sweet,\n+    Salty,\n+}\n+\n+impl Default for Food {\n+    fn default() -> Food {\n+        Food::Sweet\n+    }\n+}\n+```\n+\"##,\n }"}, {"sha": "af3ef181c59dc9a7808e97cf198b6f769b258d84", "filename": "src/libsyntax_ext/lib.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e0635188ed30e083245482218a0de9237f14ce90/src%2Flibsyntax_ext%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0635188ed30e083245482218a0de9237f14ce90/src%2Flibsyntax_ext%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Flib.rs?ref=e0635188ed30e083245482218a0de9237f14ce90", "patch": "@@ -31,8 +31,12 @@ extern crate rustc_target;\n \n mod diagnostics;\n \n-mod assert;\n+#[macro_use]\n+// for custom_derive\n+pub mod deriving;\n+\n mod asm;\n+mod assert;\n mod cfg;\n mod compile_error;\n mod concat;\n@@ -46,8 +50,6 @@ mod trace_macros;\n \n pub mod proc_macro_registrar;\n \n-// for custom_derive\n-pub mod deriving;\n \n pub mod proc_macro_impl;\n "}, {"sha": "e288050a928b0ad1ddab1119d55e2cf3355e1fd9", "filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/gen-lifetime-token.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/e0635188ed30e083245482218a0de9237f14ce90/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fgen-lifetime-token.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0635188ed30e083245482218a0de9237f14ce90/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fgen-lifetime-token.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fgen-lifetime-token.rs?ref=e0635188ed30e083245482218a0de9237f14ce90", "patch": "@@ -0,0 +1,35 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// no-prefer-dynamic\n+\n+#![crate_type = \"proc-macro\"]\n+#![feature(proc_macro)]\n+\n+extern crate proc_macro;\n+\n+use proc_macro::*;\n+\n+#[proc_macro]\n+pub fn bar(_input: TokenStream) -> TokenStream {\n+    let mut ret = Vec::<TokenTree>::new();\n+    ret.push(Ident::new(\"static\", Span::call_site()).into());\n+    ret.push(Ident::new(\"FOO\", Span::call_site()).into());\n+    ret.push(Punct::new(':', Spacing::Alone).into());\n+    ret.push(Punct::new('&', Spacing::Alone).into());\n+    ret.push(Punct::new('\\'', Spacing::Joint).into());\n+    ret.push(Ident::new(\"static\", Span::call_site()).into());\n+    ret.push(Ident::new(\"i32\", Span::call_site()).into());\n+    ret.push(Punct::new('=', Spacing::Alone).into());\n+    ret.push(Punct::new('&', Spacing::Alone).into());\n+    ret.push(Literal::i32_unsuffixed(1).into());\n+    ret.push(Punct::new(';', Spacing::Alone).into());\n+    ret.into_iter().collect()\n+}"}, {"sha": "539e3aa8ecbb20e6a2e618fa71d5da417690f2e5", "filename": "src/test/run-pass-fulldeps/proc-macro/gen-lifetime-token.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e0635188ed30e083245482218a0de9237f14ce90/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fgen-lifetime-token.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0635188ed30e083245482218a0de9237f14ce90/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fgen-lifetime-token.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fgen-lifetime-token.rs?ref=e0635188ed30e083245482218a0de9237f14ce90", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:gen-lifetime-token.rs\n+\n+#![feature(proc_macro)]\n+\n+extern crate gen_lifetime_token as bar;\n+\n+bar::bar!();\n+\n+fn main() {\n+    let x: &'static i32 = FOO;\n+    assert_eq!(*x, 1);\n+}"}, {"sha": "8888bedf01687840cd1bc71ad251ad813c454773", "filename": "src/test/ui/E0665.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e0635188ed30e083245482218a0de9237f14ce90/src%2Ftest%2Fui%2FE0665.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0635188ed30e083245482218a0de9237f14ce90/src%2Ftest%2Fui%2FE0665.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0665.rs?ref=e0635188ed30e083245482218a0de9237f14ce90", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-stage1\n+\n+#[derive(Default)] //~ ERROR E0665\n+enum Food {\n+    Sweet,\n+    Salty,\n+}\n+\n+fn main() {\n+}"}, {"sha": "c97e9e5ea89d080b25e57e0d1ab0741f438b56f2", "filename": "src/test/ui/E0665.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e0635188ed30e083245482218a0de9237f14ce90/src%2Ftest%2Fui%2FE0665.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e0635188ed30e083245482218a0de9237f14ce90/src%2Ftest%2Fui%2FE0665.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0665.stderr?ref=e0635188ed30e083245482218a0de9237f14ce90", "patch": "@@ -0,0 +1,9 @@\n+error[E0665]: `Default` cannot be derived for enums, only structs\n+  --> $DIR/E0665.rs:13:10\n+   |\n+LL | #[derive(Default)] //~ ERROR E0665\n+   |          ^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0665`."}, {"sha": "dfa41c491fa89d405390ebc6d7878b2eaafd27f7", "filename": "src/test/ui/const-eval/strlen.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/e0635188ed30e083245482218a0de9237f14ce90/src%2Ftest%2Fui%2Fconst-eval%2Fstrlen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0635188ed30e083245482218a0de9237f14ce90/src%2Ftest%2Fui%2Fconst-eval%2Fstrlen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fstrlen.rs?ref=e0635188ed30e083245482218a0de9237f14ce90", "patch": "@@ -0,0 +1,33 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// run-pass\n+\n+#![feature(const_str_len, const_str_as_bytes)]\n+\n+const S: &str = \"foo\";\n+pub const B: &[u8] = S.as_bytes();\n+\n+pub fn foo() -> [u8; S.len()] {\n+    let mut buf = [0; S.len()];\n+    for (i, &c) in S.as_bytes().iter().enumerate() {\n+        buf[i] = c;\n+    }\n+    buf\n+}\n+\n+fn main() {\n+    assert_eq!(&foo()[..], b\"foo\");\n+    assert_eq!(foo().len(), S.len());\n+    const LEN: usize = S.len();\n+    assert_eq!(LEN, S.len());\n+    assert_eq!(B, foo());\n+    assert_eq!(B, b\"foo\");\n+}"}, {"sha": "87ae8ab26051a63a2841971d04fb564a63fb401a", "filename": "src/test/ui/struct-missing-comma.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e0635188ed30e083245482218a0de9237f14ce90/src%2Ftest%2Fui%2Fstruct-missing-comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0635188ed30e083245482218a0de9237f14ce90/src%2Ftest%2Fui%2Fstruct-missing-comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstruct-missing-comma.rs?ref=e0635188ed30e083245482218a0de9237f14ce90", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z parse-only\n+\n+// Issue #50636\n+\n+struct S {\n+    foo: u32 //~ expected `,`, or `}`, found `bar`\n+    //     ~^ HELP try adding a comma: ','\n+    bar: u32\n+}\n+\n+fn main() {\n+    let s = S { foo: 5, bar: 6 };\n+}"}, {"sha": "28283bfb71364e4157bdcfd313b827275bbac2ea", "filename": "src/test/ui/struct-missing-comma.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e0635188ed30e083245482218a0de9237f14ce90/src%2Ftest%2Fui%2Fstruct-missing-comma.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e0635188ed30e083245482218a0de9237f14ce90/src%2Ftest%2Fui%2Fstruct-missing-comma.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstruct-missing-comma.stderr?ref=e0635188ed30e083245482218a0de9237f14ce90", "patch": "@@ -0,0 +1,8 @@\n+error: expected `,`, or `}`, found `bar`\n+  --> $DIR/struct-missing-comma.rs:16:13\n+   |\n+LL |     foo: u32 //~ expected `,`, or `}`, found `bar`\n+   |             ^ help: try adding a comma: `,`\n+\n+error: aborting due to previous error\n+"}]}