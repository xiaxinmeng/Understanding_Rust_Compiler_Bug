{"sha": "6ca14660affb3a8eace557f8dfb27a520be38fd8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjYTE0NjYwYWZmYjNhOGVhY2U1NTdmOGRmYjI3YTUyMGJlMzhmZDg=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-03-28T15:55:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-03-28T15:55:12Z"}, "message": "Rollup merge of #49427 - Manishearth:rustdoc-impl-trait-extern, r=GuillaumeGomez\n\nCorrectly handle impl trait in external items in rustdoc\n\nfixes #49373\n\nr? @QuietMisdreavus", "tree": {"sha": "ed8948c3dbe5dc2e34277930be3b44e9aedf241c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed8948c3dbe5dc2e34277930be3b44e9aedf241c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ca14660affb3a8eace557f8dfb27a520be38fd8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJau7rgCRBK7hj4Ov3rIwAAdHIIAAP4f9B90E5uR5C5P0GZKgG/\nHk8CJF3iq1R8ydM8XX6brbDVdtloA8j2B/6CftWkXxODYIpeHuRkq0AHU8ErUaOU\nohDbABdakacafEtBpmfT22lYJOQiantQ+GNNVf2+EqpsoPv5Kw1Txx6AJ6uxSQEy\nPLlkj61fWjqHIAsJCqMMg4QYuAGXFsDHWJQyte1vmQldC/rzGBBYw9V5Sf85LE8b\ngVV7OJ0k3Nw+M8exO0qlQLDRszGbkpXxURPFH+dbb2XNLzFlKhB3Nf4lLM69yFNG\nQ9DhYz4L2hBHigCn8Jt5fr3NpuSaTl7ZxnP6qrRpo8/qRrnbtLZ4Vt0Ii5+TAWk=\n=crsH\n-----END PGP SIGNATURE-----\n", "payload": "tree ed8948c3dbe5dc2e34277930be3b44e9aedf241c\nparent c17ab378e93c1205435f66518621ea05721e37bd\nparent 33dceaa24409951dfe7607c580de6fd504932c90\nauthor kennytm <kennytm@gmail.com> 1522252512 +0200\ncommitter GitHub <noreply@github.com> 1522252512 +0200\n\nRollup merge of #49427 - Manishearth:rustdoc-impl-trait-extern, r=GuillaumeGomez\n\nCorrectly handle impl trait in external items in rustdoc\n\nfixes #49373\n\nr? @QuietMisdreavus\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ca14660affb3a8eace557f8dfb27a520be38fd8", "html_url": "https://github.com/rust-lang/rust/commit/6ca14660affb3a8eace557f8dfb27a520be38fd8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ca14660affb3a8eace557f8dfb27a520be38fd8/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c17ab378e93c1205435f66518621ea05721e37bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/c17ab378e93c1205435f66518621ea05721e37bd", "html_url": "https://github.com/rust-lang/rust/commit/c17ab378e93c1205435f66518621ea05721e37bd"}, {"sha": "33dceaa24409951dfe7607c580de6fd504932c90", "url": "https://api.github.com/repos/rust-lang/rust/commits/33dceaa24409951dfe7607c580de6fd504932c90", "html_url": "https://github.com/rust-lang/rust/commit/33dceaa24409951dfe7607c580de6fd504932c90"}], "stats": {"total": 127, "additions": 117, "deletions": 10}, "files": [{"sha": "3a79c14f4ec2ace96417215f477817e55ef4f103", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 59, "deletions": 10, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/6ca14660affb3a8eace557f8dfb27a520be38fd8/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ca14660affb3a8eace557f8dfb27a520be38fd8/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=6ca14660affb3a8eace557f8dfb27a520be38fd8", "patch": "@@ -1380,17 +1380,18 @@ fn external_path(cx: &DocContext, name: &str, trait_did: Option<DefId>, has_self\n     }\n }\n \n-impl<'tcx> Clean<TyParamBound> for ty::TraitRef<'tcx> {\n+impl<'a, 'tcx> Clean<TyParamBound> for (&'a ty::TraitRef<'tcx>, Vec<TypeBinding>) {\n     fn clean(&self, cx: &DocContext) -> TyParamBound {\n-        inline::record_extern_fqn(cx, self.def_id, TypeKind::Trait);\n-        let path = external_path(cx, &cx.tcx.item_name(self.def_id),\n-                                 Some(self.def_id), true, vec![], self.substs);\n+        let (trait_ref, ref bounds) = *self;\n+        inline::record_extern_fqn(cx, trait_ref.def_id, TypeKind::Trait);\n+        let path = external_path(cx, &cx.tcx.item_name(trait_ref.def_id),\n+                                 Some(trait_ref.def_id), true, bounds.clone(), trait_ref.substs);\n \n-        debug!(\"ty::TraitRef\\n  subst: {:?}\\n\", self.substs);\n+        debug!(\"ty::TraitRef\\n  subst: {:?}\\n\", trait_ref.substs);\n \n         // collect any late bound regions\n         let mut late_bounds = vec![];\n-        for ty_s in self.input_types().skip(1) {\n+        for ty_s in trait_ref.input_types().skip(1) {\n             if let ty::TyTuple(ts) = ty_s.sty {\n                 for &ty_s in ts {\n                     if let ty::TyRef(ref reg, _) = ty_s.sty {\n@@ -1410,7 +1411,7 @@ impl<'tcx> Clean<TyParamBound> for ty::TraitRef<'tcx> {\n                 trait_: ResolvedPath {\n                     path,\n                     typarams: None,\n-                    did: self.def_id,\n+                    did: trait_ref.def_id,\n                     is_generic: false,\n                 },\n                 generic_params: late_bounds,\n@@ -1420,6 +1421,12 @@ impl<'tcx> Clean<TyParamBound> for ty::TraitRef<'tcx> {\n     }\n }\n \n+impl<'tcx> Clean<TyParamBound> for ty::TraitRef<'tcx> {\n+    fn clean(&self, cx: &DocContext) -> TyParamBound {\n+        (self, vec![]).clean(cx)\n+    }\n+}\n+\n impl<'tcx> Clean<Option<Vec<TyParamBound>>> for Substs<'tcx> {\n     fn clean(&self, cx: &DocContext) -> Option<Vec<TyParamBound>> {\n         let mut v = Vec::new();\n@@ -2780,9 +2787,51 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n                 let predicates_of = cx.tcx.predicates_of(def_id);\n                 let substs = cx.tcx.lift(&substs).unwrap();\n                 let bounds = predicates_of.instantiate(cx.tcx, substs);\n-                ImplTrait(bounds.predicates.into_iter().filter_map(|predicate| {\n-                    predicate.to_opt_poly_trait_ref().clean(cx)\n-                }).collect())\n+                let mut regions = vec![];\n+                let mut has_sized = false;\n+                let mut bounds = bounds.predicates.iter().filter_map(|predicate| {\n+                    let trait_ref = if let Some(tr) = predicate.to_opt_poly_trait_ref() {\n+                        tr\n+                    } else if let ty::Predicate::TypeOutlives(pred) = *predicate {\n+                        // these should turn up at the end\n+                        pred.skip_binder().1.clean(cx).map(|r| regions.push(RegionBound(r)));\n+                        return None;\n+                    } else {\n+                        return None;\n+                    };\n+\n+                    if let Some(sized) = cx.tcx.lang_items().sized_trait() {\n+                        if trait_ref.def_id() == sized {\n+                            has_sized = true;\n+                            return None;\n+                        }\n+                    }\n+\n+\n+                    let bounds = bounds.predicates.iter().filter_map(|pred|\n+                        if let ty::Predicate::Projection(proj) = *pred {\n+                            let proj = proj.skip_binder();\n+                            if proj.projection_ty.trait_ref(cx.tcx) == *trait_ref.skip_binder() {\n+                                Some(TypeBinding {\n+                                    name: cx.tcx.associated_item(proj.projection_ty.item_def_id)\n+                                                .name.clean(cx),\n+                                    ty: proj.ty.clean(cx),\n+                                })\n+                            } else {\n+                                None\n+                            }\n+                        } else {\n+                            None\n+                        }\n+                    ).collect();\n+\n+                    Some((trait_ref.skip_binder(), bounds).clean(cx))\n+                }).collect::<Vec<_>>();\n+                bounds.extend(regions);\n+                if !has_sized && !bounds.is_empty() {\n+                    bounds.insert(0, TyParamBound::maybe_sized(cx));\n+                }\n+                ImplTrait(bounds)\n             }\n \n             ty::TyClosure(..) | ty::TyGenerator(..) => Tuple(vec![]), // FIXME(pcwalton)"}, {"sha": "ba6c3e956953be16dacb3b317f33dd92b478c081", "filename": "src/test/rustdoc/auxiliary/extern-impl-trait.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/6ca14660affb3a8eace557f8dfb27a520be38fd8/src%2Ftest%2Frustdoc%2Fauxiliary%2Fextern-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ca14660affb3a8eace557f8dfb27a520be38fd8/src%2Ftest%2Frustdoc%2Fauxiliary%2Fextern-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fauxiliary%2Fextern-impl-trait.rs?ref=6ca14660affb3a8eace557f8dfb27a520be38fd8", "patch": "@@ -0,0 +1,37 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub trait Foo {\n+    type Associated;\n+}\n+\n+pub struct X;\n+pub struct Y;\n+\n+\n+impl Foo for X {\n+    type Associated = ();\n+}\n+\n+impl Foo for Y {\n+    type Associated = ();\n+}\n+\n+impl X {\n+    pub fn returns_sized<'a>(&'a self) -> impl Foo<Associated=()> + 'a {\n+        X\n+    }\n+}\n+\n+impl Y {\n+    pub fn returns_unsized<'a>(&'a self) -> Box<impl ?Sized + Foo<Associated=()> + 'a> {\n+        Box::new(X)\n+    }\n+}"}, {"sha": "02a8e962fe17badf2f5e4ca430b459e49337c750", "filename": "src/test/rustdoc/extern-impl-trait.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6ca14660affb3a8eace557f8dfb27a520be38fd8/src%2Ftest%2Frustdoc%2Fextern-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ca14660affb3a8eace557f8dfb27a520be38fd8/src%2Ftest%2Frustdoc%2Fextern-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fextern-impl-trait.rs?ref=6ca14660affb3a8eace557f8dfb27a520be38fd8", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:extern-impl-trait.rs\n+\n+#![crate_name = \"foo\"]\n+\n+extern crate extern_impl_trait;\n+\n+// @has 'foo/struct.X.html' '//code' \"impl Foo<Associated = ()> + 'a\"\n+pub use extern_impl_trait::X;\n+\n+// @has 'foo/struct.Y.html' '//code' \"impl ?Sized + Foo<Associated = ()> + 'a\"\n+pub use extern_impl_trait::Y;"}]}