{"sha": "4ca769ad091ef0018f5a20effaf4b4f428a034d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjYTc2OWFkMDkxZWYwMDE4ZjVhMjBlZmZhZjRiNGY0MjhhMDM0ZDc=", "commit": {"author": {"name": "Krishna Sai Veera Reddy", "email": "krishnasai.veerareddy@gm.com", "date": "2019-11-29T22:22:44Z"}, "committer": {"name": "Krishna Sai Veera Reddy", "email": "krishnasai.veerareddy@gm.com", "date": "2019-11-29T22:22:44Z"}, "message": "Optimize Ord trait implementation for bool\n\nCasting the booleans to `i8`s and converting their difference\ninto `Ordering` generates better assembly than casting them to\n`u8`s and comparing them.", "tree": {"sha": "d389a56e4d6ab7d9a93d325008259702f4095e38", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d389a56e4d6ab7d9a93d325008259702f4095e38"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ca769ad091ef0018f5a20effaf4b4f428a034d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ca769ad091ef0018f5a20effaf4b4f428a034d7", "html_url": "https://github.com/rust-lang/rust/commit/4ca769ad091ef0018f5a20effaf4b4f428a034d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ca769ad091ef0018f5a20effaf4b4f428a034d7/comments", "author": null, "committer": null, "parents": [{"sha": "d99e0c6d02b159f305474f58c8c38027bb06e051", "url": "https://api.github.com/repos/rust-lang/rust/commits/d99e0c6d02b159f305474f58c8c38027bb06e051", "html_url": "https://github.com/rust-lang/rust/commit/d99e0c6d02b159f305474f58c8c38027bb06e051"}], "stats": {"total": 36, "additions": 35, "deletions": 1}, "files": [{"sha": "e72b6117ba862043b320f51358101be22e3f6288", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4ca769ad091ef0018f5a20effaf4b4f428a034d7/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ca769ad091ef0018f5a20effaf4b4f428a034d7/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=4ca769ad091ef0018f5a20effaf4b4f428a034d7", "patch": "@@ -1006,6 +1006,7 @@ pub fn max_by_key<T, F: FnMut(&T) -> K, K: Ord>(v1: T, v2: T, mut f: F) -> T {\n \n // Implementation of PartialEq, Eq, PartialOrd and Ord for primitive types\n mod impls {\n+    use crate::hint::unreachable_unchecked;\n     use crate::cmp::Ordering::{self, Less, Greater, Equal};\n \n     macro_rules! partial_eq_impl {\n@@ -1126,7 +1127,15 @@ mod impls {\n     impl Ord for bool {\n         #[inline]\n         fn cmp(&self, other: &bool) -> Ordering {\n-            (*self as u8).cmp(&(*other as u8))\n+            // Casting to i8's and converting the difference to an Ordering generates\n+            // more optimal assembly.\n+            // See <https://github.com/rust-lang/rust/issues/66780> for more info.\n+            match (*self as i8) - (*other as i8) {\n+                -1 => Less,\n+                0 => Equal,\n+                1 => Greater,\n+                _ => unsafe { unreachable_unchecked() },\n+            }\n         }\n     }\n "}, {"sha": "56a2f4acf6eaa158ec111d7239ec19fb02a091ed", "filename": "src/libcore/tests/cmp.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4ca769ad091ef0018f5a20effaf4b4f428a034d7/src%2Flibcore%2Ftests%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ca769ad091ef0018f5a20effaf4b4f428a034d7/src%2Flibcore%2Ftests%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fcmp.rs?ref=4ca769ad091ef0018f5a20effaf4b4f428a034d7", "patch": "@@ -9,6 +9,14 @@ fn test_int_totalord() {\n     assert_eq!(12.cmp(&-5), Greater);\n }\n \n+#[test]\n+fn test_bool_totalord() {\n+    assert_eq!(true.cmp(&false), Greater);\n+    assert_eq!(false.cmp(&true), Less);\n+    assert_eq!(true.cmp(&true), Equal);\n+    assert_eq!(false.cmp(&false), Equal);\n+}\n+\n #[test]\n fn test_mut_int_totalord() {\n     assert_eq!((&mut 5).cmp(&&mut 10), Less);"}, {"sha": "8769a4cb5e1898f078d07d031939342e3036a4e8", "filename": "src/test/codegen/bool-cmp.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4ca769ad091ef0018f5a20effaf4b4f428a034d7/src%2Ftest%2Fcodegen%2Fbool-cmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ca769ad091ef0018f5a20effaf4b4f428a034d7/src%2Ftest%2Fcodegen%2Fbool-cmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fbool-cmp.rs?ref=4ca769ad091ef0018f5a20effaf4b4f428a034d7", "patch": "@@ -0,0 +1,17 @@\n+// This is a test for optimal Ord trait implementation for bool.\n+// See <https://github.com/rust-lang/rust/issues/66780> for more info.\n+\n+// compile-flags: -C opt-level=3\n+\n+#![crate_type = \"lib\"]\n+\n+use std::cmp::Ordering;\n+\n+// CHECK-LABEL: @cmp_bool\n+#[no_mangle]\n+pub fn cmp_bool(a: bool, b: bool) -> Ordering {\n+// CHECK: zext i1\n+// CHECK: zext i1\n+// CHECK: sub nsw\n+    a.cmp(&b)\n+}"}]}