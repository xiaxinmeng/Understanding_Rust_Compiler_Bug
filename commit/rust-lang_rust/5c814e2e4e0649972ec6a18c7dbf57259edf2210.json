{"sha": "5c814e2e4e0649972ec6a18c7dbf57259edf2210", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjODE0ZTJlNGUwNjQ5OTcyZWM2YTE4YzdkYmY1NzI1OWVkZjIyMTA=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-08-11T20:25:48Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-08-11T20:25:48Z"}, "message": "Clean up and add extra tests", "tree": {"sha": "ca656fc777c3db5ae6ac47abc790bc112da3b564", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca656fc777c3db5ae6ac47abc790bc112da3b564"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c814e2e4e0649972ec6a18c7dbf57259edf2210", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c814e2e4e0649972ec6a18c7dbf57259edf2210", "html_url": "https://github.com/rust-lang/rust/commit/5c814e2e4e0649972ec6a18c7dbf57259edf2210", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c814e2e4e0649972ec6a18c7dbf57259edf2210/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "49e9c5fe90db9a70697da8a3bf4237492376c541", "url": "https://api.github.com/repos/rust-lang/rust/commits/49e9c5fe90db9a70697da8a3bf4237492376c541", "html_url": "https://github.com/rust-lang/rust/commit/49e9c5fe90db9a70697da8a3bf4237492376c541"}], "stats": {"total": 56, "additions": 26, "deletions": 30}, "files": [{"sha": "0ea90e745319004513a8df8a740f08a95d1a618a", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5c814e2e4e0649972ec6a18c7dbf57259edf2210/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c814e2e4e0649972ec6a18c7dbf57259edf2210/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=5c814e2e4e0649972ec6a18c7dbf57259edf2210", "patch": "@@ -342,10 +342,10 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                                     self.session.buffer_lint(\n                                         lint::builtin::PATTERNS_IN_FNS_WITHOUT_BODY,\n                                         trait_item.id, span,\n-                                        \"patterns aren't allowed in trait methods\");\n+                                        \"patterns aren't allowed in methods without bodies\");\n                                 } else {\n                                     struct_span_err!(self.session, span, E0642,\n-                                        \"patterns aren't allowed in trait methods\").emit();\n+                                        \"patterns aren't allowed in methods without bodies\").emit();\n                                 }\n                             });\n                         }"}, {"sha": "746e03d771a880d3ac40851ec865066ee9a41e68", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5c814e2e4e0649972ec6a18c7dbf57259edf2210/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c814e2e4e0649972ec6a18c7dbf57259edf2210/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=5c814e2e4e0649972ec6a18c7dbf57259edf2210", "patch": "@@ -1754,16 +1754,7 @@ impl<'a> Parser<'a> {\n         } else {\n             debug!(\"parse_arg_general ident_to_pat\");\n \n-            // If we see `ident :`, then we know that the argument is not just of the\n-            // form `type`, which means we won't need to recover from parsing a\n-            // pattern and so we don't need to store a parser snapshot.\n-            let parser_snapshot_before_pat = if\n-                self.look_ahead(1, |t| t.is_ident()) &&\n-                self.look_ahead(2, |t| t == &token::Colon) {\n-                    None\n-                } else {\n-                    Some(self.clone())\n-                };\n+            let parser_snapshot_before_pat = self.clone();\n \n             // We're going to try parsing the argument as a pattern (even though it's not\n             // allowed). This way we can provide better errors to the user.\n@@ -1777,7 +1768,7 @@ impl<'a> Parser<'a> {\n                 Ok((pat, ty)) => {\n                     let mut err = self.diagnostic().struct_span_err_with_code(\n                         pat.span,\n-                        \"patterns aren't allowed in trait methods\",\n+                        \"patterns aren't allowed in methods without bodies\",\n                         DiagnosticId::Error(\"E0642\".into()),\n                     );\n                     err.span_suggestion_short_with_applicability(\n@@ -1799,7 +1790,7 @@ impl<'a> Parser<'a> {\n                     err.cancel();\n                     // Recover from attempting to parse the argument as a pattern. This means\n                     // the type is alone, with no name, e.g. `fn foo(u32)`.\n-                    mem::replace(self, parser_snapshot_before_pat.unwrap());\n+                    mem::replace(self, parser_snapshot_before_pat);\n                     debug!(\"parse_arg_general ident_to_pat\");\n                     let ident = Ident::new(keywords::Invalid.name(), self.prev_span);\n                     let ty = self.parse_ty()?;"}, {"sha": "4d2412c34a5faf46984fe06e6326ba2f68b4641d", "filename": "src/test/compile-fail/no-patterns-in-args-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5c814e2e4e0649972ec6a18c7dbf57259edf2210/src%2Ftest%2Fcompile-fail%2Fno-patterns-in-args-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c814e2e4e0649972ec6a18c7dbf57259edf2210/src%2Ftest%2Fcompile-fail%2Fno-patterns-in-args-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-patterns-in-args-2.rs?ref=5c814e2e4e0649972ec6a18c7dbf57259edf2210", "patch": "@@ -11,9 +11,9 @@\n #![deny(patterns_in_fns_without_body)]\n \n trait Tr {\n-    fn f1(mut arg: u8); //~ ERROR patterns aren't allowed in trait methods\n+    fn f1(mut arg: u8); //~ ERROR patterns aren't allowed in methods without bodies\n                         //~^ WARN was previously accepted\n-    fn f2(&arg: u8); //~ ERROR patterns aren't allowed in trait methods\n+    fn f2(&arg: u8); //~ ERROR patterns aren't allowed in methods without bodies\n     fn g1(arg: u8); // OK\n     fn g2(_: u8); // OK\n     #[allow(anonymous_parameters)]"}, {"sha": "f85ce8f57ea716e174e9e62cfa31f32a5fcddeb2", "filename": "src/test/compile-fail/no-patterns-in-args-macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c814e2e4e0649972ec6a18c7dbf57259edf2210/src%2Ftest%2Fcompile-fail%2Fno-patterns-in-args-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c814e2e4e0649972ec6a18c7dbf57259edf2210/src%2Ftest%2Fcompile-fail%2Fno-patterns-in-args-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-patterns-in-args-macro.rs?ref=5c814e2e4e0649972ec6a18c7dbf57259edf2210", "patch": "@@ -30,7 +30,7 @@ mod bad_pat {\n     m!((bad, pat));\n     //~^ ERROR patterns aren't allowed in function pointer types\n     //~| ERROR patterns aren't allowed in foreign function declarations\n-    //~| ERROR patterns aren't allowed in trait methods\n+    //~| ERROR patterns aren't allowed in methods without bodies\n }\n \n fn main() {}"}, {"sha": "58ccfc56ab79a8e293afcf2cf8ed5756c307a4b4", "filename": "src/test/ui/E0642.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5c814e2e4e0649972ec6a18c7dbf57259edf2210/src%2Ftest%2Fui%2FE0642.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c814e2e4e0649972ec6a18c7dbf57259edf2210/src%2Ftest%2Fui%2FE0642.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0642.rs?ref=5c814e2e4e0649972ec6a18c7dbf57259edf2210", "patch": "@@ -8,12 +8,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-trait Foo {\n-    fn foo((x, y): (i32, i32)); //~ ERROR patterns aren't allowed in trait methods\n-}\n+#[derive(Clone, Copy)]\n+struct S;\n+\n+trait T {\n+    fn foo((x, y): (i32, i32)); //~ ERROR patterns aren't allowed in methods without bodies\n+\n+    fn bar((x, y): (i32, i32)) {} //~ ERROR patterns aren't allowed in methods without bodies\n \n-trait Bar {\n-    fn bar((x, y): (i32, i32)) {} //~ ERROR patterns aren't allowed in trait methods\n+    fn f(&ident: &S) {} // ok\n+    fn g(&&ident: &&S) {} // ok\n+    fn h(mut ident: S) {} // ok\n }\n \n fn main() {}"}, {"sha": "34c163e2109703b838bf1400265f873dab3b6bde", "filename": "src/test/ui/E0642.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5c814e2e4e0649972ec6a18c7dbf57259edf2210/src%2Ftest%2Fui%2FE0642.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c814e2e4e0649972ec6a18c7dbf57259edf2210/src%2Ftest%2Fui%2FE0642.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0642.stderr?ref=5c814e2e4e0649972ec6a18c7dbf57259edf2210", "patch": "@@ -1,21 +1,21 @@\n-error[E0642]: patterns aren't allowed in trait methods\n-  --> $DIR/E0642.rs:12:12\n+error[E0642]: patterns aren't allowed in methods without bodies\n+  --> $DIR/E0642.rs:15:12\n    |\n-LL |     fn foo((x, y): (i32, i32)); //~ ERROR patterns aren't allowed in trait methods\n+LL |     fn foo((x, y): (i32, i32)); //~ ERROR patterns aren't allowed in methods without bodies\n    |            ^^^^^^\n help: give this argument a name or use an underscore to ignore it\n    |\n-LL |     fn foo(_: (i32, i32)); //~ ERROR patterns aren't allowed in trait methods\n+LL |     fn foo(_: (i32, i32)); //~ ERROR patterns aren't allowed in methods without bodies\n    |            ^\n \n-error[E0642]: patterns aren't allowed in trait methods\n-  --> $DIR/E0642.rs:16:12\n+error[E0642]: patterns aren't allowed in methods without bodies\n+  --> $DIR/E0642.rs:17:12\n    |\n-LL |     fn bar((x, y): (i32, i32)) {} //~ ERROR patterns aren't allowed in trait methods\n+LL |     fn bar((x, y): (i32, i32)) {} //~ ERROR patterns aren't allowed in methods without bodies\n    |            ^^^^^^\n help: give this argument a name or use an underscore to ignore it\n    |\n-LL |     fn bar(_: (i32, i32)) {} //~ ERROR patterns aren't allowed in trait methods\n+LL |     fn bar(_: (i32, i32)) {} //~ ERROR patterns aren't allowed in methods without bodies\n    |            ^\n \n error: aborting due to 2 previous errors"}]}