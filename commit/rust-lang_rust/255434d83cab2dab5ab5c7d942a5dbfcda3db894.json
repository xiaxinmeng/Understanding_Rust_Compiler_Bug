{"sha": "255434d83cab2dab5ab5c7d942a5dbfcda3db894", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1NTQzNGQ4M2NhYjJkYWI1YWI1YzdkOTQyYTVkYmZjZGEzZGI4OTQ=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-08-08T02:36:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-08T02:36:03Z"}, "message": "Rollup merge of #75237 - nbdd0121:rustdoc, r=jyn514\n\nDisplay elided lifetime for non-reference type in doc\n\nIn edition 2018 we encourage writing `<'_>` explicitly, so rustdoc should display like such as well.\n\nFixes #75225\n\n~~Somehow when I run the compiled rustdoc using `cargo +stage2 doc` on other crates, it correctly produces `<'_>`, but I couldn't get the std doc to do the same with `./x.py doc --stage 2`. Might this be related to the recent change to x.py about how the doc is built?~~", "tree": {"sha": "4c5e58c791bbd52482f65f5733e168ec396e6d2d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c5e58c791bbd52482f65f5733e168ec396e6d2d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/255434d83cab2dab5ab5c7d942a5dbfcda3db894", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfLg+UCRBK7hj4Ov3rIwAAdHIIAAQE7YQ+Xm49tBObjMUjCAl/\nKOyDMee0py97/ZDCCefFfK+sfrkKe3VrEppAPMLxJSBUuuxgyoe7AKYtuoaEQaly\nEeCPuwdxU1MjIBiQl/nFfx7An/9/Dlg2pZYH3TQQwwexFCr+CA3gEEPuYglXFJpM\nPqjng0iKOQklXB/TP5oVKmAJB4E74auuvN2lDomjSeQ9fF8LQ1x2VPfvBKfjq1ui\n2Hxat02XAxRWPzsEsYkskFSGZFusfZmA9NA6ndR4zLe5xo1q1kbTIaeov2CcNyGX\nCIBh1XjHuxkffqPk7d5ZXn0OgiE4+lUUMro45w8v+LO1L0X1rdHgqCSCLniP6WA=\n=7bmY\n-----END PGP SIGNATURE-----\n", "payload": "tree 4c5e58c791bbd52482f65f5733e168ec396e6d2d\nparent f5d2ffd7fb94807555cc370eb0ec01822f04abe3\nparent 541fbbb6fab4afdeea48fdb9e94cee48991b3333\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1596854163 +0900\ncommitter GitHub <noreply@github.com> 1596854163 +0900\n\nRollup merge of #75237 - nbdd0121:rustdoc, r=jyn514\n\nDisplay elided lifetime for non-reference type in doc\n\nIn edition 2018 we encourage writing `<'_>` explicitly, so rustdoc should display like such as well.\n\nFixes #75225\n\n~~Somehow when I run the compiled rustdoc using `cargo +stage2 doc` on other crates, it correctly produces `<'_>`, but I couldn't get the std doc to do the same with `./x.py doc --stage 2`. Might this be related to the recent change to x.py about how the doc is built?~~\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/255434d83cab2dab5ab5c7d942a5dbfcda3db894", "html_url": "https://github.com/rust-lang/rust/commit/255434d83cab2dab5ab5c7d942a5dbfcda3db894", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/255434d83cab2dab5ab5c7d942a5dbfcda3db894/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5d2ffd7fb94807555cc370eb0ec01822f04abe3", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5d2ffd7fb94807555cc370eb0ec01822f04abe3", "html_url": "https://github.com/rust-lang/rust/commit/f5d2ffd7fb94807555cc370eb0ec01822f04abe3"}, {"sha": "541fbbb6fab4afdeea48fdb9e94cee48991b3333", "url": "https://api.github.com/repos/rust-lang/rust/commits/541fbbb6fab4afdeea48fdb9e94cee48991b3333", "html_url": "https://github.com/rust-lang/rust/commit/541fbbb6fab4afdeea48fdb9e94cee48991b3333"}], "stats": {"total": 96, "additions": 78, "deletions": 18}, "files": [{"sha": "7b1dd5b11ed0e014b97cc46674a2782eb3e5a6df", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/255434d83cab2dab5ab5c7d942a5dbfcda3db894/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/255434d83cab2dab5ab5c7d942a5dbfcda3db894/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=255434d83cab2dab5ab5c7d942a5dbfcda3db894", "patch": "@@ -1395,10 +1395,13 @@ impl Clean<Type> for hir::Ty<'_> {\n                                             _ => None,\n                                         });\n                                     if let Some(lt) = lifetime.cloned() {\n-                                        if !lt.is_elided() {\n-                                            let lt_def_id = cx.tcx.hir().local_def_id(param.hir_id);\n-                                            lt_substs.insert(lt_def_id.to_def_id(), lt.clean(cx));\n-                                        }\n+                                        let lt_def_id = cx.tcx.hir().local_def_id(param.hir_id);\n+                                        let cleaned = if !lt.is_elided() {\n+                                            lt.clean(cx)\n+                                        } else {\n+                                            self::types::Lifetime::elided()\n+                                        };\n+                                        lt_substs.insert(lt_def_id.to_def_id(), cleaned);\n                                     }\n                                     indices.lifetimes += 1;\n                                 }\n@@ -1957,21 +1960,17 @@ impl Clean<GenericArgs> for hir::GenericArgs<'_> {\n                 output: if output != Type::Tuple(Vec::new()) { Some(output) } else { None },\n             }\n         } else {\n-            let elide_lifetimes = self.args.iter().all(|arg| match arg {\n-                hir::GenericArg::Lifetime(lt) => lt.is_elided(),\n-                _ => true,\n-            });\n             GenericArgs::AngleBracketed {\n                 args: self\n                     .args\n                     .iter()\n-                    .filter_map(|arg| match arg {\n-                        hir::GenericArg::Lifetime(lt) if !elide_lifetimes => {\n-                            Some(GenericArg::Lifetime(lt.clean(cx)))\n+                    .map(|arg| match arg {\n+                        hir::GenericArg::Lifetime(lt) if !lt.is_elided() => {\n+                            GenericArg::Lifetime(lt.clean(cx))\n                         }\n-                        hir::GenericArg::Lifetime(_) => None,\n-                        hir::GenericArg::Type(ty) => Some(GenericArg::Type(ty.clean(cx))),\n-                        hir::GenericArg::Const(ct) => Some(GenericArg::Const(ct.clean(cx))),\n+                        hir::GenericArg::Lifetime(_) => GenericArg::Lifetime(Lifetime::elided()),\n+                        hir::GenericArg::Type(ty) => GenericArg::Type(ty.clean(cx)),\n+                        hir::GenericArg::Const(ct) => GenericArg::Const(ct.clean(cx)),\n                     })\n                     .collect(),\n                 bindings: self.bindings.clean(cx),"}, {"sha": "50eca75d7cab2cc211e19f0d6b5986b18326c3c7", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/255434d83cab2dab5ab5c7d942a5dbfcda3db894/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/255434d83cab2dab5ab5c7d942a5dbfcda3db894/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=255434d83cab2dab5ab5c7d942a5dbfcda3db894", "patch": "@@ -750,6 +750,10 @@ impl Lifetime {\n     pub fn statik() -> Lifetime {\n         Lifetime(\"'static\".to_string())\n     }\n+\n+    pub fn elided() -> Lifetime {\n+        Lifetime(\"'_\".to_string())\n+    }\n }\n \n #[derive(Clone, Debug)]"}, {"sha": "c22538f21f69fbefb567942de1fc61e8bbdb63ee", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/255434d83cab2dab5ab5c7d942a5dbfcda3db894/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/255434d83cab2dab5ab5c7d942a5dbfcda3db894/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=255434d83cab2dab5ab5c7d942a5dbfcda3db894", "patch": "@@ -2,9 +2,9 @@ use crate::clean::auto_trait::AutoTraitFinder;\n use crate::clean::blanket_impl::BlanketImplFinder;\n use crate::clean::{\n     inline, Clean, Crate, Deprecation, ExternalCrate, FnDecl, FnRetTy, Generic, GenericArg,\n-    GenericArgs, GenericBound, Generics, GetDefId, ImportSource, Item, ItemEnum, MacroKind, Path,\n-    PathSegment, Primitive, PrimitiveType, ResolvedPath, Span, Stability, Type, TypeBinding,\n-    TypeKind, Visibility, WherePredicate,\n+    GenericArgs, GenericBound, Generics, GetDefId, ImportSource, Item, ItemEnum, Lifetime,\n+    MacroKind, Path, PathSegment, Primitive, PrimitiveType, ResolvedPath, Span, Stability, Type,\n+    TypeBinding, TypeKind, Visibility, WherePredicate,\n };\n use crate::core::DocContext;\n \n@@ -121,7 +121,10 @@ pub fn external_generic_args(\n     let args: Vec<_> = substs\n         .iter()\n         .filter_map(|kind| match kind.unpack() {\n-            GenericArgKind::Lifetime(lt) => lt.clean(cx).map(GenericArg::Lifetime),\n+            GenericArgKind::Lifetime(lt) => match lt {\n+                ty::ReLateBound(_, ty::BrAnon(_)) => Some(GenericArg::Lifetime(Lifetime::elided())),\n+                _ => lt.clean(cx).map(GenericArg::Lifetime),\n+            },\n             GenericArgKind::Type(_) if skip_self => {\n                 skip_self = false;\n                 None"}, {"sha": "4f2c93379d88e88c33f3b3417a0b8054722ddae3", "filename": "src/test/rustdoc/auxiliary/elided-lifetime.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/255434d83cab2dab5ab5c7d942a5dbfcda3db894/src%2Ftest%2Frustdoc%2Fauxiliary%2Felided-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/255434d83cab2dab5ab5c7d942a5dbfcda3db894/src%2Ftest%2Frustdoc%2Fauxiliary%2Felided-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fauxiliary%2Felided-lifetime.rs?ref=255434d83cab2dab5ab5c7d942a5dbfcda3db894", "patch": "@@ -0,0 +1,11 @@\n+#![crate_name = \"bar\"]\n+\n+pub struct Ref<'a>(&'a u32);\n+\n+pub fn test5(a: &u32) -> Ref {\n+    Ref(a)\n+}\n+\n+pub fn test6(a: &u32) -> Ref<'_> {\n+    Ref(a)\n+}"}, {"sha": "5a32554f972b726bdc9a9343bd2d018b97324761", "filename": "src/test/rustdoc/elided-lifetime.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/255434d83cab2dab5ab5c7d942a5dbfcda3db894/src%2Ftest%2Frustdoc%2Felided-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/255434d83cab2dab5ab5c7d942a5dbfcda3db894/src%2Ftest%2Frustdoc%2Felided-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Felided-lifetime.rs?ref=255434d83cab2dab5ab5c7d942a5dbfcda3db894", "patch": "@@ -0,0 +1,43 @@\n+// aux-build:elided-lifetime.rs\n+//\n+// rust-lang/rust#75225\n+//\n+// Since Rust 2018 we encourage writing out <'_> explicitly to make it clear\n+// that borrowing is occuring. Make sure rustdoc is following the same idiom.\n+\n+#![crate_name = \"foo\"]\n+\n+pub struct Ref<'a>(&'a u32);\n+type ARef<'a> = Ref<'a>;\n+\n+// @has foo/fn.test1.html\n+// @matches - \"Ref</a>&lt;'_&gt;\"\n+pub fn test1(a: &u32) -> Ref {\n+    Ref(a)\n+}\n+\n+// @has foo/fn.test2.html\n+// @matches - \"Ref</a>&lt;'_&gt;\"\n+pub fn test2(a: &u32) -> Ref<'_> {\n+    Ref(a)\n+}\n+\n+// @has foo/fn.test3.html\n+// @matches - \"Ref</a>&lt;'_&gt;\"\n+pub fn test3(a: &u32) -> ARef {\n+    Ref(a)\n+}\n+\n+// @has foo/fn.test4.html\n+// @matches - \"Ref</a>&lt;'_&gt;\"\n+pub fn test4(a: &u32) -> ARef<'_> {\n+    Ref(a)\n+}\n+\n+// Ensure external paths in inlined docs also display elided lifetime\n+// @has foo/bar/fn.test5.html\n+// @matches - \"Ref</a>&lt;'_&gt;\"\n+// @has foo/bar/fn.test6.html\n+// @matches - \"Ref</a>&lt;'_&gt;\"\n+#[doc(inline)]\n+pub extern crate bar;"}]}