{"sha": "4f76266295ce1a3ecedc7de178c8b82fc8ba5206", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmNzYyNjYyOTVjZTFhM2VjZWRjN2RlMTc4YzhiODJmYzhiYTUyMDY=", "commit": {"author": {"name": "Tyson Nottingham", "email": "tgnottingham@gmail.com", "date": "2020-12-01T05:13:49Z"}, "committer": {"name": "Tyson Nottingham", "email": "tgnottingham@gmail.com", "date": "2020-12-22T22:12:57Z"}, "message": "rustc_query_system: minor cleanup\n\nRemove effectively unused parameter and delete out of date comment.", "tree": {"sha": "6cd5d598a833c454c12b7afb9511d0b834238785", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6cd5d598a833c454c12b7afb9511d0b834238785"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f76266295ce1a3ecedc7de178c8b82fc8ba5206", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f76266295ce1a3ecedc7de178c8b82fc8ba5206", "html_url": "https://github.com/rust-lang/rust/commit/4f76266295ce1a3ecedc7de178c8b82fc8ba5206", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f76266295ce1a3ecedc7de178c8b82fc8ba5206/comments", "author": {"login": "tgnottingham", "id": 3668166, "node_id": "MDQ6VXNlcjM2NjgxNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/3668166?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tgnottingham", "html_url": "https://github.com/tgnottingham", "followers_url": "https://api.github.com/users/tgnottingham/followers", "following_url": "https://api.github.com/users/tgnottingham/following{/other_user}", "gists_url": "https://api.github.com/users/tgnottingham/gists{/gist_id}", "starred_url": "https://api.github.com/users/tgnottingham/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tgnottingham/subscriptions", "organizations_url": "https://api.github.com/users/tgnottingham/orgs", "repos_url": "https://api.github.com/users/tgnottingham/repos", "events_url": "https://api.github.com/users/tgnottingham/events{/privacy}", "received_events_url": "https://api.github.com/users/tgnottingham/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tgnottingham", "id": 3668166, "node_id": "MDQ6VXNlcjM2NjgxNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/3668166?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tgnottingham", "html_url": "https://github.com/tgnottingham", "followers_url": "https://api.github.com/users/tgnottingham/followers", "following_url": "https://api.github.com/users/tgnottingham/following{/other_user}", "gists_url": "https://api.github.com/users/tgnottingham/gists{/gist_id}", "starred_url": "https://api.github.com/users/tgnottingham/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tgnottingham/subscriptions", "organizations_url": "https://api.github.com/users/tgnottingham/orgs", "repos_url": "https://api.github.com/users/tgnottingham/repos", "events_url": "https://api.github.com/users/tgnottingham/events{/privacy}", "received_events_url": "https://api.github.com/users/tgnottingham/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd1ab840d279c96adf5d7778670f14a6398b595a", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd1ab840d279c96adf5d7778670f14a6398b595a", "html_url": "https://github.com/rust-lang/rust/commit/dd1ab840d279c96adf5d7778670f14a6398b595a"}], "stats": {"total": 20, "additions": 3, "deletions": 17}, "files": [{"sha": "fefc8ed6f1a99720373a58efd099963a16e7bed7", "filename": "compiler/rustc_query_system/src/dep_graph/graph.rs", "status": "modified", "additions": 3, "deletions": 17, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4f76266295ce1a3ecedc7de178c8b82fc8ba5206/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f76266295ce1a3ecedc7de178c8b82fc8ba5206/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs?ref=4f76266295ce1a3ecedc7de178c8b82fc8ba5206", "patch": "@@ -242,7 +242,6 @@ impl<K: DepKind> DepGraph<K> {\n             key,\n             cx,\n             arg,\n-            false,\n             task,\n             |_key| {\n                 Some(TaskDeps {\n@@ -262,29 +261,16 @@ impl<K: DepKind> DepGraph<K> {\n         key: DepNode<K>,\n         cx: Ctxt,\n         arg: A,\n-        no_tcx: bool,\n         task: fn(Ctxt, A) -> R,\n         create_task: fn(DepNode<K>) -> Option<TaskDeps<K>>,\n         hash_result: impl FnOnce(&mut Ctxt::StableHashingContext, &R) -> Option<Fingerprint>,\n     ) -> (R, DepNodeIndex) {\n         if let Some(ref data) = self.data {\n             let task_deps = create_task(key).map(Lock::new);\n-\n-            // In incremental mode, hash the result of the task. We don't\n-            // do anything with the hash yet, but we are computing it\n-            // anyway so that\n-            //  - we make sure that the infrastructure works and\n-            //  - we can get an idea of the runtime cost.\n-            let mut hcx = cx.create_stable_hashing_context();\n-\n-            let result = if no_tcx {\n-                task(cx, arg)\n-            } else {\n-                K::with_deps(task_deps.as_ref(), || task(cx, arg))\n-            };\n-\n+            let result = K::with_deps(task_deps.as_ref(), || task(cx, arg));\n             let edges = task_deps.map_or_else(|| smallvec![], |lock| lock.into_inner().reads);\n \n+            let mut hcx = cx.create_stable_hashing_context();\n             let current_fingerprint = hash_result(&mut hcx, &result);\n \n             let print_status = cfg!(debug_assertions) && cx.debug_dep_tasks();\n@@ -413,7 +399,7 @@ impl<K: DepKind> DepGraph<K> {\n         task: fn(Ctxt, A) -> R,\n         hash_result: impl FnOnce(&mut Ctxt::StableHashingContext, &R) -> Option<Fingerprint>,\n     ) -> (R, DepNodeIndex) {\n-        self.with_task_impl(key, cx, arg, false, task, |_| None, hash_result)\n+        self.with_task_impl(key, cx, arg, task, |_| None, hash_result)\n     }\n \n     #[inline]"}]}