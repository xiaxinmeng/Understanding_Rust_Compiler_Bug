{"sha": "b8cdefb6cfab11087943bb41824bb955c655daf1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4Y2RlZmI2Y2ZhYjExMDg3OTQzYmI0MTgyNGJiOTU1YzY1NWRhZjE=", "commit": {"author": {"name": "Pyriphlegethon", "email": "pyriphlegethon.github@gmail.com", "date": "2015-09-29T11:11:19Z"}, "committer": {"name": "Pyriphlegethon", "email": "pyriphlegethon.github@gmail.com", "date": "2015-09-29T11:11:19Z"}, "message": "Add unnecessary mut passed lint", "tree": {"sha": "bb17510b30dcdac9007266d6e7bcb772a08a47dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb17510b30dcdac9007266d6e7bcb772a08a47dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8cdefb6cfab11087943bb41824bb955c655daf1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8cdefb6cfab11087943bb41824bb955c655daf1", "html_url": "https://github.com/rust-lang/rust/commit/b8cdefb6cfab11087943bb41824bb955c655daf1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8cdefb6cfab11087943bb41824bb955c655daf1/comments", "author": {"login": "Pyriphlegethon", "id": 13908830, "node_id": "MDQ6VXNlcjEzOTA4ODMw", "avatar_url": "https://avatars.githubusercontent.com/u/13908830?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Pyriphlegethon", "html_url": "https://github.com/Pyriphlegethon", "followers_url": "https://api.github.com/users/Pyriphlegethon/followers", "following_url": "https://api.github.com/users/Pyriphlegethon/following{/other_user}", "gists_url": "https://api.github.com/users/Pyriphlegethon/gists{/gist_id}", "starred_url": "https://api.github.com/users/Pyriphlegethon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Pyriphlegethon/subscriptions", "organizations_url": "https://api.github.com/users/Pyriphlegethon/orgs", "repos_url": "https://api.github.com/users/Pyriphlegethon/repos", "events_url": "https://api.github.com/users/Pyriphlegethon/events{/privacy}", "received_events_url": "https://api.github.com/users/Pyriphlegethon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Pyriphlegethon", "id": 13908830, "node_id": "MDQ6VXNlcjEzOTA4ODMw", "avatar_url": "https://avatars.githubusercontent.com/u/13908830?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Pyriphlegethon", "html_url": "https://github.com/Pyriphlegethon", "followers_url": "https://api.github.com/users/Pyriphlegethon/followers", "following_url": "https://api.github.com/users/Pyriphlegethon/following{/other_user}", "gists_url": "https://api.github.com/users/Pyriphlegethon/gists{/gist_id}", "starred_url": "https://api.github.com/users/Pyriphlegethon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Pyriphlegethon/subscriptions", "organizations_url": "https://api.github.com/users/Pyriphlegethon/orgs", "repos_url": "https://api.github.com/users/Pyriphlegethon/repos", "events_url": "https://api.github.com/users/Pyriphlegethon/events{/privacy}", "received_events_url": "https://api.github.com/users/Pyriphlegethon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e8f875813d75f5547c2e1e8b139c89a6275c0ccb", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8f875813d75f5547c2e1e8b139c89a6275c0ccb", "html_url": "https://github.com/rust-lang/rust/commit/e8f875813d75f5547c2e1e8b139c89a6275c0ccb"}], "stats": {"total": 59, "additions": 58, "deletions": 1}, "files": [{"sha": "427f4181dea03343b97007e78da5bf17efd10322", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b8cdefb6cfab11087943bb41824bb955c655daf1/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/b8cdefb6cfab11087943bb41824bb955c655daf1/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=b8cdefb6cfab11087943bb41824bb955c655daf1", "patch": "@@ -6,7 +6,7 @@ A collection of lints to catch common mistakes and improve your Rust code.\n [Jump to usage instructions](#usage)\n \n ##Lints\n-There are 58 lints included in this crate:\n+There are 59 lints included in this crate:\n \n name                                                                                                   | default | meaning\n -------------------------------------------------------------------------------------------------------|---------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n@@ -63,6 +63,7 @@ name\n [type_complexity](https://github.com/Manishearth/rust-clippy/wiki#type_complexity)                     | warn    | usage of very complex types; recommends factoring out parts into `type` definitions\n [unicode_not_nfc](https://github.com/Manishearth/rust-clippy/wiki#unicode_not_nfc)                     | allow   | using a unicode literal not in NFC normal form (see http://www.unicode.org/reports/tr15/ for further information)\n [unit_cmp](https://github.com/Manishearth/rust-clippy/wiki#unit_cmp)                                   | warn    | comparing unit values (which is always `true` or `false`, respectively)\n+[unnecessary_mut_passed](https://github.com/Manishearth/rust-clippy/wiki#unnecessary_mut_passed)       | warn    | an argument is passed as a mutable reference although the function only demands an immutable reference\n [unused_collect](https://github.com/Manishearth/rust-clippy/wiki#unused_collect)                       | warn    | `collect()`ing an iterator without using the result; this is usually better written as a for loop\n [while_let_loop](https://github.com/Manishearth/rust-clippy/wiki#while_let_loop)                       | warn    | `loop { if let { ... } else break }` can be written as a `while let` loop\n [wrong_pub_self_convention](https://github.com/Manishearth/rust-clippy/wiki#wrong_pub_self_convention) | allow   | defining a public method named with an established prefix (like \"into_\") that takes `self` with the wrong convention"}, {"sha": "2f71d8cc9df7e8db19d33e3654610f078a1f2594", "filename": "src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b8cdefb6cfab11087943bb41824bb955c655daf1/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8cdefb6cfab11087943bb41824bb955c655daf1/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=b8cdefb6cfab11087943bb41824bb955c655daf1", "patch": "@@ -33,6 +33,7 @@ pub mod eta_reduction;\n pub mod identity_op;\n pub mod minmax;\n pub mod mut_mut;\n+pub mod mut_reference;\n pub mod len_zero;\n pub mod attrs;\n pub mod collapsible_if;\n@@ -66,6 +67,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_late_lint_pass(box eta_reduction::EtaPass);\n     reg.register_late_lint_pass(box identity_op::IdentityOp);\n     reg.register_late_lint_pass(box mut_mut::MutMut);\n+    reg.register_late_lint_pass(box mut_reference::UnnecessaryMutPassed);\n     reg.register_late_lint_pass(box len_zero::LenZero);\n     reg.register_late_lint_pass(box misc::CmpOwned);\n     reg.register_late_lint_pass(box attrs::AttrPass);\n@@ -138,6 +140,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n         misc::MODULO_ONE,\n         misc::REDUNDANT_PATTERN,\n         misc::TOPLEVEL_REF_ARG,\n+        mut_reference::UNNECESSARY_MUT_PASSED,\n         needless_bool::NEEDLESS_BOOL,\n         precedence::PRECEDENCE,\n         ranges::RANGE_STEP_BY_ZERO,"}, {"sha": "13cf1e1301e49f5e67b3739e19730467b9b5a5ed", "filename": "src/mut_reference.rs", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/b8cdefb6cfab11087943bb41824bb955c655daf1/src%2Fmut_reference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8cdefb6cfab11087943bb41824bb955c655daf1/src%2Fmut_reference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmut_reference.rs?ref=b8cdefb6cfab11087943bb41824bb955c655daf1", "patch": "@@ -0,0 +1,53 @@\n+use rustc::lint::*;\n+use rustc_front::hir::*;\n+use utils::span_lint;\n+use rustc::middle::ty::{TypeAndMut, TypeVariants};\n+\n+declare_lint! {\n+    pub UNNECESSARY_MUT_PASSED,\n+    Warn,\n+    \"an argument is passed as a mutable reference although the function only demands an \\\n+     immutable reference\"\n+}\n+\n+\n+#[derive(Copy,Clone)]\n+pub struct UnnecessaryMutPassed;\n+\n+impl LintPass for UnnecessaryMutPassed {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(UNNECESSARY_MUT_PASSED)\n+    }\n+}\n+\n+impl LateLintPass for UnnecessaryMutPassed {\n+    fn check_expr(&mut self, cx: &LateContext, e: &Expr) {\n+        if let &ExprCall(ref fn_expr, ref arguments) = &e.node {\n+\t\t\tlet borrowed_table = cx.tcx.tables.borrow();\n+\t\t\tlet funtion_type = match borrowed_table.node_types.get(&fn_expr.id) {\n+\t\t\t\tSome(funtion_type) => funtion_type,\n+\t\t\t\tNone => unreachable!(), // A function with unknown type is called.\n+\t\t\t\t                        // If this happened the compiler would have aborted the\n+\t\t\t\t\t\t\t\t\t\t// compilation long ago.\n+\t\t\t};\n+            if let TypeVariants::TyBareFn(_, ref b) = funtion_type.sty {\n+                let parameters = b.sig.skip_binder().inputs.clone();\n+                for (argument, parameter) in arguments.iter().zip(parameters.iter()) {\n+                    match parameter.sty {\n+\t\t\t\t\t\tTypeVariants::TyRef(_, TypeAndMut {ty: _, mutbl: MutImmutable}) | \n+\t\t\t\t\t\tTypeVariants::TyRawPtr(TypeAndMut {ty: _, mutbl: MutImmutable}) => {\n+\t\t\t\t\t\t\tif let Expr_::ExprAddrOf(MutMutable, _) = argument.node {\n+\t\t\t\t\t\t\t\tif let ExprPath(_, path) = fn_expr.node.clone() {\n+\t\t\t\t\t\t\t\t\tspan_lint(cx, UNNECESSARY_MUT_PASSED, \n+                                              argument.span, &format!(\"This argument of the \\\n+                                              function \\\"{}\\\" doesn't need to be mutable\", path));\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\t_ => {}\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}"}]}