{"sha": "a27f5239bdeb48055b40ccf3c3cd176e1971b2ac", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyN2Y1MjM5YmRlYjQ4MDU1YjQwY2NmM2MzY2QxNzZlMTk3MWIyYWM=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2012-11-10T01:50:23Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-11-21T00:39:31Z"}, "message": "libcore: Add stat methods to paths\n\nShould we return the posix types, or should we just use i64s?\nShould we expose platform specific stat fields?", "tree": {"sha": "a28b295bebe0baeef8ff207c4d04651fdd3bba55", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a28b295bebe0baeef8ff207c4d04651fdd3bba55"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a27f5239bdeb48055b40ccf3c3cd176e1971b2ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a27f5239bdeb48055b40ccf3c3cd176e1971b2ac", "html_url": "https://github.com/rust-lang/rust/commit/a27f5239bdeb48055b40ccf3c3cd176e1971b2ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a27f5239bdeb48055b40ccf3c3cd176e1971b2ac/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "20c11ca7577480baadd2fb905bdeff3c1c17604a", "url": "https://api.github.com/repos/rust-lang/rust/commits/20c11ca7577480baadd2fb905bdeff3c1c17604a", "html_url": "https://github.com/rust-lang/rust/commit/20c11ca7577480baadd2fb905bdeff3c1c17604a"}], "stats": {"total": 290, "additions": 289, "deletions": 1}, "files": [{"sha": "a31be1ab15be35a88f4a05eea78410d23158f04f", "filename": "src/libcore/path.rs", "status": "modified", "additions": 265, "deletions": 1, "changes": 266, "blob_url": "https://github.com/rust-lang/rust/blob/a27f5239bdeb48055b40ccf3c3cd176e1971b2ac/src%2Flibcore%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a27f5239bdeb48055b40ccf3c3cd176e1971b2ac/src%2Flibcore%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpath.rs?ref=a27f5239bdeb48055b40ccf3c3cd176e1971b2ac", "patch": "@@ -68,6 +68,270 @@ pub pure fn Path(s: &str) -> Path {\n     PosixPath(s)\n }\n \n+#[cfg(target_os = \"linux\")]\n+mod stat {\n+    #[cfg(target_arch = \"x86\")]\n+    pub mod arch {\n+        pub fn default_stat() -> libc::stat {\n+            libc::stat {\n+                st_dev: 0,\n+                __pad1: 0,\n+                st_ino: 0,\n+                st_mode: 0,\n+                st_nlink: 0,\n+                st_uid: 0,\n+                st_gid: 0,\n+                st_rdev: 0,\n+                __pad2: 0,\n+                st_size: 0,\n+                st_blksize: 0,\n+                st_blocks: 0,\n+                st_atime: 0,\n+                st_atime_nsec: 0,\n+                st_mtime: 0,\n+                st_mtime_nsec: 0,\n+                st_ctime: 0,\n+                st_ctime_nsec: 0,\n+                __unused4: 0,\n+                __unused5: 0,\n+            }\n+        }\n+    }\n+\n+    #[cfg(target_arch = \"x86_64\")]\n+    pub mod arch {\n+        pub fn default_stat() -> libc::stat {\n+            libc::stat {\n+                st_dev: 0,\n+                st_ino: 0,\n+                st_nlink: 0,\n+                st_mode: 0,\n+                st_uid: 0,\n+                st_gid: 0,\n+                __pad0: 0,\n+                st_rdev: 0,\n+                st_size: 0,\n+                st_blksize: 0,\n+                st_blocks: 0,\n+                st_atime: 0,\n+                st_atime_nsec: 0,\n+                st_mtime: 0,\n+                st_mtime_nsec: 0,\n+                st_ctime: 0,\n+                st_ctime_nsec: 0,\n+                __unused: [0, 0, 0],\n+            }\n+        }\n+    }\n+}\n+\n+#[cfg(target_os = \"freebsd\")]\n+mod stat {\n+    #[cfg(target_arch = \"x86_64\")]\n+    pub mod arch {\n+        pub fn default_stat() -> libc::stat {\n+            libc::stat {\n+                st_dev: 0,\n+                st_ino: 0,\n+                st_mode: 0,\n+                st_nlink: 0,\n+                st_uid: 0,\n+                st_gid: 0,\n+                st_rdev: 0,\n+                st_atime: 0,\n+                st_atime_nsec: 0,\n+                st_mtime: 0,\n+                st_mtime_nsec: 0,\n+                st_ctime: 0,\n+                st_ctime_nsec: 0,\n+                st_size: 0,\n+                st_blocks: 0,\n+                st_blksize: 0,\n+                st_flags: 0,\n+                st_gen: 0,\n+                st_lspare: 0,\n+                st_birthtime: 0,\n+                st_birthtime_nsec: 0,\n+                __unused: [0, 0],\n+            }\n+        }\n+    }\n+}\n+\n+#[cfg(target_os = \"macos\")]\n+mod stat {\n+    pub mod arch {\n+        pub fn default_stat() -> libc::stat {\n+            libc::stat {\n+                st_dev: 0,\n+                st_mode: 0,\n+                st_nlink: 0,\n+                st_ino: 0,\n+                st_uid: 0,\n+                st_gid: 0,\n+                st_rdev: 0,\n+                st_atime: 0,\n+                st_atime_nsec: 0,\n+                st_mtime: 0,\n+                st_mtime_nsec: 0,\n+                st_ctime: 0,\n+                st_ctime_nsec: 0,\n+                st_birthtime: 0,\n+                st_birthtime_nsec: 0,\n+                st_size: 0,\n+                st_blocks: 0,\n+                st_blksize: 0,\n+                st_flags: 0,\n+                st_gen: 0,\n+                st_lspare: 0,\n+                st_qspare: [0, 0],\n+            }\n+        }\n+    }\n+}\n+\n+#[cfg(target_os = \"windows\")]\n+mod stat {\n+    pub mod arch {\n+        pub fn default_stat() -> libc::stat {\n+            libc::stat {\n+                st_dev: 0,\n+                st_ino: 0,\n+                st_mode: 0,\n+                st_nlink: 0,\n+                st_uid: 0,\n+                st_gid: 0,\n+                st_rdev: 0,\n+                st_size: 0,\n+                st_atime: 0,\n+                st_mtime: 0,\n+                st_ctime: 0,\n+            }\n+        }\n+    }\n+}\n+\n+\n+impl Path {\n+    fn stat(&self) -> Option<libc::stat> {\n+         do str::as_c_str(self.to_str()) |buf| {\n+            let mut st = stat::arch::default_stat();\n+            let r = libc::stat(buf, ptr::mut_addr_of(&st));\n+\n+            if r == 0 { Some(move st) } else { None }\n+        }\n+    }\n+\n+    fn lstat(&self) -> Option<libc::stat> {\n+         do str::as_c_str(self.to_str()) |buf| {\n+            let mut st = stat::arch::default_stat();\n+            let r = libc::lstat(buf, ptr::mut_addr_of(&st));\n+\n+            if r == 0 { Some(move st) } else { None }\n+        }\n+    }\n+\n+    fn exists(&self) -> bool {\n+        match self.stat() {\n+            None => false,\n+            Some(_) => true,\n+        }\n+    }\n+\n+    fn get_size(&self) -> Option<i64> {\n+        match self.stat() {\n+            None => None,\n+            Some(ref st) => Some(st.st_size as i64),\n+        }\n+    }\n+\n+    fn get_mode(&self) -> Option<uint> {\n+        match self.stat() {\n+            None => None,\n+            Some(ref st) => Some(st.st_mode as uint),\n+        }\n+    }\n+}\n+\n+#[cfg(target_os = \"freebsd\")]\n+#[cfg(target_os = \"linux\")]\n+#[cfg(target_os = \"macos\")]\n+impl Path {\n+    fn get_atime(&self) -> Option<(i64, int)> {\n+        match self.stat() {\n+            None => None,\n+            Some(ref st) => {\n+                Some((st.st_atime as i64,\n+                      st.st_atime_nsec as int))\n+            }\n+        }\n+    }\n+\n+    fn get_mtime(&self) -> Option<(i64, int)> {\n+        match self.stat() {\n+            None => None,\n+            Some(ref st) => {\n+                Some((st.st_mtime as i64,\n+                      st.st_mtime_nsec as int))\n+            }\n+        }\n+    }\n+\n+    fn get_ctime(&self) -> Option<(i64, int)> {\n+        match self.stat() {\n+            None => None,\n+            Some(ref st) => {\n+                Some((st.st_ctime as i64,\n+                      st.st_ctime_nsec as int))\n+            }\n+        }\n+    }\n+}\n+\n+#[cfg(target_os = \"freebsd\")]\n+#[cfg(target_os = \"macos\")]\n+impl Path {\n+    fn get_birthtime(&self) -> Option<(i64, int)> {\n+        match self.stat() {\n+            None => None,\n+            Some(ref st) => {\n+                Some((st.st_birthtime as i64,\n+                      st.st_birthtime_nsec as int))\n+            }\n+        }\n+    }\n+}\n+\n+#[cfg(target_os = \"win32\")]\n+impl Path {\n+    fn get_atime(&self) -> Option<(i64, int)> {\n+        match self.stat() {\n+            None => None,\n+            Some(ref st) => {\n+                Some((st.st_atime as i64, 0))\n+            }\n+        }\n+    }\n+\n+    fn get_mtime(&self) -> Option<(i64, int)> {\n+        match self.stat() {\n+            None => None,\n+            Some(ref st) => {\n+                Some((st.st_mtime as i64, 0))\n+            }\n+        }\n+    }\n+\n+    fn get_ctime(&self) -> Option<(i64, int)> {\n+        match self.stat() {\n+            None => None,\n+            Some(ref st) => {\n+                Some((st.st_ctime as i64, 0))\n+            }\n+        }\n+    }\n+}\n+\n impl PosixPath : ToStr {\n     pure fn to_str() -> ~str {\n         let mut s = ~\"\";\n@@ -539,7 +803,7 @@ mod windows {\n     }\n }\n \n-#[cfg(tests)]\n+#[cfg(test)]\n mod tests {\n     #[test]\n     fn test_double_slash_collapsing() {"}, {"sha": "2036e1bae783a62d02ad3efb32dedea8420ecbcc", "filename": "src/test/run-pass/stat.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a27f5239bdeb48055b40ccf3c3cd176e1971b2ac/src%2Ftest%2Frun-pass%2Fstat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a27f5239bdeb48055b40ccf3c3cd176e1971b2ac/src%2Ftest%2Frun-pass%2Fstat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstat.rs?ref=a27f5239bdeb48055b40ccf3c3cd176e1971b2ac", "patch": "@@ -0,0 +1,24 @@\n+extern mod std;\n+use io::WriterUtil;\n+use std::tempfile;\n+\n+fn main() {\n+    let dir = option::unwrap(tempfile::mkdtemp(&Path(\".\"), \"\"));\n+    let path = dir.with_filename(\"file\");\n+\n+    {\n+        match io::file_writer(&path, [io::Create, io::Truncate]) {\n+            Err(e) => fail e,\n+            Ok(f) => {\n+                for uint::range(0, 1000) |_i| {\n+                    f.write_u8(0);\n+                }\n+            }\n+        }\n+    }\n+\n+    assert path.exists();\n+    assert path.get_size() == Some(1000);\n+\n+    os::remove_dir(&dir);\n+}"}]}