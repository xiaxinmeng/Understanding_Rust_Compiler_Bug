{"sha": "dadfa13f47809e1d4a1b896db727996c1519036f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhZGZhMTNmNDc4MDllMWQ0YTFiODk2ZGI3Mjc5OTZjMTUxOTAzNmY=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-05-10T18:13:25Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-06-11T20:24:35Z"}, "message": "Fix extern prelude failure in rustdoc", "tree": {"sha": "a322da7dfe4b1ae1d8b3a58ac7913fdf47da44df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a322da7dfe4b1ae1d8b3a58ac7913fdf47da44df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dadfa13f47809e1d4a1b896db727996c1519036f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dadfa13f47809e1d4a1b896db727996c1519036f", "html_url": "https://github.com/rust-lang/rust/commit/dadfa13f47809e1d4a1b896db727996c1519036f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dadfa13f47809e1d4a1b896db727996c1519036f/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b7c9e756e8bee2efd4f6929c79f9e3ed9115689", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b7c9e756e8bee2efd4f6929c79f9e3ed9115689", "html_url": "https://github.com/rust-lang/rust/commit/0b7c9e756e8bee2efd4f6929c79f9e3ed9115689"}], "stats": {"total": 20, "additions": 17, "deletions": 3}, "files": [{"sha": "f831b006642bbaec4034dc2701292619611670e8", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dadfa13f47809e1d4a1b896db727996c1519036f/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dadfa13f47809e1d4a1b896db727996c1519036f/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=dadfa13f47809e1d4a1b896db727996c1519036f", "patch": "@@ -494,6 +494,13 @@ impl Input {\n             Input::Str { .. } => \"rust_out\".to_string(),\n         }\n     }\n+\n+    pub fn get_input(&mut self) -> Option<&mut String> {\n+        match *self {\n+            Input::File(_) => None,\n+            Input::Str { ref mut input, .. } => Some(input),\n+        }\n+    }\n }\n \n #[derive(Clone)]"}, {"sha": "8ff250dfa5c50cee953a8ac09af9f7c97acd3c3c", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dadfa13f47809e1d4a1b896db727996c1519036f/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dadfa13f47809e1d4a1b896db727996c1519036f/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=dadfa13f47809e1d4a1b896db727996c1519036f", "patch": "@@ -1437,6 +1437,9 @@ pub struct Resolver<'a> {\n     current_type_ascription: Vec<Span>,\n \n     injected_crate: Option<Module<'a>>,\n+\n+    /// Only supposed to be used by rustdoc, otherwise should be false.\n+    pub ignore_extern_prelude_feature: bool,\n }\n \n /// Nothing really interesting here, it just provides memory for the rest of the crate.\n@@ -1718,6 +1721,7 @@ impl<'a> Resolver<'a> {\n             unused_macros: FxHashSet(),\n             current_type_ascription: Vec::new(),\n             injected_crate: None,\n+            ignore_extern_prelude_feature: false,\n         }\n     }\n \n@@ -1891,7 +1895,8 @@ impl<'a> Resolver<'a> {\n         if !module.no_implicit_prelude {\n             // `record_used` means that we don't try to load crates during speculative resolution\n             if record_used && ns == TypeNS && self.extern_prelude.contains(&ident.name) {\n-                if !self.session.features_untracked().extern_prelude {\n+                if !self.session.features_untracked().extern_prelude &&\n+                   !self.ignore_extern_prelude_feature {\n                     feature_err(&self.session.parse_sess, \"extern_prelude\",\n                                 ident.span, GateIssue::Language,\n                                 \"access to extern crates through prelude is experimental\").emit();"}, {"sha": "54647b45159e24a7087e751e12e1909a058a11bf", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dadfa13f47809e1d4a1b896db727996c1519036f/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dadfa13f47809e1d4a1b896db727996c1519036f/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=dadfa13f47809e1d4a1b896db727996c1519036f", "patch": "@@ -1103,7 +1103,7 @@ fn resolve(cx: &DocContext, path_str: &str, is_val: bool) -> Result<(Def, Option\n             // early return and try looking for the trait\n             let value = match result.def {\n                 Def::Method(_) | Def::AssociatedConst(_) => true,\n-                Def::AssociatedTy(_)  => false,\n+                Def::AssociatedTy(_) => false,\n                 Def::Variant(_) => return handle_variant(cx, result.def),\n                 // not a trait item, just return what we found\n                 _ => return Ok((result.def, None))"}, {"sha": "9b5e1074cfa342905b758416037fe7e1ec7e4ada", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dadfa13f47809e1d4a1b896db727996c1519036f/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dadfa13f47809e1d4a1b896db727996c1519036f/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=dadfa13f47809e1d4a1b896db727996c1519036f", "patch": "@@ -250,10 +250,12 @@ pub fn run_core(search_paths: SearchPaths,\n                                                         |_| Ok(()));\n         let driver::InnerExpansionResult {\n             mut hir_forest,\n-            resolver,\n+            mut resolver,\n             ..\n         } = abort_on_err(result, &sess);\n \n+        resolver.ignore_extern_prelude_feature = true;\n+\n         // We need to hold on to the complete resolver, so we clone everything\n         // for the analysis passes to use. Suboptimal, but necessary in the\n         // current architecture."}]}