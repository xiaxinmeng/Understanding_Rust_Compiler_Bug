{"sha": "405642b853413705e660c011a5c7807f42e56479", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwNTY0MmI4NTM0MTM3MDVlNjYwYzAxMWE1Yzc4MDdmNDJlNTY0Nzk=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-07-26T13:01:50Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-07-26T13:01:50Z"}, "message": "Handle the extra argument for #[track_caller] earlier", "tree": {"sha": "b389ed6f55cc8d3d5a5ac494cec1f7b8e891cb6b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b389ed6f55cc8d3d5a5ac494cec1f7b8e891cb6b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/405642b853413705e660c011a5c7807f42e56479", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/405642b853413705e660c011a5c7807f42e56479", "html_url": "https://github.com/rust-lang/rust/commit/405642b853413705e660c011a5c7807f42e56479", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/405642b853413705e660c011a5c7807f42e56479/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3361e349fa7c378c844458487b600dd57e566086", "url": "https://api.github.com/repos/rust-lang/rust/commits/3361e349fa7c378c844458487b600dd57e566086", "html_url": "https://github.com/rust-lang/rust/commit/3361e349fa7c378c844458487b600dd57e566086"}], "stats": {"total": 28, "additions": 12, "deletions": 16}, "files": [{"sha": "1c4be84f4e17f51ee59d33770cb2bc8978d124ca", "filename": "src/abi/mod.rs", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/405642b853413705e660c011a5c7807f42e56479/src%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/405642b853413705e660c011a5c7807f42e56479/src%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fmod.rs?ref=405642b853413705e660c011a5c7807f42e56479", "patch": "@@ -359,7 +359,7 @@ pub(crate) fn codegen_terminator_call<'tcx>(\n     }\n \n     // Unpack arguments tuple for closures\n-    let args = if fn_sig.abi == Abi::RustCall {\n+    let mut args = if fn_sig.abi == Abi::RustCall {\n         assert_eq!(args.len(), 2, \"rust-call abi requires two arguments\");\n         let self_arg = codegen_operand(fx, &args[0]);\n         let pack_arg = codegen_operand(fx, &args[1]);\n@@ -379,6 +379,15 @@ pub(crate) fn codegen_terminator_call<'tcx>(\n         args.iter().map(|arg| codegen_operand(fx, arg)).collect::<Vec<_>>()\n     };\n \n+    // Pass the caller location for `#[track_caller]`.\n+    if instance.map(|inst| inst.def.requires_caller_location(fx.tcx)).unwrap_or(false) {\n+        let caller_location = fx.get_caller_location(span);\n+        args.push(caller_location);\n+    }\n+\n+    let args = args;\n+    assert_eq!(fn_abi.args.len(), args.len());\n+\n     enum CallTarget {\n         Direct(FuncRef),\n         Indirect(SigRef, Value),\n@@ -425,8 +434,7 @@ pub(crate) fn codegen_terminator_call<'tcx>(\n \n     let ret_place = destination.map(|(place, _)| place);\n     self::returning::codegen_with_call_return_arg(fx, &fn_abi.ret, ret_place, |fx, return_ptr| {\n-        let regular_args_count = args.len();\n-        let mut call_args: Vec<Value> = return_ptr\n+        let call_args = return_ptr\n             .into_iter()\n             .chain(first_arg_override.into_iter())\n             .chain(\n@@ -436,19 +444,7 @@ pub(crate) fn codegen_terminator_call<'tcx>(\n                     .map(|(i, arg)| adjust_arg_for_abi(fx, arg, &fn_abi.args[i]).into_iter())\n                     .flatten(),\n             )\n-            .collect::<Vec<_>>();\n-\n-        if instance.map(|inst| inst.def.requires_caller_location(fx.tcx)).unwrap_or(false) {\n-            // Pass the caller location for `#[track_caller]`.\n-            let caller_location = fx.get_caller_location(span);\n-            call_args.extend(\n-                adjust_arg_for_abi(fx, caller_location, &fn_abi.args[regular_args_count])\n-                    .into_iter(),\n-            );\n-            assert_eq!(fn_abi.args.len(), regular_args_count + 1);\n-        } else {\n-            assert_eq!(fn_abi.args.len(), regular_args_count);\n-        }\n+            .collect::<Vec<Value>>();\n \n         let call_inst = match func_ref {\n             CallTarget::Direct(func_ref) => fx.bcx.ins().call(func_ref, &call_args),"}]}