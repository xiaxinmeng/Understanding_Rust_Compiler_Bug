{"sha": "a2a387c7332f568fcc27186578254f6923994742", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyYTM4N2M3MzMyZjU2OGZjYzI3MTg2NTc4MjU0ZjY5MjM5OTQ3NDI=", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2020-08-21T20:02:42Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2020-08-22T09:44:30Z"}, "message": "compiletest: fix a couple clippy lint findings", "tree": {"sha": "7b39b22acdc8bd708034b96fd0983a402ddd7d00", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b39b22acdc8bd708034b96fd0983a402ddd7d00"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a2a387c7332f568fcc27186578254f6923994742", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a2a387c7332f568fcc27186578254f6923994742", "html_url": "https://github.com/rust-lang/rust/commit/a2a387c7332f568fcc27186578254f6923994742", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a2a387c7332f568fcc27186578254f6923994742/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de521cbb303c08febd9fa3755caccd4f3e491ea3", "url": "https://api.github.com/repos/rust-lang/rust/commits/de521cbb303c08febd9fa3755caccd4f3e491ea3", "html_url": "https://github.com/rust-lang/rust/commit/de521cbb303c08febd9fa3755caccd4f3e491ea3"}], "stats": {"total": 131, "additions": 59, "deletions": 72}, "files": [{"sha": "054235ec16dcf92c435c579fbdd3079361c424d1", "filename": "src/tools/compiletest/src/errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a2a387c7332f568fcc27186578254f6923994742/src%2Ftools%2Fcompiletest%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2a387c7332f568fcc27186578254f6923994742/src%2Ftools%2Fcompiletest%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Ferrors.rs?ref=a2a387c7332f568fcc27186578254f6923994742", "patch": "@@ -148,7 +148,7 @@ fn parse_expected(\n \n     // If we find `//~ ERROR foo` or something like that, skip the first word.\n     let kind = first_word.parse::<ErrorKind>().ok();\n-    if let Some(_) = kind {\n+    if kind.is_some() {\n         msg = &msg.trim_start().split_at(first_word.len()).1;\n     }\n "}, {"sha": "0efa668ecc88b373dd8db2f83e2189579b4446c4", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a2a387c7332f568fcc27186578254f6923994742/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2a387c7332f568fcc27186578254f6923994742/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=a2a387c7332f568fcc27186578254f6923994742", "patch": "@@ -173,10 +173,8 @@ impl EarlyProps {\n                     // Ignore if actual version is smaller the minimum required\n                     // version\n                     actual_version < min_version\n-                } else if line.starts_with(\"rust-lldb\") && !config.lldb_native_rust {\n-                    true\n                 } else {\n-                    false\n+                    line.starts_with(\"rust-lldb\") && !config.lldb_native_rust\n                 }\n             } else {\n                 false\n@@ -657,7 +655,6 @@ fn iter_header<R: Read>(testfile: &Path, cfg: Option<&str>, rdr: R, it: &mut dyn\n             it(ln[comment.len()..].trim_start());\n         }\n     }\n-    return;\n }\n \n impl Config {\n@@ -819,7 +816,7 @@ impl Config {\n         let name = line[prefix.len() + 1..].split(&[':', ' '][..]).next().unwrap();\n \n         let is_match = name == \"test\" ||\n-            &self.target == name ||                             // triple\n+            self.target == name ||                              // triple\n             util::matches_os(&self.target, name) ||             // target\n             util::matches_env(&self.target, name) ||            // env\n             self.target.ends_with(name) ||                      // target and env\n@@ -857,10 +854,7 @@ impl Config {\n         // Ensure the directive is a whole word. Do not match \"ignore-x86\" when\n         // the line says \"ignore-x86_64\".\n         line.starts_with(directive)\n-            && match line.as_bytes().get(directive.len()) {\n-                None | Some(&b' ') | Some(&b':') => true,\n-                _ => false,\n-            }\n+            && matches!(line.as_bytes().get(directive.len()), None | Some(&b' ') | Some(&b':'))\n     }\n \n     pub fn parse_name_value_directive(&self, line: &str, directive: &str) -> Option<String> {\n@@ -901,9 +895,9 @@ impl Config {\n }\n \n fn expand_variables(mut value: String, config: &Config) -> String {\n-    const CWD: &'static str = \"{{cwd}}\";\n-    const SRC_BASE: &'static str = \"{{src-base}}\";\n-    const BUILD_BASE: &'static str = \"{{build-base}}\";\n+    const CWD: &str = \"{{cwd}}\";\n+    const SRC_BASE: &str = \"{{src-base}}\";\n+    const BUILD_BASE: &str = \"{{build-base}}\";\n \n     if value.contains(CWD) {\n         let cwd = env::current_dir().unwrap();"}, {"sha": "6a03a76c566ef575313226ac9eee13707533942c", "filename": "src/tools/compiletest/src/json.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a2a387c7332f568fcc27186578254f6923994742/src%2Ftools%2Fcompiletest%2Fsrc%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2a387c7332f568fcc27186578254f6923994742/src%2Ftools%2Fcompiletest%2Fsrc%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fjson.rs?ref=a2a387c7332f568fcc27186578254f6923994742", "patch": "@@ -75,7 +75,7 @@ pub fn extract_rendered(output: &str) -> String {\n             if line.starts_with('{') {\n                 if let Ok(diagnostic) = serde_json::from_str::<Diagnostic>(line) {\n                     diagnostic.rendered\n-                } else if let Ok(_) = serde_json::from_str::<ArtifactNotification>(line) {\n+                } else if serde_json::from_str::<ArtifactNotification>(line).is_ok() {\n                     // Ignore the notification.\n                     None\n                 } else {"}, {"sha": "adf2fa7fd8ecc3d0772a33869ee24245d9d81843", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 17, "deletions": 23, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/a2a387c7332f568fcc27186578254f6923994742/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2a387c7332f568fcc27186578254f6923994742/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=a2a387c7332f568fcc27186578254f6923994742", "patch": "@@ -240,7 +240,7 @@ pub fn parse_config(args: Vec<String>) -> Config {\n         cc: matches.opt_str(\"cc\").unwrap(),\n         cxx: matches.opt_str(\"cxx\").unwrap(),\n         cflags: matches.opt_str(\"cflags\").unwrap(),\n-        ar: matches.opt_str(\"ar\").unwrap_or(\"ar\".into()),\n+        ar: matches.opt_str(\"ar\").unwrap_or_else(|| String::from(\"ar\")),\n         linker: matches.opt_str(\"linker\"),\n         llvm_components: matches.opt_str(\"llvm-components\").unwrap(),\n         nodejs: matches.opt_str(\"nodejs\"),\n@@ -361,17 +361,13 @@ pub fn run_tests(config: Config) {\n }\n \n fn configure_cdb(config: &Config) -> Option<Config> {\n-    if config.cdb.is_none() {\n-        return None;\n-    }\n+    config.cdb.as_ref()?;\n \n     Some(Config { debugger: Some(Debugger::Cdb), ..config.clone() })\n }\n \n fn configure_gdb(config: &Config) -> Option<Config> {\n-    if config.gdb_version.is_none() {\n-        return None;\n-    }\n+    config.gdb_version?;\n \n     if util::matches_env(&config.target, \"msvc\") {\n         return None;\n@@ -405,9 +401,7 @@ fn configure_gdb(config: &Config) -> Option<Config> {\n }\n \n fn configure_lldb(config: &Config) -> Option<Config> {\n-    if config.lldb_python_dir.is_none() {\n-        return None;\n-    }\n+    config.lldb_python_dir.as_ref()?;\n \n     if let Some(350) = config.lldb_version {\n         println!(\n@@ -455,7 +449,7 @@ pub fn make_tests(config: &Config, tests: &mut Vec<test::TestDescAndFn>) {\n     debug!(\"making tests from {:?}\", config.src_base.display());\n     let inputs = common_inputs_stamp(config);\n     collect_tests_from_dir(config, &config.src_base, &PathBuf::new(), &inputs, tests)\n-        .expect(&format!(\"Could not read tests from {}\", config.src_base.display()));\n+        .unwrap_or_else(|_| panic!(\"Could not read tests from {}\", config.src_base.display()));\n }\n \n /// Returns a stamp constructed from input files common to all test cases.\n@@ -588,7 +582,7 @@ fn make_test(config: &Config, testpaths: &TestPaths, inputs: &Stamp) -> Vec<test\n     let revisions = if early_props.revisions.is_empty() || config.mode == Mode::Incremental {\n         vec![None]\n     } else {\n-        early_props.revisions.iter().map(|r| Some(r)).collect()\n+        early_props.revisions.iter().map(Some).collect()\n     };\n     revisions\n         .into_iter()\n@@ -735,24 +729,24 @@ fn make_test_closure(\n \n /// Returns `true` if the given target is an Android target for the\n /// purposes of GDB testing.\n-fn is_android_gdb_target(target: &String) -> bool {\n-    match &target[..] {\n-        \"arm-linux-androideabi\" | \"armv7-linux-androideabi\" | \"aarch64-linux-android\" => true,\n-        _ => false,\n-    }\n+fn is_android_gdb_target(target: &str) -> bool {\n+    matches!(\n+        &target[..],\n+        \"arm-linux-androideabi\" | \"armv7-linux-androideabi\" | \"aarch64-linux-android\"\n+    )\n }\n \n /// Returns `true` if the given target is a MSVC target for the purpouses of CDB testing.\n-fn is_pc_windows_msvc_target(target: &String) -> bool {\n+fn is_pc_windows_msvc_target(target: &str) -> bool {\n     target.ends_with(\"-pc-windows-msvc\")\n }\n \n-fn find_cdb(target: &String) -> Option<OsString> {\n+fn find_cdb(target: &str) -> Option<OsString> {\n     if !(cfg!(windows) && is_pc_windows_msvc_target(target)) {\n         return None;\n     }\n \n-    let pf86 = env::var_os(\"ProgramFiles(x86)\").or(env::var_os(\"ProgramFiles\"))?;\n+    let pf86 = env::var_os(\"ProgramFiles(x86)\").or_else(|| env::var_os(\"ProgramFiles\"))?;\n     let cdb_arch = if cfg!(target_arch = \"x86\") {\n         \"x86\"\n     } else if cfg!(target_arch = \"x86_64\") {\n@@ -779,14 +773,14 @@ fn find_cdb(target: &String) -> Option<OsString> {\n }\n \n /// Returns Path to CDB\n-fn analyze_cdb(cdb: Option<String>, target: &String) -> Option<OsString> {\n-    cdb.map(|s| OsString::from(s)).or(find_cdb(target))\n+fn analyze_cdb(cdb: Option<String>, target: &str) -> Option<OsString> {\n+    cdb.map(OsString::from).or_else(|| find_cdb(target))\n }\n \n /// Returns (Path to GDB, GDB Version, GDB has Rust Support)\n fn analyze_gdb(\n     gdb: Option<String>,\n-    target: &String,\n+    target: &str,\n     android_cross_path: &PathBuf,\n ) -> (Option<String>, Option<u32>, bool) {\n     #[cfg(not(windows))]"}, {"sha": "124a9adcab91a786600cc65a4460b97a1ecce057", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 25, "deletions": 26, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/a2a387c7332f568fcc27186578254f6923994742/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2a387c7332f568fcc27186578254f6923994742/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=a2a387c7332f568fcc27186578254f6923994742", "patch": "@@ -114,7 +114,7 @@ pub struct Mismatch {\n \n impl Mismatch {\n     fn new(line_number: u32) -> Mismatch {\n-        Mismatch { line_number: line_number, lines: Vec::new() }\n+        Mismatch { line_number, lines: Vec::new() }\n     }\n }\n \n@@ -199,7 +199,7 @@ fn write_diff(expected: &str, actual: &str, context_size: usize) -> String {\n                 }\n             }\n         }\n-        writeln!(output, \"\").unwrap();\n+        writeln!(output).unwrap();\n     }\n     output\n }\n@@ -230,7 +230,7 @@ pub fn run(config: Config, testpaths: &TestPaths, revision: Option<&str>) {\n     debug!(\"running {:?}\", testpaths.file.display());\n     let props = TestProps::from_file(&testpaths.file, revision, &config);\n \n-    let cx = TestCx { config: &config, props: &props, testpaths, revision: revision };\n+    let cx = TestCx { config: &config, props: &props, testpaths, revision };\n     create_dir_all(&cx.output_base_dir()).unwrap();\n \n     if config.mode == Incremental {\n@@ -578,8 +578,8 @@ impl<'test> TestCx<'test> {\n         if self.props.pp_exact.is_some() {\n             // Now we have to care about line endings\n             let cr = \"\\r\".to_owned();\n-            actual = actual.replace(&cr, \"\").to_owned();\n-            expected = expected.replace(&cr, \"\").to_owned();\n+            actual = actual.replace(&cr, \"\");\n+            expected = expected.replace(&cr, \"\");\n         }\n \n         self.compare_source(&expected, &actual);\n@@ -740,7 +740,7 @@ impl<'test> TestCx<'test> {\n         let exe_file = self.make_exe_name();\n \n         let prefixes = {\n-            static PREFIXES: &'static [&'static str] = &[\"cdb\", \"cdbg\"];\n+            static PREFIXES: &[&str] = &[\"cdb\", \"cdbg\"];\n             // No \"native rust support\" variation for CDB yet.\n             PREFIXES\n         };\n@@ -811,12 +811,12 @@ impl<'test> TestCx<'test> {\n     fn run_debuginfo_gdb_test_no_opt(&self) {\n         let prefixes = if self.config.gdb_native_rust {\n             // GDB with Rust\n-            static PREFIXES: &'static [&'static str] = &[\"gdb\", \"gdbr\"];\n+            static PREFIXES: &[&str] = &[\"gdb\", \"gdbr\"];\n             println!(\"NOTE: compiletest thinks it is using GDB with native rust support\");\n             PREFIXES\n         } else {\n             // Generic GDB\n-            static PREFIXES: &'static [&'static str] = &[\"gdb\", \"gdbg\"];\n+            static PREFIXES: &[&str] = &[\"gdb\", \"gdbg\"];\n             println!(\"NOTE: compiletest thinks it is using GDB without native rust support\");\n             PREFIXES\n         };\n@@ -875,12 +875,12 @@ impl<'test> TestCx<'test> {\n                 .arg(&exe_file)\n                 .arg(&self.config.adb_test_dir)\n                 .status()\n-                .expect(&format!(\"failed to exec `{:?}`\", adb_path));\n+                .unwrap_or_else(|_| panic!(\"failed to exec `{:?}`\", adb_path));\n \n             Command::new(adb_path)\n                 .args(&[\"forward\", \"tcp:5039\", \"tcp:5039\"])\n                 .status()\n-                .expect(&format!(\"failed to exec `{:?}`\", adb_path));\n+                .unwrap_or_else(|_| panic!(\"failed to exec `{:?}`\", adb_path));\n \n             let adb_arg = format!(\n                 \"export LD_LIBRARY_PATH={}; \\\n@@ -897,7 +897,7 @@ impl<'test> TestCx<'test> {\n                 .stdout(Stdio::piped())\n                 .stderr(Stdio::inherit())\n                 .spawn()\n-                .expect(&format!(\"failed to exec `{:?}`\", adb_path));\n+                .unwrap_or_else(|_| panic!(\"failed to exec `{:?}`\", adb_path));\n \n             // Wait for the gdbserver to print out \"Listening on port ...\"\n             // at which point we know that it's started and then we can\n@@ -922,7 +922,7 @@ impl<'test> TestCx<'test> {\n             let Output { status, stdout, stderr } = Command::new(&gdb_path)\n                 .args(debugger_opts)\n                 .output()\n-                .expect(&format!(\"failed to exec `{:?}`\", gdb_path));\n+                .unwrap_or_else(|_| panic!(\"failed to exec `{:?}`\", gdb_path));\n             let cmdline = {\n                 let mut gdb = Command::new(&format!(\"{}-gdb\", self.config.target));\n                 gdb.args(debugger_opts);\n@@ -1063,11 +1063,11 @@ impl<'test> TestCx<'test> {\n         }\n \n         let prefixes = if self.config.lldb_native_rust {\n-            static PREFIXES: &'static [&'static str] = &[\"lldb\", \"lldbr\"];\n+            static PREFIXES: &[&str] = &[\"lldb\", \"lldbr\"];\n             println!(\"NOTE: compiletest thinks it is using LLDB with native rust support\");\n             PREFIXES\n         } else {\n-            static PREFIXES: &'static [&'static str] = &[\"lldb\", \"lldbg\"];\n+            static PREFIXES: &[&str] = &[\"lldb\", \"lldbg\"];\n             println!(\"NOTE: compiletest thinks it is using LLDB without native rust support\");\n             PREFIXES\n         };\n@@ -1842,8 +1842,8 @@ impl<'test> TestCx<'test> {\n \n         // Need to be sure to put both the lib_path and the aux path in the dylib\n         // search path for the child.\n-        let mut path = env::split_paths(&env::var_os(dylib_env_var()).unwrap_or(OsString::new()))\n-            .collect::<Vec<_>>();\n+        let mut path =\n+            env::split_paths(&env::var_os(dylib_env_var()).unwrap_or_default()).collect::<Vec<_>>();\n         if let Some(p) = aux_path {\n             path.insert(0, PathBuf::from(p))\n         }\n@@ -1854,7 +1854,7 @@ impl<'test> TestCx<'test> {\n         command.env(dylib_env_var(), newpath);\n \n         let mut child = disable_error_reporting(|| command.spawn())\n-            .expect(&format!(\"failed to exec `{:?}`\", &command));\n+            .unwrap_or_else(|_| panic!(\"failed to exec `{:?}`\", &command));\n         if let Some(input) = input {\n             child.stdin.as_mut().unwrap().write_all(input.as_bytes()).unwrap();\n         }\n@@ -2446,8 +2446,8 @@ impl<'test> TestCx<'test> {\n \n         self.check_no_compiler_crash(&proc_res, self.props.should_ice);\n \n-        const PREFIX: &'static str = \"MONO_ITEM \";\n-        const CGU_MARKER: &'static str = \"@@\";\n+        const PREFIX: &str = \"MONO_ITEM \";\n+        const CGU_MARKER: &str = \"@@\";\n \n         let actual: Vec<MonoItem> = proc_res\n             .stdout\n@@ -2976,7 +2976,7 @@ impl<'test> TestCx<'test> {\n                 Filter::MachineApplicableOnly,\n             )\n             .unwrap_or_default();\n-            if suggestions.len() > 0\n+            if !suggestions.is_empty()\n                 && !self.props.run_rustfix\n                 && !self.props.rustfix_only_machine_applicable\n             {\n@@ -2990,7 +2990,7 @@ impl<'test> TestCx<'test> {\n                     .open(coverage_file_path.as_path())\n                     .expect(\"could not create or open file\");\n \n-                if let Err(_) = writeln!(file, \"{}\", self.testpaths.file.display()) {\n+                if writeln!(file, \"{}\", self.testpaths.file.display()).is_err() {\n                     panic!(\"couldn't write to {}\", coverage_file_path.display());\n                 }\n             }\n@@ -3007,10 +3007,9 @@ impl<'test> TestCx<'test> {\n                 },\n             )\n             .unwrap();\n-            let fixed_code = apply_suggestions(&unfixed_code, &suggestions).expect(&format!(\n-                \"failed to apply suggestions for {:?} with rustfix\",\n-                self.testpaths.file\n-            ));\n+            let fixed_code = apply_suggestions(&unfixed_code, &suggestions).unwrap_or_else(|_| {\n+                panic!(\"failed to apply suggestions for {:?} with rustfix\", self.testpaths.file)\n+            });\n \n             errors += self.compare_output(\"fixed\", &fixed_code, &expected_fixed);\n         } else if !expected_fixed.is_empty() {\n@@ -3519,7 +3518,7 @@ impl<'test> TestCx<'test> {\n         let examined_content =\n             self.load_expected_output_from_path(&examined_path).unwrap_or_else(|_| String::new());\n \n-        if canon_content == &examined_content {\n+        if canon_content == examined_content {\n             self.delete_file(&examined_path);\n         }\n     }"}, {"sha": "1a727fc2b82ea6e6a1236cbebbae2b0b9f748709", "filename": "src/tools/compiletest/src/util.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a2a387c7332f568fcc27186578254f6923994742/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2a387c7332f568fcc27186578254f6923994742/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs?ref=a2a387c7332f568fcc27186578254f6923994742", "patch": "@@ -9,7 +9,7 @@ use tracing::*;\n mod tests;\n \n /// Conversion table from triple OS name to Rust SYSNAME\n-const OS_TABLE: &'static [(&'static str, &'static str)] = &[\n+const OS_TABLE: &[(&str, &str)] = &[\n     (\"android\", \"android\"),\n     (\"androideabi\", \"android\"),\n     (\"cloudabi\", \"cloudabi\"),\n@@ -37,7 +37,7 @@ const OS_TABLE: &'static [(&'static str, &'static str)] = &[\n     (\"vxworks\", \"vxworks\"),\n ];\n \n-const ARCH_TABLE: &'static [(&'static str, &'static str)] = &[\n+const ARCH_TABLE: &[(&str, &str)] = &[\n     (\"aarch64\", \"aarch64\"),\n     (\"amd64\", \"x86_64\"),\n     (\"arm\", \"arm\"),\n@@ -82,7 +82,7 @@ const ARCH_TABLE: &'static [(&'static str, &'static str)] = &[\n     (\"xcore\", \"xcore\"),\n ];\n \n-pub const ASAN_SUPPORTED_TARGETS: &'static [&'static str] = &[\n+pub const ASAN_SUPPORTED_TARGETS: &[&str] = &[\n     \"aarch64-fuchsia\",\n     \"aarch64-unknown-linux-gnu\",\n     \"x86_64-apple-darwin\",\n@@ -91,20 +91,20 @@ pub const ASAN_SUPPORTED_TARGETS: &'static [&'static str] = &[\n     \"x86_64-unknown-linux-gnu\",\n ];\n \n-pub const LSAN_SUPPORTED_TARGETS: &'static [&'static str] =\n+pub const LSAN_SUPPORTED_TARGETS: &[&str] =\n     &[\"aarch64-unknown-linux-gnu\", \"x86_64-apple-darwin\", \"x86_64-unknown-linux-gnu\"];\n \n-pub const MSAN_SUPPORTED_TARGETS: &'static [&'static str] =\n+pub const MSAN_SUPPORTED_TARGETS: &[&str] =\n     &[\"aarch64-unknown-linux-gnu\", \"x86_64-unknown-freebsd\", \"x86_64-unknown-linux-gnu\"];\n \n-pub const TSAN_SUPPORTED_TARGETS: &'static [&'static str] = &[\n+pub const TSAN_SUPPORTED_TARGETS: &[&str] = &[\n     \"aarch64-unknown-linux-gnu\",\n     \"x86_64-apple-darwin\",\n     \"x86_64-unknown-freebsd\",\n     \"x86_64-unknown-linux-gnu\",\n ];\n \n-const BIG_ENDIAN: &'static [&'static str] = &[\n+const BIG_ENDIAN: &[&str] = &[\n     \"armebv7r\",\n     \"mips\",\n     \"mips64\",\n@@ -195,11 +195,11 @@ pub trait PathBufExt {\n \n impl PathBufExt for PathBuf {\n     fn with_extra_extension<S: AsRef<OsStr>>(&self, extension: S) -> PathBuf {\n-        if extension.as_ref().len() == 0 {\n+        if extension.as_ref().is_empty() {\n             self.clone()\n         } else {\n             let mut fname = self.file_name().unwrap().to_os_string();\n-            if !extension.as_ref().to_str().unwrap().starts_with(\".\") {\n+            if !extension.as_ref().to_str().unwrap().starts_with('.') {\n                 fname.push(\".\");\n             }\n             fname.push(extension);"}]}