{"sha": "c10918905fda1344e78bc16e6e73294d096ee97d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxMDkxODkwNWZkYTEzNDRlNzhiYzE2ZTZlNzMyOTRkMDk2ZWU5N2Q=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-03-18T03:22:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-03-18T03:22:12Z"}, "message": "Auto merge of #23452 - nikomatsakis:unsafety-subtyping, r=nrc\n\nSafe fns are no longer subtypes of unsafe fns, but you can coerce from one to the other.\r\n\r\nThis is a [breaking-change] in that impl fns must now be declared `unsafe` if the trait is declared `unsafe`. In some rare cases, the subtyping change may also direct affect you, but no such cases were encountered in practice.\r\n\r\nFixes #23449.\r\n\r\nr? @nrc", "tree": {"sha": "96bdb6d9c8e950b7142963f6aa7a6f2b688e53ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96bdb6d9c8e950b7142963f6aa7a6f2b688e53ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c10918905fda1344e78bc16e6e73294d096ee97d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c10918905fda1344e78bc16e6e73294d096ee97d", "html_url": "https://github.com/rust-lang/rust/commit/c10918905fda1344e78bc16e6e73294d096ee97d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c10918905fda1344e78bc16e6e73294d096ee97d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ae32decb87e3275ce955383a5c71e5c784a0216", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ae32decb87e3275ce955383a5c71e5c784a0216", "html_url": "https://github.com/rust-lang/rust/commit/1ae32decb87e3275ce955383a5c71e5c784a0216"}, {"sha": "0947f4076ddbf5c0db63d60c19f28b6b79023638", "url": "https://api.github.com/repos/rust-lang/rust/commits/0947f4076ddbf5c0db63d60c19f28b6b79023638", "html_url": "https://github.com/rust-lang/rust/commit/0947f4076ddbf5c0db63d60c19f28b6b79023638"}], "stats": {"total": 350, "additions": 191, "deletions": 159}, "files": [{"sha": "f7210728bb480099731fad7eb7c999007705179f", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c10918905fda1344e78bc16e6e73294d096ee97d/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c10918905fda1344e78bc16e6e73294d096ee97d/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=c10918905fda1344e78bc16e6e73294d096ee97d", "patch": "@@ -993,8 +993,14 @@ impl<'a, 'tcx> rbml_writer_helpers<'tcx> for Encoder<'a> {\n                     })\n                 }\n \n+                ty::AdjustUnsafeFnPointer => {\n+                    this.emit_enum_variant(\"AdjustUnsafeFnPointer\", 2, 0, |_| {\n+                        Ok(())\n+                    })\n+                }\n+\n                 ty::AdjustDerefRef(ref auto_deref_ref) => {\n-                    this.emit_enum_variant(\"AdjustDerefRef\", 2, 2, |this| {\n+                    this.emit_enum_variant(\"AdjustDerefRef\", 3, 2, |this| {\n                         this.emit_enum_variant_arg(0,\n                             |this| Ok(this.emit_auto_deref_ref(ecx, auto_deref_ref)))\n                     })\n@@ -1619,6 +1625,9 @@ impl<'a, 'tcx> rbml_decoder_decoder_helpers<'tcx> for reader::Decoder<'a> {\n                         ty::AdjustReifyFnPointer(def_id)\n                     }\n                     2 => {\n+                        ty::AdjustUnsafeFnPointer\n+                    }\n+                    3 => {\n                         let auto_deref_ref: ty::AutoDerefRef =\n                             this.read_enum_variant_arg(0,\n                                 |this| Ok(this.read_auto_deref_ref(dcx))).unwrap();"}, {"sha": "6d2392054f9d578efd6786583c204d89302d00c0", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c10918905fda1344e78bc16e6e73294d096ee97d/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c10918905fda1344e78bc16e6e73294d096ee97d/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=c10918905fda1344e78bc16e6e73294d096ee97d", "patch": "@@ -790,7 +790,8 @@ impl<'d,'t,'tcx,TYPER:mc::Typer<'tcx>> ExprUseVisitor<'d,'t,'tcx,TYPER> {\n             None => { }\n             Some(adjustment) => {\n                 match *adjustment {\n-                    ty::AdjustReifyFnPointer(..) => {\n+                    ty::AdjustReifyFnPointer(..) |\n+                    ty::AdjustUnsafeFnPointer(..) => {\n                         // Creating a closure/fn-pointer consumes the\n                         // input and stores it into the resulting\n                         // rvalue."}, {"sha": "cedb30eebfd7817e885297b66693ff0e15f30843", "filename": "src/librustc/middle/infer/bivariate.rs", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c10918905fda1344e78bc16e6e73294d096ee97d/src%2Flibrustc%2Fmiddle%2Finfer%2Fbivariate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c10918905fda1344e78bc16e6e73294d096ee97d/src%2Flibrustc%2Fmiddle%2Finfer%2Fbivariate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fbivariate.rs?ref=c10918905fda1344e78bc16e6e73294d096ee97d", "patch": "@@ -33,8 +33,6 @@ use middle::infer::{cres};\n use middle::infer::type_variable::{BiTo};\n use util::ppaux::{Repr};\n \n-use syntax::ast::{Unsafety};\n-\n pub struct Bivariate<'f, 'tcx: 'f> {\n     fields: CombineFields<'f, 'tcx>\n }\n@@ -74,24 +72,6 @@ impl<'f, 'tcx> Combine<'tcx> for Bivariate<'f, 'tcx> {\n         Ok(a)\n     }\n \n-    fn mts(&self, a: &ty::mt<'tcx>, b: &ty::mt<'tcx>) -> cres<'tcx, ty::mt<'tcx>> {\n-        debug!(\"mts({} <: {})\",\n-               a.repr(self.fields.infcx.tcx),\n-               b.repr(self.fields.infcx.tcx));\n-\n-        if a.mutbl != b.mutbl { return Err(ty::terr_mutability); }\n-        let t = try!(self.tys(a.ty, b.ty));\n-        Ok(ty::mt { mutbl: a.mutbl, ty: t })\n-    }\n-\n-    fn unsafeties(&self, a: Unsafety, b: Unsafety) -> cres<'tcx, Unsafety> {\n-        if a != b {\n-            Err(ty::terr_unsafety_mismatch(expected_found(self, a, b)))\n-        } else {\n-            Ok(a)\n-        }\n-    }\n-\n     fn builtin_bounds(&self,\n                       a: BuiltinBounds,\n                       b: BuiltinBounds)"}, {"sha": "94c9699e30cc42ad73d545f3471c3a18b1a91616", "filename": "src/librustc/middle/infer/combine.rs", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c10918905fda1344e78bc16e6e73294d096ee97d/src%2Flibrustc%2Fmiddle%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c10918905fda1344e78bc16e6e73294d096ee97d/src%2Flibrustc%2Fmiddle%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fcombine.rs?ref=c10918905fda1344e78bc16e6e73294d096ee97d", "patch": "@@ -74,7 +74,24 @@ pub trait Combine<'tcx> : Sized {\n     fn lub<'a>(&'a self) -> Lub<'a, 'tcx> { Lub(self.fields().clone()) }\n     fn glb<'a>(&'a self) -> Glb<'a, 'tcx> { Glb(self.fields().clone()) }\n \n-    fn mts(&self, a: &ty::mt<'tcx>, b: &ty::mt<'tcx>) -> cres<'tcx, ty::mt<'tcx>>;\n+    fn mts(&self, a: &ty::mt<'tcx>, b: &ty::mt<'tcx>) -> cres<'tcx, ty::mt<'tcx>> {\n+        debug!(\"{}.mts({}, {})\",\n+               self.tag(),\n+               a.repr(self.tcx()),\n+               b.repr(self.tcx()));\n+\n+        if a.mutbl != b.mutbl {\n+            Err(ty::terr_mutability)\n+        } else {\n+            let mutbl = a.mutbl;\n+            let variance = match mutbl {\n+                ast::MutImmutable => ty::Covariant,\n+                ast::MutMutable => ty::Invariant,\n+            };\n+            let ty = try!(self.tys_with_variance(variance, a.ty, b.ty));\n+            Ok(ty::mt {ty: ty, mutbl: mutbl})\n+        }\n+    }\n \n     fn tys_with_variance(&self, variance: ty::Variance, a: Ty<'tcx>, b: Ty<'tcx>)\n                          -> cres<'tcx, Ty<'tcx>>;\n@@ -246,7 +263,13 @@ pub trait Combine<'tcx> : Sized {\n         self.tys_with_variance(ty::Contravariant, a, b).and_then(|t| Ok(t))\n     }\n \n-    fn unsafeties(&self, a: Unsafety, b: Unsafety) -> cres<'tcx, Unsafety>;\n+    fn unsafeties(&self, a: Unsafety, b: Unsafety) -> cres<'tcx, Unsafety> {\n+        if a != b {\n+            Err(ty::terr_unsafety_mismatch(expected_found(self, a, b)))\n+        } else {\n+            Ok(a)\n+        }\n+    }\n \n     fn abi(&self, a: abi::Abi, b: abi::Abi) -> cres<'tcx, abi::Abi> {\n         if a == b {"}, {"sha": "c2b73bca8584e3a7a63d9cb98912c341b0bcd3ff", "filename": "src/librustc/middle/infer/equate.rs", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c10918905fda1344e78bc16e6e73294d096ee97d/src%2Flibrustc%2Fmiddle%2Finfer%2Fequate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c10918905fda1344e78bc16e6e73294d096ee97d/src%2Flibrustc%2Fmiddle%2Finfer%2Fequate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fequate.rs?ref=c10918905fda1344e78bc16e6e73294d096ee97d", "patch": "@@ -16,8 +16,6 @@ use middle::infer::{Subtype};\n use middle::infer::type_variable::{EqTo};\n use util::ppaux::{Repr};\n \n-use syntax::ast::Unsafety;\n-\n pub struct Equate<'f, 'tcx: 'f> {\n     fields: CombineFields<'f, 'tcx>\n }\n@@ -54,24 +52,6 @@ impl<'f, 'tcx> Combine<'tcx> for Equate<'f, 'tcx> {\n         Ok(a)\n     }\n \n-    fn mts(&self, a: &ty::mt<'tcx>, b: &ty::mt<'tcx>) -> cres<'tcx, ty::mt<'tcx>> {\n-        debug!(\"mts({} <: {})\",\n-               a.repr(self.fields.infcx.tcx),\n-               b.repr(self.fields.infcx.tcx));\n-\n-        if a.mutbl != b.mutbl { return Err(ty::terr_mutability); }\n-        let t = try!(self.tys(a.ty, b.ty));\n-        Ok(ty::mt { mutbl: a.mutbl, ty: t })\n-    }\n-\n-    fn unsafeties(&self, a: Unsafety, b: Unsafety) -> cres<'tcx, Unsafety> {\n-        if a != b {\n-            Err(ty::terr_unsafety_mismatch(expected_found(self, a, b)))\n-        } else {\n-            Ok(a)\n-        }\n-    }\n-\n     fn tys(&self, a: Ty<'tcx>, b: Ty<'tcx>) -> cres<'tcx, Ty<'tcx>> {\n         debug!(\"{}.tys({}, {})\", self.tag(),\n                a.repr(self.fields.infcx.tcx), b.repr(self.fields.infcx.tcx));"}, {"sha": "e17155a2ae69b304f8ef677d03bd14e5829752d0", "filename": "src/librustc/middle/infer/glb.rs", "status": "modified", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/c10918905fda1344e78bc16e6e73294d096ee97d/src%2Flibrustc%2Fmiddle%2Finfer%2Fglb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c10918905fda1344e78bc16e6e73294d096ee97d/src%2Flibrustc%2Fmiddle%2Finfer%2Fglb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fglb.rs?ref=c10918905fda1344e78bc16e6e73294d096ee97d", "patch": "@@ -15,8 +15,6 @@ use super::{cres};\n use super::Subtype;\n \n use middle::ty::{self, Ty};\n-use syntax::ast::{MutImmutable, MutMutable, Unsafety};\n-use util::ppaux::mt_to_string;\n use util::ppaux::Repr;\n \n /// \"Greatest lower bound\" (common subtype)\n@@ -55,44 +53,6 @@ impl<'f, 'tcx> Combine<'tcx> for Glb<'f, 'tcx> {\n         }\n     }\n \n-    fn mts(&self, a: &ty::mt<'tcx>, b: &ty::mt<'tcx>) -> cres<'tcx, ty::mt<'tcx>> {\n-        let tcx = self.fields.infcx.tcx;\n-\n-        debug!(\"{}.mts({}, {})\",\n-               self.tag(),\n-               mt_to_string(tcx, a),\n-               mt_to_string(tcx, b));\n-\n-        match (a.mutbl, b.mutbl) {\n-            // If one side or both is mut, then the GLB must use\n-            // the precise type from the mut side.\n-            (MutMutable, MutMutable) => {\n-                let t = try!(self.equate().tys(a.ty, b.ty));\n-                Ok(ty::mt {ty: t, mutbl: MutMutable})\n-            }\n-\n-            // If one side or both is immutable, we can use the GLB of\n-            // both sides but mutbl must be `MutImmutable`.\n-            (MutImmutable, MutImmutable) => {\n-                let t = try!(self.tys(a.ty, b.ty));\n-                Ok(ty::mt {ty: t, mutbl: MutImmutable})\n-            }\n-\n-            // There is no mutual subtype of these combinations.\n-            (MutMutable, MutImmutable) |\n-            (MutImmutable, MutMutable) => {\n-                Err(ty::terr_mutability)\n-            }\n-        }\n-    }\n-\n-    fn unsafeties(&self, a: Unsafety, b: Unsafety) -> cres<'tcx, Unsafety> {\n-        match (a, b) {\n-          (Unsafety::Normal, _) | (_, Unsafety::Normal) => Ok(Unsafety::Normal),\n-          (Unsafety::Unsafe, Unsafety::Unsafe) => Ok(Unsafety::Unsafe)\n-        }\n-    }\n-\n     fn regions(&self, a: ty::Region, b: ty::Region) -> cres<'tcx, ty::Region> {\n         debug!(\"{}.regions({}, {})\",\n                self.tag(),"}, {"sha": "be814b2acc10a234d448c6600ab62cab28cb3baf", "filename": "src/librustc/middle/infer/lub.rs", "status": "modified", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/c10918905fda1344e78bc16e6e73294d096ee97d/src%2Flibrustc%2Fmiddle%2Finfer%2Flub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c10918905fda1344e78bc16e6e73294d096ee97d/src%2Flibrustc%2Fmiddle%2Finfer%2Flub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Flub.rs?ref=c10918905fda1344e78bc16e6e73294d096ee97d", "patch": "@@ -15,8 +15,6 @@ use super::{cres};\n use super::{Subtype};\n \n use middle::ty::{self, Ty};\n-use syntax::ast::{MutMutable, MutImmutable, Unsafety};\n-use util::ppaux::mt_to_string;\n use util::ppaux::Repr;\n \n /// \"Least upper bound\" (common supertype)\n@@ -55,39 +53,6 @@ impl<'f, 'tcx> Combine<'tcx> for Lub<'f, 'tcx> {\n         }\n     }\n \n-    fn mts(&self, a: &ty::mt<'tcx>, b: &ty::mt<'tcx>) -> cres<'tcx, ty::mt<'tcx>> {\n-        let tcx = self.tcx();\n-\n-        debug!(\"{}.mts({}, {})\",\n-               self.tag(),\n-               mt_to_string(tcx, a),\n-               mt_to_string(tcx, b));\n-\n-        if a.mutbl != b.mutbl {\n-            return Err(ty::terr_mutability)\n-        }\n-\n-        let m = a.mutbl;\n-        match m {\n-            MutImmutable => {\n-                let t = try!(self.tys(a.ty, b.ty));\n-                Ok(ty::mt {ty: t, mutbl: m})\n-            }\n-\n-            MutMutable => {\n-                let t = try!(self.equate().tys(a.ty, b.ty));\n-                Ok(ty::mt {ty: t, mutbl: m})\n-            }\n-        }\n-    }\n-\n-    fn unsafeties(&self, a: Unsafety, b: Unsafety) -> cres<'tcx, Unsafety> {\n-        match (a, b) {\n-          (Unsafety::Unsafe, _) | (_, Unsafety::Unsafe) => Ok(Unsafety::Unsafe),\n-          (Unsafety::Normal, Unsafety::Normal) => Ok(Unsafety::Normal),\n-        }\n-    }\n-\n     fn regions(&self, a: ty::Region, b: ty::Region) -> cres<'tcx, ty::Region> {\n         debug!(\"{}.regions({}, {})\",\n                self.tag(),"}, {"sha": "423fb86dc5c855fe6320e6d5f4d2278fc4f373ad", "filename": "src/librustc/middle/infer/sub.rs", "status": "modified", "additions": 1, "deletions": 34, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/c10918905fda1344e78bc16e6e73294d096ee97d/src%2Flibrustc%2Fmiddle%2Finfer%2Fsub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c10918905fda1344e78bc16e6e73294d096ee97d/src%2Flibrustc%2Fmiddle%2Finfer%2Fsub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fsub.rs?ref=c10918905fda1344e78bc16e6e73294d096ee97d", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use super::combine::*;\n-use super::{cres, CresCompare};\n+use super::{cres};\n use super::higher_ranked::HigherRankedRelations;\n use super::{Subtype};\n use super::type_variable::{SubtypeOf, SupertypeOf};\n@@ -18,9 +18,6 @@ use middle::ty::{self, Ty};\n use middle::ty::TyVar;\n use util::ppaux::{Repr};\n \n-use syntax::ast::{MutImmutable, MutMutable, Unsafety};\n-\n-\n /// \"Greatest lower bound\" (common subtype)\n pub struct Sub<'f, 'tcx: 'f> {\n     fields: CombineFields<'f, 'tcx>\n@@ -66,36 +63,6 @@ impl<'f, 'tcx> Combine<'tcx> for Sub<'f, 'tcx> {\n         Ok(a)\n     }\n \n-    fn mts(&self, a: &ty::mt<'tcx>, b: &ty::mt<'tcx>) -> cres<'tcx, ty::mt<'tcx>> {\n-        debug!(\"mts({} <: {})\",\n-               a.repr(self.tcx()),\n-               b.repr(self.tcx()));\n-\n-        if a.mutbl != b.mutbl {\n-            return Err(ty::terr_mutability);\n-        }\n-\n-        match b.mutbl {\n-            MutMutable => {\n-                // If supertype is mut, subtype must match exactly\n-                // (i.e., invariant if mut):\n-                try!(self.equate().tys(a.ty, b.ty));\n-            }\n-            MutImmutable => {\n-                // Otherwise we can be covariant:\n-                try!(self.tys(a.ty, b.ty));\n-            }\n-        }\n-\n-        Ok(*a) // return is meaningless in sub, just return *a\n-    }\n-\n-    fn unsafeties(&self, a: Unsafety, b: Unsafety) -> cres<'tcx, Unsafety> {\n-        self.lub().unsafeties(a, b).compare(b, || {\n-            ty::terr_unsafety_mismatch(expected_found(self, a, b))\n-        })\n-    }\n-\n     fn tys(&self, a: Ty<'tcx>, b: Ty<'tcx>) -> cres<'tcx, Ty<'tcx>> {\n         debug!(\"{}.tys({}, {})\", self.tag(),\n                a.repr(self.tcx()), b.repr(self.tcx()));"}, {"sha": "5237a86ebb6300f5c76f16a32587b866d51edd34", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c10918905fda1344e78bc16e6e73294d096ee97d/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c10918905fda1344e78bc16e6e73294d096ee97d/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=c10918905fda1344e78bc16e6e73294d096ee97d", "patch": "@@ -428,7 +428,8 @@ impl<'t,'tcx,TYPER:Typer<'tcx>> MemCategorizationContext<'t,TYPER> {\n \n             Some(adjustment) => {\n                 match *adjustment {\n-                    ty::AdjustReifyFnPointer(..) => {\n+                    ty::AdjustReifyFnPointer(..) |\n+                    ty::AdjustUnsafeFnPointer(..) => {\n                         debug!(\"cat_expr(AdjustReifyFnPointer): {}\",\n                                expr.repr(self.tcx()));\n                         // Convert a bare fn to a closure by adding NULL env."}, {"sha": "99c35c6e5425824a20b3e8ba2144f5d885dd4aba", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c10918905fda1344e78bc16e6e73294d096ee97d/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c10918905fda1344e78bc16e6e73294d096ee97d/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=c10918905fda1344e78bc16e6e73294d096ee97d", "patch": "@@ -281,6 +281,7 @@ pub enum Variance {\n #[derive(Clone, Debug)]\n pub enum AutoAdjustment<'tcx> {\n     AdjustReifyFnPointer(ast::DefId), // go from a fn-item type to a fn-pointer type\n+    AdjustUnsafeFnPointer, // go from a safe fn pointer to an unsafe fn pointer\n     AdjustDerefRef(AutoDerefRef<'tcx>)\n }\n \n@@ -2634,6 +2635,17 @@ impl<'tcx> ctxt<'tcx> {\n         substs\n     }\n \n+    /// Create an unsafe fn ty based on a safe fn ty.\n+    pub fn safe_to_unsafe_fn_ty(&self, bare_fn: &BareFnTy<'tcx>) -> Ty<'tcx> {\n+        assert_eq!(bare_fn.unsafety, ast::Unsafety::Normal);\n+        let unsafe_fn_ty_a = self.mk_bare_fn(ty::BareFnTy {\n+            unsafety: ast::Unsafety::Unsafe,\n+            abi: bare_fn.abi,\n+            sig: bare_fn.sig.clone()\n+        });\n+        ty::mk_bare_fn(self, None, unsafe_fn_ty_a)\n+    }\n+\n     pub fn mk_bare_fn(&self, bare_fn: BareFnTy<'tcx>) -> &'tcx BareFnTy<'tcx> {\n         if let Some(bare_fn) = self.bare_fn_interner.borrow().get(&bare_fn) {\n             return *bare_fn;\n@@ -4523,6 +4535,18 @@ pub fn adjust_ty<'tcx, F>(cx: &ctxt<'tcx>,\n                     }\n                 }\n \n+               AdjustUnsafeFnPointer => {\n+                    match unadjusted_ty.sty {\n+                        ty::ty_bare_fn(None, b) => cx.safe_to_unsafe_fn_ty(b),\n+                        ref b => {\n+                            cx.sess.bug(\n+                                &format!(\"AdjustReifyFnPointer adjustment on non-fn-item: \\\n+                                         {:?}\",\n+                                        b));\n+                        }\n+                    }\n+               }\n+\n                 AdjustDerefRef(ref adj) => {\n                     let mut adjusted_ty = unadjusted_ty;\n \n@@ -6685,6 +6709,7 @@ impl<'tcx> AutoAdjustment<'tcx> {\n     pub fn is_identity(&self) -> bool {\n         match *self {\n             AdjustReifyFnPointer(..) => false,\n+            AdjustUnsafeFnPointer(..) => false,\n             AdjustDerefRef(ref r) => r.is_identity(),\n         }\n     }\n@@ -6834,6 +6859,9 @@ impl<'tcx> Repr<'tcx> for AutoAdjustment<'tcx> {\n             AdjustReifyFnPointer(def_id) => {\n                 format!(\"AdjustReifyFnPointer({})\", def_id.repr(tcx))\n             }\n+            AdjustUnsafeFnPointer => {\n+                format!(\"AdjustUnsafeFnPointer\")\n+            }\n             AdjustDerefRef(ref data) => {\n                 data.repr(tcx)\n             }"}, {"sha": "fd1986f433066f0b74ead5a3510601b63331f62b", "filename": "src/librustc_trans/trans/consts.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c10918905fda1344e78bc16e6e73294d096ee97d/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c10918905fda1344e78bc16e6e73294d096ee97d/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs?ref=c10918905fda1344e78bc16e6e73294d096ee97d", "patch": "@@ -253,6 +253,9 @@ pub fn const_expr<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n             // FIXME(#19925) once fn item types are\n             // zero-sized, we'll need to do something here\n         }\n+        Some(ty::AdjustUnsafeFnPointer) => {\n+            // purely a type-level thing\n+        }\n         Some(ty::AdjustDerefRef(adj)) => {\n             let mut ty = ety;\n             // Save the last autoderef in case we can avoid it."}, {"sha": "c316308c618bcb42a12ec9646e99ffd7d1663ab8", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c10918905fda1344e78bc16e6e73294d096ee97d/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c10918905fda1344e78bc16e6e73294d096ee97d/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=c10918905fda1344e78bc16e6e73294d096ee97d", "patch": "@@ -72,7 +72,7 @@ use trans::monomorphize;\n use trans::tvec;\n use trans::type_of;\n use middle::ty::{struct_fields, tup_fields};\n-use middle::ty::{AdjustDerefRef, AdjustReifyFnPointer, AutoUnsafe};\n+use middle::ty::{AdjustDerefRef, AdjustReifyFnPointer, AdjustUnsafeFnPointer, AutoUnsafe};\n use middle::ty::{AutoPtr};\n use middle::ty::{self, Ty};\n use middle::ty::MethodCall;\n@@ -378,6 +378,9 @@ fn apply_adjustments<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n             // FIXME(#19925) once fn item types are\n             // zero-sized, we'll need to do something here\n         }\n+        AdjustUnsafeFnPointer => {\n+            // purely a type-level thing\n+        }\n         AdjustDerefRef(ref adj) => {\n             let (autoderefs, use_autoref) = match adj.autoref {\n                 // Extracting a value from a box counts as a deref, but if we are"}, {"sha": "a82ebcd9175fa43d9be6d03ede273282c3134d8c", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/c10918905fda1344e78bc16e6e73294d096ee97d/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c10918905fda1344e78bc16e6e73294d096ee97d/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=c10918905fda1344e78bc16e6e73294d096ee97d", "patch": "@@ -143,6 +143,11 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n                     // require double indirection).\n                     self.coerce_from_fn_item(a, a_def_id, a_f, b)\n                 }\n+                ty::ty_bare_fn(None, a_f) => {\n+                    // We permit coercion of fn pointers to drop the\n+                    // unsafe qualifier.\n+                    self.coerce_from_fn_pointer(a, a_f, b)\n+                }\n                 _ => {\n                     // Otherwise, just use subtyping rules.\n                     self.subtype(a, b)\n@@ -411,6 +416,41 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n         )\n     }\n \n+    fn coerce_from_fn_pointer(&self,\n+                           a: Ty<'tcx>,\n+                           fn_ty_a: &'tcx ty::BareFnTy<'tcx>,\n+                           b: Ty<'tcx>)\n+                           -> CoerceResult<'tcx>\n+    {\n+        /*!\n+         * Attempts to coerce from the type of a Rust function item\n+         * into a closure or a `proc`.\n+         */\n+\n+        self.unpack_actual_value(b, |b| {\n+            debug!(\"coerce_from_fn_pointer(a={}, b={})\",\n+                   a.repr(self.tcx()), b.repr(self.tcx()));\n+\n+            match b.sty {\n+                ty::ty_bare_fn(None, fn_ty_b) => {\n+                    match (fn_ty_a.unsafety, fn_ty_b.unsafety) {\n+                        (ast::Unsafety::Normal, ast::Unsafety::Unsafe) => {\n+                            let unsafe_a = self.tcx().safe_to_unsafe_fn_ty(fn_ty_a);\n+                            try!(self.subtype(unsafe_a, b));\n+                            Ok(Some(ty::AdjustUnsafeFnPointer))\n+                        }\n+                        _ => {\n+                            self.subtype(a, b)\n+                        }\n+                    }\n+                }\n+                _ => {\n+                    return self.subtype(a, b)\n+                }\n+            }\n+        })\n+    }\n+\n     fn coerce_from_fn_item(&self,\n                            a: Ty<'tcx>,\n                            fn_def_id_a: ast::DefId,"}, {"sha": "fe191fbabbce23096180142c763ad514b1e27da8", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c10918905fda1344e78bc16e6e73294d096ee97d/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c10918905fda1344e78bc16e6e73294d096ee97d/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=c10918905fda1344e78bc16e6e73294d096ee97d", "patch": "@@ -1532,8 +1532,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                        span: Span,\n                                        adj: &ty::AutoAdjustment<'tcx>) {\n         match *adj {\n-            ty::AdjustReifyFnPointer(..) => {\n-            }\n+            ty::AdjustReifyFnPointer(..) => { }\n+            ty::AdjustUnsafeFnPointer => { }\n             ty::AdjustDerefRef(ref d_r) => {\n                 match d_r.autoref {\n                     Some(ref a_r) => {"}, {"sha": "2537f9362bf310f88ed8e60d302487da33102d04", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c10918905fda1344e78bc16e6e73294d096ee97d/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c10918905fda1344e78bc16e6e73294d096ee97d/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=c10918905fda1344e78bc16e6e73294d096ee97d", "patch": "@@ -265,6 +265,10 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n                         ty::AdjustReifyFnPointer(def_id)\n                     }\n \n+                    ty::AdjustUnsafeFnPointer => {\n+                        ty::AdjustUnsafeFnPointer\n+                    }\n+\n                     ty::AdjustDerefRef(adj) => {\n                         for autoderef in 0..adj.autoderefs {\n                             let method_call = MethodCall::autoderef(id, autoderef);"}, {"sha": "f48676368196750a094811ac26ed80302de22dd1", "filename": "src/test/compile-fail/unsafe-subtyping.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c10918905fda1344e78bc16e6e73294d096ee97d/src%2Ftest%2Fcompile-fail%2Funsafe-subtyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c10918905fda1344e78bc16e6e73294d096ee97d/src%2Ftest%2Fcompile-fail%2Funsafe-subtyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsafe-subtyping.rs?ref=c10918905fda1344e78bc16e6e73294d096ee97d", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check that safe fns are not a subtype of unsafe fns.\n+\n+fn foo(x: Option<fn(i32)>) -> Option<unsafe fn(i32)> {\n+    x //~ ERROR mismatched types\n+}\n+\n+fn bar(x: fn(i32)) -> unsafe fn(i32) {\n+    x // OK, coercion!\n+}\n+\n+fn main() { }"}, {"sha": "71da2f7633f3cb970cb015aea763e612c8044714", "filename": "src/test/compile-fail/unsafe-trait-impl.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c10918905fda1344e78bc16e6e73294d096ee97d/src%2Ftest%2Fcompile-fail%2Funsafe-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c10918905fda1344e78bc16e6e73294d096ee97d/src%2Ftest%2Fcompile-fail%2Funsafe-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsafe-trait-impl.rs?ref=c10918905fda1344e78bc16e6e73294d096ee97d", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check that safe fns are not a subtype of unsafe fns.\n+\n+trait Foo {\n+    unsafe fn len(&self) -> u32;\n+}\n+\n+impl Foo for u32 {\n+    fn len(&self) -> u32 { *self }\n+    //~^ ERROR incompatible type for trait: expected unsafe fn, found normal fn\n+}\n+\n+fn main() { }"}, {"sha": "2a62ac2ac303ad758a5ef1f20c40ad585709db08", "filename": "src/test/compile-fail/variadic-ffi.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c10918905fda1344e78bc16e6e73294d096ee97d/src%2Ftest%2Fcompile-fail%2Fvariadic-ffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c10918905fda1344e78bc16e6e73294d096ee97d/src%2Ftest%2Fcompile-fail%2Fvariadic-ffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvariadic-ffi.rs?ref=c10918905fda1344e78bc16e6e73294d096ee97d", "patch": "@@ -30,9 +30,9 @@ fn main() {\n         //~| expected non-variadic fn\n         //~| found variadic function\n \n-        let y: unsafe extern \"C\" fn(f: isize, x: u8, ...) = bar;\n+        let y: extern \"C\" fn(f: isize, x: u8, ...) = bar;\n         //~^ ERROR: mismatched types\n-        //~| expected `unsafe extern \"C\" fn(isize, u8, ...)`\n+        //~| expected `extern \"C\" fn(isize, u8, ...)`\n         //~| found `extern \"C\" fn(isize, u8) {bar}`\n         //~| expected variadic fn\n         //~| found non-variadic function"}, {"sha": "06980e162c83b0a75eef36fa7d7ef651c37de764", "filename": "src/test/run-pass/unsafe-coercion.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c10918905fda1344e78bc16e6e73294d096ee97d/src%2Ftest%2Frun-pass%2Funsafe-coercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c10918905fda1344e78bc16e6e73294d096ee97d/src%2Ftest%2Frun-pass%2Funsafe-coercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funsafe-coercion.rs?ref=c10918905fda1344e78bc16e6e73294d096ee97d", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check that safe fns are not a subtype of unsafe fns.\n+\n+fn foo(x: i32) -> i32 {\n+    x * 22\n+}\n+\n+fn bar(x: fn(i32) -> i32) -> unsafe fn(i32) -> i32 {\n+    x // OK, coercion!\n+}\n+\n+fn main() {\n+    let f = bar(foo);\n+    let x = unsafe { f(2) };\n+    assert_eq!(x, 44);\n+}"}]}