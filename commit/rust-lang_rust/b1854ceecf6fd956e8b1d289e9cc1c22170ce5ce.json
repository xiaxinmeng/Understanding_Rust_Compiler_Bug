{"sha": "b1854ceecf6fd956e8b1d289e9cc1c22170ce5ce", "node_id": "C_kwDOAAsO6NoAKGIxODU0Y2VlY2Y2ZmQ5NTZlOGIxZDI4OWU5Y2MxYzIyMTcwY2U1Y2U", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-04-11T11:12:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-11T11:12:55Z"}, "message": "Merge #11958\n\n11958: Show config deseralization failures on start up r=Veykril a=Veykril\n\nWe now also show deserialization errors to the user when starting the server.\r\nThis PR also adds a small validation \"pass\" on the config that we will probably populate over time with more checks.\r\n\r\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/11950\r\n\r\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "f8f051b118e77e1ee93cee40c45daa7d22225ae0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8f051b118e77e1ee93cee40c45daa7d22225ae0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b1854ceecf6fd956e8b1d289e9cc1c22170ce5ce", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiVA03CRBK7hj4Ov3rIwAAnGgIADKQ9GEa8oK4JTFyiCtijr4+\nKsIcQin0Uki21LTZuuQj8zaWVvtlREnliZ6yILL7z08um78LaDgd0YgSjsLy032A\nCDYcDXulTgFx8EqApUfBPPjS1bE/oL/JnQLu+bmHeKgXVme7L/CWhoqlAgwgQPS+\nHVzfF7Rqxm/sFYIipiru7kdZcVC2ji7zsPOYrnCdVvxGH9KuNjiFcPQdt+FRzwEx\nmi/KvCVH/f5Hj6AMezO1Dqw6VxZJb79Ic065TTOb/i80JFXYrBvlAr2Hn9HriLZG\nWakEIZzhomJa39iX6Z1AzxHqyTnlUThYavdEU/gBmByRQCRQ6Y7SwvJdHxN635k=\n=g6+x\n-----END PGP SIGNATURE-----\n", "payload": "tree f8f051b118e77e1ee93cee40c45daa7d22225ae0\nparent 7a564af9895e1280a4b295239eecc9fa1ebcaa55\nparent b90df7997d891d89e658a7781cc4a52fba38aa40\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1649675575 +0000\ncommitter GitHub <noreply@github.com> 1649675575 +0000\n\nMerge #11958\n\n11958: Show config deseralization failures on start up r=Veykril a=Veykril\n\nWe now also show deserialization errors to the user when starting the server.\r\nThis PR also adds a small validation \"pass\" on the config that we will probably populate over time with more checks.\r\n\r\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/11950\r\n\r\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b1854ceecf6fd956e8b1d289e9cc1c22170ce5ce", "html_url": "https://github.com/rust-lang/rust/commit/b1854ceecf6fd956e8b1d289e9cc1c22170ce5ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b1854ceecf6fd956e8b1d289e9cc1c22170ce5ce/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a564af9895e1280a4b295239eecc9fa1ebcaa55", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a564af9895e1280a4b295239eecc9fa1ebcaa55", "html_url": "https://github.com/rust-lang/rust/commit/7a564af9895e1280a4b295239eecc9fa1ebcaa55"}, {"sha": "b90df7997d891d89e658a7781cc4a52fba38aa40", "url": "https://api.github.com/repos/rust-lang/rust/commits/b90df7997d891d89e658a7781cc4a52fba38aa40", "html_url": "https://github.com/rust-lang/rust/commit/b90df7997d891d89e658a7781cc4a52fba38aa40"}], "stats": {"total": 158, "additions": 97, "deletions": 61}, "files": [{"sha": "a4e985f43b30b0b3a25295482a0e39fd1fe8a45c", "filename": "crates/rust-analyzer/src/bin/main.rs", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b1854ceecf6fd956e8b1d289e9cc1c22170ce5ce/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1854ceecf6fd956e8b1d289e9cc1c22170ce5ce/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs?ref=b1854ceecf6fd956e8b1d289e9cc1c22170ce5ce", "patch": "@@ -150,7 +150,17 @@ fn run_server() -> Result<()> {\n \n     let mut config = Config::new(root_path, initialize_params.capabilities);\n     if let Some(json) = initialize_params.initialization_options {\n-        let _ = config.update(json);\n+        if let Err(e) = config.update(json) {\n+            use lsp_types::{\n+                notification::{Notification, ShowMessage},\n+                MessageType, ShowMessageParams,\n+            };\n+            let not = lsp_server::Notification::new(\n+                ShowMessage::METHOD.to_string(),\n+                ShowMessageParams { typ: MessageType::WARNING, message: e.to_string() },\n+            );\n+            connection.sender.send(lsp_server::Message::Notification(not)).unwrap();\n+        }\n     }\n \n     let server_capabilities = rust_analyzer::server_capabilities(&config);\n@@ -161,7 +171,11 @@ fn run_server() -> Result<()> {\n             name: String::from(\"rust-analyzer\"),\n             version: Some(String::from(env!(\"REV\"))),\n         }),\n-        offset_encoding: if supports_utf8(&config.caps) { Some(\"utf-8\".to_string()) } else { None },\n+        offset_encoding: if supports_utf8(config.caps()) {\n+            Some(\"utf-8\".to_string())\n+        } else {\n+            None\n+        },\n     };\n \n     let initialize_result = serde_json::to_value(initialize_result).unwrap();\n@@ -183,7 +197,7 @@ fn run_server() -> Result<()> {\n                     .collect::<Vec<_>>()\n             })\n             .filter(|workspaces| !workspaces.is_empty())\n-            .unwrap_or_else(|| vec![config.root_path.clone()]);\n+            .unwrap_or_else(|| vec![config.root_path().clone()]);\n \n         let discovered = ProjectManifest::discover_all(&workspace_roots);\n         tracing::info!(\"discovered projects: {:?}\", discovered);"}, {"sha": "85e3d5005386bd4f4e642c40dde457276357b64c", "filename": "crates/rust-analyzer/src/caps.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b1854ceecf6fd956e8b1d289e9cc1c22170ce5ce/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1854ceecf6fd956e8b1d289e9cc1c22170ce5ce/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs?ref=b1854ceecf6fd956e8b1d289e9cc1c22170ce5ce", "patch": "@@ -27,7 +27,7 @@ pub fn server_capabilities(config: &Config) -> ServerCapabilities {\n         })),\n         hover_provider: Some(HoverProviderCapability::Simple(true)),\n         completion_provider: Some(CompletionOptions {\n-            resolve_provider: completions_resolve_provider(&config.caps),\n+            resolve_provider: completions_resolve_provider(config.caps()),\n             trigger_characters: Some(vec![\":\".to_string(), \".\".to_string(), \"'\".to_string()]),\n             all_commit_characters: None,\n             completion_item: None,\n@@ -46,7 +46,7 @@ pub fn server_capabilities(config: &Config) -> ServerCapabilities {\n         document_highlight_provider: Some(OneOf::Left(true)),\n         document_symbol_provider: Some(OneOf::Left(true)),\n         workspace_symbol_provider: Some(OneOf::Left(true)),\n-        code_action_provider: Some(code_action_capabilities(&config.caps)),\n+        code_action_provider: Some(code_action_capabilities(config.caps())),\n         code_lens_provider: Some(CodeLensOptions { resolve_provider: Some(true) }),\n         document_formatting_provider: Some(OneOf::Left(true)),\n         document_range_formatting_provider: match config.rustfmt() {"}, {"sha": "35f8f61ef44b8c82651f3f2a7e2fcaa73ecd9753", "filename": "crates/rust-analyzer/src/cargo_target_spec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1854ceecf6fd956e8b1d289e9cc1c22170ce5ce/crates%2Frust-analyzer%2Fsrc%2Fcargo_target_spec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1854ceecf6fd956e8b1d289e9cc1c22170ce5ce/crates%2Frust-analyzer%2Fsrc%2Fcargo_target_spec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcargo_target_spec.rs?ref=b1854ceecf6fd956e8b1d289e9cc1c22170ce5ce", "patch": "@@ -123,7 +123,7 @@ impl CargoTargetSpec {\n         file_id: FileId,\n     ) -> Result<Option<CargoTargetSpec>> {\n         let crate_id = match global_state_snapshot.analysis.crate_for(file_id)?.first() {\n-            Some(crate_id) => *crate_id,\n+            Some(&crate_id) => crate_id,\n             None => return Ok(None),\n         };\n         let (cargo_ws, target) = match global_state_snapshot.cargo_target_for_crate_root(crate_id) {"}, {"sha": "ab9ad4a54312ba504dbcc33603c3817400f76d20", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 75, "deletions": 44, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/b1854ceecf6fd956e8b1d289e9cc1c22170ce5ce/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1854ceecf6fd956e8b1d289e9cc1c22170ce5ce/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=b1854ceecf6fd956e8b1d289e9cc1c22170ce5ce", "patch": "@@ -7,7 +7,7 @@\n //! configure the server itself, feature flags are passed into analysis, and\n //! tweak things like automatic insertion of `()` in completions.\n \n-use std::{ffi::OsString, iter, path::PathBuf};\n+use std::{ffi::OsString, fmt, iter, path::PathBuf};\n \n use flycheck::FlycheckConfig;\n use ide::{\n@@ -19,6 +19,7 @@ use ide_db::{\n     imports::insert_use::{ImportGranularity, InsertUseConfig, PrefixKind},\n     SnippetCap,\n };\n+use itertools::Itertools;\n use lsp_types::{ClientCapabilities, MarkupKind};\n use project_model::{\n     CargoConfig, ProjectJson, ProjectJsonData, ProjectManifest, RustcSource, UnsetTestCrates,\n@@ -31,9 +32,7 @@ use crate::{\n     caps::completion_item_edit_resolve,\n     diagnostics::DiagnosticsMapConfig,\n     line_index::OffsetEncoding,\n-    lsp_ext::supports_utf8,\n-    lsp_ext::WorkspaceSymbolSearchScope,\n-    lsp_ext::{self, WorkspaceSymbolSearchKind},\n+    lsp_ext::{self, supports_utf8, WorkspaceSymbolSearchKind, WorkspaceSymbolSearchScope},\n };\n \n // Defines the server-side configuration of the rust-analyzer. We generate\n@@ -369,11 +368,11 @@ impl Default for ConfigData {\n \n #[derive(Debug, Clone)]\n pub struct Config {\n-    pub caps: lsp_types::ClientCapabilities,\n+    pub discovered_projects: Option<Vec<ProjectManifest>>,\n+    caps: lsp_types::ClientCapabilities,\n+    root_path: AbsPathBuf,\n     data: ConfigData,\n     detached_files: Vec<AbsPathBuf>,\n-    pub discovered_projects: Option<Vec<ProjectManifest>>,\n-    pub root_path: AbsPathBuf,\n     snippets: Vec<Snippet>,\n }\n \n@@ -505,6 +504,27 @@ pub struct ClientCommandsConfig {\n     pub trigger_parameter_hints: bool,\n }\n \n+pub struct ConfigUpdateError {\n+    errors: Vec<(String, serde_json::Error)>,\n+}\n+\n+impl fmt::Display for ConfigUpdateError {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        let errors = self.errors.iter().format_with(\"\\n\", |(key, e), f| {\n+            f(key)?;\n+            f(&\": \")?;\n+            f(e)\n+        });\n+        write!(\n+            f,\n+            \"rust-analyzer found {} invalid config value{}:\\n{}\",\n+            self.errors.len(),\n+            if self.errors.len() == 1 { \"\" } else { \"s\" },\n+            errors\n+        )\n+    }\n+}\n+\n impl Config {\n     pub fn new(root_path: AbsPathBuf, caps: ClientCapabilities) -> Self {\n         Config {\n@@ -516,10 +536,8 @@ impl Config {\n             snippets: Default::default(),\n         }\n     }\n-    pub fn update(\n-        &mut self,\n-        mut json: serde_json::Value,\n-    ) -> Result<(), Vec<(String, serde_json::Error)>> {\n+\n+    pub fn update(&mut self, mut json: serde_json::Value) -> Result<(), ConfigUpdateError> {\n         tracing::info!(\"updating config from JSON: {:#}\", json);\n         if json.is_null() || json.as_object().map_or(false, |it| it.is_empty()) {\n             return Ok(());\n@@ -553,16 +571,41 @@ impl Config {\n                 None => tracing::info!(\"Invalid snippet {}\", name),\n             }\n         }\n+\n+        self.validate(&mut errors);\n+\n         if errors.is_empty() {\n             Ok(())\n         } else {\n-            Err(errors)\n+            Err(ConfigUpdateError { errors })\n+        }\n+    }\n+\n+    fn validate(&self, error_sink: &mut Vec<(String, serde_json::Error)>) {\n+        use serde::de::Error;\n+        if self.data.checkOnSave_command.is_empty() {\n+            error_sink.push((\n+                \"/checkOnSave/command\".to_string(),\n+                serde_json::Error::custom(\"expected a non-empty string\"),\n+            ));\n         }\n     }\n \n     pub fn json_schema() -> serde_json::Value {\n         ConfigData::json_schema()\n     }\n+\n+    pub fn root_path(&self) -> &AbsPathBuf {\n+        &self.root_path\n+    }\n+\n+    pub fn caps(&self) -> &lsp_types::ClientCapabilities {\n+        &self.caps\n+    }\n+\n+    pub fn detached_files(&self) -> &[AbsPathBuf] {\n+        &self.detached_files\n+    }\n }\n \n macro_rules! try_ {\n@@ -578,43 +621,31 @@ macro_rules! try_or {\n \n impl Config {\n     pub fn linked_projects(&self) -> Vec<LinkedProject> {\n-        if self.data.linkedProjects.is_empty() {\n-            self.discovered_projects\n-                .as_ref()\n-                .into_iter()\n-                .flatten()\n-                .cloned()\n-                .map(LinkedProject::from)\n-                .collect()\n-        } else {\n-            self.data\n-                .linkedProjects\n+        match self.data.linkedProjects.as_slice() {\n+            [] => match self.discovered_projects.as_ref() {\n+                Some(discovered_projects) => {\n+                    discovered_projects.iter().cloned().map(LinkedProject::from).collect()\n+                }\n+                None => Vec::new(),\n+            },\n+            linked_projects => linked_projects\n                 .iter()\n-                .filter_map(|linked_project| {\n-                    let res = match linked_project {\n-                        ManifestOrProjectJson::Manifest(it) => {\n-                            let path = self.root_path.join(it);\n-                            ProjectManifest::from_manifest_file(path)\n-                                .map_err(|e| {\n-                                    tracing::error!(\"failed to load linked project: {}\", e)\n-                                })\n-                                .ok()?\n-                                .into()\n-                        }\n-                        ManifestOrProjectJson::ProjectJson(it) => {\n-                            ProjectJson::new(&self.root_path, it.clone()).into()\n-                        }\n-                    };\n-                    Some(res)\n+                .filter_map(|linked_project| match linked_project {\n+                    ManifestOrProjectJson::Manifest(it) => {\n+                        let path = self.root_path.join(it);\n+                        ProjectManifest::from_manifest_file(path)\n+                            .map_err(|e| tracing::error!(\"failed to load linked project: {}\", e))\n+                            .ok()\n+                            .map(Into::into)\n+                    }\n+                    ManifestOrProjectJson::ProjectJson(it) => {\n+                        Some(ProjectJson::new(&self.root_path, it.clone()).into())\n+                    }\n                 })\n-                .collect()\n+                .collect(),\n         }\n     }\n \n-    pub fn detached_files(&self) -> &[AbsPathBuf] {\n-        &self.detached_files\n-    }\n-\n     pub fn did_save_text_document_dynamic_registration(&self) -> bool {\n         let caps =\n             try_or!(self.caps.text_document.as_ref()?.synchronization.clone()?, Default::default());"}, {"sha": "2f0e5c64b9856a33cb51d0e9fde9df69bf1afc40", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b1854ceecf6fd956e8b1d289e9cc1c22170ce5ce/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1854ceecf6fd956e8b1d289e9cc1c22170ce5ce/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=b1854ceecf6fd956e8b1d289e9cc1c22170ce5ce", "patch": "@@ -9,7 +9,6 @@ use std::{\n use always_assert::always;\n use crossbeam_channel::{select, Receiver};\n use ide_db::base_db::{SourceDatabaseExt, VfsPath};\n-use itertools::Itertools;\n use lsp_server::{Connection, Notification, Request};\n use lsp_types::notification::Notification as _;\n use vfs::{ChangeKind, FileId};\n@@ -747,16 +746,8 @@ impl GlobalState {\n                                     // Note that json can be null according to the spec if the client can't\n                                     // provide a configuration. This is handled in Config::update below.\n                                     let mut config = Config::clone(&*this.config);\n-                                    if let Err(errors) = config.update(json.take()) {\n-                                        let errors = errors\n-                                            .iter()\n-                                            .format_with(\"\\n\", |(key, e),f| {\n-                                                f(key)?;\n-                                                f(&\": \")?;\n-                                                f(e)\n-                                            });\n-                                        let msg= format!(\"Failed to deserialize config key(s):\\n{}\", errors);\n-                                        this.show_message(lsp_types::MessageType::WARNING, msg);\n+                                    if let Err(error) = config.update(json.take()) {\n+                                        this.show_message(lsp_types::MessageType::WARNING, error.to_string());\n                                     }\n                                     this.update_configuration(config);\n                                 }"}]}