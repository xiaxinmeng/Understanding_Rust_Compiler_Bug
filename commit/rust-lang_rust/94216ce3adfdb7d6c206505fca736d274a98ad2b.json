{"sha": "94216ce3adfdb7d6c206505fca736d274a98ad2b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0MjE2Y2UzYWRmZGI3ZDZjMjA2NTA1ZmNhNzM2ZDI3NGE5OGFkMmI=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-10-21T20:32:51Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-10-24T18:12:05Z"}, "message": "rustc_interface: Remove `ExpansionResult` and some `Steal`s", "tree": {"sha": "850e02b482576d035a42dc9a8e6ae059c40237bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/850e02b482576d035a42dc9a8e6ae059c40237bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94216ce3adfdb7d6c206505fca736d274a98ad2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94216ce3adfdb7d6c206505fca736d274a98ad2b", "html_url": "https://github.com/rust-lang/rust/commit/94216ce3adfdb7d6c206505fca736d274a98ad2b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94216ce3adfdb7d6c206505fca736d274a98ad2b/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f5a530b84c75e34c183eea50ce9a5d7fcf6581b", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f5a530b84c75e34c183eea50ce9a5d7fcf6581b", "html_url": "https://github.com/rust-lang/rust/commit/9f5a530b84c75e34c183eea50ce9a5d7fcf6581b"}], "stats": {"total": 42, "additions": 14, "deletions": 28}, "files": [{"sha": "58936172c5bcec0cd73a73b4d16528caf0046f5d", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 4, "deletions": 21, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/94216ce3adfdb7d6c206505fca736d274a98ad2b/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94216ce3adfdb7d6c206505fca736d274a98ad2b/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=94216ce3adfdb7d6c206505fca736d274a98ad2b", "patch": "@@ -102,7 +102,7 @@ fn count_nodes(krate: &ast::Crate) -> usize {\n declare_box_region_type!(\n     pub BoxedResolver,\n     for(),\n-    (&mut Resolver<'_>) -> (Result<ast::Crate>, ExpansionResult)\n+    (&mut Resolver<'_>) -> (Result<ast::Crate>, ResolverOutputs)\n );\n \n /// Runs the \"early phases\" of the compiler: initial `cfg` processing,\n@@ -149,33 +149,16 @@ pub fn configure_and_expand(\n             }\n         };\n         box_region_allow_access!(for(), (&mut Resolver<'_>), (&mut resolver));\n-        ExpansionResult::from_resolver_outputs(resolver.into_outputs())\n+        resolver.into_outputs()\n     });\n     result.map(|k| (k, resolver))\n }\n \n-pub struct ExpansionResult {\n-    pub resolver_outputs: Steal<ResolverOutputs>,\n-}\n-\n-impl ExpansionResult {\n-    fn from_resolver_outputs(resolver_outputs: ResolverOutputs) -> Self {\n-        ExpansionResult { resolver_outputs: Steal::new(resolver_outputs) }\n-    }\n-}\n-\n impl BoxedResolver {\n-    pub fn to_expansion_result(\n-        resolver: Rc<RefCell<BoxedResolver>>,\n-    ) -> ExpansionResult {\n+    pub fn to_resolver_outputs(resolver: Rc<RefCell<BoxedResolver>>) -> ResolverOutputs {\n         match Rc::try_unwrap(resolver) {\n             Ok(resolver) => resolver.into_inner().complete(),\n-            Err(resolver) => {\n-                let resolver = &*resolver;\n-                resolver.borrow_mut().access(|resolver| {\n-                    ExpansionResult::from_resolver_outputs(resolver.clone_outputs())\n-                })\n-            }\n+            Err(resolver) => resolver.borrow_mut().access(|resolver| resolver.clone_outputs()),\n         }\n     }\n }"}, {"sha": "ea51e63725ea2f117ec4c0b7354fb6660374fca3", "filename": "src/librustc_interface/queries.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/94216ce3adfdb7d6c206505fca736d274a98ad2b/src%2Flibrustc_interface%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94216ce3adfdb7d6c206505fca736d274a98ad2b/src%2Flibrustc_interface%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fqueries.rs?ref=94216ce3adfdb7d6c206505fca736d274a98ad2b", "patch": "@@ -1,5 +1,5 @@\n use crate::interface::{Compiler, Result};\n-use crate::passes::{self, BoxedResolver, ExpansionResult, BoxedGlobalCtxt, PluginInfo};\n+use crate::passes::{self, BoxedResolver, BoxedGlobalCtxt, PluginInfo};\n \n use rustc_incremental::DepGraphFuture;\n use rustc_data_structures::sync::Lrc;\n@@ -11,6 +11,7 @@ use rustc::session::Session;\n use rustc::lint::LintStore;\n use rustc::hir::def_id::LOCAL_CRATE;\n use rustc::ty::steal::Steal;\n+use rustc::ty::ResolverOutputs;\n use rustc::dep_graph::DepGraph;\n use std::cell::{Ref, RefMut, RefCell};\n use std::rc::Rc;\n@@ -81,7 +82,7 @@ pub(crate) struct Queries {\n     register_plugins: Query<(ast::Crate, PluginInfo, Lrc<LintStore>)>,\n     expansion: Query<(ast::Crate, Steal<Rc<RefCell<BoxedResolver>>>, Lrc<LintStore>)>,\n     dep_graph: Query<DepGraph>,\n-    lower_to_hir: Query<(Steal<hir::map::Forest>, ExpansionResult)>,\n+    lower_to_hir: Query<(Steal<hir::map::Forest>, Steal<ResolverOutputs>)>,\n     prepare_outputs: Query<OutputFilenames>,\n     global_ctxt: Query<BoxedGlobalCtxt>,\n     ongoing_codegen: Query<Box<dyn Any>>,\n@@ -191,7 +192,9 @@ impl Compiler {\n         })\n     }\n \n-    pub fn lower_to_hir(&self) -> Result<&Query<(Steal<hir::map::Forest>, ExpansionResult)>> {\n+    pub fn lower_to_hir(\n+        &self,\n+    ) -> Result<&Query<(Steal<hir::map::Forest>, Steal<ResolverOutputs>)>> {\n         self.queries.lower_to_hir.compute(|| {\n             let expansion_result = self.expansion()?;\n             let peeked = expansion_result.peek();\n@@ -207,14 +210,14 @@ impl Compiler {\n                     &krate\n                 )\n             })?);\n-            Ok((hir, BoxedResolver::to_expansion_result(resolver)))\n+            Ok((hir, Steal::new(BoxedResolver::to_resolver_outputs(resolver))))\n         })\n     }\n \n     pub fn prepare_outputs(&self) -> Result<&Query<OutputFilenames>> {\n         self.queries.prepare_outputs.compute(|| {\n             let expansion_result = self.expansion()?;\n-            let (krate, boxed_resolver) = &*expansion_result.peek();\n+            let (krate, boxed_resolver, _) = &*expansion_result.peek();\n             let crate_name = self.crate_name()?;\n             let crate_name = crate_name.peek();\n             passes::prepare_outputs(self.session(), self, &krate, &boxed_resolver, &crate_name)\n@@ -228,12 +231,12 @@ impl Compiler {\n             let lint_store = self.expansion()?.peek().2.clone();\n             let hir = self.lower_to_hir()?;\n             let hir = hir.peek();\n-            let (ref hir_forest, ref expansion) = *hir;\n+            let (hir_forest, resolver_outputs) = &*hir;\n             Ok(passes::create_global_ctxt(\n                 self,\n                 lint_store,\n                 hir_forest.steal(),\n-                expansion.resolver_outputs.steal(),\n+                resolver_outputs.steal(),\n                 outputs,\n                 &crate_name))\n         })"}]}