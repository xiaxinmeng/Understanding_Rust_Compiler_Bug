{"sha": "6975afd141d5ced25d1b133afc792dd4988345a6", "node_id": "C_kwDOAAsO6NoAKDY5NzVhZmQxNDFkNWNlZDI1ZDFiMTMzYWZjNzkyZGQ0OTg4MzQ1YTY", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2021-10-11T21:10:35Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2021-10-20T15:10:41Z"}, "message": "Add polarity to TraitPredicate", "tree": {"sha": "57f88c5957cbd5458c90e2f1a389e63d3523f65a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/57f88c5957cbd5458c90e2f1a389e63d3523f65a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6975afd141d5ced25d1b133afc792dd4988345a6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmFwMXIACgkQgTGiTgx5\n76+HSQ/+NpOPG0Wfv0CR9mLEu2GAPEAa5D3mfUgkZ21oHhYUj3eb5VreiYFiZOvQ\n+X7PzTas7i8nXRlUHLnjrpkMj6oFimYIQ+RdvKmFMBBC1XxXz7/gRQZf2M6+cVi9\ny6AvQQwzqNiWJk88bBKE/YLdbqT7k8C7+fbI6OnoWuAXn3oTZD8TFCnKqR6g+mbf\nb/eKbMevhUJ1rPoZD+GmYexL5ZDCFEfTGrzjfRHcp2yKT44XY9xcaj1W1r0Jv8kB\nsaRQbx7CS84BbLffIYEHJbBv9vuzZcWUChp00eUmfpLo52s7Vf95RVlMmlrogciU\neC4FYV+AymMyqNjNABVKAGLzgQCEjmAqr3Crel1H6ifyTnFLYRiScJ3g/lCtbYIf\nJC++Knt2+QXZhrUu6cZ03BCzcRYmoaz8v8Z9b6/wOSOiLSmBQ6RcQRutCm05i/KB\nw2AupR+d68Rthz53mv5cs0w7tDGN0tvdWJNGZqeMJEBCfvUl1r31tkkjPbTmtwdc\nxguxCyWQNrvb3yiwr8dBud972Ln81Ce/fM9jacg33D3YYpF46jXM5/B1qYjLggmc\nuZolJb/fHyfGmM6Kl+Yr8oyxkdghcoquK0k5rr8vDKDeqtYaVm8JXPt7PF8ugOKU\nr2dIbRoj9sPwtQKRqt1VITIb6LCwGsv3E8OvffFW8ry1oHy2T3M=\n=Tsl2\n-----END PGP SIGNATURE-----", "payload": "tree 57f88c5957cbd5458c90e2f1a389e63d3523f65a\nparent 72d66064e77281536588189a916af28a1819b313\nauthor Santiago Pastorino <spastorino@gmail.com> 1633986635 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1634742641 -0300\n\nAdd polarity to TraitPredicate\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6975afd141d5ced25d1b133afc792dd4988345a6", "html_url": "https://github.com/rust-lang/rust/commit/6975afd141d5ced25d1b133afc792dd4988345a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6975afd141d5ced25d1b133afc792dd4988345a6/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72d66064e77281536588189a916af28a1819b313", "url": "https://api.github.com/repos/rust-lang/rust/commits/72d66064e77281536588189a916af28a1819b313", "html_url": "https://github.com/rust-lang/rust/commit/72d66064e77281536588189a916af28a1819b313"}], "stats": {"total": 117, "additions": 105, "deletions": 12}, "files": [{"sha": "0fa72ed8241bc61086a1c7cf0fd05cb07ffd6872", "filename": "compiler/rustc_borrowck/src/type_check/canonical.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6975afd141d5ced25d1b133afc792dd4988345a6/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6975afd141d5ced25d1b133afc792dd4988345a6/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fcanonical.rs?ref=6975afd141d5ced25d1b133afc792dd4988345a6", "patch": "@@ -94,6 +94,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             Some(ty::Binder::dummy(ty::PredicateKind::Trait(ty::TraitPredicate {\n                 trait_ref,\n                 constness: ty::BoundConstness::NotConst,\n+                polarity: ty::ImplPolarity::Positive,\n             }))),\n             locations,\n             category,"}, {"sha": "fea2531cc5b27aeb8afa516bdd9328d278042dfc", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6975afd141d5ced25d1b133afc792dd4988345a6/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6975afd141d5ced25d1b133afc792dd4988345a6/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=6975afd141d5ced25d1b133afc792dd4988345a6", "patch": "@@ -825,6 +825,7 @@ impl Visitor<'tcx> for Checker<'mir, 'tcx> {\n                         Binder::dummy(TraitPredicate {\n                             trait_ref,\n                             constness: ty::BoundConstness::ConstIfConst,\n+                            polarity: ty::ImplPolarity::Positive,\n                         }),\n                     );\n "}, {"sha": "71870269b27d3a9a0eec3b964bfdf4dbb34453b6", "filename": "compiler/rustc_const_eval/src/transform/check_consts/qualifs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6975afd141d5ced25d1b133afc792dd4988345a6/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6975afd141d5ced25d1b133afc792dd4988345a6/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fqualifs.rs?ref=6975afd141d5ced25d1b133afc792dd4988345a6", "patch": "@@ -137,6 +137,7 @@ impl Qualif for NeedsNonConstDrop {\n             ty::Binder::dummy(ty::TraitPredicate {\n                 trait_ref,\n                 constness: ty::BoundConstness::ConstIfConst,\n+                polarity: ty::ImplPolarity::Positive,\n             }),\n         );\n "}, {"sha": "d0f5dfbe4b5cd341e114106b9f2f10fec128e27a", "filename": "compiler/rustc_middle/src/ty/error.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6975afd141d5ced25d1b133afc792dd4988345a6/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6975afd141d5ced25d1b133afc792dd4988345a6/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs?ref=6975afd141d5ced25d1b133afc792dd4988345a6", "patch": "@@ -34,6 +34,7 @@ impl<T> ExpectedFound<T> {\n pub enum TypeError<'tcx> {\n     Mismatch,\n     ConstnessMismatch(ExpectedFound<ty::BoundConstness>),\n+    PolarityMismatch(ExpectedFound<ty::ImplPolarity>),\n     UnsafetyMismatch(ExpectedFound<hir::Unsafety>),\n     AbiMismatch(ExpectedFound<abi::Abi>),\n     Mutability,\n@@ -104,6 +105,9 @@ impl<'tcx> fmt::Display for TypeError<'tcx> {\n             ConstnessMismatch(values) => {\n                 write!(f, \"expected {} bound, found {} bound\", values.expected, values.found)\n             }\n+            PolarityMismatch(values) => {\n+                write!(f, \"expected {} polarity, found {} polarity\", values.expected, values.found)\n+            }\n             UnsafetyMismatch(values) => {\n                 write!(f, \"expected {} fn, found {} fn\", values.expected, values.found)\n             }\n@@ -212,10 +216,9 @@ impl<'tcx> TypeError<'tcx> {\n         use self::TypeError::*;\n         match self {\n             CyclicTy(_) | CyclicConst(_) | UnsafetyMismatch(_) | ConstnessMismatch(_)\n-            | Mismatch | AbiMismatch(_) | FixedArraySize(_) | ArgumentSorts(..) | Sorts(_)\n-            | IntMismatch(_) | FloatMismatch(_) | VariadicMismatch(_) | TargetFeatureCast(_) => {\n-                false\n-            }\n+            | PolarityMismatch(_) | Mismatch | AbiMismatch(_) | FixedArraySize(_)\n+            | ArgumentSorts(..) | Sorts(_) | IntMismatch(_) | FloatMismatch(_)\n+            | VariadicMismatch(_) | TargetFeatureCast(_) => false,\n \n             Mutability\n             | ArgumentMutability(_)"}, {"sha": "98354d7844bee4cb2bf1bc5a336bbdd25554fadc", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 59, "deletions": 2, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/6975afd141d5ced25d1b133afc792dd4988345a6/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6975afd141d5ced25d1b133afc792dd4988345a6/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=6975afd141d5ced25d1b133afc792dd4988345a6", "patch": "@@ -165,7 +165,18 @@ pub struct ImplHeader<'tcx> {\n     pub predicates: Vec<Predicate<'tcx>>,\n }\n \n-#[derive(Copy, Clone, PartialEq, TyEncodable, TyDecodable, HashStable, Debug)]\n+#[derive(\n+    Copy,\n+    Clone,\n+    PartialEq,\n+    Eq,\n+    Hash,\n+    TyEncodable,\n+    TyDecodable,\n+    HashStable,\n+    Debug,\n+    TypeFoldable\n+)]\n pub enum ImplPolarity {\n     /// `impl Trait for Type`\n     Positive,\n@@ -178,6 +189,26 @@ pub enum ImplPolarity {\n     Reservation,\n }\n \n+impl ImplPolarity {\n+    pub fn flip(&self) -> Option<ImplPolarity> {\n+        match self {\n+            ImplPolarity::Positive => Some(ImplPolarity::Negative),\n+            ImplPolarity::Negative => Some(ImplPolarity::Positive),\n+            ImplPolarity::Reservation => None,\n+        }\n+    }\n+}\n+\n+impl fmt::Display for ImplPolarity {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        match self {\n+            Self::Positive => f.write_str(\"positive\"),\n+            Self::Negative => f.write_str(\"negative\"),\n+            Self::Reservation => f.write_str(\"reservation\"),\n+        }\n+    }\n+}\n+\n #[derive(Clone, Debug, PartialEq, Eq, Copy, Hash, TyEncodable, TyDecodable, HashStable)]\n pub enum Visibility {\n     /// Visible everywhere (including in other crates).\n@@ -460,6 +491,26 @@ impl<'tcx> Predicate<'tcx> {\n     pub fn kind(self) -> Binder<'tcx, PredicateKind<'tcx>> {\n         self.inner.kind\n     }\n+\n+    pub fn flip_polarity(&self, tcx: TyCtxt<'tcx>) -> Option<Predicate<'tcx>> {\n+        let kind = self\n+            .inner\n+            .kind\n+            .map_bound(|kind| match kind {\n+                PredicateKind::Trait(TraitPredicate { trait_ref, constness, polarity }) => {\n+                    Some(PredicateKind::Trait(TraitPredicate {\n+                        trait_ref,\n+                        constness,\n+                        polarity: polarity.flip()?,\n+                    }))\n+                }\n+\n+                _ => None,\n+            })\n+            .transpose()?;\n+\n+        Some(tcx.mk_predicate(kind))\n+    }\n }\n \n impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for Predicate<'tcx> {\n@@ -655,6 +706,8 @@ pub struct TraitPredicate<'tcx> {\n     pub trait_ref: TraitRef<'tcx>,\n \n     pub constness: BoundConstness,\n+\n+    pub polarity: ImplPolarity,\n }\n \n pub type PolyTraitPredicate<'tcx> = ty::Binder<'tcx, TraitPredicate<'tcx>>;\n@@ -789,7 +842,11 @@ impl<'tcx> ToPredicate<'tcx> for ConstnessAnd<PolyTraitRef<'tcx>> {\n     fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n         self.value\n             .map_bound(|trait_ref| {\n-                PredicateKind::Trait(ty::TraitPredicate { trait_ref, constness: self.constness })\n+                PredicateKind::Trait(ty::TraitPredicate {\n+                    trait_ref,\n+                    constness: self.constness,\n+                    polarity: ty::ImplPolarity::Positive,\n+                })\n             })\n             .to_predicate(tcx)\n     }"}, {"sha": "8b20e1eec9a86e03ba2d3992530b195e385f4a59", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6975afd141d5ced25d1b133afc792dd4988345a6/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6975afd141d5ced25d1b133afc792dd4988345a6/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=6975afd141d5ced25d1b133afc792dd4988345a6", "patch": "@@ -797,6 +797,20 @@ impl<'tcx> Relate<'tcx> for GenericArg<'tcx> {\n     }\n }\n \n+impl<'tcx> Relate<'tcx> for ty::ImplPolarity {\n+    fn relate<R: TypeRelation<'tcx>>(\n+        relation: &mut R,\n+        a: ty::ImplPolarity,\n+        b: ty::ImplPolarity,\n+    ) -> RelateResult<'tcx, ty::ImplPolarity> {\n+        if a != b {\n+            Err(TypeError::PolarityMismatch(expected_found(relation, a, b)))\n+        } else {\n+            Ok(a)\n+        }\n+    }\n+}\n+\n impl<'tcx> Relate<'tcx> for ty::TraitPredicate<'tcx> {\n     fn relate<R: TypeRelation<'tcx>>(\n         relation: &mut R,\n@@ -806,6 +820,7 @@ impl<'tcx> Relate<'tcx> for ty::TraitPredicate<'tcx> {\n         Ok(ty::TraitPredicate {\n             trait_ref: relation.relate(a.trait_ref, b.trait_ref)?,\n             constness: relation.relate(a.constness, b.constness)?,\n+            polarity: relation.relate(a.polarity, b.polarity)?,\n         })\n     }\n }"}, {"sha": "d6069395474ab21ddd877c02e804944deafc7d44", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6975afd141d5ced25d1b133afc792dd4988345a6/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6975afd141d5ced25d1b133afc792dd4988345a6/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=6975afd141d5ced25d1b133afc792dd4988345a6", "patch": "@@ -157,7 +157,7 @@ impl fmt::Debug for ty::TraitPredicate<'tcx> {\n         if let ty::BoundConstness::ConstIfConst = self.constness {\n             write!(f, \"~const \")?;\n         }\n-        write!(f, \"TraitPredicate({:?})\", self.trait_ref)\n+        write!(f, \"TraitPredicate({:?}, polarity:{:?})\", self.trait_ref, self.polarity)\n     }\n }\n \n@@ -365,8 +365,11 @@ impl<'a, 'tcx> Lift<'tcx> for ty::ExistentialPredicate<'a> {\n impl<'a, 'tcx> Lift<'tcx> for ty::TraitPredicate<'a> {\n     type Lifted = ty::TraitPredicate<'tcx>;\n     fn lift_to_tcx(self, tcx: TyCtxt<'tcx>) -> Option<ty::TraitPredicate<'tcx>> {\n-        tcx.lift(self.trait_ref)\n-            .map(|trait_ref| ty::TraitPredicate { trait_ref, constness: self.constness })\n+        tcx.lift(self.trait_ref).map(|trait_ref| ty::TraitPredicate {\n+            trait_ref,\n+            constness: self.constness,\n+            polarity: self.polarity,\n+        })\n     }\n }\n \n@@ -591,6 +594,7 @@ impl<'a, 'tcx> Lift<'tcx> for ty::error::TypeError<'a> {\n         Some(match self {\n             Mismatch => Mismatch,\n             ConstnessMismatch(x) => ConstnessMismatch(x),\n+            PolarityMismatch(x) => PolarityMismatch(x),\n             UnsafetyMismatch(x) => UnsafetyMismatch(x),\n             AbiMismatch(x) => AbiMismatch(x),\n             Mutability => Mutability,"}, {"sha": "874de3366d79213ee7499075d518f5a41f3eb58d", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6975afd141d5ced25d1b133afc792dd4988345a6/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6975afd141d5ced25d1b133afc792dd4988345a6/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=6975afd141d5ced25d1b133afc792dd4988345a6", "patch": "@@ -882,6 +882,7 @@ impl<'tcx> PolyTraitRef<'tcx> {\n         self.map_bound(|trait_ref| ty::TraitPredicate {\n             trait_ref,\n             constness: ty::BoundConstness::NotConst,\n+            polarity: ty::ImplPolarity::Positive,\n         })\n     }\n }"}, {"sha": "adb5aa3209c00d80e45bb245bcebcf181ce36c7a", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6975afd141d5ced25d1b133afc792dd4988345a6/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6975afd141d5ced25d1b133afc792dd4988345a6/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=6975afd141d5ced25d1b133afc792dd4988345a6", "patch": "@@ -124,9 +124,11 @@ where\n \n     fn visit_predicate(&mut self, predicate: ty::Predicate<'tcx>) -> ControlFlow<V::BreakTy> {\n         match predicate.kind().skip_binder() {\n-            ty::PredicateKind::Trait(ty::TraitPredicate { trait_ref, constness: _ }) => {\n-                self.visit_trait(trait_ref)\n-            }\n+            ty::PredicateKind::Trait(ty::TraitPredicate {\n+                trait_ref,\n+                constness: _,\n+                polarity: _,\n+            }) => self.visit_trait(trait_ref),\n             ty::PredicateKind::Projection(ty::ProjectionPredicate { projection_ty, ty }) => {\n                 ty.visit_with(self)?;\n                 self.visit_projection_ty(projection_ty)"}, {"sha": "6452b520452d6802b157c023ecf457620a3da1c3", "filename": "compiler/rustc_trait_selection/src/traits/auto_trait.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6975afd141d5ced25d1b133afc792dd4988345a6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6975afd141d5ced25d1b133afc792dd4988345a6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs?ref=6975afd141d5ced25d1b133afc792dd4988345a6", "patch": "@@ -286,6 +286,8 @@ impl AutoTraitFinder<'tcx> {\n                 substs: infcx.tcx.mk_substs_trait(ty, &[]),\n             },\n             constness: ty::BoundConstness::NotConst,\n+            // Auto traits are positive\n+            polarity: ty::ImplPolarity::Positive,\n         }));\n \n         let computed_preds = param_env.caller_bounds().iter();"}, {"sha": "428873b8d3dda8ae2676f93c3527f030deb8bbad", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6975afd141d5ced25d1b133afc792dd4988345a6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6975afd141d5ced25d1b133afc792dd4988345a6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=6975afd141d5ced25d1b133afc792dd4988345a6", "patch": "@@ -804,6 +804,7 @@ pub fn vtable_trait_upcasting_coercion_new_vptr_slot(\n         ty::Binder::dummy(ty::TraitPredicate {\n             trait_ref,\n             constness: ty::BoundConstness::NotConst,\n+            polarity: ty::ImplPolarity::Positive,\n         }),\n     );\n "}, {"sha": "e0098cc92d51569ac0509b08e34024fca73648b1", "filename": "compiler/rustc_trait_selection/src/traits/relationships.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6975afd141d5ced25d1b133afc792dd4988345a6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Frelationships.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6975afd141d5ced25d1b133afc792dd4988345a6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Frelationships.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Frelationships.rs?ref=6975afd141d5ced25d1b133afc792dd4988345a6", "patch": "@@ -44,6 +44,7 @@ pub(crate) fn update<'tcx, T>(\n                             ty::PredicateKind::Trait(ty::TraitPredicate {\n                                 trait_ref,\n                                 constness: predicate.constness,\n+                                polarity: predicate.polarity,\n                             })\n                         })\n                         .to_predicate(infcx.tcx),"}, {"sha": "f0761975c19feae685b5938048b58c864a120041", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6975afd141d5ced25d1b133afc792dd4988345a6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6975afd141d5ced25d1b133afc792dd4988345a6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=6975afd141d5ced25d1b133afc792dd4988345a6", "patch": "@@ -915,6 +915,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                         substs: self.tcx().mk_substs_trait(ty, &[]),\n                     },\n                     constness: ty::BoundConstness::NotConst,\n+                    polarity: ty::ImplPolarity::Positive,\n                 }));\n             copy_obligation.recursion_depth = depth + 1;\n             self.assemble_candidates_from_impls(&copy_obligation, &mut copy_candidates);"}, {"sha": "c17c42c497fb36e9223b85a87ee5f4158749728d", "filename": "compiler/rustc_typeck/src/check/_match.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6975afd141d5ced25d1b133afc792dd4988345a6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6975afd141d5ced25d1b133afc792dd4988345a6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs?ref=6975afd141d5ced25d1b133afc792dd4988345a6", "patch": "@@ -531,6 +531,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                         substs: self.infcx.tcx.mk_substs_trait(outer_ty, &[]),\n                                     },\n                                     constness: t.constness,\n+                                    polarity: t.polarity,\n                                 }));\n                             let obl = Obligation::new(\n                                 o.cause.clone(),"}, {"sha": "4fb422c801b1def85f9c2ae9609eed393584704b", "filename": "compiler/rustc_typeck/src/impl_wf_check/min_specialization.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6975afd141d5ced25d1b133afc792dd4988345a6/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6975afd141d5ced25d1b133afc792dd4988345a6/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs?ref=6975afd141d5ced25d1b133afc792dd4988345a6", "patch": "@@ -382,6 +382,7 @@ fn check_specialization_on<'tcx>(tcx: TyCtxt<'tcx>, predicate: ty::Predicate<'tc\n         ty::PredicateKind::Trait(ty::TraitPredicate {\n             trait_ref,\n             constness: ty::BoundConstness::NotConst,\n+            polarity: _,\n         }) => {\n             if !matches!(\n                 trait_predicate_kind(tcx, predicate),\n@@ -413,6 +414,7 @@ fn trait_predicate_kind<'tcx>(\n         ty::PredicateKind::Trait(ty::TraitPredicate {\n             trait_ref,\n             constness: ty::BoundConstness::NotConst,\n+            polarity: _,\n         }) => Some(tcx.trait_def(trait_ref.def_id).specialization_kind),\n         ty::PredicateKind::Trait(_)\n         | ty::PredicateKind::RegionOutlives(_)"}]}