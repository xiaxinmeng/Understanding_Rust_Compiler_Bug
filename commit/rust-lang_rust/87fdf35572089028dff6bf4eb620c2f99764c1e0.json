{"sha": "87fdf35572089028dff6bf4eb620c2f99764c1e0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3ZmRmMzU1NzIwODkwMjhkZmY2YmY0ZWI2MjBjMmY5OTc2NGMxZTA=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-03-27T14:09:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-27T14:09:48Z"}, "message": "Rollup merge of #65222 - Lucretiel:fold_self, r=kodrAus\n\nProposal: `fold_self` and `try_fold_self` for Iterators\n\nThis pull request proposes & implements two new methods on Iterators: `fold_self` and `try_fold_self`. These are variants of `fold` and `try_fold` that use the first element in the iterator as the initial accumulator.\n\nLet me know if a public feature like this requires an RFC, or if this pull request is sufficient as place for discussion.", "tree": {"sha": "4cf31fd8ec3af094dbe8fa2ab968f26f56928da1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4cf31fd8ec3af094dbe8fa2ab968f26f56928da1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87fdf35572089028dff6bf4eb620c2f99764c1e0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJefgktCRBK7hj4Ov3rIwAAdHIIACDOhTW1EKE5FjVBfBLjNn4A\n5zxs7f7q/bHDQmeQC8QCignlXmZ8Tr8xXzAeJjKz3+J6wyRYIVJcLJveyhEjI4gA\nPkJ4MSYMsGvmJ+uD0NjyzFTSpbLm65QmsOcXttfjHHNGqHnPsWPbRDEqaIv0dKcG\n6BQmBocvkdLLgEIG/Zh2yTy4k1J24sB8Rv3Uib9Q8fKDcybMqUfrXzEWLtgCNXra\n5Y42aMv94f4ihdSWAS35kLi8fRtRtj1Q771gt7wIzcU97T3JAflIKmPOpggzn+xH\nSh88Ap7iOjmxbhBVLVdsLtcCAmNWOe3z+7bcyapyzfoXbh0vfjnGTYrOpDEa56A=\n=Xg+N\n-----END PGP SIGNATURE-----\n", "payload": "tree 4cf31fd8ec3af094dbe8fa2ab968f26f56928da1\nparent 697d6b3f3fa1f163acb5ae0911d7df7f02a54444\nparent 268408f495f5fe225269842837ec1e49b498c881\nauthor Dylan DPC <dylan.dpc@gmail.com> 1585318188 +0100\ncommitter GitHub <noreply@github.com> 1585318188 +0100\n\nRollup merge of #65222 - Lucretiel:fold_self, r=kodrAus\n\nProposal: `fold_self` and `try_fold_self` for Iterators\n\nThis pull request proposes & implements two new methods on Iterators: `fold_self` and `try_fold_self`. These are variants of `fold` and `try_fold` that use the first element in the iterator as the initial accumulator.\n\nLet me know if a public feature like this requires an RFC, or if this pull request is sufficient as place for discussion.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87fdf35572089028dff6bf4eb620c2f99764c1e0", "html_url": "https://github.com/rust-lang/rust/commit/87fdf35572089028dff6bf4eb620c2f99764c1e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87fdf35572089028dff6bf4eb620c2f99764c1e0/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "697d6b3f3fa1f163acb5ae0911d7df7f02a54444", "url": "https://api.github.com/repos/rust-lang/rust/commits/697d6b3f3fa1f163acb5ae0911d7df7f02a54444", "html_url": "https://github.com/rust-lang/rust/commit/697d6b3f3fa1f163acb5ae0911d7df7f02a54444"}, {"sha": "268408f495f5fe225269842837ec1e49b498c881", "url": "https://api.github.com/repos/rust-lang/rust/commits/268408f495f5fe225269842837ec1e49b498c881", "html_url": "https://github.com/rust-lang/rust/commit/268408f495f5fe225269842837ec1e49b498c881"}], "stats": {"total": 55, "additions": 39, "deletions": 16}, "files": [{"sha": "daa880e7cd53b4b35fa5115717dbda8149824c22", "filename": "src/libcore/iter/traits/iterator.rs", "status": "modified", "additions": 39, "deletions": 16, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/87fdf35572089028dff6bf4eb620c2f99764c1e0/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87fdf35572089028dff6bf4eb620c2f99764c1e0/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs?ref=87fdf35572089028dff6bf4eb620c2f99764c1e0", "patch": "@@ -2005,6 +2005,43 @@ pub trait Iterator {\n         self.try_fold(init, ok(f)).unwrap()\n     }\n \n+    /// The same as [`fold()`](#method.fold), but uses the first element in the\n+    /// iterator as the initial value, folding every subsequent element into it.\n+    /// If the iterator is empty, return `None`; otherwise, return the result\n+    /// of the fold.\n+    ///\n+    /// # Example\n+    ///\n+    /// Find the maximum value:\n+    ///\n+    /// ```\n+    /// #![feature(iterator_fold_self)]\n+    ///\n+    /// fn find_max<I>(iter: I) -> Option<I::Item>\n+    ///     where I: Iterator,\n+    ///           I::Item: Ord,\n+    /// {\n+    ///     iter.fold_first(|a, b| {\n+    ///         if a >= b { a } else { b }\n+    ///     })\n+    /// }\n+    /// let a = [10, 20, 5, -23, 0];\n+    /// let b: [u32; 0] = [];\n+    ///\n+    /// assert_eq!(find_max(a.iter()), Some(&20));\n+    /// assert_eq!(find_max(b.iter()), None);\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"iterator_fold_self\", issue = \"68125\")]\n+    fn fold_first<F>(mut self, f: F) -> Option<Self::Item>\n+    where\n+        Self: Sized,\n+        F: FnMut(Self::Item, Self::Item) -> Self::Item,\n+    {\n+        let first = self.next()?;\n+        Some(self.fold(first, f))\n+    }\n+\n     /// Tests if every element of the iterator matches a predicate.\n     ///\n     /// `all()` takes a closure that returns `true` or `false`. It applies\n@@ -2497,7 +2534,7 @@ pub trait Iterator {\n             move |x, y| cmp::max_by(x, y, &mut compare)\n         }\n \n-        fold1(self, fold(compare))\n+        self.fold_first(fold(compare))\n     }\n \n     /// Returns the element that gives the minimum value from the\n@@ -2561,7 +2598,7 @@ pub trait Iterator {\n             move |x, y| cmp::min_by(x, y, &mut compare)\n         }\n \n-        fold1(self, fold(compare))\n+        self.fold_first(fold(compare))\n     }\n \n     /// Reverses an iterator's direction.\n@@ -3214,20 +3251,6 @@ pub trait Iterator {\n     }\n }\n \n-/// Fold an iterator without having to provide an initial value.\n-#[inline]\n-fn fold1<I, F>(mut it: I, f: F) -> Option<I::Item>\n-where\n-    I: Iterator,\n-    F: FnMut(I::Item, I::Item) -> I::Item,\n-{\n-    // start with the first element as our selection. This avoids\n-    // having to use `Option`s inside the loop, translating to a\n-    // sizeable performance gain (6x in one case).\n-    let first = it.next()?;\n-    Some(it.fold(first, f))\n-}\n-\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<I: Iterator + ?Sized> Iterator for &mut I {\n     type Item = I::Item;"}]}