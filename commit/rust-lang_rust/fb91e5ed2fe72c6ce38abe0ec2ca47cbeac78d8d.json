{"sha": "fb91e5ed2fe72c6ce38abe0ec2ca47cbeac78d8d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiOTFlNWVkMmZlNzJjNmNlMzhhYmUwZWMyY2E0N2NiZWFjNzhkOGQ=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-04-22T21:46:45Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-04-26T08:18:47Z"}, "message": "rustc_target: Stop using \"string typing\" for relocation models\n\nIntroduce `enum RelocModel` instead.", "tree": {"sha": "c1079e34d3118a1cf9ee561296a1814253327fe1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1079e34d3118a1cf9ee561296a1814253327fe1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb91e5ed2fe72c6ce38abe0ec2ca47cbeac78d8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb91e5ed2fe72c6ce38abe0ec2ca47cbeac78d8d", "html_url": "https://github.com/rust-lang/rust/commit/fb91e5ed2fe72c6ce38abe0ec2ca47cbeac78d8d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb91e5ed2fe72c6ce38abe0ec2ca47cbeac78d8d/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "019ab732ce63a117cbb446db1488916c5c0bd2a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/019ab732ce63a117cbb446db1488916c5c0bd2a7", "html_url": "https://github.com/rust-lang/rust/commit/019ab732ce63a117cbb446db1488916c5c0bd2a7"}], "stats": {"total": 258, "additions": 150, "deletions": 108}, "files": [{"sha": "8630d41735939a2f562e37b96172bf510dae4f99", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/fb91e5ed2fe72c6ce38abe0ec2ca47cbeac78d8d/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb91e5ed2fe72c6ce38abe0ec2ca47cbeac78d8d/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=fb91e5ed2fe72c6ce38abe0ec2ca47cbeac78d8d", "patch": "@@ -7,7 +7,7 @@ use crate::back::profiling::{\n use crate::base;\n use crate::common;\n use crate::consts;\n-use crate::context::{get_reloc_model, is_pie_binary};\n+use crate::context::is_pie_binary;\n use crate::llvm::{self, DiagnosticInfo, PassManager, SMDiagnostic};\n use crate::llvm_util;\n use crate::type_::Type;\n@@ -25,6 +25,7 @@ use rustc_middle::bug;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::config::{self, Lto, OutputType, Passes, Sanitizer, SwitchWithOptPath};\n use rustc_session::Session;\n+use rustc_target::spec::RelocModel;\n \n use libc::{c_char, c_int, c_uint, c_void, size_t};\n use std::ffi::CString;\n@@ -35,16 +36,6 @@ use std::slice;\n use std::str;\n use std::sync::Arc;\n \n-pub const RELOC_MODEL_ARGS: [(&str, llvm::RelocMode); 7] = [\n-    (\"pic\", llvm::RelocMode::PIC),\n-    (\"static\", llvm::RelocMode::Static),\n-    (\"default\", llvm::RelocMode::Default),\n-    (\"dynamic-no-pic\", llvm::RelocMode::DynamicNoPic),\n-    (\"ropi\", llvm::RelocMode::ROPI),\n-    (\"rwpi\", llvm::RelocMode::RWPI),\n-    (\"ropi-rwpi\", llvm::RelocMode::ROPI_RWPI),\n-];\n-\n pub const CODE_GEN_MODEL_ARGS: &[(&str, llvm::CodeModel)] = &[\n     (\"small\", llvm::CodeModel::Small),\n     (\"kernel\", llvm::CodeModel::Kernel),\n@@ -126,6 +117,17 @@ fn to_pass_builder_opt_level(cfg: config::OptLevel) -> llvm::PassBuilderOptLevel\n     }\n }\n \n+fn to_llvm_relocation_model(relocation_model: RelocModel) -> llvm::RelocMode {\n+    match relocation_model {\n+        RelocModel::Static => llvm::RelocMode::Static,\n+        RelocModel::Pic => llvm::RelocMode::PIC,\n+        RelocModel::DynamicNoPic => llvm::RelocMode::DynamicNoPic,\n+        RelocModel::Ropi => llvm::RelocMode::ROPI,\n+        RelocModel::Rwpi => llvm::RelocMode::RWPI,\n+        RelocModel::RopiRwpi => llvm::RelocMode::ROPI_RWPI,\n+    }\n+}\n+\n // If find_features is true this won't access `sess.crate_types` by assuming\n // that `is_pie_binary` is false. When we discover LLVM target features\n // `sess.crate_types` is uninitialized so we cannot access it.\n@@ -134,7 +136,7 @@ pub fn target_machine_factory(\n     optlvl: config::OptLevel,\n     find_features: bool,\n ) -> Arc<dyn Fn() -> Result<&'static mut llvm::TargetMachine, String> + Send + Sync> {\n-    let reloc_model = get_reloc_model(sess);\n+    let reloc_model = to_llvm_relocation_model(sess.relocation_model());\n \n     let (opt_level, _) = to_llvm_opt_settings(optlvl);\n     let use_softfp = sess.opts.cg.soft_float;"}, {"sha": "f614df6045c59963a64f096c3a5ab4808bc206d9", "filename": "src/librustc_codegen_llvm/context.rs", "status": "modified", "additions": 4, "deletions": 23, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/fb91e5ed2fe72c6ce38abe0ec2ca47cbeac78d8d/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb91e5ed2fe72c6ce38abe0ec2ca47cbeac78d8d/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcontext.rs?ref=fb91e5ed2fe72c6ce38abe0ec2ca47cbeac78d8d", "patch": "@@ -21,7 +21,7 @@ use rustc_session::Session;\n use rustc_span::source_map::{Span, DUMMY_SP};\n use rustc_span::symbol::Symbol;\n use rustc_target::abi::{HasDataLayout, LayoutOf, PointeeInfo, Size, TargetDataLayout, VariantIdx};\n-use rustc_target::spec::{HasTargetSpec, Target};\n+use rustc_target::spec::{HasTargetSpec, RelocModel, Target};\n \n use std::cell::{Cell, RefCell};\n use std::ffi::CStr;\n@@ -87,22 +87,6 @@ pub struct CodegenCx<'ll, 'tcx> {\n     local_gen_sym_counter: Cell<usize>,\n }\n \n-pub fn get_reloc_model(sess: &Session) -> llvm::RelocMode {\n-    let reloc_model_arg = match sess.opts.cg.relocation_model {\n-        Some(ref s) => &s[..],\n-        None => &sess.target.target.options.relocation_model[..],\n-    };\n-\n-    match crate::back::write::RELOC_MODEL_ARGS.iter().find(|&&arg| arg.0 == reloc_model_arg) {\n-        Some(x) => x.1,\n-        _ => {\n-            sess.err(&format!(\"{:?} is not a valid relocation mode\", reloc_model_arg));\n-            sess.abort_if_errors();\n-            bug!();\n-        }\n-    }\n-}\n-\n fn get_tls_model(sess: &Session) -> llvm::ThreadLocalMode {\n     let tls_model_arg = match sess.opts.debugging_opts.tls_model {\n         Some(ref s) => &s[..],\n@@ -119,12 +103,9 @@ fn get_tls_model(sess: &Session) -> llvm::ThreadLocalMode {\n     }\n }\n \n-fn is_any_library(sess: &Session) -> bool {\n-    sess.crate_types.borrow().iter().any(|ty| *ty != config::CrateType::Executable)\n-}\n-\n pub fn is_pie_binary(sess: &Session) -> bool {\n-    !is_any_library(sess) && get_reloc_model(sess) == llvm::RelocMode::PIC\n+    sess.relocation_model() == RelocModel::Pic\n+        && !sess.crate_types.borrow().iter().any(|ty| *ty != config::CrateType::Executable)\n }\n \n fn strip_function_ptr_alignment(data_layout: String) -> String {\n@@ -200,7 +181,7 @@ pub unsafe fn create_module(\n     let llvm_target = SmallCStr::new(&sess.target.target.llvm_target);\n     llvm::LLVMRustSetNormalizedTarget(llmod, llvm_target.as_ptr());\n \n-    if get_reloc_model(sess) == llvm::RelocMode::PIC {\n+    if sess.relocation_model() == RelocModel::Pic {\n         llvm::LLVMRustSetModulePICLevel(llmod);\n     }\n "}, {"sha": "9d6f215084117ea44dc60a91e8ec3984fc047a55", "filename": "src/librustc_codegen_llvm/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fb91e5ed2fe72c6ce38abe0ec2ca47cbeac78d8d/src%2Flibrustc_codegen_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb91e5ed2fe72c6ce38abe0ec2ca47cbeac78d8d/src%2Flibrustc_codegen_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Flib.rs?ref=fb91e5ed2fe72c6ce38abe0ec2ca47cbeac78d8d", "patch": "@@ -201,7 +201,9 @@ impl CodegenBackend for LlvmCodegenBackend {\n         match req {\n             PrintRequest::RelocationModels => {\n                 println!(\"Available relocation models:\");\n-                for &(name, _) in back::write::RELOC_MODEL_ARGS.iter() {\n+                for name in\n+                    &[\"static\", \"pic\", \"dynamic-no-pic\", \"ropi\", \"rwpi\", \"ropi-rwpi\", \"default\"]\n+                {\n                     println!(\"    {}\", name);\n                 }\n                 println!();"}, {"sha": "85e90226f981c1603481dd2bc9c4545dd8e32466", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fb91e5ed2fe72c6ce38abe0ec2ca47cbeac78d8d/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb91e5ed2fe72c6ce38abe0ec2ca47cbeac78d8d/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=fb91e5ed2fe72c6ce38abe0ec2ca47cbeac78d8d", "patch": "@@ -446,7 +446,6 @@ pub struct SanitizerOptions {\n #[derive(Copy, Clone, PartialEq)]\n #[repr(C)]\n pub enum RelocMode {\n-    Default,\n     Static,\n     PIC,\n     DynamicNoPic,"}, {"sha": "9d42db8ec429415f317c3557ede7d364745bf3ff", "filename": "src/librustc_codegen_ssa/back/link.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/fb91e5ed2fe72c6ce38abe0ec2ca47cbeac78d8d/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb91e5ed2fe72c6ce38abe0ec2ca47cbeac78d8d/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs?ref=fb91e5ed2fe72c6ce38abe0ec2ca47cbeac78d8d", "patch": "@@ -12,7 +12,7 @@ use rustc_session::search_paths::PathKind;\n /// need out of the shared crate context before we get rid of it.\n use rustc_session::{filesearch, Session};\n use rustc_span::symbol::Symbol;\n-use rustc_target::spec::{LinkerFlavor, LldFlavor, PanicStrategy, RelroLevel};\n+use rustc_target::spec::{LinkerFlavor, LldFlavor, PanicStrategy, RelocModel, RelroLevel};\n \n use super::archive::ArchiveBuilder;\n use super::command::Command;\n@@ -1352,7 +1352,7 @@ fn add_position_independent_executable_args(\n     if sess.target.target.options.position_independent_executables {\n         let attr_link_args = &*codegen_results.crate_info.link_args;\n         let mut user_defined_link_args = sess.opts.cg.link_args.iter().chain(attr_link_args);\n-        if is_pic(sess)\n+        if sess.relocation_model() == RelocModel::Pic\n             && !sess.crt_static(Some(crate_type))\n             && !user_defined_link_args.any(|x| x == \"-static\")\n         {\n@@ -1992,12 +1992,3 @@ fn are_upstream_rust_objects_already_included(sess: &Session) -> bool {\n         config::Lto::No | config::Lto::ThinLocal => false,\n     }\n }\n-\n-fn is_pic(sess: &Session) -> bool {\n-    let reloc_model_arg = match sess.opts.cg.relocation_model {\n-        Some(ref s) => &s[..],\n-        None => &sess.target.target.options.relocation_model[..],\n-    };\n-\n-    reloc_model_arg == \"pic\"\n-}"}, {"sha": "f0e7581b7605056cafb19bb94a12267db84f5cd5", "filename": "src/librustc_interface/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fb91e5ed2fe72c6ce38abe0ec2ca47cbeac78d8d/src%2Flibrustc_interface%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb91e5ed2fe72c6ce38abe0ec2ca47cbeac78d8d/src%2Flibrustc_interface%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Ftests.rs?ref=fb91e5ed2fe72c6ce38abe0ec2ca47cbeac78d8d", "patch": "@@ -14,7 +14,7 @@ use rustc_session::{build_session, Session};\n use rustc_span::edition::{Edition, DEFAULT_EDITION};\n use rustc_span::symbol::sym;\n use rustc_span::SourceFileHashAlgorithm;\n-use rustc_target::spec::{LinkerFlavor, MergeFunctions, PanicStrategy, RelroLevel};\n+use rustc_target::spec::{LinkerFlavor, MergeFunctions, PanicStrategy, RelocModel, RelroLevel};\n use std::collections::{BTreeMap, BTreeSet};\n use std::iter::FromIterator;\n use std::path::PathBuf;\n@@ -430,7 +430,7 @@ fn test_codegen_options_tracking_hash() {\n     tracked!(prefer_dynamic, true);\n     tracked!(profile_generate, SwitchWithOptPath::Enabled(None));\n     tracked!(profile_use, Some(PathBuf::from(\"abc\")));\n-    tracked!(relocation_model, Some(String::from(\"relocation model\")));\n+    tracked!(relocation_model, Some(RelocModel::Pic));\n     tracked!(soft_float, true);\n     tracked!(target_cpu, Some(String::from(\"abc\")));\n     tracked!(target_feature, String::from(\"all the features, all of them\"));"}, {"sha": "1ab02f84c11a2973e920b88b00ff8d2795e2a906", "filename": "src/librustc_session/config.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fb91e5ed2fe72c6ce38abe0ec2ca47cbeac78d8d/src%2Flibrustc_session%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb91e5ed2fe72c6ce38abe0ec2ca47cbeac78d8d/src%2Flibrustc_session%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fconfig.rs?ref=fb91e5ed2fe72c6ce38abe0ec2ca47cbeac78d8d", "patch": "@@ -1311,10 +1311,6 @@ fn collect_print_requests(\n         prints.push(PrintRequest::TargetFeatures);\n         cg.target_feature = String::new();\n     }\n-    if cg.relocation_model.as_ref().map_or(false, |s| s == \"help\") {\n-        prints.push(PrintRequest::RelocationModels);\n-        cg.relocation_model = None;\n-    }\n     if cg.code_model.as_ref().map_or(false, |s| s == \"help\") {\n         prints.push(PrintRequest::CodeModels);\n         cg.code_model = None;\n@@ -2005,7 +2001,7 @@ crate mod dep_tracking {\n     use crate::utils::NativeLibraryKind;\n     use rustc_feature::UnstableFeatures;\n     use rustc_span::edition::Edition;\n-    use rustc_target::spec::{MergeFunctions, PanicStrategy, RelroLevel, TargetTriple};\n+    use rustc_target::spec::{MergeFunctions, PanicStrategy, RelocModel, RelroLevel, TargetTriple};\n     use std::collections::hash_map::DefaultHasher;\n     use std::collections::BTreeMap;\n     use std::hash::Hash;\n@@ -2053,6 +2049,7 @@ crate mod dep_tracking {\n     impl_dep_tracking_hash_via_hash!(Option<(String, u64)>);\n     impl_dep_tracking_hash_via_hash!(Option<Vec<String>>);\n     impl_dep_tracking_hash_via_hash!(Option<MergeFunctions>);\n+    impl_dep_tracking_hash_via_hash!(Option<RelocModel>);\n     impl_dep_tracking_hash_via_hash!(Option<PanicStrategy>);\n     impl_dep_tracking_hash_via_hash!(Option<RelroLevel>);\n     impl_dep_tracking_hash_via_hash!(Option<lint::Level>);"}, {"sha": "804e929bc812fc42702bc21b012bb0d777c2040c", "filename": "src/librustc_session/options.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/fb91e5ed2fe72c6ce38abe0ec2ca47cbeac78d8d/src%2Flibrustc_session%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb91e5ed2fe72c6ce38abe0ec2ca47cbeac78d8d/src%2Flibrustc_session%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Foptions.rs?ref=fb91e5ed2fe72c6ce38abe0ec2ca47cbeac78d8d", "patch": "@@ -6,7 +6,7 @@ use crate::search_paths::SearchPath;\n use crate::utils::NativeLibraryKind;\n \n use rustc_target::spec::TargetTriple;\n-use rustc_target::spec::{LinkerFlavor, MergeFunctions, PanicStrategy, RelroLevel};\n+use rustc_target::spec::{LinkerFlavor, MergeFunctions, PanicStrategy, RelocModel, RelroLevel};\n \n use rustc_feature::UnstableFeatures;\n use rustc_span::edition::Edition;\n@@ -265,14 +265,13 @@ macro_rules! options {\n         pub const parse_merge_functions: &str = \"one of: `disabled`, `trampolines`, or `aliases`\";\n         pub const parse_symbol_mangling_version: &str = \"either `legacy` or `v0` (RFC 2603)\";\n         pub const parse_src_file_hash: &str = \"either `md5` or `sha1`\";\n+        pub const parse_relocation_model: &str =\n+            \"one of supported relocation models (`rustc --print relocation-models`)\";\n     }\n \n     #[allow(dead_code)]\n     mod $mod_set {\n-        use super::{$struct_name, Passes, Sanitizer, LtoCli, LinkerPluginLto, SwitchWithOptPath,\n-            SymbolManglingVersion, CFGuard, SourceFileHashAlgorithm};\n-        use rustc_target::spec::{LinkerFlavor, MergeFunctions, PanicStrategy, RelroLevel};\n-        use std::path::PathBuf;\n+        use super::*;\n         use std::str::FromStr;\n \n         // Sometimes different options need to build a common structure.\n@@ -598,6 +597,15 @@ macro_rules! options {\n             true\n         }\n \n+        fn parse_relocation_model(slot: &mut Option<RelocModel>, v: Option<&str>) -> bool {\n+            match v.and_then(|s| RelocModel::from_str(s).ok()) {\n+                Some(relocation_model) => *slot = Some(relocation_model),\n+                None if v == Some(\"default\") => *slot = None,\n+                _ => return false,\n+            }\n+            true\n+        }\n+\n         fn parse_symbol_mangling_version(\n             slot: &mut SymbolManglingVersion,\n             v: Option<&str>,\n@@ -697,7 +705,7 @@ options! {CodegenOptions, CodegenSetter, basic_codegen_options,\n         \"compile the program with profiling instrumentation\"),\n     profile_use: Option<PathBuf> = (None, parse_opt_pathbuf, [TRACKED],\n         \"use the given `.profdata` file for profile-guided optimization\"),\n-    relocation_model: Option<String> = (None, parse_opt_string, [TRACKED],\n+    relocation_model: Option<RelocModel> = (None, parse_relocation_model, [TRACKED],\n         \"choose the relocation model to use (`rustc --print relocation-models` for details)\"),\n     remark: Passes = (Passes::Some(Vec::new()), parse_passes, [UNTRACKED],\n         \"print remarks for these optimization passes (space separated, or \\\"all\\\")\"),"}, {"sha": "226d93920958fe2905414065b350333d25698c33", "filename": "src/librustc_session/session.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fb91e5ed2fe72c6ce38abe0ec2ca47cbeac78d8d/src%2Flibrustc_session%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb91e5ed2fe72c6ce38abe0ec2ca47cbeac78d8d/src%2Flibrustc_session%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fsession.rs?ref=fb91e5ed2fe72c6ce38abe0ec2ca47cbeac78d8d", "patch": "@@ -22,7 +22,7 @@ use rustc_errors::{Applicability, DiagnosticBuilder, DiagnosticId, ErrorReported\n use rustc_span::edition::Edition;\n use rustc_span::source_map::{self, FileLoader, MultiSpan, RealFileLoader, SourceMap, Span};\n use rustc_span::SourceFileHashAlgorithm;\n-use rustc_target::spec::{PanicStrategy, RelroLevel, Target, TargetTriple};\n+use rustc_target::spec::{PanicStrategy, RelocModel, RelroLevel, Target, TargetTriple};\n \n use std::cell::{self, RefCell};\n use std::env;\n@@ -584,6 +584,10 @@ impl Session {\n         }\n     }\n \n+    pub fn relocation_model(&self) -> RelocModel {\n+        self.opts.cg.relocation_model.unwrap_or(self.target.target.options.relocation_model)\n+    }\n+\n     pub fn must_not_eliminate_frame_pointers(&self) -> bool {\n         // \"mcount\" function relies on stack pointer.\n         // See <https://sourceware.org/binutils/docs/gprof/Implementation.html>."}, {"sha": "7177c4e251e771082d905b6aacd211f9576aa262", "filename": "src/librustc_target/spec/aarch64_unknown_none.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fb91e5ed2fe72c6ce38abe0ec2ca47cbeac78d8d/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb91e5ed2fe72c6ce38abe0ec2ca47cbeac78d8d/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_none.rs?ref=fb91e5ed2fe72c6ce38abe0ec2ca47cbeac78d8d", "patch": "@@ -6,14 +6,14 @@\n //\n // For example, `-C target-cpu=cortex-a53`.\n \n-use super::{LinkerFlavor, LldFlavor, PanicStrategy, Target, TargetOptions};\n+use super::{LinkerFlavor, LldFlavor, PanicStrategy, RelocModel, Target, TargetOptions};\n \n pub fn target() -> Result<Target, String> {\n     let opts = TargetOptions {\n         linker: Some(\"rust-lld\".to_owned()),\n         features: \"+strict-align,+neon,+fp-armv8\".to_string(),\n         executables: true,\n-        relocation_model: \"static\".to_string(),\n+        relocation_model: RelocModel::Static,\n         disable_redzone: true,\n         linker_is_gnu: true,\n         max_atomic_width: Some(128),"}, {"sha": "986300c677dfc2e82aec968616fee05f3bb40346", "filename": "src/librustc_target/spec/aarch64_unknown_none_softfloat.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fb91e5ed2fe72c6ce38abe0ec2ca47cbeac78d8d/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_none_softfloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb91e5ed2fe72c6ce38abe0ec2ca47cbeac78d8d/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_none_softfloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_none_softfloat.rs?ref=fb91e5ed2fe72c6ce38abe0ec2ca47cbeac78d8d", "patch": "@@ -6,14 +6,14 @@\n //\n // For example, `-C target-cpu=cortex-a53`.\n \n-use super::{LinkerFlavor, LldFlavor, PanicStrategy, Target, TargetOptions};\n+use super::{LinkerFlavor, LldFlavor, PanicStrategy, RelocModel, Target, TargetOptions};\n \n pub fn target() -> Result<Target, String> {\n     let opts = TargetOptions {\n         linker: Some(\"rust-lld\".to_owned()),\n         features: \"+strict-align,-neon,-fp-armv8\".to_string(),\n         executables: true,\n-        relocation_model: \"static\".to_string(),\n+        relocation_model: RelocModel::Static,\n         disable_redzone: true,\n         linker_is_gnu: true,\n         max_atomic_width: Some(128),"}, {"sha": "a1f68f6706a2aabc2b3526330c0609d4d12a9fb8", "filename": "src/librustc_target/spec/armebv7r_none_eabi.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fb91e5ed2fe72c6ce38abe0ec2ca47cbeac78d8d/src%2Flibrustc_target%2Fspec%2Farmebv7r_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb91e5ed2fe72c6ce38abe0ec2ca47cbeac78d8d/src%2Flibrustc_target%2Fspec%2Farmebv7r_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmebv7r_none_eabi.rs?ref=fb91e5ed2fe72c6ce38abe0ec2ca47cbeac78d8d", "patch": "@@ -1,6 +1,7 @@\n // Targets the Big endian Cortex-R4/R5 processor (ARMv7-R)\n \n-use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy, RelocModel};\n+use crate::spec::{Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     Ok(Target {\n@@ -18,7 +19,7 @@ pub fn target() -> TargetResult {\n         options: TargetOptions {\n             executables: true,\n             linker: Some(\"rust-lld\".to_owned()),\n-            relocation_model: \"static\".to_string(),\n+            relocation_model: RelocModel::Static,\n             panic_strategy: PanicStrategy::Abort,\n             max_atomic_width: Some(32),\n             abi_blacklist: super::arm_base::abi_blacklist(),"}, {"sha": "4d81c21f52a7b2f16e171c9149661ce6a652dbf2", "filename": "src/librustc_target/spec/armebv7r_none_eabihf.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fb91e5ed2fe72c6ce38abe0ec2ca47cbeac78d8d/src%2Flibrustc_target%2Fspec%2Farmebv7r_none_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb91e5ed2fe72c6ce38abe0ec2ca47cbeac78d8d/src%2Flibrustc_target%2Fspec%2Farmebv7r_none_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmebv7r_none_eabihf.rs?ref=fb91e5ed2fe72c6ce38abe0ec2ca47cbeac78d8d", "patch": "@@ -1,6 +1,7 @@\n // Targets the Cortex-R4F/R5F processor (ARMv7-R)\n \n-use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy, RelocModel};\n+use crate::spec::{Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     Ok(Target {\n@@ -18,7 +19,7 @@ pub fn target() -> TargetResult {\n         options: TargetOptions {\n             executables: true,\n             linker: Some(\"rust-lld\".to_owned()),\n-            relocation_model: \"static\".to_string(),\n+            relocation_model: RelocModel::Static,\n             panic_strategy: PanicStrategy::Abort,\n             features: \"+vfp3,-d32,-fp16\".to_string(),\n             max_atomic_width: Some(32),"}, {"sha": "09f1494e81cdb8b20786c7e21985517509e006d7", "filename": "src/librustc_target/spec/armv7a_none_eabi.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fb91e5ed2fe72c6ce38abe0ec2ca47cbeac78d8d/src%2Flibrustc_target%2Fspec%2Farmv7a_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb91e5ed2fe72c6ce38abe0ec2ca47cbeac78d8d/src%2Flibrustc_target%2Fspec%2Farmv7a_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7a_none_eabi.rs?ref=fb91e5ed2fe72c6ce38abe0ec2ca47cbeac78d8d", "patch": "@@ -17,14 +17,14 @@\n // - `relocation-model` set to `static`; also no PIE, no relro and no dynamic\n // linking. rationale: matches `thumb` targets\n \n-use super::{LinkerFlavor, LldFlavor, PanicStrategy, Target, TargetOptions};\n+use super::{LinkerFlavor, LldFlavor, PanicStrategy, RelocModel, Target, TargetOptions};\n \n pub fn target() -> Result<Target, String> {\n     let opts = TargetOptions {\n         linker: Some(\"rust-lld\".to_owned()),\n         features: \"+v7,+thumb2,+soft-float,-neon,+strict-align\".to_string(),\n         executables: true,\n-        relocation_model: \"static\".to_string(),\n+        relocation_model: RelocModel::Static,\n         disable_redzone: true,\n         max_atomic_width: Some(64),\n         panic_strategy: PanicStrategy::Abort,"}, {"sha": "653ca76435bc5341f6e75f7cd3208e7d455cb060", "filename": "src/librustc_target/spec/armv7a_none_eabihf.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fb91e5ed2fe72c6ce38abe0ec2ca47cbeac78d8d/src%2Flibrustc_target%2Fspec%2Farmv7a_none_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb91e5ed2fe72c6ce38abe0ec2ca47cbeac78d8d/src%2Flibrustc_target%2Fspec%2Farmv7a_none_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7a_none_eabihf.rs?ref=fb91e5ed2fe72c6ce38abe0ec2ca47cbeac78d8d", "patch": "@@ -5,14 +5,14 @@\n // changes (list in `armv7a_none_eabi.rs`) to bring it closer to the bare-metal\n // `thumb` & `aarch64` targets.\n \n-use super::{LinkerFlavor, LldFlavor, PanicStrategy, Target, TargetOptions};\n+use super::{LinkerFlavor, LldFlavor, PanicStrategy, RelocModel, Target, TargetOptions};\n \n pub fn target() -> Result<Target, String> {\n     let opts = TargetOptions {\n         linker: Some(\"rust-lld\".to_owned()),\n         features: \"+v7,+vfp3,-d32,+thumb2,-neon,+strict-align\".to_string(),\n         executables: true,\n-        relocation_model: \"static\".to_string(),\n+        relocation_model: RelocModel::Static,\n         disable_redzone: true,\n         max_atomic_width: Some(64),\n         panic_strategy: PanicStrategy::Abort,"}, {"sha": "29dfa170397361c559c1cbb22717691d61231ec0", "filename": "src/librustc_target/spec/armv7r_none_eabi.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fb91e5ed2fe72c6ce38abe0ec2ca47cbeac78d8d/src%2Flibrustc_target%2Fspec%2Farmv7r_none_eabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb91e5ed2fe72c6ce38abe0ec2ca47cbeac78d8d/src%2Flibrustc_target%2Fspec%2Farmv7r_none_eabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7r_none_eabi.rs?ref=fb91e5ed2fe72c6ce38abe0ec2ca47cbeac78d8d", "patch": "@@ -1,6 +1,7 @@\n // Targets the Little-endian Cortex-R4/R5 processor (ARMv7-R)\n \n-use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy, RelocModel};\n+use crate::spec::{Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     Ok(Target {\n@@ -18,7 +19,7 @@ pub fn target() -> TargetResult {\n         options: TargetOptions {\n             executables: true,\n             linker: Some(\"rust-lld\".to_owned()),\n-            relocation_model: \"static\".to_string(),\n+            relocation_model: RelocModel::Static,\n             panic_strategy: PanicStrategy::Abort,\n             max_atomic_width: Some(32),\n             abi_blacklist: super::arm_base::abi_blacklist(),"}, {"sha": "e6b0187c3313aadf8c43a09140114812af11f454", "filename": "src/librustc_target/spec/armv7r_none_eabihf.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fb91e5ed2fe72c6ce38abe0ec2ca47cbeac78d8d/src%2Flibrustc_target%2Fspec%2Farmv7r_none_eabihf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb91e5ed2fe72c6ce38abe0ec2ca47cbeac78d8d/src%2Flibrustc_target%2Fspec%2Farmv7r_none_eabihf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Farmv7r_none_eabihf.rs?ref=fb91e5ed2fe72c6ce38abe0ec2ca47cbeac78d8d", "patch": "@@ -1,6 +1,7 @@\n // Targets the Little-endian Cortex-R4F/R5F processor (ARMv7-R)\n \n-use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy, RelocModel};\n+use crate::spec::{Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     Ok(Target {\n@@ -18,7 +19,7 @@ pub fn target() -> TargetResult {\n         options: TargetOptions {\n             executables: true,\n             linker: Some(\"rust-lld\".to_owned()),\n-            relocation_model: \"static\".to_string(),\n+            relocation_model: RelocModel::Static,\n             panic_strategy: PanicStrategy::Abort,\n             features: \"+vfp3,-d32,-fp16\".to_string(),\n             max_atomic_width: Some(32),"}, {"sha": "cb12055290e2e60e4964b13aeab6ed612ba0ee74", "filename": "src/librustc_target/spec/hermit_base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fb91e5ed2fe72c6ce38abe0ec2ca47cbeac78d8d/src%2Flibrustc_target%2Fspec%2Fhermit_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb91e5ed2fe72c6ce38abe0ec2ca47cbeac78d8d/src%2Flibrustc_target%2Fspec%2Fhermit_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fhermit_base.rs?ref=fb91e5ed2fe72c6ce38abe0ec2ca47cbeac78d8d", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{LinkArgs, LinkerFlavor, LldFlavor, PanicStrategy, TargetOptions};\n+use crate::spec::{LinkArgs, LinkerFlavor, LldFlavor, PanicStrategy, RelocModel, TargetOptions};\n \n pub fn opts() -> TargetOptions {\n     let mut pre_link_args = LinkArgs::new();\n@@ -15,7 +15,7 @@ pub fn opts() -> TargetOptions {\n         pre_link_args,\n         panic_strategy: PanicStrategy::Abort,\n         position_independent_executables: true,\n-        relocation_model: \"static\".to_string(),\n+        relocation_model: RelocModel::Static,\n         target_family: None,\n         tls_model: \"initial-exec\".to_string(),\n         ..Default::default()"}, {"sha": "11599fda4090660e8325bd599764b50425615a2d", "filename": "src/librustc_target/spec/hermit_kernel_base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fb91e5ed2fe72c6ce38abe0ec2ca47cbeac78d8d/src%2Flibrustc_target%2Fspec%2Fhermit_kernel_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb91e5ed2fe72c6ce38abe0ec2ca47cbeac78d8d/src%2Flibrustc_target%2Fspec%2Fhermit_kernel_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fhermit_kernel_base.rs?ref=fb91e5ed2fe72c6ce38abe0ec2ca47cbeac78d8d", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{LinkArgs, LinkerFlavor, LldFlavor, PanicStrategy, TargetOptions};\n+use crate::spec::{LinkArgs, LinkerFlavor, LldFlavor, PanicStrategy, RelocModel, TargetOptions};\n \n pub fn opts() -> TargetOptions {\n     let mut pre_link_args = LinkArgs::new();\n@@ -16,7 +16,7 @@ pub fn opts() -> TargetOptions {\n         pre_link_args,\n         panic_strategy: PanicStrategy::Abort,\n         position_independent_executables: true,\n-        relocation_model: \"static\".to_string(),\n+        relocation_model: RelocModel::Static,\n         target_family: None,\n         tls_model: \"initial-exec\".to_string(),\n         ..Default::default()"}, {"sha": "201d6a0fff93b071c4333cff83ccbed2e5960b3b", "filename": "src/librustc_target/spec/linux_kernel_base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fb91e5ed2fe72c6ce38abe0ec2ca47cbeac78d8d/src%2Flibrustc_target%2Fspec%2Flinux_kernel_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb91e5ed2fe72c6ce38abe0ec2ca47cbeac78d8d/src%2Flibrustc_target%2Fspec%2Flinux_kernel_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Flinux_kernel_base.rs?ref=fb91e5ed2fe72c6ce38abe0ec2ca47cbeac78d8d", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{LinkArgs, LinkerFlavor, PanicStrategy, RelroLevel, TargetOptions};\n+use crate::spec::{LinkArgs, LinkerFlavor, PanicStrategy, RelocModel, RelroLevel, TargetOptions};\n \n pub fn opts() -> TargetOptions {\n     let mut pre_link_args = LinkArgs::new();\n@@ -16,7 +16,7 @@ pub fn opts() -> TargetOptions {\n         position_independent_executables: true,\n         needs_plt: true,\n         relro_level: RelroLevel::Full,\n-        relocation_model: \"static\".to_string(),\n+        relocation_model: RelocModel::Static,\n         target_family: Some(\"unix\".to_string()),\n         pre_link_args,\n "}, {"sha": "77fc78e81482c360625caec7206cb205576c5514", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 56, "deletions": 4, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/fb91e5ed2fe72c6ce38abe0ec2ca47cbeac78d8d/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb91e5ed2fe72c6ce38abe0ec2ca47cbeac78d8d/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=fb91e5ed2fe72c6ce38abe0ec2ca47cbeac78d8d", "patch": "@@ -265,6 +265,46 @@ impl ToJson for MergeFunctions {\n     }\n }\n \n+#[derive(Clone, Copy, PartialEq, Hash, Debug)]\n+pub enum RelocModel {\n+    Static,\n+    Pic,\n+    DynamicNoPic,\n+    Ropi,\n+    Rwpi,\n+    RopiRwpi,\n+}\n+\n+impl FromStr for RelocModel {\n+    type Err = ();\n+\n+    fn from_str(s: &str) -> Result<RelocModel, ()> {\n+        Ok(match s {\n+            \"static\" => RelocModel::Static,\n+            \"pic\" => RelocModel::Pic,\n+            \"dynamic-no-pic\" => RelocModel::DynamicNoPic,\n+            \"ropi\" => RelocModel::Ropi,\n+            \"rwpi\" => RelocModel::Rwpi,\n+            \"ropi-rwpi\" => RelocModel::RopiRwpi,\n+            _ => return Err(()),\n+        })\n+    }\n+}\n+\n+impl ToJson for RelocModel {\n+    fn to_json(&self) -> Json {\n+        match *self {\n+            RelocModel::Static => \"static\",\n+            RelocModel::Pic => \"pic\",\n+            RelocModel::DynamicNoPic => \"dynamic-no-pic\",\n+            RelocModel::Ropi => \"ropi\",\n+            RelocModel::Rwpi => \"rwpi\",\n+            RelocModel::RopiRwpi => \"ropi-rwpi\",\n+        }\n+        .to_json()\n+    }\n+}\n+\n pub enum LoadTargetError {\n     BuiltinTargetNotFound(String),\n     Other(String),\n@@ -614,8 +654,8 @@ pub struct TargetOptions {\n     /// libraries. Defaults to false.\n     pub executables: bool,\n     /// Relocation model to use in object file. Corresponds to `llc\n-    /// -relocation-model=$relocation_model`. Defaults to \"pic\".\n-    pub relocation_model: String,\n+    /// -relocation-model=$relocation_model`. Defaults to `Pic`.\n+    pub relocation_model: RelocModel,\n     /// Code model to use. Corresponds to `llc -code-model=$code_model`.\n     pub code_model: Option<String>,\n     /// TLS model to use. Options are \"global-dynamic\" (default), \"local-dynamic\", \"initial-exec\"\n@@ -821,7 +861,7 @@ impl Default for TargetOptions {\n             dynamic_linking: false,\n             only_cdylib: false,\n             executables: false,\n-            relocation_model: \"pic\".to_string(),\n+            relocation_model: RelocModel::Pic,\n             code_model: None,\n             tls_model: \"global-dynamic\".to_string(),\n             disable_redzone: false,\n@@ -1008,6 +1048,18 @@ impl Target {\n                     Some(Ok(()))\n                 })).unwrap_or(Ok(()))\n             } );\n+            ($key_name:ident, RelocModel) => ( {\n+                let name = (stringify!($key_name)).replace(\"_\", \"-\");\n+                obj.find(&name[..]).and_then(|o| o.as_string().and_then(|s| {\n+                    match s.parse::<RelocModel>() {\n+                        Ok(relocation_model) => base.options.$key_name = relocation_model,\n+                        _ => return Some(Err(format!(\"'{}' is not a valid relocation model. \\\n+                                                      Run `rustc --print relocation-models` to \\\n+                                                      see the list of supported values.\", s))),\n+                    }\n+                    Some(Ok(()))\n+                })).unwrap_or(Ok(()))\n+            } );\n             ($key_name:ident, PanicStrategy) => ( {\n                 let name = (stringify!($key_name)).replace(\"_\", \"-\");\n                 obj.find(&name[..]).and_then(|o| o.as_string().and_then(|s| {\n@@ -1146,7 +1198,7 @@ impl Target {\n         key!(dynamic_linking, bool);\n         key!(only_cdylib, bool);\n         key!(executables, bool);\n-        key!(relocation_model);\n+        key!(relocation_model, RelocModel)?;\n         key!(code_model, optional);\n         key!(tls_model);\n         key!(disable_redzone, bool);"}, {"sha": "c6d0308f8f82feec5ef3022e3dab8b44a304cb12", "filename": "src/librustc_target/spec/msp430_none_elf.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fb91e5ed2fe72c6ce38abe0ec2ca47cbeac78d8d/src%2Flibrustc_target%2Fspec%2Fmsp430_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb91e5ed2fe72c6ce38abe0ec2ca47cbeac78d8d/src%2Flibrustc_target%2Fspec%2Fmsp430_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmsp430_none_elf.rs?ref=fb91e5ed2fe72c6ce38abe0ec2ca47cbeac78d8d", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{LinkerFlavor, PanicStrategy, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, PanicStrategy, RelocModel, Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     Ok(Target {\n@@ -40,7 +40,7 @@ pub fn target() -> TargetResult {\n \n             // Similarly, one almost always never wants to use relocatable\n             // code because of the extra costs it involves.\n-            relocation_model: \"static\".to_string(),\n+            relocation_model: RelocModel::Static,\n \n             // Right now we invoke an external assembler and this isn't\n             // compatible with multiple codegen units, and plus we probably"}, {"sha": "aade1e708232e502f6105333fd3b1521bdc5563d", "filename": "src/librustc_target/spec/riscv32i_unknown_none_elf.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fb91e5ed2fe72c6ce38abe0ec2ca47cbeac78d8d/src%2Flibrustc_target%2Fspec%2Friscv32i_unknown_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb91e5ed2fe72c6ce38abe0ec2ca47cbeac78d8d/src%2Flibrustc_target%2Fspec%2Friscv32i_unknown_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Friscv32i_unknown_none_elf.rs?ref=fb91e5ed2fe72c6ce38abe0ec2ca47cbeac78d8d", "patch": "@@ -1,4 +1,5 @@\n-use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy, RelocModel};\n+use crate::spec::{Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     Ok(Target {\n@@ -21,7 +22,7 @@ pub fn target() -> TargetResult {\n             features: String::new(),\n             executables: true,\n             panic_strategy: PanicStrategy::Abort,\n-            relocation_model: \"static\".to_string(),\n+            relocation_model: RelocModel::Static,\n             emit_debug_gdb_scripts: false,\n             abi_blacklist: super::riscv_base::abi_blacklist(),\n             eliminate_frame_pointer: false,"}, {"sha": "e2990eeb826f72972ec8ab715231ecd1e11ee4e9", "filename": "src/librustc_target/spec/riscv32imac_unknown_none_elf.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fb91e5ed2fe72c6ce38abe0ec2ca47cbeac78d8d/src%2Flibrustc_target%2Fspec%2Friscv32imac_unknown_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb91e5ed2fe72c6ce38abe0ec2ca47cbeac78d8d/src%2Flibrustc_target%2Fspec%2Friscv32imac_unknown_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Friscv32imac_unknown_none_elf.rs?ref=fb91e5ed2fe72c6ce38abe0ec2ca47cbeac78d8d", "patch": "@@ -1,4 +1,5 @@\n-use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy, RelocModel};\n+use crate::spec::{Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     Ok(Target {\n@@ -21,7 +22,7 @@ pub fn target() -> TargetResult {\n             features: \"+m,+a,+c\".to_string(),\n             executables: true,\n             panic_strategy: PanicStrategy::Abort,\n-            relocation_model: \"static\".to_string(),\n+            relocation_model: RelocModel::Static,\n             emit_debug_gdb_scripts: false,\n             abi_blacklist: super::riscv_base::abi_blacklist(),\n             eliminate_frame_pointer: false,"}, {"sha": "55a4d58dfccca6083e89a5d7902959d6830c9e1f", "filename": "src/librustc_target/spec/riscv32imc_unknown_none_elf.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fb91e5ed2fe72c6ce38abe0ec2ca47cbeac78d8d/src%2Flibrustc_target%2Fspec%2Friscv32imc_unknown_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb91e5ed2fe72c6ce38abe0ec2ca47cbeac78d8d/src%2Flibrustc_target%2Fspec%2Friscv32imc_unknown_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Friscv32imc_unknown_none_elf.rs?ref=fb91e5ed2fe72c6ce38abe0ec2ca47cbeac78d8d", "patch": "@@ -1,4 +1,5 @@\n-use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy, RelocModel};\n+use crate::spec::{Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     Ok(Target {\n@@ -21,7 +22,7 @@ pub fn target() -> TargetResult {\n             features: \"+m,+c\".to_string(),\n             executables: true,\n             panic_strategy: PanicStrategy::Abort,\n-            relocation_model: \"static\".to_string(),\n+            relocation_model: RelocModel::Static,\n             emit_debug_gdb_scripts: false,\n             abi_blacklist: super::riscv_base::abi_blacklist(),\n             eliminate_frame_pointer: false,"}, {"sha": "9dbbcb1f4bd6e3bcb155e52035ac8e8a44d768b3", "filename": "src/librustc_target/spec/riscv64gc_unknown_none_elf.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fb91e5ed2fe72c6ce38abe0ec2ca47cbeac78d8d/src%2Flibrustc_target%2Fspec%2Friscv64gc_unknown_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb91e5ed2fe72c6ce38abe0ec2ca47cbeac78d8d/src%2Flibrustc_target%2Fspec%2Friscv64gc_unknown_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Friscv64gc_unknown_none_elf.rs?ref=fb91e5ed2fe72c6ce38abe0ec2ca47cbeac78d8d", "patch": "@@ -1,4 +1,5 @@\n-use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy, RelocModel};\n+use crate::spec::{Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     Ok(Target {\n@@ -21,7 +22,7 @@ pub fn target() -> TargetResult {\n             features: \"+m,+a,+f,+d,+c\".to_string(),\n             executables: true,\n             panic_strategy: PanicStrategy::Abort,\n-            relocation_model: \"static\".to_string(),\n+            relocation_model: RelocModel::Static,\n             code_model: Some(\"medium\".to_string()),\n             emit_debug_gdb_scripts: false,\n             abi_blacklist: super::riscv_base::abi_blacklist(),"}, {"sha": "7e9390561a7007873c073f678de15e2ee6d8472e", "filename": "src/librustc_target/spec/riscv64imac_unknown_none_elf.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fb91e5ed2fe72c6ce38abe0ec2ca47cbeac78d8d/src%2Flibrustc_target%2Fspec%2Friscv64imac_unknown_none_elf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb91e5ed2fe72c6ce38abe0ec2ca47cbeac78d8d/src%2Flibrustc_target%2Fspec%2Friscv64imac_unknown_none_elf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Friscv64imac_unknown_none_elf.rs?ref=fb91e5ed2fe72c6ce38abe0ec2ca47cbeac78d8d", "patch": "@@ -1,4 +1,5 @@\n-use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy, Target, TargetOptions, TargetResult};\n+use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy, RelocModel};\n+use crate::spec::{Target, TargetOptions, TargetResult};\n \n pub fn target() -> TargetResult {\n     Ok(Target {\n@@ -21,7 +22,7 @@ pub fn target() -> TargetResult {\n             features: \"+m,+a,+c\".to_string(),\n             executables: true,\n             panic_strategy: PanicStrategy::Abort,\n-            relocation_model: \"static\".to_string(),\n+            relocation_model: RelocModel::Static,\n             code_model: Some(\"medium\".to_string()),\n             emit_debug_gdb_scripts: false,\n             abi_blacklist: super::riscv_base::abi_blacklist(),"}, {"sha": "646a149a33621c2a752161681900cf6ff4b8abec", "filename": "src/librustc_target/spec/thumb_base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fb91e5ed2fe72c6ce38abe0ec2ca47cbeac78d8d/src%2Flibrustc_target%2Fspec%2Fthumb_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb91e5ed2fe72c6ce38abe0ec2ca47cbeac78d8d/src%2Flibrustc_target%2Fspec%2Fthumb_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fthumb_base.rs?ref=fb91e5ed2fe72c6ce38abe0ec2ca47cbeac78d8d", "patch": "@@ -27,7 +27,7 @@\n // differentiate these targets from our other `arm(v7)-*-*-gnueabi(hf)` targets in the context of\n // build scripts / gcc flags.\n \n-use crate::spec::{PanicStrategy, TargetOptions};\n+use crate::spec::{PanicStrategy, RelocModel, TargetOptions};\n \n pub fn opts() -> TargetOptions {\n     // See rust-lang/rfcs#1645 for a discussion about these defaults\n@@ -40,7 +40,7 @@ pub fn opts() -> TargetOptions {\n         panic_strategy: PanicStrategy::Abort,\n         // Similarly, one almost always never wants to use relocatable code because of the extra\n         // costs it involves.\n-        relocation_model: \"static\".to_string(),\n+        relocation_model: RelocModel::Static,\n         abi_blacklist: super::arm_base::abi_blacklist(),\n         // When this section is added a volatile load to its start address is also generated. This\n         // volatile load is a footgun as it can end up loading an invalid memory address, depending"}, {"sha": "08bade2abf4a9ba8515368cddb1e91182c021e3f", "filename": "src/librustc_target/spec/wasm32_base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fb91e5ed2fe72c6ce38abe0ec2ca47cbeac78d8d/src%2Flibrustc_target%2Fspec%2Fwasm32_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb91e5ed2fe72c6ce38abe0ec2ca47cbeac78d8d/src%2Flibrustc_target%2Fspec%2Fwasm32_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fwasm32_base.rs?ref=fb91e5ed2fe72c6ce38abe0ec2ca47cbeac78d8d", "patch": "@@ -1,4 +1,4 @@\n-use super::{LinkerFlavor, LldFlavor, PanicStrategy, TargetOptions};\n+use super::{LinkerFlavor, LldFlavor, PanicStrategy, RelocModel, TargetOptions};\n use std::collections::BTreeMap;\n \n pub fn options() -> TargetOptions {\n@@ -130,7 +130,7 @@ pub fn options() -> TargetOptions {\n         // that eventually we can ship a `pic`-compatible standard library which\n         // works with `static` as well (or works with some method of generating\n         // non-relative calls and such later on).\n-        relocation_model: \"static\".to_string(),\n+        relocation_model: RelocModel::Static,\n \n         // When the atomics feature is activated then these two keys matter,\n         // otherwise they're basically ignored by the standard library. In this"}, {"sha": "95c5eb2f183e41ac2091c5aa6c778646ea3a012c", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fb91e5ed2fe72c6ce38abe0ec2ca47cbeac78d8d/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/fb91e5ed2fe72c6ce38abe0ec2ca47cbeac78d8d/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=fb91e5ed2fe72c6ce38abe0ec2ca47cbeac78d8d", "patch": "@@ -347,7 +347,6 @@ static PassBuilder::OptimizationLevel fromRust(LLVMRustPassBuilderOptLevel Level\n }\n \n enum class LLVMRustRelocMode {\n-  Default,\n   Static,\n   PIC,\n   DynamicNoPic,\n@@ -356,10 +355,8 @@ enum class LLVMRustRelocMode {\n   ROPIRWPI,\n };\n \n-static Optional<Reloc::Model> fromRust(LLVMRustRelocMode RustReloc) {\n+static Reloc::Model fromRust(LLVMRustRelocMode RustReloc) {\n   switch (RustReloc) {\n-  case LLVMRustRelocMode::Default:\n-    return None;\n   case LLVMRustRelocMode::Static:\n     return Reloc::Static;\n   case LLVMRustRelocMode::PIC:"}]}