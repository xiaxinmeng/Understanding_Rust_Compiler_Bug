{"sha": "5242e8d2bad01beec7c841d20952cb230bc9fd84", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyNDJlOGQyYmFkMDFiZWVjN2M4NDFkMjA5NTJjYjIzMGJjOWZkODQ=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-06-24T21:19:28Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-06-25T20:26:23Z"}, "message": "remove the redundant `each` method from OptVec", "tree": {"sha": "3d1c741044f7d369c6e16cc811468890ec1f6007", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d1c741044f7d369c6e16cc811468890ec1f6007"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5242e8d2bad01beec7c841d20952cb230bc9fd84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5242e8d2bad01beec7c841d20952cb230bc9fd84", "html_url": "https://github.com/rust-lang/rust/commit/5242e8d2bad01beec7c841d20952cb230bc9fd84", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5242e8d2bad01beec7c841d20952cb230bc9fd84/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "032dcc57e8876e960837c3a050be2c7570e7eafd", "url": "https://api.github.com/repos/rust-lang/rust/commits/032dcc57e8876e960837c3a050be2c7570e7eafd", "html_url": "https://github.com/rust-lang/rust/commit/032dcc57e8876e960837c3a050be2c7570e7eafd"}], "stats": {"total": 45, "additions": 19, "deletions": 26}, "files": [{"sha": "9c28da10e40d5abcd58cd8aeeef39c8474ecc4c3", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5242e8d2bad01beec7c841d20952cb230bc9fd84/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5242e8d2bad01beec7c841d20952cb230bc9fd84/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=5242e8d2bad01beec7c841d20952cb230bc9fd84", "patch": "@@ -731,8 +731,8 @@ fn encode_info_for_method(ecx: &EncodeContext,\n     }\n \n     let mut combined_ty_params = opt_vec::Empty;\n-    for owner_generics.ty_params.each |x| { combined_ty_params.push(copy *x) }\n-    for method_generics.ty_params.each |x| { combined_ty_params.push(copy *x) }\n+    for owner_generics.ty_params.iter().advance |x| { combined_ty_params.push(copy *x) }\n+    for method_generics.ty_params.iter().advance |x| { combined_ty_params.push(copy *x) }\n     let len = combined_ty_params.len();\n     encode_type_param_bounds(ebml_w, ecx, &combined_ty_params);\n "}, {"sha": "3a54c224b5236537420ff7aba0ffe90088805f61", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5242e8d2bad01beec7c841d20952cb230bc9fd84/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5242e8d2bad01beec7c841d20952cb230bc9fd84/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=5242e8d2bad01beec7c841d20952cb230bc9fd84", "patch": "@@ -3834,8 +3834,8 @@ impl Resolver {\n     pub fn resolve_type_parameters(@mut self,\n                                    type_parameters: &OptVec<TyParam>,\n                                    visitor: ResolveVisitor) {\n-        for type_parameters.each |type_parameter| {\n-            for type_parameter.bounds.each |bound| {\n+        for type_parameters.iter().advance |type_parameter| {\n+            for type_parameter.bounds.iter().advance |bound| {\n                 self.resolve_type_parameter_bound(bound, visitor);\n             }\n         }\n@@ -4181,13 +4181,13 @@ impl Resolver {\n                     }\n                 }\n \n-                for bounds.each |bound| {\n+                for bounds.iter().advance |bound| {\n                     self.resolve_type_parameter_bound(bound, visitor);\n                 }\n             }\n \n             ty_closure(c) => {\n-                for c.bounds.each |bound| {\n+                for c.bounds.iter().advance |bound| {\n                     self.resolve_type_parameter_bound(bound, visitor);\n                 }\n                 visit_ty(ty, ((), visitor));"}, {"sha": "5e6574850f1b8ca1aa94617b37ca6d8a73887e39", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5242e8d2bad01beec7c841d20952cb230bc9fd84/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5242e8d2bad01beec7c841d20952cb230bc9fd84/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=5242e8d2bad01beec7c841d20952cb230bc9fd84", "patch": "@@ -752,7 +752,7 @@ fn conv_builtin_bounds(tcx: ty::ctxt,\n     //! legal.\n \n     let mut builtin_bounds = ty::EmptyBuiltinBounds();\n-    for ast_bounds.each |ast_bound| {\n+    for ast_bounds.iter().advance |ast_bound| {\n         match *ast_bound {\n             ast::TraitTyParamBound(b) => {\n                 match lookup_def_tcx(tcx, b.path.span, b.ref_id) {"}, {"sha": "7812a0ed0ebacaf0c9a1e6257815e219db22d9bb", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5242e8d2bad01beec7c841d20952cb230bc9fd84/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5242e8d2bad01beec7c841d20952cb230bc9fd84/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=5242e8d2bad01beec7c841d20952cb230bc9fd84", "patch": "@@ -775,7 +775,7 @@ pub fn ensure_no_ty_param_bounds(ccx: &CrateCtxt,\n                                  span: span,\n                                  generics: &ast::Generics,\n                                  thing: &'static str) {\n-    for generics.ty_params.each |ty_param| {\n+    for generics.ty_params.iter().advance |ty_param| {\n         if ty_param.bounds.len() > 0 {\n             ccx.tcx.sess.span_err(\n                 span,\n@@ -1172,7 +1172,7 @@ pub fn ty_generics(ccx: &CrateCtxt,\n             builtin_bounds: ty::EmptyBuiltinBounds(),\n             trait_bounds: ~[]\n         };\n-        for ast_bounds.each |ast_bound| {\n+        for ast_bounds.iter().advance |ast_bound| {\n             match *ast_bound {\n                 TraitTyParamBound(b) => {\n                     let ty = ty::mk_param(ccx.tcx, param_ty.idx, param_ty.def_id);"}, {"sha": "dc9fc264f85dc9a1466ba3f341d992468a3d9f06", "filename": "src/librustc/middle/typeck/rscope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5242e8d2bad01beec7c841d20952cb230bc9fd84/src%2Flibrustc%2Fmiddle%2Ftypeck%2Frscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5242e8d2bad01beec7c841d20952cb230bc9fd84/src%2Flibrustc%2Fmiddle%2Ftypeck%2Frscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Frscope.rs?ref=5242e8d2bad01beec7c841d20952cb230bc9fd84", "patch": "@@ -57,7 +57,7 @@ impl RegionParamNames {\n     }\n \n     fn has_ident(&self, ident: ast::ident) -> bool {\n-        for self.each |region_param_name| {\n+        for self.iter().advance |region_param_name| {\n             if *region_param_name == ident {\n                 return true;\n             }"}, {"sha": "a233c330b64d5cc8036df7a0d6e2c5a9fdb72cae", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5242e8d2bad01beec7c841d20952cb230bc9fd84/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5242e8d2bad01beec7c841d20952cb230bc9fd84/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=5242e8d2bad01beec7c841d20952cb230bc9fd84", "patch": "@@ -394,10 +394,10 @@ impl id_range {\n \n pub fn id_visitor<T: Copy>(vfn: @fn(node_id, T)) -> visit::vt<T> {\n     let visit_generics: @fn(&Generics, T) = |generics, t| {\n-        for generics.ty_params.each |p| {\n+        for generics.ty_params.iter().advance |p| {\n             vfn(p.id, copy t);\n         }\n-        for generics.lifetimes.each |p| {\n+        for generics.lifetimes.iter().advance |p| {\n             vfn(p.id, copy t);\n         }\n     };"}, {"sha": "83e446fa4c688f4befc53a1081f3f97bdec7b16d", "filename": "src/libsyntax/ext/deriving/generic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5242e8d2bad01beec7c841d20952cb230bc9fd84/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5242e8d2bad01beec7c841d20952cb230bc9fd84/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs?ref=5242e8d2bad01beec7c841d20952cb230bc9fd84", "patch": "@@ -324,11 +324,11 @@ impl<'self> TraitDef<'self> {\n \n         let mut trait_generics = self.generics.to_generics(cx, span, type_ident, generics);\n         // Copy the lifetimes\n-        for generics.lifetimes.each |l| {\n+        for generics.lifetimes.iter().advance |l| {\n             trait_generics.lifetimes.push(copy *l)\n         };\n         // Create the type parameters.\n-        for generics.ty_params.each |ty_param| {\n+        for generics.ty_params.iter().advance |ty_param| {\n             // I don't think this can be moved out of the loop, since\n             // a TyParamBound requires an ast id\n             let mut bounds = opt_vec::from("}, {"sha": "da5455d433279cf6ff83693b1b382b11da336be7", "filename": "src/libsyntax/ext/pipes/pipec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5242e8d2bad01beec7c841d20952cb230bc9fd84/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5242e8d2bad01beec7c841d20952cb230bc9fd84/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs?ref=5242e8d2bad01beec7c841d20952cb230bc9fd84", "patch": "@@ -374,7 +374,7 @@ impl gen_init for protocol {\n     fn buffer_ty_path(&self, cx: @ExtCtxt) -> @ast::Ty {\n         let mut params: OptVec<ast::TyParam> = opt_vec::Empty;\n         for (copy self.states).iter().advance |s| {\n-            for s.generics.ty_params.each |tp| {\n+            for s.generics.ty_params.iter().advance |tp| {\n                 match params.iter().find_(|tpp| tp.ident == tpp.ident) {\n                   None => params.push(*tp),\n                   _ => ()\n@@ -392,7 +392,7 @@ impl gen_init for protocol {\n         let ext_cx = cx;\n         let mut params: OptVec<ast::TyParam> = opt_vec::Empty;\n         let fields = do (copy self.states).iter().transform |s| {\n-            for s.generics.ty_params.each |tp| {\n+            for s.generics.ty_params.iter().advance |tp| {\n                 match params.iter().find_(|tpp| tp.ident == tpp.ident) {\n                   None => params.push(*tp),\n                   _ => ()"}, {"sha": "22b1d040d42e06652e4fe86b1086079d23c501d0", "filename": "src/libsyntax/opt_vec.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5242e8d2bad01beec7c841d20952cb230bc9fd84/src%2Flibsyntax%2Fopt_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5242e8d2bad01beec7c841d20952cb230bc9fd84/src%2Flibsyntax%2Fopt_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fopt_vec.rs?ref=5242e8d2bad01beec7c841d20952cb230bc9fd84", "patch": "@@ -38,13 +38,6 @@ pub fn from<T>(t: ~[T]) -> OptVec<T> {\n }\n \n impl<T> OptVec<T> {\n-    fn each(&self, blk: &fn(v: &T) -> bool) -> bool {\n-        match *self {\n-            Empty => true,\n-            Vec(ref v) => v.iter().advance(blk)\n-        }\n-    }\n-\n     fn push(&mut self, t: T) {\n         match *self {\n             Vec(ref mut v) => {"}, {"sha": "d7b5e57a57f0d4001dceeb3023d551b151c86db3", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5242e8d2bad01beec7c841d20952cb230bc9fd84/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5242e8d2bad01beec7c841d20952cb230bc9fd84/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=5242e8d2bad01beec7c841d20952cb230bc9fd84", "patch": "@@ -1743,7 +1743,7 @@ pub fn print_bounds(s: @ps, bounds: @OptVec<ast::TyParamBound>) {\n     if !bounds.is_empty() {\n         word(s.s, \":\");\n         let mut first = true;\n-        for bounds.each |bound| {\n+        for bounds.iter().advance |bound| {\n             nbsp(s);\n             if first {\n                 first = false;"}, {"sha": "5e409be3e6cce72c71a3709dfa0a85e82dab7c9d", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5242e8d2bad01beec7c841d20952cb230bc9fd84/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5242e8d2bad01beec7c841d20952cb230bc9fd84/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=5242e8d2bad01beec7c841d20952cb230bc9fd84", "patch": "@@ -334,7 +334,7 @@ pub fn visit_foreign_item<E: Copy>(ni: @foreign_item, (e, v): (E, vt<E>)) {\n \n pub fn visit_ty_param_bounds<E: Copy>(bounds: &OptVec<TyParamBound>,\n                                       (e, v): (E, vt<E>)) {\n-    for bounds.each |bound| {\n+    for bounds.iter().advance |bound| {\n         match *bound {\n             TraitTyParamBound(ty) => visit_trait_ref(ty, (copy e, v)),\n             RegionTyParamBound => {}\n@@ -343,7 +343,7 @@ pub fn visit_ty_param_bounds<E: Copy>(bounds: &OptVec<TyParamBound>,\n }\n \n pub fn visit_generics<E: Copy>(generics: &Generics, (e, v): (E, vt<E>)) {\n-    for generics.ty_params.each |tp| {\n+    for generics.ty_params.iter().advance |tp| {\n         visit_ty_param_bounds(tp.bounds, (copy e, v));\n     }\n }"}]}