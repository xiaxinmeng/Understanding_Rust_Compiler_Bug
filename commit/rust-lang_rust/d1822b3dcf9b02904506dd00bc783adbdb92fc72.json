{"sha": "d1822b3dcf9b02904506dd00bc783adbdb92fc72", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxODIyYjNkY2Y5YjAyOTA0NTA2ZGQwMGJjNzgzYWRiZGI5MmZjNzI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-07T12:15:58Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-10T07:35:23Z"}, "message": "use check_path more", "tree": {"sha": "5a20fcd6925ede05861c3dc55ff657ca9b8f26c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a20fcd6925ede05861c3dc55ff657ca9b8f26c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1822b3dcf9b02904506dd00bc783adbdb92fc72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1822b3dcf9b02904506dd00bc783adbdb92fc72", "html_url": "https://github.com/rust-lang/rust/commit/d1822b3dcf9b02904506dd00bc783adbdb92fc72", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1822b3dcf9b02904506dd00bc783adbdb92fc72/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0b073bc625d2178255876bc10834f46837ba773", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0b073bc625d2178255876bc10834f46837ba773", "html_url": "https://github.com/rust-lang/rust/commit/c0b073bc625d2178255876bc10834f46837ba773"}], "stats": {"total": 15, "additions": 6, "deletions": 9}, "files": [{"sha": "a41beb77119284bda6a29fa352fbe84e34b9ac4f", "filename": "src/librustc_parse/parser/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1822b3dcf9b02904506dd00bc783adbdb92fc72/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1822b3dcf9b02904506dd00bc783adbdb92fc72/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fexpr.rs?ref=d1822b3dcf9b02904506dd00bc783adbdb92fc72", "patch": "@@ -919,7 +919,7 @@ impl<'a> Parser<'a> {\n         } else if self.eat_lt() {\n             let (qself, path) = self.parse_qpath(PathStyle::Expr)?;\n             Ok(self.mk_expr(lo.to(path.span), ExprKind::Path(Some(qself), path), attrs))\n-        } else if self.token.is_path_start() {\n+        } else if self.check_path() {\n             self.parse_path_start_expr(attrs)\n         } else if self.check_keyword(kw::Move) || self.check_keyword(kw::Static) {\n             self.parse_closure_expr(attrs)"}, {"sha": "5add3fcc8020c0900651b5cd625c1c96f37db6d9", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1822b3dcf9b02904506dd00bc783adbdb92fc72/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1822b3dcf9b02904506dd00bc783adbdb92fc72/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=d1822b3dcf9b02904506dd00bc783adbdb92fc72", "patch": "@@ -218,7 +218,7 @@ impl<'a> Parser<'a> {\n         } else if vis.node.is_pub() && self.isnt_macro_invocation() {\n             self.recover_missing_kw_before_item()?;\n             return Ok(None);\n-        } else if macros_allowed && self.token.is_path_start() {\n+        } else if macros_allowed && self.check_path() {\n             // MACRO INVOCATION ITEM\n             (Ident::invalid(), ItemKind::Mac(self.parse_item_macro(vis)?))\n         } else {"}, {"sha": "5f2b3b03488b4a4981cb7278481a52b8fc03ac03", "filename": "src/librustc_parse/parser/pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1822b3dcf9b02904506dd00bc783adbdb92fc72/src%2Flibrustc_parse%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1822b3dcf9b02904506dd00bc783adbdb92fc72/src%2Flibrustc_parse%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fpat.rs?ref=d1822b3dcf9b02904506dd00bc783adbdb92fc72", "patch": "@@ -704,7 +704,7 @@ impl<'a> Parser<'a> {\n     }\n \n     fn parse_pat_range_end(&mut self) -> PResult<'a, P<Expr>> {\n-        if self.token.is_path_start() {\n+        if self.check_path() {\n             let lo = self.token.span;\n             let (qself, path) = if self.eat_lt() {\n                 // Parse a qualified path"}, {"sha": "489549a57505fa43ce88fee18fc105c6cd2a0a87", "filename": "src/librustc_parse/parser/stmt.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d1822b3dcf9b02904506dd00bc783adbdb92fc72/src%2Flibrustc_parse%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1822b3dcf9b02904506dd00bc783adbdb92fc72/src%2Flibrustc_parse%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fstmt.rs?ref=d1822b3dcf9b02904506dd00bc783adbdb92fc72", "patch": "@@ -48,10 +48,7 @@ impl<'a> Parser<'a> {\n             self.bump(); // `var`\n             let msg = \"write `let` instead of `var` to introduce a new variable\";\n             self.recover_stmt_local(lo, attrs.into(), msg, \"let\")?\n-        } else if self.token.is_path_start()\n-            && !self.token.is_qpath_start()\n-            && !self.is_path_start_item()\n-        {\n+        } else if self.check_path() && !self.token.is_qpath_start() && !self.is_path_start_item() {\n             // We have avoided contextual keywords like `union`, items with `crate` visibility,\n             // or `auto trait` items. We aim to parse an arbitrary path `a::b` but not something\n             // that starts like a path (1 token), but it fact not a path."}, {"sha": "6575843b40824bdd6867ae1eabdfa7ac158df374", "filename": "src/librustc_parse/parser/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1822b3dcf9b02904506dd00bc783adbdb92fc72/src%2Flibrustc_parse%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1822b3dcf9b02904506dd00bc783adbdb92fc72/src%2Flibrustc_parse%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fty.rs?ref=d1822b3dcf9b02904506dd00bc783adbdb92fc72", "patch": "@@ -158,7 +158,7 @@ impl<'a> Parser<'a> {\n             // Qualified path\n             let (qself, path) = self.parse_qpath(PathStyle::Type)?;\n             TyKind::Path(Some(qself), path)\n-        } else if self.token.is_path_start() {\n+        } else if self.check_path() {\n             self.parse_path_start_ty(lo, allow_plus)?\n         } else if self.eat(&token::DotDotDot) {\n             if allow_c_variadic == AllowCVariadic::Yes {"}, {"sha": "15cd3df860b0da7a44d1cd045877b545f5d99e0b", "filename": "src/test/ui/parser/issue-63116.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1822b3dcf9b02904506dd00bc783adbdb92fc72/src%2Ftest%2Fui%2Fparser%2Fissue-63116.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d1822b3dcf9b02904506dd00bc783adbdb92fc72/src%2Ftest%2Fui%2Fparser%2Fissue-63116.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-63116.stderr?ref=d1822b3dcf9b02904506dd00bc783adbdb92fc72", "patch": "@@ -12,7 +12,7 @@ error: expected one of `!`, `(`, `)`, `+`, `,`, `::`, or `<`, found `;`\n LL | impl W <s(f;Y(;]\n    |            ^ expected one of 7 possible tokens\n \n-error: expected one of `!`, `&&`, `&`, `(`, `)`, `*`, `+`, `,`, `->`, `...`, `::`, `<`, `>`, `?`, `[`, `_`, `dyn`, `extern`, `fn`, `for`, `impl`, `unsafe`, or lifetime, found `;`\n+error: expected one of `!`, `&&`, `&`, `(`, `)`, `*`, `+`, `,`, `->`, `...`, `::`, `<`, `>`, `?`, `[`, `_`, `dyn`, `extern`, `fn`, `for`, `impl`, `unsafe`, lifetime, or path, found `;`\n   --> $DIR/issue-63116.rs:3:15\n    |\n LL | impl W <s(f;Y(;]"}]}