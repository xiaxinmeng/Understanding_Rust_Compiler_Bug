{"sha": "e24df2778fb7a19dfe386ad563ea216a816db94a", "node_id": "C_kwDOAAsO6NoAKGUyNGRmMjc3OGZiN2ExOWRmZTM4NmFkNTYzZWEyMTZhODE2ZGI5NGE", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-10-30T19:39:07Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-11-01T20:41:47Z"}, "message": "Format dyn Trait better in type_name intrinsic", "tree": {"sha": "c4ff15b9e18a76568744c0ab4dd216e917071830", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4ff15b9e18a76568744c0ab4dd216e917071830"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e24df2778fb7a19dfe386ad563ea216a816db94a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e24df2778fb7a19dfe386ad563ea216a816db94a", "html_url": "https://github.com/rust-lang/rust/commit/e24df2778fb7a19dfe386ad563ea216a816db94a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e24df2778fb7a19dfe386ad563ea216a816db94a/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e70cbef0c5db81079f4b5643380d6047ccd34a10", "url": "https://api.github.com/repos/rust-lang/rust/commits/e70cbef0c5db81079f4b5643380d6047ccd34a10", "html_url": "https://github.com/rust-lang/rust/commit/e70cbef0c5db81079f4b5643380d6047ccd34a10"}], "stats": {"total": 37, "additions": 22, "deletions": 15}, "files": [{"sha": "08a6d69b8e40c28422fc6a8710606cdca7b65d37", "filename": "compiler/rustc_const_eval/src/util/type_name.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e24df2778fb7a19dfe386ad563ea216a816db94a/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Ftype_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e24df2778fb7a19dfe386ad563ea216a816db94a/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Ftype_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Ftype_name.rs?ref=e24df2778fb7a19dfe386ad563ea216a816db94a", "patch": "@@ -73,18 +73,10 @@ impl<'tcx> Printer<'tcx> for AbsolutePathPrinter<'tcx> {\n     }\n \n     fn print_dyn_existential(\n-        mut self,\n+        self,\n         predicates: &'tcx ty::List<ty::Binder<'tcx, ty::ExistentialPredicate<'tcx>>>,\n     ) -> Result<Self::DynExistential, Self::Error> {\n-        let mut first = true;\n-        for p in predicates {\n-            if !first {\n-                write!(self, \"+\")?;\n-            }\n-            first = false;\n-            self = p.print(self)?;\n-        }\n-        Ok(self)\n+        self.pretty_print_dyn_existential(predicates)\n     }\n \n     fn path_crate(mut self, cnum: CrateNum) -> Result<Self::Path, Self::Error> {"}, {"sha": "fab85c39d253594fb8bd1dc35044dd9a4de39137", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e24df2778fb7a19dfe386ad563ea216a816db94a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e24df2778fb7a19dfe386ad563ea216a816db94a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=e24df2778fb7a19dfe386ad563ea216a816db94a", "patch": "@@ -1137,7 +1137,7 @@ pub trait PrettyPrinter<'tcx>:\n         //\n         // To avoid causing instabilities in compiletest\n         // output, sort the auto-traits alphabetically.\n-        auto_traits.sort_by_cached_key(|did| self.tcx().def_path_str(*did));\n+        auto_traits.sort_by_cached_key(|did| with_no_trimmed_paths!(self.tcx().def_path_str(*did)));\n \n         for def_id in auto_traits {\n             if !first {"}, {"sha": "e98dac8d12ef449d6d54a8bb1a2e714d68cbea98", "filename": "library/core/tests/any.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e24df2778fb7a19dfe386ad563ea216a816db94a/library%2Fcore%2Ftests%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e24df2778fb7a19dfe386ad563ea216a816db94a/library%2Fcore%2Ftests%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fany.rs?ref=e24df2778fb7a19dfe386ad563ea216a816db94a", "patch": "@@ -131,6 +131,24 @@ fn distinct_type_names() {\n     assert_ne!(type_name_of_val(Velocity), type_name_of_val(Velocity(0.0, -9.8)),);\n }\n \n+#[cfg(not(bootstrap))]\n+#[test]\n+fn dyn_type_name() {\n+    trait Foo {\n+        type Bar;\n+    }\n+\n+    assert_eq!(\n+        \"dyn core::ops::function::Fn(i32, i32) -> i32\",\n+        std::any::type_name::<dyn Fn(i32, i32) -> i32>()\n+    );\n+    assert_eq!(\n+        \"dyn coretests::any::dyn_type_name::Foo<Bar = i32> \\\n+        + core::marker::Send + core::marker::Sync\",\n+        std::any::type_name::<dyn Foo<Bar = i32> + Send + Sync>()\n+    );\n+}\n+\n // Test the `Provider` API.\n \n struct SomeConcreteType {"}, {"sha": "3713a32eb1183c4597330cfe4882d52f3e26d634", "filename": "src/test/ui/type/issue-94187-verbose-type-name.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e24df2778fb7a19dfe386ad563ea216a816db94a/src%2Ftest%2Fui%2Ftype%2Fissue-94187-verbose-type-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e24df2778fb7a19dfe386ad563ea216a816db94a/src%2Ftest%2Fui%2Ftype%2Fissue-94187-verbose-type-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fissue-94187-verbose-type-name.rs?ref=e24df2778fb7a19dfe386ad563ea216a816db94a", "patch": "@@ -12,8 +12,5 @@ fn main() {\n     struct Wrapper<const VALUE: usize>;\n     assert_eq!(type_name::<Wrapper<0>>(), \"issue_94187_verbose_type_name::main::Wrapper<0>\");\n \n-    assert_eq!(\n-        type_name::<dyn Fn(u32) -> u32>(),\n-        \"dyn core::ops::function::Fn<(u32,)>+Output = u32\"\n-    );\n+    assert_eq!(type_name::<dyn Fn(u32) -> u32>(), \"dyn core::ops::function::Fn(u32) -> u32\");\n }"}]}