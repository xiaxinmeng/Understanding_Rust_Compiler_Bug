{"sha": "3f287efc82e01e7ba4374ef6bb781e5d8461946e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmMjg3ZWZjODJlMDFlN2JhNDM3NGVmNmJiNzgxZTVkODQ2MTk0NmU=", "commit": {"author": {"name": "Tim Neumann", "email": "mail@timnn.me", "date": "2016-09-24T17:20:57Z"}, "committer": {"name": "Tim Neumann", "email": "mail@timnn.me", "date": "2016-09-26T05:07:41Z"}, "message": "refactor away get_unstable_features_setting", "tree": {"sha": "91db78437c4255fabee3eec86d4371c36c1f2d5e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91db78437c4255fabee3eec86d4371c36c1f2d5e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f287efc82e01e7ba4374ef6bb781e5d8461946e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f287efc82e01e7ba4374ef6bb781e5d8461946e", "html_url": "https://github.com/rust-lang/rust/commit/3f287efc82e01e7ba4374ef6bb781e5d8461946e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f287efc82e01e7ba4374ef6bb781e5d8461946e/comments", "author": {"login": "TimNN", "id": 1178249, "node_id": "MDQ6VXNlcjExNzgyNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1178249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimNN", "html_url": "https://github.com/TimNN", "followers_url": "https://api.github.com/users/TimNN/followers", "following_url": "https://api.github.com/users/TimNN/following{/other_user}", "gists_url": "https://api.github.com/users/TimNN/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimNN/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimNN/subscriptions", "organizations_url": "https://api.github.com/users/TimNN/orgs", "repos_url": "https://api.github.com/users/TimNN/repos", "events_url": "https://api.github.com/users/TimNN/events{/privacy}", "received_events_url": "https://api.github.com/users/TimNN/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TimNN", "id": 1178249, "node_id": "MDQ6VXNlcjExNzgyNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1178249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimNN", "html_url": "https://github.com/TimNN", "followers_url": "https://api.github.com/users/TimNN/followers", "following_url": "https://api.github.com/users/TimNN/following{/other_user}", "gists_url": "https://api.github.com/users/TimNN/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimNN/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimNN/subscriptions", "organizations_url": "https://api.github.com/users/TimNN/orgs", "repos_url": "https://api.github.com/users/TimNN/repos", "events_url": "https://api.github.com/users/TimNN/events{/privacy}", "received_events_url": "https://api.github.com/users/TimNN/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba838dc4e9b8340e73e5c2e34a376f2226ecea9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba838dc4e9b8340e73e5c2e34a376f2226ecea9a", "html_url": "https://github.com/rust-lang/rust/commit/ba838dc4e9b8340e73e5c2e34a376f2226ecea9a"}], "stats": {"total": 42, "additions": 12, "deletions": 30}, "files": [{"sha": "4e88370931a78c504c49b022baeb2c6f54e6a12c", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 3, "deletions": 19, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3f287efc82e01e7ba4374ef6bb781e5d8461946e/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f287efc82e01e7ba4374ef6bb781e5d8461946e/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=3f287efc82e01e7ba4374ef6bb781e5d8461946e", "patch": "@@ -37,7 +37,6 @@ use std::collections::btree_map::Iter as BTreeMapIter;\n use std::collections::btree_map::Keys as BTreeMapKeysIter;\n use std::collections::btree_map::Values as BTreeMapValuesIter;\n \n-use std::env;\n use std::fmt;\n use std::hash::{Hasher, SipHasher};\n use std::iter::FromIterator;\n@@ -1525,27 +1524,12 @@ pub fn build_session_options_and_crate_config(matches: &getopts::Matches)\n         crate_name: crate_name,\n         alt_std_name: None,\n         libs: libs,\n-        unstable_features: get_unstable_features_setting(),\n+        unstable_features: UnstableFeatures::from_environment(),\n         debug_assertions: debug_assertions,\n     },\n     cfg)\n }\n \n-pub fn get_unstable_features_setting() -> UnstableFeatures {\n-    // Whether this is a feature-staged build, i.e. on the beta or stable channel\n-    let disable_unstable_features = option_env!(\"CFG_DISABLE_UNSTABLE_FEATURES\").is_some();\n-    // The secret key needed to get through the rustc build itself by\n-    // subverting the unstable features lints\n-    let bootstrap_secret_key = option_env!(\"CFG_BOOTSTRAP_KEY\");\n-    // The matching key to the above, only known by the build system\n-    let bootstrap_provided_key = env::var(\"RUSTC_BOOTSTRAP_KEY\").ok();\n-    match (disable_unstable_features, bootstrap_secret_key, bootstrap_provided_key) {\n-        (_, Some(ref s), Some(ref p)) if s == p => UnstableFeatures::Cheat,\n-        (true, ..) => UnstableFeatures::Disallow,\n-        (false, ..) => UnstableFeatures::Allow\n-    }\n-}\n-\n pub fn parse_crate_types_from_list(list_list: Vec<String>) -> Result<Vec<CrateType>, String> {\n     let mut crate_types: Vec<CrateType> = Vec::new();\n     for unparsed_crate_type in &list_list {\n@@ -1575,7 +1559,7 @@ pub fn parse_crate_types_from_list(list_list: Vec<String>) -> Result<Vec<CrateTy\n pub mod nightly_options {\n     use getopts;\n     use syntax::feature_gate::UnstableFeatures;\n-    use super::{ErrorOutputType, OptionStability, RustcOptGroup, get_unstable_features_setting};\n+    use super::{ErrorOutputType, OptionStability, RustcOptGroup};\n     use session::{early_error, early_warn};\n \n     pub fn is_unstable_enabled(matches: &getopts::Matches) -> bool {\n@@ -1588,7 +1572,7 @@ pub mod nightly_options {\n \n     pub fn check_nightly_options(matches: &getopts::Matches, flags: &[RustcOptGroup]) {\n         let has_z_unstable_option = matches.opt_strs(\"Z\").iter().any(|x| *x == \"unstable-options\");\n-        let really_allows_unstable_options = match get_unstable_features_setting() {\n+        let really_allows_unstable_options = match UnstableFeatures::from_environment() {\n             UnstableFeatures::Disallow => false,\n             _ => true,\n         };"}, {"sha": "33d57a3127e46904c235056dc13913958dc387bd", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3f287efc82e01e7ba4374ef6bb781e5d8461946e/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f287efc82e01e7ba4374ef6bb781e5d8461946e/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=3f287efc82e01e7ba4374ef6bb781e5d8461946e", "patch": "@@ -73,7 +73,7 @@ use rustc_trans::back::write::{create_target_machine, RELOC_MODEL_ARGS, CODE_GEN\n use rustc::dep_graph::DepGraph;\n use rustc::session::{self, config, Session, build_session, CompileResult};\n use rustc::session::config::{Input, PrintRequest, OutputType, ErrorOutputType};\n-use rustc::session::config::{get_unstable_features_setting, nightly_options};\n+use rustc::session::config::nightly_options;\n use rustc::lint::Lint;\n use rustc::lint;\n use rustc_metadata::loader;\n@@ -649,7 +649,7 @@ impl RustcDefaultCalls {\n                     }\n                 }\n                 PrintRequest::Cfg => {\n-                    let allow_unstable_cfg = match get_unstable_features_setting() {\n+                    let allow_unstable_cfg = match UnstableFeatures::from_environment() {\n                         UnstableFeatures::Disallow => false,\n                         _ => true,\n                     };"}, {"sha": "d923c54ecd2ba68912c490d506e3639fc47dbc06", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3f287efc82e01e7ba4374ef6bb781e5d8461946e/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f287efc82e01e7ba4374ef6bb781e5d8461946e/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=3f287efc82e01e7ba4374ef6bb781e5d8461946e", "patch": "@@ -27,7 +27,6 @@\n #![allow(non_camel_case_types)]\n \n use libc;\n-use rustc::session::config::get_unstable_features_setting;\n use std::ascii::AsciiExt;\n use std::cell::RefCell;\n use std::default::Default;\n@@ -478,7 +477,7 @@ impl LangString {\n         let mut data = LangString::all_false();\n         let mut allow_compile_fail = false;\n         let mut allow_error_code_check = false;\n-        match get_unstable_features_setting() {\n+        match UnstableFeatures::from_environment() {\n             UnstableFeatures::Allow | UnstableFeatures::Cheat => {\n                 allow_compile_fail = true;\n                 allow_error_code_check = true;"}, {"sha": "9c80f6e98c39c31d494dc2e940311c667a2f76fd", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3f287efc82e01e7ba4374ef6bb781e5d8461946e/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f287efc82e01e7ba4374ef6bb781e5d8461946e/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=3f287efc82e01e7ba4374ef6bb781e5d8461946e", "patch": "@@ -58,7 +58,6 @@ use syntax::feature_gate::UnstableFeatures;\n use rustc::hir::def_id::{CrateNum, CRATE_DEF_INDEX, DefId, LOCAL_CRATE};\n use rustc::middle::privacy::AccessLevels;\n use rustc::middle::stability;\n-use rustc::session::config::get_unstable_features_setting;\n use rustc::hir;\n use rustc::util::nodemap::{FnvHashMap, FnvHashSet};\n use rustc_data_structures::flock;\n@@ -1971,7 +1970,7 @@ fn item_static(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n fn item_function(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n                  f: &clean::Function) -> fmt::Result {\n     // FIXME(#24111): remove when `const_fn` is stabilized\n-    let vis_constness = match get_unstable_features_setting() {\n+    let vis_constness = match UnstableFeatures::from_environment() {\n         UnstableFeatures::Allow => f.constness,\n         _ => hir::Constness::NotConst\n     };\n@@ -2250,7 +2249,7 @@ fn render_assoc_item(w: &mut fmt::Formatter,\n             }\n         };\n         // FIXME(#24111): remove when `const_fn` is stabilized\n-        let vis_constness = match get_unstable_features_setting() {\n+        let vis_constness = match UnstableFeatures::from_environment() {\n             UnstableFeatures::Allow => constness,\n             _ => hir::Constness::NotConst\n         };"}, {"sha": "1ab86cf7e8920fc4fe9cef6db4aedab43cd769bc", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3f287efc82e01e7ba4374ef6bb781e5d8461946e/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f287efc82e01e7ba4374ef6bb781e5d8461946e/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=3f287efc82e01e7ba4374ef6bb781e5d8461946e", "patch": "@@ -25,8 +25,7 @@ use rustc_lint;\n use rustc::dep_graph::DepGraph;\n use rustc::hir::map as hir_map;\n use rustc::session::{self, config};\n-use rustc::session::config::{get_unstable_features_setting, OutputType,\n-                             OutputTypes, Externs};\n+use rustc::session::config::{OutputType, OutputTypes, Externs};\n use rustc::session::search_paths::{SearchPaths, PathKind};\n use rustc_back::dynamic_lib::DynamicLibrary;\n use rustc_back::tempdir::TempDir;\n@@ -35,6 +34,7 @@ use rustc_driver::driver::phase_2_configure_and_expand;\n use rustc_metadata::cstore::CStore;\n use rustc_resolve::MakeGlobMap;\n use syntax::codemap::CodeMap;\n+use syntax::feature_gate::UnstableFeatures;\n use errors;\n use errors::emitter::ColorConfig;\n \n@@ -68,7 +68,7 @@ pub fn run(input: &str,\n         search_paths: libs.clone(),\n         crate_types: vec!(config::CrateTypeDylib),\n         externs: externs.clone(),\n-        unstable_features: get_unstable_features_setting(),\n+        unstable_features: UnstableFeatures::from_environment(),\n         ..config::basic_options().clone()\n     };\n \n@@ -197,7 +197,7 @@ fn runtest(test: &str, cratename: &str, cfgs: Vec<String>, libs: SearchPaths,\n             .. config::basic_codegen_options()\n         },\n         test: as_test_harness,\n-        unstable_features: get_unstable_features_setting(),\n+        unstable_features: UnstableFeatures::from_environment(),\n         ..config::basic_options().clone()\n     };\n "}]}