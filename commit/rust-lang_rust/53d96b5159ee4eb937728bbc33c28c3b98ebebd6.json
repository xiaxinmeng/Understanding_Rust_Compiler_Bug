{"sha": "53d96b5159ee4eb937728bbc33c28c3b98ebebd6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzZDk2YjUxNTllZTRlYjkzNzcyOGJiYzMzYzI4YzNiOThlYmViZDY=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-07-01T21:02:57Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-07-22T19:25:55Z"}, "message": "Handle fully-qualified paths and add test cases", "tree": {"sha": "316f97dce47e66f8a38021faffe36a8fd026e778", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/316f97dce47e66f8a38021faffe36a8fd026e778"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/53d96b5159ee4eb937728bbc33c28c3b98ebebd6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/53d96b5159ee4eb937728bbc33c28c3b98ebebd6", "html_url": "https://github.com/rust-lang/rust/commit/53d96b5159ee4eb937728bbc33c28c3b98ebebd6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/53d96b5159ee4eb937728bbc33c28c3b98ebebd6/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3712dfc677bb5dff909cdc29fd2da11772ddba9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/3712dfc677bb5dff909cdc29fd2da11772ddba9e", "html_url": "https://github.com/rust-lang/rust/commit/3712dfc677bb5dff909cdc29fd2da11772ddba9e"}], "stats": {"total": 502, "additions": 404, "deletions": 98}, "files": [{"sha": "9581ee611fce89e9c935e64513aa292fd324dbc6", "filename": "src/librustc_infer/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 102, "deletions": 82, "changes": 184, "blob_url": "https://github.com/rust-lang/rust/blob/53d96b5159ee4eb937728bbc33c28c3b98ebebd6/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d96b5159ee4eb937728bbc33c28c3b98ebebd6/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=53d96b5159ee4eb937728bbc33c28c3b98ebebd6", "patch": "@@ -12,6 +12,7 @@ use rustc_hir::{\n     TyKind,\n };\n use rustc_middle::ty::{self, AssocItemContainer, RegionKind, Ty, TypeFoldable, TypeVisitor};\n+use rustc_span::symbol::Ident;\n use rustc_span::{MultiSpan, Span};\n \n impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n@@ -115,33 +116,6 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n         err.span_label(param.param_ty_span, &format!(\"this data with {}...\", lifetime));\n         debug!(\"try_report_static_impl_trait: param_info={:?}\", param);\n \n-        let fn_returns = tcx.return_type_impl_or_dyn_traits(anon_reg_sup.def_id);\n-\n-        let mut postfix = String::new();\n-        if let SubregionOrigin::Subtype(box TypeTrace { cause, .. }) = &sup_origin {\n-            if let ObligationCauseCode::UnifyReceiver(ctxt) = &cause.code {\n-                if self.find_impl_on_dyn_trait(&mut err, param.param_ty, &ctxt)\n-                    && fn_returns.is_empty()\n-                {\n-                    err.code(rustc_errors::error_code!(E0767));\n-                    err.set_primary_message(&format!(\n-                        \"{} has {} but calling `{}` introduces an implicit `'static` lifetime \\\n-                         requirement\",\n-                        param_name, lifetime, ctxt.assoc_item.ident,\n-                    ));\n-                    postfix = format!(\n-                        \" because of an implicit lifetime on the {}\",\n-                        match ctxt.assoc_item.container {\n-                            AssocItemContainer::TraitContainer(id) =>\n-                                format!(\"`impl` of `{}`\", tcx.def_path_str(id)),\n-                            AssocItemContainer::ImplContainer(_) => \"inherent `impl`\".to_string(),\n-                        },\n-                    );\n-                }\n-                // }\n-            }\n-        }\n-\n         // We try to make the output have fewer overlapping spans if possible.\n         if (sp == sup_origin.span() || !return_sp.overlaps(sup_origin.span()))\n             && sup_origin.span() != return_sp\n@@ -168,35 +142,68 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                 //    |           ----                               ^\n                 err.span_label(\n                     sup_origin.span(),\n-                    &format!(\n-                        \"...is captured here, requiring it to live as long as `'static`{}\",\n-                        postfix\n-                    ),\n+                    \"...is captured here, requiring it to live as long as `'static`\",\n                 );\n             } else {\n                 err.span_label(sup_origin.span(), \"...is captured here...\");\n                 if return_sp < sup_origin.span() {\n                     err.span_note(\n                         return_sp,\n-                        &format!(\"...and is required to live as long as `'static` here{}\", postfix),\n+                        \"...and is required to live as long as `'static` here\",\n                     );\n                 } else {\n                     err.span_label(\n                         return_sp,\n-                        &format!(\"...and is required to live as long as `'static` here{}\", postfix),\n+                        \"...and is required to live as long as `'static` here\",\n                     );\n                 }\n             }\n         } else {\n             err.span_label(\n                 return_sp,\n-                &format!(\n-                    \"...is captured and required to live as long as `'static` here{}\",\n-                    postfix\n-                ),\n+                \"...is captured and required to live as long as `'static` here\",\n             );\n         }\n \n+        let fn_returns = tcx.return_type_impl_or_dyn_traits(anon_reg_sup.def_id);\n+\n+        let mut override_error_code = None;\n+        if let SubregionOrigin::Subtype(box TypeTrace { cause, .. }) = &sup_origin {\n+            if let ObligationCauseCode::UnifyReceiver(ctxt) = &cause.code {\n+                // Handle case of `impl Foo for dyn Bar { fn qux(&self) {} }` introducing a\n+                // `'static` lifetime when called as a method on a binding: `bar.qux()`.\n+                if self.find_impl_on_dyn_trait(&mut err, param.param_ty, &ctxt) {\n+                    override_error_code = Some(ctxt.assoc_item.ident);\n+                }\n+            }\n+        }\n+        if let SubregionOrigin::Subtype(box TypeTrace { cause, .. }) = &sub_origin {\n+            if let ObligationCauseCode::ItemObligation(item_def_id) = cause.code {\n+                // Same case of `impl Foo for dyn Bar { fn qux(&self) {} }` introducing a `'static`\n+                // lifetime as above, but called using a fully-qualified path to the method:\n+                // `Foo::qux(bar)`.\n+                let mut v = TraitObjectVisitor(vec![]);\n+                v.visit_ty(param.param_ty);\n+                if let Some((ident, self_ty)) =\n+                    self.get_impl_ident_and_self_ty_from_trait(item_def_id, &v.0[..])\n+                {\n+                    if self.suggest_constrain_dyn_trait_in_impl(&mut err, &v.0[..], ident, self_ty)\n+                    {\n+                        override_error_code = Some(ident);\n+                    }\n+                }\n+            }\n+        }\n+        if let (Some(ident), true) = (override_error_code, fn_returns.is_empty()) {\n+            // Provide a more targetted error code and description.\n+            err.code(rustc_errors::error_code!(E0767));\n+            err.set_primary_message(&format!(\n+                \"{} has {} but calling `{}` introduces an implicit `'static` lifetime \\\n+                requirement\",\n+                param_name, lifetime, ident,\n+            ));\n+        }\n+\n         debug!(\"try_report_static_impl_trait: fn_return={:?}\", fn_returns);\n         // FIXME: account for the need of parens in `&(dyn Trait + '_)`\n         let consider = \"consider changing the\";\n@@ -318,40 +325,19 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n         Some(ErrorReported)\n     }\n \n-    /// When we call a method coming from an `impl Foo for dyn Bar`, `dyn Bar` introduces a default\n-    /// `'static` obligation. Suggest relaxing that implicit bound.\n-    fn find_impl_on_dyn_trait(\n+    fn get_impl_ident_and_self_ty_from_trait(\n         &self,\n-        err: &mut DiagnosticBuilder<'_>,\n-        ty: Ty<'_>,\n-        ctxt: &UnifyReceiverContext<'tcx>,\n-    ) -> bool {\n+        def_id: DefId,\n+        trait_objects: &[DefId],\n+    ) -> Option<(Ident, &'tcx hir::Ty<'tcx>)> {\n         let tcx = self.tcx();\n-        let mut suggested = false;\n-\n-        // Find the method being called.\n-        let instance = match ty::Instance::resolve(\n-            tcx,\n-            ctxt.param_env,\n-            ctxt.assoc_item.def_id,\n-            self.infcx.resolve_vars_if_possible(&ctxt.substs),\n-        ) {\n-            Ok(Some(instance)) => instance,\n-            _ => return false,\n-        };\n-\n-        let mut v = TraitObjectVisitor(vec![]);\n-        v.visit_ty(ty);\n-\n-        // Get the `Ident` of the method being called and the corresponding `impl` (to point at\n-        // `Bar` in `impl Foo for dyn Bar {}` and the definition of the method being called).\n-        let (ident, self_ty) = match tcx.hir().get_if_local(instance.def_id()) {\n+        match tcx.hir().get_if_local(def_id) {\n             Some(Node::ImplItem(ImplItem { ident, hir_id, .. })) => {\n                 match tcx.hir().find(tcx.hir().get_parent_item(*hir_id)) {\n                     Some(Node::Item(Item { kind: ItemKind::Impl { self_ty, .. }, .. })) => {\n-                        (ident, self_ty)\n+                        Some((*ident, self_ty))\n                     }\n-                    _ => return false,\n+                    _ => None,\n                 }\n             }\n             Some(Node::TraitItem(TraitItem { ident, hir_id, .. })) => {\n@@ -372,7 +358,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                                     Some(Node::Item(Item {\n                                         kind: ItemKind::Impl { self_ty, .. },\n                                         ..\n-                                    })) if v.0.iter().all(|did| {\n+                                    })) if trait_objects.iter().all(|did| {\n                                         // FIXME: we should check `self_ty` against the receiver\n                                         // type in the `UnifyReceiver` context, but for now, use\n                                         // this imperfect proxy. This will fail if there are\n@@ -391,20 +377,64 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                             })\n                             .next()\n                         {\n-                            Some(self_ty) => (ident, self_ty),\n-                            _ => return false,\n+                            Some(self_ty) => Some((*ident, self_ty)),\n+                            _ => None,\n                         }\n                     }\n-                    _ => return false,\n+                    _ => None,\n                 }\n             }\n+            _ => None,\n+        }\n+    }\n+\n+    /// When we call a method coming from an `impl Foo for dyn Bar`, `dyn Bar` introduces a default\n+    /// `'static` obligation. Suggest relaxing that implicit bound.\n+    fn find_impl_on_dyn_trait(\n+        &self,\n+        err: &mut DiagnosticBuilder<'_>,\n+        ty: Ty<'_>,\n+        ctxt: &UnifyReceiverContext<'tcx>,\n+    ) -> bool {\n+        let tcx = self.tcx();\n+\n+        // Find the method being called.\n+        let instance = match ty::Instance::resolve(\n+            tcx,\n+            ctxt.param_env,\n+            ctxt.assoc_item.def_id,\n+            self.infcx.resolve_vars_if_possible(&ctxt.substs),\n+        ) {\n+            Ok(Some(instance)) => instance,\n             _ => return false,\n         };\n \n+        let mut v = TraitObjectVisitor(vec![]);\n+        v.visit_ty(ty);\n+\n+        // Get the `Ident` of the method being called and the corresponding `impl` (to point at\n+        // `Bar` in `impl Foo for dyn Bar {}` and the definition of the method being called).\n+        let (ident, self_ty) =\n+            match self.get_impl_ident_and_self_ty_from_trait(instance.def_id(), &v.0[..]) {\n+                Some((ident, self_ty)) => (ident, self_ty),\n+                None => return false,\n+            };\n+\n         // Find the trait object types in the argument, so we point at *only* the trait object.\n-        for found_did in &v.0 {\n+        self.suggest_constrain_dyn_trait_in_impl(err, &v.0[..], ident, self_ty)\n+    }\n+\n+    fn suggest_constrain_dyn_trait_in_impl(\n+        &self,\n+        err: &mut DiagnosticBuilder<'_>,\n+        found_dids: &[DefId],\n+        ident: Ident,\n+        self_ty: &hir::Ty<'_>,\n+    ) -> bool {\n+        let mut suggested = false;\n+        for found_did in found_dids {\n             let mut hir_v = HirTraitObjectVisitor(vec![], *found_did);\n-            hir_v.visit_ty(self_ty);\n+            hir_v.visit_ty(&self_ty);\n             for span in &hir_v.0 {\n                 let mut multi_span: MultiSpan = vec![*span].into();\n                 multi_span.push_span_label(\n@@ -415,17 +445,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                     ident.span,\n                     \"calling this method introduces the `impl`'s 'static` requirement\".to_string(),\n                 );\n-                err.span_note(\n-                    multi_span,\n-                    &format!(\n-                        \"{} has a `'static` requirement\",\n-                        match ctxt.assoc_item.container {\n-                            AssocItemContainer::TraitContainer(id) =>\n-                                format!(\"`impl` of `{}`\", tcx.def_path_str(id)),\n-                            AssocItemContainer::ImplContainer(_) => \"inherent `impl`\".to_string(),\n-                        },\n-                    ),\n-                );\n+                err.span_note(multi_span, \"the used `impl` has a `'static` requirement\");\n                 err.span_suggestion_verbose(\n                     span.shrink_to_hi(),\n                     \"consider relaxing the implicit `'static` requirement\","}, {"sha": "6921926590a69c33380d50d1573b9ce2cc4ccfbf", "filename": "src/test/ui/suggestions/impl-on-dyn-trait-with-implicit-static-bound-needing-more-suggestions.nll.stderr", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/53d96b5159ee4eb937728bbc33c28c3b98ebebd6/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound-needing-more-suggestions.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53d96b5159ee4eb937728bbc33c28c3b98ebebd6/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound-needing-more-suggestions.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound-needing-more-suggestions.nll.stderr?ref=53d96b5159ee4eb937728bbc33c28c3b98ebebd6", "patch": "@@ -0,0 +1,37 @@\n+error[E0597]: `val` does not live long enough\n+  --> $DIR/impl-on-dyn-trait-with-implicit-static-bound-needing-more-suggestions.rs:22:9\n+   |\n+LL |     fn use_it<'a>(val: Box<dyn ObjectTrait<Assoc = i32>>) -> impl OtherTrait<'a> {\n+   |               -- lifetime `'a` defined here                  ------------------- opaque type requires that `val` is borrowed for `'a`\n+LL |         val.use_self()\n+   |         ^^^ borrowed value does not live long enough\n+LL |     }\n+   |     - `val` dropped here while still borrowed\n+   |\n+help: you can add a bound to the opaque type to make it last less than `'static` and match `'a`\n+   |\n+LL |     fn use_it<'a>(val: Box<dyn ObjectTrait<Assoc = i32>>) -> impl OtherTrait<'a> + 'a {\n+   |                                                                                  ^^^^\n+\n+error[E0515]: cannot return value referencing function parameter `val`\n+  --> $DIR/impl-on-dyn-trait-with-implicit-static-bound-needing-more-suggestions.rs:44:9\n+   |\n+LL |         val.use_self()\n+   |         ---^^^^^^^^^^^\n+   |         |\n+   |         returns a value referencing data owned by the current function\n+   |         `val` is borrowed here\n+\n+error[E0515]: cannot return value referencing function parameter `val`\n+  --> $DIR/impl-on-dyn-trait-with-implicit-static-bound-needing-more-suggestions.rs:110:9\n+   |\n+LL |         val.use_self()\n+   |         ---^^^^^^^^^^^\n+   |         |\n+   |         returns a value referencing data owned by the current function\n+   |         `val` is borrowed here\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors have detailed explanations: E0515, E0597.\n+For more information about an error, try `rustc --explain E0515`."}, {"sha": "ae6ffa8d93e01db2fb6a0491f8d6fdbe27c22f8f", "filename": "src/test/ui/suggestions/impl-on-dyn-trait-with-implicit-static-bound-needing-more-suggestions.rs", "status": "added", "additions": 114, "deletions": 0, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/53d96b5159ee4eb937728bbc33c28c3b98ebebd6/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound-needing-more-suggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d96b5159ee4eb937728bbc33c28c3b98ebebd6/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound-needing-more-suggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound-needing-more-suggestions.rs?ref=53d96b5159ee4eb937728bbc33c28c3b98ebebd6", "patch": "@@ -0,0 +1,114 @@\n+\n+// FIXME: the following cases need to suggest more things to make users reach a working end state.\n+\n+mod bav {\n+    trait OtherTrait<'a> {}\n+    impl<'a> OtherTrait<'a> for &'a () {}\n+\n+    trait ObjectTrait {\n+        type Assoc: Bar;\n+    }\n+    trait MyTrait {\n+        fn use_self(&self) -> &() { panic!() }\n+    }\n+    trait Bar {}\n+\n+    impl MyTrait for Box<dyn ObjectTrait<Assoc = i32>> {\n+        fn use_self(&self) -> &() { panic!() }\n+    }\n+    impl Bar for i32 {}\n+\n+    fn use_it<'a>(val: Box<dyn ObjectTrait<Assoc = i32>>) -> impl OtherTrait<'a> {\n+        val.use_self() //~ ERROR E0597\n+    }\n+}\n+\n+mod bap {\n+    trait OtherTrait<'a> {}\n+    impl<'a> OtherTrait<'a> for &'a () {}\n+\n+    trait ObjectTrait {\n+        type Assoc: Bar;\n+    }\n+    trait MyTrait {\n+        fn use_self(&self) -> &() { panic!() }\n+    }\n+    trait Bar {}\n+\n+    impl MyTrait for Box<dyn ObjectTrait<Assoc = i32>> {\n+        fn use_self(&self) -> &() { panic!() }\n+    }\n+    impl Bar for i32 {}\n+\n+    fn use_it<'a>(val: Box<dyn ObjectTrait<Assoc = i32>>) -> impl OtherTrait<'a> + 'a {\n+        val.use_self() //~ ERROR E0515\n+    }\n+}\n+\n+// This case in particular requires the user to write all of the bounds we have in `mod bax`.\n+mod bay {\n+    trait OtherTrait<'a> {}\n+    impl<'a> OtherTrait<'a> for &'a () {}\n+\n+    trait ObjectTrait {\n+        type Assoc: Bar;\n+    }\n+    trait MyTrait {\n+        fn use_self(&self) -> &() { panic!() }\n+    }\n+    trait Bar {}\n+\n+    impl MyTrait for Box<dyn ObjectTrait<Assoc = i32>> {\n+        fn use_self(&self) -> &() { panic!() }\n+    }\n+    impl Bar for i32 {}\n+\n+    fn use_it<'a>(val: Box<dyn ObjectTrait<Assoc = i32> + 'a>) -> &'a () {\n+        val.use_self() //~ ERROR E0767\n+    }\n+}\n+\n+mod bax {\n+    trait OtherTrait<'a> {}\n+    impl<'a> OtherTrait<'a> for &'a () {}\n+\n+    trait ObjectTrait {\n+        type Assoc: Bar;\n+    }\n+    trait MyTrait<'a> {\n+        fn use_self(&'a self) -> &'a () { panic!() }\n+    }\n+    trait Bar {}\n+\n+    impl<'a> MyTrait<'a> for Box<dyn ObjectTrait<Assoc = i32> + 'a> {\n+        fn use_self(&'a self) -> &'a () { panic!() }\n+    }\n+    impl Bar for i32 {}\n+\n+    fn use_it<'a>(val: Box<dyn ObjectTrait<Assoc = i32> + 'a>) -> &'a () {\n+        val.use_self()\n+    }\n+}\n+\n+mod baw {\n+    trait OtherTrait<'a> {}\n+    impl<'a> OtherTrait<'a> for &'a () {}\n+\n+    trait ObjectTrait {\n+        type Assoc: Bar;\n+    }\n+    trait MyTrait {\n+        fn use_self(&self) -> &() { panic!() }\n+    }\n+    trait Bar {}\n+\n+    impl<'a> MyTrait for Box<dyn ObjectTrait<Assoc = Box<dyn Bar>>> {\n+        fn use_self(&self) -> &() { panic!() }\n+    }\n+\n+    fn use_it<'a>(val: Box<dyn ObjectTrait<Assoc = Box<dyn Bar>>>) -> impl OtherTrait<'a> + 'a{\n+        val.use_self() //~ ERROR E0515\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "2fab02fd1be45f520fa2e015f07e350b70543a8a", "filename": "src/test/ui/suggestions/impl-on-dyn-trait-with-implicit-static-bound-needing-more-suggestions.stderr", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/53d96b5159ee4eb937728bbc33c28c3b98ebebd6/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound-needing-more-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53d96b5159ee4eb937728bbc33c28c3b98ebebd6/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound-needing-more-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound-needing-more-suggestions.stderr?ref=53d96b5159ee4eb937728bbc33c28c3b98ebebd6", "patch": "@@ -0,0 +1,57 @@\n+error[E0597]: `val` does not live long enough\n+  --> $DIR/impl-on-dyn-trait-with-implicit-static-bound-needing-more-suggestions.rs:22:9\n+   |\n+LL |     fn use_it<'a>(val: Box<dyn ObjectTrait<Assoc = i32>>) -> impl OtherTrait<'a> {\n+   |               -- lifetime `'a` defined here                  ------------------- opaque type requires that `val` is borrowed for `'a`\n+LL |         val.use_self()\n+   |         ^^^ borrowed value does not live long enough\n+LL |     }\n+   |     - `val` dropped here while still borrowed\n+   |\n+help: you can add a bound to the opaque type to make it last less than `'static` and match `'a`\n+   |\n+LL |     fn use_it<'a>(val: Box<dyn ObjectTrait<Assoc = i32>>) -> impl OtherTrait<'a> + 'a {\n+   |                                                                                  ^^^^\n+\n+error[E0515]: cannot return value referencing function parameter `val`\n+  --> $DIR/impl-on-dyn-trait-with-implicit-static-bound-needing-more-suggestions.rs:44:9\n+   |\n+LL |         val.use_self()\n+   |         ---^^^^^^^^^^^\n+   |         |\n+   |         returns a value referencing data owned by the current function\n+   |         `val` is borrowed here\n+\n+error[E0515]: cannot return value referencing function parameter `val`\n+  --> $DIR/impl-on-dyn-trait-with-implicit-static-bound-needing-more-suggestions.rs:110:9\n+   |\n+LL |         val.use_self()\n+   |         ---^^^^^^^^^^^\n+   |         |\n+   |         returns a value referencing data owned by the current function\n+   |         `val` is borrowed here\n+\n+error[E0767]: `val` has lifetime `'a` but calling `use_self` introduces an implicit `'static` lifetime requirement\n+  --> $DIR/impl-on-dyn-trait-with-implicit-static-bound-needing-more-suggestions.rs:67:13\n+   |\n+LL |     fn use_it<'a>(val: Box<dyn ObjectTrait<Assoc = i32> + 'a>) -> &'a () {\n+   |                        -------------------------------------- this data with lifetime `'a`...\n+LL |         val.use_self()\n+   |             ^^^^^^^^ ...is captured and required to live as long as `'static` here\n+   |\n+note: the used `impl` has a `'static` requirement\n+  --> $DIR/impl-on-dyn-trait-with-implicit-static-bound-needing-more-suggestions.rs:61:30\n+   |\n+LL |     impl MyTrait for Box<dyn ObjectTrait<Assoc = i32>> {\n+   |                              ^^^^^^^^^^^^^^^^^^^^^^^^ this has an implicit `'static` lifetime requirement\n+LL |         fn use_self(&self) -> &() { panic!() }\n+   |            -------- calling this method introduces the `impl`'s 'static` requirement\n+help: consider relaxing the implicit `'static` requirement\n+   |\n+LL |     impl MyTrait for Box<dyn ObjectTrait<Assoc = i32> + '_> {\n+   |                                                       ^^^^\n+\n+error: aborting due to 4 previous errors\n+\n+Some errors have detailed explanations: E0515, E0597.\n+For more information about an error, try `rustc --explain E0515`."}, {"sha": "c568738d94b455bcec06b1fb071c80eafc3e10e6", "filename": "src/test/ui/suggestions/impl-on-dyn-trait-with-implicit-static-bound.fixed", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/53d96b5159ee4eb937728bbc33c28c3b98ebebd6/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/53d96b5159ee4eb937728bbc33c28c3b98ebebd6/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound.fixed?ref=53d96b5159ee4eb937728bbc33c28c3b98ebebd6", "patch": "@@ -78,14 +78,35 @@ mod ban {\n     trait MyTrait {\n         fn use_self(&self) -> &() { panic!() }\n     }\n-    trait Irrelevant {}\n+    trait Irrelevant {\n+        fn use_self(&self) -> &() { panic!() }\n+    }\n \n     impl MyTrait for dyn ObjectTrait + '_ {}\n-    impl Irrelevant for dyn ObjectTrait {}\n \n     fn use_it<'a>(val: &'a dyn ObjectTrait) -> impl OtherTrait<'a> + 'a {\n         val.use_self() //~ ERROR E0759\n     }\n }\n \n+mod bal {\n+    trait OtherTrait<'a> {}\n+    impl<'a> OtherTrait<'a> for &'a () {}\n+\n+    trait ObjectTrait {}\n+    trait MyTrait {\n+        fn use_self(&self) -> &() { panic!() }\n+    }\n+    trait Irrelevant {\n+        fn use_self(&self) -> &() { panic!() }\n+    }\n+\n+    impl MyTrait for dyn ObjectTrait + '_ {}\n+    impl Irrelevant for dyn ObjectTrait {}\n+\n+    fn use_it<'a>(val: &'a dyn ObjectTrait) -> impl OtherTrait<'a> + 'a {\n+        MyTrait::use_self(val) //~ ERROR E0759\n+    }\n+}\n+\n fn main() {}"}, {"sha": "697467dc3a6301d9da79db48f09eb9bc531314f9", "filename": "src/test/ui/suggestions/impl-on-dyn-trait-with-implicit-static-bound.nll.stderr", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/53d96b5159ee4eb937728bbc33c28c3b98ebebd6/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53d96b5159ee4eb937728bbc33c28c3b98ebebd6/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound.nll.stderr?ref=53d96b5159ee4eb937728bbc33c28c3b98ebebd6", "patch": "@@ -19,7 +19,7 @@ LL |         val.use_self()\n    = help: consider replacing `'a` with `'static`\n \n error[E0521]: borrowed data escapes outside of function\n-  --> $DIR/impl-on-dyn-trait-with-implicit-static-bound.rs:87:9\n+  --> $DIR/impl-on-dyn-trait-with-implicit-static-bound.rs:88:9\n    |\n LL |     fn use_it<'a>(val: &'a dyn ObjectTrait) -> impl OtherTrait<'a> {\n    |                   --- `val` is a reference that is only valid in the function body\n@@ -28,5 +28,15 @@ LL |         val.use_self()\n    |\n    = help: consider replacing `'a` with `'static`\n \n-error: aborting due to 3 previous errors\n+error[E0521]: borrowed data escapes outside of function\n+  --> $DIR/impl-on-dyn-trait-with-implicit-static-bound.rs:108:9\n+   |\n+LL |     fn use_it<'a>(val: &'a dyn ObjectTrait) -> impl OtherTrait<'a> + 'a {\n+   |                   --- `val` is a reference that is only valid in the function body\n+LL |         MyTrait::use_self(val)\n+   |         ^^^^^^^^^^^^^^^^^^^^^^ `val` escapes the function body here\n+   |\n+   = help: consider replacing `'a` with `'static`\n+\n+error: aborting due to 4 previous errors\n "}, {"sha": "8dd1e5d78de0983a322b4e9fc4a8e61e15d7a28c", "filename": "src/test/ui/suggestions/impl-on-dyn-trait-with-implicit-static-bound.rs", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/53d96b5159ee4eb937728bbc33c28c3b98ebebd6/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d96b5159ee4eb937728bbc33c28c3b98ebebd6/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound.rs?ref=53d96b5159ee4eb937728bbc33c28c3b98ebebd6", "patch": "@@ -78,14 +78,35 @@ mod ban {\n     trait MyTrait {\n         fn use_self(&self) -> &() { panic!() }\n     }\n-    trait Irrelevant {}\n+    trait Irrelevant {\n+        fn use_self(&self) -> &() { panic!() }\n+    }\n \n     impl MyTrait for dyn ObjectTrait {}\n-    impl Irrelevant for dyn ObjectTrait {}\n \n     fn use_it<'a>(val: &'a dyn ObjectTrait) -> impl OtherTrait<'a> {\n         val.use_self() //~ ERROR E0759\n     }\n }\n \n+mod bal {\n+    trait OtherTrait<'a> {}\n+    impl<'a> OtherTrait<'a> for &'a () {}\n+\n+    trait ObjectTrait {}\n+    trait MyTrait {\n+        fn use_self(&self) -> &() { panic!() }\n+    }\n+    trait Irrelevant {\n+        fn use_self(&self) -> &() { panic!() }\n+    }\n+\n+    impl MyTrait for dyn ObjectTrait {}\n+    impl Irrelevant for dyn ObjectTrait {}\n+\n+    fn use_it<'a>(val: &'a dyn ObjectTrait) -> impl OtherTrait<'a> + 'a {\n+        MyTrait::use_self(val) //~ ERROR E0759\n+    }\n+}\n+\n fn main() {}"}, {"sha": "7e814fc664625ee0dc8b3feeb89358584b54d425", "filename": "src/test/ui/suggestions/impl-on-dyn-trait-with-implicit-static-bound.stderr", "status": "modified", "additions": 36, "deletions": 10, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/53d96b5159ee4eb937728bbc33c28c3b98ebebd6/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53d96b5159ee4eb937728bbc33c28c3b98ebebd6/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound.stderr?ref=53d96b5159ee4eb937728bbc33c28c3b98ebebd6", "patch": "@@ -6,7 +6,7 @@ LL |     fn use_it<'a, T>(val: &'a dyn ObjectTrait<T>) -> impl OtherTrait<'a> +\n LL |         val.use_self::<T>()\n    |             ^^^^^^^^ ...is captured and required to live as long as `'static` here\n    |\n-note: `impl` of `foo::MyTrait` has a `'static` requirement\n+note: the used `impl` has a `'static` requirement\n   --> $DIR/impl-on-dyn-trait-with-implicit-static-bound.rs:14:32\n    |\n LL |     impl<T> MyTrait<T> for dyn ObjectTrait<T> {\n@@ -26,7 +26,7 @@ LL |     fn use_it<'a>(val: &'a dyn ObjectTrait) -> impl OtherTrait<'a> + 'a {\n LL |         val.use_self()\n    |             ^^^^^^^^ ...is captured and required to live as long as `'static` here because of an implicit lifetime bound on the inherent `impl`\n    |\n-note: inherent `impl` has a `'static` requirement\n+note: the used `impl` has a `'static` requirement\n   --> $DIR/impl-on-dyn-trait-with-implicit-static-bound.rs:64:14\n    |\n LL |     impl dyn ObjectTrait {\n@@ -39,15 +39,15 @@ LL |     impl dyn ObjectTrait + '_ {\n    |                          ^^^^\n \n error[E0759]: `val` has lifetime `'a` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/impl-on-dyn-trait-with-implicit-static-bound.rs:87:13\n+  --> $DIR/impl-on-dyn-trait-with-implicit-static-bound.rs:88:13\n    |\n LL |     fn use_it<'a>(val: &'a dyn ObjectTrait) -> impl OtherTrait<'a> {\n    |                        ------------------- this data with lifetime `'a`...\n LL |         val.use_self()\n    |             ^^^^^^^^ ...is captured and required to live as long as `'static` here\n    |\n-note: `impl` of `ban::MyTrait` has a `'static` requirement\n-  --> $DIR/impl-on-dyn-trait-with-implicit-static-bound.rs:83:26\n+note: the used `impl` has a `'static` requirement\n+  --> $DIR/impl-on-dyn-trait-with-implicit-static-bound.rs:85:26\n    |\n LL |         fn use_self(&self) -> &() { panic!() }\n    |            -------- calling this method introduces the `impl`'s 'static` requirement\n@@ -63,15 +63,41 @@ help: to declare that the `impl Trait` captures data from argument `val`, you ca\n LL |     fn use_it<'a>(val: &'a dyn ObjectTrait) -> impl OtherTrait<'a> + 'a {\n    |                                                                    ^^^^\n \n+error[E0759]: `val` has lifetime `'a` but it needs to satisfy a `'static` lifetime requirement\n+  --> $DIR/impl-on-dyn-trait-with-implicit-static-bound.rs:108:27\n+   |\n+LL |     fn use_it<'a>(val: &'a dyn ObjectTrait) -> impl OtherTrait<'a> + 'a {\n+   |                        ------------------- this data with lifetime `'a`...\n+LL |         MyTrait::use_self(val)\n+   |                           ^^^ ...is captured here...\n+   |\n+note: ...and is required to live as long as `'static` here\n+  --> $DIR/impl-on-dyn-trait-with-implicit-static-bound.rs:108:9\n+   |\n+LL |         MyTrait::use_self(val)\n+   |         ^^^^^^^^^^^^^^^^^\n+note: the used `impl` has a `'static` requirement\n+  --> $DIR/impl-on-dyn-trait-with-implicit-static-bound.rs:104:26\n+   |\n+LL |         fn use_self(&self) -> &() { panic!() }\n+   |            -------- calling this method introduces the `impl`'s 'static` requirement\n+...\n+LL |     impl MyTrait for dyn ObjectTrait {}\n+   |                          ^^^^^^^^^^^ this has an implicit `'static` lifetime requirement\n+help: consider relaxing the implicit `'static` requirement\n+   |\n+LL |     impl MyTrait for dyn ObjectTrait + '_ {}\n+   |                                      ^^^^\n+\n error[E0767]: `val` has lifetime `'a` but calling `use_self` introduces an implicit `'static` lifetime requirement\n   --> $DIR/impl-on-dyn-trait-with-implicit-static-bound.rs:37:13\n    |\n LL |     fn use_it<'a>(val: &'a dyn ObjectTrait) -> &'a () {\n    |                        ------------------- this data with lifetime `'a`...\n LL |         val.use_self()\n-   |             ^^^^^^^^ ...is captured and required to live as long as `'static` here because of an implicit lifetime on the `impl` of `bar::MyTrait`\n+   |             ^^^^^^^^ ...is captured and required to live as long as `'static` here\n    |\n-note: `impl` of `bar::MyTrait` has a `'static` requirement\n+note: the used `impl` has a `'static` requirement\n   --> $DIR/impl-on-dyn-trait-with-implicit-static-bound.rs:31:26\n    |\n LL |     impl MyTrait for dyn ObjectTrait {\n@@ -89,9 +115,9 @@ error[E0767]: `val` has lifetime `'a` but calling `use_self` introduces an impli\n LL |     fn use_it<'a>(val: &'a Box<dyn ObjectTrait + 'a>) -> &'a () {\n    |                        ----------------------------- this data with lifetime `'a`...\n LL |         val.use_self()\n-   |             ^^^^^^^^ ...is captured and required to live as long as `'static` here because of an implicit lifetime on the `impl` of `baz::MyTrait`\n+   |             ^^^^^^^^ ...is captured and required to live as long as `'static` here\n    |\n-note: `impl` of `baz::MyTrait` has a `'static` requirement\n+note: the used `impl` has a `'static` requirement\n   --> $DIR/impl-on-dyn-trait-with-implicit-static-bound.rs:48:30\n    |\n LL |     impl MyTrait for Box<dyn ObjectTrait> {\n@@ -103,6 +129,6 @@ help: consider relaxing the implicit `'static` requirement\n LL |     impl MyTrait for Box<dyn ObjectTrait + '_> {\n    |                                          ^^^^\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 6 previous errors\n \n For more information about this error, try `rustc --explain E0759`."}]}