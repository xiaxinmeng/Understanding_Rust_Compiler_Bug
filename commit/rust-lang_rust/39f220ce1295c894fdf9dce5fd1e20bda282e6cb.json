{"sha": "39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5ZjIyMGNlMTI5NWM4OTRmZGY5ZGNlNWZkMWUyMGJkYTI4MmU2Y2I=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2021-07-31T16:26:55Z"}, "committer": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2021-08-16T17:47:22Z"}, "message": "Use note to point at bound introducing requirement", "tree": {"sha": "5ccc9bae71914b05b0f779369cce3a384066eb03", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ccc9bae71914b05b0f779369cce3a384066eb03"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "html_url": "https://github.com/rust-lang/rust/commit/39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92f3753b073c03184118a315cc0d289116102ae1", "url": "https://api.github.com/repos/rust-lang/rust/commits/92f3753b073c03184118a315cc0d289116102ae1", "html_url": "https://github.com/rust-lang/rust/commit/92f3753b073c03184118a315cc0d289116102ae1"}], "stats": {"total": 5086, "additions": 3164, "deletions": 1922}, "files": [{"sha": "5499993db63ed35a9a9c8f3b755021e96cc3feb2", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1962,7 +1962,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             }\n             ObligationCauseCode::BindingObligation(item_def_id, span) => {\n                 let item_name = tcx.def_path_str(item_def_id);\n-                let msg = format!(\"required by this bound in `{}`\", item_name);\n+                let mut multispan = MultiSpan::from(span);\n                 if let Some(ident) = tcx.opt_item_name(item_def_id) {\n                     let sm = tcx.sess.source_map();\n                     let same_line =\n@@ -1971,16 +1971,17 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                             _ => true,\n                         };\n                     if !ident.span.overlaps(span) && !same_line {\n-                        err.span_label(ident.span, \"required by a bound in this\");\n+                        multispan\n+                            .push_span_label(ident.span, \"required by a bound in this\".to_string());\n                     }\n                 }\n+                let descr = format!(\"required by a bound in `{}`\", item_name);\n                 if span != DUMMY_SP {\n-                    err.span_label(span, &msg);\n+                    let msg = format!(\"required by this bound in `{}`\", item_name);\n+                    multispan.push_span_label(span, msg);\n+                    err.span_note(multispan, &descr);\n                 } else {\n-                    err.span_note(\n-                        tcx.def_span(item_def_id),\n-                        &format!(\"required by a bound in `{}`\", item_name),\n-                    );\n+                    err.span_note(tcx.def_span(item_def_id), &descr);\n                 }\n             }\n             ObligationCauseCode::ObjectCastObligation(object_ty) => {"}, {"sha": "c7fb85c8f826329723be90871befbd3458eb1ef8", "filename": "src/test/ui/anonymous-higher-ranked-lifetime.stderr", "status": "modified", "additions": 55, "deletions": 22, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -5,9 +5,12 @@ LL |     f1(|_: (), _: ()| {});\n    |     ^^ -------------- found signature of `fn((), ()) -> _`\n    |     |\n    |     expected signature of `for<'r, 's> fn(&'r (), &'s ()) -> _`\n-...\n+   |\n+note: required by a bound in `f1`\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:16:25\n+   |\n LL | fn f1<F>(_: F) where F: Fn(&(), &()) {}\n-   |                         ------------ required by this bound in `f1`\n+   |                         ^^^^^^^^^^^^ required by this bound in `f1`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:3:5\n@@ -16,9 +19,12 @@ LL |     f2(|_: (), _: ()| {});\n    |     ^^ -------------- found signature of `fn((), ()) -> _`\n    |     |\n    |     expected signature of `for<'a, 'r> fn(&'a (), &'r ()) -> _`\n-...\n+   |\n+note: required by a bound in `f2`\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:17:25\n+   |\n LL | fn f2<F>(_: F) where F: for<'a> Fn(&'a (), &()) {}\n-   |                         ----------------------- required by this bound in `f2`\n+   |                         ^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `f2`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:4:5\n@@ -27,9 +33,12 @@ LL |     f3(|_: (), _: ()| {});\n    |     ^^ -------------- found signature of `fn((), ()) -> _`\n    |     |\n    |     expected signature of `for<'r> fn(&(), &'r ()) -> _`\n-...\n+   |\n+note: required by a bound in `f3`\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:18:29\n+   |\n LL | fn f3<'a, F>(_: F) where F: Fn(&'a (), &()) {}\n-   |                             --------------- required by this bound in `f3`\n+   |                             ^^^^^^^^^^^^^^^ required by this bound in `f3`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:5:5\n@@ -38,9 +47,12 @@ LL |     f4(|_: (), _: ()| {});\n    |     ^^ -------------- found signature of `fn((), ()) -> _`\n    |     |\n    |     expected signature of `for<'s, 'r> fn(&'s (), &'r ()) -> _`\n-...\n+   |\n+note: required by a bound in `f4`\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:19:25\n+   |\n LL | fn f4<F>(_: F) where F: for<'r> Fn(&(), &'r ()) {}\n-   |                         ----------------------- required by this bound in `f4`\n+   |                         ^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `f4`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:6:5\n@@ -49,9 +61,12 @@ LL |     f5(|_: (), _: ()| {});\n    |     ^^ -------------- found signature of `fn((), ()) -> _`\n    |     |\n    |     expected signature of `for<'r> fn(&'r (), &'r ()) -> _`\n-...\n+   |\n+note: required by a bound in `f5`\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:20:25\n+   |\n LL | fn f5<F>(_: F) where F: for<'r> Fn(&'r (), &'r ()) {}\n-   |                         -------------------------- required by this bound in `f5`\n+   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `f5`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:7:5\n@@ -60,9 +75,12 @@ LL |     g1(|_: (), _: ()| {});\n    |     ^^ -------------- found signature of `fn((), ()) -> _`\n    |     |\n    |     expected signature of `for<'r> fn(&'r (), Box<(dyn for<'s> Fn(&'s ()) + 'static)>) -> _`\n-...\n+   |\n+note: required by a bound in `g1`\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:23:25\n+   |\n LL | fn g1<F>(_: F) where F: Fn(&(), Box<dyn Fn(&())>) {}\n-   |                         ------------------------- required by this bound in `g1`\n+   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `g1`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:8:5\n@@ -71,9 +89,12 @@ LL |     g2(|_: (), _: ()| {});\n    |     ^^ -------------- found signature of `fn((), ()) -> _`\n    |     |\n    |     expected signature of `for<'r> fn(&'r (), for<'s> fn(&'s ())) -> _`\n-...\n+   |\n+note: required by a bound in `g2`\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:24:25\n+   |\n LL | fn g2<F>(_: F) where F: Fn(&(), fn(&())) {}\n-   |                         ---------------- required by this bound in `g2`\n+   |                         ^^^^^^^^^^^^^^^^ required by this bound in `g2`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:9:5\n@@ -82,9 +103,12 @@ LL |     g3(|_: (), _: ()| {});\n    |     ^^ -------------- found signature of `fn((), ()) -> _`\n    |     |\n    |     expected signature of `for<'s> fn(&'s (), Box<(dyn for<'r> Fn(&'r ()) + 'static)>) -> _`\n-...\n+   |\n+note: required by a bound in `g3`\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:25:25\n+   |\n LL | fn g3<F>(_: F) where F: for<'s> Fn(&'s (), Box<dyn Fn(&())>) {}\n-   |                         ------------------------------------ required by this bound in `g3`\n+   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `g3`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:10:5\n@@ -93,9 +117,12 @@ LL |     g4(|_: (), _: ()| {});\n    |     ^^ -------------- found signature of `fn((), ()) -> _`\n    |     |\n    |     expected signature of `for<'s> fn(&'s (), for<'r> fn(&'r ())) -> _`\n-...\n+   |\n+note: required by a bound in `g4`\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:26:25\n+   |\n LL | fn g4<F>(_: F) where F: Fn(&(), for<'r> fn(&'r ())) {}\n-   |                         --------------------------- required by this bound in `g4`\n+   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `g4`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:11:5\n@@ -104,9 +131,12 @@ LL |     h1(|_: (), _: (), _: (), _: ()| {});\n    |     ^^ ---------------------------- found signature of `fn((), (), (), ()) -> _`\n    |     |\n    |     expected signature of `for<'r, 's> fn(&'r (), Box<(dyn for<'t0> Fn(&'t0 ()) + 'static)>, &'s (), for<'t0, 't1> fn(&'t0 (), &'t1 ())) -> _`\n-...\n+   |\n+note: required by a bound in `h1`\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:29:25\n+   |\n LL | fn h1<F>(_: F) where F: Fn(&(), Box<dyn Fn(&())>, &(), fn(&(), &())) {}\n-   |                         -------------------------------------------- required by this bound in `h1`\n+   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `h1`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:12:5\n@@ -115,9 +145,12 @@ LL |     h2(|_: (), _: (), _: (), _: ()| {});\n    |     ^^ ---------------------------- found signature of `fn((), (), (), ()) -> _`\n    |     |\n    |     expected signature of `for<'r, 't0> fn(&'r (), Box<(dyn for<'s> Fn(&'s ()) + 'static)>, &'t0 (), for<'s, 't1> fn(&'s (), &'t1 ())) -> _`\n-...\n+   |\n+note: required by a bound in `h2`\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:30:25\n+   |\n LL | fn h2<F>(_: F) where F: for<'t0> Fn(&(), Box<dyn Fn(&())>, &'t0 (), fn(&(), &())) {}\n-   |                         --------------------------------------------------------- required by this bound in `h2`\n+   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `h2`\n \n error: aborting due to 11 previous errors\n "}, {"sha": "a694f88192ed62878fce5198f248d9cc4f29b2b0", "filename": "src/test/ui/associated-type-bounds/bad-bounds-on-assoc-in-trait.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbad-bounds-on-assoc-in-trait.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -4,12 +4,12 @@ error[E0277]: `<<Self as Case1>::C as Iterator>::Item` cannot be sent between th\n LL |     type C: Clone + Iterator<Item: Send + Iterator<Item: for<'a> Lam<&'a u8, App: Debug>> + Sync>;\n    |                                    ^^^^ `<<Self as Case1>::C as Iterator>::Item` cannot be sent between threads safely\n    |\n-  ::: $SRC_DIR/core/src/marker.rs:LL:COL\n+   = help: the trait `Send` is not implemented for `<<Self as Case1>::C as Iterator>::Item`\n+note: required by a bound in `Send`\n+  --> $SRC_DIR/core/src/marker.rs:LL:COL\n    |\n LL | pub unsafe auto trait Send {\n-   | -------------------------- required by this bound in `Send`\n-   |\n-   = help: the trait `Send` is not implemented for `<<Self as Case1>::C as Iterator>::Item`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Send`\n help: consider further restricting the associated type\n    |\n LL | trait Case1 where <<Self as Case1>::C as Iterator>::Item: Send {\n@@ -21,12 +21,12 @@ error[E0277]: `<<Self as Case1>::C as Iterator>::Item` is not an iterator\n LL |     type C: Clone + Iterator<Item: Send + Iterator<Item: for<'a> Lam<&'a u8, App: Debug>> + Sync>;\n    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `<<Self as Case1>::C as Iterator>::Item` is not an iterator\n    |\n-  ::: $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n+   = help: the trait `Iterator` is not implemented for `<<Self as Case1>::C as Iterator>::Item`\n+note: required by a bound in `Iterator`\n+  --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n    |\n LL | pub trait Iterator {\n-   | ------------------ required by this bound in `Iterator`\n-   |\n-   = help: the trait `Iterator` is not implemented for `<<Self as Case1>::C as Iterator>::Item`\n+   | ^^^^^^^^^^^^^^^^^^ required by this bound in `Iterator`\n help: consider further restricting the associated type\n    |\n LL | trait Case1 where <<Self as Case1>::C as Iterator>::Item: Iterator {\n@@ -38,12 +38,12 @@ error[E0277]: `<<Self as Case1>::C as Iterator>::Item` cannot be shared between\n LL |     type C: Clone + Iterator<Item: Send + Iterator<Item: for<'a> Lam<&'a u8, App: Debug>> + Sync>;\n    |                                                                                             ^^^^ `<<Self as Case1>::C as Iterator>::Item` cannot be shared between threads safely\n    |\n-  ::: $SRC_DIR/core/src/marker.rs:LL:COL\n+   = help: the trait `Sync` is not implemented for `<<Self as Case1>::C as Iterator>::Item`\n+note: required by a bound in `Sync`\n+  --> $SRC_DIR/core/src/marker.rs:LL:COL\n    |\n LL | pub unsafe auto trait Sync {\n-   | -------------------------- required by this bound in `Sync`\n-   |\n-   = help: the trait `Sync` is not implemented for `<<Self as Case1>::C as Iterator>::Item`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Sync`\n help: consider further restricting the associated type\n    |\n LL | trait Case1 where <<Self as Case1>::C as Iterator>::Item: Sync {"}, {"sha": "775fe28f00d83910e5b0b2a2a914c3c9ab84d72e", "filename": "src/test/ui/associated-type-bounds/bounds-on-assoc-in-trait.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbounds-on-assoc-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbounds-on-assoc-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fbounds-on-assoc-in-trait.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -4,12 +4,12 @@ error[E0277]: `<<Self as Case1>::A as Iterator>::Item` doesn't implement `Debug`\n LL |     type A: Iterator<Item: Debug>;\n    |                            ^^^^^ `<<Self as Case1>::A as Iterator>::Item` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    |\n-  ::: $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+   = help: the trait `Debug` is not implemented for `<<Self as Case1>::A as Iterator>::Item`\n+note: required by a bound in `Debug`\n+  --> $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n    |\n LL | pub trait Debug {\n-   | --------------- required by this bound in `Debug`\n-   |\n-   = help: the trait `Debug` is not implemented for `<<Self as Case1>::A as Iterator>::Item`\n+   | ^^^^^^^^^^^^^^^ required by this bound in `Debug`\n help: consider further restricting the associated type\n    |\n LL | trait Case1 where <<Self as Case1>::A as Iterator>::Item: Debug {\n@@ -21,11 +21,11 @@ error[E0277]: the trait bound `<<Self as Foo>::Out as Baz>::Assoc: Default` is n\n LL | pub trait Foo { type Out: Baz<Assoc: Default>; }\n    |                                      ^^^^^^^ the trait `Default` is not implemented for `<<Self as Foo>::Out as Baz>::Assoc`\n    |\n-  ::: $SRC_DIR/core/src/default.rs:LL:COL\n+note: required by a bound in `Default`\n+  --> $SRC_DIR/core/src/default.rs:LL:COL\n    |\n LL | pub trait Default: Sized {\n-   | ------------------------ required by this bound in `Default`\n-   |\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Default`\n help: consider further restricting the associated type\n    |\n LL | pub trait Foo where <<Self as Foo>::Out as Baz>::Assoc: Default { type Out: Baz<Assoc: Default>; }"}, {"sha": "af86990ac66aa01a171501e0f71c5a87fc8ebd5f", "filename": "src/test/ui/associated-type-bounds/issue-83017.stderr", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fissue-83017.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fissue-83017.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fissue-83017.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,26 +1,32 @@\n error[E0277]: the trait bound `for<'a, 'b> <Z as TraitA<'a>>::AsA: TraitB<'a, 'b>` is not satisfied\n   --> $DIR/issue-83017.rs:36:5\n    |\n+LL |     foo::<Z>();\n+   |     ^^^^^^^^ the trait `for<'a, 'b> TraitB<'a, 'b>` is not implemented for `<Z as TraitA<'a>>::AsA`\n+   |\n+note: required by a bound in `foo`\n+  --> $DIR/issue-83017.rs:31:32\n+   |\n LL | fn foo<T>()\n    |    --- required by a bound in this\n LL | where\n LL |     for<'a> T: TraitA<'a, AsA: for<'b> TraitB<'a, 'b, AsB: for<'c> TraitC<'a, 'b, 'c>>>,\n-   |                                ------------------------------------------------------- required by this bound in `foo`\n-...\n-LL |     foo::<Z>();\n-   |     ^^^^^^^^ the trait `for<'a, 'b> TraitB<'a, 'b>` is not implemented for `<Z as TraitA<'a>>::AsA`\n+   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `foo`\n \n error[E0277]: the trait bound `for<'a, 'b, 'c> <<Z as TraitA<'a>>::AsA as TraitB<'a, 'b>>::AsB: TraitC<'a, 'b, 'c>` is not satisfied\n   --> $DIR/issue-83017.rs:36:5\n    |\n+LL |     foo::<Z>();\n+   |     ^^^^^^^^ the trait `for<'a, 'b, 'c> TraitC<'a, 'b, 'c>` is not implemented for `<<Z as TraitA<'a>>::AsA as TraitB<'a, 'b>>::AsB`\n+   |\n+note: required by a bound in `foo`\n+  --> $DIR/issue-83017.rs:31:60\n+   |\n LL | fn foo<T>()\n    |    --- required by a bound in this\n LL | where\n LL |     for<'a> T: TraitA<'a, AsA: for<'b> TraitB<'a, 'b, AsB: for<'c> TraitC<'a, 'b, 'c>>>,\n-   |                                                            -------------------------- required by this bound in `foo`\n-...\n-LL |     foo::<Z>();\n-   |     ^^^^^^^^ the trait `for<'a, 'b, 'c> TraitC<'a, 'b, 'c>` is not implemented for `<<Z as TraitA<'a>>::AsA as TraitB<'a, 'b>>::AsB`\n+   |                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `foo`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "924a09c87f04ae837208c32aade4eba202048b9b", "filename": "src/test/ui/associated-types/associated-types-binding-to-type-defined-in-supertrait.stderr", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-binding-to-type-defined-in-supertrait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-binding-to-type-defined-in-supertrait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-binding-to-type-defined-in-supertrait.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,20 +1,26 @@\n error[E0271]: type mismatch resolving `<ModelT as Vehicle>::Color == Blue`\n   --> $DIR/associated-types-binding-to-type-defined-in-supertrait.rs:31:10\n    |\n-LL | fn blue_car<C:Car<Color=Blue>>(c: C) {\n-   |                   ---------- required by this bound in `blue_car`\n-...\n LL | fn b() { blue_car(ModelT); }\n    |          ^^^^^^^^ expected struct `Blue`, found struct `Black`\n+   |\n+note: required by a bound in `blue_car`\n+  --> $DIR/associated-types-binding-to-type-defined-in-supertrait.rs:27:19\n+   |\n+LL | fn blue_car<C:Car<Color=Blue>>(c: C) {\n+   |                   ^^^^^^^^^^ required by this bound in `blue_car`\n \n error[E0271]: type mismatch resolving `<ModelU as Vehicle>::Color == Black`\n   --> $DIR/associated-types-binding-to-type-defined-in-supertrait.rs:32:10\n    |\n-LL | fn black_car<C:Car<Color=Black>>(c: C) {\n-   |                    ----------- required by this bound in `black_car`\n-...\n LL | fn c() { black_car(ModelU); }\n    |          ^^^^^^^^^ expected struct `Black`, found struct `Blue`\n+   |\n+note: required by a bound in `black_car`\n+  --> $DIR/associated-types-binding-to-type-defined-in-supertrait.rs:24:20\n+   |\n+LL | fn black_car<C:Car<Color=Black>>(c: C) {\n+   |                    ^^^^^^^^^^^ required by this bound in `black_car`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "5f227a3b480f147a84adacdc99e56578c0ef2ad7", "filename": "src/test/ui/associated-types/associated-types-eq-3.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-3.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -16,11 +16,14 @@ LL | fn foo2<I: Foo<A = Bar>>(x: I) {\n error[E0271]: type mismatch resolving `<isize as Foo>::A == Bar`\n   --> $DIR/associated-types-eq-3.rs:38:5\n    |\n-LL | fn foo1<I: Foo<A=Bar>>(x: I) {\n-   |                ----- required by this bound in `foo1`\n-...\n LL |     foo1(a);\n    |     ^^^^ expected struct `Bar`, found `usize`\n+   |\n+note: required by a bound in `foo1`\n+  --> $DIR/associated-types-eq-3.rs:18:16\n+   |\n+LL | fn foo1<I: Foo<A=Bar>>(x: I) {\n+   |                ^^^^^ required by this bound in `foo1`\n \n error[E0271]: type mismatch resolving `<isize as Foo>::A == Bar`\n   --> $DIR/associated-types-eq-3.rs:41:9"}, {"sha": "1da82aba5bc35e3bb57a3120d100c9cbf4555af6", "filename": "src/test/ui/associated-types/associated-types-eq-hr.nll.stderr", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.nll.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,32 +1,36 @@\n error[E0271]: type mismatch resolving `for<'x> <UintStruct as TheTrait<&'x isize>>::A == &'x isize`\n   --> $DIR/associated-types-eq-hr.rs:87:5\n    |\n-LL | fn foo<T>()\n-   |    --- required by a bound in this\n-LL | where\n-LL |     T: for<'x> TheTrait<&'x isize, A = &'x isize>,\n-   |                                    ------------- required by this bound in `foo`\n-...\n LL |     foo::<UintStruct>();\n    |     ^^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n    |\n    = note: expected reference `&isize`\n               found reference `&usize`\n+note: required by a bound in `foo`\n+  --> $DIR/associated-types-eq-hr.rs:45:36\n+   |\n+LL | fn foo<T>()\n+   |    --- required by a bound in this\n+LL | where\n+LL |     T: for<'x> TheTrait<&'x isize, A = &'x isize>,\n+   |                                    ^^^^^^^^^^^^^ required by this bound in `foo`\n \n error[E0271]: type mismatch resolving `for<'x> <IntStruct as TheTrait<&'x isize>>::A == &'x usize`\n   --> $DIR/associated-types-eq-hr.rs:91:5\n    |\n-LL | fn bar<T>()\n-   |    --- required by a bound in this\n-LL | where\n-LL |     T: for<'x> TheTrait<&'x isize, A = &'x usize>,\n-   |                                    ------------- required by this bound in `bar`\n-...\n LL |     bar::<IntStruct>();\n    |     ^^^^^^^^^^^^^^^^ expected `usize`, found `isize`\n    |\n    = note: expected reference `&usize`\n               found reference `&isize`\n+note: required by a bound in `bar`\n+  --> $DIR/associated-types-eq-hr.rs:52:36\n+   |\n+LL | fn bar<T>()\n+   |    --- required by a bound in this\n+LL | where\n+LL |     T: for<'x> TheTrait<&'x isize, A = &'x usize>,\n+   |                                    ^^^^^^^^^^^^^ required by this bound in `bar`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "e34b4f1c772ea510c6be37c3115d3e61ccaa3d8a", "filename": "src/test/ui/associated-types/associated-types-eq-hr.stderr", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,32 +1,36 @@\n error[E0271]: type mismatch resolving `for<'x> <UintStruct as TheTrait<&'x isize>>::A == &'x isize`\n   --> $DIR/associated-types-eq-hr.rs:87:5\n    |\n-LL | fn foo<T>()\n-   |    --- required by a bound in this\n-LL | where\n-LL |     T: for<'x> TheTrait<&'x isize, A = &'x isize>,\n-   |                                    ------------- required by this bound in `foo`\n-...\n LL |     foo::<UintStruct>();\n    |     ^^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n    |\n    = note: expected reference `&isize`\n               found reference `&usize`\n+note: required by a bound in `foo`\n+  --> $DIR/associated-types-eq-hr.rs:45:36\n+   |\n+LL | fn foo<T>()\n+   |    --- required by a bound in this\n+LL | where\n+LL |     T: for<'x> TheTrait<&'x isize, A = &'x isize>,\n+   |                                    ^^^^^^^^^^^^^ required by this bound in `foo`\n \n error[E0271]: type mismatch resolving `for<'x> <IntStruct as TheTrait<&'x isize>>::A == &'x usize`\n   --> $DIR/associated-types-eq-hr.rs:91:5\n    |\n-LL | fn bar<T>()\n-   |    --- required by a bound in this\n-LL | where\n-LL |     T: for<'x> TheTrait<&'x isize, A = &'x usize>,\n-   |                                    ------------- required by this bound in `bar`\n-...\n LL |     bar::<IntStruct>();\n    |     ^^^^^^^^^^^^^^^^ expected `usize`, found `isize`\n    |\n    = note: expected reference `&usize`\n               found reference `&isize`\n+note: required by a bound in `bar`\n+  --> $DIR/associated-types-eq-hr.rs:52:36\n+   |\n+LL | fn bar<T>()\n+   |    --- required by a bound in this\n+LL | where\n+LL |     T: for<'x> TheTrait<&'x isize, A = &'x usize>,\n+   |                                    ^^^^^^^^^^^^^ required by this bound in `bar`\n \n error: implementation of `TheTrait` is not general enough\n   --> $DIR/associated-types-eq-hr.rs:96:5"}, {"sha": "92c963a9ef9f2360c4fa9588e5121e6dcc0872ac", "filename": "src/test/ui/associated-types/associated-types-for-unimpl-trait.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-for-unimpl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-for-unimpl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-for-unimpl-trait.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,12 +1,14 @@\n error[E0277]: the trait bound `Self: Get` is not satisfied\n   --> $DIR/associated-types-for-unimpl-trait.rs:10:40\n    |\n-LL | trait Get {\n-   | --------- required by this bound in `Get`\n-...\n LL |     fn uhoh<U:Get>(&self, foo: U, bar: <Self as Get>::Value) {}\n    |                                        ^^^^^^^^^^^^^^^^^^^^ the trait `Get` is not implemented for `Self`\n    |\n+note: required by a bound in `Get`\n+  --> $DIR/associated-types-for-unimpl-trait.rs:4:1\n+   |\n+LL | trait Get {\n+   | ^^^^^^^^^ required by this bound in `Get`\n help: consider further restricting `Self`\n    |\n LL |     fn uhoh<U:Get>(&self, foo: U, bar: <Self as Get>::Value) where Self: Get {}"}, {"sha": "1c24ce05ef41ee5f95dc4a042e49689f58ec08e1", "filename": "src/test/ui/associated-types/associated-types-issue-20346.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-issue-20346.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-issue-20346.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-issue-20346.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,9 +1,6 @@\n error[E0271]: type mismatch resolving `<Adapter<I> as Iterator>::Item == Option<T>`\n   --> $DIR/associated-types-issue-20346.rs:34:5\n    |\n-LL | fn is_iterator_of<A, I: Iterator<Item=A>>(_: &I) {}\n-   |                                  ------ required by this bound in `is_iterator_of`\n-...\n LL | fn test_adapter<T, I: Iterator<Item=Option<T>>>(it: I) {\n    |                 - this type parameter\n ...\n@@ -12,6 +9,11 @@ LL |     is_iterator_of::<Option<T>, _>(&adapter);\n    |\n    = note: expected enum `Option<T>`\n               found type `T`\n+note: required by a bound in `is_iterator_of`\n+  --> $DIR/associated-types-issue-20346.rs:15:34\n+   |\n+LL | fn is_iterator_of<A, I: Iterator<Item=A>>(_: &I) {}\n+   |                                  ^^^^^^ required by this bound in `is_iterator_of`\n \n error: aborting due to previous error\n "}, {"sha": "922cf88a04999d5c9cf7b81536bc381c67d55935", "filename": "src/test/ui/associated-types/associated-types-multiple-types-one-trait.stderr", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-multiple-types-one-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-multiple-types-one-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-multiple-types-one-trait.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -3,12 +3,14 @@ error[E0271]: type mismatch resolving `<T as Foo>::Y == i32`\n    |\n LL |     want_y(t);\n    |     ^^^^^^ expected `i32`, found associated type\n-...\n-LL | fn want_y<T:Foo<Y=i32>>(t: &T) { }\n-   |                 ----- required by this bound in `want_y`\n    |\n    = note:         expected type `i32`\n            found associated type `<T as Foo>::Y`\n+note: required by a bound in `want_y`\n+  --> $DIR/associated-types-multiple-types-one-trait.rs:44:17\n+   |\n+LL | fn want_y<T:Foo<Y=i32>>(t: &T) { }\n+   |                 ^^^^^ required by this bound in `want_y`\n help: consider constraining the associated type `<T as Foo>::Y` to `i32`\n    |\n LL | fn have_x_want_y<T:Foo<X=u32, Y = i32>>(t: &T)\n@@ -19,12 +21,14 @@ error[E0271]: type mismatch resolving `<T as Foo>::X == u32`\n    |\n LL |     want_x(t);\n    |     ^^^^^^ expected `u32`, found associated type\n-...\n-LL | fn want_x<T:Foo<X=u32>>(t: &T) { }\n-   |                 ----- required by this bound in `want_x`\n    |\n    = note:         expected type `u32`\n            found associated type `<T as Foo>::X`\n+note: required by a bound in `want_x`\n+  --> $DIR/associated-types-multiple-types-one-trait.rs:42:17\n+   |\n+LL | fn want_x<T:Foo<X=u32>>(t: &T) { }\n+   |                 ^^^^^ required by this bound in `want_x`\n help: consider constraining the associated type `<T as Foo>::X` to `u32`\n    |\n LL | fn have_y_want_x<T:Foo<Y=i32, X = u32>>(t: &T)"}, {"sha": "509d548c69df0b27ac0bcb214808cb1d36fd3725", "filename": "src/test/ui/associated-types/associated-types-no-suitable-bound.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-bound.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,12 +1,14 @@\n error[E0277]: the trait bound `T: Get` is not satisfied\n   --> $DIR/associated-types-no-suitable-bound.rs:11:21\n    |\n-LL | trait Get {\n-   | --------- required by this bound in `Get`\n-...\n LL |     fn uhoh<T>(foo: <T as Get>::Value) {}\n    |                     ^^^^^^^^^^^^^^^^^ the trait `Get` is not implemented for `T`\n    |\n+note: required by a bound in `Get`\n+  --> $DIR/associated-types-no-suitable-bound.rs:1:1\n+   |\n+LL | trait Get {\n+   | ^^^^^^^^^ required by this bound in `Get`\n help: consider restricting type parameter `T`\n    |\n LL |     fn uhoh<T: Get>(foo: <T as Get>::Value) {}"}, {"sha": "1cb9ac8fdefc1d111244473d85301fd38dbe0204", "filename": "src/test/ui/associated-types/associated-types-no-suitable-supertrait-2.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-supertrait-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-supertrait-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-supertrait-2.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,12 +1,14 @@\n error[E0277]: the trait bound `Self: Get` is not satisfied\n   --> $DIR/associated-types-no-suitable-supertrait-2.rs:17:40\n    |\n-LL | trait Get {\n-   | --------- required by this bound in `Get`\n-...\n LL |     fn uhoh<U:Get>(&self, foo: U, bar: <Self as Get>::Value) {}\n    |                                        ^^^^^^^^^^^^^^^^^^^^ the trait `Get` is not implemented for `Self`\n    |\n+note: required by a bound in `Get`\n+  --> $DIR/associated-types-no-suitable-supertrait-2.rs:12:1\n+   |\n+LL | trait Get {\n+   | ^^^^^^^^^ required by this bound in `Get`\n help: consider further restricting `Self`\n    |\n LL |     fn uhoh<U:Get>(&self, foo: U, bar: <Self as Get>::Value) where Self: Get {}"}, {"sha": "e3185fbe9392e648a88332c84bf5688cf6fa6914", "filename": "src/test/ui/associated-types/associated-types-no-suitable-supertrait.stderr", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-supertrait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-supertrait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-supertrait.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,12 +1,14 @@\n error[E0277]: the trait bound `Self: Get` is not satisfied\n   --> $DIR/associated-types-no-suitable-supertrait.rs:17:40\n    |\n-LL | trait Get {\n-   | --------- required by this bound in `Get`\n-...\n LL |     fn uhoh<U:Get>(&self, foo: U, bar: <Self as Get>::Value) {}\n    |                                        ^^^^^^^^^^^^^^^^^^^^ the trait `Get` is not implemented for `Self`\n    |\n+note: required by a bound in `Get`\n+  --> $DIR/associated-types-no-suitable-supertrait.rs:12:1\n+   |\n+LL | trait Get {\n+   | ^^^^^^^^^ required by this bound in `Get`\n help: consider further restricting `Self`\n    |\n LL |     fn uhoh<U:Get>(&self, foo: U, bar: <Self as Get>::Value) where Self: Get {}\n@@ -15,11 +17,14 @@ LL |     fn uhoh<U:Get>(&self, foo: U, bar: <Self as Get>::Value) where Self: Ge\n error[E0277]: the trait bound `(T, U): Get` is not satisfied\n   --> $DIR/associated-types-no-suitable-supertrait.rs:22:40\n    |\n-LL | trait Get {\n-   | --------- required by this bound in `Get`\n-...\n LL |     fn uhoh<U:Get>(&self, foo: U, bar: <(T, U) as Get>::Value) {}\n    |                                        ^^^^^^^^^^^^^^^^^^^^^^ the trait `Get` is not implemented for `(T, U)`\n+   |\n+note: required by a bound in `Get`\n+  --> $DIR/associated-types-no-suitable-supertrait.rs:12:1\n+   |\n+LL | trait Get {\n+   | ^^^^^^^^^ required by this bound in `Get`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "dc087e4185fb648e58f14995fcdb46defb761dc7", "filename": "src/test/ui/associated-types/associated-types-overridden-binding.stderr", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,18 +1,26 @@\n error[E0284]: type annotations needed: cannot satisfy `<Self as Iterator>::Item == i32`\n   --> $DIR/associated-types-overridden-binding.rs:4:12\n    |\n-LL | trait Foo: Iterator<Item = i32> {}\n-   |                     ---------- required by this bound in `Foo`\n LL | trait Bar: Foo<Item = u32> {}\n    |            ^^^^^^^^^^^^^^^ cannot satisfy `<Self as Iterator>::Item == i32`\n+   |\n+note: required by a bound in `Foo`\n+  --> $DIR/associated-types-overridden-binding.rs:3:21\n+   |\n+LL | trait Foo: Iterator<Item = i32> {}\n+   |                     ^^^^^^^^^^ required by this bound in `Foo`\n \n error[E0284]: type annotations needed: cannot satisfy `<Self as Iterator>::Item == i32`\n   --> $DIR/associated-types-overridden-binding.rs:7:21\n    |\n-LL | trait I32Iterator = Iterator<Item = i32>;\n-   |                              ---------- required by this bound in `I32Iterator`\n LL | trait U32Iterator = I32Iterator<Item = u32>;\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^ cannot satisfy `<Self as Iterator>::Item == i32`\n+   |\n+note: required by a bound in `I32Iterator`\n+  --> $DIR/associated-types-overridden-binding.rs:6:30\n+   |\n+LL | trait I32Iterator = Iterator<Item = i32>;\n+   |                              ^^^^^^^^^^ required by this bound in `I32Iterator`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "c4ea4ae6bc0cbb31987fde4786ddd4315054207b", "filename": "src/test/ui/associated-types/associated-types-path-2.stderr", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -12,11 +12,14 @@ LL |     f1(2i32, 4u32);\n error[E0277]: the trait bound `u32: Foo` is not satisfied\n   --> $DIR/associated-types-path-2.rs:29:5\n    |\n-LL | pub fn f1<T: Foo>(a: T, x: T::A) {}\n-   |              --- required by this bound in `f1`\n-...\n LL |     f1(2u32, 4u32);\n    |     ^^ the trait `Foo` is not implemented for `u32`\n+   |\n+note: required by a bound in `f1`\n+  --> $DIR/associated-types-path-2.rs:13:14\n+   |\n+LL | pub fn f1<T: Foo>(a: T, x: T::A) {}\n+   |              ^^^ required by this bound in `f1`\n \n error[E0277]: the trait bound `u32: Foo` is not satisfied\n   --> $DIR/associated-types-path-2.rs:29:5\n@@ -27,11 +30,14 @@ LL |     f1(2u32, 4u32);\n error[E0277]: the trait bound `u32: Foo` is not satisfied\n   --> $DIR/associated-types-path-2.rs:35:5\n    |\n-LL | pub fn f1<T: Foo>(a: T, x: T::A) {}\n-   |              --- required by this bound in `f1`\n-...\n LL |     f1(2u32, 4i32);\n    |     ^^ the trait `Foo` is not implemented for `u32`\n+   |\n+note: required by a bound in `f1`\n+  --> $DIR/associated-types-path-2.rs:13:14\n+   |\n+LL | pub fn f1<T: Foo>(a: T, x: T::A) {}\n+   |              ^^^ required by this bound in `f1`\n \n error[E0277]: the trait bound `u32: Foo` is not satisfied\n   --> $DIR/associated-types-path-2.rs:35:5"}, {"sha": "09ec0e116175db9462eeb812b13546d9f679c61b", "filename": "src/test/ui/associated-types/associated-types-projection-to-unrelated-trait-in-method-without-default.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-projection-to-unrelated-trait-in-method-without-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-projection-to-unrelated-trait-in-method-without-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-projection-to-unrelated-trait-in-method-without-default.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,12 +1,14 @@\n error[E0277]: the trait bound `Self: Get` is not satisfied\n   --> $DIR/associated-types-projection-to-unrelated-trait-in-method-without-default.rs:10:40\n    |\n-LL | trait Get {\n-   | --------- required by this bound in `Get`\n-...\n LL |     fn okay<U:Get>(&self, foo: U, bar: <Self as Get>::Value);\n    |                                        ^^^^^^^^^^^^^^^^^^^^ the trait `Get` is not implemented for `Self`\n    |\n+note: required by a bound in `Get`\n+  --> $DIR/associated-types-projection-to-unrelated-trait-in-method-without-default.rs:5:1\n+   |\n+LL | trait Get {\n+   | ^^^^^^^^^ required by this bound in `Get`\n help: consider further restricting `Self`\n    |\n LL |     fn okay<U:Get>(&self, foo: U, bar: <Self as Get>::Value) where Self: Get;"}, {"sha": "8a8211ff858b967094bba874a8501234490e7f96", "filename": "src/test/ui/associated-types/defaults-suitability.stderr", "status": "modified", "additions": 56, "deletions": 36, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-suitability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-suitability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-suitability.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -2,33 +2,41 @@ error[E0277]: the trait bound `NotClone: Clone` is not satisfied\n   --> $DIR/defaults-suitability.rs:13:5\n    |\n LL |     type Ty: Clone = NotClone;\n-   |     ^^^^^^^^^-----^^^^^^^^^^^^\n-   |     |        |\n-   |     |        required by this bound in `Tr::Ty`\n-   |     the trait `Clone` is not implemented for `NotClone`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `NotClone`\n+   |\n+note: required by a bound in `Tr::Ty`\n+  --> $DIR/defaults-suitability.rs:13:14\n+   |\n+LL |     type Ty: Clone = NotClone;\n+   |              ^^^^^ required by this bound in `Tr::Ty`\n \n error[E0277]: the trait bound `NotClone: Clone` is not satisfied\n   --> $DIR/defaults-suitability.rs:22:5\n    |\n+LL |     type Ty = NotClone;\n+   |     ^^^^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `NotClone`\n+   |\n+note: required by a bound in `Tr2::Ty`\n+  --> $DIR/defaults-suitability.rs:20:15\n+   |\n LL |     Self::Ty: Clone,\n-   |               ----- required by this bound in `Tr2::Ty`\n+   |               ^^^^^ required by this bound in `Tr2::Ty`\n LL | {\n LL |     type Ty = NotClone;\n-   |     ^^^^^--^^^^^^^^^^^^\n-   |     |    |\n-   |     |    required by a bound in this\n-   |     the trait `Clone` is not implemented for `NotClone`\n+   |          -- required by a bound in this\n \n error[E0277]: the trait bound `T: Clone` is not satisfied\n   --> $DIR/defaults-suitability.rs:28:5\n    |\n LL |     type Bar: Clone = Vec<T>;\n-   |     ^^^^^^^^^^-----^^^^^^^^^^\n-   |     |         |\n-   |     |         required by this bound in `Foo::Bar`\n-   |     the trait `Clone` is not implemented for `T`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `T`\n    |\n    = note: required because of the requirements on the impl of `Clone` for `Vec<T>`\n+note: required by a bound in `Foo::Bar`\n+  --> $DIR/defaults-suitability.rs:28:15\n+   |\n+LL |     type Bar: Clone = Vec<T>;\n+   |               ^^^^^ required by this bound in `Foo::Bar`\n help: consider restricting type parameter `T`\n    |\n LL | trait Foo<T: std::clone::Clone> {\n@@ -38,33 +46,41 @@ error[E0277]: the trait bound `(): Foo<Self>` is not satisfied\n   --> $DIR/defaults-suitability.rs:34:5\n    |\n LL |     type Assoc: Foo<Self> = ();\n-   |     ^^^^^^^^^^^^---------^^^^^^\n-   |     |           |\n-   |     |           required by this bound in `Bar::Assoc`\n-   |     the trait `Foo<Self>` is not implemented for `()`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Foo<Self>` is not implemented for `()`\n+   |\n+note: required by a bound in `Bar::Assoc`\n+  --> $DIR/defaults-suitability.rs:34:17\n+   |\n+LL |     type Assoc: Foo<Self> = ();\n+   |                 ^^^^^^^^^ required by this bound in `Bar::Assoc`\n \n error[E0277]: the trait bound `NotClone: IsU8<NotClone>` is not satisfied\n   --> $DIR/defaults-suitability.rs:56:5\n    |\n+LL |     type Assoc = NotClone;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^ the trait `IsU8<NotClone>` is not implemented for `NotClone`\n+   |\n+note: required by a bound in `D::Assoc`\n+  --> $DIR/defaults-suitability.rs:53:18\n+   |\n LL |     Self::Assoc: IsU8<Self::Assoc>,\n-   |                  ----------------- required by this bound in `D::Assoc`\n+   |                  ^^^^^^^^^^^^^^^^^ required by this bound in `D::Assoc`\n ...\n LL |     type Assoc = NotClone;\n-   |     ^^^^^-----^^^^^^^^^^^^\n-   |     |    |\n-   |     |    required by a bound in this\n-   |     the trait `IsU8<NotClone>` is not implemented for `NotClone`\n+   |          ----- required by a bound in this\n \n error[E0277]: the trait bound `<Self as Foo2<T>>::Baz: Clone` is not satisfied\n   --> $DIR/defaults-suitability.rs:65:5\n    |\n LL |     type Bar: Clone = Vec<Self::Baz>;\n-   |     ^^^^^^^^^^-----^^^^^^^^^^^^^^^^^^\n-   |     |         |\n-   |     |         required by this bound in `Foo2::Bar`\n-   |     the trait `Clone` is not implemented for `<Self as Foo2<T>>::Baz`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `<Self as Foo2<T>>::Baz`\n    |\n    = note: required because of the requirements on the impl of `Clone` for `Vec<<Self as Foo2<T>>::Baz>`\n+note: required by a bound in `Foo2::Bar`\n+  --> $DIR/defaults-suitability.rs:65:15\n+   |\n+LL |     type Bar: Clone = Vec<Self::Baz>;\n+   |               ^^^^^ required by this bound in `Foo2::Bar`\n help: consider further restricting the associated type\n    |\n LL | trait Foo2<T> where <Self as Foo2<T>>::Baz: Clone {\n@@ -74,12 +90,14 @@ error[E0277]: the trait bound `<Self as Foo25<T>>::Baz: Clone` is not satisfied\n   --> $DIR/defaults-suitability.rs:74:5\n    |\n LL |     type Bar: Clone = Vec<Self::Baz>;\n-   |     ^^^^^^^^^^-----^^^^^^^^^^^^^^^^^^\n-   |     |         |\n-   |     |         required by this bound in `Foo25::Bar`\n-   |     the trait `Clone` is not implemented for `<Self as Foo25<T>>::Baz`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `<Self as Foo25<T>>::Baz`\n    |\n    = note: required because of the requirements on the impl of `Clone` for `Vec<<Self as Foo25<T>>::Baz>`\n+note: required by a bound in `Foo25::Bar`\n+  --> $DIR/defaults-suitability.rs:74:15\n+   |\n+LL |     type Bar: Clone = Vec<Self::Baz>;\n+   |               ^^^^^ required by this bound in `Foo25::Bar`\n help: consider further restricting the associated type\n    |\n LL | trait Foo25<T: Clone> where <Self as Foo25<T>>::Baz: Clone {\n@@ -88,15 +106,17 @@ LL | trait Foo25<T: Clone> where <Self as Foo25<T>>::Baz: Clone {\n error[E0277]: the trait bound `T: Clone` is not satisfied\n   --> $DIR/defaults-suitability.rs:87:5\n    |\n+LL |     type Baz = T;\n+   |     ^^^^^^^^^^^^^ the trait `Clone` is not implemented for `T`\n+   |\n+note: required by a bound in `Foo3::Baz`\n+  --> $DIR/defaults-suitability.rs:84:16\n+   |\n LL |     Self::Baz: Clone,\n-   |                ----- required by this bound in `Foo3::Baz`\n+   |                ^^^^^ required by this bound in `Foo3::Baz`\n ...\n LL |     type Baz = T;\n-   |     ^^^^^---^^^^^\n-   |     |    |\n-   |     |    required by a bound in this\n-   |     the trait `Clone` is not implemented for `T`\n-   |\n+   |          --- required by a bound in this\n help: consider further restricting type parameter `T`\n    |\n LL |     Self::Baz: Clone, T: std::clone::Clone"}, {"sha": "b21cae311a0423c552f4b3b3bd02c1ee74ac7e00", "filename": "src/test/ui/associated-types/defaults-unsound-62211-1.stderr", "status": "modified", "additions": 24, "deletions": 16, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-1.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -2,12 +2,14 @@ error[E0277]: `Self` doesn't implement `std::fmt::Display`\n   --> $DIR/defaults-unsound-62211-1.rs:20:5\n    |\n LL |     type Output: Copy + Deref<Target = str> + AddAssign<&'static str> + From<Self> + Display = Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-------^^^^^^^^\n-   |     |                                                                                |\n-   |     |                                                                                required by this bound in `UncheckedCopy::Output`\n-   |     `Self` cannot be formatted with the default formatter\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `Self` cannot be formatted with the default formatter\n    |\n    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n+note: required by a bound in `UncheckedCopy::Output`\n+  --> $DIR/defaults-unsound-62211-1.rs:20:86\n+   |\n+LL |     type Output: Copy + Deref<Target = str> + AddAssign<&'static str> + From<Self> + Display = Self;\n+   |                                                                                      ^^^^^^^ required by this bound in `UncheckedCopy::Output`\n help: consider further restricting `Self`\n    |\n LL | trait UncheckedCopy: Sized + std::fmt::Display {\n@@ -17,11 +19,13 @@ error[E0277]: cannot add-assign `&'static str` to `Self`\n   --> $DIR/defaults-unsound-62211-1.rs:20:5\n    |\n LL |     type Output: Copy + Deref<Target = str> + AddAssign<&'static str> + From<Self> + Display = Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-----------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |     |                                         |\n-   |     |                                         required by this bound in `UncheckedCopy::Output`\n-   |     no implementation for `Self += &'static str`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `Self += &'static str`\n    |\n+note: required by a bound in `UncheckedCopy::Output`\n+  --> $DIR/defaults-unsound-62211-1.rs:20:47\n+   |\n+LL |     type Output: Copy + Deref<Target = str> + AddAssign<&'static str> + From<Self> + Display = Self;\n+   |                                               ^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `UncheckedCopy::Output`\n help: consider further restricting `Self`\n    |\n LL | trait UncheckedCopy: Sized + AddAssign<&'static str> {\n@@ -31,11 +35,13 @@ error[E0277]: the trait bound `Self: Deref` is not satisfied\n   --> $DIR/defaults-unsound-62211-1.rs:20:5\n    |\n LL |     type Output: Copy + Deref<Target = str> + AddAssign<&'static str> + From<Self> + Display = Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^-------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |     |                   |\n-   |     |                   required by this bound in `UncheckedCopy::Output`\n-   |     the trait `Deref` is not implemented for `Self`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Deref` is not implemented for `Self`\n    |\n+note: required by a bound in `UncheckedCopy::Output`\n+  --> $DIR/defaults-unsound-62211-1.rs:20:25\n+   |\n+LL |     type Output: Copy + Deref<Target = str> + AddAssign<&'static str> + From<Self> + Display = Self;\n+   |                         ^^^^^^^^^^^^^^^^^^^ required by this bound in `UncheckedCopy::Output`\n help: consider further restricting `Self`\n    |\n LL | trait UncheckedCopy: Sized + Deref {\n@@ -45,11 +51,13 @@ error[E0277]: the trait bound `Self: Copy` is not satisfied\n   --> $DIR/defaults-unsound-62211-1.rs:20:5\n    |\n LL |     type Output: Copy + Deref<Target = str> + AddAssign<&'static str> + From<Self> + Display = Self;\n-   |     ^^^^^^^^^^^^^----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |     |            |\n-   |     |            required by this bound in `UncheckedCopy::Output`\n-   |     the trait `Copy` is not implemented for `Self`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `Self`\n    |\n+note: required by a bound in `UncheckedCopy::Output`\n+  --> $DIR/defaults-unsound-62211-1.rs:20:18\n+   |\n+LL |     type Output: Copy + Deref<Target = str> + AddAssign<&'static str> + From<Self> + Display = Self;\n+   |                  ^^^^ required by this bound in `UncheckedCopy::Output`\n help: consider further restricting `Self`\n    |\n LL | trait UncheckedCopy: Sized + Copy {"}, {"sha": "2eebfb0a48796936ebc7e185edc748d630159550", "filename": "src/test/ui/associated-types/defaults-unsound-62211-2.stderr", "status": "modified", "additions": 24, "deletions": 16, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-2.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -2,12 +2,14 @@ error[E0277]: `Self` doesn't implement `std::fmt::Display`\n   --> $DIR/defaults-unsound-62211-2.rs:20:5\n    |\n LL |     type Output: Copy + Deref<Target = str> + AddAssign<&'static str> + From<Self> + Display = Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-------^^^^^^^^\n-   |     |                                                                                |\n-   |     |                                                                                required by this bound in `UncheckedCopy::Output`\n-   |     `Self` cannot be formatted with the default formatter\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `Self` cannot be formatted with the default formatter\n    |\n    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n+note: required by a bound in `UncheckedCopy::Output`\n+  --> $DIR/defaults-unsound-62211-2.rs:20:86\n+   |\n+LL |     type Output: Copy + Deref<Target = str> + AddAssign<&'static str> + From<Self> + Display = Self;\n+   |                                                                                      ^^^^^^^ required by this bound in `UncheckedCopy::Output`\n help: consider further restricting `Self`\n    |\n LL | trait UncheckedCopy: Sized + std::fmt::Display {\n@@ -17,11 +19,13 @@ error[E0277]: cannot add-assign `&'static str` to `Self`\n   --> $DIR/defaults-unsound-62211-2.rs:20:5\n    |\n LL |     type Output: Copy + Deref<Target = str> + AddAssign<&'static str> + From<Self> + Display = Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-----------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |     |                                         |\n-   |     |                                         required by this bound in `UncheckedCopy::Output`\n-   |     no implementation for `Self += &'static str`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `Self += &'static str`\n    |\n+note: required by a bound in `UncheckedCopy::Output`\n+  --> $DIR/defaults-unsound-62211-2.rs:20:47\n+   |\n+LL |     type Output: Copy + Deref<Target = str> + AddAssign<&'static str> + From<Self> + Display = Self;\n+   |                                               ^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `UncheckedCopy::Output`\n help: consider further restricting `Self`\n    |\n LL | trait UncheckedCopy: Sized + AddAssign<&'static str> {\n@@ -31,11 +35,13 @@ error[E0277]: the trait bound `Self: Deref` is not satisfied\n   --> $DIR/defaults-unsound-62211-2.rs:20:5\n    |\n LL |     type Output: Copy + Deref<Target = str> + AddAssign<&'static str> + From<Self> + Display = Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^-------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |     |                   |\n-   |     |                   required by this bound in `UncheckedCopy::Output`\n-   |     the trait `Deref` is not implemented for `Self`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Deref` is not implemented for `Self`\n    |\n+note: required by a bound in `UncheckedCopy::Output`\n+  --> $DIR/defaults-unsound-62211-2.rs:20:25\n+   |\n+LL |     type Output: Copy + Deref<Target = str> + AddAssign<&'static str> + From<Self> + Display = Self;\n+   |                         ^^^^^^^^^^^^^^^^^^^ required by this bound in `UncheckedCopy::Output`\n help: consider further restricting `Self`\n    |\n LL | trait UncheckedCopy: Sized + Deref {\n@@ -45,11 +51,13 @@ error[E0277]: the trait bound `Self: Copy` is not satisfied\n   --> $DIR/defaults-unsound-62211-2.rs:20:5\n    |\n LL |     type Output: Copy + Deref<Target = str> + AddAssign<&'static str> + From<Self> + Display = Self;\n-   |     ^^^^^^^^^^^^^----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |     |            |\n-   |     |            required by this bound in `UncheckedCopy::Output`\n-   |     the trait `Copy` is not implemented for `Self`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `Self`\n    |\n+note: required by a bound in `UncheckedCopy::Output`\n+  --> $DIR/defaults-unsound-62211-2.rs:20:18\n+   |\n+LL |     type Output: Copy + Deref<Target = str> + AddAssign<&'static str> + From<Self> + Display = Self;\n+   |                  ^^^^ required by this bound in `UncheckedCopy::Output`\n help: consider further restricting `Self`\n    |\n LL | trait UncheckedCopy: Sized + Copy {"}, {"sha": "8455f88f18e7a996cac6562c274689a65d7014f2", "filename": "src/test/ui/associated-types/defaults-wf.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-wf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-wf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-wf.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -4,12 +4,12 @@ error[E0277]: the size for values of type `[u8]` cannot be known at compilation\n LL |     type Ty = Vec<[u8]>;\n    |               ^^^^^^^^^ doesn't have a size known at compile-time\n    |\n-  ::: $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+   = help: the trait `Sized` is not implemented for `[u8]`\n+note: required by a bound in `Vec`\n+  --> $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n    |\n LL | pub struct Vec<T, #[unstable(feature = \"allocator_api\", issue = \"32838\")] A: Allocator = Global> {\n-   |                - required by this bound in `Vec`\n-   |\n-   = help: the trait `Sized` is not implemented for `[u8]`\n+   |                ^ required by this bound in `Vec`\n \n error: aborting due to previous error\n "}, {"sha": "0bcc9be5c43ceec0b55c816b7217992a99ed2c4e", "filename": "src/test/ui/associated-types/hr-associated-type-bound-1.stderr", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-1.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,17 +1,19 @@\n error[E0277]: the trait bound `for<'b> <i32 as X<'b>>::U: Clone` is not satisfied\n   --> $DIR/hr-associated-type-bound-1.rs:12:14\n    |\n-LL | trait X<'a>\n-   |       - required by a bound in this\n-LL | where\n-LL |     for<'b> <Self as X<'b>>::U: Clone,\n-   |                                 ----- required by this bound in `X`\n-...\n LL |     type U = str;\n    |              ^^^ the trait `for<'b> Clone` is not implemented for `<i32 as X<'b>>::U`\n    |\n    = help: the following implementations were found:\n              <&T as Clone>\n+note: required by a bound in `X`\n+  --> $DIR/hr-associated-type-bound-1.rs:3:33\n+   |\n+LL | trait X<'a>\n+   |       - required by a bound in this\n+LL | where\n+LL |     for<'b> <Self as X<'b>>::U: Clone,\n+   |                                 ^^^^^ required by this bound in `X`\n \n error: aborting due to previous error\n "}, {"sha": "354f5ae459729ec1746a6999090cb37d1d94c6ef", "filename": "src/test/ui/associated-types/hr-associated-type-bound-object.stderr", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-object.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-object.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-object.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,17 +1,19 @@\n error[E0277]: the trait bound `for<'b> <T as X<'b>>::U: Clone` is not satisfied\n   --> $DIR/hr-associated-type-bound-object.rs:7:13\n    |\n-LL | trait X<'a>\n-   |       - required by a bound in this\n-LL | where\n-LL |     for<'b> <Self as X<'b>>::U: Clone,\n-   |                                 ----- required by this bound in `X`\n-...\n LL | fn f<'a, T: X<'a> + ?Sized>(x: &<T as X<'a>>::U) {\n    |             ^^^^^ the trait `for<'b> Clone` is not implemented for `<T as X<'b>>::U`\n    |\n    = help: the following implementations were found:\n              <&T as Clone>\n+note: required by a bound in `X`\n+  --> $DIR/hr-associated-type-bound-object.rs:3:33\n+   |\n+LL | trait X<'a>\n+   |       - required by a bound in this\n+LL | where\n+LL |     for<'b> <Self as X<'b>>::U: Clone,\n+   |                                 ^^^^^ required by this bound in `X`\n \n error: aborting due to previous error\n "}, {"sha": "e16931ee09fc67647829da48854b640845b4c624", "filename": "src/test/ui/associated-types/hr-associated-type-bound-param-1.stderr", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-1.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,17 +1,19 @@\n error[E0277]: the trait bound `for<'b> <u8 as Y<'b, u8>>::V: Clone` is not satisfied\n   --> $DIR/hr-associated-type-bound-param-1.rs:14:14\n    |\n-LL | trait Y<'a, T: ?Sized>\n-   |       - required by a bound in this\n-...\n-LL |     for<'b> <Self as Y<'b, T>>::V: Clone,\n-   |                                    ----- required by this bound in `Y`\n-...\n LL |     type V = str;\n    |              ^^^ the trait `for<'b> Clone` is not implemented for `<u8 as Y<'b, u8>>::V`\n    |\n    = help: the following implementations were found:\n              <&T as Clone>\n+note: required by a bound in `Y`\n+  --> $DIR/hr-associated-type-bound-param-1.rs:4:36\n+   |\n+LL | trait Y<'a, T: ?Sized>\n+   |       - required by a bound in this\n+...\n+LL |     for<'b> <Self as Y<'b, T>>::V: Clone,\n+   |                                    ^^^^^ required by this bound in `Y`\n \n error: aborting due to previous error\n "}, {"sha": "0c9f2a3978cd15247a0170577b504ea0d241e0af", "filename": "src/test/ui/associated-types/hr-associated-type-bound-param-2.stderr", "status": "modified", "additions": 23, "deletions": 17, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-2.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,47 +1,53 @@\n error[E0277]: the trait bound `for<'b> <u16 as Z<'b, u16>>::W: Clone` is not satisfied\n   --> $DIR/hr-associated-type-bound-param-2.rs:4:8\n    |\n-LL | trait Z<'a, T: ?Sized>\n-   |       - required by a bound in this\n-LL | where\n LL |     T: Z<'a, u16>,\n    |        ^^^^^^^^^^ the trait `for<'b> Clone` is not implemented for `<u16 as Z<'b, u16>>::W`\n-...\n-LL |     for<'b> <T as Z<'b, u16>>::W: Clone,\n-   |                                   ----- required by this bound in `Z`\n    |\n    = help: the following implementations were found:\n              <&T as Clone>\n+note: required by a bound in `Z`\n+  --> $DIR/hr-associated-type-bound-param-2.rs:7:35\n+   |\n+LL | trait Z<'a, T: ?Sized>\n+   |       - required by a bound in this\n+...\n+LL |     for<'b> <T as Z<'b, u16>>::W: Clone,\n+   |                                   ^^^^^ required by this bound in `Z`\n \n error[E0277]: the trait bound `for<'b> <u16 as Z<'b, u16>>::W: Clone` is not satisfied\n   --> $DIR/hr-associated-type-bound-param-2.rs:4:8\n    |\n-LL | trait Z<'a, T: ?Sized>\n-   |       - required by a bound in this\n-LL | where\n LL |     T: Z<'a, u16>,\n    |        ^^^^^^^^^^ the trait `for<'b> Clone` is not implemented for `<u16 as Z<'b, u16>>::W`\n-...\n-LL |     for<'b> <T as Z<'b, u16>>::W: Clone,\n-   |                                   ----- required by this bound in `Z`\n    |\n    = help: the following implementations were found:\n              <&T as Clone>\n-\n-error[E0277]: the trait bound `for<'b> <u16 as Z<'b, u16>>::W: Clone` is not satisfied\n-  --> $DIR/hr-associated-type-bound-param-2.rs:16:14\n+note: required by a bound in `Z`\n+  --> $DIR/hr-associated-type-bound-param-2.rs:7:35\n    |\n LL | trait Z<'a, T: ?Sized>\n    |       - required by a bound in this\n ...\n LL |     for<'b> <T as Z<'b, u16>>::W: Clone,\n-   |                                   ----- required by this bound in `Z`\n-...\n+   |                                   ^^^^^ required by this bound in `Z`\n+\n+error[E0277]: the trait bound `for<'b> <u16 as Z<'b, u16>>::W: Clone` is not satisfied\n+  --> $DIR/hr-associated-type-bound-param-2.rs:16:14\n+   |\n LL |     type W = str;\n    |              ^^^ the trait `for<'b> Clone` is not implemented for `<u16 as Z<'b, u16>>::W`\n    |\n    = help: the following implementations were found:\n              <&T as Clone>\n+note: required by a bound in `Z`\n+  --> $DIR/hr-associated-type-bound-param-2.rs:7:35\n+   |\n+LL | trait Z<'a, T: ?Sized>\n+   |       - required by a bound in this\n+...\n+LL |     for<'b> <T as Z<'b, u16>>::W: Clone,\n+   |                                   ^^^^^ required by this bound in `Z`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "b1bc1dfbb112729fb1c23141d16fc1dd7a654d72", "filename": "src/test/ui/associated-types/hr-associated-type-bound-param-3.stderr", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-3.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,17 +1,19 @@\n error[E0277]: the trait bound `for<'b> <(T,) as X<'b, (T,)>>::U: Clone` is not satisfied\n   --> $DIR/hr-associated-type-bound-param-3.rs:13:14\n    |\n-LL | trait X<'a, T>\n-   |       - required by a bound in this\n-...\n-LL |     for<'b> <T as X<'b, T>>::U: Clone,\n-   |                                 ----- required by this bound in `X`\n-...\n LL |     type U = str;\n    |              ^^^ the trait `for<'b> Clone` is not implemented for `<(T,) as X<'b, (T,)>>::U`\n    |\n    = help: the following implementations were found:\n              <&T as Clone>\n+note: required by a bound in `X`\n+  --> $DIR/hr-associated-type-bound-param-3.rs:4:33\n+   |\n+LL | trait X<'a, T>\n+   |       - required by a bound in this\n+...\n+LL |     for<'b> <T as X<'b, T>>::U: Clone,\n+   |                                 ^^^^^ required by this bound in `X`\n \n error: aborting due to previous error\n "}, {"sha": "0bd404f8a41b29b5358d6d244f55061dd18a76ae", "filename": "src/test/ui/associated-types/hr-associated-type-bound-param-4.stderr", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-4.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,17 +1,19 @@\n error[E0277]: the trait bound `for<'b> <(T,) as X<'b, T>>::U: Clone` is not satisfied\n   --> $DIR/hr-associated-type-bound-param-4.rs:13:14\n    |\n-LL | trait X<'a, T>\n-   |       - required by a bound in this\n-...\n-LL |     for<'b> <(T,) as X<'b, T>>::U: Clone,\n-   |                                    ----- required by this bound in `X`\n-...\n LL |     type U = str;\n    |              ^^^ the trait `for<'b> Clone` is not implemented for `<(T,) as X<'b, T>>::U`\n    |\n    = help: the following implementations were found:\n              <&T as Clone>\n+note: required by a bound in `X`\n+  --> $DIR/hr-associated-type-bound-param-4.rs:4:36\n+   |\n+LL | trait X<'a, T>\n+   |       - required by a bound in this\n+...\n+LL |     for<'b> <(T,) as X<'b, T>>::U: Clone,\n+   |                                    ^^^^^ required by this bound in `X`\n \n error: aborting due to previous error\n "}, {"sha": "59c0a7268cc833be32f1b70f3914708158a748ad", "filename": "src/test/ui/associated-types/hr-associated-type-bound-param-5.stderr", "status": "modified", "additions": 32, "deletions": 24, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-5.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,62 +1,70 @@\n error[E0277]: the trait bound `for<'b> <Box<T> as X<'b, Box<T>>>::U: Clone` is not satisfied\n   --> $DIR/hr-associated-type-bound-param-5.rs:27:14\n    |\n-LL | trait X<'a, T: Cycle + for<'b> X<'b, T>>\n-   |       - required by a bound in this\n-...\n-LL |     for<'b> <T::Next as X<'b, T::Next>>::U: Clone,\n-   |                                             ----- required by this bound in `X`\n-...\n LL |     type U = str;\n    |              ^^^ the trait `for<'b> Clone` is not implemented for `<Box<T> as X<'b, Box<T>>>::U`\n    |\n    = help: the following implementations were found:\n              <&T as Clone>\n-\n-error[E0277]: the trait bound `for<'b> <Vec<T> as X<'b, Vec<T>>>::U: Clone` is not satisfied\n-  --> $DIR/hr-associated-type-bound-param-5.rs:27:14\n+note: required by a bound in `X`\n+  --> $DIR/hr-associated-type-bound-param-5.rs:18:45\n    |\n LL | trait X<'a, T: Cycle + for<'b> X<'b, T>>\n    |       - required by a bound in this\n-LL | where\n-LL |     for<'b> <T as X<'b, T>>::U: Clone,\n-   |                                 ----- required by this bound in `X`\n ...\n+LL |     for<'b> <T::Next as X<'b, T::Next>>::U: Clone,\n+   |                                             ^^^^^ required by this bound in `X`\n+\n+error[E0277]: the trait bound `for<'b> <Vec<T> as X<'b, Vec<T>>>::U: Clone` is not satisfied\n+  --> $DIR/hr-associated-type-bound-param-5.rs:27:14\n+   |\n LL |     type U = str;\n    |              ^^^ the trait `for<'b> Clone` is not implemented for `<Vec<T> as X<'b, Vec<T>>>::U`\n    |\n    = help: the following implementations were found:\n              <&T as Clone>\n+note: required by a bound in `X`\n+  --> $DIR/hr-associated-type-bound-param-5.rs:16:33\n+   |\n+LL | trait X<'a, T: Cycle + for<'b> X<'b, T>>\n+   |       - required by a bound in this\n+LL | where\n+LL |     for<'b> <T as X<'b, T>>::U: Clone,\n+   |                                 ^^^^^ required by this bound in `X`\n \n error[E0277]: the trait bound `for<'b> <Vec<T> as X<'b, Vec<T>>>::U: Clone` is not satisfied\n   --> $DIR/hr-associated-type-bound-param-5.rs:33:14\n    |\n-LL | trait X<'a, T: Cycle + for<'b> X<'b, T>>\n-   |       - required by a bound in this\n-...\n-LL |     for<'b> <T::Next as X<'b, T::Next>>::U: Clone,\n-   |                                             ----- required by this bound in `X`\n-...\n LL |     type U = str;\n    |              ^^^ the trait `for<'b> Clone` is not implemented for `<Vec<T> as X<'b, Vec<T>>>::U`\n    |\n    = help: the following implementations were found:\n              <&T as Clone>\n-\n-error[E0277]: the trait bound `for<'b> <Box<T> as X<'b, Box<T>>>::U: Clone` is not satisfied\n-  --> $DIR/hr-associated-type-bound-param-5.rs:33:14\n+note: required by a bound in `X`\n+  --> $DIR/hr-associated-type-bound-param-5.rs:18:45\n    |\n LL | trait X<'a, T: Cycle + for<'b> X<'b, T>>\n    |       - required by a bound in this\n-LL | where\n-LL |     for<'b> <T as X<'b, T>>::U: Clone,\n-   |                                 ----- required by this bound in `X`\n ...\n+LL |     for<'b> <T::Next as X<'b, T::Next>>::U: Clone,\n+   |                                             ^^^^^ required by this bound in `X`\n+\n+error[E0277]: the trait bound `for<'b> <Box<T> as X<'b, Box<T>>>::U: Clone` is not satisfied\n+  --> $DIR/hr-associated-type-bound-param-5.rs:33:14\n+   |\n LL |     type U = str;\n    |              ^^^ the trait `for<'b> Clone` is not implemented for `<Box<T> as X<'b, Box<T>>>::U`\n    |\n    = help: the following implementations were found:\n              <&T as Clone>\n+note: required by a bound in `X`\n+  --> $DIR/hr-associated-type-bound-param-5.rs:16:33\n+   |\n+LL | trait X<'a, T: Cycle + for<'b> X<'b, T>>\n+   |       - required by a bound in this\n+LL | where\n+LL |     for<'b> <T as X<'b, T>>::U: Clone,\n+   |                                 ^^^^^ required by this bound in `X`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "bce5737af1bb626ab1b018fe091334a5e10b608a", "filename": "src/test/ui/associated-types/hr-associated-type-bound-param-6.stderr", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-6.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,30 +1,34 @@\n error[E0277]: the trait bound `for<'b> <T as X<'b, T>>::U: Clone` is not satisfied\n   --> $DIR/hr-associated-type-bound-param-6.rs:14:14\n    |\n-LL | trait X<'a, T>\n-   |       - required by a bound in this\n-...\n-LL |     for<'b> <T as X<'b, T>>::U: Clone,\n-   |                                 ----- required by this bound in `X`\n-...\n LL |     type U = str;\n    |              ^^^ the trait `for<'b> Clone` is not implemented for `<T as X<'b, T>>::U`\n    |\n    = help: the following implementations were found:\n              <&T as Clone>\n+note: required by a bound in `X`\n+  --> $DIR/hr-associated-type-bound-param-6.rs:4:33\n+   |\n+LL | trait X<'a, T>\n+   |       - required by a bound in this\n+...\n+LL |     for<'b> <T as X<'b, T>>::U: Clone,\n+   |                                 ^^^^^ required by this bound in `X`\n \n error[E0277]: the trait bound `for<'b> T: X<'b, T>` is not satisfied\n   --> $DIR/hr-associated-type-bound-param-6.rs:12:12\n    |\n+LL | impl<S, T> X<'_, T> for (S,) {\n+   |            ^^^^^^^^ the trait `for<'b> X<'b, T>` is not implemented for `T`\n+   |\n+note: required by a bound in `X`\n+  --> $DIR/hr-associated-type-bound-param-6.rs:3:16\n+   |\n LL | trait X<'a, T>\n    |       - required by a bound in this\n LL | where\n LL |     for<'b> T: X<'b, T>,\n-   |                -------- required by this bound in `X`\n-...\n-LL | impl<S, T> X<'_, T> for (S,) {\n-   |            ^^^^^^^^ the trait `for<'b> X<'b, T>` is not implemented for `T`\n-   |\n+   |                ^^^^^^^^ required by this bound in `X`\n help: consider restricting type parameter `T`\n    |\n LL | impl<S, T: for<'b> X<'b, T>> X<'_, T> for (S,) {"}, {"sha": "20d7a206754ea64b8530ce262ea0f458e4f84e21", "filename": "src/test/ui/associated-types/hr-associated-type-projection-1.stderr", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-projection-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-projection-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-projection-1.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,18 +1,20 @@\n error[E0277]: the trait bound `for<'b> <T as UnsafeCopy<'b, T>>::Item: Deref` is not satisfied\n   --> $DIR/hr-associated-type-projection-1.rs:15:17\n    |\n-LL | trait UnsafeCopy<'a, T: Copy>\n-   |       ---------- required by a bound in this\n-LL | where\n-LL |     for<'b> <Self as UnsafeCopy<'b, T>>::Item: std::ops::Deref<Target = T>,\n-   |                                                --------------------------- required by this bound in `UnsafeCopy`\n-...\n LL |     type Item = T;\n    |                 ^ the trait `for<'b> Deref` is not implemented for `<T as UnsafeCopy<'b, T>>::Item`\n    |\n    = help: the following implementations were found:\n              <&T as Deref>\n              <&mut T as Deref>\n+note: required by a bound in `UnsafeCopy`\n+  --> $DIR/hr-associated-type-projection-1.rs:3:48\n+   |\n+LL | trait UnsafeCopy<'a, T: Copy>\n+   |       ---------- required by a bound in this\n+LL | where\n+LL |     for<'b> <Self as UnsafeCopy<'b, T>>::Item: std::ops::Deref<Target = T>,\n+   |                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `UnsafeCopy`\n \n error[E0277]: the trait bound `for<'b> <T as UnsafeCopy<'b, T>>::Item: Deref` is not satisfied\n   --> $DIR/hr-associated-type-projection-1.rs:13:33"}, {"sha": "c8e57df0d9fee6f084cf9e9dee6dc67081564dd4", "filename": "src/test/ui/associated-types/issue-20005.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fassociated-types%2Fissue-20005.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fassociated-types%2Fissue-20005.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-20005.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,12 +1,14 @@\n error[E0277]: the size for values of type `Self` cannot be known at compilation time\n   --> $DIR/issue-20005.rs:10:49\n    |\n-LL | trait From<Src> {\n-   |            --- required by this bound in `From`\n-...\n LL |     ) -> <Dst as From<Self>>::Result where Dst: From<Self> {\n    |                                                 ^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n+note: required by a bound in `From`\n+  --> $DIR/issue-20005.rs:1:12\n+   |\n+LL | trait From<Src> {\n+   |            ^^^ required by this bound in `From`\n help: consider further restricting `Self`\n    |\n LL |     ) -> <Dst as From<Self>>::Result where Dst: From<Self>, Self: Sized {"}, {"sha": "e36572740f6551b39081018dacde8ca49ed120c8", "filename": "src/test/ui/associated-types/issue-27675-unchecked-bounds.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fassociated-types%2Fissue-27675-unchecked-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fassociated-types%2Fissue-27675-unchecked-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-27675-unchecked-bounds.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,12 +1,14 @@\n error[E0277]: the trait bound `T: Copy` is not satisfied\n   --> $DIR/issue-27675-unchecked-bounds.rs:15:31\n    |\n-LL | fn copy<U: Setup + ?Sized>(from: &U::From) -> U::From {\n-   |            ----- required by this bound in `copy`\n-...\n LL |     copy::<dyn Setup<From=T>>(t)\n    |                               ^ the trait `Copy` is not implemented for `T`\n    |\n+note: required by a bound in `copy`\n+  --> $DIR/issue-27675-unchecked-bounds.rs:10:12\n+   |\n+LL | fn copy<U: Setup + ?Sized>(from: &U::From) -> U::From {\n+   |            ^^^^^ required by this bound in `copy`\n help: consider restricting type parameter `T`\n    |\n LL | pub fn copy_any<T: std::marker::Copy>(t: &T) -> T {"}, {"sha": "a3ed1c1fe74c1e344f27486da92320801e8bf06c", "filename": "src/test/ui/associated-types/issue-43784-associated-type.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fassociated-types%2Fissue-43784-associated-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fassociated-types%2Fissue-43784-associated-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-43784-associated-type.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,12 +1,14 @@\n error[E0277]: the trait bound `T: Copy` is not satisfied\n   --> $DIR/issue-43784-associated-type.rs:14:5\n    |\n-LL |     type Assoc: Partial<Self>;\n-   |                 ------------- required by this bound in `Complete::Assoc`\n-...\n LL |     type Assoc = T;\n    |     ^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `T`\n    |\n+note: required by a bound in `Complete::Assoc`\n+  --> $DIR/issue-43784-associated-type.rs:5:17\n+   |\n+LL |     type Assoc: Partial<Self>;\n+   |                 ^^^^^^^^^^^^^ required by this bound in `Complete::Assoc`\n help: consider restricting type parameter `T`\n    |\n LL | impl<T: std::marker::Copy> Complete for T {"}, {"sha": "b7fbf893bb03b948aa8fd800bfb6953b835ee49f", "filename": "src/test/ui/associated-types/issue-43924.stderr", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fassociated-types%2Fissue-43924.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fassociated-types%2Fissue-43924.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-43924.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -2,10 +2,13 @@ error[E0277]: the trait bound `(dyn ToString + 'static): Default` is not satisfi\n   --> $DIR/issue-43924.rs:7:5\n    |\n LL |     type Out: Default + ToString + ?Sized = dyn ToString;\n-   |     ^^^^^^^^^^-------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |     |         |\n-   |     |         required by this bound in `Foo::Out`\n-   |     the trait `Default` is not implemented for `(dyn ToString + 'static)`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Default` is not implemented for `(dyn ToString + 'static)`\n+   |\n+note: required by a bound in `Foo::Out`\n+  --> $DIR/issue-43924.rs:7:15\n+   |\n+LL |     type Out: Default + ToString + ?Sized = dyn ToString;\n+   |               ^^^^^^^ required by this bound in `Foo::Out`\n \n error[E0599]: no function or associated item named `default` found for trait object `(dyn ToString + 'static)` in the current scope\n   --> $DIR/issue-43924.rs:14:39"}, {"sha": "70e688ba7732f0b577a60f85f53e74b5aa6546f3", "filename": "src/test/ui/associated-types/issue-54108.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fassociated-types%2Fissue-54108.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fassociated-types%2Fissue-54108.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-54108.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,13 +1,15 @@\n error[E0277]: cannot add `<T as SubEncoder>::ActualSize` to `<T as SubEncoder>::ActualSize`\n   --> $DIR/issue-54108.rs:19:5\n    |\n-LL |     type Size: Add<Output = Self::Size>;\n-   |                ------------------------ required by this bound in `Encoder::Size`\n-...\n LL |     type Size = <Self as SubEncoder>::ActualSize;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `<T as SubEncoder>::ActualSize + <T as SubEncoder>::ActualSize`\n    |\n    = help: the trait `Add` is not implemented for `<T as SubEncoder>::ActualSize`\n+note: required by a bound in `Encoder::Size`\n+  --> $DIR/issue-54108.rs:4:16\n+   |\n+LL |     type Size: Add<Output = Self::Size>;\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Encoder::Size`\n help: consider further restricting the associated type\n    |\n LL |     T: SubEncoder, <T as SubEncoder>::ActualSize: Add"}, {"sha": "70449b0c0357caba7c447996d712694d2ee08df1", "filename": "src/test/ui/associated-types/issue-63593.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fassociated-types%2Fissue-63593.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fassociated-types%2Fissue-63593.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-63593.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -2,11 +2,13 @@ error[E0277]: the size for values of type `Self` cannot be known at compilation\n   --> $DIR/issue-63593.rs:9:5\n    |\n LL |     type This = Self;\n-   |     ^^^^^^^^^^^^^^^^^\n-   |     |\n-   |     doesn't have a size known at compile-time\n-   |     required by this bound in `MyTrait::This`\n+   |     ^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n+note: required by a bound in `MyTrait::This`\n+  --> $DIR/issue-63593.rs:9:5\n+   |\n+LL |     type This = Self;\n+   |     ^^^^^^^^^^^^^^^^^ required by this bound in `MyTrait::This`\n help: consider further restricting `Self`\n    |\n LL | trait MyTrait: Sized {"}, {"sha": "abe1b76116eefb6769845f7c5e1f5228aac2cbdf", "filename": "src/test/ui/associated-types/issue-65774-1.stderr", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fassociated-types%2Fissue-65774-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fassociated-types%2Fissue-65774-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-65774-1.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -2,10 +2,13 @@ error[E0277]: the trait bound `T: MyDisplay` is not satisfied\n   --> $DIR/issue-65774-1.rs:10:5\n    |\n LL |     type MpuConfig: MyDisplay = T;\n-   |     ^^^^^^^^^^^^^^^^---------^^^^^\n-   |     |               |\n-   |     |               required by this bound in `MPU::MpuConfig`\n-   |     the trait `MyDisplay` is not implemented for `T`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `MyDisplay` is not implemented for `T`\n+   |\n+note: required by a bound in `MPU::MpuConfig`\n+  --> $DIR/issue-65774-1.rs:10:21\n+   |\n+LL |     type MpuConfig: MyDisplay = T;\n+   |                     ^^^^^^^^^ required by this bound in `MPU::MpuConfig`\n \n error[E0277]: the trait bound `T: MyDisplay` is not satisfied\n   --> $DIR/issue-65774-1.rs:44:76"}, {"sha": "9393cd4c0c3d7be23894ac4c5b2b6df42504e257", "filename": "src/test/ui/associated-types/issue-65774-2.stderr", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fassociated-types%2Fissue-65774-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fassociated-types%2Fissue-65774-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-65774-2.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -2,10 +2,13 @@ error[E0277]: the trait bound `T: MyDisplay` is not satisfied\n   --> $DIR/issue-65774-2.rs:10:5\n    |\n LL |     type MpuConfig: MyDisplay = T;\n-   |     ^^^^^^^^^^^^^^^^---------^^^^^\n-   |     |               |\n-   |     |               required by this bound in `MPU::MpuConfig`\n-   |     the trait `MyDisplay` is not implemented for `T`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `MyDisplay` is not implemented for `T`\n+   |\n+note: required by a bound in `MPU::MpuConfig`\n+  --> $DIR/issue-65774-2.rs:10:21\n+   |\n+LL |     type MpuConfig: MyDisplay = T;\n+   |                     ^^^^^^^^^ required by this bound in `MPU::MpuConfig`\n \n error[E0277]: the trait bound `T: MyDisplay` is not satisfied\n   --> $DIR/issue-65774-2.rs:39:25"}, {"sha": "ea98e21d72f06357903d37fdbcfcc869bef8629b", "filename": "src/test/ui/associated-types/issue-72806.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fassociated-types%2Fissue-72806.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fassociated-types%2Fissue-72806.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-72806.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,11 +1,14 @@\n error[E0271]: type mismatch resolving `<Foo2 as Bar2>::Ok == char`\n   --> $DIR/issue-72806.rs:14:5\n    |\n-LL |     type Sibling: Bar2<Ok=char>;\n-   |                        ------- required by this bound in `Bar::Sibling`\n-...\n LL |     type Sibling = Foo2;\n    |     ^^^^^^^^^^^^^^^^^^^^ expected `char`, found `u32`\n+   |\n+note: required by a bound in `Bar::Sibling`\n+  --> $DIR/issue-72806.rs:3:24\n+   |\n+LL |     type Sibling: Bar2<Ok=char>;\n+   |                        ^^^^^^^ required by this bound in `Bar::Sibling`\n \n error: aborting due to previous error\n "}, {"sha": "b85d64b86ae667c0c902e673065b315ff24b11f4", "filename": "src/test/ui/associated-types/issue-87261.stderr", "status": "modified", "additions": 70, "deletions": 42, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fassociated-types%2Fissue-87261.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fassociated-types%2Fissue-87261.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-87261.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,14 +1,16 @@\n error[E0271]: type mismatch resolving `<A as Trait>::Associated == ()`\n   --> $DIR/issue-87261.rs:56:5\n    |\n-LL | fn accepts_trait<T: Trait<Associated = ()>>(_: T) {}\n-   |                           --------------- required by this bound in `accepts_trait`\n-...\n LL |     accepts_trait(a);\n    |     ^^^^^^^^^^^^^ expected `()`, found associated type\n    |\n    = note:    expected unit type `()`\n            found associated type `<A as Trait>::Associated`\n+note: required by a bound in `accepts_trait`\n+  --> $DIR/issue-87261.rs:43:27\n+   |\n+LL | fn accepts_trait<T: Trait<Associated = ()>>(_: T) {}\n+   |                           ^^^^^^^^^^^^^^^ required by this bound in `accepts_trait`\n help: consider constraining the associated type `<A as Trait>::Associated` to `()`\n    |\n LL |     A: Trait<Associated = ()> + 'static,\n@@ -17,28 +19,32 @@ LL |     A: Trait<Associated = ()> + 'static,\n error[E0271]: type mismatch resolving `<B as Trait>::Associated == ()`\n   --> $DIR/issue-87261.rs:59:5\n    |\n-LL | fn accepts_trait<T: Trait<Associated = ()>>(_: T) {}\n-   |                           --------------- required by this bound in `accepts_trait`\n-...\n LL |     accepts_trait(b);\n    |     ^^^^^^^^^^^^^ expected `()`, found associated type\n    |\n    = note:    expected unit type `()`\n            found associated type `<B as Trait>::Associated`\n    = help: consider constraining the associated type `<B as Trait>::Associated` to `()`\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n+note: required by a bound in `accepts_trait`\n+  --> $DIR/issue-87261.rs:43:27\n+   |\n+LL | fn accepts_trait<T: Trait<Associated = ()>>(_: T) {}\n+   |                           ^^^^^^^^^^^^^^^ required by this bound in `accepts_trait`\n \n error[E0271]: type mismatch resolving `<C as Trait>::Associated == ()`\n   --> $DIR/issue-87261.rs:62:5\n    |\n-LL | fn accepts_trait<T: Trait<Associated = ()>>(_: T) {}\n-   |                           --------------- required by this bound in `accepts_trait`\n-...\n LL |     accepts_trait(c);\n    |     ^^^^^^^^^^^^^ expected `()`, found associated type\n    |\n    = note:    expected unit type `()`\n            found associated type `<C as Trait>::Associated`\n+note: required by a bound in `accepts_trait`\n+  --> $DIR/issue-87261.rs:43:27\n+   |\n+LL | fn accepts_trait<T: Trait<Associated = ()>>(_: T) {}\n+   |                           ^^^^^^^^^^^^^^^ required by this bound in `accepts_trait`\n help: consider constraining the associated type `<C as Trait>::Associated` to `()`\n    |\n LL |     C: Trait<Associated = ()> + Foo,\n@@ -47,28 +53,32 @@ LL |     C: Trait<Associated = ()> + Foo,\n error[E0271]: type mismatch resolving `<D as Trait>::Associated == ()`\n   --> $DIR/issue-87261.rs:65:5\n    |\n-LL | fn accepts_trait<T: Trait<Associated = ()>>(_: T) {}\n-   |                           --------------- required by this bound in `accepts_trait`\n-...\n LL |     accepts_trait(d);\n    |     ^^^^^^^^^^^^^ expected `()`, found associated type\n    |\n    = note:    expected unit type `()`\n            found associated type `<D as Trait>::Associated`\n    = help: consider constraining the associated type `<D as Trait>::Associated` to `()`\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n+note: required by a bound in `accepts_trait`\n+  --> $DIR/issue-87261.rs:43:27\n+   |\n+LL | fn accepts_trait<T: Trait<Associated = ()>>(_: T) {}\n+   |                           ^^^^^^^^^^^^^^^ required by this bound in `accepts_trait`\n \n error[E0271]: type mismatch resolving `<E as GenericTrait<()>>::Associated == ()`\n   --> $DIR/issue-87261.rs:68:5\n    |\n-LL | fn accepts_generic_trait<T: GenericTrait<(), Associated = ()>>(_: T) {}\n-   |                                              --------------- required by this bound in `accepts_generic_trait`\n-...\n LL |     accepts_generic_trait(e);\n    |     ^^^^^^^^^^^^^^^^^^^^^ expected `()`, found associated type\n    |\n    = note:    expected unit type `()`\n            found associated type `<E as GenericTrait<()>>::Associated`\n+note: required by a bound in `accepts_generic_trait`\n+  --> $DIR/issue-87261.rs:44:46\n+   |\n+LL | fn accepts_generic_trait<T: GenericTrait<(), Associated = ()>>(_: T) {}\n+   |                                              ^^^^^^^^^^^^^^^ required by this bound in `accepts_generic_trait`\n help: consider constraining the associated type `<E as GenericTrait<()>>::Associated` to `()`\n    |\n LL |     E: GenericTrait<(), Associated = ()> + 'static,\n@@ -77,14 +87,16 @@ LL |     E: GenericTrait<(), Associated = ()> + 'static,\n error[E0271]: type mismatch resolving `<F as GenericTrait<()>>::Associated == ()`\n   --> $DIR/issue-87261.rs:71:5\n    |\n-LL | fn accepts_generic_trait<T: GenericTrait<(), Associated = ()>>(_: T) {}\n-   |                                              --------------- required by this bound in `accepts_generic_trait`\n-...\n LL |     accepts_generic_trait(f);\n    |     ^^^^^^^^^^^^^^^^^^^^^ expected `()`, found associated type\n    |\n    = note:    expected unit type `()`\n            found associated type `<F as GenericTrait<()>>::Associated`\n+note: required by a bound in `accepts_generic_trait`\n+  --> $DIR/issue-87261.rs:44:46\n+   |\n+LL | fn accepts_generic_trait<T: GenericTrait<(), Associated = ()>>(_: T) {}\n+   |                                              ^^^^^^^^^^^^^^^ required by this bound in `accepts_generic_trait`\n help: consider constraining the associated type `<F as GenericTrait<()>>::Associated` to `()`\n    |\n LL |     F: GenericTrait<(), Associated = ()> + Foo,\n@@ -93,31 +105,35 @@ LL |     F: GenericTrait<(), Associated = ()> + Foo,\n error[E0271]: type mismatch resolving `<G as GenericTrait<()>>::Associated == ()`\n   --> $DIR/issue-87261.rs:74:5\n    |\n-LL | fn accepts_generic_trait<T: GenericTrait<(), Associated = ()>>(_: T) {}\n-   |                                              --------------- required by this bound in `accepts_generic_trait`\n-...\n LL |     accepts_generic_trait(g);\n    |     ^^^^^^^^^^^^^^^^^^^^^ expected `()`, found associated type\n    |\n    = note:    expected unit type `()`\n            found associated type `<G as GenericTrait<()>>::Associated`\n    = help: consider constraining the associated type `<G as GenericTrait<()>>::Associated` to `()`\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n+note: required by a bound in `accepts_generic_trait`\n+  --> $DIR/issue-87261.rs:44:46\n+   |\n+LL | fn accepts_generic_trait<T: GenericTrait<(), Associated = ()>>(_: T) {}\n+   |                                              ^^^^^^^^^^^^^^^ required by this bound in `accepts_generic_trait`\n \n error[E0271]: type mismatch resolving `<impl Trait as Trait>::Associated == ()`\n   --> $DIR/issue-87261.rs:79:5\n    |\n LL | fn returns_opaque() -> impl Trait + 'static {\n    |                        -------------------- the found opaque type\n ...\n-LL | fn accepts_trait<T: Trait<Associated = ()>>(_: T) {}\n-   |                           --------------- required by this bound in `accepts_trait`\n-...\n LL |     accepts_trait(returns_opaque());\n    |     ^^^^^^^^^^^^^ expected `()`, found associated type\n    |\n    = note:    expected unit type `()`\n            found associated type `<impl Trait as Trait>::Associated`\n+note: required by a bound in `accepts_trait`\n+  --> $DIR/issue-87261.rs:43:27\n+   |\n+LL | fn accepts_trait<T: Trait<Associated = ()>>(_: T) {}\n+   |                           ^^^^^^^^^^^^^^^ required by this bound in `accepts_trait`\n help: consider constraining the associated type `<impl Trait as Trait>::Associated` to `()`\n    |\n LL | fn returns_opaque() -> impl Trait<Associated = ()> + 'static {\n@@ -129,14 +145,16 @@ error[E0271]: type mismatch resolving `<impl DerivedTrait as Trait>::Associated\n LL | fn returns_opaque_derived() -> impl DerivedTrait + 'static {\n    |                                --------------------------- the found opaque type\n ...\n-LL | fn accepts_trait<T: Trait<Associated = ()>>(_: T) {}\n-   |                           --------------- required by this bound in `accepts_trait`\n-...\n LL |     accepts_trait(returns_opaque_derived());\n    |     ^^^^^^^^^^^^^ expected `()`, found associated type\n    |\n    = note:    expected unit type `()`\n            found associated type `<impl DerivedTrait as Trait>::Associated`\n+note: required by a bound in `accepts_trait`\n+  --> $DIR/issue-87261.rs:43:27\n+   |\n+LL | fn accepts_trait<T: Trait<Associated = ()>>(_: T) {}\n+   |                           ^^^^^^^^^^^^^^^ required by this bound in `accepts_trait`\n help: consider constraining the associated type `<impl DerivedTrait as Trait>::Associated` to `()`\n    |\n LL | fn returns_opaque_derived() -> impl DerivedTrait<Associated = ()> + 'static {\n@@ -148,14 +166,16 @@ error[E0271]: type mismatch resolving `<impl Trait+Foo as Trait>::Associated ==\n LL | fn returns_opaque_foo() -> impl Trait + Foo {\n    |                            ---------------- the found opaque type\n ...\n-LL | fn accepts_trait<T: Trait<Associated = ()>>(_: T) {}\n-   |                           --------------- required by this bound in `accepts_trait`\n-...\n LL |     accepts_trait(returns_opaque_foo());\n    |     ^^^^^^^^^^^^^ expected `()`, found associated type\n    |\n    = note:    expected unit type `()`\n            found associated type `<impl Trait+Foo as Trait>::Associated`\n+note: required by a bound in `accepts_trait`\n+  --> $DIR/issue-87261.rs:43:27\n+   |\n+LL | fn accepts_trait<T: Trait<Associated = ()>>(_: T) {}\n+   |                           ^^^^^^^^^^^^^^^ required by this bound in `accepts_trait`\n help: consider constraining the associated type `<impl Trait+Foo as Trait>::Associated` to `()`\n    |\n LL | fn returns_opaque_foo() -> impl Trait<Associated = ()> + Foo {\n@@ -167,31 +187,35 @@ error[E0271]: type mismatch resolving `<impl DerivedTrait+Foo as Trait>::Associa\n LL | fn returns_opaque_derived_foo() -> impl DerivedTrait + Foo {\n    |                                    ----------------------- the found opaque type\n ...\n-LL | fn accepts_trait<T: Trait<Associated = ()>>(_: T) {}\n-   |                           --------------- required by this bound in `accepts_trait`\n-...\n LL |     accepts_trait(returns_opaque_derived_foo());\n    |     ^^^^^^^^^^^^^ expected `()`, found associated type\n    |\n    = note:    expected unit type `()`\n            found associated type `<impl DerivedTrait+Foo as Trait>::Associated`\n    = help: consider constraining the associated type `<impl DerivedTrait+Foo as Trait>::Associated` to `()`\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n+note: required by a bound in `accepts_trait`\n+  --> $DIR/issue-87261.rs:43:27\n+   |\n+LL | fn accepts_trait<T: Trait<Associated = ()>>(_: T) {}\n+   |                           ^^^^^^^^^^^^^^^ required by this bound in `accepts_trait`\n \n error[E0271]: type mismatch resolving `<impl GenericTrait<()> as GenericTrait<()>>::Associated == ()`\n   --> $DIR/issue-87261.rs:91:5\n    |\n LL | fn returns_opaque_generic() -> impl GenericTrait<()> + 'static {\n    |                                ------------------------------- the found opaque type\n ...\n-LL | fn accepts_generic_trait<T: GenericTrait<(), Associated = ()>>(_: T) {}\n-   |                                              --------------- required by this bound in `accepts_generic_trait`\n-...\n LL |     accepts_generic_trait(returns_opaque_generic());\n    |     ^^^^^^^^^^^^^^^^^^^^^ expected `()`, found associated type\n    |\n    = note:    expected unit type `()`\n            found associated type `<impl GenericTrait<()> as GenericTrait<()>>::Associated`\n+note: required by a bound in `accepts_generic_trait`\n+  --> $DIR/issue-87261.rs:44:46\n+   |\n+LL | fn accepts_generic_trait<T: GenericTrait<(), Associated = ()>>(_: T) {}\n+   |                                              ^^^^^^^^^^^^^^^ required by this bound in `accepts_generic_trait`\n help: consider constraining the associated type `<impl GenericTrait<()> as GenericTrait<()>>::Associated` to `()`\n    |\n LL | fn returns_opaque_generic() -> impl GenericTrait<(), Associated = ()> + 'static {\n@@ -203,14 +227,16 @@ error[E0271]: type mismatch resolving `<impl GenericTrait<()>+Foo as GenericTrai\n LL | fn returns_opaque_generic_foo() -> impl GenericTrait<()> + Foo {\n    |                                    --------------------------- the found opaque type\n ...\n-LL | fn accepts_generic_trait<T: GenericTrait<(), Associated = ()>>(_: T) {}\n-   |                                              --------------- required by this bound in `accepts_generic_trait`\n-...\n LL |     accepts_generic_trait(returns_opaque_generic_foo());\n    |     ^^^^^^^^^^^^^^^^^^^^^ expected `()`, found associated type\n    |\n    = note:    expected unit type `()`\n            found associated type `<impl GenericTrait<()>+Foo as GenericTrait<()>>::Associated`\n+note: required by a bound in `accepts_generic_trait`\n+  --> $DIR/issue-87261.rs:44:46\n+   |\n+LL | fn accepts_generic_trait<T: GenericTrait<(), Associated = ()>>(_: T) {}\n+   |                                              ^^^^^^^^^^^^^^^ required by this bound in `accepts_generic_trait`\n help: consider constraining the associated type `<impl GenericTrait<()>+Foo as GenericTrait<()>>::Associated` to `()`\n    |\n LL | fn returns_opaque_generic_foo() -> impl GenericTrait<(), Associated = ()> + Foo {\n@@ -222,16 +248,18 @@ error[E0271]: type mismatch resolving `<impl GenericTrait<()>+GenericTrait<u8> a\n LL | fn returns_opaque_generic_duplicate() -> impl GenericTrait<()> + GenericTrait<u8> {\n    |                                          ---------------------------------------- the found opaque type\n ...\n-LL | fn accepts_generic_trait<T: GenericTrait<(), Associated = ()>>(_: T) {}\n-   |                                              --------------- required by this bound in `accepts_generic_trait`\n-...\n LL |     accepts_generic_trait(returns_opaque_generic_duplicate());\n    |     ^^^^^^^^^^^^^^^^^^^^^ expected `()`, found associated type\n    |\n    = note:    expected unit type `()`\n            found associated type `<impl GenericTrait<()>+GenericTrait<u8> as GenericTrait<()>>::Associated`\n    = help: consider constraining the associated type `<impl GenericTrait<()>+GenericTrait<u8> as GenericTrait<()>>::Associated` to `()`\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n+note: required by a bound in `accepts_generic_trait`\n+  --> $DIR/issue-87261.rs:44:46\n+   |\n+LL | fn accepts_generic_trait<T: GenericTrait<(), Associated = ()>>(_: T) {}\n+   |                                              ^^^^^^^^^^^^^^^ required by this bound in `accepts_generic_trait`\n \n error: aborting due to 14 previous errors\n "}, {"sha": "f9406834ad7077c9a432354d29c1ff1cc17c9d3a", "filename": "src/test/ui/associated-types/point-at-type-on-obligation-failure-2.stderr", "status": "modified", "additions": 20, "deletions": 11, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure-2.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,35 +1,44 @@\n error[E0277]: the trait bound `bool: Bar` is not satisfied\n   --> $DIR/point-at-type-on-obligation-failure-2.rs:8:5\n    |\n-LL |     type Assoc: Bar;\n-   |                 --- required by this bound in `Foo::Assoc`\n-...\n LL |     type Assoc = bool;\n    |     ^^^^^^^^^^^^^^^^^^ the trait `Bar` is not implemented for `bool`\n+   |\n+note: required by a bound in `Foo::Assoc`\n+  --> $DIR/point-at-type-on-obligation-failure-2.rs:4:17\n+   |\n+LL |     type Assoc: Bar;\n+   |                 ^^^ required by this bound in `Foo::Assoc`\n \n error[E0277]: the trait bound `bool: Bar` is not satisfied\n   --> $DIR/point-at-type-on-obligation-failure-2.rs:19:5\n    |\n+LL |     type Assoc = bool;\n+   |     ^^^^^^^^^^^^^^^^^^ the trait `Bar` is not implemented for `bool`\n+   |\n+note: required by a bound in `Baz::Assoc`\n+  --> $DIR/point-at-type-on-obligation-failure-2.rs:13:18\n+   |\n LL |     Self::Assoc: Bar,\n-   |                  --- required by this bound in `Baz::Assoc`\n+   |                  ^^^ required by this bound in `Baz::Assoc`\n LL | {\n LL |     type Assoc;\n    |          ----- required by a bound in this\n-...\n-LL |     type Assoc = bool;\n-   |     ^^^^^^^^^^^^^^^^^^ the trait `Bar` is not implemented for `bool`\n \n error[E0277]: the trait bound `bool: Bar` is not satisfied\n   --> $DIR/point-at-type-on-obligation-failure-2.rs:30:5\n    |\n+LL |     type Assoc = bool;\n+   |     ^^^^^^^^^^^^^^^^^^ the trait `Bar` is not implemented for `bool`\n+   |\n+note: required by a bound in `Bat::Assoc`\n+  --> $DIR/point-at-type-on-obligation-failure-2.rs:24:27\n+   |\n LL |     <Self as Bat>::Assoc: Bar,\n-   |                           --- required by this bound in `Bat::Assoc`\n+   |                           ^^^ required by this bound in `Bat::Assoc`\n LL | {\n LL |     type Assoc;\n    |          ----- required by a bound in this\n-...\n-LL |     type Assoc = bool;\n-   |     ^^^^^^^^^^^^^^^^^^ the trait `Bar` is not implemented for `bool`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "85ecba68be98930d4f23bfa397c313458cc85335", "filename": "src/test/ui/associated-types/point-at-type-on-obligation-failure.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,11 +1,14 @@\n error[E0271]: type mismatch resolving `<Foo2 as Bar2>::Ok == ()`\n   --> $DIR/point-at-type-on-obligation-failure.rs:14:5\n    |\n-LL |     type Sibling: Bar2<Ok=Self::Ok>;\n-   |                        ----------- required by this bound in `Bar::Sibling`\n-...\n LL |     type Sibling = Foo2;\n    |     ^^^^^^^^^^^^^^^^^^^^ expected `()`, found `u32`\n+   |\n+note: required by a bound in `Bar::Sibling`\n+  --> $DIR/point-at-type-on-obligation-failure.rs:3:24\n+   |\n+LL |     type Sibling: Bar2<Ok=Self::Ok>;\n+   |                        ^^^^^^^^^^^ required by this bound in `Bar::Sibling`\n \n error: aborting due to previous error\n "}, {"sha": "558b0f5c8a368d1dc77f8c7a9bc8cf997b37cc92", "filename": "src/test/ui/associated-types/trait-with-supertraits-needing-sized-self.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fassociated-types%2Ftrait-with-supertraits-needing-sized-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fassociated-types%2Ftrait-with-supertraits-needing-sized-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Ftrait-with-supertraits-needing-sized-self.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -4,11 +4,11 @@ error[E0277]: the size for values of type `Self` cannot be known at compilation\n LL | trait ArithmeticOps: Add<Output=Self> + Sub<Output=Self> + Mul<Output=Self> + Div<Output=Self> {}\n    |                      ^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n-  ::: $SRC_DIR/core/src/ops/arith.rs:LL:COL\n+note: required by a bound in `Add`\n+  --> $SRC_DIR/core/src/ops/arith.rs:LL:COL\n    |\n LL | pub trait Add<Rhs = Self> {\n-   |               --- required by this bound in `Add`\n-   |\n+   |               ^^^ required by this bound in `Add`\n help: consider further restricting `Self`\n    |\n LL | trait ArithmeticOps: Add<Output=Self> + Sub<Output=Self> + Mul<Output=Self> + Div<Output=Self> + Sized {}"}, {"sha": "d509ff3598b50f4a2e9f0f7b7b75bf50206bec43", "filename": "src/test/ui/async-await/async-fn-nonsend.stderr", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-nonsend.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,9 +1,6 @@\n error: future cannot be sent between threads safely\n   --> $DIR/async-fn-nonsend.rs:49:5\n    |\n-LL | fn assert_send(_: impl Send) {}\n-   |                        ---- required by this bound in `assert_send`\n-...\n LL |     assert_send(local_dropped_before_await());\n    |     ^^^^^^^^^^^ future returned by `local_dropped_before_await` is not `Send`\n    |\n@@ -18,13 +15,15 @@ LL |     fut().await;\n    |     ^^^^^^^^^^^ await occurs here, with `x` maybe used later\n LL | }\n    | - `x` is later dropped here\n+note: required by a bound in `assert_send`\n+  --> $DIR/async-fn-nonsend.rs:46:24\n+   |\n+LL | fn assert_send(_: impl Send) {}\n+   |                        ^^^^ required by this bound in `assert_send`\n \n error: future cannot be sent between threads safely\n   --> $DIR/async-fn-nonsend.rs:51:5\n    |\n-LL | fn assert_send(_: impl Send) {}\n-   |                        ---- required by this bound in `assert_send`\n-...\n LL |     assert_send(non_send_temporary_in_match());\n    |     ^^^^^^^^^^^ future returned by `non_send_temporary_in_match` is not `Send`\n    |\n@@ -39,13 +38,15 @@ LL |         Some(_) => fut().await,\n ...\n LL | }\n    | - `non_send()` is later dropped here\n+note: required by a bound in `assert_send`\n+  --> $DIR/async-fn-nonsend.rs:46:24\n+   |\n+LL | fn assert_send(_: impl Send) {}\n+   |                        ^^^^ required by this bound in `assert_send`\n \n error: future cannot be sent between threads safely\n   --> $DIR/async-fn-nonsend.rs:53:5\n    |\n-LL | fn assert_send(_: impl Send) {}\n-   |                        ---- required by this bound in `assert_send`\n-...\n LL |     assert_send(non_sync_with_method_call());\n    |     ^^^^^^^^^^^ future returned by `non_sync_with_method_call` is not `Send`\n    |\n@@ -61,6 +62,11 @@ LL |         fut().await;\n LL |     }\n LL | }\n    | - `f` is later dropped here\n+note: required by a bound in `assert_send`\n+  --> $DIR/async-fn-nonsend.rs:46:24\n+   |\n+LL | fn assert_send(_: impl Send) {}\n+   |                        ^^^^ required by this bound in `assert_send`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "69c7ff47456c0846dc73fca9eb1da5f02d3208db", "filename": "src/test/ui/async-await/issue-64130-1-sync.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-1-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-1-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-1-sync.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,9 +1,6 @@\n error: future cannot be shared between threads safely\n   --> $DIR/issue-64130-1-sync.rs:21:5\n    |\n-LL | fn is_sync<T: Sync>(t: T) { }\n-   |               ---- required by this bound in `is_sync`\n-...\n LL |     is_sync(bar());\n    |     ^^^^^^^ future returned by `bar` is not `Sync`\n    |\n@@ -17,6 +14,11 @@ LL |     baz().await;\n    |     ^^^^^^^^^^^ await occurs here, with `x` maybe used later\n LL | }\n    | - `x` is later dropped here\n+note: required by a bound in `is_sync`\n+  --> $DIR/issue-64130-1-sync.rs:11:15\n+   |\n+LL | fn is_sync<T: Sync>(t: T) { }\n+   |               ^^^^ required by this bound in `is_sync`\n \n error: aborting due to previous error\n "}, {"sha": "933e9296848e942b34ebac6659d3ea21a15bc6f7", "filename": "src/test/ui/async-await/issue-64130-2-send.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-2-send.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-2-send.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-2-send.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,9 +1,6 @@\n error: future cannot be sent between threads safely\n   --> $DIR/issue-64130-2-send.rs:21:5\n    |\n-LL | fn is_send<T: Send>(t: T) { }\n-   |               ---- required by this bound in `is_send`\n-...\n LL |     is_send(bar());\n    |     ^^^^^^^ future returned by `bar` is not `Send`\n    |\n@@ -17,6 +14,11 @@ LL |     baz().await;\n    |     ^^^^^^^^^^^ await occurs here, with `x` maybe used later\n LL | }\n    | - `x` is later dropped here\n+note: required by a bound in `is_send`\n+  --> $DIR/issue-64130-2-send.rs:11:15\n+   |\n+LL | fn is_send<T: Send>(t: T) { }\n+   |               ^^^^ required by this bound in `is_send`\n \n error: aborting due to previous error\n "}, {"sha": "ec0fdd4a5551dd70ad9a37a015c1e22a67a5a029", "filename": "src/test/ui/async-await/issue-64130-3-other.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-3-other.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-3-other.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-3-other.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,9 +1,6 @@\n error[E0277]: the trait bound `Foo: Qux` is not satisfied in `impl Future`\n   --> $DIR/issue-64130-3-other.rs:24:5\n    |\n-LL | fn is_qux<T: Qux>(t: T) { }\n-   |              --- required by this bound in `is_qux`\n-LL | \n LL | async fn bar() {\n    |                - within this `impl Future`\n ...\n@@ -19,6 +16,11 @@ LL |     baz().await;\n    |     ^^^^^^^^^^^ await occurs here, with `x` maybe used later\n LL | }\n    | - `x` is later dropped here\n+note: required by a bound in `is_qux`\n+  --> $DIR/issue-64130-3-other.rs:14:14\n+   |\n+LL | fn is_qux<T: Qux>(t: T) { }\n+   |              ^^^ required by this bound in `is_qux`\n \n error: aborting due to previous error\n "}, {"sha": "472fffa61b791e5f07ef0cd97939383ac41a5188", "filename": "src/test/ui/async-await/issue-64130-non-send-future-diags.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-non-send-future-diags.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-non-send-future-diags.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-64130-non-send-future-diags.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,9 +1,6 @@\n error: future cannot be sent between threads safely\n   --> $DIR/issue-64130-non-send-future-diags.rs:21:5\n    |\n-LL | fn is_send<T: Send>(t: T) { }\n-   |               ---- required by this bound in `is_send`\n-...\n LL |     is_send(foo());\n    |     ^^^^^^^ future returned by `foo` is not `Send`\n    |\n@@ -17,6 +14,11 @@ LL |     baz().await;\n    |     ^^^^^^^^^^^ await occurs here, with `g` maybe used later\n LL | }\n    | - `g` is later dropped here\n+note: required by a bound in `is_send`\n+  --> $DIR/issue-64130-non-send-future-diags.rs:7:15\n+   |\n+LL | fn is_send<T: Send>(t: T) { }\n+   |               ^^^^ required by this bound in `is_send`\n \n error: aborting due to previous error\n "}, {"sha": "d046e2a05611c3d7ac45deb7bdee6db9ba62142f", "filename": "src/test/ui/async-await/issue-67252-unnamed-future.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,9 +1,6 @@\n error: future cannot be sent between threads safely\n   --> $DIR/issue-67252-unnamed-future.rs:18:5\n    |\n-LL | fn spawn<T: Send>(_: T) {}\n-   |             ---- required by this bound in `spawn`\n-...\n LL |     spawn(async {\n    |     ^^^^^ future created by async block is not `Send`\n    |\n@@ -17,6 +14,11 @@ LL |         AFuture.await;\n    |         ^^^^^^^^^^^^^ await occurs here, with `_a` maybe used later\n LL |     });\n    |     - `_a` is later dropped here\n+note: required by a bound in `spawn`\n+  --> $DIR/issue-67252-unnamed-future.rs:6:13\n+   |\n+LL | fn spawn<T: Send>(_: T) {}\n+   |             ^^^^ required by this bound in `spawn`\n \n error: aborting due to previous error\n "}, {"sha": "6b8e49a21a67068103c383af70f9b835a1751d21", "filename": "src/test/ui/async-await/issue-68112.stderr", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,9 +1,6 @@\n error: future cannot be sent between threads safely\n   --> $DIR/issue-68112.rs:34:5\n    |\n-LL | fn require_send(_: impl Send) {}\n-   |                         ---- required by this bound in `require_send`\n-...\n LL |     require_send(send_fut);\n    |     ^^^^^^^^^^^^ future created by async block is not `Send`\n    |\n@@ -13,13 +10,15 @@ note: future is not `Send` as it awaits another future which is not `Send`\n    |\n LL |         let _ = non_send_fut.await;\n    |                 ^^^^^^^^^^^^ await occurs here on type `impl Future`, which is not `Send`\n+note: required by a bound in `require_send`\n+  --> $DIR/issue-68112.rs:11:25\n+   |\n+LL | fn require_send(_: impl Send) {}\n+   |                         ^^^^ required by this bound in `require_send`\n \n error: future cannot be sent between threads safely\n   --> $DIR/issue-68112.rs:43:5\n    |\n-LL | fn require_send(_: impl Send) {}\n-   |                         ---- required by this bound in `require_send`\n-...\n LL |     require_send(send_fut);\n    |     ^^^^^^^^^^^^ future created by async block is not `Send`\n    |\n@@ -29,13 +28,15 @@ note: future is not `Send` as it awaits another future which is not `Send`\n    |\n LL |         let _ = make_non_send_future1().await;\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^ await occurs here on type `impl Future`, which is not `Send`\n+note: required by a bound in `require_send`\n+  --> $DIR/issue-68112.rs:11:25\n+   |\n+LL | fn require_send(_: impl Send) {}\n+   |                         ^^^^ required by this bound in `require_send`\n \n error[E0277]: `RefCell<i32>` cannot be shared between threads safely\n   --> $DIR/issue-68112.rs:60:5\n    |\n-LL | fn require_send(_: impl Send) {}\n-   |                         ---- required by this bound in `require_send`\n-...\n LL |     require_send(send_fut);\n    |     ^^^^^^^^^^^^ `RefCell<i32>` cannot be shared between threads safely\n    |\n@@ -50,6 +51,11 @@ LL |     require_send(send_fut);\n    = note: required because it appears within the type `[static generator@$DIR/issue-68112.rs:55:26: 59:6]`\n    = note: required because it appears within the type `from_generator::GenFuture<[static generator@$DIR/issue-68112.rs:55:26: 59:6]>`\n    = note: required because it appears within the type `impl Future`\n+note: required by a bound in `require_send`\n+  --> $DIR/issue-68112.rs:11:25\n+   |\n+LL | fn require_send(_: impl Send) {}\n+   |                         ^^^^ required by this bound in `require_send`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "8903c09c17f0dbb186105e309e33bf87f5f39856", "filename": "src/test/ui/async-await/issue-71137.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fasync-await%2Fissue-71137.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fasync-await%2Fissue-71137.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-71137.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,9 +1,6 @@\n error: future cannot be sent between threads safely\n   --> $DIR/issue-71137.rs:20:3\n    |\n-LL | fn fake_spawn<F: Future + Send + 'static>(f: F) { }\n-   |                           ---- required by this bound in `fake_spawn`\n-...\n LL |   fake_spawn(wrong_mutex());\n    |   ^^^^^^^^^^ future returned by `wrong_mutex` is not `Send`\n    |\n@@ -18,6 +15,11 @@ LL |     (async { \"right\"; }).await;\n LL |     *guard += 1;\n LL |   }\n    |   - `mut guard` is later dropped here\n+note: required by a bound in `fake_spawn`\n+  --> $DIR/issue-71137.rs:6:27\n+   |\n+LL | fn fake_spawn<F: Future + Send + 'static>(f: F) { }\n+   |                           ^^^^ required by this bound in `fake_spawn`\n \n error: aborting due to previous error\n "}, {"sha": "b79b6bc449233ab86c1a1f8cbb1b763ffc457021", "filename": "src/test/ui/async-await/issue-72442.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fasync-await%2Fissue-72442.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fasync-await%2Fissue-72442.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-72442.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -4,10 +4,11 @@ error[E0277]: the trait bound `Option<&str>: AsRef<Path>` is not satisfied\n LL |             let mut f = File::open(path.to_str())?;\n    |                                    ^^^^^^^^^^^^^ the trait `AsRef<Path>` is not implemented for `Option<&str>`\n    |\n-  ::: $SRC_DIR/std/src/fs.rs:LL:COL\n+note: required by a bound in `File::open`\n+  --> $SRC_DIR/std/src/fs.rs:LL:COL\n    |\n LL |     pub fn open<P: AsRef<Path>>(path: P) -> io::Result<File> {\n-   |                    ----------- required by this bound in `File::open`\n+   |                    ^^^^^^^^^^^ required by this bound in `File::open`\n \n error: aborting due to previous error\n "}, {"sha": "666ef851ad66f579ca91fe31afe73cbd6e5cf8f1", "filename": "src/test/ui/async-await/issues/issue-65436-raw-ptr-not-send.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65436-raw-ptr-not-send.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65436-raw-ptr-not-send.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65436-raw-ptr-not-send.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,9 +1,6 @@\n error: future cannot be sent between threads safely\n   --> $DIR/issue-65436-raw-ptr-not-send.rs:12:5\n    |\n-LL | fn assert_send<T: Send>(_: T) {}\n-   |                   ---- required by this bound in `assert_send`\n-...\n LL |     assert_send(async {\n    |     ^^^^^^^^^^^ future created by async block is not `Send`\n    |\n@@ -25,6 +22,11 @@ help: consider moving this into a `let` binding to create a shorter lived borrow\n    |\n LL |         bar(Foo(std::ptr::null())).await;\n    |             ^^^^^^^^^^^^^^^^^^^^^\n+note: required by a bound in `assert_send`\n+  --> $DIR/issue-65436-raw-ptr-not-send.rs:9:19\n+   |\n+LL | fn assert_send<T: Send>(_: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n \n error: aborting due to previous error\n "}, {"sha": "c4b55e6ec20222e9d83bcc1fb216f71641cac5b1", "filename": "src/test/ui/async-await/issues/issue-67893.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-67893.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-67893.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-67893.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,9 +1,6 @@\n error[E0277]: `MutexGuard<'_, ()>` cannot be sent between threads safely\n   --> $DIR/issue-67893.rs:9:5\n    |\n-LL | fn g(_: impl Send) {}\n-   |              ---- required by this bound in `g`\n-...\n LL |     g(issue_67893::run())\n    |     ^ `MutexGuard<'_, ()>` cannot be sent between threads safely\n    |\n@@ -18,6 +15,11 @@ LL | pub async fn run() {\n    = note: required because it appears within the type `from_generator::GenFuture<[static generator@run::{closure#0}]>`\n    = note: required because it appears within the type `impl Future`\n    = note: required because it appears within the type `impl Future`\n+note: required by a bound in `g`\n+  --> $DIR/issue-67893.rs:6:14\n+   |\n+LL | fn g(_: impl Send) {}\n+   |              ^^^^ required by this bound in `g`\n \n error: aborting due to previous error\n "}, {"sha": "7d6bf58f51696a6915645b6b8da9dd697fcb64b7", "filename": "src/test/ui/auto-traits/typeck-default-trait-impl-constituent-types-2.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-constituent-types-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-constituent-types-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-constituent-types-2.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,13 +1,15 @@\n error[E0277]: the trait bound `MyS2: MyTrait` is not satisfied in `(MyS2, MyS)`\n   --> $DIR/typeck-default-trait-impl-constituent-types-2.rs:17:5\n    |\n-LL | fn is_mytrait<T: MyTrait>() {}\n-   |                  ------- required by this bound in `is_mytrait`\n-...\n LL |     is_mytrait::<(MyS2, MyS)>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^ within `(MyS2, MyS)`, the trait `MyTrait` is not implemented for `MyS2`\n    |\n    = note: required because it appears within the type `(MyS2, MyS)`\n+note: required by a bound in `is_mytrait`\n+  --> $DIR/typeck-default-trait-impl-constituent-types-2.rs:12:18\n+   |\n+LL | fn is_mytrait<T: MyTrait>() {}\n+   |                  ^^^^^^^ required by this bound in `is_mytrait`\n \n error: aborting due to previous error\n "}, {"sha": "c575c485a85f7195dc3af195131039d690704824", "filename": "src/test/ui/auto-traits/typeck-default-trait-impl-constituent-types.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-constituent-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-constituent-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-constituent-types.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,11 +1,14 @@\n error[E0277]: the trait bound `MyS2: MyTrait` is not satisfied\n   --> $DIR/typeck-default-trait-impl-constituent-types.rs:21:18\n    |\n-LL | fn is_mytrait<T: MyTrait>() {}\n-   |                  ------- required by this bound in `is_mytrait`\n-...\n LL |     is_mytrait::<MyS2>();\n    |                  ^^^^ the trait `MyTrait` is not implemented for `MyS2`\n+   |\n+note: required by a bound in `is_mytrait`\n+  --> $DIR/typeck-default-trait-impl-constituent-types.rs:16:18\n+   |\n+LL | fn is_mytrait<T: MyTrait>() {}\n+   |                  ^^^^^^^ required by this bound in `is_mytrait`\n \n error: aborting due to previous error\n "}, {"sha": "fa8dd41da237bb2666d250a52ca8df2afa0e7ba1", "filename": "src/test/ui/auto-traits/typeck-default-trait-impl-negation.stderr", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-negation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-negation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-negation.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,20 +1,26 @@\n error[E0277]: the trait bound `ThisImplsUnsafeTrait: MyTrait` is not satisfied\n   --> $DIR/typeck-default-trait-impl-negation.rs:22:19\n    |\n-LL | fn is_my_trait<T: MyTrait>() {}\n-   |                   ------- required by this bound in `is_my_trait`\n-...\n LL |     is_my_trait::<ThisImplsUnsafeTrait>();\n    |                   ^^^^^^^^^^^^^^^^^^^^ the trait `MyTrait` is not implemented for `ThisImplsUnsafeTrait`\n+   |\n+note: required by a bound in `is_my_trait`\n+  --> $DIR/typeck-default-trait-impl-negation.rs:17:19\n+   |\n+LL | fn is_my_trait<T: MyTrait>() {}\n+   |                   ^^^^^^^ required by this bound in `is_my_trait`\n \n error[E0277]: the trait bound `ThisImplsTrait: MyUnsafeTrait` is not satisfied\n   --> $DIR/typeck-default-trait-impl-negation.rs:25:26\n    |\n-LL | fn is_my_unsafe_trait<T: MyUnsafeTrait>() {}\n-   |                          ------------- required by this bound in `is_my_unsafe_trait`\n-...\n LL |     is_my_unsafe_trait::<ThisImplsTrait>();\n    |                          ^^^^^^^^^^^^^^ the trait `MyUnsafeTrait` is not implemented for `ThisImplsTrait`\n+   |\n+note: required by a bound in `is_my_unsafe_trait`\n+  --> $DIR/typeck-default-trait-impl-negation.rs:18:26\n+   |\n+LL | fn is_my_unsafe_trait<T: MyUnsafeTrait>() {}\n+   |                          ^^^^^^^^^^^^^ required by this bound in `is_my_unsafe_trait`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "c98925a7b1df7b4d16055584e4647a91ca412ec5", "filename": "src/test/ui/auto-traits/typeck-default-trait-impl-precedence.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-precedence.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-precedence.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-traits%2Ftypeck-default-trait-impl-precedence.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,13 +1,15 @@\n error[E0277]: the trait bound `u32: Signed` is not satisfied\n   --> $DIR/typeck-default-trait-impl-precedence.rs:19:5\n    |\n-LL | fn is_defaulted<T:Defaulted>() { }\n-   |                   --------- required by this bound in `is_defaulted`\n-...\n LL |     is_defaulted::<&'static u32>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Signed` is not implemented for `u32`\n    |\n    = note: required because of the requirements on the impl of `Defaulted` for `&'static u32`\n+note: required by a bound in `is_defaulted`\n+  --> $DIR/typeck-default-trait-impl-precedence.rs:12:19\n+   |\n+LL | fn is_defaulted<T:Defaulted>() { }\n+   |                   ^^^^^^^^^ required by this bound in `is_defaulted`\n \n error: aborting due to previous error\n "}, {"sha": "04f233a1e87af52a3c548d87efc186359fe912fb", "filename": "src/test/ui/bound-suggestions.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fbound-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fbound-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbound-suggestions.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -76,11 +76,11 @@ error[E0277]: the size for values of type `Self` cannot be known at compilation\n LL |     const SIZE: usize = core::mem::size_of::<Self>();\n    |                                              ^^^^ doesn't have a size known at compile-time\n    |\n-  ::: $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+note: required by a bound in `std::mem::size_of`\n+  --> $SRC_DIR/core/src/mem/mod.rs:LL:COL\n    |\n LL | pub const fn size_of<T>() -> usize {\n-   |                      - required by this bound in `std::mem::size_of`\n-   |\n+   |                      ^ required by this bound in `std::mem::size_of`\n help: consider further restricting `Self`\n    |\n LL | trait Foo<T>: Sized {\n@@ -92,11 +92,11 @@ error[E0277]: the size for values of type `Self` cannot be known at compilation\n LL |     const SIZE: usize = core::mem::size_of::<Self>();\n    |                                              ^^^^ doesn't have a size known at compile-time\n    |\n-  ::: $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+note: required by a bound in `std::mem::size_of`\n+  --> $SRC_DIR/core/src/mem/mod.rs:LL:COL\n    |\n LL | pub const fn size_of<T>() -> usize {\n-   |                      - required by this bound in `std::mem::size_of`\n-   |\n+   |                      ^ required by this bound in `std::mem::size_of`\n help: consider further restricting `Self`\n    |\n LL | trait Bar: std::fmt::Display + Sized {\n@@ -108,11 +108,11 @@ error[E0277]: the size for values of type `Self` cannot be known at compilation\n LL |     const SIZE: usize = core::mem::size_of::<Self>();\n    |                                              ^^^^ doesn't have a size known at compile-time\n    |\n-  ::: $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+note: required by a bound in `std::mem::size_of`\n+  --> $SRC_DIR/core/src/mem/mod.rs:LL:COL\n    |\n LL | pub const fn size_of<T>() -> usize {\n-   |                      - required by this bound in `std::mem::size_of`\n-   |\n+   |                      ^ required by this bound in `std::mem::size_of`\n help: consider further restricting `Self`\n    |\n LL | trait Baz: Sized where Self: std::fmt::Display {\n@@ -124,11 +124,11 @@ error[E0277]: the size for values of type `Self` cannot be known at compilation\n LL |     const SIZE: usize = core::mem::size_of::<Self>();\n    |                                              ^^^^ doesn't have a size known at compile-time\n    |\n-  ::: $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+note: required by a bound in `std::mem::size_of`\n+  --> $SRC_DIR/core/src/mem/mod.rs:LL:COL\n    |\n LL | pub const fn size_of<T>() -> usize {\n-   |                      - required by this bound in `std::mem::size_of`\n-   |\n+   |                      ^ required by this bound in `std::mem::size_of`\n help: consider further restricting `Self`\n    |\n LL | trait Qux<T>: Sized where Self: std::fmt::Display {\n@@ -140,11 +140,11 @@ error[E0277]: the size for values of type `Self` cannot be known at compilation\n LL |     const SIZE: usize = core::mem::size_of::<Self>();\n    |                                              ^^^^ doesn't have a size known at compile-time\n    |\n-  ::: $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+note: required by a bound in `std::mem::size_of`\n+  --> $SRC_DIR/core/src/mem/mod.rs:LL:COL\n    |\n LL | pub const fn size_of<T>() -> usize {\n-   |                      - required by this bound in `std::mem::size_of`\n-   |\n+   |                      ^ required by this bound in `std::mem::size_of`\n help: consider further restricting `Self`\n    |\n LL | trait Bat<T>: std::fmt::Display + Sized {"}, {"sha": "492316f0027e4eaedbd7481dc78a1af4a7dc7c96", "filename": "src/test/ui/builtin-superkinds/builtin-superkinds-double-superkind.stderr", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-double-superkind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-double-superkind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-double-superkind.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,13 +1,15 @@\n error[E0277]: `T` cannot be sent between threads safely\n   --> $DIR/builtin-superkinds-double-superkind.rs:6:24\n    |\n-LL | trait Foo : Send+Sync { }\n-   |             ---- required by this bound in `Foo`\n-LL | \n LL | impl <T: Sync+'static> Foo for (T,) { }\n    |                        ^^^ `T` cannot be sent between threads safely\n    |\n    = note: required because it appears within the type `(T,)`\n+note: required by a bound in `Foo`\n+  --> $DIR/builtin-superkinds-double-superkind.rs:4:13\n+   |\n+LL | trait Foo : Send+Sync { }\n+   |             ^^^^ required by this bound in `Foo`\n help: consider further restricting this bound\n    |\n LL | impl <T: Sync+'static + std::marker::Send> Foo for (T,) { }\n@@ -16,13 +18,15 @@ LL | impl <T: Sync+'static + std::marker::Send> Foo for (T,) { }\n error[E0277]: `T` cannot be shared between threads safely\n   --> $DIR/builtin-superkinds-double-superkind.rs:9:16\n    |\n-LL | trait Foo : Send+Sync { }\n-   |                  ---- required by this bound in `Foo`\n-...\n LL | impl <T: Send> Foo for (T,T) { }\n    |                ^^^ `T` cannot be shared between threads safely\n    |\n    = note: required because it appears within the type `(T, T)`\n+note: required by a bound in `Foo`\n+  --> $DIR/builtin-superkinds-double-superkind.rs:4:18\n+   |\n+LL | trait Foo : Send+Sync { }\n+   |                  ^^^^ required by this bound in `Foo`\n help: consider further restricting this bound\n    |\n LL | impl <T: Send + std::marker::Sync> Foo for (T,T) { }"}, {"sha": "a46e4b2337ccd3116a1e1f9a76be1f38aeb9ecaa", "filename": "src/test/ui/builtin-superkinds/builtin-superkinds-in-metadata.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-in-metadata.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-in-metadata.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-in-metadata.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -4,16 +4,16 @@ error[E0277]: `T` cannot be sent between threads safely\n LL | impl <T:Sync+'static> RequiresRequiresShareAndSend for X<T> { }\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `T` cannot be sent between threads safely\n    |\n-  ::: $DIR/auxiliary/trait_superkinds_in_metadata.rs:7:58\n-   |\n-LL | pub trait RequiresRequiresShareAndSend : RequiresShare + Send { }\n-   |                                                          ---- required by this bound in `RequiresRequiresShareAndSend`\n-   |\n note: required because it appears within the type `X<T>`\n   --> $DIR/builtin-superkinds-in-metadata.rs:9:8\n    |\n LL | struct X<T>(T);\n    |        ^\n+note: required by a bound in `RequiresRequiresShareAndSend`\n+  --> $DIR/auxiliary/trait_superkinds_in_metadata.rs:7:58\n+   |\n+LL | pub trait RequiresRequiresShareAndSend : RequiresShare + Send { }\n+   |                                                          ^^^^ required by this bound in `RequiresRequiresShareAndSend`\n help: consider further restricting this bound\n    |\n LL | impl <T:Sync+'static + std::marker::Send> RequiresRequiresShareAndSend for X<T> { }"}, {"sha": "9db9cbfdb910be2db830f9d75212be45c9db2643", "filename": "src/test/ui/builtin-superkinds/builtin-superkinds-simple.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-simple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-simple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-simple.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,13 +1,15 @@\n error[E0277]: `Rc<i8>` cannot be sent between threads safely\n   --> $DIR/builtin-superkinds-simple.rs:6:6\n    |\n-LL | trait Foo : Send { }\n-   |             ---- required by this bound in `Foo`\n-LL | \n LL | impl Foo for std::rc::Rc<i8> { }\n    |      ^^^ `Rc<i8>` cannot be sent between threads safely\n    |\n    = help: the trait `Send` is not implemented for `Rc<i8>`\n+note: required by a bound in `Foo`\n+  --> $DIR/builtin-superkinds-simple.rs:4:13\n+   |\n+LL | trait Foo : Send { }\n+   |             ^^^^ required by this bound in `Foo`\n \n error: aborting due to previous error\n "}, {"sha": "3ec0b907d0cb5ff25f99d01c5de85c73f5d3943d", "filename": "src/test/ui/builtin-superkinds/builtin-superkinds-typaram-not-send.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-typaram-not-send.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-typaram-not-send.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-typaram-not-send.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,12 +1,14 @@\n error[E0277]: `T` cannot be sent between threads safely\n   --> $DIR/builtin-superkinds-typaram-not-send.rs:5:24\n    |\n-LL | trait Foo : Send { }\n-   |             ---- required by this bound in `Foo`\n-LL | \n LL | impl <T: Sync+'static> Foo for T { }\n    |                        ^^^ `T` cannot be sent between threads safely\n    |\n+note: required by a bound in `Foo`\n+  --> $DIR/builtin-superkinds-typaram-not-send.rs:3:13\n+   |\n+LL | trait Foo : Send { }\n+   |             ^^^^ required by this bound in `Foo`\n help: consider further restricting this bound\n    |\n LL | impl <T: Sync+'static + std::marker::Send> Foo for T { }"}, {"sha": "f8b792ae5363ca2400ad3fa68cf0d170c1f5a4ec", "filename": "src/test/ui/chalkify/chalk_initial_program.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fchalkify%2Fchalk_initial_program.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fchalkify%2Fchalk_initial_program.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Fchalk_initial_program.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,11 +1,14 @@\n error[E0277]: the trait bound `f32: Foo` is not satisfied\n   --> $DIR/chalk_initial_program.rs:15:13\n    |\n-LL | fn gimme<F: Foo>() { }\n-   |             --- required by this bound in `gimme`\n-...\n LL |     gimme::<f32>();\n    |             ^^^ the trait `Foo` is not implemented for `f32`\n+   |\n+note: required by a bound in `gimme`\n+  --> $DIR/chalk_initial_program.rs:9:13\n+   |\n+LL | fn gimme<F: Foo>() { }\n+   |             ^^^ required by this bound in `gimme`\n \n error: aborting due to previous error\n "}, {"sha": "0c7fcd04dfd2d71a2f6ae1040d5a11b94b3f1032", "filename": "src/test/ui/chalkify/generic_impls.stderr", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fchalkify%2Fgeneric_impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fchalkify%2Fgeneric_impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Fgeneric_impls.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,26 +1,30 @@\n error[E0277]: the trait bound `(Option<T>, f32): Foo` is not satisfied\n   --> $DIR/generic_impls.rs:12:13\n    |\n-LL | fn gimme<F: Foo>() { }\n-   |             --- required by this bound in `gimme`\n-...\n LL |     gimme::<(Option<T>, f32)>();\n    |             ^^^^^^^^^^^^^^^^ the trait `Foo` is not implemented for `(Option<T>, f32)`\n    |\n    = help: the following implementations were found:\n              <(T, u32) as Foo>\n+note: required by a bound in `gimme`\n+  --> $DIR/generic_impls.rs:7:13\n+   |\n+LL | fn gimme<F: Foo>() { }\n+   |             ^^^ required by this bound in `gimme`\n \n error[E0277]: the trait bound `(i32, f32): Foo` is not satisfied\n   --> $DIR/generic_impls.rs:17:13\n    |\n-LL | fn gimme<F: Foo>() { }\n-   |             --- required by this bound in `gimme`\n-...\n LL |     gimme::<(i32, f32)>();\n    |             ^^^^^^^^^^ the trait `Foo` is not implemented for `(i32, f32)`\n    |\n    = help: the following implementations were found:\n              <(T, u32) as Foo>\n+note: required by a bound in `gimme`\n+  --> $DIR/generic_impls.rs:7:13\n+   |\n+LL | fn gimme<F: Foo>() { }\n+   |             ^^^ required by this bound in `gimme`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "95e320726aab0a6bd2ec27a50c5ee878a1b0a9df", "filename": "src/test/ui/chalkify/impl_wf.stderr", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fchalkify%2Fimpl_wf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fchalkify%2Fimpl_wf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Fimpl_wf.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,22 +1,27 @@\n error[E0277]: the size for values of type `str` cannot be known at compilation time\n   --> $DIR/impl_wf.rs:11:6\n    |\n-LL | trait Foo: Sized { }\n-   |            ----- required by this bound in `Foo`\n-...\n LL | impl Foo for str { }\n    |      ^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `str`\n+note: required by a bound in `Foo`\n+  --> $DIR/impl_wf.rs:3:12\n+   |\n+LL | trait Foo: Sized { }\n+   |            ^^^^^ required by this bound in `Foo`\n \n error[E0277]: the trait bound `f32: Foo` is not satisfied\n   --> $DIR/impl_wf.rs:22:6\n    |\n-LL | trait Baz<U: ?Sized> where U: Foo { }\n-   |                               --- required by this bound in `Baz`\n-...\n LL | impl Baz<f32> for f32 { }\n    |      ^^^^^^^^ the trait `Foo` is not implemented for `f32`\n+   |\n+note: required by a bound in `Baz`\n+  --> $DIR/impl_wf.rs:18:31\n+   |\n+LL | trait Baz<U: ?Sized> where U: Foo { }\n+   |                               ^^^ required by this bound in `Baz`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "0aac962fdba9e820aa708b9801aabb01d37497f6", "filename": "src/test/ui/chalkify/impl_wf_2.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fchalkify%2Fimpl_wf_2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fchalkify%2Fimpl_wf_2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Fimpl_wf_2.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,11 +1,14 @@\n error[E0277]: the trait bound `f32: Foo` is not satisfied\n   --> $DIR/impl_wf_2.rs:25:5\n    |\n-LL |     type Item: Foo;\n-   |                --- required by this bound in `Bar::Item`\n-...\n LL |     type Item = f32;\n    |     ^^^^^^^^^^^^^^^^ the trait `Foo` is not implemented for `f32`\n+   |\n+note: required by a bound in `Bar::Item`\n+  --> $DIR/impl_wf_2.rs:8:16\n+   |\n+LL |     type Item: Foo;\n+   |                ^^^ required by this bound in `Bar::Item`\n \n error: aborting due to previous error\n "}, {"sha": "a4a480ac64d7c213389d0289bb61b002be593dab", "filename": "src/test/ui/chalkify/type_inference.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fchalkify%2Ftype_inference.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fchalkify%2Ftype_inference.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Ftype_inference.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,15 +1,17 @@\n error[E0277]: the trait bound `{float}: Bar` is not satisfied\n   --> $DIR/type_inference.rs:27:14\n    |\n-LL | fn only_bar<T: Bar>(_x: T) { }\n-   |                --- required by this bound in `only_bar`\n-...\n LL |     only_bar(x);\n    |              ^ the trait `Bar` is not implemented for `{float}`\n    |\n    = help: the following implementations were found:\n              <i32 as Bar>\n              <u32 as Bar>\n+note: required by a bound in `only_bar`\n+  --> $DIR/type_inference.rs:12:16\n+   |\n+LL | fn only_bar<T: Bar>(_x: T) { }\n+   |                ^^^ required by this bound in `only_bar`\n \n error: aborting due to previous error\n "}, {"sha": "ba4c9b6338118c6f07e70c8c6e1de6a91d5185c4", "filename": "src/test/ui/closure-expected-type/expect-infer-var-appearing-twice.stderr", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-infer-var-appearing-twice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-infer-var-appearing-twice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-infer-var-appearing-twice.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,15 +1,18 @@\n error[E0631]: type mismatch in closure arguments\n   --> $DIR/expect-infer-var-appearing-twice.rs:14:5\n    |\n-LL | fn with_closure<F, A>(_: F)\n-   |    ------------ required by a bound in this\n-LL |     where F: FnOnce(A, A)\n-   |              ------------ required by this bound in `with_closure`\n-...\n LL |     with_closure(|x: u32, y: i32| {\n    |     ^^^^^^^^^^^^ ---------------- found signature of `fn(u32, i32) -> _`\n    |     |\n    |     expected signature of `fn(_, _) -> _`\n+   |\n+note: required by a bound in `with_closure`\n+  --> $DIR/expect-infer-var-appearing-twice.rs:2:14\n+   |\n+LL | fn with_closure<F, A>(_: F)\n+   |    ------------ required by a bound in this\n+LL |     where F: FnOnce(A, A)\n+   |              ^^^^^^^^^^^^ required by this bound in `with_closure`\n \n error: aborting due to previous error\n "}, {"sha": "bf6ec5c36e4804321c6b5f55ef00129e7b9036f0", "filename": "src/test/ui/closures/closure-bounds-cant-promote-superkind-in-struct.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-cant-promote-superkind-in-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-cant-promote-superkind-in-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-cant-promote-superkind-in-struct.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,12 +1,14 @@\n error[E0277]: `F` cannot be sent between threads safely\n   --> $DIR/closure-bounds-cant-promote-superkind-in-struct.rs:5:22\n    |\n-LL | struct X<F> where F: FnOnce() + 'static + Send {\n-   |                                           ---- required by this bound in `X`\n-...\n LL | fn foo<F>(blk: F) -> X<F> where F: FnOnce() + 'static {\n    |                      ^^^^ `F` cannot be sent between threads safely\n    |\n+note: required by a bound in `X`\n+  --> $DIR/closure-bounds-cant-promote-superkind-in-struct.rs:1:43\n+   |\n+LL | struct X<F> where F: FnOnce() + 'static + Send {\n+   |                                           ^^^^ required by this bound in `X`\n help: consider further restricting this bound\n    |\n LL | fn foo<F>(blk: F) -> X<F> where F: FnOnce() + 'static + std::marker::Send {"}, {"sha": "bfea4979decaefe31646bb1a044f6c6bd758ce00", "filename": "src/test/ui/closures/closure-bounds-subtype.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-subtype.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-subtype.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-subtype.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,12 +1,14 @@\n error[E0277]: `F` cannot be shared between threads safely\n   --> $DIR/closure-bounds-subtype.rs:13:22\n    |\n-LL | fn take_const_owned<F>(_: F) where F: FnOnce() + Sync + Send {\n-   |                                                  ---- required by this bound in `take_const_owned`\n-...\n LL |     take_const_owned(f);\n    |                      ^ `F` cannot be shared between threads safely\n    |\n+note: required by a bound in `take_const_owned`\n+  --> $DIR/closure-bounds-subtype.rs:4:50\n+   |\n+LL | fn take_const_owned<F>(_: F) where F: FnOnce() + Sync + Send {\n+   |                                                  ^^^^ required by this bound in `take_const_owned`\n help: consider further restricting this bound\n    |\n LL | fn give_owned<F>(f: F) where F: FnOnce() + Send + std::marker::Sync {"}, {"sha": "618c9a172473c1ce73cd89c68ca6470cdf8af19c", "filename": "src/test/ui/closures/closure-move-sync.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fclosures%2Fclosure-move-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fclosures%2Fclosure-move-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-move-sync.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -4,29 +4,29 @@ error[E0277]: `std::sync::mpsc::Receiver<()>` cannot be shared between threads s\n LL |     let t = thread::spawn(|| {\n    |             ^^^^^^^^^^^^^ `std::sync::mpsc::Receiver<()>` cannot be shared between threads safely\n    |\n-  ::: $SRC_DIR/std/src/thread/mod.rs:LL:COL\n-   |\n-LL |     F: Send + 'static,\n-   |        ---- required by this bound in `spawn`\n-   |\n    = help: the trait `Sync` is not implemented for `std::sync::mpsc::Receiver<()>`\n    = note: required because of the requirements on the impl of `Send` for `&std::sync::mpsc::Receiver<()>`\n    = note: required because it appears within the type `[closure@$DIR/closure-move-sync.rs:6:27: 9:6]`\n+note: required by a bound in `spawn`\n+  --> $SRC_DIR/std/src/thread/mod.rs:LL:COL\n+   |\n+LL |     F: Send + 'static,\n+   |        ^^^^ required by this bound in `spawn`\n \n error[E0277]: `Sender<()>` cannot be shared between threads safely\n   --> $DIR/closure-move-sync.rs:18:5\n    |\n LL |     thread::spawn(|| tx.send(()).unwrap());\n    |     ^^^^^^^^^^^^^ `Sender<()>` cannot be shared between threads safely\n    |\n-  ::: $SRC_DIR/std/src/thread/mod.rs:LL:COL\n-   |\n-LL |     F: Send + 'static,\n-   |        ---- required by this bound in `spawn`\n-   |\n    = help: the trait `Sync` is not implemented for `Sender<()>`\n    = note: required because of the requirements on the impl of `Send` for `&Sender<()>`\n    = note: required because it appears within the type `[closure@$DIR/closure-move-sync.rs:18:19: 18:42]`\n+note: required by a bound in `spawn`\n+  --> $SRC_DIR/std/src/thread/mod.rs:LL:COL\n+   |\n+LL |     F: Send + 'static,\n+   |        ^^^^ required by this bound in `spawn`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "cf842b1908532479e514ac44cc8b055127bd451e", "filename": "src/test/ui/coherence/coherence-unsafe-trait-object-impl.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-unsafe-trait-object-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-unsafe-trait-object-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-unsafe-trait-object-impl.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,11 +1,14 @@\n error[E0277]: the trait bound `&dyn Trait: Trait` is not satisfied\n   --> $DIR/coherence-unsafe-trait-object-impl.rs:15:13\n    |\n-LL | fn takes_t<S: Trait>(s: S) {\n-   |               ----- required by this bound in `takes_t`\n-...\n LL |     takes_t(t);\n    |             ^ the trait `Trait` is not implemented for `&dyn Trait`\n+   |\n+note: required by a bound in `takes_t`\n+  --> $DIR/coherence-unsafe-trait-object-impl.rs:10:15\n+   |\n+LL | fn takes_t<S: Trait>(s: S) {\n+   |               ^^^^^ required by this bound in `takes_t`\n \n error: aborting due to previous error\n "}, {"sha": "7ab430ba830b31b2e6f1e18ef65719a28702fa8b", "filename": "src/test/ui/const-generics/associated-type-bound-fail.full.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fconst-generics%2Fassociated-type-bound-fail.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fconst-generics%2Fassociated-type-bound-fail.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fassociated-type-bound-fail.full.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,14 +1,16 @@\n error[E0277]: the trait bound `u16: Bar<N>` is not satisfied\n   --> $DIR/associated-type-bound-fail.rs:13:5\n    |\n-LL |     type Assoc: Bar<N>;\n-   |                 ------ required by this bound in `Foo::Assoc`\n-...\n LL |     type Assoc = u16;\n    |     ^^^^^^^^^^^^^^^^^ the trait `Bar<N>` is not implemented for `u16`\n    |\n    = help: the following implementations were found:\n              <u16 as Bar<3_usize>>\n+note: required by a bound in `Foo::Assoc`\n+  --> $DIR/associated-type-bound-fail.rs:8:17\n+   |\n+LL |     type Assoc: Bar<N>;\n+   |                 ^^^^^^ required by this bound in `Foo::Assoc`\n \n error: aborting due to previous error\n "}, {"sha": "7ab430ba830b31b2e6f1e18ef65719a28702fa8b", "filename": "src/test/ui/const-generics/associated-type-bound-fail.min.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fconst-generics%2Fassociated-type-bound-fail.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fconst-generics%2Fassociated-type-bound-fail.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fassociated-type-bound-fail.min.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,14 +1,16 @@\n error[E0277]: the trait bound `u16: Bar<N>` is not satisfied\n   --> $DIR/associated-type-bound-fail.rs:13:5\n    |\n-LL |     type Assoc: Bar<N>;\n-   |                 ------ required by this bound in `Foo::Assoc`\n-...\n LL |     type Assoc = u16;\n    |     ^^^^^^^^^^^^^^^^^ the trait `Bar<N>` is not implemented for `u16`\n    |\n    = help: the following implementations were found:\n              <u16 as Bar<3_usize>>\n+note: required by a bound in `Foo::Assoc`\n+  --> $DIR/associated-type-bound-fail.rs:8:17\n+   |\n+LL |     type Assoc: Bar<N>;\n+   |                 ^^^^^^ required by this bound in `Foo::Assoc`\n \n error: aborting due to previous error\n "}, {"sha": "8e62147eb7e30c25fa11ae5f9d9196319f4e0801", "filename": "src/test/ui/const-generics/const-argument-if-length.full.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-if-length.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-if-length.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-if-length.full.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -6,11 +6,11 @@ LL | pub const fn is_zst<T: ?Sized>() -> usize {\n LL |     if std::mem::size_of::<T>() == 0 {\n    |                            ^ doesn't have a size known at compile-time\n    |\n-  ::: $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+note: required by a bound in `std::mem::size_of`\n+  --> $SRC_DIR/core/src/mem/mod.rs:LL:COL\n    |\n LL | pub const fn size_of<T>() -> usize {\n-   |                      - required by this bound in `std::mem::size_of`\n-   |\n+   |                      ^ required by this bound in `std::mem::size_of`\n help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - pub const fn is_zst<T: ?Sized>() -> usize {"}, {"sha": "f235eb443b829c872179ed5ac8642011e4cbcba9", "filename": "src/test/ui/const-generics/const_evaluatable_checked/abstract-const-as-cast-3.stderr", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fabstract-const-as-cast-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fabstract-const-as-cast-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fabstract-const-as-cast-3.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,9 +1,6 @@\n error: unconstrained generic constant\n   --> $DIR/abstract-const-as-cast-3.rs:17:5\n    |\n-LL |     fn assert_impl<T: Trait>() {}\n-   |                       ----- required by this bound in `use_trait_impl::assert_impl`\n-...\n LL |     assert_impl::<HasCastInTraitImpl<{ N + 1 }, { N as u128 }>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n@@ -13,6 +10,11 @@ note: required because of the requirements on the impl of `Trait` for `HasCastIn\n    |\n LL | impl<const O: usize> Trait for HasCastInTraitImpl<O, { O as u128 }> {}\n    |                      ^^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: required by a bound in `use_trait_impl::assert_impl`\n+  --> $DIR/abstract-const-as-cast-3.rs:14:23\n+   |\n+LL |     fn assert_impl<T: Trait>() {}\n+   |                       ^^^^^ required by this bound in `use_trait_impl::assert_impl`\n \n error[E0308]: mismatched types\n   --> $DIR/abstract-const-as-cast-3.rs:17:5\n@@ -26,9 +28,6 @@ LL |     assert_impl::<HasCastInTraitImpl<{ N + 1 }, { N as u128 }>>();\n error: unconstrained generic constant\n   --> $DIR/abstract-const-as-cast-3.rs:20:5\n    |\n-LL |     fn assert_impl<T: Trait>() {}\n-   |                       ----- required by this bound in `use_trait_impl::assert_impl`\n-...\n LL |     assert_impl::<HasCastInTraitImpl<{ N + 1 }, { N as _ }>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n@@ -38,6 +37,11 @@ note: required because of the requirements on the impl of `Trait` for `HasCastIn\n    |\n LL | impl<const O: usize> Trait for HasCastInTraitImpl<O, { O as u128 }> {}\n    |                      ^^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: required by a bound in `use_trait_impl::assert_impl`\n+  --> $DIR/abstract-const-as-cast-3.rs:14:23\n+   |\n+LL |     fn assert_impl<T: Trait>() {}\n+   |                       ^^^^^ required by this bound in `use_trait_impl::assert_impl`\n \n error[E0308]: mismatched types\n   --> $DIR/abstract-const-as-cast-3.rs:20:5\n@@ -69,9 +73,6 @@ LL |     assert_impl::<HasCastInTraitImpl<14, 13>>();\n error: unconstrained generic constant\n   --> $DIR/abstract-const-as-cast-3.rs:35:5\n    |\n-LL |     fn assert_impl<T: Trait>() {}\n-   |                       ----- required by this bound in `use_trait_impl_2::assert_impl`\n-...\n LL |     assert_impl::<HasCastInTraitImpl<{ N + 1 }, { N as u128 }>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n@@ -81,6 +82,11 @@ note: required because of the requirements on the impl of `Trait` for `HasCastIn\n    |\n LL | impl<const O: usize> Trait for HasCastInTraitImpl<O, { O as u128 }> {}\n    |                      ^^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: required by a bound in `use_trait_impl_2::assert_impl`\n+  --> $DIR/abstract-const-as-cast-3.rs:32:23\n+   |\n+LL |     fn assert_impl<T: Trait>() {}\n+   |                       ^^^^^ required by this bound in `use_trait_impl_2::assert_impl`\n \n error[E0308]: mismatched types\n   --> $DIR/abstract-const-as-cast-3.rs:35:5\n@@ -94,9 +100,6 @@ LL |     assert_impl::<HasCastInTraitImpl<{ N + 1 }, { N as u128 }>>();\n error: unconstrained generic constant\n   --> $DIR/abstract-const-as-cast-3.rs:38:5\n    |\n-LL |     fn assert_impl<T: Trait>() {}\n-   |                       ----- required by this bound in `use_trait_impl_2::assert_impl`\n-...\n LL |     assert_impl::<HasCastInTraitImpl<{ N + 1 }, { N as _ }>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n@@ -106,6 +109,11 @@ note: required because of the requirements on the impl of `Trait` for `HasCastIn\n    |\n LL | impl<const O: usize> Trait for HasCastInTraitImpl<O, { O as u128 }> {}\n    |                      ^^^^^     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: required by a bound in `use_trait_impl_2::assert_impl`\n+  --> $DIR/abstract-const-as-cast-3.rs:32:23\n+   |\n+LL |     fn assert_impl<T: Trait>() {}\n+   |                       ^^^^^ required by this bound in `use_trait_impl_2::assert_impl`\n \n error[E0308]: mismatched types\n   --> $DIR/abstract-const-as-cast-3.rs:38:5"}, {"sha": "7b4d46b82097654b67a0e16f76f30298bf4df0d9", "filename": "src/test/ui/const-generics/const_evaluatable_checked/cross_crate_predicate.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fcross_crate_predicate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fcross_crate_predicate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fcross_crate_predicate.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -4,51 +4,51 @@ error: unconstrained generic constant\n LL |     let _ = const_evaluatable_lib::test1::<T>();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-  ::: $DIR/auxiliary/const_evaluatable_lib.rs:6:10\n+   = help: try adding a `where` bound using this expression: `where [(); std::mem::size_of::<T>() - 1]:`\n+note: required by a bound in `test1`\n+  --> $DIR/auxiliary/const_evaluatable_lib.rs:6:10\n    |\n LL |     [u8; std::mem::size_of::<T>() - 1]: Sized,\n-   |          ---------------------------- required by this bound in `test1`\n-   |\n-   = help: try adding a `where` bound using this expression: `where [(); std::mem::size_of::<T>() - 1]:`\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `test1`\n \n error: unconstrained generic constant\n   --> $DIR/cross_crate_predicate.rs:7:13\n    |\n LL |     let _ = const_evaluatable_lib::test1::<T>();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-  ::: $DIR/auxiliary/const_evaluatable_lib.rs:4:27\n+   = help: try adding a `where` bound using this expression: `where [(); std::mem::size_of::<T>() - 1]:`\n+note: required by a bound in `test1`\n+  --> $DIR/auxiliary/const_evaluatable_lib.rs:4:27\n    |\n LL | pub fn test1<T>() -> [u8; std::mem::size_of::<T>() - 1]\n-   |                           ---------------------------- required by this bound in `test1`\n-   |\n-   = help: try adding a `where` bound using this expression: `where [(); std::mem::size_of::<T>() - 1]:`\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `test1`\n \n error: unconstrained generic constant\n   --> $DIR/cross_crate_predicate.rs:7:13\n    |\n LL |     let _ = const_evaluatable_lib::test1::<T>();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-  ::: $DIR/auxiliary/const_evaluatable_lib.rs:6:10\n+   = help: try adding a `where` bound using this expression: `where [(); std::mem::size_of::<T>() - 1]:`\n+note: required by a bound in `test1`\n+  --> $DIR/auxiliary/const_evaluatable_lib.rs:6:10\n    |\n LL |     [u8; std::mem::size_of::<T>() - 1]: Sized,\n-   |          ---------------------------- required by this bound in `test1`\n-   |\n-   = help: try adding a `where` bound using this expression: `where [(); std::mem::size_of::<T>() - 1]:`\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `test1`\n \n error: unconstrained generic constant\n   --> $DIR/cross_crate_predicate.rs:7:13\n    |\n LL |     let _ = const_evaluatable_lib::test1::<T>();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-  ::: $DIR/auxiliary/const_evaluatable_lib.rs:4:27\n+   = help: try adding a `where` bound using this expression: `where [(); std::mem::size_of::<T>() - 1]:`\n+note: required by a bound in `test1`\n+  --> $DIR/auxiliary/const_evaluatable_lib.rs:4:27\n    |\n LL | pub fn test1<T>() -> [u8; std::mem::size_of::<T>() - 1]\n-   |                           ---------------------------- required by this bound in `test1`\n-   |\n-   = help: try adding a `where` bound using this expression: `where [(); std::mem::size_of::<T>() - 1]:`\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `test1`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "ce75314ada769e4f476b0c34fe174f6baed91989", "filename": "src/test/ui/const-generics/const_evaluatable_checked/object-safety-ok-infer-err.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fobject-safety-ok-infer-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fobject-safety-ok-infer-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fobject-safety-ok-infer-err.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,11 +1,14 @@\n error[E0284]: type annotations needed: cannot satisfy `the constant `use_dyn::<{_: usize}>::{constant#0}` can be evaluated`\n   --> $DIR/object-safety-ok-infer-err.rs:20:5\n    |\n-LL | fn use_dyn<const N: usize>(v: &dyn Foo<N>) where [u8; N + 1]: Sized {\n-   |                                                       ----- required by this bound in `use_dyn`\n-...\n LL |     use_dyn(&());\n    |     ^^^^^^^ cannot satisfy `the constant `use_dyn::<{_: usize}>::{constant#0}` can be evaluated`\n+   |\n+note: required by a bound in `use_dyn`\n+  --> $DIR/object-safety-ok-infer-err.rs:14:55\n+   |\n+LL | fn use_dyn<const N: usize>(v: &dyn Foo<N>) where [u8; N + 1]: Sized {\n+   |                                                       ^^^^^ required by this bound in `use_dyn`\n \n error: aborting due to previous error\n "}, {"sha": "19f419c82fdf63d88b19b4b135154790a229e967", "filename": "src/test/ui/const-generics/issues/issue-67185-2.full.stderr", "status": "modified", "additions": 31, "deletions": 23, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-2.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-2.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-2.full.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -37,66 +37,74 @@ LL | | }\n error[E0277]: the trait bound `[u16; 3]: Bar` is not satisfied\n   --> $DIR/issue-67185-2.rs:26:6\n    |\n-LL | trait Foo\n-   |       --- required by a bound in this\n-...\n-LL |         <u8 as Baz>::Quaks: Bar,\n-   |                             --- required by this bound in `Foo`\n-...\n LL | impl Foo for FooImpl {}\n    |      ^^^ the trait `Bar` is not implemented for `[u16; 3]`\n    |\n    = help: the following implementations were found:\n              <[[u16; 3]; 3] as Bar>\n              <[u16; 4] as Bar>\n-\n-error[E0277]: the trait bound `[[u16; 3]; 2]: Bar` is not satisfied\n-  --> $DIR/issue-67185-2.rs:26:6\n+note: required by a bound in `Foo`\n+  --> $DIR/issue-67185-2.rs:20:29\n    |\n LL | trait Foo\n    |       --- required by a bound in this\n ...\n-LL |         [<u8 as Baz>::Quaks; 2]: Bar,\n-   |                                  --- required by this bound in `Foo`\n-...\n+LL |         <u8 as Baz>::Quaks: Bar,\n+   |                             ^^^ required by this bound in `Foo`\n+\n+error[E0277]: the trait bound `[[u16; 3]; 2]: Bar` is not satisfied\n+  --> $DIR/issue-67185-2.rs:26:6\n+   |\n LL | impl Foo for FooImpl {}\n    |      ^^^ the trait `Bar` is not implemented for `[[u16; 3]; 2]`\n    |\n    = help: the following implementations were found:\n              <[[u16; 3]; 3] as Bar>\n              <[u16; 4] as Bar>\n-\n-error[E0277]: the trait bound `[[u16; 3]; 2]: Bar` is not satisfied\n-  --> $DIR/issue-67185-2.rs:30:14\n+note: required by a bound in `Foo`\n+  --> $DIR/issue-67185-2.rs:19:34\n    |\n LL | trait Foo\n    |       --- required by a bound in this\n ...\n LL |         [<u8 as Baz>::Quaks; 2]: Bar,\n-   |                                  --- required by this bound in `Foo`\n-...\n+   |                                  ^^^ required by this bound in `Foo`\n+\n+error[E0277]: the trait bound `[[u16; 3]; 2]: Bar` is not satisfied\n+  --> $DIR/issue-67185-2.rs:30:14\n+   |\n LL | fn f(_: impl Foo) {}\n    |              ^^^ the trait `Bar` is not implemented for `[[u16; 3]; 2]`\n    |\n    = help: the following implementations were found:\n              <[[u16; 3]; 3] as Bar>\n              <[u16; 4] as Bar>\n-\n-error[E0277]: the trait bound `[u16; 3]: Bar` is not satisfied\n-  --> $DIR/issue-67185-2.rs:30:14\n+note: required by a bound in `Foo`\n+  --> $DIR/issue-67185-2.rs:19:34\n    |\n LL | trait Foo\n    |       --- required by a bound in this\n ...\n-LL |         <u8 as Baz>::Quaks: Bar,\n-   |                             --- required by this bound in `Foo`\n-...\n+LL |         [<u8 as Baz>::Quaks; 2]: Bar,\n+   |                                  ^^^ required by this bound in `Foo`\n+\n+error[E0277]: the trait bound `[u16; 3]: Bar` is not satisfied\n+  --> $DIR/issue-67185-2.rs:30:14\n+   |\n LL | fn f(_: impl Foo) {}\n    |              ^^^ the trait `Bar` is not implemented for `[u16; 3]`\n    |\n    = help: the following implementations were found:\n              <[[u16; 3]; 3] as Bar>\n              <[u16; 4] as Bar>\n+note: required by a bound in `Foo`\n+  --> $DIR/issue-67185-2.rs:20:29\n+   |\n+LL | trait Foo\n+   |       --- required by a bound in this\n+...\n+LL |         <u8 as Baz>::Quaks: Bar,\n+   |                             ^^^ required by this bound in `Foo`\n \n error: aborting due to 6 previous errors\n "}, {"sha": "19f419c82fdf63d88b19b4b135154790a229e967", "filename": "src/test/ui/const-generics/issues/issue-67185-2.min.stderr", "status": "modified", "additions": 31, "deletions": 23, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-2.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-2.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-2.min.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -37,66 +37,74 @@ LL | | }\n error[E0277]: the trait bound `[u16; 3]: Bar` is not satisfied\n   --> $DIR/issue-67185-2.rs:26:6\n    |\n-LL | trait Foo\n-   |       --- required by a bound in this\n-...\n-LL |         <u8 as Baz>::Quaks: Bar,\n-   |                             --- required by this bound in `Foo`\n-...\n LL | impl Foo for FooImpl {}\n    |      ^^^ the trait `Bar` is not implemented for `[u16; 3]`\n    |\n    = help: the following implementations were found:\n              <[[u16; 3]; 3] as Bar>\n              <[u16; 4] as Bar>\n-\n-error[E0277]: the trait bound `[[u16; 3]; 2]: Bar` is not satisfied\n-  --> $DIR/issue-67185-2.rs:26:6\n+note: required by a bound in `Foo`\n+  --> $DIR/issue-67185-2.rs:20:29\n    |\n LL | trait Foo\n    |       --- required by a bound in this\n ...\n-LL |         [<u8 as Baz>::Quaks; 2]: Bar,\n-   |                                  --- required by this bound in `Foo`\n-...\n+LL |         <u8 as Baz>::Quaks: Bar,\n+   |                             ^^^ required by this bound in `Foo`\n+\n+error[E0277]: the trait bound `[[u16; 3]; 2]: Bar` is not satisfied\n+  --> $DIR/issue-67185-2.rs:26:6\n+   |\n LL | impl Foo for FooImpl {}\n    |      ^^^ the trait `Bar` is not implemented for `[[u16; 3]; 2]`\n    |\n    = help: the following implementations were found:\n              <[[u16; 3]; 3] as Bar>\n              <[u16; 4] as Bar>\n-\n-error[E0277]: the trait bound `[[u16; 3]; 2]: Bar` is not satisfied\n-  --> $DIR/issue-67185-2.rs:30:14\n+note: required by a bound in `Foo`\n+  --> $DIR/issue-67185-2.rs:19:34\n    |\n LL | trait Foo\n    |       --- required by a bound in this\n ...\n LL |         [<u8 as Baz>::Quaks; 2]: Bar,\n-   |                                  --- required by this bound in `Foo`\n-...\n+   |                                  ^^^ required by this bound in `Foo`\n+\n+error[E0277]: the trait bound `[[u16; 3]; 2]: Bar` is not satisfied\n+  --> $DIR/issue-67185-2.rs:30:14\n+   |\n LL | fn f(_: impl Foo) {}\n    |              ^^^ the trait `Bar` is not implemented for `[[u16; 3]; 2]`\n    |\n    = help: the following implementations were found:\n              <[[u16; 3]; 3] as Bar>\n              <[u16; 4] as Bar>\n-\n-error[E0277]: the trait bound `[u16; 3]: Bar` is not satisfied\n-  --> $DIR/issue-67185-2.rs:30:14\n+note: required by a bound in `Foo`\n+  --> $DIR/issue-67185-2.rs:19:34\n    |\n LL | trait Foo\n    |       --- required by a bound in this\n ...\n-LL |         <u8 as Baz>::Quaks: Bar,\n-   |                             --- required by this bound in `Foo`\n-...\n+LL |         [<u8 as Baz>::Quaks; 2]: Bar,\n+   |                                  ^^^ required by this bound in `Foo`\n+\n+error[E0277]: the trait bound `[u16; 3]: Bar` is not satisfied\n+  --> $DIR/issue-67185-2.rs:30:14\n+   |\n LL | fn f(_: impl Foo) {}\n    |              ^^^ the trait `Bar` is not implemented for `[u16; 3]`\n    |\n    = help: the following implementations were found:\n              <[[u16; 3]; 3] as Bar>\n              <[u16; 4] as Bar>\n+note: required by a bound in `Foo`\n+  --> $DIR/issue-67185-2.rs:20:29\n+   |\n+LL | trait Foo\n+   |       --- required by a bound in this\n+...\n+LL |         <u8 as Baz>::Quaks: Bar,\n+   |                             ^^^ required by this bound in `Foo`\n \n error: aborting due to 6 previous errors\n "}, {"sha": "86d1da052aee62444806273c11ca60e126f2e31d", "filename": "src/test/ui/const-generics/issues/issue-72787.min.stderr", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72787.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72787.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72787.min.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -37,24 +37,28 @@ LL |     IsLessOrEqual<{ 8 - I }, { 8 - J }>: True,\n error[E0283]: type annotations needed\n   --> $DIR/issue-72787.rs:21:26\n    |\n-LL | pub trait True {}\n-   | -------------- required by this bound in `True`\n-...\n LL |     IsLessOrEqual<I, 8>: True,\n    |                          ^^^^ cannot infer type for struct `IsLessOrEqual<I, 8_u32>`\n    |\n    = note: cannot satisfy `IsLessOrEqual<I, 8_u32>: True`\n+note: required by a bound in `True`\n+  --> $DIR/issue-72787.rs:7:1\n+   |\n+LL | pub trait True {}\n+   | ^^^^^^^^^^^^^^ required by this bound in `True`\n \n error[E0283]: type annotations needed\n   --> $DIR/issue-72787.rs:21:26\n    |\n-LL | pub trait True {}\n-   | -------------- required by this bound in `True`\n-...\n LL |     IsLessOrEqual<I, 8>: True,\n    |                          ^^^^ cannot infer type for struct `IsLessOrEqual<I, 8_u32>`\n    |\n    = note: cannot satisfy `IsLessOrEqual<I, 8_u32>: True`\n+note: required by a bound in `True`\n+  --> $DIR/issue-72787.rs:7:1\n+   |\n+LL | pub trait True {}\n+   | ^^^^^^^^^^^^^^ required by this bound in `True`\n \n error: aborting due to 6 previous errors\n "}, {"sha": "e51db35925e4acb3d543482c8ba6269d0e8da6b4", "filename": "src/test/ui/const-generics/issues/issue-85848.stderr", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-85848.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-85848.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-85848.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -3,9 +3,6 @@ error[E0277]: the trait bound `(): _Contains<&C>` is not satisfied\n    |\n LL |     writes_to_specific_path(&cap);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ the trait `_Contains<&C>` is not implemented for `()`\n-...\n-LL | fn writes_to_specific_path<C: Delegates<()>>(cap: &C) {}\n-   |                               ------------- required by this bound in `writes_to_specific_path`\n    |\n note: required because of the requirements on the impl of `Contains<(), true>` for `&C`\n   --> $DIR/issue-85848.rs:21:12\n@@ -17,15 +14,17 @@ note: required because of the requirements on the impl of `Delegates<()>` for `&\n    |\n LL | impl<T, U> Delegates<U> for T where T: Contains<U, true> {}\n    |            ^^^^^^^^^^^^     ^\n+note: required by a bound in `writes_to_specific_path`\n+  --> $DIR/issue-85848.rs:29:31\n+   |\n+LL | fn writes_to_specific_path<C: Delegates<()>>(cap: &C) {}\n+   |                               ^^^^^^^^^^^^^ required by this bound in `writes_to_specific_path`\n \n error: unconstrained generic constant\n   --> $DIR/issue-85848.rs:24:5\n    |\n LL |     writes_to_specific_path(&cap);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n-...\n-LL | fn writes_to_specific_path<C: Delegates<()>>(cap: &C) {}\n-   |                               ------------- required by this bound in `writes_to_specific_path`\n    |\n    = help: try adding a `where` bound using this expression: `where [(); { contains::<T, U>() }]:`\n note: required because of the requirements on the impl of `Contains<(), true>` for `&C`\n@@ -38,6 +37,11 @@ note: required because of the requirements on the impl of `Delegates<()>` for `&\n    |\n LL | impl<T, U> Delegates<U> for T where T: Contains<U, true> {}\n    |            ^^^^^^^^^^^^     ^\n+note: required by a bound in `writes_to_specific_path`\n+  --> $DIR/issue-85848.rs:29:31\n+   |\n+LL | fn writes_to_specific_path<C: Delegates<()>>(cap: &C) {}\n+   |                               ^^^^^^^^^^^^^ required by this bound in `writes_to_specific_path`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "99085711513d83d7d87c67144b90a9b682453bb7", "filename": "src/test/ui/const-generics/parent_generics_of_encoding_impl_trait.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fconst-generics%2Fparent_generics_of_encoding_impl_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fconst-generics%2Fparent_generics_of_encoding_impl_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fparent_generics_of_encoding_impl_trait.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -4,10 +4,11 @@ error[E0284]: type annotations needed: cannot satisfy `the constant `foo::{opaqu\n LL |     generics_of_parent_impl_trait::foo([()]);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot satisfy `the constant `foo::{opaque#0}::{constant#0}` can be evaluated`\n    |\n-  ::: $DIR/auxiliary/generics_of_parent_impl_trait.rs:6:48\n+note: required by a bound in `foo`\n+  --> $DIR/auxiliary/generics_of_parent_impl_trait.rs:6:48\n    |\n LL | pub fn foo<const N: usize>(foo: impl Into<[(); N + 1]>) {\n-   |                                                ----- required by this bound in `foo`\n+   |                                                ^^^^^ required by this bound in `foo`\n \n error: aborting due to previous error\n "}, {"sha": "277454a1140e670a3380f65829ca5ef1f7779123", "filename": "src/test/ui/derives/derives-span-Eq-enum-struct-variant.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-enum-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-enum-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-enum-struct-variant.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -7,11 +7,11 @@ LL | #[derive(Eq,PartialEq)]\n LL |      x: Error\n    |      ^^^^^^^^ the trait `Eq` is not implemented for `Error`\n    |\n-  ::: $SRC_DIR/core/src/cmp.rs:LL:COL\n+note: required by a bound in `AssertParamIsEq`\n+  --> $SRC_DIR/core/src/cmp.rs:LL:COL\n    |\n LL | pub struct AssertParamIsEq<T: Eq + ?Sized> {\n-   |                               -- required by this bound in `AssertParamIsEq`\n-   |\n+   |                               ^^ required by this bound in `AssertParamIsEq`\n    = note: this error originates in the derive macro `Eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "6a48ad24561ec97491d690e3361df57cc919d6bf", "filename": "src/test/ui/derives/derives-span-Eq-enum.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-enum.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -7,11 +7,11 @@ LL | #[derive(Eq,PartialEq)]\n LL |      Error\n    |      ^^^^^ the trait `Eq` is not implemented for `Error`\n    |\n-  ::: $SRC_DIR/core/src/cmp.rs:LL:COL\n+note: required by a bound in `AssertParamIsEq`\n+  --> $SRC_DIR/core/src/cmp.rs:LL:COL\n    |\n LL | pub struct AssertParamIsEq<T: Eq + ?Sized> {\n-   |                               -- required by this bound in `AssertParamIsEq`\n-   |\n+   |                               ^^ required by this bound in `AssertParamIsEq`\n    = note: this error originates in the derive macro `Eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "7bf83e8eae2d3ec8a70a5d13a645db899fe6776a", "filename": "src/test/ui/derives/derives-span-Eq-struct.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-struct.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -7,11 +7,11 @@ LL | struct Struct {\n LL |     x: Error\n    |     ^^^^^^^^ the trait `Eq` is not implemented for `Error`\n    |\n-  ::: $SRC_DIR/core/src/cmp.rs:LL:COL\n+note: required by a bound in `AssertParamIsEq`\n+  --> $SRC_DIR/core/src/cmp.rs:LL:COL\n    |\n LL | pub struct AssertParamIsEq<T: Eq + ?Sized> {\n-   |                               -- required by this bound in `AssertParamIsEq`\n-   |\n+   |                               ^^ required by this bound in `AssertParamIsEq`\n    = note: this error originates in the derive macro `Eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "13e2a55319eb5e36e382f58b0d96785b7eabb34f", "filename": "src/test/ui/derives/derives-span-Eq-tuple-struct.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Eq-tuple-struct.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -7,11 +7,11 @@ LL | struct Struct(\n LL |     Error\n    |     ^^^^^ the trait `Eq` is not implemented for `Error`\n    |\n-  ::: $SRC_DIR/core/src/cmp.rs:LL:COL\n+note: required by a bound in `AssertParamIsEq`\n+  --> $SRC_DIR/core/src/cmp.rs:LL:COL\n    |\n LL | pub struct AssertParamIsEq<T: Eq + ?Sized> {\n-   |                               -- required by this bound in `AssertParamIsEq`\n-   |\n+   |                               ^^ required by this bound in `AssertParamIsEq`\n    = note: this error originates in the derive macro `Eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "47c7f1c2c33408ec70a5ec983f934a8b81cef8a0", "filename": "src/test/ui/derives/derives-span-Hash-enum-struct-variant.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum-struct-variant.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -7,11 +7,11 @@ LL | #[derive(Hash)]\n LL |      x: Error\n    |      ^^^^^^^^ the trait `Hash` is not implemented for `Error`\n    |\n-  ::: $SRC_DIR/core/src/hash/mod.rs:LL:COL\n+note: required by a bound in `std::hash::Hash::hash`\n+  --> $SRC_DIR/core/src/hash/mod.rs:LL:COL\n    |\n LL |     fn hash<H: Hasher>(&self, state: &mut H);\n-   |             - required by this bound in `std::hash::Hash::hash`\n-   |\n+   |             ^ required by this bound in `std::hash::Hash::hash`\n    = note: this error originates in the derive macro `Hash` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "92f084b58e35be50a69503ed7ff9617a4dadad88", "filename": "src/test/ui/derives/derives-span-Hash-enum.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-enum.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -7,11 +7,11 @@ LL | #[derive(Hash)]\n LL |      Error\n    |      ^^^^^ the trait `Hash` is not implemented for `Error`\n    |\n-  ::: $SRC_DIR/core/src/hash/mod.rs:LL:COL\n+note: required by a bound in `std::hash::Hash::hash`\n+  --> $SRC_DIR/core/src/hash/mod.rs:LL:COL\n    |\n LL |     fn hash<H: Hasher>(&self, state: &mut H);\n-   |             - required by this bound in `std::hash::Hash::hash`\n-   |\n+   |             ^ required by this bound in `std::hash::Hash::hash`\n    = note: this error originates in the derive macro `Hash` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "c57cebe04ebcbacb0e07e616ebefc10cbae2c9ba", "filename": "src/test/ui/derives/derives-span-Hash-struct.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-struct.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -7,11 +7,11 @@ LL | struct Struct {\n LL |     x: Error\n    |     ^^^^^^^^ the trait `Hash` is not implemented for `Error`\n    |\n-  ::: $SRC_DIR/core/src/hash/mod.rs:LL:COL\n+note: required by a bound in `std::hash::Hash::hash`\n+  --> $SRC_DIR/core/src/hash/mod.rs:LL:COL\n    |\n LL |     fn hash<H: Hasher>(&self, state: &mut H);\n-   |             - required by this bound in `std::hash::Hash::hash`\n-   |\n+   |             ^ required by this bound in `std::hash::Hash::hash`\n    = note: this error originates in the derive macro `Hash` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "200937f0c9fc380dbaee757da9f1a166c6ed0dc5", "filename": "src/test/ui/derives/derives-span-Hash-tuple-struct.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderives-span-Hash-tuple-struct.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -7,11 +7,11 @@ LL | struct Struct(\n LL |     Error\n    |     ^^^^^ the trait `Hash` is not implemented for `Error`\n    |\n-  ::: $SRC_DIR/core/src/hash/mod.rs:LL:COL\n+note: required by a bound in `std::hash::Hash::hash`\n+  --> $SRC_DIR/core/src/hash/mod.rs:LL:COL\n    |\n LL |     fn hash<H: Hasher>(&self, state: &mut H);\n-   |             - required by this bound in `std::hash::Hash::hash`\n-   |\n+   |             ^ required by this bound in `std::hash::Hash::hash`\n    = note: this error originates in the derive macro `Hash` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "ecdbbff4d97c3deec79819b0e95fb7f2c2513de1", "filename": "src/test/ui/derives/deriving-copyclone.stderr", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fderives%2Fderiving-copyclone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fderives%2Fderiving-copyclone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderiving-copyclone.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,9 +1,6 @@\n error[E0277]: the trait bound `C: Copy` is not satisfied\n   --> $DIR/deriving-copyclone.rs:31:13\n    |\n-LL | fn is_copy<T: Copy>(_: T) {}\n-   |               ---- required by this bound in `is_copy`\n-...\n LL |     is_copy(B { a: 1, b: C });\n    |             ^^^^^^^^^^^^^^^^\n    |             |\n@@ -15,14 +12,16 @@ note: required because of the requirements on the impl of `Copy` for `B<C>`\n    |\n LL | #[derive(Copy, Clone)]\n    |          ^^^^\n+note: required by a bound in `is_copy`\n+  --> $DIR/deriving-copyclone.rs:18:15\n+   |\n+LL | fn is_copy<T: Copy>(_: T) {}\n+   |               ^^^^ required by this bound in `is_copy`\n    = note: this error originates in the derive macro `Copy` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: the trait bound `C: Clone` is not satisfied\n   --> $DIR/deriving-copyclone.rs:32:14\n    |\n-LL | fn is_clone<T: Clone>(_: T) {}\n-   |                ----- required by this bound in `is_clone`\n-...\n LL |     is_clone(B { a: 1, b: C });\n    |              ^^^^^^^^^^^^^^^^\n    |              |\n@@ -34,14 +33,16 @@ note: required because of the requirements on the impl of `Clone` for `B<C>`\n    |\n LL | #[derive(Copy, Clone)]\n    |                ^^^^^\n+note: required by a bound in `is_clone`\n+  --> $DIR/deriving-copyclone.rs:19:16\n+   |\n+LL | fn is_clone<T: Clone>(_: T) {}\n+   |                ^^^^^ required by this bound in `is_clone`\n    = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: the trait bound `D: Copy` is not satisfied\n   --> $DIR/deriving-copyclone.rs:35:13\n    |\n-LL | fn is_copy<T: Copy>(_: T) {}\n-   |               ---- required by this bound in `is_copy`\n-...\n LL |     is_copy(B { a: 1, b: D });\n    |             ^^^^^^^^^^^^^^^^\n    |             |\n@@ -53,6 +54,11 @@ note: required because of the requirements on the impl of `Copy` for `B<D>`\n    |\n LL | #[derive(Copy, Clone)]\n    |          ^^^^\n+note: required by a bound in `is_copy`\n+  --> $DIR/deriving-copyclone.rs:18:15\n+   |\n+LL | fn is_copy<T: Copy>(_: T) {}\n+   |               ^^^^ required by this bound in `is_copy`\n    = note: this error originates in the derive macro `Copy` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 3 previous errors"}, {"sha": "fa8bee184a74f2c0781f1948bc28ea98a510aa5a", "filename": "src/test/ui/did_you_mean/recursion_limit.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,9 +1,6 @@\n error[E0275]: overflow evaluating the requirement `K: Send`\n   --> $DIR/recursion_limit.rs:34:5\n    |\n-LL | fn is_send<T:Send>() { }\n-   |              ---- required by this bound in `is_send`\n-...\n LL |     is_send::<A>();\n    |     ^^^^^^^^^^^^\n    |\n@@ -58,6 +55,11 @@ note: required because it appears within the type `A`\n    |\n LL | link! { A, B }\n    |         ^\n+note: required by a bound in `is_send`\n+  --> $DIR/recursion_limit.rs:31:14\n+   |\n+LL | fn is_send<T:Send>() { }\n+   |              ^^^^ required by this bound in `is_send`\n \n error: aborting due to previous error\n "}, {"sha": "8ec94f5a3c0aded8196fddbfaa46f65284fb9c30", "filename": "src/test/ui/dst/dst-sized-trait-param.stderr", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fdst%2Fdst-sized-trait-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fdst%2Fdst-sized-trait-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-sized-trait-param.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,13 +1,15 @@\n error[E0277]: the size for values of type `[isize]` cannot be known at compilation time\n   --> $DIR/dst-sized-trait-param.rs:7:6\n    |\n-LL | trait Foo<T> : Sized { fn take(self, x: &T) { } } // Note: T is sized\n-   |           - required by this bound in `Foo`\n-LL | \n LL | impl Foo<[isize]> for usize { }\n    |      ^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `[isize]`\n+note: required by a bound in `Foo`\n+  --> $DIR/dst-sized-trait-param.rs:5:11\n+   |\n+LL | trait Foo<T> : Sized { fn take(self, x: &T) { } } // Note: T is sized\n+   |           ^ required by this bound in `Foo`\n help: consider relaxing the implicit `Sized` restriction\n    |\n LL | trait Foo<T: ?Sized> : Sized { fn take(self, x: &T) { } } // Note: T is sized\n@@ -16,13 +18,15 @@ LL | trait Foo<T: ?Sized> : Sized { fn take(self, x: &T) { } } // Note: T is siz\n error[E0277]: the size for values of type `[usize]` cannot be known at compilation time\n   --> $DIR/dst-sized-trait-param.rs:10:6\n    |\n-LL | trait Foo<T> : Sized { fn take(self, x: &T) { } } // Note: T is sized\n-   |                ----- required by this bound in `Foo`\n-...\n LL | impl Foo<isize> for [usize] { }\n    |      ^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `[usize]`\n+note: required by a bound in `Foo`\n+  --> $DIR/dst-sized-trait-param.rs:5:16\n+   |\n+LL | trait Foo<T> : Sized { fn take(self, x: &T) { } } // Note: T is sized\n+   |                ^^^^^ required by this bound in `Foo`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "284eaafc6cceea85e65abfe17186ed77380e16ce", "filename": "src/test/ui/error-codes/E0271.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ferror-codes%2FE0271.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ferror-codes%2FE0271.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0271.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,11 +1,14 @@\n error[E0271]: type mismatch resolving `<i8 as Trait>::AssociatedType == u32`\n   --> $DIR/E0271.rs:10:5\n    |\n-LL | fn foo<T>(t: T) where T: Trait<AssociatedType=u32> {\n-   |                                ------------------ required by this bound in `foo`\n-...\n LL |     foo(3_i8);\n    |     ^^^ expected `u32`, found `&str`\n+   |\n+note: required by a bound in `foo`\n+  --> $DIR/E0271.rs:3:32\n+   |\n+LL | fn foo<T>(t: T) where T: Trait<AssociatedType=u32> {\n+   |                                ^^^^^^^^^^^^^^^^^^ required by this bound in `foo`\n \n error: aborting due to previous error\n "}, {"sha": "15d851aa9340d8feeef8ec31170e08a542bc5e32", "filename": "src/test/ui/error-codes/E0275.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ferror-codes%2FE0275.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ferror-codes%2FE0275.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0275.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,9 +1,6 @@\n error[E0275]: overflow evaluating the requirement `Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>: Foo`\n   --> $DIR/E0275.rs:5:33\n    |\n-LL | trait Foo {}\n-   | --------- required by this bound in `Foo`\n-...\n LL | impl<T> Foo for T where Bar<T>: Foo {}\n    |                                 ^^^\n    |\n@@ -15,6 +12,11 @@ LL | impl<T> Foo for T where Bar<T>: Foo {}\n    |         ^^^     ^\n    = note: 127 redundant requirements hidden\n    = note: required because of the requirements on the impl of `Foo` for `Bar<T>`\n+note: required by a bound in `Foo`\n+  --> $DIR/E0275.rs:1:1\n+   |\n+LL | trait Foo {}\n+   | ^^^^^^^^^ required by this bound in `Foo`\n \n error: aborting due to previous error\n "}, {"sha": "ca2cb884240763abb5af0ea9d8f7a6a381742b5d", "filename": "src/test/ui/error-codes/E0277-2.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ferror-codes%2FE0277-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ferror-codes%2FE0277-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0277-2.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,9 +1,6 @@\n error[E0277]: `*const u8` cannot be sent between threads safely\n   --> $DIR/E0277-2.rs:16:5\n    |\n-LL | fn is_send<T: Send>() { }\n-   |               ---- required by this bound in `is_send`\n-...\n LL |     is_send::<Foo>();\n    |     ^^^^^^^^^^^^^^ `*const u8` cannot be sent between threads safely\n    |\n@@ -23,6 +20,11 @@ note: required because it appears within the type `Foo`\n    |\n LL | struct Foo {\n    |        ^^^\n+note: required by a bound in `is_send`\n+  --> $DIR/E0277-2.rs:13:15\n+   |\n+LL | fn is_send<T: Send>() { }\n+   |               ^^^^ required by this bound in `is_send`\n \n error: aborting due to previous error\n "}, {"sha": "c82665aa580ba326f44bd1a35ed97b6f4cc806e0", "filename": "src/test/ui/error-codes/E0277.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ferror-codes%2FE0277.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ferror-codes%2FE0277.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0277.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -15,11 +15,14 @@ LL | fn f(p: &Path) { }\n error[E0277]: the trait bound `i32: Foo` is not satisfied\n   --> $DIR/E0277.rs:15:15\n    |\n-LL | fn some_func<T: Foo>(foo: T) {\n-   |                 --- required by this bound in `some_func`\n-...\n LL |     some_func(5i32);\n    |               ^^^^ the trait `Foo` is not implemented for `i32`\n+   |\n+note: required by a bound in `some_func`\n+  --> $DIR/E0277.rs:7:17\n+   |\n+LL | fn some_func<T: Foo>(foo: T) {\n+   |                 ^^^ required by this bound in `some_func`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "8c6025e708e8ae395d534198c03c1fac1483b925", "filename": "src/test/ui/error-should-say-copy-not-pod.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ferror-should-say-copy-not-pod.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ferror-should-say-copy-not-pod.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-should-say-copy-not-pod.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,11 +1,14 @@\n error[E0277]: the trait bound `String: Copy` is not satisfied\n   --> $DIR/error-should-say-copy-not-pod.rs:6:17\n    |\n-LL | fn check_bound<T:Copy>(_: T) {}\n-   |                  ---- required by this bound in `check_bound`\n-...\n LL |     check_bound(\"nocopy\".to_string());\n    |                 ^^^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `String`\n+   |\n+note: required by a bound in `check_bound`\n+  --> $DIR/error-should-say-copy-not-pod.rs:3:18\n+   |\n+LL | fn check_bound<T:Copy>(_: T) {}\n+   |                  ^^^^ required by this bound in `check_bound`\n \n error: aborting due to previous error\n "}, {"sha": "7865ddeda34f5f0d00361ee61c9ebb4960f78704", "filename": "src/test/ui/extern/extern-types-not-sync-send.stderr", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fextern%2Fextern-types-not-sync-send.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fextern%2Fextern-types-not-sync-send.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-types-not-sync-send.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,24 +1,28 @@\n error[E0277]: `A` cannot be shared between threads safely\n   --> $DIR/extern-types-not-sync-send.rs:13:19\n    |\n-LL | fn assert_sync<T: ?Sized + Sync>() {}\n-   |                            ---- required by this bound in `assert_sync`\n-...\n LL |     assert_sync::<A>();\n    |                   ^ `A` cannot be shared between threads safely\n    |\n    = help: the trait `Sync` is not implemented for `A`\n+note: required by a bound in `assert_sync`\n+  --> $DIR/extern-types-not-sync-send.rs:9:28\n+   |\n+LL | fn assert_sync<T: ?Sized + Sync>() {}\n+   |                            ^^^^ required by this bound in `assert_sync`\n \n error[E0277]: `A` cannot be sent between threads safely\n   --> $DIR/extern-types-not-sync-send.rs:16:19\n    |\n-LL | fn assert_send<T: ?Sized + Send>() {}\n-   |                            ---- required by this bound in `assert_send`\n-...\n LL |     assert_send::<A>();\n    |                   ^ `A` cannot be sent between threads safely\n    |\n    = help: the trait `Send` is not implemented for `A`\n+note: required by a bound in `assert_send`\n+  --> $DIR/extern-types-not-sync-send.rs:10:28\n+   |\n+LL | fn assert_send<T: ?Sized + Send>() {}\n+   |                            ^^^^ required by this bound in `assert_send`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "e21077159b2c9885045f6a9a7647b7188cf09a6c", "filename": "src/test/ui/extern/extern-types-unsized.stderr", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fextern%2Fextern-types-unsized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fextern%2Fextern-types-unsized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-types-unsized.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,13 +1,15 @@\n error[E0277]: the size for values of type `A` cannot be known at compilation time\n   --> $DIR/extern-types-unsized.rs:22:20\n    |\n-LL | fn assert_sized<T>() {}\n-   |                 - required by this bound in `assert_sized`\n-...\n LL |     assert_sized::<A>();\n    |                    ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `A`\n+note: required by a bound in `assert_sized`\n+  --> $DIR/extern-types-unsized.rs:19:17\n+   |\n+LL | fn assert_sized<T>() {}\n+   |                 ^ required by this bound in `assert_sized`\n help: consider relaxing the implicit `Sized` restriction\n    |\n LL | fn assert_sized<T: ?Sized>() {}\n@@ -16,9 +18,6 @@ LL | fn assert_sized<T: ?Sized>() {}\n error[E0277]: the size for values of type `A` cannot be known at compilation time\n   --> $DIR/extern-types-unsized.rs:25:5\n    |\n-LL | fn assert_sized<T>() {}\n-   |                 - required by this bound in `assert_sized`\n-...\n LL |     assert_sized::<Foo>();\n    |     ^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n@@ -28,6 +27,11 @@ note: required because it appears within the type `Foo`\n    |\n LL | struct Foo {\n    |        ^^^\n+note: required by a bound in `assert_sized`\n+  --> $DIR/extern-types-unsized.rs:19:17\n+   |\n+LL | fn assert_sized<T>() {}\n+   |                 ^ required by this bound in `assert_sized`\n help: consider relaxing the implicit `Sized` restriction\n    |\n LL | fn assert_sized<T: ?Sized>() {}\n@@ -36,9 +40,6 @@ LL | fn assert_sized<T: ?Sized>() {}\n error[E0277]: the size for values of type `A` cannot be known at compilation time\n   --> $DIR/extern-types-unsized.rs:28:5\n    |\n-LL | fn assert_sized<T>() {}\n-   |                 - required by this bound in `assert_sized`\n-...\n LL |     assert_sized::<Bar<A>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n@@ -48,6 +49,11 @@ note: required because it appears within the type `Bar<A>`\n    |\n LL | struct Bar<T: ?Sized> {\n    |        ^^^\n+note: required by a bound in `assert_sized`\n+  --> $DIR/extern-types-unsized.rs:19:17\n+   |\n+LL | fn assert_sized<T>() {}\n+   |                 ^ required by this bound in `assert_sized`\n help: consider relaxing the implicit `Sized` restriction\n    |\n LL | fn assert_sized<T: ?Sized>() {}\n@@ -56,9 +62,6 @@ LL | fn assert_sized<T: ?Sized>() {}\n error[E0277]: the size for values of type `A` cannot be known at compilation time\n   --> $DIR/extern-types-unsized.rs:31:5\n    |\n-LL | fn assert_sized<T>() {}\n-   |                 - required by this bound in `assert_sized`\n-...\n LL |     assert_sized::<Bar<Bar<A>>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n@@ -73,6 +76,11 @@ note: required because it appears within the type `Bar<Bar<A>>`\n    |\n LL | struct Bar<T: ?Sized> {\n    |        ^^^\n+note: required by a bound in `assert_sized`\n+  --> $DIR/extern-types-unsized.rs:19:17\n+   |\n+LL | fn assert_sized<T>() {}\n+   |                 ^ required by this bound in `assert_sized`\n help: consider relaxing the implicit `Sized` restriction\n    |\n LL | fn assert_sized<T: ?Sized>() {}"}, {"sha": "74981ebb76c932952b92f7c31cb87c89ca5311fb", "filename": "src/test/ui/extern/extern-wrong-value-type.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fextern%2Fextern-wrong-value-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fextern%2Fextern-wrong-value-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-wrong-value-type.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,14 +1,16 @@\n error[E0277]: expected a `Fn<()>` closure, found `extern \"C\" fn() {f}`\n   --> $DIR/extern-wrong-value-type.rs:9:11\n    |\n-LL | fn is_fn<F>(_: F) where F: Fn() {}\n-   |                            ---- required by this bound in `is_fn`\n-...\n LL |     is_fn(f);\n    |           ^ expected an `Fn<()>` closure, found `extern \"C\" fn() {f}`\n    |\n    = help: the trait `Fn<()>` is not implemented for `extern \"C\" fn() {f}`\n    = note: wrap the `extern \"C\" fn() {f}` in a closure with no arguments: `|| { /* code */ }`\n+note: required by a bound in `is_fn`\n+  --> $DIR/extern-wrong-value-type.rs:4:28\n+   |\n+LL | fn is_fn<F>(_: F) where F: Fn() {}\n+   |                            ^^^^ required by this bound in `is_fn`\n \n error: aborting due to previous error\n "}, {"sha": "f24c3d69a265bd1e36f069dfc5c411b0e6382cbd", "filename": "src/test/ui/feature-gates/feature-gate-associated_type_bounds.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -139,11 +139,11 @@ error[E0277]: the trait bound `<<Self as _Tr3>::A as Iterator>::Item: Copy` is n\n LL |     type A: Iterator<Item: Copy>;\n    |                            ^^^^ the trait `Copy` is not implemented for `<<Self as _Tr3>::A as Iterator>::Item`\n    |\n-  ::: $SRC_DIR/core/src/marker.rs:LL:COL\n+note: required by a bound in `Copy`\n+  --> $SRC_DIR/core/src/marker.rs:LL:COL\n    |\n LL | pub trait Copy: Clone {\n-   | --------------------- required by this bound in `Copy`\n-   |\n+   | ^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Copy`\n help: consider further restricting the associated type\n    |\n LL | trait _Tr3 where <<Self as _Tr3>::A as Iterator>::Item: Copy {"}, {"sha": "7c7a3c8846b9b1488cf75ed7e5cd5544ebe1f742", "filename": "src/test/ui/fmt/send-sync.stderr", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ffmt%2Fsend-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ffmt%2Fsend-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fsend-sync.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,9 +1,6 @@\n error[E0277]: `core::fmt::Opaque` cannot be shared between threads safely\n   --> $DIR/send-sync.rs:8:5\n    |\n-LL | fn send<T: Send>(_: T) {}\n-   |            ---- required by this bound in `send`\n-...\n LL |     send(format_args!(\"{:?}\", c));\n    |     ^^^^ `core::fmt::Opaque` cannot be shared between threads safely\n    |\n@@ -13,13 +10,15 @@ LL |     send(format_args!(\"{:?}\", c));\n    = note: required because it appears within the type `[ArgumentV1<'_>]`\n    = note: required because of the requirements on the impl of `Send` for `&[ArgumentV1<'_>]`\n    = note: required because it appears within the type `Arguments<'_>`\n+note: required by a bound in `send`\n+  --> $DIR/send-sync.rs:1:12\n+   |\n+LL | fn send<T: Send>(_: T) {}\n+   |            ^^^^ required by this bound in `send`\n \n error[E0277]: `core::fmt::Opaque` cannot be shared between threads safely\n   --> $DIR/send-sync.rs:9:5\n    |\n-LL | fn sync<T: Sync>(_: T) {}\n-   |            ---- required by this bound in `sync`\n-...\n LL |     sync(format_args!(\"{:?}\", c));\n    |     ^^^^ `core::fmt::Opaque` cannot be shared between threads safely\n    |\n@@ -29,6 +28,11 @@ LL |     sync(format_args!(\"{:?}\", c));\n    = note: required because it appears within the type `[ArgumentV1<'_>]`\n    = note: required because it appears within the type `&[ArgumentV1<'_>]`\n    = note: required because it appears within the type `Arguments<'_>`\n+note: required by a bound in `sync`\n+  --> $DIR/send-sync.rs:2:12\n+   |\n+LL | fn sync<T: Sync>(_: T) {}\n+   |            ^^^^ required by this bound in `sync`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "57a25b8e48b351c7988ff5943ab9b088296e6344", "filename": "src/test/ui/fn/fn-trait-formatting.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ffn%2Ffn-trait-formatting.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ffn%2Ffn-trait-formatting.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Ffn-trait-formatting.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -34,13 +34,15 @@ LL |     let _: () = (box || -> isize { unimplemented!() }) as Box<dyn FnMut() -\n error[E0277]: expected a `Fn<(isize,)>` closure, found `{integer}`\n   --> $DIR/fn-trait-formatting.rs:19:14\n    |\n-LL | fn needs_fn<F>(x: F) where F: Fn(isize) -> isize {}\n-   |                               ------------------ required by this bound in `needs_fn`\n-...\n LL |     needs_fn(1);\n    |              ^ expected an `Fn<(isize,)>` closure, found `{integer}`\n    |\n    = help: the trait `Fn<(isize,)>` is not implemented for `{integer}`\n+note: required by a bound in `needs_fn`\n+  --> $DIR/fn-trait-formatting.rs:3:31\n+   |\n+LL | fn needs_fn<F>(x: F) where F: Fn(isize) -> isize {}\n+   |                               ^^^^^^^^^^^^^^^^^^ required by this bound in `needs_fn`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "62a7b37a5a387aaf975aa0a016ce91560ba27d5f", "filename": "src/test/ui/generator/generator-yielding-or-returning-itself.stderr", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-yielding-or-returning-itself.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-yielding-or-returning-itself.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-yielding-or-returning-itself.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,34 +1,38 @@\n error[E0271]: type mismatch resolving `<[generator@$DIR/generator-yielding-or-returning-itself.rs:15:34: 19:6] as Generator>::Return == [generator@$DIR/generator-yielding-or-returning-itself.rs:15:34: 19:6]`\n   --> $DIR/generator-yielding-or-returning-itself.rs:15:5\n    |\n-LL | pub fn want_cyclic_generator_return<T>(_: T)\n-   |        ---------------------------- required by a bound in this\n-LL |     where T: Generator<Yield = (), Return = T>\n-   |                                    ---------- required by this bound in `want_cyclic_generator_return`\n-...\n LL |     want_cyclic_generator_return(|| {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cyclic type of infinite size\n    |\n    = note: closures cannot capture themselves or take themselves as argument;\n            this error may be the result of a recent compiler bug-fix,\n            see issue #46062 <https://github.com/rust-lang/rust/issues/46062>\n            for more information\n+note: required by a bound in `want_cyclic_generator_return`\n+  --> $DIR/generator-yielding-or-returning-itself.rs:10:36\n+   |\n+LL | pub fn want_cyclic_generator_return<T>(_: T)\n+   |        ---------------------------- required by a bound in this\n+LL |     where T: Generator<Yield = (), Return = T>\n+   |                                    ^^^^^^^^^^ required by this bound in `want_cyclic_generator_return`\n \n error[E0271]: type mismatch resolving `<[generator@$DIR/generator-yielding-or-returning-itself.rs:28:33: 32:6] as Generator>::Yield == [generator@$DIR/generator-yielding-or-returning-itself.rs:28:33: 32:6]`\n   --> $DIR/generator-yielding-or-returning-itself.rs:28:5\n    |\n-LL | pub fn want_cyclic_generator_yield<T>(_: T)\n-   |        --------------------------- required by a bound in this\n-LL |     where T: Generator<Yield = T, Return = ()>\n-   |                        --------- required by this bound in `want_cyclic_generator_yield`\n-...\n LL |     want_cyclic_generator_yield(|| {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ cyclic type of infinite size\n    |\n    = note: closures cannot capture themselves or take themselves as argument;\n            this error may be the result of a recent compiler bug-fix,\n            see issue #46062 <https://github.com/rust-lang/rust/issues/46062>\n            for more information\n+note: required by a bound in `want_cyclic_generator_yield`\n+  --> $DIR/generator-yielding-or-returning-itself.rs:23:24\n+   |\n+LL | pub fn want_cyclic_generator_yield<T>(_: T)\n+   |        --------------------------- required by a bound in this\n+LL |     where T: Generator<Yield = T, Return = ()>\n+   |                        ^^^^^^^^^ required by this bound in `want_cyclic_generator_yield`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "c3fc8dd8f92869111f3997310c3cc3542c5d2ca3", "filename": "src/test/ui/generator/issue-68112.stderr", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fgenerator%2Fissue-68112.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fgenerator%2Fissue-68112.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fissue-68112.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,9 +1,6 @@\n error: generator cannot be sent between threads safely\n   --> $DIR/issue-68112.rs:33:5\n    |\n-LL | fn require_send(_: impl Send) {}\n-   |                         ---- required by this bound in `require_send`\n-...\n LL |     require_send(send_gen);\n    |     ^^^^^^^^^^^^ generator is not `Send`\n    |\n@@ -17,13 +14,15 @@ LL |         yield;\n    |         ^^^^^ yield occurs here, with `_non_send_gen` maybe used later\n LL |     };\n    |     - `_non_send_gen` is later dropped here\n+note: required by a bound in `require_send`\n+  --> $DIR/issue-68112.rs:22:25\n+   |\n+LL | fn require_send(_: impl Send) {}\n+   |                         ^^^^ required by this bound in `require_send`\n \n error[E0277]: `RefCell<i32>` cannot be shared between threads safely\n   --> $DIR/issue-68112.rs:52:5\n    |\n-LL | fn require_send(_: impl Send) {}\n-   |                         ---- required by this bound in `require_send`\n-...\n LL |     require_send(send_gen);\n    |     ^^^^^^^^^^^^ `RefCell<i32>` cannot be shared between threads safely\n    |\n@@ -34,6 +33,11 @@ LL |     require_send(send_gen);\n    = note: required because it appears within the type `impl Generator`\n    = note: required because it appears within the type `{impl Generator, ()}`\n    = note: required because it appears within the type `[generator@$DIR/issue-68112.rs:48:20: 51:6]`\n+note: required by a bound in `require_send`\n+  --> $DIR/issue-68112.rs:22:25\n+   |\n+LL | fn require_send(_: impl Send) {}\n+   |                         ^^^^ required by this bound in `require_send`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "4d2faa198f1afd9c5f92daa44c982588800ba21b", "filename": "src/test/ui/generator/not-send-sync.stderr", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fgenerator%2Fnot-send-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fgenerator%2Fnot-send-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fnot-send-sync.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,22 +1,21 @@\n error[E0277]: `Cell<i32>` cannot be shared between threads safely\n   --> $DIR/not-send-sync.rs:16:5\n    |\n-LL |     fn assert_send<T: Send>(_: T) {}\n-   |                       ---- required by this bound in `assert_send`\n-...\n LL |     assert_send(|| {\n    |     ^^^^^^^^^^^ `Cell<i32>` cannot be shared between threads safely\n    |\n    = help: the trait `Sync` is not implemented for `Cell<i32>`\n    = note: required because of the requirements on the impl of `Send` for `&Cell<i32>`\n    = note: required because it appears within the type `[generator@$DIR/not-send-sync.rs:16:17: 20:6]`\n+note: required by a bound in `assert_send`\n+  --> $DIR/not-send-sync.rs:7:23\n+   |\n+LL |     fn assert_send<T: Send>(_: T) {}\n+   |                       ^^^^ required by this bound in `assert_send`\n \n error: generator cannot be shared between threads safely\n   --> $DIR/not-send-sync.rs:9:5\n    |\n-LL |     fn assert_sync<T: Sync>(_: T) {}\n-   |                       ---- required by this bound in `assert_sync`\n-...\n LL |     assert_sync(|| {\n    |     ^^^^^^^^^^^ generator is not `Sync`\n    |\n@@ -30,6 +29,11 @@ LL |         yield;\n    |         ^^^^^ yield occurs here, with `a` maybe used later\n LL |     });\n    |     - `a` is later dropped here\n+note: required by a bound in `assert_sync`\n+  --> $DIR/not-send-sync.rs:6:23\n+   |\n+LL |     fn assert_sync<T: Sync>(_: T) {}\n+   |                       ^^^^ required by this bound in `assert_sync`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "53f0936632a45df76e457c2fc529b89c8e0d467b", "filename": "src/test/ui/generator/print/generator-print-verbose-1.stderr", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,9 +1,6 @@\n error: generator cannot be sent between threads safely\n   --> $DIR/generator-print-verbose-1.rs:37:5\n    |\n-LL | fn require_send(_: impl Send) {}\n-   |                         ---- required by this bound in `require_send`\n-...\n LL |     require_send(send_gen);\n    |     ^^^^^^^^^^^^ generator is not `Send`\n    |\n@@ -17,13 +14,15 @@ LL |         yield;\n    |         ^^^^^ yield occurs here, with `_non_send_gen` maybe used later\n LL |     };\n    |     - `_non_send_gen` is later dropped here\n+note: required by a bound in `require_send`\n+  --> $DIR/generator-print-verbose-1.rs:26:25\n+   |\n+LL | fn require_send(_: impl Send) {}\n+   |                         ^^^^ required by this bound in `require_send`\n \n error[E0277]: `RefCell<i32>` cannot be shared between threads safely\n   --> $DIR/generator-print-verbose-1.rs:56:5\n    |\n-LL | fn require_send(_: impl Send) {}\n-   |                         ---- required by this bound in `require_send`\n-...\n LL |     require_send(send_gen);\n    |     ^^^^^^^^^^^^ `RefCell<i32>` cannot be shared between threads safely\n    |\n@@ -34,6 +33,11 @@ LL |     require_send(send_gen);\n    = note: required because it appears within the type `Opaque(DefId(0:42 ~ generator_print_verbose_1[70c9]::make_non_send_generator2::{opaque#0}), [])`\n    = note: required because it appears within the type `{Opaque(DefId(0:42 ~ generator_print_verbose_1[70c9]::make_non_send_generator2::{opaque#0}), []), ()}`\n    = note: required because it appears within the type `[test2::{closure#0} upvar_tys=() {Opaque(DefId(0:42 ~ generator_print_verbose_1[70c9]::make_non_send_generator2::{opaque#0}), []), ()}]`\n+note: required by a bound in `require_send`\n+  --> $DIR/generator-print-verbose-1.rs:26:25\n+   |\n+LL | fn require_send(_: impl Send) {}\n+   |                         ^^^^ required by this bound in `require_send`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "fb2a5754dd3064ad762bc1623c74f0c2b1863016", "filename": "src/test/ui/generator/print/generator-print-verbose-2.stderr", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-2.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,22 +1,21 @@\n error[E0277]: `Cell<i32>` cannot be shared between threads safely\n   --> $DIR/generator-print-verbose-2.rs:19:5\n    |\n-LL |     fn assert_send<T: Send>(_: T) {}\n-   |                       ---- required by this bound in `assert_send`\n-...\n LL |     assert_send(|| {\n    |     ^^^^^^^^^^^ `Cell<i32>` cannot be shared between threads safely\n    |\n    = help: the trait `Sync` is not implemented for `Cell<i32>`\n    = note: required because of the requirements on the impl of `Send` for `&'_#4r Cell<i32>`\n    = note: required because it appears within the type `[main::{closure#1} upvar_tys=(&'_#4r Cell<i32>) _#17t]`\n+note: required by a bound in `assert_send`\n+  --> $DIR/generator-print-verbose-2.rs:10:23\n+   |\n+LL |     fn assert_send<T: Send>(_: T) {}\n+   |                       ^^^^ required by this bound in `assert_send`\n \n error: generator cannot be shared between threads safely\n   --> $DIR/generator-print-verbose-2.rs:12:5\n    |\n-LL |     fn assert_sync<T: Sync>(_: T) {}\n-   |                       ---- required by this bound in `assert_sync`\n-...\n LL |     assert_sync(|| {\n    |     ^^^^^^^^^^^ generator is not `Sync`\n    |\n@@ -30,6 +29,11 @@ LL |         yield;\n    |         ^^^^^ yield occurs here, with `a` maybe used later\n LL |     });\n    |     - `a` is later dropped here\n+note: required by a bound in `assert_sync`\n+  --> $DIR/generator-print-verbose-2.rs:9:23\n+   |\n+LL |     fn assert_sync<T: Sync>(_: T) {}\n+   |                       ^^^^ required by this bound in `assert_sync`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "ea2a48d13cee62dc4a23d2bedda93ecd411cad73", "filename": "src/test/ui/generator/sized-yield.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fgenerator%2Fsized-yield.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fgenerator%2Fsized-yield.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fsized-yield.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -17,12 +17,12 @@ error[E0277]: the size for values of type `str` cannot be known at compilation t\n LL |    Pin::new(&mut gen).resume(());\n    |                       ^^^^^^ doesn't have a size known at compile-time\n    |\n-  ::: $SRC_DIR/core/src/ops/generator.rs:LL:COL\n+   = help: the trait `Sized` is not implemented for `str`\n+note: required by a bound in `GeneratorState`\n+  --> $SRC_DIR/core/src/ops/generator.rs:LL:COL\n    |\n LL | pub enum GeneratorState<Y, R> {\n-   |                         - required by this bound in `GeneratorState`\n-   |\n-   = help: the trait `Sized` is not implemented for `str`\n+   |                         ^ required by this bound in `GeneratorState`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "7ae128d072dd9bca3120fc507baa34978c3f7a6d", "filename": "src/test/ui/generator/static-not-unpin.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fgenerator%2Fstatic-not-unpin.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fgenerator%2Fstatic-not-unpin.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fstatic-not-unpin.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,13 +1,15 @@\n error[E0277]: `[static generator@$DIR/static-not-unpin.rs:11:25: 13:6]` cannot be unpinned\n   --> $DIR/static-not-unpin.rs:14:18\n    |\n-LL | fn assert_unpin<T: Unpin>(_: T) {\n-   |                    ----- required by this bound in `assert_unpin`\n-...\n LL |     assert_unpin(generator);\n    |                  ^^^^^^^^^ the trait `Unpin` is not implemented for `[static generator@$DIR/static-not-unpin.rs:11:25: 13:6]`\n    |\n    = note: consider using `Box::pin`\n+note: required by a bound in `assert_unpin`\n+  --> $DIR/static-not-unpin.rs:7:20\n+   |\n+LL | fn assert_unpin<T: Unpin>(_: T) {\n+   |                    ^^^^^ required by this bound in `assert_unpin`\n \n error: aborting due to previous error\n "}, {"sha": "d6716cac06e1fe656aabaa88206d6d38f0064e45", "filename": "src/test/ui/generic-associated-types/cross-crate-bounds.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcross-crate-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcross-crate-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcross-crate-bounds.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -4,10 +4,11 @@ error[E0277]: the trait bound `(): AsRef<()>` is not satisfied\n LL |     type Bar = ();\n    |     ^^^^^^^^^^^^^^ the trait `AsRef<()>` is not implemented for `()`\n    |\n-  ::: $DIR/auxiliary/foo_defn.rs:6:15\n+note: required by a bound in `foo_defn::Foo::Bar`\n+  --> $DIR/auxiliary/foo_defn.rs:6:15\n    |\n LL |     type Bar: AsRef<()>;\n-   |               --------- required by this bound in `foo_defn::Foo::Bar`\n+   |               ^^^^^^^^^ required by this bound in `foo_defn::Foo::Bar`\n \n error: aborting due to previous error\n "}, {"sha": "1d3aeaefca0e90abbb03381f6bcdccfec0d1c4f5", "filename": "src/test/ui/generic-associated-types/issue-68641-check-gat-bounds.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68641-check-gat-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68641-check-gat-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68641-check-gat-bounds.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,12 +1,14 @@\n error[E0277]: the trait bound `T: Copy` is not satisfied\n   --> $DIR/issue-68641-check-gat-bounds.rs:14:5\n    |\n-LL |     type Item<'a>: Copy;\n-   |                    ---- required by this bound in `UnsafeCopy::Item`\n-...\n LL |     type Item<'a> = T;\n    |     ^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `T`\n    |\n+note: required by a bound in `UnsafeCopy::Item`\n+  --> $DIR/issue-68641-check-gat-bounds.rs:6:20\n+   |\n+LL |     type Item<'a>: Copy;\n+   |                    ^^^^ required by this bound in `UnsafeCopy::Item`\n help: consider restricting type parameter `T`\n    |\n LL | impl<T: std::marker::Copy> UnsafeCopy for T {"}, {"sha": "574b81556e70255ef52955ca46b243be70e3f493", "filename": "src/test/ui/generic-associated-types/issue-68642-broken-llvm-ir.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68642-broken-llvm-ir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68642-broken-llvm-ir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68642-broken-llvm-ir.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,13 +1,15 @@\n error[E0277]: expected a `Fn<()>` closure, found `T`\n   --> $DIR/issue-68642-broken-llvm-ir.rs:14:5\n    |\n-LL |     type F<'a>: Fn() -> u32;\n-   |                 ----------- required by this bound in `Fun::F`\n-...\n LL |     type F<'a> = Self;\n    |     ^^^^^^^^^^^^^^^^^^ expected an `Fn<()>` closure, found `T`\n    |\n    = note: wrap the `T` in a closure with no arguments: `|| { /* code */ }`\n+note: required by a bound in `Fun::F`\n+  --> $DIR/issue-68642-broken-llvm-ir.rs:6:17\n+   |\n+LL |     type F<'a>: Fn() -> u32;\n+   |                 ^^^^^^^^^^^ required by this bound in `Fun::F`\n help: consider restricting type parameter `T`\n    |\n LL | impl<T: std::ops::Fn<()>> Fun for T {"}, {"sha": "9c4cbc5eb56fe402dcc710c5d01929eecf66ad54", "filename": "src/test/ui/generic-associated-types/issue-68643-broken-mir.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68643-broken-mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68643-broken-mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68643-broken-mir.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,13 +1,15 @@\n error[E0277]: expected a `Fn<()>` closure, found `T`\n   --> $DIR/issue-68643-broken-mir.rs:14:5\n    |\n-LL |     type F<'a>: Fn() -> u32;\n-   |                 ----------- required by this bound in `Fun::F`\n-...\n LL |     type F<'a> = Self;\n    |     ^^^^^^^^^^^^^^^^^^ expected an `Fn<()>` closure, found `T`\n    |\n    = note: wrap the `T` in a closure with no arguments: `|| { /* code */ }`\n+note: required by a bound in `Fun::F`\n+  --> $DIR/issue-68643-broken-mir.rs:6:17\n+   |\n+LL |     type F<'a>: Fn() -> u32;\n+   |                 ^^^^^^^^^^^ required by this bound in `Fun::F`\n help: consider restricting type parameter `T`\n    |\n LL | impl<T: std::ops::Fn<()>> Fun for T {"}, {"sha": "0df5c0f8c7913d61307ee114324f7e16f6140f5c", "filename": "src/test/ui/generic-associated-types/issue-68644-codegen-selection.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68644-codegen-selection.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68644-codegen-selection.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68644-codegen-selection.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,13 +1,15 @@\n error[E0277]: expected a `Fn<()>` closure, found `T`\n   --> $DIR/issue-68644-codegen-selection.rs:14:5\n    |\n-LL |     type F<'a>: Fn() -> u32;\n-   |                 ----------- required by this bound in `Fun::F`\n-...\n LL |     type F<'a> = Self;\n    |     ^^^^^^^^^^^^^^^^^^ expected an `Fn<()>` closure, found `T`\n    |\n    = note: wrap the `T` in a closure with no arguments: `|| { /* code */ }`\n+note: required by a bound in `Fun::F`\n+  --> $DIR/issue-68644-codegen-selection.rs:6:17\n+   |\n+LL |     type F<'a>: Fn() -> u32;\n+   |                 ^^^^^^^^^^^ required by this bound in `Fun::F`\n help: consider restricting type parameter `T`\n    |\n LL | impl<T: std::ops::Fn<()>> Fun for T {"}, {"sha": "35a4350804e8b59e714d7970f0486d41e560b34a", "filename": "src/test/ui/generic-associated-types/issue-68645-codegen-fulfillment.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68645-codegen-fulfillment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68645-codegen-fulfillment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68645-codegen-fulfillment.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,13 +1,15 @@\n error[E0277]: expected a `Fn<()>` closure, found `T`\n   --> $DIR/issue-68645-codegen-fulfillment.rs:14:5\n    |\n-LL |     type F<'a>: Fn() -> u32;\n-   |                 ----------- required by this bound in `Fun::F`\n-...\n LL |     type F<'a> = Self;\n    |     ^^^^^^^^^^^^^^^^^^ expected an `Fn<()>` closure, found `T`\n    |\n    = note: wrap the `T` in a closure with no arguments: `|| { /* code */ }`\n+note: required by a bound in `Fun::F`\n+  --> $DIR/issue-68645-codegen-fulfillment.rs:6:17\n+   |\n+LL |     type F<'a>: Fn() -> u32;\n+   |                 ^^^^^^^^^^^ required by this bound in `Fun::F`\n help: consider restricting type parameter `T`\n    |\n LL | impl<T: std::ops::Fn<()>> Fun for T {"}, {"sha": "d69ac8e580a9f308d3305022e8a57734160a20ff", "filename": "src/test/ui/generic-associated-types/issue-68656-unsized-values.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68656-unsized-values.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68656-unsized-values.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68656-unsized-values.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,16 +1,18 @@\n error[E0271]: type mismatch resolving `<T as Deref>::Target == T`\n   --> $DIR/issue-68656-unsized-values.rs:15:5\n    |\n-LL |     type Item<'a>: std::ops::Deref<Target = T>;\n-   |                                    ---------- required by this bound in `UnsafeCopy::Item`\n-...\n LL | impl<T: Copy + std::ops::Deref> UnsafeCopy<T> for T {\n    |      - this type parameter\n LL |     type Item<'a> = T;\n    |     ^^^^^^^^^^^^^^^^^^ expected type parameter `T`, found associated type\n    |\n    = note: expected type parameter `T`\n              found associated type `<T as Deref>::Target`\n+note: required by a bound in `UnsafeCopy::Item`\n+  --> $DIR/issue-68656-unsized-values.rs:6:36\n+   |\n+LL |     type Item<'a>: std::ops::Deref<Target = T>;\n+   |                                    ^^^^^^^^^^ required by this bound in `UnsafeCopy::Item`\n help: consider further restricting this bound\n    |\n LL | impl<T: Copy + std::ops::Deref + Deref<Target = T>> UnsafeCopy<T> for T {"}, {"sha": "86e9450904ba37e73480c9fb429865ed9b58e96a", "filename": "src/test/ui/generic-associated-types/issue-74684-2.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74684-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74684-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74684-2.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,11 +1,14 @@\n error[E0271]: type mismatch resolving `<{integer} as Fun>::F<'_> == [u8]`\n   --> $DIR/issue-74684-2.rs:23:5\n    |\n-LL | fn bug<'a, T: ?Sized + Fun<F<'a> = [u8]>>(t: Box<T>) -> &'static T::F<'a> {\n-   |                            ------------ required by this bound in `bug`\n-...\n LL |     bug(Box::new(x));\n    |     ^^^ expected slice `[u8]`, found `i32`\n+   |\n+note: required by a bound in `bug`\n+  --> $DIR/issue-74684-2.rs:13:28\n+   |\n+LL | fn bug<'a, T: ?Sized + Fun<F<'a> = [u8]>>(t: Box<T>) -> &'static T::F<'a> {\n+   |                            ^^^^^^^^^^^^ required by this bound in `bug`\n \n error: aborting due to previous error\n "}, {"sha": "49ae87cbfe9dce4c73f81b0149d4bb6c6eabaa53", "filename": "src/test/ui/generic-associated-types/issue-74816.stderr", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74816.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74816.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74816.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -2,11 +2,13 @@ error[E0277]: the trait bound `Self: Trait1` is not satisfied\n   --> $DIR/issue-74816.rs:9:5\n    |\n LL |     type Associated: Trait1 = Self;\n-   |     ^^^^^^^^^^^^^^^^^------^^^^^^^^\n-   |     |                |\n-   |     |                required by this bound in `Trait2::Associated`\n-   |     the trait `Trait1` is not implemented for `Self`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Trait1` is not implemented for `Self`\n    |\n+note: required by a bound in `Trait2::Associated`\n+  --> $DIR/issue-74816.rs:9:22\n+   |\n+LL |     type Associated: Trait1 = Self;\n+   |                      ^^^^^^ required by this bound in `Trait2::Associated`\n help: consider further restricting `Self`\n    |\n LL | trait Trait2: Trait1 {\n@@ -16,11 +18,13 @@ error[E0277]: the size for values of type `Self` cannot be known at compilation\n   --> $DIR/issue-74816.rs:9:5\n    |\n LL |     type Associated: Trait1 = Self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |     |\n-   |     doesn't have a size known at compile-time\n-   |     required by this bound in `Trait2::Associated`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n+note: required by a bound in `Trait2::Associated`\n+  --> $DIR/issue-74816.rs:9:5\n+   |\n+LL |     type Associated: Trait1 = Self;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Trait2::Associated`\n help: consider further restricting `Self`\n    |\n LL | trait Trait2: Sized {"}, {"sha": "bd51e5a447b1b1d781f1b6541a0ebe7a3232bcd6", "filename": "src/test/ui/generic-associated-types/issue-74824.stderr", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74824.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74824.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74824.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -2,21 +2,26 @@ error[E0277]: the trait bound `Box<T>: Copy` is not satisfied\n   --> $DIR/issue-74824.rs:7:5\n    |\n LL |     type Copy<T>: Copy = Box<T>;\n-   |     ^^^^^^^^^^^^^^----^^^^^^^^^^\n-   |     |             |\n-   |     |             required by this bound in `UnsafeCopy::Copy`\n-   |     the trait `Copy` is not implemented for `Box<T>`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `Box<T>`\n+   |\n+note: required by a bound in `UnsafeCopy::Copy`\n+  --> $DIR/issue-74824.rs:7:19\n+   |\n+LL |     type Copy<T>: Copy = Box<T>;\n+   |                   ^^^^ required by this bound in `UnsafeCopy::Copy`\n \n error[E0277]: the trait bound `T: Clone` is not satisfied\n   --> $DIR/issue-74824.rs:7:5\n    |\n LL |     type Copy<T>: Copy = Box<T>;\n-   |     ^^^^^^^^^^^^^^----^^^^^^^^^^\n-   |     |             |\n-   |     |             required by this bound in `UnsafeCopy::Copy`\n-   |     the trait `Clone` is not implemented for `T`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `T`\n    |\n    = note: required because of the requirements on the impl of `Clone` for `Box<T>`\n+note: required by a bound in `UnsafeCopy::Copy`\n+  --> $DIR/issue-74824.rs:7:19\n+   |\n+LL |     type Copy<T>: Copy = Box<T>;\n+   |                   ^^^^ required by this bound in `UnsafeCopy::Copy`\n help: consider restricting type parameter `T`\n    |\n LL |     type Copy<T: std::clone::Clone>: Copy = Box<T>;"}, {"sha": "5e7e72ca562dd62067f807634203787c995bd355", "filename": "src/test/ui/generic-associated-types/projection-bound-cycle-generic.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-bound-cycle-generic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-bound-cycle-generic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-bound-cycle-generic.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,11 +1,14 @@\n error[E0275]: overflow evaluating the requirement `<T as Foo>::Item: Sized`\n   --> $DIR/projection-bound-cycle-generic.rs:44:18\n    |\n-LL |     type Item: Sized where <Self as Foo>::Item: Sized;\n-   |                                                 ----- required by this bound in `Foo::Item`\n-...\n LL |     type Assoc = OnlySized<<T as Foo>::Item>;\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: required by a bound in `Foo::Item`\n+  --> $DIR/projection-bound-cycle-generic.rs:11:49\n+   |\n+LL |     type Item: Sized where <Self as Foo>::Item: Sized;\n+   |                                                 ^^^^^ required by this bound in `Foo::Item`\n \n error: aborting due to previous error\n "}, {"sha": "1153bf53ba43ed187298df8f28c756c1da6a633a", "filename": "src/test/ui/generic-associated-types/projection-bound-cycle.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-bound-cycle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-bound-cycle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-bound-cycle.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,11 +1,14 @@\n error[E0275]: overflow evaluating the requirement `<T as Foo>::Item: Sized`\n   --> $DIR/projection-bound-cycle.rs:46:18\n    |\n-LL |     type Item: Sized where <Self as Foo>::Item: Sized;\n-   |                                                 ----- required by this bound in `Foo::Item`\n-...\n LL |     type Assoc = OnlySized<<T as Foo>::Item>;\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: required by a bound in `Foo::Item`\n+  --> $DIR/projection-bound-cycle.rs:13:49\n+   |\n+LL |     type Item: Sized where <Self as Foo>::Item: Sized;\n+   |                                                 ^^^^^ required by this bound in `Foo::Item`\n \n error: aborting due to previous error\n "}, {"sha": "2c397d80b013eef1ba385258632c4522aaa3c73e", "filename": "src/test/ui/generics/issue-61631-default-type-param-can-reference-self-in-trait.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fgenerics%2Fissue-61631-default-type-param-can-reference-self-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fgenerics%2Fissue-61631-default-type-param-can-reference-self-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fissue-61631-default-type-param-can-reference-self-in-trait.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,13 +1,15 @@\n error[E0277]: the size for values of type `[()]` cannot be known at compilation time\n   --> $DIR/issue-61631-default-type-param-can-reference-self-in-trait.rs:19:6\n    |\n-LL | trait Tsized<P: Sized = [Self]> {}\n-   |              - required by this bound in `Tsized`\n-LL | \n LL | impl Tsized for () {}\n    |      ^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `[()]`\n+note: required by a bound in `Tsized`\n+  --> $DIR/issue-61631-default-type-param-can-reference-self-in-trait.rs:17:14\n+   |\n+LL | trait Tsized<P: Sized = [Self]> {}\n+   |              ^ required by this bound in `Tsized`\n \n error: aborting due to previous error\n "}, {"sha": "d8267712c2b8a9c11b7a47b05419c2292d2f428e", "filename": "src/test/ui/hrtb/hrtb-higher-ranker-supertraits-transitive.stderr", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits-transitive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits-transitive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits-transitive.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,14 +1,16 @@\n error[E0277]: the trait bound `for<'ccx> B: Bar<'ccx>` is not satisfied\n   --> $DIR/hrtb-higher-ranker-supertraits-transitive.rs:47:26\n    |\n-LL | fn want_bar_for_any_ccx<B>(b: &B)\n-   |    -------------------- required by a bound in this\n-LL |     where B : for<'ccx> Bar<'ccx>\n-   |               ------------------- required by this bound in `want_bar_for_any_ccx`\n-...\n LL |     want_bar_for_any_ccx(b);\n    |                          ^ the trait `for<'ccx> Bar<'ccx>` is not implemented for `B`\n    |\n+note: required by a bound in `want_bar_for_any_ccx`\n+  --> $DIR/hrtb-higher-ranker-supertraits-transitive.rs:32:15\n+   |\n+LL | fn want_bar_for_any_ccx<B>(b: &B)\n+   |    -------------------- required by a bound in this\n+LL |     where B : for<'ccx> Bar<'ccx>\n+   |               ^^^^^^^^^^^^^^^^^^^ required by this bound in `want_bar_for_any_ccx`\n help: consider further restricting this bound\n    |\n LL |     where B : Qux + for<'ccx> Bar<'ccx>"}, {"sha": "a510c05055c1481ae732838cd799181a7b31f21d", "filename": "src/test/ui/hrtb/hrtb-higher-ranker-supertraits.stderr", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-higher-ranker-supertraits.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -3,12 +3,14 @@ error[E0277]: the trait bound `for<'tcx> F: Foo<'tcx>` is not satisfied\n    |\n LL |     want_foo_for_any_tcx(f);\n    |                          ^ the trait `for<'tcx> Foo<'tcx>` is not implemented for `F`\n-...\n+   |\n+note: required by a bound in `want_foo_for_any_tcx`\n+  --> $DIR/hrtb-higher-ranker-supertraits.rs:22:15\n+   |\n LL | fn want_foo_for_any_tcx<F>(f: &F)\n    |    -------------------- required by a bound in this\n LL |     where F : for<'tcx> Foo<'tcx>\n-   |               ------------------- required by this bound in `want_foo_for_any_tcx`\n-   |\n+   |               ^^^^^^^^^^^^^^^^^^^ required by this bound in `want_foo_for_any_tcx`\n help: consider further restricting this bound\n    |\n LL |     where F : Foo<'x> + for<'tcx> Foo<'tcx>\n@@ -19,12 +21,14 @@ error[E0277]: the trait bound `for<'ccx> B: Bar<'ccx>` is not satisfied\n    |\n LL |     want_bar_for_any_ccx(b);\n    |                          ^ the trait `for<'ccx> Bar<'ccx>` is not implemented for `B`\n-...\n+   |\n+note: required by a bound in `want_bar_for_any_ccx`\n+  --> $DIR/hrtb-higher-ranker-supertraits.rs:39:15\n+   |\n LL | fn want_bar_for_any_ccx<B>(b: &B)\n    |    -------------------- required by a bound in this\n LL |     where B : for<'ccx> Bar<'ccx>\n-   |               ------------------- required by this bound in `want_bar_for_any_ccx`\n-   |\n+   |               ^^^^^^^^^^^^^^^^^^^ required by this bound in `want_bar_for_any_ccx`\n help: consider further restricting this bound\n    |\n LL |     where B : Bar<'x> + for<'ccx> Bar<'ccx>"}, {"sha": "5a8e503601468992260526c53d546e1fbb2bb51e", "filename": "src/test/ui/impl-trait/auto-trait-leak2.stderr", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak2.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -4,22 +4,21 @@ error[E0277]: `Rc<Cell<i32>>` cannot be sent between threads safely\n LL | fn before() -> impl Fn(i32) {\n    |                ------------ within this `impl Fn<(i32,)>`\n ...\n-LL | fn send<T: Send>(_: T) {}\n-   |            ---- required by this bound in `send`\n-...\n LL |     send(before());\n    |     ^^^^ `Rc<Cell<i32>>` cannot be sent between threads safely\n    |\n    = help: within `impl Fn<(i32,)>`, the trait `Send` is not implemented for `Rc<Cell<i32>>`\n    = note: required because it appears within the type `[closure@$DIR/auto-trait-leak2.rs:7:5: 7:22]`\n    = note: required because it appears within the type `impl Fn<(i32,)>`\n+note: required by a bound in `send`\n+  --> $DIR/auto-trait-leak2.rs:10:12\n+   |\n+LL | fn send<T: Send>(_: T) {}\n+   |            ^^^^ required by this bound in `send`\n \n error[E0277]: `Rc<Cell<i32>>` cannot be sent between threads safely\n   --> $DIR/auto-trait-leak2.rs:16:5\n    |\n-LL | fn send<T: Send>(_: T) {}\n-   |            ---- required by this bound in `send`\n-...\n LL |     send(after());\n    |     ^^^^ `Rc<Cell<i32>>` cannot be sent between threads safely\n ...\n@@ -29,6 +28,11 @@ LL | fn after() -> impl Fn(i32) {\n    = help: within `impl Fn<(i32,)>`, the trait `Send` is not implemented for `Rc<Cell<i32>>`\n    = note: required because it appears within the type `[closure@$DIR/auto-trait-leak2.rs:24:5: 24:22]`\n    = note: required because it appears within the type `impl Fn<(i32,)>`\n+note: required by a bound in `send`\n+  --> $DIR/auto-trait-leak2.rs:10:12\n+   |\n+LL | fn send<T: Send>(_: T) {}\n+   |            ^^^^ required by this bound in `send`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "8d6f50748cbeb62c3740a071777fcfe26f00379f", "filename": "src/test/ui/inference/issue-86162-1.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Finference%2Fissue-86162-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Finference%2Fissue-86162-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fissue-86162-1.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,13 +1,15 @@\n error[E0283]: type annotations needed\n   --> $DIR/issue-86162-1.rs:7:5\n    |\n-LL | fn foo(x: impl Clone) {}\n-   |                ----- required by this bound in `foo`\n-...\n LL |     foo(gen()); //<- Do not suggest `foo::<impl Clone>()`!\n    |     ^^^ cannot infer type for type parameter `impl Clone` declared on the function `foo`\n    |\n    = note: cannot satisfy `_: Clone`\n+note: required by a bound in `foo`\n+  --> $DIR/issue-86162-1.rs:3:16\n+   |\n+LL | fn foo(x: impl Clone) {}\n+   |                ^^^^^ required by this bound in `foo`\n \n error: aborting due to previous error\n "}, {"sha": "5f80c595628e45198c492b67c1dca084ad6f81c2", "filename": "src/test/ui/inference/issue-86162-2.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Finference%2Fissue-86162-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Finference%2Fissue-86162-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fissue-86162-2.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,13 +1,15 @@\n error[E0283]: type annotations needed\n   --> $DIR/issue-86162-2.rs:12:5\n    |\n-LL |     fn bar(x: impl Clone) {}\n-   |                    ----- required by this bound in `Foo::bar`\n-...\n LL |     Foo::bar(gen()); //<- Do not suggest `Foo::bar::<impl Clone>()`!\n    |     ^^^^^^^^ cannot infer type for type parameter `impl Clone` declared on the associated function `bar`\n    |\n    = note: cannot satisfy `_: Clone`\n+note: required by a bound in `Foo::bar`\n+  --> $DIR/issue-86162-2.rs:8:20\n+   |\n+LL |     fn bar(x: impl Clone) {}\n+   |                    ^^^^^ required by this bound in `Foo::bar`\n \n error: aborting due to previous error\n "}, {"sha": "cb22d5adb717d95758e1a04eb7350f2dca1a2f21", "filename": "src/test/ui/interior-mutability/interior-mutability.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Finterior-mutability%2Finterior-mutability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Finterior-mutability%2Finterior-mutability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finterior-mutability%2Finterior-mutability.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -4,15 +4,15 @@ error[E0277]: the type `UnsafeCell<i32>` may contain interior mutability and a r\n LL |     catch_unwind(|| { x.set(23); });\n    |     ^^^^^^^^^^^^ `UnsafeCell<i32>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n    |\n-  ::: $SRC_DIR/std/src/panic.rs:LL:COL\n-   |\n-LL | pub fn catch_unwind<F: FnOnce() -> R + UnwindSafe, R>(f: F) -> Result<R> {\n-   |                                        ---------- required by this bound in `catch_unwind`\n-   |\n    = help: within `Cell<i32>`, the trait `RefUnwindSafe` is not implemented for `UnsafeCell<i32>`\n    = note: required because it appears within the type `Cell<i32>`\n    = note: required because of the requirements on the impl of `UnwindSafe` for `&Cell<i32>`\n    = note: required because it appears within the type `[closure@$DIR/interior-mutability.rs:5:18: 5:35]`\n+note: required by a bound in `catch_unwind`\n+  --> $SRC_DIR/std/src/panic.rs:LL:COL\n+   |\n+LL | pub fn catch_unwind<F: FnOnce() -> R + UnwindSafe, R>(f: F) -> Result<R> {\n+   |                                        ^^^^^^^^^^ required by this bound in `catch_unwind`\n \n error: aborting due to previous error\n "}, {"sha": "053a93e6cd8c7ea4369fade5611f02699c446721", "filename": "src/test/ui/issues/issue-10412.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fissues%2Fissue-10412.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fissues%2Fissue-10412.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-10412.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -51,13 +51,15 @@ LL | impl<'self> Serializable<str> for &'self str {\n error[E0277]: the size for values of type `str` cannot be known at compilation time\n   --> $DIR/issue-10412.rs:6:13\n    |\n-LL | trait Serializable<'self, T> {\n-   |                           - required by this bound in `Serializable`\n-...\n LL | impl<'self> Serializable<str> for &'self str {\n    |             ^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `str`\n+note: required by a bound in `Serializable`\n+  --> $DIR/issue-10412.rs:1:27\n+   |\n+LL | trait Serializable<'self, T> {\n+   |                           ^ required by this bound in `Serializable`\n help: consider relaxing the implicit `Sized` restriction\n    |\n LL | trait Serializable<'self, T: ?Sized> {"}, {"sha": "b702196abdf94b2f5ebc0d77ac812b204a22fa92", "filename": "src/test/ui/issues/issue-18611.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fissues%2Fissue-18611.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fissues%2Fissue-18611.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18611.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -3,9 +3,12 @@ error[E0277]: the trait bound `isize: HasState` is not satisfied\n    |\n LL | fn add_state(op: <isize as HasState>::State) {\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `HasState` is not implemented for `isize`\n-...\n+   |\n+note: required by a bound in `HasState`\n+  --> $DIR/issue-18611.rs:5:1\n+   |\n LL | trait HasState {\n-   | -------------- required by this bound in `HasState`\n+   | ^^^^^^^^^^^^^^ required by this bound in `HasState`\n \n error: aborting due to previous error\n "}, {"sha": "d7dbb8299b9efa4f8c0cc2ab206de26924ab1e3e", "filename": "src/test/ui/issues/issue-18919.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fissues%2Fissue-18919.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fissues%2Fissue-18919.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18919.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -3,11 +3,13 @@ error[E0277]: the size for values of type `dyn for<'r> Fn(&'r isize) -> isize` c\n    |\n LL | fn ho_func(f: Option<FuncType>) {\n    |               ^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n-...\n-LL | enum Option<T> {\n-   |             - required by this bound in `Option`\n    |\n    = help: the trait `Sized` is not implemented for `dyn for<'r> Fn(&'r isize) -> isize`\n+note: required by a bound in `Option`\n+  --> $DIR/issue-18919.rs:7:13\n+   |\n+LL | enum Option<T> {\n+   |             ^ required by this bound in `Option`\n help: you could relax the implicit `Sized` bound on `T` if it were used through indirection like `&T` or `Box<T>`\n   --> $DIR/issue-18919.rs:7:13\n    |"}, {"sha": "a546924253c2a941bf97587ec1d62c09cab1db8f", "filename": "src/test/ui/issues/issue-1920-1.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fissues%2Fissue-1920-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fissues%2Fissue-1920-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-1920-1.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,11 +1,14 @@\n error[E0277]: the trait bound `S: Clone` is not satisfied\n   --> $DIR/issue-1920-1.rs:12:20\n    |\n-LL | fn assert_clone<T>() where T : Clone { }\n-   |                                ----- required by this bound in `assert_clone`\n-...\n LL |     assert_clone::<foo::issue_1920::S>();\n    |                    ^^^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `S`\n+   |\n+note: required by a bound in `assert_clone`\n+  --> $DIR/issue-1920-1.rs:9:32\n+   |\n+LL | fn assert_clone<T>() where T : Clone { }\n+   |                                ^^^^^ required by this bound in `assert_clone`\n \n error: aborting due to previous error\n "}, {"sha": "1083b011252e93df2c1b0ca8e9818028800c0ff1", "filename": "src/test/ui/issues/issue-1920-2.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fissues%2Fissue-1920-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fissues%2Fissue-1920-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-1920-2.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,11 +1,14 @@\n error[E0277]: the trait bound `S: Clone` is not satisfied\n   --> $DIR/issue-1920-2.rs:10:20\n    |\n-LL | fn assert_clone<T>() where T : Clone { }\n-   |                                ----- required by this bound in `assert_clone`\n-...\n LL |     assert_clone::<bar::S>();\n    |                    ^^^^^^ the trait `Clone` is not implemented for `S`\n+   |\n+note: required by a bound in `assert_clone`\n+  --> $DIR/issue-1920-2.rs:7:32\n+   |\n+LL | fn assert_clone<T>() where T : Clone { }\n+   |                                ^^^^^ required by this bound in `assert_clone`\n \n error: aborting due to previous error\n "}, {"sha": "3f0787c887570c9bdb35a71e824072aaf90b6b2c", "filename": "src/test/ui/issues/issue-1920-3.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fissues%2Fissue-1920-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fissues%2Fissue-1920-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-1920-3.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,11 +1,14 @@\n error[E0277]: the trait bound `S: Clone` is not satisfied\n   --> $DIR/issue-1920-3.rs:14:20\n    |\n-LL | fn assert_clone<T>() where T : Clone { }\n-   |                                ----- required by this bound in `assert_clone`\n-...\n LL |     assert_clone::<foo::issue_1920::S>();\n    |                    ^^^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `S`\n+   |\n+note: required by a bound in `assert_clone`\n+  --> $DIR/issue-1920-3.rs:11:32\n+   |\n+LL | fn assert_clone<T>() where T : Clone { }\n+   |                                ^^^^^ required by this bound in `assert_clone`\n \n error: aborting due to previous error\n "}, {"sha": "572c8ee33ce3c6cb50acc906249626117774e674", "filename": "src/test/ui/issues/issue-20413.stderr", "status": "modified", "additions": 30, "deletions": 18, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fissues%2Fissue-20413.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fissues%2Fissue-20413.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20413.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -10,9 +10,6 @@ LL | struct NoData<T>;\n error[E0275]: overflow evaluating the requirement `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>: Foo`\n   --> $DIR/issue-20413.rs:8:36\n    |\n-LL | trait Foo {\n-   | --------- required by this bound in `Foo`\n-...\n LL | impl<T> Foo for T where NoData<T>: Foo {\n    |                                    ^^^\n    |\n@@ -24,13 +21,15 @@ LL | impl<T> Foo for T where NoData<T>: Foo {\n    |         ^^^     ^\n    = note: 127 redundant requirements hidden\n    = note: required because of the requirements on the impl of `Foo` for `NoData<T>`\n+note: required by a bound in `Foo`\n+  --> $DIR/issue-20413.rs:1:1\n+   |\n+LL | trait Foo {\n+   | ^^^^^^^^^ required by this bound in `Foo`\n \n error[E0275]: overflow evaluating the requirement `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>: Foo`\n   --> $DIR/issue-20413.rs:8:36\n    |\n-LL | trait Foo {\n-   | --------- required by this bound in `Foo`\n-...\n LL | impl<T> Foo for T where NoData<T>: Foo {\n    |                                    ^^^\n    |\n@@ -42,13 +41,15 @@ LL | impl<T> Foo for T where NoData<T>: Foo {\n    |         ^^^     ^\n    = note: 127 redundant requirements hidden\n    = note: required because of the requirements on the impl of `Foo` for `NoData<T>`\n+note: required by a bound in `Foo`\n+  --> $DIR/issue-20413.rs:1:1\n+   |\n+LL | trait Foo {\n+   | ^^^^^^^^^ required by this bound in `Foo`\n \n error[E0275]: overflow evaluating the requirement `EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>: Baz`\n   --> $DIR/issue-20413.rs:28:42\n    |\n-LL | trait Baz {\n-   | --------- required by this bound in `Baz`\n-...\n LL | impl<T> Bar for T where EvenLessData<T>: Baz {\n    |                                          ^^^\n    |\n@@ -65,13 +66,15 @@ LL | impl<T> Baz for T where AlmostNoData<T>: Bar {\n    |         ^^^     ^\n    = note: 126 redundant requirements hidden\n    = note: required because of the requirements on the impl of `Baz` for `EvenLessData<T>`\n+note: required by a bound in `Baz`\n+  --> $DIR/issue-20413.rs:20:1\n+   |\n+LL | trait Baz {\n+   | ^^^^^^^^^ required by this bound in `Baz`\n \n error[E0275]: overflow evaluating the requirement `EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>: Baz`\n   --> $DIR/issue-20413.rs:28:42\n    |\n-LL | trait Baz {\n-   | --------- required by this bound in `Baz`\n-...\n LL | impl<T> Bar for T where EvenLessData<T>: Baz {\n    |                                          ^^^\n    |\n@@ -88,13 +91,15 @@ LL | impl<T> Baz for T where AlmostNoData<T>: Bar {\n    |         ^^^     ^\n    = note: 126 redundant requirements hidden\n    = note: required because of the requirements on the impl of `Baz` for `EvenLessData<T>`\n+note: required by a bound in `Baz`\n+  --> $DIR/issue-20413.rs:20:1\n+   |\n+LL | trait Baz {\n+   | ^^^^^^^^^ required by this bound in `Baz`\n \n error[E0275]: overflow evaluating the requirement `AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>: Bar`\n   --> $DIR/issue-20413.rs:36:42\n    |\n-LL | trait Bar {\n-   | --------- required by this bound in `Bar`\n-...\n LL | impl<T> Baz for T where AlmostNoData<T>: Bar {\n    |                                          ^^^\n    |\n@@ -111,13 +116,15 @@ LL | impl<T> Bar for T where EvenLessData<T>: Baz {\n    |         ^^^     ^\n    = note: 126 redundant requirements hidden\n    = note: required because of the requirements on the impl of `Bar` for `AlmostNoData<T>`\n+note: required by a bound in `Bar`\n+  --> $DIR/issue-20413.rs:16:1\n+   |\n+LL | trait Bar {\n+   | ^^^^^^^^^ required by this bound in `Bar`\n \n error[E0275]: overflow evaluating the requirement `AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>: Bar`\n   --> $DIR/issue-20413.rs:36:42\n    |\n-LL | trait Bar {\n-   | --------- required by this bound in `Bar`\n-...\n LL | impl<T> Baz for T where AlmostNoData<T>: Bar {\n    |                                          ^^^\n    |\n@@ -134,6 +141,11 @@ LL | impl<T> Bar for T where EvenLessData<T>: Baz {\n    |         ^^^     ^\n    = note: 126 redundant requirements hidden\n    = note: required because of the requirements on the impl of `Bar` for `AlmostNoData<T>`\n+note: required by a bound in `Bar`\n+  --> $DIR/issue-20413.rs:16:1\n+   |\n+LL | trait Bar {\n+   | ^^^^^^^^^ required by this bound in `Bar`\n \n error: aborting due to 7 previous errors\n "}, {"sha": "9d3bb8b924d6161c3d2e781ef459eee6c0ab7f27", "filename": "src/test/ui/issues/issue-20433.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fissues%2Fissue-20433.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fissues%2Fissue-20433.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20433.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -4,12 +4,12 @@ error[E0277]: the size for values of type `[i32]` cannot be known at compilation\n LL |     fn iceman(c: Vec<[i32]>) {}\n    |                  ^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n-  ::: $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+   = help: the trait `Sized` is not implemented for `[i32]`\n+note: required by a bound in `Vec`\n+  --> $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n    |\n LL | pub struct Vec<T, #[unstable(feature = \"allocator_api\", issue = \"32838\")] A: Allocator = Global> {\n-   |                - required by this bound in `Vec`\n-   |\n-   = help: the trait `Sized` is not implemented for `[i32]`\n+   |                ^ required by this bound in `Vec`\n \n error: aborting due to previous error\n "}, {"sha": "92742b50619e011746406ff19c536dac0f72f97e", "filename": "src/test/ui/issues/issue-21160.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fissues%2Fissue-21160.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fissues%2Fissue-21160.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21160.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -6,11 +6,11 @@ LL | #[derive(Hash)]\n LL | struct Foo(Bar);\n    |            ^^^ the trait `Hash` is not implemented for `Bar`\n    |\n-  ::: $SRC_DIR/core/src/hash/mod.rs:LL:COL\n+note: required by a bound in `std::hash::Hash::hash`\n+  --> $SRC_DIR/core/src/hash/mod.rs:LL:COL\n    |\n LL |     fn hash<H: Hasher>(&self, state: &mut H);\n-   |             - required by this bound in `std::hash::Hash::hash`\n-   |\n+   |             ^ required by this bound in `std::hash::Hash::hash`\n    = note: this error originates in the derive macro `Hash` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "b8b38c0a723e94c131778d17de5e2b47cd20d476", "filename": "src/test/ui/issues/issue-21763.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fissues%2Fissue-21763.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fissues%2Fissue-21763.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21763.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,9 +1,6 @@\n error[E0277]: `Rc<()>` cannot be sent between threads safely\n   --> $DIR/issue-21763.rs:9:5\n    |\n-LL | fn foo<T: Send>() {}\n-   |           ---- required by this bound in `foo`\n-...\n LL |     foo::<HashMap<Rc<()>, Rc<()>>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `Rc<()>` cannot be sent between threads safely\n    |\n@@ -12,6 +9,11 @@ LL |     foo::<HashMap<Rc<()>, Rc<()>>>();\n    = note: required because of the requirements on the impl of `Send` for `hashbrown::raw::RawTable<(Rc<()>, Rc<()>)>`\n    = note: required because it appears within the type `hashbrown::map::HashMap<Rc<()>, Rc<()>, RandomState>`\n    = note: required because it appears within the type `HashMap<Rc<()>, Rc<()>>`\n+note: required by a bound in `foo`\n+  --> $DIR/issue-21763.rs:6:11\n+   |\n+LL | fn foo<T: Send>() {}\n+   |           ^^^^ required by this bound in `foo`\n \n error: aborting due to previous error\n "}, {"sha": "3d385266499921471ab5d18a5ee685b6df54e12a", "filename": "src/test/ui/issues/issue-21837.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fissues%2Fissue-21837.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fissues%2Fissue-21837.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21837.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,12 +1,14 @@\n error[E0277]: the trait bound `T: Bound` is not satisfied\n   --> $DIR/issue-21837.rs:8:20\n    |\n-LL | pub struct Foo<T: Bound>(T);\n-   |                   ----- required by this bound in `Foo`\n-...\n LL | impl<T> Trait2 for Foo<T> {}\n    |                    ^^^^^^ the trait `Bound` is not implemented for `T`\n    |\n+note: required by a bound in `Foo`\n+  --> $DIR/issue-21837.rs:2:19\n+   |\n+LL | pub struct Foo<T: Bound>(T);\n+   |                   ^^^^^ required by this bound in `Foo`\n help: consider restricting type parameter `T`\n    |\n LL | impl<T: Bound> Trait2 for Foo<T> {}"}, {"sha": "3b6663513bb5fa7c1a7be194fffa4817fa9acdf6", "filename": "src/test/ui/issues/issue-21974.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fissues%2Fissue-21974.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fissues%2Fissue-21974.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21974.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,13 +1,15 @@\n error[E0283]: type annotations needed\n   --> $DIR/issue-21974.rs:11:19\n    |\n-LL | trait Foo {\n-   | --------- required by this bound in `Foo`\n-...\n LL |     where &'a T : Foo,\n    |                   ^^^ cannot infer type for reference `&'a T`\n    |\n    = note: cannot satisfy `&'a T: Foo`\n+note: required by a bound in `Foo`\n+  --> $DIR/issue-21974.rs:6:1\n+   |\n+LL | trait Foo {\n+   | ^^^^^^^^^ required by this bound in `Foo`\n \n error: aborting due to previous error\n "}, {"sha": "804334c9b0d245785151ac5f541f6f024b483d30", "filename": "src/test/ui/issues/issue-23281.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fissues%2Fissue-23281.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fissues%2Fissue-23281.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23281.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -3,11 +3,13 @@ error[E0277]: the size for values of type `(dyn Fn() + 'static)` cannot be known\n    |\n LL |     pub fn function(funs: Vec<dyn Fn() -> ()>) {}\n    |                           ^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n-...\n-LL | struct Vec<T> {\n-   |            - required by this bound in `Vec`\n    |\n    = help: the trait `Sized` is not implemented for `(dyn Fn() + 'static)`\n+note: required by a bound in `Vec`\n+  --> $DIR/issue-23281.rs:8:12\n+   |\n+LL | struct Vec<T> {\n+   |            ^ required by this bound in `Vec`\n help: you could relax the implicit `Sized` bound on `T` if it were used through indirection like `&T` or `Box<T>`\n   --> $DIR/issue-23281.rs:8:12\n    |"}, {"sha": "4896006b645da20d3a3a2fa2e46fc850398db8d0", "filename": "src/test/ui/issues/issue-24424.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fissues%2Fissue-24424.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fissues%2Fissue-24424.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24424.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,13 +1,15 @@\n error[E0283]: type annotations needed\n   --> $DIR/issue-24424.rs:4:57\n    |\n-LL | trait Trait0<'l0>  {}\n-   | ----------------- required by this bound in `Trait0`\n-LL | \n LL | impl <'l0, 'l1, T0> Trait1<'l0, T0> for bool where T0 : Trait0<'l0>, T0 : Trait0<'l1> {}\n    |                                                         ^^^^^^^^^^^ cannot infer type for type parameter `T0`\n    |\n    = note: cannot satisfy `T0: Trait0<'l0>`\n+note: required by a bound in `Trait0`\n+  --> $DIR/issue-24424.rs:2:1\n+   |\n+LL | trait Trait0<'l0>  {}\n+   | ^^^^^^^^^^^^^^^^^ required by this bound in `Trait0`\n \n error: aborting due to previous error\n "}, {"sha": "ece99596e58f406844ac5846434548c804d09f0d", "filename": "src/test/ui/issues/issue-25076.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fissues%2Fissue-25076.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fissues%2Fissue-25076.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-25076.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,11 +1,14 @@\n error[E0277]: the trait bound `(): InOut<_>` is not satisfied\n   --> $DIR/issue-25076.rs:10:20\n    |\n-LL | fn do_fold<B, F: InOut<B, Out=B>>(init: B, f: F) {}\n-   |                  --------------- required by this bound in `do_fold`\n-...\n LL |     do_fold(bot(), ());\n    |                    ^^ the trait `InOut<_>` is not implemented for `()`\n+   |\n+note: required by a bound in `do_fold`\n+  --> $DIR/issue-25076.rs:5:18\n+   |\n+LL | fn do_fold<B, F: InOut<B, Out=B>>(init: B, f: F) {}\n+   |                  ^^^^^^^^^^^^^^^ required by this bound in `do_fold`\n \n error: aborting due to previous error\n "}, {"sha": "b5aa7b1b94d1533b27797587da605b78c7884d8f", "filename": "src/test/ui/issues/issue-32963.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fissues%2Fissue-32963.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fissues%2Fissue-32963.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32963.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -23,11 +23,14 @@ LL |     size_of_copy::<dyn Misc + Copy>();\n error[E0277]: the trait bound `dyn Misc: Copy` is not satisfied\n   --> $DIR/issue-32963.rs:8:5\n    |\n-LL | fn size_of_copy<T: Copy+?Sized>() -> usize { mem::size_of::<T>() }\n-   |                    ---- required by this bound in `size_of_copy`\n-...\n LL |     size_of_copy::<dyn Misc + Copy>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `dyn Misc`\n+   |\n+note: required by a bound in `size_of_copy`\n+  --> $DIR/issue-32963.rs:5:20\n+   |\n+LL | fn size_of_copy<T: Copy+?Sized>() -> usize { mem::size_of::<T>() }\n+   |                    ^^^^ required by this bound in `size_of_copy`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "3b2d232e61f7e5c8c559c8835ca8e949df59d52a", "filename": "src/test/ui/issues/issue-40827.stderr", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fissues%2Fissue-40827.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fissues%2Fissue-40827.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40827.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,9 +1,6 @@\n error[E0277]: `Rc<Foo>` cannot be shared between threads safely\n   --> $DIR/issue-40827.rs:14:5\n    |\n-LL | fn f<T: Send>(_: T) {}\n-   |         ---- required by this bound in `f`\n-...\n LL |     f(Foo(Arc::new(Bar::B(None))));\n    |     ^ `Rc<Foo>` cannot be shared between threads safely\n    |\n@@ -19,13 +16,15 @@ note: required because it appears within the type `Foo`\n    |\n LL | struct Foo(Arc<Bar>);\n    |        ^^^\n+note: required by a bound in `f`\n+  --> $DIR/issue-40827.rs:11:9\n+   |\n+LL | fn f<T: Send>(_: T) {}\n+   |         ^^^^ required by this bound in `f`\n \n error[E0277]: `Rc<Foo>` cannot be sent between threads safely\n   --> $DIR/issue-40827.rs:14:5\n    |\n-LL | fn f<T: Send>(_: T) {}\n-   |         ---- required by this bound in `f`\n-...\n LL |     f(Foo(Arc::new(Bar::B(None))));\n    |     ^ `Rc<Foo>` cannot be sent between threads safely\n    |\n@@ -41,6 +40,11 @@ note: required because it appears within the type `Foo`\n    |\n LL | struct Foo(Arc<Bar>);\n    |        ^^^\n+note: required by a bound in `f`\n+  --> $DIR/issue-40827.rs:11:9\n+   |\n+LL | fn f<T: Send>(_: T) {}\n+   |         ^^^^ required by this bound in `f`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "b99f367d73365b20b962aa24b9d0914dfcb376dc", "filename": "src/test/ui/issues/issue-43623.stderr", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fissues%2Fissue-43623.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fissues%2Fissue-43623.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43623.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,17 +1,20 @@\n error[E0631]: type mismatch in function arguments\n   --> $DIR/issue-43623.rs:16:5\n    |\n-LL | pub fn break_me<T, F>(f: F)\n-   |        -------- required by a bound in this\n-...\n-LL |     F: for<'b> FnMut(<T as Trait<'b>>::Assoc),\n-   |                ------------------------------ required by this bound in `break_me`\n-LL | {\n LL |     break_me::<Type, fn(_)>;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n    |     |\n    |     expected signature of `for<'b> fn(<Type as Trait<'b>>::Assoc) -> _`\n    |     found signature of `fn(()) -> _`\n+   |\n+note: required by a bound in `break_me`\n+  --> $DIR/issue-43623.rs:14:16\n+   |\n+LL | pub fn break_me<T, F>(f: F)\n+   |        -------- required by a bound in this\n+...\n+LL |     F: for<'b> FnMut(<T as Trait<'b>>::Assoc),\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `break_me`\n \n error: aborting due to previous error\n "}, {"sha": "bb890cb99ee37a54f6a0c4ee2150443ac497bda9", "filename": "src/test/ui/issues/issue-43784-supertrait.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fissues%2Fissue-43784-supertrait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fissues%2Fissue-43784-supertrait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43784-supertrait.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,12 +1,14 @@\n error[E0277]: the trait bound `T: Copy` is not satisfied\n   --> $DIR/issue-43784-supertrait.rs:8:9\n    |\n-LL | pub trait Complete: Partial {\n-   |                     ------- required by this bound in `Complete`\n-...\n LL | impl<T> Complete for T {}\n    |         ^^^^^^^^ the trait `Copy` is not implemented for `T`\n    |\n+note: required by a bound in `Complete`\n+  --> $DIR/issue-43784-supertrait.rs:4:21\n+   |\n+LL | pub trait Complete: Partial {\n+   |                     ^^^^^^^ required by this bound in `Complete`\n help: consider restricting type parameter `T`\n    |\n LL | impl<T: std::marker::Copy> Complete for T {}"}, {"sha": "d9680a26e09c7446ba68c4dc67870f37ec17f385", "filename": "src/test/ui/issues/issue-47706.stderr", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fissues%2Fissue-47706.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fissues%2Fissue-47706.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47706.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -13,14 +13,17 @@ error[E0593]: function is expected to take 0 arguments, but it takes 1 argument\n LL |     Bar(i32),\n    |     -------- takes 1 argument\n ...\n+LL |     foo(Qux::Bar);\n+   |         ^^^^^^^^ expected function that takes 0 arguments\n+   |\n+note: required by a bound in `foo`\n+  --> $DIR/issue-47706.rs:22:8\n+   |\n LL | fn foo<F>(f: F)\n    |    --- required by a bound in this\n LL | where\n LL |     F: Fn(),\n-   |        ---- required by this bound in `foo`\n-...\n-LL |     foo(Qux::Bar);\n-   |         ^^^^^^^^ expected function that takes 0 arguments\n+   |        ^^^^ required by this bound in `foo`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "df76a985559d08481719a915195ff666e87acd2e", "filename": "src/test/ui/issues/issue-54954.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fissues%2Fissue-54954.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fissues%2Fissue-54954.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54954.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -9,11 +9,13 @@ error[E0283]: type annotations needed\n    |\n LL | const ARR_LEN: usize = Tt::const_val::<[i8; 123]>();\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type\n-...\n-LL |     const fn const_val<T: Sized>() -> usize {\n-   |                        - required by this bound in `Tt::const_val`\n    |\n    = note: cannot satisfy `_: Tt`\n+note: required by a bound in `Tt::const_val`\n+  --> $DIR/issue-54954.rs:5:24\n+   |\n+LL |     const fn const_val<T: Sized>() -> usize {\n+   |                        ^ required by this bound in `Tt::const_val`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "90af47dfa79112c1dac825ed54967253d6262bc7", "filename": "src/test/ui/issues/issue-59494.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fissues%2Fissue-59494.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fissues%2Fissue-59494.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-59494.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,13 +1,15 @@\n error[E0277]: expected a `Fn<(_,)>` closure, found `impl Fn<(((_, _), _),)>`\n   --> $DIR/issue-59494.rs:21:22\n    |\n-LL | fn t8n<A, B, C>(f: impl Fn(A) -> B, g: impl Fn(A) -> C) -> impl Fn(A) -> (B, C)\n-   |                                             ---------- required by this bound in `t8n`\n-...\n LL |     let t8 = t8n(t7, t7p(f, g));\n    |                      ^^^^^^^^^ expected an `Fn<(_,)>` closure, found `impl Fn<(((_, _), _),)>`\n    |\n    = help: the trait `Fn<(_,)>` is not implemented for `impl Fn<(((_, _), _),)>`\n+note: required by a bound in `t8n`\n+  --> $DIR/issue-59494.rs:5:45\n+   |\n+LL | fn t8n<A, B, C>(f: impl Fn(A) -> B, g: impl Fn(A) -> C) -> impl Fn(A) -> (B, C)\n+   |                                             ^^^^^^^^^^ required by this bound in `t8n`\n \n error: aborting due to previous error\n "}, {"sha": "a16363d7c87301725591df53690a03cc2e673a62", "filename": "src/test/ui/issues/issue-60218.stderr", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fissues%2Fissue-60218.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fissues%2Fissue-60218.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-60218.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,14 +1,17 @@\n error[E0277]: the trait bound `for<'t> <Map<<&'t _ as IntoIterator>::IntoIter, _> as Iterator>::Item: Foo` is not satisfied\n   --> $DIR/issue-60218.rs:18:5\n    |\n+LL |     trigger_error(vec![], |x: &u32| x)\n+   |     ^^^^^^^^^^^^^ the trait `for<'t> Foo` is not implemented for `<Map<<&'t _ as IntoIterator>::IntoIter, _> as Iterator>::Item`\n+   |\n+note: required by a bound in `trigger_error`\n+  --> $DIR/issue-60218.rs:13:72\n+   |\n LL | pub fn trigger_error<I, F>(iterable: I, functor: F)\n    |        ------------- required by a bound in this\n ...\n LL | for<'t> <Map<<&'t I as IntoIterator>::IntoIter, F> as Iterator>::Item: Foo,\n-   |                                                                        --- required by this bound in `trigger_error`\n-...\n-LL |     trigger_error(vec![], |x: &u32| x)\n-   |     ^^^^^^^^^^^^^ the trait `for<'t> Foo` is not implemented for `<Map<<&'t _ as IntoIterator>::IntoIter, _> as Iterator>::Item`\n+   |                                                                        ^^^ required by this bound in `trigger_error`\n \n error: aborting due to previous error\n "}, {"sha": "2ee55105214586f991aafdb714c9999376d86140", "filename": "src/test/ui/issues/issue-60283.stderr", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fissues%2Fissue-60283.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fissues%2Fissue-60283.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-60283.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,30 +1,33 @@\n error[E0631]: type mismatch in function arguments\n   --> $DIR/issue-60283.rs:17:13\n    |\n-LL | pub fn foo<T, F>(_: T, _: F)\n-   |        --- required by a bound in this\n-...\n-LL |     F: for<'a> FnMut(<T as Trait<'a>>::Item),\n-   |                ----------------------------- required by this bound in `foo`\n-...\n LL |     foo((), drop)\n    |             ^^^^\n    |             |\n    |             expected signature of `for<'a> fn(<() as Trait<'a>>::Item) -> _`\n    |             found signature of `fn(()) -> _`\n+   |\n+note: required by a bound in `foo`\n+  --> $DIR/issue-60283.rs:12:16\n+   |\n+LL | pub fn foo<T, F>(_: T, _: F)\n+   |        --- required by a bound in this\n+...\n+LL |     F: for<'a> FnMut(<T as Trait<'a>>::Item),\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `foo`\n \n error[E0277]: the size for values of type `<() as Trait<'_>>::Item` cannot be known at compilation time\n   --> $DIR/issue-60283.rs:17:13\n    |\n LL |     foo((), drop)\n    |             ^^^^ doesn't have a size known at compile-time\n    |\n-  ::: $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+   = help: the trait `Sized` is not implemented for `<() as Trait<'_>>::Item`\n+note: required by a bound in `std::mem::drop`\n+  --> $SRC_DIR/core/src/mem/mod.rs:LL:COL\n    |\n LL | pub fn drop<T>(_x: T) {}\n-   |             - required by this bound in `std::mem::drop`\n-   |\n-   = help: the trait `Sized` is not implemented for `<() as Trait<'_>>::Item`\n+   |             ^ required by this bound in `std::mem::drop`\n help: consider further restricting the associated type\n    |\n LL | fn main() where <() as Trait<'_>>::Item: Sized {"}, {"sha": "fc9418b36b633bbe2edc829b3f39a3888a704c27", "filename": "src/test/ui/issues/issue-87199.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fissues%2Fissue-87199.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fissues%2Fissue-87199.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-87199.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -19,13 +19,15 @@ LL | fn ret() -> impl Iterator<Item = ()> + ?Send { std::iter::empty() }\n error[E0277]: the size for values of type `[i32]` cannot be known at compilation time\n   --> $DIR/issue-87199.rs:18:22\n    |\n-LL | fn ref_arg<T: ?Send>(_: &T) {}\n-   |            - required by this bound in `ref_arg`\n-...\n LL |     ref_arg::<[i32]>(&[5]);\n    |                      ^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `[i32]`\n+note: required by a bound in `ref_arg`\n+  --> $DIR/issue-87199.rs:10:12\n+   |\n+LL | fn ref_arg<T: ?Send>(_: &T) {}\n+   |            ^ required by this bound in `ref_arg`\n help: consider relaxing the implicit `Sized` restriction\n    |\n LL | fn ref_arg<T: ?Send + ?Sized>(_: &T) {}"}, {"sha": "cc7ded498fc2064ad2fa37b16d358b08eff200b9", "filename": "src/test/ui/iterators/bound.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fiterators%2Fbound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fiterators%2Fbound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Fbound.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,13 +1,16 @@\n error[E0277]: `u8` is not an iterator\n   --> $DIR/bound.rs:2:10\n    |\n-LL | struct S<I: Iterator>(I);\n-   |             -------- required by this bound in `S`\n LL | struct T(S<u8>);\n    |          ^^^^^ `u8` is not an iterator\n    |\n    = help: the trait `Iterator` is not implemented for `u8`\n    = note: if you want to iterate between `start` until a value `end`, use the exclusive range syntax `start..end` or the inclusive range syntax `start..=end`\n+note: required by a bound in `S`\n+  --> $DIR/bound.rs:1:13\n+   |\n+LL | struct S<I: Iterator>(I);\n+   |             ^^^^^^^^ required by this bound in `S`\n \n error: aborting due to previous error\n "}, {"sha": "6977804708d5ea2f133097d88f1ced129895a57f", "filename": "src/test/ui/kindck/kindck-copy.stderr", "status": "modified", "additions": 64, "deletions": 33, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fkindck%2Fkindck-copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fkindck%2Fkindck-copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-copy.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,107 +1,138 @@\n error[E0277]: the trait bound `&'static mut isize: Copy` is not satisfied\n   --> $DIR/kindck-copy.rs:27:19\n    |\n-LL | fn assert_copy<T:Copy>() { }\n-   |                  ---- required by this bound in `assert_copy`\n-...\n LL |     assert_copy::<&'static mut isize>();\n    |                   ^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `&'static mut isize`\n    |\n    = help: the following implementations were found:\n              <isize as Copy>\n+note: required by a bound in `assert_copy`\n+  --> $DIR/kindck-copy.rs:5:18\n+   |\n+LL | fn assert_copy<T:Copy>() { }\n+   |                  ^^^^ required by this bound in `assert_copy`\n \n error[E0277]: the trait bound `&'a mut isize: Copy` is not satisfied\n   --> $DIR/kindck-copy.rs:28:19\n    |\n-LL | fn assert_copy<T:Copy>() { }\n-   |                  ---- required by this bound in `assert_copy`\n-...\n LL |     assert_copy::<&'a mut isize>();\n    |                   ^^^^^^^^^^^^^ the trait `Copy` is not implemented for `&'a mut isize`\n    |\n    = help: the following implementations were found:\n              <isize as Copy>\n+note: required by a bound in `assert_copy`\n+  --> $DIR/kindck-copy.rs:5:18\n+   |\n+LL | fn assert_copy<T:Copy>() { }\n+   |                  ^^^^ required by this bound in `assert_copy`\n \n error[E0277]: the trait bound `Box<isize>: Copy` is not satisfied\n   --> $DIR/kindck-copy.rs:31:19\n    |\n-LL | fn assert_copy<T:Copy>() { }\n-   |                  ---- required by this bound in `assert_copy`\n-...\n LL |     assert_copy::<Box<isize>>();\n    |                   ^^^^^^^^^^ the trait `Copy` is not implemented for `Box<isize>`\n+   |\n+note: required by a bound in `assert_copy`\n+  --> $DIR/kindck-copy.rs:5:18\n+   |\n+LL | fn assert_copy<T:Copy>() { }\n+   |                  ^^^^ required by this bound in `assert_copy`\n \n error[E0277]: the trait bound `String: Copy` is not satisfied\n   --> $DIR/kindck-copy.rs:32:19\n    |\n-LL | fn assert_copy<T:Copy>() { }\n-   |                  ---- required by this bound in `assert_copy`\n-...\n LL |     assert_copy::<String>();\n    |                   ^^^^^^ the trait `Copy` is not implemented for `String`\n+   |\n+note: required by a bound in `assert_copy`\n+  --> $DIR/kindck-copy.rs:5:18\n+   |\n+LL | fn assert_copy<T:Copy>() { }\n+   |                  ^^^^ required by this bound in `assert_copy`\n \n error[E0277]: the trait bound `Vec<isize>: Copy` is not satisfied\n   --> $DIR/kindck-copy.rs:33:19\n    |\n-LL | fn assert_copy<T:Copy>() { }\n-   |                  ---- required by this bound in `assert_copy`\n-...\n LL |     assert_copy::<Vec<isize> >();\n    |                   ^^^^^^^^^^ the trait `Copy` is not implemented for `Vec<isize>`\n+   |\n+note: required by a bound in `assert_copy`\n+  --> $DIR/kindck-copy.rs:5:18\n+   |\n+LL | fn assert_copy<T:Copy>() { }\n+   |                  ^^^^ required by this bound in `assert_copy`\n \n error[E0277]: the trait bound `Box<&'a mut isize>: Copy` is not satisfied\n   --> $DIR/kindck-copy.rs:34:19\n    |\n-LL | fn assert_copy<T:Copy>() { }\n-   |                  ---- required by this bound in `assert_copy`\n-...\n LL |     assert_copy::<Box<&'a mut isize>>();\n    |                   ^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `Box<&'a mut isize>`\n+   |\n+note: required by a bound in `assert_copy`\n+  --> $DIR/kindck-copy.rs:5:18\n+   |\n+LL | fn assert_copy<T:Copy>() { }\n+   |                  ^^^^ required by this bound in `assert_copy`\n \n error[E0277]: the trait bound `Box<dyn Dummy>: Copy` is not satisfied\n   --> $DIR/kindck-copy.rs:42:5\n    |\n-LL | fn assert_copy<T:Copy>() { }\n-   |                  ---- required by this bound in `assert_copy`\n-...\n LL |     assert_copy::<Box<dyn Dummy>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `Box<dyn Dummy>`\n+   |\n+note: required by a bound in `assert_copy`\n+  --> $DIR/kindck-copy.rs:5:18\n+   |\n+LL | fn assert_copy<T:Copy>() { }\n+   |                  ^^^^ required by this bound in `assert_copy`\n \n error[E0277]: the trait bound `Box<dyn Dummy + Send>: Copy` is not satisfied\n   --> $DIR/kindck-copy.rs:43:5\n    |\n-LL | fn assert_copy<T:Copy>() { }\n-   |                  ---- required by this bound in `assert_copy`\n-...\n LL |     assert_copy::<Box<dyn Dummy + Send>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `Box<dyn Dummy + Send>`\n+   |\n+note: required by a bound in `assert_copy`\n+  --> $DIR/kindck-copy.rs:5:18\n+   |\n+LL | fn assert_copy<T:Copy>() { }\n+   |                  ^^^^ required by this bound in `assert_copy`\n \n error[E0277]: the trait bound `&'a mut (dyn Dummy + Send + 'a): Copy` is not satisfied\n   --> $DIR/kindck-copy.rs:46:19\n    |\n-LL | fn assert_copy<T:Copy>() { }\n-   |                  ---- required by this bound in `assert_copy`\n-...\n LL |     assert_copy::<&'a mut (dyn Dummy + Send)>();\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `&'a mut (dyn Dummy + Send + 'a)`\n+   |\n+note: required by a bound in `assert_copy`\n+  --> $DIR/kindck-copy.rs:5:18\n+   |\n+LL | fn assert_copy<T:Copy>() { }\n+   |                  ^^^^ required by this bound in `assert_copy`\n \n error[E0277]: the trait bound `MyNoncopyStruct: Copy` is not satisfied\n   --> $DIR/kindck-copy.rs:64:19\n    |\n-LL | fn assert_copy<T:Copy>() { }\n-   |                  ---- required by this bound in `assert_copy`\n-...\n LL |     assert_copy::<MyNoncopyStruct>();\n    |                   ^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `MyNoncopyStruct`\n+   |\n+note: required by a bound in `assert_copy`\n+  --> $DIR/kindck-copy.rs:5:18\n+   |\n+LL | fn assert_copy<T:Copy>() { }\n+   |                  ^^^^ required by this bound in `assert_copy`\n \n error[E0277]: the trait bound `Rc<isize>: Copy` is not satisfied\n   --> $DIR/kindck-copy.rs:67:19\n    |\n-LL | fn assert_copy<T:Copy>() { }\n-   |                  ---- required by this bound in `assert_copy`\n-...\n LL |     assert_copy::<Rc<isize>>();\n    |                   ^^^^^^^^^ the trait `Copy` is not implemented for `Rc<isize>`\n+   |\n+note: required by a bound in `assert_copy`\n+  --> $DIR/kindck-copy.rs:5:18\n+   |\n+LL | fn assert_copy<T:Copy>() { }\n+   |                  ^^^^ required by this bound in `assert_copy`\n \n error: aborting due to 11 previous errors\n "}, {"sha": "60ad68cec414393b94752330474232c6c041e23a", "filename": "src/test/ui/kindck/kindck-impl-type-params-2.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params-2.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,9 +1,6 @@\n error[E0277]: the trait bound `Box<{integer}>: Foo` is not satisfied\n   --> $DIR/kindck-impl-type-params-2.rs:13:16\n    |\n-LL | fn take_param<T:Foo>(foo: &T) { }\n-   |                 --- required by this bound in `take_param`\n-...\n LL |     take_param(&x);\n    |                ^^ the trait `Copy` is not implemented for `Box<{integer}>`\n    |\n@@ -12,6 +9,11 @@ note: required because of the requirements on the impl of `Foo` for `Box<{intege\n    |\n LL | impl<T:Copy> Foo for T {\n    |              ^^^     ^\n+note: required by a bound in `take_param`\n+  --> $DIR/kindck-impl-type-params-2.rs:9:17\n+   |\n+LL | fn take_param<T:Foo>(foo: &T) { }\n+   |                 ^^^ required by this bound in `take_param`\n \n error: aborting due to previous error\n "}, {"sha": "ac43c549d8d92f8e89eb553a4d660c8d92bd2e51", "filename": "src/test/ui/kindck/kindck-inherited-copy-bound.curr.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.curr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.curr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.curr.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,9 +1,6 @@\n error[E0277]: the trait bound `Box<{integer}>: Foo` is not satisfied\n   --> $DIR/kindck-inherited-copy-bound.rs:21:16\n    |\n-LL | fn take_param<T:Foo>(foo: &T) { }\n-   |                 --- required by this bound in `take_param`\n-...\n LL |     take_param(&x);\n    |                ^^ the trait `Copy` is not implemented for `Box<{integer}>`\n    |\n@@ -12,6 +9,11 @@ note: required because of the requirements on the impl of `Foo` for `Box<{intege\n    |\n LL | impl<T:Copy> Foo for T {\n    |              ^^^     ^\n+note: required by a bound in `take_param`\n+  --> $DIR/kindck-inherited-copy-bound.rs:17:17\n+   |\n+LL | fn take_param<T:Foo>(foo: &T) { }\n+   |                 ^^^ required by this bound in `take_param`\n \n error[E0038]: the trait `Foo` cannot be made into an object\n   --> $DIR/kindck-inherited-copy-bound.rs:28:19"}, {"sha": "a486ab17c888f07a0d4c4f485f73b0c948c08e5a", "filename": "src/test/ui/kindck/kindck-inherited-copy-bound.object_safe_for_dispatch.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.object_safe_for_dispatch.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,9 +1,6 @@\n error[E0277]: the trait bound `Box<{integer}>: Foo` is not satisfied\n   --> $DIR/kindck-inherited-copy-bound.rs:21:16\n    |\n-LL | fn take_param<T:Foo>(foo: &T) { }\n-   |                 --- required by this bound in `take_param`\n-...\n LL |     take_param(&x);\n    |                ^^ the trait `Copy` is not implemented for `Box<{integer}>`\n    |\n@@ -12,6 +9,11 @@ note: required because of the requirements on the impl of `Foo` for `Box<{intege\n    |\n LL | impl<T:Copy> Foo for T {\n    |              ^^^     ^\n+note: required by a bound in `take_param`\n+  --> $DIR/kindck-inherited-copy-bound.rs:17:17\n+   |\n+LL | fn take_param<T:Foo>(foo: &T) { }\n+   |                 ^^^ required by this bound in `take_param`\n \n error[E0038]: the trait `Foo` cannot be made into an object\n   --> $DIR/kindck-inherited-copy-bound.rs:28:13"}, {"sha": "b3ebe7f5c7dc35ba3c67bd746d76e3b0948d8e4c", "filename": "src/test/ui/kindck/kindck-nonsendable-1.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fkindck%2Fkindck-nonsendable-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fkindck%2Fkindck-nonsendable-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-nonsendable-1.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,16 +1,18 @@\n error[E0277]: `Rc<usize>` cannot be sent between threads safely\n   --> $DIR/kindck-nonsendable-1.rs:9:5\n    |\n-LL | fn bar<F:FnOnce() + Send>(_: F) { }\n-   |                     ---- required by this bound in `bar`\n-...\n LL |     bar(move|| foo(x));\n    |     ^^^ ------------- within this `[closure@$DIR/kindck-nonsendable-1.rs:9:9: 9:22]`\n    |     |\n    |     `Rc<usize>` cannot be sent between threads safely\n    |\n    = help: within `[closure@$DIR/kindck-nonsendable-1.rs:9:9: 9:22]`, the trait `Send` is not implemented for `Rc<usize>`\n    = note: required because it appears within the type `[closure@$DIR/kindck-nonsendable-1.rs:9:9: 9:22]`\n+note: required by a bound in `bar`\n+  --> $DIR/kindck-nonsendable-1.rs:5:21\n+   |\n+LL | fn bar<F:FnOnce() + Send>(_: F) { }\n+   |                     ^^^^ required by this bound in `bar`\n \n error: aborting due to previous error\n "}, {"sha": "f14983a51890919443fc69fd1ef0a7deb1e170fa", "filename": "src/test/ui/kindck/kindck-send-object.stderr", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,27 +1,31 @@\n error[E0277]: `(dyn Dummy + 'static)` cannot be shared between threads safely\n   --> $DIR/kindck-send-object.rs:12:5\n    |\n-LL | fn assert_send<T:Send>() { }\n-   |                  ---- required by this bound in `assert_send`\n-...\n LL |     assert_send::<&'static (dyn Dummy + 'static)>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn Dummy + 'static)` cannot be shared between threads safely\n    |\n    = help: the trait `Sync` is not implemented for `(dyn Dummy + 'static)`\n    = note: required because of the requirements on the impl of `Send` for `&'static (dyn Dummy + 'static)`\n+note: required by a bound in `assert_send`\n+  --> $DIR/kindck-send-object.rs:5:18\n+   |\n+LL | fn assert_send<T:Send>() { }\n+   |                  ^^^^ required by this bound in `assert_send`\n \n error[E0277]: `dyn Dummy` cannot be sent between threads safely\n   --> $DIR/kindck-send-object.rs:17:5\n    |\n-LL | fn assert_send<T:Send>() { }\n-   |                  ---- required by this bound in `assert_send`\n-...\n LL |     assert_send::<Box<dyn Dummy>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `dyn Dummy` cannot be sent between threads safely\n    |\n    = help: the trait `Send` is not implemented for `dyn Dummy`\n    = note: required because of the requirements on the impl of `Send` for `Unique<dyn Dummy>`\n    = note: required because it appears within the type `Box<dyn Dummy>`\n+note: required by a bound in `assert_send`\n+  --> $DIR/kindck-send-object.rs:5:18\n+   |\n+LL | fn assert_send<T:Send>() { }\n+   |                  ^^^^ required by this bound in `assert_send`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "fa190449b64388ed3f947f3b0bca288d5400bc5e", "filename": "src/test/ui/kindck/kindck-send-object1.nll.stderr", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object1.nll.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,27 +1,31 @@\n error[E0277]: `(dyn Dummy + 'a)` cannot be shared between threads safely\n   --> $DIR/kindck-send-object1.rs:10:5\n    |\n-LL | fn assert_send<T:Send+'static>() { }\n-   |                  ---- required by this bound in `assert_send`\n-...\n LL |     assert_send::<&'a dyn Dummy>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn Dummy + 'a)` cannot be shared between threads safely\n    |\n    = help: the trait `Sync` is not implemented for `(dyn Dummy + 'a)`\n    = note: required because of the requirements on the impl of `Send` for `&'a (dyn Dummy + 'a)`\n+note: required by a bound in `assert_send`\n+  --> $DIR/kindck-send-object1.rs:5:18\n+   |\n+LL | fn assert_send<T:Send+'static>() { }\n+   |                  ^^^^ required by this bound in `assert_send`\n \n error[E0277]: `(dyn Dummy + 'a)` cannot be sent between threads safely\n   --> $DIR/kindck-send-object1.rs:29:5\n    |\n-LL | fn assert_send<T:Send+'static>() { }\n-   |                  ---- required by this bound in `assert_send`\n-...\n LL |     assert_send::<Box<dyn Dummy + 'a>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn Dummy + 'a)` cannot be sent between threads safely\n    |\n    = help: the trait `Send` is not implemented for `(dyn Dummy + 'a)`\n    = note: required because of the requirements on the impl of `Send` for `Unique<(dyn Dummy + 'a)>`\n    = note: required because it appears within the type `Box<(dyn Dummy + 'a)>`\n+note: required by a bound in `assert_send`\n+  --> $DIR/kindck-send-object1.rs:5:18\n+   |\n+LL | fn assert_send<T:Send+'static>() { }\n+   |                  ^^^^ required by this bound in `assert_send`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "58397b7f597f6891fdc5db1724f5a9dc1f283cbb", "filename": "src/test/ui/kindck/kindck-send-object1.stderr", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object1.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,14 +1,16 @@\n error[E0277]: `(dyn Dummy + 'a)` cannot be shared between threads safely\n   --> $DIR/kindck-send-object1.rs:10:5\n    |\n-LL | fn assert_send<T:Send+'static>() { }\n-   |                  ---- required by this bound in `assert_send`\n-...\n LL |     assert_send::<&'a dyn Dummy>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn Dummy + 'a)` cannot be shared between threads safely\n    |\n    = help: the trait `Sync` is not implemented for `(dyn Dummy + 'a)`\n    = note: required because of the requirements on the impl of `Send` for `&'a (dyn Dummy + 'a)`\n+note: required by a bound in `assert_send`\n+  --> $DIR/kindck-send-object1.rs:5:18\n+   |\n+LL | fn assert_send<T:Send+'static>() { }\n+   |                  ^^^^ required by this bound in `assert_send`\n \n error[E0477]: the type `&'a (dyn Dummy + Sync + 'a)` does not fulfill the required lifetime\n   --> $DIR/kindck-send-object1.rs:14:5\n@@ -25,15 +27,17 @@ LL | fn assert_send<T:Send+'static>() { }\n error[E0277]: `(dyn Dummy + 'a)` cannot be sent between threads safely\n   --> $DIR/kindck-send-object1.rs:29:5\n    |\n-LL | fn assert_send<T:Send+'static>() { }\n-   |                  ---- required by this bound in `assert_send`\n-...\n LL |     assert_send::<Box<dyn Dummy + 'a>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn Dummy + 'a)` cannot be sent between threads safely\n    |\n    = help: the trait `Send` is not implemented for `(dyn Dummy + 'a)`\n    = note: required because of the requirements on the impl of `Send` for `Unique<(dyn Dummy + 'a)>`\n    = note: required because it appears within the type `Box<(dyn Dummy + 'a)>`\n+note: required by a bound in `assert_send`\n+  --> $DIR/kindck-send-object1.rs:5:18\n+   |\n+LL | fn assert_send<T:Send+'static>() { }\n+   |                  ^^^^ required by this bound in `assert_send`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "527127e95a2cc33c68b26b8c7d5435ce31d1dec1", "filename": "src/test/ui/kindck/kindck-send-object2.stderr", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object2.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,27 +1,31 @@\n error[E0277]: `(dyn Dummy + 'static)` cannot be shared between threads safely\n   --> $DIR/kindck-send-object2.rs:7:5\n    |\n-LL | fn assert_send<T:Send>() { }\n-   |                  ---- required by this bound in `assert_send`\n-...\n LL |     assert_send::<&'static dyn Dummy>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn Dummy + 'static)` cannot be shared between threads safely\n    |\n    = help: the trait `Sync` is not implemented for `(dyn Dummy + 'static)`\n    = note: required because of the requirements on the impl of `Send` for `&'static (dyn Dummy + 'static)`\n+note: required by a bound in `assert_send`\n+  --> $DIR/kindck-send-object2.rs:3:18\n+   |\n+LL | fn assert_send<T:Send>() { }\n+   |                  ^^^^ required by this bound in `assert_send`\n \n error[E0277]: `dyn Dummy` cannot be sent between threads safely\n   --> $DIR/kindck-send-object2.rs:12:5\n    |\n-LL | fn assert_send<T:Send>() { }\n-   |                  ---- required by this bound in `assert_send`\n-...\n LL |     assert_send::<Box<dyn Dummy>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `dyn Dummy` cannot be sent between threads safely\n    |\n    = help: the trait `Send` is not implemented for `dyn Dummy`\n    = note: required because of the requirements on the impl of `Send` for `Unique<dyn Dummy>`\n    = note: required because it appears within the type `Box<dyn Dummy>`\n+note: required by a bound in `assert_send`\n+  --> $DIR/kindck-send-object2.rs:3:18\n+   |\n+LL | fn assert_send<T:Send>() { }\n+   |                  ^^^^ required by this bound in `assert_send`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "454291aa95b390b25b7187ba5520331090f67e33", "filename": "src/test/ui/kindck/kindck-send-owned.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-owned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-owned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-owned.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,15 +1,17 @@\n error[E0277]: `*mut u8` cannot be sent between threads safely\n   --> $DIR/kindck-send-owned.rs:12:5\n    |\n-LL | fn assert_send<T:Send>() { }\n-   |                  ---- required by this bound in `assert_send`\n-...\n LL |     assert_send::<Box<*mut u8>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ `*mut u8` cannot be sent between threads safely\n    |\n    = help: the trait `Send` is not implemented for `*mut u8`\n    = note: required because of the requirements on the impl of `Send` for `Unique<*mut u8>`\n    = note: required because it appears within the type `Box<*mut u8>`\n+note: required by a bound in `assert_send`\n+  --> $DIR/kindck-send-owned.rs:3:18\n+   |\n+LL | fn assert_send<T:Send>() { }\n+   |                  ^^^^ required by this bound in `assert_send`\n \n error: aborting due to previous error\n "}, {"sha": "ceed0053caa390adb3b49e595360766fd1a51a3d", "filename": "src/test/ui/kindck/kindck-send-unsafe.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-unsafe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-unsafe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-unsafe.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,13 +1,15 @@\n error[E0277]: `*mut &'a isize` cannot be sent between threads safely\n   --> $DIR/kindck-send-unsafe.rs:6:19\n    |\n-LL | fn assert_send<T:Send>() { }\n-   |                  ---- required by this bound in `assert_send`\n-...\n LL |     assert_send::<*mut &'a isize>();\n    |                   ^^^^^^^^^^^^^^ `*mut &'a isize` cannot be sent between threads safely\n    |\n    = help: the trait `Send` is not implemented for `*mut &'a isize`\n+note: required by a bound in `assert_send`\n+  --> $DIR/kindck-send-unsafe.rs:3:18\n+   |\n+LL | fn assert_send<T:Send>() { }\n+   |                  ^^^^ required by this bound in `assert_send`\n \n error: aborting due to previous error\n "}, {"sha": "b76d71a3d43c4840e60b19fa8a61f19c5eea3840", "filename": "src/test/ui/lifetimes/issue-34979.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Flifetimes%2Fissue-34979.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Flifetimes%2Fissue-34979.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-34979.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,13 +1,15 @@\n error[E0283]: type annotations needed\n   --> $DIR/issue-34979.rs:6:13\n    |\n-LL | trait Foo {}\n-   | --------- required by this bound in `Foo`\n-...\n LL |     &'a (): Foo,\n    |             ^^^ cannot infer type for reference `&'a ()`\n    |\n    = note: cannot satisfy `&'a (): Foo`\n+note: required by a bound in `Foo`\n+  --> $DIR/issue-34979.rs:1:1\n+   |\n+LL | trait Foo {}\n+   | ^^^^^^^^^ required by this bound in `Foo`\n \n error: aborting due to previous error\n "}, {"sha": "0ddce1be476c34c4a1d2c3740cf77b9d465d8ad8", "filename": "src/test/ui/malformed/malformed-derive-entry.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-derive-entry.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-derive-entry.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-derive-entry.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -22,11 +22,11 @@ error[E0277]: the trait bound `Test1: Clone` is not satisfied\n LL | #[derive(Copy(Bad))]\n    |          ^^^^ the trait `Clone` is not implemented for `Test1`\n    |\n-  ::: $SRC_DIR/core/src/marker.rs:LL:COL\n+note: required by a bound in `Copy`\n+  --> $SRC_DIR/core/src/marker.rs:LL:COL\n    |\n LL | pub trait Copy: Clone {\n-   |                 ----- required by this bound in `Copy`\n-   |\n+   |                 ^^^^^ required by this bound in `Copy`\n    = note: this error originates in the derive macro `Copy` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: the trait bound `Test2: Clone` is not satisfied\n@@ -35,11 +35,11 @@ error[E0277]: the trait bound `Test2: Clone` is not satisfied\n LL | #[derive(Copy=\"bad\")]\n    |          ^^^^ the trait `Clone` is not implemented for `Test2`\n    |\n-  ::: $SRC_DIR/core/src/marker.rs:LL:COL\n+note: required by a bound in `Copy`\n+  --> $SRC_DIR/core/src/marker.rs:LL:COL\n    |\n LL | pub trait Copy: Clone {\n-   |                 ----- required by this bound in `Copy`\n-   |\n+   |                 ^^^^^ required by this bound in `Copy`\n    = note: this error originates in the derive macro `Copy` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 5 previous errors"}, {"sha": "1f34105979441e5c25226e4007c33aeb0ed4cc89", "filename": "src/test/ui/marker_trait_attr/overlap-marker-trait.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fmarker_trait_attr%2Foverlap-marker-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fmarker_trait_attr%2Foverlap-marker-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmarker_trait_attr%2Foverlap-marker-trait.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,11 +1,14 @@\n error[E0277]: the trait bound `NotDebugOrDisplay: Marker` is not satisfied\n   --> $DIR/overlap-marker-trait.rs:27:17\n    |\n-LL | fn is_marker<T: Marker>() { }\n-   |                 ------ required by this bound in `is_marker`\n-...\n LL |     is_marker::<NotDebugOrDisplay>();\n    |                 ^^^^^^^^^^^^^^^^^ the trait `Marker` is not implemented for `NotDebugOrDisplay`\n+   |\n+note: required by a bound in `is_marker`\n+  --> $DIR/overlap-marker-trait.rs:15:17\n+   |\n+LL | fn is_marker<T: Marker>() { }\n+   |                 ^^^^^^ required by this bound in `is_marker`\n \n error: aborting due to previous error\n "}, {"sha": "b2b40bea7082e8ce41dd09d0350dfed3093ad8bd", "filename": "src/test/ui/mir/issue-80742.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fmir%2Fissue-80742.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fmir%2Fissue-80742.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fissue-80742.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -52,13 +52,15 @@ LL |     [u8; size_of::<T>() + 1]: ,\n error[E0277]: the size for values of type `dyn Debug` cannot be known at compilation time\n   --> $DIR/issue-80742.rs:31:15\n    |\n-LL | struct Inline<T>\n-   |               - required by this bound in `Inline`\n-...\n LL |     let dst = Inline::<dyn Debug>::new(0);\n    |               ^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `dyn Debug`\n+note: required by a bound in `Inline`\n+  --> $DIR/issue-80742.rs:13:15\n+   |\n+LL | struct Inline<T>\n+   |               ^ required by this bound in `Inline`\n help: consider relaxing the implicit `Sized` restriction\n    |\n LL | struct Inline<T: ?Sized>"}, {"sha": "c8e81c93e2cbd432db2ac1575317f6b1dd83b3a8", "filename": "src/test/ui/mismatched_types/E0631.stderr", "status": "modified", "additions": 24, "deletions": 12, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fmismatched_types%2FE0631.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fmismatched_types%2FE0631.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2FE0631.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,48 +1,60 @@\n error[E0631]: type mismatch in closure arguments\n   --> $DIR/E0631.rs:7:5\n    |\n-LL | fn foo<F: Fn(usize)>(_: F) {}\n-   |           --------- required by this bound in `foo`\n-...\n LL |     foo(|_: isize| {});\n    |     ^^^ ---------- found signature of `fn(isize) -> _`\n    |     |\n    |     expected signature of `fn(usize) -> _`\n+   |\n+note: required by a bound in `foo`\n+  --> $DIR/E0631.rs:3:11\n+   |\n+LL | fn foo<F: Fn(usize)>(_: F) {}\n+   |           ^^^^^^^^^ required by this bound in `foo`\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/E0631.rs:8:5\n    |\n-LL | fn bar<F: Fn<usize>>(_: F) {}\n-   |           --------- required by this bound in `bar`\n-...\n LL |     bar(|_: isize| {});\n    |     ^^^ ---------- found signature of `fn(isize) -> _`\n    |     |\n    |     expected signature of `fn(usize) -> _`\n+   |\n+note: required by a bound in `bar`\n+  --> $DIR/E0631.rs:4:11\n+   |\n+LL | fn bar<F: Fn<usize>>(_: F) {}\n+   |           ^^^^^^^^^ required by this bound in `bar`\n \n error[E0631]: type mismatch in function arguments\n   --> $DIR/E0631.rs:9:9\n    |\n-LL | fn foo<F: Fn(usize)>(_: F) {}\n-   |           --------- required by this bound in `foo`\n-...\n LL |     fn f(_: u64) {}\n    |     ------------ found signature of `fn(u64) -> _`\n ...\n LL |     foo(f);\n    |         ^ expected signature of `fn(usize) -> _`\n+   |\n+note: required by a bound in `foo`\n+  --> $DIR/E0631.rs:3:11\n+   |\n+LL | fn foo<F: Fn(usize)>(_: F) {}\n+   |           ^^^^^^^^^ required by this bound in `foo`\n \n error[E0631]: type mismatch in function arguments\n   --> $DIR/E0631.rs:10:9\n    |\n-LL | fn bar<F: Fn<usize>>(_: F) {}\n-   |           --------- required by this bound in `bar`\n-LL | fn main() {\n LL |     fn f(_: u64) {}\n    |     ------------ found signature of `fn(u64) -> _`\n ...\n LL |     bar(f);\n    |         ^ expected signature of `fn(usize) -> _`\n+   |\n+note: required by a bound in `bar`\n+  --> $DIR/E0631.rs:4:11\n+   |\n+LL | fn bar<F: Fn<usize>>(_: F) {}\n+   |           ^^^^^^^^^ required by this bound in `bar`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "679001724640490576203304ed877226486dfb2e", "filename": "src/test/ui/mismatched_types/closure-arg-count.stderr", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -48,14 +48,16 @@ LL |     [1, 2, 3].sort_by(|tuple, tuple2| panic!());\n error[E0593]: closure is expected to take 1 argument, but it takes 0 arguments\n   --> $DIR/closure-arg-count.rs:13:5\n    |\n-LL | fn f<F: Fn<usize>>(_: F) {}\n-   |         --------- required by this bound in `f`\n-...\n LL |     f(|| panic!());\n    |     ^ -- takes 0 arguments\n    |     |\n    |     expected closure that takes 1 argument\n    |\n+note: required by a bound in `f`\n+  --> $DIR/closure-arg-count.rs:3:9\n+   |\n+LL | fn f<F: Fn<usize>>(_: F) {}\n+   |         ^^^^^^^^^ required by this bound in `f`\n help: consider changing the closure to take and ignore the expected argument\n    |\n LL |     f(|_| panic!());\n@@ -64,14 +66,16 @@ LL |     f(|_| panic!());\n error[E0593]: closure is expected to take 1 argument, but it takes 0 arguments\n   --> $DIR/closure-arg-count.rs:15:5\n    |\n-LL | fn f<F: Fn<usize>>(_: F) {}\n-   |         --------- required by this bound in `f`\n-...\n LL |     f(  move    || panic!());\n    |     ^   ---------- takes 0 arguments\n    |     |\n    |     expected closure that takes 1 argument\n    |\n+note: required by a bound in `f`\n+  --> $DIR/closure-arg-count.rs:3:9\n+   |\n+LL | fn f<F: Fn<usize>>(_: F) {}\n+   |         ^^^^^^^^^ required by this bound in `f`\n help: consider changing the closure to take and ignore the expected argument\n    |\n LL |     f(  move    |_| panic!());\n@@ -149,10 +153,14 @@ error[E0593]: function is expected to take 0 arguments, but it takes 1 argument\n LL |     call(Foo);\n    |          ^^^ expected function that takes 0 arguments\n ...\n-LL | fn call<F, R>(_: F) where F: FnOnce() -> R {}\n-   |                              ------------- required by this bound in `call`\n LL | struct Foo(u8);\n    | --------------- takes 1 argument\n+   |\n+note: required by a bound in `call`\n+  --> $DIR/closure-arg-count.rs:42:30\n+   |\n+LL | fn call<F, R>(_: F) where F: FnOnce() -> R {}\n+   |                              ^^^^^^^^^^^^^ required by this bound in `call`\n \n error: aborting due to 14 previous errors\n "}, {"sha": "afde894b3044d0cd2635b4921cfaf07612c6620c", "filename": "src/test/ui/mismatched_types/fn-variance-1.stderr", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fmismatched_types%2Ffn-variance-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fmismatched_types%2Ffn-variance-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Ffn-variance-1.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -3,24 +3,30 @@ error[E0631]: type mismatch in function arguments\n    |\n LL | fn takes_mut(x: &mut isize) { }\n    | --------------------------- found signature of `for<'r> fn(&'r mut isize) -> _`\n-LL | \n-LL | fn apply<T, F>(t: T, f: F) where F: FnOnce(T) {\n-   |                                     --------- required by this bound in `apply`\n ...\n LL |     apply(&3, takes_mut);\n    |               ^^^^^^^^^ expected signature of `fn(&{integer}) -> _`\n+   |\n+note: required by a bound in `apply`\n+  --> $DIR/fn-variance-1.rs:5:37\n+   |\n+LL | fn apply<T, F>(t: T, f: F) where F: FnOnce(T) {\n+   |                                     ^^^^^^^^^ required by this bound in `apply`\n \n error[E0631]: type mismatch in function arguments\n   --> $DIR/fn-variance-1.rs:15:19\n    |\n LL | fn takes_imm(x: &isize) { }\n    | ----------------------- found signature of `for<'r> fn(&'r isize) -> _`\n ...\n-LL | fn apply<T, F>(t: T, f: F) where F: FnOnce(T) {\n-   |                                     --------- required by this bound in `apply`\n-...\n LL |     apply(&mut 3, takes_imm);\n    |                   ^^^^^^^^^ expected signature of `fn(&mut {integer}) -> _`\n+   |\n+note: required by a bound in `apply`\n+  --> $DIR/fn-variance-1.rs:5:37\n+   |\n+LL | fn apply<T, F>(t: T, f: F) where F: FnOnce(T) {\n+   |                                     ^^^^^^^^^ required by this bound in `apply`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "ad59462e9bd441a1613da27dd2d69332b727f293", "filename": "src/test/ui/mismatched_types/unboxed-closures-vtable-mismatch.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.rs?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -6,6 +6,7 @@ fn to_fn_mut<A,F:FnMut<A>>(f: F) -> F { f }\n \n fn call_it<F:FnMut(isize,isize)->isize>(y: isize, mut f: F) -> isize {\n //~^ NOTE required by this bound in `call_it`\n+//~| NOTE required by a bound in `call_it`\n     f(2, y)\n }\n "}, {"sha": "4406f8a9e58b40fa5b793fdd1c585380d01c2ed9", "filename": "src/test/ui/mismatched_types/unboxed-closures-vtable-mismatch.stderr", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,14 +1,17 @@\n error[E0631]: type mismatch in closure arguments\n-  --> $DIR/unboxed-closures-vtable-mismatch.rs:15:24\n+  --> $DIR/unboxed-closures-vtable-mismatch.rs:16:24\n    |\n-LL | fn call_it<F:FnMut(isize,isize)->isize>(y: isize, mut f: F) -> isize {\n-   |              ------------------------- required by this bound in `call_it`\n-...\n LL |     let f = to_fn_mut(|x: usize, y: isize| -> isize { (x as isize) + y });\n    |                       ----------------------------- found signature of `fn(usize, isize) -> _`\n LL |\n LL |     let z = call_it(3, f);\n    |                        ^ expected signature of `fn(isize, isize) -> _`\n+   |\n+note: required by a bound in `call_it`\n+  --> $DIR/unboxed-closures-vtable-mismatch.rs:7:14\n+   |\n+LL | fn call_it<F:FnMut(isize,isize)->isize>(y: isize, mut f: F) -> isize {\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `call_it`\n \n error: aborting due to previous error\n "}, {"sha": "8ec478cd63fa1264db5eb40e35920258f4ea846e", "filename": "src/test/ui/mut/mutable-enum-indirect.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fmut%2Fmutable-enum-indirect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fmut%2Fmutable-enum-indirect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmut%2Fmutable-enum-indirect.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,9 +1,6 @@\n error[E0277]: `NoSync` cannot be shared between threads safely\n   --> $DIR/mutable-enum-indirect.rs:17:5\n    |\n-LL | fn bar<T: Sync>(_: T) {}\n-   |           ---- required by this bound in `bar`\n-...\n LL |     bar(&x);\n    |     ^^^ `NoSync` cannot be shared between threads safely\n    |\n@@ -14,6 +11,11 @@ note: required because it appears within the type `Foo`\n LL | enum Foo { A(NoSync) }\n    |      ^^^\n    = note: required because it appears within the type `&Foo`\n+note: required by a bound in `bar`\n+  --> $DIR/mutable-enum-indirect.rs:13:11\n+   |\n+LL | fn bar<T: Sync>(_: T) {}\n+   |           ^^^^ required by this bound in `bar`\n \n error: aborting due to previous error\n "}, {"sha": "172e257ebf04a5b007b91c7a38f833b7c3dc3d72", "filename": "src/test/ui/mutexguard-sync.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fmutexguard-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fmutexguard-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmutexguard-sync.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,14 +1,16 @@\n error[E0277]: `Cell<i32>` cannot be shared between threads safely\n   --> $DIR/mutexguard-sync.rs:11:15\n    |\n-LL | fn test_sync<T: Sync>(_t: T) {}\n-   |                 ---- required by this bound in `test_sync`\n-...\n LL |     test_sync(guard);\n    |               ^^^^^ `Cell<i32>` cannot be shared between threads safely\n    |\n    = help: the trait `Sync` is not implemented for `Cell<i32>`\n    = note: required because of the requirements on the impl of `Sync` for `MutexGuard<'_, Cell<i32>>`\n+note: required by a bound in `test_sync`\n+  --> $DIR/mutexguard-sync.rs:5:17\n+   |\n+LL | fn test_sync<T: Sync>(_t: T) {}\n+   |                 ^^^^ required by this bound in `test_sync`\n \n error: aborting due to previous error\n "}, {"sha": "e4e1071638876489ce44c60dec59d88f671efc59", "filename": "src/test/ui/namespace/namespace-mix.stderr", "status": "modified", "additions": 264, "deletions": 132, "changes": 396, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fnamespace%2Fnamespace-mix.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fnamespace%2Fnamespace-mix.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnamespace%2Fnamespace-mix.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -99,398 +99,530 @@ LL | use xm8::V;\n error[E0277]: the trait bound `c::Item: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:33:11\n    |\n-LL | fn check<T: Impossible>(_: T) {}\n-   |             ---------- required by this bound in `check`\n-...\n LL |     check(m1::S{});\n    |           ^^^^^^^ the trait `Impossible` is not implemented for `c::Item`\n+   |\n+note: required by a bound in `check`\n+  --> $DIR/namespace-mix.rs:21:13\n+   |\n+LL | fn check<T: Impossible>(_: T) {}\n+   |             ^^^^^^^^^^ required by this bound in `check`\n \n error[E0277]: the trait bound `c::S: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:35:11\n    |\n-LL | fn check<T: Impossible>(_: T) {}\n-   |             ---------- required by this bound in `check`\n-...\n LL |     check(m2::S{});\n    |           ^^^^^^^ the trait `Impossible` is not implemented for `c::S`\n+   |\n+note: required by a bound in `check`\n+  --> $DIR/namespace-mix.rs:21:13\n+   |\n+LL | fn check<T: Impossible>(_: T) {}\n+   |             ^^^^^^^^^^ required by this bound in `check`\n \n error[E0277]: the trait bound `c::Item: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:36:11\n    |\n-LL | fn check<T: Impossible>(_: T) {}\n-   |             ---------- required by this bound in `check`\n-...\n LL |     check(m2::S);\n    |           ^^^^^ the trait `Impossible` is not implemented for `c::Item`\n+   |\n+note: required by a bound in `check`\n+  --> $DIR/namespace-mix.rs:21:13\n+   |\n+LL | fn check<T: Impossible>(_: T) {}\n+   |             ^^^^^^^^^^ required by this bound in `check`\n \n error[E0277]: the trait bound `namespace_mix::c::Item: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:39:11\n    |\n-LL | fn check<T: Impossible>(_: T) {}\n-   |             ---------- required by this bound in `check`\n-...\n LL |     check(xm1::S{});\n    |           ^^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n+   |\n+note: required by a bound in `check`\n+  --> $DIR/namespace-mix.rs:21:13\n+   |\n+LL | fn check<T: Impossible>(_: T) {}\n+   |             ^^^^^^^^^^ required by this bound in `check`\n \n error[E0277]: the trait bound `namespace_mix::c::S: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:41:11\n    |\n-LL | fn check<T: Impossible>(_: T) {}\n-   |             ---------- required by this bound in `check`\n-...\n LL |     check(xm2::S{});\n    |           ^^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::S`\n+   |\n+note: required by a bound in `check`\n+  --> $DIR/namespace-mix.rs:21:13\n+   |\n+LL | fn check<T: Impossible>(_: T) {}\n+   |             ^^^^^^^^^^ required by this bound in `check`\n \n error[E0277]: the trait bound `namespace_mix::c::Item: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:42:11\n    |\n-LL | fn check<T: Impossible>(_: T) {}\n-   |             ---------- required by this bound in `check`\n-...\n LL |     check(xm2::S);\n    |           ^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n+   |\n+note: required by a bound in `check`\n+  --> $DIR/namespace-mix.rs:21:13\n+   |\n+LL | fn check<T: Impossible>(_: T) {}\n+   |             ^^^^^^^^^^ required by this bound in `check`\n \n error[E0277]: the trait bound `c::Item: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:55:11\n    |\n-LL | fn check<T: Impossible>(_: T) {}\n-   |             ---------- required by this bound in `check`\n-...\n LL |     check(m3::TS{});\n    |           ^^^^^^^^ the trait `Impossible` is not implemented for `c::Item`\n+   |\n+note: required by a bound in `check`\n+  --> $DIR/namespace-mix.rs:21:13\n+   |\n+LL | fn check<T: Impossible>(_: T) {}\n+   |             ^^^^^^^^^^ required by this bound in `check`\n \n error[E0277]: the trait bound `fn() -> c::TS {c::TS}: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:56:11\n    |\n-LL | fn check<T: Impossible>(_: T) {}\n-   |             ---------- required by this bound in `check`\n-...\n LL |     check(m3::TS);\n    |           ^^^^^^ the trait `Impossible` is not implemented for `fn() -> c::TS {c::TS}`\n+   |\n+note: required by a bound in `check`\n+  --> $DIR/namespace-mix.rs:21:13\n+   |\n+LL | fn check<T: Impossible>(_: T) {}\n+   |             ^^^^^^^^^^ required by this bound in `check`\n \n error[E0277]: the trait bound `c::TS: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:57:11\n    |\n-LL | fn check<T: Impossible>(_: T) {}\n-   |             ---------- required by this bound in `check`\n-...\n LL |     check(m4::TS{});\n    |           ^^^^^^^^ the trait `Impossible` is not implemented for `c::TS`\n+   |\n+note: required by a bound in `check`\n+  --> $DIR/namespace-mix.rs:21:13\n+   |\n+LL | fn check<T: Impossible>(_: T) {}\n+   |             ^^^^^^^^^^ required by this bound in `check`\n \n error[E0277]: the trait bound `c::Item: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:58:11\n    |\n-LL | fn check<T: Impossible>(_: T) {}\n-   |             ---------- required by this bound in `check`\n-...\n LL |     check(m4::TS);\n    |           ^^^^^^ the trait `Impossible` is not implemented for `c::Item`\n+   |\n+note: required by a bound in `check`\n+  --> $DIR/namespace-mix.rs:21:13\n+   |\n+LL | fn check<T: Impossible>(_: T) {}\n+   |             ^^^^^^^^^^ required by this bound in `check`\n \n error[E0277]: the trait bound `namespace_mix::c::Item: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:61:11\n    |\n-LL | fn check<T: Impossible>(_: T) {}\n-   |             ---------- required by this bound in `check`\n-...\n LL |     check(xm3::TS{});\n    |           ^^^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n+   |\n+note: required by a bound in `check`\n+  --> $DIR/namespace-mix.rs:21:13\n+   |\n+LL | fn check<T: Impossible>(_: T) {}\n+   |             ^^^^^^^^^^ required by this bound in `check`\n \n error[E0277]: the trait bound `fn() -> namespace_mix::c::TS {namespace_mix::c::TS}: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:62:11\n    |\n-LL | fn check<T: Impossible>(_: T) {}\n-   |             ---------- required by this bound in `check`\n-...\n LL |     check(xm3::TS);\n    |           ^^^^^^^ the trait `Impossible` is not implemented for `fn() -> namespace_mix::c::TS {namespace_mix::c::TS}`\n+   |\n+note: required by a bound in `check`\n+  --> $DIR/namespace-mix.rs:21:13\n+   |\n+LL | fn check<T: Impossible>(_: T) {}\n+   |             ^^^^^^^^^^ required by this bound in `check`\n \n error[E0277]: the trait bound `namespace_mix::c::TS: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:63:11\n    |\n-LL | fn check<T: Impossible>(_: T) {}\n-   |             ---------- required by this bound in `check`\n-...\n LL |     check(xm4::TS{});\n    |           ^^^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::TS`\n+   |\n+note: required by a bound in `check`\n+  --> $DIR/namespace-mix.rs:21:13\n+   |\n+LL | fn check<T: Impossible>(_: T) {}\n+   |             ^^^^^^^^^^ required by this bound in `check`\n \n error[E0277]: the trait bound `namespace_mix::c::Item: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:64:11\n    |\n-LL | fn check<T: Impossible>(_: T) {}\n-   |             ---------- required by this bound in `check`\n-...\n LL |     check(xm4::TS);\n    |           ^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n+   |\n+note: required by a bound in `check`\n+  --> $DIR/namespace-mix.rs:21:13\n+   |\n+LL | fn check<T: Impossible>(_: T) {}\n+   |             ^^^^^^^^^^ required by this bound in `check`\n \n error[E0277]: the trait bound `c::Item: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:77:11\n    |\n-LL | fn check<T: Impossible>(_: T) {}\n-   |             ---------- required by this bound in `check`\n-...\n LL |     check(m5::US{});\n    |           ^^^^^^^^ the trait `Impossible` is not implemented for `c::Item`\n+   |\n+note: required by a bound in `check`\n+  --> $DIR/namespace-mix.rs:21:13\n+   |\n+LL | fn check<T: Impossible>(_: T) {}\n+   |             ^^^^^^^^^^ required by this bound in `check`\n \n error[E0277]: the trait bound `c::US: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:78:11\n    |\n-LL | fn check<T: Impossible>(_: T) {}\n-   |             ---------- required by this bound in `check`\n-...\n LL |     check(m5::US);\n    |           ^^^^^^ the trait `Impossible` is not implemented for `c::US`\n+   |\n+note: required by a bound in `check`\n+  --> $DIR/namespace-mix.rs:21:13\n+   |\n+LL | fn check<T: Impossible>(_: T) {}\n+   |             ^^^^^^^^^^ required by this bound in `check`\n \n error[E0277]: the trait bound `c::US: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:79:11\n    |\n-LL | fn check<T: Impossible>(_: T) {}\n-   |             ---------- required by this bound in `check`\n-...\n LL |     check(m6::US{});\n    |           ^^^^^^^^ the trait `Impossible` is not implemented for `c::US`\n+   |\n+note: required by a bound in `check`\n+  --> $DIR/namespace-mix.rs:21:13\n+   |\n+LL | fn check<T: Impossible>(_: T) {}\n+   |             ^^^^^^^^^^ required by this bound in `check`\n \n error[E0277]: the trait bound `c::Item: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:80:11\n    |\n-LL | fn check<T: Impossible>(_: T) {}\n-   |             ---------- required by this bound in `check`\n-...\n LL |     check(m6::US);\n    |           ^^^^^^ the trait `Impossible` is not implemented for `c::Item`\n+   |\n+note: required by a bound in `check`\n+  --> $DIR/namespace-mix.rs:21:13\n+   |\n+LL | fn check<T: Impossible>(_: T) {}\n+   |             ^^^^^^^^^^ required by this bound in `check`\n \n error[E0277]: the trait bound `namespace_mix::c::Item: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:83:11\n    |\n-LL | fn check<T: Impossible>(_: T) {}\n-   |             ---------- required by this bound in `check`\n-...\n LL |     check(xm5::US{});\n    |           ^^^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n+   |\n+note: required by a bound in `check`\n+  --> $DIR/namespace-mix.rs:21:13\n+   |\n+LL | fn check<T: Impossible>(_: T) {}\n+   |             ^^^^^^^^^^ required by this bound in `check`\n \n error[E0277]: the trait bound `namespace_mix::c::US: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:84:11\n    |\n-LL | fn check<T: Impossible>(_: T) {}\n-   |             ---------- required by this bound in `check`\n-...\n LL |     check(xm5::US);\n    |           ^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::US`\n+   |\n+note: required by a bound in `check`\n+  --> $DIR/namespace-mix.rs:21:13\n+   |\n+LL | fn check<T: Impossible>(_: T) {}\n+   |             ^^^^^^^^^^ required by this bound in `check`\n \n error[E0277]: the trait bound `namespace_mix::c::US: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:85:11\n    |\n-LL | fn check<T: Impossible>(_: T) {}\n-   |             ---------- required by this bound in `check`\n-...\n LL |     check(xm6::US{});\n    |           ^^^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::US`\n+   |\n+note: required by a bound in `check`\n+  --> $DIR/namespace-mix.rs:21:13\n+   |\n+LL | fn check<T: Impossible>(_: T) {}\n+   |             ^^^^^^^^^^ required by this bound in `check`\n \n error[E0277]: the trait bound `namespace_mix::c::Item: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:86:11\n    |\n-LL | fn check<T: Impossible>(_: T) {}\n-   |             ---------- required by this bound in `check`\n-...\n LL |     check(xm6::US);\n    |           ^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n+   |\n+note: required by a bound in `check`\n+  --> $DIR/namespace-mix.rs:21:13\n+   |\n+LL | fn check<T: Impossible>(_: T) {}\n+   |             ^^^^^^^^^^ required by this bound in `check`\n \n error[E0277]: the trait bound `c::Item: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:99:11\n    |\n-LL | fn check<T: Impossible>(_: T) {}\n-   |             ---------- required by this bound in `check`\n-...\n LL |     check(m7::V{});\n    |           ^^^^^^^ the trait `Impossible` is not implemented for `c::Item`\n+   |\n+note: required by a bound in `check`\n+  --> $DIR/namespace-mix.rs:21:13\n+   |\n+LL | fn check<T: Impossible>(_: T) {}\n+   |             ^^^^^^^^^^ required by this bound in `check`\n \n error[E0277]: the trait bound `c::E: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:101:11\n    |\n-LL | fn check<T: Impossible>(_: T) {}\n-   |             ---------- required by this bound in `check`\n-...\n LL |     check(m8::V{});\n    |           ^^^^^^^ the trait `Impossible` is not implemented for `c::E`\n+   |\n+note: required by a bound in `check`\n+  --> $DIR/namespace-mix.rs:21:13\n+   |\n+LL | fn check<T: Impossible>(_: T) {}\n+   |             ^^^^^^^^^^ required by this bound in `check`\n \n error[E0277]: the trait bound `c::Item: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:102:11\n    |\n-LL | fn check<T: Impossible>(_: T) {}\n-   |             ---------- required by this bound in `check`\n-...\n LL |     check(m8::V);\n    |           ^^^^^ the trait `Impossible` is not implemented for `c::Item`\n+   |\n+note: required by a bound in `check`\n+  --> $DIR/namespace-mix.rs:21:13\n+   |\n+LL | fn check<T: Impossible>(_: T) {}\n+   |             ^^^^^^^^^^ required by this bound in `check`\n \n error[E0277]: the trait bound `namespace_mix::c::Item: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:105:11\n    |\n-LL | fn check<T: Impossible>(_: T) {}\n-   |             ---------- required by this bound in `check`\n-...\n LL |     check(xm7::V{});\n    |           ^^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n+   |\n+note: required by a bound in `check`\n+  --> $DIR/namespace-mix.rs:21:13\n+   |\n+LL | fn check<T: Impossible>(_: T) {}\n+   |             ^^^^^^^^^^ required by this bound in `check`\n \n error[E0277]: the trait bound `namespace_mix::c::E: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:107:11\n    |\n-LL | fn check<T: Impossible>(_: T) {}\n-   |             ---------- required by this bound in `check`\n-...\n LL |     check(xm8::V{});\n    |           ^^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::E`\n+   |\n+note: required by a bound in `check`\n+  --> $DIR/namespace-mix.rs:21:13\n+   |\n+LL | fn check<T: Impossible>(_: T) {}\n+   |             ^^^^^^^^^^ required by this bound in `check`\n \n error[E0277]: the trait bound `namespace_mix::c::Item: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:108:11\n    |\n-LL | fn check<T: Impossible>(_: T) {}\n-   |             ---------- required by this bound in `check`\n-...\n LL |     check(xm8::V);\n    |           ^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n+   |\n+note: required by a bound in `check`\n+  --> $DIR/namespace-mix.rs:21:13\n+   |\n+LL | fn check<T: Impossible>(_: T) {}\n+   |             ^^^^^^^^^^ required by this bound in `check`\n \n error[E0277]: the trait bound `c::Item: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:121:11\n    |\n-LL | fn check<T: Impossible>(_: T) {}\n-   |             ---------- required by this bound in `check`\n-...\n LL |     check(m9::TV{});\n    |           ^^^^^^^^ the trait `Impossible` is not implemented for `c::Item`\n+   |\n+note: required by a bound in `check`\n+  --> $DIR/namespace-mix.rs:21:13\n+   |\n+LL | fn check<T: Impossible>(_: T) {}\n+   |             ^^^^^^^^^^ required by this bound in `check`\n \n error[E0277]: the trait bound `fn() -> c::E {c::E::TV}: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:122:11\n    |\n-LL | fn check<T: Impossible>(_: T) {}\n-   |             ---------- required by this bound in `check`\n-...\n LL |     check(m9::TV);\n    |           ^^^^^^ the trait `Impossible` is not implemented for `fn() -> c::E {c::E::TV}`\n+   |\n+note: required by a bound in `check`\n+  --> $DIR/namespace-mix.rs:21:13\n+   |\n+LL | fn check<T: Impossible>(_: T) {}\n+   |             ^^^^^^^^^^ required by this bound in `check`\n \n error[E0277]: the trait bound `c::E: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:123:11\n    |\n-LL | fn check<T: Impossible>(_: T) {}\n-   |             ---------- required by this bound in `check`\n-...\n LL |     check(mA::TV{});\n    |           ^^^^^^^^ the trait `Impossible` is not implemented for `c::E`\n+   |\n+note: required by a bound in `check`\n+  --> $DIR/namespace-mix.rs:21:13\n+   |\n+LL | fn check<T: Impossible>(_: T) {}\n+   |             ^^^^^^^^^^ required by this bound in `check`\n \n error[E0277]: the trait bound `c::Item: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:124:11\n    |\n-LL | fn check<T: Impossible>(_: T) {}\n-   |             ---------- required by this bound in `check`\n-...\n LL |     check(mA::TV);\n    |           ^^^^^^ the trait `Impossible` is not implemented for `c::Item`\n+   |\n+note: required by a bound in `check`\n+  --> $DIR/namespace-mix.rs:21:13\n+   |\n+LL | fn check<T: Impossible>(_: T) {}\n+   |             ^^^^^^^^^^ required by this bound in `check`\n \n error[E0277]: the trait bound `namespace_mix::c::Item: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:127:11\n    |\n-LL | fn check<T: Impossible>(_: T) {}\n-   |             ---------- required by this bound in `check`\n-...\n LL |     check(xm9::TV{});\n    |           ^^^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n+   |\n+note: required by a bound in `check`\n+  --> $DIR/namespace-mix.rs:21:13\n+   |\n+LL | fn check<T: Impossible>(_: T) {}\n+   |             ^^^^^^^^^^ required by this bound in `check`\n \n error[E0277]: the trait bound `fn() -> namespace_mix::c::E {namespace_mix::xm7::TV}: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:128:11\n    |\n-LL | fn check<T: Impossible>(_: T) {}\n-   |             ---------- required by this bound in `check`\n-...\n LL |     check(xm9::TV);\n    |           ^^^^^^^ the trait `Impossible` is not implemented for `fn() -> namespace_mix::c::E {namespace_mix::xm7::TV}`\n+   |\n+note: required by a bound in `check`\n+  --> $DIR/namespace-mix.rs:21:13\n+   |\n+LL | fn check<T: Impossible>(_: T) {}\n+   |             ^^^^^^^^^^ required by this bound in `check`\n \n error[E0277]: the trait bound `namespace_mix::c::E: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:129:11\n    |\n-LL | fn check<T: Impossible>(_: T) {}\n-   |             ---------- required by this bound in `check`\n-...\n LL |     check(xmA::TV{});\n    |           ^^^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::E`\n+   |\n+note: required by a bound in `check`\n+  --> $DIR/namespace-mix.rs:21:13\n+   |\n+LL | fn check<T: Impossible>(_: T) {}\n+   |             ^^^^^^^^^^ required by this bound in `check`\n \n error[E0277]: the trait bound `namespace_mix::c::Item: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:130:11\n    |\n-LL | fn check<T: Impossible>(_: T) {}\n-   |             ---------- required by this bound in `check`\n-...\n LL |     check(xmA::TV);\n    |           ^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n+   |\n+note: required by a bound in `check`\n+  --> $DIR/namespace-mix.rs:21:13\n+   |\n+LL | fn check<T: Impossible>(_: T) {}\n+   |             ^^^^^^^^^^ required by this bound in `check`\n \n error[E0277]: the trait bound `c::Item: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:143:11\n    |\n-LL | fn check<T: Impossible>(_: T) {}\n-   |             ---------- required by this bound in `check`\n-...\n LL |     check(mB::UV{});\n    |           ^^^^^^^^ the trait `Impossible` is not implemented for `c::Item`\n+   |\n+note: required by a bound in `check`\n+  --> $DIR/namespace-mix.rs:21:13\n+   |\n+LL | fn check<T: Impossible>(_: T) {}\n+   |             ^^^^^^^^^^ required by this bound in `check`\n \n error[E0277]: the trait bound `c::E: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:144:11\n    |\n-LL | fn check<T: Impossible>(_: T) {}\n-   |             ---------- required by this bound in `check`\n-...\n LL |     check(mB::UV);\n    |           ^^^^^^ the trait `Impossible` is not implemented for `c::E`\n+   |\n+note: required by a bound in `check`\n+  --> $DIR/namespace-mix.rs:21:13\n+   |\n+LL | fn check<T: Impossible>(_: T) {}\n+   |             ^^^^^^^^^^ required by this bound in `check`\n \n error[E0277]: the trait bound `c::E: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:145:11\n    |\n-LL | fn check<T: Impossible>(_: T) {}\n-   |             ---------- required by this bound in `check`\n-...\n LL |     check(mC::UV{});\n    |           ^^^^^^^^ the trait `Impossible` is not implemented for `c::E`\n+   |\n+note: required by a bound in `check`\n+  --> $DIR/namespace-mix.rs:21:13\n+   |\n+LL | fn check<T: Impossible>(_: T) {}\n+   |             ^^^^^^^^^^ required by this bound in `check`\n \n error[E0277]: the trait bound `c::Item: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:146:11\n    |\n-LL | fn check<T: Impossible>(_: T) {}\n-   |             ---------- required by this bound in `check`\n-...\n LL |     check(mC::UV);\n    |           ^^^^^^ the trait `Impossible` is not implemented for `c::Item`\n+   |\n+note: required by a bound in `check`\n+  --> $DIR/namespace-mix.rs:21:13\n+   |\n+LL | fn check<T: Impossible>(_: T) {}\n+   |             ^^^^^^^^^^ required by this bound in `check`\n \n error[E0277]: the trait bound `namespace_mix::c::Item: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:149:11\n    |\n-LL | fn check<T: Impossible>(_: T) {}\n-   |             ---------- required by this bound in `check`\n-...\n LL |     check(xmB::UV{});\n    |           ^^^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n+   |\n+note: required by a bound in `check`\n+  --> $DIR/namespace-mix.rs:21:13\n+   |\n+LL | fn check<T: Impossible>(_: T) {}\n+   |             ^^^^^^^^^^ required by this bound in `check`\n \n error[E0277]: the trait bound `namespace_mix::c::E: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:150:11\n    |\n-LL | fn check<T: Impossible>(_: T) {}\n-   |             ---------- required by this bound in `check`\n-...\n LL |     check(xmB::UV);\n    |           ^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::E`\n+   |\n+note: required by a bound in `check`\n+  --> $DIR/namespace-mix.rs:21:13\n+   |\n+LL | fn check<T: Impossible>(_: T) {}\n+   |             ^^^^^^^^^^ required by this bound in `check`\n \n error[E0277]: the trait bound `namespace_mix::c::E: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:151:11\n    |\n-LL | fn check<T: Impossible>(_: T) {}\n-   |             ---------- required by this bound in `check`\n-...\n LL |     check(xmC::UV{});\n    |           ^^^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::E`\n+   |\n+note: required by a bound in `check`\n+  --> $DIR/namespace-mix.rs:21:13\n+   |\n+LL | fn check<T: Impossible>(_: T) {}\n+   |             ^^^^^^^^^^ required by this bound in `check`\n \n error[E0277]: the trait bound `namespace_mix::c::Item: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:152:11\n    |\n-LL | fn check<T: Impossible>(_: T) {}\n-   |             ---------- required by this bound in `check`\n-...\n LL |     check(xmC::UV);\n    |           ^^^^^^^ the trait `Impossible` is not implemented for `namespace_mix::c::Item`\n+   |\n+note: required by a bound in `check`\n+  --> $DIR/namespace-mix.rs:21:13\n+   |\n+LL | fn check<T: Impossible>(_: T) {}\n+   |             ^^^^^^^^^^ required by this bound in `check`\n \n error: aborting due to 48 previous errors\n "}, {"sha": "70333c5f324f7051831b30f038ef305eb62ab685", "filename": "src/test/ui/never_type/defaulted-never-note.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fnever_type%2Fdefaulted-never-note.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fnever_type%2Fdefaulted-never-note.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fdefaulted-never-note.rs?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -20,7 +20,7 @@ impl ImplementedForUnitButNotNever for () {}\n \n fn foo<T: ImplementedForUnitButNotNever>(_t: T) {}\n //~^ NOTE required by this bound in `foo`\n-\n+//~| NOTE required by a bound in `foo`\n fn smeg() {\n     let _x = return;\n     foo(_x);"}, {"sha": "109a81a5ca0474da7707061650bacffc63c362b4", "filename": "src/test/ui/never_type/defaulted-never-note.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fnever_type%2Fdefaulted-never-note.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fnever_type%2Fdefaulted-never-note.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fdefaulted-never-note.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,15 +1,17 @@\n error[E0277]: the trait bound `!: ImplementedForUnitButNotNever` is not satisfied\n   --> $DIR/defaulted-never-note.rs:26:5\n    |\n-LL | fn foo<T: ImplementedForUnitButNotNever>(_t: T) {}\n-   |           ----------------------------- required by this bound in `foo`\n-...\n LL |     foo(_x);\n    |     ^^^ the trait `ImplementedForUnitButNotNever` is not implemented for `!`\n    |\n    = note: this trait is implemented for `()`.\n    = note: this error might have been caused by changes to Rust's type-inference algorithm (see issue #48950 <https://github.com/rust-lang/rust/issues/48950> for more information).\n    = help: did you intend to use the type `()` here instead?\n+note: required by a bound in `foo`\n+  --> $DIR/defaulted-never-note.rs:21:11\n+   |\n+LL | fn foo<T: ImplementedForUnitButNotNever>(_t: T) {}\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `foo`\n \n error: aborting due to previous error\n "}, {"sha": "38f299d11c1b2dbb1da826cdc73ef52e0930fd57", "filename": "src/test/ui/never_type/issue-51506.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fnever_type%2Fissue-51506.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fnever_type%2Fissue-51506.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fissue-51506.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,13 +1,15 @@\n error[E0277]: `!` is not an iterator\n   --> $DIR/issue-51506.rs:13:5\n    |\n-LL |     type Out: Iterator<Item = u32>;\n-   |               -------------------- required by this bound in `Trait::Out`\n-...\n LL |     default type Out = !;\n    |     ^^^^^^^^^^^^^^^^^^^^^ `!` is not an iterator\n    |\n    = help: the trait `Iterator` is not implemented for `!`\n+note: required by a bound in `Trait::Out`\n+  --> $DIR/issue-51506.rs:7:15\n+   |\n+LL |     type Out: Iterator<Item = u32>;\n+   |               ^^^^^^^^^^^^^^^^^^^^ required by this bound in `Trait::Out`\n \n error: aborting due to previous error\n "}, {"sha": "80708c989fcf7ba1b3f19395506a19fa87b0a2a2", "filename": "src/test/ui/no-send-res-ports.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fno-send-res-ports.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fno-send-res-ports.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno-send-res-ports.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -11,11 +11,6 @@ LL | |         println!(\"{:?}\", y);\n LL | |     });\n    | |_____- within this `[closure@$DIR/no-send-res-ports.rs:25:19: 29:6]`\n    |\n-  ::: $SRC_DIR/std/src/thread/mod.rs:LL:COL\n-   |\n-LL |       F: Send + 'static,\n-   |          ---- required by this bound in `spawn`\n-   |\n    = help: within `[closure@$DIR/no-send-res-ports.rs:25:19: 29:6]`, the trait `Send` is not implemented for `Rc<()>`\n note: required because it appears within the type `Port<()>`\n   --> $DIR/no-send-res-ports.rs:5:8\n@@ -28,6 +23,11 @@ note: required because it appears within the type `Foo`\n LL |     struct Foo {\n    |            ^^^\n    = note: required because it appears within the type `[closure@$DIR/no-send-res-ports.rs:25:19: 29:6]`\n+note: required by a bound in `spawn`\n+  --> $SRC_DIR/std/src/thread/mod.rs:LL:COL\n+   |\n+LL |     F: Send + 'static,\n+   |        ^^^^ required by this bound in `spawn`\n \n error: aborting due to previous error\n "}, {"sha": "814f3473828e3bd406ee2af575b7735b31c8dafa", "filename": "src/test/ui/no_send-enum.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fno_send-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fno_send-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno_send-enum.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,9 +1,6 @@\n error[E0277]: `NoSend` cannot be sent between threads safely\n   --> $DIR/no_send-enum.rs:16:5\n    |\n-LL | fn bar<T: Send>(_: T) {}\n-   |           ---- required by this bound in `bar`\n-...\n LL |     bar(x);\n    |     ^^^ `NoSend` cannot be sent between threads safely\n    |\n@@ -13,6 +10,11 @@ note: required because it appears within the type `Foo`\n    |\n LL | enum Foo {\n    |      ^^^\n+note: required by a bound in `bar`\n+  --> $DIR/no_send-enum.rs:12:11\n+   |\n+LL | fn bar<T: Send>(_: T) {}\n+   |           ^^^^ required by this bound in `bar`\n \n error: aborting due to previous error\n "}, {"sha": "f8be5e76f7a1443b80c06c9f0bfac754ae1d3b5b", "filename": "src/test/ui/no_send-rc.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fno_send-rc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fno_send-rc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno_send-rc.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,13 +1,15 @@\n error[E0277]: `Rc<{integer}>` cannot be sent between threads safely\n   --> $DIR/no_send-rc.rs:7:9\n    |\n-LL | fn bar<T: Send>(_: T) {}\n-   |           ---- required by this bound in `bar`\n-...\n LL |     bar(x);\n    |         ^ `Rc<{integer}>` cannot be sent between threads safely\n    |\n    = help: the trait `Send` is not implemented for `Rc<{integer}>`\n+note: required by a bound in `bar`\n+  --> $DIR/no_send-rc.rs:3:11\n+   |\n+LL | fn bar<T: Send>(_: T) {}\n+   |           ^^^^ required by this bound in `bar`\n \n error: aborting due to previous error\n "}, {"sha": "2f8cf3569aeeed5c286d4f6bbe62bfcb26e62611", "filename": "src/test/ui/no_send-struct.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fno_send-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fno_send-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno_send-struct.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,13 +1,15 @@\n error[E0277]: `Foo` cannot be sent between threads safely\n   --> $DIR/no_send-struct.rs:15:9\n    |\n-LL | fn bar<T: Send>(_: T) {}\n-   |           ---- required by this bound in `bar`\n-...\n LL |     bar(x);\n    |         ^ `Foo` cannot be sent between threads safely\n    |\n    = help: the trait `Send` is not implemented for `Foo`\n+note: required by a bound in `bar`\n+  --> $DIR/no_send-struct.rs:11:11\n+   |\n+LL | fn bar<T: Send>(_: T) {}\n+   |           ^^^^ required by this bound in `bar`\n \n error: aborting due to previous error\n "}, {"sha": "ad837863be9ed428659cb133594e770251508d5a", "filename": "src/test/ui/no_share-enum.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fno_share-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fno_share-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno_share-enum.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,9 +1,6 @@\n error[E0277]: `NoSync` cannot be shared between threads safely\n   --> $DIR/no_share-enum.rs:14:5\n    |\n-LL | fn bar<T: Sync>(_: T) {}\n-   |           ---- required by this bound in `bar`\n-...\n LL |     bar(x);\n    |     ^^^ `NoSync` cannot be shared between threads safely\n    |\n@@ -13,6 +10,11 @@ note: required because it appears within the type `Foo`\n    |\n LL | enum Foo { A(NoSync) }\n    |      ^^^\n+note: required by a bound in `bar`\n+  --> $DIR/no_share-enum.rs:10:11\n+   |\n+LL | fn bar<T: Sync>(_: T) {}\n+   |           ^^^^ required by this bound in `bar`\n \n error: aborting due to previous error\n "}, {"sha": "8983b0867898ad6e348889933b5dd25ab95107c1", "filename": "src/test/ui/no_share-struct.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fno_share-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fno_share-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno_share-struct.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,13 +1,15 @@\n error[E0277]: `Foo` cannot be shared between threads safely\n   --> $DIR/no_share-struct.rs:12:9\n    |\n-LL | fn bar<T: Sync>(_: T) {}\n-   |           ---- required by this bound in `bar`\n-...\n LL |     bar(x);\n    |         ^ `Foo` cannot be shared between threads safely\n    |\n    = help: the trait `Sync` is not implemented for `Foo`\n+note: required by a bound in `bar`\n+  --> $DIR/no_share-struct.rs:8:11\n+   |\n+LL | fn bar<T: Sync>(_: T) {}\n+   |           ^^^^ required by this bound in `bar`\n \n error: aborting due to previous error\n "}, {"sha": "65594702bc4db66f98c4a8d06c3757563a362a6b", "filename": "src/test/ui/not-panic/not-panic-safe-2.stderr", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-2.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,29 +1,33 @@\n error[E0277]: the type `UnsafeCell<i32>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n   --> $DIR/not-panic-safe-2.rs:10:5\n    |\n-LL | fn assert<T: UnwindSafe + ?Sized>() {}\n-   |              ---------- required by this bound in `assert`\n-...\n LL |     assert::<Rc<RefCell<i32>>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ `UnsafeCell<i32>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n    |\n    = help: within `RefCell<i32>`, the trait `RefUnwindSafe` is not implemented for `UnsafeCell<i32>`\n    = note: required because it appears within the type `RefCell<i32>`\n    = note: required because of the requirements on the impl of `UnwindSafe` for `Rc<RefCell<i32>>`\n+note: required by a bound in `assert`\n+  --> $DIR/not-panic-safe-2.rs:7:14\n+   |\n+LL | fn assert<T: UnwindSafe + ?Sized>() {}\n+   |              ^^^^^^^^^^ required by this bound in `assert`\n \n error[E0277]: the type `UnsafeCell<isize>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n   --> $DIR/not-panic-safe-2.rs:10:5\n    |\n-LL | fn assert<T: UnwindSafe + ?Sized>() {}\n-   |              ---------- required by this bound in `assert`\n-...\n LL |     assert::<Rc<RefCell<i32>>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ `UnsafeCell<isize>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n    |\n    = help: within `RefCell<i32>`, the trait `RefUnwindSafe` is not implemented for `UnsafeCell<isize>`\n    = note: required because it appears within the type `Cell<isize>`\n    = note: required because it appears within the type `RefCell<i32>`\n    = note: required because of the requirements on the impl of `UnwindSafe` for `Rc<RefCell<i32>>`\n+note: required by a bound in `assert`\n+  --> $DIR/not-panic-safe-2.rs:7:14\n+   |\n+LL | fn assert<T: UnwindSafe + ?Sized>() {}\n+   |              ^^^^^^^^^^ required by this bound in `assert`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "db3fdb25345641c661716713efb74b4c2f512947", "filename": "src/test/ui/not-panic/not-panic-safe-3.stderr", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-3.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,29 +1,33 @@\n error[E0277]: the type `UnsafeCell<i32>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n   --> $DIR/not-panic-safe-3.rs:10:5\n    |\n-LL | fn assert<T: UnwindSafe + ?Sized>() {}\n-   |              ---------- required by this bound in `assert`\n-...\n LL |     assert::<Arc<RefCell<i32>>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ `UnsafeCell<i32>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n    |\n    = help: within `RefCell<i32>`, the trait `RefUnwindSafe` is not implemented for `UnsafeCell<i32>`\n    = note: required because it appears within the type `RefCell<i32>`\n    = note: required because of the requirements on the impl of `UnwindSafe` for `Arc<RefCell<i32>>`\n+note: required by a bound in `assert`\n+  --> $DIR/not-panic-safe-3.rs:7:14\n+   |\n+LL | fn assert<T: UnwindSafe + ?Sized>() {}\n+   |              ^^^^^^^^^^ required by this bound in `assert`\n \n error[E0277]: the type `UnsafeCell<isize>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n   --> $DIR/not-panic-safe-3.rs:10:5\n    |\n-LL | fn assert<T: UnwindSafe + ?Sized>() {}\n-   |              ---------- required by this bound in `assert`\n-...\n LL |     assert::<Arc<RefCell<i32>>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ `UnsafeCell<isize>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n    |\n    = help: within `RefCell<i32>`, the trait `RefUnwindSafe` is not implemented for `UnsafeCell<isize>`\n    = note: required because it appears within the type `Cell<isize>`\n    = note: required because it appears within the type `RefCell<i32>`\n    = note: required because of the requirements on the impl of `UnwindSafe` for `Arc<RefCell<i32>>`\n+note: required by a bound in `assert`\n+  --> $DIR/not-panic-safe-3.rs:7:14\n+   |\n+LL | fn assert<T: UnwindSafe + ?Sized>() {}\n+   |              ^^^^^^^^^^ required by this bound in `assert`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "079601b39c0c0fb7163b75f4f29968bb6714cca7", "filename": "src/test/ui/not-panic/not-panic-safe-4.stderr", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-4.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,29 +1,33 @@\n error[E0277]: the type `UnsafeCell<i32>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n   --> $DIR/not-panic-safe-4.rs:9:5\n    |\n-LL | fn assert<T: UnwindSafe + ?Sized>() {}\n-   |              ---------- required by this bound in `assert`\n-...\n LL |     assert::<&RefCell<i32>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ `UnsafeCell<i32>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n    |\n    = help: within `RefCell<i32>`, the trait `RefUnwindSafe` is not implemented for `UnsafeCell<i32>`\n    = note: required because it appears within the type `RefCell<i32>`\n    = note: required because of the requirements on the impl of `UnwindSafe` for `&RefCell<i32>`\n+note: required by a bound in `assert`\n+  --> $DIR/not-panic-safe-4.rs:6:14\n+   |\n+LL | fn assert<T: UnwindSafe + ?Sized>() {}\n+   |              ^^^^^^^^^^ required by this bound in `assert`\n \n error[E0277]: the type `UnsafeCell<isize>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n   --> $DIR/not-panic-safe-4.rs:9:5\n    |\n-LL | fn assert<T: UnwindSafe + ?Sized>() {}\n-   |              ---------- required by this bound in `assert`\n-...\n LL |     assert::<&RefCell<i32>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ `UnsafeCell<isize>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n    |\n    = help: within `RefCell<i32>`, the trait `RefUnwindSafe` is not implemented for `UnsafeCell<isize>`\n    = note: required because it appears within the type `Cell<isize>`\n    = note: required because it appears within the type `RefCell<i32>`\n    = note: required because of the requirements on the impl of `UnwindSafe` for `&RefCell<i32>`\n+note: required by a bound in `assert`\n+  --> $DIR/not-panic-safe-4.rs:6:14\n+   |\n+LL | fn assert<T: UnwindSafe + ?Sized>() {}\n+   |              ^^^^^^^^^^ required by this bound in `assert`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "edd0f72dd3be4c081b07b2f104d49f1364a33b86", "filename": "src/test/ui/not-panic/not-panic-safe-5.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-5.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,14 +1,16 @@\n error[E0277]: the type `UnsafeCell<i32>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n   --> $DIR/not-panic-safe-5.rs:9:5\n    |\n-LL | fn assert<T: UnwindSafe + ?Sized>() {}\n-   |              ---------- required by this bound in `assert`\n-...\n LL |     assert::<*const UnsafeCell<i32>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `UnsafeCell<i32>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n    |\n    = help: the trait `RefUnwindSafe` is not implemented for `UnsafeCell<i32>`\n    = note: required because of the requirements on the impl of `UnwindSafe` for `*const UnsafeCell<i32>`\n+note: required by a bound in `assert`\n+  --> $DIR/not-panic-safe-5.rs:6:14\n+   |\n+LL | fn assert<T: UnwindSafe + ?Sized>() {}\n+   |              ^^^^^^^^^^ required by this bound in `assert`\n \n error: aborting due to previous error\n "}, {"sha": "f3b784a29568fcd59d846e21a29533d32b2508a6", "filename": "src/test/ui/not-panic/not-panic-safe-6.stderr", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe-6.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,29 +1,33 @@\n error[E0277]: the type `UnsafeCell<i32>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n   --> $DIR/not-panic-safe-6.rs:9:5\n    |\n-LL | fn assert<T: UnwindSafe + ?Sized>() {}\n-   |              ---------- required by this bound in `assert`\n-...\n LL |     assert::<*mut RefCell<i32>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ `UnsafeCell<i32>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n    |\n    = help: within `RefCell<i32>`, the trait `RefUnwindSafe` is not implemented for `UnsafeCell<i32>`\n    = note: required because it appears within the type `RefCell<i32>`\n    = note: required because of the requirements on the impl of `UnwindSafe` for `*mut RefCell<i32>`\n+note: required by a bound in `assert`\n+  --> $DIR/not-panic-safe-6.rs:6:14\n+   |\n+LL | fn assert<T: UnwindSafe + ?Sized>() {}\n+   |              ^^^^^^^^^^ required by this bound in `assert`\n \n error[E0277]: the type `UnsafeCell<isize>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n   --> $DIR/not-panic-safe-6.rs:9:5\n    |\n-LL | fn assert<T: UnwindSafe + ?Sized>() {}\n-   |              ---------- required by this bound in `assert`\n-...\n LL |     assert::<*mut RefCell<i32>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ `UnsafeCell<isize>` may contain interior mutability and a reference may not be safely transferrable across a catch_unwind boundary\n    |\n    = help: within `RefCell<i32>`, the trait `RefUnwindSafe` is not implemented for `UnsafeCell<isize>`\n    = note: required because it appears within the type `Cell<isize>`\n    = note: required because it appears within the type `RefCell<i32>`\n    = note: required because of the requirements on the impl of `UnwindSafe` for `*mut RefCell<i32>`\n+note: required by a bound in `assert`\n+  --> $DIR/not-panic-safe-6.rs:6:14\n+   |\n+LL | fn assert<T: UnwindSafe + ?Sized>() {}\n+   |              ^^^^^^^^^^ required by this bound in `assert`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "b95cd9173e3c0c2991f7781fcbd007a2f05d3a82", "filename": "src/test/ui/not-panic/not-panic-safe.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnot-panic%2Fnot-panic-safe.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,14 +1,16 @@\n error[E0277]: the type `&mut i32` may not be safely transferred across an unwind boundary\n   --> $DIR/not-panic-safe.rs:9:5\n    |\n-LL | fn assert<T: UnwindSafe + ?Sized>() {}\n-   |              ---------- required by this bound in `assert`\n-...\n LL |     assert::<&mut i32>();\n    |     ^^^^^^^^^^^^^^^^^^ `&mut i32` may not be safely transferred across an unwind boundary\n    |\n    = help: the trait `UnwindSafe` is not implemented for `&mut i32`\n    = note: `UnwindSafe` is implemented for `&i32`, but not for `&mut i32`\n+note: required by a bound in `assert`\n+  --> $DIR/not-panic-safe.rs:6:14\n+   |\n+LL | fn assert<T: UnwindSafe + ?Sized>() {}\n+   |              ^^^^^^^^^^ required by this bound in `assert`\n \n error: aborting due to previous error\n "}, {"sha": "1ee358ba8368e8603e15d4d6f6905888fa20dc80", "filename": "src/test/ui/not-sync.stderr", "status": "modified", "additions": 30, "deletions": 18, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fnot-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fnot-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnot-sync.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,68 +1,80 @@\n error[E0277]: `Cell<i32>` cannot be shared between threads safely\n   --> $DIR/not-sync.rs:8:12\n    |\n-LL | fn test<T: Sync>() {}\n-   |            ---- required by this bound in `test`\n-...\n LL |     test::<Cell<i32>>();\n    |            ^^^^^^^^^ `Cell<i32>` cannot be shared between threads safely\n    |\n    = help: the trait `Sync` is not implemented for `Cell<i32>`\n+note: required by a bound in `test`\n+  --> $DIR/not-sync.rs:5:12\n+   |\n+LL | fn test<T: Sync>() {}\n+   |            ^^^^ required by this bound in `test`\n \n error[E0277]: `RefCell<i32>` cannot be shared between threads safely\n   --> $DIR/not-sync.rs:10:12\n    |\n-LL | fn test<T: Sync>() {}\n-   |            ---- required by this bound in `test`\n-...\n LL |     test::<RefCell<i32>>();\n    |            ^^^^^^^^^^^^ `RefCell<i32>` cannot be shared between threads safely\n    |\n    = help: the trait `Sync` is not implemented for `RefCell<i32>`\n+note: required by a bound in `test`\n+  --> $DIR/not-sync.rs:5:12\n+   |\n+LL | fn test<T: Sync>() {}\n+   |            ^^^^ required by this bound in `test`\n \n error[E0277]: `Rc<i32>` cannot be shared between threads safely\n   --> $DIR/not-sync.rs:13:12\n    |\n-LL | fn test<T: Sync>() {}\n-   |            ---- required by this bound in `test`\n-...\n LL |     test::<Rc<i32>>();\n    |            ^^^^^^^ `Rc<i32>` cannot be shared between threads safely\n    |\n    = help: the trait `Sync` is not implemented for `Rc<i32>`\n+note: required by a bound in `test`\n+  --> $DIR/not-sync.rs:5:12\n+   |\n+LL | fn test<T: Sync>() {}\n+   |            ^^^^ required by this bound in `test`\n \n error[E0277]: `std::rc::Weak<i32>` cannot be shared between threads safely\n   --> $DIR/not-sync.rs:15:12\n    |\n-LL | fn test<T: Sync>() {}\n-   |            ---- required by this bound in `test`\n-...\n LL |     test::<Weak<i32>>();\n    |            ^^^^^^^^^ `std::rc::Weak<i32>` cannot be shared between threads safely\n    |\n    = help: the trait `Sync` is not implemented for `std::rc::Weak<i32>`\n+note: required by a bound in `test`\n+  --> $DIR/not-sync.rs:5:12\n+   |\n+LL | fn test<T: Sync>() {}\n+   |            ^^^^ required by this bound in `test`\n \n error[E0277]: `std::sync::mpsc::Receiver<i32>` cannot be shared between threads safely\n   --> $DIR/not-sync.rs:18:12\n    |\n-LL | fn test<T: Sync>() {}\n-   |            ---- required by this bound in `test`\n-...\n LL |     test::<Receiver<i32>>();\n    |            ^^^^^^^^^^^^^ `std::sync::mpsc::Receiver<i32>` cannot be shared between threads safely\n    |\n    = help: the trait `Sync` is not implemented for `std::sync::mpsc::Receiver<i32>`\n+note: required by a bound in `test`\n+  --> $DIR/not-sync.rs:5:12\n+   |\n+LL | fn test<T: Sync>() {}\n+   |            ^^^^ required by this bound in `test`\n \n error[E0277]: `Sender<i32>` cannot be shared between threads safely\n   --> $DIR/not-sync.rs:20:12\n    |\n-LL | fn test<T: Sync>() {}\n-   |            ---- required by this bound in `test`\n-...\n LL |     test::<Sender<i32>>();\n    |            ^^^^^^^^^^^ `Sender<i32>` cannot be shared between threads safely\n    |\n    = help: the trait `Sync` is not implemented for `Sender<i32>`\n+note: required by a bound in `test`\n+  --> $DIR/not-sync.rs:5:12\n+   |\n+LL | fn test<T: Sync>() {}\n+   |            ^^^^ required by this bound in `test`\n \n error: aborting due to 6 previous errors\n "}, {"sha": "bf1641167cf1184de4ee5fc1001746a1ae5e222f", "filename": "src/test/ui/object-does-not-impl-trait.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fobject-does-not-impl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fobject-does-not-impl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-does-not-impl-trait.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,10 +1,14 @@\n error[E0277]: the trait bound `Box<dyn Foo>: Foo` is not satisfied\n   --> $DIR/object-does-not-impl-trait.rs:6:44\n    |\n-LL | fn take_foo<F:Foo>(f: F) {}\n-   |               --- required by this bound in `take_foo`\n LL | fn take_object(f: Box<dyn Foo>) { take_foo(f); }\n    |                                            ^ the trait `Foo` is not implemented for `Box<dyn Foo>`\n+   |\n+note: required by a bound in `take_foo`\n+  --> $DIR/object-does-not-impl-trait.rs:5:15\n+   |\n+LL | fn take_foo<F:Foo>(f: F) {}\n+   |               ^^^ required by this bound in `take_foo`\n \n error: aborting due to previous error\n "}, {"sha": "abd156dd5ac4a74198a82f6c5c94c2773c836066", "filename": "src/test/ui/on-unimplemented/enclosing-scope.stderr", "status": "modified", "additions": 24, "deletions": 12, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fon-unimplemented%2Fenclosing-scope.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fon-unimplemented%2Fenclosing-scope.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fenclosing-scope.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,9 +1,6 @@\n error[E0277]: the trait bound `Foo: Trait` is not satisfied\n   --> $DIR/enclosing-scope.rs:14:11\n    |\n-LL |   fn f<T: Trait>(x: T) {}\n-   |           ----- required by this bound in `f`\n-...\n LL |       let x = || {\n    |  _____________-\n LL | |         f(Foo{});\n@@ -13,26 +10,32 @@ LL | |             f(Foo{});\n LL | |         };\n LL | |     };\n    | |_____- in this scope\n+   |\n+note: required by a bound in `f`\n+  --> $DIR/enclosing-scope.rs:10:9\n+   |\n+LL | fn f<T: Trait>(x: T) {}\n+   |         ^^^^^ required by this bound in `f`\n \n error[E0277]: the trait bound `Foo: Trait` is not satisfied\n   --> $DIR/enclosing-scope.rs:16:15\n    |\n-LL |   fn f<T: Trait>(x: T) {}\n-   |           ----- required by this bound in `f`\n-...\n LL |           let y = || {\n    |  _________________-\n LL | |             f(Foo{});\n    | |               ^^^^^ the trait `Trait` is not implemented for `Foo`\n LL | |         };\n    | |_________- in this scope\n+   |\n+note: required by a bound in `f`\n+  --> $DIR/enclosing-scope.rs:10:9\n+   |\n+LL | fn f<T: Trait>(x: T) {}\n+   |         ^^^^^ required by this bound in `f`\n \n error[E0277]: the trait bound `Foo: Trait` is not satisfied\n   --> $DIR/enclosing-scope.rs:22:15\n    |\n-LL |   fn f<T: Trait>(x: T) {}\n-   |           ----- required by this bound in `f`\n-LL | \n LL | / fn main() {\n LL | |     let x = || {\n LL | |         f(Foo{});\n@@ -44,13 +47,16 @@ LL | |             f(Foo{});\n LL | |     f(Foo{});\n LL | | }\n    | |_- in this scope\n+   |\n+note: required by a bound in `f`\n+  --> $DIR/enclosing-scope.rs:10:9\n+   |\n+LL | fn f<T: Trait>(x: T) {}\n+   |         ^^^^^ required by this bound in `f`\n \n error[E0277]: the trait bound `Foo: Trait` is not satisfied\n   --> $DIR/enclosing-scope.rs:26:7\n    |\n-LL |   fn f<T: Trait>(x: T) {}\n-   |           ----- required by this bound in `f`\n-LL | \n LL | / fn main() {\n LL | |     let x = || {\n LL | |         f(Foo{});\n@@ -60,6 +66,12 @@ LL | |     f(Foo{});\n    | |       ^^^^^ the trait `Trait` is not implemented for `Foo`\n LL | | }\n    | |_- in this scope\n+   |\n+note: required by a bound in `f`\n+  --> $DIR/enclosing-scope.rs:10:9\n+   |\n+LL | fn f<T: Trait>(x: T) {}\n+   |         ^^^^^ required by this bound in `f`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "4b040f1ac5aa9350218d7c6cb82ac8251a5090eb", "filename": "src/test/ui/on-unimplemented/on-trait.stderr", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-trait.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,24 +1,28 @@\n error[E0277]: the trait bound `Option<Vec<u8>>: MyFromIterator<&u8>` is not satisfied\n   --> $DIR/on-trait.rs:28:30\n    |\n-LL | fn collect<A, I: Iterator<Item=A>, B: MyFromIterator<A>>(it: I) -> B {\n-   |                                       ----------------- required by this bound in `collect`\n-...\n LL |     let y: Option<Vec<u8>> = collect(x.iter()); // this should give approximately the same error for x.iter().collect()\n    |                              ^^^^^^^ a collection of type `Option<Vec<u8>>` cannot be built from an iterator over elements of type `&u8`\n    |\n    = help: the trait `MyFromIterator<&u8>` is not implemented for `Option<Vec<u8>>`\n+note: required by a bound in `collect`\n+  --> $DIR/on-trait.rs:22:39\n+   |\n+LL | fn collect<A, I: Iterator<Item=A>, B: MyFromIterator<A>>(it: I) -> B {\n+   |                                       ^^^^^^^^^^^^^^^^^ required by this bound in `collect`\n \n error[E0277]: the trait bound `String: Foo<u8, _, u32>` is not satisfied\n   --> $DIR/on-trait.rs:31:21\n    |\n-LL | fn foobar<U: Clone, T: Foo<u8, U, u32>>() -> T {\n-   |                        --------------- required by this bound in `foobar`\n-...\n LL |     let x: String = foobar();\n    |                     ^^^^^^ test error `String` with `u8` `_` `u32` in `Foo`\n    |\n    = help: the trait `Foo<u8, _, u32>` is not implemented for `String`\n+note: required by a bound in `foobar`\n+  --> $DIR/on-trait.rs:12:24\n+   |\n+LL | fn foobar<U: Clone, T: Foo<u8, U, u32>>() -> T {\n+   |                        ^^^^^^^^^^^^^^^ required by this bound in `foobar`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "e7b5528daee920d48cd64e97bebb67751be27d9b", "filename": "src/test/ui/phantom-auto-trait.stderr", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fphantom-auto-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fphantom-auto-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fphantom-auto-trait.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,9 +1,6 @@\n error[E0277]: `T` cannot be shared between threads safely\n   --> $DIR/phantom-auto-trait.rs:21:12\n    |\n-LL | fn is_zen<T: Zen>(_: T) {}\n-   |              --- required by this bound in `is_zen`\n-...\n LL |     is_zen(x)\n    |            ^ `T` cannot be shared between threads safely\n    |\n@@ -18,6 +15,11 @@ note: required because it appears within the type `Guard<'_, T>`\n    |\n LL | struct Guard<'a, T: 'a> {\n    |        ^^^^^\n+note: required by a bound in `is_zen`\n+  --> $DIR/phantom-auto-trait.rs:18:14\n+   |\n+LL | fn is_zen<T: Zen>(_: T) {}\n+   |              ^^^ required by this bound in `is_zen`\n help: consider restricting type parameter `T`\n    |\n LL | fn not_sync<T: std::marker::Sync>(x: Guard<T>) {\n@@ -26,9 +28,6 @@ LL | fn not_sync<T: std::marker::Sync>(x: Guard<T>) {\n error[E0277]: `T` cannot be shared between threads safely\n   --> $DIR/phantom-auto-trait.rs:26:12\n    |\n-LL | fn is_zen<T: Zen>(_: T) {}\n-   |              --- required by this bound in `is_zen`\n-...\n LL |     is_zen(x)\n    |            ^ `T` cannot be shared between threads safely\n    |\n@@ -48,6 +47,11 @@ note: required because it appears within the type `Nested<Guard<'_, T>>`\n    |\n LL | struct Nested<T>(T);\n    |        ^^^^^^\n+note: required by a bound in `is_zen`\n+  --> $DIR/phantom-auto-trait.rs:18:14\n+   |\n+LL | fn is_zen<T: Zen>(_: T) {}\n+   |              ^^^ required by this bound in `is_zen`\n help: consider restricting type parameter `T`\n    |\n LL | fn nested_not_sync<T: std::marker::Sync>(x: Nested<Guard<T>>) {"}, {"sha": "ff494d7d4b80632584f56787b464cbad908b1f2a", "filename": "src/test/ui/range/range-1.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Frange%2Frange-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Frange%2Frange-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Frange-1.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -24,12 +24,12 @@ error[E0277]: the size for values of type `[{integer}]` cannot be known at compi\n LL |     let range = *arr..;\n    |                 ^^^^^^ doesn't have a size known at compile-time\n    |\n-  ::: $SRC_DIR/core/src/ops/range.rs:LL:COL\n+   = help: the trait `Sized` is not implemented for `[{integer}]`\n+note: required by a bound in `RangeFrom`\n+  --> $SRC_DIR/core/src/ops/range.rs:LL:COL\n    |\n LL | pub struct RangeFrom<Idx> {\n-   |                      --- required by this bound in `RangeFrom`\n-   |\n-   = help: the trait `Sized` is not implemented for `[{integer}]`\n+   |                      ^^^ required by this bound in `RangeFrom`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "8ee154ce57ba5586c12571f83ec2466e9e0a81c9", "filename": "src/test/ui/recursion/recursive-requirements.stderr", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Frecursion%2Frecursive-requirements.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Frecursion%2Frecursive-requirements.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Frecursive-requirements.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,9 +1,6 @@\n error[E0277]: `*const Bar` cannot be shared between threads safely\n   --> $DIR/recursive-requirements.rs:16:12\n    |\n-LL | struct AssertSync<T: Sync>(PhantomData<T>);\n-   |                      ---- required by this bound in `AssertSync`\n-...\n LL |     let _: AssertSync<Foo> = unimplemented!();\n    |            ^^^^^^^^^^^^^^^ `*const Bar` cannot be shared between threads safely\n    |\n@@ -13,13 +10,15 @@ note: required because it appears within the type `Foo`\n    |\n LL | pub struct Foo {\n    |            ^^^\n+note: required by a bound in `AssertSync`\n+  --> $DIR/recursive-requirements.rs:3:22\n+   |\n+LL | struct AssertSync<T: Sync>(PhantomData<T>);\n+   |                      ^^^^ required by this bound in `AssertSync`\n \n error[E0277]: `*const Foo` cannot be shared between threads safely\n   --> $DIR/recursive-requirements.rs:16:12\n    |\n-LL | struct AssertSync<T: Sync>(PhantomData<T>);\n-   |                      ---- required by this bound in `AssertSync`\n-...\n LL |     let _: AssertSync<Foo> = unimplemented!();\n    |            ^^^^^^^^^^^^^^^ `*const Foo` cannot be shared between threads safely\n    |\n@@ -35,6 +34,11 @@ note: required because it appears within the type `Foo`\n    |\n LL | pub struct Foo {\n    |            ^^^\n+note: required by a bound in `AssertSync`\n+  --> $DIR/recursive-requirements.rs:3:22\n+   |\n+LL | struct AssertSync<T: Sync>(PhantomData<T>);\n+   |                      ^^^^ required by this bound in `AssertSync`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "f8eaf61d7d7eca08309a021653ba9271f35142eb", "filename": "src/test/ui/rfc-1937-termination-trait/termination-trait-test-wrong-type.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-test-wrong-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-test-wrong-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-test-wrong-type.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -8,12 +8,12 @@ LL | |     \"0\".parse()\n LL | | }\n    | |_^ `main` can only return types that implement `Termination`\n    |\n-  ::: $SRC_DIR/test/src/lib.rs:LL:COL\n-   |\n-LL |   pub fn assert_test_result<T: Termination>(result: T) {\n-   |                                ----------- required by this bound in `assert_test_result`\n-   |\n    = help: the trait `Termination` is not implemented for `Result<f32, ParseFloatError>`\n+note: required by a bound in `assert_test_result`\n+  --> $SRC_DIR/test/src/lib.rs:LL:COL\n+   |\n+LL | pub fn assert_test_result<T: Termination>(result: T) {\n+   |                              ^^^^^^^^^^^ required by this bound in `assert_test_result`\n    = note: this error originates in the attribute macro `test` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "ada29ba3f8b4e0a1743fd1bb6da995d14a296ed5", "filename": "src/test/ui/rfc-2632-const-trait-impl/assoc-type.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fassoc-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fassoc-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fassoc-type.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,13 +1,15 @@\n error[E0277]: cannot add `NonConstAdd` to `NonConstAdd`\n   --> $DIR/assoc-type.rs:21:5\n    |\n-LL |     type Bar: std::ops::Add;\n-   |               ------------- required by this bound in `Foo::Bar`\n-...\n LL |     type Bar = NonConstAdd;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `NonConstAdd + NonConstAdd`\n    |\n    = help: the trait `Add` is not implemented for `NonConstAdd`\n+note: required by a bound in `Foo::Bar`\n+  --> $DIR/assoc-type.rs:17:15\n+   |\n+LL |     type Bar: std::ops::Add;\n+   |               ^^^^^^^^^^^^^ required by this bound in `Foo::Bar`\n help: consider introducing a `where` bound, but there might be an alternative better way to express this requirement\n    |\n LL | impl const Foo for NonConstAdd where NonConstAdd: Add {"}, {"sha": "7cc54e0129a53e374e3db164eaa2e9fdfe5ca90d", "filename": "src/test/ui/rfc-2632-const-trait-impl/call-generic-method-nonconst.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-nonconst.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-nonconst.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-nonconst.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,13 +1,15 @@\n error[E0277]: can't compare `S` with `S`\n   --> $DIR/call-generic-method-nonconst.rs:19:34\n    |\n-LL | const fn equals_self<T: PartialEq>(t: &T) -> bool {\n-   |                         --------- required by this bound in `equals_self`\n-...\n LL | pub const EQ: bool = equals_self(&S);\n    |                                  ^^ no implementation for `S == S`\n    |\n    = help: the trait `PartialEq` is not implemented for `S`\n+note: required by a bound in `equals_self`\n+  --> $DIR/call-generic-method-nonconst.rs:12:25\n+   |\n+LL | const fn equals_self<T: PartialEq>(t: &T) -> bool {\n+   |                         ^^^^^^^^^ required by this bound in `equals_self`\n \n error: aborting due to previous error\n "}, {"sha": "81c0c4a78752313e925435f7632f8c2515d2d0f0", "filename": "src/test/ui/rfcs/rfc-2396-target_feature-11/fn-traits.stderr", "status": "modified", "additions": 30, "deletions": 18, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffn-traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffn-traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffn-traits.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,80 +1,92 @@\n error[E0277]: expected a `Fn<()>` closure, found `fn() {foo}`\n   --> $DIR/fn-traits.rs:24:10\n    |\n-LL | fn call(f: impl Fn()) {\n-   |                 ---- required by this bound in `call`\n-...\n LL |     call(foo);\n    |          ^^^ expected an `Fn<()>` closure, found `fn() {foo}`\n    |\n    = help: the trait `Fn<()>` is not implemented for `fn() {foo}`\n    = note: wrap the `fn() {foo}` in a closure with no arguments: `|| { /* code */ }`\n    = note: `#[target_feature]` functions do not implement the `Fn` traits\n+note: required by a bound in `call`\n+  --> $DIR/fn-traits.rs:11:17\n+   |\n+LL | fn call(f: impl Fn()) {\n+   |                 ^^^^ required by this bound in `call`\n \n error[E0277]: expected a `FnMut<()>` closure, found `fn() {foo}`\n   --> $DIR/fn-traits.rs:25:14\n    |\n-LL | fn call_mut(f: impl FnMut()) {\n-   |                     ------- required by this bound in `call_mut`\n-...\n LL |     call_mut(foo);\n    |              ^^^ expected an `FnMut<()>` closure, found `fn() {foo}`\n    |\n    = help: the trait `FnMut<()>` is not implemented for `fn() {foo}`\n    = note: wrap the `fn() {foo}` in a closure with no arguments: `|| { /* code */ }`\n    = note: `#[target_feature]` functions do not implement the `Fn` traits\n+note: required by a bound in `call_mut`\n+  --> $DIR/fn-traits.rs:15:21\n+   |\n+LL | fn call_mut(f: impl FnMut()) {\n+   |                     ^^^^^^^ required by this bound in `call_mut`\n \n error[E0277]: expected a `FnOnce<()>` closure, found `fn() {foo}`\n   --> $DIR/fn-traits.rs:26:15\n    |\n-LL | fn call_once(f: impl FnOnce()) {\n-   |                      -------- required by this bound in `call_once`\n-...\n LL |     call_once(foo);\n    |               ^^^ expected an `FnOnce<()>` closure, found `fn() {foo}`\n    |\n    = help: the trait `FnOnce<()>` is not implemented for `fn() {foo}`\n    = note: wrap the `fn() {foo}` in a closure with no arguments: `|| { /* code */ }`\n    = note: `#[target_feature]` functions do not implement the `Fn` traits\n+note: required by a bound in `call_once`\n+  --> $DIR/fn-traits.rs:19:22\n+   |\n+LL | fn call_once(f: impl FnOnce()) {\n+   |                      ^^^^^^^^ required by this bound in `call_once`\n \n error[E0277]: expected a `Fn<()>` closure, found `unsafe fn() {foo_unsafe}`\n   --> $DIR/fn-traits.rs:28:10\n    |\n-LL | fn call(f: impl Fn()) {\n-   |                 ---- required by this bound in `call`\n-...\n LL |     call(foo_unsafe);\n    |          ^^^^^^^^^^ expected an `Fn<()>` closure, found `unsafe fn() {foo_unsafe}`\n    |\n    = help: the trait `Fn<()>` is not implemented for `unsafe fn() {foo_unsafe}`\n    = note: wrap the `unsafe fn() {foo_unsafe}` in a closure with no arguments: `|| { /* code */ }`\n    = note: `#[target_feature]` functions do not implement the `Fn` traits\n+note: required by a bound in `call`\n+  --> $DIR/fn-traits.rs:11:17\n+   |\n+LL | fn call(f: impl Fn()) {\n+   |                 ^^^^ required by this bound in `call`\n \n error[E0277]: expected a `FnMut<()>` closure, found `unsafe fn() {foo_unsafe}`\n   --> $DIR/fn-traits.rs:30:14\n    |\n-LL | fn call_mut(f: impl FnMut()) {\n-   |                     ------- required by this bound in `call_mut`\n-...\n LL |     call_mut(foo_unsafe);\n    |              ^^^^^^^^^^ expected an `FnMut<()>` closure, found `unsafe fn() {foo_unsafe}`\n    |\n    = help: the trait `FnMut<()>` is not implemented for `unsafe fn() {foo_unsafe}`\n    = note: wrap the `unsafe fn() {foo_unsafe}` in a closure with no arguments: `|| { /* code */ }`\n    = note: `#[target_feature]` functions do not implement the `Fn` traits\n+note: required by a bound in `call_mut`\n+  --> $DIR/fn-traits.rs:15:21\n+   |\n+LL | fn call_mut(f: impl FnMut()) {\n+   |                     ^^^^^^^ required by this bound in `call_mut`\n \n error[E0277]: expected a `FnOnce<()>` closure, found `unsafe fn() {foo_unsafe}`\n   --> $DIR/fn-traits.rs:32:15\n    |\n-LL | fn call_once(f: impl FnOnce()) {\n-   |                      -------- required by this bound in `call_once`\n-...\n LL |     call_once(foo_unsafe);\n    |               ^^^^^^^^^^ expected an `FnOnce<()>` closure, found `unsafe fn() {foo_unsafe}`\n    |\n    = help: the trait `FnOnce<()>` is not implemented for `unsafe fn() {foo_unsafe}`\n    = note: wrap the `unsafe fn() {foo_unsafe}` in a closure with no arguments: `|| { /* code */ }`\n    = note: `#[target_feature]` functions do not implement the `Fn` traits\n+note: required by a bound in `call_once`\n+  --> $DIR/fn-traits.rs:19:22\n+   |\n+LL | fn call_once(f: impl FnOnce()) {\n+   |                      ^^^^^^^^ required by this bound in `call_once`\n \n error: aborting due to 6 previous errors\n "}, {"sha": "b3dba0d552a0baf0b19e2daf921f86fffc10d2a6", "filename": "src/test/ui/specialization/deafult-associated-type-bound-1.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-associated-type-bound-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-associated-type-bound-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-associated-type-bound-1.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -11,11 +11,14 @@ LL | #![feature(specialization)]\n error[E0277]: the trait bound `str: Clone` is not satisfied\n   --> $DIR/deafult-associated-type-bound-1.rs:19:5\n    |\n-LL |     type U: Clone;\n-   |             ----- required by this bound in `X::U`\n-...\n LL |     default type U = str;\n    |     ^^^^^^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `str`\n+   |\n+note: required by a bound in `X::U`\n+  --> $DIR/deafult-associated-type-bound-1.rs:9:13\n+   |\n+LL |     type U: Clone;\n+   |             ^^^^^ required by this bound in `X::U`\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "d425fae6dc34f45cc5465c347d548c2913a956a5", "filename": "src/test/ui/specialization/deafult-associated-type-bound-2.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-associated-type-bound-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-associated-type-bound-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-associated-type-bound-2.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -11,13 +11,15 @@ LL | #![feature(specialization)]\n error[E0277]: can't compare `&'static B` with `B`\n   --> $DIR/deafult-associated-type-bound-2.rs:16:5\n    |\n-LL |     type U: PartialEq<T>;\n-   |             ------------ required by this bound in `X::U`\n-...\n LL |     default type U = &'static B;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `&'static B == B`\n    |\n    = help: the trait `PartialEq<B>` is not implemented for `&'static B`\n+note: required by a bound in `X::U`\n+  --> $DIR/deafult-associated-type-bound-2.rs:6:13\n+   |\n+LL |     type U: PartialEq<T>;\n+   |             ^^^^^^^^^^^^ required by this bound in `X::U`\n help: consider introducing a `where` bound, but there might be an alternative better way to express this requirement\n    |\n LL | impl<B: 'static, T> X<B> for T where &'static B: PartialEq<B> {"}, {"sha": "8cfce7feffc084dbc55485ba9f85a1c86d706bd6", "filename": "src/test/ui/specialization/deafult-generic-associated-type-bound.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-generic-associated-type-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-generic-associated-type-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdeafult-generic-associated-type-bound.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -11,13 +11,15 @@ LL | #![feature(specialization)]\n error[E0277]: can't compare `T` with `T`\n   --> $DIR/deafult-generic-associated-type-bound.rs:18:5\n    |\n-LL |     type U<'a>: PartialEq<&'a Self> where Self: 'a;\n-   |                 ------------------- required by this bound in `X::U`\n-...\n LL |     default type U<'a> = &'a T;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `T == T`\n    |\n    = note: required because of the requirements on the impl of `PartialEq` for `&'a T`\n+note: required by a bound in `X::U`\n+  --> $DIR/deafult-generic-associated-type-bound.rs:8:17\n+   |\n+LL |     type U<'a>: PartialEq<&'a Self> where Self: 'a;\n+   |                 ^^^^^^^^^^^^^^^^^^^ required by this bound in `X::U`\n help: consider further restricting this bound\n    |\n LL | impl<T: 'static + std::cmp::PartialEq> X for T {"}, {"sha": "a8fdbc5288411ffc891a8f3c04ea82c40032878f", "filename": "src/test/ui/specialization/defaultimpl/specialization-wfcheck.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-wfcheck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-wfcheck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-wfcheck.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -11,12 +11,14 @@ LL | #![feature(specialization)]\n error[E0277]: the trait bound `U: Eq` is not satisfied\n   --> $DIR/specialization-wfcheck.rs:7:17\n    |\n-LL | trait Foo<'a, T: Eq + 'a> { }\n-   |                  -- required by this bound in `Foo`\n-LL | \n LL | default impl<U> Foo<'static, U> for () {}\n    |                 ^^^^^^^^^^^^^^^ the trait `Eq` is not implemented for `U`\n    |\n+note: required by a bound in `Foo`\n+  --> $DIR/specialization-wfcheck.rs:5:18\n+   |\n+LL | trait Foo<'a, T: Eq + 'a> { }\n+   |                  ^^ required by this bound in `Foo`\n help: consider restricting type parameter `U`\n    |\n LL | default impl<U: std::cmp::Eq> Foo<'static, U> for () {}"}, {"sha": "44e7581f5cad77819e40661a1449c9f76f7a04b2", "filename": "src/test/ui/specialization/issue-33017.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fspecialization%2Fissue-33017.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fspecialization%2Fissue-33017.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-33017.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,12 +1,14 @@\n error[E0277]: the trait bound `T: Copy` is not satisfied\n   --> $DIR/issue-33017.rs:12:5\n    |\n-LL |     type Output: From<Self> + Copy + Into<Self>;\n-   |                               ---- required by this bound in `UncheckedCopy::Output`\n-...\n LL |     default type Output = Self;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `T`\n    |\n+note: required by a bound in `UncheckedCopy::Output`\n+  --> $DIR/issue-33017.rs:8:31\n+   |\n+LL |     type Output: From<Self> + Copy + Into<Self>;\n+   |                               ^^^^ required by this bound in `UncheckedCopy::Output`\n help: consider restricting type parameter `T`\n    |\n LL | impl<T: std::marker::Copy> UncheckedCopy for T {"}, {"sha": "d5452e1d513edc087e55520f10cfd222c61e1177", "filename": "src/test/ui/specialization/issue-38091.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fspecialization%2Fissue-38091.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fspecialization%2Fissue-38091.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-38091.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -11,11 +11,14 @@ LL | #![feature(specialization)]\n error[E0277]: the trait bound `(): Valid` is not satisfied\n   --> $DIR/issue-38091.rs:12:5\n    |\n-LL |     type Ty: Valid;\n-   |              ----- required by this bound in `Iterate::Ty`\n-...\n LL |     default type Ty = ();\n    |     ^^^^^^^^^^^^^^^^^^^^^ the trait `Valid` is not implemented for `()`\n+   |\n+note: required by a bound in `Iterate::Ty`\n+  --> $DIR/issue-38091.rs:5:14\n+   |\n+LL |     type Ty: Valid;\n+   |              ^^^^^ required by this bound in `Iterate::Ty`\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "114504b04394147cbd92bf1ee480812c08cd0059", "filename": "src/test/ui/specialization/issue-44861.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fspecialization%2Fissue-44861.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fspecialization%2Fissue-44861.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-44861.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,11 +1,14 @@\n error[E0277]: the trait bound `(): CoerceUnsized<*const [u8]>` is not satisfied\n   --> $DIR/issue-44861.rs:21:5\n    |\n-LL |     type Data2: CoerceUnsized<*const [u8]>;\n-   |                 -------------------------- required by this bound in `Smartass::Data2`\n-...\n LL |     default type Data2 = ();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ the trait `CoerceUnsized<*const [u8]>` is not implemented for `()`\n+   |\n+note: required by a bound in `Smartass::Data2`\n+  --> $DIR/issue-44861.rs:12:17\n+   |\n+LL |     type Data2: CoerceUnsized<*const [u8]>;\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Smartass::Data2`\n \n error: aborting due to previous error\n "}, {"sha": "606d22ed07be76466a45b0187b51b8037db7a76b", "filename": "src/test/ui/specialization/issue-59435.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fspecialization%2Fissue-59435.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fspecialization%2Fissue-59435.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-59435.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,11 +1,14 @@\n error[E0277]: the trait bound `MyStruct: Default` is not satisfied\n   --> $DIR/issue-59435.rs:11:5\n    |\n-LL |     type MyType: Default;\n-   |                  ------- required by this bound in `MyTrait::MyType`\n-...\n LL |     default type MyType = MyStruct;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Default` is not implemented for `MyStruct`\n+   |\n+note: required by a bound in `MyTrait::MyType`\n+  --> $DIR/issue-59435.rs:7:18\n+   |\n+LL |     type MyType: Default;\n+   |                  ^^^^^^^ required by this bound in `MyTrait::MyType`\n \n error: aborting due to previous error\n "}, {"sha": "3e49c8394ab0a06c4c685c0bdf2527428da3eb4b", "filename": "src/test/ui/str/str-mut-idx.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fstr%2Fstr-mut-idx.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fstr%2Fstr-mut-idx.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstr%2Fstr-mut-idx.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,13 +1,15 @@\n error[E0277]: the size for values of type `str` cannot be known at compilation time\n   --> $DIR/str-mut-idx.rs:4:15\n    |\n-LL | fn bot<T>() -> T { loop {} }\n-   |        - required by this bound in `bot`\n-...\n LL |     s[1..2] = bot();\n    |               ^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `str`\n+note: required by a bound in `bot`\n+  --> $DIR/str-mut-idx.rs:1:8\n+   |\n+LL | fn bot<T>() -> T { loop {} }\n+   |        ^ required by this bound in `bot`\n help: consider relaxing the implicit `Sized` restriction\n    |\n LL | fn bot<T: ?Sized>() -> T { loop {} }"}, {"sha": "97caa833d2f58cfee606b5026f0c6f23e755578b", "filename": "src/test/ui/substs-ppaux.normal.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fsubsts-ppaux.normal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fsubsts-ppaux.normal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsubsts-ppaux.normal.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -73,9 +73,6 @@ LL |     let x: () = foo::<'static>();\n error[E0277]: the size for values of type `str` cannot be known at compilation time\n   --> $DIR/substs-ppaux.rs:49:5\n    |\n-LL |     fn bar<'a, T>() where T: 'a {}\n-   |                              -- required by this bound in `Foo::bar`\n-...\n LL |     <str as Foo<u8>>::bar;\n    |     ^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n@@ -85,6 +82,11 @@ note: required because of the requirements on the impl of `Foo<'_, '_, u8>` for\n    |\n LL | impl<'a,'b,T,S> Foo<'a, 'b, S> for T {}\n    |                 ^^^^^^^^^^^^^^     ^\n+note: required by a bound in `Foo::bar`\n+  --> $DIR/substs-ppaux.rs:7:30\n+   |\n+LL |     fn bar<'a, T>() where T: 'a {}\n+   |                              ^^ required by this bound in `Foo::bar`\n \n error: aborting due to 5 previous errors\n "}, {"sha": "5829073c265bd97d95048834690b1f81dc934710", "filename": "src/test/ui/substs-ppaux.verbose.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fsubsts-ppaux.verbose.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fsubsts-ppaux.verbose.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsubsts-ppaux.verbose.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -73,9 +73,6 @@ LL |     let x: () = foo::<'static>();\n error[E0277]: the size for values of type `str` cannot be known at compilation time\n   --> $DIR/substs-ppaux.rs:49:5\n    |\n-LL |     fn bar<'a, T>() where T: 'a {}\n-   |                              -- required by this bound in `Foo::bar`\n-...\n LL |     <str as Foo<u8>>::bar;\n    |     ^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n@@ -85,6 +82,11 @@ note: required because of the requirements on the impl of `Foo<'_#0r, '_#1r, u8>\n    |\n LL | impl<'a,'b,T,S> Foo<'a, 'b, S> for T {}\n    |                 ^^^^^^^^^^^^^^     ^\n+note: required by a bound in `Foo::bar`\n+  --> $DIR/substs-ppaux.rs:7:30\n+   |\n+LL |     fn bar<'a, T>() where T: 'a {}\n+   |                              ^^ required by this bound in `Foo::bar`\n \n error: aborting due to 5 previous errors\n "}, {"sha": "fb40c260e2d0caee2b270184bf6e201cdb252025", "filename": "src/test/ui/suggestions/adt-param-with-implicit-sized-bound.stderr", "status": "modified", "additions": 25, "deletions": 15, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fsuggestions%2Fadt-param-with-implicit-sized-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fsuggestions%2Fadt-param-with-implicit-sized-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fadt-param-with-implicit-sized-bound.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -3,10 +3,12 @@ error[E0277]: the size for values of type `Self` cannot be known at compilation\n    |\n LL |     fn func1() -> Struct1<Self>;\n    |                   ^^^^^^^^^^^^^ doesn't have a size known at compile-time\n-...\n-LL | struct Struct1<T>{\n-   |                - required by this bound in `Struct1`\n    |\n+note: required by a bound in `Struct1`\n+  --> $DIR/adt-param-with-implicit-sized-bound.rs:8:16\n+   |\n+LL | struct Struct1<T>{\n+   |                ^ required by this bound in `Struct1`\n help: consider further restricting `Self`\n    |\n LL |     fn func1() -> Struct1<Self> where Self: Sized;\n@@ -21,10 +23,12 @@ error[E0277]: the size for values of type `Self` cannot be known at compilation\n    |\n LL |     fn func2<'a>() -> Struct2<'a, Self>;\n    |                       ^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n-...\n-LL | struct Struct2<'a, T>{\n-   |                    - required by this bound in `Struct2`\n    |\n+note: required by a bound in `Struct2`\n+  --> $DIR/adt-param-with-implicit-sized-bound.rs:11:20\n+   |\n+LL | struct Struct2<'a, T>{\n+   |                    ^ required by this bound in `Struct2`\n help: consider further restricting `Self`\n    |\n LL |     fn func2<'a>() -> Struct2<'a, Self> where Self: Sized;\n@@ -39,10 +43,12 @@ error[E0277]: the size for values of type `Self` cannot be known at compilation\n    |\n LL |     fn func3() -> Struct3<Self>;\n    |                   ^^^^^^^^^^^^^ doesn't have a size known at compile-time\n-...\n-LL | struct Struct3<T>{\n-   |                - required by this bound in `Struct3`\n    |\n+note: required by a bound in `Struct3`\n+  --> $DIR/adt-param-with-implicit-sized-bound.rs:14:16\n+   |\n+LL | struct Struct3<T>{\n+   |                ^ required by this bound in `Struct3`\n help: you could relax the implicit `Sized` bound on `T` if it were used through indirection like `&T` or `Box<T>`\n   --> $DIR/adt-param-with-implicit-sized-bound.rs:14:16\n    |\n@@ -60,10 +66,12 @@ error[E0277]: the size for values of type `Self` cannot be known at compilation\n    |\n LL |     fn func4() -> Struct4<Self>;\n    |                   ^^^^^^^^^^^^^ doesn't have a size known at compile-time\n-...\n-LL | struct Struct4<T>{\n-   |                - required by this bound in `Struct4`\n    |\n+note: required by a bound in `Struct4`\n+  --> $DIR/adt-param-with-implicit-sized-bound.rs:20:16\n+   |\n+LL | struct Struct4<T>{\n+   |                ^ required by this bound in `Struct4`\n help: consider further restricting `Self`\n    |\n LL |     fn func4() -> Struct4<Self> where Self: Sized;\n@@ -76,14 +84,16 @@ LL | struct Struct4<T: ?Sized>{\n error[E0277]: the size for values of type `T` cannot be known at compilation time\n   --> $DIR/adt-param-with-implicit-sized-bound.rs:25:9\n    |\n-LL | struct X<T>(T);\n-   |          - required by this bound in `X`\n-...\n LL | struct Struct5<T: ?Sized>{\n    |                - this type parameter needs to be `std::marker::Sized`\n LL |     _t: X<T>,\n    |         ^^^^ doesn't have a size known at compile-time\n    |\n+note: required by a bound in `X`\n+  --> $DIR/adt-param-with-implicit-sized-bound.rs:18:10\n+   |\n+LL | struct X<T>(T);\n+   |          ^ required by this bound in `X`\n help: you could relax the implicit `Sized` bound on `T` if it were used through indirection like `&T` or `Box<T>`\n   --> $DIR/adt-param-with-implicit-sized-bound.rs:18:10\n    |"}, {"sha": "300c2a66c2996568af89bb03c6e33027ca839f46", "filename": "src/test/ui/suggestions/async-fn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fsuggestions%2Fasync-fn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fsuggestions%2Fasync-fn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fasync-fn-ctor-passed-as-arg-where-it-should-have-been-called.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -3,14 +3,16 @@ error[E0277]: `fn() -> impl Future {foo}` is not a future\n    |\n LL | async fn foo() {}\n    |          --- consider calling this function\n-LL | \n-LL | fn bar(f: impl Future<Output=()>) {}\n-   |                ----------------- required by this bound in `bar`\n ...\n LL |     bar(foo);\n    |         ^^^ `fn() -> impl Future {foo}` is not a future\n    |\n    = help: the trait `Future` is not implemented for `fn() -> impl Future {foo}`\n+note: required by a bound in `bar`\n+  --> $DIR/async-fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:7:16\n+   |\n+LL | fn bar(f: impl Future<Output=()>) {}\n+   |                ^^^^^^^^^^^^^^^^^ required by this bound in `bar`\n help: use parentheses to call the function\n    |\n LL |     bar(foo());\n@@ -19,15 +21,17 @@ LL |     bar(foo());\n error[E0277]: `[closure@$DIR/async-fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:11:25: 11:36]` is not a future\n   --> $DIR/async-fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:12:9\n    |\n-LL | fn bar(f: impl Future<Output=()>) {}\n-   |                ----------------- required by this bound in `bar`\n-...\n LL |     let async_closure = async || ();\n    |                         -------- consider calling this closure\n LL |     bar(async_closure);\n    |         ^^^^^^^^^^^^^ `[closure@$DIR/async-fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:11:25: 11:36]` is not a future\n    |\n    = help: the trait `Future` is not implemented for `[closure@$DIR/async-fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:11:25: 11:36]`\n+note: required by a bound in `bar`\n+  --> $DIR/async-fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:7:16\n+   |\n+LL | fn bar(f: impl Future<Output=()>) {}\n+   |                ^^^^^^^^^^^^^^^^^ required by this bound in `bar`\n help: use parentheses to call the closure\n    |\n LL |     bar(async_closure());"}, {"sha": "93048107e59fcfd82d1820ae5622f8c8222decd9", "filename": "src/test/ui/suggestions/fn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fsuggestions%2Ffn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fsuggestions%2Ffn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffn-ctor-passed-as-arg-where-it-should-have-been-called.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -3,13 +3,15 @@ error[E0277]: the trait bound `fn() -> impl T {foo}: T` is not satisfied\n    |\n LL | fn foo() -> impl T<O=()> { S }\n    |    --- consider calling this function\n-LL | \n-LL | fn bar(f: impl T<O=()>) {}\n-   |                ------- required by this bound in `bar`\n ...\n LL |     bar(foo);\n    |         ^^^ the trait `T` is not implemented for `fn() -> impl T {foo}`\n    |\n+note: required by a bound in `bar`\n+  --> $DIR/fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:14:16\n+   |\n+LL | fn bar(f: impl T<O=()>) {}\n+   |                ^^^^^^^ required by this bound in `bar`\n help: use parentheses to call the function\n    |\n LL |     bar(foo());\n@@ -18,14 +20,16 @@ LL |     bar(foo());\n error[E0277]: the trait bound `[closure@$DIR/fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:18:19: 18:23]: T` is not satisfied\n   --> $DIR/fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:19:9\n    |\n-LL | fn bar(f: impl T<O=()>) {}\n-   |                ------- required by this bound in `bar`\n-...\n LL |     let closure = || S;\n    |                   -- consider calling this closure\n LL |     bar(closure);\n    |         ^^^^^^^ the trait `T` is not implemented for `[closure@$DIR/fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:18:19: 18:23]`\n    |\n+note: required by a bound in `bar`\n+  --> $DIR/fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:14:16\n+   |\n+LL | fn bar(f: impl T<O=()>) {}\n+   |                ^^^^^^^ required by this bound in `bar`\n help: use parentheses to call the closure\n    |\n LL |     bar(closure());"}, {"sha": "64a62524653b775f9c7493dd1e26ca0142904025", "filename": "src/test/ui/suggestions/imm-ref-trait-object-literal-bound-regions.stderr", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fsuggestions%2Fimm-ref-trait-object-literal-bound-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fsuggestions%2Fimm-ref-trait-object-literal-bound-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimm-ref-trait-object-literal-bound-regions.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,17 +1,19 @@\n error[E0277]: the trait bound `for<'b> &'b S: Trait` is not satisfied\n   --> $DIR/imm-ref-trait-object-literal-bound-regions.rs:17:5\n    |\n-LL | fn foo<X>(_: X)\n-   |    --- required by a bound in this\n-LL | where\n-LL |     for<'b> &'b X: Trait,\n-   |                    ----- required by this bound in `foo`\n-...\n LL |     foo::<S>(s);\n    |     ^^^^^^^^ the trait `for<'b> Trait` is not implemented for `&'b S`\n    |\n    = help: the following implementations were found:\n              <&'a mut S as Trait>\n+note: required by a bound in `foo`\n+  --> $DIR/imm-ref-trait-object-literal-bound-regions.rs:11:20\n+   |\n+LL | fn foo<X>(_: X)\n+   |    --- required by a bound in this\n+LL | where\n+LL |     for<'b> &'b X: Trait,\n+   |                    ^^^^^ required by this bound in `foo`\n \n error: aborting due to previous error\n "}, {"sha": "39bde52c55a59ea038f02be5f0a62723871f2903", "filename": "src/test/ui/suggestions/imm-ref-trait-object-literal.stderr", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fsuggestions%2Fimm-ref-trait-object-literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fsuggestions%2Fimm-ref-trait-object-literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimm-ref-trait-object-literal.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,14 +1,16 @@\n error[E0277]: the trait bound `&S: Trait` is not satisfied\n   --> $DIR/imm-ref-trait-object-literal.rs:12:7\n    |\n-LL | fn foo<X: Trait>(_: X) {}\n-   |           ----- required by this bound in `foo`\n-...\n LL |   foo(&s);\n    |       ^^ the trait `Trait` is not implemented for `&S`\n    |\n    = help: the following implementations were found:\n              <&'a mut S as Trait>\n+note: required by a bound in `foo`\n+  --> $DIR/imm-ref-trait-object-literal.rs:7:11\n+   |\n+LL | fn foo<X: Trait>(_: X) {}\n+   |           ^^^^^ required by this bound in `foo`\n help: consider changing this borrow's mutability\n    |\n LL |   foo(&mut s);\n@@ -17,14 +19,17 @@ LL |   foo(&mut s);\n error[E0277]: the trait bound `S: Trait` is not satisfied\n   --> $DIR/imm-ref-trait-object-literal.rs:13:7\n    |\n-LL | fn foo<X: Trait>(_: X) {}\n-   |           ----- required by this bound in `foo`\n-...\n LL |   foo(s);\n    |       ^\n    |       |\n    |       expected an implementor of trait `Trait`\n    |       help: consider mutably borrowing here: `&mut s`\n+   |\n+note: required by a bound in `foo`\n+  --> $DIR/imm-ref-trait-object-literal.rs:7:11\n+   |\n+LL | fn foo<X: Trait>(_: X) {}\n+   |           ^^^^^ required by this bound in `foo`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "1cde42ff2cb018b4851a3905f8cfd938f071a469", "filename": "src/test/ui/suggestions/impl-trait-with-missing-bounds.stderr", "status": "modified", "additions": 30, "deletions": 18, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-with-missing-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-with-missing-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-with-missing-bounds.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -3,11 +3,13 @@ error[E0277]: `<impl Iterator as Iterator>::Item` doesn't implement `Debug`\n    |\n LL |         qux(constraint);\n    |             ^^^^^^^^^^ `<impl Iterator as Iterator>::Item` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n-...\n-LL | fn qux(_: impl std::fmt::Debug) {}\n-   |                --------------- required by this bound in `qux`\n    |\n    = help: the trait `Debug` is not implemented for `<impl Iterator as Iterator>::Item`\n+note: required by a bound in `qux`\n+  --> $DIR/impl-trait-with-missing-bounds.rs:50:16\n+   |\n+LL | fn qux(_: impl std::fmt::Debug) {}\n+   |                ^^^^^^^^^^^^^^^ required by this bound in `qux`\n help: introduce a type parameter with a trait bound instead of using `impl Trait`\n    |\n LL | fn foo<I: Iterator>(constraints: I) where <I as Iterator>::Item: Debug {\n@@ -18,11 +20,13 @@ error[E0277]: `<impl Iterator as Iterator>::Item` doesn't implement `Debug`\n    |\n LL |         qux(constraint);\n    |             ^^^^^^^^^^ `<impl Iterator as Iterator>::Item` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n-...\n-LL | fn qux(_: impl std::fmt::Debug) {}\n-   |                --------------- required by this bound in `qux`\n    |\n    = help: the trait `Debug` is not implemented for `<impl Iterator as Iterator>::Item`\n+note: required by a bound in `qux`\n+  --> $DIR/impl-trait-with-missing-bounds.rs:50:16\n+   |\n+LL | fn qux(_: impl std::fmt::Debug) {}\n+   |                ^^^^^^^^^^^^^^^ required by this bound in `qux`\n help: introduce a type parameter with a trait bound instead of using `impl Trait`\n    |\n LL | fn bar<T, I: Iterator>(t: T, constraints: I) where T: std::fmt::Debug, <I as Iterator>::Item: Debug {\n@@ -33,11 +37,13 @@ error[E0277]: `<impl Iterator as Iterator>::Item` doesn't implement `Debug`\n    |\n LL |         qux(constraint);\n    |             ^^^^^^^^^^ `<impl Iterator as Iterator>::Item` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n-...\n-LL | fn qux(_: impl std::fmt::Debug) {}\n-   |                --------------- required by this bound in `qux`\n    |\n    = help: the trait `Debug` is not implemented for `<impl Iterator as Iterator>::Item`\n+note: required by a bound in `qux`\n+  --> $DIR/impl-trait-with-missing-bounds.rs:50:16\n+   |\n+LL | fn qux(_: impl std::fmt::Debug) {}\n+   |                ^^^^^^^^^^^^^^^ required by this bound in `qux`\n help: introduce a type parameter with a trait bound instead of using `impl Trait`\n    |\n LL | fn baz<I: Iterator>(t: impl std::fmt::Debug, constraints: I) where <I as Iterator>::Item: Debug {\n@@ -48,11 +54,13 @@ error[E0277]: `<impl Iterator as Iterator>::Item` doesn't implement `Debug`\n    |\n LL |         qux(constraint);\n    |             ^^^^^^^^^^ `<impl Iterator as Iterator>::Item` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n-...\n-LL | fn qux(_: impl std::fmt::Debug) {}\n-   |                --------------- required by this bound in `qux`\n    |\n    = help: the trait `Debug` is not implemented for `<impl Iterator as Iterator>::Item`\n+note: required by a bound in `qux`\n+  --> $DIR/impl-trait-with-missing-bounds.rs:50:16\n+   |\n+LL | fn qux(_: impl std::fmt::Debug) {}\n+   |                ^^^^^^^^^^^^^^^ required by this bound in `qux`\n help: introduce a type parameter with a trait bound instead of using `impl Trait`\n    |\n LL | fn bat<I, T: std::fmt::Debug, U: Iterator>(t: T, constraints: U, _: I) where <U as Iterator>::Item: Debug {\n@@ -63,11 +71,13 @@ error[E0277]: `<impl Iterator + std::fmt::Debug as Iterator>::Item` doesn't impl\n    |\n LL |         qux(constraint);\n    |             ^^^^^^^^^^ `<impl Iterator + std::fmt::Debug as Iterator>::Item` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n-...\n-LL | fn qux(_: impl std::fmt::Debug) {}\n-   |                --------------- required by this bound in `qux`\n    |\n    = help: the trait `Debug` is not implemented for `<impl Iterator + std::fmt::Debug as Iterator>::Item`\n+note: required by a bound in `qux`\n+  --> $DIR/impl-trait-with-missing-bounds.rs:50:16\n+   |\n+LL | fn qux(_: impl std::fmt::Debug) {}\n+   |                ^^^^^^^^^^^^^^^ required by this bound in `qux`\n help: introduce a type parameter with a trait bound instead of using `impl Trait`\n    |\n LL | fn bak<I: Iterator + std::fmt::Debug>(constraints: I) where <I as Iterator>::Item: Debug {\n@@ -78,11 +88,13 @@ error[E0277]: `<impl Iterator as Iterator>::Item` doesn't implement `Debug`\n    |\n LL |         qux(constraint);\n    |             ^^^^^^^^^^ `<impl Iterator as Iterator>::Item` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n-...\n-LL | fn qux(_: impl std::fmt::Debug) {}\n-   |                --------------- required by this bound in `qux`\n    |\n    = help: the trait `Debug` is not implemented for `<impl Iterator as Iterator>::Item`\n+note: required by a bound in `qux`\n+  --> $DIR/impl-trait-with-missing-bounds.rs:50:16\n+   |\n+LL | fn qux(_: impl std::fmt::Debug) {}\n+   |                ^^^^^^^^^^^^^^^ required by this bound in `qux`\n help: introduce a type parameter with a trait bound instead of using `impl Trait`\n    |\n LL | fn baw<I: Iterator>(constraints: I) where <I as Iterator>::Item: Debug {"}, {"sha": "263d509075af8058f258103ee9ef2f0caeb7bea1", "filename": "src/test/ui/suggestions/into-str.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fsuggestions%2Finto-str.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fsuggestions%2Finto-str.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Finto-str.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,14 +1,16 @@\n error[E0277]: the trait bound `&str: From<String>` is not satisfied\n   --> $DIR/into-str.rs:4:5\n    |\n-LL | fn foo<'a, T>(_t: T) where T: Into<&'a str> {}\n-   |                               ------------- required by this bound in `foo`\n-...\n LL |     foo(String::new());\n    |     ^^^ the trait `From<String>` is not implemented for `&str`\n    |\n    = note: to coerce a `String` into a `&str`, use `&*` as a prefix\n    = note: required because of the requirements on the impl of `Into<&str>` for `String`\n+note: required by a bound in `foo`\n+  --> $DIR/into-str.rs:1:31\n+   |\n+LL | fn foo<'a, T>(_t: T) where T: Into<&'a str> {}\n+   |                               ^^^^^^^^^^^^^ required by this bound in `foo`\n \n error: aborting due to previous error\n "}, {"sha": "cd1a8c4be8eccd6ee6651e3cf2b08814f6d3bd08", "filename": "src/test/ui/suggestions/issue-79843-impl-trait-with-missing-bounds-on-async-fn.stderr", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fsuggestions%2Fissue-79843-impl-trait-with-missing-bounds-on-async-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fsuggestions%2Fissue-79843-impl-trait-with-missing-bounds-on-async-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-79843-impl-trait-with-missing-bounds-on-async-fn.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -3,11 +3,13 @@ error[E0277]: `<impl Foo as Foo>::Bar` cannot be sent between threads safely\n    |\n LL |     assert_is_send(&bar);\n    |                    ^^^^ `<impl Foo as Foo>::Bar` cannot be sent between threads safely\n-...\n-LL | fn assert_is_send<T: Send>(_: &T) {}\n-   |                      ---- required by this bound in `assert_is_send`\n    |\n    = help: the trait `Send` is not implemented for `<impl Foo as Foo>::Bar`\n+note: required by a bound in `assert_is_send`\n+  --> $DIR/issue-79843-impl-trait-with-missing-bounds-on-async-fn.rs:30:22\n+   |\n+LL | fn assert_is_send<T: Send>(_: &T) {}\n+   |                      ^^^^ required by this bound in `assert_is_send`\n help: introduce a type parameter with a trait bound instead of using `impl Trait`\n    |\n LL | async fn run<F: Foo>(_: &(), foo: F) -> std::io::Result<()> where <F as Foo>::Bar: Send {\n@@ -18,11 +20,13 @@ error[E0277]: `<impl Foo as Foo>::Bar` cannot be sent between threads safely\n    |\n LL |     assert_is_send(&bar);\n    |                    ^^^^ `<impl Foo as Foo>::Bar` cannot be sent between threads safely\n-...\n-LL | fn assert_is_send<T: Send>(_: &T) {}\n-   |                      ---- required by this bound in `assert_is_send`\n    |\n    = help: the trait `Send` is not implemented for `<impl Foo as Foo>::Bar`\n+note: required by a bound in `assert_is_send`\n+  --> $DIR/issue-79843-impl-trait-with-missing-bounds-on-async-fn.rs:30:22\n+   |\n+LL | fn assert_is_send<T: Send>(_: &T) {}\n+   |                      ^^^^ required by this bound in `assert_is_send`\n help: introduce a type parameter with a trait bound instead of using `impl Trait`\n    |\n LL | async fn run2<F: Foo>(_: &(), foo: F) -> std::io::Result<()> where <F as Foo>::Bar: Send {"}, {"sha": "df1eeb7a2b898a816765705bf53acd0ac3af3cc3", "filename": "src/test/ui/suggestions/issue-84973-2.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-2.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,14 +1,17 @@\n error[E0277]: the trait bound `i32: Tr` is not satisfied\n   --> $DIR/issue-84973-2.rs:11:9\n    |\n-LL | fn foo<T: Tr>(i: T) {}\n-   |           -- required by this bound in `foo`\n-...\n LL |     foo(a);\n    |         ^\n    |         |\n    |         expected an implementor of trait `Tr`\n    |         help: consider mutably borrowing here: `&mut a`\n+   |\n+note: required by a bound in `foo`\n+  --> $DIR/issue-84973-2.rs:7:11\n+   |\n+LL | fn foo<T: Tr>(i: T) {}\n+   |           ^^ required by this bound in `foo`\n \n error: aborting due to previous error\n "}, {"sha": "2ffe2f5a2b688eb006ffec9d3937776e5ac3c435", "filename": "src/test/ui/suggestions/issue-84973-blacklist.stderr", "status": "modified", "additions": 27, "deletions": 15, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-blacklist.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-blacklist.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-blacklist.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,53 +1,65 @@\n error[E0277]: the trait bound `String: Copy` is not satisfied\n   --> $DIR/issue-84973-blacklist.rs:15:12\n    |\n-LL | fn f_copy<T: Copy>(t: T) {}\n-   |              ---- required by this bound in `f_copy`\n-...\n LL |     f_copy(\"\".to_string());\n    |            ^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `String`\n+   |\n+note: required by a bound in `f_copy`\n+  --> $DIR/issue-84973-blacklist.rs:6:14\n+   |\n+LL | fn f_copy<T: Copy>(t: T) {}\n+   |              ^^^^ required by this bound in `f_copy`\n \n error[E0277]: the trait bound `S: Clone` is not satisfied\n   --> $DIR/issue-84973-blacklist.rs:16:13\n    |\n-LL | fn f_clone<T: Clone>(t: T) {}\n-   |               ----- required by this bound in `f_clone`\n-...\n LL |     f_clone(S);\n    |             ^ the trait `Clone` is not implemented for `S`\n+   |\n+note: required by a bound in `f_clone`\n+  --> $DIR/issue-84973-blacklist.rs:7:15\n+   |\n+LL | fn f_clone<T: Clone>(t: T) {}\n+   |               ^^^^^ required by this bound in `f_clone`\n \n error[E0277]: `[static generator@$DIR/issue-84973-blacklist.rs:17:13: 17:33]` cannot be unpinned\n   --> $DIR/issue-84973-blacklist.rs:17:5\n    |\n-LL | fn f_unpin<T: Unpin>(t: T) {}\n-   |               ----- required by this bound in `f_unpin`\n-...\n LL |     f_unpin(static || { yield; });\n    |     ^^^^^^^ the trait `Unpin` is not implemented for `[static generator@$DIR/issue-84973-blacklist.rs:17:13: 17:33]`\n    |\n    = note: consider using `Box::pin`\n+note: required by a bound in `f_unpin`\n+  --> $DIR/issue-84973-blacklist.rs:8:15\n+   |\n+LL | fn f_unpin<T: Unpin>(t: T) {}\n+   |               ^^^^^ required by this bound in `f_unpin`\n \n error[E0277]: the size for values of type `dyn Fn()` cannot be known at compilation time\n   --> $DIR/issue-84973-blacklist.rs:22:13\n    |\n-LL | fn f_sized<T: Sized>(t: T) {}\n-   |            - required by this bound in `f_sized`\n-...\n LL |     f_sized(*ref_cl);\n    |             ^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `dyn Fn()`\n+note: required by a bound in `f_sized`\n+  --> $DIR/issue-84973-blacklist.rs:9:12\n+   |\n+LL | fn f_sized<T: Sized>(t: T) {}\n+   |            ^ required by this bound in `f_sized`\n \n error[E0277]: `Rc<{integer}>` cannot be sent between threads safely\n   --> $DIR/issue-84973-blacklist.rs:28:12\n    |\n-LL | fn f_send<T: Send>(t: T) {}\n-   |              ---- required by this bound in `f_send`\n-...\n LL |     f_send(rc);\n    |            ^^ `Rc<{integer}>` cannot be sent between threads safely\n    |\n    = help: the trait `Send` is not implemented for `Rc<{integer}>`\n+note: required by a bound in `f_send`\n+  --> $DIR/issue-84973-blacklist.rs:10:14\n+   |\n+LL | fn f_send<T: Send>(t: T) {}\n+   |              ^^^^ required by this bound in `f_send`\n \n error[E0277]: the size for values of type `dyn Fn()` cannot be known at compilation time\n   --> $DIR/issue-84973-blacklist.rs:22:5"}, {"sha": "bd1cf6ba61460784357a382a85012243caeae8cf", "filename": "src/test/ui/suggestions/issue-84973-negative.stderr", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-negative.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-negative.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-84973-negative.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,23 +1,29 @@\n error[E0277]: the trait bound `i32: Tr` is not satisfied\n   --> $DIR/issue-84973-negative.rs:10:9\n    |\n-LL | fn bar<T: Tr>(t: T) {}\n-   |           -- required by this bound in `bar`\n-...\n LL |     bar(a);\n    |         ^ the trait `Tr` is not implemented for `i32`\n+   |\n+note: required by a bound in `bar`\n+  --> $DIR/issue-84973-negative.rs:5:11\n+   |\n+LL | fn bar<T: Tr>(t: T) {}\n+   |           ^^ required by this bound in `bar`\n \n error[E0277]: the trait bound `f32: Tr` is not satisfied\n   --> $DIR/issue-84973-negative.rs:11:9\n    |\n-LL | fn bar<T: Tr>(t: T) {}\n-   |           -- required by this bound in `bar`\n-...\n LL |     bar(b);\n    |         ^\n    |         |\n    |         expected an implementor of trait `Tr`\n    |         help: consider borrowing here: `&b`\n+   |\n+note: required by a bound in `bar`\n+  --> $DIR/issue-84973-negative.rs:5:11\n+   |\n+LL | fn bar<T: Tr>(t: T) {}\n+   |           ^^ required by this bound in `bar`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "752533cdc121394487942effca490364fb20f5d7", "filename": "src/test/ui/suggestions/issue-85943-no-suggest-unsized-indirection-in-where-clause.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fsuggestions%2Fissue-85943-no-suggest-unsized-indirection-in-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fsuggestions%2Fissue-85943-no-suggest-unsized-indirection-in-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-85943-no-suggest-unsized-indirection-in-where-clause.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,12 +1,15 @@\n error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n   --> $DIR/issue-85943-no-suggest-unsized-indirection-in-where-clause.rs:5:10\n    |\n-LL | struct A<T>(T) where T: Send;\n-   |          - required by this bound in `A`\n LL | struct B(A<[u8]>);\n    |          ^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `[u8]`\n+note: required by a bound in `A`\n+  --> $DIR/issue-85943-no-suggest-unsized-indirection-in-where-clause.rs:4:10\n+   |\n+LL | struct A<T>(T) where T: Send;\n+   |          ^ required by this bound in `A`\n help: you could relax the implicit `Sized` bound on `T` if it were used through indirection like `&T` or `Box<T>`\n   --> $DIR/issue-85943-no-suggest-unsized-indirection-in-where-clause.rs:4:10\n    |"}, {"sha": "3b71d5cee93905fef82baa17191aa4a62cdc4c82", "filename": "src/test/ui/suggestions/mut-borrow-needed-by-trait.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fsuggestions%2Fmut-borrow-needed-by-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fsuggestions%2Fmut-borrow-needed-by-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmut-borrow-needed-by-trait.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -17,12 +17,12 @@ error[E0277]: the trait bound `&dyn std::io::Write: std::io::Write` is not satis\n LL |     let fp = BufWriter::new(fp);\n    |              ^^^^^^^^^^^^^^^^^^ the trait `std::io::Write` is not implemented for `&dyn std::io::Write`\n    |\n-  ::: $SRC_DIR/std/src/io/buffered/bufwriter.rs:LL:COL\n+   = note: `std::io::Write` is implemented for `&mut dyn std::io::Write`, but not for `&dyn std::io::Write`\n+note: required by a bound in `BufWriter`\n+  --> $SRC_DIR/std/src/io/buffered/bufwriter.rs:LL:COL\n    |\n LL | pub struct BufWriter<W: Write> {\n-   |                         ----- required by this bound in `BufWriter`\n-   |\n-   = note: `std::io::Write` is implemented for `&mut dyn std::io::Write`, but not for `&dyn std::io::Write`\n+   |                         ^^^^^ required by this bound in `BufWriter`\n \n error[E0599]: the method `write_fmt` exists for struct `BufWriter<&dyn std::io::Write>`, but its trait bounds were not satisfied\n   --> $DIR/mut-borrow-needed-by-trait.rs:21:5"}, {"sha": "b62502fb6a2b13779aac2675bd19da886ddf73ed", "filename": "src/test/ui/suggestions/restrict-type-argument.stderr", "status": "modified", "additions": 30, "deletions": 18, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fsuggestions%2Frestrict-type-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fsuggestions%2Frestrict-type-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Frestrict-type-argument.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,12 +1,14 @@\n error[E0277]: `impl Sync` cannot be sent between threads safely\n   --> $DIR/restrict-type-argument.rs:4:13\n    |\n-LL | fn is_send<T: Send>(val: T) {}\n-   |               ---- required by this bound in `is_send`\n-...\n LL |     is_send(val);\n    |             ^^^ `impl Sync` cannot be sent between threads safely\n    |\n+note: required by a bound in `is_send`\n+  --> $DIR/restrict-type-argument.rs:1:15\n+   |\n+LL | fn is_send<T: Send>(val: T) {}\n+   |               ^^^^ required by this bound in `is_send`\n help: consider further restricting this bound\n    |\n LL | fn use_impl_sync(val: impl Sync + std::marker::Send) {\n@@ -15,12 +17,14 @@ LL | fn use_impl_sync(val: impl Sync + std::marker::Send) {\n error[E0277]: `S` cannot be sent between threads safely\n   --> $DIR/restrict-type-argument.rs:8:13\n    |\n-LL | fn is_send<T: Send>(val: T) {}\n-   |               ---- required by this bound in `is_send`\n-...\n LL |     is_send(val);\n    |             ^^^ `S` cannot be sent between threads safely\n    |\n+note: required by a bound in `is_send`\n+  --> $DIR/restrict-type-argument.rs:1:15\n+   |\n+LL | fn is_send<T: Send>(val: T) {}\n+   |               ^^^^ required by this bound in `is_send`\n help: consider further restricting this bound\n    |\n LL | fn use_where<S>(val: S) where S: Sync + std::marker::Send {\n@@ -29,12 +33,14 @@ LL | fn use_where<S>(val: S) where S: Sync + std::marker::Send {\n error[E0277]: `S` cannot be sent between threads safely\n   --> $DIR/restrict-type-argument.rs:12:13\n    |\n-LL | fn is_send<T: Send>(val: T) {}\n-   |               ---- required by this bound in `is_send`\n-...\n LL |     is_send(val);\n    |             ^^^ `S` cannot be sent between threads safely\n    |\n+note: required by a bound in `is_send`\n+  --> $DIR/restrict-type-argument.rs:1:15\n+   |\n+LL | fn is_send<T: Send>(val: T) {}\n+   |               ^^^^ required by this bound in `is_send`\n help: consider further restricting this bound\n    |\n LL | fn use_bound<S: Sync + std::marker::Send>(val: S) {\n@@ -43,12 +49,14 @@ LL | fn use_bound<S: Sync + std::marker::Send>(val: S) {\n error[E0277]: `S` cannot be sent between threads safely\n   --> $DIR/restrict-type-argument.rs:20:13\n    |\n-LL | fn is_send<T: Send>(val: T) {}\n-   |               ---- required by this bound in `is_send`\n-...\n LL |     is_send(val);\n    |             ^^^ `S` cannot be sent between threads safely\n    |\n+note: required by a bound in `is_send`\n+  --> $DIR/restrict-type-argument.rs:1:15\n+   |\n+LL | fn is_send<T: Send>(val: T) {}\n+   |               ^^^^ required by this bound in `is_send`\n help: consider further restricting this bound\n    |\n LL |     Sync + std::marker::Send\n@@ -57,12 +65,14 @@ LL |     Sync + std::marker::Send\n error[E0277]: `S` cannot be sent between threads safely\n   --> $DIR/restrict-type-argument.rs:24:13\n    |\n-LL | fn is_send<T: Send>(val: T) {}\n-   |               ---- required by this bound in `is_send`\n-...\n LL |     is_send(val);\n    |             ^^^ `S` cannot be sent between threads safely\n    |\n+note: required by a bound in `is_send`\n+  --> $DIR/restrict-type-argument.rs:1:15\n+   |\n+LL | fn is_send<T: Send>(val: T) {}\n+   |               ^^^^ required by this bound in `is_send`\n help: consider further restricting this bound\n    |\n LL | fn use_bound_and_where<S: Sync>(val: S) where S: std::fmt::Debug + std::marker::Send {\n@@ -71,12 +81,14 @@ LL | fn use_bound_and_where<S: Sync>(val: S) where S: std::fmt::Debug + std::mar\n error[E0277]: `S` cannot be sent between threads safely\n   --> $DIR/restrict-type-argument.rs:28:13\n    |\n-LL | fn is_send<T: Send>(val: T) {}\n-   |               ---- required by this bound in `is_send`\n-...\n LL |     is_send(val);\n    |             ^^^ `S` cannot be sent between threads safely\n    |\n+note: required by a bound in `is_send`\n+  --> $DIR/restrict-type-argument.rs:1:15\n+   |\n+LL | fn is_send<T: Send>(val: T) {}\n+   |               ^^^^ required by this bound in `is_send`\n help: consider restricting type parameter `S`\n    |\n LL | fn use_unbound<S: std::marker::Send>(val: S) {"}, {"sha": "0c758c9ba266f91dbe71376c339683479c03e968", "filename": "src/test/ui/trait-bounds/unsized-bound.stderr", "status": "modified", "additions": 45, "deletions": 19, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ftrait-bounds%2Funsized-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ftrait-bounds%2Funsized-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrait-bounds%2Funsized-bound.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,14 +1,17 @@\n error[E0277]: the size for values of type `B` cannot be known at compilation time\n   --> $DIR/unsized-bound.rs:2:12\n    |\n-LL | trait Trait<A> {}\n-   |             - required by this bound in `Trait`\n LL | impl<A, B> Trait<(A, B)> for (A, B) where A: ?Sized, B: ?Sized, {}\n    |         -  ^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |         |\n    |         this type parameter needs to be `std::marker::Sized`\n    |\n    = note: required because it appears within the type `(A, B)`\n+note: required by a bound in `Trait`\n+  --> $DIR/unsized-bound.rs:1:13\n+   |\n+LL | trait Trait<A> {}\n+   |             ^ required by this bound in `Trait`\n help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - impl<A, B> Trait<(A, B)> for (A, B) where A: ?Sized, B: ?Sized, {}\n@@ -37,15 +40,17 @@ LL + impl<A, B> Trait<(A, B)> for (A, B) where B: ?Sized, {}\n error[E0277]: the size for values of type `C` cannot be known at compilation time\n   --> $DIR/unsized-bound.rs:5:31\n    |\n-LL | trait Trait<A> {}\n-   |             - required by this bound in `Trait`\n-...\n LL | impl<A, B: ?Sized, C: ?Sized> Trait<(A, B, C)> for (A, B, C) where A: ?Sized, {}\n    |                    -          ^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |                    |\n    |                    this type parameter needs to be `std::marker::Sized`\n    |\n    = note: required because it appears within the type `(A, B, C)`\n+note: required by a bound in `Trait`\n+  --> $DIR/unsized-bound.rs:1:13\n+   |\n+LL | trait Trait<A> {}\n+   |             ^ required by this bound in `Trait`\n help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - impl<A, B: ?Sized, C: ?Sized> Trait<(A, B, C)> for (A, B, C) where A: ?Sized, {}\n@@ -89,14 +94,17 @@ LL + impl<A, B, C: ?Sized> Trait<(A, B, C)> for (A, B, C) where A: ?Sized, {}\n error[E0277]: the size for values of type `B` cannot be known at compilation time\n   --> $DIR/unsized-bound.rs:10:28\n    |\n-LL | trait Trait2<A> {}\n-   |              - required by this bound in `Trait2`\n LL | impl<A: ?Sized, B: ?Sized> Trait2<(A, B)> for (A, B) {}\n    |                 -          ^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |                 |\n    |                 this type parameter needs to be `std::marker::Sized`\n    |\n    = note: required because it appears within the type `(A, B)`\n+note: required by a bound in `Trait2`\n+  --> $DIR/unsized-bound.rs:9:14\n+   |\n+LL | trait Trait2<A> {}\n+   |              ^ required by this bound in `Trait2`\n help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - impl<A: ?Sized, B: ?Sized> Trait2<(A, B)> for (A, B) {}\n@@ -125,13 +133,16 @@ LL + impl<A, B: ?Sized> Trait2<(A, B)> for (A, B) {}\n error[E0277]: the size for values of type `A` cannot be known at compilation time\n   --> $DIR/unsized-bound.rs:14:9\n    |\n-LL | trait Trait3<A> {}\n-   |              - required by this bound in `Trait3`\n LL | impl<A> Trait3<A> for A where A: ?Sized {}\n    |      -  ^^^^^^^^^ doesn't have a size known at compile-time\n    |      |\n    |      this type parameter needs to be `std::marker::Sized`\n    |\n+note: required by a bound in `Trait3`\n+  --> $DIR/unsized-bound.rs:13:14\n+   |\n+LL | trait Trait3<A> {}\n+   |              ^ required by this bound in `Trait3`\n help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - impl<A> Trait3<A> for A where A: ?Sized {}\n@@ -145,13 +156,16 @@ LL | trait Trait3<A: ?Sized> {}\n error[E0277]: the size for values of type `A` cannot be known at compilation time\n   --> $DIR/unsized-bound.rs:17:17\n    |\n-LL | trait Trait4<A> {}\n-   |              - required by this bound in `Trait4`\n LL | impl<A: ?Sized> Trait4<A> for A {}\n    |      -          ^^^^^^^^^ doesn't have a size known at compile-time\n    |      |\n    |      this type parameter needs to be `std::marker::Sized`\n    |\n+note: required by a bound in `Trait4`\n+  --> $DIR/unsized-bound.rs:16:14\n+   |\n+LL | trait Trait4<A> {}\n+   |              ^ required by this bound in `Trait4`\n help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - impl<A: ?Sized> Trait4<A> for A {}\n@@ -165,13 +179,16 @@ LL | trait Trait4<A: ?Sized> {}\n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized-bound.rs:20:12\n    |\n-LL | trait Trait5<A, B> {}\n-   |              - required by this bound in `Trait5`\n LL | impl<X, Y> Trait5<X, Y> for X where X: ?Sized {}\n    |      -     ^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |      |\n    |      this type parameter needs to be `std::marker::Sized`\n    |\n+note: required by a bound in `Trait5`\n+  --> $DIR/unsized-bound.rs:19:14\n+   |\n+LL | trait Trait5<A, B> {}\n+   |              ^ required by this bound in `Trait5`\n help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - impl<X, Y> Trait5<X, Y> for X where X: ?Sized {}\n@@ -185,13 +202,16 @@ LL | trait Trait5<A: ?Sized, B> {}\n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized-bound.rs:23:20\n    |\n-LL | trait Trait6<A, B> {}\n-   |              - required by this bound in `Trait6`\n LL | impl<X: ?Sized, Y> Trait6<X, Y> for X {}\n    |      -             ^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |      |\n    |      this type parameter needs to be `std::marker::Sized`\n    |\n+note: required by a bound in `Trait6`\n+  --> $DIR/unsized-bound.rs:22:14\n+   |\n+LL | trait Trait6<A, B> {}\n+   |              ^ required by this bound in `Trait6`\n help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - impl<X: ?Sized, Y> Trait6<X, Y> for X {}\n@@ -205,13 +225,16 @@ LL | trait Trait6<A: ?Sized, B> {}\n error[E0277]: the size for values of type `Y` cannot be known at compilation time\n   --> $DIR/unsized-bound.rs:26:12\n    |\n-LL | trait Trait7<A, B> {}\n-   |                 - required by this bound in `Trait7`\n LL | impl<X, Y> Trait7<X, Y> for X where Y: ?Sized {}\n    |         -  ^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |         |\n    |         this type parameter needs to be `std::marker::Sized`\n    |\n+note: required by a bound in `Trait7`\n+  --> $DIR/unsized-bound.rs:25:17\n+   |\n+LL | trait Trait7<A, B> {}\n+   |                 ^ required by this bound in `Trait7`\n help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - impl<X, Y> Trait7<X, Y> for X where Y: ?Sized {}\n@@ -225,13 +248,16 @@ LL | trait Trait7<A, B: ?Sized> {}\n error[E0277]: the size for values of type `Y` cannot be known at compilation time\n   --> $DIR/unsized-bound.rs:29:20\n    |\n-LL | trait Trait8<A, B> {}\n-   |                 - required by this bound in `Trait8`\n LL | impl<X, Y: ?Sized> Trait8<X, Y> for X {}\n    |         -          ^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |         |\n    |         this type parameter needs to be `std::marker::Sized`\n    |\n+note: required by a bound in `Trait8`\n+  --> $DIR/unsized-bound.rs:28:17\n+   |\n+LL | trait Trait8<A, B> {}\n+   |                 ^ required by this bound in `Trait8`\n help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - impl<X, Y: ?Sized> Trait8<X, Y> for X {}"}, {"sha": "38679679cf935551c9b155249d60eba84843949c", "filename": "src/test/ui/trait-impl-bound-suggestions.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ftrait-impl-bound-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ftrait-impl-bound-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrait-impl-bound-suggestions.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,12 +1,14 @@\n error[E0277]: the trait bound `X: Copy` is not satisfied\n   --> $DIR/trait-impl-bound-suggestions.rs:14:52\n    |\n-LL | struct ConstrainedStruct<X: Copy> {\n-   |                             ---- required by this bound in `ConstrainedStruct`\n-...\n LL |     fn return_the_constrained_type(&self, x: X) -> ConstrainedStruct<X> {\n    |                                                    ^^^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `X`\n    |\n+note: required by a bound in `ConstrainedStruct`\n+  --> $DIR/trait-impl-bound-suggestions.rs:8:29\n+   |\n+LL | struct ConstrainedStruct<X: Copy> {\n+   |                             ^^^^ required by this bound in `ConstrainedStruct`\n help: consider further restricting type parameter `X`\n    |\n LL | trait InsufficientlyConstrainedGeneric<X=()> where X: std::marker::Copy {"}, {"sha": "3c3b6e566908a5dae7a5d7518614af1a0ee242c8", "filename": "src/test/ui/traits/alias/cross-crate.stderr", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ftraits%2Falias%2Fcross-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ftraits%2Falias%2Fcross-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Falias%2Fcross-crate.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,24 +1,28 @@\n error[E0277]: `Rc<u32>` cannot be sent between threads safely\n   --> $DIR/cross-crate.rs:14:17\n    |\n-LL | fn use_alias<T: SendSync>() {}\n-   |                 -------- required by this bound in `use_alias`\n-...\n LL |     use_alias::<Rc<u32>>();\n    |                 ^^^^^^^ `Rc<u32>` cannot be sent between threads safely\n    |\n    = help: the trait `Send` is not implemented for `Rc<u32>`\n+note: required by a bound in `use_alias`\n+  --> $DIR/cross-crate.rs:10:17\n+   |\n+LL | fn use_alias<T: SendSync>() {}\n+   |                 ^^^^^^^^ required by this bound in `use_alias`\n \n error[E0277]: `Rc<u32>` cannot be shared between threads safely\n   --> $DIR/cross-crate.rs:14:17\n    |\n-LL | fn use_alias<T: SendSync>() {}\n-   |                 -------- required by this bound in `use_alias`\n-...\n LL |     use_alias::<Rc<u32>>();\n    |                 ^^^^^^^ `Rc<u32>` cannot be shared between threads safely\n    |\n    = help: the trait `Sync` is not implemented for `Rc<u32>`\n+note: required by a bound in `use_alias`\n+  --> $DIR/cross-crate.rs:10:17\n+   |\n+LL | fn use_alias<T: SendSync>() {}\n+   |                 ^^^^^^^^ required by this bound in `use_alias`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "7172008d3eeae6d4a87e1492aab39c41947b703f", "filename": "src/test/ui/traits/alias/wf.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ftraits%2Falias%2Fwf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ftraits%2Falias%2Fwf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Falias%2Fwf.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,11 +1,14 @@\n error[E0277]: the trait bound `T: Foo` is not satisfied\n   --> $DIR/wf.rs:5:14\n    |\n-LL | trait A<T: Foo> {}\n-   |            --- required by this bound in `A`\n LL | trait B<T> = A<T>;\n    |              ^^^^ the trait `Foo` is not implemented for `T`\n    |\n+note: required by a bound in `A`\n+  --> $DIR/wf.rs:4:12\n+   |\n+LL | trait A<T: Foo> {}\n+   |            ^^^ required by this bound in `A`\n help: consider restricting type parameter `T`\n    |\n LL | trait B<T: Foo> = A<T>;"}, {"sha": "6333b4eb08cd530643b677e926567b01b31e009a", "filename": "src/test/ui/traits/associated_type_bound/check-trait-object-bounds-1.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-1.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,11 +1,14 @@\n error[E0277]: the trait bound `str: Clone` is not satisfied\n   --> $DIR/check-trait-object-bounds-1.rs:12:5\n    |\n-LL | fn f<T: X + ?Sized>() {\n-   |         - required by this bound in `f`\n-...\n LL |     f::<dyn X<Y = str>>();\n    |     ^^^^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `str`\n+   |\n+note: required by a bound in `f`\n+  --> $DIR/check-trait-object-bounds-1.rs:7:9\n+   |\n+LL | fn f<T: X + ?Sized>() {\n+   |         ^ required by this bound in `f`\n \n error: aborting due to previous error\n "}, {"sha": "46e8ce78874934ca3ad1344e7618cec9637d91b8", "filename": "src/test/ui/traits/associated_type_bound/check-trait-object-bounds-2.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-2.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,13 +1,15 @@\n error[E0277]: expected a `FnOnce<(&i32,)>` closure, found `i32`\n   --> $DIR/check-trait-object-bounds-2.rs:13:5\n    |\n-LL | fn f<T: for<'r> X<'r> + ?Sized>() {\n-   |         ------------- required by this bound in `f`\n-...\n LL |     f::<dyn for<'x> X<'x, F = i32>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected an `FnOnce<(&i32,)>` closure, found `i32`\n    |\n    = help: the trait `for<'r> FnOnce<(&'r i32,)>` is not implemented for `i32`\n+note: required by a bound in `f`\n+  --> $DIR/check-trait-object-bounds-2.rs:8:9\n+   |\n+LL | fn f<T: for<'r> X<'r> + ?Sized>() {\n+   |         ^^^^^^^^^^^^^ required by this bound in `f`\n \n error: aborting due to previous error\n "}, {"sha": "9afae9a9638349ef123624e03352474c864ba1f5", "filename": "src/test/ui/traits/associated_type_bound/check-trait-object-bounds-4.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-4.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,11 +1,14 @@\n error[E0277]: the trait bound `str: Clone` is not satisfied\n   --> $DIR/check-trait-object-bounds-4.rs:15:5\n    |\n-LL | fn f<T: X + ?Sized>() {\n-   |         - required by this bound in `f`\n-...\n LL |     f::<dyn X<Y = str>>();\n    |     ^^^^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `str`\n+   |\n+note: required by a bound in `f`\n+  --> $DIR/check-trait-object-bounds-4.rs:10:9\n+   |\n+LL | fn f<T: X + ?Sized>() {\n+   |         ^ required by this bound in `f`\n \n error: aborting due to previous error\n "}, {"sha": "c97408ff91e8f15edbf3a25875fbfdb53808f641", "filename": "src/test/ui/traits/associated_type_bound/check-trait-object-bounds-5.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-5.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,11 +1,14 @@\n error[E0271]: type mismatch resolving `<i32 as Is>::T == i64`\n   --> $DIR/check-trait-object-bounds-5.rs:23:5\n    |\n-LL | fn is_obj<T: ?Sized + Obj>(_: &T) {}\n-   |                       --- required by this bound in `is_obj`\n-...\n LL |     is_obj(x)\n    |     ^^^^^^ expected `i64`, found `i32`\n+   |\n+note: required by a bound in `is_obj`\n+  --> $DIR/check-trait-object-bounds-5.rs:20:23\n+   |\n+LL | fn is_obj<T: ?Sized + Obj>(_: &T) {}\n+   |                       ^^^ required by this bound in `is_obj`\n \n error: aborting due to previous error\n "}, {"sha": "893564494379f044529459e29a77f7914eae743c", "filename": "src/test/ui/traits/associated_type_bound/check-trait-object-bounds-6.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-6.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,11 +1,14 @@\n error[E0271]: type mismatch resolving `<i32 as Is>::T == i64`\n   --> $DIR/check-trait-object-bounds-6.rs:20:5\n    |\n-LL | fn is_obj<T: ?Sized + Obj>(_: &T) {}\n-   |                       --- required by this bound in `is_obj`\n-...\n LL |     is_obj(x)\n    |     ^^^^^^ expected `i64`, found `i32`\n+   |\n+note: required by a bound in `is_obj`\n+  --> $DIR/check-trait-object-bounds-6.rs:17:23\n+   |\n+LL | fn is_obj<T: ?Sized + Obj>(_: &T) {}\n+   |                       ^^^ required by this bound in `is_obj`\n \n error: aborting due to previous error\n "}, {"sha": "1322b66003527e1dab35e4a196d22aab188f2a92", "filename": "src/test/ui/traits/bad-sized.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ftraits%2Fbad-sized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ftraits%2Fbad-sized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbad-sized.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -15,12 +15,12 @@ error[E0277]: the size for values of type `dyn Trait` cannot be known at compila\n LL |     let x: Vec<dyn Trait + Sized> = Vec::new();\n    |            ^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n-  ::: $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+   = help: the trait `Sized` is not implemented for `dyn Trait`\n+note: required by a bound in `Vec`\n+  --> $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n    |\n LL | pub struct Vec<T, #[unstable(feature = \"allocator_api\", issue = \"32838\")] A: Allocator = Global> {\n-   |                - required by this bound in `Vec`\n-   |\n-   = help: the trait `Sized` is not implemented for `dyn Trait`\n+   |                ^ required by this bound in `Vec`\n \n error[E0277]: the size for values of type `dyn Trait` cannot be known at compilation time\n   --> $DIR/bad-sized.rs:4:37\n@@ -41,12 +41,12 @@ error[E0277]: the size for values of type `dyn Trait` cannot be known at compila\n LL |     let x: Vec<dyn Trait + Sized> = Vec::new();\n    |                                     ^^^ doesn't have a size known at compile-time\n    |\n-  ::: $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+   = help: the trait `Sized` is not implemented for `dyn Trait`\n+note: required by a bound in `Vec`\n+  --> $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n    |\n LL | pub struct Vec<T, #[unstable(feature = \"allocator_api\", issue = \"32838\")] A: Allocator = Global> {\n-   |                - required by this bound in `Vec`\n-   |\n-   = help: the trait `Sized` is not implemented for `dyn Trait`\n+   |                ^ required by this bound in `Vec`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "61237a63e3220e1f082d6520acdcf128ea382ae5", "filename": "src/test/ui/traits/bound/on-structs-and-enums-in-fns.stderr", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-in-fns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-in-fns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-in-fns.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,20 +1,26 @@\n error[E0277]: the trait bound `u32: Trait` is not satisfied\n   --> $DIR/on-structs-and-enums-in-fns.rs:13:15\n    |\n-LL | struct Foo<T:Trait> {\n-   |              ----- required by this bound in `Foo`\n-...\n LL | fn explode(x: Foo<u32>) {}\n    |               ^^^^^^^^ the trait `Trait` is not implemented for `u32`\n+   |\n+note: required by a bound in `Foo`\n+  --> $DIR/on-structs-and-enums-in-fns.rs:3:14\n+   |\n+LL | struct Foo<T:Trait> {\n+   |              ^^^^^ required by this bound in `Foo`\n \n error[E0277]: the trait bound `f32: Trait` is not satisfied\n   --> $DIR/on-structs-and-enums-in-fns.rs:16:14\n    |\n-LL | enum Bar<T:Trait> {\n-   |            ----- required by this bound in `Bar`\n-...\n LL | fn kaboom(y: Bar<f32>) {}\n    |              ^^^^^^^^ the trait `Trait` is not implemented for `f32`\n+   |\n+note: required by a bound in `Bar`\n+  --> $DIR/on-structs-and-enums-in-fns.rs:7:12\n+   |\n+LL | enum Bar<T:Trait> {\n+   |            ^^^^^ required by this bound in `Bar`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "8a43742260bb2230a328a5460c93ae893575f724", "filename": "src/test/ui/traits/bound/on-structs-and-enums-in-impls.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-in-impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-in-impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-in-impls.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,11 +1,14 @@\n error[E0277]: the trait bound `u16: Trait` is not satisfied\n   --> $DIR/on-structs-and-enums-in-impls.rs:20:6\n    |\n-LL | struct Foo<T:Trait> {\n-   |              ----- required by this bound in `Foo`\n-...\n LL | impl PolyTrait<Foo<u16>> for Struct {\n    |      ^^^^^^^^^^^^^^^^^^^ the trait `Trait` is not implemented for `u16`\n+   |\n+note: required by a bound in `Foo`\n+  --> $DIR/on-structs-and-enums-in-impls.rs:3:14\n+   |\n+LL | struct Foo<T:Trait> {\n+   |              ^^^^^ required by this bound in `Foo`\n \n error: aborting due to previous error\n "}, {"sha": "cd33e18cfb695e6fedb102c6780df6891f96bc9a", "filename": "src/test/ui/traits/bound/on-structs-and-enums-locals.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-locals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-locals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-locals.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,11 +1,14 @@\n error[E0277]: the trait bound `usize: Trait` is not satisfied\n   --> $DIR/on-structs-and-enums-locals.rs:15:14\n    |\n-LL | struct Foo<T:Trait> {\n-   |              ----- required by this bound in `Foo`\n-...\n LL |     let baz: Foo<usize> = loop { };\n    |              ^^^^^^^^^^ the trait `Trait` is not implemented for `usize`\n+   |\n+note: required by a bound in `Foo`\n+  --> $DIR/on-structs-and-enums-locals.rs:5:14\n+   |\n+LL | struct Foo<T:Trait> {\n+   |              ^^^^^ required by this bound in `Foo`\n \n error[E0277]: the trait bound `{integer}: Trait` is not satisfied\n   --> $DIR/on-structs-and-enums-locals.rs:10:15"}, {"sha": "fda734e857113aee312108691dfb3ca568213ef5", "filename": "src/test/ui/traits/bound/on-structs-and-enums-static.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-static.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,11 +1,14 @@\n error[E0277]: the trait bound `usize: Trait` is not satisfied\n   --> $DIR/on-structs-and-enums-static.rs:9:11\n    |\n-LL | struct Foo<T:Trait> {\n-   |              ----- required by this bound in `Foo`\n-...\n LL | static X: Foo<usize> = Foo {\n    |           ^^^^^^^^^^ the trait `Trait` is not implemented for `usize`\n+   |\n+note: required by a bound in `Foo`\n+  --> $DIR/on-structs-and-enums-static.rs:5:14\n+   |\n+LL | struct Foo<T:Trait> {\n+   |              ^^^^^ required by this bound in `Foo`\n \n error: aborting due to previous error\n "}, {"sha": "5064b60bfd5791b3f90a2a4e48b62702d8105080", "filename": "src/test/ui/traits/bound/on-structs-and-enums-xc.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-xc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-xc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-xc.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -4,21 +4,23 @@ error[E0277]: the trait bound `usize: Trait` is not satisfied\n LL | fn explode(x: Foo<usize>) {}\n    |               ^^^^^^^^^^ the trait `Trait` is not implemented for `usize`\n    |\n-  ::: $DIR/auxiliary/on_structs_and_enums_xc.rs:5:18\n+note: required by a bound in `Foo`\n+  --> $DIR/auxiliary/on_structs_and_enums_xc.rs:5:18\n    |\n LL | pub struct Foo<T:Trait> {\n-   |                  ----- required by this bound in `Foo`\n+   |                  ^^^^^ required by this bound in `Foo`\n \n error[E0277]: the trait bound `f32: Trait` is not satisfied\n   --> $DIR/on-structs-and-enums-xc.rs:10:14\n    |\n LL | fn kaboom(y: Bar<f32>) {}\n    |              ^^^^^^^^ the trait `Trait` is not implemented for `f32`\n    |\n-  ::: $DIR/auxiliary/on_structs_and_enums_xc.rs:9:16\n+note: required by a bound in `Bar`\n+  --> $DIR/auxiliary/on_structs_and_enums_xc.rs:9:16\n    |\n LL | pub enum Bar<T:Trait> {\n-   |                ----- required by this bound in `Bar`\n+   |                ^^^^^ required by this bound in `Bar`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "0f25c8856882c95f3ac44ea249ad92f7ac42f74f", "filename": "src/test/ui/traits/bound/on-structs-and-enums-xc1.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-xc1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-xc1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums-xc1.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -4,10 +4,11 @@ error[E0277]: the trait bound `f64: Trait` is not satisfied\n LL |     let bar: Bar<f64> = return;\n    |              ^^^^^^^^ the trait `Trait` is not implemented for `f64`\n    |\n-  ::: $DIR/auxiliary/on_structs_and_enums_xc.rs:9:16\n+note: required by a bound in `Bar`\n+  --> $DIR/auxiliary/on_structs_and_enums_xc.rs:9:16\n    |\n LL | pub enum Bar<T:Trait> {\n-   |                ----- required by this bound in `Bar`\n+   |                ^^^^^ required by this bound in `Bar`\n \n error[E0277]: the trait bound `{integer}: Trait` is not satisfied\n   --> $DIR/on-structs-and-enums-xc1.rs:8:15"}, {"sha": "fe05b86344be3a35a2445e36a1c4d86f20c98fa9", "filename": "src/test/ui/traits/bound/on-structs-and-enums.stderr", "status": "modified", "additions": 39, "deletions": 21, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fon-structs-and-enums.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,12 +1,14 @@\n error[E0277]: the trait bound `T: Trait` is not satisfied\n   --> $DIR/on-structs-and-enums.rs:13:9\n    |\n-LL | struct Foo<T:Trait> {\n-   |              ----- required by this bound in `Foo`\n-...\n LL | impl<T> Foo<T> {\n    |         ^^^^^^ the trait `Trait` is not implemented for `T`\n    |\n+note: required by a bound in `Foo`\n+  --> $DIR/on-structs-and-enums.rs:3:14\n+   |\n+LL | struct Foo<T:Trait> {\n+   |              ^^^^^ required by this bound in `Foo`\n help: consider restricting type parameter `T`\n    |\n LL | impl<T: Trait> Foo<T> {\n@@ -15,30 +17,38 @@ LL | impl<T: Trait> Foo<T> {\n error[E0277]: the trait bound `isize: Trait` is not satisfied\n   --> $DIR/on-structs-and-enums.rs:19:8\n    |\n-LL | struct Foo<T:Trait> {\n-   |              ----- required by this bound in `Foo`\n-...\n LL |     a: Foo<isize>,\n    |        ^^^^^^^^^^ the trait `Trait` is not implemented for `isize`\n+   |\n+note: required by a bound in `Foo`\n+  --> $DIR/on-structs-and-enums.rs:3:14\n+   |\n+LL | struct Foo<T:Trait> {\n+   |              ^^^^^ required by this bound in `Foo`\n \n error[E0277]: the trait bound `usize: Trait` is not satisfied\n   --> $DIR/on-structs-and-enums.rs:23:10\n    |\n-LL | enum Bar<T:Trait> {\n-   |            ----- required by this bound in `Bar`\n-...\n LL |     Quux(Bar<usize>),\n    |          ^^^^^^^^^^ the trait `Trait` is not implemented for `usize`\n+   |\n+note: required by a bound in `Bar`\n+  --> $DIR/on-structs-and-enums.rs:7:12\n+   |\n+LL | enum Bar<T:Trait> {\n+   |            ^^^^^ required by this bound in `Bar`\n \n error[E0277]: the trait bound `U: Trait` is not satisfied\n   --> $DIR/on-structs-and-enums.rs:27:8\n    |\n-LL | struct Foo<T:Trait> {\n-   |              ----- required by this bound in `Foo`\n-...\n LL |     b: Foo<U>,\n    |        ^^^^^^ the trait `Trait` is not implemented for `U`\n    |\n+note: required by a bound in `Foo`\n+  --> $DIR/on-structs-and-enums.rs:3:14\n+   |\n+LL | struct Foo<T:Trait> {\n+   |              ^^^^^ required by this bound in `Foo`\n help: consider restricting type parameter `U`\n    |\n LL | struct Badness<U: Trait> {\n@@ -47,12 +57,14 @@ LL | struct Badness<U: Trait> {\n error[E0277]: the trait bound `V: Trait` is not satisfied\n   --> $DIR/on-structs-and-enums.rs:31:21\n    |\n-LL | enum Bar<T:Trait> {\n-   |            ----- required by this bound in `Bar`\n-...\n LL |     EvenMoreBadness(Bar<V>),\n    |                     ^^^^^^ the trait `Trait` is not implemented for `V`\n    |\n+note: required by a bound in `Bar`\n+  --> $DIR/on-structs-and-enums.rs:7:12\n+   |\n+LL | enum Bar<T:Trait> {\n+   |            ^^^^^ required by this bound in `Bar`\n help: consider restricting type parameter `V`\n    |\n LL | enum MoreBadness<V: Trait> {\n@@ -61,20 +73,26 @@ LL | enum MoreBadness<V: Trait> {\n error[E0277]: the trait bound `i32: Trait` is not satisfied\n   --> $DIR/on-structs-and-enums.rs:35:5\n    |\n-LL | struct Foo<T:Trait> {\n-   |              ----- required by this bound in `Foo`\n-...\n LL |     Foo<i32>,\n    |     ^^^^^^^^ the trait `Trait` is not implemented for `i32`\n+   |\n+note: required by a bound in `Foo`\n+  --> $DIR/on-structs-and-enums.rs:3:14\n+   |\n+LL | struct Foo<T:Trait> {\n+   |              ^^^^^ required by this bound in `Foo`\n \n error[E0277]: the trait bound `u8: Trait` is not satisfied\n   --> $DIR/on-structs-and-enums.rs:39:29\n    |\n-LL | enum Bar<T:Trait> {\n-   |            ----- required by this bound in `Bar`\n-...\n LL |     DictionaryLike { field: Bar<u8> },\n    |                             ^^^^^^^ the trait `Trait` is not implemented for `u8`\n+   |\n+note: required by a bound in `Bar`\n+  --> $DIR/on-structs-and-enums.rs:7:12\n+   |\n+LL | enum Bar<T:Trait> {\n+   |            ^^^^^ required by this bound in `Bar`\n \n error: aborting due to 7 previous errors\n "}, {"sha": "15f5fe16bc7bbcdb0d16ca164222c8fb1e39f2b8", "filename": "src/test/ui/traits/bound/same-crate-name.stderr", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fsame-crate-name.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fsame-crate-name.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fsame-crate-name.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -4,60 +4,61 @@ error[E0277]: the trait bound `Foo: main::a::Bar` is not satisfied\n LL |         a::try_foo(foo);\n    |                    ^^^ the trait `main::a::Bar` is not implemented for `Foo`\n    |\n-  ::: $DIR/auxiliary/crate_a1.rs:3:24\n-   |\n-LL | pub fn try_foo(x: impl Bar) {}\n-   |                        --- required by this bound in `try_foo`\n-   |\n help: trait impl with same name found\n   --> $DIR/auxiliary/crate_a2.rs:5:1\n    |\n LL | impl Bar for Foo {}\n    | ^^^^^^^^^^^^^^^^^^^\n    = note: perhaps two different versions of crate `crate_a2` are being used?\n+note: required by a bound in `try_foo`\n+  --> $DIR/auxiliary/crate_a1.rs:3:24\n+   |\n+LL | pub fn try_foo(x: impl Bar) {}\n+   |                        ^^^ required by this bound in `try_foo`\n \n error[E0277]: the trait bound `DoesNotImplementTrait: main::a::Bar` is not satisfied\n   --> $DIR/same-crate-name.rs:38:20\n    |\n LL |         a::try_foo(implements_no_traits);\n    |                    ^^^^^^^^^^^^^^^^^^^^ the trait `main::a::Bar` is not implemented for `DoesNotImplementTrait`\n    |\n-  ::: $DIR/auxiliary/crate_a1.rs:3:24\n+note: required by a bound in `try_foo`\n+  --> $DIR/auxiliary/crate_a1.rs:3:24\n    |\n LL | pub fn try_foo(x: impl Bar) {}\n-   |                        --- required by this bound in `try_foo`\n+   |                        ^^^ required by this bound in `try_foo`\n \n error[E0277]: the trait bound `ImplementsWrongTraitConditionally<isize>: main::a::Bar` is not satisfied\n   --> $DIR/same-crate-name.rs:45:20\n    |\n LL |         a::try_foo(other_variant_implements_mismatched_trait);\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `main::a::Bar` is not implemented for `ImplementsWrongTraitConditionally<isize>`\n    |\n-  ::: $DIR/auxiliary/crate_a1.rs:3:24\n-   |\n-LL | pub fn try_foo(x: impl Bar) {}\n-   |                        --- required by this bound in `try_foo`\n-   |\n help: trait impl with same name found\n   --> $DIR/auxiliary/crate_a2.rs:13:1\n    |\n LL | impl Bar for ImplementsWrongTraitConditionally<isize> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: perhaps two different versions of crate `crate_a2` are being used?\n+note: required by a bound in `try_foo`\n+  --> $DIR/auxiliary/crate_a1.rs:3:24\n+   |\n+LL | pub fn try_foo(x: impl Bar) {}\n+   |                        ^^^ required by this bound in `try_foo`\n \n error[E0277]: the trait bound `ImplementsTraitForUsize<isize>: main::a::Bar` is not satisfied\n   --> $DIR/same-crate-name.rs:51:20\n    |\n LL |         a::try_foo(other_variant_implements_correct_trait);\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `main::a::Bar` is not implemented for `ImplementsTraitForUsize<isize>`\n    |\n-  ::: $DIR/auxiliary/crate_a1.rs:3:24\n-   |\n-LL | pub fn try_foo(x: impl Bar) {}\n-   |                        --- required by this bound in `try_foo`\n-   |\n    = help: the following implementations were found:\n              <ImplementsTraitForUsize<usize> as main::a::Bar>\n+note: required by a bound in `try_foo`\n+  --> $DIR/auxiliary/crate_a1.rs:3:24\n+   |\n+LL | pub fn try_foo(x: impl Bar) {}\n+   |                        ^^^ required by this bound in `try_foo`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "b01bacdb87dcd2548280e3c01b76e7181e91116b", "filename": "src/test/ui/traits/impl-bounds-checking.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ftraits%2Fimpl-bounds-checking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ftraits%2Fimpl-bounds-checking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fimpl-bounds-checking.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,11 +1,14 @@\n error[E0277]: the trait bound `isize: Clone2` is not satisfied\n   --> $DIR/impl-bounds-checking.rs:10:6\n    |\n-LL | trait Getter<T: Clone2> {\n-   |                 ------ required by this bound in `Getter`\n-...\n LL | impl Getter<isize> for isize {\n    |      ^^^^^^^^^^^^^ the trait `Clone2` is not implemented for `isize`\n+   |\n+note: required by a bound in `Getter`\n+  --> $DIR/impl-bounds-checking.rs:6:17\n+   |\n+LL | trait Getter<T: Clone2> {\n+   |                 ^^^^^^ required by this bound in `Getter`\n \n error: aborting due to previous error\n "}, {"sha": "072c46bc21e9a36ea0f8db890d1a36594ee9ff87", "filename": "src/test/ui/traits/inductive-overflow/lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Flifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Flifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Flifetime.rs?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -21,7 +21,7 @@ impl<'a> NotAuto for C<'a> {}\n \n fn is_send<S: NotAuto>() {}\n //~^ NOTE: required\n-\n+//~| NOTE: required\n fn main() {\n     // Should only be a few notes.\n     is_send::<X<C<'static>>>();"}, {"sha": "2905deb940f3a504d191c21e2cc9fab48c07ce19", "filename": "src/test/ui/traits/inductive-overflow/lifetime.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Flifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Flifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Flifetime.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,9 +1,6 @@\n error[E0275]: overflow evaluating the requirement `Box<X<C<'_>>>: NotAuto`\n   --> $DIR/lifetime.rs:27:5\n    |\n-LL | fn is_send<S: NotAuto>() {}\n-   |               ------- required by this bound in `is_send`\n-...\n LL |     is_send::<X<C<'static>>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n@@ -14,6 +11,11 @@ LL | impl<T: Y> NotAuto for X<T> where T::P: NotAuto {}\n    |            ^^^^^^^     ^^^^\n    = note: 2 redundant requirements hidden\n    = note: required because of the requirements on the impl of `NotAuto` for `X<C<'static>>`\n+note: required by a bound in `is_send`\n+  --> $DIR/lifetime.rs:22:15\n+   |\n+LL | fn is_send<S: NotAuto>() {}\n+   |               ^^^^^^^ required by this bound in `is_send`\n \n error: aborting due to previous error\n "}, {"sha": "7eb1c9ffb3b49d2cf3b97884215971f1c4edf85e", "filename": "src/test/ui/traits/inductive-overflow/simultaneous.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Fsimultaneous.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Fsimultaneous.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Fsimultaneous.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,9 +1,6 @@\n error[E0275]: overflow evaluating the requirement `{integer}: Tweedledee`\n   --> $DIR/simultaneous.rs:18:5\n    |\n-LL | fn is_ee<T: Combo>(t: T) {\n-   |             ----- required by this bound in `is_ee`\n-...\n LL |     is_ee(4);\n    |     ^^^^^\n    |\n@@ -12,6 +9,11 @@ note: required because of the requirements on the impl of `Combo` for `{integer}\n    |\n LL | impl<T: Tweedledee + Tweedledum> Combo for T {}\n    |                                  ^^^^^     ^\n+note: required by a bound in `is_ee`\n+  --> $DIR/simultaneous.rs:13:13\n+   |\n+LL | fn is_ee<T: Combo>(t: T) {\n+   |             ^^^^^ required by this bound in `is_ee`\n \n error: aborting due to previous error\n "}, {"sha": "5206b5721063a5c1539a59d7942f3617b4e4a63a", "filename": "src/test/ui/traits/inductive-overflow/supertrait-auto-trait.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Fsupertrait-auto-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Fsupertrait-auto-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Fsupertrait-auto-trait.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -9,13 +9,15 @@ LL | auto trait Magic: Copy {}\n error[E0277]: the trait bound `NoClone: Copy` is not satisfied\n   --> $DIR/supertrait-auto-trait.rs:16:23\n    |\n-LL | fn copy<T: Magic>(x: T) -> (T, T) { (x, x) }\n-   |            ----- required by this bound in `copy`\n-...\n LL |     let (a, b) = copy(NoClone);\n    |                       ^^^^^^^ the trait `Copy` is not implemented for `NoClone`\n    |\n    = note: required because of the requirements on the impl of `Magic` for `NoClone`\n+note: required by a bound in `copy`\n+  --> $DIR/supertrait-auto-trait.rs:10:12\n+   |\n+LL | fn copy<T: Magic>(x: T) -> (T, T) { (x, x) }\n+   |            ^^^^^ required by this bound in `copy`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "95325a534f551f383ffa819da2c99f5ab2bc5ee7", "filename": "src/test/ui/traits/inductive-overflow/supertrait.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Fsupertrait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Fsupertrait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Fsupertrait.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,9 +1,6 @@\n error[E0275]: overflow evaluating the requirement `NoClone: Magic`\n   --> $DIR/supertrait.rs:13:18\n    |\n-LL | fn copy<T: Magic>(x: T) -> (T, T) { (x, x) }\n-   |            ----- required by this bound in `copy`\n-...\n LL |     let (a, b) = copy(NoClone);\n    |                  ^^^^\n    |\n@@ -12,6 +9,11 @@ note: required because of the requirements on the impl of `Magic` for `NoClone`\n    |\n LL | impl<T: Magic> Magic for T {}\n    |                ^^^^^     ^\n+note: required by a bound in `copy`\n+  --> $DIR/supertrait.rs:7:12\n+   |\n+LL | fn copy<T: Magic>(x: T) -> (T, T) { (x, x) }\n+   |            ^^^^^ required by this bound in `copy`\n \n error: aborting due to previous error\n "}, {"sha": "28610c941814769362299904b2d7ddf6a5cc7d49", "filename": "src/test/ui/traits/inductive-overflow/two-traits.stderr", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Ftwo-traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Ftwo-traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Finductive-overflow%2Ftwo-traits.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,12 +1,14 @@\n error[E0277]: `T` cannot be shared between threads safely\n   --> $DIR/two-traits.rs:11:5\n    |\n-LL |     type X: Trait;\n-   |             ----- required by this bound in `Magic::X`\n-...\n LL |     type X = Self;\n    |     ^^^^^^^^^^^^^^ `T` cannot be shared between threads safely\n    |\n+note: required by a bound in `Magic::X`\n+  --> $DIR/two-traits.rs:8:13\n+   |\n+LL |     type X: Trait;\n+   |             ^^^^^ required by this bound in `Magic::X`\n help: consider further restricting this bound\n    |\n LL | impl<T: Magic + std::marker::Sync> Magic for T {\n@@ -15,11 +17,14 @@ LL | impl<T: Magic + std::marker::Sync> Magic for T {\n error[E0275]: overflow evaluating the requirement `*mut (): Magic`\n   --> $DIR/two-traits.rs:20:5\n    |\n-LL | fn wizard<T: Magic>() { check::<<T as Magic>::X>(); }\n-   |              ----- required by this bound in `wizard`\n-...\n LL |     wizard::<*mut ()>();\n    |     ^^^^^^^^^^^^^^^^^\n+   |\n+note: required by a bound in `wizard`\n+  --> $DIR/two-traits.rs:17:14\n+   |\n+LL | fn wizard<T: Magic>() { check::<<T as Magic>::X>(); }\n+   |              ^^^^^ required by this bound in `wizard`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "fba24d683a631ab2f288fdb090eb998e054140dd", "filename": "src/test/ui/traits/issue-65673.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ftraits%2Fissue-65673.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ftraits%2Fissue-65673.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-65673.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,13 +1,15 @@\n error[E0277]: the size for values of type `(dyn Trait + 'static)` cannot be known at compilation time\n   --> $DIR/issue-65673.rs:9:5\n    |\n-LL |     type Ctx;\n-   |     --------- required by this bound in `WithType::Ctx`\n-...\n LL |     type Ctx = dyn Alias<T>;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `(dyn Trait + 'static)`\n+note: required by a bound in `WithType::Ctx`\n+  --> $DIR/issue-65673.rs:4:5\n+   |\n+LL |     type Ctx;\n+   |     ^^^^^^^^^ required by this bound in `WithType::Ctx`\n \n error: aborting due to previous error\n "}, {"sha": "7d7f6ea30ae317de20a342300e4bfefe54fafe59", "filename": "src/test/ui/traits/issue-85735.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ftraits%2Fissue-85735.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ftraits%2Fissue-85735.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-85735.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -4,12 +4,12 @@ error[E0283]: type annotations needed\n LL |     T: FnMut(&'a ()),\n    |        ^^^^^^^^^^^^^ cannot infer type for type parameter `T`\n    |\n-  ::: $SRC_DIR/core/src/ops/function.rs:LL:COL\n+   = note: cannot satisfy `T: FnMut<(&'a (),)>`\n+note: required by a bound in `FnMut`\n+  --> $SRC_DIR/core/src/ops/function.rs:LL:COL\n    |\n LL | pub trait FnMut<Args>: FnOnce<Args> {\n-   | ----------------------------------- required by this bound in `FnMut`\n-   |\n-   = note: cannot satisfy `T: FnMut<(&'a (),)>`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `FnMut`\n \n error: aborting due to previous error\n "}, {"sha": "d2ac3a836f62261a6f9c0fe1eed0d1dfbbf6f3d2", "filename": "src/test/ui/traits/mutual-recursion-issue-75860.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ftraits%2Fmutual-recursion-issue-75860.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ftraits%2Fmutual-recursion-issue-75860.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fmutual-recursion-issue-75860.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -4,12 +4,12 @@ error[E0275]: overflow evaluating the requirement `Option<_>: Sized`\n LL |     iso(left, right)\n    |     ^^^\n    |\n-  ::: $SRC_DIR/core/src/option.rs:LL:COL\n+   = help: consider adding a `#![recursion_limit=\"256\"]` attribute to your crate (`mutual_recursion_issue_75860`)\n+note: required by a bound in `Option`\n+  --> $SRC_DIR/core/src/option.rs:LL:COL\n    |\n LL | pub enum Option<T> {\n-   |                 - required by this bound in `Option`\n-   |\n-   = help: consider adding a `#![recursion_limit=\"256\"]` attribute to your crate (`mutual_recursion_issue_75860`)\n+   |                 ^ required by this bound in `Option`\n \n error: aborting due to previous error\n "}, {"sha": "ad95e06eb4e521ae0bee0e586ac5374045a908cb", "filename": "src/test/ui/traits/negative-impls/negated-auto-traits-error.stderr", "status": "modified", "additions": 30, "deletions": 18, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegated-auto-traits-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegated-auto-traits-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegated-auto-traits-error.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -14,43 +14,46 @@ LL | struct Outer<T: Send>(T);\n error[E0277]: `dummy::TestType` cannot be sent between threads safely\n   --> $DIR/negated-auto-traits-error.rs:23:5\n    |\n-LL | struct Outer<T: Send>(T);\n-   |                 ---- required by this bound in `Outer`\n-...\n LL |     Outer(TestType);\n    |     ^^^^^^^^^^^^^^^ `dummy::TestType` cannot be sent between threads safely\n    |\n    = help: the trait `Send` is not implemented for `dummy::TestType`\n+note: required by a bound in `Outer`\n+  --> $DIR/negated-auto-traits-error.rs:10:17\n+   |\n+LL | struct Outer<T: Send>(T);\n+   |                 ^^^^ required by this bound in `Outer`\n \n error[E0277]: `dummy1b::TestType` cannot be sent between threads safely\n   --> $DIR/negated-auto-traits-error.rs:32:13\n    |\n-LL | fn is_send<T: Send>(_: T) {}\n-   |               ---- required by this bound in `is_send`\n-...\n LL |     is_send(TestType);\n    |             ^^^^^^^^ `dummy1b::TestType` cannot be sent between threads safely\n    |\n    = help: the trait `Send` is not implemented for `dummy1b::TestType`\n+note: required by a bound in `is_send`\n+  --> $DIR/negated-auto-traits-error.rs:16:15\n+   |\n+LL | fn is_send<T: Send>(_: T) {}\n+   |               ^^^^ required by this bound in `is_send`\n \n error[E0277]: `dummy1c::TestType` cannot be sent between threads safely\n   --> $DIR/negated-auto-traits-error.rs:40:13\n    |\n-LL | fn is_send<T: Send>(_: T) {}\n-   |               ---- required by this bound in `is_send`\n-...\n LL |     is_send((8, TestType));\n    |             ^^^^^^^^^^^^^ `dummy1c::TestType` cannot be sent between threads safely\n    |\n    = help: within `({integer}, dummy1c::TestType)`, the trait `Send` is not implemented for `dummy1c::TestType`\n    = note: required because it appears within the type `({integer}, dummy1c::TestType)`\n+note: required by a bound in `is_send`\n+  --> $DIR/negated-auto-traits-error.rs:16:15\n+   |\n+LL | fn is_send<T: Send>(_: T) {}\n+   |               ^^^^ required by this bound in `is_send`\n \n error[E0277]: `dummy2::TestType` cannot be sent between threads safely\n   --> $DIR/negated-auto-traits-error.rs:48:13\n    |\n-LL | fn is_send<T: Send>(_: T) {}\n-   |               ---- required by this bound in `is_send`\n-...\n LL |     is_send(Box::new(TestType));\n    |             ^^^^^^^^^^^^^^^^^^\n    |             |\n@@ -60,13 +63,15 @@ LL |     is_send(Box::new(TestType));\n    = note: the trait bound `dummy2::TestType: Send` is not satisfied\n    = note: required because of the requirements on the impl of `Send` for `Unique<dummy2::TestType>`\n    = note: required because it appears within the type `Box<dummy2::TestType>`\n+note: required by a bound in `is_send`\n+  --> $DIR/negated-auto-traits-error.rs:16:15\n+   |\n+LL | fn is_send<T: Send>(_: T) {}\n+   |               ^^^^ required by this bound in `is_send`\n \n error[E0277]: `dummy3::TestType` cannot be sent between threads safely\n   --> $DIR/negated-auto-traits-error.rs:56:13\n    |\n-LL | fn is_send<T: Send>(_: T) {}\n-   |               ---- required by this bound in `is_send`\n-...\n LL |     is_send(Box::new(Outer2(TestType)));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ `dummy3::TestType` cannot be sent between threads safely\n    |\n@@ -78,13 +83,15 @@ LL | struct Outer2<T>(T);\n    |        ^^^^^^\n    = note: required because of the requirements on the impl of `Send` for `Unique<Outer2<dummy3::TestType>>`\n    = note: required because it appears within the type `Box<Outer2<dummy3::TestType>>`\n+note: required by a bound in `is_send`\n+  --> $DIR/negated-auto-traits-error.rs:16:15\n+   |\n+LL | fn is_send<T: Send>(_: T) {}\n+   |               ^^^^ required by this bound in `is_send`\n \n error[E0277]: `main::TestType` cannot be sent between threads safely\n   --> $DIR/negated-auto-traits-error.rs:66:13\n    |\n-LL | fn is_sync<T: Sync>(_: T) {}\n-   |               ---- required by this bound in `is_sync`\n-...\n LL |     is_sync(Outer2(TestType));\n    |             ^^^^^^^^^^^^^^^^\n    |             |\n@@ -97,6 +104,11 @@ note: required because of the requirements on the impl of `Sync` for `Outer2<mai\n    |\n LL | unsafe impl<T: Send> Sync for Outer2<T> {}\n    |                      ^^^^     ^^^^^^^^^\n+note: required by a bound in `is_sync`\n+  --> $DIR/negated-auto-traits-error.rs:17:15\n+   |\n+LL | fn is_sync<T: Sync>(_: T) {}\n+   |               ^^^^ required by this bound in `is_sync`\n \n error: aborting due to 7 previous errors\n "}, {"sha": "10eeec20d98d761c1a6ee07385fdcfa79b17227d", "filename": "src/test/ui/traits/suggest-deferences/issue-39029.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fissue-39029.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fissue-39029.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fissue-39029.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -7,12 +7,12 @@ LL |     let _errors = TcpListener::bind(&bad);\n    |                                     the trait `ToSocketAddrs` is not implemented for `NoToSocketAddrs`\n    |                                     help: consider adding dereference here: `&*bad`\n    |\n-  ::: $SRC_DIR/std/src/net/tcp.rs:LL:COL\n+   = note: required because of the requirements on the impl of `ToSocketAddrs` for `&NoToSocketAddrs`\n+note: required by a bound in `TcpListener::bind`\n+  --> $SRC_DIR/std/src/net/tcp.rs:LL:COL\n    |\n LL |     pub fn bind<A: ToSocketAddrs>(addr: A) -> io::Result<TcpListener> {\n-   |                    ------------- required by this bound in `TcpListener::bind`\n-   |\n-   = note: required because of the requirements on the impl of `ToSocketAddrs` for `&NoToSocketAddrs`\n+   |                    ^^^^^^^^^^^^^ required by this bound in `TcpListener::bind`\n \n error: aborting due to previous error\n "}, {"sha": "750c8a86c56ddd5a387defc4380efb63d344f0d0", "filename": "src/test/ui/traits/suggest-deferences/issue-62530.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fissue-62530.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fissue-62530.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fissue-62530.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,14 +1,17 @@\n error[E0277]: the trait bound `&String: SomeTrait` is not satisfied\n   --> $DIR/issue-62530.rs:13:26\n    |\n-LL | fn takes_type_parameter<T>(_x: T) where T: SomeTrait {}\n-   |                                            --------- required by this bound in `takes_type_parameter`\n-...\n LL |     takes_type_parameter(&string);  // Error\n    |                          ^^^^^^^\n    |                          |\n    |                          the trait `SomeTrait` is not implemented for `&String`\n    |                          help: consider adding dereference here: `&*string`\n+   |\n+note: required by a bound in `takes_type_parameter`\n+  --> $DIR/issue-62530.rs:4:44\n+   |\n+LL | fn takes_type_parameter<T>(_x: T) where T: SomeTrait {}\n+   |                                            ^^^^^^^^^ required by this bound in `takes_type_parameter`\n \n error: aborting due to previous error\n "}, {"sha": "6fcf8780d6e225c1cac761d4a133bcea5e38d184", "filename": "src/test/ui/traits/suggest-deferences/multiple-0.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fmultiple-0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fmultiple-0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fmultiple-0.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,14 +1,17 @@\n error[E0277]: the trait bound `&Baz: Happy` is not satisfied\n   --> $DIR/multiple-0.rs:34:9\n    |\n-LL | fn foo<T>(_: T) where T: Happy {}\n-   |                          ----- required by this bound in `foo`\n-...\n LL |     foo(&baz);\n    |         ^^^^\n    |         |\n    |         the trait `Happy` is not implemented for `&Baz`\n    |         help: consider adding dereference here: `&***baz`\n+   |\n+note: required by a bound in `foo`\n+  --> $DIR/multiple-0.rs:30:26\n+   |\n+LL | fn foo<T>(_: T) where T: Happy {}\n+   |                          ^^^^^ required by this bound in `foo`\n \n error: aborting due to previous error\n "}, {"sha": "268f375050a4c8c618068e02be60854a2ce6742e", "filename": "src/test/ui/traits/suggest-deferences/multiple-1.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fmultiple-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fmultiple-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsuggest-deferences%2Fmultiple-1.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,11 +1,14 @@\n error[E0277]: the trait bound `&mut Baz: Happy` is not satisfied\n   --> $DIR/multiple-1.rs:52:9\n    |\n-LL | fn foo<T>(_: T) where T: Happy {}\n-   |                          ----- required by this bound in `foo`\n-...\n LL |     foo(&mut baz);\n    |         ^^^^^^^^ the trait `Happy` is not implemented for `&mut Baz`\n+   |\n+note: required by a bound in `foo`\n+  --> $DIR/multiple-1.rs:45:26\n+   |\n+LL | fn foo<T>(_: T) where T: Happy {}\n+   |                          ^^^^^ required by this bound in `foo`\n \n error: aborting due to previous error\n "}, {"sha": "d955cb06a1d50e9dd8a0f88c2a8bd8405a1258db", "filename": "src/test/ui/traits/suggest-where-clause.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ftraits%2Fsuggest-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ftraits%2Fsuggest-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsuggest-where-clause.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -7,11 +7,11 @@ LL |     // suggest a where-clause, if needed\n LL |     mem::size_of::<U>();\n    |                    ^ doesn't have a size known at compile-time\n    |\n-  ::: $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+note: required by a bound in `std::mem::size_of`\n+  --> $SRC_DIR/core/src/mem/mod.rs:LL:COL\n    |\n LL | pub const fn size_of<T>() -> usize {\n-   |                      - required by this bound in `std::mem::size_of`\n-   |\n+   |                      ^ required by this bound in `std::mem::size_of`\n help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - fn check<T: Iterator, U: ?Sized>() {\n@@ -27,16 +27,16 @@ LL | fn check<T: Iterator, U: ?Sized>() {\n LL |     mem::size_of::<Misc<U>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n-  ::: $SRC_DIR/core/src/mem/mod.rs:LL:COL\n-   |\n-LL | pub const fn size_of<T>() -> usize {\n-   |                      - required by this bound in `std::mem::size_of`\n-   |\n note: required because it appears within the type `Misc<U>`\n   --> $DIR/suggest-where-clause.rs:3:8\n    |\n LL | struct Misc<T:?Sized>(T);\n    |        ^^^^\n+note: required by a bound in `std::mem::size_of`\n+  --> $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+   |\n+LL | pub const fn size_of<T>() -> usize {\n+   |                      ^ required by this bound in `std::mem::size_of`\n help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - fn check<T: Iterator, U: ?Sized>() {\n@@ -93,25 +93,25 @@ error[E0277]: the size for values of type `[T]` cannot be known at compilation t\n LL |     mem::size_of::<[T]>();\n    |                    ^^^ doesn't have a size known at compile-time\n    |\n-  ::: $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+   = help: the trait `Sized` is not implemented for `[T]`\n+note: required by a bound in `std::mem::size_of`\n+  --> $SRC_DIR/core/src/mem/mod.rs:LL:COL\n    |\n LL | pub const fn size_of<T>() -> usize {\n-   |                      - required by this bound in `std::mem::size_of`\n-   |\n-   = help: the trait `Sized` is not implemented for `[T]`\n+   |                      ^ required by this bound in `std::mem::size_of`\n \n error[E0277]: the size for values of type `[&U]` cannot be known at compilation time\n   --> $DIR/suggest-where-clause.rs:31:5\n    |\n LL |     mem::size_of::<[&U]>();\n    |     ^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n-  ::: $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+   = help: the trait `Sized` is not implemented for `[&U]`\n+note: required by a bound in `std::mem::size_of`\n+  --> $SRC_DIR/core/src/mem/mod.rs:LL:COL\n    |\n LL | pub const fn size_of<T>() -> usize {\n-   |                      - required by this bound in `std::mem::size_of`\n-   |\n-   = help: the trait `Sized` is not implemented for `[&U]`\n+   |                      ^ required by this bound in `std::mem::size_of`\n \n error: aborting due to 7 previous errors\n "}, {"sha": "97ef2dd37f7910f2f6ab3ce0155899e0e4fb8563", "filename": "src/test/ui/trivial-bounds/trivial-bounds-leak.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-leak.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-leak.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-leak.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -37,9 +37,12 @@ error[E0277]: the trait bound `i32: Foo` is not satisfied\n    |\n LL |     generic_function(5i32);\n    |                      ^^^^ the trait `Foo` is not implemented for `i32`\n-...\n+   |\n+note: required by a bound in `generic_function`\n+  --> $DIR/trivial-bounds-leak.rs:29:24\n+   |\n LL | fn generic_function<T: Foo>(t: T) {}\n-   |                        --- required by this bound in `generic_function`\n+   |                        ^^^ required by this bound in `generic_function`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "d669124e9f112a11058fc8078242134e3b6cb728", "filename": "src/test/ui/try-trait/try-operator-on-main.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ftry-trait%2Ftry-operator-on-main.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ftry-trait%2Ftry-operator-on-main.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-trait%2Ftry-operator-on-main.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -58,9 +58,12 @@ error[E0277]: the trait bound `(): Try` is not satisfied\n    |\n LL |     try_trait_generic::<()>();\n    |                         ^^ the trait `Try` is not implemented for `()`\n-...\n+   |\n+note: required by a bound in `try_trait_generic`\n+  --> $DIR/try-operator-on-main.rs:17:25\n+   |\n LL | fn try_trait_generic<T: Try>() -> T {\n-   |                         --- required by this bound in `try_trait_generic`\n+   |                         ^^^ required by this bound in `try_trait_generic`\n \n error[E0277]: the `?` operator can only be applied to values that implement `Try`\n   --> $DIR/try-operator-on-main.rs:19:5"}, {"sha": "99eb884a0e8f25d868938bcdc5aa7e670eada99c", "filename": "src/test/ui/type-alias-impl-trait/generic_underconstrained.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -7,12 +7,14 @@ LL | type Underconstrained<T: Trait> = impl 'static;\n error[E0277]: the trait bound `T: Trait` is not satisfied\n   --> $DIR/generic_underconstrained.rs:10:31\n    |\n-LL | type Underconstrained<T: Trait> = impl 'static;\n-   |                          ----- required by this bound in `Underconstrained`\n-...\n LL | fn underconstrain<T>(_: T) -> Underconstrained<T> {\n    |                               ^^^^^^^^^^^^^^^^^^^ the trait `Trait` is not implemented for `T`\n    |\n+note: required by a bound in `Underconstrained`\n+  --> $DIR/generic_underconstrained.rs:6:26\n+   |\n+LL | type Underconstrained<T: Trait> = impl 'static;\n+   |                          ^^^^^ required by this bound in `Underconstrained`\n help: consider restricting type parameter `T`\n    |\n LL | fn underconstrain<T: Trait>(_: T) -> Underconstrained<T> {"}, {"sha": "1c1193705f99bd766124cf8f9d41dc11a703f144", "filename": "src/test/ui/type-alias-impl-trait/generic_underconstrained2.stderr", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_underconstrained2.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -13,12 +13,14 @@ LL | type Underconstrained2<T: std::fmt::Debug> = impl 'static;\n error[E0277]: `U` doesn't implement `Debug`\n   --> $DIR/generic_underconstrained2.rs:9:33\n    |\n-LL | type Underconstrained<T: std::fmt::Debug> = impl 'static;\n-   |                          --------------- required by this bound in `Underconstrained`\n-...\n LL | fn underconstrained<U>(_: U) -> Underconstrained<U> {\n    |                                 ^^^^^^^^^^^^^^^^^^^ `U` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    |\n+note: required by a bound in `Underconstrained`\n+  --> $DIR/generic_underconstrained2.rs:5:26\n+   |\n+LL | type Underconstrained<T: std::fmt::Debug> = impl 'static;\n+   |                          ^^^^^^^^^^^^^^^ required by this bound in `Underconstrained`\n help: consider restricting type parameter `U`\n    |\n LL | fn underconstrained<U: std::fmt::Debug>(_: U) -> Underconstrained<U> {\n@@ -27,12 +29,14 @@ LL | fn underconstrained<U: std::fmt::Debug>(_: U) -> Underconstrained<U> {\n error[E0277]: `V` doesn't implement `Debug`\n   --> $DIR/generic_underconstrained2.rs:18:43\n    |\n-LL | type Underconstrained2<T: std::fmt::Debug> = impl 'static;\n-   |                           --------------- required by this bound in `Underconstrained2`\n-...\n LL | fn underconstrained2<U, V>(_: U, _: V) -> Underconstrained2<V> {\n    |                                           ^^^^^^^^^^^^^^^^^^^^ `V` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    |\n+note: required by a bound in `Underconstrained2`\n+  --> $DIR/generic_underconstrained2.rs:14:27\n+   |\n+LL | type Underconstrained2<T: std::fmt::Debug> = impl 'static;\n+   |                           ^^^^^^^^^^^^^^^ required by this bound in `Underconstrained2`\n help: consider restricting type parameter `V`\n    |\n LL | fn underconstrained2<U, V: std::fmt::Debug>(_: U, _: V) -> Underconstrained2<V> {"}, {"sha": "999486018a3728ff3c92a44fb334065027e27d57", "filename": "src/test/ui/type/type-annotation-needed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ftype%2Ftype-annotation-needed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ftype%2Ftype-annotation-needed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-annotation-needed.rs?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,6 +1,6 @@\n fn foo<T: Into<String>>(x: i32) {}\n //~^ NOTE required by\n-\n+//~| NOTE required by\n fn main() {\n     foo(42);\n     //~^ ERROR type annotations needed"}, {"sha": "20cae3eb24c2982db50bc93aa68a939538bd607d", "filename": "src/test/ui/type/type-annotation-needed.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ftype%2Ftype-annotation-needed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ftype%2Ftype-annotation-needed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-annotation-needed.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,13 +1,15 @@\n error[E0283]: type annotations needed\n   --> $DIR/type-annotation-needed.rs:5:5\n    |\n-LL | fn foo<T: Into<String>>(x: i32) {}\n-   |           ------------ required by this bound in `foo`\n-...\n LL |     foo(42);\n    |     ^^^ cannot infer type for type parameter `T` declared on the function `foo`\n    |\n    = note: cannot satisfy `_: Into<String>`\n+note: required by a bound in `foo`\n+  --> $DIR/type-annotation-needed.rs:1:11\n+   |\n+LL | fn foo<T: Into<String>>(x: i32) {}\n+   |           ^^^^^^^^^^^^ required by this bound in `foo`\n help: consider specifying the type argument in the function call\n    |\n LL |     foo::<T>(42);"}, {"sha": "f8dbd66c1c7ac178a959f5422f4c6cc755b842bd", "filename": "src/test/ui/type/type-check-defaults.stderr", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ftype%2Ftype-check-defaults.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ftype%2Ftype-check-defaults.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check-defaults.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,23 +1,28 @@\n error[E0277]: a value of type `i32` cannot be built from an iterator over elements of type `i32`\n   --> $DIR/type-check-defaults.rs:6:19\n    |\n-LL | struct Foo<T, U: FromIterator<T>>(T, U);\n-   |                  --------------- required by this bound in `Foo`\n LL | struct WellFormed<Z = Foo<i32, i32>>(Z);\n    |                   ^ value of type `i32` cannot be built from `std::iter::Iterator<Item=i32>`\n    |\n    = help: the trait `FromIterator<i32>` is not implemented for `i32`\n+note: required by a bound in `Foo`\n+  --> $DIR/type-check-defaults.rs:5:18\n+   |\n+LL | struct Foo<T, U: FromIterator<T>>(T, U);\n+   |                  ^^^^^^^^^^^^^^^ required by this bound in `Foo`\n \n error[E0277]: a value of type `i32` cannot be built from an iterator over elements of type `i32`\n   --> $DIR/type-check-defaults.rs:8:27\n    |\n-LL | struct Foo<T, U: FromIterator<T>>(T, U);\n-   |                  --------------- required by this bound in `Foo`\n-...\n LL | struct WellFormedNoBounds<Z:?Sized = Foo<i32, i32>>(Z);\n    |                           ^ value of type `i32` cannot be built from `std::iter::Iterator<Item=i32>`\n    |\n    = help: the trait `FromIterator<i32>` is not implemented for `i32`\n+note: required by a bound in `Foo`\n+  --> $DIR/type-check-defaults.rs:5:18\n+   |\n+LL | struct Foo<T, U: FromIterator<T>>(T, U);\n+   |                  ^^^^^^^^^^^^^^^ required by this bound in `Foo`\n \n error[E0277]: the trait bound `String: Copy` is not satisfied\n   --> $DIR/type-check-defaults.rs:11:17\n@@ -58,11 +63,14 @@ LL | trait TraitBound<T:Copy=String> {}\n error[E0277]: the trait bound `T: Copy` is not satisfied\n   --> $DIR/type-check-defaults.rs:21:25\n    |\n-LL | trait Super<T: Copy> { }\n-   |                ---- required by this bound in `Super`\n LL | trait Base<T = String>: Super<T> { }\n    |                         ^^^^^^^^ the trait `Copy` is not implemented for `T`\n    |\n+note: required by a bound in `Super`\n+  --> $DIR/type-check-defaults.rs:20:16\n+   |\n+LL | trait Super<T: Copy> { }\n+   |                ^^^^ required by this bound in `Super`\n help: consider further restricting type parameter `T`\n    |\n LL | trait Base<T = String>: Super<T> where T: std::marker::Copy { }"}, {"sha": "9ca07eaba838ab2b82f156c4ff86ea272636179b", "filename": "src/test/ui/type/type-check/issue-40294.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fissue-40294.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fissue-40294.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fissue-40294.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,13 +1,15 @@\n error[E0283]: type annotations needed\n   --> $DIR/issue-40294.rs:6:19\n    |\n-LL | trait Foo: Sized {\n-   | ---------------- required by this bound in `Foo`\n-...\n LL |     where &'a T : Foo,\n    |                   ^^^ cannot infer type for reference `&'a T`\n    |\n    = note: cannot satisfy `&'a T: Foo`\n+note: required by a bound in `Foo`\n+  --> $DIR/issue-40294.rs:1:1\n+   |\n+LL | trait Foo: Sized {\n+   | ^^^^^^^^^^^^^^^^ required by this bound in `Foo`\n \n error: aborting due to previous error\n "}, {"sha": "7aefa0646114cbba773be5f63430a8c8b35a246e", "filename": "src/test/ui/typeck/typeck-default-trait-impl-assoc-type.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-assoc-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-assoc-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-assoc-type.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -3,11 +3,13 @@ error[E0277]: `<T as Trait>::AssocType` cannot be sent between threads safely\n    |\n LL |     is_send::<T::AssocType>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ `<T as Trait>::AssocType` cannot be sent between threads safely\n-...\n-LL | fn is_send<T:Send>() {\n-   |              ---- required by this bound in `is_send`\n    |\n    = help: the trait `Send` is not implemented for `<T as Trait>::AssocType`\n+note: required by a bound in `is_send`\n+  --> $DIR/typeck-default-trait-impl-assoc-type.rs:14:14\n+   |\n+LL | fn is_send<T:Send>() {\n+   |              ^^^^ required by this bound in `is_send`\n help: consider further restricting the associated type\n    |\n LL | fn bar<T:Trait+Send>() where <T as Trait>::AssocType: Send {"}, {"sha": "2ce32990e55db3bcaa027feab05c3aeb868a8a27", "filename": "src/test/ui/typeck/typeck-default-trait-impl-negation-send.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-negation-send.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-negation-send.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-negation-send.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,13 +1,15 @@\n error[E0277]: `MyNotSendable` cannot be sent between threads safely\n   --> $DIR/typeck-default-trait-impl-negation-send.rs:19:15\n    |\n-LL | fn is_send<T: Send>() {}\n-   |               ---- required by this bound in `is_send`\n-...\n LL |     is_send::<MyNotSendable>();\n    |               ^^^^^^^^^^^^^ `MyNotSendable` cannot be sent between threads safely\n    |\n    = help: the trait `Send` is not implemented for `MyNotSendable`\n+note: required by a bound in `is_send`\n+  --> $DIR/typeck-default-trait-impl-negation-send.rs:15:15\n+   |\n+LL | fn is_send<T: Send>() {}\n+   |               ^^^^ required by this bound in `is_send`\n \n error: aborting due to previous error\n "}, {"sha": "6bb5e1f54272b6257604508bacd675a51d3bb558", "filename": "src/test/ui/typeck/typeck-default-trait-impl-negation-sync.stderr", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-negation-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-negation-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-negation-sync.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,20 +1,19 @@\n error[E0277]: `MyNotSync` cannot be shared between threads safely\n   --> $DIR/typeck-default-trait-impl-negation-sync.rs:33:15\n    |\n-LL | fn is_sync<T: Sync>() {}\n-   |               ---- required by this bound in `is_sync`\n-...\n LL |     is_sync::<MyNotSync>();\n    |               ^^^^^^^^^ `MyNotSync` cannot be shared between threads safely\n    |\n    = help: the trait `Sync` is not implemented for `MyNotSync`\n+note: required by a bound in `is_sync`\n+  --> $DIR/typeck-default-trait-impl-negation-sync.rs:29:15\n+   |\n+LL | fn is_sync<T: Sync>() {}\n+   |               ^^^^ required by this bound in `is_sync`\n \n error[E0277]: `UnsafeCell<u8>` cannot be shared between threads safely\n   --> $DIR/typeck-default-trait-impl-negation-sync.rs:36:5\n    |\n-LL | fn is_sync<T: Sync>() {}\n-   |               ---- required by this bound in `is_sync`\n-...\n LL |     is_sync::<MyTypeWUnsafe>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ `UnsafeCell<u8>` cannot be shared between threads safely\n    |\n@@ -24,13 +23,15 @@ note: required because it appears within the type `MyTypeWUnsafe`\n    |\n LL | struct MyTypeWUnsafe {\n    |        ^^^^^^^^^^^^^\n+note: required by a bound in `is_sync`\n+  --> $DIR/typeck-default-trait-impl-negation-sync.rs:29:15\n+   |\n+LL | fn is_sync<T: Sync>() {}\n+   |               ^^^^ required by this bound in `is_sync`\n \n error[E0277]: `Managed` cannot be shared between threads safely\n   --> $DIR/typeck-default-trait-impl-negation-sync.rs:39:5\n    |\n-LL | fn is_sync<T: Sync>() {}\n-   |               ---- required by this bound in `is_sync`\n-...\n LL |     is_sync::<MyTypeManaged>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ `Managed` cannot be shared between threads safely\n    |\n@@ -40,6 +41,11 @@ note: required because it appears within the type `MyTypeManaged`\n    |\n LL | struct MyTypeManaged {\n    |        ^^^^^^^^^^^^^\n+note: required by a bound in `is_sync`\n+  --> $DIR/typeck-default-trait-impl-negation-sync.rs:29:15\n+   |\n+LL | fn is_sync<T: Sync>() {}\n+   |               ^^^^ required by this bound in `is_sync`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "887a1ddbb69245c49fa3610d24a5a2214a2b066a", "filename": "src/test/ui/typeck/typeck-default-trait-impl-send-param.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-send-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-send-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-default-trait-impl-send-param.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -3,10 +3,12 @@ error[E0277]: `T` cannot be sent between threads safely\n    |\n LL |     is_send::<T>()\n    |               ^ `T` cannot be sent between threads safely\n-...\n-LL | fn is_send<T:Send>() {\n-   |              ---- required by this bound in `is_send`\n    |\n+note: required by a bound in `is_send`\n+  --> $DIR/typeck-default-trait-impl-send-param.rs:8:14\n+   |\n+LL | fn is_send<T:Send>() {\n+   |              ^^^^ required by this bound in `is_send`\n help: consider restricting type parameter `T`\n    |\n LL | fn foo<T: std::marker::Send>() {"}, {"sha": "c0f388bd15b28a46d8b9fe635d0aeb61d9a3417a", "filename": "src/test/ui/typeck/typeck-unsafe-always-share.stderr", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-unsafe-always-share.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-unsafe-always-share.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-unsafe-always-share.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,31 +1,32 @@\n error[E0277]: `UnsafeCell<MySync<{integer}>>` cannot be shared between threads safely\n   --> $DIR/typeck-unsafe-always-share.rs:19:10\n    |\n-LL | fn test<T: Sync>(s: T) {}\n-   |            ---- required by this bound in `test`\n-...\n LL |     test(us);\n    |          ^^ `UnsafeCell<MySync<{integer}>>` cannot be shared between threads safely\n    |\n    = help: the trait `Sync` is not implemented for `UnsafeCell<MySync<{integer}>>`\n+note: required by a bound in `test`\n+  --> $DIR/typeck-unsafe-always-share.rs:15:12\n+   |\n+LL | fn test<T: Sync>(s: T) {}\n+   |            ^^^^ required by this bound in `test`\n \n error[E0277]: `UnsafeCell<NoSync>` cannot be shared between threads safely\n   --> $DIR/typeck-unsafe-always-share.rs:23:10\n    |\n-LL | fn test<T: Sync>(s: T) {}\n-   |            ---- required by this bound in `test`\n-...\n LL |     test(uns);\n    |          ^^^ `UnsafeCell<NoSync>` cannot be shared between threads safely\n    |\n    = help: the trait `Sync` is not implemented for `UnsafeCell<NoSync>`\n+note: required by a bound in `test`\n+  --> $DIR/typeck-unsafe-always-share.rs:15:12\n+   |\n+LL | fn test<T: Sync>(s: T) {}\n+   |            ^^^^ required by this bound in `test`\n \n error[E0277]: `UnsafeCell<NoSync>` cannot be shared between threads safely\n   --> $DIR/typeck-unsafe-always-share.rs:27:5\n    |\n-LL | fn test<T: Sync>(s: T) {}\n-   |            ---- required by this bound in `test`\n-...\n LL |     test(ms);\n    |     ^^^^ `UnsafeCell<NoSync>` cannot be shared between threads safely\n    |\n@@ -35,17 +36,24 @@ note: required because it appears within the type `MySync<NoSync>`\n    |\n LL | struct MySync<T> {\n    |        ^^^^^^\n+note: required by a bound in `test`\n+  --> $DIR/typeck-unsafe-always-share.rs:15:12\n+   |\n+LL | fn test<T: Sync>(s: T) {}\n+   |            ^^^^ required by this bound in `test`\n \n error[E0277]: `NoSync` cannot be shared between threads safely\n   --> $DIR/typeck-unsafe-always-share.rs:30:10\n    |\n-LL | fn test<T: Sync>(s: T) {}\n-   |            ---- required by this bound in `test`\n-...\n LL |     test(NoSync);\n    |          ^^^^^^ `NoSync` cannot be shared between threads safely\n    |\n    = help: the trait `Sync` is not implemented for `NoSync`\n+note: required by a bound in `test`\n+  --> $DIR/typeck-unsafe-always-share.rs:15:12\n+   |\n+LL | fn test<T: Sync>(s: T) {}\n+   |            ^^^^ required by this bound in `test`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "09d3eec6b2148db0149685cdbb7cf99e773d5896", "filename": "src/test/ui/unboxed-closures/unboxed-closure-sugar-default.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-default.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,11 +1,14 @@\n error[E0277]: the trait bound `dyn Foo<(isize,), isize, Output = ()>: Eq<dyn Foo<(isize,), Output = ()>>` is not satisfied\n   --> $DIR/unboxed-closure-sugar-default.rs:21:5\n    |\n-LL | fn eq<A: ?Sized,B: ?Sized>() where A : Eq<B> { }\n-   |                                        ----- required by this bound in `eq`\n-...\n LL |     eq::<dyn Foo<(isize,), isize, Output=()>, dyn Foo(isize)>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Eq<dyn Foo<(isize,), Output = ()>>` is not implemented for `dyn Foo<(isize,), isize, Output = ()>`\n+   |\n+note: required by a bound in `eq`\n+  --> $DIR/unboxed-closure-sugar-default.rs:14:40\n+   |\n+LL | fn eq<A: ?Sized,B: ?Sized>() where A : Eq<B> { }\n+   |                                        ^^^^^ required by this bound in `eq`\n \n error: aborting due to previous error\n "}, {"sha": "a1cbf842a683b9972676599f3a368f7c2a6efd6a", "filename": "src/test/ui/unboxed-closures/unboxed-closure-sugar-equiv.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-equiv.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-equiv.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-equiv.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,12 +1,15 @@\n error[E0277]: the trait bound `dyn Foo<(char,), Output = ()>: Eq<dyn Foo<(), Output = ()>>` is not satisfied\n   --> $DIR/unboxed-closure-sugar-equiv.rs:43:5\n    |\n-LL |   fn eq<A: ?Sized,B: ?Sized +Eq<A>>() { }\n-   |                              ----- required by this bound in `eq`\n-...\n LL | /     eq::< dyn Foo<(),Output=()>,\n LL | |           dyn Foo(char)                                               >();\n    | |_______________________________________________________________________^ the trait `Eq<dyn Foo<(), Output = ()>>` is not implemented for `dyn Foo<(char,), Output = ()>`\n+   |\n+note: required by a bound in `eq`\n+  --> $DIR/unboxed-closure-sugar-equiv.rs:16:28\n+   |\n+LL | fn eq<A: ?Sized,B: ?Sized +Eq<A>>() { }\n+   |                            ^^^^^ required by this bound in `eq`\n \n error: aborting due to previous error\n "}, {"sha": "f30bf40983e23cfe74790311632f332682d8568d", "filename": "src/test/ui/unboxed-closures/unboxed-closures-fnmut-as-fn.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-fnmut-as-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-fnmut-as-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-fnmut-as-fn.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,13 +1,15 @@\n error[E0277]: expected a `Fn<(isize,)>` closure, found `S`\n   --> $DIR/unboxed-closures-fnmut-as-fn.rs:28:21\n    |\n-LL | fn call_it<F:Fn(isize)->isize>(f: &F, x: isize) -> isize {\n-   |              ---------------- required by this bound in `call_it`\n-...\n LL |     let x = call_it(&S, 22);\n    |                     ^^ expected an `Fn<(isize,)>` closure, found `S`\n    |\n    = help: the trait `Fn<(isize,)>` is not implemented for `S`\n+note: required by a bound in `call_it`\n+  --> $DIR/unboxed-closures-fnmut-as-fn.rs:23:14\n+   |\n+LL | fn call_it<F:Fn(isize)->isize>(f: &F, x: isize) -> isize {\n+   |              ^^^^^^^^^^^^^^^^ required by this bound in `call_it`\n \n error: aborting due to previous error\n "}, {"sha": "6b21b9246f7afd20dc3e4c8fa02e5a87a53ca379", "filename": "src/test/ui/unboxed-closures/unboxed-closures-unsafe-extern-fn.stderr", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-unsafe-extern-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-unsafe-extern-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-unsafe-extern-fn.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,35 +1,41 @@\n error[E0277]: expected a `Fn<(&isize,)>` closure, found `for<'r> unsafe fn(&'r isize) -> isize {square}`\n   --> $DIR/unboxed-closures-unsafe-extern-fn.rs:20:21\n    |\n-LL | fn call_it<F: Fn(&isize) -> isize>(_: &F, _: isize) -> isize {\n-   |               ------------------- required by this bound in `call_it`\n-...\n LL |     let x = call_it(&square, 22);\n    |                     ^^^^^^^ expected an `Fn<(&isize,)>` closure, found `for<'r> unsafe fn(&'r isize) -> isize {square}`\n    |\n    = help: the trait `for<'r> Fn<(&'r isize,)>` is not implemented for `for<'r> unsafe fn(&'r isize) -> isize {square}`\n+note: required by a bound in `call_it`\n+  --> $DIR/unboxed-closures-unsafe-extern-fn.rs:9:15\n+   |\n+LL | fn call_it<F: Fn(&isize) -> isize>(_: &F, _: isize) -> isize {\n+   |               ^^^^^^^^^^^^^^^^^^^ required by this bound in `call_it`\n \n error[E0277]: expected a `FnMut<(&isize,)>` closure, found `for<'r> unsafe fn(&'r isize) -> isize {square}`\n   --> $DIR/unboxed-closures-unsafe-extern-fn.rs:25:25\n    |\n-LL | fn call_it_mut<F: FnMut(&isize) -> isize>(_: &mut F, _: isize) -> isize {\n-   |                   ---------------------- required by this bound in `call_it_mut`\n-...\n LL |     let y = call_it_mut(&mut square, 22);\n    |                         ^^^^^^^^^^^ expected an `FnMut<(&isize,)>` closure, found `for<'r> unsafe fn(&'r isize) -> isize {square}`\n    |\n    = help: the trait `for<'r> FnMut<(&'r isize,)>` is not implemented for `for<'r> unsafe fn(&'r isize) -> isize {square}`\n+note: required by a bound in `call_it_mut`\n+  --> $DIR/unboxed-closures-unsafe-extern-fn.rs:12:19\n+   |\n+LL | fn call_it_mut<F: FnMut(&isize) -> isize>(_: &mut F, _: isize) -> isize {\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `call_it_mut`\n \n error[E0277]: expected a `FnOnce<(&isize,)>` closure, found `for<'r> unsafe fn(&'r isize) -> isize {square}`\n   --> $DIR/unboxed-closures-unsafe-extern-fn.rs:30:26\n    |\n-LL | fn call_it_once<F: FnOnce(&isize) -> isize>(_: F, _: isize) -> isize {\n-   |                    ----------------------- required by this bound in `call_it_once`\n-...\n LL |     let z = call_it_once(square, 22);\n    |                          ^^^^^^ expected an `FnOnce<(&isize,)>` closure, found `for<'r> unsafe fn(&'r isize) -> isize {square}`\n    |\n    = help: the trait `for<'r> FnOnce<(&'r isize,)>` is not implemented for `for<'r> unsafe fn(&'r isize) -> isize {square}`\n+note: required by a bound in `call_it_once`\n+  --> $DIR/unboxed-closures-unsafe-extern-fn.rs:15:20\n+   |\n+LL | fn call_it_once<F: FnOnce(&isize) -> isize>(_: F, _: isize) -> isize {\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `call_it_once`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "936cb27759aad7e2a271a0659b05799c1a71d11e", "filename": "src/test/ui/unboxed-closures/unboxed-closures-wrong-abi.stderr", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-wrong-abi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-wrong-abi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-wrong-abi.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,35 +1,41 @@\n error[E0277]: expected a `Fn<(&isize,)>` closure, found `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n   --> $DIR/unboxed-closures-wrong-abi.rs:20:21\n    |\n-LL | fn call_it<F: Fn(&isize) -> isize>(_: &F, _: isize) -> isize {\n-   |               ------------------- required by this bound in `call_it`\n-...\n LL |     let x = call_it(&square, 22);\n    |                     ^^^^^^^ expected an `Fn<(&isize,)>` closure, found `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n    |\n    = help: the trait `for<'r> Fn<(&'r isize,)>` is not implemented for `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n+note: required by a bound in `call_it`\n+  --> $DIR/unboxed-closures-wrong-abi.rs:9:15\n+   |\n+LL | fn call_it<F: Fn(&isize) -> isize>(_: &F, _: isize) -> isize {\n+   |               ^^^^^^^^^^^^^^^^^^^ required by this bound in `call_it`\n \n error[E0277]: expected a `FnMut<(&isize,)>` closure, found `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n   --> $DIR/unboxed-closures-wrong-abi.rs:25:25\n    |\n-LL | fn call_it_mut<F: FnMut(&isize) -> isize>(_: &mut F, _: isize) -> isize {\n-   |                   ---------------------- required by this bound in `call_it_mut`\n-...\n LL |     let y = call_it_mut(&mut square, 22);\n    |                         ^^^^^^^^^^^ expected an `FnMut<(&isize,)>` closure, found `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n    |\n    = help: the trait `for<'r> FnMut<(&'r isize,)>` is not implemented for `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n+note: required by a bound in `call_it_mut`\n+  --> $DIR/unboxed-closures-wrong-abi.rs:12:19\n+   |\n+LL | fn call_it_mut<F: FnMut(&isize) -> isize>(_: &mut F, _: isize) -> isize {\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `call_it_mut`\n \n error[E0277]: expected a `FnOnce<(&isize,)>` closure, found `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n   --> $DIR/unboxed-closures-wrong-abi.rs:30:26\n    |\n-LL | fn call_it_once<F: FnOnce(&isize) -> isize>(_: F, _: isize) -> isize {\n-   |                    ----------------------- required by this bound in `call_it_once`\n-...\n LL |     let z = call_it_once(square, 22);\n    |                          ^^^^^^ expected an `FnOnce<(&isize,)>` closure, found `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n    |\n    = help: the trait `for<'r> FnOnce<(&'r isize,)>` is not implemented for `for<'r> extern \"C\" fn(&'r isize) -> isize {square}`\n+note: required by a bound in `call_it_once`\n+  --> $DIR/unboxed-closures-wrong-abi.rs:15:20\n+   |\n+LL | fn call_it_once<F: FnOnce(&isize) -> isize>(_: F, _: isize) -> isize {\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `call_it_once`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "f9f1182e30998a63def1cee27e7209fc384f3f4f", "filename": "src/test/ui/unboxed-closures/unboxed-closures-wrong-arg-type-extern-fn.stderr", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-wrong-arg-type-extern-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-wrong-arg-type-extern-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-wrong-arg-type-extern-fn.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,35 +1,41 @@\n error[E0277]: expected a `Fn<(&isize,)>` closure, found `unsafe fn(isize) -> isize {square}`\n   --> $DIR/unboxed-closures-wrong-arg-type-extern-fn.rs:21:21\n    |\n-LL | fn call_it<F: Fn(&isize) -> isize>(_: &F, _: isize) -> isize {\n-   |               ------------------- required by this bound in `call_it`\n-...\n LL |     let x = call_it(&square, 22);\n    |                     ^^^^^^^ expected an `Fn<(&isize,)>` closure, found `unsafe fn(isize) -> isize {square}`\n    |\n    = help: the trait `for<'r> Fn<(&'r isize,)>` is not implemented for `unsafe fn(isize) -> isize {square}`\n+note: required by a bound in `call_it`\n+  --> $DIR/unboxed-closures-wrong-arg-type-extern-fn.rs:10:15\n+   |\n+LL | fn call_it<F: Fn(&isize) -> isize>(_: &F, _: isize) -> isize {\n+   |               ^^^^^^^^^^^^^^^^^^^ required by this bound in `call_it`\n \n error[E0277]: expected a `FnMut<(&isize,)>` closure, found `unsafe fn(isize) -> isize {square}`\n   --> $DIR/unboxed-closures-wrong-arg-type-extern-fn.rs:26:25\n    |\n-LL | fn call_it_mut<F: FnMut(&isize) -> isize>(_: &mut F, _: isize) -> isize {\n-   |                   ---------------------- required by this bound in `call_it_mut`\n-...\n LL |     let y = call_it_mut(&mut square, 22);\n    |                         ^^^^^^^^^^^ expected an `FnMut<(&isize,)>` closure, found `unsafe fn(isize) -> isize {square}`\n    |\n    = help: the trait `for<'r> FnMut<(&'r isize,)>` is not implemented for `unsafe fn(isize) -> isize {square}`\n+note: required by a bound in `call_it_mut`\n+  --> $DIR/unboxed-closures-wrong-arg-type-extern-fn.rs:13:19\n+   |\n+LL | fn call_it_mut<F: FnMut(&isize) -> isize>(_: &mut F, _: isize) -> isize {\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `call_it_mut`\n \n error[E0277]: expected a `FnOnce<(&isize,)>` closure, found `unsafe fn(isize) -> isize {square}`\n   --> $DIR/unboxed-closures-wrong-arg-type-extern-fn.rs:31:26\n    |\n-LL | fn call_it_once<F: FnOnce(&isize) -> isize>(_: F, _: isize) -> isize {\n-   |                    ----------------------- required by this bound in `call_it_once`\n-...\n LL |     let z = call_it_once(square, 22);\n    |                          ^^^^^^ expected an `FnOnce<(&isize,)>` closure, found `unsafe fn(isize) -> isize {square}`\n    |\n    = help: the trait `for<'r> FnOnce<(&'r isize,)>` is not implemented for `unsafe fn(isize) -> isize {square}`\n+note: required by a bound in `call_it_once`\n+  --> $DIR/unboxed-closures-wrong-arg-type-extern-fn.rs:16:20\n+   |\n+LL | fn call_it_once<F: FnOnce(&isize) -> isize>(_: F, _: isize) -> isize {\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `call_it_once`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "414d2759a47982bc68cfd9d6da163256895fb4fb", "filename": "src/test/ui/union/union-derive-clone.mirunsafeck.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.mirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.mirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.mirunsafeck.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -4,11 +4,11 @@ error[E0277]: the trait bound `U1: Copy` is not satisfied\n LL | #[derive(Clone)]\n    |          ^^^^^ the trait `Copy` is not implemented for `U1`\n    |\n-  ::: $SRC_DIR/core/src/clone.rs:LL:COL\n+note: required by a bound in `AssertParamIsCopy`\n+  --> $SRC_DIR/core/src/clone.rs:LL:COL\n    |\n LL | pub struct AssertParamIsCopy<T: Copy + ?Sized> {\n-   |                                 ---- required by this bound in `AssertParamIsCopy`\n-   |\n+   |                                 ^^^^ required by this bound in `AssertParamIsCopy`\n    = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0599]: the method `clone` exists for union `U5<CloneNoCopy>`, but its trait bounds were not satisfied"}, {"sha": "414d2759a47982bc68cfd9d6da163256895fb4fb", "filename": "src/test/ui/union/union-derive-clone.thirunsafeck.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.thirunsafeck.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -4,11 +4,11 @@ error[E0277]: the trait bound `U1: Copy` is not satisfied\n LL | #[derive(Clone)]\n    |          ^^^^^ the trait `Copy` is not implemented for `U1`\n    |\n-  ::: $SRC_DIR/core/src/clone.rs:LL:COL\n+note: required by a bound in `AssertParamIsCopy`\n+  --> $SRC_DIR/core/src/clone.rs:LL:COL\n    |\n LL | pub struct AssertParamIsCopy<T: Copy + ?Sized> {\n-   |                                 ---- required by this bound in `AssertParamIsCopy`\n-   |\n+   |                                 ^^^^ required by this bound in `AssertParamIsCopy`\n    = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0599]: the method `clone` exists for union `U5<CloneNoCopy>`, but its trait bounds were not satisfied"}, {"sha": "ff4dfcd2917606a43467b554f23fac922caf5965", "filename": "src/test/ui/union/union-derive-eq.mirunsafeck.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Funion%2Funion-derive-eq.mirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Funion%2Funion-derive-eq.mirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-derive-eq.mirunsafeck.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -7,11 +7,11 @@ LL | union U2 {\n LL |     a: PartialEqNotEq,\n    |     ^^^^^^^^^^^^^^^^^ the trait `Eq` is not implemented for `PartialEqNotEq`\n    |\n-  ::: $SRC_DIR/core/src/cmp.rs:LL:COL\n+note: required by a bound in `AssertParamIsEq`\n+  --> $SRC_DIR/core/src/cmp.rs:LL:COL\n    |\n LL | pub struct AssertParamIsEq<T: Eq + ?Sized> {\n-   |                               -- required by this bound in `AssertParamIsEq`\n-   |\n+   |                               ^^ required by this bound in `AssertParamIsEq`\n    = note: this error originates in the derive macro `Eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "ff4dfcd2917606a43467b554f23fac922caf5965", "filename": "src/test/ui/union/union-derive-eq.thirunsafeck.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Funion%2Funion-derive-eq.thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Funion%2Funion-derive-eq.thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-derive-eq.thirunsafeck.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -7,11 +7,11 @@ LL | union U2 {\n LL |     a: PartialEqNotEq,\n    |     ^^^^^^^^^^^^^^^^^ the trait `Eq` is not implemented for `PartialEqNotEq`\n    |\n-  ::: $SRC_DIR/core/src/cmp.rs:LL:COL\n+note: required by a bound in `AssertParamIsEq`\n+  --> $SRC_DIR/core/src/cmp.rs:LL:COL\n    |\n LL | pub struct AssertParamIsEq<T: Eq + ?Sized> {\n-   |                               -- required by this bound in `AssertParamIsEq`\n-   |\n+   |                               ^^ required by this bound in `AssertParamIsEq`\n    = note: this error originates in the derive macro `Eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "7d0a2cb85b6120b65f8d5d6b57f403c86476ecc4", "filename": "src/test/ui/unsized/issue-75707.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Funsized%2Fissue-75707.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Funsized%2Fissue-75707.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Fissue-75707.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,11 +1,14 @@\n error[E0277]: the trait bound `MyCall: Callback` is not satisfied\n   --> $DIR/issue-75707.rs:15:5\n    |\n-LL | fn f<P: Processing + ?Sized>() {\n-   |         ---------- required by this bound in `f`\n-...\n LL |     f::<dyn Processing<Call = MyCall>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Callback` is not implemented for `MyCall`\n+   |\n+note: required by a bound in `f`\n+  --> $DIR/issue-75707.rs:9:9\n+   |\n+LL | fn f<P: Processing + ?Sized>() {\n+   |         ^^^^^^^^^^ required by this bound in `f`\n \n error: aborting due to previous error\n "}, {"sha": "531e9b4c9c95533194bdb40bbbb245e58f2c400b", "filename": "src/test/ui/unsized/unsized-bare-typaram.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Funsized%2Funsized-bare-typaram.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Funsized%2Funsized-bare-typaram.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-bare-typaram.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,13 +1,16 @@\n error[E0277]: the size for values of type `T` cannot be known at compilation time\n   --> $DIR/unsized-bare-typaram.rs:2:29\n    |\n-LL | fn bar<T: Sized>() { }\n-   |        - required by this bound in `bar`\n LL | fn foo<T: ?Sized>() { bar::<T>() }\n    |        -                    ^ doesn't have a size known at compile-time\n    |        |\n    |        this type parameter needs to be `std::marker::Sized`\n    |\n+note: required by a bound in `bar`\n+  --> $DIR/unsized-bare-typaram.rs:1:8\n+   |\n+LL | fn bar<T: Sized>() { }\n+   |        ^ required by this bound in `bar`\n help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - fn foo<T: ?Sized>() { bar::<T>() }"}, {"sha": "980dee87e58b45aec3137c28b41f99bb2c2e953a", "filename": "src/test/ui/unsized/unsized-enum.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Funsized%2Funsized-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Funsized%2Funsized-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-enum.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,14 +1,16 @@\n error[E0277]: the size for values of type `T` cannot be known at compilation time\n   --> $DIR/unsized-enum.rs:6:36\n    |\n-LL | enum Foo<U> { FooSome(U), FooNone }\n-   |          - required by this bound in `Foo`\n-LL | fn foo1<T>() { not_sized::<Foo<T>>() } // Hunky dory.\n LL | fn foo2<T: ?Sized>() { not_sized::<Foo<T>>() }\n    |         -                          ^^^^^^ doesn't have a size known at compile-time\n    |         |\n    |         this type parameter needs to be `std::marker::Sized`\n    |\n+note: required by a bound in `Foo`\n+  --> $DIR/unsized-enum.rs:4:10\n+   |\n+LL | enum Foo<U> { FooSome(U), FooNone }\n+   |          ^ required by this bound in `Foo`\n help: you could relax the implicit `Sized` bound on `U` if it were used through indirection like `&U` or `Box<U>`\n   --> $DIR/unsized-enum.rs:4:10\n    |"}, {"sha": "1a3c7d788f0b885e9e3bcb0a537e329678e19492", "filename": "src/test/ui/unsized/unsized-inherent-impl-self-type.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Funsized%2Funsized-inherent-impl-self-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Funsized%2Funsized-inherent-impl-self-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-inherent-impl-self-type.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,14 +1,16 @@\n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized-inherent-impl-self-type.rs:7:17\n    |\n-LL | struct S5<Y>(Y);\n-   |           - required by this bound in `S5`\n-LL | \n LL | impl<X: ?Sized> S5<X> {\n    |      -          ^^^^^ doesn't have a size known at compile-time\n    |      |\n    |      this type parameter needs to be `std::marker::Sized`\n    |\n+note: required by a bound in `S5`\n+  --> $DIR/unsized-inherent-impl-self-type.rs:5:11\n+   |\n+LL | struct S5<Y>(Y);\n+   |           ^ required by this bound in `S5`\n help: you could relax the implicit `Sized` bound on `Y` if it were used through indirection like `&Y` or `Box<Y>`\n   --> $DIR/unsized-inherent-impl-self-type.rs:5:11\n    |"}, {"sha": "1c70a840c77dc382553fb5be30e2f1e4f68b9ef7", "filename": "src/test/ui/unsized/unsized-struct.stderr", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Funsized%2Funsized-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Funsized%2Funsized-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-struct.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,14 +1,16 @@\n error[E0277]: the size for values of type `T` cannot be known at compilation time\n   --> $DIR/unsized-struct.rs:6:36\n    |\n-LL | struct Foo<T> { data: T }\n-   |            - required by this bound in `Foo`\n-LL | fn foo1<T>() { not_sized::<Foo<T>>() } // Hunky dory.\n LL | fn foo2<T: ?Sized>() { not_sized::<Foo<T>>() }\n    |         -                          ^^^^^^ doesn't have a size known at compile-time\n    |         |\n    |         this type parameter needs to be `std::marker::Sized`\n    |\n+note: required by a bound in `Foo`\n+  --> $DIR/unsized-struct.rs:4:12\n+   |\n+LL | struct Foo<T> { data: T }\n+   |            ^ required by this bound in `Foo`\n help: you could relax the implicit `Sized` bound on `T` if it were used through indirection like `&T` or `Box<T>`\n   --> $DIR/unsized-struct.rs:4:12\n    |\n@@ -25,9 +27,6 @@ LL + fn foo2<T>() { not_sized::<Foo<T>>() }\n error[E0277]: the size for values of type `T` cannot be known at compilation time\n   --> $DIR/unsized-struct.rs:13:24\n    |\n-LL | fn is_sized<T:Sized>() { }\n-   |             - required by this bound in `is_sized`\n-...\n LL | fn bar2<T: ?Sized>() { is_sized::<Bar<T>>() }\n    |         -              ^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |         |\n@@ -38,6 +37,11 @@ note: required because it appears within the type `Bar<T>`\n    |\n LL | struct Bar<T: ?Sized> { data: T }\n    |        ^^^\n+note: required by a bound in `is_sized`\n+  --> $DIR/unsized-struct.rs:1:13\n+   |\n+LL | fn is_sized<T:Sized>() { }\n+   |             ^ required by this bound in `is_sized`\n help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - fn bar2<T: ?Sized>() { is_sized::<Bar<T>>() }"}, {"sha": "da251d4078b3e9566ca96b81f6c60336d62c2522", "filename": "src/test/ui/unsized/unsized-trait-impl-self-type.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-self-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-self-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-self-type.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,14 +1,16 @@\n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized-trait-impl-self-type.rs:10:27\n    |\n-LL | struct S5<Y>(Y);\n-   |           - required by this bound in `S5`\n-LL | \n LL | impl<X: ?Sized> T3<X> for S5<X> {\n    |      -                    ^^^^^ doesn't have a size known at compile-time\n    |      |\n    |      this type parameter needs to be `std::marker::Sized`\n    |\n+note: required by a bound in `S5`\n+  --> $DIR/unsized-trait-impl-self-type.rs:8:11\n+   |\n+LL | struct S5<Y>(Y);\n+   |           ^ required by this bound in `S5`\n help: you could relax the implicit `Sized` bound on `Y` if it were used through indirection like `&Y` or `Box<Y>`\n   --> $DIR/unsized-trait-impl-self-type.rs:8:11\n    |"}, {"sha": "e91419070f5f9e093cede2bcfca3b1006b45bf38", "filename": "src/test/ui/unsized/unsized-trait-impl-trait-arg.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-trait-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-trait-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-trait-arg.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,14 +1,16 @@\n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized-trait-impl-trait-arg.rs:8:17\n    |\n-LL | trait T2<Z> {\n-   |          - required by this bound in `T2`\n-...\n LL | impl<X: ?Sized> T2<X> for S4<X> {\n    |      -          ^^^^^ doesn't have a size known at compile-time\n    |      |\n    |      this type parameter needs to be `std::marker::Sized`\n    |\n+note: required by a bound in `T2`\n+  --> $DIR/unsized-trait-impl-trait-arg.rs:4:10\n+   |\n+LL | trait T2<Z> {\n+   |          ^ required by this bound in `T2`\n help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - impl<X: ?Sized> T2<X> for S4<X> {"}, {"sha": "f7bb6c9c78c65ef4141e3e1b7adeebc3d44ceeff", "filename": "src/test/ui/unsized/unsized3.stderr", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Funsized%2Funsized3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Funsized%2Funsized3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized3.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -5,10 +5,12 @@ LL | fn f1<X: ?Sized>(x: &X) {\n    |       - this type parameter needs to be `std::marker::Sized`\n LL |     f2::<X>(x);\n    |             ^ doesn't have a size known at compile-time\n-...\n-LL | fn f2<X>(x: &X) {\n-   |       - required by this bound in `f2`\n    |\n+note: required by a bound in `f2`\n+  --> $DIR/unsized3.rs:10:7\n+   |\n+LL | fn f2<X>(x: &X) {\n+   |       ^ required by this bound in `f2`\n help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - fn f1<X: ?Sized>(x: &X) {\n@@ -26,10 +28,12 @@ LL | fn f3<X: ?Sized + T>(x: &X) {\n    |       - this type parameter needs to be `std::marker::Sized`\n LL |     f4::<X>(x);\n    |             ^ doesn't have a size known at compile-time\n-...\n-LL | fn f4<X: T>(x: &X) {\n-   |       - required by this bound in `f4`\n    |\n+note: required by a bound in `f4`\n+  --> $DIR/unsized3.rs:21:7\n+   |\n+LL | fn f4<X: T>(x: &X) {\n+   |       ^ required by this bound in `f4`\n help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - fn f3<X: ?Sized + T>(x: &X) {\n@@ -43,9 +47,6 @@ LL | fn f4<X: T + ?Sized>(x: &X) {\n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized3.rs:33:8\n    |\n-LL | fn f5<Y>(x: &Y) {}\n-   |       - required by this bound in `f5`\n-...\n LL | fn f8<X: ?Sized>(x1: &S<X>, x2: &S<X>) {\n    |       - this type parameter needs to be `std::marker::Sized`\n LL |     f5(x1);\n@@ -56,6 +57,11 @@ note: required because it appears within the type `S<X>`\n    |\n LL | struct S<X: ?Sized> {\n    |        ^\n+note: required by a bound in `f5`\n+  --> $DIR/unsized3.rs:24:7\n+   |\n+LL | fn f5<Y>(x: &Y) {}\n+   |       ^ required by this bound in `f5`\n help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - fn f8<X: ?Sized>(x1: &S<X>, x2: &S<X>) {\n@@ -110,9 +116,6 @@ LL + fn f10<X>(x1: Box<S<X>>) {\n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized3.rs:45:8\n    |\n-LL | fn f5<Y>(x: &Y) {}\n-   |       - required by this bound in `f5`\n-...\n LL | fn f10<X: ?Sized>(x1: Box<S<X>>) {\n    |        - this type parameter needs to be `std::marker::Sized`\n LL |     f5(&(32, *x1));\n@@ -124,6 +127,11 @@ note: required because it appears within the type `S<X>`\n LL | struct S<X: ?Sized> {\n    |        ^\n    = note: required because it appears within the type `({integer}, S<X>)`\n+note: required by a bound in `f5`\n+  --> $DIR/unsized3.rs:24:7\n+   |\n+LL | fn f5<Y>(x: &Y) {}\n+   |       ^ required by this bound in `f5`\n help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - fn f10<X: ?Sized>(x1: Box<S<X>>) {"}, {"sha": "3246e26e6eb7d8377aac0ae9808f504e7812a174", "filename": "src/test/ui/unsized/unsized7.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Funsized%2Funsized7.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Funsized%2Funsized7.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized7.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -1,14 +1,16 @@\n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized7.rs:12:21\n    |\n-LL | trait T1<Z: T> {\n-   |          - required by this bound in `T1`\n-...\n LL | impl<X: ?Sized + T> T1<X> for S3<X> {\n    |      -              ^^^^^ doesn't have a size known at compile-time\n    |      |\n    |      this type parameter needs to be `std::marker::Sized`\n    |\n+note: required by a bound in `T1`\n+  --> $DIR/unsized7.rs:7:10\n+   |\n+LL | trait T1<Z: T> {\n+   |          ^ required by this bound in `T1`\n help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - impl<X: ?Sized + T> T1<X> for S3<X> {"}, {"sha": "0d9b9627562f94018a855643b81164448bacba4b", "filename": "src/test/ui/wf/hir-wf-check-erase-regions.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fwf%2Fhir-wf-check-erase-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39f220ce1295c894fdf9dce5fd1e20bda282e6cb/src%2Ftest%2Fui%2Fwf%2Fhir-wf-check-erase-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fhir-wf-check-erase-regions.stderr?ref=39f220ce1295c894fdf9dce5fd1e20bda282e6cb", "patch": "@@ -4,27 +4,27 @@ error[E0277]: `&T` is not an iterator\n LL |     type IntoIter = std::iter::Flatten<std::slice::Iter<'a, T>>;\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `&T` is not an iterator\n    |\n-  ::: $SRC_DIR/core/src/iter/adapters/flatten.rs:LL:COL\n-   |\n-LL | pub struct Flatten<I: Iterator<Item: IntoIterator>> {\n-   |                                      ------------ required by this bound in `Flatten`\n-   |\n    = help: the trait `Iterator` is not implemented for `&T`\n    = note: required because of the requirements on the impl of `IntoIterator` for `&T`\n+note: required by a bound in `Flatten`\n+  --> $SRC_DIR/core/src/iter/adapters/flatten.rs:LL:COL\n+   |\n+LL | pub struct Flatten<I: Iterator<Item: IntoIterator>> {\n+   |                                      ^^^^^^^^^^^^ required by this bound in `Flatten`\n \n error[E0277]: `&T` is not an iterator\n   --> $DIR/hir-wf-check-erase-regions.rs:10:27\n    |\n LL |     fn into_iter(self) -> Self::IntoIter {\n    |                           ^^^^^^^^^^^^^^ `&T` is not an iterator\n    |\n-  ::: $SRC_DIR/core/src/iter/adapters/flatten.rs:LL:COL\n-   |\n-LL | pub struct Flatten<I: Iterator<Item: IntoIterator>> {\n-   |                                      ------------ required by this bound in `Flatten`\n-   |\n    = help: the trait `Iterator` is not implemented for `&T`\n    = note: required because of the requirements on the impl of `IntoIterator` for `&T`\n+note: required by a bound in `Flatten`\n+  --> $SRC_DIR/core/src/iter/adapters/flatten.rs:LL:COL\n+   |\n+LL | pub struct Flatten<I: Iterator<Item: IntoIterator>> {\n+   |                                      ^^^^^^^^^^^^ required by this bound in `Flatten`\n \n error: aborting due to 2 previous errors\n "}]}