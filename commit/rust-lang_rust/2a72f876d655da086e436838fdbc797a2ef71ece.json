{"sha": "2a72f876d655da086e436838fdbc797a2ef71ece", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhNzJmODc2ZDY1NWRhMDg2ZTQzNjgzOGZkYmM3OTdhMmVmNzFlY2U=", "commit": {"author": {"name": "Igor Aleksanov", "email": "popzxc@yandex.ru", "date": "2020-10-04T06:04:28Z"}, "committer": {"name": "Igor Aleksanov", "email": "popzxc@yandex.ru", "date": "2020-10-12T08:05:00Z"}, "message": "Fix issues with match arm bindings", "tree": {"sha": "f61ce2d16d0048b1f30405922d97b1e605e778f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f61ce2d16d0048b1f30405922d97b1e605e778f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a72f876d655da086e436838fdbc797a2ef71ece", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a72f876d655da086e436838fdbc797a2ef71ece", "html_url": "https://github.com/rust-lang/rust/commit/2a72f876d655da086e436838fdbc797a2ef71ece", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a72f876d655da086e436838fdbc797a2ef71ece/comments", "author": {"login": "popzxc", "id": 12111581, "node_id": "MDQ6VXNlcjEyMTExNTgx", "avatar_url": "https://avatars.githubusercontent.com/u/12111581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/popzxc", "html_url": "https://github.com/popzxc", "followers_url": "https://api.github.com/users/popzxc/followers", "following_url": "https://api.github.com/users/popzxc/following{/other_user}", "gists_url": "https://api.github.com/users/popzxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/popzxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/popzxc/subscriptions", "organizations_url": "https://api.github.com/users/popzxc/orgs", "repos_url": "https://api.github.com/users/popzxc/repos", "events_url": "https://api.github.com/users/popzxc/events{/privacy}", "received_events_url": "https://api.github.com/users/popzxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "popzxc", "id": 12111581, "node_id": "MDQ6VXNlcjEyMTExNTgx", "avatar_url": "https://avatars.githubusercontent.com/u/12111581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/popzxc", "html_url": "https://github.com/popzxc", "followers_url": "https://api.github.com/users/popzxc/followers", "following_url": "https://api.github.com/users/popzxc/following{/other_user}", "gists_url": "https://api.github.com/users/popzxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/popzxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/popzxc/subscriptions", "organizations_url": "https://api.github.com/users/popzxc/orgs", "repos_url": "https://api.github.com/users/popzxc/repos", "events_url": "https://api.github.com/users/popzxc/events{/privacy}", "received_events_url": "https://api.github.com/users/popzxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45ac2b2edec05e417124ebfc2e61ec2a5117f4d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/45ac2b2edec05e417124ebfc2e61ec2a5117f4d5", "html_url": "https://github.com/rust-lang/rust/commit/45ac2b2edec05e417124ebfc2e61ec2a5117f4d5"}], "stats": {"total": 19, "additions": 12, "deletions": 7}, "files": [{"sha": "28ce15773bb178d2027128be2e221abf3a996372", "filename": "crates/hir_ty/src/diagnostics/decl_check.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2a72f876d655da086e436838fdbc797a2ef71ece/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fdecl_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a72f876d655da086e436838fdbc797a2ef71ece/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fdecl_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fdecl_check.rs?ref=2a72f876d655da086e436838fdbc797a2ef71ece", "patch": "@@ -263,21 +263,26 @@ impl<'a, 'b> DeclValidator<'a, 'b> {\n                             Some(parent) => parent,\n                             None => continue,\n                         };\n+                        let name_ast = match ident_pat.name() {\n+                            Some(name_ast) => name_ast,\n+                            None => continue,\n+                        };\n \n-                        // We have to check that it's either `let var = ...` or `Variant(_) @  var` statement,\n+                        // We have to check that it's either `let var = ...` or `var @ Variant(_)` statement,\n                         // because e.g. match arms are patterns as well.\n                         // In other words, we check that it's a named variable binding.\n-                        if !ast::LetStmt::cast(parent.clone()).is_some()\n-                            && !ast::IdentPat::cast(parent).is_some()\n-                        {\n+                        let is_binding = ast::LetStmt::cast(parent.clone()).is_some()\n+                            || (ast::MatchArm::cast(parent).is_some()\n+                                && ident_pat.at_token().is_some());\n+                        if !is_binding {\n                             // This pattern is not an actual variable declaration, e.g. `Some(val) => {..}` match arm.\n                             continue;\n                         }\n \n                         let diagnostic = IncorrectCase {\n                             file: source_ptr.file_id,\n                             ident_type: \"Variable\".to_string(),\n-                            ident: AstPtr::new(&ident_pat).into(),\n+                            ident: AstPtr::new(&name_ast).into(),\n                             expected_case: replacement.expected_case,\n                             ident_text: replacement.current_name.to_string(),\n                             suggested_text: replacement.suggested_text,\n@@ -801,8 +806,8 @@ enum Option { Some, None }\n \n fn main() {\n     match Option::None {\n-        None @ SOME_VAR => (),\n-            // ^^^^^^^^ Variable `SOME_VAR` should have snake_case name, e.g. `some_var`\n+        SOME_VAR @ None => (),\n+     // ^^^^^^^^ Variable `SOME_VAR` should have snake_case name, e.g. `some_var`\n         Some => (),\n     }\n }"}]}