{"sha": "f09fb488f70c5965ec4f64453a6e681fbfcff56c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwOWZiNDg4ZjcwYzU5NjVlYzRmNjQ0NTNhNmU2ODFmYmZjZmY1NmM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-19T12:04:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-19T12:04:22Z"}, "message": "Auto merge of #81186 - GuillaumeGomez:rollup-y2d04g9, r=GuillaumeGomez\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #80382 (Improve search result tab handling)\n - #81112 (Remove unused alloc::std::ops re-export.)\n - #81115 (BTreeMap: prefer bulk_steal functions over specialized ones)\n - #81147 (Fix structured suggestion for explicit `drop` call)\n - #81161 (Remove inline script tags)\n - #81164 (Fix typo in simplify.rs)\n - #81166 (remove some outdated comments regarding  debug assertions)\n - #81168 (Fixes #81109 - Typo in pointer::wrapping_sub)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "d31d1870ef32e0e3ee3ccb777ba9aa956a313591", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d31d1870ef32e0e3ee3ccb777ba9aa956a313591"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f09fb488f70c5965ec4f64453a6e681fbfcff56c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f09fb488f70c5965ec4f64453a6e681fbfcff56c", "html_url": "https://github.com/rust-lang/rust/commit/f09fb488f70c5965ec4f64453a6e681fbfcff56c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f09fb488f70c5965ec4f64453a6e681fbfcff56c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47121d6d884bb60dad47e345f52f2ad6aadecaaf", "url": "https://api.github.com/repos/rust-lang/rust/commits/47121d6d884bb60dad47e345f52f2ad6aadecaaf", "html_url": "https://github.com/rust-lang/rust/commit/47121d6d884bb60dad47e345f52f2ad6aadecaaf"}, {"sha": "dcb74796c0a644bc78fdadbfb2b8df0d9e9d9359", "url": "https://api.github.com/repos/rust-lang/rust/commits/dcb74796c0a644bc78fdadbfb2b8df0d9e9d9359", "html_url": "https://github.com/rust-lang/rust/commit/dcb74796c0a644bc78fdadbfb2b8df0d9e9d9359"}], "stats": {"total": 348, "additions": 166, "deletions": 182}, "files": [{"sha": "f30745d71859de469af7306d4280f78859eb4463", "filename": "compiler/rustc_mir_build/src/build/matches/simplify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09fb488f70c5965ec4f64453a6e681fbfcff56c/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09fb488f70c5965ec4f64453a6e681fbfcff56c/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fsimplify.rs?ref=f09fb488f70c5965ec4f64453a6e681fbfcff56c", "patch": "@@ -55,7 +55,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         // * the bindings from the previous iteration of the loop is prepended to the bindings from\n         // the current iteration (in the implementation this is done by mem::swap and extend)\n         // * after all iterations, these new bindings are then appended to the bindings that were\n-        // prexisting (i.e. `candidate.binding` when the function was called).\n+        // preexisting (i.e. `candidate.binding` when the function was called).\n         //\n         // example:\n         // candidate.bindings = [1, 2, 3]"}, {"sha": "4836418b3c2100ad76b5ed23bd5509c3e4f52498", "filename": "compiler/rustc_typeck/src/check/callee.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f09fb488f70c5965ec4f64453a6e681fbfcff56c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09fb488f70c5965ec4f64453a6e681fbfcff56c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs?ref=f09fb488f70c5965ec4f64453a6e681fbfcff56c", "patch": "@@ -25,24 +25,24 @@ pub fn check_legal_trait_for_method_call(\n     tcx: TyCtxt<'_>,\n     span: Span,\n     receiver: Option<Span>,\n+    expr_span: Span,\n     trait_id: DefId,\n ) {\n     if tcx.lang_items().drop_trait() == Some(trait_id) {\n         let mut err = struct_span_err!(tcx.sess, span, E0040, \"explicit use of destructor method\");\n         err.span_label(span, \"explicit destructor calls not allowed\");\n \n-        let snippet = receiver\n+        let (sp, suggestion) = receiver\n             .and_then(|s| tcx.sess.source_map().span_to_snippet(s).ok())\n-            .unwrap_or_default();\n-\n-        let suggestion =\n-            if snippet.is_empty() { \"drop\".to_string() } else { format!(\"drop({})\", snippet) };\n+            .filter(|snippet| !snippet.is_empty())\n+            .map(|snippet| (expr_span, format!(\"drop({})\", snippet)))\n+            .unwrap_or_else(|| (span, \"drop\".to_string()));\n \n         err.span_suggestion(\n-            span,\n-            &format!(\"consider using `drop` function: `{}`\", suggestion),\n-            String::new(),\n-            Applicability::Unspecified,\n+            sp,\n+            \"consider using `drop` function\",\n+            suggestion,\n+            Applicability::MaybeIncorrect,\n         );\n \n         err.emit();"}, {"sha": "ed48a0bc801cfeaa159f942625aadf6c1bd67b78", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09fb488f70c5965ec4f64453a6e681fbfcff56c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09fb488f70c5965ec4f64453a6e681fbfcff56c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=f09fb488f70c5965ec4f64453a6e681fbfcff56c", "patch": "@@ -1163,7 +1163,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 debug!(\"instantiate_value_path: def_id={:?} container={:?}\", def_id, container);\n                 match container {\n                     ty::TraitContainer(trait_did) => {\n-                        callee::check_legal_trait_for_method_call(tcx, span, None, trait_did)\n+                        callee::check_legal_trait_for_method_call(tcx, span, None, span, trait_did)\n                     }\n                     ty::ImplContainer(impl_def_id) => {\n                         if segments.len() == 1 {"}, {"sha": "e5f19281b0773293e1c361f7940f35341940411e", "filename": "compiler/rustc_typeck/src/check/method/confirm.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f09fb488f70c5965ec4f64453a6e681fbfcff56c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09fb488f70c5965ec4f64453a6e681fbfcff56c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fconfirm.rs?ref=f09fb488f70c5965ec4f64453a6e681fbfcff56c", "patch": "@@ -508,6 +508,7 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n                 self.tcx,\n                 self.span,\n                 Some(self.self_expr.span),\n+                self.call_expr.span,\n                 trait_def_id,\n             ),\n             ty::ImplContainer(..) => {}"}, {"sha": "8ab3f58c1adba0395e75d1dcaf4159e6630f4cb4", "filename": "library/alloc/src/collections/btree/node.rs", "status": "modified", "additions": 4, "deletions": 117, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/f09fb488f70c5965ec4f64453a6e681fbfcff56c/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09fb488f70c5965ec4f64453a6e681fbfcff56c/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs?ref=f09fb488f70c5965ec4f64453a6e681fbfcff56c", "patch": "@@ -592,17 +592,6 @@ impl<'a, K: 'a, V: 'a> NodeRef<marker::Mut<'a>, K, V, marker::Leaf> {\n             self.val_area_mut(idx).write(val);\n         }\n     }\n-\n-    /// Adds a key-value pair to the beginning of the node.\n-    fn push_front(&mut self, key: K, val: V) {\n-        let new_len = self.len() + 1;\n-        assert!(new_len <= CAPACITY);\n-        unsafe {\n-            slice_insert(self.key_area_mut(..new_len), 0, key);\n-            slice_insert(self.val_area_mut(..new_len), 0, val);\n-            *self.len_mut() = new_len as u16;\n-        }\n-    }\n }\n \n impl<'a, K, V> NodeRef<marker::Mut<'a>, K, V, marker::Internal> {\n@@ -638,88 +627,6 @@ impl<'a, K: 'a, V: 'a> NodeRef<marker::Mut<'a>, K, V, marker::Internal> {\n             Handle::new_edge(self.reborrow_mut(), idx + 1).correct_parent_link();\n         }\n     }\n-\n-    /// Adds a key-value pair, and an edge to go to the left of that pair,\n-    /// to the beginning of the node.\n-    fn push_front(&mut self, key: K, val: V, edge: Root<K, V>) {\n-        let new_len = self.len() + 1;\n-        assert!(edge.height == self.height - 1);\n-        assert!(new_len <= CAPACITY);\n-\n-        unsafe {\n-            slice_insert(self.key_area_mut(..new_len), 0, key);\n-            slice_insert(self.val_area_mut(..new_len), 0, val);\n-            slice_insert(self.edge_area_mut(..new_len + 1), 0, edge.node);\n-            *self.len_mut() = new_len as u16;\n-        }\n-\n-        self.correct_all_childrens_parent_links();\n-    }\n-}\n-\n-impl<'a, K: 'a, V: 'a> NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal> {\n-    /// Removes a key-value pair from the end of the node and returns the pair.\n-    /// Also removes the edge that was to the right of that pair and, if the node\n-    /// is internal, returns the orphaned subtree that this edge owned.\n-    ///\n-    /// # Safety\n-    /// The node must not be empty.\n-    unsafe fn pop(&mut self) -> (K, V, Option<Root<K, V>>) {\n-        debug_assert!(self.len() > 0);\n-\n-        let idx = self.len() - 1;\n-\n-        unsafe {\n-            let key = self.key_area_mut(idx).assume_init_read();\n-            let val = self.val_area_mut(idx).assume_init_read();\n-            let edge = match self.reborrow_mut().force() {\n-                ForceResult::Leaf(_) => None,\n-                ForceResult::Internal(mut internal) => {\n-                    let node = internal.edge_area_mut(idx + 1).assume_init_read();\n-                    let mut edge = Root { node, height: internal.height - 1, _marker: PhantomData };\n-                    // Currently, clearing the parent link is superfluous, because we will\n-                    // insert the node elsewhere and set its parent link again.\n-                    edge.clear_parent_link();\n-                    Some(edge)\n-                }\n-            };\n-\n-            *self.len_mut() -= 1;\n-            (key, val, edge)\n-        }\n-    }\n-\n-    /// Removes a key-value pair from the beginning of the node and returns the pair.\n-    /// Also removes the edge that was to the left of that pair and, if the node is\n-    /// internal, returns the orphaned subtree that this edge owned.\n-    fn pop_front(&mut self) -> (K, V, Option<Root<K, V>>) {\n-        debug_assert!(self.len() > 0);\n-\n-        let old_len = self.len();\n-\n-        unsafe {\n-            let key = slice_remove(self.key_area_mut(..old_len), 0);\n-            let val = slice_remove(self.val_area_mut(..old_len), 0);\n-            let edge = match self.reborrow_mut().force() {\n-                ForceResult::Leaf(_) => None,\n-                ForceResult::Internal(mut internal) => {\n-                    let node = slice_remove(internal.edge_area_mut(..old_len + 1), 0);\n-                    let mut edge = Root { node, height: internal.height - 1, _marker: PhantomData };\n-                    // Currently, clearing the parent link is superfluous, because we will\n-                    // insert the node elsewhere and set its parent link again.\n-                    edge.clear_parent_link();\n-\n-                    internal.correct_childrens_parent_links(0..old_len);\n-\n-                    Some(edge)\n-                }\n-            };\n-\n-            *self.len_mut() -= 1;\n-\n-            (key, val, edge)\n-        }\n-    }\n }\n \n impl<BorrowType, K, V> NodeRef<BorrowType, K, V, marker::LeafOrInternal> {\n@@ -1399,18 +1306,8 @@ impl<'a, K: 'a, V: 'a> BalancingContext<'a, K, V> {\n         mut self,\n         track_right_edge_idx: usize,\n     ) -> Handle<NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal>, marker::Edge> {\n-        unsafe {\n-            let (k, v, edge) = self.left_child.pop();\n-\n-            let (k, v) = self.parent.replace_kv(k, v);\n-\n-            match self.right_child.reborrow_mut().force() {\n-                ForceResult::Leaf(mut leaf) => leaf.push_front(k, v),\n-                ForceResult::Internal(mut internal) => internal.push_front(k, v, edge.unwrap()),\n-            }\n-\n-            Handle::new_edge(self.right_child, 1 + track_right_edge_idx)\n-        }\n+        self.bulk_steal_left(1);\n+        unsafe { Handle::new_edge(self.right_child, 1 + track_right_edge_idx) }\n     }\n \n     /// Removes a key-value pair from the right child and places it in the key-value storage\n@@ -1421,18 +1318,8 @@ impl<'a, K: 'a, V: 'a> BalancingContext<'a, K, V> {\n         mut self,\n         track_left_edge_idx: usize,\n     ) -> Handle<NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal>, marker::Edge> {\n-        unsafe {\n-            let (k, v, edge) = self.right_child.pop_front();\n-\n-            let (k, v) = self.parent.replace_kv(k, v);\n-\n-            match self.left_child.reborrow_mut().force() {\n-                ForceResult::Leaf(mut leaf) => leaf.push(k, v),\n-                ForceResult::Internal(mut internal) => internal.push(k, v, edge.unwrap()),\n-            }\n-\n-            Handle::new_edge(self.left_child, track_left_edge_idx)\n-        }\n+        self.bulk_steal_right(1);\n+        unsafe { Handle::new_edge(self.left_child, track_left_edge_idx) }\n     }\n \n     /// This does stealing similar to `steal_left` but steals multiple elements at once."}, {"sha": "ff842197d19182782ae95c847e1d042abdd80061", "filename": "library/alloc/src/collections/btree/remove.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f09fb488f70c5965ec4f64453a6e681fbfcff56c/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fremove.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09fb488f70c5965ec4f64453a6e681fbfcff56c/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fremove.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fremove.rs?ref=f09fb488f70c5965ec4f64453a6e681fbfcff56c", "patch": "@@ -121,25 +121,25 @@ impl<'a, K: 'a, V: 'a> NodeRef<marker::Mut<'a>, K, V, marker::Internal> {\n         self,\n     ) -> Option<NodeRef<marker::Mut<'a>, K, V, marker::Internal>> {\n         match self.forget_type().choose_parent_kv() {\n-            Ok(Left(left_parent_kv)) => {\n+            Ok(Left(mut left_parent_kv)) => {\n                 debug_assert_eq!(left_parent_kv.right_child_len(), MIN_LEN - 1);\n                 if left_parent_kv.can_merge() {\n                     let parent = left_parent_kv.merge_tracking_parent();\n                     Some(parent)\n                 } else {\n                     debug_assert!(left_parent_kv.left_child_len() > MIN_LEN);\n-                    left_parent_kv.steal_left(0);\n+                    left_parent_kv.bulk_steal_left(1);\n                     None\n                 }\n             }\n-            Ok(Right(right_parent_kv)) => {\n+            Ok(Right(mut right_parent_kv)) => {\n                 debug_assert_eq!(right_parent_kv.left_child_len(), MIN_LEN - 1);\n                 if right_parent_kv.can_merge() {\n                     let parent = right_parent_kv.merge_tracking_parent();\n                     Some(parent)\n                 } else {\n                     debug_assert!(right_parent_kv.right_child_len() > MIN_LEN);\n-                    right_parent_kv.steal_right(0);\n+                    right_parent_kv.bulk_steal_right(1);\n                     None\n                 }\n             }"}, {"sha": "8d721ed7487aefbe2f8b3e0f54a91a1a8c0a2f7c", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f09fb488f70c5965ec4f64453a6e681fbfcff56c/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09fb488f70c5965ec4f64453a6e681fbfcff56c/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=f09fb488f70c5965ec4f64453a6e681fbfcff56c", "patch": "@@ -185,11 +185,6 @@ pub mod task;\n mod tests;\n pub mod vec;\n \n-#[cfg(not(test))]\n-mod std {\n-    pub use core::ops; // RangeFull\n-}\n-\n #[doc(hidden)]\n #[unstable(feature = \"liballoc_internals\", issue = \"none\", reason = \"implementation detail\")]\n pub mod __export {"}, {"sha": "28de28c70e4b44883c2505052b638ba741201d57", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09fb488f70c5965ec4f64453a6e681fbfcff56c/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09fb488f70c5965ec4f64453a6e681fbfcff56c/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=f09fb488f70c5965ec4f64453a6e681fbfcff56c", "patch": "@@ -633,7 +633,7 @@ impl<T: ?Sized> *const T {\n     }\n \n     /// Calculates the offset from a pointer using wrapping arithmetic.\n-    /// (convenience for `.wrapping_offset((count as isize).wrapping_sub())`)\n+    /// (convenience for `.wrapping_offset((count as isize).wrapping_neg())`)\n     ///\n     /// `count` is in units of T; e.g., a `count` of 3 represents a pointer\n     /// offset of `3 * size_of::<T>()` bytes."}, {"sha": "8d901c08f91a36cd966b81b7401578ffaee10cd9", "filename": "library/core/src/ptr/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f09fb488f70c5965ec4f64453a6e681fbfcff56c/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09fb488f70c5965ec4f64453a6e681fbfcff56c/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs?ref=f09fb488f70c5965ec4f64453a6e681fbfcff56c", "patch": "@@ -687,7 +687,6 @@ pub unsafe fn replace<T>(dst: *mut T, mut src: T) -> T {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_unstable(feature = \"const_ptr_read\", issue = \"80377\")]\n pub const unsafe fn read<T>(src: *const T) -> T {\n-    // `copy_nonoverlapping` takes care of debug_assert.\n     let mut tmp = MaybeUninit::<T>::uninit();\n     // SAFETY: the caller must guarantee that `src` is valid for reads.\n     // `src` cannot overlap `tmp` because `tmp` was just allocated on\n@@ -787,7 +786,6 @@ pub const unsafe fn read<T>(src: *const T) -> T {\n #[stable(feature = \"ptr_unaligned\", since = \"1.17.0\")]\n #[rustc_const_unstable(feature = \"const_ptr_read\", issue = \"80377\")]\n pub const unsafe fn read_unaligned<T>(src: *const T) -> T {\n-    // `copy_nonoverlapping` takes care of debug_assert.\n     let mut tmp = MaybeUninit::<T>::uninit();\n     // SAFETY: the caller must guarantee that `src` is valid for reads.\n     // `src` cannot overlap `tmp` because `tmp` was just allocated on\n@@ -988,7 +986,6 @@ pub unsafe fn write_unaligned<T>(dst: *mut T, src: T) {\n     // `dst` cannot overlap `src` because the caller has mutable access\n     // to `dst` while `src` is owned by this function.\n     unsafe {\n-        // `copy_nonoverlapping` takes care of debug_assert.\n         copy_nonoverlapping(&src as *const T as *const u8, dst as *mut u8, mem::size_of::<T>());\n     }\n     mem::forget(src);"}, {"sha": "99744fc7112165711a418af92a38521a9d0c7345", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09fb488f70c5965ec4f64453a6e681fbfcff56c/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09fb488f70c5965ec4f64453a6e681fbfcff56c/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=f09fb488f70c5965ec4f64453a6e681fbfcff56c", "patch": "@@ -740,7 +740,7 @@ impl<T: ?Sized> *mut T {\n     }\n \n     /// Calculates the offset from a pointer using wrapping arithmetic.\n-    /// (convenience for `.wrapping_offset((count as isize).wrapping_sub())`)\n+    /// (convenience for `.wrapping_offset((count as isize).wrapping_neg())`)\n     ///\n     /// `count` is in units of T; e.g., a `count` of 3 represents a pointer\n     /// offset of `3 * size_of::<T>()` bytes."}, {"sha": "4458eea95f3e11bb5c819fe02d5ffbe6426b60c1", "filename": "src/librustdoc/html/layout.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f09fb488f70c5965ec4f64453a6e681fbfcff56c/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09fb488f70c5965ec4f64453a6e681fbfcff56c/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Flayout.rs?ref=f09fb488f70c5965ec4f64453a6e681fbfcff56c", "patch": "@@ -111,10 +111,7 @@ crate fn render<T: Print, S: Print>(\n     <section id=\\\"search\\\" class=\\\"content hidden\\\"></section>\\\n     <section class=\\\"footer\\\"></section>\\\n     {after_content}\\\n-    <script>\\\n-        window.rootPath = \\\"{root_path}\\\";\\\n-        window.currentCrate = \\\"{krate}\\\";\\\n-    </script>\\\n+    <div id=\\\"rustdoc-vars\\\" data-root-path=\\\"{root_path}\\\" data-current-crate=\\\"{krate}\\\"></div>\n     <script src=\\\"{static_root_path}main{suffix}.js\\\"></script>\\\n     {static_extra_scripts}\\\n     {extra_scripts}\\"}, {"sha": "cfa6cd96595d6160e2320ca6a0635fbe51adcf25", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09fb488f70c5965ec4f64453a6e681fbfcff56c/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09fb488f70c5965ec4f64453a6e681fbfcff56c/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=f09fb488f70c5965ec4f64453a6e681fbfcff56c", "patch": "@@ -1313,6 +1313,8 @@ fn init_id_map() -> FxHashMap<String, usize> {\n     map.insert(\"toggle-all-docs\".to_owned(), 1);\n     map.insert(\"all-types\".to_owned(), 1);\n     map.insert(\"default-settings\".to_owned(), 1);\n+    map.insert(\"rustdoc-vars\".to_owned(), 1);\n+    map.insert(\"sidebar-vars\".to_owned(), 1);\n     // This is the list of IDs used by rustdoc sections.\n     map.insert(\"fields\".to_owned(), 1);\n     map.insert(\"variants\".to_owned(), 1);"}, {"sha": "03e091297e5b6a397de81fae1bcb9c1a813e6ab1", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f09fb488f70c5965ec4f64453a6e681fbfcff56c/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09fb488f70c5965ec4f64453a6e681fbfcff56c/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=f09fb488f70c5965ec4f64453a6e681fbfcff56c", "patch": "@@ -4216,11 +4216,8 @@ fn print_sidebar(cx: &Context<'_>, it: &clean::Item, buffer: &mut Buffer, cache:\n     let relpath = if it.is_mod() { \"../\" } else { \"\" };\n     write!(\n         buffer,\n-        \"<script>window.sidebarCurrent = {{\\\n-                name: \\\"{name}\\\", \\\n-                ty: \\\"{ty}\\\", \\\n-                relpath: \\\"{path}\\\"\\\n-            }};</script>\",\n+        \"<div id=\\\"sidebar-vars\\\" data-name=\\\"{name}\\\" data-ty=\\\"{ty}\\\" data-relpath=\\\"{path}\\\">\\\n+        </div>\",\n         name = it.name.unwrap_or(kw::Empty),\n         ty = it.type_(),\n         path = relpath"}, {"sha": "74bd348e9ac1c0b5281672fa3a4ffaffda90bf12", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 42, "deletions": 12, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/f09fb488f70c5965ec4f64453a6e681fbfcff56c/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/f09fb488f70c5965ec4f64453a6e681fbfcff56c/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=f09fb488f70c5965ec4f64453a6e681fbfcff56c", "patch": "@@ -1,5 +1,5 @@\n // From rust:\n-/* global ALIASES, currentCrate, rootPath */\n+/* global ALIASES */\n \n // Local js definitions:\n /* global addClass, getCurrentValue, hasClass */\n@@ -40,6 +40,21 @@ if (!DOMTokenList.prototype.remove) {\n     };\n }\n \n+(function () {\n+    var rustdocVars = document.getElementById(\"rustdoc-vars\");\n+    if (rustdocVars) {\n+        window.rootPath = rustdocVars.attributes[\"data-root-path\"].value;\n+        window.currentCrate = rustdocVars.attributes[\"data-current-crate\"].value;\n+    }\n+    var sidebarVars = document.getElementById(\"sidebar-vars\");\n+    if (sidebarVars) {\n+        window.sidebarCurrent = {\n+            name: sidebarVars.attributes[\"data-name\"].value,\n+            ty: sidebarVars.attributes[\"data-ty\"].value,\n+            relpath: sidebarVars.attributes[\"data-relpath\"].value,\n+        };\n+    }\n+}());\n \n // Gets the human-readable string for the virtual-key code of the\n // given KeyboardEvent, ev.\n@@ -565,7 +580,7 @@ function defocusSearchBar() {\n                 var i, match,\n                     url = document.location.href,\n                     stripped = \"\",\n-                    len = rootPath.match(/\\.\\.\\//g).length + 1;\n+                    len = window.rootPath.match(/\\.\\.\\//g).length + 1;\n \n                 for (i = 0; i < len; ++i) {\n                     match = url.match(/\\/[^\\/]*$/);\n@@ -1504,15 +1519,15 @@ function defocusSearchBar() {\n \n             if (type === \"mod\") {\n                 displayPath = path + \"::\";\n-                href = rootPath + path.replace(/::/g, \"/\") + \"/\" +\n+                href = window.rootPath + path.replace(/::/g, \"/\") + \"/\" +\n                        name + \"/index.html\";\n             } else if (type === \"primitive\" || type === \"keyword\") {\n                 displayPath = \"\";\n-                href = rootPath + path.replace(/::/g, \"/\") +\n+                href = window.rootPath + path.replace(/::/g, \"/\") +\n                        \"/\" + type + \".\" + name + \".html\";\n             } else if (type === \"externcrate\") {\n                 displayPath = \"\";\n-                href = rootPath + name + \"/index.html\";\n+                href = window.rootPath + name + \"/index.html\";\n             } else if (item.parent !== undefined) {\n                 var myparent = item.parent;\n                 var anchor = \"#\" + type + \".\" + name;\n@@ -1535,13 +1550,13 @@ function defocusSearchBar() {\n                 } else {\n                     displayPath = path + \"::\" + myparent.name + \"::\";\n                 }\n-                href = rootPath + path.replace(/::/g, \"/\") +\n+                href = window.rootPath + path.replace(/::/g, \"/\") +\n                        \"/\" + pageType +\n                        \".\" + pageName +\n                        \".html\" + anchor;\n             } else {\n                 displayPath = item.path + \"::\";\n-                href = rootPath + item.path.replace(/::/g, \"/\") +\n+                href = window.rootPath + item.path.replace(/::/g, \"/\") +\n                        \"/\" + type + \".\" + name + \".html\";\n             }\n             return [displayPath, href];\n@@ -1650,6 +1665,21 @@ function defocusSearchBar() {\n             var ret_in_args = addTab(results.in_args, query, false);\n             var ret_returned = addTab(results.returned, query, false);\n \n+            // Navigate to the relevant tab if the current tab is empty, like in case users search\n+            // for \"-> String\". If they had selected another tab previously, they have to click on\n+            // it again.\n+            if ((currentTab === 0 && ret_others[1] === 0) ||\n+                    (currentTab === 1 && ret_in_args[1] === 0) ||\n+                    (currentTab === 2 && ret_returned[1] === 0)) {\n+                if (ret_others[1] !== 0) {\n+                    currentTab = 0;\n+                } else if (ret_in_args[1] !== 0) {\n+                    currentTab = 1;\n+                } else if (ret_returned[1] !== 0) {\n+                    currentTab = 2;\n+                }\n+            }\n+\n             var output = \"<h1>Results for \" + escape(query.query) +\n                 (query.type ? \" (type: \" + escape(query.type) + \")\" : \"\") + \"</h1>\" +\n                 \"<div id=\\\"titles\\\">\" +\n@@ -1973,7 +2003,7 @@ function defocusSearchBar() {\n         startSearch();\n \n         // Draw a convenient sidebar of known crates if we have a listing\n-        if (rootPath === \"../\" || rootPath === \"./\") {\n+        if (window.rootPath === \"../\" || window.rootPath === \"./\") {\n             var sidebar = document.getElementsByClassName(\"sidebar-elems\")[0];\n             if (sidebar) {\n                 var div = document.createElement(\"div\");\n@@ -1992,11 +2022,11 @@ function defocusSearchBar() {\n                 crates.sort();\n                 for (var i = 0; i < crates.length; ++i) {\n                     var klass = \"crate\";\n-                    if (rootPath !== \"./\" && crates[i] === window.currentCrate) {\n+                    if (window.rootPath !== \"./\" && crates[i] === window.currentCrate) {\n                         klass += \" current\";\n                     }\n                     var link = document.createElement(\"a\");\n-                    link.href = rootPath + crates[i] + \"/index.html\";\n+                    link.href = window.rootPath + crates[i] + \"/index.html\";\n                     // The summary in the search index has HTML, so we need to\n                     // dynamically render it as plaintext.\n                     link.title = convertHTMLToPlaintext(rawSearchIndex[crates[i]].doc);\n@@ -2118,7 +2148,7 @@ function defocusSearchBar() {\n \n         var libs = Object.getOwnPropertyNames(imp);\n         for (var i = 0, llength = libs.length; i < llength; ++i) {\n-            if (libs[i] === currentCrate) { continue; }\n+            if (libs[i] === window.currentCrate) { continue; }\n             var structs = imp[libs[i]];\n \n             struct_loop:\n@@ -2143,7 +2173,7 @@ function defocusSearchBar() {\n                     var href = elem.getAttribute(\"href\");\n \n                     if (href && href.indexOf(\"http\") !== 0) {\n-                        elem.setAttribute(\"href\", rootPath + href);\n+                        elem.setAttribute(\"href\", window.rootPath + href);\n                     }\n                 });\n "}, {"sha": "139dc8f94964f527809fabd935f4e01047eb2b4d", "filename": "src/test/ui/error-codes/E0040.fixed", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f09fb488f70c5965ec4f64453a6e681fbfcff56c/src%2Ftest%2Fui%2Ferror-codes%2FE0040.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f09fb488f70c5965ec4f64453a6e681fbfcff56c/src%2Ftest%2Fui%2Ferror-codes%2FE0040.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0040.fixed?ref=f09fb488f70c5965ec4f64453a6e681fbfcff56c", "patch": "@@ -0,0 +1,18 @@\n+// run-rustfix\n+struct Foo {\n+    x: i32,\n+}\n+\n+impl Drop for Foo {\n+    fn drop(&mut self) {\n+        println!(\"kaboom\");\n+    }\n+}\n+\n+fn main() {\n+    let mut x = Foo { x: -7 };\n+    x.x = 0;\n+    println!(\"{}\", x.x);\n+    drop(x);\n+    //~^ ERROR E0040\n+}"}, {"sha": "9ffc42d0c78048b5a52e9d040aa7d422cef11fcc", "filename": "src/test/ui/error-codes/E0040.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f09fb488f70c5965ec4f64453a6e681fbfcff56c/src%2Ftest%2Fui%2Ferror-codes%2FE0040.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09fb488f70c5965ec4f64453a6e681fbfcff56c/src%2Ftest%2Fui%2Ferror-codes%2FE0040.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0040.rs?ref=f09fb488f70c5965ec4f64453a6e681fbfcff56c", "patch": "@@ -1,3 +1,4 @@\n+// run-rustfix\n struct Foo {\n     x: i32,\n }\n@@ -10,6 +11,8 @@ impl Drop for Foo {\n \n fn main() {\n     let mut x = Foo { x: -7 };\n+    x.x = 0;\n+    println!(\"{}\", x.x);\n     x.drop();\n     //~^ ERROR E0040\n }"}, {"sha": "9fcda1a9385d2b7e80c86b548efaf7e6a7eff718", "filename": "src/test/ui/error-codes/E0040.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f09fb488f70c5965ec4f64453a6e681fbfcff56c/src%2Ftest%2Fui%2Ferror-codes%2FE0040.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f09fb488f70c5965ec4f64453a6e681fbfcff56c/src%2Ftest%2Fui%2Ferror-codes%2FE0040.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0040.stderr?ref=f09fb488f70c5965ec4f64453a6e681fbfcff56c", "patch": "@@ -1,11 +1,11 @@\n error[E0040]: explicit use of destructor method\n-  --> $DIR/E0040.rs:13:7\n+  --> $DIR/E0040.rs:16:7\n    |\n LL |     x.drop();\n-   |       ^^^^\n-   |       |\n-   |       explicit destructor calls not allowed\n-   |       help: consider using `drop` function: `drop(x)`\n+   |     --^^^^--\n+   |     | |\n+   |     | explicit destructor calls not allowed\n+   |     help: consider using `drop` function: `drop(x)`\n \n error: aborting due to previous error\n "}, {"sha": "91a4ca608da4ea1396d25ffed856a4a95aac6afb", "filename": "src/test/ui/explicit/explicit-call-to-dtor.fixed", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f09fb488f70c5965ec4f64453a6e681fbfcff56c/src%2Ftest%2Fui%2Fexplicit%2Fexplicit-call-to-dtor.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f09fb488f70c5965ec4f64453a6e681fbfcff56c/src%2Ftest%2Fui%2Fexplicit%2Fexplicit-call-to-dtor.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexplicit%2Fexplicit-call-to-dtor.fixed?ref=f09fb488f70c5965ec4f64453a6e681fbfcff56c", "patch": "@@ -0,0 +1,16 @@\n+// run-rustfix\n+struct Foo {\n+    x: isize\n+}\n+\n+impl Drop for Foo {\n+    fn drop(&mut self) {\n+        println!(\"kaboom\");\n+    }\n+}\n+\n+fn main() {\n+    let x = Foo { x: 3 };\n+    println!(\"{}\", x.x);\n+    drop(x);   //~ ERROR explicit use of destructor method\n+}"}, {"sha": "0656871eb1b34c058906ed24a99ef2f16186b4d2", "filename": "src/test/ui/explicit/explicit-call-to-dtor.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09fb488f70c5965ec4f64453a6e681fbfcff56c/src%2Ftest%2Fui%2Fexplicit%2Fexplicit-call-to-dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09fb488f70c5965ec4f64453a6e681fbfcff56c/src%2Ftest%2Fui%2Fexplicit%2Fexplicit-call-to-dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexplicit%2Fexplicit-call-to-dtor.rs?ref=f09fb488f70c5965ec4f64453a6e681fbfcff56c", "patch": "@@ -1,3 +1,4 @@\n+// run-rustfix\n struct Foo {\n     x: isize\n }\n@@ -10,5 +11,6 @@ impl Drop for Foo {\n \n fn main() {\n     let x = Foo { x: 3 };\n+    println!(\"{}\", x.x);\n     x.drop();   //~ ERROR explicit use of destructor method\n }"}, {"sha": "f3c9bf6cccdd3f14bee0b8096dbc0963c7ea3bf5", "filename": "src/test/ui/explicit/explicit-call-to-dtor.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f09fb488f70c5965ec4f64453a6e681fbfcff56c/src%2Ftest%2Fui%2Fexplicit%2Fexplicit-call-to-dtor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f09fb488f70c5965ec4f64453a6e681fbfcff56c/src%2Ftest%2Fui%2Fexplicit%2Fexplicit-call-to-dtor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexplicit%2Fexplicit-call-to-dtor.stderr?ref=f09fb488f70c5965ec4f64453a6e681fbfcff56c", "patch": "@@ -1,11 +1,11 @@\n error[E0040]: explicit use of destructor method\n-  --> $DIR/explicit-call-to-dtor.rs:13:7\n+  --> $DIR/explicit-call-to-dtor.rs:15:7\n    |\n LL |     x.drop();\n-   |       ^^^^\n-   |       |\n-   |       explicit destructor calls not allowed\n-   |       help: consider using `drop` function: `drop(x)`\n+   |     --^^^^--\n+   |     | |\n+   |     | explicit destructor calls not allowed\n+   |     help: consider using `drop` function: `drop(x)`\n \n error: aborting due to previous error\n "}, {"sha": "47c4c9f67b69250057a48eb238519a98064fbce0", "filename": "src/test/ui/explicit/explicit-call-to-supertrait-dtor.fixed", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f09fb488f70c5965ec4f64453a6e681fbfcff56c/src%2Ftest%2Fui%2Fexplicit%2Fexplicit-call-to-supertrait-dtor.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f09fb488f70c5965ec4f64453a6e681fbfcff56c/src%2Ftest%2Fui%2Fexplicit%2Fexplicit-call-to-supertrait-dtor.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexplicit%2Fexplicit-call-to-supertrait-dtor.fixed?ref=f09fb488f70c5965ec4f64453a6e681fbfcff56c", "patch": "@@ -0,0 +1,26 @@\n+// run-rustfix\n+struct Foo {\n+    x: isize\n+}\n+\n+#[allow(drop_bounds)]\n+trait Bar: Drop {\n+    fn blah(&self);\n+}\n+\n+impl Drop for Foo {\n+    fn drop(&mut self) {\n+        println!(\"kaboom\");\n+    }\n+}\n+\n+impl Bar for Foo {\n+    fn blah(&self) {\n+        drop(self);    //~ ERROR explicit use of destructor method\n+    }\n+}\n+\n+fn main() {\n+    let x = Foo { x: 3 };\n+    println!(\"{}\", x.x);\n+}"}, {"sha": "c698de50c75b83c3a243dd1154279773633035fc", "filename": "src/test/ui/explicit/explicit-call-to-supertrait-dtor.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f09fb488f70c5965ec4f64453a6e681fbfcff56c/src%2Ftest%2Fui%2Fexplicit%2Fexplicit-call-to-supertrait-dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09fb488f70c5965ec4f64453a6e681fbfcff56c/src%2Ftest%2Fui%2Fexplicit%2Fexplicit-call-to-supertrait-dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexplicit%2Fexplicit-call-to-supertrait-dtor.rs?ref=f09fb488f70c5965ec4f64453a6e681fbfcff56c", "patch": "@@ -1,8 +1,10 @@\n+// run-rustfix\n struct Foo {\n     x: isize\n }\n \n-trait Bar : Drop {\n+#[allow(drop_bounds)]\n+trait Bar: Drop {\n     fn blah(&self);\n }\n \n@@ -20,4 +22,5 @@ impl Bar for Foo {\n \n fn main() {\n     let x = Foo { x: 3 };\n+    println!(\"{}\", x.x);\n }"}, {"sha": "7f5106eb57e54ac96caba72f3c9b364201dd87f0", "filename": "src/test/ui/explicit/explicit-call-to-supertrait-dtor.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f09fb488f70c5965ec4f64453a6e681fbfcff56c/src%2Ftest%2Fui%2Fexplicit%2Fexplicit-call-to-supertrait-dtor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f09fb488f70c5965ec4f64453a6e681fbfcff56c/src%2Ftest%2Fui%2Fexplicit%2Fexplicit-call-to-supertrait-dtor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexplicit%2Fexplicit-call-to-supertrait-dtor.stderr?ref=f09fb488f70c5965ec4f64453a6e681fbfcff56c", "patch": "@@ -1,11 +1,11 @@\n error[E0040]: explicit use of destructor method\n-  --> $DIR/explicit-call-to-supertrait-dtor.rs:17:14\n+  --> $DIR/explicit-call-to-supertrait-dtor.rs:19:14\n    |\n LL |         self.drop();\n-   |              ^^^^\n-   |              |\n-   |              explicit destructor calls not allowed\n-   |              help: consider using `drop` function: `drop(self)`\n+   |         -----^^^^--\n+   |         |    |\n+   |         |    explicit destructor calls not allowed\n+   |         help: consider using `drop` function: `drop(self)`\n \n error: aborting due to previous error\n "}, {"sha": "d73b391be06219a872336b2481b816ab295b294b", "filename": "src/test/ui/illegal-ufcs-drop.fixed", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f09fb488f70c5965ec4f64453a6e681fbfcff56c/src%2Ftest%2Fui%2Fillegal-ufcs-drop.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f09fb488f70c5965ec4f64453a6e681fbfcff56c/src%2Ftest%2Fui%2Fillegal-ufcs-drop.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fillegal-ufcs-drop.fixed?ref=f09fb488f70c5965ec4f64453a6e681fbfcff56c", "patch": "@@ -0,0 +1,10 @@\n+// run-rustfix\n+struct Foo;\n+\n+impl Drop for Foo {\n+    fn drop(&mut self) {}\n+}\n+\n+fn main() {\n+    drop(&mut Foo) //~ ERROR explicit use of destructor method\n+}"}, {"sha": "11411f55494c592d037e1db0131cdcdc97b0b758", "filename": "src/test/ui/illegal-ufcs-drop.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f09fb488f70c5965ec4f64453a6e681fbfcff56c/src%2Ftest%2Fui%2Fillegal-ufcs-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f09fb488f70c5965ec4f64453a6e681fbfcff56c/src%2Ftest%2Fui%2Fillegal-ufcs-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fillegal-ufcs-drop.rs?ref=f09fb488f70c5965ec4f64453a6e681fbfcff56c", "patch": "@@ -1,3 +1,4 @@\n+// run-rustfix\n struct Foo;\n \n impl Drop for Foo {"}, {"sha": "91f47d5e456d38871b95ae66d621925338c6035e", "filename": "src/test/ui/illegal-ufcs-drop.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f09fb488f70c5965ec4f64453a6e681fbfcff56c/src%2Ftest%2Fui%2Fillegal-ufcs-drop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f09fb488f70c5965ec4f64453a6e681fbfcff56c/src%2Ftest%2Fui%2Fillegal-ufcs-drop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fillegal-ufcs-drop.stderr?ref=f09fb488f70c5965ec4f64453a6e681fbfcff56c", "patch": "@@ -1,5 +1,5 @@\n error[E0040]: explicit use of destructor method\n-  --> $DIR/illegal-ufcs-drop.rs:8:5\n+  --> $DIR/illegal-ufcs-drop.rs:9:5\n    |\n LL |     Drop::drop(&mut Foo)\n    |     ^^^^^^^^^^"}, {"sha": "3f6bd6039752604e8d8513638457c709037a7817", "filename": "src/tools/rustdoc-js/tester.js", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f09fb488f70c5965ec4f64453a6e681fbfcff56c/src%2Ftools%2Frustdoc-js%2Ftester.js", "raw_url": "https://github.com/rust-lang/rust/raw/f09fb488f70c5965ec4f64453a6e681fbfcff56c/src%2Ftools%2Frustdoc-js%2Ftester.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-js%2Ftester.js?ref=f09fb488f70c5965ec4f64453a6e681fbfcff56c", "patch": "@@ -263,8 +263,7 @@ function loadMainJsAndIndex(mainJs, searchIndex, storageJs, crate) {\n                            \"handleAliases\", \"getQuery\", \"buildIndex\", \"execQuery\", \"execSearch\"];\n \n     ALIASES = {};\n-    finalJS += 'window = { \"currentCrate\": \"' + crate + '\" };\\n';\n-    finalJS += 'var rootPath = \"../\";\\n';\n+    finalJS += 'window = { \"currentCrate\": \"' + crate + '\", rootPath: \"../\" };\\n';\n     finalJS += loadThings([\"hasOwnProperty\", \"onEach\"], 'function', extractFunction, storageJs);\n     finalJS += loadThings(arraysToLoad, 'array', extractArrayVariable, mainJs);\n     finalJS += loadThings(variablesToLoad, 'variable', extractVariable, mainJs);"}]}