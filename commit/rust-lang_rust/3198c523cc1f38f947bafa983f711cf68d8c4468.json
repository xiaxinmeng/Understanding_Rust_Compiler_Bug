{"sha": "3198c523cc1f38f947bafa983f711cf68d8c4468", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxOThjNTIzY2MxZjM4Zjk0N2JhZmE5ODNmNzExY2Y2OGQ4YzQ0Njg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-12T01:21:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-12T01:21:56Z"}, "message": "Auto merge of #86226 - JohnTitor:rollup-5ubdolf, r=JohnTitor\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #85800 (Fix some diagnostic issues with const_generics_defaults feature gate)\n - #85823 (Do not suggest ampmut if rhs is already mutable)\n - #86153 (Print dummy spans as `no-location`)\n - #86174 (Detect incorrect vtable alignment during const eval)\n - #86189 (Make `relate_type_and_mut` public)\n - #86205 (Run full const-generics test for issue-72293)\n - #86217 (Remove \"generic type\" in boxed.rs)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "8eeea15ae8335d60ad15068eff5cc690dffb8429", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8eeea15ae8335d60ad15068eff5cc690dffb8429"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3198c523cc1f38f947bafa983f711cf68d8c4468", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3198c523cc1f38f947bafa983f711cf68d8c4468", "html_url": "https://github.com/rust-lang/rust/commit/3198c523cc1f38f947bafa983f711cf68d8c4468", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3198c523cc1f38f947bafa983f711cf68d8c4468/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a8629bff642c3c3b84bb644c0099194f063b627", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a8629bff642c3c3b84bb644c0099194f063b627", "html_url": "https://github.com/rust-lang/rust/commit/0a8629bff642c3c3b84bb644c0099194f063b627"}, {"sha": "e13b53ea97223551c7e4e7d3f8d547a955d2dc0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/e13b53ea97223551c7e4e7d3f8d547a955d2dc0b", "html_url": "https://github.com/rust-lang/rust/commit/e13b53ea97223551c7e4e7d3f8d547a955d2dc0b"}], "stats": {"total": 193, "additions": 152, "deletions": 41}, "files": [{"sha": "30aa51a121a80edfb2e45d05f680dfb98b750a3f", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3198c523cc1f38f947bafa983f711cf68d8c4468/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3198c523cc1f38f947bafa983f711cf68d8c4468/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=3198c523cc1f38f947bafa983f711cf68d8c4468", "patch": "@@ -938,8 +938,11 @@ fn validate_generic_param_order(\n                 }\n                 GenericParamKind::Type { default: None } => (),\n                 GenericParamKind::Lifetime => (),\n-                // FIXME(const_generics_defaults)\n-                GenericParamKind::Const { ty: _, kw_span: _, default: _ } => (),\n+                GenericParamKind::Const { ty: _, kw_span: _, default: Some(default) } => {\n+                    ordered_params += \" = \";\n+                    ordered_params += &pprust::expr_to_string(&*default.value);\n+                }\n+                GenericParamKind::Const { ty: _, kw_span: _, default: None } => (),\n             }\n             first = false;\n         }\n@@ -959,7 +962,7 @@ fn validate_generic_param_order(\n             span,\n             &format!(\n                 \"reorder the parameters: lifetimes, {}\",\n-                if sess.features_untracked().const_generics {\n+                if sess.features_untracked().unordered_const_ty_params() {\n                     \"then consts and types\"\n                 } else {\n                     \"then types, then consts\""}, {"sha": "bfb4c0cb538dec29ad8ec51ae8a3c125a0836d8b", "filename": "compiler/rustc_middle/src/ty/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3198c523cc1f38f947bafa983f711cf68d8c4468/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3198c523cc1f38f947bafa983f711cf68d8c4468/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs?ref=3198c523cc1f38f947bafa983f711cf68d8c4468", "patch": "@@ -54,7 +54,7 @@ impl<'tcx> TyS<'tcx> {\n     /// ADTs with no type arguments.\n     pub fn is_simple_text(&self) -> bool {\n         match self.kind() {\n-            Adt(_, substs) => substs.types().next().is_none(),\n+            Adt(_, substs) => substs.non_erasable_generics().next().is_none(),\n             Ref(_, ty, _) => ty.is_simple_text(),\n             _ => self.is_simple_ty(),\n         }"}, {"sha": "3f426b13688fe94302ca6ffd98c917d5913f0250", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3198c523cc1f38f947bafa983f711cf68d8c4468/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3198c523cc1f38f947bafa983f711cf68d8c4468/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=3198c523cc1f38f947bafa983f711cf68d8c4468", "patch": "@@ -112,7 +112,7 @@ pub trait Relate<'tcx>: TypeFoldable<'tcx> + Copy {\n ///////////////////////////////////////////////////////////////////////////\n // Relate impls\n \n-fn relate_type_and_mut<'tcx, R: TypeRelation<'tcx>>(\n+pub fn relate_type_and_mut<'tcx, R: TypeRelation<'tcx>>(\n     relation: &mut R,\n     a: ty::TypeAndMut<'tcx>,\n     b: ty::TypeAndMut<'tcx>,"}, {"sha": "bf5f2c0eec23edc8382fc0819410dd4811600948", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/mutability_errors.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3198c523cc1f38f947bafa983f711cf68d8c4468/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3198c523cc1f38f947bafa983f711cf68d8c4468/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs?ref=3198c523cc1f38f947bafa983f711cf68d8c4468", "patch": "@@ -902,9 +902,13 @@ fn suggest_ampmut<'tcx>(\n             {\n                 let lt_name = &src[1..ws_pos];\n                 let ty = &src[ws_pos..];\n-                return (assignment_rhs_span, format!(\"&{} mut {}\", lt_name, ty));\n+                if !ty.trim_start().starts_with(\"mut\") {\n+                    return (assignment_rhs_span, format!(\"&{} mut {}\", lt_name, ty));\n+                }\n             } else if let Some(stripped) = src.strip_prefix('&') {\n-                return (assignment_rhs_span, format!(\"&mut {}\", stripped));\n+                if !stripped.trim_start().starts_with(\"mut\") {\n+                    return (assignment_rhs_span, format!(\"&mut {}\", stripped));\n+                }\n             }\n         }\n     }"}, {"sha": "d0c04b5b414ebf3feb235ad9fb90899b4e78d35b", "filename": "compiler/rustc_mir/src/interpret/traits.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3198c523cc1f38f947bafa983f711cf68d8c4468/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3198c523cc1f38f947bafa983f711cf68d8c4468/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Ftraits.rs?ref=3198c523cc1f38f947bafa983f711cf68d8c4468", "patch": "@@ -158,13 +158,15 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         let size = u64::try_from(self.force_bits(size, pointer_size)?).unwrap();\n         let align = vtable.read_ptr_sized(pointer_size * 2)?.check_init()?;\n         let align = u64::try_from(self.force_bits(align, pointer_size)?).unwrap();\n+        let align = Align::from_bytes(align)\n+            .map_err(|e| err_ub_format!(\"invalid vtable: alignment {}\", e))?;\n \n         if size >= self.tcx.data_layout.obj_size_bound() {\n             throw_ub_format!(\n                 \"invalid vtable: \\\n                 size is bigger than largest supported object\"\n             );\n         }\n-        Ok((Size::from_bytes(size), Align::from_bytes(align).unwrap()))\n+        Ok((Size::from_bytes(size), align))\n     }\n }"}, {"sha": "1d45cd172b300f186f9aa24b8e2efde61c418659", "filename": "compiler/rustc_span/src/source_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3198c523cc1f38f947bafa983f711cf68d8c4468/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3198c523cc1f38f947bafa983f711cf68d8c4468/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs?ref=3198c523cc1f38f947bafa983f711cf68d8c4468", "patch": "@@ -407,7 +407,7 @@ impl SourceMap {\n     }\n \n     fn span_to_string(&self, sp: Span, prefer_local: bool) -> String {\n-        if self.files.borrow().source_files.is_empty() && sp.is_dummy() {\n+        if self.files.borrow().source_files.is_empty() || sp.is_dummy() {\n             return \"no-location\".to_string();\n         }\n "}, {"sha": "13b42442dcf0979e6f9832f2e5913ae9a2535b85", "filename": "library/alloc/src/boxed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3198c523cc1f38f947bafa983f711cf68d8c4468/library%2Falloc%2Fsrc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3198c523cc1f38f947bafa983f711cf68d8c4468/library%2Falloc%2Fsrc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fboxed.rs?ref=3198c523cc1f38f947bafa983f711cf68d8c4468", "patch": "@@ -1209,7 +1209,7 @@ impl<T: ?Sized + Hasher, A: Allocator> Hasher for Box<T, A> {\n #[cfg(not(no_global_oom_handling))]\n #[stable(feature = \"from_for_ptrs\", since = \"1.6.0\")]\n impl<T> From<T> for Box<T> {\n-    /// Converts a generic type `T` into a `Box<T>`\n+    /// Converts a `T` into a `Box<T>`\n     ///\n     /// The conversion allocates on the heap and moves `t`\n     /// from the stack into it."}, {"sha": "296a459b99f409acafa7d5b16ff1373f540fed80", "filename": "src/test/mir-opt/generator_storage_dead_unwind.main-{closure#0}.StateTransform.before.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3198c523cc1f38f947bafa983f711cf68d8c4468/src%2Ftest%2Fmir-opt%2Fgenerator_storage_dead_unwind.main-%7Bclosure%230%7D.StateTransform.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/3198c523cc1f38f947bafa983f711cf68d8c4468/src%2Ftest%2Fmir-opt%2Fgenerator_storage_dead_unwind.main-%7Bclosure%230%7D.StateTransform.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgenerator_storage_dead_unwind.main-%7Bclosure%230%7D.StateTransform.before.mir?ref=3198c523cc1f38f947bafa983f711cf68d8c4468", "patch": "@@ -85,13 +85,13 @@ yields ()\n     bb8 (cleanup): {\n         StorageDead(_10);                // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:15: 27:16\n         StorageDead(_9);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:27:16: 27:17\n-        goto -> bb10;                    // scope 2 at $DIR/generator-storage-dead-unwind.rs:1:1: 1:1\n+        goto -> bb10;                    // scope 2 at no-location\n     }\n \n     bb9 (cleanup): {\n         StorageDead(_8);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:26:15: 26:16\n         StorageDead(_7);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:26:16: 26:17\n-        goto -> bb10;                    // scope 2 at $DIR/generator-storage-dead-unwind.rs:1:1: 1:1\n+        goto -> bb10;                    // scope 2 at no-location\n     }\n \n     bb10 (cleanup): {"}, {"sha": "db88f77bb630e67d6b32c847ce6d724944e73e62", "filename": "src/test/mir-opt/loop_test.main.SimplifyCfg-promote-consts.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3198c523cc1f38f947bafa983f711cf68d8c4468/src%2Ftest%2Fmir-opt%2Floop_test.main.SimplifyCfg-promote-consts.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/3198c523cc1f38f947bafa983f711cf68d8c4468/src%2Ftest%2Fmir-opt%2Floop_test.main.SimplifyCfg-promote-consts.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Floop_test.main.SimplifyCfg-promote-consts.after.mir?ref=3198c523cc1f38f947bafa983f711cf68d8c4468", "patch": "@@ -43,7 +43,7 @@ fn main() -> () {\n         _6 = const 1_i32;                // scope 0 at $DIR/loop_test.rs:14:17: 14:18\n         FakeRead(ForLet(None), _6);      // scope 0 at $DIR/loop_test.rs:14:13: 14:14\n         StorageDead(_6);                 // scope 0 at $DIR/loop_test.rs:16:5: 16:6\n-        goto -> bb3;                     // scope 0 at $DIR/loop_test.rs:1:1: 1:1\n+        goto -> bb3;                     // scope 0 at no-location\n     }\n \n     bb5 (cleanup): {"}, {"sha": "feb25035ee0ecef3d925ff777a19872b1e97191d", "filename": "src/test/mir-opt/match_arm_scopes.complicated_match.SimplifyCfg-initial.after-ElaborateDrops.after.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3198c523cc1f38f947bafa983f711cf68d8c4468/src%2Ftest%2Fmir-opt%2Fmatch_arm_scopes.complicated_match.SimplifyCfg-initial.after-ElaborateDrops.after.diff", "raw_url": "https://github.com/rust-lang/rust/raw/3198c523cc1f38f947bafa983f711cf68d8c4468/src%2Ftest%2Fmir-opt%2Fmatch_arm_scopes.complicated_match.SimplifyCfg-initial.after-ElaborateDrops.after.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_arm_scopes.complicated_match.SimplifyCfg-initial.after-ElaborateDrops.after.diff?ref=3198c523cc1f38f947bafa983f711cf68d8c4468", "patch": "@@ -94,8 +94,8 @@\n           _0 = const 3_i32;                // scope 0 at $DIR/match-arm-scopes.rs:15:59: 15:60\n           StorageDead(_10);                // scope 0 at $DIR/match-arm-scopes.rs:15:72: 15:73\n           StorageDead(_9);                 // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n--         goto -> bb23;                    // scope 0 at $DIR/match-arm-scopes.rs:1:1: 1:1\n-+         goto -> bb20;                    // scope 0 at $DIR/match-arm-scopes.rs:1:1: 1:1\n+-         goto -> bb23;                    // scope 0 at no-location\n++         goto -> bb20;                    // scope 0 at no-location\n       }\n   \n -     bb10: {\n@@ -150,8 +150,8 @@\n           _0 = const 3_i32;                // scope 0 at $DIR/match-arm-scopes.rs:15:59: 15:60\n           StorageDead(_13);                // scope 0 at $DIR/match-arm-scopes.rs:15:72: 15:73\n           StorageDead(_12);                // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n--         goto -> bb23;                    // scope 0 at $DIR/match-arm-scopes.rs:1:1: 1:1\n-+         goto -> bb20;                    // scope 0 at $DIR/match-arm-scopes.rs:1:1: 1:1\n+-         goto -> bb23;                    // scope 0 at no-location\n++         goto -> bb20;                    // scope 0 at no-location\n       }\n   \n -     bb15: {"}, {"sha": "bf9c2d138a0f61aa3f56ecc8e1076a86537c4dfd", "filename": "src/test/mir-opt/while_storage.while_loop.PreCodegen.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3198c523cc1f38f947bafa983f711cf68d8c4468/src%2Ftest%2Fmir-opt%2Fwhile_storage.while_loop.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/3198c523cc1f38f947bafa983f711cf68d8c4468/src%2Ftest%2Fmir-opt%2Fwhile_storage.while_loop.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fwhile_storage.while_loop.PreCodegen.after.mir?ref=3198c523cc1f38f947bafa983f711cf68d8c4468", "patch": "@@ -40,7 +40,7 @@ fn while_loop(_1: bool) -> () {\n \n     bb4: {\n         StorageDead(_4);                 // scope 0 at $DIR/while-storage.rs:13:9: 13:10\n-        goto -> bb6;                     // scope 0 at $DIR/while-storage.rs:1:1: 1:1\n+        goto -> bb6;                     // scope 0 at no-location\n     }\n \n     bb5: {"}, {"sha": "b82e0298158aa7c0a22af435a46a5efcd00d930c", "filename": "src/test/ui/borrowck/issue-85765.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3198c523cc1f38f947bafa983f711cf68d8c4468/src%2Ftest%2Fui%2Fborrowck%2Fissue-85765.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3198c523cc1f38f947bafa983f711cf68d8c4468/src%2Ftest%2Fui%2Fborrowck%2Fissue-85765.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-85765.rs?ref=3198c523cc1f38f947bafa983f711cf68d8c4468", "patch": "@@ -0,0 +1,8 @@\n+fn main() {\n+    let mut test = Vec::new();\n+    let rofl: &Vec<Vec<i32>> = &mut test;\n+    //~^ HELP consider changing this to be a mutable reference\n+    rofl.push(Vec::new());\n+    //~^ ERROR cannot borrow `*rofl` as mutable, as it is behind a `&` reference\n+    //~| NOTE `rofl` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n+}"}, {"sha": "863c2e8eccc8c65952cf31701ec247cb7c175e2f", "filename": "src/test/ui/borrowck/issue-85765.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3198c523cc1f38f947bafa983f711cf68d8c4468/src%2Ftest%2Fui%2Fborrowck%2Fissue-85765.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3198c523cc1f38f947bafa983f711cf68d8c4468/src%2Ftest%2Fui%2Fborrowck%2Fissue-85765.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-85765.stderr?ref=3198c523cc1f38f947bafa983f711cf68d8c4468", "patch": "@@ -0,0 +1,12 @@\n+error[E0596]: cannot borrow `*rofl` as mutable, as it is behind a `&` reference\n+  --> $DIR/issue-85765.rs:5:5\n+   |\n+LL |     let rofl: &Vec<Vec<i32>> = &mut test;\n+   |         ---- help: consider changing this to be a mutable reference: `&mut Vec<Vec<i32>>`\n+LL |\n+LL |     rofl.push(Vec::new());\n+   |     ^^^^ `rofl` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0596`."}, {"sha": "29d835e36c6eb74d9830d0cb2bcc25494235b0a3", "filename": "src/test/ui/const-generics/defaults/intermixed-lifetime.min.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3198c523cc1f38f947bafa983f711cf68d8c4468/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fintermixed-lifetime.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3198c523cc1f38f947bafa983f711cf68d8c4468/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fintermixed-lifetime.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fintermixed-lifetime.min.stderr?ref=3198c523cc1f38f947bafa983f711cf68d8c4468", "patch": "@@ -2,13 +2,13 @@ error: lifetime parameters must be declared prior to const parameters\n   --> $DIR/intermixed-lifetime.rs:7:28\n    |\n LL | struct Foo<const N: usize, 'a, T = u32>(&'a (), T);\n-   |           -----------------^^---------- help: reorder the parameters: lifetimes, then types, then consts: `<'a, const N: usize, T = u32>`\n+   |           -----------------^^---------- help: reorder the parameters: lifetimes, then consts and types: `<'a, const N: usize, T = u32>`\n \n error: lifetime parameters must be declared prior to type parameters\n   --> $DIR/intermixed-lifetime.rs:10:37\n    |\n LL | struct Bar<const N: usize, T = u32, 'a>(&'a (), T);\n-   |           --------------------------^^- help: reorder the parameters: lifetimes, then types, then consts: `<'a, const N: usize, T = u32>`\n+   |           --------------------------^^- help: reorder the parameters: lifetimes, then consts and types: `<'a, const N: usize, T = u32>`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "4aa8401ab22169b608d5829da6c0715842ba1838", "filename": "src/test/ui/const-generics/defaults/mismatch.full.stderr", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3198c523cc1f38f947bafa983f711cf68d8c4468/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fmismatch.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3198c523cc1f38f947bafa983f711cf68d8c4468/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fmismatch.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fmismatch.full.stderr?ref=3198c523cc1f38f947bafa983f711cf68d8c4468", "patch": "@@ -5,9 +5,12 @@ LL |     let e: Example::<13> = ();\n    |            -------------   ^^ expected struct `Example`, found `()`\n    |            |\n    |            expected due to this\n+   |\n+   = note: expected struct `Example`\n+           found unit type `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/mismatch.rs:14:34\n+  --> $DIR/mismatch.rs:15:34\n    |\n LL |     let e: Example2::<u32, 13> = ();\n    |            -------------------   ^^ expected struct `Example2`, found `()`\n@@ -18,7 +21,7 @@ LL |     let e: Example2::<u32, 13> = ();\n            found unit type `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/mismatch.rs:16:34\n+  --> $DIR/mismatch.rs:18:34\n    |\n LL |     let e: Example3::<13, u32> = ();\n    |            -------------------   ^^ expected struct `Example3`, found `()`\n@@ -29,7 +32,7 @@ LL |     let e: Example3::<13, u32> = ();\n            found unit type `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/mismatch.rs:18:28\n+  --> $DIR/mismatch.rs:21:28\n    |\n LL |     let e: Example3::<7> = ();\n    |            -------------   ^^ expected struct `Example3`, found `()`\n@@ -40,12 +43,15 @@ LL |     let e: Example3::<7> = ();\n            found unit type `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/mismatch.rs:22:28\n+  --> $DIR/mismatch.rs:24:28\n    |\n LL |     let e: Example4::<7> = ();\n    |            -------------   ^^ expected struct `Example4`, found `()`\n    |            |\n    |            expected due to this\n+   |\n+   = note: expected struct `Example4<7_usize>`\n+           found unit type `()`\n \n error: aborting due to 5 previous errors\n "}, {"sha": "4aa8401ab22169b608d5829da6c0715842ba1838", "filename": "src/test/ui/const-generics/defaults/mismatch.min.stderr", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3198c523cc1f38f947bafa983f711cf68d8c4468/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fmismatch.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3198c523cc1f38f947bafa983f711cf68d8c4468/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fmismatch.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fmismatch.min.stderr?ref=3198c523cc1f38f947bafa983f711cf68d8c4468", "patch": "@@ -5,9 +5,12 @@ LL |     let e: Example::<13> = ();\n    |            -------------   ^^ expected struct `Example`, found `()`\n    |            |\n    |            expected due to this\n+   |\n+   = note: expected struct `Example`\n+           found unit type `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/mismatch.rs:14:34\n+  --> $DIR/mismatch.rs:15:34\n    |\n LL |     let e: Example2::<u32, 13> = ();\n    |            -------------------   ^^ expected struct `Example2`, found `()`\n@@ -18,7 +21,7 @@ LL |     let e: Example2::<u32, 13> = ();\n            found unit type `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/mismatch.rs:16:34\n+  --> $DIR/mismatch.rs:18:34\n    |\n LL |     let e: Example3::<13, u32> = ();\n    |            -------------------   ^^ expected struct `Example3`, found `()`\n@@ -29,7 +32,7 @@ LL |     let e: Example3::<13, u32> = ();\n            found unit type `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/mismatch.rs:18:28\n+  --> $DIR/mismatch.rs:21:28\n    |\n LL |     let e: Example3::<7> = ();\n    |            -------------   ^^ expected struct `Example3`, found `()`\n@@ -40,12 +43,15 @@ LL |     let e: Example3::<7> = ();\n            found unit type `()`\n \n error[E0308]: mismatched types\n-  --> $DIR/mismatch.rs:22:28\n+  --> $DIR/mismatch.rs:24:28\n    |\n LL |     let e: Example4::<7> = ();\n    |            -------------   ^^ expected struct `Example4`, found `()`\n    |            |\n    |            expected due to this\n+   |\n+   = note: expected struct `Example4<7_usize>`\n+           found unit type `()`\n \n error: aborting due to 5 previous errors\n "}, {"sha": "9d9a8793aaac0e675ff94b2e1909733ea0fb2e7a", "filename": "src/test/ui/const-generics/defaults/mismatch.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3198c523cc1f38f947bafa983f711cf68d8c4468/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fmismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3198c523cc1f38f947bafa983f711cf68d8c4468/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fmismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fmismatch.rs?ref=3198c523cc1f38f947bafa983f711cf68d8c4468", "patch": "@@ -11,14 +11,17 @@ pub struct Example4<const N: usize=13, const M: usize=4>;\n fn main() {\n     let e: Example::<13> = ();\n     //~^ Error: mismatched types\n+    //~| expected struct `Example`\n     let e: Example2::<u32, 13> = ();\n     //~^ Error: mismatched types\n+    //~| expected struct `Example2`\n     let e: Example3::<13, u32> = ();\n     //~^ Error: mismatched types\n+    //~| expected struct `Example3`\n     let e: Example3::<7> = ();\n     //~^ Error: mismatched types\n-    // FIXME(const_generics_defaults): There should be a note for the error below, but it is\n-    // missing.\n+    //~| expected struct `Example3<7_usize>`\n     let e: Example4::<7> = ();\n     //~^ Error: mismatched types\n+    //~| expected struct `Example4<7_usize>`\n }"}, {"sha": "933eacb312dbf9a4c204b790bc8790fcba4e66d6", "filename": "src/test/ui/const-generics/defaults/param-order-err-pretty-prints-default.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3198c523cc1f38f947bafa983f711cf68d8c4468/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fparam-order-err-pretty-prints-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3198c523cc1f38f947bafa983f711cf68d8c4468/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fparam-order-err-pretty-prints-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fparam-order-err-pretty-prints-default.rs?ref=3198c523cc1f38f947bafa983f711cf68d8c4468", "patch": "@@ -0,0 +1,5 @@\n+#![feature(const_generics_defaults)]\n+struct Foo<const M: usize = 10, 'a>(&'a u32);\n+//~^ Error lifetime parameters must be declared prior to const parameters\n+\n+fn main() {}"}, {"sha": "f50653fe9a19f6f322e614f198365ce6e1054e9c", "filename": "src/test/ui/const-generics/defaults/param-order-err-pretty-prints-default.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3198c523cc1f38f947bafa983f711cf68d8c4468/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fparam-order-err-pretty-prints-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3198c523cc1f38f947bafa983f711cf68d8c4468/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fparam-order-err-pretty-prints-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fparam-order-err-pretty-prints-default.stderr?ref=3198c523cc1f38f947bafa983f711cf68d8c4468", "patch": "@@ -0,0 +1,8 @@\n+error: lifetime parameters must be declared prior to const parameters\n+  --> $DIR/param-order-err-pretty-prints-default.rs:2:33\n+   |\n+LL | struct Foo<const M: usize = 10, 'a>(&'a u32);\n+   |           ----------------------^^- help: reorder the parameters: lifetimes, then consts and types: `<'a, const M: usize = 10>`\n+\n+error: aborting due to previous error\n+"}, {"sha": "560795a51f58ea645921a89c5b35ce18f6be35fb", "filename": "src/test/ui/const-generics/min_const_generics/transmute-const-param-static-reference.rs", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0a8629bff642c3c3b84bb644c0099194f063b627/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Ftransmute-const-param-static-reference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a8629bff642c3c3b84bb644c0099194f063b627/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Ftransmute-const-param-static-reference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Ftransmute-const-param-static-reference.rs?ref=0a8629bff642c3c3b84bb644c0099194f063b627", "patch": "@@ -1,10 +0,0 @@\n-struct Const<const P: &'static ()>;\n-//~^ ERROR `&'static ()` is forbidden as the type of a const generic parameter\n-\n-fn main() {\n-    const A: &'static () = unsafe {\n-        std::mem::transmute(10 as *const ())\n-    };\n-\n-    let _ = Const::<{A}>;\n-}"}, {"sha": "f735be9c24e08077af3e6be0f365142b009e595e", "filename": "src/test/ui/const-generics/transmute-const-param-static-reference.min.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3198c523cc1f38f947bafa983f711cf68d8c4468/src%2Ftest%2Fui%2Fconst-generics%2Ftransmute-const-param-static-reference.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3198c523cc1f38f947bafa983f711cf68d8c4468/src%2Ftest%2Fui%2Fconst-generics%2Ftransmute-const-param-static-reference.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftransmute-const-param-static-reference.min.stderr?ref=3198c523cc1f38f947bafa983f711cf68d8c4468", "patch": "@@ -1,5 +1,5 @@\n error: `&'static ()` is forbidden as the type of a const generic parameter\n-  --> $DIR/transmute-const-param-static-reference.rs:1:23\n+  --> $DIR/transmute-const-param-static-reference.rs:7:23\n    |\n LL | struct Const<const P: &'static ()>;\n    |                       ^^^^^^^^^^^", "previous_filename": "src/test/ui/const-generics/min_const_generics/transmute-const-param-static-reference.stderr"}, {"sha": "3147d61ec9bd9f8c491a3880f6015a4c00585499", "filename": "src/test/ui/const-generics/transmute-const-param-static-reference.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3198c523cc1f38f947bafa983f711cf68d8c4468/src%2Ftest%2Fui%2Fconst-generics%2Ftransmute-const-param-static-reference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3198c523cc1f38f947bafa983f711cf68d8c4468/src%2Ftest%2Fui%2Fconst-generics%2Ftransmute-const-param-static-reference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftransmute-const-param-static-reference.rs?ref=3198c523cc1f38f947bafa983f711cf68d8c4468", "patch": "@@ -0,0 +1,16 @@\n+// revisions: full min\n+//[full] check-pass\n+\n+#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, allow(incomplete_features))]\n+\n+struct Const<const P: &'static ()>;\n+//[min]~^ ERROR `&'static ()` is forbidden as the type of a const generic parameter\n+\n+fn main() {\n+    const A: &'static () = unsafe {\n+        std::mem::transmute(10 as *const ())\n+    };\n+\n+    let _ = Const::<{A}>;\n+}"}, {"sha": "0c0e3682de4d647530e991fb9a15c19e56a52f6f", "filename": "src/test/ui/consts/const-eval/ub-incorrect-vtable.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3198c523cc1f38f947bafa983f711cf68d8c4468/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-incorrect-vtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3198c523cc1f38f947bafa983f711cf68d8c4468/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-incorrect-vtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-incorrect-vtable.rs?ref=3198c523cc1f38f947bafa983f711cf68d8c4468", "patch": "@@ -0,0 +1,21 @@\n+// This test contains code with incorrect vtables in a const context:\n+// - from issue 86132: a trait object with invalid alignment caused an ICE in const eval, and now\n+//   triggers an error\n+// - a similar test that triggers a previously-untested const UB error: emitted close to the above\n+//   error, it checks the correctness of the size\n+\n+trait Trait {}\n+\n+const INVALID_VTABLE_ALIGNMENT: &dyn Trait =\n+    unsafe { std::mem::transmute((&92u8, &[0usize, 1usize, 1000usize])) };\n+//~^ ERROR any use of this value will cause an error\n+//~| WARNING this was previously accepted by the compiler\n+//~| invalid vtable: alignment `1000` is not a power of 2\n+\n+const INVALID_VTABLE_SIZE: &dyn Trait =\n+    unsafe { std::mem::transmute((&92u8, &[1usize, usize::MAX, 1usize])) };\n+//~^ ERROR any use of this value will cause an error\n+//~| WARNING this was previously accepted by the compiler\n+//~| invalid vtable: size is bigger than largest supported object\n+\n+fn main() {}"}, {"sha": "c937d039d381e63e1c1bb0b81a927f6cfae445f9", "filename": "src/test/ui/consts/const-eval/ub-incorrect-vtable.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/3198c523cc1f38f947bafa983f711cf68d8c4468/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-incorrect-vtable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3198c523cc1f38f947bafa983f711cf68d8c4468/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-incorrect-vtable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-incorrect-vtable.stderr?ref=3198c523cc1f38f947bafa983f711cf68d8c4468", "patch": "@@ -0,0 +1,27 @@\n+error: any use of this value will cause an error\n+  --> $DIR/ub-incorrect-vtable.rs:10:14\n+   |\n+LL | / const INVALID_VTABLE_ALIGNMENT: &dyn Trait =\n+LL | |     unsafe { std::mem::transmute((&92u8, &[0usize, 1usize, 1000usize])) };\n+   | |______________^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^__-\n+   |                |\n+   |                invalid vtable: alignment `1000` is not a power of 2\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+error: any use of this value will cause an error\n+  --> $DIR/ub-incorrect-vtable.rs:16:14\n+   |\n+LL | / const INVALID_VTABLE_SIZE: &dyn Trait =\n+LL | |     unsafe { std::mem::transmute((&92u8, &[1usize, usize::MAX, 1usize])) };\n+   | |______________^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^__-\n+   |                |\n+   |                invalid vtable: size is bigger than largest supported object\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+error: aborting due to 2 previous errors\n+"}]}