{"sha": "f70512cc1710656628b4173557795c1e60f0317d", "node_id": "C_kwDOAAsO6NoAKGY3MDUxMmNjMTcxMDY1NjYyOGI0MTczNTU3Nzk1YzFlNjBmMDMxN2Q", "commit": {"author": {"name": "Chayim Refael Friedman", "email": "chayimfr@gmail.com", "date": "2022-02-21T06:15:21Z"}, "committer": {"name": "Chayim Refael Friedman", "email": "chayimfr@gmail.com", "date": "2022-02-21T06:34:36Z"}, "message": "Change `single_let()` and `is_pattern_cond()` to free functions", "tree": {"sha": "e8ad850d7b42ffe7088a6314025068a5477b1bc0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8ad850d7b42ffe7088a6314025068a5477b1bc0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f70512cc1710656628b4173557795c1e60f0317d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f70512cc1710656628b4173557795c1e60f0317d", "html_url": "https://github.com/rust-lang/rust/commit/f70512cc1710656628b4173557795c1e60f0317d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f70512cc1710656628b4173557795c1e60f0317d/comments", "author": {"login": "ChayimFriedman2", "id": 24700207, "node_id": "MDQ6VXNlcjI0NzAwMjA3", "avatar_url": "https://avatars.githubusercontent.com/u/24700207?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChayimFriedman2", "html_url": "https://github.com/ChayimFriedman2", "followers_url": "https://api.github.com/users/ChayimFriedman2/followers", "following_url": "https://api.github.com/users/ChayimFriedman2/following{/other_user}", "gists_url": "https://api.github.com/users/ChayimFriedman2/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChayimFriedman2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChayimFriedman2/subscriptions", "organizations_url": "https://api.github.com/users/ChayimFriedman2/orgs", "repos_url": "https://api.github.com/users/ChayimFriedman2/repos", "events_url": "https://api.github.com/users/ChayimFriedman2/events{/privacy}", "received_events_url": "https://api.github.com/users/ChayimFriedman2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ChayimFriedman2", "id": 24700207, "node_id": "MDQ6VXNlcjI0NzAwMjA3", "avatar_url": "https://avatars.githubusercontent.com/u/24700207?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChayimFriedman2", "html_url": "https://github.com/ChayimFriedman2", "followers_url": "https://api.github.com/users/ChayimFriedman2/followers", "following_url": "https://api.github.com/users/ChayimFriedman2/following{/other_user}", "gists_url": "https://api.github.com/users/ChayimFriedman2/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChayimFriedman2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChayimFriedman2/subscriptions", "organizations_url": "https://api.github.com/users/ChayimFriedman2/orgs", "repos_url": "https://api.github.com/users/ChayimFriedman2/repos", "events_url": "https://api.github.com/users/ChayimFriedman2/events{/privacy}", "received_events_url": "https://api.github.com/users/ChayimFriedman2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9881614db198813f47f64277c2d8ca674bcd3544", "url": "https://api.github.com/repos/rust-lang/rust/commits/9881614db198813f47f64277c2d8ca674bcd3544", "html_url": "https://github.com/rust-lang/rust/commit/9881614db198813f47f64277c2d8ca674bcd3544"}], "stats": {"total": 90, "additions": 44, "deletions": 46}, "files": [{"sha": "274718e6ea90e900466640d40db4d8cdc2415af7", "filename": "crates/ide_assists/src/handlers/convert_bool_then.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f70512cc1710656628b4173557795c1e60f0317d/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_bool_then.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f70512cc1710656628b4173557795c1e60f0317d/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_bool_then.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_bool_then.rs?ref=f70512cc1710656628b4173557795c1e60f0317d", "patch": "@@ -2,7 +2,7 @@ use hir::{known, AsAssocItem, Semantics};\n use ide_db::{\n     helpers::{\n         for_each_tail_expr,\n-        node_ext::{block_as_lone_tail, preorder_expr},\n+        node_ext::{block_as_lone_tail, is_pattern_cond, preorder_expr},\n         FamousDefs,\n     },\n     RootDatabase,\n@@ -45,7 +45,7 @@ pub(crate) fn convert_if_to_bool_then(acc: &mut Assists, ctx: &AssistContext) ->\n         return None;\n     }\n \n-    let cond = expr.condition().filter(|cond| !cond.is_pattern_cond())?;\n+    let cond = expr.condition().filter(|cond| !is_pattern_cond(cond.clone()))?;\n     let then = expr.then_branch()?;\n     let else_ = match expr.else_branch()? {\n         ast::ElseBranch::Block(b) => b,"}, {"sha": "193d1cdfb2439cc4ce3a31491a27a328b562cb34", "filename": "crates/ide_assists/src/handlers/convert_to_guarded_return.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f70512cc1710656628b4173557795c1e60f0317d/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_to_guarded_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f70512cc1710656628b4173557795c1e60f0317d/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_to_guarded_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_to_guarded_return.rs?ref=f70512cc1710656628b4173557795c1e60f0317d", "patch": "@@ -1,5 +1,6 @@\n use std::iter::once;\n \n+use ide_db::helpers::node_ext::{is_pattern_cond, single_let};\n use syntax::{\n     ast::{\n         self,\n@@ -48,8 +49,8 @@ pub(crate) fn convert_to_guarded_return(acc: &mut Assists, ctx: &AssistContext)\n     let cond = if_expr.condition()?;\n \n     // Check if there is an IfLet that we can handle.\n-    let (if_let_pat, cond_expr) = if cond.is_pattern_cond() {\n-        let let_ = cond.single_let()?;\n+    let (if_let_pat, cond_expr) = if is_pattern_cond(cond.clone()) {\n+        let let_ = single_let(cond)?;\n         match let_.pat() {\n             Some(ast::Pat::TupleStructPat(pat)) if pat.fields().count() == 1 => {\n                 let path = pat.path()?;"}, {"sha": "0fa2dcfbde1f7bea4a6f898631697e47b548316a", "filename": "crates/ide_assists/src/handlers/convert_while_to_loop.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f70512cc1710656628b4173557795c1e60f0317d/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_while_to_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f70512cc1710656628b4173557795c1e60f0317d/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_while_to_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_while_to_loop.rs?ref=f70512cc1710656628b4173557795c1e60f0317d", "patch": "@@ -1,5 +1,6 @@\n use std::iter::once;\n \n+use ide_db::helpers::node_ext::is_pattern_cond;\n use syntax::{\n     ast::{\n         self,\n@@ -54,7 +55,7 @@ pub(crate) fn convert_while_to_loop(acc: &mut Assists, ctx: &AssistContext) -> O\n             let break_block =\n                 make::block_expr(once(make::expr_stmt(make::expr_break(None)).into()), None)\n                     .indent(while_indent_level);\n-            let block_expr = if while_cond.is_pattern_cond() {\n+            let block_expr = if is_pattern_cond(while_cond.clone()) {\n                 let if_expr = make::expr_if(while_cond, while_body, Some(break_block.into()));\n                 let stmts = once(make::expr_stmt(if_expr).into());\n                 make::block_expr(stmts, None)"}, {"sha": "46f11f4af3248b849cba98974e9a35ce0519a644", "filename": "crates/ide_assists/src/handlers/invert_if.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f70512cc1710656628b4173557795c1e60f0317d/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finvert_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f70512cc1710656628b4173557795c1e60f0317d/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finvert_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finvert_if.rs?ref=f70512cc1710656628b4173557795c1e60f0317d", "patch": "@@ -1,3 +1,4 @@\n+use ide_db::helpers::node_ext::is_pattern_cond;\n use syntax::{\n     ast::{self, AstNode},\n     T,\n@@ -36,7 +37,7 @@ pub(crate) fn invert_if(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n \n     let cond = expr.condition()?;\n     // This assist should not apply for if-let.\n-    if cond.is_pattern_cond() {\n+    if is_pattern_cond(cond.clone()) {\n         return None;\n     }\n "}, {"sha": "b594c64c412dac5eb2a794768645257e6414887f", "filename": "crates/ide_assists/src/handlers/replace_if_let_with_match.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f70512cc1710656628b4173557795c1e60f0317d/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f70512cc1710656628b4173557795c1e60f0317d/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs?ref=f70512cc1710656628b4173557795c1e60f0317d", "patch": "@@ -1,7 +1,12 @@\n use std::iter::{self, successors};\n \n use either::Either;\n-use ide_db::{defs::NameClass, ty_filter::TryEnum, RootDatabase};\n+use ide_db::{\n+    defs::NameClass,\n+    helpers::node_ext::{is_pattern_cond, single_let},\n+    ty_filter::TryEnum,\n+    RootDatabase,\n+};\n use syntax::{\n     ast::{\n         self,\n@@ -61,7 +66,7 @@ pub(crate) fn replace_if_let_with_match(acc: &mut Assists, ctx: &AssistContext)\n         }\n     });\n     let scrutinee_to_be_expr = if_expr.condition()?;\n-    let scrutinee_to_be_expr = match scrutinee_to_be_expr.single_let() {\n+    let scrutinee_to_be_expr = match single_let(scrutinee_to_be_expr.clone()) {\n         Some(cond) => cond.expr()?,\n         None => scrutinee_to_be_expr,\n     };\n@@ -70,7 +75,7 @@ pub(crate) fn replace_if_let_with_match(acc: &mut Assists, ctx: &AssistContext)\n     let mut cond_bodies = Vec::new();\n     for if_expr in if_exprs {\n         let cond = if_expr.condition()?;\n-        let cond = match cond.single_let() {\n+        let cond = match single_let(cond.clone()) {\n             Some(let_) => {\n                 let pat = let_.pat()?;\n                 let expr = let_.expr()?;\n@@ -84,7 +89,7 @@ pub(crate) fn replace_if_let_with_match(acc: &mut Assists, ctx: &AssistContext)\n                 Either::Left(pat)\n             }\n             // Multiple `let`, unsupported.\n-            None if cond.is_pattern_cond() => return None,\n+            None if is_pattern_cond(cond.clone()) => return None,\n             None => Either::Right(cond),\n         };\n         let body = if_expr.then_branch()?;"}, {"sha": "5df3ed1366f15d5d5d1787e1a4bd663fa45f1773", "filename": "crates/ide_db/src/helpers/node_ext.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f70512cc1710656628b4173557795c1e60f0317d/crates%2Fide_db%2Fsrc%2Fhelpers%2Fnode_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f70512cc1710656628b4173557795c1e60f0317d/crates%2Fide_db%2Fsrc%2Fhelpers%2Fnode_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Fnode_ext.rs?ref=f70512cc1710656628b4173557795c1e60f0317d", "patch": "@@ -216,3 +216,29 @@ pub fn vis_eq(this: &ast::Visibility, other: &ast::Visibility) -> bool {\n         _ => false,\n     }\n }\n+\n+/// Returns the `let` only if there is exactly one (that is, `let pat = expr`\n+/// or `((let pat = expr))`, but not `let pat = expr && expr` or `non_let_expr`).\n+pub fn single_let(expr: ast::Expr) -> Option<ast::LetExpr> {\n+    match expr {\n+        ast::Expr::ParenExpr(expr) => expr.expr().and_then(single_let),\n+        ast::Expr::LetExpr(expr) => Some(expr),\n+        _ => None,\n+    }\n+}\n+\n+pub fn is_pattern_cond(expr: ast::Expr) -> bool {\n+    match expr {\n+        ast::Expr::BinExpr(expr)\n+            if expr.op_kind() == Some(ast::BinaryOp::LogicOp(ast::LogicOp::And)) =>\n+        {\n+            expr.lhs()\n+                .map(is_pattern_cond)\n+                .or_else(|| expr.rhs().map(is_pattern_cond))\n+                .unwrap_or(false)\n+        }\n+        ast::Expr::ParenExpr(expr) => expr.expr().map_or(false, is_pattern_cond),\n+        ast::Expr::LetExpr(_) => true,\n+        _ => false,\n+    }\n+}"}, {"sha": "5ff6519c9ccf93c1c218458da9b960ae1b723282", "filename": "crates/syntax/src/ast/node_ext.rs", "status": "modified", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/f70512cc1710656628b4173557795c1e60f0317d/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f70512cc1710656628b4173557795c1e60f0317d/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs?ref=f70512cc1710656628b4173557795c1e60f0317d", "patch": "@@ -528,42 +528,6 @@ impl ast::Item {\n     }\n }\n \n-impl ast::Expr {\n-    /// Returns the `let` only if there is exactly one (that is, `let pat = expr`\n-    /// or `((let pat = expr))`, but not `let pat = expr && expr` or `non_let_expr`).\n-    pub fn single_let(&self) -> Option<ast::LetExpr> {\n-        return get_pat(self.clone());\n-\n-        fn get_pat(expr: ast::Expr) -> Option<ast::LetExpr> {\n-            match expr {\n-                ast::Expr::ParenExpr(expr) => expr.expr().and_then(get_pat),\n-                ast::Expr::LetExpr(expr) => Some(expr),\n-                _ => None,\n-            }\n-        }\n-    }\n-\n-    pub fn is_pattern_cond(&self) -> bool {\n-        return contains_let(self.clone());\n-\n-        fn contains_let(expr: ast::Expr) -> bool {\n-            match expr {\n-                ast::Expr::BinExpr(expr)\n-                    if expr.op_kind() == Some(ast::BinaryOp::LogicOp(ast::LogicOp::And)) =>\n-                {\n-                    expr.lhs()\n-                        .map(contains_let)\n-                        .or_else(|| expr.rhs().map(contains_let))\n-                        .unwrap_or(false)\n-                }\n-                ast::Expr::ParenExpr(expr) => expr.expr().map_or(false, contains_let),\n-                ast::Expr::LetExpr(_) => true,\n-                _ => false,\n-            }\n-        }\n-    }\n-}\n-\n #[derive(Debug, Clone, PartialEq, Eq)]\n pub enum FieldKind {\n     Name(ast::NameRef),"}]}