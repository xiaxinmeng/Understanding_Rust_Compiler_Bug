{"sha": "4efa4a5273293354526801d8e3a3d05d005b2479", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlZmE0YTUyNzMyOTMzNTQ1MjY4MDFkOGUzYTNkMDVkMDA1YjI0Nzk=", "commit": {"author": {"name": "Fabian Wolff", "email": "fabi.wolff@arcor.de", "date": "2021-05-16T16:16:00Z"}, "committer": {"name": "Fabian Wolff", "email": "fabi.wolff@arcor.de", "date": "2021-05-16T16:22:34Z"}, "message": "Implement changes suggested by varkor", "tree": {"sha": "9c4d8525129dd64da403dc3604cdcc9ba3e33902", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c4d8525129dd64da403dc3604cdcc9ba3e33902"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4efa4a5273293354526801d8e3a3d05d005b2479", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4efa4a5273293354526801d8e3a3d05d005b2479", "html_url": "https://github.com/rust-lang/rust/commit/4efa4a5273293354526801d8e3a3d05d005b2479", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4efa4a5273293354526801d8e3a3d05d005b2479/comments", "author": {"login": "FabianWolff", "id": 16052130, "node_id": "MDQ6VXNlcjE2MDUyMTMw", "avatar_url": "https://avatars.githubusercontent.com/u/16052130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FabianWolff", "html_url": "https://github.com/FabianWolff", "followers_url": "https://api.github.com/users/FabianWolff/followers", "following_url": "https://api.github.com/users/FabianWolff/following{/other_user}", "gists_url": "https://api.github.com/users/FabianWolff/gists{/gist_id}", "starred_url": "https://api.github.com/users/FabianWolff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FabianWolff/subscriptions", "organizations_url": "https://api.github.com/users/FabianWolff/orgs", "repos_url": "https://api.github.com/users/FabianWolff/repos", "events_url": "https://api.github.com/users/FabianWolff/events{/privacy}", "received_events_url": "https://api.github.com/users/FabianWolff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "FabianWolff", "id": 16052130, "node_id": "MDQ6VXNlcjE2MDUyMTMw", "avatar_url": "https://avatars.githubusercontent.com/u/16052130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FabianWolff", "html_url": "https://github.com/FabianWolff", "followers_url": "https://api.github.com/users/FabianWolff/followers", "following_url": "https://api.github.com/users/FabianWolff/following{/other_user}", "gists_url": "https://api.github.com/users/FabianWolff/gists{/gist_id}", "starred_url": "https://api.github.com/users/FabianWolff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FabianWolff/subscriptions", "organizations_url": "https://api.github.com/users/FabianWolff/orgs", "repos_url": "https://api.github.com/users/FabianWolff/repos", "events_url": "https://api.github.com/users/FabianWolff/events{/privacy}", "received_events_url": "https://api.github.com/users/FabianWolff/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7217d767b2054ac98da4f1840934f35f8285890c", "url": "https://api.github.com/repos/rust-lang/rust/commits/7217d767b2054ac98da4f1840934f35f8285890c", "html_url": "https://github.com/rust-lang/rust/commit/7217d767b2054ac98da4f1840934f35f8285890c"}], "stats": {"total": 117, "additions": 86, "deletions": 31}, "files": [{"sha": "9086e21579eda2075ad8edff8d79137382753f9a", "filename": "compiler/rustc_passes/src/lang_items.rs", "status": "modified", "additions": 49, "deletions": 5, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/4efa4a5273293354526801d8e3a3d05d005b2479/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4efa4a5273293354526801d8e3a3d05d005b2479/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs?ref=4efa4a5273293354526801d8e3a3d05d005b2479", "patch": "@@ -182,6 +182,8 @@ impl LanguageItemCollector<'tcx> {\n         }\n     }\n \n+    // Like collect_item() above, but also checks whether the lang item is declared\n+    // with the right number of generic arguments if it is a trait.\n     fn collect_item_extended(&mut self, item_index: usize, hir_id: HirId, span: Span) {\n         let item_def_id = self.tcx.hir().local_def_id(hir_id).to_def_id();\n         let lang_item = LangItem::from_u32(item_index as u32).unwrap();\n@@ -190,10 +192,15 @@ impl LanguageItemCollector<'tcx> {\n         self.collect_item(item_index, item_def_id);\n \n         // Now check whether the lang_item has the expected number of generic\n-        // arguments. Binary and indexing operations have one (for the RHS/index),\n-        // unary operations have no generic arguments.\n+        // arguments if it is a trait. Generally speaking, binary and indexing\n+        // operations have one (for the RHS/index), unary operations have none,\n+        // and the rest also have none except for the closure traits (one for\n+        // the argument list), generators (one for the resume argument),\n+        // ordering/equality relations (one for the RHS), and various conversion\n+        // traits.\n \n         let expected_num = match lang_item {\n+            // Binary operations\n             LangItem::Add\n             | LangItem::Sub\n             | LangItem::Mul\n@@ -215,11 +222,48 @@ impl LanguageItemCollector<'tcx> {\n             | LangItem::ShlAssign\n             | LangItem::ShrAssign\n             | LangItem::Index\n-            | LangItem::IndexMut => Some(1),\n+            | LangItem::IndexMut\n \n-            LangItem::Neg | LangItem::Not | LangItem::Deref | LangItem::DerefMut => Some(0),\n+            // Miscellaneous\n+            | LangItem::Unsize\n+            | LangItem::CoerceUnsized\n+            | LangItem::DispatchFromDyn\n+            | LangItem::Fn\n+            | LangItem::FnMut\n+            | LangItem::FnOnce\n+            | LangItem::Generator\n+            | LangItem::PartialEq\n+            | LangItem::PartialOrd\n+                => Some(1),\n \n-            // FIXME: add more cases?\n+            // Unary operations\n+            LangItem::Neg\n+            | LangItem::Not\n+\n+            // Miscellaneous\n+            | LangItem::Deref\n+            | LangItem::DerefMut\n+            | LangItem::Sized\n+            | LangItem::StructuralPeq\n+            | LangItem::StructuralTeq\n+            | LangItem::Copy\n+            | LangItem::Clone\n+            | LangItem::Sync\n+            | LangItem::DiscriminantKind\n+            | LangItem::PointeeTrait\n+            | LangItem::Freeze\n+            | LangItem::Drop\n+            | LangItem::Receiver\n+            | LangItem::Future\n+            | LangItem::Unpin\n+            | LangItem::Termination\n+            | LangItem::Try\n+            | LangItem::Send\n+            | LangItem::UnwindSafe\n+            | LangItem::RefUnwindSafe\n+                => Some(0),\n+\n+            // Not a trait\n             _ => None,\n         };\n "}, {"sha": "6f96bd544c06c8c4240e1474af079986f3f0874f", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4efa4a5273293354526801d8e3a3d05d005b2479/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4efa4a5273293354526801d8e3a3d05d005b2479/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=4efa4a5273293354526801d8e3a3d05d005b2479", "patch": "@@ -1190,3 +1190,17 @@ fn fatally_break_rust(sess: &Session) {\n fn potentially_plural_count(count: usize, word: &str) -> String {\n     format!(\"{} {}{}\", count, word, pluralize!(count))\n }\n+\n+fn has_expected_num_generic_args<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    trait_did: Option<DefId>,\n+    mut expected: usize,\n+) -> bool {\n+    trait_did.map_or(true, |trait_did| {\n+        let generics = tcx.generics_of(trait_did);\n+        if generics.has_self {\n+            expected += 1;\n+        }\n+        generics.count() == expected\n+    })\n+}"}, {"sha": "963436d05d8ef30a52bac21eb8c15855f9635c4f", "filename": "compiler/rustc_typeck/src/check/op.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4efa4a5273293354526801d8e3a3d05d005b2479/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4efa4a5273293354526801d8e3a3d05d005b2479/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs?ref=4efa4a5273293354526801d8e3a3d05d005b2479", "patch": "@@ -1,7 +1,7 @@\n //! Code related to processing overloaded binary and unary operators.\n \n use super::method::MethodCallee;\n-use super::FnCtxt;\n+use super::{has_expected_num_generic_args, FnCtxt};\n use rustc_ast as ast;\n use rustc_errors::{self, struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n@@ -800,17 +800,16 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // elsewhere by now, but we have to catch it here so that we do not\n         // index `other_tys` out of bounds (if the lang item has too many\n         // generic arguments, `other_tys` is too short).\n-        if let Some(trait_did) = trait_did {\n-            let generics = self.tcx.generics_of(trait_did);\n-            let expected_num = match op {\n+        if !has_expected_num_generic_args(\n+            self.tcx,\n+            trait_did,\n+            match op {\n                 // Binary ops have a generic right-hand side, unary ops don't\n                 Op::Binary(..) => 1,\n                 Op::Unary(..) => 0,\n-            } + if generics.has_self { 1 } else { 0 };\n-            let num_generics = generics.count();\n-            if num_generics != expected_num {\n-                return Err(());\n-            }\n+            },\n+        ) {\n+            return Err(());\n         }\n \n         let method = trait_did.and_then(|trait_did| {"}, {"sha": "a63aec07ad1c086a2ef4a7a41f6387782dd195e3", "filename": "compiler/rustc_typeck/src/check/place_op.rs", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/4efa4a5273293354526801d8e3a3d05d005b2479/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fplace_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4efa4a5273293354526801d8e3a3d05d005b2479/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fplace_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fplace_op.rs?ref=4efa4a5273293354526801d8e3a3d05d005b2479", "patch": "@@ -1,5 +1,5 @@\n use crate::check::method::MethodCallee;\n-use crate::check::{FnCtxt, PlaceOp};\n+use crate::check::{has_expected_num_generic_args, FnCtxt, PlaceOp};\n use rustc_hir as hir;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_infer::infer::InferOk;\n@@ -157,16 +157,15 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // If the lang item was declared incorrectly, stop here so that we don't\n         // run into an ICE (#83893). The error is reported where the lang item is\n         // declared.\n-        if let Some(trait_did) = imm_tr {\n-            let generics = self.tcx.generics_of(trait_did);\n-            let expected_num = match op {\n+        if !has_expected_num_generic_args(\n+            self.tcx,\n+            imm_tr,\n+            match op {\n                 PlaceOp::Deref => 0,\n                 PlaceOp::Index => 1,\n-            } + if generics.has_self { 1 } else { 0 };\n-            let num_generics = generics.count();\n-            if num_generics != expected_num {\n-                return None;\n-            }\n+            },\n+        ) {\n+            return None;\n         }\n \n         imm_tr.and_then(|trait_did| {\n@@ -197,16 +196,15 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // If the lang item was declared incorrectly, stop here so that we don't\n         // run into an ICE (#83893). The error is reported where the lang item is\n         // declared.\n-        if let Some(trait_did) = mut_tr {\n-            let generics = self.tcx.generics_of(trait_did);\n-            let expected_num = match op {\n+        if !has_expected_num_generic_args(\n+            self.tcx,\n+            mut_tr,\n+            match op {\n                 PlaceOp::Deref => 0,\n                 PlaceOp::Index => 1,\n-            } + if generics.has_self { 1 } else { 0 };\n-            let num_generics = generics.count();\n-            if num_generics != expected_num {\n-                return None;\n-            }\n+            },\n+        ) {\n+            return None;\n         }\n \n         mut_tr.and_then(|trait_did| {"}]}