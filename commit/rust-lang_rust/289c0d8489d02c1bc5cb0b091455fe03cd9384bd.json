{"sha": "289c0d8489d02c1bc5cb0b091455fe03cd9384bd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4OWMwZDg0ODlkMDJjMWJjNWNiMGIwOTE0NTVmZTAzY2Q5Mzg0YmQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-10-31T12:57:56Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-10-31T14:31:27Z"}, "message": "Retagging: do not retag 'raw reborrows'", "tree": {"sha": "952366474cd9883690d57ee82adb2a69fcf6bb6c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/952366474cd9883690d57ee82adb2a69fcf6bb6c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/289c0d8489d02c1bc5cb0b091455fe03cd9384bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/289c0d8489d02c1bc5cb0b091455fe03cd9384bd", "html_url": "https://github.com/rust-lang/rust/commit/289c0d8489d02c1bc5cb0b091455fe03cd9384bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/289c0d8489d02c1bc5cb0b091455fe03cd9384bd/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3478d7c3607ffbba629af2265c01002771e48c18", "url": "https://api.github.com/repos/rust-lang/rust/commits/3478d7c3607ffbba629af2265c01002771e48c18", "html_url": "https://github.com/rust-lang/rust/commit/3478d7c3607ffbba629af2265c01002771e48c18"}], "stats": {"total": 26, "additions": 20, "deletions": 6}, "files": [{"sha": "6fe9f64be32e8257298b5d327557e8b738bc5db9", "filename": "compiler/rustc_mir/src/transform/add_retag.rs", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/289c0d8489d02c1bc5cb0b091455fe03cd9384bd/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fadd_retag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/289c0d8489d02c1bc5cb0b091455fe03cd9384bd/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fadd_retag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fadd_retag.rs?ref=289c0d8489d02c1bc5cb0b091455fe03cd9384bd", "patch": "@@ -73,6 +73,19 @@ impl<'tcx> MirPass<'tcx> for AddRetag {\n             // a temporary and retag on that.\n             is_stable(place.as_ref()) && may_be_reference(place.ty(&*local_decls, tcx).ty)\n         };\n+        let place_base_raw = |place: &Place<'tcx>| {\n+            // If this is a `Deref`, get the type of what we are deref'ing.\n+            let deref_base =\n+                place.projection.iter().rposition(|p| matches!(p, ProjectionElem::Deref));\n+            if let Some(deref_base) = deref_base {\n+                let base_proj = &place.projection[..deref_base];\n+                let ty = Place::ty_from(place.local, base_proj, &*local_decls, tcx).ty;\n+                ty.is_unsafe_ptr()\n+            } else {\n+                // Not a deref, and thus not raw.\n+                false\n+            }\n+        };\n \n         // PART 1\n         // Retag arguments at the beginning of the start block.\n@@ -136,13 +149,14 @@ impl<'tcx> MirPass<'tcx> for AddRetag {\n             // iterate backwards using indices.\n             for i in (0..block_data.statements.len()).rev() {\n                 let (retag_kind, place) = match block_data.statements[i].kind {\n-                    // Retag-as-raw after escaping to a raw pointer.\n-                    StatementKind::Assign(box (place, Rvalue::AddressOf(..))) => {\n-                        (RetagKind::Raw, place)\n+                    // Retag-as-raw after escaping to a raw pointer, if the referent\n+                    // is not already a raw pointer.\n+                    StatementKind::Assign(box (lplace, Rvalue::AddressOf(_, ref rplace)))\n+                        if !place_base_raw(rplace) =>\n+                    {\n+                        (RetagKind::Raw, lplace)\n                     }\n-                    // Assignments of reference or ptr type are the ones where we may have\n-                    // to update tags.  This includes `x = &[mut] ...` and hence\n-                    // we also retag after taking a reference!\n+                    // Retag after assignments of reference type.\n                     StatementKind::Assign(box (ref place, ref rvalue)) if needs_retag(place) => {\n                         let kind = match rvalue {\n                             Rvalue::Ref(_, borrow_kind, _)"}]}