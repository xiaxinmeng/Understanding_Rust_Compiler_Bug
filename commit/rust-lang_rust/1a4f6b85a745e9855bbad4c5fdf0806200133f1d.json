{"sha": "1a4f6b85a745e9855bbad4c5fdf0806200133f1d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhNGY2Yjg1YTc0NWU5ODU1YmJhZDRjNWZkZjA4MDYyMDAxMzNmMWQ=", "commit": {"author": {"name": "Ohad Ravid", "email": "ohad.rv@gmail.com", "date": "2019-12-25T08:26:25Z"}, "committer": {"name": "Ohad Ravid", "email": "ohad.rv@gmail.com", "date": "2019-12-31T11:13:35Z"}, "message": "Change wording for lifetime suggestion for opaque types from `constraint` to `bound`", "tree": {"sha": "6a2649936b6a8049bd3edc212cf9c119be3fbccc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a2649936b6a8049bd3edc212cf9c119be3fbccc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a4f6b85a745e9855bbad4c5fdf0806200133f1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a4f6b85a745e9855bbad4c5fdf0806200133f1d", "html_url": "https://github.com/rust-lang/rust/commit/1a4f6b85a745e9855bbad4c5fdf0806200133f1d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a4f6b85a745e9855bbad4c5fdf0806200133f1d/comments", "author": {"login": "ohadravid", "id": 2358365, "node_id": "MDQ6VXNlcjIzNTgzNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/2358365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ohadravid", "html_url": "https://github.com/ohadravid", "followers_url": "https://api.github.com/users/ohadravid/followers", "following_url": "https://api.github.com/users/ohadravid/following{/other_user}", "gists_url": "https://api.github.com/users/ohadravid/gists{/gist_id}", "starred_url": "https://api.github.com/users/ohadravid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ohadravid/subscriptions", "organizations_url": "https://api.github.com/users/ohadravid/orgs", "repos_url": "https://api.github.com/users/ohadravid/repos", "events_url": "https://api.github.com/users/ohadravid/events{/privacy}", "received_events_url": "https://api.github.com/users/ohadravid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ohadravid", "id": 2358365, "node_id": "MDQ6VXNlcjIzNTgzNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/2358365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ohadravid", "html_url": "https://github.com/ohadravid", "followers_url": "https://api.github.com/users/ohadravid/followers", "following_url": "https://api.github.com/users/ohadravid/following{/other_user}", "gists_url": "https://api.github.com/users/ohadravid/gists{/gist_id}", "starred_url": "https://api.github.com/users/ohadravid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ohadravid/subscriptions", "organizations_url": "https://api.github.com/users/ohadravid/orgs", "repos_url": "https://api.github.com/users/ohadravid/repos", "events_url": "https://api.github.com/users/ohadravid/events{/privacy}", "received_events_url": "https://api.github.com/users/ohadravid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4fbb55c9c1eba39eca81b0d73fe9edf5e3869fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4fbb55c9c1eba39eca81b0d73fe9edf5e3869fd", "html_url": "https://github.com/rust-lang/rust/commit/d4fbb55c9c1eba39eca81b0d73fe9edf5e3869fd"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "69ebbe1fd367977b5ce6c05bda047c0109ea3b95", "filename": "src/librustc/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a4f6b85a745e9855bbad4c5fdf0806200133f1d/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a4f6b85a745e9855bbad4c5fdf0806200133f1d/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=1a4f6b85a745e9855bbad4c5fdf0806200133f1d", "patch": "@@ -54,7 +54,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                             err.span_suggestion(\n                                 fn_return_span,\n                                 &format!(\n-                                    \"you can add a constraint to the return type to make it last \\\n+                                    \"you can add a bound to the return type to make it last \\\n                                  less than `'static` and match {}\",\n                                     lifetime,\n                                 ),"}, {"sha": "e66708b173152590237f03e27b5f03a722c2a23f", "filename": "src/librustc_mir/borrow_check/diagnostics/explain_borrow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a4f6b85a745e9855bbad4c5fdf0806200133f1d/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fexplain_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a4f6b85a745e9855bbad4c5fdf0806200133f1d/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fexplain_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fexplain_borrow.rs?ref=1a4f6b85a745e9855bbad4c5fdf0806200133f1d", "patch": "@@ -238,7 +238,7 @@ impl BorrowExplanation {\n                     err.span_suggestion(\n                         span,\n                         &format!(\n-                            \"you can add a constraint to the {}to make it last less than \\\n+                            \"you can add a bound to the {}to make it last less than \\\n                              `'static` and match `{}`\",\n                             category.description(),\n                             region_name,"}, {"sha": "a30b952bd0adb942dbc712d0aa789c29bda82342", "filename": "src/librustc_mir/borrow_check/diagnostics/region_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a4f6b85a745e9855bbad4c5fdf0806200133f1d/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a4f6b85a745e9855bbad4c5fdf0806200133f1d/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_errors.rs?ref=1a4f6b85a745e9855bbad4c5fdf0806200133f1d", "patch": "@@ -840,7 +840,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                             span,\n                             &format!(\n                                 \"to allow this `impl Trait` to capture borrowed data with lifetime \\\n-                                 `{}`, add `{}` as a constraint\",\n+                                 `{}`, add `{}` as a bound\",\n                                 fr_name, suggestable_fr_name,\n                             ),\n                             format!(\"{} + {}\", snippet, suggestable_fr_name),"}, {"sha": "83d0f87015bf9478756573f4f34ba33a5b1870dd", "filename": "src/test/ui/impl-trait/does-not-live-long-enough.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a4f6b85a745e9855bbad4c5fdf0806200133f1d/src%2Ftest%2Fui%2Fimpl-trait%2Fdoes-not-live-long-enough.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a4f6b85a745e9855bbad4c5fdf0806200133f1d/src%2Ftest%2Fui%2Fimpl-trait%2Fdoes-not-live-long-enough.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fdoes-not-live-long-enough.stderr?ref=1a4f6b85a745e9855bbad4c5fdf0806200133f1d", "patch": "@@ -11,7 +11,7 @@ LL |\n LL |     }\n    |     - `prefix` dropped here while still borrowed\n    |\n-help: you can add a constraint to the opaque type to make it last less than `'static` and match `'a`\n+help: you can add a bound to the opaque type to make it last less than `'static` and match `'a`\n    |\n LL |     fn started_with<'a>(&'a self, prefix: &'a str) -> impl Iterator<Item=&'a str> + 'a {\n    |                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "4c38f0a8a914d507a2496f91b7d422f3fa103e43", "filename": "src/test/ui/impl-trait/multiple-lifetimes/error-handling.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a4f6b85a745e9855bbad4c5fdf0806200133f1d/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a4f6b85a745e9855bbad4c5fdf0806200133f1d/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.stderr?ref=1a4f6b85a745e9855bbad4c5fdf0806200133f1d", "patch": "@@ -5,7 +5,7 @@ LL | fn foo<'a, 'b, 'c>(x: &'static i32, mut y: &'a i32) -> E<'b, 'c> {\n    |        -- lifetime `'a` defined here                   ^^^^^^^^^ opaque type requires that `'a` must outlive `'static`\n    |\n    = help: consider replacing `'a` with `'static`\n-help: to allow this `impl Trait` to capture borrowed data with lifetime `'a`, add `'a` as a constraint\n+help: to allow this `impl Trait` to capture borrowed data with lifetime `'a`, add `'a` as a bound\n    |\n LL | type E<'a, 'b> = impl Sized; + 'a\n    |"}, {"sha": "1806d2607a3ac8c288ffd7874318b91e57897c55", "filename": "src/test/ui/impl-trait/must_outlive_least_region_or_bound.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a4f6b85a745e9855bbad4c5fdf0806200133f1d/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a4f6b85a745e9855bbad4c5fdf0806200133f1d/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.nll.stderr?ref=1a4f6b85a745e9855bbad4c5fdf0806200133f1d", "patch": "@@ -6,7 +6,7 @@ LL | fn elided(x: &i32) -> impl Copy { x }\n    |              |\n    |              let's call the lifetime of this reference `'1`\n    |\n-help: to allow this `impl Trait` to capture borrowed data with lifetime `'1`, add `'_` as a constraint\n+help: to allow this `impl Trait` to capture borrowed data with lifetime `'1`, add `'_` as a bound\n    |\n LL | fn elided(x: &i32) -> impl Copy + '_ { x }\n    |                       ^^^^^^^^^^^^^^\n@@ -20,7 +20,7 @@ LL | fn explicit<'a>(x: &'a i32) -> impl Copy { x }\n    |             lifetime `'a` defined here\n    |\n    = help: consider replacing `'a` with `'static`\n-help: to allow this `impl Trait` to capture borrowed data with lifetime `'a`, add `'a` as a constraint\n+help: to allow this `impl Trait` to capture borrowed data with lifetime `'a`, add `'a` as a bound\n    |\n LL | fn explicit<'a>(x: &'a i32) -> impl Copy + 'a { x }\n    |                                ^^^^^^^^^^^^^^"}, {"sha": "7f92e709af5563931ff5e32afa48b381e1aaa178", "filename": "src/test/ui/impl-trait/must_outlive_least_region_or_bound.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1a4f6b85a745e9855bbad4c5fdf0806200133f1d/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a4f6b85a745e9855bbad4c5fdf0806200133f1d/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr?ref=1a4f6b85a745e9855bbad4c5fdf0806200133f1d", "patch": "@@ -11,7 +11,7 @@ note: ...can't outlive the anonymous lifetime #1 defined on the function body at\n    |\n LL | fn elided(x: &i32) -> impl Copy { x }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-help: you can add a constraint to the return type to make it last less than `'static` and match the anonymous lifetime #1 defined on the function body at 3:1\n+help: you can add a bound to the return type to make it last less than `'static` and match the anonymous lifetime #1 defined on the function body at 3:1\n    |\n LL | fn elided(x: &i32) -> impl Copy + '_ { x }\n    |                       ^^^^^^^^^^^^^^\n@@ -29,7 +29,7 @@ note: ...can't outlive the lifetime `'a` as defined on the function body at 6:13\n    |\n LL | fn explicit<'a>(x: &'a i32) -> impl Copy { x }\n    |             ^^\n-help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime `'a` as defined on the function body at 6:13\n+help: you can add a bound to the return type to make it last less than `'static` and match the lifetime `'a` as defined on the function body at 6:13\n    |\n LL | fn explicit<'a>(x: &'a i32) -> impl Copy + 'a { x }\n    |                                ^^^^^^^^^^^^^^\n@@ -47,7 +47,7 @@ note: ...can't outlive the lifetime `'a` as defined on the function body at 12:1\n    |\n LL | fn with_bound<'a>(x: &'a i32) -> impl LifetimeTrait<'a> + 'static { x }\n    |               ^^\n-help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime `'a` as defined on the function body at 12:15\n+help: you can add a bound to the return type to make it last less than `'static` and match the lifetime `'a` as defined on the function body at 12:15\n    |\n LL | fn with_bound<'a>(x: &'a i32) -> impl LifetimeTrait<'a> + 'static + 'a { x }\n    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "123ea6af6b019f6e5f171cf54fe57f575a805bac", "filename": "src/test/ui/impl-trait/static-return-lifetime-infered.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a4f6b85a745e9855bbad4c5fdf0806200133f1d/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a4f6b85a745e9855bbad4c5fdf0806200133f1d/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.nll.stderr?ref=1a4f6b85a745e9855bbad4c5fdf0806200133f1d", "patch": "@@ -6,7 +6,7 @@ LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> {\n    |                         |\n    |                         let's call the lifetime of this reference `'1`\n    |\n-help: to allow this `impl Trait` to capture borrowed data with lifetime `'1`, add `'_` as a constraint\n+help: to allow this `impl Trait` to capture borrowed data with lifetime `'1`, add `'_` as a bound\n    |\n LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> + '_ {\n    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -20,7 +20,7 @@ LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> {\n    |                    lifetime `'a` defined here\n    |\n    = help: consider replacing `'a` with `'static`\n-help: to allow this `impl Trait` to capture borrowed data with lifetime `'a`, add `'a` as a constraint\n+help: to allow this `impl Trait` to capture borrowed data with lifetime `'a`, add `'a` as a bound\n    |\n LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> + 'a {\n    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "e550be19174741f2d918b1e27d05ae712afef225", "filename": "src/test/ui/impl-trait/static-return-lifetime-infered.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a4f6b85a745e9855bbad4c5fdf0806200133f1d/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a4f6b85a745e9855bbad4c5fdf0806200133f1d/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.stderr?ref=1a4f6b85a745e9855bbad4c5fdf0806200133f1d", "patch": "@@ -15,7 +15,7 @@ LL | /     fn iter_values_anon(&self) -> impl Iterator<Item=u32> {\n LL | |         self.x.iter().map(|a| a.0)\n LL | |     }\n    | |_____^\n-help: you can add a constraint to the return type to make it last less than `'static` and match the anonymous lifetime #1 defined on the method body at 6:5\n+help: you can add a bound to the return type to make it last less than `'static` and match the anonymous lifetime #1 defined on the method body at 6:5\n    |\n LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> + '_ {\n    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -35,7 +35,7 @@ note: ...can't outlive the lifetime `'a` as defined on the method body at 10:20\n    |\n LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> {\n    |                    ^^\n-help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime `'a` as defined on the method body at 10:20\n+help: you can add a bound to the return type to make it last less than `'static` and match the lifetime `'a` as defined on the method body at 10:20\n    |\n LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> + 'a {\n    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "f2e556c63cbf3774bcfed5881f6b4114a0e844dd", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_impl_trait-async.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a4f6b85a745e9855bbad4c5fdf0806200133f1d/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a4f6b85a745e9855bbad4c5fdf0806200133f1d/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.nll.stderr?ref=1a4f6b85a745e9855bbad4c5fdf0806200133f1d", "patch": "@@ -6,7 +6,7 @@ LL |     async fn f(self: Pin<&Self>) -> impl Clone { self }\n    |                          |\n    |                          let's call the lifetime of this reference `'1`\n    |\n-help: to allow this `impl Trait` to capture borrowed data with lifetime `'1`, add `'_` as a constraint\n+help: to allow this `impl Trait` to capture borrowed data with lifetime `'1`, add `'_` as a bound\n    |\n LL |     async fn f(self: Pin<&Self>) -> impl Clone + '_ { self }\n    |                                     ^^^^^^^^^^^^^^^"}, {"sha": "b76966e8693f2097fd7757a6ee2f76267e9cbc91", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_impl_trait.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a4f6b85a745e9855bbad4c5fdf0806200133f1d/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a4f6b85a745e9855bbad4c5fdf0806200133f1d/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.nll.stderr?ref=1a4f6b85a745e9855bbad4c5fdf0806200133f1d", "patch": "@@ -6,7 +6,7 @@ LL |     fn f(self: Pin<&Self>) -> impl Clone { self }\n    |                    |\n    |                    let's call the lifetime of this reference `'1`\n    |\n-help: to allow this `impl Trait` to capture borrowed data with lifetime `'1`, add `'_` as a constraint\n+help: to allow this `impl Trait` to capture borrowed data with lifetime `'1`, add `'_` as a bound\n    |\n LL |     fn f(self: Pin<&Self>) -> impl Clone + '_ { self }\n    |                               ^^^^^^^^^^^^^^^"}, {"sha": "9f5414995151b703556727d9ba78df7c05fae8f6", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_impl_trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a4f6b85a745e9855bbad4c5fdf0806200133f1d/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a4f6b85a745e9855bbad4c5fdf0806200133f1d/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.stderr?ref=1a4f6b85a745e9855bbad4c5fdf0806200133f1d", "patch": "@@ -11,7 +11,7 @@ note: ...can't outlive the anonymous lifetime #1 defined on the method body at 8\n    |\n LL |     fn f(self: Pin<&Self>) -> impl Clone { self }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-help: you can add a constraint to the return type to make it last less than `'static` and match the anonymous lifetime #1 defined on the method body at 8:5\n+help: you can add a bound to the return type to make it last less than `'static` and match the anonymous lifetime #1 defined on the method body at 8:5\n    |\n LL |     fn f(self: Pin<&Self>) -> impl Clone + '_ { self }\n    |                               ^^^^^^^^^^^^^^^"}]}