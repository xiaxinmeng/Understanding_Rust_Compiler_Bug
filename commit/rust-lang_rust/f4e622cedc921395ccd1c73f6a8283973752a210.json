{"sha": "f4e622cedc921395ccd1c73f6a8283973752a210", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0ZTYyMmNlZGM5MjEzOTVjY2QxYzczZjZhODI4Mzk3Mzc1MmEyMTA=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-08-09T08:46:56Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-08-09T08:46:56Z"}, "message": "Add basic ssa analyzer", "tree": {"sha": "403b6f03979fe44a52d2f89696a77fe660982692", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/403b6f03979fe44a52d2f89696a77fe660982692"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4e622cedc921395ccd1c73f6a8283973752a210", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4e622cedc921395ccd1c73f6a8283973752a210", "html_url": "https://github.com/rust-lang/rust/commit/f4e622cedc921395ccd1c73f6a8283973752a210", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4e622cedc921395ccd1c73f6a8283973752a210/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72fa53bac39e2e29e3990ae031c34c23d077e7c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/72fa53bac39e2e29e3990ae031c34c23d077e7c6", "html_url": "https://github.com/rust-lang/rust/commit/72fa53bac39e2e29e3990ae031c34c23d077e7c6"}], "stats": {"total": 98, "additions": 86, "deletions": 12}, "files": [{"sha": "8f5ee20d25447cde028f329ee6f56e29c0b9c15b", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f4e622cedc921395ccd1c73f6a8283973752a210/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/f4e622cedc921395ccd1c73f6a8283973752a210/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=f4e622cedc921395ccd1c73f6a8283973752a210", "patch": "@@ -409,6 +409,7 @@ name = \"rustc_codegen_cranelift\"\n version = \"0.1.0\"\n dependencies = [\n  \"ar 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"bitflags 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"cranelift 0.18.1 (git+https://github.com/CraneStation/cranelift.git)\",\n  \"cranelift-faerie 0.18.1 (git+https://github.com/CraneStation/cranelift.git)\",\n  \"cranelift-module 0.18.1 (git+https://github.com/CraneStation/cranelift.git)\","}, {"sha": "f15acbc16d90d37e1d1876ff6a5b8209c2f98f4a", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f4e622cedc921395ccd1c73f6a8283973752a210/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f4e622cedc921395ccd1c73f6a8283973752a210/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=f4e622cedc921395ccd1c73f6a8283973752a210", "patch": "@@ -23,3 +23,4 @@ target-lexicon = \"0.0.3\"\n #goblin = \"0.0.17\"\n faerie = \"0.4.4\"\n ar = \"0.6.0\"\n+bitflags = \"1.0.3\""}, {"sha": "0680ccb6e586d4c7931e4e98b41f5428e0d3448a", "filename": "src/abi.rs", "status": "modified", "additions": 28, "deletions": 11, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/f4e622cedc921395ccd1c73f6a8283973752a210/src%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4e622cedc921395ccd1c73f6a8283973752a210/src%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi.rs?ref=f4e622cedc921395ccd1c73f6a8283973752a210", "patch": "@@ -186,17 +186,15 @@ impl<'a, 'tcx: 'a> FunctionCx<'a, 'tcx> {\n }\n \n pub fn codegen_fn_prelude<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx>, start_ebb: Ebb) {\n+    let ssa_analyzed = crate::analyze::analyze(fx);\n+    fx.tcx.sess.warn(&format!(\"ssa {:?}\", ssa_analyzed));\n+\n     match fx.self_sig().abi {\n         Abi::Rust | Abi::RustCall => {}\n         _ => unimplemented!(\"declared function with non \\\"rust\\\" or \\\"rust-call\\\" abi\"),\n     }\n \n     let ret_param = fx.bcx.append_ebb_param(start_ebb, types::I64);\n-    let _ = fx.bcx.create_stack_slot(StackSlotData {\n-        kind: StackSlotKind::ExplicitSlot,\n-        size: 0,\n-        offset: None,\n-    }); // Dummy stack slot for debugging\n \n     enum ArgKind {\n         Normal(Value),\n@@ -237,6 +235,17 @@ pub fn codegen_fn_prelude<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx>, start_ebb\n \n     for (local, arg_kind, ty) in func_params {\n         let layout = fx.layout_of(ty);\n+\n+        if let ArgKind::Normal(ebb_param) = arg_kind {\n+            if !ssa_analyzed.get(&local).unwrap().contains(crate::analyze::Flags::NOT_SSA) {\n+                let var = Variable(local);\n+                fx.bcx.declare_var(var, fx.cton_type(ty).unwrap());\n+                fx.bcx.def_var(var, ebb_param);\n+                fx.local_map.insert(local, CPlace::Var(var, layout));\n+                continue;\n+            }\n+        }\n+\n         let stack_slot = fx.bcx.create_stack_slot(StackSlotData {\n             kind: StackSlotKind::ExplicitSlot,\n             size: layout.size.bytes() as u32,\n@@ -270,12 +279,20 @@ pub fn codegen_fn_prelude<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx>, start_ebb\n     for local in fx.mir.vars_and_temps_iter() {\n         let ty = fx.mir.local_decls[local].ty;\n         let layout = fx.layout_of(ty);\n-        let stack_slot = fx.bcx.create_stack_slot(StackSlotData {\n-            kind: StackSlotKind::ExplicitSlot,\n-            size: layout.size.bytes() as u32,\n-            offset: None,\n-        });\n-        let place = CPlace::from_stack_slot(fx, stack_slot, ty);\n+\n+        let place = if ssa_analyzed.get(&local).unwrap().contains(crate::analyze::Flags::NOT_SSA) {\n+            let stack_slot = fx.bcx.create_stack_slot(StackSlotData {\n+                kind: StackSlotKind::ExplicitSlot,\n+                size: layout.size.bytes() as u32,\n+                offset: None,\n+            });\n+            CPlace::from_stack_slot(fx, stack_slot, ty)\n+        } else {\n+            let var = Variable(local);\n+            fx.bcx.declare_var(var, fx.cton_type(ty).unwrap());\n+            CPlace::Var(var, layout)\n+        };\n+\n         fx.local_map.insert(local, place);\n     }\n }"}, {"sha": "646bc69df3cf1eea22bed1f0bdb1bc1da671c7cb", "filename": "src/analyze.rs", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/f4e622cedc921395ccd1c73f6a8283973752a210/src%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4e622cedc921395ccd1c73f6a8283973752a210/src%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fanalyze.rs?ref=f4e622cedc921395ccd1c73f6a8283973752a210", "patch": "@@ -0,0 +1,52 @@\n+use crate::prelude::*;\n+\n+use rustc::mir::{StatementKind::*};\n+\n+bitflags! {\n+    pub struct Flags: u8 {\n+        const NOT_SSA = 0b00000001;\n+    }\n+}\n+\n+pub fn analyze<'a, 'tcx: 'a>(fx: &FunctionCx<'a, 'tcx>) -> HashMap<Local, Flags> {\n+    let mut flag_map = HashMap::new();\n+\n+    for local in fx.mir.local_decls.indices() {\n+        flag_map.insert(local, Flags::empty());\n+    }\n+\n+    not_ssa(&mut flag_map, RETURN_PLACE);\n+\n+    for (local, local_decl) in fx.mir.local_decls.iter_enumerated() {\n+        if fx.cton_type(local_decl.ty).is_none() {\n+            not_ssa(&mut flag_map, local);\n+        }\n+    }\n+\n+    for bb in fx.mir.basic_blocks().iter() {\n+        for stmt in bb.statements.iter() {\n+            match &stmt.kind {\n+                Assign(_, Rvalue::Ref(_, _, place)) => analyze_non_ssa_place(&mut flag_map, place),\n+                _ => {}\n+            }\n+        }\n+\n+        match &bb.terminator().kind {\n+            TerminatorKind::Call { destination: Some((place, _)), .. } => analyze_non_ssa_place(&mut flag_map, place),\n+            _ => {}\n+        }\n+    }\n+\n+    flag_map\n+}\n+\n+fn analyze_non_ssa_place(flag_map: &mut HashMap<Local, Flags>, place: &Place) {\n+    match place {\n+        Place::Local(local) => not_ssa(flag_map, local),\n+        _ => {}\n+    }\n+}\n+\n+fn not_ssa<L: ::std::borrow::Borrow<Local>>(flag_map: &mut HashMap<Local, Flags>, local: L) {\n+    *flag_map.get_mut(local.borrow()).unwrap() |= Flags::NOT_SSA;\n+}\n\\ No newline at end of file"}, {"sha": "033300455c141464e976046a229b25c3ae27412d", "filename": "src/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4e622cedc921395ccd1c73f6a8283973752a210/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4e622cedc921395ccd1c73f6a8283973752a210/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=f4e622cedc921395ccd1c73f6a8283973752a210", "patch": "@@ -9,7 +9,7 @@ use crate::prelude::*;\n pub type CurrentBackend = ::cranelift_simplejit::SimpleJITBackend;\n \n #[derive(Debug, Copy, Clone, Eq, PartialEq)]\n-pub struct Variable(Local);\n+pub struct Variable(pub Local);\n \n impl EntityRef for Variable {\n     fn new(u: usize) -> Self {"}, {"sha": "b55497394a627c5ae84414ef04280c287f1aebc8", "filename": "src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f4e622cedc921395ccd1c73f6a8283973752a210/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4e622cedc921395ccd1c73f6a8283973752a210/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=f4e622cedc921395ccd1c73f6a8283973752a210", "patch": "@@ -12,6 +12,8 @@ extern crate rustc_target;\n extern crate rustc_data_structures;\n \n extern crate ar;\n+#[macro_use]\n+extern crate bitflags;\n extern crate faerie;\n //extern crate goblin;\n extern crate cranelift;\n@@ -49,6 +51,7 @@ macro_rules! unimpl {\n }\n \n mod abi;\n+mod analyze;\n mod base;\n mod common;\n mod constant;"}]}