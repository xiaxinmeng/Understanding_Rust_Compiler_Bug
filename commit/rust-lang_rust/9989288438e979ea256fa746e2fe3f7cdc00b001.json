{"sha": "9989288438e979ea256fa746e2fe3f7cdc00b001", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5ODkyODg0MzhlOTc5ZWEyNTZmYTc0NmUyZmUzZjdjZGMwMGIwMDE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-01-05T10:36:41Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-01-05T12:11:48Z"}, "message": "Permit bindings of (and references to) associated types defined in supertraits.", "tree": {"sha": "54038e4d90b35275b446f95e58786909538e2733", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54038e4d90b35275b446f95e58786909538e2733"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9989288438e979ea256fa746e2fe3f7cdc00b001", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9989288438e979ea256fa746e2fe3f7cdc00b001", "html_url": "https://github.com/rust-lang/rust/commit/9989288438e979ea256fa746e2fe3f7cdc00b001", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9989288438e979ea256fa746e2fe3f7cdc00b001/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ccab193afb54febda3777f67f56d330b6ae8a2c", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ccab193afb54febda3777f67f56d330b6ae8a2c", "html_url": "https://github.com/rust-lang/rust/commit/2ccab193afb54febda3777f67f56d330b6ae8a2c"}], "stats": {"total": 237, "additions": 224, "deletions": 13}, "files": [{"sha": "e216338b1e3a6f5f3e85cc22f6103b5b601a6e26", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 47, "deletions": 13, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/9989288438e979ea256fa746e2fe3f7cdc00b001/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9989288438e979ea256fa746e2fe3f7cdc00b001/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=9989288438e979ea256fa746e2fe3f7cdc00b001", "patch": "@@ -53,7 +53,8 @@ use middle::def;\n use middle::resolve_lifetime as rl;\n use middle::subst::{FnSpace, TypeSpace, SelfSpace, Subst, Substs};\n use middle::subst::{VecPerParamSpace};\n-use middle::ty::{self, RegionEscape, Ty};\n+use middle::traits;\n+use middle::ty::{self, RegionEscape, ToPolyTraitRef, Ty};\n use rscope::{self, UnelidableRscope, RegionScope, SpecificRscope,\n              ShiftedRscope, BindingRscope};\n use TypeAndSubsts;\n@@ -637,7 +638,7 @@ fn ast_path_to_trait_ref<'a,'tcx>(\n     trait_ref\n }\n \n-pub fn ast_type_binding_to_projection_predicate<'tcx>(\n+fn ast_type_binding_to_projection_predicate<'tcx>(\n     this: &AstConv<'tcx>,\n     trait_ref: Rc<ty::TraitRef<'tcx>>,\n     binding: &ConvertedBinding<'tcx>)\n@@ -659,20 +660,56 @@ pub fn ast_type_binding_to_projection_predicate<'tcx>(\n     //\n     // We want to produce `<B as SuperTrait<int>>::T == foo`.\n \n-    // FIXME(#19541): supertrait upcasting not actually impl'd :)\n+    // Simple case: X is defined in the current trait.\n+    if trait_defines_associated_type_named(this, trait_ref.def_id, binding.item_name) {\n+        return Ok(ty::ProjectionPredicate {\n+            projection_ty: ty::ProjectionTy {\n+                trait_ref: trait_ref,\n+                item_name: binding.item_name,\n+            },\n+            ty: binding.ty,\n+        });\n+    }\n+\n+    // Otherwise, we have to walk through the supertraits to find those that do.\n+    let mut candidates: Vec<_> =\n+        traits::supertraits(this.tcx(), trait_ref.to_poly_trait_ref())\n+        .filter(|r| trait_defines_associated_type_named(this, r.def_id(), binding.item_name))\n+        .collect();\n+\n+    if candidates.len() > 1 {\n+        this.tcx().sess.span_err(\n+            binding.span,\n+            format!(\"ambiguous associated type: `{}` defined in multiple supertraits `{}`\",\n+                    token::get_name(binding.item_name),\n+                    candidates.user_string(this.tcx())).as_slice());\n+        return Err(ErrorReported);\n+    }\n+\n+    let candidate = match candidates.pop() {\n+        Some(c) => c,\n+        None => {\n+            this.tcx().sess.span_err(\n+                binding.span,\n+                format!(\"no associated type `{}` defined in `{}`\",\n+                        token::get_name(binding.item_name),\n+                        trait_ref.user_string(this.tcx())).as_slice());\n+            return Err(ErrorReported);\n+        }\n+    };\n \n-    if !trait_defines_associated_type_named(this, trait_ref.def_id, binding.item_name) {\n+    if ty::binds_late_bound_regions(this.tcx(), &candidate) {\n         this.tcx().sess.span_err(\n             binding.span,\n-            format!(\"no associated type `{}` defined in `{}`\",\n+            format!(\"associated type `{}` defined in higher-ranked supertrait `{}`\",\n                     token::get_name(binding.item_name),\n-                    trait_ref.user_string(this.tcx())).as_slice());\n+                    candidate.user_string(this.tcx())).as_slice());\n         return Err(ErrorReported);\n     }\n \n     Ok(ty::ProjectionPredicate {\n         projection_ty: ty::ProjectionTy {\n-            trait_ref: trait_ref,\n+            trait_ref: candidate.0,\n             item_name: binding.item_name,\n         },\n         ty: binding.ty,\n@@ -899,20 +936,17 @@ fn associated_path_def_to_ty<'tcx>(this: &AstConv<'tcx>,\n {\n     let tcx = this.tcx();\n     let ty_param_def_id = provenance.def_id();\n+\n     let mut suitable_bounds: Vec<_>;\n     let ty_param_name: ast::Name;\n     { // contain scope of refcell:\n         let ty_param_defs = tcx.ty_param_defs.borrow();\n         let ty_param_def = &ty_param_defs[ty_param_def_id.node];\n         ty_param_name = ty_param_def.name;\n \n-        // FIXME(#19541): we should consider associated types in\n-        // super-traits. Probably by elaborating the bounds.\n-\n+        // FIXME(#20300) -- search where clauses, not bounds\n         suitable_bounds =\n-            ty_param_def.bounds.trait_bounds // FIXME(#20300) -- search where clauses, not bounds\n-            .iter()\n-            .cloned()\n+            traits::transitive_bounds(tcx, ty_param_def.bounds.trait_bounds.as_slice())\n             .filter(|b| trait_defines_associated_type_named(this, b.def_id(), assoc_name))\n             .collect();\n     }"}, {"sha": "553e36f0e62dcfe15a7b903ee48dc77ec7d08d83", "filename": "src/test/compile-fail/associated-type-projection-from-multiple-supertraits.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/9989288438e979ea256fa746e2fe3f7cdc00b001/src%2Ftest%2Fcompile-fail%2Fassociated-type-projection-from-multiple-supertraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9989288438e979ea256fa746e2fe3f7cdc00b001/src%2Ftest%2Fcompile-fail%2Fassociated-type-projection-from-multiple-supertraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-type-projection-from-multiple-supertraits.rs?ref=9989288438e979ea256fa746e2fe3f7cdc00b001", "patch": "@@ -0,0 +1,41 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test equality constraints in a where clause where the type being\n+// equated appears in a supertrait.\n+\n+#![feature(associated_types)]\n+\n+pub trait Vehicle {\n+    type Color;\n+\n+    fn go(&self) {  }\n+}\n+\n+pub trait Box {\n+    type Color;\n+\n+    fn mail(&self) {  }\n+}\n+\n+pub trait BoxCar : Box + Vehicle {\n+}\n+\n+fn dent<C:BoxCar>(c: C, color: C::Color) {\n+    //~^ ERROR ambiguous associated type `Color` in bounds of `C`\n+    //~| NOTE could derive from `Vehicle`\n+    //~| NOTE could derive from `Box`\n+}\n+\n+fn dent_object<COLOR>(c: BoxCar<Color=COLOR>) {\n+    //~^ ERROR ambiguous associated type\n+}\n+\n+pub fn main() { }"}, {"sha": "01f9bd3541fc58f53315ad95d7e87ecd619afe7f", "filename": "src/test/compile-fail/associated-type-projection-from-supertrait.rs", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/9989288438e979ea256fa746e2fe3f7cdc00b001/src%2Ftest%2Fcompile-fail%2Fassociated-type-projection-from-supertrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9989288438e979ea256fa746e2fe3f7cdc00b001/src%2Ftest%2Fcompile-fail%2Fassociated-type-projection-from-supertrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-type-projection-from-supertrait.rs?ref=9989288438e979ea256fa746e2fe3f7cdc00b001", "patch": "@@ -0,0 +1,56 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test equality constraints in a where clause where the type being\n+// equated appears in a supertrait.\n+\n+#![feature(associated_types)]\n+\n+pub trait Vehicle {\n+    type Color;\n+\n+    fn go(&self) {  }\n+}\n+\n+pub trait Car : Vehicle {\n+    fn honk(&self) { }\n+    fn chip_paint(&self, c: Self::Color) { }\n+}\n+\n+///////////////////////////////////////////////////////////////////////////\n+\n+struct Black;\n+struct ModelT;\n+impl Vehicle for ModelT { type Color = Black; }\n+impl Car for ModelT { }\n+\n+///////////////////////////////////////////////////////////////////////////\n+\n+struct Blue;\n+struct ModelU;\n+impl Vehicle for ModelU { type Color = Blue; }\n+impl Car for ModelU { }\n+\n+///////////////////////////////////////////////////////////////////////////\n+\n+fn dent<C:Car>(c: C, color: C::Color) { c.chip_paint(color) }\n+fn a() { dent(ModelT, Black); }\n+fn b() { dent(ModelT, Blue); } //~ ERROR type mismatch\n+fn c() { dent(ModelU, Black); } //~ ERROR type mismatch\n+fn d() { dent(ModelU, Blue); }\n+\n+///////////////////////////////////////////////////////////////////////////\n+\n+fn e() { ModelT.chip_paint(Black); }\n+fn f() { ModelT.chip_paint(Blue); } //~ ERROR mismatched types\n+fn g() { ModelU.chip_paint(Black); } //~ ERROR mismatched types\n+fn h() { ModelU.chip_paint(Blue); }\n+\n+pub fn main() { }"}, {"sha": "a362529bee8e423f963af38915dd061958ab2985", "filename": "src/test/compile-fail/associated-types-binding-to-type-defined-in-supertrait.rs", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/9989288438e979ea256fa746e2fe3f7cdc00b001/src%2Ftest%2Fcompile-fail%2Fassociated-types-binding-to-type-defined-in-supertrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9989288438e979ea256fa746e2fe3f7cdc00b001/src%2Ftest%2Fcompile-fail%2Fassociated-types-binding-to-type-defined-in-supertrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-binding-to-type-defined-in-supertrait.rs?ref=9989288438e979ea256fa746e2fe3f7cdc00b001", "patch": "@@ -0,0 +1,53 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test equality constraints in a where clause where the type being\n+// equated appears in a supertrait.\n+\n+#![feature(associated_types)]\n+\n+pub trait Vehicle {\n+    type Color;\n+\n+    fn go(&self) {  }\n+}\n+\n+pub trait Car : Vehicle {\n+    fn honk(&self) { }\n+}\n+\n+///////////////////////////////////////////////////////////////////////////\n+\n+struct Black;\n+struct ModelT;\n+impl Vehicle for ModelT { type Color = Black; }\n+impl Car for ModelT { }\n+\n+///////////////////////////////////////////////////////////////////////////\n+\n+struct Blue;\n+struct ModelU;\n+impl Vehicle for ModelU { type Color = Blue; }\n+impl Car for ModelU { }\n+\n+///////////////////////////////////////////////////////////////////////////\n+\n+fn black_car<C:Car<Color=Black>>(c: C) {\n+}\n+\n+fn blue_car<C:Car<Color=Blue>>(c: C) {\n+}\n+\n+fn a() { black_car(ModelT); }\n+fn b() { blue_car(ModelT); } //~ ERROR type mismatch\n+fn c() { black_car(ModelU); } //~ ERROR type mismatch\n+fn d() { blue_car(ModelU); }\n+\n+pub fn main() { }"}, {"sha": "f8258466a7d43d529d534b89e42c0297e67789a3", "filename": "src/test/run-pass/associated-types-iterator-binding.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/9989288438e979ea256fa746e2fe3f7cdc00b001/src%2Ftest%2Frun-pass%2Fassociated-types-iterator-binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9989288438e979ea256fa746e2fe3f7cdc00b001/src%2Ftest%2Frun-pass%2Fassociated-types-iterator-binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-iterator-binding.rs?ref=9989288438e979ea256fa746e2fe3f7cdc00b001", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn pairwise_sub<T:DoubleEndedIterator<Item=int>>(mut t: T) -> int {\n+    let mut result = 0;\n+    loop {\n+        let front = t.next();\n+        let back = t.next_back();\n+        match (front, back) {\n+            (Some(f), Some(b)) => { result += b - f; }\n+            _ => { return result; }\n+        }\n+    }\n+}\n+\n+fn main() {\n+    let v = vec!(1, 2, 3, 4, 5, 6);\n+    let r =pairwise_sub(v.into_iter());\n+    assert_eq!(r, 9);\n+}"}]}