{"sha": "426a4cc930476a557b1e8b3d708a8bec97bad92a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyNmE0Y2M5MzA0NzZhNTU3YjFlOGIzZDcwOGE4YmVjOTdiYWQ5MmE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-21T07:51:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-21T07:51:12Z"}, "message": "Rollup merge of #69934 - andjo403:inlinecost, r=wesleywiser\n\nUpdate the mir inline costs\n\nhandle that when mir is lowered to llvm-ir more code is generated.\nLandingpads generates 10 llvm-ir instructions\nand resume 9 llvm-ir instructions.\n\nr? @wesleywiser", "tree": {"sha": "67199521dcce940cc0423178823600f94b1a61fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/67199521dcce940cc0423178823600f94b1a61fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/426a4cc930476a557b1e8b3d708a8bec97bad92a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJedcdwCRBK7hj4Ov3rIwAAdHIIACT9dUq07SIrwE+B1NpDpwUM\n49kHSYLw3yY8RFWqNJsn/qxn64jEYBeiLRPA29i8F5pB27NGJBsvuJ1oBZLpIRxp\ncRrdT9ZMZCNNEdEMEBxpxI51K6hKpfwEPVuWxBClu8cpoLn17sGRm2szCRoQZ+Vq\n5g7wNxSyRkCk9FfK5k8H2truZg7Ui/d97wIct2qLDteUKac7CwcxYyAHwysUSbpB\nXtI9oki96HgHhEhmVqgOQfUhNR589ImH15igMd3mhqoYpzCgWHbEz+9TvA0l4Ziq\nyM1+NWh4GtStCyt9SyxQEaaEwc8ZAaZg6C4fRVEQJlBamE7hsNygr4NrfYSLHBQ=\n=cCOV\n-----END PGP SIGNATURE-----\n", "payload": "tree 67199521dcce940cc0423178823600f94b1a61fa\nparent 9adfb18def426e32905ec4fbd83339fdc366a07c\nparent afa940b900c2003228ea7f5d9f8d78906d84c135\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1584777072 +0100\ncommitter GitHub <noreply@github.com> 1584777072 +0100\n\nRollup merge of #69934 - andjo403:inlinecost, r=wesleywiser\n\nUpdate the mir inline costs\n\nhandle that when mir is lowered to llvm-ir more code is generated.\nLandingpads generates 10 llvm-ir instructions\nand resume 9 llvm-ir instructions.\n\nr? @wesleywiser\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/426a4cc930476a557b1e8b3d708a8bec97bad92a", "html_url": "https://github.com/rust-lang/rust/commit/426a4cc930476a557b1e8b3d708a8bec97bad92a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/426a4cc930476a557b1e8b3d708a8bec97bad92a/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9adfb18def426e32905ec4fbd83339fdc366a07c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9adfb18def426e32905ec4fbd83339fdc366a07c", "html_url": "https://github.com/rust-lang/rust/commit/9adfb18def426e32905ec4fbd83339fdc366a07c"}, {"sha": "afa940b900c2003228ea7f5d9f8d78906d84c135", "url": "https://api.github.com/repos/rust-lang/rust/commits/afa940b900c2003228ea7f5d9f8d78906d84c135", "html_url": "https://github.com/rust-lang/rust/commit/afa940b900c2003228ea7f5d9f8d78906d84c135"}], "stats": {"total": 19, "additions": 17, "deletions": 2}, "files": [{"sha": "52c7225a850fbb839b83076e27ec2b348515289d", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/426a4cc930476a557b1e8b3d708a8bec97bad92a/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/426a4cc930476a557b1e8b3d708a8bec97bad92a/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=426a4cc930476a557b1e8b3d708a8bec97bad92a", "patch": "@@ -22,6 +22,8 @@ const HINT_THRESHOLD: usize = 100;\n \n const INSTR_COST: usize = 5;\n const CALL_PENALTY: usize = 25;\n+const LANDINGPAD_PENALTY: usize = 50;\n+const RESUME_PENALTY: usize = 45;\n \n const UNKNOWN_SIZE_COST: usize = 10;\n \n@@ -325,6 +327,7 @@ impl Inliner<'tcx> {\n                     if ty.needs_drop(tcx, param_env) {\n                         cost += CALL_PENALTY;\n                         if let Some(unwind) = unwind {\n+                            cost += LANDINGPAD_PENALTY;\n                             work_list.push(unwind);\n                         }\n                     } else {\n@@ -340,7 +343,7 @@ impl Inliner<'tcx> {\n                     threshold = 0;\n                 }\n \n-                TerminatorKind::Call { func: Operand::Constant(ref f), .. } => {\n+                TerminatorKind::Call { func: Operand::Constant(ref f), cleanup, .. } => {\n                     if let ty::FnDef(def_id, _) = f.literal.ty.kind {\n                         // Don't give intrinsics the extra penalty for calls\n                         let f = tcx.fn_sig(def_id);\n@@ -349,9 +352,21 @@ impl Inliner<'tcx> {\n                         } else {\n                             cost += CALL_PENALTY;\n                         }\n+                    } else {\n+                        cost += CALL_PENALTY;\n+                    }\n+                    if cleanup.is_some() {\n+                        cost += LANDINGPAD_PENALTY;\n+                    }\n+                }\n+                TerminatorKind::Assert { cleanup, .. } => {\n+                    cost += CALL_PENALTY;\n+\n+                    if cleanup.is_some() {\n+                        cost += LANDINGPAD_PENALTY;\n                     }\n                 }\n-                TerminatorKind::Assert { .. } => cost += CALL_PENALTY,\n+                TerminatorKind::Resume => cost += RESUME_PENALTY,\n                 _ => cost += INSTR_COST,\n             }\n "}]}