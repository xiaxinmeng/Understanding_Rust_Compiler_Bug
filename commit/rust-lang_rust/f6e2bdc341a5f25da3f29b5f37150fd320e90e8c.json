{"sha": "f6e2bdc341a5f25da3f29b5f37150fd320e90e8c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2ZTJiZGMzNDFhNWYyNWRhM2YyOWI1ZjM3MTUwZmQzMjBlOTBlOGM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-04T03:31:44Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-23T12:41:55Z"}, "message": "extract is_certainly_not_a_block", "tree": {"sha": "0fc63293d5aa2d323117a3bf1beeca22b0a15bbe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0fc63293d5aa2d323117a3bf1beeca22b0a15bbe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f6e2bdc341a5f25da3f29b5f37150fd320e90e8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f6e2bdc341a5f25da3f29b5f37150fd320e90e8c", "html_url": "https://github.com/rust-lang/rust/commit/f6e2bdc341a5f25da3f29b5f37150fd320e90e8c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f6e2bdc341a5f25da3f29b5f37150fd320e90e8c/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "66b8ae4bce061907bb1fdb88ba6f0a9ad918c378", "url": "https://api.github.com/repos/rust-lang/rust/commits/66b8ae4bce061907bb1fdb88ba6f0a9ad918c378", "html_url": "https://github.com/rust-lang/rust/commit/66b8ae4bce061907bb1fdb88ba6f0a9ad918c378"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "5a44b5edc533bb083d9ef2117c1e986c2310bcb7", "filename": "src/librustc_parse/parser/expr.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f6e2bdc341a5f25da3f29b5f37150fd320e90e8c/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6e2bdc341a5f25da3f29b5f37150fd320e90e8c/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fexpr.rs?ref=f6e2bdc341a5f25da3f29b5f37150fd320e90e8c", "patch": "@@ -1721,29 +1721,29 @@ impl<'a> Parser<'a> {\n             ))\n     }\n \n+    fn is_certainly_not_a_block(&self) -> bool {\n+        self.look_ahead(1, |t| t.is_ident())\n+            && (\n+                // `{ ident, ` cannot start a block.\n+                self.look_ahead(2, |t| t == &token::Comma)\n+                    || self.look_ahead(2, |t| t == &token::Colon)\n+                        && (\n+                            // `{ ident: token, ` cannot start a block.\n+                            self.look_ahead(4, |t| t == &token::Comma) ||\n+                // `{ ident: ` cannot start a block unless it's a type ascription `ident: Type`.\n+                self.look_ahead(3, |t| !t.can_begin_type())\n+                        )\n+            )\n+    }\n+\n     fn maybe_parse_struct_expr(\n         &mut self,\n         lo: Span,\n         path: &ast::Path,\n         attrs: &AttrVec,\n     ) -> Option<PResult<'a, P<Expr>>> {\n         let struct_allowed = !self.restrictions.contains(Restrictions::NO_STRUCT_LITERAL);\n-        let certainly_not_a_block = || {\n-            self.look_ahead(1, |t| t.is_ident())\n-                && (\n-                    // `{ ident, ` cannot start a block.\n-                    self.look_ahead(2, |t| t == &token::Comma)\n-                        || self.look_ahead(2, |t| t == &token::Colon)\n-                            && (\n-                                // `{ ident: token, ` cannot start a block.\n-                                self.look_ahead(4, |t| t == &token::Comma) ||\n-                // `{ ident: ` cannot start a block unless it's a type ascription `ident: Type`.\n-                self.look_ahead(3, |t| !t.can_begin_type())\n-                            )\n-                )\n-        };\n-\n-        if struct_allowed || certainly_not_a_block() {\n+        if struct_allowed || self.is_certainly_not_a_block() {\n             // This is a struct literal, but we don't can't accept them here.\n             let expr = self.parse_struct_expr(lo, path.clone(), attrs.clone());\n             if let (Ok(expr), false) = (&expr, struct_allowed) {"}]}