{"sha": "086bf7a8ff3550ff1f4c8e78d8b3a7804fdbbb36", "node_id": "C_kwDOAAsO6NoAKDA4NmJmN2E4ZmYzNTUwZmYxZjRjOGU3OGQ4YjNhNzgwNGZkYmJiMzY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-03T17:22:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-03T17:22:58Z"}, "message": "Auto merge of #96280 - lygstate:ffi-fixes, r=joshtriplett\n\nlibrary/core: Fixes implement of c_uint, c_long, c_ulong\n\nFixes: aa670166243 (\"make memcmp return a value of c_int_width instead of i32\")\nIntroduce c_num_definition to getting the cfg_if logic easier to maintain\nAdd newlines for easier code reading\n\nSigned-off-by: Yonggang Luo <luoyonggang@gmail.com>", "tree": {"sha": "7406a55371b899ab53756923730e40853ed8fa86", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7406a55371b899ab53756923730e40853ed8fa86"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/086bf7a8ff3550ff1f4c8e78d8b3a7804fdbbb36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/086bf7a8ff3550ff1f4c8e78d8b3a7804fdbbb36", "html_url": "https://github.com/rust-lang/rust/commit/086bf7a8ff3550ff1f4c8e78d8b3a7804fdbbb36", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/086bf7a8ff3550ff1f4c8e78d8b3a7804fdbbb36/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1df625306f4136949e02612406f0c60df6008f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1df625306f4136949e02612406f0c60df6008f3", "html_url": "https://github.com/rust-lang/rust/commit/e1df625306f4136949e02612406f0c60df6008f3"}, {"sha": "2e69549043c44d8050acc7b91e34a3ac241d70e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e69549043c44d8050acc7b91e34a3ac241d70e0", "html_url": "https://github.com/rust-lang/rust/commit/2e69549043c44d8050acc7b91e34a3ac241d70e0"}], "stats": {"total": 63, "additions": 46, "deletions": 17}, "files": [{"sha": "a38b8fb739aec8e3c71230455790694be2c9793f", "filename": "library/core/src/ffi/mod.rs", "status": "modified", "additions": 46, "deletions": 17, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/086bf7a8ff3550ff1f4c8e78d8b3a7804fdbbb36/library%2Fcore%2Fsrc%2Fffi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/086bf7a8ff3550ff1f4c8e78d8b3a7804fdbbb36/library%2Fcore%2Fsrc%2Fffi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fffi%2Fmod.rs?ref=086bf7a8ff3550ff1f4c8e78d8b3a7804fdbbb36", "patch": "@@ -58,29 +58,25 @@ type_alias! { \"c_char.md\", c_char = c_char_definition::c_char, NonZero_c_char =\n // is fixed.\n #[cfg(all())]\n #[doc(cfg(all()))] }\n+\n type_alias! { \"c_schar.md\", c_schar = i8, NonZero_c_schar = NonZeroI8; }\n type_alias! { \"c_uchar.md\", c_uchar = u8, NonZero_c_uchar = NonZeroU8; }\n type_alias! { \"c_short.md\", c_short = i16, NonZero_c_short = NonZeroI16; }\n type_alias! { \"c_ushort.md\", c_ushort = u16, NonZero_c_ushort = NonZeroU16; }\n-#[cfg(any(target_arch = \"avr\", target_arch = \"msp430\"))]\n-type_alias! { \"c_int.md\", c_int = i16, NonZero_c_int = NonZeroI16; }\n-#[cfg(not(any(target_arch = \"avr\", target_arch = \"msp430\")))]\n-type_alias! { \"c_int.md\", c_int = i32, NonZero_c_int = NonZeroI32; }\n-type_alias! { \"c_uint.md\", c_uint = u32, NonZero_c_uint = NonZeroU32; }\n-type_alias! { \"c_long.md\", c_long = i32, NonZero_c_long = NonZeroI32;\n-#[doc(cfg(all()))]\n-#[cfg(any(target_pointer_width = \"32\", windows))] }\n-type_alias! { \"c_ulong.md\", c_ulong = u32, NonZero_c_ulong = NonZeroU32;\n-#[doc(cfg(all()))]\n-#[cfg(any(target_pointer_width = \"32\", windows))] }\n-type_alias! { \"c_long.md\", c_long = i64, NonZero_c_long = NonZeroI64;\n-#[doc(cfg(all()))]\n-#[cfg(all(target_pointer_width = \"64\", not(windows)))] }\n-type_alias! { \"c_ulong.md\", c_ulong = u64, NonZero_c_ulong = NonZeroU64;\n-#[doc(cfg(all()))]\n-#[cfg(all(target_pointer_width = \"64\", not(windows)))] }\n+\n+type_alias! { \"c_int.md\", c_int = c_int_definition::c_int, NonZero_c_int = c_int_definition::NonZero_c_int;\n+#[doc(cfg(all()))] }\n+type_alias! { \"c_uint.md\", c_uint = c_int_definition::c_uint, NonZero_c_uint = c_int_definition::NonZero_c_uint;\n+#[doc(cfg(all()))] }\n+\n+type_alias! { \"c_long.md\", c_long = c_long_definition::c_long, NonZero_c_long = c_long_definition::NonZero_c_long;\n+#[doc(cfg(all()))] }\n+type_alias! { \"c_ulong.md\", c_ulong = c_long_definition::c_ulong, NonZero_c_ulong = c_long_definition::NonZero_c_ulong;\n+#[doc(cfg(all()))] }\n+\n type_alias! { \"c_longlong.md\", c_longlong = i64, NonZero_c_longlong = NonZeroI64; }\n type_alias! { \"c_ulonglong.md\", c_ulonglong = u64, NonZero_c_ulonglong = NonZeroU64; }\n+\n type_alias_no_nz! { \"c_float.md\", c_float = f32; }\n type_alias_no_nz! { \"c_double.md\", c_double = f64; }\n \n@@ -159,6 +155,39 @@ mod c_char_definition {\n     }\n }\n \n+mod c_int_definition {\n+    cfg_if! {\n+        if #[cfg(any(target_arch = \"avr\", target_arch = \"msp430\"))] {\n+            pub type c_int = i16;\n+            pub type NonZero_c_int = crate::num::NonZeroI16;\n+            pub type c_uint = u16;\n+            pub type NonZero_c_uint = crate::num::NonZeroU16;\n+        } else {\n+            pub type c_int = i32;\n+            pub type NonZero_c_int = crate::num::NonZeroI32;\n+            pub type c_uint = u32;\n+            pub type NonZero_c_uint = crate::num::NonZeroU32;\n+        }\n+    }\n+}\n+\n+mod c_long_definition {\n+    cfg_if! {\n+        if #[cfg(all(target_pointer_width = \"64\", not(windows)))] {\n+            pub type c_long = i64;\n+            pub type NonZero_c_long = crate::num::NonZeroI64;\n+            pub type c_ulong = u64;\n+            pub type NonZero_c_ulong = crate::num::NonZeroU64;\n+        } else {\n+            // The minimal size of `long` in the C standard is 32 bits\n+            pub type c_long = i32;\n+            pub type NonZero_c_long = crate::num::NonZeroI32;\n+            pub type c_ulong = u32;\n+            pub type NonZero_c_ulong = crate::num::NonZeroU32;\n+        }\n+    }\n+}\n+\n // N.B., for LLVM to recognize the void pointer type and by extension\n //     functions like malloc(), we need to have it represented as i8* in\n //     LLVM bitcode. The enum used here ensures this and prevents misuse"}]}