{"sha": "3ae3b3eb0682a4550578b4c35dc6e099d8a04e66", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhZTNiM2ViMDY4MmE0NTUwNTc4YjRjMzVkYzZlMDk5ZDhhMDRlNjY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-09-10T17:48:32Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-09-15T21:00:05Z"}, "message": "initial query tracing", "tree": {"sha": "8bd66ec01b5ec07ca74d2e16250469fe98bc8627", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8bd66ec01b5ec07ca74d2e16250469fe98bc8627"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ae3b3eb0682a4550578b4c35dc6e099d8a04e66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ae3b3eb0682a4550578b4c35dc6e099d8a04e66", "html_url": "https://github.com/rust-lang/rust/commit/3ae3b3eb0682a4550578b4c35dc6e099d8a04e66", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ae3b3eb0682a4550578b4c35dc6e099d8a04e66/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99d02fe583f4747f67debc1973a3eb3ca62e2005", "url": "https://api.github.com/repos/rust-lang/rust/commits/99d02fe583f4747f67debc1973a3eb3ca62e2005", "html_url": "https://github.com/rust-lang/rust/commit/99d02fe583f4747f67debc1973a3eb3ca62e2005"}], "stats": {"total": 68, "additions": 55, "deletions": 13}, "files": [{"sha": "5e3c8fb7ac2ba7684fb3e580db9c36b308d2d100", "filename": "crates/libanalysis/src/db.rs", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/3ae3b3eb0682a4550578b4c35dc6e099d8a04e66/crates%2Flibanalysis%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ae3b3eb0682a4550578b4c35dc6e099d8a04e66/crates%2Flibanalysis%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibanalysis%2Fsrc%2Fdb.rs?ref=3ae3b3eb0682a4550578b4c35dc6e099d8a04e66", "patch": "@@ -1,6 +1,7 @@\n use std::{\n     hash::Hash,\n     sync::Arc,\n+    cell::RefCell,\n };\n use libsyntax2::{File};\n use im;\n@@ -36,17 +37,38 @@ impl Db {\n         self.file_resolver = file_resolver\n     }\n     pub(crate) fn query_ctx(&self) -> QueryCtx {\n-        QueryCtx { db: self.clone() }\n+        QueryCtx {\n+            db: self.clone(),\n+            trace: RefCell::new(Vec::new()),\n+        }\n     }\n }\n \n pub(crate) struct QueryCtx {\n-    db: Db\n+    db: Db,\n+    pub(crate) trace: RefCell<Vec<TraceEvent>>,\n+}\n+\n+#[derive(Clone, Copy, Debug)]\n+pub(crate) struct TraceEvent {\n+    pub(crate) query_id: u32,\n+    pub(crate) kind: TraceEventKind\n+}\n+\n+#[derive(Clone, Copy, Debug, PartialEq, Eq)]\n+pub(crate) enum TraceEventKind {\n+    Start, Finish\n }\n \n impl QueryCtx {\n     pub(crate) fn get<Q: Get>(&self, params: &Q::Params) -> Q::Output {\n-        Q::get(self, params)\n+        self.trace(TraceEvent { query_id: Q::ID, kind: TraceEventKind::Start });\n+        let res = Q::get(self, params);\n+        self.trace(TraceEvent { query_id: Q::ID, kind: TraceEventKind::Finish });\n+        res\n+    }\n+    fn trace(&self, event: TraceEvent) {\n+        self.trace.borrow_mut().push(event)\n     }\n }\n "}, {"sha": "25dbe8dd4274b14c5fbf157b21c48e1e8e0c1d3d", "filename": "crates/libanalysis/src/module_map_db.rs", "status": "modified", "additions": 30, "deletions": 10, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/3ae3b3eb0682a4550578b4c35dc6e099d8a04e66/crates%2Flibanalysis%2Fsrc%2Fmodule_map_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ae3b3eb0682a4550578b4c35dc6e099d8a04e66/crates%2Flibanalysis%2Fsrc%2Fmodule_map_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibanalysis%2Fsrc%2Fmodule_map_db.rs?ref=3ae3b3eb0682a4550578b4c35dc6e099d8a04e66", "patch": "@@ -94,14 +94,15 @@ mod descr {\n \n #[cfg(test)]\n mod tests {\n-    use super::*;\n+    use std::collections::HashMap;\n     use im;\n     use relative_path::{RelativePath, RelativePathBuf};\n     use {\n-        db::Db,\n+        db::{Query, Db, TraceEventKind},\n         imp::FileResolverImp,\n         FileId, FileResolver,\n     };\n+    use super::*;\n \n     #[derive(Debug)]\n     struct FileMap(im::HashMap<FileId, RelativePathBuf>);\n@@ -154,36 +155,55 @@ mod tests {\n         fn change_file(&mut self, file_id: FileId, new_text: &str) {\n             self.db.change_file(file_id, Some(new_text.to_string()));\n         }\n-        fn check_parent_modules(&self, file_id: FileId, expected: &[FileId]) {\n+        fn check_parent_modules(\n+            &self,\n+            file_id: FileId,\n+            expected: &[FileId],\n+            queries: &[(u32, u64)]\n+        ) {\n             let ctx = self.db.query_ctx();\n             let actual = ctx.get::<ParentModule>(&file_id);\n             assert_eq!(actual.as_slice(), expected);\n+            let mut counts = HashMap::new();\n+            ctx.trace.borrow().iter()\n+               .filter(|event| event.kind == TraceEventKind::Start)\n+               .for_each(|event| *counts.entry(event.query_id).or_insert(0) += 1);\n+            for &(query_id, expected_count) in queries.iter() {\n+                let actual_count = *counts.get(&query_id).unwrap_or(&0);\n+                assert_eq!(\n+                    actual_count,\n+                    expected_count,\n+                    \"counts for {} differ\",\n+                    query_id,\n+                )\n+            }\n+\n         }\n     }\n \n     #[test]\n     fn test_parent_module() {\n         let mut f = Fixture::new();\n         let foo = f.add_file(\"/foo.rs\", \"\");\n-        f.check_parent_modules(foo, &[]);\n+        f.check_parent_modules(foo, &[], &[(FileSyntax::ID, 1)]);\n \n         let lib = f.add_file(\"/lib.rs\", \"mod foo;\");\n-        f.check_parent_modules(foo, &[lib]);\n+        f.check_parent_modules(foo, &[lib], &[(FileSyntax::ID, 2)]);\n \n         f.change_file(lib, \"\");\n-        f.check_parent_modules(foo, &[]);\n+        f.check_parent_modules(foo, &[], &[(ModuleDescr::ID, 2)]);\n \n         f.change_file(lib, \"mod foo;\");\n-        f.check_parent_modules(foo, &[lib]);\n+        f.check_parent_modules(foo, &[lib], &[(ModuleDescr::ID, 2)]);\n \n         f.change_file(lib, \"mod bar;\");\n-        f.check_parent_modules(foo, &[]);\n+        f.check_parent_modules(foo, &[], &[(ModuleDescr::ID, 2)]);\n \n         f.change_file(lib, \"mod foo;\");\n-        f.check_parent_modules(foo, &[lib]);\n+        f.check_parent_modules(foo, &[lib], &[(ModuleDescr::ID, 2)]);\n \n         f.remove_file(lib);\n-        f.check_parent_modules(foo, &[]);\n+        f.check_parent_modules(foo, &[], &[(ModuleDescr::ID, 1)]);\n     }\n \n }"}]}