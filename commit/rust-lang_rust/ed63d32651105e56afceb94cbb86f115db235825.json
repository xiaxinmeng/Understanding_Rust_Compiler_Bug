{"sha": "ed63d32651105e56afceb94cbb86f115db235825", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkNjNkMzI2NTExMDVlNTZhZmNlYjk0Y2JiODZmMTE1ZGIyMzU4MjU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-04-01T14:11:46Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-04-01T18:40:44Z"}, "message": "Add (unstable) FnBox trait as a nicer replacement for `Thunk`. The doc\ncomment includes a test that also shows how it can be used.", "tree": {"sha": "d1df549a70af147589428d8ade908d1f0560d62f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1df549a70af147589428d8ade908d1f0560d62f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed63d32651105e56afceb94cbb86f115db235825", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed63d32651105e56afceb94cbb86f115db235825", "html_url": "https://github.com/rust-lang/rust/commit/ed63d32651105e56afceb94cbb86f115db235825", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed63d32651105e56afceb94cbb86f115db235825/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d528aa9960cb9b937d8ef6c09905a6a8076d5f3a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d528aa9960cb9b937d8ef6c09905a6a8076d5f3a", "html_url": "https://github.com/rust-lang/rust/commit/d528aa9960cb9b937d8ef6c09905a6a8076d5f3a"}], "stats": {"total": 76, "additions": 76, "deletions": 0}, "files": [{"sha": "8d3a63ceb5075a29fb6e5a8ba5c251c2dc8f2102", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/ed63d32651105e56afceb94cbb86f115db235825/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed63d32651105e56afceb94cbb86f115db235825/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=ed63d32651105e56afceb94cbb86f115db235825", "patch": "@@ -355,3 +355,78 @@ impl<'a, 'b> From<&'b str> for Box<Error + Send + 'a> {\n         }\n     }\n }\n+\n+/// `FnBox` is a version of the `FnOnce` intended for use with boxed\n+/// closure objects. The idea is that where one would normally store a\n+/// `Box<FnOnce()>` in a data structure, you should use\n+/// `Box<FnBox()>`. The two traits behave essentially the same, except\n+/// that a `FnBox` closure can only be called if it is boxed. (Note\n+/// that `FnBox` may be deprecated in the future if `Box<FnOnce()>`\n+/// closures become directly usable.)\n+///\n+/// ### Example\n+///\n+/// Here is a snippet of code which creates a hashmap full of boxed\n+/// once closures and then removes them one by one, calling each\n+/// closure as it is removed. Note that the type of the closures\n+/// stored in the map is `Box<FnBox() -> i32>` and not `Box<FnOnce()\n+/// -> i32>`.\n+///\n+/// ```\n+/// #![feature(core)]\n+///\n+/// use std::boxed::FnBox;\n+/// use std::collections::HashMap;\n+///\n+/// fn make_map() -> HashMap<i32, Box<FnBox() -> i32>> {\n+///     let mut map: HashMap<i32, Box<FnBox() -> i32>> = HashMap::new();\n+///     map.insert(1, Box::new(|| 22));\n+///     map.insert(2, Box::new(|| 44));\n+///     map\n+/// }\n+///\n+/// fn main() {\n+///     let mut map = make_map();\n+///     for i in &[1, 2] {\n+///         let f = map.remove(&i).unwrap();\n+///         assert_eq!(f(), i * 22);\n+///     }\n+/// }\n+/// ```\n+#[cfg(not(stage0))]\n+#[rustc_paren_sugar]\n+#[unstable(feature = \"core\", reason = \"Newly introduced\")]\n+pub trait FnBox<A> {\n+    type Output;\n+\n+    extern \"rust-call\" fn call_box(self: Box<Self>, args: A) -> Self::Output;\n+}\n+\n+#[cfg(not(stage0))]\n+impl<A,F> FnBox<A> for F\n+    where F: FnOnce<A>\n+{\n+    type Output = F::Output;\n+\n+    extern \"rust-call\" fn call_box(self: Box<F>, args: A) -> F::Output {\n+        self.call_once(args)\n+    }\n+}\n+\n+#[cfg(not(stage0))]\n+impl<A,R> FnOnce<A> for Box<FnBox<A,Output=R>> {\n+    type Output = R;\n+\n+    extern \"rust-call\" fn call_once(self, args: A) -> R {\n+        self.call_box(args)\n+    }\n+}\n+\n+#[cfg(not(stage0))]\n+impl<A,R> FnOnce<A> for Box<FnBox<A,Output=R>+Send> {\n+    type Output = R;\n+\n+    extern \"rust-call\" fn call_once(self, args: A) -> R {\n+        self.call_box(args)\n+    }\n+}"}, {"sha": "3c73ce7634c69c7ca86900ab0ec94a0adc3f0bb7", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ed63d32651105e56afceb94cbb86f115db235825/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed63d32651105e56afceb94cbb86f115db235825/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=ed63d32651105e56afceb94cbb86f115db235825", "patch": "@@ -243,6 +243,7 @@ mod uint_macros;\n #[path = \"num/f64.rs\"]   pub mod f64;\n \n pub mod ascii;\n+\n pub mod thunk;\n \n /* Common traits */"}]}