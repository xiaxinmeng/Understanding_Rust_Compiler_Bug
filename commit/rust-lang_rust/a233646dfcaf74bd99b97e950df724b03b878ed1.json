{"sha": "a233646dfcaf74bd99b97e950df724b03b878ed1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyMzM2NDZkZmNhZjc0YmQ5OWI5N2U5NTBkZjcyNGIwM2I4NzhlZDE=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-10-15T08:34:13Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-10-15T08:34:13Z"}, "message": "Rustup to rustc 1.49.0-nightly (e160e5cb8 2020-10-14)", "tree": {"sha": "b08689e398f59708ef5433316fdf70cee34f53ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b08689e398f59708ef5433316fdf70cee34f53ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a233646dfcaf74bd99b97e950df724b03b878ed1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a233646dfcaf74bd99b97e950df724b03b878ed1", "html_url": "https://github.com/rust-lang/rust/commit/a233646dfcaf74bd99b97e950df724b03b878ed1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a233646dfcaf74bd99b97e950df724b03b878ed1/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6258b86c40b615fbba45d4e29412b6458500f5ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/6258b86c40b615fbba45d4e29412b6458500f5ca", "html_url": "https://github.com/rust-lang/rust/commit/6258b86c40b615fbba45d4e29412b6458500f5ca"}], "stats": {"total": 74, "additions": 21, "deletions": 53}, "files": [{"sha": "ee8548783de65f98b6f79274a34f557cd2633ed7", "filename": "patches/0022-core-Disable-not-compiling-tests.patch", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a233646dfcaf74bd99b97e950df724b03b878ed1/patches%2F0022-core-Disable-not-compiling-tests.patch", "raw_url": "https://github.com/rust-lang/rust/raw/a233646dfcaf74bd99b97e950df724b03b878ed1/patches%2F0022-core-Disable-not-compiling-tests.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/patches%2F0022-core-Disable-not-compiling-tests.patch?ref=a233646dfcaf74bd99b97e950df724b03b878ed1", "patch": "@@ -112,7 +112,7 @@ index 6609bc3..241b497 100644\n  #[cfg(not(target_arch = \"wasm32\"))]\n  fn sort_unstable() {\n @@ -1394,6 +1395,7 @@ fn partition_at_index() {\n-     v.partition_at_index(0);\n+     v.select_nth_unstable(0);\n      assert!(v == [0xDEADBEEF]);\n  }\n +*/"}, {"sha": "ab4c3c84c9659e8245d12cac7c7a038556fc0656", "filename": "rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a233646dfcaf74bd99b97e950df724b03b878ed1/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/a233646dfcaf74bd99b97e950df724b03b878ed1/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=a233646dfcaf74bd99b97e950df724b03b878ed1", "patch": "@@ -1 +1 @@\n-nightly-2020-10-12\n+nightly-2020-10-15"}, {"sha": "fa9b8853d39e9eec25bef7090c838d3dc918c8f0", "filename": "src/base.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a233646dfcaf74bd99b97e950df724b03b878ed1/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a233646dfcaf74bd99b97e950df724b03b878ed1/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=a233646dfcaf74bd99b97e950df724b03b878ed1", "patch": "@@ -299,19 +299,19 @@ fn codegen_fn_content(fx: &mut FunctionCx<'_, '_, impl Module>) {\n             TerminatorKind::SwitchInt {\n                 discr,\n                 switch_ty,\n-                values,\n                 targets,\n             } => {\n                 let discr = trans_operand(fx, discr).load_scalar(fx);\n \n                 if switch_ty.kind() == fx.tcx.types.bool.kind() {\n-                    assert_eq!(targets.len(), 2);\n-                    let then_block = fx.get_block(targets[0]);\n-                    let else_block = fx.get_block(targets[1]);\n-                    let test_zero = match **values {\n-                        [0] => true,\n-                        [1] => false,\n-                        _ => unreachable!(\"{:?}\", values),\n+                    assert_eq!(targets.iter().count(), 1);\n+                    let (then_value, then_block) = targets.iter().next().unwrap();\n+                    let then_block = fx.get_block(then_block);\n+                    let else_block = fx.get_block(targets.otherwise());\n+                    let test_zero = match then_value {\n+                        0 => true,\n+                        1 => false,\n+                        _ => unreachable!(\"{:?}\", targets),\n                     };\n \n                     let discr = crate::optimize::peephole::maybe_unwrap_bint(&mut fx.bcx, discr);\n@@ -330,11 +330,11 @@ fn codegen_fn_content(fx: &mut FunctionCx<'_, '_, impl Module>) {\n                     }\n                 } else {\n                     let mut switch = ::cranelift_frontend::Switch::new();\n-                    for (i, value) in values.iter().enumerate() {\n-                        let block = fx.get_block(targets[i]);\n-                        switch.set_entry(*value, block);\n+                    for (value, block) in targets.iter() {\n+                        let block = fx.get_block(block);\n+                        switch.set_entry(value, block);\n                     }\n-                    let otherwise_block = fx.get_block(targets[targets.len() - 1]);\n+                    let otherwise_block = fx.get_block(targets.otherwise());\n                     switch.emit(&mut fx.bcx, discr, otherwise_block);\n                 }\n             }"}, {"sha": "e7595abe1786ef1af15dca0b790d4c806a09812f", "filename": "src/driver/aot.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a233646dfcaf74bd99b97e950df724b03b878ed1/src%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a233646dfcaf74bd99b97e950df724b03b878ed1/src%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Faot.rs?ref=a233646dfcaf74bd99b97e950df724b03b878ed1", "patch": "@@ -302,7 +302,6 @@ pub(super) fn run_aot(\n             modules,\n             allocator_module,\n             metadata_module,\n-            crate_hash: tcx.crate_hash(LOCAL_CRATE),\n             metadata,\n             windows_subsystem: None, // Windows is not yet supported\n             linker_info: LinkerInfo::new(tcx),"}, {"sha": "af359456e699b3d088fcdb763dd3d542f2fa3550", "filename": "src/lib.rs", "status": "modified", "additions": 7, "deletions": 38, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/a233646dfcaf74bd99b97e950df724b03b878ed1/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a233646dfcaf74bd99b97e950df724b03b878ed1/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=a233646dfcaf74bd99b97e950df724b03b878ed1", "patch": "@@ -37,7 +37,7 @@ use std::any::Any;\n use rustc_codegen_ssa::traits::CodegenBackend;\n use rustc_codegen_ssa::CodegenResults;\n use rustc_errors::ErrorReported;\n-use rustc_middle::dep_graph::{DepGraph, WorkProduct, WorkProductId};\n+use rustc_middle::dep_graph::{WorkProduct, WorkProductId};\n use rustc_middle::middle::cstore::{EncodedMetadata, MetadataLoader};\n use rustc_middle::ty::query::Providers;\n use rustc_session::config::OutputFilenames;\n@@ -190,23 +190,7 @@ impl CodegenBackend for CraneliftCodegenBackend {\n         Box::new(crate::metadata::CraneliftMetadataLoader)\n     }\n \n-    fn provide(&self, providers: &mut Providers) {\n-        providers.supported_target_features = |tcx, cnum| {\n-            assert_eq!(cnum, LOCAL_CRATE);\n-            if tcx.sess.opts.actually_rustdoc {\n-                // rustdoc needs to be able to document functions that use all the features, so\n-                // whitelist them all\n-                rustc_codegen_ssa::target_features::all_known_features()\n-                    .map(|(a, b)| (a.to_string(), b))\n-                    .collect()\n-            } else {\n-                rustc_codegen_ssa::target_features::supported_target_features(tcx.sess)\n-                    .iter()\n-                    .map(|&(a, b)| (a.to_string(), b))\n-                    .collect()\n-            }\n-        };\n-    }\n+    fn provide(&self, _providers: &mut Providers) {}\n     fn provide_extern(&self, _providers: &mut Providers) {}\n \n     fn target_features(&self, _sess: &Session) -> Vec<rustc_span::Symbol> {\n@@ -229,34 +213,21 @@ impl CodegenBackend for CraneliftCodegenBackend {\n     fn join_codegen(\n         &self,\n         ongoing_codegen: Box<dyn Any>,\n-        sess: &Session,\n-        dep_graph: &DepGraph,\n-    ) -> Result<Box<dyn Any>, ErrorReported> {\n-        let (codegen_results, work_products) = *ongoing_codegen\n+        _sess: &Session,\n+    ) -> Result<(CodegenResults, FxHashMap<WorkProductId, WorkProduct>), ErrorReported> {\n+        Ok(*ongoing_codegen\n             .downcast::<(CodegenResults, FxHashMap<WorkProductId, WorkProduct>)>()\n-            .unwrap();\n-\n-        sess.time(\"serialize_work_products\", move || {\n-            rustc_incremental::save_work_product_index(sess, &dep_graph, work_products)\n-        });\n-\n-        Ok(Box::new(codegen_results))\n+            .unwrap())\n     }\n \n     fn link(\n         &self,\n         sess: &Session,\n-        res: Box<dyn Any>,\n+        codegen_results: CodegenResults,\n         outputs: &OutputFilenames,\n     ) -> Result<(), ErrorReported> {\n         use rustc_codegen_ssa::back::link::link_binary;\n \n-        sess.abort_if_errors();\n-\n-        let codegen_results = *res\n-            .downcast::<CodegenResults>()\n-            .expect(\"Expected CraneliftCodegenBackend's CodegenResult, found Box<Any>\");\n-\n         let _timer = sess.prof.generic_activity(\"link_crate\");\n \n         sess.time(\"linking\", || {\n@@ -270,8 +241,6 @@ impl CodegenBackend for CraneliftCodegenBackend {\n             );\n         });\n \n-        rustc_incremental::finalize_session_directory(sess, codegen_results.crate_hash);\n-\n         Ok(())\n     }\n }"}]}