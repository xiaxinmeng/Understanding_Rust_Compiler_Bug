{"sha": "546be18e3a91e4844b0dacc76c9f055397b6d89e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0NmJlMThlM2E5MWU0ODQ0YjBkYWNjNzZjOWYwNTUzOTdiNmQ4OWU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-06-13T09:33:08Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-06-13T10:13:26Z"}, "message": "internal: check that coverage marks are always paired", "tree": {"sha": "020b9667f0f723b06ee7fb6948efaa9e6b135f68", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/020b9667f0f723b06ee7fb6948efaa9e6b135f68"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/546be18e3a91e4844b0dacc76c9f055397b6d89e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/546be18e3a91e4844b0dacc76c9f055397b6d89e", "html_url": "https://github.com/rust-lang/rust/commit/546be18e3a91e4844b0dacc76c9f055397b6d89e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/546be18e3a91e4844b0dacc76c9f055397b6d89e/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0eafc88079fb5ddb1931e59860a4e064743e113a", "url": "https://api.github.com/repos/rust-lang/rust/commits/0eafc88079fb5ddb1931e59860a4e064743e113a", "html_url": "https://github.com/rust-lang/rust/commit/0eafc88079fb5ddb1931e59860a4e064743e113a"}], "stats": {"total": 60, "additions": 54, "deletions": 6}, "files": [{"sha": "15c10d053f229adb6ffe8bdd54c9e3796cc58861", "filename": "crates/hir_def/src/body/tests/block.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/546be18e3a91e4844b0dacc76c9f055397b6d89e/crates%2Fhir_def%2Fsrc%2Fbody%2Ftests%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/546be18e3a91e4844b0dacc76c9f055397b6d89e/crates%2Fhir_def%2Fsrc%2Fbody%2Ftests%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody%2Ftests%2Fblock.rs?ref=546be18e3a91e4844b0dacc76c9f055397b6d89e", "patch": "@@ -163,14 +163,14 @@ fn legacy_macro_items() {\n     // correctly.\n     check_at(\n         r#\"\n-macro_rules! hit {\n+macro_rules! mark {\n     () => {\n         struct Hit {}\n     }\n }\n \n fn f() {\n-    hit!();\n+    mark!();\n     $0\n }\n \"#,\n@@ -193,20 +193,20 @@ use core::cov_mark;\n \n fn f() {\n     fn nested() {\n-        cov_mark::hit!(Hit);\n+        cov_mark::mark!(Hit);\n         $0\n     }\n }\n //- /core.rs crate:core\n pub mod cov_mark {\n     #[macro_export]\n-    macro_rules! _hit {\n+    macro_rules! _mark {\n         ($name:ident) => {\n             struct $name {}\n         }\n     }\n \n-    pub use crate::_hit as hit;\n+    pub use crate::_mark as mark;\n }\n \"#,\n         expect![[r#\""}, {"sha": "d8ca18c733e1c6cb63550c6bcd955c5f92e9220a", "filename": "crates/ide_completion/src/render.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/546be18e3a91e4844b0dacc76c9f055397b6d89e/crates%2Fide_completion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/546be18e3a91e4844b0dacc76c9f055397b6d89e/crates%2Fide_completion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender.rs?ref=546be18e3a91e4844b0dacc76c9f055397b6d89e", "patch": "@@ -1007,6 +1007,7 @@ fn go(world: &WorldSnapshot) { go(w$0) }\n \n     #[test]\n     fn too_many_arguments() {\n+        cov_mark::check!(too_many_arguments);\n         check_relevance(\n             r#\"\n struct Foo;"}, {"sha": "e6fa5868de58401a9eaeb9f78fd271e8da6ae7aa", "filename": "xtask/src/tidy.rs", "status": "modified", "additions": 48, "deletions": 1, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/546be18e3a91e4844b0dacc76c9f055397b6d89e/xtask%2Fsrc%2Ftidy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/546be18e3a91e4844b0dacc76c9f055397b6d89e/xtask%2Fsrc%2Ftidy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Ftidy.rs?ref=546be18e3a91e4844b0dacc76c9f055397b6d89e", "patch": "@@ -1,4 +1,7 @@\n-use std::path::{Path, PathBuf};\n+use std::{\n+    collections::HashSet,\n+    path::{Path, PathBuf},\n+};\n \n use xshell::{cmd, pushd, pushenv, read_file};\n \n@@ -81,15 +84,18 @@ Please adjust docs/dev/lsp-extensions.md.\n #[test]\n fn rust_files_are_tidy() {\n     let mut tidy_docs = TidyDocs::default();\n+    let mut tidy_marks = TidyMarks::default();\n     for path in rust_files() {\n         let text = read_file(&path).unwrap();\n         check_todo(&path, &text);\n         check_dbg(&path, &text);\n         check_trailing_ws(&path, &text);\n         deny_clippy(&path, &text);\n         tidy_docs.visit(&path, &text);\n+        tidy_marks.visit(&path, &text);\n     }\n     tidy_docs.finish();\n+    tidy_marks.finish();\n }\n \n #[test]\n@@ -408,6 +414,39 @@ fn is_exclude_dir(p: &Path, dirs_to_exclude: &[&str]) -> bool {\n         .any(|it| dirs_to_exclude.contains(&it))\n }\n \n+#[derive(Default)]\n+struct TidyMarks {\n+    hits: HashSet<String>,\n+    checks: HashSet<String>,\n+}\n+\n+impl TidyMarks {\n+    fn visit(&mut self, _path: &Path, text: &str) {\n+        for line in text.lines() {\n+            if let Some(mark) = find_mark(line, \"hit\") {\n+                self.hits.insert(mark.to_string());\n+            }\n+            if let Some(mark) = find_mark(line, \"check\") {\n+                self.checks.insert(mark.to_string());\n+            }\n+            if let Some(mark) = find_mark(line, \"check_count\") {\n+                self.checks.insert(mark.to_string());\n+            }\n+        }\n+    }\n+\n+    fn finish(self) {\n+        assert!(!self.hits.is_empty());\n+\n+        let diff: Vec<_> =\n+            self.hits.symmetric_difference(&self.checks).map(|it| it.as_str()).collect();\n+\n+        if !diff.is_empty() {\n+            panic!(\"unpaired marks: {:?}\", diff)\n+        }\n+    }\n+}\n+\n #[allow(deprecated)]\n fn stable_hash(text: &str) -> u64 {\n     use std::hash::{Hash, Hasher, SipHasher};\n@@ -417,3 +456,11 @@ fn stable_hash(text: &str) -> u64 {\n     text.hash(&mut hasher);\n     hasher.finish()\n }\n+\n+fn find_mark<'a>(text: &'a str, mark: &'static str) -> Option<&'a str> {\n+    let idx = text.find(mark)?;\n+    let text = text[idx + mark.len()..].strip_prefix(\"!(\")?;\n+    let idx = text.find(|c: char| !(c.is_alphanumeric() || c == '_'))?;\n+    let text = &text[..idx];\n+    Some(text)\n+}"}]}