{"sha": "c4168fdb50bd3d50a1729ae9af3ca4921841c35a", "node_id": "C_kwDOAAsO6NoAKGM0MTY4ZmRiNTBiZDNkNTBhMTcyOWFlOWFmM2NhNDkyMTg0MWMzNWE", "commit": {"author": {"name": "Jakob Degen", "email": "jakob.e.degen@gmail.com", "date": "2022-05-06T20:09:59Z"}, "committer": {"name": "Jakob Degen", "email": "jakob.e.degen@gmail.com", "date": "2022-05-06T20:43:09Z"}, "message": "Check that field projections have the correct type", "tree": {"sha": "befb189a8658e5e614de9d12ac3d22f1e4cfe735", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/befb189a8658e5e614de9d12ac3d22f1e4cfe735"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4168fdb50bd3d50a1729ae9af3ca4921841c35a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4168fdb50bd3d50a1729ae9af3ca4921841c35a", "html_url": "https://github.com/rust-lang/rust/commit/c4168fdb50bd3d50a1729ae9af3ca4921841c35a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4168fdb50bd3d50a1729ae9af3ca4921841c35a/comments", "author": {"login": "JakobDegen", "id": 51179609, "node_id": "MDQ6VXNlcjUxMTc5NjA5", "avatar_url": "https://avatars.githubusercontent.com/u/51179609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JakobDegen", "html_url": "https://github.com/JakobDegen", "followers_url": "https://api.github.com/users/JakobDegen/followers", "following_url": "https://api.github.com/users/JakobDegen/following{/other_user}", "gists_url": "https://api.github.com/users/JakobDegen/gists{/gist_id}", "starred_url": "https://api.github.com/users/JakobDegen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JakobDegen/subscriptions", "organizations_url": "https://api.github.com/users/JakobDegen/orgs", "repos_url": "https://api.github.com/users/JakobDegen/repos", "events_url": "https://api.github.com/users/JakobDegen/events{/privacy}", "received_events_url": "https://api.github.com/users/JakobDegen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JakobDegen", "id": 51179609, "node_id": "MDQ6VXNlcjUxMTc5NjA5", "avatar_url": "https://avatars.githubusercontent.com/u/51179609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JakobDegen", "html_url": "https://github.com/JakobDegen", "followers_url": "https://api.github.com/users/JakobDegen/followers", "following_url": "https://api.github.com/users/JakobDegen/following{/other_user}", "gists_url": "https://api.github.com/users/JakobDegen/gists{/gist_id}", "starred_url": "https://api.github.com/users/JakobDegen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JakobDegen/subscriptions", "organizations_url": "https://api.github.com/users/JakobDegen/orgs", "repos_url": "https://api.github.com/users/JakobDegen/repos", "events_url": "https://api.github.com/users/JakobDegen/events{/privacy}", "received_events_url": "https://api.github.com/users/JakobDegen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5289bbece312fb6704febea1a95a601f0dd27b02", "url": "https://api.github.com/repos/rust-lang/rust/commits/5289bbece312fb6704febea1a95a601f0dd27b02", "html_url": "https://github.com/rust-lang/rust/commit/5289bbece312fb6704febea1a95a601f0dd27b02"}], "stats": {"total": 56, "additions": 55, "deletions": 1}, "files": [{"sha": "25209e20e99397b1b42ce05a6881789593ceb95a", "filename": "compiler/rustc_const_eval/src/transform/validate.rs", "status": "modified", "additions": 55, "deletions": 1, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/c4168fdb50bd3d50a1729ae9af3ca4921841c35a/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4168fdb50bd3d50a1729ae9af3ca4921841c35a/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs?ref=c4168fdb50bd3d50a1729ae9af3ca4921841c35a", "patch": "@@ -14,7 +14,7 @@ use rustc_middle::ty::{self, InstanceDef, ParamEnv, Ty, TyCtxt, TypeFoldable};\n use rustc_mir_dataflow::impls::MaybeStorageLive;\n use rustc_mir_dataflow::storage::AlwaysLiveLocals;\n use rustc_mir_dataflow::{Analysis, ResultsCursor};\n-use rustc_target::abi::Size;\n+use rustc_target::abi::{Size, VariantIdx};\n \n #[derive(Copy, Clone, Debug)]\n enum EdgeKind {\n@@ -244,6 +244,60 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n                 self.fail(location, format!(\"bad index ({:?} != usize)\", index_ty))\n             }\n         }\n+        if let ProjectionElem::Field(f, ty) = elem {\n+            let parent = Place { local, projection: self.tcx.intern_place_elems(proj_base) };\n+            let parent_ty = parent.ty(&self.body.local_decls, self.tcx);\n+            let fail_out_of_bounds = |this: &Self, location| {\n+                this.fail(location, format!(\"Out of bounds field {:?} for {:?}\", f, parent_ty));\n+            };\n+            let check_equal = |this: &Self, location, f_ty| {\n+                if !this.mir_assign_valid_types(ty, f_ty) {\n+                    this.fail(\n+                        location,\n+                        format!(\n+                            \"Field projection `{:?}.{:?}` specified type `{:?}`, but actual type is {:?}\",\n+                            parent, f, ty, f_ty\n+                        )\n+                    )\n+                }\n+            };\n+            match parent_ty.ty.kind() {\n+                ty::Tuple(fields) => {\n+                    let Some(f_ty) = fields.get(f.as_usize()) else {\n+                        fail_out_of_bounds(self, location);\n+                        return;\n+                    };\n+                    check_equal(self, location, *f_ty);\n+                }\n+                ty::Adt(adt_def, substs) => {\n+                    let var = parent_ty.variant_index.unwrap_or(VariantIdx::from_u32(0));\n+                    let Some(field) = adt_def.variant(var).fields.get(f.as_usize()) else {\n+                        fail_out_of_bounds(self, location);\n+                        return;\n+                    };\n+                    check_equal(self, location, field.ty(self.tcx, substs));\n+                }\n+                ty::Closure(_, substs) => {\n+                    let substs = substs.as_closure();\n+                    let Some(f_ty) = substs.upvar_tys().nth(f.as_usize()) else {\n+                        fail_out_of_bounds(self, location);\n+                        return;\n+                    };\n+                    check_equal(self, location, f_ty);\n+                }\n+                ty::Generator(_, substs, _) => {\n+                    let substs = substs.as_generator();\n+                    let Some(f_ty) = substs.upvar_tys().nth(f.as_usize()) else {\n+                        fail_out_of_bounds(self, location);\n+                        return;\n+                    };\n+                    check_equal(self, location, f_ty);\n+                }\n+                _ => {\n+                    self.fail(location, format!(\"{:?} does not have fields\", parent_ty.ty));\n+                }\n+            }\n+        }\n         self.super_projection_elem(local, proj_base, elem, context, location);\n     }\n "}]}