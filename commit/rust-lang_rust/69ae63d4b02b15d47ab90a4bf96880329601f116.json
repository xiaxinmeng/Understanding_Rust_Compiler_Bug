{"sha": "69ae63d4b02b15d47ab90a4bf96880329601f116", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5YWU2M2Q0YjAyYjE1ZDQ3YWI5MGE0YmY5Njg4MDMyOTYwMWYxMTY=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-10-12T23:51:27Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-10-12T23:51:27Z"}, "message": "Fix horribly embarassing signedness bug in backend, plus related regressions.", "tree": {"sha": "a54493f852b7c8c187cb363a09f0f223efae4e1a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a54493f852b7c8c187cb363a09f0f223efae4e1a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69ae63d4b02b15d47ab90a4bf96880329601f116", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69ae63d4b02b15d47ab90a4bf96880329601f116", "html_url": "https://github.com/rust-lang/rust/commit/69ae63d4b02b15d47ab90a4bf96880329601f116", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69ae63d4b02b15d47ab90a4bf96880329601f116/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81a43ef6980e19f3965d2cbbe109a9c6f82fe287", "url": "https://api.github.com/repos/rust-lang/rust/commits/81a43ef6980e19f3965d2cbbe109a9c6f82fe287", "html_url": "https://github.com/rust-lang/rust/commit/81a43ef6980e19f3965d2cbbe109a9c6f82fe287"}], "stats": {"total": 28, "additions": 22, "deletions": 6}, "files": [{"sha": "939b297cfe92a8b16d720ce4a0fd9dc8367a4234", "filename": "src/boot/be/asm.ml", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/69ae63d4b02b15d47ab90a4bf96880329601f116/src%2Fboot%2Fbe%2Fasm.ml", "raw_url": "https://github.com/rust-lang/rust/raw/69ae63d4b02b15d47ab90a4bf96880329601f116/src%2Fboot%2Fbe%2Fasm.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fbe%2Fasm.ml?ref=69ae63d4b02b15d47ab90a4bf96880329601f116", "patch": "@@ -590,8 +590,9 @@ and lower_frag\n       | WORD (m,e) ->\n           iflog sess\n             (fun _ ->\n-               log sess \"lowering word %s\"\n-                 (string_of_ty_mach m));\n+               log sess \"lowering word %s with val %s\"\n+                 (string_of_ty_mach m)\n+                 (fmt_to_str fmt_frag frag));\n           word (bytes_of_ty_mach m) (mach_is_signed m) e\n \n       | ALIGN_FILE (n, frag) ->"}, {"sha": "9a63576e414ace5cd133ee56b950d136f52aedd5", "filename": "src/boot/be/il.ml", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/69ae63d4b02b15d47ab90a4bf96880329601f116/src%2Fboot%2Fbe%2Fil.ml", "raw_url": "https://github.com/rust-lang/rust/raw/69ae63d4b02b15d47ab90a4bf96880329601f116/src%2Fboot%2Fbe%2Fil.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fbe%2Fil.ml?ref=69ae63d4b02b15d47ab90a4bf96880329601f116", "patch": "@@ -812,6 +812,12 @@ let umov (dst:cell) (src:operand) : quad' =\n     else unary UMOV dst src\n ;;\n \n+let imov (dst:cell) (src:operand) : quad' =\n+    if (cell_is_nil dst || operand_is_nil src)\n+    then Dead\n+    else unary IMOV dst src\n+;;\n+\n let zero (dst:cell) (count:operand) : quad' =\n   unary ZERO dst count\n ;;"}, {"sha": "c9b13d04c70385d3d61cc2954e664da068f7ce8a", "filename": "src/boot/be/x86.ml", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/69ae63d4b02b15d47ab90a4bf96880329601f116/src%2Fboot%2Fbe%2Fx86.ml", "raw_url": "https://github.com/rust-lang/rust/raw/69ae63d4b02b15d47ab90a4bf96880329601f116/src%2Fboot%2Fbe%2Fx86.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fbe%2Fx86.ml?ref=69ae63d4b02b15d47ab90a4bf96880329601f116", "patch": "@@ -663,6 +663,7 @@ let emit_c_call\n \n   let emit = Il.emit e in\n   let mov dst src = emit (Il.umov dst src) in\n+  let imov dst src = emit (Il.imov dst src) in\n   let binary op dst imm = emit (Il.binary op dst (c dst) (immi imm)) in\n \n   (* rust calls get task as arg0  *)\n@@ -702,6 +703,8 @@ let emit_c_call\n                         mov (r tmp1) arg;\n                         mov (word_n (h esp) i) (c (r tmp1));\n                 end\n+            | Il.Imm (_, tm) when mach_is_signed tm ->\n+                imov (word_n (h esp) i) arg\n             | _ ->\n                 mov (word_n (h esp) i) arg\n       end\n@@ -2151,7 +2154,7 @@ let mov (signed:bool) (dst:Il.cell) (src:Il.operand) : Asm.frag =\n \n     (* rm32 <- imm32 *)\n     | (_, _, Il.Imm (i, _)) when is_rm32 dst || is_r8 dst ->\n-        let t = if signed then TY_u32 else TY_i32 in\n+        let t = if signed then TY_i32 else TY_u32 in\n           insn_rm_r_imm 0xc7 dst slash0 t i\n \n     | _ -> raise Unrecognized"}, {"sha": "67a96030fa6109109aeb2d04fd2ed5e22cdf7450", "filename": "src/boot/me/trans.ml", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/69ae63d4b02b15d47ab90a4bf96880329601f116/src%2Fboot%2Fme%2Ftrans.ml", "raw_url": "https://github.com/rust-lang/rust/raw/69ae63d4b02b15d47ab90a4bf96880329601f116/src%2Fboot%2Fme%2Ftrans.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftrans.ml?ref=69ae63d4b02b15d47ab90a4bf96880329601f116", "patch": "@@ -316,6 +316,10 @@ let trans_visitor\n     Il.Mem (mem, Il.ScalarTy (Il.ValTy word_bits))\n   in\n \n+  let imov (dst:Il.cell) (src:Il.operand) : unit =\n+    emit (Il.imov dst src)\n+  in\n+\n   let mov (dst:Il.cell) (src:Il.operand) : unit =\n     emit (Il.umov dst src)\n   in\n@@ -398,8 +402,10 @@ let trans_visitor\n     (in_quad_category \"crate_rel -> ptr\"\n        (fun _ ->\n           let cell = next_vreg_cell (Il.AddrTy rty) in\n+          let diff = next_vreg_cell (Il.AddrTy rty) in\n             mov cell (Il.Cell (curr_crate_ptr()));\n-            add_to cell rel;\n+            imov diff rel;\n+            add_to cell (Il.Cell diff);\n             cell))\n \n   (* \n@@ -1566,7 +1572,7 @@ let trans_visitor\n       Abi.load_fixup_addr (emitter())\n         crate_ptr_reg cx.ctxt_crate_fixup Il.OpaqueTy;\n       mov (word_at (fp_imm frame_crate_ptr)) (Il.Cell (crate_ptr_cell));\n-      mov (word_at (fp_imm frame_fns_disp)) frame_fns\n+      imov (word_at (fp_imm frame_fns_disp)) frame_fns\n \n   and check_interrupt_flag _ =\n     if cx.ctxt_sess.Session.sess_minimal\n@@ -2307,7 +2313,7 @@ let trans_visitor\n                 else Il.JL\n               in\n                 (* Start with assumption lhs < rhs *)\n-                mov result neg_one;\n+                imov result neg_one;\n                 let lhs_lt_rhs_jmps =\n                   trans_compare ~ty_params ~cjmp ~ty lhs rhs\n                 in"}]}