{"sha": "9526c0c6e83f37deb1d48e9761ee9bee2ae94f60", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1MjZjMGM2ZTgzZjM3ZGViMWQ0OGU5NzYxZWU5YmVlMmFlOTRmNjA=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2021-02-12T22:32:46Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2021-02-13T19:30:07Z"}, "message": "Avoid `trait_ref` when lowering ExistentialProjections", "tree": {"sha": "705e18236da8e118802f393261b9eb0c1f9d9751", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/705e18236da8e118802f393261b9eb0c1f9d9751"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9526c0c6e83f37deb1d48e9761ee9bee2ae94f60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9526c0c6e83f37deb1d48e9761ee9bee2ae94f60", "html_url": "https://github.com/rust-lang/rust/commit/9526c0c6e83f37deb1d48e9761ee9bee2ae94f60", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9526c0c6e83f37deb1d48e9761ee9bee2ae94f60/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0bf1d73d229fdd0c22ef87b1c764c88cf35dd616", "url": "https://api.github.com/repos/rust-lang/rust/commits/0bf1d73d229fdd0c22ef87b1c764c88cf35dd616", "html_url": "https://github.com/rust-lang/rust/commit/0bf1d73d229fdd0c22ef87b1c764c88cf35dd616"}], "stats": {"total": 80, "additions": 44, "deletions": 36}, "files": [{"sha": "388a576787055cbf09fb732652d30d92dafcd7cf", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/9526c0c6e83f37deb1d48e9761ee9bee2ae94f60/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9526c0c6e83f37deb1d48e9761ee9bee2ae94f60/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=9526c0c6e83f37deb1d48e9761ee9bee2ae94f60", "patch": "@@ -1477,12 +1477,11 @@ impl<'tcx> ExistentialProjection<'tcx> {\n     /// For example, if this is a projection of `exists T. <T as Iterator>::Item == X`,\n     /// then this function would return a `exists T. T: Iterator` existential trait\n     /// reference.\n-    pub fn trait_ref(&self, tcx: TyCtxt<'_>) -> ty::ExistentialTraitRef<'tcx> {\n-        // FIXME(generic_associated_types): substs is the substs of the\n-        // associated type, which should be truncated to get the correct substs\n-        // for the trait.\n+    pub fn trait_ref(&self, tcx: TyCtxt<'tcx>) -> ty::ExistentialTraitRef<'tcx> {\n         let def_id = tcx.associated_item(self.item_def_id).container.id();\n-        ty::ExistentialTraitRef { def_id, substs: self.substs }\n+        let subst_count = tcx.generics_of(def_id).count() - 1;\n+        let substs = tcx.intern_substs(&self.substs[..subst_count]);\n+        ty::ExistentialTraitRef { def_id, substs }\n     }\n \n     pub fn with_self_ty(\n@@ -1501,6 +1500,20 @@ impl<'tcx> ExistentialProjection<'tcx> {\n             ty: self.ty,\n         }\n     }\n+\n+    pub fn erase_self_ty(\n+        tcx: TyCtxt<'tcx>,\n+        projection_predicate: ty::ProjectionPredicate<'tcx>,\n+    ) -> Self {\n+        // Assert there is a Self.\n+        projection_predicate.projection_ty.substs.type_at(0);\n+\n+        Self {\n+            item_def_id: projection_predicate.projection_ty.item_def_id,\n+            substs: tcx.intern_substs(&projection_predicate.projection_ty.substs[1..]),\n+            ty: projection_predicate.ty,\n+        }\n+    }\n }\n \n impl<'tcx> PolyExistentialProjection<'tcx> {"}, {"sha": "aa496f8722e952c834e501e85ac7560e74e5943f", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 26, "deletions": 31, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/9526c0c6e83f37deb1d48e9761ee9bee2ae94f60/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9526c0c6e83f37deb1d48e9761ee9bee2ae94f60/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=9526c0c6e83f37deb1d48e9761ee9bee2ae94f60", "patch": "@@ -985,10 +985,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         //\n         // We want to produce `<B as SuperTrait<i32>>::T == foo`.\n \n-        debug!(\n-            \"add_predicates_for_ast_type_binding(hir_ref_id {:?}, trait_ref {:?}, binding {:?}, bounds {:?}\",\n-            hir_ref_id, trait_ref, binding, bounds\n-        );\n+        debug!(?hir_ref_id, ?trait_ref, ?binding, ?bounds, \"add_predicates_for_ast_type_binding\",);\n         let tcx = self.tcx();\n \n         let candidate =\n@@ -1326,37 +1323,35 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         debug!(\"regular_traits: {:?}\", regular_traits);\n         debug!(\"auto_traits: {:?}\", auto_traits);\n \n-        // Transform a `PolyTraitRef` into a `PolyExistentialTraitRef` by\n-        // removing the dummy `Self` type (`trait_object_dummy_self`).\n-        let trait_ref_to_existential = |trait_ref: ty::TraitRef<'tcx>| {\n-            if trait_ref.self_ty() != dummy_self {\n-                // FIXME: There appears to be a missing filter on top of `expand_trait_aliases`,\n-                // which picks up non-supertraits where clauses - but also, the object safety\n-                // completely ignores trait aliases, which could be object safety hazards. We\n-                // `delay_span_bug` here to avoid an ICE in stable even when the feature is\n-                // disabled. (#66420)\n-                tcx.sess.delay_span_bug(\n-                    DUMMY_SP,\n-                    &format!(\n-                        \"trait_ref_to_existential called on {:?} with non-dummy Self\",\n-                        trait_ref,\n-                    ),\n-                );\n-            }\n-            ty::ExistentialTraitRef::erase_self_ty(tcx, trait_ref)\n-        };\n-\n         // Erase the `dummy_self` (`trait_object_dummy_self`) used above.\n-        let existential_trait_refs =\n-            regular_traits.iter().map(|i| i.trait_ref().map_bound(trait_ref_to_existential));\n+        let existential_trait_refs = regular_traits.iter().map(|i| {\n+            i.trait_ref().map_bound(|trait_ref: ty::TraitRef<'tcx>| {\n+                if trait_ref.self_ty() != dummy_self {\n+                    // FIXME: There appears to be a missing filter on top of `expand_trait_aliases`,\n+                    // which picks up non-supertraits where clauses - but also, the object safety\n+                    // completely ignores trait aliases, which could be object safety hazards. We\n+                    // `delay_span_bug` here to avoid an ICE in stable even when the feature is\n+                    // disabled. (#66420)\n+                    tcx.sess.delay_span_bug(\n+                        DUMMY_SP,\n+                        &format!(\n+                            \"trait_ref_to_existential called on {:?} with non-dummy Self\",\n+                            trait_ref,\n+                        ),\n+                    );\n+                }\n+                ty::ExistentialTraitRef::erase_self_ty(tcx, trait_ref)\n+            })\n+        });\n         let existential_projections = bounds.projection_bounds.iter().map(|(bound, _)| {\n             bound.map_bound(|b| {\n-                let trait_ref = trait_ref_to_existential(b.projection_ty.trait_ref(tcx));\n-                ty::ExistentialProjection {\n-                    ty: b.ty,\n-                    item_def_id: b.projection_ty.item_def_id,\n-                    substs: trait_ref.substs,\n+                if b.projection_ty.self_ty() != dummy_self {\n+                    tcx.sess.delay_span_bug(\n+                        DUMMY_SP,\n+                        &format!(\"trait_ref_to_existential called on {:?} with non-dummy Self\", b),\n+                    );\n                 }\n+                ty::ExistentialProjection::erase_self_ty(tcx, b)\n             })\n         });\n "}]}