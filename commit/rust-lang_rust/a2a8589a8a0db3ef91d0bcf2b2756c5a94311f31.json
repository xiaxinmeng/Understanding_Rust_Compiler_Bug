{"sha": "a2a8589a8a0db3ef91d0bcf2b2756c5a94311f31", "node_id": "C_kwDOAAsO6NoAKGEyYTg1ODlhOGEwZGIzZWY5MWQwYmNmMmIyNzU2YzVhOTQzMTFmMzE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-05-29T19:34:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-29T19:34:16Z"}, "message": "Rollup merge of #111827 - AngelicosPhosphoros:add_docs_to_cranelift, r=bjorn3\n\nAdd build instructions for cranelift backend as part of Rust repo\n\nAll other instructions assume that user works with separate repository than Rust compiler repository. When one follows default instructions, cranelift codegen tries to use different sys-root and compiler internal crates which leads to compiler errors when building it.\n\nI needed to do all this steps while adding new intrinsic to rustc.\n\nr? bjorn3", "tree": {"sha": "20a5b7d3d0a415157c12f553b90aa809c53f9c5c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20a5b7d3d0a415157c12f553b90aa809c53f9c5c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a2a8589a8a0db3ef91d0bcf2b2756c5a94311f31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a2a8589a8a0db3ef91d0bcf2b2756c5a94311f31", "html_url": "https://github.com/rust-lang/rust/commit/a2a8589a8a0db3ef91d0bcf2b2756c5a94311f31", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a2a8589a8a0db3ef91d0bcf2b2756c5a94311f31/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e87728772dbc8c99246165a6c1bdf46b44ad952", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e87728772dbc8c99246165a6c1bdf46b44ad952", "html_url": "https://github.com/rust-lang/rust/commit/4e87728772dbc8c99246165a6c1bdf46b44ad952"}, {"sha": "8aa3eba564275448a7f443646fefbe6558a6e34c", "url": "https://api.github.com/repos/rust-lang/rust/commits/8aa3eba564275448a7f443646fefbe6558a6e34c", "html_url": "https://github.com/rust-lang/rust/commit/8aa3eba564275448a7f443646fefbe6558a6e34c"}], "stats": {"total": 26, "additions": 26, "deletions": 0}, "files": [{"sha": "26dccf309e1e402ff3e8700850bc1a2e81ad43d0", "filename": "Readme.md", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a2a8589a8a0db3ef91d0bcf2b2756c5a94311f31/Readme.md", "raw_url": "https://github.com/rust-lang/rust/raw/a2a8589a8a0db3ef91d0bcf2b2756c5a94311f31/Readme.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Readme.md?ref=a2a8589a8a0db3ef91d0bcf2b2756c5a94311f31", "patch": "@@ -42,6 +42,32 @@ This will build your project with rustc_codegen_cranelift instead of the usual L\n \n For additional ways to use rustc_codegen_cranelift like the JIT mode see [usage.md](docs/usage.md).\n \n+## Building and testing with changes in rustc code\n+\n+This is useful when changing code in `rustc_codegen_cranelift` as part of changing [main Rust repository](https://github.com/rust-lang/rust/).\n+This can happen, for example, when you are implementing a new compiler intrinsic.\n+\n+Instruction below uses `$RustCheckoutDir` as substitute for any folder where you cloned Rust repository.\n+\n+You need to do this steps to successfully compile and use the cranelift backend with your changes in rustc code:\n+\n+1. `cd $RustCheckoutDir`\n+2. Run `python x.py setup` and choose option for compiler (`b`).\n+3. Build compiler and necessary tools: `python x.py build --stage=2 compiler library/std src/tools/rustdoc src/tools/rustfmt`\n+   * (Optional) You can also build cargo by adding `src/tools/cargo` to previous command.\n+4. Copy exectutable files from `./build/host/stage2-tools/<your hostname triple>/release`\n+to `./build/host/stage2/bin/`. Note that you would need to do this every time you rebuilt `rust` repository.\n+5. Copy cargo from another toolchain: `cp $(rustup which cargo) .build/<your hostname triple>/stage2/bin/cargo`\n+   * Another option is to build it at step 3 and copy with other executables at step 4.\n+6. Link your new `rustc` to toolchain: `rustup toolchain link stage2 ./build/host/stage2/`.\n+7. (Windows only) compile y.rs: `rustc +stage2 -O y.rs`.\n+8. You need to prefix every `./y.rs` (or `y` if you built `y.rs`) command by `rustup run stage2` to make cg_clif use your local changes in rustc.\n+\n+  * `rustup run stage2 ./y.rs prepare`\n+  * `rustup run stage2 ./y.rs build`\n+  * (Optional) run tests: `rustup run stage2 ./y.rs test`\n+9. Now you can use your cg_clif build to compile other Rust programs, e.g. you can open any Rust crate and run commands like `$RustCheckoutDir/compiler/rustc_codegen_cranelift/dist/cargo-clif build --release`.\n+\n ## Configuration\n \n See the documentation on the `BackendConfig` struct in [config.rs](src/config.rs) for all"}]}