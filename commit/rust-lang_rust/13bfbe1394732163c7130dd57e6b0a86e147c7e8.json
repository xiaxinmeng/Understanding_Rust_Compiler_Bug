{"sha": "13bfbe1394732163c7130dd57e6b0a86e147c7e8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzYmZiZTEzOTQ3MzIxNjNjNzEzMGRkNTdlNmIwYTg2ZTE0N2M3ZTg=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-03-20T09:36:45Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-03-20T09:36:45Z"}, "message": "Encode/decode extern statics in metadata and incremental cache", "tree": {"sha": "3197875efa603919660b60e6c35c4715eb912d40", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3197875efa603919660b60e6c35c4715eb912d40"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13bfbe1394732163c7130dd57e6b0a86e147c7e8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAlqw1i0ACgkQpp+NIls6\n19l95g//e4uJd637CtOsm/iOAaYxxl4UK1l6SzI+av+GKlttpuldpJhZWxuah4vP\nFaS9WDfqRdM128moBFs0XVkQHOiy/aFgM5Nd8UHybhPBsbTX2QsewoKidOg4YC13\nD5PgQKdYK1HQl6TFjJqXW6sJZww33Y/n7ee/iOnRyBlbpYK/o0KCwpo2SXTA3PI3\naguwTVCoythfP87xLm+CK2PKT7hKYhQ2Scu3KgKVGnIfrHx351lIqeglIbOjajlT\nkDwb+zZviK2NMyyw5UQkjCsFw+snRPsJu7hu7tdndqiDk0Y+c9b7YM1viRAXU8i5\nQ/WZLD240BY/RuH8qCQMc3i7whQY9tAV96s1XTQF4bseElB73JDzQiij7nz1Ee2g\nfQnM9mptac43FVCRHcaYphBtVF0gJhXjhi/tCviwCOESfxra5NUsvsAIM7mV/ey8\nLNhEr1acUAUI+pVLXzH22jUapqfR4m+S5dJHqTZ6iq2SKxnthRKC8GQyTjLHAZ+4\nOY99Sld+8Sok80ixZSBC4150bPDMeFEpdSkGJ6n6g1JCkxFWxtG2pZ583HbpK8Sp\nuMzX/5IofxdYDlHfPYABNN9gvzBpS1+0dLuGpX5jypm74KKUCeBpCdtrT230LuEw\nht9HXiJaj5GPBbFgQxJE4B36Vg/HRsHHVKf39EVe7dC8pRuTL2c=\n=/ivr\n-----END PGP SIGNATURE-----", "payload": "tree 3197875efa603919660b60e6c35c4715eb912d40\nparent 6bfa7d02d6713acd15ead20c199b808e85031f9e\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1521538605 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1521538605 +0100\n\nEncode/decode extern statics in metadata and incremental cache\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13bfbe1394732163c7130dd57e6b0a86e147c7e8", "html_url": "https://github.com/rust-lang/rust/commit/13bfbe1394732163c7130dd57e6b0a86e147c7e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13bfbe1394732163c7130dd57e6b0a86e147c7e8/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6bfa7d02d6713acd15ead20c199b808e85031f9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/6bfa7d02d6713acd15ead20c199b808e85031f9e", "html_url": "https://github.com/rust-lang/rust/commit/6bfa7d02d6713acd15ead20c199b808e85031f9e"}], "stats": {"total": 41, "additions": 38, "deletions": 3}, "files": [{"sha": "e242ec4985ab4ae838f7a974aef0776fcf4fc4d4", "filename": "src/librustc/mir/interpret/mod.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/13bfbe1394732163c7130dd57e6b0a86e147c7e8/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bfbe1394732163c7130dd57e6b0a86e147c7e8/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs?ref=13bfbe1394732163c7130dd57e6b0a86e147c7e8", "patch": "@@ -156,6 +156,8 @@ impl ::rustc_serialize::UseSpecializedDecodable for AllocId {}\n \n pub const ALLOC_DISCRIMINANT: usize = 0;\n pub const FN_DISCRIMINANT: usize = 1;\n+pub const EXTERN_STATIC_DISCRIMINANT: usize = 2;\n+pub const SHORTHAND_START: usize = 3;\n \n pub fn specialized_encode_alloc_id<\n     'a, 'tcx,\n@@ -173,13 +175,18 @@ pub fn specialized_encode_alloc_id<\n         trace!(\"encoding {:?} with {:#?}\", alloc_id, alloc);\n         ALLOC_DISCRIMINANT.encode(encoder)?;\n         alloc.encode(encoder)?;\n+        // encode whether this allocation is the root allocation of a static\n         tcx.interpret_interner\n             .get_corresponding_static_def_id(alloc_id)\n             .encode(encoder)?;\n     } else if let Some(fn_instance) = tcx.interpret_interner.get_fn(alloc_id) {\n         trace!(\"encoding {:?} with {:#?}\", alloc_id, fn_instance);\n         FN_DISCRIMINANT.encode(encoder)?;\n         fn_instance.encode(encoder)?;\n+    } else if let Some(did) = tcx.interpret_interner.get_corresponding_static_def_id(alloc_id) {\n+        // extern \"C\" statics don't have allocations, just encode its def_id\n+        EXTERN_STATIC_DISCRIMINANT.encode(encoder)?;\n+        did.encode(encoder)?;\n     } else {\n         bug!(\"alloc id without corresponding allocation: {}\", alloc_id);\n     }\n@@ -225,6 +232,13 @@ pub fn specialized_decode_alloc_id<\n             cache(decoder, pos, id);\n             Ok(id)\n         },\n+        EXTERN_STATIC_DISCRIMINANT => {\n+            trace!(\"creating extern static alloc id at {}\", pos);\n+            let did = DefId::decode(decoder)?;\n+            let alloc_id = tcx.interpret_interner.reserve();\n+            tcx.interpret_interner.cache(did, alloc_id);\n+            Ok(alloc_id)\n+        },\n         shorthand => {\n             trace!(\"loading shorthand {}\", shorthand);\n             short(decoder, shorthand)"}, {"sha": "d636246b57f1b9cf316cfb767cd359623986b701", "filename": "src/librustc/ty/maps/on_disk_cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13bfbe1394732163c7130dd57e6b0a86e147c7e8/src%2Flibrustc%2Fty%2Fmaps%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bfbe1394732163c7130dd57e6b0a86e147c7e8/src%2Flibrustc%2Fty%2Fmaps%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fon_disk_cache.rs?ref=13bfbe1394732163c7130dd57e6b0a86e147c7e8", "patch": "@@ -819,7 +819,7 @@ impl<'enc, 'a, 'tcx, E> SpecializedEncoder<interpret::AllocId> for CacheEncoder<\n                 // of the metadata file, because that would end up making our indices\n                 // not special. It is essentially impossible for that to happen,\n                 // but let's make sure\n-                assert!(pos != interpret::ALLOC_DISCRIMINANT && pos != interpret::FN_DISCRIMINANT);\n+                assert!(pos >= interpret::SHORTHAND_START);\n                 entry.insert(pos);\n                 None\n             },"}, {"sha": "6b3453f2c99e832d591bce45fd0c05270f8bf7a9", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13bfbe1394732163c7130dd57e6b0a86e147c7e8/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bfbe1394732163c7130dd57e6b0a86e147c7e8/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=13bfbe1394732163c7130dd57e6b0a86e147c7e8", "patch": "@@ -203,9 +203,9 @@ impl<'a, 'tcx> SpecializedEncoder<interpret::AllocId> for EncodeContext<'a, 'tcx\n             Entry::Occupied(entry) => Some(entry.get().clone()),\n             Entry::Vacant(entry) => {\n                 // ensure that we don't place any AllocIds at the very beginning\n-                // of the metadata file, because that would end up making our 0 and 1 indices\n+                // of the metadata file, because that would end up making our indices\n                 // not special. This is essentially impossible, but let's make sure\n-                assert!(pos != 0 && pos != 1);\n+                assert!(pos >= interpret::SHORTHAND_START);\n                 entry.insert(pos);\n                 None\n             },"}, {"sha": "e0538e09c64707d8482e9ffa2d6cff389978f2f7", "filename": "src/test/incremental/extern_static/issue-49153.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/13bfbe1394732163c7130dd57e6b0a86e147c7e8/src%2Ftest%2Fincremental%2Fextern_static%2Fissue-49153.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13bfbe1394732163c7130dd57e6b0a86e147c7e8/src%2Ftest%2Fincremental%2Fextern_static%2Fissue-49153.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fextern_static%2Fissue-49153.rs?ref=13bfbe1394732163c7130dd57e6b0a86e147c7e8", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// https://github.com/rust-lang/rust/issues/49153\n+\n+// revisions:rpass1 rpass2\n+\n+extern \"C\" {\n+    pub static __ImageBase: u8;\n+}\n+\n+pub static FOO: &'static u8 = unsafe { &__ImageBase };\n+\n+fn main() {}"}]}