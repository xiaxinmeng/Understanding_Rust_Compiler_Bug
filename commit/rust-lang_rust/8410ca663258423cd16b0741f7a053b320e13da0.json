{"sha": "8410ca663258423cd16b0741f7a053b320e13da0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0MTBjYTY2MzI1ODQyM2NkMTZiMDc0MWY3YTA1M2IzMjBlMTNkYTA=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2017-08-31T17:16:24Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2017-09-07T09:14:27Z"}, "message": "Properly detect overflow in Instance +/- Duration.\n\nAvoid unchecked cast from `u64` to `i64`. Use `try_into()` for checked\ncast. (On Unix, cast to `time_t` instead of `i64`.)", "tree": {"sha": "97c6f21fe2697ee48960c6b4d3126914370c1684", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/97c6f21fe2697ee48960c6b4d3126914370c1684"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8410ca663258423cd16b0741f7a053b320e13da0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCAAGBQJZsQ3zAAoJEP72yAUdDgE8Xi0P/jkmsEntPkKYQ5km1guNDyM/\nitjK0hvcq4cF2KqBtpOgupT8eF52p10gXVtM6mMxpdJanqd++Iqc3uZalOStRrso\nHz66ZYQMYRwA4WoXdee26Wgnguy/Yuzkmr59NnugYL2EVl/dYwfsyy5vXSrV1rX7\n0W8BkKwJlGHs0+b+iK6H2TfcUBYClO/yC+t4KwsSsu4vqFkYRzL4OQcsWb/nV1dO\nJx4wINL6SwVbXN9StvZBQ+NIrq7XSfn+nLO5VcG4Cso85XTk2Yv8B0M60albliyB\nz6VU2/HKXQk2YCCMcubhUv0xzgnvru+ip3bIHZoqUbXvUJY4pdqjrnhtpOSPwwrz\nuvdfS6B/MZObUj7mifVXZ2ee3N3okYGbjL3YozHXXkPcaVCkLuFbnlgpeLQDBDKn\niDjd9eplC9MGaB8De0EPBvb+K5LxBshg0i+BLz4X/ILzKXTmGoJODNRH7PbYqIgS\nXZhXLOM4oYyw+0fnCBoANUONa2ArG4VtTh+6Q5MWpsXS+1RtXmpDGaRW+pTMTQhE\nDwXUvNamWMFp2k7DE61Oxw3/HIW2TPFsLYmYTIt0CHeb8G1kUMIXtXko8H3CaVGs\nluneHzFDpyqYNtIF6vUqSTDMKE9JwTxrSjYG06FoWCmAH1b72f0UB8T1cvTJ9AKN\nkWozAC20UbqAcxMJRkC9\n=t09B\n-----END PGP SIGNATURE-----", "payload": "tree 97c6f21fe2697ee48960c6b4d3126914370c1684\nparent a6a9d4c5fd214cb8110482dee2017607e23ccc7b\nauthor kennytm <kennytm@gmail.com> 1504199784 +0800\ncommitter kennytm <kennytm@gmail.com> 1504775667 +0800\n\nProperly detect overflow in Instance +/- Duration.\n\nAvoid unchecked cast from `u64` to `i64`. Use `try_into()` for checked\ncast. (On Unix, cast to `time_t` instead of `i64`.)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8410ca663258423cd16b0741f7a053b320e13da0", "html_url": "https://github.com/rust-lang/rust/commit/8410ca663258423cd16b0741f7a053b320e13da0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8410ca663258423cd16b0741f7a053b320e13da0/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6a9d4c5fd214cb8110482dee2017607e23ccc7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6a9d4c5fd214cb8110482dee2017607e23ccc7b", "html_url": "https://github.com/rust-lang/rust/commit/a6a9d4c5fd214cb8110482dee2017607e23ccc7b"}], "stats": {"total": 89, "additions": 72, "deletions": 17}, "files": [{"sha": "6c071afd42d05a142108ee598f263e2d367abedf", "filename": "src/libstd/sys/redox/time.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8410ca663258423cd16b0741f7a053b320e13da0/src%2Flibstd%2Fsys%2Fredox%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8410ca663258423cd16b0741f7a053b320e13da0/src%2Flibstd%2Fsys%2Fredox%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Ftime.rs?ref=8410ca663258423cd16b0741f7a053b320e13da0", "patch": "@@ -12,6 +12,7 @@ use cmp::Ordering;\n use fmt;\n use sys::{cvt, syscall};\n use time::Duration;\n+use convert::TryInto;\n \n const NSEC_PER_SEC: u64 = 1_000_000_000;\n \n@@ -40,8 +41,12 @@ impl Timespec {\n     }\n \n     fn add_duration(&self, other: &Duration) -> Timespec {\n-        let secs = (self.t.tv_sec as i64).checked_add(other.as_secs() as i64);\n-        let mut secs = secs.expect(\"overflow when adding duration to time\");\n+        let mut secs = other\n+            .as_secs()\n+            .try_into() // <- target type would be `i64`\n+            .ok()\n+            .and_then(|secs| self.t.tv_sec.checked_add(secs))\n+            .expect(\"overflow when adding duration to time\");\n \n         // Nano calculations can't overflow because nanos are <1B which fit\n         // in a u32.\n@@ -53,16 +58,19 @@ impl Timespec {\n         }\n         Timespec {\n             t: syscall::TimeSpec {\n-                tv_sec: secs as i64,\n+                tv_sec: secs,\n                 tv_nsec: nsec as i32,\n             },\n         }\n     }\n \n     fn sub_duration(&self, other: &Duration) -> Timespec {\n-        let secs = (self.t.tv_sec as i64).checked_sub(other.as_secs() as i64);\n-        let mut secs = secs.expect(\"overflow when subtracting duration \\\n-                                    from time\");\n+        let mut secs = other\n+            .as_secs()\n+            .try_into() // <- target type would be `i64`\n+            .ok()\n+            .and_then(|secs| self.t.tv_sec.checked_sub(secs))\n+            .expect(\"overflow when subtracting duration from time\");\n \n         // Similar to above, nanos can't overflow.\n         let mut nsec = self.t.tv_nsec as i32 - other.subsec_nanos() as i32;\n@@ -73,7 +81,7 @@ impl Timespec {\n         }\n         Timespec {\n             t: syscall::TimeSpec {\n-                tv_sec: secs as i64,\n+                tv_sec: secs,\n                 tv_nsec: nsec as i32,\n             },\n         }"}, {"sha": "c1bea95ce91abb0135ab2507f0807f19dbb92597", "filename": "src/libstd/sys/unix/time.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8410ca663258423cd16b0741f7a053b320e13da0/src%2Flibstd%2Fsys%2Funix%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8410ca663258423cd16b0741f7a053b320e13da0/src%2Flibstd%2Fsys%2Funix%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ftime.rs?ref=8410ca663258423cd16b0741f7a053b320e13da0", "patch": "@@ -13,6 +13,7 @@ use libc;\n use time::Duration;\n \n pub use self::inner::{Instant, SystemTime, UNIX_EPOCH};\n+use convert::TryInto;\n \n const NSEC_PER_SEC: u64 = 1_000_000_000;\n \n@@ -41,8 +42,12 @@ impl Timespec {\n     }\n \n     fn add_duration(&self, other: &Duration) -> Timespec {\n-        let secs = (self.t.tv_sec as i64).checked_add(other.as_secs() as i64);\n-        let mut secs = secs.expect(\"overflow when adding duration to time\");\n+        let mut secs = other\n+            .as_secs()\n+            .try_into() // <- target type would be `libc::time_t`\n+            .ok()\n+            .and_then(|secs| self.t.tv_sec.checked_add(secs))\n+            .expect(\"overflow when adding duration to time\");\n \n         // Nano calculations can't overflow because nanos are <1B which fit\n         // in a u32.\n@@ -54,16 +59,19 @@ impl Timespec {\n         }\n         Timespec {\n             t: libc::timespec {\n-                tv_sec: secs as libc::time_t,\n+                tv_sec: secs,\n                 tv_nsec: nsec as libc::c_long,\n             },\n         }\n     }\n \n     fn sub_duration(&self, other: &Duration) -> Timespec {\n-        let secs = (self.t.tv_sec as i64).checked_sub(other.as_secs() as i64);\n-        let mut secs = secs.expect(\"overflow when subtracting duration \\\n-                                    from time\");\n+        let mut secs = other\n+            .as_secs()\n+            .try_into() // <- target type would be `libc::time_t`\n+            .ok()\n+            .and_then(|secs| self.t.tv_sec.checked_sub(secs))\n+            .expect(\"overflow when subtracting duration from time\");\n \n         // Similar to above, nanos can't overflow.\n         let mut nsec = self.t.tv_nsec as i32 - other.subsec_nanos() as i32;\n@@ -74,7 +82,7 @@ impl Timespec {\n         }\n         Timespec {\n             t: libc::timespec {\n-                tv_sec: secs as libc::time_t,\n+                tv_sec: secs,\n                 tv_nsec: nsec as libc::c_long,\n             },\n         }"}, {"sha": "1be29b5139a557145ca14b7f5dd771cb3476fa41", "filename": "src/libstd/sys/windows/time.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8410ca663258423cd16b0741f7a053b320e13da0/src%2Flibstd%2Fsys%2Fwindows%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8410ca663258423cd16b0741f7a053b320e13da0/src%2Flibstd%2Fsys%2Fwindows%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ftime.rs?ref=8410ca663258423cd16b0741f7a053b320e13da0", "patch": "@@ -16,6 +16,7 @@ use sys::c;\n use sys::cvt;\n use sys_common::mul_div_u64;\n use time::Duration;\n+use convert::TryInto;\n \n const NANOS_PER_SEC: u64 = 1_000_000_000;\n const INTERVALS_PER_SEC: u64 = NANOS_PER_SEC / 100;\n@@ -173,9 +174,11 @@ impl From<c::FILETIME> for SystemTime {\n }\n \n fn dur2intervals(d: &Duration) -> i64 {\n-    d.as_secs().checked_mul(INTERVALS_PER_SEC).and_then(|i| {\n-        i.checked_add(d.subsec_nanos() as u64 / 100)\n-    }).expect(\"overflow when converting duration to intervals\") as i64\n+    d.as_secs()\n+        .checked_mul(INTERVALS_PER_SEC)\n+        .and_then(|i| i.checked_add(d.subsec_nanos() as u64 / 100))\n+        .and_then(|i| i.try_into().ok())\n+        .expect(\"overflow when converting duration to intervals\")\n }\n \n fn intervals2dur(intervals: u64) -> Duration {"}, {"sha": "18bacd0459b2dad0bdb25924bbbede5ef0bfdcba", "filename": "src/test/run-fail/issue-44216-add.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8410ca663258423cd16b0741f7a053b320e13da0/src%2Ftest%2Frun-fail%2Fissue-44216-add.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8410ca663258423cd16b0741f7a053b320e13da0/src%2Ftest%2Frun-fail%2Fissue-44216-add.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fissue-44216-add.rs?ref=8410ca663258423cd16b0741f7a053b320e13da0", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// error-pattern:overflow when\n+\n+use std::time::{Instant, Duration};\n+\n+fn main() {\n+    let now = Instant::now();\n+    let _ = now + Duration::from_secs(u64::max_value());\n+}"}, {"sha": "551401c51bbec38876e06c33da2de622f2e5b4e5", "filename": "src/test/run-fail/issue-44216-sub.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8410ca663258423cd16b0741f7a053b320e13da0/src%2Ftest%2Frun-fail%2Fissue-44216-sub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8410ca663258423cd16b0741f7a053b320e13da0/src%2Ftest%2Frun-fail%2Fissue-44216-sub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fissue-44216-sub.rs?ref=8410ca663258423cd16b0741f7a053b320e13da0", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// error-pattern:overflow when\n+\n+use std::time::{Instant, Duration};\n+\n+fn main() {\n+    let now = Instant::now();\n+    let _ = now - Duration::from_secs(u64::max_value());\n+}"}]}