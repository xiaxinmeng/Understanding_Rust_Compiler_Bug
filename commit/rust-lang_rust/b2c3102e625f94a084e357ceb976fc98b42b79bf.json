{"sha": "b2c3102e625f94a084e357ceb976fc98b42b79bf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyYzMxMDJlNjI1Zjk0YTA4NGUzNTdjZWI5NzZmYzk4YjQyYjc5YmY=", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@gmail.com", "date": "2017-04-14T20:25:49Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gmail.com", "date": "2017-04-28T20:08:37Z"}, "message": "fmt: use mem::uninitialized for float formatting buffers\n\nSpending time to initialize these is just wasted work, as we'll\noverwrite them soon anyway.\n\nFixes #41259.", "tree": {"sha": "ebbb7c9d7ee0d7a837b3ddb18705ba0b8d2a2afe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ebbb7c9d7ee0d7a837b3ddb18705ba0b8d2a2afe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b2c3102e625f94a084e357ceb976fc98b42b79bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b2c3102e625f94a084e357ceb976fc98b42b79bf", "html_url": "https://github.com/rust-lang/rust/commit/b2c3102e625f94a084e357ceb976fc98b42b79bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b2c3102e625f94a084e357ceb976fc98b42b79bf/comments", "author": {"login": "froydnj", "id": 151096, "node_id": "MDQ6VXNlcjE1MTA5Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/151096?v=4", "gravatar_id": "", "url": "https://api.github.com/users/froydnj", "html_url": "https://github.com/froydnj", "followers_url": "https://api.github.com/users/froydnj/followers", "following_url": "https://api.github.com/users/froydnj/following{/other_user}", "gists_url": "https://api.github.com/users/froydnj/gists{/gist_id}", "starred_url": "https://api.github.com/users/froydnj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/froydnj/subscriptions", "organizations_url": "https://api.github.com/users/froydnj/orgs", "repos_url": "https://api.github.com/users/froydnj/repos", "events_url": "https://api.github.com/users/froydnj/events{/privacy}", "received_events_url": "https://api.github.com/users/froydnj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "froydnj", "id": 151096, "node_id": "MDQ6VXNlcjE1MTA5Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/151096?v=4", "gravatar_id": "", "url": "https://api.github.com/users/froydnj", "html_url": "https://github.com/froydnj", "followers_url": "https://api.github.com/users/froydnj/followers", "following_url": "https://api.github.com/users/froydnj/following{/other_user}", "gists_url": "https://api.github.com/users/froydnj/gists{/gist_id}", "starred_url": "https://api.github.com/users/froydnj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/froydnj/subscriptions", "organizations_url": "https://api.github.com/users/froydnj/orgs", "repos_url": "https://api.github.com/users/froydnj/repos", "events_url": "https://api.github.com/users/froydnj/events{/privacy}", "received_events_url": "https://api.github.com/users/froydnj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2499d819d41b87d9b562377479e4a81f74bd49f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/2499d819d41b87d9b562377479e4a81f74bd49f1", "html_url": "https://github.com/rust-lang/rust/commit/2499d819d41b87d9b562377479e4a81f74bd49f1"}], "stats": {"total": 56, "additions": 34, "deletions": 22}, "files": [{"sha": "87def375b202b17e2e38c85cc62453e911b7992d", "filename": "src/libcore/fmt/float.rs", "status": "modified", "additions": 34, "deletions": 22, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/b2c3102e625f94a084e357ceb976fc98b42b79bf/src%2Flibcore%2Ffmt%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2c3102e625f94a084e357ceb976fc98b42b79bf/src%2Flibcore%2Ffmt%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Ffloat.rs?ref=b2c3102e625f94a084e357ceb976fc98b42b79bf", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n use fmt::{Formatter, Result, LowerExp, UpperExp, Display, Debug};\n+use mem;\n use num::flt2dec;\n \n // Don't inline this so callers don't use the stack space this function\n@@ -18,12 +19,14 @@ fn float_to_decimal_common_exact<T>(fmt: &mut Formatter, num: &T,\n                                     sign: flt2dec::Sign, precision: usize) -> Result\n     where T: flt2dec::DecodableFloat\n {\n-    let mut buf = [0; 1024]; // enough for f32 and f64\n-    let mut parts = [flt2dec::Part::Zero(0); 5];\n-    let formatted = flt2dec::to_exact_fixed_str(flt2dec::strategy::grisu::format_exact,\n-                                                *num, sign, precision,\n-                                                false, &mut buf, &mut parts);\n-    fmt.pad_formatted_parts(&formatted)\n+    unsafe {\n+        let mut buf: [u8; 1024] = mem::uninitialized(); // enough for f32 and f64\n+        let mut parts: [flt2dec::Part; 5] = mem::uninitialized();\n+        let formatted = flt2dec::to_exact_fixed_str(flt2dec::strategy::grisu::format_exact,\n+                                                    *num, sign, precision,\n+                                                    false, &mut buf, &mut parts);\n+        fmt.pad_formatted_parts(&formatted)\n+    }\n }\n \n // Don't inline this so callers that call both this and the above won't wind\n@@ -33,11 +36,14 @@ fn float_to_decimal_common_shortest<T>(fmt: &mut Formatter,\n                                        num: &T, sign: flt2dec::Sign) -> Result\n     where T: flt2dec::DecodableFloat\n {\n-    let mut buf = [0; flt2dec::MAX_SIG_DIGITS]; // enough for f32 and f64\n-    let mut parts = [flt2dec::Part::Zero(0); 5];\n-    let formatted = flt2dec::to_shortest_str(flt2dec::strategy::grisu::format_shortest,\n-                                             *num, sign, 0, false, &mut buf, &mut parts);\n-    fmt.pad_formatted_parts(&formatted)\n+    unsafe {\n+        // enough for f32 and f64\n+        let mut buf: [u8; flt2dec::MAX_SIG_DIGITS] = mem::uninitialized();\n+        let mut parts: [flt2dec::Part; 5] = mem::uninitialized();\n+        let formatted = flt2dec::to_shortest_str(flt2dec::strategy::grisu::format_shortest,\n+                                                 *num, sign, 0, false, &mut buf, &mut parts);\n+        fmt.pad_formatted_parts(&formatted)\n+    }\n }\n \n // Common code of floating point Debug and Display.\n@@ -67,12 +73,14 @@ fn float_to_exponential_common_exact<T>(fmt: &mut Formatter, num: &T,\n                                         upper: bool) -> Result\n     where T: flt2dec::DecodableFloat\n {\n-    let mut buf = [0; 1024]; // enough for f32 and f64\n-    let mut parts = [flt2dec::Part::Zero(0); 7];\n-    let formatted = flt2dec::to_exact_exp_str(flt2dec::strategy::grisu::format_exact,\n-                                              *num, sign, precision,\n-                                              upper, &mut buf, &mut parts);\n-    fmt.pad_formatted_parts(&formatted)\n+    unsafe {\n+        let mut buf: [u8; 1024] = mem::uninitialized(); // enough for f32 and f64\n+        let mut parts: [flt2dec::Part; 7] = mem::uninitialized();\n+        let formatted = flt2dec::to_exact_exp_str(flt2dec::strategy::grisu::format_exact,\n+                                                  *num, sign, precision,\n+                                                  upper, &mut buf, &mut parts);\n+        fmt.pad_formatted_parts(&formatted)\n+    }\n }\n \n // Don't inline this so callers that call both this and the above won't wind\n@@ -83,11 +91,15 @@ fn float_to_exponential_common_shortest<T>(fmt: &mut Formatter,\n                                            upper: bool) -> Result\n     where T: flt2dec::DecodableFloat\n {\n-    let mut buf = [0; flt2dec::MAX_SIG_DIGITS]; // enough for f32 and f64\n-    let mut parts = [flt2dec::Part::Zero(0); 7];\n-    let formatted = flt2dec::to_shortest_exp_str(flt2dec::strategy::grisu::format_shortest, *num,\n-                                                 sign, (0, 0), upper, &mut buf, &mut parts);\n-    fmt.pad_formatted_parts(&formatted)\n+    unsafe {\n+        // enough for f32 and f64\n+        let mut buf: [u8; flt2dec::MAX_SIG_DIGITS] = mem::uninitialized();\n+        let mut parts: [flt2dec::Part; 7] = mem::uninitialized();\n+        let formatted = flt2dec::to_shortest_exp_str(flt2dec::strategy::grisu::format_shortest,\n+                                                     *num, sign, (0, 0), upper,\n+                                                     &mut buf, &mut parts);\n+        fmt.pad_formatted_parts(&formatted)\n+    }\n }\n \n // Common code of floating point LowerExp and UpperExp."}]}