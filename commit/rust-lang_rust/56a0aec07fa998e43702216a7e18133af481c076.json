{"sha": "56a0aec07fa998e43702216a7e18133af481c076", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2YTBhZWMwN2ZhOTk4ZTQzNzAyMjE2YTdlMTgxMzNhZjQ4MWMwNzY=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-01-05T18:52:56Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-01-07T16:47:49Z"}, "message": "Move subst_and_normalize_erasing_regionsto rustc::ty.", "tree": {"sha": "d207e733d8b581c7e05ded869b9c013c597790eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d207e733d8b581c7e05ded869b9c013c597790eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56a0aec07fa998e43702216a7e18133af481c076", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56a0aec07fa998e43702216a7e18133af481c076", "html_url": "https://github.com/rust-lang/rust/commit/56a0aec07fa998e43702216a7e18133af481c076", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56a0aec07fa998e43702216a7e18133af481c076/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a80bff87c19cf91deafefc8fdaace71f77727258", "url": "https://api.github.com/repos/rust-lang/rust/commits/a80bff87c19cf91deafefc8fdaace71f77727258", "html_url": "https://github.com/rust-lang/rust/commit/a80bff87c19cf91deafefc8fdaace71f77727258"}], "stats": {"total": 50, "additions": 24, "deletions": 26}, "files": [{"sha": "8a264a79fb6c27cc8d82861e9cd323c640315c88", "filename": "src/librustc/traits/codegen/mod.rs", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/56a0aec07fa998e43702216a7e18133af481c076/src%2Flibrustc%2Ftraits%2Fcodegen%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56a0aec07fa998e43702216a7e18133af481c076/src%2Flibrustc%2Ftraits%2Fcodegen%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fcodegen%2Fmod.rs?ref=56a0aec07fa998e43702216a7e18133af481c076", "patch": "@@ -8,7 +8,6 @@ use crate::traits::{\n     FulfillmentContext, Obligation, ObligationCause, SelectionContext, TraitEngine, Vtable,\n };\n use crate::ty::fold::TypeFoldable;\n-use crate::ty::subst::{Subst, SubstsRef};\n use crate::ty::{self, TyCtxt};\n \n /// Attempts to resolve an obligation to a vtable. The result is\n@@ -76,31 +75,6 @@ pub fn codegen_fulfill_obligation<'tcx>(\n     })\n }\n \n-impl<'tcx> TyCtxt<'tcx> {\n-    /// Monomorphizes a type from the AST by first applying the\n-    /// in-scope substitutions and then normalizing any associated\n-    /// types.\n-    pub fn subst_and_normalize_erasing_regions<T>(\n-        self,\n-        param_substs: SubstsRef<'tcx>,\n-        param_env: ty::ParamEnv<'tcx>,\n-        value: &T,\n-    ) -> T\n-    where\n-        T: TypeFoldable<'tcx>,\n-    {\n-        debug!(\n-            \"subst_and_normalize_erasing_regions(\\\n-             param_substs={:?}, \\\n-             value={:?}, \\\n-             param_env={:?})\",\n-            param_substs, value, param_env,\n-        );\n-        let substituted = value.subst(self, param_substs);\n-        self.normalize_erasing_regions(param_env, substituted)\n-    }\n-}\n-\n // # Global Cache\n \n impl<'a, 'tcx> InferCtxt<'a, 'tcx> {"}, {"sha": "dc64482907f756a0b972161b726d0d7f03520db5", "filename": "src/librustc/ty/normalize_erasing_regions.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/56a0aec07fa998e43702216a7e18133af481c076/src%2Flibrustc%2Fty%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56a0aec07fa998e43702216a7e18133af481c076/src%2Flibrustc%2Fty%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fnormalize_erasing_regions.rs?ref=56a0aec07fa998e43702216a7e18133af481c076", "patch": "@@ -8,6 +8,7 @@\n //! within. (This underlying query is what is cached.)\n \n use crate::ty::fold::{TypeFoldable, TypeFolder};\n+use crate::ty::subst::{Subst, SubstsRef};\n use crate::ty::{self, Ty, TyCtxt};\n \n impl<'tcx> TyCtxt<'tcx> {\n@@ -60,6 +61,29 @@ impl<'tcx> TyCtxt<'tcx> {\n         let value = self.erase_late_bound_regions(value);\n         self.normalize_erasing_regions(param_env, value)\n     }\n+\n+    /// Monomorphizes a type from the AST by first applying the\n+    /// in-scope substitutions and then normalizing any associated\n+    /// types.\n+    pub fn subst_and_normalize_erasing_regions<T>(\n+        self,\n+        param_substs: SubstsRef<'tcx>,\n+        param_env: ty::ParamEnv<'tcx>,\n+        value: &T,\n+    ) -> T\n+    where\n+        T: TypeFoldable<'tcx>,\n+    {\n+        debug!(\n+            \"subst_and_normalize_erasing_regions(\\\n+             param_substs={:?}, \\\n+             value={:?}, \\\n+             param_env={:?})\",\n+            param_substs, value, param_env,\n+        );\n+        let substituted = value.subst(self, param_substs);\n+        self.normalize_erasing_regions(param_env, substituted)\n+    }\n }\n \n struct NormalizeAfterErasingRegionsFolder<'tcx> {"}]}