{"sha": "42b2adfab0e77c4662021badcf765a445681a12e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyYjJhZGZhYjBlNzdjNDY2MjAyMWJhZGNmNzY1YTQ0NTY4MWExMmU=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-11-03T18:48:08Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-03-19T09:15:35Z"}, "message": "rustc: introduce DefId::as_local(self) -> Option<LocalDefId> and use it.", "tree": {"sha": "9185edca89e98ca6cb96e50b797adb782afc2bd2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9185edca89e98ca6cb96e50b797adb782afc2bd2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/42b2adfab0e77c4662021badcf765a445681a12e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/42b2adfab0e77c4662021badcf765a445681a12e", "html_url": "https://github.com/rust-lang/rust/commit/42b2adfab0e77c4662021badcf765a445681a12e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/42b2adfab0e77c4662021badcf765a445681a12e/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c692797d702cb1ee3e5b19110c60baf54bc4e0e", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c692797d702cb1ee3e5b19110c60baf54bc4e0e", "html_url": "https://github.com/rust-lang/rust/commit/0c692797d702cb1ee3e5b19110c60baf54bc4e0e"}], "stats": {"total": 61, "additions": 36, "deletions": 25}, "files": [{"sha": "cc3e11d9af99845150940417938a397b8938e4ce", "filename": "src/librustc/hir/map/hir_id_validator.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/42b2adfab0e77c4662021badcf765a445681a12e/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42b2adfab0e77c4662021badcf765a445681a12e/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs?ref=42b2adfab0e77c4662021badcf765a445681a12e", "patch": "@@ -3,7 +3,7 @@ use crate::ty::TyCtxt;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::sync::{par_iter, Lock, ParallelIterator};\n use rustc_hir as hir;\n-use rustc_hir::def_id::{DefId, DefIndex, CRATE_DEF_INDEX};\n+use rustc_hir::def_id::{DefIndex, LocalDefId, CRATE_DEF_INDEX};\n use rustc_hir::intravisit;\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::{HirId, ItemLocalId};\n@@ -113,14 +113,18 @@ impl<'a, 'hir> HirIdValidator<'a, 'hir> {\n                 missing_items.push(format!(\n                     \"[local_id: {}, owner: {}]\",\n                     local_id,\n-                    self.hir_map.def_path(DefId::local(owner_def_index)).to_string_no_crate()\n+                    self.hir_map\n+                        .def_path(LocalDefId { local_def_index: owner_def_index })\n+                        .to_string_no_crate()\n                 ));\n             }\n             self.error(|| {\n                 format!(\n                     \"ItemLocalIds not assigned densely in {}. \\\n                 Max ItemLocalId = {}, missing IDs = {:?}; seens IDs = {:?}\",\n-                    self.hir_map.def_path(DefId::local(owner_def_index)).to_string_no_crate(),\n+                    self.hir_map\n+                        .def_path(LocalDefId { local_def_index: owner_def_index })\n+                        .to_string_no_crate(),\n                     max,\n                     missing_items,\n                     self.hir_ids_seen\n@@ -159,8 +163,10 @@ impl<'a, 'hir> intravisit::Visitor<'hir> for HirIdValidator<'a, 'hir> {\n                 format!(\n                     \"HirIdValidator: The recorded owner of {} is {} instead of {}\",\n                     self.hir_map.node_to_string(hir_id),\n-                    self.hir_map.def_path(DefId::local(hir_id.owner)).to_string_no_crate(),\n-                    self.hir_map.def_path(DefId::local(owner)).to_string_no_crate()\n+                    self.hir_map.def_path(hir_id.owner_local_def_id()).to_string_no_crate(),\n+                    self.hir_map\n+                        .def_path(LocalDefId { local_def_index: owner })\n+                        .to_string_no_crate()\n                 )\n             });\n         }"}, {"sha": "dbe23edd8a46be20d13f293805a6ab6bcb1e44eb", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/42b2adfab0e77c4662021badcf765a445681a12e/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42b2adfab0e77c4662021badcf765a445681a12e/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=42b2adfab0e77c4662021badcf765a445681a12e", "patch": "@@ -188,18 +188,16 @@ impl<'hir> Map<'hir> {\n         &self.tcx.definitions\n     }\n \n-    pub fn def_key(&self, def_id: DefId) -> DefKey {\n-        assert!(def_id.is_local());\n-        self.tcx.definitions.def_key(def_id.index)\n+    pub fn def_key(&self, def_id: LocalDefId) -> DefKey {\n+        self.tcx.definitions.def_key(def_id.local_def_index)\n     }\n \n     pub fn def_path_from_hir_id(&self, id: HirId) -> Option<DefPath> {\n-        self.opt_local_def_id(id).map(|def_id| self.def_path(def_id))\n+        self.opt_local_def_id(id).map(|def_id| self.def_path(def_id.expect_local()))\n     }\n \n-    pub fn def_path(&self, def_id: DefId) -> DefPath {\n-        assert!(def_id.is_local());\n-        self.tcx.definitions.def_path(def_id.index)\n+    pub fn def_path(&self, def_id: LocalDefId) -> DefPath {\n+        self.tcx.definitions.def_path(def_id.local_def_index)\n     }\n \n     #[inline]"}, {"sha": "09654478791e4d02fe95eb77264f1d6fa899f708", "filename": "src/librustc/ich/hcx.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/42b2adfab0e77c4662021badcf765a445681a12e/src%2Flibrustc%2Fich%2Fhcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42b2adfab0e77c4662021badcf765a445681a12e/src%2Flibrustc%2Fich%2Fhcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fhcx.rs?ref=42b2adfab0e77c4662021badcf765a445681a12e", "patch": "@@ -123,8 +123,8 @@ impl<'a> StableHashingContext<'a> {\n \n     #[inline]\n     pub fn def_path_hash(&self, def_id: DefId) -> DefPathHash {\n-        if def_id.is_local() {\n-            self.definitions.def_path_hash(def_id.index)\n+        if let Some(def_id) = def_id.as_local() {\n+            self.definitions.def_path_hash(def_id.local_def_index)\n         } else {\n             self.cstore.def_path_hash(def_id)\n         }"}, {"sha": "78e7d1f3bd838efbc477a31f305cb21e440f5d57", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/42b2adfab0e77c4662021badcf765a445681a12e/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42b2adfab0e77c4662021badcf765a445681a12e/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=42b2adfab0e77c4662021badcf765a445681a12e", "patch": "@@ -1261,7 +1261,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n \n     pub fn def_key(self, id: DefId) -> hir_map::DefKey {\n-        if id.is_local() { self.hir().def_key(id) } else { self.cstore.def_key(id) }\n+        if let Some(id) = id.as_local() { self.hir().def_key(id) } else { self.cstore.def_key(id) }\n     }\n \n     /// Converts a `DefId` into its fully expanded `DefPath` (every\n@@ -1270,7 +1270,11 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// Note that if `id` is not local to this crate, the result will\n     ///  be a non-local `DefPath`.\n     pub fn def_path(self, id: DefId) -> hir_map::DefPath {\n-        if id.is_local() { self.hir().def_path(id) } else { self.cstore.def_path(id) }\n+        if let Some(id) = id.as_local() {\n+            self.hir().def_path(id)\n+        } else {\n+            self.cstore.def_path(id)\n+        }\n     }\n \n     /// Returns whether or not the crate with CrateNum 'cnum'\n@@ -1281,8 +1285,8 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     #[inline]\n     pub fn def_path_hash(self, def_id: DefId) -> hir_map::DefPathHash {\n-        if def_id.is_local() {\n-            self.definitions.def_path_hash(def_id.index)\n+        if let Some(def_id) = def_id.as_local() {\n+            self.definitions.def_path_hash(def_id.local_def_index)\n         } else {\n             self.cstore.def_path_hash(def_id)\n         }"}, {"sha": "077ed49ed2cacc8fc248a8e1f5c3ed561b36536f", "filename": "src/librustc_mir/borrow_check/nll.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42b2adfab0e77c4662021badcf765a445681a12e/src%2Flibrustc_mir%2Fborrow_check%2Fnll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42b2adfab0e77c4662021badcf765a445681a12e/src%2Flibrustc_mir%2Fborrow_check%2Fnll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll.rs?ref=42b2adfab0e77c4662021badcf765a445681a12e", "patch": "@@ -272,7 +272,7 @@ pub(in crate::borrow_check) fn compute_regions<'cx, 'tcx>(\n     // Dump facts if requested.\n     let polonius_output = all_facts.and_then(|all_facts| {\n         if infcx.tcx.sess.opts.debugging_opts.nll_facts {\n-            let def_path = infcx.tcx.hir().def_path(def_id);\n+            let def_path = infcx.tcx.def_path(def_id);\n             let dir_path =\n                 PathBuf::from(\"nll-facts\").join(def_path.to_filename_friendly_no_crate());\n             all_facts.write_to_dir(dir_path, location_table).unwrap();"}, {"sha": "7e0d0bfe9aba45c662b411e33a08bce412ddd9b8", "filename": "src/librustc_passes/entry.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42b2adfab0e77c4662021badcf765a445681a12e/src%2Flibrustc_passes%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42b2adfab0e77c4662021badcf765a445681a12e/src%2Flibrustc_passes%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fentry.rs?ref=42b2adfab0e77c4662021badcf765a445681a12e", "patch": "@@ -34,7 +34,7 @@ struct EntryContext<'a, 'tcx> {\n impl<'a, 'tcx> ItemLikeVisitor<'tcx> for EntryContext<'a, 'tcx> {\n     fn visit_item(&mut self, item: &'tcx Item<'tcx>) {\n         let def_id = self.map.local_def_id(item.hir_id);\n-        let def_key = self.map.def_key(def_id);\n+        let def_key = self.map.def_key(def_id.expect_local());\n         let at_root = def_key.parent == Some(CRATE_DEF_INDEX);\n         find_item(item, self, at_root);\n     }"}, {"sha": "f8570b981623270995720cfcb502fbfe849d020a", "filename": "src/librustc_span/def_id.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/42b2adfab0e77c4662021badcf765a445681a12e/src%2Flibrustc_span%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42b2adfab0e77c4662021badcf765a445681a12e/src%2Flibrustc_span%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fdef_id.rs?ref=42b2adfab0e77c4662021badcf765a445681a12e", "patch": "@@ -163,10 +163,14 @@ impl DefId {\n         self.krate == LOCAL_CRATE\n     }\n \n+    #[inline]\n+    pub fn as_local(self) -> Option<LocalDefId> {\n+        if self.is_local() { Some(LocalDefId { local_def_index: self.index }) } else { None }\n+    }\n+\n     #[inline]\n     pub fn expect_local(self) -> LocalDefId {\n-        assert!(self.is_local());\n-        LocalDefId { local_def_index: self.index }\n+        self.as_local().unwrap_or_else(|| panic!(\"DefId::expect_local: `{:?}` isn't local\", self))\n     }\n \n     pub fn is_top_level_module(self) -> bool {"}, {"sha": "e6d492110fb237b7bee658000210e86d76cadd08", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/42b2adfab0e77c4662021badcf765a445681a12e/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42b2adfab0e77c4662021badcf765a445681a12e/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=42b2adfab0e77c4662021badcf765a445681a12e", "patch": "@@ -638,9 +638,8 @@ pub struct InheritedBuilder<'tcx> {\n \n impl Inherited<'_, 'tcx> {\n     pub fn build(tcx: TyCtxt<'tcx>, def_id: DefId) -> InheritedBuilder<'tcx> {\n-        let hir_id_root = if def_id.is_local() {\n-            let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n-            DefId::local(hir_id.owner)\n+        let hir_id_root = if let Some(def_id) = def_id.as_local() {\n+            tcx.hir().local_def_id_to_hir_id(def_id).owner_def_id()\n         } else {\n             def_id\n         };"}]}