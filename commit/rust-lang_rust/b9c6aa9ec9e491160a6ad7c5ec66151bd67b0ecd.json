{"sha": "b9c6aa9ec9e491160a6ad7c5ec66151bd67b0ecd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5YzZhYTllYzllNDkxMTYwYTZhZDdjNWVjNjYxNTFiZDY3YjBlY2Q=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-31T19:58:36Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-31T20:04:12Z"}, "message": "Unify naming of tuple fields", "tree": {"sha": "0ab0318ef1bd2bea1834fbe2ec0c899b5dd6189b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ab0318ef1bd2bea1834fbe2ec0c899b5dd6189b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b9c6aa9ec9e491160a6ad7c5ec66151bd67b0ecd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b9c6aa9ec9e491160a6ad7c5ec66151bd67b0ecd", "html_url": "https://github.com/rust-lang/rust/commit/b9c6aa9ec9e491160a6ad7c5ec66151bd67b0ecd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b9c6aa9ec9e491160a6ad7c5ec66151bd67b0ecd/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "675e86becfab2615528152487db49bce1b43bd60", "url": "https://api.github.com/repos/rust-lang/rust/commits/675e86becfab2615528152487db49bce1b43bd60", "html_url": "https://github.com/rust-lang/rust/commit/675e86becfab2615528152487db49bce1b43bd60"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "69852b61161ff317f28756b9e6aec7227bd42b95", "filename": "crates/ra_assists/src/handlers/early_return.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b9c6aa9ec9e491160a6ad7c5ec66151bd67b0ecd/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fearly_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9c6aa9ec9e491160a6ad7c5ec66151bd67b0ecd/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fearly_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fearly_return.rs?ref=b9c6aa9ec9e491160a6ad7c5ec66151bd67b0ecd", "patch": "@@ -51,11 +51,11 @@ pub(crate) fn convert_to_guarded_return(acc: &mut Assists, ctx: &AssistContext)\n     // Check if there is an IfLet that we can handle.\n     let if_let_pat = match cond.pat() {\n         None => None, // No IfLet, supported.\n-        Some(ast::Pat::TupleStructPat(pat)) if pat.args().count() == 1 => {\n+        Some(ast::Pat::TupleStructPat(pat)) if pat.fields().count() == 1 => {\n             let path = pat.path()?;\n             match path.qualifier() {\n                 None => {\n-                    let bound_ident = pat.args().next().unwrap();\n+                    let bound_ident = pat.fields().next().unwrap();\n                     Some((path, bound_ident))\n                 }\n                 Some(_) => return None,"}, {"sha": "9d6562c38c00d399eed293a0e63db7a34d1e1354", "filename": "crates/ra_hir_def/src/body/lower.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b9c6aa9ec9e491160a6ad7c5ec66151bd67b0ecd/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9c6aa9ec9e491160a6ad7c5ec66151bd67b0ecd/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs?ref=b9c6aa9ec9e491160a6ad7c5ec66151bd67b0ecd", "patch": "@@ -496,7 +496,7 @@ impl ExprCollector<'_> {\n                 self.alloc_expr(Expr::BinaryOp { lhs, rhs, op }, syntax_ptr)\n             }\n             ast::Expr::TupleExpr(e) => {\n-                let exprs = e.exprs().map(|expr| self.collect_expr(expr)).collect();\n+                let exprs = e.fields().map(|expr| self.collect_expr(expr)).collect();\n                 self.alloc_expr(Expr::Tuple { exprs }, syntax_ptr)\n             }\n             ast::Expr::BoxExpr(e) => {\n@@ -762,7 +762,7 @@ impl ExprCollector<'_> {\n             }\n             ast::Pat::TupleStructPat(p) => {\n                 let path = p.path().and_then(|path| self.expander.parse_path(path));\n-                let (args, ellipsis) = self.collect_tuple_pat(p.args());\n+                let (args, ellipsis) = self.collect_tuple_pat(p.fields());\n                 Pat::TupleStruct { path, args, ellipsis }\n             }\n             ast::Pat::RefPat(p) => {\n@@ -780,7 +780,7 @@ impl ExprCollector<'_> {\n             }\n             ast::Pat::ParenPat(p) => return self.collect_pat_opt(p.pat()),\n             ast::Pat::TuplePat(p) => {\n-                let (args, ellipsis) = self.collect_tuple_pat(p.args());\n+                let (args, ellipsis) = self.collect_tuple_pat(p.fields());\n                 Pat::Tuple { args, ellipsis }\n             }\n             ast::Pat::WildcardPat(_) => Pat::Wild,"}, {"sha": "5f51c7536a59241126aec24ca799ab908bab27ce", "filename": "crates/ra_syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b9c6aa9ec9e491160a6ad7c5ec66151bd67b0ecd/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9c6aa9ec9e491160a6ad7c5ec66151bd67b0ecd/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=b9c6aa9ec9e491160a6ad7c5ec66151bd67b0ecd", "patch": "@@ -893,7 +893,7 @@ pub struct TupleExpr {\n impl ast::AttrsOwner for TupleExpr {}\n impl TupleExpr {\n     pub fn l_paren_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['(']) }\n-    pub fn exprs(&self) -> AstChildren<Expr> { support::children(&self.syntax) }\n+    pub fn fields(&self) -> AstChildren<Expr> { support::children(&self.syntax) }\n     pub fn r_paren_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![')']) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n@@ -1210,7 +1210,7 @@ pub struct SlicePat {\n }\n impl SlicePat {\n     pub fn l_brack_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['[']) }\n-    pub fn args(&self) -> AstChildren<Pat> { support::children(&self.syntax) }\n+    pub fn pats(&self) -> AstChildren<Pat> { support::children(&self.syntax) }\n     pub fn r_brack_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![']']) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n@@ -1219,7 +1219,7 @@ pub struct TuplePat {\n }\n impl TuplePat {\n     pub fn l_paren_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['(']) }\n-    pub fn args(&self) -> AstChildren<Pat> { support::children(&self.syntax) }\n+    pub fn fields(&self) -> AstChildren<Pat> { support::children(&self.syntax) }\n     pub fn r_paren_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![')']) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n@@ -1229,7 +1229,7 @@ pub struct TupleStructPat {\n impl TupleStructPat {\n     pub fn path(&self) -> Option<Path> { support::child(&self.syntax) }\n     pub fn l_paren_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['(']) }\n-    pub fn args(&self) -> AstChildren<Pat> { support::children(&self.syntax) }\n+    pub fn fields(&self) -> AstChildren<Pat> { support::children(&self.syntax) }\n     pub fn r_paren_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![')']) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]"}, {"sha": "733e978772c3a08bc25372a81b8b4cbf40c4a640", "filename": "crates/ra_syntax/src/ast/node_ext.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b9c6aa9ec9e491160a6ad7c5ec66151bd67b0ecd/crates%2Fra_syntax%2Fsrc%2Fast%2Fnode_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9c6aa9ec9e491160a6ad7c5ec66151bd67b0ecd/crates%2Fra_syntax%2Fsrc%2Fast%2Fnode_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fnode_ext.rs?ref=b9c6aa9ec9e491160a6ad7c5ec66151bd67b0ecd", "patch": "@@ -290,7 +290,7 @@ pub struct SlicePatComponents {\n \n impl ast::SlicePat {\n     pub fn components(&self) -> SlicePatComponents {\n-        let mut args = self.args().peekable();\n+        let mut args = self.pats().peekable();\n         let prefix = args\n             .peeking_take_while(|p| match p {\n                 ast::Pat::RestPat(_) => false,"}, {"sha": "aca23890c6d617fc9d201edbf263bccad1792983", "filename": "xtask/src/codegen/rust.ungram", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b9c6aa9ec9e491160a6ad7c5ec66151bd67b0ecd/xtask%2Fsrc%2Fcodegen%2Frust.ungram", "raw_url": "https://github.com/rust-lang/rust/raw/b9c6aa9ec9e491160a6ad7c5ec66151bd67b0ecd/xtask%2Fsrc%2Fcodegen%2Frust.ungram", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Frust.ungram?ref=b9c6aa9ec9e491160a6ad7c5ec66151bd67b0ecd", "patch": "@@ -359,7 +359,7 @@ IndexExpr =\n   Attr* base:Expr '[' index:Expr ']'\n \n TupleExpr =\n-  Attr* '(' Attr* (Expr (',' Expr)* ','?)? ')'\n+  Attr* '(' Attr* fields:(Expr (',' Expr)* ','?)? ')'\n \n RecordExpr =\n   Path RecordExprFieldList\n@@ -560,16 +560,16 @@ RecordPatField =\n   Attr* (NameRef ':')? Pat\n \n TupleStructPat =\n-   Path '(' args:(Pat (',' Pat)* ','?)? ')'\n+   Path '(' fields:(Pat (',' Pat)* ','?)? ')'\n \n TuplePat =\n-   '(' args:(Pat (',' Pat)* ','?)? ')'\n+   '(' fields:(Pat (',' Pat)* ','?)? ')'\n \n ParenPat =\n   '(' Pat ')'\n \n SlicePat =\n-  '[' args:(Pat (',' Pat)* ','?)? ']'\n+  '[' (Pat (',' Pat)* ','?)? ']'\n \n PathPat =\n   Path"}]}