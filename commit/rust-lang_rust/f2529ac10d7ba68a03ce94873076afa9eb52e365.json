{"sha": "f2529ac10d7ba68a03ce94873076afa9eb52e365", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyNTI5YWMxMGQ3YmE2OGEwM2NlOTQ4NzMwNzZhZmE5ZWI1MmUzNjU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-02-12T17:48:54Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-02-18T15:25:12Z"}, "message": "Constrain operands to outlive the operation. Fixes #21422.", "tree": {"sha": "4d460e7fec01006741e633d81cfcd729a4ae3171", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d460e7fec01006741e633d81cfcd729a4ae3171"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2529ac10d7ba68a03ce94873076afa9eb52e365", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2529ac10d7ba68a03ce94873076afa9eb52e365", "html_url": "https://github.com/rust-lang/rust/commit/f2529ac10d7ba68a03ce94873076afa9eb52e365", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2529ac10d7ba68a03ce94873076afa9eb52e365/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "801bc48939e6df1678ad2934ce35d981a068f253", "url": "https://api.github.com/repos/rust-lang/rust/commits/801bc48939e6df1678ad2934ce35d981a068f253", "html_url": "https://github.com/rust-lang/rust/commit/801bc48939e6df1678ad2934ce35d981a068f253"}], "stats": {"total": 60, "additions": 60, "deletions": 0}, "files": [{"sha": "5f9f2ad33aa5b2fa6220a8ee871fc9dbb3975248", "filename": "src/librustc/middle/infer/error_reporting.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f2529ac10d7ba68a03ce94873076afa9eb52e365/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2529ac10d7ba68a03ce94873076afa9eb52e365/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs?ref=f2529ac10d7ba68a03ce94873076afa9eb52e365", "patch": "@@ -675,6 +675,17 @@ impl<'a, 'tcx> ErrorReporting<'tcx> for InferCtxt<'a, 'tcx> {\n                     sup,\n                     \"\");\n             }\n+            infer::Operand(span) => {\n+                self.tcx.sess.span_err(\n+                    span,\n+                    \"lifetime of operand does not outlive \\\n+                     the operation\");\n+                note_and_explain_region(\n+                    self.tcx,\n+                    \"the operand is only valid for \",\n+                    sup,\n+                    \"\");\n+            }\n             infer::AddrOf(span) => {\n                 self.tcx.sess.span_err(\n                     span,\n@@ -1593,6 +1604,11 @@ impl<'a, 'tcx> ErrorReportingHelpers<'tcx> for InferCtxt<'a, 'tcx> {\n                     span,\n                     \"...so that return value is valid for the call\");\n             }\n+            infer::Operand(span) => {\n+                self.tcx.sess.span_err(\n+                    span,\n+                    \"...so that operand is valid for operation\");\n+            }\n             infer::AddrOf(span) => {\n                 self.tcx.sess.span_note(\n                     span,"}, {"sha": "b0576ff55ff7390605b889c93df55b3b10aa6b2f", "filename": "src/librustc/middle/infer/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f2529ac10d7ba68a03ce94873076afa9eb52e365/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2529ac10d7ba68a03ce94873076afa9eb52e365/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs?ref=f2529ac10d7ba68a03ce94873076afa9eb52e365", "patch": "@@ -210,6 +210,9 @@ pub enum SubregionOrigin<'tcx> {\n     // Region in return type of invoked fn must enclose call\n     CallReturn(Span),\n \n+    // Operands must be in scope\n+    Operand(Span),\n+\n     // Region resulting from a `&` expr must enclose the `&` expr\n     AddrOf(Span),\n \n@@ -1195,6 +1198,7 @@ impl<'tcx> SubregionOrigin<'tcx> {\n             CallRcvr(a) => a,\n             CallArg(a) => a,\n             CallReturn(a) => a,\n+            Operand(a) => a,\n             AddrOf(a) => a,\n             AutoBorrow(a) => a,\n             SafeDestructor(a) => a,\n@@ -1258,6 +1262,7 @@ impl<'tcx> Repr<'tcx> for SubregionOrigin<'tcx> {\n             CallRcvr(a) => format!(\"CallRcvr({})\", a.repr(tcx)),\n             CallArg(a) => format!(\"CallArg({})\", a.repr(tcx)),\n             CallReturn(a) => format!(\"CallReturn({})\", a.repr(tcx)),\n+            Operand(a) => format!(\"Operand({})\", a.repr(tcx)),\n             AddrOf(a) => format!(\"AddrOf({})\", a.repr(tcx)),\n             AutoBorrow(a) => format!(\"AutoBorrow({})\", a.repr(tcx)),\n             SafeDestructor(a) => format!(\"SafeDestructor({})\", a.repr(tcx)),"}, {"sha": "e50c3b0306ee33db977bd777d91986bbf2f4f142", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f2529ac10d7ba68a03ce94873076afa9eb52e365/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2529ac10d7ba68a03ce94873076afa9eb52e365/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=f2529ac10d7ba68a03ce94873076afa9eb52e365", "patch": "@@ -610,6 +610,20 @@ fn visit_expr(rcx: &mut Rcx, expr: &ast::Expr) {\n             visit::walk_expr(rcx, expr);\n         }\n \n+        ast::ExprBinary(_, ref lhs, ref rhs) => {\n+            // If you do `x OP y`, then the types of `x` and `y` must\n+            // outlive the operation you are performing.\n+            let lhs_ty = rcx.resolve_expr_type_adjusted(&**lhs);\n+            let rhs_ty = rcx.resolve_expr_type_adjusted(&**rhs);\n+            for &ty in [lhs_ty, rhs_ty].iter() {\n+                type_must_outlive(rcx,\n+                                  infer::Operand(expr.span),\n+                                  ty,\n+                                  ty::ReScope(CodeExtent::from_node_id(expr.id)));\n+            }\n+            visit::walk_expr(rcx, expr);\n+        }\n+\n         ast::ExprUnary(op, ref lhs) if has_method_map => {\n             let implicitly_ref_args = !ast_util::is_by_value_unop(op);\n "}, {"sha": "c59bf15afc3b0205dfbb790b51939e2222f23f57", "filename": "src/test/run-pass/regions-issue-21422.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f2529ac10d7ba68a03ce94873076afa9eb52e365/src%2Ftest%2Frun-pass%2Fregions-issue-21422.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2529ac10d7ba68a03ce94873076afa9eb52e365/src%2Ftest%2Frun-pass%2Fregions-issue-21422.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-issue-21422.rs?ref=f2529ac10d7ba68a03ce94873076afa9eb52e365", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Regression test for issue #21422, which was related to failing to\n+// add inference constraints that the operands of a binary operator\n+// should outlive the binary operation itself.\n+\n+pub struct P<'a> {\n+    _ptr: *const &'a u8,\n+}\n+\n+impl <'a> PartialEq for P<'a> {\n+    fn eq(&self, other: &P<'a>) -> bool {\n+        (self as *const _) == (other as *const _)\n+    }\n+}\n+\n+fn main() {}"}]}