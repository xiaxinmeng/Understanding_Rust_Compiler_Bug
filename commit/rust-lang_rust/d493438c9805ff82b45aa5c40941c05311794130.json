{"sha": "d493438c9805ff82b45aa5c40941c05311794130", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0OTM0MzhjOTgwNWZmODJiNDVhYTVjNDA5NDFjMDUzMTE3OTQxMzA=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-10T06:28:52Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-10T06:58:40Z"}, "message": "rt: Disable some expensive asserts", "tree": {"sha": "9c1e02f74a9f550333ec55110cdacad808e1b8c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c1e02f74a9f550333ec55110cdacad808e1b8c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d493438c9805ff82b45aa5c40941c05311794130", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d493438c9805ff82b45aa5c40941c05311794130", "html_url": "https://github.com/rust-lang/rust/commit/d493438c9805ff82b45aa5c40941c05311794130", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d493438c9805ff82b45aa5c40941c05311794130/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d90a9d3da0f8c77d98bd38148d78db95f7f8fc5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d90a9d3da0f8c77d98bd38148d78db95f7f8fc5a", "html_url": "https://github.com/rust-lang/rust/commit/d90a9d3da0f8c77d98bd38148d78db95f7f8fc5a"}], "stats": {"total": 73, "additions": 40, "deletions": 33}, "files": [{"sha": "b2b2753476a54b244f315bd0b079b4361859cd11", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d493438c9805ff82b45aa5c40941c05311794130/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/d493438c9805ff82b45aa5c40941c05311794130/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=d493438c9805ff82b45aa5c40941c05311794130", "patch": "@@ -673,6 +673,17 @@ rust_task::record_stack_limit() {\n     record_sp(stk->data + LIMIT_OFFSET + RED_ZONE_SIZE);\n }\n \n+static bool\n+sp_in_stk_seg(uintptr_t sp, stk_seg *stk) {\n+    // Not positive these bounds for sp are correct.  I think that the first\n+    // possible value for esp on a new stack is stk->end, which points to the\n+    // address before the first value to be pushed onto a new stack. The last\n+    // possible address we can push data to is stk->data.  Regardless, there's\n+    // so much slop at either end that we should never hit one of these\n+    // boundaries.\n+    return (uintptr_t)stk->data <= sp && sp <= stk->end;\n+}\n+\n /*\n Called by landing pads during unwinding to figure out which\n stack segment we are currently running on, delete the others,\n@@ -700,6 +711,25 @@ rust_task::config_notify(chan_handle chan) {\n     notify_chan = chan;\n }\n \n+/*\n+Returns true if we're currently running on the Rust stack\n+ */\n+bool\n+rust_task::on_rust_stack() {\n+    uintptr_t sp = get_sp();\n+    bool in_first_segment = sp_in_stk_seg(sp, stk);\n+    if (in_first_segment) {\n+        return true;\n+    } else if (stk->next != NULL) {\n+        // This happens only when calling the upcall to delete\n+        // a stack segment\n+        bool in_second_segment = sp_in_stk_seg(sp, stk->next);\n+        return in_second_segment;\n+    } else {\n+        return false;\n+    }\n+}\n+\n //\n // Local Variables:\n // mode: C++"}, {"sha": "109f480f68d7a29eb171c4550e086ee97b91445f", "filename": "src/rt/rust_task.h", "status": "modified", "additions": 8, "deletions": 33, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/d493438c9805ff82b45aa5c40941c05311794130/src%2Frt%2Frust_task.h", "raw_url": "https://github.com/rust-lang/rust/raw/d493438c9805ff82b45aa5c40941c05311794130/src%2Frt%2Frust_task.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.h?ref=d493438c9805ff82b45aa5c40941c05311794130", "patch": "@@ -198,6 +198,8 @@ rust_task : public kernel_owned<rust_task>, rust_cond\n     void call_on_rust_stack(void *args, void *fn_ptr);\n };\n \n+// This stuff is on the stack-switching fast path\n+\n // Get a rough approximation of the current stack pointer\n extern \"C\" uintptr_t get_sp();\n \n@@ -226,7 +228,8 @@ sanitize_next_sp(uintptr_t next_sp) {\n \n inline void\n rust_task::call_on_c_stack(void *args, void *fn_ptr) {\n-    I(thread, on_rust_stack());\n+    // Too expensive to check\n+    // I(thread, on_rust_stack());\n \n     next_rust_sp = get_sp();\n \n@@ -252,7 +255,8 @@ rust_task::call_on_c_stack(void *args, void *fn_ptr) {\n \n inline void\n rust_task::call_on_rust_stack(void *args, void *fn_ptr) {\n-    I(thread, !on_rust_stack());\n+    // Too expensive to check\n+    // I(thread, !on_rust_stack());\n     I(thread, next_rust_sp);\n \n     next_c_sp = get_sp();\n@@ -264,43 +268,14 @@ rust_task::call_on_rust_stack(void *args, void *fn_ptr) {\n \n inline void\n rust_task::return_c_stack() {\n-    I(thread, on_rust_stack());\n+    // Too expensive to check\n+    // I(thread, on_rust_stack());\n     I(thread, c_stack != NULL);\n     thread->return_c_stack(c_stack);\n     c_stack = NULL;\n     next_c_sp = 0;\n }\n \n-inline bool\n-sp_in_stk_seg(uintptr_t sp, stk_seg *stk) {\n-    // Not positive these bounds for sp are correct.  I think that the first\n-    // possible value for esp on a new stack is stk->end, which points to the\n-    // address before the first value to be pushed onto a new stack. The last\n-    // possible address we can push data to is stk->data.  Regardless, there's\n-    // so much slop at either end that we should never hit one of these\n-    // boundaries.\n-    return (uintptr_t)stk->data <= sp && sp <= stk->end;\n-}\n-\n-/*\n-Returns true if we're currently running on the Rust stack\n- */\n-inline bool\n-rust_task::on_rust_stack() {\n-    uintptr_t sp = get_sp();\n-    bool in_first_segment = sp_in_stk_seg(sp, stk);\n-    if (in_first_segment) {\n-        return true;\n-    } else if (stk->next != NULL) {\n-        // This happens only when calling the upcall to delete\n-        // a stack segment\n-        bool in_second_segment = sp_in_stk_seg(sp, stk->next);\n-        return in_second_segment;\n-    } else {\n-        return false;\n-    }\n-}\n-\n //\n // Local Variables:\n // mode: C++"}, {"sha": "b1a56dfa68cefff32e7742fe4b684f2d6d760efc", "filename": "src/rt/rust_task_thread.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d493438c9805ff82b45aa5c40941c05311794130/src%2Frt%2Frust_task_thread.h", "raw_url": "https://github.com/rust-lang/rust/raw/d493438c9805ff82b45aa5c40941c05311794130/src%2Frt%2Frust_task_thread.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task_thread.h?ref=d493438c9805ff82b45aa5c40941c05311794130", "patch": "@@ -150,6 +150,8 @@ rust_task_thread::get_log() {\n     return _log;\n }\n \n+// This stuff is on the stack-switching fast path\n+\n #ifndef __WIN32__\n \n inline rust_task *"}]}