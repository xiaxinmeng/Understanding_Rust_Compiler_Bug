{"sha": "8e0c6fa5b693e90498045e582a5f66f6a78d67d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlMGM2ZmE1YjY5M2U5MDQ5ODA0NWU1ODJhNWY2NmY2YTc4ZDY3ZDA=", "commit": {"author": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2013-05-02T07:59:26Z"}, "committer": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2013-05-07T14:29:19Z"}, "message": "Port IRBuilder::CreateVectorSplat", "tree": {"sha": "693885f0fd600a750fac0a17438cffb9d4e7ab41", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/693885f0fd600a750fac0a17438cffb9d4e7ab41"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e0c6fa5b693e90498045e582a5f66f6a78d67d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e0c6fa5b693e90498045e582a5f66f6a78d67d0", "html_url": "https://github.com/rust-lang/rust/commit/8e0c6fa5b693e90498045e582a5f66f6a78d67d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e0c6fa5b693e90498045e582a5f66f6a78d67d0/comments", "author": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "154f3b00e0617e379d005b3aa7f41e8f1bea7bd8", "url": "https://api.github.com/repos/rust-lang/rust/commits/154f3b00e0617e379d005b3aa7f41e8f1bea7bd8", "html_url": "https://github.com/rust-lang/rust/commit/154f3b00e0617e379d005b3aa7f41e8f1bea7bd8"}], "stats": {"total": 26, "additions": 20, "deletions": 6}, "files": [{"sha": "29fd90edce898a50d0a07e0d13159def75bbfdc7", "filename": "src/librustc/middle/trans/build.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8e0c6fa5b693e90498045e582a5f66f6a78d67d0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e0c6fa5b693e90498045e582a5f66f6a78d67d0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs?ref=8e0c6fa5b693e90498045e582a5f66f6a78d67d0", "patch": "@@ -963,20 +963,28 @@ pub fn ExtractElement(cx: block, VecVal: ValueRef, Index: ValueRef) ->\n }\n \n pub fn InsertElement(cx: block, VecVal: ValueRef, EltVal: ValueRef,\n-                 Index: ValueRef) {\n+                     Index: ValueRef) -> ValueRef {\n     unsafe {\n-        if cx.unreachable { return; }\n+        if cx.unreachable { return llvm::LLVMGetUndef(T_nil()); }\n         count_insn(cx, \"insertelement\");\n-        llvm::LLVMBuildInsertElement(B(cx), VecVal, EltVal, Index, noname());\n+        llvm::LLVMBuildInsertElement(B(cx), VecVal, EltVal, Index, noname())\n     }\n }\n \n pub fn ShuffleVector(cx: block, V1: ValueRef, V2: ValueRef,\n-                     Mask: ValueRef) {\n+                     Mask: ValueRef) -> ValueRef {\n     unsafe {\n-        if cx.unreachable { return; }\n+        if cx.unreachable { return llvm::LLVMGetUndef(T_nil()); }\n         count_insn(cx, \"shufflevector\");\n-        llvm::LLVMBuildShuffleVector(B(cx), V1, V2, Mask, noname());\n+        llvm::LLVMBuildShuffleVector(B(cx), V1, V2, Mask, noname())\n+    }\n+}\n+\n+pub fn VectorSplat(cx: block, NumElts: uint, EltVal: ValueRef) -> ValueRef {\n+    unsafe {\n+        let Undef = llvm::LLVMGetUndef(T_vector(val_ty(EltVal), NumElts));\n+        let VecVal = InsertElement(cx, Undef, EltVal, C_i32(0));\n+        ShuffleVector(cx, VecVal, Undef, C_null(T_vector(T_i32(), NumElts)))\n     }\n }\n "}, {"sha": "b004ba9d41f34df2dfb210a4e81b39aac00d2f31", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8e0c6fa5b693e90498045e582a5f66f6a78d67d0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e0c6fa5b693e90498045e582a5f66f6a78d67d0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=8e0c6fa5b693e90498045e582a5f66f6a78d67d0", "patch": "@@ -984,6 +984,12 @@ pub fn T_array(t: TypeRef, n: uint) -> TypeRef {\n     }\n }\n \n+pub fn T_vector(t: TypeRef, n: uint) -> TypeRef {\n+    unsafe {\n+        return llvm::LLVMVectorType(t, n as c_uint);\n+    }\n+}\n+\n // Interior vector.\n pub fn T_vec2(targ_cfg: @session::config, t: TypeRef) -> TypeRef {\n     return T_struct(~[T_int(targ_cfg), // fill"}]}