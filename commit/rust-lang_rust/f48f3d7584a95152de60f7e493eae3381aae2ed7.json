{"sha": "f48f3d7584a95152de60f7e493eae3381aae2ed7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0OGYzZDc1ODRhOTUxNTJkZTYwZjdlNDkzZWFlMzM4MWFhZTJlZDc=", "commit": {"author": {"name": "Oliver Middleton", "email": "olliemail27@gmail.com", "date": "2017-01-15T09:08:29Z"}, "committer": {"name": "Oliver Middleton", "email": "olliemail27@gmail.com", "date": "2017-01-15T09:08:29Z"}, "message": "rustdoc: Give primitive types stability attributes\n\nThis is especially important for i128/u128 to make it clear they are\nunstable in the docs.", "tree": {"sha": "20bce0099c2a6b13db52f98d02333f70bc5708cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20bce0099c2a6b13db52f98d02333f70bc5708cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f48f3d7584a95152de60f7e493eae3381aae2ed7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f48f3d7584a95152de60f7e493eae3381aae2ed7", "html_url": "https://github.com/rust-lang/rust/commit/f48f3d7584a95152de60f7e493eae3381aae2ed7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f48f3d7584a95152de60f7e493eae3381aae2ed7/comments", "author": {"login": "ollie27", "id": 7189418, "node_id": "MDQ6VXNlcjcxODk0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/7189418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ollie27", "html_url": "https://github.com/ollie27", "followers_url": "https://api.github.com/users/ollie27/followers", "following_url": "https://api.github.com/users/ollie27/following{/other_user}", "gists_url": "https://api.github.com/users/ollie27/gists{/gist_id}", "starred_url": "https://api.github.com/users/ollie27/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ollie27/subscriptions", "organizations_url": "https://api.github.com/users/ollie27/orgs", "repos_url": "https://api.github.com/users/ollie27/repos", "events_url": "https://api.github.com/users/ollie27/events{/privacy}", "received_events_url": "https://api.github.com/users/ollie27/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ollie27", "id": 7189418, "node_id": "MDQ6VXNlcjcxODk0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/7189418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ollie27", "html_url": "https://github.com/ollie27", "followers_url": "https://api.github.com/users/ollie27/followers", "following_url": "https://api.github.com/users/ollie27/following{/other_user}", "gists_url": "https://api.github.com/users/ollie27/gists{/gist_id}", "starred_url": "https://api.github.com/users/ollie27/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ollie27/subscriptions", "organizations_url": "https://api.github.com/users/ollie27/orgs", "repos_url": "https://api.github.com/users/ollie27/repos", "events_url": "https://api.github.com/users/ollie27/events{/privacy}", "received_events_url": "https://api.github.com/users/ollie27/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f0508af90cfe4fac018b1a464ed94a828811600", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f0508af90cfe4fac018b1a464ed94a828811600", "html_url": "https://github.com/rust-lang/rust/commit/4f0508af90cfe4fac018b1a464ed94a828811600"}], "stats": {"total": 26, "additions": 24, "deletions": 2}, "files": [{"sha": "71165cd3f40c36817fe00f045576688e8827f8d0", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f48f3d7584a95152de60f7e493eae3381aae2ed7/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f48f3d7584a95152de60f7e493eae3381aae2ed7/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=f48f3d7584a95152de60f7e493eae3381aae2ed7", "patch": "@@ -150,8 +150,8 @@ impl<'a, 'tcx> Clean<Crate> for visit_ast::RustdocVisitor<'a, 'tcx> {\n                     name: Some(prim.to_url_str().to_string()),\n                     attrs: attrs.clone(),\n                     visibility: Some(Public),\n-                    stability: None,\n-                    deprecation: None,\n+                    stability: get_stability(cx, def_id),\n+                    deprecation: get_deprecation(cx, def_id),\n                     def_id: def_id,\n                     inner: PrimitiveItem(prim),\n                 }"}, {"sha": "a9aa2dc267190281aaa41984042f0e089fc48549", "filename": "src/libstd/primitive_docs.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f48f3d7584a95152de60f7e493eae3381aae2ed7/src%2Flibstd%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f48f3d7584a95152de60f7e493eae3381aae2ed7/src%2Flibstd%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprimitive_docs.rs?ref=f48f3d7584a95152de60f7e493eae3381aae2ed7", "patch": "@@ -56,6 +56,7 @@\n ///\n /// Also, since `bool` implements the [`Copy`](marker/trait.Copy.html) trait, we don't\n /// have to worry about the move semantics (just like the integer and float primitives).\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_bool { }\n \n #[doc(primitive = \"char\")]\n@@ -126,6 +127,7 @@ mod prim_bool { }\n /// assert_eq!(12, s.len() * std::mem::size_of::<u8>());\n /// assert_eq!(32, v.len() * std::mem::size_of::<char>());\n /// ```\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_char { }\n \n #[doc(primitive = \"unit\")]\n@@ -163,6 +165,7 @@ mod prim_char { }\n /// };\n /// ```\n ///\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_unit { }\n \n #[doc(primitive = \"pointer\")]\n@@ -244,6 +247,7 @@ mod prim_unit { }\n ///\n /// *[See also the `std::ptr` module](ptr/index.html).*\n ///\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_pointer { }\n \n #[doc(primitive = \"array\")]\n@@ -342,6 +346,7 @@ mod prim_pointer { }\n /// for x in &array { }\n /// ```\n ///\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_array { }\n \n #[doc(primitive = \"slice\")]\n@@ -372,6 +377,7 @@ mod prim_array { }\n ///\n /// *[See also the `std::slice` module](slice/index.html).*\n ///\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_slice { }\n \n #[doc(primitive = \"str\")]\n@@ -438,6 +444,7 @@ mod prim_slice { }\n /// Note: This example shows the internals of `&str`. `unsafe` should not be\n /// used to get a string slice under normal circumstances. Use `.as_slice()`\n /// instead.\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_str { }\n \n #[doc(primitive = \"tuple\")]\n@@ -536,13 +543,15 @@ mod prim_str { }\n /// assert_eq!(y, 5);\n /// ```\n ///\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_tuple { }\n \n #[doc(primitive = \"f32\")]\n /// The 32-bit floating point type.\n ///\n /// *[See also the `std::f32` module](f32/index.html).*\n ///\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_f32 { }\n \n #[doc(primitive = \"f64\")]\n@@ -551,6 +560,7 @@ mod prim_f32 { }\n ///\n /// *[See also the `std::f64` module](f64/index.html).*\n ///\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_f64 { }\n \n #[doc(primitive = \"i8\")]\n@@ -562,6 +572,7 @@ mod prim_f64 { }\n /// However, please note that examples are shared between primitive integer\n /// types. So it's normal if you see usage of types like `i64` in there.\n ///\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_i8 { }\n \n #[doc(primitive = \"i16\")]\n@@ -573,6 +584,7 @@ mod prim_i8 { }\n /// However, please note that examples are shared between primitive integer\n /// types. So it's normal if you see usage of types like `i32` in there.\n ///\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_i16 { }\n \n #[doc(primitive = \"i32\")]\n@@ -584,6 +596,7 @@ mod prim_i16 { }\n /// However, please note that examples are shared between primitive integer\n /// types. So it's normal if you see usage of types like `i16` in there.\n ///\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_i32 { }\n \n #[doc(primitive = \"i64\")]\n@@ -595,6 +608,7 @@ mod prim_i32 { }\n /// However, please note that examples are shared between primitive integer\n /// types. So it's normal if you see usage of types like `i8` in there.\n ///\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_i64 { }\n \n #[doc(primitive = \"i128\")]\n@@ -606,6 +620,7 @@ mod prim_i64 { }\n /// However, please note that examples are shared between primitive integer\n /// types. So it's normal if you see usage of types like `i8` in there.\n ///\n+#[unstable(feature = \"i128\", issue=\"35118\")]\n mod prim_i128 { }\n \n #[doc(primitive = \"u8\")]\n@@ -617,6 +632,7 @@ mod prim_i128 { }\n /// However, please note that examples are shared between primitive integer\n /// types. So it's normal if you see usage of types like `u64` in there.\n ///\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_u8 { }\n \n #[doc(primitive = \"u16\")]\n@@ -628,6 +644,7 @@ mod prim_u8 { }\n /// However, please note that examples are shared between primitive integer\n /// types. So it's normal if you see usage of types like `u32` in there.\n ///\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_u16 { }\n \n #[doc(primitive = \"u32\")]\n@@ -639,6 +656,7 @@ mod prim_u16 { }\n /// However, please note that examples are shared between primitive integer\n /// types. So it's normal if you see usage of types like `u16` in there.\n ///\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_u32 { }\n \n #[doc(primitive = \"u64\")]\n@@ -650,6 +668,7 @@ mod prim_u32 { }\n /// However, please note that examples are shared between primitive integer\n /// types. So it's normal if you see usage of types like `u8` in there.\n ///\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_u64 { }\n \n #[doc(primitive = \"u128\")]\n@@ -661,6 +680,7 @@ mod prim_u64 { }\n /// However, please note that examples are shared between primitive integer\n /// types. So it's normal if you see usage of types like `u8` in there.\n ///\n+#[unstable(feature = \"i128\", issue=\"35118\")]\n mod prim_u128 { }\n \n #[doc(primitive = \"isize\")]\n@@ -672,6 +692,7 @@ mod prim_u128 { }\n /// However, please note that examples are shared between primitive integer\n /// types. So it's normal if you see usage of types like `usize` in there.\n ///\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_isize { }\n \n #[doc(primitive = \"usize\")]\n@@ -683,4 +704,5 @@ mod prim_isize { }\n /// However, please note that examples are shared between primitive integer\n /// types. So it's normal if you see usage of types like `isize` in there.\n ///\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_usize { }"}]}