{"sha": "69b1b3c011143b573c904f0759d187588cc457c0", "node_id": "C_kwDOAAsO6NoAKDY5YjFiM2MwMTExNDNiNTczYzkwNGYwNzU5ZDE4NzU4OGNjNDU3YzA", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-07-08T14:47:25Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-07-08T14:48:38Z"}, "message": "Create a custom layout path for UnsafeCell instead of piggy backing on the layout_scalar_valid_range logic", "tree": {"sha": "395ce33b8133d3c6f397699ff3c499ea2e8a3ceb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/395ce33b8133d3c6f397699ff3c499ea2e8a3ceb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69b1b3c011143b573c904f0759d187588cc457c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69b1b3c011143b573c904f0759d187588cc457c0", "html_url": "https://github.com/rust-lang/rust/commit/69b1b3c011143b573c904f0759d187588cc457c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69b1b3c011143b573c904f0759d187588cc457c0/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4bfba76a3da28d780be3cb31fd6269b8bc6183df", "url": "https://api.github.com/repos/rust-lang/rust/commits/4bfba76a3da28d780be3cb31fd6269b8bc6183df", "html_url": "https://github.com/rust-lang/rust/commit/4bfba76a3da28d780be3cb31fd6269b8bc6183df"}], "stats": {"total": 69, "additions": 48, "deletions": 21}, "files": [{"sha": "6d87328ef5daaf74fe39bde79588aa81c7739215", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 39, "deletions": 21, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/69b1b3c011143b573c904f0759d187588cc457c0/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69b1b3c011143b573c904f0759d187588cc457c0/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=69b1b3c011143b573c904f0759d187588cc457c0", "patch": "@@ -1076,6 +1076,34 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n \n                     let mut st = self.univariant_uninterned(ty, &variants[v], &def.repr(), kind)?;\n                     st.variants = Variants::Single { index: v };\n+\n+                    if def.is_unsafe_cell() {\n+                        let fill = |scalar: &mut _| match scalar {\n+                            Scalar::Initialized { value, valid_range } => {\n+                                *valid_range = WrappingRange::full(value.size(dl))\n+                            }\n+                            // Already doesn't have any niches\n+                            Scalar::Union { .. } => {}\n+                        };\n+                        match &mut st.abi {\n+                            Abi::Uninhabited => {}\n+                            Abi::Scalar(scalar) => fill(scalar),\n+                            Abi::ScalarPair(a, b) => {\n+                                fill(a);\n+                                fill(b);\n+                            }\n+                            Abi::Vector { element, count: _ } => {\n+                                // Until we support types other than floats and integers in SIMD,\n+                                // `element` must already be a full for its range, so there's nothing to\n+                                // do here.\n+                                assert!(element.is_always_valid(dl));\n+                            }\n+                            Abi::Aggregate { sized: _ } => {}\n+                        }\n+                        st.largest_niche = None;\n+                        return Ok(tcx.intern_layout(st));\n+                    }\n+\n                     let (start, end) = self.tcx.layout_scalar_valid_range(def.did());\n                     match st.abi {\n                         Abi::Scalar(ref mut scalar) | Abi::ScalarPair(ref mut scalar, _) => {\n@@ -1102,29 +1130,19 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                                 assert!(valid_range.end >= end);\n                                 valid_range.end = end;\n                             }\n-                            if def.is_unsafe_cell() {\n-                                match scalar {\n-                                    Scalar::Initialized { value, valid_range } => {\n-                                        *valid_range = WrappingRange::full(value.size(dl))\n-                                    }\n-                                    // Already doesn't have any niches\n-                                    Scalar::Union { .. } => {}\n-                                }\n-                                st.largest_niche = None;\n-                            } else {\n-                                // Update `largest_niche` if we have introduced a larger niche.\n-                                let niche = Niche::from_scalar(dl, Size::ZERO, *scalar);\n-                                if let Some(niche) = niche {\n-                                    match st.largest_niche {\n-                                        Some(largest_niche) => {\n-                                            // Replace the existing niche even if they're equal,\n-                                            // because this one is at a lower offset.\n-                                            if largest_niche.available(dl) <= niche.available(dl) {\n-                                                st.largest_niche = Some(niche);\n-                                            }\n+\n+                            // Update `largest_niche` if we have introduced a larger niche.\n+                            let niche = Niche::from_scalar(dl, Size::ZERO, *scalar);\n+                            if let Some(niche) = niche {\n+                                match st.largest_niche {\n+                                    Some(largest_niche) => {\n+                                        // Replace the existing niche even if they're equal,\n+                                        // because this one is at a lower offset.\n+                                        if largest_niche.available(dl) <= niche.available(dl) {\n+                                            st.largest_niche = Some(niche);\n                                         }\n-                                        None => st.largest_niche = Some(niche),\n                                     }\n+                                    None => st.largest_niche = Some(niche),\n                                 }\n                             }\n                         }"}, {"sha": "2d3bb1d23c093acddd5cb5b3656603e226c321e1", "filename": "src/test/ui/layout/unsafe-cell-hides-niche.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/69b1b3c011143b573c904f0759d187588cc457c0/src%2Ftest%2Fui%2Flayout%2Funsafe-cell-hides-niche.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69b1b3c011143b573c904f0759d187588cc457c0/src%2Ftest%2Fui%2Flayout%2Funsafe-cell-hides-niche.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flayout%2Funsafe-cell-hides-niche.rs?ref=69b1b3c011143b573c904f0759d187588cc457c0", "patch": "@@ -38,4 +38,13 @@ fn main() {\n     assert_eq!(size_of::<Option<    RwLock<&()>>>(), 32); // (\u2717 niche opt)\n     assert_eq!(size_of::<            Mutex<&()> >(), 16);\n     assert_eq!(size_of::<Option<     Mutex<&()>>>(), 24); // (\u2717 niche opt)\n+\n+    assert_eq!(size_of::<       UnsafeCell<&[i32]> >(), 16);\n+    assert_eq!(size_of::<Option<UnsafeCell<&[i32]>>>(), 24); // (\u2717 niche opt)\n+    assert_eq!(size_of::<       UnsafeCell<(&(), &())> >(), 16);\n+    assert_eq!(size_of::<Option<UnsafeCell<(&(), &())>>>(), 24); // (\u2717 niche opt)\n+\n+    trait Trait {}\n+    assert_eq!(size_of::<       UnsafeCell<&dyn Trait> >(), 16);\n+    assert_eq!(size_of::<Option<UnsafeCell<&dyn Trait>>>(), 24); // (\u2717 niche opt)\n }"}]}