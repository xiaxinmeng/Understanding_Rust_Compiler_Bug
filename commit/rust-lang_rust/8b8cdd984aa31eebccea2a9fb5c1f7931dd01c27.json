{"sha": "8b8cdd984aa31eebccea2a9fb5c1f7931dd01c27", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiOGNkZDk4NGFhMzFlZWJjY2VhMmE5ZmI1YzFmNzkzMWRkMDFjMjc=", "commit": {"author": {"name": "Basile Desloges", "email": "basile.desloges@gmail.com", "date": "2017-10-06T15:29:14Z"}, "committer": {"name": "Basile Desloges", "email": "basile.desloges@gmail.com", "date": "2017-10-06T15:44:50Z"}, "message": "mir-borrowck: Append `_` or `..` depending on the context if a local variable hasn't a name", "tree": {"sha": "dfbd44ea7f6ff40eb62afc26e11971887528e583", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dfbd44ea7f6ff40eb62afc26e11971887528e583"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b8cdd984aa31eebccea2a9fb5c1f7931dd01c27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b8cdd984aa31eebccea2a9fb5c1f7931dd01c27", "html_url": "https://github.com/rust-lang/rust/commit/8b8cdd984aa31eebccea2a9fb5c1f7931dd01c27", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b8cdd984aa31eebccea2a9fb5c1f7931dd01c27/comments", "author": {"login": "zilbuz", "id": 434964, "node_id": "MDQ6VXNlcjQzNDk2NA==", "avatar_url": "https://avatars.githubusercontent.com/u/434964?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zilbuz", "html_url": "https://github.com/zilbuz", "followers_url": "https://api.github.com/users/zilbuz/followers", "following_url": "https://api.github.com/users/zilbuz/following{/other_user}", "gists_url": "https://api.github.com/users/zilbuz/gists{/gist_id}", "starred_url": "https://api.github.com/users/zilbuz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zilbuz/subscriptions", "organizations_url": "https://api.github.com/users/zilbuz/orgs", "repos_url": "https://api.github.com/users/zilbuz/repos", "events_url": "https://api.github.com/users/zilbuz/events{/privacy}", "received_events_url": "https://api.github.com/users/zilbuz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "zilbuz", "id": 434964, "node_id": "MDQ6VXNlcjQzNDk2NA==", "avatar_url": "https://avatars.githubusercontent.com/u/434964?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zilbuz", "html_url": "https://github.com/zilbuz", "followers_url": "https://api.github.com/users/zilbuz/followers", "following_url": "https://api.github.com/users/zilbuz/following{/other_user}", "gists_url": "https://api.github.com/users/zilbuz/gists{/gist_id}", "starred_url": "https://api.github.com/users/zilbuz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zilbuz/subscriptions", "organizations_url": "https://api.github.com/users/zilbuz/orgs", "repos_url": "https://api.github.com/users/zilbuz/repos", "events_url": "https://api.github.com/users/zilbuz/events{/privacy}", "received_events_url": "https://api.github.com/users/zilbuz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca5dc86c5a2e92f35c94e7a1f4592bb7fd0b271c", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca5dc86c5a2e92f35c94e7a1f4592bb7fd0b271c", "html_url": "https://github.com/rust-lang/rust/commit/ca5dc86c5a2e92f35c94e7a1f4592bb7fd0b271c"}], "stats": {"total": 20, "additions": 13, "deletions": 7}, "files": [{"sha": "3546b9985327bda342ac9a7315fce19dbb36f700", "filename": "src/librustc_mir/borrow_check.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8b8cdd984aa31eebccea2a9fb5c1f7931dd01c27/src%2Flibrustc_mir%2Fborrow_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b8cdd984aa31eebccea2a9fb5c1f7931dd01c27/src%2Flibrustc_mir%2Fborrow_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check.rs?ref=8b8cdd984aa31eebccea2a9fb5c1f7931dd01c27", "patch": "@@ -14,7 +14,7 @@ use rustc::hir::def_id::{DefId};\n use rustc::infer::{InferCtxt};\n use rustc::ty::{self, TyCtxt, ParamEnv};\n use rustc::ty::maps::Providers;\n-use rustc::mir::{AssertMessage, BasicBlock, BorrowKind, Location, Lvalue};\n+use rustc::mir::{AssertMessage, BasicBlock, BorrowKind, Location, Lvalue, Local};\n use rustc::mir::{Mir, Mutability, Operand, Projection, ProjectionElem, Rvalue};\n use rustc::mir::{Statement, StatementKind, Terminator, TerminatorKind};\n use rustc::mir::transform::{MirSource};\n@@ -1061,11 +1061,7 @@ impl<'c, 'b, 'a: 'b+'c, 'gcx, 'tcx: 'a> MirBorrowckCtxt<'c, 'b, 'a, 'gcx, 'tcx>\n     fn append_lvalue_to_string(&self, lvalue: &Lvalue, buf: &mut String, autoderef: Option<bool>) {\n         match *lvalue {\n             Lvalue::Local(local) => {\n-                let local = &self.mir.local_decls[local];\n-                match local.name {\n-                    Some(name) => buf.push_str(&format!(\"{}\", name)),\n-                    None => buf.push_str(\"_\"),\n-                }\n+                self.append_local_to_string(local, buf, \"_\");\n             }\n             Lvalue::Static(ref static_) => {\n                 buf.push_str(&format!(\"{}\", &self.tcx.item_name(static_.def_id)));\n@@ -1102,7 +1098,7 @@ impl<'c, 'b, 'a: 'b+'c, 'gcx, 'tcx: 'a> MirBorrowckCtxt<'c, 'b, 'a, 'gcx, 'tcx>\n                 self.append_lvalue_to_string(&proj.base, buf, Some(autoderef));\n                 if let Some(index) = index_operand {\n                     buf.push_str(\"[\");\n-                    self.append_lvalue_to_string(&Lvalue::Local(index), buf, None);\n+                    self.append_local_to_string(index, buf, \"..\");\n                     buf.push_str(\"]\");\n                 } else {\n                     buf.push_str(&suffix);\n@@ -1111,6 +1107,16 @@ impl<'c, 'b, 'a: 'b+'c, 'gcx, 'tcx: 'a> MirBorrowckCtxt<'c, 'b, 'a, 'gcx, 'tcx>\n         }\n     }\n \n+    // Appends end-user visible description of the `local` lvalue to `buf`. If `local` doesn't have\n+    // a name, then `none_string` is appended instead\n+    fn append_local_to_string(&self, local_index: Local, buf: &mut String, none_string: &str) {\n+        let local = &self.mir.local_decls[local_index];\n+        match local.name {\n+            Some(name) => buf.push_str(&format!(\"{}\", name)),\n+            None => buf.push_str(none_string)\n+        }\n+    }\n+\n     // End-user visible description of the `field_index`nth field of `base`\n     fn describe_field(&self, base: &Lvalue, field_index: usize) -> String {\n         match *base {"}]}