{"sha": "b224397b7cb54e8c25e2285e38432db58790016e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyMjQzOTdiN2NiNTRlOGMyNWUyMjg1ZTM4NDMyZGI1ODc5MDAxNmU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-02T13:42:30Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-17T15:32:15Z"}, "message": "issue better error message when LUB/GLB diverge under new behavior", "tree": {"sha": "82e12ede654c5b06482d2bae8222f2be73b285d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82e12ede654c5b06482d2bae8222f2be73b285d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b224397b7cb54e8c25e2285e38432db58790016e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b224397b7cb54e8c25e2285e38432db58790016e", "html_url": "https://github.com/rust-lang/rust/commit/b224397b7cb54e8c25e2285e38432db58790016e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b224397b7cb54e8c25e2285e38432db58790016e/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "397973b601f6b9802a01542ff3d171785437d1e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/397973b601f6b9802a01542ff3d171785437d1e1", "html_url": "https://github.com/rust-lang/rust/commit/397973b601f6b9802a01542ff3d171785437d1e1"}], "stats": {"total": 139, "additions": 138, "deletions": 1}, "files": [{"sha": "4f36193e197d9fdd887e769f26dce6ab5e03bc6e", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b224397b7cb54e8c25e2285e38432db58790016e/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b224397b7cb54e8c25e2285e38432db58790016e/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=b224397b7cb54e8c25e2285e38432db58790016e", "patch": "@@ -762,16 +762,23 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             }\n         }\n \n-        self.note_error_origin(diag, &cause);\n         self.check_and_note_conflicting_crates(diag, terr, span);\n         self.tcx.note_and_explain_type_err(diag, terr, span);\n+\n+        // It reads better to have the error origin as the final\n+        // thing.\n+        self.note_error_origin(diag, &cause);\n     }\n \n     pub fn report_and_explain_type_error(&self,\n                                          trace: TypeTrace<'tcx>,\n                                          terr: &TypeError<'tcx>)\n                                          -> DiagnosticBuilder<'tcx>\n     {\n+        debug!(\"report_and_explain_type_error(trace={:?}, terr={:?})\",\n+               trace,\n+               terr);\n+\n         let span = trace.cause.span;\n         let failure_str = trace.cause.as_failure_str();\n         let mut diag = match trace.cause.code {"}, {"sha": "fd14e0e40e234985629e587307fa0083faa4b86d", "filename": "src/librustc/infer/glb.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b224397b7cb54e8c25e2285e38432db58790016e/src%2Flibrustc%2Finfer%2Fglb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b224397b7cb54e8c25e2285e38432db58790016e/src%2Flibrustc%2Finfer%2Fglb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fglb.rs?ref=b224397b7cb54e8c25e2285e38432db58790016e", "patch": "@@ -75,6 +75,7 @@ impl<'combine, 'infcx, 'gcx, 'tcx> TypeRelation<'infcx, 'gcx, 'tcx>\n                   -> RelateResult<'tcx, ty::Binder<T>>\n         where T: Relate<'tcx>\n     {\n+        debug!(\"binders(a={:?}, b={:?})\", a, b);\n         let was_error = self.infcx().probe(|_snapshot| {\n             // Subtle: use a fresh combine-fields here because we recover\n             // from Err. Doing otherwise could propagate obligations out\n@@ -84,13 +85,15 @@ impl<'combine, 'infcx, 'gcx, 'tcx> TypeRelation<'infcx, 'gcx, 'tcx>\n                 .higher_ranked_glb(a, b, self.a_is_expected)\n                 .is_err()\n         });\n+        debug!(\"binders: was_error={:?}\", was_error);\n \n         // When higher-ranked types are involved, computing the LUB is\n         // very challenging, switch to invariance. This is obviously\n         // overly conservative but works ok in practice.\n         match self.relate_with_variance(ty::Variance::Invariant, a, b) {\n             Ok(_) => Ok(a.clone()),\n             Err(err) => {\n+                debug!(\"binders: error occurred, was_error={:?}\", was_error);\n                 if !was_error {\n                     Err(TypeError::OldStyleLUB(Box::new(err)))\n                 } else {"}, {"sha": "55c7eef607bbe41fc6a7d7e31f6b379d8d2d7afe", "filename": "src/librustc/infer/lub.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b224397b7cb54e8c25e2285e38432db58790016e/src%2Flibrustc%2Finfer%2Flub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b224397b7cb54e8c25e2285e38432db58790016e/src%2Flibrustc%2Finfer%2Flub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Flub.rs?ref=b224397b7cb54e8c25e2285e38432db58790016e", "patch": "@@ -75,6 +75,7 @@ impl<'combine, 'infcx, 'gcx, 'tcx> TypeRelation<'infcx, 'gcx, 'tcx>\n                   -> RelateResult<'tcx, ty::Binder<T>>\n         where T: Relate<'tcx>\n     {\n+        debug!(\"binders(a={:?}, b={:?})\", a, b);\n         let was_error = self.infcx().probe(|_snapshot| {\n             // Subtle: use a fresh combine-fields here because we recover\n             // from Err. Doing otherwise could propagate obligations out\n@@ -84,13 +85,15 @@ impl<'combine, 'infcx, 'gcx, 'tcx> TypeRelation<'infcx, 'gcx, 'tcx>\n                 .higher_ranked_lub(a, b, self.a_is_expected)\n                 .is_err()\n         });\n+        debug!(\"binders: was_error={:?}\", was_error);\n \n         // When higher-ranked types are involved, computing the LUB is\n         // very challenging, switch to invariance. This is obviously\n         // overly conservative but works ok in practice.\n         match self.relate_with_variance(ty::Variance::Invariant, a, b) {\n             Ok(_) => Ok(a.clone()),\n             Err(err) => {\n+                debug!(\"binders: error occurred, was_error={:?}\", was_error);\n                 if !was_error {\n                     Err(TypeError::OldStyleLUB(Box::new(err)))\n                 } else {"}, {"sha": "228ca76ed9a7ac0648d9837e1c79a6a7c07dfb75", "filename": "src/librustc/ty/error.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b224397b7cb54e8c25e2285e38432db58790016e/src%2Flibrustc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b224397b7cb54e8c25e2285e38432db58790016e/src%2Flibrustc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferror.rs?ref=b224397b7cb54e8c25e2285e38432db58790016e", "patch": "@@ -298,6 +298,12 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                 db.span_note(found.origin_span,\n                              \"...that also applies to the same type variable here\");\n             }\n+            OldStyleLUB(err) => {\n+                db.note(\"this was previously accepted by the compiler but has been phased out\");\n+                db.note(\"for more information, see https://github.com/rust-lang/rust/issues/45852\");\n+\n+                self.note_and_explain_type_err(db, &err, sp);\n+            }\n             _ => {}\n         }\n     }"}, {"sha": "85c90bb375fc7a57a25a2b6cf686aba76a7eeb73", "filename": "src/test/ui/lub-glb/old-lub-glb-hr.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/b224397b7cb54e8c25e2285e38432db58790016e/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b224397b7cb54e8c25e2285e38432db58790016e/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr.rs?ref=b224397b7cb54e8c25e2285e38432db58790016e", "patch": "@@ -0,0 +1,36 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we give a note when the old LUB/GLB algorithm would have\n+// succeeded but the new code (which is stricter) gives an error.\n+\n+fn foo(\n+    x: fn(&u8, &u8),\n+    y: for<'a> fn(&'a u8, &'a u8),\n+) {\n+    let z = match 22 {\n+        0 => x,\n+        _ => y,\n+    };\n+}\n+\n+fn bar(\n+    x: fn(&u8, &u8),\n+    y: for<'a> fn(&'a u8, &'a u8),\n+) {\n+    let z = match 22 {\n+        // No error with an explicit cast:\n+        0 => x as for<'a> fn(&'a u8, &'a u8),\n+        _ => y,\n+    };\n+}\n+\n+fn main() {\n+}"}, {"sha": "4a310a5e6b29685b3f0230bf43fb1e41f4754e49", "filename": "src/test/ui/lub-glb/old-lub-glb-hr.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b224397b7cb54e8c25e2285e38432db58790016e/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b224397b7cb54e8c25e2285e38432db58790016e/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-hr.stderr?ref=b224397b7cb54e8c25e2285e38432db58790016e", "patch": "@@ -0,0 +1,22 @@\n+error[E0308]: match arms have incompatible types\n+  --> $DIR/old-lub-glb-hr.rs:18:13\n+   |\n+18 |       let z = match 22 {\n+   |  _____________^\n+19 | |         0 => x,\n+20 | |         _ => y,\n+21 | |     };\n+   | |_____^ expected bound lifetime parameter, found concrete lifetime\n+   |\n+   = note: expected type `for<'r, 's> fn(&'r u8, &'s u8)`\n+              found type `for<'a> fn(&'a u8, &'a u8)`\n+   = note: this was previously accepted by the compiler but has been phased out\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/45852\n+note: match arm with an incompatible type\n+  --> $DIR/old-lub-glb-hr.rs:20:14\n+   |\n+20 |         _ => y,\n+   |              ^\n+\n+error: aborting due to previous error\n+"}, {"sha": "7cf89b68be197534198de2d574a515e32bfb8f5d", "filename": "src/test/ui/lub-glb/old-lub-glb-object.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/b224397b7cb54e8c25e2285e38432db58790016e/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b224397b7cb54e8c25e2285e38432db58790016e/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-object.rs?ref=b224397b7cb54e8c25e2285e38432db58790016e", "patch": "@@ -0,0 +1,38 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we give a note when the old LUB/GLB algorithm would have\n+// succeeded but the new code (which is stricter) gives an error.\n+\n+trait Foo<T, U> { }\n+\n+fn foo(\n+    x: &for<'a, 'b> Foo<&'a u8, &'b u8>,\n+    y: &for<'a> Foo<&'a u8, &'a u8>,\n+) {\n+    let z = match 22 {\n+        0 => x,\n+        _ => y,\n+    };\n+}\n+\n+fn bar(\n+    x: &for<'a, 'b> Foo<&'a u8, &'b u8>,\n+    y: &for<'a> Foo<&'a u8, &'a u8>,\n+) {\n+    // Accepted with explicit case:\n+    let z = match 22 {\n+        0 => x as &for<'a> Foo<&'a u8, &'a u8>,\n+        _ => y,\n+    };\n+}\n+\n+fn main() {\n+}"}, {"sha": "a1077f40bf561082d8936d7cb29aef27a0f142cb", "filename": "src/test/ui/lub-glb/old-lub-glb-object.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b224397b7cb54e8c25e2285e38432db58790016e/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-object.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b224397b7cb54e8c25e2285e38432db58790016e/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-object.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-object.stderr?ref=b224397b7cb54e8c25e2285e38432db58790016e", "patch": "@@ -0,0 +1,22 @@\n+error[E0308]: match arms have incompatible types\n+  --> $DIR/old-lub-glb-object.rs:20:13\n+   |\n+20 |       let z = match 22 {\n+   |  _____________^\n+21 | |         0 => x,\n+22 | |         _ => y,\n+23 | |     };\n+   | |_____^ expected bound lifetime parameter 'a, found concrete lifetime\n+   |\n+   = note: expected type `&for<'a, 'b> Foo<&'a u8, &'b u8>`\n+              found type `&for<'a> Foo<&'a u8, &'a u8>`\n+   = note: this was previously accepted by the compiler but has been phased out\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/45852\n+note: match arm with an incompatible type\n+  --> $DIR/old-lub-glb-object.rs:22:14\n+   |\n+22 |         _ => y,\n+   |              ^\n+\n+error: aborting due to previous error\n+"}]}