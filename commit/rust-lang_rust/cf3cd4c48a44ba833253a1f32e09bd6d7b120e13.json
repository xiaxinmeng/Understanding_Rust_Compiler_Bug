{"sha": "cf3cd4c48a44ba833253a1f32e09bd6d7b120e13", "node_id": "C_kwDOAAsO6NoAKGNmM2NkNGM0OGE0NGJhODMzMjUzYTFmMzJlMDliZDZkN2IxMjBlMTM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-02-18T15:23:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-18T15:23:30Z"}, "message": "Rollup merge of #93024 - compiler-errors:inline-mir-bad-bounds, r=estebank\n\nDo not ICE when inlining a function with un-satisfiable bounds\n\nFixes #93008\nThis is kinda a hack... but it's the fix I thought had the least blast-radius.\n\nWe use `normalize_param_env_or_error` to verify that the predicates in the param env are self-consistent, since with RevealAll, a bad predicate like `<&'static () as Clone>` will be evaluated with an empty ParamEnv (since it references no generics), and we'll raise an error for it.", "tree": {"sha": "614cd20dfba4db693d5a1f2a16c31cb6535af2fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/614cd20dfba4db693d5a1f2a16c31cb6535af2fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf3cd4c48a44ba833253a1f32e09bd6d7b120e13", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiD7nzCRBK7hj4Ov3rIwAAR0cIADENrUigucFfrZMGWNHOD6tB\npyoUOZiDLXVrybM75zO0upL9lBafXJh7VccpRu5AKJ4c3kJhokJ/4Yc6WJIBdSpR\nAx4weH4w6C5bEAV3X1J/gX7iJWhUte4PUJYnCtDCte5+/pXT9TfdLkA9Qoi5GEDn\nkXOyuPh5kif5LVERc5NKqXJuq/WQxTwHRwFdCITgnr1gmVaziTMFMLyBHsQ9EaK0\naY6IKmHPtjhnqL1Ygqo3UvYh7oxnXVKwe47ZwqOwyzn5BQbYeE4dyS3M2fzPOjsV\naIoz4gjappRXHEluzszbIYh+E65A8oviHsr0CmFGwBzkHDixeVGHeXOPJPqneRM=\n=pxVY\n-----END PGP SIGNATURE-----\n", "payload": "tree 614cd20dfba4db693d5a1f2a16c31cb6535af2fc\nparent 659382fa47e9a7c29451ed407c4062f86dee07b1\nparent b651d5a1f4b3b8ab54926d4f5dd0390a94f5bac3\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1645197810 +0100\ncommitter GitHub <noreply@github.com> 1645197810 +0100\n\nRollup merge of #93024 - compiler-errors:inline-mir-bad-bounds, r=estebank\n\nDo not ICE when inlining a function with un-satisfiable bounds\n\nFixes #93008\nThis is kinda a hack... but it's the fix I thought had the least blast-radius.\n\nWe use `normalize_param_env_or_error` to verify that the predicates in the param env are self-consistent, since with RevealAll, a bad predicate like `<&'static () as Clone>` will be evaluated with an empty ParamEnv (since it references no generics), and we'll raise an error for it.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf3cd4c48a44ba833253a1f32e09bd6d7b120e13", "html_url": "https://github.com/rust-lang/rust/commit/cf3cd4c48a44ba833253a1f32e09bd6d7b120e13", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf3cd4c48a44ba833253a1f32e09bd6d7b120e13/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "659382fa47e9a7c29451ed407c4062f86dee07b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/659382fa47e9a7c29451ed407c4062f86dee07b1", "html_url": "https://github.com/rust-lang/rust/commit/659382fa47e9a7c29451ed407c4062f86dee07b1"}, {"sha": "b651d5a1f4b3b8ab54926d4f5dd0390a94f5bac3", "url": "https://api.github.com/repos/rust-lang/rust/commits/b651d5a1f4b3b8ab54926d4f5dd0390a94f5bac3", "html_url": "https://github.com/rust-lang/rust/commit/b651d5a1f4b3b8ab54926d4f5dd0390a94f5bac3"}], "stats": {"total": 37, "additions": 35, "deletions": 2}, "files": [{"sha": "55ce5910c818b71424f630ef2b19d47d81ed37ec", "filename": "compiler/rustc_mir_transform/src/inline.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/cf3cd4c48a44ba833253a1f32e09bd6d7b120e13/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf3cd4c48a44ba833253a1f32e09bd6d7b120e13/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs?ref=cf3cd4c48a44ba833253a1f32e09bd6d7b120e13", "patch": "@@ -7,6 +7,7 @@ use rustc_index::vec::Idx;\n use rustc_middle::middle::codegen_fn_attrs::{CodegenFnAttrFlags, CodegenFnAttrs};\n use rustc_middle::mir::visit::*;\n use rustc_middle::mir::*;\n+use rustc_middle::traits::ObligationCause;\n use rustc_middle::ty::subst::Subst;\n use rustc_middle::ty::{self, ConstKind, Instance, InstanceDef, ParamEnv, Ty, TyCtxt};\n use rustc_span::{hygiene::ExpnKind, ExpnData, Span};\n@@ -75,10 +76,18 @@ fn inline<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) -> bool {\n         return false;\n     }\n \n+    let param_env = tcx.param_env_reveal_all_normalized(def_id);\n+    let param_env = rustc_trait_selection::traits::normalize_param_env_or_error(\n+        tcx,\n+        def_id,\n+        param_env,\n+        ObligationCause::misc(body.span, hir_id),\n+    );\n+\n     let mut this = Inliner {\n         tcx,\n-        param_env: tcx.param_env_reveal_all_normalized(body.source.def_id()),\n-        codegen_fn_attrs: tcx.codegen_fn_attrs(body.source.def_id()),\n+        param_env,\n+        codegen_fn_attrs: tcx.codegen_fn_attrs(def_id),\n         hir_id,\n         history: Vec::new(),\n         changed: false,"}, {"sha": "bf6e6a4fcbb9d9e0d70bd3601712e367b19bf111", "filename": "compiler/rustc_trait_selection/src/traits/codegen.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf3cd4c48a44ba833253a1f32e09bd6d7b120e13/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcodegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf3cd4c48a44ba833253a1f32e09bd6d7b120e13/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcodegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcodegen.rs?ref=cf3cd4c48a44ba833253a1f32e09bd6d7b120e13", "patch": "@@ -64,6 +64,8 @@ pub fn codegen_fulfill_obligation<'tcx>(\n             Err(Unimplemented) => {\n                 // This can trigger when we probe for the source of a `'static` lifetime requirement\n                 // on a trait object: `impl Foo for dyn Trait {}` has an implicit `'static` bound.\n+                // This can also trigger when we have a global bound that is not actually satisfied,\n+                // but was included during typeck due to the trivial_bounds feature.\n                 infcx.tcx.sess.delay_span_bug(\n                     rustc_span::DUMMY_SP,\n                     &format!("}, {"sha": "1b010566cbc6ed5ef9733fd794e541fd17558eab", "filename": "src/test/ui/trait-bounds/issue-93008.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cf3cd4c48a44ba833253a1f32e09bd6d7b120e13/src%2Ftest%2Fui%2Ftrait-bounds%2Fissue-93008.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf3cd4c48a44ba833253a1f32e09bd6d7b120e13/src%2Ftest%2Fui%2Ftrait-bounds%2Fissue-93008.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrait-bounds%2Fissue-93008.rs?ref=cf3cd4c48a44ba833253a1f32e09bd6d7b120e13", "patch": "@@ -0,0 +1,10 @@\n+// compile-flags: -Zmir-opt-level=4\n+\n+pub fn bar<T>(s: &'static mut ())\n+where\n+    &'static mut (): Clone, //~ ERROR the trait bound\n+{\n+    <&'static mut () as Clone>::clone(&s);\n+}\n+\n+fn main() {}"}, {"sha": "10f80f8de0c9b8267a8f8c6466cba7048bae10f7", "filename": "src/test/ui/trait-bounds/issue-93008.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cf3cd4c48a44ba833253a1f32e09bd6d7b120e13/src%2Ftest%2Fui%2Ftrait-bounds%2Fissue-93008.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf3cd4c48a44ba833253a1f32e09bd6d7b120e13/src%2Ftest%2Fui%2Ftrait-bounds%2Fissue-93008.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrait-bounds%2Fissue-93008.stderr?ref=cf3cd4c48a44ba833253a1f32e09bd6d7b120e13", "patch": "@@ -0,0 +1,12 @@\n+error[E0277]: the trait bound `&'static mut (): Clone` is not satisfied\n+  --> $DIR/issue-93008.rs:5:5\n+   |\n+LL |     &'static mut (): Clone,\n+   |     ^^^^^^^^^^^^^^^^^^^^^^ the trait `Clone` is not implemented for `&'static mut ()`\n+   |\n+   = help: see issue #48214\n+   = help: add `#![feature(trivial_bounds)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}]}