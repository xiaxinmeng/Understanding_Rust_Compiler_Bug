{"sha": "f6b8b780633798477bf0b13e01bfec8e1ab76856", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2YjhiNzgwNjMzNzk4NDc3YmYwYjEzZTAxYmZlYzhlMWFiNzY4NTY=", "commit": {"author": {"name": "Ali\u00e9nore Bouttefeux", "email": "alienore.bouttefeux@gmail.com", "date": "2021-05-09T11:37:09Z"}, "committer": {"name": "Ali\u00e9nore Bouttefeux", "email": "alienore.bouttefeux@gmail.com", "date": "2021-05-09T11:37:09Z"}, "message": "add bootstrap cfg", "tree": {"sha": "baf70953f50a3d6bd20d74c5fe7fc674786c3725", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/baf70953f50a3d6bd20d74c5fe7fc674786c3725"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f6b8b780633798477bf0b13e01bfec8e1ab76856", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f6b8b780633798477bf0b13e01bfec8e1ab76856", "html_url": "https://github.com/rust-lang/rust/commit/f6b8b780633798477bf0b13e01bfec8e1ab76856", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f6b8b780633798477bf0b13e01bfec8e1ab76856/comments", "author": {"login": "ABouttefeux", "id": 77335613, "node_id": "MDQ6VXNlcjc3MzM1NjEz", "avatar_url": "https://avatars.githubusercontent.com/u/77335613?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ABouttefeux", "html_url": "https://github.com/ABouttefeux", "followers_url": "https://api.github.com/users/ABouttefeux/followers", "following_url": "https://api.github.com/users/ABouttefeux/following{/other_user}", "gists_url": "https://api.github.com/users/ABouttefeux/gists{/gist_id}", "starred_url": "https://api.github.com/users/ABouttefeux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ABouttefeux/subscriptions", "organizations_url": "https://api.github.com/users/ABouttefeux/orgs", "repos_url": "https://api.github.com/users/ABouttefeux/repos", "events_url": "https://api.github.com/users/ABouttefeux/events{/privacy}", "received_events_url": "https://api.github.com/users/ABouttefeux/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ABouttefeux", "id": 77335613, "node_id": "MDQ6VXNlcjc3MzM1NjEz", "avatar_url": "https://avatars.githubusercontent.com/u/77335613?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ABouttefeux", "html_url": "https://github.com/ABouttefeux", "followers_url": "https://api.github.com/users/ABouttefeux/followers", "following_url": "https://api.github.com/users/ABouttefeux/following{/other_user}", "gists_url": "https://api.github.com/users/ABouttefeux/gists{/gist_id}", "starred_url": "https://api.github.com/users/ABouttefeux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ABouttefeux/subscriptions", "organizations_url": "https://api.github.com/users/ABouttefeux/orgs", "repos_url": "https://api.github.com/users/ABouttefeux/repos", "events_url": "https://api.github.com/users/ABouttefeux/events{/privacy}", "received_events_url": "https://api.github.com/users/ABouttefeux/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e99cb39899a4be7d5e1f6572d38486712c75786", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e99cb39899a4be7d5e1f6572d38486712c75786", "html_url": "https://github.com/rust-lang/rust/commit/6e99cb39899a4be7d5e1f6572d38486712c75786"}], "stats": {"total": 56, "additions": 53, "deletions": 3}, "files": [{"sha": "c1a0bb9f3e1e7951d364e985efcac360b01931e9", "filename": "library/test/src/formatters/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6b8b780633798477bf0b13e01bfec8e1ab76856/library%2Ftest%2Fsrc%2Fformatters%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6b8b780633798477bf0b13e01bfec8e1ab76856/library%2Ftest%2Fsrc%2Fformatters%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fformatters%2Fpretty.rs?ref=f6b8b780633798477bf0b13e01bfec8e1ab76856", "patch": "@@ -169,7 +169,7 @@ impl<T: Write> PrettyFormatter<T> {\n \n     fn write_test_name(&mut self, desc: &TestDesc) -> io::Result<()> {\n         let name = desc.padded_name(self.max_name_len, desc.name.padding());\n-        self.write_plain(&format!(\"test {} - {} ... \", name, desc.test_mode_string()))?;\n+        self.write_plain(&format!(\"test {} - {} ... \", name, desc.test_mode()))?;\n \n         Ok(())\n     }"}, {"sha": "a9589829ad270e574fac51b10b64556120d81983", "filename": "library/test/src/formatters/terse.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6b8b780633798477bf0b13e01bfec8e1ab76856/library%2Ftest%2Fsrc%2Fformatters%2Fterse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6b8b780633798477bf0b13e01bfec8e1ab76856/library%2Ftest%2Fsrc%2Fformatters%2Fterse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fformatters%2Fterse.rs?ref=f6b8b780633798477bf0b13e01bfec8e1ab76856", "patch": "@@ -158,7 +158,7 @@ impl<T: Write> TerseFormatter<T> {\n \n     fn write_test_name(&mut self, desc: &TestDesc) -> io::Result<()> {\n         let name = desc.padded_name(self.max_name_len, desc.name.padding());\n-        self.write_plain(&format!(\"test {} - {} ... \", name, desc.test_mode_string()))?;\n+        self.write_plain(&format!(\"test {} - {} ... \", name, desc.test_mode()))?;\n \n         Ok(())\n     }"}, {"sha": "5a4a540b04eb04c92eb2a0b4b8c092194ac65770", "filename": "library/test/src/tests.rs", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/f6b8b780633798477bf0b13e01bfec8e1ab76856/library%2Ftest%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6b8b780633798477bf0b13e01bfec8e1ab76856/library%2Ftest%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Ftests.rs?ref=f6b8b780633798477bf0b13e01bfec8e1ab76856", "patch": "@@ -61,7 +61,9 @@ fn one_ignored_one_unignored_test() -> Vec<TestDescAndFn> {\n                 ignore: true,\n                 should_panic: ShouldPanic::No,\n                 allow_fail: false,\n+                #[cfg(not(bootstrap))]\n                 compile_fail: false,\n+                #[cfg(not(bootstrap))]\n                 no_run: false,\n                 test_type: TestType::Unknown,\n             },\n@@ -73,7 +75,9 @@ fn one_ignored_one_unignored_test() -> Vec<TestDescAndFn> {\n                 ignore: false,\n                 should_panic: ShouldPanic::No,\n                 allow_fail: false,\n+                #[cfg(not(bootstrap))]\n                 compile_fail: false,\n+                #[cfg(not(bootstrap))]\n                 no_run: false,\n                 test_type: TestType::Unknown,\n             },\n@@ -93,7 +97,9 @@ pub fn do_not_run_ignored_tests() {\n             ignore: true,\n             should_panic: ShouldPanic::No,\n             allow_fail: false,\n+            #[cfg(not(bootstrap))]\n             compile_fail: false,\n+            #[cfg(not(bootstrap))]\n             no_run: false,\n             test_type: TestType::Unknown,\n         },\n@@ -114,7 +120,9 @@ pub fn ignored_tests_result_in_ignored() {\n             ignore: true,\n             should_panic: ShouldPanic::No,\n             allow_fail: false,\n+            #[cfg(not(bootstrap))]\n             compile_fail: false,\n+            #[cfg(not(bootstrap))]\n             no_run: false,\n             test_type: TestType::Unknown,\n         },\n@@ -139,7 +147,9 @@ fn test_should_panic() {\n             ignore: false,\n             should_panic: ShouldPanic::Yes,\n             allow_fail: false,\n+            #[cfg(not(bootstrap))]\n             compile_fail: false,\n+            #[cfg(not(bootstrap))]\n             no_run: false,\n             test_type: TestType::Unknown,\n         },\n@@ -164,7 +174,9 @@ fn test_should_panic_good_message() {\n             ignore: false,\n             should_panic: ShouldPanic::YesWithMessage(\"error message\"),\n             allow_fail: false,\n+            #[cfg(not(bootstrap))]\n             compile_fail: false,\n+            #[cfg(not(bootstrap))]\n             no_run: false,\n             test_type: TestType::Unknown,\n         },\n@@ -194,7 +206,9 @@ fn test_should_panic_bad_message() {\n             ignore: false,\n             should_panic: ShouldPanic::YesWithMessage(expected),\n             allow_fail: false,\n+            #[cfg(not(bootstrap))]\n             compile_fail: false,\n+            #[cfg(not(bootstrap))]\n             no_run: false,\n             test_type: TestType::Unknown,\n         },\n@@ -228,7 +242,9 @@ fn test_should_panic_non_string_message_type() {\n             ignore: false,\n             should_panic: ShouldPanic::YesWithMessage(expected),\n             allow_fail: false,\n+            #[cfg(not(bootstrap))]\n             compile_fail: false,\n+            #[cfg(not(bootstrap))]\n             no_run: false,\n             test_type: TestType::Unknown,\n         },\n@@ -254,7 +270,9 @@ fn test_should_panic_but_succeeds() {\n                 ignore: false,\n                 should_panic,\n                 allow_fail: false,\n+                #[cfg(not(bootstrap))]\n                 compile_fail: false,\n+                #[cfg(not(bootstrap))]\n                 no_run: false,\n                 test_type: TestType::Unknown,\n             },\n@@ -288,7 +306,9 @@ fn report_time_test_template(report_time: bool) -> Option<TestExecTime> {\n             ignore: false,\n             should_panic: ShouldPanic::No,\n             allow_fail: false,\n+            #[cfg(not(bootstrap))]\n             compile_fail: false,\n+            #[cfg(not(bootstrap))]\n             no_run: false,\n             test_type: TestType::Unknown,\n         },\n@@ -323,7 +343,9 @@ fn time_test_failure_template(test_type: TestType) -> TestResult {\n             ignore: false,\n             should_panic: ShouldPanic::No,\n             allow_fail: false,\n+            #[cfg(not(bootstrap))]\n             compile_fail: false,\n+            #[cfg(not(bootstrap))]\n             no_run: false,\n             test_type,\n         },\n@@ -362,7 +384,9 @@ fn typed_test_desc(test_type: TestType) -> TestDesc {\n         ignore: false,\n         should_panic: ShouldPanic::No,\n         allow_fail: false,\n+        #[cfg(not(bootstrap))]\n         compile_fail: false,\n+        #[cfg(not(bootstrap))]\n         no_run: false,\n         test_type,\n     }\n@@ -475,7 +499,9 @@ pub fn exclude_should_panic_option() {\n             ignore: false,\n             should_panic: ShouldPanic::Yes,\n             allow_fail: false,\n+            #[cfg(not(bootstrap))]\n             compile_fail: false,\n+            #[cfg(not(bootstrap))]\n             no_run: false,\n             test_type: TestType::Unknown,\n         },\n@@ -499,7 +525,9 @@ pub fn exact_filter_match() {\n                     ignore: false,\n                     should_panic: ShouldPanic::No,\n                     allow_fail: false,\n+                    #[cfg(not(bootstrap))]\n                     compile_fail: false,\n+                    #[cfg(not(bootstrap))]\n                     no_run: false,\n                     test_type: TestType::Unknown,\n                 },\n@@ -593,7 +621,9 @@ pub fn sort_tests() {\n                     ignore: false,\n                     should_panic: ShouldPanic::No,\n                     allow_fail: false,\n+                    #[cfg(not(bootstrap))]\n                     compile_fail: false,\n+                    #[cfg(not(bootstrap))]\n                     no_run: false,\n                     test_type: TestType::Unknown,\n                 },\n@@ -672,7 +702,9 @@ pub fn test_bench_no_iter() {\n         ignore: false,\n         should_panic: ShouldPanic::No,\n         allow_fail: false,\n+        #[cfg(not(bootstrap))]\n         compile_fail: false,\n+        #[cfg(not(bootstrap))]\n         no_run: false,\n         test_type: TestType::Unknown,\n     };\n@@ -694,7 +726,9 @@ pub fn test_bench_iter() {\n         ignore: false,\n         should_panic: ShouldPanic::No,\n         allow_fail: false,\n+        #[cfg(not(bootstrap))]\n         compile_fail: false,\n+        #[cfg(not(bootstrap))]\n         no_run: false,\n         test_type: TestType::Unknown,\n     };\n@@ -710,7 +744,9 @@ fn should_sort_failures_before_printing_them() {\n         ignore: false,\n         should_panic: ShouldPanic::No,\n         allow_fail: false,\n+        #[cfg(not(bootstrap))]\n         compile_fail: false,\n+        #[cfg(not(bootstrap))]\n         no_run: false,\n         test_type: TestType::Unknown,\n     };\n@@ -720,7 +756,9 @@ fn should_sort_failures_before_printing_them() {\n         ignore: false,\n         should_panic: ShouldPanic::No,\n         allow_fail: false,\n+        #[cfg(not(bootstrap))]\n         compile_fail: false,\n+        #[cfg(not(bootstrap))]\n         no_run: false,\n         test_type: TestType::Unknown,\n     };"}, {"sha": "4cbdc7affc6572ae95685ab38a7e5b954a9fffd2", "filename": "library/test/src/types.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f6b8b780633798477bf0b13e01bfec8e1ab76856/library%2Ftest%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6b8b780633798477bf0b13e01bfec8e1ab76856/library%2Ftest%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Ftypes.rs?ref=f6b8b780633798477bf0b13e01bfec8e1ab76856", "patch": "@@ -124,7 +124,9 @@ pub struct TestDesc {\n     pub ignore: bool,\n     pub should_panic: options::ShouldPanic,\n     pub allow_fail: bool,\n+    #[cfg(not(bootstrap))]\n     pub compile_fail: bool,\n+    #[cfg(not(bootstrap))]\n     pub no_run: bool,\n     pub test_type: TestType,\n }\n@@ -143,7 +145,8 @@ impl TestDesc {\n         }\n     }\n \n-    pub fn test_mode_string(&self) -> &'static str {\n+    #[cfg(not(bootstrap))]\n+    pub fn test_mode(&self) -> &'static str {\n         if self.ignore {\n             return &\"ignore\";\n         }\n@@ -164,6 +167,11 @@ impl TestDesc {\n         }\n         &\"run\"\n     }\n+\n+    #[cfg(bootstrap)]\n+    pub fn test_mode(&self) -> &'static str {\n+        &\"\"\n+    }\n }\n \n #[derive(Debug)]"}, {"sha": "c33d0ba4e57458ebced79bb66e266e39ed8f129f", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6b8b780633798477bf0b13e01bfec8e1ab76856/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6b8b780633798477bf0b13e01bfec8e1ab76856/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=f6b8b780633798477bf0b13e01bfec8e1ab76856", "patch": "@@ -935,7 +935,9 @@ impl Tester for Collector {\n                 // compiler failures are test failures\n                 should_panic: testing::ShouldPanic::No,\n                 allow_fail: config.allow_fail,\n+                #[cfg(not(bootstrap))]\n                 compile_fail: config.compile_fail,\n+                #[cfg(not(bootstrap))]\n                 no_run,\n                 test_type: testing::TestType::DocTest,\n             },"}, {"sha": "0aa1f336b6d483f9724251e0971070cf82689346", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6b8b780633798477bf0b13e01bfec8e1ab76856/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6b8b780633798477bf0b13e01bfec8e1ab76856/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=f6b8b780633798477bf0b13e01bfec8e1ab76856", "patch": "@@ -649,7 +649,9 @@ fn make_test(config: &Config, testpaths: &TestPaths, inputs: &Stamp) -> Vec<test\n                     ignore,\n                     should_panic,\n                     allow_fail: false,\n+                    #[cfg(not(bootstrap))]\n                     compile_fail: false,\n+                    #[cfg(not(bootstrap))]\n                     no_run: false,\n                     test_type: test::TestType::Unknown,\n                 },"}]}