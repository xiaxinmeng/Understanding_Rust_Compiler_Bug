{"sha": "ac02f9c18d601bec9740c552d0ba554ae62bd60c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjMDJmOWMxOGQ2MDFiZWM5NzQwYzU1MmQwYmE1NTRhZTYyYmQ2MGM=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-02-24T22:51:10Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-02-24T22:51:10Z"}, "message": "Rollup merge of #31842 - dileepbapat:master, r=alexcrichton\n\nI have made changes and built it after that. Please advise,\n\nhttps://github.com/rust-lang/rust/issues/31820", "tree": {"sha": "1c7adcf26636a78398c7e0d5580dc9077c2825b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c7adcf26636a78398c7e0d5580dc9077c2825b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac02f9c18d601bec9740c552d0ba554ae62bd60c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac02f9c18d601bec9740c552d0ba554ae62bd60c", "html_url": "https://github.com/rust-lang/rust/commit/ac02f9c18d601bec9740c552d0ba554ae62bd60c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac02f9c18d601bec9740c552d0ba554ae62bd60c/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e89dee63902fd45ef21397bd15afd371e3cdbf9", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e89dee63902fd45ef21397bd15afd371e3cdbf9", "html_url": "https://github.com/rust-lang/rust/commit/2e89dee63902fd45ef21397bd15afd371e3cdbf9"}, {"sha": "fbfe70e6ab26c0cccb5fbbf5b805eecb751cb576", "url": "https://api.github.com/repos/rust-lang/rust/commits/fbfe70e6ab26c0cccb5fbbf5b805eecb751cb576", "html_url": "https://github.com/rust-lang/rust/commit/fbfe70e6ab26c0cccb5fbbf5b805eecb751cb576"}], "stats": {"total": 70, "additions": 28, "deletions": 42}, "files": [{"sha": "fe059076926ee8161ebb736e5d8fa5ad9e260d3f", "filename": "src/libgetopts/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ac02f9c18d601bec9740c552d0ba554ae62bd60c/src%2Flibgetopts%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac02f9c18d601bec9740c552d0ba554ae62bd60c/src%2Flibgetopts%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgetopts%2Flib.rs?ref=ac02f9c18d601bec9740c552d0ba554ae62bd60c", "patch": "@@ -331,9 +331,8 @@ impl Matches {\n     /// Returns the string argument supplied to one of several matching options or `None`.\n     pub fn opts_str(&self, names: &[String]) -> Option<String> {\n         for nm in names {\n-            match self.opt_val(&nm[..]) {\n-                Some(Val(ref s)) => return Some(s.clone()),\n-                _ => (),\n+            if let Some(Val(ref s)) = self.opt_val(&nm[..]) {\n+                  return Some(s.clone())\n             }\n         }\n         None"}, {"sha": "76360dcc1b9725b79c15cb79b2f3877740d9600b", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ac02f9c18d601bec9740c552d0ba554ae62bd60c/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac02f9c18d601bec9740c552d0ba554ae62bd60c/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=ac02f9c18d601bec9740c552d0ba554ae62bd60c", "patch": "@@ -226,9 +226,8 @@ fn symbol_hash<'tcx>(tcx: &ty::ctxt<'tcx>,\n }\n \n fn get_symbol_hash<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>) -> String {\n-    match ccx.type_hashcodes().borrow().get(&t) {\n-        Some(h) => return h.to_string(),\n-        None => {}\n+    if let Some(h) = ccx.type_hashcodes().borrow().get(&t) {\n+        return h.to_string()\n     }\n \n     let mut symbol_hasher = ccx.symbol_hasher().borrow_mut();\n@@ -315,9 +314,8 @@ pub fn mangle<PI: Iterator<Item=InternedString>>(path: PI, hash: Option<&str>) -\n         push(&mut n, &data);\n     }\n \n-    match hash {\n-        Some(s) => push(&mut n, s),\n-        None => {}\n+    if let Some(s) = hash {\n+        push(&mut n, s)\n     }\n \n     n.push('E'); // End name-sequence."}, {"sha": "161ab90c03a73ef992ea40cb3b3f9ad4f1db7e3d", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ac02f9c18d601bec9740c552d0ba554ae62bd60c/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac02f9c18d601bec9740c552d0ba554ae62bd60c/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=ac02f9c18d601bec9740c552d0ba554ae62bd60c", "patch": "@@ -150,9 +150,8 @@ impl Drop for _InsnCtxt {\n pub fn push_ctxt(s: &'static str) -> _InsnCtxt {\n     debug!(\"new InsnCtxt: {}\", s);\n     TASK_LOCAL_INSN_KEY.with(|slot| {\n-        match slot.borrow_mut().as_mut() {\n-            Some(ctx) => ctx.push(s),\n-            None => {}\n+        if let Some(ctx) = slot.borrow_mut().as_mut() {\n+            ctx.push(s)\n         }\n     });\n     _InsnCtxt {\n@@ -198,9 +197,8 @@ fn get_extern_rust_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                                 name: &str,\n                                 did: DefId)\n                                 -> ValueRef {\n-    match ccx.externs().borrow().get(name) {\n-        Some(n) => return *n,\n-        None => (),\n+    if let Some(n) = ccx.externs().borrow().get(name) {\n+        return *n;\n     }\n \n     let f = declare::declare_rust_fn(ccx, name, fn_ty);\n@@ -238,9 +236,8 @@ pub fn get_extern_const<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                                   -> ValueRef {\n     let name = ccx.sess().cstore.item_symbol(did);\n     let ty = type_of(ccx, t);\n-    match ccx.externs().borrow_mut().get(&name) {\n-        Some(n) => return *n,\n-        None => (),\n+    if let Some(n) = ccx.externs().borrow_mut().get(&name) {\n+        return *n;\n     }\n     // FIXME(nagisa): perhaps the map of externs could be offloaded to llvm somehow?\n     // FIXME(nagisa): investigate whether it can be changed into define_global\n@@ -2755,9 +2752,8 @@ fn contains_null(s: &str) -> bool {\n pub fn get_item_val(ccx: &CrateContext, id: ast::NodeId) -> ValueRef {\n     debug!(\"get_item_val(id=`{}`)\", id);\n \n-    match ccx.item_vals().borrow().get(&id).cloned() {\n-        Some(v) => return v,\n-        None => {}\n+    if let Some(v) = ccx.item_vals().borrow().get(&id).cloned() {\n+        return v;\n     }\n \n     let item = ccx.tcx().map.get(id);"}, {"sha": "7f7de0e872b6cd3eb617ef764002efbafdbb2ad3", "filename": "src/librustc_trans/trans/common.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ac02f9c18d601bec9740c552d0ba554ae62bd60c/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac02f9c18d601bec9740c552d0ba554ae62bd60c/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs?ref=ac02f9c18d601bec9740c552d0ba554ae62bd60c", "patch": "@@ -947,9 +947,8 @@ pub fn C_u8(ccx: &CrateContext, i: u8) -> ValueRef {\n // our boxed-and-length-annotated strings.\n pub fn C_cstr(cx: &CrateContext, s: InternedString, null_terminated: bool) -> ValueRef {\n     unsafe {\n-        match cx.const_cstr_cache().borrow().get(&s) {\n-            Some(&llval) => return llval,\n-            None => ()\n+        if let Some(&llval) = cx.const_cstr_cache().borrow().get(&s) {\n+            return llval;\n         }\n \n         let sc = llvm::LLVMConstStringInContext(cx.llcx(),"}, {"sha": "24a7fd372f63691841672237caf2aa9b29dd9bf8", "filename": "src/librustc_trans/trans/type_of.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ac02f9c18d601bec9740c552d0ba554ae62bd60c/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac02f9c18d601bec9740c552d0ba554ae62bd60c/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs?ref=ac02f9c18d601bec9740c552d0ba554ae62bd60c", "patch": "@@ -182,9 +182,8 @@ pub fn type_of_fn_from_ty<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, fty: Ty<'tcx>)\n //     recursive types. For example, enum types rely on this behavior.\n \n pub fn sizing_type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>) -> Type {\n-    match cx.llsizingtypes().borrow().get(&t).cloned() {\n-        Some(t) => return t,\n-        None => ()\n+    if let Some(t) = cx.llsizingtypes().borrow().get(&t).cloned() {\n+        return t;\n     }\n \n     debug!(\"sizing_type_of {:?}\", t);\n@@ -317,9 +316,8 @@ pub fn type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, ty: Ty<'tcx>) -> Type {\n /// NB: If you update this, be sure to update `sizing_type_of()` as well.\n pub fn in_memory_type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>) -> Type {\n     // Check the cache.\n-    match cx.lltypes().borrow().get(&t) {\n-        Some(&llty) => return llty,\n-        None => ()\n+    if let Some(&llty) = cx.lltypes().borrow().get(&t) {\n+        return llty;\n     }\n \n     debug!(\"type_of {:?}\", t);"}, {"sha": "ffb15d157b0666e10bb3948f41344c789af8b95d", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ac02f9c18d601bec9740c552d0ba554ae62bd60c/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac02f9c18d601bec9740c552d0ba554ae62bd60c/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=ac02f9c18d601bec9740c552d0ba554ae62bd60c", "patch": "@@ -385,9 +385,8 @@ fn rust_input(cratefile: &str, externs: core::Externs, matches: &getopts::Matche\n         *s.borrow_mut() = analysis.take();\n     });\n \n-    match matches.opt_str(\"crate-name\") {\n-        Some(name) => krate.name = name,\n-        None => {}\n+    if let Some(name) = matches.opt_str(\"crate-name\") {\n+        krate.name = name\n     }\n \n     // Process all of the crate attributes, extracting plugin metadata along"}, {"sha": "78da9412212a9caf3cfc72909268004464178241", "filename": "src/libstd/net/addr.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ac02f9c18d601bec9740c552d0ba554ae62bd60c/src%2Flibstd%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac02f9c18d601bec9740c552d0ba554ae62bd60c/src%2Flibstd%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Faddr.rs?ref=ac02f9c18d601bec9740c552d0ba554ae62bd60c", "patch": "@@ -467,9 +467,8 @@ impl ToSocketAddrs for str {\n     type Iter = vec::IntoIter<SocketAddr>;\n     fn to_socket_addrs(&self) -> io::Result<vec::IntoIter<SocketAddr>> {\n         // try to parse as a regular SocketAddr first\n-        match self.parse().ok() {\n-            Some(addr) => return Ok(vec![addr].into_iter()),\n-            None => {}\n+        if let Some(addr) = self.parse().ok() {\n+            return Ok(vec![addr].into_iter());\n         }\n \n         macro_rules! try_opt {"}, {"sha": "63eee6bcfded5fa5afef655d197f649f6b4d80e4", "filename": "src/libstd/net/parser.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ac02f9c18d601bec9740c552d0ba554ae62bd60c/src%2Flibstd%2Fnet%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac02f9c18d601bec9740c552d0ba554ae62bd60c/src%2Flibstd%2Fnet%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fparser.rs?ref=ac02f9c18d601bec9740c552d0ba554ae62bd60c", "patch": "@@ -66,9 +66,8 @@ impl<'a> Parser<'a> {\n     fn read_or<T>(&mut self, parsers: &mut [Box<FnMut(&mut Parser) -> Option<T> + 'static>])\n                -> Option<T> {\n         for pf in parsers {\n-            match self.read_atomically(|p: &mut Parser| pf(p)) {\n-                Some(r) => return Some(r),\n-                None => {}\n+            if let Some(r) = self.read_atomically(|p: &mut Parser| pf(p)) {\n+                return Some(r);\n             }\n         }\n         None"}, {"sha": "59da74b728797cdc20457187c77ed379222575e9", "filename": "src/libstd/sys/windows/thread_local.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ac02f9c18d601bec9740c552d0ba554ae62bd60c/src%2Flibstd%2Fsys%2Fwindows%2Fthread_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac02f9c18d601bec9740c552d0ba554ae62bd60c/src%2Flibstd%2Fsys%2Fwindows%2Fthread_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fthread_local.rs?ref=ac02f9c18d601bec9740c552d0ba554ae62bd60c", "patch": "@@ -69,9 +69,8 @@ static mut DTORS: *mut Vec<(Key, Dtor)> = ptr::null_mut();\n pub unsafe fn create(dtor: Option<Dtor>) -> Key {\n     let key = c::TlsAlloc();\n     assert!(key != c::TLS_OUT_OF_INDEXES);\n-    match dtor {\n-        Some(f) => register_dtor(key, f),\n-        None => {}\n+    if let Some(f) = dtor {\n+        register_dtor(key, f);\n     }\n     return key;\n }"}]}