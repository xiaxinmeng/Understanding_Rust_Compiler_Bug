{"sha": "533e9207d39c27dc22de2645fc65891189a71739", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzM2U5MjA3ZDM5YzI3ZGMyMmRlMjY0NWZjNjU4OTExODlhNzE3Mzk=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-05-24T13:35:46Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-05-24T13:35:46Z"}, "message": "Intern `GenericArgs`\n\nThis shaves off another ~4 mb or so", "tree": {"sha": "aeb89306e864bff3fc612d26ab6242a75b3e3885", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aeb89306e864bff3fc612d26ab6242a75b3e3885"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/533e9207d39c27dc22de2645fc65891189a71739", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/533e9207d39c27dc22de2645fc65891189a71739", "html_url": "https://github.com/rust-lang/rust/commit/533e9207d39c27dc22de2645fc65891189a71739", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/533e9207d39c27dc22de2645fc65891189a71739/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ebb8d29e18d7cb18bd2b57b004dcecd65a96232", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ebb8d29e18d7cb18bd2b57b004dcecd65a96232", "html_url": "https://github.com/rust-lang/rust/commit/8ebb8d29e18d7cb18bd2b57b004dcecd65a96232"}], "stats": {"total": 21, "additions": 10, "deletions": 11}, "files": [{"sha": "1189c9327d631713a86ce6968313aa57031bd9ce", "filename": "crates/hir_def/src/intern.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/533e9207d39c27dc22de2645fc65891189a71739/crates%2Fhir_def%2Fsrc%2Fintern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/533e9207d39c27dc22de2645fc65891189a71739/crates%2Fhir_def%2Fsrc%2Fintern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fintern.rs?ref=533e9207d39c27dc22de2645fc65891189a71739", "patch": "@@ -218,6 +218,7 @@ impl_internable!(\n     crate::type_ref::TraitRef,\n     crate::type_ref::TypeBound,\n     crate::path::ModPath,\n+    crate::path::GenericArgs,\n     GenericParams,\n     str,\n );"}, {"sha": "b4389371fbba1beed83af1c3d58b7ae80a5e712b", "filename": "crates/hir_def/src/item_tree/lower.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/533e9207d39c27dc22de2645fc65891189a71739/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/533e9207d39c27dc22de2645fc65891189a71739/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs?ref=533e9207d39c27dc22de2645fc65891189a71739", "patch": "@@ -811,7 +811,7 @@ fn desugar_future_path(orig: TypeRef) -> Path {\n     let binding =\n         AssociatedTypeBinding { name: name![Output], type_ref: Some(orig), bounds: Vec::new() };\n     last.bindings.push(binding);\n-    generic_args.push(Some(Arc::new(last)));\n+    generic_args.push(Some(Interned::new(last)));\n \n     Path::from_known_path(path, generic_args)\n }"}, {"sha": "45ab9d0ffbfc72f7027fe5325e93fd7e73579888", "filename": "crates/hir_def/src/path.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/533e9207d39c27dc22de2645fc65891189a71739/crates%2Fhir_def%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/533e9207d39c27dc22de2645fc65891189a71739/crates%2Fhir_def%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fpath.rs?ref=533e9207d39c27dc22de2645fc65891189a71739", "patch": "@@ -4,7 +4,6 @@ mod lower;\n use std::{\n     fmt::{self, Display},\n     iter,\n-    sync::Arc,\n };\n \n use crate::{body::LowerCtx, db::DefDatabase, intern::Interned, type_ref::LifetimeRef};\n@@ -136,7 +135,7 @@ pub struct Path {\n     type_anchor: Option<Interned<TypeRef>>,\n     mod_path: Interned<ModPath>,\n     /// Invariant: the same len as `self.mod_path.segments`\n-    generic_args: Vec<Option<Arc<GenericArgs>>>,\n+    generic_args: Vec<Option<Interned<GenericArgs>>>,\n }\n \n /// Generic arguments to a path segment (e.g. the `i32` in `Option<i32>`). This\n@@ -185,7 +184,7 @@ impl Path {\n     /// Converts a known mod path to `Path`.\n     pub(crate) fn from_known_path(\n         path: ModPath,\n-        generic_args: Vec<Option<Arc<GenericArgs>>>,\n+        generic_args: Vec<Option<Interned<GenericArgs>>>,\n     ) -> Path {\n         Path { type_anchor: None, mod_path: Interned::new(path), generic_args }\n     }\n@@ -239,7 +238,7 @@ pub struct PathSegment<'a> {\n \n pub struct PathSegments<'a> {\n     segments: &'a [Name],\n-    generic_args: &'a [Option<Arc<GenericArgs>>],\n+    generic_args: &'a [Option<Interned<GenericArgs>>],\n }\n \n impl<'a> PathSegments<'a> {"}, {"sha": "5d5dd9c8f8a8159538e87f88f40f8fcac7ada5e7", "filename": "crates/hir_def/src/path/lower.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/533e9207d39c27dc22de2645fc65891189a71739/crates%2Fhir_def%2Fsrc%2Fpath%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/533e9207d39c27dc22de2645fc65891189a71739/crates%2Fhir_def%2Fsrc%2Fpath%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fpath%2Flower.rs?ref=533e9207d39c27dc22de2645fc65891189a71739", "patch": "@@ -3,7 +3,6 @@\n mod lower_use;\n \n use crate::intern::Interned;\n-use std::sync::Arc;\n \n use either::Either;\n use hir_expand::name::{name, AsName};\n@@ -48,7 +47,7 @@ pub(super) fn lower_path(mut path: ast::Path, ctx: &LowerCtx) -> Option<Path> {\n                                     segment.ret_type(),\n                                 )\n                             })\n-                            .map(Arc::new);\n+                            .map(Interned::new);\n                         segments.push(name);\n                         generic_args.push(args)\n                     }\n@@ -87,13 +86,13 @@ pub(super) fn lower_path(mut path: ast::Path, ctx: &LowerCtx) -> Option<Path> {\n                         // Insert the type reference (T in the above example) as Self parameter for the trait\n                         let last_segment =\n                             generic_args.iter_mut().rev().nth(num_segments.saturating_sub(1))?;\n-                        if last_segment.is_none() {\n-                            *last_segment = Some(Arc::new(GenericArgs::empty()));\n+                        let mut args_inner = match last_segment {\n+                            Some(it) => it.as_ref().clone(),\n+                            None => GenericArgs::empty(),\n                         };\n-                        let args = last_segment.as_mut().unwrap();\n-                        let mut args_inner = Arc::make_mut(args);\n                         args_inner.has_self_type = true;\n                         args_inner.args.insert(0, GenericArg::Type(self_type));\n+                        *last_segment = Some(Interned::new(args_inner));\n                     }\n                 }\n             }"}]}