{"sha": "1338ddbe80fda78d6f48d9c1e303da7c462858de", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzMzhkZGJlODBmZGE3OGQ2ZjQ4ZDljMWUzMDNkYTdjNDYyODU4ZGU=", "commit": {"author": {"name": "vi_mi", "email": "fenil.jain2018@vitstudent.ac.in", "date": "2021-07-10T09:42:16Z"}, "committer": {"name": "vi_mi", "email": "fenil.jain2018@vitstudent.ac.in", "date": "2021-07-10T10:41:15Z"}, "message": "add: Adding self keyword completion in complete_fn_param", "tree": {"sha": "c43b62bcdbef243111563fd1cc8814decd399351", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c43b62bcdbef243111563fd1cc8814decd399351"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1338ddbe80fda78d6f48d9c1e303da7c462858de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1338ddbe80fda78d6f48d9c1e303da7c462858de", "html_url": "https://github.com/rust-lang/rust/commit/1338ddbe80fda78d6f48d9c1e303da7c462858de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1338ddbe80fda78d6f48d9c1e303da7c462858de/comments", "author": {"login": "feniljain", "id": 49019259, "node_id": "MDQ6VXNlcjQ5MDE5MjU5", "avatar_url": "https://avatars.githubusercontent.com/u/49019259?v=4", "gravatar_id": "", "url": "https://api.github.com/users/feniljain", "html_url": "https://github.com/feniljain", "followers_url": "https://api.github.com/users/feniljain/followers", "following_url": "https://api.github.com/users/feniljain/following{/other_user}", "gists_url": "https://api.github.com/users/feniljain/gists{/gist_id}", "starred_url": "https://api.github.com/users/feniljain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/feniljain/subscriptions", "organizations_url": "https://api.github.com/users/feniljain/orgs", "repos_url": "https://api.github.com/users/feniljain/repos", "events_url": "https://api.github.com/users/feniljain/events{/privacy}", "received_events_url": "https://api.github.com/users/feniljain/received_events", "type": "User", "site_admin": false}, "committer": {"login": "feniljain", "id": 49019259, "node_id": "MDQ6VXNlcjQ5MDE5MjU5", "avatar_url": "https://avatars.githubusercontent.com/u/49019259?v=4", "gravatar_id": "", "url": "https://api.github.com/users/feniljain", "html_url": "https://github.com/feniljain", "followers_url": "https://api.github.com/users/feniljain/followers", "following_url": "https://api.github.com/users/feniljain/following{/other_user}", "gists_url": "https://api.github.com/users/feniljain/gists{/gist_id}", "starred_url": "https://api.github.com/users/feniljain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/feniljain/subscriptions", "organizations_url": "https://api.github.com/users/feniljain/orgs", "repos_url": "https://api.github.com/users/feniljain/repos", "events_url": "https://api.github.com/users/feniljain/events{/privacy}", "received_events_url": "https://api.github.com/users/feniljain/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10ac4e5c0d04bd6b2b6d14aa7ce9e54390d5f12d", "url": "https://api.github.com/repos/rust-lang/rust/commits/10ac4e5c0d04bd6b2b6d14aa7ce9e54390d5f12d", "html_url": "https://github.com/rust-lang/rust/commit/10ac4e5c0d04bd6b2b6d14aa7ce9e54390d5f12d"}], "stats": {"total": 52, "additions": 45, "deletions": 7}, "files": [{"sha": "7805da24abd6681ec834f8b1510582ea622514a6", "filename": "crates/ide_completion/src/completions/fn_param.rs", "status": "modified", "additions": 45, "deletions": 7, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/1338ddbe80fda78d6f48d9c1e303da7c462858de/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ffn_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1338ddbe80fda78d6f48d9c1e303da7c462858de/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ffn_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ffn_param.rs?ref=1338ddbe80fda78d6f48d9c1e303da7c462858de", "patch": "@@ -12,9 +12,9 @@ use crate::{CompletionContext, CompletionItem, CompletionItemKind, CompletionKin\n /// functions in a file have a `spam: &mut Spam` parameter, a completion with\n /// `spam: &mut Spam` insert text/label and `spam` lookup string will be\n /// suggested.\n-pub(crate) fn complete_fn_param(acc: &mut Completions, ctx: &CompletionContext) {\n+pub(crate) fn complete_fn_param(acc: &mut Completions, ctx: &CompletionContext) -> Option<()> {\n     if !ctx.is_param {\n-        return;\n+        return None;\n     }\n \n     let mut params = FxHashMap::default();\n@@ -53,11 +53,27 @@ pub(crate) fn complete_fn_param(acc: &mut Completions, ctx: &CompletionContext)\n         };\n     }\n \n-    params.into_iter().for_each(|(label, lookup)| {\n-        let mut item = CompletionItem::new(CompletionKind::Magic, ctx.source_range(), label);\n-        item.kind(CompletionItemKind::Binding).lookup_by(lookup);\n-        item.add_to(acc)\n-    });\n+    let self_completion_items = [\"self\", \"&self\", \"mut self\", \"&mut self\"];\n+    if ctx.impl_def.is_some() && me?.param_list()?.params().next().is_none() {\n+        self_completion_items.iter().for_each(|self_item| {\n+            add_new_item_to_acc(ctx, acc, self_item.to_string(), self_item.to_string())\n+        });\n+    }\n+\n+    params.into_iter().for_each(|(label, lookup)| add_new_item_to_acc(ctx, acc, label, lookup));\n+\n+    Some(())\n+}\n+\n+fn add_new_item_to_acc(\n+    ctx: &CompletionContext,\n+    acc: &mut Completions,\n+    label: String,\n+    lookup: String,\n+) {\n+    let mut item = CompletionItem::new(CompletionKind::Magic, ctx.source_range(), label);\n+    item.kind(CompletionItemKind::Binding).lookup_by(lookup);\n+    item.add_to(acc)\n }\n \n #[cfg(test)]\n@@ -143,4 +159,26 @@ fn foo2($0) {}\n             \"#]],\n         )\n     }\n+\n+    #[test]\n+    fn test_param_completion_self_param() {\n+        check(\n+            r#\"\n+                struct A {}\n+\n+                impl A {\n+                    fn foo(file_id: FileId) {}\n+                    fn new($0) {\n+                    }\n+                }\n+            \"#,\n+            expect![[r#\"\n+                bn self\n+                bn &self\n+                bn mut self\n+                bn &mut self\n+                bn file_id: FileId\n+            \"#]],\n+        )\n+    }\n }"}]}