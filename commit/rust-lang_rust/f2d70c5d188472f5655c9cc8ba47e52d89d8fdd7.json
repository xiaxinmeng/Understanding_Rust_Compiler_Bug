{"sha": "f2d70c5d188472f5655c9cc8ba47e52d89d8fdd7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyZDcwYzVkMTg4NDcyZjU2NTVjOWNjOGJhNDdlNTJkODlkOGZkZDc=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2021-02-19T18:27:39Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2021-02-25T16:38:52Z"}, "message": "Implementation of build.print_step_rusage.\n\nOn non-unix platforms, does not try to call `getrusage` (and does not attempt to\nimplement its own shim; that could be follow-on work, though its probably best\nto not invest too much effort there, versus using separate dedicated tooling).\n\nOn unix platforms, calls libc::rusage and attempts to emit the subset of fields\nthat are supported on Linux and Mac OS X. Omits groups of related stats which\nappear to be unsupported on the platform (due to them all remaining zero).\n\nAdjusts output to compensate for Mac using bytes instead of kb (a well known\ndiscrepancy on Mac OS X). However, so far I observe a lot of strange values\n(orders of magnitude wrong) reported on Mac OS X in some cases, so I would not\ntrust this in that context currently.", "tree": {"sha": "438cf0cc56a247284d1fe203ac28fbba31ca67fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/438cf0cc56a247284d1fe203ac28fbba31ca67fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2d70c5d188472f5655c9cc8ba47e52d89d8fdd7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2d70c5d188472f5655c9cc8ba47e52d89d8fdd7", "html_url": "https://github.com/rust-lang/rust/commit/f2d70c5d188472f5655c9cc8ba47e52d89d8fdd7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2d70c5d188472f5655c9cc8ba47e52d89d8fdd7/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d8bf72a36eb78c1a9bf721b9af3055f62cfc3dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d8bf72a36eb78c1a9bf721b9af3055f62cfc3dc", "html_url": "https://github.com/rust-lang/rust/commit/0d8bf72a36eb78c1a9bf721b9af3055f62cfc3dc"}], "stats": {"total": 82, "additions": 79, "deletions": 3}, "files": [{"sha": "670046ff08b56581e3ab505664105ece96d53da7", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 79, "deletions": 3, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/f2d70c5d188472f5655c9cc8ba47e52d89d8fdd7/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2d70c5d188472f5655c9cc8ba47e52d89d8fdd7/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=f2d70c5d188472f5655c9cc8ba47e52d89d8fdd7", "patch": "@@ -155,16 +155,24 @@ fn main() {\n         cmd.status().expect(&errmsg)\n     };\n \n-    if env::var_os(\"RUSTC_PRINT_STEP_TIMINGS\").is_some() {\n+    if env::var_os(\"RUSTC_PRINT_STEP_TIMINGS\").is_some()\n+        || env::var_os(\"RUSTC_PRINT_STEP_RUSAGE\").is_some()\n+    {\n         if let Some(crate_name) = crate_name {\n             let dur = start.elapsed();\n             let is_test = args.iter().any(|a| a == \"--test\");\n+            // If the user requested resource usage data, then\n+            // include that in addition to the timing output.\n+            let rusage_data =\n+                env::var_os(\"RUSTC_PRINT_STEP_RUSAGE\").and_then(|_| format_rusage_data());\n             eprintln!(\n-                \"[RUSTC-TIMING] {} test:{} {}.{:03}\",\n+                \"[RUSTC-TIMING] {} test:{} {}.{:03}{}{}\",\n                 crate_name,\n                 is_test,\n                 dur.as_secs(),\n-                dur.subsec_millis()\n+                dur.subsec_millis(),\n+                if rusage_data.is_some() { \" \" } else { \"\" },\n+                rusage_data.unwrap_or(String::new()),\n             );\n         }\n     }\n@@ -192,3 +200,71 @@ fn main() {\n         }\n     }\n }\n+\n+#[cfg(not(unix))]\n+/// getrusage is not available on non-unix platforms. So for now, we do not\n+/// bother trying to make a shim for it.\n+fn format_rusage_data() -> Option<String> {\n+    None\n+}\n+\n+#[cfg(unix)]\n+/// Tries to build a string with human readable data for several of the rusage\n+/// fields. Note that we are focusing mainly on data that we believe to be\n+/// supplied on Linux (the `rusage` struct has other fields in it but they are\n+/// currently unsupported by Linux).\n+fn format_rusage_data() -> Option<String> {\n+    let rusage: libc::rusage = unsafe {\n+        let mut recv = std::mem::zeroed();\n+        // -1 is RUSAGE_CHILDREN, which means to get the rusage for all children\n+        // (and grandchildren, etc) processes that have respectively terminated\n+        // and been waited for.\n+        let retval = libc::getrusage(-1, &mut recv);\n+        if retval != 0 {\n+            return None;\n+        }\n+        recv\n+    };\n+    // Mac OS X reports the maxrss in bytes, not kb.\n+    let divisor = if env::consts::OS == \"macos\" { 1024 } else { 1 };\n+    let maxrss = rusage.ru_maxrss + (divisor - 1) / divisor;\n+\n+    let mut init_str = format!(\n+        \"user: {USER_SEC}.{USER_USEC:03} \\\n+         sys: {SYS_SEC}.{SYS_USEC:03} \\\n+         max rss (kb): {MAXRSS}\",\n+        USER_SEC = rusage.ru_utime.tv_sec,\n+        USER_USEC = rusage.ru_utime.tv_usec,\n+        SYS_SEC = rusage.ru_stime.tv_sec,\n+        SYS_USEC = rusage.ru_stime.tv_usec,\n+        MAXRSS = maxrss\n+    );\n+\n+    // The remaining rusage stats vary in platform support. So we treat\n+    // uniformly zero values in each category as \"not worth printing\", since it\n+    // either means no events of that type occurred, or that the platform\n+    // does not support it.\n+\n+    let minflt = rusage.ru_minflt;\n+    let majflt = rusage.ru_majflt;\n+    if minflt != 0 || majflt != 0 {\n+        init_str.push_str(&format!(\" page reclaims: {} page faults: {}\", minflt, majflt));\n+    }\n+\n+    let inblock = rusage.ru_inblock;\n+    let oublock = rusage.ru_oublock;\n+    if inblock != 0 || oublock != 0 {\n+        init_str.push_str(&format!(\" fs block inputs: {} fs block outputs: {}\", inblock, oublock));\n+    }\n+\n+    let nvcsw = rusage.ru_nvcsw;\n+    let nivcsw = rusage.ru_nivcsw;\n+    if nvcsw != 0 || nivcsw != 0 {\n+        init_str.push_str(&format!(\n+            \" voluntary ctxt switches: {} involuntary ctxt switches: {}\",\n+            nvcsw, nivcsw\n+        ));\n+    }\n+\n+    return Some(init_str);\n+}"}]}