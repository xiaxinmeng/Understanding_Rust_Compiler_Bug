{"sha": "12e0420268a3855eea981bb8907a8bbfb1cb9d9a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyZTA0MjAyNjhhMzg1NWVlYTk4MWJiODkwN2E4YmJmYjFjYjlkOWE=", "commit": {"author": {"name": "Nathan", "email": "nathan.whitaker01@gmail.com", "date": "2019-08-26T01:10:33Z"}, "committer": {"name": "nathanwhit", "email": "nathan.whitaker01@gmail.com", "date": "2019-08-28T19:00:40Z"}, "message": "Update dbg macro test to use `check-run-results` flag for run-pass test\n\nUpdates the dbg-macro-expected behavior test to remove the workaround and use the `check-run-result` flag/feature in compiletest. This serves to test the feature on a real use-case (as mentioned in #63751)", "tree": {"sha": "b87d987493323abfb18e0caf2e292c2114c922c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b87d987493323abfb18e0caf2e292c2114c922c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12e0420268a3855eea981bb8907a8bbfb1cb9d9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12e0420268a3855eea981bb8907a8bbfb1cb9d9a", "html_url": "https://github.com/rust-lang/rust/commit/12e0420268a3855eea981bb8907a8bbfb1cb9d9a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12e0420268a3855eea981bb8907a8bbfb1cb9d9a/comments", "author": {"login": "nathanwhit", "id": 17734409, "node_id": "MDQ6VXNlcjE3NzM0NDA5", "avatar_url": "https://avatars.githubusercontent.com/u/17734409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nathanwhit", "html_url": "https://github.com/nathanwhit", "followers_url": "https://api.github.com/users/nathanwhit/followers", "following_url": "https://api.github.com/users/nathanwhit/following{/other_user}", "gists_url": "https://api.github.com/users/nathanwhit/gists{/gist_id}", "starred_url": "https://api.github.com/users/nathanwhit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nathanwhit/subscriptions", "organizations_url": "https://api.github.com/users/nathanwhit/orgs", "repos_url": "https://api.github.com/users/nathanwhit/repos", "events_url": "https://api.github.com/users/nathanwhit/events{/privacy}", "received_events_url": "https://api.github.com/users/nathanwhit/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nathanwhit", "id": 17734409, "node_id": "MDQ6VXNlcjE3NzM0NDA5", "avatar_url": "https://avatars.githubusercontent.com/u/17734409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nathanwhit", "html_url": "https://github.com/nathanwhit", "followers_url": "https://api.github.com/users/nathanwhit/followers", "following_url": "https://api.github.com/users/nathanwhit/following{/other_user}", "gists_url": "https://api.github.com/users/nathanwhit/gists{/gist_id}", "starred_url": "https://api.github.com/users/nathanwhit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nathanwhit/subscriptions", "organizations_url": "https://api.github.com/users/nathanwhit/orgs", "repos_url": "https://api.github.com/users/nathanwhit/repos", "events_url": "https://api.github.com/users/nathanwhit/events{/privacy}", "received_events_url": "https://api.github.com/users/nathanwhit/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e3bc62f399b262bb56eb3de146a85729cdb882c", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e3bc62f399b262bb56eb3de146a85729cdb882c", "html_url": "https://github.com/rust-lang/rust/commit/0e3bc62f399b262bb56eb3de146a85729cdb882c"}], "stats": {"total": 112, "additions": 30, "deletions": 82}, "files": [{"sha": "04d924a9aed20732e3fc37f32515a30f2c866b33", "filename": "src/test/ui/rfc-2361-dbg-macro/dbg-macro-expected-behavior.rs", "status": "modified", "additions": 2, "deletions": 82, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/12e0420268a3855eea981bb8907a8bbfb1cb9d9a/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-expected-behavior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12e0420268a3855eea981bb8907a8bbfb1cb9d9a/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-expected-behavior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-expected-behavior.rs?ref=12e0420268a3855eea981bb8907a8bbfb1cb9d9a", "patch": "@@ -1,7 +1,5 @@\n // run-pass\n-// ignore-cloudabi no processes\n-// ignore-emscripten no processes\n-// ignore-sgx no processes\n+// check-run-results\n \n // Tests ensuring that `dbg!(expr)` has the expected run-time behavior.\n // as well as some compile time properties we expect.\n@@ -18,7 +16,7 @@ struct Point<T> {\n #[derive(Debug, PartialEq)]\n struct NoCopy(usize);\n \n-fn test() {\n+fn main() {\n     let a: Unit = dbg!(Unit);\n     let _: Unit = dbg!(a);\n     // We can move `a` because it's Copy.\n@@ -67,81 +65,3 @@ fn test() {\n     assert_eq!((1u8, 2u32, \"Yeah\"), dbg!(1u8, 2u32,\n                                          \"Yeah\",));\n }\n-\n-fn validate_stderr(stderr: Vec<String>) {\n-    assert_eq!(stderr, &[\n-        \":22] Unit = Unit\",\n-\n-        \":23] a = Unit\",\n-\n-        \":29] Point{x: 42, y: 24,} = Point {\",\n-        \"    x: 42,\",\n-        \"    y: 24,\",\n-        \"}\",\n-\n-        \":30] b = Point {\",\n-        \"    x: 42,\",\n-        \"    y: 24,\",\n-        \"}\",\n-\n-        \":38]\",\n-\n-        \":42] &a = NoCopy(\",\n-        \"    1337,\",\n-        \")\",\n-\n-        \":42] dbg!(& a) = NoCopy(\",\n-        \"    1337,\",\n-        \")\",\n-        \":47] f(&42) = 42\",\n-\n-        \"before\",\n-        \":52] { foo += 1; eprintln!(\\\"before\\\"); 7331 } = 7331\",\n-\n-        \":60] (\\\"Yeah\\\",) = (\",\n-        \"    \\\"Yeah\\\",\",\n-        \")\",\n-\n-        \":63] 1 = 1\",\n-        \":63] 2 = 2\",\n-\n-        \":67] 1u8 = 1\",\n-        \":67] 2u32 = 2\",\n-        \":67] \\\"Yeah\\\" = \\\"Yeah\\\"\",\n-    ]);\n-}\n-\n-fn main() {\n-    // The following is a hack to deal with compiletest's inability\n-    // to check the output (to stdout) of run-pass tests.\n-    use std::env;\n-    use std::process::Command;\n-\n-    let mut args = env::args();\n-    let prog = args.next().unwrap();\n-    let child = args.next();\n-    if let Some(\"child\") = child.as_ref().map(|s| &**s) {\n-        // Only run the test if we've been spawned as 'child'\n-        test()\n-    } else {\n-        // This essentially spawns as 'child' to run the tests\n-        // and then it collects output of stderr and checks the output\n-        // against what we expect.\n-        let out = Command::new(&prog).arg(\"child\").output().unwrap();\n-        assert!(out.status.success());\n-        assert!(out.stdout.is_empty());\n-\n-        let stderr = String::from_utf8(out.stderr).unwrap();\n-        let stderr = stderr.lines().map(|mut s| {\n-            if s.starts_with(\"[\") {\n-                // Strip `[` and file path:\n-                s = s.trim_start_matches(\"[\");\n-                assert!(s.starts_with(file!()));\n-                s = s.trim_start_matches(file!());\n-            }\n-            s.to_owned()\n-        }).collect();\n-\n-        validate_stderr(stderr);\n-    }\n-}"}, {"sha": "707b38cf37af0f3bd1796c4aa858ebdf0aaaeea4", "filename": "src/test/ui/rfc-2361-dbg-macro/dbg-macro-expected-behavior.run.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/12e0420268a3855eea981bb8907a8bbfb1cb9d9a/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-expected-behavior.run.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/12e0420268a3855eea981bb8907a8bbfb1cb9d9a/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-expected-behavior.run.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-expected-behavior.run.stderr?ref=12e0420268a3855eea981bb8907a8bbfb1cb9d9a", "patch": "@@ -0,0 +1,28 @@\n+[$DIR/dbg-macro-expected-behavior.rs:20] Unit = Unit\n+[$DIR/dbg-macro-expected-behavior.rs:21] a = Unit\n+[$DIR/dbg-macro-expected-behavior.rs:27] Point{x: 42, y: 24,} = Point {\n+    x: 42,\n+    y: 24,\n+}\n+[$DIR/dbg-macro-expected-behavior.rs:28] b = Point {\n+    x: 42,\n+    y: 24,\n+}\n+[$DIR/dbg-macro-expected-behavior.rs:36]\n+[$DIR/dbg-macro-expected-behavior.rs:40] &a = NoCopy(\n+    1337,\n+)\n+[$DIR/dbg-macro-expected-behavior.rs:40] dbg!(& a) = NoCopy(\n+    1337,\n+)\n+[$DIR/dbg-macro-expected-behavior.rs:45] f(&42) = 42\n+before\n+[$DIR/dbg-macro-expected-behavior.rs:50] { foo += 1; eprintln!(\"before\"); 7331 } = 7331\n+[$DIR/dbg-macro-expected-behavior.rs:58] (\"Yeah\",) = (\n+    \"Yeah\",\n+)\n+[$DIR/dbg-macro-expected-behavior.rs:61] 1 = 1\n+[$DIR/dbg-macro-expected-behavior.rs:61] 2 = 2\n+[$DIR/dbg-macro-expected-behavior.rs:65] 1u8 = 1\n+[$DIR/dbg-macro-expected-behavior.rs:65] 2u32 = 2\n+[$DIR/dbg-macro-expected-behavior.rs:65] \"Yeah\" = \"Yeah\""}]}