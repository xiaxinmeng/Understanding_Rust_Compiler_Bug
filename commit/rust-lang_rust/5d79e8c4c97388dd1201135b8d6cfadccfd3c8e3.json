{"sha": "5d79e8c4c97388dd1201135b8d6cfadccfd3c8e3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkNzllOGM0Yzk3Mzg4ZGQxMjAxMTM1YjhkNmNmYWRjY2ZkM2M4ZTM=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2019-07-13T15:02:00Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2019-09-24T18:11:50Z"}, "message": "reserve `impl<T> From<!> for T`\n\nthis is necessary for never-type stabilization", "tree": {"sha": "374ae8a87cd853e2087688d0d44be613af970d1d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/374ae8a87cd853e2087688d0d44be613af970d1d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d79e8c4c97388dd1201135b8d6cfadccfd3c8e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d79e8c4c97388dd1201135b8d6cfadccfd3c8e3", "html_url": "https://github.com/rust-lang/rust/commit/5d79e8c4c97388dd1201135b8d6cfadccfd3c8e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d79e8c4c97388dd1201135b8d6cfadccfd3c8e3/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ef275e6c3cb1384ec78128eceeb4963ff788dca", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ef275e6c3cb1384ec78128eceeb4963ff788dca", "html_url": "https://github.com/rust-lang/rust/commit/6ef275e6c3cb1384ec78128eceeb4963ff788dca"}], "stats": {"total": 113, "additions": 87, "deletions": 26}, "files": [{"sha": "82c20efa9f0d634a209ff3c2ac281283969fab91", "filename": "src/libcore/convert.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5d79e8c4c97388dd1201135b8d6cfadccfd3c8e3/src%2Flibcore%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d79e8c4c97388dd1201135b8d6cfadccfd3c8e3/src%2Flibcore%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fconvert.rs?ref=5d79e8c4c97388dd1201135b8d6cfadccfd3c8e3", "patch": "@@ -554,6 +554,12 @@ impl<T> From<T> for T {\n     fn from(t: T) -> T { t }\n }\n \n+#[stable(feature = \"convert_infallible\", since = \"1.34.0\")]\n+#[cfg(not(boostrap_stdarch_ignore_this))]\n+#[rustc_reservation_impl]\n+impl<T> From<!> for T {\n+    fn from(t: !) -> T { t }\n+}\n \n // TryFrom implies TryInto\n #[stable(feature = \"try_from\", since = \"1.34.0\")]"}, {"sha": "debd946d7164fe101086cf88f52c0110c983b71b", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5d79e8c4c97388dd1201135b8d6cfadccfd3c8e3/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d79e8c4c97388dd1201135b8d6cfadccfd3c8e3/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=5d79e8c4c97388dd1201135b8d6cfadccfd3c8e3", "patch": "@@ -50,6 +50,8 @@ use std::iter;\n use std::rc::Rc;\n use crate::util::nodemap::{FxHashMap, FxHashSet};\n \n+use syntax::symbol::sym;\n+\n pub struct SelectionContext<'cx, 'tcx> {\n     infcx: &'cx InferCtxt<'cx, 'tcx>,\n \n@@ -1326,8 +1328,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         (result, dep_node)\n     }\n \n-    // Treat negative impls as unimplemented\n-    fn filter_negative_impls(\n+    // Treat negative impls as unimplemented, and reservation impls as Ok(None)\n+    fn filter_negative_and_reservation_impls(\n         &self,\n         candidate: SelectionCandidate<'tcx>,\n     ) -> SelectionResult<'tcx, SelectionCandidate<'tcx>> {\n@@ -1337,6 +1339,10 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             {\n                 return Err(Unimplemented);\n             }\n+\n+            if self.tcx().has_attr(def_id, sym::rustc_reservation_impl) {\n+                return Ok(None);\n+            }\n         }\n         Ok(Some(candidate))\n     }\n@@ -1453,7 +1459,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         // Instead, we select the right impl now but report `Bar does\n         // not implement Clone`.\n         if candidates.len() == 1 {\n-            return self.filter_negative_impls(candidates.pop().unwrap());\n+            return self.filter_negative_and_reservation_impls(candidates.pop().unwrap());\n         }\n \n         // Winnow, but record the exact outcome of evaluation, which\n@@ -1528,7 +1534,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         }\n \n         // Just one candidate left.\n-        self.filter_negative_impls(candidates.pop().unwrap().candidate)\n+        self.filter_negative_and_reservation_impls(candidates.pop().unwrap().candidate)\n     }\n \n     fn is_knowable<'o>(&mut self, stack: &TraitObligationStack<'o, 'tcx>) -> Option<Conflict> {\n@@ -3728,6 +3734,13 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             return Err(());\n         }\n \n+        if self.intercrate.is_none() &&\n+            self.tcx().has_attr(impl_def_id, sym::rustc_reservation_impl)\n+        {\n+            debug!(\"match_impl: reservation impls only apply in intercrate mode\");\n+            return Err(());\n+        }\n+\n         debug!(\"match_impl: success impl_substs={:?}\", impl_substs);\n         Ok(Normalized {\n             value: impl_substs,"}, {"sha": "c5cbe0d0dabe713412d706ec4465d34c3b46ab6c", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/5d79e8c4c97388dd1201135b8d6cfadccfd3c8e3/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d79e8c4c97388dd1201135b8d6cfadccfd3c8e3/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=5d79e8c4c97388dd1201135b8d6cfadccfd3c8e3", "patch": "@@ -2911,7 +2911,13 @@ impl<'tcx> TyCtxt<'tcx> {\n             return Some(ImplOverlapKind::Permitted);\n         }\n \n-        let is_legit = if self.features().overlapping_marker_traits {\n+        if self.impl_polarity(def_id1) != self.impl_polarity(def_id2) {\n+            debug!(\"impls_are_allowed_to_overlap({:?}, {:?}) - different polarities, None\",\n+                   def_id1, def_id2);\n+            return None;\n+        }\n+\n+        let is_marker_overlap = if self.features().overlapping_marker_traits {\n             let trait1_is_empty = self.impl_trait_ref(def_id1)\n                 .map_or(false, |trait_ref| {\n                     self.associated_item_def_ids(trait_ref.def_id).is_empty()\n@@ -2920,22 +2926,24 @@ impl<'tcx> TyCtxt<'tcx> {\n                 .map_or(false, |trait_ref| {\n                     self.associated_item_def_ids(trait_ref.def_id).is_empty()\n                 });\n-            self.impl_polarity(def_id1) == self.impl_polarity(def_id2)\n-                && trait1_is_empty\n-                && trait2_is_empty\n+            trait1_is_empty && trait2_is_empty\n         } else {\n             let is_marker_impl = |def_id: DefId| -> bool {\n                 let trait_ref = self.impl_trait_ref(def_id);\n                 trait_ref.map_or(false, |tr| self.trait_def(tr.def_id).is_marker)\n             };\n-            self.impl_polarity(def_id1) == self.impl_polarity(def_id2)\n-                && is_marker_impl(def_id1)\n-                && is_marker_impl(def_id2)\n+            is_marker_impl(def_id1) && is_marker_impl(def_id2)\n         };\n \n-        if is_legit {\n-            debug!(\"impls_are_allowed_to_overlap({:?}, {:?}) = Some(Permitted)\",\n-                  def_id1, def_id2);\n+        // `#[rustc_reservation_impl]` impls don't overlap with anything\n+        let is_reserve_overlap = {\n+            self.has_attr(def_id1, sym::rustc_reservation_impl) ||\n+            self.has_attr(def_id2, sym::rustc_reservation_impl)\n+        };\n+\n+        if is_marker_overlap || is_reserve_overlap {\n+            debug!(\"impls_are_allowed_to_overlap({:?}, {:?}) = Some(Permitted) ({:?}/{:?})\",\n+                  def_id1, def_id2, is_marker_overlap, is_reserve_overlap);\n             Some(ImplOverlapKind::Permitted)\n         } else {\n             if let Some(self_ty1) = self.issue33140_self_ty(def_id1) {"}, {"sha": "87c34d62bde0a032249ec4bb3808d693ec24680e", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/5d79e8c4c97388dd1201135b8d6cfadccfd3c8e3/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d79e8c4c97388dd1201135b8d6cfadccfd3c8e3/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=5d79e8c4c97388dd1201135b8d6cfadccfd3c8e3", "patch": "@@ -398,18 +398,23 @@ fn check_impl<'tcx>(\n \n         match *ast_trait_ref {\n             Some(ref ast_trait_ref) => {\n-                let trait_ref = fcx.tcx.impl_trait_ref(item_def_id).unwrap();\n-                let trait_ref =\n-                    fcx.normalize_associated_types_in(\n-                        ast_trait_ref.path.span, &trait_ref);\n-                let obligations =\n-                    ty::wf::trait_obligations(fcx,\n-                                                fcx.param_env,\n-                                                fcx.body_id,\n-                                                &trait_ref,\n-                                                ast_trait_ref.path.span);\n-                for obligation in obligations {\n-                    fcx.register_predicate(obligation);\n+                // `#[rustc_reservation_impl]` impls are not real impls and\n+                // therefore don't need to be WF (the trait's `Self: Trait` predicate\n+                // won't hold).\n+                if !fcx.tcx.has_attr(item_def_id, sym::rustc_reservation_impl) {\n+                    let trait_ref = fcx.tcx.impl_trait_ref(item_def_id).unwrap();\n+                    let trait_ref =\n+                        fcx.normalize_associated_types_in(\n+                            ast_trait_ref.path.span, &trait_ref);\n+                    let obligations =\n+                        ty::wf::trait_obligations(fcx,\n+                                                  fcx.param_env,\n+                                                  fcx.body_id,\n+                                                  &trait_ref,\n+                                                  ast_trait_ref.path.span);\n+                    for obligation in obligations {\n+                        fcx.register_predicate(obligation);\n+                    }\n                 }\n             }\n             None => {"}, {"sha": "d38489a2f0db95744e3ded8b381ae7229b14af83", "filename": "src/libsyntax/feature_gate/builtin_attrs.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5d79e8c4c97388dd1201135b8d6cfadccfd3c8e3/src%2Flibsyntax%2Ffeature_gate%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d79e8c4c97388dd1201135b8d6cfadccfd3c8e3/src%2Flibsyntax%2Ffeature_gate%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fbuiltin_attrs.rs?ref=5d79e8c4c97388dd1201135b8d6cfadccfd3c8e3", "patch": "@@ -498,6 +498,10 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n         overflow checking behavior of several libcore functions that are inlined \\\n         across crates and will never be stable\",\n     ),\n+    rustc_attr!(rustc_reservation_impl, Normal, template!(Word),\n+                \"the `#[rustc_reservation_impl]` attribute is internally used \\\n+                 for reserving for `for<T> From<!> for T` impl\"\n+    ),\n     rustc_attr!(\n         rustc_test_marker, Normal, template!(Word),\n         \"the `#[rustc_test_marker]` attribute is used internally to track tests\","}, {"sha": "32af930ffb88414ebba323bc271e5fbd36caf84c", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5d79e8c4c97388dd1201135b8d6cfadccfd3c8e3/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d79e8c4c97388dd1201135b8d6cfadccfd3c8e3/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=5d79e8c4c97388dd1201135b8d6cfadccfd3c8e3", "patch": "@@ -606,6 +606,7 @@ symbols! {\n         rustc_std_internal_symbol,\n         rustc_symbol_name,\n         rustc_synthetic,\n+        rustc_reservation_impl,\n         rustc_test_marker,\n         rustc_then_this_would_need,\n         rustc_variance,"}, {"sha": "9d16015bdc129bd5e0a5c43ccb674ca1727a98e0", "filename": "src/test/ui/never-impl-is-reserved.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5d79e8c4c97388dd1201135b8d6cfadccfd3c8e3/src%2Ftest%2Fui%2Fnever-impl-is-reserved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d79e8c4c97388dd1201135b8d6cfadccfd3c8e3/src%2Ftest%2Fui%2Fnever-impl-is-reserved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever-impl-is-reserved.rs?ref=5d79e8c4c97388dd1201135b8d6cfadccfd3c8e3", "patch": "@@ -0,0 +1,12 @@\n+// check that the `for<T> T: From<!>` impl is reserved\n+\n+#![feature(never_type)]\n+\n+pub struct MyFoo;\n+pub trait MyTrait {}\n+\n+impl MyTrait for MyFoo {}\n+// This will conflict with the first impl if we impl `for<T> T: From<!>`.\n+impl<T> MyTrait for T where T: From<!> {} //~ ERROR conflicting implementation\n+\n+fn main() {}"}, {"sha": "09116eb4f7fafa9e7605188417b22978fa0e4d35", "filename": "src/test/ui/never-impl-is-reserved.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5d79e8c4c97388dd1201135b8d6cfadccfd3c8e3/src%2Ftest%2Fui%2Fnever-impl-is-reserved.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d79e8c4c97388dd1201135b8d6cfadccfd3c8e3/src%2Ftest%2Fui%2Fnever-impl-is-reserved.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever-impl-is-reserved.stderr?ref=5d79e8c4c97388dd1201135b8d6cfadccfd3c8e3", "patch": "@@ -0,0 +1,12 @@\n+error[E0119]: conflicting implementations of trait `MyTrait` for type `MyFoo`:\n+  --> $DIR/never-impl-is-reserved.rs:10:1\n+   |\n+LL | impl MyTrait for MyFoo {}\n+   | ---------------------- first implementation here\n+LL | // This will conflict with the first impl if we impl `for<T> T: From<!>`.\n+LL | impl<T> MyTrait for T where T: From<!> {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `MyFoo`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0119`."}]}