{"sha": "9da329d243129b7383a65e4e2651ff9b663bdffd", "node_id": "C_kwDOAAsO6NoAKDlkYTMyOWQyNDMxMjliNzM4M2E2NWU0ZTI2NTFmZjliNjYzYmRmZmQ", "commit": {"author": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2022-10-08T22:47:59Z"}, "committer": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2023-04-06T08:34:16Z"}, "message": "Refactor unwind from Option to a new enum", "tree": {"sha": "40016eae3501957b3f5158b97d093eaf00fd97e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40016eae3501957b3f5158b97d093eaf00fd97e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9da329d243129b7383a65e4e2651ff9b663bdffd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9da329d243129b7383a65e4e2651ff9b663bdffd", "html_url": "https://github.com/rust-lang/rust/commit/9da329d243129b7383a65e4e2651ff9b663bdffd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9da329d243129b7383a65e4e2651ff9b663bdffd/comments", "author": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc5a8c8881256c79c8fb57452aa38d4c9dfe6305", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc5a8c8881256c79c8fb57452aa38d4c9dfe6305", "html_url": "https://github.com/rust-lang/rust/commit/dc5a8c8881256c79c8fb57452aa38d4c9dfe6305"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "94413318492f1cb50d29c8f79986276b50e3c22e", "filename": "src/base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9da329d243129b7383a65e4e2651ff9b663bdffd/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9da329d243129b7383a65e4e2651ff9b663bdffd/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=9da329d243129b7383a65e4e2651ff9b663bdffd", "patch": "@@ -345,7 +345,7 @@ fn codegen_fn_body(fx: &mut FunctionCx<'_, '_, '_>, start_block: Block) {\n             TerminatorKind::Return => {\n                 crate::abi::codegen_return(fx);\n             }\n-            TerminatorKind::Assert { cond, expected, msg, target, cleanup: _ } => {\n+            TerminatorKind::Assert { cond, expected, msg, target, unwind: _ } => {\n                 if !fx.tcx.sess.overflow_checks() && msg.is_optional_overflow_check() {\n                     let target = fx.get_block(*target);\n                     fx.bcx.ins().jump(target, &[]);\n@@ -450,7 +450,7 @@ fn codegen_fn_body(fx: &mut FunctionCx<'_, '_, '_>, start_block: Block) {\n                 destination,\n                 target,\n                 fn_span,\n-                cleanup: _,\n+                unwind: _,\n                 from_hir_call: _,\n             } => {\n                 fx.tcx.prof.generic_activity(\"codegen call\").run(|| {\n@@ -470,7 +470,7 @@ fn codegen_fn_body(fx: &mut FunctionCx<'_, '_, '_>, start_block: Block) {\n                 options,\n                 destination,\n                 line_spans: _,\n-                cleanup: _,\n+                unwind: _,\n             } => {\n                 if options.contains(InlineAsmOptions::MAY_UNWIND) {\n                     fx.tcx.sess.span_fatal("}]}