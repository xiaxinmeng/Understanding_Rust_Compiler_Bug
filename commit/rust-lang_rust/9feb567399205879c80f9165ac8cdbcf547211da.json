{"sha": "9feb567399205879c80f9165ac8cdbcf547211da", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmZWI1NjczOTkyMDU4NzljODBmOTE2NWFjOGNkYmNmNTQ3MjExZGE=", "commit": {"author": {"name": "DevJPM", "email": "jean-pierre.muench@web.de", "date": "2020-10-25T15:53:25Z"}, "committer": {"name": "DevJPM", "email": "jean-pierre.muench@web.de", "date": "2020-10-25T16:06:40Z"}, "message": "Updated the list of white-listed target features for x86\n\nThis PR both adds in-source documentation on what to look out for\nwhen adding a new (X86) feature set and adds all that are detectable at run-time in Rust stable\nas of 1.27.0.\n\nThis should only enable the use of the corresponding LLVM intrinsics.\nActual intrinsics need to be added separately in rust-lang/stdarch.\n\nIt also re-orders the run-time-detect test statements to be more consistent\nwith the actual list of intrinsics whitelisted and removes underscores not present\nin the actual names (which might be mistaken as being part of the name)", "tree": {"sha": "4ccebb173dd1215ee0c5139087217f8a0c060153", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ccebb173dd1215ee0c5139087217f8a0c060153"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9feb567399205879c80f9165ac8cdbcf547211da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9feb567399205879c80f9165ac8cdbcf547211da", "html_url": "https://github.com/rust-lang/rust/commit/9feb567399205879c80f9165ac8cdbcf547211da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9feb567399205879c80f9165ac8cdbcf547211da/comments", "author": {"login": "DevJPM", "id": 10398997, "node_id": "MDQ6VXNlcjEwMzk4OTk3", "avatar_url": "https://avatars.githubusercontent.com/u/10398997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DevJPM", "html_url": "https://github.com/DevJPM", "followers_url": "https://api.github.com/users/DevJPM/followers", "following_url": "https://api.github.com/users/DevJPM/following{/other_user}", "gists_url": "https://api.github.com/users/DevJPM/gists{/gist_id}", "starred_url": "https://api.github.com/users/DevJPM/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DevJPM/subscriptions", "organizations_url": "https://api.github.com/users/DevJPM/orgs", "repos_url": "https://api.github.com/users/DevJPM/repos", "events_url": "https://api.github.com/users/DevJPM/events{/privacy}", "received_events_url": "https://api.github.com/users/DevJPM/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DevJPM", "id": 10398997, "node_id": "MDQ6VXNlcjEwMzk4OTk3", "avatar_url": "https://avatars.githubusercontent.com/u/10398997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DevJPM", "html_url": "https://github.com/DevJPM", "followers_url": "https://api.github.com/users/DevJPM/followers", "following_url": "https://api.github.com/users/DevJPM/following{/other_user}", "gists_url": "https://api.github.com/users/DevJPM/gists{/gist_id}", "starred_url": "https://api.github.com/users/DevJPM/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DevJPM/subscriptions", "organizations_url": "https://api.github.com/users/DevJPM/orgs", "repos_url": "https://api.github.com/users/DevJPM/repos", "events_url": "https://api.github.com/users/DevJPM/events{/privacy}", "received_events_url": "https://api.github.com/users/DevJPM/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f392479de6b003e72f93cb8f9955b3cf4135c2cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/f392479de6b003e72f93cb8f9955b3cf4135c2cd", "html_url": "https://github.com/rust-lang/rust/commit/f392479de6b003e72f93cb8f9955b3cf4135c2cd"}], "stats": {"total": 81, "additions": 56, "deletions": 25}, "files": [{"sha": "2cc2825cf32ef9797caf91b19d22c7685b6a8e25", "filename": "compiler/rustc_codegen_llvm/src/llvm_util.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9feb567399205879c80f9165ac8cdbcf547211da/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9feb567399205879c80f9165ac8cdbcf547211da/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs?ref=9feb567399205879c80f9165ac8cdbcf547211da", "patch": "@@ -137,13 +137,18 @@ pub fn time_trace_profiler_finish(file_name: &str) {\n // WARNING: the features after applying `to_llvm_feature` must be known\n // to LLVM or the feature detection code will walk past the end of the feature\n // array, leading to crashes.\n+// To find a list of LLVM's names, check llvm-project/llvm/include/llvm/Support/*TargetParser.def\n+// where the * matches the architecture's name\n pub fn to_llvm_feature<'a>(sess: &Session, s: &'a str) -> &'a str {\n     let arch = if sess.target.arch == \"x86_64\" { \"x86\" } else { &*sess.target.arch };\n     match (arch, s) {\n         (\"x86\", \"pclmulqdq\") => \"pclmul\",\n         (\"x86\", \"rdrand\") => \"rdrnd\",\n         (\"x86\", \"bmi1\") => \"bmi\",\n         (\"x86\", \"cmpxchg16b\") => \"cx16\",\n+        (\"x86\", \"avx512vaes\") => \"vaes\",\n+        (\"x86\", \"avx512gfni\") => \"gfni\",\n+        (\"x86\", \"avx512vpclmulqdq\") => \"vpclmulqdq\",\n         (\"aarch64\", \"fp\") => \"fp-armv8\",\n         (\"aarch64\", \"fp16\") => \"fullfp16\",\n         (_, s) => s,"}, {"sha": "cef96620884ffb15daf64d2b1c95c8da70061765", "filename": "compiler/rustc_codegen_ssa/src/target_features.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9feb567399205879c80f9165ac8cdbcf547211da/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9feb567399205879c80f9165ac8cdbcf547211da/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftarget_features.rs?ref=9feb567399205879c80f9165ac8cdbcf547211da", "patch": "@@ -4,6 +4,11 @@ use rustc_session::Session;\n use rustc_span::symbol::sym;\n use rustc_span::symbol::Symbol;\n \n+// When adding features to the below lists\n+// check whether they're named already elsewhere in rust\n+// e.g. in stdarch and whether the given name matches LLVM's\n+// if it doesn't, to_llvm_feature in llvm_util in rustc_codegen_llvm needs to be adapted\n+\n const ARM_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n     (\"aclass\", Some(sym::arm_target_feature)),\n     (\"mclass\", Some(sym::arm_target_feature)),\n@@ -50,15 +55,23 @@ const X86_ALLOWED_FEATURES: &[(&str, Option<Symbol>)] = &[\n     (\"aes\", None),\n     (\"avx\", None),\n     (\"avx2\", None),\n+    (\"avx512bf16\", Some(sym::avx512_target_feature)),\n+    (\"avx512bitalg\", Some(sym::avx512_target_feature)),\n     (\"avx512bw\", Some(sym::avx512_target_feature)),\n     (\"avx512cd\", Some(sym::avx512_target_feature)),\n     (\"avx512dq\", Some(sym::avx512_target_feature)),\n     (\"avx512er\", Some(sym::avx512_target_feature)),\n     (\"avx512f\", Some(sym::avx512_target_feature)),\n+    (\"avx512gfni\", Some(sym::avx512_target_feature)),\n     (\"avx512ifma\", Some(sym::avx512_target_feature)),\n     (\"avx512pf\", Some(sym::avx512_target_feature)),\n+    (\"avx512vaes\", Some(sym::avx512_target_feature)),\n     (\"avx512vbmi\", Some(sym::avx512_target_feature)),\n+    (\"avx512vbmi2\", Some(sym::avx512_target_feature)),\n     (\"avx512vl\", Some(sym::avx512_target_feature)),\n+    (\"avx512vnni\", Some(sym::avx512_target_feature)),\n+    (\"avx512vp2intersect\", Some(sym::avx512_target_feature)),\n+    (\"avx512vpclmulqdq\", Some(sym::avx512_target_feature)),\n     (\"avx512vpopcntdq\", Some(sym::avx512_target_feature)),\n     (\"bmi1\", None),\n     (\"bmi2\", None),"}, {"sha": "ffd9a04d8643a72ca950b1b9936a14d9d37cfe74", "filename": "library/std/tests/run-time-detect.rs", "status": "modified", "additions": 38, "deletions": 25, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/9feb567399205879c80f9165ac8cdbcf547211da/library%2Fstd%2Ftests%2Frun-time-detect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9feb567399205879c80f9165ac8cdbcf547211da/library%2Fstd%2Ftests%2Frun-time-detect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Ftests%2Frun-time-detect.rs?ref=9feb567399205879c80f9165ac8cdbcf547211da", "patch": "@@ -54,42 +54,55 @@ fn powerpc64_linux() {\n #[test]\n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n fn x86_all() {\n+    // the below is in alphabetical order and matches\n+    // the order of X86_ALLOWED_FEATURES in rustc_codegen_ssa's target_features.rs\n+\n+    println!(\"adx: {:?}\", is_x86_feature_detected!(\"adx\"));\n     println!(\"aes: {:?}\", is_x86_feature_detected!(\"aes\"));\n-    println!(\"pcmulqdq: {:?}\", is_x86_feature_detected!(\"pclmulqdq\"));\n+    println!(\"avx: {:?}\", is_x86_feature_detected!(\"avx\"));\n+    println!(\"avx2: {:?}\", is_x86_feature_detected!(\"avx2\"));\n+    println!(\"avx512bf16: {:?}\", is_x86_feature_detected!(\"avx512bf16\"));\n+    println!(\"avx512bitalg: {:?}\", is_x86_feature_detected!(\"avx512bitalg\"));\n+    println!(\"avx512bw: {:?}\", is_x86_feature_detected!(\"avx512bw\"));\n+    println!(\"avx512cd: {:?}\", is_x86_feature_detected!(\"avx512cd\"));\n+    println!(\"avx512dq: {:?}\", is_x86_feature_detected!(\"avx512dq\"));\n+    println!(\"avx512er: {:?}\", is_x86_feature_detected!(\"avx512er\"));\n+    println!(\"avx512f: {:?}\", is_x86_feature_detected!(\"avx512f\"));\n+    println!(\"avx512gfni: {:?}\", is_x86_feature_detected!(\"avx512gfni\"));\n+    println!(\"avx512ifma: {:?}\", is_x86_feature_detected!(\"avx512ifma\"));\n+    println!(\"avx512pf: {:?}\", is_x86_feature_detected!(\"avx512pf\"));\n+    println!(\"avx512vaes: {:?}\", is_x86_feature_detected!(\"avx512vaes\"));\n+    println!(\"avx512vbmi: {:?}\", is_x86_feature_detected!(\"avx512vbmi\"));\n+    println!(\"avx512vbmi2: {:?}\", is_x86_feature_detected!(\"avx512vbmi2\"));\n+    println!(\"avx512vl: {:?}\", is_x86_feature_detected!(\"avx512vl\"));\n+    println!(\"avx512vnni: {:?}\", is_x86_feature_detected!(\"avx512vnni\"));\n+    println!(\"avx512vp2intersect: {:?}\", is_x86_feature_detected!(\"avx512vp2intersect\"));\n+    println!(\"avx512vpclmulqdq: {:?}\", is_x86_feature_detected!(\"avx512vpclmulqdq\"));\n+    println!(\"avx512vpopcntdq: {:?}\", is_x86_feature_detected!(\"avx512vpopcntdq\"));\n+    println!(\"bmi1: {:?}\", is_x86_feature_detected!(\"bmi1\"));\n+    println!(\"bmi2: {:?}\", is_x86_feature_detected!(\"bmi2\"));\n+    println!(\"cmpxchg16b: {:?}\", is_x86_feature_detected!(\"cmpxchg16b\"));\n+    println!(\"f16c: {:?}\", is_x86_feature_detected!(\"f16c\"));\n+    println!(\"fma: {:?}\", is_x86_feature_detected!(\"fma\"));\n+    println!(\"fxsr: {:?}\", is_x86_feature_detected!(\"fxsr\"));\n+    println!(\"lzcnt: {:?}\", is_x86_feature_detected!(\"lzcnt\"));\n+    println!(\"movbe: {:?}\", is_x86_feature_detected!(\"movbe\"));\n+    println!(\"pclmulqdq: {:?}\", is_x86_feature_detected!(\"pclmulqdq\"));\n+    println!(\"popcnt: {:?}\", is_x86_feature_detected!(\"popcnt\"));\n     println!(\"rdrand: {:?}\", is_x86_feature_detected!(\"rdrand\"));\n     println!(\"rdseed: {:?}\", is_x86_feature_detected!(\"rdseed\"));\n-    println!(\"tsc: {:?}\", is_x86_feature_detected!(\"tsc\"));\n-    println!(\"mmx: {:?}\", is_x86_feature_detected!(\"mmx\"));\n+    println!(\"rtm: {:?}\", is_x86_feature_detected!(\"rtm\"));\n+    println!(\"sha: {:?}\", is_x86_feature_detected!(\"sha\"));\n     println!(\"sse: {:?}\", is_x86_feature_detected!(\"sse\"));\n     println!(\"sse2: {:?}\", is_x86_feature_detected!(\"sse2\"));\n     println!(\"sse3: {:?}\", is_x86_feature_detected!(\"sse3\"));\n-    println!(\"ssse3: {:?}\", is_x86_feature_detected!(\"ssse3\"));\n     println!(\"sse4.1: {:?}\", is_x86_feature_detected!(\"sse4.1\"));\n     println!(\"sse4.2: {:?}\", is_x86_feature_detected!(\"sse4.2\"));\n     println!(\"sse4a: {:?}\", is_x86_feature_detected!(\"sse4a\"));\n-    println!(\"sha: {:?}\", is_x86_feature_detected!(\"sha\"));\n-    println!(\"avx: {:?}\", is_x86_feature_detected!(\"avx\"));\n-    println!(\"avx2: {:?}\", is_x86_feature_detected!(\"avx2\"));\n-    println!(\"avx512f {:?}\", is_x86_feature_detected!(\"avx512f\"));\n-    println!(\"avx512cd {:?}\", is_x86_feature_detected!(\"avx512cd\"));\n-    println!(\"avx512er {:?}\", is_x86_feature_detected!(\"avx512er\"));\n-    println!(\"avx512pf {:?}\", is_x86_feature_detected!(\"avx512pf\"));\n-    println!(\"avx512bw {:?}\", is_x86_feature_detected!(\"avx512bw\"));\n-    println!(\"avx512dq {:?}\", is_x86_feature_detected!(\"avx512dq\"));\n-    println!(\"avx512vl {:?}\", is_x86_feature_detected!(\"avx512vl\"));\n-    println!(\"avx512_ifma {:?}\", is_x86_feature_detected!(\"avx512ifma\"));\n-    println!(\"avx512_vbmi {:?}\", is_x86_feature_detected!(\"avx512vbmi\"));\n-    println!(\"avx512_vpopcntdq {:?}\", is_x86_feature_detected!(\"avx512vpopcntdq\"));\n-    println!(\"fma: {:?}\", is_x86_feature_detected!(\"fma\"));\n-    println!(\"bmi1: {:?}\", is_x86_feature_detected!(\"bmi1\"));\n-    println!(\"bmi2: {:?}\", is_x86_feature_detected!(\"bmi2\"));\n-    println!(\"abm: {:?}\", is_x86_feature_detected!(\"abm\"));\n-    println!(\"lzcnt: {:?}\", is_x86_feature_detected!(\"lzcnt\"));\n+    println!(\"ssse3: {:?}\", is_x86_feature_detected!(\"ssse3\"));\n     println!(\"tbm: {:?}\", is_x86_feature_detected!(\"tbm\"));\n-    println!(\"popcnt: {:?}\", is_x86_feature_detected!(\"popcnt\"));\n-    println!(\"fxsr: {:?}\", is_x86_feature_detected!(\"fxsr\"));\n     println!(\"xsave: {:?}\", is_x86_feature_detected!(\"xsave\"));\n+    println!(\"xsavec: {:?}\", is_x86_feature_detected!(\"xsavec\"));\n     println!(\"xsaveopt: {:?}\", is_x86_feature_detected!(\"xsaveopt\"));\n     println!(\"xsaves: {:?}\", is_x86_feature_detected!(\"xsaves\"));\n-    println!(\"xsavec: {:?}\", is_x86_feature_detected!(\"xsavec\"));\n }"}]}