{"sha": "cb787bea4613189da9f0b26406e11ee8cb39d422", "node_id": "C_kwDOAAsO6NoAKGNiNzg3YmVhNDYxMzE4OWRhOWYwYjI2NDA2ZTExZWU4Y2IzOWQ0MjI", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-06-06T12:34:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-06T12:34:56Z"}, "message": "Rollup merge of #97495 - clarfonthey:e0788-no-coverage, r=nagisa\n\nAdd E0788 for improper #[no_coverage] usage\n\nEssentially, this adds proper checking for the attribute (tracking issue #84605) and throws errors when it's put in obviously-wrong places, like on struct or const definitions. Most of the code is taken directly from the checks for the `#[inline]` attribute, since it's very similar.\n\nRight now, the code only checks at the function level, but it seems reasonable to allow adding `#[no_coverage]` to individual blocks or expressions, so, for now those just throw `unused_attributes` warnings. Similarly, since there was a lot of desire to eventually allow recursive definitions as well on modules and impl blocks, these also throw `unused_attributes` instead of an error.\n\nI'm not sure if anything has to be done since this error is technically for an unstable feature, but since an error for using unstable features will show up anyway, I think it's okay.\n\nThis is the first big piece needed for stabilising this attribute, although I personally would like to explore renaming it to `#[coverage(never)]` on a separate PR, which I will offer soon. There's a lot of discussion still to be had about that, which is why it will be kept separate.\n\nI don't think much is needed besides adding this simple check and a UI test, but let me know if there's something else that should be added to make this happen.", "tree": {"sha": "5c4313aa715ff607200a0de82cef88d727609100", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c4313aa715ff607200a0de82cef88d727609100"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb787bea4613189da9f0b26406e11ee8cb39d422", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJinfRwCRBK7hj4Ov3rIwAAXq4IAHFcJpm8bYVI9Ra5zDE+oQr9\ngeeu6SazYJ01giv9hiz99DyBQS4iJbx9oODAg/39ysMUvyIMSg8I0GEWZYqLX/4P\nGclIE0ccDGdFxN3F6e+pug/PosNdO0rVFqC48Pku43AO44gUPvy704YlWTbocd0I\nBzjym2J+8K9vwU4s2wSD80vytJDVS60wmlooBZ1uMG0+wunMtp9aAGjGu/tW3ZDx\no5lwbYic37ovG4d1+YJp4Y4XZdLnw7JBmUxm/SVEpCU1xI5+dy5L3grq/aILoGOh\ndpEmA6DjV2PyCMUhTgV44AfDgJd9ZbozfeXyFZ12Jjy9jnxa5yO0kmCgjYxhbAE=\n=jwEg\n-----END PGP SIGNATURE-----\n", "payload": "tree 5c4313aa715ff607200a0de82cef88d727609100\nparent a736acc80459734a7c5490f25c70600eff802961\nparent 9473e2195518d64074e8e3f85d64c82fe285915c\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1654518896 +0200\ncommitter GitHub <noreply@github.com> 1654518896 +0200\n\nRollup merge of #97495 - clarfonthey:e0788-no-coverage, r=nagisa\n\nAdd E0788 for improper #[no_coverage] usage\n\nEssentially, this adds proper checking for the attribute (tracking issue #84605) and throws errors when it's put in obviously-wrong places, like on struct or const definitions. Most of the code is taken directly from the checks for the `#[inline]` attribute, since it's very similar.\n\nRight now, the code only checks at the function level, but it seems reasonable to allow adding `#[no_coverage]` to individual blocks or expressions, so, for now those just throw `unused_attributes` warnings. Similarly, since there was a lot of desire to eventually allow recursive definitions as well on modules and impl blocks, these also throw `unused_attributes` instead of an error.\n\nI'm not sure if anything has to be done since this error is technically for an unstable feature, but since an error for using unstable features will show up anyway, I think it's okay.\n\nThis is the first big piece needed for stabilising this attribute, although I personally would like to explore renaming it to `#[coverage(never)]` on a separate PR, which I will offer soon. There's a lot of discussion still to be had about that, which is why it will be kept separate.\n\nI don't think much is needed besides adding this simple check and a UI test, but let me know if there's something else that should be added to make this happen.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb787bea4613189da9f0b26406e11ee8cb39d422", "html_url": "https://github.com/rust-lang/rust/commit/cb787bea4613189da9f0b26406e11ee8cb39d422", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb787bea4613189da9f0b26406e11ee8cb39d422/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a736acc80459734a7c5490f25c70600eff802961", "url": "https://api.github.com/repos/rust-lang/rust/commits/a736acc80459734a7c5490f25c70600eff802961", "html_url": "https://github.com/rust-lang/rust/commit/a736acc80459734a7c5490f25c70600eff802961"}, {"sha": "9473e2195518d64074e8e3f85d64c82fe285915c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9473e2195518d64074e8e3f85d64c82fe285915c", "html_url": "https://github.com/rust-lang/rust/commit/9473e2195518d64074e8e3f85d64c82fe285915c"}], "stats": {"total": 235, "additions": 235, "deletions": 0}, "files": [{"sha": "0114461e38811153ba7ba0f1d6830e2ac498e2d7", "filename": "compiler/rustc_error_codes/src/error_codes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cb787bea4613189da9f0b26406e11ee8cb39d422/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb787bea4613189da9f0b26406e11ee8cb39d422/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs?ref=cb787bea4613189da9f0b26406e11ee8cb39d422", "patch": "@@ -491,6 +491,7 @@ E0784: include_str!(\"./error_codes/E0784.md\"),\n E0785: include_str!(\"./error_codes/E0785.md\"),\n E0786: include_str!(\"./error_codes/E0786.md\"),\n E0787: include_str!(\"./error_codes/E0787.md\"),\n+E0788: include_str!(\"./error_codes/E0788.md\"),\n ;\n //  E0006, // merged with E0005\n //  E0008, // cannot bind by-move into a pattern guard"}, {"sha": "d26f9b594550c887e86042380f35772697db1f54", "filename": "compiler/rustc_error_codes/src/error_codes/E0788.md", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/cb787bea4613189da9f0b26406e11ee8cb39d422/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0788.md", "raw_url": "https://github.com/rust-lang/rust/raw/cb787bea4613189da9f0b26406e11ee8cb39d422/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0788.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0788.md?ref=cb787bea4613189da9f0b26406e11ee8cb39d422", "patch": "@@ -0,0 +1,26 @@\n+A `#[no_coverage]` attribute was applied to something which does not show up\n+in code coverage, or is too granular to be excluded from the coverage report.\n+\n+For now, this attribute can only be applied to function, method, and closure\n+definitions. In the future, it may be added to statements, blocks, and\n+expressions, and for the time being, using this attribute in those places\n+will just emit an `unused_attributes` lint instead of this error.\n+\n+Example of erroneous code:\n+\n+```compile_fail,E0788\n+#[no_coverage]\n+struct Foo;\n+\n+#[no_coverage]\n+const FOO: Foo = Foo;\n+```\n+\n+`#[no_coverage]` tells the compiler to not generate coverage instrumentation for\n+a piece of code when the `-C instrument-coverage` flag is passed. Things like\n+structs and consts are not coverable code, and thus cannot do anything with this\n+attribute.\n+\n+If you wish to apply this attribute to all methods in an impl or module,\n+manually annotate each method; it is not possible to annotate the entire impl\n+with a `#[no_coverage]` attribute."}, {"sha": "5cc97d326d3d82cb2caf72f88bda9ab038dffba5", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/cb787bea4613189da9f0b26406e11ee8cb39d422/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb787bea4613189da9f0b26406e11ee8cb39d422/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=cb787bea4613189da9f0b26406e11ee8cb39d422", "patch": "@@ -77,6 +77,7 @@ impl CheckAttrVisitor<'_> {\n         for attr in attrs {\n             let attr_is_valid = match attr.name_or_empty() {\n                 sym::inline => self.check_inline(hir_id, attr, span, target),\n+                sym::no_coverage => self.check_no_coverage(hir_id, attr, span, target),\n                 sym::non_exhaustive => self.check_non_exhaustive(hir_id, attr, span, target),\n                 sym::marker => self.check_marker(hir_id, attr, span, target),\n                 sym::rustc_must_implement_one_of => {\n@@ -291,6 +292,57 @@ impl CheckAttrVisitor<'_> {\n         }\n     }\n \n+    /// Checks if a `#[no_coverage]` is applied directly to a function\n+    fn check_no_coverage(\n+        &self,\n+        hir_id: HirId,\n+        attr: &Attribute,\n+        span: Span,\n+        target: Target,\n+    ) -> bool {\n+        match target {\n+            // no_coverage on function is fine\n+            Target::Fn\n+            | Target::Closure\n+            | Target::Method(MethodKind::Trait { body: true } | MethodKind::Inherent) => true,\n+\n+            // function prototypes can't be covered\n+            Target::Method(MethodKind::Trait { body: false }) | Target::ForeignFn => {\n+                self.tcx.struct_span_lint_hir(UNUSED_ATTRIBUTES, hir_id, attr.span, |lint| {\n+                    lint.build(\"`#[no_coverage]` is ignored on function prototypes\").emit();\n+                });\n+                true\n+            }\n+\n+            Target::Mod | Target::ForeignMod | Target::Impl | Target::Trait => {\n+                self.tcx.struct_span_lint_hir(UNUSED_ATTRIBUTES, hir_id, attr.span, |lint| {\n+                    lint.build(\"`#[no_coverage]` does not propagate into items and must be applied to the contained functions directly\").emit();\n+                });\n+                true\n+            }\n+\n+            Target::Expression | Target::Statement | Target::Arm => {\n+                self.tcx.struct_span_lint_hir(UNUSED_ATTRIBUTES, hir_id, attr.span, |lint| {\n+                    lint.build(\"`#[no_coverage]` may only be applied to function definitions\")\n+                        .emit();\n+                });\n+                true\n+            }\n+\n+            _ => {\n+                struct_span_err!(\n+                    self.tcx.sess,\n+                    attr.span,\n+                    E0788,\n+                    \"`#[no_coverage]` must be applied to coverable code\",\n+                )\n+                .span_label(span, \"not coverable code\")\n+                .emit();\n+                false\n+            }\n+        }\n+    }\n+\n     fn check_generic_attr(\n         &self,\n         hir_id: HirId,"}, {"sha": "ff24c12b2bcfcbe5b5279f70b7a56f8fc707dc3e", "filename": "src/test/ui/lint/no-coverage.rs", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/cb787bea4613189da9f0b26406e11ee8cb39d422/src%2Ftest%2Fui%2Flint%2Fno-coverage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb787bea4613189da9f0b26406e11ee8cb39d422/src%2Ftest%2Fui%2Flint%2Fno-coverage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fno-coverage.rs?ref=cb787bea4613189da9f0b26406e11ee8cb39d422", "patch": "@@ -0,0 +1,55 @@\n+#![feature(extern_types)]\n+#![feature(no_coverage)]\n+#![feature(type_alias_impl_trait)]\n+#![warn(unused_attributes)]\n+#![no_coverage]\n+//~^ WARN: `#[no_coverage]` does not propagate into items and must be applied to the contained functions directly\n+\n+#[no_coverage]\n+//~^ WARN: `#[no_coverage]` does not propagate into items and must be applied to the contained functions directly\n+trait Trait {\n+    #[no_coverage] //~ ERROR `#[no_coverage]` must be applied to coverable code\n+    const X: u32;\n+\n+    #[no_coverage] //~ ERROR `#[no_coverage]` must be applied to coverable code\n+    type T;\n+\n+    type U;\n+}\n+\n+#[no_coverage]\n+//~^ WARN: `#[no_coverage]` does not propagate into items and must be applied to the contained functions directly\n+impl Trait for () {\n+    const X: u32 = 0;\n+\n+    #[no_coverage] //~ ERROR `#[no_coverage]` must be applied to coverable code\n+    type T = Self;\n+\n+    #[no_coverage] //~ ERROR `#[no_coverage]` must be applied to coverable code\n+    type U = impl Trait; //~ ERROR unconstrained opaque type\n+}\n+\n+extern \"C\" {\n+    #[no_coverage] //~ ERROR `#[no_coverage]` must be applied to coverable code\n+    static X: u32;\n+\n+    #[no_coverage] //~ ERROR `#[no_coverage]` must be applied to coverable code\n+    type T;\n+}\n+\n+#[no_coverage]\n+fn main() {\n+    #[no_coverage]\n+    //~^ WARN `#[no_coverage]` may only be applied to function definitions\n+    let _ = ();\n+\n+    match () {\n+        #[no_coverage]\n+        //~^ WARN `#[no_coverage]` may only be applied to function definitions\n+        () => (),\n+    }\n+\n+    #[no_coverage]\n+    //~^ WARN `#[no_coverage]` may only be applied to function definitions\n+    return ();\n+}"}, {"sha": "8452ccc7a03cbe5e40819c28caac78a3871627c9", "filename": "src/test/ui/lint/no-coverage.stderr", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/cb787bea4613189da9f0b26406e11ee8cb39d422/src%2Ftest%2Fui%2Flint%2Fno-coverage.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb787bea4613189da9f0b26406e11ee8cb39d422/src%2Ftest%2Fui%2Flint%2Fno-coverage.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fno-coverage.stderr?ref=cb787bea4613189da9f0b26406e11ee8cb39d422", "patch": "@@ -0,0 +1,101 @@\n+warning: `#[no_coverage]` does not propagate into items and must be applied to the contained functions directly\n+  --> $DIR/no-coverage.rs:8:1\n+   |\n+LL | #[no_coverage]\n+   | ^^^^^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/no-coverage.rs:4:9\n+   |\n+LL | #![warn(unused_attributes)]\n+   |         ^^^^^^^^^^^^^^^^^\n+\n+warning: `#[no_coverage]` does not propagate into items and must be applied to the contained functions directly\n+  --> $DIR/no-coverage.rs:20:1\n+   |\n+LL | #[no_coverage]\n+   | ^^^^^^^^^^^^^^\n+\n+warning: `#[no_coverage]` may only be applied to function definitions\n+  --> $DIR/no-coverage.rs:42:5\n+   |\n+LL |     #[no_coverage]\n+   |     ^^^^^^^^^^^^^^\n+\n+warning: `#[no_coverage]` may only be applied to function definitions\n+  --> $DIR/no-coverage.rs:47:9\n+   |\n+LL |         #[no_coverage]\n+   |         ^^^^^^^^^^^^^^\n+\n+warning: `#[no_coverage]` may only be applied to function definitions\n+  --> $DIR/no-coverage.rs:52:5\n+   |\n+LL |     #[no_coverage]\n+   |     ^^^^^^^^^^^^^^\n+\n+error[E0788]: `#[no_coverage]` must be applied to coverable code\n+  --> $DIR/no-coverage.rs:11:5\n+   |\n+LL |     #[no_coverage]\n+   |     ^^^^^^^^^^^^^^\n+LL |     const X: u32;\n+   |     ------------- not coverable code\n+\n+error[E0788]: `#[no_coverage]` must be applied to coverable code\n+  --> $DIR/no-coverage.rs:14:5\n+   |\n+LL |     #[no_coverage]\n+   |     ^^^^^^^^^^^^^^\n+LL |     type T;\n+   |     ------- not coverable code\n+\n+error[E0788]: `#[no_coverage]` must be applied to coverable code\n+  --> $DIR/no-coverage.rs:25:5\n+   |\n+LL |     #[no_coverage]\n+   |     ^^^^^^^^^^^^^^\n+LL |     type T = Self;\n+   |     -------------- not coverable code\n+\n+error[E0788]: `#[no_coverage]` must be applied to coverable code\n+  --> $DIR/no-coverage.rs:28:5\n+   |\n+LL |     #[no_coverage]\n+   |     ^^^^^^^^^^^^^^\n+LL |     type U = impl Trait;\n+   |     -------------------- not coverable code\n+\n+error[E0788]: `#[no_coverage]` must be applied to coverable code\n+  --> $DIR/no-coverage.rs:33:5\n+   |\n+LL |     #[no_coverage]\n+   |     ^^^^^^^^^^^^^^\n+LL |     static X: u32;\n+   |     -------------- not coverable code\n+\n+error[E0788]: `#[no_coverage]` must be applied to coverable code\n+  --> $DIR/no-coverage.rs:36:5\n+   |\n+LL |     #[no_coverage]\n+   |     ^^^^^^^^^^^^^^\n+LL |     type T;\n+   |     ------- not coverable code\n+\n+warning: `#[no_coverage]` does not propagate into items and must be applied to the contained functions directly\n+  --> $DIR/no-coverage.rs:5:1\n+   |\n+LL | #![no_coverage]\n+   | ^^^^^^^^^^^^^^^\n+\n+error: unconstrained opaque type\n+  --> $DIR/no-coverage.rs:29:14\n+   |\n+LL |     type U = impl Trait;\n+   |              ^^^^^^^^^^\n+   |\n+   = note: `U` must be used in combination with a concrete type within the same module\n+\n+error: aborting due to 7 previous errors; 6 warnings emitted\n+\n+For more information about this error, try `rustc --explain E0788`."}]}