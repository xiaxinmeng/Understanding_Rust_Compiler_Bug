{"sha": "d3ca9ba123de53e15df69197fb7f123d97cb9532", "node_id": "C_kwDOAAsO6NoAKGQzY2E5YmExMjNkZTUzZTE1ZGY2OTE5N2ZiN2YxMjNkOTdjYjk1MzI", "commit": {"author": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2022-03-25T05:30:38Z"}, "committer": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2022-03-25T05:38:16Z"}, "message": "Vigorously refactor _session::code_stats (nfc)", "tree": {"sha": "8d40ed32b7f08bdeeacbdf445ca9655c166b65a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d40ed32b7f08bdeeacbdf445ca9655c166b65a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3ca9ba123de53e15df69197fb7f123d97cb9532", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3ca9ba123de53e15df69197fb7f123d97cb9532", "html_url": "https://github.com/rust-lang/rust/commit/d3ca9ba123de53e15df69197fb7f123d97cb9532", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3ca9ba123de53e15df69197fb7f123d97cb9532/comments", "author": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de66e08957987c3faad81a201c728a236e401b56", "url": "https://api.github.com/repos/rust-lang/rust/commits/de66e08957987c3faad81a201c728a236e401b56", "html_url": "https://github.com/rust-lang/rust/commit/de66e08957987c3faad81a201c728a236e401b56"}], "stats": {"total": 30, "additions": 11, "deletions": 19}, "files": [{"sha": "cbb03ffd7a08378c9b2ce038d99b4f20848c6053", "filename": "compiler/rustc_session/src/code_stats.rs", "status": "modified", "additions": 11, "deletions": 19, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d3ca9ba123de53e15df69197fb7f123d97cb9532/compiler%2Frustc_session%2Fsrc%2Fcode_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3ca9ba123de53e15df69197fb7f123d97cb9532/compiler%2Frustc_session%2Fsrc%2Fcode_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fcode_stats.rs?ref=d3ca9ba123de53e15df69197fb7f123d97cb9532", "patch": "@@ -91,10 +91,10 @@ impl CodeStats {\n             }\n         });\n \n-        for info in &sorted {\n+        for info in sorted {\n+            let TypeSizeInfo { type_description, overall_size, align, kind, variants, .. } = info;\n             println!(\n-                \"print-type-size type: `{}`: {} bytes, alignment: {} bytes\",\n-                info.type_description, info.overall_size, info.align\n+                \"print-type-size type: `{type_description}`: {overall_size} bytes, alignment: {align} bytes\"\n             );\n             let indent = \"    \";\n \n@@ -111,11 +111,11 @@ impl CodeStats {\n             // to reflect the presence of the discriminant.\n             let mut max_variant_size = discr_size;\n \n-            let struct_like = match info.kind {\n+            let struct_like = match kind {\n                 DataTypeKind::Struct | DataTypeKind::Closure => true,\n                 DataTypeKind::Enum | DataTypeKind::Union => false,\n             };\n-            for (i, variant_info) in info.variants.iter().enumerate() {\n+            for (i, variant_info) in variants.into_iter().enumerate() {\n                 let VariantInfo { ref name, kind: _, align: _, size, ref fields } = *variant_info;\n                 let indent = if !struct_like {\n                     let name = match name.as_ref() {\n@@ -142,8 +142,8 @@ impl CodeStats {\n                 let mut fields = fields.clone();\n                 fields.sort_by_key(|f| (f.offset, f.size));\n \n-                for field in fields.iter() {\n-                    let FieldInfo { ref name, offset, size, align } = *field;\n+                for field in fields {\n+                    let FieldInfo { ref name, offset, size, align } = field;\n \n                     if offset > min_offset {\n                         let pad = offset - min_offset;\n@@ -171,18 +171,10 @@ impl CodeStats {\n                 }\n             }\n \n-            assert!(\n-                max_variant_size <= info.overall_size,\n-                \"max_variant_size {} !<= {} overall_size\",\n-                max_variant_size,\n-                info.overall_size\n-            );\n-            if max_variant_size < info.overall_size {\n-                println!(\n-                    \"print-type-size {}end padding: {} bytes\",\n-                    indent,\n-                    info.overall_size - max_variant_size\n-                );\n+            match overall_size.checked_sub(max_variant_size) {\n+                None => panic!(\"max_variant_size {max_variant_size} > {overall_size} overall_size\"),\n+                Some(diff @ 1..) => println!(\"print-type-size {indent}end padding: {diff} bytes\"),\n+                Some(0) => {}\n             }\n         }\n     }"}]}