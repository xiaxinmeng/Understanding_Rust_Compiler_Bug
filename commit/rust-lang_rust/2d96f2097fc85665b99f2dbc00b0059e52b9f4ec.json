{"sha": "2d96f2097fc85665b99f2dbc00b0059e52b9f4ec", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkOTZmMjA5N2ZjODU2NjViOTlmMmRiYzAwYjAwNTllNTJiOWY0ZWM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-15T15:11:01Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-15T15:11:01Z"}, "message": "cleanup with push_fake_read", "tree": {"sha": "d8fb977fca5d16939d097caca9dd316184ead4f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8fb977fca5d16939d097caca9dd316184ead4f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d96f2097fc85665b99f2dbc00b0059e52b9f4ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d96f2097fc85665b99f2dbc00b0059e52b9f4ec", "html_url": "https://github.com/rust-lang/rust/commit/2d96f2097fc85665b99f2dbc00b0059e52b9f4ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d96f2097fc85665b99f2dbc00b0059e52b9f4ec/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a605441e049f0b6d5f7715b94b8ac4662fd7fcf6", "url": "https://api.github.com/repos/rust-lang/rust/commits/a605441e049f0b6d5f7715b94b8ac4662fd7fcf6", "html_url": "https://github.com/rust-lang/rust/commit/a605441e049f0b6d5f7715b94b8ac4662fd7fcf6"}], "stats": {"total": 71, "additions": 23, "deletions": 48}, "files": [{"sha": "6bd8d2f7c0792b36c1a1a9006d50b28ed268210e", "filename": "src/librustc_mir/build/cfg.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2d96f2097fc85665b99f2dbc00b0059e52b9f4ec/src%2Flibrustc_mir%2Fbuild%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d96f2097fc85665b99f2dbc00b0059e52b9f4ec/src%2Flibrustc_mir%2Fbuild%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fcfg.rs?ref=2d96f2097fc85665b99f2dbc00b0059e52b9f4ec", "patch": "@@ -59,6 +59,18 @@ impl<'tcx> CFG<'tcx> {\n         ));\n     }\n \n+    pub fn push_fake_read(\n+        &mut self,\n+        block: BasicBlock,\n+        source_info: SourceInfo,\n+        cause: FakeReadCause,\n+        place: Place<'tcx>,\n+    ) {\n+        let kind = StatementKind::FakeRead(cause, box place);\n+        let stmt = Statement { source_info, kind };\n+        self.push(block, stmt);\n+    }\n+\n     pub fn terminate(&mut self,\n                      block: BasicBlock,\n                      source_info: SourceInfo,"}, {"sha": "ddacda72e1e656b133aa60c02475adf9029741cb", "filename": "src/librustc_mir/build/expr/as_place.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2d96f2097fc85665b99f2dbc00b0059e52b9f4ec/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d96f2097fc85665b99f2dbc00b0059e52b9f4ec/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_place.rs?ref=2d96f2097fc85665b99f2dbc00b0059e52b9f4ec", "patch": "@@ -484,24 +484,15 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n     fn read_fake_borrows(\n         &mut self,\n-        block: BasicBlock,\n+        bb: BasicBlock,\n         fake_borrow_temps: &mut Vec<Local>,\n         source_info: SourceInfo,\n     ) {\n         // All indexes have been evaluated now, read all of the\n         // fake borrows so that they are live across those index\n         // expressions.\n         for temp in fake_borrow_temps {\n-            self.cfg.push(\n-                block,\n-                Statement {\n-                    source_info,\n-                    kind: StatementKind::FakeRead(\n-                        FakeReadCause::ForIndex,\n-                        Box::new(Place::from(*temp)),\n-                    )\n-                }\n-            );\n+            self.cfg.push_fake_read(bb, source_info, FakeReadCause::ForIndex, Place::from(*temp));\n         }\n     }\n }"}, {"sha": "7ef6612b2c731bc5ef5e58c476bcc740eb155b5a", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 9, "deletions": 37, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/2d96f2097fc85665b99f2dbc00b0059e52b9f4ec/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d96f2097fc85665b99f2dbc00b0059e52b9f4ec/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=2d96f2097fc85665b99f2dbc00b0059e52b9f4ec", "patch": "@@ -132,13 +132,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         // check safety.\n \n         let source_info = self.source_info(scrutinee_span);\n-        self.cfg.push(block, Statement {\n-            source_info,\n-            kind: StatementKind::FakeRead(\n-                FakeReadCause::ForMatchedPlace,\n-                box(scrutinee_place.clone()),\n-            ),\n-        });\n+        let cause_matched_place = FakeReadCause::ForMatchedPlace;\n+        self.cfg.push_fake_read(block, source_info, cause_matched_place, scrutinee_place.clone());\n \n         // Step 2. Create the otherwise and prebinding blocks.\n \n@@ -314,16 +309,9 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     self.storage_live_binding(block, var, irrefutable_pat.span, OutsideGuard);\n                 unpack!(block = self.into(&place, block, initializer));\n \n-\n                 // Inject a fake read, see comments on `FakeReadCause::ForLet`.\n                 let source_info = self.source_info(irrefutable_pat.span);\n-                self.cfg.push(\n-                    block,\n-                    Statement {\n-                        source_info,\n-                        kind: StatementKind::FakeRead(FakeReadCause::ForLet, box(place)),\n-                    },\n-                );\n+                self.cfg.push_fake_read(block, source_info, FakeReadCause::ForLet, place);\n \n                 self.schedule_drop_for_binding(var, irrefutable_pat.span, OutsideGuard);\n                 block.unit()\n@@ -359,13 +347,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n                 // Inject a fake read, see comments on `FakeReadCause::ForLet`.\n                 let pattern_source_info = self.source_info(irrefutable_pat.span);\n-                self.cfg.push(\n-                    block,\n-                    Statement {\n-                        source_info: pattern_source_info,\n-                        kind: StatementKind::FakeRead(FakeReadCause::ForLet, box(place.clone())),\n-                    },\n-                );\n+                let cause_let = FakeReadCause::ForLet;\n+                self.cfg.push_fake_read(block, pattern_source_info, cause_let, place.clone());\n \n                 let ty_source_info = self.source_info(user_ty_span);\n                 let user_ty = pat_ascription_ty.user_ty(\n@@ -1516,13 +1499,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             );\n \n             for &(_, temp) in fake_borrows {\n-                self.cfg.push(post_guard_block, Statement {\n-                    source_info: guard_end,\n-                    kind: StatementKind::FakeRead(\n-                        FakeReadCause::ForMatchGuard,\n-                        box(Place::from(temp)),\n-                    ),\n-                });\n+                let cause = FakeReadCause::ForMatchGuard;\n+                self.cfg.push_fake_read(post_guard_block, guard_end, cause, Place::from(temp));\n             }\n \n             self.exit_scope(\n@@ -1565,14 +1543,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             // place they refer to can't be modified by the guard.\n             for binding in by_value_bindings.clone() {\n                 let local_id = self.var_local_id(binding.var_id, RefWithinGuard);\n-                let place = Place::from(local_id);\n-                self.cfg.push(\n-                    post_guard_block,\n-                    Statement {\n-                        source_info: guard_end,\n-                        kind: StatementKind::FakeRead(FakeReadCause::ForGuardBinding, box(place)),\n-                    },\n-                );\n+                let cause = FakeReadCause::ForGuardBinding;\n+                self.cfg.push_fake_read(post_guard_block, guard_end, cause, Place::from(local_id));\n             }\n             self.bind_matched_candidate_for_arm_body(\n                 post_guard_block,"}]}