{"sha": "92e6c53a2568417495db00fcfc9cb1677bbd105d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyZTZjNTNhMjU2ODQxNzQ5NWRiMDBmY2ZjOWNiMTY3N2JiZDEwNWQ=", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2016-12-07T15:28:45Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2016-12-30T14:17:28Z"}, "message": "libcompiler_builtins: don't codegen dead code call to eh_personality\n\nThere was a linker error on 32 bit platforms with optimisations turned off,\ncomplaining that there was an undefined reference to \"rust_eh_personality\",\nwhen compiling the rustc_const_math as stage1 artifact.\n\nApparently the compiler_builtins crate includes a call to \"rust_eh_personality\".\nIf compiled for 64 bits, this call doesn't appear, which explains why the linker\nerror only happens on 32 bit platforms, and optimisations will get it removed\non 32 bit as well.\n\nThere were two origins of the call:\n    1. A for loop where apparently the compiler wasn't sure\n       whether next() could panic or not, and therefore generated a landing\n       pad for the worst case. The minimal reproducible example is \"for _ in 0..sr { }\".\n    2. A default impl of uabs where the compiler apparently wasn't sure either\n       whether iabs() could panic or not. Many thanks to nagisa for\n       contributing the fix.\n\nThis commit also puts extern \"C\" to the intrinsics, as this is generally a\ngood thing to do.", "tree": {"sha": "33dc6a5db8a75b6f792d3acd302296565e068f55", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33dc6a5db8a75b6f792d3acd302296565e068f55"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/92e6c53a2568417495db00fcfc9cb1677bbd105d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/92e6c53a2568417495db00fcfc9cb1677bbd105d", "html_url": "https://github.com/rust-lang/rust/commit/92e6c53a2568417495db00fcfc9cb1677bbd105d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/92e6c53a2568417495db00fcfc9cb1677bbd105d/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e2046214ca7054bb438259c0287568976323040", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e2046214ca7054bb438259c0287568976323040", "html_url": "https://github.com/rust-lang/rust/commit/3e2046214ca7054bb438259c0287568976323040"}], "stats": {"total": 55, "additions": 31, "deletions": 24}, "files": [{"sha": "677a6e9456807f9451d35e1597d60f0de8bcd8fc", "filename": "src/libcompiler_builtins/lib.rs", "status": "modified", "additions": 31, "deletions": 24, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/92e6c53a2568417495db00fcfc9cb1677bbd105d/src%2Flibcompiler_builtins%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92e6c53a2568417495db00fcfc9cb1677bbd105d/src%2Flibcompiler_builtins%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcompiler_builtins%2Flib.rs?ref=92e6c53a2568417495db00fcfc9cb1677bbd105d", "patch": "@@ -66,7 +66,7 @@ pub mod reimpls {\n     }\n \n     #[export_name=\"__ashlti3\"]\n-    pub extern fn shl(a: u128_, b: u128_) -> u128_ {\n+    pub extern \"C\" fn shl(a: u128_, b: u128_) -> u128_ {\n         ashl!(a, b, u128_)\n     }\n \n@@ -89,7 +89,7 @@ pub mod reimpls {\n     }\n \n     #[export_name=\"__ashrti3\"]\n-    pub extern fn shr(a: i128_, b: i128_) -> i128_ {\n+    pub extern \"C\" fn shr(a: i128_, b: i128_) -> i128_ {\n         ashr!(a, b, i128_)\n     }\n \n@@ -110,13 +110,13 @@ pub mod reimpls {\n \n \n     #[export_name=\"__lshrti3\"]\n-    pub extern fn lshr(a: u128_, b: u128_) -> u128_ {\n+    pub extern \"C\" fn lshr(a: u128_, b: u128_) -> u128_ {\n         lshr!(a, b, u128_)\n     }\n \n     #[cfg(stage0)]\n     #[export_name=\"__udivmodti4\"]\n-    pub extern fn u128_div_mod(n: u128_, d: u128_, rem: *mut u128_) -> u128_ {\n+    pub extern \"C\" fn u128_div_mod(n: u128_, d: u128_, rem: *mut u128_) -> u128_ {\n         unsafe {\n         if !rem.is_null() {\n             *rem = unchecked_rem(n, d);\n@@ -127,7 +127,7 @@ pub mod reimpls {\n \n     #[cfg(not(stage0))]\n     #[export_name=\"__udivmodti4\"]\n-    pub extern fn u128_div_mod(n: u128_, d: u128_, rem: *mut u128_) -> u128_ {\n+    pub extern \"C\" fn u128_div_mod(n: u128_, d: u128_, rem: *mut u128_) -> u128_ {\n         // Translated from Figure 3-40 of The PowerPC Compiler Writer's Guide\n         unsafe {\n         // special cases, X is unknown, K != 0\n@@ -261,7 +261,12 @@ pub mod reimpls {\n         // 1 <= sr <= u64::bits() - 1\n         let mut carry = 0;\n \n-        for _ in 0..sr {\n+        // FIXME: replace this with a for loop\n+        // (atm not doable as this generates call to\n+        // eh_personality when optimisations are turned off,\n+        // which in turn gives a linker error in later\n+        // compilation steps)\n+        while sr > 0 {\n             // r:q = ((r:q) << 1) | carry\n             r = (r << 1) | (q >> (128 - 1));\n             q = (q << 1) | carry as u128;\n@@ -274,6 +279,7 @@ pub mod reimpls {\n             let s = (d.wrapping_sub(r).wrapping_sub(1)) as i128 >> (128 - 1);\n             carry = (s & 1) as u64;\n             r -= d & s as u128;\n+            sr -= 1;\n         }\n \n         if !rem.is_null() {\n@@ -284,7 +290,7 @@ pub mod reimpls {\n     }\n \n     #[export_name=\"__umodti3\"]\n-    pub extern fn u128_mod(a: u128_, b: u128_) -> u128_ {\n+    pub extern \"C\" fn u128_mod(a: u128_, b: u128_) -> u128_ {\n         unsafe {\n             let mut r = ::core::mem::zeroed();\n             u128_div_mod(a, b, &mut r);\n@@ -293,7 +299,7 @@ pub mod reimpls {\n     }\n \n     #[export_name=\"__modti3\"]\n-    pub extern fn i128_mod(a: i128_, b: i128_) -> i128_ {\n+    pub extern \"C\" fn i128_mod(a: i128_, b: i128_) -> i128_ {\n         let b = b.uabs();\n         let sa = a.signum();\n         let a = a.uabs();\n@@ -305,7 +311,7 @@ pub mod reimpls {\n     }\n \n     #[export_name=\"__divti3\"]\n-    pub extern fn i128_div(a: i128_, b: i128_) -> i128_ {\n+    pub extern \"C\" fn i128_div(a: i128_, b: i128_) -> i128_ {\n         let sa = a.signum();\n         let sb = b.signum();\n         let a = a.uabs();\n@@ -319,7 +325,7 @@ pub mod reimpls {\n     }\n \n     #[export_name=\"__udivti3\"]\n-    pub extern fn u128_div(a: u128_, b: u128_) -> u128_ {\n+    pub extern \"C\" fn u128_div(a: u128_, b: u128_) -> u128_ {\n         u128_div_mod(a, b, ptr::null_mut())\n     }\n \n@@ -365,7 +371,7 @@ pub mod reimpls {\n \n     // FIXME: i32 here should be c_int.\n     #[export_name=\"__muloti4\"]\n-    pub extern fn i128_mul_oflow(a: i128_, b: i128_, o: &mut i32) -> i128_ {\n+    pub extern \"C\" fn i128_mul_oflow(a: i128_, b: i128_, o: &mut i32) -> i128_ {\n         mulo!(a, b, o, i128_)\n     }\n \n@@ -465,24 +471,25 @@ pub mod reimpls {\n \n     #[cfg(stage0)]\n     #[export_name=\"__multi3\"]\n-    pub extern fn u128_mul(a: i128_, b: i128_) -> i128_ {\n+    pub extern \"C\" fn u128_mul(a: i128_, b: i128_) -> i128_ {\n         (a as i64 * b as i64) as i128_\n     }\n \n     #[cfg(not(stage0))]\n     #[export_name=\"__multi3\"]\n-    pub extern fn u128_mul(a: i128_, b: i128_) -> i128_ {\n+    pub extern \"C\" fn u128_mul(a: i128_, b: i128_) -> i128_ {\n         mul!(a, b, i128_, i64)\n     }\n \n     trait AbsExt: Sized {\n-        fn uabs(self) -> u128_ {\n-            self.iabs() as u128_\n-        }\n+        fn uabs(self) -> u128_;\n         fn iabs(self) -> i128_;\n     }\n \n     impl AbsExt for i128_ {\n+        fn uabs(self) -> u128_ {\n+            self.iabs() as u128_\n+        }\n         fn iabs(self) -> i128_ {\n             ((self ^ self).wrapping_sub(self))\n         }\n@@ -550,12 +557,12 @@ pub mod reimpls {\n     }\n \n     #[export_name=\"__fixunsdfti\"]\n-    pub extern fn f64_as_u128(a: f64) -> u128_ {\n+    pub extern \"C\" fn f64_as_u128(a: f64) -> u128_ {\n         float_as_unsigned!(a, f64, u128_)\n     }\n \n     #[export_name=\"__fixunssfti\"]\n-    pub extern fn f32_as_u128(a: f32) -> u128_ {\n+    pub extern \"C\" fn f32_as_u128(a: f32) -> u128_ {\n         float_as_unsigned!(a, f32, u128_)\n     }\n \n@@ -582,17 +589,17 @@ pub mod reimpls {\n     }\n \n     #[export_name=\"__fixdfti\"]\n-    pub extern fn f64_as_i128(a: f64) -> i128_ {\n+    pub extern \"C\" fn f64_as_i128(a: f64) -> i128_ {\n         float_as_signed!(a, f64, i128_)\n     }\n \n     #[export_name=\"__fixsfti\"]\n-    pub extern fn f32_as_i128(a: f32) -> i128_ {\n+    pub extern \"C\" fn f32_as_i128(a: f32) -> i128_ {\n         float_as_signed!(a, f32, i128_)\n     }\n \n     #[export_name=\"__floattidf\"]\n-    pub extern fn i128_as_f64(a: i128_) -> f64 {\n+    pub extern \"C\" fn i128_as_f64(a: i128_) -> f64 {\n         match a.signum() {\n             1 => u128_as_f64(a.uabs()),\n             0 => 0.0,\n@@ -602,7 +609,7 @@ pub mod reimpls {\n     }\n \n     #[export_name=\"__floattisf\"]\n-    pub extern fn i128_as_f32(a: i128_) -> f32 {\n+    pub extern \"C\" fn i128_as_f32(a: i128_) -> f32 {\n         match a.signum() {\n             1 => u128_as_f32(a.uabs()),\n             0 => 0.0,\n@@ -612,7 +619,7 @@ pub mod reimpls {\n     }\n \n     #[export_name=\"__floatuntidf\"]\n-    pub extern fn u128_as_f64(mut a: u128_) -> f64 {\n+    pub extern \"C\" fn u128_as_f64(mut a: u128_) -> f64 {\n         use ::core::f64::MANTISSA_DIGITS;\n         if a == 0 { return 0.0; }\n         let sd = 128 - a.leading_zeros();\n@@ -643,7 +650,7 @@ pub mod reimpls {\n     }\n \n     #[export_name=\"__floatuntisf\"]\n-    pub extern fn u128_as_f32(mut a: u128_) -> f32 {\n+    pub extern \"C\" fn u128_as_f32(mut a: u128_) -> f32 {\n         use ::core::f32::MANTISSA_DIGITS;\n         if a == 0 { return 0.0; }\n         let sd = 128 - a.leading_zeros();"}]}