{"sha": "da9c6d9ba6982d3027e81663fd1daabc8da567a8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhOWM2ZDliYTY5ODJkMzAyN2U4MTY2M2ZkMWRhYWJjOGRhNTY3YTg=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-03-14T18:22:14Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-03-14T18:22:14Z"}, "message": "test: Remove deprecated features from benchmark tests. rs=burningtree", "tree": {"sha": "378887c0a06c3d1231e1d643881446a0fd0caa07", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/378887c0a06c3d1231e1d643881446a0fd0caa07"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da9c6d9ba6982d3027e81663fd1daabc8da567a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da9c6d9ba6982d3027e81663fd1daabc8da567a8", "html_url": "https://github.com/rust-lang/rust/commit/da9c6d9ba6982d3027e81663fd1daabc8da567a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da9c6d9ba6982d3027e81663fd1daabc8da567a8/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c8490b0d9efa58d9e0ed0949c3f74ed9a3dc703", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c8490b0d9efa58d9e0ed0949c3f74ed9a3dc703", "html_url": "https://github.com/rust-lang/rust/commit/1c8490b0d9efa58d9e0ed0949c3f74ed9a3dc703"}], "stats": {"total": 22, "additions": 15, "deletions": 7}, "files": [{"sha": "eecf509998b589a4e38c78a31b31936769af45cd", "filename": "src/test/bench/core-std.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da9c6d9ba6982d3027e81663fd1daabc8da567a8/src%2Ftest%2Fbench%2Fcore-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da9c6d9ba6982d3027e81663fd1daabc8da567a8/src%2Ftest%2Fbench%2Fcore-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-std.rs?ref=da9c6d9ba6982d3027e81663fd1daabc8da567a8", "patch": "@@ -17,6 +17,7 @@ use std::oldmap;\n use std::oldmap::{Map, HashMap};\n \n use core::io::{Reader, ReaderUtil};\n+use core::rand::RngUtil;\n \n macro_rules! bench (\n     ($id:ident) => (maybe_run_test(argv, stringify!($id).to_owned(), $id))"}, {"sha": "b99dfa8bacbc4b9ff1703d459923b8da90b14ece", "filename": "src/test/bench/graph500-bfs.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/da9c6d9ba6982d3027e81663fd1daabc8da567a8/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da9c6d9ba6982d3027e81663fd1daabc8da567a8/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fgraph500-bfs.rs?ref=da9c6d9ba6982d3027e81663fd1daabc8da567a8", "patch": "@@ -29,6 +29,7 @@ use std::deque::Deque;\n use std::par;\n use core::io::WriterUtil;\n use core::int::abs;\n+use core::rand::RngUtil;\n \n type node_id = i64;\n type graph = ~[~[node_id]];\n@@ -37,7 +38,7 @@ type bfs_result = ~[node_id];\n fn make_edges(scale: uint, edgefactor: uint) -> ~[(node_id, node_id)] {\n     let r = rand::xorshift();\n \n-    fn choose_edge(i: node_id, j: node_id, scale: uint, r: rand::Rng)\n+    fn choose_edge(i: node_id, j: node_id, scale: uint, r: @rand::Rng)\n         -> (node_id, node_id) {\n \n         let A = 0.57;"}, {"sha": "7993822afd8778d7001c60c9009ad50da6e6fb10", "filename": "src/test/bench/noise.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da9c6d9ba6982d3027e81663fd1daabc8da567a8/src%2Ftest%2Fbench%2Fnoise.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da9c6d9ba6982d3027e81663fd1daabc8da567a8/src%2Ftest%2Fbench%2Fnoise.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fnoise.rs?ref=da9c6d9ba6982d3027e81663fd1daabc8da567a8", "patch": "@@ -1,5 +1,7 @@\n // Perlin noise benchmark from https://gist.github.com/1170424\n \n+use core::rand::RngUtil;\n+\n struct Vec2 {\n     x: f32,\n     y: f32,\n@@ -8,7 +10,7 @@ struct Vec2 {\n fn lerp(a: f32, b: f32, v: f32) -> f32  { a * (1.0 - v) + b * v }\n fn smooth(v: f32) -> f32                { v * v * (3.0 - 2.0 * v) }\n \n-fn random_gradient(r: rand::Rng) -> Vec2 {\n+fn random_gradient(r: @rand::Rng) -> Vec2 {\n     let v = r.gen_float() * float::consts::pi * 2.0;\n     Vec2{\n         x: float::cos(v) as f32,"}, {"sha": "8c371150e1ea2f1c5c7f6a242fa889740af06918", "filename": "src/test/bench/shootout-fasta.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/da9c6d9ba6982d3027e81663fd1daabc8da567a8/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da9c6d9ba6982d3027e81663fd1daabc8da567a8/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fasta.rs?ref=da9c6d9ba6982d3027e81663fd1daabc8da567a8", "patch": "@@ -57,7 +57,11 @@ fn select_random(r: u32, genelist: ~[AminoAcids]) -> char {\n     return bisect(copy genelist, 0, vec::len::<AminoAcids>(genelist) - 1, r);\n }\n \n-fn make_random_fasta(wr: io::Writer, id: ~str, desc: ~str, genelist: ~[AminoAcids], n: int) {\n+fn make_random_fasta(wr: @io::Writer,\n+                     id: ~str,\n+                     desc: ~str,\n+                     genelist: ~[AminoAcids],\n+                     n: int) {\n     wr.write_line(~\">\" + id + ~\" \" + desc);\n     let rng = @mut MyRandom {last: rand::Rng().next()};\n     let mut op: ~str = ~\"\";\n@@ -72,7 +76,7 @@ fn make_random_fasta(wr: io::Writer, id: ~str, desc: ~str, genelist: ~[AminoAcid\n     if str::len(op) > 0u { wr.write_line(op); }\n }\n \n-fn make_repeat_fasta(wr: io::Writer, id: ~str, desc: ~str, s: ~str, n: int) {\n+fn make_repeat_fasta(wr: @io::Writer, id: ~str, desc: ~str, s: ~str, n: int) {\n     unsafe {\n         wr.write_line(~\">\" + id + ~\" \" + desc);\n         let mut op: ~str = ~\"\";"}, {"sha": "eeea62d50fb3a9db14e8b9f9a070a045d921c0ca", "filename": "src/test/bench/shootout-mandelbrot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da9c6d9ba6982d3027e81663fd1daabc8da567a8/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da9c6d9ba6982d3027e81663fd1daabc8da567a8/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs?ref=da9c6d9ba6982d3027e81663fd1daabc8da567a8", "patch": "@@ -110,7 +110,7 @@ impl io::Writer for Devnull {\n \n fn writer(path: ~str, pport: comm::Port<Line>, size: uint)\n {\n-    let cout: io::Writer = match path {\n+    let cout: @io::Writer = match path {\n         ~\"\" => {\n             @Devnull as @io::Writer\n         }"}, {"sha": "e2edb1a94ea29308f7f7fb44f5f9426becf265fd", "filename": "src/test/bench/sudoku.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da9c6d9ba6982d3027e81663fd1daabc8da567a8/src%2Ftest%2Fbench%2Fsudoku.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da9c6d9ba6982d3027e81663fd1daabc8da567a8/src%2Ftest%2Fbench%2Fsudoku.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fsudoku.rs?ref=da9c6d9ba6982d3027e81663fd1daabc8da567a8", "patch": "@@ -39,7 +39,7 @@ type grid = ~[~[u8]];\n pub enum grid_t { grid_ctor(grid), }\n \n // read a sudoku problem from file f\n-pub fn read_grid(f: io::Reader) -> grid_t {\n+pub fn read_grid(f: @io::Reader) -> grid_t {\n     fail_unless!(f.read_line() == ~\"9,9\"); /* assert first line is exactly \"9,9\" */\n \n     let mut g = vec::from_fn(10u, {|_i|\n@@ -127,7 +127,7 @@ pub fn solve_grid(g: grid_t) {\n     }\n }\n \n-pub fn write_grid(f: io::Writer, g: grid_t) {\n+pub fn write_grid(f: @io::Writer, g: grid_t) {\n     for u8::range(0u8, 9u8) |row| {\n         f.write_str(fmt!(\"%u\", (*g)[row][0] as uint));\n         for u8::range(1u8, 9u8) |col| {"}]}