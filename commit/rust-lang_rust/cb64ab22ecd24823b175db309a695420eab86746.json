{"sha": "cb64ab22ecd24823b175db309a695420eab86746", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiNjRhYjIyZWNkMjQ4MjNiMTc1ZGIzMDlhNjk1NDIwZWFiODY3NDY=", "commit": {"author": {"name": "Jan Likar", "email": "likar.jan@gmail.com", "date": "2015-11-13T00:13:25Z"}, "committer": {"name": "Jan Likar", "email": "likar.jan@gmail.com", "date": "2015-11-13T00:32:22Z"}, "message": "Enable rustfmt to format a list of files\n\nFix #580 by allowing rustfmt to accept a list of files. This also\nenables usage of shell wildcard expansion, although notably this does\nnot work with cmd.exe on Windows. For example: 'rustfmt *.rs' will\nformat all rust files in the current working directory.\n\n  - Change usage text to show rustfmt will accept a list of files\n  - Change \"Using rustfmt config file: {}\" message to\n    \"Using rustfmt config file {} for {}\"\n  - Change Operation::Format(PathBuf, WriteMode) to\n    Operation::Format(Vec<PathBuf>, WriteMode)\n  - Loop through Vec<PathBuf>, load config and call 'run' for each path", "tree": {"sha": "1ef80f2873dae3ba00e75a9ffb2a6ed009c42eed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ef80f2873dae3ba00e75a9ffb2a6ed009c42eed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb64ab22ecd24823b175db309a695420eab86746", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb64ab22ecd24823b175db309a695420eab86746", "html_url": "https://github.com/rust-lang/rust/commit/cb64ab22ecd24823b175db309a695420eab86746", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb64ab22ecd24823b175db309a695420eab86746/comments", "author": {"login": "JanLikar", "id": 4228250, "node_id": "MDQ6VXNlcjQyMjgyNTA=", "avatar_url": "https://avatars.githubusercontent.com/u/4228250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JanLikar", "html_url": "https://github.com/JanLikar", "followers_url": "https://api.github.com/users/JanLikar/followers", "following_url": "https://api.github.com/users/JanLikar/following{/other_user}", "gists_url": "https://api.github.com/users/JanLikar/gists{/gist_id}", "starred_url": "https://api.github.com/users/JanLikar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JanLikar/subscriptions", "organizations_url": "https://api.github.com/users/JanLikar/orgs", "repos_url": "https://api.github.com/users/JanLikar/repos", "events_url": "https://api.github.com/users/JanLikar/events{/privacy}", "received_events_url": "https://api.github.com/users/JanLikar/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JanLikar", "id": 4228250, "node_id": "MDQ6VXNlcjQyMjgyNTA=", "avatar_url": "https://avatars.githubusercontent.com/u/4228250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JanLikar", "html_url": "https://github.com/JanLikar", "followers_url": "https://api.github.com/users/JanLikar/followers", "following_url": "https://api.github.com/users/JanLikar/following{/other_user}", "gists_url": "https://api.github.com/users/JanLikar/gists{/gist_id}", "starred_url": "https://api.github.com/users/JanLikar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JanLikar/subscriptions", "organizations_url": "https://api.github.com/users/JanLikar/orgs", "repos_url": "https://api.github.com/users/JanLikar/repos", "events_url": "https://api.github.com/users/JanLikar/events{/privacy}", "received_events_url": "https://api.github.com/users/JanLikar/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eed83e48341d2105c0fdda46d1ccc88719489d36", "url": "https://api.github.com/repos/rust-lang/rust/commits/eed83e48341d2105c0fdda46d1ccc88719489d36", "html_url": "https://github.com/rust-lang/rust/commit/eed83e48341d2105c0fdda46d1ccc88719489d36"}], "stats": {"total": 38, "additions": 24, "deletions": 14}, "files": [{"sha": "d9f4d46ec30a509a60d6901a189014997300056f", "filename": "src/bin/rustfmt.rs", "status": "modified", "additions": 24, "deletions": 14, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/cb64ab22ecd24823b175db309a695420eab86746/src%2Fbin%2Frustfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb64ab22ecd24823b175db309a695420eab86746/src%2Fbin%2Frustfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Frustfmt.rs?ref=cb64ab22ecd24823b175db309a695420eab86746", "patch": "@@ -29,8 +29,8 @@ use getopts::Options;\n \n /// Rustfmt operations.\n enum Operation {\n-    /// Format a file and its child modules.\n-    Format(PathBuf, WriteMode),\n+    /// Format files and its child modules.\n+    Format(Vec<PathBuf>, WriteMode),\n     /// Print the help message.\n     Help,\n     /// Print detailed configuration help.\n@@ -114,16 +114,20 @@ fn execute() -> i32 {\n             run_from_stdin(input, write_mode, &config);\n             0\n         }\n-        Operation::Format(file, write_mode) => {\n-            let config = match lookup_and_read_project_file(&file) {\n-                Ok((path, toml)) => {\n-                    println!(\"Using rustfmt config file: {}\", path.display());\n-                    Config::from_toml(&toml)\n-                }\n-                Err(_) => Default::default(),\n-            };\n-\n-            run(&file, write_mode, &config);\n+        Operation::Format(files, write_mode) => {\n+            for file in files {\n+                let config = match lookup_and_read_project_file(&file) {\n+                    Ok((path, toml)) => {\n+                        println!(\"Using rustfmt config file {} for {}\",\n+                                 path.display(),\n+                                 file.display());\n+                        Config::from_toml(&toml)\n+                    }\n+                    Err(_) => Default::default(),\n+                };\n+\n+                run(&file, write_mode, &config);\n+            }\n             0\n         }\n     }\n@@ -144,7 +148,7 @@ fn main() {\n }\n \n fn print_usage(opts: &Options, reason: &str) {\n-    let reason = format!(\"{}\\nusage: {} [options] <file>\",\n+    let reason = format!(\"{}\\nusage: {} [options] <file>...\",\n                          reason,\n                          env::current_exe().unwrap().display());\n     println!(\"{}\", opts.usage(&reason));\n@@ -189,5 +193,11 @@ fn determine_operation<I>(opts: &Options, args: I) -> Operation\n         None => WriteMode::Replace,\n     };\n \n-    Operation::Format(PathBuf::from(&matches.free[0]), write_mode)\n+    let mut files = Vec::with_capacity(matches.free.len());\n+\n+    for arg in matches.free {\n+        files.push(PathBuf::from(arg));\n+    }\n+\n+    Operation::Format(files, write_mode)\n }"}]}