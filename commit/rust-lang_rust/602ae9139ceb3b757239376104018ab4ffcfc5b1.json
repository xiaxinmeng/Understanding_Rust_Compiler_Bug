{"sha": "602ae9139ceb3b757239376104018ab4ffcfc5b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwMmFlOTEzOWNlYjNiNzU3MjM5Mzc2MTA0MDE4YWI0ZmZjZmM1YjE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2011-10-27T00:09:07Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-11-02T21:14:19Z"}, "message": "convert various ints to i32 and vice versa", "tree": {"sha": "36e3325d21b964ac48263f13dfdba46abe6206e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36e3325d21b964ac48263f13dfdba46abe6206e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/602ae9139ceb3b757239376104018ab4ffcfc5b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/602ae9139ceb3b757239376104018ab4ffcfc5b1", "html_url": "https://github.com/rust-lang/rust/commit/602ae9139ceb3b757239376104018ab4ffcfc5b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/602ae9139ceb3b757239376104018ab4ffcfc5b1/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4bd05e5be2e28e8afcb42db1fe3fd5cbba7ad56b", "url": "https://api.github.com/repos/rust-lang/rust/commits/4bd05e5be2e28e8afcb42db1fe3fd5cbba7ad56b", "html_url": "https://github.com/rust-lang/rust/commit/4bd05e5be2e28e8afcb42db1fe3fd5cbba7ad56b"}], "stats": {"total": 44, "additions": 22, "deletions": 22}, "files": [{"sha": "ebb4d3d0aa0a7ad3ffafbb3f5e21a06a23b595dc", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/602ae9139ceb3b757239376104018ab4ffcfc5b1/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/602ae9139ceb3b757239376104018ab4ffcfc5b1/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=602ae9139ceb3b757239376104018ab4ffcfc5b1", "patch": "@@ -935,20 +935,15 @@ fn trans_stack_local_derived_tydesc(cx: @block_ctxt, llsz: ValueRef,\n     // Store a pointer to the rest of the descriptors.\n     let ccx = bcx_ccx(cx);\n     store_inbounds(cx, llfirstparam, llmyroottydesc,\n-                   [C_int(ccx, 0),\n-                    C_int(ccx, abi::tydesc_field_first_param)]);\n+                   [0, abi::tydesc_field_first_param]);\n     store_inbounds(cx, C_uint(ccx, n_params), llmyroottydesc,\n-                   [C_int(ccx, 0),\n-                    C_int(ccx, abi::tydesc_field_n_params)]);\n+                   [0, abi::tydesc_field_n_params]);\n     store_inbounds(cx, llsz, llmyroottydesc,\n-                   [C_int(ccx, 0),\n-                    C_int(ccx, abi::tydesc_field_size)]);\n+                   [0, abi::tydesc_field_size]);\n     store_inbounds(cx, llalign, llmyroottydesc,\n-                   [C_int(ccx, 0),\n-                    C_int(ccx, abi::tydesc_field_align)]);\n+                   [0, abi::tydesc_field_align]);\n     store_inbounds(cx, C_uint(ccx, obj_params), llmyroottydesc,\n-                   [C_int(ccx, 0),\n-                    C_int(ccx, abi::tydesc_field_obj_params)]);\n+                   [0, abi::tydesc_field_obj_params]);\n     ret llmyroottydesc;\n }\n \n@@ -1618,8 +1613,8 @@ fn load_inbounds(cx: @block_ctxt, p: ValueRef, idxs: [ValueRef]) -> ValueRef {\n }\n \n fn store_inbounds(cx: @block_ctxt, v: ValueRef, p: ValueRef,\n-                  idxs: [ValueRef]) {\n-    Store(cx, v, InBoundsGEP(cx, p, idxs));\n+                  idxs: [int]) {\n+    Store(cx, v, GEPi(cx, p, idxs));\n }\n \n // Iterates through the elements of a structural type.\n@@ -1975,16 +1970,20 @@ fn call_memmove(cx: @block_ctxt, dst: ValueRef, src: ValueRef,\n     // LLVM complains -- not even a constant element of a tydesc works).\n \n     let ccx = bcx_ccx(cx);\n+    let key = alt ccx.sess.get_targ_cfg().arch {\n+      session::arch_x86. | session::arch_arm. { \"llvm.memmove.p0i8.p0i8.i32\" }\n+      session::arch_x86_64. { \"llvm.memmove.p0i8.p0i8.i64\" }\n+    };\n     let i = ccx.intrinsics;\n-    assert (i.contains_key(\"llvm.memmove.p0i8.p0i8.i32\"));\n-    let memmove = i.get(\"llvm.memmove.p0i8.p0i8.i32\");\n+    assert (i.contains_key(key));\n+    let memmove = i.get(key);\n     let src_ptr = PointerCast(cx, src, T_ptr(T_i8()));\n     let dst_ptr = PointerCast(cx, dst, T_ptr(T_i8()));\n-    let size = IntCast(cx, n_bytes, T_i32());\n-    let align = C_int(ccx, 1);\n+    let size = IntCast(cx, n_bytes, ccx.int_type);\n+    let align = C_i32(1i32);\n     let volatile = C_bool(false);\n-    ret rslt(cx,\n-             Call(cx, memmove, [dst_ptr, src_ptr, size, align, volatile]));\n+    let ret_val = Call(cx, memmove, [dst_ptr, src_ptr, size, align, volatile]);\n+    ret rslt(cx, ret_val);\n }\n \n fn call_bzero(cx: @block_ctxt, dst: ValueRef, n_bytes: ValueRef,\n@@ -3872,8 +3871,7 @@ fn trans_c_stack_native_call(bcx: @block_ctxt, f: @ast::expr,\n     let i = 0u, n = vec::len(llargs);\n     while i < n {\n         let llarg = llargs[i].llval;\n-        store_inbounds(bcx, llarg, llargbundle, [C_int(ccx, 0),\n-                                                 C_uint(ccx, i)]);\n+        store_inbounds(bcx, llarg, llargbundle, [0, i as int]);\n         i += 1u;\n     }\n \n@@ -4408,8 +4406,10 @@ fn trans_log(lvl: int, cx: @block_ctxt, e: @ast::expr) -> @block_ctxt {\n     let llvalptr = r.val;\n     let llval_i8 = PointerCast(log_bcx, llvalptr, T_ptr(T_i8()));\n \n+    // FIXME lvl should not be int, but actually u32,\n+    // and the upcall should take a u32, not an i32\n     Call(log_bcx, ccx.upcalls.log_type,\n-         [lltydesc, llval_i8, C_int(ccx, lvl)]);\n+         [lltydesc, llval_i8, C_i32(lvl as i32)]);\n \n     log_bcx = trans_block_cleanups(log_bcx, log_cx);\n     Br(log_bcx, after_cx.llbb);\n@@ -5206,7 +5206,7 @@ fn trans_res_ctor(cx: @local_ctxt, sp: span, dtor: ast::_fn,\n     check type_is_tup_like(bcx, tup_t);\n     let flag = GEP_tup_like(bcx, tup_t, llretptr, [0, 0]);\n     bcx = flag.bcx;\n-    Store(bcx, C_int(ccx, 1), flag.val);\n+    Store(bcx, C_i32(1), flag.val);\n     build_return(bcx);\n     finish_fn(fcx, lltop);\n }"}]}