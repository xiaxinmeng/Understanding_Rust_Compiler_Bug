{"sha": "082a07695b6472f8b9e3b26925a77865555a9159", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4MmEwNzY5NWI2NDcyZjhiOWUzYjI2OTI1YTc3ODY1NTU1YTkxNTk=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2019-11-07T00:20:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-07T00:20:33Z"}, "message": "Rollup merge of #65794 - Centril:unimpl-internal, r=varkor\n\ngate rustc_on_unimplemented under rustc_attrs\n\nMove `rustc_on_implemented` from the `on_implemented` gate to `rustc_attrs` as it is internal.\n\nCloses #29628\n\nr? @varkor", "tree": {"sha": "f41cbb2722a62ca583eb71eb8f88d51ef806df19", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f41cbb2722a62ca583eb71eb8f88d51ef806df19"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/082a07695b6472f8b9e3b26925a77865555a9159", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdw2NRCRBK7hj4Ov3rIwAAdHIIAHjdbb8yBCvb6QnIE4XHoLc/\npZvNMy8Fdg2cnkCKzkOyyrUlWM4bc39W9qPJ1lJOGB6h/QyqmgA7N5+yzBdL5d2W\nWyz5g/Y1W1x5wGGDomjNLDfhsBf2X3PJ273wP9O2O0VfX/cmMhEBxFyu7150mRyb\nocG9rWgCPU+mAWYNGQJ0dBl5/pkkxgM3HPbkjOgSxKoA8jUDvZjTOgx0rRlsIO5u\nkibm1HhF5dJ7Ne2PD0HbS6ey/X2Yb2gEx/3fXI75CrsgACddkOW8SodyXdw8cBu6\nLgZATHXWyAhbKmQV4hV3SscHRML2UzvJeElY4b5ENvzhIKQPuPTkwAtBDtosnns=\n=OZ7j\n-----END PGP SIGNATURE-----\n", "payload": "tree f41cbb2722a62ca583eb71eb8f88d51ef806df19\nparent 38048763e885a3ee139abf39d59a530b16484150\nparent 1c7595fd0f509637e8da61e3bac425e4f3fd69fa\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1573086033 +0900\ncommitter GitHub <noreply@github.com> 1573086033 +0900\n\nRollup merge of #65794 - Centril:unimpl-internal, r=varkor\n\ngate rustc_on_unimplemented under rustc_attrs\n\nMove `rustc_on_implemented` from the `on_implemented` gate to `rustc_attrs` as it is internal.\n\nCloses #29628\n\nr? @varkor\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/082a07695b6472f8b9e3b26925a77865555a9159", "html_url": "https://github.com/rust-lang/rust/commit/082a07695b6472f8b9e3b26925a77865555a9159", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/082a07695b6472f8b9e3b26925a77865555a9159/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38048763e885a3ee139abf39d59a530b16484150", "url": "https://api.github.com/repos/rust-lang/rust/commits/38048763e885a3ee139abf39d59a530b16484150", "html_url": "https://github.com/rust-lang/rust/commit/38048763e885a3ee139abf39d59a530b16484150"}, {"sha": "1c7595fd0f509637e8da61e3bac425e4f3fd69fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c7595fd0f509637e8da61e3bac425e4f3fd69fa", "html_url": "https://github.com/rust-lang/rust/commit/1c7595fd0f509637e8da61e3bac425e4f3fd69fa"}], "stats": {"total": 224, "additions": 34, "deletions": 190}, "files": [{"sha": "8db241e4b4ebf7f0e67713dc0240b112745a83c0", "filename": "src/doc/unstable-book/src/language-features/on-unimplemented.md", "status": "removed", "additions": 0, "deletions": 154, "changes": 154, "blob_url": "https://github.com/rust-lang/rust/blob/38048763e885a3ee139abf39d59a530b16484150/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fon-unimplemented.md", "raw_url": "https://github.com/rust-lang/rust/raw/38048763e885a3ee139abf39d59a530b16484150/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fon-unimplemented.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fon-unimplemented.md?ref=38048763e885a3ee139abf39d59a530b16484150", "patch": "@@ -1,154 +0,0 @@\n-# `on_unimplemented`\n-\n-The tracking issue for this feature is: [#29628]\n-\n-[#29628]: https://github.com/rust-lang/rust/issues/29628\n-\n-------------------------\n-\n-The `on_unimplemented` feature provides the `#[rustc_on_unimplemented]`\n-attribute, which allows trait definitions to add specialized notes to error\n-messages when an implementation was expected but not found. You can refer\n-to the trait's generic arguments by name and to the resolved type using\n-`Self`.\n-\n-For example:\n-\n-```rust,compile_fail\n-#![feature(on_unimplemented)]\n-\n-#[rustc_on_unimplemented=\"an iterator over elements of type `{A}` \\\n-    cannot be built from a collection of type `{Self}`\"]\n-trait MyIterator<A> {\n-    fn next(&mut self) -> A;\n-}\n-\n-fn iterate_chars<I: MyIterator<char>>(i: I) {\n-    // ...\n-}\n-\n-fn main() {\n-    iterate_chars(&[1, 2, 3][..]);\n-}\n-```\n-\n-When the user compiles this, they will see the following;\n-\n-```txt\n-error[E0277]: the trait bound `&[{integer}]: MyIterator<char>` is not satisfied\n-  --> <anon>:14:5\n-   |\n-14 |     iterate_chars(&[1, 2, 3][..]);\n-   |     ^^^^^^^^^^^^^ an iterator over elements of type `char` cannot be built from a collection of type `&[{integer}]`\n-   |\n-   = help: the trait `MyIterator<char>` is not implemented for `&[{integer}]`\n-   = note: required by `iterate_chars`\n-```\n-\n-`on_unimplemented` also supports advanced filtering for better targeting\n-of messages, as well as modifying specific parts of the error message. You\n-target the text of:\n-\n- - the main error message (`message`)\n- - the label (`label`)\n- - an extra note (`note`)\n-\n-For example, the following attribute\n-\n-```rust,compile_fail\n-#[rustc_on_unimplemented(\n-    message=\"message\",\n-    label=\"label\",\n-    note=\"note\"\n-)]\n-trait MyIterator<A> {\n-    fn next(&mut self) -> A;\n-}\n-```\n-\n-Would generate the following output:\n-\n-```text\n-error[E0277]: message\n-  --> <anon>:14:5\n-   |\n-14 |     iterate_chars(&[1, 2, 3][..]);\n-   |     ^^^^^^^^^^^^^ label\n-   |\n-   = note: note\n-   = help: the trait `MyIterator<char>` is not implemented for `&[{integer}]`\n-   = note: required by `iterate_chars`\n-```\n-\n-To allow more targeted error messages, it is possible to filter the\n-application of these fields based on a variety of attributes when using\n-`on`:\n-\n- - `crate_local`: whether the code causing the trait bound to not be\n-   fulfilled is part of the user's crate. This is used to avoid suggesting\n-   code changes that would require modifying a dependency.\n- - Any of the generic arguments that can be substituted in the text can be\n-   referred by name as well for filtering, like `Rhs=\"i32\"`, except for\n-   `Self`.\n- - `_Self`: to filter only on a particular calculated trait resolution, like\n-   `Self=\"std::iter::Iterator<char>\"`. This is needed because `Self` is a\n-   keyword which cannot appear in attributes.\n- - `direct`: user-specified rather than derived obligation.\n- - `from_method`: usable both as boolean (whether the flag is present, like\n-   `crate_local`) or matching against a particular method. Currently used\n-   for `try`.\n- - `from_desugaring`: usable both as boolean (whether the flag is present)\n-   or matching against a particular desugaring. The desugaring is identified\n-   with its variant name in the `DesugaringKind` enum.\n-\n-For example, the `Iterator` trait can be annotated in the following way:\n-\n-```rust,compile_fail\n-#[rustc_on_unimplemented(\n-    on(\n-        _Self=\"&str\",\n-        note=\"call `.chars()` or `.as_bytes()` on `{Self}\"\n-    ),\n-    message=\"`{Self}` is not an iterator\",\n-    label=\"`{Self}` is not an iterator\",\n-    note=\"maybe try calling `.iter()` or a similar method\"\n-)]\n-pub trait Iterator {}\n-```\n-\n-Which would produce the following outputs:\n-\n-```text\n-error[E0277]: `Foo` is not an iterator\n- --> src/main.rs:4:16\n-  |\n-4 |     for foo in Foo {}\n-  |                ^^^ `Foo` is not an iterator\n-  |\n-  = note: maybe try calling `.iter()` or a similar method\n-  = help: the trait `std::iter::Iterator` is not implemented for `Foo`\n-  = note: required by `std::iter::IntoIterator::into_iter`\n-\n-error[E0277]: `&str` is not an iterator\n- --> src/main.rs:5:16\n-  |\n-5 |     for foo in \"\" {}\n-  |                ^^ `&str` is not an iterator\n-  |\n-  = note: call `.chars()` or `.bytes() on `&str`\n-  = help: the trait `std::iter::Iterator` is not implemented for `&str`\n-  = note: required by `std::iter::IntoIterator::into_iter`\n-```\n-\n-If you need to filter on multiple attributes, you can use `all`, `any` or\n-`not` in the following way:\n-\n-```rust,compile_fail\n-#[rustc_on_unimplemented(\n-    on(\n-        all(_Self=\"&str\", T=\"std::string::String\"),\n-        note=\"you can coerce a `{T}` into a `{Self}` by writing `&*variable`\"\n-    )\n-)]\n-pub trait From<T>: Sized { /* ... */ }\n-```"}, {"sha": "ddfa6797a5754639a94fae573fe72739732781d9", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/082a07695b6472f8b9e3b26925a77865555a9159/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/082a07695b6472f8b9e3b26925a77865555a9159/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=082a07695b6472f8b9e3b26925a77865555a9159", "patch": "@@ -116,7 +116,7 @@\n #![feature(unsize)]\n #![feature(unsized_locals)]\n #![feature(allocator_internals)]\n-#![feature(on_unimplemented)]\n+#![cfg_attr(bootstrap, feature(on_unimplemented))]\n #![feature(rustc_const_unstable)]\n #![feature(slice_partition_dedup)]\n #![feature(maybe_uninit_extra, maybe_uninit_slice)]"}, {"sha": "ca431627147a8a8ff519fdcf4aec0bab2ae66bd7", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/082a07695b6472f8b9e3b26925a77865555a9159/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/082a07695b6472f8b9e3b26925a77865555a9159/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=082a07695b6472f8b9e3b26925a77865555a9159", "patch": "@@ -89,7 +89,7 @@\n #![feature(nll)]\n #![feature(exhaustive_patterns)]\n #![feature(no_core)]\n-#![feature(on_unimplemented)]\n+#![cfg_attr(bootstrap, feature(on_unimplemented))]\n #![feature(optin_builtin_traits)]\n #![feature(prelude_import)]\n #![feature(repr_simd, platform_intrinsics)]"}, {"sha": "18d98efebd42f6878be43612199b84295defee0f", "filename": "src/librustc/error_codes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/082a07695b6472f8b9e3b26925a77865555a9159/src%2Flibrustc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/082a07695b6472f8b9e3b26925a77865555a9159/src%2Flibrustc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ferror_codes.rs?ref=082a07695b6472f8b9e3b26925a77865555a9159", "patch": "@@ -607,7 +607,7 @@ position that needs that trait. For example, when the following code is\n compiled:\n \n ```compile_fail\n-#![feature(on_unimplemented)]\n+#![feature(rustc_attrs)]\n \n fn foo<T: Index<u8>>(x: T){}\n \n@@ -639,7 +639,7 @@ position that needs that trait. For example, when the following code is\n compiled:\n \n ```compile_fail\n-#![feature(on_unimplemented)]\n+#![feature(rustc_attrs)]\n \n fn foo<T: Index<u8>>(x: T){}\n \n@@ -669,7 +669,7 @@ position that needs that trait. For example, when the following code is\n compiled:\n \n ```compile_fail\n-#![feature(on_unimplemented)]\n+#![feature(rustc_attrs)]\n \n fn foo<T: Index<u8>>(x: T){}\n "}, {"sha": "927fd2a6b0bc6f2005dc8cd739124acb8c15505a", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/082a07695b6472f8b9e3b26925a77865555a9159/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/082a07695b6472f8b9e3b26925a77865555a9159/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=082a07695b6472f8b9e3b26925a77865555a9159", "patch": "@@ -284,7 +284,7 @@\n #![feature(never_type)]\n #![feature(nll)]\n #![cfg_attr(bootstrap, feature(non_exhaustive))]\n-#![feature(on_unimplemented)]\n+#![cfg_attr(bootstrap, feature(on_unimplemented))]\n #![feature(optin_builtin_traits)]\n #![feature(panic_info_message)]\n #![feature(panic_internals)]"}, {"sha": "1e77eaaae881d1a029abfc93d49e246989c2f2b5", "filename": "src/libsyntax/feature_gate/active.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/082a07695b6472f8b9e3b26925a77865555a9159/src%2Flibsyntax%2Ffeature_gate%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/082a07695b6472f8b9e3b26925a77865555a9159/src%2Flibsyntax%2Ffeature_gate%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Factive.rs?ref=082a07695b6472f8b9e3b26925a77865555a9159", "patch": "@@ -134,9 +134,6 @@ declare_features! (\n     /// Allows using `rustc_*` attributes (RFC 572).\n     (active, rustc_attrs, \"1.0.0\", Some(29642), None),\n \n-    /// Allows using `#[on_unimplemented(..)]` on traits.\n-    (active, on_unimplemented, \"1.0.0\", Some(29628), None),\n-\n     /// Allows using the `box $expr` syntax.\n     (active, box_syntax, \"1.0.0\", Some(49733), None),\n "}, {"sha": "b32a887c6b2a2e456275b260fbec240f5588f2ac", "filename": "src/libsyntax/feature_gate/builtin_attrs.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/082a07695b6472f8b9e3b26925a77865555a9159/src%2Flibsyntax%2Ffeature_gate%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/082a07695b6472f8b9e3b26925a77865555a9159/src%2Flibsyntax%2Ffeature_gate%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fbuiltin_attrs.rs?ref=082a07695b6472f8b9e3b26925a77865555a9159", "patch": "@@ -166,7 +166,7 @@ macro_rules! experimental {\n }\n \n const IMPL_DETAIL: &str = \"internal implementation detail\";\n-const INTERAL_UNSTABLE: &str = \"this is an internal attribute that will never be stable\";\n+const INTERNAL_UNSTABLE: &str = \"this is an internal attribute that will never be stable\";\n \n pub type BuiltinAttribute = (Symbol, AttributeType, AttributeTemplate, AttributeGate);\n \n@@ -418,14 +418,14 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n         linkage, Whitelisted, template!(NameValueStr: \"external|internal|...\"),\n         \"the `linkage` attribute is experimental and not portable across platforms\",\n     ),\n-    rustc_attr!(rustc_std_internal_symbol, Whitelisted, template!(Word), INTERAL_UNSTABLE),\n+    rustc_attr!(rustc_std_internal_symbol, Whitelisted, template!(Word), INTERNAL_UNSTABLE),\n \n     // ==========================================================================\n     // Internal attributes, Macro related:\n     // ==========================================================================\n \n     rustc_attr!(rustc_builtin_macro, Whitelisted, template!(Word), IMPL_DETAIL),\n-    rustc_attr!(rustc_proc_macro_decls, Normal, template!(Word), INTERAL_UNSTABLE),\n+    rustc_attr!(rustc_proc_macro_decls, Normal, template!(Word), INTERNAL_UNSTABLE),\n     rustc_attr!(\n         rustc_macro_transparency, Whitelisted,\n         template!(NameValueStr: \"transparent|semitransparent|opaque\"),\n@@ -436,25 +436,24 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     // Internal attributes, Diagnostics related:\n     // ==========================================================================\n \n-    gated!(\n+    rustc_attr!(\n         rustc_on_unimplemented, Whitelisted,\n         template!(\n             List: r#\"/*opt*/ message = \"...\", /*opt*/ label = \"...\", /*opt*/ note = \"...\"\"#,\n             NameValueStr: \"message\"\n         ),\n-        on_unimplemented,\n-        experimental!(rustc_on_unimplemented),\n+        INTERNAL_UNSTABLE\n     ),\n     // Whitelists \"identity-like\" conversion methods to suggest on type mismatch.\n-    rustc_attr!(rustc_conversion_suggestion, Whitelisted, template!(Word), INTERAL_UNSTABLE),\n+    rustc_attr!(rustc_conversion_suggestion, Whitelisted, template!(Word), INTERNAL_UNSTABLE),\n \n     // ==========================================================================\n     // Internal attributes, Const related:\n     // ==========================================================================\n \n     rustc_attr!(rustc_promotable, Whitelisted, template!(Word), IMPL_DETAIL),\n     rustc_attr!(rustc_allow_const_fn_ptr, Whitelisted, template!(Word), IMPL_DETAIL),\n-    rustc_attr!(rustc_args_required_const, Whitelisted, template!(List: \"N\"), INTERAL_UNSTABLE),\n+    rustc_attr!(rustc_args_required_const, Whitelisted, template!(List: \"N\"), INTERNAL_UNSTABLE),\n \n     // ==========================================================================\n     // Internal attributes, Layout related:"}, {"sha": "c7b931a6f7021e1fa6c53a8b0071066c830af31b", "filename": "src/libsyntax/feature_gate/removed.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/082a07695b6472f8b9e3b26925a77865555a9159/src%2Flibsyntax%2Ffeature_gate%2Fremoved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/082a07695b6472f8b9e3b26925a77865555a9159/src%2Flibsyntax%2Ffeature_gate%2Fremoved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fremoved.rs?ref=082a07695b6472f8b9e3b26925a77865555a9159", "patch": "@@ -99,6 +99,9 @@ declare_features! (\n     /// + `__register_diagnostic`\n     /// +`__build_diagnostic_array`\n     (removed, rustc_diagnostic_macros, \"1.38.0\", None, None, None),\n+    /// Allows using `#[on_unimplemented(..)]` on traits.\n+    /// (Moved to `rustc_attrs`.)\n+    (removed, on_unimplemented, \"1.40.0\", None, None, None),\n \n     // -------------------------------------------------------------------------\n     // feature-group-end: removed features"}, {"sha": "fa52ca90b105f5a53fdea7ba53d95191399a2faf", "filename": "src/test/incremental/issue-59523-on-implemented-is-not-unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/082a07695b6472f8b9e3b26925a77865555a9159/src%2Ftest%2Fincremental%2Fissue-59523-on-implemented-is-not-unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/082a07695b6472f8b9e3b26925a77865555a9159/src%2Ftest%2Fincremental%2Fissue-59523-on-implemented-is-not-unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fissue-59523-on-implemented-is-not-unused.rs?ref=082a07695b6472f8b9e3b26925a77865555a9159", "patch": "@@ -5,7 +5,7 @@\n // revisions: cfail1 cfail2\n // build-pass (FIXME(62277): could be check-pass?)\n \n-#![feature(on_unimplemented)]\n+#![feature(rustc_attrs)]\n #![deny(unused_attributes)]\n \n #[rustc_on_unimplemented = \"invalid\"]"}, {"sha": "bec1531c5338fbe25aea382d0be356a688bac15b", "filename": "src/test/ui/feature-gates/feature-gate-on-unimplemented.rs", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/38048763e885a3ee139abf39d59a530b16484150/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-on-unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38048763e885a3ee139abf39d59a530b16484150/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-on-unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-on-unimplemented.rs?ref=38048763e885a3ee139abf39d59a530b16484150", "patch": "@@ -1,9 +0,0 @@\n-// Test that `#[rustc_on_unimplemented]` is gated by `on_unimplemented` feature\n-// gate.\n-\n-#[rustc_on_unimplemented = \"test error `{Self}` with `{Bar}`\"]\n-//~^ ERROR the `#[rustc_on_unimplemented]` attribute is an experimental feature\n-trait Foo<Bar>\n-{}\n-\n-fn main() {}"}, {"sha": "f05436b8c048a438f8eedecfd362536b92b10c2f", "filename": "src/test/ui/on-unimplemented/bad-annotation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/082a07695b6472f8b9e3b26925a77865555a9159/src%2Ftest%2Fui%2Fon-unimplemented%2Fbad-annotation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/082a07695b6472f8b9e3b26925a77865555a9159/src%2Ftest%2Fui%2Fon-unimplemented%2Fbad-annotation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fbad-annotation.rs?ref=082a07695b6472f8b9e3b26925a77865555a9159", "patch": "@@ -1,6 +1,6 @@\n // ignore-tidy-linelength\n \n-#![feature(on_unimplemented)]\n+#![feature(rustc_attrs)]\n \n #![allow(unused)]\n "}, {"sha": "77c0ea17269f0e07ee29bff5d4dd8f51c63c370e", "filename": "src/test/ui/on-unimplemented/expected-comma-found-token.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/082a07695b6472f8b9e3b26925a77865555a9159/src%2Ftest%2Fui%2Fon-unimplemented%2Fexpected-comma-found-token.rs", "raw_url": "https://github.com/rust-lang/rust/raw/082a07695b6472f8b9e3b26925a77865555a9159/src%2Ftest%2Fui%2Fon-unimplemented%2Fexpected-comma-found-token.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fexpected-comma-found-token.rs?ref=082a07695b6472f8b9e3b26925a77865555a9159", "patch": "@@ -2,7 +2,7 @@\n // access to the variable, whether that mutable access be used\n // for direct assignment or for taking mutable ref. Issue #6801.\n \n-#![feature(on_unimplemented)]\n+#![feature(rustc_attrs)]\n \n #[rustc_on_unimplemented(\n     message=\"the message\""}, {"sha": "3cc50e3499a09c3f8f36dbfadb887343fe7b6e87", "filename": "src/test/ui/on-unimplemented/feature-gate-on-unimplemented.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/082a07695b6472f8b9e3b26925a77865555a9159/src%2Ftest%2Fui%2Fon-unimplemented%2Ffeature-gate-on-unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/082a07695b6472f8b9e3b26925a77865555a9159/src%2Ftest%2Fui%2Fon-unimplemented%2Ffeature-gate-on-unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Ffeature-gate-on-unimplemented.rs?ref=082a07695b6472f8b9e3b26925a77865555a9159", "patch": "@@ -0,0 +1,8 @@\n+// Test that `#[rustc_on_unimplemented]` is gated by `rustc_attrs` feature gate.\n+\n+#[rustc_on_unimplemented = \"test error `{Self}` with `{Bar}`\"]\n+//~^ ERROR this is an internal attribute that will never be stable\n+trait Foo<Bar>\n+{}\n+\n+fn main() {}"}, {"sha": "ec1eaff52bd7d7fc165f6d81f066ad5dfad1e669", "filename": "src/test/ui/on-unimplemented/feature-gate-on-unimplemented.stderr", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/082a07695b6472f8b9e3b26925a77865555a9159/src%2Ftest%2Fui%2Fon-unimplemented%2Ffeature-gate-on-unimplemented.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/082a07695b6472f8b9e3b26925a77865555a9159/src%2Ftest%2Fui%2Fon-unimplemented%2Ffeature-gate-on-unimplemented.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Ffeature-gate-on-unimplemented.stderr?ref=082a07695b6472f8b9e3b26925a77865555a9159", "patch": "@@ -1,11 +1,11 @@\n-error[E0658]: the `#[rustc_on_unimplemented]` attribute is an experimental feature\n-  --> $DIR/feature-gate-on-unimplemented.rs:4:1\n+error[E0658]: this is an internal attribute that will never be stable\n+  --> $DIR/feature-gate-on-unimplemented.rs:3:1\n    |\n LL | #[rustc_on_unimplemented = \"test error `{Self}` with `{Bar}`\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: for more information, see https://github.com/rust-lang/rust/issues/29628\n-   = help: add `#![feature(on_unimplemented)]` to the crate attributes to enable\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/29642\n+   = help: add `#![feature(rustc_attrs)]` to the crate attributes to enable\n \n error: aborting due to previous error\n ", "previous_filename": "src/test/ui/feature-gates/feature-gate-on-unimplemented.stderr"}, {"sha": "b74957ebcd406b8a9b918de6d0a3443b1a13e798", "filename": "src/test/ui/on-unimplemented/multiple-impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/082a07695b6472f8b9e3b26925a77865555a9159/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/082a07695b6472f8b9e3b26925a77865555a9159/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls.rs?ref=082a07695b6472f8b9e3b26925a77865555a9159", "patch": "@@ -1,6 +1,6 @@\n // Test if the on_unimplemented message override works\n \n-#![feature(on_unimplemented)]\n+#![feature(rustc_attrs)]\n \n \n struct Foo<T>(T);"}, {"sha": "ab3e67d01fe44ea75a5ae75937a88068f2fe95a1", "filename": "src/test/ui/on-unimplemented/on-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/082a07695b6472f8b9e3b26925a77865555a9159/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/082a07695b6472f8b9e3b26925a77865555a9159/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-impl.rs?ref=082a07695b6472f8b9e3b26925a77865555a9159", "patch": "@@ -1,6 +1,6 @@\n // Test if the on_unimplemented message override works\n \n-#![feature(on_unimplemented)]\n+#![feature(rustc_attrs)]\n \n \n #[rustc_on_unimplemented = \"invalid\"]"}, {"sha": "556813cd4795f6e31ed13240e3bbd89b32d85104", "filename": "src/test/ui/on-unimplemented/on-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/082a07695b6472f8b9e3b26925a77865555a9159/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/082a07695b6472f8b9e3b26925a77865555a9159/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-trait.rs?ref=082a07695b6472f8b9e3b26925a77865555a9159", "patch": "@@ -1,6 +1,6 @@\n // ignore-tidy-linelength\n \n-#![feature(on_unimplemented)]\n+#![feature(rustc_attrs)]\n \n pub mod Bar {\n   #[rustc_on_unimplemented = \"test error `{Self}` with `{Bar}` `{Baz}` `{Quux}` in `{Foo}`\"]"}]}