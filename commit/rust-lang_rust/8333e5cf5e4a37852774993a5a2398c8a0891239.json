{"sha": "8333e5cf5e4a37852774993a5a2398c8a0891239", "node_id": "C_kwDOAAsO6NoAKDgzMzNlNWNmNWU0YTM3ODUyNzc0OTkzYTVhMjM5OGM4YTA4OTEyMzk", "commit": {"author": {"name": "Kai Luo", "email": "gluokai@gmail.com", "date": "2023-01-09T15:09:18Z"}, "committer": {"name": "Kai Luo", "email": "gluokai@gmail.com", "date": "2023-01-09T15:09:18Z"}, "message": "Add comments", "tree": {"sha": "b2f1074e479bd9fdc63547f77e133c55040da60d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b2f1074e479bd9fdc63547f77e133c55040da60d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8333e5cf5e4a37852774993a5a2398c8a0891239", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8333e5cf5e4a37852774993a5a2398c8a0891239", "html_url": "https://github.com/rust-lang/rust/commit/8333e5cf5e4a37852774993a5a2398c8a0891239", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8333e5cf5e4a37852774993a5a2398c8a0891239/comments", "author": {"login": "bzEq", "id": 3006405, "node_id": "MDQ6VXNlcjMwMDY0MDU=", "avatar_url": "https://avatars.githubusercontent.com/u/3006405?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bzEq", "html_url": "https://github.com/bzEq", "followers_url": "https://api.github.com/users/bzEq/followers", "following_url": "https://api.github.com/users/bzEq/following{/other_user}", "gists_url": "https://api.github.com/users/bzEq/gists{/gist_id}", "starred_url": "https://api.github.com/users/bzEq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bzEq/subscriptions", "organizations_url": "https://api.github.com/users/bzEq/orgs", "repos_url": "https://api.github.com/users/bzEq/repos", "events_url": "https://api.github.com/users/bzEq/events{/privacy}", "received_events_url": "https://api.github.com/users/bzEq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bzEq", "id": 3006405, "node_id": "MDQ6VXNlcjMwMDY0MDU=", "avatar_url": "https://avatars.githubusercontent.com/u/3006405?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bzEq", "html_url": "https://github.com/bzEq", "followers_url": "https://api.github.com/users/bzEq/followers", "following_url": "https://api.github.com/users/bzEq/following{/other_user}", "gists_url": "https://api.github.com/users/bzEq/gists{/gist_id}", "starred_url": "https://api.github.com/users/bzEq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bzEq/subscriptions", "organizations_url": "https://api.github.com/users/bzEq/orgs", "repos_url": "https://api.github.com/users/bzEq/repos", "events_url": "https://api.github.com/users/bzEq/events{/privacy}", "received_events_url": "https://api.github.com/users/bzEq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04a697502fbb3a69fe5dbeb0b3babf6f1e67711f", "url": "https://api.github.com/repos/rust-lang/rust/commits/04a697502fbb3a69fe5dbeb0b3babf6f1e67711f", "html_url": "https://github.com/rust-lang/rust/commit/04a697502fbb3a69fe5dbeb0b3babf6f1e67711f"}], "stats": {"total": 2, "additions": 2, "deletions": 0}, "files": [{"sha": "4a98c36f42c22d8833b0eeec520ad51800c45213", "filename": "library/std/src/personality/dwarf/eh.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8333e5cf5e4a37852774993a5a2398c8a0891239/library%2Fstd%2Fsrc%2Fpersonality%2Fdwarf%2Feh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8333e5cf5e4a37852774993a5a2398c8a0891239/library%2Fstd%2Fsrc%2Fpersonality%2Fdwarf%2Feh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpersonality%2Fdwarf%2Feh.rs?ref=8333e5cf5e4a37852774993a5a2398c8a0891239", "patch": "@@ -102,6 +102,8 @@ pub unsafe fn find_eh_action(lsda: *const u8, context: &EHContext<'_>) -> Result\n                             (action_table as *mut u8).offset(cs_action_entry as isize - 1);\n                         let mut action_reader = DwarfReader::new(action_record);\n                         let ttype_index = action_reader.read_sleb128();\n+                        // Normally, if ttype_index < 0, meaning the catch type is exception specification.\n+                        // Since we only care about if ttype_index is zero, so casting ttype_index to u64 makes sense.\n                         return Ok(interpret_cs_action(ttype_index as u64, lpad));\n                     }\n                 }"}]}