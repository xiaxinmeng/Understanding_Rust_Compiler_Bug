{"sha": "baba5007bf857b4577a8d26de454a03d7afef3ac", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhYmE1MDA3YmY4NTdiNDU3N2E4ZDI2ZGU0NTRhMDNkN2FmZWYzYWM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-24T03:01:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-24T03:01:11Z"}, "message": "Auto merge of #52655 - kennytm:rollup, r=kennytm\n\nRollup of 10 pull requests\n\nSuccessful merges:\n\n - #52538 (Remove obsolete flags in the i586_musl Dockerfile)\n - #52548 (Cursor: update docs to clarify Cursor only works with in-memory buffers)\n - #52605 (Do not suggest using `to_owned()` on `&str += &str`)\n - #52621 (Fix color detection for Windows msys terminals.)\n - #52622 (Use MultiSpan in E0707 and E709)\n - #52627 (Compile rustc before building tests for rustdoc)\n - #52637 (Don't use NonNull::dangling as sentinel value in Rc, Arc)\n - #52640 (Forget Waker when cloning LocalWaker)\n - #52641 (Simplify 2 functions in rustc_mir/dataflow)\n - #52642 (Replace a few expect+format combos with unwrap_or_else+panic)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "0e552f1865570b25ddabb354b6c6119f8979b866", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e552f1865570b25ddabb354b6c6119f8979b866"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/baba5007bf857b4577a8d26de454a03d7afef3ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/baba5007bf857b4577a8d26de454a03d7afef3ac", "html_url": "https://github.com/rust-lang/rust/commit/baba5007bf857b4577a8d26de454a03d7afef3ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/baba5007bf857b4577a8d26de454a03d7afef3ac/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e842dea7a3d9babc7a19bd201711f4243840fab0", "url": "https://api.github.com/repos/rust-lang/rust/commits/e842dea7a3d9babc7a19bd201711f4243840fab0", "html_url": "https://github.com/rust-lang/rust/commit/e842dea7a3d9babc7a19bd201711f4243840fab0"}, {"sha": "3efc612a930822ea1b9c6749a3d146235c324a83", "url": "https://api.github.com/repos/rust-lang/rust/commits/3efc612a930822ea1b9c6749a3d146235c324a83", "html_url": "https://github.com/rust-lang/rust/commit/3efc612a930822ea1b9c6749a3d146235c324a83"}], "stats": {"total": 194, "additions": 95, "deletions": 99}, "files": [{"sha": "8594e4ff1306d4c3f436b09ba58589eafce4430a", "filename": "src/Cargo.lock", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/baba5007bf857b4577a8d26de454a03d7afef3ac/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/baba5007bf857b4577a8d26de454a03d7afef3ac/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=baba5007bf857b4577a8d26de454a03d7afef3ac", "patch": "@@ -87,7 +87,7 @@ dependencies = [\n \n [[package]]\n name = \"atty\"\n-version = \"0.2.10\"\n+version = \"0.2.11\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"libc 0.2.42 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -187,7 +187,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n name = \"cargo\"\n version = \"0.30.0\"\n dependencies = [\n- \"atty 0.2.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"atty 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"bufstream 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"clap 2.32.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core-foundation 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -303,7 +303,7 @@ version = \"2.32.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"ansi_term 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"atty 0.2.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"atty 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"bitflags 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"strsim 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"textwrap 0.10.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -622,7 +622,7 @@ name = \"env_logger\"\n version = \"0.5.10\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"atty 0.2.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"atty 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"humantime 1.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1844,7 +1844,7 @@ name = \"rustc-ap-rustc_errors\"\n version = \"182.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"atty 0.2.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"atty 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-ap-rustc_data_structures 182.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-ap-serialize 182.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-ap-syntax_pos 182.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -2097,7 +2097,7 @@ dependencies = [\n name = \"rustc_errors\"\n version = \"0.0.0\"\n dependencies = [\n- \"atty 0.2.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"atty 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc_data_structures 0.0.0\",\n  \"serialize 0.0.0\",\n  \"syntax_pos 0.0.0\",\n@@ -3056,7 +3056,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum ansi_term 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ee49baf6cb617b853aa8d93bf420db2383fab46d314482ca2803b40d5fde979b\"\n \"checksum arrayvec 0.4.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a1e964f9e24d588183fcb43503abda40d288c8657dfc27311516ce2f05675aef\"\n \"checksum assert_cli 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"98589b0e465a6c510d95fceebd365bb79bedece7f6e18a480897f2015f85ec51\"\n-\"checksum atty 0.2.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2fc4a1aa4c24c0718a250f0681885c1af91419d242f29eb8f2ab28502d80dbd1\"\n+\"checksum atty 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9a7d5b8723950951411ee34d271d99dddcc2035a16ab25310ea2c8cfd4369652\"\n \"checksum backtrace 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"89a47830402e9981c5c41223151efcced65a0510c13097c769cede7efb34782a\"\n \"checksum backtrace-sys 0.1.23 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bff67d0c06556c0b8e6b5f090f0eac52d950d9dfd1d35ba04e4ca3543eaf6a7e\"\n \"checksum bitflags 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"aad18937a628ec6abcd26d1489012cc0e18c21798210f491af69ded9b881106d\""}, {"sha": "f2b2f6f1eebe1ebe6c86aae1c8b6f46f34fb11aa", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/baba5007bf857b4577a8d26de454a03d7afef3ac/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baba5007bf857b4577a8d26de454a03d7afef3ac/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=baba5007bf857b4577a8d26de454a03d7afef3ac", "patch": "@@ -326,7 +326,7 @@ fn main() {\n             let start = Instant::now();\n             let status = cmd\n                 .status()\n-                .expect(&format!(\"\\n\\n failed to run {:?}\", cmd));\n+                .unwrap_or_else(|_| panic!(\"\\n\\n failed to run {:?}\", cmd));\n             let dur = start.elapsed();\n \n             let is_test = args.iter().any(|a| a == \"--test\");\n@@ -346,7 +346,7 @@ fn main() {\n         }\n     }\n \n-    let code = exec_cmd(&mut cmd).expect(&format!(\"\\n\\n failed to run {:?}\", cmd));\n+    let code = exec_cmd(&mut cmd).unwrap_or_else(|_| panic!(\"\\n\\n failed to run {:?}\", cmd));\n     std::process::exit(code);\n }\n "}, {"sha": "cb28698aa3d6d22b2b7495550a40868c413a90fc", "filename": "src/bootstrap/install.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/baba5007bf857b4577a8d26de454a03d7afef3ac/src%2Fbootstrap%2Finstall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baba5007bf857b4577a8d26de454a03d7afef3ac/src%2Fbootstrap%2Finstall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Finstall.rs?ref=baba5007bf857b4577a8d26de454a03d7afef3ac", "patch": "@@ -75,7 +75,7 @@ fn install_sh(\n     let libdir_default = PathBuf::from(\"lib\");\n     let mandir_default = datadir_default.join(\"man\");\n     let prefix = builder.config.prefix.as_ref().map_or(prefix_default, |p| {\n-        fs::canonicalize(p).expect(&format!(\"could not canonicalize {}\", p.display()))\n+        fs::canonicalize(p).unwrap_or_else(|_| panic!(\"could not canonicalize {}\", p.display()))\n     });\n     let sysconfdir = builder.config.sysconfdir.as_ref().unwrap_or(&sysconfdir_default);\n     let datadir = builder.config.datadir.as_ref().unwrap_or(&datadir_default);"}, {"sha": "639c96bc20810ce2f53b10630c2cf5710f7d6ea7", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/baba5007bf857b4577a8d26de454a03d7afef3ac/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baba5007bf857b4577a8d26de454a03d7afef3ac/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=baba5007bf857b4577a8d26de454a03d7afef3ac", "patch": "@@ -1732,6 +1732,7 @@ impl Step for CrateRustdoc {\n \n         let compiler = builder.compiler(builder.top_stage, self.host);\n         let target = compiler.host;\n+        builder.ensure(compile::Rustc { compiler, target });\n \n         let mut cargo = tool::prepare_tool_cargo(builder,\n                                                  compiler,"}, {"sha": "ba2d32a9296b4e099da0b8660652e79dfd13601f", "filename": "src/ci/docker/dist-i586-gnu-i586-i686-musl/Dockerfile", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/baba5007bf857b4577a8d26de454a03d7afef3ac/src%2Fci%2Fdocker%2Fdist-i586-gnu-i586-i686-musl%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/baba5007bf857b4577a8d26de454a03d7afef3ac/src%2Fci%2Fdocker%2Fdist-i586-gnu-i586-i686-musl%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-i586-gnu-i586-i686-musl%2FDockerfile?ref=baba5007bf857b4577a8d26de454a03d7afef3ac", "patch": "@@ -42,9 +42,7 @@ ENV RUST_CONFIGURE_ARGS \\\n # See: https://github.com/rust-lang/rust/issues/34978\n ENV CFLAGS_i686_unknown_linux_musl=-Wa,-mrelax-relocations=no\n ENV CFLAGS_i586_unknown_linux_gnu=-Wa,-mrelax-relocations=no\n-# FIXME remove -Wl,-melf_i386 after cc is updated to include\n-#       https://github.com/alexcrichton/cc-rs/pull/281\n-ENV CFLAGS_i586_unknown_linux_musl=\"-Wa,-mrelax-relocations=no -Wl,-melf_i386\"\n+ENV CFLAGS_i586_unknown_linux_musl=-Wa,-mrelax-relocations=no\n \n ENV TARGETS=i586-unknown-linux-gnu,i686-unknown-linux-musl\n "}, {"sha": "be049eb6e5ef377a56daff179198e8faa26a0bbe", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/baba5007bf857b4577a8d26de454a03d7afef3ac/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baba5007bf857b4577a8d26de454a03d7afef3ac/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=baba5007bf857b4577a8d26de454a03d7afef3ac", "patch": "@@ -258,6 +258,7 @@ use core::ops::Deref;\n use core::ops::CoerceUnsized;\n use core::ptr::{self, NonNull};\n use core::convert::From;\n+use core::usize;\n \n use alloc::{Global, Alloc, Layout, box_free, handle_alloc_error};\n use string::String;\n@@ -449,6 +450,8 @@ impl<T: ?Sized> Rc<T> {\n     #[stable(feature = \"rc_weak\", since = \"1.4.0\")]\n     pub fn downgrade(this: &Self) -> Weak<T> {\n         this.inc_weak();\n+        // Make sure we do not create a dangling Weak\n+        debug_assert!(!is_dangling(this.ptr));\n         Weak { ptr: this.ptr }\n     }\n \n@@ -1154,8 +1157,9 @@ impl<T> From<Vec<T>> for Rc<[T]> {\n pub struct Weak<T: ?Sized> {\n     // This is a `NonNull` to allow optimizing the size of this type in enums,\n     // but it is not necessarily a valid pointer.\n-    // `Weak::new` sets this to a dangling pointer so that it doesn\u2019t need\n-    // to allocate space on the heap.\n+    // `Weak::new` sets this to `usize::MAX` so that it doesn\u2019t need\n+    // to allocate space on the heap.  That's not a value a real pointer\n+    // will ever have because RcBox has alignment at least 2.\n     ptr: NonNull<RcBox<T>>,\n }\n \n@@ -1185,15 +1189,14 @@ impl<T> Weak<T> {\n     #[stable(feature = \"downgraded_weak\", since = \"1.10.0\")]\n     pub fn new() -> Weak<T> {\n         Weak {\n-            ptr: NonNull::dangling(),\n+            ptr: NonNull::new(usize::MAX as *mut RcBox<T>).expect(\"MAX is not 0\"),\n         }\n     }\n }\n \n pub(crate) fn is_dangling<T: ?Sized>(ptr: NonNull<T>) -> bool {\n     let address = ptr.as_ptr() as *mut () as usize;\n-    let align = align_of_val(unsafe { ptr.as_ref() });\n-    address == align\n+    address == usize::MAX\n }\n \n impl<T: ?Sized> Weak<T> {"}, {"sha": "a00b6b4e435f06e504f6521d4c137e4a9cd38343", "filename": "src/liballoc/sync.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/baba5007bf857b4577a8d26de454a03d7afef3ac/src%2Fliballoc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baba5007bf857b4577a8d26de454a03d7afef3ac/src%2Fliballoc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync.rs?ref=baba5007bf857b4577a8d26de454a03d7afef3ac", "patch": "@@ -238,8 +238,9 @@ impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<Arc<U>> for Arc<T> {}\n pub struct Weak<T: ?Sized> {\n     // This is a `NonNull` to allow optimizing the size of this type in enums,\n     // but it is not necessarily a valid pointer.\n-    // `Weak::new` sets this to a dangling pointer so that it doesn\u2019t need\n-    // to allocate space on the heap.\n+    // `Weak::new` sets this to `usize::MAX` so that it doesn\u2019t need\n+    // to allocate space on the heap.  That's not a value a real pointer\n+    // will ever have because RcBox has alignment at least 2.\n     ptr: NonNull<ArcInner<T>>,\n }\n \n@@ -442,7 +443,11 @@ impl<T: ?Sized> Arc<T> {\n             // synchronize with the write coming from `is_unique`, so that the\n             // events prior to that write happen before this read.\n             match this.inner().weak.compare_exchange_weak(cur, cur + 1, Acquire, Relaxed) {\n-                Ok(_) => return Weak { ptr: this.ptr },\n+                Ok(_) => {\n+                    // Make sure we do not create a dangling Weak\n+                    debug_assert!(!is_dangling(this.ptr));\n+                    return Weak { ptr: this.ptr };\n+                }\n                 Err(old) => cur = old,\n             }\n         }\n@@ -1033,7 +1038,7 @@ impl<T> Weak<T> {\n     #[stable(feature = \"downgraded_weak\", since = \"1.10.0\")]\n     pub fn new() -> Weak<T> {\n         Weak {\n-            ptr: NonNull::dangling(),\n+            ptr: NonNull::new(usize::MAX as *mut ArcInner<T>).expect(\"MAX is not 0\"),\n         }\n     }\n }"}, {"sha": "3b901c9aef0ca95bb5c09a6479c813b993da8083", "filename": "src/libcore/task/wake.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/baba5007bf857b4577a8d26de454a03d7afef3ac/src%2Flibcore%2Ftask%2Fwake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baba5007bf857b4577a8d26de454a03d7afef3ac/src%2Flibcore%2Ftask%2Fwake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fwake.rs?ref=baba5007bf857b4577a8d26de454a03d7afef3ac", "patch": "@@ -12,7 +12,7 @@\n             reason = \"futures in libcore are unstable\",\n             issue = \"50547\")]\n \n-use fmt;\n+use {fmt, mem};\n use marker::Unpin;\n use ptr::NonNull;\n \n@@ -166,9 +166,10 @@ impl From<LocalWaker> for Waker {\n impl Clone for LocalWaker {\n     #[inline]\n     fn clone(&self) -> Self {\n-        unsafe {\n-            LocalWaker { inner: self.inner.as_ref().clone_raw().inner }\n-        }\n+        let waker = unsafe { self.inner.as_ref().clone_raw() };\n+        let inner = waker.inner;\n+        mem::forget(waker);\n+        LocalWaker { inner }\n     }\n }\n "}, {"sha": "3b030fc098f41bbac781414c540b23f81344804d", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/baba5007bf857b4577a8d26de454a03d7afef3ac/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baba5007bf857b4577a8d26de454a03d7afef3ac/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=baba5007bf857b4577a8d26de454a03d7afef3ac", "patch": "@@ -73,7 +73,7 @@ use syntax::tokenstream::{Delimited, TokenStream, TokenTree};\n use syntax::parse::token::Token;\n use syntax::util::small_vector::SmallVector;\n use syntax::visit::{self, Visitor};\n-use syntax_pos::Span;\n+use syntax_pos::{Span, MultiSpan};\n \n const HIR_ID_COUNTER_LOCKED: u32 = 0xFFFFFFFF;\n \n@@ -2071,7 +2071,7 @@ impl<'a> LoweringContext<'a> {\n                         if current_lt_name != name {\n                             struct_span_err!(\n                                 self.context.sess,\n-                                current_lt_span.between(lifetime.span),\n+                                MultiSpan::from_spans(vec![current_lt_span, lifetime.span]),\n                                 E0709,\n                                 \"multiple different lifetimes used in arguments of `async fn`\",\n                             )\n@@ -2083,7 +2083,7 @@ impl<'a> LoweringContext<'a> {\n                         } else if current_lt_name.is_elided() && name.is_elided() {\n                             struct_span_err!(\n                                 self.context.sess,\n-                                current_lt_span.between(lifetime.span),\n+                                MultiSpan::from_spans(vec![current_lt_span, lifetime.span]),\n                                 E0707,\n                                 \"multiple elided lifetimes used in arguments of `async fn`\",\n                             )"}, {"sha": "e73073cfad0c182b25c22deedb89f81e8b938d07", "filename": "src/librustc_codegen_llvm/back/rpath.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/baba5007bf857b4577a8d26de454a03d7afef3ac/src%2Flibrustc_codegen_llvm%2Fback%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baba5007bf857b4577a8d26de454a03d7afef3ac/src%2Flibrustc_codegen_llvm%2Fback%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Frpath.rs?ref=baba5007bf857b4577a8d26de454a03d7afef3ac", "patch": "@@ -114,8 +114,8 @@ fn get_rpath_relative_to_output(config: &mut RPathConfig, lib: &Path) -> String\n     let mut output = cwd.join(&config.out_filename);\n     output.pop();\n     let output = fs::canonicalize(&output).unwrap_or(output);\n-    let relative = path_relative_from(&lib, &output)\n-        .expect(&format!(\"couldn't create relative path from {:?} to {:?}\", output, lib));\n+    let relative = path_relative_from(&lib, &output).unwrap_or_else(||\n+        panic!(\"couldn't create relative path from {:?} to {:?}\", output, lib));\n     // FIXME (#9639): This needs to handle non-utf8 paths\n     format!(\"{}/{}\", prefix,\n             relative.to_str().expect(\"non-utf8 component in path\"))"}, {"sha": "223c04f420f3ff978576cf7f7ad044a4faf9cd37", "filename": "src/librustc_codegen_llvm/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/baba5007bf857b4577a8d26de454a03d7afef3ac/src%2Flibrustc_codegen_llvm%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baba5007bf857b4577a8d26de454a03d7afef3ac/src%2Flibrustc_codegen_llvm%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbase.rs?ref=baba5007bf857b4577a8d26de454a03d7afef3ac", "patch": "@@ -1277,7 +1277,7 @@ pub fn provide(providers: &mut Providers) {\n         all.iter()\n             .find(|cgu| *cgu.name() == name)\n             .cloned()\n-            .expect(&format!(\"failed to find cgu with name {:?}\", name))\n+            .unwrap_or_else(|| panic!(\"failed to find cgu with name {:?}\", name))\n     };\n     providers.compile_codegen_unit = compile_codegen_unit;\n "}, {"sha": "7475b4d82f45207b75cc37db8c8f624c1ac36a79", "filename": "src/librustc_mir/dataflow/graphviz.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/baba5007bf857b4577a8d26de454a03d7afef3ac/src%2Flibrustc_mir%2Fdataflow%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baba5007bf857b4577a8d26de454a03d7afef3ac/src%2Flibrustc_mir%2Fdataflow%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fgraphviz.rs?ref=baba5007bf857b4577a8d26de454a03d7afef3ac", "patch": "@@ -73,8 +73,8 @@ pub type Node = BasicBlock;\n pub struct Edge { source: BasicBlock, index: usize }\n \n fn outgoing(mir: &Mir, bb: BasicBlock) -> Vec<Edge> {\n-    mir[bb].terminator().successors().enumerate()\n-        .map(|(index, _)| Edge { source: bb, index: index}).collect()\n+    (0..mir[bb].terminator().successors().count())\n+        .map(|index| Edge { source: bb, index: index}).collect()\n }\n \n impl<'a, 'tcx, MWF, P> dot::Labeller<'a> for Graph<'a, 'tcx, MWF, P>"}, {"sha": "4227f0bcd362dfcd97912f4a2940e17c654e4faa", "filename": "src/librustc_mir/dataflow/mod.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/baba5007bf857b4577a8d26de454a03d7afef3ac/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baba5007bf857b4577a8d26de454a03d7afef3ac/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs?ref=baba5007bf857b4577a8d26de454a03d7afef3ac", "patch": "@@ -441,23 +441,14 @@ pub struct DataflowState<O: BitDenotation>\n }\n \n impl<O: BitDenotation> DataflowState<O> {\n-    pub fn each_bit<F>(&self, words: &IdxSet<O::Idx>, f: F) where F: FnMut(O::Idx)\n-    {\n-        words.iter().for_each(f)\n-    }\n-\n     pub(crate) fn interpret_set<'c, P>(&self,\n                                        o: &'c O,\n                                        words: &IdxSet<O::Idx>,\n                                        render_idx: &P)\n                                        -> Vec<DebugFormatted>\n         where P: Fn(&O, O::Idx) -> DebugFormatted\n     {\n-        let mut v = Vec::new();\n-        self.each_bit(words, |i| {\n-            v.push(render_idx(o, i));\n-        });\n-        v\n+        words.iter().map(|i| render_idx(o, i)).collect()\n     }\n }\n "}, {"sha": "259311408dece4d32d09eaba4502fc90a64578e1", "filename": "src/librustc_typeck/check/op.rs", "status": "modified", "additions": 36, "deletions": 31, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/baba5007bf857b4577a8d26de454a03d7afef3ac/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baba5007bf857b4577a8d26de454a03d7afef3ac/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fop.rs?ref=baba5007bf857b4577a8d26de454a03d7afef3ac", "patch": "@@ -307,9 +307,9 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                             if let Some(missing_trait) = missing_trait {\n                                 if op.node == hir::BinOpKind::Add &&\n                                     self.check_str_addition(expr, lhs_expr, rhs_expr, lhs_ty,\n-                                                            rhs_ty, &mut err) {\n+                                                            rhs_ty, &mut err, true) {\n                                     // This has nothing here because it means we did string\n-                                    // concatenation (e.g. \"Hello \" + \"World!\"). This means\n+                                    // concatenation (e.g. \"Hello \" += \"World!\"). This means\n                                     // we don't want the note in the else clause to be emitted\n                                 } else if let ty::TyParam(_) = lhs_ty.sty {\n                                     // FIXME: point to span of param\n@@ -381,7 +381,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                             if let Some(missing_trait) = missing_trait {\n                                 if op.node == hir::BinOpKind::Add &&\n                                     self.check_str_addition(expr, lhs_expr, rhs_expr, lhs_ty,\n-                                                            rhs_ty, &mut err) {\n+                                                            rhs_ty, &mut err, false) {\n                                     // This has nothing here because it means we did string\n                                     // concatenation (e.g. \"Hello \" + \"World!\"). This means\n                                     // we don't want the note in the else clause to be emitted\n@@ -410,13 +410,16 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         (lhs_ty, rhs_ty, return_ty)\n     }\n \n-    fn check_str_addition(&self,\n-                          expr: &'gcx hir::Expr,\n-                          lhs_expr: &'gcx hir::Expr,\n-                          rhs_expr: &'gcx hir::Expr,\n-                          lhs_ty: Ty<'tcx>,\n-                          rhs_ty: Ty<'tcx>,\n-                          err: &mut errors::DiagnosticBuilder) -> bool {\n+    fn check_str_addition(\n+        &self,\n+        expr: &'gcx hir::Expr,\n+        lhs_expr: &'gcx hir::Expr,\n+        rhs_expr: &'gcx hir::Expr,\n+        lhs_ty: Ty<'tcx>,\n+        rhs_ty: Ty<'tcx>,\n+        err: &mut errors::DiagnosticBuilder,\n+        is_assign: bool,\n+    ) -> bool {\n         let codemap = self.tcx.sess.codemap();\n         let msg = \"`to_owned()` can be used to create an owned `String` \\\n                    from a string reference. String concatenation \\\n@@ -428,34 +431,36 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         match (&lhs_ty.sty, &rhs_ty.sty) {\n             (&TyRef(_, l_ty, _), &TyRef(_, r_ty, _))\n             if l_ty.sty == TyStr && r_ty.sty == TyStr => {\n-                err.span_label(expr.span,\n-                    \"`+` can't be used to concatenate two `&str` strings\");\n-                match codemap.span_to_snippet(lhs_expr.span) {\n-                    Ok(lstring) => err.span_suggestion(lhs_expr.span,\n-                                                       msg,\n-                                                       format!(\"{}.to_owned()\", lstring)),\n-                    _ => err.help(msg),\n-                };\n+                if !is_assign {\n+                    err.span_label(expr.span,\n+                                   \"`+` can't be used to concatenate two `&str` strings\");\n+                    match codemap.span_to_snippet(lhs_expr.span) {\n+                        Ok(lstring) => err.span_suggestion(lhs_expr.span,\n+                                                           msg,\n+                                                           format!(\"{}.to_owned()\", lstring)),\n+                        _ => err.help(msg),\n+                    };\n+                }\n                 true\n             }\n             (&TyRef(_, l_ty, _), &TyAdt(..))\n             if l_ty.sty == TyStr && &format!(\"{:?}\", rhs_ty) == \"std::string::String\" => {\n                 err.span_label(expr.span,\n                     \"`+` can't be used to concatenate a `&str` with a `String`\");\n-                match codemap.span_to_snippet(lhs_expr.span) {\n-                    Ok(lstring) => err.span_suggestion(lhs_expr.span,\n-                                                       msg,\n-                                                       format!(\"{}.to_owned()\", lstring)),\n-                    _ => err.help(msg),\n-                };\n-                match codemap.span_to_snippet(rhs_expr.span) {\n-                    Ok(rstring) => {\n-                        err.span_suggestion(rhs_expr.span,\n-                                            \"you also need to borrow the `String` on the right to \\\n-                                             get a `&str`\",\n-                                            format!(\"&{}\", rstring));\n+                match (\n+                    codemap.span_to_snippet(lhs_expr.span),\n+                    codemap.span_to_snippet(rhs_expr.span),\n+                    is_assign,\n+                ) {\n+                    (Ok(l), Ok(r), false) => {\n+                        err.multipart_suggestion(msg, vec![\n+                            (lhs_expr.span, format!(\"{}.to_owned()\", l)),\n+                            (rhs_expr.span, format!(\"&{}\", r)),\n+                        ]);\n+                    }\n+                    _ => {\n+                        err.help(msg);\n                     }\n-                    _ => {}\n                 };\n                 true\n             }"}, {"sha": "3622df16b9d0bd46020d49e97dabdb40d6214f0e", "filename": "src/libstd/io/cursor.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/baba5007bf857b4577a8d26de454a03d7afef3ac/src%2Flibstd%2Fio%2Fcursor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baba5007bf857b4577a8d26de454a03d7afef3ac/src%2Flibstd%2Fio%2Fcursor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fcursor.rs?ref=baba5007bf857b4577a8d26de454a03d7afef3ac", "patch": "@@ -14,12 +14,13 @@ use core::convert::TryInto;\n use cmp;\n use io::{self, Initializer, SeekFrom, Error, ErrorKind};\n \n-/// A `Cursor` wraps another type and provides it with a\n+/// A `Cursor` wraps an in-memory buffer and provides it with a\n /// [`Seek`] implementation.\n ///\n-/// `Cursor`s are typically used with in-memory buffers to allow them to\n-/// implement [`Read`] and/or [`Write`], allowing these buffers to be used\n-/// anywhere you might use a reader or writer that does actual I/O.\n+/// `Cursor`s are used with in-memory buffers, anything implementing\n+/// `AsRef<[u8]>`, to allow them to implement [`Read`] and/or [`Write`],\n+/// allowing these buffers to be used anywhere you might use a reader or writer\n+/// that does actual I/O.\n ///\n /// The standard library implements some I/O traits on various types which\n /// are commonly used as a buffer, like `Cursor<`[`Vec`]`<u8>>` and\n@@ -87,11 +88,11 @@ pub struct Cursor<T> {\n }\n \n impl<T> Cursor<T> {\n-    /// Creates a new cursor wrapping the provided underlying I/O object.\n+    /// Creates a new cursor wrapping the provided underlying in-memory buffer.\n     ///\n-    /// Cursor initial position is `0` even if underlying object (e.\n-    /// g. `Vec`) is not empty. So writing to cursor starts with\n-    /// overwriting `Vec` content, not with appending to it.\n+    /// Cursor initial position is `0` even if underlying buffer (e.g. `Vec`)\n+    /// is not empty. So writing to cursor starts with overwriting `Vec`\n+    /// content, not with appending to it.\n     ///\n     /// # Examples\n     ///"}, {"sha": "8ccb3be1ad912431f5de64226f8c1427c4b51770", "filename": "src/libsyntax_ext/format_foreign.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/baba5007bf857b4577a8d26de454a03d7afef3ac/src%2Flibsyntax_ext%2Fformat_foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/baba5007bf857b4577a8d26de454a03d7afef3ac/src%2Flibsyntax_ext%2Fformat_foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat_foreign.rs?ref=baba5007bf857b4577a8d26de454a03d7afef3ac", "patch": "@@ -232,11 +232,11 @@ pub mod printf {\n     impl Num {\n         fn from_str(s: &str, arg: Option<&str>) -> Self {\n             if let Some(arg) = arg {\n-                Num::Arg(arg.parse().expect(&format!(\"invalid format arg `{:?}`\", arg)))\n+                Num::Arg(arg.parse().unwrap_or_else(|_| panic!(\"invalid format arg `{:?}`\", arg)))\n             } else if s == \"*\" {\n                 Num::Next\n             } else {\n-                Num::Num(s.parse().expect(&format!(\"invalid format num `{:?}`\", s)))\n+                Num::Num(s.parse().unwrap_or_else(|_| panic!(\"invalid format num `{:?}`\", s)))\n             }\n         }\n "}, {"sha": "1d34673a0050d9a0c4567a5c0394f94eaa278dd4", "filename": "src/test/ui/async-fn-multiple-lifetimes.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/baba5007bf857b4577a8d26de454a03d7afef3ac/src%2Ftest%2Fui%2Fasync-fn-multiple-lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/baba5007bf857b4577a8d26de454a03d7afef3ac/src%2Ftest%2Fui%2Fasync-fn-multiple-lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-fn-multiple-lifetimes.stderr?ref=baba5007bf857b4577a8d26de454a03d7afef3ac", "patch": "@@ -1,8 +1,8 @@\n error[E0709]: multiple different lifetimes used in arguments of `async fn`\n-  --> $DIR/async-fn-multiple-lifetimes.rs:17:49\n+  --> $DIR/async-fn-multiple-lifetimes.rs:17:47\n    |\n LL | async fn multiple_named_lifetimes<'a, 'b>(_: &'a u8, _: &'b u8) {}\n-   |                                               --^^^^^^^^^-- different lifetime here\n+   |                                               ^^         ^^ different lifetime here\n    |                                               |\n    |                                               first lifetime here\n    |\n@@ -12,7 +12,7 @@ error[E0707]: multiple elided lifetimes used in arguments of `async fn`\n   --> $DIR/async-fn-multiple-lifetimes.rs:26:39\n    |\n LL | async fn multiple_elided_lifetimes(_: &u8, _: &u8) {}\n-   |                                       -^^^^^^^- different lifetime here\n+   |                                       ^       ^ different lifetime here\n    |                                       |\n    |                                       first lifetime here\n    |"}, {"sha": "94d13d5f26858b24cd9c32945afddb3498a6e574", "filename": "src/test/ui/issue-10401.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/baba5007bf857b4577a8d26de454a03d7afef3ac/src%2Ftest%2Fui%2Fissue-10401.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/baba5007bf857b4577a8d26de454a03d7afef3ac/src%2Ftest%2Fui%2Fissue-10401.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-10401.stderr?ref=baba5007bf857b4577a8d26de454a03d7afef3ac", "patch": "@@ -5,11 +5,6 @@ LL |     a += { \"b\" };\n    |     -^^^^^^^^^^^\n    |     |\n    |     cannot use `+=` on type `&str`\n-   |     `+` can't be used to concatenate two `&str` strings\n-help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n-   |\n-LL |     a.to_owned() += { \"b\" };\n-   |     ^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "bd4e7cf574f62836c2b97dc50896384da63af585", "filename": "src/test/ui/span/issue-39018.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/baba5007bf857b4577a8d26de454a03d7afef3ac/src%2Ftest%2Fui%2Fspan%2Fissue-39018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/baba5007bf857b4577a8d26de454a03d7afef3ac/src%2Ftest%2Fui%2Fspan%2Fissue-39018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-39018.stderr?ref=baba5007bf857b4577a8d26de454a03d7afef3ac", "patch": "@@ -23,12 +23,8 @@ LL |     let x = \"Hello \" + \"World!\".to_owned();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `+` can't be used to concatenate a `&str` with a `String`\n help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n    |\n-LL |     let x = \"Hello \".to_owned() + \"World!\".to_owned();\n-   |             ^^^^^^^^^^^^^^^^^^^\n-help: you also need to borrow the `String` on the right to get a `&str`\n-   |\n-LL |     let x = \"Hello \" + &\"World!\".to_owned();\n-   |                        ^^^^^^^^^^^^^^^^^^^^\n+LL |     let x = \"Hello \".to_owned() + &\"World!\".to_owned();\n+   |             ^^^^^^^^^^^^^^^^^^^   ^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 3 previous errors\n "}]}