{"sha": "a7aa1850b2de87e31ffa07df6f4d47e0a5f7b01e", "node_id": "C_kwDOAAsO6NoAKGE3YWExODUwYjJkZTg3ZTMxZmZhMDdkZjZmNGQ0N2UwYTVmN2IwMWU", "commit": {"author": {"name": "Nathan Stocks", "email": "cleancut@github.com", "date": "2022-10-02T00:39:02Z"}, "committer": {"name": "Nathan Stocks", "email": "cleancut@github.com", "date": "2022-10-07T19:19:27Z"}, "message": "migrate dead.rs to translateable diagnostics", "tree": {"sha": "4130b27307a6e84722f2b72be8fde9a12c536c30", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4130b27307a6e84722f2b72be8fde9a12c536c30"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7aa1850b2de87e31ffa07df6f4d47e0a5f7b01e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7aa1850b2de87e31ffa07df6f4d47e0a5f7b01e", "html_url": "https://github.com/rust-lang/rust/commit/a7aa1850b2de87e31ffa07df6f4d47e0a5f7b01e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7aa1850b2de87e31ffa07df6f4d47e0a5f7b01e/comments", "author": {"login": "CleanCut", "id": 5838512, "node_id": "MDQ6VXNlcjU4Mzg1MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/5838512?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CleanCut", "html_url": "https://github.com/CleanCut", "followers_url": "https://api.github.com/users/CleanCut/followers", "following_url": "https://api.github.com/users/CleanCut/following{/other_user}", "gists_url": "https://api.github.com/users/CleanCut/gists{/gist_id}", "starred_url": "https://api.github.com/users/CleanCut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CleanCut/subscriptions", "organizations_url": "https://api.github.com/users/CleanCut/orgs", "repos_url": "https://api.github.com/users/CleanCut/repos", "events_url": "https://api.github.com/users/CleanCut/events{/privacy}", "received_events_url": "https://api.github.com/users/CleanCut/received_events", "type": "User", "site_admin": true}, "committer": {"login": "CleanCut", "id": 5838512, "node_id": "MDQ6VXNlcjU4Mzg1MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/5838512?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CleanCut", "html_url": "https://github.com/CleanCut", "followers_url": "https://api.github.com/users/CleanCut/followers", "following_url": "https://api.github.com/users/CleanCut/following{/other_user}", "gists_url": "https://api.github.com/users/CleanCut/gists{/gist_id}", "starred_url": "https://api.github.com/users/CleanCut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CleanCut/subscriptions", "organizations_url": "https://api.github.com/users/CleanCut/orgs", "repos_url": "https://api.github.com/users/CleanCut/repos", "events_url": "https://api.github.com/users/CleanCut/events{/privacy}", "received_events_url": "https://api.github.com/users/CleanCut/received_events", "type": "User", "site_admin": true}, "parents": [{"sha": "f0afb8830258c2cfc36306e21bb436d55e74c4fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0afb8830258c2cfc36306e21bb436d55e74c4fa", "html_url": "https://github.com/rust-lang/rust/commit/f0afb8830258c2cfc36306e21bb436d55e74c4fa"}], "stats": {"total": 37, "additions": 20, "deletions": 17}, "files": [{"sha": "2308c7b2453d3961273f331b77e59c091c4b38c8", "filename": "compiler/rustc_error_messages/locales/en-US/passes.ftl", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a7aa1850b2de87e31ffa07df6f4d47e0a5f7b01e/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fpasses.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/a7aa1850b2de87e31ffa07df6f4d47e0a5f7b01e/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fpasses.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fpasses.ftl?ref=a7aa1850b2de87e31ffa07df6f4d47e0a5f7b01e", "patch": "@@ -558,3 +558,9 @@ passes_incorrect_target =\n         [one] argument\n         *[other] arguments\n     }\n+\n+passes_useless_assignment =\n+    useless assignment of {$is_field_assign ->\n+        [true] field\n+        *[false] variable\n+    } of type `{$ty}` to itself"}, {"sha": "277d71662281f671118ec4a859c00efe247e25da", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a7aa1850b2de87e31ffa07df6f4d47e0a5f7b01e/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7aa1850b2de87e31ffa07df6f4d47e0a5f7b01e/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=a7aa1850b2de87e31ffa07df6f4d47e0a5f7b01e", "patch": "@@ -988,11 +988,7 @@ impl Handler {\n     }\n \n     pub fn has_errors(&self) -> Option<ErrorGuaranteed> {\n-        if self.inner.borrow().has_errors() {\n-            Some(ErrorGuaranteed(()))\n-        } else {\n-            None\n-        }\n+        if self.inner.borrow().has_errors() { Some(ErrorGuaranteed(())) } else { None }\n     }\n     pub fn has_errors_or_lint_errors(&self) -> Option<ErrorGuaranteed> {\n         if self.inner.borrow().has_errors_or_lint_errors() {"}, {"sha": "6a97ad3fe86e2cc367a425c92490400ed1bc279f", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a7aa1850b2de87e31ffa07df6f4d47e0a5f7b01e/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7aa1850b2de87e31ffa07df6f4d47e0a5f7b01e/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=a7aa1850b2de87e31ffa07df6f4d47e0a5f7b01e", "patch": "@@ -4,7 +4,7 @@\n \n use itertools::Itertools;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_errors::{pluralize, Applicability, DelayDm, MultiSpan};\n+use rustc_errors::{pluralize, Applicability, MultiSpan};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorOf, DefKind, Res};\n use rustc_hir::def_id::{DefId, LocalDefId};\n@@ -18,6 +18,8 @@ use rustc_session::lint;\n use rustc_span::symbol::{sym, Symbol};\n use std::mem;\n \n+use crate::errors::UselessAssignment;\n+\n // Any local node that may call something in its body block should be\n // explored. For example, if it's a live Node::Item that is a\n // function, then we should explore its block to check for codes that\n@@ -180,19 +182,11 @@ impl<'tcx> MarkSymbolVisitor<'tcx> {\n                 && !assign.span.from_expansion()\n         {\n                 let is_field_assign = matches!(lhs.kind, hir::ExprKind::Field(..));\n-                self.tcx.struct_span_lint_hir(\n+                self.tcx.emit_spanned_lint(\n                     lint::builtin::DEAD_CODE,\n                     assign.hir_id,\n                     assign.span,\n-                    DelayDm(|| format!(\n-                            \"useless assignment of {} of type `{}` to itself\",\n-                            if is_field_assign { \"field\" } else { \"variable\" },\n-                            self.typeck_results().expr_ty(lhs),\n-                        )),\n-                    |lint| {\n-                        lint\n-\n-                    },\n+                    UselessAssignment { is_field_assign, ty: self.typeck_results().expr_ty(lhs) }\n                 )\n         }\n     }"}, {"sha": "ba1d4472e34cfe31d5303bc269db88fdaebb737e", "filename": "compiler/rustc_passes/src/errors.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a7aa1850b2de87e31ffa07df6f4d47e0a5f7b01e/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7aa1850b2de87e31ffa07df6f4d47e0a5f7b01e/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Ferrors.rs?ref=a7aa1850b2de87e31ffa07df6f4d47e0a5f7b01e", "patch": "@@ -7,7 +7,7 @@ use rustc_ast::Label;\n use rustc_errors::{error_code, Applicability, ErrorGuaranteed, IntoDiagnostic, MultiSpan};\n use rustc_hir::{self as hir, ExprKind, Target};\n use rustc_macros::{Diagnostic, LintDiagnostic, Subdiagnostic};\n-use rustc_middle::ty::MainDefinition;\n+use rustc_middle::ty::{MainDefinition, Ty};\n use rustc_span::{Span, Symbol, DUMMY_SP};\n \n #[derive(LintDiagnostic)]\n@@ -1265,3 +1265,10 @@ pub struct IncorrectTarget<'a> {\n     pub actual_num: usize,\n     pub at_least: bool,\n }\n+\n+#[derive(LintDiagnostic)]\n+#[diag(passes::useless_assignment)]\n+pub struct UselessAssignment<'a> {\n+    pub is_field_assign: bool,\n+    pub ty: Ty<'a>,\n+}"}]}