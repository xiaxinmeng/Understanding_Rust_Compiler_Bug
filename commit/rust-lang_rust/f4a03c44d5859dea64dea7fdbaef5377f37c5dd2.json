{"sha": "f4a03c44d5859dea64dea7fdbaef5377f37c5dd2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0YTAzYzQ0ZDU4NTlkZWE2NGRlYTdmZGJhZWY1Mzc3ZjM3YzVkZDI=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-03-04T21:34:57Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-03-09T09:42:41Z"}, "message": "rustc_ast: Introduce `Token::uninterpolated_span`", "tree": {"sha": "9c445da95893ef69cf501d421b4cdbbddc944efd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c445da95893ef69cf501d421b4cdbbddc944efd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4a03c44d5859dea64dea7fdbaef5377f37c5dd2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4a03c44d5859dea64dea7fdbaef5377f37c5dd2", "html_url": "https://github.com/rust-lang/rust/commit/f4a03c44d5859dea64dea7fdbaef5377f37c5dd2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4a03c44d5859dea64dea7fdbaef5377f37c5dd2/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "925e9a2188dcd6e1988ceaa3ab8d64fcdb3d6d1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/925e9a2188dcd6e1988ceaa3ab8d64fcdb3d6d1e", "html_url": "https://github.com/rust-lang/rust/commit/925e9a2188dcd6e1988ceaa3ab8d64fcdb3d6d1e"}], "stats": {"total": 61, "additions": 49, "deletions": 12}, "files": [{"sha": "280994116c013c007a242b856c8d3721880cd1af", "filename": "src/librustc_ast/attr/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f4a03c44d5859dea64dea7fdbaef5377f37c5dd2/src%2Flibrustc_ast%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4a03c44d5859dea64dea7fdbaef5377f37c5dd2/src%2Flibrustc_ast%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Fattr%2Fmod.rs?ref=f4a03c44d5859dea64dea7fdbaef5377f37c5dd2", "patch": "@@ -286,6 +286,10 @@ impl MetaItem {\n }\n \n impl AttrItem {\n+    pub fn span(&self) -> Span {\n+        self.args.span().map_or(self.path.span, |args_span| self.path.span.to(args_span))\n+    }\n+\n     pub fn meta(&self, span: Span) -> Option<MetaItem> {\n         Some(MetaItem {\n             path: self.path.clone(),"}, {"sha": "c1564882cfe9e78f661d425244771bc3ef77bad3", "filename": "src/librustc_ast/token.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f4a03c44d5859dea64dea7fdbaef5377f37c5dd2/src%2Flibrustc_ast%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4a03c44d5859dea64dea7fdbaef5377f37c5dd2/src%2Flibrustc_ast%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Ftoken.rs?ref=f4a03c44d5859dea64dea7fdbaef5377f37c5dd2", "patch": "@@ -328,6 +328,18 @@ impl Token {\n         mem::replace(self, Token::dummy())\n     }\n \n+    /// For interpolated tokens returns a span of the fragment to which the interpolated\n+    /// token refers, for all other tokens this is just a regular span.\n+    /// It is particularly important to use this for identifiers and lifetimes\n+    /// for which spans affect name resolution. This also includes edition checks\n+    /// for edition-specific keyword identifiers.\n+    pub fn uninterpolated_span(&self) -> Span {\n+        match &self.kind {\n+            Interpolated(nt) => nt.span(),\n+            _ => self.span,\n+        }\n+    }\n+\n     pub fn is_op(&self) -> bool {\n         match self.kind {\n             OpenDelim(..) | CloseDelim(..) | Literal(..) | DocComment(..) | Ident(..)\n@@ -714,6 +726,24 @@ pub enum Nonterminal {\n #[cfg(target_arch = \"x86_64\")]\n rustc_data_structures::static_assert_size!(Nonterminal, 40);\n \n+impl Nonterminal {\n+    fn span(&self) -> Span {\n+        match self {\n+            NtItem(item) => item.span,\n+            NtBlock(block) => block.span,\n+            NtStmt(stmt) => stmt.span,\n+            NtPat(pat) => pat.span,\n+            NtExpr(expr) | NtLiteral(expr) => expr.span,\n+            NtTy(ty) => ty.span,\n+            NtIdent(ident, _) | NtLifetime(ident) => ident.span,\n+            NtMeta(attr_item) => attr_item.span(),\n+            NtPath(path) => path.span,\n+            NtVis(vis) => vis.span,\n+            NtTT(tt) => tt.span(),\n+        }\n+    }\n+}\n+\n impl PartialEq for Nonterminal {\n     fn eq(&self, rhs: &Self) -> bool {\n         match (self, rhs) {"}, {"sha": "743fc3a4efa1dab98910e49e96c4a348dd933c63", "filename": "src/librustc_parse/parser/expr.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f4a03c44d5859dea64dea7fdbaef5377f37c5dd2/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4a03c44d5859dea64dea7fdbaef5377f37c5dd2/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fexpr.rs?ref=f4a03c44d5859dea64dea7fdbaef5377f37c5dd2", "patch": "@@ -849,7 +849,7 @@ impl<'a> Parser<'a> {\n \n     /// Assuming we have just parsed `.`, continue parsing into an expression.\n     fn parse_dot_suffix(&mut self, self_arg: P<Expr>, lo: Span) -> PResult<'a, P<Expr>> {\n-        if self.normalized_token.span.rust_2018() && self.eat_keyword(kw::Await) {\n+        if self.token.uninterpolated_span().rust_2018() && self.eat_keyword(kw::Await) {\n             return self.mk_await_expr(self_arg, lo);\n         }\n \n@@ -963,7 +963,7 @@ impl<'a> Parser<'a> {\n             //       |             ^ expected expression\n             self.bump();\n             Ok(self.mk_expr_err(self.token.span))\n-        } else if self.normalized_token.span.rust_2018() {\n+        } else if self.token.uninterpolated_span().rust_2018() {\n             // `Span::rust_2018()` is somewhat expensive; don't get it repeatedly.\n             if self.check_keyword(kw::Async) {\n                 if self.is_async_block() {\n@@ -1396,11 +1396,14 @@ impl<'a> Parser<'a> {\n         let movability =\n             if self.eat_keyword(kw::Static) { Movability::Static } else { Movability::Movable };\n \n-        let asyncness =\n-            if self.normalized_token.span.rust_2018() { self.parse_asyncness() } else { Async::No };\n-        if asyncness.is_async() {\n+        let asyncness = if self.token.uninterpolated_span().rust_2018() {\n+            self.parse_asyncness()\n+        } else {\n+            Async::No\n+        };\n+        if let Async::Yes { span, .. } = asyncness {\n             // Feature-gate `async ||` closures.\n-            self.sess.gated_spans.gate(sym::async_closure, self.normalized_prev_token.span);\n+            self.sess.gated_spans.gate(sym::async_closure, span);\n         }\n \n         let capture_clause = self.parse_capture_clause();\n@@ -1756,7 +1759,7 @@ impl<'a> Parser<'a> {\n     fn is_try_block(&self) -> bool {\n         self.token.is_keyword(kw::Try) &&\n         self.look_ahead(1, |t| *t == token::OpenDelim(token::Brace)) &&\n-        self.normalized_token.span.rust_2018() &&\n+        self.token.uninterpolated_span().rust_2018() &&\n         // Prevent `while try {} {}`, `if try {} {} else {}`, etc.\n         !self.restrictions.contains(Restrictions::NO_STRUCT_LITERAL)\n     }"}, {"sha": "232ecd6fdaed106f6878893cdcc60ab3c510ae77", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4a03c44d5859dea64dea7fdbaef5377f37c5dd2/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4a03c44d5859dea64dea7fdbaef5377f37c5dd2/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=f4a03c44d5859dea64dea7fdbaef5377f37c5dd2", "patch": "@@ -574,7 +574,7 @@ impl<'a> Parser<'a> {\n             && self.look_ahead(1, |t| t.is_non_raw_ident_where(|i| i.name != kw::As))\n         {\n             self.bump(); // `default`\n-            Defaultness::Default(self.normalized_prev_token.span)\n+            Defaultness::Default(self.prev_token.uninterpolated_span())\n         } else {\n             Defaultness::Final\n         }"}, {"sha": "252a80431ac368617da2fbfaca408eae085e8101", "filename": "src/librustc_parse/parser/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f4a03c44d5859dea64dea7fdbaef5377f37c5dd2/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4a03c44d5859dea64dea7fdbaef5377f37c5dd2/src%2Flibrustc_parse%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fmod.rs?ref=f4a03c44d5859dea64dea7fdbaef5377f37c5dd2", "patch": "@@ -884,7 +884,7 @@ impl<'a> Parser<'a> {\n     /// Parses asyncness: `async` or nothing.\n     fn parse_asyncness(&mut self) -> Async {\n         if self.eat_keyword(kw::Async) {\n-            let span = self.normalized_prev_token.span;\n+            let span = self.prev_token.uninterpolated_span();\n             Async::Yes { span, closure_id: DUMMY_NODE_ID, return_impl_trait_id: DUMMY_NODE_ID }\n         } else {\n             Async::No\n@@ -894,7 +894,7 @@ impl<'a> Parser<'a> {\n     /// Parses unsafety: `unsafe` or nothing.\n     fn parse_unsafety(&mut self) -> Unsafe {\n         if self.eat_keyword(kw::Unsafe) {\n-            Unsafe::Yes(self.normalized_prev_token.span)\n+            Unsafe::Yes(self.prev_token.uninterpolated_span())\n         } else {\n             Unsafe::No\n         }\n@@ -903,7 +903,7 @@ impl<'a> Parser<'a> {\n     /// Parses constness: `const` or nothing.\n     fn parse_constness(&mut self) -> Const {\n         if self.eat_keyword(kw::Const) {\n-            Const::Yes(self.normalized_prev_token.span)\n+            Const::Yes(self.prev_token.uninterpolated_span())\n         } else {\n             Const::No\n         }"}, {"sha": "16adf5c05a4eeafa9d5284052340fe0d080d32b6", "filename": "src/librustc_parse/parser/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4a03c44d5859dea64dea7fdbaef5377f37c5dd2/src%2Flibrustc_parse%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4a03c44d5859dea64dea7fdbaef5377f37c5dd2/src%2Flibrustc_parse%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fty.rs?ref=f4a03c44d5859dea64dea7fdbaef5377f37c5dd2", "patch": "@@ -323,7 +323,7 @@ impl<'a> Parser<'a> {\n     /// Is a `dyn B0 + ... + Bn` type allowed here?\n     fn is_explicit_dyn_type(&mut self) -> bool {\n         self.check_keyword(kw::Dyn)\n-            && (self.normalized_token.span.rust_2018()\n+            && (self.token.uninterpolated_span().rust_2018()\n                 || self.look_ahead(1, |t| {\n                     t.can_begin_bound() && !can_continue_type_after_non_fn_ident(t)\n                 }))"}]}