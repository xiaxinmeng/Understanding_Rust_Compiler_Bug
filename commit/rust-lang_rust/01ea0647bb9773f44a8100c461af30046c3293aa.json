{"sha": "01ea0647bb9773f44a8100c461af30046c3293aa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxZWEwNjQ3YmI5NzczZjQ0YTgxMDBjNDYxYWYzMDA0NmMzMjkzYWE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-07-13T01:19:39Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-07-13T01:21:50Z"}, "message": "rustc: Remove some exterior vectors from ty.rs", "tree": {"sha": "5863d7410873d392cbff4d16bc1a624fc970e1ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5863d7410873d392cbff4d16bc1a624fc970e1ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01ea0647bb9773f44a8100c461af30046c3293aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01ea0647bb9773f44a8100c461af30046c3293aa", "html_url": "https://github.com/rust-lang/rust/commit/01ea0647bb9773f44a8100c461af30046c3293aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01ea0647bb9773f44a8100c461af30046c3293aa/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cdda0fd6d65917174708a376e7e69f6cf66b62fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/cdda0fd6d65917174708a376e7e69f6cf66b62fb", "html_url": "https://github.com/rust-lang/rust/commit/cdda0fd6d65917174708a376e7e69f6cf66b62fb"}], "stats": {"total": 57, "additions": 15, "deletions": 42}, "files": [{"sha": "b44386553eedbee71469bc7c0bca5ae7579f156d", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 15, "deletions": 42, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/01ea0647bb9773f44a8100c461af30046c3293aa/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01ea0647bb9773f44a8100c461af30046c3293aa/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=01ea0647bb9773f44a8100c461af30046c3293aa", "patch": "@@ -3,7 +3,6 @@ import std::int;\n import std::ivec;\n import std::str;\n import std::uint;\n-import std::vec;\n import std::box;\n import std::ufindivec;\n import std::map;\n@@ -1039,24 +1038,16 @@ fn type_has_pointers(&ctxt cx, &t ty) -> bool {\n         case (ty_tag(?did, ?tps)) {\n             auto variants = tag_variants(cx, did);\n             for (variant_info variant in variants) {\n-                // TODO: Remove this vec->ivec conversion.\n-                auto args = ~[];\n-                for (ty::t arg in variant.args) { args += ~[arg]; }\n+                auto tup_ty = mk_imm_tup(cx, variant.args);\n \n-                auto tup_ty = mk_imm_tup(cx, args);\n                 // Perform any type parameter substitutions.\n-\n                 tup_ty = substitute_type_params(cx, tps, tup_ty);\n                 if (type_has_pointers(cx, tup_ty)) { result = true; }\n             }\n         }\n         case (ty_res(?did, ?inner, ?tps)) {\n-            // FIXME: Remove this vec->ivec conversion.\n-            auto tps_ivec = ~[];\n-            for (ty::t tp in tps) { tps_ivec += ~[tp]; }\n-\n-            result = type_has_pointers\n-                (cx, substitute_type_params(cx, tps_ivec, inner));\n+            result = type_has_pointers(cx,\n+                substitute_type_params(cx, tps, inner));\n         }\n         case (_) { result = true; }\n     }\n@@ -1221,11 +1212,7 @@ fn type_owns_heap_mem(&ctxt cx, &t ty) -> bool {\n         case (ty_tag(?did, ?tps)) {\n             auto variants = tag_variants(cx, did);\n             for (variant_info variant in variants) {\n-                // TODO: Remove this vec->ivec conversion.\n-                auto args = ~[];\n-                for (ty::t arg in variant.args) { args += ~[arg]; }\n-\n-                auto tup_ty = mk_imm_tup(cx, args);\n+                auto tup_ty = mk_imm_tup(cx, variant.args);\n \n                 // Perform any type parameter substitutions.\n                 tup_ty = substitute_type_params(cx, tps, tup_ty);\n@@ -1243,12 +1230,8 @@ fn type_owns_heap_mem(&ctxt cx, &t ty) -> bool {\n             }\n         }\n         case (ty_res(_, ?inner, ?tps)) {\n-            // FIXME: Remove this vec->ivec conversion.\n-            auto tps_ivec = ~[];\n-            for (ty::t tp in tps) { tps_ivec += ~[tp]; }\n-\n-            result = type_owns_heap_mem\n-                (cx, substitute_type_params(cx, tps_ivec, inner));\n+            result = type_owns_heap_mem(cx,\n+                substitute_type_params(cx, tps, inner));\n         }\n \n         case (ty_ptr(_)) { result = false; }\n@@ -1279,11 +1262,7 @@ fn type_autoderef(&ctxt cx, &ty::t t) -> ty::t {\n         alt (struct(cx, t1)) {\n             case (ty::ty_box(?mt)) { t1 = mt.ty; }\n             case (ty::ty_res(_, ?inner, ?tps)) {\n-                // FIXME: Remove this vec->ivec conversion.\n-                auto tps_ivec = ~[];\n-                for (ty::t tp in tps) { tps_ivec += ~[tp]; }\n-\n-                t1 = substitute_type_params(cx, tps_ivec, inner);\n+                t1 = substitute_type_params(cx, tps, inner);\n             }\n             case (ty::ty_tag(?did, ?tps)) {\n                 auto variants = tag_variants(cx, did);\n@@ -1763,13 +1742,7 @@ fn ty_param_substs_opt_and_ty_to_monotype(&ctxt cx,\n    t {\n     alt (tpot._0) {\n         case (none) { ret tpot._1; }\n-        case (some(?tps)) {\n-            // FIXME: Remove this vec->ivec conversion.\n-            auto tps_ivec = ~[];\n-            for (ty::t tp in tps) { tps_ivec += ~[tp]; }\n-\n-            ret substitute_type_params(cx, tps_ivec, tpot._1);\n-        }\n+        case (some(?tps)) { ret substitute_type_params(cx, tps, tpot._1); }\n     }\n }\n \n@@ -2979,13 +2952,13 @@ fn is_binopable(&ctxt cx, t ty, ast::binop op) -> bool {\n     /*.          add,     shift,   bit\n       .             sub,     rel,     logic\n       .                mult,    eq,         */\n-    auto tbl = [[f, f, f, f, t, t, f, f], /*other*/\n-                [f, f, f, f, t, t, t, t], /*bool*/\n-                [t, t, t, t, t, t, t, f], /*int*/\n-                [t, t, t, f, t, t, f, f], /*float*/\n-                [t, f, f, f, t, t, f, f], /*str*/\n-                [t, f, f, f, t, t, f, f], /*vec*/\n-                [f, f, f, f, t, t, f, f]];/*struct*/\n+    auto tbl = ~[~[f, f, f, f, t, t, f, f], /*other*/\n+                 ~[f, f, f, f, t, t, t, t], /*bool*/\n+                 ~[t, t, t, t, t, t, t, f], /*int*/\n+                 ~[t, t, t, f, t, t, f, f], /*float*/\n+                 ~[t, f, f, f, t, t, f, f], /*str*/\n+                 ~[t, f, f, f, t, t, f, f], /*vec*/\n+                 ~[f, f, f, f, t, t, f, f]];/*struct*/\n \n     ret tbl.(tycat(cx, ty)).(opcat(op));\n }"}]}