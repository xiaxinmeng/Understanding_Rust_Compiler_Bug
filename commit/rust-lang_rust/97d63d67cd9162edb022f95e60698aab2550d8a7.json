{"sha": "97d63d67cd9162edb022f95e60698aab2550d8a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3ZDYzZDY3Y2Q5MTYyZWRiMDIyZjk1ZTYwNjk4YWFiMjU1MGQ4YTc=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-07-19T18:36:44Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-07-19T18:51:57Z"}, "message": "Resolve paths to assoc items for traits", "tree": {"sha": "111086b98d2d99f804cf4213e4ee117dceb2bc1f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/111086b98d2d99f804cf4213e4ee117dceb2bc1f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97d63d67cd9162edb022f95e60698aab2550d8a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97d63d67cd9162edb022f95e60698aab2550d8a7", "html_url": "https://github.com/rust-lang/rust/commit/97d63d67cd9162edb022f95e60698aab2550d8a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97d63d67cd9162edb022f95e60698aab2550d8a7/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a17206646b14701a40abbd473e0617896c729fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a17206646b14701a40abbd473e0617896c729fd", "html_url": "https://github.com/rust-lang/rust/commit/7a17206646b14701a40abbd473e0617896c729fd"}], "stats": {"total": 51, "additions": 32, "deletions": 19}, "files": [{"sha": "859dcfc1c79113a1de0fb40d96b4d19fb7706edd", "filename": "crates/hir/src/attrs.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/97d63d67cd9162edb022f95e60698aab2550d8a7/crates%2Fhir%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97d63d67cd9162edb022f95e60698aab2550d8a7/crates%2Fhir%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fattrs.rs?ref=97d63d67cd9162edb022f95e60698aab2550d8a7", "patch": "@@ -114,16 +114,15 @@ fn resolve_doc_path(\n     let path = ast::Path::parse(link).ok()?;\n     let modpath = ModPath::from_src(db.upcast(), path, &Hygiene::new_unhygienic()).unwrap();\n     let resolved = resolver.resolve_module_path_in_items(db.upcast(), &modpath);\n-    if resolved == PerNs::none() {\n-        if let Some(trait_id) = resolver.resolve_module_path_in_trait_items(db.upcast(), &modpath) {\n-            return Some(ModuleDefId::TraitId(trait_id));\n-        };\n-    }\n-    let def = match ns {\n-        Some(Namespace::Types) => resolved.take_types()?,\n-        Some(Namespace::Values) => resolved.take_values()?,\n-        Some(Namespace::Macros) => return None,\n-        None => resolved.iter_items().find_map(|it| it.as_module_def_id())?,\n+    let resolved = if resolved == PerNs::none() {\n+        resolver.resolve_module_path_in_trait_assoc_items(db.upcast(), &modpath)?\n+    } else {\n+        resolved\n     };\n-    Some(def)\n+    match ns {\n+        Some(Namespace::Types) => resolved.take_types(),\n+        Some(Namespace::Values) => resolved.take_values(),\n+        Some(Namespace::Macros) => None,\n+        None => resolved.iter_items().find_map(|it| it.as_module_def_id()),\n+    }\n }"}, {"sha": "123f23ff92cc096cfd78b940188d1308b84c8e2f", "filename": "crates/hir_def/src/resolver.rs", "status": "modified", "additions": 21, "deletions": 8, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/97d63d67cd9162edb022f95e60698aab2550d8a7/crates%2Fhir_def%2Fsrc%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97d63d67cd9162edb022f95e60698aab2550d8a7/crates%2Fhir_def%2Fsrc%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fresolver.rs?ref=97d63d67cd9162edb022f95e60698aab2550d8a7", "patch": "@@ -20,10 +20,10 @@ use crate::{\n     path::{ModPath, PathKind},\n     per_ns::PerNs,\n     visibility::{RawVisibility, Visibility},\n-    AdtId, AssocContainerId, ConstId, ConstParamId, DefWithBodyId, EnumId, EnumVariantId,\n-    FunctionId, GenericDefId, GenericParamId, HasModule, ImplId, LifetimeParamId, LocalModuleId,\n-    Lookup, ModuleDefId, ModuleId, StaticId, StructId, TraitId, TypeAliasId, TypeParamId,\n-    VariantId,\n+    AdtId, AssocContainerId, AssocItemId, ConstId, ConstParamId, DefWithBodyId, EnumId,\n+    EnumVariantId, FunctionId, GenericDefId, GenericParamId, HasModule, ImplId, LifetimeParamId,\n+    LocalModuleId, Lookup, ModuleDefId, ModuleId, StaticId, StructId, TraitId, TypeAliasId,\n+    TypeParamId, VariantId,\n };\n \n #[derive(Debug, Clone, Default)]\n@@ -144,15 +144,28 @@ impl Resolver {\n         self.resolve_module_path(db, path, BuiltinShadowMode::Module)\n     }\n \n-    pub fn resolve_module_path_in_trait_items(\n+    pub fn resolve_module_path_in_trait_assoc_items(\n         &self,\n         db: &dyn DefDatabase,\n         path: &ModPath,\n-    ) -> Option<TraitId> {\n+    ) -> Option<PerNs> {\n         let (item_map, module) = self.module_scope()?;\n-        let (module_res, ..) = item_map.resolve_path(db, module, path, BuiltinShadowMode::Module);\n+        let (module_res, idx) = item_map.resolve_path(db, module, path, BuiltinShadowMode::Module);\n         match module_res.take_types()? {\n-            ModuleDefId::TraitId(it) => Some(it),\n+            ModuleDefId::TraitId(it) => {\n+                let idx = idx?;\n+                let unresolved = &path.segments()[idx..];\n+                let assoc = match unresolved {\n+                    [it] => it,\n+                    _ => return None,\n+                };\n+                let &(_, assoc) = db.trait_data(it).items.iter().find(|(n, _)| n == assoc)?;\n+                Some(match assoc {\n+                    AssocItemId::FunctionId(it) => PerNs::values(it.into(), Visibility::Public),\n+                    AssocItemId::ConstId(it) => PerNs::values(it.into(), Visibility::Public),\n+                    AssocItemId::TypeAliasId(it) => PerNs::types(it.into(), Visibility::Public),\n+                })\n+            }\n             _ => None,\n         }\n     }"}, {"sha": "008aaab358e4c27bd7023d29a954378727706814", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/97d63d67cd9162edb022f95e60698aab2550d8a7/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97d63d67cd9162edb022f95e60698aab2550d8a7/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=97d63d67cd9162edb022f95e60698aab2550d8a7", "patch": "@@ -2077,6 +2077,7 @@ pub struct B$0ar\n             \"#]],\n         );\n     }\n+\n     #[test]\n     fn test_hover_intra_link_reference_to_trait_method() {\n         check("}]}