{"sha": "bf582e77d6e5603149b355a5650cd4d15318f776", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmNTgyZTc3ZDZlNTYwMzE0OWIzNTVhNTY1MGNkNGQxNTMxOGY3NzY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-03-10T17:47:09Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-03-10T17:47:09Z"}, "message": "Pull completion options up to the rust-analyzer", "tree": {"sha": "fd655f5e42cd720e11c067c43449f7bcf6311ccd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd655f5e42cd720e11c067c43449f7bcf6311ccd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf582e77d6e5603149b355a5650cd4d15318f776", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf582e77d6e5603149b355a5650cd4d15318f776", "html_url": "https://github.com/rust-lang/rust/commit/bf582e77d6e5603149b355a5650cd4d15318f776", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf582e77d6e5603149b355a5650cd4d15318f776/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2347c03dcd717fbc0648c1e4e3d64a886217de5d", "url": "https://api.github.com/repos/rust-lang/rust/commits/2347c03dcd717fbc0648c1e4e3d64a886217de5d", "html_url": "https://github.com/rust-lang/rust/commit/2347c03dcd717fbc0648c1e4e3d64a886217de5d"}], "stats": {"total": 54, "additions": 31, "deletions": 23}, "files": [{"sha": "3dc56e4a3d8a7ccadcb17562de267f1a0400c7e8", "filename": "crates/ra_ide/src/completion/presentation.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bf582e77d6e5603149b355a5650cd4d15318f776/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf582e77d6e5603149b355a5650cd4d15318f776/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=bf582e77d6e5603149b355a5650cd4d15318f776", "patch": "@@ -104,10 +104,7 @@ impl Completions {\n         };\n \n         // Add `<>` for generic types\n-        if ctx.is_path_type\n-            && !ctx.has_type_args\n-            && ctx.db.feature_flags.get(\"completion.insertion.add-call-parenthesis\")\n-        {\n+        if ctx.is_path_type && !ctx.has_type_args && ctx.options.add_call_parenthesis {\n             let has_non_default_type_params = match resolution {\n                 ScopeDef::ModuleDef(Adt(it)) => it.has_non_default_type_params(ctx.db),\n                 ScopeDef::ModuleDef(TypeAlias(it)) => it.has_non_default_type_params(ctx.db),"}, {"sha": "d888bb7454c4080530a3b50ed5134cd55da81543", "filename": "crates/ra_ide/src/lib.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/bf582e77d6e5603149b355a5650cd4d15318f776/crates%2Fra_ide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf582e77d6e5603149b355a5650cd4d15318f776/crates%2Fra_ide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Flib.rs?ref=bf582e77d6e5603149b355a5650cd4d15318f776", "patch": "@@ -450,17 +450,12 @@ impl Analysis {\n     }\n \n     /// Computes completions at the given position.\n-    pub fn completions(&self, position: FilePosition) -> Cancelable<Option<Vec<CompletionItem>>> {\n-        let opts = CompletionOptions {\n-            enable_postfix_completions: self.feature_flags().get(\"completion.enable-postfix\"),\n-            add_call_parenthesis: self\n-                .feature_flags()\n-                .get(\"completion.insertion.add-call-parenthesis\"),\n-            add_call_argument_snippets: self\n-                .feature_flags()\n-                .get(\"completion.insertion.add-argument-snippets\"),\n-        };\n-        self.with_db(|db| completion::completions(db, position, &opts).map(Into::into))\n+    pub fn completions(\n+        &self,\n+        position: FilePosition,\n+        options: &CompletionOptions,\n+    ) -> Cancelable<Option<Vec<CompletionItem>>> {\n+        self.with_db(|db| completion::completions(db, position, options).map(Into::into))\n     }\n \n     /// Computes assists (aka code actions aka intentions) for the given"}, {"sha": "dbb3f50a0956be9cc3f4d2bbf5c746c1a6cd6455", "filename": "crates/ra_ide_db/src/feature_flags.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bf582e77d6e5603149b355a5650cd4d15318f776/crates%2Fra_ide_db%2Fsrc%2Ffeature_flags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf582e77d6e5603149b355a5650cd4d15318f776/crates%2Fra_ide_db%2Fsrc%2Ffeature_flags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Ffeature_flags.rs?ref=bf582e77d6e5603149b355a5650cd4d15318f776", "patch": "@@ -2,6 +2,10 @@\n \n use rustc_hash::FxHashMap;\n \n+// FIXME: looks like a much better design is to pass options to each call,\n+// rather than to have a global ambient feature flags -- that way, the clients\n+// can issue two successive calls with different options.\n+\n /// Feature flags hold fine-grained toggles for all *user-visible* features of\n /// rust-analyzer.\n ///"}, {"sha": "28a23934f15abd54e4be37dd9ff833b6a9ef5345", "filename": "crates/rust-analyzer/src/cli/analysis_bench.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bf582e77d6e5603149b355a5650cd4d15318f776/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf582e77d6e5603149b355a5650cd4d15318f776/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs?ref=bf582e77d6e5603149b355a5650cd4d15318f776", "patch": "@@ -12,7 +12,7 @@ use ra_db::{\n     salsa::{Database, Durability},\n     FileId, SourceDatabaseExt,\n };\n-use ra_ide::{Analysis, AnalysisChange, AnalysisHost, FilePosition, LineCol};\n+use ra_ide::{Analysis, AnalysisChange, AnalysisHost, CompletionOptions, FilePosition, LineCol};\n \n use crate::cli::{load_cargo::load_cargo, Verbosity};\n \n@@ -94,17 +94,19 @@ pub fn analysis_bench(verbosity: Verbosity, path: &Path, what: BenchWhat) -> Res\n                 .analysis()\n                 .file_line_index(file_id)?\n                 .offset(LineCol { line: pos.line - 1, col_utf16: pos.column });\n-            let file_postion = FilePosition { file_id, offset };\n+            let file_position = FilePosition { file_id, offset };\n \n             if is_completion {\n-                let res =\n-                    do_work(&mut host, file_id, |analysis| analysis.completions(file_postion));\n+                let options = CompletionOptions::default();\n+                let res = do_work(&mut host, file_id, |analysis| {\n+                    analysis.completions(file_position, &options)\n+                });\n                 if verbosity.is_verbose() {\n                     println!(\"\\n{:#?}\", res);\n                 }\n             } else {\n                 let res =\n-                    do_work(&mut host, file_id, |analysis| analysis.goto_definition(file_postion));\n+                    do_work(&mut host, file_id, |analysis| analysis.goto_definition(file_position));\n                 if verbosity.is_verbose() {\n                     println!(\"\\n{:#?}\", res);\n                 }"}, {"sha": "155f677a6dc4399a83fd9dc11d8b734936d09dec", "filename": "crates/rust-analyzer/src/main_loop/handlers.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bf582e77d6e5603149b355a5650cd4d15318f776/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf582e77d6e5603149b355a5650cd4d15318f776/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=bf582e77d6e5603149b355a5650cd4d15318f776", "patch": "@@ -20,8 +20,8 @@ use lsp_types::{\n     TextEdit, WorkspaceEdit,\n };\n use ra_ide::{\n-    Assist, AssistId, FileId, FilePosition, FileRange, Query, RangeInfo, Runnable, RunnableKind,\n-    SearchScope,\n+    Assist, AssistId, CompletionOptions, FileId, FilePosition, FileRange, Query, RangeInfo,\n+    Runnable, RunnableKind, SearchScope,\n };\n use ra_prof::profile;\n use ra_syntax::{AstNode, SyntaxKind, TextRange, TextUnit};\n@@ -424,7 +424,17 @@ pub fn handle_completion(\n         return Ok(None);\n     }\n \n-    let items = match world.analysis().completions(position)? {\n+    let options = CompletionOptions {\n+        enable_postfix_completions: world.feature_flags().get(\"completion.enable-postfix\"),\n+        add_call_parenthesis: world\n+            .feature_flags()\n+            .get(\"completion.insertion.add-call-parenthesis\"),\n+        add_call_argument_snippets: world\n+            .feature_flags()\n+            .get(\"completion.insertion.add-argument-snippets\"),\n+    };\n+\n+    let items = match world.analysis().completions(position, &options)? {\n         None => return Ok(None),\n         Some(items) => items,\n     };"}]}