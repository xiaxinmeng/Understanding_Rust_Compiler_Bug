{"sha": "4d879662a9ef1184fa9f35d43bedd4b451e659c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkODc5NjYyYTllZjExODRmYTlmMzVkNDNiZWRkNGI0NTFlNjU5Yzc=", "commit": {"author": {"name": "Michael Killough", "email": "michaeljkillough@gmail.com", "date": "2017-05-16T11:05:40Z"}, "committer": {"name": "Michael Killough", "email": "michaeljkillough@gmail.com", "date": "2017-05-16T11:05:40Z"}, "message": "Track which config items are accessed.\n\nRequired by #865. This doesn't introduce any method to view which\nparameters are accessed.\n\nWe record which config items are accessed even if we don't intend to\noutput them, as we assume it will be a relatively cheap operation.", "tree": {"sha": "24e782905480e0024d064f300b941e18ab7a9c1d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24e782905480e0024d064f300b941e18ab7a9c1d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d879662a9ef1184fa9f35d43bedd4b451e659c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d879662a9ef1184fa9f35d43bedd4b451e659c7", "html_url": "https://github.com/rust-lang/rust/commit/4d879662a9ef1184fa9f35d43bedd4b451e659c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d879662a9ef1184fa9f35d43bedd4b451e659c7/comments", "author": {"login": "mjkillough", "id": 532855, "node_id": "MDQ6VXNlcjUzMjg1NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/532855?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mjkillough", "html_url": "https://github.com/mjkillough", "followers_url": "https://api.github.com/users/mjkillough/followers", "following_url": "https://api.github.com/users/mjkillough/following{/other_user}", "gists_url": "https://api.github.com/users/mjkillough/gists{/gist_id}", "starred_url": "https://api.github.com/users/mjkillough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mjkillough/subscriptions", "organizations_url": "https://api.github.com/users/mjkillough/orgs", "repos_url": "https://api.github.com/users/mjkillough/repos", "events_url": "https://api.github.com/users/mjkillough/events{/privacy}", "received_events_url": "https://api.github.com/users/mjkillough/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mjkillough", "id": 532855, "node_id": "MDQ6VXNlcjUzMjg1NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/532855?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mjkillough", "html_url": "https://github.com/mjkillough", "followers_url": "https://api.github.com/users/mjkillough/followers", "following_url": "https://api.github.com/users/mjkillough/following{/other_user}", "gists_url": "https://api.github.com/users/mjkillough/gists{/gist_id}", "starred_url": "https://api.github.com/users/mjkillough/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mjkillough/subscriptions", "organizations_url": "https://api.github.com/users/mjkillough/orgs", "repos_url": "https://api.github.com/users/mjkillough/repos", "events_url": "https://api.github.com/users/mjkillough/events{/privacy}", "received_events_url": "https://api.github.com/users/mjkillough/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0bdbfa5315217741213d04329b02a4fb5e061e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0bdbfa5315217741213d04329b02a4fb5e061e7", "html_url": "https://github.com/rust-lang/rust/commit/c0bdbfa5315217741213d04329b02a4fb5e061e7"}], "stats": {"total": 28, "additions": 28, "deletions": 0}, "files": [{"sha": "44c40f2ac6cb4828b80b70ddf0fc6ba7584cc5d0", "filename": "src/config.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4d879662a9ef1184fa9f35d43bedd4b451e659c7/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d879662a9ef1184fa9f35d43bedd4b451e659c7/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=4d879662a9ef1184fa9f35d43bedd4b451e659c7", "patch": "@@ -10,6 +10,8 @@\n \n extern crate toml;\n \n+use std::cell::RefCell;\n+use std::collections::HashSet;\n use std::error;\n use std::result;\n \n@@ -211,10 +213,34 @@ impl ConfigHelpItem {\n     }\n }\n \n+/// This is used by Config to track which config parameters are accessed during\n+/// formatting. It uses a RefCell for interior mutability, as we don't want to\n+/// require a mutable reference to Config in order to access configuration.\n+#[derive(Clone, Default)]\n+struct ConfigTracker {\n+    set: RefCell<HashSet<&'static str>>,\n+}\n+\n+impl ConfigTracker {\n+    fn mark_accessed(&self, name: &'static str) {\n+        // We don't ever expect borrowing to fail, as our use of RefCell is very\n+        // simple.\n+        let mut set = self.set.borrow_mut();\n+        set.insert(name);\n+    }\n+\n+    fn was_accessed(&self, name: &'static str) -> bool {\n+        self.set.borrow().contains(name)\n+    }\n+}\n+\n macro_rules! create_config {\n     ($($i:ident: $ty:ty, $def:expr, $( $dstring:expr ),+ );+ $(;)*) => (\n         #[derive(Deserialize, Clone)]\n         pub struct Config {\n+            #[serde(skip_deserializing)]\n+            tracker: ConfigTracker,\n+\n             $($i: $ty),+\n         }\n \n@@ -232,6 +258,7 @@ macro_rules! create_config {\n \n             $(\n             pub fn $i(&self) -> $ty {\n+                self.tracker.mark_accessed(stringify!($i));\n                 self.$i.clone()\n             }\n             )+\n@@ -324,6 +351,7 @@ macro_rules! create_config {\n         impl Default for Config {\n             fn default() -> Config {\n                 Config {\n+                    tracker: ConfigTracker::default(),\n                     $(\n                         $i: $def,\n                     )+"}]}