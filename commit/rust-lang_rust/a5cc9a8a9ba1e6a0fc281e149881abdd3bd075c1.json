{"sha": "a5cc9a8a9ba1e6a0fc281e149881abdd3bd075c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1Y2M5YThhOWJhMWU2YTBmYzI4MWUxNDk4ODFhYmRkM2JkMDc1YzE=", "commit": {"author": {"name": "Jeremy Kolb", "email": "kjeremy@gmail.com", "date": "2020-05-25T17:35:52Z"}, "committer": {"name": "Jeremy Kolb", "email": "kjeremy@gmail.com", "date": "2020-05-25T17:35:52Z"}, "message": "Fix some clippy perf warnings", "tree": {"sha": "8235c222a226ace40dc487c8d36a0fdfe6e40c3b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8235c222a226ace40dc487c8d36a0fdfe6e40c3b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5cc9a8a9ba1e6a0fc281e149881abdd3bd075c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5cc9a8a9ba1e6a0fc281e149881abdd3bd075c1", "html_url": "https://github.com/rust-lang/rust/commit/a5cc9a8a9ba1e6a0fc281e149881abdd3bd075c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5cc9a8a9ba1e6a0fc281e149881abdd3bd075c1/comments", "author": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c2c8d7e5f7887351bf8e475f441609527679e5f", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c2c8d7e5f7887351bf8e475f441609527679e5f", "html_url": "https://github.com/rust-lang/rust/commit/3c2c8d7e5f7887351bf8e475f441609527679e5f"}], "stats": {"total": 17, "additions": 8, "deletions": 9}, "files": [{"sha": "482a2f3e651e199f689f319079167c9f5ada9cd6", "filename": "crates/ra_db/src/fixture.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a5cc9a8a9ba1e6a0fc281e149881abdd3bd075c1/crates%2Fra_db%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5cc9a8a9ba1e6a0fc281e149881abdd3bd075c1/crates%2Fra_db%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Ffixture.rs?ref=a5cc9a8a9ba1e6a0fc281e149881abdd3bd075c1", "patch": "@@ -267,8 +267,8 @@ impl From<&FixtureMeta> for ParsedMeta {\n                 ParsedMeta::Root { path: path.to_owned() }\n             }\n             FixtureMeta::File(f) => Self::File(FileMeta {\n-                path: f.path.to_owned().into(),\n-                krate: f.crate_name.to_owned().into(),\n+                path: f.path.to_owned(),\n+                krate: f.crate_name.to_owned(),\n                 deps: f.deps.to_owned(),\n                 cfg: f.cfg.to_owned(),\n                 edition: f"}, {"sha": "3516784b8d8d2e5a5cdd33785f40783dddc3eb26", "filename": "crates/ra_hir_def/src/lang_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5cc9a8a9ba1e6a0fc281e149881abdd3bd075c1/crates%2Fra_hir_def%2Fsrc%2Flang_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5cc9a8a9ba1e6a0fc281e149881abdd3bd075c1/crates%2Fra_hir_def%2Fsrc%2Flang_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flang_item.rs?ref=a5cc9a8a9ba1e6a0fc281e149881abdd3bd075c1", "patch": "@@ -164,7 +164,7 @@ impl LangItems {\n         T: Into<AttrDefId> + Copy,\n     {\n         if let Some(lang_item_name) = lang_attr(db, item) {\n-            self.items.entry(lang_item_name.clone()).or_insert_with(|| constructor(item));\n+            self.items.entry(lang_item_name).or_insert_with(|| constructor(item));\n         }\n     }\n }"}, {"sha": "88a422d2cb48cda6a86107aae7963cb0be054e52", "filename": "crates/ra_hir_ty/src/traits/builtin.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a5cc9a8a9ba1e6a0fc281e149881abdd3bd075c1/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5cc9a8a9ba1e6a0fc281e149881abdd3bd075c1/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fbuiltin.rs?ref=a5cc9a8a9ba1e6a0fc281e149881abdd3bd075c1", "patch": "@@ -290,8 +290,7 @@ fn trait_object_unsize_impl_datum(\n     let self_trait_ref = TraitRef { trait_, substs: self_substs };\n     let where_clauses = vec![GenericPredicate::Implemented(self_trait_ref)];\n \n-    let impl_substs =\n-        Substs::builder(2).push(self_ty).push(Ty::Dyn(target_bounds.clone().into())).build();\n+    let impl_substs = Substs::builder(2).push(self_ty).push(Ty::Dyn(target_bounds.into())).build();\n \n     let trait_ref = TraitRef { trait_: unsize_trait, substs: impl_substs };\n "}, {"sha": "130d3b4c3ba19435ced89d1e057de85df782982a", "filename": "crates/ra_ide/src/ssr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a5cc9a8a9ba1e6a0fc281e149881abdd3bd075c1/crates%2Fra_ide%2Fsrc%2Fssr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5cc9a8a9ba1e6a0fc281e149881abdd3bd075c1/crates%2Fra_ide%2Fsrc%2Fssr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fssr.rs?ref=a5cc9a8a9ba1e6a0fc281e149881abdd3bd075c1", "patch": "@@ -196,10 +196,10 @@ fn find(pattern: &SsrPattern, code: &SyntaxNode) -> SsrMatches {\n     ) -> Option<Match> {\n         let match_ = check_opt_nodes(pattern.path(), code.path(), placeholders, match_)?;\n \n-        let mut pattern_fields =\n-            pattern.record_field_list().map(|x| x.fields().collect()).unwrap_or(vec![]);\n-        let mut code_fields =\n-            code.record_field_list().map(|x| x.fields().collect()).unwrap_or(vec![]);\n+        let mut pattern_fields: Vec<RecordField> =\n+            pattern.record_field_list().map(|x| x.fields().collect()).unwrap_or_default();\n+        let mut code_fields: Vec<RecordField> =\n+            code.record_field_list().map(|x| x.fields().collect()).unwrap_or_default();\n \n         if pattern_fields.len() != code_fields.len() {\n             return None;"}]}