{"sha": "c283d3e64368d045ff5a9668f897be871b4f626c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyODNkM2U2NDM2OGQwNDVmZjVhOTY2OGY4OTdiZTg3MWI0ZjYyNmM=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-08-01T01:51:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-08-01T01:51:23Z"}, "message": "Merge pull request #1840 from topecongiro/match-with-max-width\n\nMatch with max width", "tree": {"sha": "4b4dc720f10082198edc11e76089093d95d581f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b4dc720f10082198edc11e76089093d95d581f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c283d3e64368d045ff5a9668f897be871b4f626c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c283d3e64368d045ff5a9668f897be871b4f626c", "html_url": "https://github.com/rust-lang/rust/commit/c283d3e64368d045ff5a9668f897be871b4f626c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c283d3e64368d045ff5a9668f897be871b4f626c/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e846998e66539147481882484f05c973a46bc8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e846998e66539147481882484f05c973a46bc8f", "html_url": "https://github.com/rust-lang/rust/commit/0e846998e66539147481882484f05c973a46bc8f"}, {"sha": "36b347b123f1fffe0b3b8776726d6a8e2950bb3a", "url": "https://api.github.com/repos/rust-lang/rust/commits/36b347b123f1fffe0b3b8776726d6a8e2950bb3a", "html_url": "https://github.com/rust-lang/rust/commit/36b347b123f1fffe0b3b8776726d6a8e2950bb3a"}], "stats": {"total": 149, "additions": 129, "deletions": 20}, "files": [{"sha": "a847733e7bd8a681939ac2c68a01a1548baa6ccb", "filename": "src/expr.rs", "status": "modified", "additions": 29, "deletions": 8, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/c283d3e64368d045ff5a9668f897be871b4f626c/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c283d3e64368d045ff5a9668f897be871b4f626c/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=c283d3e64368d045ff5a9668f897be871b4f626c", "patch": "@@ -24,7 +24,7 @@ use config::{Config, ControlBraceStyle, IndentStyle, MultilineStyle, Style};\n use items::{span_hi_for_arg, span_lo_for_arg};\n use lists::{definitive_tactic, itemize_list, shape_for_tactic, struct_lit_formatting,\n             struct_lit_shape, struct_lit_tactic, write_list, DefinitiveListTactic, ListFormatting,\n-            ListItem, ListTactic, SeparatorTactic};\n+            ListItem, ListTactic, Separator, SeparatorTactic};\n use macros::{rewrite_macro, MacroPosition};\n use patterns::{can_be_overflowed_pat, TuplePatField};\n use rewrite::{Rewrite, RewriteContext};\n@@ -488,7 +488,7 @@ where\n                 Some(width) => {\n                     let tactic =\n                         ListTactic::LimitedHorizontalVertical(context.config.array_width());\n-                    definitive_tactic(&items, tactic, width)\n+                    definitive_tactic(&items, tactic, Separator::Comma, width)\n                 }\n                 None => DefinitiveListTactic::Vertical,\n             }\n@@ -497,6 +497,7 @@ where\n             definitive_tactic(\n                 &items,\n                 ListTactic::LimitedHorizontalVertical(context.config.array_width()),\n+                Separator::Comma,\n                 nested_shape.width,\n             )\n         } else {\n@@ -594,7 +595,12 @@ fn rewrite_closure_fn_decl(\n         .width\n         .checked_sub(ret_str.len() + 1)\n         .unwrap_or(0);\n-    let tactic = definitive_tactic(&item_vec, ListTactic::HorizontalVertical, horizontal_budget);\n+    let tactic = definitive_tactic(\n+        &item_vec,\n+        ListTactic::HorizontalVertical,\n+        Separator::Comma,\n+        horizontal_budget,\n+    );\n     let arg_shape = match tactic {\n         DefinitiveListTactic::Horizontal => try_opt!(arg_shape.sub_width(ret_str.len() + 1)),\n         _ => arg_shape,\n@@ -1530,17 +1536,25 @@ fn rewrite_match(\n         return None;\n     }\n \n-    // 6 = `match `, 2 = ` {`\n+    // Do not take the rhs overhead from the upper expressions into account\n+    // when rewriting match condition.\n+    let new_width = try_opt!(context.config.max_width().checked_sub(shape.used_width()));\n+    let cond_shape = Shape {\n+        width: new_width,\n+        ..shape\n+    };\n+    // 6 = `match `\n     let cond_shape = match context.config.control_style() {\n-        Style::Legacy => try_opt!(shape.shrink_left(6).and_then(|s| s.sub_width(2))),\n-        Style::Rfc => try_opt!(shape.offset_left(6).and_then(|s| s.sub_width(2))),\n+        Style::Legacy => try_opt!(cond_shape.shrink_left(6)),\n+        Style::Rfc => try_opt!(cond_shape.offset_left(6)),\n     };\n     let cond_str = try_opt!(cond.rewrite(context, cond_shape));\n     let alt_block_sep = String::from(\"\\n\") + &shape.indent.block_only().to_string(context.config);\n     let block_sep = match context.config.control_brace_style() {\n         ControlBraceStyle::AlwaysNextLine => &alt_block_sep,\n         _ if last_line_extendable(&cond_str) => \" \",\n-        _ if cond_str.contains('\\n') => &alt_block_sep,\n+        // 2 = ` {`\n+        _ if cond_str.contains('\\n') || cond_str.len() + 2 > cond_shape.width => &alt_block_sep,\n         _ => \" \",\n     };\n \n@@ -1673,7 +1687,12 @@ fn rewrite_match_pattern(\n     );\n \n     let items: Vec<_> = pat_strs.into_iter().map(ListItem::from_str).collect();\n-    let tactic = definitive_tactic(&items, ListTactic::HorizontalVertical, pat_shape.width);\n+    let tactic = definitive_tactic(\n+        &items,\n+        ListTactic::HorizontalVertical,\n+        Separator::VerticalBar,\n+        pat_shape.width,\n+    );\n     let fmt = ListFormatting {\n         tactic: tactic,\n         separator: \" |\",\n@@ -2221,6 +2240,7 @@ where\n     let tactic = definitive_tactic(\n         &*item_vec,\n         ListTactic::LimitedHorizontalVertical(args_max_width),\n+        Separator::Comma,\n         one_line_width,\n     );\n \n@@ -2761,6 +2781,7 @@ where\n     let tactic = definitive_tactic(\n         &item_vec,\n         ListTactic::HorizontalVertical,\n+        Separator::Comma,\n         nested_shape.width,\n     );\n     let fmt = ListFormatting {"}, {"sha": "e0049698bfb014236133948247444c7b6258631a", "filename": "src/imports.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c283d3e64368d045ff5a9668f897be871b4f626c/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c283d3e64368d045ff5a9668f897be871b4f626c/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=c283d3e64368d045ff5a9668f897be871b4f626c", "patch": "@@ -17,7 +17,7 @@ use Shape;\n use codemap::SpanUtils;\n use config::IndentStyle;\n use lists::{definitive_tactic, itemize_list, write_list, DefinitiveListTactic, ListFormatting,\n-            ListItem, SeparatorTactic};\n+            ListItem, Separator, SeparatorTactic};\n use rewrite::{Rewrite, RewriteContext};\n use types::{rewrite_path, PathContext};\n use utils;\n@@ -451,6 +451,7 @@ fn rewrite_use_list(\n     let tactic = definitive_tactic(\n         &items[first_index..],\n         context.config.imports_layout(),\n+        Separator::Comma,\n         remaining_width,\n     );\n "}, {"sha": "d8afbe29b99cbf42bec4aa856b0ecbe2dfbb220f", "filename": "src/items.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c283d3e64368d045ff5a9668f897be871b4f626c/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c283d3e64368d045ff5a9668f897be871b4f626c/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=c283d3e64368d045ff5a9668f897be871b4f626c", "patch": "@@ -23,7 +23,7 @@ use config::{BraceStyle, Config, Density, IndentStyle, ReturnIndent, Style};\n use expr::{format_expr, is_empty_block, is_simple_block_stmt, rewrite_assign_rhs,\n            rewrite_call_inner, ExprType};\n use lists::{definitive_tactic, itemize_list, write_list, DefinitiveListTactic, ListFormatting,\n-            ListItem, ListTactic, SeparatorTactic};\n+            ListItem, ListTactic, Separator, SeparatorTactic};\n use rewrite::{Rewrite, RewriteContext};\n use types::join_bounds;\n use utils::{colon_spaces, contains_skip, end_typaram, format_defaultness, format_mutability,\n@@ -2244,6 +2244,7 @@ fn rewrite_args(\n     let tactic = definitive_tactic(\n         &arg_items,\n         context.config.fn_args_density().to_list_tactic(),\n+        Separator::Comma,\n         one_line_budget,\n     );\n     let budget = match tactic {\n@@ -2426,7 +2427,12 @@ where\n {\n     let item_vec = items.collect::<Vec<_>>();\n \n-    let tactic = definitive_tactic(&item_vec, ListTactic::HorizontalVertical, one_line_budget);\n+    let tactic = definitive_tactic(\n+        &item_vec,\n+        ListTactic::HorizontalVertical,\n+        Separator::Comma,\n+        one_line_budget,\n+    );\n     let fmt = ListFormatting {\n         tactic: tactic,\n         separator: \",\",\n@@ -2639,7 +2645,12 @@ fn rewrite_where_clause(\n     let item_vec = items.collect::<Vec<_>>();\n     // FIXME: we don't need to collect here if the where_layout isn't\n     // HorizontalVertical.\n-    let tactic = definitive_tactic(&item_vec, context.config.where_layout(), budget);\n+    let tactic = definitive_tactic(\n+        &item_vec,\n+        context.config.where_layout(),\n+        Separator::Comma,\n+        budget,\n+    );\n \n     let mut comma_tactic = context.config.trailing_comma();\n     // Kind of a hack because we don't usually have trailing commas in where clauses."}, {"sha": "048f11a18561a4a9cdd87a0dc33d8fe42b64cab5", "filename": "src/lists.rs", "status": "modified", "additions": 26, "deletions": 4, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c283d3e64368d045ff5a9668f897be871b4f626c/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c283d3e64368d045ff5a9668f897be871b4f626c/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=c283d3e64368d045ff5a9668f897be871b4f626c", "patch": "@@ -135,7 +135,30 @@ impl DefinitiveListTactic {\n     }\n }\n \n-pub fn definitive_tactic<I, T>(items: I, tactic: ListTactic, width: usize) -> DefinitiveListTactic\n+/// The type of separator for lists.\n+#[derive(Eq, PartialEq, Debug)]\n+pub enum Separator {\n+    Comma,\n+    VerticalBar,\n+}\n+\n+impl Separator {\n+    pub fn len(&self) -> usize {\n+        match *self {\n+            // 2 = `, `\n+            Separator::Comma => 2,\n+            // 3 = ` | `\n+            Separator::VerticalBar => 3,\n+        }\n+    }\n+}\n+\n+pub fn definitive_tactic<I, T>(\n+    items: I,\n+    tactic: ListTactic,\n+    sep: Separator,\n+    width: usize,\n+) -> DefinitiveListTactic\n where\n     I: IntoIterator<Item = T> + Clone,\n     T: AsRef<ListItem>,\n@@ -155,8 +178,7 @@ where\n     };\n \n     let (sep_count, total_width) = calculate_width(items.clone());\n-    let sep_len = \", \".len(); // FIXME: make more generic?\n-    let total_sep_len = sep_len * sep_count.checked_sub(1).unwrap_or(0);\n+    let total_sep_len = sep.len() * sep_count.checked_sub(1).unwrap_or(0);\n     let real_total = total_width + total_sep_len;\n \n     if real_total <= limit && !pre_line_comments &&\n@@ -640,7 +662,7 @@ pub fn struct_lit_tactic(\n             (IndentStyle::Visual, 1) => ListTactic::HorizontalVertical,\n             _ => context.config.struct_lit_multiline_style().to_list_tactic(),\n         };\n-        definitive_tactic(items, prelim_tactic, h_shape.width)\n+        definitive_tactic(items, prelim_tactic, Separator::Comma, h_shape.width)\n     } else {\n         DefinitiveListTactic::Vertical\n     }"}, {"sha": "8e0cf2436dee3b53652edb1fdd17312fd101c36d", "filename": "src/types.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c283d3e64368d045ff5a9668f897be871b4f626c/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c283d3e64368d045ff5a9668f897be871b4f626c/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=c283d3e64368d045ff5a9668f897be871b4f626c", "patch": "@@ -22,7 +22,7 @@ use codemap::SpanUtils;\n use config::{IndentStyle, Style, TypeDensity};\n use expr::{rewrite_pair, rewrite_tuple, rewrite_unary_prefix, wrap_args_with_parens};\n use items::{format_generics_item_list, generics_shape_from_config};\n-use lists::{definitive_tactic, itemize_list, write_list, ListFormatting, ListTactic,\n+use lists::{definitive_tactic, itemize_list, write_list, ListFormatting, ListTactic, Separator,\n             SeparatorTactic};\n use rewrite::{Rewrite, RewriteContext};\n use utils::{colon_spaces, extra_offset, format_mutability, last_line_width, mk_sp, wrap_str};\n@@ -348,7 +348,12 @@ where\n \n     let item_vec: Vec<_> = items.collect();\n \n-    let tactic = definitive_tactic(&*item_vec, ListTactic::HorizontalVertical, budget);\n+    let tactic = definitive_tactic(\n+        &*item_vec,\n+        ListTactic::HorizontalVertical,\n+        Separator::Comma,\n+        budget,\n+    );\n \n     let fmt = ListFormatting {\n         tactic: tactic,"}, {"sha": "7f43fa8681a42c0925374f661acb2d4e069a4b8f", "filename": "src/vertical.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c283d3e64368d045ff5a9668f897be871b4f626c/src%2Fvertical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c283d3e64368d045ff5a9668f897be871b4f626c/src%2Fvertical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvertical.rs?ref=c283d3e64368d045ff5a9668f897be871b4f626c", "patch": "@@ -20,7 +20,7 @@ use codemap::SpanUtils;\n use comment::contains_comment;\n use expr::rewrite_field;\n use items::{rewrite_struct_field, rewrite_struct_field_prefix};\n-use lists::{definitive_tactic, itemize_list, write_list, ListFormatting, ListTactic};\n+use lists::{definitive_tactic, itemize_list, write_list, ListFormatting, ListTactic, Separator};\n use rewrite::{Rewrite, RewriteContext};\n use utils::{contains_skip, mk_sp};\n \n@@ -221,7 +221,12 @@ fn rewrite_aligned_items_inner<T: AlignedItem>(\n         span.hi,\n     ).collect::<Vec<_>>();\n \n-    let tactic = definitive_tactic(&items, ListTactic::HorizontalVertical, one_line_width);\n+    let tactic = definitive_tactic(\n+        &items,\n+        ListTactic::HorizontalVertical,\n+        Separator::Comma,\n+        one_line_width,\n+    );\n \n     let fmt = ListFormatting {\n         tactic: tactic,"}, {"sha": "cd55c7a1a61a8f7bcbd93c3e40956bb0a0d7fe35", "filename": "tests/source/match.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c283d3e64368d045ff5a9668f897be871b4f626c/tests%2Fsource%2Fmatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c283d3e64368d045ff5a9668f897be871b4f626c/tests%2Fsource%2Fmatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fmatch.rs?ref=c283d3e64368d045ff5a9668f897be871b4f626c", "patch": "@@ -388,3 +388,23 @@ fn issue525() {\n         TaskState::Failed => \"failed\",\n     });\n }\n+\n+// #1838, #1839\n+fn match_with_near_max_width() {\n+    let (this_line_uses_99_characters_and_is_formatted_properly, x012345) = match some_expression   {\n+        _ => unimplemented!(),\n+    };\n+\n+    let (should_be_formatted_like_the_line_above_using_100_characters, x0) = match some_expression  {\n+        _ => unimplemented!(),\n+    };\n+\n+    let (should_put_the_brace_on_the_next_line_using_101_characters, x0000) = match some_expression\n+    {\n+        _ => unimplemented!(),\n+    };\n+    match m {\n+        Variant::Tag | Variant::Tag2 | Variant::Tag3 | Variant::Tag4 | Variant::Tag5 | Variant::Tag6 =>\n+        {}\n+    }\n+}"}, {"sha": "cb4d6c1ed62ddaafad7a470426042331ac7eb56d", "filename": "tests/target/match.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c283d3e64368d045ff5a9668f897be871b4f626c/tests%2Ftarget%2Fmatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c283d3e64368d045ff5a9668f897be871b4f626c/tests%2Ftarget%2Fmatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmatch.rs?ref=c283d3e64368d045ff5a9668f897be871b4f626c", "patch": "@@ -426,3 +426,27 @@ fn issue525() {\n         },\n     );\n }\n+\n+// #1838, #1839\n+fn match_with_near_max_width() {\n+    let (this_line_uses_99_characters_and_is_formatted_properly, x012345) = match some_expression {\n+        _ => unimplemented!(),\n+    };\n+\n+    let (should_be_formatted_like_the_line_above_using_100_characters, x0) = match some_expression {\n+        _ => unimplemented!(),\n+    };\n+\n+    let (should_put_the_brace_on_the_next_line_using_101_characters, x0000) = match some_expression\n+    {\n+        _ => unimplemented!(),\n+    };\n+    match m {\n+        Variant::Tag |\n+        Variant::Tag2 |\n+        Variant::Tag3 |\n+        Variant::Tag4 |\n+        Variant::Tag5 |\n+        Variant::Tag6 => {}\n+    }\n+}"}]}