{"sha": "f87578d9fbf37f76fc1ccd3eb92ef24f8b2a0b31", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4NzU3OGQ5ZmJmMzdmNzZmYzFjY2QzZWI5MmVmMjRmOGIyYTBiMzE=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-09-07T18:52:31Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-09-07T19:31:48Z"}, "message": "fix repr of strings/chars with quotes\n\nCloses #8743", "tree": {"sha": "5bb7fd6fad7367f3993668d5b10c70580567c643", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5bb7fd6fad7367f3993668d5b10c70580567c643"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f87578d9fbf37f76fc1ccd3eb92ef24f8b2a0b31", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f87578d9fbf37f76fc1ccd3eb92ef24f8b2a0b31", "html_url": "https://github.com/rust-lang/rust/commit/f87578d9fbf37f76fc1ccd3eb92ef24f8b2a0b31", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f87578d9fbf37f76fc1ccd3eb92ef24f8b2a0b31/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa1d4ef55a1f544c245f0ef163a3292dbbb9393a", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa1d4ef55a1f544c245f0ef163a3292dbbb9393a", "html_url": "https://github.com/rust-lang/rust/commit/aa1d4ef55a1f544c245f0ef163a3292dbbb9393a"}], "stats": {"total": 27, "additions": 22, "deletions": 5}, "files": [{"sha": "9873317738d6a20ba0c0c67a2cfe9d85d7f2e4cc", "filename": "src/libstd/repr.rs", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f87578d9fbf37f76fc1ccd3eb92ef24f8b2a0b31/src%2Flibstd%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f87578d9fbf37f76fc1ccd3eb92ef24f8b2a0b31/src%2Flibstd%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frepr.rs?ref=f87578d9fbf37f76fc1ccd3eb92ef24f8b2a0b31", "patch": "@@ -178,7 +178,7 @@ impl<'self> ReprVisitor<'self> {\n     pub fn write_escaped_slice(&mut self, slice: &str) {\n         self.writer.write(['\"' as u8]);\n         for ch in slice.iter() {\n-            self.write_escaped_char(ch);\n+            self.write_escaped_char(ch, true);\n         }\n         self.writer.write(['\"' as u8]);\n     }\n@@ -230,14 +230,26 @@ impl<'self> ReprVisitor<'self> {\n                              v.fill, inner)\n     }\n \n-    fn write_escaped_char(&mut self, ch: char) {\n+    fn write_escaped_char(&mut self, ch: char, is_str: bool) {\n         match ch {\n             '\\t' => self.writer.write(\"\\\\t\".as_bytes()),\n             '\\r' => self.writer.write(\"\\\\r\".as_bytes()),\n             '\\n' => self.writer.write(\"\\\\n\".as_bytes()),\n             '\\\\' => self.writer.write(\"\\\\\\\\\".as_bytes()),\n-            '\\'' => self.writer.write(\"\\\\'\".as_bytes()),\n-            '\"' => self.writer.write(\"\\\\\\\"\".as_bytes()),\n+            '\\'' => {\n+                if is_str {\n+                    self.writer.write(\"'\".as_bytes())\n+                } else {\n+                    self.writer.write(\"\\\\'\".as_bytes())\n+                }\n+            }\n+            '\"' => {\n+                if is_str {\n+                    self.writer.write(\"\\\\\\\"\".as_bytes())\n+                } else {\n+                    self.writer.write(\"\\\"\".as_bytes())\n+                }\n+            }\n             '\\x20'..'\\x7e' => self.writer.write([ch as u8]),\n             _ => {\n                 do char::escape_unicode(ch) |c| {\n@@ -274,7 +286,7 @@ impl<'self> TyVisitor for ReprVisitor<'self> {\n     fn visit_char(&mut self) -> bool {\n         do self.get::<char> |this, &ch| {\n             this.writer.write(['\\'' as u8]);\n-            this.write_escaped_char(ch);\n+            this.write_escaped_char(ch, false);\n             this.writer.write(['\\'' as u8]);\n         }\n     }\n@@ -684,6 +696,11 @@ fn test_repr() {\n     exact_test(&(10u64, ~\"hello\"),\n                \"(10u64, ~\\\"hello\\\")\");\n \n+    exact_test(&'\\'', \"'\\\\''\");\n+    exact_test(&'\"', \"'\\\"'\");\n+    exact_test(&(\"'\"), \"\\\"'\\\"\");\n+    exact_test(&(\"\\\"\"), \"\\\"\\\\\\\"\\\"\");\n+\n     exact_test(&println, \"fn(&str)\");\n     exact_test(&swap::<int>, \"fn(&mut int, &mut int)\");\n     exact_test(&is_alphabetic, \"fn(char) -> bool\");"}]}