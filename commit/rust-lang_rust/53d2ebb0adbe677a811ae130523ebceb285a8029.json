{"sha": "53d2ebb0adbe677a811ae130523ebceb285a8029", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzZDJlYmIwYWRiZTY3N2E4MTFhZTEzMDUyM2ViY2ViMjg1YTgwMjk=", "commit": {"author": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-07-03T17:38:14Z"}, "committer": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-07-18T08:53:08Z"}, "message": "Implement existential types", "tree": {"sha": "aa5bf290ab3240ee1028359cef335f22dc1a2cdb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa5bf290ab3240ee1028359cef335f22dc1a2cdb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/53d2ebb0adbe677a811ae130523ebceb285a8029", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/53d2ebb0adbe677a811ae130523ebceb285a8029", "html_url": "https://github.com/rust-lang/rust/commit/53d2ebb0adbe677a811ae130523ebceb285a8029", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/53d2ebb0adbe677a811ae130523ebceb285a8029/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c84d8187395b641616649a0f16f15a78ea8bbce", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c84d8187395b641616649a0f16f15a78ea8bbce", "html_url": "https://github.com/rust-lang/rust/commit/1c84d8187395b641616649a0f16f15a78ea8bbce"}], "stats": {"total": 1502, "additions": 1385, "deletions": 117}, "files": [{"sha": "1c355e35fd6eafffbc048e23c6fe21dae2874291", "filename": "src/librustc/hir/def.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Flibrustc%2Fhir%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Flibrustc%2Fhir%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "patch": "@@ -37,11 +37,15 @@ pub enum Def {\n     Enum(DefId),\n     Variant(DefId),\n     Trait(DefId),\n+    /// `existential type Foo: Bar;`\n     Existential(DefId),\n+    /// `type Foo = Bar;`\n     TyAlias(DefId),\n     TyForeign(DefId),\n     TraitAlias(DefId),\n     AssociatedTy(DefId),\n+    /// `existential type Foo: Bar;`\n+    AssociatedExistential(DefId),\n     PrimTy(hir::PrimTy),\n     TyParam(DefId),\n     SelfTy(Option<DefId> /* trait */, Option<DefId> /* impl */),\n@@ -245,7 +249,7 @@ impl Def {\n             Def::AssociatedTy(id) | Def::TyParam(id) | Def::Struct(id) | Def::StructCtor(id, ..) |\n             Def::Union(id) | Def::Trait(id) | Def::Method(id) | Def::Const(id) |\n             Def::AssociatedConst(id) | Def::Macro(id, ..) |\n-            Def::Existential(id) |\n+            Def::Existential(id) | Def::AssociatedExistential(id) |\n             Def::GlobalAsm(id) | Def::TyForeign(id) => {\n                 id\n             }\n@@ -276,6 +280,7 @@ impl Def {\n             Def::TyAlias(..) => \"type alias\",\n             Def::TraitAlias(..) => \"trait alias\",\n             Def::AssociatedTy(..) => \"associated type\",\n+            Def::AssociatedExistential(..) => \"associated existential type\",\n             Def::Struct(..) => \"struct\",\n             Def::StructCtor(.., CtorKind::Fn) => \"tuple struct\",\n             Def::StructCtor(.., CtorKind::Const) => \"unit struct\","}, {"sha": "4274cd3a0a6559e6759a13b5734714503f22588c", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "patch": "@@ -907,6 +907,10 @@ pub fn walk_impl_item<'v, V: Visitor<'v>>(visitor: &mut V, impl_item: &'v ImplIt\n             visitor.visit_id(impl_item.id);\n             visitor.visit_ty(ty);\n         }\n+        ImplItemKind::Existential(ref bounds) => {\n+            visitor.visit_id(impl_item.id);\n+            walk_list!(visitor, visit_param_bound, bounds);\n+        }\n     }\n }\n "}, {"sha": "80e9b4caef5f1a49d73dbc880d187cf12eb46388", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "patch": "@@ -323,6 +323,7 @@ impl<'a> LoweringContext<'a> {\n                     | ItemKind::Union(_, ref generics)\n                     | ItemKind::Enum(_, ref generics)\n                     | ItemKind::Ty(_, ref generics)\n+                    | ItemKind::Existential(_, ref generics)\n                     | ItemKind::Trait(_, _, ref generics, ..) => {\n                         let def_id = self.lctx.resolver.definitions().local_def_id(item.id);\n                         let count = generics\n@@ -2632,6 +2633,11 @@ impl<'a> LoweringContext<'a> {\n                 self.lower_ty(t, ImplTraitContext::Disallowed),\n                 self.lower_generics(generics, ImplTraitContext::Disallowed),\n             ),\n+            ItemKind::Existential(ref b, ref generics) => hir::ItemKind::Existential(hir::ExistTy {\n+                generics: self.lower_generics(generics, ImplTraitContext::Disallowed),\n+                bounds: self.lower_param_bounds(b, ImplTraitContext::Disallowed),\n+                impl_trait_fn: None,\n+            }),\n             ItemKind::Enum(ref enum_definition, ref generics) => hir::ItemKind::Enum(\n                 hir::EnumDef {\n                     variants: enum_definition\n@@ -3037,6 +3043,12 @@ impl<'a> LoweringContext<'a> {\n                 self.lower_generics(&i.generics, ImplTraitContext::Disallowed),\n                 hir::ImplItemKind::Type(self.lower_ty(ty, ImplTraitContext::Disallowed)),\n             ),\n+            ImplItemKind::Existential(ref bounds) => (\n+                self.lower_generics(&i.generics, ImplTraitContext::Disallowed),\n+                hir::ImplItemKind::Existential(\n+                    self.lower_param_bounds(bounds, ImplTraitContext::Disallowed),\n+                ),\n+            ),\n             ImplItemKind::Macro(..) => panic!(\"Shouldn't exist any more\"),\n         };\n \n@@ -3065,6 +3077,7 @@ impl<'a> LoweringContext<'a> {\n             kind: match i.node {\n                 ImplItemKind::Const(..) => hir::AssociatedItemKind::Const,\n                 ImplItemKind::Type(..) => hir::AssociatedItemKind::Type,\n+                ImplItemKind::Existential(..) => hir::AssociatedItemKind::Existential,\n                 ImplItemKind::Method(ref sig, _) => hir::AssociatedItemKind::Method {\n                     has_self: sig.decl.has_self(),\n                 },\n@@ -4331,7 +4344,7 @@ impl<'a> LoweringContext<'a> {\n         respan(v.span, node)\n     }\n \n-    fn lower_defaultness(&mut self, d: Defaultness, has_value: bool) -> hir::Defaultness {\n+    fn lower_defaultness(&self, d: Defaultness, has_value: bool) -> hir::Defaultness {\n         match d {\n             Defaultness::Default => hir::Defaultness::Default {\n                 has_value: has_value,"}, {"sha": "cab620aeec548317a71eff72c2065a0f67b56f0a", "filename": "src/librustc/hir/map/def_collector.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "patch": "@@ -116,7 +116,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n             ItemKind::Impl(..) => DefPathData::Impl,\n             ItemKind::Trait(..) => DefPathData::Trait(i.ident.as_interned_str()),\n             ItemKind::Enum(..) | ItemKind::Struct(..) | ItemKind::Union(..) |\n-            ItemKind::TraitAlias(..) |\n+            ItemKind::TraitAlias(..) | ItemKind::Existential(..) |\n             ItemKind::ExternCrate(..) | ItemKind::ForeignMod(..) | ItemKind::Ty(..) =>\n                 DefPathData::TypeNs(i.ident.as_interned_str()),\n             ItemKind::Mod(..) if i.ident == keywords::Invalid.ident() => {\n@@ -250,6 +250,9 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n             ImplItemKind::Method(..) | ImplItemKind::Const(..) =>\n                 DefPathData::ValueNs(ii.ident.as_interned_str()),\n             ImplItemKind::Type(..) => DefPathData::AssocTypeInImpl(ii.ident.as_interned_str()),\n+            ImplItemKind::Existential(..) => {\n+                DefPathData::AssocExistentialInImpl(ii.ident.as_interned_str())\n+            },\n             ImplItemKind::Macro(..) => return self.visit_macro_invoc(ii.id),\n         };\n "}, {"sha": "c4b28fe2c4332ad5b1a077f48128f271ce9675d6", "filename": "src/librustc/hir/map/definitions.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "patch": "@@ -330,6 +330,8 @@ pub enum DefPathData {\n     AssocTypeInTrait(InternedString),\n     /// An associated type **value** (i.e., in an impl)\n     AssocTypeInImpl(InternedString),\n+    /// An existential associated type **value** (i.e., in an impl)\n+    AssocExistentialInImpl(InternedString),\n     /// Something in the type NS\n     TypeNs(InternedString),\n     /// Something in the value NS\n@@ -605,6 +607,7 @@ impl DefPathData {\n             Trait(name) |\n             AssocTypeInTrait(name) |\n             AssocTypeInImpl(name) |\n+            AssocExistentialInImpl(name) |\n             ValueNs(name) |\n             Module(name) |\n             MacroDef(name) |\n@@ -631,6 +634,7 @@ impl DefPathData {\n             Trait(name) |\n             AssocTypeInTrait(name) |\n             AssocTypeInImpl(name) |\n+            AssocExistentialInImpl(name) |\n             ValueNs(name) |\n             Module(name) |\n             MacroDef(name) |"}, {"sha": "49231e58cf0fc574d39cad754c6f46cea58dbf22", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "patch": "@@ -470,6 +470,7 @@ impl<'hir> Map<'hir> {\n                     ImplItemKind::Const(..) => Some(Def::AssociatedConst(def_id)),\n                     ImplItemKind::Method(..) => Some(Def::Method(def_id)),\n                     ImplItemKind::Type(..) => Some(Def::AssociatedTy(def_id)),\n+                    ImplItemKind::Existential(..) => Some(Def::AssociatedExistential(def_id)),\n                 }\n             }\n             NodeVariant(variant) => {\n@@ -1323,7 +1324,7 @@ fn node_id_to_string(map: &Map, id: NodeId, include_id: bool) -> String {\n                 ItemKind::ForeignMod(..) => \"foreign mod\",\n                 ItemKind::GlobalAsm(..) => \"global asm\",\n                 ItemKind::Ty(..) => \"ty\",\n-                ItemKind::Existential(..) => \"existential\",\n+                ItemKind::Existential(..) => \"existential type\",\n                 ItemKind::Enum(..) => \"enum\",\n                 ItemKind::Struct(..) => \"struct\",\n                 ItemKind::Union(..) => \"union\",\n@@ -1347,6 +1348,9 @@ fn node_id_to_string(map: &Map, id: NodeId, include_id: bool) -> String {\n                 ImplItemKind::Type(_) => {\n                     format!(\"assoc type {} in {}{}\", ii.ident, path_str(), id_str)\n                 }\n+                ImplItemKind::Existential(_) => {\n+                    format!(\"assoc existential type {} in {}{}\", ii.ident, path_str(), id_str)\n+                }\n             }\n         }\n         Some(NodeTraitItem(ti)) => {"}, {"sha": "b16c97172f1c3a716cb5acbf8a5303b1bf3c59fd", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "patch": "@@ -1620,6 +1620,8 @@ pub enum ImplItemKind {\n     Method(MethodSig, BodyId),\n     /// An associated type\n     Type(P<Ty>),\n+    /// An associated existential type\n+    Existential(GenericBounds),\n }\n \n // Bind a type to an associated type: `A=Foo`.\n@@ -2080,7 +2082,7 @@ pub enum ItemKind {\n     GlobalAsm(P<GlobalAsm>),\n     /// A type alias, e.g. `type Foo = Bar<u8>`\n     Ty(P<Ty>, Generics),\n-    /// A type alias, e.g. `type Foo = Bar<u8>`\n+    /// An existential type definition, e.g. `existential type Foo: Bar;`\n     Existential(ExistTy),\n     /// An enum definition, e.g. `enum Foo<A, B> {C<A>, D<B>}`\n     Enum(EnumDef, Generics),\n@@ -2138,6 +2140,7 @@ impl ItemKind {\n         Some(match *self {\n             ItemKind::Fn(_, _, ref generics, _) |\n             ItemKind::Ty(_, ref generics) |\n+            ItemKind::Existential(ExistTy { ref generics, impl_trait_fn: None, .. }) |\n             ItemKind::Enum(_, ref generics) |\n             ItemKind::Struct(_, ref generics) |\n             ItemKind::Union(_, ref generics) |\n@@ -2184,6 +2187,7 @@ pub enum AssociatedItemKind {\n     Const,\n     Method { has_self: bool },\n     Type,\n+    Existential,\n }\n \n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]"}, {"sha": "4499a378be21a928a435fefcc00588186c2511c1", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "patch": "@@ -627,9 +627,7 @@ impl<'a> State<'a> {\n                 self.end()?\n             }\n             hir::ItemKind::Ty(ref ty, ref generics) => {\n-                self.ibox(indent_unit)?;\n-                self.ibox(0)?;\n-                self.word_nbsp(&visibility_qualified(&item.vis, \"type\"))?;\n+                self.head(&visibility_qualified(&item.vis, \"type\"))?;\n                 self.print_name(item.name)?;\n                 self.print_generic_params(&generics.params)?;\n                 self.end()?; // end the inner ibox\n@@ -642,9 +640,7 @@ impl<'a> State<'a> {\n                 self.end()?; // end the outer ibox\n             }\n             hir::ItemKind::Existential(ref exist) => {\n-                self.ibox(indent_unit)?;\n-                self.ibox(0)?;\n-                self.word_nbsp(&visibility_qualified(&item.vis, \"existential type\"))?;\n+                self.head(&visibility_qualified(&item.vis, \"existential type\"))?;\n                 self.print_name(item.name)?;\n                 self.print_generic_params(&exist.generics.params)?;\n                 self.end()?; // end the inner ibox\n@@ -994,6 +990,10 @@ impl<'a> State<'a> {\n             hir::ImplItemKind::Type(ref ty) => {\n                 self.print_associated_type(ii.ident, None, Some(ty))?;\n             }\n+            hir::ImplItemKind::Existential(ref bounds) => {\n+                self.word_space(\"existential\")?;\n+                self.print_associated_type(ii.ident, Some(bounds), None)?;\n+            }\n         }\n         self.ann.post(self, NodeSubItem(ii.id))\n     }"}, {"sha": "2ce7749172b19d08192127fa552f54ec14d26af5", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "patch": "@@ -701,6 +701,7 @@ impl<'a> HashStable<StableHashingContext<'a>> for hir::ImplItem {\n impl_stable_hash_for!(enum hir::ImplItemKind {\n     Const(t, body),\n     Method(sig, body),\n+    Existential(bounds),\n     Type(t)\n });\n \n@@ -890,6 +891,7 @@ impl<'a> HashStable<StableHashingContext<'a>> for hir::AssociatedItemKind {\n         mem::discriminant(self).hash_stable(hcx, hasher);\n         match *self {\n             hir::AssociatedItemKind::Const |\n+            hir::AssociatedItemKind::Existential |\n             hir::AssociatedItemKind::Type => {\n                 // No fields to hash.\n             }\n@@ -997,6 +999,7 @@ impl_stable_hash_for!(enum hir::def::Def {\n     TyAlias(def_id),\n     TraitAlias(def_id),\n     AssociatedTy(def_id),\n+    AssociatedExistential(def_id),\n     PrimTy(prim_ty),\n     TyParam(def_id),\n     SelfTy(trait_def_id, impl_def_id),"}, {"sha": "cb685f83aba1eb670852fcb33970e6fb4a5a98f8", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "patch": "@@ -1055,6 +1055,7 @@ impl_stable_hash_for!(struct ty::AssociatedItem {\n impl_stable_hash_for!(enum ty::AssociatedKind {\n     Const,\n     Method,\n+    Existential,\n     Type\n });\n "}, {"sha": "5e731871e2851e1497dc6c58d56355335ff52e78", "filename": "src/librustc/infer/anon_types/mod.rs", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Flibrustc%2Finfer%2Fanon_types%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Flibrustc%2Finfer%2Fanon_types%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fanon_types%2Fmod.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "patch": "@@ -691,10 +691,22 @@ impl<'a, 'gcx, 'tcx> Instantiator<'a, 'gcx, 'tcx> {\n                     // ```\n                     if let Some(anon_node_id) = tcx.hir.as_local_node_id(def_id) {\n                         let anon_parent_def_id = match tcx.hir.expect_item(anon_node_id).node {\n+                            // impl trait\n                             hir::ItemKind::Existential(hir::ExistTy {\n                                 impl_trait_fn: Some(parent),\n                                 ..\n                             }) => parent,\n+                            // named existential types\n+                            hir::ItemKind::Existential(hir::ExistTy {\n+                                impl_trait_fn: None,\n+                                ..\n+                            }) if may_define_existential_type(\n+                                tcx,\n+                                self.parent_def_id,\n+                                anon_node_id,\n+                            ) => {\n+                                return self.fold_anon_ty(ty, def_id, substs);\n+                            },\n                             _ => {\n                                 let anon_parent_node_id = tcx.hir.get_parent(anon_node_id);\n                                 tcx.hir.local_def_id(anon_parent_node_id)\n@@ -742,6 +754,10 @@ impl<'a, 'gcx, 'tcx> Instantiator<'a, 'gcx, 'tcx> {\n         let ty_var = infcx.next_ty_var(TypeVariableOrigin::TypeInference(span));\n \n         let predicates_of = tcx.predicates_of(def_id);\n+        debug!(\n+            \"instantiate_anon_types: predicates: {:#?}\",\n+            predicates_of,\n+        );\n         let bounds = predicates_of.instantiate(tcx, substs);\n         debug!(\"instantiate_anon_types: bounds={:?}\", bounds);\n \n@@ -751,6 +767,18 @@ impl<'a, 'gcx, 'tcx> Instantiator<'a, 'gcx, 'tcx> {\n             required_region_bounds\n         );\n \n+        // make sure that we are in fact defining the *entire* type\n+        // e.g. `existential type Foo<T: Bound>: Bar;` needs to be\n+        // defined by a function like `fn foo<T: Bound>() -> Foo<T>`.\n+        debug!(\n+            \"instantiate_anon_types: param_env: {:#?}\",\n+            self.param_env,\n+        );\n+        debug!(\n+            \"instantiate_anon_types: generics: {:#?}\",\n+            tcx.generics_of(def_id),\n+        );\n+\n         self.anon_types.insert(\n             def_id,\n             AnonTypeDecl {\n@@ -778,3 +806,25 @@ impl<'a, 'gcx, 'tcx> Instantiator<'a, 'gcx, 'tcx> {\n         ty_var\n     }\n }\n+\n+/// Whether `anon_node_id` is a sibling or a child of a sibling of `def_id`\n+pub fn may_define_existential_type(\n+    tcx: TyCtxt,\n+    def_id: DefId,\n+    anon_node_id: ast::NodeId,\n+) -> bool {\n+    let mut node_id = tcx\n+        .hir\n+        .as_local_node_id(def_id)\n+        .unwrap();\n+    // named existential types can be defined by any siblings or\n+    // children of siblings\n+    let mod_id = tcx.hir.get_parent(anon_node_id);\n+    // so we walk up the node tree until we hit the root or the parent\n+    // of the anon type\n+    while node_id != mod_id && node_id != ast::CRATE_NODE_ID {\n+        node_id = tcx.hir.get_parent(node_id);\n+    }\n+    // syntactically we are allowed to define the concrete type\n+    node_id == mod_id\n+}"}, {"sha": "1ec9c9489e9b7b60c17e0d3f0df405226d184a7e", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "patch": "@@ -279,7 +279,9 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     fn impl_item_scope_tag(item: &hir::ImplItem) -> &'static str {\n         match item.node {\n             hir::ImplItemKind::Method(..) => \"method body\",\n-            hir::ImplItemKind::Const(..) | hir::ImplItemKind::Type(_) => \"associated item\",\n+            hir::ImplItemKind::Const(..) |\n+            hir::ImplItemKind::Existential(..) |\n+            hir::ImplItemKind::Type(..) => \"associated item\",\n         }\n     }\n "}, {"sha": "aa1951efba37e19824b3b7d26744858d3ac2f6b7", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "patch": "@@ -622,6 +622,7 @@ impl<'a, 'tcx> Visitor<'tcx> for DeadVisitor<'a, 'tcx> {\n                 }\n                 self.visit_nested_body(body_id)\n             }\n+            hir::ImplItemKind::Existential(..) |\n             hir::ImplItemKind::Type(..) => {}\n         }\n     }"}, {"sha": "7f4b0bb126bbe46fe1173e74eadae93361e03d96", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "patch": "@@ -210,6 +210,7 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n                             }\n                         }\n                     }\n+                    hir::ImplItemKind::Existential(..) |\n                     hir::ImplItemKind::Type(_) => false,\n                 }\n             }\n@@ -319,6 +320,7 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n                             self.visit_nested_body(body)\n                         }\n                     }\n+                    hir::ImplItemKind::Existential(..) |\n                     hir::ImplItemKind::Type(_) => {}\n                 }\n             }"}, {"sha": "39a57e985e89bd6e2f1673c74e48401bd365c4cd", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 54, "deletions": 17, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "patch": "@@ -627,6 +627,30 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n             }\n             hir::TyKind::Path(hir::QPath::Resolved(None, ref path)) => {\n                 if let Def::Existential(exist_ty_did) = path.def {\n+                    let id = self.tcx.hir.as_local_node_id(exist_ty_did).unwrap();\n+\n+                    // Resolve the lifetimes in the bounds to the lifetime defs in the generics.\n+                    // `fn foo<'a>() -> impl MyTrait<'a> { ... }` desugars to\n+                    // `abstract type MyAnonTy<'b>: MyTrait<'b>;`\n+                    //                          ^            ^ this gets resolved in the scope of\n+                    //                                         the exist_ty generics\n+                    let (generics, bounds) = match self.tcx.hir.expect_item(id).node {\n+                        // named existential types don't need these hacks\n+                        hir::ItemKind::Existential(hir::ExistTy{ impl_trait_fn: None, .. }) => {\n+                            intravisit::walk_ty(self, ty);\n+                            return;\n+                        },\n+                        hir::ItemKind::Existential(hir::ExistTy{\n+                            ref generics,\n+                            ref bounds,\n+                            ..\n+                        }) => (\n+                            generics,\n+                            bounds,\n+                        ),\n+                        ref i => bug!(\"impl Trait pointed to non-existential type?? {:#?}\", i),\n+                    };\n+\n                     assert!(exist_ty_did.is_local());\n                     // Resolve the lifetimes that are applied to the existential type.\n                     // These are resolved in the current scope.\n@@ -667,23 +691,6 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                         }\n                     }\n \n-                    let id = self.tcx.hir.as_local_node_id(exist_ty_did).unwrap();\n-\n-                    // Resolve the lifetimes in the bounds to the lifetime defs in the generics.\n-                    // `fn foo<'a>() -> impl MyTrait<'a> { ... }` desugars to\n-                    // `abstract type MyAnonTy<'b>: MyTrait<'b>;`\n-                    //                          ^            ^ this gets resolved in the scope of\n-                    //                                         the exist_ty generics\n-                    let (generics, bounds) = match self.tcx.hir.expect_item(id).node {\n-                        hir::ItemKind::Existential(\n-                            hir::ExistTy { ref generics, ref bounds, .. }\n-                        ) => (\n-                            generics,\n-                            bounds,\n-                        ),\n-                        ref i => bug!(\"impl Trait pointed to non-existential type?? {:#?}\", i),\n-                    };\n-\n                     // We want to start our early-bound indices at the end of the parent scope,\n                     // not including any parent `impl Trait`s.\n                     let mut index = self.next_early_index_for_abstract_type();\n@@ -847,6 +854,35 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                     this.visit_ty(ty);\n                 });\n             }\n+            Existential(ref bounds) => {\n+                let generics = &impl_item.generics;\n+                let mut index = self.next_early_index();\n+                let mut next_early_index = index;\n+                debug!(\"visit_ty: index = {}\", index);\n+                let lifetimes = generics.params.iter().filter_map(|param| match param.kind {\n+                    GenericParamKind::Lifetime { .. } => {\n+                        Some(Region::early(&self.tcx.hir, &mut index, param))\n+                    }\n+                    GenericParamKind::Type { .. } => {\n+                        next_early_index += 1;\n+                        None\n+                    }\n+                }).collect();\n+\n+                let scope = Scope::Binder {\n+                    lifetimes,\n+                    next_early_index,\n+                    s: self.scope,\n+                    track_lifetime_uses: true,\n+                    abstract_type_parent: true,\n+                };\n+                self.with(scope, |_old_scope, this| {\n+                    this.visit_generics(generics);\n+                    for bound in bounds {\n+                        this.visit_param_bound(bound);\n+                    }\n+                });\n+            }\n             Const(_, _) => {\n                 // Only methods and types support generics.\n                 assert!(impl_item.generics.params.is_empty());\n@@ -1213,6 +1249,7 @@ fn compute_object_lifetime_defaults(\n             hir::ItemKind::Struct(_, ref generics)\n             | hir::ItemKind::Union(_, ref generics)\n             | hir::ItemKind::Enum(_, ref generics)\n+            | hir::ItemKind::Existential(hir::ExistTy { ref generics, impl_trait_fn: None, .. })\n             | hir::ItemKind::Ty(_, ref generics)\n             | hir::ItemKind::Trait(_, _, ref generics, ..) => {\n                 let result = object_lifetime_defaults_for_item(tcx, generics);"}, {"sha": "a44962c77b5f5de489bb0692aee56ba3fe807ffb", "filename": "src/librustc/ty/item_path.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Flibrustc%2Fty%2Fitem_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Flibrustc%2Fty%2Fitem_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fitem_path.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "patch": "@@ -212,6 +212,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             data @ DefPathData::Trait(..) |\n             data @ DefPathData::AssocTypeInTrait(..) |\n             data @ DefPathData::AssocTypeInImpl(..) |\n+            data @ DefPathData::AssocExistentialInImpl(..) |\n             data @ DefPathData::ValueNs(..) |\n             data @ DefPathData::Module(..) |\n             data @ DefPathData::TypeParam(..) |"}, {"sha": "2e221424e3ce08a58e00bb92938d4c702ee14c79", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "patch": "@@ -192,6 +192,7 @@ pub struct AssociatedItem {\n pub enum AssociatedKind {\n     Const,\n     Method,\n+    Existential,\n     Type\n }\n \n@@ -201,14 +202,16 @@ impl AssociatedItem {\n             AssociatedKind::Const => Def::AssociatedConst(self.def_id),\n             AssociatedKind::Method => Def::Method(self.def_id),\n             AssociatedKind::Type => Def::AssociatedTy(self.def_id),\n+            AssociatedKind::Existential => Def::AssociatedExistential(self.def_id),\n         }\n     }\n \n     /// Tests whether the associated item admits a non-trivial implementation\n     /// for !\n     pub fn relevant_for_never<'tcx>(&self) -> bool {\n         match self.kind {\n-            AssociatedKind::Const => true,\n+            AssociatedKind::Existential |\n+            AssociatedKind::Const |\n             AssociatedKind::Type => true,\n             // FIXME(canndrew): Be more thorough here, check if any argument is uninhabited.\n             AssociatedKind::Method => !self.method_has_self_argument,\n@@ -225,6 +228,7 @@ impl AssociatedItem {\n                 format!(\"{}\", tcx.fn_sig(self.def_id).skip_binder())\n             }\n             ty::AssociatedKind::Type => format!(\"type {};\", self.ident),\n+            ty::AssociatedKind::Existential => format!(\"existential type {};\", self.ident),\n             ty::AssociatedKind::Const => {\n                 format!(\"const {}: {:?};\", self.ident, tcx.type_of(self.def_id))\n             }\n@@ -2491,6 +2495,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                 (ty::AssociatedKind::Method, has_self)\n             }\n             hir::AssociatedItemKind::Type => (ty::AssociatedKind::Type, false),\n+            hir::AssociatedItemKind::Existential => bug!(\"only impls can have existentials\"),\n         };\n \n         AssociatedItem {\n@@ -2516,6 +2521,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                 (ty::AssociatedKind::Method, has_self)\n             }\n             hir::AssociatedItemKind::Type => (ty::AssociatedKind::Type, false),\n+            hir::AssociatedItemKind::Existential => (ty::AssociatedKind::Existential, false),\n         };\n \n         AssociatedItem {\n@@ -2857,8 +2863,15 @@ fn param_env<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     // The param_env of an existential type is its parent's param_env\n     if let Some(Def::Existential(_)) = tcx.describe_def(def_id) {\n-        let parent = tcx.parent_def_id(def_id).expect(\"impl trait item w/o a parent\");\n-        return param_env(tcx, parent);\n+        if let Some(node_id) = tcx.hir.as_local_node_id(def_id) {\n+            if let hir::map::NodeItem(item) = tcx.hir.get(node_id) {\n+                if let hir::ItemKind::Existential(ref exist_ty) = item.node {\n+                    if let Some(parent) = exist_ty.impl_trait_fn {\n+                        return param_env(tcx, parent);\n+                    }\n+                }\n+            }\n+        }\n     }\n     // Compute the bounds on Self and the type parameters.\n "}, {"sha": "dd38188824338f7a1a5bb648c701f7dd5865696a", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "patch": "@@ -158,8 +158,10 @@ pub enum TypeVariants<'tcx> {\n     TyProjection(ProjectionTy<'tcx>),\n \n     /// Anonymized (`impl Trait`) type found in a return type.\n-    /// The DefId comes from the `impl Trait` ast::Ty node, and the\n-    /// substitutions are for the generics of the function in question.\n+    /// The DefId comes either from\n+    /// * the `impl Trait` ast::Ty node,\n+    /// * or the `existential type` declaration\n+    /// The substitutions are for the generics of the function in question.\n     /// After typeck, the concrete type can be found in the `types` map.\n     TyAnon(DefId, &'tcx Substs<'tcx>),\n "}, {"sha": "c67453d2b201a9bce0efe1bb3f3694872abb22fd", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "patch": "@@ -271,6 +271,7 @@ impl PrintContext {\n                 match key.disambiguated_data.data {\n                     DefPathData::AssocTypeInTrait(_) |\n                     DefPathData::AssocTypeInImpl(_) |\n+                    DefPathData::AssocExistentialInImpl(_) |\n                     DefPathData::Trait(_) |\n                     DefPathData::TypeNs(_) => {\n                         break;\n@@ -1081,6 +1082,20 @@ define_print! {\n                     }\n \n                     ty::tls::with(|tcx| {\n+                        let def_key = tcx.def_key(def_id);\n+                        if let Some(name) = def_key.disambiguated_data.data.get_opt_name() {\n+                            write!(f, \"{}\", name)?;\n+                            let mut substs = substs.iter();\n+                            if let Some(first) = substs.next() {\n+                                write!(f, \"::<\")?;\n+                                write!(f, \"{}\", first)?;\n+                                for subst in substs {\n+                                    write!(f, \", {}\", subst)?;\n+                                }\n+                                write!(f, \">\")?;\n+                            }\n+                            return Ok(());\n+                        }\n                         // Grab the \"TraitA + TraitB\" from `impl TraitA + TraitB`,\n                         // by looking up the projections associated with the def_id.\n                         let predicates_of = tcx.predicates_of(def_id);"}, {"sha": "7f2da5a326aceca1e3be76bc2e4ee6fa44ef00e0", "filename": "src/librustc_incremental/persist/dirty_clean.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "patch": "@@ -417,6 +417,7 @@ impl<'a, 'tcx> DirtyCleanVisitor<'a, 'tcx> {\n                     ImplItemKind::Method(..) => (\"NodeImplItem\", LABELS_FN_IN_IMPL),\n                     ImplItemKind::Const(..) => (\"NodeImplConst\", LABELS_CONST_IN_IMPL),\n                     ImplItemKind::Type(..) => (\"NodeImplType\", LABELS_CONST_IN_IMPL),\n+                    ImplItemKind::Existential(..) => (\"NodeImplType\", LABELS_CONST_IN_IMPL),\n                 }\n             },\n             _ => self.tcx.sess.span_fatal("}, {"sha": "af40f3c64ed7923918ab082aedf08264088d3857", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "patch": "@@ -461,6 +461,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingDoc {\n             hir::ImplItemKind::Const(..) => \"an associated constant\",\n             hir::ImplItemKind::Method(..) => \"a method\",\n             hir::ImplItemKind::Type(_) => \"an associated type\",\n+            hir::ImplItemKind::Existential(_) => \"an associated existential type\",\n         };\n         self.check_missing_docs_attrs(cx,\n                                       Some(impl_item.id),"}, {"sha": "ab566654c389cd366c5be633b33149f4bb57f922", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "patch": "@@ -421,6 +421,7 @@ impl<'tcx> EntryKind<'tcx> {\n             EntryKind::Type => Def::TyAlias(did),\n             EntryKind::Existential => Def::Existential(did),\n             EntryKind::AssociatedType(_) => Def::AssociatedTy(did),\n+            EntryKind::AssociatedExistential(_) => Def::AssociatedExistential(did),\n             EntryKind::Mod(_) => Def::Mod(did),\n             EntryKind::Variant(_) => Def::Variant(did),\n             EntryKind::Trait(_) => Def::Trait(did),"}, {"sha": "7ed991e0de3a1d010474cd55462dfb6ba5fea203", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "patch": "@@ -840,6 +840,8 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n                 }))\n             }\n             ty::AssociatedKind::Type => EntryKind::AssociatedType(container),\n+            ty::AssociatedKind::Existential =>\n+                span_bug!(ast_item.span, \"existential type in trait\"),\n         };\n \n         Entry {\n@@ -863,6 +865,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n                         None\n                     }\n                 }\n+                ty::AssociatedKind::Existential => unreachable!(),\n             },\n             inherent_impls: LazySeq::empty(),\n             variances: if trait_item.kind == ty::AssociatedKind::Method {\n@@ -933,6 +936,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n                     has_self: impl_item.method_has_self_argument,\n                 }))\n             }\n+            ty::AssociatedKind::Existential => EntryKind::AssociatedExistential(container),\n             ty::AssociatedKind::Type => EntryKind::AssociatedType(container)\n         };\n \n@@ -948,6 +952,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n                     let always_encode_mir = self.tcx.sess.opts.debugging_opts.always_encode_mir;\n                     needs_inline || is_const_fn || always_encode_mir\n                 },\n+                hir::ImplItemKind::Existential(..) |\n                 hir::ImplItemKind::Type(..) => false,\n             };\n "}, {"sha": "d7c54cbc81d9414b66c4c7253c112c1868237a0f", "filename": "src/librustc_metadata/schema.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Flibrustc_metadata%2Fschema.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Flibrustc_metadata%2Fschema.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fschema.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "patch": "@@ -321,6 +321,7 @@ pub enum EntryKind<'tcx> {\n     Impl(Lazy<ImplData<'tcx>>),\n     Method(Lazy<MethodData<'tcx>>),\n     AssociatedType(AssociatedContainer),\n+    AssociatedExistential(AssociatedContainer),\n     AssociatedConst(AssociatedContainer, ConstQualif, Lazy<RenderedConst>),\n }\n \n@@ -382,6 +383,7 @@ impl<'a, 'gcx> HashStable<StableHashingContext<'a>> for EntryKind<'gcx> {\n             EntryKind::Method(ref method_data) => {\n                 method_data.hash_stable(hcx, hasher);\n             }\n+            EntryKind::AssociatedExistential(associated_container) |\n             EntryKind::AssociatedType(associated_container) => {\n                 associated_container.hash_stable(hcx, hasher);\n             }"}, {"sha": "7b13c98b31ddf4ba31438711da3000c36f488e6a", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "patch": "@@ -237,14 +237,15 @@ impl<'a, 'tcx> Visitor<'tcx> for EmbargoVisitor<'a, 'tcx> {\n             hir::ItemKind::Use(..) => {}\n             // The interface is empty\n             hir::ItemKind::GlobalAsm(..) => {}\n-            hir::ItemKind::Existential(..) => {\n+            hir::ItemKind::Existential(hir::ExistTy { impl_trait_fn: Some(_), .. }) => {\n                 if item_level.is_some() {\n                     // Reach the (potentially private) type and the API being exposed\n                     self.reach(item.id).ty().predicates();\n                 }\n             }\n             // Visit everything\n             hir::ItemKind::Const(..) | hir::ItemKind::Static(..) |\n+            hir::ItemKind::Existential(..) |\n             hir::ItemKind::Fn(..) | hir::ItemKind::Ty(..) => {\n                 if item_level.is_some() {\n                     self.reach(item.id).generics().predicates().ty();\n@@ -1165,6 +1166,7 @@ impl<'a, 'tcx> Visitor<'tcx> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n                                          hir::ImplItemKind::Method(..) => {\n                                              self.access_levels.is_reachable(impl_item.id)\n                                          }\n+                                         hir::ImplItemKind::Existential(..) |\n                                          hir::ImplItemKind::Type(_) => false,\n                                      }\n                                  });\n@@ -1566,7 +1568,7 @@ impl<'a, 'tcx> Visitor<'tcx> for PrivateItemsInPublicInterfacesVisitor<'a, 'tcx>\n             hir::ItemKind::Use(..) => {}\n             // No subitems\n             hir::ItemKind::GlobalAsm(..) => {}\n-            hir::ItemKind::Existential(..) => {\n+            hir::ItemKind::Existential(hir::ExistTy { impl_trait_fn: Some(_), .. }) => {\n                 // Check the traits being exposed, as they're separate,\n                 // e.g. `impl Iterator<Item=T>` has two predicates,\n                 // `X: Iterator` and `<X as Iterator>::Item == T`,\n@@ -1577,6 +1579,7 @@ impl<'a, 'tcx> Visitor<'tcx> for PrivateItemsInPublicInterfacesVisitor<'a, 'tcx>\n             }\n             // Subitems of these items have inherited publicity\n             hir::ItemKind::Const(..) | hir::ItemKind::Static(..) | hir::ItemKind::Fn(..) |\n+            hir::ItemKind::Existential(..) |\n             hir::ItemKind::Ty(..) => {\n                 self.check(item.id, item_visibility).generics().predicates().ty();\n "}, {"sha": "e00919547fc437b60ce67abb3c3639093c671dc5", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "patch": "@@ -361,6 +361,11 @@ impl<'a> Resolver<'a> {\n                 self.define(parent, ident, TypeNS, (def, vis, sp, expansion));\n             }\n \n+            ItemKind::Existential(_, _) => {\n+                let def = Def::Existential(self.definitions.local_def_id(item.id));\n+                self.define(parent, ident, TypeNS, (def, vis, sp, expansion));\n+            }\n+\n             ItemKind::Enum(ref enum_definition, _) => {\n                 let def = Def::Enum(self.definitions.local_def_id(item.id));\n                 let module_kind = ModuleKind::Def(def, ident.name);"}, {"sha": "617ae4b787f8f171765bbbcdd496de34b5265762", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "patch": "@@ -207,7 +207,7 @@ fn resolve_struct_error<'sess, 'a>(resolver: &'sess Resolver,\n                 Def::AssociatedTy(..) | Def::PrimTy(..) | Def::Fn(..) | Def::Const(..) |\n                 Def::Static(..) | Def::StructCtor(..) | Def::VariantCtor(..) | Def::Method(..) |\n                 Def::AssociatedConst(..) | Def::Local(..) | Def::Upvar(..) | Def::Label(..) |\n-                Def::Existential(..) |\n+                Def::Existential(..) | Def::AssociatedExistential(..) |\n                 Def::Macro(..) | Def::GlobalAsm(..) | Def::Err =>\n                     bug!(\"TypeParametersFromOuterFunction should only be used with Def::SelfTy or \\\n                          Def::TyParam\")\n@@ -535,6 +535,7 @@ impl<'a> PathSource<'a> {\n                 Def::Struct(..) | Def::Union(..) | Def::Enum(..) |\n                 Def::Trait(..) | Def::TyAlias(..) | Def::AssociatedTy(..) |\n                 Def::PrimTy(..) | Def::TyParam(..) | Def::SelfTy(..) |\n+                Def::Existential(..) |\n                 Def::TyForeign(..) => true,\n                 _ => false,\n             },\n@@ -2148,6 +2149,7 @@ impl<'a> Resolver<'a> {\n         match item.node {\n             ItemKind::Enum(_, ref generics) |\n             ItemKind::Ty(_, ref generics) |\n+            ItemKind::Existential(_, ref generics) |\n             ItemKind::Struct(_, ref generics) |\n             ItemKind::Union(_, ref generics) |\n             ItemKind::Fn(_, _, ref generics, _) => {\n@@ -2486,6 +2488,18 @@ impl<'a> Resolver<'a> {\n \n                                             this.visit_ty(ty);\n                                         }\n+                                        ImplItemKind::Existential(ref bounds) => {\n+                                            // If this is a trait impl, ensure the type\n+                                            // exists in trait\n+                                            this.check_trait_item(impl_item.ident,\n+                                                                TypeNS,\n+                                                                impl_item.span,\n+                                                |n, s| TypeNotMemberOfTrait(n, s));\n+\n+                                            for bound in bounds {\n+                                                this.visit_param_bound(bound);\n+                                            }\n+                                        }\n                                         ImplItemKind::Macro(_) =>\n                                             panic!(\"unexpanded macro in resolve!\"),\n                                     }"}, {"sha": "58189ee0a2f100b5ad84c51caaa333b09feaaeb7", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "patch": "@@ -1238,6 +1238,16 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n                 // trait.\n                 self.visit_ty(ty)\n             }\n+            ast::ImplItemKind::Existential(ref bounds) => {\n+                // FIXME uses of the assoc type should ideally point to this\n+                // 'def' and the name here should be a ref to the def in the\n+                // trait.\n+                for bound in bounds.iter() {\n+                    if let ast::GenericBound::Trait(ref trait_ref, _) = *bound {\n+                        self.process_path(trait_ref.trait_ref.ref_id, &trait_ref.trait_ref.path)\n+                    }\n+                }\n+            }\n             ast::ImplItemKind::Macro(_) => {}\n         }\n     }\n@@ -1477,6 +1487,36 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> Visitor<'l> for DumpVisitor<'l, 'tc\n                 self.visit_ty(&ty);\n                 self.process_generic_params(ty_params, item.span, &qualname, item.id);\n             }\n+            Existential(ref _bounds, ref ty_params) => {\n+                let qualname = format!(\"::{}\", self.tcx.node_path_str(item.id));\n+                // FIXME do something with _bounds\n+                let value = String::new();\n+                let sub_span = self.span.sub_span_after_keyword(item.span, keywords::Type);\n+                if !self.span.filter_generated(sub_span, item.span) {\n+                    let span = self.span_from_span(sub_span.expect(\"No span found for typedef\"));\n+                    let id = ::id_from_node_id(item.id, &self.save_ctxt);\n+\n+                    self.dumper.dump_def(\n+                        &access_from!(self.save_ctxt, item),\n+                        Def {\n+                            kind: DefKind::Type,\n+                            id,\n+                            span,\n+                            name: item.ident.to_string(),\n+                            qualname: qualname.clone(),\n+                            value,\n+                            parent: None,\n+                            children: vec![],\n+                            decl_id: None,\n+                            docs: self.save_ctxt.docs_for_attrs(&item.attrs),\n+                            sig: sig::item_signature(item, &self.save_ctxt),\n+                            attributes: lower_attributes(item.attrs.clone(), &self.save_ctxt),\n+                        },\n+                    );\n+                }\n+\n+                self.process_generic_params(ty_params, item.span, &qualname, item.id);\n+            }\n             Mac(_) => (),\n             _ => visit::walk_item(self, item),\n         }"}, {"sha": "c84f194f0232a7b3fd81944773af6806910ffbe3", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "patch": "@@ -749,6 +749,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n             HirDef::TyAlias(def_id) |\n             HirDef::TyForeign(def_id) |\n             HirDef::TraitAlias(def_id) |\n+            HirDef::AssociatedExistential(def_id) |\n             HirDef::AssociatedTy(def_id) |\n             HirDef::Trait(def_id) |\n             HirDef::Existential(def_id) |"}, {"sha": "130325628796ecbd74f0d253e290c02954631ac7", "filename": "src/librustc_save_analysis/sig.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Flibrustc_save_analysis%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Flibrustc_save_analysis%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fsig.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "patch": "@@ -444,6 +444,18 @@ impl Sig for ast::Item {\n                     refs: vec![],\n                 })\n             }\n+            ast::ItemKind::Existential(ref bounds, ref generics) => {\n+                let text = \"existential type \".to_owned();\n+                let mut sig = name_and_generics(text, offset, generics, self.id, self.ident, scx)?;\n+\n+                if !bounds.is_empty() {\n+                    sig.text.push_str(\": \");\n+                    sig.text.push_str(&pprust::bounds_to_string(bounds));\n+                }\n+                sig.text.push(';');\n+\n+                Ok(sig)\n+            }\n             ast::ItemKind::Ty(ref ty, ref generics) => {\n                 let text = \"type \".to_owned();\n                 let mut sig = name_and_generics(text, offset, generics, self.id, self.ident, scx)?;"}, {"sha": "60aea074f2421b51fde29832f86058e66e8271ff", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "patch": "@@ -1035,6 +1035,26 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx>+'o {\n \n         let span = path.span;\n         match path.def {\n+            Def::Existential(did) => {\n+                // check for desugared impl trait\n+                if let Some(node_id) = tcx.hir.as_local_node_id(did) {\n+                    if let hir::map::NodeItem(item) = tcx.hir.get(node_id) {\n+                        if let hir::ItemKind::Existential(ref exist_ty) = item.node {\n+                            if exist_ty.impl_trait_fn.is_some() {\n+                                let lifetimes = &path.segments[0].args.as_ref().unwrap().args;\n+                                return self.impl_trait_ty_to_ty(did, lifetimes);\n+                            }\n+                        }\n+                    }\n+                }\n+                let item_segment = path.segments.split_last().unwrap();\n+                self.prohibit_generics(item_segment.1);\n+                let substs = self.ast_path_substs_for_ty(span, did, item_segment.0);\n+                self.normalize_ty(\n+                    span,\n+                    tcx.mk_anon(did, substs),\n+                )\n+            }\n             Def::Enum(did) | Def::TyAlias(did) | Def::Struct(did) |\n             Def::Union(did) | Def::TyForeign(did) => {\n                 assert_eq!(opt_self_ty, None);\n@@ -1095,11 +1115,6 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx>+'o {\n                     hir::TyStr => tcx.mk_str()\n                 }\n             }\n-            Def::Existential(exist_ty_did) => {\n-                assert!(exist_ty_did.is_local());\n-                let lifetimes = &path.segments[0].args.as_ref().unwrap().args;\n-                self.impl_trait_ty_to_ty(exist_ty_did, lifetimes)\n-            }\n             Def::Err => {\n                 self.set_tainted_by_errors();\n                 return self.tcx().types.err;"}, {"sha": "301072778d094e6bc1d43074d60f8089ac570d04", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "patch": "@@ -1332,6 +1332,7 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n         match self.mode {\n             Mode::MethodCall => item.method_has_self_argument,\n             Mode::Path => match item.kind {\n+                ty::AssociatedKind::Existential |\n                 ty::AssociatedKind::Type => false,\n                 ty::AssociatedKind::Method | ty::AssociatedKind::Const => true\n             },"}, {"sha": "e74652ff9321013cad52d58f5789a8932799485d", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "patch": "@@ -1410,6 +1410,7 @@ fn check_specialization_validity<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let kind = match impl_item.node {\n         hir::ImplItemKind::Const(..) => ty::AssociatedKind::Const,\n         hir::ImplItemKind::Method(..) => ty::AssociatedKind::Method,\n+        hir::ImplItemKind::Existential(..) => ty::AssociatedKind::Existential,\n         hir::ImplItemKind::Type(_) => ty::AssociatedKind::Type\n     };\n \n@@ -1503,6 +1504,7 @@ fn check_impl_items_against_trait<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                          err.emit()\n                     }\n                 }\n+                hir::ImplItemKind::Existential(..) |\n                 hir::ImplItemKind::Type(_) => {\n                     if ty_trait_item.kind == ty::AssociatedKind::Type {\n                         if ty_trait_item.defaultness.has_value() {"}, {"sha": "df8323f85132bafb9a85634184924b45e2a238bb", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 90, "deletions": 7, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "patch": "@@ -13,11 +13,12 @@ use constrained_type_params::{identify_constrained_type_params, Parameter};\n \n use hir::def_id::DefId;\n use rustc::traits::{self, ObligationCauseCode};\n-use rustc::ty::{self, Lift, Ty, TyCtxt, GenericParamDefKind};\n-use rustc::ty::subst::Substs;\n+use rustc::ty::{self, Lift, Ty, TyCtxt, GenericParamDefKind, TypeFoldable};\n+use rustc::ty::subst::{Subst, Substs};\n use rustc::ty::util::ExplicitSelf;\n use rustc::util::nodemap::{FxHashSet, FxHashMap};\n use rustc::middle::lang_items;\n+use rustc::infer::anon_types::may_define_existential_type;\n \n use syntax::ast;\n use syntax::feature_gate::{self, GateIssue};\n@@ -209,6 +210,10 @@ fn check_associated_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                     fcx.register_wf_obligation(ty, span, code.clone());\n                 }\n             }\n+            ty::AssociatedKind::Existential => {\n+                // FIXME(oli-obk) implement existential types in trait impls\n+                unimplemented!()\n+            }\n         }\n \n         implied_bounds\n@@ -282,7 +287,7 @@ fn check_type_defn<'a, 'tcx, F>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             }\n         }\n \n-        check_where_clauses(tcx, fcx, item.span, def_id);\n+        check_where_clauses(tcx, fcx, item.span, def_id, None);\n \n         vec![] // no implied bounds in a struct def'n\n     });\n@@ -291,7 +296,7 @@ fn check_type_defn<'a, 'tcx, F>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n fn check_trait<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, item: &hir::Item) {\n     let trait_def_id = tcx.hir.local_def_id(item.id);\n     for_item(tcx, item).with_fcx(|fcx, _| {\n-        check_where_clauses(tcx, fcx, item.span, trait_def_id);\n+        check_where_clauses(tcx, fcx, item.span, trait_def_id, None);\n         vec![]\n     });\n }\n@@ -357,7 +362,7 @@ fn check_impl<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             }\n         }\n \n-        check_where_clauses(tcx, fcx, item.span, item_def_id);\n+        check_where_clauses(tcx, fcx, item.span, item_def_id, None);\n \n         fcx.impl_implied_bounds(item_def_id, item.span)\n     });\n@@ -369,6 +374,7 @@ fn check_where_clauses<'a, 'gcx, 'fcx, 'tcx>(\n     fcx: &FnCtxt<'fcx, 'gcx, 'tcx>,\n     span: Span,\n     def_id: DefId,\n+    return_ty: Option<Ty<'tcx>>,\n ) {\n     use ty::subst::Subst;\n     use rustc::ty::TypeFoldable;\n@@ -482,7 +488,12 @@ fn check_where_clauses<'a, 'gcx, 'fcx, 'tcx>(\n         traits::Obligation::new(cause, fcx.param_env, pred)\n     });\n \n-    let predicates = predicates.instantiate_identity(fcx.tcx);\n+    let mut predicates = predicates.instantiate_identity(fcx.tcx);\n+\n+    if let Some(return_ty) = return_ty {\n+        predicates.predicates.extend(check_existential_types(tcx, fcx, def_id, span, return_ty));\n+    }\n+\n     let predicates = fcx.normalize_associated_types_in(span, &predicates);\n \n     debug!(\"check_where_clauses: predicates={:?}\", predicates.predicates);\n@@ -521,7 +532,79 @@ fn check_fn_or_method<'a, 'fcx, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'gcx>,\n     // FIXME(#25759) return types should not be implied bounds\n     implied_bounds.push(sig.output());\n \n-    check_where_clauses(tcx, fcx, span, def_id);\n+    check_where_clauses(tcx, fcx, span, def_id, Some(sig.output()));\n+}\n+\n+fn check_existential_types<'a, 'fcx, 'gcx, 'tcx>(\n+    tcx: TyCtxt<'a, 'gcx, 'gcx>,\n+    fcx: &FnCtxt<'fcx, 'gcx, 'tcx>,\n+    fn_def_id: DefId,\n+    span: Span,\n+    ty: Ty<'tcx>,\n+) -> Vec<ty::Predicate<'tcx>> {\n+    trace!(\"check_existential_types: {:?}, {:?}\", ty, ty.sty);\n+    let mut substituted_predicates = Vec::new();\n+    ty.fold_with(&mut ty::fold::BottomUpFolder {\n+        tcx: fcx.tcx,\n+        fldop: |ty| {\n+            if let ty::TyAnon(def_id, substs) = ty.sty {\n+                trace!(\"check_existential_types: anon_ty, {:?}, {:?}\", def_id, substs);\n+                let anon_node_id = tcx.hir.as_local_node_id(def_id).unwrap();\n+                if may_define_existential_type(tcx, fn_def_id, anon_node_id) {\n+                    let generics = tcx.generics_of(def_id);\n+                    trace!(\"check_existential_types may define. Generics: {:#?}\", generics);\n+                    for (subst, param) in substs.iter().zip(&generics.params) {\n+                        if let ty::subst::UnpackedKind::Type(ty) = subst.unpack() {\n+                            match ty.sty {\n+                                ty::TyParam(..) => {},\n+                                // prevent `fn foo() -> Foo<u32>` from being defining\n+                                _ => {\n+                                    tcx\n+                                        .sess\n+                                        .struct_span_err(\n+                                            span,\n+                                            \"non-defining existential type use in defining scope\",\n+                                        )\n+                                        .span_note(\n+                                            tcx.def_span(param.def_id),\n+                                            &format!(\n+                                                \"used non-generic type {} for generic parameter\",\n+                                                ty,\n+                                            ),\n+                                        )\n+                                        .emit();\n+                                    return tcx.types.err;\n+                                },\n+                            } // match ty\n+                        } // if let Type = subst\n+                    } // for (subst, param)\n+                } // if may_define_existential_type\n+\n+                // now register the bounds on the parameters of the existential type\n+                // so the parameters given by the function need to fulfil them\n+                // ```rust\n+                // existential type Foo<T: Bar>: 'static;\n+                // fn foo<U>() -> Foo<U> { .. *}\n+                // ```\n+                // becomes\n+                // ```rust\n+                // existential type Foo<T: Bar>: 'static;\n+                // fn foo<U: Bar>() -> Foo<U> { .. *}\n+                // ```\n+                let predicates = tcx.predicates_of(def_id);\n+                trace!(\"check_existential_types may define. adding predicates: {:#?}\", predicates);\n+                for &pred in predicates.predicates.iter() {\n+                    let substituted_pred = pred.subst(fcx.tcx, substs);\n+                    // Avoid duplication of predicates that contain no parameters, for example.\n+                    if !predicates.predicates.contains(&substituted_pred) {\n+                        substituted_predicates.push(substituted_pred);\n+                    }\n+                }\n+            } // if let TyAnon\n+            ty\n+        },\n+    });\n+    substituted_predicates\n }\n \n fn check_method_receiver<'fcx, 'gcx, 'tcx>(fcx: &FnCtxt<'fcx, 'gcx, 'tcx>,"}, {"sha": "d82ad0d180bf5d7c2f55498dd0091bef524efbf4", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 57, "deletions": 2, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "patch": "@@ -17,9 +17,10 @@ use rustc::hir;\n use rustc::hir::def_id::{DefId, DefIndex};\n use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc::infer::InferCtxt;\n+use rustc::ty::subst::UnpackedKind;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::adjustment::{Adjust, Adjustment};\n-use rustc::ty::fold::{TypeFoldable, TypeFolder};\n+use rustc::ty::fold::{TypeFoldable, TypeFolder, BottomUpFolder};\n use rustc::util::nodemap::DefIdSet;\n use syntax::ast;\n use syntax_pos::Span;\n@@ -388,11 +389,65 @@ impl<'cx, 'gcx, 'tcx> WritebackCx<'cx, 'gcx, 'tcx> {\n         for (&def_id, anon_defn) in self.fcx.anon_types.borrow().iter() {\n             let node_id = self.tcx().hir.as_local_node_id(def_id).unwrap();\n             let instantiated_ty = self.resolve(&anon_defn.concrete_ty, &node_id);\n-            let definition_ty = self.fcx.infer_anon_definition_from_instantiation(\n+            let mut definition_ty = self.fcx.infer_anon_definition_from_instantiation(\n                 def_id,\n                 anon_defn,\n                 instantiated_ty,\n             );\n+\n+            let generics = self.tcx().generics_of(def_id);\n+\n+            // named existential type, not an impl trait\n+            if generics.parent.is_none() {\n+                // prevent\n+                // * `fn foo<T>() -> Foo<T>`\n+                // * `fn foo<T: Bound + Other>() -> Foo<T>`\n+                // from being defining\n+\n+                // Also replace all generic params with the ones from the existential type\n+                // definition so\n+                // ```rust\n+                // existential type Foo<T>: 'static;\n+                // fn foo<U>() -> Foo<U> { .. }\n+                // ```\n+                // figures out the concrete type with `U`, but the stored type is with `T`\n+                definition_ty = definition_ty.fold_with(&mut BottomUpFolder {\n+                    tcx: self.tcx().global_tcx(),\n+                    fldop: |ty| {\n+                        // find a type parameter\n+                        if let ty::TyParam(..) = ty.sty {\n+                            // look it up in the substitution list\n+                            assert_eq!(anon_defn.substs.len(), generics.params.len());\n+                            for (subst, param) in anon_defn.substs.iter().zip(&generics.params) {\n+                                if let UnpackedKind::Type(subst) = subst.unpack() {\n+                                    if subst == ty {\n+                                        // found it in the substitution list, replace with the\n+                                        // parameter from the existential type\n+                                        return self\n+                                            .tcx()\n+                                            .global_tcx()\n+                                            .mk_ty_param(param.index, param.name);\n+                                    }\n+                                }\n+                            }\n+                            self.tcx()\n+                                .sess\n+                                .struct_span_err(\n+                                    span,\n+                                    &format!(\n+                                        \"type parameter `{}` is part of concrete type but not used \\\n+                                        in parameter list for existential type\",\n+                                        ty,\n+                                    ),\n+                                )\n+                                .emit();\n+                            return self.tcx().types.err;\n+                        }\n+                        ty\n+                    },\n+                });\n+            }\n+\n             let old = self.tables.concrete_existential_types.insert(def_id, definition_ty);\n             if let Some(old) = old {\n                 if old != definition_ty {"}, {"sha": "ab81cb8788f9c4172cbcd7a40255b39eb82f5c77", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 129, "deletions": 15, "changes": 144, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "patch": "@@ -269,6 +269,7 @@ fn type_param_predicates<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 ItemKind::Fn(.., ref generics, _) |\n                 ItemKind::Impl(_, _, _, ref generics, ..) |\n                 ItemKind::Ty(_, ref generics) |\n+                ItemKind::Existential(ExistTy { ref generics, impl_trait_fn: None, ..}) |\n                 ItemKind::Enum(_, ref generics) |\n                 ItemKind::Struct(_, ref generics) |\n                 ItemKind::Union(_, ref generics) => generics,\n@@ -419,7 +420,11 @@ fn convert_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, item_id: ast::NodeId) {\n                 convert_variant_ctor(tcx, struct_def.id());\n             }\n         },\n-        hir::ItemKind::Existential(..) => {}\n+\n+        // Desugared from `impl Trait` -> visited by the function's return type\n+        hir::ItemKind::Existential(hir::ExistTy { impl_trait_fn: Some(_), .. }) => {}\n+\n+        hir::ItemKind::Existential(..) |\n         hir::ItemKind::Ty(..) |\n         hir::ItemKind::Static(..) |\n         hir::ItemKind::Const(..) |\n@@ -1002,6 +1007,13 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     })\n }\n \n+fn report_assoc_ty_on_inherent_impl<'a, 'tcx>(\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    span: Span,\n+) {\n+    span_err!(tcx.sess, span, E0202, \"associated types are not allowed in inherent impls\");\n+}\n+\n fn type_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                      def_id: DefId)\n                      -> Ty<'tcx> {\n@@ -1034,10 +1046,16 @@ fn type_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                     tcx.mk_fn_def(def_id, substs)\n                 }\n                 ImplItemKind::Const(ref ty, _) => icx.to_ty(ty),\n+                ImplItemKind::Existential(ref _bounds) => {\n+                    if tcx.impl_trait_ref(tcx.hir.get_parent_did(node_id)).is_none() {\n+                        report_assoc_ty_on_inherent_impl(tcx, item.span);\n+                    }\n+                    // FIXME(oli-obk) implement existential types in trait impls\n+                    unimplemented!()\n+                }\n                 ImplItemKind::Type(ref ty) => {\n                     if tcx.impl_trait_ref(tcx.hir.get_parent_did(node_id)).is_none() {\n-                        span_err!(tcx.sess, item.span, E0202,\n-                                  \"associated types are not allowed in inherent impls\");\n+                        report_assoc_ty_on_inherent_impl(tcx, item.span);\n                     }\n \n                     icx.to_ty(ty)\n@@ -1062,8 +1080,9 @@ fn type_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                     let substs = Substs::identity_for_item(tcx, def_id);\n                     tcx.mk_adt(def, substs)\n                 }\n-                // this is only reachable once we have named existential types\n-                ItemKind::Existential(hir::ExistTy { impl_trait_fn: None, .. }) => unimplemented!(),\n+                ItemKind::Existential(hir::ExistTy { impl_trait_fn: None, .. }) => {\n+                    find_existential_constraints(tcx, def_id)\n+                },\n                 // existential types desugared from impl Trait\n                 ItemKind::Existential(hir::ExistTy { impl_trait_fn: Some(owner), .. }) => {\n                     tcx.typeck_tables_of(owner).concrete_existential_types[&def_id]\n@@ -1153,6 +1172,95 @@ fn type_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     }\n }\n \n+fn find_existential_constraints<'a, 'tcx>(\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    def_id: DefId,\n+) -> ty::Ty<'tcx> {\n+    use rustc::hir::map::*;\n+    use rustc::hir::*;\n+\n+    struct ConstraintLocator<'a, 'tcx: 'a> {\n+        tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+        def_id: DefId,\n+        found: Option<(Span, ty::Ty<'tcx>)>,\n+    }\n+    impl<'a, 'tcx> ConstraintLocator<'a, 'tcx> {\n+        fn check(&mut self, node_id: ast::NodeId) {\n+            let def_id = self.tcx.hir.local_def_id(node_id);\n+            // don't try to check items that cannot possibly constrain the type\n+            if !self.tcx.has_typeck_tables(def_id) {\n+                return;\n+            }\n+            let ty = self\n+                .tcx\n+                .typeck_tables_of(def_id)\n+                .concrete_existential_types\n+                .get(&self.def_id)\n+                .cloned();\n+            if let Some(ty) = ty {\n+                // FIXME(oli-obk): trace the actual span from inference to improve errors\n+                let span = self.tcx.def_span(def_id);\n+                if let Some((prev_span, prev_ty)) = self.found {\n+                    if ty != prev_ty {\n+                        // found different concrete types for the existential type\n+                        let mut err = self.tcx.sess.struct_span_err(\n+                            span,\n+                            \"defining existential type use differs from previous\",\n+                        );\n+                        err.span_note(prev_span, \"previous use here\");\n+                        err.emit();\n+                    }\n+                } else {\n+                    self.found = Some((span, ty));\n+                }\n+            }\n+        }\n+    }\n+    impl<'a, 'tcx> intravisit::Visitor<'tcx> for ConstraintLocator<'a, 'tcx> {\n+        fn nested_visit_map<'this>(&'this mut self) -> intravisit::NestedVisitorMap<'this, 'tcx> {\n+            intravisit::NestedVisitorMap::All(&self.tcx.hir)\n+        }\n+        fn visit_item(&mut self, it: &'tcx Item) {\n+            // the existential type itself or its children are not within its reveal scope\n+            if self.tcx.hir.local_def_id(it.id) != self.def_id {\n+                self.check(it.id);\n+                intravisit::walk_item(self, it);\n+            }\n+        }\n+        fn visit_impl_item(&mut self, it: &'tcx ImplItem) {\n+            // the existential type itself or its children are not within its reveal scope\n+            if self.tcx.hir.local_def_id(it.id) != self.def_id {\n+                self.check(it.id);\n+                intravisit::walk_impl_item(self, it);\n+            }\n+        }\n+        fn visit_trait_item(&mut self, it: &'tcx TraitItem) {\n+            self.check(it.id);\n+            intravisit::walk_trait_item(self, it);\n+        }\n+    }\n+    let mut locator = ConstraintLocator { def_id, tcx, found: None };\n+    let node_id = tcx.hir.as_local_node_id(def_id).unwrap();\n+    let parent = tcx.hir.get_parent(node_id);\n+    if parent == ast::CRATE_NODE_ID {\n+        intravisit::walk_crate(&mut locator, tcx.hir.krate());\n+    } else {\n+        match tcx.hir.get(parent) {\n+            NodeItem(ref it) => intravisit::walk_item(&mut locator, it),\n+            NodeImplItem(ref it) => intravisit::walk_impl_item(&mut locator, it),\n+            other => bug!(\"{:?} is not a valid parent of an existential type item\", other),\n+        }\n+    }\n+    match locator.found {\n+        Some((_, ty)) => ty,\n+        None => {\n+            let span = tcx.def_span(def_id);\n+            tcx.sess.span_err(span, \"could not find defining uses\");\n+            tcx.types.err\n+        }\n+    }\n+}\n+\n fn fn_sig<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                     def_id: DefId)\n                     -> ty::PolyFnSig<'tcx> {\n@@ -1366,6 +1474,9 @@ fn explicit_predicates_of<'a, 'tcx>(\n \n     let icx = ItemCtxt::new(tcx, def_id);\n     let no_generics = hir::Generics::empty();\n+\n+    let mut predicates = vec![];\n+\n     let ast_generics = match node {\n         NodeTraitItem(item) => {\n             &item.generics\n@@ -1391,23 +1502,28 @@ fn explicit_predicates_of<'a, 'tcx>(\n                     is_trait = Some((ty::TraitRef::identity(tcx, def_id), items));\n                     generics\n                 }\n-                ItemKind::Existential(ref exist_ty) => {\n+                ItemKind::Existential(ExistTy { ref bounds, impl_trait_fn, ref generics }) => {\n                     let substs = Substs::identity_for_item(tcx, def_id);\n                     let anon_ty = tcx.mk_anon(def_id, substs);\n \n                     // Collect the bounds, i.e. the `A+B+'c` in `impl A+B+'c`.\n                     let bounds = compute_bounds(&icx,\n                                                 anon_ty,\n-                                                &exist_ty.bounds,\n+                                                bounds,\n                                                 SizedByDefault::Yes,\n                                                 tcx.def_span(def_id));\n \n-                    let predicates = bounds.predicates(tcx, anon_ty);\n-\n-                    return ty::GenericPredicates {\n-                        parent: None,\n-                        predicates: predicates\n-                    };\n+                    if impl_trait_fn.is_some() {\n+                        // impl Trait\n+                        return ty::GenericPredicates {\n+                            parent: None,\n+                            predicates: bounds.predicates(tcx, anon_ty),\n+                        };\n+                    } else {\n+                        // named existential types\n+                        predicates.extend(bounds.predicates(tcx, anon_ty));\n+                        generics\n+                    }\n                 }\n \n                 _ => &no_generics,\n@@ -1429,8 +1545,6 @@ fn explicit_predicates_of<'a, 'tcx>(\n     let parent_count = generics.parent_count as u32;\n     let has_own_self = generics.has_self && parent_count == 0;\n \n-    let mut predicates = vec![];\n-\n     // Below we'll consider the bounds on the type parameters (including `Self`)\n     // and the explicit where-clauses, but to get the full set of predicates\n     // on a trait we need to add in the supertrait bounds and bounds found on"}, {"sha": "690bf1c550c0e5d2236783c86f26d7d3c4235e41", "filename": "src/librustc_typeck/namespace.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Flibrustc_typeck%2Fnamespace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Flibrustc_typeck%2Fnamespace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fnamespace.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "patch": "@@ -21,6 +21,7 @@ pub enum Namespace {\n impl From<ty::AssociatedKind> for Namespace {\n     fn from(a_kind: ty::AssociatedKind) -> Self {\n         match a_kind {\n+            ty::AssociatedKind::Existential |\n             ty::AssociatedKind::Type => Namespace::Type,\n             ty::AssociatedKind::Const |\n             ty::AssociatedKind::Method => Namespace::Value,\n@@ -31,6 +32,7 @@ impl From<ty::AssociatedKind> for Namespace {\n impl<'a> From <&'a hir::ImplItemKind> for Namespace {\n     fn from(impl_kind: &'a hir::ImplItemKind) -> Self {\n         match *impl_kind {\n+            hir::ImplItemKind::Existential(..) |\n             hir::ImplItemKind::Type(..) => Namespace::Type,\n             hir::ImplItemKind::Const(..) |\n             hir::ImplItemKind::Method(..) => Namespace::Value,"}, {"sha": "cf4eec97d8cd7a5dd45f7686956dba7ca8bf99f1", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "patch": "@@ -512,6 +512,7 @@ pub enum ItemEnum {\n     FunctionItem(Function),\n     ModuleItem(Module),\n     TypedefItem(Typedef, bool /* is associated type */),\n+    ExistentialItem(Existential, bool /* is associated type */),\n     StaticItem(Static),\n     ConstantItem(Constant),\n     TraitItem(Trait),\n@@ -545,6 +546,7 @@ impl ItemEnum {\n             ItemEnum::EnumItem(ref e) => &e.generics,\n             ItemEnum::FunctionItem(ref f) => &f.generics,\n             ItemEnum::TypedefItem(ref t, _) => &t.generics,\n+            ItemEnum::ExistentialItem(ref t, _) => &t.generics,\n             ItemEnum::TraitItem(ref t) => &t.generics,\n             ItemEnum::ImplItem(ref i) => &i.generics,\n             ItemEnum::TyMethodItem(ref i) => &i.generics,\n@@ -596,6 +598,7 @@ impl Clean<Item> for doctree::Module {\n         items.extend(self.foreigns.iter().flat_map(|x| x.clean(cx)));\n         items.extend(self.mods.iter().map(|x| x.clean(cx)));\n         items.extend(self.typedefs.iter().map(|x| x.clean(cx)));\n+        items.extend(self.existentials.iter().map(|x| x.clean(cx)));\n         items.extend(self.statics.iter().map(|x| x.clean(cx)));\n         items.extend(self.constants.iter().map(|x| x.clean(cx)));\n         items.extend(self.traits.iter().map(|x| x.clean(cx)));\n@@ -2411,6 +2414,10 @@ impl Clean<Item> for hir::ImplItem {\n                 type_: ty.clean(cx),\n                 generics: Generics::default(),\n             }, true),\n+            hir::ImplItemKind::Existential(ref bounds) => ExistentialItem(Existential {\n+                bounds: bounds.clean(cx),\n+                generics: Generics::default(),\n+            }, true),\n         };\n         Item {\n             name: Some(self.ident.name.clean(cx)),\n@@ -2554,6 +2561,7 @@ impl<'tcx> Clean<Item> for ty::AssociatedItem {\n                     }, true)\n                 }\n             }\n+            ty::AssociatedKind::Existential => unimplemented!(),\n         };\n \n         let visibility = match self.container {\n@@ -3696,6 +3704,30 @@ impl Clean<Item> for doctree::Typedef {\n     }\n }\n \n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n+pub struct Existential {\n+    pub bounds: Vec<GenericBound>,\n+    pub generics: Generics,\n+}\n+\n+impl Clean<Item> for doctree::Existential {\n+    fn clean(&self, cx: &DocContext) -> Item {\n+        Item {\n+            name: Some(self.name.clean(cx)),\n+            attrs: self.attrs.clean(cx),\n+            source: self.whence.clean(cx),\n+            def_id: cx.tcx.hir.local_def_id(self.id.clone()),\n+            visibility: self.vis.clean(cx),\n+            stability: self.stab.clean(cx),\n+            deprecation: self.depr.clean(cx),\n+            inner: ExistentialItem(Existential {\n+                bounds: self.exist_ty.bounds.clean(cx),\n+                generics: self.exist_ty.generics.clean(cx),\n+            }, false),\n+        }\n+    }\n+}\n+\n #[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Debug, Hash)]\n pub struct BareFunctionDecl {\n     pub unsafety: hir::Unsafety,"}, {"sha": "591c660138aeeec490d91d2289452e95233c8814", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "patch": "@@ -37,6 +37,7 @@ pub struct Module {\n     pub mods: Vec<Module>,\n     pub id: NodeId,\n     pub typedefs: Vec<Typedef>,\n+    pub existentials: Vec<Existential>,\n     pub statics: Vec<Static>,\n     pub constants: Vec<Constant>,\n     pub traits: Vec<Trait>,\n@@ -68,6 +69,7 @@ impl Module {\n             fns        : Vec::new(),\n             mods       : Vec::new(),\n             typedefs   : Vec::new(),\n+            existentials: Vec::new(),\n             statics    : Vec::new(),\n             constants  : Vec::new(),\n             traits     : Vec::new(),\n@@ -167,6 +169,17 @@ pub struct Typedef {\n     pub depr: Option<attr::Deprecation>,\n }\n \n+pub struct Existential {\n+    pub exist_ty: hir::ExistTy,\n+    pub name: Name,\n+    pub id: ast::NodeId,\n+    pub attrs: hir::HirVec<ast::Attribute>,\n+    pub whence: Span,\n+    pub vis: hir::Visibility,\n+    pub stab: Option<attr::Stability>,\n+    pub depr: Option<attr::Deprecation>,\n+}\n+\n #[derive(Debug)]\n pub struct Static {\n     pub type_: P<hir::Ty>,"}, {"sha": "a5131e327e08e85df06fce1199ce12d0dbb08c55", "filename": "src/librustdoc/html/item_type.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "patch": "@@ -43,6 +43,7 @@ pub enum ItemType {\n     Union           = 19,\n     ForeignType     = 20,\n     Keyword         = 21,\n+    Existential     = 22,\n }\n \n \n@@ -70,6 +71,7 @@ impl<'a> From<&'a clean::Item> for ItemType {\n             clean::EnumItem(..)            => ItemType::Enum,\n             clean::FunctionItem(..)        => ItemType::Function,\n             clean::TypedefItem(..)         => ItemType::Typedef,\n+            clean::ExistentialItem(..)     => ItemType::Existential,\n             clean::StaticItem(..)          => ItemType::Static,\n             clean::ConstantItem(..)        => ItemType::Constant,\n             clean::TraitItem(..)           => ItemType::Trait,\n@@ -135,6 +137,7 @@ impl ItemType {\n             ItemType::AssociatedConst => \"associatedconstant\",\n             ItemType::ForeignType     => \"foreigntype\",\n             ItemType::Keyword         => \"keyword\",\n+            ItemType::Existential     => \"existential\",\n         }\n     }\n \n@@ -148,6 +151,7 @@ impl ItemType {\n             ItemType::Trait |\n             ItemType::Primitive |\n             ItemType::AssociatedType |\n+            ItemType::Existential |\n             ItemType::ForeignType => NameSpace::Type,\n \n             ItemType::ExternCrate |"}, {"sha": "928d7d38351f8e3a7c0a1bbe529af823a8e1f8d2", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "patch": "@@ -1570,6 +1570,7 @@ struct AllTypes {\n     macros: HashSet<ItemEntry>,\n     functions: HashSet<ItemEntry>,\n     typedefs: HashSet<ItemEntry>,\n+    existentials: HashSet<ItemEntry>,\n     statics: HashSet<ItemEntry>,\n     constants: HashSet<ItemEntry>,\n     keywords: HashSet<ItemEntry>,\n@@ -1586,6 +1587,7 @@ impl AllTypes {\n             macros: HashSet::with_capacity(100),\n             functions: HashSet::with_capacity(100),\n             typedefs: HashSet::with_capacity(100),\n+            existentials: HashSet::with_capacity(100),\n             statics: HashSet::with_capacity(100),\n             constants: HashSet::with_capacity(100),\n             keywords: HashSet::with_capacity(100),\n@@ -1607,6 +1609,7 @@ impl AllTypes {\n                 ItemType::Macro => self.macros.insert(ItemEntry::new(new_url, name)),\n                 ItemType::Function => self.functions.insert(ItemEntry::new(new_url, name)),\n                 ItemType::Typedef => self.typedefs.insert(ItemEntry::new(new_url, name)),\n+                ItemType::Existential => self.existentials.insert(ItemEntry::new(new_url, name)),\n                 ItemType::Static => self.statics.insert(ItemEntry::new(new_url, name)),\n                 ItemType::Constant => self.constants.insert(ItemEntry::new(new_url, name)),\n                 _ => true,\n@@ -1650,6 +1653,7 @@ impl fmt::Display for AllTypes {\n         print_entries(f, &self.macros, \"Macros\", \"macros\")?;\n         print_entries(f, &self.functions, \"Functions\", \"functions\")?;\n         print_entries(f, &self.typedefs, \"Typedefs\", \"typedefs\")?;\n+        print_entries(f, &self.existentials, \"Existentials\", \"existentials\")?;\n         print_entries(f, &self.statics, \"Statics\", \"statics\")?;\n         print_entries(f, &self.constants, \"Constants\", \"constants\")\n     }\n@@ -4400,6 +4404,7 @@ fn item_ty_to_strs(ty: &ItemType) -> (&'static str, &'static str) {\n         ItemType::AssociatedConst => (\"associated-consts\", \"Associated Constants\"),\n         ItemType::ForeignType     => (\"foreign-types\", \"Foreign Types\"),\n         ItemType::Keyword         => (\"keywords\", \"Keywords\"),\n+        ItemType::Existential     => (\"existentials\", \"Existentials\"),\n     }\n }\n "}, {"sha": "699ee25436a10ea784abe8791ab1d17980b3adb5", "filename": "src/librustdoc/passes/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fmod.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "patch": "@@ -84,6 +84,7 @@ impl<'a> fold::DocFolder for Stripper<'a> {\n                 return ret;\n             }\n             // These items can all get re-exported\n+            clean::ExistentialItem(..) |\n             clean::TypedefItem(..) | clean::StaticItem(..) |\n             clean::StructItem(..) | clean::EnumItem(..) |\n             clean::TraitItem(..) | clean::FunctionItem(..) |"}, {"sha": "267b70009482f28f062592fd31eabec8f6ac5979", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "patch": "@@ -439,6 +439,19 @@ impl<'a, 'tcx, 'rcx> RustdocVisitor<'a, 'tcx, 'rcx> {\n                 };\n                 om.typedefs.push(t);\n             },\n+            hir::ItemKind::Existential(ref exist_ty) => {\n+                let t = Existential {\n+                    exist_ty: exist_ty.clone(),\n+                    name,\n+                    id: item.id,\n+                    attrs: item.attrs.clone(),\n+                    whence: item.span,\n+                    vis: item.vis.clone(),\n+                    stab: self.stability(item.id),\n+                    depr: self.deprecation(item.id),\n+                };\n+                om.existentials.push(t);\n+            },\n             hir::ItemKind::Static(ref ty, ref mut_, ref exp) => {\n                 let s = Static {\n                     type_: ty.clone(),\n@@ -523,9 +536,6 @@ impl<'a, 'tcx, 'rcx> RustdocVisitor<'a, 'tcx, 'rcx> {\n                     om.impls.push(i);\n                 }\n             },\n-            hir::ItemKind::Existential(_) => {\n-                // FIXME(oli-obk): actually generate docs for real existential items\n-            }\n         }\n     }\n "}, {"sha": "1b6b47f5489d7ce2e03471fe27df33d836bf2d89", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "patch": "@@ -1394,6 +1394,7 @@ pub enum ImplItemKind {\n     Const(P<Ty>, P<Expr>),\n     Method(MethodSig, P<Block>),\n     Type(P<Ty>),\n+    Existential(GenericBounds),\n     Macro(Mac),\n }\n \n@@ -2132,6 +2133,10 @@ pub enum ItemKind {\n     ///\n     /// E.g. `type Foo = Bar<u8>;`\n     Ty(P<Ty>, Generics),\n+    /// An existential type declaration (`existential type`).\n+    ///\n+    /// E.g. `existential type Foo: Bar + Boo;`\n+    Existential(GenericBounds, Generics),\n     /// An enum definition (`enum` or `pub enum`).\n     ///\n     /// E.g. `enum Foo<A, B> { C<A>, D<B> }`\n@@ -2183,6 +2188,7 @@ impl ItemKind {\n             ItemKind::ForeignMod(..) => \"foreign module\",\n             ItemKind::GlobalAsm(..) => \"global asm\",\n             ItemKind::Ty(..) => \"type alias\",\n+            ItemKind::Existential(..) => \"existential type\",\n             ItemKind::Enum(..) => \"enum\",\n             ItemKind::Struct(..) => \"struct\",\n             ItemKind::Union(..) => \"union\","}, {"sha": "aef6b8ba5a89cfdd5f66b27b93d76fa5e5d3fca0", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "patch": "@@ -419,6 +419,9 @@ declare_features! (\n     // Allows macro invocations in `extern {}` blocks\n     (active, macros_in_extern, \"1.27.0\", Some(49476), None),\n \n+    // `existential type`\n+    (active, existential_type, \"1.28.0\", Some(34511), None),\n+\n     // unstable #[target_feature] directives\n     (active, arm_target_feature, \"1.27.0\", Some(44839), None),\n     (active, aarch64_target_feature, \"1.27.0\", Some(44839), None),\n@@ -1643,6 +1646,15 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                 gate_feature_post!(&self, decl_macro, i.span, msg);\n             }\n \n+            ast::ItemKind::Existential(..) => {\n+                gate_feature_post!(\n+                    &self,\n+                    existential_type,\n+                    i.span,\n+                    \"existential types are unstable\"\n+                );\n+            }\n+\n             _ => {}\n         }\n \n@@ -1842,6 +1854,15 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                     gate_feature_post!(&self, const_fn, ii.span, \"const fn is unstable\");\n                 }\n             }\n+            ast::ImplItemKind::Existential(..) => {\n+                gate_feature_post!(\n+                    &self,\n+                    existential_type,\n+                    ii.span,\n+                    \"existential types are unstable\"\n+                );\n+            }\n+\n             ast::ImplItemKind::Type(_) if !ii.generics.params.is_empty() => {\n                 gate_feature_post!(&self, generic_associated_types, ii.span,\n                                    \"generic associated types are unstable\");"}, {"sha": "9d5982c1e28613387c8a38662668d74c3030a234", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "patch": "@@ -912,6 +912,10 @@ pub fn noop_fold_item_kind<T: Folder>(i: ItemKind, folder: &mut T) -> ItemKind {\n         ItemKind::Ty(t, generics) => {\n             ItemKind::Ty(folder.fold_ty(t), folder.fold_generics(generics))\n         }\n+        ItemKind::Existential(bounds, generics) => ItemKind::Existential(\n+            folder.fold_bounds(bounds),\n+            folder.fold_generics(generics),\n+        ),\n         ItemKind::Enum(enum_definition, generics) => {\n             let generics = folder.fold_generics(generics);\n             let variants = enum_definition.variants.move_map(|x| folder.fold_variant(x));\n@@ -1002,6 +1006,9 @@ pub fn noop_fold_impl_item<T: Folder>(i: ImplItem, folder: &mut T)\n                                folder.fold_block(body))\n             }\n             ast::ImplItemKind::Type(ty) => ast::ImplItemKind::Type(folder.fold_ty(ty)),\n+            ast::ImplItemKind::Existential(bounds) => {\n+                ast::ImplItemKind::Existential(folder.fold_bounds(bounds))\n+            },\n             ast::ImplItemKind::Macro(mac) => ast::ImplItemKind::Macro(folder.fold_mac(mac))\n         },\n         span: folder.new_span(i.span),"}, {"sha": "2eaa56ebeb82649548d733ea7687f0d8d8879d96", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 56, "deletions": 17, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "patch": "@@ -63,6 +63,15 @@ use std::mem;\n use std::path::{self, Path, PathBuf};\n use std::slice;\n \n+#[derive(Debug)]\n+/// Whether the type alias or associated type is a concrete type or an existential type\n+pub enum AliasKind {\n+    /// Just a new name for the same type\n+    Weak(P<Ty>),\n+    /// Only trait impls of the type will be usable, not the actual type itself\n+    Existential(GenericBounds),\n+}\n+\n bitflags! {\n     struct Restrictions: u8 {\n         const STMT_EXPR         = 1 << 0;\n@@ -5502,16 +5511,13 @@ impl<'a> Parser<'a> {\n         let lo = self.span;\n         let vis = self.parse_visibility(false)?;\n         let defaultness = self.parse_defaultness();\n-        let (name, node, generics) = if self.eat_keyword(keywords::Type) {\n-            // This parses the grammar:\n-            //     ImplItemAssocTy = Ident [\"<\"...\">\"] [\"where\" ...] \"=\" Ty \";\"\n-            let name = self.parse_ident()?;\n-            let mut generics = self.parse_generics()?;\n-            generics.where_clause = self.parse_where_clause()?;\n-            self.expect(&token::Eq)?;\n-            let typ = self.parse_ty()?;\n-            self.expect(&token::Semi)?;\n-            (name, ast::ImplItemKind::Type(typ), generics)\n+        let (name, node, generics) = if let Some(type_) = self.eat_type() {\n+            let (name, alias, generics) = type_?;\n+            let kind = match alias {\n+                AliasKind::Weak(typ) => ast::ImplItemKind::Type(typ),\n+                AliasKind::Existential(bounds) => ast::ImplItemKind::Existential(bounds),\n+            };\n+            (name, kind, generics)\n         } else if self.is_const_item() {\n             // This parses the grammar:\n             //     ImplItemConst = \"const\" Ident \":\" Ty \"=\" Expr \";\"\n@@ -6563,14 +6569,43 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parse type Foo = Bar;\n-    fn parse_item_type(&mut self) -> PResult<'a, ItemInfo> {\n+    /// or\n+    /// existential type Foo: Bar;\n+    /// or\n+    /// return None without modifying the parser state\n+    fn eat_type(&mut self) -> Option<PResult<'a, (Ident, AliasKind, ast::Generics)>> {\n+        // This parses the grammar:\n+        //     Ident [\"<\"...\">\"] [\"where\" ...] (\"=\" | \":\") Ty \";\"\n+        if self.check_keyword(keywords::Type) ||\n+           self.check_keyword(keywords::Existential) &&\n+                self.look_ahead(1, |t| t.is_keyword(keywords::Type)) {\n+            let existential = self.eat_keyword(keywords::Existential);\n+            assert!(self.eat_keyword(keywords::Type));\n+            Some(self.parse_existential_or_alias(existential))\n+        } else {\n+            None\n+        }\n+    }\n+\n+    /// Parse type alias or existential type\n+    fn parse_existential_or_alias(\n+        &mut self,\n+        existential: bool,\n+    ) -> PResult<'a, (Ident, AliasKind, ast::Generics)> {\n         let ident = self.parse_ident()?;\n         let mut tps = self.parse_generics()?;\n         tps.where_clause = self.parse_where_clause()?;\n-        self.expect(&token::Eq)?;\n-        let ty = self.parse_ty()?;\n+        let alias = if existential {\n+            self.expect(&token::Colon)?;\n+            let bounds = self.parse_generic_bounds()?;\n+            AliasKind::Existential(bounds)\n+        } else {\n+            self.expect(&token::Eq)?;\n+            let ty = self.parse_ty()?;\n+            AliasKind::Weak(ty)\n+        };\n         self.expect(&token::Semi)?;\n-        Ok((ident, ItemKind::Ty(ty, tps), None))\n+        Ok((ident, alias, tps))\n     }\n \n     /// Parse the part of an \"enum\" decl following the '{'\n@@ -6926,15 +6961,19 @@ impl<'a> Parser<'a> {\n                                     maybe_append(attrs, extra_attrs));\n             return Ok(Some(item));\n         }\n-        if self.eat_keyword(keywords::Type) {\n+        if let Some(type_) = self.eat_type() {\n+            let (ident, alias, generics) = type_?;\n             // TYPE ITEM\n-            let (ident, item_, extra_attrs) = self.parse_item_type()?;\n+            let item_ = match alias {\n+                AliasKind::Weak(ty) => ItemKind::Ty(ty, generics),\n+                AliasKind::Existential(bounds) => ItemKind::Existential(bounds, generics),\n+            };\n             let prev_span = self.prev_span;\n             let item = self.mk_item(lo.to(prev_span),\n                                     ident,\n                                     item_,\n                                     visibility,\n-                                    maybe_append(attrs, extra_attrs));\n+                                    attrs);\n             return Ok(Some(item));\n         }\n         if self.eat_keyword(keywords::Enum) {"}, {"sha": "de68780ef2ca203ca2b7793a0b6e0f1a9727cbc8", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "patch": "@@ -1280,9 +1280,7 @@ impl<'a> State<'a> {\n                 self.end()?;\n             }\n             ast::ItemKind::Ty(ref ty, ref generics) => {\n-                self.ibox(INDENT_UNIT)?;\n-                self.ibox(0)?;\n-                self.word_nbsp(&visibility_qualified(&item.vis, \"type\"))?;\n+                self.head(&visibility_qualified(&item.vis, \"type\"))?;\n                 self.print_ident(item.ident)?;\n                 self.print_generic_params(&generics.params)?;\n                 self.end()?; // end the inner ibox\n@@ -1294,6 +1292,18 @@ impl<'a> State<'a> {\n                 self.s.word(\";\")?;\n                 self.end()?; // end the outer ibox\n             }\n+            ast::ItemKind::Existential(ref bounds, ref generics) => {\n+                self.head(&visibility_qualified(&item.vis, \"existential type\"))?;\n+                self.print_ident(item.ident)?;\n+                self.print_generic_params(&generics.params)?;\n+                self.end()?; // end the inner ibox\n+\n+                self.print_where_clause(&generics.where_clause)?;\n+                self.s.space()?;\n+                self.print_type_bounds(\":\", bounds)?;\n+                self.s.word(\";\")?;\n+                self.end()?; // end the outer ibox\n+            }\n             ast::ItemKind::Enum(ref enum_definition, ref params) => {\n                 self.print_enum_def(\n                     enum_definition,\n@@ -1501,8 +1511,8 @@ impl<'a> State<'a> {\n         }\n     }\n \n-    pub fn print_defaultness(&mut self, defatulness: ast::Defaultness) -> io::Result<()> {\n-        if let ast::Defaultness::Default = defatulness {\n+    pub fn print_defaultness(&mut self, defaultness: ast::Defaultness) -> io::Result<()> {\n+        if let ast::Defaultness::Default = defaultness {\n             try!(self.word_nbsp(\"default\"));\n         }\n         Ok(())\n@@ -1650,6 +1660,10 @@ impl<'a> State<'a> {\n             ast::ImplItemKind::Type(ref ty) => {\n                 self.print_associated_type(ii.ident, None, Some(ty))?;\n             }\n+            ast::ImplItemKind::Existential(ref bounds) => {\n+                self.word_space(\"existential\")?;\n+                self.print_associated_type(ii.ident, Some(bounds), None)?;\n+            }\n             ast::ImplItemKind::Macro(ref mac) => {\n                 self.print_mac(mac)?;\n                 match mac.node.delim {"}, {"sha": "51be129737e565a1234d79cb9fef9865848f59c5", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "patch": "@@ -252,6 +252,10 @@ pub fn walk_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a Item) {\n             visitor.visit_ty(typ);\n             visitor.visit_generics(type_parameters)\n         }\n+        ItemKind::Existential(ref bounds, ref type_parameters) => {\n+            walk_list!(visitor, visit_param_bound, bounds);\n+            visitor.visit_generics(type_parameters)\n+        }\n         ItemKind::Enum(ref enum_definition, ref type_parameters) => {\n             visitor.visit_generics(type_parameters);\n             visitor.visit_enum_def(enum_definition, type_parameters, item.id, item.span)\n@@ -600,6 +604,9 @@ pub fn walk_impl_item<'a, V: Visitor<'a>>(visitor: &mut V, impl_item: &'a ImplIt\n         ImplItemKind::Type(ref ty) => {\n             visitor.visit_ty(ty);\n         }\n+        ImplItemKind::Existential(ref bounds) => {\n+            walk_list!(visitor, visit_param_bound, bounds);\n+        }\n         ImplItemKind::Macro(ref mac) => {\n             visitor.visit_mac(mac);\n         }"}, {"sha": "62f22475e7de750cdd0179eb564f83fb681960a1", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "patch": "@@ -426,6 +426,7 @@ declare_keywords! {\n     (56, Default,            \"default\")\n     (57, Dyn,                \"dyn\")\n     (58, Union,              \"union\")\n+    (59, Existential,        \"existential\")\n }\n \n impl Symbol {"}, {"sha": "d0836d4af9737e06d38f87bf0927b26b8e49161b", "filename": "src/test/parse-fail/issue-20711-2.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fparse-fail%2Fissue-20711-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fparse-fail%2Fissue-20711-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fissue-20711-2.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "patch": "@@ -9,13 +9,14 @@\n // except according to those terms.\n \n // compile-flags: -Z parse-only\n+// ignore-tidy-linelength\n \n struct Foo;\n \n impl Foo {\n     fn foo() {}\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-} //~ ERROR expected one of `async`, `const`, `crate`, `default`, `extern`, `fn`, `pub`, `type`, or\n+} //~ ERROR expected one of `async`, `const`, `crate`, `default`, `existential`, `extern`, `fn`, `pub`, `type`, or\n \n fn main() {}"}, {"sha": "d944224798852df1fa64a8351d6a7b861e80c54c", "filename": "src/test/parse-fail/issue-20711.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fparse-fail%2Fissue-20711.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fparse-fail%2Fissue-20711.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fissue-20711.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "patch": "@@ -9,11 +9,12 @@\n // except according to those terms.\n \n // compile-flags: -Z parse-only\n+// ignore-tidy-linelength\n \n struct Foo;\n \n impl Foo {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-} //~ ERROR expected one of `async`, `const`, `crate`, `default`, `extern`, `fn`, `pub`, `type`, or\n+} //~ ERROR expected one of `async`, `const`, `crate`, `default`, `existential`, `extern`, `fn`, `pub`, `type`, or\n \n fn main() {}"}, {"sha": "4c0cd3358ddbde397db01202d12113b848af22d9", "filename": "src/test/parse-fail/removed-syntax-static-fn.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fparse-fail%2Fremoved-syntax-static-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fparse-fail%2Fremoved-syntax-static-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fremoved-syntax-static-fn.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "patch": "@@ -9,10 +9,11 @@\n // except according to those terms.\n \n // compile-flags: -Z parse-only\n+// ignore-tidy-linelength\n \n struct S;\n \n impl S {\n     static fn f() {}\n }\n-//~^^ ERROR expected one of `async`, `const`, `crate`, `default`, `extern`, `fn`, `pub`, `type`,\n+//~^^ ERROR expected one of `async`, `const`, `crate`, `default`, `existential`, `extern`, `fn`, `pub`, `type`,"}, {"sha": "d2cecd83036ec88a47dfccfa6bc4ae3a2bee8de9", "filename": "src/test/run-pass/existential_type.rs", "status": "added", "additions": 113, "deletions": 0, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Frun-pass%2Fexistential_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Frun-pass%2Fexistential_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexistential_type.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "patch": "@@ -0,0 +1,113 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(existential_type)]\n+\n+fn main() {\n+    assert_eq!(foo().to_string(), \"foo\");\n+    assert_eq!(bar1().to_string(), \"bar1\");\n+    assert_eq!(bar2().to_string(), \"bar2\");\n+    let mut x = bar1();\n+    x = bar2();\n+    assert_eq!(boo::boo().to_string(), \"boo\");\n+    assert_eq!(my_iter(42u8).collect::<Vec<u8>>(), vec![42u8]);\n+}\n+\n+// single definition\n+existential type Foo: std::fmt::Display;\n+\n+fn foo() -> Foo {\n+    \"foo\"\n+}\n+\n+// two definitions\n+existential type Bar: std::fmt::Display;\n+\n+fn bar1() -> Bar {\n+    \"bar1\"\n+}\n+\n+fn bar2() -> Bar {\n+    \"bar2\"\n+}\n+\n+// definition in submodule\n+existential type Boo: std::fmt::Display;\n+\n+mod boo {\n+    pub fn boo() -> super::Boo {\n+        \"boo\"\n+    }\n+}\n+\n+existential type MyIter<T>: Iterator<Item = T>;\n+\n+fn my_iter<T>(t: T) -> MyIter<T> {\n+    std::iter::once(t)\n+}\n+\n+fn my_iter2<T>(t: T) -> MyIter<T> {\n+    std::iter::once(t)\n+}\n+\n+// param names should not have an effect!\n+fn my_iter3<U>(u: U) -> MyIter<U> {\n+    std::iter::once(u)\n+}\n+\n+// param position should not have an effect!\n+fn my_iter4<U, V>(_: U, v: V) -> MyIter<V> {\n+    std::iter::once(v)\n+}\n+\n+// param names should not have an effect!\n+existential type MyOtherIter<T>: Iterator<Item = T>;\n+\n+fn my_other_iter<U>(u: U) -> MyOtherIter<U> {\n+    std::iter::once(u)\n+}\n+\n+trait Trait {}\n+existential type GenericBound<T: Trait>: 'static;\n+\n+fn generic_bound<T: Trait>(_: T) -> GenericBound<T> {\n+    unimplemented!()\n+}\n+\n+mod pass_through {\n+    pub existential type Passthrough<T>: 'static;\n+\n+    fn define_passthrough<T: 'static>(t: T) -> Passthrough<T> {\n+        t\n+    }\n+}\n+\n+fn use_passthrough(x: pass_through::Passthrough<u32>) -> pass_through::Passthrough<u32> {\n+    x\n+}\n+\n+existential type PartiallyDefined<T>: 'static;\n+\n+// doesn't declare all PartiallyDefined for all possible `T`, but since it's the only\n+// function producing the value, noone can ever get a value that is problematic\n+fn partially_defined<T: std::fmt::Debug>(_: T) -> PartiallyDefined<T> {\n+    4u32\n+}\n+\n+existential type PartiallyDefined2<T>: 'static;\n+\n+fn partially_defined2<T: std::fmt::Debug>(_: T) -> PartiallyDefined2<T> {\n+    4u32\n+}\n+\n+// fully defines PartiallyDefine2\n+fn partially_defined22<T>(_: T) -> PartiallyDefined2<T> {\n+    4u32\n+}"}, {"sha": "ae1c98c8564bfbcf2d74958be377d3e5ef2b6147", "filename": "src/test/ui/as-ref.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fas-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fas-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fas-ref.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/as-ref.rs"}, {"sha": "27016445ec5ad02f2ed4e2f9ccb8612d4c529d5c", "filename": "src/test/ui/as-ref.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fas-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fas-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fas-ref.stderr?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/as-ref.stderr"}, {"sha": "b61667cfd882ce02e3a44b5141adea3352a211f1", "filename": "src/test/ui/auxiliary/m1.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fauxiliary%2Fm1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fauxiliary%2Fm1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauxiliary%2Fm1.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/auxiliary/m1.rs"}, {"sha": "94ff5e4497fe92d7d7718371a565304903b18ac2", "filename": "src/test/ui/auxiliary/m2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fauxiliary%2Fm2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fauxiliary%2Fm2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauxiliary%2Fm2.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/auxiliary/m2.rs"}, {"sha": "01282f2ad24b2daf57af8ae346e724947a3e9a4b", "filename": "src/test/ui/auxiliary/macro-in-other-crate.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fauxiliary%2Fmacro-in-other-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fauxiliary%2Fmacro-in-other-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauxiliary%2Fmacro-in-other-crate.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/auxiliary/macro-in-other-crate.rs"}, {"sha": "4275e80e7fe8b32bcdfb26b201ccb9b84f8f0c0c", "filename": "src/test/ui/auxiliary/removing-extern-crate.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fauxiliary%2Fremoving-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fauxiliary%2Fremoving-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauxiliary%2Fremoving-extern-crate.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/auxiliary/removing-extern-crate.rs"}, {"sha": "b3a0d592f760156bb21c36f4bb86415356a72926", "filename": "src/test/ui/closure-immutable-outer-variable.fixed", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fclosure-immutable-outer-variable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fclosure-immutable-outer-variable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-immutable-outer-variable.fixed?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/closure-immutable-outer-variable.fixed"}, {"sha": "335ccefe8a0b12096d3655d1343adf11f9232635", "filename": "src/test/ui/closure-immutable-outer-variable.nll.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fclosure-immutable-outer-variable.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fclosure-immutable-outer-variable.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-immutable-outer-variable.nll.stderr?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/closure-immutable-outer-variable.nll.stderr"}, {"sha": "e162678460c6c0a2e84bf2f83d65e86256b1d5fd", "filename": "src/test/ui/closure-immutable-outer-variable.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fclosure-immutable-outer-variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fclosure-immutable-outer-variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-immutable-outer-variable.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/closure-immutable-outer-variable.rs"}, {"sha": "80a5a45a3058007b3f1f3aeccdbace628bb91074", "filename": "src/test/ui/closure-immutable-outer-variable.rs.fixed", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fclosure-immutable-outer-variable.rs.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fclosure-immutable-outer-variable.rs.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-immutable-outer-variable.rs.fixed?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/closure-immutable-outer-variable.rs.fixed"}, {"sha": "0ee11d8cf15dead51f9e482ea4627b6a2e816bdf", "filename": "src/test/ui/closure-immutable-outer-variable.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fclosure-immutable-outer-variable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fclosure-immutable-outer-variable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-immutable-outer-variable.stderr?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/closure-immutable-outer-variable.stderr"}, {"sha": "ef1566ab56ae819034ecc308fa24f41d6f571538", "filename": "src/test/ui/confuse-field-and-method/issue-18343.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-18343.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-18343.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-18343.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/confuse-field-and-method/issue-18343.rs"}, {"sha": "b1e3105a5f920b8f812616f4ff77314e7991affa", "filename": "src/test/ui/confuse-field-and-method/issue-18343.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-18343.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-18343.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-18343.stderr?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/confuse-field-and-method/issue-18343.stderr"}, {"sha": "f0c5a2a913f8e4659935e336917f83ac600cc898", "filename": "src/test/ui/confuse-field-and-method/issue-2392.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-2392.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-2392.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-2392.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/confuse-field-and-method/issue-2392.rs"}, {"sha": "9049ffd40909007a94d56a40f5d664da56753e1c", "filename": "src/test/ui/confuse-field-and-method/issue-2392.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-2392.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-2392.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-2392.stderr?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/confuse-field-and-method/issue-2392.stderr"}, {"sha": "d306b38e00e3f522844507c66ec0329942ace58d", "filename": "src/test/ui/confuse-field-and-method/issue-32128.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-32128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-32128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-32128.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/confuse-field-and-method/issue-32128.rs"}, {"sha": "95b764b43ede51497f49282814ac2fdd82cef892", "filename": "src/test/ui/confuse-field-and-method/issue-32128.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-32128.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-32128.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-32128.stderr?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/confuse-field-and-method/issue-32128.stderr"}, {"sha": "4cd50be50d4a57aaea417f1e81391e632823cc6c", "filename": "src/test/ui/confuse-field-and-method/issue-33784.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-33784.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-33784.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-33784.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/confuse-field-and-method/issue-33784.rs"}, {"sha": "b7f13320eec6eeec30c1689b2d1c57a959de06ed", "filename": "src/test/ui/confuse-field-and-method/issue-33784.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-33784.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-33784.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-33784.stderr?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/confuse-field-and-method/issue-33784.stderr"}, {"sha": "4cf939bbed6f514af49e0047b188f90b7668190d", "filename": "src/test/ui/confuse-field-and-method/private-field.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fprivate-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fprivate-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fprivate-field.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/confuse-field-and-method/private-field.rs"}, {"sha": "145df8b156bfb37112a0b388af67db50324a7454", "filename": "src/test/ui/confuse-field-and-method/private-field.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fprivate-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fprivate-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fprivate-field.stderr?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/confuse-field-and-method/private-field.stderr"}, {"sha": "ddad4e79cfdaa3e7ee6bdd485905ebd7b0feee41", "filename": "src/test/ui/const-type-mismatch.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fconst-type-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fconst-type-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-type-mismatch.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/const-type-mismatch.rs"}, {"sha": "965995f82c53a58b9ce434cfa99022723810deec", "filename": "src/test/ui/const-type-mismatch.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fconst-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fconst-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-type-mismatch.stderr?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/const-type-mismatch.stderr"}, {"sha": "8a53bc3ca9385b53b8790eda762c29fc96835abb", "filename": "src/test/ui/conversion-methods.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fconversion-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fconversion-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconversion-methods.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/conversion-methods.rs"}, {"sha": "970ccad231696c19ec14a08570ea25d5adee88ca", "filename": "src/test/ui/conversion-methods.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fconversion-methods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fconversion-methods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconversion-methods.stderr?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/conversion-methods.stderr"}, {"sha": "99bee0d3c59e2a488f0ad3a14677cace7ac5c210", "filename": "src/test/ui/dont-suggest-private-trait-method.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fdont-suggest-private-trait-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fdont-suggest-private-trait-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdont-suggest-private-trait-method.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/dont-suggest-private-trait-method.rs"}, {"sha": "81ecc546a6dee275a7f2b128d77b47777cd89fe8", "filename": "src/test/ui/dont-suggest-private-trait-method.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fdont-suggest-private-trait-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fdont-suggest-private-trait-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdont-suggest-private-trait-method.stderr?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/dont-suggest-private-trait-method.stderr"}, {"sha": "afb73a526a8fe638fa8c6b2828ac5d24eedf6fc6", "filename": "src/test/ui/dotdotdot-expr.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fdotdotdot-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fdotdotdot-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdotdotdot-expr.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/dotdotdot-expr.rs"}, {"sha": "3315538f2f7597859917275a00cfbe3184e222a8", "filename": "src/test/ui/dotdotdot-expr.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fdotdotdot-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fdotdotdot-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdotdotdot-expr.stderr?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/dotdotdot-expr.stderr"}, {"sha": "90840bf205ca2e5ebfe75a072e19f59a58a049b2", "filename": "src/test/ui/existential_type.nll.stderr", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fexistential_type.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fexistential_type.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_type.nll.stderr?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "patch": "@@ -0,0 +1,111 @@\n+error: defining existential type use differs from previous\n+  --> $DIR/existential_type.rs:23:1\n+   |\n+LL | / fn bar() -> Foo { //~ ERROR defining existential type use differs from previous\n+LL | |     42i32\n+LL | | }\n+   | |_^\n+   |\n+note: previous use here\n+  --> $DIR/existential_type.rs:19:1\n+   |\n+LL | / fn foo() -> Foo {\n+LL | |     \"\"\n+LL | | }\n+   | |_^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/existential_type.rs:36:5\n+   |\n+LL | fn bomp() -> boo::Boo {\n+   |              -------- expected `Boo` because of return type\n+LL |     \"\" //~ ERROR mismatched types\n+   |     ^^ expected anonymized type, found reference\n+   |\n+   = note: expected type `Boo`\n+              found type `&'static str`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/existential_type.rs:50:23\n+   |\n+LL |         let _: &str = bomp(); //~ ERROR mismatched types\n+   |                       ^^^^^^ expected &str, found anonymized type\n+   |\n+   = note: expected type `&str`\n+              found type `Boo`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/existential_type.rs:54:9\n+   |\n+LL |     fn bomp() -> boo::Boo {\n+   |                  -------- expected `Boo` because of return type\n+LL |         \"\" //~ ERROR mismatched types\n+   |         ^^ expected anonymized type, found reference\n+   |\n+   = note: expected type `Boo`\n+              found type `&'static str`\n+\n+error[E0277]: the trait bound `T: Trait` is not satisfied\n+  --> $DIR/existential_type.rs:61:1\n+   |\n+LL | existential type Underconstrained<T: Trait>: 'static; //~ ERROR the trait bound `T: Trait`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Trait` is not implemented for `T`\n+   |\n+   = help: consider adding a `where T: Trait` bound\n+   = note: the return type of a function must have a statically known size\n+\n+warning: not reporting region error due to nll\n+  --> $DIR/existential_type.rs:78:1\n+   |\n+LL | existential type WrongGeneric<T>: 'static;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/existential_type.rs:93:27\n+   |\n+LL |     let _: &'static str = x; //~ mismatched types\n+   |                           ^ expected reference, found anonymized type\n+   |\n+   = note: expected type `&'static str`\n+              found type `NoReveal`\n+\n+error[E0605]: non-primitive cast: `NoReveal` as `&'static str`\n+  --> $DIR/existential_type.rs:94:13\n+   |\n+LL |     let _ = x as &'static str; //~ non-primitive cast\n+   |             ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: an `as` expression can only be used to convert between primitive types. Consider using the `From` trait\n+\n+error: could not find defining uses\n+  --> $DIR/existential_type.rs:28:1\n+   |\n+LL | existential type Bar: std::fmt::Debug; //~ ERROR could not find defining uses\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: could not find defining uses\n+  --> $DIR/existential_type.rs:32:5\n+   |\n+LL |     pub existential type Boo: ::std::fmt::Debug; //~ ERROR could not find defining uses\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: defining existential type use differs from previous\n+  --> $DIR/existential_type.rs:74:1\n+   |\n+LL | / fn my_iter2<T>(t: T) -> MyIter<T> { //~ ERROR defining existential type use differs from previous\n+LL | |     Some(t).into_iter()\n+LL | | }\n+   | |_^\n+   |\n+note: previous use here\n+  --> $DIR/existential_type.rs:70:1\n+   |\n+LL | / fn my_iter<T>(t: T) -> MyIter<T> {\n+LL | |     std::iter::once(t)\n+LL | | }\n+   | |_^\n+\n+error: aborting due to 10 previous errors\n+\n+Some errors occurred: E0277, E0308, E0605.\n+For more information about an error, try `rustc --explain E0277`."}, {"sha": "6824d362049777bd0ce2f5d3dfae28a1b9111229", "filename": "src/test/ui/existential_type.rs", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fexistential_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fexistential_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_type.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "patch": "@@ -0,0 +1,95 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+\n+#![feature(existential_type)]\n+\n+fn main() {}\n+\n+// two definitions with different types\n+existential type Foo: std::fmt::Debug;\n+\n+fn foo() -> Foo {\n+    \"\"\n+}\n+\n+fn bar() -> Foo { //~ ERROR defining existential type use differs from previous\n+    42i32\n+}\n+\n+// declared but never defined\n+existential type Bar: std::fmt::Debug; //~ ERROR could not find defining uses\n+\n+mod boo {\n+    // declared in module but not defined inside of it\n+    pub existential type Boo: ::std::fmt::Debug; //~ ERROR could not find defining uses\n+}\n+\n+fn bomp() -> boo::Boo {\n+    \"\" //~ ERROR mismatched types\n+}\n+\n+mod boo2 {\n+    mod boo {\n+        pub existential type Boo: ::std::fmt::Debug;\n+        fn bomp() -> Boo {\n+            \"\"\n+        }\n+    }\n+\n+    // don't actually know the type here\n+\n+    fn bomp2() {\n+        let _: &str = bomp(); //~ ERROR mismatched types\n+    }\n+\n+    fn bomp() -> boo::Boo {\n+        \"\" //~ ERROR mismatched types\n+    }\n+}\n+\n+// generics\n+\n+trait Trait {}\n+existential type Underconstrained<T: Trait>: 'static; //~ ERROR the trait bound `T: Trait`\n+\n+// no `Trait` bound\n+fn underconstrain<T>(_: T) -> Underconstrained<T> {\n+    unimplemented!()\n+}\n+\n+existential type MyIter<T>: Iterator<Item = T>;\n+\n+fn my_iter<T>(t: T) -> MyIter<T> {\n+    std::iter::once(t)\n+}\n+\n+fn my_iter2<T>(t: T) -> MyIter<T> { //~ ERROR defining existential type use differs from previous\n+    Some(t).into_iter()\n+}\n+\n+existential type WrongGeneric<T>: 'static;\n+//~^ ERROR the parameter type `T` may not live long enough\n+\n+fn wrong_generic<T>(t: T) -> WrongGeneric<T> {\n+    t\n+}\n+\n+// don't reveal the concrete type\n+existential type NoReveal: std::fmt::Debug;\n+\n+fn define_no_reveal() -> NoReveal {\n+    \"\"\n+}\n+\n+fn no_reveal(x: NoReveal) {\n+    let _: &'static str = x; //~ mismatched types\n+    let _ = x as &'static str; //~ non-primitive cast\n+}"}, {"sha": "3e7476448bf7fbe97a836aba42a1e3ce754bb233", "filename": "src/test/ui/existential_type.stderr", "status": "added", "additions": 120, "deletions": 0, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fexistential_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fexistential_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_type.stderr?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "patch": "@@ -0,0 +1,120 @@\n+error: defining existential type use differs from previous\n+  --> $DIR/existential_type.rs:23:1\n+   |\n+LL | / fn bar() -> Foo { //~ ERROR defining existential type use differs from previous\n+LL | |     42i32\n+LL | | }\n+   | |_^\n+   |\n+note: previous use here\n+  --> $DIR/existential_type.rs:19:1\n+   |\n+LL | / fn foo() -> Foo {\n+LL | |     \"\"\n+LL | | }\n+   | |_^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/existential_type.rs:36:5\n+   |\n+LL | fn bomp() -> boo::Boo {\n+   |              -------- expected `Boo` because of return type\n+LL |     \"\" //~ ERROR mismatched types\n+   |     ^^ expected anonymized type, found reference\n+   |\n+   = note: expected type `Boo`\n+              found type `&'static str`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/existential_type.rs:50:23\n+   |\n+LL |         let _: &str = bomp(); //~ ERROR mismatched types\n+   |                       ^^^^^^ expected &str, found anonymized type\n+   |\n+   = note: expected type `&str`\n+              found type `Boo`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/existential_type.rs:54:9\n+   |\n+LL |     fn bomp() -> boo::Boo {\n+   |                  -------- expected `Boo` because of return type\n+LL |         \"\" //~ ERROR mismatched types\n+   |         ^^ expected anonymized type, found reference\n+   |\n+   = note: expected type `Boo`\n+              found type `&'static str`\n+\n+error[E0277]: the trait bound `T: Trait` is not satisfied\n+  --> $DIR/existential_type.rs:61:1\n+   |\n+LL | existential type Underconstrained<T: Trait>: 'static; //~ ERROR the trait bound `T: Trait`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Trait` is not implemented for `T`\n+   |\n+   = help: consider adding a `where T: Trait` bound\n+   = note: the return type of a function must have a statically known size\n+\n+error[E0310]: the parameter type `T` may not live long enough\n+  --> $DIR/existential_type.rs:78:1\n+   |\n+LL | existential type WrongGeneric<T>: 'static;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+...\n+LL | fn wrong_generic<T>(t: T) -> WrongGeneric<T> {\n+   |                  - help: consider adding an explicit lifetime bound `T: 'static`...\n+   |\n+note: ...so that the type `T` will meet its required lifetime bounds\n+  --> $DIR/existential_type.rs:78:1\n+   |\n+LL | existential type WrongGeneric<T>: 'static;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/existential_type.rs:93:27\n+   |\n+LL |     let _: &'static str = x; //~ mismatched types\n+   |                           ^ expected reference, found anonymized type\n+   |\n+   = note: expected type `&'static str`\n+              found type `NoReveal`\n+\n+error[E0605]: non-primitive cast: `NoReveal` as `&'static str`\n+  --> $DIR/existential_type.rs:94:13\n+   |\n+LL |     let _ = x as &'static str; //~ non-primitive cast\n+   |             ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: an `as` expression can only be used to convert between primitive types. Consider using the `From` trait\n+\n+error: could not find defining uses\n+  --> $DIR/existential_type.rs:28:1\n+   |\n+LL | existential type Bar: std::fmt::Debug; //~ ERROR could not find defining uses\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: could not find defining uses\n+  --> $DIR/existential_type.rs:32:5\n+   |\n+LL |     pub existential type Boo: ::std::fmt::Debug; //~ ERROR could not find defining uses\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: defining existential type use differs from previous\n+  --> $DIR/existential_type.rs:74:1\n+   |\n+LL | / fn my_iter2<T>(t: T) -> MyIter<T> { //~ ERROR defining existential type use differs from previous\n+LL | |     Some(t).into_iter()\n+LL | | }\n+   | |_^\n+   |\n+note: previous use here\n+  --> $DIR/existential_type.rs:70:1\n+   |\n+LL | / fn my_iter<T>(t: T) -> MyIter<T> {\n+LL | |     std::iter::once(t)\n+LL | | }\n+   | |_^\n+\n+error: aborting due to 11 previous errors\n+\n+Some errors occurred: E0277, E0308, E0310, E0605.\n+For more information about an error, try `rustc --explain E0277`."}, {"sha": "bffb6b5ee109c619c5e81b98a994046b0a411b1d", "filename": "src/test/ui/existential_type2.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fexistential_type2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fexistential_type2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_type2.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+\n+#![feature(existential_type)]\n+\n+fn main() {}\n+\n+existential type Underconstrained<T: std::fmt::Debug>: 'static;\n+//~^ ERROR `U` doesn't implement `std::fmt::Debug`\n+\n+// not a defining use, because it doesn't define *all* possible generics\n+fn underconstrained<U>(_: U) -> Underconstrained<U> {\n+    5u32\n+}\n+\n+existential type Underconstrained2<T: std::fmt::Debug>: 'static;\n+//~^ ERROR `V` doesn't implement `std::fmt::Debug`\n+\n+// not a defining use, because it doesn't define *all* possible generics\n+fn underconstrained2<U, V>(_: U, _: V) -> Underconstrained2<V> {\n+    5u32\n+}"}, {"sha": "53003a4f05d1293c14a3cb818862a5e7aa30de22", "filename": "src/test/ui/existential_type2.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fexistential_type2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fexistential_type2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_type2.stderr?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "patch": "@@ -0,0 +1,23 @@\n+error[E0277]: `U` doesn't implement `std::fmt::Debug`\n+  --> $DIR/existential_type2.rs:16:1\n+   |\n+LL | existential type Underconstrained<T: std::fmt::Debug>: 'static;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `U` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`\n+   |\n+   = help: the trait `std::fmt::Debug` is not implemented for `U`\n+   = help: consider adding a `where U: std::fmt::Debug` bound\n+   = note: the return type of a function must have a statically known size\n+\n+error[E0277]: `V` doesn't implement `std::fmt::Debug`\n+  --> $DIR/existential_type2.rs:24:1\n+   |\n+LL | existential type Underconstrained2<T: std::fmt::Debug>: 'static;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `V` cannot be formatted using `{:?}` because it doesn't implement `std::fmt::Debug`\n+   |\n+   = help: the trait `std::fmt::Debug` is not implemented for `V`\n+   = help: consider adding a `where V: std::fmt::Debug` bound\n+   = note: the return type of a function must have a statically known size\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "b090cf26b879661b3b1d6f1b68d709b2c6b74c33", "filename": "src/test/ui/existential_type3.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fexistential_type3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fexistential_type3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_type3.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+\n+#![feature(existential_type)]\n+\n+fn main() {}\n+\n+existential type WrongGeneric<T: 'static>: 'static;\n+\n+fn wrong_generic<U: 'static, V: 'static>(_: U, v: V) -> WrongGeneric<U> {\n+//~^ ERROR type parameter `V` is part of concrete type but not used in parameter list\n+    v\n+}"}, {"sha": "90800728d7cc6ea1c591031c779fe53d3055573d", "filename": "src/test/ui/existential_type3.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fexistential_type3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fexistential_type3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_type3.stderr?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "patch": "@@ -0,0 +1,12 @@\n+error: type parameter `V` is part of concrete type but not used in parameter list for existential type\n+  --> $DIR/existential_type3.rs:18:73\n+   |\n+LL |   fn wrong_generic<U: 'static, V: 'static>(_: U, v: V) -> WrongGeneric<U> {\n+   |  _________________________________________________________________________^\n+LL | | //~^ ERROR type parameter `V` is part of concrete type but not used in parameter list\n+LL | |     v\n+LL | | }\n+   | |_^\n+\n+error: aborting due to previous error\n+"}, {"sha": "a4b74d6751bd6d593b712d8771adb7f773dff4a7", "filename": "src/test/ui/existential_type4.rs", "status": "renamed", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fexistential_type4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fexistential_type4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_type4.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,15 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// run-rustfix\n \n-// Point at the captured immutable outer variable\n+#![feature(existential_type)]\n \n-fn foo(mut f: Box<FnMut()>) {\n-    f();\n-}\n+fn main() {}\n+\n+existential type Cmp<T>: 'static;\n \n-fn main() {\n-    let y = true;\n-    foo(Box::new(move || y = false) as Box<_>); //~ ERROR cannot assign to captured outer variable\n+// not a defining use, because it doesn't define *all* possible generics\n+fn cmp() -> Cmp<u32> { //~ ERROR non-defining existential type use in defining scope\n+    5u32\n }", "previous_filename": "src/test/ui/suggestions/closure-immutable-outer-variable.nll.fixed"}, {"sha": "b11988746eac6b64a4f0f791f6ebfd3bd273fd8a", "filename": "src/test/ui/existential_type4.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fexistential_type4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fexistential_type4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_type4.stderr?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "patch": "@@ -0,0 +1,16 @@\n+error: non-defining existential type use in defining scope\n+  --> $DIR/existential_type4.rs:19:1\n+   |\n+LL | / fn cmp() -> Cmp<u32> { //~ ERROR non-defining existential type use in defining scope\n+LL | |     5u32\n+LL | | }\n+   | |_^\n+   |\n+note: used non-generic type u32 for generic parameter\n+  --> $DIR/existential_type4.rs:16:22\n+   |\n+LL | existential type Cmp<T>: 'static;\n+   |                      ^\n+\n+error: aborting due to previous error\n+"}, {"sha": "b58149fb0b8dce78b26cae1a44bbe380fcc87961", "filename": "src/test/ui/extern-crate-rename.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fextern-crate-rename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fextern-crate-rename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern-crate-rename.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/extern-crate-rename.rs"}, {"sha": "2c2723fe4c5c8575e311132b256f07f4d05ecc01", "filename": "src/test/ui/extern-crate-rename.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fextern-crate-rename.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fextern-crate-rename.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern-crate-rename.stderr?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/extern-crate-rename.stderr"}, {"sha": "b35a391637737c65ef60ccc2bad31f48b82f3b26", "filename": "src/test/ui/feature-gate-existential-type.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Ffeature-gate-existential-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Ffeature-gate-existential-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-existential-type.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check that existential types must be ungated to use the `existential` keyword\n+\n+\n+\n+existential type Foo: std::fmt::Debug; //~ ERROR existential types are unstable\n+\n+trait Bar {\n+    type Baa: std::fmt::Debug;\n+}\n+\n+impl Bar for () {\n+    existential type Baa: std::fmt::Debug; //~ ERROR existential types are unstable\n+}\n+\n+fn main() {}"}, {"sha": "6db5fa2ce6b94b4ef5434bb5adf1d250c5c4b522", "filename": "src/test/ui/feature-gate-existential-type.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Ffeature-gate-existential-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Ffeature-gate-existential-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-existential-type.stderr?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "patch": "@@ -0,0 +1,19 @@\n+error[E0658]: existential types are unstable (see issue #34511)\n+  --> $DIR/feature-gate-existential-type.rs:15:1\n+   |\n+LL | existential type Foo: std::fmt::Debug; //~ ERROR existential types are unstable\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(existential_type)] to the crate attributes to enable\n+\n+error[E0658]: existential types are unstable (see issue #34511)\n+  --> $DIR/feature-gate-existential-type.rs:22:5\n+   |\n+LL |     existential type Baa: std::fmt::Debug; //~ ERROR existential types are unstable\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(existential_type)] to the crate attributes to enable\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "7ef21d3720d8833ed9180789d0907889206f7f99", "filename": "src/test/ui/fn-closure-mutable-capture.nll.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Ffn-closure-mutable-capture.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Ffn-closure-mutable-capture.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn-closure-mutable-capture.nll.stderr?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/fn-closure-mutable-capture.nll.stderr"}, {"sha": "385efebd59008f86096495282595c6e2bd3f0941", "filename": "src/test/ui/fn-closure-mutable-capture.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Ffn-closure-mutable-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Ffn-closure-mutable-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn-closure-mutable-capture.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/fn-closure-mutable-capture.rs"}, {"sha": "a58d663dc0ab790ec331f4b55c8a4943a30553cf", "filename": "src/test/ui/fn-closure-mutable-capture.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Ffn-closure-mutable-capture.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Ffn-closure-mutable-capture.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn-closure-mutable-capture.stderr?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/fn-closure-mutable-capture.stderr"}, {"sha": "011886e8073467e67126ede597a0006dcf6dbfee", "filename": "src/test/ui/for-c-in-str.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Ffor-c-in-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Ffor-c-in-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffor-c-in-str.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/for-c-in-str.rs"}, {"sha": "b249df3b4ef6a1fd622628a8f86c1e4f55332351", "filename": "src/test/ui/for-c-in-str.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Ffor-c-in-str.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Ffor-c-in-str.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffor-c-in-str.stderr?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/for-c-in-str.stderr"}, {"sha": "251f7eb9a24878d1c49a3fdc902e331c0672a9ef", "filename": "src/test/ui/issue-32354-suggest-import-rename.fixed", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fissue-32354-suggest-import-rename.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fissue-32354-suggest-import-rename.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-32354-suggest-import-rename.fixed?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/issue-32354-suggest-import-rename.fixed"}, {"sha": "57cbeb47a1e0492a41aa02bb43c662667a016c54", "filename": "src/test/ui/issue-32354-suggest-import-rename.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fissue-32354-suggest-import-rename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fissue-32354-suggest-import-rename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-32354-suggest-import-rename.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/issue-32354-suggest-import-rename.rs"}, {"sha": "f45a5f7dd619ba168ec5079af74afb934051afbb", "filename": "src/test/ui/issue-32354-suggest-import-rename.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fissue-32354-suggest-import-rename.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fissue-32354-suggest-import-rename.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-32354-suggest-import-rename.stderr?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/issue-32354-suggest-import-rename.stderr"}, {"sha": "8c5bde45baed042ca8b599a71371b19531be6bc3", "filename": "src/test/ui/issue-43420-no-over-suggest.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fissue-43420-no-over-suggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fissue-43420-no-over-suggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-43420-no-over-suggest.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/issue-43420-no-over-suggest.rs"}, {"sha": "80bbdd11289acbfb7a96cd5269a61b7d6bab6c51", "filename": "src/test/ui/issue-43420-no-over-suggest.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fissue-43420-no-over-suggest.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fissue-43420-no-over-suggest.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-43420-no-over-suggest.stderr?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/issue-43420-no-over-suggest.stderr"}, {"sha": "7c01f0d1ee5322e8bebaac318da0c9cd05cb2b86", "filename": "src/test/ui/issue-45562.fixed", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fissue-45562.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fissue-45562.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-45562.fixed?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/issue-45562.fixed"}, {"sha": "c27d52fcdd392ab78c81e6bdfe6edaffbdfc3f0c", "filename": "src/test/ui/issue-45562.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fissue-45562.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fissue-45562.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-45562.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/issue-45562.rs"}, {"sha": "d9e624cadc70543811e30db2eb001a8df1ab86ec", "filename": "src/test/ui/issue-45562.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fissue-45562.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fissue-45562.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-45562.stderr?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/issue-45562.stderr"}, {"sha": "e3287030408d114f3402a89dbc8f435a7d8aaf9a", "filename": "src/test/ui/issue-45799-bad-extern-crate-rename-suggestion-formatting.fixed", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fissue-45799-bad-extern-crate-rename-suggestion-formatting.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fissue-45799-bad-extern-crate-rename-suggestion-formatting.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-45799-bad-extern-crate-rename-suggestion-formatting.fixed?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/issue-45799-bad-extern-crate-rename-suggestion-formatting.fixed"}, {"sha": "f47ea474d510b2fe3e8c3d3ab9bc828117428e1b", "filename": "src/test/ui/issue-45799-bad-extern-crate-rename-suggestion-formatting.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fissue-45799-bad-extern-crate-rename-suggestion-formatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fissue-45799-bad-extern-crate-rename-suggestion-formatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-45799-bad-extern-crate-rename-suggestion-formatting.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/issue-45799-bad-extern-crate-rename-suggestion-formatting.rs"}, {"sha": "ecdfec2b3bfd6aaef1aed023e5f5ebdfd0662d2e", "filename": "src/test/ui/issue-45799-bad-extern-crate-rename-suggestion-formatting.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fissue-45799-bad-extern-crate-rename-suggestion-formatting.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fissue-45799-bad-extern-crate-rename-suggestion-formatting.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-45799-bad-extern-crate-rename-suggestion-formatting.stderr?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/issue-45799-bad-extern-crate-rename-suggestion-formatting.stderr"}, {"sha": "6ae6b549b070ee0841a08553135afd780abe97c2", "filename": "src/test/ui/issue-46302.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fissue-46302.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fissue-46302.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-46302.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/issue-46302.rs"}, {"sha": "8e399136fadba9b86e02bd069a417b5a3a8eb757", "filename": "src/test/ui/issue-46302.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fissue-46302.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fissue-46302.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-46302.stderr?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/issue-46302.stderr"}, {"sha": "77171cad6e71491a997d9c1c92bf295c1924e34a", "filename": "src/test/ui/issue-46756-consider-borrowing-cast-or-binexpr.fixed", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fissue-46756-consider-borrowing-cast-or-binexpr.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fissue-46756-consider-borrowing-cast-or-binexpr.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-46756-consider-borrowing-cast-or-binexpr.fixed?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/issue-46756-consider-borrowing-cast-or-binexpr.fixed"}, {"sha": "e5ea9b5ed099dfa949479d3f7a94be6cf67ece2e", "filename": "src/test/ui/issue-46756-consider-borrowing-cast-or-binexpr.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fissue-46756-consider-borrowing-cast-or-binexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fissue-46756-consider-borrowing-cast-or-binexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-46756-consider-borrowing-cast-or-binexpr.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/issue-46756-consider-borrowing-cast-or-binexpr.rs"}, {"sha": "9c492751ca1a026be52083622c2970f14a135d4b", "filename": "src/test/ui/issue-46756-consider-borrowing-cast-or-binexpr.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fissue-46756-consider-borrowing-cast-or-binexpr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fissue-46756-consider-borrowing-cast-or-binexpr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-46756-consider-borrowing-cast-or-binexpr.stderr?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/issue-46756-consider-borrowing-cast-or-binexpr.stderr"}, {"sha": "82cb722a6560096cafc6f985c71e4cb652083adc", "filename": "src/test/ui/issue-48364.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fissue-48364.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fissue-48364.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-48364.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/issue-48364.rs"}, {"sha": "b420654a32d8c9bfe6520c3c682ac2bed98184ca", "filename": "src/test/ui/issue-48364.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fissue-48364.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fissue-48364.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-48364.stderr?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/issue-48364.stderr"}, {"sha": "ce02ae2aec23f25d44aafb8cde8c57027eb65a4a", "filename": "src/test/ui/issue-51244.nll.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fissue-51244.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fissue-51244.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-51244.nll.stderr?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/issue-51244.nll.stderr"}, {"sha": "50a21184a98b90a5bd7014ba0626ff4dd0d18222", "filename": "src/test/ui/issue-51244.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fissue-51244.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fissue-51244.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-51244.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/issue-51244.rs"}, {"sha": "997a74295e565a68fea8ae287f4bbe48d15d66eb", "filename": "src/test/ui/issue-51244.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fissue-51244.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fissue-51244.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-51244.stderr?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/issue-51244.stderr"}, {"sha": "3e0a3b757a3d68a73d93a6acc322233a05e88617", "filename": "src/test/ui/issue-51515.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fissue-51515.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fissue-51515.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-51515.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/issue-51515.rs"}, {"sha": "3e7349b5acabf095e14f43dabd7669ec3f2caac9", "filename": "src/test/ui/issue-51515.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fissue-51515.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fissue-51515.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-51515.stderr?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/issue-51515.stderr"}, {"sha": "6f71f1676119a7980791b8d8dbaad818e9f7fed1", "filename": "src/test/ui/issue-52049.nll.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fissue-52049.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fissue-52049.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-52049.nll.stderr?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/issue-52049.nll.stderr"}, {"sha": "daff2258d3620c202458be407e56711fc1397c17", "filename": "src/test/ui/issue-52049.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fissue-52049.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fissue-52049.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-52049.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/issue-52049.rs"}, {"sha": "e1e501023fcef4948f793a466da40f824c21b2fa", "filename": "src/test/ui/issue-52049.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fissue-52049.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fissue-52049.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-52049.stderr?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/issue-52049.stderr"}, {"sha": "2b6e830ec59622f871a177d317dea34d461aa2e9", "filename": "src/test/ui/method-on-ambiguous-numeric-type.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fmethod-on-ambiguous-numeric-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fmethod-on-ambiguous-numeric-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethod-on-ambiguous-numeric-type.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/method-on-ambiguous-numeric-type.rs"}, {"sha": "796520e0ec71ba3849cb37fba9c756d9ff5d9c29", "filename": "src/test/ui/method-on-ambiguous-numeric-type.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fmethod-on-ambiguous-numeric-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fmethod-on-ambiguous-numeric-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethod-on-ambiguous-numeric-type.stderr?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/method-on-ambiguous-numeric-type.stderr"}, {"sha": "4832f35f42d2ae82485f8032bacd976a91c82cd5", "filename": "src/test/ui/missing-comma-in-match.fixed", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fmissing-comma-in-match.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fmissing-comma-in-match.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing-comma-in-match.fixed?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/missing-comma-in-match.fixed"}, {"sha": "e39b20e77ea800a7e9d89626bac9c2c3c7ff340a", "filename": "src/test/ui/missing-comma-in-match.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fmissing-comma-in-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fmissing-comma-in-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing-comma-in-match.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/missing-comma-in-match.rs"}, {"sha": "779359341073ea7f54141f9521a7e81a917179e0", "filename": "src/test/ui/missing-comma-in-match.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fmissing-comma-in-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fmissing-comma-in-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing-comma-in-match.stderr?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/missing-comma-in-match.stderr"}, {"sha": "2092b6bce37c1733bcd4da00647779542b548eef", "filename": "src/test/ui/numeric-cast-2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fnumeric-cast-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fnumeric-cast-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric-cast-2.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/numeric-cast-2.rs"}, {"sha": "3d4855837172e6224962c4edf6c22653bbec38f3", "filename": "src/test/ui/numeric-cast-2.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fnumeric-cast-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fnumeric-cast-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric-cast-2.stderr?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/numeric-cast-2.stderr"}, {"sha": "69bfdfa94b13e0866c55986063d6e22ab7328f71", "filename": "src/test/ui/numeric-cast.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fnumeric-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fnumeric-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric-cast.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/numeric-cast.rs"}, {"sha": "4aac65ff4cbd26488d870d7e95236e306b3071aa", "filename": "src/test/ui/numeric-cast.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fnumeric-cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fnumeric-cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric-cast.stderr?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/numeric-cast.stderr"}, {"sha": "39252597a23e8803926a413cb86fc9de0cded96d", "filename": "src/test/ui/placement-syntax.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fplacement-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fplacement-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fplacement-syntax.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/placement-syntax.rs"}, {"sha": "933ba96519c445f6b21b8723cc36e6bc211468dd", "filename": "src/test/ui/placement-syntax.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fplacement-syntax.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fplacement-syntax.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fplacement-syntax.stderr?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/placement-syntax.stderr"}, {"sha": "44884bfcdfdce786715d88ae569b82057f69a933", "filename": "src/test/ui/pub-ident-fn-2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fpub-ident-fn-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fpub-ident-fn-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub-ident-fn-2.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/pub-ident-fn-2.rs"}, {"sha": "bbbb3df876986b22dcf698a112731be2d141bf63", "filename": "src/test/ui/pub-ident-fn-2.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fpub-ident-fn-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fpub-ident-fn-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub-ident-fn-2.stderr?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/pub-ident-fn-2.stderr"}, {"sha": "1ccadc8a40b72dd4dc235c66e90e6a1848edc830", "filename": "src/test/ui/pub-ident-fn-or-struct-2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fpub-ident-fn-or-struct-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fpub-ident-fn-or-struct-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub-ident-fn-or-struct-2.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/pub-ident-fn-or-struct-2.rs"}, {"sha": "e492a8c47567e214c639be39f3bab802e9e925ff", "filename": "src/test/ui/pub-ident-fn-or-struct-2.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fpub-ident-fn-or-struct-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fpub-ident-fn-or-struct-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub-ident-fn-or-struct-2.stderr?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/pub-ident-fn-or-struct-2.stderr"}, {"sha": "0664918945b43157ab0ee862b6700843280ea6e4", "filename": "src/test/ui/pub-ident-fn-or-struct.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fpub-ident-fn-or-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fpub-ident-fn-or-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub-ident-fn-or-struct.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/pub-ident-fn-or-struct.rs"}, {"sha": "c1bff34cec3e61695bac530d29774369124012be", "filename": "src/test/ui/pub-ident-fn-or-struct.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fpub-ident-fn-or-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fpub-ident-fn-or-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub-ident-fn-or-struct.stderr?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/pub-ident-fn-or-struct.stderr"}, {"sha": "f2d0c6c3e1d3fbaf22fe3b9b9574b3bb9f7c2d53", "filename": "src/test/ui/pub-ident-fn.fixed", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fpub-ident-fn.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fpub-ident-fn.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub-ident-fn.fixed?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/pub-ident-fn.fixed"}, {"sha": "82c32f57eeae0f30df70d7712137bc0e2b01ddbf", "filename": "src/test/ui/pub-ident-fn.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fpub-ident-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fpub-ident-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub-ident-fn.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/pub-ident-fn.rs"}, {"sha": "f7c96b8b9f4bb951c8b9e087d193245d226a4398", "filename": "src/test/ui/pub-ident-fn.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fpub-ident-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fpub-ident-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub-ident-fn.stderr?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/pub-ident-fn.stderr"}, {"sha": "d08d498f87a01b7d7c6a29af58e22d9d81fc17bb", "filename": "src/test/ui/pub-ident-struct.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fpub-ident-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fpub-ident-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub-ident-struct.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/pub-ident-struct.rs"}, {"sha": "cd53cea7212975350186bfbff0324c0035fd4864", "filename": "src/test/ui/pub-ident-struct.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fpub-ident-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fpub-ident-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub-ident-struct.stderr?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/pub-ident-struct.stderr"}, {"sha": "83b35cec80956847ff2141afc27d63697b8b209f", "filename": "src/test/ui/removing-extern-crate.fixed", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fremoving-extern-crate.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fremoving-extern-crate.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fremoving-extern-crate.fixed?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/removing-extern-crate.fixed"}, {"sha": "29479086460e6cca9095f4ec5ebc646b7dd091c9", "filename": "src/test/ui/removing-extern-crate.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fremoving-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fremoving-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fremoving-extern-crate.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/removing-extern-crate.rs"}, {"sha": "f2eed27a2669391ad97f746eaaad535ecf11ad56", "filename": "src/test/ui/removing-extern-crate.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fremoving-extern-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fremoving-extern-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fremoving-extern-crate.stderr?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/removing-extern-crate.stderr"}, {"sha": "312f60202c6c254dad35ac423e8fe56e6fb33e08", "filename": "src/test/ui/repr.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepr.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/repr.rs"}, {"sha": "7a99d8c04488f2c38c8d3a79c1ea6dfdf00bf879", "filename": "src/test/ui/repr.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Frepr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Frepr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepr.stderr?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/repr.stderr"}, {"sha": "e63787949a41b60bde7adabbfd258f248bd99008", "filename": "src/test/ui/return-type.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Freturn-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Freturn-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freturn-type.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/return-type.rs"}, {"sha": "7d7653eee28fd6dc723b5651c32125fd9495ce1d", "filename": "src/test/ui/return-type.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Freturn-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Freturn-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freturn-type.stderr?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/return-type.stderr"}, {"sha": "6d18075ba37cf1174e56e34afe268672d0a38d7d", "filename": "src/test/ui/single-use-lifetime/one-use-in-fn-argument-in-band.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-fn-argument-in-band.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-fn-argument-in-band.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-fn-argument-in-band.stderr?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "patch": "@@ -1,26 +1,26 @@\n-error: lifetime parameter `'b` only used once\n-  --> $DIR/one-use-in-fn-argument-in-band.rs:19:22\n+error: lifetime parameter `'a` only used once\n+  --> $DIR/one-use-in-fn-argument-in-band.rs:19:10\n    |\n LL | fn a(x: &'a u32, y: &'b u32) {\n-   |                      ^^\n-   |                      |\n-   |                      this lifetime...\n-   |                      ...is used only here\n+   |          ^^\n+   |          |\n+   |          this lifetime...\n+   |          ...is used only here\n    |\n note: lint level defined here\n   --> $DIR/one-use-in-fn-argument-in-band.rs:12:9\n    |\n LL | #![deny(single_use_lifetimes)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n-error: lifetime parameter `'a` only used once\n-  --> $DIR/one-use-in-fn-argument-in-band.rs:19:10\n+error: lifetime parameter `'b` only used once\n+  --> $DIR/one-use-in-fn-argument-in-band.rs:19:22\n    |\n LL | fn a(x: &'a u32, y: &'b u32) {\n-   |          ^^\n-   |          |\n-   |          this lifetime...\n-   |          ...is used only here\n+   |                      ^^\n+   |                      |\n+   |                      this lifetime...\n+   |                      ...is used only here\n \n error: aborting due to 2 previous errors\n "}, {"sha": "9d6cf5fe598c5d28d5ad0104e5b1ab8b2657e21d", "filename": "src/test/ui/str-array-assignment.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fstr-array-assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fstr-array-assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstr-array-assignment.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/str-array-assignment.rs"}, {"sha": "7a774cab38e40231e5d64c9707eca8ab1ac1b7c4", "filename": "src/test/ui/str-array-assignment.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fstr-array-assignment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fstr-array-assignment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstr-array-assignment.stderr?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/str-array-assignment.stderr"}, {"sha": "c0dad38e436874a56279781d0c43942602cf9f87", "filename": "src/test/ui/str-as-char.fixed", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fstr-as-char.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fstr-as-char.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstr-as-char.fixed?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/str-as-char.fixed"}, {"sha": "b5a5df0af7f94009ce071fa770eed6c2256bb093", "filename": "src/test/ui/str-as-char.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fstr-as-char.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fstr-as-char.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstr-as-char.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/str-as-char.rs"}, {"sha": "60eb182adf14546959ef6832ab03b92d300e6cf6", "filename": "src/test/ui/str-as-char.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fstr-as-char.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fstr-as-char.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstr-as-char.stderr?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/str-as-char.stderr"}, {"sha": "9fb519c57edf35dbfade0332a3fa1fe5eb2d8b05", "filename": "src/test/ui/suggest-labels.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fsuggest-labels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fsuggest-labels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggest-labels.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/suggest-labels.rs"}, {"sha": "671ff1a56db6c93eeca7e6eda174b5184cd56d3a", "filename": "src/test/ui/suggest-labels.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fsuggest-labels.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fsuggest-labels.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggest-labels.stderr?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/suggest-labels.stderr"}, {"sha": "49027deecc198f9aaa35419013ddf0b4ac9292ae", "filename": "src/test/ui/suggest-methods.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fsuggest-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fsuggest-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggest-methods.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/suggest-methods.rs"}, {"sha": "cb352361f33eff3665ff585aa024f719efa41519", "filename": "src/test/ui/suggest-methods.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fsuggest-methods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fsuggest-methods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggest-methods.stderr?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/suggest-methods.stderr"}, {"sha": "30b5371af1ac58f642f48113100256a75bf2a553", "filename": "src/test/ui/suggest-ref-mut.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fsuggest-ref-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fsuggest-ref-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggest-ref-mut.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/suggest-ref-mut.rs"}, {"sha": "0b2b240ef53a8fcb44c7cc9f5ea0c5c68c244d31", "filename": "src/test/ui/suggest-ref-mut.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fsuggest-ref-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Fsuggest-ref-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggest-ref-mut.stderr?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/suggest-ref-mut.stderr"}, {"sha": "5c1aae29c2fdf5075280a6d6251724a4036b997a", "filename": "src/test/ui/token/issue-41155.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Ftoken%2Fissue-41155.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Ftoken%2Fissue-41155.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftoken%2Fissue-41155.stderr?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `(`, `async`, `const`, `default`, `extern`, `fn`, `type`, or `unsafe`, found `}`\n+error: expected one of `(`, `async`, `const`, `default`, `existential`, `extern`, `fn`, `type`, or `unsafe`, found `}`\n   --> $DIR/issue-41155.rs:13:1\n    |\n LL |     pub\n-   |        - expected one of 8 possible tokens here\n+   |        - expected one of 9 possible tokens here\n LL | } //~ ERROR expected one of\n    | ^ unexpected token\n "}, {"sha": "65ca23402d27e4b655a46e72382e78b43edfd289", "filename": "src/test/ui/try-on-option.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Ftry-on-option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Ftry-on-option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-on-option.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/try-on-option.rs"}, {"sha": "265ee593bb7090a61759a2690d0d3a1b746df95d", "filename": "src/test/ui/try-on-option.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Ftry-on-option.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Ftry-on-option.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-on-option.stderr?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/try-on-option.stderr"}, {"sha": "e52ef45c2ecf953e5a9ee6fe1b723fd3b250e29b", "filename": "src/test/ui/try-operator-on-main.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Ftry-operator-on-main.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Ftry-operator-on-main.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-operator-on-main.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/try-operator-on-main.rs"}, {"sha": "121ae14f999c19d4090eceb10cad5788abbc0754", "filename": "src/test/ui/try-operator-on-main.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Ftry-operator-on-main.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Ftry-operator-on-main.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-operator-on-main.stderr?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/try-operator-on-main.stderr"}, {"sha": "55bc2f77dada95089ca88f127324eec3d1798810", "filename": "src/test/ui/tuple-float-index.fixed", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Ftuple-float-index.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Ftuple-float-index.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftuple-float-index.fixed?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/tuple-float-index.fixed"}, {"sha": "d569ca4cb861e01a20fce5fd83aa6ed69ead7dd2", "filename": "src/test/ui/tuple-float-index.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Ftuple-float-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Ftuple-float-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftuple-float-index.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/tuple-float-index.rs"}, {"sha": "15af0834f03729a12b2f1fd27f42ea6d09e3abf4", "filename": "src/test/ui/tuple-float-index.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Ftuple-float-index.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Ftuple-float-index.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftuple-float-index.stderr?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/tuple-float-index.stderr"}, {"sha": "d80dad8fbd4c2bb66161f9e3dcfa55a658924dd3", "filename": "src/test/ui/type-ascription-instead-of-initializer.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Ftype-ascription-instead-of-initializer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Ftype-ascription-instead-of-initializer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-ascription-instead-of-initializer.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/type-ascription-instead-of-initializer.rs"}, {"sha": "3722d2a0e3ff84f76aa898c365a7eae46b98dded", "filename": "src/test/ui/type-ascription-instead-of-initializer.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Ftype-ascription-instead-of-initializer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Ftype-ascription-instead-of-initializer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-ascription-instead-of-initializer.stderr?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/type-ascription-instead-of-initializer.stderr"}, {"sha": "01d773dd5e10392d8e1a2be52c301cfd39f2e244", "filename": "src/test/ui/type-ascription-instead-of-statement-end.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Ftype-ascription-instead-of-statement-end.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Ftype-ascription-instead-of-statement-end.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-ascription-instead-of-statement-end.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/type-ascription-instead-of-statement-end.rs"}, {"sha": "314c9060d4f7dc68a5d2469623c96a230bbbe472", "filename": "src/test/ui/type-ascription-instead-of-statement-end.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Ftype-ascription-instead-of-statement-end.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Ftype-ascription-instead-of-statement-end.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-ascription-instead-of-statement-end.stderr?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/type-ascription-instead-of-statement-end.stderr"}, {"sha": "b2c25c37e8e321aea3f4bc8a5d74fb0bb3df5a2a", "filename": "src/test/ui/type-ascription-with-fn-call.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Ftype-ascription-with-fn-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Ftype-ascription-with-fn-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-ascription-with-fn-call.rs?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/type-ascription-with-fn-call.rs"}, {"sha": "78df97139b6affceffabefafdae0e2b74d0ed90b", "filename": "src/test/ui/type-ascription-with-fn-call.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Ftype-ascription-with-fn-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/53d2ebb0adbe677a811ae130523ebceb285a8029/src%2Ftest%2Fui%2Ftype-ascription-with-fn-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-ascription-with-fn-call.stderr?ref=53d2ebb0adbe677a811ae130523ebceb285a8029", "previous_filename": "src/test/ui/suggestions/type-ascription-with-fn-call.stderr"}]}