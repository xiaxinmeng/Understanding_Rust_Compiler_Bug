{"sha": "75632c5ffe6c8d9b5bb184af1dc6538dd30dc95f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1NjMyYzVmZmU2YzhkOWI1YmIxODRhZjFkYzY1MzhkZDMwZGM5NWY=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-12-03T21:54:44Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-12-26T22:40:13Z"}, "message": "Remove some type information.", "tree": {"sha": "fd1ea9d29af4265fae3326720453da9387d36267", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd1ea9d29af4265fae3326720453da9387d36267"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75632c5ffe6c8d9b5bb184af1dc6538dd30dc95f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75632c5ffe6c8d9b5bb184af1dc6538dd30dc95f", "html_url": "https://github.com/rust-lang/rust/commit/75632c5ffe6c8d9b5bb184af1dc6538dd30dc95f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75632c5ffe6c8d9b5bb184af1dc6538dd30dc95f/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1984ec5d20b9e9506f391661a17f04ba4f8ec5af", "url": "https://api.github.com/repos/rust-lang/rust/commits/1984ec5d20b9e9506f391661a17f04ba4f8ec5af", "html_url": "https://github.com/rust-lang/rust/commit/1984ec5d20b9e9506f391661a17f04ba4f8ec5af"}], "stats": {"total": 28, "additions": 13, "deletions": 15}, "files": [{"sha": "432d550a24031da709ecfbb6d5f99d2cbd395249", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/75632c5ffe6c8d9b5bb184af1dc6538dd30dc95f/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75632c5ffe6c8d9b5bb184af1dc6538dd30dc95f/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=75632c5ffe6c8d9b5bb184af1dc6538dd30dc95f", "patch": "@@ -2041,8 +2041,8 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 },\n             )\n         });\n-        let ty = ty.map(|ty| -> &'hir hir::Ty { self.arena.alloc(ty.into_inner()) });\n-        let init = l.init.as_ref().map(|e| -> &'hir hir::Expr<'hir> { self.lower_expr(e) });\n+        let ty = ty.map(|ty| &*self.arena.alloc(ty.into_inner()));\n+        let init = l.init.as_ref().map(|e| self.lower_expr(e));\n         (\n             hir::Local {\n                 hir_id: self.lower_node_id(l.id),"}, {"sha": "8a9614c6cb2c00e9fdb254fccc4ad51389ab4471", "filename": "src/librustc/hir/lowering/expr.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/75632c5ffe6c8d9b5bb184af1dc6538dd30dc95f/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75632c5ffe6c8d9b5bb184af1dc6538dd30dc95f/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs?ref=75632c5ffe6c8d9b5bb184af1dc6538dd30dc95f", "patch": "@@ -157,21 +157,19 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 hir::ExprKind::Path(qpath)\n             }\n             ExprKind::Break(opt_label, ref opt_expr) => {\n-                let opt_expr =\n-                    opt_expr.as_ref().map(|x| -> &'hir hir::Expr<'hir> { self.lower_expr(x) });\n+                let opt_expr = opt_expr.as_ref().map(|x| self.lower_expr(x));\n                 hir::ExprKind::Break(self.lower_jump_destination(e.id, opt_label), opt_expr)\n             }\n             ExprKind::Continue(opt_label) => {\n                 hir::ExprKind::Continue(self.lower_jump_destination(e.id, opt_label))\n             }\n             ExprKind::Ret(ref e) => {\n-                let e = e.as_ref().map(|x| -> &'hir hir::Expr<'hir> { self.lower_expr(x) });\n+                let e = e.as_ref().map(|x| self.lower_expr(x));\n                 hir::ExprKind::Ret(e)\n             }\n             ExprKind::InlineAsm(ref asm) => self.lower_expr_asm(asm),\n             ExprKind::Struct(ref path, ref fields, ref maybe_expr) => {\n-                let maybe_expr =\n-                    maybe_expr.as_ref().map(|x| -> &'hir hir::Expr<'hir> { self.lower_expr(x) });\n+                let maybe_expr = maybe_expr.as_ref().map(|x| self.lower_expr(x));\n                 hir::ExprKind::Struct(\n                     self.arena.alloc(self.lower_qpath(\n                         e.id,\n@@ -431,12 +429,10 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             );\n \n             // Final expression of the block (if present) or `()` with span at the end of block\n-            let tail_expr = block.expr.take().map_or_else(\n-                || -> &'hir hir::Expr<'hir> {\n-                    this.expr_unit(this.sess.source_map().end_point(try_span))\n-                },\n-                |x: &'hir hir::Expr<'hir>| x,\n-            );\n+            let tail_expr = block\n+                .expr\n+                .take()\n+                .unwrap_or_else(|| this.expr_unit(this.sess.source_map().end_point(try_span)));\n \n             let ok_wrapped_span =\n                 this.mark_span_with_reason(DesugaringKind::TryBlock, tail_expr.span, None);"}, {"sha": "0157e89c96b04a22d747ed2a550a317160ecf9fc", "filename": "src/librustc/hir/lowering/item.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/75632c5ffe6c8d9b5bb184af1dc6538dd30dc95f/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75632c5ffe6c8d9b5bb184af1dc6538dd30dc95f/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs?ref=75632c5ffe6c8d9b5bb184af1dc6538dd30dc95f", "patch": "@@ -797,8 +797,10 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 (generics, hir::TraitItemKind::Method(sig, hir::TraitMethod::Provided(body_id)))\n             }\n             AssocItemKind::TyAlias(ref bounds, ref default) => {\n-                let ty = default.as_ref().map(|x| -> &'hir hir::Ty {\n-                    self.arena.alloc(self.lower_ty(x, ImplTraitContext::disallowed()).into_inner())\n+                let ty = default.as_ref().map(|x| {\n+                    &*self\n+                        .arena\n+                        .alloc(self.lower_ty(x, ImplTraitContext::disallowed()).into_inner())\n                 });\n                 let generics = self.lower_generics(&i.generics, ImplTraitContext::disallowed());\n                 let kind = hir::TraitItemKind::Type("}]}