{"sha": "c7ab88cc357be4a03502d5be936ce66708f1ce53", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3YWI4OGNjMzU3YmU0YTAzNTAyZDViZTkzNmNlNjY3MDhmMWNlNTM=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-06-15T12:59:51Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-06-15T12:59:51Z"}, "message": "Implement checking against assignments to immutable obj fields", "tree": {"sha": "5498f346429e5eb45f753d417f0752373b867fc0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5498f346429e5eb45f753d417f0752373b867fc0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c7ab88cc357be4a03502d5be936ce66708f1ce53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c7ab88cc357be4a03502d5be936ce66708f1ce53", "html_url": "https://github.com/rust-lang/rust/commit/c7ab88cc357be4a03502d5be936ce66708f1ce53", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c7ab88cc357be4a03502d5be936ce66708f1ce53/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b0d46efd07dd6c0aa493b966e11cdd40a04c6b30", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0d46efd07dd6c0aa493b966e11cdd40a04c6b30", "html_url": "https://github.com/rust-lang/rust/commit/b0d46efd07dd6c0aa493b966e11cdd40a04c6b30"}], "stats": {"total": 99, "additions": 61, "deletions": 38}, "files": [{"sha": "5f881fb0b184f7e2e301ee3eaddf17da7a9eedd9", "filename": "src/comp/middle/alias.rs", "status": "modified", "additions": 58, "deletions": 33, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/c7ab88cc357be4a03502d5be936ce66708f1ce53/src%2Fcomp%2Fmiddle%2Falias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7ab88cc357be4a03502d5be936ce66708f1ce53/src%2Fcomp%2Fmiddle%2Falias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Falias.rs?ref=c7ab88cc357be4a03502d5be936ce66708f1ce53", "patch": "@@ -30,35 +30,53 @@ type restrict = @rec(vec[def_num] root_vars,\n                      vec[ty::t] tys,\n                      vec[uint] depends_on,\n                      mutable valid ok);\n+type scope = vec[restrict];\n \n-type scope = rec(vec[tup(def_num, ast::mode)] args,\n-                 vec[restrict] rs);\n-fn scope(&scope sc, vec[restrict] add) -> scope {\n-    ret rec(args=sc.args, rs=sc.rs + add);\n+tag local_info {\n+    arg(ast::mode);\n+    objfield(ast::mutability);\n }\n \n type ctx = rec(@ty::ctxt tcx,\n-               resolve::def_map dm);\n+               resolve::def_map dm,\n+               std::map::hashmap[def_num,local_info] local_map);\n \n fn check_crate(@ty::ctxt tcx, resolve::def_map dm, &@ast::crate crate) {\n-    auto cx = @rec(tcx = tcx, dm = dm);\n-    auto v = @rec(visit_fn = visit_fn,\n+    auto cx = @rec(tcx = tcx,\n+                   dm = dm,\n+                   // Stores information about object fields and function\n+                   // arguments that's otherwise not easily available.\n+                   local_map = util::common::new_int_hash());\n+    auto v = @rec(visit_fn = bind visit_fn(cx, _, _, _, _, _, _, _, _),\n+                  visit_item = bind visit_item(cx, _, _, _),\n                   visit_expr = bind visit_expr(cx, _, _, _)\n                   with *visit::default_visitor[scope]());\n-    visit::visit_crate(*crate, rec(args=[], rs=[]), visit::vtor(v));\n+    visit::visit_crate(*crate, [], visit::vtor(v));\n }\n \n-fn visit_fn(&ast::_fn f, &vec[ast::ty_param] tp, &span sp, &ident name,\n-            &ast::def_id d_id, &ast::ann a, &scope sc, &vt[scope] v) {\n+fn visit_fn(@ctx cx, &ast::_fn f, &vec[ast::ty_param] tp, &span sp,\n+            &ident name, &ast::def_id d_id, &ast::ann a, &scope sc,\n+            &vt[scope] v) {\n     visit::visit_fn_decl(f.decl, sc, v);\n-    auto args = [];\n-    for (ast::arg arg in f.decl.inputs) {\n-        vec::push(args, tup(arg.id._1, arg.mode));\n+    for (ast::arg arg_ in f.decl.inputs) {\n+        cx.local_map.insert(arg_.id._1, arg(arg_.mode));\n     }\n-    vt(v).visit_block(f.body, rec(args=args, rs=[]), v);\n+    vt(v).visit_block(f.body, [], v);\n }\n \n-fn visit_expr(&@ctx cx, &@ast::expr ex, &scope sc, &vt[scope] v) {\n+fn visit_item(@ctx cx, &@ast::item i, &scope sc, &vt[scope] v) {\n+    alt (i.node) {\n+        case (ast::item_obj(_, ?o, _, _, _)) {\n+            for (ast::obj_field f in o.fields) {\n+                cx.local_map.insert(f.id._1, objfield(f.mut));\n+            }\n+        }\n+        case (_) {}\n+    }\n+    visit::visit_item(i, sc, v);\n+}\n+\n+fn visit_expr(@ctx cx, &@ast::expr ex, &scope sc, &vt[scope] v) {\n     auto handled = false;\n     alt (ex.node) {\n         case (ast::expr_call(?f, ?args, _)) {\n@@ -193,7 +211,7 @@ fn check_call(&ctx cx, &@ast::expr f, &vec[@ast::expr] args, &scope sc)\n     // Ensure we're not passing a root by mutable alias.\n     for (tup(uint, def_num) root in mut_roots) {\n         auto mut_alias_to_root = vec::count(root._1, roots) > 1u;\n-        for (restrict r in sc.rs) {\n+        for (restrict r in sc) {\n             if (vec::member(root._1, r.root_vars)) {\n                 mut_alias_to_root = true;\n             }\n@@ -225,12 +243,12 @@ fn check_alt(&ctx cx, &@ast::expr input, &vec[ast::arm] arms,\n         auto dnums = arm_defnums(a);\n         auto new_sc = sc;\n         if (vec::len(dnums) > 0u) {\n-            new_sc = scope(sc, [@rec(root_vars=roots,\n-                                     block_defnum=dnums.(0),\n-                                     bindings=dnums,\n-                                     tys=forbidden_tp,\n-                                     depends_on=deps(sc, roots),\n-                                     mutable ok=valid)]);\n+            new_sc = sc + [@rec(root_vars=roots,\n+                                block_defnum=dnums.(0),\n+                                bindings=dnums,\n+                                tys=forbidden_tp,\n+                                depends_on=deps(sc, roots),\n+                                mutable ok=valid)];\n         }\n         visit::visit_arm(a, new_sc, v);\n     }\n@@ -269,7 +287,7 @@ fn check_for_each(&ctx cx, &@ast::local local, &@ast::expr call,\n                                tys=data.unsafe_ts,\n                                depends_on=deps(sc, data.root_vars),\n                                mutable ok=valid);\n-            visit::visit_block(block, scope(sc, [new_sc]), v);\n+            visit::visit_block(block, sc + [new_sc], v);\n         }\n     }\n }\n@@ -303,7 +321,7 @@ fn check_for(&ctx cx, &@ast::local local, &@ast::expr seq,\n                        tys=unsafe,\n                        depends_on=deps(sc, root_def),\n                        mutable ok=valid);\n-    visit::visit_block(block, scope(sc, [new_sc]), v);\n+    visit::visit_block(block, sc + [new_sc], v);\n }\n \n fn check_var(&ctx cx, &@ast::expr ex, &ast::path p, ast::ann ann, bool assign,\n@@ -312,7 +330,7 @@ fn check_var(&ctx cx, &@ast::expr ex, &ast::path p, ast::ann ann, bool assign,\n     if (!def_is_local(def)) { ret; }\n     auto my_defnum = ast::def_id_of_def(def)._1;\n     auto var_t = ty::expr_ty(*cx.tcx, ex);\n-    for (restrict r in sc.rs) {\n+    for (restrict r in sc) {\n         // excludes variables introduced since the alias was made\n         if (my_defnum < r.block_defnum) {\n             for (ty::t t in r.tys) {\n@@ -334,13 +352,16 @@ fn check_assign(&@ctx cx, &@ast::expr dest, &@ast::expr src,\n     alt (dest.node) {\n         case (ast::expr_path(?p, ?ann)) {\n             auto dnum = ast::def_id_of_def(cx.dm.get(ann.id))._1;\n-            if (is_immutable_alias(sc, dnum)) {\n+            if (is_immutable_alias(cx, sc, dnum)) {\n                 cx.tcx.sess.span_err\n                     (dest.span, \"assigning to immutable alias\");\n+            } else if (is_immutable_objfield(cx, dnum)) {\n+                cx.tcx.sess.span_err\n+                    (dest.span, \"assigning to immutable obj field\");\n             }\n \n             auto var_t = ty::expr_ty(*cx.tcx, dest);\n-            for (restrict r in sc.rs) {\n+            for (restrict r in sc) {\n                 if (vec::member(dnum, r.root_vars)) {\n                     r.ok = overwritten(dest.span, p);\n                 }\n@@ -365,21 +386,25 @@ fn check_assign(&@ctx cx, &@ast::expr dest, &@ast::expr src,\n     }\n }\n \n-fn is_immutable_alias(&scope sc, def_num dnum) -> bool {\n-    for (tup(def_num, ast::mode) arg in sc.args) {\n-        if (arg._0 == dnum && arg._1 == ast::alias(false)) { ret true; }\n+fn is_immutable_alias(&@ctx cx, &scope sc, def_num dnum) -> bool {\n+    alt (cx.local_map.find(dnum)) {\n+        case (some(arg(ast::alias(false)))) { ret true; }\n+        case (_) {}\n     }\n-    for (restrict r in sc.rs) {\n+    for (restrict r in sc) {\n         if (vec::member(dnum, r.bindings)) { ret true; }\n     }\n     ret false;\n }\n+fn is_immutable_objfield(&@ctx cx, def_num dnum) -> bool {\n+    ret cx.local_map.find(dnum) == some(objfield(ast::imm));\n+}\n \n fn test_scope(&ctx cx, &scope sc, &restrict r, &ast::path p) {\n     auto prob = r.ok;\n     for (uint dep in r.depends_on) {\n         if (prob != valid) { break; }\n-        prob = sc.rs.(dep).ok;\n+        prob = sc.(dep).ok;\n     }\n     if (prob != valid) {\n         auto msg = alt (prob) {\n@@ -399,7 +424,7 @@ fn test_scope(&ctx cx, &scope sc, &restrict r, &ast::path p) {\n fn deps(&scope sc, vec[def_num] roots) -> vec[uint] {\n     auto i = 0u;\n     auto result = [];\n-    for (restrict r in sc.rs) {\n+    for (restrict r in sc) {\n         for (def_num dn in roots) {\n             if (vec::member(dn, r.bindings)) {\n                 vec::push(result, i);"}, {"sha": "ef6b5c87a45c73da3a31ffb60c01d110c979ab5e", "filename": "src/comp/middle/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7ab88cc357be4a03502d5be936ce66708f1ce53/src%2Fcomp%2Fmiddle%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7ab88cc357be4a03502d5be936ce66708f1ce53/src%2Fcomp%2Fmiddle%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fvisit.rs?ref=c7ab88cc357be4a03502d5be936ce66708f1ce53", "patch": "@@ -24,7 +24,7 @@ type visitor[E] =\n          fn(&@view_item v, &E e, &vt[E] v)     visit_view_item,\n          fn(&@native_item i, &E e, &vt[E] v)   visit_native_item,\n          fn(&@item i, &E e, &vt[E] v)          visit_item,\n-         fn(&@local l, &E e, &vt[E] v)        visit_local,\n+         fn(&@local l, &E e, &vt[E] v)         visit_local,\n          fn(&block b, &E e, &vt[E] v)          visit_block,\n          fn(&@stmt s, &E e, &vt[E] v)          visit_stmt,\n          fn(&arm a, &E e, &vt[E] v)            visit_arm,"}, {"sha": "0fa7443434a4c77f48dbfa17fa90c286f8e988ad", "filename": "src/test/compile-fail/writing-to-immutable-obj.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7ab88cc357be4a03502d5be936ce66708f1ce53/src%2Ftest%2Fcompile-fail%2Fwriting-to-immutable-obj.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7ab88cc357be4a03502d5be936ce66708f1ce53/src%2Ftest%2Fcompile-fail%2Fwriting-to-immutable-obj.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwriting-to-immutable-obj.rs?ref=c7ab88cc357be4a03502d5be936ce66708f1ce53", "patch": "@@ -1,7 +1,5 @@\n // xfail-stage0\n-// xfail-stage1\n-// xfail-stage2\n-// error-pattern: writing to immutable type\n+// error-pattern:assigning to immutable obj field\n obj objy(int x) {\n     fn foo() -> () {\n         x = 5;"}, {"sha": "748e81f5a98d0b2f33631c460965a6d677dd8e82", "filename": "src/test/run-pass/vec-append.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7ab88cc357be4a03502d5be936ce66708f1ce53/src%2Ftest%2Frun-pass%2Fvec-append.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7ab88cc357be4a03502d5be936ce66708f1ce53/src%2Ftest%2Frun-pass%2Fvec-append.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-append.rs?ref=c7ab88cc357be4a03502d5be936ce66708f1ce53", "patch": "@@ -30,7 +30,7 @@ fn slow_growth() {\n \n fn slow_growth2_helper(str s) {   // ref up: s\n \n-  obj acc(vec[str] v) {\n+  obj acc(mutable vec[str] v) {\n     fn add(&str s) { v += [s]; }\n   }\n "}]}