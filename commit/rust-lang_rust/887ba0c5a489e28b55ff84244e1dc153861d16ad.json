{"sha": "887ba0c5a489e28b55ff84244e1dc153861d16ad", "node_id": "C_kwDOAAsO6NoAKDg4N2JhMGM1YTQ4OWUyOGI1NWZmODQyNDRlMWRjMTUzODYxZDE2YWQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-05T16:27:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-05T16:27:03Z"}, "message": "Auto merge of #9586 - Alexendoo:format-args-commas, r=Manishearth\n\nFormatArgsExpn: Find comma spans and ignore weird proc macro spans\n\nFixes the following cases:\n\nA missing `, 1` from the `expect_fun_call` suggestion:\n\n```rust\nSome(()).expect(&format!(\"{x} {}\", 1));\n```\n```\nwarning: use of `expect` followed by a function call\n --> t.rs:7:14\n  |\n7 |     Some(()).expect(&format!(\"{x} {}\", 1));\n  |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| panic!(\"{x} {}\"))`\n```\n\nThe suggestion removing from the comma in the comment rather than the one after the format string:\n\n```rust\nprintln!(\n    \"{}\",\n    // a comment, with a comma in it\n    x\n);\n```\n```\nwarning: variables can be used directly in the `format!` string\n  --> t.rs:9:5\n   |\n9  | /     println!(\n10 | |         \"{}\",\n11 | |         // a comment, with a comma in it\n12 | |         x\n13 | |     );\n   | |_____^\n   |\nhelp: change this to\n   |\n10 ~         \"{x}\",\n11 ~         // a comment\n   |\n```\n\nIt also no longer accepts expansions where a format string or argument has a \"weird\" proc macro span, that is one where the literal/expression it outputs has the span of one of its inputs. Kind of like a `format_args` specific `clippy_utils::is_from_proc_macro`, e.g. `format!(indoc! {\" ... \"})`\n\nchangelog: [`expect_fun_call`]: Fix suggestion for `format!` using captured variables\nchangelog: [`print_literal`], [`write_literal`], [`uninlined_format_args`]: Fix suggestion when following a comment including a comma", "tree": {"sha": "9b4fbb601b69236f75fc4c9227a80e5e8452c9ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b4fbb601b69236f75fc4c9227a80e5e8452c9ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/887ba0c5a489e28b55ff84244e1dc153861d16ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/887ba0c5a489e28b55ff84244e1dc153861d16ad", "html_url": "https://github.com/rust-lang/rust/commit/887ba0c5a489e28b55ff84244e1dc153861d16ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/887ba0c5a489e28b55ff84244e1dc153861d16ad/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e687bedac68aaacac7948a26ed13bea5b7f43427", "url": "https://api.github.com/repos/rust-lang/rust/commits/e687bedac68aaacac7948a26ed13bea5b7f43427", "html_url": "https://github.com/rust-lang/rust/commit/e687bedac68aaacac7948a26ed13bea5b7f43427"}, {"sha": "9226066bcb40745dbb91965c3d5d9210294b1c88", "url": "https://api.github.com/repos/rust-lang/rust/commits/9226066bcb40745dbb91965c3d5d9210294b1c88", "html_url": "https://github.com/rust-lang/rust/commit/9226066bcb40745dbb91965c3d5d9210294b1c88"}], "stats": {"total": 372, "additions": 262, "deletions": 110}, "files": [{"sha": "88502b726180136c310622fe835447c074992f7e", "filename": "clippy_lints/src/format_args.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/887ba0c5a489e28b55ff84244e1dc153861d16ad/clippy_lints%2Fsrc%2Fformat_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/887ba0c5a489e28b55ff84244e1dc153861d16ad/clippy_lints%2Fsrc%2Fformat_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformat_args.rs?ref=887ba0c5a489e28b55ff84244e1dc153861d16ad", "patch": "@@ -1,13 +1,13 @@\n use clippy_utils::diagnostics::{span_lint_and_sugg, span_lint_and_then};\n use clippy_utils::macros::FormatParamKind::{Implicit, Named, Numbered, Starred};\n use clippy_utils::macros::{is_format_macro, FormatArgsExpn, FormatParam, FormatParamUsage};\n-use clippy_utils::source::{expand_past_previous_comma, snippet_opt};\n+use clippy_utils::source::snippet_opt;\n use clippy_utils::ty::implements_trait;\n use clippy_utils::{is_diag_trait_item, meets_msrv, msrvs};\n use if_chain::if_chain;\n use itertools::Itertools;\n use rustc_errors::Applicability;\n-use rustc_hir::{Expr, ExprKind, HirId, Path, QPath};\n+use rustc_hir::{Expr, ExprKind, HirId, QPath};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::adjustment::{Adjust, Adjustment};\n use rustc_middle::ty::Ty;\n@@ -169,7 +169,7 @@ fn check_uninlined_args(cx: &LateContext<'_>, args: &FormatArgsExpn<'_>, call_si\n     // we cannot remove any other arguments in the format string,\n     // because the index numbers might be wrong after inlining.\n     // Example of an un-inlinable format:  print!(\"{}{1}\", foo, 2)\n-    if !args.params().all(|p| check_one_arg(cx, &p, &mut fixes)) || fixes.is_empty() {\n+    if !args.params().all(|p| check_one_arg(args, &p, &mut fixes)) || fixes.is_empty() {\n         return;\n     }\n \n@@ -196,19 +196,18 @@ fn check_uninlined_args(cx: &LateContext<'_>, args: &FormatArgsExpn<'_>, call_si\n     );\n }\n \n-fn check_one_arg(cx: &LateContext<'_>, param: &FormatParam<'_>, fixes: &mut Vec<(Span, String)>) -> bool {\n+fn check_one_arg(args: &FormatArgsExpn<'_>, param: &FormatParam<'_>, fixes: &mut Vec<(Span, String)>) -> bool {\n     if matches!(param.kind, Implicit | Starred | Named(_) | Numbered)\n         && let ExprKind::Path(QPath::Resolved(None, path)) = param.value.kind\n-        && let Path { span, segments, .. } = path\n-        && let [segment] = segments\n+        && let [segment] = path.segments\n+        && let Some(arg_span) = args.value_with_prev_comma_span(param.value.hir_id)\n     {\n         let replacement = match param.usage {\n             FormatParamUsage::Argument => segment.ident.name.to_string(),\n             FormatParamUsage::Width => format!(\"{}$\", segment.ident.name),\n             FormatParamUsage::Precision => format!(\".{}$\", segment.ident.name),\n         };\n         fixes.push((param.span, replacement));\n-        let arg_span = expand_past_previous_comma(cx, *span);\n         fixes.push((arg_span, String::new()));\n         true  // successful inlining, continue checking\n     } else {"}, {"sha": "36574198f9174a314dcc95ddf3356f1ba2aea54e", "filename": "clippy_lints/src/write.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/887ba0c5a489e28b55ff84244e1dc153861d16ad/clippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/887ba0c5a489e28b55ff84244e1dc153861d16ad/clippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwrite.rs?ref=887ba0c5a489e28b55ff84244e1dc153861d16ad", "patch": "@@ -475,11 +475,11 @@ fn check_literal(cx: &LateContext<'_>, format_args: &FormatArgsExpn<'_>, name: &\n                 value.span,\n                 \"literal with an empty format string\",\n                 |diag| {\n-                    if let Some(replacement) = replacement {\n+                    if let Some(replacement) = replacement\n                         // `format!(\"{}\", \"a\")`, `format!(\"{named}\", named = \"b\")\n                         //              ~~~~~                      ~~~~~~~~~~~~~\n-                        let value_span = expand_past_previous_comma(cx, value.span);\n-\n+                        && let Some(value_span) = format_args.value_with_prev_comma_span(value.hir_id)\n+                    {\n                         let replacement = replacement.replace('{', \"{{\").replace('}', \"}}\");\n                         diag.multipart_suggestion(\n                             \"try this\","}, {"sha": "dd0ce1da65759396a431f269f6da3e1536cd39a5", "filename": "clippy_utils/src/macros.rs", "status": "modified", "additions": 104, "deletions": 5, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/887ba0c5a489e28b55ff84244e1dc153861d16ad/clippy_utils%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/887ba0c5a489e28b55ff84244e1dc153861d16ad/clippy_utils%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fmacros.rs?ref=887ba0c5a489e28b55ff84244e1dc153861d16ad", "patch": "@@ -16,6 +16,7 @@ use rustc_parse_format::{self as rpf, Alignment};\n use rustc_span::def_id::DefId;\n use rustc_span::hygiene::{self, MacroKind, SyntaxContext};\n use rustc_span::{sym, BytePos, ExpnData, ExpnId, ExpnKind, Pos, Span, SpanData, Symbol};\n+use std::iter::{once, zip};\n use std::ops::ControlFlow;\n \n const FORMAT_MACRO_DIAG_ITEMS: &[Symbol] = &[\n@@ -412,7 +413,8 @@ impl FormatString {\n }\n \n struct FormatArgsValues<'tcx> {\n-    /// See `FormatArgsExpn::value_args`\n+    /// Values passed after the format string and implicit captures. `[1, z + 2, x]` for\n+    /// `format!(\"{x} {} {y}\", 1, z + 2)`.\n     value_args: Vec<&'tcx Expr<'tcx>>,\n     /// Maps an `rt::v1::Argument::position` or an `rt::v1::Count::Param` to its index in\n     /// `value_args`\n@@ -765,12 +767,82 @@ pub struct FormatArgsExpn<'tcx> {\n     /// Has an added newline due to `println!()`/`writeln!()`/etc. The last format string part will\n     /// include this added newline.\n     pub newline: bool,\n-    /// Values passed after the format string and implicit captures. `[1, z + 2, x]` for\n+    /// Spans of the commas between the format string and explicit values, excluding any trailing\n+    /// comma\n+    ///\n+    /// ```ignore\n+    /// format!(\"..\", 1, 2, 3,)\n+    /// //          ^  ^  ^\n+    /// ```\n+    comma_spans: Vec<Span>,\n+    /// Explicit values passed after the format string, ignoring implicit captures. `[1, z + 2]` for\n     /// `format!(\"{x} {} {y}\", 1, z + 2)`.\n-    value_args: Vec<&'tcx Expr<'tcx>>,\n+    explicit_values: Vec<&'tcx Expr<'tcx>>,\n }\n \n impl<'tcx> FormatArgsExpn<'tcx> {\n+    /// Gets the spans of the commas inbetween the format string and explicit args, not including\n+    /// any trailing comma\n+    ///\n+    /// ```ignore\n+    /// format!(\"{} {}\", a, b)\n+    /// //             ^  ^\n+    /// ```\n+    ///\n+    /// Ensures that the format string and values aren't coming from a proc macro that sets the\n+    /// output span to that of its input\n+    fn comma_spans(cx: &LateContext<'_>, explicit_values: &[&Expr<'_>], fmt_span: Span) -> Option<Vec<Span>> {\n+        // `format!(\"{} {} {c}\", \"one\", \"two\", c = \"three\")`\n+        //                       ^^^^^  ^^^^^      ^^^^^^^\n+        let value_spans = explicit_values\n+            .iter()\n+            .map(|val| hygiene::walk_chain(val.span, fmt_span.ctxt()));\n+\n+        // `format!(\"{} {} {c}\", \"one\", \"two\", c = \"three\")`\n+        //                     ^^     ^^     ^^^^^^\n+        let between_spans = once(fmt_span)\n+            .chain(value_spans)\n+            .tuple_windows()\n+            .map(|(start, end)| start.between(end));\n+\n+        let mut comma_spans = Vec::new();\n+        for between_span in between_spans {\n+            let mut offset = 0;\n+            let mut seen_comma = false;\n+\n+            for token in tokenize(&snippet_opt(cx, between_span)?) {\n+                match token.kind {\n+                    TokenKind::LineComment { .. } | TokenKind::BlockComment { .. } | TokenKind::Whitespace => {},\n+                    TokenKind::Comma if !seen_comma => {\n+                        seen_comma = true;\n+\n+                        let base = between_span.data();\n+                        comma_spans.push(Span::new(\n+                            base.lo + BytePos(offset),\n+                            base.lo + BytePos(offset + 1),\n+                            base.ctxt,\n+                            base.parent,\n+                        ));\n+                    },\n+                    // named arguments, `start_val, name = end_val`\n+                    //                            ^^^^^^^^^ between_span\n+                    TokenKind::Ident | TokenKind::Eq if seen_comma => {},\n+                    // An unexpected token usually indicates the format string or a value came from a proc macro output\n+                    // that sets the span of its output to an input, e.g. `println!(some_proc_macro!(\"input\"), ..)` that\n+                    // emits a string literal with the span set to that of `\"input\"`\n+                    _ => return None,\n+                }\n+                offset += token.len;\n+            }\n+\n+            if !seen_comma {\n+                return None;\n+            }\n+        }\n+\n+        Some(comma_spans)\n+    }\n+\n     pub fn parse(cx: &LateContext<'_>, expr: &'tcx Expr<'tcx>) -> Option<Self> {\n         let macro_name = macro_backtrace(expr.span)\n             .map(|macro_call| cx.tcx.item_name(macro_call.def_id))\n@@ -845,11 +917,22 @@ impl<'tcx> FormatArgsExpn<'tcx> {\n                 })\n                 .collect::<Option<Vec<_>>>()?;\n \n+            let mut explicit_values = values.value_args;\n+            // remove values generated for implicitly captured vars\n+            let len = explicit_values\n+                .iter()\n+                .take_while(|val| !format_string.span.contains(val.span))\n+                .count();\n+            explicit_values.truncate(len);\n+\n+            let comma_spans = Self::comma_spans(cx, &explicit_values, format_string.span)?;\n+\n             Some(Self {\n                 format_string,\n                 args,\n-                value_args: values.value_args,\n                 newline,\n+                comma_spans,\n+                explicit_values,\n             })\n         } else {\n             None\n@@ -875,7 +958,7 @@ impl<'tcx> FormatArgsExpn<'tcx> {\n \n     /// Source callsite span of all inputs\n     pub fn inputs_span(&self) -> Span {\n-        match *self.value_args {\n+        match *self.explicit_values {\n             [] => self.format_string.span,\n             [.., last] => self\n                 .format_string\n@@ -884,6 +967,22 @@ impl<'tcx> FormatArgsExpn<'tcx> {\n         }\n     }\n \n+    /// Get the span of a value expanded to the previous comma, e.g. for the value `10`\n+    ///\n+    /// ```ignore\n+    /// format(\"{}.{}\", 10, 11)\n+    /// //            ^^^^\n+    /// ```\n+    pub fn value_with_prev_comma_span(&self, value_id: HirId) -> Option<Span> {\n+        for (comma_span, value) in zip(&self.comma_spans, &self.explicit_values) {\n+            if value.hir_id == value_id {\n+                return Some(comma_span.to(hygiene::walk_chain(value.span, comma_span.ctxt())));\n+            }\n+        }\n+\n+        None\n+    }\n+\n     /// Iterator of all format params, both values and those referenced by `width`/`precision`s.\n     pub fn params(&'tcx self) -> impl Iterator<Item = FormatParam<'tcx>> {\n         self.args"}, {"sha": "15172ae345c2e130161a811e1aca932376f6f899", "filename": "tests/ui/expect_fun_call.fixed", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/887ba0c5a489e28b55ff84244e1dc153861d16ad/tests%2Fui%2Fexpect_fun_call.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/887ba0c5a489e28b55ff84244e1dc153861d16ad/tests%2Fui%2Fexpect_fun_call.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexpect_fun_call.fixed?ref=887ba0c5a489e28b55ff84244e1dc153861d16ad", "patch": "@@ -100,4 +100,10 @@ fn main() {\n         let opt_ref = &opt;\n         opt_ref.unwrap_or_else(|| panic!(\"{:?}\", opt_ref));\n     }\n+\n+    let format_capture: Option<i32> = None;\n+    format_capture.unwrap_or_else(|| panic!(\"{error_code}\"));\n+\n+    let format_capture_and_value: Option<i32> = None;\n+    format_capture_and_value.unwrap_or_else(|| panic!(\"{error_code}, {}\", 1));\n }"}, {"sha": "0f448d004174f6ce4182f4df877468e4911069ab", "filename": "tests/ui/expect_fun_call.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/887ba0c5a489e28b55ff84244e1dc153861d16ad/tests%2Fui%2Fexpect_fun_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/887ba0c5a489e28b55ff84244e1dc153861d16ad/tests%2Fui%2Fexpect_fun_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexpect_fun_call.rs?ref=887ba0c5a489e28b55ff84244e1dc153861d16ad", "patch": "@@ -100,4 +100,10 @@ fn main() {\n         let opt_ref = &opt;\n         opt_ref.expect(&format!(\"{:?}\", opt_ref));\n     }\n+\n+    let format_capture: Option<i32> = None;\n+    format_capture.expect(&format!(\"{error_code}\"));\n+\n+    let format_capture_and_value: Option<i32> = None;\n+    format_capture_and_value.expect(&format!(\"{error_code}, {}\", 1));\n }"}, {"sha": "cb55e32aee02ef2c68de16c66e10c59aa4f12ef2", "filename": "tests/ui/expect_fun_call.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/887ba0c5a489e28b55ff84244e1dc153861d16ad/tests%2Fui%2Fexpect_fun_call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/887ba0c5a489e28b55ff84244e1dc153861d16ad/tests%2Fui%2Fexpect_fun_call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexpect_fun_call.stderr?ref=887ba0c5a489e28b55ff84244e1dc153861d16ad", "patch": "@@ -78,5 +78,17 @@ error: use of `expect` followed by a function call\n LL |         opt_ref.expect(&format!(\"{:?}\", opt_ref));\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| panic!(\"{:?}\", opt_ref))`\n \n-error: aborting due to 13 previous errors\n+error: use of `expect` followed by a function call\n+  --> $DIR/expect_fun_call.rs:105:20\n+   |\n+LL |     format_capture.expect(&format!(\"{error_code}\"));\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| panic!(\"{error_code}\"))`\n+\n+error: use of `expect` followed by a function call\n+  --> $DIR/expect_fun_call.rs:108:30\n+   |\n+LL |     format_capture_and_value.expect(&format!(\"{error_code}, {}\", 1));\n+   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| panic!(\"{error_code}, {}\", 1))`\n+\n+error: aborting due to 15 previous errors\n "}, {"sha": "dcf10ed60a259b4b2028bb428ee5e4535e7c7fcf", "filename": "tests/ui/uninlined_format_args.fixed", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/887ba0c5a489e28b55ff84244e1dc153861d16ad/tests%2Fui%2Funinlined_format_args.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/887ba0c5a489e28b55ff84244e1dc153861d16ad/tests%2Fui%2Funinlined_format_args.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funinlined_format_args.fixed?ref=887ba0c5a489e28b55ff84244e1dc153861d16ad", "patch": "@@ -1,21 +1,19 @@\n+// aux-build:proc_macro_with_span.rs\n // run-rustfix\n #![feature(custom_inner_attributes)]\n #![warn(clippy::uninlined_format_args)]\n #![allow(named_arguments_used_positionally, unused_imports, unused_macros, unused_variables)]\n #![allow(clippy::eq_op, clippy::format_in_format_args, clippy::print_literal)]\n \n+extern crate proc_macro_with_span;\n+use proc_macro_with_span::with_span;\n+\n macro_rules! no_param_str {\n     () => {\n         \"{}\"\n     };\n }\n \n-macro_rules! pass_through {\n-    ($expr:expr) => {\n-        $expr\n-    };\n-}\n-\n macro_rules! my_println {\n    ($($args:tt),*) => {{\n         println!($($args),*)\n@@ -140,11 +138,13 @@ fn tester(fn_arg: i32) {\n     );\n     println!(no_param_str!(), local_i32);\n \n-    // FIXME: bugs!\n-    // println!(pass_through!(\"foo={local_i32}\"), local_i32 = local_i32);\n-    // println!(pass_through!(\"foo={}\"), local_i32);\n-    // println!(indoc!(\"foo={}\"), local_i32);\n-    // printdoc!(\"foo={}\", local_i32);\n+    println!(\n+        \"{val}\",\n+    );\n+    println!(\"{val}\");\n+\n+    println!(with_span!(\"{0} {1}\" \"{1} {0}\"), local_i32, local_f64);\n+    println!(\"{}\", with_span!(span val));\n }\n \n fn main() {"}, {"sha": "924191f4324cfc7ef7aaf405ab84885aab98ff1e", "filename": "tests/ui/uninlined_format_args.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/887ba0c5a489e28b55ff84244e1dc153861d16ad/tests%2Fui%2Funinlined_format_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/887ba0c5a489e28b55ff84244e1dc153861d16ad/tests%2Fui%2Funinlined_format_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funinlined_format_args.rs?ref=887ba0c5a489e28b55ff84244e1dc153861d16ad", "patch": "@@ -1,21 +1,19 @@\n+// aux-build:proc_macro_with_span.rs\n // run-rustfix\n #![feature(custom_inner_attributes)]\n #![warn(clippy::uninlined_format_args)]\n #![allow(named_arguments_used_positionally, unused_imports, unused_macros, unused_variables)]\n #![allow(clippy::eq_op, clippy::format_in_format_args, clippy::print_literal)]\n \n+extern crate proc_macro_with_span;\n+use proc_macro_with_span::with_span;\n+\n macro_rules! no_param_str {\n     () => {\n         \"{}\"\n     };\n }\n \n-macro_rules! pass_through {\n-    ($expr:expr) => {\n-        $expr\n-    };\n-}\n-\n macro_rules! my_println {\n    ($($args:tt),*) => {{\n         println!($($args),*)\n@@ -143,11 +141,15 @@ fn tester(fn_arg: i32) {\n     );\n     println!(no_param_str!(), local_i32);\n \n-    // FIXME: bugs!\n-    // println!(pass_through!(\"foo={local_i32}\"), local_i32 = local_i32);\n-    // println!(pass_through!(\"foo={}\"), local_i32);\n-    // println!(indoc!(\"foo={}\"), local_i32);\n-    // printdoc!(\"foo={}\", local_i32);\n+    println!(\n+        \"{}\",\n+        // comment with a comma , in it\n+        val,\n+    );\n+    println!(\"{}\", /* comment with a comma , in it */ val);\n+\n+    println!(with_span!(\"{0} {1}\" \"{1} {0}\"), local_i32, local_f64);\n+    println!(\"{}\", with_span!(span val));\n }\n \n fn main() {"}, {"sha": "1b4dada28daca9dda753f9e12cca862ab8bda56a", "filename": "tests/ui/uninlined_format_args.stderr", "status": "modified", "additions": 100, "deletions": 72, "changes": 172, "blob_url": "https://github.com/rust-lang/rust/blob/887ba0c5a489e28b55ff84244e1dc153861d16ad/tests%2Fui%2Funinlined_format_args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/887ba0c5a489e28b55ff84244e1dc153861d16ad/tests%2Fui%2Funinlined_format_args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funinlined_format_args.stderr?ref=887ba0c5a489e28b55ff84244e1dc153861d16ad", "patch": "@@ -1,5 +1,5 @@\n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:43:5\n+  --> $DIR/uninlined_format_args.rs:41:5\n    |\n LL |     println!(\"val='{}'\", local_i32);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -12,7 +12,7 @@ LL +     println!(\"val='{local_i32}'\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:44:5\n+  --> $DIR/uninlined_format_args.rs:42:5\n    |\n LL |     println!(\"val='{   }'\", local_i32); // 3 spaces\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -24,7 +24,7 @@ LL +     println!(\"val='{local_i32}'\"); // 3 spaces\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:45:5\n+  --> $DIR/uninlined_format_args.rs:43:5\n    |\n LL |     println!(\"val='{    }'\", local_i32); // tab\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -36,7 +36,7 @@ LL +     println!(\"val='{local_i32}'\"); // tab\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:46:5\n+  --> $DIR/uninlined_format_args.rs:44:5\n    |\n LL |     println!(\"val='{     }'\", local_i32); // space+tab\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -48,7 +48,7 @@ LL +     println!(\"val='{local_i32}'\"); // space+tab\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:47:5\n+  --> $DIR/uninlined_format_args.rs:45:5\n    |\n LL |     println!(\"val='{     }'\", local_i32); // tab+space\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -60,7 +60,7 @@ LL +     println!(\"val='{local_i32}'\"); // tab+space\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:48:5\n+  --> $DIR/uninlined_format_args.rs:46:5\n    |\n LL | /     println!(\n LL | |         \"val='{\n@@ -76,7 +76,7 @@ LL +         \"val='{local_i32}'\"\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:53:5\n+  --> $DIR/uninlined_format_args.rs:51:5\n    |\n LL |     println!(\"{}\", local_i32);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -88,7 +88,7 @@ LL +     println!(\"{local_i32}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:54:5\n+  --> $DIR/uninlined_format_args.rs:52:5\n    |\n LL |     println!(\"{}\", fn_arg);\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n@@ -100,7 +100,7 @@ LL +     println!(\"{fn_arg}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:55:5\n+  --> $DIR/uninlined_format_args.rs:53:5\n    |\n LL |     println!(\"{:?}\", local_i32);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -112,7 +112,7 @@ LL +     println!(\"{local_i32:?}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:56:5\n+  --> $DIR/uninlined_format_args.rs:54:5\n    |\n LL |     println!(\"{:#?}\", local_i32);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -124,7 +124,7 @@ LL +     println!(\"{local_i32:#?}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:57:5\n+  --> $DIR/uninlined_format_args.rs:55:5\n    |\n LL |     println!(\"{:4}\", local_i32);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -136,7 +136,7 @@ LL +     println!(\"{local_i32:4}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:58:5\n+  --> $DIR/uninlined_format_args.rs:56:5\n    |\n LL |     println!(\"{:04}\", local_i32);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -148,7 +148,7 @@ LL +     println!(\"{local_i32:04}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:59:5\n+  --> $DIR/uninlined_format_args.rs:57:5\n    |\n LL |     println!(\"{:<3}\", local_i32);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -160,7 +160,7 @@ LL +     println!(\"{local_i32:<3}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:60:5\n+  --> $DIR/uninlined_format_args.rs:58:5\n    |\n LL |     println!(\"{:#010x}\", local_i32);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -172,7 +172,7 @@ LL +     println!(\"{local_i32:#010x}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:61:5\n+  --> $DIR/uninlined_format_args.rs:59:5\n    |\n LL |     println!(\"{:.1}\", local_f64);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -184,7 +184,7 @@ LL +     println!(\"{local_f64:.1}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:62:5\n+  --> $DIR/uninlined_format_args.rs:60:5\n    |\n LL |     println!(\"Hello {} is {:.*}\", \"x\", local_i32, local_f64);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -196,7 +196,7 @@ LL +     println!(\"Hello {} is {local_f64:.local_i32$}\", \"x\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:63:5\n+  --> $DIR/uninlined_format_args.rs:61:5\n    |\n LL |     println!(\"Hello {} is {:.*}\", local_i32, 5, local_f64);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -208,7 +208,7 @@ LL +     println!(\"Hello {local_i32} is {local_f64:.*}\", 5);\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:64:5\n+  --> $DIR/uninlined_format_args.rs:62:5\n    |\n LL |     println!(\"Hello {} is {2:.*}\", local_i32, 5, local_f64);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -220,7 +220,7 @@ LL +     println!(\"Hello {local_i32} is {local_f64:.*}\", 5);\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:65:5\n+  --> $DIR/uninlined_format_args.rs:63:5\n    |\n LL |     println!(\"{} {}\", local_i32, local_f64);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -232,7 +232,7 @@ LL +     println!(\"{local_i32} {local_f64}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:66:5\n+  --> $DIR/uninlined_format_args.rs:64:5\n    |\n LL |     println!(\"{}, {}\", local_i32, local_opt.unwrap());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -244,7 +244,7 @@ LL +     println!(\"{local_i32}, {}\", local_opt.unwrap());\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:67:5\n+  --> $DIR/uninlined_format_args.rs:65:5\n    |\n LL |     println!(\"{}\", val);\n    |     ^^^^^^^^^^^^^^^^^^^\n@@ -256,7 +256,7 @@ LL +     println!(\"{val}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:68:5\n+  --> $DIR/uninlined_format_args.rs:66:5\n    |\n LL |     println!(\"{}\", v = val);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -268,7 +268,7 @@ LL +     println!(\"{val}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:70:5\n+  --> $DIR/uninlined_format_args.rs:68:5\n    |\n LL |     println!(\"val='{/t }'\", local_i32);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -280,7 +280,7 @@ LL +     println!(\"val='{local_i32}'\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:71:5\n+  --> $DIR/uninlined_format_args.rs:69:5\n    |\n LL |     println!(\"val='{/n }'\", local_i32);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -292,7 +292,7 @@ LL +     println!(\"val='{local_i32}'\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:72:5\n+  --> $DIR/uninlined_format_args.rs:70:5\n    |\n LL |     println!(\"val='{local_i32}'\", local_i32 = local_i32);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -304,7 +304,7 @@ LL +     println!(\"val='{local_i32}'\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:73:5\n+  --> $DIR/uninlined_format_args.rs:71:5\n    |\n LL |     println!(\"val='{local_i32}'\", local_i32 = fn_arg);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -316,7 +316,7 @@ LL +     println!(\"val='{fn_arg}'\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:74:5\n+  --> $DIR/uninlined_format_args.rs:72:5\n    |\n LL |     println!(\"{0}\", local_i32);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -328,7 +328,7 @@ LL +     println!(\"{local_i32}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:75:5\n+  --> $DIR/uninlined_format_args.rs:73:5\n    |\n LL |     println!(\"{0:?}\", local_i32);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -340,7 +340,7 @@ LL +     println!(\"{local_i32:?}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:76:5\n+  --> $DIR/uninlined_format_args.rs:74:5\n    |\n LL |     println!(\"{0:#?}\", local_i32);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -352,7 +352,7 @@ LL +     println!(\"{local_i32:#?}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:77:5\n+  --> $DIR/uninlined_format_args.rs:75:5\n    |\n LL |     println!(\"{0:04}\", local_i32);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -364,7 +364,7 @@ LL +     println!(\"{local_i32:04}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:78:5\n+  --> $DIR/uninlined_format_args.rs:76:5\n    |\n LL |     println!(\"{0:<3}\", local_i32);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -376,7 +376,7 @@ LL +     println!(\"{local_i32:<3}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:79:5\n+  --> $DIR/uninlined_format_args.rs:77:5\n    |\n LL |     println!(\"{0:#010x}\", local_i32);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -388,7 +388,7 @@ LL +     println!(\"{local_i32:#010x}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:80:5\n+  --> $DIR/uninlined_format_args.rs:78:5\n    |\n LL |     println!(\"{0:.1}\", local_f64);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -400,7 +400,7 @@ LL +     println!(\"{local_f64:.1}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:81:5\n+  --> $DIR/uninlined_format_args.rs:79:5\n    |\n LL |     println!(\"{0} {0}\", local_i32);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -412,7 +412,7 @@ LL +     println!(\"{local_i32} {local_i32}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:82:5\n+  --> $DIR/uninlined_format_args.rs:80:5\n    |\n LL |     println!(\"{1} {} {0} {}\", local_i32, local_f64);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -424,7 +424,7 @@ LL +     println!(\"{local_f64} {local_i32} {local_i32} {local_f64}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:83:5\n+  --> $DIR/uninlined_format_args.rs:81:5\n    |\n LL |     println!(\"{0} {1}\", local_i32, local_f64);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -436,7 +436,7 @@ LL +     println!(\"{local_i32} {local_f64}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:84:5\n+  --> $DIR/uninlined_format_args.rs:82:5\n    |\n LL |     println!(\"{1} {0}\", local_i32, local_f64);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -448,7 +448,7 @@ LL +     println!(\"{local_f64} {local_i32}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:85:5\n+  --> $DIR/uninlined_format_args.rs:83:5\n    |\n LL |     println!(\"{1} {0} {1} {0}\", local_i32, local_f64);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -460,7 +460,7 @@ LL +     println!(\"{local_f64} {local_i32} {local_f64} {local_i32}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:87:5\n+  --> $DIR/uninlined_format_args.rs:85:5\n    |\n LL |     println!(\"{v}\", v = local_i32);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -472,7 +472,7 @@ LL +     println!(\"{local_i32}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:88:5\n+  --> $DIR/uninlined_format_args.rs:86:5\n    |\n LL |     println!(\"{local_i32:0$}\", width);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -484,7 +484,7 @@ LL +     println!(\"{local_i32:width$}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:89:5\n+  --> $DIR/uninlined_format_args.rs:87:5\n    |\n LL |     println!(\"{local_i32:w$}\", w = width);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -496,7 +496,7 @@ LL +     println!(\"{local_i32:width$}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:90:5\n+  --> $DIR/uninlined_format_args.rs:88:5\n    |\n LL |     println!(\"{local_i32:.0$}\", prec);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -508,7 +508,7 @@ LL +     println!(\"{local_i32:.prec$}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:91:5\n+  --> $DIR/uninlined_format_args.rs:89:5\n    |\n LL |     println!(\"{local_i32:.p$}\", p = prec);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -520,7 +520,7 @@ LL +     println!(\"{local_i32:.prec$}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:92:5\n+  --> $DIR/uninlined_format_args.rs:90:5\n    |\n LL |     println!(\"{:0$}\", v = val);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -532,7 +532,7 @@ LL +     println!(\"{val:val$}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:93:5\n+  --> $DIR/uninlined_format_args.rs:91:5\n    |\n LL |     println!(\"{0:0$}\", v = val);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -544,7 +544,7 @@ LL +     println!(\"{val:val$}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:94:5\n+  --> $DIR/uninlined_format_args.rs:92:5\n    |\n LL |     println!(\"{:0$.0$}\", v = val);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -556,7 +556,7 @@ LL +     println!(\"{val:val$.val$}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:95:5\n+  --> $DIR/uninlined_format_args.rs:93:5\n    |\n LL |     println!(\"{0:0$.0$}\", v = val);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -568,7 +568,7 @@ LL +     println!(\"{val:val$.val$}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:96:5\n+  --> $DIR/uninlined_format_args.rs:94:5\n    |\n LL |     println!(\"{0:0$.v$}\", v = val);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -580,7 +580,7 @@ LL +     println!(\"{val:val$.val$}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:97:5\n+  --> $DIR/uninlined_format_args.rs:95:5\n    |\n LL |     println!(\"{0:v$.0$}\", v = val);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -592,7 +592,7 @@ LL +     println!(\"{val:val$.val$}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:98:5\n+  --> $DIR/uninlined_format_args.rs:96:5\n    |\n LL |     println!(\"{v:0$.0$}\", v = val);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -604,7 +604,7 @@ LL +     println!(\"{val:val$.val$}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:99:5\n+  --> $DIR/uninlined_format_args.rs:97:5\n    |\n LL |     println!(\"{v:v$.0$}\", v = val);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -616,7 +616,7 @@ LL +     println!(\"{val:val$.val$}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:100:5\n+  --> $DIR/uninlined_format_args.rs:98:5\n    |\n LL |     println!(\"{v:0$.v$}\", v = val);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -628,7 +628,7 @@ LL +     println!(\"{val:val$.val$}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:101:5\n+  --> $DIR/uninlined_format_args.rs:99:5\n    |\n LL |     println!(\"{v:v$.v$}\", v = val);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -640,7 +640,7 @@ LL +     println!(\"{val:val$.val$}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:102:5\n+  --> $DIR/uninlined_format_args.rs:100:5\n    |\n LL |     println!(\"{:0$}\", width);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -652,7 +652,7 @@ LL +     println!(\"{width:width$}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:103:5\n+  --> $DIR/uninlined_format_args.rs:101:5\n    |\n LL |     println!(\"{:1$}\", local_i32, width);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -664,7 +664,7 @@ LL +     println!(\"{local_i32:width$}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:104:5\n+  --> $DIR/uninlined_format_args.rs:102:5\n    |\n LL |     println!(\"{:w$}\", w = width);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -676,7 +676,7 @@ LL +     println!(\"{width:width$}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:105:5\n+  --> $DIR/uninlined_format_args.rs:103:5\n    |\n LL |     println!(\"{:w$}\", local_i32, w = width);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -688,7 +688,7 @@ LL +     println!(\"{local_i32:width$}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:106:5\n+  --> $DIR/uninlined_format_args.rs:104:5\n    |\n LL |     println!(\"{:.0$}\", prec);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -700,7 +700,7 @@ LL +     println!(\"{prec:.prec$}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:107:5\n+  --> $DIR/uninlined_format_args.rs:105:5\n    |\n LL |     println!(\"{:.1$}\", local_i32, prec);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -712,7 +712,7 @@ LL +     println!(\"{local_i32:.prec$}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:108:5\n+  --> $DIR/uninlined_format_args.rs:106:5\n    |\n LL |     println!(\"{:.p$}\", p = prec);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -724,7 +724,7 @@ LL +     println!(\"{prec:.prec$}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:109:5\n+  --> $DIR/uninlined_format_args.rs:107:5\n    |\n LL |     println!(\"{:.p$}\", local_i32, p = prec);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -736,7 +736,7 @@ LL +     println!(\"{local_i32:.prec$}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:110:5\n+  --> $DIR/uninlined_format_args.rs:108:5\n    |\n LL |     println!(\"{:0$.1$}\", width, prec);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -748,7 +748,7 @@ LL +     println!(\"{width:width$.prec$}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:111:5\n+  --> $DIR/uninlined_format_args.rs:109:5\n    |\n LL |     println!(\"{:0$.w$}\", width, w = prec);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -760,7 +760,7 @@ LL +     println!(\"{width:width$.prec$}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:112:5\n+  --> $DIR/uninlined_format_args.rs:110:5\n    |\n LL |     println!(\"{:1$.2$}\", local_f64, width, prec);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -772,7 +772,7 @@ LL +     println!(\"{local_f64:width$.prec$}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:113:5\n+  --> $DIR/uninlined_format_args.rs:111:5\n    |\n LL |     println!(\"{:1$.2$} {0} {1} {2}\", local_f64, width, prec);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -784,7 +784,7 @@ LL +     println!(\"{local_f64:width$.prec$} {local_f64} {width} {prec}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:114:5\n+  --> $DIR/uninlined_format_args.rs:112:5\n    |\n LL | /     println!(\n LL | |         \"{0:1$.2$} {0:2$.1$} {1:0$.2$} {1:2$.0$} {2:0$.1$} {2:1$.0$}\",\n@@ -803,7 +803,7 @@ LL ~         \"{0:1$.2$} {0:2$.1$} {1:0$.2$} {1:2$.0$} {2:0$.1$} {2:1$.0$}\",\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:125:5\n+  --> $DIR/uninlined_format_args.rs:123:5\n    |\n LL |     println!(\"Width = {}, value with width = {:0$}\", local_i32, local_f64);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -815,7 +815,7 @@ LL +     println!(\"Width = {local_i32}, value with width = {local_f64:local_i32$\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:126:5\n+  --> $DIR/uninlined_format_args.rs:124:5\n    |\n LL |     println!(\"{:w$.p$}\", local_i32, w = width, p = prec);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -827,7 +827,7 @@ LL +     println!(\"{local_i32:width$.prec$}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:127:5\n+  --> $DIR/uninlined_format_args.rs:125:5\n    |\n LL |     println!(\"{:w$.p$}\", w = width, p = prec);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -839,7 +839,7 @@ LL +     println!(\"{width:width$.prec$}\");\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:128:20\n+  --> $DIR/uninlined_format_args.rs:126:20\n    |\n LL |     println!(\"{}\", format!(\"{}\", local_i32));\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -851,7 +851,35 @@ LL +     println!(\"{}\", format!(\"{local_i32}\"));\n    |\n \n error: variables can be used directly in the `format!` string\n-  --> $DIR/uninlined_format_args.rs:166:5\n+  --> $DIR/uninlined_format_args.rs:144:5\n+   |\n+LL | /     println!(\n+LL | |         \"{}\",\n+LL | |         // comment with a comma , in it\n+LL | |         val,\n+LL | |     );\n+   | |_____^\n+   |\n+help: change this to\n+   |\n+LL -         \"{}\",\n+LL +         \"{val}\",\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:149:5\n+   |\n+LL |     println!(\"{}\", /* comment with a comma , in it */ val);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: change this to\n+   |\n+LL -     println!(\"{}\", /* comment with a comma , in it */ val);\n+LL +     println!(\"{val}\");\n+   |\n+\n+error: variables can be used directly in the `format!` string\n+  --> $DIR/uninlined_format_args.rs:168:5\n    |\n LL |     println!(\"expand='{}'\", local_i32);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -862,5 +890,5 @@ LL -     println!(\"expand='{}'\", local_i32);\n LL +     println!(\"expand='{local_i32}'\");\n    |\n \n-error: aborting due to 71 previous errors\n+error: aborting due to 73 previous errors\n "}]}