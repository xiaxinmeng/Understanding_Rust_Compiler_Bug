{"sha": "f3b10dd709b4071df2d7cce1995463a023ed8eee", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzYjEwZGQ3MDliNDA3MWRmMmQ3Y2NlMTk5NTQ2M2EwMjNlZDhlZWU=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-05-26T11:32:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-26T11:32:11Z"}, "message": "Rollup merge of #85679 - hch12907:master, r=Mark-Simulacrum\n\nRemove num_as_ne_bytes feature\n\nFrom the discussion in #76976, it is determined that eventual results of the safe transmute work as a more general mechanism will let these conversions happen in safe code without needing specialized methods.\n\nMerging this PR closes #76976 and resolves #64464. Several T-libs members have raised their opinion that it doesn't pull its weight as a standalone method, and so we should not track it as a specific thing to add.", "tree": {"sha": "9438d51740b430282614cb9a273b6698d262c20a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9438d51740b430282614cb9a273b6698d262c20a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3b10dd709b4071df2d7cce1995463a023ed8eee", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgrjG8CRBK7hj4Ov3rIwAA+ZYIAGQqZFgUp9VGxmGWlq2SSKDl\n2hZ57vomfJTpznGyPf/QxSDADiQHprWl898ZqC6TA7IKPS4tL3vFYCtR7oz+7HaK\npVszoRD/2C3UtPK2t9btCDjaN3yEkP/D7NpH2G6Z+d0+j4WazGUpcfLc/pZ2jgP5\nJ5aeFDuhmoaIw/PSlpvK4w+jjxodfJ9mQcAvYPUCHTQKP4H2oVXfQCCv4UPNR6pn\nNNRFRTMNbVtujBEbBL41GLJEaD3BD92avaPIvH+DqtWc8biniSeGfwNrXkbIPerX\nbsRKITD4lCcJumjPiQ7lQRkCog8nxPLSL4ZyVZ8T3QFI9a6qpsOUNHebKI2WJIQ=\n=gZ1V\n-----END PGP SIGNATURE-----\n", "payload": "tree 9438d51740b430282614cb9a273b6698d262c20a\nparent 3c2a709620fd1cc3802a6ffce558e673b1add954\nparent 0baf89810f36ae5f8efc96041b99d569186d53f9\nauthor Dylan DPC <dylan.dpc@gmail.com> 1622028731 +0200\ncommitter GitHub <noreply@github.com> 1622028731 +0200\n\nRollup merge of #85679 - hch12907:master, r=Mark-Simulacrum\n\nRemove num_as_ne_bytes feature\n\nFrom the discussion in #76976, it is determined that eventual results of the safe transmute work as a more general mechanism will let these conversions happen in safe code without needing specialized methods.\n\nMerging this PR closes #76976 and resolves #64464. Several T-libs members have raised their opinion that it doesn't pull its weight as a standalone method, and so we should not track it as a specific thing to add.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3b10dd709b4071df2d7cce1995463a023ed8eee", "html_url": "https://github.com/rust-lang/rust/commit/f3b10dd709b4071df2d7cce1995463a023ed8eee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3b10dd709b4071df2d7cce1995463a023ed8eee/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c2a709620fd1cc3802a6ffce558e673b1add954", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c2a709620fd1cc3802a6ffce558e673b1add954", "html_url": "https://github.com/rust-lang/rust/commit/3c2a709620fd1cc3802a6ffce558e673b1add954"}, {"sha": "0baf89810f36ae5f8efc96041b99d569186d53f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/0baf89810f36ae5f8efc96041b99d569186d53f9", "html_url": "https://github.com/rust-lang/rust/commit/0baf89810f36ae5f8efc96041b99d569186d53f9"}], "stats": {"total": 118, "additions": 0, "deletions": 118}, "files": [{"sha": "77132cddca272c2bdefa606776e89789ceedef4c", "filename": "library/core/src/num/f32.rs", "status": "modified", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/f3b10dd709b4071df2d7cce1995463a023ed8eee/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b10dd709b4071df2d7cce1995463a023ed8eee/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs?ref=f3b10dd709b4071df2d7cce1995463a023ed8eee", "patch": "@@ -854,35 +854,6 @@ impl f32 {\n         self.to_bits().to_ne_bytes()\n     }\n \n-    /// Return the memory representation of this floating point number as a byte array in\n-    /// native byte order.\n-    ///\n-    /// [`to_ne_bytes`] should be preferred over this whenever possible.\n-    ///\n-    /// [`to_ne_bytes`]: f32::to_ne_bytes\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// #![feature(num_as_ne_bytes)]\n-    /// let num = 12.5f32;\n-    /// let bytes = num.as_ne_bytes();\n-    /// assert_eq!(\n-    ///     bytes,\n-    ///     if cfg!(target_endian = \"big\") {\n-    ///         &[0x41, 0x48, 0x00, 0x00]\n-    ///     } else {\n-    ///         &[0x00, 0x00, 0x48, 0x41]\n-    ///     }\n-    /// );\n-    /// ```\n-    #[unstable(feature = \"num_as_ne_bytes\", issue = \"76976\")]\n-    #[inline]\n-    pub fn as_ne_bytes(&self) -> &[u8; 4] {\n-        // SAFETY: `f32` is a plain old datatype so we can always transmute to it\n-        unsafe { &*(self as *const Self as *const _) }\n-    }\n-\n     /// Create a floating point value from its representation as a byte array in big endian.\n     ///\n     /// # Examples"}, {"sha": "4c3f1fd16a0db51f615db89a57cfc0b5cb045c58", "filename": "library/core/src/num/f64.rs", "status": "modified", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/f3b10dd709b4071df2d7cce1995463a023ed8eee/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b10dd709b4071df2d7cce1995463a023ed8eee/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs?ref=f3b10dd709b4071df2d7cce1995463a023ed8eee", "patch": "@@ -868,35 +868,6 @@ impl f64 {\n         self.to_bits().to_ne_bytes()\n     }\n \n-    /// Return the memory representation of this floating point number as a byte array in\n-    /// native byte order.\n-    ///\n-    /// [`to_ne_bytes`] should be preferred over this whenever possible.\n-    ///\n-    /// [`to_ne_bytes`]: f64::to_ne_bytes\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// #![feature(num_as_ne_bytes)]\n-    /// let num = 12.5f64;\n-    /// let bytes = num.as_ne_bytes();\n-    /// assert_eq!(\n-    ///     bytes,\n-    ///     if cfg!(target_endian = \"big\") {\n-    ///         &[0x40, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]\n-    ///     } else {\n-    ///         &[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x29, 0x40]\n-    ///     }\n-    /// );\n-    /// ```\n-    #[unstable(feature = \"num_as_ne_bytes\", issue = \"76976\")]\n-    #[inline]\n-    pub fn as_ne_bytes(&self) -> &[u8; 8] {\n-        // SAFETY: `f64` is a plain old datatype so we can always transmute to it\n-        unsafe { &*(self as *const Self as *const _) }\n-    }\n-\n     /// Create a floating point value from its representation as a byte array in big endian.\n     ///\n     /// # Examples"}, {"sha": "4af86ed98f26f0a80ee49783d460a7605abbe2bc", "filename": "library/core/src/num/int_macros.rs", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f3b10dd709b4071df2d7cce1995463a023ed8eee/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b10dd709b4071df2d7cce1995463a023ed8eee/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs?ref=f3b10dd709b4071df2d7cce1995463a023ed8eee", "patch": "@@ -1842,36 +1842,6 @@ macro_rules! int_impl {\n             unsafe { mem::transmute(self) }\n         }\n \n-        /// Return the memory representation of this integer as a byte array in\n-        /// native byte order.\n-        ///\n-        /// [`to_ne_bytes`] should be preferred over this whenever possible.\n-        ///\n-        /// [`to_ne_bytes`]: Self::to_ne_bytes\n-        ///\n-        /// # Examples\n-        ///\n-        /// ```\n-        /// #![feature(num_as_ne_bytes)]\n-        #[doc = concat!(\"let num = \", $swap_op, stringify!($SelfT), \";\")]\n-        /// let bytes = num.as_ne_bytes();\n-        /// assert_eq!(\n-        ///     bytes,\n-        ///     if cfg!(target_endian = \"big\") {\n-        #[doc = concat!(\"        &\", $be_bytes)]\n-        ///     } else {\n-        #[doc = concat!(\"        &\", $le_bytes)]\n-        ///     }\n-        /// );\n-        /// ```\n-        #[unstable(feature = \"num_as_ne_bytes\", issue = \"76976\")]\n-        #[inline]\n-        pub fn as_ne_bytes(&self) -> &[u8; mem::size_of::<Self>()] {\n-            // SAFETY: integers are plain old datatypes so we can always transmute them to\n-            // arrays of bytes\n-            unsafe { &*(self as *const Self as *const _) }\n-        }\n-\n         /// Create an integer value from its representation as a byte array in\n         /// big endian.\n         ///"}, {"sha": "a525e02d5e1849f8b39238fd8ead2a26f48627f3", "filename": "library/core/src/num/uint_macros.rs", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f3b10dd709b4071df2d7cce1995463a023ed8eee/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3b10dd709b4071df2d7cce1995463a023ed8eee/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs?ref=f3b10dd709b4071df2d7cce1995463a023ed8eee", "patch": "@@ -1672,36 +1672,6 @@ macro_rules! uint_impl {\n             unsafe { mem::transmute(self) }\n         }\n \n-        /// Return the memory representation of this integer as a byte array in\n-        /// native byte order.\n-        ///\n-        /// [`to_ne_bytes`] should be preferred over this whenever possible.\n-        ///\n-        /// [`to_ne_bytes`]: Self::to_ne_bytes\n-        ///\n-        /// # Examples\n-        ///\n-        /// ```\n-        /// #![feature(num_as_ne_bytes)]\n-        #[doc = concat!(\"let num = \", $swap_op, stringify!($SelfT), \";\")]\n-        /// let bytes = num.as_ne_bytes();\n-        /// assert_eq!(\n-        ///     bytes,\n-        ///     if cfg!(target_endian = \"big\") {\n-        #[doc = concat!(\"        &\", $be_bytes)]\n-        ///     } else {\n-        #[doc = concat!(\"        &\", $le_bytes)]\n-        ///     }\n-        /// );\n-        /// ```\n-        #[unstable(feature = \"num_as_ne_bytes\", issue = \"76976\")]\n-        #[inline]\n-        pub fn as_ne_bytes(&self) -> &[u8; mem::size_of::<Self>()] {\n-            // SAFETY: integers are plain old datatypes so we can always transmute them to\n-            // arrays of bytes\n-            unsafe { &*(self as *const Self as *const _) }\n-        }\n-\n         /// Create a native endian integer value from its representation\n         /// as a byte array in big endian.\n         ///"}]}