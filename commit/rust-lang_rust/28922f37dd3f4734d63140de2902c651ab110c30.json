{"sha": "28922f37dd3f4734d63140de2902c651ab110c30", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4OTIyZjM3ZGQzZjQ3MzRkNjMxNDBkZTI5MDJjNjUxYWIxMTBjMzA=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2015-11-26T20:30:10Z"}, "committer": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2015-11-26T20:30:10Z"}, "message": "Merge pull request #640 from Marwes/alias\n\nFormat type aliases", "tree": {"sha": "d9b6e9d678523ac97c77aecc00881e6b96782d52", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9b6e9d678523ac97c77aecc00881e6b96782d52"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28922f37dd3f4734d63140de2902c651ab110c30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28922f37dd3f4734d63140de2902c651ab110c30", "html_url": "https://github.com/rust-lang/rust/commit/28922f37dd3f4734d63140de2902c651ab110c30", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28922f37dd3f4734d63140de2902c651ab110c30/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68bc387925e25e1168ade10d3a7c10c64ece406b", "url": "https://api.github.com/repos/rust-lang/rust/commits/68bc387925e25e1168ade10d3a7c10c64ece406b", "html_url": "https://github.com/rust-lang/rust/commit/68bc387925e25e1168ade10d3a7c10c64ece406b"}, {"sha": "0021001a077b082947ea1ed1386ef2954a11d813", "url": "https://api.github.com/repos/rust-lang/rust/commits/0021001a077b082947ea1ed1386ef2954a11d813", "html_url": "https://github.com/rust-lang/rust/commit/0021001a077b082947ea1ed1386ef2954a11d813"}], "stats": {"total": 107, "additions": 104, "deletions": 3}, "files": [{"sha": "0f5fa1b655f36fc54cb425ac080c09ce41660bcb", "filename": "src/items.rs", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/28922f37dd3f4734d63140de2902c651ab110c30/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28922f37dd3f4734d63140de2902c651ab110c30/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=28922f37dd3f4734d63140de2902c651ab110c30", "patch": "@@ -739,6 +739,57 @@ fn format_tuple_struct(context: &RewriteContext,\n     Some(result)\n }\n \n+pub fn rewrite_type_alias(context: &RewriteContext,\n+                          indent: Indent,\n+                          ident: ast::Ident,\n+                          ty: &ast::Ty,\n+                          generics: &ast::Generics,\n+                          vis: ast::Visibility,\n+                          span: Span)\n+                          -> Option<String> {\n+    let mut result = String::new();\n+\n+    result.push_str(&format_visibility(vis));\n+    result.push_str(\"type \");\n+    result.push_str(&ident.to_string());\n+\n+    let generics_indent = indent + result.len();\n+    let generics_span = mk_sp(span_after(span, \"type\", context.codemap), ty.span.lo);\n+    let generics_str = try_opt!(rewrite_generics(context,\n+                                                 generics,\n+                                                 indent,\n+                                                 generics_indent,\n+                                                 generics_span));\n+\n+    result.push_str(&generics_str);\n+    result.push_str(\" = \");\n+\n+    let line_width = last_line_width(&result);\n+    let budget = try_opt!(context.config\n+                                 .max_width\n+                                 .checked_sub(indent.width() + line_width + \";\".len()));\n+    let type_indent = indent + line_width;\n+    // Try to fit the type on the same line\n+    let ty_str = try_opt!(ty.rewrite(context, budget, type_indent)\n+                            .or_else(|| {\n+                                // The line was too short, try to put the type on the next line\n+\n+                                // Remove the space after '='\n+                                result.pop();\n+                                let type_indent = indent.block_indent(context.config);\n+                                result.push('\\n');\n+                                result.push_str(&type_indent.to_string(context.config));\n+                                let budget = try_opt!(context.config\n+                                                             .max_width\n+                                                             .checked_sub(type_indent.width() +\n+                                                                          \";\".len()));\n+                                ty.rewrite(context, budget, type_indent)\n+                            }));\n+    result.push_str(&ty_str);\n+    result.push_str(\";\");\n+    Some(result)\n+}\n+\n impl Rewrite for ast::StructField {\n     fn rewrite(&self, context: &RewriteContext, width: usize, offset: Indent) -> Option<String> {\n         if contains_skip(&self.node.attrs) {"}, {"sha": "7b694de4535af2e9f2f1cb900b71615287de301a", "filename": "src/visitor.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/28922f37dd3f4734d63140de2902c651ab110c30/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28922f37dd3f4734d63140de2902c651ab110c30/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=28922f37dd3f4734d63140de2902c651ab110c30", "patch": "@@ -21,7 +21,7 @@ use config::Config;\n use rewrite::{Rewrite, RewriteContext};\n use comment::rewrite_comment;\n use macros::rewrite_macro;\n-use items::{rewrite_static, format_impl};\n+use items::{rewrite_static, rewrite_type_alias, format_impl};\n \n pub struct FmtVisitor<'a> {\n     pub parse_session: &'a ParseSess,\n@@ -299,8 +299,15 @@ impl<'a> FmtVisitor<'a> {\n                               item.span,\n                               item.id)\n             }\n-            ast::Item_::ItemTy(..) => {\n-                // FIXME(#486): format type aliases.\n+            ast::Item_::ItemTy(ref ty, ref generics) => {\n+                let rewrite = rewrite_type_alias(&self.get_context(),\n+                                                 self.block_indent,\n+                                                 item.ident,\n+                                                 ty,\n+                                                 generics,\n+                                                 item.vis,\n+                                                 item.span);\n+                self.push_rewrite(item.span, rewrite);\n             }\n         }\n     }"}, {"sha": "3f8a6ccfe3eb457c95db5288fdd5846deef415bf", "filename": "tests/source/type_alias.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/28922f37dd3f4734d63140de2902c651ab110c30/tests%2Fsource%2Ftype_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28922f37dd3f4734d63140de2902c651ab110c30/tests%2Fsource%2Ftype_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Ftype_alias.rs?ref=28922f37dd3f4734d63140de2902c651ab110c30", "patch": "@@ -0,0 +1,16 @@\n+\n+type PrivateTest<'a, I> = (Box<Parser<Input=I, Output=char> + 'a>, Box<Parser<Input=I, Output=char> + 'a>);\n+\n+pub type PublicTest<'a, I, O> = Result<Vec<MyLongType>, Box<Parser<Input=I, Output=char> + 'a>, Box<Parser<Input=I, Output=char> + 'a>>;\n+\n+pub type LongGenericListTest<'a, 'b, 'c, 'd, LONGPARAMETERNAME, LONGPARAMETERNAME, LONGPARAMETERNAME, A, B, C> = Option<Vec<MyType>>;\n+\n+pub type Exactly100CharsTest<'a, 'b, 'c, 'd, LONGPARAMETERNAME, LONGPARAMETERNAME, A, B> = Vec<i32>;\n+\n+pub type Exactly101CharsTest<'a, 'b, 'c, 'd, LONGPARAMETERNAME, LONGPARAMETERNAME, A, B> = Vec<Test>;\n+\n+pub type CommentTest< /* Lifetime */ 'a\n+            ,\n+        // Type\n+        T\n+                    > = ();"}, {"sha": "a468f7920e3ed801f4125e3d747361543a3b83bd", "filename": "tests/target/type_alias.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/28922f37dd3f4734d63140de2902c651ab110c30/tests%2Ftarget%2Ftype_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28922f37dd3f4734d63140de2902c651ab110c30/tests%2Ftarget%2Ftype_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ftype_alias.rs?ref=28922f37dd3f4734d63140de2902c651ab110c30", "patch": "@@ -0,0 +1,27 @@\n+\n+type PrivateTest<'a, I> = (Box<Parser<Input = I, Output = char> + 'a>,\n+                           Box<Parser<Input = I, Output = char> + 'a>);\n+\n+pub type PublicTest<'a, I, O> = Result<Vec<MyLongType>,\n+                                       Box<Parser<Input = I, Output = char> + 'a>,\n+                                       Box<Parser<Input = I, Output = char> + 'a>>;\n+\n+pub type LongGenericListTest<'a,\n+                             'b,\n+                             'c,\n+                             'd,\n+                             LONGPARAMETERNAME,\n+                             LONGPARAMETERNAME,\n+                             LONGPARAMETERNAME,\n+                             A,\n+                             B,\n+                             C> = Option<Vec<MyType>>;\n+\n+pub type Exactly100CharsTest<'a, 'b, 'c, 'd, LONGPARAMETERNAME, LONGPARAMETERNAME, A, B> = Vec<i32>;\n+\n+pub type Exactly101CharsTest<'a, 'b, 'c, 'd, LONGPARAMETERNAME, LONGPARAMETERNAME, A, B> =\n+    Vec<Test>;\n+\n+pub type CommentTest<// Lifetime\n+                     'a, // Type\n+                     T> = ();"}]}