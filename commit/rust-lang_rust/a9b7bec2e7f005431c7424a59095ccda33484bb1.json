{"sha": "a9b7bec2e7f005431c7424a59095ccda33484bb1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5YjdiZWMyZTdmMDA1NDMxYzc0MjRhNTkwOTVjY2RhMzM0ODRiYjE=", "commit": {"author": {"name": "Sangeun Kim", "email": "sammy.kim@samsung.com", "date": "2013-08-07T07:47:21Z"}, "committer": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2013-08-08T02:41:13Z"}, "message": "Change const to static", "tree": {"sha": "d999af47fde328c3899bbbc1870bf1e33c137103", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d999af47fde328c3899bbbc1870bf1e33c137103"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9b7bec2e7f005431c7424a59095ccda33484bb1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9b7bec2e7f005431c7424a59095ccda33484bb1", "html_url": "https://github.com/rust-lang/rust/commit/a9b7bec2e7f005431c7424a59095ccda33484bb1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9b7bec2e7f005431c7424a59095ccda33484bb1/comments", "author": {"login": "sammykim", "id": 3492634, "node_id": "MDQ6VXNlcjM0OTI2MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3492634?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sammykim", "html_url": "https://github.com/sammykim", "followers_url": "https://api.github.com/users/sammykim/followers", "following_url": "https://api.github.com/users/sammykim/following{/other_user}", "gists_url": "https://api.github.com/users/sammykim/gists{/gist_id}", "starred_url": "https://api.github.com/users/sammykim/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sammykim/subscriptions", "organizations_url": "https://api.github.com/users/sammykim/orgs", "repos_url": "https://api.github.com/users/sammykim/repos", "events_url": "https://api.github.com/users/sammykim/events{/privacy}", "received_events_url": "https://api.github.com/users/sammykim/received_events", "type": "User", "site_admin": false}, "committer": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19d0eb90600f1b643025b99b8a2ea204e4d08034", "url": "https://api.github.com/repos/rust-lang/rust/commits/19d0eb90600f1b643025b99b8a2ea204e4d08034", "html_url": "https://github.com/rust-lang/rust/commit/19d0eb90600f1b643025b99b8a2ea204e4d08034"}], "stats": {"total": 86, "additions": 43, "deletions": 43}, "files": [{"sha": "aba7ea1f0d753f807e7b30021f2f9724ce942533", "filename": "src/librustdoc/doc.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a9b7bec2e7f005431c7424a59095ccda33484bb1/src%2Flibrustdoc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9b7bec2e7f005431c7424a59095ccda33484bb1/src%2Flibrustdoc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoc.rs?ref=a9b7bec2e7f005431c7424a59095ccda33484bb1", "patch": "@@ -54,7 +54,7 @@ pub struct CrateDoc {\n pub enum ItemTag {\n     ModTag(ModDoc),\n     NmodTag(NmodDoc),\n-    ConstTag(ConstDoc),\n+    StaticTag(StaticDoc),\n     FnTag(FnDoc),\n     EnumTag(EnumDoc),\n     TraitTag(TraitDoc),\n@@ -95,7 +95,7 @@ pub struct NmodDoc {\n     index: Option<Index>\n }\n \n-pub type ConstDoc = SimpleItemDoc;\n+pub type StaticDoc = SimpleItemDoc;\n \n pub type FnDoc = SimpleItemDoc;\n \n@@ -214,8 +214,8 @@ impl ModDoc {\n         md!(FnTag)\n     }\n \n-    pub fn consts(&self) -> ~[ConstDoc] {\n-        md!(ConstTag)\n+    pub fn statics(&self) -> ~[StaticDoc] {\n+        md!(StaticTag)\n     }\n \n     pub fn enums(&self) -> ~[EnumDoc] {\n@@ -249,7 +249,7 @@ pub trait PageUtils {\n     fn mods(&self) -> ~[ModDoc];\n     fn nmods(&self) -> ~[NmodDoc];\n     fn fns(&self) -> ~[FnDoc];\n-    fn consts(&self) -> ~[ConstDoc];\n+    fn statics(&self) -> ~[StaticDoc];\n     fn enums(&self) -> ~[EnumDoc];\n     fn traits(&self) -> ~[TraitDoc];\n     fn impls(&self) -> ~[ImplDoc];\n@@ -270,8 +270,8 @@ impl PageUtils for ~[Page] {\n         pu!(FnTag)\n     }\n \n-    fn consts(&self) -> ~[ConstDoc] {\n-        pu!(ConstTag)\n+    fn statics(&self) -> ~[StaticDoc] {\n+        pu!(StaticTag)\n     }\n \n     fn enums(&self) -> ~[EnumDoc] {\n@@ -301,7 +301,7 @@ impl Item for ItemTag {\n           &doc::ModTag(ref doc) => doc.item.clone(),\n           &doc::NmodTag(ref doc) => doc.item.clone(),\n           &doc::FnTag(ref doc) => doc.item.clone(),\n-          &doc::ConstTag(ref doc) => doc.item.clone(),\n+          &doc::StaticTag(ref doc) => doc.item.clone(),\n           &doc::EnumTag(ref doc) => doc.item.clone(),\n           &doc::TraitTag(ref doc) => doc.item.clone(),\n           &doc::ImplTag(ref doc) => doc.item.clone(),"}, {"sha": "2cab62296a4ddbdec2d051013ee1dde305bca2fd", "filename": "src/librustdoc/extract.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a9b7bec2e7f005431c7424a59095ccda33484bb1/src%2Flibrustdoc%2Fextract.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9b7bec2e7f005431c7424a59095ccda33484bb1/src%2Flibrustdoc%2Fextract.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fextract.rs?ref=a9b7bec2e7f005431c7424a59095ccda33484bb1", "patch": "@@ -101,8 +101,8 @@ fn moddoc_from_mod(\n                 ))\n               }\n               ast::item_static(*) => {\n-                Some(doc::ConstTag(\n-                    constdoc_from_const(ItemDoc)\n+                Some(doc::StaticTag(\n+                    staticdoc_from_static(ItemDoc)\n                 ))\n               }\n               ast::item_enum(enum_definition, _) => {\n@@ -165,7 +165,7 @@ fn fndoc_from_fn(itemdoc: doc::ItemDoc) -> doc::FnDoc {\n     }\n }\n \n-fn constdoc_from_const(itemdoc: doc::ItemDoc) -> doc::ConstDoc {\n+fn staticdoc_from_static(itemdoc: doc::ItemDoc) -> doc::StaticDoc {\n     doc::SimpleItemDoc {\n         item: itemdoc,\n         sig: None\n@@ -356,10 +356,10 @@ mod test {\n     }\n \n     #[test]\n-    fn should_extract_const_name_and_id() {\n+    fn should_extract_static_name_and_id() {\n         let doc = mk_doc(@\"static a: int = 0;\");\n-        assert!(doc.cratemod().consts()[0].id() != 0);\n-        assert!(doc.cratemod().consts()[0].name_() == ~\"a\");\n+        assert!(doc.cratemod().statics()[0].id() != 0);\n+        assert!(doc.cratemod().statics()[0].name_() == ~\"a\");\n     }\n \n     #[test]"}, {"sha": "589232f6e2f2f3cc447c2df44d5c770f8e0b6bf3", "filename": "src/librustdoc/fold.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a9b7bec2e7f005431c7424a59095ccda33484bb1/src%2Flibrustdoc%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9b7bec2e7f005431c7424a59095ccda33484bb1/src%2Flibrustdoc%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ffold.rs?ref=a9b7bec2e7f005431c7424a59095ccda33484bb1", "patch": "@@ -21,7 +21,7 @@ pub struct Fold<T> {\n     fold_mod: FoldMod<T>,\n     fold_nmod: FoldNmod<T>,\n     fold_fn: FoldFn<T>,\n-    fold_const: FoldConst<T>,\n+    fold_static: FoldStatic<T>,\n     fold_enum: FoldEnum<T>,\n     fold_trait: FoldTrait<T>,\n     fold_impl: FoldImpl<T>,\n@@ -39,7 +39,7 @@ impl<T:Clone> Clone for Fold<T> {\n             fold_mod: self.fold_mod,\n             fold_nmod: self.fold_nmod,\n             fold_fn: self.fold_fn,\n-            fold_const: self.fold_const,\n+            fold_static: self.fold_static,\n             fold_enum: self.fold_enum,\n             fold_trait: self.fold_trait,\n             fold_impl: self.fold_impl,\n@@ -55,7 +55,7 @@ type FoldItem<T> = @fn(fold: &Fold<T>, doc: doc::ItemDoc) -> doc::ItemDoc;\n type FoldMod<T> = @fn(fold: &Fold<T>, doc: doc::ModDoc) -> doc::ModDoc;\n type FoldNmod<T> = @fn(fold: &Fold<T>, doc: doc::NmodDoc) -> doc::NmodDoc;\n type FoldFn<T> = @fn(fold: &Fold<T>, doc: doc::FnDoc) -> doc::FnDoc;\n-type FoldConst<T> = @fn(fold: &Fold<T>, doc: doc::ConstDoc) -> doc::ConstDoc;\n+type FoldStatic<T> = @fn(fold: &Fold<T>, doc: doc::StaticDoc) -> doc::StaticDoc;\n type FoldEnum<T> = @fn(fold: &Fold<T>, doc: doc::EnumDoc) -> doc::EnumDoc;\n type FoldTrait<T> = @fn(fold: &Fold<T>, doc: doc::TraitDoc) -> doc::TraitDoc;\n type FoldImpl<T> = @fn(fold: &Fold<T>, doc: doc::ImplDoc) -> doc::ImplDoc;\n@@ -73,7 +73,7 @@ fn mk_fold<T>(\n     fold_mod: FoldMod<T>,\n     fold_nmod: FoldNmod<T>,\n     fold_fn: FoldFn<T>,\n-    fold_const: FoldConst<T>,\n+    fold_static: FoldStatic<T>,\n     fold_enum: FoldEnum<T>,\n     fold_trait: FoldTrait<T>,\n     fold_impl: FoldImpl<T>,\n@@ -88,7 +88,7 @@ fn mk_fold<T>(\n         fold_mod: fold_mod,\n         fold_nmod: fold_nmod,\n         fold_fn: fold_fn,\n-        fold_const: fold_const,\n+        fold_static: fold_static,\n         fold_enum: fold_enum,\n         fold_trait: fold_trait,\n         fold_impl: fold_impl,\n@@ -106,7 +106,7 @@ pub fn default_any_fold<T:Clone>(ctxt: T) -> Fold<T> {\n         |f, d| default_any_fold_mod(f, d),\n         |f, d| default_any_fold_nmod(f, d),\n         |f, d| default_seq_fold_fn(f, d),\n-        |f, d| default_seq_fold_const(f, d),\n+        |f, d| default_seq_fold_static(f, d),\n         |f, d| default_seq_fold_enum(f, d),\n         |f, d| default_seq_fold_trait(f, d),\n         |f, d| default_seq_fold_impl(f, d),\n@@ -124,7 +124,7 @@ pub fn default_seq_fold<T:Clone>(ctxt: T) -> Fold<T> {\n         |f, d| default_seq_fold_mod(f, d),\n         |f, d| default_seq_fold_nmod(f, d),\n         |f, d| default_seq_fold_fn(f, d),\n-        |f, d| default_seq_fold_const(f, d),\n+        |f, d| default_seq_fold_static(f, d),\n         |f, d| default_seq_fold_enum(f, d),\n         |f, d| default_seq_fold_trait(f, d),\n         |f, d| default_seq_fold_impl(f, d),\n@@ -142,7 +142,7 @@ pub fn default_par_fold<T:Clone>(ctxt: T) -> Fold<T> {\n         |f, d| default_par_fold_mod(f, d),\n         |f, d| default_par_fold_nmod(f, d),\n         |f, d| default_seq_fold_fn(f, d),\n-        |f, d| default_seq_fold_const(f, d),\n+        |f, d| default_seq_fold_static(f, d),\n         |f, d| default_seq_fold_enum(f, d),\n         |f, d| default_seq_fold_trait(f, d),\n         |f, d| default_seq_fold_impl(f, d),\n@@ -272,8 +272,8 @@ pub fn fold_ItemTag<T>(fold: &Fold<T>, doc: doc::ItemTag) -> doc::ItemTag {\n       doc::FnTag(FnDoc) => {\n         doc::FnTag((fold.fold_fn)(fold, FnDoc))\n       }\n-      doc::ConstTag(ConstDoc) => {\n-        doc::ConstTag((fold.fold_const)(fold, ConstDoc))\n+      doc::StaticTag(StaticDoc) => {\n+        doc::StaticTag((fold.fold_static)(fold, StaticDoc))\n       }\n       doc::EnumTag(EnumDoc) => {\n         doc::EnumTag((fold.fold_enum)(fold, EnumDoc))\n@@ -303,10 +303,10 @@ pub fn default_seq_fold_fn<T>(\n     }\n }\n \n-pub fn default_seq_fold_const<T>(\n+pub fn default_seq_fold_static<T>(\n     fold: &Fold<T>,\n-    doc: doc::ConstDoc\n-) -> doc::ConstDoc {\n+    doc: doc::StaticDoc\n+) -> doc::StaticDoc {\n     doc::SimpleItemDoc {\n         item: (fold.fold_item)(fold, doc.item.clone()),\n         .. doc\n@@ -374,7 +374,7 @@ fn default_fold_should_produce_same_doc() {\n }\n \n #[test]\n-fn default_fold_should_produce_same_consts() {\n+fn default_fold_should_produce_same_statics() {\n     let source = @\"static a: int = 0;\";\n     let ast = parse::from_str(source);\n     let doc = extract::extract(ast, ~\"\");"}, {"sha": "7d07b4864f50e1b57e6a50e11ef4a51bd0bd238d", "filename": "src/librustdoc/markdown_pass.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a9b7bec2e7f005431c7424a59095ccda33484bb1/src%2Flibrustdoc%2Fmarkdown_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9b7bec2e7f005431c7424a59095ccda33484bb1/src%2Flibrustdoc%2Fmarkdown_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_pass.rs?ref=a9b7bec2e7f005431c7424a59095ccda33484bb1", "patch": "@@ -321,7 +321,7 @@ fn write_item_(ctxt: &Ctxt, doc: doc::ItemTag, write_header: bool) {\n         doc::ModTag(ModDoc) => write_mod(ctxt, ModDoc),\n         doc::NmodTag(nModDoc) => write_nmod(ctxt, nModDoc),\n         doc::FnTag(FnDoc) => write_fn(ctxt, FnDoc),\n-        doc::ConstTag(ConstDoc) => write_const(ctxt, ConstDoc),\n+        doc::StaticTag(StaticDoc) => write_static(ctxt, StaticDoc),\n         doc::EnumTag(EnumDoc) => write_enum(ctxt, EnumDoc),\n         doc::TraitTag(TraitDoc) => write_trait(ctxt, TraitDoc),\n         doc::ImplTag(ImplDoc) => write_impl(ctxt, ImplDoc),\n@@ -409,9 +409,9 @@ fn code_block(s: ~str) -> ~str {\n ~~~\", s)\n }\n \n-fn write_const(\n+fn write_static(\n     ctxt: &Ctxt,\n-    doc: doc::ConstDoc\n+    doc: doc::StaticDoc\n ) {\n     write_sig(ctxt, doc.sig.clone());\n     write_common(ctxt, doc.desc(), doc.sections());\n@@ -775,13 +775,13 @@ mod test {\n     }\n \n     #[test]\n-    fn should_write_const_header() {\n+    fn should_write_static_header() {\n         let markdown = render(~\"static a: bool = true;\");\n         assert!(markdown.contains(\"## Static `a`\\n\\n\"));\n     }\n \n     #[test]\n-    fn should_write_const_description() {\n+    fn should_write_static_description() {\n         let markdown = render(\n             ~\"#[doc = \\\"b\\\"]\\\n               static a: bool = true;\");"}, {"sha": "ba8f37601fd567cb64660ccaf81a635f0c6d995d", "filename": "src/librustdoc/sort_item_type_pass.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a9b7bec2e7f005431c7424a59095ccda33484bb1/src%2Flibrustdoc%2Fsort_item_type_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9b7bec2e7f005431c7424a59095ccda33484bb1/src%2Flibrustdoc%2Fsort_item_type_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fsort_item_type_pass.rs?ref=a9b7bec2e7f005431c7424a59095ccda33484bb1", "patch": "@@ -18,7 +18,7 @@ pub fn mk_pass() -> Pass {\n     fn by_score(item1: &doc::ItemTag, item2: &doc::ItemTag) -> bool {\n         fn score(item: &doc::ItemTag) -> int {\n             match *item {\n-              doc::ConstTag(_) => 0,\n+              doc::StaticTag(_) => 0,\n               doc::TyTag(_) => 1,\n               doc::EnumTag(_) => 2,\n               doc::StructTag(_) => 3,\n@@ -43,7 +43,7 @@ fn test() {\n \n     let source =\n         ~\"mod imod { } \\\n-         static iconst: int = 0; \\\n+         static istatic: int = 0; \\\n          fn ifn() { } \\\n          enum ienum { ivar } \\\n          trait itrait { fn a(); } \\\n@@ -54,7 +54,7 @@ fn test() {\n         let doc = extract::from_srv(srv.clone(), ~\"\");\n         let doc = (mk_pass().f)(srv.clone(), doc);\n         // hidden __std_macros module at the start.\n-        assert_eq!(doc.cratemod().items[0].name_(), ~\"iconst\");\n+        assert_eq!(doc.cratemod().items[0].name_(), ~\"istatic\");\n         assert_eq!(doc.cratemod().items[1].name_(), ~\"itype\");\n         assert_eq!(doc.cratemod().items[2].name_(), ~\"ienum\");\n         assert_eq!(doc.cratemod().items[3].name_(), ~\"istruct\");"}, {"sha": "196c7e892a8801e90b04cceb87eac3d3af7d636e", "filename": "src/librustdoc/tystr_pass.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a9b7bec2e7f005431c7424a59095ccda33484bb1/src%2Flibrustdoc%2Ftystr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9b7bec2e7f005431c7424a59095ccda33484bb1/src%2Flibrustdoc%2Ftystr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftystr_pass.rs?ref=a9b7bec2e7f005431c7424a59095ccda33484bb1", "patch": "@@ -39,7 +39,7 @@ pub fn run(\n     let fold = Fold {\n         ctxt: srv.clone(),\n         fold_fn: fold_fn,\n-        fold_const: fold_const,\n+        fold_static: fold_static,\n         fold_enum: fold_enum,\n         fold_trait: fold_trait,\n         fold_impl: fold_impl,\n@@ -93,10 +93,10 @@ fn get_fn_sig(srv: astsrv::Srv, fn_id: doc::AstId) -> Option<~str> {\n     }\n }\n \n-fn fold_const(\n+fn fold_static(\n     fold: &fold::Fold<astsrv::Srv>,\n-    doc: doc::ConstDoc\n-) -> doc::ConstDoc {\n+    doc: doc::StaticDoc\n+) -> doc::StaticDoc {\n     let srv = fold.ctxt.clone();\n \n     doc::SimpleItemDoc {\n@@ -109,7 +109,7 @@ fn fold_const(\n                     }, _) => {\n                         pprust::ty_to_str(ty, extract::interner())\n                     }\n-                    _ => fail!(\"fold_const: id not bound to a const item\")\n+                    _ => fail!(\"fold_static: id not bound to a static item\")\n                 }\n             }}),\n         .. doc\n@@ -384,9 +384,9 @@ mod test {\n     }\n \n     #[test]\n-    fn should_add_const_types() {\n+    fn should_add_static_types() {\n         let doc = mk_doc(~\"static a: bool = true;\");\n-        assert!(doc.cratemod().consts()[0].sig == Some(~\"bool\"));\n+        assert!(doc.cratemod().statics()[0].sig == Some(~\"bool\"));\n     }\n \n     #[test]"}]}