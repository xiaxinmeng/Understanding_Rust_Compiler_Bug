{"sha": "582b6964a8868c9714881d9821d08415a8f4f13b", "node_id": "C_kwDOAAsO6NoAKDU4MmI2OTY0YTg4NjhjOTcxNDg4MWQ5ODIxZDA4NDE1YThmNGYxM2I", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-17T09:13:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-17T09:13:18Z"}, "message": "Auto merge of #94072 - matthiaskrgr:rollup-7uu2286, r=matthiaskrgr\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #89869 (Add documentation to more `From::from` implementations.)\n - #93479 (Use `optflag` for `--report-time`)\n - #93693 (Suggest deriving required supertraits)\n - #93981 (Fix suggestion to slice if scurtinee is a reference to `Result` or `Option`)\n - #93996 (Do not suggest \"is a function\" for free variables)\n - #94030 (Correctly mark the span of captured arguments in `format_args!()`)\n - #94031 ([diagnostics] Add mentions to `Copy` types being valid for `union` fields)\n - #94064 (Update dist-x86_64-musl to Ubuntu 20.04)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "ee6114ff2f2fe34b9925761196f0add4d281a392", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee6114ff2f2fe34b9925761196f0add4d281a392"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/582b6964a8868c9714881d9821d08415a8f4f13b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/582b6964a8868c9714881d9821d08415a8f4f13b", "html_url": "https://github.com/rust-lang/rust/commit/582b6964a8868c9714881d9821d08415a8f4f13b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/582b6964a8868c9714881d9821d08415a8f4f13b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "930fc4f59ddeb9f26d554a2c75c5355989189540", "url": "https://api.github.com/repos/rust-lang/rust/commits/930fc4f59ddeb9f26d554a2c75c5355989189540", "html_url": "https://github.com/rust-lang/rust/commit/930fc4f59ddeb9f26d554a2c75c5355989189540"}, {"sha": "aa83189caa910fe8d4bc2415438d9168132b2295", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa83189caa910fe8d4bc2415438d9168132b2295", "html_url": "https://github.com/rust-lang/rust/commit/aa83189caa910fe8d4bc2415438d9168132b2295"}], "stats": {"total": 734, "additions": 545, "deletions": 189}, "files": [{"sha": "ac37c4973d8709c09bdc8c4f85cfe675e8d7fc44", "filename": "compiler/rustc_builtin_macros/src/asm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/582b6964a8868c9714881d9821d08415a8f4f13b/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/582b6964a8868c9714881d9821d08415a8f4f13b/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs?ref=582b6964a8868c9714881d9821d08415a8f4f13b", "patch": "@@ -700,11 +700,11 @@ fn expand_preparsed_asm(ecx: &mut ExtCtxt<'_>, args: AsmArgs) -> Option<ast::Inl\n                                 Some(idx)\n                             }\n                         }\n-                        parse::ArgumentNamed(name) => match args.named_args.get(&name) {\n+                        parse::ArgumentNamed(name, span) => match args.named_args.get(&name) {\n                             Some(&idx) => Some(idx),\n                             None => {\n                                 let msg = format!(\"there is no argument named `{}`\", name);\n-                                ecx.struct_span_err(span, &msg).emit();\n+                                ecx.struct_span_err(template_span.from_inner(span), &msg).emit();\n                                 None\n                             }\n                         },"}, {"sha": "6141d00f69712ab39e35c288bb4be8e8d9e46777", "filename": "compiler/rustc_builtin_macros/src/format.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/582b6964a8868c9714881d9821d08415a8f4f13b/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/582b6964a8868c9714881d9821d08415a8f4f13b/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs?ref=582b6964a8868c9714881d9821d08415a8f4f13b", "patch": "@@ -11,7 +11,7 @@ use rustc_errors::{pluralize, Applicability, DiagnosticBuilder};\n use rustc_expand::base::{self, *};\n use rustc_parse_format as parse;\n use rustc_span::symbol::{sym, Ident, Symbol};\n-use rustc_span::{MultiSpan, Span};\n+use rustc_span::{InnerSpan, MultiSpan, Span};\n use smallvec::SmallVec;\n \n use std::borrow::Cow;\n@@ -26,7 +26,7 @@ enum ArgumentType {\n enum Position {\n     Exact(usize),\n     Capture(usize),\n-    Named(Symbol),\n+    Named(Symbol, InnerSpan),\n }\n \n struct Context<'a, 'b> {\n@@ -247,13 +247,13 @@ impl<'a, 'b> Context<'a, 'b> {\n         match *p {\n             parse::String(_) => {}\n             parse::NextArgument(ref mut arg) => {\n-                if let parse::ArgumentNamed(s) = arg.position {\n+                if let parse::ArgumentNamed(s, _) = arg.position {\n                     arg.position = parse::ArgumentIs(lookup(s));\n                 }\n-                if let parse::CountIsName(s) = arg.format.width {\n+                if let parse::CountIsName(s, _) = arg.format.width {\n                     arg.format.width = parse::CountIsParam(lookup(s));\n                 }\n-                if let parse::CountIsName(s) = arg.format.precision {\n+                if let parse::CountIsName(s, _) = arg.format.precision {\n                     arg.format.precision = parse::CountIsParam(lookup(s));\n                 }\n             }\n@@ -276,7 +276,7 @@ impl<'a, 'b> Context<'a, 'b> {\n                 // it's written second, so it should come after width/precision.\n                 let pos = match arg.position {\n                     parse::ArgumentIs(i) | parse::ArgumentImplicitlyIs(i) => Exact(i),\n-                    parse::ArgumentNamed(s) => Named(s),\n+                    parse::ArgumentNamed(s, span) => Named(s, span),\n                 };\n \n                 let ty = Placeholder(match arg.format.ty {\n@@ -346,8 +346,8 @@ impl<'a, 'b> Context<'a, 'b> {\n             parse::CountIsParam(i) => {\n                 self.verify_arg_type(Exact(i), Count);\n             }\n-            parse::CountIsName(s) => {\n-                self.verify_arg_type(Named(s), Count);\n+            parse::CountIsName(s, span) => {\n+                self.verify_arg_type(Named(s, span), Count);\n             }\n         }\n     }\n@@ -533,7 +533,7 @@ impl<'a, 'b> Context<'a, 'b> {\n                 }\n             }\n \n-            Named(name) => {\n+            Named(name, span) => {\n                 match self.names.get(&name) {\n                     Some(&idx) => {\n                         // Treat as positional arg.\n@@ -548,7 +548,7 @@ impl<'a, 'b> Context<'a, 'b> {\n                             self.arg_types.push(Vec::new());\n                             self.arg_unique_types.push(Vec::new());\n                             let span = if self.is_literal {\n-                                *self.arg_spans.get(self.curpiece).unwrap_or(&self.fmtsp)\n+                                self.fmtsp.from_inner(span)\n                             } else {\n                                 self.fmtsp\n                             };\n@@ -559,7 +559,7 @@ impl<'a, 'b> Context<'a, 'b> {\n                         } else {\n                             let msg = format!(\"there is no argument named `{}`\", name);\n                             let sp = if self.is_literal {\n-                                *self.arg_spans.get(self.curpiece).unwrap_or(&self.fmtsp)\n+                                self.fmtsp.from_inner(span)\n                             } else {\n                                 self.fmtsp\n                             };\n@@ -629,7 +629,7 @@ impl<'a, 'b> Context<'a, 'b> {\n             }\n             parse::CountImplied => count(sym::Implied, None),\n             // should never be the case, names are already resolved\n-            parse::CountIsName(_) => panic!(\"should never happen\"),\n+            parse::CountIsName(..) => panic!(\"should never happen\"),\n         }\n     }\n \n@@ -676,7 +676,7 @@ impl<'a, 'b> Context<'a, 'b> {\n \n                         // should never be the case, because names are already\n                         // resolved.\n-                        parse::ArgumentNamed(_) => panic!(\"should never happen\"),\n+                        parse::ArgumentNamed(..) => panic!(\"should never happen\"),\n                     }\n                 };\n "}, {"sha": "a6a2cbc277c208c98643d87fb80d82f202f703ad", "filename": "compiler/rustc_parse_format/src/lib.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/582b6964a8868c9714881d9821d08415a8f4f13b/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/582b6964a8868c9714881d9821d08415a8f4f13b/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs?ref=582b6964a8868c9714881d9821d08415a8f4f13b", "patch": "@@ -95,7 +95,7 @@ pub enum Position {\n     /// The argument is located at a specific index given in the format\n     ArgumentIs(usize),\n     /// The argument has a name.\n-    ArgumentNamed(Symbol),\n+    ArgumentNamed(Symbol, InnerSpan),\n }\n \n impl Position {\n@@ -147,7 +147,7 @@ pub enum Count {\n     /// The count is specified explicitly.\n     CountIs(usize),\n     /// The count is specified by the argument with the given name.\n-    CountIsName(Symbol),\n+    CountIsName(Symbol, InnerSpan),\n     /// The count is specified by the argument at the given index.\n     CountIsParam(usize),\n     /// The count is implied and cannot be explicitly specified.\n@@ -494,8 +494,11 @@ impl<'a> Parser<'a> {\n             Some(ArgumentIs(i))\n         } else {\n             match self.cur.peek() {\n-                Some(&(_, c)) if rustc_lexer::is_id_start(c) => {\n-                    Some(ArgumentNamed(Symbol::intern(self.word())))\n+                Some(&(start, c)) if rustc_lexer::is_id_start(c) => {\n+                    let word = self.word();\n+                    let end = start + word.len();\n+                    let span = self.to_span_index(start).to(self.to_span_index(end));\n+                    Some(ArgumentNamed(Symbol::intern(word), span))\n                 }\n \n                 // This is an `ArgumentNext`.\n@@ -662,8 +665,9 @@ impl<'a> Parser<'a> {\n             if word.is_empty() {\n                 self.cur = tmp;\n                 (CountImplied, None)\n-            } else if self.consume('$') {\n-                (CountIsName(Symbol::intern(word)), None)\n+            } else if let Some(end) = self.consume_pos('$') {\n+                let span = self.to_span_index(start + 1).to(self.to_span_index(end));\n+                (CountIsName(Symbol::intern(word), span), None)\n             } else {\n                 self.cur = tmp;\n                 (CountImplied, None)"}, {"sha": "6c960fdc72bfd583ab0ffd243829ef8da57103b3", "filename": "compiler/rustc_parse_format/src/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/582b6964a8868c9714881d9821d08415a8f4f13b/compiler%2Frustc_parse_format%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/582b6964a8868c9714881d9821d08415a8f4f13b/compiler%2Frustc_parse_format%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse_format%2Fsrc%2Ftests.rs?ref=582b6964a8868c9714881d9821d08415a8f4f13b", "patch": "@@ -221,8 +221,8 @@ fn format_counts() {\n                     fill: None,\n                     align: AlignUnknown,\n                     flags: 0,\n-                    precision: CountIsName(Symbol::intern(\"b\")),\n-                    width: CountIsName(Symbol::intern(\"a\")),\n+                    precision: CountIsName(Symbol::intern(\"b\"), InnerSpan::new(6, 7)),\n+                    width: CountIsName(Symbol::intern(\"a\"), InnerSpan::new(4, 4)),\n                     precision_span: None,\n                     width_span: None,\n                     ty: \"?\","}, {"sha": "b05dbbe898a41d7498f75d5242a341ad81776b80", "filename": "compiler/rustc_trait_selection/src/traits/on_unimplemented.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/582b6964a8868c9714881d9821d08415a8f4f13b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/582b6964a8868c9714881d9821d08415a8f4f13b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fon_unimplemented.rs?ref=582b6964a8868c9714881d9821d08415a8f4f13b", "patch": "@@ -309,23 +309,23 @@ impl<'tcx> OnUnimplementedFormatString {\n                 Piece::String(_) => (), // Normal string, no need to check it\n                 Piece::NextArgument(a) => match a.position {\n                     // `{Self}` is allowed\n-                    Position::ArgumentNamed(s) if s == kw::SelfUpper => (),\n+                    Position::ArgumentNamed(s, _) if s == kw::SelfUpper => (),\n                     // `{ThisTraitsName}` is allowed\n-                    Position::ArgumentNamed(s) if s == name => (),\n+                    Position::ArgumentNamed(s, _) if s == name => (),\n                     // `{from_method}` is allowed\n-                    Position::ArgumentNamed(s) if s == sym::from_method => (),\n+                    Position::ArgumentNamed(s, _) if s == sym::from_method => (),\n                     // `{from_desugaring}` is allowed\n-                    Position::ArgumentNamed(s) if s == sym::from_desugaring => (),\n+                    Position::ArgumentNamed(s, _) if s == sym::from_desugaring => (),\n                     // `{ItemContext}` is allowed\n-                    Position::ArgumentNamed(s) if s == sym::ItemContext => (),\n+                    Position::ArgumentNamed(s, _) if s == sym::ItemContext => (),\n                     // `{integral}` and `{integer}` and `{float}` are allowed\n-                    Position::ArgumentNamed(s)\n+                    Position::ArgumentNamed(s, _)\n                         if s == sym::integral || s == sym::integer_ || s == sym::float =>\n                     {\n                         ()\n                     }\n                     // So is `{A}` if A is a type parameter\n-                    Position::ArgumentNamed(s) => {\n+                    Position::ArgumentNamed(s, _) => {\n                         match generics.params.iter().find(|param| param.name == s) {\n                             Some(_) => (),\n                             None => {\n@@ -392,7 +392,7 @@ impl<'tcx> OnUnimplementedFormatString {\n             .map(|p| match p {\n                 Piece::String(s) => s,\n                 Piece::NextArgument(a) => match a.position {\n-                    Position::ArgumentNamed(s) => match generic_map.get(&s) {\n+                    Position::ArgumentNamed(s, _) => match generic_map.get(&s) {\n                         Some(val) => val,\n                         None if s == name => &trait_str,\n                         None => {"}, {"sha": "6dbda1005dd19ac54d4336a7c72804c0ddde7b7b", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/582b6964a8868c9714881d9821d08415a8f4f13b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/582b6964a8868c9714881d9821d08415a8f4f13b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=582b6964a8868c9714881d9821d08415a8f4f13b", "patch": "@@ -382,10 +382,15 @@ fn check_union_fields(tcx: TyCtxt<'_>, span: Span, item_def_id: LocalDefId) -> b\n                     tcx.sess,\n                     field_span,\n                     E0740,\n-                    \"unions may not contain fields that need dropping\"\n+                    \"unions cannot contain fields that may need dropping\"\n+                )\n+                .note(\n+                    \"a type is guaranteed not to need dropping \\\n+                    when it implements `Copy`, or when it is the special `ManuallyDrop<_>` type\",\n                 )\n                 .multipart_suggestion_verbose(\n-                    \"wrap the type with `std::mem::ManuallyDrop` and ensure it is manually dropped\",\n+                    \"when the type does not implement `Copy`, \\\n+                    wrap it inside a `ManuallyDrop<_>` and ensure it is manually dropped\",\n                     vec![\n                         (ty_span.shrink_to_lo(), format!(\"std::mem::ManuallyDrop<\")),\n                         (ty_span.shrink_to_hi(), \">\".into()),"}, {"sha": "a523ba286ec8401746cc25ec29546cb85965a4ac", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 41, "deletions": 13, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/582b6964a8868c9714881d9821d08415a8f4f13b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/582b6964a8868c9714881d9821d08415a8f4f13b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=582b6964a8868c9714881d9821d08415a8f4f13b", "patch": "@@ -9,8 +9,10 @@ use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::lang_items::LangItem;\n use rustc_hir::{ExprKind, Node, QPath};\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n+use rustc_middle::traits::util::supertraits;\n use rustc_middle::ty::fast_reject::{simplify_type, SimplifyParams};\n use rustc_middle::ty::print::with_crate_prefix;\n+use rustc_middle::ty::ToPolyTraitRef;\n use rustc_middle::ty::{self, DefIdTree, ToPredicate, Ty, TyCtxt, TypeFoldable};\n use rustc_span::lev_distance;\n use rustc_span::symbol::{kw, sym, Ident};\n@@ -40,7 +42,19 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     Err(..) => return false,\n                 };\n \n+                // This conditional prevents us from asking to call errors and unresolved types.\n+                // It might seem that we can use `predicate_must_hold_modulo_regions`,\n+                // but since a Dummy binder is used to fill in the FnOnce trait's arguments,\n+                // type resolution always gives a \"maybe\" here.\n+                if self.autoderef(span, ty).any(|(ty, _)| {\n+                    info!(\"check deref {:?} error\", ty);\n+                    matches!(ty.kind(), ty::Error(_) | ty::Infer(_))\n+                }) {\n+                    return false;\n+                }\n+\n                 self.autoderef(span, ty).any(|(ty, _)| {\n+                    info!(\"check deref {:?} impl FnOnce\", ty);\n                     self.probe(|_| {\n                         let fn_once_substs = tcx.mk_substs_trait(\n                             ty,\n@@ -1196,26 +1210,40 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 Some(adt) if adt.did.is_local() => adt,\n                 _ => continue,\n             };\n-            let can_derive = match self.tcx.get_diagnostic_name(trait_pred.def_id()) {\n-                Some(sym::Default) => !adt.is_enum(),\n-                Some(\n+            if let Some(diagnostic_name) = self.tcx.get_diagnostic_name(trait_pred.def_id()) {\n+                let can_derive = match diagnostic_name {\n+                    sym::Default => !adt.is_enum(),\n                     sym::Eq\n                     | sym::PartialEq\n                     | sym::Ord\n                     | sym::PartialOrd\n                     | sym::Clone\n                     | sym::Copy\n                     | sym::Hash\n-                    | sym::Debug,\n-                ) => true,\n-                _ => false,\n-            };\n-            if can_derive {\n-                derives.push((\n-                    format!(\"{}\", trait_pred.self_ty()),\n-                    self.tcx.def_span(adt.did),\n-                    format!(\"{}\", trait_pred.trait_ref.print_only_trait_name()),\n-                ));\n+                    | sym::Debug => true,\n+                    _ => false,\n+                };\n+                if can_derive {\n+                    let self_name = trait_pred.self_ty().to_string();\n+                    let self_span = self.tcx.def_span(adt.did);\n+                    if let Some(poly_trait_ref) = pred.to_opt_poly_trait_pred() {\n+                        for super_trait in supertraits(self.tcx, poly_trait_ref.to_poly_trait_ref())\n+                        {\n+                            if let Some(parent_diagnostic_name) =\n+                                self.tcx.get_diagnostic_name(super_trait.def_id())\n+                            {\n+                                derives.push((\n+                                    self_name.clone(),\n+                                    self_span.clone(),\n+                                    parent_diagnostic_name.to_string(),\n+                                ));\n+                            }\n+                        }\n+                    }\n+                    derives.push((self_name, self_span, diagnostic_name.to_string()));\n+                } else {\n+                    traits.push(self.tcx.def_span(trait_pred.def_id()));\n+                }\n             } else {\n                 traits.push(self.tcx.def_span(trait_pred.def_id()));\n             }"}, {"sha": "e034adde1be86e1887ed089e52ef7f6b5f9298da", "filename": "compiler/rustc_typeck/src/check/pat.rs", "status": "modified", "additions": 32, "deletions": 24, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/582b6964a8868c9714881d9821d08415a8f4f13b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/582b6964a8868c9714881d9821d08415a8f4f13b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs?ref=582b6964a8868c9714881d9821d08415a8f4f13b", "patch": "@@ -2029,34 +2029,42 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 err.help(\"the semantics of slice patterns changed recently; see issue #62254\");\n             }\n         } else if Autoderef::new(&self.infcx, self.param_env, self.body_id, span, expected_ty, span)\n-            .any(|(ty, _)| matches!(ty.kind(), ty::Slice(..)))\n+            .any(|(ty, _)| matches!(ty.kind(), ty::Slice(..) | ty::Array(..)))\n         {\n             if let (Some(span), true) = (ti.span, ti.origin_expr) {\n                 if let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(span) {\n-                    let applicability = match self.resolve_vars_if_possible(ti.expected).kind() {\n-                        ty::Adt(adt_def, _)\n-                            if self.tcx.is_diagnostic_item(sym::Option, adt_def.did)\n-                                || self.tcx.is_diagnostic_item(sym::Result, adt_def.did) =>\n-                        {\n-                            // Slicing won't work here, but `.as_deref()` might (issue #91328).\n-                            err.span_suggestion(\n-                                span,\n-                                \"consider using `as_deref` here\",\n-                                format!(\"{}.as_deref()\", snippet),\n-                                Applicability::MaybeIncorrect,\n-                            );\n-                            None\n-                        }\n-                        // FIXME: instead of checking for Vec only, we could check whether the\n-                        // type implements `Deref<Target=X>`; see\n-                        // https://github.com/rust-lang/rust/pull/91343#discussion_r761466979\n-                        ty::Adt(adt_def, _)\n-                            if self.tcx.is_diagnostic_item(sym::Vec, adt_def.did) =>\n-                        {\n-                            Some(Applicability::MachineApplicable)\n+                    let applicability = Autoderef::new(\n+                        &self.infcx,\n+                        self.param_env,\n+                        self.body_id,\n+                        span,\n+                        self.resolve_vars_if_possible(ti.expected),\n+                        span,\n+                    )\n+                    .find_map(|(ty, _)| {\n+                        match ty.kind() {\n+                            ty::Adt(adt_def, _)\n+                                if self.tcx.is_diagnostic_item(sym::Option, adt_def.did)\n+                                    || self.tcx.is_diagnostic_item(sym::Result, adt_def.did) =>\n+                            {\n+                                // Slicing won't work here, but `.as_deref()` might (issue #91328).\n+                                err.span_suggestion(\n+                                    span,\n+                                    \"consider using `as_deref` here\",\n+                                    format!(\"{}.as_deref()\", snippet),\n+                                    Applicability::MaybeIncorrect,\n+                                );\n+                                Some(None)\n+                            }\n+\n+                            ty::Slice(..) | ty::Array(..) => {\n+                                Some(Some(Applicability::MachineApplicable))\n+                            }\n+\n+                            _ => None,\n                         }\n-                        _ => Some(Applicability::MaybeIncorrect),\n-                    };\n+                    })\n+                    .unwrap_or(Some(Applicability::MaybeIncorrect));\n \n                     if let Some(applicability) = applicability {\n                         err.span_suggestion("}, {"sha": "67f5b386ecd7fd05a58f1baccabb51695e863853", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/582b6964a8868c9714881d9821d08415a8f4f13b/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/582b6964a8868c9714881d9821d08415a8f4f13b/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=582b6964a8868c9714881d9821d08415a8f4f13b", "patch": "@@ -2052,6 +2052,8 @@ where\n \n #[stable(feature = \"std_collections_from_array\", since = \"1.56.0\")]\n impl<K: Ord, V, const N: usize> From<[(K, V); N]> for BTreeMap<K, V> {\n+    /// Converts a `[(K, V); N]` into a `BTreeMap<(K, V)>`.\n+    ///\n     /// ```\n     /// use std::collections::BTreeMap;\n     ///"}, {"sha": "a4315be74e36c27bea4195f1d80574042e089a85", "filename": "library/alloc/src/collections/btree/set.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/582b6964a8868c9714881d9821d08415a8f4f13b/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/582b6964a8868c9714881d9821d08415a8f4f13b/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs?ref=582b6964a8868c9714881d9821d08415a8f4f13b", "patch": "@@ -1097,6 +1097,8 @@ impl<T: Ord> FromIterator<T> for BTreeSet<T> {\n \n #[stable(feature = \"std_collections_from_array\", since = \"1.56.0\")]\n impl<T: Ord, const N: usize> From<[T; N]> for BTreeSet<T> {\n+    /// Converts a `[T; N]` into a `BTreeSet<T>`.\n+    ///\n     /// ```\n     /// use std::collections::BTreeSet;\n     ///"}, {"sha": "d81f24e72024d5ea7688ca30fd44e5cbffb8386b", "filename": "library/alloc/src/collections/linked_list.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/582b6964a8868c9714881d9821d08415a8f4f13b/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/582b6964a8868c9714881d9821d08415a8f4f13b/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs?ref=582b6964a8868c9714881d9821d08415a8f4f13b", "patch": "@@ -1953,6 +1953,8 @@ impl<T: Hash> Hash for LinkedList<T> {\n \n #[stable(feature = \"std_collections_from_array\", since = \"1.56.0\")]\n impl<T, const N: usize> From<[T; N]> for LinkedList<T> {\n+    /// Converts a `[T; N]` into a `LinkedList<T>`.\n+    ///\n     /// ```\n     /// use std::collections::LinkedList;\n     ///"}, {"sha": "763175fc0451f07861189357e870bd8b91496e1b", "filename": "library/alloc/src/collections/vec_deque/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/582b6964a8868c9714881d9821d08415a8f4f13b/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/582b6964a8868c9714881d9821d08415a8f4f13b/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs?ref=582b6964a8868c9714881d9821d08415a8f4f13b", "patch": "@@ -3049,6 +3049,8 @@ impl<T, A: Allocator> From<VecDeque<T, A>> for Vec<T, A> {\n \n #[stable(feature = \"std_collections_from_array\", since = \"1.56.0\")]\n impl<T, const N: usize> From<[T; N]> for VecDeque<T> {\n+    /// Converts a `[T; N]` into a `VecDeque<T>`.\n+    ///\n     /// ```\n     /// use std::collections::VecDeque;\n     ///"}, {"sha": "3dc3eee4133b6413f2bfaa4b4059b06cb585b426", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/582b6964a8868c9714881d9821d08415a8f4f13b/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/582b6964a8868c9714881d9821d08415a8f4f13b/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=582b6964a8868c9714881d9821d08415a8f4f13b", "patch": "@@ -2906,17 +2906,18 @@ impl<T: Clone> From<&mut [T]> for Vec<T> {\n #[cfg(not(no_global_oom_handling))]\n #[stable(feature = \"vec_from_array\", since = \"1.44.0\")]\n impl<T, const N: usize> From<[T; N]> for Vec<T> {\n-    #[cfg(not(test))]\n-    fn from(s: [T; N]) -> Vec<T> {\n-        <[T]>::into_vec(box s)\n-    }\n     /// Allocate a `Vec<T>` and move `s`'s items into it.\n     ///\n     /// # Examples\n     ///\n     /// ```\n     /// assert_eq!(Vec::from([1, 2, 3]), vec![1, 2, 3]);\n     /// ```\n+    #[cfg(not(test))]\n+    fn from(s: [T; N]) -> Vec<T> {\n+        <[T]>::into_vec(box s)\n+    }\n+\n     #[cfg(test)]\n     fn from(s: [T; N]) -> Vec<T> {\n         crate::slice::into_vec(box s)"}, {"sha": "aef7ad77568036d29752182ea18a404ae1fc711b", "filename": "library/core/src/cell.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/582b6964a8868c9714881d9821d08415a8f4f13b/library%2Fcore%2Fsrc%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/582b6964a8868c9714881d9821d08415a8f4f13b/library%2Fcore%2Fsrc%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell.rs?ref=582b6964a8868c9714881d9821d08415a8f4f13b", "patch": "@@ -315,6 +315,7 @@ impl<T: Ord + Copy> Ord for Cell<T> {\n #[stable(feature = \"cell_from\", since = \"1.12.0\")]\n #[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n impl<T> const From<T> for Cell<T> {\n+    /// Creates a new `Cell<T>` containing the given value.\n     fn from(t: T) -> Cell<T> {\n         Cell::new(t)\n     }\n@@ -1244,6 +1245,7 @@ impl<T: ?Sized + Ord> Ord for RefCell<T> {\n #[stable(feature = \"cell_from\", since = \"1.12.0\")]\n #[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n impl<T> const From<T> for RefCell<T> {\n+    /// Creates a new `RefCell<T>` containing the given value.\n     fn from(t: T) -> RefCell<T> {\n         RefCell::new(t)\n     }\n@@ -1979,6 +1981,7 @@ impl<T: Default> Default for UnsafeCell<T> {\n #[stable(feature = \"cell_from\", since = \"1.12.0\")]\n #[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n impl<T> const From<T> for UnsafeCell<T> {\n+    /// Creates a new `UnsafeCell<T>` containing the given value.\n     fn from(t: T) -> UnsafeCell<T> {\n         UnsafeCell::new(t)\n     }"}, {"sha": "0ceedf936333d6d4659998664d0e0b89d6b8d168", "filename": "library/core/src/convert/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/582b6964a8868c9714881d9821d08415a8f4f13b/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/582b6964a8868c9714881d9821d08415a8f4f13b/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs?ref=582b6964a8868c9714881d9821d08415a8f4f13b", "patch": "@@ -538,6 +538,10 @@ impl<T, U> const Into<U> for T\n where\n     U: ~const From<T>,\n {\n+    /// Calls `U::from(self)`.\n+    ///\n+    /// That is, this conversion is whatever the implementation of\n+    /// <code>[From]&lt;T&gt; for U</code> chooses to do.\n     fn into(self) -> U {\n         U::from(self)\n     }\n@@ -547,6 +551,7 @@ where\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n impl<T> const From<T> for T {\n+    /// Returns the argument unchanged.\n     fn from(t: T) -> T {\n         t\n     }"}, {"sha": "88826782a3d607318a61348d4ad666b9392c830e", "filename": "library/core/src/lazy.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/582b6964a8868c9714881d9821d08415a8f4f13b/library%2Fcore%2Fsrc%2Flazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/582b6964a8868c9714881d9821d08415a8f4f13b/library%2Fcore%2Fsrc%2Flazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flazy.rs?ref=582b6964a8868c9714881d9821d08415a8f4f13b", "patch": "@@ -75,6 +75,7 @@ impl<T: Eq> Eq for OnceCell<T> {}\n \n #[unstable(feature = \"once_cell\", issue = \"74465\")]\n impl<T> const From<T> for OnceCell<T> {\n+    /// Creates a new `OnceCell<T>` which already contains the given `value`.\n     fn from(value: T) -> Self {\n         OnceCell { inner: UnsafeCell::new(Some(value)) }\n     }"}, {"sha": "0aa8e9960a8dd706db63cd1575f4a4ced3804880", "filename": "library/core/src/ptr/non_null.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/582b6964a8868c9714881d9821d08415a8f4f13b/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/582b6964a8868c9714881d9821d08415a8f4f13b/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs?ref=582b6964a8868c9714881d9821d08415a8f4f13b", "patch": "@@ -721,6 +721,9 @@ impl<T: ?Sized> const From<Unique<T>> for NonNull<T> {\n #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n #[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n impl<T: ?Sized> const From<&mut T> for NonNull<T> {\n+    /// Converts a `&mut T` to a `NonNull<T>`.\n+    ///\n+    /// This conversion is safe and infallible since references cannot be null.\n     #[inline]\n     fn from(reference: &mut T) -> Self {\n         // SAFETY: A mutable reference cannot be null.\n@@ -731,6 +734,9 @@ impl<T: ?Sized> const From<&mut T> for NonNull<T> {\n #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n #[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n impl<T: ?Sized> const From<&T> for NonNull<T> {\n+    /// Converts a `&T` to a `NonNull<T>`.\n+    ///\n+    /// This conversion is safe and infallible since references cannot be null.\n     #[inline]\n     fn from(reference: &T) -> Self {\n         // SAFETY: A reference cannot be null, so the conditions for"}, {"sha": "661d111c99d5294b7d7bf79db10aad7c5bb2b936", "filename": "library/core/src/ptr/unique.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/582b6964a8868c9714881d9821d08415a8f4f13b/library%2Fcore%2Fsrc%2Fptr%2Funique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/582b6964a8868c9714881d9821d08415a8f4f13b/library%2Fcore%2Fsrc%2Fptr%2Funique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Funique.rs?ref=582b6964a8868c9714881d9821d08415a8f4f13b", "patch": "@@ -178,6 +178,9 @@ impl<T: ?Sized> fmt::Pointer for Unique<T> {\n \n #[unstable(feature = \"ptr_internals\", issue = \"none\")]\n impl<T: ?Sized> const From<&mut T> for Unique<T> {\n+    /// Converts a `&mut T` to a `Unique<T>`.\n+    ///\n+    /// This conversion is infallible since references cannot be null.\n     #[inline]\n     fn from(reference: &mut T) -> Self {\n         // SAFETY: A mutable reference cannot be null"}, {"sha": "9ee88dd601493a03f910e583dd674801a0bf811c", "filename": "library/core/src/sync/atomic.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/582b6964a8868c9714881d9821d08415a8f4f13b/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/582b6964a8868c9714881d9821d08415a8f4f13b/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs?ref=582b6964a8868c9714881d9821d08415a8f4f13b", "patch": "@@ -1295,6 +1295,7 @@ impl const From<bool> for AtomicBool {\n #[stable(feature = \"atomic_from\", since = \"1.23.0\")]\n #[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n impl<T> const From<*mut T> for AtomicPtr<T> {\n+    /// Converts a `*mut T` into an `AtomicPtr<T>`.\n     #[inline]\n     fn from(p: *mut T) -> Self {\n         Self::new(p)"}, {"sha": "41f0a25dbc3e08daa688c5b6202ba987d468765a", "filename": "library/core/src/task/poll.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/582b6964a8868c9714881d9821d08415a8f4f13b/library%2Fcore%2Fsrc%2Ftask%2Fpoll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/582b6964a8868c9714881d9821d08415a8f4f13b/library%2Fcore%2Fsrc%2Ftask%2Fpoll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftask%2Fpoll.rs?ref=582b6964a8868c9714881d9821d08415a8f4f13b", "patch": "@@ -243,7 +243,7 @@ impl<T, E> Poll<Option<Result<T, E>>> {\n #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n #[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n impl<T> const From<T> for Poll<T> {\n-    /// Convert to a `Ready` variant.\n+    /// Moves the value into a [`Poll::Ready`] to make a `Poll<T>`.\n     ///\n     /// # Example\n     ///"}, {"sha": "6e70d5ca02d7532f48359ce5bc2cb98f129a294c", "filename": "library/std/src/ffi/c_str.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/582b6964a8868c9714881d9821d08415a8f4f13b/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/582b6964a8868c9714881d9821d08415a8f4f13b/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs?ref=582b6964a8868c9714881d9821d08415a8f4f13b", "patch": "@@ -871,6 +871,8 @@ impl Borrow<CStr> for CString {\n \n #[stable(feature = \"cstring_from_cow_cstr\", since = \"1.28.0\")]\n impl<'a> From<Cow<'a, CStr>> for CString {\n+    /// Converts a `Cow<'a, CStr>` into a `CString`, by copying the contents if they are\n+    /// borrowed.\n     #[inline]\n     fn from(s: Cow<'a, CStr>) -> Self {\n         s.into_owned()\n@@ -879,6 +881,8 @@ impl<'a> From<Cow<'a, CStr>> for CString {\n \n #[stable(feature = \"box_from_c_str\", since = \"1.17.0\")]\n impl From<&CStr> for Box<CStr> {\n+    /// Converts a `&CStr` into a `Box<CStr>`,\n+    /// by copying the contents into a newly allocated [`Box`].\n     fn from(s: &CStr) -> Box<CStr> {\n         let boxed: Box<[u8]> = Box::from(s.to_bytes_with_nul());\n         unsafe { Box::from_raw(Box::into_raw(boxed) as *mut CStr) }\n@@ -887,6 +891,8 @@ impl From<&CStr> for Box<CStr> {\n \n #[stable(feature = \"box_from_cow\", since = \"1.45.0\")]\n impl From<Cow<'_, CStr>> for Box<CStr> {\n+    /// Converts a `Cow<'a, CStr>` into a `Box<CStr>`,\n+    /// by copying the contents if they are borrowed.\n     #[inline]\n     fn from(cow: Cow<'_, CStr>) -> Box<CStr> {\n         match cow {\n@@ -984,6 +990,8 @@ impl From<CString> for Arc<CStr> {\n \n #[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]\n impl From<&CStr> for Arc<CStr> {\n+    /// Converts a `&CStr` into a `Arc<CStr>`,\n+    /// by copying the contents into a newly allocated [`Arc`].\n     #[inline]\n     fn from(s: &CStr) -> Arc<CStr> {\n         let arc: Arc<[u8]> = Arc::from(s.to_bytes_with_nul());\n@@ -1004,6 +1012,8 @@ impl From<CString> for Rc<CStr> {\n \n #[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]\n impl From<&CStr> for Rc<CStr> {\n+    /// Converts a `&CStr` into a `Rc<CStr>`,\n+    /// by copying the contents into a newly allocated [`Rc`].\n     #[inline]\n     fn from(s: &CStr) -> Rc<CStr> {\n         let rc: Rc<[u8]> = Rc::from(s.to_bytes_with_nul());\n@@ -1530,6 +1540,7 @@ impl ToOwned for CStr {\n \n #[stable(feature = \"cstring_asref\", since = \"1.7.0\")]\n impl From<&CStr> for CString {\n+    /// Copies the contents of the `&CStr` into a newly allocated `CString`.\n     fn from(s: &CStr) -> CString {\n         s.to_owned()\n     }"}, {"sha": "9b5e5d6c0cc4b1d377896ba1ba8d7dc444a2bfe3", "filename": "library/std/src/ffi/os_str.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/582b6964a8868c9714881d9821d08415a8f4f13b/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/582b6964a8868c9714881d9821d08415a8f4f13b/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs?ref=582b6964a8868c9714881d9821d08415a8f4f13b", "patch": "@@ -452,6 +452,8 @@ impl From<String> for OsString {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized + AsRef<OsStr>> From<&T> for OsString {\n+    /// Copies any value implementing <code>[AsRef]&lt;[OsStr]&gt;</code>\n+    /// into a newly allocated [`OsString`].\n     fn from(s: &T) -> OsString {\n         s.as_ref().to_os_string()\n     }\n@@ -942,6 +944,7 @@ impl OsStr {\n \n #[stable(feature = \"box_from_os_str\", since = \"1.17.0\")]\n impl From<&OsStr> for Box<OsStr> {\n+    /// Copies the string into a newly allocated <code>[Box]&lt;[OsStr]&gt;</code>.\n     #[inline]\n     fn from(s: &OsStr) -> Box<OsStr> {\n         let rw = Box::into_raw(s.inner.into_box()) as *mut OsStr;\n@@ -951,6 +954,8 @@ impl From<&OsStr> for Box<OsStr> {\n \n #[stable(feature = \"box_from_cow\", since = \"1.45.0\")]\n impl From<Cow<'_, OsStr>> for Box<OsStr> {\n+    /// Converts a `Cow<'a, OsStr>` into a <code>[Box]&lt;[OsStr]&gt;</code>,\n+    /// by copying the contents if they are borrowed.\n     #[inline]\n     fn from(cow: Cow<'_, OsStr>) -> Box<OsStr> {\n         match cow {\n@@ -1000,6 +1005,7 @@ impl From<OsString> for Arc<OsStr> {\n \n #[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]\n impl From<&OsStr> for Arc<OsStr> {\n+    /// Copies the string into a newly allocated <code>[Arc]&lt;[OsStr]&gt;</code>.\n     #[inline]\n     fn from(s: &OsStr) -> Arc<OsStr> {\n         let arc = s.inner.into_arc();\n@@ -1020,6 +1026,7 @@ impl From<OsString> for Rc<OsStr> {\n \n #[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]\n impl From<&OsStr> for Rc<OsStr> {\n+    /// Copies the string into a newly allocated <code>[Rc]&lt;[OsStr]&gt;</code>.\n     #[inline]\n     fn from(s: &OsStr) -> Rc<OsStr> {\n         let rc = s.inner.into_rc();\n@@ -1029,6 +1036,7 @@ impl From<&OsStr> for Rc<OsStr> {\n \n #[stable(feature = \"cow_from_osstr\", since = \"1.28.0\")]\n impl<'a> From<OsString> for Cow<'a, OsStr> {\n+    /// Moves the string into a [`Cow::Owned`].\n     #[inline]\n     fn from(s: OsString) -> Cow<'a, OsStr> {\n         Cow::Owned(s)\n@@ -1037,6 +1045,7 @@ impl<'a> From<OsString> for Cow<'a, OsStr> {\n \n #[stable(feature = \"cow_from_osstr\", since = \"1.28.0\")]\n impl<'a> From<&'a OsStr> for Cow<'a, OsStr> {\n+    /// Converts the string reference into a [`Cow::Borrowed`].\n     #[inline]\n     fn from(s: &'a OsStr) -> Cow<'a, OsStr> {\n         Cow::Borrowed(s)\n@@ -1045,6 +1054,7 @@ impl<'a> From<&'a OsStr> for Cow<'a, OsStr> {\n \n #[stable(feature = \"cow_from_osstr\", since = \"1.28.0\")]\n impl<'a> From<&'a OsString> for Cow<'a, OsStr> {\n+    /// Converts the string reference into a [`Cow::Borrowed`].\n     #[inline]\n     fn from(s: &'a OsString) -> Cow<'a, OsStr> {\n         Cow::Borrowed(s.as_os_str())\n@@ -1053,6 +1063,8 @@ impl<'a> From<&'a OsString> for Cow<'a, OsStr> {\n \n #[stable(feature = \"osstring_from_cow_osstr\", since = \"1.28.0\")]\n impl<'a> From<Cow<'a, OsStr>> for OsString {\n+    /// Converts a `Cow<'a, OsStr>` into an [`OsString`],\n+    /// by copying the contents if they are borrowed.\n     #[inline]\n     fn from(s: Cow<'a, OsStr>) -> Self {\n         s.into_owned()"}, {"sha": "adb8b30ec08930b0c7c8827e4f580e67c2576dee", "filename": "library/std/src/path.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/582b6964a8868c9714881d9821d08415a8f4f13b/library%2Fstd%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/582b6964a8868c9714881d9821d08415a8f4f13b/library%2Fstd%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpath.rs?ref=582b6964a8868c9714881d9821d08415a8f4f13b", "patch": "@@ -1600,7 +1600,7 @@ impl From<Cow<'_, Path>> for Box<Path> {\n \n #[stable(feature = \"path_buf_from_box\", since = \"1.18.0\")]\n impl From<Box<Path>> for PathBuf {\n-    /// Converts a `Box<Path>` into a `PathBuf`\n+    /// Converts a <code>[Box]&lt;[Path]&gt;</code> into a [`PathBuf`].\n     ///\n     /// This conversion does not allocate or copy memory.\n     #[inline]\n@@ -1611,7 +1611,7 @@ impl From<Box<Path>> for PathBuf {\n \n #[stable(feature = \"box_from_path_buf\", since = \"1.20.0\")]\n impl From<PathBuf> for Box<Path> {\n-    /// Converts a `PathBuf` into a `Box<Path>`\n+    /// Converts a [`PathBuf`] into a <code>[Box]&lt;[Path]&gt;</code>.\n     ///\n     /// This conversion currently should not allocate memory,\n     /// but this behavior is not guaranteed on all platforms or in all future versions.\n@@ -1631,7 +1631,7 @@ impl Clone for Box<Path> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized + AsRef<OsStr>> From<&T> for PathBuf {\n-    /// Converts a borrowed `OsStr` to a `PathBuf`.\n+    /// Converts a borrowed [`OsStr`] to a [`PathBuf`].\n     ///\n     /// Allocates a [`PathBuf`] and copies the data into it.\n     #[inline]"}, {"sha": "e3fff155e47224b6728fa5c355d4de98ca9acbe1", "filename": "library/std/src/process.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/582b6964a8868c9714881d9821d08415a8f4f13b/library%2Fstd%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/582b6964a8868c9714881d9821d08415a8f4f13b/library%2Fstd%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprocess.rs?ref=582b6964a8868c9714881d9821d08415a8f4f13b", "patch": "@@ -1277,7 +1277,7 @@ impl fmt::Debug for Stdio {\n \n #[stable(feature = \"stdio_from\", since = \"1.20.0\")]\n impl From<ChildStdin> for Stdio {\n-    /// Converts a `ChildStdin` into a `Stdio`\n+    /// Converts a [`ChildStdin`] into a [`Stdio`].\n     ///\n     /// # Examples\n     ///\n@@ -1306,7 +1306,7 @@ impl From<ChildStdin> for Stdio {\n \n #[stable(feature = \"stdio_from\", since = \"1.20.0\")]\n impl From<ChildStdout> for Stdio {\n-    /// Converts a `ChildStdout` into a `Stdio`\n+    /// Converts a [`ChildStdout`] into a [`Stdio`].\n     ///\n     /// # Examples\n     ///\n@@ -1335,7 +1335,7 @@ impl From<ChildStdout> for Stdio {\n \n #[stable(feature = \"stdio_from\", since = \"1.20.0\")]\n impl From<ChildStderr> for Stdio {\n-    /// Converts a `ChildStderr` into a `Stdio`\n+    /// Converts a [`ChildStderr`] into a [`Stdio`].\n     ///\n     /// # Examples\n     ///\n@@ -1366,7 +1366,7 @@ impl From<ChildStderr> for Stdio {\n \n #[stable(feature = \"stdio_from\", since = \"1.20.0\")]\n impl From<fs::File> for Stdio {\n-    /// Converts a `File` into a `Stdio`\n+    /// Converts a [`File`](fs::File) into a [`Stdio`].\n     ///\n     /// # Examples\n     ///"}, {"sha": "b39701a3d428828bf0cb7453553bdbdee6d9fec8", "filename": "library/test/src/cli.rs", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/582b6964a8868c9714881d9821d08415a8f4f13b/library%2Ftest%2Fsrc%2Fcli.rs", "raw_url": "https://github.com/rust-lang/rust/raw/582b6964a8868c9714881d9821d08415a8f4f13b/library%2Ftest%2Fsrc%2Fcli.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fcli.rs?ref=582b6964a8868c9714881d9821d08415a8f4f13b", "patch": "@@ -109,12 +109,10 @@ fn optgroups() -> getopts::Options {\n             unstable-options = Allow use of experimental features\",\n             \"unstable-options\",\n         )\n-        .optflagopt(\n+        .optflag(\n             \"\",\n             \"report-time\",\n-            \"Show execution time of each test. Available values:\n-            plain   = do not colorize the execution time (default);\n-            colored = colorize output according to the `color` parameter value;\n+            \"Show execution time of each test.\n \n             Threshold values for colorized output can be configured via\n             `RUST_TEST_TIME_UNIT`, `RUST_TEST_TIME_INTEGRATION` and\n@@ -125,7 +123,6 @@ fn optgroups() -> getopts::Options {\n             is 0.5 seconds, and the critical time is 2 seconds.\n \n             Not available for --format=terse\",\n-            \"plain|colored\",\n         )\n         .optflag(\n             \"\",\n@@ -319,17 +316,12 @@ fn get_time_options(\n     allow_unstable: bool,\n ) -> OptPartRes<Option<TestTimeOptions>> {\n     let report_time = unstable_optflag!(matches, allow_unstable, \"report-time\");\n-    let colored_opt_str = matches.opt_str(\"report-time\");\n-    let mut report_time_colored = report_time && colored_opt_str == Some(\"colored\".into());\n     let ensure_test_time = unstable_optflag!(matches, allow_unstable, \"ensure-time\");\n \n     // If `ensure-test-time` option is provided, time output is enforced,\n     // so user won't be confused if any of tests will silently fail.\n     let options = if report_time || ensure_test_time {\n-        if ensure_test_time && !report_time {\n-            report_time_colored = true;\n-        }\n-        Some(TestTimeOptions::new_from_env(ensure_test_time, report_time_colored))\n+        Some(TestTimeOptions::new_from_env(ensure_test_time))\n     } else {\n         None\n     };"}, {"sha": "041df5216d7b307c5385a30f25b9963ca3290fb5", "filename": "library/test/src/formatters/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/582b6964a8868c9714881d9821d08415a8f4f13b/library%2Ftest%2Fsrc%2Fformatters%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/582b6964a8868c9714881d9821d08415a8f4f13b/library%2Ftest%2Fsrc%2Fformatters%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fformatters%2Fpretty.rs?ref=582b6964a8868c9714881d9821d08415a8f4f13b", "patch": "@@ -98,7 +98,7 @@ impl<T: Write> PrettyFormatter<T> {\n         if let (Some(opts), Some(time)) = (self.time_options, exec_time) {\n             let time_str = format!(\" <{}>\", time);\n \n-            let color = if opts.colored {\n+            let color = if self.use_color {\n                 if opts.is_critical(desc, time) {\n                     Some(term::color::RED)\n                 } else if opts.is_warn(desc, time) {"}, {"sha": "d566dbc09f434bfd09f6318bffc287ae58b6736e", "filename": "library/test/src/tests.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/582b6964a8868c9714881d9821d08415a8f4f13b/library%2Ftest%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/582b6964a8868c9714881d9821d08415a8f4f13b/library%2Ftest%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Ftests.rs?ref=582b6964a8868c9714881d9821d08415a8f4f13b", "patch": "@@ -394,7 +394,6 @@ fn test_time_options_threshold() {\n \n     let options = TestTimeOptions {\n         error_on_excess: false,\n-        colored: false,\n         unit_threshold: unit.clone(),\n         integration_threshold: integration.clone(),\n         doctest_threshold: doc.clone(),"}, {"sha": "8c64e5d1b733944b6b41257ec767e73556d1e97d", "filename": "library/test/src/time.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/582b6964a8868c9714881d9821d08415a8f4f13b/library%2Ftest%2Fsrc%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/582b6964a8868c9714881d9821d08415a8f4f13b/library%2Ftest%2Fsrc%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Ftime.rs?ref=582b6964a8868c9714881d9821d08415a8f4f13b", "patch": "@@ -137,14 +137,13 @@ pub struct TestTimeOptions {\n     /// Denotes if the test critical execution time limit excess should be considered\n     /// a test failure.\n     pub error_on_excess: bool,\n-    pub colored: bool,\n     pub unit_threshold: TimeThreshold,\n     pub integration_threshold: TimeThreshold,\n     pub doctest_threshold: TimeThreshold,\n }\n \n impl TestTimeOptions {\n-    pub fn new_from_env(error_on_excess: bool, colored: bool) -> Self {\n+    pub fn new_from_env(error_on_excess: bool) -> Self {\n         let unit_threshold = TimeThreshold::from_env_var(time_constants::UNIT_ENV_NAME)\n             .unwrap_or_else(Self::default_unit);\n \n@@ -155,7 +154,7 @@ impl TestTimeOptions {\n         let doctest_threshold = TimeThreshold::from_env_var(time_constants::DOCTEST_ENV_NAME)\n             .unwrap_or_else(Self::default_doctest);\n \n-        Self { error_on_excess, colored, unit_threshold, integration_threshold, doctest_threshold }\n+        Self { error_on_excess, unit_threshold, integration_threshold, doctest_threshold }\n     }\n \n     pub fn is_warn(&self, test: &TestDesc, exec_time: &TestExecTime) -> bool {"}, {"sha": "51645a81853fdf03cf6fa8e89c3bb2f9b8e7202c", "filename": "src/ci/docker/host-x86_64/dist-x86_64-musl/Dockerfile", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/582b6964a8868c9714881d9821d08415a8f4f13b/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-x86_64-musl%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/582b6964a8868c9714881d9821d08415a8f4f13b/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-x86_64-musl%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-x86_64-musl%2FDockerfile?ref=582b6964a8868c9714881d9821d08415a8f4f13b", "patch": "@@ -1,6 +1,6 @@\n-FROM ubuntu:16.04\n+FROM ubuntu:20.04\n \n-RUN apt-get update && apt-get install -y --no-install-recommends \\\n+RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \\\n   g++ \\\n   make \\\n   ninja-build \\"}, {"sha": "0e0eb85db746a33d8368ec7603ca35dd912189b8", "filename": "src/doc/rustc/src/tests/index.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/582b6964a8868c9714881d9821d08415a8f4f13b/src%2Fdoc%2Frustc%2Fsrc%2Ftests%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/582b6964a8868c9714881d9821d08415a8f4f13b/src%2Fdoc%2Frustc%2Fsrc%2Ftests%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Ftests%2Findex.md?ref=582b6964a8868c9714881d9821d08415a8f4f13b", "patch": "@@ -267,7 +267,7 @@ Controls the format of the output. Valid options:\n \n Writes the results of the tests to the given file.\n \n-#### `--report-time` _FORMAT_\n+#### `--report-time`\n \n \u26a0\ufe0f \ud83d\udea7 This option is [unstable](#unstable-options), and requires the `-Z\n unstable-options` flag. See [tracking issue"}, {"sha": "9e6a1fb000575f8316c78c937fb69c666b40e04d", "filename": "src/doc/unstable-book/src/compiler-flags/report-time.md", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/582b6964a8868c9714881d9821d08415a8f4f13b/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Freport-time.md", "raw_url": "https://github.com/rust-lang/rust/raw/582b6964a8868c9714881d9821d08415a8f4f13b/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Freport-time.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Freport-time.md?ref=582b6964a8868c9714881d9821d08415a8f4f13b", "patch": "@@ -21,11 +21,8 @@ Sample usage command:\n Available options:\n \n ```sh\n---report-time [plain|colored]\n-                Show execution time of each test. Available values:\n-                plain = do not colorize the execution time (default);\n-                colored = colorize output according to the `color`\n-                parameter value;\n+--report-time\n+                Show execution time of each test.\n                 Threshold values for colorized output can be\n                 configured via\n                 `RUST_TEST_TIME_UNIT`, `RUST_TEST_TIME_INTEGRATION`"}, {"sha": "11c4e01f4186d8a8371cfb88b36df2382f230bd2", "filename": "src/test/ui/asm/bad-template.aarch64_mirunsafeck.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/582b6964a8868c9714881d9821d08415a8f4f13b/src%2Ftest%2Fui%2Fasm%2Fbad-template.aarch64_mirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/582b6964a8868c9714881d9821d08415a8f4f13b/src%2Ftest%2Fui%2Fasm%2Fbad-template.aarch64_mirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fbad-template.aarch64_mirunsafeck.stderr?ref=582b6964a8868c9714881d9821d08415a8f4f13b", "patch": "@@ -23,10 +23,10 @@ LL |         asm!(\"{1}\", in(reg) foo);\n    = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {0} */\"`\n \n error: there is no argument named `a`\n-  --> $DIR/bad-template.rs:36:15\n+  --> $DIR/bad-template.rs:36:16\n    |\n LL |         asm!(\"{a}\");\n-   |               ^^^\n+   |                ^\n \n error: invalid reference to argument at index 0\n   --> $DIR/bad-template.rs:38:15\n@@ -123,10 +123,10 @@ LL | global_asm!(\"{1}\", const FOO);\n    = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {0} */\"`\n \n error: there is no argument named `a`\n-  --> $DIR/bad-template.rs:63:14\n+  --> $DIR/bad-template.rs:63:15\n    |\n LL | global_asm!(\"{a}\");\n-   |              ^^^\n+   |               ^\n \n error: invalid reference to argument at index 0\n   --> $DIR/bad-template.rs:65:14"}, {"sha": "11c4e01f4186d8a8371cfb88b36df2382f230bd2", "filename": "src/test/ui/asm/bad-template.aarch64_thirunsafeck.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/582b6964a8868c9714881d9821d08415a8f4f13b/src%2Ftest%2Fui%2Fasm%2Fbad-template.aarch64_thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/582b6964a8868c9714881d9821d08415a8f4f13b/src%2Ftest%2Fui%2Fasm%2Fbad-template.aarch64_thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fbad-template.aarch64_thirunsafeck.stderr?ref=582b6964a8868c9714881d9821d08415a8f4f13b", "patch": "@@ -23,10 +23,10 @@ LL |         asm!(\"{1}\", in(reg) foo);\n    = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {0} */\"`\n \n error: there is no argument named `a`\n-  --> $DIR/bad-template.rs:36:15\n+  --> $DIR/bad-template.rs:36:16\n    |\n LL |         asm!(\"{a}\");\n-   |               ^^^\n+   |                ^\n \n error: invalid reference to argument at index 0\n   --> $DIR/bad-template.rs:38:15\n@@ -123,10 +123,10 @@ LL | global_asm!(\"{1}\", const FOO);\n    = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {0} */\"`\n \n error: there is no argument named `a`\n-  --> $DIR/bad-template.rs:63:14\n+  --> $DIR/bad-template.rs:63:15\n    |\n LL | global_asm!(\"{a}\");\n-   |              ^^^\n+   |               ^\n \n error: invalid reference to argument at index 0\n   --> $DIR/bad-template.rs:65:14"}, {"sha": "c198e0a69dde18049c4e42121cf37e28e22a771d", "filename": "src/test/ui/asm/bad-template.x86_64_mirunsafeck.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/582b6964a8868c9714881d9821d08415a8f4f13b/src%2Ftest%2Fui%2Fasm%2Fbad-template.x86_64_mirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/582b6964a8868c9714881d9821d08415a8f4f13b/src%2Ftest%2Fui%2Fasm%2Fbad-template.x86_64_mirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fbad-template.x86_64_mirunsafeck.stderr?ref=582b6964a8868c9714881d9821d08415a8f4f13b", "patch": "@@ -23,10 +23,10 @@ LL |         asm!(\"{1}\", in(reg) foo);\n    = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {0} */\"`\n \n error: there is no argument named `a`\n-  --> $DIR/bad-template.rs:36:15\n+  --> $DIR/bad-template.rs:36:16\n    |\n LL |         asm!(\"{a}\");\n-   |               ^^^\n+   |                ^\n \n error: invalid reference to argument at index 0\n   --> $DIR/bad-template.rs:38:15\n@@ -123,10 +123,10 @@ LL | global_asm!(\"{1}\", const FOO);\n    = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {0} */\"`\n \n error: there is no argument named `a`\n-  --> $DIR/bad-template.rs:63:14\n+  --> $DIR/bad-template.rs:63:15\n    |\n LL | global_asm!(\"{a}\");\n-   |              ^^^\n+   |               ^\n \n error: invalid reference to argument at index 0\n   --> $DIR/bad-template.rs:65:14"}, {"sha": "c198e0a69dde18049c4e42121cf37e28e22a771d", "filename": "src/test/ui/asm/bad-template.x86_64_thirunsafeck.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/582b6964a8868c9714881d9821d08415a8f4f13b/src%2Ftest%2Fui%2Fasm%2Fbad-template.x86_64_thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/582b6964a8868c9714881d9821d08415a8f4f13b/src%2Ftest%2Fui%2Fasm%2Fbad-template.x86_64_thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fbad-template.x86_64_thirunsafeck.stderr?ref=582b6964a8868c9714881d9821d08415a8f4f13b", "patch": "@@ -23,10 +23,10 @@ LL |         asm!(\"{1}\", in(reg) foo);\n    = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {0} */\"`\n \n error: there is no argument named `a`\n-  --> $DIR/bad-template.rs:36:15\n+  --> $DIR/bad-template.rs:36:16\n    |\n LL |         asm!(\"{a}\");\n-   |               ^^^\n+   |                ^\n \n error: invalid reference to argument at index 0\n   --> $DIR/bad-template.rs:38:15\n@@ -123,10 +123,10 @@ LL | global_asm!(\"{1}\", const FOO);\n    = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {0} */\"`\n \n error: there is no argument named `a`\n-  --> $DIR/bad-template.rs:63:14\n+  --> $DIR/bad-template.rs:63:15\n    |\n LL | global_asm!(\"{a}\");\n-   |              ^^^\n+   |               ^\n \n error: invalid reference to argument at index 0\n   --> $DIR/bad-template.rs:65:14"}, {"sha": "1875ea06a06d5adf1f83b98c059b94a4a8d46f43", "filename": "src/test/ui/binop/issue-28837.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/582b6964a8868c9714881d9821d08415a8f4f13b/src%2Ftest%2Fui%2Fbinop%2Fissue-28837.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/582b6964a8868c9714881d9821d08415a8f4f13b/src%2Ftest%2Fui%2Fbinop%2Fissue-28837.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fissue-28837.stderr?ref=582b6964a8868c9714881d9821d08415a8f4f13b", "patch": "@@ -272,9 +272,9 @@ note: an implementation of `PartialOrd<_>` might be missing for `A`\n    |\n LL | struct A;\n    | ^^^^^^^^^ must implement `PartialOrd<_>`\n-help: consider annotating `A` with `#[derive(PartialOrd)]`\n+help: consider annotating `A` with `#[derive(PartialEq, PartialOrd)]`\n    |\n-LL | #[derive(PartialOrd)]\n+LL | #[derive(PartialEq, PartialOrd)]\n    |\n \n error[E0369]: binary operation `<=` cannot be applied to type `A`\n@@ -290,9 +290,9 @@ note: an implementation of `PartialOrd<_>` might be missing for `A`\n    |\n LL | struct A;\n    | ^^^^^^^^^ must implement `PartialOrd<_>`\n-help: consider annotating `A` with `#[derive(PartialOrd)]`\n+help: consider annotating `A` with `#[derive(PartialEq, PartialOrd)]`\n    |\n-LL | #[derive(PartialOrd)]\n+LL | #[derive(PartialEq, PartialOrd)]\n    |\n \n error[E0369]: binary operation `>` cannot be applied to type `A`\n@@ -308,9 +308,9 @@ note: an implementation of `PartialOrd<_>` might be missing for `A`\n    |\n LL | struct A;\n    | ^^^^^^^^^ must implement `PartialOrd<_>`\n-help: consider annotating `A` with `#[derive(PartialOrd)]`\n+help: consider annotating `A` with `#[derive(PartialEq, PartialOrd)]`\n    |\n-LL | #[derive(PartialOrd)]\n+LL | #[derive(PartialEq, PartialOrd)]\n    |\n \n error[E0369]: binary operation `>=` cannot be applied to type `A`\n@@ -326,9 +326,9 @@ note: an implementation of `PartialOrd<_>` might be missing for `A`\n    |\n LL | struct A;\n    | ^^^^^^^^^ must implement `PartialOrd<_>`\n-help: consider annotating `A` with `#[derive(PartialOrd)]`\n+help: consider annotating `A` with `#[derive(PartialEq, PartialOrd)]`\n    |\n-LL | #[derive(PartialOrd)]\n+LL | #[derive(PartialEq, PartialOrd)]\n    |\n \n error: aborting due to 15 previous errors"}, {"sha": "56fd5ffa89eea4080af1e38377f57702ae1885cd", "filename": "src/test/ui/derives/issue-91550.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/582b6964a8868c9714881d9821d08415a8f4f13b/src%2Ftest%2Fui%2Fderives%2Fissue-91550.rs", "raw_url": "https://github.com/rust-lang/rust/raw/582b6964a8868c9714881d9821d08415a8f4f13b/src%2Ftest%2Fui%2Fderives%2Fissue-91550.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fissue-91550.rs?ref=582b6964a8868c9714881d9821d08415a8f4f13b", "patch": "@@ -0,0 +1,29 @@\n+use std::collections::HashSet;\n+\n+/// natural case from the issue\n+struct Value(u32);\n+\n+fn main() {\n+    let hs = HashSet::<Value>::new();\n+    hs.insert(Value(0)); //~ ERROR\n+}\n+\n+/// synthetic cases\n+pub struct NoDerives;\n+\n+struct Object<T>(T);\n+impl<T: Eq> Object<T> {\n+    fn use_eq(&self) {}\n+}\n+impl<T: Ord> Object<T> {\n+    fn use_ord(&self) {}\n+}\n+impl<T: Ord + PartialOrd> Object<T> {\n+    fn use_ord_and_partial_ord(&self) {}\n+}\n+\n+fn function(foo: Object<NoDerives>) {\n+    foo.use_eq(); //~ ERROR\n+    foo.use_ord(); //~ ERROR\n+    foo.use_ord_and_partial_ord(); //~ ERROR\n+}"}, {"sha": "bf4b7c7da0d50b319271bd7f3dfb7f65c7e34ef0", "filename": "src/test/ui/derives/issue-91550.stderr", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/582b6964a8868c9714881d9821d08415a8f4f13b/src%2Ftest%2Fui%2Fderives%2Fissue-91550.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/582b6964a8868c9714881d9821d08415a8f4f13b/src%2Ftest%2Fui%2Fderives%2Fissue-91550.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fissue-91550.stderr?ref=582b6964a8868c9714881d9821d08415a8f4f13b", "patch": "@@ -0,0 +1,84 @@\n+error[E0599]: the method `insert` exists for struct `HashSet<Value>`, but its trait bounds were not satisfied\n+  --> $DIR/issue-91550.rs:8:8\n+   |\n+LL | struct Value(u32);\n+   | ------------------\n+   | |\n+   | doesn't satisfy `Value: Eq`\n+   | doesn't satisfy `Value: Hash`\n+...\n+LL |     hs.insert(Value(0));\n+   |        ^^^^^^ method cannot be called on `HashSet<Value>` due to unsatisfied trait bounds\n+   |\n+   = note: the following trait bounds were not satisfied:\n+           `Value: Eq`\n+           `Value: Hash`\n+help: consider annotating `Value` with `#[derive(Eq, Hash, PartialEq)]`\n+   |\n+LL | #[derive(Eq, Hash, PartialEq)]\n+   |\n+\n+error[E0599]: the method `use_eq` exists for struct `Object<NoDerives>`, but its trait bounds were not satisfied\n+  --> $DIR/issue-91550.rs:26:9\n+   |\n+LL | pub struct NoDerives;\n+   | --------------------- doesn't satisfy `NoDerives: Eq`\n+LL | \n+LL | struct Object<T>(T);\n+   | -------------------- method `use_eq` not found for this\n+...\n+LL |     foo.use_eq();\n+   |         ^^^^^^ method cannot be called on `Object<NoDerives>` due to unsatisfied trait bounds\n+   |\n+   = note: the following trait bounds were not satisfied:\n+           `NoDerives: Eq`\n+help: consider annotating `NoDerives` with `#[derive(Eq, PartialEq)]`\n+   |\n+LL | #[derive(Eq, PartialEq)]\n+   |\n+\n+error[E0599]: the method `use_ord` exists for struct `Object<NoDerives>`, but its trait bounds were not satisfied\n+  --> $DIR/issue-91550.rs:27:9\n+   |\n+LL | pub struct NoDerives;\n+   | --------------------- doesn't satisfy `NoDerives: Ord`\n+LL | \n+LL | struct Object<T>(T);\n+   | -------------------- method `use_ord` not found for this\n+...\n+LL |     foo.use_ord();\n+   |         ^^^^^^^ method cannot be called on `Object<NoDerives>` due to unsatisfied trait bounds\n+   |\n+   = note: the following trait bounds were not satisfied:\n+           `NoDerives: Ord`\n+help: consider annotating `NoDerives` with `#[derive(Eq, Ord, PartialEq, PartialOrd)]`\n+   |\n+LL | #[derive(Eq, Ord, PartialEq, PartialOrd)]\n+   |\n+\n+error[E0599]: the method `use_ord_and_partial_ord` exists for struct `Object<NoDerives>`, but its trait bounds were not satisfied\n+  --> $DIR/issue-91550.rs:28:9\n+   |\n+LL | pub struct NoDerives;\n+   | ---------------------\n+   | |\n+   | doesn't satisfy `NoDerives: Ord`\n+   | doesn't satisfy `NoDerives: PartialOrd`\n+LL | \n+LL | struct Object<T>(T);\n+   | -------------------- method `use_ord_and_partial_ord` not found for this\n+...\n+LL |     foo.use_ord_and_partial_ord();\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^ method cannot be called on `Object<NoDerives>` due to unsatisfied trait bounds\n+   |\n+   = note: the following trait bounds were not satisfied:\n+           `NoDerives: Ord`\n+           `NoDerives: PartialOrd`\n+help: consider annotating `NoDerives` with `#[derive(Eq, Ord, PartialEq, PartialOrd)]`\n+   |\n+LL | #[derive(Eq, Ord, PartialEq, PartialOrd)]\n+   |\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0599`."}, {"sha": "af8d8e92b20bdca8d3292a55f7f34104f18133c2", "filename": "src/test/ui/feature-gates/feature-gate-untagged_unions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/582b6964a8868c9714881d9821d08415a8f4f13b/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-untagged_unions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/582b6964a8868c9714881d9821d08415a8f4f13b/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-untagged_unions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-untagged_unions.rs?ref=582b6964a8868c9714881d9821d08415a8f4f13b", "patch": "@@ -13,15 +13,15 @@ union U22<T> { // OK\n }\n \n union U3 {\n-    a: String, //~ ERROR unions may not contain fields that need dropping\n+    a: String, //~ ERROR unions cannot contain fields that may need dropping\n }\n \n union U32 { // field that does not drop but is not `Copy`, either -- this is the real feature gate test!\n     a: std::cell::RefCell<i32>, //~ ERROR unions with non-`Copy` fields other than `ManuallyDrop<T>` are unstable\n }\n \n union U4<T> {\n-    a: T, //~ ERROR unions may not contain fields that need dropping\n+    a: T, //~ ERROR unions cannot contain fields that may need dropping\n }\n \n union U5 { // Having a drop impl is OK"}, {"sha": "9e4a89f80c852976fa3c6d9c2736c24574e160ab", "filename": "src/test/ui/feature-gates/feature-gate-untagged_unions.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/582b6964a8868c9714881d9821d08415a8f4f13b/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-untagged_unions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/582b6964a8868c9714881d9821d08415a8f4f13b/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-untagged_unions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-untagged_unions.stderr?ref=582b6964a8868c9714881d9821d08415a8f4f13b", "patch": "@@ -7,24 +7,26 @@ LL |     a: std::cell::RefCell<i32>,\n    = note: see issue #55149 <https://github.com/rust-lang/rust/issues/55149> for more information\n    = help: add `#![feature(untagged_unions)]` to the crate attributes to enable\n \n-error[E0740]: unions may not contain fields that need dropping\n+error[E0740]: unions cannot contain fields that may need dropping\n   --> $DIR/feature-gate-untagged_unions.rs:16:5\n    |\n LL |     a: String,\n    |     ^^^^^^^^^\n    |\n-help: wrap the type with `std::mem::ManuallyDrop` and ensure it is manually dropped\n+   = note: a type is guaranteed not to need dropping when it implements `Copy`, or when it is the special `ManuallyDrop<_>` type\n+help: when the type does not implement `Copy`, wrap it inside a `ManuallyDrop<_>` and ensure it is manually dropped\n    |\n LL |     a: std::mem::ManuallyDrop<String>,\n    |        +++++++++++++++++++++++      +\n \n-error[E0740]: unions may not contain fields that need dropping\n+error[E0740]: unions cannot contain fields that may need dropping\n   --> $DIR/feature-gate-untagged_unions.rs:24:5\n    |\n LL |     a: T,\n    |     ^^^^\n    |\n-help: wrap the type with `std::mem::ManuallyDrop` and ensure it is manually dropped\n+   = note: a type is guaranteed not to need dropping when it implements `Copy`, or when it is the special `ManuallyDrop<_>` type\n+help: when the type does not implement `Copy`, wrap it inside a `ManuallyDrop<_>` and ensure it is manually dropped\n    |\n LL |     a: std::mem::ManuallyDrop<T>,\n    |        +++++++++++++++++++++++ +"}, {"sha": "b8e2b2afb38674d6f42f7cbb1936dd11100fe673", "filename": "src/test/ui/fmt/format-args-capture-issue-93378.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/582b6964a8868c9714881d9821d08415a8f4f13b/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture-issue-93378.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/582b6964a8868c9714881d9821d08415a8f4f13b/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture-issue-93378.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture-issue-93378.stderr?ref=582b6964a8868c9714881d9821d08415a8f4f13b", "patch": "@@ -10,10 +10,10 @@ error: invalid reference to positional argument 0 (no arguments were given)\n   --> $DIR/format-args-capture-issue-93378.rs:9:23\n    |\n LL |     println!(\"{a:.n$} {b:.*}\");\n-   |               ------- ^^^--^\n-   |               |          |\n-   |               |          this precision flag adds an extra required argument at position 0, which is why there are 3 arguments expected\n-   |               this parameter corresponds to the precision flag\n+   |                   -   ^^^--^\n+   |                   |      |\n+   |                   |      this precision flag adds an extra required argument at position 0, which is why there are 3 arguments expected\n+   |                   this parameter corresponds to the precision flag\n    |\n    = note: positional arguments are zero-based\n    = note: for information about formatting flags, visit https://doc.rust-lang.org/std/fmt/index.html"}, {"sha": "bd03e9c93ae2a801187a75710abe22e29bb064bb", "filename": "src/test/ui/fmt/format-args-capture-issue-94010.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/582b6964a8868c9714881d9821d08415a8f4f13b/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture-issue-94010.rs", "raw_url": "https://github.com/rust-lang/rust/raw/582b6964a8868c9714881d9821d08415a8f4f13b/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture-issue-94010.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture-issue-94010.rs?ref=582b6964a8868c9714881d9821d08415a8f4f13b", "patch": "@@ -0,0 +1,7 @@\n+fn main() {\n+    const FOO: i32 = 123;\n+    println!(\"{foo:X}\");\n+    //~^ ERROR: cannot find value `foo` in this scope\n+    println!(\"{:.foo$}\", 0);\n+    //~^ ERROR: cannot find value `foo` in this scope\n+}"}, {"sha": "ed90dc855360ac18a3656b94296c4dc16e3aef50", "filename": "src/test/ui/fmt/format-args-capture-issue-94010.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/582b6964a8868c9714881d9821d08415a8f4f13b/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture-issue-94010.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/582b6964a8868c9714881d9821d08415a8f4f13b/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture-issue-94010.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture-issue-94010.stderr?ref=582b6964a8868c9714881d9821d08415a8f4f13b", "patch": "@@ -0,0 +1,20 @@\n+error[E0425]: cannot find value `foo` in this scope\n+  --> $DIR/format-args-capture-issue-94010.rs:3:16\n+   |\n+LL |     const FOO: i32 = 123;\n+   |     --------------------- similarly named constant `FOO` defined here\n+LL |     println!(\"{foo:X}\");\n+   |                ^^^ help: a constant with a similar name exists (notice the capitalization): `FOO`\n+\n+error[E0425]: cannot find value `foo` in this scope\n+  --> $DIR/format-args-capture-issue-94010.rs:5:18\n+   |\n+LL |     const FOO: i32 = 123;\n+   |     --------------------- similarly named constant `FOO` defined here\n+...\n+LL |     println!(\"{:.foo$}\", 0);\n+   |                  ^^^ help: a constant with a similar name exists (notice the capitalization): `FOO`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0425`."}, {"sha": "d980e7be273e8547e6568eb47df192fafd3603c0", "filename": "src/test/ui/fmt/format-args-capture-missing-variables.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/582b6964a8868c9714881d9821d08415a8f4f13b/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture-missing-variables.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/582b6964a8868c9714881d9821d08415a8f4f13b/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture-missing-variables.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture-missing-variables.stderr?ref=582b6964a8868c9714881d9821d08415a8f4f13b", "patch": "@@ -7,40 +7,40 @@ LL |     format!(\"{valuea} {valueb}\", valuea=5, valuec=7);\n    |             formatting specifier missing\n \n error[E0425]: cannot find value `foo` in this scope\n-  --> $DIR/format-args-capture-missing-variables.rs:2:17\n+  --> $DIR/format-args-capture-missing-variables.rs:2:18\n    |\n LL |     format!(\"{} {foo} {} {bar} {}\", 1, 2, 3);\n-   |                 ^^^^^ not found in this scope\n+   |                  ^^^ not found in this scope\n \n error[E0425]: cannot find value `bar` in this scope\n-  --> $DIR/format-args-capture-missing-variables.rs:2:26\n+  --> $DIR/format-args-capture-missing-variables.rs:2:27\n    |\n LL |     format!(\"{} {foo} {} {bar} {}\", 1, 2, 3);\n-   |                          ^^^^^ not found in this scope\n+   |                           ^^^ not found in this scope\n \n error[E0425]: cannot find value `foo` in this scope\n-  --> $DIR/format-args-capture-missing-variables.rs:6:14\n+  --> $DIR/format-args-capture-missing-variables.rs:6:15\n    |\n LL |     format!(\"{foo}\");\n-   |              ^^^^^ not found in this scope\n+   |               ^^^ not found in this scope\n \n error[E0425]: cannot find value `valueb` in this scope\n-  --> $DIR/format-args-capture-missing-variables.rs:8:23\n+  --> $DIR/format-args-capture-missing-variables.rs:8:24\n    |\n LL |     format!(\"{valuea} {valueb}\", valuea=5, valuec=7);\n-   |                       ^^^^^^^^ not found in this scope\n+   |                        ^^^^^^ not found in this scope\n \n error[E0425]: cannot find value `foo` in this scope\n-  --> $DIR/format-args-capture-missing-variables.rs:14:9\n+  --> $DIR/format-args-capture-missing-variables.rs:14:10\n    |\n LL |         {foo}\n-   |         ^^^^^ not found in this scope\n+   |          ^^^ not found in this scope\n \n error[E0425]: cannot find value `foo` in this scope\n-  --> $DIR/format-args-capture-missing-variables.rs:19:13\n+  --> $DIR/format-args-capture-missing-variables.rs:19:14\n    |\n LL |     panic!(\"{foo} {bar}\", bar=1);\n-   |             ^^^^^ not found in this scope\n+   |              ^^^ not found in this scope\n \n error: aborting due to 7 previous errors\n "}, {"sha": "3f1f1006713ba46d9ffbdbee1af523e4ddfcb635", "filename": "src/test/ui/fmt/ifmt-bad-arg.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/582b6964a8868c9714881d9821d08415a8f4f13b/src%2Ftest%2Fui%2Ffmt%2Fifmt-bad-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/582b6964a8868c9714881d9821d08415a8f4f13b/src%2Ftest%2Fui%2Ffmt%2Fifmt-bad-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fifmt-bad-arg.stderr?ref=582b6964a8868c9714881d9821d08415a8f4f13b", "patch": "@@ -263,34 +263,34 @@ LL |     println!(\"{:.*}\");\n    = note: for information about formatting flags, visit https://doc.rust-lang.org/std/fmt/index.html\n \n error[E0425]: cannot find value `foo` in this scope\n-  --> $DIR/ifmt-bad-arg.rs:27:17\n+  --> $DIR/ifmt-bad-arg.rs:27:18\n    |\n LL |     format!(\"{} {foo} {} {bar} {}\", 1, 2, 3);\n-   |                 ^^^^^ not found in this scope\n+   |                  ^^^ not found in this scope\n \n error[E0425]: cannot find value `bar` in this scope\n-  --> $DIR/ifmt-bad-arg.rs:27:26\n+  --> $DIR/ifmt-bad-arg.rs:27:27\n    |\n LL |     format!(\"{} {foo} {} {bar} {}\", 1, 2, 3);\n-   |                          ^^^^^ not found in this scope\n+   |                           ^^^ not found in this scope\n \n error[E0425]: cannot find value `foo` in this scope\n-  --> $DIR/ifmt-bad-arg.rs:31:14\n+  --> $DIR/ifmt-bad-arg.rs:31:15\n    |\n LL |     format!(\"{foo}\");\n-   |              ^^^^^ not found in this scope\n+   |               ^^^ not found in this scope\n \n error[E0425]: cannot find value `valueb` in this scope\n-  --> $DIR/ifmt-bad-arg.rs:45:23\n+  --> $DIR/ifmt-bad-arg.rs:45:24\n    |\n LL |     format!(\"{valuea} {valueb}\", valuea=5, valuec=7);\n-   |                       ^^^^^^^^ not found in this scope\n+   |                        ^^^^^^ not found in this scope\n \n error[E0425]: cannot find value `foo` in this scope\n-  --> $DIR/ifmt-bad-arg.rs:60:9\n+  --> $DIR/ifmt-bad-arg.rs:60:10\n    |\n LL |         {foo}\n-   |         ^^^^^ not found in this scope\n+   |          ^^^ not found in this scope\n \n error[E0308]: mismatched types\n   --> $DIR/ifmt-bad-arg.rs:78:32"}, {"sha": "26deb598762680fc6b2bd833b7f378ec81980a8e", "filename": "src/test/ui/functions-closures/fn-help-with-err-generic-is-not-function.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/582b6964a8868c9714881d9821d08415a8f4f13b/src%2Ftest%2Fui%2Ffunctions-closures%2Ffn-help-with-err-generic-is-not-function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/582b6964a8868c9714881d9821d08415a8f4f13b/src%2Ftest%2Fui%2Ffunctions-closures%2Ffn-help-with-err-generic-is-not-function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffunctions-closures%2Ffn-help-with-err-generic-is-not-function.rs?ref=582b6964a8868c9714881d9821d08415a8f4f13b", "patch": "@@ -0,0 +1,22 @@\n+struct Struct<T>(T);\n+impl Struct<T>\n+//~^ ERROR cannot find type `T` in this scope\n+//~| NOTE not found in this scope\n+//~| HELP you might be missing a type parameter\n+where\n+    T: Copy,\n+    //~^ ERROR cannot find type `T` in this scope\n+    //~| NOTE not found in this scope\n+{\n+    // The part where it claims that there is no method named `len` is a bug. Feel free to fix it.\n+    // This test is intended to ensure that a different bug, where it claimed\n+    // that `v` was a function, does not regress.\n+    fn method(v: Vec<u8>) { v.len(); }\n+    //~^ ERROR type annotations needed\n+    //~| NOTE cannot infer type\n+    //~| NOTE type must be known at this point\n+    //~| ERROR no method named `len`\n+    //~| NOTE private field, not a method\n+}\n+\n+fn main() {}"}, {"sha": "958ce3c25d0272cb0eb26d39a48f41eefcf689c6", "filename": "src/test/ui/functions-closures/fn-help-with-err-generic-is-not-function.stderr", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/582b6964a8868c9714881d9821d08415a8f4f13b/src%2Ftest%2Fui%2Ffunctions-closures%2Ffn-help-with-err-generic-is-not-function.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/582b6964a8868c9714881d9821d08415a8f4f13b/src%2Ftest%2Fui%2Ffunctions-closures%2Ffn-help-with-err-generic-is-not-function.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffunctions-closures%2Ffn-help-with-err-generic-is-not-function.stderr?ref=582b6964a8868c9714881d9821d08415a8f4f13b", "patch": "@@ -0,0 +1,32 @@\n+error[E0412]: cannot find type `T` in this scope\n+  --> $DIR/fn-help-with-err-generic-is-not-function.rs:2:13\n+   |\n+LL | impl Struct<T>\n+   |     -       ^ not found in this scope\n+   |     |\n+   |     help: you might be missing a type parameter: `<T>`\n+\n+error[E0412]: cannot find type `T` in this scope\n+  --> $DIR/fn-help-with-err-generic-is-not-function.rs:7:5\n+   |\n+LL |     T: Copy,\n+   |     ^ not found in this scope\n+\n+error[E0282]: type annotations needed\n+  --> $DIR/fn-help-with-err-generic-is-not-function.rs:14:31\n+   |\n+LL |     fn method(v: Vec<u8>) { v.len(); }\n+   |                               ^^^ cannot infer type\n+   |\n+   = note: type must be known at this point\n+\n+error[E0599]: no method named `len` found for struct `Vec<u8>` in the current scope\n+  --> $DIR/fn-help-with-err-generic-is-not-function.rs:14:31\n+   |\n+LL |     fn method(v: Vec<u8>) { v.len(); }\n+   |                               ^^^ private field, not a method\n+\n+error: aborting due to 4 previous errors\n+\n+Some errors have detailed explanations: E0282, E0412, E0599.\n+For more information about an error, try `rustc --explain E0282`."}, {"sha": "f8a81af786f7ef8f61a0d25eadfaacaa388876f3", "filename": "src/test/ui/functions-closures/fn-help-with-err.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/582b6964a8868c9714881d9821d08415a8f4f13b/src%2Ftest%2Fui%2Ffunctions-closures%2Ffn-help-with-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/582b6964a8868c9714881d9821d08415a8f4f13b/src%2Ftest%2Fui%2Ffunctions-closures%2Ffn-help-with-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffunctions-closures%2Ffn-help-with-err.rs?ref=582b6964a8868c9714881d9821d08415a8f4f13b", "patch": "@@ -0,0 +1,16 @@\n+// This test case checks the behavior of typeck::check::method::suggest::is_fn on Ty::Error.\n+fn main() {\n+    let arc = std::sync::Arc::new(oops);\n+    //~^ ERROR cannot find value `oops` in this scope\n+    //~| NOTE not found\n+    // The error \"note: `arc` is a function, perhaps you wish to call it\" MUST NOT appear.\n+    arc.blablabla();\n+    //~^ ERROR no method named `blablabla`\n+    //~| NOTE method not found\n+    let arc2 = std::sync::Arc::new(|| 1);\n+    // The error \"note: `arc2` is a function, perhaps you wish to call it\" SHOULD appear\n+    arc2.blablabla();\n+    //~^ ERROR no method named `blablabla`\n+    //~| NOTE method not found\n+    //~| NOTE `arc2` is a function, perhaps you wish to call it\n+}"}, {"sha": "4d6b3282ad9e925abe89d4b59ceaadcb1721a216", "filename": "src/test/ui/functions-closures/fn-help-with-err.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/582b6964a8868c9714881d9821d08415a8f4f13b/src%2Ftest%2Fui%2Ffunctions-closures%2Ffn-help-with-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/582b6964a8868c9714881d9821d08415a8f4f13b/src%2Ftest%2Fui%2Ffunctions-closures%2Ffn-help-with-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffunctions-closures%2Ffn-help-with-err.stderr?ref=582b6964a8868c9714881d9821d08415a8f4f13b", "patch": "@@ -0,0 +1,24 @@\n+error[E0425]: cannot find value `oops` in this scope\n+  --> $DIR/fn-help-with-err.rs:3:35\n+   |\n+LL |     let arc = std::sync::Arc::new(oops);\n+   |                                   ^^^^ not found in this scope\n+\n+error[E0599]: no method named `blablabla` found for struct `Arc<_>` in the current scope\n+  --> $DIR/fn-help-with-err.rs:7:9\n+   |\n+LL |     arc.blablabla();\n+   |         ^^^^^^^^^ method not found in `Arc<_>`\n+\n+error[E0599]: no method named `blablabla` found for struct `Arc<[closure@$DIR/fn-help-with-err.rs:10:36: 10:40]>` in the current scope\n+  --> $DIR/fn-help-with-err.rs:12:10\n+   |\n+LL |     arc2.blablabla();\n+   |          ^^^^^^^^^ method not found in `Arc<[closure@$DIR/fn-help-with-err.rs:10:36: 10:40]>`\n+   |\n+   = note: `arc2` is a function, perhaps you wish to call it\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors have detailed explanations: E0425, E0599.\n+For more information about an error, try `rustc --explain E0425`."}, {"sha": "c0384399a92e683f1fdc4e63528cd6482f0008ea", "filename": "src/test/ui/typeck/issue-91328.fixed", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/582b6964a8868c9714881d9821d08415a8f4f13b/src%2Ftest%2Fui%2Ftypeck%2Fissue-91328.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/582b6964a8868c9714881d9821d08415a8f4f13b/src%2Ftest%2Fui%2Ftypeck%2Fissue-91328.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-91328.fixed?ref=582b6964a8868c9714881d9821d08415a8f4f13b", "patch": "@@ -34,4 +34,14 @@ fn baz(v: Vec<i32>) -> i32 {\n     }\n }\n \n+fn qux(a: &Option<Box<[i32; 2]>>) -> i32 {\n+    match a.as_deref() {\n+    //~^ HELP: consider using `as_deref` here\n+        Some([a, b]) => a + b,\n+        //~^ ERROR: expected an array or slice\n+        //~| NOTE: pattern cannot match with input type\n+        _ => 42,\n+    }\n+}\n+\n fn main() {}"}, {"sha": "63602d26f970df5b77f43dd0341c61694944bca4", "filename": "src/test/ui/typeck/issue-91328.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/582b6964a8868c9714881d9821d08415a8f4f13b/src%2Ftest%2Fui%2Ftypeck%2Fissue-91328.rs", "raw_url": "https://github.com/rust-lang/rust/raw/582b6964a8868c9714881d9821d08415a8f4f13b/src%2Ftest%2Fui%2Ftypeck%2Fissue-91328.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-91328.rs?ref=582b6964a8868c9714881d9821d08415a8f4f13b", "patch": "@@ -34,4 +34,14 @@ fn baz(v: Vec<i32>) -> i32 {\n     }\n }\n \n+fn qux(a: &Option<Box<[i32; 2]>>) -> i32 {\n+    match a {\n+    //~^ HELP: consider using `as_deref` here\n+        Some([a, b]) => a + b,\n+        //~^ ERROR: expected an array or slice\n+        //~| NOTE: pattern cannot match with input type\n+        _ => 42,\n+    }\n+}\n+\n fn main() {}"}, {"sha": "f2f407bcafff222acedc6040dd381bb6417acabc", "filename": "src/test/ui/typeck/issue-91328.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/582b6964a8868c9714881d9821d08415a8f4f13b/src%2Ftest%2Fui%2Ftypeck%2Fissue-91328.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/582b6964a8868c9714881d9821d08415a8f4f13b/src%2Ftest%2Fui%2Ftypeck%2Fissue-91328.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-91328.stderr?ref=582b6964a8868c9714881d9821d08415a8f4f13b", "patch": "@@ -25,6 +25,15 @@ LL |\n LL |         [a, b] => a + b,\n    |         ^^^^^^ pattern cannot match with input type `Vec<i32>`\n \n-error: aborting due to 3 previous errors\n+error[E0529]: expected an array or slice, found `Box<[i32; 2]>`\n+  --> $DIR/issue-91328.rs:40:14\n+   |\n+LL |     match a {\n+   |           - help: consider using `as_deref` here: `a.as_deref()`\n+LL |\n+LL |         Some([a, b]) => a + b,\n+   |              ^^^^^^ pattern cannot match with input type `Box<[i32; 2]>`\n+\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0529`."}, {"sha": "80474b807e7f34105e198d9bf512998d9a8fa5f3", "filename": "src/test/ui/union/issue-41073.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/582b6964a8868c9714881d9821d08415a8f4f13b/src%2Ftest%2Fui%2Funion%2Fissue-41073.rs", "raw_url": "https://github.com/rust-lang/rust/raw/582b6964a8868c9714881d9821d08415a8f4f13b/src%2Ftest%2Fui%2Funion%2Fissue-41073.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Fissue-41073.rs?ref=582b6964a8868c9714881d9821d08415a8f4f13b", "patch": "@@ -1,7 +1,7 @@\n #![feature(untagged_unions)]\n \n union Test {\n-    a: A, //~ ERROR unions may not contain fields that need dropping\n+    a: A, //~ ERROR unions cannot contain fields that may need dropping\n     b: B\n }\n "}, {"sha": "7d4208b10da808d7a30de02034bcf48762171c46", "filename": "src/test/ui/union/issue-41073.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/582b6964a8868c9714881d9821d08415a8f4f13b/src%2Ftest%2Fui%2Funion%2Fissue-41073.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/582b6964a8868c9714881d9821d08415a8f4f13b/src%2Ftest%2Fui%2Funion%2Fissue-41073.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Fissue-41073.stderr?ref=582b6964a8868c9714881d9821d08415a8f4f13b", "patch": "@@ -1,10 +1,11 @@\n-error[E0740]: unions may not contain fields that need dropping\n+error[E0740]: unions cannot contain fields that may need dropping\n   --> $DIR/issue-41073.rs:4:5\n    |\n LL |     a: A,\n    |     ^^^^\n    |\n-help: wrap the type with `std::mem::ManuallyDrop` and ensure it is manually dropped\n+   = note: a type is guaranteed not to need dropping when it implements `Copy`, or when it is the special `ManuallyDrop<_>` type\n+help: when the type does not implement `Copy`, wrap it inside a `ManuallyDrop<_>` and ensure it is manually dropped\n    |\n LL |     a: std::mem::ManuallyDrop<A>,\n    |        +++++++++++++++++++++++ +"}, {"sha": "4b333631ec0f7cc53439427f171f44c0cffbe6d4", "filename": "src/test/ui/union/union-custom-drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/582b6964a8868c9714881d9821d08415a8f4f13b/src%2Ftest%2Fui%2Funion%2Funion-custom-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/582b6964a8868c9714881d9821d08415a8f4f13b/src%2Ftest%2Fui%2Funion%2Funion-custom-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-custom-drop.rs?ref=582b6964a8868c9714881d9821d08415a8f4f13b", "patch": "@@ -4,7 +4,7 @@\n #![feature(untagged_unions)]\n \n union Foo {\n-    bar: Bar, //~ ERROR unions may not contain fields that need dropping\n+    bar: Bar, //~ ERROR unions cannot contain fields that may need dropping\n }\n \n union Bar {"}, {"sha": "b5579eeef09777d587c271cf372a28e9ce264f27", "filename": "src/test/ui/union/union-custom-drop.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/582b6964a8868c9714881d9821d08415a8f4f13b/src%2Ftest%2Fui%2Funion%2Funion-custom-drop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/582b6964a8868c9714881d9821d08415a8f4f13b/src%2Ftest%2Fui%2Funion%2Funion-custom-drop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-custom-drop.stderr?ref=582b6964a8868c9714881d9821d08415a8f4f13b", "patch": "@@ -1,10 +1,11 @@\n-error[E0740]: unions may not contain fields that need dropping\n+error[E0740]: unions cannot contain fields that may need dropping\n   --> $DIR/union-custom-drop.rs:7:5\n    |\n LL |     bar: Bar,\n    |     ^^^^^^^^\n    |\n-help: wrap the type with `std::mem::ManuallyDrop` and ensure it is manually dropped\n+   = note: a type is guaranteed not to need dropping when it implements `Copy`, or when it is the special `ManuallyDrop<_>` type\n+help: when the type does not implement `Copy`, wrap it inside a `ManuallyDrop<_>` and ensure it is manually dropped\n    |\n LL |     bar: std::mem::ManuallyDrop<Bar>,\n    |          +++++++++++++++++++++++   +"}, {"sha": "e8e65fe5d1d1de2704faf9f1ff8821ab872849c3", "filename": "src/test/ui/union/union-derive-clone.mirunsafeck.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/582b6964a8868c9714881d9821d08415a8f4f13b/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.mirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/582b6964a8868c9714881d9821d08415a8f4f13b/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.mirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.mirunsafeck.stderr?ref=582b6964a8868c9714881d9821d08415a8f4f13b", "patch": "@@ -16,9 +16,9 @@ LL |     let w = u.clone();\n    = note: the following trait bounds were not satisfied:\n            `CloneNoCopy: Copy`\n            which is required by `U5<CloneNoCopy>: Clone`\n-help: consider annotating `CloneNoCopy` with `#[derive(Copy)]`\n+help: consider annotating `CloneNoCopy` with `#[derive(Clone, Copy)]`\n    |\n-LL | #[derive(Copy)]\n+LL | #[derive(Clone, Copy)]\n    |\n \n error[E0277]: the trait bound `U1: Copy` is not satisfied"}, {"sha": "e8e65fe5d1d1de2704faf9f1ff8821ab872849c3", "filename": "src/test/ui/union/union-derive-clone.thirunsafeck.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/582b6964a8868c9714881d9821d08415a8f4f13b/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/582b6964a8868c9714881d9821d08415a8f4f13b/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.thirunsafeck.stderr?ref=582b6964a8868c9714881d9821d08415a8f4f13b", "patch": "@@ -16,9 +16,9 @@ LL |     let w = u.clone();\n    = note: the following trait bounds were not satisfied:\n            `CloneNoCopy: Copy`\n            which is required by `U5<CloneNoCopy>: Clone`\n-help: consider annotating `CloneNoCopy` with `#[derive(Copy)]`\n+help: consider annotating `CloneNoCopy` with `#[derive(Clone, Copy)]`\n    |\n-LL | #[derive(Copy)]\n+LL | #[derive(Clone, Copy)]\n    |\n \n error[E0277]: the trait bound `U1: Copy` is not satisfied"}, {"sha": "93fe996d2a477deb3f95b537051a4cc0ebe7407e", "filename": "src/test/ui/union/union-with-drop-fields.mirunsafeck.stderr", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/582b6964a8868c9714881d9821d08415a8f4f13b/src%2Ftest%2Fui%2Funion%2Funion-with-drop-fields.mirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/582b6964a8868c9714881d9821d08415a8f4f13b/src%2Ftest%2Fui%2Funion%2Funion-with-drop-fields.mirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-with-drop-fields.mirunsafeck.stderr?ref=582b6964a8868c9714881d9821d08415a8f4f13b", "patch": "@@ -1,32 +1,35 @@\n-error[E0740]: unions may not contain fields that need dropping\n+error[E0740]: unions cannot contain fields that may need dropping\n   --> $DIR/union-with-drop-fields.rs:11:5\n    |\n LL |     a: String,\n    |     ^^^^^^^^^\n    |\n-help: wrap the type with `std::mem::ManuallyDrop` and ensure it is manually dropped\n+   = note: a type is guaranteed not to need dropping when it implements `Copy`, or when it is the special `ManuallyDrop<_>` type\n+help: when the type does not implement `Copy`, wrap it inside a `ManuallyDrop<_>` and ensure it is manually dropped\n    |\n LL |     a: std::mem::ManuallyDrop<String>,\n    |        +++++++++++++++++++++++      +\n \n-error[E0740]: unions may not contain fields that need dropping\n+error[E0740]: unions cannot contain fields that may need dropping\n   --> $DIR/union-with-drop-fields.rs:19:5\n    |\n LL |     a: S,\n    |     ^^^^\n    |\n-help: wrap the type with `std::mem::ManuallyDrop` and ensure it is manually dropped\n+   = note: a type is guaranteed not to need dropping when it implements `Copy`, or when it is the special `ManuallyDrop<_>` type\n+help: when the type does not implement `Copy`, wrap it inside a `ManuallyDrop<_>` and ensure it is manually dropped\n    |\n LL |     a: std::mem::ManuallyDrop<S>,\n    |        +++++++++++++++++++++++ +\n \n-error[E0740]: unions may not contain fields that need dropping\n+error[E0740]: unions cannot contain fields that may need dropping\n   --> $DIR/union-with-drop-fields.rs:24:5\n    |\n LL |     a: T,\n    |     ^^^^\n    |\n-help: wrap the type with `std::mem::ManuallyDrop` and ensure it is manually dropped\n+   = note: a type is guaranteed not to need dropping when it implements `Copy`, or when it is the special `ManuallyDrop<_>` type\n+help: when the type does not implement `Copy`, wrap it inside a `ManuallyDrop<_>` and ensure it is manually dropped\n    |\n LL |     a: std::mem::ManuallyDrop<T>,\n    |        +++++++++++++++++++++++ +"}, {"sha": "a7a8b69e784abc3a8af508a11841358aa4febb3a", "filename": "src/test/ui/union/union-with-drop-fields.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/582b6964a8868c9714881d9821d08415a8f4f13b/src%2Ftest%2Fui%2Funion%2Funion-with-drop-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/582b6964a8868c9714881d9821d08415a8f4f13b/src%2Ftest%2Fui%2Funion%2Funion-with-drop-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-with-drop-fields.rs?ref=582b6964a8868c9714881d9821d08415a8f4f13b", "patch": "@@ -8,20 +8,20 @@ union U {\n }\n \n union W {\n-    a: String, //~ ERROR unions may not contain fields that need dropping\n+    a: String, //~ ERROR unions cannot contain fields that may need dropping\n     b: String, // OK, only one field is reported\n }\n \n struct S(String);\n \n // `S` doesn't implement `Drop` trait, but still has non-trivial destructor\n union Y {\n-    a: S, //~ ERROR unions may not contain fields that need dropping\n+    a: S, //~ ERROR unions cannot contain fields that may need dropping\n }\n \n // We don't know if `T` is trivially-destructable or not until trans\n union J<T> {\n-    a: T, //~ ERROR unions may not contain fields that need dropping\n+    a: T, //~ ERROR unions cannot contain fields that may need dropping\n }\n \n union H<T: Copy> {"}, {"sha": "93fe996d2a477deb3f95b537051a4cc0ebe7407e", "filename": "src/test/ui/union/union-with-drop-fields.thirunsafeck.stderr", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/582b6964a8868c9714881d9821d08415a8f4f13b/src%2Ftest%2Fui%2Funion%2Funion-with-drop-fields.thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/582b6964a8868c9714881d9821d08415a8f4f13b/src%2Ftest%2Fui%2Funion%2Funion-with-drop-fields.thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-with-drop-fields.thirunsafeck.stderr?ref=582b6964a8868c9714881d9821d08415a8f4f13b", "patch": "@@ -1,32 +1,35 @@\n-error[E0740]: unions may not contain fields that need dropping\n+error[E0740]: unions cannot contain fields that may need dropping\n   --> $DIR/union-with-drop-fields.rs:11:5\n    |\n LL |     a: String,\n    |     ^^^^^^^^^\n    |\n-help: wrap the type with `std::mem::ManuallyDrop` and ensure it is manually dropped\n+   = note: a type is guaranteed not to need dropping when it implements `Copy`, or when it is the special `ManuallyDrop<_>` type\n+help: when the type does not implement `Copy`, wrap it inside a `ManuallyDrop<_>` and ensure it is manually dropped\n    |\n LL |     a: std::mem::ManuallyDrop<String>,\n    |        +++++++++++++++++++++++      +\n \n-error[E0740]: unions may not contain fields that need dropping\n+error[E0740]: unions cannot contain fields that may need dropping\n   --> $DIR/union-with-drop-fields.rs:19:5\n    |\n LL |     a: S,\n    |     ^^^^\n    |\n-help: wrap the type with `std::mem::ManuallyDrop` and ensure it is manually dropped\n+   = note: a type is guaranteed not to need dropping when it implements `Copy`, or when it is the special `ManuallyDrop<_>` type\n+help: when the type does not implement `Copy`, wrap it inside a `ManuallyDrop<_>` and ensure it is manually dropped\n    |\n LL |     a: std::mem::ManuallyDrop<S>,\n    |        +++++++++++++++++++++++ +\n \n-error[E0740]: unions may not contain fields that need dropping\n+error[E0740]: unions cannot contain fields that may need dropping\n   --> $DIR/union-with-drop-fields.rs:24:5\n    |\n LL |     a: T,\n    |     ^^^^\n    |\n-help: wrap the type with `std::mem::ManuallyDrop` and ensure it is manually dropped\n+   = note: a type is guaranteed not to need dropping when it implements `Copy`, or when it is the special `ManuallyDrop<_>` type\n+help: when the type does not implement `Copy`, wrap it inside a `ManuallyDrop<_>` and ensure it is manually dropped\n    |\n LL |     a: std::mem::ManuallyDrop<T>,\n    |        +++++++++++++++++++++++ +"}, {"sha": "1fa6301ebd73dfcc04f1e555fda3b93ab03204ad", "filename": "src/tools/clippy/clippy_lints/src/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/582b6964a8868c9714881d9821d08415a8f4f13b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/582b6964a8868c9714881d9821d08415a8f4f13b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fwrite.rs?ref=582b6964a8868c9714881d9821d08415a8f4f13b", "patch": "@@ -453,7 +453,7 @@ impl SimpleFormatArgs {\n                     }\n                 }\n             },\n-            ArgumentNamed(n) => {\n+            ArgumentNamed(n, _) => {\n                 if let Some(x) = self.named.iter_mut().find(|x| x.0 == n) {\n                     match x.1.as_slice() {\n                         // A non-empty format string has been seen already."}]}