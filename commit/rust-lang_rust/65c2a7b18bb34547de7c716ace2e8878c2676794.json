{"sha": "65c2a7b18bb34547de7c716ace2e8878c2676794", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1YzJhN2IxOGJiMzQ1NDdkZTdjNzE2YWNlMmU4ODc4YzI2NzY3OTQ=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-05-30T19:15:39Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-06-01T01:33:59Z"}, "message": "Alternative wording for inference failure", "tree": {"sha": "71663b30d4f122f73502c5478794690e3e001a5e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71663b30d4f122f73502c5478794690e3e001a5e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65c2a7b18bb34547de7c716ace2e8878c2676794", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65c2a7b18bb34547de7c716ace2e8878c2676794", "html_url": "https://github.com/rust-lang/rust/commit/65c2a7b18bb34547de7c716ace2e8878c2676794", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65c2a7b18bb34547de7c716ace2e8878c2676794/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8bb094dac596a98cd3347979984834fe67bf3fcb", "url": "https://api.github.com/repos/rust-lang/rust/commits/8bb094dac596a98cd3347979984834fe67bf3fcb", "html_url": "https://github.com/rust-lang/rust/commit/8bb094dac596a98cd3347979984834fe67bf3fcb"}], "stats": {"total": 94, "additions": 42, "deletions": 52}, "files": [{"sha": "aae7b5e1202d4006d04becb9ee0d5ec6b1cbe10c", "filename": "src/librustc/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 13, "deletions": 23, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/65c2a7b18bb34547de7c716ace2e8878c2676794/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c2a7b18bb34547de7c716ace2e8878c2676794/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=65c2a7b18bb34547de7c716ace2e8878c2676794", "patch": "@@ -15,7 +15,7 @@ struct FindLocalByTypeVisitor<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n     hir_map: &'a hir::map::Map<'gcx>,\n     found_local_pattern: Option<&'gcx Pat>,\n     found_arg_pattern: Option<&'gcx Pat>,\n-    found_ty: Option<Ty<'tcx>>,\n+    found_ty: Option<String>,\n }\n \n impl<'a, 'gcx, 'tcx> FindLocalByTypeVisitor<'a, 'gcx, 'tcx> {\n@@ -55,7 +55,7 @@ impl<'a, 'gcx, 'tcx> Visitor<'gcx> for FindLocalByTypeVisitor<'a, 'gcx, 'tcx> {\n     fn visit_local(&mut self, local: &'gcx Local) {\n         if let (None, Some(ty)) = (self.found_local_pattern, self.node_matches_type(local.hir_id)) {\n             self.found_local_pattern = Some(&*local.pat);\n-            self.found_ty = Some(ty);\n+            self.found_ty = Some(ty.to_string());\n         }\n         intravisit::walk_local(self, local);\n     }\n@@ -67,7 +67,7 @@ impl<'a, 'gcx, 'tcx> Visitor<'gcx> for FindLocalByTypeVisitor<'a, 'gcx, 'tcx> {\n                 self.node_matches_type(argument.hir_id),\n             ) {\n                 self.found_arg_pattern = Some(&*argument.pat);\n-                self.found_ty = Some(ty);\n+                self.found_ty = Some(ty.to_string());\n             }\n         }\n         intravisit::walk_body(self, body);\n@@ -108,7 +108,6 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         let name = self.extract_type_name(&ty, None);\n \n         let mut err_span = span;\n-        let mut labels = vec![(span, InferCtxt::missing_type_msg(&name))];\n \n         let mut local_visitor = FindLocalByTypeVisitor {\n             infcx: &self,\n@@ -124,10 +123,12 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             local_visitor.visit_expr(expr);\n         }\n \n-        let ty_msg = match local_visitor.found_ty {\n-            Some(ty) if &ty.to_string() != \"_\" => format!(\" for `{}`\", ty),\n+        let ty_msg = match &local_visitor.found_ty {\n+            Some(ty) if &ty[..] != \"_\" && ty != &name => format!(\" in `{}`\", ty),\n             _ => String::new(),\n         };\n+        let mut labels = vec![(span, InferCtxt::missing_type_msg(&name, &ty_msg))];\n+\n         if let Some(pattern) = local_visitor.found_arg_pattern {\n             err_span = pattern.span;\n             // We don't want to show the default label for closures.\n@@ -148,8 +149,8 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             labels.clear();\n             labels.push((pattern.span, format!(\n                 \"consider giving this closure parameter {}\",\n-                match local_visitor.found_ty {\n-                    Some(ty) if &ty.to_string() != \"_\" => format!(\n+                match &local_visitor.found_ty {\n+                    Some(ty) if &ty[..] != \"_\" && ty != &name => format!(\n                         \"the type `{}` with the type parameter `{}` specified\",\n                         ty,\n                         name,\n@@ -162,18 +163,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                 match pattern.span.compiler_desugaring_kind() {\n                     None => labels.push((\n                         pattern.span,\n-                        format!(\n-                            \"consider giving `{}` {}\",\n-                            simple_ident,\n-                            match local_visitor.found_ty {\n-                                Some(ty) if &ty.to_string() != \"_\" => format!(\n-                                    \"the type `{}` with the type parameter `{}` specified\",\n-                                    ty,\n-                                    name,\n-                                ),\n-                                _ => \"a type\".to_owned(),\n-                            },\n-                        ),\n+                        format!(\"consider giving `{}` a type\", simple_ident),\n                     )),\n                     Some(CompilerDesugaringKind::ForLoop) => labels.push((\n                         pattern.span,\n@@ -213,15 +203,15 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                        span,\n                        E0698,\n                        \"type inside generator must be known in this context\");\n-        err.span_label(span, InferCtxt::missing_type_msg(&name));\n+        err.span_label(span, InferCtxt::missing_type_msg(&name, \"\"));\n         err\n     }\n \n-    fn missing_type_msg(type_name: &str) -> String {\n+    fn missing_type_msg(type_name: &str, postfix: &str) -> String {\n         if type_name == \"_\" {\n             \"cannot infer type\".to_owned()\n         } else {\n-            format!(\"cannot infer type for `{}`\", type_name)\n+            format!(\"cannot infer type for `{}`{}\", type_name, postfix)\n         }\n     }\n }"}, {"sha": "510eeb4b9bbd7fb8bda2e0d61f688e27a6529d49", "filename": "src/test/ui/issues/issue-12187-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65c2a7b18bb34547de7c716ace2e8878c2676794/src%2Ftest%2Fui%2Fissues%2Fissue-12187-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65c2a7b18bb34547de7c716ace2e8878c2676794/src%2Ftest%2Fui%2Fissues%2Fissue-12187-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-12187-1.stderr?ref=65c2a7b18bb34547de7c716ace2e8878c2676794", "patch": "@@ -1,4 +1,4 @@\n-error[E0282]: type annotations needed for `&_`\n+error[E0282]: type annotations needed in `&_`\n   --> $DIR/issue-12187-1.rs:6:10\n    |\n LL |     let &v = new();"}, {"sha": "8b12ff5f9d8c51b75f08135b39b3091e2a4ab1a0", "filename": "src/test/ui/issues/issue-12187-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65c2a7b18bb34547de7c716ace2e8878c2676794/src%2Ftest%2Fui%2Fissues%2Fissue-12187-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65c2a7b18bb34547de7c716ace2e8878c2676794/src%2Ftest%2Fui%2Fissues%2Fissue-12187-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-12187-2.stderr?ref=65c2a7b18bb34547de7c716ace2e8878c2676794", "patch": "@@ -1,4 +1,4 @@\n-error[E0282]: type annotations needed for `&_`\n+error[E0282]: type annotations needed in `&_`\n   --> $DIR/issue-12187-2.rs:6:10\n    |\n LL |     let &v = new();"}, {"sha": "0d7a31fc60de65775d233b7b6f5e96a77236e028", "filename": "src/test/ui/issues/issue-17551.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/65c2a7b18bb34547de7c716ace2e8878c2676794/src%2Ftest%2Fui%2Fissues%2Fissue-17551.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65c2a7b18bb34547de7c716ace2e8878c2676794/src%2Ftest%2Fui%2Fissues%2Fissue-17551.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17551.stderr?ref=65c2a7b18bb34547de7c716ace2e8878c2676794", "patch": "@@ -1,10 +1,10 @@\n-error[E0282]: type annotations needed for `B<_>`\n+error[E0282]: type annotations needed in `B<_>`\n   --> $DIR/issue-17551.rs:6:15\n    |\n LL |     let foo = B(marker::PhantomData);\n-   |         ---   ^ cannot infer type for `T`\n+   |         ---   ^ cannot infer type for `T` in `B<_>`\n    |         |\n-   |         consider giving `foo` the type `B<_>` with the type parameter `T` specified\n+   |         consider giving `foo` a type\n \n error: aborting due to previous error\n "}, {"sha": "c234bce4aaac8ae22e02e7c5782239ee8dc8130e", "filename": "src/test/ui/issues/issue-20261.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65c2a7b18bb34547de7c716ace2e8878c2676794/src%2Ftest%2Fui%2Fissues%2Fissue-20261.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65c2a7b18bb34547de7c716ace2e8878c2676794/src%2Ftest%2Fui%2Fissues%2Fissue-20261.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20261.stderr?ref=65c2a7b18bb34547de7c716ace2e8878c2676794", "patch": "@@ -1,4 +1,4 @@\n-error[E0282]: type annotations needed for `&(_,)`\n+error[E0282]: type annotations needed in `&(_,)`\n   --> $DIR/issue-20261.rs:4:11\n    |\n LL |     for (ref i,) in [].iter() {"}, {"sha": "1363a6f963fe0436675b0a0836053341031b6782", "filename": "src/test/ui/issues/issue-23046.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65c2a7b18bb34547de7c716ace2e8878c2676794/src%2Ftest%2Fui%2Fissues%2Fissue-23046.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65c2a7b18bb34547de7c716ace2e8878c2676794/src%2Ftest%2Fui%2Fissues%2Fissue-23046.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-23046.stderr?ref=65c2a7b18bb34547de7c716ace2e8878c2676794", "patch": "@@ -1,4 +1,4 @@\n-error[E0282]: type annotations needed for `Expr<'_, _>`\n+error[E0282]: type annotations needed in `Expr<'_, _>`\n   --> $DIR/issue-23046.rs:17:15\n    |\n LL |     let ex = |x| {"}, {"sha": "5fc9ab269697001cbc2aabd6af6dbd42d2d13867", "filename": "src/test/ui/issues/issue-25368.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65c2a7b18bb34547de7c716ace2e8878c2676794/src%2Ftest%2Fui%2Fissues%2Fissue-25368.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65c2a7b18bb34547de7c716ace2e8878c2676794/src%2Ftest%2Fui%2Fissues%2Fissue-25368.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-25368.stderr?ref=65c2a7b18bb34547de7c716ace2e8878c2676794", "patch": "@@ -1,11 +1,11 @@\n-error[E0282]: type annotations needed for `(std::sync::mpsc::Sender<Foo<_>>, std::sync::mpsc::Receiver<Foo<_>>)`\n+error[E0282]: type annotations needed in `(std::sync::mpsc::Sender<Foo<_>>, std::sync::mpsc::Receiver<Foo<_>>)`\n   --> $DIR/issue-25368.rs:11:17\n    |\n LL |     let (tx, rx) = channel();\n    |         -------- consider giving the pattern a type\n ...\n LL |         tx.send(Foo{ foo: PhantomData });\n-   |                 ^^^ cannot infer type for `T`\n+   |                 ^^^ cannot infer type for `T` in `(std::sync::mpsc::Sender<Foo<_>>, std::sync::mpsc::Receiver<Foo<_>>)`\n \n error: aborting due to previous error\n "}, {"sha": "7338032098bde6597c53e983a4d43afc3e78f7f0", "filename": "src/test/ui/issues/issue-7813.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65c2a7b18bb34547de7c716ace2e8878c2676794/src%2Ftest%2Fui%2Fissues%2Fissue-7813.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65c2a7b18bb34547de7c716ace2e8878c2676794/src%2Ftest%2Fui%2Fissues%2Fissue-7813.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-7813.stderr?ref=65c2a7b18bb34547de7c716ace2e8878c2676794", "patch": "@@ -1,10 +1,10 @@\n-error[E0282]: type annotations needed for `&[_; 0]`\n+error[E0282]: type annotations needed in `&[_; 0]`\n   --> $DIR/issue-7813.rs:2:13\n    |\n LL |     let v = &[];\n    |         -   ^^^ cannot infer type\n    |         |\n-   |         consider giving `v` the type `&[_; 0]` with the type parameter `_` specified\n+   |         consider giving `v` a type\n \n error: aborting due to previous error\n "}, {"sha": "e8871efc5b27199e96e80c8a9a80d463bd2bbfbe", "filename": "src/test/ui/methods/method-ambig-one-trait-unknown-int-type.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/65c2a7b18bb34547de7c716ace2e8878c2676794/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-one-trait-unknown-int-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65c2a7b18bb34547de7c716ace2e8878c2676794/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-one-trait-unknown-int-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-one-trait-unknown-int-type.stderr?ref=65c2a7b18bb34547de7c716ace2e8878c2676794", "patch": "@@ -1,10 +1,10 @@\n-error[E0282]: type annotations needed for `std::vec::Vec<_>`\n+error[E0282]: type annotations needed in `std::vec::Vec<_>`\n   --> $DIR/method-ambig-one-trait-unknown-int-type.rs:24:17\n    |\n LL |     let mut x = Vec::new();\n-   |         -----   ^^^^^^^^ cannot infer type for `T`\n+   |         -----   ^^^^^^^^ cannot infer type for `T` in `std::vec::Vec<_>`\n    |         |\n-   |         consider giving `x` the type `std::vec::Vec<_>` with the type parameter `T` specified\n+   |         consider giving `x` a type\n \n error[E0308]: mismatched types\n   --> $DIR/method-ambig-one-trait-unknown-int-type.rs:33:20"}, {"sha": "2ae942e48e68a38eece25422b7d76dfcf8c23faa", "filename": "src/test/ui/span/issue-42234-unknown-receiver-type.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/65c2a7b18bb34547de7c716ace2e8878c2676794/src%2Ftest%2Fui%2Fspan%2Fissue-42234-unknown-receiver-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65c2a7b18bb34547de7c716ace2e8878c2676794/src%2Ftest%2Fui%2Fspan%2Fissue-42234-unknown-receiver-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-42234-unknown-receiver-type.stderr?ref=65c2a7b18bb34547de7c716ace2e8878c2676794", "patch": "@@ -1,10 +1,10 @@\n-error[E0282]: type annotations needed for `std::option::Option<_>`\n+error[E0282]: type annotations needed in `std::option::Option<_>`\n   --> $DIR/issue-42234-unknown-receiver-type.rs:7:5\n    |\n LL |     let x: Option<_> = None;\n-   |         - consider giving `x` the type `std::option::Option<_>` with the type parameter `T` specified\n+   |         - consider giving `x` a type\n LL |     x.unwrap().method_that_could_exist_on_some_type();\n-   |     ^^^^^^^^^^ cannot infer type for `T`\n+   |     ^^^^^^^^^^ cannot infer type for `T` in `std::option::Option<_>`\n    |\n    = note: type must be known at this point\n "}, {"sha": "d3c726cf8e73124ca307bdebf0d151fc784522bd", "filename": "src/test/ui/type/type-check/cannot_infer_local_or_array.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65c2a7b18bb34547de7c716ace2e8878c2676794/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fcannot_infer_local_or_array.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65c2a7b18bb34547de7c716ace2e8878c2676794/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fcannot_infer_local_or_array.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fcannot_infer_local_or_array.stderr?ref=65c2a7b18bb34547de7c716ace2e8878c2676794", "patch": "@@ -1,10 +1,10 @@\n-error[E0282]: type annotations needed for `[_; 0]`\n+error[E0282]: type annotations needed in `[_; 0]`\n   --> $DIR/cannot_infer_local_or_array.rs:2:13\n    |\n LL |     let x = [];\n    |         -   ^^ cannot infer type\n    |         |\n-   |         consider giving `x` the type `[_; 0]` with the type parameter `_` specified\n+   |         consider giving `x` a type\n \n error: aborting due to previous error\n "}, {"sha": "59a8b52a66d32e8c86df8f49b0a53482d04132ac", "filename": "src/test/ui/type/type-check/cannot_infer_local_or_vec.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/65c2a7b18bb34547de7c716ace2e8878c2676794/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fcannot_infer_local_or_vec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65c2a7b18bb34547de7c716ace2e8878c2676794/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fcannot_infer_local_or_vec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fcannot_infer_local_or_vec.stderr?ref=65c2a7b18bb34547de7c716ace2e8878c2676794", "patch": "@@ -1,10 +1,10 @@\n-error[E0282]: type annotations needed for `std::vec::Vec<_>`\n+error[E0282]: type annotations needed in `std::vec::Vec<_>`\n   --> $DIR/cannot_infer_local_or_vec.rs:2:13\n    |\n LL |     let x = vec![];\n-   |         -   ^^^^^^ cannot infer type for `T`\n+   |         -   ^^^^^^ cannot infer type for `T` in `std::vec::Vec<_>`\n    |         |\n-   |         consider giving `x` the type `std::vec::Vec<_>` with the type parameter `T` specified\n+   |         consider giving `x` a type\n    |\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n "}, {"sha": "294b6d93211b1f06593f683315f6adc3f9d90dbc", "filename": "src/test/ui/type/type-check/cannot_infer_local_or_vec_in_tuples.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65c2a7b18bb34547de7c716ace2e8878c2676794/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fcannot_infer_local_or_vec_in_tuples.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65c2a7b18bb34547de7c716ace2e8878c2676794/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fcannot_infer_local_or_vec_in_tuples.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fcannot_infer_local_or_vec_in_tuples.stderr?ref=65c2a7b18bb34547de7c716ace2e8878c2676794", "patch": "@@ -1,8 +1,8 @@\n-error[E0282]: type annotations needed for `(std::vec::Vec<_>,)`\n+error[E0282]: type annotations needed in `(std::vec::Vec<_>,)`\n   --> $DIR/cannot_infer_local_or_vec_in_tuples.rs:2:18\n    |\n LL |     let (x, ) = (vec![], );\n-   |         -----    ^^^^^^ cannot infer type for `T`\n+   |         -----    ^^^^^^ cannot infer type for `T` in `(std::vec::Vec<_>,)`\n    |         |\n    |         consider giving the pattern a type\n    |"}, {"sha": "142975144d47d7a6c1e21ce353042d315797021b", "filename": "src/test/ui/unboxed-closures/unboxed-closures-failed-recursive-fn-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65c2a7b18bb34547de7c716ace2e8878c2676794/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-failed-recursive-fn-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65c2a7b18bb34547de7c716ace2e8878c2676794/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-failed-recursive-fn-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-failed-recursive-fn-2.stderr?ref=65c2a7b18bb34547de7c716ace2e8878c2676794", "patch": "@@ -1,8 +1,8 @@\n-error[E0282]: type annotations needed for `std::option::Option<_>`\n+error[E0282]: type annotations needed in `std::option::Option<_>`\n   --> $DIR/unboxed-closures-failed-recursive-fn-2.rs:16:32\n    |\n LL |     let mut closure0 = None;\n-   |         ------------ consider giving `closure0` the type `std::option::Option<_>` with the type parameter `_` specified\n+   |         ------------ consider giving `closure0` a type\n ...\n LL |                         return c();\n    |                                ^^^ cannot infer type"}, {"sha": "2431927f2ac8c5a6d66ed683addbf1fee0c8dad8", "filename": "src/test/ui/vector-no-ann.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/65c2a7b18bb34547de7c716ace2e8878c2676794/src%2Ftest%2Fui%2Fvector-no-ann.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65c2a7b18bb34547de7c716ace2e8878c2676794/src%2Ftest%2Fui%2Fvector-no-ann.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvector-no-ann.stderr?ref=65c2a7b18bb34547de7c716ace2e8878c2676794", "patch": "@@ -1,10 +1,10 @@\n-error[E0282]: type annotations needed for `std::vec::Vec<_>`\n+error[E0282]: type annotations needed in `std::vec::Vec<_>`\n   --> $DIR/vector-no-ann.rs:2:16\n    |\n LL |     let _foo = Vec::new();\n-   |         ----   ^^^^^^^^ cannot infer type for `T`\n+   |         ----   ^^^^^^^^ cannot infer type for `T` in `std::vec::Vec<_>`\n    |         |\n-   |         consider giving `_foo` the type `std::vec::Vec<_>` with the type parameter `T` specified\n+   |         consider giving `_foo` a type\n \n error: aborting due to previous error\n "}]}