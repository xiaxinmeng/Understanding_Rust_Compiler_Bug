{"sha": "05a0dfe8cd4db51a08d11ab24cc1586c833e2df1", "node_id": "C_kwDOAAsO6NoAKDA1YTBkZmU4Y2Q0ZGI1MWEwOGQxMWFiMjRjYzE1ODZjODMzZTJkZjE", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-08-17T02:34:33Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-08-21T21:35:33Z"}, "message": "Use `AttrVec` in more places.\n\nIn some places we use `Vec<Attribute>` and some places we use\n`ThinVec<Attribute>` (a.k.a. `AttrVec`). This results in various points\nwhere we have to convert between `Vec` and `ThinVec`.\n\nThis commit changes the places that use `Vec<Attribute>` to use\n`AttrVec`. A lot of this is mechanical and boring, but there are\nsome interesting parts:\n- It adds a few new methods to `ThinVec`.\n- It implements `MapInPlace` for `ThinVec`, and introduces a macro to\n  avoid the repetition of this trait for `Vec`, `SmallVec`, and\n  `ThinVec`.\n\nOverall, it makes the code a little nicer, and has little effect on\nperformance. But it is a precursor to removing\n`rustc_data_structures::thin_vec::ThinVec` and replacing it with\n`thin_vec::ThinVec`, which is implemented more efficiently.", "tree": {"sha": "b04ef71fbc5262172d6a67d8dea592c8d16f2eda", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b04ef71fbc5262172d6a67d8dea592c8d16f2eda"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05a0dfe8cd4db51a08d11ab24cc1586c833e2df1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05a0dfe8cd4db51a08d11ab24cc1586c833e2df1", "html_url": "https://github.com/rust-lang/rust/commit/05a0dfe8cd4db51a08d11ab24cc1586c833e2df1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05a0dfe8cd4db51a08d11ab24cc1586c833e2df1/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6884e045bb8e03f6ee0a23454ac679aea1729c75", "url": "https://api.github.com/repos/rust-lang/rust/commits/6884e045bb8e03f6ee0a23454ac679aea1729c75", "html_url": "https://github.com/rust-lang/rust/commit/6884e045bb8e03f6ee0a23454ac679aea1729c75"}], "stats": {"total": 19, "additions": 8, "deletions": 11}, "files": [{"sha": "f5c1ee5fdd12130d28e470299c246d0846de8ef5", "filename": "src/attr.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/05a0dfe8cd4db51a08d11ab24cc1586c833e2df1/src%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05a0dfe8cd4db51a08d11ab24cc1586c833e2df1/src%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fattr.rs?ref=05a0dfe8cd4db51a08d11ab24cc1586c833e2df1", "patch": "@@ -49,10 +49,7 @@ pub(crate) fn get_span_without_attrs(stmt: &ast::Stmt) -> Span {\n }\n \n /// Returns attributes that are within `outer_span`.\n-pub(crate) fn filter_inline_attrs(\n-    attrs: &[ast::Attribute],\n-    outer_span: Span,\n-) -> Vec<ast::Attribute> {\n+pub(crate) fn filter_inline_attrs(attrs: &[ast::Attribute], outer_span: Span) -> ast::AttrVec {\n     attrs\n         .iter()\n         .filter(|a| outer_span.lo() <= a.span.lo() && a.span.hi() <= outer_span.hi())"}, {"sha": "b6530c69243ed1c16c056cffdc358763fb7b8e15", "filename": "src/imports.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05a0dfe8cd4db51a08d11ab24cc1586c833e2df1/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05a0dfe8cd4db51a08d11ab24cc1586c833e2df1/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=05a0dfe8cd4db51a08d11ab24cc1586c833e2df1", "patch": "@@ -116,7 +116,7 @@ pub(crate) struct UseTree {\n     // Additional fields for top level use items.\n     // Should we have another struct for top-level use items rather than reusing this?\n     visibility: Option<ast::Visibility>,\n-    attrs: Option<Vec<ast::Attribute>>,\n+    attrs: Option<ast::AttrVec>,\n }\n \n impl PartialEq for UseTree {\n@@ -417,7 +417,7 @@ impl UseTree {\n         list_item: Option<ListItem>,\n         visibility: Option<ast::Visibility>,\n         opt_lo: Option<BytePos>,\n-        attrs: Option<Vec<ast::Attribute>>,\n+        attrs: Option<ast::AttrVec>,\n     ) -> UseTree {\n         let span = if let Some(lo) = opt_lo {\n             mk_sp(lo, a.span.hi())"}, {"sha": "7a0d1736c59a66ae729b9305bb049c71921d925c", "filename": "src/modules.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/05a0dfe8cd4db51a08d11ab24cc1586c833e2df1/src%2Fmodules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05a0dfe8cd4db51a08d11ab24cc1586c833e2df1/src%2Fmodules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmodules.rs?ref=05a0dfe8cd4db51a08d11ab24cc1586c833e2df1", "patch": "@@ -26,7 +26,7 @@ type FileModMap<'ast> = BTreeMap<FileName, Module<'ast>>;\n pub(crate) struct Module<'a> {\n     ast_mod_kind: Option<Cow<'a, ast::ModKind>>,\n     pub(crate) items: Cow<'a, Vec<rustc_ast::ptr::P<ast::Item>>>,\n-    inner_attr: Vec<ast::Attribute>,\n+    inner_attr: ast::AttrVec,\n     pub(crate) span: Span,\n }\n \n@@ -35,7 +35,7 @@ impl<'a> Module<'a> {\n         mod_span: Span,\n         ast_mod_kind: Option<Cow<'a, ast::ModKind>>,\n         mod_items: Cow<'a, Vec<rustc_ast::ptr::P<ast::Item>>>,\n-        mod_attrs: Cow<'a, Vec<ast::Attribute>>,\n+        mod_attrs: Cow<'a, ast::AttrVec>,\n     ) -> Self {\n         let inner_attr = mod_attrs\n             .iter()\n@@ -158,7 +158,7 @@ impl<'ast, 'sess, 'c> ModResolver<'ast, 'sess> {\n                         module_item.item.span,\n                         Some(Cow::Owned(sub_mod_kind.clone())),\n                         Cow::Owned(vec![]),\n-                        Cow::Owned(vec![]),\n+                        Cow::Owned(ast::AttrVec::new()),\n                     ),\n                 )?;\n             }\n@@ -185,7 +185,7 @@ impl<'ast, 'sess, 'c> ModResolver<'ast, 'sess> {\n                         span,\n                         Some(Cow::Owned(sub_mod_kind.clone())),\n                         Cow::Owned(vec![]),\n-                        Cow::Owned(vec![]),\n+                        Cow::Owned(ast::AttrVec::new()),\n                     ),\n                 )?;\n             }"}, {"sha": "e0bd065518b3db5f7e9016ba428e755086c8a923", "filename": "src/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05a0dfe8cd4db51a08d11ab24cc1586c833e2df1/src%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05a0dfe8cd4db51a08d11ab24cc1586c833e2df1/src%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparse%2Fparser.rs?ref=05a0dfe8cd4db51a08d11ab24cc1586c833e2df1", "patch": "@@ -109,7 +109,7 @@ impl<'a> Parser<'a> {\n         sess: &'a ParseSess,\n         path: &Path,\n         span: Span,\n-    ) -> Result<(Vec<ast::Attribute>, Vec<ptr::P<ast::Item>>, Span), ParserError> {\n+    ) -> Result<(ast::AttrVec, Vec<ptr::P<ast::Item>>, Span), ParserError> {\n         let result = catch_unwind(AssertUnwindSafe(|| {\n             let mut parser = new_parser_from_file(sess.inner(), path, Some(span));\n             match parser.parse_mod(&TokenKind::Eof) {"}]}