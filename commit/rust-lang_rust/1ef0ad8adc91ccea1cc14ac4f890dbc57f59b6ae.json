{"sha": "1ef0ad8adc91ccea1cc14ac4f890dbc57f59b6ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlZjBhZDhhZGM5MWNjZWExY2MxNGFjNGY4OTBkYmM1N2Y1OWI2YWU=", "commit": {"author": {"name": "Peter Elmers", "email": "peter.elmers@yahoo.com", "date": "2015-06-02T19:21:49Z"}, "committer": {"name": "Peter Elmers", "email": "peter.elmers@yahoo.com", "date": "2015-06-02T19:21:49Z"}, "message": "Change &String[..] to just &String, since it coerces to &str automatically.", "tree": {"sha": "7d287b099d76b4e6ad87f636e4b31d1e4f782e50", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d287b099d76b4e6ad87f636e4b31d1e4f782e50"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ef0ad8adc91ccea1cc14ac4f890dbc57f59b6ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ef0ad8adc91ccea1cc14ac4f890dbc57f59b6ae", "html_url": "https://github.com/rust-lang/rust/commit/1ef0ad8adc91ccea1cc14ac4f890dbc57f59b6ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ef0ad8adc91ccea1cc14ac4f890dbc57f59b6ae/comments", "author": {"login": "pelmers", "id": 2406051, "node_id": "MDQ6VXNlcjI0MDYwNTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2406051?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pelmers", "html_url": "https://github.com/pelmers", "followers_url": "https://api.github.com/users/pelmers/followers", "following_url": "https://api.github.com/users/pelmers/following{/other_user}", "gists_url": "https://api.github.com/users/pelmers/gists{/gist_id}", "starred_url": "https://api.github.com/users/pelmers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pelmers/subscriptions", "organizations_url": "https://api.github.com/users/pelmers/orgs", "repos_url": "https://api.github.com/users/pelmers/repos", "events_url": "https://api.github.com/users/pelmers/events{/privacy}", "received_events_url": "https://api.github.com/users/pelmers/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pelmers", "id": 2406051, "node_id": "MDQ6VXNlcjI0MDYwNTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2406051?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pelmers", "html_url": "https://github.com/pelmers", "followers_url": "https://api.github.com/users/pelmers/followers", "following_url": "https://api.github.com/users/pelmers/following{/other_user}", "gists_url": "https://api.github.com/users/pelmers/gists{/gist_id}", "starred_url": "https://api.github.com/users/pelmers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pelmers/subscriptions", "organizations_url": "https://api.github.com/users/pelmers/orgs", "repos_url": "https://api.github.com/users/pelmers/repos", "events_url": "https://api.github.com/users/pelmers/events{/privacy}", "received_events_url": "https://api.github.com/users/pelmers/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6812ca1cc8c0dadb87f3866fab217ebe831a1fe1", "url": "https://api.github.com/repos/rust-lang/rust/commits/6812ca1cc8c0dadb87f3866fab217ebe831a1fe1", "html_url": "https://github.com/rust-lang/rust/commit/6812ca1cc8c0dadb87f3866fab217ebe831a1fe1"}], "stats": {"total": 52, "additions": 26, "deletions": 26}, "files": [{"sha": "0513653eb24f5d26bdbb5dbaae59cc58a0624e57", "filename": "src/librustc_trans/save/dump_csv.rs", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/1ef0ad8adc91ccea1cc14ac4f890dbc57f59b6ae/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ef0ad8adc91ccea1cc14ac4f890dbc57f59b6ae/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs?ref=1ef0ad8adc91ccea1cc14ac4f890dbc57f59b6ae", "patch": "@@ -169,7 +169,7 @@ impl <'l, 'tcx> DumpCsvVisitor<'l, 'tcx> {\n             };\n             self.fmt.sub_mod_ref_str(path.span,\n                                      *span,\n-                                     &qualname[..],\n+                                     &qualname,\n                                      self.cur_scope);\n         }\n     }\n@@ -192,7 +192,7 @@ impl <'l, 'tcx> DumpCsvVisitor<'l, 'tcx> {\n             };\n             self.fmt.sub_mod_ref_str(path.span,\n                                      *span,\n-                                     &qualname[..],\n+                                     &qualname,\n                                      self.cur_scope);\n         }\n     }\n@@ -211,7 +211,7 @@ impl <'l, 'tcx> DumpCsvVisitor<'l, 'tcx> {\n         let (ref span, ref qualname) = sub_paths[len-2];\n         self.fmt.sub_type_ref_str(path.span,\n                                   *span,\n-                                  &qualname[..]);\n+                                  &qualname);\n \n         // write the other sub-paths\n         if len <= 2 {\n@@ -221,7 +221,7 @@ impl <'l, 'tcx> DumpCsvVisitor<'l, 'tcx> {\n         for &(ref span, ref qualname) in sub_paths {\n             self.fmt.sub_mod_ref_str(path.span,\n                                      *span,\n-                                     &qualname[..],\n+                                     &qualname,\n                                      self.cur_scope);\n         }\n     }\n@@ -293,7 +293,7 @@ impl <'l, 'tcx> DumpCsvVisitor<'l, 'tcx> {\n                                     id,\n                                     qualname,\n                                     &path_to_string(p),\n-                                    &typ[..]);\n+                                    &typ);\n             }\n         }\n     }\n@@ -451,9 +451,9 @@ impl <'l, 'tcx> DumpCsvVisitor<'l, 'tcx> {\n                     Some(sub_span) => self.fmt.field_str(field.span,\n                                                          Some(sub_span),\n                                                          field.node.id,\n-                                                         &name[..],\n-                                                         &qualname[..],\n-                                                         &typ[..],\n+                                                         &name,\n+                                                         &qualname,\n+                                                         &typ,\n                                                          scope_id),\n                     None => self.sess.span_bug(field.span,\n                                                &format!(\"Could not find sub-span for field {}\",\n@@ -485,7 +485,7 @@ impl <'l, 'tcx> DumpCsvVisitor<'l, 'tcx> {\n             self.fmt.typedef_str(full_span,\n                                  Some(*param_ss),\n                                  param.id,\n-                                 &name[..],\n+                                 &name,\n                                  \"\");\n         }\n         self.visit_generics(generics);\n@@ -561,7 +561,7 @@ impl <'l, 'tcx> DumpCsvVisitor<'l, 'tcx> {\n                             sub_span,\n                             id,\n                             &get_ident((*ident).clone()),\n-                            &qualname[..],\n+                            &qualname,\n                             &self.span.snippet(expr.span),\n                             &ty_to_string(&*typ),\n                             self.cur_scope);\n@@ -587,17 +587,17 @@ impl <'l, 'tcx> DumpCsvVisitor<'l, 'tcx> {\n                             sub_span,\n                             item.id,\n                             ctor_id,\n-                            &qualname[..],\n+                            &qualname,\n                             self.cur_scope,\n-                            &val[..]);\n+                            &val);\n \n         // fields\n         for field in &def.fields {\n-            self.process_struct_field_def(field, &qualname[..], item.id);\n+            self.process_struct_field_def(field, &qualname, item.id);\n             self.visit_ty(&*field.node.ty);\n         }\n \n-        self.process_generic_params(ty_params, item.span, &qualname[..], item.id);\n+        self.process_generic_params(ty_params, item.span, &qualname, item.id);\n     }\n \n     fn process_enum(&mut self,\n@@ -722,9 +722,9 @@ impl <'l, 'tcx> DumpCsvVisitor<'l, 'tcx> {\n         self.fmt.trait_str(item.span,\n                            sub_span,\n                            item.id,\n-                           &qualname[..],\n+                           &qualname,\n                            self.cur_scope,\n-                           &val[..]);\n+                           &val);\n \n         // super-traits\n         for super_bound in &**trait_refs {\n@@ -756,7 +756,7 @@ impl <'l, 'tcx> DumpCsvVisitor<'l, 'tcx> {\n         }\n \n         // walk generics and methods\n-        self.process_generic_params(generics, item.span, &qualname[..], item.id);\n+        self.process_generic_params(generics, item.span, &qualname, item.id);\n         for method in methods {\n             self.visit_trait_item(method)\n         }\n@@ -996,7 +996,7 @@ impl <'l, 'tcx> DumpCsvVisitor<'l, 'tcx> {\n                                self.cur_scope);\n \n         // walk receiver and args\n-        visit::walk_exprs(self, &args[..]);\n+        visit::walk_exprs(self, &args);\n     }\n \n     fn process_pat(&mut self, p:&ast::Pat) {\n@@ -1155,7 +1155,7 @@ impl<'l, 'tcx, 'v> Visitor<'v> for DumpCsvVisitor<'l, 'tcx> {\n                                           item.id,\n                                           cnum,\n                                           name,\n-                                          &location[..],\n+                                          &location,\n                                           self.cur_scope);\n             }\n             ast::ItemFn(ref decl, _, _, _, ref ty_params, ref body) =>\n@@ -1190,8 +1190,8 @@ impl<'l, 'tcx, 'v> Visitor<'v> for DumpCsvVisitor<'l, 'tcx> {\n                 self.fmt.typedef_str(item.span,\n                                      sub_span,\n                                      item.id,\n-                                     &qualname[..],\n-                                     &value[..]);\n+                                     &qualname,\n+                                     &value);\n \n                 self.visit_ty(&**ty);\n                 self.process_generic_params(ty_params, item.span, &qualname, item.id);\n@@ -1343,7 +1343,7 @@ impl<'l, 'tcx, 'v> Visitor<'v> for DumpCsvVisitor<'l, 'tcx> {\n \n                 let mut id = String::from_str(\"$\");\n                 id.push_str(&ex.id.to_string());\n-                self.process_formals(&decl.inputs, &id[..]);\n+                self.process_formals(&decl.inputs, &id);\n \n                 // walk arg and return types\n                 for arg in &decl.inputs {\n@@ -1403,7 +1403,7 @@ impl<'l, 'tcx, 'v> Visitor<'v> for DumpCsvVisitor<'l, 'tcx> {\n                                           Some(p.span),\n                                           id,\n                                           &path_to_string(p),\n-                                          &value[..],\n+                                          &value,\n                                           \"\")\n                 }\n                 def::DefVariant(..) | def::DefTy(..) | def::DefStruct(..) => {\n@@ -1461,8 +1461,8 @@ impl<'l, 'tcx, 'v> Visitor<'v> for DumpCsvVisitor<'l, 'tcx> {\n                                   sub_span,\n                                   id,\n                                   &path_to_string(p),\n-                                  &value[..],\n-                                  &typ[..]);\n+                                  &value,\n+                                  &typ);\n         }\n \n         // Just walk the initialiser and type (don't want to walk the pattern again)."}, {"sha": "c6dc1c9b7074eff3c8c1be70086f09c0445fae25", "filename": "src/librustc_trans/save/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ef0ad8adc91ccea1cc14ac4f890dbc57f59b6ae/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ef0ad8adc91ccea1cc14ac4f890dbc57f59b6ae/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fmod.rs?ref=1ef0ad8adc91ccea1cc14ac4f890dbc57f59b6ae", "patch": "@@ -367,7 +367,7 @@ pub fn process_crate(sess: &Session,\n \n     let mut visitor = dump_csv::DumpCsvVisitor::new(sess, analysis, output_file);\n \n-    visitor.dump_crate_info(&cratename[..], krate);\n+    visitor.dump_crate_info(&cratename, krate);\n     visit::walk_crate(&mut visitor, krate);\n }\n "}]}