{"sha": "23d9211f1e2413243590757b68ec18b1fbc5d91f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzZDkyMTFmMWUyNDEzMjQzNTkwNzU3YjY4ZWMxOGIxZmJjNWQ5MWY=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-02-19T22:02:10Z"}, "committer": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-02-20T16:40:04Z"}, "message": "Flatten `for` loop using iterator combinators.", "tree": {"sha": "c901b6bda78b52de63c453a69dd91842cea595bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c901b6bda78b52de63c453a69dd91842cea595bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23d9211f1e2413243590757b68ec18b1fbc5d91f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23d9211f1e2413243590757b68ec18b1fbc5d91f", "html_url": "https://github.com/rust-lang/rust/commit/23d9211f1e2413243590757b68ec18b1fbc5d91f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23d9211f1e2413243590757b68ec18b1fbc5d91f/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10639d7958e951bb5478750e8fcce3eeda868304", "url": "https://api.github.com/repos/rust-lang/rust/commits/10639d7958e951bb5478750e8fcce3eeda868304", "html_url": "https://github.com/rust-lang/rust/commit/10639d7958e951bb5478750e8fcce3eeda868304"}], "stats": {"total": 98, "additions": 50, "deletions": 48}, "files": [{"sha": "f850fd97727810ca3230bed219a0d9e2b579443b", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 50, "deletions": 48, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/23d9211f1e2413243590757b68ec18b1fbc5d91f/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23d9211f1e2413243590757b68ec18b1fbc5d91f/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=23d9211f1e2413243590757b68ec18b1fbc5d91f", "patch": "@@ -266,61 +266,63 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n \n         let span = obligation.cause.span;\n         let mut report = None;\n-        for item in self.tcx.get_attrs(def_id).iter() {\n-            if item.check_name(\"rustc_on_unimplemented\") {\n-                let err_sp = item.meta().span.substitute_dummy(span);\n-                let trait_str = self.tcx.item_path_str(trait_ref.def_id);\n-                if let Some(istring) = item.value_str() {\n-                    let istring = &*istring.as_str();\n-                    let generics = self.tcx.item_generics(trait_ref.def_id);\n-                    let generic_map = generics.types.iter().map(|param| {\n-                        (param.name.as_str().to_string(),\n-                         trait_ref.substs.type_for_def(param).to_string())\n-                    }).collect::<FxHashMap<String, String>>();\n-                    let parser = Parser::new(istring);\n-                    let mut errored = false;\n-                    let err: String = parser.filter_map(|p| {\n-                        match p {\n-                            Piece::String(s) => Some(s),\n-                            Piece::NextArgument(a) => match a.position {\n-                                Position::ArgumentNamed(s) => match generic_map.get(s) {\n-                                    Some(val) => Some(val),\n-                                    None => {\n-                                        span_err!(self.tcx.sess, err_sp, E0272,\n-                                                       \"the #[rustc_on_unimplemented] \\\n-                                                                attribute on \\\n-                                                                trait definition for {} refers to \\\n-                                                                non-existent type parameter {}\",\n-                                                               trait_str, s);\n-                                        errored = true;\n-                                        None\n-                                    }\n-                                },\n-                                _ => {\n-                                    span_err!(self.tcx.sess, err_sp, E0273,\n-                                              \"the #[rustc_on_unimplemented] attribute \\\n-                                               on trait definition for {} must have \\\n-                                               named format arguments, eg \\\n-                                               `#[rustc_on_unimplemented = \\\n-                                                \\\"foo {{T}}\\\"]`\", trait_str);\n+        if let Some(item) = self.tcx\n+            .get_attrs(def_id)\n+            .into_iter()\n+            .filter(|a| a.check_name(\"rustc_on_unimplemented\"))\n+            .next()\n+        {\n+            let err_sp = item.meta().span.substitute_dummy(span);\n+            let trait_str = self.tcx.item_path_str(trait_ref.def_id);\n+            if let Some(istring) = item.value_str() {\n+                let istring = &*istring.as_str();\n+                let generics = self.tcx.item_generics(trait_ref.def_id);\n+                let generic_map = generics.types.iter().map(|param| {\n+                    (param.name.as_str().to_string(),\n+                        trait_ref.substs.type_for_def(param).to_string())\n+                }).collect::<FxHashMap<String, String>>();\n+                let parser = Parser::new(istring);\n+                let mut errored = false;\n+                let err: String = parser.filter_map(|p| {\n+                    match p {\n+                        Piece::String(s) => Some(s),\n+                        Piece::NextArgument(a) => match a.position {\n+                            Position::ArgumentNamed(s) => match generic_map.get(s) {\n+                                Some(val) => Some(val),\n+                                None => {\n+                                    span_err!(self.tcx.sess, err_sp, E0272,\n+                                                    \"the #[rustc_on_unimplemented] \\\n+                                                            attribute on \\\n+                                                            trait definition for {} refers to \\\n+                                                            non-existent type parameter {}\",\n+                                                            trait_str, s);\n                                     errored = true;\n                                     None\n                                 }\n+                            },\n+                            _ => {\n+                                span_err!(self.tcx.sess, err_sp, E0273,\n+                                            \"the #[rustc_on_unimplemented] attribute \\\n+                                            on trait definition for {} must have \\\n+                                            named format arguments, eg \\\n+                                            `#[rustc_on_unimplemented = \\\n+                                            \\\"foo {{T}}\\\"]`\", trait_str);\n+                                errored = true;\n+                                None\n                             }\n                         }\n-                    }).collect();\n-                    // Report only if the format string checks out\n-                    if !errored {\n-                        report = Some(err);\n                     }\n-                } else {\n-                    span_err!(self.tcx.sess, err_sp, E0274,\n-                                            \"the #[rustc_on_unimplemented] attribute on \\\n-                                                     trait definition for {} must have a value, \\\n-                                                     eg `#[rustc_on_unimplemented = \\\"foo\\\"]`\",\n-                                                     trait_str);\n+                }).collect();\n+                // Report only if the format string checks out\n+                if !errored {\n+                    report = Some(err);\n                 }\n-                break;\n+            } else {\n+                span_err!(self.tcx.sess, err_sp, E0274,\n+                                        \"the #[rustc_on_unimplemented] attribute on \\\n+                                                    trait definition for {} must have a value, \\\n+                                                    eg `#[rustc_on_unimplemented = \\\"foo\\\"]`\",\n+                                                    trait_str);\n             }\n         }\n         report"}]}