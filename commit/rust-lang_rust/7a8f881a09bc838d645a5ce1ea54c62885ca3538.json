{"sha": "7a8f881a09bc838d645a5ce1ea54c62885ca3538", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhOGY4ODFhMDliYzgzOGQ2NDVhNWNlMWVhNTRjNjI4ODVjYTM1Mzg=", "commit": {"author": {"name": "vsrs", "email": "vit@conrlab.com", "date": "2021-08-23T17:31:54Z"}, "committer": {"name": "vsrs", "email": "vit@conrlab.com", "date": "2021-08-23T17:31:54Z"}, "message": "Sort enum variant", "tree": {"sha": "45579a3c38be6127678868d0c06b101530bdfc61", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/45579a3c38be6127678868d0c06b101530bdfc61"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a8f881a09bc838d645a5ce1ea54c62885ca3538", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a8f881a09bc838d645a5ce1ea54c62885ca3538", "html_url": "https://github.com/rust-lang/rust/commit/7a8f881a09bc838d645a5ce1ea54c62885ca3538", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a8f881a09bc838d645a5ce1ea54c62885ca3538/comments", "author": {"login": "vsrs", "id": 62505555, "node_id": "MDQ6VXNlcjYyNTA1NTU1", "avatar_url": "https://avatars.githubusercontent.com/u/62505555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vsrs", "html_url": "https://github.com/vsrs", "followers_url": "https://api.github.com/users/vsrs/followers", "following_url": "https://api.github.com/users/vsrs/following{/other_user}", "gists_url": "https://api.github.com/users/vsrs/gists{/gist_id}", "starred_url": "https://api.github.com/users/vsrs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vsrs/subscriptions", "organizations_url": "https://api.github.com/users/vsrs/orgs", "repos_url": "https://api.github.com/users/vsrs/repos", "events_url": "https://api.github.com/users/vsrs/events{/privacy}", "received_events_url": "https://api.github.com/users/vsrs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vsrs", "id": 62505555, "node_id": "MDQ6VXNlcjYyNTA1NTU1", "avatar_url": "https://avatars.githubusercontent.com/u/62505555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vsrs", "html_url": "https://github.com/vsrs", "followers_url": "https://api.github.com/users/vsrs/followers", "following_url": "https://api.github.com/users/vsrs/following{/other_user}", "gists_url": "https://api.github.com/users/vsrs/gists{/gist_id}", "starred_url": "https://api.github.com/users/vsrs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vsrs/subscriptions", "organizations_url": "https://api.github.com/users/vsrs/orgs", "repos_url": "https://api.github.com/users/vsrs/repos", "events_url": "https://api.github.com/users/vsrs/events{/privacy}", "received_events_url": "https://api.github.com/users/vsrs/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f696fb51c335d700c2a4bda5a4e613272ded341f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f696fb51c335d700c2a4bda5a4e613272ded341f", "html_url": "https://github.com/rust-lang/rust/commit/f696fb51c335d700c2a4bda5a4e613272ded341f"}], "stats": {"total": 39, "additions": 31, "deletions": 8}, "files": [{"sha": "f318c048b1141d55b4a00fc66f7adc807788e67d", "filename": "crates/ide_assists/src/handlers/sort_items.rs", "status": "modified", "additions": 31, "deletions": 8, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/7a8f881a09bc838d645a5ce1ea54c62885ca3538/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fsort_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a8f881a09bc838d645a5ce1ea54c62885ca3538/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fsort_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fsort_items.rs?ref=7a8f881a09bc838d645a5ce1ea54c62885ca3538", "patch": "@@ -92,15 +92,11 @@ pub(crate) fn sort_items(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     } else if let Some(impl_ast) = ctx.find_node_at_offset::<ast::Impl>() {\n         add_sort_methods_assist(acc, impl_ast.assoc_item_list()?)\n     } else if let Some(struct_ast) = ctx.find_node_at_offset::<ast::Struct>() {\n-        match struct_ast.field_list() {\n-            Some(ast::FieldList::RecordFieldList(it)) => add_sort_fields_assist(acc, it),\n-            _ => {\n-                cov_mark::hit!(not_applicable_if_sorted_or_empty_or_single);\n-                None\n-            }\n-        }\n+        add_sort_field_list_assist(acc, struct_ast.field_list())\n     } else if let Some(union_ast) = ctx.find_node_at_offset::<ast::Union>() {\n         add_sort_fields_assist(acc, union_ast.record_field_list()?)\n+    } else if let Some(variant_ast) = ctx.find_node_at_offset::<ast::Variant>() {\n+        add_sort_field_list_assist(acc, variant_ast.field_list())\n     } else if let Some(enum_struct_variant_ast) = ctx.find_node_at_offset::<ast::RecordFieldList>()\n     {\n         // should be above enum and below struct\n@@ -140,6 +136,16 @@ impl AddRewrite for Assists {\n     }\n }\n \n+fn add_sort_field_list_assist(acc: &mut Assists, field_list: Option<ast::FieldList>) -> Option<()> {\n+    match field_list {\n+        Some(ast::FieldList::RecordFieldList(it)) => add_sort_fields_assist(acc, it),\n+        _ => {\n+            cov_mark::hit!(not_applicable_if_sorted_or_empty_or_single);\n+            None\n+        }\n+    }\n+}\n+\n fn add_sort_methods_assist(acc: &mut Assists, item_list: ast::AssocItemList) -> Option<()> {\n     let methods = get_methods(&item_list);\n     let sorted = sort_by_name(&methods);\n@@ -541,7 +547,7 @@ enum Bar {\n     }\n \n     #[test]\n-    fn sort_struct_enum_variant() {\n+    fn sort_struct_enum_variant_fields() {\n         check_assist(\n             sort_items,\n             r#\"\n@@ -558,6 +564,23 @@ enum Bar {\n     b = 14,\n     a,\n     c(u32, usize),\n+}\n+        \"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn sort_struct_enum_variant() {\n+        check_assist(\n+            sort_items,\n+            r#\"\n+enum Bar {\n+    $0d$0{ second: usize, first: u32 },\n+}\n+        \"#,\n+            r#\"\n+enum Bar {\n+    d{ first: u32, second: usize },\n }\n         \"#,\n         )"}]}