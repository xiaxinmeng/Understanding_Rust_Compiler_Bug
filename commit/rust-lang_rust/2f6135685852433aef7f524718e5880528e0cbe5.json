{"sha": "2f6135685852433aef7f524718e5880528e0cbe5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmNjEzNTY4NTg1MjQzM2FlZjdmNTI0NzE4ZTU4ODA1MjhlMGNiZTU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-06-22T20:38:17Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-06-22T20:41:13Z"}, "message": "permit offsetting a NULL-ptr by 0, to fix hashmap test", "tree": {"sha": "067dfd9d2614581cae830a997f2fba762778d2cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/067dfd9d2614581cae830a997f2fba762778d2cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f6135685852433aef7f524718e5880528e0cbe5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f6135685852433aef7f524718e5880528e0cbe5", "html_url": "https://github.com/rust-lang/rust/commit/2f6135685852433aef7f524718e5880528e0cbe5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f6135685852433aef7f524718e5880528e0cbe5/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57391bab1098cb75bc9a1cfaeb4a3ecb05386555", "url": "https://api.github.com/repos/rust-lang/rust/commits/57391bab1098cb75bc9a1cfaeb4a3ecb05386555", "html_url": "https://github.com/rust-lang/rust/commit/57391bab1098cb75bc9a1cfaeb4a3ecb05386555"}], "stats": {"total": 21, "additions": 16, "deletions": 5}, "files": [{"sha": "ee805695c510fdca5df2b00168da88a7526b3744", "filename": "src/error.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2f6135685852433aef7f524718e5880528e0cbe5/src%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6135685852433aef7f524718e5880528e0cbe5/src%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ferror.rs?ref=2f6135685852433aef7f524718e5880528e0cbe5", "patch": "@@ -21,6 +21,7 @@ pub enum EvalError<'tcx> {\n         access: bool,\n         allocation_size: u64,\n     },\n+    NullPointerOutOfBounds,\n     ReadPointerAsBytes,\n     ReadBytesAsPointer,\n     InvalidPointerMath,\n@@ -80,12 +81,14 @@ impl<'tcx> Error for EvalError<'tcx> {\n                 \"invalid enum discriminant value read\",\n             EvalError::PointerOutOfBounds { .. } =>\n                 \"pointer offset outside bounds of allocation\",\n+            EvalError::NullPointerOutOfBounds =>\n+                \"invalid NULL pointer offset\",\n             EvalError::ReadPointerAsBytes =>\n                 \"a raw memory access tried to access part of a pointer value as raw bytes\",\n             EvalError::ReadBytesAsPointer =>\n                 \"a memory access tried to interpret some bytes as a pointer\",\n             EvalError::InvalidPointerMath =>\n-                \"attempted to do math or a comparison on pointers into different allocations\",\n+                \"attempted to do invalid arithmetic on pointers that would leak base addresses, e.g. compating pointers into different allocations\",\n             EvalError::ReadUndefBytes =>\n                 \"attempted to read undefined bytes\",\n             EvalError::DeadLocal =>"}, {"sha": "f4e7c19d935cc8f646711c5dc3030c246138032a", "filename": "src/eval_context.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2f6135685852433aef7f524718e5880528e0cbe5/src%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6135685852433aef7f524718e5880528e0cbe5/src%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval_context.rs?ref=2f6135685852433aef7f524718e5880528e0cbe5", "patch": "@@ -892,18 +892,26 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n     }\n \n     pub(super) fn pointer_offset(&self, ptr: PrimVal, pointee_ty: Ty<'tcx>, offset: i64) -> EvalResult<'tcx, PrimVal> {\n-        if ptr.is_null()? { // rule out NULL pointers\n-            return Err(EvalError::InvalidPointerMath);\n+        // This function raises an error if the offset moves the pointer outside of its allocation.  We consider\n+        // ZSTs their own huge allocation that doesn't overlap with anything (and nothing moves in there because the size is 0).\n+        // We also consider the NULL pointer its own separate allocation, and all the remaining integers pointers their own\n+        // allocation.\n+\n+        if ptr.is_null()? { // NULL pointers must only be offset by 0\n+            return if offset == 0 { Ok(ptr) } else { Err(EvalError::NullPointerOutOfBounds) };\n         }\n         // FIXME: assuming here that type size is < i64::max_value()\n         let pointee_size = self.type_size(pointee_ty)?.expect(\"cannot offset a pointer to an unsized type\") as i64;\n         return if let Some(offset) = offset.checked_mul(pointee_size) {\n             let ptr = ptr.signed_offset(offset, self.memory.layout)?;\n             // Do not do bounds-checking for integers or ZST; they can never alias a normal pointer anyway.\n             if let PrimVal::Ptr(ptr) = ptr {\n-                if !ptr.points_to_zst() {\n+                if !(ptr.points_to_zst() && pointee_size == 0) {\n                     self.memory.check_bounds(ptr, false)?;\n                 }\n+            } else if ptr.is_null()? {\n+                // We moved *to* a NULL pointer.  That seems wrong, LLVM considers the NULL pointer its own small allocation.  Reject this, for now.\n+                return Err(EvalError::NullPointerOutOfBounds);\n             }\n             Ok(ptr)\n         } else {"}, {"sha": "245b7527c55b27a6234ebccd1d4aeaeed127019b", "filename": "tests/compile-fail/pointers_to_different_allocations_are_unorderable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f6135685852433aef7f524718e5880528e0cbe5/tests%2Fcompile-fail%2Fpointers_to_different_allocations_are_unorderable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f6135685852433aef7f524718e5880528e0cbe5/tests%2Fcompile-fail%2Fpointers_to_different_allocations_are_unorderable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fpointers_to_different_allocations_are_unorderable.rs?ref=2f6135685852433aef7f524718e5880528e0cbe5", "patch": "@@ -1,7 +1,7 @@\n fn main() {\n     let x: *const u8 = &1;\n     let y: *const u8 = &2;\n-    if x < y { //~ ERROR: attempted to do math or a comparison on pointers into different allocations\n+    if x < y { //~ ERROR: attempted to do invalid arithmetic on pointers\n         unreachable!()\n     }\n }"}]}