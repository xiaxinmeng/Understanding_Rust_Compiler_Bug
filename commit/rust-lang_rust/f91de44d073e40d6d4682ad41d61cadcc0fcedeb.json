{"sha": "f91de44d073e40d6d4682ad41d61cadcc0fcedeb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5MWRlNDRkMDczZTQwZDZkNDY4MmFkNDFkNjFjYWRjYzBmY2VkZWI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-22T04:12:51Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-27T06:39:15Z"}, "message": "extract parse_generic_arg", "tree": {"sha": "72fce9edb228089cc8418571615e30baedfa19cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72fce9edb228089cc8418571615e30baedfa19cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f91de44d073e40d6d4682ad41d61cadcc0fcedeb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f91de44d073e40d6d4682ad41d61cadcc0fcedeb", "html_url": "https://github.com/rust-lang/rust/commit/f91de44d073e40d6d4682ad41d61cadcc0fcedeb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f91de44d073e40d6d4682ad41d61cadcc0fcedeb/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa4999ec6963162c38b74a4d50857d1cf2bfbc26", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa4999ec6963162c38b74a4d50857d1cf2bfbc26", "html_url": "https://github.com/rust-lang/rust/commit/aa4999ec6963162c38b74a4d50857d1cf2bfbc26"}], "stats": {"total": 22, "additions": 14, "deletions": 8}, "files": [{"sha": "f6d0f27eb18bfd4b80d184b2a6f2c6ed5b4c1524", "filename": "src/librustc_parse/parser/path.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f91de44d073e40d6d4682ad41d61cadcc0fcedeb/src%2Flibrustc_parse%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f91de44d073e40d6d4682ad41d61cadcc0fcedeb/src%2Flibrustc_parse%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fpath.rs?ref=f91de44d073e40d6d4682ad41d61cadcc0fcedeb", "patch": "@@ -399,8 +399,7 @@ impl<'a> Parser<'a> {\n \n     /// Parses a single argument in the angle arguments `<...>` of a path segment.\n     fn parse_angle_arg(&mut self) -> PResult<'a, Option<AngleBracketedArg>> {\n-        let arg = if self.check_ident()\n-            && self.look_ahead(1, |t| matches!(t.kind, token::Eq | token::Colon))\n+        if self.check_ident() && self.look_ahead(1, |t| matches!(t.kind, token::Eq | token::Colon))\n         {\n             // Parse associated type constraint.\n             let lo = self.token.span;\n@@ -422,10 +421,18 @@ impl<'a> Parser<'a> {\n             }\n \n             let constraint = AssocTyConstraint { id: ast::DUMMY_NODE_ID, ident, kind, span };\n-            AngleBracketedArg::Constraint(constraint)\n-        } else if self.check_lifetime() && self.look_ahead(1, |t| !t.is_like_plus()) {\n+            Ok(Some(AngleBracketedArg::Constraint(constraint)))\n+        } else {\n+            Ok(self.parse_generic_arg()?.map(AngleBracketedArg::Arg))\n+        }\n+    }\n+\n+    /// Parse a generic argument in a path segment.\n+    /// This does not include constraints, e.g., `Item = u8`, which is handled in `parse_angle_arg`.\n+    fn parse_generic_arg(&mut self) -> PResult<'a, Option<GenericArg>> {\n+        let arg = if self.check_lifetime() && self.look_ahead(1, |t| !t.is_like_plus()) {\n             // Parse lifetime argument.\n-            AngleBracketedArg::Arg(GenericArg::Lifetime(self.expect_lifetime()))\n+            GenericArg::Lifetime(self.expect_lifetime())\n         } else if self.check_const_arg() {\n             // Parse const argument.\n             let expr = if let token::OpenDelim(token::Brace) = self.token.kind {\n@@ -451,11 +458,10 @@ impl<'a> Parser<'a> {\n             } else {\n                 self.parse_literal_maybe_minus()?\n             };\n-            let value = AnonConst { id: ast::DUMMY_NODE_ID, value: expr };\n-            AngleBracketedArg::Arg(GenericArg::Const(value))\n+            GenericArg::Const(AnonConst { id: ast::DUMMY_NODE_ID, value: expr })\n         } else if self.check_type() {\n             // Parse type argument.\n-            AngleBracketedArg::Arg(GenericArg::Type(self.parse_ty()?))\n+            GenericArg::Type(self.parse_ty()?)\n         } else {\n             return Ok(None);\n         };"}]}