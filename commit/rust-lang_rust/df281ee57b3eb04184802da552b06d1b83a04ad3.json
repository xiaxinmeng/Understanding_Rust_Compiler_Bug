{"sha": "df281ee57b3eb04184802da552b06d1b83a04ad3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmMjgxZWU1N2IzZWIwNDE4NDgwMmRhNTUyYjA2ZDFiODNhMDRhZDM=", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-08-27T23:49:14Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-09-11T18:24:53Z"}, "message": "Only take `tcx` when it's all that's needed", "tree": {"sha": "ee8032264f91270992ac25fb04b629a3d8eed658", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee8032264f91270992ac25fb04b629a3d8eed658"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df281ee57b3eb04184802da552b06d1b83a04ad3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df281ee57b3eb04184802da552b06d1b83a04ad3", "html_url": "https://github.com/rust-lang/rust/commit/df281ee57b3eb04184802da552b06d1b83a04ad3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df281ee57b3eb04184802da552b06d1b83a04ad3/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44e6f2e90fa050c490c2d79a3c65866cb5be3b34", "url": "https://api.github.com/repos/rust-lang/rust/commits/44e6f2e90fa050c490c2d79a3c65866cb5be3b34", "html_url": "https://github.com/rust-lang/rust/commit/44e6f2e90fa050c490c2d79a3c65866cb5be3b34"}], "stats": {"total": 19, "additions": 12, "deletions": 7}, "files": [{"sha": "2c32fe305edabc2b8fcc25c7db55640f688f4497", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/df281ee57b3eb04184802da552b06d1b83a04ad3/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df281ee57b3eb04184802da552b06d1b83a04ad3/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=df281ee57b3eb04184802da552b06d1b83a04ad3", "patch": "@@ -51,6 +51,7 @@ use rustc_hir::def::CtorKind;\n use rustc_hir::def_id::DefId;\n use rustc_hir::Mutability;\n use rustc_middle::middle::stability;\n+use rustc_middle::ty::TyCtxt;\n use rustc_span::symbol::{kw, sym, Symbol};\n use serde::ser::SerializeSeq;\n use serde::{Serialize, Serializer};\n@@ -1165,7 +1166,7 @@ fn render_deref_methods(\n     }\n }\n \n-fn should_render_item(item: &clean::Item, deref_mut_: bool, cx: &Context<'_>) -> bool {\n+fn should_render_item(item: &clean::Item, deref_mut_: bool, tcx: TyCtxt<'_>) -> bool {\n     let self_type_opt = match *item.kind {\n         clean::MethodItem(ref method, _) => method.decl.self_type(),\n         clean::TyMethodItem(ref method) => method.decl.self_type(),\n@@ -1179,7 +1180,7 @@ fn should_render_item(item: &clean::Item, deref_mut_: bool, cx: &Context<'_>) ->\n                 (mutability == Mutability::Mut, false, false)\n             }\n             SelfTy::SelfExplicit(clean::ResolvedPath { did, .. }) => {\n-                (false, Some(did) == cx.tcx().lang_items().owned_box(), false)\n+                (false, Some(did) == tcx.lang_items().owned_box(), false)\n             }\n             SelfTy::SelfValue => (false, false, true),\n             _ => (false, false, false),\n@@ -1302,7 +1303,7 @@ fn render_impl(\n             && match render_mode {\n                 RenderMode::Normal => true,\n                 RenderMode::ForDeref { mut_: deref_mut_ } => {\n-                    should_render_item(&item, deref_mut_, cx)\n+                    should_render_item(&item, deref_mut_, cx.tcx())\n                 }\n             };\n \n@@ -1800,13 +1801,13 @@ fn get_methods(\n     for_deref: bool,\n     used_links: &mut FxHashSet<String>,\n     deref_mut: bool,\n-    cx: &Context<'_>,\n+    tcx: TyCtxt<'_>,\n ) -> Vec<String> {\n     i.items\n         .iter()\n         .filter_map(|item| match item.name {\n             Some(ref name) if !name.is_empty() && item.is_method() => {\n-                if !for_deref || should_render_item(item, deref_mut, cx) {\n+                if !for_deref || should_render_item(item, deref_mut, tcx) {\n                     Some(format!(\n                         \"<a href=\\\"#{}\\\">{}</a>\",\n                         get_next_url(used_links, format!(\"method.{}\", name)),\n@@ -1868,7 +1869,9 @@ fn sidebar_assoc_items(cx: &Context<'_>, out: &mut Buffer, it: &clean::Item) {\n             let mut ret = v\n                 .iter()\n                 .filter(|i| i.inner_impl().trait_.is_none())\n-                .flat_map(move |i| get_methods(i.inner_impl(), false, used_links_bor, false, cx))\n+                .flat_map(move |i| {\n+                    get_methods(i.inner_impl(), false, used_links_bor, false, cx.tcx())\n+                })\n                 .collect::<Vec<_>>();\n             if !ret.is_empty() {\n                 // We want links' order to be reproducible so we don't use unstable sort.\n@@ -2001,7 +2004,9 @@ fn sidebar_deref_methods(cx: &Context<'_>, out: &mut Buffer, impl_: &Impl, v: &V\n             let mut ret = impls\n                 .iter()\n                 .filter(|i| i.inner_impl().trait_.is_none())\n-                .flat_map(|i| get_methods(i.inner_impl(), true, &mut used_links, deref_mut, cx))\n+                .flat_map(|i| {\n+                    get_methods(i.inner_impl(), true, &mut used_links, deref_mut, cx.tcx())\n+                })\n                 .collect::<Vec<_>>();\n             if !ret.is_empty() {\n                 write!("}]}