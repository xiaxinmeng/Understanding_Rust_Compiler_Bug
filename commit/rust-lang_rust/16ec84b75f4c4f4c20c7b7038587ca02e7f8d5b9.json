{"sha": "16ec84b75f4c4f4c20c7b7038587ca02e7f8d5b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2ZWM4NGI3NWY0YzRmNGMyMGM3YjcwMzg1ODdjYTAyZTdmOGQ1Yjk=", "commit": {"author": {"name": "Robin Kruppe", "email": "robin.kruppe@gmail.com", "date": "2015-08-16T14:49:10Z"}, "committer": {"name": "Robin Kruppe", "email": "robin.kruppe@gmail.com", "date": "2015-08-16T14:49:10Z"}, "message": "Correct signature of hoedown callback for codespans", "tree": {"sha": "4a7c4ab641ff6613ebca01e4c4aaffde67976903", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a7c4ab641ff6613ebca01e4c4aaffde67976903"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16ec84b75f4c4f4c20c7b7038587ca02e7f8d5b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16ec84b75f4c4f4c20c7b7038587ca02e7f8d5b9", "html_url": "https://github.com/rust-lang/rust/commit/16ec84b75f4c4f4c20c7b7038587ca02e7f8d5b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16ec84b75f4c4f4c20c7b7038587ca02e7f8d5b9/comments", "author": null, "committer": null, "parents": [{"sha": "316f5e5acfe6e69bc7ab39b0e4feed116a86a58a", "url": "https://api.github.com/repos/rust-lang/rust/commits/316f5e5acfe6e69bc7ab39b0e4feed116a86a58a", "html_url": "https://github.com/rust-lang/rust/commit/316f5e5acfe6e69bc7ab39b0e4feed116a86a58a"}], "stats": {"total": 10, "additions": 8, "deletions": 2}, "files": [{"sha": "dd754e580729f28c7bea8b0ea41a5a0f07c5f43b", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/16ec84b75f4c4f4c20c7b7038587ca02e7f8d5b9/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16ec84b75f4c4f4c20c7b7038587ca02e7f8d5b9/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=16ec84b75f4c4f4c20c7b7038587ca02e7f8d5b9", "patch": "@@ -74,7 +74,7 @@ type headerfn = extern \"C\" fn(*mut hoedown_buffer, *const hoedown_buffer,\n                               libc::c_int, *mut libc::c_void);\n \n type codespanfn = extern \"C\" fn(*mut hoedown_buffer, *const hoedown_buffer,\n-                                *mut libc::c_void);\n+                                *mut libc::c_void) -> libc::c_int;\n \n type linkfn = extern \"C\" fn (*mut hoedown_buffer, *const hoedown_buffer,\n                              *const hoedown_buffer, *const hoedown_buffer,\n@@ -317,7 +317,11 @@ pub fn render(w: &mut fmt::Formatter, s: &str, print_toc: bool) -> fmt::Result {\n \n     reset_headers();\n \n-    extern fn codespan(ob: *mut hoedown_buffer, text: *const hoedown_buffer, _: *mut libc::c_void) {\n+    extern fn codespan(\n+        ob: *mut hoedown_buffer,\n+        text: *const hoedown_buffer,\n+        _: *mut libc::c_void,\n+    ) -> libc::c_int {\n         let content = if text.is_null() {\n             \"\".to_string()\n         } else {\n@@ -329,6 +333,8 @@ pub fn render(w: &mut fmt::Formatter, s: &str, print_toc: bool) -> fmt::Result {\n         let content = format!(\"<code>{}</code>\", Escape(&content));\n         let element = CString::new(content).unwrap();\n         unsafe { hoedown_buffer_puts(ob, element.as_ptr()); }\n+        // Return anything except 0, which would mean \"also print the code span verbatim\".\n+        1\n     }\n \n     unsafe {"}]}