{"sha": "420725f25626948ea57fdc9192e9cb30fd5a266a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyMDcyNWYyNTYyNjk0OGVhNTdmZGM5MTkyZTljYjMwZmQ1YTI2NmE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-11-05T12:44:34Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-11-05T12:44:34Z"}, "message": "Introduce var works with tail exprs", "tree": {"sha": "24b2e2b3006d66791f7305504f1af15f5b7ed7e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24b2e2b3006d66791f7305504f1af15f5b7ed7e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/420725f25626948ea57fdc9192e9cb30fd5a266a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/420725f25626948ea57fdc9192e9cb30fd5a266a", "html_url": "https://github.com/rust-lang/rust/commit/420725f25626948ea57fdc9192e9cb30fd5a266a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/420725f25626948ea57fdc9192e9cb30fd5a266a/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d7b8884811dfeed2b18cd334a188df81d33323c", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d7b8884811dfeed2b18cd334a188df81d33323c", "html_url": "https://github.com/rust-lang/rust/commit/8d7b8884811dfeed2b18cd334a188df81d33323c"}], "stats": {"total": 56, "additions": 45, "deletions": 11}, "files": [{"sha": "ef6df0d53e2e0c292fb7ff8be779b6ad5af304cf", "filename": "crates/ra_editor/src/code_actions.rs", "status": "modified", "additions": 45, "deletions": 11, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/420725f25626948ea57fdc9192e9cb30fd5a266a/crates%2Fra_editor%2Fsrc%2Fcode_actions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/420725f25626948ea57fdc9192e9cb30fd5a266a/crates%2Fra_editor%2Fsrc%2Fcode_actions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Fcode_actions.rs?ref=420725f25626948ea57fdc9192e9cb30fd5a266a", "patch": "@@ -103,35 +103,52 @@ pub fn introduce_variable<'a>(\n ) -> Option<impl FnOnce() -> LocalEdit + 'a> {\n     let node = find_covering_node(file.syntax(), range);\n     let expr = node.ancestors().filter_map(ast::Expr::cast).next()?;\n-    let anchor_stmt = expr\n-        .syntax()\n-        .ancestors()\n-        .filter_map(ast::Stmt::cast)\n-        .next()?;\n-    let indent = anchor_stmt.syntax().prev_sibling()?;\n+\n+    let anchor_stmt = ahchor_stmt(expr)?;\n+    let indent = anchor_stmt.prev_sibling()?;\n     if indent.kind() != WHITESPACE {\n         return None;\n     }\n-    Some(move || {\n+    return Some(move || {\n         let mut buf = String::new();\n         let mut edit = EditBuilder::new();\n \n         buf.push_str(\"let var_name = \");\n         expr.syntax().text().push_to(&mut buf);\n-        if expr.syntax().range().start() == anchor_stmt.syntax().range().start() {\n+        if expr.syntax().range().start() == anchor_stmt.range().start() {\n             edit.replace(expr.syntax().range(), buf);\n         } else {\n             buf.push_str(\";\");\n             indent.text().push_to(&mut buf);\n             edit.replace(expr.syntax().range(), \"var_name\".to_string());\n-            edit.insert(anchor_stmt.syntax().range().start(), buf);\n+            edit.insert(anchor_stmt.range().start(), buf);\n         }\n-        let cursor_position = anchor_stmt.syntax().range().start() + TextUnit::of_str(\"let \");\n+        let cursor_position = anchor_stmt.range().start() + TextUnit::of_str(\"let \");\n         LocalEdit {\n             edit: edit.finish(),\n             cursor_position: Some(cursor_position),\n         }\n-    })\n+    });\n+\n+    /// Statement or last in the block expression, which will follow\n+    /// the freshly introduced var.\n+    fn ahchor_stmt(expr: ast::Expr) -> Option<SyntaxNodeRef> {\n+        expr.syntax().ancestors().find(|&node| {\n+            if ast::Stmt::cast(node).is_some() {\n+                return true;\n+            }\n+            if let Some(expr) = node\n+                .parent()\n+                .and_then(ast::Block::cast)\n+                .and_then(|it| it.expr())\n+            {\n+                if expr.syntax() == node {\n+                    return true;\n+                }\n+            }\n+            false\n+        })\n+    }\n }\n \n fn non_trivia_sibling(node: SyntaxNodeRef, direction: Direction) -> Option<SyntaxNodeRef> {\n@@ -207,6 +224,7 @@ fn foo() {\n             |file, range| introduce_variable(file, range).map(|f| f()),\n         );\n     }\n+\n     #[test]\n     fn test_intrdoduce_var_expr_stmt() {\n         check_action_range(\n@@ -222,4 +240,20 @@ fn foo() {\n         );\n     }\n \n+    #[test]\n+    fn test_intrdoduce_var_last_expr() {\n+        check_action_range(\n+            \"\n+fn foo() {\n+    bar(<|>1 + 1<|>)\n+}\",\n+            \"\n+fn foo() {\n+    let <|>var_name = 1 + 1;\n+    bar(var_name)\n+}\",\n+            |file, range| introduce_variable(file, range).map(|f| f()),\n+        );\n+    }\n+\n }"}]}