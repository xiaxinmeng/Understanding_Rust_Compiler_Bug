{"sha": "e8fed074cfd8623dfe070f86f0cc3040ac33b9b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4ZmVkMDc0Y2ZkODYyM2RmZTA3MGY4NmYwY2MzMDQwYWMzM2I5YjQ=", "commit": {"author": {"name": "Georg Brandl", "email": "georg@python.org", "date": "2015-08-12T09:31:09Z"}, "committer": {"name": "Georg Brandl", "email": "georg@python.org", "date": "2015-08-12T11:21:07Z"}, "message": "new lint: warn if let-binding has unit value (fixes #74)", "tree": {"sha": "99ecd253072d7b596a186425e4d5280757aaf9a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/99ecd253072d7b596a186425e4d5280757aaf9a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e8fed074cfd8623dfe070f86f0cc3040ac33b9b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e8fed074cfd8623dfe070f86f0cc3040ac33b9b4", "html_url": "https://github.com/rust-lang/rust/commit/e8fed074cfd8623dfe070f86f0cc3040ac33b9b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e8fed074cfd8623dfe070f86f0cc3040ac33b9b4/comments", "author": {"login": "birkenfeld", "id": 144359, "node_id": "MDQ6VXNlcjE0NDM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/144359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/birkenfeld", "html_url": "https://github.com/birkenfeld", "followers_url": "https://api.github.com/users/birkenfeld/followers", "following_url": "https://api.github.com/users/birkenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/birkenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/birkenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/birkenfeld/subscriptions", "organizations_url": "https://api.github.com/users/birkenfeld/orgs", "repos_url": "https://api.github.com/users/birkenfeld/repos", "events_url": "https://api.github.com/users/birkenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/birkenfeld/received_events", "type": "User", "site_admin": false}, "committer": {"login": "birkenfeld", "id": 144359, "node_id": "MDQ6VXNlcjE0NDM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/144359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/birkenfeld", "html_url": "https://github.com/birkenfeld", "followers_url": "https://api.github.com/users/birkenfeld/followers", "following_url": "https://api.github.com/users/birkenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/birkenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/birkenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/birkenfeld/subscriptions", "organizations_url": "https://api.github.com/users/birkenfeld/orgs", "repos_url": "https://api.github.com/users/birkenfeld/repos", "events_url": "https://api.github.com/users/birkenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/birkenfeld/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8bcd01ff47a24253eccbd722d1566537a5576e52", "url": "https://api.github.com/repos/rust-lang/rust/commits/8bcd01ff47a24253eccbd722d1566537a5576e52", "html_url": "https://github.com/rust-lang/rust/commit/8bcd01ff47a24253eccbd722d1566537a5576e52"}], "stats": {"total": 51, "additions": 49, "deletions": 2}, "files": [{"sha": "27302b51bbda6f143438b8593b5104bf72a80b36", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8fed074cfd8623dfe070f86f0cc3040ac33b9b4/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8fed074cfd8623dfe070f86f0cc3040ac33b9b4/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=e8fed074cfd8623dfe070f86f0cc3040ac33b9b4", "patch": "@@ -59,6 +59,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_lint_pass(box strings::StringAdd as LintPassObject);\n     reg.register_lint_pass(box returns::ReturnPass as LintPassObject);\n     reg.register_lint_pass(box methods::MethodsPass as LintPassObject);\n+    reg.register_lint_pass(box types::LetPass as LintPassObject);\n \n     reg.register_lint_group(\"clippy\", vec![types::BOX_VEC, types::LINKEDLIST,\n                                            misc::SINGLE_MATCH, misc::STR_TO_STRING,\n@@ -83,5 +84,6 @@ pub fn plugin_registrar(reg: &mut Registry) {\n                                            misc::MODULO_ONE,\n                                            methods::OPTION_UNWRAP_USED,\n                                            methods::RESULT_UNWRAP_USED,\n+                                           types::LET_UNIT_VALUE,\n                                            ]);\n }"}, {"sha": "4980046e01b6d0c31cd1358d381d4e26b1e4a48b", "filename": "src/types.rs", "status": "modified", "additions": 34, "deletions": 2, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/e8fed074cfd8623dfe070f86f0cc3040ac33b9b4/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8fed074cfd8623dfe070f86f0cc3040ac33b9b4/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=e8fed074cfd8623dfe070f86f0cc3040ac33b9b4", "patch": "@@ -1,10 +1,11 @@\n use syntax::ptr::P;\n use syntax::ast;\n use syntax::ast::*;\n+use rustc::middle::ty;\n use rustc::lint::{Context, LintPass, LintArray, Lint, Level};\n-use syntax::codemap::Span;\n+use syntax::codemap::{ExpnInfo, Span};\n \n-use utils::{span_lint, span_help_and_lint};\n+use utils::{in_macro, snippet, span_lint, span_help_and_lint};\n \n /// Handles all the linting of funky types\n #[allow(missing_copy_implementations)]\n@@ -75,3 +76,34 @@ impl LintPass for TypePass {\n         }\n     }\n }\n+\n+#[allow(missing_copy_implementations)]\n+pub struct LetPass;\n+\n+declare_lint!(pub LET_UNIT_VALUE, Warn,\n+              \"Warn on let-binding a value of unit type\");\n+\n+\n+fn check_let_unit(cx: &Context, decl: &Decl, info: Option<&ExpnInfo>) {\n+    if in_macro(cx, info) { return; }\n+    if let DeclLocal(ref local) = decl.node {\n+        let bindtype = &cx.tcx.pat_ty(&*local.pat).sty;\n+        if *bindtype == ty::TyTuple(vec![]) {\n+            span_lint(cx, LET_UNIT_VALUE, decl.span, &format!(\n+                \"this let-binding has unit value. Consider omitting `let {} =`.\",\n+                snippet(cx, local.pat.span, \"..\")));\n+        }\n+    }\n+}\n+\n+impl LintPass for LetPass {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(LET_UNIT_VALUE)\n+    }\n+\n+    fn check_decl(&mut self, cx: &Context, decl: &Decl) {\n+        cx.sess().codemap().with_expn_info(\n+            decl.span.expn_id,\n+            |info| check_let_unit(cx, decl, info));\n+    }\n+}"}, {"sha": "e8620f862a2f72481ac09f95baded9bae734244f", "filename": "tests/compile-fail/let_unit.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e8fed074cfd8623dfe070f86f0cc3040ac33b9b4/tests%2Fcompile-fail%2Flet_unit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8fed074cfd8623dfe070f86f0cc3040ac33b9b4/tests%2Fcompile-fail%2Flet_unit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Flet_unit.rs?ref=e8fed074cfd8623dfe070f86f0cc3040ac33b9b4", "patch": "@@ -0,0 +1,13 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#![deny(let_unit_value)]\n+\n+fn main() {\n+    let _x = println!(\"x\");  //~ERROR this let-binding has unit value\n+    let _y = 1;   // this is fine\n+    let _z = ((), 1);  // this as well\n+    if true {\n+        let _a = ();  //~ERROR\n+    }\n+}"}]}