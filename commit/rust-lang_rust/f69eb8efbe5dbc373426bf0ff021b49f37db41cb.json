{"sha": "f69eb8efbe5dbc373426bf0ff021b49f37db41cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2OWViOGVmYmU1ZGJjMzczNDI2YmYwZmYwMjFiNDlmMzdkYjQxY2I=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-03-11T18:30:32Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-03-25T10:45:42Z"}, "message": "issue a future-compat lint for constants of invalid type\n\nThis is a [breaking-change]: according to RFC #1445, constants used as\npatterns must be of a type that *derives* `Eq`. If you encounter a\nproblem, you are most likely using a constant in an expression where the\ntype of the constant is some struct that does not currently implement\n`Eq`. Something like the following:\n\n```rust\nstruct SomeType { ... }\nconst SOME_CONST: SomeType = ...;\n\nmatch foo {\n    SOME_CONST => ...\n}\n```\n\nThe easiest and most future compatible fix is to annotate the type in\nquestion with `#[derive(Eq)]` (note that merely *implementing* `Eq` is\nnot enough, it must be *derived*):\n\n```rust\nstruct SomeType { ... }\nconst SOME_CONST: SomeType = ...;\n\nmatch foo {\n    SOME_CONST => ...\n}\n```\n\nAnother good option is to rewrite the match arm to use an `if`\ncondition (this is also particularly good for floating point types,\nwhich implement `PartialEq` but not `Eq`):\n\n```rust\nmatch foo {\n    c if c == SOME_CONST => ...\n}\n```\n\nFinally, a third alternative is to tag the type with\n`#[structural_match]`; but this is not recommended, as the attribute is\nnever expected to be stabilized. Please see RFC #1445 for more details.", "tree": {"sha": "10d6bbc6f8cc1a62e3caac9611b68261ea6f3cf4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/10d6bbc6f8cc1a62e3caac9611b68261ea6f3cf4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f69eb8efbe5dbc373426bf0ff021b49f37db41cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f69eb8efbe5dbc373426bf0ff021b49f37db41cb", "html_url": "https://github.com/rust-lang/rust/commit/f69eb8efbe5dbc373426bf0ff021b49f37db41cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f69eb8efbe5dbc373426bf0ff021b49f37db41cb/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05baf645e47a0ed3893f2413696e56be180249ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/05baf645e47a0ed3893f2413696e56be180249ff", "html_url": "https://github.com/rust-lang/rust/commit/05baf645e47a0ed3893f2413696e56be180249ff"}], "stats": {"total": 73, "additions": 64, "deletions": 9}, "files": [{"sha": "5d257fc7b2f222ccbb45e52e3967d6246efddd2b", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f69eb8efbe5dbc373426bf0ff021b49f37db41cb/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f69eb8efbe5dbc373426bf0ff021b49f37db41cb/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=f69eb8efbe5dbc373426bf0ff021b49f37db41cb", "patch": "@@ -136,6 +136,19 @@ declare_lint! {\n     \"type parameter default erroneously allowed in invalid location\"\n }\n \n+declare_lint! {\n+    pub ILLEGAL_FLOATING_POINT_CONSTANT_PATTERN,\n+    Warn,\n+    \"floating-point constants cannot be used in patterns\"\n+}\n+\n+declare_lint! {\n+    pub ILLEGAL_STRUCT_OR_ENUM_CONSTANT_PATTERN,\n+    Deny,\n+    \"constants of struct or enum type can only be used in a pattern if \\\n+     the struct or enum has `#[derive(Eq)]`\"\n+}\n+\n declare_lint! {\n     pub MATCH_OF_UNIT_VARIANT_VIA_PAREN_DOTDOT,\n     Deny,\n@@ -193,6 +206,8 @@ impl LintPass for HardwiredLints {\n             PRIVATE_IN_PUBLIC,\n             INACCESSIBLE_EXTERN_CRATE,\n             INVALID_TYPE_PARAM_DEFAULT,\n+            ILLEGAL_FLOATING_POINT_CONSTANT_PATTERN,\n+            ILLEGAL_STRUCT_OR_ENUM_CONSTANT_PATTERN,\n             MATCH_OF_UNIT_VARIANT_VIA_PAREN_DOTDOT,\n             CONST_ERR,\n             RAW_POINTER_DERIVE,"}, {"sha": "3414d509d953fd9c2ad18f42414491c42d652193", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f69eb8efbe5dbc373426bf0ff021b49f37db41cb/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f69eb8efbe5dbc373426bf0ff021b49f37db41cb/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=f69eb8efbe5dbc373426bf0ff021b49f37db41cb", "patch": "@@ -478,7 +478,7 @@ impl<'a, 'tcx> Folder for StaticInliner<'a, 'tcx> {\n                     Some(Def::Const(did)) => {\n                         let substs = Some(self.tcx.node_id_item_substs(pat.id).substs);\n                         if let Some((const_expr, _)) = lookup_const_by_id(self.tcx, did, substs) {\n-                            match const_expr_to_pat(self.tcx, const_expr, pat.span) {\n+                            match const_expr_to_pat(self.tcx, const_expr, pat.id, pat.span) {\n                                 Ok(new_pat) => {\n                                     if let Some(ref mut map) = self.renaming_map {\n                                         // Record any renamings we do here\n@@ -487,7 +487,6 @@ impl<'a, 'tcx> Folder for StaticInliner<'a, 'tcx> {\n                                     new_pat\n                                 }\n                                 Err(def_id) => {\n-                                    // TODO back-compat\n                                     self.failed = true;\n                                     self.tcx.sess.span_err(\n                                         pat.span,"}, {"sha": "dfeb5a5e3f1aba719a0ad24b2e5fe32784a7e295", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 39, "deletions": 7, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/f69eb8efbe5dbc373426bf0ff021b49f37db41cb/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f69eb8efbe5dbc373426bf0ff021b49f37db41cb/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=f69eb8efbe5dbc373426bf0ff021b49f37db41cb", "patch": "@@ -16,6 +16,7 @@ use self::EvalHint::*;\n \n use front::map as ast_map;\n use front::map::blocks::FnLikeNode;\n+use lint;\n use middle::cstore::{self, CrateStore, InlinedItem};\n use middle::{infer, subst, traits};\n use middle::def::Def;\n@@ -323,13 +324,41 @@ impl ConstVal {\n     }\n }\n \n-pub fn const_expr_to_pat(tcx: &ty::TyCtxt, expr: &Expr, span: Span)\n+pub fn const_expr_to_pat(tcx: &ty::TyCtxt, expr: &Expr, pat_id: ast::NodeId, span: Span)\n                          -> Result<P<hir::Pat>, DefId> {\n+    let pat_ty = tcx.expr_ty(expr);\n+    debug!(\"expr={:?} pat_ty={:?} pat_id={}\", expr, pat_ty, pat_id);\n+    match pat_ty.sty {\n+        ty::TyFloat(_) => {\n+            tcx.sess.add_lint(\n+                lint::builtin::ILLEGAL_FLOATING_POINT_CONSTANT_PATTERN,\n+                pat_id,\n+                span,\n+                format!(\"floating point constants cannot be used in patterns\"));\n+        }\n+        ty::TyEnum(adt_def, _) |\n+        ty::TyStruct(adt_def, _) => {\n+            if !tcx.has_attr(adt_def.did, \"structural_match\") {\n+                tcx.sess.add_lint(\n+                    lint::builtin::ILLEGAL_STRUCT_OR_ENUM_CONSTANT_PATTERN,\n+                    pat_id,\n+                    span,\n+                    format!(\"to use a constant of type `{}` \\\n+                             in a pattern, \\\n+                             `{}` must be annotated with `#[derive(Eq)]`\",\n+                            tcx.item_path_str(adt_def.did),\n+                            tcx.item_path_str(adt_def.did)));\n+            }\n+        }\n+        _ => { }\n+    }\n+\n     let pat = match expr.node {\n         hir::ExprTup(ref exprs) =>\n             PatKind::Tup(try!(exprs.iter()\n-                                   .map(|expr| const_expr_to_pat(tcx, &expr, span))\n-                                   .collect())),\n+                                  .map(|expr| const_expr_to_pat(tcx, &expr,\n+                                                                pat_id, span))\n+                                  .collect())),\n \n         hir::ExprCall(ref callee, ref args) => {\n             let def = *tcx.def_map.borrow().get(&callee.id).unwrap();\n@@ -347,7 +376,8 @@ pub fn const_expr_to_pat(tcx: &ty::TyCtxt, expr: &Expr, span: Span)\n                 _ => unreachable!()\n             };\n             let pats = try!(args.iter()\n-                                .map(|expr| const_expr_to_pat(tcx, &**expr, span))\n+                                .map(|expr| const_expr_to_pat(tcx, &**expr,\n+                                                              pat_id, span))\n                                 .collect());\n             PatKind::TupleStruct(path, Some(pats))\n         }\n@@ -359,7 +389,8 @@ pub fn const_expr_to_pat(tcx: &ty::TyCtxt, expr: &Expr, span: Span)\n                                span: codemap::DUMMY_SP,\n                                node: hir::FieldPat {\n                                    name: field.name.node,\n-                                   pat: try!(const_expr_to_pat(tcx, &field.expr, span)),\n+                                   pat: try!(const_expr_to_pat(tcx, &field.expr,\n+                                                               pat_id, span)),\n                                    is_shorthand: false,\n                                },\n                            }))\n@@ -369,7 +400,8 @@ pub fn const_expr_to_pat(tcx: &ty::TyCtxt, expr: &Expr, span: Span)\n \n         hir::ExprVec(ref exprs) => {\n             let pats = try!(exprs.iter()\n-                                 .map(|expr| const_expr_to_pat(tcx, &expr, span))\n+                                 .map(|expr| const_expr_to_pat(tcx, &expr,\n+                                                               pat_id, span))\n                                  .collect());\n             PatKind::Vec(pats, None, hir::HirVec::new())\n         }\n@@ -383,7 +415,7 @@ pub fn const_expr_to_pat(tcx: &ty::TyCtxt, expr: &Expr, span: Span)\n                 Some(Def::AssociatedConst(def_id)) => {\n                     let substs = Some(tcx.node_id_item_substs(expr.id).substs);\n                     let (expr, _ty) = lookup_const_by_id(tcx, def_id, substs).unwrap();\n-                    return const_expr_to_pat(tcx, expr, span);\n+                    return const_expr_to_pat(tcx, expr, pat_id, span);\n                 },\n                 _ => unreachable!(),\n             }"}, {"sha": "9ed21117cebca587e7e2dc4d32f05320987273cc", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f69eb8efbe5dbc373426bf0ff021b49f37db41cb/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f69eb8efbe5dbc373426bf0ff021b49f37db41cb/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=f69eb8efbe5dbc373426bf0ff021b49f37db41cb", "patch": "@@ -179,6 +179,14 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n             id: LintId::of(OVERLAPPING_INHERENT_IMPLS),\n             reference: \"issue #22889 <https://github.com/rust-lang/rust/issues/22889>\",\n         },\n+        FutureIncompatibleInfo {\n+            id: LintId::of(ILLEGAL_FLOATING_POINT_CONSTANT_PATTERN),\n+            reference: \"RFC 1445 <https://github.com/rust-lang/rfcs/pull/1445>\",\n+        },\n+        FutureIncompatibleInfo {\n+            id: LintId::of(ILLEGAL_STRUCT_OR_ENUM_CONSTANT_PATTERN),\n+            reference: \"RFC 1445 <https://github.com/rust-lang/rfcs/pull/1445>\",\n+        },\n         ]);\n \n     // We have one lint pass defined specially"}, {"sha": "a582a4622a6d0cf070adb52985116993012d6091", "filename": "src/librustc_mir/hair/cx/pattern.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f69eb8efbe5dbc373426bf0ff021b49f37db41cb/src%2Flibrustc_mir%2Fhair%2Fcx%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f69eb8efbe5dbc373426bf0ff021b49f37db41cb/src%2Flibrustc_mir%2Fhair%2Fcx%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fpattern.rs?ref=f69eb8efbe5dbc373426bf0ff021b49f37db41cb", "patch": "@@ -92,6 +92,7 @@ impl<'patcx, 'cx, 'tcx> PatCx<'patcx, 'cx, 'tcx> {\n                             Some((const_expr, _const_ty)) => {\n                                 match const_eval::const_expr_to_pat(self.cx.tcx,\n                                                                     const_expr,\n+                                                                    pat.id,\n                                                                     pat.span) {\n                                     Ok(pat) =>\n                                         return self.to_pattern(&pat),"}]}