{"sha": "1254b324797317a46315ff86395e8a9b43ebcc9b", "node_id": "C_kwDOAAsO6NoAKDEyNTRiMzI0Nzk3MzE3YTQ2MzE1ZmY4NjM5NWU4YTliNDNlYmNjOWI", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-09-03T03:46:41Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-09-05T20:55:43Z"}, "message": "Point out when a callable is not actually callable because its return is not sized", "tree": {"sha": "7aad008e394eafa4b6b2fdb2ab50fe0b384414aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7aad008e394eafa4b6b2fdb2ab50fe0b384414aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1254b324797317a46315ff86395e8a9b43ebcc9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1254b324797317a46315ff86395e8a9b43ebcc9b", "html_url": "https://github.com/rust-lang/rust/commit/1254b324797317a46315ff86395e8a9b43ebcc9b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1254b324797317a46315ff86395e8a9b43ebcc9b/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b44197abb0b3ffe4908892e1e08ab1cd721ff3b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/b44197abb0b3ffe4908892e1e08ab1cd721ff3b9", "html_url": "https://github.com/rust-lang/rust/commit/b44197abb0b3ffe4908892e1e08ab1cd721ff3b9"}], "stats": {"total": 66, "additions": 47, "deletions": 19}, "files": [{"sha": "ba403ab2da2bcd5e5951afbca84c795c10b11f0b", "filename": "compiler/rustc_trait_selection/src/infer.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1254b324797317a46315ff86395e8a9b43ebcc9b/compiler%2Frustc_trait_selection%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1254b324797317a46315ff86395e8a9b43ebcc9b/compiler%2Frustc_trait_selection%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Finfer.rs?ref=1254b324797317a46315ff86395e8a9b43ebcc9b", "patch": "@@ -24,6 +24,13 @@ pub trait InferCtxtExt<'tcx> {\n         span: Span,\n     ) -> bool;\n \n+    fn type_is_sized_modulo_regions(\n+        &self,\n+        param_env: ty::ParamEnv<'tcx>,\n+        ty: Ty<'tcx>,\n+        span: Span,\n+    ) -> bool;\n+\n     fn partially_normalize_associated_types_in<T>(\n         &self,\n         cause: ObligationCause<'tcx>,\n@@ -74,6 +81,16 @@ impl<'cx, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'cx, 'tcx> {\n         traits::type_known_to_meet_bound_modulo_regions(self, param_env, ty, copy_def_id, span)\n     }\n \n+    fn type_is_sized_modulo_regions(\n+        &self,\n+        param_env: ty::ParamEnv<'tcx>,\n+        ty: Ty<'tcx>,\n+        span: Span,\n+    ) -> bool {\n+        let lang_item = self.tcx.require_lang_item(LangItem::Sized, None);\n+        traits::type_known_to_meet_bound_modulo_regions(self, param_env, ty, lang_item, span)\n+    }\n+\n     /// Normalizes associated types in `value`, potentially returning\n     /// new obligations that must further be processed.\n     fn partially_normalize_associated_types_in<T>("}, {"sha": "0d35c2479dda535a9e6d831b311b1713a2f68b1f", "filename": "compiler/rustc_typeck/src/check/callee.rs", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1254b324797317a46315ff86395e8a9b43ebcc9b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1254b324797317a46315ff86395e8a9b43ebcc9b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs?ref=1254b324797317a46315ff86395e8a9b43ebcc9b", "patch": "@@ -1,5 +1,5 @@\n use super::method::MethodCallee;\n-use super::{Expectation, FnCtxt, TupleArgumentsFlag};\n+use super::{DefIdOrName, Expectation, FnCtxt, TupleArgumentsFlag};\n use crate::type_error_struct;\n \n use rustc_errors::{struct_span_err, Applicability, Diagnostic};\n@@ -24,7 +24,8 @@ use rustc_span::symbol::{sym, Ident};\n use rustc_span::Span;\n use rustc_target::spec::abi;\n use rustc_trait_selection::autoderef::Autoderef;\n-use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt;\n+use rustc_trait_selection::infer::InferCtxtExt as _;\n+use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt as _;\n \n use std::iter;\n \n@@ -471,7 +472,25 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 };\n \n                 if !self.maybe_suggest_bad_array_definition(&mut err, call_expr, callee_expr) {\n-                    err.span_label(call_expr.span, \"call expression requires function\");\n+                    if let Some((maybe_def, output_ty, _)) = self.extract_callable_info(callee_expr, callee_ty)\n+                        && !self.type_is_sized_modulo_regions(self.param_env, output_ty, callee_expr.span)\n+                    {\n+                        let descr = match maybe_def {\n+                            DefIdOrName::DefId(def_id) => self.tcx.def_kind(def_id).descr(def_id),\n+                            DefIdOrName::Name(name) => name,\n+                        };\n+                        err.span_label(\n+                            callee_expr.span,\n+                            format!(\"this {descr} returns an unsized value `{output_ty}`, so it cannot be called\")\n+                        );\n+                        if let DefIdOrName::DefId(def_id) = maybe_def\n+                            && let Some(def_span) = self.tcx.hir().span_if_local(def_id)\n+                        {\n+                            err.span_label(def_span, \"the callable type is defined here\");\n+                        }\n+                    } else {\n+                        err.span_label(call_expr.span, \"call expression requires function\");\n+                    }\n                 }\n \n                 if let Some(span) = self.tcx.hir().res_span(def) {"}, {"sha": "a3fcda5864b3f600239614176393790e779093dd", "filename": "compiler/rustc_typeck/src/check/cast.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1254b324797317a46315ff86395e8a9b43ebcc9b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1254b324797317a46315ff86395e8a9b43ebcc9b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs?ref=1254b324797317a46315ff86395e8a9b43ebcc9b", "patch": "@@ -35,7 +35,6 @@ use crate::type_error_struct;\n use hir::def_id::LOCAL_CRATE;\n use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder, ErrorGuaranteed};\n use rustc_hir as hir;\n-use rustc_hir::lang_items::LangItem;\n use rustc_middle::mir::Mutability;\n use rustc_middle::ty::adjustment::AllowTwoPhase;\n use rustc_middle::ty::cast::{CastKind, CastTy};\n@@ -47,7 +46,6 @@ use rustc_session::Session;\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n use rustc_trait_selection::infer::InferCtxtExt;\n-use rustc_trait_selection::traits;\n use rustc_trait_selection::traits::error_reporting::report_object_safety_error;\n \n /// Reifies a cast check to be checked once we have full type information for\n@@ -97,7 +95,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             return Err(reported);\n         }\n \n-        if self.type_is_known_to_be_sized_modulo_regions(t, span) {\n+        if self.type_is_sized_modulo_regions(self.param_env, t, span) {\n             return Ok(Some(PointerKind::Thin));\n         }\n \n@@ -705,7 +703,7 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n \n         debug!(\"check_cast({}, {:?} as {:?})\", self.expr.hir_id, self.expr_ty, self.cast_ty);\n \n-        if !fcx.type_is_known_to_be_sized_modulo_regions(self.cast_ty, self.span)\n+        if !fcx.type_is_sized_modulo_regions(fcx.param_env, self.cast_ty, self.span)\n             && !self.cast_ty.has_infer_types()\n         {\n             self.report_cast_to_unsized_type(fcx);\n@@ -1084,10 +1082,3 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n         );\n     }\n }\n-\n-impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n-    fn type_is_known_to_be_sized_modulo_regions(&self, ty: Ty<'tcx>, span: Span) -> bool {\n-        let lang_item = self.tcx.require_lang_item(LangItem::Sized, None);\n-        traits::type_known_to_meet_bound_modulo_regions(self, self.param_env, ty, lang_item, span)\n-    }\n-}"}, {"sha": "2bfee9a536439cdcc10a0259de4c18a90761a914", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/suggestions.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1254b324797317a46315ff86395e8a9b43ebcc9b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1254b324797317a46315ff86395e8a9b43ebcc9b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs?ref=1254b324797317a46315ff86395e8a9b43ebcc9b", "patch": "@@ -144,7 +144,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         false\n     }\n \n-    fn extract_callable_info(\n+    /// Extracts information about a callable type for diagnostics. This is a\n+    /// heuristic -- it doesn't necessarily mean that a type is always callable,\n+    /// because the callable type must also be well-formed to be called.\n+    pub(in super::super) fn extract_callable_info(\n         &self,\n         expr: &Expr<'_>,\n         found: Ty<'tcx>,\n@@ -1130,7 +1133,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     }\n }\n \n-enum DefIdOrName {\n+pub enum DefIdOrName {\n     DefId(DefId),\n     Name(&'static str),\n }"}, {"sha": "97492e6e0fa2e008986115b28c250893a5dfa23e", "filename": "src/test/ui/issues/issue-41139.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1254b324797317a46315ff86395e8a9b43ebcc9b/src%2Ftest%2Fui%2Fissues%2Fissue-41139.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1254b324797317a46315ff86395e8a9b43ebcc9b/src%2Ftest%2Fui%2Fissues%2Fissue-41139.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-41139.stderr?ref=1254b324797317a46315ff86395e8a9b43ebcc9b", "patch": "@@ -5,9 +5,7 @@ LL | fn get_function<'a>() -> &'a dyn Fn() -> dyn Trait {\n    | -------------------------------------------------- `get_function` defined here returns `&dyn Fn() -> (dyn Trait + 'static)`\n ...\n LL |     let t: &dyn Trait = &get_function()();\n-   |                          ^^^^^^^^^^^^^^--\n-   |                          |\n-   |                          call expression requires function\n+   |                          ^^^^^^^^^^^^^^ this trait object returns an unsized value `(dyn Trait + 'static)`, so it cannot be called\n \n error: aborting due to previous error\n "}]}