{"sha": "4706c38e17349793b2713947f81cfa1fd1f75ba3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3MDZjMzhlMTczNDk3OTNiMjcxMzk0N2Y4MWNmYTFmZDFmNzViYTM=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-02-12T18:46:05Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-02-13T15:39:09Z"}, "message": "Use HirId in TraitCandidate.", "tree": {"sha": "2b9f40449b08f94433e5e1fdf571e5b16e6c0fc3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b9f40449b08f94433e5e1fdf571e5b16e6c0fc3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4706c38e17349793b2713947f81cfa1fd1f75ba3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4706c38e17349793b2713947f81cfa1fd1f75ba3", "html_url": "https://github.com/rust-lang/rust/commit/4706c38e17349793b2713947f81cfa1fd1f75ba3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4706c38e17349793b2713947f81cfa1fd1f75ba3/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be493fe8cc40c3d3f6030a1313c1ff747fce770d", "url": "https://api.github.com/repos/rust-lang/rust/commits/be493fe8cc40c3d3f6030a1313c1ff747fce770d", "html_url": "https://github.com/rust-lang/rust/commit/be493fe8cc40c3d3f6030a1313c1ff747fce770d"}], "stats": {"total": 47, "additions": 31, "deletions": 16}, "files": [{"sha": "eadc9ddeee6fc827af0b4736b02abc0bb7876f13", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4706c38e17349793b2713947f81cfa1fd1f75ba3/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4706c38e17349793b2713947f81cfa1fd1f75ba3/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=4706c38e17349793b2713947f81cfa1fd1f75ba3", "patch": "@@ -270,7 +270,6 @@ impl<'a> ToStableHashKey<StableHashingContext<'a>> for hir::TraitCandidate {\n \n         let import_keys = import_ids\n             .iter()\n-            .map(|node_id| hcx.node_to_hir_id(*node_id))\n             .map(|hir_id| (hcx.local_def_path_hash(hir_id.owner), hir_id.local_id))\n             .collect();\n         (hcx.def_path_hash(*def_id), import_keys)"}, {"sha": "1a071905523ca16f228b8e2ba031a2644331f544", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4706c38e17349793b2713947f81cfa1fd1f75ba3/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4706c38e17349793b2713947f81cfa1fd1f75ba3/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=4706c38e17349793b2713947f81cfa1fd1f75ba3", "patch": "@@ -1161,6 +1161,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         for (k, v) in resolutions.trait_map {\n             let hir_id = hir.node_to_hir_id(k);\n             let map = trait_map.entry(hir_id.owner).or_default();\n+            let v = v.into_iter().map(|tc| tc.node_to_hir_id(&hir.definitions())).collect();\n             map.insert(hir_id.local_id, StableVec::new(v));\n         }\n "}, {"sha": "a561d48844b7a7decd66af7c7bb0c07f29376c23", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4706c38e17349793b2713947f81cfa1fd1f75ba3/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4706c38e17349793b2713947f81cfa1fd1f75ba3/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=4706c38e17349793b2713947f81cfa1fd1f75ba3", "patch": "@@ -35,7 +35,7 @@ use rustc_data_structures::sync::{self, par_iter, Lrc, ParallelIterator};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, CtorOf, DefKind, Res};\n use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, LocalDefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n-use rustc_hir::{Constness, GlobMap, Node, TraitMap};\n+use rustc_hir::{Constness, GlobMap, Node};\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_macros::HashStable;\n use rustc_serialize::{self, Encodable, Encoder};\n@@ -46,6 +46,7 @@ use rustc_target::abi::Align;\n use syntax::ast::{self, Ident, Name};\n use syntax::node_id::{NodeId, NodeMap, NodeSet};\n \n+use smallvec::SmallVec;\n use std::cell::RefCell;\n use std::cmp::{self, Ordering};\n use std::fmt;\n@@ -122,6 +123,23 @@ mod sty;\n \n // Data types\n \n+#[derive(Clone, Debug)]\n+pub struct TraitCandidate {\n+    pub def_id: DefId,\n+    pub import_ids: SmallVec<[NodeId; 1]>,\n+}\n+\n+impl TraitCandidate {\n+    fn node_to_hir_id(self, definitions: &hir_map::Definitions) -> hir::TraitCandidate {\n+        let TraitCandidate { def_id, import_ids } = self;\n+        let import_ids =\n+            import_ids.into_iter().map(|node_id| definitions.node_to_hir_id(node_id)).collect();\n+        hir::TraitCandidate { def_id, import_ids }\n+    }\n+}\n+\n+pub type TraitMap = NodeMap<Vec<TraitCandidate>>;\n+\n pub struct ResolverOutputs {\n     pub definitions: hir_map::Definitions,\n     pub cstore: Box<CrateStoreDyn>,"}, {"sha": "0667bd3f4a219f9b0ad54e71c1b9ddc28f874e1e", "filename": "src/librustc_hir/hir.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4706c38e17349793b2713947f81cfa1fd1f75ba3/src%2Flibrustc_hir%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4706c38e17349793b2713947f81cfa1fd1f75ba3/src%2Flibrustc_hir%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fhir.rs?ref=4706c38e17349793b2713947f81cfa1fd1f75ba3", "patch": "@@ -16,7 +16,7 @@ use rustc_span::source_map::{SourceMap, Spanned};\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::{MultiSpan, Span, DUMMY_SP};\n use rustc_target::spec::abi::Abi;\n-use syntax::ast::{self, AsmDialect, CrateSugar, Ident, Name, NodeId};\n+use syntax::ast::{self, AsmDialect, CrateSugar, Ident, Name};\n use syntax::ast::{AttrVec, Attribute, FloatTy, IntTy, Label, LitKind, StrStyle, UintTy};\n pub use syntax::ast::{BorrowKind, ImplPolarity, IsAuto};\n pub use syntax::ast::{CaptureBy, Movability, Mutability};\n@@ -2610,7 +2610,7 @@ pub type CaptureModeMap = NodeMap<CaptureBy>;\n #[derive(Clone, Debug)]\n pub struct TraitCandidate {\n     pub def_id: DefId,\n-    pub import_ids: SmallVec<[NodeId; 1]>,\n+    pub import_ids: SmallVec<[HirId; 1]>,\n }\n \n // Trait method resolution"}, {"sha": "ea865a5590ae77b32664106172ea4e4ba008f5c1", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4706c38e17349793b2713947f81cfa1fd1f75ba3/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4706c38e17349793b2713947f81cfa1fd1f75ba3/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=4706c38e17349793b2713947f81cfa1fd1f75ba3", "patch": "@@ -11,13 +11,13 @@ use crate::{path_names_to_string, BindingError, CrateLint, LexicalScopeBinding};\n use crate::{Module, ModuleOrUniformRoot, NameBindingKind, ParentScope, PathResult};\n use crate::{ResolutionError, Resolver, Segment, UseError};\n \n+use rustc::ty::TraitCandidate;\n use rustc::{bug, lint, span_bug};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::DiagnosticId;\n use rustc_hir::def::Namespace::{self, *};\n use rustc_hir::def::{self, CtorKind, DefKind, PartialRes, PerNS};\n use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX};\n-use rustc_hir::TraitCandidate;\n use rustc_span::symbol::{kw, sym};\n use rustc_span::Span;\n use smallvec::{smallvec, SmallVec};"}, {"sha": "cfe100dc588a6d04d9aa8f19ae39e4dc0674fccb", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4706c38e17349793b2713947f81cfa1fd1f75ba3/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4706c38e17349793b2713947f81cfa1fd1f75ba3/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=4706c38e17349793b2713947f81cfa1fd1f75ba3", "patch": "@@ -22,7 +22,7 @@ use rustc::lint;\n use rustc::middle::cstore::{CrateStore, MetadataLoaderDyn};\n use rustc::span_bug;\n use rustc::ty::query::Providers;\n-use rustc::ty::{self, DefIdTree, ResolverOutputs};\n+use rustc::ty::{self, DefIdTree, ResolverOutputs, TraitMap};\n use rustc_ast_pretty::pprust;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexMap};\n use rustc_data_structures::ptr_key::PtrKey;\n@@ -32,8 +32,8 @@ use rustc_expand::base::SyntaxExtension;\n use rustc_hir::def::Namespace::*;\n use rustc_hir::def::{self, CtorOf, DefKind, NonMacroAttrKind, PartialRes};\n use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc_hir::GlobMap;\n use rustc_hir::PrimTy::{self, Bool, Char, Float, Int, Str, Uint};\n-use rustc_hir::{GlobMap, TraitMap};\n use rustc_metadata::creader::{CStore, CrateLoader};\n use rustc_session::lint::{BuiltinLintDiagnostics, LintBuffer};\n use rustc_session::Session;"}, {"sha": "8f0fbc2d60c9fc06951e42cbf760530235671787", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4706c38e17349793b2713947f81cfa1fd1f75ba3/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4706c38e17349793b2713947f81cfa1fd1f75ba3/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=4706c38e17349793b2713947f81cfa1fd1f75ba3", "patch": "@@ -902,13 +902,10 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n             for trait_candidate in applicable_traits.iter() {\n                 let trait_did = trait_candidate.def_id;\n                 if duplicates.insert(trait_did) {\n-                    let import_ids = trait_candidate\n-                        .import_ids\n-                        .iter()\n-                        .map(|node_id| self.fcx.tcx.hir().node_to_hir_id(*node_id))\n-                        .collect();\n-                    let result =\n-                        self.assemble_extension_candidates_for_trait(import_ids, trait_did);\n+                    let result = self.assemble_extension_candidates_for_trait(\n+                        &trait_candidate.import_ids,\n+                        trait_did,\n+                    );\n                     result?;\n                 }\n             }\n@@ -920,7 +917,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n         let mut duplicates = FxHashSet::default();\n         for trait_info in suggest::all_traits(self.tcx) {\n             if duplicates.insert(trait_info.def_id) {\n-                self.assemble_extension_candidates_for_trait(smallvec![], trait_info.def_id)?;\n+                self.assemble_extension_candidates_for_trait(&smallvec![], trait_info.def_id)?;\n             }\n         }\n         Ok(())\n@@ -959,7 +956,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n \n     fn assemble_extension_candidates_for_trait(\n         &mut self,\n-        import_ids: SmallVec<[hir::HirId; 1]>,\n+        import_ids: &SmallVec<[hir::HirId; 1]>,\n         trait_def_id: DefId,\n     ) -> Result<(), MethodError<'tcx>> {\n         debug!(\"assemble_extension_candidates_for_trait(trait_def_id={:?})\", trait_def_id);"}]}