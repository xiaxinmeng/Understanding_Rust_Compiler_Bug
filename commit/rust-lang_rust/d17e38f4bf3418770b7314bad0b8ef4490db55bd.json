{"sha": "d17e38f4bf3418770b7314bad0b8ef4490db55bd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxN2UzOGY0YmYzNDE4NzcwYjczMTRiYWQwYjhlZjQ0OTBkYjU1YmQ=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-01-06T22:43:20Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-01-08T01:04:36Z"}, "message": "`struct` pattern parsing and diagnostic tweaks\n\n - Recover from struct parse error on match and point out missing match\n   body.\n - Point at struct when finding non-identifier while parsing its fields.\n - Add label to \"expected identifier, found {}\" error.", "tree": {"sha": "cff37fc9120460ff5b26917f4fed6184d9070c6c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cff37fc9120460ff5b26917f4fed6184d9070c6c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d17e38f4bf3418770b7314bad0b8ef4490db55bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d17e38f4bf3418770b7314bad0b8ef4490db55bd", "html_url": "https://github.com/rust-lang/rust/commit/d17e38f4bf3418770b7314bad0b8ef4490db55bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d17e38f4bf3418770b7314bad0b8ef4490db55bd/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "885011ef1fd8fbe8c5be50a0713c03c980772be3", "url": "https://api.github.com/repos/rust-lang/rust/commits/885011ef1fd8fbe8c5be50a0713c03c980772be3", "html_url": "https://github.com/rust-lang/rust/commit/885011ef1fd8fbe8c5be50a0713c03c980772be3"}], "stats": {"total": 117, "additions": 102, "deletions": 15}, "files": [{"sha": "ce6a3af391d226587d04880cc832fff4dd9fd6b0", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 42, "deletions": 11, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/d17e38f4bf3418770b7314bad0b8ef4490db55bd/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d17e38f4bf3418770b7314bad0b8ef4490db55bd/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=d17e38f4bf3418770b7314bad0b8ef4490db55bd", "patch": "@@ -609,14 +609,21 @@ impl<'a> Parser<'a> {\n         Parser::token_to_string(&self.token)\n     }\n \n+    pub fn token_descr(&self) -> Option<&'static str> {\n+        Some(match &self.token {\n+            t if t.is_special_ident() => \"reserved identifier\",\n+            t if t.is_used_keyword() => \"keyword\",\n+            t if t.is_unused_keyword() => \"reserved keyword\",\n+            _ => return None,\n+        })\n+    }\n+\n     pub fn this_token_descr(&self) -> String {\n-        let prefix = match &self.token {\n-            t if t.is_special_ident() => \"reserved identifier \",\n-            t if t.is_used_keyword() => \"keyword \",\n-            t if t.is_unused_keyword() => \"reserved keyword \",\n-            _ => \"\",\n-        };\n-        format!(\"{}`{}`\", prefix, self.this_token_to_string())\n+        if let Some(prefix) = self.token_descr() {\n+            format!(\"{} `{}`\", prefix, self.this_token_to_string())\n+        } else {\n+            format!(\"`{}`\", self.this_token_to_string())\n+        }\n     }\n \n     pub fn unexpected_last<T>(&self, t: &token::Token) -> PResult<'a, T> {\n@@ -752,11 +759,27 @@ impl<'a> Parser<'a> {\n     }\n \n     pub fn parse_ident(&mut self) -> PResult<'a, ast::Ident> {\n+        self.parse_ident_common(true)\n+    }\n+\n+    fn parse_ident_common(&mut self, recover: bool) -> PResult<'a, ast::Ident> {\n         match self.token {\n             token::Ident(i) => {\n                 if self.token.is_reserved_ident() {\n-                    self.span_err(self.span, &format!(\"expected identifier, found {}\",\n-                                                      self.this_token_descr()));\n+                    let mut err = self.struct_span_err(self.span,\n+                                                       &format!(\"expected identifier, found {}\",\n+                                                                self.this_token_descr()));\n+                    if let Some(token_descr) = self.token_descr() {\n+                        err.span_label(self.span, format!(\"expected identifier, found {}\",\n+                                                          token_descr));\n+                    } else {\n+                        err.span_label(self.span, \"expected identifier\");\n+                    }\n+                    if recover {\n+                        err.emit();\n+                    } else {\n+                        return Err(err);\n+                    }\n                 }\n                 self.bump();\n                 Ok(i)\n@@ -767,6 +790,12 @@ impl<'a> Parser<'a> {\n                     } else {\n                         let mut err = self.fatal(&format!(\"expected identifier, found `{}`\",\n                                                           self.this_token_to_string()));\n+                        if let Some(token_descr) = self.token_descr() {\n+                            err.span_label(self.span, format!(\"expected identifier, found {}\",\n+                                                              token_descr));\n+                        } else {\n+                            err.span_label(self.span, \"expected identifier\");\n+                        }\n                         if self.token == token::Underscore {\n                             err.note(\"`_` is a wildcard pattern, not an identifier\");\n                         }\n@@ -2056,7 +2085,7 @@ impl<'a> Parser<'a> {\n             self.bump();\n             Ok(Ident::with_empty_ctxt(name))\n         } else {\n-            self.parse_ident()\n+            self.parse_ident_common(false)\n         }\n     }\n \n@@ -2073,7 +2102,7 @@ impl<'a> Parser<'a> {\n             hi = self.prev_span;\n             (fieldname, self.parse_expr()?, false)\n         } else {\n-            let fieldname = self.parse_ident()?;\n+            let fieldname = self.parse_ident_common(false)?;\n             hi = self.prev_span;\n \n             // Mimic `x: x` for the `x` field shorthand.\n@@ -2424,6 +2453,7 @@ impl<'a> Parser<'a> {\n \n     fn parse_struct_expr(&mut self, lo: Span, pth: ast::Path, mut attrs: ThinVec<Attribute>)\n                          -> PResult<'a, P<Expr>> {\n+        let struct_sp = lo.to(self.prev_span);\n         self.bump();\n         let mut fields = Vec::new();\n         let mut base = None;\n@@ -2458,6 +2488,7 @@ impl<'a> Parser<'a> {\n             match self.parse_field() {\n                 Ok(f) => fields.push(f),\n                 Err(mut e) => {\n+                    e.span_label(struct_sp, \"while parsing this struct\");\n                     e.emit();\n                     self.recover_stmt();\n                     break;"}, {"sha": "9253a490733eda30bb133d682db36fb4ff1374ba", "filename": "src/test/compile-fail/issue-28433.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d17e38f4bf3418770b7314bad0b8ef4490db55bd/src%2Ftest%2Fcompile-fail%2Fissue-28433.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d17e38f4bf3418770b7314bad0b8ef4490db55bd/src%2Ftest%2Fcompile-fail%2Fissue-28433.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-28433.rs?ref=d17e38f4bf3418770b7314bad0b8ef4490db55bd", "patch": "@@ -13,7 +13,7 @@\n enum bird {\n     pub duck,\n     //~^ ERROR: expected identifier, found keyword `pub`\n-    //~^^ ERROR: expected\n+    //~| ERROR: expected\n     goose\n }\n "}, {"sha": "f29c1fa27940071dff6f6e2677ddbf0ce1ad5ae4", "filename": "src/test/parse-fail/issue-32501.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d17e38f4bf3418770b7314bad0b8ef4490db55bd/src%2Ftest%2Fparse-fail%2Fissue-32501.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d17e38f4bf3418770b7314bad0b8ef4490db55bd/src%2Ftest%2Fparse-fail%2Fissue-32501.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fissue-32501.rs?ref=d17e38f4bf3418770b7314bad0b8ef4490db55bd", "patch": "@@ -18,4 +18,5 @@ fn main() {\n     let mut _b = 0;\n     let mut _ = 0; //~ ERROR expected identifier, found `_`\n     //~^ NOTE `_` is a wildcard pattern, not an identifier\n+    //~| NOTE expected identifier\n }"}, {"sha": "32deabd0229d895d72d0378c4f8659bb851931cb", "filename": "src/test/ui/issue-44406.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d17e38f4bf3418770b7314bad0b8ef4490db55bd/src%2Ftest%2Fui%2Fissue-44406.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d17e38f4bf3418770b7314bad0b8ef4490db55bd/src%2Ftest%2Fui%2Fissue-44406.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-44406.stderr?ref=d17e38f4bf3418770b7314bad0b8ef4490db55bd", "patch": "@@ -2,7 +2,7 @@ error: expected identifier, found keyword `true`\n   --> $DIR/issue-44406.rs:18:10\n    |\n 18 |     foo!(true); //~ ERROR expected type, found keyword\n-   |          ^^^^\n+   |          ^^^^ expected identifier, found keyword\n \n error: expected type, found keyword `true`\n   --> $DIR/issue-44406.rs:18:10"}, {"sha": "1bdb47d97d27936c92f585e4ec1f3857e1341b6b", "filename": "src/test/ui/pub/pub-restricted-error.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d17e38f4bf3418770b7314bad0b8ef4490db55bd/src%2Ftest%2Fui%2Fpub%2Fpub-restricted-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d17e38f4bf3418770b7314bad0b8ef4490db55bd/src%2Ftest%2Fui%2Fpub%2Fpub-restricted-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-restricted-error.stderr?ref=d17e38f4bf3418770b7314bad0b8ef4490db55bd", "patch": "@@ -2,7 +2,7 @@ error: expected identifier, found `(`\n   --> $DIR/pub-restricted-error.rs:16:16\n    |\n 16 |     pub(crate) () foo: usize, //~ ERROR expected identifier\n-   |                ^\n+   |                ^ expected identifier\n \n error: aborting due to previous error\n "}, {"sha": "e5b13218de1b45b44eb8f2e0a025c8b5fe24e897", "filename": "src/test/ui/pub/pub-restricted-non-path.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d17e38f4bf3418770b7314bad0b8ef4490db55bd/src%2Ftest%2Fui%2Fpub%2Fpub-restricted-non-path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d17e38f4bf3418770b7314bad0b8ef4490db55bd/src%2Ftest%2Fui%2Fpub%2Fpub-restricted-non-path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-restricted-non-path.stderr?ref=d17e38f4bf3418770b7314bad0b8ef4490db55bd", "patch": "@@ -2,7 +2,7 @@ error: expected identifier, found `.`\n   --> $DIR/pub-restricted-non-path.rs:13:6\n    |\n 13 | pub (.) fn afn() {} //~ ERROR expected identifier\n-   |      ^\n+   |      ^ expected identifier\n \n error: aborting due to previous error\n "}, {"sha": "e1b134c8203184872bcd36dc22f33c7ce19bba71", "filename": "src/test/ui/token/issue-15980.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/d17e38f4bf3418770b7314bad0b8ef4490db55bd/src%2Ftest%2Fui%2Ftoken%2Fissue-15980.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d17e38f4bf3418770b7314bad0b8ef4490db55bd/src%2Ftest%2Fui%2Ftoken%2Fissue-15980.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftoken%2Fissue-15980.rs?ref=d17e38f4bf3418770b7314bad0b8ef4490db55bd", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::io;\n+\n+fn main(){\n+    let x: io::IoResult<()> = Ok(());\n+    //~^ ERROR cannot find type `IoResult` in module `io`\n+    //~| NOTE did you mean `Result`?\n+    match x {\n+        Err(ref e) if e.kind == io::EndOfFile {\n+            //~^ NOTE while parsing this struct\n+            return\n+            //~^ ERROR expected identifier, found keyword `return`\n+            //~| NOTE expected identifier, found keyword\n+        }\n+        //~^ NOTE expected one of `.`, `=>`, `?`, or an operator here\n+        _ => {}\n+        //~^ ERROR expected one of `.`, `=>`, `?`, or an operator, found `_`\n+        //~| NOTE unexpected token\n+    }\n+}"}, {"sha": "71cd4b28da711ebfd573e9451f97d7625578516b", "filename": "src/test/ui/token/issue-15980.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d17e38f4bf3418770b7314bad0b8ef4490db55bd/src%2Ftest%2Fui%2Ftoken%2Fissue-15980.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d17e38f4bf3418770b7314bad0b8ef4490db55bd/src%2Ftest%2Fui%2Ftoken%2Fissue-15980.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftoken%2Fissue-15980.stderr?ref=d17e38f4bf3418770b7314bad0b8ef4490db55bd", "patch": "@@ -0,0 +1,26 @@\n+error: expected identifier, found keyword `return`\n+  --> $DIR/issue-15980.rs:20:13\n+   |\n+18 |         Err(ref e) if e.kind == io::EndOfFile {\n+   |                                 ------------- while parsing this struct\n+19 |             //~^ NOTE while parsing this struct\n+20 |             return\n+   |             ^^^^^^ expected identifier, found keyword\n+\n+error: expected one of `.`, `=>`, `?`, or an operator, found `_`\n+  --> $DIR/issue-15980.rs:25:9\n+   |\n+23 |         }\n+   |          - expected one of `.`, `=>`, `?`, or an operator here\n+24 |         //~^ NOTE expected one of `.`, `=>`, `?`, or an operator here\n+25 |         _ => {}\n+   |         ^ unexpected token\n+\n+error[E0412]: cannot find type `IoResult` in module `io`\n+  --> $DIR/issue-15980.rs:14:16\n+   |\n+14 |     let x: io::IoResult<()> = Ok(());\n+   |                ^^^^^^^^ did you mean `Result`?\n+\n+error: aborting due to 3 previous errors\n+"}]}