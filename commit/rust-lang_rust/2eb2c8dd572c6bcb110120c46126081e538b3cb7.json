{"sha": "2eb2c8dd572c6bcb110120c46126081e538b3cb7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlYjJjOGRkNTcyYzZiY2IxMTAxMjBjNDYxMjYwODFlNTM4YjNjYjc=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-04-09T19:58:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-04-09T19:58:15Z"}, "message": "Merge branch 'master' into feature/random", "tree": {"sha": "e77a7ca4678b04a5befe1082e72b65b138a87b30", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e77a7ca4678b04a5befe1082e72b65b138a87b30"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2eb2c8dd572c6bcb110120c46126081e538b3cb7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcrPlXCRBK7hj4Ov3rIwAAdHIIABMI2laz5D7Pr80h377Tzvnf\nsZO03T4SIyZz1uqlcRRXO+J0npkcJspQxtaJ418MIOsLBVAXB/5gjoYcXAfvwPju\nK9CrvnbJ8ENJtNjhpkol6B9aWgD3S/tsi44b/Nio3kfsIxNNFvZmjY/TzZzynBMa\nUU9W3chY9pIVC737pNBLTZv+xx3JkzH6zDISrQSDiRaAUAkxbiReruqUM5koHpKW\nmCIQQ8onXA1iuywRRmYgRCy833rhRUsjpRNYmFxbHuuq7msjDrDJdyhNPWkigbXE\n2WKfvk/sWoCzOIUQqN5XLavGqduemaa57dBtC9/8cKmmHxVFtJ8IyuNgABoOh7Y=\n=KAec\n-----END PGP SIGNATURE-----\n", "payload": "tree e77a7ca4678b04a5befe1082e72b65b138a87b30\nparent 0837d630f7becb8259074a2adc35e77476e5083e\nparent 28f2e5b17a9a4c33a810dffda8eaaf55a1b8b70d\nauthor Oliver Scherer <github35764891676564198441@oli-obk.de> 1554839895 +0200\ncommitter GitHub <noreply@github.com> 1554839895 +0200\n\nMerge branch 'master' into feature/random"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2eb2c8dd572c6bcb110120c46126081e538b3cb7", "html_url": "https://github.com/rust-lang/rust/commit/2eb2c8dd572c6bcb110120c46126081e538b3cb7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2eb2c8dd572c6bcb110120c46126081e538b3cb7/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0837d630f7becb8259074a2adc35e77476e5083e", "url": "https://api.github.com/repos/rust-lang/rust/commits/0837d630f7becb8259074a2adc35e77476e5083e", "html_url": "https://github.com/rust-lang/rust/commit/0837d630f7becb8259074a2adc35e77476e5083e"}, {"sha": "28f2e5b17a9a4c33a810dffda8eaaf55a1b8b70d", "url": "https://api.github.com/repos/rust-lang/rust/commits/28f2e5b17a9a4c33a810dffda8eaaf55a1b8b70d", "html_url": "https://github.com/rust-lang/rust/commit/28f2e5b17a9a4c33a810dffda8eaaf55a1b8b70d"}], "stats": {"total": 41, "additions": 41, "deletions": 0}, "files": [{"sha": "a0ff614de20a05e5326bd12d7bf6e7a0eb2b4af9", "filename": "src/fn_call.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2eb2c8dd572c6bcb110120c46126081e538b3cb7/src%2Ffn_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eb2c8dd572c6bcb110120c46126081e538b3cb7/src%2Ffn_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffn_call.rs?ref=2eb2c8dd572c6bcb110120c46126081e538b3cb7", "patch": "@@ -95,6 +95,21 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a + 'mir>: crate::MiriEvalContextExt<'\n                     this.write_scalar(Scalar::Ptr(ptr.with_default_tag()), dest)?;\n                 }\n             }\n+            \"calloc\" => {\n+                let items = this.read_scalar(args[0])?.to_usize(this)?;\n+                let len = this.read_scalar(args[1])?.to_usize(this)?;\n+                let bytes = items.checked_mul(len).ok_or_else(|| InterpError::Overflow(mir::BinOp::Mul))?;\n+\n+                if bytes == 0 {\n+                    this.write_null(dest)?;\n+                } else {\n+                    let size = Size::from_bytes(bytes);\n+                    let align = this.tcx.data_layout.pointer_align.abi;\n+                    let ptr = this.memory_mut().allocate(size, align, MiriMemoryKind::C.into()).with_default_tag();\n+                    this.memory_mut().get_mut(ptr.alloc_id)?.write_repeat(tcx, ptr, 0, size)?;\n+                    this.write_scalar(Scalar::Ptr(ptr), dest)?;\n+                }\n+            }\n             \"posix_memalign\" => {\n                 let ret = this.deref_operand(args[0])?;\n                 let align = this.read_scalar(args[1])?.to_usize(this)?;"}, {"sha": "4c520da85e876d190c7324902921d3898f09d3a3", "filename": "tests/run-pass/calloc.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2eb2c8dd572c6bcb110120c46126081e538b3cb7/tests%2Frun-pass%2Fcalloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2eb2c8dd572c6bcb110120c46126081e538b3cb7/tests%2Frun-pass%2Fcalloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fcalloc.rs?ref=2eb2c8dd572c6bcb110120c46126081e538b3cb7", "patch": "@@ -0,0 +1,26 @@\n+//ignore-windows: Uses POSIX APIs\n+\n+#![feature(rustc_private)]\n+\n+use core::slice;\n+\n+extern crate libc;\n+\n+fn main() {\n+    unsafe {\n+        let p1 = libc::calloc(0, 0);\n+        assert!(p1.is_null());\n+\n+        let p2 = libc::calloc(20, 0);\n+        assert!(p2.is_null());\n+\n+        let p3 = libc::calloc(0, 20);\n+        assert!(p3.is_null());\n+\n+        let p4 = libc::calloc(4, 8);\n+        assert!(!p4.is_null());\n+        let slice = slice::from_raw_parts(p4 as *const u8, 4 * 8);\n+        assert_eq!(&slice, &[0_u8; 4 * 8]);\n+        libc::free(p4);\n+    }\n+}"}]}