{"sha": "7aa7198b4b5116ace4d00fb38650c6e3a67c2776", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhYTcxOThiNGI1MTE2YWNlNGQwMGZiMzg2NTBjNmUzYTY3YzI3NzY=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-04-01T06:17:25Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-04-10T12:40:25Z"}, "message": "Make PerfStats thread-safe and remove unused fields", "tree": {"sha": "24cfc922612f01758daa8ba169d3f7738e722dab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24cfc922612f01758daa8ba169d3f7738e722dab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7aa7198b4b5116ace4d00fb38650c6e3a67c2776", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7aa7198b4b5116ace4d00fb38650c6e3a67c2776", "html_url": "https://github.com/rust-lang/rust/commit/7aa7198b4b5116ace4d00fb38650c6e3a67c2776", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7aa7198b4b5116ace4d00fb38650c6e3a67c2776/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05c4ea47fefc0c5fbae7c48bf654230414910242", "url": "https://api.github.com/repos/rust-lang/rust/commits/05c4ea47fefc0c5fbae7c48bf654230414910242", "html_url": "https://github.com/rust-lang/rust/commit/05c4ea47fefc0c5fbae7c48bf654230414910242"}], "stats": {"total": 106, "additions": 27, "deletions": 79}, "files": [{"sha": "8ea6eb005a140b0eb105e7fbbc839074fccd2837", "filename": "src/librustc/infer/canonical.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7aa7198b4b5116ace4d00fb38650c6e3a67c2776/src%2Flibrustc%2Finfer%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7aa7198b4b5116ace4d00fb38650c6e3a67c2776/src%2Flibrustc%2Finfer%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical.rs?ref=7aa7198b4b5116ace4d00fb38650c6e3a67c2776", "patch": "@@ -36,13 +36,13 @@ use rustc_data_structures::indexed_vec::Idx;\n use serialize::UseSpecializedDecodable;\n use std::fmt::Debug;\n use std::ops::Index;\n+use std::sync::atomic::Ordering;\n use syntax::codemap::Span;\n use traits::{Obligation, ObligationCause, PredicateObligation};\n use ty::{self, CanonicalVar, Lift, Region, Slice, Ty, TyCtxt, TypeFlags};\n use ty::subst::{Kind, UnpackedKind};\n use ty::fold::{TypeFoldable, TypeFolder};\n use util::captures::Captures;\n-use util::common::CellUsizeExt;\n \n use rustc_data_structures::indexed_vec::IndexVec;\n use rustc_data_structures::fx::FxHashMap;\n@@ -473,7 +473,7 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n     where\n         V: Canonicalize<'gcx, 'tcx>,\n     {\n-        self.tcx.sess.perf_stats.queries_canonicalized.increment();\n+        self.tcx.sess.perf_stats.queries_canonicalized.fetch_add(1, Ordering::Relaxed);\n \n         Canonicalizer::canonicalize(\n             value,"}, {"sha": "c084c8684817390234a88a1d101f2305ae78b557", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 16, "deletions": 58, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/7aa7198b4b5116ace4d00fb38650c6e3a67c2776/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7aa7198b4b5116ace4d00fb38650c6e3a67c2776/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=7aa7198b4b5116ace4d00fb38650c6e3a67c2776", "patch": "@@ -55,6 +55,7 @@ use std::io::Write;\n use std::path::{Path, PathBuf};\n use std::time::Duration;\n use std::sync::mpsc;\n+use std::sync::atomic::{AtomicUsize, Ordering};\n \n mod code_stats;\n pub mod config;\n@@ -165,27 +166,16 @@ pub struct Session {\n }\n \n pub struct PerfStats {\n-    /// The accumulated time needed for computing the SVH of the crate\n-    pub svh_time: Cell<Duration>,\n-    /// The accumulated time spent on computing incr. comp. hashes\n-    pub incr_comp_hashes_time: Cell<Duration>,\n-    /// The number of incr. comp. hash computations performed\n-    pub incr_comp_hashes_count: Cell<u64>,\n-    /// The number of bytes hashed when computing ICH values\n-    pub incr_comp_bytes_hashed: Cell<u64>,\n     /// The accumulated time spent on computing symbol hashes\n-    pub symbol_hash_time: Cell<Duration>,\n+    pub symbol_hash_time: Lock<Duration>,\n     /// The accumulated time spent decoding def path tables from metadata\n-    pub decode_def_path_tables_time: Cell<Duration>,\n+    pub decode_def_path_tables_time: Lock<Duration>,\n     /// Total number of values canonicalized queries constructed.\n-    pub queries_canonicalized: Cell<usize>,\n-    /// Number of times we canonicalized a value and found that the\n-    /// result had already been canonicalized.\n-    pub canonicalized_values_allocated: Cell<usize>,\n+    pub queries_canonicalized: AtomicUsize,\n     /// Number of times this query is invoked.\n-    pub normalize_ty_after_erasing_regions: Cell<usize>,\n+    pub normalize_ty_after_erasing_regions: AtomicUsize,\n     /// Number of times this query is invoked.\n-    pub normalize_projection_ty: Cell<usize>,\n+    pub normalize_projection_ty: AtomicUsize,\n }\n \n /// Enum to support dispatch of one-time diagnostics (in Session.diag_once)\n@@ -838,47 +828,20 @@ impl Session {\n     }\n \n     pub fn print_perf_stats(&self) {\n-        println!(\n-            \"Total time spent computing SVHs:               {}\",\n-            duration_to_secs_str(self.perf_stats.svh_time.get())\n-        );\n-        println!(\n-            \"Total time spent computing incr. comp. hashes: {}\",\n-            duration_to_secs_str(self.perf_stats.incr_comp_hashes_time.get())\n-        );\n-        println!(\n-            \"Total number of incr. comp. hashes computed:   {}\",\n-            self.perf_stats.incr_comp_hashes_count.get()\n-        );\n-        println!(\n-            \"Total number of bytes hashed for incr. comp.:  {}\",\n-            self.perf_stats.incr_comp_bytes_hashed.get()\n-        );\n-        if self.perf_stats.incr_comp_hashes_count.get() != 0 {\n-            println!(\n-                \"Average bytes hashed per incr. comp. HIR node: {}\",\n-                self.perf_stats.incr_comp_bytes_hashed.get()\n-                    / self.perf_stats.incr_comp_hashes_count.get()\n-            );\n-        } else {\n-            println!(\"Average bytes hashed per incr. comp. HIR node: N/A\");\n-        }\n         println!(\n             \"Total time spent computing symbol hashes:      {}\",\n-            duration_to_secs_str(self.perf_stats.symbol_hash_time.get())\n+            duration_to_secs_str(*self.perf_stats.symbol_hash_time.lock())\n         );\n         println!(\n             \"Total time spent decoding DefPath tables:      {}\",\n-            duration_to_secs_str(self.perf_stats.decode_def_path_tables_time.get())\n+            duration_to_secs_str(*self.perf_stats.decode_def_path_tables_time.lock())\n         );\n         println!(\"Total queries canonicalized:                   {}\",\n-                 self.perf_stats.queries_canonicalized.get());\n-        println!(\"Total canonical values interned:               {}\",\n-                 self.perf_stats.canonicalized_values_allocated.get());\n+                 self.perf_stats.queries_canonicalized.load(Ordering::Relaxed));\n         println!(\"normalize_ty_after_erasing_regions:            {}\",\n-                 self.perf_stats.normalize_ty_after_erasing_regions.get());\n+                 self.perf_stats.normalize_ty_after_erasing_regions.load(Ordering::Relaxed));\n         println!(\"normalize_projection_ty:                       {}\",\n-                 self.perf_stats.normalize_projection_ty.get());\n+                 self.perf_stats.normalize_projection_ty.load(Ordering::Relaxed));\n     }\n \n     /// We want to know if we're allowed to do an optimization for crate foo from -z fuel=foo=n.\n@@ -1160,16 +1123,11 @@ pub fn build_session_(\n         ignored_attr_names: ich::compute_ignored_attr_names(),\n         profile_channel: Lock::new(None),\n         perf_stats: PerfStats {\n-            svh_time: Cell::new(Duration::from_secs(0)),\n-            incr_comp_hashes_time: Cell::new(Duration::from_secs(0)),\n-            incr_comp_hashes_count: Cell::new(0),\n-            incr_comp_bytes_hashed: Cell::new(0),\n-            symbol_hash_time: Cell::new(Duration::from_secs(0)),\n-            decode_def_path_tables_time: Cell::new(Duration::from_secs(0)),\n-            queries_canonicalized: Cell::new(0),\n-            canonicalized_values_allocated: Cell::new(0),\n-            normalize_ty_after_erasing_regions: Cell::new(0),\n-            normalize_projection_ty: Cell::new(0),\n+            symbol_hash_time: Lock::new(Duration::from_secs(0)),\n+            decode_def_path_tables_time: Lock::new(Duration::from_secs(0)),\n+            queries_canonicalized: AtomicUsize::new(0),\n+            normalize_ty_after_erasing_regions: AtomicUsize::new(0),\n+            normalize_projection_ty: AtomicUsize::new(0),\n         },\n         code_stats: RefCell::new(CodeStats::new()),\n         optimization_fuel_crate,"}, {"sha": "bb6aa654c296008015e75ab0dca47e8d9ab127bc", "filename": "src/librustc/util/common.rs", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7aa7198b4b5116ace4d00fb38650c6e3a67c2776/src%2Flibrustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7aa7198b4b5116ace4d00fb38650c6e3a67c2776/src%2Flibrustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fcommon.rs?ref=7aa7198b4b5116ace4d00fb38650c6e3a67c2776", "patch": "@@ -10,6 +10,8 @@\n \n #![allow(non_camel_case_types)]\n \n+use rustc_data_structures::sync::Lock;\n+\n use std::cell::{RefCell, Cell};\n use std::collections::HashMap;\n use std::ffi::CString;\n@@ -236,13 +238,14 @@ pub fn to_readable_str(mut val: usize) -> String {\n     groups.join(\"_\")\n }\n \n-pub fn record_time<T, F>(accu: &Cell<Duration>, f: F) -> T where\n+pub fn record_time<T, F>(accu: &Lock<Duration>, f: F) -> T where\n     F: FnOnce() -> T,\n {\n     let start = Instant::now();\n     let rv = f();\n     let duration = start.elapsed();\n-    accu.set(duration + accu.get());\n+    let mut accu = accu.lock();\n+    *accu = *accu + duration;\n     rv\n }\n \n@@ -382,13 +385,3 @@ fn test_to_readable_str() {\n     assert_eq!(\"1_000_000\", to_readable_str(1_000_000));\n     assert_eq!(\"1_234_567\", to_readable_str(1_234_567));\n }\n-\n-pub trait CellUsizeExt {\n-    fn increment(&self);\n-}\n-\n-impl CellUsizeExt for Cell<usize> {\n-    fn increment(&self) {\n-        self.set(self.get() + 1);\n-    }\n-}"}, {"sha": "1857df5717bbac2c773d9e623118530ffd96aa83", "filename": "src/librustc_traits/normalize_erasing_regions.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7aa7198b4b5116ace4d00fb38650c6e3a67c2776/src%2Flibrustc_traits%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7aa7198b4b5116ace4d00fb38650c6e3a67c2776/src%2Flibrustc_traits%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fnormalize_erasing_regions.rs?ref=7aa7198b4b5116ace4d00fb38650c6e3a67c2776", "patch": "@@ -11,17 +11,14 @@\n use rustc::traits::{Normalized, ObligationCause};\n use rustc::traits::query::NoSolution;\n use rustc::ty::{self, ParamEnvAnd, Ty, TyCtxt};\n-use rustc::util::common::CellUsizeExt;\n+use std::sync::atomic::Ordering;\n \n crate fn normalize_ty_after_erasing_regions<'tcx>(\n     tcx: TyCtxt<'_, 'tcx, 'tcx>,\n     goal: ParamEnvAnd<'tcx, Ty<'tcx>>,\n ) -> Ty<'tcx> {\n     let ParamEnvAnd { param_env, value } = goal;\n-    tcx.sess\n-        .perf_stats\n-        .normalize_ty_after_erasing_regions\n-        .increment();\n+    tcx.sess.perf_stats.normalize_ty_after_erasing_regions.fetch_add(1, Ordering::Relaxed);\n     tcx.infer_ctxt().enter(|infcx| {\n         let cause = ObligationCause::dummy();\n         match infcx.at(&cause, param_env).normalize(&value) {"}, {"sha": "8fc00c937e69c18fb393d40e3721ad55e9a481c5", "filename": "src/librustc_traits/normalize_projection_ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7aa7198b4b5116ace4d00fb38650c6e3a67c2776/src%2Flibrustc_traits%2Fnormalize_projection_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7aa7198b4b5116ace4d00fb38650c6e3a67c2776/src%2Flibrustc_traits%2Fnormalize_projection_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fnormalize_projection_ty.rs?ref=7aa7198b4b5116ace4d00fb38650c6e3a67c2776", "patch": "@@ -13,19 +13,19 @@ use rustc::traits::{self, FulfillmentContext, Normalized, ObligationCause,\n                     SelectionContext};\n use rustc::traits::query::{CanonicalProjectionGoal, NoSolution, normalize::NormalizationResult};\n use rustc::ty::{ParamEnvAnd, TyCtxt};\n-use rustc::util::common::CellUsizeExt;\n use rustc_data_structures::sync::Lrc;\n use syntax::ast::DUMMY_NODE_ID;\n use syntax_pos::DUMMY_SP;\n use util;\n+use std::sync::atomic::Ordering;\n \n crate fn normalize_projection_ty<'tcx>(\n     tcx: TyCtxt<'_, 'tcx, 'tcx>,\n     goal: CanonicalProjectionGoal<'tcx>,\n ) -> Result<Lrc<Canonical<'tcx, QueryResult<'tcx, NormalizationResult<'tcx>>>>, NoSolution> {\n     debug!(\"normalize_provider(goal={:#?})\", goal);\n \n-    tcx.sess.perf_stats.normalize_projection_ty.increment();\n+    tcx.sess.perf_stats.normalize_projection_ty.fetch_add(1, Ordering::Relaxed);\n     tcx.infer_ctxt().enter(|ref infcx| {\n         let (\n             ParamEnvAnd {"}]}