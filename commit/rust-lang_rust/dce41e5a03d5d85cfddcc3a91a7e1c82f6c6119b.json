{"sha": "dce41e5a03d5d85cfddcc3a91a7e1c82f6c6119b", "node_id": "C_kwDOAAsO6NoAKGRjZTQxZTVhMDNkNWQ4NWNmZGRjYzNhOTFhN2UxYzgyZjZjNjExOWI", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-10-10T11:58:25Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-10-10T11:58:25Z"}, "message": "move tests", "tree": {"sha": "712d004fa2251c67e53c02fa8559110b2f2450ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/712d004fa2251c67e53c02fa8559110b2f2450ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dce41e5a03d5d85cfddcc3a91a7e1c82f6c6119b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dce41e5a03d5d85cfddcc3a91a7e1c82f6c6119b", "html_url": "https://github.com/rust-lang/rust/commit/dce41e5a03d5d85cfddcc3a91a7e1c82f6c6119b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dce41e5a03d5d85cfddcc3a91a7e1c82f6c6119b/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42fd71e6c8884397cfcb9d514a0a7f1aacf929ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/42fd71e6c8884397cfcb9d514a0a7f1aacf929ca", "html_url": "https://github.com/rust-lang/rust/commit/42fd71e6c8884397cfcb9d514a0a7f1aacf929ca"}], "stats": {"total": 170, "additions": 82, "deletions": 88}, "files": [{"sha": "dd5effa3683aaaaa56890684b76a3850bef58c6b", "filename": "crates/hir_def/src/macro_expansion_tests/mbe/meta_syntax.rs", "status": "modified", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/dce41e5a03d5d85cfddcc3a91a7e1c82f6c6119b/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Fmeta_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce41e5a03d5d85cfddcc3a91a7e1c82f6c6119b/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Fmeta_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Fmeta_syntax.rs?ref=dce41e5a03d5d85cfddcc3a91a7e1c82f6c6119b", "patch": "@@ -77,3 +77,64 @@ macro_rules! f3 { ($i:_) => () }\n \"#]],\n     )\n }\n+\n+#[test]\n+fn test_rustc_issue_57597() {\n+    // <https://github.com/rust-lang/rust/blob/master/src/test/ui/issues/issue-57597.rs>\n+    check(\n+        r#\"\n+macro_rules! m0 { ($($($i:ident)?)+) => {}; }\n+macro_rules! m1 { ($($($i:ident)?)*) => {}; }\n+macro_rules! m2 { ($($($i:ident)?)?) => {}; }\n+macro_rules! m3 { ($($($($i:ident)?)?)?) => {}; }\n+macro_rules! m4 { ($($($($i:ident)*)?)?) => {}; }\n+macro_rules! m5 { ($($($($i:ident)?)*)?) => {}; }\n+macro_rules! m6 { ($($($($i:ident)?)?)*) => {}; }\n+macro_rules! m7 { ($($($($i:ident)*)*)?) => {}; }\n+macro_rules! m8 { ($($($($i:ident)?)*)*) => {}; }\n+macro_rules! m9 { ($($($($i:ident)?)*)+) => {}; }\n+macro_rules! mA { ($($($($i:ident)+)?)*) => {}; }\n+macro_rules! mB { ($($($($i:ident)+)*)?) => {}; }\n+\n+m0!();\n+m1!();\n+m2!();\n+m3!();\n+m4!();\n+m5!();\n+m6!();\n+m7!();\n+m8!();\n+m9!();\n+mA!();\n+mB!();\n+    \"#,\n+        expect![[r#\"\n+macro_rules! m0 { ($($($i:ident)?)+) => {}; }\n+macro_rules! m1 { ($($($i:ident)?)*) => {}; }\n+macro_rules! m2 { ($($($i:ident)?)?) => {}; }\n+macro_rules! m3 { ($($($($i:ident)?)?)?) => {}; }\n+macro_rules! m4 { ($($($($i:ident)*)?)?) => {}; }\n+macro_rules! m5 { ($($($($i:ident)?)*)?) => {}; }\n+macro_rules! m6 { ($($($($i:ident)?)?)*) => {}; }\n+macro_rules! m7 { ($($($($i:ident)*)*)?) => {}; }\n+macro_rules! m8 { ($($($($i:ident)?)*)*) => {}; }\n+macro_rules! m9 { ($($($($i:ident)?)*)+) => {}; }\n+macro_rules! mA { ($($($($i:ident)+)?)*) => {}; }\n+macro_rules! mB { ($($($($i:ident)+)*)?) => {}; }\n+\n+/* error: invalid macro definition: empty token tree in repetition */\n+/* error: invalid macro definition: empty token tree in repetition */\n+/* error: invalid macro definition: empty token tree in repetition */\n+/* error: invalid macro definition: empty token tree in repetition */\n+/* error: invalid macro definition: empty token tree in repetition */\n+/* error: invalid macro definition: empty token tree in repetition */\n+/* error: invalid macro definition: empty token tree in repetition */\n+/* error: invalid macro definition: empty token tree in repetition */\n+/* error: invalid macro definition: empty token tree in repetition */\n+/* error: invalid macro definition: empty token tree in repetition */\n+/* error: invalid macro definition: empty token tree in repetition */\n+/* error: invalid macro definition: empty token tree in repetition */\n+    \"#]],\n+    );\n+}"}, {"sha": "563fe5058850547ffcf70eb7ca6aacac368fe2f3", "filename": "crates/hir_def/src/macro_expansion_tests/mbe/regression.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/dce41e5a03d5d85cfddcc3a91a7e1c82f6c6119b/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Fregression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce41e5a03d5d85cfddcc3a91a7e1c82f6c6119b/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Fregression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Fregression.rs?ref=dce41e5a03d5d85cfddcc3a91a7e1c82f6c6119b", "patch": "@@ -879,3 +879,24 @@ pub fn new() {\n \"#]],\n     );\n }\n+\n+#[test]\n+fn test_no_space_after_semi_colon() {\n+    check(\n+        r#\"\n+macro_rules! with_std {\n+    ($($i:item)*) => ($(#[cfg(feature = \"std\")]$i)*)\n+}\n+\n+with_std! {mod m;mod f;}\n+\"#,\n+        expect![[r##\"\n+macro_rules! with_std {\n+    ($($i:item)*) => ($(#[cfg(feature = \"std\")]$i)*)\n+}\n+\n+#[cfg(feature = \"std\")] mod m;\n+#[cfg(feature = \"std\")] mod f;\n+\"##]],\n+    )\n+}"}, {"sha": "78e24a37e6f9ea75d395a303950861b7e270ecff", "filename": "crates/mbe/src/tests.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/dce41e5a03d5d85cfddcc3a91a7e1c82f6c6119b/crates%2Fmbe%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce41e5a03d5d85cfddcc3a91a7e1c82f6c6119b/crates%2Fmbe%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Ftests.rs?ref=dce41e5a03d5d85cfddcc3a91a7e1c82f6c6119b", "patch": "@@ -141,15 +141,6 @@ pub(crate) fn parse_macro(ra_fixture: &str) -> MacroFixture {\n     MacroFixture { rules }\n }\n \n-pub(crate) fn parse_macro_error(ra_fixture: &str) -> ParseError {\n-    let definition_tt = parse_macro_rules_to_tt(ra_fixture);\n-\n-    match MacroRules::parse(&definition_tt) {\n-        Ok(_) => panic!(\"Expect error\"),\n-        Err(err) => err,\n-    }\n-}\n-\n pub(crate) fn parse_to_token_tree_by_syntax(ra_fixture: &str) -> tt::Subtree {\n     let source_file = ast::SourceFile::parse(ra_fixture).ok().unwrap();\n     let tt = syntax_node_to_token_tree(source_file.syntax()).0;"}, {"sha": "8a23a0be532c3a5b0fcf08e3848d1a445c67f0f5", "filename": "crates/mbe/src/tests/expand.rs", "status": "modified", "additions": 0, "deletions": 79, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/dce41e5a03d5d85cfddcc3a91a7e1c82f6c6119b/crates%2Fmbe%2Fsrc%2Ftests%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce41e5a03d5d85cfddcc3a91a7e1c82f6c6119b/crates%2Fmbe%2Fsrc%2Ftests%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Ftests%2Fexpand.rs?ref=dce41e5a03d5d85cfddcc3a91a7e1c82f6c6119b", "patch": "@@ -1,6 +1,5 @@\n use ::parser::ParserEntryPoint;\n use syntax::{SyntaxKind::IDENT, T};\n-use test_utils::assert_eq_text;\n \n use super::*;\n \n@@ -98,84 +97,6 @@ fn test_attr_to_token_tree() {\n     );\n }\n \n-\n-#[test]\n-fn test_no_space_after_semi_colon() {\n-    let expanded = parse_macro(\n-        r#\"\n-        macro_rules! with_std { ($($i:item)*) => ($(#[cfg(feature = \"std\")]$i)*) }\n-    \"#,\n-    )\n-    .expand_items(r#\"with_std! {mod m;mod f;}\"#);\n-\n-    let dump = format!(\"{:#?}\", expanded);\n-    assert_eq_text!(\n-        r###\"MACRO_ITEMS@0..52\n-  MODULE@0..26\n-    ATTR@0..21\n-      POUND@0..1 \"#\"\n-      L_BRACK@1..2 \"[\"\n-      META@2..20\n-        PATH@2..5\n-          PATH_SEGMENT@2..5\n-            NAME_REF@2..5\n-              IDENT@2..5 \"cfg\"\n-        TOKEN_TREE@5..20\n-          L_PAREN@5..6 \"(\"\n-          IDENT@6..13 \"feature\"\n-          EQ@13..14 \"=\"\n-          STRING@14..19 \"\\\"std\\\"\"\n-          R_PAREN@19..20 \")\"\n-      R_BRACK@20..21 \"]\"\n-    MOD_KW@21..24 \"mod\"\n-    NAME@24..25\n-      IDENT@24..25 \"m\"\n-    SEMICOLON@25..26 \";\"\n-  MODULE@26..52\n-    ATTR@26..47\n-      POUND@26..27 \"#\"\n-      L_BRACK@27..28 \"[\"\n-      META@28..46\n-        PATH@28..31\n-          PATH_SEGMENT@28..31\n-            NAME_REF@28..31\n-              IDENT@28..31 \"cfg\"\n-        TOKEN_TREE@31..46\n-          L_PAREN@31..32 \"(\"\n-          IDENT@32..39 \"feature\"\n-          EQ@39..40 \"=\"\n-          STRING@40..45 \"\\\"std\\\"\"\n-          R_PAREN@45..46 \")\"\n-      R_BRACK@46..47 \"]\"\n-    MOD_KW@47..50 \"mod\"\n-    NAME@50..51\n-      IDENT@50..51 \"f\"\n-    SEMICOLON@51..52 \";\"\"###,\n-        dump.trim()\n-    );\n-}\n-\n-// https://github.com/rust-lang/rust/blob/master/src/test/ui/issues/issue-57597.rs\n-#[test]\n-fn test_rustc_issue_57597() {\n-    fn test_error(fixture: &str) {\n-        assert_eq!(parse_macro_error(fixture), ParseError::RepetitionEmptyTokenTree);\n-    }\n-\n-    test_error(\"macro_rules! foo { ($($($i:ident)?)+) => {}; }\");\n-    test_error(\"macro_rules! foo { ($($($i:ident)?)*) => {}; }\");\n-    test_error(\"macro_rules! foo { ($($($i:ident)?)?) => {}; }\");\n-    test_error(\"macro_rules! foo { ($($($($i:ident)?)?)?) => {}; }\");\n-    test_error(\"macro_rules! foo { ($($($($i:ident)*)?)?) => {}; }\");\n-    test_error(\"macro_rules! foo { ($($($($i:ident)?)*)?) => {}; }\");\n-    test_error(\"macro_rules! foo { ($($($($i:ident)?)?)*) => {}; }\");\n-    test_error(\"macro_rules! foo { ($($($($i:ident)*)*)?) => {}; }\");\n-    test_error(\"macro_rules! foo { ($($($($i:ident)?)*)*) => {}; }\");\n-    test_error(\"macro_rules! foo { ($($($($i:ident)?)*)+) => {}; }\");\n-    test_error(\"macro_rules! foo { ($($($($i:ident)+)?)*) => {}; }\");\n-    test_error(\"macro_rules! foo { ($($($($i:ident)+)*)?) => {}; }\");\n-}\n-\n #[test]\n fn test_expand_bad_literal() {\n     parse_macro("}]}