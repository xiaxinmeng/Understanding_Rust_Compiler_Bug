{"sha": "c9d8e1493c840a9901f7caecda26de1a8a48f754", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5ZDhlMTQ5M2M4NDBhOTkwMWY3Y2FlY2RhMjZkZTFhOGE0OGY3NTQ=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-04-27T01:13:15Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-04-27T01:13:15Z"}, "message": "Refactor field `span` of `NameBinding` from `Option<Span>` to `Span`.", "tree": {"sha": "1be6bd63bc2a247f0cbe3b2e149c580b1884683e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1be6bd63bc2a247f0cbe3b2e149c580b1884683e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9d8e1493c840a9901f7caecda26de1a8a48f754", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9d8e1493c840a9901f7caecda26de1a8a48f754", "html_url": "https://github.com/rust-lang/rust/commit/c9d8e1493c840a9901f7caecda26de1a8a48f754", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9d8e1493c840a9901f7caecda26de1a8a48f754/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c46164b626925083519bfd48733fad48cc1ddec5", "url": "https://api.github.com/repos/rust-lang/rust/commits/c46164b626925083519bfd48733fad48cc1ddec5", "html_url": "https://github.com/rust-lang/rust/commit/c46164b626925083519bfd48733fad48cc1ddec5"}], "stats": {"total": 27, "additions": 13, "deletions": 14}, "files": [{"sha": "6a8779d79db6f650c14ed0223025fd3603d469f6", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c9d8e1493c840a9901f7caecda26de1a8a48f754/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d8e1493c840a9901f7caecda26de1a8a48f754/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=c9d8e1493c840a9901f7caecda26de1a8a48f754", "patch": "@@ -48,13 +48,13 @@ trait ToNameBinding<'a> {\n \n impl<'a> ToNameBinding<'a> for (Module<'a>, Span, ty::Visibility) {\n     fn to_name_binding(self) -> NameBinding<'a> {\n-        NameBinding { kind: NameBindingKind::Module(self.0), span: Some(self.1), vis: self.2 }\n+        NameBinding { kind: NameBindingKind::Module(self.0), span: self.1, vis: self.2 }\n     }\n }\n \n impl<'a> ToNameBinding<'a> for (Def, Span, ty::Visibility) {\n     fn to_name_binding(self) -> NameBinding<'a> {\n-        NameBinding { kind: NameBindingKind::Def(self.0), span: Some(self.1), vis: self.2 }\n+        NameBinding { kind: NameBindingKind::Def(self.0), span: self.1, vis: self.2 }\n     }\n }\n "}, {"sha": "a5831186c877943b005070f1f0a86dc9e3bdb22c", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c9d8e1493c840a9901f7caecda26de1a8a48f754/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d8e1493c840a9901f7caecda26de1a8a48f754/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=c9d8e1493c840a9901f7caecda26de1a8a48f754", "patch": "@@ -349,7 +349,7 @@ fn resolve_struct_error<'b, 'a: 'b, 'tcx: 'a>(resolver: &'b Resolver<'a, 'tcx>,\n             if let Some(binding) = resolver.current_module\n                                            .resolve_name_in_lexical_scope(name, ValueNS) {\n                 if binding.is_import() {\n-                    err.span_note(binding.span.unwrap(), \"constant imported here\");\n+                    err.span_note(binding.span, \"constant imported here\");\n                 }\n             }\n             err\n@@ -900,7 +900,7 @@ impl<'a> fmt::Debug for ModuleS<'a> {\n #[derive(Clone, Debug)]\n pub struct NameBinding<'a> {\n     kind: NameBindingKind<'a>,\n-    span: Option<Span>,\n+    span: Span,\n     vis: ty::Visibility,\n }\n \n@@ -3293,7 +3293,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                             identifier: ident,\n                             parameters: params,\n                         };\n-                        let span = name_binding.span.unwrap_or(syntax::codemap::DUMMY_SP);\n+                        let span = name_binding.span;\n                         let mut segms = path_segments.clone();\n                         segms.push(segment);\n                         let segms = HirVec::from_vec(segms);\n@@ -3447,7 +3447,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                        binding: &NameBinding,\n                        old_binding: &NameBinding) {\n         // Error on the second of two conflicting names\n-        if old_binding.span.unwrap().lo > binding.span.unwrap().lo {\n+        if old_binding.span.lo > binding.span.lo {\n             return self.report_conflict(parent, name, ns, old_binding, binding);\n         }\n \n@@ -3463,7 +3463,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             false => (\"defined\", \"definition\"),\n         };\n \n-        let span = binding.span.unwrap();\n+        let span = binding.span;\n         let msg = {\n             let kind = match (ns, old_binding.module()) {\n                 (ValueNS, _) => \"a value\",\n@@ -3488,9 +3488,8 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             },\n         };\n \n-        let span = old_binding.span.unwrap();\n-        if span != codemap::DUMMY_SP {\n-            err.span_note(span, &format!(\"previous {} of `{}` here\", noun, name));\n+        if old_binding.span != codemap::DUMMY_SP {\n+            err.span_note(old_binding.span, &format!(\"previous {} of `{}` here\", noun, name));\n         }\n         err.emit();\n     }"}, {"sha": "4a87ffe820d4a9bb7d4ea64d8ba5b3738ccc7718", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c9d8e1493c840a9901f7caecda26de1a8a48f754/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d8e1493c840a9901f7caecda26de1a8a48f754/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=c9d8e1493c840a9901f7caecda26de1a8a48f754", "patch": "@@ -26,7 +26,7 @@ use rustc::hir::def::*;\n \n use syntax::ast::{NodeId, Name};\n use syntax::attr::AttrMetaMethods;\n-use syntax::codemap::Span;\n+use syntax::codemap::{Span, DUMMY_SP};\n use syntax::util::lev_distance::find_best_match_for_name;\n \n use std::cell::{Cell, RefCell};\n@@ -76,7 +76,7 @@ impl<'a> ImportDirective<'a> {\n                 directive: self,\n                 privacy_error: privacy_error,\n             },\n-            span: Some(self.span),\n+            span: self.span,\n             vis: self.vis,\n         }\n     }\n@@ -412,7 +412,7 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n         if let SingleImport { target, .. } = e.import_directive.subclass {\n             let dummy_binding = self.resolver.arenas.alloc_name_binding(NameBinding {\n                 kind: NameBindingKind::Def(Def::Err),\n-                span: None,\n+                span: DUMMY_SP,\n                 vis: ty::Visibility::Public,\n             });\n             let dummy_binding = e.import_directive.import(dummy_binding, None);\n@@ -696,7 +696,7 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n                                        (error E0364), consider declaring its enum as `pub`\",\n                                       name);\n                     let lint = lint::builtin::PRIVATE_IN_PUBLIC;\n-                    self.resolver.session.add_lint(lint, directive.id, binding.span.unwrap(), msg);\n+                    self.resolver.session.add_lint(lint, directive.id, binding.span, msg);\n                 }\n             }\n         }"}]}