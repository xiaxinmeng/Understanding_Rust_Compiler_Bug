{"sha": "020287516b756936dc774f95f6a8039c7d24d640", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyMDI4NzUxNmI3NTY5MzZkYzc3NGY5NWY2YTgwMzljN2QyNGQ2NDA=", "commit": {"author": {"name": "The8472", "email": "git@infinite-source.de", "date": "2021-04-01T23:10:26Z"}, "committer": {"name": "The8472", "email": "git@infinite-source.de", "date": "2021-04-08T18:30:27Z"}, "message": "add TrustedRandomAccess specialization to vec::extend\n\nThis should do roughly the same as the TrustedLen specialization\nbut result in less IR by using __iterator_get_unchecked\ninstead of iterator.for_each.", "tree": {"sha": "4388fae1b499a5b319d2c924e5a672cf8273d648", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4388fae1b499a5b319d2c924e5a672cf8273d648"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/020287516b756936dc774f95f6a8039c7d24d640", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/020287516b756936dc774f95f6a8039c7d24d640", "html_url": "https://github.com/rust-lang/rust/commit/020287516b756936dc774f95f6a8039c7d24d640", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/020287516b756936dc774f95f6a8039c7d24d640/comments", "author": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "committer": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d474075a8f28ae9a410e95d849d009006db4b176", "url": "https://api.github.com/repos/rust-lang/rust/commits/d474075a8f28ae9a410e95d849d009006db4b176", "html_url": "https://github.com/rust-lang/rust/commit/d474075a8f28ae9a410e95d849d009006db4b176"}], "stats": {"total": 88, "additions": 63, "deletions": 25}, "files": [{"sha": "db19d739ff8dfb87f4d65f4406e62bc6d3a9134a", "filename": "library/alloc/src/vec/spec_extend.rs", "status": "modified", "additions": 59, "deletions": 25, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/020287516b756936dc774f95f6a8039c7d24d640/library%2Falloc%2Fsrc%2Fvec%2Fspec_extend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/020287516b756936dc774f95f6a8039c7d24d640/library%2Falloc%2Fsrc%2Fvec%2Fspec_extend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fspec_extend.rs?ref=020287516b756936dc774f95f6a8039c7d24d640", "patch": "@@ -1,5 +1,5 @@\n use crate::alloc::Allocator;\n-use core::iter::TrustedLen;\n+use core::iter::{TrustedLen, TrustedRandomAccess};\n use core::ptr::{self};\n use core::slice::{self};\n \n@@ -11,6 +11,49 @@ pub(super) trait SpecExtend<T, I> {\n }\n \n impl<T, I, A: Allocator> SpecExtend<T, I> for Vec<T, A>\n+where\n+    I: Iterator<Item = T>,\n+{\n+    default fn spec_extend(&mut self, iter: I) {\n+        SpecExtendInner::spec_extend(self, iter);\n+    }\n+}\n+\n+impl<T, A: Allocator> SpecExtend<T, IntoIter<T>> for Vec<T, A> {\n+    fn spec_extend(&mut self, mut iterator: IntoIter<T>) {\n+        unsafe {\n+            self.append_elements(iterator.as_slice() as _);\n+        }\n+        iterator.ptr = iterator.end;\n+    }\n+}\n+\n+impl<'a, T: 'a, I, A: Allocator + 'a> SpecExtend<&'a T, I> for Vec<T, A>\n+where\n+    I: Iterator<Item = &'a T>,\n+    T: Clone,\n+{\n+    default fn spec_extend(&mut self, iterator: I) {\n+        SpecExtend::spec_extend(self, iterator.cloned())\n+    }\n+}\n+\n+impl<'a, T: 'a, A: Allocator + 'a> SpecExtend<&'a T, slice::Iter<'a, T>> for Vec<T, A>\n+where\n+    T: Copy,\n+{\n+    fn spec_extend(&mut self, iterator: slice::Iter<'a, T>) {\n+        let slice = iterator.as_slice();\n+        unsafe { self.append_elements(slice) };\n+    }\n+}\n+\n+// Helper trait to disambiguate overlapping specializations\n+trait SpecExtendInner<T, I> {\n+    fn spec_extend(&mut self, iter: I);\n+}\n+\n+impl<T, I, A: Allocator> SpecExtendInner<T, I> for Vec<T, A>\n where\n     I: Iterator<Item = T>,\n {\n@@ -19,7 +62,7 @@ where\n     }\n }\n \n-impl<T, I, A: Allocator> SpecExtend<T, I> for Vec<T, A>\n+impl<T, I, A: Allocator> SpecExtendInner<T, I> for Vec<T, A>\n where\n     I: TrustedLen<Item = T>,\n {\n@@ -57,31 +100,22 @@ where\n     }\n }\n \n-impl<T, A: Allocator> SpecExtend<T, IntoIter<T>> for Vec<T, A> {\n-    fn spec_extend(&mut self, mut iterator: IntoIter<T>) {\n-        unsafe {\n-            self.append_elements(iterator.as_slice() as _);\n-        }\n-        iterator.ptr = iterator.end;\n-    }\n-}\n-\n-impl<'a, T: 'a, I, A: Allocator + 'a> SpecExtend<&'a T, I> for Vec<T, A>\n+impl<T, I, A: Allocator> SpecExtendInner<T, I> for Vec<T, A>\n where\n-    I: Iterator<Item = &'a T>,\n-    T: Clone,\n+    I: TrustedLen<Item = T> + TrustedRandomAccess,\n {\n-    default fn spec_extend(&mut self, iterator: I) {\n-        self.spec_extend(iterator.cloned())\n-    }\n-}\n+    default fn spec_extend(&mut self, mut iterator: I) {\n+        let size = iterator.size();\n+        self.reserve(size);\n \n-impl<'a, T: 'a, A: Allocator + 'a> SpecExtend<&'a T, slice::Iter<'a, T>> for Vec<T, A>\n-where\n-    T: Copy,\n-{\n-    fn spec_extend(&mut self, iterator: slice::Iter<'a, T>) {\n-        let slice = iterator.as_slice();\n-        unsafe { self.append_elements(slice) };\n+        // SAFETY: reserve ensured that there is sufficient capacity for the additional items.\n+        // The loop upholds the TRA requirements by accessing each element only once.\n+        unsafe {\n+            let sink = self.as_mut_ptr().add(self.len());\n+            for i in 0..size {\n+                ptr::write(sink.add(i), iterator.__iterator_get_unchecked(i));\n+                self.set_len(self.len() + 1);\n+            }\n+        }\n     }\n }"}, {"sha": "4f6ef24be1ba48a6c543f3fee45b3e8827c922d8", "filename": "library/core/src/iter/adapters/zip.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/020287516b756936dc774f95f6a8039c7d24d640/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fzip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/020287516b756936dc774f95f6a8039c7d24d640/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fzip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fzip.rs?ref=020287516b756936dc774f95f6a8039c7d24d640", "patch": "@@ -416,6 +416,10 @@ impl<A: Debug + TrustedRandomAccess, B: Debug + TrustedRandomAccess> ZipFmt<A, B\n \n /// An iterator whose items are random-accessible efficiently\n ///\n+/// Iterators that implement this trait should also implement TrustedLen which\n+/// allows specialization to disambiguate overlaps with a `TrustedLen + TrustedRandomAccess`\n+/// bound.\n+///\n /// # Safety\n ///\n /// The iterator's `size_hint` must be exact and cheap to call."}]}