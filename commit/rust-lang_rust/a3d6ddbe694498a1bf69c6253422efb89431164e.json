{"sha": "a3d6ddbe694498a1bf69c6253422efb89431164e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzZDZkZGJlNjk0NDk4YTFiZjY5YzYyNTM0MjJlZmI4OTQzMTE2NGU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-01-16T15:27:21Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-01-16T15:27:21Z"}, "message": "More natural trait setup", "tree": {"sha": "ced08cf46f2f822abc630b6935ec5ecf4ee4dc0d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ced08cf46f2f822abc630b6935ec5ecf4ee4dc0d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a3d6ddbe694498a1bf69c6253422efb89431164e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a3d6ddbe694498a1bf69c6253422efb89431164e", "html_url": "https://github.com/rust-lang/rust/commit/a3d6ddbe694498a1bf69c6253422efb89431164e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a3d6ddbe694498a1bf69c6253422efb89431164e/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8691ae8ac04ef9dc089a377770da86a952b0e4c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/8691ae8ac04ef9dc089a377770da86a952b0e4c1", "html_url": "https://github.com/rust-lang/rust/commit/8691ae8ac04ef9dc089a377770da86a952b0e4c1"}], "stats": {"total": 76, "additions": 49, "deletions": 27}, "files": [{"sha": "8db63f762733564e49e1f5a28f3de8a7d011ece4", "filename": "crates/ra_assists/src/assists/add_new.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a3d6ddbe694498a1bf69c6253422efb89431164e/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3d6ddbe694498a1bf69c6253422efb89431164e/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_new.rs?ref=a3d6ddbe694498a1bf69c6253422efb89431164e", "patch": "@@ -140,12 +140,12 @@ fn find_struct_impl(\n \n     let struct_ty = {\n         let src = InFile { file_id: ctx.frange.file_id.into(), value: strukt.clone() };\n-        sb.to_def::<hir::Struct, _>(src)?.ty(db)\n+        sb.to_def(src)?.ty(db)\n     };\n \n     let block = module.descendants().filter_map(ast::ImplBlock::cast).find_map(|impl_blk| {\n         let src = InFile { file_id: ctx.frange.file_id.into(), value: impl_blk.clone() };\n-        let blk = sb.to_def::<hir::ImplBlock, _>(src)?;\n+        let blk = sb.to_def(src)?;\n \n         let same_ty = blk.target_ty(db) == struct_ty;\n         let not_trait_impl = blk.target_trait(db).is_none();"}, {"sha": "caaff012a1f39ddc9bf894572144cb8f0b34b4cd", "filename": "crates/ra_hir/src/from_source.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a3d6ddbe694498a1bf69c6253422efb89431164e/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3d6ddbe694498a1bf69c6253422efb89431164e/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs?ref=a3d6ddbe694498a1bf69c6253422efb89431164e", "patch": "@@ -14,8 +14,7 @@ use ra_syntax::{\n \n use crate::{\n     db::{DefDatabase, HirDatabase},\n-    Const, DefWithBody, Enum, Function, ImplBlock, InFile, Local, Module, SourceBinder, Static,\n-    Struct, Trait, TypeAlias, TypeParam,\n+    DefWithBody, InFile, Local, Module, SourceBinder, TypeParam,\n };\n \n impl Local {\n@@ -25,9 +24,9 @@ impl Local {\n         let parent: DefWithBody = src.value.syntax().ancestors().find_map(|it| {\n             let res = match_ast! {\n                 match it {\n-                    ast::ConstDef(value) => { sb.to_def::<Const, _>(InFile { value, file_id})?.into() },\n-                    ast::StaticDef(value) => { sb.to_def::<Static, _>(InFile { value, file_id})?.into() },\n-                    ast::FnDef(value) => { sb.to_def::<Function, _>(InFile { value, file_id})?.into() },\n+                    ast::ConstDef(value) => { sb.to_def(InFile { value, file_id})?.into() },\n+                    ast::StaticDef(value) => { sb.to_def(InFile { value, file_id})?.into() },\n+                    ast::FnDef(value) => { sb.to_def(InFile { value, file_id})?.into() },\n                     _ => return None,\n                 }\n             };\n@@ -47,12 +46,12 @@ impl TypeParam {\n         let parent: GenericDefId = src.value.syntax().ancestors().find_map(|it| {\n             let res = match_ast! {\n                 match it {\n-                    ast::FnDef(value) => { sb.to_def::<Function, _>(InFile { value, file_id})?.id.into() },\n-                    ast::StructDef(value) => { sb.to_def::<Struct, _>(InFile { value, file_id})?.id.into() },\n-                    ast::EnumDef(value) => { sb.to_def::<Enum, _>(InFile { value, file_id})?.id.into() },\n-                    ast::TraitDef(value) => { sb.to_def::<Trait, _>(InFile { value, file_id})?.id.into() },\n-                    ast::TypeAliasDef(value) => { sb.to_def::<TypeAlias, _>(InFile { value, file_id})?.id.into() },\n-                    ast::ImplBlock(value) => { sb.to_def::<ImplBlock, _>(InFile { value, file_id})?.id.into() },\n+                    ast::FnDef(value) => { sb.to_def(InFile { value, file_id})?.id.into() },\n+                    ast::StructDef(value) => { sb.to_def(InFile { value, file_id})?.id.into() },\n+                    ast::EnumDef(value) => { sb.to_def(InFile { value, file_id})?.id.into() },\n+                    ast::TraitDef(value) => { sb.to_def(InFile { value, file_id})?.id.into() },\n+                    ast::TypeAliasDef(value) => { sb.to_def(InFile { value, file_id})?.id.into() },\n+                    ast::ImplBlock(value) => { sb.to_def(InFile { value, file_id})?.id.into() },\n                     _ => return None,\n                 }\n             };"}, {"sha": "c02175c0611fb64a43dd39ca4fa11886d51eab52", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 34, "deletions": 11, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/a3d6ddbe694498a1bf69c6253422efb89431164e/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3d6ddbe694498a1bf69c6253422efb89431164e/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=a3d6ddbe694498a1bf69c6253422efb89431164e", "patch": "@@ -52,11 +52,7 @@ impl<DB: HirDatabase> SourceBinder<'_, DB> {\n         SourceAnalyzer::new_for_resolver(resolver, src)\n     }\n \n-    pub fn to_def<D, T>(&mut self, src: InFile<T>) -> Option<D>\n-    where\n-        D: From<T::ID>,\n-        T: ToId,\n-    {\n+    pub fn to_def<T: ToDef>(&mut self, src: InFile<T>) -> Option<T::Def> {\n         let id: T::ID = self.to_id(src)?;\n         Some(id.into())\n     }\n@@ -114,6 +110,39 @@ impl<DB: HirDatabase> SourceBinder<'_, DB> {\n     }\n }\n \n+pub trait ToId: Sized + AstNode + 'static {\n+    type ID: Sized + Copy + 'static;\n+    fn to_id<DB: HirDatabase>(sb: &mut SourceBinder<'_, DB>, src: InFile<Self>)\n+        -> Option<Self::ID>;\n+}\n+\n+pub trait ToDef: ToId {\n+    type Def: From<Self::ID>;\n+}\n+\n+macro_rules! to_def_impls {\n+    ($(($def:path, $ast:path)),* ,) => {$(\n+        impl ToDef for $ast {\n+            type Def = $def;\n+        }\n+    )*}\n+}\n+\n+to_def_impls![\n+    (crate::Struct, ast::StructDef),\n+    (crate::Enum, ast::EnumDef),\n+    (crate::Union, ast::UnionDef),\n+    (crate::Trait, ast::TraitDef),\n+    (crate::ImplBlock, ast::ImplBlock),\n+    (crate::TypeAlias, ast::TypeAliasDef),\n+    (crate::Const, ast::ConstDef),\n+    (crate::Static, ast::StaticDef),\n+    (crate::Function, ast::FnDef),\n+    (crate::StructField, ast::RecordFieldDef),\n+    (crate::EnumVariant, ast::EnumVariant),\n+    (crate::MacroDef, ast::MacroCall), // this one is dubious, not all calls are macros\n+];\n+\n #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug)]\n enum ChildContainer {\n     DefWithBodyId(DefWithBodyId),\n@@ -133,12 +162,6 @@ impl_froms! {\n     VariantId,\n }\n \n-pub trait ToId: Sized + AstNode + 'static {\n-    type ID: Sized + Copy + 'static;\n-    fn to_id<DB: HirDatabase>(sb: &mut SourceBinder<'_, DB>, src: InFile<Self>)\n-        -> Option<Self::ID>;\n-}\n-\n pub trait ToIdByKey: Sized + AstNode + 'static {\n     type ID: Sized + Copy + 'static;\n     const KEY: Key<Self, Self::ID>;"}, {"sha": "fb9396195cd8cfebd94d87246870400c436d0a33", "filename": "crates/ra_ide/src/impls.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a3d6ddbe694498a1bf69c6253422efb89431164e/crates%2Fra_ide%2Fsrc%2Fimpls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3d6ddbe694498a1bf69c6253422efb89431164e/crates%2Fra_ide%2Fsrc%2Fimpls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fimpls.rs?ref=a3d6ddbe694498a1bf69c6253422efb89431164e", "patch": "@@ -44,15 +44,15 @@ fn impls_for_def(\n     let ty = match node {\n         ast::NominalDef::StructDef(def) => {\n             let src = hir::InFile { file_id: position.file_id.into(), value: def.clone() };\n-            sb.to_def::<hir::Struct, _>(src)?.ty(sb.db)\n+            sb.to_def(src)?.ty(sb.db)\n         }\n         ast::NominalDef::EnumDef(def) => {\n             let src = hir::InFile { file_id: position.file_id.into(), value: def.clone() };\n-            sb.to_def::<hir::Enum, _>(src)?.ty(sb.db)\n+            sb.to_def(src)?.ty(sb.db)\n         }\n         ast::NominalDef::UnionDef(def) => {\n             let src = hir::InFile { file_id: position.file_id.into(), value: def.clone() };\n-            sb.to_def::<hir::Union, _>(src)?.ty(sb.db)\n+            sb.to_def(src)?.ty(sb.db)\n         }\n     };\n "}]}