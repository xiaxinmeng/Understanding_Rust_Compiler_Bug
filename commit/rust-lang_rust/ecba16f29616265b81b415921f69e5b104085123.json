{"sha": "ecba16f29616265b81b415921f69e5b104085123", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjYmExNmYyOTYxNjI2NWI4MWI0MTU5MjFmNjllNWIxMDQwODUxMjM=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-02-21T15:42:39Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-02-21T15:52:42Z"}, "message": "Various enum to int cast fixes", "tree": {"sha": "c34da86fa1d10df0e6ad971f2f75963914832a86", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c34da86fa1d10df0e6ad971f2f75963914832a86"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ecba16f29616265b81b415921f69e5b104085123", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ecba16f29616265b81b415921f69e5b104085123", "html_url": "https://github.com/rust-lang/rust/commit/ecba16f29616265b81b415921f69e5b104085123", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ecba16f29616265b81b415921f69e5b104085123/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7fc34839acfe1d69df83f79c4c2c8802dea17cdc", "url": "https://api.github.com/repos/rust-lang/rust/commits/7fc34839acfe1d69df83f79c4c2c8802dea17cdc", "html_url": "https://github.com/rust-lang/rust/commit/7fc34839acfe1d69df83f79c4c2c8802dea17cdc"}], "stats": {"total": 66, "additions": 22, "deletions": 44}, "files": [{"sha": "9b2249956c5ef7f5e5aa265d48f2b612074cea03", "filename": "src/base.rs", "status": "modified", "additions": 15, "deletions": 43, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/ecba16f29616265b81b415921f69e5b104085123/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecba16f29616265b81b415921f69e5b104085123/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=ecba16f29616265b81b415921f69e5b104085123", "patch": "@@ -627,50 +627,22 @@ fn codegen_stmt<'tcx>(\n                             ty::Uint(_) | ty::Int(_) => {}\n                             _ => unreachable!(\"cast adt {} -> {}\", from_ty, to_ty),\n                         }\n+                        let to_clif_ty = fx.clif_type(to_ty).unwrap();\n \n-                        use rustc_target::abi::{Int, TagEncoding, Variants};\n-\n-                        match operand.layout().variants {\n-                            Variants::Single { index } => {\n-                                let discr = operand\n-                                    .layout()\n-                                    .ty\n-                                    .discriminant_for_variant(fx.tcx, index)\n-                                    .unwrap();\n-                                let discr = if discr.ty.is_signed() {\n-                                    fx.layout_of(discr.ty).size.sign_extend(discr.val)\n-                                } else {\n-                                    discr.val\n-                                };\n-                                let discr = discr.into();\n-\n-                                let discr = CValue::const_val(fx, fx.layout_of(to_ty), discr);\n-                                lval.write_cvalue(fx, discr);\n-                            }\n-                            Variants::Multiple {\n-                                ref tag,\n-                                tag_field,\n-                                tag_encoding: TagEncoding::Direct,\n-                                variants: _,\n-                            } => {\n-                                let cast_to = fx.clif_type(dest_layout.ty).unwrap();\n-\n-                                // Read the tag/niche-encoded discriminant from memory.\n-                                let encoded_discr =\n-                                    operand.value_field(fx, mir::Field::new(tag_field));\n-                                let encoded_discr = encoded_discr.load_scalar(fx);\n-\n-                                // Decode the discriminant (specifically if it's niche-encoded).\n-                                let signed = match tag.value {\n-                                    Int(_, signed) => signed,\n-                                    _ => false,\n-                                };\n-                                let val = clif_intcast(fx, encoded_discr, cast_to, signed);\n-                                let val = CValue::by_val(val, dest_layout);\n-                                lval.write_cvalue(fx, val);\n-                            }\n-                            Variants::Multiple { .. } => unreachable!(),\n-                        }\n+                        let discriminant = crate::discriminant::codegen_get_discriminant(\n+                            fx,\n+                            operand,\n+                            fx.layout_of(operand.layout().ty.discriminant_ty(fx.tcx)),\n+                        )\n+                        .load_scalar(fx);\n+\n+                        let res = crate::cast::clif_intcast(\n+                            fx,\n+                            discriminant,\n+                            to_clif_ty,\n+                            to_ty.is_signed(),\n+                        );\n+                        lval.write_cvalue(fx, CValue::by_val(res, dest_layout));\n                     } else {\n                         let to_clif_ty = fx.clif_type(to_ty).unwrap();\n                         let from = operand.load_scalar(fx);"}, {"sha": "c2520b5c6c4b500a50242290360c6bcad783336b", "filename": "src/value_and_place.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ecba16f29616265b81b415921f69e5b104085123/src%2Fvalue_and_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecba16f29616265b81b415921f69e5b104085123/src%2Fvalue_and_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvalue_and_place.rs?ref=ecba16f29616265b81b415921f69e5b104085123", "patch": "@@ -233,7 +233,13 @@ impl<'tcx> CValue<'tcx> {\n         layout: TyAndLayout<'tcx>,\n         const_val: ty::ScalarInt,\n     ) -> CValue<'tcx> {\n-        assert_eq!(const_val.size(), layout.size);\n+        assert_eq!(\n+            const_val.size(),\n+            layout.size,\n+            \"{:#?}: {:?}\",\n+            const_val,\n+            layout\n+        );\n         use cranelift_codegen::ir::immediates::{Ieee32, Ieee64};\n \n         let clif_ty = fx.clif_type(layout.ty).unwrap();"}]}