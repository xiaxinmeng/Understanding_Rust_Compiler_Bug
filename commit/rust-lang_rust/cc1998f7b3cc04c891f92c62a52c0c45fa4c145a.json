{"sha": "cc1998f7b3cc04c891f92c62a52c0c45fa4c145a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjMTk5OGY3YjNjYzA0Yzg5MWY5MmM2MmE1MmMwYzQ1ZmE0YzE0NWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-24T14:14:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-24T14:14:53Z"}, "message": "Auto merge of #6077 - ebroto:revert_or_fun_call_const, r=matthiaskrgr\n\nRevert: or_fun_call should lint calls to `const fn`s with no args\n\nThe changes in #5889 and #5984 were done under the incorrect assumption that a `const fn` with no args was guaranteed to be evaluated at compile time.  A `const fn` is only guaranteed to be evaluated at compile time if it's inside a const context (the initializer of a `const` or a `static`).\n\nSee this [zulip conversation](https://rust-lang.zulipchat.com/#narrow/stream/122651-general/topic/Common.20misconception.3A.20.60const.20fn.60.20and.20its.20effect.20on.20codegen/near/208059113) for more details on this common misconception.\n\nGiven that none of the linted methods by `or_fun_call` can be called in const contexts, the lint should make no exceptions.\n\nchangelog: [`or_fun_call`] lints again calls to `const fn` with no args", "tree": {"sha": "0c1503c0fd28371468a158fa8510f5ddb1fffc74", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c1503c0fd28371468a158fa8510f5ddb1fffc74"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc1998f7b3cc04c891f92c62a52c0c45fa4c145a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc1998f7b3cc04c891f92c62a52c0c45fa4c145a", "html_url": "https://github.com/rust-lang/rust/commit/cc1998f7b3cc04c891f92c62a52c0c45fa4c145a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc1998f7b3cc04c891f92c62a52c0c45fa4c145a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "019c0d5f7f90f959ff92684a04b0d766b22527a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/019c0d5f7f90f959ff92684a04b0d766b22527a5", "html_url": "https://github.com/rust-lang/rust/commit/019c0d5f7f90f959ff92684a04b0d766b22527a5"}, {"sha": "ce83d8d4d1b28e73888a616d3ffbf19c6a620588", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce83d8d4d1b28e73888a616d3ffbf19c6a620588", "html_url": "https://github.com/rust-lang/rust/commit/ce83d8d4d1b28e73888a616d3ffbf19c6a620588"}], "stats": {"total": 79, "additions": 28, "deletions": 51}, "files": [{"sha": "92cb31fcf85447c976487320cc4f323620df5f03", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cc1998f7b3cc04c891f92c62a52c0c45fa4c145a/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc1998f7b3cc04c891f92c62a52c0c45fa4c145a/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=cc1998f7b3cc04c891f92c62a52c0c45fa4c145a", "patch": "@@ -46,7 +46,6 @@ use rustc_lint::{LateContext, Level, Lint, LintContext};\n use rustc_middle::hir::map::Map;\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind};\n use rustc_middle::ty::{self, layout::IntegerExt, Ty, TyCtxt, TypeFoldable};\n-use rustc_mir::const_eval;\n use rustc_span::hygiene::{ExpnKind, MacroKind};\n use rustc_span::source_map::original_sp;\n use rustc_span::symbol::{self, kw, Symbol};\n@@ -883,19 +882,11 @@ pub fn is_copy<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n \n /// Checks if an expression is constructing a tuple-like enum variant or struct\n pub fn is_ctor_or_promotable_const_function(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n-    fn has_no_arguments(cx: &LateContext<'_>, def_id: DefId) -> bool {\n-        cx.tcx.fn_sig(def_id).skip_binder().inputs().is_empty()\n-    }\n-\n     if let ExprKind::Call(ref fun, _) = expr.kind {\n         if let ExprKind::Path(ref qp) = fun.kind {\n             let res = cx.qpath_res(qp, fun.hir_id);\n             return match res {\n                 def::Res::Def(DefKind::Variant | DefKind::Ctor(..), ..) => true,\n-                // FIXME: check the constness of the arguments, see https://github.com/rust-lang/rust-clippy/pull/5682#issuecomment-638681210\n-                def::Res::Def(DefKind::Fn | DefKind::AssocFn, def_id) if has_no_arguments(cx, def_id) => {\n-                    const_eval::is_const_fn(cx.tcx, def_id)\n-                },\n                 def::Res::Def(_, def_id) => cx.tcx.is_promotable_const_fn(def_id),\n                 _ => false,\n             };"}, {"sha": "2045ffdb5f09d38996c36d57ffc9c56967859d96", "filename": "tests/ui/or_fun_call.fixed", "status": "modified", "additions": 6, "deletions": 19, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/cc1998f7b3cc04c891f92c62a52c0c45fa4c145a/tests%2Fui%2For_fun_call.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/cc1998f7b3cc04c891f92c62a52c0c45fa4c145a/tests%2Fui%2For_fun_call.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For_fun_call.fixed?ref=cc1998f7b3cc04c891f92c62a52c0c45fa4c145a", "patch": "@@ -58,6 +58,12 @@ fn or_fun_call() {\n     let without_default = Some(Foo);\n     without_default.unwrap_or_else(Foo::new);\n \n+    let mut map = HashMap::<u64, String>::new();\n+    map.entry(42).or_insert_with(String::new);\n+\n+    let mut btree = BTreeMap::<u64, String>::new();\n+    btree.entry(42).or_insert_with(String::new);\n+\n     let stringy = Some(String::from(\"\"));\n     let _ = stringy.unwrap_or_else(|| \"\".to_owned());\n \n@@ -110,23 +116,4 @@ fn f() -> Option<()> {\n     Some(())\n }\n \n-// Issue 5886 - const fn (with no arguments)\n-pub fn skip_const_fn_with_no_args() {\n-    const fn foo() -> Option<i32> {\n-        Some(42)\n-    }\n-    let _ = None.or(foo());\n-\n-    // See issue #5693.\n-    let mut map = std::collections::HashMap::new();\n-    map.insert(1, vec![1]);\n-    map.entry(1).or_insert(vec![]);\n-\n-    let mut map = HashMap::<u64, String>::new();\n-    map.entry(42).or_insert(String::new());\n-\n-    let mut btree = BTreeMap::<u64, String>::new();\n-    btree.entry(42).or_insert(String::new());\n-}\n-\n fn main() {}"}, {"sha": "522f31b72d01f4d94a590dd179a86c287d1c6db4", "filename": "tests/ui/or_fun_call.rs", "status": "modified", "additions": 6, "deletions": 19, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/cc1998f7b3cc04c891f92c62a52c0c45fa4c145a/tests%2Fui%2For_fun_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc1998f7b3cc04c891f92c62a52c0c45fa4c145a/tests%2Fui%2For_fun_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For_fun_call.rs?ref=cc1998f7b3cc04c891f92c62a52c0c45fa4c145a", "patch": "@@ -58,6 +58,12 @@ fn or_fun_call() {\n     let without_default = Some(Foo);\n     without_default.unwrap_or(Foo::new());\n \n+    let mut map = HashMap::<u64, String>::new();\n+    map.entry(42).or_insert(String::new());\n+\n+    let mut btree = BTreeMap::<u64, String>::new();\n+    btree.entry(42).or_insert(String::new());\n+\n     let stringy = Some(String::from(\"\"));\n     let _ = stringy.unwrap_or(\"\".to_owned());\n \n@@ -110,23 +116,4 @@ fn f() -> Option<()> {\n     Some(())\n }\n \n-// Issue 5886 - const fn (with no arguments)\n-pub fn skip_const_fn_with_no_args() {\n-    const fn foo() -> Option<i32> {\n-        Some(42)\n-    }\n-    let _ = None.or(foo());\n-\n-    // See issue #5693.\n-    let mut map = std::collections::HashMap::new();\n-    map.insert(1, vec![1]);\n-    map.entry(1).or_insert(vec![]);\n-\n-    let mut map = HashMap::<u64, String>::new();\n-    map.entry(42).or_insert(String::new());\n-\n-    let mut btree = BTreeMap::<u64, String>::new();\n-    btree.entry(42).or_insert(String::new());\n-}\n-\n fn main() {}"}, {"sha": "bc5978b538f16f69901c7d59576e840a95f95e23", "filename": "tests/ui/or_fun_call.stderr", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cc1998f7b3cc04c891f92c62a52c0c45fa4c145a/tests%2Fui%2For_fun_call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cc1998f7b3cc04c891f92c62a52c0c45fa4c145a/tests%2Fui%2For_fun_call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2For_fun_call.stderr?ref=cc1998f7b3cc04c891f92c62a52c0c45fa4c145a", "patch": "@@ -60,23 +60,35 @@ error: use of `unwrap_or` followed by a function call\n LL |     without_default.unwrap_or(Foo::new());\n    |                     ^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(Foo::new)`\n \n+error: use of `or_insert` followed by a function call\n+  --> $DIR/or_fun_call.rs:62:19\n+   |\n+LL |     map.entry(42).or_insert(String::new());\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `or_insert_with(String::new)`\n+\n+error: use of `or_insert` followed by a function call\n+  --> $DIR/or_fun_call.rs:65:21\n+   |\n+LL |     btree.entry(42).or_insert(String::new());\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `or_insert_with(String::new)`\n+\n error: use of `unwrap_or` followed by a function call\n-  --> $DIR/or_fun_call.rs:62:21\n+  --> $DIR/or_fun_call.rs:68:21\n    |\n LL |     let _ = stringy.unwrap_or(\"\".to_owned());\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| \"\".to_owned())`\n \n error: use of `or` followed by a function call\n-  --> $DIR/or_fun_call.rs:87:35\n+  --> $DIR/or_fun_call.rs:93:35\n    |\n LL |     let _ = Some(\"a\".to_string()).or(Some(\"b\".to_string()));\n    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `or_else(|| Some(\"b\".to_string()))`\n \n error: use of `or` followed by a function call\n-  --> $DIR/or_fun_call.rs:91:10\n+  --> $DIR/or_fun_call.rs:97:10\n    |\n LL |         .or(Some(Bar(b, Duration::from_secs(2))));\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `or_else(|| Some(Bar(b, Duration::from_secs(2))))`\n \n-error: aborting due to 13 previous errors\n+error: aborting due to 15 previous errors\n "}]}