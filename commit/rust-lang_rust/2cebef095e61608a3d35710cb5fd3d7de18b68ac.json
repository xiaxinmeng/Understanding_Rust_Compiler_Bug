{"sha": "2cebef095e61608a3d35710cb5fd3d7de18b68ac", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjZWJlZjA5NWU2MTYwOGEzZDM1NzEwY2I1ZmQzZDdkZTE4YjY4YWM=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-29T04:19:59Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-29T08:25:11Z"}, "message": "stdlib: Make io failures recoverable by returning a result", "tree": {"sha": "cb24a5d2506444d157edfe16fac08f2d31892a28", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb24a5d2506444d157edfe16fac08f2d31892a28"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2cebef095e61608a3d35710cb5fd3d7de18b68ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2cebef095e61608a3d35710cb5fd3d7de18b68ac", "html_url": "https://github.com/rust-lang/rust/commit/2cebef095e61608a3d35710cb5fd3d7de18b68ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2cebef095e61608a3d35710cb5fd3d7de18b68ac/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b62a80202e2855d47f20d271842e0e9aec6d8e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b62a80202e2855d47f20d271842e0e9aec6d8e2", "html_url": "https://github.com/rust-lang/rust/commit/2b62a80202e2855d47f20d271842e0e9aec6d8e2"}], "stats": {"total": 160, "additions": 123, "deletions": 37}, "files": [{"sha": "650e46b38988f1aac62faa41044d87b70a4aa7e5", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2cebef095e61608a3d35710cb5fd3d7de18b68ac/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cebef095e61608a3d35710cb5fd3d7de18b68ac/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=2cebef095e61608a3d35710cb5fd3d7de18b68ac", "patch": "@@ -11,7 +11,7 @@ import syntax::print::{pp, pprust};\n import util::{ppaux, common, filesearch};\n import back::link;\n import lib::llvm;\n-import std::{fs, option, str, vec, int, io, run, getopts};\n+import std::{fs, option, str, vec, int, io, run, getopts, result};\n import std::map::mk_hashmap;\n import std::option::{some, none};\n import std::getopts::{optopt, optmulti, optflag, optflagopt, opt_present};\n@@ -77,10 +77,16 @@ fn parse_input(sess: session::session, cfg: ast::crate_cfg, input: str) ->\n \n fn parse_input_src(sess: session::session, cfg: ast::crate_cfg, infile: str)\n    -> {crate: @ast::crate, src: str} {\n-    let srcbytes =\n-        if infile != \"-\" {\n-            io::file_reader(infile)\n-        } else { io::stdin() }.read_whole_stream();\n+    let srcbytes = if infile != \"-\" {\n+        alt io::file_reader(infile) {\n+          result::ok(reader) { reader }\n+          result::err(e) {\n+            sess.fatal(e)\n+          }\n+        }\n+    } else {\n+        io::stdin()\n+    }.read_whole_stream();\n     let src = str::unsafe_from_bytes(srcbytes);\n     let crate =\n         parser::parse_crate_from_source_str(infile, src, cfg,"}, {"sha": "2db5e1e2c4c6f59340113af7a5e1f9cb525052ad", "filename": "src/comp/syntax/codemap.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2cebef095e61608a3d35710cb5fd3d7de18b68ac/src%2Fcomp%2Fsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cebef095e61608a3d35710cb5fd3d7de18b68ac/src%2Fcomp%2Fsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fcodemap.rs?ref=2cebef095e61608a3d35710cb5fd3d7de18b68ac", "patch": "@@ -1,4 +1,4 @@\n-import std::{vec, uint, str, term, io, option};\n+import std::{vec, uint, str, term, io, option, result};\n import std::option::{some, none};\n \n type filename = str;\n@@ -154,7 +154,13 @@ fn maybe_highlight_lines(sp: option::t<span>, cm: codemap,\n \n         // FIXME: reading in the entire file is the worst possible way to\n         //        get access to the necessary lines.\n-        let file = io::read_whole_file_str(lines.name);\n+        let file = alt io::read_whole_file_str(lines.name) {\n+          result::ok(file) { file }\n+          result::err(e) {\n+            emit_error(none, e, cm);\n+            fail;\n+          }\n+        };\n         let fm = get_filemap(cm, lines.name);\n \n         // arbitrarily only print up to six lines of the error"}, {"sha": "f605a2fb6999af7df923ef265859bf86cdbe064e", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2cebef095e61608a3d35710cb5fd3d7de18b68ac/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cebef095e61608a3d35710cb5fd3d7de18b68ac/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=2cebef095e61608a3d35710cb5fd3d7de18b68ac", "patch": "@@ -1,5 +1,5 @@\n \n-import std::{io, vec, str, option, either};\n+import std::{io, vec, str, option, either, result};\n import std::option::{some, none};\n import std::either::{left, right};\n import std::map::{hashmap, new_str_hash};\n@@ -53,7 +53,16 @@ type parser =\n fn new_parser_from_file(sess: parse_sess, cfg: ast::crate_cfg, path: str,\n                         chpos: uint, byte_pos: uint, ftype: file_type) ->\n    parser {\n-    let src = io::read_whole_file_str(path);\n+    let src = alt io::read_whole_file_str(path) {\n+      result::ok(src) {\n+        // FIXME: This copy is unfortunate\n+        src\n+      }\n+      result::err(e) {\n+        codemap::emit_error(none, e, sess.cm);\n+        fail;\n+      }\n+    };\n     let filemap = codemap::new_filemap(path, chpos, byte_pos);\n     sess.cm.files += [filemap];\n     let itr = @interner::mk(str::hash, str::eq);"}, {"sha": "93fbdd3dead32564bd1c44f3439dd732edc367a3", "filename": "src/compiletest/header.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2cebef095e61608a3d35710cb5fd3d7de18b68ac/src%2Fcompiletest%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cebef095e61608a3d35710cb5fd3d7de18b68ac/src%2Fcompiletest%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fheader.rs?ref=2cebef095e61608a3d35710cb5fd3d7de18b68ac", "patch": "@@ -63,7 +63,7 @@ fn is_test_ignored(config: config, testfile: str) -> bool {\n }\n \n fn iter_header(testfile: str, it: block(str)) {\n-    let rdr = io::file_reader(testfile);\n+    let rdr = std::result::get(io::file_reader(testfile));\n     while !rdr.eof() {\n         let ln = rdr.read_line();\n "}, {"sha": "198ef5e110128eb976c916a27d81b93b897e55af", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2cebef095e61608a3d35710cb5fd3d7de18b68ac/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cebef095e61608a3d35710cb5fd3d7de18b68ac/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=2cebef095e61608a3d35710cb5fd3d7de18b68ac", "patch": "@@ -5,6 +5,7 @@ import std::fs;\n import std::os;\n import std::vec;\n import std::test;\n+import std::result;\n \n import common::mode_run_pass;\n import common::mode_run_fail;\n@@ -92,7 +93,7 @@ fn run_pretty_test(cx: cx, props: test_props, testfile: str) {\n     let rounds =\n         alt props.pp_exact { option::some(_) { 1 } option::none. { 2 } };\n \n-    let srcs = [io::read_whole_file_str(testfile)];\n+    let srcs = [result::get(io::read_whole_file_str(testfile))];\n \n     let round = 0;\n     while round < rounds {\n@@ -112,7 +113,7 @@ fn run_pretty_test(cx: cx, props: test_props, testfile: str) {\n         alt props.pp_exact {\n           option::some(file) {\n             let filepath = fs::connect(fs::dirname(testfile), file);\n-            io::read_whole_file_str(filepath)\n+            result::get(io::read_whole_file_str(filepath))\n           }\n           option::none. { srcs[vec::len(srcs) - 2u] }\n         };\n@@ -339,7 +340,8 @@ fn dump_output(config: config, testfile: str, out: str, err: str) {\n #[cfg(target_os = \"linux\")]\n fn dump_output_file(config: config, testfile: str, out: str, extension: str) {\n     let outfile = make_out_name(config, testfile, extension);\n-    let writer = io::file_writer(outfile, [io::create, io::truncate]);\n+    let writer = result::get(\n+        io::file_writer(outfile, [io::create, io::truncate]));\n     writer.write_str(out);\n }\n "}, {"sha": "4a96877dfc12df54eadc71f9b3bf9faee3b78883", "filename": "src/fuzzer/fuzzer.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2cebef095e61608a3d35710cb5fd3d7de18b68ac/src%2Ffuzzer%2Ffuzzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cebef095e61608a3d35710cb5fd3d7de18b68ac/src%2Ffuzzer%2Ffuzzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Ffuzzer.rs?ref=2cebef095e61608a3d35710cb5fd3d7de18b68ac", "patch": "@@ -1,7 +1,7 @@\n use std;\n use rustc;\n \n-import std::{fs, io, getopts, math, vec, str, int, uint, option};\n+import std::{fs, io, getopts, math, vec, str, int, uint, option, result};\n import std::getopts::{optopt, opt_present, opt_str};\n import std::io::stdout;\n \n@@ -13,7 +13,9 @@ tag test_mode { tm_converge; tm_run; }\n type context = { mode: test_mode }; // + rng\n \n fn write_file(filename: str, content: str) {\n-    io::file_writer(filename, [io::create, io::truncate]).write_str(content);\n+    result::get(\n+        io::file_writer(filename, [io::create, io::truncate]))\n+        .write_str(content);\n     // Work around https://github.com/graydon/rust/issues/726\n     std::run::run_program(\"chmod\", [\"644\", filename]);\n }\n@@ -517,7 +519,7 @@ fn check_convergence(files: [str]) {\n     log_err #fmt[\"pp convergence tests: %u files\", vec::len(files)];\n     for file in files {\n         if !file_might_not_converge(file) {\n-            let s = io::read_whole_file_str(file);\n+            let s = result::get(io::read_whole_file_str(file));\n             if !content_might_not_converge(s) {\n                 log_err #fmt[\"pp converge: %s\", file];\n                 // Change from 7u to 2u once https://github.com/graydon/rust/issues/850 is fixed\n@@ -533,7 +535,7 @@ fn check_variants(files: [str], cx: context) {\n             cont;\n         }\n \n-        let s = io::read_whole_file_str(file);\n+        let s = result::get(io::read_whole_file_str(file));\n         if contains(s, \"#\") {\n             cont; // Macros are confusing\n         }"}, {"sha": "dad3001262fdea84fa1da0781b2216ed8bfee048", "filename": "src/lib/io.rs", "status": "modified", "additions": 26, "deletions": 17, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/2cebef095e61608a3d35710cb5fd3d7de18b68ac/src%2Flib%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cebef095e61608a3d35710cb5fd3d7de18b68ac/src%2Flib%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fio.rs?ref=2cebef095e61608a3d35710cb5fd3d7de18b68ac", "patch": "@@ -173,14 +173,16 @@ fn stdin() -> reader {\n     ret new_reader(FILE_buf_reader(rustrt::rust_get_stdin(), option::none));\n }\n \n-fn file_reader(path: str) -> reader {\n+fn file_reader(path: str) -> result::t<reader, str> {\n     let f = str::as_buf(path, {|pathbuf|\n         str::as_buf(\"r\", {|modebuf|\n             os::libc::fopen(pathbuf, modebuf)\n         })\n     });\n-    if f as uint == 0u { log_err \"error opening \" + path; fail; }\n-    ret new_reader(FILE_buf_reader(f, option::some(@FILE_res(f))));\n+    ret if f as uint == 0u { result::err(\"error opening \" + path) }\n+    else {\n+        result::ok(new_reader(FILE_buf_reader(f, option::some(@FILE_res(f)))))\n+    }\n }\n \n \n@@ -278,7 +280,8 @@ obj fd_buf_writer(fd: int, res: option::t<@fd_res>) {\n     }\n }\n \n-fn file_buf_writer(path: str, flags: [fileflag]) -> buf_writer {\n+fn file_buf_writer(path: str,\n+                   flags: [fileflag]) -> result::t<buf_writer, str> {\n     let fflags: int =\n         os::libc_constants::O_WRONLY() | os::libc_constants::O_BINARY();\n     for f: fileflag in flags {\n@@ -296,12 +299,12 @@ fn file_buf_writer(path: str, flags: [fileflag]) -> buf_writer {\n                                        os::libc_constants::S_IRUSR() |\n                                            os::libc_constants::S_IWUSR())\n                     });\n-    if fd < 0 {\n-        log_err \"error opening file for writing\";\n+    ret if fd < 0 {\n         log_err sys::last_os_error();\n-        fail;\n+        result::err(\"error opening \" + path)\n+    } else {\n+        result::ok(fd_buf_writer(fd, option::some(@fd_res(fd))))\n     }\n-    ret fd_buf_writer(fd, option::some(@fd_res(fd)));\n }\n \n type writer =\n@@ -359,13 +362,15 @@ obj new_writer(out: buf_writer) {\n     }\n }\n \n-fn file_writer(path: str, flags: [fileflag]) -> writer {\n-    ret new_writer(file_buf_writer(path, flags));\n+fn file_writer(path: str, flags: [fileflag]) -> result::t<writer, str> {\n+    result::chain(file_buf_writer(path, flags), { |w|\n+        result::ok(new_writer(w))\n+    })\n }\n \n \n // FIXME: fileflags\n-fn buffered_file_buf_writer(path: str) -> buf_writer {\n+fn buffered_file_buf_writer(path: str) -> result::t<buf_writer, str> {\n     let f =\n         str::as_buf(path,\n                     {|pathbuf|\n@@ -374,8 +379,8 @@ fn buffered_file_buf_writer(path: str) -> buf_writer {\n                                         os::libc::fopen(pathbuf, modebuf)\n                                     })\n                     });\n-    if f as uint == 0u { log_err \"error opening \" + path; fail; }\n-    ret FILE_writer(f, option::some(@FILE_res(f)));\n+    ret if f as uint == 0u { result::err(\"error opening \" + path) }\n+    else { result::ok(FILE_writer(f, option::some(@FILE_res(f)))) }\n }\n \n \n@@ -452,14 +457,18 @@ fn seek_in_buf(offset: int, pos: uint, len: uint, whence: seek_style) ->\n     ret bpos as uint;\n }\n \n-fn read_whole_file_str(file: str) -> str {\n-    str::unsafe_from_bytes(read_whole_file(file))\n+fn read_whole_file_str(file: str) -> result::t<str, str> {\n+    result::chain(read_whole_file(file), { |bytes|\n+        result::ok(str::unsafe_from_bytes(bytes))\n+    })\n }\n \n-fn read_whole_file(file: str) -> [u8] {\n+fn read_whole_file(file: str) -> result::t<[u8], str> {\n \n     // FIXME: There's a lot of copying here\n-    file_reader(file).read_whole_stream()\n+    result::chain(file_reader(file), { |rdr|\n+        result::ok(rdr.read_whole_stream())\n+    })\n }\n \n "}, {"sha": "9586a4becfd79f3138e3f5d27313726fbc1360e1", "filename": "src/lib/result.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2cebef095e61608a3d35710cb5fd3d7de18b68ac/src%2Flib%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cebef095e61608a3d35710cb5fd3d7de18b68ac/src%2Flib%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fresult.rs?ref=2cebef095e61608a3d35710cb5fd3d7de18b68ac", "patch": "@@ -41,6 +41,8 @@ fn get<T, U>(res: t<T, U>) -> T {\n     alt res {\n       ok(t) { t }\n       err(_) {\n+        // FIXME: Serialize the error value\n+        // and include it in the fail message\n         fail \"get called on error result\";\n       }\n     }"}, {"sha": "2c50327454a78b017191ee4362ca672b3a947748", "filename": "src/test/bench/task-perf-word-count.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2cebef095e61608a3d35710cb5fd3d7de18b68ac/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cebef095e61608a3d35710cb5fd3d7de18b68ac/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs?ref=2cebef095e61608a3d35710cb5fd3d7de18b68ac", "patch": "@@ -20,6 +20,7 @@ import std::io;\n \n import std::time;\n import std::u64;\n+import std::result;\n \n import std::task;\n import std::task::joinable_task;\n@@ -30,7 +31,7 @@ import std::comm::recv;\n import std::comm::send;\n \n fn map(filename: str, emit: map_reduce::putter) {\n-    let f = io::file_reader(filename);\n+    let f = result::get(io::file_reader(filename));\n \n \n     while true {"}, {"sha": "6e13a9705092160ecac39a9e24d6a898bcb257e6", "filename": "src/test/compile-fail/missingmod.rc", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2cebef095e61608a3d35710cb5fd3d7de18b68ac/src%2Ftest%2Fcompile-fail%2Fmissingmod.rc", "raw_url": "https://github.com/rust-lang/rust/raw/2cebef095e61608a3d35710cb5fd3d7de18b68ac/src%2Ftest%2Fcompile-fail%2Fmissingmod.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmissingmod.rc?ref=2cebef095e61608a3d35710cb5fd3d7de18b68ac", "patch": "@@ -0,0 +1,3 @@\n+// error-pattern:error opening\n+\n+mod doesnotexist;\n\\ No newline at end of file"}, {"sha": "d84b80e2ed393de6bc1b5e80475057034186dcc7", "filename": "src/test/stdtest/io.rs", "status": "modified", "additions": 48, "deletions": 2, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/2cebef095e61608a3d35710cb5fd3d7de18b68ac/src%2Ftest%2Fstdtest%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cebef095e61608a3d35710cb5fd3d7de18b68ac/src%2Ftest%2Fstdtest%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fio.rs?ref=2cebef095e61608a3d35710cb5fd3d7de18b68ac", "patch": "@@ -2,6 +2,7 @@\n use std;\n import std::io;\n import std::str;\n+import std::result;\n \n #[cfg(target_os = \"linux\")]\n #[cfg(target_os = \"win32\")]\n@@ -13,10 +14,10 @@ fn test_simple() {\n     log frood;\n     {\n         let out: io::writer =\n-            io::file_writer(tmpfile, [io::create, io::truncate]);\n+            result::get(io::file_writer(tmpfile, [io::create, io::truncate]));\n         out.write_str(frood);\n     }\n-    let inp: io::reader = io::file_reader(tmpfile);\n+    let inp: io::reader = result::get(io::file_reader(tmpfile));\n     let frood2: str = inp.read_c_str();\n     log frood2;\n     assert (str::eq(frood, frood2));\n@@ -28,3 +29,48 @@ fn test_simple() {\n #[ignore]\n fn test_simple() { }\n \n+#[test]\n+fn file_reader_not_exist() {\n+    alt io::file_reader(\"not a file\") {\n+      result::err(e) {\n+        assert e == \"error opening not a file\";\n+      }\n+      result::ok(_) { fail; }\n+    }\n+}\n+\n+#[cfg(target_os = \"linux\")]\n+#[cfg(target_os = \"win32\")]\n+#[test]\n+fn file_buf_writer_bad_name() {\n+    alt io::file_buf_writer(\"/?\", []) {\n+      result::err(e) {\n+        assert e == \"error opening /?\";\n+      }\n+      result::ok(_) { fail; }\n+    }\n+}\n+\n+// FIXME (726)\n+#[cfg(target_os = \"macos\")]\n+#[test]\n+#[ignore]\n+fn file_buf_writer_bad_name() { }\n+\n+#[cfg(target_os = \"linux\")]\n+#[cfg(target_os = \"win32\")]\n+#[test]\n+fn buffered_file_buf_writer_bad_name() {\n+    alt io::buffered_file_buf_writer(\"/?\") {\n+      result::err(e) {\n+        assert e == \"error opening /?\";\n+      }\n+      result::ok(_) { fail; }\n+    }\n+}\n+\n+// FIXME (726)\n+#[cfg(target_os = \"macos\")]\n+#[test]\n+#[ignore]\n+fn buffered_file_buf_writer_bad_name() { }"}]}