{"sha": "041c49c1ed11b016d6ab9379643bb1da2adf5bfe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0MWM0OWMxZWQxMWIwMTZkNmFiOTM3OTY0M2JiMWRhMmFkZjViZmU=", "commit": {"author": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2018-12-06T21:11:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-12-06T21:11:29Z"}, "message": "Merge pull request #3257 from o01eg/remove-sysroot\n\nDon't try to determine sysroot. rustc_driver will use default value.", "tree": {"sha": "92766c85ed2a9fa7201146ac004823c889fa08d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92766c85ed2a9fa7201146ac004823c889fa08d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/041c49c1ed11b016d6ab9379643bb1da2adf5bfe", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcCZCBCRBK7hj4Ov3rIwAAdHIIAITsUBSMNqad/yAwF0+VNiXm\nScdKg/+zZxOE3n2AloatsBabCqYzlx1JnN8s2soer7Gm/H4gcbWVuO3qhjmtjxRT\n2khV3BUNDuCiWhC8EuyXjpzRCTYWCvUARrudf6EDgEXEv0eaKb5emjSorhMJU+Jd\ngfzNL1AkGO4ppPAEWLi/qNqtnwgyxrMAWCEeLBttFdOlyHlyMGWDm37oTDYiqF+z\nDJLZpBdTaM7xIcFCsxhaTDOvLOYmKo47rj0AEsjaMf2bIqKQX3uvnJXaHkzEh+Yn\nu5xfViBnxf6wiHBpL8HqlEEcwNuTDrr+VpVwLMQeNqyEKBnYIb93LWT3kJ6wkC4=\n=I8oY\n-----END PGP SIGNATURE-----\n", "payload": "tree 92766c85ed2a9fa7201146ac004823c889fa08d5\nparent 1df5766cbb559aab0ad5c2296d8b768182b5186c\nparent 278b94e6db8e233536c27259371d22f6ec5ebe50\nauthor Philipp Hansch <dev@phansch.net> 1544130689 +0100\ncommitter GitHub <noreply@github.com> 1544130689 +0100\n\nMerge pull request #3257 from o01eg/remove-sysroot\n\nDon't try to determine sysroot. rustc_driver will use default value."}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/041c49c1ed11b016d6ab9379643bb1da2adf5bfe", "html_url": "https://github.com/rust-lang/rust/commit/041c49c1ed11b016d6ab9379643bb1da2adf5bfe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/041c49c1ed11b016d6ab9379643bb1da2adf5bfe/comments", "author": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1df5766cbb559aab0ad5c2296d8b768182b5186c", "url": "https://api.github.com/repos/rust-lang/rust/commits/1df5766cbb559aab0ad5c2296d8b768182b5186c", "html_url": "https://github.com/rust-lang/rust/commit/1df5766cbb559aab0ad5c2296d8b768182b5186c"}, {"sha": "278b94e6db8e233536c27259371d22f6ec5ebe50", "url": "https://api.github.com/repos/rust-lang/rust/commits/278b94e6db8e233536c27259371d22f6ec5ebe50", "html_url": "https://github.com/rust-lang/rust/commit/278b94e6db8e233536c27259371d22f6ec5ebe50"}], "stats": {"total": 100, "additions": 61, "deletions": 39}, "files": [{"sha": "6b327d08207f5d78c03a68980ac17e844bc48a13", "filename": "src/driver.rs", "status": "modified", "additions": 6, "deletions": 38, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/041c49c1ed11b016d6ab9379643bb1da2adf5bfe/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/041c49c1ed11b016d6ab9379643bb1da2adf5bfe/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=041c49c1ed11b016d6ab9379643bb1da2adf5bfe", "patch": "@@ -23,7 +23,7 @@ use self::rustc_driver::{driver::CompileController, Compilation};\n \n use std::convert::TryInto;\n use std::path::Path;\n-use std::process::{exit, Command};\n+use std::process::exit;\n \n fn show_version() {\n     println!(env!(\"CARGO_PKG_VERSION\"));\n@@ -40,54 +40,22 @@ pub fn main() {\n                 exit(0);\n             }\n \n-            let sys_root = option_env!(\"SYSROOT\")\n-                .map(String::from)\n-                .or_else(|| std::env::var(\"SYSROOT\").ok())\n-                .or_else(|| {\n-                    let home = option_env!(\"RUSTUP_HOME\").or(option_env!(\"MULTIRUST_HOME\"));\n-                    let toolchain = option_env!(\"RUSTUP_TOOLCHAIN\").or(option_env!(\"MULTIRUST_TOOLCHAIN\"));\n-                    home.and_then(|home| toolchain.map(|toolchain| format!(\"{}/toolchains/{}\", home, toolchain)))\n-                })\n-                .or_else(|| {\n-                    Command::new(\"rustc\")\n-                        .arg(\"--print\")\n-                        .arg(\"sysroot\")\n-                        .output()\n-                        .ok()\n-                        .and_then(|out| String::from_utf8(out.stdout).ok())\n-                        .map(|s| s.trim().to_owned())\n-                })\n-                .expect(\"need to specify SYSROOT env var during clippy compilation, or use rustup or multirust\");\n-\n             // Setting RUSTC_WRAPPER causes Cargo to pass 'rustc' as the first argument.\n             // We're invoking the compiler programmatically, so we ignore this/\n-            let mut orig_args: Vec<String> = env::args().collect();\n-            if orig_args.len() <= 1 {\n+            let mut args: Vec<String> = env::args().collect();\n+            if args.len() <= 1 {\n                 std::process::exit(1);\n             }\n-            if Path::new(&orig_args[1]).file_stem() == Some(\"rustc\".as_ref()) {\n+            if Path::new(&args[1]).file_stem() == Some(\"rustc\".as_ref()) {\n                 // we still want to be able to invoke it normally though\n-                orig_args.remove(1);\n+                args.remove(1);\n             }\n-            // this conditional check for the --sysroot flag is there so users can call\n-            // `clippy_driver` directly\n-            // without having to pass --sysroot or anything\n-            let mut args: Vec<String> = if orig_args.iter().any(|s| s == \"--sysroot\") {\n-                orig_args.clone()\n-            } else {\n-                orig_args\n-                    .clone()\n-                    .into_iter()\n-                    .chain(Some(\"--sysroot\".to_owned()))\n-                    .chain(Some(sys_root))\n-                    .collect()\n-            };\n \n             // this check ensures that dependencies are built but not linted and the final\n             // crate is\n             // linted but not built\n             let clippy_enabled = env::var(\"CLIPPY_TESTS\").ok().map_or(false, |val| val == \"true\")\n-                || orig_args.iter().any(|s| s == \"--emit=dep-info,metadata\");\n+                || args.iter().any(|s| s == \"--emit=dep-info,metadata\");\n \n             if clippy_enabled {\n                 args.extend_from_slice(&[\"--cfg\".to_owned(), r#\"feature=\"cargo-clippy\"\"#.to_owned()]);"}, {"sha": "62fa17d388a5dbcadc25454fe545e41b162c7a38", "filename": "tests/compile-test.rs", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/041c49c1ed11b016d6ab9379643bb1da2adf5bfe/tests%2Fcompile-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/041c49c1ed11b016d6ab9379643bb1da2adf5bfe/tests%2Fcompile-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-test.rs?ref=041c49c1ed11b016d6ab9379643bb1da2adf5bfe", "patch": "@@ -17,6 +17,7 @@ use std::ffi::OsStr;\n use std::fs;\n use std::io;\n use std::path::{Path, PathBuf};\n+use std::process::Command;\n \n fn clippy_driver_path() -> PathBuf {\n     if let Some(path) = option_env!(\"CLIPPY_DRIVER_PATH\") {\n@@ -42,6 +43,28 @@ fn rustc_lib_path() -> PathBuf {\n     option_env!(\"RUSTC_LIB_PATH\").unwrap().into()\n }\n \n+fn rustc_sysroot_path() -> PathBuf {\n+    option_env!(\"SYSROOT\")\n+        .map(String::from)\n+        .or_else(|| std::env::var(\"SYSROOT\").ok())\n+        .or_else(|| {\n+            let home = option_env!(\"RUSTUP_HOME\").or(option_env!(\"MULTIRUST_HOME\"));\n+            let toolchain = option_env!(\"RUSTUP_TOOLCHAIN\").or(option_env!(\"MULTIRUST_TOOLCHAIN\"));\n+            home.and_then(|home| toolchain.map(|toolchain| format!(\"{}/toolchains/{}\", home, toolchain)))\n+        })\n+        .or_else(|| {\n+            Command::new(\"rustc\")\n+                .arg(\"--print\")\n+                .arg(\"sysroot\")\n+                .output()\n+                .ok()\n+                .and_then(|out| String::from_utf8(out.stdout).ok())\n+                .map(|s| s.trim().to_owned())\n+        })\n+        .expect(\"need to specify SYSROOT env var during clippy compilation, or use rustup or multirust\")\n+        .into()\n+}\n+\n fn config(mode: &str, dir: PathBuf) -> compiletest::Config {\n     let mut config = compiletest::Config::default();\n \n@@ -55,7 +78,11 @@ fn config(mode: &str, dir: PathBuf) -> compiletest::Config {\n         config.run_lib_path = rustc_lib_path();\n         config.compile_lib_path = rustc_lib_path();\n     }\n-    config.target_rustcflags = Some(format!(\"-L {0} -L {0}/deps -Dwarnings\", host_libs().display()));\n+    config.target_rustcflags = Some(format!(\n+        \"-L {0} -L {0}/deps -Dwarnings --sysroot {1}\",\n+        host_libs().display(),\n+        rustc_sysroot_path().display()\n+    ));\n \n     config.mode = cfg_mode;\n     config.build_base = if rustc_test_suite().is_some() {"}, {"sha": "69f4f9901b7f0f2172ba54fb5898933fe4fe6013", "filename": "tests/dogfood.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/041c49c1ed11b016d6ab9379643bb1da2adf5bfe/tests%2Fdogfood.rs", "raw_url": "https://github.com/rust-lang/rust/raw/041c49c1ed11b016d6ab9379643bb1da2adf5bfe/tests%2Fdogfood.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdogfood.rs?ref=041c49c1ed11b016d6ab9379643bb1da2adf5bfe", "patch": "@@ -7,6 +7,31 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::path::PathBuf;\n+use std::process::Command;\n+\n+fn rustc_sysroot_path() -> PathBuf {\n+    option_env!(\"SYSROOT\")\n+        .map(String::from)\n+        .or_else(|| std::env::var(\"SYSROOT\").ok())\n+        .or_else(|| {\n+            let home = option_env!(\"RUSTUP_HOME\").or(option_env!(\"MULTIRUST_HOME\"));\n+            let toolchain = option_env!(\"RUSTUP_TOOLCHAIN\").or(option_env!(\"MULTIRUST_TOOLCHAIN\"));\n+            home.and_then(|home| toolchain.map(|toolchain| format!(\"{}/toolchains/{}\", home, toolchain)))\n+        })\n+        .or_else(|| {\n+            Command::new(\"rustc\")\n+                .arg(\"--print\")\n+                .arg(\"sysroot\")\n+                .output()\n+                .ok()\n+                .and_then(|out| String::from_utf8(out.stdout).ok())\n+                .map(|s| s.trim().to_owned())\n+        })\n+        .expect(\"need to specify SYSROOT env var during clippy compilation, or use rustup or multirust\")\n+        .into()\n+}\n+\n #[test]\n fn dogfood() {\n     if option_env!(\"RUSTC_TEST_SUITE\").is_some() || cfg!(windows) {\n@@ -21,6 +46,7 @@ fn dogfood() {\n     let output = std::process::Command::new(clippy_cmd)\n         .current_dir(root_dir)\n         .env(\"CLIPPY_DOGFOOD\", \"1\")\n+        .env(\"RUSTFLAGS\", format!(\"--sysroot {}\", rustc_sysroot_path().display()))\n         .arg(\"clippy\")\n         .arg(\"--all-targets\")\n         .arg(\"--all-features\")\n@@ -59,6 +85,7 @@ fn dogfood_tests() {\n         let output = std::process::Command::new(&clippy_cmd)\n             .current_dir(root_dir.join(d))\n             .env(\"CLIPPY_DOGFOOD\", \"1\")\n+            .env(\"RUSTFLAGS\", format!(\"--sysroot {}\", rustc_sysroot_path().display()))\n             .arg(\"clippy\")\n             .arg(\"--\")\n             .args(&[\"-D\", \"clippy::all\"])"}]}