{"sha": "ee3c5957eaaf577bff895ce819447f7e40558a28", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlM2M1OTU3ZWFhZjU3N2JmZjg5NWNlODE5NDQ3ZjdlNDA1NThhMjg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-01-02T04:46:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-01-02T04:46:53Z"}, "message": "auto merge of #20189 : cmr/rust/i32-fallback, r=nikomatsakis\n\nDoesn't yet converge on a fixed point, but generally works. A better algorithm\r\nwill come with the implementation of default type parameter fallback.\r\n\r\nIf inference fails to determine an exact integral or floating point type, it\r\nwill set the type to i32 or f64, respectively.\r\n\r\nCloses #16968", "tree": {"sha": "e43b4f8dce4c069ef719e0afcf21ccba12078b09", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e43b4f8dce4c069ef719e0afcf21ccba12078b09"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee3c5957eaaf577bff895ce819447f7e40558a28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee3c5957eaaf577bff895ce819447f7e40558a28", "html_url": "https://github.com/rust-lang/rust/commit/ee3c5957eaaf577bff895ce819447f7e40558a28", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee3c5957eaaf577bff895ce819447f7e40558a28/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd614164e692cca3a1460737f581fcb6d4630baf", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd614164e692cca3a1460737f581fcb6d4630baf", "html_url": "https://github.com/rust-lang/rust/commit/cd614164e692cca3a1460737f581fcb6d4630baf"}, {"sha": "53ece7158500e561c69d6e07160518f19d8beafd", "url": "https://api.github.com/repos/rust-lang/rust/commits/53ece7158500e561c69d6e07160518f19d8beafd", "html_url": "https://github.com/rust-lang/rust/commit/53ece7158500e561c69d6e07160518f19d8beafd"}], "stats": {"total": 111, "additions": 57, "deletions": 54}, "files": [{"sha": "d9b7e04bc79418c3a38bfa8d6ba293ca24c28c12", "filename": "src/librustc/middle/infer/mod.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c5957eaaf577bff895ce819447f7e40558a28/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c5957eaaf577bff895ce819447f7e40558a28/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs?ref=ee3c5957eaaf577bff895ce819447f7e40558a28", "patch": "@@ -23,7 +23,7 @@ pub use self::freshen::TypeFreshener;\n \n use middle::subst;\n use middle::subst::Substs;\n-use middle::ty::{TyVid, IntVid, FloatVid, RegionVid};\n+use middle::ty::{TyVid, IntVid, FloatVid, RegionVid, UnconstrainedNumeric};\n use middle::ty::replace_late_bound_regions;\n use middle::ty::{mod, Ty};\n use middle::ty_fold::{TypeFolder, TypeFoldable};\n@@ -525,6 +525,25 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         freshen::TypeFreshener::new(self)\n     }\n \n+    pub fn type_is_unconstrained_numeric(&'a self, ty: Ty) -> UnconstrainedNumeric {\n+        use middle::ty::UnconstrainedNumeric::{Neither, UnconstrainedInt, UnconstrainedFloat};\n+        match ty.sty {\n+            ty::ty_infer(ty::IntVar(vid)) => {\n+                match self.int_unification_table.borrow_mut().get(self.tcx, vid).value {\n+                    None => UnconstrainedInt,\n+                    _ => Neither,\n+                }\n+            },\n+            ty::ty_infer(ty::FloatVar(vid)) => {\n+                match self.float_unification_table.borrow_mut().get(self.tcx, vid).value {\n+                    None => return UnconstrainedFloat,\n+                    _ => Neither,\n+                }\n+            },\n+            _ => Neither,\n+        }\n+    }\n+\n     pub fn combine_fields<'b>(&'b self, a_is_expected: bool, trace: TypeTrace<'tcx>)\n                               -> CombineFields<'b, 'tcx> {\n         CombineFields {infcx: self,"}, {"sha": "82a8bc3cd06c10ee6fabb79352a0ac89824dc11b", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c5957eaaf577bff895ce819447f7e40558a28/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c5957eaaf577bff895ce819447f7e40558a28/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=ee3c5957eaaf577bff895ce819447f7e40558a28", "patch": "@@ -1641,6 +1641,14 @@ pub enum InferTy {\n     FreshIntTy(u32),\n }\n \n+#[deriving(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Hash, Show, Copy)]\n+pub enum UnconstrainedNumeric {\n+    UnconstrainedFloat,\n+    UnconstrainedInt,\n+    Neither,\n+}\n+\n+\n #[deriving(Clone, RustcEncodable, RustcDecodable, Eq, Hash, Show, Copy)]\n pub enum InferRegion {\n     ReVar(RegionVid),"}, {"sha": "60bb96a2b840c1cb7521d26477cef9b151a8d548", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c5957eaaf577bff895ce819447f7e40558a28/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c5957eaaf577bff895ce819447f7e40558a28/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=ee3c5957eaaf577bff895ce819447f7e40558a28", "patch": "@@ -453,7 +453,6 @@ fn check_bare_fn<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n \n             vtable::select_all_fcx_obligations_or_error(&fcx);\n             regionck::regionck_fn(&fcx, id, decl, body);\n-            fcx.default_diverging_type_variables_to_nil();\n             writeback::resolve_type_vars_in_fn(&fcx, decl, body);\n         }\n         _ => ccx.tcx.sess.impossible_case(body.span,\n@@ -1666,10 +1665,24 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n-    pub fn default_diverging_type_variables_to_nil(&self) {\n+    /// Apply \"fallbacks\" to some types\n+    /// ! gets replaced with (), unconstrained ints with i32, and unconstrained floats with f64.\n+    pub fn default_type_parameters(&self) {\n+        use middle::ty::UnconstrainedNumeric::{UnconstrainedInt, UnconstrainedFloat, Neither};\n         for (_, &ref ty) in self.inh.node_types.borrow_mut().iter_mut() {\n-            if self.infcx().type_var_diverges(self.infcx().resolve_type_vars_if_possible(ty)) {\n+            let resolved = self.infcx().resolve_type_vars_if_possible(ty);\n+            if self.infcx().type_var_diverges(resolved) {\n                 demand::eqtype(self, codemap::DUMMY_SP, *ty, ty::mk_nil(self.tcx()));\n+            } else {\n+                match self.infcx().type_is_unconstrained_numeric(resolved) {\n+                    UnconstrainedInt => {\n+                        demand::eqtype(self, codemap::DUMMY_SP, *ty, self.tcx().types.i32)\n+                    },\n+                    UnconstrainedFloat => {\n+                        demand::eqtype(self, codemap::DUMMY_SP, *ty, self.tcx().types.f64)\n+                    }\n+                    Neither => { }\n+                }\n             }\n         }\n     }"}, {"sha": "c85b542b6caeee105a456303eb4b94fa140839ee", "filename": "src/librustc_typeck/check/vtable.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c5957eaaf577bff895ce819447f7e40558a28/src%2Flibrustc_typeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c5957eaaf577bff895ce819447f7e40558a28/src%2Flibrustc_typeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fvtable.rs?ref=ee3c5957eaaf577bff895ce819447f7e40558a28", "patch": "@@ -407,6 +407,9 @@ pub fn register_object_cast_obligations<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n pub fn select_all_fcx_obligations_or_error(fcx: &FnCtxt) {\n     debug!(\"select_all_fcx_obligations_or_error\");\n \n+    select_fcx_obligations_where_possible(fcx);\n+    fcx.default_type_parameters();\n+\n     let mut fulfillment_cx = fcx.inh.fulfillment_cx.borrow_mut();\n     let r = fulfillment_cx.select_all_or_error(fcx.infcx(),\n                                                &fcx.inh.param_env,"}, {"sha": "5dbf7546de22448e826c4d188b1ddb9838d9b329", "filename": "src/test/compile-fail/issue-16966.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c5957eaaf577bff895ce819447f7e40558a28/src%2Ftest%2Fcompile-fail%2Fissue-16966.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c5957eaaf577bff895ce819447f7e40558a28/src%2Ftest%2Fcompile-fail%2Fissue-16966.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-16966.rs?ref=ee3c5957eaaf577bff895ce819447f7e40558a28", "patch": "@@ -8,8 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// error-pattern:type annotations required\n fn main() {\n     panic!(\n-        1.2 //~ ERROR cannot determine a type for this expression\n+        std::default::Default::default()\n     );\n }"}, {"sha": "0a5aa1b7bd34695cebb9a8451c45d0d5e25eb52f", "filename": "src/test/compile-fail/traits-multidispatch-convert-ambig-dest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c5957eaaf577bff895ce819447f7e40558a28/src%2Ftest%2Fcompile-fail%2Ftraits-multidispatch-convert-ambig-dest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c5957eaaf577bff895ce819447f7e40558a28/src%2Ftest%2Fcompile-fail%2Ftraits-multidispatch-convert-ambig-dest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftraits-multidispatch-convert-ambig-dest.rs?ref=ee3c5957eaaf577bff895ce819447f7e40558a28", "patch": "@@ -33,7 +33,7 @@ where T : Convert<U>\n }\n \n fn a() {\n-    test(22_i32, 44); //~ ERROR type annotations required\n+    test(22_i32, std::default::Default::default()); //~ ERROR type annotations required\n }\n \n fn main() {}"}, {"sha": "631517f6a3ca6ca937a5a52134dc65425d09aa36", "filename": "src/test/run-fail/issue-6458-1.rs", "status": "renamed", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c5957eaaf577bff895ce819447f7e40558a28/src%2Ftest%2Frun-fail%2Fissue-6458-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c5957eaaf577bff895ce819447f7e40558a28/src%2Ftest%2Frun-fail%2Fissue-6458-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fissue-6458-1.rs?ref=ee3c5957eaaf577bff895ce819447f7e40558a28", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// error-pattern:explicit panic\n+\n fn foo<T>(t: T) {}\n fn main() { foo(panic!()) }\n-    //~^ ERROR type annotations required", "previous_filename": "src/test/compile-fail/issue-6458-1.rs"}, {"sha": "05973a545a20d1ab5165be24f83a266f0cf9b162", "filename": "src/test/run-pass/integer-literal-suffix-inference-2.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c5957eaaf577bff895ce819447f7e40558a28/src%2Ftest%2Frun-pass%2Finteger-literal-suffix-inference-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c5957eaaf577bff895ce819447f7e40558a28/src%2Ftest%2Frun-pass%2Finteger-literal-suffix-inference-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finteger-literal-suffix-inference-2.rs?ref=ee3c5957eaaf577bff895ce819447f7e40558a28", "patch": "@@ -11,7 +11,7 @@\n fn foo(_: *const ()) {}\n \n fn main() {\n-    let a = 3;  //~ ERROR cannot determine a type for this local variable\n+    let a = 3;\n     foo(&a as *const _ as *const ());\n }\n ", "previous_filename": "src/test/compile-fail/integer-literal-suffix-inference-2.rs"}, {"sha": "05b275a0d8cabb05ae9519914560835120907aa0", "filename": "src/test/run-pass/integer-literal-suffix-inference-3.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c5957eaaf577bff895ce819447f7e40558a28/src%2Ftest%2Frun-pass%2Finteger-literal-suffix-inference-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c5957eaaf577bff895ce819447f7e40558a28/src%2Ftest%2Frun-pass%2Finteger-literal-suffix-inference-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finteger-literal-suffix-inference-3.rs?ref=ee3c5957eaaf577bff895ce819447f7e40558a28", "patch": "@@ -10,6 +10,5 @@\n \n fn main() {\n     println!(\"{}\", std::mem::size_of_val(&1));\n-    //~^ ERROR cannot determine a type for this expression\n }\n ", "previous_filename": "src/test/compile-fail/integer-literal-suffix-inference-3.rs"}, {"sha": "51996614d259f1cc450c2ec426713463a7a2b476", "filename": "src/test/run-pass/issue-11382.rs", "status": "renamed", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c5957eaaf577bff895ce819447f7e40558a28/src%2Ftest%2Frun-pass%2Fissue-11382.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c5957eaaf577bff895ce819447f7e40558a28/src%2Ftest%2Frun-pass%2Fissue-11382.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-11382.rs?ref=ee3c5957eaaf577bff895ce819447f7e40558a28", "patch": "@@ -9,8 +9,5 @@\n // except according to those terms.\n \n fn main() {\n-panic!(\n-    1.2\n-//~^ ERROR cannot determine the type of this number; add a suffix to specify the type explicitly\n-);\n+    println!(\"{}\", 1.2);\n }", "previous_filename": "src/test/compile-fail/issue-11382.rs"}, {"sha": "a1a5922e15003bad5bf69793fe076a28956ab7e4", "filename": "src/test/run-pass/issue-15730.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c5957eaaf577bff895ce819447f7e40558a28/src%2Ftest%2Frun-pass%2Fissue-15730.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c5957eaaf577bff895ce819447f7e40558a28/src%2Ftest%2Frun-pass%2Fissue-15730.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-15730.rs?ref=ee3c5957eaaf577bff895ce819447f7e40558a28", "patch": "@@ -12,6 +12,5 @@\n \n fn main() {\n     let mut array = [1, 2, 3];\n-//~^ ERROR cannot determine a type for this local variable: cannot determine the type of this integ\n     let pie_slice = array[1..2];\n }", "previous_filename": "src/test/compile-fail/issue-15730.rs"}, {"sha": "cb12d138a5f29ce4b2a880968a0f311c0852f0ab", "filename": "src/test/run-pass/issue-16783.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c5957eaaf577bff895ce819447f7e40558a28/src%2Ftest%2Frun-pass%2Fissue-16783.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c5957eaaf577bff895ce819447f7e40558a28/src%2Ftest%2Frun-pass%2Fissue-16783.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-16783.rs?ref=ee3c5957eaaf577bff895ce819447f7e40558a28", "patch": "@@ -10,6 +10,5 @@\n \n pub fn main() {\n     let x = [1, 2, 3];\n-    //~^ ERROR cannot determine a type for this local variable: cannot determine the type of this\n     let y = x.as_slice();\n }", "previous_filename": "src/test/compile-fail/issue-16783.rs"}, {"sha": "c10029791df52d68fa27faaabfb1ad8cf52c6eeb", "filename": "src/test/run-pass/traits-multidispatch-infer-convert-source-and-target.rs", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Ftest%2Frun-pass%2Ftraits-multidispatch-infer-convert-source-and-target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Ftest%2Frun-pass%2Ftraits-multidispatch-infer-convert-source-and-target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftraits-multidispatch-infer-convert-source-and-target.rs?ref=cd614164e692cca3a1460737f581fcb6d4630baf", "patch": "@@ -1,35 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Test that if there is one impl we can infer everything.\n-\n-use std::mem;\n-\n-trait Convert<Target> {\n-    fn convert(&self) -> Target;\n-}\n-\n-impl Convert<u32> for i16 {\n-    fn convert(&self) -> u32 {\n-        *self as u32\n-    }\n-}\n-\n-fn test<T,U>(_: T, _: U, t_size: uint, u_size: uint)\n-where T : Convert<U>\n-{\n-    assert_eq!(mem::size_of::<T>(), t_size);\n-    assert_eq!(mem::size_of::<U>(), u_size);\n-}\n-\n-fn main() {\n-    // T = i16, U = u32\n-    test(22, 44,  2, 4);\n-}"}, {"sha": "532ef7cbec6f37b3e6c31af5924025f2c4591ac2", "filename": "src/test/run-pass/traits-multidispatch-infer-convert-target.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c5957eaaf577bff895ce819447f7e40558a28/src%2Ftest%2Frun-pass%2Ftraits-multidispatch-infer-convert-target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c5957eaaf577bff895ce819447f7e40558a28/src%2Ftest%2Frun-pass%2Ftraits-multidispatch-infer-convert-target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftraits-multidispatch-infer-convert-target.rs?ref=ee3c5957eaaf577bff895ce819447f7e40558a28", "patch": "@@ -36,11 +36,10 @@ where T : Convert<U>\n }\n \n fn main() {\n+    use std::default::Default;\n     // T = i16, U = u32\n-    test(22_i16, 44,  2, 4);\n-    test(22, 44_u32, 2, 4);\n+    test(22_i16, Default::default(),  2, 4);\n \n     // T = u32, U = i16\n-    test(22_u32, 44, 4, 2);\n-    test(22, 44_i16, 4, 2);\n+    test(22_u32, Default::default(), 4, 2);\n }"}]}