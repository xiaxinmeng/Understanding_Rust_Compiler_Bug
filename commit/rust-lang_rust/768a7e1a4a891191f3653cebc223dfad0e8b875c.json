{"sha": "768a7e1a4a891191f3653cebc223dfad0e8b875c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2OGE3ZTFhNGE4OTExOTFmMzY1M2NlYmMyMjNkZmFkMGU4Yjg3NWM=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2014-10-28T22:36:43Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2014-10-28T22:37:42Z"}, "message": "reference: slices are now regular types", "tree": {"sha": "fe9af2558abad92112b0e565d7fbfae73acb5aca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe9af2558abad92112b0e565d7fbfae73acb5aca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/768a7e1a4a891191f3653cebc223dfad0e8b875c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/768a7e1a4a891191f3653cebc223dfad0e8b875c", "html_url": "https://github.com/rust-lang/rust/commit/768a7e1a4a891191f3653cebc223dfad0e8b875c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/768a7e1a4a891191f3653cebc223dfad0e8b875c/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "321de979d8734d87629933fa37e6db6416ff3132", "url": "https://api.github.com/repos/rust-lang/rust/commits/321de979d8734d87629933fa37e6db6416ff3132", "html_url": "https://github.com/rust-lang/rust/commit/321de979d8734d87629933fa37e6db6416ff3132"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "cfa69cdfd4975f9171f218bc20e14fef10ef85bd", "filename": "src/doc/reference.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/768a7e1a4a891191f3653cebc223dfad0e8b875c/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/768a7e1a4a891191f3653cebc223dfad0e8b875c/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=768a7e1a4a891191f3653cebc223dfad0e8b875c", "patch": "@@ -1165,7 +1165,7 @@ exposing an API making it possible for it to occur in safe code.\n   * Using `std::ptr::copy_nonoverlapping_memory` (`memcpy32`/`memcpy64`\n     instrinsics) on overlapping buffers\n * Invalid values in primitive types, even in private fields/locals:\n-  * Dangling/null pointers in non-raw pointers, or slices\n+  * Dangling/null references or boxes\n   * A value other than `false` (0) or `true` (1) in a `bool`\n   * A discriminant in an `enum` not included in the type definition\n   * A value in a `char` which is a surrogate or above `char::MAX`"}]}