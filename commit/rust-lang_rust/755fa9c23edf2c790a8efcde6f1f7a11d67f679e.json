{"sha": "755fa9c23edf2c790a8efcde6f1f7a11d67f679e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1NWZhOWMyM2VkZjJjNzkwYThlZmNkZTZmMWY3YTExZDY3ZjY3OWU=", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2017-11-19T22:37:59Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2017-11-26T15:39:15Z"}, "message": "Update tests for -Zborrowck-mir -> -Zborrowck=mode migration", "tree": {"sha": "365ff2baac9cb61e35f1eb9be5633add1f4f1363", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/365ff2baac9cb61e35f1eb9be5633add1f4f1363"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/755fa9c23edf2c790a8efcde6f1f7a11d67f679e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/755fa9c23edf2c790a8efcde6f1f7a11d67f679e", "html_url": "https://github.com/rust-lang/rust/commit/755fa9c23edf2c790a8efcde6f1f7a11d67f679e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9af68e90cc7a551130873363a6776a4c04e2a6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9af68e90cc7a551130873363a6776a4c04e2a6d", "html_url": "https://github.com/rust-lang/rust/commit/c9af68e90cc7a551130873363a6776a4c04e2a6d"}], "stats": {"total": 514, "additions": 194, "deletions": 320}, "files": [{"sha": "c4a7f257394e72088990d7941839d48ee03e9fde", "filename": "src/test/compile-fail/E0506.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fcompile-fail%2FE0506.rs", "raw_url": "https://github.com/rust-lang/rust/raw/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fcompile-fail%2FE0506.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0506.rs?ref=755fa9c23edf2c790a8efcde6f1f7a11d67f679e", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // revisions: ast mir\n-//[mir]compile-flags: -Z emit-end-regions -Z borrowck-mir\n+//[mir]compile-flags: -Z borrowck=mir\n \n struct FancyNum {\n     num: u8,\n@@ -19,8 +19,7 @@ fn main() {\n     let mut fancy_num = FancyNum { num: 5 };\n     let fancy_ref = &fancy_num;\n     fancy_num = FancyNum { num: 6 }; //[ast]~ ERROR E0506\n-                                     //[mir]~^ ERROR (Mir) [E0506]\n-                                     //[mir]~| ERROR (Ast) [E0506]\n+                                     //[mir]~^ ERROR [E0506]\n \n     println!(\"Num: {}, Ref: {}\", fancy_num.num, fancy_ref.num);\n }"}, {"sha": "0c3dce6b0346a78950348aa5acfd47d733ee0ccc", "filename": "src/test/compile-fail/E0508.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fcompile-fail%2FE0508.rs", "raw_url": "https://github.com/rust-lang/rust/raw/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fcompile-fail%2FE0508.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0508.rs?ref=755fa9c23edf2c790a8efcde6f1f7a11d67f679e", "patch": "@@ -9,13 +9,12 @@\n // except according to those terms.\n \n // revisions: ast mir\n-//[mir]compile-flags: -Zborrowck-mir\n+//[mir]compile-flags: -Z borrowck=mir\n \n struct NonCopy;\n \n fn main() {\n     let array = [NonCopy; 1];\n-    let _value = array[0];  //[ast]~ ERROR E0508\n-                            //[mir]~^ ERROR (Ast) [E0508]\n-                            //[mir]~| ERROR (Mir) [E0508]\n+    let _value = array[0];  //[ast]~ ERROR [E0508]\n+                            //[mir]~^ ERROR [E0508]\n }"}, {"sha": "50f115306c8fa0ea02b9ad860354a81c4f89d082", "filename": "src/test/compile-fail/E0594.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fcompile-fail%2FE0594.rs", "raw_url": "https://github.com/rust-lang/rust/raw/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fcompile-fail%2FE0594.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0594.rs?ref=755fa9c23edf2c790a8efcde6f1f7a11d67f679e", "patch": "@@ -9,12 +9,11 @@\n // except according to those terms.\n \n // revisions: ast mir\n-//[mir]compile-flags: -Z emit-end-regions -Z borrowck-mir\n+//[mir]compile-flags: -Z borrowck=mir\n \n static NUM: i32 = 18;\n \n fn main() {\n     NUM = 20; //[ast]~ ERROR E0594\n-              //[mir]~^ ERROR cannot assign to immutable static item (Ast)\n-              //[mir]~| ERROR cannot assign to immutable static item `NUM` (Mir)\n+              //[mir]~^ ERROR cannot assign to immutable static item\n }"}, {"sha": "52bdff55d86a3c5dd35e333efedcd2c8abfab6f4", "filename": "src/test/compile-fail/E0596.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fcompile-fail%2FE0596.rs", "raw_url": "https://github.com/rust-lang/rust/raw/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fcompile-fail%2FE0596.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0596.rs?ref=755fa9c23edf2c790a8efcde6f1f7a11d67f679e", "patch": "@@ -9,11 +9,10 @@\n // except according to those terms.\n \n // revisions: ast mir\n-//[mir]compile-flags: -Z emit-end-regions -Z borrowck-mir\n+//[mir]compile-flags: -Z borrowck=mir\n \n fn main() {\n     let x = 1;\n     let y = &mut x; //[ast]~ ERROR [E0596]\n-                    //[mir]~^ ERROR (Ast) [E0596]\n-                    //[mir]~| ERROR (Mir) [E0596]\n+                    //[mir]~^ ERROR [E0596]\n }"}, {"sha": "00a3da860746dbac62ba43afdeac401fa9b75fe0", "filename": "src/test/compile-fail/borrowck/borrowck-access-permissions.rs", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-access-permissions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-access-permissions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-access-permissions.rs?ref=755fa9c23edf2c790a8efcde6f1f7a11d67f679e", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // revisions: ast mir\n-//[mir]compile-flags: -Z emit-end-regions -Z borrowck-mir\n+//[mir]compile-flags: -Z borrowck=mir\n \n static static_x : i32 = 1;\n static mut static_x_mut : i32 = 1;\n@@ -20,15 +20,13 @@ fn main() {\n \n     { // borrow of local\n         let _y1 = &mut x; //[ast]~ ERROR [E0596]\n-                          //[mir]~^ ERROR (Ast) [E0596]\n-                          //[mir]~| ERROR (Mir) [E0596]\n+                          //[mir]~^ ERROR [E0596]\n         let _y2 = &mut x_mut; // No error\n     }\n \n     { // borrow of static\n         let _y1 = &mut static_x; //[ast]~ ERROR [E0596]\n-                                 //[mir]~^ ERROR (Ast) [E0596]\n-                                 //[mir]~| ERROR (Mir) [E0596]\n+                                 //[mir]~^ ERROR [E0596]\n         unsafe { let _y2 = &mut static_x_mut; } // No error\n     }\n \n@@ -37,8 +35,7 @@ fn main() {\n         let mut box_x_mut = Box::new(1);\n \n         let _y1 = &mut *box_x; //[ast]~ ERROR [E0596]\n-                              //[mir]~^ ERROR (Ast) [E0596]\n-                              //[mir]~| ERROR (Mir) [E0596]\n+                               //[mir]~^ ERROR [E0596]\n         let _y2 = &mut *box_x_mut; // No error\n     }\n \n@@ -47,8 +44,7 @@ fn main() {\n         let ref_x_mut = &mut x_mut;\n \n         let _y1 = &mut *ref_x; //[ast]~ ERROR [E0596]\n-                              //[mir]~^ ERROR (Ast) [E0596]\n-                              //[mir]~| ERROR (Mir) [E0596]\n+                               //[mir]~^ ERROR [E0596]\n         let _y2 = &mut *ref_x_mut; // No error\n     }\n \n@@ -58,8 +54,7 @@ fn main() {\n \n         unsafe {\n             let _y1 = &mut *ptr_x; //[ast]~ ERROR [E0596]\n-                                  //[mir]~^ ERROR (Ast) [E0596]\n-                                  //[mir]~| ERROR (Mir) [E0596]\n+                                   //[mir]~^ ERROR [E0596]\n             let _y2 = &mut *ptr_mut_x; // No error\n         }\n     }\n@@ -69,8 +64,7 @@ fn main() {\n         let mut foo = Foo { f: &mut x_mut, g: &x };\n         let foo_ref = &foo;\n         let _y = &mut *foo_ref.f; //[ast]~ ERROR [E0389]\n-                                 //[mir]~^ ERROR (Ast) [E0389]\n-                                 //[mir]~| ERROR (Mir) [E0596]\n-                                 // FIXME: Wrong error in MIR\n+                                  //[mir]~^ ERROR [E0596]\n+                                  // FIXME: Wrong error in MIR\n     }\n }"}, {"sha": "d68420eb205c7b6e95d205776e09d2a1bebf0eee", "filename": "src/test/compile-fail/borrowck/borrowck-assign-comp.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-assign-comp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-assign-comp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-assign-comp.rs?ref=755fa9c23edf2c790a8efcde6f1f7a11d67f679e", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // revisions: ast mir\n-//[mir]compile-flags: -Z emit-end-regions -Z borrowck-mir\n+//[mir]compile-flags: -Z borrowck=mir\n \n struct point { x: isize, y: isize }\n \n@@ -21,8 +21,7 @@ fn a() {\n     // inherently mutable; since `p` was made immutable, `p.x` is now\n     // immutable.  Otherwise the type of &_q.x (&isize) would be wrong.\n     p.x = 5; //[ast]~ ERROR cannot assign to `p.x`\n-             //[mir]~^ ERROR cannot assign to `p.x` because it is borrowed (Ast)\n-             //[mir]~| ERROR cannot assign to `p.x` because it is borrowed (Mir)\n+             //[mir]~^ ERROR cannot assign to `p.x` because it is borrowed\n     q.x;\n }\n \n@@ -33,8 +32,7 @@ fn c() {\n     let mut p = point {x: 3, y: 4};\n     let q = &p.y;\n     p = point {x: 5, y: 7};//[ast]~ ERROR cannot assign to `p`\n-                           //[mir]~^ ERROR cannot assign to `p` because it is borrowed (Ast)\n-                           //[mir]~| ERROR cannot assign to `p` because it is borrowed (Mir)\n+                           //[mir]~^ ERROR cannot assign to `p` because it is borrowed\n     p.x; // silence warning\n     *q; // stretch loan\n }\n@@ -46,8 +44,7 @@ fn d() {\n     let mut p = point {x: 3, y: 4};\n     let q = &p.y;\n     p.y = 5; //[ast]~ ERROR cannot assign to `p.y`\n-             //[mir]~^ ERROR cannot assign to `p.y` because it is borrowed (Ast)\n-             //[mir]~| ERROR cannot assign to `p.y` because it is borrowed (Mir)\n+             //[mir]~^ ERROR cannot assign to `p.y` because it is borrowed\n     *q;\n }\n "}, {"sha": "57002dd40fc95fd31a90ca8bab41e1caafd939d0", "filename": "src/test/compile-fail/borrowck/borrowck-assign-to-constants.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-assign-to-constants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-assign-to-constants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-assign-to-constants.rs?ref=755fa9c23edf2c790a8efcde6f1f7a11d67f679e", "patch": "@@ -9,13 +9,12 @@\n // except according to those terms.\n \n // revisions: ast mir\n-//[mir]compile-flags: -Z emit-end-regions -Z borrowck-mir\n+//[mir]compile-flags: -Z borrowck=mir\n \n static foo: isize = 5;\n \n fn main() {\n     // assigning to various global constants\n     foo = 6; //[ast]~ ERROR cannot assign to immutable static item\n-             //[mir]~^ ERROR cannot assign to immutable static item (Ast)\n-             //[mir]~| ERROR cannot assign to immutable static item `foo` (Mir)\n+             //[mir]~^ ERROR cannot assign to immutable static item `foo`\n }"}, {"sha": "f498d8d500e649e3562905495320f230324cb3fd", "filename": "src/test/compile-fail/borrowck/borrowck-closures-mut-and-imm.rs", "status": "modified", "additions": 10, "deletions": 18, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-closures-mut-and-imm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-closures-mut-and-imm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-closures-mut-and-imm.rs?ref=755fa9c23edf2c790a8efcde6f1f7a11d67f679e", "patch": "@@ -13,7 +13,7 @@\n \n // ignore-tidy-linelength\n // revisions: ast mir\n-//[mir]compile-flags: -Z emit-end-regions -Z borrowck-mir\n+//[mir]compile-flags: -Z borrowck=mir\n \n #![feature(box_syntax)]\n \n@@ -29,48 +29,42 @@ fn a() {\n     let mut x = 3;\n     let c1 = || x = 4;\n     let c2 = || x * 5; //[ast]~ ERROR cannot borrow `x`\n-                       //[mir]~^ ERROR cannot borrow `x` as immutable because it is also borrowed as mutable (Ast)\n-                       //[mir]~| ERROR cannot borrow `x` as immutable because it is also borrowed as mutable (Mir)\n+                       //[mir]~^ ERROR cannot borrow `x` as immutable because it is also borrowed as mutable\n }\n \n fn b() {\n     let mut x = 3;\n     let c1 = || set(&mut x);\n     let c2 = || get(&x); //[ast]~ ERROR cannot borrow `x`\n-                         //[mir]~^ ERROR cannot borrow `x` as immutable because it is also borrowed as mutable (Ast)\n-                         //[mir]~| ERROR cannot borrow `x` as immutable because it is also borrowed as mutable (Mir)\n+                         //[mir]~^ ERROR cannot borrow `x` as immutable because it is also borrowed as mutable\n }\n \n fn c() {\n     let mut x = 3;\n     let c1 = || set(&mut x);\n     let c2 = || x * 5; //[ast]~ ERROR cannot borrow `x`\n-                       //[mir]~^ ERROR cannot borrow `x` as immutable because it is also borrowed as mutable (Ast)\n-                       //[mir]~| ERROR cannot borrow `x` as immutable because it is also borrowed as mutable (Mir)\n+                       //[mir]~^ ERROR cannot borrow `x` as immutable because it is also borrowed as mutable\n }\n \n fn d() {\n     let mut x = 3;\n     let c2 = || x * 5;\n     x = 5; //[ast]~ ERROR cannot assign\n-           //[mir]~^ ERROR cannot assign to `x` because it is borrowed (Ast)\n-           //[mir]~| ERROR cannot assign to `x` because it is borrowed (Mir)\n+           //[mir]~^ ERROR cannot assign to `x` because it is borrowed\n }\n \n fn e() {\n     let mut x = 3;\n     let c1 = || get(&x);\n     x = 5; //[ast]~ ERROR cannot assign\n-           //[mir]~^ ERROR cannot assign to `x` because it is borrowed (Ast)\n-           //[mir]~| ERROR cannot assign to `x` because it is borrowed (Mir)\n+           //[mir]~^ ERROR cannot assign to `x` because it is borrowed\n }\n \n fn f() {\n     let mut x: Box<_> = box 3;\n     let c1 = || get(&*x);\n-    *x = 5; //[ast]~ ERROR cannot assign\n-            //[mir]~^ ERROR cannot assign to `*x` because it is borrowed (Ast)\n-            //[mir]~| ERROR cannot assign to `*x` because it is borrowed (Mir)\n+    *x = 5; //[ast]~ ERROR cannot assign to `*x`\n+            //[mir]~^ ERROR cannot assign to `*x` because it is borrowed\n }\n \n fn g() {\n@@ -81,8 +75,7 @@ fn g() {\n     let mut x: Box<_> = box Foo { f: box 3 };\n     let c1 = || get(&*x.f);\n     *x.f = 5; //[ast]~ ERROR cannot assign to `*x.f`\n-              //[mir]~^ ERROR cannot assign to `*x.f` because it is borrowed (Ast)\n-              //[mir]~| ERROR cannot assign to `*x.f` because it is borrowed (Mir)\n+              //[mir]~^ ERROR cannot assign to `*x.f` because it is borrowed\n }\n \n fn h() {\n@@ -93,8 +86,7 @@ fn h() {\n     let mut x: Box<_> = box Foo { f: box 3 };\n     let c1 = || get(&*x.f);\n     let c2 = || *x.f = 5; //[ast]~ ERROR cannot borrow `x` as mutable\n-                          //[mir]~^ ERROR cannot borrow `x` as mutable because it is also borrowed as immutable (Ast)\n-                          //[mir]~| ERROR cannot borrow `x` as mutable because it is also borrowed as immutable (Mir)\n+                          //[mir]~^ ERROR cannot borrow `x` as mutable because it is also borrowed as immutable\n }\n \n fn main() {"}, {"sha": "062cc976a3dc1fe5eab918136a367b58fa24bb3a", "filename": "src/test/compile-fail/borrowck/borrowck-describe-lvalue.rs", "status": "modified", "additions": 32, "deletions": 58, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-describe-lvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-describe-lvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-describe-lvalue.rs?ref=755fa9c23edf2c790a8efcde6f1f7a11d67f679e", "patch": "@@ -10,7 +10,7 @@\n \n // ignore-tidy-linelength\n // revisions: ast mir\n-//[mir]compile-flags: -Z emit-end-regions -Z borrowck-mir\n+//[mir]compile-flags: -Z borrowck=mir\n \n #![feature(slice_patterns)]\n #![feature(advanced_slice_patterns)]\n@@ -52,24 +52,21 @@ fn main() {\n         let mut f = Foo { x: 22 };\n         let _x = f.x();\n         f.x; //[ast]~ ERROR cannot use `f.x` because it was mutably borrowed\n-             //[mir]~^ ERROR cannot use `f.x` because it was mutably borrowed (Ast)\n-             //[mir]~| ERROR cannot use `f.x` because it was mutably borrowed (Mir)\n+             //[mir]~^ ERROR cannot use `f.x` because it was mutably borrowed\n     }\n     // Local and field from tuple-struct\n     {\n         let mut g = Bar(22);\n         let _0 = g.x();\n         g.0; //[ast]~ ERROR cannot use `g.0` because it was mutably borrowed\n-             //[mir]~^ ERROR cannot use `g.0` because it was mutably borrowed (Ast)\n-             //[mir]~| ERROR cannot use `g.0` because it was mutably borrowed (Mir)\n+             //[mir]~^ ERROR cannot use `g.0` because it was mutably borrowed\n     }\n     // Local and field from tuple\n     {\n         let mut h = (22, 23);\n         let _0 = &mut h.0;\n         h.0; //[ast]~ ERROR cannot use `h.0` because it was mutably borrowed\n-             //[mir]~^ ERROR cannot use `h.0` because it was mutably borrowed (Ast)\n-             //[mir]~| ERROR cannot use `h.0` because it was mutably borrowed (Mir)\n+             //[mir]~^ ERROR cannot use `h.0` because it was mutably borrowed\n     }\n     // Local and field from enum\n     {\n@@ -78,41 +75,36 @@ fn main() {\n         match e {\n             Baz::X(value) => value\n             //[ast]~^ ERROR cannot use `e.0` because it was mutably borrowed\n-            //[mir]~^^ ERROR cannot use `e.0` because it was mutably borrowed (Ast)\n-            //[mir]~| ERROR cannot use `e.0` because it was mutably borrowed (Mir)\n+            //[mir]~^^ ERROR cannot use `e.0` because it was mutably borrowed\n         };\n     }\n     // Local and field from union\n     unsafe {\n         let mut u = U { b: 0 };\n         let _ra = &mut u.a;\n         u.a; //[ast]~ ERROR cannot use `u.a` because it was mutably borrowed\n-             //[mir]~^ ERROR cannot use `u.a` because it was mutably borrowed (Ast)\n-             //[mir]~| ERROR cannot use `u.a` because it was mutably borrowed (Mir)\n+             //[mir]~^ ERROR cannot use `u.a` because it was mutably borrowed\n     }\n     // Deref and field from struct\n     {\n         let mut f = Box::new(Foo { x: 22 });\n         let _x = f.x();\n         f.x; //[ast]~ ERROR cannot use `f.x` because it was mutably borrowed\n-             //[mir]~^ ERROR cannot use `f.x` because it was mutably borrowed (Ast)\n-             //[mir]~| ERROR cannot use `f.x` because it was mutably borrowed (Mir)\n+             //[mir]~^ ERROR cannot use `f.x` because it was mutably borrowed\n     }\n     // Deref and field from tuple-struct\n     {\n         let mut g = Box::new(Bar(22));\n         let _0 = g.x();\n         g.0; //[ast]~ ERROR cannot use `g.0` because it was mutably borrowed\n-             //[mir]~^ ERROR cannot use `g.0` because it was mutably borrowed (Ast)\n-             //[mir]~| ERROR cannot use `g.0` because it was mutably borrowed (Mir)\n+             //[mir]~^ ERROR cannot use `g.0` because it was mutably borrowed\n     }\n     // Deref and field from tuple\n     {\n         let mut h = Box::new((22, 23));\n         let _0 = &mut h.0;\n         h.0; //[ast]~ ERROR cannot use `h.0` because it was mutably borrowed\n-             //[mir]~^ ERROR cannot use `h.0` because it was mutably borrowed (Ast)\n-             //[mir]~| ERROR cannot use `h.0` because it was mutably borrowed (Mir)\n+             //[mir]~^ ERROR cannot use `h.0` because it was mutably borrowed\n     }\n     // Deref and field from enum\n     {\n@@ -121,17 +113,15 @@ fn main() {\n         match *e {\n             Baz::X(value) => value\n             //[ast]~^ ERROR cannot use `e.0` because it was mutably borrowed\n-            //[mir]~^^ ERROR cannot use `e.0` because it was mutably borrowed (Ast)\n-            //[mir]~| ERROR cannot use `e.0` because it was mutably borrowed (Mir)\n+            //[mir]~^^ ERROR cannot use `e.0` because it was mutably borrowed\n         };\n     }\n     // Deref and field from union\n     unsafe {\n         let mut u = Box::new(U { b: 0 });\n         let _ra = &mut u.a;\n         u.a; //[ast]~ ERROR cannot use `u.a` because it was mutably borrowed\n-             //[mir]~^ ERROR cannot use `u.a` because it was mutably borrowed (Ast)\n-             //[mir]~| ERROR cannot use `u.a` because it was mutably borrowed (Mir)\n+             //[mir]~^ ERROR cannot use `u.a` because it was mutably borrowed\n     }\n     // Constant index\n     {\n@@ -140,29 +130,25 @@ fn main() {\n         match v {\n             &[x, _, .., _, _] => println!(\"{}\", x),\n                 //[ast]~^ ERROR cannot use `v[..]` because it was mutably borrowed\n-                //[mir]~^^ ERROR cannot use `v[..]` because it was mutably borrowed (Ast)\n-                //[mir]~| ERROR cannot use `v[..]` because it was mutably borrowed (Mir)\n+                //[mir]~^^ ERROR cannot use `v[..]` because it was mutably borrowed\n                             _ => panic!(\"other case\"),\n         }\n         match v {\n             &[_, x, .., _, _] => println!(\"{}\", x),\n                 //[ast]~^ ERROR cannot use `v[..]` because it was mutably borrowed\n-                //[mir]~^^ ERROR cannot use `v[..]` because it was mutably borrowed (Ast)\n-                //[mir]~| ERROR cannot use `v[..]` because it was mutably borrowed (Mir)\n+                //[mir]~^^ ERROR cannot use `v[..]` because it was mutably borrowed\n                             _ => panic!(\"other case\"),\n         }\n         match v {\n             &[_, _, .., x, _] => println!(\"{}\", x),\n                 //[ast]~^ ERROR cannot use `v[..]` because it was mutably borrowed\n-                //[mir]~^^ ERROR cannot use `v[..]` because it was mutably borrowed (Ast)\n-                //[mir]~| ERROR cannot use `v[..]` because it was mutably borrowed (Mir)\n+                //[mir]~^^ ERROR cannot use `v[..]` because it was mutably borrowed\n                             _ => panic!(\"other case\"),\n         }\n         match v {\n             &[_, _, .., _, x] => println!(\"{}\", x),\n                 //[ast]~^ ERROR cannot use `v[..]` because it was mutably borrowed\n-                //[mir]~^^ ERROR cannot use `v[..]` because it was mutably borrowed (Ast)\n-                //[mir]~| ERROR cannot use `v[..]` because it was mutably borrowed (Mir)\n+                //[mir]~^^ ERROR cannot use `v[..]` because it was mutably borrowed\n                             _ => panic!(\"other case\"),\n         }\n     }\n@@ -173,29 +159,25 @@ fn main() {\n         match v {\n             &[x..] => println!(\"{:?}\", x),\n                 //[ast]~^ ERROR cannot use `v[..]` because it was mutably borrowed\n-                //[mir]~^^ ERROR cannot use `v[..]` because it was mutably borrowed (Ast)\n-                //[mir]~| ERROR cannot use `v[..]` because it was mutably borrowed (Mir)\n+                //[mir]~^^ ERROR cannot use `v[..]` because it was mutably borrowed\n             _ => panic!(\"other case\"),\n         }\n         match v {\n             &[_, x..] => println!(\"{:?}\", x),\n                 //[ast]~^ ERROR cannot use `v[..]` because it was mutably borrowed\n-                //[mir]~^^ ERROR cannot use `v[..]` because it was mutably borrowed (Ast)\n-                //[mir]~| ERROR cannot use `v[..]` because it was mutably borrowed (Mir)\n+                //[mir]~^^ ERROR cannot use `v[..]` because it was mutably borrowed\n             _ => panic!(\"other case\"),\n         }\n         match v {\n             &[x.., _] => println!(\"{:?}\", x),\n                 //[ast]~^ ERROR cannot use `v[..]` because it was mutably borrowed\n-                //[mir]~^^ ERROR cannot use `v[..]` because it was mutably borrowed (Ast)\n-                //[mir]~| ERROR cannot use `v[..]` because it was mutably borrowed (Mir)\n+                //[mir]~^^ ERROR cannot use `v[..]` because it was mutably borrowed\n             _ => panic!(\"other case\"),\n         }\n         match v {\n             &[_, x.., _] => println!(\"{:?}\", x),\n                 //[ast]~^ ERROR cannot use `v[..]` because it was mutably borrowed\n-                //[mir]~^^ ERROR cannot use `v[..]` because it was mutably borrowed (Ast)\n-                //[mir]~| ERROR cannot use `v[..]` because it was mutably borrowed (Mir)\n+                //[mir]~^^ ERROR cannot use `v[..]` because it was mutably borrowed\n             _ => panic!(\"other case\"),\n         }\n     }\n@@ -208,14 +190,12 @@ fn main() {\n         match e {\n             E::A(ref ax) =>\n                 //[ast]~^ ERROR cannot borrow `e.0` as immutable because `e` is also borrowed as mutable\n-                //[mir]~^^ ERROR cannot borrow `e.0` as immutable because `e` is also borrowed as mutable (Ast)\n-                //[mir]~| ERROR cannot borrow `e.0` as immutable because it is also borrowed as mutable (Mir)\n-                //[mir]~| ERROR cannot use `e` because it was mutably borrowed (Mir)\n+                //[mir]~^^ ERROR cannot borrow `e.0` as immutable because it is also borrowed as mutable\n+                //[mir]~| ERROR cannot use `e` because it was mutably borrowed\n                 println!(\"e.ax: {:?}\", ax),\n             E::B { x: ref bx } =>\n                 //[ast]~^ ERROR cannot borrow `e.x` as immutable because `e` is also borrowed as mutable\n-                //[mir]~^^ ERROR cannot borrow `e.x` as immutable because `e` is also borrowed as mutable (Ast)\n-                //[mir]~| ERROR cannot borrow `e.x` as immutable because it is also borrowed as mutable (Mir)\n+                //[mir]~^^ ERROR cannot borrow `e.x` as immutable because it is also borrowed as mutable\n                 println!(\"e.bx: {:?}\", bx),\n         }\n     }\n@@ -228,16 +208,14 @@ fn main() {\n         match s {\n             S  { y: (ref y0, _), .. } =>\n                 //[ast]~^ ERROR cannot borrow `s.y.0` as immutable because `s` is also borrowed as mutable\n-                //[mir]~^^ ERROR cannot borrow `s.y.0` as immutable because `s` is also borrowed as mutable (Ast)\n-                //[mir]~| ERROR cannot borrow `s.y.0` as immutable because it is also borrowed as mutable (Mir)\n+                //[mir]~^^ ERROR cannot borrow `s.y.0` as immutable because it is also borrowed as mutable\n                 println!(\"y0: {:?}\", y0),\n             _ => panic!(\"other case\"),\n         }\n         match s {\n             S  { x: F { y: ref x0, .. }, .. } =>\n                 //[ast]~^ ERROR cannot borrow `s.x.y` as immutable because `s` is also borrowed as mutable\n-                //[mir]~^^ ERROR cannot borrow `s.x.y` as immutable because `s` is also borrowed as mutable (Ast)\n-                //[mir]~| ERROR cannot borrow `s.x.y` as immutable because it is also borrowed as mutable (Mir)\n+                //[mir]~^^ ERROR cannot borrow `s.x.y` as immutable because it is also borrowed as mutable\n                 println!(\"x0: {:?}\", x0),\n             _ => panic!(\"other case\"),\n         }\n@@ -252,7 +230,7 @@ fn main() {\n         fn bump<'a>(mut block: &mut Block<'a>) {\n             let x = &mut block;\n             let p: &'a u8 = &*block.current;\n-            //[mir]~^ ERROR cannot borrow `*block.current` as immutable because it is also borrowed as mutable (Mir)\n+            //[mir]~^ ERROR cannot borrow `*block.current` as immutable because it is also borrowed as mutable\n             // No errors in AST because of issue rust#38899\n         }\n     }\n@@ -266,7 +244,7 @@ fn main() {\n         unsafe fn bump2(mut block: *mut Block2) {\n             let x = &mut block;\n             let p : *const u8 = &*(*block).current;\n-            //[mir]~^ ERROR cannot borrow `*block.current` as immutable because it is also borrowed as mutable (Mir)\n+            //[mir]~^ ERROR cannot borrow `*block.current` as immutable because it is also borrowed as mutable\n             // No errors in AST because of issue rust#38899\n         }\n     }\n@@ -277,9 +255,8 @@ fn main() {\n         let _v = &mut v;\n         v[0].y;\n         //[ast]~^ ERROR cannot use `v[..].y` because it was mutably borrowed\n-        //[mir]~^^ ERROR cannot use `v[..].y` because it was mutably borrowed (Ast)\n-        //[mir]~| ERROR cannot use `v[..].y` because it was mutably borrowed (Mir)\n-        //[mir]~| ERROR cannot use `*v` because it was mutably borrowed (Mir)\n+        //[mir]~^^ ERROR cannot use `v[..].y` because it was mutably borrowed\n+        //[mir]~| ERROR cannot use `*v` because it was mutably borrowed\n     }\n     // Field of constant index\n     {\n@@ -288,7 +265,7 @@ fn main() {\n         let _v = &mut v;\n         match v {\n             &[_, F {x: ref xf, ..}] => println!(\"{}\", xf),\n-            //[mir]~^ ERROR cannot borrow `v[..].x` as immutable because it is also borrowed as mutable (Mir)\n+            //[mir]~^ ERROR cannot borrow `v[..].x` as immutable because it is also borrowed as mutable\n             // No errors in AST\n             _ => panic!(\"other case\")\n         }\n@@ -299,8 +276,7 @@ fn main() {\n         || {\n             let y = &mut x;\n             &mut x; //[ast]~ ERROR cannot borrow `**x` as mutable more than once at a time\n-                    //[mir]~^ ERROR cannot borrow `**x` as mutable more than once at a time (Ast)\n-                    //[mir]~| ERROR cannot borrow `x` as mutable more than once at a time (Mir)\n+                    //[mir]~^ ERROR cannot borrow `x` as mutable more than once at a time\n             *y = 1;\n         };\n     }\n@@ -311,8 +287,7 @@ fn main() {\n                || {\n                 let y = &mut x;\n                 &mut x; //[ast]~ ERROR cannot borrow `**x` as mutable more than once at a time\n-                        //[mir]~^ ERROR cannot borrow `**x` as mutable more than once at a time (Ast)\n-                        //[mir]~| ERROR cannot borrow `x` as mutable more than once at a time (Mir)\n+                        //[mir]~^ ERROR cannot borrow `x` as mutable more than once at a time\n                 *y = 1;\n                 }\n            };\n@@ -322,8 +297,7 @@ fn main() {\n             let c = || {\n                 drop(x);\n                 drop(x); //[ast]~ ERROR use of moved value: `x`\n-                         //[mir]~^ ERROR use of moved value: `x` (Ast)\n-                         //[mir]~| ERROR use of moved value: `x` (Mir)\n+                         //[mir]~^ ERROR use of moved value: `x`\n             };\n             c();\n         }"}, {"sha": "496aa84b593f351097e20471de2ec95a8975e1a3", "filename": "src/test/compile-fail/borrowck/borrowck-drop-from-guard.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-drop-from-guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-drop-from-guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-drop-from-guard.rs?ref=755fa9c23edf2c790a8efcde6f1f7a11d67f679e", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n \n-//compile-flags: -Z emit-end-regions -Z borrowck-mir\n+//compile-flags: -Z borrowck=mir\n \n fn foo(_:String) {}\n \n@@ -19,6 +19,6 @@ fn main()\n     match Some(42) {\n         Some(_) if { drop(my_str); false } => {}\n         Some(_) => {}\n-        None => { foo(my_str); } //~ ERROR (Mir) [E0382]\n+        None => { foo(my_str); } //~ ERROR [E0382]\n     }\n }"}, {"sha": "33b78cb26d8e34d25491b6300a33b000939d683d", "filename": "src/test/compile-fail/borrowck/borrowck-fn-in-const-a.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-fn-in-const-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-fn-in-const-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-fn-in-const-a.rs?ref=755fa9c23edf2c790a8efcde6f1f7a11d67f679e", "patch": "@@ -9,16 +9,15 @@\n // except according to those terms.\n \n // revisions: ast mir\n-//[mir]compile-flags: -Z emit-end-regions -Z borrowck-mir\n+//[mir]compile-flags: -Z borrowck=mir\n \n // Check that we check fns appearing in constant declarations.\n // Issue #22382.\n \n const MOVE: fn(&String) -> String = {\n     fn broken(x: &String) -> String {\n         return *x //[ast]~ ERROR cannot move out of borrowed content [E0507]\n-                  //[mir]~^ ERROR (Ast) [E0507]\n-                  //[mir]~| ERROR (Mir) [E0507]\n+                  //[mir]~^ ERROR [E0507]\n     }\n     broken\n };"}, {"sha": "f09a0c7414ba901267846ed523ed10651afa8557", "filename": "src/test/compile-fail/borrowck/borrowck-imm-ref-to-mut-rec-field-issue-3162-c.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-imm-ref-to-mut-rec-field-issue-3162-c.rs", "raw_url": "https://github.com/rust-lang/rust/raw/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-imm-ref-to-mut-rec-field-issue-3162-c.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-imm-ref-to-mut-rec-field-issue-3162-c.rs?ref=755fa9c23edf2c790a8efcde6f1f7a11d67f679e", "patch": "@@ -9,15 +9,14 @@\n // except according to those terms.\n \n // revisions: ast mir\n-//[mir]compile-flags: -Z emit-end-regions -Z borrowck-mir\n+//[mir]compile-flags: -Z borrowck=mir\n \n fn main() {\n     let mut _a = 3;\n     let _b = &mut _a;\n     {\n         let _c = &*_b;\n         _a = 4; //[ast]~ ERROR cannot assign to `_a`\n-                //[mir]~^ ERROR cannot assign to `_a` because it is borrowed (Ast)\n-                //[mir]~| ERROR cannot assign to `_a` because it is borrowed (Mir)\n+                //[mir]~^ ERROR cannot assign to `_a` because it is borrowed\n     }\n }"}, {"sha": "1ec0f98077477d9ca9948b833afc624b4fd6caab", "filename": "src/test/compile-fail/borrowck/borrowck-init-in-fru.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-init-in-fru.rs", "raw_url": "https://github.com/rust-lang/rust/raw/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-init-in-fru.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-init-in-fru.rs?ref=755fa9c23edf2c790a8efcde6f1f7a11d67f679e", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // revisions: ast mir\n-//[mir]compile-flags: -Z emit-end-regions -Z borrowck-mir\n+//[mir]compile-flags: -Z borrowck=mir\n \n #[derive(Clone)]\n struct point {\n@@ -21,7 +21,6 @@ fn main() {\n     let mut origin: point;\n     origin = point {x: 10,.. origin};\n     //[ast]~^ ERROR use of possibly uninitialized variable: `origin.y` [E0381]\n-    //[mir]~^^ ERROR (Ast) [E0381]\n-    //[mir]~|  ERROR (Mir) [E0381]\n+    //[mir]~^^ ERROR [E0381]\n     origin.clone();\n }"}, {"sha": "2fe764568bc82999e2b518ba87e0051b46812931", "filename": "src/test/compile-fail/borrowck/borrowck-lend-flow-match.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-lend-flow-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-lend-flow-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-lend-flow-match.rs?ref=755fa9c23edf2c790a8efcde6f1f7a11d67f679e", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // revisions: ast mir\n-//[mir]compile-flags: -Z emit-end-regions -Z borrowck-mir\n+//[mir]compile-flags: -Z borrowck=mir\n \n #![allow(unused_variables)]\n #![allow(unused_assignments)]\n@@ -26,8 +26,7 @@ fn separate_arms() {\n         }\n         Some(ref __isize) => {\n             x = Some(1); //[ast]~ ERROR cannot assign\n-                         //[mir]~^ ERROR cannot assign to `x` because it is borrowed (Ast)\n-                         //[mir]~| ERROR cannot assign to `x` because it is borrowed (Mir)\n+                         //[mir]~^ ERROR cannot assign to `x` because it is borrowed\n         }\n     }\n     x.clone(); // just to prevent liveness warnings"}, {"sha": "3f5725029d88772b887a3269f2d64918a1e1d281", "filename": "src/test/compile-fail/borrowck/borrowck-local-borrow-outlives-fn.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-local-borrow-outlives-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-local-borrow-outlives-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-local-borrow-outlives-fn.rs?ref=755fa9c23edf2c790a8efcde6f1f7a11d67f679e", "patch": "@@ -9,12 +9,11 @@\n // except according to those terms.\n \n // revisions: ast mir\n-//[mir]compile-flags: -Z emit-end-regions -Z borrowck-mir\n+//[mir]compile-flags: -Z borrowck=mir\n \n fn cplusplus_mode(x: isize) -> &'static isize {\n     &x //[ast]~ ERROR `x` does not live long enough\n-       //[mir]~^ ERROR `x` does not live long enough (Ast)\n-       //[mir]~| ERROR borrowed value does not live long enough (Mir)\n+       //[mir]~^ ERROR borrowed value does not live long enough\n }\n \n fn main() {}"}, {"sha": "4336812af9b58598ee05974ff0e58c8603d8e1b6", "filename": "src/test/compile-fail/borrowck/borrowck-match-already-borrowed.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-match-already-borrowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-match-already-borrowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-match-already-borrowed.rs?ref=755fa9c23edf2c790a8efcde6f1f7a11d67f679e", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // revisions: ast mir\n-//[mir]compile-flags: -Z emit-end-regions -Z borrowck-mir\n+//[mir]compile-flags: -Z borrowck=mir\n \n enum Foo {\n     A(i32),\n@@ -20,11 +20,10 @@ fn match_enum() {\n     let mut foo = Foo::B;\n     let p = &mut foo;\n     let _ = match foo {\n-        Foo::B => 1, //[mir]~ ERROR (Mir) [E0503]\n+        Foo::B => 1, //[mir]~ ERROR [E0503]\n         _ => 2,\n         Foo::A(x) => x //[ast]~ ERROR [E0503]\n-                       //[mir]~^ ERROR (Ast) [E0503]\n-                       //[mir]~| ERROR (Mir) [E0503]\n+                       //[mir]~^ ERROR [E0503]\n     };\n }\n \n@@ -33,11 +32,9 @@ fn main() {\n     let mut x = 1;\n     let _x = &mut x;\n     let _ = match x {\n-        x => x + 1, //[ast]~ ERROR E0503\n-                    //[mir]~^ ERROR (Mir) [E0503]\n-                    //[mir]~| ERROR (Ast) [E0503]\n+        x => x + 1, //[ast]~ ERROR [E0503]\n+                    //[mir]~^ ERROR [E0503]\n         y => y + 2, //[ast]~ ERROR [E0503]\n-                    //[mir]~^ ERROR (Mir) [E0503]\n-                    //[mir]~| ERROR (Ast) [E0503]\n+                    //[mir]~^ ERROR [E0503]\n     };\n }"}, {"sha": "32a573911ececba1563ab3300cb441c1f9a3ff30", "filename": "src/test/compile-fail/borrowck/borrowck-match-binding-is-assignment.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-match-binding-is-assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-match-binding-is-assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-match-binding-is-assignment.rs?ref=755fa9c23edf2c790a8efcde6f1f7a11d67f679e", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // revisions: ast mir\n-//[mir]compile-flags: -Zemit-end-regions -Zborrowck-mir\n+//[mir]compile-flags: -Z borrowck=mir\n \n // Test that immutable pattern bindings cannot be reassigned.\n \n@@ -27,40 +27,35 @@ pub fn main() {\n     match 1 {\n         x => {\n             x += 1; //[ast]~ ERROR cannot assign twice to immutable variable `x`\n-                    //[mir]~^ ERROR (Mir) [E0384]\n-                    //[mir]~| ERROR (Ast) [E0384]\n+                    //[mir]~^ ERROR [E0384]\n         }\n     }\n \n     match E::Foo(1) {\n         E::Foo(x) => {\n             x += 1; //[ast]~ ERROR cannot assign twice to immutable variable `x`\n-                    //[mir]~^ ERROR (Mir) [E0384]\n-                    //[mir]~| ERROR (Ast) [E0384]\n+                    //[mir]~^ ERROR [E0384]\n         }\n     }\n \n     match (S { bar: 1 }) {\n         S { bar: x } => {\n             x += 1; //[ast]~ ERROR cannot assign twice to immutable variable `x`\n-                    //[mir]~^ ERROR (Mir) [E0384]\n-                    //[mir]~| ERROR (Ast) [E0384]\n+                    //[mir]~^ ERROR [E0384]\n         }\n     }\n \n     match (1,) {\n         (x,) => {\n             x += 1; //[ast]~ ERROR cannot assign twice to immutable variable `x`\n-                    //[mir]~^ ERROR (Mir) [E0384]\n-                    //[mir]~| ERROR (Ast) [E0384]\n+                    //[mir]~^ ERROR [E0384]\n         }\n     }\n \n     match [1,2,3] {\n         [x,_,_] => {\n             x += 1; //[ast]~ ERROR cannot assign twice to immutable variable `x`\n-                    //[mir]~^ ERROR (Mir) [E0384]\n-                    //[mir]~| ERROR (Ast) [E0384]\n+                    //[mir]~^ ERROR [E0384]\n         }\n     }\n }"}, {"sha": "5fdde484f82203627e3f10222194e1329af6ac97", "filename": "src/test/compile-fail/borrowck/borrowck-move-in-irrefut-pat.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-move-in-irrefut-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-move-in-irrefut-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-move-in-irrefut-pat.rs?ref=755fa9c23edf2c790a8efcde6f1f7a11d67f679e", "patch": "@@ -9,27 +9,24 @@\n // except according to those terms.\n \n // revisions: ast mir\n-//[mir]compile-flags: -Z emit-end-regions -Z borrowck-mir\n+//[mir]compile-flags: -Z borrowck=mir\n \n fn with<F>(f: F) where F: FnOnce(&String) {}\n \n fn arg_item(&_x: &String) {}\n     //[ast]~^ ERROR cannot move out of borrowed content [E0507]\n-    //[mir]~^^ ERROR (Ast) [E0507]\n-    //[mir]~|  ERROR (Mir) [E0507]\n+    //[mir]~^^ ERROR [E0507]\n \n fn arg_closure() {\n     with(|&_x| ())\n     //[ast]~^ ERROR cannot move out of borrowed content [E0507]\n-    //[mir]~^^ ERROR (Ast) [E0507]\n-    //[mir]~|  ERROR (Mir) [E0507]\n+    //[mir]~^^ ERROR [E0507]\n }\n \n fn let_pat() {\n     let &_x = &\"hi\".to_string();\n     //[ast]~^ ERROR cannot move out of borrowed content [E0507]\n-    //[mir]~^^ ERROR (Ast) [E0507]\n-    //[mir]~|  ERROR (Mir) [E0507]\n+    //[mir]~^^ ERROR [E0507]\n }\n \n pub fn main() {}"}, {"sha": "af9202d8d7792e781461a44e9e45df906c97b263", "filename": "src/test/compile-fail/borrowck/borrowck-move-out-of-overloaded-auto-deref.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-move-out-of-overloaded-auto-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-move-out-of-overloaded-auto-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-move-out-of-overloaded-auto-deref.rs?ref=755fa9c23edf2c790a8efcde6f1f7a11d67f679e", "patch": "@@ -9,13 +9,12 @@\n // except according to those terms.\n \n // revisions: ast mir\n-//[mir]compile-flags: -Z emit-end-regions -Z borrowck-mir\n+//[mir]compile-flags: -Z borrowck=mir\n \n use std::rc::Rc;\n \n pub fn main() {\n     let _x = Rc::new(vec![1, 2]).into_iter();\n     //[ast]~^ ERROR cannot move out of borrowed content [E0507]\n-    //[mir]~^^ ERROR (Ast) [E0507]\n-    //[mir]~|  ERROR (Mir) [E0507]\n+    //[mir]~^^ ERROR [E0507]\n }"}, {"sha": "79eb68c95a037b11bb152ae829de474850ac368c", "filename": "src/test/compile-fail/borrowck/borrowck-move-out-of-static-item.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-move-out-of-static-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-move-out-of-static-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-move-out-of-static-item.rs?ref=755fa9c23edf2c790a8efcde6f1f7a11d67f679e", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // revisions: ast mir\n-//[mir]compile-flags: -Z emit-end-regions -Z borrowck-mir\n+//[mir]compile-flags: -Z borrowck=mir\n \n // Ensure that moves out of static items is forbidden\n \n@@ -26,6 +26,5 @@ fn test(f: Foo) {\n \n fn main() {\n     test(BAR); //[ast]~ ERROR cannot move out of static item [E0507]\n-               //[mir]~^ ERROR (Ast) [E0507]\n-               //[mir]~| ERROR (Mir) [E0507]\n+               //[mir]~^ ERROR [E0507]\n }"}, {"sha": "8e1f7c72914749e34b008a40f88f37880f9d3292", "filename": "src/test/compile-fail/borrowck/borrowck-move-out-of-struct-with-dtor.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-move-out-of-struct-with-dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-move-out-of-struct-with-dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-move-out-of-struct-with-dtor.rs?ref=755fa9c23edf2c790a8efcde6f1f7a11d67f679e", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // revisions: ast mir\n-//[mir]compile-flags: -Z emit-end-regions -Z borrowck-mir\n+//[mir]compile-flags: -Z borrowck=mir\n \n struct S {f:String}\n impl Drop for S {\n@@ -20,22 +20,19 @@ fn move_in_match() {\n     match (S {f:\"foo\".to_string()}) {\n         S {f:_s} => {}\n         //[ast]~^ ERROR cannot move out of type `S`, which implements the `Drop` trait [E0509]\n-        //[mir]~^^ ERROR (Ast) [E0509]\n-        //[mir]~|  ERROR (Mir) [E0509]\n+        //[mir]~^^ ERROR [E0509]\n     }\n }\n \n fn move_in_let() {\n     let S {f:_s} = S {f:\"foo\".to_string()};\n     //[ast]~^ ERROR cannot move out of type `S`, which implements the `Drop` trait [E0509]\n-    //[mir]~^^ ERROR (Ast) [E0509]\n-    //[mir]~|  ERROR (Mir) [E0509]\n+    //[mir]~^^ ERROR [E0509]\n }\n \n fn move_in_fn_arg(S {f:_s}: S) {\n     //[ast]~^ ERROR cannot move out of type `S`, which implements the `Drop` trait [E0509]\n-    //[mir]~^^ ERROR (Ast) [E0509]\n-    //[mir]~|  ERROR (Mir) [E0509]\n+    //[mir]~^^ ERROR [E0509]\n }\n \n fn main() {}"}, {"sha": "6896d166e7a4aee9267751a803495fb93cb9ad61", "filename": "src/test/compile-fail/borrowck/borrowck-mut-borrow-linear-errors.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-mut-borrow-linear-errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-mut-borrow-linear-errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-mut-borrow-linear-errors.rs?ref=755fa9c23edf2c790a8efcde6f1f7a11d67f679e", "patch": "@@ -13,26 +13,23 @@\n // down to O(n) errors (for n problem lines), instead of O(n^2) errors.\n \n // revisions: ast mir\n-//[mir]compile-flags: -Z emit-end-regions -Z borrowck-mir\n+//[mir]compile-flags: -Z borrowck=mir\n \n fn main() {\n     let mut x = 1;\n     let mut addr;\n     loop {\n         match 1 {\n             1 => { addr = &mut x; } //[ast]~ ERROR [E0499]\n-            //[mir]~^ ERROR (Ast) [E0499]\n-            //[mir]~| ERROR (Mir) [E0499]\n+            //[mir]~^ ERROR [E0499]\n             2 => { addr = &mut x; } //[ast]~ ERROR [E0499]\n-            //[mir]~^ ERROR (Ast) [E0499]\n-            //[mir]~| ERROR (Mir) [E0506]\n-            //[mir]~| ERROR (Mir) [E0499]\n-            //[mir]~| ERROR (Mir) [E0499]\n+            //[mir]~^ ERROR [E0506]\n+            //[mir]~| ERROR [E0499]\n+            //[mir]~| ERROR [E0499]\n             _ => { addr = &mut x; } //[ast]~ ERROR [E0499]\n-            //[mir]~^ ERROR (Ast) [E0499]\n-            //[mir]~| ERROR (Mir) [E0506]\n-            //[mir]~| ERROR (Mir) [E0499]\n-            //[mir]~| ERROR (Mir) [E0499]\n+            //[mir]~^ ERROR [E0506]\n+            //[mir]~| ERROR [E0499]\n+            //[mir]~| ERROR [E0499]\n         }\n     }\n }"}, {"sha": "931d053ae7b9f87477e5f23865a7c3efd574cca2", "filename": "src/test/compile-fail/borrowck/borrowck-overloaded-index-and-overloaded-deref.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-overloaded-index-and-overloaded-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-overloaded-index-and-overloaded-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-overloaded-index-and-overloaded-deref.rs?ref=755fa9c23edf2c790a8efcde6f1f7a11d67f679e", "patch": "@@ -14,7 +14,7 @@\n // here is rather subtle. Issue #20232.\n \n // revisions: ast mir\n-//[mir]compile-flags: -Z emit-end-regions -Z borrowck-mir\n+//[mir]compile-flags: -Z borrowck=mir\n \n use std::ops::{Deref, Index};\n \n@@ -43,8 +43,7 @@ fn main() {\n     let i = &v[0].f;\n     v = MyVec { x: MyPtr { x: Foo { f: 23 } } };\n     //[ast]~^ ERROR cannot assign to `v`\n-    //[mir]~^^ ERROR cannot assign to `v` because it is borrowed (Ast)\n-    //[mir]~| ERROR cannot assign to `v` because it is borrowed (Mir)\n+    //[mir]~^^ ERROR cannot assign to `v` because it is borrowed\n     read(*i);\n }\n "}, {"sha": "edffa9a8311acd5533b24ff632e5d6e555c04289", "filename": "src/test/compile-fail/borrowck/borrowck-overloaded-index-ref-index.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-overloaded-index-ref-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-overloaded-index-ref-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-overloaded-index-ref-index.rs?ref=755fa9c23edf2c790a8efcde6f1f7a11d67f679e", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // revisions: ast mir\n-//[mir]compile-flags: -Z emit-end-regions -Z borrowck-mir\n+//[mir]compile-flags: -Z borrowck=mir\n \n use std::ops::{Index, IndexMut};\n \n@@ -61,17 +61,14 @@ fn main() {\n     let rs = &mut s;\n     println!(\"{}\", f[&s]);\n     //[ast]~^ ERROR cannot borrow `s` as immutable because it is also borrowed as mutable\n-    //[mir]~^^ ERROR cannot borrow `s` as immutable because it is also borrowed as mutable (Ast)\n-    //[mir]~| ERROR cannot borrow `s` as immutable because it is also borrowed as mutable (Mir)\n+    //[mir]~^^ ERROR cannot borrow `s` as immutable because it is also borrowed as mutable\n     f[&s] = 10;\n     //[ast]~^ ERROR cannot borrow `s` as immutable because it is also borrowed as mutable\n-    //[mir]~^^ ERROR cannot borrow `s` as immutable because it is also borrowed as mutable (Ast)\n-    //[mir]~| ERROR cannot borrow `s` as immutable because it is also borrowed as mutable (Mir)\n+    //[mir]~^^ ERROR cannot borrow `s` as immutable because it is also borrowed as mutable\n     let s = Bar {\n         x: 1,\n     };\n     s[2] = 20;\n     //[ast]~^ ERROR cannot assign to immutable indexed content\n-    //[mir]~^^ ERROR cannot assign to immutable indexed content\n     // FIXME Error for MIR\n }"}, {"sha": "0f3a841821080a9748b3a12abde46e039108cde3", "filename": "src/test/compile-fail/borrowck/borrowck-pat-reassign-binding.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-pat-reassign-binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-pat-reassign-binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-pat-reassign-binding.rs?ref=755fa9c23edf2c790a8efcde6f1f7a11d67f679e", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // revisions: ast mir\n-//[mir]compile-flags: -Z emit-end-regions -Z borrowck-mir\n+//[mir]compile-flags: -Z borrowck=mir\n \n fn main() {\n     let mut x: Option<isize> = None;\n@@ -21,8 +21,7 @@ fn main() {\n       Some(ref i) => {\n           // But on this branch, `i` is an outstanding borrow\n           x = Some(*i+1); //[ast]~ ERROR cannot assign to `x`\n-                          //[mir]~^ ERROR cannot assign to `x` because it is borrowed (Ast)\n-                          //[mir]~| ERROR cannot assign to `x` because it is borrowed (Mir)\n+                          //[mir]~^ ERROR cannot assign to `x` because it is borrowed\n       }\n     }\n     x.clone(); // just to prevent liveness warnings"}, {"sha": "9971b1d0915d68ab0353d0e3f678e8f30d05967e", "filename": "src/test/compile-fail/borrowck/borrowck-storage-dead.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-storage-dead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-storage-dead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-storage-dead.rs?ref=755fa9c23edf2c790a8efcde6f1f7a11d67f679e", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: -Z emit-end-regions -Z borrowck-mir\n+// compile-flags: -Z borrowck=compare\n \n fn ok() {\n     loop {"}, {"sha": "f90651687a53fb1419510f887abc1c2029e9c97a", "filename": "src/test/compile-fail/borrowck/borrowck-struct-update-with-dtor.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-struct-update-with-dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-struct-update-with-dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-struct-update-with-dtor.rs?ref=755fa9c23edf2c790a8efcde6f1f7a11d67f679e", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // revisions: ast mir\n-//[mir]compile-flags: -Z emit-end-regions -Z borrowck-mir\n+//[mir]compile-flags: -Z borrowck=mir\n \n // Issue 4691: Ensure that functional-struct-update can only copy, not\n // move, when the struct implements Drop.\n@@ -24,15 +24,13 @@ impl Drop for T { fn drop(&mut self) { } }\n fn f(s0:S) {\n     let _s2 = S{a: 2, ..s0};\n     //[ast]~^ error: cannot move out of type `S`, which implements the `Drop` trait\n-    //[mir]~^^ ERROR (Ast) [E0509]\n-    //[mir]~|  ERROR (Mir) [E0509]\n+    //[mir]~^^ ERROR [E0509]\n }\n \n fn g(s0:T) {\n     let _s2 = T{a: 2, ..s0};\n     //[ast]~^ error: cannot move out of type `T`, which implements the `Drop` trait\n-    //[mir]~^^ ERROR (Ast) [E0509]\n-    //[mir]~|  ERROR (Mir) [E0509]\n+    //[mir]~^^ ERROR [E0509]\n }\n \n fn main() { }"}, {"sha": "f2e6d51d064d14ae539c892d277c5604c5a47e69", "filename": "src/test/compile-fail/borrowck/borrowck-thread-local-static-borrow-outlives-fn.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-thread-local-static-borrow-outlives-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-thread-local-static-borrow-outlives-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-thread-local-static-borrow-outlives-fn.rs?ref=755fa9c23edf2c790a8efcde6f1f7a11d67f679e", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // revisions: ast mir\n-//[mir]compile-flags: -Z emit-end-regions -Z borrowck-mir\n+//[mir]compile-flags: -Z borrowck=mir\n \n #![feature(thread_local)]\n \n@@ -19,6 +19,5 @@ static FOO: u8 = 3;\n fn assert_static(_t: &'static u8) {}\n fn main() {\n      assert_static(&FOO); //[ast]~ ERROR [E0597]\n-                          //[mir]~^ ERROR (Ast) [E0597]\n-                          //[mir]~| ERROR (Mir) [E0597]\n+                          //[mir]~^ ERROR [E0597]\n }"}, {"sha": "8163ce29939262307df5682d5657de40259dd212", "filename": "src/test/compile-fail/borrowck/borrowck-unary-move.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-unary-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-unary-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-unary-move.rs?ref=755fa9c23edf2c790a8efcde6f1f7a11d67f679e", "patch": "@@ -10,13 +10,12 @@\n \n // ignore-tidy-linelength\n // revisions: ast mir\n-//[mir]compile-flags: -Z emit-end-regions -Z borrowck-mir\n+//[mir]compile-flags: -Z borrowck=mir\n \n fn foo(x: Box<isize>) -> isize {\n     let y = &*x;\n     free(x); //[ast]~ ERROR cannot move out of `x` because it is borrowed\n-    //[mir]~^ ERROR cannot move out of `x` because it is borrowed (Ast)\n-    //[mir]~| ERROR cannot move out of `x` because it is borrowed (Mir)\n+    //[mir]~^ ERROR cannot move out of `x` because it is borrowed\n     *y\n }\n "}, {"sha": "a214e3c126e8d7af538bae7f4afd9f6a9cf01d08", "filename": "src/test/compile-fail/borrowck/borrowck-uninit-field-access.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-uninit-field-access.rs", "raw_url": "https://github.com/rust-lang/rust/raw/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-uninit-field-access.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-uninit-field-access.rs?ref=755fa9c23edf2c790a8efcde6f1f7a11d67f679e", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // revisions: ast mir\n-//[mir]compile-flags: -Z emit-end-regions -Z borrowck-mir\n+//[mir]compile-flags: -Z borrowck=mir\n \n // Check that do not allow access to fields of uninitialized or moved\n // structs.\n@@ -32,18 +32,15 @@ impl Line { fn consume(self) { } }\n fn main() {\n     let mut a: Point;\n     let _ = a.x + 1; //[ast]~ ERROR use of possibly uninitialized variable: `a.x`\n-                     //[mir]~^ ERROR       [E0381]\n-                     //[mir]~| ERROR (Mir) [E0381]\n+                     //[mir]~^ ERROR [E0381]\n \n     let mut line1 = Line::default();\n     let _moved = line1.origin;\n     let _ = line1.origin.x + 1; //[ast]~ ERROR use of collaterally moved value: `line1.origin.x`\n-                                //[mir]~^       [E0382]\n-                                //[mir]~| (Mir) [E0382]\n+                                //[mir]~^ [E0382]\n \n     let mut line2 = Line::default();\n     let _moved = (line2.origin, line2.middle);\n     line2.consume(); //[ast]~ ERROR use of partially moved value: `line2` [E0382]\n-                     //[mir]~^       [E0382]\n-                     //[mir]~| (Mir) [E0382]\n+                     //[mir]~^ [E0382]\n }"}, {"sha": "c52b1f0bf64c00e9be15bad37ec5a40c558a6a39", "filename": "src/test/compile-fail/borrowck/borrowck-uninit-ref-chain.rs", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-uninit-ref-chain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-uninit-ref-chain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-uninit-ref-chain.rs?ref=755fa9c23edf2c790a8efcde6f1f7a11d67f679e", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // revisions: ast mir\n-//[mir]compile-flags: -Z emit-end-regions -Z borrowck-mir\n+//[mir]compile-flags: -Z borrowck=mir\n \n struct S<X, Y> {\n     x: X,\n@@ -19,42 +19,35 @@ struct S<X, Y> {\n fn main() {\n     let x: &&Box<i32>;\n     let _y = &**x; //[ast]~ ERROR use of possibly uninitialized variable: `**x` [E0381]\n-                   //[mir]~^ (Ast) [E0381]\n-                   //[mir]~| (Mir) [E0381]\n+                   //[mir]~^ [E0381]\n \n     let x: &&S<i32, i32>;\n     let _y = &**x; //[ast]~ ERROR use of possibly uninitialized variable: `**x` [E0381]\n-                   //[mir]~^ (Ast) [E0381]\n-                   //[mir]~| (Mir) [E0381]\n+                   //[mir]~^ [E0381]\n \n     let x: &&i32;\n     let _y = &**x; //[ast]~ ERROR use of possibly uninitialized variable: `**x` [E0381]\n-                   //[mir]~^ (Ast) [E0381]\n-                   //[mir]~| (Mir) [E0381]\n+                   //[mir]~^ [E0381]\n \n \n     let mut a: S<i32, i32>;\n     a.x = 0;\n     let _b = &a.x; //[ast]~ ERROR use of possibly uninitialized variable: `a.x` [E0381]\n-                   //[mir]~^ ERROR (Ast) [E0381]\n                    // (deliberately *not* an error under MIR-borrowck)\n \n     let mut a: S<&&i32, &&i32>;\n     a.x = &&0;\n     let _b = &**a.x; //[ast]~ ERROR use of possibly uninitialized variable: `**a.x` [E0381]\n-                     //[mir]~^ ERROR (Ast) [E0381]\n                      // (deliberately *not* an error under MIR-borrowck)\n \n \n     let mut a: S<i32, i32>;\n     a.x = 0;\n     let _b = &a.y; //[ast]~ ERROR use of possibly uninitialized variable: `a.y` [E0381]\n-                   //[mir]~^ ERROR (Ast) [E0381]\n-                   //[mir]~| ERROR (Mir) [E0381]\n+                   //[mir]~^ ERROR [E0381]\n \n     let mut a: S<&&i32, &&i32>;\n     a.x = &&0;\n     let _b = &**a.y; //[ast]~ ERROR use of possibly uninitialized variable: `**a.y` [E0381]\n-                     //[mir]~^ ERROR (Ast) [E0381]\n-                     //[mir]~| ERROR (Mir) [E0381]\n+                     //[mir]~^ ERROR [E0381]\n }"}, {"sha": "975de8b6c41f9cde5ac9cbb6549471c98d7e7c4c", "filename": "src/test/compile-fail/borrowck/borrowck-union-borrow.rs", "status": "modified", "additions": 7, "deletions": 19, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-union-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-union-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-union-borrow.rs?ref=755fa9c23edf2c790a8efcde6f1f7a11d67f679e", "patch": "@@ -10,7 +10,7 @@\n \n // ignore-tidy-linelength\n // revisions: ast mir\n-//[mir]compile-flags: -Z emit-end-regions -Z borrowck-mir\n+//[mir]compile-flags: -Z borrowck=mir\n \n #[derive(Clone, Copy)]\n union U {\n@@ -33,14 +33,12 @@ fn main() {\n         {\n             let ra = &u.a;\n             let rma = &mut u.a; //[ast]~ ERROR cannot borrow `u.a` as mutable because it is also borrowed as immutable\n-                                //[mir]~^ ERROR cannot borrow `u.a` as mutable because it is also borrowed as immutable (Ast)\n-                                //[mir]~| ERROR cannot borrow `u.a` as mutable because it is also borrowed as immutable (Mir)\n+                                //[mir]~^ ERROR cannot borrow `u.a` as mutable because it is also borrowed as immutable\n         }\n         {\n             let ra = &u.a;\n             u.a = 1; //[ast]~ ERROR cannot assign to `u.a` because it is borrowed\n-                     //[mir]~^ ERROR cannot assign to `u.a` because it is borrowed (Ast)\n-                     //[mir]~| ERROR cannot assign to `u.a` because it is borrowed (Mir)\n+                     //[mir]~^ ERROR cannot assign to `u.a` because it is borrowed\n         }\n         // Imm borrow, other field\n         {\n@@ -54,63 +52,53 @@ fn main() {\n         {\n             let ra = &u.a;\n             let rmb = &mut u.b; //[ast]~ ERROR cannot borrow `u` (via `u.b`) as mutable because `u` is also borrowed as immutable (via `u.a`)\n-                                //[mir]~^ ERROR cannot borrow `u` (via `u.b`) as mutable because `u` is also borrowed as immutable (via `u.a`) (Ast)\n                                 // FIXME Error for MIR (needs support for union)\n         }\n         {\n             let ra = &u.a;\n             u.b = 1; //[ast]~ ERROR cannot assign to `u.b` because it is borrowed\n-                     //[mir]~^ ERROR cannot assign to `u.b` because it is borrowed (Ast)\n                      // FIXME Error for MIR (needs support for union)\n         }\n         // Mut borrow, same field\n         {\n             let rma = &mut u.a;\n             let ra = &u.a; //[ast]~ ERROR cannot borrow `u.a` as immutable because it is also borrowed as mutable\n-                         //[mir]~^ ERROR cannot borrow `u.a` as immutable because it is also borrowed as mutable (Ast)\n-                         //[mir]~| ERROR cannot borrow `u.a` as immutable because it is also borrowed as mutable (Mir)\n+                         //[mir]~^ ERROR cannot borrow `u.a` as immutable because it is also borrowed as mutable\n         }\n         {\n             let ra = &mut u.a;\n             let a = u.a; //[ast]~ ERROR cannot use `u.a` because it was mutably borrowed\n-                         //[mir]~^ ERROR cannot use `u.a` because it was mutably borrowed (Ast)\n-                         //[mir]~| ERROR cannot use `u.a` because it was mutably borrowed (Mir)\n+                         //[mir]~^ ERROR cannot use `u.a` because it was mutably borrowed\n         }\n         {\n             let rma = &mut u.a;\n             let rma2 = &mut u.a; //[ast]~ ERROR cannot borrow `u.a` as mutable more than once at a time\n-                                 //[mir]~^ ERROR cannot borrow `u.a` as mutable more than once at a time (Ast)\n-                                 //[mir]~| ERROR cannot borrow `u.a` as mutable more than once at a time (Mir)\n+                                 //[mir]~^ ERROR cannot borrow `u.a` as mutable more than once at a time\n         }\n         {\n             let rma = &mut u.a;\n             u.a = 1; //[ast]~ ERROR cannot assign to `u.a` because it is borrowed\n-                     //[mir]~^ ERROR cannot assign to `u.a` because it is borrowed (Ast)\n-                     //[mir]~| ERROR cannot assign to `u.a` because it is borrowed (Mir)\n+                     //[mir]~^ ERROR cannot assign to `u.a` because it is borrowed\n         }\n         // Mut borrow, other field\n         {\n             let rma = &mut u.a;\n             let rb = &u.b; //[ast]~ ERROR cannot borrow `u` (via `u.b`) as immutable because `u` is also borrowed as mutable (via `u.a`)\n-                           //[mir]~^ ERROR cannot borrow `u` (via `u.b`) as immutable because `u` is also borrowed as mutable (via `u.a`) (Ast)\n                            // FIXME Error for MIR (needs support for union)\n         }\n         {\n             let ra = &mut u.a;\n             let b = u.b; //[ast]~ ERROR cannot use `u.b` because it was mutably borrowed\n-                         //[mir]~^ ERROR cannot use `u.b` because it was mutably borrowed (Ast)\n                          // FIXME Error for MIR (needs support for union)\n         }\n         {\n             let rma = &mut u.a;\n             let rmb2 = &mut u.b; //[ast]~ ERROR cannot borrow `u` (via `u.b`) as mutable more than once at a time\n-                                 //[mir]~^ ERROR cannot borrow `u` (via `u.b`) as mutable more than once at a time (Ast)\n                                  // FIXME Error for MIR (needs support for union)\n         }\n         {\n             let rma = &mut u.a;\n             u.b = 1; //[ast]~ ERROR cannot assign to `u.b` because it is borrowed\n-                     //[mir]~^ ERROR cannot assign to `u.b` because it is borrowed (Ast)\n                      // FIXME Error for MIR (needs support for union)\n         }\n     }"}, {"sha": "eb99f78f461f41129eab52f3a4bc3e0aaf8d81b2", "filename": "src/test/compile-fail/borrowck/borrowck-use-in-index-lvalue.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-use-in-index-lvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-use-in-index-lvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-use-in-index-lvalue.rs?ref=755fa9c23edf2c790a8efcde6f1f7a11d67f679e", "patch": "@@ -9,18 +9,16 @@\n // except according to those terms.\n \n // revisions: ast mir\n-//[mir]compile-flags: -Z emit-end-regions -Z borrowck-mir\n+//[mir]compile-flags: -Z borrowck=mir\n \n fn test() {\n     let w: &mut [isize];\n     w[5] = 0; //[ast]~ ERROR use of possibly uninitialized variable: `*w` [E0381]\n-              //[mir]~^ ERROR (Ast) [E0381]\n-              //[mir]~| ERROR (Mir) [E0381]\n+              //[mir]~^ ERROR [E0381]\n \n     let mut w: &mut [isize];\n     w[5] = 0; //[ast]~ ERROR use of possibly uninitialized variable: `*w` [E0381]\n-              //[mir]~^ ERROR (Ast) [E0381]\n-              //[mir]~| ERROR (Mir) [E0381]\n+              //[mir]~^ ERROR [E0381]\n }\n \n fn main() { test(); }"}, {"sha": "57c2d508356bc5610ffce203926b0595168df92d", "filename": "src/test/compile-fail/borrowck/borrowck-use-uninitialized-in-cast-trait.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-use-uninitialized-in-cast-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-use-uninitialized-in-cast-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-use-uninitialized-in-cast-trait.rs?ref=755fa9c23edf2c790a8efcde6f1f7a11d67f679e", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // revisions: ast mir\n-//[mir]compile-flags: -Z emit-end-regions -Z borrowck-mir\n+//[mir]compile-flags: -Z borrowck=mir\n \n // Variation on `borrowck-use-uninitialized-in-cast` in which we do a\n // trait cast from an uninitialized source. Issue #20791.\n@@ -20,6 +20,5 @@ impl Foo for i32 { }\n fn main() {\n     let x: &i32;\n     let y = x as *const Foo; //[ast]~ ERROR use of possibly uninitialized variable: `*x`\n-                             //[mir]~^ ERROR (Ast) [E0381]\n-                             //[mir]~| ERROR (Mir) [E0381]\n+                             //[mir]~^ ERROR [E0381]\n }"}, {"sha": "dbc20d020577eafc4204c7cb25a14939013d18d2", "filename": "src/test/compile-fail/borrowck/borrowck-use-uninitialized-in-cast.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-use-uninitialized-in-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-use-uninitialized-in-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-use-uninitialized-in-cast.rs?ref=755fa9c23edf2c790a8efcde6f1f7a11d67f679e", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // revisions: ast mir\n-//[mir]compile-flags: -Z emit-end-regions -Z borrowck-mir\n+//[mir]compile-flags: -Z borrowck=mir\n \n // Check that we detect unused values that are cast to other things.\n // The problem was specified to casting to `*`, as creating unsafe\n@@ -18,6 +18,5 @@\n fn main() {\n     let x: &i32;\n     let y = x as *const i32; //[ast]~ ERROR use of possibly uninitialized variable: `*x` [E0381]\n-                             //[mir]~^ ERROR (Ast) [E0381]\n-                             //[mir]~| ERROR (Mir) [E0381]\n+                             //[mir]~^ ERROR [E0381]\n }"}, {"sha": "304a41c14ed330f6e753ec0e5025595d54420dee", "filename": "src/test/compile-fail/borrowck/borrowck-vec-pattern-move-tail.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-vec-pattern-move-tail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-vec-pattern-move-tail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-vec-pattern-move-tail.rs?ref=755fa9c23edf2c790a8efcde6f1f7a11d67f679e", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// revisions: ast mir\n-//[mir]compile-flags: -Z emit-end-regions -Z borrowck-mir\n+// revisions: ast cmp\n+//[cmp]compile-flags: -Z borrowck=compare\n \n #![feature(slice_patterns)]\n \n@@ -21,7 +21,7 @@ fn main() {\n     };\n     println!(\"t[0]: {}\", t[0]);\n     a[2] = 0; //[ast]~ ERROR cannot assign to `a[..]` because it is borrowed\n-              //[mir]~^ ERROR cannot assign to `a[..]` because it is borrowed (Ast)\n+              //[cmp]~^ ERROR cannot assign to `a[..]` because it is borrowed (Ast)\n               // FIXME Error for MIR (error missed)\n     println!(\"t[0]: {}\", t[0]);\n     t[0];"}, {"sha": "508e09318ae112a30589496fb54ef626e68afe2d", "filename": "src/test/compile-fail/borrowck/move-in-static-initializer-issue-38520.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fmove-in-static-initializer-issue-38520.rs", "raw_url": "https://github.com/rust-lang/rust/raw/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fmove-in-static-initializer-issue-38520.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fmove-in-static-initializer-issue-38520.rs?ref=755fa9c23edf2c790a8efcde6f1f7a11d67f679e", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // revisions: ast mir\n-//[mir]compile-flags: -Z emit-end-regions -Z borrowck-mir\n+//[mir]compile-flags: -Z borrowck=mir\n \n // Regression test for #38520. Check that moves of `Foo` are not\n // permitted as `Foo` is not copy (even in a static/const\n@@ -25,11 +25,9 @@ const fn get(x: Foo) -> usize {\n \n const X: Foo = Foo(22);\n static Y: usize = get(*&X); //[ast]~ ERROR E0507\n-                            //[mir]~^ ERROR (Ast) [E0507]\n-                            //[mir]~| ERROR (Mir) [E0507]\n+                            //[mir]~^ ERROR [E0507]\n const Z: usize = get(*&X); //[ast]~ ERROR E0507\n-                           //[mir]~^ ERROR (Ast) [E0507]\n-                           //[mir]~| ERROR (Mir) [E0507]\n+                           //[mir]~^ ERROR [E0507]\n \n fn main() {\n }"}, {"sha": "0487b03171adbc2abd1e57fcb155309ac0baea43", "filename": "src/test/compile-fail/coerce-overloaded-autoderef.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fcompile-fail%2Fcoerce-overloaded-autoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fcompile-fail%2Fcoerce-overloaded-autoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoerce-overloaded-autoderef.rs?ref=755fa9c23edf2c790a8efcde6f1f7a11d67f679e", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // revisions: ast mir\n-//[mir]compile-flags: -Z emit-end-regions -Z borrowck-mir\n+//[mir]compile-flags: -Z borrowck=mir\n \n fn borrow_mut<T>(x: &mut T) -> &mut T { x }\n fn borrow<T>(x: &T) -> &T { x }\n@@ -21,31 +21,27 @@ fn double_mut_borrow<T>(x: &mut Box<T>) {\n     let y = borrow_mut(x);\n     let z = borrow_mut(x);\n     //[ast]~^ ERROR cannot borrow `*x` as mutable more than once at a time\n-    //[mir]~^^ ERROR cannot borrow `*x` as mutable more than once at a time (Ast)\n-    //[mir]~| ERROR cannot borrow `*x` as mutable more than once at a time (Mir)\n+    //[mir]~^^ ERROR cannot borrow `*x` as mutable more than once at a time\n }\n \n fn double_imm_borrow(x: &mut Box<i32>) {\n     let y = borrow(x);\n     let z = borrow(x);\n     **x += 1;\n     //[ast]~^ ERROR cannot assign to `**x` because it is borrowed\n-    //[mir]~^^ ERROR cannot assign to `**x` because it is borrowed (Ast)\n-    //[mir]~| ERROR cannot assign to `**x` because it is borrowed (Mir)\n+    //[mir]~^^ ERROR cannot assign to `**x` because it is borrowed\n }\n \n fn double_mut_borrow2<T>(x: &mut Box<T>) {\n     borrow_mut2(x, x);\n     //[ast]~^ ERROR cannot borrow `*x` as mutable more than once at a time\n-    //[mir]~^^ ERROR cannot borrow `*x` as mutable more than once at a time (Ast)\n-    //[mir]~| ERROR cannot borrow `*x` as mutable more than once at a time (Mir)\n+    //[mir]~^^ ERROR cannot borrow `*x` as mutable more than once at a time\n }\n \n fn double_borrow2<T>(x: &mut Box<T>) {\n     borrow2(x, x);\n     //[ast]~^ ERROR cannot borrow `*x` as immutable because it is also borrowed as mutable\n-    //[mir]~^^ ERROR cannot borrow `*x` as immutable because it is also borrowed as mutable (Ast)\n-    //[mir]~| ERROR cannot borrow `*x` as immutable because it is also borrowed as mutable (Mir)\n+    //[mir]~^^ ERROR cannot borrow `*x` as immutable because it is also borrowed as mutable\n }\n \n pub fn main() {}"}, {"sha": "5f5b70dda5e8170fbe4e18035272a3ee95c102c9", "filename": "src/test/compile-fail/hrtb-identity-fn-borrows.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fcompile-fail%2Fhrtb-identity-fn-borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fcompile-fail%2Fhrtb-identity-fn-borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fhrtb-identity-fn-borrows.rs?ref=755fa9c23edf2c790a8efcde6f1f7a11d67f679e", "patch": "@@ -12,7 +12,7 @@\n // of the output to the region of the input.\n \n // revisions: ast mir\n-//[mir]compile-flags: -Z emit-end-regions -Z borrowck-mir\n+//[mir]compile-flags: -Z borrowck=mir\n \n trait FnLike<A,R> {\n     fn call(&self, arg: A) -> R;\n@@ -25,8 +25,7 @@ fn call_repeatedly<F>(f: F)\n     let mut x = 3;\n     let y = f.call(&x);\n     x = 5; //[ast]~ ERROR cannot assign\n-           //[mir]~^ ERROR cannot assign to `x` because it is borrowed (Ast)\n-           //[mir]~| ERROR cannot assign to `x` because it is borrowed (Mir)\n+           //[mir]~^ ERROR cannot assign to `x` because it is borrowed\n \n     // Result is not stored: can re-assign `x`\n     let mut x = 3;"}, {"sha": "9e12d5b5de1579044c9f262fe2714364673989bd", "filename": "src/test/compile-fail/issue-25579.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fcompile-fail%2Fissue-25579.rs", "raw_url": "https://github.com/rust-lang/rust/raw/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fcompile-fail%2Fissue-25579.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-25579.rs?ref=755fa9c23edf2c790a8efcde6f1f7a11d67f679e", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // revisions: ast mir\n-//[mir]compile-flags: -Z emit-end-regions -Z borrowck-mir\n+//[mir]compile-flags: -Z borrowck=mir\n \n enum Sexpression {\n     Num(()),\n@@ -20,15 +20,13 @@ fn causes_ice(mut l: &mut Sexpression) {\n     loop { match l {\n         &mut Sexpression::Num(ref mut n) => {},\n         &mut Sexpression::Cons(ref mut expr) => { //[ast]~ ERROR [E0499]\n-                                                  //[mir]~^ ERROR (Ast) [E0499]\n-                                                  //[mir]~| ERROR (Mir) [E0506]\n-                                                  //[mir]~| ERROR (Mir) [E0499]\n+                                                  //[mir]~^ ERROR [E0506]\n+                                                  //[mir]~| ERROR [E0499]\n             l = &mut **expr; //[ast]~ ERROR [E0506]\n-                             //[mir]~^ ERROR (Ast) [E0506]\n-                             //[mir]~| ERROR (Mir) [E0506]\n-                             //[mir]~| ERROR (Mir) [E0506]\n-                             //[mir]~| ERROR (Mir) [E0499]\n-                             //[mir]~| ERROR (Mir) [E0499]\n+                             //[mir]~^ ERROR [E0506]\n+                             //[mir]~| ERROR [E0506]\n+                             //[mir]~| ERROR [E0499]\n+                             //[mir]~| ERROR [E0499]\n         }\n     }}\n }"}, {"sha": "33a9b1e926cf5dd6cfdead7fbb8317c55886cf0c", "filename": "src/test/compile-fail/issue-36082.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fcompile-fail%2Fissue-36082.rs", "raw_url": "https://github.com/rust-lang/rust/raw/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fcompile-fail%2Fissue-36082.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-36082.rs?ref=755fa9c23edf2c790a8efcde6f1f7a11d67f679e", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // revisions: ast mir\n-//[mir]compile-flags: -Z emit-end-regions -Z borrowck-mir\n+//[mir]compile-flags: -Z borrowck=mir\n \n use std::cell::RefCell;\n \n@@ -23,16 +23,11 @@ fn main() {\n     //[ast]~| NOTE temporary value dropped here while still borrowed\n     //[ast]~| NOTE temporary value created here\n     //[ast]~| NOTE consider using a `let` binding to increase its lifetime\n-    //[mir]~^^^^^ ERROR borrowed value does not live long enough (Ast) [E0597]\n-    //[mir]~| NOTE temporary value dropped here while still borrowed\n-    //[mir]~| NOTE temporary value created here\n-    //[mir]~| NOTE consider using a `let` binding to increase its lifetime\n-    //[mir]~| ERROR borrowed value does not live long enough (Mir) [E0597]\n+    //[mir]~^^^^^ ERROR borrowed value does not live long enough [E0597]\n     //[mir]~| NOTE temporary value dropped here while still borrowed\n     //[mir]~| NOTE temporary value created here\n     //[mir]~| NOTE consider using a `let` binding to increase its lifetime\n     println!(\"{}\", val);\n }\n //[ast]~^ NOTE temporary value needs to live until here\n //[mir]~^^ NOTE temporary value needs to live until here\n-//[mir]~| NOTE temporary value needs to live until here"}, {"sha": "77f4e0bfd891bdb25a7f9d3c29240573233c98d4", "filename": "src/test/compile-fail/issue-5500-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fcompile-fail%2Fissue-5500-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fcompile-fail%2Fissue-5500-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5500-1.rs?ref=755fa9c23edf2c790a8efcde6f1f7a11d67f679e", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // revisions: ast mir\n-//[mir]compile-flags: -Z emit-end-regions -Z borrowck-mir\n+//[mir]compile-flags: -Z borrowck=compare\n \n struct TrieMapIterator<'a> {\n     node: &'a usize\n@@ -18,7 +18,7 @@ struct TrieMapIterator<'a> {\n fn main() {\n     let a = 5;\n     let _iter = TrieMapIterator{node: &a};\n-    _iter.node = & //[ast]~ ERROR cannot assign to immutable field\n+    _iter.node = & //[ast]~ ERROR cannot assign to immutable field `_iter.node`\n                    //[mir]~^ ERROR cannot assign to immutable field `_iter.node` (Ast)\n                    // FIXME Error for MIR\n     panic!()"}, {"sha": "72727cdfe54d2f56b7a9331b8436ef559b3588d7", "filename": "src/test/compile-fail/mut-pattern-internal-mutability.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fcompile-fail%2Fmut-pattern-internal-mutability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fcompile-fail%2Fmut-pattern-internal-mutability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmut-pattern-internal-mutability.rs?ref=755fa9c23edf2c790a8efcde6f1f7a11d67f679e", "patch": "@@ -9,15 +9,14 @@\n // except according to those terms.\n \n // revisions: ast mir\n-//[mir]compile-flags: -Z emit-end-regions -Z borrowck-mir\n+//[mir]compile-flags: -Z borrowck=mir\n \n fn main() {\n     let foo = &mut 1;\n \n     let &mut x = foo;\n     x += 1; //[ast]~ ERROR cannot assign twice to immutable variable\n-            //[mir]~^ ERROR cannot assign twice to immutable variable `x` (Ast)\n-            //[mir]~| ERROR cannot assign twice to immutable variable `x` (Mir)\n+            //[mir]~^ ERROR cannot assign twice to immutable variable `x`\n \n     // explicitly mut-ify internals\n     let &mut mut x = foo;\n@@ -26,6 +25,5 @@ fn main() {\n     // check borrowing is detected successfully\n     let &mut ref x = foo;\n     *foo += 1; //[ast]~ ERROR cannot assign to `*foo` because it is borrowed\n-               //[mir]~^ ERROR cannot assign to `*foo` because it is borrowed (Ast)\n-               //[mir]~| ERROR cannot assign to `*foo` because it is borrowed (Mir)\n+               //[mir]~^ ERROR cannot assign to `*foo` because it is borrowed\n }"}, {"sha": "fdc650a072131c4e4f1a46b34b1acab76ee3bec7", "filename": "src/test/compile-fail/nll/loan_ends_mid_block_pair.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fcompile-fail%2Fnll%2Floan_ends_mid_block_pair.rs", "raw_url": "https://github.com/rust-lang/rust/raw/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fcompile-fail%2Fnll%2Floan_ends_mid_block_pair.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnll%2Floan_ends_mid_block_pair.rs?ref=755fa9c23edf2c790a8efcde6f1f7a11d67f679e", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n \n-// compile-flags:-Zborrowck-mir -Znll\n+// compile-flags:-Zborrowck=compare -Znll\n \n #![allow(warnings)]\n #![feature(rustc_attrs)]"}, {"sha": "f22d2fc23e0579eb691d73167a5967797206fa63", "filename": "src/test/compile-fail/nll/loan_ends_mid_block_vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fcompile-fail%2Fnll%2Floan_ends_mid_block_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fcompile-fail%2Fnll%2Floan_ends_mid_block_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnll%2Floan_ends_mid_block_vec.rs?ref=755fa9c23edf2c790a8efcde6f1f7a11d67f679e", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n \n-// compile-flags:-Zborrowck-mir -Znll\n+// compile-flags:-Zborrowck=compare -Znll\n \n #![allow(warnings)]\n #![feature(rustc_attrs)]"}, {"sha": "1c1fc4799c3d1e8b545e3aba0758cd67437d705d", "filename": "src/test/compile-fail/nll/reference-carried-through-struct-field.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fcompile-fail%2Fnll%2Freference-carried-through-struct-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fcompile-fail%2Fnll%2Freference-carried-through-struct-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnll%2Freference-carried-through-struct-field.rs?ref=755fa9c23edf2c790a8efcde6f1f7a11d67f679e", "patch": "@@ -7,8 +7,9 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+\n //revisions: ast mir\n-//[mir] compile-flags: -Z emit-end-regions -Z borrowck-mir -Z nll\n+//[mir] compile-flags: -Z borrowck=mir -Z nll\n \n #![allow(unused_assignments)]\n \n@@ -18,10 +19,9 @@ fn foo() {\n     let mut x = 22;\n     let wrapper = Wrap { w: &mut x };\n     x += 1; //[ast]~ ERROR cannot assign to `x` because it is borrowed [E0506]\n-    //[mir]~^ ERROR cannot assign to `x` because it is borrowed (Ast) [E0506]\n-    //[mir]~^^ ERROR cannot assign to `x` because it is borrowed (Mir) [E0506]\n-    //[mir]~^^^ ERROR cannot use `x` because it was mutably borrowed (Mir) [E0503]\n+    //[mir]~^ ERROR cannot assign to `x` because it is borrowed [E0506]\n+    //[mir]~^^ ERROR cannot use `x` because it was mutably borrowed [E0503]\n     *wrapper.w += 1;\n }\n \n-fn main() { }\n\\ No newline at end of file\n+fn main() { }"}, {"sha": "1128d65af95c5832139ca934347dff5b4ef226e4", "filename": "src/test/compile-fail/nll/region-ends-after-if-condition.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fcompile-fail%2Fnll%2Fregion-ends-after-if-condition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fcompile-fail%2Fnll%2Fregion-ends-after-if-condition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnll%2Fregion-ends-after-if-condition.rs?ref=755fa9c23edf2c790a8efcde6f1f7a11d67f679e", "patch": "@@ -12,7 +12,7 @@\n // in the type of `p` includes the points after `&v[0]` up to (but not\n // including) the call to `use_x`. The `else` branch is not included.\n \n-// compile-flags:-Zborrowck-mir -Znll\n+// compile-flags:-Zborrowck=compare -Znll\n \n #![allow(warnings)]\n #![feature(rustc_attrs)]"}, {"sha": "7ed59ef2a879b9fdb96fda2292d84a609e96da1f", "filename": "src/test/compile-fail/nll/return_from_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fcompile-fail%2Fnll%2Freturn_from_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fcompile-fail%2Fnll%2Freturn_from_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnll%2Freturn_from_loop.rs?ref=755fa9c23edf2c790a8efcde6f1f7a11d67f679e", "patch": "@@ -12,7 +12,7 @@\n // in the type of `p` includes the points after `&v[0]` up to (but not\n // including) the call to `use_x`. The `else` branch is not included.\n \n-// compile-flags:-Zborrowck-mir -Znll\n+// compile-flags:-Zborrowck=compare -Znll\n \n #![allow(warnings)]\n #![feature(rustc_attrs)]"}, {"sha": "6fbc65ce6a71f3a01729e240dab2abb9b1b27cbd", "filename": "src/test/compile-fail/regions-pattern-typing-issue-19997.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fcompile-fail%2Fregions-pattern-typing-issue-19997.rs", "raw_url": "https://github.com/rust-lang/rust/raw/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fcompile-fail%2Fregions-pattern-typing-issue-19997.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-pattern-typing-issue-19997.rs?ref=755fa9c23edf2c790a8efcde6f1f7a11d67f679e", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // revisions: ast mir\n-//[mir]compile-flags: -Z emit-end-regions -Z borrowck-mir\n+//[mir]compile-flags: -Z borrowck=mir\n \n fn main() {\n     let a0 = 0;\n@@ -18,8 +18,7 @@ fn main() {\n     match (&a1,) {\n         (&ref b0,) => {\n             a1 = &f; //[ast]~ ERROR cannot assign\n-                     //[mir]~^ ERROR cannot assign to `a1` because it is borrowed (Ast)\n-                     //[mir]~| ERROR cannot assign to `a1` because it is borrowed (Mir)\n+                     //[mir]~^ ERROR cannot assign to `a1` because it is borrowed\n         }\n     }\n }"}, {"sha": "f5d5bf1e4a64e1efdf1180dcfbdfba94989256ef", "filename": "src/test/mir-opt/end_region_5.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fmir-opt%2Fend_region_5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fmir-opt%2Fend_region_5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_5.rs?ref=755fa9c23edf2c790a8efcde6f1f7a11d67f679e", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // compile-flags: -Z identify_regions -Z span_free_formats -Z emit-end-regions\n-// ignore-tidy-linelength\n \n // Unwinding should EndRegion for in-scope borrows: Borrowing via by-ref closure.\n "}, {"sha": "a59b21473f1e3593be3a824f77acc6dde6d046ce", "filename": "src/test/mir-opt/match_false_edges.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.rs?ref=755fa9c23edf2c790a8efcde6f1f7a11d67f679e", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: -Z emit-end-regions -Z borrowck-mir\n+// compile-flags: -Z borrowck=mir\n \n fn guard() -> bool {\n     false"}, {"sha": "daee3903d770d53bb5679f73cf85f13d0d5f88bd", "filename": "src/test/run-fail/borrowck-local-borrow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Frun-fail%2Fborrowck-local-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Frun-fail%2Fborrowck-local-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fborrowck-local-borrow.rs?ref=755fa9c23edf2c790a8efcde6f1f7a11d67f679e", "patch": "@@ -10,7 +10,7 @@\n // error-pattern:panic 1\n \n // revisions: ast mir\n-//[mir]compile-flags: -Z emit-end-regions -Z borrowck-mir\n+//[mir]compile-flags: -Z borrowck=mir\n \n fn main() {\n     let x = 2;"}, {"sha": "302a7b96bc07d812385f5a99cb8cb2ecc78ca1a5", "filename": "src/test/run-pass/borrowck/borrowck-assignment-to-static-mut.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-assignment-to-static-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-assignment-to-static-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-assignment-to-static-mut.rs?ref=755fa9c23edf2c790a8efcde6f1f7a11d67f679e", "patch": "@@ -10,14 +10,13 @@\n \n // Test taken from #45641 (https://github.com/rust-lang/rust/issues/45641)\n \n-// ignore-tidy-linelength\n // revisions: ast mir\n-//[mir]compile-flags: -Z emit-end-regions -Z borrowck-mir\n+//[mir]compile-flags: -Z borrowck=mir\n \n static mut Y: u32 = 0;\n \n unsafe fn should_ok() {\n     Y = 1;\n }\n \n-fn main() {}\n\\ No newline at end of file\n+fn main() {}"}, {"sha": "de411d3096092c696574be0e78196b72ee17600e", "filename": "src/test/run-pass/borrowck/borrowck-unsafe-static-mutable-borrows.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-unsafe-static-mutable-borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-unsafe-static-mutable-borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-unsafe-static-mutable-borrows.rs?ref=755fa9c23edf2c790a8efcde6f1f7a11d67f679e", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // revisions: ast mir\n-//[mir]compile-flags: -Z emit-end-regions -Z borrowck-mir\n+//[mir]compile-flags: -Z borrowck=mir\n \n // Test file taken from issue 45129 (https://github.com/rust-lang/rust/issues/45129)\n "}, {"sha": "b6946154fa00a0a5870c495b172305b8cf2657fd", "filename": "src/test/ui/borrowck/borrowck-closures-two-mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-two-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-two-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-two-mut.rs?ref=755fa9c23edf2c790a8efcde6f1f7a11d67f679e", "patch": "@@ -12,7 +12,7 @@\n // access to the variable, whether that mutable access be used\n // for direct assignment or for taking mutable ref. Issue #6801.\n \n-// compile-flags: -Z emit-end-regions -Z borrowck-mir\n+// compile-flags: -Z borrowck=compare\n \n #![feature(box_syntax)]\n "}, {"sha": "2e07577c5eadee7a0d8c859215ad2ab89d7dec9d", "filename": "src/test/ui/borrowck/borrowck-reinit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reinit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reinit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reinit.rs?ref=755fa9c23edf2c790a8efcde6f1f7a11d67f679e", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: -Z borrowck-mir -Z emit-end-regions\n+// compile-flags: -Z borrowck=compare\n \n fn main() {\n     let mut x = Box::new(0);"}, {"sha": "e5944e75e424177fad5749b7c110b00e7930d19b", "filename": "src/test/ui/nll/get_default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fui%2Fnll%2Fget_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/755fa9c23edf2c790a8efcde6f1f7a11d67f679e/src%2Ftest%2Fui%2Fnll%2Fget_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fget_default.rs?ref=755fa9c23edf2c790a8efcde6f1f7a11d67f679e", "patch": "@@ -13,7 +13,7 @@\n // a variety of errors from the older, AST-based machinery (notably\n // borrowck), and then we get the NLL error at the end.\n \n-// compile-flags:-Znll -Zborrowck-mir\n+// compile-flags:-Znll -Zborrowck=compare\n \n struct Map {\n }"}]}