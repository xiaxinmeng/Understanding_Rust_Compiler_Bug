{"sha": "b82458818d44dfe5b4b5db38d8113e3f3194506e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4MjQ1ODgxOGQ0NGRmZTViNGI1ZGIzOGQ4MTEzZTNmMzE5NDUwNmU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-05-16T19:32:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-16T19:32:40Z"}, "message": "Merge #8845\n\n8845: Generate the impl block via generate_trait_impl_text_from_impl r=Veykril a=hi-rustin\n\nTry to close https://github.com/rust-analyzer/rust-analyzer/issues/8827\n\nCo-authored-by: hi-rustin <rustin.liu@gmail.com>", "tree": {"sha": "411b4b565105fe1abc33096c56a0bf4316bf49ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/411b4b565105fe1abc33096c56a0bf4316bf49ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b82458818d44dfe5b4b5db38d8113e3f3194506e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgoXNYCRBK7hj4Ov3rIwAAEk0IAJFEhEttMaczc90FT5ivgoLN\n0lfTX3sKqVjrBEe5a6rsM8Eh8vCqY9PHZoq5yvnQ04Qycj2LKM7KcEAMzrS9vlz4\nS/tDCssNyAGqGMk39fw4qZYE7mzZR7WTTbWVw3kJVgA7RxrbVe3dQiYm8MjH//fJ\nQEhMbAuGFKCRmui3e9IXC7m+dU+TC6BDv2YKHng9A2yG8wIqN77st1CIOcY9nJa/\nWHF/uRHTKtrBJnN5s+Ppw4T/5NKluXAdXUluzzsF2sYOoCRrw4rEWrzzIO1lYuXX\nzCtdRx+eoVbvB7OA7g6x5piypnwGl+N0IjW0hfS4dDrYzbNUJZazuSL0mym2bb8=\n=kGlJ\n-----END PGP SIGNATURE-----\n", "payload": "tree 411b4b565105fe1abc33096c56a0bf4316bf49ce\nparent ef6df1d994394e5f2097edfa12d0489762903099\nparent f5ea2a2ab0df1a8ccf9f20d97ca07f9169e70c79\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1621193560 +0000\ncommitter GitHub <noreply@github.com> 1621193560 +0000\n\nMerge #8845\n\n8845: Generate the impl block via generate_trait_impl_text_from_impl r=Veykril a=hi-rustin\n\nTry to close https://github.com/rust-analyzer/rust-analyzer/issues/8827\n\nCo-authored-by: hi-rustin <rustin.liu@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b82458818d44dfe5b4b5db38d8113e3f3194506e", "html_url": "https://github.com/rust-lang/rust/commit/b82458818d44dfe5b4b5db38d8113e3f3194506e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b82458818d44dfe5b4b5db38d8113e3f3194506e/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef6df1d994394e5f2097edfa12d0489762903099", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef6df1d994394e5f2097edfa12d0489762903099", "html_url": "https://github.com/rust-lang/rust/commit/ef6df1d994394e5f2097edfa12d0489762903099"}, {"sha": "f5ea2a2ab0df1a8ccf9f20d97ca07f9169e70c79", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5ea2a2ab0df1a8ccf9f20d97ca07f9169e70c79", "html_url": "https://github.com/rust-lang/rust/commit/f5ea2a2ab0df1a8ccf9f20d97ca07f9169e70c79"}], "stats": {"total": 287, "additions": 275, "deletions": 12}, "files": [{"sha": "bad826366946dc31f95d184f0527e0c845f55ee7", "filename": "crates/ide_assists/src/handlers/generate_default_from_new.rs", "status": "modified", "additions": 275, "deletions": 12, "changes": 287, "blob_url": "https://github.com/rust-lang/rust/blob/b82458818d44dfe5b4b5db38d8113e3f3194506e/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_default_from_new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b82458818d44dfe5b4b5db38d8113e3f3194506e/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_default_from_new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_default_from_new.rs?ref=b82458818d44dfe5b4b5db38d8113e3f3194506e", "patch": "@@ -3,8 +3,10 @@ use crate::{\n     AssistId,\n };\n use ide_db::helpers::FamousDefs;\n+use itertools::Itertools;\n+use stdx::format_to;\n use syntax::{\n-    ast::{self, Impl, NameOwner},\n+    ast::{self, GenericParamsOwner, Impl, NameOwner, TypeBoundsOwner},\n     AstNode,\n };\n \n@@ -65,23 +67,56 @@ pub(crate) fn generate_default_from_new(acc: &mut Assists, ctx: &AssistContext)\n         \"Generate a Default impl from a new fn\",\n         insert_location,\n         move |builder| {\n-            let code = default_fn_node_for_new(impl_);\n+            let default_code = \"    fn default() -> Self {\n+        Self::new()\n+    }\";\n+            let code = generate_trait_impl_text_from_impl(&impl_, \"Default\", default_code);\n             builder.insert(insert_location.end(), code);\n         },\n     )\n }\n \n-fn default_fn_node_for_new(impl_: Impl) -> String {\n-    format!(\n-        \"\n+fn generate_trait_impl_text_from_impl(impl_: &ast::Impl, trait_text: &str, code: &str) -> String {\n+    let generic_params = impl_.generic_param_list();\n+    let mut buf = String::with_capacity(code.len());\n+    buf.push_str(\"\\n\\n\");\n+    buf.push_str(\"impl\");\n+\n+    if let Some(generic_params) = &generic_params {\n+        let lifetimes = generic_params.lifetime_params().map(|lt| format!(\"{}\", lt.syntax()));\n+        let type_params = generic_params.type_params().map(|type_param| {\n+            let mut buf = String::new();\n+            if let Some(it) = type_param.name() {\n+                format_to!(buf, \"{}\", it.syntax());\n+            }\n+            if let Some(it) = type_param.colon_token() {\n+                format_to!(buf, \"{} \", it);\n+            }\n+            if let Some(it) = type_param.type_bound_list() {\n+                format_to!(buf, \"{}\", it.syntax());\n+            }\n+            buf\n+        });\n+        let const_params = generic_params.const_params().map(|t| t.syntax().to_string());\n+        let generics = lifetimes.chain(type_params).chain(const_params).format(\", \");\n+        format_to!(buf, \"<{}>\", generics);\n+    }\n+\n+    buf.push(' ');\n+    buf.push_str(trait_text);\n+    buf.push_str(\" for \");\n+    buf.push_str(&impl_.self_ty().unwrap().syntax().text().to_string());\n+\n+    match impl_.where_clause() {\n+        Some(where_clause) => {\n+            format_to!(buf, \"\\n{}\\n{{\\n{}\\n}}\", where_clause, code);\n+        }\n+        None => {\n+            format_to!(buf, \" {{\\n{}\\n}}\", code);\n+        }\n+    }\n \n-impl Default for {} {{\n-    fn default() -> Self {{\n-        Self::new()\n-    }}\n-}}\",\n-        impl_.self_ty().unwrap().syntax().text()\n-    )\n+    buf\n }\n \n fn is_default_implemented(ctx: &AssistContext, impl_: &Impl) -> bool {\n@@ -175,6 +210,234 @@ impl Default for Test {\n         );\n     }\n \n+    #[test]\n+    fn new_function_with_generic() {\n+        check_pass(\n+            r#\"\n+pub struct Foo<T> {\n+    _bar: *mut T,\n+}\n+\n+impl<T> Foo<T> {\n+    pub fn ne$0w() -> Self {\n+        unimplemented!()\n+    }\n+}\n+\"#,\n+            r#\"\n+pub struct Foo<T> {\n+    _bar: *mut T,\n+}\n+\n+impl<T> Foo<T> {\n+    pub fn new() -> Self {\n+        unimplemented!()\n+    }\n+}\n+\n+impl<T> Default for Foo<T> {\n+    fn default() -> Self {\n+        Self::new()\n+    }\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn new_function_with_generics() {\n+        check_pass(\n+            r#\"\n+pub struct Foo<T, B> {\n+    _tars: *mut T,\n+    _bar: *mut B,\n+}\n+\n+impl<T, B> Foo<T, B> {\n+    pub fn ne$0w() -> Self {\n+        unimplemented!()\n+    }\n+}\n+\"#,\n+            r#\"\n+pub struct Foo<T, B> {\n+    _tars: *mut T,\n+    _bar: *mut B,\n+}\n+\n+impl<T, B> Foo<T, B> {\n+    pub fn new() -> Self {\n+        unimplemented!()\n+    }\n+}\n+\n+impl<T, B> Default for Foo<T, B> {\n+    fn default() -> Self {\n+        Self::new()\n+    }\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn new_function_with_generic_and_bound() {\n+        check_pass(\n+            r#\"\n+pub struct Foo<T> {\n+    t: T,\n+}\n+\n+impl<T: From<i32>> Foo<T> {\n+    pub fn ne$0w() -> Self {\n+        Foo { t: 0.into() }\n+    }\n+}\n+\"#,\n+            r#\"\n+pub struct Foo<T> {\n+    t: T,\n+}\n+\n+impl<T: From<i32>> Foo<T> {\n+    pub fn new() -> Self {\n+        Foo { t: 0.into() }\n+    }\n+}\n+\n+impl<T: From<i32>> Default for Foo<T> {\n+    fn default() -> Self {\n+        Self::new()\n+    }\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn new_function_with_generics_and_bounds() {\n+        check_pass(\n+            r#\"\n+pub struct Foo<T, B> {\n+    _tars: T,\n+    _bar: B,\n+}\n+\n+impl<T: From<i32>, B: From<i64>> Foo<T, B> {\n+    pub fn ne$0w() -> Self {\n+        unimplemented!()\n+    }\n+}\n+\"#,\n+            r#\"\n+pub struct Foo<T, B> {\n+    _tars: T,\n+    _bar: B,\n+}\n+\n+impl<T: From<i32>, B: From<i64>> Foo<T, B> {\n+    pub fn new() -> Self {\n+        unimplemented!()\n+    }\n+}\n+\n+impl<T: From<i32>, B: From<i64>> Default for Foo<T, B> {\n+    fn default() -> Self {\n+        Self::new()\n+    }\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn new_function_with_generic_and_where() {\n+        check_pass(\n+            r#\"\n+pub struct Foo<T> {\n+    t: T,\n+}\n+\n+impl<T: From<i32>> Foo<T>\n+where\n+    Option<T>: Debug\n+{\n+    pub fn ne$0w() -> Self {\n+        Foo { t: 0.into() }\n+    }\n+}\n+\"#,\n+            r#\"\n+pub struct Foo<T> {\n+    t: T,\n+}\n+\n+impl<T: From<i32>> Foo<T>\n+where\n+    Option<T>: Debug\n+{\n+    pub fn new() -> Self {\n+        Foo { t: 0.into() }\n+    }\n+}\n+\n+impl<T: From<i32>> Default for Foo<T>\n+where\n+    Option<T>: Debug\n+{\n+    fn default() -> Self {\n+        Self::new()\n+    }\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn new_function_with_generics_and_wheres() {\n+        check_pass(\n+            r#\"\n+pub struct Foo<T, B> {\n+    _tars: T,\n+    _bar: B,\n+}\n+\n+impl<T: From<i32>, B: From<i64>> Foo<T, B>\n+where\n+    Option<T>: Debug, Option<B>: Debug,\n+{\n+    pub fn ne$0w() -> Self {\n+        unimplemented!()\n+    }\n+}\n+\"#,\n+            r#\"\n+pub struct Foo<T, B> {\n+    _tars: T,\n+    _bar: B,\n+}\n+\n+impl<T: From<i32>, B: From<i64>> Foo<T, B>\n+where\n+    Option<T>: Debug, Option<B>: Debug,\n+{\n+    pub fn new() -> Self {\n+        unimplemented!()\n+    }\n+}\n+\n+impl<T: From<i32>, B: From<i64>> Default for Foo<T, B>\n+where\n+    Option<T>: Debug, Option<B>: Debug,\n+{\n+    fn default() -> Self {\n+        Self::new()\n+    }\n+}\n+\"#,\n+        );\n+    }\n+\n     #[test]\n     fn new_function_with_parameters() {\n         cov_mark::check!(new_function_with_parameters);"}]}