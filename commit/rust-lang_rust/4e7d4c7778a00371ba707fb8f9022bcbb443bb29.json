{"sha": "4e7d4c7778a00371ba707fb8f9022bcbb443bb29", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlN2Q0Yzc3NzhhMDAzNzFiYTcwN2ZiOGY5MDIyYmNiYjQ0M2JiMjk=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-27T14:32:32Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-27T14:32:32Z"}, "message": "ManuallyDrop != MaybeUninit", "tree": {"sha": "30a7597d2ef51698850daa240ac8baeef4ba6c15", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30a7597d2ef51698850daa240ac8baeef4ba6c15"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e7d4c7778a00371ba707fb8f9022bcbb443bb29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e7d4c7778a00371ba707fb8f9022bcbb443bb29", "html_url": "https://github.com/rust-lang/rust/commit/4e7d4c7778a00371ba707fb8f9022bcbb443bb29", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e7d4c7778a00371ba707fb8f9022bcbb443bb29/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5b5f924eb9bfe7e28984fb3ae43f65ebe2bdaa2", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5b5f924eb9bfe7e28984fb3ae43f65ebe2bdaa2", "html_url": "https://github.com/rust-lang/rust/commit/f5b5f924eb9bfe7e28984fb3ae43f65ebe2bdaa2"}], "stats": {"total": 8, "additions": 8, "deletions": 0}, "files": [{"sha": "6b1b91d00faa7534d38af58c8956c361a73bbf19", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4e7d4c7778a00371ba707fb8f9022bcbb443bb29/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e7d4c7778a00371ba707fb8f9022bcbb443bb29/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=4e7d4c7778a00371ba707fb8f9022bcbb443bb29", "patch": "@@ -900,10 +900,16 @@ pub fn discriminant<T>(v: &T) -> Discriminant<T> {\n     }\n }\n \n+// FIXME: Reference `MaybeUninit` from these docs, once that is stable.\n /// A wrapper to inhibit compiler from automatically calling `T`\u2019s destructor.\n ///\n /// This wrapper is 0-cost.\n ///\n+/// `ManuallyDrop<T>` is subject to the same layout optimizations as `T`.\n+/// As a consequence, it has *no effect* on the assumptions that the compiler makes\n+/// about all values being initialized at their type.  In particular, initializing\n+/// a `ManuallyDrop<&T>` with [`mem::zeroed`] is undefined behavior.\n+///\n /// # Examples\n ///\n /// This wrapper helps with explicitly documenting the drop order dependencies between fields of\n@@ -935,6 +941,8 @@ pub fn discriminant<T>(v: &T) -> Discriminant<T> {\n ///     }\n /// }\n /// ```\n+///\n+/// [`mem::zeroed']: fn.zeroed.html\n #[stable(feature = \"manually_drop\", since = \"1.20.0\")]\n #[lang = \"manually_drop\"]\n #[derive(Copy, Clone, Debug, Default, PartialEq, Eq, PartialOrd, Ord, Hash)]"}]}