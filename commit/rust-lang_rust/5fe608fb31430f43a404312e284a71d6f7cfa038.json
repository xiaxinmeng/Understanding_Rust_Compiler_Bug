{"sha": "5fe608fb31430f43a404312e284a71d6f7cfa038", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmZTYwOGZiMzE0MzBmNDNhNDA0MzEyZTI4NGE3MWQ2ZjdjZmEwMzg=", "commit": {"author": {"name": "Josh Mcguigan", "email": "joshmcg88@gmail.com", "date": "2020-04-05T19:42:24Z"}, "committer": {"name": "Josh Mcguigan", "email": "joshmcg88@gmail.com", "date": "2020-04-07T12:12:08Z"}, "message": "handle match auto-deref", "tree": {"sha": "092a0898d9bea176099fd07e3ff8c8ee290052d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/092a0898d9bea176099fd07e3ff8c8ee290052d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5fe608fb31430f43a404312e284a71d6f7cfa038", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5fe608fb31430f43a404312e284a71d6f7cfa038", "html_url": "https://github.com/rust-lang/rust/commit/5fe608fb31430f43a404312e284a71d6f7cfa038", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5fe608fb31430f43a404312e284a71d6f7cfa038/comments", "author": {"login": "JoshMcguigan", "id": 22216761, "node_id": "MDQ6VXNlcjIyMjE2NzYx", "avatar_url": "https://avatars.githubusercontent.com/u/22216761?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JoshMcguigan", "html_url": "https://github.com/JoshMcguigan", "followers_url": "https://api.github.com/users/JoshMcguigan/followers", "following_url": "https://api.github.com/users/JoshMcguigan/following{/other_user}", "gists_url": "https://api.github.com/users/JoshMcguigan/gists{/gist_id}", "starred_url": "https://api.github.com/users/JoshMcguigan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JoshMcguigan/subscriptions", "organizations_url": "https://api.github.com/users/JoshMcguigan/orgs", "repos_url": "https://api.github.com/users/JoshMcguigan/repos", "events_url": "https://api.github.com/users/JoshMcguigan/events{/privacy}", "received_events_url": "https://api.github.com/users/JoshMcguigan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JoshMcguigan", "id": 22216761, "node_id": "MDQ6VXNlcjIyMjE2NzYx", "avatar_url": "https://avatars.githubusercontent.com/u/22216761?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JoshMcguigan", "html_url": "https://github.com/JoshMcguigan", "followers_url": "https://api.github.com/users/JoshMcguigan/followers", "following_url": "https://api.github.com/users/JoshMcguigan/following{/other_user}", "gists_url": "https://api.github.com/users/JoshMcguigan/gists{/gist_id}", "starred_url": "https://api.github.com/users/JoshMcguigan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JoshMcguigan/subscriptions", "organizations_url": "https://api.github.com/users/JoshMcguigan/orgs", "repos_url": "https://api.github.com/users/JoshMcguigan/repos", "events_url": "https://api.github.com/users/JoshMcguigan/events{/privacy}", "received_events_url": "https://api.github.com/users/JoshMcguigan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b4316377b9897f064b213a52a7efe8622d48487", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b4316377b9897f064b213a52a7efe8622d48487", "html_url": "https://github.com/rust-lang/rust/commit/5b4316377b9897f064b213a52a7efe8622d48487"}], "stats": {"total": 46, "additions": 45, "deletions": 1}, "files": [{"sha": "f502a920864d3cf342c15ae466373e3dfee06a80", "filename": "crates/ra_hir_ty/src/_match.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/5fe608fb31430f43a404312e284a71d6f7cfa038/crates%2Fra_hir_ty%2Fsrc%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fe608fb31430f43a404312e284a71d6f7cfa038/crates%2Fra_hir_ty%2Fsrc%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2F_match.rs?ref=5fe608fb31430f43a404312e284a71d6f7cfa038", "patch": "@@ -865,6 +865,41 @@ mod tests {\n         check_no_diagnostic(content);\n     }\n \n+    #[test]\n+    fn enum_ref_missing_arms() {\n+        let content = r\"\n+            enum Either {\n+                A,\n+                B,\n+            }\n+            fn test_fn() {\n+                match &Either::B {\n+                    Either::A => {},\n+                }\n+            }\n+        \";\n+\n+        check_diagnostic_with_no_fix(content);\n+    }\n+\n+    #[test]\n+    fn enum_ref_no_diagnostic() {\n+        let content = r\"\n+            enum Either {\n+                A,\n+                B,\n+            }\n+            fn test_fn() {\n+                match &Either::B {\n+                    Either::A => {},\n+                    Either::B => {},\n+                }\n+            }\n+        \";\n+\n+        check_no_diagnostic(content);\n+    }\n+\n     #[test]\n     fn enum_containing_bool_no_arms() {\n         let content = r\""}, {"sha": "6efed6f9e2f48d1656938c1a5e8e4980816fddc6", "filename": "crates/ra_hir_ty/src/expr.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5fe608fb31430f43a404312e284a71d6f7cfa038/crates%2Fra_hir_ty%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fe608fb31430f43a404312e284a71d6f7cfa038/crates%2Fra_hir_ty%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fexpr.rs?ref=5fe608fb31430f43a404312e284a71d6f7cfa038", "patch": "@@ -93,7 +93,16 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n                 // of the match expression. If we had a InvalidMatchArmPattern\n                 // diagnostic or similar we could raise that in an else\n                 // block here.\n-                if pat_ty == match_expr_ty {\n+                //\n+                // When comparing the types, we also have to consider that rustc\n+                // will automatically de-reference the match expression type if\n+                // necessary.\n+                if pat_ty == match_expr_ty\n+                    || match_expr_ty\n+                        .as_reference()\n+                        .map(|(match_expr_ty, _)| match_expr_ty == pat_ty)\n+                        .unwrap_or(false)\n+                {\n                     // If we had a NotUsefulMatchArm diagnostic, we could\n                     // check the usefulness of each pattern as we added it\n                     // to the matrix here."}]}