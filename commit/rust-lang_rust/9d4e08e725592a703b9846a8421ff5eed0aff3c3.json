{"sha": "9d4e08e725592a703b9846a8421ff5eed0aff3c3", "node_id": "C_kwDOAAsO6NoAKDlkNGUwOGU3MjU1OTJhNzAzYjk4NDZhODQyMWZmNWVlZDBhZmYzYzM", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2022-06-19T22:37:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-19T22:37:40Z"}, "message": "Rollup merge of #95534 - jyn514:std-mem-copy, r=joshtriplett\n\nAdd `core::mem::copy` to complement `core::mem::drop`.\n\nThis is useful for combinators. I didn't add `clone` since you can already\nuse `Clone::clone` in its place; copy has no such corresponding function.", "tree": {"sha": "f9f9a4d82b679572c5d7480068d65c5092117370", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9f9a4d82b679572c5d7480068d65c5092117370"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d4e08e725592a703b9846a8421ff5eed0aff3c3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJir6U1CRBK7hj4Ov3rIwAAG3kIAH9G4hQCoY8Qlzi67kMdCwos\nEGM1+p7v/oSy+WS6rBeN570J0MW/eatQbrnENzpgVBEAdDfwNcyBEriHWV/AtupB\n3hAzw3lNZrdfwGUDh/bEWToUriw0CShNtx2rSC/ES7OO1JxgwWYb647tUo1pp85K\nlVAbaZrrVPhqyM0awdQlrsnAiKIOHQYHf9rj2uHYF8Jypo3YvzB4WpMDIJvFunNV\nKqVEiAjQb7B/qrbj5ztESDYnB2ioVxmnYNtTdL0jaHFioh4pqEV/5jPlKRDjvLxQ\nVXXzoVH6AZP9SJrkQTSMZuUV5FpUQOxcdbBKpICBppLJmoTGH/Dskj8YHoBKikw=\n=MnA8\n-----END PGP SIGNATURE-----\n", "payload": "tree f9f9a4d82b679572c5d7480068d65c5092117370\nparent bb8c2f41174caceec00c28bc6c5c20ae9f9a175c\nparent 9ac6277bad856e0a1373e1fd26ee3e70b10074a8\nauthor Yuki Okushi <jtitor@2k36.org> 1655678260 +0900\ncommitter GitHub <noreply@github.com> 1655678260 +0900\n\nRollup merge of #95534 - jyn514:std-mem-copy, r=joshtriplett\n\nAdd `core::mem::copy` to complement `core::mem::drop`.\n\nThis is useful for combinators. I didn't add `clone` since you can already\nuse `Clone::clone` in its place; copy has no such corresponding function.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d4e08e725592a703b9846a8421ff5eed0aff3c3", "html_url": "https://github.com/rust-lang/rust/commit/9d4e08e725592a703b9846a8421ff5eed0aff3c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d4e08e725592a703b9846a8421ff5eed0aff3c3/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb8c2f41174caceec00c28bc6c5c20ae9f9a175c", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb8c2f41174caceec00c28bc6c5c20ae9f9a175c", "html_url": "https://github.com/rust-lang/rust/commit/bb8c2f41174caceec00c28bc6c5c20ae9f9a175c"}, {"sha": "9ac6277bad856e0a1373e1fd26ee3e70b10074a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ac6277bad856e0a1373e1fd26ee3e70b10074a8", "html_url": "https://github.com/rust-lang/rust/commit/9ac6277bad856e0a1373e1fd26ee3e70b10074a8"}], "stats": {"total": 22, "additions": 22, "deletions": 0}, "files": [{"sha": "ecd2b75ae44271382ba80791968e2fb428e24c4b", "filename": "library/core/src/mem/mod.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9d4e08e725592a703b9846a8421ff5eed0aff3c3/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d4e08e725592a703b9846a8421ff5eed0aff3c3/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs?ref=9d4e08e725592a703b9846a8421ff5eed0aff3c3", "patch": "@@ -973,6 +973,28 @@ pub const fn replace<T>(dest: &mut T, src: T) -> T {\n #[cfg_attr(not(test), rustc_diagnostic_item = \"mem_drop\")]\n pub fn drop<T>(_x: T) {}\n \n+/// Bitwise-copies a value.\n+///\n+/// This function is not magic; it is literally defined as\n+/// ```\n+/// pub fn copy<T: Copy>(x: &T) -> T { *x }\n+/// ```\n+///\n+/// It is useful when you want to pass a function pointer to a combinator, rather than defining a new closure.\n+///\n+/// Example:\n+/// ```\n+/// #![feature(mem_copy_fn)]\n+/// use core::mem::copy;\n+/// let result_from_ffi_function: Result<(), &i32> = Err(&1);\n+/// let result_copied: Result<(), i32> = result_from_ffi_function.map_err(copy);\n+/// ```\n+#[inline]\n+#[unstable(feature = \"mem_copy_fn\", issue = \"98262\")]\n+pub fn copy<T: Copy>(x: &T) -> T {\n+    *x\n+}\n+\n /// Interprets `src` as having type `&U`, and then reads `src` without moving\n /// the contained value.\n ///"}]}