{"sha": "a396434136ad93f97f03f4316dd989073ad160e9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzOTY0MzQxMzZhZDkzZjk3ZjAzZjQzMTZkZDk4OTA3M2FkMTYwZTk=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-17T20:57:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-08-17T20:57:30Z"}, "message": "Rollup merge of #63487 - sd234678:remove-meaningless-comments-in-src/test-2, r=Centril\n\nRemove meaningless comments in src/test\n\nMoved from #63411", "tree": {"sha": "38741758b44417bc7507455e5d74003f26a9bc0d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/38741758b44417bc7507455e5d74003f26a9bc0d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a396434136ad93f97f03f4316dd989073ad160e9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdWGo7CRBK7hj4Ov3rIwAAdHIIACoIJgdyMd16fUFuf4y6Y0Vw\n8q+MBBF2GZMnG33f5fV9fxL0wCqyyAEfmWWCYrMTdkpy8Ya4wRDDl1vOstClsqk0\nF8HXzm7+P3zVzZxjtGDrQSaQ8SInscK1Hf1diIlBGeBrMeawlyTMt+xpXoNaW8mR\nm0tevCuO+MNeipOWZR3u2NBuYONI/RBEol+1agB6fZwju6d22PGtmfaEs3NQ5mjR\nrRgKMdM3nvPYHBenzCVViCBIHUFzWxPaZscwodV4yQOTKA8DKQRN9hoR8EotPWJj\n2Z2Bu0K7oGbfsqdcois16oi/ndSW+Z9mjArshQV7oNwlwTLbLPJDdIjUdqevvpU=\n=la8s\n-----END PGP SIGNATURE-----\n", "payload": "tree 38741758b44417bc7507455e5d74003f26a9bc0d\nparent a3b6e8ef996c9e2ce31017e9df692c60fde7775a\nparent b21ee493e77a01346a22f982011cff83b150e72c\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1566075450 +0200\ncommitter GitHub <noreply@github.com> 1566075450 +0200\n\nRollup merge of #63487 - sd234678:remove-meaningless-comments-in-src/test-2, r=Centril\n\nRemove meaningless comments in src/test\n\nMoved from #63411\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a396434136ad93f97f03f4316dd989073ad160e9", "html_url": "https://github.com/rust-lang/rust/commit/a396434136ad93f97f03f4316dd989073ad160e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a396434136ad93f97f03f4316dd989073ad160e9/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3b6e8ef996c9e2ce31017e9df692c60fde7775a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3b6e8ef996c9e2ce31017e9df692c60fde7775a", "html_url": "https://github.com/rust-lang/rust/commit/a3b6e8ef996c9e2ce31017e9df692c60fde7775a"}, {"sha": "b21ee493e77a01346a22f982011cff83b150e72c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b21ee493e77a01346a22f982011cff83b150e72c", "html_url": "https://github.com/rust-lang/rust/commit/b21ee493e77a01346a22f982011cff83b150e72c"}], "stats": {"total": 217, "additions": 68, "deletions": 149}, "files": [{"sha": "619cce685d75f581a9c204f7bfefba50c9e55dde", "filename": "src/test/pretty/stmt_expr_attributes.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a396434136ad93f97f03f4316dd989073ad160e9/src%2Ftest%2Fpretty%2Fstmt_expr_attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a396434136ad93f97f03f4316dd989073ad160e9/src%2Ftest%2Fpretty%2Fstmt_expr_attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fstmt_expr_attributes.rs?ref=a396434136ad93f97f03f4316dd989073ad160e9", "patch": "@@ -259,8 +259,6 @@ fn _12() {\n     }\n }\n \n-/////////////////\n-\n fn foo() { }\n fn foo3(_: i32, _: (), _: ()) { }\n fn qux(_: i32) { }"}, {"sha": "7e05bcd309a4ff3efa52d1da6c915a0f58d67736", "filename": "src/test/ui/associated-type/associated-type-projection-from-supertrait.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a396434136ad93f97f03f4316dd989073ad160e9/src%2Ftest%2Fui%2Fassociated-type%2Fassociated-type-projection-from-supertrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a396434136ad93f97f03f4316dd989073ad160e9/src%2Ftest%2Fui%2Fassociated-type%2Fassociated-type-projection-from-supertrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type%2Fassociated-type-projection-from-supertrait.rs?ref=a396434136ad93f97f03f4316dd989073ad160e9", "patch": "@@ -12,30 +12,22 @@ pub trait Car : Vehicle {\n     fn chip_paint(&self, c: Self::Color) { }\n }\n \n-///////////////////////////////////////////////////////////////////////////\n-\n struct Black;\n struct ModelT;\n impl Vehicle for ModelT { type Color = Black; }\n impl Car for ModelT { }\n \n-///////////////////////////////////////////////////////////////////////////\n-\n struct Blue;\n struct ModelU;\n impl Vehicle for ModelU { type Color = Blue; }\n impl Car for ModelU { }\n \n-///////////////////////////////////////////////////////////////////////////\n-\n fn dent<C:Car>(c: C, color: C::Color) { c.chip_paint(color) }\n fn a() { dent(ModelT, Black); }\n fn b() { dent(ModelT, Blue); } //~ ERROR mismatched types\n fn c() { dent(ModelU, Black); } //~ ERROR mismatched types\n fn d() { dent(ModelU, Blue); }\n \n-///////////////////////////////////////////////////////////////////////////\n-\n fn e() { ModelT.chip_paint(Black); }\n fn f() { ModelT.chip_paint(Blue); } //~ ERROR mismatched types\n fn g() { ModelU.chip_paint(Black); } //~ ERROR mismatched types"}, {"sha": "4ba4925ef1b378c8dd91d9c648c34096c6a029e6", "filename": "src/test/ui/associated-type/associated-type-projection-from-supertrait.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a396434136ad93f97f03f4316dd989073ad160e9/src%2Ftest%2Fui%2Fassociated-type%2Fassociated-type-projection-from-supertrait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a396434136ad93f97f03f4316dd989073ad160e9/src%2Ftest%2Fui%2Fassociated-type%2Fassociated-type-projection-from-supertrait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type%2Fassociated-type-projection-from-supertrait.stderr?ref=a396434136ad93f97f03f4316dd989073ad160e9", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/associated-type-projection-from-supertrait.rs:33:23\n+  --> $DIR/associated-type-projection-from-supertrait.rs:27:23\n    |\n LL | fn b() { dent(ModelT, Blue); }\n    |                       ^^^^ expected struct `Black`, found struct `Blue`\n@@ -8,7 +8,7 @@ LL | fn b() { dent(ModelT, Blue); }\n               found type `Blue`\n \n error[E0308]: mismatched types\n-  --> $DIR/associated-type-projection-from-supertrait.rs:34:23\n+  --> $DIR/associated-type-projection-from-supertrait.rs:28:23\n    |\n LL | fn c() { dent(ModelU, Black); }\n    |                       ^^^^^ expected struct `Blue`, found struct `Black`\n@@ -17,7 +17,7 @@ LL | fn c() { dent(ModelU, Black); }\n               found type `Black`\n \n error[E0308]: mismatched types\n-  --> $DIR/associated-type-projection-from-supertrait.rs:40:28\n+  --> $DIR/associated-type-projection-from-supertrait.rs:32:28\n    |\n LL | fn f() { ModelT.chip_paint(Blue); }\n    |                            ^^^^ expected struct `Black`, found struct `Blue`\n@@ -26,7 +26,7 @@ LL | fn f() { ModelT.chip_paint(Blue); }\n               found type `Blue`\n \n error[E0308]: mismatched types\n-  --> $DIR/associated-type-projection-from-supertrait.rs:41:28\n+  --> $DIR/associated-type-projection-from-supertrait.rs:33:28\n    |\n LL | fn g() { ModelU.chip_paint(Black); }\n    |                            ^^^^^ expected struct `Blue`, found struct `Black`"}, {"sha": "6b2bbbe2e4fb971632055ec1740587d66bd6c6ef", "filename": "src/test/ui/associated-types/associated-types-binding-to-type-defined-in-supertrait.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a396434136ad93f97f03f4316dd989073ad160e9/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-binding-to-type-defined-in-supertrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a396434136ad93f97f03f4316dd989073ad160e9/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-binding-to-type-defined-in-supertrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-binding-to-type-defined-in-supertrait.rs?ref=a396434136ad93f97f03f4316dd989073ad160e9", "patch": "@@ -11,22 +11,16 @@ pub trait Car : Vehicle {\n     fn honk(&self) { }\n }\n \n-///////////////////////////////////////////////////////////////////////////\n-\n struct Black;\n struct ModelT;\n impl Vehicle for ModelT { type Color = Black; }\n impl Car for ModelT { }\n \n-///////////////////////////////////////////////////////////////////////////\n-\n struct Blue;\n struct ModelU;\n impl Vehicle for ModelU { type Color = Blue; }\n impl Car for ModelU { }\n \n-///////////////////////////////////////////////////////////////////////////\n-\n fn black_car<C:Car<Color=Black>>(c: C) {\n }\n "}, {"sha": "89c48d50cdb65334d40bc14bcb5fb0da926774e4", "filename": "src/test/ui/associated-types/associated-types-binding-to-type-defined-in-supertrait.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a396434136ad93f97f03f4316dd989073ad160e9/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-binding-to-type-defined-in-supertrait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a396434136ad93f97f03f4316dd989073ad160e9/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-binding-to-type-defined-in-supertrait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-binding-to-type-defined-in-supertrait.stderr?ref=a396434136ad93f97f03f4316dd989073ad160e9", "patch": "@@ -1,27 +1,27 @@\n error[E0271]: type mismatch resolving `<ModelT as Vehicle>::Color == Blue`\n-  --> $DIR/associated-types-binding-to-type-defined-in-supertrait.rs:37:10\n+  --> $DIR/associated-types-binding-to-type-defined-in-supertrait.rs:31:10\n    |\n LL | fn b() { blue_car(ModelT); }\n    |          ^^^^^^^^ expected struct `Black`, found struct `Blue`\n    |\n    = note: expected type `Black`\n               found type `Blue`\n note: required by `blue_car`\n-  --> $DIR/associated-types-binding-to-type-defined-in-supertrait.rs:33:1\n+  --> $DIR/associated-types-binding-to-type-defined-in-supertrait.rs:27:1\n    |\n LL | fn blue_car<C:Car<Color=Blue>>(c: C) {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0271]: type mismatch resolving `<ModelU as Vehicle>::Color == Black`\n-  --> $DIR/associated-types-binding-to-type-defined-in-supertrait.rs:38:10\n+  --> $DIR/associated-types-binding-to-type-defined-in-supertrait.rs:32:10\n    |\n LL | fn c() { black_car(ModelU); }\n    |          ^^^^^^^^^ expected struct `Blue`, found struct `Black`\n    |\n    = note: expected type `Blue`\n               found type `Black`\n note: required by `black_car`\n-  --> $DIR/associated-types-binding-to-type-defined-in-supertrait.rs:30:1\n+  --> $DIR/associated-types-binding-to-type-defined-in-supertrait.rs:24:1\n    |\n LL | fn black_car<C:Car<Color=Black>>(c: C) {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "c89f6046e6bf2cae138912276c9110d60ea44cd1", "filename": "src/test/ui/associated-types/associated-types-ref-from-struct.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a396434136ad93f97f03f4316dd989073ad160e9/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-ref-from-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a396434136ad93f97f03f4316dd989073ad160e9/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-ref-from-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-ref-from-struct.rs?ref=a396434136ad93f97f03f4316dd989073ad160e9", "patch": "@@ -9,8 +9,6 @@ trait Test {\n     fn test(&self, value: &Self::V) -> bool;\n }\n \n-///////////////////////////////////////////////////////////////////////////\n-\n struct TesterPair<T:Test> {\n     tester: T,\n     value: T::V,\n@@ -26,8 +24,6 @@ impl<T:Test> TesterPair<T> {\n     }\n }\n \n-///////////////////////////////////////////////////////////////////////////\n-\n struct EqU32(u32);\n impl Test for EqU32 {\n     type V = u32;"}, {"sha": "88d396101dba23106de9a1daf0e6e3c325e9f8f6", "filename": "src/test/ui/higher-rank-trait-bounds/hrtb-type-outlives.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a396434136ad93f97f03f4316dd989073ad160e9/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-type-outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a396434136ad93f97f03f4316dd989073ad160e9/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-type-outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-type-outlives.rs?ref=a396434136ad93f97f03f4316dd989073ad160e9", "patch": "@@ -14,7 +14,6 @@ fn want_foo<T>()\n {\n }\n \n-///////////////////////////////////////////////////////////////////////////\n // Expressed as a where clause\n \n struct SomeStruct<X> {\n@@ -30,7 +29,6 @@ fn one() {\n     want_foo::<SomeStruct<usize>>();\n }\n \n-///////////////////////////////////////////////////////////////////////////\n // Expressed as shorthand\n \n struct AnotherStruct<X> {"}, {"sha": "004d62ac513ffe86bfc0917c1844cc4dd69284d1", "filename": "src/test/ui/hrtb/hrtb-conflate-regions.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a396434136ad93f97f03f4316dd989073ad160e9/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-conflate-regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a396434136ad93f97f03f4316dd989073ad160e9/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-conflate-regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-conflate-regions.rs?ref=a396434136ad93f97f03f4316dd989073ad160e9", "patch": "@@ -15,7 +15,6 @@ fn want_foo1<T>()\n {\n }\n \n-///////////////////////////////////////////////////////////////////////////\n // Expressed as a where clause\n \n struct SomeStruct;"}, {"sha": "20265d66c6f43abdc1b8f5ad3f9d58879a18fe46", "filename": "src/test/ui/hrtb/hrtb-conflate-regions.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a396434136ad93f97f03f4316dd989073ad160e9/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-conflate-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a396434136ad93f97f03f4316dd989073ad160e9/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-conflate-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-conflate-regions.stderr?ref=a396434136ad93f97f03f4316dd989073ad160e9", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `for<'a, 'b> SomeStruct: Foo<(&'a isize, &'b isize)>` is not satisfied\n-  --> $DIR/hrtb-conflate-regions.rs:28:10\n+  --> $DIR/hrtb-conflate-regions.rs:27:10\n    |\n LL | fn b() { want_foo2::<SomeStruct>(); }\n    |          ^^^^^^^^^^^^^^^^^^^^^^^ the trait `for<'a, 'b> Foo<(&'a isize, &'b isize)>` is not implemented for `SomeStruct`"}, {"sha": "ce1550568c19dd4c53a5f8273c58b7415ac7b068", "filename": "src/test/ui/impl-trait/bound-normalization-fail.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a396434136ad93f97f03f4316dd989073ad160e9/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a396434136ad93f97f03f4316dd989073ad160e9/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.rs?ref=a396434136ad93f97f03f4316dd989073ad160e9", "patch": "@@ -8,7 +8,6 @@\n \n // See issue 60414\n \n-/////////////////////////////////////////////\n // Reduction to `impl Trait`\n \n struct Foo<T>(T);\n@@ -33,7 +32,6 @@ mod impl_trait {\n     }\n }\n \n-/////////////////////////////////////////////\n // Same with lifetimes in the trait\n \n mod lifetimes {"}, {"sha": "4811b1e0ff39ebef500c8a0e0eb14d0e8c588f77", "filename": "src/test/ui/impl-trait/bound-normalization-fail.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a396434136ad93f97f03f4316dd989073ad160e9/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a396434136ad93f97f03f4316dd989073ad160e9/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr?ref=a396434136ad93f97f03f4316dd989073ad160e9", "patch": "@@ -7,7 +7,7 @@ LL | #![feature(impl_trait_in_bindings)]\n    = note: `#[warn(incomplete_features)]` on by default\n \n error[E0271]: type mismatch resolving `<Foo<()> as FooLike>::Output == <T as impl_trait::Trait>::Assoc`\n-  --> $DIR/bound-normalization-fail.rs:30:32\n+  --> $DIR/bound-normalization-fail.rs:29:32\n    |\n LL |     fn foo_fail<T: Trait>() -> impl FooLike<Output=T::Assoc> {\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected (), found associated type\n@@ -17,13 +17,13 @@ LL |     fn foo_fail<T: Trait>() -> impl FooLike<Output=T::Assoc> {\n    = note: the return type of a function must have a statically known size\n \n error: `impl Trait` return type cannot contain a projection or `Self` that references lifetimes from a parent scope\n-  --> $DIR/bound-normalization-fail.rs:47:41\n+  --> $DIR/bound-normalization-fail.rs:45:41\n    |\n LL |     fn foo2_fail<'a, T: Trait<'a>>() -> impl FooLike<Output=T::Assoc> {\n    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0271]: type mismatch resolving `<Foo<()> as FooLike>::Output == <T as lifetimes::Trait<'static>>::Assoc`\n-  --> $DIR/bound-normalization-fail.rs:47:41\n+  --> $DIR/bound-normalization-fail.rs:45:41\n    |\n LL |     fn foo2_fail<'a, T: Trait<'a>>() -> impl FooLike<Output=T::Assoc> {\n    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected (), found associated type"}, {"sha": "b0ed4be54b8999cd8487396ba6482cfffc8a2cc6", "filename": "src/test/ui/impl-trait/bound-normalization-pass.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a396434136ad93f97f03f4316dd989073ad160e9/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a396434136ad93f97f03f4316dd989073ad160e9/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-pass.rs?ref=a396434136ad93f97f03f4316dd989073ad160e9", "patch": "@@ -8,7 +8,6 @@\n \n // See issue 60414\n \n-/////////////////////////////////////////////\n // Reduction to `impl Trait`\n \n struct Foo<T>(T);\n@@ -32,7 +31,6 @@ mod impl_trait {\n     }\n }\n \n-/////////////////////////////////////////////\n // Same with lifetimes in the trait\n \n mod lifetimes {\n@@ -59,7 +57,6 @@ mod lifetimes {\n     }\n }\n \n-/////////////////////////////////////////////\n // Reduction using `impl Trait` in bindings\n \n mod impl_trait_in_bindings {\n@@ -80,7 +77,6 @@ mod impl_trait_in_bindings {\n     }\n }\n \n-/////////////////////////////////////////////\n // The same applied to `type Foo = impl Bar`s\n \n mod opaque_types {"}, {"sha": "7c2b0d69c8b2568de550058321ddd25a69600b8b", "filename": "src/test/ui/issues/issue-12028.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a396434136ad93f97f03f4316dd989073ad160e9/src%2Ftest%2Fui%2Fissues%2Fissue-12028.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a396434136ad93f97f03f4316dd989073ad160e9/src%2Ftest%2Fui%2Fissues%2Fissue-12028.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-12028.rs?ref=a396434136ad93f97f03f4316dd989073ad160e9", "patch": "@@ -17,8 +17,6 @@ trait StreamHasher {\n     fn stream(&self) -> Self::S;\n }\n \n-//////////////////////////////////////////////////////////////////////////////\n-\n trait StreamHash<H: StreamHasher>: Hash<H> {\n     fn input_stream(&self, stream: &mut H::S);\n }"}, {"sha": "24aa88c3fa379f42c3888943a879edfd63d5943f", "filename": "src/test/ui/issues/issue-12028.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a396434136ad93f97f03f4316dd989073ad160e9/src%2Ftest%2Fui%2Fissues%2Fissue-12028.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a396434136ad93f97f03f4316dd989073ad160e9/src%2Ftest%2Fui%2Fissues%2Fissue-12028.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-12028.stderr?ref=a396434136ad93f97f03f4316dd989073ad160e9", "patch": "@@ -1,5 +1,5 @@\n error[E0284]: type annotations required: cannot resolve `<_ as StreamHasher>::S == <H as StreamHasher>::S`\n-  --> $DIR/issue-12028.rs:29:14\n+  --> $DIR/issue-12028.rs:27:14\n    |\n LL |         self.input_stream(&mut stream);\n    |              ^^^^^^^^^^^^"}, {"sha": "94da2ca5cab815e2bc2251f8e7a7d8666633dc74", "filename": "src/test/ui/issues/issue-16739.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a396434136ad93f97f03f4316dd989073ad160e9/src%2Ftest%2Fui%2Fissues%2Fissue-16739.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a396434136ad93f97f03f4316dd989073ad160e9/src%2Ftest%2Fui%2Fissues%2Fissue-16739.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16739.rs?ref=a396434136ad93f97f03f4316dd989073ad160e9", "patch": "@@ -16,8 +16,6 @@ impl FnOnce<()> for Foo {\n     extern \"rust-call\" fn call_once(mut self, _: ()) -> u32 { self.call_mut(()) }\n }\n \n-/////////////////////////////////////////////////////////////////////////\n-\n impl FnMut<(u32,)> for Foo {\n     extern \"rust-call\" fn call_mut(&mut self, (x,): (u32,)) -> u32 { self.foo + x }\n }\n@@ -27,8 +25,6 @@ impl FnOnce<(u32,)> for Foo {\n     extern \"rust-call\" fn call_once(mut self, args: (u32,)) -> u32 { self.call_mut(args) }\n }\n \n-/////////////////////////////////////////////////////////////////////////\n-\n impl FnMut<(u32,u32)> for Foo {\n     extern \"rust-call\" fn call_mut(&mut self, (x, y): (u32, u32)) -> u32 { self.foo + x + y }\n }"}, {"sha": "21d983f192ab6b490ffc34fdeab5165056665714", "filename": "src/test/ui/methods/method-projection.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a396434136ad93f97f03f4316dd989073ad160e9/src%2Ftest%2Fui%2Fmethods%2Fmethod-projection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a396434136ad93f97f03f4316dd989073ad160e9/src%2Ftest%2Fui%2Fmethods%2Fmethod-projection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-projection.rs?ref=a396434136ad93f97f03f4316dd989073ad160e9", "patch": "@@ -2,9 +2,6 @@\n // Test that we can use method notation to call methods based on a\n // projection bound from a trait. Issue #20469.\n \n-///////////////////////////////////////////////////////////////////////////\n-\n-\n trait MakeString {\n     fn make_string(&self) -> String;\n }\n@@ -21,8 +18,6 @@ impl MakeString for usize {\n     }\n }\n \n-///////////////////////////////////////////////////////////////////////////\n-\n trait Foo {\n     type F: MakeString;\n \n@@ -33,8 +28,6 @@ fn foo<F:Foo>(f: &F) -> String {\n     f.get().make_string()\n }\n \n-///////////////////////////////////////////////////////////////////////////\n-\n struct SomeStruct {\n     field: isize,\n }\n@@ -47,8 +40,6 @@ impl Foo for SomeStruct {\n     }\n }\n \n-///////////////////////////////////////////////////////////////////////////\n-\n struct SomeOtherStruct {\n     field: usize,\n }"}, {"sha": "eed9934be121dc0bdf5f564f0c51470348403208", "filename": "src/test/ui/regions/regions-outlives-projection-container-hrtb.migrate.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a396434136ad93f97f03f4316dd989073ad160e9/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-hrtb.migrate.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a396434136ad93f97f03f4316dd989073ad160e9/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-hrtb.migrate.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-hrtb.migrate.nll.stderr?ref=a396434136ad93f97f03f4316dd989073ad160e9", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/regions-outlives-projection-container-hrtb.rs:35:12\n+  --> $DIR/regions-outlives-projection-container-hrtb.rs:30:12\n    |\n LL | fn with_assoc<'a,'b>() {\n    |               -- -- lifetime `'b` defined here\n@@ -10,7 +10,7 @@ LL |     let _: &'a WithHrAssoc<TheType<'b>> = loop { };\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'b` must outlive `'a`\n \n error: lifetime may not live long enough\n-  --> $DIR/regions-outlives-projection-container-hrtb.rs:57:12\n+  --> $DIR/regions-outlives-projection-container-hrtb.rs:50:12\n    |\n LL | fn with_assoc_sub<'a,'b>() {\n    |                   -- -- lifetime `'b` defined here"}, {"sha": "ed5800940ee3192597abbceea1d05fdba9d45078", "filename": "src/test/ui/regions/regions-outlives-projection-container-hrtb.migrate.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a396434136ad93f97f03f4316dd989073ad160e9/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-hrtb.migrate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a396434136ad93f97f03f4316dd989073ad160e9/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-hrtb.migrate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-hrtb.migrate.stderr?ref=a396434136ad93f97f03f4316dd989073ad160e9", "patch": "@@ -1,33 +1,33 @@\n error[E0491]: in type `&'a WithHrAssoc<TheType<'b>>`, reference has a longer lifetime than the data it references\n-  --> $DIR/regions-outlives-projection-container-hrtb.rs:35:12\n+  --> $DIR/regions-outlives-projection-container-hrtb.rs:30:12\n    |\n LL |     let _: &'a WithHrAssoc<TheType<'b>> = loop { };\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the pointer is valid for the lifetime 'a as defined on the function body at 32:15\n-  --> $DIR/regions-outlives-projection-container-hrtb.rs:32:15\n+note: the pointer is valid for the lifetime 'a as defined on the function body at 27:15\n+  --> $DIR/regions-outlives-projection-container-hrtb.rs:27:15\n    |\n LL | fn with_assoc<'a,'b>() {\n    |               ^^\n-note: but the referenced data is only valid for the lifetime 'b as defined on the function body at 32:18\n-  --> $DIR/regions-outlives-projection-container-hrtb.rs:32:18\n+note: but the referenced data is only valid for the lifetime 'b as defined on the function body at 27:18\n+  --> $DIR/regions-outlives-projection-container-hrtb.rs:27:18\n    |\n LL | fn with_assoc<'a,'b>() {\n    |                  ^^\n \n error[E0491]: in type `&'a WithHrAssocSub<TheType<'b>>`, reference has a longer lifetime than the data it references\n-  --> $DIR/regions-outlives-projection-container-hrtb.rs:57:12\n+  --> $DIR/regions-outlives-projection-container-hrtb.rs:50:12\n    |\n LL |     let _: &'a WithHrAssocSub<TheType<'b>> = loop { };\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the pointer is valid for the lifetime 'a as defined on the function body at 53:19\n-  --> $DIR/regions-outlives-projection-container-hrtb.rs:53:19\n+note: the pointer is valid for the lifetime 'a as defined on the function body at 46:19\n+  --> $DIR/regions-outlives-projection-container-hrtb.rs:46:19\n    |\n LL | fn with_assoc_sub<'a,'b>() {\n    |                   ^^\n-note: but the referenced data is only valid for the lifetime 'b as defined on the function body at 53:22\n-  --> $DIR/regions-outlives-projection-container-hrtb.rs:53:22\n+note: but the referenced data is only valid for the lifetime 'b as defined on the function body at 46:22\n+  --> $DIR/regions-outlives-projection-container-hrtb.rs:46:22\n    |\n LL | fn with_assoc_sub<'a,'b>() {\n    |                      ^^"}, {"sha": "eed9934be121dc0bdf5f564f0c51470348403208", "filename": "src/test/ui/regions/regions-outlives-projection-container-hrtb.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a396434136ad93f97f03f4316dd989073ad160e9/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-hrtb.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a396434136ad93f97f03f4316dd989073ad160e9/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-hrtb.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-hrtb.nll.stderr?ref=a396434136ad93f97f03f4316dd989073ad160e9", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/regions-outlives-projection-container-hrtb.rs:35:12\n+  --> $DIR/regions-outlives-projection-container-hrtb.rs:30:12\n    |\n LL | fn with_assoc<'a,'b>() {\n    |               -- -- lifetime `'b` defined here\n@@ -10,7 +10,7 @@ LL |     let _: &'a WithHrAssoc<TheType<'b>> = loop { };\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'b` must outlive `'a`\n \n error: lifetime may not live long enough\n-  --> $DIR/regions-outlives-projection-container-hrtb.rs:57:12\n+  --> $DIR/regions-outlives-projection-container-hrtb.rs:50:12\n    |\n LL | fn with_assoc_sub<'a,'b>() {\n    |                   -- -- lifetime `'b` defined here"}, {"sha": "cee741184ca2ab68a0ddb8b35bf7864274b13533", "filename": "src/test/ui/regions/regions-outlives-projection-container-hrtb.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a396434136ad93f97f03f4316dd989073ad160e9/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-hrtb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a396434136ad93f97f03f4316dd989073ad160e9/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-hrtb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-hrtb.rs?ref=a396434136ad93f97f03f4316dd989073ad160e9", "patch": "@@ -6,9 +6,6 @@\n \n #![allow(dead_code)]\n \n-\n-///////////////////////////////////////////////////////////////////////////\n-\n pub trait TheTrait<'b> {\n     type TheAssocType;\n }\n@@ -21,8 +18,6 @@ impl<'a,'b> TheTrait<'a> for TheType<'b> {\n     type TheAssocType = &'b ();\n }\n \n-///////////////////////////////////////////////////////////////////////////\n-\n pub struct WithHrAssoc<T>\n     where for<'a> T : TheTrait<'a>\n {\n@@ -37,8 +32,6 @@ fn with_assoc<'a,'b>() {\n     //[nll]~^^ ERROR lifetime may not live long enough\n }\n \n-///////////////////////////////////////////////////////////////////////////\n-\n pub trait TheSubTrait : for<'a> TheTrait<'a> {\n }\n "}, {"sha": "8c54d8da0a06395ec758611beed2908be37d665f", "filename": "src/test/ui/regions/regions-outlives-projection-container-wc.migrate.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a396434136ad93f97f03f4316dd989073ad160e9/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-wc.migrate.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a396434136ad93f97f03f4316dd989073ad160e9/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-wc.migrate.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-wc.migrate.nll.stderr?ref=a396434136ad93f97f03f4316dd989073ad160e9", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/regions-outlives-projection-container-wc.rs:37:12\n+  --> $DIR/regions-outlives-projection-container-wc.rs:33:12\n    |\n LL | fn with_assoc<'a,'b>() {\n    |               -- -- lifetime `'b` defined here"}, {"sha": "152e6c5600c4e63e7ab775abe989d05cd30613f0", "filename": "src/test/ui/regions/regions-outlives-projection-container-wc.migrate.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a396434136ad93f97f03f4316dd989073ad160e9/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-wc.migrate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a396434136ad93f97f03f4316dd989073ad160e9/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-wc.migrate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-wc.migrate.stderr?ref=a396434136ad93f97f03f4316dd989073ad160e9", "patch": "@@ -1,16 +1,16 @@\n error[E0491]: in type `&'a WithAssoc<TheType<'b>>`, reference has a longer lifetime than the data it references\n-  --> $DIR/regions-outlives-projection-container-wc.rs:37:12\n+  --> $DIR/regions-outlives-projection-container-wc.rs:33:12\n    |\n LL |     let _: &'a WithAssoc<TheType<'b>> = loop { };\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the pointer is valid for the lifetime 'a as defined on the function body at 31:15\n-  --> $DIR/regions-outlives-projection-container-wc.rs:31:15\n+note: the pointer is valid for the lifetime 'a as defined on the function body at 27:15\n+  --> $DIR/regions-outlives-projection-container-wc.rs:27:15\n    |\n LL | fn with_assoc<'a,'b>() {\n    |               ^^\n-note: but the referenced data is only valid for the lifetime 'b as defined on the function body at 31:18\n-  --> $DIR/regions-outlives-projection-container-wc.rs:31:18\n+note: but the referenced data is only valid for the lifetime 'b as defined on the function body at 27:18\n+  --> $DIR/regions-outlives-projection-container-wc.rs:27:18\n    |\n LL | fn with_assoc<'a,'b>() {\n    |                  ^^"}, {"sha": "8c54d8da0a06395ec758611beed2908be37d665f", "filename": "src/test/ui/regions/regions-outlives-projection-container-wc.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a396434136ad93f97f03f4316dd989073ad160e9/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-wc.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a396434136ad93f97f03f4316dd989073ad160e9/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-wc.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-wc.nll.stderr?ref=a396434136ad93f97f03f4316dd989073ad160e9", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/regions-outlives-projection-container-wc.rs:37:12\n+  --> $DIR/regions-outlives-projection-container-wc.rs:33:12\n    |\n LL | fn with_assoc<'a,'b>() {\n    |               -- -- lifetime `'b` defined here"}, {"sha": "99965f333907bff77772640989900ecc090fc93d", "filename": "src/test/ui/regions/regions-outlives-projection-container-wc.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a396434136ad93f97f03f4316dd989073ad160e9/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-wc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a396434136ad93f97f03f4316dd989073ad160e9/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-wc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-wc.rs?ref=a396434136ad93f97f03f4316dd989073ad160e9", "patch": "@@ -8,8 +8,6 @@\n \n #![allow(dead_code)]\n \n-///////////////////////////////////////////////////////////////////////////\n-\n pub trait TheTrait {\n     type TheAssocType;\n }\n@@ -22,8 +20,6 @@ impl<'b> TheTrait for TheType<'b> {\n     type TheAssocType = &'b ();\n }\n \n-///////////////////////////////////////////////////////////////////////////\n-\n pub struct WithAssoc<T> where T : TheTrait {\n     m: [T; 0]\n }"}, {"sha": "2cf6e245d19f65a506f84261a087dbefeddb3352", "filename": "src/test/ui/regions/regions-outlives-projection-container.nll.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a396434136ad93f97f03f4316dd989073ad160e9/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a396434136ad93f97f03f4316dd989073ad160e9/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container.nll.stderr?ref=a396434136ad93f97f03f4316dd989073ad160e9", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/regions-outlives-projection-container.rs:40:13\n+  --> $DIR/regions-outlives-projection-container.rs:36:13\n    |\n LL | fn with_assoc<'a,'b>() {\n    |               -- -- lifetime `'b` defined here\n@@ -10,7 +10,7 @@ LL |     let _x: &'a WithAssoc<TheType<'b>> = loop { };\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'b` must outlive `'a`\n \n error: lifetime may not live long enough\n-  --> $DIR/regions-outlives-projection-container.rs:58:13\n+  --> $DIR/regions-outlives-projection-container.rs:54:13\n    |\n LL | fn without_assoc<'a,'b>() {\n    |                  -- -- lifetime `'b` defined here\n@@ -21,7 +21,7 @@ LL |     let _x: &'a WithoutAssoc<TheType<'b>> = loop { };\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'b` must outlive `'a`\n \n error: lifetime may not live long enough\n-  --> $DIR/regions-outlives-projection-container.rs:67:5\n+  --> $DIR/regions-outlives-projection-container.rs:63:5\n    |\n LL | fn call_with_assoc<'a,'b>() {\n    |                    -- -- lifetime `'b` defined here\n@@ -32,7 +32,7 @@ LL |     call::<&'a WithAssoc<TheType<'b>>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'b` must outlive `'a`\n \n error: lifetime may not live long enough\n-  --> $DIR/regions-outlives-projection-container.rs:74:5\n+  --> $DIR/regions-outlives-projection-container.rs:70:5\n    |\n LL | fn call_without_assoc<'a,'b>() {\n    |                       -- -- lifetime `'b` defined here"}, {"sha": "3afc600becb6e4c7309b65b5d2e7ef251b24c1cf", "filename": "src/test/ui/regions/regions-outlives-projection-container.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a396434136ad93f97f03f4316dd989073ad160e9/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a396434136ad93f97f03f4316dd989073ad160e9/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container.rs?ref=a396434136ad93f97f03f4316dd989073ad160e9", "patch": "@@ -5,8 +5,6 @@\n #![allow(dead_code)]\n #![feature(rustc_attrs)]\n \n-///////////////////////////////////////////////////////////////////////////\n-\n pub trait TheTrait {\n     type TheAssocType;\n }\n@@ -19,8 +17,6 @@ impl<'b> TheTrait for TheType<'b> {\n     type TheAssocType = &'b ();\n }\n \n-///////////////////////////////////////////////////////////////////////////\n-\n pub struct WithAssoc<T:TheTrait> {\n     m: [T; 0]\n }"}, {"sha": "3c1a98a3c018fa589a358ef0dd2ee58d46bbdbb6", "filename": "src/test/ui/regions/regions-outlives-projection-container.stderr", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/a396434136ad93f97f03f4316dd989073ad160e9/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a396434136ad93f97f03f4316dd989073ad160e9/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container.stderr?ref=a396434136ad93f97f03f4316dd989073ad160e9", "patch": "@@ -1,67 +1,67 @@\n error[E0491]: in type `&'a WithAssoc<TheType<'b>>`, reference has a longer lifetime than the data it references\n-  --> $DIR/regions-outlives-projection-container.rs:40:13\n+  --> $DIR/regions-outlives-projection-container.rs:36:13\n    |\n LL |     let _x: &'a WithAssoc<TheType<'b>> = loop { };\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the pointer is valid for the lifetime 'a as defined on the function body at 32:15\n-  --> $DIR/regions-outlives-projection-container.rs:32:15\n+note: the pointer is valid for the lifetime 'a as defined on the function body at 28:15\n+  --> $DIR/regions-outlives-projection-container.rs:28:15\n    |\n LL | fn with_assoc<'a,'b>() {\n    |               ^^\n-note: but the referenced data is only valid for the lifetime 'b as defined on the function body at 32:18\n-  --> $DIR/regions-outlives-projection-container.rs:32:18\n+note: but the referenced data is only valid for the lifetime 'b as defined on the function body at 28:18\n+  --> $DIR/regions-outlives-projection-container.rs:28:18\n    |\n LL | fn with_assoc<'a,'b>() {\n    |                  ^^\n \n error[E0491]: in type `&'a WithoutAssoc<TheType<'b>>`, reference has a longer lifetime than the data it references\n-  --> $DIR/regions-outlives-projection-container.rs:58:13\n+  --> $DIR/regions-outlives-projection-container.rs:54:13\n    |\n LL |     let _x: &'a WithoutAssoc<TheType<'b>> = loop { };\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the pointer is valid for the lifetime 'a as defined on the function body at 54:18\n-  --> $DIR/regions-outlives-projection-container.rs:54:18\n+note: the pointer is valid for the lifetime 'a as defined on the function body at 50:18\n+  --> $DIR/regions-outlives-projection-container.rs:50:18\n    |\n LL | fn without_assoc<'a,'b>() {\n    |                  ^^\n-note: but the referenced data is only valid for the lifetime 'b as defined on the function body at 54:21\n-  --> $DIR/regions-outlives-projection-container.rs:54:21\n+note: but the referenced data is only valid for the lifetime 'b as defined on the function body at 50:21\n+  --> $DIR/regions-outlives-projection-container.rs:50:21\n    |\n LL | fn without_assoc<'a,'b>() {\n    |                     ^^\n \n error[E0491]: in type `&'a WithAssoc<TheType<'b>>`, reference has a longer lifetime than the data it references\n-  --> $DIR/regions-outlives-projection-container.rs:67:12\n+  --> $DIR/regions-outlives-projection-container.rs:63:12\n    |\n LL |     call::<&'a WithAssoc<TheType<'b>>>();\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the pointer is valid for the lifetime 'a as defined on the function body at 62:20\n-  --> $DIR/regions-outlives-projection-container.rs:62:20\n+note: the pointer is valid for the lifetime 'a as defined on the function body at 58:20\n+  --> $DIR/regions-outlives-projection-container.rs:58:20\n    |\n LL | fn call_with_assoc<'a,'b>() {\n    |                    ^^\n-note: but the referenced data is only valid for the lifetime 'b as defined on the function body at 62:23\n-  --> $DIR/regions-outlives-projection-container.rs:62:23\n+note: but the referenced data is only valid for the lifetime 'b as defined on the function body at 58:23\n+  --> $DIR/regions-outlives-projection-container.rs:58:23\n    |\n LL | fn call_with_assoc<'a,'b>() {\n    |                       ^^\n \n error[E0491]: in type `&'a WithoutAssoc<TheType<'b>>`, reference has a longer lifetime than the data it references\n-  --> $DIR/regions-outlives-projection-container.rs:74:12\n+  --> $DIR/regions-outlives-projection-container.rs:70:12\n    |\n LL |     call::<&'a WithoutAssoc<TheType<'b>>>();\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the pointer is valid for the lifetime 'a as defined on the function body at 71:23\n-  --> $DIR/regions-outlives-projection-container.rs:71:23\n+note: the pointer is valid for the lifetime 'a as defined on the function body at 67:23\n+  --> $DIR/regions-outlives-projection-container.rs:67:23\n    |\n LL | fn call_without_assoc<'a,'b>() {\n    |                       ^^\n-note: but the referenced data is only valid for the lifetime 'b as defined on the function body at 71:26\n-  --> $DIR/regions-outlives-projection-container.rs:71:26\n+note: but the referenced data is only valid for the lifetime 'b as defined on the function body at 67:26\n+  --> $DIR/regions-outlives-projection-container.rs:67:26\n    |\n LL | fn call_without_assoc<'a,'b>() {\n    |                          ^^"}, {"sha": "37005f839d4889225f682689417af88a55fc234d", "filename": "src/test/ui/specialization/defaultimpl/specialization-no-default.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a396434136ad93f97f03f4316dd989073ad160e9/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-no-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a396434136ad93f97f03f4316dd989073ad160e9/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-no-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-no-default.rs?ref=a396434136ad93f97f03f4316dd989073ad160e9", "patch": "@@ -3,9 +3,7 @@\n // Check a number of scenarios in which one impl tries to override another,\n // without correctly using `default`.\n \n-////////////////////////////////////////////////////////////////////////////////\n // Test 1: one layer of specialization, multiple methods, missing `default`\n-////////////////////////////////////////////////////////////////////////////////\n \n trait Foo {\n     fn foo(&self);\n@@ -25,9 +23,7 @@ impl Foo for u32 {\n     fn bar(&self) {} //~ ERROR E0520\n }\n \n-////////////////////////////////////////////////////////////////////////////////\n // Test 2: one layer of specialization, missing `default` on associated type\n-////////////////////////////////////////////////////////////////////////////////\n \n trait Bar {\n     type T;\n@@ -41,9 +37,7 @@ impl Bar for u8 {\n     type T = (); //~ ERROR E0520\n }\n \n-////////////////////////////////////////////////////////////////////////////////\n // Test 3a: multiple layers of specialization, missing interior `default`\n-////////////////////////////////////////////////////////////////////////////////\n \n trait Baz {\n     fn baz(&self);\n@@ -61,10 +55,8 @@ impl Baz for i32 {\n     fn baz(&self) {} //~ ERROR E0520\n }\n \n-////////////////////////////////////////////////////////////////////////////////\n // Test 3b: multiple layers of specialization, missing interior `default`,\n // redundant `default` in bottom layer.\n-////////////////////////////////////////////////////////////////////////////////\n \n trait Redundant {\n     fn redundant(&self);"}, {"sha": "13636b28b126c675f5e54eb7ea75b733a3e0310d", "filename": "src/test/ui/specialization/defaultimpl/specialization-no-default.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a396434136ad93f97f03f4316dd989073ad160e9/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-no-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a396434136ad93f97f03f4316dd989073ad160e9/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-no-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fspecialization-no-default.stderr?ref=a396434136ad93f97f03f4316dd989073ad160e9", "patch": "@@ -1,5 +1,5 @@\n error[E0520]: `foo` specializes an item from a parent `impl`, but that item is not marked `default`\n-  --> $DIR/specialization-no-default.rs:22:5\n+  --> $DIR/specialization-no-default.rs:20:5\n    |\n LL | / impl<T> Foo for T {\n LL | |     fn foo(&self) {}\n@@ -13,7 +13,7 @@ LL |       fn foo(&self) {}\n    = note: to specialize, `foo` in the parent `impl` must be marked `default`\n \n error[E0520]: `bar` specializes an item from a parent `impl`, but that item is not marked `default`\n-  --> $DIR/specialization-no-default.rs:25:5\n+  --> $DIR/specialization-no-default.rs:23:5\n    |\n LL | / impl<T> Foo for T {\n LL | |     fn foo(&self) {}\n@@ -27,7 +27,7 @@ LL |       fn bar(&self) {}\n    = note: to specialize, `bar` in the parent `impl` must be marked `default`\n \n error[E0520]: `T` specializes an item from a parent `impl`, but that item is not marked `default`\n-  --> $DIR/specialization-no-default.rs:41:5\n+  --> $DIR/specialization-no-default.rs:37:5\n    |\n LL | / impl<T> Bar for T {\n LL | |     type T = u8;\n@@ -40,7 +40,7 @@ LL |       type T = ();\n    = note: to specialize, `T` in the parent `impl` must be marked `default`\n \n error[E0520]: `baz` specializes an item from a parent `impl`, but that item is not marked `default`\n-  --> $DIR/specialization-no-default.rs:61:5\n+  --> $DIR/specialization-no-default.rs:55:5\n    |\n LL | / impl<T: Clone> Baz for T {\n LL | |     fn baz(&self) {}\n@@ -53,7 +53,7 @@ LL |       fn baz(&self) {}\n    = note: to specialize, `baz` in the parent `impl` must be marked `default`\n \n error[E0520]: `redundant` specializes an item from a parent `impl`, but that item is not marked `default`\n-  --> $DIR/specialization-no-default.rs:82:5\n+  --> $DIR/specialization-no-default.rs:74:5\n    |\n LL | / impl<T: Clone> Redundant for T {\n LL | |     fn redundant(&self) {}"}, {"sha": "57346b26d24ec2d8e85544aee516d8261e75dd1d", "filename": "src/test/ui/specialization/specialization-no-default.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a396434136ad93f97f03f4316dd989073ad160e9/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-no-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a396434136ad93f97f03f4316dd989073ad160e9/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-no-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-no-default.rs?ref=a396434136ad93f97f03f4316dd989073ad160e9", "patch": "@@ -3,9 +3,7 @@\n // Check a number of scenarios in which one impl tries to override another,\n // without correctly using `default`.\n \n-////////////////////////////////////////////////////////////////////////////////\n // Test 1: one layer of specialization, multiple methods, missing `default`\n-////////////////////////////////////////////////////////////////////////////////\n \n trait Foo {\n     fn foo(&self);\n@@ -25,9 +23,7 @@ impl Foo for u32 {\n     fn bar(&self) {} //~ ERROR E0520\n }\n \n-////////////////////////////////////////////////////////////////////////////////\n // Test 2: one layer of specialization, missing `default` on associated type\n-////////////////////////////////////////////////////////////////////////////////\n \n trait Bar {\n     type T;\n@@ -41,9 +37,7 @@ impl Bar for u8 {\n     type T = (); //~ ERROR E0520\n }\n \n-////////////////////////////////////////////////////////////////////////////////\n // Test 3a: multiple layers of specialization, missing interior `default`\n-////////////////////////////////////////////////////////////////////////////////\n \n trait Baz {\n     fn baz(&self);\n@@ -61,10 +55,8 @@ impl Baz for i32 {\n     fn baz(&self) {} //~ ERROR E0520\n }\n \n-////////////////////////////////////////////////////////////////////////////////\n // Test 3b: multiple layers of specialization, missing interior `default`,\n // redundant `default` in bottom layer.\n-////////////////////////////////////////////////////////////////////////////////\n \n trait Redundant {\n     fn redundant(&self);"}, {"sha": "992e9abbd4ce2e4db90a339393e1dc94e95bf2b9", "filename": "src/test/ui/specialization/specialization-no-default.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a396434136ad93f97f03f4316dd989073ad160e9/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-no-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a396434136ad93f97f03f4316dd989073ad160e9/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-no-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fspecialization-no-default.stderr?ref=a396434136ad93f97f03f4316dd989073ad160e9", "patch": "@@ -1,5 +1,5 @@\n error[E0520]: `foo` specializes an item from a parent `impl`, but that item is not marked `default`\n-  --> $DIR/specialization-no-default.rs:22:5\n+  --> $DIR/specialization-no-default.rs:20:5\n    |\n LL | / impl<T> Foo for T {\n LL | |     fn foo(&self) {}\n@@ -13,7 +13,7 @@ LL |       fn foo(&self) {}\n    = note: to specialize, `foo` in the parent `impl` must be marked `default`\n \n error[E0520]: `bar` specializes an item from a parent `impl`, but that item is not marked `default`\n-  --> $DIR/specialization-no-default.rs:25:5\n+  --> $DIR/specialization-no-default.rs:23:5\n    |\n LL | / impl<T> Foo for T {\n LL | |     fn foo(&self) {}\n@@ -27,7 +27,7 @@ LL |       fn bar(&self) {}\n    = note: to specialize, `bar` in the parent `impl` must be marked `default`\n \n error[E0520]: `T` specializes an item from a parent `impl`, but that item is not marked `default`\n-  --> $DIR/specialization-no-default.rs:41:5\n+  --> $DIR/specialization-no-default.rs:37:5\n    |\n LL | / impl<T> Bar for T {\n LL | |     type T = u8;\n@@ -40,7 +40,7 @@ LL |       type T = ();\n    = note: to specialize, `T` in the parent `impl` must be marked `default`\n \n error[E0520]: `baz` specializes an item from a parent `impl`, but that item is not marked `default`\n-  --> $DIR/specialization-no-default.rs:61:5\n+  --> $DIR/specialization-no-default.rs:55:5\n    |\n LL | / impl<T: Clone> Baz for T {\n LL | |     fn baz(&self) {}\n@@ -53,7 +53,7 @@ LL |       fn baz(&self) {}\n    = note: to specialize, `baz` in the parent `impl` must be marked `default`\n \n error[E0520]: `redundant` specializes an item from a parent `impl`, but that item is not marked `default`\n-  --> $DIR/specialization-no-default.rs:82:5\n+  --> $DIR/specialization-no-default.rs:74:5\n    |\n LL | / impl<T: Clone> Redundant for T {\n LL | |     fn redundant(&self) {}"}, {"sha": "afdfb96394bd0d8e1c4bc13d1c137ee46ec2760a", "filename": "src/test/ui/traits/traits-conditional-model-fn.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a396434136ad93f97f03f4316dd989073ad160e9/src%2Ftest%2Fui%2Ftraits%2Ftraits-conditional-model-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a396434136ad93f97f03f4316dd989073ad160e9/src%2Ftest%2Fui%2Ftraits%2Ftraits-conditional-model-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftraits-conditional-model-fn.rs?ref=a396434136ad93f97f03f4316dd989073ad160e9", "patch": "@@ -14,8 +14,6 @@ use go_trait::{Go, GoMut, GoOnce, go, go_mut, go_once};\n use std::rc::Rc;\n use std::cell::Cell;\n \n-///////////////////////////////////////////////////////////////////////////\n-\n struct SomeGoableThing {\n     counter: Rc<Cell<isize>>\n }\n@@ -26,8 +24,6 @@ impl Go for SomeGoableThing {\n     }\n }\n \n-///////////////////////////////////////////////////////////////////////////\n-\n struct SomeGoOnceableThing {\n     counter: Rc<Cell<isize>>\n }\n@@ -38,8 +34,6 @@ impl GoOnce for SomeGoOnceableThing {\n     }\n }\n \n-///////////////////////////////////////////////////////////////////////////\n-\n fn main() {\n     let counter = Rc::new(Cell::new(0));\n     let mut x = SomeGoableThing { counter: counter.clone() };"}]}