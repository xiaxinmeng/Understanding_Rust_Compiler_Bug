{"sha": "fb81c429ebd45f9ba2b1810f548cf59a45feb222", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiODFjNDI5ZWJkNDVmOWJhMmIxODEwZjU0OGNmNTlhNDVmZWIyMjI=", "commit": {"author": {"name": "csmoe", "email": "csmoe@msn.com", "date": "2020-05-05T15:24:34Z"}, "committer": {"name": "csmoe", "email": "csmoe@msn.com", "date": "2020-05-05T15:24:34Z"}, "message": "make yield span optional", "tree": {"sha": "347b877ebd80b5b1bb831e1ae25142ce32d3acd5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/347b877ebd80b5b1bb831e1ae25142ce32d3acd5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb81c429ebd45f9ba2b1810f548cf59a45feb222", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb81c429ebd45f9ba2b1810f548cf59a45feb222", "html_url": "https://github.com/rust-lang/rust/commit/fb81c429ebd45f9ba2b1810f548cf59a45feb222", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb81c429ebd45f9ba2b1810f548cf59a45feb222/comments", "author": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e07f63e79a618a0c5e53a71d053da0fa0dbc6970", "url": "https://api.github.com/repos/rust-lang/rust/commits/e07f63e79a618a0c5e53a71d053da0fa0dbc6970", "html_url": "https://github.com/rust-lang/rust/commit/e07f63e79a618a0c5e53a71d053da0fa0dbc6970"}], "stats": {"total": 18, "additions": 10, "deletions": 8}, "files": [{"sha": "cc89e59096d893662c232cebe91d5c33a6b63b83", "filename": "src/librustc_middle/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb81c429ebd45f9ba2b1810f548cf59a45feb222/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb81c429ebd45f9ba2b1810f548cf59a45feb222/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fcontext.rs?ref=fb81c429ebd45f9ba2b1810f548cf59a45feb222", "patch": "@@ -305,7 +305,7 @@ pub struct GeneratorInteriorTypeCause<'tcx> {\n     /// Span of the scope of the captured binding.\n     pub scope_span: Option<Span>,\n     /// Span of `.await` or `yield` expression.\n-    pub yield_span: Span,\n+    pub yield_span: Option<Span>,\n     /// Expr which the type evaluated from.\n     pub expr: Option<hir::HirId>,\n }"}, {"sha": "cd1c75dc5f291864ceb024d1f15a7e85aca7b812", "filename": "src/librustc_trait_selection/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fb81c429ebd45f9ba2b1810f548cf59a45feb222/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb81c429ebd45f9ba2b1810f548cf59a45feb222/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=fb81c429ebd45f9ba2b1810f548cf59a45feb222", "patch": "@@ -127,7 +127,7 @@ pub trait InferCtxtExt<'tcx> {\n         err: &mut DiagnosticBuilder<'_>,\n         target_span: Span,\n         scope_span: &Option<Span>,\n-        await_span: Span,\n+        yield_span: Option<Span>,\n         expr: Option<hir::HirId>,\n         snippet: String,\n         inner_generator_body: Option<&hir::Body<'_>>,\n@@ -1353,7 +1353,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         err: &mut DiagnosticBuilder<'_>,\n         target_span: Span,\n         scope_span: &Option<Span>,\n-        yield_span: Span,\n+        yield_span: Option<Span>,\n         expr: Option<hir::HirId>,\n         snippet: String,\n         inner_generator_body: Option<&hir::Body<'_>>,\n@@ -1446,11 +1446,13 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 \"note_obligation_cause_for_async_await generator_interior_types: {:#?}\",\n                 tables.generator_interior_types\n             );\n-            let mut span = MultiSpan::from_span(yield_span);\n-            span.push_span_label(\n-                yield_span,\n-                format!(\"{} occurs here, with `{}` maybe used later\", await_or_yield, snippet),\n-            );\n+\n+            if let Some(yield_span) = yield_span {\n+                let mut span = MultiSpan::from_span(yield_span);\n+                span.push_span_label(\n+                    yield_span,\n+                    format!(\"{} occurs here, with `{}` maybe used later\", await_or_yield, snippet),\n+                );\n \n             span.push_span_label(\n                 target_span,"}]}