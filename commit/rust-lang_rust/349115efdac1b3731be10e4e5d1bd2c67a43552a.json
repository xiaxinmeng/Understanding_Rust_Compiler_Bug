{"sha": "349115efdac1b3731be10e4e5d1bd2c67a43552a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0OTExNWVmZGFjMWIzNzMxYmUxMGU0ZTVkMWJkMmM2N2E0MzU1MmE=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-02-04T15:28:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-02-04T15:28:56Z"}, "message": "Rollup merge of #47896 - zackmdavis:and_the_case_of_the_necessary_unnecessary_parens, r=nikomatsakis\n\ndecline to lint technically-unnecessary parens in function or method arguments inside of nested macros\n\nIn #46980 (\"in which the unused-parens lint...\" (14982db2d6)), the\nunused-parens lint was made to check function and method arguments,\nwhich it previously did not (seemingly due to oversight rather than\nwillful design). However, in #47775 and discussion thereon,\nuser\u2013developers of Geal/nom and graphql-rust/juniper reported that the\nlint was seemingly erroneously triggering on certain complex macros in\nthose projects. While this doesn't seem like a bug in the lint in the\nparticular strict sense that the expanded code would, in fact, contain\nunncecessary parentheses, it also doesn't seem like the sort of thing\nmacro authors should have to think about: the spirit of the\nunused-parens lint is to prevent needless clutter in code, not to give\nmacro authors extra heartache in the handling of token trees.\n\nWe propose the expediency of declining to lint unused parentheses in\nfunction or method args inside of nested expansions: we believe that\nthis should eliminate the petty, troublesome lint warnings reported\nin the issue, without forgoing the benefits of the lint in simpler\nmacros.\n\nIt seemed like too much duplicated code for the `Call` and `MethodCall`\nmatch arms to duplicate the nested-macro check in addition to each\nhaving their own `for` loop, so this occasioned a slight refactor so\nthat the function and method cases could share code\u2014hopefully the\noverall intent is at least no less clear to the gentle reader.\n\nThis is concerning #47775.", "tree": {"sha": "8a1a258d0a7033d6baff66ad841f70d5d4ced5c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a1a258d0a7033d6baff66ad841f70d5d4ced5c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/349115efdac1b3731be10e4e5d1bd2c67a43552a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJadya4CRBK7hj4Ov3rIwAAdHIIAClPnmUPOkF6BtBOMfEvDPpl\nQZ48IbGVybKpmZl7eI6dKQ68g8II4bImoaIp/bxH2084Pdr1rzWAWYBEVqe1thlD\nfxshMGjBjaDYFb7U1Mu3f5Ecr7u5dzWn/1ipys7wXlL519Lrp3WDaE77u4uSrbzg\nPg518JMxZ2+Afs3ceMdmUcMX3Gi1DrjMXpLLlK2w6ELb9rW2d0d/52j7k+4QjEP9\nfbZ+sbi1oLWOUowAVhqXpIcBFFGn8/kvi71JSmHCkLQhBdGUFviq5IszPCc51TDi\nywr2QYS6YUBaxA7EL8ZZZBw8M4tRZUoUP82k8hZSmMYs4bhYO26MBDQDlBQkrpQ=\n=LxkK\n-----END PGP SIGNATURE-----\n", "payload": "tree 8a1a258d0a7033d6baff66ad841f70d5d4ced5c6\nparent f3dc75602f920e3f99d6e1cf18ce135639908e21\nparent 5985b0b03523f9fead022d55e8ecaaf001731d0b\nauthor kennytm <kennytm@gmail.com> 1517758136 +0800\ncommitter GitHub <noreply@github.com> 1517758136 +0800\n\nRollup merge of #47896 - zackmdavis:and_the_case_of_the_necessary_unnecessary_parens, r=nikomatsakis\n\ndecline to lint technically-unnecessary parens in function or method arguments inside of nested macros\n\nIn #46980 (\"in which the unused-parens lint...\" (14982db2d6)), the\nunused-parens lint was made to check function and method arguments,\nwhich it previously did not (seemingly due to oversight rather than\nwillful design). However, in #47775 and discussion thereon,\nuser\u2013developers of Geal/nom and graphql-rust/juniper reported that the\nlint was seemingly erroneously triggering on certain complex macros in\nthose projects. While this doesn't seem like a bug in the lint in the\nparticular strict sense that the expanded code would, in fact, contain\nunncecessary parentheses, it also doesn't seem like the sort of thing\nmacro authors should have to think about: the spirit of the\nunused-parens lint is to prevent needless clutter in code, not to give\nmacro authors extra heartache in the handling of token trees.\n\nWe propose the expediency of declining to lint unused parentheses in\nfunction or method args inside of nested expansions: we believe that\nthis should eliminate the petty, troublesome lint warnings reported\nin the issue, without forgoing the benefits of the lint in simpler\nmacros.\n\nIt seemed like too much duplicated code for the `Call` and `MethodCall`\nmatch arms to duplicate the nested-macro check in addition to each\nhaving their own `for` loop, so this occasioned a slight refactor so\nthat the function and method cases could share code\u2014hopefully the\noverall intent is at least no less clear to the gentle reader.\n\nThis is concerning #47775.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/349115efdac1b3731be10e4e5d1bd2c67a43552a", "html_url": "https://github.com/rust-lang/rust/commit/349115efdac1b3731be10e4e5d1bd2c67a43552a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/349115efdac1b3731be10e4e5d1bd2c67a43552a/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3dc75602f920e3f99d6e1cf18ce135639908e21", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3dc75602f920e3f99d6e1cf18ce135639908e21", "html_url": "https://github.com/rust-lang/rust/commit/f3dc75602f920e3f99d6e1cf18ce135639908e21"}, {"sha": "5985b0b03523f9fead022d55e8ecaaf001731d0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/5985b0b03523f9fead022d55e8ecaaf001731d0b", "html_url": "https://github.com/rust-lang/rust/commit/5985b0b03523f9fead022d55e8ecaaf001731d0b"}], "stats": {"total": 92, "additions": 83, "deletions": 9}, "files": [{"sha": "56f863ab3aa84e6ae881cab222e422793ea3cdbd", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 28, "deletions": 9, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/349115efdac1b3731be10e4e5d1bd2c67a43552a/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349115efdac1b3731be10e4e5d1bd2c67a43552a/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=349115efdac1b3731be10e4e5d1bd2c67a43552a", "patch": "@@ -302,19 +302,38 @@ impl EarlyLintPass for UnusedParens {\n             Assign(_, ref value) => (value, \"assigned value\", false),\n             AssignOp(.., ref value) => (value, \"assigned value\", false),\n             InPlace(_, ref value) => (value, \"emplacement value\", false),\n-            Call(_, ref args) => {\n-                for arg in args {\n-                    self.check_unused_parens_core(cx, arg, \"function argument\", false)\n+            // either function/method call, or something this lint doesn't care about\n+            ref call_or_other => {\n+                let args_to_check;\n+                let call_kind;\n+                match *call_or_other {\n+                    Call(_, ref args) => {\n+                        call_kind = \"function\";\n+                        args_to_check = &args[..];\n+                    },\n+                    MethodCall(_, ref args) => {\n+                        call_kind = \"method\";\n+                        // first \"argument\" is self (which sometimes needs parens)\n+                        args_to_check = &args[1..];\n+                    }\n+                    // actual catch-all arm\n+                    _ => { return; }\n                 }\n-                return;\n-            },\n-            MethodCall(_, ref args) => {\n-                for arg in &args[1..] { // first \"argument\" is self (which sometimes needs parens)\n-                    self.check_unused_parens_core(cx, arg, \"method argument\", false)\n+                // Don't lint if this is a nested macro expansion: otherwise, the lint could\n+                // trigger in situations that macro authors shouldn't have to care about, e.g.,\n+                // when a parenthesized token tree matched in one macro expansion is matched as\n+                // an expression in another and used as a fn/method argument (Issue #47775)\n+                if e.span.ctxt().outer().expn_info()\n+                    .map_or(false, |info| info.call_site.ctxt().outer()\n+                            .expn_info().is_some()) {\n+                        return;\n+                }\n+                let msg = format!(\"{} argument\", call_kind);\n+                for arg in args_to_check {\n+                    self.check_unused_parens_core(cx, arg, &msg, false);\n                 }\n                 return;\n             }\n-            _ => return,\n         };\n         self.check_unused_parens_core(cx, &value, msg, struct_lit_needs_parens);\n     }"}, {"sha": "b4e6c5074e3d394b331b5b0f815bb42dece60178", "filename": "src/test/ui/lint/issue-47775-nested-macro-unnecessary-parens-arg.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/349115efdac1b3731be10e4e5d1bd2c67a43552a/src%2Ftest%2Fui%2Flint%2Fissue-47775-nested-macro-unnecessary-parens-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349115efdac1b3731be10e4e5d1bd2c67a43552a/src%2Ftest%2Fui%2Flint%2Fissue-47775-nested-macro-unnecessary-parens-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-47775-nested-macro-unnecessary-parens-arg.rs?ref=349115efdac1b3731be10e4e5d1bd2c67a43552a", "patch": "@@ -0,0 +1,40 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// must-compile-successfully\n+\n+#![warn(unused_parens)]\n+\n+macro_rules! the_worship_the_heart_lifts_above {\n+    ( @as_expr, $e:expr) => { $e };\n+    ( @generate_fn, $name:tt) => {\n+        #[allow(dead_code)] fn the_moth_for_the_star<'a>() -> Option<&'a str> {\n+            Some(the_worship_the_heart_lifts_above!( @as_expr, $name ))\n+        }\n+    };\n+    ( $name:ident ) => { the_worship_the_heart_lifts_above!( @generate_fn, (stringify!($name))); }\n+    // \u2191 Notably, this does \ud835\ude2f\ud835\ude30\ud835\ude35 warn: we're declining to lint unused parens in\n+    // function/method arguments inside of nested macros because of situations\n+    // like those reported in Issue #47775\n+}\n+\n+macro_rules! and_the_heavens_reject_not {\n+    () => {\n+        // \u2193 But let's test that we still lint for unused parens around\n+        // function args inside of simple, one-deep macros.\n+        #[allow(dead_code)] fn the_night_for_the_morrow() -> Option<isize> { Some((2)) }\n+        //~^ WARN unnecessary parentheses around function argument\n+    }\n+}\n+\n+the_worship_the_heart_lifts_above!(rah);\n+and_the_heavens_reject_not!();\n+\n+fn main() {}"}, {"sha": "097ec1b1c80109a36923f3a67405a302bd956d6e", "filename": "src/test/ui/lint/issue-47775-nested-macro-unnecessary-parens-arg.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/349115efdac1b3731be10e4e5d1bd2c67a43552a/src%2Ftest%2Fui%2Flint%2Fissue-47775-nested-macro-unnecessary-parens-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/349115efdac1b3731be10e4e5d1bd2c67a43552a/src%2Ftest%2Fui%2Flint%2Fissue-47775-nested-macro-unnecessary-parens-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-47775-nested-macro-unnecessary-parens-arg.stderr?ref=349115efdac1b3731be10e4e5d1bd2c67a43552a", "patch": "@@ -0,0 +1,15 @@\n+warning: unnecessary parentheses around function argument\n+  --> $DIR/issue-47775-nested-macro-unnecessary-parens-arg.rs:32:83\n+   |\n+32 |         #[allow(dead_code)] fn the_night_for_the_morrow() -> Option<isize> { Some((2)) }\n+   |                                                                                   ^^^ help: remove these parentheses\n+...\n+38 | and_the_heavens_reject_not!();\n+   | ------------------------------ in this macro invocation\n+   |\n+note: lint level defined here\n+  --> $DIR/issue-47775-nested-macro-unnecessary-parens-arg.rs:13:9\n+   |\n+13 | #![warn(unused_parens)]\n+   |         ^^^^^^^^^^^^^\n+"}]}