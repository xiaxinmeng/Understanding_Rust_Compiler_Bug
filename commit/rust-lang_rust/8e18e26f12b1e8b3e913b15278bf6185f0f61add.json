{"sha": "8e18e26f12b1e8b3e913b15278bf6185f0f61add", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlMThlMjZmMTJiMWU4YjNlOTEzYjE1Mjc4YmY2MTg1ZjBmNjFhZGQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-13T19:47:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-13T19:47:23Z"}, "message": "Auto merge of #71105 - Dylan-DPC:rollup-nezezxr, r=Dylan-DPC\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #70656 (Improve scrollbar display in rustdoc)\n - #71051 (Suggest .into() over try_into() when it would work)\n - #71087 (Remove `FnCtxt::impl_self_ty`)\n - #71097 (Pattern docs)\n - #71101 (Miri: let machine hook dynamically decide about alignment checks)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "fd90df3ce2eceba4e9d3cf4689e2f6cb03404f29", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd90df3ce2eceba4e9d3cf4689e2f6cb03404f29"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e18e26f12b1e8b3e913b15278bf6185f0f61add", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e18e26f12b1e8b3e913b15278bf6185f0f61add", "html_url": "https://github.com/rust-lang/rust/commit/8e18e26f12b1e8b3e913b15278bf6185f0f61add", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e18e26f12b1e8b3e913b15278bf6185f0f61add/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c58c53274401acdc739f177aa3e408241e2e52d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/c58c53274401acdc739f177aa3e408241e2e52d8", "html_url": "https://github.com/rust-lang/rust/commit/c58c53274401acdc739f177aa3e408241e2e52d8"}, {"sha": "73e56dec9305f1d9d80844f95763bcf76c77131a", "url": "https://api.github.com/repos/rust-lang/rust/commits/73e56dec9305f1d9d80844f95763bcf76c77131a", "html_url": "https://github.com/rust-lang/rust/commit/73e56dec9305f1d9d80844f95763bcf76c77131a"}], "stats": {"total": 530, "additions": 413, "deletions": 117}, "files": [{"sha": "86e09b7be2d2d6233ddee6ee2efe759b08cae1b4", "filename": "src/liballoc/string.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8e18e26f12b1e8b3e913b15278bf6185f0f61add/src%2Fliballoc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e18e26f12b1e8b3e913b15278bf6185f0f61add/src%2Fliballoc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstring.rs?ref=8e18e26f12b1e8b3e913b15278bf6185f0f61add", "patch": "@@ -1827,7 +1827,13 @@ impl<'a> Extend<Cow<'a, str>> for String {\n     }\n }\n \n-/// A convenience impl that delegates to the impl for `&str`\n+/// A convenience impl that delegates to the impl for `&str`.\n+///\n+/// # Examples\n+///\n+/// ```\n+/// assert_eq!(String::from(\"Hello world\").find(\"world\"), Some(6));\n+/// ```\n #[unstable(\n     feature = \"pattern\",\n     reason = \"API not fully fleshed out and ready to be stabilized\","}, {"sha": "708e4e5560ecd34106736aec2d166bb3fdd57b7b", "filename": "src/libcore/str/pattern.rs", "status": "modified", "additions": 31, "deletions": 5, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/8e18e26f12b1e8b3e913b15278bf6185f0f61add/src%2Flibcore%2Fstr%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e18e26f12b1e8b3e913b15278bf6185f0f61add/src%2Flibcore%2Fstr%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fpattern.rs?ref=8e18e26f12b1e8b3e913b15278bf6185f0f61add", "patch": "@@ -451,7 +451,13 @@ unsafe impl<'a> ReverseSearcher<'a> for CharSearcher<'a> {\n \n impl<'a> DoubleEndedSearcher<'a> for CharSearcher<'a> {}\n \n-/// Searches for chars that are equal to a given char\n+/// Searches for chars that are equal to a given `char`.\n+///\n+/// # Examples\n+///\n+/// ```\n+/// assert_eq!(\"Hello world\".find('o'), Some(4));\n+/// ```\n impl<'a> Pattern<'a> for char {\n     type Searcher = CharSearcher<'a>;\n \n@@ -696,7 +702,14 @@ unsafe impl<'a, 'b> ReverseSearcher<'a> for CharSliceSearcher<'a, 'b> {\n \n impl<'a, 'b> DoubleEndedSearcher<'a> for CharSliceSearcher<'a, 'b> {}\n \n-/// Searches for chars that are equal to any of the chars in the array\n+/// Searches for chars that are equal to any of the chars in the array.\n+///\n+/// # Examples\n+///\n+/// ```\n+/// assert_eq!(\"Hello world\".find(&['l', 'l'] as &[_]), Some(2));\n+/// assert_eq!(\"Hello world\".find(&['l', 'l'][..]), Some(2));\n+/// ```\n impl<'a, 'b> Pattern<'a> for &'b [char] {\n     pattern_methods!(CharSliceSearcher<'a, 'b>, MultiCharEqPattern, CharSliceSearcher);\n }\n@@ -738,7 +751,14 @@ where\n \n impl<'a, F> DoubleEndedSearcher<'a> for CharPredicateSearcher<'a, F> where F: FnMut(char) -> bool {}\n \n-/// Searches for chars that match the given predicate\n+/// Searches for chars that match the given predicate.\n+///\n+/// # Examples\n+///\n+/// ```\n+/// assert_eq!(\"Hello world\".find(char::is_uppercase), Some(0));\n+/// assert_eq!(\"Hello world\".find(|c| \"aeiou\".contains(c)), Some(1));\n+/// ```\n impl<'a, F> Pattern<'a> for F\n where\n     F: FnMut(char) -> bool,\n@@ -763,6 +783,12 @@ impl<'a, 'b, 'c> Pattern<'a> for &'c &'b str {\n ///\n /// Will handle the pattern `\"\"` as returning empty matches at each character\n /// boundary.\n+///\n+/// # Examples\n+///\n+/// ```\n+/// assert_eq!(\"Hello world\".find(\"world\"), Some(6));\n+/// ```\n impl<'a, 'b> Pattern<'a> for &'b str {\n     type Searcher = StrSearcher<'a, 'b>;\n \n@@ -771,7 +797,7 @@ impl<'a, 'b> Pattern<'a> for &'b str {\n         StrSearcher::new(haystack, self)\n     }\n \n-    /// Checks whether the pattern matches at the front of the haystack\n+    /// Checks whether the pattern matches at the front of the haystack.\n     #[inline]\n     fn is_prefix_of(self, haystack: &'a str) -> bool {\n         haystack.as_bytes().starts_with(self.as_bytes())\n@@ -788,7 +814,7 @@ impl<'a, 'b> Pattern<'a> for &'b str {\n         }\n     }\n \n-    /// Checks whether the pattern matches at the back of the haystack\n+    /// Checks whether the pattern matches at the back of the haystack.\n     #[inline]\n     fn is_suffix_of(self, haystack: &'a str) -> bool {\n         haystack.as_bytes().ends_with(self.as_bytes())"}, {"sha": "3f9aa9ed02d2aeee76907cf7f94bed3032b7478b", "filename": "src/librustc_mir/const_eval/machine.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8e18e26f12b1e8b3e913b15278bf6185f0f61add/src%2Flibrustc_mir%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e18e26f12b1e8b3e913b15278bf6185f0f61add/src%2Flibrustc_mir%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Fmachine.rs?ref=8e18e26f12b1e8b3e913b15278bf6185f0f61add", "patch": "@@ -179,9 +179,12 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter {\n \n     const GLOBAL_KIND: Option<!> = None; // no copying of globals from `tcx` to machine memory\n \n-    // We do not check for alignment to avoid having to carry an `Align`\n-    // in `ConstValue::ByRef`.\n-    const CHECK_ALIGN: bool = false;\n+    #[inline(always)]\n+    fn enforce_alignment(_memory_extra: &Self::MemoryExtra) -> bool {\n+        // We do not check for alignment to avoid having to carry an `Align`\n+        // in `ConstValue::ByRef`.\n+        false\n+    }\n \n     #[inline(always)]\n     fn enforce_validity(_ecx: &InterpCx<'mir, 'tcx, Self>) -> bool {"}, {"sha": "dd3803eb96255ed41181a278f949f48c145d1f6c", "filename": "src/librustc_mir/interpret/machine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e18e26f12b1e8b3e913b15278bf6185f0f61add/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e18e26f12b1e8b3e913b15278bf6185f0f61add/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs?ref=8e18e26f12b1e8b3e913b15278bf6185f0f61add", "patch": "@@ -118,7 +118,7 @@ pub trait Machine<'mir, 'tcx>: Sized {\n     const GLOBAL_KIND: Option<Self::MemoryKind>;\n \n     /// Whether memory accesses should be alignment-checked.\n-    const CHECK_ALIGN: bool;\n+    fn enforce_alignment(memory_extra: &Self::MemoryExtra) -> bool;\n \n     /// Whether to enforce the validity invariant\n     fn enforce_validity(ecx: &InterpCx<'mir, 'tcx, Self>) -> bool;"}, {"sha": "bcad7855c373690963870560eda95850fdee620e", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8e18e26f12b1e8b3e913b15278bf6185f0f61add/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e18e26f12b1e8b3e913b15278bf6185f0f61add/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=8e18e26f12b1e8b3e913b15278bf6185f0f61add", "patch": "@@ -323,12 +323,12 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         size: Size,\n         align: Align,\n     ) -> InterpResult<'tcx, Option<Pointer<M::PointerTag>>> {\n-        let align = M::CHECK_ALIGN.then_some(align);\n+        let align = M::enforce_alignment(&self.extra).then_some(align);\n         self.check_ptr_access_align(sptr, size, align, CheckInAllocMsg::MemoryAccessTest)\n     }\n \n     /// Like `check_ptr_access`, but *definitely* checks alignment when `align`\n-    /// is `Some` (overriding `M::CHECK_ALIGN`). Also lets the caller control\n+    /// is `Some` (overriding `M::enforce_alignment`). Also lets the caller control\n     /// the error message for the out-of-bounds case.\n     pub fn check_ptr_access_align(\n         &self,"}, {"sha": "9a6d5ab34a5ace5b5f3b6e7a7b86a7333f8b0100", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8e18e26f12b1e8b3e913b15278bf6185f0f61add/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e18e26f12b1e8b3e913b15278bf6185f0f61add/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=8e18e26f12b1e8b3e913b15278bf6185f0f61add", "patch": "@@ -173,7 +173,10 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine {\n \n     const GLOBAL_KIND: Option<!> = None; // no copying of globals from `tcx` to machine memory\n \n-    const CHECK_ALIGN: bool = false;\n+    #[inline(always)]\n+    fn enforce_alignment(_memory_extra: &Self::MemoryExtra) -> bool {\n+        false\n+    }\n \n     #[inline(always)]\n     fn enforce_validity(_ecx: &InterpCx<'mir, 'tcx, Self>) -> bool {"}, {"sha": "2f890d4dabb5b813922ec9d942da374402891c10", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8e18e26f12b1e8b3e913b15278bf6185f0f61add/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e18e26f12b1e8b3e913b15278bf6185f0f61add/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=8e18e26f12b1e8b3e913b15278bf6185f0f61add", "patch": "@@ -753,17 +753,19 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n             match (&expected_ty.kind, &checked_ty.kind) {\n                 (&ty::Int(ref exp), &ty::Int(ref found)) => {\n-                    let is_fallible = match (found.bit_width(), exp.bit_width()) {\n-                        (Some(found), Some(exp)) if found > exp => true,\n+                    let is_fallible = match (exp.bit_width(), found.bit_width()) {\n+                        (Some(exp), Some(found)) if exp < found => true,\n+                        (None, Some(8 | 16)) => false,\n                         (None, _) | (_, None) => true,\n                         _ => false,\n                     };\n                     suggest_to_change_suffix_or_into(err, is_fallible);\n                     true\n                 }\n                 (&ty::Uint(ref exp), &ty::Uint(ref found)) => {\n-                    let is_fallible = match (found.bit_width(), exp.bit_width()) {\n-                        (Some(found), Some(exp)) if found > exp => true,\n+                    let is_fallible = match (exp.bit_width(), found.bit_width()) {\n+                        (Some(exp), Some(found)) if exp < found => true,\n+                        (None, Some(8 | 16)) => false,\n                         (None, _) | (_, None) => true,\n                         _ => false,\n                     };"}, {"sha": "3f81689cdc90f784195873eca8c8ded6ca42cb04", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e18e26f12b1e8b3e913b15278bf6185f0f61add/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e18e26f12b1e8b3e913b15278bf6185f0f61add/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=8e18e26f12b1e8b3e913b15278bf6185f0f61add", "patch": "@@ -209,7 +209,7 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n                     \"impl {:?} is not an inherent impl\",\n                     impl_def_id\n                 );\n-                self.impl_self_ty(self.span, impl_def_id).substs\n+                self.fresh_substs_for_item(self.span, impl_def_id)\n             }\n \n             probe::ObjectPick => {"}, {"sha": "fb1cde855657bcba494c36634b7bee82eb720c67", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8e18e26f12b1e8b3e913b15278bf6185f0f61add/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e18e26f12b1e8b3e913b15278bf6185f0f61add/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=8e18e26f12b1e8b3e913b15278bf6185f0f61add", "patch": "@@ -1128,8 +1128,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n     ) -> Option<PickResult<'tcx>> {\n         let tcx = self.tcx;\n \n-        // In general, during probing we erase regions. See\n-        // `impl_self_ty()` for an explanation.\n+        // In general, during probing we erase regions.\n         let region = tcx.lifetimes.re_erased;\n \n         let autoref_ty = tcx.mk_ref(region, ty::TypeAndMut { ty: self_ty, mutbl });\n@@ -1614,8 +1613,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                 } else {\n                     match param.kind {\n                         GenericParamDefKind::Lifetime => {\n-                            // In general, during probe we erase regions. See\n-                            // `impl_self_ty()` for an explanation.\n+                            // In general, during probe we erase regions.\n                             self.tcx.lifetimes.re_erased.into()\n                         }\n                         GenericParamDefKind::Type { .. } | GenericParamDefKind::Const => {"}, {"sha": "6e33acf9afccba90f9f6d2237b4562a90cc5b02b", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8e18e26f12b1e8b3e913b15278bf6185f0f61add/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e18e26f12b1e8b3e913b15278bf6185f0f61add/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=8e18e26f12b1e8b3e913b15278bf6185f0f61add", "patch": "@@ -117,7 +117,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             .span_if_local(item.def_id)\n                             .or_else(|| self.tcx.hir().span_if_local(impl_did));\n \n-                        let impl_ty = self.impl_self_ty(span, impl_did).ty;\n+                        let impl_ty = self.tcx.at(span).type_of(impl_did);\n \n                         let insertion = match self.tcx.impl_trait_ref(impl_did) {\n                             None => String::new(),\n@@ -537,7 +537,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         // When the \"method\" is resolved through dereferencing, we really want the\n                         // original type that has the associated function for accurate suggestions.\n                         // (#61411)\n-                        let ty = self.impl_self_ty(span, *impl_did).ty;\n+                        let ty = tcx.at(span).type_of(*impl_did);\n                         match (&ty.peel_refs().kind, &actual.peel_refs().kind) {\n                             (ty::Adt(def, _), ty::Adt(def_actual, _)) if def == def_actual => {\n                                 // Use `actual` as it will have more `substs` filled in."}, {"sha": "3aea6b2815fe401684a4571a2a61fba5c80bc64f", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8e18e26f12b1e8b3e913b15278bf6185f0f61add/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e18e26f12b1e8b3e913b15278bf6185f0f61add/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=8e18e26f12b1e8b3e913b15278bf6185f0f61add", "patch": "@@ -154,7 +154,6 @@ use std::slice;\n \n use crate::require_c_abi_if_c_variadic;\n use crate::util::common::indenter;\n-use crate::TypeAndSubsts;\n \n use self::autoderef::Autoderef;\n use self::callee::DeferredCallResolution;\n@@ -4251,24 +4250,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n-    // Determine the `Self` type, using fresh variables for all variables\n-    // declared on the impl declaration e.g., `impl<A,B> for Vec<(A,B)>`\n-    // would return `($0, $1)` where `$0` and `$1` are freshly instantiated type\n-    // variables.\n-    pub fn impl_self_ty(\n-        &self,\n-        span: Span, // (potential) receiver for this impl\n-        did: DefId,\n-    ) -> TypeAndSubsts<'tcx> {\n-        let ity = self.tcx.type_of(did);\n-        debug!(\"impl_self_ty: ity={:?}\", ity);\n-\n-        let substs = self.fresh_substs_for_item(span, did);\n-        let substd_ty = self.instantiate_type_scheme(span, &substs, &ity);\n-\n-        TypeAndSubsts { substs, ty: substd_ty }\n-    }\n-\n     /// Unifies the output type with the expected type early, for more coercions\n     /// and forward type information on the input expressions.\n     fn expected_inputs_for_expected_output("}, {"sha": "df8290fd018c5cd9d6bedd503ffe41f803e7940d", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8e18e26f12b1e8b3e913b15278bf6185f0f61add/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e18e26f12b1e8b3e913b15278bf6185f0f61add/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=8e18e26f12b1e8b3e913b15278bf6185f0f61add", "patch": "@@ -97,7 +97,6 @@ use rustc_infer::infer::{InferOk, TyCtxtInferExt};\n use rustc_infer::traits::TraitEngineExt as _;\n use rustc_middle::middle;\n use rustc_middle::ty::query::Providers;\n-use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_middle::util;\n use rustc_session::config::EntryFnType;\n@@ -111,10 +110,6 @@ use rustc_trait_selection::traits::{\n use std::iter;\n \n use astconv::{AstConv, Bounds};\n-pub struct TypeAndSubsts<'tcx> {\n-    substs: SubstsRef<'tcx>,\n-    ty: Ty<'tcx>,\n-}\n \n fn require_c_abi_if_c_variadic(tcx: TyCtxt<'_>, decl: &hir::FnDecl<'_>, abi: Abi, span: Span) {\n     if decl.c_variadic && !(abi == Abi::C || abi == Abi::Cdecl) {"}, {"sha": "ab524751723333911372306ca700f2705d75e9a3", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8e18e26f12b1e8b3e913b15278bf6185f0f61add/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/8e18e26f12b1e8b3e913b15278bf6185f0f61add/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=8e18e26f12b1e8b3e913b15278bf6185f0f61add", "patch": "@@ -184,6 +184,25 @@ nav.sub {\n \toverflow: auto;\n }\n \n+/* Improve the scrollbar display on firefox */\n+* {\n+\tscrollbar-width: initial;\n+}\n+.sidebar {\n+\tscrollbar-width: thin;\n+}\n+\n+/* Improve the scrollbar display on webkit-based browsers */\n+::-webkit-scrollbar {\n+\twidth: 12px;\n+}\n+.sidebar::-webkit-scrollbar {\n+\twidth: 8px;\n+}\n+::-webkit-scrollbar-track {\n+\t-webkit-box-shadow: inset 0;\n+}\n+\n .sidebar .block > ul > li {\n \tmargin-right: -10px;\n }"}, {"sha": "a2986c7b927e24fc5da504050259d85a57c30691", "filename": "src/librustdoc/html/static/themes/dark.css", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8e18e26f12b1e8b3e913b15278bf6185f0f61add/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/8e18e26f12b1e8b3e913b15278bf6185f0f61add/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css?ref=8e18e26f12b1e8b3e913b15278bf6185f0f61add", "patch": "@@ -32,6 +32,28 @@ pre {\n \tbackground-color: #505050;\n }\n \n+/* Improve the scrollbar display on firefox */\n+* {\n+\tscrollbar-color: rgb(64, 65, 67) #717171;\n+}\n+.sidebar {\n+\tscrollbar-color: rgba(32,34,37,.6) transparent;\n+}\n+\n+/* Improve the scrollbar display on webkit-based browsers */\n+::-webkit-scrollbar-track {\n+\tbackground-color: #717171;\n+}\n+::-webkit-scrollbar-thumb {\n+\tbackground-color: rgba(32, 34, 37, .6);\n+}\n+.sidebar::-webkit-scrollbar-track {\n+\tbackground-color: #717171;\n+}\n+.sidebar::-webkit-scrollbar-thumb {\n+\tbackground-color: rgba(32, 34, 37, .6);\n+}\n+\n .sidebar .current {\n \tbackground-color: #333;\n }"}, {"sha": "be173d8eb46d3bd6c0d0c4497732b6c771148a3e", "filename": "src/librustdoc/html/static/themes/light.css", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/8e18e26f12b1e8b3e913b15278bf6185f0f61add/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/8e18e26f12b1e8b3e913b15278bf6185f0f61add/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css?ref=8e18e26f12b1e8b3e913b15278bf6185f0f61add", "patch": "@@ -34,6 +34,29 @@ pre {\n \tbackground-color: #F1F1F1;\n }\n \n+/* Improve the scrollbar display on firefox */\n+* {\n+\tscrollbar-color: rgba(36, 37, 39, 0.6) #e6e6e6;\n+}\n+\n+.sidebar {\n+\tscrollbar-color: rgba(36, 37, 39, 0.6) #d9d9d9;\n+}\n+\n+/* Improve the scrollbar display on webkit-based browsers */\n+::-webkit-scrollbar-track {\n+\tbackground-color: #ecebeb;\n+}\n+::-webkit-scrollbar-thumb {\n+\tbackground-color: rgba(36, 37, 39, 0.6);\n+}\n+.sidebar::-webkit-scrollbar-track {\n+\tbackground-color: #dcdcdc;\n+}\n+.sidebar::-webkit-scrollbar-thumb {\n+\tbackground-color: rgba(36, 37, 39, 0.6);\n+}\n+\n .sidebar .current {\n \tbackground-color: #fff;\n }"}, {"sha": "c320f2bb7b446a30381097ecee8774bf8a8d7754", "filename": "src/test/ui/integer-literal-suffix-inference.rs", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/8e18e26f12b1e8b3e913b15278bf6185f0f61add/src%2Ftest%2Fui%2Finteger-literal-suffix-inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e18e26f12b1e8b3e913b15278bf6185f0f61add/src%2Ftest%2Fui%2Finteger-literal-suffix-inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finteger-literal-suffix-inference.rs?ref=8e18e26f12b1e8b3e913b15278bf6185f0f61add", "patch": "@@ -16,6 +16,7 @@ fn main() {\n     fn id_i16(n: i16) -> i16 { n }\n     fn id_i32(n: i32) -> i32 { n }\n     fn id_i64(n: i64) -> i64 { n }\n+    fn id_isize(n: isize) -> isize { n }\n \n     // the smallest values that need these types\n     let b8: u8 = 16;\n@@ -27,6 +28,11 @@ fn main() {\n     fn id_u16(n: u16) -> u16 { n }\n     fn id_u32(n: u32) -> u32 { n }\n     fn id_u64(n: u64) -> u64 { n }\n+    fn id_usize(n: usize) -> usize { n }\n+\n+    // Values for testing *size\n+    let asize: isize = 1;\n+    let bsize: usize = 3;\n \n     id_i8(a8); // ok\n     id_i8(a16);\n@@ -38,6 +44,9 @@ fn main() {\n     id_i8(a64);\n     //~^ ERROR mismatched types\n     //~| expected `i8`, found `i64`\n+    id_i8(asize);\n+    //~^ ERROR mismatched types\n+    //~| expected `i8`, found `isize`\n \n     id_i16(a8);\n     //~^ ERROR mismatched types\n@@ -49,6 +58,9 @@ fn main() {\n     id_i16(a64);\n     //~^ ERROR mismatched types\n     //~| expected `i16`, found `i64`\n+    id_i16(asize);\n+    //~^ ERROR mismatched types\n+    //~| expected `i16`, found `isize`\n \n     id_i32(a8);\n     //~^ ERROR mismatched types\n@@ -60,6 +72,9 @@ fn main() {\n     id_i32(a64);\n     //~^ ERROR mismatched types\n     //~| expected `i32`, found `i64`\n+    id_i32(asize);\n+    //~^ ERROR mismatched types\n+    //~| expected `i32`, found `isize`\n \n     id_i64(a8);\n     //~^ ERROR mismatched types\n@@ -71,6 +86,23 @@ fn main() {\n     //~^ ERROR mismatched types\n     //~| expected `i64`, found `i32`\n     id_i64(a64); // ok\n+    id_i64(asize);\n+    //~^ ERROR mismatched types\n+    //~| expected `i64`, found `isize`\n+\n+    id_isize(a8);\n+    //~^ ERROR mismatched types\n+    //~| expected `isize`, found `i8`\n+    id_isize(a16);\n+    //~^ ERROR mismatched types\n+    //~| expected `isize`, found `i16`\n+    id_isize(a32);\n+    //~^ ERROR mismatched types\n+    //~| expected `isize`, found `i32`\n+    id_isize(a64);\n+    //~^ ERROR mismatched types\n+    //~| expected `isize`, found `i64`\n+    id_isize(asize); //ok\n \n     id_i8(c8); // ok\n     id_i8(c16);\n@@ -126,6 +158,9 @@ fn main() {\n     id_u8(b64);\n     //~^ ERROR mismatched types\n     //~| expected `u8`, found `u64`\n+    id_u8(bsize);\n+    //~^ ERROR mismatched types\n+    //~| expected `u8`, found `usize`\n \n     id_u16(b8);\n     //~^ ERROR mismatched types\n@@ -137,6 +172,9 @@ fn main() {\n     id_u16(b64);\n     //~^ ERROR mismatched types\n     //~| expected `u16`, found `u64`\n+    id_u16(bsize);\n+    //~^ ERROR mismatched types\n+    //~| expected `u16`, found `usize`\n \n     id_u32(b8);\n     //~^ ERROR mismatched types\n@@ -148,6 +186,9 @@ fn main() {\n     id_u32(b64);\n     //~^ ERROR mismatched types\n     //~| expected `u32`, found `u64`\n+    id_u32(bsize);\n+    //~^ ERROR mismatched types\n+    //~| expected `u32`, found `usize`\n \n     id_u64(b8);\n     //~^ ERROR mismatched types\n@@ -159,4 +200,21 @@ fn main() {\n     //~^ ERROR mismatched types\n     //~| expected `u64`, found `u32`\n     id_u64(b64); // ok\n+    id_u64(bsize);\n+    //~^ ERROR mismatched types\n+    //~| expected `u64`, found `usize`\n+\n+    id_usize(b8);\n+    //~^ ERROR mismatched types\n+    //~| expected `usize`, found `u8`\n+    id_usize(b16);\n+    //~^ ERROR mismatched types\n+    //~| expected `usize`, found `u16`\n+    id_usize(b32);\n+    //~^ ERROR mismatched types\n+    //~| expected `usize`, found `u32`\n+    id_usize(b64);\n+    //~^ ERROR mismatched types\n+    //~| expected `usize`, found `u64`\n+    id_usize(bsize); //ok\n }"}, {"sha": "b8502768e1d42847aed2d827e196c3355202eadb", "filename": "src/test/ui/integer-literal-suffix-inference.stderr", "status": "modified", "additions": 205, "deletions": 37, "changes": 242, "blob_url": "https://github.com/rust-lang/rust/blob/8e18e26f12b1e8b3e913b15278bf6185f0f61add/src%2Ftest%2Fui%2Finteger-literal-suffix-inference.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e18e26f12b1e8b3e913b15278bf6185f0f61add/src%2Ftest%2Fui%2Finteger-literal-suffix-inference.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finteger-literal-suffix-inference.stderr?ref=8e18e26f12b1e8b3e913b15278bf6185f0f61add", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/integer-literal-suffix-inference.rs:32:11\n+  --> $DIR/integer-literal-suffix-inference.rs:38:11\n    |\n LL |     id_i8(a16);\n    |           ^^^ expected `i8`, found `i16`\n@@ -10,7 +10,7 @@ LL |     id_i8(a16.try_into().unwrap());\n    |           ^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/integer-literal-suffix-inference.rs:35:11\n+  --> $DIR/integer-literal-suffix-inference.rs:41:11\n    |\n LL |     id_i8(a32);\n    |           ^^^ expected `i8`, found `i32`\n@@ -21,7 +21,7 @@ LL |     id_i8(a32.try_into().unwrap());\n    |           ^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/integer-literal-suffix-inference.rs:38:11\n+  --> $DIR/integer-literal-suffix-inference.rs:44:11\n    |\n LL |     id_i8(a64);\n    |           ^^^ expected `i8`, found `i64`\n@@ -32,7 +32,18 @@ LL |     id_i8(a64.try_into().unwrap());\n    |           ^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/integer-literal-suffix-inference.rs:42:12\n+  --> $DIR/integer-literal-suffix-inference.rs:47:11\n+   |\n+LL |     id_i8(asize);\n+   |           ^^^^^ expected `i8`, found `isize`\n+   |\n+help: you can convert an `isize` to `i8` and panic if the converted value wouldn't fit\n+   |\n+LL |     id_i8(asize.try_into().unwrap());\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/integer-literal-suffix-inference.rs:51:12\n    |\n LL |     id_i16(a8);\n    |            ^^\n@@ -41,7 +52,7 @@ LL |     id_i16(a8);\n    |            help: you can convert an `i8` to `i16`: `a8.into()`\n \n error[E0308]: mismatched types\n-  --> $DIR/integer-literal-suffix-inference.rs:46:12\n+  --> $DIR/integer-literal-suffix-inference.rs:55:12\n    |\n LL |     id_i16(a32);\n    |            ^^^ expected `i16`, found `i32`\n@@ -52,7 +63,7 @@ LL |     id_i16(a32.try_into().unwrap());\n    |            ^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/integer-literal-suffix-inference.rs:49:12\n+  --> $DIR/integer-literal-suffix-inference.rs:58:12\n    |\n LL |     id_i16(a64);\n    |            ^^^ expected `i16`, found `i64`\n@@ -63,7 +74,18 @@ LL |     id_i16(a64.try_into().unwrap());\n    |            ^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/integer-literal-suffix-inference.rs:53:12\n+  --> $DIR/integer-literal-suffix-inference.rs:61:12\n+   |\n+LL |     id_i16(asize);\n+   |            ^^^^^ expected `i16`, found `isize`\n+   |\n+help: you can convert an `isize` to `i16` and panic if the converted value wouldn't fit\n+   |\n+LL |     id_i16(asize.try_into().unwrap());\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/integer-literal-suffix-inference.rs:65:12\n    |\n LL |     id_i32(a8);\n    |            ^^\n@@ -72,7 +94,7 @@ LL |     id_i32(a8);\n    |            help: you can convert an `i8` to `i32`: `a8.into()`\n \n error[E0308]: mismatched types\n-  --> $DIR/integer-literal-suffix-inference.rs:56:12\n+  --> $DIR/integer-literal-suffix-inference.rs:68:12\n    |\n LL |     id_i32(a16);\n    |            ^^^\n@@ -81,7 +103,7 @@ LL |     id_i32(a16);\n    |            help: you can convert an `i16` to `i32`: `a16.into()`\n \n error[E0308]: mismatched types\n-  --> $DIR/integer-literal-suffix-inference.rs:60:12\n+  --> $DIR/integer-literal-suffix-inference.rs:72:12\n    |\n LL |     id_i32(a64);\n    |            ^^^ expected `i32`, found `i64`\n@@ -92,7 +114,18 @@ LL |     id_i32(a64.try_into().unwrap());\n    |            ^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/integer-literal-suffix-inference.rs:64:12\n+  --> $DIR/integer-literal-suffix-inference.rs:75:12\n+   |\n+LL |     id_i32(asize);\n+   |            ^^^^^ expected `i32`, found `isize`\n+   |\n+help: you can convert an `isize` to `i32` and panic if the converted value wouldn't fit\n+   |\n+LL |     id_i32(asize.try_into().unwrap());\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/integer-literal-suffix-inference.rs:79:12\n    |\n LL |     id_i64(a8);\n    |            ^^\n@@ -101,7 +134,7 @@ LL |     id_i64(a8);\n    |            help: you can convert an `i8` to `i64`: `a8.into()`\n \n error[E0308]: mismatched types\n-  --> $DIR/integer-literal-suffix-inference.rs:67:12\n+  --> $DIR/integer-literal-suffix-inference.rs:82:12\n    |\n LL |     id_i64(a16);\n    |            ^^^\n@@ -110,7 +143,7 @@ LL |     id_i64(a16);\n    |            help: you can convert an `i16` to `i64`: `a16.into()`\n \n error[E0308]: mismatched types\n-  --> $DIR/integer-literal-suffix-inference.rs:70:12\n+  --> $DIR/integer-literal-suffix-inference.rs:85:12\n    |\n LL |     id_i64(a32);\n    |            ^^^\n@@ -119,7 +152,58 @@ LL |     id_i64(a32);\n    |            help: you can convert an `i32` to `i64`: `a32.into()`\n \n error[E0308]: mismatched types\n-  --> $DIR/integer-literal-suffix-inference.rs:76:11\n+  --> $DIR/integer-literal-suffix-inference.rs:89:12\n+   |\n+LL |     id_i64(asize);\n+   |            ^^^^^ expected `i64`, found `isize`\n+   |\n+help: you can convert an `isize` to `i64` and panic if the converted value wouldn't fit\n+   |\n+LL |     id_i64(asize.try_into().unwrap());\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/integer-literal-suffix-inference.rs:93:14\n+   |\n+LL |     id_isize(a8);\n+   |              ^^\n+   |              |\n+   |              expected `isize`, found `i8`\n+   |              help: you can convert an `i8` to `isize`: `a8.into()`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/integer-literal-suffix-inference.rs:96:14\n+   |\n+LL |     id_isize(a16);\n+   |              ^^^\n+   |              |\n+   |              expected `isize`, found `i16`\n+   |              help: you can convert an `i16` to `isize`: `a16.into()`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/integer-literal-suffix-inference.rs:99:14\n+   |\n+LL |     id_isize(a32);\n+   |              ^^^ expected `isize`, found `i32`\n+   |\n+help: you can convert an `i32` to `isize` and panic if the converted value wouldn't fit\n+   |\n+LL |     id_isize(a32.try_into().unwrap());\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/integer-literal-suffix-inference.rs:102:14\n+   |\n+LL |     id_isize(a64);\n+   |              ^^^ expected `isize`, found `i64`\n+   |\n+help: you can convert an `i64` to `isize` and panic if the converted value wouldn't fit\n+   |\n+LL |     id_isize(a64.try_into().unwrap());\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/integer-literal-suffix-inference.rs:108:11\n    |\n LL |     id_i8(c16);\n    |           ^^^ expected `i8`, found `i16`\n@@ -130,7 +214,7 @@ LL |     id_i8(c16.try_into().unwrap());\n    |           ^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/integer-literal-suffix-inference.rs:79:11\n+  --> $DIR/integer-literal-suffix-inference.rs:111:11\n    |\n LL |     id_i8(c32);\n    |           ^^^ expected `i8`, found `i32`\n@@ -141,7 +225,7 @@ LL |     id_i8(c32.try_into().unwrap());\n    |           ^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/integer-literal-suffix-inference.rs:82:11\n+  --> $DIR/integer-literal-suffix-inference.rs:114:11\n    |\n LL |     id_i8(c64);\n    |           ^^^ expected `i8`, found `i64`\n@@ -152,7 +236,7 @@ LL |     id_i8(c64.try_into().unwrap());\n    |           ^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/integer-literal-suffix-inference.rs:86:12\n+  --> $DIR/integer-literal-suffix-inference.rs:118:12\n    |\n LL |     id_i16(c8);\n    |            ^^\n@@ -161,7 +245,7 @@ LL |     id_i16(c8);\n    |            help: you can convert an `i8` to `i16`: `c8.into()`\n \n error[E0308]: mismatched types\n-  --> $DIR/integer-literal-suffix-inference.rs:90:12\n+  --> $DIR/integer-literal-suffix-inference.rs:122:12\n    |\n LL |     id_i16(c32);\n    |            ^^^ expected `i16`, found `i32`\n@@ -172,7 +256,7 @@ LL |     id_i16(c32.try_into().unwrap());\n    |            ^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/integer-literal-suffix-inference.rs:93:12\n+  --> $DIR/integer-literal-suffix-inference.rs:125:12\n    |\n LL |     id_i16(c64);\n    |            ^^^ expected `i16`, found `i64`\n@@ -183,7 +267,7 @@ LL |     id_i16(c64.try_into().unwrap());\n    |            ^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/integer-literal-suffix-inference.rs:97:12\n+  --> $DIR/integer-literal-suffix-inference.rs:129:12\n    |\n LL |     id_i32(c8);\n    |            ^^\n@@ -192,7 +276,7 @@ LL |     id_i32(c8);\n    |            help: you can convert an `i8` to `i32`: `c8.into()`\n \n error[E0308]: mismatched types\n-  --> $DIR/integer-literal-suffix-inference.rs:100:12\n+  --> $DIR/integer-literal-suffix-inference.rs:132:12\n    |\n LL |     id_i32(c16);\n    |            ^^^\n@@ -201,7 +285,7 @@ LL |     id_i32(c16);\n    |            help: you can convert an `i16` to `i32`: `c16.into()`\n \n error[E0308]: mismatched types\n-  --> $DIR/integer-literal-suffix-inference.rs:104:12\n+  --> $DIR/integer-literal-suffix-inference.rs:136:12\n    |\n LL |     id_i32(c64);\n    |            ^^^ expected `i32`, found `i64`\n@@ -212,7 +296,7 @@ LL |     id_i32(c64.try_into().unwrap());\n    |            ^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/integer-literal-suffix-inference.rs:108:12\n+  --> $DIR/integer-literal-suffix-inference.rs:140:12\n    |\n LL |     id_i64(a8);\n    |            ^^\n@@ -221,7 +305,7 @@ LL |     id_i64(a8);\n    |            help: you can convert an `i8` to `i64`: `a8.into()`\n \n error[E0308]: mismatched types\n-  --> $DIR/integer-literal-suffix-inference.rs:111:12\n+  --> $DIR/integer-literal-suffix-inference.rs:143:12\n    |\n LL |     id_i64(a16);\n    |            ^^^\n@@ -230,7 +314,7 @@ LL |     id_i64(a16);\n    |            help: you can convert an `i16` to `i64`: `a16.into()`\n \n error[E0308]: mismatched types\n-  --> $DIR/integer-literal-suffix-inference.rs:114:12\n+  --> $DIR/integer-literal-suffix-inference.rs:146:12\n    |\n LL |     id_i64(a32);\n    |            ^^^\n@@ -239,7 +323,7 @@ LL |     id_i64(a32);\n    |            help: you can convert an `i32` to `i64`: `a32.into()`\n \n error[E0308]: mismatched types\n-  --> $DIR/integer-literal-suffix-inference.rs:120:11\n+  --> $DIR/integer-literal-suffix-inference.rs:152:11\n    |\n LL |     id_u8(b16);\n    |           ^^^ expected `u8`, found `u16`\n@@ -250,7 +334,7 @@ LL |     id_u8(b16.try_into().unwrap());\n    |           ^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/integer-literal-suffix-inference.rs:123:11\n+  --> $DIR/integer-literal-suffix-inference.rs:155:11\n    |\n LL |     id_u8(b32);\n    |           ^^^ expected `u8`, found `u32`\n@@ -261,7 +345,7 @@ LL |     id_u8(b32.try_into().unwrap());\n    |           ^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/integer-literal-suffix-inference.rs:126:11\n+  --> $DIR/integer-literal-suffix-inference.rs:158:11\n    |\n LL |     id_u8(b64);\n    |           ^^^ expected `u8`, found `u64`\n@@ -272,7 +356,18 @@ LL |     id_u8(b64.try_into().unwrap());\n    |           ^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/integer-literal-suffix-inference.rs:130:12\n+  --> $DIR/integer-literal-suffix-inference.rs:161:11\n+   |\n+LL |     id_u8(bsize);\n+   |           ^^^^^ expected `u8`, found `usize`\n+   |\n+help: you can convert an `usize` to `u8` and panic if the converted value wouldn't fit\n+   |\n+LL |     id_u8(bsize.try_into().unwrap());\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/integer-literal-suffix-inference.rs:165:12\n    |\n LL |     id_u16(b8);\n    |            ^^\n@@ -281,7 +376,7 @@ LL |     id_u16(b8);\n    |            help: you can convert an `u8` to `u16`: `b8.into()`\n \n error[E0308]: mismatched types\n-  --> $DIR/integer-literal-suffix-inference.rs:134:12\n+  --> $DIR/integer-literal-suffix-inference.rs:169:12\n    |\n LL |     id_u16(b32);\n    |            ^^^ expected `u16`, found `u32`\n@@ -292,7 +387,7 @@ LL |     id_u16(b32.try_into().unwrap());\n    |            ^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/integer-literal-suffix-inference.rs:137:12\n+  --> $DIR/integer-literal-suffix-inference.rs:172:12\n    |\n LL |     id_u16(b64);\n    |            ^^^ expected `u16`, found `u64`\n@@ -303,7 +398,18 @@ LL |     id_u16(b64.try_into().unwrap());\n    |            ^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/integer-literal-suffix-inference.rs:141:12\n+  --> $DIR/integer-literal-suffix-inference.rs:175:12\n+   |\n+LL |     id_u16(bsize);\n+   |            ^^^^^ expected `u16`, found `usize`\n+   |\n+help: you can convert an `usize` to `u16` and panic if the converted value wouldn't fit\n+   |\n+LL |     id_u16(bsize.try_into().unwrap());\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/integer-literal-suffix-inference.rs:179:12\n    |\n LL |     id_u32(b8);\n    |            ^^\n@@ -312,7 +418,7 @@ LL |     id_u32(b8);\n    |            help: you can convert an `u8` to `u32`: `b8.into()`\n \n error[E0308]: mismatched types\n-  --> $DIR/integer-literal-suffix-inference.rs:144:12\n+  --> $DIR/integer-literal-suffix-inference.rs:182:12\n    |\n LL |     id_u32(b16);\n    |            ^^^\n@@ -321,7 +427,7 @@ LL |     id_u32(b16);\n    |            help: you can convert an `u16` to `u32`: `b16.into()`\n \n error[E0308]: mismatched types\n-  --> $DIR/integer-literal-suffix-inference.rs:148:12\n+  --> $DIR/integer-literal-suffix-inference.rs:186:12\n    |\n LL |     id_u32(b64);\n    |            ^^^ expected `u32`, found `u64`\n@@ -332,7 +438,18 @@ LL |     id_u32(b64.try_into().unwrap());\n    |            ^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/integer-literal-suffix-inference.rs:152:12\n+  --> $DIR/integer-literal-suffix-inference.rs:189:12\n+   |\n+LL |     id_u32(bsize);\n+   |            ^^^^^ expected `u32`, found `usize`\n+   |\n+help: you can convert an `usize` to `u32` and panic if the converted value wouldn't fit\n+   |\n+LL |     id_u32(bsize.try_into().unwrap());\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/integer-literal-suffix-inference.rs:193:12\n    |\n LL |     id_u64(b8);\n    |            ^^\n@@ -341,7 +458,7 @@ LL |     id_u64(b8);\n    |            help: you can convert an `u8` to `u64`: `b8.into()`\n \n error[E0308]: mismatched types\n-  --> $DIR/integer-literal-suffix-inference.rs:155:12\n+  --> $DIR/integer-literal-suffix-inference.rs:196:12\n    |\n LL |     id_u64(b16);\n    |            ^^^\n@@ -350,14 +467,65 @@ LL |     id_u64(b16);\n    |            help: you can convert an `u16` to `u64`: `b16.into()`\n \n error[E0308]: mismatched types\n-  --> $DIR/integer-literal-suffix-inference.rs:158:12\n+  --> $DIR/integer-literal-suffix-inference.rs:199:12\n    |\n LL |     id_u64(b32);\n    |            ^^^\n    |            |\n    |            expected `u64`, found `u32`\n    |            help: you can convert an `u32` to `u64`: `b32.into()`\n \n-error: aborting due to 36 previous errors\n+error[E0308]: mismatched types\n+  --> $DIR/integer-literal-suffix-inference.rs:203:12\n+   |\n+LL |     id_u64(bsize);\n+   |            ^^^^^ expected `u64`, found `usize`\n+   |\n+help: you can convert an `usize` to `u64` and panic if the converted value wouldn't fit\n+   |\n+LL |     id_u64(bsize.try_into().unwrap());\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/integer-literal-suffix-inference.rs:207:14\n+   |\n+LL |     id_usize(b8);\n+   |              ^^\n+   |              |\n+   |              expected `usize`, found `u8`\n+   |              help: you can convert an `u8` to `usize`: `b8.into()`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/integer-literal-suffix-inference.rs:210:14\n+   |\n+LL |     id_usize(b16);\n+   |              ^^^\n+   |              |\n+   |              expected `usize`, found `u16`\n+   |              help: you can convert an `u16` to `usize`: `b16.into()`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/integer-literal-suffix-inference.rs:213:14\n+   |\n+LL |     id_usize(b32);\n+   |              ^^^ expected `usize`, found `u32`\n+   |\n+help: you can convert an `u32` to `usize` and panic if the converted value wouldn't fit\n+   |\n+LL |     id_usize(b32.try_into().unwrap());\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0308]: mismatched types\n+  --> $DIR/integer-literal-suffix-inference.rs:216:14\n+   |\n+LL |     id_usize(b64);\n+   |              ^^^ expected `usize`, found `u64`\n+   |\n+help: you can convert an `u64` to `usize` and panic if the converted value wouldn't fit\n+   |\n+LL |     id_usize(b64.try_into().unwrap());\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 52 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}, {"sha": "40cb86e5716a0b3a6aeac905242d90d9856ae406", "filename": "src/test/ui/issues/issue-18446.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e18e26f12b1e8b3e913b15278bf6185f0f61add/src%2Ftest%2Fui%2Fissues%2Fissue-18446.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e18e26f12b1e8b3e913b15278bf6185f0f61add/src%2Ftest%2Fui%2Fissues%2Fissue-18446.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18446.stderr?ref=8e18e26f12b1e8b3e913b15278bf6185f0f61add", "patch": "@@ -7,7 +7,7 @@ LL |     x.foo();\n    |     | multiple `foo` found\n    |     help: disambiguate the method call for candidate #2: `T::foo(&x)`\n    |\n-note: candidate #1 is defined in an impl for the type `dyn T`\n+note: candidate #1 is defined in an impl for the type `(dyn T + 'a)`\n   --> $DIR/issue-18446.rs:9:5\n    |\n LL |     fn foo(&self) {}"}, {"sha": "f6820be7e7709e957e4fdf0062deae16cc7ea533", "filename": "src/test/ui/methods/method-deref-to-same-trait-object-with-separate-params.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8e18e26f12b1e8b3e913b15278bf6185f0f61add/src%2Ftest%2Fui%2Fmethods%2Fmethod-deref-to-same-trait-object-with-separate-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e18e26f12b1e8b3e913b15278bf6185f0f61add/src%2Ftest%2Fui%2Fmethods%2Fmethod-deref-to-same-trait-object-with-separate-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-deref-to-same-trait-object-with-separate-params.stderr?ref=8e18e26f12b1e8b3e913b15278bf6185f0f61add", "patch": "@@ -20,12 +20,12 @@ error[E0034]: multiple applicable items in scope\n LL |     let z = x.foo();\n    |               ^^^ multiple `foo` found\n    |\n-note: candidate #1 is defined in an impl of the trait `internal::X` for the type `_`\n+note: candidate #1 is defined in an impl of the trait `internal::X` for the type `T`\n   --> $DIR/method-deref-to-same-trait-object-with-separate-params.rs:43:9\n    |\n LL |         fn foo(self: Smaht<Self, u64>) -> u64 {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: candidate #2 is defined in an impl of the trait `nuisance_foo::NuisanceFoo` for the type `_`\n+note: candidate #2 is defined in an impl of the trait `nuisance_foo::NuisanceFoo` for the type `T`\n   --> $DIR/method-deref-to-same-trait-object-with-separate-params.rs:70:9\n    |\n LL |         fn foo(self) {}"}, {"sha": "31acdb8faf6a2da0d44691284097263338ed2e4c", "filename": "src/test/ui/numeric/numeric-cast.fixed", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8e18e26f12b1e8b3e913b15278bf6185f0f61add/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/8e18e26f12b1e8b3e913b15278bf6185f0f61add/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast.fixed?ref=8e18e26f12b1e8b3e913b15278bf6185f0f61add", "patch": "@@ -24,9 +24,9 @@ fn main() {\n     //~^ ERROR mismatched types\n     foo::<usize>(x_u32.try_into().unwrap());\n     //~^ ERROR mismatched types\n-    foo::<usize>(x_u16.try_into().unwrap());\n+    foo::<usize>(x_u16.into());\n     //~^ ERROR mismatched types\n-    foo::<usize>(x_u8.try_into().unwrap());\n+    foo::<usize>(x_u8.into());\n     //~^ ERROR mismatched types\n     foo::<usize>(x_isize.try_into().unwrap());\n     //~^ ERROR mismatched types\n@@ -56,9 +56,9 @@ fn main() {\n     //~^ ERROR mismatched types\n     foo::<isize>(x_i32.try_into().unwrap());\n     //~^ ERROR mismatched types\n-    foo::<isize>(x_i16.try_into().unwrap());\n+    foo::<isize>(x_i16.into());\n     //~^ ERROR mismatched types\n-    foo::<isize>(x_i8.try_into().unwrap());\n+    foo::<isize>(x_i8.into());\n     //~^ ERROR mismatched types\n     // foo::<isize>(x_f64);\n     // foo::<isize>(x_f32);"}, {"sha": "ff92a86c3a7b4a46114e2d6ff6433d4908345c8c", "filename": "src/test/ui/numeric/numeric-cast.stderr", "status": "modified", "additions": 16, "deletions": 24, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/8e18e26f12b1e8b3e913b15278bf6185f0f61add/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e18e26f12b1e8b3e913b15278bf6185f0f61add/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast.stderr?ref=8e18e26f12b1e8b3e913b15278bf6185f0f61add", "patch": "@@ -24,23 +24,19 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:27:18\n    |\n LL |     foo::<usize>(x_u16);\n-   |                  ^^^^^ expected `usize`, found `u16`\n-   |\n-help: you can convert an `u16` to `usize` and panic if the converted value wouldn't fit\n-   |\n-LL |     foo::<usize>(x_u16.try_into().unwrap());\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                  ^^^^^\n+   |                  |\n+   |                  expected `usize`, found `u16`\n+   |                  help: you can convert an `u16` to `usize`: `x_u16.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:29:18\n    |\n LL |     foo::<usize>(x_u8);\n-   |                  ^^^^ expected `usize`, found `u8`\n-   |\n-help: you can convert an `u8` to `usize` and panic if the converted value wouldn't fit\n-   |\n-LL |     foo::<usize>(x_u8.try_into().unwrap());\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                  ^^^^\n+   |                  |\n+   |                  expected `usize`, found `u8`\n+   |                  help: you can convert an `u8` to `usize`: `x_u8.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:31:18\n@@ -178,23 +174,19 @@ error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:59:18\n    |\n LL |     foo::<isize>(x_i16);\n-   |                  ^^^^^ expected `isize`, found `i16`\n-   |\n-help: you can convert an `i16` to `isize` and panic if the converted value wouldn't fit\n-   |\n-LL |     foo::<isize>(x_i16.try_into().unwrap());\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                  ^^^^^\n+   |                  |\n+   |                  expected `isize`, found `i16`\n+   |                  help: you can convert an `i16` to `isize`: `x_i16.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:61:18\n    |\n LL |     foo::<isize>(x_i8);\n-   |                  ^^^^ expected `isize`, found `i8`\n-   |\n-help: you can convert an `i8` to `isize` and panic if the converted value wouldn't fit\n-   |\n-LL |     foo::<isize>(x_i8.try_into().unwrap());\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                  ^^^^\n+   |                  |\n+   |                  expected `isize`, found `i8`\n+   |                  help: you can convert an `i8` to `isize`: `x_i8.into()`\n \n error[E0308]: mismatched types\n   --> $DIR/numeric-cast.rs:66:16"}, {"sha": "f1c0cd6b543e4e4e3d2232de3848eedeb2fc6265", "filename": "src/test/ui/suggestions/suggest-assoc-fn-call-with-turbofish.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e18e26f12b1e8b3e913b15278bf6185f0f61add/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-assoc-fn-call-with-turbofish.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e18e26f12b1e8b3e913b15278bf6185f0f61add/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-assoc-fn-call-with-turbofish.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-assoc-fn-call-with-turbofish.stderr?ref=8e18e26f12b1e8b3e913b15278bf6185f0f61add", "patch": "@@ -11,7 +11,7 @@ LL |     x.default_hello();\n    |     help: use associated function syntax instead: `GenericAssocMethod::<i32>::default_hello`\n    |\n    = note: found the following associated functions; to be used as methods, functions must have a `self` parameter\n-note: the candidate is defined in an impl for the type `GenericAssocMethod<_>`\n+note: the candidate is defined in an impl for the type `GenericAssocMethod<T>`\n   --> $DIR/suggest-assoc-fn-call-with-turbofish.rs:4:5\n    |\n LL |     fn default_hello() {}"}]}