{"sha": "2b70cbb8a5935a8fbc8d52d7e8304f8eefeb2d21", "node_id": "C_kwDOAAsO6NoAKDJiNzBjYmI4YTU5MzVhOGZiYzhkNTJkN2U4MzA0ZjhlZWZlYjJkMjE", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-02-07T18:02:20Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-02-07T19:05:53Z"}, "message": "Rename PointerSized to PointerLike", "tree": {"sha": "beebf4de8b250b53ee1fa19316ff66f701c774e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/beebf4de8b250b53ee1fa19316ff66f701c774e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b70cbb8a5935a8fbc8d52d7e8304f8eefeb2d21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b70cbb8a5935a8fbc8d52d7e8304f8eefeb2d21", "html_url": "https://github.com/rust-lang/rust/commit/2b70cbb8a5935a8fbc8d52d7e8304f8eefeb2d21", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b70cbb8a5935a8fbc8d52d7e8304f8eefeb2d21/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1eaa2d5d4d1f5b7b89561a940718058d414e89c", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1eaa2d5d4d1f5b7b89561a940718058d414e89c", "html_url": "https://github.com/rust-lang/rust/commit/e1eaa2d5d4d1f5b7b89561a940718058d414e89c"}], "stats": {"total": 143, "additions": 73, "deletions": 70}, "files": [{"sha": "fc8e0c67ae09a0ec4b8d22aa8c9d5c9608a27854", "filename": "compiler/rustc_const_eval/src/interpret/cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b70cbb8a5935a8fbc8d52d7e8304f8eefeb2d21/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b70cbb8a5935a8fbc8d52d7e8304f8eefeb2d21/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs?ref=2b70cbb8a5935a8fbc8d52d7e8304f8eefeb2d21", "patch": "@@ -126,7 +126,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     let vtable = self.get_vtable_ptr(src.layout.ty, data.principal())?;\n                     let vtable = Scalar::from_maybe_pointer(vtable, self);\n                     let data = self.read_immediate(src)?.to_scalar();\n-                    let _assert_pointer_sized = data.to_pointer(self)?;\n+                    let _assert_pointer_like = data.to_pointer(self)?;\n                     let val = Immediate::ScalarPair(data, vtable);\n                     self.write_immediate(val, dest)?;\n                 } else {"}, {"sha": "0454633091568ea61c5de649f85d8b206d79b019", "filename": "compiler/rustc_hir/src/lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b70cbb8a5935a8fbc8d52d7e8304f8eefeb2d21/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b70cbb8a5935a8fbc8d52d7e8304f8eefeb2d21/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs?ref=2b70cbb8a5935a8fbc8d52d7e8304f8eefeb2d21", "patch": "@@ -287,7 +287,7 @@ language_item_table! {\n     TryTraitBranch,          sym::branch,              branch_fn,                  Target::Method(MethodKind::Trait { body: false }), GenericRequirement::None;\n     TryTraitFromYeet,        sym::from_yeet,           from_yeet_fn,               Target::Fn,             GenericRequirement::None;\n \n-    PointerSized,            sym::pointer_sized,       pointer_sized,              Target::Trait,          GenericRequirement::Exact(0);\n+    PointerLike,             sym::pointer_like,        pointer_like,               Target::Trait,          GenericRequirement::Exact(0);\n \n     Poll,                    sym::Poll,                poll,                       Target::Enum,           GenericRequirement::None;\n     PollReady,               sym::Ready,               poll_ready_variant,         Target::Variant,        GenericRequirement::None;"}, {"sha": "7173239ba619a849b0e71a46e49ed3395dde162e", "filename": "compiler/rustc_hir_typeck/src/coercion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b70cbb8a5935a8fbc8d52d7e8304f8eefeb2d21/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b70cbb8a5935a8fbc8d52d7e8304f8eefeb2d21/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs?ref=2b70cbb8a5935a8fbc8d52d7e8304f8eefeb2d21", "patch": "@@ -765,7 +765,7 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n             self.cause.clone(),\n             self.param_env,\n             ty::Binder::dummy(\n-                self.tcx.at(self.cause.span).mk_trait_ref(hir::LangItem::PointerSized, [a]),\n+                self.tcx.at(self.cause.span).mk_trait_ref(hir::LangItem::PointerLike, [a]),\n             ),\n         ));\n "}, {"sha": "1ced75cccbb30251a3a7e918a63ca66e28a72498", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b70cbb8a5935a8fbc8d52d7e8304f8eefeb2d21/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b70cbb8a5935a8fbc8d52d7e8304f8eefeb2d21/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=2b70cbb8a5935a8fbc8d52d7e8304f8eefeb2d21", "patch": "@@ -1084,7 +1084,7 @@ symbols! {\n         plugins,\n         pointee_trait,\n         pointer,\n-        pointer_sized,\n+        pointer_like,\n         poll,\n         position,\n         post_dash_lto: \"post-lto\","}, {"sha": "8525b96c0c21ffdf2927a63b6c2ab5822095bd3a", "filename": "compiler/rustc_trait_selection/src/solve/assembly.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2b70cbb8a5935a8fbc8d52d7e8304f8eefeb2d21/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b70cbb8a5935a8fbc8d52d7e8304f8eefeb2d21/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly.rs?ref=2b70cbb8a5935a8fbc8d52d7e8304f8eefeb2d21", "patch": "@@ -128,9 +128,9 @@ pub(super) trait GoalKind<'tcx>: TypeFoldable<'tcx> + Copy + Eq {\n         goal: Goal<'tcx, Self>,\n     ) -> QueryResult<'tcx>;\n \n-    // A type is `PointerSized` if we can compute its layout, and that layout\n+    // A type is `PointerLike` if we can compute its layout, and that layout\n     // matches the layout of `usize`.\n-    fn consider_builtin_pointer_sized_candidate(\n+    fn consider_builtin_pointer_like_candidate(\n         ecx: &mut EvalCtxt<'_, 'tcx>,\n         goal: Goal<'tcx, Self>,\n     ) -> QueryResult<'tcx>;\n@@ -312,8 +312,8 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n             || lang_items.clone_trait() == Some(trait_def_id)\n         {\n             G::consider_builtin_copy_clone_candidate(self, goal)\n-        } else if lang_items.pointer_sized() == Some(trait_def_id) {\n-            G::consider_builtin_pointer_sized_candidate(self, goal)\n+        } else if lang_items.pointer_like() == Some(trait_def_id) {\n+            G::consider_builtin_pointer_like_candidate(self, goal)\n         } else if let Some(kind) = self.tcx().fn_trait_kind_from_def_id(trait_def_id) {\n             G::consider_builtin_fn_trait_candidates(self, goal, kind)\n         } else if lang_items.tuple_trait() == Some(trait_def_id) {"}, {"sha": "f9acf7a53eee5b25b95bd098d87a0a45f057ba0c", "filename": "compiler/rustc_trait_selection/src/solve/project_goals.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2b70cbb8a5935a8fbc8d52d7e8304f8eefeb2d21/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b70cbb8a5935a8fbc8d52d7e8304f8eefeb2d21/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs?ref=2b70cbb8a5935a8fbc8d52d7e8304f8eefeb2d21", "patch": "@@ -370,11 +370,11 @@ impl<'tcx> assembly::GoalKind<'tcx> for ProjectionPredicate<'tcx> {\n         bug!(\"`Copy`/`Clone` does not have an associated type: {:?}\", goal);\n     }\n \n-    fn consider_builtin_pointer_sized_candidate(\n+    fn consider_builtin_pointer_like_candidate(\n         _ecx: &mut EvalCtxt<'_, 'tcx>,\n         goal: Goal<'tcx, Self>,\n     ) -> QueryResult<'tcx> {\n-        bug!(\"`PointerSized` does not have an associated type: {:?}\", goal);\n+        bug!(\"`PointerLike` does not have an associated type: {:?}\", goal);\n     }\n \n     fn consider_builtin_fn_trait_candidates("}, {"sha": "1cf1efc97049bcb740fa65217a2a18b5983d77fb", "filename": "compiler/rustc_trait_selection/src/solve/trait_goals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b70cbb8a5935a8fbc8d52d7e8304f8eefeb2d21/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b70cbb8a5935a8fbc8d52d7e8304f8eefeb2d21/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs?ref=2b70cbb8a5935a8fbc8d52d7e8304f8eefeb2d21", "patch": "@@ -131,7 +131,7 @@ impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n         )\n     }\n \n-    fn consider_builtin_pointer_sized_candidate(\n+    fn consider_builtin_pointer_like_candidate(\n         ecx: &mut EvalCtxt<'_, 'tcx>,\n         goal: Goal<'tcx, Self>,\n     ) -> QueryResult<'tcx> {"}, {"sha": "bba07ed965b210693badf57439a285fd71022fef", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b70cbb8a5935a8fbc8d52d7e8304f8eefeb2d21/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b70cbb8a5935a8fbc8d52d7e8304f8eefeb2d21/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=2b70cbb8a5935a8fbc8d52d7e8304f8eefeb2d21", "patch": "@@ -94,7 +94,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 self.assemble_candidates_for_transmutability(obligation, &mut candidates);\n             } else if lang_items.tuple_trait() == Some(def_id) {\n                 self.assemble_candidate_for_tuple(obligation, &mut candidates);\n-            } else if lang_items.pointer_sized() == Some(def_id) {\n+            } else if lang_items.pointer_like() == Some(def_id) {\n                 self.assemble_candidate_for_ptr_sized(obligation, &mut candidates);\n             } else {\n                 if lang_items.clone_trait() == Some(def_id) {"}, {"sha": "e11bca5962a156a9059d7a8ceb561731fe68ee53", "filename": "library/core/src/marker.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2b70cbb8a5935a8fbc8d52d7e8304f8eefeb2d21/library%2Fcore%2Fsrc%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b70cbb8a5935a8fbc8d52d7e8304f8eefeb2d21/library%2Fcore%2Fsrc%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmarker.rs?ref=2b70cbb8a5935a8fbc8d52d7e8304f8eefeb2d21", "patch": "@@ -872,13 +872,14 @@ pub trait Destruct {}\n pub trait Tuple {}\n \n /// A marker for things\n-#[unstable(feature = \"pointer_sized_trait\", issue = \"none\")]\n-#[lang = \"pointer_sized\"]\n+#[unstable(feature = \"pointer_like_trait\", issue = \"none\")]\n+#[cfg_attr(bootstrap, lang = \"pointer_sized\")]\n+#[cfg_attr(not(bootstrap), lang = \"pointer_like\")]\n #[rustc_on_unimplemented(\n-    message = \"`{Self}` needs to be a pointer-sized type\",\n-    label = \"`{Self}` needs to be a pointer-sized type\"\n+    message = \"`{Self}` needs to have the same alignment and size as a pointer\",\n+    label = \"`{Self}` needs to be a pointer-like type\"\n )]\n-pub trait PointerSized {}\n+pub trait PointerLike {}\n \n /// Implementations of `Copy` for primitive types.\n ///"}, {"sha": "0365d87a6f82aae88f3b23ce85dd8f398d69b2a1", "filename": "tests/ui/dyn-star/align.over_aligned.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2b70cbb8a5935a8fbc8d52d7e8304f8eefeb2d21/tests%2Fui%2Fdyn-star%2Falign.over_aligned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2b70cbb8a5935a8fbc8d52d7e8304f8eefeb2d21/tests%2Fui%2Fdyn-star%2Falign.over_aligned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdyn-star%2Falign.over_aligned.stderr?ref=2b70cbb8a5935a8fbc8d52d7e8304f8eefeb2d21", "patch": "@@ -7,13 +7,13 @@ LL | #![feature(dyn_star)]\n    = note: see issue #102425 <https://github.com/rust-lang/rust/issues/102425> for more information\n    = note: `#[warn(incomplete_features)]` on by default\n \n-error[E0277]: `AlignedUsize` needs to be a pointer-sized type\n+error[E0277]: `AlignedUsize` needs to have the same alignment and size as a pointer\n   --> $DIR/align.rs:15:13\n    |\n LL |     let x = AlignedUsize(12) as dyn* Debug;\n-   |             ^^^^^^^^^^^^^^^^ `AlignedUsize` needs to be a pointer-sized type\n+   |             ^^^^^^^^^^^^^^^^ `AlignedUsize` needs to be a pointer-like type\n    |\n-   = help: the trait `PointerSized` is not implemented for `AlignedUsize`\n+   = help: the trait `PointerLike` is not implemented for `AlignedUsize`\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "6679997a9402917a5e269ce9ff576be23a481f07", "filename": "tests/ui/dyn-star/align.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b70cbb8a5935a8fbc8d52d7e8304f8eefeb2d21/tests%2Fui%2Fdyn-star%2Falign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b70cbb8a5935a8fbc8d52d7e8304f8eefeb2d21/tests%2Fui%2Fdyn-star%2Falign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdyn-star%2Falign.rs?ref=2b70cbb8a5935a8fbc8d52d7e8304f8eefeb2d21", "patch": "@@ -13,5 +13,5 @@ struct AlignedUsize(usize);\n \n fn main() {\n     let x = AlignedUsize(12) as dyn* Debug;\n-    //[over_aligned]~^ ERROR `AlignedUsize` needs to be a pointer-sized type\n+    //[over_aligned]~^ ERROR `AlignedUsize` needs to have the same alignment and size as a pointer\n }"}, {"sha": "85749aa7b00e2a886db52603620c04cdd4e05662", "filename": "tests/ui/dyn-star/check-size-at-cast-polymorphic-bad.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b70cbb8a5935a8fbc8d52d7e8304f8eefeb2d21/tests%2Fui%2Fdyn-star%2Fcheck-size-at-cast-polymorphic-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b70cbb8a5935a8fbc8d52d7e8304f8eefeb2d21/tests%2Fui%2Fdyn-star%2Fcheck-size-at-cast-polymorphic-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdyn-star%2Fcheck-size-at-cast-polymorphic-bad.rs?ref=2b70cbb8a5935a8fbc8d52d7e8304f8eefeb2d21", "patch": "@@ -9,7 +9,7 @@ fn dyn_debug(_: (dyn* Debug + '_)) {\n \n fn polymorphic<T: Debug + ?Sized>(t: &T) {\n     dyn_debug(t);\n-    //~^ ERROR `&T` needs to be a pointer-sized type\n+    //~^ ERROR `&T` needs to have the same alignment and size as a pointer\n }\n \n fn main() {}"}, {"sha": "350630f794138d31a4c28ffe45ed5c0bb0e29fb4", "filename": "tests/ui/dyn-star/check-size-at-cast-polymorphic-bad.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2b70cbb8a5935a8fbc8d52d7e8304f8eefeb2d21/tests%2Fui%2Fdyn-star%2Fcheck-size-at-cast-polymorphic-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2b70cbb8a5935a8fbc8d52d7e8304f8eefeb2d21/tests%2Fui%2Fdyn-star%2Fcheck-size-at-cast-polymorphic-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdyn-star%2Fcheck-size-at-cast-polymorphic-bad.stderr?ref=2b70cbb8a5935a8fbc8d52d7e8304f8eefeb2d21", "patch": "@@ -1,14 +1,14 @@\n-error[E0277]: `&T` needs to be a pointer-sized type\n+error[E0277]: `&T` needs to have the same alignment and size as a pointer\n   --> $DIR/check-size-at-cast-polymorphic-bad.rs:11:15\n    |\n LL |     dyn_debug(t);\n-   |               ^ `&T` needs to be a pointer-sized type\n+   |               ^ `&T` needs to be a pointer-like type\n    |\n-   = help: the trait `PointerSized` is not implemented for `&T`\n+   = help: the trait `PointerLike` is not implemented for `&T`\n help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n    |\n-LL | fn polymorphic<T: Debug + ?Sized>(t: &T) where &T: PointerSized {\n-   |                                          ++++++++++++++++++++++\n+LL | fn polymorphic<T: Debug + ?Sized>(t: &T) where &T: PointerLike {\n+   |                                          +++++++++++++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "17bc4f303bffabd1ad541756d76b45e791fa61c4", "filename": "tests/ui/dyn-star/check-size-at-cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b70cbb8a5935a8fbc8d52d7e8304f8eefeb2d21/tests%2Fui%2Fdyn-star%2Fcheck-size-at-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b70cbb8a5935a8fbc8d52d7e8304f8eefeb2d21/tests%2Fui%2Fdyn-star%2Fcheck-size-at-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdyn-star%2Fcheck-size-at-cast.rs?ref=2b70cbb8a5935a8fbc8d52d7e8304f8eefeb2d21", "patch": "@@ -5,6 +5,6 @@ use std::fmt::Debug;\n \n fn main() {\n     let i = [1, 2, 3, 4] as dyn* Debug;\n-    //~^ ERROR `[i32; 4]` needs to be a pointer-sized type\n+    //~^ ERROR `[i32; 4]` needs to have the same alignment and size as a pointer\n     dbg!(i);\n }"}, {"sha": "19700b40644006df9e1b388ade33cc10dad87b38", "filename": "tests/ui/dyn-star/check-size-at-cast.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2b70cbb8a5935a8fbc8d52d7e8304f8eefeb2d21/tests%2Fui%2Fdyn-star%2Fcheck-size-at-cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2b70cbb8a5935a8fbc8d52d7e8304f8eefeb2d21/tests%2Fui%2Fdyn-star%2Fcheck-size-at-cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdyn-star%2Fcheck-size-at-cast.stderr?ref=2b70cbb8a5935a8fbc8d52d7e8304f8eefeb2d21", "patch": "@@ -1,10 +1,10 @@\n-error[E0277]: `[i32; 4]` needs to be a pointer-sized type\n+error[E0277]: `[i32; 4]` needs to have the same alignment and size as a pointer\n   --> $DIR/check-size-at-cast.rs:7:13\n    |\n LL |     let i = [1, 2, 3, 4] as dyn* Debug;\n-   |             ^^^^^^^^^^^^ `[i32; 4]` needs to be a pointer-sized type\n+   |             ^^^^^^^^^^^^ `[i32; 4]` needs to be a pointer-like type\n    |\n-   = help: the trait `PointerSized` is not implemented for `[i32; 4]`\n+   = help: the trait `PointerLike` is not implemented for `[i32; 4]`\n \n error: aborting due to previous error\n "}, {"sha": "e60144fea74c348aa3a425f99581d59b3f4f5bfd", "filename": "tests/ui/dyn-star/upcast.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2b70cbb8a5935a8fbc8d52d7e8304f8eefeb2d21/tests%2Fui%2Fdyn-star%2Fupcast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2b70cbb8a5935a8fbc8d52d7e8304f8eefeb2d21/tests%2Fui%2Fdyn-star%2Fupcast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdyn-star%2Fupcast.stderr?ref=2b70cbb8a5935a8fbc8d52d7e8304f8eefeb2d21", "patch": "@@ -7,13 +7,13 @@ LL | #![feature(dyn_star, trait_upcasting)]\n    = note: see issue #102425 <https://github.com/rust-lang/rust/issues/102425> for more information\n    = note: `#[warn(incomplete_features)]` on by default\n \n-error[E0277]: `dyn* Foo` needs to be a pointer-sized type\n+error[E0277]: `dyn* Foo` needs to have the same alignment and size as a pointer\n   --> $DIR/upcast.rs:30:23\n    |\n LL |     let w: dyn* Bar = w;\n-   |                       ^ `dyn* Foo` needs to be a pointer-sized type\n+   |                       ^ `dyn* Foo` needs to be a pointer-like type\n    |\n-   = help: the trait `PointerSized` is not implemented for `dyn* Foo`\n+   = help: the trait `PointerLike` is not implemented for `dyn* Foo`\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "3745a075e6a448086ed3396469b3e19b0c3d8954", "filename": "tests/ui/traits/new-solver/pointer-like.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2b70cbb8a5935a8fbc8d52d7e8304f8eefeb2d21/tests%2Fui%2Ftraits%2Fnew-solver%2Fpointer-like.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b70cbb8a5935a8fbc8d52d7e8304f8eefeb2d21/tests%2Fui%2Ftraits%2Fnew-solver%2Fpointer-like.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fpointer-like.rs?ref=2b70cbb8a5935a8fbc8d52d7e8304f8eefeb2d21", "patch": "@@ -0,0 +1,14 @@\n+// compile-flags: -Ztrait-solver=next\n+\n+#![feature(pointer_like_trait)]\n+\n+use std::marker::PointerLike;\n+\n+fn require_(_: impl PointerLike) {}\n+\n+fn main() {\n+    require_(1usize);\n+    require_(1u16);\n+    //~^ ERROR `u16` needs to have the same alignment and size as a pointer\n+    require_(&1i16);\n+}"}, {"sha": "f695e64187d4423d0603a11c29347955aee7c374", "filename": "tests/ui/traits/new-solver/pointer-like.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2b70cbb8a5935a8fbc8d52d7e8304f8eefeb2d21/tests%2Fui%2Ftraits%2Fnew-solver%2Fpointer-like.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2b70cbb8a5935a8fbc8d52d7e8304f8eefeb2d21/tests%2Fui%2Ftraits%2Fnew-solver%2Fpointer-like.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fpointer-like.stderr?ref=2b70cbb8a5935a8fbc8d52d7e8304f8eefeb2d21", "patch": "@@ -0,0 +1,24 @@\n+error[E0277]: `u16` needs to have the same alignment and size as a pointer\n+  --> $DIR/pointer-like.rs:11:14\n+   |\n+LL |     require_(1u16);\n+   |     -------- ^^^^ the trait `PointerLike` is not implemented for `u16`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = note: the trait bound `u16: PointerLike` is not satisfied\n+note: required by a bound in `require_`\n+  --> $DIR/pointer-like.rs:7:21\n+   |\n+LL | fn require_(_: impl PointerLike) {}\n+   |                     ^^^^^^^^^^^ required by this bound in `require_`\n+help: consider borrowing here\n+   |\n+LL |     require_(&1u16);\n+   |              +\n+LL |     require_(&mut 1u16);\n+   |              ++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "15681cd132ec64b583380bbff700f3119bace75f", "filename": "tests/ui/traits/new-solver/pointer-sized.rs", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e1eaa2d5d4d1f5b7b89561a940718058d414e89c/tests%2Fui%2Ftraits%2Fnew-solver%2Fpointer-sized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1eaa2d5d4d1f5b7b89561a940718058d414e89c/tests%2Fui%2Ftraits%2Fnew-solver%2Fpointer-sized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fpointer-sized.rs?ref=e1eaa2d5d4d1f5b7b89561a940718058d414e89c", "patch": "@@ -1,12 +0,0 @@\n-#![feature(pointer_sized_trait)]\n-\n-use std::marker::PointerSized;\n-\n-fn require_pointer_sized(_: impl PointerSized) {}\n-\n-fn main() {\n-    require_pointer_sized(1usize);\n-    require_pointer_sized(1u16);\n-    //~^ ERROR `u16` needs to be a pointer-sized type\n-    require_pointer_sized(&1i16);\n-}"}, {"sha": "b250b1331bbf9ef1083cc1349d7b6e74ec91e7f7", "filename": "tests/ui/traits/new-solver/pointer-sized.stderr", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e1eaa2d5d4d1f5b7b89561a940718058d414e89c/tests%2Fui%2Ftraits%2Fnew-solver%2Fpointer-sized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1eaa2d5d4d1f5b7b89561a940718058d414e89c/tests%2Fui%2Ftraits%2Fnew-solver%2Fpointer-sized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fpointer-sized.stderr?ref=e1eaa2d5d4d1f5b7b89561a940718058d414e89c", "patch": "@@ -1,24 +0,0 @@\n-error[E0277]: `u16` needs to be a pointer-sized type\n-  --> $DIR/pointer-sized.rs:9:27\n-   |\n-LL |     require_pointer_sized(1u16);\n-   |     --------------------- ^^^^ the trait `PointerSized` is not implemented for `u16`\n-   |     |\n-   |     required by a bound introduced by this call\n-   |\n-   = note: the trait bound `u16: PointerSized` is not satisfied\n-note: required by a bound in `require_pointer_sized`\n-  --> $DIR/pointer-sized.rs:5:34\n-   |\n-LL | fn require_pointer_sized(_: impl PointerSized) {}\n-   |                                  ^^^^^^^^^^^^ required by this bound in `require_pointer_sized`\n-help: consider borrowing here\n-   |\n-LL |     require_pointer_sized(&1u16);\n-   |                           +\n-LL |     require_pointer_sized(&mut 1u16);\n-   |                           ++++\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0277`."}]}