{"sha": "3b19c83c678a74a508fe874ac261a99121e51397", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiMTljODNjNjc4YTc0YTUwOGZlODc0YWMyNjFhOTkxMjFlNTEzOTc=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-07-20T03:32:51Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-07-20T03:32:51Z"}, "message": "remove ad-hoc 'never' type check in read_lvalue", "tree": {"sha": "5bcea225b6e3e939ef9d68b5814a3e4a54981119", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5bcea225b6e3e939ef9d68b5814a3e4a54981119"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b19c83c678a74a508fe874ac261a99121e51397", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b19c83c678a74a508fe874ac261a99121e51397", "html_url": "https://github.com/rust-lang/rust/commit/3b19c83c678a74a508fe874ac261a99121e51397", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b19c83c678a74a508fe874ac261a99121e51397/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27c64479cd0e449634ef61bbf42dff42cfa1fc28", "url": "https://api.github.com/repos/rust-lang/rust/commits/27c64479cd0e449634ef61bbf42dff42cfa1fc28", "html_url": "https://github.com/rust-lang/rust/commit/27c64479cd0e449634ef61bbf42dff42cfa1fc28"}], "stats": {"total": 13, "additions": 4, "deletions": 9}, "files": [{"sha": "59f5dc8f4bbc20340ccffae9853b4c2a14241ef9", "filename": "src/lvalue.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3b19c83c678a74a508fe874ac261a99121e51397/src%2Flvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b19c83c678a74a508fe874ac261a99121e51397/src%2Flvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flvalue.rs?ref=3b19c83c678a74a508fe874ac261a99121e51397", "patch": "@@ -182,22 +182,17 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n \n     /// Returns a value and (in case of a ByRef) if we are supposed to use aligned accesses.\n     pub(super) fn eval_and_read_lvalue(&mut self, lvalue: &mir::Lvalue<'tcx>) -> EvalResult<'tcx, Value> {\n-        let ty = self.lvalue_ty(lvalue);\n         // Shortcut for things like accessing a fat pointer's field,\n         // which would otherwise (in the `eval_lvalue` path) require moving a `ByValPair` to memory\n         // and returning an `Lvalue::Ptr` to it\n         if let Some(val) = self.try_read_lvalue(lvalue)? {\n             return Ok(val);\n         }\n         let lvalue = self.eval_lvalue(lvalue)?;\n-        self.read_lvalue(lvalue, ty)\n+        self.read_lvalue(lvalue)\n     }\n \n-    pub fn read_lvalue(&self, lvalue: Lvalue<'tcx>, ty: Ty<'tcx>) -> EvalResult<'tcx, Value> {\n-        if ty.is_never() {\n-            return Err(EvalError::Unreachable);\n-        }\n-\n+    pub fn read_lvalue(&self, lvalue: Lvalue<'tcx>) -> EvalResult<'tcx, Value> {\n         match lvalue {\n             Lvalue::Ptr { ptr, extra, aligned } => {\n                 assert_eq!(extra, LvalueExtra::None);\n@@ -382,7 +377,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             }\n \n             Deref => {\n-                let val = self.read_lvalue(base, base_ty)?;\n+                let val = self.read_lvalue(base)?;\n \n                 let pointee_type = match base_ty.sty {\n                     ty::TyRawPtr(ref tam) |"}, {"sha": "3e80cb20b3fa7127b51cfdb346ff0cab6464c772", "filename": "tests/compile-fail/never_say_never.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b19c83c678a74a508fe874ac261a99121e51397/tests%2Fcompile-fail%2Fnever_say_never.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b19c83c678a74a508fe874ac261a99121e51397/tests%2Fcompile-fail%2Fnever_say_never.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fnever_say_never.rs?ref=3b19c83c678a74a508fe874ac261a99121e51397", "patch": "@@ -4,7 +4,7 @@\n fn main() {\n     let y = &5;\n     let x: ! = unsafe {\n-        *(y as *const _ as *const !) //~ ERROR entered unreachable code\n+        *(y as *const _ as *const !) //~ ERROR tried to access a dead local variable\n     };\n     f(x)\n }"}]}