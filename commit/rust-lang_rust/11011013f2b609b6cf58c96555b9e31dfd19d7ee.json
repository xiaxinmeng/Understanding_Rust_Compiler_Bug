{"sha": "11011013f2b609b6cf58c96555b9e31dfd19d7ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExMDExMDEzZjJiNjA5YjZjZjU4Yzk2NTU1YjllMzFkZmQxOWQ3ZWU=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-10-18T02:00:19Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-10-18T02:03:36Z"}, "message": "Refer to \"associated functions\" instead of \"static methods\"", "tree": {"sha": "ad77a0acecd578a96aeda4a5e56079a18a60cf4d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad77a0acecd578a96aeda4a5e56079a18a60cf4d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11011013f2b609b6cf58c96555b9e31dfd19d7ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11011013f2b609b6cf58c96555b9e31dfd19d7ee", "html_url": "https://github.com/rust-lang/rust/commit/11011013f2b609b6cf58c96555b9e31dfd19d7ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11011013f2b609b6cf58c96555b9e31dfd19d7ee/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa0f7d0080d8e7e9eb20aa9cbf8013f96c81287f", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa0f7d0080d8e7e9eb20aa9cbf8013f96c81287f", "html_url": "https://github.com/rust-lang/rust/commit/fa0f7d0080d8e7e9eb20aa9cbf8013f96c81287f"}], "stats": {"total": 78, "additions": 38, "deletions": 40}, "files": [{"sha": "29ca797fc065ca0b47bd977bc83b7c827b9dae52", "filename": "src/librustc_resolve/error_codes.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/11011013f2b609b6cf58c96555b9e31dfd19d7ee/src%2Flibrustc_resolve%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11011013f2b609b6cf58c96555b9e31dfd19d7ee/src%2Flibrustc_resolve%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Ferror_codes.rs?ref=11011013f2b609b6cf58c96555b9e31dfd19d7ee", "patch": "@@ -1013,33 +1013,39 @@ fn h1() -> i32 {\n \"##,\n \n E0424: r##\"\n-The `self` keyword was used in a static method.\n+The `self` keyword was used inside of an associated function instead of inside\n+of a method. Associated functions have no \"`self` receiver\" argument, and are\n+equivalent to regular functions which exist in the namespace of a trait.\n+Methods, on the other hand, have a `self` reciver argument, like `self`,\n+`&self`, `&mut self` or `self: &mut Pin<Self>` (this last one is an example of\n+an [\"abitrary `self` type\"](https://github.com/rust-lang/rust/issues/44874)).\n \n Erroneous code example:\n \n ```compile_fail,E0424\n struct Foo;\n \n impl Foo {\n-    fn bar(self) {}\n+    // `bar` is a method, because it has a receiver argument.\n+    fn bar(&self) {}\n \n+    // `foo` is an associated function, because it has no receiver argument.\n     fn foo() {\n-        self.bar(); // error: `self` is not available in a static method.\n+        self.bar(); // error: `self` is not available in an associated function\n     }\n }\n ```\n \n-Please check if the method's argument list should have contained `self`,\n-`&self`, or `&mut self` (in case you didn't want to create a static\n-method), and add it if so. Example:\n+Check if the associated function's argument list should have contained a `self`\n+receiver for it to be a method, and add it if so. Example:\n \n ```\n struct Foo;\n \n impl Foo {\n-    fn bar(self) {}\n+    fn bar(&self) {}\n \n-    fn foo(self) {\n+    fn foo(self) { // `foo` is now a method.\n         self.bar(); // ok!\n     }\n }"}, {"sha": "dba4226e9836309cd71db5f8243374bdf04e3ffe", "filename": "src/librustc_resolve/late/diagnostics.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/11011013f2b609b6cf58c96555b9e31dfd19d7ee/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11011013f2b609b6cf58c96555b9e31dfd19d7ee/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs?ref=11011013f2b609b6cf58c96555b9e31dfd19d7ee", "patch": "@@ -115,8 +115,10 @@ impl<'a> LateResolutionVisitor<'a, '_> {\n         if is_self_type(path, ns) {\n             syntax::diagnostic_used!(E0411);\n             err.code(DiagnosticId::Error(\"E0411\".into()));\n-            err.span_label(span, format!(\"`Self` is only available in impls, traits, \\\n-                                          and type definitions\"));\n+            err.span_label(\n+                span,\n+                format!(\"`Self` is only available in impls, traits, and type definitions\"),\n+            );\n             return (err, Vec::new());\n         }\n         if is_self_value(path, ns) {\n@@ -125,16 +127,12 @@ impl<'a> LateResolutionVisitor<'a, '_> {\n             syntax::diagnostic_used!(E0424);\n             err.code(DiagnosticId::Error(\"E0424\".into()));\n             err.span_label(span, match source {\n-                PathSource::Pat => {\n-                    format!(\"`self` value is a keyword \\\n-                             and may not be bound to \\\n-                             variables or shadowed\")\n-                }\n-                _ => {\n-                    format!(\"`self` value is a keyword \\\n-                             only available in methods \\\n-                             with `self` parameter\")\n-                }\n+                PathSource::Pat => format!(\n+                    \"`self` value is a keyword and may not be bound to variables or shadowed\",\n+                ),\n+                _ => format!(\n+                    \"`self` value is a keyword only available in methods with a `self` parameter\",\n+                ),\n             });\n             return (err, Vec::new());\n         }"}, {"sha": "67ef69babdc0ac3ad99f155e9e14c3ce1c40acb9", "filename": "src/libsyntax_ext/deriving/clone.rs", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/11011013f2b609b6cf58c96555b9e31dfd19d7ee/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11011013f2b609b6cf58c96555b9e31dfd19d7ee/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs?ref=11011013f2b609b6cf58c96555b9e31dfd19d7ee", "patch": "@@ -174,14 +174,12 @@ fn cs_clone(name: &str,\n             all_fields = af;\n             vdata = &variant.data;\n         }\n-        EnumNonMatchingCollapsed(..) => {\n-            cx.span_bug(trait_span,\n-                        &format!(\"non-matching enum variants in \\\n-                                 `derive({})`\",\n-                                 name))\n-        }\n+        EnumNonMatchingCollapsed(..) => cx.span_bug(trait_span, &format!(\n+            \"non-matching enum variants in `derive({})`\",\n+            name,\n+        )),\n         StaticEnum(..) | StaticStruct(..) => {\n-            cx.span_bug(trait_span, &format!(\"static method in `derive({})`\", name))\n+            cx.span_bug(trait_span, &format!(\"associated function in `derive({})`\", name))\n         }\n     }\n \n@@ -191,12 +189,10 @@ fn cs_clone(name: &str,\n                 .map(|field| {\n                     let ident = match field.name {\n                         Some(i) => i,\n-                        None => {\n-                            cx.span_bug(trait_span,\n-                                        &format!(\"unnamed field in normal struct in \\\n-                                                `derive({})`\",\n-                                                    name))\n-                        }\n+                        None => cx.span_bug(trait_span, &format!(\n+                            \"unnamed field in normal struct in `derive({})`\",\n+                            name,\n+                        )),\n                     };\n                     let call = subcall(cx, field);\n                     cx.field_imm(field.span, ident, call)"}, {"sha": "cfc0f3cd6cbf9afdfaccee628f9a0661b4e0bdf4", "filename": "src/libsyntax_ext/deriving/default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11011013f2b609b6cf58c96555b9e31dfd19d7ee/src%2Flibsyntax_ext%2Fderiving%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11011013f2b609b6cf58c96555b9e31dfd19d7ee/src%2Flibsyntax_ext%2Fderiving%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fdefault.rs?ref=11011013f2b609b6cf58c96555b9e31dfd19d7ee", "patch": "@@ -75,6 +75,6 @@ fn default_substructure(cx: &mut ExtCtxt<'_>,\n             // let compilation continue\n             DummyResult::raw_expr(trait_span, true)\n         }\n-        _ => cx.span_bug(trait_span, \"Non-static method in `derive(Default)`\"),\n+        _ => cx.span_bug(trait_span, \"method in `derive(Default)`\"),\n     };\n }"}, {"sha": "fd2c1552d32a86650fba75238c42aca9f6f0ea97", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/11011013f2b609b6cf58c96555b9e31dfd19d7ee/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11011013f2b609b6cf58c96555b9e31dfd19d7ee/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=11011013f2b609b6cf58c96555b9e31dfd19d7ee", "patch": "@@ -1055,9 +1055,7 @@ impl<'a> MethodDef<'a> {\n                 })\n                 .collect()\n         } else {\n-            cx.span_bug(trait_.span,\n-                        \"no self arguments to non-static method in generic \\\n-                         `derive`\")\n+            cx.span_bug(trait_.span, \"no self arguments for method in generic `derive`\")\n         };\n \n         // body of the inner most destructuring match"}, {"sha": "99b5e01abb1922bf549414939a8c07099f7412d1", "filename": "src/test/ui/error-codes/E0424.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11011013f2b609b6cf58c96555b9e31dfd19d7ee/src%2Ftest%2Fui%2Ferror-codes%2FE0424.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11011013f2b609b6cf58c96555b9e31dfd19d7ee/src%2Ftest%2Fui%2Ferror-codes%2FE0424.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0424.stderr?ref=11011013f2b609b6cf58c96555b9e31dfd19d7ee", "patch": "@@ -2,7 +2,7 @@ error[E0424]: expected value, found module `self`\n   --> $DIR/E0424.rs:7:9\n    |\n LL |         self.bar();\n-   |         ^^^^ `self` value is a keyword only available in methods with `self` parameter\n+   |         ^^^^ `self` value is a keyword only available in methods with a `self` parameter\n \n error[E0424]: expected unit struct/variant or constant, found module `self`\n   --> $DIR/E0424.rs:12:9"}, {"sha": "e0a2088ab8b9804d84808df49dd94ddb139a1b5f", "filename": "src/test/ui/resolve/issue-2356.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/11011013f2b609b6cf58c96555b9e31dfd19d7ee/src%2Ftest%2Fui%2Fresolve%2Fissue-2356.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11011013f2b609b6cf58c96555b9e31dfd19d7ee/src%2Ftest%2Fui%2Fresolve%2Fissue-2356.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-2356.stderr?ref=11011013f2b609b6cf58c96555b9e31dfd19d7ee", "patch": "@@ -62,7 +62,7 @@ error[E0424]: expected value, found module `self`\n   --> $DIR/issue-2356.rs:65:8\n    |\n LL |     if self.whiskers > 3 {\n-   |        ^^^^ `self` value is a keyword only available in methods with `self` parameter\n+   |        ^^^^ `self` value is a keyword only available in methods with a `self` parameter\n \n error[E0425]: cannot find function `grow_older` in this scope\n   --> $DIR/issue-2356.rs:72:5\n@@ -98,7 +98,7 @@ error[E0424]: expected value, found module `self`\n   --> $DIR/issue-2356.rs:92:5\n    |\n LL |     self += 1;\n-   |     ^^^^ `self` value is a keyword only available in methods with `self` parameter\n+   |     ^^^^ `self` value is a keyword only available in methods with a `self` parameter\n \n error: aborting due to 17 previous errors\n "}]}