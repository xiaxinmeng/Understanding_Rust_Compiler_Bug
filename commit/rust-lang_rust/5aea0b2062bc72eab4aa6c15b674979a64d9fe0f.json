{"sha": "5aea0b2062bc72eab4aa6c15b674979a64d9fe0f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhZWEwYjIwNjJiYzcyZWFiNGFhNmMxNWI2NzQ5NzlhNjRkOWZlMGY=", "commit": {"author": {"name": "Josh Holmer", "email": "joshua.holmer@nextgearcapital.com", "date": "2017-01-04T17:05:33Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2017-01-04T23:50:34Z"}, "message": "Rustup to rustc 1.16.0-nightly (468227129 2017-01-03): u128 fixes for rustup", "tree": {"sha": "b5a2f88869cba11acbb44baf3236e7aa2e04552a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5a2f88869cba11acbb44baf3236e7aa2e04552a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5aea0b2062bc72eab4aa6c15b674979a64d9fe0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5aea0b2062bc72eab4aa6c15b674979a64d9fe0f", "html_url": "https://github.com/rust-lang/rust/commit/5aea0b2062bc72eab4aa6c15b674979a64d9fe0f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5aea0b2062bc72eab4aa6c15b674979a64d9fe0f/comments", "author": null, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64f5dbc9f872492bbd211da67d651e8e1942b99b", "url": "https://api.github.com/repos/rust-lang/rust/commits/64f5dbc9f872492bbd211da67d651e8e1942b99b", "html_url": "https://github.com/rust-lang/rust/commit/64f5dbc9f872492bbd211da67d651e8e1942b99b"}], "stats": {"total": 19, "additions": 10, "deletions": 9}, "files": [{"sha": "f14268f9b4c1a2f13b55ab517643a24b98ad63b5", "filename": "clippy_lints/src/array_indexing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5aea0b2062bc72eab4aa6c15b674979a64d9fe0f/clippy_lints%2Fsrc%2Farray_indexing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aea0b2062bc72eab4aa6c15b674979a64d9fe0f/clippy_lints%2Fsrc%2Farray_indexing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Farray_indexing.rs?ref=5aea0b2062bc72eab4aa6c15b674979a64d9fe0f", "patch": "@@ -61,7 +61,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ArrayIndexing {\n             // Array with known size can be checked statically\n             let ty = cx.tcx.tables().expr_ty(array);\n             if let ty::TyArray(_, size) = ty.sty {\n-                let size = ConstInt::Infer(size as u64);\n+                let size = ConstInt::Infer(size as u128);\n \n                 // Index is a constant uint\n                 let const_index = eval_const_expr_partial(cx.tcx, index, ExprTypeChecked, None);"}, {"sha": "1323ce29875b853f984b6062f1556d226a8e694a", "filename": "clippy_lints/src/bit_mask.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5aea0b2062bc72eab4aa6c15b674979a64d9fe0f/clippy_lints%2Fsrc%2Fbit_mask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aea0b2062bc72eab4aa6c15b674979a64d9fe0f/clippy_lints%2Fsrc%2Fbit_mask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbit_mask.rs?ref=5aea0b2062bc72eab4aa6c15b674979a64d9fe0f", "patch": "@@ -106,7 +106,7 @@ fn invert_cmp(cmp: BinOp_) -> BinOp_ {\n }\n \n \n-fn check_compare(cx: &LateContext, bit_op: &Expr, cmp_op: BinOp_, cmp_value: u64, span: &Span) {\n+fn check_compare(cx: &LateContext, bit_op: &Expr, cmp_op: BinOp_, cmp_value: u128, span: &Span) {\n     if let ExprBinary(ref op, ref left, ref right) = bit_op.node {\n         if op.node != BiBitAnd && op.node != BiBitOr {\n             return;\n@@ -117,7 +117,7 @@ fn check_compare(cx: &LateContext, bit_op: &Expr, cmp_op: BinOp_, cmp_value: u64\n     }\n }\n \n-fn check_bit_mask(cx: &LateContext, bit_op: BinOp_, cmp_op: BinOp_, mask_value: u64, cmp_value: u64, span: &Span) {\n+fn check_bit_mask(cx: &LateContext, bit_op: BinOp_, cmp_op: BinOp_, mask_value: u128, cmp_value: u128, span: &Span) {\n     match cmp_op {\n         BiEq | BiNe => {\n             match bit_op {\n@@ -212,7 +212,7 @@ fn check_bit_mask(cx: &LateContext, bit_op: BinOp_, cmp_op: BinOp_, mask_value:\n     }\n }\n \n-fn check_ineffective_lt(cx: &LateContext, span: Span, m: u64, c: u64, op: &str) {\n+fn check_ineffective_lt(cx: &LateContext, span: Span, m: u128, c: u128, op: &str) {\n     if c.is_power_of_two() && m < c {\n         span_lint(cx,\n                   INEFFECTIVE_BIT_MASK,\n@@ -224,7 +224,7 @@ fn check_ineffective_lt(cx: &LateContext, span: Span, m: u64, c: u64, op: &str)\n     }\n }\n \n-fn check_ineffective_gt(cx: &LateContext, span: Span, m: u64, c: u64, op: &str) {\n+fn check_ineffective_gt(cx: &LateContext, span: Span, m: u128, c: u128, op: &str) {\n     if (c + 1).is_power_of_two() && m <= c {\n         span_lint(cx,\n                   INEFFECTIVE_BIT_MASK,\n@@ -236,7 +236,7 @@ fn check_ineffective_gt(cx: &LateContext, span: Span, m: u64, c: u64, op: &str)\n     }\n }\n \n-fn fetch_int_literal(cx: &LateContext, lit: &Expr) -> Option<u64> {\n+fn fetch_int_literal(cx: &LateContext, lit: &Expr) -> Option<u128> {\n     match lit.node {\n         ExprLit(ref lit_ptr) => {\n             if let LitKind::Int(value, _) = lit_ptr.node {"}, {"sha": "890baa64d2335f0703fa33ab4da141ef40678f15", "filename": "clippy_lints/src/consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5aea0b2062bc72eab4aa6c15b674979a64d9fe0f/clippy_lints%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aea0b2062bc72eab4aa6c15b674979a64d9fe0f/clippy_lints%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconsts.rs?ref=5aea0b2062bc72eab4aa6c15b674979a64d9fe0f", "patch": "@@ -74,7 +74,7 @@ impl PartialEq for Constant {\n             (&Constant::Binary(ref l), &Constant::Binary(ref r)) => l == r,\n             (&Constant::Char(l), &Constant::Char(r)) => l == r,\n             (&Constant::Int(l), &Constant::Int(r)) => {\n-                l.is_negative() == r.is_negative() && l.to_u64_unchecked() == r.to_u64_unchecked()\n+                l.is_negative() == r.is_negative() && l.to_u128_unchecked() == r.to_u128_unchecked()\n             },\n             (&Constant::Float(ref ls, _), &Constant::Float(ref rs, _)) => {\n                 // we want `Fw32 == FwAny` and `FwAny == Fw64`, by transitivity we must have\n@@ -110,7 +110,7 @@ impl Hash for Constant {\n                 c.hash(state);\n             },\n             Constant::Int(i) => {\n-                i.to_u64_unchecked().hash(state);\n+                i.to_u128_unchecked().hash(state);\n                 i.is_negative().hash(state);\n             },\n             Constant::Float(ref f, _) => {"}, {"sha": "b902d18d184919b00b005427400c12016043f7b0", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5aea0b2062bc72eab4aa6c15b674979a64d9fe0f/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aea0b2062bc72eab4aa6c15b674979a64d9fe0f/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=5aea0b2062bc72eab4aa6c15b674979a64d9fe0f", "patch": "@@ -3,6 +3,7 @@\n #![feature(box_syntax)]\n #![feature(collections)]\n #![feature(custom_attribute)]\n+#![feature(i128_type)]\n #![feature(rustc_private)]\n #![feature(slice_patterns)]\n #![feature(stmt_expr_attributes)]"}, {"sha": "102074ca15a0bbfc03aba9a16250461bab4e946f", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5aea0b2062bc72eab4aa6c15b674979a64d9fe0f/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aea0b2062bc72eab4aa6c15b674979a64d9fe0f/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=5aea0b2062bc72eab4aa6c15b674979a64d9fe0f", "patch": "@@ -611,7 +611,7 @@ pub fn walk_ptrs_ty_depth(ty: ty::Ty) -> (ty::Ty, usize) {\n }\n \n /// Check whether the given expression is a constant literal of the given value.\n-pub fn is_integer_literal(expr: &Expr, value: u64) -> bool {\n+pub fn is_integer_literal(expr: &Expr, value: u128) -> bool {\n     // FIXME: use constant folding\n     if let ExprLit(ref spanned) = expr.node {\n         if let LitKind::Int(v, _) = spanned.node {"}]}