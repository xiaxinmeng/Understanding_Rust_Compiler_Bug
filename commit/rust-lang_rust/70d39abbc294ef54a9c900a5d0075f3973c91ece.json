{"sha": "70d39abbc294ef54a9c900a5d0075f3973c91ece", "node_id": "C_kwDOAAsO6NoAKDcwZDM5YWJiYzI5NGVmNTRhOWM5MDBhNWQwMDc1ZjM5NzNjOTFlY2U", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-09-27T13:02:44Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-10-07T19:43:46Z"}, "message": "Remap hidden types from typeck before storing them in the TypeckResult", "tree": {"sha": "9febd7587e7882ba0871a74894bbe40cf8360c28", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9febd7587e7882ba0871a74894bbe40cf8360c28"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70d39abbc294ef54a9c900a5d0075f3973c91ece", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70d39abbc294ef54a9c900a5d0075f3973c91ece", "html_url": "https://github.com/rust-lang/rust/commit/70d39abbc294ef54a9c900a5d0075f3973c91ece", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70d39abbc294ef54a9c900a5d0075f3973c91ece/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9eb69e82e0e4bcbedb4f21f392210204ad8588ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/9eb69e82e0e4bcbedb4f21f392210204ad8588ab", "html_url": "https://github.com/rust-lang/rust/commit/9eb69e82e0e4bcbedb4f21f392210204ad8588ab"}], "stats": {"total": 60, "additions": 42, "deletions": 18}, "files": [{"sha": "56987edd1b6e387b40926b1df873502f1d7b2b22", "filename": "compiler/rustc_borrowck/src/region_infer/opaque_types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70d39abbc294ef54a9c900a5d0075f3973c91ece/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70d39abbc294ef54a9c900a5d0075f3973c91ece/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs?ref=70d39abbc294ef54a9c900a5d0075f3973c91ece", "patch": "@@ -226,7 +226,7 @@ impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n         }\n \n         let definition_ty = instantiated_ty\n-            .remap_generic_params_to_declaration_params(opaque_type_key, self.tcx)\n+            .remap_generic_params_to_declaration_params(opaque_type_key, self.tcx, false)\n             .ty;\n \n         if !check_opaque_type_parameter_valid("}, {"sha": "9aeee091fdded9daae5dfd39354fab35813d04ed", "filename": "compiler/rustc_hir_analysis/src/check/writeback.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/70d39abbc294ef54a9c900a5d0075f3973c91ece/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70d39abbc294ef54a9c900a5d0075f3973c91ece/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwriteback.rs?ref=70d39abbc294ef54a9c900a5d0075f3973c91ece", "patch": "@@ -536,7 +536,8 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n         let opaque_types =\n             self.fcx.infcx.inner.borrow_mut().opaque_type_storage.take_opaque_types();\n         for (opaque_type_key, decl) in opaque_types {\n-            let hidden_type = self.resolve(decl.hidden_type.ty, &decl.hidden_type.span);\n+            let hidden_type = self.resolve(decl.hidden_type, &decl.hidden_type.span);\n+            let opaque_type_key = self.resolve(opaque_type_key, &decl.hidden_type.span);\n \n             struct RecursionChecker {\n                 def_id: LocalDefId,\n@@ -559,6 +560,14 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n                 continue;\n             }\n \n+            let hidden_type = hidden_type\n+                .remap_generic_params_to_declaration_params(\n+                    opaque_type_key,\n+                    self.fcx.infcx.tcx,\n+                    true,\n+                )\n+                .ty;\n+\n             self.typeck_results.concrete_opaque_types.insert(opaque_type_key.def_id, hidden_type);\n         }\n     }"}, {"sha": "cb7700f9bcab41b66bb783cee7b1f58a735a9d3c", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70d39abbc294ef54a9c900a5d0075f3973c91ece/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70d39abbc294ef54a9c900a5d0075f3973c91ece/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=70d39abbc294ef54a9c900a5d0075f3973c91ece", "patch": "@@ -1307,6 +1307,8 @@ impl<'tcx> OpaqueHiddenType<'tcx> {\n         self,\n         opaque_type_key: OpaqueTypeKey<'tcx>,\n         tcx: TyCtxt<'tcx>,\n+        // typeck errors have subpar spans for opaque types, so delay error reporting until borrowck.\n+        ignore_errors: bool,\n     ) -> Self {\n         let OpaqueTypeKey { def_id, substs } = opaque_type_key;\n \n@@ -1325,7 +1327,7 @@ impl<'tcx> OpaqueHiddenType<'tcx> {\n         // Convert the type from the function into a type valid outside\n         // the function, by replacing invalid regions with 'static,\n         // after producing an error for each of them.\n-        self.fold_with(&mut opaque_types::ReverseMapper::new(tcx, map, self.span))\n+        self.fold_with(&mut opaque_types::ReverseMapper::new(tcx, map, self.span, ignore_errors))\n     }\n }\n "}, {"sha": "b05c6310929b521b35070434325a90078d4d1bf7", "filename": "compiler/rustc_middle/src/ty/opaque_types.rs", "status": "modified", "additions": 28, "deletions": 15, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/70d39abbc294ef54a9c900a5d0075f3973c91ece/compiler%2Frustc_middle%2Fsrc%2Fty%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70d39abbc294ef54a9c900a5d0075f3973c91ece/compiler%2Frustc_middle%2Fsrc%2Fty%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fopaque_types.rs?ref=70d39abbc294ef54a9c900a5d0075f3973c91ece", "patch": "@@ -10,8 +10,16 @@ use rustc_span::Span;\n pub(super) struct ReverseMapper<'tcx> {\n     tcx: TyCtxt<'tcx>,\n     map: FxHashMap<GenericArg<'tcx>, GenericArg<'tcx>>,\n+    /// see call sites to fold_kind_no_missing_regions_error\n+    /// for an explanation of this field.\n     do_not_error: bool,\n \n+    /// We do not want to emit any errors in typeck because\n+    /// the spans in typeck are subpar at the moment.\n+    /// Borrowck will do the same work again (this time with\n+    /// lifetime information) and thus report better errors.\n+    ignore_errors: bool,\n+\n     /// Span of function being checked.\n     span: Span,\n }\n@@ -21,8 +29,9 @@ impl<'tcx> ReverseMapper<'tcx> {\n         tcx: TyCtxt<'tcx>,\n         map: FxHashMap<GenericArg<'tcx>, GenericArg<'tcx>>,\n         span: Span,\n+        ignore_errors: bool,\n     ) -> Self {\n-        Self { tcx, map, do_not_error: false, span }\n+        Self { tcx, map, do_not_error: false, ignore_errors, span }\n     }\n \n     fn fold_kind_no_missing_regions_error(&mut self, kind: GenericArg<'tcx>) -> GenericArg<'tcx> {\n@@ -156,17 +165,19 @@ impl<'tcx> TypeFolder<'tcx> for ReverseMapper<'tcx> {\n                     Some(u) => panic!(\"type mapped to unexpected kind: {:?}\", u),\n                     None => {\n                         debug!(?param, ?self.map);\n-                        self.tcx\n-                            .sess\n-                            .struct_span_err(\n-                                self.span,\n-                                &format!(\n-                                    \"type parameter `{}` is part of concrete type but not \\\n+                        if !self.ignore_errors {\n+                            self.tcx\n+                                .sess\n+                                .struct_span_err(\n+                                    self.span,\n+                                    &format!(\n+                                        \"type parameter `{}` is part of concrete type but not \\\n                                           used in parameter list for the `impl Trait` type alias\",\n-                                    ty\n-                                ),\n-                            )\n-                            .emit();\n+                                        ty\n+                                    ),\n+                                )\n+                                .emit();\n+                        }\n \n                         self.tcx().ty_error()\n                     }\n@@ -189,10 +200,12 @@ impl<'tcx> TypeFolder<'tcx> for ReverseMapper<'tcx> {\n                     Some(GenericArgKind::Const(c1)) => c1,\n                     Some(u) => panic!(\"const mapped to unexpected kind: {:?}\", u),\n                     None => {\n-                        self.tcx.sess.emit_err(ty::ConstNotUsedTraitAlias {\n-                            ct: ct.to_string(),\n-                            span: self.span,\n-                        });\n+                        if !self.ignore_errors {\n+                            self.tcx.sess.emit_err(ty::ConstNotUsedTraitAlias {\n+                                ct: ct.to_string(),\n+                                span: self.span,\n+                            });\n+                        }\n \n                         self.tcx().const_error(ct.ty())\n                     }"}]}