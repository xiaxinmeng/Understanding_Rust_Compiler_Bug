{"sha": "6c14aad58e65c9c50faa45ed88369c5c72d6d0d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjMTRhYWQ1OGU2NWM5YzUwZmFhNDVlZDg4MzY5YzVjNzJkNmQwZDc=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2021-01-31T20:21:28Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2021-01-31T20:24:34Z"}, "message": "Improve handling of spans around macro result parse errors\n\nFixes #81543\n\nAfter we expand a macro, we try to parse the resulting tokens as a AST\nnode. This commit makes several improvements to how we handle spans when\nan error occurs:\n\n* Only ovewrite the original `Span` if it's a dummy span. This preserves\n  a more-specific span if one is available.\n* Use `self.prev_token` instead of `self.token` when emitting an error\n  message after encountering EOF, since an EOF token always has a dummy\n  span\n* Make `SourceMap::next_point` leave dummy spans unused. A dummy span\n  does not have a logical 'next point', since it's a zero-length span.\n  Re-using the span span preserves its 'dummy-ness' for other checks", "tree": {"sha": "4556d6d03bc8729cdd8c38d57bbfe2d48c75e386", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4556d6d03bc8729cdd8c38d57bbfe2d48c75e386"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c14aad58e65c9c50faa45ed88369c5c72d6d0d7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAmAXEgoACgkQtAh+UQ6Y\nsWSGtA//bZnJ0X9b3+gCSGCaJ0QeIWCB6rqFNHwHC4GDipFezOEpEiW1kBStGlmw\njGECA/KiV3SUVucIodiPr5ntsjMqXPCN0fjfF4V68V41tbhiXLJq5KQymbkjTfQe\nEoWEH1CnoasWwX/Eucsd/bfAx+r0ED/xCZgxdEog0tp3Mz5xkfKVxkX/j1kcIHHJ\nK2YZe3UJiuG5rIBy7iz8rMBASua7p+x7wT//Poy0jpmVJXTjD9/k+gcjp1cdnrc4\nWLPtKwDQ1YIcldAAb9WCir04rdeGAoLC3mvov+MyTZ9eSECaEiXmhtHYMbeuybBQ\nrLtfdqIg9vPeoC5VYohddfUvwzsDtJBTnbVX542ydrIiBGTkVwoxP1rbPYf0nlMg\nDy71PLubkqBf5qS69KrCpfsggZ8dUwTiXXQckXfv0qM1h6xw/pqjFkhbXJlnZXFC\nVQJdZFkzNMhG/Biy8xtypcs4OTVJHyPvMEO45JQZjPeVwypxsp1brNnxUNbfsXmK\nB96Yw94Yzh+tQ6G+NdMrgKZNMiYmJgK0J5E7aLsRMzQjbbL8JOr07on29dQYBXLc\nkXCCJl0MzcS5jrEL19hh6amTyZ5y8vpNieNWE05zpB3PdehBi+CvCWzc5mghX/Zo\noC54Ss0Ff/zapgGn0/YU2hpX01W2cXOktE8WuaZmXh/VMbDAf/A=\n=j3Jg\n-----END PGP SIGNATURE-----", "payload": "tree 4556d6d03bc8729cdd8c38d57bbfe2d48c75e386\nparent 04caa632dd10c2bf64b69524c7f9c4c30a436877\nauthor Aaron Hill <aa1ronham@gmail.com> 1612124488 -0500\ncommitter Aaron Hill <aa1ronham@gmail.com> 1612124674 -0500\n\nImprove handling of spans around macro result parse errors\n\nFixes #81543\n\nAfter we expand a macro, we try to parse the resulting tokens as a AST\nnode. This commit makes several improvements to how we handle spans when\nan error occurs:\n\n* Only ovewrite the original `Span` if it's a dummy span. This preserves\n  a more-specific span if one is available.\n* Use `self.prev_token` instead of `self.token` when emitting an error\n  message after encountering EOF, since an EOF token always has a dummy\n  span\n* Make `SourceMap::next_point` leave dummy spans unused. A dummy span\n  does not have a logical 'next point', since it's a zero-length span.\n  Re-using the span span preserves its 'dummy-ness' for other checks\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c14aad58e65c9c50faa45ed88369c5c72d6d0d7", "html_url": "https://github.com/rust-lang/rust/commit/6c14aad58e65c9c50faa45ed88369c5c72d6d0d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c14aad58e65c9c50faa45ed88369c5c72d6d0d7/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04caa632dd10c2bf64b69524c7f9c4c30a436877", "url": "https://api.github.com/repos/rust-lang/rust/commits/04caa632dd10c2bf64b69524c7f9c4c30a436877", "html_url": "https://github.com/rust-lang/rust/commit/04caa632dd10c2bf64b69524c7f9c4c30a436877"}], "stats": {"total": 40, "additions": 36, "deletions": 4}, "files": [{"sha": "5fdb7fc591594b861b3552c183489fd7b5bbab2e", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c14aad58e65c9c50faa45ed88369c5c72d6d0d7/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c14aad58e65c9c50faa45ed88369c5c72d6d0d7/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=6c14aad58e65c9c50faa45ed88369c5c72d6d0d7", "patch": "@@ -896,7 +896,9 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 fragment\n             }\n             Err(mut err) => {\n-                err.set_span(span);\n+                if err.span.is_dummy() {\n+                    err.set_span(span);\n+                }\n                 annotate_err_with_kind(&mut err, kind, span);\n                 err.emit();\n                 self.cx.trace_macros_diag();"}, {"sha": "5512e849c451d014783f2ed47531bfd9cdb95505", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6c14aad58e65c9c50faa45ed88369c5c72d6d0d7/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c14aad58e65c9c50faa45ed88369c5c72d6d0d7/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=6c14aad58e65c9c50faa45ed88369c5c72d6d0d7", "patch": "@@ -1104,7 +1104,7 @@ impl<'a> Parser<'a> {\n         let (prev_sp, sp) = match (&self.token.kind, self.subparser_name) {\n             // Point at the end of the macro call when reaching end of macro arguments.\n             (token::Eof, Some(_)) => {\n-                let sp = self.sess.source_map().next_point(self.token.span);\n+                let sp = self.sess.source_map().next_point(self.prev_token.span);\n                 (sp, sp)\n             }\n             // We don't want to point at the following span after DUMMY_SP.\n@@ -1721,7 +1721,7 @@ impl<'a> Parser<'a> {\n     pub(super) fn expected_expression_found(&self) -> DiagnosticBuilder<'a> {\n         let (span, msg) = match (&self.token.kind, self.subparser_name) {\n             (&token::Eof, Some(origin)) => {\n-                let sp = self.sess.source_map().next_point(self.token.span);\n+                let sp = self.sess.source_map().next_point(self.prev_token.span);\n                 (sp, format!(\"expected expression, found end of {}\", origin))\n             }\n             _ => ("}, {"sha": "2b429372dcffb2d2dd07a800bf4392b408739512", "filename": "compiler/rustc_span/src/source_map.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6c14aad58e65c9c50faa45ed88369c5c72d6d0d7/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c14aad58e65c9c50faa45ed88369c5c72d6d0d7/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs?ref=6c14aad58e65c9c50faa45ed88369c5c72d6d0d7", "patch": "@@ -799,6 +799,9 @@ impl SourceMap {\n \n     /// Returns a new span representing the next character after the end-point of this span.\n     pub fn next_point(&self, sp: Span) -> Span {\n+        if sp.is_dummy() {\n+            return sp;\n+        }\n         let start_of_next_point = sp.hi().0;\n \n         let width = self.find_width_of_character_at_span(sp.shrink_to_hi(), true);"}, {"sha": "027389556fe24fd83ed4a0cecc9554cbec5c8b13", "filename": "src/test/ui/proc-macro/issue-81543-item-parse-err.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6c14aad58e65c9c50faa45ed88369c5c72d6d0d7/src%2Ftest%2Fui%2Fproc-macro%2Fissue-81543-item-parse-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c14aad58e65c9c50faa45ed88369c5c72d6d0d7/src%2Ftest%2Fui%2Fproc-macro%2Fissue-81543-item-parse-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-81543-item-parse-err.rs?ref=6c14aad58e65c9c50faa45ed88369c5c72d6d0d7", "patch": "@@ -0,0 +1,14 @@\n+// aux-build:test-macros.rs\n+\n+// Regression test for issue #81543\n+// Tests that we emit a properly spanned error\n+// when the output of a proc-macro cannot be parsed\n+// as the expected AST node kind\n+\n+extern crate test_macros;\n+\n+test_macros::identity! {\n+    fn 32() {} //~ ERROR expected identifier\n+}\n+\n+fn main() {}"}, {"sha": "ca524176035b84d79a78a746e851cc43a723f8f3", "filename": "src/test/ui/proc-macro/issue-81543-item-parse-err.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6c14aad58e65c9c50faa45ed88369c5c72d6d0d7/src%2Ftest%2Fui%2Fproc-macro%2Fissue-81543-item-parse-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6c14aad58e65c9c50faa45ed88369c5c72d6d0d7/src%2Ftest%2Fui%2Fproc-macro%2Fissue-81543-item-parse-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-81543-item-parse-err.stderr?ref=6c14aad58e65c9c50faa45ed88369c5c72d6d0d7", "patch": "@@ -0,0 +1,8 @@\n+error: expected identifier, found `32`\n+  --> $DIR/issue-81543-item-parse-err.rs:11:8\n+   |\n+LL |     fn 32() {}\n+   |        ^^ expected identifier\n+\n+error: aborting due to previous error\n+"}, {"sha": "58f6165388ca167c3db93524d8c5b1de41f81621", "filename": "src/test/ui/proc-macro/lifetimes.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6c14aad58e65c9c50faa45ed88369c5c72d6d0d7/src%2Ftest%2Fui%2Fproc-macro%2Flifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6c14aad58e65c9c50faa45ed88369c5c72d6d0d7/src%2Ftest%2Fui%2Fproc-macro%2Flifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Flifetimes.stderr?ref=6c14aad58e65c9c50faa45ed88369c5c72d6d0d7", "patch": "@@ -2,7 +2,12 @@ error: expected type, found `'`\n   --> $DIR/lifetimes.rs:7:10\n    |\n LL | type A = single_quote_alone!();\n-   |          ^^^^^^^^^^^^^^^^^^^^^ this macro call doesn't expand to a type\n+   |          ^^^^^^^^^^^^^^^^^^^^^\n+   |          |\n+   |          expected type\n+   |          this macro call doesn't expand to a type\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}]}