{"sha": "64f1a59daf4b7b5cbab1730f3b10fb73745d3b5e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0ZjFhNTlkYWY0YjdiNWNiYWIxNzMwZjNiMTBmYjczNzQ1ZDNiNWU=", "commit": {"author": {"name": "Jared Roesch", "email": "roeschinc@gmail.com", "date": "2015-06-28T00:37:13Z"}, "committer": {"name": "Jared Roesch", "email": "roeschinc@gmail.com", "date": "2015-06-30T09:40:16Z"}, "message": "Update all uses of FulfillmentContext\n\nUpdate all uses of FulfillmentContext to be ones obtained via\nan InferCtxt. This is another step of flattening the type\nchecking context into a single piece of state.", "tree": {"sha": "f5df5d6b681d38e395b74a0ebb966c3f75473291", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5df5d6b681d38e395b74a0ebb966c3f75473291"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64f1a59daf4b7b5cbab1730f3b10fb73745d3b5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64f1a59daf4b7b5cbab1730f3b10fb73745d3b5e", "html_url": "https://github.com/rust-lang/rust/commit/64f1a59daf4b7b5cbab1730f3b10fb73745d3b5e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64f1a59daf4b7b5cbab1730f3b10fb73745d3b5e/comments", "author": {"login": "jroesch", "id": 696509, "node_id": "MDQ6VXNlcjY5NjUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/696509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jroesch", "html_url": "https://github.com/jroesch", "followers_url": "https://api.github.com/users/jroesch/followers", "following_url": "https://api.github.com/users/jroesch/following{/other_user}", "gists_url": "https://api.github.com/users/jroesch/gists{/gist_id}", "starred_url": "https://api.github.com/users/jroesch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jroesch/subscriptions", "organizations_url": "https://api.github.com/users/jroesch/orgs", "repos_url": "https://api.github.com/users/jroesch/repos", "events_url": "https://api.github.com/users/jroesch/events{/privacy}", "received_events_url": "https://api.github.com/users/jroesch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jroesch", "id": 696509, "node_id": "MDQ6VXNlcjY5NjUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/696509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jroesch", "html_url": "https://github.com/jroesch", "followers_url": "https://api.github.com/users/jroesch/followers", "following_url": "https://api.github.com/users/jroesch/following{/other_user}", "gists_url": "https://api.github.com/users/jroesch/gists{/gist_id}", "starred_url": "https://api.github.com/users/jroesch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jroesch/subscriptions", "organizations_url": "https://api.github.com/users/jroesch/orgs", "repos_url": "https://api.github.com/users/jroesch/repos", "events_url": "https://api.github.com/users/jroesch/events{/privacy}", "received_events_url": "https://api.github.com/users/jroesch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6947948b4df98b82a9e8f6847db442921edfc37b", "url": "https://api.github.com/repos/rust-lang/rust/commits/6947948b4df98b82a9e8f6847db442921edfc37b", "html_url": "https://github.com/rust-lang/rust/commit/6947948b4df98b82a9e8f6847db442921edfc37b"}], "stats": {"total": 22, "additions": 12, "deletions": 10}, "files": [{"sha": "16193e11b4142470cd2dddd22397592a0d691d4d", "filename": "src/librustc/middle/check_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64f1a59daf4b7b5cbab1730f3b10fb73745d3b5e/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64f1a59daf4b7b5cbab1730f3b10fb73745d3b5e/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs?ref=64f1a59daf4b7b5cbab1730f3b10fb73745d3b5e", "patch": "@@ -284,8 +284,8 @@ impl<'a, 'tcx> CheckCrateVisitor<'a, 'tcx> {\n     fn check_static_type(&self, e: &ast::Expr) {\n         let ty = self.tcx.node_id_to_type(e.id);\n         let infcx = infer::new_infer_ctxt(self.tcx, &self.tcx.tables, None);\n-        let mut fulfill_cx = traits::FulfillmentContext::new(false);\n         let cause = traits::ObligationCause::new(e.span, e.id, traits::SharedStatic);\n+        let mut fulfill_cx = infcx.fulfillment_cx.borrow_mut();\n         fulfill_cx.register_builtin_bound(&infcx, ty, ty::BoundSync, cause);\n         match fulfill_cx.select_all_or_error(&infcx, &infcx.parameter_environment) {\n             Ok(()) => { },"}, {"sha": "ff84c1755a4d6a649c3f7fb0447f3275f28528a2", "filename": "src/librustc/middle/traits/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/64f1a59daf4b7b5cbab1730f3b10fb73745d3b5e/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64f1a59daf4b7b5cbab1730f3b10fb73745d3b5e/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs?ref=64f1a59daf4b7b5cbab1730f3b10fb73745d3b5e", "patch": "@@ -322,7 +322,7 @@ pub fn type_known_to_meet_builtin_bound<'a,'tcx>(infcx: &InferCtxt<'a,'tcx>,\n            ty,\n            bound);\n \n-    let mut fulfill_cx = FulfillmentContext::new(false);\n+    let mut fulfill_cx = infcx.fulfillment_cx.borrow_mut();\n \n     // We can use a dummy node-id here because we won't pay any mind\n     // to region obligations that arise (there shouldn't really be any\n@@ -438,7 +438,8 @@ pub fn fully_normalize<'a,'tcx,T>(infcx: &InferCtxt<'a,'tcx>,\n     debug!(\"normalize_param_env(value={:?})\", value);\n \n     let mut selcx = &mut SelectionContext::new(infcx, closure_typer);\n-    let mut fulfill_cx = FulfillmentContext::new(false);\n+    let mut fulfill_cx = infcx.fulfillment_cx.borrow_mut();\n+\n     let Normalized { value: normalized_value, obligations } =\n         project::normalize(selcx, cause, value);\n     debug!(\"normalize_param_env: normalized_value={:?} obligations={:?}\","}, {"sha": "92aeb9f7b720ed701df6344ead8e5c1e6444eaec", "filename": "src/librustc_trans/trans/common.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/64f1a59daf4b7b5cbab1730f3b10fb73745d3b5e/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64f1a59daf4b7b5cbab1730f3b10fb73745d3b5e/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs?ref=64f1a59daf4b7b5cbab1730f3b10fb73745d3b5e", "patch": "@@ -994,7 +994,7 @@ pub fn fulfill_obligation<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n     // Currently, we use a fulfillment context to completely resolve\n     // all nested obligations. This is because they can inform the\n     // inference of the impl's type parameters.\n-    let mut fulfill_cx = traits::FulfillmentContext::new(true);\n+    let mut fulfill_cx = infcx.fulfillment_cx.borrow_mut();\n     let vtable = selection.map(|predicate| {\n         fulfill_cx.register_predicate_obligation(&infcx, predicate);\n     });\n@@ -1019,10 +1019,10 @@ pub fn normalize_and_test_predicates<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n            predicates);\n \n     let tcx = ccx.tcx();\n-    let mut infcx = infer::new_infer_ctxt(tcx, &tcx.tables, None, false);\n+    let infcx = infer::new_infer_ctxt(tcx, &tcx.tables, None, false);\n     let typer = NormalizingClosureTyper::new(tcx);\n     let mut selcx = traits::SelectionContext::new(&infcx, &typer);\n-    let mut fulfill_cx = traits::FulfillmentContext::new(false);\n+    let mut fulfill_cx = infcx.fulfillment_cx.borrow_mut();\n     let cause = traits::ObligationCause::dummy();\n     let traits::Normalized { value: predicates, obligations } =\n         traits::normalize(&mut selcx, cause.clone(), &predicates);"}, {"sha": "b88251c69a0a9c6eb5e24c15c973cb9ed43f8aac", "filename": "src/librustc_trans/trans/monomorphize.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/64f1a59daf4b7b5cbab1730f3b10fb73745d3b5e/src%2Flibrustc_trans%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64f1a59daf4b7b5cbab1730f3b10fb73745d3b5e/src%2Flibrustc_trans%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmonomorphize.rs?ref=64f1a59daf4b7b5cbab1730f3b10fb73745d3b5e", "patch": "@@ -335,7 +335,8 @@ pub fn normalize_associated_type<'tcx,T>(tcx: &ty::ctxt<'tcx>, value: &T) -> T\n            result,\n            obligations);\n \n-    let mut fulfill_cx = traits::FulfillmentContext::new(true);\n+    let mut fulfill_cx = infcx.fulfillment_cx.borrow_mut();\n+    \n     for obligation in obligations {\n         fulfill_cx.register_predicate_obligation(&infcx, obligation);\n     }"}, {"sha": "85478945e1cfc4c0d53332f4eca28e41b542dde6", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/64f1a59daf4b7b5cbab1730f3b10fb73745d3b5e/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64f1a59daf4b7b5cbab1730f3b10fb73745d3b5e/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=64f1a59daf4b7b5cbab1730f3b10fb73745d3b5e", "patch": "@@ -44,7 +44,7 @@ pub fn compare_impl_method<'tcx>(tcx: &ty::ctxt<'tcx>,\n            impl_trait_ref);\n \n     let mut infcx = infer::new_infer_ctxt(tcx, &tcx.tables, None, true);\n-    let mut fulfillment_cx = traits::FulfillmentContext::new(true);\n+    let mut fulfillment_cx = infcx.fulfillment_cx.borrow_mut();\n \n     let trait_to_impl_substs = &impl_trait_ref.substs;\n \n@@ -420,7 +420,7 @@ pub fn compare_const_impl<'tcx>(tcx: &ty::ctxt<'tcx>,\n            impl_trait_ref);\n \n     let infcx = infer::new_infer_ctxt(tcx, &tcx.tables, None, true);\n-    let mut fulfillment_cx = traits::FulfillmentContext::new(true);\n+    let mut fulfillment_cx = infcx.fulfillment_cx.borrow_mut();\n \n     // The below is for the most part highly similar to the procedure\n     // for methods above. It is simpler in many respects, especially"}, {"sha": "9705cfae4d3e972a5517e38f6b79bbc15e19e72e", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64f1a59daf4b7b5cbab1730f3b10fb73745d3b5e/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64f1a59daf4b7b5cbab1730f3b10fb73745d3b5e/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=64f1a59daf4b7b5cbab1730f3b10fb73745d3b5e", "patch": "@@ -531,7 +531,7 @@ impl<'a, 'tcx> CoherenceChecker<'a, 'tcx> {\n                 }\n             };\n \n-            let mut fulfill_cx = traits::FulfillmentContext::new(true);\n+            let mut fulfill_cx = infcx.fulfillment_cx.borrow_mut(); \n \n             // Register an obligation for `A: Trait<B>`.\n             let cause = traits::ObligationCause::misc(span, impl_did.node);"}]}