{"sha": "8679e17723c783333b62e492c3e917276c7a2cbe", "node_id": "C_kwDOAAsO6NoAKDg2NzllMTc3MjNjNzgzMzMzYjYyZTQ5MmMzZTkxNzI3NmM3YTJjYmU", "commit": {"author": {"name": "Sylvan Bowdler", "email": "sylvanbowdler18@gmail.com", "date": "2021-12-14T17:35:27Z"}, "committer": {"name": "Sylvan Bowdler", "email": "sylvanbowdler18@gmail.com", "date": "2021-12-14T17:35:27Z"}, "message": "Remove `in_band_lifetimes` from `rustc_metadata`", "tree": {"sha": "949e5bc47ccd9e4c755737dadb9ee166662984c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/949e5bc47ccd9e4c755737dadb9ee166662984c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8679e17723c783333b62e492c3e917276c7a2cbe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8679e17723c783333b62e492c3e917276c7a2cbe", "html_url": "https://github.com/rust-lang/rust/commit/8679e17723c783333b62e492c3e917276c7a2cbe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8679e17723c783333b62e492c3e917276c7a2cbe/comments", "author": {"login": "SylvanB", "id": 14810695, "node_id": "MDQ6VXNlcjE0ODEwNjk1", "avatar_url": "https://avatars.githubusercontent.com/u/14810695?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SylvanB", "html_url": "https://github.com/SylvanB", "followers_url": "https://api.github.com/users/SylvanB/followers", "following_url": "https://api.github.com/users/SylvanB/following{/other_user}", "gists_url": "https://api.github.com/users/SylvanB/gists{/gist_id}", "starred_url": "https://api.github.com/users/SylvanB/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SylvanB/subscriptions", "organizations_url": "https://api.github.com/users/SylvanB/orgs", "repos_url": "https://api.github.com/users/SylvanB/repos", "events_url": "https://api.github.com/users/SylvanB/events{/privacy}", "received_events_url": "https://api.github.com/users/SylvanB/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SylvanB", "id": 14810695, "node_id": "MDQ6VXNlcjE0ODEwNjk1", "avatar_url": "https://avatars.githubusercontent.com/u/14810695?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SylvanB", "html_url": "https://github.com/SylvanB", "followers_url": "https://api.github.com/users/SylvanB/followers", "following_url": "https://api.github.com/users/SylvanB/following{/other_user}", "gists_url": "https://api.github.com/users/SylvanB/gists{/gist_id}", "starred_url": "https://api.github.com/users/SylvanB/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SylvanB/subscriptions", "organizations_url": "https://api.github.com/users/SylvanB/orgs", "repos_url": "https://api.github.com/users/SylvanB/repos", "events_url": "https://api.github.com/users/SylvanB/events{/privacy}", "received_events_url": "https://api.github.com/users/SylvanB/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "404c8471aba60c2d837fa728e7c729a0f52d5830", "url": "https://api.github.com/repos/rust-lang/rust/commits/404c8471aba60c2d837fa728e7c729a0f52d5830", "html_url": "https://github.com/rust-lang/rust/commit/404c8471aba60c2d837fa728e7c729a0f52d5830"}], "stats": {"total": 25, "additions": 12, "deletions": 13}, "files": [{"sha": "c70a6914520183fbdc21dc031499a5f601467b32", "filename": "compiler/rustc_metadata/src/foreign_modules.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8679e17723c783333b62e492c3e917276c7a2cbe/compiler%2Frustc_metadata%2Fsrc%2Fforeign_modules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8679e17723c783333b62e492c3e917276c7a2cbe/compiler%2Frustc_metadata%2Fsrc%2Fforeign_modules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fforeign_modules.rs?ref=8679e17723c783333b62e492c3e917276c7a2cbe", "patch": "@@ -13,7 +13,7 @@ struct Collector {\n     modules: Vec<ForeignModule>,\n }\n \n-impl ItemLikeVisitor<'tcx> for Collector {\n+impl<'tcx> ItemLikeVisitor<'tcx> for Collector {\n     fn visit_item(&mut self, it: &'tcx hir::Item<'tcx>) {\n         let items = match it.kind {\n             hir::ItemKind::ForeignMod { items, .. } => items,"}, {"sha": "918c3b9daf1075bb6e6b9b9d5c520eb67536c8a8", "filename": "compiler/rustc_metadata/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8679e17723c783333b62e492c3e917276c7a2cbe/compiler%2Frustc_metadata%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8679e17723c783333b62e492c3e917276c7a2cbe/compiler%2Frustc_metadata%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flib.rs?ref=8679e17723c783333b62e492c3e917276c7a2cbe", "patch": "@@ -1,7 +1,6 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(crate_visibility_modifier)]\n #![feature(drain_filter)]\n-#![feature(in_band_lifetimes)]\n #![feature(let_else)]\n #![feature(nll)]\n #![feature(once_cell)]"}, {"sha": "2893ceb5bf54362327baf5325ed797bbc44b8dc9", "filename": "compiler/rustc_metadata/src/locator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8679e17723c783333b62e492c3e917276c7a2cbe/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8679e17723c783333b62e492c3e917276c7a2cbe/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs?ref=8679e17723c783333b62e492c3e917276c7a2cbe", "patch": "@@ -734,7 +734,7 @@ impl<'a> CrateLocator<'a> {\n     }\n }\n \n-fn get_metadata_section(\n+fn get_metadata_section<'p>(\n     target: &Target,\n     flavor: CrateFlavor,\n     filename: &'p Path,"}, {"sha": "808151089df85d0d7271a4b70509884575daaee8", "filename": "compiler/rustc_metadata/src/native_libs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8679e17723c783333b62e492c3e917276c7a2cbe/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8679e17723c783333b62e492c3e917276c7a2cbe/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs?ref=8679e17723c783333b62e492c3e917276c7a2cbe", "patch": "@@ -31,7 +31,7 @@ struct Collector<'tcx> {\n     libs: Vec<NativeLib>,\n }\n \n-impl ItemLikeVisitor<'tcx> for Collector<'tcx> {\n+impl<'tcx> ItemLikeVisitor<'tcx> for Collector<'tcx> {\n     fn visit_item(&mut self, it: &'tcx hir::Item<'tcx>) {\n         let (abi, foreign_mod_items) = match it.kind {\n             hir::ItemKind::ForeignMod { abi, items } => (abi, items),\n@@ -223,7 +223,7 @@ impl ItemLikeVisitor<'tcx> for Collector<'tcx> {\n     fn visit_foreign_item(&mut self, _it: &'tcx hir::ForeignItem<'tcx>) {}\n }\n \n-impl Collector<'tcx> {\n+impl Collector<'_> {\n     fn register_native_lib(&mut self, span: Option<Span>, lib: NativeLib) {\n         if lib.name.as_ref().map_or(false, |&s| s == kw::Empty) {\n             match span {"}, {"sha": "09c6cb010b04dc7b3693c3b5056e476405423b2e", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8679e17723c783333b62e492c3e917276c7a2cbe/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8679e17723c783333b62e492c3e917276c7a2cbe/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=8679e17723c783333b62e492c3e917276c7a2cbe", "patch": "@@ -628,7 +628,7 @@ where\n \n implement_ty_decoder!(DecodeContext<'a, 'tcx>);\n \n-impl MetadataBlob {\n+impl<'tcx> MetadataBlob {\n     crate fn new(metadata_ref: MetadataRef) -> MetadataBlob {\n         MetadataBlob(Lrc::new(metadata_ref))\n     }\n@@ -697,7 +697,7 @@ impl CrateRoot<'_> {\n         &self.triple\n     }\n \n-    crate fn decode_crate_deps(\n+    crate fn decode_crate_deps<'a>(\n         &self,\n         metadata: &'a MetadataBlob,\n     ) -> impl ExactSizeIterator<Item = CrateDep> + Captures<'a> {"}, {"sha": "5ba7efc37f8bd238f9e95148a3b1a8b65f7a78b9", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8679e17723c783333b62e492c3e917276c7a2cbe/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8679e17723c783333b62e492c3e917276c7a2cbe/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=8679e17723c783333b62e492c3e917276c7a2cbe", "patch": "@@ -83,7 +83,7 @@ impl IntoArgs for (CrateNum, DefId) {\n     }\n }\n \n-impl IntoArgs for ty::InstanceDef<'tcx> {\n+impl<'tcx> IntoArgs for ty::InstanceDef<'tcx> {\n     fn into_args(self) -> (DefId, DefId) {\n         (self.def_id(), self.def_id())\n     }"}, {"sha": "054431169a26cb342ed5d8d7f15539c9f84a48e8", "filename": "compiler/rustc_metadata/src/rmeta/def_path_hash_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8679e17723c783333b62e492c3e917276c7a2cbe/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdef_path_hash_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8679e17723c783333b62e492c3e917276c7a2cbe/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdef_path_hash_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdef_path_hash_map.rs?ref=8679e17723c783333b62e492c3e917276c7a2cbe", "patch": "@@ -11,7 +11,7 @@ crate enum DefPathHashMapRef<'tcx> {\n     BorrowedFromTcx(&'tcx DefPathHashMap),\n }\n \n-impl DefPathHashMapRef<'tcx> {\n+impl DefPathHashMapRef<'_> {\n     #[inline]\n     pub fn def_path_hash_to_def_index(&self, def_path_hash: &DefPathHash) -> DefIndex {\n         match *self {"}, {"sha": "b496e9624f97fb2883b1c71387355dd4fe9cfb57", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8679e17723c783333b62e492c3e917276c7a2cbe/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8679e17723c783333b62e492c3e917276c7a2cbe/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=8679e17723c783333b62e492c3e917276c7a2cbe", "patch": "@@ -962,7 +962,7 @@ fn should_encode_generics(def_kind: DefKind) -> bool {\n     }\n }\n \n-impl EncodeContext<'a, 'tcx> {\n+impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n     fn encode_def_ids(&mut self) {\n         if self.is_proc_macro {\n             return;\n@@ -1892,7 +1892,7 @@ impl EncodeContext<'a, 'tcx> {\n }\n \n // FIXME(eddyb) make metadata encoding walk over all definitions, instead of HIR.\n-impl Visitor<'tcx> for EncodeContext<'a, 'tcx> {\n+impl<'a, 'tcx> Visitor<'tcx> for EncodeContext<'a, 'tcx> {\n     type Map = Map<'tcx>;\n \n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n@@ -1925,7 +1925,7 @@ impl Visitor<'tcx> for EncodeContext<'a, 'tcx> {\n     }\n }\n \n-impl EncodeContext<'a, 'tcx> {\n+impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n     fn encode_fields(&mut self, adt_def: &ty::AdtDef) {\n         for (variant_index, variant) in adt_def.variants.iter_enumerated() {\n             for (field_index, _field) in variant.fields.iter().enumerate() {"}, {"sha": "5ce239ac704269f781c4401b7c81ccb3fc64e1d0", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8679e17723c783333b62e492c3e917276c7a2cbe/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8679e17723c783333b62e492c3e917276c7a2cbe/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=8679e17723c783333b62e492c3e917276c7a2cbe", "patch": "@@ -275,7 +275,7 @@ macro_rules! define_tables {\n             $($name: TableBuilder<$IDX, $T>),+\n         }\n \n-        impl TableBuilders<'tcx> {\n+        impl<'tcx> TableBuilders<'tcx> {\n             fn encode(&self, buf: &mut Encoder) -> LazyTables<'tcx> {\n                 LazyTables {\n                     $($name: self.$name.encode(buf)),+"}]}