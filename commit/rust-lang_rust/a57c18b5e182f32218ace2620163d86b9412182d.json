{"sha": "a57c18b5e182f32218ace2620163d86b9412182d", "node_id": "C_kwDOAAsO6NoAKGE1N2MxOGI1ZTE4MmYzMjIxOGFjZTI2MjAxNjNkODZiOTQxMjE4MmQ", "commit": {"author": {"name": "Ibraheem Ahmed", "email": "ibrah1440@gmail.com", "date": "2021-10-07T19:47:28Z"}, "committer": {"name": "Ibraheem Ahmed", "email": "ibrah1440@gmail.com", "date": "2021-10-07T19:47:28Z"}, "message": "add `Poll::ready`", "tree": {"sha": "974b96bf9a703bda1cb6a32ed9777f6217f49dce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/974b96bf9a703bda1cb6a32ed9777f6217f49dce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a57c18b5e182f32218ace2620163d86b9412182d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a57c18b5e182f32218ace2620163d86b9412182d", "html_url": "https://github.com/rust-lang/rust/commit/a57c18b5e182f32218ace2620163d86b9412182d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a57c18b5e182f32218ace2620163d86b9412182d/comments", "author": {"login": "ibraheemdev", "id": 34988408, "node_id": "MDQ6VXNlcjM0OTg4NDA4", "avatar_url": "https://avatars.githubusercontent.com/u/34988408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibraheemdev", "html_url": "https://github.com/ibraheemdev", "followers_url": "https://api.github.com/users/ibraheemdev/followers", "following_url": "https://api.github.com/users/ibraheemdev/following{/other_user}", "gists_url": "https://api.github.com/users/ibraheemdev/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibraheemdev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibraheemdev/subscriptions", "organizations_url": "https://api.github.com/users/ibraheemdev/orgs", "repos_url": "https://api.github.com/users/ibraheemdev/repos", "events_url": "https://api.github.com/users/ibraheemdev/events{/privacy}", "received_events_url": "https://api.github.com/users/ibraheemdev/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibraheemdev", "id": 34988408, "node_id": "MDQ6VXNlcjM0OTg4NDA4", "avatar_url": "https://avatars.githubusercontent.com/u/34988408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibraheemdev", "html_url": "https://github.com/ibraheemdev", "followers_url": "https://api.github.com/users/ibraheemdev/followers", "following_url": "https://api.github.com/users/ibraheemdev/following{/other_user}", "gists_url": "https://api.github.com/users/ibraheemdev/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibraheemdev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibraheemdev/subscriptions", "organizations_url": "https://api.github.com/users/ibraheemdev/orgs", "repos_url": "https://api.github.com/users/ibraheemdev/repos", "events_url": "https://api.github.com/users/ibraheemdev/events{/privacy}", "received_events_url": "https://api.github.com/users/ibraheemdev/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0157cc977fd71297ce73e2f249321f5ba2555d42", "url": "https://api.github.com/repos/rust-lang/rust/commits/0157cc977fd71297ce73e2f249321f5ba2555d42", "html_url": "https://github.com/rust-lang/rust/commit/0157cc977fd71297ce73e2f249321f5ba2555d42"}], "stats": {"total": 92, "additions": 92, "deletions": 0}, "files": [{"sha": "a872320aca65a38c7a519704c2f877e3300382ef", "filename": "library/core/src/task/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a57c18b5e182f32218ace2620163d86b9412182d/library%2Fcore%2Fsrc%2Ftask%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a57c18b5e182f32218ace2620163d86b9412182d/library%2Fcore%2Fsrc%2Ftask%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftask%2Fmod.rs?ref=a57c18b5e182f32218ace2620163d86b9412182d", "patch": "@@ -13,3 +13,5 @@ pub use self::wake::{Context, RawWaker, RawWakerVTable, Waker};\n mod ready;\n #[stable(feature = \"ready_macro\", since = \"1.56.0\")]\n pub use ready::ready;\n+#[unstable(feature = \"poll_ready\", issue = \"none\")]\n+pub use ready::Ready;"}, {"sha": "924c424548fd1247881c43d74c45020fa4cf192e", "filename": "library/core/src/task/poll.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/a57c18b5e182f32218ace2620163d86b9412182d/library%2Fcore%2Fsrc%2Ftask%2Fpoll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a57c18b5e182f32218ace2620163d86b9412182d/library%2Fcore%2Fsrc%2Ftask%2Fpoll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftask%2Fpoll.rs?ref=a57c18b5e182f32218ace2620163d86b9412182d", "patch": "@@ -3,6 +3,7 @@\n use crate::convert;\n use crate::ops::{self, ControlFlow};\n use crate::result::Result;\n+use crate::task::Ready;\n \n /// Indicates whether a value is available or if the current task has been\n /// scheduled to receive a wakeup instead.\n@@ -92,6 +93,38 @@ impl<T> Poll<T> {\n     pub const fn is_pending(&self) -> bool {\n         !self.is_ready()\n     }\n+\n+    /// Extracts the successful type of a [`Poll<T>`].\n+    ///\n+    /// When combined with the `?` operator, this function will\n+    /// propogate any [`Poll::Pending`] values to the caller, and\n+    /// extract the `T` from [`Poll::Ready`].\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```rust\n+    /// #![feature(poll_ready)]\n+    ///\n+    /// use std::task::{Context, Poll};\n+    /// use std::future::{self, Future};\n+    /// use std::pin::Pin;\n+    ///\n+    /// pub fn do_poll(cx: &mut Context<'_>) -> Poll<()> {\n+    ///     let mut fut = future::ready(42);\n+    ///     let fut = Pin::new(&mut fut);\n+    ///\n+    ///     let num = fut.poll(cx).ready()?;\n+    ///     # drop(num);\n+    ///     // ... use num\n+    ///\n+    ///     Poll::Ready(())\n+    /// }\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"poll_ready\", issue = \"none\")]\n+    pub fn ready(self) -> Ready<T> {\n+        Ready(self)\n+    }\n }\n \n impl<T, E> Poll<Result<T, E>> {"}, {"sha": "8b6e259134e7c79ee2ee99a242f535c19ed0fb19", "filename": "library/core/src/task/ready.rs", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/a57c18b5e182f32218ace2620163d86b9412182d/library%2Fcore%2Fsrc%2Ftask%2Fready.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a57c18b5e182f32218ace2620163d86b9412182d/library%2Fcore%2Fsrc%2Ftask%2Fready.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftask%2Fready.rs?ref=a57c18b5e182f32218ace2620163d86b9412182d", "patch": "@@ -1,3 +1,8 @@\n+use core::convert;\n+use core::fmt;\n+use core::ops::{ControlFlow, FromResidual, Try};\n+use core::task::Poll;\n+\n /// Extracts the successful type of a [`Poll<T>`].\n ///\n /// This macro bakes in propagation of [`Pending`] signals by returning early.\n@@ -55,3 +60,55 @@ pub macro ready($e:expr) {\n         }\n     }\n }\n+\n+/// Extracts the successful type of a [`Poll<T>`].\n+///\n+/// See [`Poll::ready`] for details.\n+#[unstable(feature = \"poll_ready\", issue = \"none\")]\n+pub struct Ready<T>(pub(crate) Poll<T>);\n+\n+#[unstable(feature = \"poll_ready\", issue = \"none\")]\n+impl<T> Try for Ready<T> {\n+    type Output = T;\n+    type Residual = Ready<convert::Infallible>;\n+\n+    #[inline]\n+    fn from_output(output: Self::Output) -> Self {\n+        Ready(Poll::Ready(output))\n+    }\n+\n+    #[inline]\n+    fn branch(self) -> ControlFlow<Self::Residual, Self::Output> {\n+        match self.0 {\n+            Poll::Ready(v) => ControlFlow::Continue(v),\n+            Poll::Pending => ControlFlow::Break(Ready(Poll::Pending)),\n+        }\n+    }\n+}\n+\n+#[unstable(feature = \"poll_ready\", issue = \"none\")]\n+impl<T> FromResidual for Ready<T> {\n+    #[inline]\n+    fn from_residual(residual: Ready<convert::Infallible>) -> Self {\n+        match residual.0 {\n+            Poll::Pending => Ready(Poll::Pending),\n+        }\n+    }\n+}\n+\n+#[unstable(feature = \"poll_ready\", issue = \"none\")]\n+impl<T> FromResidual<Ready<convert::Infallible>> for Poll<T> {\n+    #[inline]\n+    fn from_residual(residual: Ready<convert::Infallible>) -> Self {\n+        match residual.0 {\n+            Poll::Pending => Poll::Pending,\n+        }\n+    }\n+}\n+\n+#[unstable(feature = \"poll_ready\", issue = \"none\")]\n+impl<T> fmt::Debug for Ready<T> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        f.debug_tuple(\"Ready\").finish()\n+    }\n+}"}]}