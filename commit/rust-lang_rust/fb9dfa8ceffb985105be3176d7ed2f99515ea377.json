{"sha": "fb9dfa8ceffb985105be3176d7ed2f99515ea377", "node_id": "C_kwDOAAsO6NoAKGZiOWRmYThjZWZmYjk4NTEwNWJlMzE3NmQ3ZWQyZjk5NTE1ZWEzNzc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-02T13:10:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-02T13:10:16Z"}, "message": "Auto merge of #84762 - cjgillot:resolve-span-opt, r=petrochenkov\n\nEncode spans relative to the enclosing item -- enable on nightly\n\nFollow-up to #84373 with the flag `-Zincremental-relative-spans` set by default.\n\nThis PR seeks to remove one of the main shortcomings of incremental: the handling of spans.\nChanging the contents of a function may require redoing part of the compilation process for another function in another file because of span information is changed.\nWithin one file: all the spans in HIR change, so typechecking had to be re-done.\nBetween files: spans of associated types/consts/functions change, so type-based resolution needs to be re-done (hygiene information is stored in the span).\n\nThe flag `-Zincremental-relative-spans` encodes local spans relative to the span of an item, stored inside the `source_span` query.\n\nTrap: stashed diagnostics are referenced by the \"raw\" span, so stealing them requires to remove the span's parent.\n\nIn order to avoid too much traffic in the span interner, span encoding uses the `ctxt_or_tag` field to encode:\n- the parent when the `SyntaxContext` is 0;\n- the `SyntaxContext` when the parent is `None`.\nEven with this, the PR creates a lot of traffic to the Span interner, when a Span has both a LocalDefId parent and a non-root SyntaxContext. They appear in lowering, when we add a parent to all spans, including those which come from macros, and during inlining when we mark inlined spans.\n\nThe last commit changes how queries of `LocalDefId` manage their cache. I can put this in a separate PR if required.\n\nPossible future directions:\n- validate that all spans are marked in HIR validation;\n- mark macro-expanded spans relative to the def-site and not the use-site.", "tree": {"sha": "d4192d629847d9c00866eedfb28727bb1370ab86", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d4192d629847d9c00866eedfb28727bb1370ab86"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb9dfa8ceffb985105be3176d7ed2f99515ea377", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb9dfa8ceffb985105be3176d7ed2f99515ea377", "html_url": "https://github.com/rust-lang/rust/commit/fb9dfa8ceffb985105be3176d7ed2f99515ea377", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb9dfa8ceffb985105be3176d7ed2f99515ea377/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f89003eda8917ff99f8ee3fb5c812310a58c014b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f89003eda8917ff99f8ee3fb5c812310a58c014b", "html_url": "https://github.com/rust-lang/rust/commit/f89003eda8917ff99f8ee3fb5c812310a58c014b"}, {"sha": "7b6ead2027d073613ff3f160f221f5d3a5941b0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b6ead2027d073613ff3f160f221f5d3a5941b0b", "html_url": "https://github.com/rust-lang/rust/commit/7b6ead2027d073613ff3f160f221f5d3a5941b0b"}], "stats": {"total": 375, "additions": 170, "deletions": 205}, "files": [{"sha": "83174afdb12ef907cc8cc81ed094612abe3f449e", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb9dfa8ceffb985105be3176d7ed2f99515ea377/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb9dfa8ceffb985105be3176d7ed2f99515ea377/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=fb9dfa8ceffb985105be3176d7ed2f99515ea377", "patch": "@@ -776,7 +776,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     /// Intercept all spans entering HIR.\n     /// Mark a span as relative to the current owning item.\n     fn lower_span(&self, span: Span) -> Span {\n-        if self.tcx.sess.opts.unstable_opts.incremental_relative_spans {\n+        if self.tcx.sess.opts.incremental_relative_spans() {\n             span.with_parent(Some(self.current_hir_id_owner.def_id))\n         } else {\n             // Do not make spans relative when not using incremental compilation."}, {"sha": "136c360201e61a925049b941997d039544c34e9f", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 56, "deletions": 50, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/fb9dfa8ceffb985105be3176d7ed2f99515ea377/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb9dfa8ceffb985105be3176d7ed2f99515ea377/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=fb9dfa8ceffb985105be3176d7ed2f99515ea377", "patch": "@@ -469,10 +469,12 @@ pub enum StashKey {\n     CallAssocMethod,\n }\n \n-fn default_track_diagnostic(_: &Diagnostic) {}\n+fn default_track_diagnostic(d: &mut Diagnostic, f: &mut dyn FnMut(&mut Diagnostic)) {\n+    (*f)(d)\n+}\n \n-pub static TRACK_DIAGNOSTICS: AtomicRef<fn(&Diagnostic)> =\n-    AtomicRef::new(&(default_track_diagnostic as fn(&_)));\n+pub static TRACK_DIAGNOSTICS: AtomicRef<fn(&mut Diagnostic, &mut dyn FnMut(&mut Diagnostic))> =\n+    AtomicRef::new(&(default_track_diagnostic as _));\n \n #[derive(Copy, Clone, Default)]\n pub struct HandlerFlags {\n@@ -654,17 +656,19 @@ impl Handler {\n     /// Retrieve a stashed diagnostic with `steal_diagnostic`.\n     pub fn stash_diagnostic(&self, span: Span, key: StashKey, diag: Diagnostic) {\n         let mut inner = self.inner.borrow_mut();\n-        inner.stash((span, key), diag);\n+        inner.stash((span.with_parent(None), key), diag);\n     }\n \n     /// Steal a previously stashed diagnostic with the given `Span` and [`StashKey`] as the key.\n     pub fn steal_diagnostic(&self, span: Span, key: StashKey) -> Option<DiagnosticBuilder<'_, ()>> {\n         let mut inner = self.inner.borrow_mut();\n-        inner.steal((span, key)).map(|diag| DiagnosticBuilder::new_diagnostic(self, diag))\n+        inner\n+            .steal((span.with_parent(None), key))\n+            .map(|diag| DiagnosticBuilder::new_diagnostic(self, diag))\n     }\n \n     pub fn has_stashed_diagnostic(&self, span: Span, key: StashKey) -> bool {\n-        self.inner.borrow().stashed_diagnostics.get(&(span, key)).is_some()\n+        self.inner.borrow().stashed_diagnostics.get(&(span.with_parent(None), key)).is_some()\n     }\n \n     /// Emit all stashed diagnostics.\n@@ -1293,67 +1297,69 @@ impl HandlerInner {\n             && !diagnostic.is_force_warn()\n         {\n             if diagnostic.has_future_breakage() {\n-                (*TRACK_DIAGNOSTICS)(diagnostic);\n+                (*TRACK_DIAGNOSTICS)(diagnostic, &mut |_| {});\n             }\n             return None;\n         }\n \n-        (*TRACK_DIAGNOSTICS)(diagnostic);\n-\n         if matches!(diagnostic.level, Level::Expect(_) | Level::Allow) {\n+            (*TRACK_DIAGNOSTICS)(diagnostic, &mut |_| {});\n             return None;\n         }\n \n-        if let Some(ref code) = diagnostic.code {\n-            self.emitted_diagnostic_codes.insert(code.clone());\n-        }\n-\n-        let already_emitted = |this: &mut Self| {\n-            let mut hasher = StableHasher::new();\n-            diagnostic.hash(&mut hasher);\n-            let diagnostic_hash = hasher.finish();\n-            !this.emitted_diagnostics.insert(diagnostic_hash)\n-        };\n+        let mut guaranteed = None;\n+        (*TRACK_DIAGNOSTICS)(diagnostic, &mut |diagnostic| {\n+            if let Some(ref code) = diagnostic.code {\n+                self.emitted_diagnostic_codes.insert(code.clone());\n+            }\n \n-        // Only emit the diagnostic if we've been asked to deduplicate or\n-        // haven't already emitted an equivalent diagnostic.\n-        if !(self.flags.deduplicate_diagnostics && already_emitted(self)) {\n-            debug!(?diagnostic);\n-            debug!(?self.emitted_diagnostics);\n-            let already_emitted_sub = |sub: &mut SubDiagnostic| {\n-                debug!(?sub);\n-                if sub.level != Level::OnceNote {\n-                    return false;\n-                }\n+            let already_emitted = |this: &mut Self| {\n                 let mut hasher = StableHasher::new();\n-                sub.hash(&mut hasher);\n+                diagnostic.hash(&mut hasher);\n                 let diagnostic_hash = hasher.finish();\n-                debug!(?diagnostic_hash);\n-                !self.emitted_diagnostics.insert(diagnostic_hash)\n+                !this.emitted_diagnostics.insert(diagnostic_hash)\n             };\n \n-            diagnostic.children.drain_filter(already_emitted_sub).for_each(|_| {});\n-\n-            self.emitter.emit_diagnostic(diagnostic);\n-            if diagnostic.is_error() {\n-                self.deduplicated_err_count += 1;\n-            } else if let Warning(_) = diagnostic.level {\n-                self.deduplicated_warn_count += 1;\n+            // Only emit the diagnostic if we've been asked to deduplicate or\n+            // haven't already emitted an equivalent diagnostic.\n+            if !(self.flags.deduplicate_diagnostics && already_emitted(self)) {\n+                debug!(?diagnostic);\n+                debug!(?self.emitted_diagnostics);\n+                let already_emitted_sub = |sub: &mut SubDiagnostic| {\n+                    debug!(?sub);\n+                    if sub.level != Level::OnceNote {\n+                        return false;\n+                    }\n+                    let mut hasher = StableHasher::new();\n+                    sub.hash(&mut hasher);\n+                    let diagnostic_hash = hasher.finish();\n+                    debug!(?diagnostic_hash);\n+                    !self.emitted_diagnostics.insert(diagnostic_hash)\n+                };\n+\n+                diagnostic.children.drain_filter(already_emitted_sub).for_each(|_| {});\n+\n+                self.emitter.emit_diagnostic(diagnostic);\n+                if diagnostic.is_error() {\n+                    self.deduplicated_err_count += 1;\n+                } else if let Warning(_) = diagnostic.level {\n+                    self.deduplicated_warn_count += 1;\n+                }\n             }\n-        }\n-        if diagnostic.is_error() {\n-            if matches!(diagnostic.level, Level::Error { lint: true }) {\n-                self.bump_lint_err_count();\n+            if diagnostic.is_error() {\n+                if matches!(diagnostic.level, Level::Error { lint: true }) {\n+                    self.bump_lint_err_count();\n+                } else {\n+                    self.bump_err_count();\n+                }\n+\n+                guaranteed = Some(ErrorGuaranteed::unchecked_claim_error_was_emitted());\n             } else {\n-                self.bump_err_count();\n+                self.bump_warn_count();\n             }\n+        });\n \n-            Some(ErrorGuaranteed::unchecked_claim_error_was_emitted())\n-        } else {\n-            self.bump_warn_count();\n-\n-            None\n-        }\n+        guaranteed\n     }\n \n     fn emit_artifact_notification(&mut self, path: &Path, artifact_type: &str) {"}, {"sha": "5d47c1ed363fbf0463ddde0118bba718d9ca10ec", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb9dfa8ceffb985105be3176d7ed2f99515ea377/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb9dfa8ceffb985105be3176d7ed2f99515ea377/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=fb9dfa8ceffb985105be3176d7ed2f99515ea377", "patch": "@@ -587,7 +587,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 .resolver\n                 .visit_ast_fragment_with_placeholders(self.cx.current_expansion.id, &fragment);\n \n-            if self.cx.sess.opts.unstable_opts.incremental_relative_spans {\n+            if self.cx.sess.opts.incremental_relative_spans() {\n                 for (invoc, _) in invocations.iter_mut() {\n                     let expn_id = invoc.expansion_data.id;\n                     let parent_def = self.cx.resolver.invocation_parent(expn_id);"}, {"sha": "b8b4e873663100fbc3820820333ed3409ec67557", "filename": "compiler/rustc_hir_typeck/src/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb9dfa8ceffb985105be3176d7ed2f99515ea377/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb9dfa8ceffb985105be3176d7ed2f99515ea377/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs?ref=fb9dfa8ceffb985105be3176d7ed2f99515ea377", "patch": "@@ -395,7 +395,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             E0614,\n                             \"type `{oprnd_t}` cannot be dereferenced\",\n                         );\n-                        let sp = tcx.sess.source_map().start_point(expr.span);\n+                        let sp = tcx.sess.source_map().start_point(expr.span).with_parent(None);\n                         if let Some(sp) =\n                             tcx.sess.parse_sess.ambiguous_block_expr_parse.borrow().get(&sp)\n                         {"}, {"sha": "322e11c978f48cd3ef2026a07e30f6228678b97d", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb9dfa8ceffb985105be3176d7ed2f99515ea377/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb9dfa8ceffb985105be3176d7ed2f99515ea377/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs?ref=fb9dfa8ceffb985105be3176d7ed2f99515ea377", "patch": "@@ -974,7 +974,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         err: &mut Diagnostic,\n         expr: &hir::Expr<'_>,\n     ) -> bool {\n-        let sp = self.tcx.sess.source_map().start_point(expr.span);\n+        let sp = self.tcx.sess.source_map().start_point(expr.span).with_parent(None);\n         if let Some(sp) = self.tcx.sess.parse_sess.ambiguous_block_expr_parse.borrow().get(&sp) {\n             // `{ 42 } &&x` (#61475) or `{ 42 } && if x { 1 } else { 0 }`\n             err.subdiagnostic(ExprParenthesesNeeded::surrounding(*sp));"}, {"sha": "7053c180685cbe9da258856cc75ba3b18c0e9487", "filename": "compiler/rustc_hir_typeck/src/method/suggest.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fb9dfa8ceffb985105be3176d7ed2f99515ea377/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb9dfa8ceffb985105be3176d7ed2f99515ea377/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs?ref=fb9dfa8ceffb985105be3176d7ed2f99515ea377", "patch": "@@ -339,7 +339,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         &mut err, item_name, rcvr_ty, cal, span,\n                     );\n                 }\n-                if let Some(span) = tcx.resolutions(()).confused_type_with_std_module.get(&span) {\n+                if let Some(span) =\n+                    tcx.resolutions(()).confused_type_with_std_module.get(&span.with_parent(None))\n+                {\n                     err.span_suggestion(\n                         span.shrink_to_lo(),\n                         \"you are looking for the module in `std`, not the primitive type\","}, {"sha": "78cea1f4d8d3e199295d83834e2e33398b5d2851", "filename": "compiler/rustc_hir_typeck/src/op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb9dfa8ceffb985105be3176d7ed2f99515ea377/compiler%2Frustc_hir_typeck%2Fsrc%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb9dfa8ceffb985105be3176d7ed2f99515ea377/compiler%2Frustc_hir_typeck%2Fsrc%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fop.rs?ref=fb9dfa8ceffb985105be3176d7ed2f99515ea377", "patch": "@@ -657,7 +657,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         }\n                     }\n \n-                    let sp = self.tcx.sess.source_map().start_point(ex.span);\n+                    let sp = self.tcx.sess.source_map().start_point(ex.span).with_parent(None);\n                     if let Some(sp) =\n                         self.tcx.sess.parse_sess.ambiguous_block_expr_parse.borrow().get(&sp)\n                     {"}, {"sha": "ee0552d77ceee8080eab5dd43ed6f63f115a2e9f", "filename": "compiler/rustc_interface/src/callbacks.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/fb9dfa8ceffb985105be3176d7ed2f99515ea377/compiler%2Frustc_interface%2Fsrc%2Fcallbacks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb9dfa8ceffb985105be3176d7ed2f99515ea377/compiler%2Frustc_interface%2Fsrc%2Fcallbacks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fcallbacks.rs?ref=fb9dfa8ceffb985105be3176d7ed2f99515ea377", "patch": "@@ -10,6 +10,7 @@\n //! origin crate when the `TyCtxt` is not present in TLS.\n \n use rustc_errors::{Diagnostic, TRACK_DIAGNOSTICS};\n+use rustc_middle::dep_graph::TaskDepsRef;\n use rustc_middle::ty::tls;\n use std::fmt;\n \n@@ -26,14 +27,22 @@ fn track_span_parent(def_id: rustc_span::def_id::LocalDefId) {\n /// This is a callback from `rustc_ast` as it cannot access the implicit state\n /// in `rustc_middle` otherwise. It is used when diagnostic messages are\n /// emitted and stores them in the current query, if there is one.\n-fn track_diagnostic(diagnostic: &Diagnostic) {\n+fn track_diagnostic(diagnostic: &mut Diagnostic, f: &mut dyn FnMut(&mut Diagnostic)) {\n     tls::with_context_opt(|icx| {\n         if let Some(icx) = icx {\n             if let Some(diagnostics) = icx.diagnostics {\n                 let mut diagnostics = diagnostics.lock();\n                 diagnostics.extend(Some(diagnostic.clone()));\n+                std::mem::drop(diagnostics);\n             }\n+\n+            // Diagnostics are tracked, we can ignore the dependency.\n+            let icx = tls::ImplicitCtxt { task_deps: TaskDepsRef::Ignore, ..icx.clone() };\n+            return tls::enter_context(&icx, move |_| (*f)(diagnostic));\n         }\n+\n+        // In any other case, invoke diagnostics anyway.\n+        (*f)(diagnostic);\n     })\n }\n \n@@ -55,5 +64,5 @@ fn def_id_debug(def_id: rustc_hir::def_id::DefId, f: &mut fmt::Formatter<'_>) ->\n pub fn setup_callbacks() {\n     rustc_span::SPAN_TRACK.swap(&(track_span_parent as fn(_)));\n     rustc_hir::def_id::DEF_ID_DEBUG.swap(&(def_id_debug as fn(_, &mut fmt::Formatter<'_>) -> _));\n-    TRACK_DIAGNOSTICS.swap(&(track_diagnostic as fn(&_)));\n+    TRACK_DIAGNOSTICS.swap(&(track_diagnostic as _));\n }"}, {"sha": "eb3baba999b9cc49b463ad782abf276b766f5cee", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb9dfa8ceffb985105be3176d7ed2f99515ea377/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb9dfa8ceffb985105be3176d7ed2f99515ea377/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=fb9dfa8ceffb985105be3176d7ed2f99515ea377", "patch": "@@ -652,7 +652,6 @@ fn test_unstable_options_tracking_hash() {\n     untracked!(future_incompat_test, true);\n     untracked!(hir_stats, true);\n     untracked!(identify_regions, true);\n-    untracked!(incremental_ignore_spans, true);\n     untracked!(incremental_info, true);\n     untracked!(incremental_verify_ich, true);\n     untracked!(input_stats, true);\n@@ -737,6 +736,7 @@ fn test_unstable_options_tracking_hash() {\n     tracked!(fuel, Some((\"abc\".to_string(), 99)));\n     tracked!(function_sections, Some(false));\n     tracked!(human_readable_cgu_names, true);\n+    tracked!(incremental_ignore_spans, true);\n     tracked!(inline_in_all_cgus, Some(true));\n     tracked!(inline_mir, Some(true));\n     tracked!(inline_mir_hint_threshold, Some(123));"}, {"sha": "d799d3a5ad7799cb9f12656376b8185d448a39fa", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb9dfa8ceffb985105be3176d7ed2f99515ea377/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb9dfa8ceffb985105be3176d7ed2f99515ea377/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=fb9dfa8ceffb985105be3176d7ed2f99515ea377", "patch": "@@ -1160,7 +1160,7 @@ pub(super) fn crate_hash(tcx: TyCtxt<'_>, crate_num: CrateNum) -> Svh {\n         hir_body_hash.hash_stable(&mut hcx, &mut stable_hasher);\n         upstream_crates.hash_stable(&mut hcx, &mut stable_hasher);\n         source_file_names.hash_stable(&mut hcx, &mut stable_hasher);\n-        if tcx.sess.opts.unstable_opts.incremental_relative_spans {\n+        if tcx.sess.opts.incremental_relative_spans() {\n             let definitions = tcx.definitions_untracked();\n             let mut owner_spans: Vec<_> = krate\n                 .owners"}, {"sha": "0b1ff5d709fe904e96dd3703ba79966817af37c0", "filename": "compiler/rustc_query_system/src/dep_graph/graph.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fb9dfa8ceffb985105be3176d7ed2f99515ea377/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb9dfa8ceffb985105be3176d7ed2f99515ea377/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs?ref=fb9dfa8ceffb985105be3176d7ed2f99515ea377", "patch": "@@ -634,7 +634,7 @@ impl<K: DepKind> DepGraph<K> {\n         if dep_node_debug.borrow().contains_key(&dep_node) {\n             return;\n         }\n-        let debug_str = debug_str_gen();\n+        let debug_str = self.with_ignore(debug_str_gen);\n         dep_node_debug.borrow_mut().insert(dep_node, debug_str);\n     }\n \n@@ -829,7 +829,9 @@ impl<K: DepKind> DepGraph<K> {\n         );\n \n         if !side_effects.is_empty() {\n-            self.emit_side_effects(qcx, data, dep_node_index, side_effects);\n+            self.with_query_deserialization(|| {\n+                self.emit_side_effects(qcx, data, dep_node_index, side_effects)\n+            });\n         }\n \n         // ... and finally storing a \"Green\" entry in the color map."}, {"sha": "02e3992a6a940d5b6a53c723fdba5c624f979c03", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fb9dfa8ceffb985105be3176d7ed2f99515ea377/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb9dfa8ceffb985105be3176d7ed2f99515ea377/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=fb9dfa8ceffb985105be3176d7ed2f99515ea377", "patch": "@@ -787,6 +787,12 @@ impl Options {\n     pub fn get_symbol_mangling_version(&self) -> SymbolManglingVersion {\n         self.cg.symbol_mangling_version.unwrap_or(SymbolManglingVersion::Legacy)\n     }\n+\n+    #[allow(rustc::bad_opt_access)]\n+    pub fn incremental_relative_spans(&self) -> bool {\n+        self.unstable_opts.incremental_relative_spans\n+            || (self.unstable_features.is_nightly_build() && self.incremental.is_some())\n+    }\n }\n \n impl UnstableOptions {"}, {"sha": "9bf581ff73d23c01d918df44afa709605f93c28b", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fb9dfa8ceffb985105be3176d7ed2f99515ea377/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb9dfa8ceffb985105be3176d7ed2f99515ea377/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=fb9dfa8ceffb985105be3176d7ed2f99515ea377", "patch": "@@ -1332,11 +1332,12 @@ options! {\n         \"generate human-readable, predictable names for codegen units (default: no)\"),\n     identify_regions: bool = (false, parse_bool, [UNTRACKED],\n         \"display unnamed regions as `'<id>`, using a non-ident unique id (default: no)\"),\n-    incremental_ignore_spans: bool = (false, parse_bool, [UNTRACKED],\n+    incremental_ignore_spans: bool = (false, parse_bool, [TRACKED],\n         \"ignore spans during ICH computation -- used for testing (default: no)\"),\n     incremental_info: bool = (false, parse_bool, [UNTRACKED],\n         \"print high-level information about incremental reuse (or the lack thereof) \\\n         (default: no)\"),\n+    #[rustc_lint_opt_deny_field_access(\"use `Session::incremental_relative_spans` instead of this field\")]\n     incremental_relative_spans: bool = (false, parse_bool, [TRACKED],\n         \"hash spans relative to their parent item for incr. comp. (default: no)\"),\n     incremental_verify_ich: bool = (false, parse_bool, [UNTRACKED],"}, {"sha": "4e70dfb614782e015325fb216133bba7d8eeda82", "filename": "compiler/rustc_span/src/hygiene.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fb9dfa8ceffb985105be3176d7ed2f99515ea377/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb9dfa8ceffb985105be3176d7ed2f99515ea377/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs?ref=fb9dfa8ceffb985105be3176d7ed2f99515ea377", "patch": "@@ -104,6 +104,10 @@ fn assert_default_hashing_controls<CTX: HashStableContext>(ctx: &CTX, msg: &str)\n         // `-Z incremental-ignore-spans` option. Normally, this option is disabled,\n         // which will cause us to require that this method always be called with `Span` hashing\n         // enabled.\n+        //\n+        // Span hashing can also be disabled without `-Z incremental-ignore-spans`.\n+        // This is the case for instance when building a hash for name mangling.\n+        // Such configuration must not be used for metadata.\n         HashingControls { hash_spans }\n             if hash_spans == !ctx.unstable_opts_incremental_ignore_spans() => {}\n         other => panic!(\"Attempted hashing of {msg} with non-default HashingControls: {:?}\", other),"}, {"sha": "d48c4f7e5a8119f1c84f2a9b32d043dcab05e898", "filename": "compiler/rustc_span/src/span_encoding.rs", "status": "modified", "additions": 64, "deletions": 22, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/fb9dfa8ceffb985105be3176d7ed2f99515ea377/compiler%2Frustc_span%2Fsrc%2Fspan_encoding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb9dfa8ceffb985105be3176d7ed2f99515ea377/compiler%2Frustc_span%2Fsrc%2Fspan_encoding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fspan_encoding.rs?ref=fb9dfa8ceffb985105be3176d7ed2f99515ea377", "patch": "@@ -4,7 +4,7 @@\n // The encoding format for inline spans were obtained by optimizing over crates in rustc/libstd.\n // See https://internals.rust-lang.org/t/rfc-compiler-refactoring-spans/1357/28\n \n-use crate::def_id::LocalDefId;\n+use crate::def_id::{DefIndex, LocalDefId};\n use crate::hygiene::SyntaxContext;\n use crate::SPAN_TRACK;\n use crate::{BytePos, SpanData};\n@@ -13,8 +13,8 @@ use rustc_data_structures::fx::FxIndexSet;\n \n /// A compressed span.\n ///\n-/// Whereas [`SpanData`] is 12 bytes, which is a bit too big to stick everywhere, `Span`\n-/// is a form that only takes up 8 bytes, with less space for the length and\n+/// Whereas [`SpanData`] is 16 bytes, which is a bit too big to stick everywhere, `Span`\n+/// is a form that only takes up 8 bytes, with less space for the length, parent and\n /// context. The vast majority (99.9%+) of `SpanData` instances will fit within\n /// those 8 bytes; any `SpanData` whose fields don't fit into a `Span` are\n /// stored in a separate interner table, and the `Span` will index into that\n@@ -25,7 +25,7 @@ use rustc_data_structures::fx::FxIndexSet;\n /// slower because only 80--90% of spans could be stored inline (even less in\n /// very large crates) and so the interner was used a lot more.\n ///\n-/// Inline (compressed) format:\n+/// Inline (compressed) format with no parent:\n /// - `span.base_or_index == span_data.lo`\n /// - `span.len_or_tag == len == span_data.hi - span_data.lo` (must be `<= MAX_LEN`)\n /// - `span.ctxt_or_tag == span_data.ctxt` (must be `<= MAX_CTXT`)\n@@ -35,6 +35,12 @@ use rustc_data_structures::fx::FxIndexSet;\n /// - `span.len_or_tag == LEN_TAG` (high bit set, all other bits are zero)\n /// - `span.ctxt_or_tag == span_data.ctxt` (must be `<= MAX_CTXT`)\n ///\n+/// Inline (compressed) format with root context:\n+/// - `span.base_or_index == span_data.lo`\n+/// - `span.len_or_tag == len == span_data.hi - span_data.lo` (must be `<= MAX_LEN`)\n+/// - `span.len_or_tag` has top bit (`PARENT_MASK`) set\n+/// - `span.ctxt == span_data.parent` (must be `<= MAX_CTXT`)\n+///\n /// Interned format:\n /// - `span.base_or_index == index` (indexes into the interner table)\n /// - `span.len_or_tag == LEN_TAG` (high bit set, all other bits are zero)\n@@ -73,7 +79,8 @@ pub struct Span {\n     ctxt_or_tag: u16,\n }\n \n-const LEN_TAG: u16 = 0b1000_0000_0000_0000;\n+const LEN_TAG: u16 = 0b1111_1111_1111_1111;\n+const PARENT_MASK: u16 = 0b1000_0000_0000_0000;\n const MAX_LEN: u32 = 0b0111_1111_1111_1111;\n const CTXT_TAG: u32 = 0b1111_1111_1111_1111;\n const MAX_CTXT: u32 = CTXT_TAG - 1;\n@@ -95,16 +102,32 @@ impl Span {\n \n         let (base, len, ctxt2) = (lo.0, hi.0 - lo.0, ctxt.as_u32());\n \n-        if len <= MAX_LEN && ctxt2 <= MAX_CTXT && parent.is_none() {\n-            // Inline format.\n-            Span { base_or_index: base, len_or_tag: len as u16, ctxt_or_tag: ctxt2 as u16 }\n-        } else {\n-            // Interned format.\n-            let index =\n-                with_span_interner(|interner| interner.intern(&SpanData { lo, hi, ctxt, parent }));\n-            let ctxt_or_tag = if ctxt2 <= MAX_CTXT { ctxt2 } else { CTXT_TAG } as u16;\n-            Span { base_or_index: index, len_or_tag: LEN_TAG, ctxt_or_tag }\n+        if len <= MAX_LEN && ctxt2 <= MAX_CTXT {\n+            let len_or_tag = len as u16;\n+            debug_assert_eq!(len_or_tag & PARENT_MASK, 0);\n+\n+            if let Some(parent) = parent {\n+                // Inline format with parent.\n+                let len_or_tag = len_or_tag | PARENT_MASK;\n+                let parent2 = parent.local_def_index.as_u32();\n+                if ctxt2 == SyntaxContext::root().as_u32() && parent2 <= MAX_CTXT {\n+                    return Span { base_or_index: base, len_or_tag, ctxt_or_tag: parent2 as u16 };\n+                }\n+            } else {\n+                // Inline format with ctxt.\n+                return Span {\n+                    base_or_index: base,\n+                    len_or_tag: len as u16,\n+                    ctxt_or_tag: ctxt2 as u16,\n+                };\n+            }\n         }\n+\n+        // Interned format.\n+        let index =\n+            with_span_interner(|interner| interner.intern(&SpanData { lo, hi, ctxt, parent }));\n+        let ctxt_or_tag = if ctxt2 <= MAX_CTXT { ctxt2 } else { CTXT_TAG } as u16;\n+        Span { base_or_index: index, len_or_tag: LEN_TAG, ctxt_or_tag }\n     }\n \n     #[inline]\n@@ -122,12 +145,25 @@ impl Span {\n     pub fn data_untracked(self) -> SpanData {\n         if self.len_or_tag != LEN_TAG {\n             // Inline format.\n-            debug_assert!(self.len_or_tag as u32 <= MAX_LEN);\n-            SpanData {\n-                lo: BytePos(self.base_or_index),\n-                hi: BytePos(self.base_or_index + self.len_or_tag as u32),\n-                ctxt: SyntaxContext::from_u32(self.ctxt_or_tag as u32),\n-                parent: None,\n+            if self.len_or_tag & PARENT_MASK == 0 {\n+                debug_assert!(self.len_or_tag as u32 <= MAX_LEN);\n+                SpanData {\n+                    lo: BytePos(self.base_or_index),\n+                    hi: BytePos(self.base_or_index + self.len_or_tag as u32),\n+                    ctxt: SyntaxContext::from_u32(self.ctxt_or_tag as u32),\n+                    parent: None,\n+                }\n+            } else {\n+                let len = self.len_or_tag & !PARENT_MASK;\n+                debug_assert!(len as u32 <= MAX_LEN);\n+                let parent =\n+                    LocalDefId { local_def_index: DefIndex::from_u32(self.ctxt_or_tag as u32) };\n+                SpanData {\n+                    lo: BytePos(self.base_or_index),\n+                    hi: BytePos(self.base_or_index + len as u32),\n+                    ctxt: SyntaxContext::root(),\n+                    parent: Some(parent),\n+                }\n             }\n         } else {\n             // Interned format.\n@@ -141,8 +177,14 @@ impl Span {\n     pub fn ctxt(self) -> SyntaxContext {\n         let ctxt_or_tag = self.ctxt_or_tag as u32;\n         if ctxt_or_tag <= MAX_CTXT {\n-            // Inline format or interned format with inline ctxt.\n-            SyntaxContext::from_u32(ctxt_or_tag)\n+            if self.len_or_tag == LEN_TAG || self.len_or_tag & PARENT_MASK == 0 {\n+                // Inline format or interned format with inline ctxt.\n+                SyntaxContext::from_u32(ctxt_or_tag)\n+            } else {\n+                // Inline format or interned format with inline parent.\n+                // We know that the SyntaxContext is root.\n+                SyntaxContext::root()\n+            }\n         } else {\n             // Interned format.\n             let index = self.base_or_index;"}, {"sha": "83737a02200918225bc868fb2f5b78a011684042", "filename": "src/test/incremental/change_symbol_export_status.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb9dfa8ceffb985105be3176d7ed2f99515ea377/src%2Ftest%2Fincremental%2Fchange_symbol_export_status.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb9dfa8ceffb985105be3176d7ed2f99515ea377/src%2Ftest%2Fincremental%2Fchange_symbol_export_status.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fchange_symbol_export_status.rs?ref=fb9dfa8ceffb985105be3176d7ed2f99515ea377", "patch": "@@ -2,8 +2,6 @@\n // compile-flags: -Zquery-dep-graph\n // [rpass1]compile-flags: -Zincremental-ignore-spans\n // [rpass2]compile-flags: -Zincremental-ignore-spans\n-// [rpass3]compile-flags: -Zincremental-relative-spans\n-// [rpass4]compile-flags: -Zincremental-relative-spans\n \n #![feature(rustc_attrs)]\n #![rustc_partition_reused(module = \"change_symbol_export_status-mod1\", cfg = \"rpass2\")]"}, {"sha": "65df2e8292a047cf3ba9578040dde36925ae074e", "filename": "src/test/incremental/hashes/call_expressions.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fb9dfa8ceffb985105be3176d7ed2f99515ea377/src%2Ftest%2Fincremental%2Fhashes%2Fcall_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb9dfa8ceffb985105be3176d7ed2f99515ea377/src%2Ftest%2Fincremental%2Fhashes%2Fcall_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fcall_expressions.rs?ref=fb9dfa8ceffb985105be3176d7ed2f99515ea377", "patch": "@@ -11,9 +11,6 @@\n // [cfail1]compile-flags: -Zincremental-ignore-spans\n // [cfail2]compile-flags: -Zincremental-ignore-spans\n // [cfail3]compile-flags: -Zincremental-ignore-spans\n-// [cfail4]compile-flags: -Zincremental-relative-spans\n-// [cfail5]compile-flags: -Zincremental-relative-spans\n-// [cfail6]compile-flags: -Zincremental-relative-spans\n \n \n #![allow(warnings)]"}, {"sha": "7bf99f6112ed9f21f9f3323bc3b1ba3f760d0a01", "filename": "src/test/incremental/hashes/closure_expressions.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fb9dfa8ceffb985105be3176d7ed2f99515ea377/src%2Ftest%2Fincremental%2Fhashes%2Fclosure_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb9dfa8ceffb985105be3176d7ed2f99515ea377/src%2Ftest%2Fincremental%2Fhashes%2Fclosure_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fclosure_expressions.rs?ref=fb9dfa8ceffb985105be3176d7ed2f99515ea377", "patch": "@@ -11,9 +11,6 @@\n // [cfail1]compile-flags: -Zincremental-ignore-spans\n // [cfail2]compile-flags: -Zincremental-ignore-spans\n // [cfail3]compile-flags: -Zincremental-ignore-spans\n-// [cfail4]compile-flags: -Zincremental-relative-spans\n-// [cfail5]compile-flags: -Zincremental-relative-spans\n-// [cfail6]compile-flags: -Zincremental-relative-spans\n \n #![allow(warnings)]\n #![feature(rustc_attrs)]"}, {"sha": "db367d07094d7786d34e792938e303870f601c2b", "filename": "src/test/incremental/hashes/enum_constructors.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fb9dfa8ceffb985105be3176d7ed2f99515ea377/src%2Ftest%2Fincremental%2Fhashes%2Fenum_constructors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb9dfa8ceffb985105be3176d7ed2f99515ea377/src%2Ftest%2Fincremental%2Fhashes%2Fenum_constructors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fenum_constructors.rs?ref=fb9dfa8ceffb985105be3176d7ed2f99515ea377", "patch": "@@ -11,9 +11,6 @@\n // [cfail1]compile-flags: -Zincremental-ignore-spans\n // [cfail2]compile-flags: -Zincremental-ignore-spans\n // [cfail3]compile-flags: -Zincremental-ignore-spans\n-// [cfail4]compile-flags: -Zincremental-relative-spans\n-// [cfail5]compile-flags: -Zincremental-relative-spans\n-// [cfail6]compile-flags: -Zincremental-relative-spans\n \n #![allow(warnings)]\n #![feature(rustc_attrs)]"}, {"sha": "bc83723a908f29bc5995b4efce419cd3ef4574a7", "filename": "src/test/incremental/hashes/enum_defs.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fb9dfa8ceffb985105be3176d7ed2f99515ea377/src%2Ftest%2Fincremental%2Fhashes%2Fenum_defs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb9dfa8ceffb985105be3176d7ed2f99515ea377/src%2Ftest%2Fincremental%2Fhashes%2Fenum_defs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fenum_defs.rs?ref=fb9dfa8ceffb985105be3176d7ed2f99515ea377", "patch": "@@ -16,9 +16,6 @@\n // [cfail1]compile-flags: -Zincremental-ignore-spans\n // [cfail2]compile-flags: -Zincremental-ignore-spans\n // [cfail3]compile-flags: -Zincremental-ignore-spans\n-// [cfail4]compile-flags: -Zincremental-relative-spans\n-// [cfail5]compile-flags: -Zincremental-relative-spans\n-// [cfail6]compile-flags: -Zincremental-relative-spans\n \n #![allow(warnings)]\n #![feature(rustc_attrs)]"}, {"sha": "9ac9ae24f81bc524d701fa9cab4fc417c35fef2a", "filename": "src/test/incremental/hashes/exported_vs_not.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fb9dfa8ceffb985105be3176d7ed2f99515ea377/src%2Ftest%2Fincremental%2Fhashes%2Fexported_vs_not.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb9dfa8ceffb985105be3176d7ed2f99515ea377/src%2Ftest%2Fincremental%2Fhashes%2Fexported_vs_not.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fexported_vs_not.rs?ref=fb9dfa8ceffb985105be3176d7ed2f99515ea377", "patch": "@@ -4,9 +4,6 @@\n // [cfail1]compile-flags: -Zincremental-ignore-spans\n // [cfail2]compile-flags: -Zincremental-ignore-spans\n // [cfail3]compile-flags: -Zincremental-ignore-spans\n-// [cfail4]compile-flags: -Zincremental-relative-spans\n-// [cfail5]compile-flags: -Zincremental-relative-spans\n-// [cfail6]compile-flags: -Zincremental-relative-spans\n \n #![allow(warnings)]\n #![feature(rustc_attrs)]"}, {"sha": "1906843c7a247a569c95c9f6231a36d6549fde2f", "filename": "src/test/incremental/hashes/extern_mods.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fb9dfa8ceffb985105be3176d7ed2f99515ea377/src%2Ftest%2Fincremental%2Fhashes%2Fextern_mods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb9dfa8ceffb985105be3176d7ed2f99515ea377/src%2Ftest%2Fincremental%2Fhashes%2Fextern_mods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fextern_mods.rs?ref=fb9dfa8ceffb985105be3176d7ed2f99515ea377", "patch": "@@ -11,9 +11,6 @@\n // [cfail1]compile-flags: -Zincremental-ignore-spans\n // [cfail2]compile-flags: -Zincremental-ignore-spans\n // [cfail3]compile-flags: -Zincremental-ignore-spans\n-// [cfail4]compile-flags: -Zincremental-relative-spans\n-// [cfail5]compile-flags: -Zincremental-relative-spans\n-// [cfail6]compile-flags: -Zincremental-relative-spans\n \n #![allow(warnings)]\n #![feature(rustc_attrs)]"}, {"sha": "193e792c84330203c7a3aa3d5ed053e2726e356b", "filename": "src/test/incremental/hashes/for_loops.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fb9dfa8ceffb985105be3176d7ed2f99515ea377/src%2Ftest%2Fincremental%2Fhashes%2Ffor_loops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb9dfa8ceffb985105be3176d7ed2f99515ea377/src%2Ftest%2Fincremental%2Fhashes%2Ffor_loops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Ffor_loops.rs?ref=fb9dfa8ceffb985105be3176d7ed2f99515ea377", "patch": "@@ -11,9 +11,6 @@\n // [cfail1]compile-flags: -Zincremental-ignore-spans\n // [cfail2]compile-flags: -Zincremental-ignore-spans\n // [cfail3]compile-flags: -Zincremental-ignore-spans\n-// [cfail4]compile-flags: -Zincremental-relative-spans\n-// [cfail5]compile-flags: -Zincremental-relative-spans\n-// [cfail6]compile-flags: -Zincremental-relative-spans\n \n #![allow(warnings)]\n #![feature(rustc_attrs)]"}, {"sha": "182ca7d926c6bdd6c521a96374c25dec1e7e7c53", "filename": "src/test/incremental/hashes/function_interfaces.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fb9dfa8ceffb985105be3176d7ed2f99515ea377/src%2Ftest%2Fincremental%2Fhashes%2Ffunction_interfaces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb9dfa8ceffb985105be3176d7ed2f99515ea377/src%2Ftest%2Fincremental%2Fhashes%2Ffunction_interfaces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Ffunction_interfaces.rs?ref=fb9dfa8ceffb985105be3176d7ed2f99515ea377", "patch": "@@ -11,9 +11,6 @@\n // [cfail1]compile-flags: -Zincremental-ignore-spans\n // [cfail2]compile-flags: -Zincremental-ignore-spans\n // [cfail3]compile-flags: -Zincremental-ignore-spans\n-// [cfail4]compile-flags: -Zincremental-relative-spans\n-// [cfail5]compile-flags: -Zincremental-relative-spans\n-// [cfail6]compile-flags: -Zincremental-relative-spans\n \n #![allow(warnings)]\n #![feature(linkage)]"}, {"sha": "937fd3ac879a920b1a74a89e319c56b28e6bead4", "filename": "src/test/incremental/hashes/if_expressions.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fb9dfa8ceffb985105be3176d7ed2f99515ea377/src%2Ftest%2Fincremental%2Fhashes%2Fif_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb9dfa8ceffb985105be3176d7ed2f99515ea377/src%2Ftest%2Fincremental%2Fhashes%2Fif_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fif_expressions.rs?ref=fb9dfa8ceffb985105be3176d7ed2f99515ea377", "patch": "@@ -11,9 +11,6 @@\n // [cfail1]compile-flags: -Zincremental-ignore-spans\n // [cfail2]compile-flags: -Zincremental-ignore-spans\n // [cfail3]compile-flags: -Zincremental-ignore-spans\n-// [cfail4]compile-flags: -Zincremental-relative-spans\n-// [cfail5]compile-flags: -Zincremental-relative-spans\n-// [cfail6]compile-flags: -Zincremental-relative-spans\n \n #![allow(warnings)]\n #![feature(rustc_attrs)]"}, {"sha": "b1ac6f6fa6c2b3acc846fd3f35a31a8e6ded4809", "filename": "src/test/incremental/hashes/indexing_expressions.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fb9dfa8ceffb985105be3176d7ed2f99515ea377/src%2Ftest%2Fincremental%2Fhashes%2Findexing_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb9dfa8ceffb985105be3176d7ed2f99515ea377/src%2Ftest%2Fincremental%2Fhashes%2Findexing_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Findexing_expressions.rs?ref=fb9dfa8ceffb985105be3176d7ed2f99515ea377", "patch": "@@ -11,9 +11,6 @@\n // [cfail1]compile-flags: -Zincremental-ignore-spans\n // [cfail2]compile-flags: -Zincremental-ignore-spans\n // [cfail3]compile-flags: -Zincremental-ignore-spans\n-// [cfail4]compile-flags: -Zincremental-relative-spans\n-// [cfail5]compile-flags: -Zincremental-relative-spans\n-// [cfail6]compile-flags: -Zincremental-relative-spans\n \n #![allow(warnings)]\n #![feature(rustc_attrs)]"}, {"sha": "285f857c9cbcf7565ea9c832533aa8c0c6e5c322", "filename": "src/test/incremental/hashes/inherent_impls.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fb9dfa8ceffb985105be3176d7ed2f99515ea377/src%2Ftest%2Fincremental%2Fhashes%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb9dfa8ceffb985105be3176d7ed2f99515ea377/src%2Ftest%2Fincremental%2Fhashes%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Finherent_impls.rs?ref=fb9dfa8ceffb985105be3176d7ed2f99515ea377", "patch": "@@ -11,9 +11,6 @@\n // [cfail1]compile-flags: -Zincremental-ignore-spans\n // [cfail2]compile-flags: -Zincremental-ignore-spans\n // [cfail3]compile-flags: -Zincremental-ignore-spans\n-// [cfail4]compile-flags: -Zincremental-relative-spans\n-// [cfail5]compile-flags: -Zincremental-relative-spans\n-// [cfail6]compile-flags: -Zincremental-relative-spans\n \n \n #![allow(warnings)]"}, {"sha": "3118aa1356452985aaf66035a3a8c01de3fb7d63", "filename": "src/test/incremental/hashes/inline_asm.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fb9dfa8ceffb985105be3176d7ed2f99515ea377/src%2Ftest%2Fincremental%2Fhashes%2Finline_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb9dfa8ceffb985105be3176d7ed2f99515ea377/src%2Ftest%2Fincremental%2Fhashes%2Finline_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Finline_asm.rs?ref=fb9dfa8ceffb985105be3176d7ed2f99515ea377", "patch": "@@ -12,9 +12,6 @@\n // [cfail1]compile-flags: -Zincremental-ignore-spans\n // [cfail2]compile-flags: -Zincremental-ignore-spans\n // [cfail3]compile-flags: -Zincremental-ignore-spans\n-// [cfail4]compile-flags: -Zincremental-relative-spans\n-// [cfail5]compile-flags: -Zincremental-relative-spans\n-// [cfail6]compile-flags: -Zincremental-relative-spans\n \n #![allow(warnings)]\n #![feature(rustc_attrs)]"}, {"sha": "180bf6fec8772b72c22b3026b5189a16608d0863", "filename": "src/test/incremental/hashes/let_expressions.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fb9dfa8ceffb985105be3176d7ed2f99515ea377/src%2Ftest%2Fincremental%2Fhashes%2Flet_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb9dfa8ceffb985105be3176d7ed2f99515ea377/src%2Ftest%2Fincremental%2Fhashes%2Flet_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Flet_expressions.rs?ref=fb9dfa8ceffb985105be3176d7ed2f99515ea377", "patch": "@@ -11,9 +11,6 @@\n // [cfail1]compile-flags: -Zincremental-ignore-spans\n // [cfail2]compile-flags: -Zincremental-ignore-spans\n // [cfail3]compile-flags: -Zincremental-ignore-spans\n-// [cfail4]compile-flags: -Zincremental-relative-spans\n-// [cfail5]compile-flags: -Zincremental-relative-spans\n-// [cfail6]compile-flags: -Zincremental-relative-spans\n \n #![allow(warnings)]\n #![feature(rustc_attrs)]"}, {"sha": "87b86479d07bd9f8ed7146d5808fad1e0c6a0e72", "filename": "src/test/incremental/hashes/loop_expressions.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fb9dfa8ceffb985105be3176d7ed2f99515ea377/src%2Ftest%2Fincremental%2Fhashes%2Floop_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb9dfa8ceffb985105be3176d7ed2f99515ea377/src%2Ftest%2Fincremental%2Fhashes%2Floop_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Floop_expressions.rs?ref=fb9dfa8ceffb985105be3176d7ed2f99515ea377", "patch": "@@ -11,9 +11,6 @@\n // [cfail1]compile-flags: -Zincremental-ignore-spans\n // [cfail2]compile-flags: -Zincremental-ignore-spans\n // [cfail3]compile-flags: -Zincremental-ignore-spans\n-// [cfail4]compile-flags: -Zincremental-relative-spans\n-// [cfail5]compile-flags: -Zincremental-relative-spans\n-// [cfail6]compile-flags: -Zincremental-relative-spans\n \n #![allow(warnings)]\n #![feature(rustc_attrs)]"}, {"sha": "4429df6833e486ec96a1007547058fce717a8a92", "filename": "src/test/incremental/hashes/match_expressions.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fb9dfa8ceffb985105be3176d7ed2f99515ea377/src%2Ftest%2Fincremental%2Fhashes%2Fmatch_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb9dfa8ceffb985105be3176d7ed2f99515ea377/src%2Ftest%2Fincremental%2Fhashes%2Fmatch_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fmatch_expressions.rs?ref=fb9dfa8ceffb985105be3176d7ed2f99515ea377", "patch": "@@ -11,9 +11,6 @@\n // [cfail1]compile-flags: -Zincremental-ignore-spans\n // [cfail2]compile-flags: -Zincremental-ignore-spans\n // [cfail3]compile-flags: -Zincremental-ignore-spans\n-// [cfail4]compile-flags: -Zincremental-relative-spans\n-// [cfail5]compile-flags: -Zincremental-relative-spans\n-// [cfail6]compile-flags: -Zincremental-relative-spans\n \n #![allow(warnings)]\n #![feature(rustc_attrs)]"}, {"sha": "bb83f8300d06d69169b40b3e00f07806a6d78b29", "filename": "src/test/incremental/hashes/statics.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fb9dfa8ceffb985105be3176d7ed2f99515ea377/src%2Ftest%2Fincremental%2Fhashes%2Fstatics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb9dfa8ceffb985105be3176d7ed2f99515ea377/src%2Ftest%2Fincremental%2Fhashes%2Fstatics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fstatics.rs?ref=fb9dfa8ceffb985105be3176d7ed2f99515ea377", "patch": "@@ -11,9 +11,6 @@\n // [cfail1]compile-flags: -Zincremental-ignore-spans\n // [cfail2]compile-flags: -Zincremental-ignore-spans\n // [cfail3]compile-flags: -Zincremental-ignore-spans\n-// [cfail4]compile-flags: -Zincremental-relative-spans\n-// [cfail5]compile-flags: -Zincremental-relative-spans\n-// [cfail6]compile-flags: -Zincremental-relative-spans\n \n #![allow(warnings)]\n #![feature(rustc_attrs)]"}, {"sha": "e50e5674c661e4ea96901ac744704d6f2296ebb2", "filename": "src/test/incremental/hashes/struct_constructors.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fb9dfa8ceffb985105be3176d7ed2f99515ea377/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_constructors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb9dfa8ceffb985105be3176d7ed2f99515ea377/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_constructors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_constructors.rs?ref=fb9dfa8ceffb985105be3176d7ed2f99515ea377", "patch": "@@ -11,9 +11,6 @@\n // [cfail1]compile-flags: -Zincremental-ignore-spans\n // [cfail2]compile-flags: -Zincremental-ignore-spans\n // [cfail3]compile-flags: -Zincremental-ignore-spans\n-// [cfail4]compile-flags: -Zincremental-relative-spans\n-// [cfail5]compile-flags: -Zincremental-relative-spans\n-// [cfail6]compile-flags: -Zincremental-relative-spans\n \n #![allow(warnings)]\n #![feature(rustc_attrs)]"}, {"sha": "4a2706b4f0100817699a3c234502e467f364598c", "filename": "src/test/incremental/hashes/struct_defs.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fb9dfa8ceffb985105be3176d7ed2f99515ea377/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_defs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb9dfa8ceffb985105be3176d7ed2f99515ea377/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_defs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_defs.rs?ref=fb9dfa8ceffb985105be3176d7ed2f99515ea377", "patch": "@@ -16,9 +16,6 @@\n // [cfail1]compile-flags: -Zincremental-ignore-spans\n // [cfail2]compile-flags: -Zincremental-ignore-spans\n // [cfail3]compile-flags: -Zincremental-ignore-spans\n-// [cfail4]compile-flags: -Zincremental-relative-spans\n-// [cfail5]compile-flags: -Zincremental-relative-spans\n-// [cfail6]compile-flags: -Zincremental-relative-spans\n \n #![allow(warnings)]\n #![feature(rustc_attrs)]"}, {"sha": "b583bee2f2449b8d34eab33e428e091769a97a13", "filename": "src/test/incremental/hashes/trait_defs.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fb9dfa8ceffb985105be3176d7ed2f99515ea377/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_defs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb9dfa8ceffb985105be3176d7ed2f99515ea377/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_defs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_defs.rs?ref=fb9dfa8ceffb985105be3176d7ed2f99515ea377", "patch": "@@ -16,9 +16,6 @@\n // [cfail1]compile-flags: -Zincremental-ignore-spans\n // [cfail2]compile-flags: -Zincremental-ignore-spans\n // [cfail3]compile-flags: -Zincremental-ignore-spans\n-// [cfail4]compile-flags: -Zincremental-relative-spans\n-// [cfail5]compile-flags: -Zincremental-relative-spans\n-// [cfail6]compile-flags: -Zincremental-relative-spans\n \n #![allow(warnings)]\n #![feature(rustc_attrs)]"}, {"sha": "3b2e18d17a96b51941e4e2aa68ca7cee3d5aefee", "filename": "src/test/incremental/hashes/trait_impls.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fb9dfa8ceffb985105be3176d7ed2f99515ea377/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb9dfa8ceffb985105be3176d7ed2f99515ea377/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_impls.rs?ref=fb9dfa8ceffb985105be3176d7ed2f99515ea377", "patch": "@@ -11,9 +11,6 @@\n // [cfail1]compile-flags: -Zincremental-ignore-spans\n // [cfail2]compile-flags: -Zincremental-ignore-spans\n // [cfail3]compile-flags: -Zincremental-ignore-spans\n-// [cfail4]compile-flags: -Zincremental-relative-spans\n-// [cfail5]compile-flags: -Zincremental-relative-spans\n-// [cfail6]compile-flags: -Zincremental-relative-spans\n \n #![allow(warnings)]\n #![feature(rustc_attrs)]"}, {"sha": "58af51eef077f1809a3a93ecc218baf13292af75", "filename": "src/test/incremental/hashes/unary_and_binary_exprs.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fb9dfa8ceffb985105be3176d7ed2f99515ea377/src%2Ftest%2Fincremental%2Fhashes%2Funary_and_binary_exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb9dfa8ceffb985105be3176d7ed2f99515ea377/src%2Ftest%2Fincremental%2Fhashes%2Funary_and_binary_exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Funary_and_binary_exprs.rs?ref=fb9dfa8ceffb985105be3176d7ed2f99515ea377", "patch": "@@ -11,9 +11,6 @@\n // [cfail1]compile-flags: -Zincremental-ignore-spans\n // [cfail2]compile-flags: -Zincremental-ignore-spans\n // [cfail3]compile-flags: -Zincremental-ignore-spans\n-// [cfail4]compile-flags: -Zincremental-relative-spans\n-// [cfail5]compile-flags: -Zincremental-relative-spans\n-// [cfail6]compile-flags: -Zincremental-relative-spans\n \n #![allow(warnings)]\n #![feature(rustc_attrs)]"}, {"sha": "c81b0d0afb8114fd16a1505eb61e5d3a166a4cdc", "filename": "src/test/incremental/hashes/while_let_loops.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fb9dfa8ceffb985105be3176d7ed2f99515ea377/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_let_loops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb9dfa8ceffb985105be3176d7ed2f99515ea377/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_let_loops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_let_loops.rs?ref=fb9dfa8ceffb985105be3176d7ed2f99515ea377", "patch": "@@ -11,9 +11,6 @@\n // [cfail1]compile-flags: -Zincremental-ignore-spans\n // [cfail2]compile-flags: -Zincremental-ignore-spans\n // [cfail3]compile-flags: -Zincremental-ignore-spans\n-// [cfail4]compile-flags: -Zincremental-relative-spans\n-// [cfail5]compile-flags: -Zincremental-relative-spans\n-// [cfail6]compile-flags: -Zincremental-relative-spans\n \n #![allow(warnings)]\n #![feature(rustc_attrs)]"}, {"sha": "c1cc0b62bc2442ebff17709558d120ec88421fa9", "filename": "src/test/incremental/hashes/while_loops.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fb9dfa8ceffb985105be3176d7ed2f99515ea377/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_loops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb9dfa8ceffb985105be3176d7ed2f99515ea377/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_loops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_loops.rs?ref=fb9dfa8ceffb985105be3176d7ed2f99515ea377", "patch": "@@ -11,9 +11,6 @@\n // [cfail1]compile-flags: -Zincremental-ignore-spans\n // [cfail2]compile-flags: -Zincremental-ignore-spans\n // [cfail3]compile-flags: -Zincremental-ignore-spans\n-// [cfail4]compile-flags: -Zincremental-relative-spans\n-// [cfail5]compile-flags: -Zincremental-relative-spans\n-// [cfail6]compile-flags: -Zincremental-relative-spans\n \n #![allow(warnings)]\n #![feature(rustc_attrs)]"}, {"sha": "38ab28461911b6e2a91acc587db5dc4b08ebb03f", "filename": "src/test/incremental/spans_significant_w_debuginfo.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fb9dfa8ceffb985105be3176d7ed2f99515ea377/src%2Ftest%2Fincremental%2Fspans_significant_w_debuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb9dfa8ceffb985105be3176d7ed2f99515ea377/src%2Ftest%2Fincremental%2Fspans_significant_w_debuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fspans_significant_w_debuginfo.rs?ref=fb9dfa8ceffb985105be3176d7ed2f99515ea377", "patch": "@@ -1,21 +1,17 @@\n // This test makes sure that just changing a definition's location in the\n // source file also changes its incr. comp. hash, if debuginfo is enabled.\n \n-// revisions:rpass1 rpass2 rpass3 rpass4\n+// revisions:rpass1 rpass2\n \n // ignore-asmjs wasm2js does not support source maps yet\n // compile-flags: -g -Z query-dep-graph\n-// [rpass3]compile-flags: -Zincremental-relative-spans\n-// [rpass4]compile-flags: -Zincremental-relative-spans\n \n #![feature(rustc_attrs)]\n #![rustc_partition_codegened(module = \"spans_significant_w_debuginfo\", cfg = \"rpass2\")]\n-#![rustc_partition_codegened(module = \"spans_significant_w_debuginfo\", cfg = \"rpass4\")]\n \n-#[cfg(any(rpass1, rpass3))]\n+#[cfg(rpass1)]\n pub fn main() {}\n \n-#[cfg(any(rpass2, rpass4))]\n-#[rustc_clean(except = \"hir_owner,hir_owner_nodes,optimized_mir\", cfg = \"rpass2\")]\n-#[rustc_clean(cfg = \"rpass4\")]\n+#[cfg(rpass2)]\n+#[rustc_clean(cfg = \"rpass2\")]\n pub fn main() {}"}, {"sha": "085e4cd78ca1ce6718e34320b49e9e1e3dfcfd8e", "filename": "src/test/incremental/spans_significant_w_panic.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fb9dfa8ceffb985105be3176d7ed2f99515ea377/src%2Ftest%2Fincremental%2Fspans_significant_w_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb9dfa8ceffb985105be3176d7ed2f99515ea377/src%2Ftest%2Fincremental%2Fspans_significant_w_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fspans_significant_w_panic.rs?ref=fb9dfa8ceffb985105be3176d7ed2f99515ea377", "patch": "@@ -1,26 +1,22 @@\n // This test makes sure that just changing a definition's location in the\n // source file also changes its incr. comp. hash, if debuginfo is enabled.\n \n-// revisions:rpass1 rpass2 rpass3 rpass4\n-// [rpass3]compile-flags: -Zincremental-relative-spans\n-// [rpass4]compile-flags: -Zincremental-relative-spans\n+// revisions:rpass1 rpass2\n \n // compile-flags: -C overflow-checks=on -Z query-dep-graph\n \n #![feature(rustc_attrs)]\n #![rustc_partition_codegened(module = \"spans_significant_w_panic\", cfg = \"rpass2\")]\n-#![rustc_partition_codegened(module = \"spans_significant_w_panic\", cfg = \"rpass4\")]\n \n-#[cfg(any(rpass1, rpass3))]\n+#[cfg(rpass1)]\n pub fn main() {\n     if std::hint::black_box(false) {\n         panic!()\n     }\n }\n \n-#[cfg(any(rpass2, rpass4))]\n-#[rustc_clean(except = \"hir_owner,hir_owner_nodes,optimized_mir\", cfg = \"rpass2\")]\n-#[rustc_clean(cfg = \"rpass4\")]\n+#[cfg(rpass2)]\n+#[rustc_clean(cfg = \"rpass2\")]\n pub fn main() {\n     if std::hint::black_box(false) {\n         panic!()"}, {"sha": "e15a8d18f853dfd9bd43f12fd78c7a1f1ea8d256", "filename": "src/test/incremental/string_constant.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/fb9dfa8ceffb985105be3176d7ed2f99515ea377/src%2Ftest%2Fincremental%2Fstring_constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb9dfa8ceffb985105be3176d7ed2f99515ea377/src%2Ftest%2Fincremental%2Fstring_constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fstring_constant.rs?ref=fb9dfa8ceffb985105be3176d7ed2f99515ea377", "patch": "@@ -1,7 +1,5 @@\n-// revisions: cfail1 cfail2 cfail3 cfail4\n+// revisions: cfail1 cfail2\n // compile-flags: -Z query-dep-graph\n-// [cfail3]compile-flags: -Zincremental-relative-spans\n-// [cfail4]compile-flags: -Zincremental-relative-spans\n // build-pass (FIXME(62277): could be check-pass?)\n \n #![allow(warnings)]\n@@ -13,14 +11,13 @@\n // needed even for callers of `x`.\n \n pub mod x {\n-    #[cfg(any(cfail1, cfail3))]\n+    #[cfg(cfail1)]\n     pub fn x() {\n         println!(\"{}\", \"1\");\n     }\n \n-    #[cfg(any(cfail2, cfail4))]\n-    #[rustc_clean(except = \"hir_owner,hir_owner_nodes,optimized_mir,promoted_mir\", cfg = \"cfail2\")]\n-    #[rustc_clean(except = \"hir_owner_nodes,promoted_mir\", cfg = \"cfail4\")]\n+    #[cfg(cfail2)]\n+    #[rustc_clean(except = \"hir_owner_nodes,promoted_mir\", cfg = \"cfail2\")]\n     pub fn x() {\n         println!(\"{}\", \"2\");\n     }\n@@ -30,7 +27,6 @@ pub mod y {\n     use x;\n \n     #[rustc_clean(cfg = \"cfail2\")]\n-    #[rustc_clean(cfg = \"cfail4\")]\n     pub fn y() {\n         x::x();\n     }\n@@ -40,7 +36,6 @@ pub mod z {\n     use y;\n \n     #[rustc_clean(cfg = \"cfail2\")]\n-    #[rustc_clean(cfg = \"cfail4\")]\n     pub fn z() {\n         y::y();\n     }"}, {"sha": "368a726ea904de1a8164b3dd0c78ca483a1066e0", "filename": "src/test/incremental/thinlto/cgu_keeps_identical_fn.rs", "status": "modified", "additions": 1, "deletions": 24, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/fb9dfa8ceffb985105be3176d7ed2f99515ea377/src%2Ftest%2Fincremental%2Fthinlto%2Fcgu_keeps_identical_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb9dfa8ceffb985105be3176d7ed2f99515ea377/src%2Ftest%2Fincremental%2Fthinlto%2Fcgu_keeps_identical_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fthinlto%2Fcgu_keeps_identical_fn.rs?ref=fb9dfa8ceffb985105be3176d7ed2f99515ea377", "patch": "@@ -3,10 +3,7 @@\n // ends up with any spans in its LLVM bitecode, so LLVM is able to skip\n // re-building any modules which import 'inlined_fn'\n \n-// revisions: cfail1 cfail2 cfail3 cfail4 cfail5 cfail6\n-// [cfail4]compile-flags: -Zincremental-relative-spans\n-// [cfail5]compile-flags: -Zincremental-relative-spans\n-// [cfail6]compile-flags: -Zincremental-relative-spans\n+// revisions: cfail1 cfail2 cfail3\n // compile-flags: -Z query-dep-graph -O\n // build-pass (FIXME(62277): could be check-pass?)\n \n@@ -18,16 +15,6 @@\n     cfg = \"cfail3\",\n     kind = \"post-lto\"\n )]\n-#![rustc_expected_cgu_reuse(\n-    module = \"cgu_keeps_identical_fn-foo\",\n-    cfg = \"cfail5\",\n-    kind = \"post-lto\"\n-)]\n-#![rustc_expected_cgu_reuse(\n-    module = \"cgu_keeps_identical_fn-foo\",\n-    cfg = \"cfail6\",\n-    kind = \"post-lto\"\n-)]\n #![rustc_expected_cgu_reuse(\n     module = \"cgu_keeps_identical_fn-bar\",\n     cfg = \"cfail2\",\n@@ -38,16 +25,6 @@\n     cfg = \"cfail3\",\n     kind = \"post-lto\"\n )]\n-#![rustc_expected_cgu_reuse(\n-    module = \"cgu_keeps_identical_fn-bar\",\n-    cfg = \"cfail5\",\n-    kind = \"post-lto\"\n-)]\n-#![rustc_expected_cgu_reuse(\n-    module = \"cgu_keeps_identical_fn-bar\",\n-    cfg = \"cfail6\",\n-    kind = \"post-lto\"\n-)]\n \n mod foo {\n "}]}