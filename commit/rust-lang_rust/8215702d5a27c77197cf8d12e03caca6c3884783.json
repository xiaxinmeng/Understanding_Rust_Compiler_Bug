{"sha": "8215702d5a27c77197cf8d12e03caca6c3884783", "node_id": "C_kwDOAAsO6NoAKDgyMTU3MDJkNWEyN2M3NzE5N2NmOGQxMmUwM2NhY2E2YzM4ODQ3ODM", "commit": {"author": {"name": "Andy Wang", "email": "cbeuw.andy@gmail.com", "date": "2022-05-29T18:48:36Z"}, "committer": {"name": "Andy Wang", "email": "cbeuw.andy@gmail.com", "date": "2022-06-06T18:16:00Z"}, "message": "Refer to GitHub issue on overwritten init value", "tree": {"sha": "c6bb4c6b49459471c163f3fbad29c88bc5e26463", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c6bb4c6b49459471c163f3fbad29c88bc5e26463"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8215702d5a27c77197cf8d12e03caca6c3884783", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE7dcbcBMl24/h63ldGBtJ+fOPM3QFAmKeRGAACgkQGBtJ+fOP\nM3RQ0Av7Bj1cvUHKAtkyDGd4kQNTW7ixNhVcfY1Sr7k0lTuQcTvUaTzvvkVFY0GJ\nU6SCKkScxCv1dUCCf1HDqGpZSZR5eCVqDdwpClzBluRfrJBuR+2EK+/fPM33clzk\nT6NVlrwWRDoWf+ZaSdRoDiLqchhbKfSOae74MfP5AISxGNooU61gbKi9Le0f1Pa8\n9UyRNNi8RMsqGK7Swq0NMeGSwMFGJnt0+MGUfgT34pW3LwXXqinonXkdRL2KYciS\nEcBEMdm42M1qeG4RHaposTPO3tKr10Jzn5Zth8QgWiTNxm+5Lg9P04UPOU1vbnhk\nnZrK8+VZPhyuILHbOIOSLp4CLPfsWnHJh0oryLeOqotF7mEDvLzcW3jHgNz8OVoM\nvTSGTjcjEo7/XWsQLSjkRrdb6R5diCWHuiA8tbdk0nyOj3t38VhM6TFmnQwXTrMJ\nu+5IEIPoHZa41rxuF8aqK8Ipke6j9zPGQokTB12QSqTpl+NuKdpWJ0SZdbkjotcU\nqDMjcXi0\n=qOF9\n-----END PGP SIGNATURE-----", "payload": "tree c6bb4c6b49459471c163f3fbad29c88bc5e26463\nparent 4a07f78dadd3e5608157486b204fd4be2cde15a7\nauthor Andy Wang <cbeuw.andy@gmail.com> 1653850116 +0100\ncommitter Andy Wang <cbeuw.andy@gmail.com> 1654539360 +0100\n\nRefer to GitHub issue on overwritten init value\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8215702d5a27c77197cf8d12e03caca6c3884783", "html_url": "https://github.com/rust-lang/rust/commit/8215702d5a27c77197cf8d12e03caca6c3884783", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8215702d5a27c77197cf8d12e03caca6c3884783/comments", "author": {"login": "cbeuw", "id": 7034308, "node_id": "MDQ6VXNlcjcwMzQzMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7034308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cbeuw", "html_url": "https://github.com/cbeuw", "followers_url": "https://api.github.com/users/cbeuw/followers", "following_url": "https://api.github.com/users/cbeuw/following{/other_user}", "gists_url": "https://api.github.com/users/cbeuw/gists{/gist_id}", "starred_url": "https://api.github.com/users/cbeuw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cbeuw/subscriptions", "organizations_url": "https://api.github.com/users/cbeuw/orgs", "repos_url": "https://api.github.com/users/cbeuw/repos", "events_url": "https://api.github.com/users/cbeuw/events{/privacy}", "received_events_url": "https://api.github.com/users/cbeuw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cbeuw", "id": 7034308, "node_id": "MDQ6VXNlcjcwMzQzMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7034308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cbeuw", "html_url": "https://github.com/cbeuw", "followers_url": "https://api.github.com/users/cbeuw/followers", "following_url": "https://api.github.com/users/cbeuw/following{/other_user}", "gists_url": "https://api.github.com/users/cbeuw/gists{/gist_id}", "starred_url": "https://api.github.com/users/cbeuw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cbeuw/subscriptions", "organizations_url": "https://api.github.com/users/cbeuw/orgs", "repos_url": "https://api.github.com/users/cbeuw/repos", "events_url": "https://api.github.com/users/cbeuw/events{/privacy}", "received_events_url": "https://api.github.com/users/cbeuw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a07f78dadd3e5608157486b204fd4be2cde15a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a07f78dadd3e5608157486b204fd4be2cde15a7", "html_url": "https://github.com/rust-lang/rust/commit/4a07f78dadd3e5608157486b204fd4be2cde15a7"}], "stats": {"total": 5, "additions": 3, "deletions": 2}, "files": [{"sha": "35baf97b7276333f61f1ed5790954fc7c47df785", "filename": "src/concurrency/data_race.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8215702d5a27c77197cf8d12e03caca6c3884783/src%2Fconcurrency%2Fdata_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8215702d5a27c77197cf8d12e03caca6c3884783/src%2Fconcurrency%2Fdata_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconcurrency%2Fdata_race.rs?ref=8215702d5a27c77197cf8d12e03caca6c3884783", "patch": "@@ -544,6 +544,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: MiriEvalContextExt<'mir, 'tcx> {\n         // side effects from a read the program did not perform. So we have to initialise\n         // the store buffer with the value currently being written\n         // ONCE this is fixed please remove the hack in buffered_atomic_write() in weak_memory.rs\n+        // https://github.com/rust-lang/miri/issues/2164\n         this.buffered_atomic_write(val, dest, atomic, val)\n     }\n "}, {"sha": "237a13ea86465c345b7975545d3c0c45e29d8b50", "filename": "src/concurrency/weak_memory.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8215702d5a27c77197cf8d12e03caca6c3884783/src%2Fconcurrency%2Fweak_memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8215702d5a27c77197cf8d12e03caca6c3884783/src%2Fconcurrency%2Fweak_memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconcurrency%2Fweak_memory.rs?ref=8215702d5a27c77197cf8d12e03caca6c3884783", "patch": "@@ -508,6 +508,7 @@ pub(super) trait EvalContextExt<'mir, 'tcx: 'mir>:\n             // UGLY HACK: in write_scalar_atomic() we don't know the value before our write,\n             // so init == val always. If the buffer is fresh then we would've duplicated an entry,\n             // so we need to remove it.\n+            // See https://github.com/rust-lang/miri/issues/2164\n             let was_empty = matches!(\n                 alloc_buffers\n                     .store_buffers"}, {"sha": "1ae49edd6001a1cfc213f3c8b12f21c398a9154f", "filename": "src/machine.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8215702d5a27c77197cf8d12e03caca6c3884783/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8215702d5a27c77197cf8d12e03caca6c3884783/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=8215702d5a27c77197cf8d12e03caca6c3884783", "patch": "@@ -638,8 +638,6 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'mir, 'tcx> {\n             None\n         };\n         let buffer_alloc = if ecx.machine.weak_memory {\n-            // FIXME: if this is an atomic obejct, we want to supply its initial value\n-            // while allocating the store buffer here.\n             Some(weak_memory::AllocExtra::new_allocation())\n         } else {\n             None"}, {"sha": "7fe24d6383462af87c82c1bf78952758eeb94824", "filename": "tests/compile-fail/weak_memory/cpp20_rwc_syncs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8215702d5a27c77197cf8d12e03caca6c3884783/tests%2Fcompile-fail%2Fweak_memory%2Fcpp20_rwc_syncs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8215702d5a27c77197cf8d12e03caca6c3884783/tests%2Fcompile-fail%2Fweak_memory%2Fcpp20_rwc_syncs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fweak_memory%2Fcpp20_rwc_syncs.rs?ref=8215702d5a27c77197cf8d12e03caca6c3884783", "patch": "@@ -25,6 +25,7 @@ fn reads_value(loc: &AtomicUsize, val: usize) -> usize {\n fn static_atomic(val: usize) -> &'static AtomicUsize {\n     let ret = Box::leak(Box::new(AtomicUsize::new(val)));\n     // A workaround to put the initialization value in the store buffer.\n+    // See https://github.com/rust-lang/miri/issues/2164\n     ret.load(Relaxed);\n     ret\n }"}]}