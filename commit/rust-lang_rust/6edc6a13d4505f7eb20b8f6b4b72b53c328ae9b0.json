{"sha": "6edc6a13d4505f7eb20b8f6b4b72b53c328ae9b0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlZGM2YTEzZDQ1MDVmN2ViMjBiOGY2YjRiNzJiNTNjMzI4YWU5YjA=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-04-26T15:05:39Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-05-09T11:07:55Z"}, "message": "needless borrows found in clippy", "tree": {"sha": "1f7cc7aacc6ad4838d15e1138b01ac06a4e87663", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f7cc7aacc6ad4838d15e1138b01ac06a4e87663"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6edc6a13d4505f7eb20b8f6b4b72b53c328ae9b0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXMG+QAAoJEFbW7qD8Z6xGgOQP/2RjJ+m4yXVJF12OF2Dk7YER\n/VHSWLI/Fumnvi0oxXknKwSIRW2S5GsvhK5N2E/XLDB7arziYMBmJFyx/KV2leMK\nZwbkzvIyez+uYoqK70tsfzuR8QP4c2+Vllh/cC/lPbuqBek8a+9KwwvntXVz6C4q\nVW7zsftLUaQYOMNjt7OxpoNRCu5t25H+imV7CWYZbVSkxv/qTrYwq0rX4uGhREjr\nxW7nUw0ATcaesupsq0/oHGDeRKJYJtk+tHrh+2flBr1Y23uUC+eb3ueisSSwUl8j\nkSukeb7ASiPX8qemRUs+nsaV7K+C1GJZ9lnipnif7Ks53mRteDej+1O0MRFyqVJp\nGNgvrNJ3gzKzBNwKuFsm+mmlLcCBG9JBOLkMjBdQsttnOH6Hmcs6iR4pB1IGGs5T\njdkfeAqg3zL5PVnlNF+/bzn75s/ULeeGtdCDsnT7n7+aVWKHu99NvQCd6oeH6Wm3\nnhUwAjhbPtuHss7deXw8d4hu02D+2mgalNk7W2E2JcLn6tM0PKCRTVgsYYqPJEi/\ndd7LkRBbWbFseBqqZorsElpS21sEpxWLYAPgrPRqAOqXL9rdAw8ua2TZmbeizdZY\nMJ4FWLJt4lKlUa1pBP8wSb7NbocobqB4SOFuiYPbqMQEBWPiibi+KId5tVb0m+NH\ntjtAZ8gbkBYRjpIRyyy+\n=ZMsT\n-----END PGP SIGNATURE-----", "payload": "tree 1f7cc7aacc6ad4838d15e1138b01ac06a4e87663\nparent 87faaec7a30cab721aa03ad2e6301c9cd91f5847\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1461683139 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1462792075 +0200\n\nneedless borrows found in clippy\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6edc6a13d4505f7eb20b8f6b4b72b53c328ae9b0", "html_url": "https://github.com/rust-lang/rust/commit/6edc6a13d4505f7eb20b8f6b4b72b53c328ae9b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6edc6a13d4505f7eb20b8f6b4b72b53c328ae9b0/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87faaec7a30cab721aa03ad2e6301c9cd91f5847", "url": "https://api.github.com/repos/rust-lang/rust/commits/87faaec7a30cab721aa03ad2e6301c9cd91f5847", "html_url": "https://github.com/rust-lang/rust/commit/87faaec7a30cab721aa03ad2e6301c9cd91f5847"}], "stats": {"total": 70, "additions": 35, "deletions": 35}, "files": [{"sha": "ce2b9a7d6c00e530b1c33d3e76b8ff6fe5268f66", "filename": "src/array_indexing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6edc6a13d4505f7eb20b8f6b4b72b53c328ae9b0/src%2Farray_indexing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6edc6a13d4505f7eb20b8f6b4b72b53c328ae9b0/src%2Farray_indexing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Farray_indexing.rs?ref=6edc6a13d4505f7eb20b8f6b4b72b53c328ae9b0", "patch": "@@ -67,7 +67,7 @@ impl LateLintPass for ArrayIndexing {\n                 let size = ConstInt::Infer(size as u64);\n \n                 // Index is a constant uint\n-                let const_index = eval_const_expr_partial(cx.tcx, &index, ExprTypeChecked, None);\n+                let const_index = eval_const_expr_partial(cx.tcx, index, ExprTypeChecked, None);\n                 if let Ok(ConstVal::Integral(const_index)) = const_index {\n                     if size <= const_index {\n                         utils::span_lint(cx, OUT_OF_BOUNDS_INDEXING, e.span, \"const index is out of bounds\");"}, {"sha": "c56cf4dcd29237a623a853cbb9c819558b8f4f00", "filename": "src/block_in_if_condition.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6edc6a13d4505f7eb20b8f6b4b72b53c328ae9b0/src%2Fblock_in_if_condition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6edc6a13d4505f7eb20b8f6b4b72b53c328ae9b0/src%2Fblock_in_if_condition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fblock_in_if_condition.rs?ref=6edc6a13d4505f7eb20b8f6b4b72b53c328ae9b0", "patch": "@@ -59,7 +59,7 @@ impl<'v> Visitor<'v> for ExVisitor<'v> {\n                 }\n             };\n             if complex {\n-                self.found_block = Some(&expr);\n+                self.found_block = Some(expr);\n                 return;\n             }\n         }"}, {"sha": "9ab806f66ec559fdca5cf1c6bdfe705e6633b578", "filename": "src/booleans.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6edc6a13d4505f7eb20b8f6b4b72b53c328ae9b0/src%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6edc6a13d4505f7eb20b8f6b4b72b53c328ae9b0/src%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbooleans.rs?ref=6edc6a13d4505f7eb20b8f6b4b72b53c328ae9b0", "patch": "@@ -221,7 +221,7 @@ fn suggest(cx: &LateContext, suggestion: &Bool, terminals: &[&Expr]) -> String {\n                         s.push('(');\n                     }\n                 }\n-                s.push_str(&snip(&terminals[n as usize]));\n+                s.push_str(&snip(terminals[n as usize]));\n                 if brackets {\n                     if let ExprBinary(..) = terminals[n as usize].node {\n                         s.push(')');\n@@ -319,7 +319,7 @@ impl<'a, 'tcx> NonminimalBoolVisitor<'a, 'tcx> {\n             }\n             let mut improvements = Vec::new();\n             'simplified: for suggestion in &simplified {\n-                let simplified_stats = terminal_stats(&suggestion);\n+                let simplified_stats = terminal_stats(suggestion);\n                 let mut improvement = false;\n                 for i in 0..32 {\n                     // ignore any \"simplifications\" that end up requiring a terminal more often than in the original expression"}, {"sha": "248b5bfe9e6e1588c3fc27ef6c000b6ab9bc386f", "filename": "src/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6edc6a13d4505f7eb20b8f6b4b72b53c328ae9b0/src%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6edc6a13d4505f7eb20b8f6b4b72b53c328ae9b0/src%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconsts.rs?ref=6edc6a13d4505f7eb20b8f6b4b72b53c328ae9b0", "patch": "@@ -164,7 +164,7 @@ impl PartialOrd for Constant {\n                 }\n             }\n             (&Constant::Bool(ref l), &Constant::Bool(ref r)) => Some(l.cmp(r)),\n-            (&Constant::Vec(ref l), &Constant::Vec(ref r)) => l.partial_cmp(&r),\n+            (&Constant::Vec(ref l), &Constant::Vec(ref r)) => l.partial_cmp(r),\n             (&Constant::Repeat(ref lv, ref ls), &Constant::Repeat(ref rv, ref rs)) => {\n                 match lv.partial_cmp(rv) {\n                     Some(Equal) => Some(ls.cmp(rs)),"}, {"sha": "aa9f243e8c7fc383374b2812b0ba95da1fd9e3af", "filename": "src/copies.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6edc6a13d4505f7eb20b8f6b4b72b53c328ae9b0/src%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6edc6a13d4505f7eb20b8f6b4b72b53c328ae9b0/src%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcopies.rs?ref=6edc6a13d4505f7eb20b8f6b4b72b53c328ae9b0", "patch": "@@ -142,7 +142,7 @@ fn lint_match_arms(cx: &LateContext, expr: &Expr) {\n     };\n \n     if let ExprMatch(_, ref arms, MatchSource::Normal) = expr.node {\n-        if let Some((i, j)) = search_same(&arms, hash, eq) {\n+        if let Some((i, j)) = search_same(arms, hash, eq) {\n             span_note_and_lint(cx,\n                                MATCH_SAME_ARMS,\n                                j.body.span,\n@@ -256,8 +256,8 @@ fn search_same<T, Hash, Eq>(exprs: &[T], hash: Hash, eq: Eq) -> Option<(&T, &T)>\n         match map.entry(hash(expr)) {\n             Entry::Occupied(o) => {\n                 for o in o.get() {\n-                    if eq(&o, expr) {\n-                        return Some((&o, expr));\n+                    if eq(o, expr) {\n+                        return Some((o, expr));\n                     }\n                 }\n             }"}, {"sha": "858affd2bbb1bf891d0c163a0d0fa15556dccb2b", "filename": "src/cyclomatic_complexity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6edc6a13d4505f7eb20b8f6b4b72b53c328ae9b0/src%2Fcyclomatic_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6edc6a13d4505f7eb20b8f6b4b72b53c328ae9b0/src%2Fcyclomatic_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcyclomatic_complexity.rs?ref=6edc6a13d4505f7eb20b8f6b4b72b53c328ae9b0", "patch": "@@ -58,7 +58,7 @@ impl CyclomaticComplexity {\n             divergence: 0,\n             short_circuits: 0,\n             returns: 0,\n-            tcx: &cx.tcx,\n+            tcx: cx.tcx,\n         };\n         helper.visit_block(block);\n         let CCHelper { match_arms, divergence, short_circuits, returns, .. } = helper;"}, {"sha": "a1f2c5e1441d149c4f0faf4c802b1c6deb2fa61a", "filename": "src/enum_variants.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6edc6a13d4505f7eb20b8f6b4b72b53c328ae9b0/src%2Fenum_variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6edc6a13d4505f7eb20b8f6b4b72b53c328ae9b0/src%2Fenum_variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fenum_variants.rs?ref=6edc6a13d4505f7eb20b8f6b4b72b53c328ae9b0", "patch": "@@ -68,9 +68,9 @@ impl EarlyLintPass for EnumVariantNames {\n             for var in &def.variants {\n                 let name = var2str(var);\n \n-                let pre_match = partial_match(&pre, &name);\n+                let pre_match = partial_match(pre, &name);\n                 pre = &pre[..pre_match];\n-                let pre_camel = camel_case_until(&pre);\n+                let pre_camel = camel_case_until(pre);\n                 pre = &pre[..pre_camel];\n                 while let Some((next, last)) = name[pre.len()..].chars().zip(pre.chars().rev()).next() {\n                     if next.is_lowercase() {\n@@ -82,10 +82,10 @@ impl EarlyLintPass for EnumVariantNames {\n                     }\n                 }\n \n-                let post_match = partial_rmatch(&post, &name);\n+                let post_match = partial_rmatch(post, &name);\n                 let post_end = post.len() - post_match;\n                 post = &post[post_end..];\n-                let post_camel = camel_case_from(&post);\n+                let post_camel = camel_case_from(post);\n                 post = &post[post_camel..];\n             }\n             let (what, value) = match (pre.is_empty(), post.is_empty()) {"}, {"sha": "9dae856764a197c6f6405d6e83288d36c092de16", "filename": "src/len_zero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6edc6a13d4505f7eb20b8f6b4b72b53c328ae9b0/src%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6edc6a13d4505f7eb20b8f6b4b72b53c328ae9b0/src%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flen_zero.rs?ref=6edc6a13d4505f7eb20b8f6b4b72b53c328ae9b0", "patch": "@@ -184,7 +184,7 @@ fn has_is_empty(cx: &LateContext, expr: &Expr) -> bool {\n         })\n     }\n \n-    let ty = &walk_ptrs_ty(&cx.tcx.expr_ty(expr));\n+    let ty = &walk_ptrs_ty(cx.tcx.expr_ty(expr));\n     match ty.sty {\n         ty::TyTrait(_) => {\n             cx.tcx"}, {"sha": "e5d374a560fbc266b4ab4e4d17e9dbfbac967a92", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6edc6a13d4505f7eb20b8f6b4b72b53c328ae9b0/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6edc6a13d4505f7eb20b8f6b4b72b53c328ae9b0/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=6edc6a13d4505f7eb20b8f6b4b72b53c328ae9b0", "patch": "@@ -141,7 +141,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n                 (\"clippy.toml\", false)\n             };\n \n-            let (conf, errors) = utils::conf::read_conf(&file_name, must_exist);\n+            let (conf, errors) = utils::conf::read_conf(file_name, must_exist);\n \n             // all conf errors are non-fatal, we just use the default conf in case of error\n             for error in errors {"}, {"sha": "b9771e18ffc1fe5a21500b8f1bb37e5ec7f958dd", "filename": "src/lifetimes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6edc6a13d4505f7eb20b8f6b4b72b53c328ae9b0/src%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6edc6a13d4505f7eb20b8f6b4b72b53c328ae9b0/src%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flifetimes.rs?ref=6edc6a13d4505f7eb20b8f6b4b72b53c328ae9b0", "patch": "@@ -46,7 +46,7 @@ impl LintPass for LifetimePass {\n impl LateLintPass for LifetimePass {\n     fn check_item(&mut self, cx: &LateContext, item: &Item) {\n         if let ItemFn(ref decl, _, _, _, ref generics, _) = item.node {\n-            check_fn_inner(cx, decl, None, &generics, item.span);\n+            check_fn_inner(cx, decl, None, generics, item.span);\n         }\n     }\n \n@@ -102,7 +102,7 @@ fn check_fn_inner(cx: &LateContext, decl: &FnDecl, slf: Option<&ExplicitSelf>, g\n                   span,\n                   \"explicit lifetimes given in parameter types where they could be elided\");\n     }\n-    report_extra_lifetimes(cx, decl, &generics, slf);\n+    report_extra_lifetimes(cx, decl, generics, slf);\n }\n \n fn could_use_elision<'a, T: Iterator<Item = &'a Lifetime>>(cx: &LateContext, func: &FnDecl, slf: Option<&ExplicitSelf>,"}, {"sha": "2384c8453037b37276998b06b6a82a87df0ac9b9", "filename": "src/loops.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6edc6a13d4505f7eb20b8f6b4b72b53c328ae9b0/src%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6edc6a13d4505f7eb20b8f6b4b72b53c328ae9b0/src%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Floops.rs?ref=6edc6a13d4505f7eb20b8f6b4b72b53c328ae9b0", "patch": "@@ -328,7 +328,7 @@ fn check_for_loop(cx: &LateContext, pat: &Pat, arg: &Expr, body: &Expr, expr: &E\n /// Check for looping over a range and then indexing a sequence with it.\n /// The iteratee must be a range literal.\n fn check_for_loop_range(cx: &LateContext, pat: &Pat, arg: &Expr, body: &Expr, expr: &Expr) {\n-    if let Some(UnsugaredRange { start: Some(ref start), ref end, .. }) = unsugar_range(&arg) {\n+    if let Some(UnsugaredRange { start: Some(ref start), ref end, .. }) = unsugar_range(arg) {\n         // the var must be a single name\n         if let PatKind::Ident(_, ref ident, _) = pat.node {\n             let mut visitor = VarVisitor {\n@@ -363,7 +363,7 @@ fn check_for_loop_range(cx: &LateContext, pat: &Pat, arg: &Expr, body: &Expr, ex\n                 };\n \n                 let take: Cow<_> = if let Some(ref end) = *end {\n-                    if is_len_call(&end, &indexed) {\n+                    if is_len_call(end, &indexed) {\n                         \"\".into()\n                     } else {\n                         format!(\".take({})\", snippet(cx, end.span, \"..\")).into()\n@@ -422,10 +422,10 @@ fn is_len_call(expr: &Expr, var: &Name) -> bool {\n \n fn check_for_loop_reverse_range(cx: &LateContext, arg: &Expr, expr: &Expr) {\n     // if this for loop is iterating over a two-sided range...\n-    if let Some(UnsugaredRange { start: Some(ref start), end: Some(ref end), limits }) = unsugar_range(&arg) {\n+    if let Some(UnsugaredRange { start: Some(ref start), end: Some(ref end), limits }) = unsugar_range(arg) {\n         // ...and both sides are compile-time constant integers...\n-        if let Ok(start_idx) = eval_const_expr_partial(&cx.tcx, start, ExprTypeChecked, None) {\n-            if let Ok(end_idx) = eval_const_expr_partial(&cx.tcx, end, ExprTypeChecked, None) {\n+        if let Ok(start_idx) = eval_const_expr_partial(cx.tcx, start, ExprTypeChecked, None) {\n+            if let Ok(end_idx) = eval_const_expr_partial(cx.tcx, end, ExprTypeChecked, None) {\n                 // ...and the start index is greater than the end index,\n                 // this loop will never run. This is often confusing for developers\n                 // who think that this will iterate from the larger value to the"}, {"sha": "db4ccf2dcdbe2a9ae474c4e9e7879a2d0749ff16", "filename": "src/matches.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6edc6a13d4505f7eb20b8f6b4b72b53c328ae9b0/src%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6edc6a13d4505f7eb20b8f6b4b72b53c328ae9b0/src%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmatches.rs?ref=6edc6a13d4505f7eb20b8f6b4b72b53c328ae9b0", "patch": "@@ -461,8 +461,8 @@ pub fn overlapping<T>(ranges: &[SpannedRange<T>]) -> Option<(&SpannedRange<T>, &\n     let mut values = Vec::with_capacity(2 * ranges.len());\n \n     for r in ranges {\n-        values.push(Kind::Start(r.node.0, &r));\n-        values.push(Kind::End(r.node.1, &r));\n+        values.push(Kind::Start(r.node.0, r));\n+        values.push(Kind::End(r.node.1, r));\n     }\n \n     values.sort();\n@@ -475,7 +475,7 @@ pub fn overlapping<T>(ranges: &[SpannedRange<T>]) -> Option<(&SpannedRange<T>, &\n                 }\n             }\n             (&Kind::End(a, _), &Kind::Start(b, _)) if a != b => (),\n-            _ => return Some((&a.range(), &b.range())),\n+            _ => return Some((a.range(), b.range())),\n         }\n     }\n "}, {"sha": "5b86aab1aa1a0c43f7787fa590428412dbb911f8", "filename": "src/methods.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6edc6a13d4505f7eb20b8f6b4b72b53c328ae9b0/src%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6edc6a13d4505f7eb20b8f6b4b72b53c328ae9b0/src%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmethods.rs?ref=6edc6a13d4505f7eb20b8f6b4b72b53c328ae9b0", "patch": "@@ -365,7 +365,7 @@ impl LateLintPass for MethodsPass {\n                     lint_cstring_as_ptr(cx, expr, &arglists[0][0], &arglists[1][0]);\n                 }\n \n-                lint_or_fun_call(cx, expr, &name.node.as_str(), &args);\n+                lint_or_fun_call(cx, expr, &name.node.as_str(), args);\n \n                 let self_ty = cx.tcx.expr_ty_adjusted(&args[0]);\n                 if args.len() == 1 && name.node.as_str() == \"clone\" {\n@@ -420,7 +420,7 @@ impl LateLintPass for MethodsPass {\n \n                     // check conventions w.r.t. conversion method names and predicates\n                     let ty = cx.tcx.lookup_item_type(cx.tcx.map.local_def_id(item.id)).ty;\n-                    let is_copy = is_copy(cx, &ty, &item);\n+                    let is_copy = is_copy(cx, ty, item);\n                     for &(ref conv, self_kinds) in &CONVENTIONS {\n                         if conv.check(&name.as_str()) &&\n                            !self_kinds.iter().any(|k| k.matches(&sig.explicit_self.node, is_copy)) {"}, {"sha": "25747157c0f1677c816092fa899545cb0a42b66f", "filename": "src/misc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6edc6a13d4505f7eb20b8f6b4b72b53c328ae9b0/src%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6edc6a13d4505f7eb20b8f6b4b72b53c328ae9b0/src%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmisc.rs?ref=6edc6a13d4505f7eb20b8f6b4b72b53c328ae9b0", "patch": "@@ -424,7 +424,7 @@ fn is_used(cx: &LateContext, expr: &Expr) -> bool {\n         match parent.node {\n             ExprAssign(_, ref rhs) |\n             ExprAssignOp(_, _, ref rhs) => **rhs == *expr,\n-            _ => is_used(cx, &parent),\n+            _ => is_used(cx, parent),\n         }\n     } else {\n         true"}, {"sha": "f6aee54d90b35ed890c1afbda51b0dd07b78b158", "filename": "src/mut_reference.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6edc6a13d4505f7eb20b8f6b4b72b53c328ae9b0/src%2Fmut_reference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6edc6a13d4505f7eb20b8f6b4b72b53c328ae9b0/src%2Fmut_reference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmut_reference.rs?ref=6edc6a13d4505f7eb20b8f6b4b72b53c328ae9b0", "patch": "@@ -39,13 +39,13 @@ impl LateLintPass for UnnecessaryMutPassed {\n                                                            If this happened, the compiler would have \\\n                                                            aborted the compilation long ago\");\n                 if let ExprPath(_, ref path) = fn_expr.node {\n-                    check_arguments(cx, &arguments, function_type, &path.to_string());\n+                    check_arguments(cx, arguments, function_type, &path.to_string());\n                 }\n             }\n             ExprMethodCall(ref name, _, ref arguments) => {\n                 let method_call = MethodCall::expr(e.id);\n                 let method_type = borrowed_table.method_map.get(&method_call).expect(\"This should never happen.\");\n-                check_arguments(cx, &arguments, method_type.ty, &name.node.as_str())\n+                check_arguments(cx, arguments, method_type.ty, &name.node.as_str())\n             }\n             _ => (),\n         }"}, {"sha": "9d2139fe42281ff74e34563101a20507e5d9d32a", "filename": "src/non_expressive_names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6edc6a13d4505f7eb20b8f6b4b72b53c328ae9b0/src%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6edc6a13d4505f7eb20b8f6b4b72b53c328ae9b0/src%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fnon_expressive_names.rs?ref=6edc6a13d4505f7eb20b8f6b4b72b53c328ae9b0", "patch": "@@ -249,7 +249,7 @@ impl EarlyLintPass for NonExpressiveNames {\n                 let mut visitor = SimilarNamesLocalVisitor {\n                     names: Vec::new(),\n                     cx: cx,\n-                    lint: &self,\n+                    lint: self,\n                     single_char_names: Vec::new(),\n                 };\n                 // initialize with function arguments"}, {"sha": "4b6439c4eb36b55bb12d239d7d9667fdcce6c443", "filename": "src/shadow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6edc6a13d4505f7eb20b8f6b4b72b53c328ae9b0/src%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6edc6a13d4505f7eb20b8f6b4b72b53c328ae9b0/src%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshadow.rs?ref=6edc6a13d4505f7eb20b8f6b4b72b53c328ae9b0", "patch": "@@ -278,7 +278,7 @@ fn check_expr(cx: &LateContext, expr: &Expr, bindings: &mut Vec<(Name, Span)>) {\n             let len = bindings.len();\n             for ref arm in arms {\n                 for ref pat in &arm.pats {\n-                    check_pat(cx, &pat, &Some(&**init), pat.span, bindings);\n+                    check_pat(cx, pat, &Some(&**init), pat.span, bindings);\n                     // This is ugly, but needed to get the right type\n                     if let Some(ref guard) = arm.guard {\n                         check_expr(cx, guard, bindings);"}, {"sha": "f63538e974d005815e185d8b97e2463e79c717f7", "filename": "src/types.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6edc6a13d4505f7eb20b8f6b4b72b53c328ae9b0/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6edc6a13d4505f7eb20b8f6b4b72b53c328ae9b0/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=6edc6a13d4505f7eb20b8f6b4b72b53c328ae9b0", "patch": "@@ -910,7 +910,7 @@ fn upcast_comparison_bounds_err(cx: &LateContext, span: &Span, rel: comparisons:\n         if let Some(norm_rhs_val) = node_as_const_fullint(cx, rhs) {\n             if rel == Rel::Eq || rel == Rel::Ne {\n                 if norm_rhs_val < lb || norm_rhs_val > ub {\n-                    err_upcast_comparison(cx, &span, lhs, rel == Rel::Ne);\n+                    err_upcast_comparison(cx, span, lhs, rel == Rel::Ne);\n                 }\n             } else if match rel {\n                 Rel::Lt => {\n@@ -929,7 +929,7 @@ fn upcast_comparison_bounds_err(cx: &LateContext, span: &Span, rel: comparisons:\n                 }\n                 Rel::Eq | Rel::Ne => unreachable!(),\n             } {\n-                err_upcast_comparison(cx, &span, lhs, true)\n+                err_upcast_comparison(cx, span, lhs, true)\n             } else if match rel {\n                 Rel::Lt => {\n                     if invert {\n@@ -947,7 +947,7 @@ fn upcast_comparison_bounds_err(cx: &LateContext, span: &Span, rel: comparisons:\n                 }\n                 Rel::Eq | Rel::Ne => unreachable!(),\n             } {\n-                err_upcast_comparison(cx, &span, lhs, false)\n+                err_upcast_comparison(cx, span, lhs, false)\n             }\n         }\n     }"}]}