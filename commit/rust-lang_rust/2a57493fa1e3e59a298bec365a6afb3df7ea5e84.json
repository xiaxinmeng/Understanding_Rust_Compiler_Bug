{"sha": "2a57493fa1e3e59a298bec365a6afb3df7ea5e84", "node_id": "C_kwDOAAsO6NoAKDJhNTc0OTNmYTFlM2U1OWEyOThiZWMzNjVhNmFmYjNkZjdlYTVlODQ", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-12-19T09:11:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-19T09:11:37Z"}, "message": "Rollup merge of #105889 - Nilstrieb:fmt-libtest, r=thomcc\n\nFix `uninlined_format_args` in libtest\n\nDone using clippy with a quick manual review.", "tree": {"sha": "d76de7645b82a7fff0c73b122fbd8ee69e4e58e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d76de7645b82a7fff0c73b122fbd8ee69e4e58e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a57493fa1e3e59a298bec365a6afb3df7ea5e84", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjoCrJCRBK7hj4Ov3rIwAAI+YIAC523Joi1B+6F4H+/UF/sh0m\nj1KAdUmA3pTfQkeRm3lgTEiW3rOmDcFeW98onGHR4z9zD4hQoEYJsmcpDqCMQIhw\npXpsr9FEw4EY/c6Reim+JDZk6IhQ41AF7v3chf1RbjcFsT27SkvA9bh8LTL/SyFa\n4LKMvXV/SvNYDYW9xlKD9BHOoks/eglE3XLMHLxcrITq6Vx7B0Aa1MNH4+slBgpH\nrNrvXF760O4V+z9z5dbcXG51mx834rMPI0dyde76oszh4DJwegX3t0sKgCNEn0DX\njQS9IE6br0U9nIRRN4P0mz80D9BN/KG4yG3PG8zNQcui9q6qXlNMIdn4Fey/rbs=\n=70Wr\n-----END PGP SIGNATURE-----\n", "payload": "tree d76de7645b82a7fff0c73b122fbd8ee69e4e58e1\nparent 3350ae9cef1f82825322521edde45abd9af055cd\nparent 5fb2d63d0793a4c3c612d1e4a4ca6a184e6fe614\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1671441097 +0530\ncommitter GitHub <noreply@github.com> 1671441097 +0530\n\nRollup merge of #105889 - Nilstrieb:fmt-libtest, r=thomcc\n\nFix `uninlined_format_args` in libtest\n\nDone using clippy with a quick manual review.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a57493fa1e3e59a298bec365a6afb3df7ea5e84", "html_url": "https://github.com/rust-lang/rust/commit/2a57493fa1e3e59a298bec365a6afb3df7ea5e84", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a57493fa1e3e59a298bec365a6afb3df7ea5e84/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3350ae9cef1f82825322521edde45abd9af055cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/3350ae9cef1f82825322521edde45abd9af055cd", "html_url": "https://github.com/rust-lang/rust/commit/3350ae9cef1f82825322521edde45abd9af055cd"}, {"sha": "5fb2d63d0793a4c3c612d1e4a4ca6a184e6fe614", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fb2d63d0793a4c3c612d1e4a4ca6a184e6fe614", "html_url": "https://github.com/rust-lang/rust/commit/5fb2d63d0793a4c3c612d1e4a4ca6a184e6fe614"}], "stats": {"total": 39, "additions": 15, "deletions": 24}, "files": [{"sha": "796796e07a9c18fe5673961f463753cf980e2763", "filename": "library/test/src/cli.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2a57493fa1e3e59a298bec365a6afb3df7ea5e84/library%2Ftest%2Fsrc%2Fcli.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a57493fa1e3e59a298bec365a6afb3df7ea5e84/library%2Ftest%2Fsrc%2Fcli.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fcli.rs?ref=2a57493fa1e3e59a298bec365a6afb3df7ea5e84", "patch": "@@ -354,8 +354,7 @@ fn get_shuffle_seed(matches: &getopts::Matches, allow_unstable: bool) -> OptPart\n             Err(e) => {\n                 return Err(format!(\n                     \"argument for --shuffle-seed must be a number \\\n-                     (error: {})\",\n-                    e\n+                     (error: {e})\"\n                 ));\n             }\n         },\n@@ -383,8 +382,7 @@ fn get_test_threads(matches: &getopts::Matches) -> OptPartRes<Option<usize>> {\n             Err(e) => {\n                 return Err(format!(\n                     \"argument for --test-threads must be a number > 0 \\\n-                     (error: {})\",\n-                    e\n+                     (error: {e})\"\n                 ));\n             }\n         },\n@@ -418,8 +416,7 @@ fn get_format(\n         Some(v) => {\n             return Err(format!(\n                 \"argument for --format must be pretty, terse, json or junit (was \\\n-                 {})\",\n-                v\n+                 {v})\"\n             ));\n         }\n     };\n@@ -436,8 +433,7 @@ fn get_color_config(matches: &getopts::Matches) -> OptPartRes<ColorConfig> {\n         Some(v) => {\n             return Err(format!(\n                 \"argument for --color must be auto, always, or never (was \\\n-                 {})\",\n-                v\n+                 {v})\"\n             ));\n         }\n     };"}, {"sha": "5526aadb67ffb84a4aafab0bd79d8ab4c12a85bf", "filename": "library/test/src/formatters/json.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2a57493fa1e3e59a298bec365a6afb3df7ea5e84/library%2Ftest%2Fsrc%2Fformatters%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a57493fa1e3e59a298bec365a6afb3df7ea5e84/library%2Ftest%2Fsrc%2Fformatters%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fformatters%2Fjson.rs?ref=2a57493fa1e3e59a298bec365a6afb3df7ea5e84", "patch": "@@ -53,7 +53,7 @@ impl<T: Write> JsonFormatter<T> {\n             self.write_message(&*format!(r#\", \"stdout\": \"{}\"\"#, EscapedString(stdout)))?;\n         }\n         if let Some(extra) = extra {\n-            self.write_message(&*format!(r#\", {}\"#, extra))?;\n+            self.write_message(&*format!(r#\", {extra}\"#))?;\n         }\n         self.writeln_message(\" }\")\n     }\n@@ -62,13 +62,12 @@ impl<T: Write> JsonFormatter<T> {\n impl<T: Write> OutputFormatter for JsonFormatter<T> {\n     fn write_run_start(&mut self, test_count: usize, shuffle_seed: Option<u64>) -> io::Result<()> {\n         let shuffle_seed_json = if let Some(shuffle_seed) = shuffle_seed {\n-            format!(r#\", \"shuffle_seed\": {}\"#, shuffle_seed)\n+            format!(r#\", \"shuffle_seed\": {shuffle_seed}\"#)\n         } else {\n             String::new()\n         };\n         self.writeln_message(&*format!(\n-            r#\"{{ \"type\": \"suite\", \"event\": \"started\", \"test_count\": {}{} }}\"#,\n-            test_count, shuffle_seed_json\n+            r#\"{{ \"type\": \"suite\", \"event\": \"started\", \"test_count\": {test_count}{shuffle_seed_json} }}\"#\n         ))\n     }\n "}, {"sha": "cb67b6491a392286c3821cd3ec1d9089d58a018d", "filename": "library/test/src/formatters/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a57493fa1e3e59a298bec365a6afb3df7ea5e84/library%2Ftest%2Fsrc%2Fformatters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a57493fa1e3e59a298bec365a6afb3df7ea5e84/library%2Ftest%2Fsrc%2Fformatters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fformatters%2Fmod.rs?ref=2a57493fa1e3e59a298bec365a6afb3df7ea5e84", "patch": "@@ -38,5 +38,5 @@ pub(crate) fn write_stderr_delimiter(test_output: &mut Vec<u8>, test_name: &Test\n         Some(_) => test_output.push(b'\\n'),\n         None => (),\n     }\n-    writeln!(test_output, \"---- {} stderr ----\", test_name).unwrap();\n+    writeln!(test_output, \"---- {test_name} stderr ----\").unwrap();\n }"}, {"sha": "0299c8b543359adb3de118bb7f91436e0cf32879", "filename": "library/test/src/formatters/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a57493fa1e3e59a298bec365a6afb3df7ea5e84/library%2Ftest%2Fsrc%2Fformatters%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a57493fa1e3e59a298bec365a6afb3df7ea5e84/library%2Ftest%2Fsrc%2Fformatters%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fformatters%2Fpretty.rs?ref=2a57493fa1e3e59a298bec365a6afb3df7ea5e84", "patch": "@@ -47,7 +47,7 @@ impl<T: Write> PrettyFormatter<T> {\n \n     pub fn write_ignored(&mut self, message: Option<&'static str>) -> io::Result<()> {\n         if let Some(message) = message {\n-            self.write_short_result(&format!(\"ignored, {}\", message), term::color::YELLOW)\n+            self.write_short_result(&format!(\"ignored, {message}\"), term::color::YELLOW)\n         } else {\n             self.write_short_result(\"ignored\", term::color::YELLOW)\n         }"}, {"sha": "f6a41bbb88c852c8090e95b003e64379cc9759bb", "filename": "library/test/src/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2a57493fa1e3e59a298bec365a6afb3df7ea5e84/library%2Ftest%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a57493fa1e3e59a298bec365a6afb3df7ea5e84/library%2Ftest%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Flib.rs?ref=2a57493fa1e3e59a298bec365a6afb3df7ea5e84", "patch": "@@ -213,8 +213,7 @@ pub fn assert_test_result<T: Termination>(result: T) -> Result<(), String> {\n     } else {\n         Err(format!(\n             \"the test returned a termination value with a non-zero status code \\\n-             ({}) which indicates a failure\",\n-            code\n+             ({code}) which indicates a failure\"\n         ))\n     }\n }\n@@ -750,7 +749,7 @@ fn spawn_test_subprocess(\n         })() {\n             Ok(r) => r,\n             Err(e) => {\n-                write!(&mut test_output, \"Unexpected error: {}\", e).unwrap();\n+                write!(&mut test_output, \"Unexpected error: {e}\").unwrap();\n                 TrFailed\n             }\n         };"}, {"sha": "7c5b0d6c0f721072d0d13c40b3be84d529dee0e0", "filename": "library/test/src/test_result.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2a57493fa1e3e59a298bec365a6afb3df7ea5e84/library%2Ftest%2Fsrc%2Ftest_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a57493fa1e3e59a298bec365a6afb3df7ea5e84/library%2Ftest%2Fsrc%2Ftest_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Ftest_result.rs?ref=2a57493fa1e3e59a298bec365a6afb3df7ea5e84", "patch": "@@ -44,9 +44,8 @@ pub fn calc_result<'a>(\n             } else if let Some(panic_str) = maybe_panic_str {\n                 TestResult::TrFailedMsg(format!(\n                     r#\"panic did not contain expected string\n-      panic message: `{:?}`,\n- expected substring: `{:?}`\"#,\n-                    panic_str, msg\n+      panic message: `{panic_str:?}`,\n+ expected substring: `{msg:?}`\"#\n                 ))\n             } else {\n                 TestResult::TrFailedMsg(format!("}, {"sha": "7fd69d7f7e73c66ea340f995e9f30be4be890920", "filename": "library/test/src/time.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2a57493fa1e3e59a298bec365a6afb3df7ea5e84/library%2Ftest%2Fsrc%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a57493fa1e3e59a298bec365a6afb3df7ea5e84/library%2Ftest%2Fsrc%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Ftime.rs?ref=2a57493fa1e3e59a298bec365a6afb3df7ea5e84", "patch": "@@ -107,16 +107,14 @@ impl TimeThreshold {\n         let durations_str = env::var(env_var_name).ok()?;\n         let (warn_str, critical_str) = durations_str.split_once(',').unwrap_or_else(|| {\n             panic!(\n-                \"Duration variable {} expected to have 2 numbers separated by comma, but got {}\",\n-                env_var_name, durations_str\n+                \"Duration variable {env_var_name} expected to have 2 numbers separated by comma, but got {durations_str}\"\n             )\n         });\n \n         let parse_u64 = |v| {\n             u64::from_str(v).unwrap_or_else(|_| {\n                 panic!(\n-                    \"Duration value in variable {} is expected to be a number, but got {}\",\n-                    env_var_name, v\n+                    \"Duration value in variable {env_var_name} is expected to be a number, but got {v}\"\n                 )\n             })\n         };"}]}