{"sha": "50bca8af1dd29b8b376ec217c6c1ee16d6b69228", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwYmNhOGFmMWRkMjliOGIzNzZlYzIxN2M2YzFlZTE2ZDZiNjkyMjg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-08T00:51:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-08T00:51:51Z"}, "message": "Auto merge of #6330 - camsteffen:redundant-else, r=ebroto\n\nAdd Redundant else lint\n\nchangelog: Add redundant_else lint\n\nIt seemed appropriate for \"pedantic\".\n\nCloses #112 \\*blows off dust*", "tree": {"sha": "cdf72507d186d5641c0004485a61e2634cb2f88c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cdf72507d186d5641c0004485a61e2634cb2f88c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50bca8af1dd29b8b376ec217c6c1ee16d6b69228", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50bca8af1dd29b8b376ec217c6c1ee16d6b69228", "html_url": "https://github.com/rust-lang/rust/commit/50bca8af1dd29b8b376ec217c6c1ee16d6b69228", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50bca8af1dd29b8b376ec217c6c1ee16d6b69228/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "856f4f3af648a9f51dd38065be01efa716edd9b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/856f4f3af648a9f51dd38065be01efa716edd9b2", "html_url": "https://github.com/rust-lang/rust/commit/856f4f3af648a9f51dd38065be01efa716edd9b2"}, {"sha": "70f6a2cae22cc1245ee62ca493f3027a76b3a381", "url": "https://api.github.com/repos/rust-lang/rust/commits/70f6a2cae22cc1245ee62ca493f3027a76b3a381", "html_url": "https://github.com/rust-lang/rust/commit/70f6a2cae22cc1245ee62ca493f3027a76b3a381"}], "stats": {"total": 407, "additions": 387, "deletions": 20}, "files": [{"sha": "adb4a5c82610805f62329cf5ad73b1b8dfb99441", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/50bca8af1dd29b8b376ec217c6c1ee16d6b69228/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/50bca8af1dd29b8b376ec217c6c1ee16d6b69228/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=50bca8af1dd29b8b376ec217c6c1ee16d6b69228", "patch": "@@ -2024,6 +2024,7 @@ Released 2018-09-13\n [`redundant_closure`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure\n [`redundant_closure_call`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure_call\n [`redundant_closure_for_method_calls`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure_for_method_calls\n+[`redundant_else`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else\n [`redundant_field_names`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_field_names\n [`redundant_pattern`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_pattern\n [`redundant_pattern_matching`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_pattern_matching"}, {"sha": "fd93548b55c6db3a327b2a9ac29fc7464476967b", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/50bca8af1dd29b8b376ec217c6c1ee16d6b69228/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50bca8af1dd29b8b376ec217c6c1ee16d6b69228/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=50bca8af1dd29b8b376ec217c6c1ee16d6b69228", "patch": "@@ -405,13 +405,10 @@ impl<'tcx> Functions {\n                     break;\n                 }\n                 if in_comment {\n-                    match line.find(\"*/\") {\n-                        Some(i) => {\n-                            line = &line[i + 2..];\n-                            in_comment = false;\n-                            continue;\n-                        },\n-                        None => break,\n+                    if let Some(i) = line.find(\"*/\") {\n+                        line = &line[i + 2..];\n+                        in_comment = false;\n+                        continue;\n                     }\n                 } else {\n                     let multi_idx = line.find(\"/*\").unwrap_or_else(|| line.len());\n@@ -423,8 +420,8 @@ impl<'tcx> Functions {\n                         in_comment = true;\n                         continue;\n                     }\n-                    break;\n                 }\n+                break;\n             }\n             if code_in_line {\n                 line_count += 1;"}, {"sha": "6fe5335109045acfd799b46e75a994d0c5416255", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/50bca8af1dd29b8b376ec217c6c1ee16d6b69228/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50bca8af1dd29b8b376ec217c6c1ee16d6b69228/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=50bca8af1dd29b8b376ec217c6c1ee16d6b69228", "patch": "@@ -222,9 +222,8 @@ fn check_impl_items(cx: &LateContext<'_>, item: &Item<'_>, impl_items: &[ImplIte\n     let is_empty = if let Some(is_empty) = impl_items.iter().find(|i| is_named_self(cx, i, \"is_empty\")) {\n         if cx.access_levels.is_exported(is_empty.id.hir_id) {\n             return;\n-        } else {\n-            \"a private\"\n         }\n+        \"a private\"\n     } else {\n         \"no corresponding\"\n     };"}, {"sha": "ac5a45ccfd242f5360f10207e183839a99d7dc5d", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/50bca8af1dd29b8b376ec217c6c1ee16d6b69228/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50bca8af1dd29b8b376ec217c6c1ee16d6b69228/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=50bca8af1dd29b8b376ec217c6c1ee16d6b69228", "patch": "@@ -294,6 +294,7 @@ mod question_mark;\n mod ranges;\n mod redundant_clone;\n mod redundant_closure_call;\n+mod redundant_else;\n mod redundant_field_names;\n mod redundant_pub_crate;\n mod redundant_static_lifetimes;\n@@ -831,6 +832,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &ranges::REVERSED_EMPTY_RANGES,\n         &redundant_clone::REDUNDANT_CLONE,\n         &redundant_closure_call::REDUNDANT_CLOSURE_CALL,\n+        &redundant_else::REDUNDANT_ELSE,\n         &redundant_field_names::REDUNDANT_FIELD_NAMES,\n         &redundant_pub_crate::REDUNDANT_PUB_CRATE,\n         &redundant_static_lifetimes::REDUNDANT_STATIC_LIFETIMES,\n@@ -1132,6 +1134,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_early_pass(|| box items_after_statements::ItemsAfterStatements);\n     store.register_early_pass(|| box precedence::Precedence);\n     store.register_early_pass(|| box needless_continue::NeedlessContinue);\n+    store.register_early_pass(|| box redundant_else::RedundantElse);\n     store.register_late_pass(|| box create_dir::CreateDir);\n     store.register_early_pass(|| box needless_arbitrary_self_type::NeedlessArbitrarySelfType);\n     store.register_early_pass(|| box redundant_static_lifetimes::RedundantStaticLifetimes);\n@@ -1308,6 +1311,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&pass_by_ref_or_value::TRIVIALLY_COPY_PASS_BY_REF),\n         LintId::of(&ranges::RANGE_MINUS_ONE),\n         LintId::of(&ranges::RANGE_PLUS_ONE),\n+        LintId::of(&redundant_else::REDUNDANT_ELSE),\n         LintId::of(&ref_option_ref::REF_OPTION_REF),\n         LintId::of(&shadow::SHADOW_UNRELATED),\n         LintId::of(&strings::STRING_ADD_ASSIGN),"}, {"sha": "2a1a73f98ee5caad7d3985c43165f6e461c19b1a", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/50bca8af1dd29b8b376ec217c6c1ee16d6b69228/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50bca8af1dd29b8b376ec217c6c1ee16d6b69228/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=50bca8af1dd29b8b376ec217c6c1ee16d6b69228", "patch": "@@ -689,10 +689,9 @@ fn check_single_match(cx: &LateContext<'_>, ex: &Expr<'_>, arms: &[Arm<'_>], exp\n             if stmts.len() == 1 && block_expr.is_none() || stmts.is_empty() && block_expr.is_some() {\n                 // single statement/expr \"else\" block, don't lint\n                 return;\n-            } else {\n-                // block with 2+ statements or 1 expr and 1+ statement\n-                Some(els)\n             }\n+            // block with 2+ statements or 1 expr and 1+ statement\n+            Some(els)\n         } else {\n             // not a block, don't lint\n             return;"}, {"sha": "d082a88cd2db55a9d56e48160d78696a03722500", "filename": "clippy_lints/src/methods/unnecessary_filter_map.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/50bca8af1dd29b8b376ec217c6c1ee16d6b69228/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50bca8af1dd29b8b376ec217c6c1ee16d6b69228/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs?ref=50bca8af1dd29b8b376ec217c6c1ee16d6b69228", "patch": "@@ -69,10 +69,9 @@ fn check_expression<'tcx>(cx: &LateContext<'tcx>, arg_id: hir::HirId, expr: &'tc\n                             }\n                         }\n                         return (true, false);\n-                    } else {\n-                        // We don't know. It might do anything.\n-                        return (true, true);\n                     }\n+                    // We don't know. It might do anything.\n+                    return (true, true);\n                 }\n             }\n             (true, true)"}, {"sha": "446426b3e611f84e8ccad4a21cedab263ffda6ee", "filename": "clippy_lints/src/non_expressive_names.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/50bca8af1dd29b8b376ec217c6c1ee16d6b69228/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50bca8af1dd29b8b376ec217c6c1ee16d6b69228/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_expressive_names.rs?ref=50bca8af1dd29b8b376ec217c6c1ee16d6b69228", "patch": "@@ -409,11 +409,10 @@ fn levenstein_not_1(a_name: &str, b_name: &str) -> bool {\n         if let Some(b2) = b_chars.next() {\n             // check if there's just one character inserted\n             return a != b2 || a_chars.ne(b_chars);\n-        } else {\n-            // tuple\n-            // ntuple\n-            return true;\n         }\n+        // tuple\n+        // ntuple\n+        return true;\n     }\n     // for item in items\n     true"}, {"sha": "3d585cd27a3d07c9a5e808526767eae4cdaacd8d", "filename": "clippy_lints/src/redundant_else.rs", "status": "added", "additions": 135, "deletions": 0, "changes": 135, "blob_url": "https://github.com/rust-lang/rust/blob/50bca8af1dd29b8b376ec217c6c1ee16d6b69228/clippy_lints%2Fsrc%2Fredundant_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50bca8af1dd29b8b376ec217c6c1ee16d6b69228/clippy_lints%2Fsrc%2Fredundant_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_else.rs?ref=50bca8af1dd29b8b376ec217c6c1ee16d6b69228", "patch": "@@ -0,0 +1,135 @@\n+use crate::utils::span_lint_and_help;\n+use rustc_ast::ast::{Block, Expr, ExprKind, Stmt, StmtKind};\n+use rustc_ast::visit::{walk_expr, Visitor};\n+use rustc_lint::{EarlyContext, EarlyLintPass};\n+use rustc_middle::lint::in_external_macro;\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Checks for `else` blocks that can be removed without changing semantics.\n+    ///\n+    /// **Why is this bad?** The `else` block adds unnecessary indentation and verbosity.\n+    ///\n+    /// **Known problems:** Some may prefer to keep the `else` block for clarity.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust\n+    /// fn my_func(count: u32) {\n+    ///     if count == 0 {\n+    ///         print!(\"Nothing to do\");\n+    ///         return;\n+    ///     } else {\n+    ///         print!(\"Moving on...\");\n+    ///     }\n+    /// }\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// fn my_func(count: u32) {\n+    ///     if count == 0 {\n+    ///         print!(\"Nothing to do\");\n+    ///         return;\n+    ///     }\n+    ///     print!(\"Moving on...\");\n+    /// }\n+    /// ```\n+    pub REDUNDANT_ELSE,\n+    pedantic,\n+    \"`else` branch that can be removed without changing semantics\"\n+}\n+\n+declare_lint_pass!(RedundantElse => [REDUNDANT_ELSE]);\n+\n+impl EarlyLintPass for RedundantElse {\n+    fn check_stmt(&mut self, cx: &EarlyContext<'_>, stmt: &Stmt) {\n+        if in_external_macro(cx.sess, stmt.span) {\n+            return;\n+        }\n+        // Only look at expressions that are a whole statement\n+        let expr: &Expr = match &stmt.kind {\n+            StmtKind::Expr(expr) | StmtKind::Semi(expr) => expr,\n+            _ => return,\n+        };\n+        // if else\n+        let (mut then, mut els): (&Block, &Expr) = match &expr.kind {\n+            ExprKind::If(_, then, Some(els)) => (then, els),\n+            _ => return,\n+        };\n+        loop {\n+            if !BreakVisitor::default().check_block(then) {\n+                // then block does not always break\n+                return;\n+            }\n+            match &els.kind {\n+                // else if else\n+                ExprKind::If(_, next_then, Some(next_els)) => {\n+                    then = next_then;\n+                    els = next_els;\n+                    continue;\n+                },\n+                // else if without else\n+                ExprKind::If(..) => return,\n+                // done\n+                _ => break,\n+            }\n+        }\n+        span_lint_and_help(\n+            cx,\n+            REDUNDANT_ELSE,\n+            els.span,\n+            \"redundant else block\",\n+            None,\n+            \"remove the `else` block and move the contents out\",\n+        );\n+    }\n+}\n+\n+/// Call `check` functions to check if an expression always breaks control flow\n+#[derive(Default)]\n+struct BreakVisitor {\n+    is_break: bool,\n+}\n+\n+impl<'ast> Visitor<'ast> for BreakVisitor {\n+    fn visit_block(&mut self, block: &'ast Block) {\n+        self.is_break = match block.stmts.as_slice() {\n+            [.., last] => self.check_stmt(last),\n+            _ => false,\n+        };\n+    }\n+\n+    fn visit_expr(&mut self, expr: &'ast Expr) {\n+        self.is_break = match expr.kind {\n+            ExprKind::Break(..) | ExprKind::Continue(..) | ExprKind::Ret(..) => true,\n+            ExprKind::Match(_, ref arms) => arms.iter().all(|arm| self.check_expr(&arm.body)),\n+            ExprKind::If(_, ref then, Some(ref els)) => self.check_block(then) && self.check_expr(els),\n+            ExprKind::If(_, _, None)\n+            // ignore loops for simplicity\n+            | ExprKind::While(..) | ExprKind::ForLoop(..) | ExprKind::Loop(..) => false,\n+            _ => {\n+                walk_expr(self, expr);\n+                return;\n+            },\n+        };\n+    }\n+}\n+\n+impl BreakVisitor {\n+    fn check<T>(&mut self, item: T, visit: fn(&mut Self, T)) -> bool {\n+        visit(self, item);\n+        std::mem::replace(&mut self.is_break, false)\n+    }\n+\n+    fn check_block(&mut self, block: &Block) -> bool {\n+        self.check(block, Self::visit_block)\n+    }\n+\n+    fn check_expr(&mut self, expr: &Expr) -> bool {\n+        self.check(expr, Self::visit_expr)\n+    }\n+\n+    fn check_stmt(&mut self, stmt: &Stmt) -> bool {\n+        self.check(stmt, Self::visit_stmt)\n+    }\n+}"}, {"sha": "737c8a9f8db43783313ab6d6fdfbfe0341709984", "filename": "tests/ui/redundant_else.rs", "status": "added", "additions": 154, "deletions": 0, "changes": 154, "blob_url": "https://github.com/rust-lang/rust/blob/50bca8af1dd29b8b376ec217c6c1ee16d6b69228/tests%2Fui%2Fredundant_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50bca8af1dd29b8b376ec217c6c1ee16d6b69228/tests%2Fui%2Fredundant_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_else.rs?ref=50bca8af1dd29b8b376ec217c6c1ee16d6b69228", "patch": "@@ -0,0 +1,154 @@\n+#![warn(clippy::redundant_else)]\n+#![allow(clippy::needless_return)]\n+\n+fn main() {\n+    loop {\n+        // break\n+        if foo() {\n+            println!(\"Love your neighbor;\");\n+            break;\n+        } else {\n+            println!(\"yet don't pull down your hedge.\");\n+        }\n+        // continue\n+        if foo() {\n+            println!(\"He that lies down with Dogs,\");\n+            continue;\n+        } else {\n+            println!(\"shall rise up with fleas.\");\n+        }\n+        // match block\n+        if foo() {\n+            match foo() {\n+                1 => break,\n+                _ => return,\n+            }\n+        } else {\n+            println!(\"You may delay, but time will not.\");\n+        }\n+    }\n+    // else if\n+    if foo() {\n+        return;\n+    } else if foo() {\n+        return;\n+    } else {\n+        println!(\"A fat kitchen makes a lean will.\");\n+    }\n+    // let binding outside of block\n+    let _ = {\n+        if foo() {\n+            return;\n+        } else {\n+            1\n+        }\n+    };\n+    // else if with let binding outside of block\n+    let _ = {\n+        if foo() {\n+            return;\n+        } else if foo() {\n+            return;\n+        } else {\n+            2\n+        }\n+    };\n+    // inside if let\n+    let _ = if let Some(1) = foo() {\n+        let _ = 1;\n+        if foo() {\n+            return;\n+        } else {\n+            1\n+        }\n+    } else {\n+        1\n+    };\n+\n+    //\n+    // non-lint cases\n+    //\n+\n+    // sanity check\n+    if foo() {\n+        let _ = 1;\n+    } else {\n+        println!(\"Who is wise? He that learns from every one.\");\n+    }\n+    // else if without else\n+    if foo() {\n+        return;\n+    } else if foo() {\n+        foo()\n+    };\n+    // nested if return\n+    if foo() {\n+        if foo() {\n+            return;\n+        }\n+    } else {\n+        foo()\n+    };\n+    // match with non-breaking branch\n+    if foo() {\n+        match foo() {\n+            1 => foo(),\n+            _ => return,\n+        }\n+    } else {\n+        println!(\"Three may keep a secret, if two of them are dead.\");\n+    }\n+    // let binding\n+    let _ = if foo() {\n+        return;\n+    } else {\n+        1\n+    };\n+    // assign\n+    let a;\n+    a = if foo() {\n+        return;\n+    } else {\n+        1\n+    };\n+    // assign-op\n+    a += if foo() {\n+        return;\n+    } else {\n+        1\n+    };\n+    // if return else if else\n+    if foo() {\n+        return;\n+    } else if foo() {\n+        1\n+    } else {\n+        2\n+    };\n+    // if else if return else\n+    if foo() {\n+        1\n+    } else if foo() {\n+        return;\n+    } else {\n+        2\n+    };\n+    // else if with let binding\n+    let _ = if foo() {\n+        return;\n+    } else if foo() {\n+        return;\n+    } else {\n+        2\n+    };\n+    // inside function call\n+    Box::new(if foo() {\n+        return;\n+    } else {\n+        1\n+    });\n+}\n+\n+fn foo<T>() -> T {\n+    unimplemented!(\"I'm not Santa Claus\")\n+}"}, {"sha": "9000cdc814b1fe7fe27ec966785d9d106851dd2f", "filename": "tests/ui/redundant_else.stderr", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/50bca8af1dd29b8b376ec217c6c1ee16d6b69228/tests%2Fui%2Fredundant_else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/50bca8af1dd29b8b376ec217c6c1ee16d6b69228/tests%2Fui%2Fredundant_else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_else.stderr?ref=50bca8af1dd29b8b376ec217c6c1ee16d6b69228", "patch": "@@ -0,0 +1,80 @@\n+error: redundant else block\n+  --> $DIR/redundant_else.rs:10:16\n+   |\n+LL |           } else {\n+   |  ________________^\n+LL | |             println!(\"yet don't pull down your hedge.\");\n+LL | |         }\n+   | |_________^\n+   |\n+   = note: `-D clippy::redundant-else` implied by `-D warnings`\n+   = help: remove the `else` block and move the contents out\n+\n+error: redundant else block\n+  --> $DIR/redundant_else.rs:17:16\n+   |\n+LL |           } else {\n+   |  ________________^\n+LL | |             println!(\"shall rise up with fleas.\");\n+LL | |         }\n+   | |_________^\n+   |\n+   = help: remove the `else` block and move the contents out\n+\n+error: redundant else block\n+  --> $DIR/redundant_else.rs:26:16\n+   |\n+LL |           } else {\n+   |  ________________^\n+LL | |             println!(\"You may delay, but time will not.\");\n+LL | |         }\n+   | |_________^\n+   |\n+   = help: remove the `else` block and move the contents out\n+\n+error: redundant else block\n+  --> $DIR/redundant_else.rs:35:12\n+   |\n+LL |       } else {\n+   |  ____________^\n+LL | |         println!(\"A fat kitchen makes a lean will.\");\n+LL | |     }\n+   | |_____^\n+   |\n+   = help: remove the `else` block and move the contents out\n+\n+error: redundant else block\n+  --> $DIR/redundant_else.rs:42:16\n+   |\n+LL |           } else {\n+   |  ________________^\n+LL | |             1\n+LL | |         }\n+   | |_________^\n+   |\n+   = help: remove the `else` block and move the contents out\n+\n+error: redundant else block\n+  --> $DIR/redundant_else.rs:52:16\n+   |\n+LL |           } else {\n+   |  ________________^\n+LL | |             2\n+LL | |         }\n+   | |_________^\n+   |\n+   = help: remove the `else` block and move the contents out\n+\n+error: redundant else block\n+  --> $DIR/redundant_else.rs:61:16\n+   |\n+LL |           } else {\n+   |  ________________^\n+LL | |             1\n+LL | |         }\n+   | |_________^\n+   |\n+   = help: remove the `else` block and move the contents out\n+\n+error: aborting due to 7 previous errors\n+"}]}