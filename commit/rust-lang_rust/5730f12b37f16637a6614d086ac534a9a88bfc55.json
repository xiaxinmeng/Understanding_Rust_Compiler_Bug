{"sha": "5730f12b37f16637a6614d086ac534a9a88bfc55", "node_id": "C_kwDOAAsO6NoAKDU3MzBmMTJiMzdmMTY2MzdhNjYxNGQwODZhYzUzNGE5YTg4YmZjNTU", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-08-03T08:15:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-03T08:15:49Z"}, "message": "Rollup merge of #99371 - ChrisDenton:simplify-gen-random-keys, r=thomcc\n\nRemove synchronization from Windows `hashmap_random_keys`\n\nUnfortunately using synchronization when generating hashmap keys can prevent it being used in `DllMain`.\n\n~~Fixes #99341~~", "tree": {"sha": "13f8477cf444a787261e6eb0951c77fafe9e5328", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13f8477cf444a787261e6eb0951c77fafe9e5328"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5730f12b37f16637a6614d086ac534a9a88bfc55", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi6i61CRBK7hj4Ov3rIwAAR/oIADyB6KwsEMC0/YQeE5r/TAqd\nupMZoypL2W4MK1I9I4WGER2t7I6htEd+zBqEFfw67Y4xH4QJlfbvWMciQA5J5+tq\n3fUF9BlnPjDLK/TRA6uWX2bldnTa66yVPV7dRw3RSfEA82y9d7ab5LjSAbrmu8Us\nB7a/VfLnxS1C2wiuHfBhvbAaUH/T7kP0TYWFQI+OZZCnBepoK1iKU1tmmm6PfvId\nO8uS6aXrX72gZlOeZywAWpNLdnQefkyBiY5Okrzpxn2/CA+jYlW0p/Y1kuFmYcgZ\nL0kir6kcj6WjjNbFw8oR04fuSVW3MqTegENC48uiYsojvMa+A+oraXxAlNoNpiM=\n=llqz\n-----END PGP SIGNATURE-----\n", "payload": "tree 13f8477cf444a787261e6eb0951c77fafe9e5328\nparent e141246cbbce2a6001f3181d3d0f661bbfd9c7ea\nparent 46673bb08ffa22f21287349d966d875038e41b37\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1659514549 +0530\ncommitter GitHub <noreply@github.com> 1659514549 +0530\n\nRollup merge of #99371 - ChrisDenton:simplify-gen-random-keys, r=thomcc\n\nRemove synchronization from Windows `hashmap_random_keys`\n\nUnfortunately using synchronization when generating hashmap keys can prevent it being used in `DllMain`.\n\n~~Fixes #99341~~\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5730f12b37f16637a6614d086ac534a9a88bfc55", "html_url": "https://github.com/rust-lang/rust/commit/5730f12b37f16637a6614d086ac534a9a88bfc55", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5730f12b37f16637a6614d086ac534a9a88bfc55/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e141246cbbce2a6001f3181d3d0f661bbfd9c7ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/e141246cbbce2a6001f3181d3d0f661bbfd9c7ea", "html_url": "https://github.com/rust-lang/rust/commit/e141246cbbce2a6001f3181d3d0f661bbfd9c7ea"}, {"sha": "46673bb08ffa22f21287349d966d875038e41b37", "url": "https://api.github.com/repos/rust-lang/rust/commits/46673bb08ffa22f21287349d966d875038e41b37", "html_url": "https://github.com/rust-lang/rust/commit/46673bb08ffa22f21287349d966d875038e41b37"}], "stats": {"total": 68, "additions": 8, "deletions": 60}, "files": [{"sha": "f8fd93a7398e1b75c35d255e30e24447461b9cc4", "filename": "library/std/src/sys/windows/rand.rs", "status": "modified", "additions": 8, "deletions": 60, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/5730f12b37f16637a6614d086ac534a9a88bfc55/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5730f12b37f16637a6614d086ac534a9a88bfc55/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Frand.rs?ref=5730f12b37f16637a6614d086ac534a9a88bfc55", "patch": "@@ -1,62 +1,9 @@\n use crate::io;\n use crate::mem;\n-use crate::sync;\n+use crate::ptr;\n use crate::sys::c;\n \n-/// The kinds of HashMap RNG that may be available\n-#[derive(Clone, Copy, Debug, PartialEq)]\n-enum HashMapRng {\n-    Preferred,\n-    Fallback,\n-}\n-\n pub fn hashmap_random_keys() -> (u64, u64) {\n-    match get_hashmap_rng() {\n-        HashMapRng::Preferred => {\n-            preferred_rng().expect(\"couldn't generate random bytes with preferred RNG\")\n-        }\n-        HashMapRng::Fallback => {\n-            fallback_rng().expect(\"couldn't generate random bytes with fallback RNG\")\n-        }\n-    }\n-}\n-\n-/// Returns the HashMap RNG that should be used\n-///\n-/// Panics if they are both broken\n-fn get_hashmap_rng() -> HashMapRng {\n-    // Assume that if the preferred RNG is broken the first time we use it, it likely means\n-    // that: the DLL has failed to load, there is no point to calling it over-and-over again,\n-    // and we should cache the result\n-    static VALUE: sync::OnceLock<HashMapRng> = sync::OnceLock::new();\n-    *VALUE.get_or_init(choose_hashmap_rng)\n-}\n-\n-/// Test whether we should use the preferred or fallback RNG\n-///\n-/// If the preferred RNG is successful, we choose it. Otherwise, if the fallback RNG is successful,\n-/// we choose that\n-///\n-/// Panics if both the preferred and the fallback RNG are both non-functional\n-fn choose_hashmap_rng() -> HashMapRng {\n-    let preferred_error = match preferred_rng() {\n-        Ok(_) => return HashMapRng::Preferred,\n-        Err(e) => e,\n-    };\n-\n-    match fallback_rng() {\n-        Ok(_) => return HashMapRng::Fallback,\n-        Err(fallback_error) => panic!(\n-            \"preferred RNG broken: `{}`, fallback RNG broken: `{}`\",\n-            preferred_error, fallback_error\n-        ),\n-    }\n-}\n-\n-/// Generate random numbers using the preferred RNG function (BCryptGenRandom)\n-fn preferred_rng() -> Result<(u64, u64), io::Error> {\n-    use crate::ptr;\n-\n     let mut v = (0, 0);\n     let ret = unsafe {\n         c::BCryptGenRandom(\n@@ -66,22 +13,23 @@ fn preferred_rng() -> Result<(u64, u64), io::Error> {\n             c::BCRYPT_USE_SYSTEM_PREFERRED_RNG,\n         )\n     };\n-\n-    if ret == 0 { Ok(v) } else { Err(io::Error::last_os_error()) }\n+    if ret != 0 { fallback_rng() } else { v }\n }\n \n /// Generate random numbers using the fallback RNG function (RtlGenRandom)\n #[cfg(not(target_vendor = \"uwp\"))]\n-fn fallback_rng() -> Result<(u64, u64), io::Error> {\n+#[inline(never)]\n+fn fallback_rng() -> (u64, u64) {\n     let mut v = (0, 0);\n     let ret =\n         unsafe { c::RtlGenRandom(&mut v as *mut _ as *mut u8, mem::size_of_val(&v) as c::ULONG) };\n \n-    if ret != 0 { Ok(v) } else { Err(io::Error::last_os_error()) }\n+    if ret != 0 { v } else { panic!(\"fallback RNG broken: {}\", io::Error::last_os_error()) }\n }\n \n /// We can't use RtlGenRandom with UWP, so there is no fallback\n #[cfg(target_vendor = \"uwp\")]\n-fn fallback_rng() -> Result<(u64, u64), io::Error> {\n-    Err(io::const_io_error!(io::ErrorKind::Unsupported, \"RtlGenRandom() not supported on UWP\"))\n+#[inline(never)]\n+fn fallback_rng() -> (u64, u64) {\n+    panic!(\"fallback RNG broken: RtlGenRandom() not supported on UWP\");\n }"}]}