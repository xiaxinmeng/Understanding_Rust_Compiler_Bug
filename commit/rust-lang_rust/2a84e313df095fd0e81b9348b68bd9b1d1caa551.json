{"sha": "2a84e313df095fd0e81b9348b68bd9b1d1caa551", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhODRlMzEzZGYwOTVmZDBlODFiOTM0OGI2OGJkOWIxZDFjYWE1NTE=", "commit": {"author": {"name": "Trevor Spiteri", "email": "tspiteri@ieee.org", "date": "2020-06-29T08:36:55Z"}, "committer": {"name": "Trevor Spiteri", "email": "tspiteri@ieee.org", "date": "2020-06-29T08:36:55Z"}, "message": "stabilize const_ascii_ctype_on_intrinsics", "tree": {"sha": "f5e12f2f2626c3fa5cee95b49488abb9cece337f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5e12f2f2626c3fa5cee95b49488abb9cece337f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a84e313df095fd0e81b9348b68bd9b1d1caa551", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a84e313df095fd0e81b9348b68bd9b1d1caa551", "html_url": "https://github.com/rust-lang/rust/commit/2a84e313df095fd0e81b9348b68bd9b1d1caa551", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a84e313df095fd0e81b9348b68bd9b1d1caa551/comments", "author": {"login": "tspiteri", "id": 18604588, "node_id": "MDQ6VXNlcjE4NjA0NTg4", "avatar_url": "https://avatars.githubusercontent.com/u/18604588?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tspiteri", "html_url": "https://github.com/tspiteri", "followers_url": "https://api.github.com/users/tspiteri/followers", "following_url": "https://api.github.com/users/tspiteri/following{/other_user}", "gists_url": "https://api.github.com/users/tspiteri/gists{/gist_id}", "starred_url": "https://api.github.com/users/tspiteri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tspiteri/subscriptions", "organizations_url": "https://api.github.com/users/tspiteri/orgs", "repos_url": "https://api.github.com/users/tspiteri/repos", "events_url": "https://api.github.com/users/tspiteri/events{/privacy}", "received_events_url": "https://api.github.com/users/tspiteri/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tspiteri", "id": 18604588, "node_id": "MDQ6VXNlcjE4NjA0NTg4", "avatar_url": "https://avatars.githubusercontent.com/u/18604588?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tspiteri", "html_url": "https://github.com/tspiteri", "followers_url": "https://api.github.com/users/tspiteri/followers", "following_url": "https://api.github.com/users/tspiteri/following{/other_user}", "gists_url": "https://api.github.com/users/tspiteri/gists{/gist_id}", "starred_url": "https://api.github.com/users/tspiteri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tspiteri/subscriptions", "organizations_url": "https://api.github.com/users/tspiteri/orgs", "repos_url": "https://api.github.com/users/tspiteri/repos", "events_url": "https://api.github.com/users/tspiteri/events{/privacy}", "received_events_url": "https://api.github.com/users/tspiteri/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "056d925167318636fcf975c8ffb81efebdc9bca3", "url": "https://api.github.com/repos/rust-lang/rust/commits/056d925167318636fcf975c8ffb81efebdc9bca3", "html_url": "https://github.com/rust-lang/rust/commit/056d925167318636fcf975c8ffb81efebdc9bca3"}], "stats": {"total": 63, "additions": 40, "deletions": 23}, "files": [{"sha": "ffffad253215ce7d8918950a21b1e54fa019ca13", "filename": "src/libcore/char/methods.rs", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/2a84e313df095fd0e81b9348b68bd9b1d1caa551/src%2Flibcore%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a84e313df095fd0e81b9348b68bd9b1d1caa551/src%2Flibcore%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar%2Fmethods.rs?ref=2a84e313df095fd0e81b9348b68bd9b1d1caa551", "patch": "@@ -1225,7 +1225,8 @@ impl char {\n     /// assert!(!esc.is_ascii_alphabetic());\n     /// ```\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n-    #[rustc_const_unstable(feature = \"const_ascii_ctype_on_intrinsics\", issue = \"68983\")]\n+    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.46.0\")]\n+    #[cfg_attr(bootstrap, allow_internal_unstable(const_if_match))]\n     #[inline]\n     pub const fn is_ascii_alphabetic(&self) -> bool {\n         match *self {\n@@ -1261,7 +1262,8 @@ impl char {\n     /// assert!(!esc.is_ascii_uppercase());\n     /// ```\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n-    #[rustc_const_unstable(feature = \"const_ascii_ctype_on_intrinsics\", issue = \"68983\")]\n+    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.46.0\")]\n+    #[cfg_attr(bootstrap, allow_internal_unstable(const_if_match))]\n     #[inline]\n     pub const fn is_ascii_uppercase(&self) -> bool {\n         match *self {\n@@ -1297,7 +1299,8 @@ impl char {\n     /// assert!(!esc.is_ascii_lowercase());\n     /// ```\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n-    #[rustc_const_unstable(feature = \"const_ascii_ctype_on_intrinsics\", issue = \"68983\")]\n+    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.46.0\")]\n+    #[cfg_attr(bootstrap, allow_internal_unstable(const_if_match))]\n     #[inline]\n     pub const fn is_ascii_lowercase(&self) -> bool {\n         match *self {\n@@ -1336,7 +1339,8 @@ impl char {\n     /// assert!(!esc.is_ascii_alphanumeric());\n     /// ```\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n-    #[rustc_const_unstable(feature = \"const_ascii_ctype_on_intrinsics\", issue = \"68983\")]\n+    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.46.0\")]\n+    #[cfg_attr(bootstrap, allow_internal_unstable(const_if_match))]\n     #[inline]\n     pub const fn is_ascii_alphanumeric(&self) -> bool {\n         match *self {\n@@ -1372,7 +1376,8 @@ impl char {\n     /// assert!(!esc.is_ascii_digit());\n     /// ```\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n-    #[rustc_const_unstable(feature = \"const_ascii_ctype_on_intrinsics\", issue = \"68983\")]\n+    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.46.0\")]\n+    #[cfg_attr(bootstrap, allow_internal_unstable(const_if_match))]\n     #[inline]\n     pub const fn is_ascii_digit(&self) -> bool {\n         match *self {\n@@ -1411,7 +1416,8 @@ impl char {\n     /// assert!(!esc.is_ascii_hexdigit());\n     /// ```\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n-    #[rustc_const_unstable(feature = \"const_ascii_ctype_on_intrinsics\", issue = \"68983\")]\n+    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.46.0\")]\n+    #[cfg_attr(bootstrap, allow_internal_unstable(const_if_match))]\n     #[inline]\n     pub const fn is_ascii_hexdigit(&self) -> bool {\n         match *self {\n@@ -1451,7 +1457,8 @@ impl char {\n     /// assert!(!esc.is_ascii_punctuation());\n     /// ```\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n-    #[rustc_const_unstable(feature = \"const_ascii_ctype_on_intrinsics\", issue = \"68983\")]\n+    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.46.0\")]\n+    #[cfg_attr(bootstrap, allow_internal_unstable(const_if_match))]\n     #[inline]\n     pub const fn is_ascii_punctuation(&self) -> bool {\n         match *self {\n@@ -1487,7 +1494,8 @@ impl char {\n     /// assert!(!esc.is_ascii_graphic());\n     /// ```\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n-    #[rustc_const_unstable(feature = \"const_ascii_ctype_on_intrinsics\", issue = \"68983\")]\n+    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.46.0\")]\n+    #[cfg_attr(bootstrap, allow_internal_unstable(const_if_match))]\n     #[inline]\n     pub const fn is_ascii_graphic(&self) -> bool {\n         match *self {\n@@ -1540,7 +1548,8 @@ impl char {\n     /// assert!(!esc.is_ascii_whitespace());\n     /// ```\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n-    #[rustc_const_unstable(feature = \"const_ascii_ctype_on_intrinsics\", issue = \"68983\")]\n+    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.46.0\")]\n+    #[cfg_attr(bootstrap, allow_internal_unstable(const_if_match))]\n     #[inline]\n     pub const fn is_ascii_whitespace(&self) -> bool {\n         match *self {\n@@ -1578,7 +1587,8 @@ impl char {\n     /// assert!(esc.is_ascii_control());\n     /// ```\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n-    #[rustc_const_unstable(feature = \"const_ascii_ctype_on_intrinsics\", issue = \"68983\")]\n+    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.46.0\")]\n+    #[cfg_attr(bootstrap, allow_internal_unstable(const_if_match))]\n     #[inline]\n     pub const fn is_ascii_control(&self) -> bool {\n         match *self {"}, {"sha": "54eb496fb6e66396ce755f226dfb516b12332785", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2a84e313df095fd0e81b9348b68bd9b1d1caa551/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a84e313df095fd0e81b9348b68bd9b1d1caa551/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=2a84e313df095fd0e81b9348b68bd9b1d1caa551", "patch": "@@ -70,7 +70,6 @@\n #![feature(bound_cloned)]\n #![feature(cfg_target_has_atomic)]\n #![feature(concat_idents)]\n-#![feature(const_ascii_ctype_on_intrinsics)]\n #![feature(const_alloc_layout)]\n #![feature(const_discriminant)]\n #![cfg_attr(bootstrap, feature(const_if_match))]"}, {"sha": "d3dbe2443ec1db6a7d62a1707b69068fafdc7c1e", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/2a84e313df095fd0e81b9348b68bd9b1d1caa551/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a84e313df095fd0e81b9348b68bd9b1d1caa551/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=2a84e313df095fd0e81b9348b68bd9b1d1caa551", "patch": "@@ -4671,7 +4671,8 @@ impl u8 {\n     /// assert!(!esc.is_ascii_alphabetic());\n     /// ```\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n-    #[rustc_const_unstable(feature = \"const_ascii_ctype_on_intrinsics\", issue = \"68983\")]\n+    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.46.0\")]\n+    #[cfg_attr(bootstrap, allow_internal_unstable(const_if_match))]\n     #[inline]\n     pub const fn is_ascii_alphabetic(&self) -> bool {\n         matches!(*self, b'A'..=b'Z' | b'a'..=b'z')\n@@ -4704,7 +4705,8 @@ impl u8 {\n     /// assert!(!esc.is_ascii_uppercase());\n     /// ```\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n-    #[rustc_const_unstable(feature = \"const_ascii_ctype_on_intrinsics\", issue = \"68983\")]\n+    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.46.0\")]\n+    #[cfg_attr(bootstrap, allow_internal_unstable(const_if_match))]\n     #[inline]\n     pub const fn is_ascii_uppercase(&self) -> bool {\n         matches!(*self, b'A'..=b'Z')\n@@ -4737,7 +4739,8 @@ impl u8 {\n     /// assert!(!esc.is_ascii_lowercase());\n     /// ```\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n-    #[rustc_const_unstable(feature = \"const_ascii_ctype_on_intrinsics\", issue = \"68983\")]\n+    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.46.0\")]\n+    #[cfg_attr(bootstrap, allow_internal_unstable(const_if_match))]\n     #[inline]\n     pub const fn is_ascii_lowercase(&self) -> bool {\n         matches!(*self, b'a'..=b'z')\n@@ -4773,7 +4776,8 @@ impl u8 {\n     /// assert!(!esc.is_ascii_alphanumeric());\n     /// ```\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n-    #[rustc_const_unstable(feature = \"const_ascii_ctype_on_intrinsics\", issue = \"68983\")]\n+    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.46.0\")]\n+    #[cfg_attr(bootstrap, allow_internal_unstable(const_if_match))]\n     #[inline]\n     pub const fn is_ascii_alphanumeric(&self) -> bool {\n         matches!(*self, b'0'..=b'9' | b'A'..=b'Z' | b'a'..=b'z')\n@@ -4806,7 +4810,8 @@ impl u8 {\n     /// assert!(!esc.is_ascii_digit());\n     /// ```\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n-    #[rustc_const_unstable(feature = \"const_ascii_ctype_on_intrinsics\", issue = \"68983\")]\n+    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.46.0\")]\n+    #[cfg_attr(bootstrap, allow_internal_unstable(const_if_match))]\n     #[inline]\n     pub const fn is_ascii_digit(&self) -> bool {\n         matches!(*self, b'0'..=b'9')\n@@ -4842,7 +4847,8 @@ impl u8 {\n     /// assert!(!esc.is_ascii_hexdigit());\n     /// ```\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n-    #[rustc_const_unstable(feature = \"const_ascii_ctype_on_intrinsics\", issue = \"68983\")]\n+    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.46.0\")]\n+    #[cfg_attr(bootstrap, allow_internal_unstable(const_if_match))]\n     #[inline]\n     pub const fn is_ascii_hexdigit(&self) -> bool {\n         matches!(*self, b'0'..=b'9' | b'A'..=b'F' | b'a'..=b'f')\n@@ -4879,7 +4885,8 @@ impl u8 {\n     /// assert!(!esc.is_ascii_punctuation());\n     /// ```\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n-    #[rustc_const_unstable(feature = \"const_ascii_ctype_on_intrinsics\", issue = \"68983\")]\n+    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.46.0\")]\n+    #[cfg_attr(bootstrap, allow_internal_unstable(const_if_match))]\n     #[inline]\n     pub const fn is_ascii_punctuation(&self) -> bool {\n         matches!(*self, b'!'..=b'/' | b':'..=b'@' | b'['..=b'`' | b'{'..=b'~')\n@@ -4912,7 +4919,8 @@ impl u8 {\n     /// assert!(!esc.is_ascii_graphic());\n     /// ```\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n-    #[rustc_const_unstable(feature = \"const_ascii_ctype_on_intrinsics\", issue = \"68983\")]\n+    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.46.0\")]\n+    #[cfg_attr(bootstrap, allow_internal_unstable(const_if_match))]\n     #[inline]\n     pub const fn is_ascii_graphic(&self) -> bool {\n         matches!(*self, b'!'..=b'~')\n@@ -4962,7 +4970,8 @@ impl u8 {\n     /// assert!(!esc.is_ascii_whitespace());\n     /// ```\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n-    #[rustc_const_unstable(feature = \"const_ascii_ctype_on_intrinsics\", issue = \"68983\")]\n+    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.46.0\")]\n+    #[cfg_attr(bootstrap, allow_internal_unstable(const_if_match))]\n     #[inline]\n     pub const fn is_ascii_whitespace(&self) -> bool {\n         matches!(*self, b'\\t' | b'\\n' | b'\\x0C' | b'\\r' | b' ')\n@@ -4997,7 +5006,8 @@ impl u8 {\n     /// assert!(esc.is_ascii_control());\n     /// ```\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n-    #[rustc_const_unstable(feature = \"const_ascii_ctype_on_intrinsics\", issue = \"68983\")]\n+    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.46.0\")]\n+    #[cfg_attr(bootstrap, allow_internal_unstable(const_if_match))]\n     #[inline]\n     pub const fn is_ascii_control(&self) -> bool {\n         matches!(*self, b'\\0'..=b'\\x1F' | b'\\x7F')"}, {"sha": "ef2f7322f2718941fb27767fb5d3b4efa84b1aee", "filename": "src/test/ui/consts/ascii_ctype.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a84e313df095fd0e81b9348b68bd9b1d1caa551/src%2Ftest%2Fui%2Fconsts%2Fascii_ctype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a84e313df095fd0e81b9348b68bd9b1d1caa551/src%2Ftest%2Fui%2Fconsts%2Fascii_ctype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fascii_ctype.rs?ref=2a84e313df095fd0e81b9348b68bd9b1d1caa551", "patch": "@@ -1,7 +1,5 @@\n // run-pass\n \n-#![feature(const_ascii_ctype_on_intrinsics)]\n-\n macro_rules! suite {\n     ( $( $fn:ident => [$a:ident, $A:ident, $nine:ident, $dot:ident, $space:ident]; )* ) => {\n         $("}]}