{"sha": "a96f8743014cb1e3c26ec6e6b45734fa537bda2e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5NmY4NzQzMDE0Y2IxZTNjMjZlYzZlNmI0NTczNGZhNTM3YmRhMmU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-15T06:39:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-15T06:39:11Z"}, "message": "Auto merge of #5345 - Toxyxer:add-lint-for-float-in-array-comparison, r=flip1995\n\nAdd lint for float in array comparison\n\nFixes #4277\nchangelog:\n- Added new handler for expression of index kind (e.g. `arr[i]`). It returns a constant when both array and index are constant, or when the array is constant and all values are equal.\n- Trigger float_cmp and float_cmp_const lint when comparing arrays. Allow for comparison when one of the arrays contains only zeros or infinities.\n- Added appropriate tests for such cases.", "tree": {"sha": "35a56db186926350c9a875e5576c040b0392a1f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/35a56db186926350c9a875e5576c040b0392a1f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a96f8743014cb1e3c26ec6e6b45734fa537bda2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a96f8743014cb1e3c26ec6e6b45734fa537bda2e", "html_url": "https://github.com/rust-lang/rust/commit/a96f8743014cb1e3c26ec6e6b45734fa537bda2e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a96f8743014cb1e3c26ec6e6b45734fa537bda2e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6cc07a85121107c3d268fc67671f1b3b4a529af", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6cc07a85121107c3d268fc67671f1b3b4a529af", "html_url": "https://github.com/rust-lang/rust/commit/c6cc07a85121107c3d268fc67671f1b3b4a529af"}, {"sha": "4449cc799b737327b773b900f3f9e3684373aaf5", "url": "https://api.github.com/repos/rust-lang/rust/commits/4449cc799b737327b773b900f3f9e3684373aaf5", "html_url": "https://github.com/rust-lang/rust/commit/4449cc799b737327b773b900f3f9e3684373aaf5"}], "stats": {"total": 271, "additions": 200, "deletions": 71}, "files": [{"sha": "b916071291581f13c0afade460ce54f653cae2ec", "filename": "clippy_lints/src/consts.rs", "status": "modified", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/a96f8743014cb1e3c26ec6e6b45734fa537bda2e/clippy_lints%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a96f8743014cb1e3c26ec6e6b45734fa537bda2e/clippy_lints%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconsts.rs?ref=a96f8743014cb1e3c26ec6e6b45734fa537bda2e", "patch": "@@ -268,6 +268,7 @@ impl<'c, 'cc> ConstEvalLateContext<'c, 'cc> {\n                     }\n                 }\n             },\n+            ExprKind::Index(ref arr, ref index) => self.index(arr, index),\n             // TODO: add other expressions.\n             _ => None,\n         }\n@@ -345,6 +346,31 @@ impl<'c, 'cc> ConstEvalLateContext<'c, 'cc> {\n         }\n     }\n \n+    fn index(&mut self, lhs: &'_ Expr<'_>, index: &'_ Expr<'_>) -> Option<Constant> {\n+        let lhs = self.expr(lhs);\n+        let index = self.expr(index);\n+\n+        match (lhs, index) {\n+            (Some(Constant::Vec(vec)), Some(Constant::Int(index))) => match vec[index as usize] {\n+                Constant::F32(x) => Some(Constant::F32(x)),\n+                Constant::F64(x) => Some(Constant::F64(x)),\n+                _ => None,\n+            },\n+            (Some(Constant::Vec(vec)), _) => {\n+                if !vec.is_empty() && vec.iter().all(|x| *x == vec[0]) {\n+                    match vec[0] {\n+                        Constant::F32(x) => Some(Constant::F32(x)),\n+                        Constant::F64(x) => Some(Constant::F64(x)),\n+                        _ => None,\n+                    }\n+                } else {\n+                    None\n+                }\n+            },\n+            _ => None,\n+        }\n+    }\n+\n     /// A block can only yield a constant if it only has one constant expression.\n     fn block(&mut self, block: &Block<'_>) -> Option<Constant> {\n         if block.stmts.is_empty() {\n@@ -492,6 +518,41 @@ pub fn miri_to_const(result: &ty::Const<'_>) -> Option<Constant> {\n             },\n             _ => None,\n         },\n+        ty::ConstKind::Value(ConstValue::ByRef { alloc, offset: _ }) => match result.ty.kind {\n+            ty::Array(sub_type, len) => match sub_type.kind {\n+                ty::Float(FloatTy::F32) => match miri_to_const(len) {\n+                    Some(Constant::Int(len)) => alloc\n+                        .inspect_with_undef_and_ptr_outside_interpreter(0..(4 * len as usize))\n+                        .to_owned()\n+                        .chunks(4)\n+                        .map(|chunk| {\n+                            Some(Constant::F32(f32::from_le_bytes(\n+                                chunk.try_into().expect(\"this shouldn't happen\"),\n+                            )))\n+                        })\n+                        .collect::<Option<Vec<Constant>>>()\n+                        .map(Constant::Vec),\n+                    _ => None,\n+                },\n+                ty::Float(FloatTy::F64) => match miri_to_const(len) {\n+                    Some(Constant::Int(len)) => alloc\n+                        .inspect_with_undef_and_ptr_outside_interpreter(0..(8 * len as usize))\n+                        .to_owned()\n+                        .chunks(8)\n+                        .map(|chunk| {\n+                            Some(Constant::F64(f64::from_le_bytes(\n+                                chunk.try_into().expect(\"this shouldn't happen\"),\n+                            )))\n+                        })\n+                        .collect::<Option<Vec<Constant>>>()\n+                        .map(Constant::Vec),\n+                    _ => None,\n+                },\n+                // FIXME: implement other array type conversions.\n+                _ => None,\n+            },\n+            _ => None,\n+        },\n         // FIXME: implement other conversions.\n         _ => None,\n     }"}, {"sha": "58a5a29eb16bc8f70bf793e749e537aaae7a6a52", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 59, "deletions": 17, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/a96f8743014cb1e3c26ec6e6b45734fa537bda2e/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a96f8743014cb1e3c26ec6e6b45734fa537bda2e/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=a96f8743014cb1e3c26ec6e6b45734fa537bda2e", "patch": "@@ -369,26 +369,28 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MiscLints {\n                             return;\n                         }\n                     }\n-                    let (lint, msg) = if is_named_constant(cx, left) || is_named_constant(cx, right) {\n-                        (FLOAT_CMP_CONST, \"strict comparison of `f32` or `f64` constant\")\n-                    } else {\n-                        (FLOAT_CMP, \"strict comparison of `f32` or `f64`\")\n-                    };\n+                    let is_comparing_arrays = is_array(cx, left) || is_array(cx, right);\n+                    let (lint, msg) = get_lint_and_message(\n+                        is_named_constant(cx, left) || is_named_constant(cx, right),\n+                        is_comparing_arrays,\n+                    );\n                     span_lint_and_then(cx, lint, expr.span, msg, |db| {\n                         let lhs = Sugg::hir(cx, left, \"..\");\n                         let rhs = Sugg::hir(cx, right, \"..\");\n \n-                        db.span_suggestion(\n-                            expr.span,\n-                            \"consider comparing them within some error\",\n-                            format!(\n-                                \"({}).abs() {} error\",\n-                                lhs - rhs,\n-                                if op == BinOpKind::Eq { '<' } else { '>' }\n-                            ),\n-                            Applicability::HasPlaceholders, // snippet\n-                        );\n-                        db.span_note(expr.span, \"`f32::EPSILON` and `f64::EPSILON` are available.\");\n+                        if !is_comparing_arrays {\n+                            db.span_suggestion(\n+                                expr.span,\n+                                \"consider comparing them within some error\",\n+                                format!(\n+                                    \"({}).abs() {} error\",\n+                                    lhs - rhs,\n+                                    if op == BinOpKind::Eq { '<' } else { '>' }\n+                                ),\n+                                Applicability::HasPlaceholders, // snippet\n+                            );\n+                        }\n+                        db.note(\"`f32::EPSILON` and `f64::EPSILON` are available for the `error`\");\n                     });\n                 } else if op == BinOpKind::Rem && is_integer_const(cx, right, 1) {\n                     span_lint(cx, MODULO_ONE, expr.span, \"any number modulo 1 will be 0\");\n@@ -440,6 +442,31 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MiscLints {\n     }\n }\n \n+fn get_lint_and_message(\n+    is_comparing_constants: bool,\n+    is_comparing_arrays: bool,\n+) -> (&'static rustc_lint::Lint, &'static str) {\n+    if is_comparing_constants {\n+        (\n+            FLOAT_CMP_CONST,\n+            if is_comparing_arrays {\n+                \"strict comparison of `f32` or `f64` constant arrays\"\n+            } else {\n+                \"strict comparison of `f32` or `f64` constant\"\n+            },\n+        )\n+    } else {\n+        (\n+            FLOAT_CMP,\n+            if is_comparing_arrays {\n+                \"strict comparison of `f32` or `f64` arrays\"\n+            } else {\n+                \"strict comparison of `f32` or `f64`\"\n+            },\n+        )\n+    }\n+}\n+\n fn check_nan(cx: &LateContext<'_, '_>, expr: &Expr<'_>, cmp_expr: &Expr<'_>) {\n     if_chain! {\n         if !in_constant(cx, cmp_expr.hir_id);\n@@ -475,6 +502,11 @@ fn is_allowed<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr<'_>) -> boo\n     match constant(cx, cx.tables, expr) {\n         Some((Constant::F32(f), _)) => f == 0.0 || f.is_infinite(),\n         Some((Constant::F64(f), _)) => f == 0.0 || f.is_infinite(),\n+        Some((Constant::Vec(vec), _)) => vec.iter().all(|f| match f {\n+            Constant::F32(f) => *f == 0.0 || (*f).is_infinite(),\n+            Constant::F64(f) => *f == 0.0 || (*f).is_infinite(),\n+            _ => false,\n+        }),\n         _ => false,\n     }\n }\n@@ -499,7 +531,17 @@ fn is_signum(cx: &LateContext<'_, '_>, expr: &Expr<'_>) -> bool {\n }\n \n fn is_float(cx: &LateContext<'_, '_>, expr: &Expr<'_>) -> bool {\n-    matches!(walk_ptrs_ty(cx.tables.expr_ty(expr)).kind, ty::Float(_))\n+    let value = &walk_ptrs_ty(cx.tables.expr_ty(expr)).kind;\n+\n+    if let ty::Array(arr_ty, _) = value {\n+        return matches!(arr_ty.kind, ty::Float(_));\n+    };\n+\n+    matches!(value, ty::Float(_))\n+}\n+\n+fn is_array(cx: &LateContext<'_, '_>, expr: &Expr<'_>) -> bool {\n+    matches!(&walk_ptrs_ty(cx.tables.expr_ty(expr)).kind, ty::Array(_, _))\n }\n \n fn check_to_owned(cx: &LateContext<'_, '_>, expr: &Expr<'_>, other: &Expr<'_>) {"}, {"sha": "9fa0e5f5c079b5e8bf2b8a0e3f2929f87b45d809", "filename": "tests/ui/float_cmp.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a96f8743014cb1e3c26ec6e6b45734fa537bda2e/tests%2Fui%2Ffloat_cmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a96f8743014cb1e3c26ec6e6b45734fa537bda2e/tests%2Fui%2Ffloat_cmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloat_cmp.rs?ref=a96f8743014cb1e3c26ec6e6b45734fa537bda2e", "patch": "@@ -1,5 +1,11 @@\n #![warn(clippy::float_cmp)]\n-#![allow(unused, clippy::no_effect, clippy::unnecessary_operation, clippy::cast_lossless)]\n+#![allow(\n+    unused,\n+    clippy::no_effect,\n+    clippy::unnecessary_operation,\n+    clippy::cast_lossless,\n+    clippy::many_single_char_names\n+)]\n \n use std::ops::Add;\n \n@@ -77,6 +83,21 @@ fn main() {\n \n     assert_eq!(a, b); // no errors\n \n+    const ZERO_ARRAY: [f32; 2] = [0.0, 0.0];\n+    const NON_ZERO_ARRAY: [f32; 2] = [0.0, 0.1];\n+\n+    let i = 0;\n+    let j = 1;\n+\n+    ZERO_ARRAY[i] == NON_ZERO_ARRAY[j]; // ok, because lhs is zero regardless of i\n+    NON_ZERO_ARRAY[i] == NON_ZERO_ARRAY[j];\n+\n+    let a1: [f32; 1] = [0.0];\n+    let a2: [f32; 1] = [1.1];\n+\n+    a1 == a2;\n+    a1[0] == a2[0];\n+\n     // no errors - comparing signums is ok\n     let x32 = 3.21f32;\n     1.23f32.signum() == x32.signum();"}, {"sha": "2d454e8e70de5ab173e7a0d511f1872f896cdac8", "filename": "tests/ui/float_cmp.stderr", "status": "modified", "additions": 30, "deletions": 18, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/a96f8743014cb1e3c26ec6e6b45734fa537bda2e/tests%2Fui%2Ffloat_cmp.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a96f8743014cb1e3c26ec6e6b45734fa537bda2e/tests%2Fui%2Ffloat_cmp.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloat_cmp.stderr?ref=a96f8743014cb1e3c26ec6e6b45734fa537bda2e", "patch": "@@ -1,39 +1,51 @@\n error: strict comparison of `f32` or `f64`\n-  --> $DIR/float_cmp.rs:59:5\n+  --> $DIR/float_cmp.rs:65:5\n    |\n LL |     ONE as f64 != 2.0;\n    |     ^^^^^^^^^^^^^^^^^ help: consider comparing them within some error: `(ONE as f64 - 2.0).abs() > error`\n    |\n    = note: `-D clippy::float-cmp` implied by `-D warnings`\n-note: `f32::EPSILON` and `f64::EPSILON` are available.\n-  --> $DIR/float_cmp.rs:59:5\n-   |\n-LL |     ONE as f64 != 2.0;\n-   |     ^^^^^^^^^^^^^^^^^\n+   = note: `f32::EPSILON` and `f64::EPSILON` are available for the `error`\n \n error: strict comparison of `f32` or `f64`\n-  --> $DIR/float_cmp.rs:64:5\n+  --> $DIR/float_cmp.rs:70:5\n    |\n LL |     x == 1.0;\n    |     ^^^^^^^^ help: consider comparing them within some error: `(x - 1.0).abs() < error`\n    |\n-note: `f32::EPSILON` and `f64::EPSILON` are available.\n-  --> $DIR/float_cmp.rs:64:5\n-   |\n-LL |     x == 1.0;\n-   |     ^^^^^^^^\n+   = note: `f32::EPSILON` and `f64::EPSILON` are available for the `error`\n \n error: strict comparison of `f32` or `f64`\n-  --> $DIR/float_cmp.rs:67:5\n+  --> $DIR/float_cmp.rs:73:5\n    |\n LL |     twice(x) != twice(ONE as f64);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider comparing them within some error: `(twice(x) - twice(ONE as f64)).abs() > error`\n    |\n-note: `f32::EPSILON` and `f64::EPSILON` are available.\n-  --> $DIR/float_cmp.rs:67:5\n+   = note: `f32::EPSILON` and `f64::EPSILON` are available for the `error`\n+\n+error: strict comparison of `f32` or `f64`\n+  --> $DIR/float_cmp.rs:93:5\n    |\n-LL |     twice(x) != twice(ONE as f64);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     NON_ZERO_ARRAY[i] == NON_ZERO_ARRAY[j];\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider comparing them within some error: `(NON_ZERO_ARRAY[i] - NON_ZERO_ARRAY[j]).abs() < error`\n+   |\n+   = note: `f32::EPSILON` and `f64::EPSILON` are available for the `error`\n+\n+error: strict comparison of `f32` or `f64` arrays\n+  --> $DIR/float_cmp.rs:98:5\n+   |\n+LL |     a1 == a2;\n+   |     ^^^^^^^^\n+   |\n+   = note: `f32::EPSILON` and `f64::EPSILON` are available for the `error`\n+\n+error: strict comparison of `f32` or `f64`\n+  --> $DIR/float_cmp.rs:99:5\n+   |\n+LL |     a1[0] == a2[0];\n+   |     ^^^^^^^^^^^^^^ help: consider comparing them within some error: `(a1[0] - a2[0]).abs() < error`\n+   |\n+   = note: `f32::EPSILON` and `f64::EPSILON` are available for the `error`\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 6 previous errors\n "}, {"sha": "dfc025558a2f430b35b1624b6cd37c5263dc76c4", "filename": "tests/ui/float_cmp_const.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a96f8743014cb1e3c26ec6e6b45734fa537bda2e/tests%2Fui%2Ffloat_cmp_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a96f8743014cb1e3c26ec6e6b45734fa537bda2e/tests%2Fui%2Ffloat_cmp_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloat_cmp_const.rs?ref=a96f8743014cb1e3c26ec6e6b45734fa537bda2e", "patch": "@@ -46,4 +46,17 @@ fn main() {\n     v != w;\n     v == 1.0;\n     v != 1.0;\n+\n+    const ZERO_ARRAY: [f32; 3] = [0.0, 0.0, 0.0];\n+    const ZERO_INF_ARRAY: [f32; 3] = [0.0, ::std::f32::INFINITY, ::std::f32::NEG_INFINITY];\n+    const NON_ZERO_ARRAY: [f32; 3] = [0.0, 0.1, 0.2];\n+    const NON_ZERO_ARRAY2: [f32; 3] = [0.2, 0.1, 0.0];\n+\n+    // no errors, zero and infinity values\n+    NON_ZERO_ARRAY[0] == NON_ZERO_ARRAY2[1]; // lhs is 0.0\n+    ZERO_ARRAY == NON_ZERO_ARRAY; // lhs is all zeros\n+    ZERO_INF_ARRAY == NON_ZERO_ARRAY; // lhs is all zeros or infinities\n+\n+    // has errors\n+    NON_ZERO_ARRAY == NON_ZERO_ARRAY2;\n }"}, {"sha": "19dc4a284b726744b219bd4aa9f2d55e40fa130a", "filename": "tests/ui/float_cmp_const.stderr", "status": "modified", "additions": 15, "deletions": 35, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/a96f8743014cb1e3c26ec6e6b45734fa537bda2e/tests%2Fui%2Ffloat_cmp_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a96f8743014cb1e3c26ec6e6b45734fa537bda2e/tests%2Fui%2Ffloat_cmp_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloat_cmp_const.stderr?ref=a96f8743014cb1e3c26ec6e6b45734fa537bda2e", "patch": "@@ -5,83 +5,63 @@ LL |     1f32 == ONE;\n    |     ^^^^^^^^^^^ help: consider comparing them within some error: `(1f32 - ONE).abs() < error`\n    |\n    = note: `-D clippy::float-cmp-const` implied by `-D warnings`\n-note: `f32::EPSILON` and `f64::EPSILON` are available.\n-  --> $DIR/float_cmp_const.rs:20:5\n-   |\n-LL |     1f32 == ONE;\n-   |     ^^^^^^^^^^^\n+   = note: `f32::EPSILON` and `f64::EPSILON` are available for the `error`\n \n error: strict comparison of `f32` or `f64` constant\n   --> $DIR/float_cmp_const.rs:21:5\n    |\n LL |     TWO == ONE;\n    |     ^^^^^^^^^^ help: consider comparing them within some error: `(TWO - ONE).abs() < error`\n    |\n-note: `f32::EPSILON` and `f64::EPSILON` are available.\n-  --> $DIR/float_cmp_const.rs:21:5\n-   |\n-LL |     TWO == ONE;\n-   |     ^^^^^^^^^^\n+   = note: `f32::EPSILON` and `f64::EPSILON` are available for the `error`\n \n error: strict comparison of `f32` or `f64` constant\n   --> $DIR/float_cmp_const.rs:22:5\n    |\n LL |     TWO != ONE;\n    |     ^^^^^^^^^^ help: consider comparing them within some error: `(TWO - ONE).abs() > error`\n    |\n-note: `f32::EPSILON` and `f64::EPSILON` are available.\n-  --> $DIR/float_cmp_const.rs:22:5\n-   |\n-LL |     TWO != ONE;\n-   |     ^^^^^^^^^^\n+   = note: `f32::EPSILON` and `f64::EPSILON` are available for the `error`\n \n error: strict comparison of `f32` or `f64` constant\n   --> $DIR/float_cmp_const.rs:23:5\n    |\n LL |     ONE + ONE == TWO;\n    |     ^^^^^^^^^^^^^^^^ help: consider comparing them within some error: `(ONE + ONE - TWO).abs() < error`\n    |\n-note: `f32::EPSILON` and `f64::EPSILON` are available.\n-  --> $DIR/float_cmp_const.rs:23:5\n-   |\n-LL |     ONE + ONE == TWO;\n-   |     ^^^^^^^^^^^^^^^^\n+   = note: `f32::EPSILON` and `f64::EPSILON` are available for the `error`\n \n error: strict comparison of `f32` or `f64` constant\n   --> $DIR/float_cmp_const.rs:25:5\n    |\n LL |     x as f32 == ONE;\n    |     ^^^^^^^^^^^^^^^ help: consider comparing them within some error: `(x as f32 - ONE).abs() < error`\n    |\n-note: `f32::EPSILON` and `f64::EPSILON` are available.\n-  --> $DIR/float_cmp_const.rs:25:5\n-   |\n-LL |     x as f32 == ONE;\n-   |     ^^^^^^^^^^^^^^^\n+   = note: `f32::EPSILON` and `f64::EPSILON` are available for the `error`\n \n error: strict comparison of `f32` or `f64` constant\n   --> $DIR/float_cmp_const.rs:28:5\n    |\n LL |     v == ONE;\n    |     ^^^^^^^^ help: consider comparing them within some error: `(v - ONE).abs() < error`\n    |\n-note: `f32::EPSILON` and `f64::EPSILON` are available.\n-  --> $DIR/float_cmp_const.rs:28:5\n-   |\n-LL |     v == ONE;\n-   |     ^^^^^^^^\n+   = note: `f32::EPSILON` and `f64::EPSILON` are available for the `error`\n \n error: strict comparison of `f32` or `f64` constant\n   --> $DIR/float_cmp_const.rs:29:5\n    |\n LL |     v != ONE;\n    |     ^^^^^^^^ help: consider comparing them within some error: `(v - ONE).abs() > error`\n    |\n-note: `f32::EPSILON` and `f64::EPSILON` are available.\n-  --> $DIR/float_cmp_const.rs:29:5\n+   = note: `f32::EPSILON` and `f64::EPSILON` are available for the `error`\n+\n+error: strict comparison of `f32` or `f64` constant arrays\n+  --> $DIR/float_cmp_const.rs:61:5\n    |\n-LL |     v != ONE;\n-   |     ^^^^^^^^\n+LL |     NON_ZERO_ARRAY == NON_ZERO_ARRAY2;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `f32::EPSILON` and `f64::EPSILON` are available for the `error`\n \n-error: aborting due to 7 previous errors\n+error: aborting due to 8 previous errors\n "}]}