{"sha": "677bdcb8a907d4e348e34c40479976e0f0446de8", "node_id": "C_kwDOAAsO6NoAKDY3N2JkY2I4YTkwN2Q0ZTM0OGUzNGM0MDQ3OTk3NmUwZjA0NDZkZTg", "commit": {"author": {"name": "Boxy", "email": "supbscripter@gmail.com", "date": "2022-11-24T11:25:19Z"}, "committer": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2022-11-25T09:28:44Z"}, "message": "only emit \"enable gce\" error if it would fix compile error", "tree": {"sha": "deaa8f33b578ccff32cdf64400e07bcf20878003", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/deaa8f33b578ccff32cdf64400e07bcf20878003"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/677bdcb8a907d4e348e34c40479976e0f0446de8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/677bdcb8a907d4e348e34c40479976e0f0446de8", "html_url": "https://github.com/rust-lang/rust/commit/677bdcb8a907d4e348e34c40479976e0f0446de8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/677bdcb8a907d4e348e34c40479976e0f0446de8/comments", "author": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ac5d91d63e0cd2da3f0535163638bd9fe3020b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ac5d91d63e0cd2da3f0535163638bd9fe3020b2", "html_url": "https://github.com/rust-lang/rust/commit/2ac5d91d63e0cd2da3f0535163638bd9fe3020b2"}], "stats": {"total": 25, "additions": 17, "deletions": 8}, "files": [{"sha": "e9e65336299e45770425b46122890cd0cc75f0bf", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/677bdcb8a907d4e348e34c40479976e0f0446de8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/677bdcb8a907d4e348e34c40479976e0f0446de8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=677bdcb8a907d4e348e34c40479976e0f0446de8", "patch": "@@ -52,7 +52,7 @@ pub fn is_const_evaluatable<'tcx>(\n         };\n \n         if !is_anon_ct {\n-            if satisfied_from_param_env(tcx, infcx, ct, param_env)? {\n+            if satisfied_from_param_env(tcx, infcx, ct, param_env) {\n                 return Ok(());\n             }\n             if ct.has_non_region_infer() {\n@@ -87,8 +87,14 @@ pub fn is_const_evaluatable<'tcx>(\n             // If we're evaluating a generic foreign constant, under a nightly compiler while\n             // the current crate does not enable `feature(generic_const_exprs)`, abort\n             // compilation with a useful error.\n-            Err(_) if tcx.sess.is_nightly_build()\n-                && let ty::ConstKind::Expr(_) = tcx.expand_abstract_consts(ct).kind() =>\n+            Err(_)\n+                if tcx.sess.is_nightly_build()\n+                    && satisfied_from_param_env(\n+                        tcx,\n+                        infcx,\n+                        tcx.expand_abstract_consts(ct),\n+                        param_env,\n+                    ) =>\n             {\n                 tcx.sess\n                     .struct_span_fatal(\n@@ -112,12 +118,15 @@ pub fn is_const_evaluatable<'tcx>(\n                 } else if uv.has_non_region_param() {\n                     NotConstEvaluatable::MentionsParam\n                 } else {\n-                    let guar = infcx.tcx.sess.delay_span_bug(span, format!(\"Missing value for constant, but no error reported?\"));\n+                    let guar = infcx.tcx.sess.delay_span_bug(\n+                        span,\n+                        format!(\"Missing value for constant, but no error reported?\"),\n+                    );\n                     NotConstEvaluatable::Error(guar)\n                 };\n \n                 Err(err)\n-            },\n+            }\n             Err(ErrorHandled::Reported(e)) => Err(NotConstEvaluatable::Error(e)),\n             Ok(_) => Ok(()),\n         }\n@@ -130,7 +139,7 @@ fn satisfied_from_param_env<'tcx>(\n     infcx: &InferCtxt<'tcx>,\n     ct: ty::Const<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n-) -> Result<bool, NotConstEvaluatable> {\n+) -> bool {\n     // Try to unify with each subtree in the AbstractConst to allow for\n     // `N + 1` being const evaluatable even if theres only a `ConstEvaluatable`\n     // predicate for `(N + 1) * 2`\n@@ -179,12 +188,12 @@ fn satisfied_from_param_env<'tcx>(\n \n                 if let ControlFlow::Break(()) = result {\n                     debug!(\"is_const_evaluatable: abstract_const ~~> ok\");\n-                    return Ok(true);\n+                    return true;\n                 }\n             }\n             _ => {} // don't care\n         }\n     }\n \n-    Ok(false)\n+    false\n }"}]}