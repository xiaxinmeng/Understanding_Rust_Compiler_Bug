{"sha": "57feb323f79d1d7f7dd6251d4606ba12a800953a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3ZmViMzIzZjc5ZDFkN2Y3ZGQ2MjUxZDQ2MDZiYTEyYTgwMDk1M2E=", "commit": {"author": {"name": "Florian Diebold", "email": "florian.diebold@freiheit.com", "date": "2020-07-03T15:39:06Z"}, "committer": {"name": "Florian Diebold", "email": "florian.diebold@freiheit.com", "date": "2020-07-03T16:17:06Z"}, "message": "Fix inference of indexing argument (partly)\n\nWe need to add the `T: Index<Arg>` obligation to be resolved later as well,\notherwise we can't make inferences about `Arg` later based on the `Index` impls.\n\nThis still doesn't fix indexing with integer variables though; there's a further\nproblem with Chalk floundering because of the variable, I think.", "tree": {"sha": "cd24fdeb7f4ee5cfb8c074c73721c53f2c3ccdd0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd24fdeb7f4ee5cfb8c074c73721c53f2c3ccdd0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/57feb323f79d1d7f7dd6251d4606ba12a800953a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/57feb323f79d1d7f7dd6251d4606ba12a800953a", "html_url": "https://github.com/rust-lang/rust/commit/57feb323f79d1d7f7dd6251d4606ba12a800953a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/57feb323f79d1d7f7dd6251d4606ba12a800953a/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dceec6176b49f886b94f1e149887fc9542702971", "url": "https://api.github.com/repos/rust-lang/rust/commits/dceec6176b49f886b94f1e149887fc9542702971", "html_url": "https://github.com/rust-lang/rust/commit/dceec6176b49f886b94f1e149887fc9542702971"}], "stats": {"total": 56, "additions": 48, "deletions": 8}, "files": [{"sha": "5c56c2eb09314753c042dad8eaf7a60bf08f113e", "filename": "crates/ra_hir_ty/src/infer.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/57feb323f79d1d7f7dd6251d4606ba12a800953a/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57feb323f79d1d7f7dd6251d4606ba12a800953a/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs?ref=57feb323f79d1d7f7dd6251d4606ba12a800953a", "patch": "@@ -28,8 +28,8 @@ use hir_def::{\n     path::{path, Path},\n     resolver::{HasResolver, Resolver, TypeNs},\n     type_ref::{Mutability, TypeRef},\n-    AdtId, AssocItemId, DefWithBodyId, EnumVariantId, FieldId, FunctionId, TraitId, TypeAliasId,\n-    VariantId,\n+    AdtId, AssocItemId, DefWithBodyId, EnumVariantId, FieldId, FunctionId, Lookup, TraitId,\n+    TypeAliasId, VariantId,\n };\n use hir_expand::{diagnostics::DiagnosticSink, name::name};\n use ra_arena::map::ArenaMap;\n@@ -376,17 +376,21 @@ impl<'a> InferenceContext<'a> {\n     ) -> Ty {\n         match assoc_ty {\n             Some(res_assoc_ty) => {\n+                let trait_ = match res_assoc_ty.lookup(self.db.upcast()).container {\n+                    hir_def::AssocContainerId::TraitId(trait_) => trait_,\n+                    _ => panic!(\"resolve_associated_type called with non-associated type\"),\n+                };\n                 let ty = self.table.new_type_var();\n-                let builder = Substs::build_for_def(self.db, res_assoc_ty)\n+                let substs = Substs::build_for_def(self.db, res_assoc_ty)\n                     .push(inner_ty)\n-                    .fill(params.iter().cloned());\n+                    .fill(params.iter().cloned())\n+                    .build();\n+                let trait_ref = TraitRef { trait_, substs: substs.clone() };\n                 let projection = ProjectionPredicate {\n                     ty: ty.clone(),\n-                    projection_ty: ProjectionTy {\n-                        associated_ty: res_assoc_ty,\n-                        parameters: builder.build(),\n-                    },\n+                    projection_ty: ProjectionTy { associated_ty: res_assoc_ty, parameters: substs },\n                 };\n+                self.obligations.push(Obligation::Trait(trait_ref));\n                 self.obligations.push(Obligation::Projection(projection));\n                 self.resolve_ty_as_possible(ty)\n             }"}, {"sha": "529d9e253e7a4aa23a8782a2e23a82560d54ef1c", "filename": "crates/ra_hir_ty/src/tests/traits.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/57feb323f79d1d7f7dd6251d4606ba12a800953a/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57feb323f79d1d7f7dd6251d4606ba12a800953a/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs?ref=57feb323f79d1d7f7dd6251d4606ba12a800953a", "patch": "@@ -540,6 +540,42 @@ mod ops {\n     );\n }\n \n+#[test]\n+fn infer_ops_index_int() {\n+    check_types(\n+        r#\"\n+//- /main.rs crate:main deps:std\n+struct Bar;\n+struct Foo;\n+\n+impl std::ops::Index<u32> for Bar {\n+    type Output = Foo;\n+}\n+\n+struct Range;\n+impl std::ops::Index<Range> for Bar {\n+    type Output = Bar;\n+}\n+\n+fn test() {\n+    let a = Bar;\n+    let b = a[1];\n+    b;\n+  //^ Foo\n+}\n+\n+//- /std.rs crate:std\n+#[prelude_import] use ops::*;\n+mod ops {\n+    #[lang = \"index\"]\n+    pub trait Index<Idx> {\n+        type Output;\n+    }\n+}\n+\"#,\n+    );\n+}\n+\n #[test]\n fn infer_ops_index_autoderef() {\n     check_types("}]}