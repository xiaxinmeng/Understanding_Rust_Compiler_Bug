{"sha": "e962870420fef19e8f23a299dbe7499aca1656a5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5NjI4NzA0MjBmZWYxOWU4ZjIzYTI5OWRiZTc0OTlhY2ExNjU2YTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-04-30T18:59:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-04-30T18:59:11Z"}, "message": "Auto merge of #24975 - michaelsproul:enum-diagnostics, r=pnkfelix\n\nExplanations for E0079, E0080, E0081, E0082, E0083 and E0084 as part of #24407.\r\n\r\nAll the errors concern the use of `#[repr(X)]` with enum types.\r\n\r\nI also updated the short description for E0079 so that it takes sign into account.", "tree": {"sha": "602ccefd526b81d0034fe9852f0da89f4481c0f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/602ccefd526b81d0034fe9852f0da89f4481c0f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e962870420fef19e8f23a299dbe7499aca1656a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e962870420fef19e8f23a299dbe7499aca1656a5", "html_url": "https://github.com/rust-lang/rust/commit/e962870420fef19e8f23a299dbe7499aca1656a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e962870420fef19e8f23a299dbe7499aca1656a5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2568a4d8c57d184326ee6974c0a769bbb93c1b22", "url": "https://api.github.com/repos/rust-lang/rust/commits/2568a4d8c57d184326ee6974c0a769bbb93c1b22", "html_url": "https://github.com/rust-lang/rust/commit/2568a4d8c57d184326ee6974c0a769bbb93c1b22"}, {"sha": "63e63218a123bbda1ed47cbe5e8bac62b7e48e97", "url": "https://api.github.com/repos/rust-lang/rust/commits/63e63218a123bbda1ed47cbe5e8bac62b7e48e97", "html_url": "https://github.com/rust-lang/rust/commit/63e63218a123bbda1ed47cbe5e8bac62b7e48e97"}], "stats": {"total": 114, "additions": 107, "deletions": 7}, "files": [{"sha": "6cb39c39659e874afc8ece2d4a481fc7b7e93cae", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e962870420fef19e8f23a299dbe7499aca1656a5/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e962870420fef19e8f23a299dbe7499aca1656a5/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=e962870420fef19e8f23a299dbe7499aca1656a5", "patch": "@@ -227,6 +227,31 @@ This error indicates that an attempt was made to divide by zero (or take the\n remainder of a zero divisor) in a static or constant expression.\n \"##,\n \n+E0079: r##\"\n+Enum variants which contain no data can be given a custom integer\n+representation. This error indicates that the value provided is not an\n+integer literal and is therefore invalid.\n+\"##,\n+\n+E0080: r##\"\n+This error indicates that the compiler was unable to sensibly evaluate an\n+integer expression provided as an enum discriminant. Attempting to divide by 0\n+or causing integer overflow are two ways to induce this error. For example:\n+\n+```\n+enum Enum {\n+    X = (1 << 500),\n+    Y = (1 / 0)\n+}\n+```\n+\n+Ensure that the expressions given can be evaluated as the desired integer type.\n+See the FFI section of the Reference for more information about using a custom\n+integer type:\n+\n+http://doc.rust-lang.org/reference.html#ffi-attributes\n+\"##,\n+\n E0133: r##\"\n Using unsafe functionality, such as dereferencing raw pointers and calling\n functions via FFI or marked as unsafe, is potentially dangerous and disallowed\n@@ -507,8 +532,6 @@ register_diagnostics! {\n     E0017,\n     E0019,\n     E0022,\n-    E0079, // enum variant: expected signed integer constant\n-    E0080, // enum variant: constant evaluation error\n     E0109,\n     E0110,\n     E0134,"}, {"sha": "5f9e282bc53fe51b8a32ac9838774e6975dae2f7", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e962870420fef19e8f23a299dbe7499aca1656a5/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e962870420fef19e8f23a299dbe7499aca1656a5/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=e962870420fef19e8f23a299dbe7499aca1656a5", "patch": "@@ -5732,8 +5732,10 @@ fn compute_enum_variants<'tcx>(cx: &ctxt<'tcx>,\n                     Ok(const_eval::const_int(val)) => current_disr_val = val as Disr,\n                     Ok(const_eval::const_uint(val)) => current_disr_val = val as Disr,\n                     Ok(_) => {\n+                        let sign_desc = if repr_type.is_signed() { \"signed\" } else { \"unsigned\" };\n                         span_err!(cx.sess, e.span, E0079,\n-                                  \"expected signed integer constant\");\n+                                  \"expected {} integer constant\",\n+                                  sign_desc);\n                         current_disr_val = attempt_fresh_value();\n                     }\n                     Err(ref err) => {"}, {"sha": "154d824e67846e83c214157542c7dc0772f414c6", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 79, "deletions": 4, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/e962870420fef19e8f23a299dbe7499aca1656a5/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e962870420fef19e8f23a299dbe7499aca1656a5/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=e962870420fef19e8f23a299dbe7499aca1656a5", "patch": "@@ -10,6 +10,85 @@\n \n #![allow(non_snake_case)]\n \n+register_long_diagnostics! {\n+\n+E0081: r##\"\n+Enum discriminants are used to differentiate enum variants stored in memory.\n+This error indicates that the same value was used for two or more variants,\n+making them impossible to tell apart.\n+\n+```\n+// Good.\n+enum Enum {\n+    P,\n+    X = 3,\n+    Y = 5\n+}\n+\n+// Bad.\n+enum Enum {\n+    P = 3,\n+    X = 3,\n+    Y = 5\n+}\n+```\n+\n+Note that variants without a manually specified discriminant are numbered from\n+top to bottom starting from 0, so clashes can occur with seemingly unrelated\n+variants.\n+\n+```\n+enum Bad {\n+    X,\n+    Y = 0\n+}\n+```\n+\n+Here `X` will have already been assigned the discriminant 0 by the time `Y` is\n+encountered, so a conflict occurs.\n+\"##,\n+\n+E0082: r##\"\n+The default type for enum discriminants is `isize`, but it can be adjusted by\n+adding the `repr` attribute to the enum declaration. This error indicates that\n+an integer literal given as a discriminant is not a member of the discriminant\n+type. For example:\n+\n+```\n+#[repr(u8)]\n+enum Thing {\n+    A = 1024,\n+    B = 5\n+}\n+```\n+\n+Here, 1024 lies outside the valid range for `u8`, so the discriminant for `A` is\n+invalid. You may want to change representation types to fix this, or else change\n+invalid discriminant values so that they fit within the existing type.\n+\n+Note also that without a representation manually defined, the compiler will\n+optimize by using the smallest integer type possible.\n+\"##,\n+\n+E0083: r##\"\n+At present, it's not possible to define a custom representation for an enum with\n+a single variant. As a workaround you can add a `Dummy` variant.\n+\n+See: https://github.com/rust-lang/rust/issues/10292\n+\"##,\n+\n+E0084: r##\"\n+It is impossible to define an integer type to be used to represent zero-variant\n+enum values because there are no zero-variant enum values. There is no way to\n+construct an instance of the following type using only safe code:\n+\n+```\n+enum Empty {}\n+```\n+\"##\n+\n+}\n+\n register_diagnostics! {\n     E0023,\n     E0024,\n@@ -51,10 +130,6 @@ register_diagnostics! {\n     E0075,\n     E0076,\n     E0077,\n-    E0081,\n-    E0082,\n-    E0083,\n-    E0084,\n     E0085,\n     E0086,\n     E0087,"}]}