{"sha": "17020244e476b5a40b0d2eb576574a0cf5543d80", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3MDIwMjQ0ZTQ3NmI1YTQwYjBkMmViNTc2NTc0YTBjZjU1NDNkODA=", "commit": {"author": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2012-11-08T20:35:14Z"}, "committer": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2012-11-08T20:35:14Z"}, "message": "Merge pull request #3923 from am0d/master\n\nFixes issue #3891", "tree": {"sha": "3efdf8ed44c57d095cf569ec6212635d5c777022", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3efdf8ed44c57d095cf569ec6212635d5c777022"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/17020244e476b5a40b0d2eb576574a0cf5543d80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/17020244e476b5a40b0d2eb576574a0cf5543d80", "html_url": "https://github.com/rust-lang/rust/commit/17020244e476b5a40b0d2eb576574a0cf5543d80", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/17020244e476b5a40b0d2eb576574a0cf5543d80/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f1523793735e2d75d6c620f0cc9741b59c47f5c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f1523793735e2d75d6c620f0cc9741b59c47f5c", "html_url": "https://github.com/rust-lang/rust/commit/9f1523793735e2d75d6c620f0cc9741b59c47f5c"}, {"sha": "062ac8cb97fef80a370ef884c468c66c4c9d30e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/062ac8cb97fef80a370ef884c468c66c4c9d30e3", "html_url": "https://github.com/rust-lang/rust/commit/062ac8cb97fef80a370ef884c468c66c4c9d30e3"}], "stats": {"total": 68, "additions": 63, "deletions": 5}, "files": [{"sha": "ea77949a45964461fa27820c65b0073e4f751031", "filename": "src/libstd/net_tcp.rs", "status": "modified", "additions": 63, "deletions": 5, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/17020244e476b5a40b0d2eb576574a0cf5543d80/src%2Flibstd%2Fnet_tcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17020244e476b5a40b0d2eb576574a0cf5543d80/src%2Flibstd%2Fnet_tcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_tcp.rs?ref=17020244e476b5a40b0d2eb576574a0cf5543d80", "patch": "@@ -48,11 +48,13 @@ pub fn TcpSocket(socket_data: @TcpSocketData) -> TcpSocket {\n  */\n struct TcpSocketBuf {\n     data: @TcpBufferedSocketData,\n+    mut end_of_stream: bool,\n }\n \n pub fn TcpSocketBuf(data: @TcpBufferedSocketData) -> TcpSocketBuf {\n     TcpSocketBuf {\n-        data: data\n+        data: data,\n+        end_of_stream: false\n     }\n }\n \n@@ -782,6 +784,7 @@ impl TcpSocketBuf: io::Reader {\n                 let err_data = read_result.get_err();\n \n                 if err_data.err_name == ~\"EOF\" {\n+                    self.end_of_stream = true;\n                     break;\n                 } else {\n                     debug!(\"ERROR sock_buf as io::reader.read err %? %?\",\n@@ -808,13 +811,21 @@ impl TcpSocketBuf: io::Reader {\n     }\n     fn read_byte() -> int {\n         let mut bytes = ~[0];\n-        if self.read(bytes, 1u) == 0 { fail } else { bytes[0] as int }\n+        if self.read(bytes, 1u) == 0 {\n+            if self.end_of_stream {\n+                -1\n+            } else {\n+                fail\n+            }\n+        } else {\n+            bytes[0] as int\n+        }\n     }\n     fn unread_byte(amt: int) {\n         self.data.buf.unshift(amt as u8);\n     }\n     fn eof() -> bool {\n-        false // noop\n+        self.end_of_stream\n     }\n     fn seek(dist: int, seek: io::SeekStyle) {\n         log(debug, fmt!(\"tcp_socket_buf seek stub %? %?\", dist, seek));\n@@ -871,7 +882,8 @@ fn tear_down_socket_data(socket_data: @TcpSocketData) unsafe {\n         uv::ll::close(stream_handle_ptr, tcp_socket_dtor_close_cb);\n     };\n     core::comm::recv(closed_po);\n-    log(debug, fmt!(\"about to free socket_data at %?\", socket_data));\n+    //the line below will most likely crash\n+    //log(debug, fmt!(\"about to free socket_data at %?\", socket_data));\n     rustrt::rust_uv_current_kernel_free(stream_handle_ptr\n                                        as *libc::c_void);\n     log(debug, ~\"exiting dtor for tcp_socket\");\n@@ -1268,7 +1280,10 @@ mod test {\n             fn test_gl_tcp_ipv4_server_client_reader_writer() {\n                 impl_gl_tcp_ipv4_server_client_reader_writer();\n             }\n-\n+            #[test]\n+            fn test_tcp_socket_impl_reader_handles_eof() {\n+                impl_tcp_socket_impl_reader_handles_eof();\n+            }\n         }\n         #[cfg(target_arch=\"x86\")]\n         mod impl32 {\n@@ -1541,6 +1556,49 @@ mod test {\n         */\n     }\n \n+    fn impl_tcp_socket_impl_reader_handles_eof() {\n+        use io::{Reader,ReaderUtil};\n+        let hl_loop = uv::global_loop::get();\n+        let server_ip = ~\"127.0.0.1\";\n+        let server_port = 10041u;\n+        let expected_req = ~\"GET /\";\n+        let expected_resp = ~\"A string\\nwith multiple lines\\n\";\n+\n+        let server_result_po = core::comm::Port::<~str>();\n+        let server_result_ch = core::comm::Chan(&server_result_po);\n+\n+        let cont_po = core::comm::Port::<()>();\n+        let cont_ch = core::comm::Chan(&cont_po);\n+        // server\n+        do task::spawn_sched(task::ManualThreads(1u)) {\n+            let actual_req = do comm::listen |server_ch| {\n+                run_tcp_test_server(\n+                    server_ip,\n+                    server_port,\n+                    expected_resp,\n+                    server_ch,\n+                    cont_ch,\n+                    hl_loop)\n+            };\n+            server_result_ch.send(actual_req);\n+        };\n+        core::comm::recv(cont_po);\n+        // client\n+        log(debug, ~\"server started, firing up client..\");\n+        let server_addr = ip::v4::parse_addr(server_ip);\n+        let conn_result = connect(server_addr, server_port, hl_loop);\n+        if result::is_err(&conn_result) {\n+            assert false;\n+        }\n+        let sock_buf = @socket_buf(result::unwrap(move conn_result));\n+        buf_write(sock_buf, expected_req);\n+\n+        let buf_reader = sock_buf as Reader;\n+        let actual_response = str::from_bytes(buf_reader.read_whole_stream());\n+        log(debug, fmt!(\"Actual response: %s\", actual_response));\n+        assert expected_resp == actual_response;\n+    }\n+\n     fn buf_write<W:io::Writer>(w: &W, val: &str) {\n         log(debug, fmt!(\"BUF_WRITE: val len %?\", str::len(val)));\n         do str::byte_slice(val) |b_slice| {"}]}