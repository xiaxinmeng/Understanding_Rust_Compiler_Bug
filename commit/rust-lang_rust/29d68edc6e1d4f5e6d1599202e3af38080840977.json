{"sha": "29d68edc6e1d4f5e6d1599202e3af38080840977", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5ZDY4ZWRjNmUxZDRmNWU2ZDE1OTkyMDJlM2FmMzgwODA4NDA5Nzc=", "commit": {"author": {"name": "Fabian Drinck", "email": "fabian.drinck@rwth-aachen.de", "date": "2019-02-22T14:07:18Z"}, "committer": {"name": "Fabian Drinck", "email": "fabian.drinck@rwth-aachen.de", "date": "2019-03-30T21:37:02Z"}, "message": "Add lint for redundant imports\n\nCo-authored-by: Stephan Schauerte <stephan.schauerte@gmail.com>", "tree": {"sha": "78d6e5b50557b629ee0aca05e392046abed0cc0e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78d6e5b50557b629ee0aca05e392046abed0cc0e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29d68edc6e1d4f5e6d1599202e3af38080840977", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29d68edc6e1d4f5e6d1599202e3af38080840977", "html_url": "https://github.com/rust-lang/rust/commit/29d68edc6e1d4f5e6d1599202e3af38080840977", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29d68edc6e1d4f5e6d1599202e3af38080840977/comments", "author": {"login": "fabric-and-ink", "id": 13430670, "node_id": "MDQ6VXNlcjEzNDMwNjcw", "avatar_url": "https://avatars.githubusercontent.com/u/13430670?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fabric-and-ink", "html_url": "https://github.com/fabric-and-ink", "followers_url": "https://api.github.com/users/fabric-and-ink/followers", "following_url": "https://api.github.com/users/fabric-and-ink/following{/other_user}", "gists_url": "https://api.github.com/users/fabric-and-ink/gists{/gist_id}", "starred_url": "https://api.github.com/users/fabric-and-ink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fabric-and-ink/subscriptions", "organizations_url": "https://api.github.com/users/fabric-and-ink/orgs", "repos_url": "https://api.github.com/users/fabric-and-ink/repos", "events_url": "https://api.github.com/users/fabric-and-ink/events{/privacy}", "received_events_url": "https://api.github.com/users/fabric-and-ink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fabric-and-ink", "id": 13430670, "node_id": "MDQ6VXNlcjEzNDMwNjcw", "avatar_url": "https://avatars.githubusercontent.com/u/13430670?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fabric-and-ink", "html_url": "https://github.com/fabric-and-ink", "followers_url": "https://api.github.com/users/fabric-and-ink/followers", "following_url": "https://api.github.com/users/fabric-and-ink/following{/other_user}", "gists_url": "https://api.github.com/users/fabric-and-ink/gists{/gist_id}", "starred_url": "https://api.github.com/users/fabric-and-ink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fabric-and-ink/subscriptions", "organizations_url": "https://api.github.com/users/fabric-and-ink/orgs", "repos_url": "https://api.github.com/users/fabric-and-ink/repos", "events_url": "https://api.github.com/users/fabric-and-ink/events{/privacy}", "received_events_url": "https://api.github.com/users/fabric-and-ink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "befeeb7c083c9e5edddc86563cc461185d897a13", "url": "https://api.github.com/repos/rust-lang/rust/commits/befeeb7c083c9e5edddc86563cc461185d897a13", "html_url": "https://github.com/rust-lang/rust/commit/befeeb7c083c9e5edddc86563cc461185d897a13"}], "stats": {"total": 130, "additions": 129, "deletions": 1}, "files": [{"sha": "615bc0af37a158f58302a3d00b6c367354bc7950", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/29d68edc6e1d4f5e6d1599202e3af38080840977/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29d68edc6e1d4f5e6d1599202e3af38080840977/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=29d68edc6e1d4f5e6d1599202e3af38080840977", "patch": "@@ -392,6 +392,12 @@ declare_lint! {\n     \"nested occurrence of `impl Trait` type\"\n }\n \n+declare_lint! {\n+    pub REDUNDANT_IMPORT,\n+    Warn,\n+    \"redundant import\"\n+}\n+\n /// Does nothing as a lint pass, but registers some `Lint`s\n /// that are used by other parts of the compiler.\n #[derive(Copy, Clone)]"}, {"sha": "b40b68b085348ceed3b97bbe11d940534786b1fa", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 92, "deletions": 1, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/29d68edc6e1d4f5e6d1599202e3af38080840977/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29d68edc6e1d4f5e6d1599202e3af38080840977/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=29d68edc6e1d4f5e6d1599202e3af38080840977", "patch": "@@ -7,14 +7,19 @@ use crate::{NameBinding, NameBindingKind, ToNameBinding, PathResult, PrivacyErro\n use crate::{Resolver, Segment};\n use crate::{names_to_string, module_to_string};\n use crate::{resolve_error, ResolutionError, Suggestion};\n+use crate::ModuleKind;\n use crate::macros::ParentScope;\n \n use errors::Applicability;\n \n use rustc_data_structures::ptr_key::PtrKey;\n use rustc::ty;\n use rustc::lint::builtin::BuiltinLintDiagnostics;\n-use rustc::lint::builtin::{DUPLICATE_MACRO_EXPORTS, PUB_USE_OF_PRIVATE_EXTERN_CRATE};\n+use rustc::lint::builtin::{\n+    DUPLICATE_MACRO_EXPORTS,\n+    PUB_USE_OF_PRIVATE_EXTERN_CRATE,\n+    REDUNDANT_IMPORT,\n+};\n use rustc::hir::def_id::{CrateNum, DefId};\n use rustc::hir::def::*;\n use rustc::session::DiagnosticMessageId;\n@@ -1227,10 +1232,96 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n             import[ns] = Some(PathResolution::new(def));\n         });\n \n+        self.check_for_redundant_imports(\n+            ident,\n+            directive,\n+            source_bindings,\n+            target_bindings,\n+            target,\n+        );\n+\n         debug!(\"(resolving single import) successfully resolved import\");\n         None\n     }\n \n+    fn check_for_redundant_imports(\n+        &mut self,\n+        ident: Ident,\n+        directive: &'b ImportDirective<'b>,\n+        source_bindings: &PerNS<Cell<Result<&'b NameBinding<'b>, Determinacy>>>,\n+        target_bindings: &PerNS<Cell<Option<&'b NameBinding<'b>>>>,\n+        target: Ident,\n+    ) {\n+        // Check if we are at the root of a macro expansion and skip if we are.\n+        if directive.parent_scope.expansion != Mark::root() {\n+            return;\n+        }\n+\n+        if let ModuleKind::Def(_, _) = directive.parent_scope.module.kind {\n+            return;\n+        }\n+\n+        let mut is_redundant = PerNS {\n+            value_ns: None,\n+            type_ns: None,\n+            macro_ns: None,\n+        };\n+\n+        let mut redundant_span = PerNS {\n+            value_ns: None,\n+            type_ns: None,\n+            macro_ns: None,\n+        };\n+\n+        self.per_ns(|this, ns| if let Some(binding) = source_bindings[ns].get().ok() {\n+            if binding.def() == Def::Err {\n+                return;\n+            }\n+\n+            let orig_blacklisted_binding = mem::replace(\n+                &mut this.blacklisted_binding,\n+                target_bindings[ns].get()\n+            );\n+\n+            match this.early_resolve_ident_in_lexical_scope(\n+                target,\n+                ScopeSet::Import(ns),\n+                &directive.parent_scope,\n+                false,\n+                false,\n+                directive.span,\n+            ) {\n+                Ok(other_binding) => {\n+                    is_redundant[ns] = Some(binding.def() == other_binding.def());\n+                    redundant_span[ns] = Some(other_binding.span);\n+                }\n+                Err(_) => is_redundant[ns] = Some(false)\n+            }\n+\n+            this.blacklisted_binding = orig_blacklisted_binding;\n+        });\n+\n+        if !is_redundant.is_empty() &&\n+            is_redundant.present_items().all(|is_redundant| is_redundant)\n+        {\n+            self.session.buffer_lint(\n+                REDUNDANT_IMPORT,\n+                directive.id,\n+                directive.span,\n+                &format!(\"the item `{}` is imported redundantly\", ident),\n+            );\n+\n+            for span in redundant_span.present_items() {\n+                self.session.buffer_lint(\n+                    REDUNDANT_IMPORT,\n+                    directive.id,\n+                    span,\n+                    \"another import\"\n+                );\n+            }\n+        }\n+    }\n+\n     fn resolve_glob_import(&mut self, directive: &'b ImportDirective<'b>) {\n         let module = match directive.imported_module.get().unwrap() {\n             ModuleOrUniformRoot::Module(module) => module,"}, {"sha": "50d4d30625a6a9d4206196d43d532ed3035d4bda", "filename": "src/test/ui/lint/use-redundant.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/29d68edc6e1d4f5e6d1599202e3af38080840977/src%2Ftest%2Fui%2Flint%2Fuse-redundant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29d68edc6e1d4f5e6d1599202e3af38080840977/src%2Ftest%2Fui%2Flint%2Fuse-redundant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fuse-redundant.rs?ref=29d68edc6e1d4f5e6d1599202e3af38080840977", "patch": "@@ -0,0 +1,17 @@\n+// compile-pass\n+\n+use crate::foo::Bar; //~ WARNING first import\n+\n+mod foo {\n+    pub type Bar = i32;\n+}\n+\n+fn baz() -> Bar {\n+    3\n+}\n+\n+fn main() {\n+    use crate::foo::Bar; //~ WARNING redundant import\n+    let _a: Bar = 3;\n+    baz();\n+}"}, {"sha": "6a6becc5e615bb8d759def5d253e5494e11383d5", "filename": "src/test/ui/lint/use-redundant.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/29d68edc6e1d4f5e6d1599202e3af38080840977/src%2Ftest%2Fui%2Flint%2Fuse-redundant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29d68edc6e1d4f5e6d1599202e3af38080840977/src%2Ftest%2Fui%2Flint%2Fuse-redundant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fuse-redundant.stderr?ref=29d68edc6e1d4f5e6d1599202e3af38080840977", "patch": "@@ -0,0 +1,14 @@\n+warning: the item `Bar` is imported redundantly\n+  --> $DIR/use-redundant.rs:14:9\n+   |\n+LL |     use crate::foo::Bar; //~ WARNING redundant import\n+   |         ^^^^^^^^^^^^^^^\n+   |\n+   = note: #[warn(redundant_import)] on by default\n+\n+warning: another import\n+  --> $DIR/use-redundant.rs:3:5\n+   |\n+LL | use crate::foo::Bar; //~ WARNING first import\n+   |     ^^^^^^^^^^^^^^^\n+"}]}