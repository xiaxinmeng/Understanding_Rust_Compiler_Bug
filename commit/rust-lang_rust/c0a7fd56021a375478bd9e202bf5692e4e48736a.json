{"sha": "c0a7fd56021a375478bd9e202bf5692e4e48736a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwYTdmZDU2MDIxYTM3NTQ3OGJkOWUyMDJiZjU2OTJlNGU0ODczNmE=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-01-08T11:50:15Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-01-08T11:50:15Z"}, "message": "Remove debugging hint until we can actuall use `note:`", "tree": {"sha": "a87628c7586ee35706b5da69f6a8dcf88da44bbe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a87628c7586ee35706b5da69f6a8dcf88da44bbe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0a7fd56021a375478bd9e202bf5692e4e48736a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0a7fd56021a375478bd9e202bf5692e4e48736a", "html_url": "https://github.com/rust-lang/rust/commit/c0a7fd56021a375478bd9e202bf5692e4e48736a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0a7fd56021a375478bd9e202bf5692e4e48736a/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aec175e0deb39d35a9b5c0f329141c4b22930e01", "url": "https://api.github.com/repos/rust-lang/rust/commits/aec175e0deb39d35a9b5c0f329141c4b22930e01", "html_url": "https://github.com/rust-lang/rust/commit/aec175e0deb39d35a9b5c0f329141c4b22930e01"}], "stats": {"total": 51, "additions": 15, "deletions": 36}, "files": [{"sha": "7bb7dd6cec11b52bdf8a165dec3d97fc8498df30", "filename": "src/stacked_borrows.rs", "status": "modified", "additions": 15, "deletions": 36, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/c0a7fd56021a375478bd9e202bf5692e4e48736a/src%2Fstacked_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0a7fd56021a375478bd9e202bf5692e4e48736a/src%2Fstacked_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows.rs?ref=c0a7fd56021a375478bd9e202bf5692e4e48736a", "patch": "@@ -4,7 +4,6 @@\n use std::cell::RefCell;\n use std::collections::{HashMap, HashSet};\n use std::fmt;\n-use std::fmt::Write;\n use std::num::NonZeroU64;\n use std::rc::Rc;\n \n@@ -279,13 +278,10 @@ impl<'tcx> Stack {\n         if let Some(call) = item.protector {\n             if global.is_active(call) {\n                 if let Some(tag) = tag {\n-                    return Err(err_ub_experimental(\n-                        tag,\n-                        format!(\n-                            \"not granting access to tag {:?} because incompatible item is protected: {:?}\",\n-                            tag, item\n-                        ),\n-                    ));\n+                    throw_ub!(UbExperimental(format!(\n+                        \"not granting access to tag {:?} because incompatible item is protected: {:?}\",\n+                        tag, item\n+                    )));\n                 } else {\n                     throw_ub!(UbExperimental(format!(\n                         \"deallocating while item is protected: {:?}\",\n@@ -303,12 +299,9 @@ impl<'tcx> Stack {\n         // Two main steps: Find granting item, remove incompatible items above.\n \n         // Step 1: Find granting item.\n-        let granting_idx = self.find_granting(access, tag).ok_or_else(|| {\n-            err_ub_experimental(\n-                tag,\n-                format!(\"no item granting {} to tag {:?} found in borrow stack.\", access, tag),\n-            )\n-        })?;\n+        let granting_idx = self.find_granting(access, tag).ok_or_else(|| err_ub!(UbExperimental(\n+            format!(\"no item granting {} to tag {:?} found in borrow stack.\", access, tag),\n+        )))?;\n \n         // Step 2: Remove incompatible items above them.  Make sure we do not remove protected\n         // items.  Behavior differs for reads and writes.\n@@ -347,13 +340,10 @@ impl<'tcx> Stack {\n     /// active protectors at all because we will remove all items.\n     fn dealloc(&mut self, tag: Tag, global: &GlobalState) -> InterpResult<'tcx> {\n         // Step 1: Find granting item.\n-        self.find_granting(AccessKind::Write, tag).ok_or_else(|| {\n-            err_ub_experimental(\n-                tag,format!(\n-                \"no item granting write access for deallocation to tag {:?} found in borrow stack\",\n-                tag,\n-            ))\n-        })?;\n+        self.find_granting(AccessKind::Write, tag).ok_or_else(|| err_ub!(UbExperimental(format!(\n+            \"no item granting write access for deallocation to tag {:?} found in borrow stack\",\n+            tag,\n+        ))))?;\n \n         // Step 2: Remove all items.  Also checks for protectors.\n         for item in self.borrows.drain(..).rev() {\n@@ -374,14 +364,10 @@ impl<'tcx> Stack {\n         // Now we figure out which item grants our parent (`derived_from`) this kind of access.\n         // We use that to determine where to put the new item.\n         let granting_idx = self.find_granting(access, derived_from)\n-            .ok_or_else(||\n-            err_ub_experimental(\n-                derived_from,\n-                format!(\n-                    \"trying to reborrow for {:?}, but parent tag {:?} does not have an appropriate item in the borrow stack\",\n-                    new.perm, derived_from,\n-                ),\n-            ))?;\n+            .ok_or_else(|| err_ub!(UbExperimental(format!(\n+                \"trying to reborrow for {:?}, but parent tag {:?} does not have an appropriate item in the borrow stack\",\n+                new.perm, derived_from,\n+            ))))?;\n \n         // Compute where to put the new item.\n         // Either way, we ensure that we insert the new item in a way such that between\n@@ -647,10 +633,3 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     }\n }\n \n-fn err_ub_experimental(tag: Tag, mut msg: String) -> InterpErrorInfo<'static> {\n-    if let Tag::Tagged(id) = tag {\n-        // FIXME: do not add this message when the flag is already set\n-        write!(msg, \" Rerun with `-Zmiri-track-pointer-tag={}` for more information\", id).unwrap();\n-    }\n-    err_ub!(UbExperimental(msg)).into()\n-}"}]}