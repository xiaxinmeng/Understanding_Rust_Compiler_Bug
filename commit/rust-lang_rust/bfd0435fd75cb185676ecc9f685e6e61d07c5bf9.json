{"sha": "bfd0435fd75cb185676ecc9f685e6e61d07c5bf9", "node_id": "C_kwDOAAsO6NoAKGJmZDA0MzVmZDc1Y2IxODU2NzZlY2M5ZjY4NWU2ZTYxZDA3YzViZjk", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-04-18T15:51:39Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-07-20T20:12:12Z"}, "message": "Introduce AnonymousLifetimeRib::Elided and use it for implied 'static.", "tree": {"sha": "f5791cf7a21d9dda50e728d3617bf7c2bf15552b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5791cf7a21d9dda50e728d3617bf7c2bf15552b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bfd0435fd75cb185676ecc9f685e6e61d07c5bf9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bfd0435fd75cb185676ecc9f685e6e61d07c5bf9", "html_url": "https://github.com/rust-lang/rust/commit/bfd0435fd75cb185676ecc9f685e6e61d07c5bf9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bfd0435fd75cb185676ecc9f685e6e61d07c5bf9/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7468c60f8dbf5feb23ad840b174d7e57113a846", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7468c60f8dbf5feb23ad840b174d7e57113a846", "html_url": "https://github.com/rust-lang/rust/commit/a7468c60f8dbf5feb23ad840b174d7e57113a846"}], "stats": {"total": 32, "additions": 29, "deletions": 3}, "files": [{"sha": "5f81179526bf7fe70f03cbb1250b9713a1bc22f0", "filename": "compiler/rustc_hir/src/def.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bfd0435fd75cb185676ecc9f685e6e61d07c5bf9/compiler%2Frustc_hir%2Fsrc%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfd0435fd75cb185676ecc9f685e6e61d07c5bf9/compiler%2Frustc_hir%2Fsrc%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fdef.rs?ref=bfd0435fd75cb185676ecc9f685e6e61d07c5bf9", "patch": "@@ -713,7 +713,7 @@ impl<Id> Res<Id> {\n }\n \n /// Resolution for a lifetime appearing in a type.\n-#[derive(Copy, Clone, Debug)]\n+#[derive(Copy, Clone, Debug, PartialEq, Eq)]\n pub enum LifetimeRes {\n     /// Successfully linked the lifetime to a generic parameter.\n     Param {"}, {"sha": "3ee155483ccab9be8efaab82c17fe6a4fb747908", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/bfd0435fd75cb185676ecc9f685e6e61d07c5bf9/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfd0435fd75cb185676ecc9f685e6e61d07c5bf9/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=bfd0435fd75cb185676ecc9f685e6e61d07c5bf9", "patch": "@@ -259,6 +259,9 @@ enum LifetimeRibKind {\n \n     /// Pass responsibility to `resolve_lifetime` code for all cases.\n     AnonymousPassThrough(NodeId, /* in_fn_return */ bool),\n+\n+    /// Replace all anonymous lifetimes by provided lifetime.\n+    Elided(LifetimeRes),\n }\n \n #[derive(Copy, Clone, Debug)]\n@@ -580,7 +583,9 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n     fn visit_anon_const(&mut self, constant: &'ast AnonConst) {\n         // We deal with repeat expressions explicitly in `resolve_expr`.\n         self.with_lifetime_rib(LifetimeRibKind::AnonConst, |this| {\n-            this.resolve_anon_const(constant, IsRepeatExpr::No);\n+            this.with_lifetime_rib(LifetimeRibKind::Elided(LifetimeRes::Static), |this| {\n+                this.resolve_anon_const(constant, IsRepeatExpr::No);\n+            })\n         })\n     }\n     fn visit_expr(&mut self, expr: &'ast Expr) {\n@@ -1052,6 +1057,7 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n                             LifetimeRibKind::AnonymousPassThrough(..)\n                             | LifetimeRibKind::AnonymousCreateParameter { .. }\n                             | LifetimeRibKind::AnonymousReportError\n+                            | LifetimeRibKind::Elided(_)\n                             | LifetimeRibKind::AnonConst\n                             | LifetimeRibKind::ConstGeneric => {}\n                         }\n@@ -1408,6 +1414,13 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                                     | LifetimeRibKind::AnonymousCreateParameter { .. } => {\n                                         Some(LifetimeUseSet::One { use_span: ident.span, use_ctxt })\n                                     }\n+                                    // Only report if eliding the lifetime would have the same\n+                                    // semantics.\n+                                    LifetimeRibKind::Elided(r) => Some(if res == r {\n+                                        LifetimeUseSet::One { use_span: ident.span, use_ctxt }\n+                                    } else {\n+                                        LifetimeUseSet::Many\n+                                    }),\n                                     LifetimeRibKind::Generics { .. }\n                                     | LifetimeRibKind::ConstGeneric\n                                     | LifetimeRibKind::AnonConst => None,\n@@ -1496,6 +1509,10 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                     );\n                     return;\n                 }\n+                LifetimeRibKind::Elided(res) => {\n+                    self.record_lifetime_res(lifetime.id, res);\n+                    return;\n+                }\n                 LifetimeRibKind::Item => break,\n                 LifetimeRibKind::Generics { .. }\n                 | LifetimeRibKind::ConstGeneric\n@@ -1632,6 +1649,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                             break;\n                         }\n                         LifetimeRibKind::AnonymousCreateParameter { .. }\n+                        | LifetimeRibKind::Elided(_)\n                         | LifetimeRibKind::Generics { .. }\n                         | LifetimeRibKind::ConstGeneric\n                         | LifetimeRibKind::AnonConst => {}\n@@ -1690,6 +1708,12 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                         }\n                         break;\n                     }\n+                    LifetimeRibKind::Elided(res) => {\n+                        for id in node_ids {\n+                            self.record_lifetime_res(id, res);\n+                        }\n+                        break;\n+                    }\n                     // `LifetimeRes::Error`, which would usually be used in the case of\n                     // `ReportError`, is unsuitable here, as we don't emit an error yet.  Instead,\n                     // we simply resolve to an implicit lifetime, which will be checked later, at\n@@ -3581,7 +3605,9 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             ExprKind::Repeat(ref elem, ref ct) => {\n                 self.visit_expr(elem);\n                 self.with_lifetime_rib(LifetimeRibKind::AnonConst, |this| {\n-                    this.resolve_anon_const(ct, IsRepeatExpr::Yes)\n+                    this.with_lifetime_rib(LifetimeRibKind::Elided(LifetimeRes::Static), |this| {\n+                        this.resolve_anon_const(ct, IsRepeatExpr::Yes)\n+                    })\n                 });\n             }\n             ExprKind::ConstBlock(ref ct) => {"}]}