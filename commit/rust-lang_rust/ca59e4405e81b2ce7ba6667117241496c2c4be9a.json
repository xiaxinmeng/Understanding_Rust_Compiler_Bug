{"sha": "ca59e4405e81b2ce7ba6667117241496c2c4be9a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhNTllNDQwNWU4MWIyY2U3YmE2NjY3MTE3MjQxNDk2YzJjNGJlOWE=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-08-15T14:17:59Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-08-15T14:17:59Z"}, "message": "Reduce verbosity of output", "tree": {"sha": "4624bbeb2142f96bb5c442f29a0e48dc4e8e328e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4624bbeb2142f96bb5c442f29a0e48dc4e8e328e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca59e4405e81b2ce7ba6667117241496c2c4be9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca59e4405e81b2ce7ba6667117241496c2c4be9a", "html_url": "https://github.com/rust-lang/rust/commit/ca59e4405e81b2ce7ba6667117241496c2c4be9a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca59e4405e81b2ce7ba6667117241496c2c4be9a/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3760040b2d206607b51cf8ccfdf71da3fdd2787", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3760040b2d206607b51cf8ccfdf71da3fdd2787", "html_url": "https://github.com/rust-lang/rust/commit/a3760040b2d206607b51cf8ccfdf71da3fdd2787"}], "stats": {"total": 38, "additions": 29, "deletions": 9}, "files": [{"sha": "82e613ff1c6cab66bd8506864379ffac7906df3c", "filename": "build.sh", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ca59e4405e81b2ce7ba6667117241496c2c4be9a/build.sh", "raw_url": "https://github.com/rust-lang/rust/raw/ca59e4405e81b2ce7ba6667117241496c2c4be9a/build.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build.sh?ref=ca59e4405e81b2ce7ba6667117241496c2c4be9a", "patch": "@@ -23,6 +23,8 @@ extract_data() {\n RUSTC=\"rustc -Zcodegen-backend=$(pwd)/target/debug/librustc_codegen_cranelift.$dylib_ext -L crate=target/out --out-dir target/out\"\n \n rm -r target/out\n+mkdir -p target/out/mir\n+mkdir -p target/out/clif\n \n SHOULD_CODEGEN=1 $RUSTC examples/mini_core.rs --crate-name mini_core --crate-type lib &&\n extract_data libmini_core.rlib mini_core.o &&\n@@ -39,4 +41,3 @@ gcc target/out/mini_core.o target/out/mini_core_hello_world.o -o target/out/mini\n \n $RUSTC target/libcore/src/libcore/lib.rs --color=always --crate-type lib -Cincremental=target/incremental 2>&1 | (head -n 20; echo \"====\"; tail -n 1000)\n cat target/libcore/log.txt | sort | uniq -c | grep -v \"rval unsize move\" | grep -v \"rval len\"\n-"}, {"sha": "7e19a4fba4f3d774790c3b4576b523a6eafb1116", "filename": "src/abi.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca59e4405e81b2ce7ba6667117241496c2c4be9a/src%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca59e4405e81b2ce7ba6667117241496c2c4be9a/src%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi.rs?ref=ca59e4405e81b2ce7ba6667117241496c2c4be9a", "patch": "@@ -242,7 +242,6 @@ pub fn codegen_fn_prelude<'a, 'tcx: 'a>(\n     start_ebb: Ebb,\n ) {\n     let ssa_analyzed = crate::analyze::analyze(fx);\n-    fx.tcx.sess.warn(&format!(\"ssa {:?}\", ssa_analyzed));\n \n     match fx.self_sig().abi {\n         Abi::Rust | Abi::RustCall => {}\n@@ -301,6 +300,9 @@ pub fn codegen_fn_prelude<'a, 'tcx: 'a>(\n \n     fx.bcx.switch_to_block(start_ebb);\n \n+    fx.top_nop = Some(fx.bcx.ins().nop());\n+    fx.add_global_comment(format!(\"ssa {:?}\", ssa_analyzed));\n+\n     match output_pass_mode {\n         PassMode::NoPass => {\n             let null = fx.bcx.ins().iconst(types::I64, 0);"}, {"sha": "c3034164de05bb184ffa3456d005ec35cbf28d98", "filename": "src/base.rs", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ca59e4405e81b2ce7ba6667117241496c2c4be9a/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca59e4405e81b2ce7ba6667117241496c2c4be9a/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=ca59e4405e81b2ce7ba6667117241496c2c4be9a", "patch": "@@ -1,5 +1,14 @@\n use crate::prelude::*;\n \n+struct PrintOnPanic(String);\n+impl Drop for PrintOnPanic {\n+    fn drop(&mut self) {\n+        if ::std::thread::panicking() {\n+            println!(\"{}\", self.0);\n+        }\n+    }\n+}\n+\n pub fn trans_mono_item<'a, 'tcx: 'a>(cx: &mut CodegenCx<'a, 'tcx>, mono_item: MonoItem<'tcx>) {\n     let tcx = cx.tcx;\n     let context = &mut cx.context;\n@@ -12,11 +21,9 @@ pub fn trans_mono_item<'a, 'tcx: 'a>(cx: &mut CodegenCx<'a, 'tcx>, mono_item: Mo\n             } => {\n                 let mut mir = ::std::io::Cursor::new(Vec::new());\n                 ::rustc_mir::util::write_mir_pretty(tcx, Some(def_id), &mut mir).unwrap();\n-                tcx.sess.warn(&format!(\n-                    \"{:?}:\\n\\n{}\",\n-                    inst,\n-                    String::from_utf8_lossy(&mir.into_inner())\n-                ));\n+                let mir_file_name = \"target/out/mir/\".to_string() + &format!(\"{:?}\", def_id).replace('/', \"@\");\n+                ::std::fs::write(mir_file_name, mir.into_inner()).unwrap();\n+                let _print_guard = PrintOnPanic(format!(\"{:?}\", inst));\n \n                 let res = each_module!(cx, |(ccx, m)| trans_fn(tcx, *m, ccx, context, inst));\n                 if let Some(func_id) = res.jit {\n@@ -84,6 +91,8 @@ fn trans_fn<'a, 'tcx: 'a>(\n         local_map: HashMap::new(),\n         comments: HashMap::new(),\n         constants,\n+\n+        top_nop: None,\n     };\n \n     // Step 6. Codegen function\n@@ -96,7 +105,8 @@ fn trans_fn<'a, 'tcx: 'a>(\n     let mut writer = crate::pretty_clif::CommentWriter(fx.comments);\n     let mut cton = String::new();\n     ::cranelift::codegen::write::decorate_function(&mut writer, &mut cton, &func, None).unwrap();\n-    tcx.sess.warn(&cton);\n+    let clif_file_name = \"target/out/clif/\".to_string() + &tcx.symbol_name(instance).as_str();\n+    ::std::fs::write(clif_file_name, cton.as_bytes()).unwrap();\n \n     // Step 8. Verify function\n     verify_func(tcx, writer, &func);\n@@ -235,7 +245,7 @@ fn trans_stmt<'a, 'tcx: 'a>(\n     cur_ebb: Ebb,\n     stmt: &Statement<'tcx>,\n ) {\n-    fx.tcx.sess.warn(&format!(\"stmt {:?}\", stmt));\n+    let _print_guard = PrintOnPanic(format!(\"stmt {:?}\", stmt));\n \n     let inst = fx.bcx.func.layout.last_inst(cur_ebb).unwrap();\n     fx.add_comment(inst, format!(\"{:?}\", stmt));"}, {"sha": "d18b6bf43b2d13ace911a87c85e6b280e11e7103", "filename": "src/common.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ca59e4405e81b2ce7ba6667117241496c2c4be9a/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca59e4405e81b2ce7ba6667117241496c2c4be9a/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=ca59e4405e81b2ce7ba6667117241496c2c4be9a", "patch": "@@ -361,6 +361,9 @@ pub struct FunctionCx<'a, 'tcx: 'a, B: Backend + 'a> {\n     pub local_map: HashMap<Local, CPlace<'tcx>>,\n     pub comments: HashMap<Inst, String>,\n     pub constants: &'a mut crate::constant::ConstantCx,\n+\n+    /// add_global_comment inserts a comment here\n+    pub top_nop: Option<Inst>,\n }\n \n impl<'a, 'tcx: 'a, B: Backend + 'a> fmt::Debug for FunctionCx<'a, 'tcx, B> {"}, {"sha": "c6cc521f90d1614ce7f5d5f218647b6010bd6a80", "filename": "src/pretty_clif.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca59e4405e81b2ce7ba6667117241496c2c4be9a/src%2Fpretty_clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca59e4405e81b2ce7ba6667117241496c2c4be9a/src%2Fpretty_clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpretty_clif.rs?ref=ca59e4405e81b2ce7ba6667117241496c2c4be9a", "patch": "@@ -35,6 +35,10 @@ impl FuncWriter for CommentWriter {\n }\n \n impl<'a, 'tcx: 'a, B: Backend + 'a> FunctionCx<'a, 'tcx, B> {\n+    pub fn add_global_comment<'s, S: Into<Cow<'s, str>>>(&mut self, comment: S) {\n+        self.add_comment(self.top_nop.expect(\"fx.top_nop not yet set\"), comment)\n+    }\n+\n     pub fn add_comment<'s, S: Into<Cow<'s, str>>>(&mut self, inst: Inst, comment: S) {\n         use std::collections::hash_map::Entry;\n         match self.comments.entry(inst) {"}]}