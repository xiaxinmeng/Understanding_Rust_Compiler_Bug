{"sha": "dfa94d150555da40780413d7f1a1378565208c99", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmYTk0ZDE1MDU1NWRhNDA3ODA0MTNkN2YxYTEzNzg1NjUyMDhjOTk=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2019-03-29T13:07:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-03-29T13:07:19Z"}, "message": "Merge pull request #3480 from sinkuu/cleanup\n\nCleanups", "tree": {"sha": "07b82be6117e43183bd1b7802e658fbd65dc4ad3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07b82be6117e43183bd1b7802e658fbd65dc4ad3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dfa94d150555da40780413d7f1a1378565208c99", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcnhiHCRBK7hj4Ov3rIwAAdHIIAIwcLyrl4uzCP7Mo2Yj3Sxfr\nfpEY/jKnn2MTQ+MaaBcglx/SA4vBSRJ8vTXUfHf9kqnIhzQXFhxalazusce/d49j\nPDuDJGHVkt8K7BXj4JxGHTID7fzf8YjKfPCiGljrZ0X+KFN3lqR2n83u4Sa/Ds3g\n/OXxoq0fTzSI/o4SDYpIGKq+71hNCgWgqCk4hiZLBH7tmpkGKiudCZnZp3A+kxxG\nOY+P1uMxDq8/CUOznuD9YLMH6A78HHoPRLLube1i7AV780O+qjow0J3jbXYEQBYX\n1psrK/NdzWBuEUubEnB/wUMbwp7A6NltStpCpzx8xe7wmJQnAIHL0GnLLNZrgOA=\n=gpGf\n-----END PGP SIGNATURE-----\n", "payload": "tree 07b82be6117e43183bd1b7802e658fbd65dc4ad3\nparent f70ce003052096896adc88c7998315fe502b6069\nparent 9fda93777965f0023d055c947e8f2dc301dbc62f\nauthor Seiichi Uchida <seuchida@gmail.com> 1553864839 +0900\ncommitter GitHub <noreply@github.com> 1553864839 +0900\n\nMerge pull request #3480 from sinkuu/cleanup\n\nCleanups"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dfa94d150555da40780413d7f1a1378565208c99", "html_url": "https://github.com/rust-lang/rust/commit/dfa94d150555da40780413d7f1a1378565208c99", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dfa94d150555da40780413d7f1a1378565208c99/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f70ce003052096896adc88c7998315fe502b6069", "url": "https://api.github.com/repos/rust-lang/rust/commits/f70ce003052096896adc88c7998315fe502b6069", "html_url": "https://github.com/rust-lang/rust/commit/f70ce003052096896adc88c7998315fe502b6069"}, {"sha": "9fda93777965f0023d055c947e8f2dc301dbc62f", "url": "https://api.github.com/repos/rust-lang/rust/commits/9fda93777965f0023d055c947e8f2dc301dbc62f", "html_url": "https://github.com/rust-lang/rust/commit/9fda93777965f0023d055c947e8f2dc301dbc62f"}], "stats": {"total": 136, "additions": 60, "deletions": 76}, "files": [{"sha": "832cae898efdb479be5b4ccfba5b12d07ee417fe", "filename": "src/chains.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfa94d150555da40780413d7f1a1378565208c99/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfa94d150555da40780413d7f1a1378565208c99/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=dfa94d150555da40780413d7f1a1378565208c99", "patch": "@@ -550,7 +550,7 @@ impl<'a> ChainFormatterShared<'a> {\n         let almost_total = if extendable {\n             prev_last_line_width\n         } else {\n-            self.rewrites.iter().fold(0, |a, b| a + b.len())\n+            self.rewrites.iter().map(|a| a.len()).sum()\n         } + last.tries;\n         let one_line_budget = if self.child_count == 1 {\n             shape.width"}, {"sha": "87c6b65865bd3bfbdc6555851463d44af085669a", "filename": "src/comment.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfa94d150555da40780413d7f1a1378565208c99/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfa94d150555da40780413d7f1a1378565208c99/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=dfa94d150555da40780413d7f1a1378565208c99", "patch": "@@ -591,7 +591,7 @@ impl<'a> CommentRewrite<'a> {\n             ) {\n                 Some(s) => self.result.push_str(&Self::join_block(\n                     &s,\n-                    &format!(\"{}{}\", &self.comment_line_separator, ib.line_start),\n+                    &format!(\"{}{}\", self.comment_line_separator, ib.line_start),\n                 )),\n                 None => self.result.push_str(&Self::join_block(\n                     &ib.original_block_as_string(),\n@@ -634,7 +634,7 @@ impl<'a> CommentRewrite<'a> {\n             ) {\n                 Some(s) => self.result.push_str(&Self::join_block(\n                     &s,\n-                    &format!(\"{}{}\", &self.comment_line_separator, ib.line_start),\n+                    &format!(\"{}{}\", self.comment_line_separator, ib.line_start),\n                 )),\n                 None => self.result.push_str(&Self::join_block(\n                     &ib.original_block_as_string(),"}, {"sha": "7c4298dcf1c099b59e149c666780ad58110b900f", "filename": "src/config/config_type.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dfa94d150555da40780413d7f1a1378565208c99/src%2Fconfig%2Fconfig_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfa94d150555da40780413d7f1a1378565208c99/src%2Fconfig%2Fconfig_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Fconfig_type.rs?ref=dfa94d150555da40780413d7f1a1378565208c99", "patch": "@@ -236,10 +236,7 @@ macro_rules! create_config {\n                 use std::cmp;\n                 let max = 0;\n                 $( let max = cmp::max(max, stringify!($i).len()+1); )+\n-                let mut space_str = String::with_capacity(max);\n-                for _ in 0..max {\n-                    space_str.push(' ');\n-                }\n+                let space_str = \" \".repeat(max);\n                 writeln!(out, \"Configuration Options:\").unwrap();\n                 $(\n                     if $stb || include_unstable {"}, {"sha": "67d2355c93844233e88f6a75cbb730bb25a606d8", "filename": "src/config/file_lines.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/dfa94d150555da40780413d7f1a1378565208c99/src%2Fconfig%2Ffile_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfa94d150555da40780413d7f1a1378565208c99/src%2Fconfig%2Ffile_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Ffile_lines.rs?ref=dfa94d150555da40780413d7f1a1378565208c99", "patch": "@@ -156,20 +156,18 @@ fn normalize_ranges(ranges: &mut HashMap<FileName, Vec<Range>>) {\n     for ranges in ranges.values_mut() {\n         ranges.sort();\n         let mut result = vec![];\n-        {\n-            let mut iter = ranges.iter_mut().peekable();\n-            while let Some(next) = iter.next() {\n-                let mut next = *next;\n-                while let Some(&&mut peek) = iter.peek() {\n-                    if let Some(merged) = next.merge(peek) {\n-                        iter.next().unwrap();\n-                        next = merged;\n-                    } else {\n-                        break;\n-                    }\n+        let mut iter = ranges.iter_mut().peekable();\n+        while let Some(next) = iter.next() {\n+            let mut next = *next;\n+            while let Some(&&mut peek) = iter.peek() {\n+                if let Some(merged) = next.merge(peek) {\n+                    iter.next().unwrap();\n+                    next = merged;\n+                } else {\n+                    break;\n                 }\n-                result.push(next)\n             }\n+            result.push(next)\n         }\n         *ranges = result;\n     }"}, {"sha": "4a4647a56635889677df75894fcfc259438ffec0", "filename": "src/config/mod.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/dfa94d150555da40780413d7f1a1378565208c99/src%2Fconfig%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfa94d150555da40780413d7f1a1378565208c99/src%2Fconfig%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Fmod.rs?ref=dfa94d150555da40780413d7f1a1378565208c99", "patch": "@@ -257,16 +257,14 @@ impl Config {\n         let parsed: ::toml::Value = toml\n             .parse()\n             .map_err(|e| format!(\"Could not parse TOML: {}\", e))?;\n-        let mut err: String = String::new();\n-        {\n-            let table = parsed\n-                .as_table()\n-                .ok_or(String::from(\"Parsed config was not table\"))?;\n-            for key in table.keys() {\n-                if !Config::is_valid_name(key) {\n-                    let msg = &format!(\"Warning: Unknown configuration option `{}`\\n\", key);\n-                    err.push_str(msg)\n-                }\n+        let mut err = String::new();\n+        let table = parsed\n+            .as_table()\n+            .ok_or(String::from(\"Parsed config was not table\"))?;\n+        for key in table.keys() {\n+            if !Config::is_valid_name(key) {\n+                let msg = &format!(\"Warning: Unknown configuration option `{}`\\n\", key);\n+                err.push_str(msg)\n             }\n         }\n         match parsed.try_into() {"}, {"sha": "8d241dff1f9690edb24183e35c7c53290f9711f1", "filename": "src/expr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dfa94d150555da40780413d7f1a1378565208c99/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfa94d150555da40780413d7f1a1378565208c99/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=dfa94d150555da40780413d7f1a1378565208c99", "patch": "@@ -1,6 +1,7 @@\n use std::borrow::Cow;\n use std::cmp::min;\n \n+use itertools::Itertools;\n use syntax::parse::token::DelimToken;\n use syntax::source_map::{BytePos, SourceMap, Span};\n use syntax::{ast, ptr};\n@@ -1246,8 +1247,7 @@ fn rewrite_string_lit(context: &RewriteContext<'_>, span: Span, shape: Shape) ->\n     if !context.config.format_strings() {\n         if string_lit\n             .lines()\n-            .rev()\n-            .skip(1)\n+            .dropping_back(1)\n             .all(|line| line.ends_with('\\\\'))\n         {\n             let new_indent = shape.visual_indent(1).indent;\n@@ -1459,7 +1459,7 @@ fn rewrite_paren(\n     let subexpr_str = subexpr.rewrite(context, sub_shape)?;\n     let fits_single_line = !pre_comment.contains(\"//\") && !post_comment.contains(\"//\");\n     if fits_single_line {\n-        Some(format!(\"({}{}{})\", pre_comment, &subexpr_str, post_comment))\n+        Some(format!(\"({}{}{})\", pre_comment, subexpr_str, post_comment))\n     } else {\n         rewrite_paren_in_multi_line(context, subexpr, shape, pre_span, post_span)\n     }"}, {"sha": "ccf60b242be30ec66a202fb3452973de2e12f05b", "filename": "src/formatting.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dfa94d150555da40780413d7f1a1378565208c99/src%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfa94d150555da40780413d7f1a1378565208c99/src%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fformatting.rs?ref=dfa94d150555da40780413d7f1a1378565208c99", "patch": "@@ -48,11 +48,7 @@ impl<'b, T: Write + 'b> Session<'b, T> {\n             let format_result = format_project(input, config, self);\n \n             format_result.map(|report| {\n-                {\n-                    let new_errors = &report.internal.borrow().1;\n-\n-                    self.errors.add(new_errors);\n-                }\n+                self.errors.add(&report.internal.borrow().1);\n                 report\n             })\n         })"}, {"sha": "b0ead7a87b9dd3bc28c221e05e929f4a6d37fc01", "filename": "src/imports.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dfa94d150555da40780413d7f1a1378565208c99/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfa94d150555da40780413d7f1a1378565208c99/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=dfa94d150555da40780413d7f1a1378565208c99", "patch": "@@ -205,11 +205,10 @@ impl fmt::Display for UseSegment {\n             UseSegment::List(ref list) => {\n                 write!(f, \"{{\")?;\n                 for (i, item) in list.iter().enumerate() {\n-                    let is_last = i == list.len() - 1;\n-                    write!(f, \"{}\", item)?;\n-                    if !is_last {\n+                    if i != 0 {\n                         write!(f, \", \")?;\n                     }\n+                    write!(f, \"{}\", item)?;\n                 }\n                 write!(f, \"}}\")\n             }\n@@ -219,13 +218,12 @@ impl fmt::Display for UseSegment {\n impl fmt::Display for UseTree {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         for (i, segment) in self.path.iter().enumerate() {\n-            let is_last = i == self.path.len() - 1;\n-            write!(f, \"{}\", segment)?;\n-            if !is_last {\n+            if i != 0 {\n                 write!(f, \"::\")?;\n             }\n+            write!(f, \"{}\", segment)?;\n         }\n-        write!(f, \"\")\n+        Ok(())\n     }\n }\n "}, {"sha": "1647ecfcc3b3f9437ae13be4704a24fb2241f93c", "filename": "src/items.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dfa94d150555da40780413d7f1a1378565208c99/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfa94d150555da40780413d7f1a1378565208c99/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=dfa94d150555da40780413d7f1a1378565208c99", "patch": "@@ -730,7 +730,7 @@ pub fn format_impl(\n                 if generics.where_clause.predicates.len() == 1 {\n                     result.push_str(\",\");\n                 }\n-                result.push_str(&format!(\"{}{{{}}}\", &sep, &sep));\n+                result.push_str(&format!(\"{}{{{}}}\", sep, sep));\n             } else {\n                 result.push_str(\" {}\");\n             }\n@@ -912,7 +912,7 @@ fn rewrite_trait_ref(\n     let shape = Shape::indented(offset + used_space, context.config);\n     if let Some(trait_ref_str) = trait_ref.rewrite(context, shape) {\n         if !trait_ref_str.contains('\\n') {\n-            return Some(format!(\" {}{}\", polarity_str, &trait_ref_str));\n+            return Some(format!(\" {}{}\", polarity_str, trait_ref_str));\n         }\n     }\n     // We could not make enough space for trait_ref, so put it on new line.\n@@ -921,9 +921,9 @@ fn rewrite_trait_ref(\n     let trait_ref_str = trait_ref.rewrite(context, shape)?;\n     Some(format!(\n         \"{}{}{}\",\n-        &offset.to_string_with_newline(context.config),\n+        offset.to_string_with_newline(context.config),\n         polarity_str,\n-        &trait_ref_str\n+        trait_ref_str\n     ))\n }\n "}, {"sha": "c2188d527924e21e51668361d479024dbeaaed5b", "filename": "src/lists.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/dfa94d150555da40780413d7f1a1378565208c99/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfa94d150555da40780413d7f1a1378565208c99/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=dfa94d150555da40780413d7f1a1378565208c99", "patch": "@@ -577,13 +577,8 @@ pub fn extract_pre_comment(pre_snippet: &str) -> (Option<String>, ListItemCommen\n     let has_block_comment = trimmed_pre_snippet.ends_with(\"*/\");\n     let has_single_line_comment = trimmed_pre_snippet.starts_with(\"//\");\n     if has_block_comment {\n-        let comment_end = pre_snippet.chars().rev().position(|c| c == '/').unwrap();\n-        if pre_snippet\n-            .chars()\n-            .rev()\n-            .take(comment_end + 1)\n-            .any(|c| c == '\\n')\n-        {\n+        let comment_end = pre_snippet.rfind(|c| c == '/').unwrap();\n+        if pre_snippet[comment_end..].contains('\\n') {\n             (\n                 Some(trimmed_pre_snippet.to_owned()),\n                 ListItemCommentStyle::DifferentLine,"}, {"sha": "088b3e4490f2ed9ed300b53828fd10fcebcc967b", "filename": "src/macros.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/dfa94d150555da40780413d7f1a1378565208c99/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfa94d150555da40780413d7f1a1378565208c99/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=dfa94d150555da40780413d7f1a1378565208c99", "patch": "@@ -540,17 +540,12 @@ fn register_metavariable(\n     name: &str,\n     dollar_count: usize,\n ) {\n-    let mut new_name = String::new();\n-    let mut old_name = String::new();\n+    let mut new_name = \"$\".repeat(dollar_count - 1);\n+    let mut old_name = \"$\".repeat(dollar_count);\n \n-    old_name.push('$');\n-    for _ in 0..(dollar_count - 1) {\n-        new_name.push('$');\n-        old_name.push('$');\n-    }\n     new_name.push('z');\n-    new_name.push_str(&name);\n-    old_name.push_str(&name);\n+    new_name.push_str(name);\n+    old_name.push_str(name);\n \n     result.push_str(&new_name);\n     map.insert(old_name, new_name);"}, {"sha": "17e04b2e7a41ea37dd66afe830aceb5aabd19d2f", "filename": "src/overflow.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/dfa94d150555da40780413d7f1a1378565208c99/src%2Foverflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfa94d150555da40780413d7f1a1378565208c99/src%2Foverflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foverflow.rs?ref=dfa94d150555da40780413d7f1a1378565208c99", "patch": "@@ -2,6 +2,7 @@\n \n use std::cmp::min;\n \n+use itertools::Itertools;\n use syntax::parse::token::DelimToken;\n use syntax::source_map::Span;\n use syntax::{ast, ptr};\n@@ -711,10 +712,14 @@ fn last_item_shape(\n     if items.len() == 1 && !lists.get(0)?.is_nested_call() {\n         return Some(shape);\n     }\n-    let offset = items.iter().rev().skip(1).fold(0, |acc, i| {\n-        // 2 = \", \"\n-        acc + 2 + i.inner_as_ref().len()\n-    });\n+    let offset = items\n+        .iter()\n+        .dropping_back(1)\n+        .map(|i| {\n+            // 2 = \", \"\n+            2 + i.inner_as_ref().len()\n+        })\n+        .sum();\n     Shape {\n         width: min(args_max_width, shape.width),\n         ..shape"}, {"sha": "dc297a52dfb967f852ecbe3bb822549ff4bdeecc", "filename": "src/test/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfa94d150555da40780413d7f1a1378565208c99/src%2Ftest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfa94d150555da40780413d7f1a1378565208c99/src%2Ftest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmod.rs?ref=dfa94d150555da40780413d7f1a1378565208c99", "patch": "@@ -609,11 +609,11 @@ fn handle_result(\n     for (file_name, fmt_text) in result {\n         // If file is in tests/source, compare to file with same name in tests/target.\n         let target = get_target(&file_name, target);\n-        let open_error = format!(\"couldn't open target {:?}\", &target);\n+        let open_error = format!(\"couldn't open target {:?}\", target);\n         let mut f = fs::File::open(&target).expect(&open_error);\n \n         let mut text = String::new();\n-        let read_error = format!(\"failed reading target {:?}\", &target);\n+        let read_error = format!(\"failed reading target {:?}\", target);\n         f.read_to_string(&mut text).expect(&read_error);\n \n         // Ignore LF and CRLF difference for Windows."}, {"sha": "a7977a64e6ce3009268a649e907678e18c363f5b", "filename": "src/vertical.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/dfa94d150555da40780413d7f1a1378565208c99/src%2Fvertical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfa94d150555da40780413d7f1a1378565208c99/src%2Fvertical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvertical.rs?ref=dfa94d150555da40780413d7f1a1378565208c99", "patch": "@@ -2,6 +2,7 @@\n \n use std::cmp;\n \n+use itertools::Itertools;\n use syntax::ast;\n use syntax::source_map::{BytePos, Span};\n \n@@ -190,11 +191,8 @@ fn struct_field_prefix_max_min_width<T: AlignedItem>(\n                 }\n             })\n         })\n-        .fold(Some((0, ::std::usize::MAX)), |acc, len| match (acc, len) {\n-            (Some((max_len, min_len)), Some(len)) => {\n-                Some((cmp::max(max_len, len), cmp::min(min_len, len)))\n-            }\n-            _ => None,\n+        .fold_options((0, ::std::usize::MAX), |(max_len, min_len), len| {\n+            (cmp::max(max_len, len), cmp::min(min_len, len))\n         })\n         .unwrap_or((0, 0))\n }\n@@ -274,7 +272,11 @@ fn group_aligned_items<T: AlignedItem>(\n             .skip(1)\n             .collect::<Vec<_>>()\n             .join(\"\\n\");\n-        let spacings = if snippet.lines().rev().skip(1).any(|l| l.trim().is_empty()) {\n+        let spacings = if snippet\n+            .lines()\n+            .dropping_back(1)\n+            .any(|l| l.trim().is_empty())\n+        {\n             \"\\n\"\n         } else {\n             \"\""}]}