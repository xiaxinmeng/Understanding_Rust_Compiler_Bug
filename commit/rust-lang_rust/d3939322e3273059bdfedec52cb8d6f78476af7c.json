{"sha": "d3939322e3273059bdfedec52cb8d6f78476af7c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzOTM5MzIyZTMyNzMwNTliZGZlZGVjNTJjYjhkNmY3ODQ3NmFmN2M=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-11-03T17:51:31Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-11-11T17:22:28Z"}, "message": "rustc: Clean up allocator injection logic\n\nThis commit cleans up allocator injection logic found in the compiler\naround selecting the global allocator. It turns out that now that\njemalloc is gone the compiler never actually injects anything! This\nmeans that basically everything around loading crates here and there can\nbe easily pruned.\n\nThis also removes the `exe_allocation_crate` option from custom target\nspecs as it's no longer used by the compiler anywhere.", "tree": {"sha": "e9b40cb8689d67f3dac071622b2d0f7c1f9b32cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9b40cb8689d67f3dac071622b2d0f7c1f9b32cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3939322e3273059bdfedec52cb8d6f78476af7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3939322e3273059bdfedec52cb8d6f78476af7c", "html_url": "https://github.com/rust-lang/rust/commit/d3939322e3273059bdfedec52cb8d6f78476af7c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3939322e3273059bdfedec52cb8d6f78476af7c/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a88613c86901083dd9f87c43f41d6c0f84f88dee", "url": "https://api.github.com/repos/rust-lang/rust/commits/a88613c86901083dd9f87c43f41d6c0f84f88dee", "html_url": "https://github.com/rust-lang/rust/commit/a88613c86901083dd9f87c43f41d6c0f84f88dee"}], "stats": {"total": 194, "additions": 17, "deletions": 177}, "files": [{"sha": "533eb23c193e148a916ce8c29ac1d7344c812878", "filename": "src/liballoc_system/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d3939322e3273059bdfedec52cb8d6f78476af7c/src%2Fliballoc_system%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3939322e3273059bdfedec52cb8d6f78476af7c/src%2Fliballoc_system%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_system%2Flib.rs?ref=d3939322e3273059bdfedec52cb8d6f78476af7c", "patch": "@@ -25,7 +25,6 @@\n     feature(integer_atomics, stdsimd)\n )]\n #![cfg_attr(any(unix, target_os = \"cloudabi\", target_os = \"redox\"), feature(libc))]\n-#![rustc_alloc_kind = \"lib\"]\n \n // The minimum alignment guaranteed by the architecture. This value is used to\n // add fast paths for low alignment values."}, {"sha": "671f513d5b9331850caeb02550f4e08d06080785", "filename": "src/librustc/middle/dependency_format.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d3939322e3273059bdfedec52cb8d6f78476af7c/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3939322e3273059bdfedec52cb8d6f78476af7c/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs?ref=d3939322e3273059bdfedec52cb8d6f78476af7c", "patch": "@@ -63,7 +63,6 @@\n \n use hir::def_id::CrateNum;\n \n-use session;\n use session::config;\n use ty::TyCtxt;\n use middle::cstore::{self, DepKind};\n@@ -224,7 +223,6 @@ fn calculate_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     // quite yet, so do so here.\n     activate_injected_dep(*sess.injected_panic_runtime.get(), &mut ret,\n                           &|cnum| tcx.is_panic_runtime(cnum));\n-    activate_injected_allocator(sess, &mut ret);\n \n     // When dylib B links to dylib A, then when using B we must also link to A.\n     // It could be the case, however, that the rlib for A is present (hence we\n@@ -303,7 +301,6 @@ fn attempt_static<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Option<DependencyLis\n     // that here and activate them.\n     activate_injected_dep(*sess.injected_panic_runtime.get(), &mut ret,\n                           &|cnum| tcx.is_panic_runtime(cnum));\n-    activate_injected_allocator(sess, &mut ret);\n \n     Some(ret)\n }\n@@ -336,18 +333,6 @@ fn activate_injected_dep(injected: Option<CrateNum>,\n     }\n }\n \n-fn activate_injected_allocator(sess: &session::Session,\n-                               list: &mut DependencyList) {\n-    let cnum = match sess.injected_allocator.get() {\n-        Some(cnum) => cnum,\n-        None => return,\n-    };\n-    let idx = cnum.as_usize() - 1;\n-    if list[idx] == Linkage::NotLinked {\n-        list[idx] = Linkage::Static;\n-    }\n-}\n-\n // After the linkage for a crate has been determined we need to verify that\n // there's only going to be one allocator in the output.\n fn verify_ok<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, list: &[Linkage]) {"}, {"sha": "8cfbd27fc61631f4096e6ed0ddd59322344223e6", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3939322e3273059bdfedec52cb8d6f78476af7c/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3939322e3273059bdfedec52cb8d6f78476af7c/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=d3939322e3273059bdfedec52cb8d6f78476af7c", "patch": "@@ -112,7 +112,6 @@ pub struct Session {\n     /// The metadata::creader module may inject an allocator/panic_runtime\n     /// dependency if it didn't already find one, and this tracks what was\n     /// injected.\n-    pub injected_allocator: Once<Option<CrateNum>>,\n     pub allocator_kind: Once<Option<AllocatorKind>>,\n     pub injected_panic_runtime: Once<Option<CrateNum>>,\n \n@@ -1162,7 +1161,6 @@ pub fn build_session_(\n         type_length_limit: Once::new(),\n         const_eval_stack_frame_limit: 100,\n         next_node_id: OneThread::new(Cell::new(NodeId::new(1))),\n-        injected_allocator: Once::new(),\n         allocator_kind: Once::new(),\n         injected_panic_runtime: Once::new(),\n         imported_macro_spans: OneThread::new(RefCell::new(FxHashMap::default())),"}, {"sha": "734d84b409a9e5c1cabe8eb0880a98e81d80bccd", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 17, "deletions": 96, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/d3939322e3273059bdfedec52cb8d6f78476af7c/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3939322e3273059bdfedec52cb8d6f78476af7c/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=d3939322e3273059bdfedec52cb8d6f78476af7c", "patch": "@@ -864,28 +864,25 @@ impl<'a> CrateLoader<'a> {\n             needs_allocator = needs_allocator || data.root.needs_allocator;\n         });\n         if !needs_allocator {\n-            self.sess.injected_allocator.set(None);\n             self.sess.allocator_kind.set(None);\n             return\n         }\n \n         // At this point we've determined that we need an allocator. Let's see\n         // if our compilation session actually needs an allocator based on what\n         // we're emitting.\n-        let mut need_lib_alloc = false;\n-        let mut need_exe_alloc = false;\n+        let mut all_rlib = true;\n         for ct in self.sess.crate_types.borrow().iter() {\n             match *ct {\n-                config::CrateType::Executable => need_exe_alloc = true,\n+                config::CrateType::Executable |\n                 config::CrateType::Dylib |\n                 config::CrateType::ProcMacro |\n                 config::CrateType::Cdylib |\n-                config::CrateType::Staticlib => need_lib_alloc = true,\n+                config::CrateType::Staticlib => all_rlib = false,\n                 config::CrateType::Rlib => {}\n             }\n         }\n-        if !need_lib_alloc && !need_exe_alloc {\n-            self.sess.injected_allocator.set(None);\n+        if all_rlib {\n             self.sess.allocator_kind.set(None);\n             return\n         }\n@@ -924,103 +921,27 @@ impl<'a> CrateLoader<'a> {\n         });\n         if global_allocator.is_some() {\n             self.sess.allocator_kind.set(Some(AllocatorKind::Global));\n-            self.sess.injected_allocator.set(None);\n             return\n         }\n \n         // Ok we haven't found a global allocator but we still need an\n-        // allocator. At this point we'll either fall back to the \"library\n-        // allocator\" or the \"exe allocator\" depending on a few variables. Let's\n-        // figure out which one.\n-        //\n-        // Note that here we favor linking to the \"library allocator\" as much as\n-        // possible. If we're not creating rustc's version of libstd\n-        // (need_lib_alloc and prefer_dynamic) then we select `None`, and if the\n-        // exe allocation crate doesn't exist for this target then we also\n-        // select `None`.\n-        let exe_allocation_crate_data =\n-            if need_lib_alloc && !self.sess.opts.cg.prefer_dynamic {\n-                None\n-            } else {\n-                self.sess\n-                    .target\n-                    .target\n-                    .options\n-                    .exe_allocation_crate\n-                    .as_ref()\n-                    .map(|name| {\n-                        // We've determined that we're injecting an \"exe allocator\" which means\n-                        // that we're going to load up a whole new crate. An example of this is\n-                        // that we're producing a normal binary on Linux which means we need to\n-                        // load the `alloc_jemalloc` crate to link as an allocator.\n-                        let name = Symbol::intern(name);\n-                        let (cnum, data) = self.resolve_crate(&None,\n-                                                              name,\n-                                                              name,\n-                                                              None,\n-                                                              None,\n-                                                              DUMMY_SP,\n-                                                              PathKind::Crate,\n-                                                              DepKind::Implicit)\n-                            .unwrap_or_else(|err| err.report());\n-                        self.sess.injected_allocator.set(Some(cnum));\n-                        data\n-                    })\n-            };\n-\n-        let allocation_crate_data = exe_allocation_crate_data.or_else(|| {\n-            // No allocator was injected\n-            self.sess.injected_allocator.set(None);\n-\n-            if attr::contains_name(&krate.attrs, \"default_lib_allocator\") {\n-                // Prefer self as the allocator if there's a collision\n-                return None;\n+        // allocator. At this point our allocator request is typically fulfilled\n+        // by the standard library, denoted by the `#![default_lib_allocator]`\n+        // attribute.\n+        let mut has_default = attr::contains_name(&krate.attrs, \"default_lib_allocator\");\n+        self.cstore.iter_crate_data(|_, data| {\n+            if data.root.has_default_lib_allocator {\n+                has_default = true;\n             }\n-            // We're not actually going to inject an allocator, we're going to\n-            // require that something in our crate graph is the default lib\n-            // allocator. This is typically libstd, so this'll rarely be an\n-            // error.\n-            let mut allocator = None;\n-            self.cstore.iter_crate_data(|_, data| {\n-                if allocator.is_none() && data.root.has_default_lib_allocator {\n-                    allocator = Some(data.clone());\n-                }\n-            });\n-            allocator\n         });\n \n-        match allocation_crate_data {\n-            Some(data) => {\n-                // We have an allocator. We detect separately what kind it is, to allow for some\n-                // flexibility in misconfiguration.\n-                let attrs = data.get_item_attrs(CRATE_DEF_INDEX, self.sess);\n-                let kind_interned = attr::first_attr_value_str_by_name(&attrs, \"rustc_alloc_kind\")\n-                    .map(Symbol::as_str);\n-                let kind_str = kind_interned\n-                    .as_ref()\n-                    .map(|s| s as &str);\n-                let alloc_kind = match kind_str {\n-                    None |\n-                    Some(\"lib\") => AllocatorKind::DefaultLib,\n-                    Some(\"exe\") => AllocatorKind::DefaultExe,\n-                    Some(other) => {\n-                        self.sess.err(&format!(\"Allocator kind {} not known\", other));\n-                        return;\n-                    }\n-                };\n-                self.sess.allocator_kind.set(Some(alloc_kind));\n-            },\n-            None => {\n-                if !attr::contains_name(&krate.attrs, \"default_lib_allocator\") {\n-                    self.sess.err(\"no global memory allocator found but one is \\\n-                                   required; link to std or \\\n-                                   add #[global_allocator] to a static item \\\n-                                   that implements the GlobalAlloc trait.\");\n-                    return;\n-                }\n-                self.sess.allocator_kind.set(Some(AllocatorKind::DefaultLib));\n-            }\n+        if !has_default {\n+            self.sess.err(\"no global memory allocator found but one is \\\n+                           required; link to std or \\\n+                           add #[global_allocator] to a static item \\\n+                           that implements the GlobalAlloc trait.\");\n         }\n+        self.sess.allocator_kind.set(Some(AllocatorKind::DefaultLib));\n \n         fn has_global_allocator(krate: &ast::Crate) -> bool {\n             struct Finder(bool);"}, {"sha": "b120f57192bfb7b0bb0d3b68a2198cc70f64082a", "filename": "src/librustc_target/spec/aarch64_unknown_freebsd.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d3939322e3273059bdfedec52cb8d6f78476af7c/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3939322e3273059bdfedec52cb8d6f78476af7c/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_freebsd.rs?ref=d3939322e3273059bdfedec52cb8d6f78476af7c", "patch": "@@ -14,9 +14,6 @@ pub fn target() -> TargetResult {\n     let mut base = super::freebsd_base::opts();\n     base.max_atomic_width = Some(128);\n \n-    // see #36994\n-    base.exe_allocation_crate = None;\n-\n     Ok(Target {\n         llvm_target: \"aarch64-unknown-freebsd\".to_string(),\n         target_endian: \"little\".to_string(),"}, {"sha": "af7ec6a1787f0853ae77fe5bb51b77c4656099b5", "filename": "src/librustc_target/spec/aarch64_unknown_linux_gnu.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d3939322e3273059bdfedec52cb8d6f78476af7c/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3939322e3273059bdfedec52cb8d6f78476af7c/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_linux_gnu.rs?ref=d3939322e3273059bdfedec52cb8d6f78476af7c", "patch": "@@ -14,9 +14,6 @@ pub fn target() -> TargetResult {\n     let mut base = super::linux_base::opts();\n     base.max_atomic_width = Some(128);\n \n-    // see #36994\n-    base.exe_allocation_crate = None;\n-\n     Ok(Target {\n         llvm_target: \"aarch64-unknown-linux-gnu\".to_string(),\n         target_endian: \"little\".to_string(),"}, {"sha": "e5ca91aabe56a46118933651d2b95403d03ce53d", "filename": "src/librustc_target/spec/aarch64_unknown_linux_musl.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d3939322e3273059bdfedec52cb8d6f78476af7c/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3939322e3273059bdfedec52cb8d6f78476af7c/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Faarch64_unknown_linux_musl.rs?ref=d3939322e3273059bdfedec52cb8d6f78476af7c", "patch": "@@ -14,9 +14,6 @@ pub fn target() -> TargetResult {\n     let mut base = super::linux_musl_base::opts();\n     base.max_atomic_width = Some(128);\n \n-    // see #36994\n-    base.exe_allocation_crate = None;\n-\n     Ok(Target {\n         llvm_target: \"aarch64-unknown-linux-musl\".to_string(),\n         target_endian: \"little\".to_string(),"}, {"sha": "168eac685e4f3a4da8ce6eabf072fbe23d050494", "filename": "src/librustc_target/spec/hermit_base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d3939322e3273059bdfedec52cb8d6f78476af7c/src%2Flibrustc_target%2Fspec%2Fhermit_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3939322e3273059bdfedec52cb8d6f78476af7c/src%2Flibrustc_target%2Fspec%2Fhermit_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fhermit_base.rs?ref=d3939322e3273059bdfedec52cb8d6f78476af7c", "patch": "@@ -21,7 +21,6 @@ pub fn opts() -> TargetOptions {\n     ]);\n \n     TargetOptions {\n-        exe_allocation_crate: None,\n         executables: true,\n         has_elf_tls: true,\n         linker_is_gnu: true,"}, {"sha": "7932adf3b1054077714b92de197ef4da3563180c", "filename": "src/librustc_target/spec/l4re_base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d3939322e3273059bdfedec52cb8d6f78476af7c/src%2Flibrustc_target%2Fspec%2Fl4re_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3939322e3273059bdfedec52cb8d6f78476af7c/src%2Flibrustc_target%2Fspec%2Fl4re_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fl4re_base.rs?ref=d3939322e3273059bdfedec52cb8d6f78476af7c", "patch": "@@ -30,7 +30,6 @@ pub fn opts() -> TargetOptions {\n     TargetOptions {\n         executables: true,\n         has_elf_tls: false,\n-        exe_allocation_crate: None,\n         panic_strategy: PanicStrategy::Abort,\n         linker: Some(\"ld\".to_string()),\n         pre_link_args: args,"}, {"sha": "b80b6b561cd42554172e95cc4d21ae429e533510", "filename": "src/librustc_target/spec/mips64_unknown_linux_gnuabi64.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d3939322e3273059bdfedec52cb8d6f78476af7c/src%2Flibrustc_target%2Fspec%2Fmips64_unknown_linux_gnuabi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3939322e3273059bdfedec52cb8d6f78476af7c/src%2Flibrustc_target%2Fspec%2Fmips64_unknown_linux_gnuabi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmips64_unknown_linux_gnuabi64.rs?ref=d3939322e3273059bdfedec52cb8d6f78476af7c", "patch": "@@ -28,9 +28,6 @@ pub fn target() -> TargetResult {\n             features: \"+mips64r2\".to_string(),\n             max_atomic_width: Some(64),\n \n-            // see #36994\n-            exe_allocation_crate: None,\n-\n             ..super::linux_base::opts()\n         },\n     })"}, {"sha": "1c835af6e412b1e9ea6db09aa9638b242a28cc38", "filename": "src/librustc_target/spec/mips64el_unknown_linux_gnuabi64.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d3939322e3273059bdfedec52cb8d6f78476af7c/src%2Flibrustc_target%2Fspec%2Fmips64el_unknown_linux_gnuabi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3939322e3273059bdfedec52cb8d6f78476af7c/src%2Flibrustc_target%2Fspec%2Fmips64el_unknown_linux_gnuabi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmips64el_unknown_linux_gnuabi64.rs?ref=d3939322e3273059bdfedec52cb8d6f78476af7c", "patch": "@@ -28,9 +28,6 @@ pub fn target() -> TargetResult {\n             features: \"+mips64r2\".to_string(),\n             max_atomic_width: Some(64),\n \n-            // see #36994\n-            exe_allocation_crate: None,\n-\n             ..super::linux_base::opts()\n         },\n     })"}, {"sha": "6331031c9a2847176752ff2b7c8b12b02852afc5", "filename": "src/librustc_target/spec/mips_unknown_linux_gnu.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d3939322e3273059bdfedec52cb8d6f78476af7c/src%2Flibrustc_target%2Fspec%2Fmips_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3939322e3273059bdfedec52cb8d6f78476af7c/src%2Flibrustc_target%2Fspec%2Fmips_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmips_unknown_linux_gnu.rs?ref=d3939322e3273059bdfedec52cb8d6f78476af7c", "patch": "@@ -27,9 +27,6 @@ pub fn target() -> TargetResult {\n             features: \"+mips32r2,+fpxx,+nooddspreg\".to_string(),\n             max_atomic_width: Some(32),\n \n-            // see #36994\n-            exe_allocation_crate: None,\n-\n             ..super::linux_base::opts()\n         },\n     })"}, {"sha": "0b20765172a0250911ee289344bb425c329fd5a9", "filename": "src/librustc_target/spec/mips_unknown_linux_musl.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3939322e3273059bdfedec52cb8d6f78476af7c/src%2Flibrustc_target%2Fspec%2Fmips_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3939322e3273059bdfedec52cb8d6f78476af7c/src%2Flibrustc_target%2Fspec%2Fmips_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmips_unknown_linux_musl.rs?ref=d3939322e3273059bdfedec52cb8d6f78476af7c", "patch": "@@ -15,8 +15,6 @@ pub fn target() -> TargetResult {\n     base.cpu = \"mips32r2\".to_string();\n     base.features = \"+mips32r2,+soft-float\".to_string();\n     base.max_atomic_width = Some(32);\n-    // see #36994\n-    base.exe_allocation_crate = None;\n     base.crt_static_default = false;\n     Ok(Target {\n         llvm_target: \"mips-unknown-linux-musl\".to_string(),"}, {"sha": "d3f614c982ae4903eae0f7c0dc22b5ed7a14e67e", "filename": "src/librustc_target/spec/mips_unknown_linux_uclibc.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d3939322e3273059bdfedec52cb8d6f78476af7c/src%2Flibrustc_target%2Fspec%2Fmips_unknown_linux_uclibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3939322e3273059bdfedec52cb8d6f78476af7c/src%2Flibrustc_target%2Fspec%2Fmips_unknown_linux_uclibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmips_unknown_linux_uclibc.rs?ref=d3939322e3273059bdfedec52cb8d6f78476af7c", "patch": "@@ -27,9 +27,6 @@ pub fn target() -> TargetResult {\n             features: \"+mips32r2,+soft-float\".to_string(),\n             max_atomic_width: Some(32),\n \n-            // see #36994\n-            exe_allocation_crate: None,\n-\n             ..super::linux_base::opts()\n         },\n     })"}, {"sha": "79ebefa79a320065ff012d4590ef9547fb83a54e", "filename": "src/librustc_target/spec/mipsel_unknown_linux_gnu.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d3939322e3273059bdfedec52cb8d6f78476af7c/src%2Flibrustc_target%2Fspec%2Fmipsel_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3939322e3273059bdfedec52cb8d6f78476af7c/src%2Flibrustc_target%2Fspec%2Fmipsel_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmipsel_unknown_linux_gnu.rs?ref=d3939322e3273059bdfedec52cb8d6f78476af7c", "patch": "@@ -28,9 +28,6 @@ pub fn target() -> TargetResult {\n             features: \"+mips32r2,+fpxx,+nooddspreg\".to_string(),\n             max_atomic_width: Some(32),\n \n-            // see #36994\n-            exe_allocation_crate: None,\n-\n             ..super::linux_base::opts()\n         },\n     })"}, {"sha": "042e2b71c32565f98dedcf716bef3257686e6340", "filename": "src/librustc_target/spec/mipsel_unknown_linux_musl.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3939322e3273059bdfedec52cb8d6f78476af7c/src%2Flibrustc_target%2Fspec%2Fmipsel_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3939322e3273059bdfedec52cb8d6f78476af7c/src%2Flibrustc_target%2Fspec%2Fmipsel_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmipsel_unknown_linux_musl.rs?ref=d3939322e3273059bdfedec52cb8d6f78476af7c", "patch": "@@ -15,8 +15,6 @@ pub fn target() -> TargetResult {\n     base.cpu = \"mips32r2\".to_string();\n     base.features = \"+mips32r2,+soft-float\".to_string();\n     base.max_atomic_width = Some(32);\n-    // see #36994\n-    base.exe_allocation_crate = None;\n     base.crt_static_default = false;\n     Ok(Target {\n         llvm_target: \"mipsel-unknown-linux-musl\".to_string(),"}, {"sha": "8cb5cd3f03a677f024841f1572563d916c361526", "filename": "src/librustc_target/spec/mipsel_unknown_linux_uclibc.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d3939322e3273059bdfedec52cb8d6f78476af7c/src%2Flibrustc_target%2Fspec%2Fmipsel_unknown_linux_uclibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3939322e3273059bdfedec52cb8d6f78476af7c/src%2Flibrustc_target%2Fspec%2Fmipsel_unknown_linux_uclibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmipsel_unknown_linux_uclibc.rs?ref=d3939322e3273059bdfedec52cb8d6f78476af7c", "patch": "@@ -28,9 +28,6 @@ pub fn target() -> TargetResult {\n             features: \"+mips32r2,+soft-float\".to_string(),\n             max_atomic_width: Some(32),\n \n-            // see #36994\n-            exe_allocation_crate: None,\n-\n             ..super::linux_base::opts()\n         },\n     })"}, {"sha": "16dc2a91030f1723c0f937feb6788b9a1c3fb30f", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d3939322e3273059bdfedec52cb8d6f78476af7c/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3939322e3273059bdfedec52cb8d6f78476af7c/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=d3939322e3273059bdfedec52cb8d6f78476af7c", "patch": "@@ -596,9 +596,6 @@ pub struct TargetOptions {\n     /// `eh_unwind_resume` lang item.\n     pub custom_unwind_resume: bool,\n \n-    /// If necessary, a different crate to link exe allocators by default\n-    pub exe_allocation_crate: Option<String>,\n-\n     /// Flag indicating whether ELF TLS (e.g. #[thread_local]) is available for\n     /// this target.\n     pub has_elf_tls: bool,\n@@ -740,7 +737,6 @@ impl Default for TargetOptions {\n             link_env: Vec::new(),\n             archive_format: \"gnu\".to_string(),\n             custom_unwind_resume: false,\n-            exe_allocation_crate: None,\n             allow_asm: true,\n             has_elf_tls: false,\n             obj_is_bitcode: false,\n@@ -1025,7 +1021,6 @@ impl Target {\n         key!(archive_format);\n         key!(allow_asm, bool);\n         key!(custom_unwind_resume, bool);\n-        key!(exe_allocation_crate, optional);\n         key!(has_elf_tls, bool);\n         key!(obj_is_bitcode, bool);\n         key!(no_integrated_as, bool);\n@@ -1235,7 +1230,6 @@ impl ToJson for Target {\n         target_option_val!(archive_format);\n         target_option_val!(allow_asm);\n         target_option_val!(custom_unwind_resume);\n-        target_option_val!(exe_allocation_crate);\n         target_option_val!(has_elf_tls);\n         target_option_val!(obj_is_bitcode);\n         target_option_val!(no_integrated_as);"}, {"sha": "1d0afcd5e0c608b4721024d301fe2b5187ed25b9", "filename": "src/librustc_target/spec/powerpc64_unknown_linux_gnu.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d3939322e3273059bdfedec52cb8d6f78476af7c/src%2Flibrustc_target%2Fspec%2Fpowerpc64_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3939322e3273059bdfedec52cb8d6f78476af7c/src%2Flibrustc_target%2Fspec%2Fpowerpc64_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fpowerpc64_unknown_linux_gnu.rs?ref=d3939322e3273059bdfedec52cb8d6f78476af7c", "patch": "@@ -20,9 +20,6 @@ pub fn target() -> TargetResult {\n     // for now. https://github.com/rust-lang/rust/pull/43170#issuecomment-315411474\n     base.relro_level = RelroLevel::Partial;\n \n-    // see #36994\n-    base.exe_allocation_crate = None;\n-\n     Ok(Target {\n         llvm_target: \"powerpc64-unknown-linux-gnu\".to_string(),\n         target_endian: \"big\".to_string(),"}, {"sha": "01811c5a0c32227e2fcc72e20379cd2ae20dbb9c", "filename": "src/librustc_target/spec/powerpc64le_unknown_linux_gnu.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d3939322e3273059bdfedec52cb8d6f78476af7c/src%2Flibrustc_target%2Fspec%2Fpowerpc64le_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3939322e3273059bdfedec52cb8d6f78476af7c/src%2Flibrustc_target%2Fspec%2Fpowerpc64le_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fpowerpc64le_unknown_linux_gnu.rs?ref=d3939322e3273059bdfedec52cb8d6f78476af7c", "patch": "@@ -16,9 +16,6 @@ pub fn target() -> TargetResult {\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n     base.max_atomic_width = Some(64);\n \n-    // see #36994\n-    base.exe_allocation_crate = None;\n-\n     Ok(Target {\n         llvm_target: \"powerpc64le-unknown-linux-gnu\".to_string(),\n         target_endian: \"little\".to_string(),"}, {"sha": "590c5ba8d54b49fcba547674347ccbe4debe6d51", "filename": "src/librustc_target/spec/powerpc64le_unknown_linux_musl.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d3939322e3273059bdfedec52cb8d6f78476af7c/src%2Flibrustc_target%2Fspec%2Fpowerpc64le_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3939322e3273059bdfedec52cb8d6f78476af7c/src%2Flibrustc_target%2Fspec%2Fpowerpc64le_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fpowerpc64le_unknown_linux_musl.rs?ref=d3939322e3273059bdfedec52cb8d6f78476af7c", "patch": "@@ -16,9 +16,6 @@ pub fn target() -> TargetResult {\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n     base.max_atomic_width = Some(64);\n \n-    // see #36994\n-    base.exe_allocation_crate = None;\n-\n     Ok(Target {\n         llvm_target: \"powerpc64le-unknown-linux-musl\".to_string(),\n         target_endian: \"little\".to_string(),"}, {"sha": "99d8d99fbb2b620c59a8c08b2b854fa9054ffd1b", "filename": "src/librustc_target/spec/powerpc_unknown_linux_gnu.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d3939322e3273059bdfedec52cb8d6f78476af7c/src%2Flibrustc_target%2Fspec%2Fpowerpc_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3939322e3273059bdfedec52cb8d6f78476af7c/src%2Flibrustc_target%2Fspec%2Fpowerpc_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fpowerpc_unknown_linux_gnu.rs?ref=d3939322e3273059bdfedec52cb8d6f78476af7c", "patch": "@@ -15,9 +15,6 @@ pub fn target() -> TargetResult {\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m32\".to_string());\n     base.max_atomic_width = Some(32);\n \n-    // see #36994\n-    base.exe_allocation_crate = None;\n-\n     Ok(Target {\n         llvm_target: \"powerpc-unknown-linux-gnu\".to_string(),\n         target_endian: \"big\".to_string(),"}, {"sha": "9b15b0a5dc4b7b3c80c81b411535733b3423a6fd", "filename": "src/librustc_target/spec/powerpc_unknown_linux_gnuspe.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d3939322e3273059bdfedec52cb8d6f78476af7c/src%2Flibrustc_target%2Fspec%2Fpowerpc_unknown_linux_gnuspe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3939322e3273059bdfedec52cb8d6f78476af7c/src%2Flibrustc_target%2Fspec%2Fpowerpc_unknown_linux_gnuspe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fpowerpc_unknown_linux_gnuspe.rs?ref=d3939322e3273059bdfedec52cb8d6f78476af7c", "patch": "@@ -15,9 +15,6 @@ pub fn target() -> TargetResult {\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-mspe\".to_string());\n     base.max_atomic_width = Some(32);\n \n-    // see #36994\n-    base.exe_allocation_crate = None;\n-\n     Ok(Target {\n         llvm_target: \"powerpc-unknown-linux-gnuspe\".to_string(),\n         target_endian: \"big\".to_string(),"}, {"sha": "98625a63f52980adefeac771fe27a349f44af36b", "filename": "src/librustc_target/spec/powerpc_unknown_netbsd.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d3939322e3273059bdfedec52cb8d6f78476af7c/src%2Flibrustc_target%2Fspec%2Fpowerpc_unknown_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3939322e3273059bdfedec52cb8d6f78476af7c/src%2Flibrustc_target%2Fspec%2Fpowerpc_unknown_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fpowerpc_unknown_netbsd.rs?ref=d3939322e3273059bdfedec52cb8d6f78476af7c", "patch": "@@ -15,9 +15,6 @@ pub fn target() -> TargetResult {\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m32\".to_string());\n     base.max_atomic_width = Some(32);\n \n-    // see #36994\n-    base.exe_allocation_crate = None;\n-\n     Ok(Target {\n         llvm_target: \"powerpc-unknown-netbsd\".to_string(),\n         target_endian: \"big\".to_string(),"}, {"sha": "bd8b7e435d340e1a0cc676b65d1d391423ff4524", "filename": "src/librustc_target/spec/s390x_unknown_linux_gnu.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3939322e3273059bdfedec52cb8d6f78476af7c/src%2Flibrustc_target%2Fspec%2Fs390x_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3939322e3273059bdfedec52cb8d6f78476af7c/src%2Flibrustc_target%2Fspec%2Fs390x_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fs390x_unknown_linux_gnu.rs?ref=d3939322e3273059bdfedec52cb8d6f78476af7c", "patch": "@@ -19,8 +19,6 @@ pub fn target() -> TargetResult {\n     // Pass the -vector feature string to LLVM to respect this assumption.\n     base.features = \"-vector\".to_string();\n     base.max_atomic_width = Some(64);\n-    // see #36994\n-    base.exe_allocation_crate = None;\n     base.min_global_align = Some(16);\n \n     Ok(Target {"}, {"sha": "f2b99aa46d2d0cfc7f7fc72b39cce4a1856a3b37", "filename": "src/librustc_target/spec/sparc64_unknown_linux_gnu.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d3939322e3273059bdfedec52cb8d6f78476af7c/src%2Flibrustc_target%2Fspec%2Fsparc64_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3939322e3273059bdfedec52cb8d6f78476af7c/src%2Flibrustc_target%2Fspec%2Fsparc64_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fsparc64_unknown_linux_gnu.rs?ref=d3939322e3273059bdfedec52cb8d6f78476af7c", "patch": "@@ -14,7 +14,6 @@ pub fn target() -> TargetResult {\n     let mut base = super::linux_base::opts();\n     base.cpu = \"v9\".to_string();\n     base.max_atomic_width = Some(64);\n-    base.exe_allocation_crate = None;\n \n     Ok(Target {\n         llvm_target: \"sparc64-unknown-linux-gnu\".to_string(),"}, {"sha": "81db39cd23f87d288915989613f2e5192391af51", "filename": "src/librustc_target/spec/sparc_unknown_linux_gnu.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d3939322e3273059bdfedec52cb8d6f78476af7c/src%2Flibrustc_target%2Fspec%2Fsparc_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3939322e3273059bdfedec52cb8d6f78476af7c/src%2Flibrustc_target%2Fspec%2Fsparc_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fsparc_unknown_linux_gnu.rs?ref=d3939322e3273059bdfedec52cb8d6f78476af7c", "patch": "@@ -15,7 +15,6 @@ pub fn target() -> TargetResult {\n     base.cpu = \"v9\".to_string();\n     base.max_atomic_width = Some(64);\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-mv8plus\".to_string());\n-    base.exe_allocation_crate = None;\n \n     Ok(Target {\n         llvm_target: \"sparc-unknown-linux-gnu\".to_string(),"}, {"sha": "5029e857eb5431378e8a83fb4cf8e55f0bac56f6", "filename": "src/librustc_target/spec/sparcv9_sun_solaris.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d3939322e3273059bdfedec52cb8d6f78476af7c/src%2Flibrustc_target%2Fspec%2Fsparcv9_sun_solaris.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3939322e3273059bdfedec52cb8d6f78476af7c/src%2Flibrustc_target%2Fspec%2Fsparcv9_sun_solaris.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fsparcv9_sun_solaris.rs?ref=d3939322e3273059bdfedec52cb8d6f78476af7c", "patch": "@@ -16,7 +16,6 @@ pub fn target() -> TargetResult {\n     // llvm calls this \"v9\"\n     base.cpu = \"v9\".to_string();\n     base.max_atomic_width = Some(64);\n-    base.exe_allocation_crate = None;\n \n     Ok(Target {\n         llvm_target: \"sparcv9-sun-solaris\".to_string(),"}, {"sha": "e7570cd2da6ec84fd4cfa9b19fbe0849e2ef7ab1", "filename": "src/librustc_target/spec/x86_64_rumprun_netbsd.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d3939322e3273059bdfedec52cb8d6f78476af7c/src%2Flibrustc_target%2Fspec%2Fx86_64_rumprun_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3939322e3273059bdfedec52cb8d6f78476af7c/src%2Flibrustc_target%2Fspec%2Fx86_64_rumprun_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_rumprun_netbsd.rs?ref=d3939322e3273059bdfedec52cb8d6f78476af7c", "patch": "@@ -21,7 +21,6 @@ pub fn target() -> TargetResult {\n     base.has_rpath = false;\n     base.position_independent_executables = false;\n     base.disable_redzone = true;\n-    base.exe_allocation_crate = None;\n     base.stack_probes = true;\n \n     Ok(Target {"}]}