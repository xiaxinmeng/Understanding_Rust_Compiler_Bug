{"sha": "b2616641d99e6c1d7163dc84dcc9062bf38263b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyNjE2NjQxZDk5ZTZjMWQ3MTYzZGM4NGRjYzkwNjJiZjM4MjYzYjE=", "commit": {"author": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2019-10-24T12:33:14Z"}, "committer": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2019-10-24T12:39:19Z"}, "message": "Fix dogfood findings", "tree": {"sha": "27d3c922feb1cddc938ee3b00d9cf7e913ea2678", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27d3c922feb1cddc938ee3b00d9cf7e913ea2678"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b2616641d99e6c1d7163dc84dcc9062bf38263b1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZxoS6lESXlRGMHWcaTCGhp1QZjcFAl2xm3sACgkQaTCGhp1Q\nZjf//BAAiiI5jFjDjoS/XovN2PJgMLkWH08LuxY41p8Iv+jR390re0q+ibFffiF4\nxqdYHPOTiw3osgRc2iDpmqo+BCp4LXnrSJM4aDLiK70yRs/tn75HSGYyPSLBHIjd\nktHPkvm2B1+7nUtFcca2m6C13PhX6vplGddIYJ0oG6EslF8FdnJdi/Nm/bHuB8zH\n7csFHUJ46u2srMEqHzUYsJazYdqG3JWdW5DxQXEOv/+e5iNZqEdf+gWm1a2yn++/\nCjR5ySdeMwIoyrX9ktGfsjf2S8RzbEbnPvSX38M3DZSk3m1JSpiCxOkWPyMiheTW\nGVvU43Nata025UV302IPmPy/mCqwH8eEpXxn/LoWneB2YQ7KsHCzS3rrzVQlKMUt\n1Whp/+WAlJS1aKyuylCSENvXTgSKpHekK0SGo/vY92HN2oiBV2C1EkBNHbvljQcq\nnfvy/cnv5IbREMVR6L+/gy6FBunVwWeZtv2rVAhDcf6OaSBbEkmve02VXv6TUbxE\nog3TiNXJoNsmQBwqhbwgfzd8/1hW2aJ6/9GdFxjGT+Gibuab1EFPqTeSf5rLS9aJ\ncAfCeoWnxZ1Q0fIZLVxIepgOcEBQGQ0rDV8QTUZS84VsRtWeV6O9U0L3wmKw9c+Z\n9/9hvHz1XCJAyZujUNZsUl+13QZiyCcgrRUMJwLWqX7h6OkHq1o=\n=m6M9\n-----END PGP SIGNATURE-----", "payload": "tree 27d3c922feb1cddc938ee3b00d9cf7e913ea2678\nparent 8d38a07fb6e90f7f312165e8ae8eb0f63bdf21af\nauthor flip1995 <hello@philkrones.com> 1571920394 +0200\ncommitter flip1995 <hello@philkrones.com> 1571920759 +0200\n\nFix dogfood findings\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b2616641d99e6c1d7163dc84dcc9062bf38263b1", "html_url": "https://github.com/rust-lang/rust/commit/b2616641d99e6c1d7163dc84dcc9062bf38263b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b2616641d99e6c1d7163dc84dcc9062bf38263b1/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d38a07fb6e90f7f312165e8ae8eb0f63bdf21af", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d38a07fb6e90f7f312165e8ae8eb0f63bdf21af", "html_url": "https://github.com/rust-lang/rust/commit/8d38a07fb6e90f7f312165e8ae8eb0f63bdf21af"}], "stats": {"total": 61, "additions": 34, "deletions": 27}, "files": [{"sha": "327774ea0f26fa1cd6ac79696432cea8ee5332a1", "filename": "clippy_dev/src/lib.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b2616641d99e6c1d7163dc84dcc9062bf38263b1/clippy_dev%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2616641d99e6c1d7163dc84dcc9062bf38263b1/clippy_dev%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Flib.rs?ref=b2616641d99e6c1d7163dc84dcc9062bf38263b1", "patch": "@@ -143,13 +143,19 @@ pub fn gen_deprecated(lints: &[Lint]) -> Vec<String> {\n         .collect::<Vec<String>>()\n }\n \n+#[must_use]\n pub fn gen_register_lint_list(lints: &[Lint]) -> Vec<String> {\n     let pre = \"    store.register_lints(&[\".to_string();\n     let post = \"    ]);\".to_string();\n     let mut inner = lints\n         .iter()\n-        .filter(|l| !(l.is_internal() || l.deprecation.is_some()))\n-        .map(|l| format!(\"        &{}::{},\", l.module, l.name.to_uppercase()))\n+        .filter_map(|l| {\n+            if !l.is_internal() && l.deprecation.is_none() {\n+                Some(format!(\"        &{}::{},\", l.module, l.name.to_uppercase()))\n+            } else {\n+                None\n+            }\n+        })\n         .sorted()\n         .collect::<Vec<String>>();\n     inner.insert(0, pre);"}, {"sha": "9c9d3eae588553e65df58b64ead0535b7f2a47d6", "filename": "clippy_dev/src/main.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2616641d99e6c1d7163dc84dcc9062bf38263b1/clippy_dev%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2616641d99e6c1d7163dc84dcc9062bf38263b1/clippy_dev%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fmain.rs?ref=b2616641d99e6c1d7163dc84dcc9062bf38263b1", "patch": "@@ -109,6 +109,7 @@ fn print_lints() {\n     println!(\"there are {} lints\", lint_count);\n }\n \n+#[allow(clippy::too_many_lines)]\n fn update_lints(update_mode: &UpdateMode) {\n     let lint_list: Vec<Lint> = gather_all().collect();\n "}, {"sha": "005b734c16fea8c28019395fbd1ded8f574ff6d1", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/b2616641d99e6c1d7163dc84dcc9062bf38263b1/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2616641d99e6c1d7163dc84dcc9062bf38263b1/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=b2616641d99e6c1d7163dc84dcc9062bf38263b1", "patch": "@@ -309,9 +309,9 @@ mod reexport {\n pub fn register_pre_expansion_lints(store: &mut rustc::lint::LintStore, conf: &Conf) {\n     store.register_pre_expansion_pass(|| box write::Write);\n     store.register_pre_expansion_pass(|| box redundant_field_names::RedundantFieldNames);\n-    let p = conf.single_char_binding_names_threshold;\n+    let single_char_binding_names_threshold = conf.single_char_binding_names_threshold;\n     store.register_pre_expansion_pass(move || box non_expressive_names::NonExpressiveNames {\n-        single_char_binding_names_threshold: p,\n+        single_char_binding_names_threshold,\n     });\n     store.register_pre_expansion_pass(|| box attrs::DeprecatedCfgAttribute);\n     store.register_pre_expansion_pass(|| box dbg_macro::DbgMacro);\n@@ -783,8 +783,8 @@ pub fn register_plugins(store: &mut lint::LintStore, sess: &Session, conf: &Conf\n     store.register_late_pass(|| box enum_glob_use::EnumGlobUse);\n     store.register_late_pass(|| box enum_clike::UnportableVariant);\n     store.register_late_pass(|| box excessive_precision::ExcessivePrecision);\n-    let p = conf.verbose_bit_mask_threshold;\n-    store.register_late_pass(move || box bit_mask::BitMask::new(p));\n+    let verbose_bit_mask_threshold = conf.verbose_bit_mask_threshold;\n+    store.register_late_pass(move || box bit_mask::BitMask::new(verbose_bit_mask_threshold));\n     store.register_late_pass(|| box ptr::Ptr);\n     store.register_late_pass(|| box needless_bool::NeedlessBool);\n     store.register_late_pass(|| box needless_bool::BoolComparison);\n@@ -812,8 +812,8 @@ pub fn register_plugins(store: &mut lint::LintStore, sess: &Session, conf: &Conf\n     store.register_late_pass(|| box entry::HashMapPass);\n     store.register_late_pass(|| box ranges::Ranges);\n     store.register_late_pass(|| box types::Casts);\n-    let p = conf.type_complexity_threshold;\n-    store.register_late_pass(move || box types::TypeComplexity::new(p));\n+    let type_complexity_threshold = conf.type_complexity_threshold;\n+    store.register_late_pass(move || box types::TypeComplexity::new(type_complexity_threshold));\n     store.register_late_pass(|| box matches::Matches);\n     store.register_late_pass(|| box minmax::MinMaxPass);\n     store.register_late_pass(|| box open_options::OpenOptions);\n@@ -825,10 +825,10 @@ pub fn register_plugins(store: &mut lint::LintStore, sess: &Session, conf: &Conf\n     store.register_late_pass(|| box no_effect::NoEffect);\n     store.register_late_pass(|| box temporary_assignment::TemporaryAssignment);\n     store.register_late_pass(|| box transmute::Transmute);\n-    let p = conf.cognitive_complexity_threshold;\n-    store.register_late_pass(move || box cognitive_complexity::CognitiveComplexity::new(p));\n-    let a = conf.too_large_for_stack;\n-    store.register_late_pass(move || box escape::BoxedLocal{too_large_for_stack: a});\n+    let cognitive_complexity_threshold = conf.cognitive_complexity_threshold;\n+    store.register_late_pass(move || box cognitive_complexity::CognitiveComplexity::new(cognitive_complexity_threshold));\n+    let too_large_for_stack = conf.too_large_for_stack;\n+    store.register_late_pass(move || box escape::BoxedLocal{too_large_for_stack});\n     store.register_late_pass(|| box panic_unimplemented::PanicUnimplemented);\n     store.register_late_pass(|| box strings::StringLitAsBytes);\n     store.register_late_pass(|| box derive::Derive);\n@@ -848,13 +848,13 @@ pub fn register_plugins(store: &mut lint::LintStore, sess: &Session, conf: &Conf\n     store.register_late_pass(|| box overflow_check_conditional::OverflowCheckConditional);\n     store.register_late_pass(|| box unused_label::UnusedLabel);\n     store.register_late_pass(|| box new_without_default::NewWithoutDefault::default());\n-    let p = conf.blacklisted_names.iter().cloned().collect::<FxHashSet<_>>();\n-    store.register_late_pass(move || box blacklisted_name::BlacklistedName::new(p.clone()));\n-    let a1 = conf.too_many_arguments_threshold;\n-    let a2 = conf.too_many_lines_threshold;\n-    store.register_late_pass(move || box functions::Functions::new(a1, a2));\n-    let p = conf.doc_valid_idents.iter().cloned().collect::<FxHashSet<_>>();\n-    store.register_late_pass(move || box doc::DocMarkdown::new(p.clone()));\n+    let blacklisted_names = conf.blacklisted_names.iter().cloned().collect::<FxHashSet<_>>();\n+    store.register_late_pass(move || box blacklisted_name::BlacklistedName::new(blacklisted_names.clone()));\n+    let too_many_arguments_threshold1 = conf.too_many_arguments_threshold;\n+    let too_many_lines_threshold2 = conf.too_many_lines_threshold;\n+    store.register_late_pass(move || box functions::Functions::new(too_many_arguments_threshold1, too_many_lines_threshold2));\n+    let doc_valid_idents = conf.doc_valid_idents.iter().cloned().collect::<FxHashSet<_>>();\n+    store.register_late_pass(move || box doc::DocMarkdown::new(doc_valid_idents.clone()));\n     store.register_late_pass(|| box neg_multiply::NegMultiply);\n     store.register_late_pass(|| box mem_discriminant::MemDiscriminant);\n     store.register_late_pass(|| box mem_forget::MemForget);\n@@ -869,15 +869,15 @@ pub fn register_plugins(store: &mut lint::LintStore, sess: &Session, conf: &Conf\n     store.register_late_pass(|| box redundant_pattern_matching::RedundantPatternMatching);\n     store.register_late_pass(|| box partialeq_ne_impl::PartialEqNeImpl);\n     store.register_late_pass(|| box unused_io_amount::UnusedIoAmount);\n-    let p = conf.enum_variant_size_threshold;\n-    store.register_late_pass(move || box large_enum_variant::LargeEnumVariant::new(p));\n+    let enum_variant_size_threshold = conf.enum_variant_size_threshold;\n+    store.register_late_pass(move || box large_enum_variant::LargeEnumVariant::new(enum_variant_size_threshold));\n     store.register_late_pass(|| box explicit_write::ExplicitWrite);\n     store.register_late_pass(|| box needless_pass_by_value::NeedlessPassByValue);\n-    let p = trivially_copy_pass_by_ref::TriviallyCopyPassByRef::new(\n+    let trivially_copy_pass_by_ref = trivially_copy_pass_by_ref::TriviallyCopyPassByRef::new(\n         conf.trivial_copy_size_limit,\n         &sess.target,\n     );\n-    store.register_late_pass(move || box p);\n+    store.register_late_pass(move || box trivially_copy_pass_by_ref);\n     store.register_late_pass(|| box try_err::TryErr);\n     store.register_late_pass(|| box use_self::UseSelf);\n     store.register_late_pass(|| box bytecount::ByteCount);\n@@ -933,11 +933,11 @@ pub fn register_plugins(store: &mut lint::LintStore, sess: &Session, conf: &Conf\n     store.register_early_pass(|| box multiple_crate_versions::MultipleCrateVersions);\n     store.register_early_pass(|| box wildcard_dependencies::WildcardDependencies);\n     store.register_early_pass(|| box literal_representation::LiteralDigitGrouping);\n-    let p = conf.literal_representation_threshold;\n-    store.register_early_pass(move || box literal_representation::DecimalLiteralRepresentation::new(p));\n+    let literal_representation_threshold = conf.literal_representation_threshold;\n+    store.register_early_pass(move || box literal_representation::DecimalLiteralRepresentation::new(literal_representation_threshold));\n     store.register_early_pass(|| box utils::internal_lints::ClippyLintsInternal);\n-    let p = conf.enum_variant_name_threshold;\n-    store.register_early_pass(move || box enum_variants::EnumVariantNames::new(p));\n+    let enum_variant_name_threshold = conf.enum_variant_name_threshold;\n+    store.register_early_pass(move || box enum_variants::EnumVariantNames::new(enum_variant_name_threshold));\n     store.register_late_pass(|| box unused_self::UnusedSelf);\n     store.register_late_pass(|| box mutable_debug_assertion::DebugAssertWithMutCall);\n "}]}