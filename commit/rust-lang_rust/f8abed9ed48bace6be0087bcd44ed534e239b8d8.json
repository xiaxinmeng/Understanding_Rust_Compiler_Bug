{"sha": "f8abed9ed48bace6be0087bcd44ed534e239b8d8", "node_id": "C_kwDOAAsO6NoAKGY4YWJlZDllZDQ4YmFjZTZiZTAwODdiY2Q0NGVkNTM0ZTIzOWI4ZDg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-26T08:52:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-26T08:52:31Z"}, "message": "Auto merge of #92257 - fee1-dead:fix_env_further_bounds, r=oli-obk\n\nnormalize env constness for nested obligations\n\nCloses #92230.", "tree": {"sha": "c594e31814d61ac75771fc4310f1e494291cf88e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c594e31814d61ac75771fc4310f1e494291cf88e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8abed9ed48bace6be0087bcd44ed534e239b8d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8abed9ed48bace6be0087bcd44ed534e239b8d8", "html_url": "https://github.com/rust-lang/rust/commit/f8abed9ed48bace6be0087bcd44ed534e239b8d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8abed9ed48bace6be0087bcd44ed534e239b8d8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51e8031e14a899477a5e2d78ce461cab31123354", "url": "https://api.github.com/repos/rust-lang/rust/commits/51e8031e14a899477a5e2d78ce461cab31123354", "html_url": "https://github.com/rust-lang/rust/commit/51e8031e14a899477a5e2d78ce461cab31123354"}, {"sha": "bb4c5515c185de95602ce38ad7f09c208beb0a7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb4c5515c185de95602ce38ad7f09c208beb0a7d", "html_url": "https://github.com/rust-lang/rust/commit/bb4c5515c185de95602ce38ad7f09c208beb0a7d"}], "stats": {"total": 64, "additions": 63, "deletions": 1}, "files": [{"sha": "b7fc578ea3bd371455db666e236c8acc072cdb75", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/f8abed9ed48bace6be0087bcd44ed534e239b8d8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8abed9ed48bace6be0087bcd44ed534e239b8d8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=f8abed9ed48bace6be0087bcd44ed534e239b8d8", "patch": "@@ -8,6 +8,7 @@\n //! https://rustc-dev-guide.rust-lang.org/traits/resolution.html#confirmation\n use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_hir::lang_items::LangItem;\n+use rustc_hir::Constness;\n use rustc_index::bit_set::GrowableBitSet;\n use rustc_infer::infer::InferOk;\n use rustc_infer::infer::LateBoundRegionConversionTime::HigherRankedType;\n@@ -51,6 +52,38 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         obligation: &TraitObligation<'tcx>,\n         candidate: SelectionCandidate<'tcx>,\n     ) -> Result<Selection<'tcx>, SelectionError<'tcx>> {\n+        let mut obligation = obligation;\n+        let new_obligation;\n+\n+        // HACK(const_trait_impl): the surrounding environment is remapped to a non-const context\n+        // because nested obligations might be actually `~const` then (incorrectly) requiring\n+        // const impls. for example:\n+        // ```\n+        // pub trait Super {}\n+        // pub trait Sub: Super {}\n+        //\n+        // impl<A> const Super for &A where A: ~const Super {}\n+        // impl<A> const Sub for &A where A: ~const Sub {}\n+        // ```\n+        //\n+        // The procedure to check the code above without the remapping code is as follows:\n+        // ```\n+        // CheckWf(impl const Sub for &A where A: ~const Sub) // <- const env\n+        // CheckPredicate(&A: Super)\n+        // CheckPredicate(A: ~const Super) // <- still const env, failure\n+        // ```\n+        if obligation.param_env.constness() == Constness::Const\n+            && obligation.predicate.skip_binder().constness == ty::BoundConstness::NotConst\n+        {\n+            new_obligation = TraitObligation {\n+                cause: obligation.cause.clone(),\n+                param_env: obligation.param_env.without_const(),\n+                ..*obligation\n+            };\n+\n+            obligation = &new_obligation;\n+        }\n+\n         match candidate {\n             BuiltinCandidate { has_nested } => {\n                 let data = self.confirm_builtin_candidate(obligation, has_nested);"}, {"sha": "158c628c3e0cb1638cdc4f62924fd163fc882cc3", "filename": "src/test/ui/rfc-2632-const-trait-impl/issue-92230-wf-super-trait-env.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f8abed9ed48bace6be0087bcd44ed534e239b8d8/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fissue-92230-wf-super-trait-env.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8abed9ed48bace6be0087bcd44ed534e239b8d8/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fissue-92230-wf-super-trait-env.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fissue-92230-wf-super-trait-env.rs?ref=f8abed9ed48bace6be0087bcd44ed534e239b8d8", "patch": "@@ -0,0 +1,14 @@\n+// Regression test for #92230.\n+//\n+// check-pass\n+\n+#![feature(const_fn_trait_bound)]\n+#![feature(const_trait_impl)]\n+\n+pub trait Super {}\n+pub trait Sub: Super {}\n+\n+impl<A> const Super for &A where A: ~const Super {}\n+impl<A> const Sub for &A where A: ~const Sub {}\n+\n+fn main() {}"}, {"sha": "018110905032059aaf0bd5d6d17f1bc87771da67", "filename": "src/test/ui/unsized/issue-30355.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8abed9ed48bace6be0087bcd44ed534e239b8d8/src%2Ftest%2Fui%2Funsized%2Fissue-30355.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8abed9ed48bace6be0087bcd44ed534e239b8d8/src%2Ftest%2Fui%2Funsized%2Fissue-30355.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Fissue-30355.rs?ref=f8abed9ed48bace6be0087bcd44ed534e239b8d8", "patch": "@@ -4,6 +4,7 @@ pub static Y: &'static X = {\n     const Y: &'static [u8] = b\"\";\n     &X(*Y)\n     //~^ ERROR E0277\n+    //~| ERROR E0277\n };\n \n fn main() {}"}, {"sha": "62b6007a15a61ef8cd40105d9cf2be715d759c4d", "filename": "src/test/ui/unsized/issue-30355.stderr", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f8abed9ed48bace6be0087bcd44ed534e239b8d8/src%2Ftest%2Fui%2Funsized%2Fissue-30355.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f8abed9ed48bace6be0087bcd44ed534e239b8d8/src%2Ftest%2Fui%2Funsized%2Fissue-30355.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Fissue-30355.stderr?ref=f8abed9ed48bace6be0087bcd44ed534e239b8d8", "patch": "@@ -8,6 +8,20 @@ LL |     &X(*Y)\n    = note: all function arguments must have a statically known size\n    = help: unsized fn params are gated as an unstable feature\n \n-error: aborting due to previous error\n+error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n+  --> $DIR/issue-30355.rs:5:6\n+   |\n+LL |     &X(*Y)\n+   |      ^ doesn't have a size known at compile-time\n+   |\n+   = help: within `X`, the trait `Sized` is not implemented for `[u8]`\n+note: required because it appears within the type `X`\n+  --> $DIR/issue-30355.rs:1:12\n+   |\n+LL | pub struct X([u8]);\n+   |            ^\n+   = note: the return type of a function must have a statically known size\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}]}