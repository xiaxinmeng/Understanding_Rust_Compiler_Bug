{"sha": "d6227dcd6e139c3f598cd6e937cc59214e254ca6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2MjI3ZGNkNmUxMzljM2Y1OThjZDZlOTM3Y2M1OTIxNGUyNTRjYTY=", "commit": {"author": {"name": "Kelvin Ly", "email": "kelvin.ly1618@gmail.com", "date": "2015-04-18T12:25:43Z"}, "committer": {"name": "Kelvin Ly", "email": "kelvin.ly1618@gmail.com", "date": "2015-04-18T12:28:49Z"}, "message": "Added error explanations for E0308, E0309, and E0310", "tree": {"sha": "87ca320d61cf73ac5a6d22f50930308233d10686", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87ca320d61cf73ac5a6d22f50930308233d10686"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6227dcd6e139c3f598cd6e937cc59214e254ca6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6227dcd6e139c3f598cd6e937cc59214e254ca6", "html_url": "https://github.com/rust-lang/rust/commit/d6227dcd6e139c3f598cd6e937cc59214e254ca6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6227dcd6e139c3f598cd6e937cc59214e254ca6/comments", "author": {"login": "cactorium", "id": 1513183, "node_id": "MDQ6VXNlcjE1MTMxODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1513183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cactorium", "html_url": "https://github.com/cactorium", "followers_url": "https://api.github.com/users/cactorium/followers", "following_url": "https://api.github.com/users/cactorium/following{/other_user}", "gists_url": "https://api.github.com/users/cactorium/gists{/gist_id}", "starred_url": "https://api.github.com/users/cactorium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cactorium/subscriptions", "organizations_url": "https://api.github.com/users/cactorium/orgs", "repos_url": "https://api.github.com/users/cactorium/repos", "events_url": "https://api.github.com/users/cactorium/events{/privacy}", "received_events_url": "https://api.github.com/users/cactorium/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cactorium", "id": 1513183, "node_id": "MDQ6VXNlcjE1MTMxODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1513183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cactorium", "html_url": "https://github.com/cactorium", "followers_url": "https://api.github.com/users/cactorium/followers", "following_url": "https://api.github.com/users/cactorium/following{/other_user}", "gists_url": "https://api.github.com/users/cactorium/gists{/gist_id}", "starred_url": "https://api.github.com/users/cactorium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cactorium/subscriptions", "organizations_url": "https://api.github.com/users/cactorium/orgs", "repos_url": "https://api.github.com/users/cactorium/repos", "events_url": "https://api.github.com/users/cactorium/events{/privacy}", "received_events_url": "https://api.github.com/users/cactorium/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba1192835b6e76c1bf3d86a23e0e91b847d4d61f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba1192835b6e76c1bf3d86a23e0e91b847d4d61f", "html_url": "https://github.com/rust-lang/rust/commit/ba1192835b6e76c1bf3d86a23e0e91b847d4d61f"}], "stats": {"total": 56, "additions": 53, "deletions": 3}, "files": [{"sha": "2d1bf16727617427476572c6b43068643f93c597", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 53, "deletions": 3, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/d6227dcd6e139c3f598cd6e937cc59214e254ca6/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6227dcd6e139c3f598cd6e937cc59214e254ca6/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=d6227dcd6e139c3f598cd6e937cc59214e254ca6", "patch": "@@ -303,10 +303,63 @@ number cannot be negative.\n E0307: r##\"\n The length of an array is part of its type. For this reason, this length must be\n a compile-time constant.\n+\"##, \n+\n+E0308: r##\"\n+This error occurs when the compiler was unable to infer the concrete type of a\n+variable. This error can occur for several cases, the most common of which is\n+that there is a mismatch in the expected type that the compiler inferred, and\n+the actual type that the user defined a variable as.\n+\n+let a: char = 7;    // An integral type can't contained in a character, so \n+                    // there is a mismatch.\n+\n+let b: u32 = 7;     // Either use the right type...\n+let c = 7;          // ...or let the compiler infer it.\n+\n+let d: char = c;    // This also causes a mismatch because c is some sort\n+                    // of number whereas d is definitely a character.\n+\"##,\n+\n+E0309: r##\"\n+Types in type definitions have lifetimes associated with them that represent\n+how long the data stored within them is guaranteed to be live. This lifetime\n+must be as long as the data needs to be alive, and missing the constraint that\n+denotes this will cause this error.\n+\n+// This won't compile because T is not constrained, meaning the data\n+// stored in it is not guaranteed to last as long as the reference\n+struct Foo<'a, T> {\n+    foo: &'a T\n+}\n+\n+// This will compile, because it has the constraint on the type parameter\n+struct Foo<'a, T: 'a> {\n+    foo: &'a T\n+}\n+\"##,\n+\n+E0310: r##\"\n+Types in type definitions have lifetimes associated with them that represent\n+how long the data stored within them is guaranteed to be live. This lifetime\n+must be as long as the data needs to be alive, and missing the constraint that\n+denotes this will cause this error.\n+\n+// This won't compile because T is not constrained to the static lifetime\n+// the reference needs\n+struct Foo<T> {\n+    foo: &'static T\n+}\n+\n+// This will compile, because it has the constraint on the type parameter\n+struct Foo<T: 'static> {\n+    foo: &'static T\n+}\n \"##\n \n }\n \n+\n register_diagnostics! {\n     E0009,\n     E0010,\n@@ -363,9 +416,6 @@ register_diagnostics! {\n     E0300, // unexpanded macro\n     E0304, // expected signed integer constant\n     E0305, // expected constant\n-    E0308,\n-    E0309, // thing may not live long enough\n-    E0310, // thing may not live long enough\n     E0311, // thing may not live long enough\n     E0312, // lifetime of reference outlives lifetime of borrowed content\n     E0313, // lifetime of borrowed pointer outlives lifetime of captured variable"}]}