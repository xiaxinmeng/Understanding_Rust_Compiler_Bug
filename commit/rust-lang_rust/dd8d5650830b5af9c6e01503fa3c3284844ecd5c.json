{"sha": "dd8d5650830b5af9c6e01503fa3c3284844ecd5c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkOGQ1NjUwODMwYjVhZjljNmUwMTUwM2ZhM2MzMjg0ODQ0ZWNkNWM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-09-27T22:12:23Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-09-27T23:54:19Z"}, "message": "rustdoc: Include source files with documentation\n\nAll items have source links back to their actual code. Source files can be\nomitted with the doc(html_no_source) attribute on the crate. Currently there is\nno syntax highlighting, but that will come with syntax highlighting with all\nother snippets.\n\nCloses #2072", "tree": {"sha": "53c7e9c567ea02eb6f6dfd9015a4f56cdd6a50c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/53c7e9c567ea02eb6f6dfd9015a4f56cdd6a50c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd8d5650830b5af9c6e01503fa3c3284844ecd5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd8d5650830b5af9c6e01503fa3c3284844ecd5c", "html_url": "https://github.com/rust-lang/rust/commit/dd8d5650830b5af9c6e01503fa3c3284844ecd5c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd8d5650830b5af9c6e01503fa3c3284844ecd5c/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b93678eca55fc6fcd6bfeb8f97613ebc52bc31a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/b93678eca55fc6fcd6bfeb8f97613ebc52bc31a7", "html_url": "https://github.com/rust-lang/rust/commit/b93678eca55fc6fcd6bfeb8f97613ebc52bc31a7"}], "stats": {"total": 225, "additions": 213, "deletions": 12}, "files": [{"sha": "75bc442bd548cdf1f8c363f442c82cfd7add57d1", "filename": "src/librustdoc/clean.rs", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/dd8d5650830b5af9c6e01503fa3c3284844ecd5c/src%2Flibrustdoc%2Fclean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd8d5650830b5af9c6e01503fa3c3284844ecd5c/src%2Flibrustdoc%2Fclean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean.rs?ref=dd8d5650830b5af9c6e01503fa3c3284844ecd5c", "patch": "@@ -84,7 +84,7 @@ impl Clean<Crate> for visit_ast::RustdocVisitor {\n #[deriving(Clone, Encodable, Decodable)]\n pub struct Item {\n     /// Stringified span\n-    source: ~str,\n+    source: Span,\n     /// Not everything has a name. E.g., impls\n     name: Option<~str>,\n     attrs: ~[Attribute],\n@@ -737,10 +737,28 @@ impl Clean<VariantKind> for ast::variant_kind {\n     }\n }\n \n-impl Clean<~str> for syntax::codemap::Span {\n-    fn clean(&self) -> ~str {\n-        let cm = local_data::get(super::ctxtkey, |x| x.unwrap().clone()).sess.codemap;\n-        cm.span_to_str(*self)\n+#[deriving(Clone, Encodable, Decodable)]\n+pub struct Span {\n+    filename: ~str,\n+    loline: uint,\n+    locol: uint,\n+    hiline: uint,\n+    hicol: uint,\n+}\n+\n+impl Clean<Span> for syntax::codemap::Span {\n+    fn clean(&self) -> Span {\n+        let cm = local_data::get(super::ctxtkey, |x| *x.unwrap()).sess.codemap;\n+        let filename = cm.span_to_filename(*self);\n+        let lo = cm.lookup_char_pos(self.lo);\n+        let hi = cm.lookup_char_pos(self.hi);\n+        Span {\n+            filename: filename.to_owned(),\n+            loline: lo.line,\n+            locol: *lo.col,\n+            hiline: hi.line,\n+            hicol: *hi.col,\n+        }\n     }\n }\n \n@@ -1034,7 +1052,7 @@ trait ToSource {\n \n impl ToSource for syntax::codemap::Span {\n     fn to_src(&self) -> ~str {\n-        debug!(\"converting span %s to snippet\", self.clean());\n+        debug!(\"converting span %? to snippet\", self.clean());\n         let cm = local_data::get(super::ctxtkey, |x| x.unwrap().clone()).sess.codemap.clone();\n         let sn = match cm.span_to_snippet(*self) {\n             Some(x) => x,"}, {"sha": "076d43e2c127cf1c2ff8f1d7dd532712134057d0", "filename": "src/librustdoc/html/escape.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/dd8d5650830b5af9c6e01503fa3c3284844ecd5c/src%2Flibrustdoc%2Fhtml%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd8d5650830b5af9c6e01503fa3c3284844ecd5c/src%2Flibrustdoc%2Fhtml%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fescape.rs?ref=dd8d5650830b5af9c6e01503fa3c3284844ecd5c", "patch": "@@ -0,0 +1,44 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::fmt;\n+\n+pub struct Escape<'self>(&'self str);\n+\n+impl<'self> fmt::Default for Escape<'self> {\n+    fn fmt(s: &Escape<'self>, fmt: &mut fmt::Formatter) {\n+        // Because the internet is always right, turns out there's not that many\n+        // characters to escape: http://stackoverflow.com/questions/7381974\n+        let pile_o_bits = s.as_slice();\n+        let mut last = 0;\n+        for (i, ch) in s.byte_iter().enumerate() {\n+            match ch as char {\n+                '<' | '>' | '&' | '\\'' | '\"' => {\n+                    fmt.buf.write(pile_o_bits.slice(last, i).as_bytes());\n+                    let s = match ch as char {\n+                        '>' => \"&gt;\",\n+                        '<' => \"&lt;\",\n+                        '&' => \"&amp;\",\n+                        '\\'' => \"&#39;\",\n+                        '\"' => \"&quot;\",\n+                        _ => unreachable!()\n+                    };\n+                    fmt.buf.write(s.as_bytes());\n+                    last = i + 1;\n+                }\n+                _ => {}\n+            }\n+        }\n+\n+        if last < s.len() {\n+            fmt.buf.write(pile_o_bits.slice_from(last).as_bytes());\n+        }\n+    }\n+}"}, {"sha": "d29bf5ed55b587384ac92e7e92102e242a3c33c6", "filename": "src/librustdoc/html/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd8d5650830b5af9c6e01503fa3c3284844ecd5c/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd8d5650830b5af9c6e01503fa3c3284844ecd5c/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Flayout.rs?ref=dd8d5650830b5af9c6e01503fa3c3284844ecd5c", "patch": "@@ -67,7 +67,7 @@ pub fn render<T: fmt::Default, S: fmt::Default>(\n     </nav>\n \n     <section id='main' class=\\\"content {ty}\\\">{content}</section>\n-    <section id='search' class=\\\"content hidden\\\">{content}</section>\n+    <section id='search' class=\\\"content hidden\\\"></section>\n \n     <section class=\\\"footer\\\"></section>\n "}, {"sha": "4bb255bf5aa2c0a7597d83e6383f1eb317eca376", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 138, "deletions": 3, "changes": 141, "blob_url": "https://github.com/rust-lang/rust/blob/dd8d5650830b5af9c6e01503fa3c3284844ecd5c/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd8d5650830b5af9c6e01503fa3c3284844ecd5c/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=dd8d5650830b5af9c6e01503fa3c3284844ecd5c", "patch": "@@ -12,12 +12,14 @@ use std::cell::Cell;\n use std::comm::{SharedPort, SharedChan};\n use std::comm;\n use std::fmt;\n-use std::hashmap::HashMap;\n+use std::hashmap::{HashMap, HashSet};\n use std::local_data;\n use std::rt::io::buffered::BufferedWriter;\n use std::rt::io::file::{FileInfo, DirectoryInfo};\n use std::rt::io::file;\n use std::rt::io;\n+use std::rt::io::Reader;\n+use std::str;\n use std::task;\n use std::unstable::finally::Finally;\n use std::util;\n@@ -33,6 +35,7 @@ use syntax::attr;\n use clean;\n use doctree;\n use fold::DocFolder;\n+use html::escape::Escape;\n use html::format::{VisSpace, Method, PuritySpace};\n use html::layout;\n use html::markdown::Markdown;\n@@ -44,6 +47,7 @@ pub struct Context {\n     dst: Path,\n     layout: layout::Layout,\n     sidebar: HashMap<~str, ~[~str]>,\n+    include_sources: bool,\n }\n \n enum Implementor {\n@@ -68,6 +72,12 @@ struct Cache {\n     priv search_index: ~[IndexItem],\n }\n \n+struct SourceCollector<'self> {\n+    seen: HashSet<~str>,\n+    dst: Path,\n+    cx: &'self Context,\n+}\n+\n struct Item<'self> { cx: &'self Context, item: &'self clean::Item, }\n struct Sidebar<'self> { cx: &'self Context, item: &'self clean::Item, }\n \n@@ -79,6 +89,8 @@ struct IndexItem {\n     parent: Option<ast::NodeId>,\n }\n \n+struct Source<'self>(&'self str);\n+\n local_data_key!(pub cache_key: RWArc<Cache>)\n local_data_key!(pub current_location_key: ~[~str])\n \n@@ -94,6 +106,7 @@ pub fn run(mut crate: clean::Crate, dst: Path) {\n             favicon: ~\"\",\n             crate: crate.name.clone(),\n         },\n+        include_sources: true,\n     };\n     mkdir(&cx.dst);\n \n@@ -107,6 +120,9 @@ pub fn run(mut crate: clean::Crate, dst: Path) {\n                     clean::NameValue(~\"html_logo_url\", ref s) => {\n                         cx.layout.logo = s.to_owned();\n                     }\n+                    clean::Word(~\"html_no_source\") => {\n+                        cx.include_sources = false;\n+                    }\n                     _ => {}\n                 }\n             }\n@@ -162,6 +178,19 @@ pub fn run(mut crate: clean::Crate, dst: Path) {\n         w.flush();\n     }\n \n+    if cx.include_sources {\n+        let dst = cx.dst.push(\"src\");\n+        mkdir(&dst);\n+        let dst = dst.push(crate.name);\n+        mkdir(&dst);\n+        let mut folder = SourceCollector {\n+            dst: dst,\n+            seen: HashSet::new(),\n+            cx: &cx,\n+        };\n+        crate = folder.fold_crate(crate);\n+    }\n+\n     // Now render the whole crate.\n     cx.crate(crate, cache);\n }\n@@ -183,7 +212,80 @@ fn mkdir(path: &Path) {\n     }\n }\n \n-impl<'self> DocFolder for Cache {\n+fn clean_srcpath(src: &str, f: &fn(&str)) {\n+    let p = Path(src);\n+    for c in p.components.iter() {\n+        if \".\" == *c {\n+            loop\n+        }\n+        if \"..\" == *c {\n+            f(\"up\");\n+        } else {\n+            f(c.as_slice())\n+        }\n+    }\n+}\n+\n+impl<'self> DocFolder for SourceCollector<'self> {\n+    fn fold_item(&mut self, item: clean::Item) -> Option<clean::Item> {\n+        if !self.seen.contains(&item.source.filename) {\n+            self.emit_source(item.source.filename);\n+            self.seen.insert(item.source.filename.clone());\n+        }\n+        self.fold_item_recur(item)\n+    }\n+}\n+\n+impl<'self> SourceCollector<'self> {\n+    fn emit_source(&self, filename: &str) {\n+        let p = Path(filename);\n+\n+        // Read the contents of the file\n+        let mut contents = ~[];\n+        {\n+            let mut buf = [0, ..1024];\n+            let r = do io::io_error::cond.trap(|_| {}).inside {\n+                p.open_reader(io::Open)\n+            };\n+            // If we couldn't open this file, then just returns because it\n+            // probably means that it's some standard library macro thing and we\n+            // can't have the source to it anyway.\n+            let mut r = match r { Some(r) => r, None => return };\n+\n+            // read everything\n+            loop {\n+                match r.read(buf) {\n+                    Some(n) => contents.push_all(buf.slice_to(n)),\n+                    None => break\n+                }\n+            }\n+        }\n+        let contents = str::from_utf8_owned(contents);\n+\n+        // Create the intermediate directories\n+        let mut cur = self.dst.clone();\n+        let mut root_path = ~\"../../\";\n+        do clean_srcpath(p.pop().to_str()) |component| {\n+            cur = cur.push(component);\n+            mkdir(&cur);\n+            root_path.push_str(\"../\");\n+        }\n+\n+        let dst = cur.push(*p.components.last() + \".html\");\n+        let mut w = dst.open_writer(io::CreateOrTruncate);\n+\n+        let title = format!(\"{} -- source\", *dst.components.last());\n+        let page = layout::Page {\n+            title: title,\n+            ty: \"source\",\n+            root_path: root_path,\n+        };\n+        layout::render(&mut w as &mut io::Writer, &self.cx.layout,\n+                       &page, &(\"\"), &Source(contents.as_slice()));\n+    }\n+}\n+\n+impl DocFolder for Cache {\n     fn fold_item(&mut self, item: clean::Item) -> Option<clean::Item> {\n         // Register any generics to their corresponding string. This is used\n         // when pretty-printing types\n@@ -380,7 +482,6 @@ impl Context {\n         return ret;\n     }\n \n-    /// Processes\n     fn crate(self, mut crate: clean::Crate, cache: Cache) {\n         enum Work {\n             Die,\n@@ -565,6 +666,20 @@ impl<'self> fmt::Default for Item<'self> {\n             None => {}\n         }\n \n+        if it.cx.include_sources {\n+            let mut path = ~[];\n+            do clean_srcpath(it.item.source.filename) |component| {\n+                path.push(component.to_owned());\n+            }\n+            write!(fmt.buf,\n+                   \"<a class='source'\n+                       href='{root}src/{crate}/{path}.html\\\\#{line}'>[src]</a>\",\n+                   root = it.cx.root_path,\n+                   crate = it.cx.layout.crate,\n+                   path = path.connect(\"/\"),\n+                   line = it.item.source.loline);\n+        }\n+\n         // Write the breadcrumb trail header for the top\n         write!(fmt.buf, \"<h1 class='fqn'>\");\n         match it.item.inner {\n@@ -1180,3 +1295,23 @@ fn build_sidebar(m: &clean::Module) -> HashMap<~str, ~[~str]> {\n     }\n     return map;\n }\n+\n+impl<'self> fmt::Default for Source<'self> {\n+    fn fmt(s: &Source<'self>, fmt: &mut fmt::Formatter) {\n+        let lines = s.line_iter().len();\n+        let mut cols = 0;\n+        let mut tmp = lines;\n+        while tmp > 0 {\n+            cols += 1;\n+            tmp /= 10;\n+        }\n+        write!(fmt.buf, \"<pre class='line-numbers'>\");\n+        for i in range(1, lines + 1) {\n+            write!(fmt.buf, \"<span id='{0}'>{0:1$u}</span>\\n\", i, cols);\n+        }\n+        write!(fmt.buf, \"</pre>\");\n+        write!(fmt.buf, \"<pre class='rust'>\");\n+        write!(fmt.buf, \"{}\", Escape(s.as_slice()));\n+        write!(fmt.buf, \"</pre>\");\n+    }\n+}"}, {"sha": "2366a530a877c1c1872f748114a32b0730a7f329", "filename": "src/librustdoc/html/static/main.css", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd8d5650830b5af9c6e01503fa3c3284844ecd5c/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.css", "raw_url": "https://github.com/rust-lang/rust/raw/dd8d5650830b5af9c6e01503fa3c3284844ecd5c/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.css?ref=dd8d5650830b5af9c6e01503fa3c3284844ecd5c", "patch": "@@ -119,6 +119,9 @@ body {\n .content h1, .content h2 { margin-left: -20px; }\n .content pre { padding: 20px; }\n \n+.content pre.line-numbers { float: left; border: none; }\n+.line-numbers span { color: #c67e2d; }\n+\n .content .highlighted {\n     cursor: pointer;\n     color: #000 !important;"}, {"sha": "3cb37f5e15cc41ccc008bbc8a96e55e4b853cf02", "filename": "src/librustdoc/rustdoc.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dd8d5650830b5af9c6e01503fa3c3284844ecd5c/src%2Flibrustdoc%2Frustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd8d5650830b5af9c6e01503fa3c3284844ecd5c/src%2Flibrustdoc%2Frustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Frustdoc.rs?ref=dd8d5650830b5af9c6e01503fa3c3284844ecd5c", "patch": "@@ -34,10 +34,11 @@ pub mod core;\n pub mod doctree;\n pub mod fold;\n pub mod html {\n-    pub mod render;\n+    pub mod escape;\n+    pub mod format;\n     pub mod layout;\n     pub mod markdown;\n-    pub mod format;\n+    pub mod render;\n }\n pub mod passes;\n pub mod plugins;"}]}