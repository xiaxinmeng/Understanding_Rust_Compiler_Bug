{"sha": "0d2abe46ca810dfab7db9e89977b751eca103084", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkMmFiZTQ2Y2E4MTBkZmFiN2RiOWU4OTk3N2I3NTFlY2ExMDMwODQ=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2018-10-31T21:41:57Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2018-10-31T21:45:26Z"}, "message": "Use `SmallVec` for the inner vectors in `MatcherPos::matches`.\n\nThis avoids some allocations.", "tree": {"sha": "03d837ce29afbc40f0f5c55410333990d1c52241", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/03d837ce29afbc40f0f5c55410333990d1c52241"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d2abe46ca810dfab7db9e89977b751eca103084", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d2abe46ca810dfab7db9e89977b751eca103084", "html_url": "https://github.com/rust-lang/rust/commit/0d2abe46ca810dfab7db9e89977b751eca103084", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d2abe46ca810dfab7db9e89977b751eca103084/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c60ed5d22c4c2a4885fdfdfa8c6b008d79b0fc29", "url": "https://api.github.com/repos/rust-lang/rust/commits/c60ed5d22c4c2a4885fdfdfa8c6b008d79b0fc29", "html_url": "https://github.com/rust-lang/rust/commit/c60ed5d22c4c2a4885fdfdfa8c6b008d79b0fc29"}], "stats": {"total": 12, "additions": 7, "deletions": 5}, "files": [{"sha": "38bbfc6b4c375f1f3e11f25ac2b4634e8434fde2", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0d2abe46ca810dfab7db9e89977b751eca103084/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d2abe46ca810dfab7db9e89977b751eca103084/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=0d2abe46ca810dfab7db9e89977b751eca103084", "patch": "@@ -143,6 +143,8 @@ struct MatcherTtFrame<'a> {\n     idx: usize,\n }\n \n+type NamedMatchVec = SmallVec<[NamedMatch; 4]>;\n+\n /// Represents a single \"position\" (aka \"matcher position\", aka \"item\"), as described in the module\n /// documentation.\n #[derive(Clone)]\n@@ -168,7 +170,7 @@ struct MatcherPos<'a> {\n     /// all bound matches from the submatcher into the shared top-level `matches` vector. If `sep`\n     /// and `up` are `Some`, then `matches` is _not_ the shared top-level list. Instead, if one\n     /// wants the shared `matches`, one should use `up.matches`.\n-    matches: Box<[Rc<Vec<NamedMatch>>]>,\n+    matches: Box<[Rc<NamedMatchVec>]>,\n     /// The position in `matches` corresponding to the first metavar in this matcher's sequence of\n     /// token trees. In other words, the first metavar in the first token of `top_elts` corresponds\n     /// to `matches[match_lo]`.\n@@ -279,11 +281,11 @@ pub fn count_names(ms: &[TokenTree]) -> usize {\n }\n \n /// `len` `Vec`s (initially shared and empty) that will store matches of metavars.\n-fn create_matches(len: usize) -> Box<[Rc<Vec<NamedMatch>>]> {\n+fn create_matches(len: usize) -> Box<[Rc<NamedMatchVec>]> {\n     if len == 0 {\n         vec![]\n     } else {\n-        let empty_matches = Rc::new(Vec::new());\n+        let empty_matches = Rc::new(SmallVec::new());\n         vec![empty_matches.clone(); len]\n     }.into_boxed_slice()\n }\n@@ -337,7 +339,7 @@ fn initial_matcher_pos(ms: &[TokenTree], open: Span) -> MatcherPos {\n /// token tree it was derived from.\n #[derive(Debug, Clone)]\n pub enum NamedMatch {\n-    MatchedSeq(Rc<Vec<NamedMatch>>, DelimSpan),\n+    MatchedSeq(Rc<NamedMatchVec>, DelimSpan),\n     MatchedNonterminal(Rc<Nonterminal>),\n }\n \n@@ -545,7 +547,7 @@ fn inner_parse_loop<'a>(\n                         new_item.match_cur += seq.num_captures;\n                         new_item.idx += 1;\n                         for idx in item.match_cur..item.match_cur + seq.num_captures {\n-                            new_item.push_match(idx, MatchedSeq(Rc::new(vec![]), sp));\n+                            new_item.push_match(idx, MatchedSeq(Rc::new(smallvec![]), sp));\n                         }\n                         cur_items.push(new_item);\n                     }"}]}