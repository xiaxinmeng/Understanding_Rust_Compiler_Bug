{"sha": "13775d23048426dd7223a3393fe7ad8fc44024ea", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzNzc1ZDIzMDQ4NDI2ZGQ3MjIzYTMzOTNmZTdhZDhmYzQ0MDI0ZWE=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-07-23T16:51:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-07-23T16:51:09Z"}, "message": "Rollup merge of #62804 - lundibundi:help-infer-const-static, r=eddyb\n\nrustc_typeck: improve diagnostics for _ const/static declarations\n\nThis continues https://github.com/rust-lang/rust/pull/62694 and adds type suggestions to const/static declarations with `_` type.\n\nr? @eddyb", "tree": {"sha": "377e2f5b675a52569786f001e7a23fc02ac7056a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/377e2f5b675a52569786f001e7a23fc02ac7056a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13775d23048426dd7223a3393fe7ad8fc44024ea", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdNzr9CRBK7hj4Ov3rIwAAdHIIAAoW9ID/gr4T9XntgnXBmuFb\n7j8xS2LV/zkSpFjymelSca9mASlpfrKS64b9cH0sHePwZUqlSGaU7gggPRKa98OX\nwcSe2adRCpaAfI6EsyJYy9QYf4MI7OFdtcrOOTbZ6TLmvhyPAx5uK4Go5g+lHxY1\nBGeSLrnfEeczvWzs+hyfpqcdBuUIykkJ593N3hmsLtPC6QhYNTLtI31nf4yJljIs\nQhmUaKR3mdhnBf7yRSa3o6OhdzSUTCW+dqrMGdBqNpdv1jdEgSOXwy2+lCtzbvw/\nZrSnU28EAopzmTllIcJh48uIEpRGqs8iLY39Mx+n8vR2vxLqSD+lQtPFfiWa0jk=\n=Wkbr\n-----END PGP SIGNATURE-----\n", "payload": "tree 377e2f5b675a52569786f001e7a23fc02ac7056a\nparent ab7149bdc5da8b982f99acf619c6336b45cde552\nparent c6e027de52be7acd006e874500ac6a2095f888be\nauthor Mark Rousskov <mark.simulacrum@gmail.com> 1563900669 -0400\ncommitter GitHub <noreply@github.com> 1563900669 -0400\n\nRollup merge of #62804 - lundibundi:help-infer-const-static, r=eddyb\n\nrustc_typeck: improve diagnostics for _ const/static declarations\n\nThis continues https://github.com/rust-lang/rust/pull/62694 and adds type suggestions to const/static declarations with `_` type.\n\nr? @eddyb\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13775d23048426dd7223a3393fe7ad8fc44024ea", "html_url": "https://github.com/rust-lang/rust/commit/13775d23048426dd7223a3393fe7ad8fc44024ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13775d23048426dd7223a3393fe7ad8fc44024ea/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab7149bdc5da8b982f99acf619c6336b45cde552", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab7149bdc5da8b982f99acf619c6336b45cde552", "html_url": "https://github.com/rust-lang/rust/commit/ab7149bdc5da8b982f99acf619c6336b45cde552"}, {"sha": "c6e027de52be7acd006e874500ac6a2095f888be", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6e027de52be7acd006e874500ac6a2095f888be", "html_url": "https://github.com/rust-lang/rust/commit/c6e027de52be7acd006e874500ac6a2095f888be"}], "stats": {"total": 165, "additions": 139, "deletions": 26}, "files": [{"sha": "21cd4b694ae4ca625047e323b6b12d9f597ba8b8", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/13775d23048426dd7223a3393fe7ad8fc44024ea/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13775d23048426dd7223a3393fe7ad8fc44024ea/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=13775d23048426dd7223a3393fe7ad8fc44024ea", "patch": "@@ -759,40 +759,40 @@ fn adt_destructor(tcx: TyCtxt<'_>, def_id: DefId) -> Option<ty::Destructor> {\n fn primary_body_of(\n     tcx: TyCtxt<'_>,\n     id: hir::HirId,\n-) -> Option<(hir::BodyId, Option<&hir::FnHeader>, Option<&hir::FnDecl>)> {\n+) -> Option<(hir::BodyId, Option<&hir::Ty>, Option<&hir::FnHeader>, Option<&hir::FnDecl>)> {\n     match tcx.hir().get(id) {\n         Node::Item(item) => {\n             match item.node {\n-                hir::ItemKind::Const(_, body) |\n-                hir::ItemKind::Static(_, _, body) =>\n-                    Some((body, None, None)),\n+                hir::ItemKind::Const(ref ty, body) |\n+                hir::ItemKind::Static(ref ty, _, body) =>\n+                    Some((body, Some(ty), None, None)),\n                 hir::ItemKind::Fn(ref decl, ref header, .., body) =>\n-                    Some((body, Some(header), Some(decl))),\n+                    Some((body, None, Some(header), Some(decl))),\n                 _ =>\n                     None,\n             }\n         }\n         Node::TraitItem(item) => {\n             match item.node {\n-                hir::TraitItemKind::Const(_, Some(body)) =>\n-                    Some((body, None, None)),\n+                hir::TraitItemKind::Const(ref ty, Some(body)) =>\n+                    Some((body, Some(ty), None, None)),\n                 hir::TraitItemKind::Method(ref sig, hir::TraitMethod::Provided(body)) =>\n-                    Some((body, Some(&sig.header), Some(&sig.decl))),\n+                    Some((body, None, Some(&sig.header), Some(&sig.decl))),\n                 _ =>\n                     None,\n             }\n         }\n         Node::ImplItem(item) => {\n             match item.node {\n-                hir::ImplItemKind::Const(_, body) =>\n-                    Some((body, None, None)),\n+                hir::ImplItemKind::Const(ref ty, body) =>\n+                    Some((body, Some(ty), None, None)),\n                 hir::ImplItemKind::Method(ref sig, body) =>\n-                    Some((body, Some(&sig.header), Some(&sig.decl))),\n+                    Some((body, None, Some(&sig.header), Some(&sig.decl))),\n                 _ =>\n                     None,\n             }\n         }\n-        Node::AnonConst(constant) => Some((constant.body, None, None)),\n+        Node::AnonConst(constant) => Some((constant.body, None, None, None)),\n         _ => None,\n     }\n }\n@@ -825,7 +825,7 @@ fn typeck_tables_of(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::TypeckTables<'_> {\n     let span = tcx.hir().span(id);\n \n     // Figure out what primary body this item has.\n-    let (body_id, fn_header, fn_decl) = primary_body_of(tcx, id)\n+    let (body_id, body_ty, fn_header, fn_decl) = primary_body_of(tcx, id)\n         .unwrap_or_else(|| {\n             span_bug!(span, \"can't type-check body of {:?}\", def_id);\n         });\n@@ -856,7 +856,10 @@ fn typeck_tables_of(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::TypeckTables<'_> {\n             fcx\n         } else {\n             let fcx = FnCtxt::new(&inh, param_env, body.value.hir_id);\n-            let expected_type = tcx.type_of(def_id);\n+            let expected_type = body_ty.and_then(|ty| match ty.node {\n+                hir::TyKind::Infer => Some(AstConv::ast_ty_to_ty(&fcx, ty)),\n+                _ => None\n+            }).unwrap_or_else(|| tcx.type_of(def_id));\n             let expected_type = fcx.normalize_associated_types_in(body.value.span, &expected_type);\n             fcx.require_type_is_sized(expected_type, body.value.span, traits::ConstSized);\n "}, {"sha": "053ef1f8f8297a2c640045eb7a601d1c2f6c9e68", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 47, "deletions": 6, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/13775d23048426dd7223a3393fe7ad8fc44024ea/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13775d23048426dd7223a3393fe7ad8fc44024ea/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=13775d23048426dd7223a3393fe7ad8fc44024ea", "patch": "@@ -1135,6 +1135,26 @@ fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n     checked_type_of(tcx, def_id, true).unwrap()\n }\n \n+fn infer_placeholder_type(\n+    tcx: TyCtxt<'_>,\n+    def_id: DefId,\n+    body_id: hir::BodyId,\n+    span: Span,\n+) -> Ty<'_> {\n+    let ty = tcx.typeck_tables_of(def_id).node_type(body_id.hir_id);\n+    let mut diag = bad_placeholder_type(tcx, span);\n+    if ty != tcx.types.err {\n+        diag.span_suggestion(\n+            span,\n+            \"replace `_` with the correct type\",\n+            ty.to_string(),\n+            Applicability::MaybeIncorrect,\n+        );\n+    }\n+    diag.emit();\n+    ty\n+}\n+\n /// Same as [`type_of`] but returns [`Option`] instead of failing.\n ///\n /// If you want to fail anyway, you can set the `fail` parameter to true, but in this case,\n@@ -1160,7 +1180,16 @@ pub fn checked_type_of(tcx: TyCtxt<'_>, def_id: DefId, fail: bool) -> Option<Ty<\n                 let substs = InternalSubsts::identity_for_item(tcx, def_id);\n                 tcx.mk_fn_def(def_id, substs)\n             }\n-            TraitItemKind::Const(ref ty, _) | TraitItemKind::Type(_, Some(ref ty)) => icx.to_ty(ty),\n+            TraitItemKind::Const(ref ty, body_id)  => {\n+                body_id.and_then(|body_id| {\n+                    if let hir::TyKind::Infer = ty.node {\n+                        Some(infer_placeholder_type(tcx, def_id, body_id, ty.span))\n+                    } else {\n+                        None\n+                    }\n+                }).unwrap_or_else(|| icx.to_ty(ty))\n+            },\n+            TraitItemKind::Type(_, Some(ref ty)) => icx.to_ty(ty),\n             TraitItemKind::Type(_, None) => {\n                 if !fail {\n                     return None;\n@@ -1174,7 +1203,13 @@ pub fn checked_type_of(tcx: TyCtxt<'_>, def_id: DefId, fail: bool) -> Option<Ty<\n                 let substs = InternalSubsts::identity_for_item(tcx, def_id);\n                 tcx.mk_fn_def(def_id, substs)\n             }\n-            ImplItemKind::Const(ref ty, _) => icx.to_ty(ty),\n+            ImplItemKind::Const(ref ty, body_id) => {\n+                if let hir::TyKind::Infer = ty.node {\n+                    infer_placeholder_type(tcx, def_id, body_id, ty.span)\n+                } else {\n+                    icx.to_ty(ty)\n+                }\n+            },\n             ImplItemKind::Existential(_) => {\n                 if tcx\n                     .impl_trait_ref(tcx.hir().get_parent_did(hir_id))\n@@ -1199,10 +1234,16 @@ pub fn checked_type_of(tcx: TyCtxt<'_>, def_id: DefId, fail: bool) -> Option<Ty<\n \n         Node::Item(item) => {\n             match item.node {\n-                ItemKind::Static(ref t, ..)\n-                | ItemKind::Const(ref t, _)\n-                | ItemKind::Ty(ref t, _)\n-                | ItemKind::Impl(.., ref t, _) => icx.to_ty(t),\n+                ItemKind::Static(ref ty, .., body_id)\n+                | ItemKind::Const(ref ty, body_id) => {\n+                    if let hir::TyKind::Infer = ty.node {\n+                        infer_placeholder_type(tcx, def_id, body_id, ty.span)\n+                    } else {\n+                        icx.to_ty(ty)\n+                    }\n+                },\n+                ItemKind::Ty(ref ty, _)\n+                | ItemKind::Impl(.., ref ty, _) => icx.to_ty(ty),\n                 ItemKind::Fn(..) => {\n                     let substs = InternalSubsts::identity_for_item(tcx, def_id);\n                     tcx.mk_fn_def(def_id, substs)"}, {"sha": "beb8941320bc2d83bb20dc4420345200a0b01480", "filename": "src/test/ui/error-codes/E0121.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/13775d23048426dd7223a3393fe7ad8fc44024ea/src%2Ftest%2Fui%2Ferror-codes%2FE0121.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13775d23048426dd7223a3393fe7ad8fc44024ea/src%2Ftest%2Fui%2Ferror-codes%2FE0121.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0121.stderr?ref=13775d23048426dd7223a3393fe7ad8fc44024ea", "patch": "@@ -11,7 +11,10 @@ error[E0121]: the type placeholder `_` is not allowed within types on item signa\n   --> $DIR/E0121.rs:3:13\n    |\n LL | static BAR: _ = \"test\";\n-   |             ^ not allowed in type signatures\n+   |             ^\n+   |             |\n+   |             not allowed in type signatures\n+   |             help: replace `_` with the correct type: `&'static str`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "2b4d9966c3d0b50259e1f64cd57839b3085d7b2b", "filename": "src/test/ui/typeck/typeck_type_placeholder_item.stderr", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/13775d23048426dd7223a3393fe7ad8fc44024ea/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13775d23048426dd7223a3393fe7ad8fc44024ea/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr?ref=13775d23048426dd7223a3393fe7ad8fc44024ea", "patch": "@@ -23,13 +23,19 @@ error[E0121]: the type placeholder `_` is not allowed within types on item signa\n   --> $DIR/typeck_type_placeholder_item.rs:11:15\n    |\n LL | static TEST3: _ = \"test\";\n-   |               ^ not allowed in type signatures\n+   |               ^\n+   |               |\n+   |               not allowed in type signatures\n+   |               help: replace `_` with the correct type: `&'static str`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n   --> $DIR/typeck_type_placeholder_item.rs:14:15\n    |\n LL | static TEST4: _ = 145;\n-   |               ^ not allowed in type signatures\n+   |               ^\n+   |               |\n+   |               not allowed in type signatures\n+   |               help: replace `_` with the correct type: `i32`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n   --> $DIR/typeck_type_placeholder_item.rs:17:16\n@@ -122,13 +128,19 @@ error[E0121]: the type placeholder `_` is not allowed within types on item signa\n   --> $DIR/typeck_type_placeholder_item.rs:64:22\n    |\n LL |     static FN_TEST3: _ = \"test\";\n-   |                      ^ not allowed in type signatures\n+   |                      ^\n+   |                      |\n+   |                      not allowed in type signatures\n+   |                      help: replace `_` with the correct type: `&'static str`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n   --> $DIR/typeck_type_placeholder_item.rs:67:22\n    |\n LL |     static FN_TEST4: _ = 145;\n-   |                      ^ not allowed in type signatures\n+   |                      ^\n+   |                      |\n+   |                      not allowed in type signatures\n+   |                      help: replace `_` with the correct type: `i32`\n \n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n   --> $DIR/typeck_type_placeholder_item.rs:70:23"}, {"sha": "905fc35350ed02e4e38cce373dc99fcf578707c3", "filename": "src/test/ui/typeck/typeck_type_placeholder_item_help.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/13775d23048426dd7223a3393fe7ad8fc44024ea/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item_help.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13775d23048426dd7223a3393fe7ad8fc44024ea/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item_help.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item_help.rs?ref=13775d23048426dd7223a3393fe7ad8fc44024ea", "patch": "@@ -4,6 +4,24 @@\n fn test1() -> _ { Some(42) }\n //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n \n+const TEST2: _ = 42u32;\n+//~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+\n+const TEST3: _ = Some(42);\n+//~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+\n+trait Test4 {\n+    const TEST4: _ = 42;\n+    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+}\n+\n+struct Test5;\n+\n+impl Test5 {\n+    const TEST5: _ = 13;\n+    //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+}\n+\n pub fn main() {\n     let _: Option<usize> = test1();\n     let _: f64 = test1();"}, {"sha": "c5b9566290c114b9fb2de41a0b89b06921a4305e", "filename": "src/test/ui/typeck/typeck_type_placeholder_item_help.stderr", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/13775d23048426dd7223a3393fe7ad8fc44024ea/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item_help.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13775d23048426dd7223a3393fe7ad8fc44024ea/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item_help.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item_help.stderr?ref=13775d23048426dd7223a3393fe7ad8fc44024ea", "patch": "@@ -7,6 +7,42 @@ LL | fn test1() -> _ { Some(42) }\n    |               not allowed in type signatures\n    |               help: replace `_` with the correct return type: `std::option::Option<i32>`\n \n-error: aborting due to previous error\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/typeck_type_placeholder_item_help.rs:7:14\n+   |\n+LL | const TEST2: _ = 42u32;\n+   |              ^\n+   |              |\n+   |              not allowed in type signatures\n+   |              help: replace `_` with the correct type: `u32`\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/typeck_type_placeholder_item_help.rs:10:14\n+   |\n+LL | const TEST3: _ = Some(42);\n+   |              ^\n+   |              |\n+   |              not allowed in type signatures\n+   |              help: replace `_` with the correct type: `std::option::Option<i32>`\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/typeck_type_placeholder_item_help.rs:14:18\n+   |\n+LL |     const TEST4: _ = 42;\n+   |                  ^\n+   |                  |\n+   |                  not allowed in type signatures\n+   |                  help: replace `_` with the correct type: `i32`\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/typeck_type_placeholder_item_help.rs:21:18\n+   |\n+LL |     const TEST5: _ = 13;\n+   |                  ^\n+   |                  |\n+   |                  not allowed in type signatures\n+   |                  help: replace `_` with the correct type: `i32`\n+\n+error: aborting due to 5 previous errors\n \n For more information about this error, try `rustc --explain E0121`."}]}