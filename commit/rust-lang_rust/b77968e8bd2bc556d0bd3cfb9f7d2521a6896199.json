{"sha": "b77968e8bd2bc556d0bd3cfb9f7d2521a6896199", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3Nzk2OGU4YmQyYmM1NTZkMGJkM2NmYjlmN2QyNTIxYTY4OTYxOTk=", "commit": {"author": {"name": "Ozaren", "email": "krishna.sd.2012@gmail.com", "date": "2020-04-14T23:00:56Z"}, "committer": {"name": "Ozaren", "email": "krishna.sd.2012@gmail.com", "date": "2020-04-15T15:29:35Z"}, "message": "added deallocation tracking", "tree": {"sha": "62361f64f39c7fa858a1d25886a09843051d18df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62361f64f39c7fa858a1d25886a09843051d18df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b77968e8bd2bc556d0bd3cfb9f7d2521a6896199", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEy+UWfPbcfLQsh5WvzDAGYvxqilsFAl6XKGMACgkQzDAGYvxq\nilvjWw/+KRX9luUJZEcW2++UyPR7tOi4NPsK0uK9G76povkm6UQXl3sykIOtF7bz\nCTadEwijPGv68McpB2B9J+niB5//UkuorniQvuxe3oFABDtLQJT+NUA/ifd/YaI4\ntwRU7IKi2hVs5fKB5nUy8vAwnqD/Esfa/OUJioDwezqs9BQfd5wIEVLV6811DIis\nl07VxCHt1Ih+w8fc3JuEWoeu9QS0/YU9lJeuDqYZp6QOLPBEs0LDu8UfZYVG42vW\nLC/UizuLX0ptrYoX4GLLUWw11BmHhGjkW5movl7f42Xy6oftzfsO/YRfARYVhv0z\n0HaIPHWs4jgwV0/KyBvZfBUrmKMx9i+F/RLFp3QJaB7dSfFZAW5gPqAKIwQJUS+5\n9ELUysuLJmR+pXu4wfhdeWidwGaK3snymy6OWUKiuFcAPNXCs0kGJXqJN3FUiicH\nXqavp6kZRz9tPc5HD6qWfqUo/LTHnMwUa9yWq/vUYQI/7z0fEAxW2SADE3HzDVbu\nuCFdHiLSIMZbyjVX6shtbuceiWk+MWXmGW5b6dwlB/xZNfXYVrelFeG1miX+Nswf\nHIvVR+KqfC4DVKRx3j1+6OHrC0CCol9pGgKHbGZskXjVDTOdSfIc+X46t+0W8KtB\nLW1Y6lW0J5ALO4WeliGb5EK2CGAMCXgA5RHsxGyNIM7+n+TzkGY=\n=Z5TK\n-----END PGP SIGNATURE-----", "payload": "tree 62361f64f39c7fa858a1d25886a09843051d18df\nparent e4eceba7d35817494623429a8c43c47cb885c0c2\nauthor Ozaren <krishna.sd.2012@gmail.com> 1586905256 -0400\ncommitter Ozaren <krishna.sd.2012@gmail.com> 1586964575 -0400\n\nadded deallocation tracking\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b77968e8bd2bc556d0bd3cfb9f7d2521a6896199", "html_url": "https://github.com/rust-lang/rust/commit/b77968e8bd2bc556d0bd3cfb9f7d2521a6896199", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b77968e8bd2bc556d0bd3cfb9f7d2521a6896199/comments", "author": {"login": "RustyYato", "id": 16103364, "node_id": "MDQ6VXNlcjE2MTAzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/16103364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RustyYato", "html_url": "https://github.com/RustyYato", "followers_url": "https://api.github.com/users/RustyYato/followers", "following_url": "https://api.github.com/users/RustyYato/following{/other_user}", "gists_url": "https://api.github.com/users/RustyYato/gists{/gist_id}", "starred_url": "https://api.github.com/users/RustyYato/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RustyYato/subscriptions", "organizations_url": "https://api.github.com/users/RustyYato/orgs", "repos_url": "https://api.github.com/users/RustyYato/repos", "events_url": "https://api.github.com/users/RustyYato/events{/privacy}", "received_events_url": "https://api.github.com/users/RustyYato/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RustyYato", "id": 16103364, "node_id": "MDQ6VXNlcjE2MTAzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/16103364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RustyYato", "html_url": "https://github.com/RustyYato", "followers_url": "https://api.github.com/users/RustyYato/followers", "following_url": "https://api.github.com/users/RustyYato/following{/other_user}", "gists_url": "https://api.github.com/users/RustyYato/gists{/gist_id}", "starred_url": "https://api.github.com/users/RustyYato/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RustyYato/subscriptions", "organizations_url": "https://api.github.com/users/RustyYato/orgs", "repos_url": "https://api.github.com/users/RustyYato/repos", "events_url": "https://api.github.com/users/RustyYato/events{/privacy}", "received_events_url": "https://api.github.com/users/RustyYato/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4eceba7d35817494623429a8c43c47cb885c0c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4eceba7d35817494623429a8c43c47cb885c0c2", "html_url": "https://github.com/rust-lang/rust/commit/e4eceba7d35817494623429a8c43c47cb885c0c2"}], "stats": {"total": 20, "additions": 18, "deletions": 2}, "files": [{"sha": "a86de4a5551900819a1cb9023a1afa939a8aca39", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b77968e8bd2bc556d0bd3cfb9f7d2521a6896199/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/b77968e8bd2bc556d0bd3cfb9f7d2521a6896199/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=b77968e8bd2bc556d0bd3cfb9f7d2521a6896199", "patch": "@@ -192,7 +192,8 @@ Miri adds its own set of `-Z` flags:\n   for cryptographic use!  Do not generate secret keys in Miri or perform other\n   kinds of cryptographic operations that rely on proper random numbers.\n * `-Zmiri-track-alloc-id=<id>` shows a backtrace when the given allocation is\n-  being allocated.  This helps in debugging memory leaks.\n+  being allocated or freed.  This helps in debugging memory leaks and\n+  use after free bugs.\n * `-Zmiri-track-pointer-tag=<tag>` shows a backtrace when the given pointer tag\n   is popped from a borrow stack (which is where the tag becomes invalid and any\n   future use of it will error).  This helps you in finding out why UB is"}, {"sha": "8c7bb8a47c638ae13df3942c8988c215471fbbd7", "filename": "src/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b77968e8bd2bc556d0bd3cfb9f7d2521a6896199/src%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b77968e8bd2bc556d0bd3cfb9f7d2521a6896199/src%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdiagnostics.rs?ref=b77968e8bd2bc556d0bd3cfb9f7d2521a6896199", "patch": "@@ -42,6 +42,7 @@ impl MachineStopType for TerminationInfo {}\n pub enum NonHaltingDiagnostic {\n     PoppedTrackedPointerTag(Item),\n     CreatedAlloc(AllocId),\n+    FreedAlloc(AllocId),\n }\n \n /// Emit a custom diagnostic without going through the miri-engine machinery\n@@ -191,6 +192,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                         format!(\"popped tracked tag for item {:?}\", item),\n                     CreatedAlloc(AllocId(id)) =>\n                         format!(\"created allocation with id {}\", id),\n+                    FreedAlloc(AllocId(id)) =>\n+                        format!(\"freed allocation with id {}\", id),\n                 };\n                 report_msg(this, \"tracking was triggered\", msg, vec![], false);\n             }"}, {"sha": "5cf42df8268b9cbc10f3c638d9dbfe67210ad738", "filename": "src/machine.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b77968e8bd2bc556d0bd3cfb9f7d2521a6896199/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b77968e8bd2bc556d0bd3cfb9f7d2521a6896199/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=b77968e8bd2bc556d0bd3cfb9f7d2521a6896199", "patch": "@@ -116,7 +116,7 @@ pub struct MemoryExtra {\n     pub(crate) rng: RefCell<StdRng>,\n \n     /// An allocation ID to report when it is being allocated\n-    /// (helps for debugging memory leaks).\n+    /// (helps for debugging memory leaks and use after free bugs).\n     tracked_alloc_id: Option<AllocId>,\n \n     /// Controls whether alignment of memory accesses is being checked.\n@@ -466,6 +466,18 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n         (Cow::Owned(alloc), base_tag)\n     }\n \n+    #[inline(always)]\n+    fn before_deallocation(\n+        memory_extra: &mut Self::MemoryExtra,\n+        id: AllocId,\n+    ) -> InterpResult<'tcx> {\n+        if Some(id) == memory_extra.tracked_alloc_id {\n+            register_diagnostic(NonHaltingDiagnostic::FreedAlloc(id));\n+        }\n+        \n+        Ok(())\n+    }\n+\n     #[inline(always)]\n     fn tag_global_base_pointer(memory_extra: &MemoryExtra, id: AllocId) -> Self::PointerTag {\n         if let Some(stacked_borrows) = &memory_extra.stacked_borrows {"}]}