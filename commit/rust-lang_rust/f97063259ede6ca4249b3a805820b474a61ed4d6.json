{"sha": "f97063259ede6ca4249b3a805820b474a61ed4d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5NzA2MzI1OWVkZTZjYTQyNDliM2E4MDU4MjBiNDc0YTYxZWQ0ZDY=", "commit": {"author": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2020-07-15T04:13:25Z"}, "committer": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2020-07-15T10:53:10Z"}, "message": "Don't render unstable for rustc docs\n\nAs rustc is permanently unstable. So marking every items\nwith unstable is essential useless.", "tree": {"sha": "2914b697d79b90bd43c1baa17274a92c266fe0cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2914b697d79b90bd43c1baa17274a92c266fe0cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f97063259ede6ca4249b3a805820b474a61ed4d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f97063259ede6ca4249b3a805820b474a61ed4d6", "html_url": "https://github.com/rust-lang/rust/commit/f97063259ede6ca4249b3a805820b474a61ed4d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f97063259ede6ca4249b3a805820b474a61ed4d6/comments", "author": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "567ad7455d5f25f6b38d2fded1cb621e0c34a48b", "url": "https://api.github.com/repos/rust-lang/rust/commits/567ad7455d5f25f6b38d2fded1cb621e0c34a48b", "html_url": "https://github.com/rust-lang/rust/commit/567ad7455d5f25f6b38d2fded1cb621e0c34a48b"}], "stats": {"total": 55, "additions": 23, "deletions": 32}, "files": [{"sha": "dc231d3520d081515f1bb0a6c06253d58de5a7e1", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 17, "deletions": 28, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/f97063259ede6ca4249b3a805820b474a61ed4d6/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f97063259ede6ca4249b3a805820b474a61ed4d6/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=f97063259ede6ca4249b3a805820b474a61ed4d6", "patch": "@@ -2229,12 +2229,15 @@ fn stability_tags(item: &clean::Item) -> String {\n         tags += &tag_html(\"deprecated\", message);\n     }\n \n-    if let Some(stab) = item.stability.as_ref().filter(|s| s.level == stability::Unstable) {\n-        if stab.feature.as_deref() == Some(\"rustc_private\") {\n-            tags += &tag_html(\"internal\", \"Internal\");\n-        } else {\n-            tags += &tag_html(\"unstable\", \"Experimental\");\n-        }\n+    // The \"rustc_private\" crates are permanently unstable so it makes no sense\n+    // to render \"unstable\" everywhere.\n+    if item\n+        .stability\n+        .as_ref()\n+        .map(|s| s.level == stability::Unstable && s.feature.as_deref() != Some(\"rustc_private\"))\n+        == Some(true)\n+    {\n+        tags += &tag_html(\"unstable\", \"Experimental\");\n     }\n \n     if let Some(ref cfg) = item.attrs.cfg {\n@@ -2285,15 +2288,13 @@ fn short_stability(item: &clean::Item, cx: &Context) -> Vec<String> {\n         ));\n     }\n \n-    if let Some(stab) = item.stability.as_ref().filter(|stab| stab.level == stability::Unstable) {\n-        let is_rustc_private = stab.feature.as_deref() == Some(\"rustc_private\");\n-\n-        let mut message = if is_rustc_private {\n-            \"<span class='emoji'>\u2699\ufe0f</span> This is an internal compiler API.\"\n-        } else {\n-            \"<span class='emoji'>\ud83d\udd2c</span> This is a nightly-only experimental API.\"\n-        }\n-        .to_owned();\n+    // Render unstable items. But don't render \"rustc_private\" crates (internal compiler crates).\n+    // Those crates are permanently unstable so it makes no sense to render \"unstable\" everywhere.\n+    if let Some(stab) = item.stability.as_ref().filter(|stab| {\n+        stab.level == stability::Unstable && stab.feature.as_deref() != Some(\"rustc_private\")\n+    }) {\n+        let mut message =\n+            \"<span class='emoji'>\ud83d\udd2c</span> This is a nightly-only experimental API.\".to_owned();\n \n         if let Some(feature) = stab.feature.as_deref() {\n             let mut feature = format!(\"<code>{}</code>\", Escape(&feature));\n@@ -2309,17 +2310,6 @@ fn short_stability(item: &clean::Item, cx: &Context) -> Vec<String> {\n         }\n \n         if let Some(unstable_reason) = &stab.unstable_reason {\n-            // Provide a more informative message than the compiler help.\n-            let unstable_reason = if is_rustc_private {\n-                \"This crate is being loaded from the sysroot, a permanently unstable location \\\n-                for private compiler dependencies. It is not intended for general use. Prefer \\\n-                using a public version of this crate from \\\n-                [crates.io](https://crates.io) via [`Cargo.toml`]\\\n-                (https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html).\"\n-            } else {\n-                unstable_reason\n-            };\n-\n             let mut ids = cx.id_map.borrow_mut();\n             message = format!(\n                 \"<details><summary>{}</summary>{}</details>\",\n@@ -2335,8 +2325,7 @@ fn short_stability(item: &clean::Item, cx: &Context) -> Vec<String> {\n             );\n         }\n \n-        let class = if is_rustc_private { \"internal\" } else { \"unstable\" };\n-        stability.push(format!(\"<div class='stab {}'>{}</div>\", class, message));\n+        stability.push(format!(\"<div class='stab unstable'>{}</div>\", message));\n     }\n \n     if let Some(ref cfg) = item.attrs.cfg {"}, {"sha": "a1e322fb9a30704e45e120048864fd263fc8b8ae", "filename": "src/test/rustdoc/internal.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f97063259ede6ca4249b3a805820b474a61ed4d6/src%2Ftest%2Frustdoc%2Finternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f97063259ede6ca4249b3a805820b474a61ed4d6/src%2Ftest%2Frustdoc%2Finternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finternal.rs?ref=f97063259ede6ca4249b3a805820b474a61ed4d6", "patch": "@@ -1,11 +1,13 @@\n // compile-flags: -Z force-unstable-if-unmarked\n \n-// @matches internal/index.html '//*[@class=\"docblock-short\"]/span[@class=\"stab internal\"]' \\\n-//      'Internal'\n+// Check that the unstable marker is not added for \"rustc_private\".\n+\n+// @!matches internal/index.html '//*[@class=\"docblock-short\"]/span[@class=\"stab unstable\"]'\n+// @!matches internal/index.html '//*[@class=\"docblock-short\"]/span[@class=\"stab internal\"]'\n // @matches - '//*[@class=\"docblock-short\"]' 'Docs'\n \n-// @has internal/struct.S.html '//*[@class=\"stab internal\"]' \\\n-//      'This is an internal compiler API. (rustc_private)'\n+// @!has internal/struct.S.html '//*[@class=\"stab unstable\"]'\n+// @!has internal/struct.S.html '//*[@class=\"stab internal\"]'\n /// Docs\n pub struct S;\n "}]}