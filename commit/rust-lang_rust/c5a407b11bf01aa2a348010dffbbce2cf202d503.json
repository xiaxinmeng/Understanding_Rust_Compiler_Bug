{"sha": "c5a407b11bf01aa2a348010dffbbce2cf202d503", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1YTQwN2IxMWJmMDFhYTJhMzQ4MDEwZGZmYmJjZTJjZjIwMmQ1MDM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-01-19T23:20:57Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-01-19T23:22:25Z"}, "message": "stdlib: \"tag\" -> \"enum\"", "tree": {"sha": "0430f216db0812e131670822b53b009a25ad9c5d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0430f216db0812e131670822b53b009a25ad9c5d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5a407b11bf01aa2a348010dffbbce2cf202d503", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5a407b11bf01aa2a348010dffbbce2cf202d503", "html_url": "https://github.com/rust-lang/rust/commit/c5a407b11bf01aa2a348010dffbbce2cf202d503", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5a407b11bf01aa2a348010dffbbce2cf202d503/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e21be5304769686726f8939606ccdbe38127814", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e21be5304769686726f8939606ccdbe38127814", "html_url": "https://github.com/rust-lang/rust/commit/7e21be5304769686726f8939606ccdbe38127814"}], "stats": {"total": 78, "additions": 39, "deletions": 39}, "files": [{"sha": "05d59c2b50ba9ae5844745fbca986ce11788c341", "filename": "src/libstd/c_vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5a407b11bf01aa2a348010dffbbce2cf202d503/src%2Flibstd%2Fc_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5a407b11bf01aa2a348010dffbbce2cf202d503/src%2Flibstd%2Fc_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fc_vec.rs?ref=c5a407b11bf01aa2a348010dffbbce2cf202d503", "patch": "@@ -37,12 +37,12 @@ export ptr;\n /*\n  Type: t\n \n- The type representing a native chunk of memory.  Wrapped in a tag for\n+ The type representing a native chunk of memory.  Wrapped in a enum for\n  opacity; FIXME #818 when it is possible to have truly opaque types, this\n  should be revisited.\n  */\n \n-tag t<T> {\n+enum t<T> {\n     t({ base: *mutable T, len: uint, rsrc: @dtor_res});\n }\n "}, {"sha": "b5f46732cfc0f092c95942fa3c18fb88a84407fa", "filename": "src/libstd/deque.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5a407b11bf01aa2a348010dffbbce2cf202d503/src%2Flibstd%2Fdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5a407b11bf01aa2a348010dffbbce2cf202d503/src%2Flibstd%2Fdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdeque.rs?ref=c5a407b11bf01aa2a348010dffbbce2cf202d503", "patch": "@@ -241,9 +241,9 @@ mod tests {\n         assert (e(deq.get(3), d));\n     }\n \n-    tag taggy { one(int); two(int, int); three(int, int, int); }\n+    enum taggy { one(int); two(int, int); three(int, int, int); }\n \n-    tag taggypar<T> {\n+    enum taggypar<T> {\n         onepar(int); twopar(int, int); threepar(int, int, int);\n     }\n "}, {"sha": "24e072692a95cbc8b5d44128feaeb0ce49bbaf45", "filename": "src/libstd/ebml.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5a407b11bf01aa2a348010dffbbce2cf202d503/src%2Flibstd%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5a407b11bf01aa2a348010dffbbce2cf202d503/src%2Flibstd%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Febml.rs?ref=c5a407b11bf01aa2a348010dffbbce2cf202d503", "patch": "@@ -67,7 +67,7 @@ fn get_doc(d: doc, tg: uint) -> doc {\n     alt maybe_get_doc(d, tg) {\n       some(d) { ret d; }\n       none {\n-        #error(\"failed to find block with tag %u\", tg);\n+        #error(\"failed to find block with enum %u\", tg);\n         fail;\n       }\n     }\n@@ -155,7 +155,7 @@ fn create_writer(w: io::writer) -> writer {\n \n // TODO: Provide a function to write the standard ebml header.\n fn start_tag(w: writer, tag_id: uint) {\n-    // Write the tag ID:\n+    // Write the enum ID:\n \n     write_vint(w.writer, tag_id);\n     // Write a placeholder four-byte size."}, {"sha": "441ff01a3c138329790fd475161f815de3fa487d", "filename": "src/libstd/extfmt.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c5a407b11bf01aa2a348010dffbbce2cf202d503/src%2Flibstd%2Fextfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5a407b11bf01aa2a348010dffbbce2cf202d503/src%2Flibstd%2Fextfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fextfmt.rs?ref=c5a407b11bf01aa2a348010dffbbce2cf202d503", "patch": "@@ -39,9 +39,9 @@ import option::{some, none};\n \n // Functions used by the fmt extension at compile time\n mod ct {\n-    tag signedness { signed; unsigned; }\n-    tag caseness { case_upper; case_lower; }\n-    tag ty {\n+    enum signedness { signed; unsigned; }\n+    enum caseness { case_upper; case_lower; }\n+    enum ty {\n         ty_bool;\n         ty_str;\n         ty_char;\n@@ -52,14 +52,14 @@ mod ct {\n         ty_float;\n         // FIXME: More types\n     }\n-    tag flag {\n+    enum flag {\n         flag_left_justify;\n         flag_left_zero_pad;\n         flag_space_for_sign;\n         flag_sign_always;\n         flag_alternate;\n     }\n-    tag count {\n+    enum count {\n         count_is(int);\n         count_is_param(int);\n         count_is_next_param;\n@@ -76,7 +76,7 @@ mod ct {\n \n \n     // A fragment of the output sequence\n-    tag piece { piece_string(str); piece_conv(conv); }\n+    enum piece { piece_string(str); piece_conv(conv); }\n     type error_fn = fn@(str) -> ! ;\n \n     fn parse_fmt_string(s: str, error: error_fn) -> [piece] {\n@@ -260,7 +260,7 @@ mod ct {\n // conditions can be evaluated at compile-time. For now though it's cleaner to\n // implement it this way, I think.\n mod rt {\n-    tag flag {\n+    enum flag {\n         flag_left_justify;\n         flag_left_zero_pad;\n         flag_space_for_sign;\n@@ -273,8 +273,8 @@ mod rt {\n         // comments in front::extfmt::make_flags\n         flag_none;\n     }\n-    tag count { count_is(int); count_implied; }\n-    tag ty { ty_default; ty_bits; ty_hex_upper; ty_hex_lower; ty_octal; }\n+    enum count { count_is(int); count_implied; }\n+    enum ty { ty_default; ty_bits; ty_hex_upper; ty_hex_lower; ty_octal; }\n \n     // FIXME: May not want to use a vector here for flags;\n     // instead just use a bool per flag\n@@ -384,7 +384,7 @@ mod rt {\n \n         ret str::unsafe_from_bytes(svec);\n     }\n-    tag pad_mode { pad_signed; pad_unsigned; pad_nozero; }\n+    enum pad_mode { pad_signed; pad_unsigned; pad_nozero; }\n     fn pad(cv: conv, s: str, mode: pad_mode) -> str {\n         let uwidth;\n         alt cv.width {"}, {"sha": "8bd4a38d40bebeb89cdb0357357b8508743b2079", "filename": "src/libstd/fun_treemap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5a407b11bf01aa2a348010dffbbce2cf202d503/src%2Flibstd%2Ffun_treemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5a407b11bf01aa2a348010dffbbce2cf202d503/src%2Flibstd%2Ffun_treemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffun_treemap.rs?ref=c5a407b11bf01aa2a348010dffbbce2cf202d503", "patch": "@@ -31,7 +31,7 @@ type treemap<K, V> = @tree_node<K, V>;\n /*\n Tag: tree_node\n */\n-tag tree_node<K, V> {\n+enum tree_node<K, V> {\n     empty;\n     node(@K, @V, @tree_node<K, V>, @tree_node<K, V>);\n }"}, {"sha": "29df5770a17fee4c7fd87200e95d64ee371cc506", "filename": "src/libstd/getopts.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c5a407b11bf01aa2a348010dffbbce2cf202d503/src%2Flibstd%2Fgetopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5a407b11bf01aa2a348010dffbbce2cf202d503/src%2Flibstd%2Fgetopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fgetopts.rs?ref=c5a407b11bf01aa2a348010dffbbce2cf202d503", "patch": "@@ -65,11 +65,11 @@ export opt_strs;\n export opt_maybe_str;\n export opt_default;\n \n-tag name { long(str); short(char); }\n+enum name { long(str); short(char); }\n \n-tag hasarg { yes; no; maybe; }\n+enum hasarg { yes; no; maybe; }\n \n-tag occur { req; optional; multi; }\n+enum occur { req; optional; multi; }\n \n /*\n Type: opt\n@@ -130,7 +130,7 @@ fn optmulti(name: str) -> opt {\n     ret {name: mkname(name), hasarg: yes, occur: multi};\n }\n \n-tag optval { val(str); given; }\n+enum optval { val(str); given; }\n \n /*\n Type: match\n@@ -158,7 +158,7 @@ Type: fail_\n The type returned when the command line does not conform to the\n expected format. Pass this value to <fail_str> to get an error message.\n */\n-tag fail_ {\n+enum fail_ {\n     argument_missing(str);\n     unrecognized_option(str);\n     option_missing(str);\n@@ -169,7 +169,7 @@ tag fail_ {\n /*\n Function: fail_str\n \n-Convert a <fail_> tag into an error string\n+Convert a <fail_> enum into an error string\n */\n fn fail_str(f: fail_) -> str {\n     ret alt f {\n@@ -381,7 +381,7 @@ mod tests {\n     import opt = getopts;\n     import result::{err, ok};\n \n-    tag fail_type {\n+    enum fail_type {\n         argument_missing_;\n         unrecognized_option_;\n         option_missing_;"}, {"sha": "eca266ecfa953edad4bb9b49c240338bb4b11bc7", "filename": "src/libstd/io.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c5a407b11bf01aa2a348010dffbbce2cf202d503/src%2Flibstd%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5a407b11bf01aa2a348010dffbbce2cf202d503/src%2Flibstd%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio.rs?ref=c5a407b11bf01aa2a348010dffbbce2cf202d503", "patch": "@@ -17,7 +17,7 @@ native mod rustrt {\n // Reading\n \n // FIXME This is all buffered. We might need an unbuffered variant as well\n-tag seek_style { seek_set; seek_end; seek_cur; }\n+enum seek_style { seek_set; seek_end; seek_cur; }\n \n \n // The raw underlying reader iface. All readers must implement this.\n@@ -264,7 +264,7 @@ fn string_reader(s: str) -> reader {\n \n \n // Writing\n-tag fileflag { append; create; truncate; none; }\n+enum fileflag { append; create; truncate; none; }\n \n // FIXME: Seekable really should be orthogonal.\n // FIXME: eventually u64\n@@ -495,7 +495,7 @@ fn read_whole_file(file: str) -> result::t<[u8], str> {\n \n mod fsync {\n \n-    tag level {\n+    enum level {\n         // whatever fsync does on that platform\n         fsync;\n "}, {"sha": "5b7523e03fdf2e1c38b3dfe5e0cee1150961c9cb", "filename": "src/libstd/json.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5a407b11bf01aa2a348010dffbbce2cf202d503/src%2Flibstd%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5a407b11bf01aa2a348010dffbbce2cf202d503/src%2Flibstd%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fjson.rs?ref=c5a407b11bf01aa2a348010dffbbce2cf202d503", "patch": "@@ -23,7 +23,7 @@ Tag: json\n \n Represents a json value.\n */\n-tag json {\n+enum json {\n     /* Variant: num */\n     num(float);\n     /* Variant: string */"}, {"sha": "3286127bb1b05aa1b3063d6f27e32ca6cacbaf44", "filename": "src/libstd/list.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5a407b11bf01aa2a348010dffbbce2cf202d503/src%2Flibstd%2Flist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5a407b11bf01aa2a348010dffbbce2cf202d503/src%2Flibstd%2Flist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flist.rs?ref=c5a407b11bf01aa2a348010dffbbce2cf202d503", "patch": "@@ -13,7 +13,7 @@ import option::{some, none};\n /*\n Tag: list\n */\n-tag list<T> {\n+enum list<T> {\n     /* Variant: cons */\n     cons(T, @list<T>);\n     /* Variant: nil */"}, {"sha": "f7b3132b86d1fe461e11c70eb8ba9c5749170091", "filename": "src/libstd/map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5a407b11bf01aa2a348010dffbbce2cf202d503/src%2Flibstd%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5a407b11bf01aa2a348010dffbbce2cf202d503/src%2Flibstd%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmap.rs?ref=c5a407b11bf01aa2a348010dffbbce2cf202d503", "patch": "@@ -112,7 +112,7 @@ mod chained {\n         mutable next: chain<K, V>\n     };\n \n-    tag chain<K, V> {\n+    enum chain<K, V> {\n         present(@entry<K, V>);\n         absent;\n     }\n@@ -124,7 +124,7 @@ mod chained {\n         eqer: eqfn<K>\n     };\n \n-    tag search_result<K, V> {\n+    enum search_result<K, V> {\n         not_found;\n         found_first(uint, @entry<K,V>);\n         found_after(@entry<K,V>, @entry<K,V>);"}, {"sha": "e73eed27864521ebd001e1186d756eb710eaa04d", "filename": "src/libstd/net.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5a407b11bf01aa2a348010dffbbce2cf202d503/src%2Flibstd%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5a407b11bf01aa2a348010dffbbce2cf202d503/src%2Flibstd%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet.rs?ref=c5a407b11bf01aa2a348010dffbbce2cf202d503", "patch": "@@ -12,7 +12,7 @@ Tag: ip_addr\n \n An IP address\n */\n-tag ip_addr {\n+enum ip_addr {\n     /*\n     Variant: ipv4\n \n@@ -42,7 +42,7 @@ Function: parse_addr\n \n Convert a str to <ip_addr>\n \n-Converts a string of the format \"x.x.x.x\" into an ip_addr tag.\n+Converts a string of the format \"x.x.x.x\" into an ip_addr enum.\n \n Failure:\n "}, {"sha": "54d22dde3a2a311731e98e9927f7d017de385823", "filename": "src/libstd/rope.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5a407b11bf01aa2a348010dffbbce2cf202d503/src%2Flibstd%2Frope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5a407b11bf01aa2a348010dffbbce2cf202d503/src%2Flibstd%2Frope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frope.rs?ref=c5a407b11bf01aa2a348010dffbbce2cf202d503", "patch": "@@ -585,7 +585,7 @@ mod node {\n        empty   - An empty rope\n        content - A non-empty rope\n     */\n-    tag root {\n+    enum root {\n         empty;\n         content(@node);\n     }\n@@ -688,7 +688,7 @@ mod node {\n     leaf - A leaf consisting in a `str`\n     concat - The concatenation of two ropes\n     */\n-    tag node {\n+    enum node {\n         leaf(leaf);\n         concat(concat);\n     }"}, {"sha": "6131943c2fd77fd9476523159bc6fb7c381e2908", "filename": "src/libstd/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5a407b11bf01aa2a348010dffbbce2cf202d503/src%2Flibstd%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5a407b11bf01aa2a348010dffbbce2cf202d503/src%2Flibstd%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftest.rs?ref=c5a407b11bf01aa2a348010dffbbce2cf202d503", "patch": "@@ -84,7 +84,7 @@ fn parse_opts(args: [str]) : vec::is_not_empty(args) -> opt_res {\n     ret either::left(test_opts);\n }\n \n-tag test_result { tr_ok; tr_failed; tr_ignored; }\n+enum test_result { tr_ok; tr_failed; tr_ignored; }\n \n // A simple console test runner\n fn run_tests_console(opts: test_opts,\n@@ -186,7 +186,7 @@ fn run_tests_console(opts: test_opts,\n \n fn use_color() -> bool { ret get_concurrency() == 1u; }\n \n-tag testevent {\n+enum testevent {\n     te_filtered([test_desc]);\n     te_wait(test_desc);\n     te_result(test_desc, test_result);"}, {"sha": "e5e6a433e2d82c8e110c112180a54ef765e1205a", "filename": "src/libstd/treemap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5a407b11bf01aa2a348010dffbbce2cf202d503/src%2Flibstd%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5a407b11bf01aa2a348010dffbbce2cf202d503/src%2Flibstd%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftreemap.rs?ref=c5a407b11bf01aa2a348010dffbbce2cf202d503", "patch": "@@ -28,7 +28,7 @@ type treemap<K, V> = @mutable tree_node<K, V>;\n /*\n Tag: tree_node\n */\n-tag tree_node<K, V> { empty; node(@K, @V, treemap<K, V>, treemap<K, V>); }\n+enum tree_node<K, V> { empty; node(@K, @V, treemap<K, V>, treemap<K, V>); }\n \n /* Section: Operations */\n "}, {"sha": "bca09fcf835acd17fcdac080602893a96df64817", "filename": "src/libstd/win32_fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5a407b11bf01aa2a348010dffbbce2cf202d503/src%2Flibstd%2Fwin32_fs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5a407b11bf01aa2a348010dffbbce2cf202d503/src%2Flibstd%2Fwin32_fs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fwin32_fs.rs?ref=c5a407b11bf01aa2a348010dffbbce2cf202d503", "patch": "@@ -21,7 +21,7 @@ fn path_is_absolute(p: str) -> bool {\n  * different semantics for each. Since we build on mingw, we are usually\n  * dealing with /-separated paths. But the whole interface to splitting and\n  * joining pathnames needs a bit more abstraction on win32. Possibly a vec or\n- * tag type.\n+ * enum type.\n  */\n const path_sep: char = '/';\n "}]}