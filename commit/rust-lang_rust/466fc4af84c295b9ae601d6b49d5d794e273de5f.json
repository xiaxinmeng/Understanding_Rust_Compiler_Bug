{"sha": "466fc4af84c295b9ae601d6b49d5d794e273de5f", "node_id": "C_kwDOAAsO6NoAKDQ2NmZjNGFmODRjMjk1YjlhZTYwMWQ2YjQ5ZDVkNzk0ZTI3M2RlNWY", "commit": {"author": {"name": "Patrik K\u00e5rlin", "email": "patrik.karlin@gmail.com", "date": "2023-03-01T09:40:39Z"}, "committer": {"name": "Patrik K\u00e5rlin", "email": "patrik.karlin@gmail.com", "date": "2023-03-30T12:55:03Z"}, "message": "rustdoc: update with --bless and change expected errors", "tree": {"sha": "0b0a021179a92eee2a547ee0a6321aaca223f130", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b0a021179a92eee2a547ee0a6321aaca223f130"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/466fc4af84c295b9ae601d6b49d5d794e273de5f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN SSH SIGNATURE-----\nU1NIU0lHAAAAAQAAADMAAAALc3NoLWVkMjU1MTkAAAAgh2d+T/QMoKuxUQmn1LuLfU+BwZ\nEuSNYGnaFxqueP1i8AAAADZ2l0AAAAAAAAAAZzaGE1MTIAAABTAAAAC3NzaC1lZDI1NTE5\nAAAAQIBpMEcWTTF9YKILWX79v4634v7+45CYCO0mL6fi1PBoUReADy9nN95boE0fBIGGtu\nOiGMgv0q2v+uq3uZqriw4=\n-----END SSH SIGNATURE-----", "payload": "tree 0b0a021179a92eee2a547ee0a6321aaca223f130\nparent 9b5115f92b84ce95aed3e8f6faa3f546f6cf4bdd\nauthor Patrik K\u00e5rlin <patrik.karlin@gmail.com> 1677663639 +0100\ncommitter Patrik K\u00e5rlin <patrik.karlin@gmail.com> 1680180903 +0200\n\nrustdoc: update with --bless and change expected errors\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/466fc4af84c295b9ae601d6b49d5d794e273de5f", "html_url": "https://github.com/rust-lang/rust/commit/466fc4af84c295b9ae601d6b49d5d794e273de5f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/466fc4af84c295b9ae601d6b49d5d794e273de5f/comments", "author": {"login": "megakorre", "id": 208460, "node_id": "MDQ6VXNlcjIwODQ2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/208460?v=4", "gravatar_id": "", "url": "https://api.github.com/users/megakorre", "html_url": "https://github.com/megakorre", "followers_url": "https://api.github.com/users/megakorre/followers", "following_url": "https://api.github.com/users/megakorre/following{/other_user}", "gists_url": "https://api.github.com/users/megakorre/gists{/gist_id}", "starred_url": "https://api.github.com/users/megakorre/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/megakorre/subscriptions", "organizations_url": "https://api.github.com/users/megakorre/orgs", "repos_url": "https://api.github.com/users/megakorre/repos", "events_url": "https://api.github.com/users/megakorre/events{/privacy}", "received_events_url": "https://api.github.com/users/megakorre/received_events", "type": "User", "site_admin": false}, "committer": {"login": "megakorre", "id": 208460, "node_id": "MDQ6VXNlcjIwODQ2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/208460?v=4", "gravatar_id": "", "url": "https://api.github.com/users/megakorre", "html_url": "https://github.com/megakorre", "followers_url": "https://api.github.com/users/megakorre/followers", "following_url": "https://api.github.com/users/megakorre/following{/other_user}", "gists_url": "https://api.github.com/users/megakorre/gists{/gist_id}", "starred_url": "https://api.github.com/users/megakorre/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/megakorre/subscriptions", "organizations_url": "https://api.github.com/users/megakorre/orgs", "repos_url": "https://api.github.com/users/megakorre/repos", "events_url": "https://api.github.com/users/megakorre/events{/privacy}", "received_events_url": "https://api.github.com/users/megakorre/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b5115f92b84ce95aed3e8f6faa3f546f6cf4bdd", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b5115f92b84ce95aed3e8f6faa3f546f6cf4bdd", "html_url": "https://github.com/rust-lang/rust/commit/9b5115f92b84ce95aed3e8f6faa3f546f6cf4bdd"}], "stats": {"total": 382, "additions": 352, "deletions": 30}, "files": [{"sha": "ae19b728bfee72b7aded4d6650af3776ae7c8a85", "filename": "tests/rustdoc-ui/invalid-toplevel-const.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/466fc4af84c295b9ae601d6b49d5d794e273de5f/tests%2Frustdoc-ui%2Finvalid-toplevel-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/466fc4af84c295b9ae601d6b49d5d794e273de5f/tests%2Frustdoc-ui%2Finvalid-toplevel-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Finvalid-toplevel-const.stderr?ref=466fc4af84c295b9ae601d6b49d5d794e273de5f", "patch": "@@ -1,5 +1,5 @@\n error[E0121]: the placeholder `_` is not allowed within types on item signatures for static items\n-  --> $DIR/invalid-toplevel-const.rs:2:31\n+  --> $DIR/invalid-toplevel-const.rs:1:31\n    |\n LL | static CONST: Option<dyn Fn(& _)> = None;\n    |                               ^ not allowed in type signatures"}, {"sha": "6d33e47a3680d816ceb38ca4e8b5aa2a8f4785e1", "filename": "tests/rustdoc-ui/issue-105742.rs", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/466fc4af84c295b9ae601d6b49d5d794e273de5f/tests%2Frustdoc-ui%2Fissue-105742.rs", "raw_url": "https://github.com/rust-lang/rust/raw/466fc4af84c295b9ae601d6b49d5d794e273de5f/tests%2Frustdoc-ui%2Fissue-105742.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fissue-105742.rs?ref=466fc4af84c295b9ae601d6b49d5d794e273de5f", "patch": "@@ -1,19 +1,37 @@\n // compile-flags: -Znormalize-docs\n-\n use std::ops::Index;\n \n pub fn next<'a, T>(s: &'a mut dyn SVec<Item = T, Output = T>) {\n+    //~^ERROR\n+    //~|ERROR\n+    //~|ERROR\n     let _ = s;\n }\n \n pub trait SVec: Index<\n     <Self as SVec>::Item,\n+    //~^ERROR\n+    //~|ERROR\n+    //~|ERROR\n+    //~|ERROR\n     Output = <Index<<Self as SVec>::Item,\n+    //~^ERROR\n+    //~|ERROR\n+    //~|ERROR\n+    //~|ERROR\n     Output = <Self as SVec>::Item> as SVec>::Item,\n+    //~^ERROR\n+    //~|ERROR\n+    //~|ERROR\n+    //~|ERROR\n+    //~|ERROR\n+    //~|ERROR\n+    //~|ERROR\n+    //~|ERROR\n > {\n     type Item<'a, T>;\n \n     fn len(&self) -> <Self as SVec>::Item;\n-    //~^ ERROR\n-    //~^^ ERROR\n+    //~^ERROR\n+    //~|ERROR\n }"}, {"sha": "837e72852b4e5d930e5ba96c6f621cc544f93677", "filename": "tests/rustdoc-ui/issue-105742.stderr", "status": "modified", "additions": 324, "deletions": 6, "changes": 330, "blob_url": "https://github.com/rust-lang/rust/blob/466fc4af84c295b9ae601d6b49d5d794e273de5f/tests%2Frustdoc-ui%2Fissue-105742.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/466fc4af84c295b9ae601d6b49d5d794e273de5f/tests%2Frustdoc-ui%2Fissue-105742.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fissue-105742.stderr?ref=466fc4af84c295b9ae601d6b49d5d794e273de5f", "patch": "@@ -1,11 +1,328 @@\n error[E0107]: missing generics for associated type `SVec::Item`\n-  --> $DIR/issue-105742.rs:16:38\n+  --> $DIR/issue-105742.rs:12:21\n+   |\n+LL |     <Self as SVec>::Item,\n+   |                     ^^^^ expected 1 lifetime argument\n+   |\n+note: associated type defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/issue-105742.rs:32:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^ --\n+help: add missing lifetime argument\n+   |\n+LL |     <Self as SVec>::Item<'a>,\n+   |                         ++++\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:12:21\n+   |\n+LL |     <Self as SVec>::Item,\n+   |                     ^^^^ expected 1 generic argument\n+   |\n+note: associated type defined here, with 1 generic parameter: `T`\n+  --> $DIR/issue-105742.rs:32:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^     -\n+help: add missing generic argument\n+   |\n+LL |     <Self as SVec>::Item<T>,\n+   |                         +++\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:17:37\n+   |\n+LL |     Output = <Index<<Self as SVec>::Item,\n+   |                                     ^^^^ expected 1 lifetime argument\n+   |\n+note: associated type defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/issue-105742.rs:32:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^ --\n+help: add missing lifetime argument\n+   |\n+LL |     Output = <Index<<Self as SVec>::Item<'a>,\n+   |                                         ++++\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:17:37\n+   |\n+LL |     Output = <Index<<Self as SVec>::Item,\n+   |                                     ^^^^ expected 1 generic argument\n+   |\n+note: associated type defined here, with 1 generic parameter: `T`\n+  --> $DIR/issue-105742.rs:32:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^     -\n+help: add missing generic argument\n+   |\n+LL |     Output = <Index<<Self as SVec>::Item<T>,\n+   |                                         +++\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:22:30\n+   |\n+LL |     Output = <Self as SVec>::Item> as SVec>::Item,\n+   |                              ^^^^ expected 1 lifetime argument\n+   |\n+note: associated type defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/issue-105742.rs:32:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^ --\n+help: add missing lifetime argument\n+   |\n+LL |     Output = <Self as SVec>::Item<'a>> as SVec>::Item,\n+   |                                  ++++\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:22:30\n+   |\n+LL |     Output = <Self as SVec>::Item> as SVec>::Item,\n+   |                              ^^^^ expected 1 generic argument\n+   |\n+note: associated type defined here, with 1 generic parameter: `T`\n+  --> $DIR/issue-105742.rs:32:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^     -\n+help: add missing generic argument\n+   |\n+LL |     Output = <Self as SVec>::Item<T>> as SVec>::Item,\n+   |                                  +++\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:22:46\n+   |\n+LL |     Output = <Self as SVec>::Item> as SVec>::Item,\n+   |                                              ^^^^ expected 1 lifetime argument\n+   |\n+note: associated type defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/issue-105742.rs:32:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^ --\n+help: add missing lifetime argument\n+   |\n+LL |     Output = <Self as SVec>::Item> as SVec>::Item<'a>,\n+   |                                                  ++++\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:22:46\n+   |\n+LL |     Output = <Self as SVec>::Item> as SVec>::Item,\n+   |                                              ^^^^ expected 1 generic argument\n+   |\n+note: associated type defined here, with 1 generic parameter: `T`\n+  --> $DIR/issue-105742.rs:32:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^     -\n+help: add missing generic argument\n+   |\n+LL |     Output = <Self as SVec>::Item> as SVec>::Item<T>,\n+   |                                                  +++\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:4:40\n+   |\n+LL | pub fn next<'a, T>(s: &'a mut dyn SVec<Item = T, Output = T>) {\n+   |                                        ^^^^ expected 1 lifetime argument\n+   |\n+note: associated type defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/issue-105742.rs:32:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^ --\n+help: add missing lifetime argument\n+   |\n+LL | pub fn next<'a, T>(s: &'a mut dyn SVec<Item<'_> = T, Output = T>) {\n+   |                                            ++++\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:4:40\n+   |\n+LL | pub fn next<'a, T>(s: &'a mut dyn SVec<Item = T, Output = T>) {\n+   |                                        ^^^^ expected 1 generic argument\n+   |\n+note: associated type defined here, with 1 generic parameter: `T`\n+  --> $DIR/issue-105742.rs:32:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^     -\n+help: add missing generic argument\n+   |\n+LL | pub fn next<'a, T>(s: &'a mut dyn SVec<Item<T> = T, Output = T>) {\n+   |                                            +++\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:12:21\n+   |\n+LL |     <Self as SVec>::Item,\n+   |                     ^^^^ expected 1 lifetime argument\n+   |\n+note: associated type defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/issue-105742.rs:32:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^ --\n+help: add missing lifetime argument\n+   |\n+LL |     <Self as SVec>::Item<'a>,\n+   |                         ++++\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:12:21\n+   |\n+LL |     <Self as SVec>::Item,\n+   |                     ^^^^ expected 1 generic argument\n+   |\n+note: associated type defined here, with 1 generic parameter: `T`\n+  --> $DIR/issue-105742.rs:32:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^     -\n+help: add missing generic argument\n+   |\n+LL |     <Self as SVec>::Item<T>,\n+   |                         +++\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:17:37\n+   |\n+LL |     Output = <Index<<Self as SVec>::Item,\n+   |                                     ^^^^ expected 1 lifetime argument\n+   |\n+note: associated type defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/issue-105742.rs:32:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^ --\n+help: add missing lifetime argument\n+   |\n+LL |     Output = <Index<<Self as SVec>::Item<'a>,\n+   |                                         ++++\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:17:37\n+   |\n+LL |     Output = <Index<<Self as SVec>::Item,\n+   |                                     ^^^^ expected 1 generic argument\n+   |\n+note: associated type defined here, with 1 generic parameter: `T`\n+  --> $DIR/issue-105742.rs:32:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^     -\n+help: add missing generic argument\n+   |\n+LL |     Output = <Index<<Self as SVec>::Item<T>,\n+   |                                         +++\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:22:30\n+   |\n+LL |     Output = <Self as SVec>::Item> as SVec>::Item,\n+   |                              ^^^^ expected 1 lifetime argument\n+   |\n+note: associated type defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/issue-105742.rs:32:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^ --\n+help: add missing lifetime argument\n+   |\n+LL |     Output = <Self as SVec>::Item<'a>> as SVec>::Item,\n+   |                                  ++++\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:22:30\n+   |\n+LL |     Output = <Self as SVec>::Item> as SVec>::Item,\n+   |                              ^^^^ expected 1 generic argument\n+   |\n+note: associated type defined here, with 1 generic parameter: `T`\n+  --> $DIR/issue-105742.rs:32:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^     -\n+help: add missing generic argument\n+   |\n+LL |     Output = <Self as SVec>::Item<T>> as SVec>::Item,\n+   |                                  +++\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:22:46\n+   |\n+LL |     Output = <Self as SVec>::Item> as SVec>::Item,\n+   |                                              ^^^^ expected 1 lifetime argument\n+   |\n+note: associated type defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/issue-105742.rs:32:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^ --\n+help: add missing lifetime argument\n+   |\n+LL |     Output = <Self as SVec>::Item> as SVec>::Item<'a>,\n+   |                                                  ++++\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:22:46\n+   |\n+LL |     Output = <Self as SVec>::Item> as SVec>::Item,\n+   |                                              ^^^^ expected 1 generic argument\n+   |\n+note: associated type defined here, with 1 generic parameter: `T`\n+  --> $DIR/issue-105742.rs:32:10\n+   |\n+LL |     type Item<'a, T>;\n+   |          ^^^^     -\n+help: add missing generic argument\n+   |\n+LL |     Output = <Self as SVec>::Item> as SVec>::Item<T>,\n+   |                                                  +++\n+\n+error[E0038]: the trait `SVec` cannot be made into an object\n+  --> $DIR/issue-105742.rs:4:31\n+   |\n+LL | pub fn next<'a, T>(s: &'a mut dyn SVec<Item = T, Output = T>) {\n+   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `SVec` cannot be made into an object\n+   |\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/issue-105742.rs:11:17\n+   |\n+LL |    pub trait SVec: Index<\n+   |  ____________----__^\n+   | |            |\n+   | |            this trait cannot be made into an object...\n+LL | |      <Self as SVec>::Item,\n+LL | |\n+LL | |\n+...  |\n+LL | |/     Output = <Index<<Self as SVec>::Item,\n+LL | ||\n+LL | ||\n+LL | ||\n+LL | ||\n+LL | ||     Output = <Self as SVec>::Item> as SVec>::Item,\n+   | ||_________________________________________________^ ...because it uses `Self` as a type parameter\n+...  |\n+LL | |\n+LL | |  > {\n+   | |__^ ...because it uses `Self` as a type parameter\n+\n+error[E0107]: missing generics for associated type `SVec::Item`\n+  --> $DIR/issue-105742.rs:34:38\n    |\n LL |     fn len(&self) -> <Self as SVec>::Item;\n    |                                      ^^^^ expected 1 lifetime argument\n    |\n note: associated type defined here, with 1 lifetime parameter: `'a`\n-  --> $DIR/issue-105742.rs:14:10\n+  --> $DIR/issue-105742.rs:32:10\n    |\n LL |     type Item<'a, T>;\n    |          ^^^^ --\n@@ -15,13 +332,13 @@ LL |     fn len(&self) -> <Self as SVec>::Item<'_>;\n    |                                          ++++\n \n error[E0107]: missing generics for associated type `SVec::Item`\n-  --> $DIR/issue-105742.rs:16:38\n+  --> $DIR/issue-105742.rs:34:38\n    |\n LL |     fn len(&self) -> <Self as SVec>::Item;\n    |                                      ^^^^ expected 1 generic argument\n    |\n note: associated type defined here, with 1 generic parameter: `T`\n-  --> $DIR/issue-105742.rs:14:10\n+  --> $DIR/issue-105742.rs:32:10\n    |\n LL |     type Item<'a, T>;\n    |          ^^^^     -\n@@ -30,6 +347,7 @@ help: add missing generic argument\n LL |     fn len(&self) -> <Self as SVec>::Item<T>;\n    |                                          +++\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 21 previous errors\n \n-For more information about this error, try `rustc --explain E0107`.\n+Some errors have detailed explanations: E0038, E0107.\n+For more information about an error, try `rustc --explain E0038`."}, {"sha": "1c973dab61d89e143e87dbd50399cfd6de465985", "filename": "tests/rustdoc-ui/issue-106226.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/466fc4af84c295b9ae601d6b49d5d794e273de5f/tests%2Frustdoc-ui%2Fissue-106226.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/466fc4af84c295b9ae601d6b49d5d794e273de5f/tests%2Frustdoc-ui%2Fissue-106226.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fissue-106226.stderr?ref=466fc4af84c295b9ae601d6b49d5d794e273de5f", "patch": "@@ -1,9 +1,9 @@\n-error[E0308]: mismatched types\n-  --> $DIR/issue-106226.rs:2:14\n+error[E0121]: the placeholder `_` is not allowed within types on item signatures for type aliases\n+  --> $DIR/issue-106226.rs:2:11\n    |\n LL | type F = [_; ()];\n-   |              ^^ expected `usize`, found `()`\n+   |           ^ not allowed in type signatures\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0308`.\n+For more information about this error, try `rustc --explain E0121`."}, {"sha": "e50f3995b83dda8fbd59cb5443143fd46d98b0d2", "filename": "tests/rustdoc-ui/issue-79465.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/466fc4af84c295b9ae601d6b49d5d794e273de5f/tests%2Frustdoc-ui%2Fissue-79465.rs", "raw_url": "https://github.com/rust-lang/rust/raw/466fc4af84c295b9ae601d6b49d5d794e273de5f/tests%2Frustdoc-ui%2Fissue-79465.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fissue-79465.rs?ref=466fc4af84c295b9ae601d6b49d5d794e273de5f", "patch": "@@ -1,3 +1,2 @@\n pub fn f1<T>(x: T::A) {}\n //~^ ERROR\n-//~^^ ERROR"}, {"sha": "d187a2e664a25fa1baafe0a134af0cf24db0f30d", "filename": "tests/rustdoc-ui/issue-79465.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/466fc4af84c295b9ae601d6b49d5d794e273de5f/tests%2Frustdoc-ui%2Fissue-79465.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/466fc4af84c295b9ae601d6b49d5d794e273de5f/tests%2Frustdoc-ui%2Fissue-79465.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fissue-79465.stderr?ref=466fc4af84c295b9ae601d6b49d5d794e273de5f", "patch": "@@ -4,12 +4,6 @@ error[E0220]: associated type `A` not found for `T`\n LL | pub fn f1<T>(x: T::A) {}\n    |                    ^ associated type `A` not found\n \n-error[E0220]: associated type `A` not found for `T`\n-  --> $DIR/issue-79465.rs:1:20\n-   |\n-LL | pub fn f1<T>(x: T::A) {}\n-   |                    ^ associated type `A` not found\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0220`."}, {"sha": "08cc7ef4c902ce69450bcb23d574d301c6fe4752", "filename": "tests/rustdoc-ui/issue-96287.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/466fc4af84c295b9ae601d6b49d5d794e273de5f/tests%2Frustdoc-ui%2Fissue-96287.rs", "raw_url": "https://github.com/rust-lang/rust/raw/466fc4af84c295b9ae601d6b49d5d794e273de5f/tests%2Frustdoc-ui%2Fissue-96287.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fissue-96287.rs?ref=466fc4af84c295b9ae601d6b49d5d794e273de5f", "patch": "@@ -6,7 +6,6 @@ pub trait TraitWithAssoc {\n \n pub type Foo<V> = impl Trait<V::Assoc>;\n //~^ ERROR\n-//~^^ ERROR\n \n pub trait Trait<U> {}\n "}, {"sha": "7722eb96028dfedf7756be8b108800a5e4bdb978", "filename": "tests/rustdoc-ui/issue-96287.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/466fc4af84c295b9ae601d6b49d5d794e273de5f/tests%2Frustdoc-ui%2Fissue-96287.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/466fc4af84c295b9ae601d6b49d5d794e273de5f/tests%2Frustdoc-ui%2Fissue-96287.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fissue-96287.stderr?ref=466fc4af84c295b9ae601d6b49d5d794e273de5f", "patch": "@@ -4,12 +4,6 @@ error[E0220]: associated type `Assoc` not found for `V`\n LL | pub type Foo<V> = impl Trait<V::Assoc>;\n    |                                 ^^^^^ there is a similarly named associated type `Assoc` in the trait `TraitWithAssoc`\n \n-error[E0220]: associated type `Assoc` not found for `V`\n-  --> $DIR/issue-96287.rs:7:33\n-   |\n-LL | pub type Foo<V> = impl Trait<V::Assoc>;\n-   |                                 ^^^^^ there is a similarly named associated type `Assoc` in the trait `TraitWithAssoc`\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0220`."}]}