{"sha": "4caeba917860e64bda52174cec3895b4430e7ca8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjYWViYTkxNzg2MGU2NGJkYTUyMTc0Y2VjMzg5NWI0NDMwZTdjYTg=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-11T22:50:27Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-12T19:08:26Z"}, "message": "Remove vecs from the rustc driver", "tree": {"sha": "e755c6d90cf44259061eca77b57828bb590d2fe6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e755c6d90cf44259061eca77b57828bb590d2fe6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4caeba917860e64bda52174cec3895b4430e7ca8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4caeba917860e64bda52174cec3895b4430e7ca8", "html_url": "https://github.com/rust-lang/rust/commit/4caeba917860e64bda52174cec3895b4430e7ca8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4caeba917860e64bda52174cec3895b4430e7ca8/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b32889d82c959642d1595cf588ec75d76e6fa142", "url": "https://api.github.com/repos/rust-lang/rust/commits/b32889d82c959642d1595cf588ec75d76e6fa142", "html_url": "https://github.com/rust-lang/rust/commit/b32889d82c959642d1595cf588ec75d76e6fa142"}], "stats": {"total": 92, "additions": 52, "deletions": 40}, "files": [{"sha": "56fc0f0b4249eac74aeb5f864593e7b78d8eebf0", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 42, "deletions": 40, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/4caeba917860e64bda52174cec3895b4430e7ca8/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4caeba917860e64bda52174cec3895b4430e7ca8/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=4caeba917860e64bda52174cec3895b4430e7ca8", "patch": "@@ -28,6 +28,7 @@ import std::option::some;\n import std::option::none;\n import std::str;\n import std::vec;\n+import std::ivec;\n import std::int;\n import std::ioivec;\n import std::run;\n@@ -78,7 +79,7 @@ fn build_configuration(sess: session::session, argv0: str, input: str) ->\n }\n \n // Convert strings provided as --cfg [cfgspec] into a crate_cfg\n-fn parse_cfgspecs(cfgspecs: &vec[str]) -> ast::crate_cfg {\n+fn parse_cfgspecs(cfgspecs: &[str]) -> ast::crate_cfg {\n     // FIXME: It would be nice to use the parser to parse all varieties of\n     // meta_item here. At the moment we just support the meta_word variant.\n     let words = ~[];\n@@ -383,7 +384,7 @@ fn build_session_options(binary: str, match: getopts::match, binary_dir: str)\n           none. { get_default_sysroot(binary) }\n           some(s) { s }\n         };\n-    let cfg = parse_cfgspecs(getopts::opt_strs(match, \"cfg\"));\n+    let cfg = parse_cfgspecs(getopts::opt_strs_ivec(match, \"cfg\"));\n     let test = opt_present(match, \"test\");\n     let dps = opt_present(match, \"dps\");\n     let do_gc = opt_present(match, \"gc\");\n@@ -428,24 +429,25 @@ fn parse_pretty(sess: session::session, name: &str) -> pp_mode {\n                    \"`typed`, or `identified`\");\n }\n \n-fn opts() -> vec[getopts::opt] {\n-    ret [optflag(\"h\"), optflag(\"help\"), optflag(\"v\"), optflag(\"version\"),\n-         optflag(\"glue\"), optflag(\"emit-llvm\"), optflagopt(\"pretty\"),\n-         optflagopt(\"expand\"), optflag(\"ls\"), optflag(\"parse-only\"),\n-         optflag(\"no-trans\"),\n-         optflag(\"O\"), optopt(\"OptLevel\"), optmulti(\"L\"), optflag(\"S\"),\n-         optflag(\"c\"), optopt(\"o\"), optflag(\"g\"), optflag(\"save-temps\"),\n-         optopt(\"sysroot\"), optflag(\"stats\"), optflag(\"time-passes\"),\n-         optflag(\"time-llvm-passes\"), optflag(\"no-typestate\"),\n-         optflag(\"noverify\"), optmulti(\"cfg\"), optflag(\"test\"),\n-         optflag(\"lib\"), optflag(\"static\"), optflag(\"dps\"), optflag(\"gc\")];\n+fn opts() -> [getopts::opt] {\n+    ret ~[optflag(\"h\"), optflag(\"help\"), optflag(\"v\"), optflag(\"version\"),\n+          optflag(\"glue\"), optflag(\"emit-llvm\"), optflagopt(\"pretty\"),\n+          optflagopt(\"expand\"), optflag(\"ls\"), optflag(\"parse-only\"),\n+          optflag(\"no-trans\"),\n+          optflag(\"O\"), optopt(\"OptLevel\"), optmulti(\"L\"), optflag(\"S\"),\n+          optflag(\"c\"), optopt(\"o\"), optflag(\"g\"), optflag(\"save-temps\"),\n+          optopt(\"sysroot\"), optflag(\"stats\"), optflag(\"time-passes\"),\n+          optflag(\"time-llvm-passes\"), optflag(\"no-typestate\"),\n+          optflag(\"noverify\"), optmulti(\"cfg\"), optflag(\"test\"),\n+          optflag(\"lib\"), optflag(\"static\"), optflag(\"dps\"), optflag(\"gc\")];\n }\n \n fn main(args: vec[str]) {\n-    let binary = vec::shift(args);\n+    let args_ivec = ivec::from_vec(args);\n+    let binary = ivec::shift(args_ivec);\n     let binary_dir = fs::dirname(binary);\n     let match =\n-        alt getopts::getopts(args, opts()) {\n+        alt getopts::getopts_ivec(args_ivec, opts()) {\n           getopts::success(m) { m }\n           getopts::failure(f) {\n             log_err #fmt(\"error: %s\", getopts::fail_str(f));\n@@ -517,25 +519,25 @@ fn main(args: vec[str]) {\n       none. {\n         // \"-\" as input file will cause the parser to read from stdin so we\n         // have to make up a name\n-        let parts: vec[str] = if !input_is_stdin(ifile) {\n-            str::split(ifile, '.' as u8)\n+        let parts = if !input_is_stdin(ifile) {\n+            str::split_ivec(ifile, '.' as u8)\n         } else {\n-            [\"default\", \"rs\"]\n+            ~[\"default\", \"rs\"]\n         };\n-        vec::pop[str](parts);\n+        ivec::pop(parts);\n         saved_out_filename = parts.(0);\n         alt sopts.output_type {\n-          link::output_type_none. { parts += [\"none\"]; }\n-          link::output_type_bitcode. { parts += [\"bc\"]; }\n-          link::output_type_assembly. { parts += [\"s\"]; }\n+          link::output_type_none. { parts += ~[\"none\"]; }\n+          link::output_type_bitcode. { parts += ~[\"bc\"]; }\n+          link::output_type_assembly. { parts += ~[\"s\"]; }\n \n           // Object and exe output both use the '.o' extension here\n           link::output_type_object. {\n-            parts += [\"o\"];\n+            parts += ~[\"o\"];\n           }\n-          link::output_type_exe. { parts += [\"o\"]; }\n+          link::output_type_exe. { parts += ~[\"o\"]; }\n         }\n-        let ofile = str::connect(parts, \".\");\n+        let ofile = str::connect_ivec(parts, \".\");\n         compile_input(sess, cfg, ifile, ofile);\n       }\n       some(ofile) {\n@@ -562,9 +564,9 @@ fn main(args: vec[str]) {\n     let prog: str = \"gcc\";\n     // The invocations of gcc share some flags across platforms\n \n-    let gcc_args: vec[str] =\n-        [stage, \"-Lrt\", \"-lrustrt\", glu, \"-m32\", \"-o\", saved_out_filename,\n-         saved_out_filename + \".o\"];\n+    let gcc_args =\n+        ~[stage, \"-Lrt\", \"-lrustrt\", glu, \"-m32\", \"-o\", saved_out_filename,\n+          saved_out_filename + \".o\"];\n     let lib_cmd;\n \n     let os = sess.get_targ_cfg().os;\n@@ -598,34 +600,34 @@ fn main(args: vec[str]) {\n     let cstore = sess.get_cstore();\n     for cratepath: str  in cstore::get_used_crate_files(cstore) {\n         if str::ends_with(cratepath, \".rlib\") {\n-            gcc_args += [cratepath];\n+            gcc_args += ~[cratepath];\n             cont;\n         }\n         let dir = fs::dirname(cratepath);\n-        if dir != \"\" { gcc_args += [\"-L\" + dir]; }\n+        if dir != \"\" { gcc_args += ~[\"-L\" + dir]; }\n         let libarg = unlib(sess.get_targ_cfg(), fs::basename(cratepath));\n-        gcc_args += [\"-l\" + libarg];\n+        gcc_args += ~[\"-l\" + libarg];\n     }\n \n-    // FIXME: Remove this ivec->vec conversion.\n     let ula = cstore::get_used_link_args(cstore);\n-    for arg: str  in ula { gcc_args += [arg]; }\n+    for arg: str  in ula { gcc_args += ~[arg]; }\n \n     let used_libs = cstore::get_used_libraries(cstore);\n-    for l: str  in used_libs { gcc_args += [\"-l\" + l]; }\n+    for l: str  in used_libs { gcc_args += ~[\"-l\" + l]; }\n \n     if sopts.library {\n-        gcc_args += [lib_cmd];\n+        gcc_args += ~[lib_cmd];\n     } else {\n         // FIXME: why do we hardcode -lm?\n-        gcc_args += [\"-lm\", main];\n+        gcc_args += ~[\"-lm\", main];\n     }\n     // We run 'gcc' here\n \n-    let err_code = run::run_program(prog, gcc_args);\n+    let err_code = run::run_program(prog, ivec::to_vec(gcc_args));\n     if 0 != err_code {\n         sess.err(#fmt(\"linking with gcc failed with code %d\", err_code));\n-        sess.note(#fmt(\"gcc arguments: %s\", str::connect(gcc_args, \" \")));\n+        sess.note(#fmt(\"gcc arguments: %s\",\n+                       str::connect_ivec(gcc_args, \" \")));\n         sess.abort_if_errors();\n     }\n     // Clean up on Darwin\n@@ -650,7 +652,7 @@ mod test {\n     #[test]\n     fn test_switch_implies_cfg_test() {\n         let match =\n-            alt getopts::getopts([\"--test\"], opts()) {\n+            alt getopts::getopts_ivec(~[\"--test\"], opts()) {\n               getopts::success(m) { m }\n             };\n         let sessopts = build_session_options(\"whatever\", match, \"whatever\");\n@@ -664,7 +666,7 @@ mod test {\n     #[test]\n     fn test_switch_implies_cfg_test_unless_cfg_test() {\n         let match =\n-            alt getopts::getopts([\"--test\", \"--cfg=test\"], opts()) {\n+            alt getopts::getopts_ivec(~[\"--test\", \"--cfg=test\"], opts()) {\n               getopts::success(m) { m }\n             };\n         let sessopts = build_session_options(\"whatever\", match, \"whatever\");"}, {"sha": "0230ca21453af0cc5b8d97171fb5aae9d0c90fef", "filename": "src/lib/getopts.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4caeba917860e64bda52174cec3895b4430e7ca8/src%2Flib%2Fgetopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4caeba917860e64bda52174cec3895b4430e7ca8/src%2Flib%2Fgetopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fgetopts.rs?ref=4caeba917860e64bda52174cec3895b4430e7ca8", "patch": "@@ -27,6 +27,7 @@ export fail_str;\n export opt_present;\n export opt_str;\n export opt_strs;\n+export opt_strs_ivec;\n export opt_maybe_str;\n export opt_default;\n "}, {"sha": "8c77cbfe8d0cf49cb7b7d97bd0b300169b93c964", "filename": "src/lib/ivec.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4caeba917860e64bda52174cec3895b4430e7ca8/src%2Flib%2Fivec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4caeba917860e64bda52174cec3895b4430e7ca8/src%2Flib%2Fivec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fivec.rs?ref=4caeba917860e64bda52174cec3895b4430e7ca8", "patch": "@@ -142,6 +142,14 @@ fn slice_mut[@T](v: &[mutable? T], start: uint, end: uint) -> [mutable T] {\n \n // Mutators\n \n+fn shift[@T](v: &mutable [mutable? T]) -> T {\n+    let ln = len[T](v);\n+    assert (ln > 0u);\n+    let e = v.(0);\n+    v = slice[T](v, 1u, ln);\n+    ret e;\n+}\n+\n // TODO: Write this, unsafely, in a way that's not O(n).\n fn pop[@T](v: &mutable [mutable? T]) -> T {\n     let ln = len(v);"}, {"sha": "dd16e4fce56cfce4fa3d01f35d59306bf5e0ef19", "filename": "src/lib/str.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4caeba917860e64bda52174cec3895b4430e7ca8/src%2Flib%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4caeba917860e64bda52174cec3895b4430e7ca8/src%2Flib%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fstr.rs?ref=4caeba917860e64bda52174cec3895b4430e7ca8", "patch": "@@ -43,6 +43,7 @@ export pop_byte;\n export push_byte;\n export unshift_byte;\n export split;\n+export split_ivec;\n export concat;\n export connect;\n export connect_ivec;"}]}