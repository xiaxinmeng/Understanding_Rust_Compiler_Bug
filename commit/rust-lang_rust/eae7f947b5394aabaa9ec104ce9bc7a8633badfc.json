{"sha": "eae7f947b5394aabaa9ec104ce9bc7a8633badfc", "node_id": "C_kwDOAAsO6NoAKGVhZTdmOTQ3YjUzOTRhYWJhYTllYzEwNGNlOWJjN2E4NjMzYmFkZmM", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2023-01-23T10:30:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-23T10:30:02Z"}, "message": "Rollup merge of #107153 - tmiasko:dominates, r=oli-obk\n\nConsistently use dominates instead of is_dominated_by\n\nThere is a number of APIs that answer dominance queries. Previously they were named either \"dominates\" or \"is_dominated_by\". Consistently use the \"dominates\" form.\n\nNo functional changes.", "tree": {"sha": "4ab790486e6daec8263e7d19bfdd2d6cdb2fa5dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ab790486e6daec8263e7d19bfdd2d6cdb2fa5dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eae7f947b5394aabaa9ec104ce9bc7a8633badfc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjzmGqCRBK7hj4Ov3rIwAAwFgIAIUIvRwzywy+LjmnzCjiiMjx\nmdXVEait1oVKDSfORC2iJRgyR5RmJUe0I926p+yLAhEKcPDqfaOG45BH7E00PJTS\ntboLs2viD5hlU9310WfwrzqgAtU/yFWGJUWs+KjcCNqCMBw2FGjdGTBagT62Q66m\nNzhbpFkfL67u92LqiWZv+bAfcRBQasB9mI66Voo3qIWrqn0Utq94eLt5gs8jPQWY\n0p8flfUuovcojTHrpZvAWk3EworAghG5NYGEwZKuzfJJsR0lPcyUyMbVnyh0qUVv\naQ97/5tLefcw9wxftZdzbFxieK5nZq0KJ5o01/RsbQ1xeDi5zvmLCyNRYc2Mz14=\n=H2bb\n-----END PGP SIGNATURE-----\n", "payload": "tree 4ab790486e6daec8263e7d19bfdd2d6cdb2fa5dc\nparent c0f80e71661b02270613254dda588ef737df3a31\nparent 955e7fbb16e5015a493427dd2ab54aef97f2e23d\nauthor Yuki Okushi <jtitor@2k36.org> 1674469802 +0900\ncommitter GitHub <noreply@github.com> 1674469802 +0900\n\nRollup merge of #107153 - tmiasko:dominates, r=oli-obk\n\nConsistently use dominates instead of is_dominated_by\n\nThere is a number of APIs that answer dominance queries. Previously they were named either \"dominates\" or \"is_dominated_by\". Consistently use the \"dominates\" form.\n\nNo functional changes.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eae7f947b5394aabaa9ec104ce9bc7a8633badfc", "html_url": "https://github.com/rust-lang/rust/commit/eae7f947b5394aabaa9ec104ce9bc7a8633badfc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eae7f947b5394aabaa9ec104ce9bc7a8633badfc/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0f80e71661b02270613254dda588ef737df3a31", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0f80e71661b02270613254dda588ef737df3a31", "html_url": "https://github.com/rust-lang/rust/commit/c0f80e71661b02270613254dda588ef737df3a31"}, {"sha": "955e7fbb16e5015a493427dd2ab54aef97f2e23d", "url": "https://api.github.com/repos/rust-lang/rust/commits/955e7fbb16e5015a493427dd2ab54aef97f2e23d", "html_url": "https://github.com/rust-lang/rust/commit/955e7fbb16e5015a493427dd2ab54aef97f2e23d"}], "stats": {"total": 36, "additions": 18, "deletions": 18}, "files": [{"sha": "6398a501983cfbd61089c6902cb9baa6d81f405e", "filename": "compiler/rustc_data_structures/src/graph/dominators/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eae7f947b5394aabaa9ec104ce9bc7a8633badfc/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fdominators%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eae7f947b5394aabaa9ec104ce9bc7a8633badfc/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fdominators%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fdominators%2Fmod.rs?ref=eae7f947b5394aabaa9ec104ce9bc7a8633badfc", "patch": "@@ -285,7 +285,7 @@ impl<Node: Idx> Dominators<Node> {\n         Iter { dominators: self, node: Some(node) }\n     }\n \n-    pub fn is_dominated_by(&self, node: Node, dom: Node) -> bool {\n+    pub fn dominates(&self, dom: Node, node: Node) -> bool {\n         // FIXME -- could be optimized by using post-order-rank\n         self.dominators(node).any(|n| n == dom)\n     }"}, {"sha": "4da893e4c0716d01ad88deccc0d83ee939ebed2b", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eae7f947b5394aabaa9ec104ce9bc7a8633badfc/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eae7f947b5394aabaa9ec104ce9bc7a8633badfc/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=eae7f947b5394aabaa9ec104ce9bc7a8633badfc", "patch": "@@ -3046,7 +3046,7 @@ impl Location {\n         if self.block == other.block {\n             self.statement_index <= other.statement_index\n         } else {\n-            dominators.is_dominated_by(other.block, self.block)\n+            dominators.dominates(self.block, other.block)\n         }\n     }\n }"}, {"sha": "658e01d9310317d4bf955b528a0b662d3b1eb6a3", "filename": "compiler/rustc_mir_transform/src/coverage/counters.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eae7f947b5394aabaa9ec104ce9bc7a8633badfc/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fcounters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eae7f947b5394aabaa9ec104ce9bc7a8633badfc/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fcounters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fcounters.rs?ref=eae7f947b5394aabaa9ec104ce9bc7a8633badfc", "patch": "@@ -520,7 +520,7 @@ impl<'a> BcbCounters<'a> {\n                 let mut found_loop_exit = false;\n                 for &branch in branches.iter() {\n                     if backedge_from_bcbs.iter().any(|&backedge_from_bcb| {\n-                        self.bcb_is_dominated_by(backedge_from_bcb, branch.target_bcb)\n+                        self.bcb_dominates(branch.target_bcb, backedge_from_bcb)\n                     }) {\n                         if let Some(reloop_branch) = some_reloop_branch {\n                             if reloop_branch.counter(&self.basic_coverage_blocks).is_none() {\n@@ -603,8 +603,8 @@ impl<'a> BcbCounters<'a> {\n     }\n \n     #[inline]\n-    fn bcb_is_dominated_by(&self, node: BasicCoverageBlock, dom: BasicCoverageBlock) -> bool {\n-        self.basic_coverage_blocks.is_dominated_by(node, dom)\n+    fn bcb_dominates(&self, dom: BasicCoverageBlock, node: BasicCoverageBlock) -> bool {\n+        self.basic_coverage_blocks.dominates(dom, node)\n     }\n \n     #[inline]"}, {"sha": "a2671eef2e940ef09ae4170ee8deea7b3298cf60", "filename": "compiler/rustc_mir_transform/src/coverage/graph.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/eae7f947b5394aabaa9ec104ce9bc7a8633badfc/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eae7f947b5394aabaa9ec104ce9bc7a8633badfc/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fgraph.rs?ref=eae7f947b5394aabaa9ec104ce9bc7a8633badfc", "patch": "@@ -209,8 +209,8 @@ impl CoverageGraph {\n     }\n \n     #[inline(always)]\n-    pub fn is_dominated_by(&self, node: BasicCoverageBlock, dom: BasicCoverageBlock) -> bool {\n-        self.dominators.as_ref().unwrap().is_dominated_by(node, dom)\n+    pub fn dominates(&self, dom: BasicCoverageBlock, node: BasicCoverageBlock) -> bool {\n+        self.dominators.as_ref().unwrap().dominates(dom, node)\n     }\n \n     #[inline(always)]\n@@ -312,7 +312,7 @@ rustc_index::newtype_index! {\n /// to the BCB's primary counter or expression).\n ///\n /// The BCB CFG is critical to simplifying the coverage analysis by ensuring graph path-based\n-/// queries (`is_dominated_by()`, `predecessors`, `successors`, etc.) have branch (control flow)\n+/// queries (`dominates()`, `predecessors`, `successors`, etc.) have branch (control flow)\n /// significance.\n #[derive(Debug, Clone)]\n pub(super) struct BasicCoverageBlockData {\n@@ -594,7 +594,7 @@ impl TraverseCoverageGraphWithLoops {\n                 // branching block would have given an `Expression` (or vice versa).\n                 let (some_successor_to_add, some_loop_header) =\n                     if let Some((_, loop_header)) = context.loop_backedges {\n-                        if basic_coverage_blocks.is_dominated_by(successor, loop_header) {\n+                        if basic_coverage_blocks.dominates(loop_header, successor) {\n                             (Some(successor), Some(loop_header))\n                         } else {\n                             (None, None)\n@@ -666,15 +666,15 @@ pub(super) fn find_loop_backedges(\n     //\n     // The overall complexity appears to be comparable to many other MIR transform algorithms, and I\n     // don't expect that this function is creating a performance hot spot, but if this becomes an\n-    // issue, there may be ways to optimize the `is_dominated_by` algorithm (as indicated by an\n+    // issue, there may be ways to optimize the `dominates` algorithm (as indicated by an\n     // existing `FIXME` comment in that code), or possibly ways to optimize it's usage here, perhaps\n     // by keeping track of results for visited `BasicCoverageBlock`s if they can be used to short\n-    // circuit downstream `is_dominated_by` checks.\n+    // circuit downstream `dominates` checks.\n     //\n     // For now, that kind of optimization seems unnecessarily complicated.\n     for (bcb, _) in basic_coverage_blocks.iter_enumerated() {\n         for &successor in &basic_coverage_blocks.successors[bcb] {\n-            if basic_coverage_blocks.is_dominated_by(bcb, successor) {\n+            if basic_coverage_blocks.dominates(successor, bcb) {\n                 let loop_header = successor;\n                 let backedge_from_bcb = bcb;\n                 debug!("}, {"sha": "31d5541a31b6b7a26c95d44ab7a3fb0b53f9e9d9", "filename": "compiler/rustc_mir_transform/src/coverage/spans.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/eae7f947b5394aabaa9ec104ce9bc7a8633badfc/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eae7f947b5394aabaa9ec104ce9bc7a8633badfc/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs?ref=eae7f947b5394aabaa9ec104ce9bc7a8633badfc", "patch": "@@ -63,7 +63,7 @@ impl CoverageStatement {\n /// Note: A `CoverageStatement` merged into another CoverageSpan may come from a `BasicBlock` that\n /// is not part of the `CoverageSpan` bcb if the statement was included because it's `Span` matches\n /// or is subsumed by the `Span` associated with this `CoverageSpan`, and it's `BasicBlock`\n-/// `is_dominated_by()` the `BasicBlock`s in this `CoverageSpan`.\n+/// `dominates()` the `BasicBlock`s in this `CoverageSpan`.\n #[derive(Debug, Clone)]\n pub(super) struct CoverageSpan {\n     pub span: Span,\n@@ -705,12 +705,12 @@ impl<'a, 'tcx> CoverageSpans<'a, 'tcx> {\n     fn hold_pending_dups_unless_dominated(&mut self) {\n         // Equal coverage spans are ordered by dominators before dominated (if any), so it should be\n         // impossible for `curr` to dominate any previous `CoverageSpan`.\n-        debug_assert!(!self.span_bcb_is_dominated_by(self.prev(), self.curr()));\n+        debug_assert!(!self.span_bcb_dominates(self.curr(), self.prev()));\n \n         let initial_pending_count = self.pending_dups.len();\n         if initial_pending_count > 0 {\n             let mut pending_dups = self.pending_dups.split_off(0);\n-            pending_dups.retain(|dup| !self.span_bcb_is_dominated_by(self.curr(), dup));\n+            pending_dups.retain(|dup| !self.span_bcb_dominates(dup, self.curr()));\n             self.pending_dups.append(&mut pending_dups);\n             if self.pending_dups.len() < initial_pending_count {\n                 debug!(\n@@ -721,7 +721,7 @@ impl<'a, 'tcx> CoverageSpans<'a, 'tcx> {\n             }\n         }\n \n-        if self.span_bcb_is_dominated_by(self.curr(), self.prev()) {\n+        if self.span_bcb_dominates(self.prev(), self.curr()) {\n             debug!(\n                 \"  different bcbs but SAME spans, and prev dominates curr. Discard prev={:?}\",\n                 self.prev()\n@@ -787,8 +787,8 @@ impl<'a, 'tcx> CoverageSpans<'a, 'tcx> {\n         }\n     }\n \n-    fn span_bcb_is_dominated_by(&self, covspan: &CoverageSpan, dom_covspan: &CoverageSpan) -> bool {\n-        self.basic_coverage_blocks.is_dominated_by(covspan.bcb, dom_covspan.bcb)\n+    fn span_bcb_dominates(&self, dom_covspan: &CoverageSpan, covspan: &CoverageSpan) -> bool {\n+        self.basic_coverage_blocks.dominates(dom_covspan.bcb, covspan.bcb)\n     }\n }\n "}]}