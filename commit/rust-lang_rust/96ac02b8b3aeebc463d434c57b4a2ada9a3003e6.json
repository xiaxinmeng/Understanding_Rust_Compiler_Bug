{"sha": "96ac02b8b3aeebc463d434c57b4a2ada9a3003e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2YWMwMmI4YjNhZWViYzQ2M2Q0MzRjNTdiNGEyYWRhOWEzMDAzZTY=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2019-08-29T20:30:53Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2019-08-30T21:08:18Z"}, "message": "Use new `Place::is_indirect` API where possible", "tree": {"sha": "3cc4c29760f7a14ebcd8afba85bf786c42888c28", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3cc4c29760f7a14ebcd8afba85bf786c42888c28"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/96ac02b8b3aeebc463d434c57b4a2ada9a3003e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/96ac02b8b3aeebc463d434c57b4a2ada9a3003e6", "html_url": "https://github.com/rust-lang/rust/commit/96ac02b8b3aeebc463d434c57b4a2ada9a3003e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/96ac02b8b3aeebc463d434c57b4a2ada9a3003e6/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86487329bb385f74bed67718f2358436ddca1aa4", "url": "https://api.github.com/repos/rust-lang/rust/commits/86487329bb385f74bed67718f2358436ddca1aa4", "html_url": "https://github.com/rust-lang/rust/commit/86487329bb385f74bed67718f2358436ddca1aa4"}], "stats": {"total": 40, "additions": 11, "deletions": 29}, "files": [{"sha": "bac08090817d952d98ca59d7be60294a8d3f343c", "filename": "src/librustc_mir/borrow_check/path_utils.rs", "status": "modified", "additions": 7, "deletions": 16, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/96ac02b8b3aeebc463d434c57b4a2ada9a3003e6/src%2Flibrustc_mir%2Fborrow_check%2Fpath_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96ac02b8b3aeebc463d434c57b4a2ada9a3003e6/src%2Flibrustc_mir%2Fborrow_check%2Fpath_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fpath_utils.rs?ref=96ac02b8b3aeebc463d434c57b4a2ada9a3003e6", "patch": "@@ -3,7 +3,7 @@ use crate::borrow_check::places_conflict;\n use crate::borrow_check::AccessDepth;\n use crate::dataflow::indexes::BorrowIndex;\n use rustc::mir::{BasicBlock, Location, Body, Place, PlaceBase};\n-use rustc::mir::{ProjectionElem, BorrowKind};\n+use rustc::mir::BorrowKind;\n use rustc::ty::{self, TyCtxt};\n use rustc_data_structures::graph::dominators::Dominators;\n \n@@ -133,20 +133,11 @@ pub(super) fn is_active<'tcx>(\n /// Determines if a given borrow is borrowing local data\n /// This is called for all Yield statements on movable generators\n pub(super) fn borrow_of_local_data(place: &Place<'_>) -> bool {\n-    place.iterate(|place_base, place_projection| {\n-        match place_base {\n-            PlaceBase::Static(..) => return false,\n-            PlaceBase::Local(..) => {},\n-        }\n-\n-        for proj in place_projection {\n-            // Reborrow of already borrowed data is ignored\n-            // Any errors will be caught on the initial borrow\n-            if proj.elem == ProjectionElem::Deref {\n-                return false;\n-            }\n-        }\n+    match place.base {\n+        PlaceBase::Static(_) => false,\n \n-        true\n-    })\n+        // Reborrow of already borrowed data is ignored\n+        // Any errors will be caught on the initial borrow\n+        PlaceBase::Local(_) => !place.is_indirect(),\n+    }\n }"}, {"sha": "1c43a553cc3c9edc681224df761c7f19f1cabe24", "filename": "src/librustc_mir/dataflow/impls/borrowed_locals.rs", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/96ac02b8b3aeebc463d434c57b4a2ada9a3003e6/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrowed_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96ac02b8b3aeebc463d434c57b4a2ada9a3003e6/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrowed_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrowed_locals.rs?ref=96ac02b8b3aeebc463d434c57b4a2ada9a3003e6", "patch": "@@ -93,19 +93,10 @@ struct BorrowedLocalsVisitor<'gk> {\n }\n \n fn find_local(place: &Place<'_>) -> Option<Local> {\n-    place.iterate(|place_base, place_projection| {\n-        for proj in place_projection {\n-            if proj.elem == ProjectionElem::Deref {\n-                return None;\n-            }\n-        }\n-\n-        if let PlaceBase::Local(local) = place_base {\n-            Some(*local)\n-        } else {\n-            None\n-        }\n-    })\n+    match place.base {\n+        PlaceBase::Local(local) if !place.is_indirect() => Some(local),\n+        _ => None,\n+    }\n }\n \n impl<'tcx> Visitor<'tcx> for BorrowedLocalsVisitor<'_> {"}]}