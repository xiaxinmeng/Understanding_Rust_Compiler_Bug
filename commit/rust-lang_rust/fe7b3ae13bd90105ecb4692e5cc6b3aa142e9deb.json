{"sha": "fe7b3ae13bd90105ecb4692e5cc6b3aa142e9deb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlN2IzYWUxM2JkOTAxMDVlY2I0NjkyZTVjYzZiM2FhMTQyZTlkZWI=", "commit": {"author": {"name": "Jonathan Turner", "email": "jonathandturner@users.noreply.github.com", "date": "2016-08-07T16:59:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-08-07T16:59:44Z"}, "message": "Rollup merge of #35454 - Detegr:master, r=jonathandturner\n\nNew error message format for E0117 and E0118\n\nPart of #35233\nr? @jonathandturner", "tree": {"sha": "4fe331ecaa26abe87be3d498adc616b49ce84c7e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4fe331ecaa26abe87be3d498adc616b49ce84c7e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe7b3ae13bd90105ecb4692e5cc6b3aa142e9deb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe7b3ae13bd90105ecb4692e5cc6b3aa142e9deb", "html_url": "https://github.com/rust-lang/rust/commit/fe7b3ae13bd90105ecb4692e5cc6b3aa142e9deb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe7b3ae13bd90105ecb4692e5cc6b3aa142e9deb/comments", "author": {"login": "jonathandturner", "id": 111457284, "node_id": "O_kgDOBqS0BA", "avatar_url": "https://avatars.githubusercontent.com/u/111457284?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonathandturner", "html_url": "https://github.com/jonathandturner", "followers_url": "https://api.github.com/users/jonathandturner/followers", "following_url": "https://api.github.com/users/jonathandturner/following{/other_user}", "gists_url": "https://api.github.com/users/jonathandturner/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonathandturner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonathandturner/subscriptions", "organizations_url": "https://api.github.com/users/jonathandturner/orgs", "repos_url": "https://api.github.com/users/jonathandturner/repos", "events_url": "https://api.github.com/users/jonathandturner/events{/privacy}", "received_events_url": "https://api.github.com/users/jonathandturner/received_events", "type": "Organization", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6cf011334e48bff757406f396e631a8d11f01c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6cf011334e48bff757406f396e631a8d11f01c9", "html_url": "https://github.com/rust-lang/rust/commit/a6cf011334e48bff757406f396e631a8d11f01c9"}, {"sha": "e91f3f6d1296176b17042fcfba7ee5f77a847423", "url": "https://api.github.com/repos/rust-lang/rust/commits/e91f3f6d1296176b17042fcfba7ee5f77a847423", "html_url": "https://github.com/rust-lang/rust/commit/e91f3f6d1296176b17042fcfba7ee5f77a847423"}], "stats": {"total": 26, "additions": 16, "deletions": 10}, "files": [{"sha": "2f2668e9645bf32d6216dddaaf30762b130354d3", "filename": "src/librustc_typeck/coherence/orphan.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/fe7b3ae13bd90105ecb4692e5cc6b3aa142e9deb/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe7b3ae13bd90105ecb4692e5cc6b3aa142e9deb/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs?ref=fe7b3ae13bd90105ecb4692e5cc6b3aa142e9deb", "patch": "@@ -66,7 +66,7 @@ impl<'cx, 'tcx> OrphanChecker<'cx, 'tcx> {\n     fn check_item(&self, item: &hir::Item) {\n         let def_id = self.tcx.map.local_def_id(item.id);\n         match item.node {\n-            hir::ItemImpl(_, _, _, None, _, _) => {\n+            hir::ItemImpl(_, _, _, None, ref ty, _) => {\n                 // For inherent impls, self type must be a nominal type\n                 // defined in this crate.\n                 debug!(\"coherence2::orphan check: inherent impl {}\",\n@@ -209,11 +209,11 @@ impl<'cx, 'tcx> OrphanChecker<'cx, 'tcx> {\n                         return;\n                     }\n                     _ => {\n-                        struct_span_err!(self.tcx.sess, item.span, E0118,\n+                        struct_span_err!(self.tcx.sess, ty.span, E0118,\n                                          \"no base type found for inherent implementation\")\n-                        .span_help(item.span,\n-                                   \"either implement a trait on it or create a newtype to wrap it \\\n-                                    instead\")\n+                        .span_label(ty.span, &format!(\"impl requires a base type\"))\n+                        .note(&format!(\"either implement a trait on it or create a newtype \\\n+                                        to wrap it instead\"))\n                         .emit();\n                         return;\n                     }\n@@ -228,12 +228,14 @@ impl<'cx, 'tcx> OrphanChecker<'cx, 'tcx> {\n                 match traits::orphan_check(self.tcx, def_id) {\n                     Ok(()) => { }\n                     Err(traits::OrphanCheckErr::NoLocalInputType) => {\n-                        span_err!(\n+                        struct_span_err!(\n                             self.tcx.sess, item.span, E0117,\n-                            \"the impl does not reference any \\\n-                             types defined in this crate; \\\n-                             only traits defined in the current crate can be \\\n-                             implemented for arbitrary types\");\n+                             \"only traits defined in the current crate can be \\\n+                             implemented for arbitrary types\")\n+                        .span_label(item.span, &format!(\"impl doesn't use types inside crate\"))\n+                        .note(&format!(\"the impl does not reference any \\\n+                                        types defined in this crate\"))\n+                        .emit();\n                         return;\n                     }\n                     Err(traits::OrphanCheckErr::UncoveredTy(param_ty)) => {"}, {"sha": "e9375e673253fb863edb4135df4256446645d4ec", "filename": "src/test/compile-fail/E0117.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe7b3ae13bd90105ecb4692e5cc6b3aa142e9deb/src%2Ftest%2Fcompile-fail%2FE0117.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe7b3ae13bd90105ecb4692e5cc6b3aa142e9deb/src%2Ftest%2Fcompile-fail%2FE0117.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0117.rs?ref=fe7b3ae13bd90105ecb4692e5cc6b3aa142e9deb", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n impl Drop for u32 {} //~ ERROR E0117\n+//~^ NOTE impl doesn't use types inside crate\n+//~| NOTE the impl does not reference any types defined in this crate\n \n fn main() {\n }"}, {"sha": "3fc478f1e403e3adf57ed00c48e547b1c1f1dfbb", "filename": "src/test/compile-fail/E0118.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe7b3ae13bd90105ecb4692e5cc6b3aa142e9deb/src%2Ftest%2Fcompile-fail%2FE0118.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe7b3ae13bd90105ecb4692e5cc6b3aa142e9deb/src%2Ftest%2Fcompile-fail%2FE0118.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0118.rs?ref=fe7b3ae13bd90105ecb4692e5cc6b3aa142e9deb", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n impl (u8, u8) { //~ ERROR E0118\n+//~^ NOTE impl requires a base type\n+//~| NOTE either implement a trait on it or create a newtype to wrap it instead\n     fn get_state(&self) -> String {\n         String::new()\n     }"}]}