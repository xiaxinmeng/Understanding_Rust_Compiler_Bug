{"sha": "df1814ba089e8b86bd7e191afa99c7bd10e05d4f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmMTgxNGJhMDg5ZThiODZiZDdlMTkxYWZhOTljN2JkMTBlMDVkNGY=", "commit": {"author": {"name": "James Miller", "email": "bladeon@gmail.com", "date": "2013-05-26T00:54:30Z"}, "committer": {"name": "James Miller", "email": "bladeon@gmail.com", "date": "2013-05-26T00:54:30Z"}, "message": "Add some documentation", "tree": {"sha": "46a9752bb73934deff512b3e2ef3305f70b7d11f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46a9752bb73934deff512b3e2ef3305f70b7d11f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df1814ba089e8b86bd7e191afa99c7bd10e05d4f", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df1814ba089e8b86bd7e191afa99c7bd10e05d4f", "html_url": "https://github.com/rust-lang/rust/commit/df1814ba089e8b86bd7e191afa99c7bd10e05d4f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df1814ba089e8b86bd7e191afa99c7bd10e05d4f/comments", "author": null, "committer": null, "parents": [{"sha": "30b471bf23f171645fcb61b2c677c6d12061f05b", "url": "https://api.github.com/repos/rust-lang/rust/commits/30b471bf23f171645fcb61b2c677c6d12061f05b", "html_url": "https://github.com/rust-lang/rust/commit/30b471bf23f171645fcb61b2c677c6d12061f05b"}], "stats": {"total": 26, "additions": 25, "deletions": 1}, "files": [{"sha": "ab2b5d8ea2b3b4b77154eb3a5bf92a8d4f1a9bf2", "filename": "src/libstd/unstable/atomics.rs", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/df1814ba089e8b86bd7e191afa99c7bd10e05d4f/src%2Flibstd%2Funstable%2Fatomics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df1814ba089e8b86bd7e191afa99c7bd10e05d4f/src%2Flibstd%2Funstable%2Fatomics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fatomics.rs?ref=df1814ba089e8b86bd7e191afa99c7bd10e05d4f", "patch": "@@ -10,6 +10,12 @@\n \n /*!\n  * Atomic types\n+ *\n+ * Basic atomic types supporting atomic operations. Each method takes an `Ordering` which\n+ * represents the strength of the memory barrier for that operation. These orderings are the same\n+ * as C++11 atomic orderings [http://gcc.gnu.org/wiki/Atomic/GCCMM/AtomicSync]\n+ *\n+ * All atomic types are a single word in size.\n  */\n \n use unstable::intrinsics;\n@@ -18,26 +24,44 @@ use option::{Option,Some,None};\n use libc::c_void;\n use ops::Drop;\n \n+/**\n+ * A simple atomic flag, that can be set and cleared. The most basic atomic type.\n+ */\n pub struct AtomicFlag {\n     priv v: int\n }\n \n+/**\n+ * An atomic boolean type.\n+ */\n pub struct AtomicBool {\n     priv v: uint\n }\n \n+/**\n+ * A signed atomic integer type, supporting basic atomic aritmetic operations\n+ */\n pub struct AtomicInt {\n     priv v: int\n }\n \n+/**\n+ * An unsigned atomic integer type, supporting basic atomic aritmetic operations\n+ */\n pub struct AtomicUint {\n     priv v: uint\n }\n \n+/**\n+ * An unsafe atomic pointer. Only supports basic atomic operations\n+ */\n pub struct AtomicPtr<T> {\n     priv p: *mut T\n }\n \n+/**\n+ * An owned atomic pointer. Ensures that only a single reference to the data is held at any time.\n+ */\n pub struct AtomicOption<T> {\n     priv p: *mut c_void\n }\n@@ -63,11 +87,11 @@ impl AtomicFlag {\n         unsafe {atomic_store(&mut self.v, 0, order)}\n     }\n \n-    #[inline(always)]\n     /**\n      * Sets the flag if it was previously unset, returns the previous value of the\n      * flag.\n      */\n+    #[inline(always)]\n     fn test_and_set(&mut self, order: Ordering) -> bool {\n         unsafe {atomic_compare_and_swap(&mut self.v, 0, 1, order) > 0}\n     }"}]}