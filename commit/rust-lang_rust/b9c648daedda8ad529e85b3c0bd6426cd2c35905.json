{"sha": "b9c648daedda8ad529e85b3c0bd6426cd2c35905", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5YzY0OGRhZWRkYThhZDUyOWU4NWIzYzBiZDY0MjZjZDJjMzU5MDU=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-11-10T14:12:00Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-11-10T14:12:00Z"}, "message": "Rustfmt", "tree": {"sha": "784afe078bd028de85308c10110e836eab2a80f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/784afe078bd028de85308c10110e836eab2a80f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b9c648daedda8ad529e85b3c0bd6426cd2c35905", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b9c648daedda8ad529e85b3c0bd6426cd2c35905", "html_url": "https://github.com/rust-lang/rust/commit/b9c648daedda8ad529e85b3c0bd6426cd2c35905", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b9c648daedda8ad529e85b3c0bd6426cd2c35905/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c88353c94290ce06c8cfddf11d83a515c9c82b24", "url": "https://api.github.com/repos/rust-lang/rust/commits/c88353c94290ce06c8cfddf11d83a515c9c82b24", "html_url": "https://github.com/rust-lang/rust/commit/c88353c94290ce06c8cfddf11d83a515c9c82b24"}], "stats": {"total": 26, "additions": 14, "deletions": 12}, "files": [{"sha": "78e5eed0adb1138e991709654c8764ff1c9e6909", "filename": "src/lib.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b9c648daedda8ad529e85b3c0bd6426cd2c35905/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9c648daedda8ad529e85b3c0bd6426cd2c35905/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=b9c648daedda8ad529e85b3c0bd6426cd2c35905", "patch": "@@ -30,19 +30,25 @@ extern crate cranelift_simplejit;\n extern crate target_lexicon;\n \n use std::any::Any;\n+use std::fs::File;\n+use std::io::Write;\n use std::sync::mpsc;\n \n+use syntax::symbol::Symbol;\n+\n use rustc::dep_graph::DepGraph;\n use rustc::middle::cstore::MetadataLoader;\n use rustc::session::{config::OutputFilenames, CompileIncomplete};\n use rustc::ty::query::Providers;\n use rustc_codegen_utils::codegen_backend::CodegenBackend;\n use rustc_codegen_utils::link::out_filename;\n-use syntax::symbol::Symbol;\n \n use cranelift::codegen::settings;\n use cranelift_faerie::*;\n \n+use crate::constant::ConstantCx;\n+use crate::prelude::*;\n+\n struct NonFatal(pub String);\n \n macro_rules! unimpl {\n@@ -73,19 +79,22 @@ mod prelude {\n \n     pub use rustc::hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n     pub use rustc::mir::{self, interpret::AllocId, *};\n-    pub use rustc::session::{config::{CrateType, Lto}, Session};\n+    pub use rustc::session::{\n+        config::{CrateType, Lto},\n+        Session,\n+    };\n     pub use rustc::ty::layout::{self, Abi, LayoutOf, Scalar, Size, TyLayout};\n     pub use rustc::ty::{\n         self, subst::Substs, FnSig, Instance, InstanceDef, ParamEnv, PolyFnSig, Ty, TyCtxt,\n         TypeAndMut, TypeFoldable,\n     };\n+    pub use rustc_codegen_utils::CompiledModule;\n     pub use rustc_data_structures::{\n         fx::{FxHashMap, FxHashSet},\n         indexed_vec::Idx,\n         sync::Lrc,\n     };\n     pub use rustc_mir::monomorphize::{collector, MonoItem};\n-    pub use rustc_codegen_utils::CompiledModule;\n \n     pub use cranelift::codegen::ir::{\n         condcodes::IntCC, function::Function, ExternalName, FuncRef, Inst, StackSlot,\n@@ -102,12 +111,6 @@ mod prelude {\n     pub use crate::{Caches, CodegenResults};\n }\n \n-use std::fs::File;\n-use std::io::Write;\n-\n-use crate::constant::ConstantCx;\n-use crate::prelude::*;\n-\n pub struct Caches<'tcx> {\n     pub context: Context,\n     pub vtables: HashMap<(Ty<'tcx>, ty::PolyExistentialTraitRef<'tcx>), DataId>,\n@@ -147,7 +150,7 @@ impl CodegenBackend for CraneliftCodegenBackend {\n             Lto::Fat | Lto::Thin | Lto::ThinLocal => {\n                 sess.warn(\"Rustc codegen cranelift doesn't support lto\");\n             }\n-            Lto::No => {},\n+            Lto::No => {}\n         }\n         if sess.opts.cg.rpath {\n             sess.err(\"rpath is not yet supported\");\n@@ -200,8 +203,7 @@ impl CodegenBackend for CraneliftCodegenBackend {\n         tcx.sess.warn(\"Saved incremental data\");\n \n         let mut log = if cfg!(debug_assertions) {\n-            Some(File::create(concat!(env!(\"CARGO_MANIFEST_DIR\"), \"/target/out/log.txt\"))\n-                    .unwrap())\n+            Some(File::create(concat!(env!(\"CARGO_MANIFEST_DIR\"), \"/target/out/log.txt\")).unwrap())\n         } else {\n             None\n         };"}]}