{"sha": "b75199634a74035a5cfde4b199321257436807fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3NTE5OTYzNGE3NDAzNWE1Y2ZkZTRiMTk5MzIxMjU3NDM2ODA3ZmM=", "commit": {"author": {"name": "Lindsey Kuper", "email": "lindsey@rockstargirl.org", "date": "2012-06-11T23:49:35Z"}, "committer": {"name": "Lindsey Kuper", "email": "lindsey@rockstargirl.org", "date": "2012-06-11T23:49:35Z"}, "message": "syntax: minor cleanups; making things more idiomatic", "tree": {"sha": "8309afb8c31971370a5c96b0ea56783231b766df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8309afb8c31971370a5c96b0ea56783231b766df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b75199634a74035a5cfde4b199321257436807fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b75199634a74035a5cfde4b199321257436807fc", "html_url": "https://github.com/rust-lang/rust/commit/b75199634a74035a5cfde4b199321257436807fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b75199634a74035a5cfde4b199321257436807fc/comments", "author": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8467279faccc3837cddf854e30eafb3a086c3c9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/8467279faccc3837cddf854e30eafb3a086c3c9e", "html_url": "https://github.com/rust-lang/rust/commit/8467279faccc3837cddf854e30eafb3a086c3c9e"}], "stats": {"total": 144, "additions": 69, "deletions": 75}, "files": [{"sha": "6bf6347704d4fc0f51426b8e57763b81114917d9", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 69, "deletions": 75, "changes": 144, "blob_url": "https://github.com/rust-lang/rust/blob/b75199634a74035a5cfde4b199321257436807fc/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b75199634a74035a5cfde4b199321257436807fc/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=b75199634a74035a5cfde4b199321257436807fc", "patch": "@@ -1,4 +1,3 @@\n-\n import util::interner;\n import util::interner::interner;\n import std::map::{hashmap, str_hash};\n@@ -66,95 +65,91 @@ enum token {\n     IDENT(str_num, bool),\n     UNDERSCORE,\n     EOF,\n-\n }\n \n fn binop_to_str(o: binop) -> str {\n     alt o {\n-      PLUS { ret \"+\"; }\n-      MINUS { ret \"-\"; }\n-      STAR { ret \"*\"; }\n-      SLASH { ret \"/\"; }\n-      PERCENT { ret \"%\"; }\n-      CARET { ret \"^\"; }\n-      AND { ret \"&\"; }\n-      OR { ret \"|\"; }\n-      SHL { ret \"<<\"; }\n-      SHR { ret \">>\"; }\n+      PLUS { \"+\" }\n+      MINUS { \"-\" }\n+      STAR { \"*\" }\n+      SLASH { \"/\" }\n+      PERCENT { \"%\" }\n+      CARET { \"^\" }\n+      AND { \"&\" }\n+      OR { \"|\" }\n+      SHL { \"<<\" }\n+      SHR { \">>\" }\n     }\n }\n \n fn to_str(in: interner<@str>, t: token) -> str {\n     alt t {\n-      EQ { ret \"=\"; }\n-      LT { ret \"<\"; }\n-      LE { ret \"<=\"; }\n-      EQEQ { ret \"==\"; }\n-      NE { ret \"!=\"; }\n-      GE { ret \">=\"; }\n-      GT { ret \">\"; }\n-      NOT { ret \"!\"; }\n-      TILDE { ret \"~\"; }\n-      OROR { ret \"||\"; }\n-      ANDAND { ret \"&&\"; }\n-      BINOP(op) { ret binop_to_str(op); }\n-      BINOPEQ(op) { ret binop_to_str(op) + \"=\"; }\n+      EQ { \"=\" }\n+      LT { \"<\" }\n+      LE { \"<=\" }\n+      EQEQ { \"==\" }\n+      NE { \"!=\" }\n+      GE { \">=\" }\n+      GT { \">\" }\n+      NOT { \"!\" }\n+      TILDE { \"~\" }\n+      OROR { \"||\" }\n+      ANDAND { \"&&\" }\n+      BINOP(op) { binop_to_str(op) }\n+      BINOPEQ(op) { binop_to_str(op) + \"=\" }\n \n       /* Structural symbols */\n-      AT {\n-        ret \"@\";\n-      }\n-      DOT { ret \".\"; }\n-      ELLIPSIS { ret \"...\"; }\n-      COMMA { ret \",\"; }\n-      SEMI { ret \";\"; }\n-      COLON { ret \":\"; }\n-      MOD_SEP { ret \"::\"; }\n-      RARROW { ret \"->\"; }\n-      LARROW { ret \"<-\"; }\n-      DARROW { ret \"<->\"; }\n-      FAT_ARROW { ret \"=>\"; }\n-      LPAREN { ret \"(\"; }\n-      RPAREN { ret \")\"; }\n-      LBRACKET { ret \"[\"; }\n-      RBRACKET { ret \"]\"; }\n-      LBRACE { ret \"{\"; }\n-      RBRACE { ret \"}\"; }\n-      POUND { ret \"#\"; }\n-      DOLLAR { ret \"$\"; }\n+      AT { \"@\" }\n+      DOT { \".\" }\n+      ELLIPSIS { \"...\" }\n+      COMMA { \",\" }\n+      SEMI { \"\" }\n+      COLON { \":\" }\n+      MOD_SEP { \"::\" }\n+      RARROW { \"->\" }\n+      LARROW { \"<-\" }\n+      DARROW { \"<->\" }\n+      FAT_ARROW { \"=>\" }\n+      LPAREN { \"(\" }\n+      RPAREN { \")\" }\n+      LBRACKET { \"[\" }\n+      RBRACKET { \"]\" }\n+      LBRACE { \"{\" }\n+      RBRACE { \"}\" }\n+      POUND { \"#\" }\n+      DOLLAR { \"$\" }\n \n       /* Literals */\n       LIT_INT(c, ast::ty_char) {\n-        ret \"'\" + char::escape_default(c as char) + \"'\";\n+        \"'\" + char::escape_default(c as char) + \"'\"\n       }\n       LIT_INT(i, t) {\n-        ret int::to_str(i as int, 10u) + ast_util::int_ty_to_str(t);\n+        int::to_str(i as int, 10u) + ast_util::int_ty_to_str(t)\n       }\n       LIT_UINT(u, t) {\n-        ret uint::to_str(u as uint, 10u) + ast_util::uint_ty_to_str(t);\n+        uint::to_str(u as uint, 10u) + ast_util::uint_ty_to_str(t)\n       }\n       LIT_INT_UNSUFFIXED(i, t) {\n-        ret int::to_str(i as int, 10u) + ast_util::int_ty_to_str(t);\n+        int::to_str(i as int, 10u) + ast_util::int_ty_to_str(t)\n       }\n       LIT_FLOAT(s, t) {\n-        ret *interner::get(in, s) +\n-            ast_util::float_ty_to_str(t);\n+        *interner::get(in, s) +\n+            ast_util::float_ty_to_str(t)\n       }\n       LIT_STR(s) {\n-        ret \"\\\"\"\n+        \"\\\"\"\n             + str::escape_default(*interner::get(in, s))\n-            + \"\\\"\";\n+            + \"\\\"\"\n       }\n       /* Name components */\n       IDENT(s, _) {\n-        ret *interner::get(in, s);\n+        *interner::get(in, s)\n       }\n-      UNDERSCORE { ret \"_\"; }\n-      EOF { ret \"<eof>\"; }\n+      UNDERSCORE { \"_\" }\n+      EOF { \"<eof>\" }\n     }\n }\n \n-\n pure fn can_begin_expr(t: token) -> bool {\n     alt t {\n       LPAREN { true }\n@@ -179,28 +174,27 @@ pure fn can_begin_expr(t: token) -> bool {\n     }\n }\n \n-fn is_lit(t: token::token) -> bool {\n-    ret alt t {\n-          token::LIT_INT(_, _) { true }\n-          token::LIT_UINT(_, _) { true }\n-          token::LIT_INT_UNSUFFIXED(_, _) { true }\n-          token::LIT_FLOAT(_, _) { true }\n-          token::LIT_STR(_) { true }\n-          _ { false }\n-        }\n+fn is_lit(t: token) -> bool {\n+    alt t {\n+      LIT_INT(_, _) { true }\n+      LIT_UINT(_, _) { true }\n+      LIT_INT_UNSUFFIXED(_, _) { true }\n+      LIT_FLOAT(_, _) { true }\n+      LIT_STR(_) { true }\n+      _ { false }\n+    }\n }\n \n-pure fn is_ident(t: token::token) -> bool {\n-    alt t { token::IDENT(_, _) { ret true; } _ { } }\n-    ret false;\n+pure fn is_ident(t: token) -> bool {\n+    alt t { IDENT(_, _) { true } _ { false } }\n }\n \n-pure fn is_plain_ident(t: token::token) -> bool {\n-    ret alt t { token::IDENT(_, false) { true } _ { false } };\n+pure fn is_plain_ident(t: token) -> bool {\n+    alt t { IDENT(_, false) { true } _ { false } }\n }\n \n-pure fn is_bar(t: token::token) -> bool {\n-    alt t { token::BINOP(token::OR) | token::OROR { true } _ { false } }\n+pure fn is_bar(t: token) -> bool {\n+    alt t { BINOP(OR) | OROR { true } _ { false } }\n }\n \n #[doc = \"\n@@ -219,7 +213,7 @@ fn keyword_table() -> hashmap<str, ()> {\n     for restricted_keyword_table().each_key {|word|\n         keywords.insert(word, ());\n     }\n-    ret keywords;\n+    keywords\n }\n \n #[doc = \"Keywords that may be used as identifiers\"]"}]}