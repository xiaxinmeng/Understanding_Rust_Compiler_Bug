{"sha": "e69c2c75d6d279ffd636634b0cde2529bbf8b6f5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2OWMyYzc1ZDZkMjc5ZmZkNjM2NjM0YjBjZGUyNTI5YmJmOGI2ZjU=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2019-01-11T03:58:46Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2019-01-11T03:58:46Z"}, "message": "Address comments", "tree": {"sha": "ac1ee745b720447938990b772e3e284a442f7e03", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac1ee745b720447938990b772e3e284a442f7e03"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e69c2c75d6d279ffd636634b0cde2529bbf8b6f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e69c2c75d6d279ffd636634b0cde2529bbf8b6f5", "html_url": "https://github.com/rust-lang/rust/commit/e69c2c75d6d279ffd636634b0cde2529bbf8b6f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e69c2c75d6d279ffd636634b0cde2529bbf8b6f5/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "468254b38f8afd8d878ccce44b604bb6ce246dd4", "url": "https://api.github.com/repos/rust-lang/rust/commits/468254b38f8afd8d878ccce44b604bb6ce246dd4", "html_url": "https://github.com/rust-lang/rust/commit/468254b38f8afd8d878ccce44b604bb6ce246dd4"}], "stats": {"total": 46, "additions": 20, "deletions": 26}, "files": [{"sha": "a214ec88c66549fb48067244d57394a7d9b80faf", "filename": "src/librustc/hir/check_attr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e69c2c75d6d279ffd636634b0cde2529bbf8b6f5/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e69c2c75d6d279ffd636634b0cde2529bbf8b6f5/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fcheck_attr.rs?ref=e69c2c75d6d279ffd636634b0cde2529bbf8b6f5", "patch": "@@ -388,8 +388,8 @@ fn is_c_like_enum(item: &hir::Item) -> bool {\n     }\n }\n \n-pub fn check_mod_attrs<'tcx>(tcx: TyCtxt<'_, 'tcx, 'tcx>, module_def_id: DefId) {\n-    tcx.hir().visit_module_item_likes(\n+fn check_mod_attrs<'tcx>(tcx: TyCtxt<'_, 'tcx, 'tcx>, module_def_id: DefId) {\n+    tcx.hir().visit_item_likes_in_module(\n         module_def_id,\n         &mut CheckAttrVisitor { tcx }.as_deep_visitor()\n     );"}, {"sha": "8badcbfc1b3017b4cd4d77797570239f2617346f", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e69c2c75d6d279ffd636634b0cde2529bbf8b6f5/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e69c2c75d6d279ffd636634b0cde2529bbf8b6f5/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=e69c2c75d6d279ffd636634b0cde2529bbf8b6f5", "patch": "@@ -362,15 +362,6 @@ impl<'a> LoweringContext<'a> {\n         }\n \n         impl<'lcx, 'interner> Visitor<'lcx> for MiscCollector<'lcx, 'interner> {\n-            fn visit_mod(&mut self, m: &'lcx Mod, _s: Span, _attrs: &[Attribute], n: NodeId) {\n-                self.lctx.modules.insert(n, hir::ModuleItems {\n-                    items: BTreeSet::new(),\n-                    trait_items: BTreeSet::new(),\n-                    impl_items: BTreeSet::new(),\n-                });\n-                visit::walk_mod(self, m);\n-            }\n-\n             fn visit_item(&mut self, item: &'lcx Item) {\n                 self.lctx.allocate_hir_id_counter(item.id, item);\n \n@@ -430,6 +421,12 @@ impl<'a> LoweringContext<'a> {\n \n         impl<'lcx, 'interner> Visitor<'lcx> for ItemLowerer<'lcx, 'interner> {\n             fn visit_mod(&mut self, m: &'lcx Mod, _s: Span, _attrs: &[Attribute], n: NodeId) {\n+                self.lctx.modules.insert(n, hir::ModuleItems {\n+                    items: BTreeSet::new(),\n+                    trait_items: BTreeSet::new(),\n+                    impl_items: BTreeSet::new(),\n+                });\n+\n                 let old = self.lctx.current_module;\n                 self.lctx.current_module = n;\n                 visit::walk_mod(self, m);"}, {"sha": "513e18b137371e02ecca239ef917547bc996681a", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e69c2c75d6d279ffd636634b0cde2529bbf8b6f5/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e69c2c75d6d279ffd636634b0cde2529bbf8b6f5/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=e69c2c75d6d279ffd636634b0cde2529bbf8b6f5", "patch": "@@ -507,32 +507,29 @@ impl<'hir> Map<'hir> {\n         &self.forest.krate.attrs\n     }\n \n-    pub fn visit_module_item_likes<V>(&self, module: DefId, visitor: &mut V)\n+    pub fn visit_item_likes_in_module<V>(&self, module: DefId, visitor: &mut V)\n         where V: ItemLikeVisitor<'hir>\n     {\n         let node_id = self.as_local_node_id(module).unwrap();\n \n         // Read the module so we'll be re-executed if new items\n         // appear immediately under in the module. If some new item appears\n-        // in some nested item in the module, we'll be re-executed due to the reads\n-        // in the loops below\n+        // in some nested item in the module, we'll be re-executed due to reads\n+        // in the expect_* calls the loops below\n         self.read(node_id);\n \n         let module = &self.forest.krate.modules[&node_id];\n \n         for id in &module.items {\n-            self.read(*id);\n-            visitor.visit_item(&self.forest.krate.items[id]);\n+            visitor.visit_item(self.expect_item(*id));\n         }\n \n         for id in &module.trait_items {\n-            self.read(id.node_id);\n-            visitor.visit_trait_item(&self.forest.krate.trait_items[id]);\n+            visitor.visit_trait_item(self.expect_trait_item(id.node_id));\n         }\n \n         for id in &module.impl_items {\n-            self.read(id.node_id);\n-            visitor.visit_impl_item(&self.forest.krate.impl_items[id]);\n+            visitor.visit_impl_item(self.expect_impl_item(id.node_id));\n         }\n     }\n "}, {"sha": "918e286c435bc2ba183f36c1d3024208cdf1c880", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e69c2c75d6d279ffd636634b0cde2529bbf8b6f5/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e69c2c75d6d279ffd636634b0cde2529bbf8b6f5/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=e69c2c75d6d279ffd636634b0cde2529bbf8b6f5", "patch": "@@ -464,8 +464,8 @@ pub fn check_unstable_api_usage<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n \n /// Cross-references the feature names of unstable APIs with enabled\n /// features and possibly prints errors.\n-pub fn check_mod_unstable_api_usage<'tcx>(tcx: TyCtxt<'_, 'tcx, 'tcx>, module_def_id: DefId) {\n-    tcx.hir().visit_module_item_likes(module_def_id, &mut Checker { tcx }.as_deep_visitor());\n+fn check_mod_unstable_api_usage<'tcx>(tcx: TyCtxt<'_, 'tcx, 'tcx>, module_def_id: DefId) {\n+    tcx.hir().visit_item_likes_in_module(module_def_id, &mut Checker { tcx }.as_deep_visitor());\n }\n \n pub fn provide(providers: &mut Providers<'_>) {"}, {"sha": "7d9165a82bc8fb52869a0a048ee00f0994ea48c4", "filename": "src/librustc_passes/loops.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e69c2c75d6d279ffd636634b0cde2529bbf8b6f5/src%2Flibrustc_passes%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e69c2c75d6d279ffd636634b0cde2529bbf8b6f5/src%2Flibrustc_passes%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Floops.rs?ref=e69c2c75d6d279ffd636634b0cde2529bbf8b6f5", "patch": "@@ -52,8 +52,8 @@ pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     }\n }\n \n-pub fn check_mod_loops<'tcx>(tcx: TyCtxt<'_, 'tcx, 'tcx>, module_def_id: DefId) {\n-    tcx.hir().visit_module_item_likes(module_def_id, &mut CheckLoopVisitor {\n+fn check_mod_loops<'tcx>(tcx: TyCtxt<'_, 'tcx, 'tcx>, module_def_id: DefId) {\n+    tcx.hir().visit_item_likes_in_module(module_def_id, &mut CheckLoopVisitor {\n         sess: &tcx.sess,\n         hir_map: &tcx.hir(),\n         cx: Normal,"}, {"sha": "111055e61234cea5913764c4e95168b0c2e8292d", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e69c2c75d6d279ffd636634b0cde2529bbf8b6f5/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e69c2c75d6d279ffd636634b0cde2529bbf8b6f5/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=e69c2c75d6d279ffd636634b0cde2529bbf8b6f5", "patch": "@@ -708,7 +708,7 @@ pub fn check_item_types<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Result<(), Err\n }\n \n fn check_mod_item_types<'tcx>(tcx: TyCtxt<'_, 'tcx, 'tcx>, module_def_id: DefId) {\n-    tcx.hir().visit_module_item_likes(module_def_id, &mut CheckItemTypesVisitor { tcx });\n+    tcx.hir().visit_item_likes_in_module(module_def_id, &mut CheckItemTypesVisitor { tcx });\n }\n \n pub fn check_item_bodies<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Result<(), CompileIncomplete> {"}, {"sha": "52fa9e5f9918ede08dc79bbd2a2f401af5cd2b41", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e69c2c75d6d279ffd636634b0cde2529bbf8b6f5/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e69c2c75d6d279ffd636634b0cde2529bbf8b6f5/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=e69c2c75d6d279ffd636634b0cde2529bbf8b6f5", "patch": "@@ -62,7 +62,7 @@ pub fn collect_item_types<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n }\n \n fn collect_mod_item_types<'tcx>(tcx: TyCtxt<'_, 'tcx, 'tcx>, module_def_id: DefId) {\n-    tcx.hir().visit_module_item_likes(\n+    tcx.hir().visit_item_likes_in_module(\n         module_def_id,\n         &mut CollectItemTypesVisitor { tcx }.as_deep_visitor()\n     );"}]}