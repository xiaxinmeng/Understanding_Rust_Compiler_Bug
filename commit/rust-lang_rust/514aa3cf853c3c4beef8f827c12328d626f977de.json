{"sha": "514aa3cf853c3c4beef8f827c12328d626f977de", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxNGFhM2NmODUzYzNjNGJlZWY4ZjgyN2MxMjMyOGQ2MjZmOTc3ZGU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-10-16T17:28:43Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-10-16T17:31:30Z"}, "message": "extract teraron", "tree": {"sha": "2a10336c3825ad821960c5169b78df17f7bd5f5c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a10336c3825ad821960c5169b78df17f7bd5f5c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/514aa3cf853c3c4beef8f827c12328d626f977de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/514aa3cf853c3c4beef8f827c12328d626f977de", "html_url": "https://github.com/rust-lang/rust/commit/514aa3cf853c3c4beef8f827c12328d626f977de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/514aa3cf853c3c4beef8f827c12328d626f977de/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1216878f7be20dd0e652fb8cdc395009fdcfae07", "url": "https://api.github.com/repos/rust-lang/rust/commits/1216878f7be20dd0e652fb8cdc395009fdcfae07", "html_url": "https://github.com/rust-lang/rust/commit/1216878f7be20dd0e652fb8cdc395009fdcfae07"}], "stats": {"total": 243, "additions": 164, "deletions": 79}, "files": [{"sha": "a4a07e004c0d4b43c10ba41ea29ac42b608b9523", "filename": "Cargo.lock", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/514aa3cf853c3c4beef8f827c12328d626f977de/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/514aa3cf853c3c4beef8f827c12328d626f977de/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=514aa3cf853c3c4beef8f827c12328d626f977de", "patch": "@@ -794,7 +794,7 @@ dependencies = [\n \n [[package]]\n name = \"ron\"\n-version = \"0.3.0\"\n+version = \"0.4.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"base64 0.9.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1003,7 +1003,7 @@ dependencies = [\n \n [[package]]\n name = \"tera\"\n-version = \"0.11.17\"\n+version = \"0.11.18\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"chrono 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1021,6 +1021,16 @@ dependencies = [\n  \"url 1.7.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"teraron\"\n+version = \"0.0.1\"\n+dependencies = [\n+ \"failure 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"heck 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"ron 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"tera 0.11.18 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"termion\"\n version = \"1.5.1\"\n@@ -1080,10 +1090,8 @@ version = \"0.1.0\"\n dependencies = [\n  \"clap 2.32.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"failure 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"heck 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"itertools 0.7.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"ron 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"tera 0.11.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"teraron 0.0.1\",\n  \"walkdir 2.2.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -1345,7 +1353,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum regex-syntax 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"747ba3b235651f6e2f67dfa8bcdcd073ddb7c243cb21c442fc12395dfcac212d\"\n \"checksum relative-path 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e614f96449605730b4f7ad2c019e88c1652d730634b4eba07b810801856635e3\"\n \"checksum remove_dir_all 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3488ba1b9a2084d38645c4c08276a1752dcbf2c7130d74f1569681ad5d2799c5\"\n-\"checksum ron 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a9fa11b7a38511d46ff1959ae46ebb60bd8a746f17bdd0206b4c8de7559ac47b\"\n+\"checksum ron 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c48677d8a9247a4e0d1f3f9cb4b0a8e29167fdc3c04f383a5e669cd7a960ae0f\"\n \"checksum rowan 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4a1a7366ece9deee5e7df8316a136d585d5c5042854c2297f7f1aee3014c9130\"\n \"checksum rustc-demangle 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bcfe5b13211b4d78e5c2cadfebd7769197d95c639c35a50057eb4c05de811395\"\n \"checksum rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7540fc8b0c49f096ee9c961cda096467dce8084bec6bdca2fc83895fd9b28cb8\"\n@@ -1371,7 +1379,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum syn 0.15.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b036b7b35e846707c0e55c2c9441fa47867c0f87fca416921db3261b1d8c741a\"\n \"checksum synstructure 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"85bb9b7550d063ea184027c9b8c20ac167cd36d3e06b3a40bceb9d746dc1a7b7\"\n \"checksum tempdir 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"15f2b5fb00ccdf689e0149d1b1b3c03fead81c2b37735d812fa8bddbbf41b6d8\"\n-\"checksum tera 0.11.17 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2829d259c4699fbbe8acb353d231e6da31ff4301c52244413ed29ff6093da412\"\n+\"checksum tera 0.11.18 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6c87cae42cc4fc480278c7583792cc5da2d51a25be916b7921cbb45c43063b8d\"\n \"checksum termion 1.5.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"689a3bdfaab439fd92bc87df5c4c78417d3cbe537487274e9b0b2dce76e92096\"\n \"checksum text_unit 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"93fc86da66d0b9aa8d359b0ec31b4342c6bc52637eadef05b91b098551a9f8e9\"\n \"checksum textwrap 0.10.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"307686869c93e71f94da64286f9a9524c0f308a9e1c87a583de8e9c9039ad3f6\""}, {"sha": "7ce9f1aa8993e2d1feaf14db7ba1d0e85323302d", "filename": "crates/teraron/Cargo.toml", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/514aa3cf853c3c4beef8f827c12328d626f977de/crates%2Fteraron%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/514aa3cf853c3c4beef8f827c12328d626f977de/crates%2Fteraron%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fteraron%2FCargo.toml?ref=514aa3cf853c3c4beef8f827c12328d626f977de", "patch": "@@ -0,0 +1,13 @@\n+[package]\n+name = \"teraron\"\n+version = \"0.0.1\"\n+authors = [\"Aleksey Kladov <aleksey.kladov@gmail.com>\"]\n+repository = \"https://github.com/rust-analyzer/teraron\"\n+description = \"Genrate Rust code from a .tera template and a .ron data\"\n+license = \"MIT OR Apache-2.0\"\n+\n+[dependencies]\n+failure = \"0.1.2\"\n+tera = \"0.11.18\"\n+ron = \"0.4.0\"\n+heck = \"0.3.0\""}, {"sha": "e464ea080348452cda39ef30a50e01d81f1e80b2", "filename": "crates/teraron/src/lib.rs", "status": "added", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/514aa3cf853c3c4beef8f827c12328d626f977de/crates%2Fteraron%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/514aa3cf853c3c4beef8f827c12328d626f977de/crates%2Fteraron%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fteraron%2Fsrc%2Flib.rs?ref=514aa3cf853c3c4beef8f827c12328d626f977de", "patch": "@@ -0,0 +1,109 @@\n+//! A simple tool to generate rust code by passing a ron value\n+//! to a tera template\n+\n+#[macro_use]\n+extern crate failure;\n+extern crate tera;\n+extern crate ron;\n+extern crate heck;\n+\n+use std::{\n+    fs,\n+    collections::HashMap,\n+    path::Path,\n+};\n+\n+use heck::{CamelCase, ShoutySnakeCase, SnakeCase};\n+\n+#[derive(Clone, Copy, PartialEq, Eq)]\n+pub enum Mode {\n+    Overwrite,\n+    Verify,\n+}\n+\n+pub use Mode::*;\n+\n+/// A helper to update file on disk if it has changed.\n+/// With verify = false,\n+pub fn update(path: &Path, contents: &str, mode: Mode) -> Result<(), failure::Error> {\n+    match fs::read_to_string(path) {\n+        Ok(ref old_contents) if old_contents == contents => {\n+            return Ok(());\n+        }\n+        _ => (),\n+    }\n+    if mode == Verify {\n+        bail!(\"`{}` is not up-to-date\", path.display());\n+    }\n+    eprintln!(\"updating {}\", path.display());\n+    fs::write(path, contents)?;\n+    Ok(())\n+}\n+\n+pub fn generate(\n+    template: &Path,\n+    src: &Path,\n+    mode: Mode,\n+) -> Result<(), failure::Error> {\n+    assert_eq!(\n+        template.extension().and_then(|it| it.to_str()), Some(\"tera\"),\n+        \"template file must have .rs.tera extension\",\n+    );\n+    let file_name = template.file_stem().unwrap().to_str().unwrap();\n+    assert!(\n+        file_name.ends_with(\".rs\"),\n+        \"template file must have .rs.tera extension\",\n+    );\n+    let tgt = template.with_file_name(file_name);\n+    let template = fs::read_to_string(template)?;\n+    let src: ron::Value = {\n+        let text = fs::read_to_string(src)?;\n+        ron::de::from_str(&text)?\n+    };\n+    let content = render(&template, src)?;\n+    update(\n+        &tgt,\n+        &content,\n+        mode,\n+    )\n+}\n+\n+pub fn render(\n+    template: &str,\n+    src: ron::Value,\n+) -> Result<String, failure::Error> {\n+    let mut tera = mk_tera();\n+    tera.add_raw_template(\"_src\", template)\n+        .map_err(|e| format_err!(\"template parsing error: {:?}\", e))?;\n+    let res = tera.render(\"_src\", &src)\n+        .map_err(|e| format_err!(\"template rendering error: {:?}\", e))?;\n+    return Ok(res);\n+}\n+\n+fn mk_tera() -> tera::Tera {\n+    let mut res = tera::Tera::default();\n+    res.register_filter(\"camel\", |arg, _| {\n+        Ok(arg.as_str().unwrap().to_camel_case().into())\n+    });\n+    res.register_filter(\"snake\", |arg, _| {\n+        Ok(arg.as_str().unwrap().to_snake_case().into())\n+    });\n+    res.register_filter(\"SCREAM\", |arg, _| {\n+        Ok(arg.as_str().unwrap().to_shouty_snake_case().into())\n+    });\n+    res.register_function(\"concat\", Box::new(concat));\n+    res\n+}\n+\n+fn concat(args: HashMap<String, tera::Value>) -> tera::Result<tera::Value> {\n+    let mut elements = Vec::new();\n+    for &key in [\"a\", \"b\", \"c\"].iter() {\n+        let val = match args.get(key) {\n+            Some(val) => val,\n+            None => continue,\n+        };\n+        let val = val.as_array().unwrap();\n+        elements.extend(val.iter().cloned());\n+    }\n+    Ok(tera::Value::Array(elements))\n+}"}, {"sha": "ffd0ab1a5bbcbf5cab3886e9f008527a44c0e6b9", "filename": "crates/tools/Cargo.toml", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/514aa3cf853c3c4beef8f827c12328d626f977de/crates%2Ftools%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/514aa3cf853c3c4beef8f827c12328d626f977de/crates%2Ftools%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftools%2FCargo.toml?ref=514aa3cf853c3c4beef8f827c12328d626f977de", "patch": "@@ -6,10 +6,8 @@ authors = [\"Aleksey Kladov <aleksey.kladov@gmail.com>\"]\n publish = false\n \n [dependencies]\n-ron = \"0.3.0\"\n+teraron = { path = \"../teraron\"}\n walkdir = \"2.1.3\"\n itertools = \"0.7.8\"\n-tera = \"0.11\"\n clap = \"2.32.0\"\n failure = \"0.1.1\"\n-heck = \"0.3.0\""}, {"sha": "63ede53151a403feba7f32dff2c0dbc4fa330c56", "filename": "crates/tools/src/lib.rs", "status": "modified", "additions": 3, "deletions": 47, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/514aa3cf853c3c4beef8f827c12328d626f977de/crates%2Ftools%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/514aa3cf853c3c4beef8f827c12328d626f977de/crates%2Ftools%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftools%2Fsrc%2Flib.rs?ref=514aa3cf853c3c4beef8f827c12328d626f977de", "patch": "@@ -1,25 +1,18 @@\n extern crate itertools;\n #[macro_use]\n extern crate failure;\n-extern crate heck;\n-extern crate ron;\n-extern crate tera;\n \n-use heck::{CamelCase, ShoutySnakeCase, SnakeCase};\n use itertools::Itertools;\n use std::{\n-    collections::HashMap,\n     fs,\n     path::{Path, PathBuf},\n };\n \n pub type Result<T> = ::std::result::Result<T, failure::Error>;\n \n-const GRAMMAR: &str = \"ra_syntax/src/grammar.ron\";\n-pub const SYNTAX_KINDS: &str = \"ra_syntax/src/syntax_kinds/generated.rs\";\n-pub const SYNTAX_KINDS_TEMPLATE: &str = \"ra_syntax/src/syntax_kinds/generated.rs.tera\";\n-pub const AST: &str = \"ra_syntax/src/ast/generated.rs\";\n-pub const AST_TEMPLATE: &str = \"ra_syntax/src/ast/generated.rs.tera\";\n+pub const GRAMMAR: &str = \"ra_syntax/src/grammar.ron\";\n+pub const SYNTAX_KINDS: &str = \"ra_syntax/src/syntax_kinds/generated.rs.tera\";\n+pub const AST: &str = \"ra_syntax/src/ast/generated.rs.tera\";\n \n #[derive(Debug)]\n pub struct Test {\n@@ -76,43 +69,6 @@ pub fn update(path: &Path, contents: &str, verify: bool) -> Result<()> {\n     Ok(())\n }\n \n-pub fn render_template(template: &Path) -> Result<String> {\n-    let grammar: ron::value::Value = {\n-        let text = fs::read_to_string(project_root().join(GRAMMAR))?;\n-        ron::de::from_str(&text)?\n-    };\n-    let template = fs::read_to_string(template)?;\n-    let mut tera = tera::Tera::default();\n-    tera.add_raw_template(\"grammar\", &template)\n-        .map_err(|e| format_err!(\"template error: {:?}\", e))?;\n-    tera.register_function(\"concat\", Box::new(concat));\n-    tera.register_filter(\"camel\", |arg, _| {\n-        Ok(arg.as_str().unwrap().to_camel_case().into())\n-    });\n-    tera.register_filter(\"snake\", |arg, _| {\n-        Ok(arg.as_str().unwrap().to_snake_case().into())\n-    });\n-    tera.register_filter(\"SCREAM\", |arg, _| {\n-        Ok(arg.as_str().unwrap().to_shouty_snake_case().into())\n-    });\n-    let ret = tera\n-        .render(\"grammar\", &grammar)\n-        .map_err(|e| format_err!(\"template error: {:?}\", e))?;\n-    return Ok(ret);\n-\n-    fn concat(args: HashMap<String, tera::Value>) -> tera::Result<tera::Value> {\n-        let mut elements = Vec::new();\n-        for &key in [\"a\", \"b\", \"c\"].iter() {\n-            let val = match args.get(key) {\n-                Some(val) => val,\n-                None => continue,\n-            };\n-            let val = val.as_array().unwrap();\n-            elements.extend(val.iter().cloned());\n-        }\n-        Ok(tera::Value::Array(elements))\n-    }\n-}\n \n pub fn project_root() -> PathBuf {\n     Path::new(&std::env::var(\"CARGO_MANIFEST_DIR\").unwrap())"}, {"sha": "1bbc43123e7688be5d1504eca4ac92ae94def4e6", "filename": "crates/tools/src/main.rs", "status": "modified", "additions": 23, "deletions": 22, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/514aa3cf853c3c4beef8f827c12328d626f977de/crates%2Ftools%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/514aa3cf853c3c4beef8f827c12328d626f977de/crates%2Ftools%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftools%2Fsrc%2Fmain.rs?ref=514aa3cf853c3c4beef8f827c12328d626f977de", "patch": "@@ -3,6 +3,7 @@ extern crate clap;\n extern crate failure;\n extern crate tools;\n extern crate walkdir;\n+extern crate teraron;\n \n use clap::{App, Arg, SubCommand};\n use std::{\n@@ -12,9 +13,9 @@ use std::{\n     process::Command,\n };\n use tools::{\n-    collect_tests, project_root, render_template, update, Result, Test, AST, AST_TEMPLATE,\n-    SYNTAX_KINDS, SYNTAX_KINDS_TEMPLATE,\n+    collect_tests, project_root, Result, Test, AST, SYNTAX_KINDS, GRAMMAR,\n };\n+use teraron::{Mode, Verify, Overwrite};\n \n const GRAMMAR_DIR: &str = \"./crates/ra_syntax/src/grammar\";\n const INLINE_TESTS_DIR: &str = \"./crates/ra_syntax/tests/data/parser/inline\";\n@@ -32,35 +33,35 @@ fn main() -> Result<()> {\n         .subcommand(SubCommand::with_name(\"gen-tests\"))\n         .subcommand(SubCommand::with_name(\"install-code\"))\n         .get_matches();\n+    let mode = if matches.is_present(\"verify\") {\n+        Verify\n+    } else {\n+        Overwrite\n+    };\n     match matches.subcommand() {\n         (\"install-code\", _) => install_code_extension()?,\n-        (name, Some(matches)) => run_gen_command(name, matches.is_present(\"verify\"))?,\n-        _ => unreachable!(),\n-    }\n-    Ok(())\n-}\n-\n-fn run_gen_command(name: &str, verify: bool) -> Result<()> {\n-    match name {\n-        \"gen-kinds\" => {\n-            update(\n-                &project_root().join(SYNTAX_KINDS),\n-                &render_template(&project_root().join(SYNTAX_KINDS_TEMPLATE))?,\n-                verify,\n+        (\"gen-tests\", _) => gen_tests(mode)?,\n+        (\"gen-kinds\", _) => {\n+            let grammar = project_root().join(GRAMMAR);\n+            let syntax_kinds = project_root().join(SYNTAX_KINDS);\n+            let ast = project_root().join(AST);\n+            teraron::generate(\n+                &syntax_kinds,\n+                &grammar,\n+                mode,\n             )?;\n-            update(\n-                &project_root().join(AST),\n-                &render_template(&project_root().join(AST_TEMPLATE))?,\n-                verify,\n+            teraron::generate(\n+                &ast,\n+                &grammar,\n+                mode,\n             )?;\n         }\n-        \"gen-tests\" => gen_tests(verify)?,\n         _ => unreachable!(),\n     }\n     Ok(())\n }\n \n-fn gen_tests(verify: bool) -> Result<()> {\n+fn gen_tests(mode: Mode) -> Result<()> {\n     let tests = tests_from_dir(Path::new(GRAMMAR_DIR))?;\n \n     let inline_tests_dir = Path::new(INLINE_TESTS_DIR);\n@@ -83,7 +84,7 @@ fn gen_tests(verify: bool) -> Result<()> {\n                 inline_tests_dir.join(file_name)\n             }\n         };\n-        update(&path, &test.text, verify)?;\n+        teraron::update(&path, &test.text, mode)?;\n     }\n     Ok(())\n }"}]}