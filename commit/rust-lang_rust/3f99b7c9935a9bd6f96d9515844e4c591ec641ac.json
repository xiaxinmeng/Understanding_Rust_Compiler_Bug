{"sha": "3f99b7c9935a9bd6f96d9515844e4c591ec641ac", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmOTliN2M5OTM1YTliZDZmOTZkOTUxNTg0NGU0YzU5MWVjNjQxYWM=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2017-12-01T17:39:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-12-01T17:39:02Z"}, "message": "Rollup merge of #46405 - alexcrichton:fix-rustdoc, r=estebank\n\nrustc: Filter out bogus extern crate warnings\n\nRustdoc has for some time now used the \"everybody loops\" pass in the compiler to\navoid typechecking and otherwise avoid looking at implementation details.\nIn #46115 the placement of this pass was pushed back in the compiler to after\nmacro expansion to ensure that it works with macro-expanded code as well. This\nin turn caused the regression in #46271.\n\nThe bug here was that the resolver was producing `def_id` instances for\n\"possibly unused extern crates\" which would then later get processed during\ntypeck to actually issue lint warnings. The problem was that *after* resolution\nthese `def_id` nodes were actually removed from the AST by the \"everybody loops\"\npass. This later, when we tried to take a look at `def_id`, caused the compiler\nto panic.\n\nThe fix applied here is a bit of a heavy hammer which is to just, in this one\ncase, ignore the `extern crate` lints if the `def_id` looks \"bogus\" in any way\n(basically if it looks like the node was removed after resolution). The real\nunderlying bug here is probably that the \"everybody loops\" AST pass is being\nstressed to much beyond what it was originally intended to do, but this should\nat least fix the ICE for now...\n\nCloses #46271", "tree": {"sha": "50c6caa59fd6c95044736bb7bae75e985644a837", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50c6caa59fd6c95044736bb7bae75e985644a837"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f99b7c9935a9bd6f96d9515844e4c591ec641ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f99b7c9935a9bd6f96d9515844e4c591ec641ac", "html_url": "https://github.com/rust-lang/rust/commit/3f99b7c9935a9bd6f96d9515844e4c591ec641ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f99b7c9935a9bd6f96d9515844e4c591ec641ac/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd5a4af5cd13ddcd0f3ebfa965f3ed3de2431048", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd5a4af5cd13ddcd0f3ebfa965f3ed3de2431048", "html_url": "https://github.com/rust-lang/rust/commit/bd5a4af5cd13ddcd0f3ebfa965f3ed3de2431048"}, {"sha": "4e74eb5ba0bbf60ab70a0680d1e07d7a0f59d383", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e74eb5ba0bbf60ab70a0680d1e07d7a0f59d383", "html_url": "https://github.com/rust-lang/rust/commit/4e74eb5ba0bbf60ab70a0680d1e07d7a0f59d383"}], "stats": {"total": 34, "additions": 34, "deletions": 0}, "files": [{"sha": "f2f1e2938cb1283f65b4de5e3513d0197b92a0cd", "filename": "src/librustc_typeck/check_unused.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3f99b7c9935a9bd6f96d9515844e4c591ec641ac/src%2Flibrustc_typeck%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f99b7c9935a9bd6f96d9515844e4c591ec641ac/src%2Flibrustc_typeck%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck_unused.rs?ref=3f99b7c9935a9bd6f96d9515844e4c591ec641ac", "patch": "@@ -75,6 +75,25 @@ pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     tcx.hir.krate().visit_all_item_likes(&mut visitor);\n \n     for &(def_id, span) in tcx.maybe_unused_extern_crates(LOCAL_CRATE).iter() {\n+        // The `def_id` here actually was calculated during resolution (at least\n+        // at the time of this writing) and is being shipped to us via a side\n+        // channel of the tcx. There may have been extra expansion phases,\n+        // however, which ended up removing the `def_id` *after* expansion such\n+        // as the `ReplaceBodyWithLoop` pass (which is a bit of a hack, but hey)\n+        //\n+        // As a result we need to verify that `def_id` is indeed still valid for\n+        // our AST and actually present in the HIR map. If it's not there then\n+        // there's safely nothing to warn about, and otherwise we carry on with\n+        // our execution.\n+        //\n+        // Note that if we carry through to the `extern_mod_stmt_cnum` query\n+        // below it'll cause a panic because `def_id` is actually bogus at this\n+        // point in time otherwise.\n+        if let Some(id) = tcx.hir.as_local_node_id(def_id) {\n+            if tcx.hir.find(id).is_none() {\n+                continue\n+            }\n+        }\n         let cnum = tcx.extern_mod_stmt_cnum(def_id).unwrap();\n         if tcx.is_compiler_builtins(cnum) {\n             continue"}, {"sha": "cc3be08c5688da82a6d690948f6f74575f000fd5", "filename": "src/test/rustdoc/issue-46271.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3f99b7c9935a9bd6f96d9515844e4c591ec641ac/src%2Ftest%2Frustdoc%2Fissue-46271.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f99b7c9935a9bd6f96d9515844e4c591ec641ac/src%2Ftest%2Frustdoc%2Fissue-46271.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-46271.rs?ref=3f99b7c9935a9bd6f96d9515844e4c591ec641ac", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// hopefully this doesn't cause an ICE\n+\n+pub fn foo() {\n+    extern crate std;\n+}"}]}