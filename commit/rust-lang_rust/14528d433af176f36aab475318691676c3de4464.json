{"sha": "14528d433af176f36aab475318691676c3de4464", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0NTI4ZDQzM2FmMTc2ZjM2YWFiNDc1MzE4NjkxNjc2YzNkZTQ0NjQ=", "commit": {"author": {"name": "R.Chavignat", "email": "r.chavignat@gmail.com", "date": "2015-08-20T12:37:35Z"}, "committer": {"name": "R.Chavignat", "email": "r.chavignat@gmail.com", "date": "2015-08-20T12:46:40Z"}, "message": "Simplified reexported ast::* type paths.\n\nAlso removed trailing whitespaces.", "tree": {"sha": "9ba3ab6b2cb68b5d411c03dd999a7a8396f1a2ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ba3ab6b2cb68b5d411c03dd999a7a8396f1a2ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14528d433af176f36aab475318691676c3de4464", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14528d433af176f36aab475318691676c3de4464", "html_url": "https://github.com/rust-lang/rust/commit/14528d433af176f36aab475318691676c3de4464", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14528d433af176f36aab475318691676c3de4464/comments", "author": {"login": "Robzz", "id": 304428, "node_id": "MDQ6VXNlcjMwNDQyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/304428?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Robzz", "html_url": "https://github.com/Robzz", "followers_url": "https://api.github.com/users/Robzz/followers", "following_url": "https://api.github.com/users/Robzz/following{/other_user}", "gists_url": "https://api.github.com/users/Robzz/gists{/gist_id}", "starred_url": "https://api.github.com/users/Robzz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Robzz/subscriptions", "organizations_url": "https://api.github.com/users/Robzz/orgs", "repos_url": "https://api.github.com/users/Robzz/repos", "events_url": "https://api.github.com/users/Robzz/events{/privacy}", "received_events_url": "https://api.github.com/users/Robzz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Robzz", "id": 304428, "node_id": "MDQ6VXNlcjMwNDQyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/304428?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Robzz", "html_url": "https://github.com/Robzz", "followers_url": "https://api.github.com/users/Robzz/followers", "following_url": "https://api.github.com/users/Robzz/following{/other_user}", "gists_url": "https://api.github.com/users/Robzz/gists{/gist_id}", "starred_url": "https://api.github.com/users/Robzz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Robzz/subscriptions", "organizations_url": "https://api.github.com/users/Robzz/orgs", "repos_url": "https://api.github.com/users/Robzz/repos", "events_url": "https://api.github.com/users/Robzz/events{/privacy}", "received_events_url": "https://api.github.com/users/Robzz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b417f01ed82332cd81954ac6d9f5bad615db2bfc", "url": "https://api.github.com/repos/rust-lang/rust/commits/b417f01ed82332cd81954ac6d9f5bad615db2bfc", "html_url": "https://github.com/rust-lang/rust/commit/b417f01ed82332cd81954ac6d9f5bad615db2bfc"}], "stats": {"total": 100, "additions": 50, "deletions": 50}, "files": [{"sha": "2c4d81e361d96f7ec15fcf4f2d9fa6f0a0c52e3b", "filename": "src/types.rs", "status": "modified", "additions": 50, "deletions": 50, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/14528d433af176f36aab475318691676c3de4464/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14528d433af176f36aab475318691676c3de4464/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=14528d433af176f36aab475318691676c3de4464", "patch": "@@ -160,23 +160,23 @@ impl LintPass for CastPass {\n                 match (cast_from.is_integral(), cast_to.is_integral()) {\n                     (true, false)  => {\n                         match (&cast_from.sty, &cast_to.sty) {\n-                            (&ty::TypeVariants::TyInt(i), &ty::TypeVariants::TyFloat(f)) => {\n+                            (&ty::TyInt(i), &ty::TyFloat(f)) => {\n                                 match (i, f) {\n-                                    (ast::IntTy::TyI32, ast::FloatTy::TyF32) |\n-                                    (ast::IntTy::TyI64, ast::FloatTy::TyF32) |\n-                                    (ast::IntTy::TyI64, ast::FloatTy::TyF64) => {\n+                                    (ast::TyI32, ast::TyF32) |\n+                                    (ast::TyI64, ast::TyF32) |\n+                                    (ast::TyI64, ast::TyF64) => {\n                                         span_lint(cx, CAST_PRECISION_LOSS, expr.span,\n                                                   &format!(\"converting from {} to {}, which causes a loss of precision\",\n                                                            i, f));\n                                     },\n                                     _ => ()\n                                 }\n                             }\n-                            (&ty::TypeVariants::TyUint(u), &ty::TypeVariants::TyFloat(f)) => {\n+                            (&ty::TyUint(u), &ty::TyFloat(f)) => {\n                                 match (u, f) {\n-                                    (ast::UintTy::TyU32, ast::FloatTy::TyF32) |\n-                                    (ast::UintTy::TyU64, ast::FloatTy::TyF32) |\n-                                    (ast::UintTy::TyU64, ast::FloatTy::TyF64) => {\n+                                    (ast::TyU32, ast::TyF32) |\n+                                    (ast::TyU64, ast::TyF32) |\n+                                    (ast::TyU64, ast::TyF64) => {\n                                         span_lint(cx, CAST_PRECISION_LOSS, expr.span,\n                                                   &format!(\"converting from {} to {}, which causes a loss of precision\",\n                                                            u, f));\n@@ -188,69 +188,69 @@ impl LintPass for CastPass {\n                         }\n                     },\n                     (false, true) => {\n-                        span_lint(cx, CAST_POSSIBLE_OVERFLOW, expr.span, \n+                        span_lint(cx, CAST_POSSIBLE_OVERFLOW, expr.span,\n                                   &format!(\"the contents of a {} may overflow a {}\", cast_from, cast_to));\n                         if !cx.tcx.expr_ty(expr).is_signed() {\n-                            span_lint(cx, CAST_SIGN_LOSS, expr.span, \n+                            span_lint(cx, CAST_SIGN_LOSS, expr.span,\n                                       &format!(\"casting from {} to {} loses the sign of the value\", cast_from, cast_to));\n                         }\n                     },\n                     (true, true) => {\n                         match (&cast_from.sty, &cast_to.sty) {\n-                            (&ty::TypeVariants::TyInt(i1), &ty::TypeVariants::TyInt(i2)) => {\n+                            (&ty::TyInt(i1), &ty::TyInt(i2)) => {\n                                 match (i1, i2) {\n-                                    (ast::IntTy::TyI64, ast::IntTy::TyI32) |\n-                                    (ast::IntTy::TyI64, ast::IntTy::TyI16) |\n-                                    (ast::IntTy::TyI64, ast::IntTy::TyI8)  |\n-                                    (ast::IntTy::TyI32, ast::IntTy::TyI16) |\n-                                    (ast::IntTy::TyI32, ast::IntTy::TyI8)  |\n-                                    (ast::IntTy::TyI16, ast::IntTy::TyI8) => \n-                                        span_lint(cx, CAST_POSSIBLE_OVERFLOW, expr.span, \n+                                    (ast::TyI64, ast::TyI32) |\n+                                    (ast::TyI64, ast::TyI16) |\n+                                    (ast::TyI64, ast::TyI8)  |\n+                                    (ast::TyI32, ast::TyI16) |\n+                                    (ast::TyI32, ast::TyI8)  |\n+                                    (ast::TyI16, ast::TyI8) =>\n+                                        span_lint(cx, CAST_POSSIBLE_OVERFLOW, expr.span,\n                                                   &format!(\"the contents of a {} may overflow a {}\", i1, i2)),\n                                     _ => ()\n                                 }\n                             },\n-                            (&ty::TypeVariants::TyInt(i), &ty::TypeVariants::TyUint(u)) => {\n-                                span_lint(cx, CAST_SIGN_LOSS, expr.span, \n+                            (&ty::TyInt(i), &ty::TyUint(u)) => {\n+                                span_lint(cx, CAST_SIGN_LOSS, expr.span,\n                                           &format!(\"casting from {} to {} loses the sign of the value\", i, u));\n                                 match (i, u) {\n-                                    (ast::IntTy::TyI64, ast::UintTy::TyU32) |\n-                                    (ast::IntTy::TyI64, ast::UintTy::TyU16) |\n-                                    (ast::IntTy::TyI64, ast::UintTy::TyU8)  |\n-                                    (ast::IntTy::TyI32, ast::UintTy::TyU16) |\n-                                    (ast::IntTy::TyI32, ast::UintTy::TyU8)  |\n-                                    (ast::IntTy::TyI16, ast::UintTy::TyU8) => \n-                                        span_lint(cx, CAST_POSSIBLE_OVERFLOW, expr.span, \n+                                    (ast::TyI64, ast::TyU32) |\n+                                    (ast::TyI64, ast::TyU16) |\n+                                    (ast::TyI64, ast::TyU8)  |\n+                                    (ast::TyI32, ast::TyU16) |\n+                                    (ast::TyI32, ast::TyU8)  |\n+                                    (ast::TyI16, ast::TyU8) =>\n+                                        span_lint(cx, CAST_POSSIBLE_OVERFLOW, expr.span,\n                                                   &format!(\"the contents of a {} may overflow a {}\", i, u)),\n                                     _ => ()\n                                 }\n                             },\n-                            (&ty::TypeVariants::TyUint(u), &ty::TypeVariants::TyInt(i)) => {\n+                            (&ty::TyUint(u), &ty::TyInt(i)) => {\n                                 match (u, i) {\n-                                    (ast::UintTy::TyU64, ast::IntTy::TyI32) |\n-                                    (ast::UintTy::TyU64, ast::IntTy::TyI64) |\n-                                    (ast::UintTy::TyU64, ast::IntTy::TyI16) |\n-                                    (ast::UintTy::TyU64, ast::IntTy::TyI8)  |\n-                                    (ast::UintTy::TyU32, ast::IntTy::TyI32) |\n-                                    (ast::UintTy::TyU32, ast::IntTy::TyI16) |\n-                                    (ast::UintTy::TyU32, ast::IntTy::TyI8)  |\n-                                    (ast::UintTy::TyU16, ast::IntTy::TyI16) |\n-                                    (ast::UintTy::TyU16, ast::IntTy::TyI8)  |\n-                                    (ast::UintTy::TyU8, ast::IntTy::TyI8) => \n-                                        span_lint(cx, CAST_POSSIBLE_OVERFLOW, expr.span, \n+                                    (ast::TyU64, ast::TyI32) |\n+                                    (ast::TyU64, ast::TyI64) |\n+                                    (ast::TyU64, ast::TyI16) |\n+                                    (ast::TyU64, ast::TyI8)  |\n+                                    (ast::TyU32, ast::TyI32) |\n+                                    (ast::TyU32, ast::TyI16) |\n+                                    (ast::TyU32, ast::TyI8)  |\n+                                    (ast::TyU16, ast::TyI16) |\n+                                    (ast::TyU16, ast::TyI8)  |\n+                                    (ast::TyU8, ast::TyI8) =>\n+                                        span_lint(cx, CAST_POSSIBLE_OVERFLOW, expr.span,\n                                                   &format!(\"the contents of a {} may overflow a {}\", u, i)),\n                                     _ => ()\n                                 }\n                             },\n-                            (&ty::TypeVariants::TyUint(u1), &ty::TypeVariants::TyUint(u2)) => {\n+                            (&ty::TyUint(u1), &ty::TyUint(u2)) => {\n                                 match (u1, u2) {\n-                                    (ast::UintTy::TyU64, ast::UintTy::TyU32) |\n-                                    (ast::UintTy::TyU64, ast::UintTy::TyU16) |\n-                                    (ast::UintTy::TyU64, ast::UintTy::TyU8)  |\n-                                    (ast::UintTy::TyU32, ast::UintTy::TyU16) |\n-                                    (ast::UintTy::TyU32, ast::UintTy::TyU8)  |\n-                                    (ast::UintTy::TyU16, ast::UintTy::TyU8) => \n-                                        span_lint(cx, CAST_POSSIBLE_OVERFLOW, expr.span, \n+                                    (ast::TyU64, ast::TyU32) |\n+                                    (ast::TyU64, ast::TyU16) |\n+                                    (ast::TyU64, ast::TyU8)  |\n+                                    (ast::TyU32, ast::TyU16) |\n+                                    (ast::TyU32, ast::TyU8)  |\n+                                    (ast::TyU16, ast::TyU8) =>\n+                                        span_lint(cx, CAST_POSSIBLE_OVERFLOW, expr.span,\n                                                   &format!(\"the contents of a {} may overflow a {}\", u1, u2)),\n                                     _ => ()\n                                 }\n@@ -259,13 +259,13 @@ impl LintPass for CastPass {\n                         }\n                     }\n                     (false, false) => {\n-                        if let (&ty::TypeVariants::TyFloat(ast::FloatTy::TyF64),\n-                                &ty::TypeVariants::TyFloat(ast::FloatTy::TyF32)) = (&cast_from.sty, &cast_to.sty) {\n+                        if let (&ty::TyFloat(ast::TyF64),\n+                                &ty::TyFloat(ast::TyF32)) = (&cast_from.sty, &cast_to.sty) {\n                             span_lint(cx, CAST_POSSIBLE_OVERFLOW, expr.span, \"the contents of a f64 may overflow a f32\");\n                         }\n                     }\n                 }\n             }\n         }\n-    }                                        \n+    }\n }"}]}