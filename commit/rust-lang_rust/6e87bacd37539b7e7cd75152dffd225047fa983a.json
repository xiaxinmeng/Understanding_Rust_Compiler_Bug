{"sha": "6e87bacd37539b7e7cd75152dffd225047fa983a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlODdiYWNkMzc1MzliN2U3Y2Q3NTE1MmRmZmQyMjUwNDdmYTk4M2E=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-31T18:14:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-31T18:14:59Z"}, "message": "Auto merge of #65989 - Aaron1011:fix/normalize-param-env, r=nikomatsakis\n\nNormalize all opaque types when converting ParamEnv to Reveal::All\n\nWhen we normalize a type using a ParamEnv with a reveal mode of\nRevealMode::All, we will normalize opaque types to their underlying\ntypes (e.g. `type MyOpaque = impl Foo` -> `StructThatImplsFoo`).\nHowever, the ParamEnv may still have predicates referring to the\nun-normalized opaque type (e.g. `<T as MyTrait<MyOpaque>>`). This can\ncause trait projection to fail, since a type containing normalized\nopaque types will not match up with the un-normalized type in the\n`ParamEnv`.\n\nTo fix this, we now explicitly normalize all opaque types in\ncaller_bounds of a `ParamEnv` when changing its mode to\n`RevealMode::All`. This ensures that all predicatse will refer to the\nunderlying types of any opaque types involved, allowing them to be\nmatched up properly during projection. To reflect the fact that\nnormalization is occuring, `ParamEnv::with_reveal_all` is renamed to\n`ParamEnv::with_reveal_all_normalized`\n\nFixes #65918", "tree": {"sha": "71d61b8eeeab18886ae7008bcc2a4099fe6a886f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71d61b8eeeab18886ae7008bcc2a4099fe6a886f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e87bacd37539b7e7cd75152dffd225047fa983a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e87bacd37539b7e7cd75152dffd225047fa983a", "html_url": "https://github.com/rust-lang/rust/commit/6e87bacd37539b7e7cd75152dffd225047fa983a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e87bacd37539b7e7cd75152dffd225047fa983a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62f9aa94c0d0312544589bed78679d85646d4e62", "url": "https://api.github.com/repos/rust-lang/rust/commits/62f9aa94c0d0312544589bed78679d85646d4e62", "html_url": "https://github.com/rust-lang/rust/commit/62f9aa94c0d0312544589bed78679d85646d4e62"}, {"sha": "5e2e927e0107916b825b164c82be44877ac6ab54", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e2e927e0107916b825b164c82be44877ac6ab54", "html_url": "https://github.com/rust-lang/rust/commit/5e2e927e0107916b825b164c82be44877ac6ab54"}], "stats": {"total": 241, "additions": 152, "deletions": 89}, "files": [{"sha": "442e7f6b0f45e46e5930bcc9519c2e297553d666", "filename": "src/librustc_middle/mir/interpret/queries.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e87bacd37539b7e7cd75152dffd225047fa983a/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e87bacd37539b7e7cd75152dffd225047fa983a/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fqueries.rs?ref=6e87bacd37539b7e7cd75152dffd225047fa983a", "patch": "@@ -18,7 +18,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         let substs = InternalSubsts::identity_for_item(self, def_id);\n         let instance = ty::Instance::new(def_id, substs);\n         let cid = GlobalId { instance, promoted: None };\n-        let param_env = self.param_env(def_id).with_reveal_all();\n+        let param_env = self.param_env(def_id).with_reveal_all_normalized(self);\n         self.const_eval_global_id(param_env, cid, None)\n     }\n "}, {"sha": "2c76f0b5ad0222bf6cc2cb3c598a36d13c9491b3", "filename": "src/librustc_middle/mir/interpret/value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e87bacd37539b7e7cd75152dffd225047fa983a/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e87bacd37539b7e7cd75152dffd225047fa983a/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fvalue.rs?ref=6e87bacd37539b7e7cd75152dffd225047fa983a", "patch": "@@ -78,7 +78,7 @@ impl<'tcx> ConstValue<'tcx> {\n         param_env: ParamEnv<'tcx>,\n         ty: Ty<'tcx>,\n     ) -> Option<u128> {\n-        let size = tcx.layout_of(param_env.with_reveal_all().and(ty)).ok()?.size;\n+        let size = tcx.layout_of(param_env.with_reveal_all_normalized(tcx).and(ty)).ok()?.size;\n         self.try_to_bits(size)\n     }\n "}, {"sha": "69f1366abf8ec16ee87a295df73cd962d430f9d9", "filename": "src/librustc_middle/query/mod.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6e87bacd37539b7e7cd75152dffd225047fa983a/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e87bacd37539b7e7cd75152dffd225047fa983a/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fquery%2Fmod.rs?ref=6e87bacd37539b7e7cd75152dffd225047fa983a", "patch": "@@ -864,11 +864,17 @@ rustc_queries! {\n         /// type-checking etc, and it does not normalize specializable\n         /// associated types. This is almost always what you want,\n         /// unless you are doing MIR optimizations, in which case you\n-        /// might want to use `reveal_all()` method to change modes.\n         query param_env(def_id: DefId) -> ty::ParamEnv<'tcx> {\n             desc { |tcx| \"computing normalized predicates of `{}`\", tcx.def_path_str(def_id) }\n         }\n \n+        /// Like `param_env`, but returns the `ParamEnv in `Reveal::All` mode.\n+        /// Prefer this over `tcx.param_env(def_id).with_reveal_all_normalized(tcx)`,\n+        /// as this method is more efficient.\n+        query param_env_reveal_all_normalized(def_id: DefId) -> ty::ParamEnv<'tcx> {\n+            desc { |tcx| \"computing revealed normalized predicates of `{}`\", tcx.def_path_str(def_id) }\n+        }\n+\n         /// Trait selection queries. These are best used by invoking `ty.is_copy_modulo_regions()`,\n         /// `ty.is_copy()`, etc, since that will prune the environment where possible.\n         query is_copy_raw(env: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> bool {\n@@ -1527,5 +1533,9 @@ rustc_queries! {\n                 ty::Instance::new(key.value.0.to_def_id(), key.value.2),\n             }\n         }\n+\n+        query normalize_opaque_types(key: &'tcx ty::List<ty::Predicate<'tcx>>) -> &'tcx ty::List<ty::Predicate<'tcx>> {\n+            desc { \"normalizing opaque types in {:?}\", key }\n+        }\n     }\n }"}, {"sha": "c0b5693dc594e0586498b13fa5e1a1eb4d2700cd", "filename": "src/librustc_middle/ty/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e87bacd37539b7e7cd75152dffd225047fa983a/src%2Flibrustc_middle%2Fty%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e87bacd37539b7e7cd75152dffd225047fa983a/src%2Flibrustc_middle%2Fty%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fconsts.rs?ref=6e87bacd37539b7e7cd75152dffd225047fa983a", "patch": "@@ -158,7 +158,7 @@ impl<'tcx> Const<'tcx> {\n         ty: Ty<'tcx>,\n     ) -> Option<u128> {\n         assert_eq!(self.ty, ty);\n-        let size = tcx.layout_of(param_env.with_reveal_all().and(ty)).ok()?.size;\n+        let size = tcx.layout_of(param_env.with_reveal_all_normalized(tcx).and(ty)).ok()?.size;\n         // if `ty` does not depend on generic parameters, use an empty param_env\n         self.val.eval(tcx, param_env).try_to_bits(size)\n     }"}, {"sha": "e8a1e714a8f43885a9a5c65d39525fe3722930e5", "filename": "src/librustc_middle/ty/consts/kind.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6e87bacd37539b7e7cd75152dffd225047fa983a/src%2Flibrustc_middle%2Fty%2Fconsts%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e87bacd37539b7e7cd75152dffd225047fa983a/src%2Flibrustc_middle%2Fty%2Fconsts%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fconsts%2Fkind.rs?ref=6e87bacd37539b7e7cd75152dffd225047fa983a", "patch": "@@ -96,12 +96,16 @@ impl<'tcx> ConstKind<'tcx> {\n         if let ConstKind::Unevaluated(def, substs, promoted) = self {\n             use crate::mir::interpret::ErrorHandled;\n \n-            let param_env_and_substs = param_env.with_reveal_all().and(substs);\n-\n             // HACK(eddyb) this erases lifetimes even though `const_eval_resolve`\n             // also does later, but we want to do it before checking for\n             // inference variables.\n-            let param_env_and_substs = tcx.erase_regions(&param_env_and_substs);\n+            // Note that we erase regions *before* calling `with_reveal_all_normalized`,\n+            // so that we don't try to invoke this query with\n+            // any region variables.\n+            let param_env_and_substs = tcx\n+                .erase_regions(&param_env)\n+                .with_reveal_all_normalized(tcx)\n+                .and(tcx.erase_regions(&substs));\n \n             // HACK(eddyb) when the query key would contain inference variables,\n             // attempt using identity substs and `ParamEnv` instead, that will succeed"}, {"sha": "143d3c4e1e92bcb2b8c438257d2868272c70c640", "filename": "src/librustc_middle/ty/layout.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e87bacd37539b7e7cd75152dffd225047fa983a/src%2Flibrustc_middle%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e87bacd37539b7e7cd75152dffd225047fa983a/src%2Flibrustc_middle%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Flayout.rs?ref=6e87bacd37539b7e7cd75152dffd225047fa983a", "patch": "@@ -1903,7 +1903,7 @@ impl<'tcx> LayoutOf for LayoutCx<'tcx, TyCtxt<'tcx>> {\n     /// Computes the layout of a type. Note that this implicitly\n     /// executes in \"reveal all\" mode.\n     fn layout_of(&self, ty: Ty<'tcx>) -> Self::TyAndLayout {\n-        let param_env = self.param_env.with_reveal_all();\n+        let param_env = self.param_env.with_reveal_all_normalized(self.tcx);\n         let ty = self.tcx.normalize_erasing_regions(param_env, ty);\n         let layout = self.tcx.layout_raw(param_env.and(ty))?;\n         let layout = TyAndLayout { ty, layout };\n@@ -1927,7 +1927,7 @@ impl LayoutOf for LayoutCx<'tcx, ty::query::TyCtxtAt<'tcx>> {\n     /// Computes the layout of a type. Note that this implicitly\n     /// executes in \"reveal all\" mode.\n     fn layout_of(&self, ty: Ty<'tcx>) -> Self::TyAndLayout {\n-        let param_env = self.param_env.with_reveal_all();\n+        let param_env = self.param_env.with_reveal_all_normalized(*self.tcx);\n         let ty = self.tcx.normalize_erasing_regions(param_env, ty);\n         let layout = self.tcx.layout_raw(param_env.and(ty))?;\n         let layout = TyAndLayout { ty, layout };"}, {"sha": "bd45f866abc8bbbdacd7f717ea086bcf2b391d0d", "filename": "src/librustc_middle/ty/mod.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6e87bacd37539b7e7cd75152dffd225047fa983a/src%2Flibrustc_middle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e87bacd37539b7e7cd75152dffd225047fa983a/src%2Flibrustc_middle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fmod.rs?ref=6e87bacd37539b7e7cd75152dffd225047fa983a", "patch": "@@ -1,5 +1,5 @@\n // ignore-tidy-filelength\n-pub use self::fold::{TypeFoldable, TypeVisitor};\n+pub use self::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n pub use self::AssocItemContainer::*;\n pub use self::BorrowKind::*;\n pub use self::IntVarValue::*;\n@@ -1874,9 +1874,15 @@ impl<'tcx> ParamEnv<'tcx> {\n     /// the desired behavior during codegen and certain other special\n     /// contexts; normally though we want to use `Reveal::UserFacing`,\n     /// which is the default.\n-    pub fn with_reveal_all(mut self) -> Self {\n-        self.packed_data |= 1;\n-        self\n+    /// All opaque types in the caller_bounds of the `ParamEnv`\n+    /// will be normalized to their underlying types.\n+    /// See PR #65989 and issue #65918 for more details\n+    pub fn with_reveal_all_normalized(self, tcx: TyCtxt<'tcx>) -> Self {\n+        if self.packed_data & 1 == 1 {\n+            return self;\n+        }\n+\n+        ParamEnv::new(tcx.normalize_opaque_types(self.caller_bounds()), Reveal::All, self.def_id)\n     }\n \n     /// Returns this same environment but with no caller bounds.\n@@ -3116,6 +3122,7 @@ pub fn provide(providers: &mut ty::query::Providers) {\n     context::provide(providers);\n     erase_regions::provide(providers);\n     layout::provide(providers);\n+    util::provide(providers);\n     super::util::bug::provide(providers);\n     *providers = ty::query::Providers {\n         trait_impls_of: trait_def::trait_impls_of_provider,"}, {"sha": "3f7a20bba2b9add597b91cf99d5dfea170c82f3e", "filename": "src/librustc_middle/ty/query/keys.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6e87bacd37539b7e7cd75152dffd225047fa983a/src%2Flibrustc_middle%2Fty%2Fquery%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e87bacd37539b7e7cd75152dffd225047fa983a/src%2Flibrustc_middle%2Fty%2Fquery%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fquery%2Fkeys.rs?ref=6e87bacd37539b7e7cd75152dffd225047fa983a", "patch": "@@ -270,6 +270,17 @@ impl<'tcx> Key for Ty<'tcx> {\n     }\n }\n \n+impl<'tcx> Key for &'tcx ty::List<ty::Predicate<'tcx>> {\n+    type CacheSelector = DefaultCacheSelector;\n+\n+    fn query_crate(&self) -> CrateNum {\n+        LOCAL_CRATE\n+    }\n+    fn default_span(&self, _: TyCtxt<'_>) -> Span {\n+        DUMMY_SP\n+    }\n+}\n+\n impl<'tcx> Key for ty::ParamEnv<'tcx> {\n     type CacheSelector = DefaultCacheSelector;\n "}, {"sha": "db78fa535cf42f01131cb691e6fd01afa0e093ef", "filename": "src/librustc_middle/ty/util.rs", "status": "modified", "additions": 90, "deletions": 66, "changes": 156, "blob_url": "https://github.com/rust-lang/rust/blob/6e87bacd37539b7e7cd75152dffd225047fa983a/src%2Flibrustc_middle%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e87bacd37539b7e7cd75152dffd225047fa983a/src%2Flibrustc_middle%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Futil.rs?ref=6e87bacd37539b7e7cd75152dffd225047fa983a", "patch": "@@ -3,11 +3,12 @@\n use crate::ich::NodeIdHashingMode;\n use crate::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use crate::mir::interpret::{sign_extend, truncate};\n+use crate::ty::fold::TypeFolder;\n use crate::ty::layout::IntegerExt;\n use crate::ty::query::TyCtxtAt;\n use crate::ty::subst::{GenericArgKind, InternalSubsts, Subst, SubstsRef};\n use crate::ty::TyKind::*;\n-use crate::ty::{self, DefIdTree, GenericParamDefKind, Ty, TyCtxt, TypeFoldable};\n+use crate::ty::{self, DefIdTree, GenericParamDefKind, List, Ty, TyCtxt, TypeFoldable};\n use rustc_apfloat::Float as _;\n use rustc_ast::ast;\n use rustc_attr::{self as attr, SignedInt, UnsignedInt};\n@@ -557,82 +558,84 @@ impl<'tcx> TyCtxt<'tcx> {\n         def_id: DefId,\n         substs: SubstsRef<'tcx>,\n     ) -> Result<Ty<'tcx>, Ty<'tcx>> {\n-        use crate::ty::fold::TypeFolder;\n-\n-        struct OpaqueTypeExpander<'tcx> {\n-            // Contains the DefIds of the opaque types that are currently being\n-            // expanded. When we expand an opaque type we insert the DefId of\n-            // that type, and when we finish expanding that type we remove the\n-            // its DefId.\n-            seen_opaque_tys: FxHashSet<DefId>,\n-            // Cache of all expansions we've seen so far. This is a critical\n-            // optimization for some large types produced by async fn trees.\n-            expanded_cache: FxHashMap<(DefId, SubstsRef<'tcx>), Ty<'tcx>>,\n-            primary_def_id: DefId,\n-            found_recursion: bool,\n-            tcx: TyCtxt<'tcx>,\n-        }\n-\n-        impl<'tcx> OpaqueTypeExpander<'tcx> {\n-            fn expand_opaque_ty(\n-                &mut self,\n-                def_id: DefId,\n-                substs: SubstsRef<'tcx>,\n-            ) -> Option<Ty<'tcx>> {\n-                if self.found_recursion {\n-                    return None;\n-                }\n-                let substs = substs.fold_with(self);\n-                if self.seen_opaque_tys.insert(def_id) {\n-                    let expanded_ty = match self.expanded_cache.get(&(def_id, substs)) {\n-                        Some(expanded_ty) => expanded_ty,\n-                        None => {\n-                            let generic_ty = self.tcx.type_of(def_id);\n-                            let concrete_ty = generic_ty.subst(self.tcx, substs);\n-                            let expanded_ty = self.fold_ty(concrete_ty);\n-                            self.expanded_cache.insert((def_id, substs), expanded_ty);\n-                            expanded_ty\n-                        }\n-                    };\n-                    self.seen_opaque_tys.remove(&def_id);\n-                    Some(expanded_ty)\n-                } else {\n-                    // If another opaque type that we contain is recursive, then it\n-                    // will report the error, so we don't have to.\n-                    self.found_recursion = def_id == self.primary_def_id;\n-                    None\n-                }\n-            }\n-        }\n-\n-        impl<'tcx> TypeFolder<'tcx> for OpaqueTypeExpander<'tcx> {\n-            fn tcx(&self) -> TyCtxt<'tcx> {\n-                self.tcx\n-            }\n-\n-            fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {\n-                if let ty::Opaque(def_id, substs) = t.kind {\n-                    self.expand_opaque_ty(def_id, substs).unwrap_or(t)\n-                } else if t.has_opaque_types() {\n-                    t.super_fold_with(self)\n-                } else {\n-                    t\n-                }\n-            }\n-        }\n-\n         let mut visitor = OpaqueTypeExpander {\n             seen_opaque_tys: FxHashSet::default(),\n             expanded_cache: FxHashMap::default(),\n-            primary_def_id: def_id,\n+            primary_def_id: Some(def_id),\n             found_recursion: false,\n+            check_recursion: true,\n             tcx: self,\n         };\n+\n         let expanded_type = visitor.expand_opaque_ty(def_id, substs).unwrap();\n         if visitor.found_recursion { Err(expanded_type) } else { Ok(expanded_type) }\n     }\n }\n \n+struct OpaqueTypeExpander<'tcx> {\n+    // Contains the DefIds of the opaque types that are currently being\n+    // expanded. When we expand an opaque type we insert the DefId of\n+    // that type, and when we finish expanding that type we remove the\n+    // its DefId.\n+    seen_opaque_tys: FxHashSet<DefId>,\n+    // Cache of all expansions we've seen so far. This is a critical\n+    // optimization for some large types produced by async fn trees.\n+    expanded_cache: FxHashMap<(DefId, SubstsRef<'tcx>), Ty<'tcx>>,\n+    primary_def_id: Option<DefId>,\n+    found_recursion: bool,\n+    /// Whether or not to check for recursive opaque types.\n+    /// This is `true` when we're explicitly checking for opaque type\n+    /// recursion, and 'false' otherwise to avoid unecessary work.\n+    check_recursion: bool,\n+    tcx: TyCtxt<'tcx>,\n+}\n+\n+impl<'tcx> OpaqueTypeExpander<'tcx> {\n+    fn expand_opaque_ty(&mut self, def_id: DefId, substs: SubstsRef<'tcx>) -> Option<Ty<'tcx>> {\n+        if self.found_recursion {\n+            return None;\n+        }\n+        let substs = substs.fold_with(self);\n+        if !self.check_recursion || self.seen_opaque_tys.insert(def_id) {\n+            let expanded_ty = match self.expanded_cache.get(&(def_id, substs)) {\n+                Some(expanded_ty) => expanded_ty,\n+                None => {\n+                    let generic_ty = self.tcx.type_of(def_id);\n+                    let concrete_ty = generic_ty.subst(self.tcx, substs);\n+                    let expanded_ty = self.fold_ty(concrete_ty);\n+                    self.expanded_cache.insert((def_id, substs), expanded_ty);\n+                    expanded_ty\n+                }\n+            };\n+            if self.check_recursion {\n+                self.seen_opaque_tys.remove(&def_id);\n+            }\n+            Some(expanded_ty)\n+        } else {\n+            // If another opaque type that we contain is recursive, then it\n+            // will report the error, so we don't have to.\n+            self.found_recursion = def_id == *self.primary_def_id.as_ref().unwrap();\n+            None\n+        }\n+    }\n+}\n+\n+impl<'tcx> TypeFolder<'tcx> for OpaqueTypeExpander<'tcx> {\n+    fn tcx(&self) -> TyCtxt<'tcx> {\n+        self.tcx\n+    }\n+\n+    fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {\n+        if let ty::Opaque(def_id, substs) = t.kind {\n+            self.expand_opaque_ty(def_id, substs).unwrap_or(t)\n+        } else if t.has_opaque_types() {\n+            t.super_fold_with(self)\n+        } else {\n+            t\n+        }\n+    }\n+}\n+\n impl<'tcx> ty::TyS<'tcx> {\n     /// Returns the maximum value for the given numeric type (including `char`s)\n     /// or returns `None` if the type is not numeric.\n@@ -1142,3 +1145,24 @@ pub fn needs_drop_components(\n \n #[derive(Copy, Clone, Debug, HashStable, RustcEncodable, RustcDecodable)]\n pub struct AlwaysRequiresDrop;\n+\n+/// Normalizes all opaque types in the given value, replacing them\n+/// with their underlying types.\n+pub fn normalize_opaque_types(\n+    tcx: TyCtxt<'tcx>,\n+    val: &'tcx List<ty::Predicate<'tcx>>,\n+) -> &'tcx List<ty::Predicate<'tcx>> {\n+    let mut visitor = OpaqueTypeExpander {\n+        seen_opaque_tys: FxHashSet::default(),\n+        expanded_cache: FxHashMap::default(),\n+        primary_def_id: None,\n+        found_recursion: false,\n+        check_recursion: false,\n+        tcx,\n+    };\n+    val.fold_with(&mut visitor)\n+}\n+\n+pub fn provide(providers: &mut ty::query::Providers) {\n+    *providers = ty::query::Providers { normalize_opaque_types, ..*providers }\n+}"}, {"sha": "6a7653b60752db1164fa40bd6f78ee33c692e501", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e87bacd37539b7e7cd75152dffd225047fa983a/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e87bacd37539b7e7cd75152dffd225047fa983a/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=6e87bacd37539b7e7cd75152dffd225047fa983a", "patch": "@@ -193,7 +193,7 @@ fn build_drop_shim<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, ty: Option<Ty<'tcx>>)\n             );\n         }\n         let patch = {\n-            let param_env = tcx.param_env(def_id).with_reveal_all();\n+            let param_env = tcx.param_env_reveal_all_normalized(def_id);\n             let mut elaborator =\n                 DropShimElaborator { body: &body, patch: MirPatch::new(&body), tcx, param_env };\n             let dropee = tcx.mk_place_deref(dropee_ptr);"}, {"sha": "8e2fd709d66f0102a0b0af4c8b6712776fdfde57", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e87bacd37539b7e7cd75152dffd225047fa983a/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e87bacd37539b7e7cd75152dffd225047fa983a/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=6e87bacd37539b7e7cd75152dffd225047fa983a", "patch": "@@ -328,7 +328,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n     ) -> ConstPropagator<'mir, 'tcx> {\n         let def_id = source.def_id();\n         let substs = &InternalSubsts::identity_for_item(tcx, def_id);\n-        let param_env = tcx.param_env(def_id).with_reveal_all();\n+        let param_env = tcx.param_env_reveal_all_normalized(def_id);\n \n         let span = tcx.def_span(def_id);\n         let can_const_prop = CanConstProp::check(body);"}, {"sha": "ad49090bfc50c1dbc3b5f6e0d67294adad7d988e", "filename": "src/librustc_mir/transform/elaborate_drops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e87bacd37539b7e7cd75152dffd225047fa983a/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e87bacd37539b7e7cd75152dffd225047fa983a/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs?ref=6e87bacd37539b7e7cd75152dffd225047fa983a", "patch": "@@ -25,7 +25,7 @@ impl<'tcx> MirPass<'tcx> for ElaborateDrops {\n         debug!(\"elaborate_drops({:?} @ {:?})\", src, body.span);\n \n         let def_id = src.def_id();\n-        let param_env = tcx.param_env(src.def_id()).with_reveal_all();\n+        let param_env = tcx.param_env_reveal_all_normalized(src.def_id());\n         let move_data = match MoveData::gather_moves(body, tcx, param_env) {\n             Ok(move_data) => move_data,\n             Err((move_data, _)) => {"}, {"sha": "92ea162e419dbb6941ffe68dc8439bac96acd8ce", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e87bacd37539b7e7cd75152dffd225047fa983a/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e87bacd37539b7e7cd75152dffd225047fa983a/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=6e87bacd37539b7e7cd75152dffd225047fa983a", "patch": "@@ -72,7 +72,7 @@ impl Inliner<'tcx> {\n \n         let mut callsites = VecDeque::new();\n \n-        let param_env = self.tcx.param_env(self.source.def_id()).with_reveal_all();\n+        let param_env = self.tcx.param_env_reveal_all_normalized(self.source.def_id());\n \n         // Only do inlining into fn bodies.\n         let id = self.tcx.hir().as_local_hir_id(self.source.def_id().expect_local());"}, {"sha": "b8a74f09409ca9822470012995b55b06c2f28e58", "filename": "src/librustc_mir/transform/validate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e87bacd37539b7e7cd75152dffd225047fa983a/src%2Flibrustc_mir%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e87bacd37539b7e7cd75152dffd225047fa983a/src%2Flibrustc_mir%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fvalidate.rs?ref=6e87bacd37539b7e7cd75152dffd225047fa983a", "patch": "@@ -189,7 +189,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         // Normalize projections and things like that.\n         // FIXME: We need to reveal_all, as some optimizations change types in ways\n         // that require unfolding opaque types.\n-        let param_env = self.param_env.with_reveal_all();\n+        let param_env = self.param_env.with_reveal_all_normalized(self.tcx);\n         let src = self.tcx.normalize_erasing_regions(param_env, src);\n         let dest = self.tcx.normalize_erasing_regions(param_env, dest);\n "}, {"sha": "19c86655bd5ed1e2efc386f50cf32e3843711d30", "filename": "src/librustc_mir_build/hair/pattern/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e87bacd37539b7e7cd75152dffd225047fa983a/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e87bacd37539b7e7cd75152dffd225047fa983a/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fmod.rs?ref=6e87bacd37539b7e7cd75152dffd225047fa983a", "patch": "@@ -776,7 +776,7 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n \n         // Use `Reveal::All` here because patterns are always monomorphic even if their function\n         // isn't.\n-        let param_env_reveal_all = self.param_env.with_reveal_all();\n+        let param_env_reveal_all = self.param_env.with_reveal_all_normalized(self.tcx);\n         let substs = self.typeck_results.node_substs(id);\n         let instance = match ty::Instance::resolve(self.tcx, param_env_reveal_all, def_id, substs) {\n             Ok(Some(i)) => i,"}, {"sha": "55a6d3f76457e3567aab727b1e32ef2a96f296f5", "filename": "src/librustc_passes/layout_test.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6e87bacd37539b7e7cd75152dffd225047fa983a/src%2Flibrustc_passes%2Flayout_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e87bacd37539b7e7cd75152dffd225047fa983a/src%2Flibrustc_passes%2Flayout_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flayout_test.rs?ref=6e87bacd37539b7e7cd75152dffd225047fa983a", "patch": "@@ -82,8 +82,10 @@ impl LayoutTest<'tcx> {\n                         }\n \n                         sym::debug => {\n-                            let normalized_ty =\n-                                self.tcx.normalize_erasing_regions(param_env.with_reveal_all(), ty);\n+                            let normalized_ty = self.tcx.normalize_erasing_regions(\n+                                param_env.with_reveal_all_normalized(self.tcx),\n+                                ty,\n+                            );\n                             self.tcx.sess.span_err(\n                                 item.span,\n                                 &format!(\"layout_of({:?}) = {:#?}\", normalized_ty, *ty_layout),"}, {"sha": "56ee492de87abf790b15a780904192e824bafddc", "filename": "src/librustc_symbol_mangling/v0.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e87bacd37539b7e7cd75152dffd225047fa983a/src%2Flibrustc_symbol_mangling%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e87bacd37539b7e7cd75152dffd225047fa983a/src%2Flibrustc_symbol_mangling%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_symbol_mangling%2Fv0.rs?ref=6e87bacd37539b7e7cd75152dffd225047fa983a", "patch": "@@ -271,7 +271,7 @@ impl Printer<'tcx> for SymbolMangler<'tcx> {\n         let key = self.tcx.def_key(impl_def_id);\n         let parent_def_id = DefId { index: key.parent.unwrap(), ..impl_def_id };\n \n-        let mut param_env = self.tcx.param_env(impl_def_id).with_reveal_all();\n+        let mut param_env = self.tcx.param_env_reveal_all_normalized(impl_def_id);\n         if !substs.is_empty() {\n             param_env = param_env.subst(self.tcx, substs);\n         }"}, {"sha": "1e0c4055af3c5a476a1dec21b5e9bf042e18ff62", "filename": "src/librustc_ty/instance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e87bacd37539b7e7cd75152dffd225047fa983a/src%2Flibrustc_ty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e87bacd37539b7e7cd75152dffd225047fa983a/src%2Flibrustc_ty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ty%2Finstance.rs?ref=6e87bacd37539b7e7cd75152dffd225047fa983a", "patch": "@@ -137,7 +137,7 @@ fn resolve_associated_item<'tcx>(\n                 });\n \n             let substs = tcx.infer_ctxt().enter(|infcx| {\n-                let param_env = param_env.with_reveal_all();\n+                let param_env = param_env.with_reveal_all_normalized(tcx);\n                 let substs = rcvr_substs.rebase_onto(tcx, trait_def_id, impl_data.substs);\n                 let substs = translate_substs(\n                     &infcx,"}, {"sha": "dfb28b473ff267c240981ae9f3bf78a58c4dcc33", "filename": "src/librustc_ty/ty.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6e87bacd37539b7e7cd75152dffd225047fa983a/src%2Flibrustc_ty%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e87bacd37539b7e7cd75152dffd225047fa983a/src%2Flibrustc_ty%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ty%2Fty.rs?ref=6e87bacd37539b7e7cd75152dffd225047fa983a", "patch": "@@ -276,6 +276,10 @@ fn param_env(tcx: TyCtxt<'_>, def_id: DefId) -> ty::ParamEnv<'_> {\n     traits::normalize_param_env_or_error(tcx, def_id, unnormalized_env, cause)\n }\n \n+fn param_env_reveal_all_normalized(tcx: TyCtxt<'_>, def_id: DefId) -> ty::ParamEnv<'_> {\n+    tcx.param_env(def_id).with_reveal_all_normalized(tcx)\n+}\n+\n fn crate_disambiguator(tcx: TyCtxt<'_>, crate_num: CrateNum) -> CrateDisambiguator {\n     assert_eq!(crate_num, LOCAL_CRATE);\n     tcx.sess.local_crate_disambiguator()\n@@ -502,6 +506,7 @@ pub fn provide(providers: &mut ty::query::Providers) {\n         adt_sized_constraint,\n         def_span,\n         param_env,\n+        param_env_reveal_all_normalized,\n         trait_of_item,\n         crate_disambiguator,\n         original_crate_name,"}]}