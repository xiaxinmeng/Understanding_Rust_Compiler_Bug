{"sha": "760275d81e67ae8953d40e64ff76691f0a55c5ff", "node_id": "C_kwDOAAsO6NoAKDc2MDI3NWQ4MWU2N2FlODk1M2Q0MGU2NGZmNzY2OTFmMGE1NWM1ZmY", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-02-13T21:08:15Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-02-27T19:25:16Z"}, "message": "Implement checked Shl/Shr at MIR building.", "tree": {"sha": "a203840765e2902b2ed13ade9ced785e750ce85d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a203840765e2902b2ed13ade9ced785e750ce85d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/760275d81e67ae8953d40e64ff76691f0a55c5ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/760275d81e67ae8953d40e64ff76691f0a55c5ff", "html_url": "https://github.com/rust-lang/rust/commit/760275d81e67ae8953d40e64ff76691f0a55c5ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/760275d81e67ae8953d40e64ff76691f0a55c5ff/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb84167837f241e12f21a806b162cfdea277bdb2", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb84167837f241e12f21a806b162cfdea277bdb2", "html_url": "https://github.com/rust-lang/rust/commit/eb84167837f241e12f21a806b162cfdea277bdb2"}], "stats": {"total": 23, "additions": 0, "deletions": 23}, "files": [{"sha": "fbecdab158c8e392a3d4fbdea74cec3792fb2bb4", "filename": "src/num.rs", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/760275d81e67ae8953d40e64ff76691f0a55c5ff/src%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/760275d81e67ae8953d40e64ff76691f0a55c5ff/src%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fnum.rs?ref=760275d81e67ae8953d40e64ff76691f0a55c5ff", "patch": "@@ -170,14 +170,6 @@ pub(crate) fn codegen_checked_int_binop<'tcx>(\n     in_lhs: CValue<'tcx>,\n     in_rhs: CValue<'tcx>,\n ) -> CValue<'tcx> {\n-    if bin_op != BinOp::Shl && bin_op != BinOp::Shr {\n-        assert_eq!(\n-            in_lhs.layout().ty,\n-            in_rhs.layout().ty,\n-            \"checked int binop requires lhs and rhs of same type\"\n-        );\n-    }\n-\n     let lhs = in_lhs.load_scalar(fx);\n     let rhs = in_rhs.load_scalar(fx);\n \n@@ -271,21 +263,6 @@ pub(crate) fn codegen_checked_int_binop<'tcx>(\n                 _ => unreachable!(\"invalid non-integer type {}\", ty),\n             }\n         }\n-        BinOp::Shl => {\n-            let val = fx.bcx.ins().ishl(lhs, rhs);\n-            let ty = fx.bcx.func.dfg.value_type(val);\n-            let max_shift = i64::from(ty.bits()) - 1;\n-            let has_overflow = fx.bcx.ins().icmp_imm(IntCC::UnsignedGreaterThan, rhs, max_shift);\n-            (val, has_overflow)\n-        }\n-        BinOp::Shr => {\n-            let val =\n-                if !signed { fx.bcx.ins().ushr(lhs, rhs) } else { fx.bcx.ins().sshr(lhs, rhs) };\n-            let ty = fx.bcx.func.dfg.value_type(val);\n-            let max_shift = i64::from(ty.bits()) - 1;\n-            let has_overflow = fx.bcx.ins().icmp_imm(IntCC::UnsignedGreaterThan, rhs, max_shift);\n-            (val, has_overflow)\n-        }\n         _ => bug!(\"binop {:?} on checked int/uint lhs: {:?} rhs: {:?}\", bin_op, in_lhs, in_rhs),\n     };\n "}]}