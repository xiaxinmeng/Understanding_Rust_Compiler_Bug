{"sha": "b42884fc64e9c97d8ab2926cb8e4896c32abf93b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0Mjg4NGZjNjRlOWM5N2Q4YWIyOTI2Y2I4ZTQ4OTZjMzJhYmY5M2I=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-06-27T05:24:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-06-27T05:24:03Z"}, "message": "Auto merge of #34419 - eddyb:virtually-inexistent, r=Aatch\n\nDon't translate vtable methods with Self: Sized bounds.\n\nFixes #34416.", "tree": {"sha": "40e614b80e3e6410e425e8f983f405fb44816097", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40e614b80e3e6410e425e8f983f405fb44816097"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b42884fc64e9c97d8ab2926cb8e4896c32abf93b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b42884fc64e9c97d8ab2926cb8e4896c32abf93b", "html_url": "https://github.com/rust-lang/rust/commit/b42884fc64e9c97d8ab2926cb8e4896c32abf93b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b42884fc64e9c97d8ab2926cb8e4896c32abf93b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af2fe634bfa770e7da675210aa661a96cde51275", "url": "https://api.github.com/repos/rust-lang/rust/commits/af2fe634bfa770e7da675210aa661a96cde51275", "html_url": "https://github.com/rust-lang/rust/commit/af2fe634bfa770e7da675210aa661a96cde51275"}, {"sha": "096ae80b33396f98304f739adb6c56eab98147b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/096ae80b33396f98304f739adb6c56eab98147b0", "html_url": "https://github.com/rust-lang/rust/commit/096ae80b33396f98304f739adb6c56eab98147b0"}], "stats": {"total": 35, "additions": 34, "deletions": 1}, "files": [{"sha": "ffa1530a14e2644043079ab2690a622020e39ec8", "filename": "src/librustc/traits/object_safety.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b42884fc64e9c97d8ab2926cb8e4896c32abf93b/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b42884fc64e9c97d8ab2926cb8e4896c32abf93b/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fobject_safety.rs?ref=b42884fc64e9c97d8ab2926cb8e4896c32abf93b", "patch": "@@ -228,9 +228,14 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     /// otherwise ensure that they cannot be used when `Self=Trait`.\n     pub fn is_vtable_safe_method(self,\n                                  trait_def_id: DefId,\n-                                 method: &ty::Method<'tcx>)\n+                                 method: &ty::Method<'gcx>)\n                                  -> bool\n     {\n+        // Any method that has a `Self : Sized` requisite can't be called.\n+        if self.generics_require_sized_self(&method.generics, &method.predicates) {\n+            return false;\n+        }\n+\n         self.virtual_call_violation_for_method(trait_def_id, method).is_none()\n     }\n "}, {"sha": "13b725b7c9eff9e061468f7452a88ddcdbbff3ae", "filename": "src/test/run-pass/trait-object-exclusion.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b42884fc64e9c97d8ab2926cb8e4896c32abf93b/src%2Ftest%2Frun-pass%2Ftrait-object-exclusion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b42884fc64e9c97d8ab2926cb8e4896c32abf93b/src%2Ftest%2Frun-pass%2Ftrait-object-exclusion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-object-exclusion.rs?ref=b42884fc64e9c97d8ab2926cb8e4896c32abf93b", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait Future: 'static {\n+    // The requirement for Self: Sized must prevent instantiation of\n+    // Future::forget in vtables, otherwise there's an infinite type\n+    // recursion through <Map<...> as Future>::forget.\n+    fn forget(self) where Self: Sized {\n+        Box::new(Map(self)) as Box<Future>;\n+    }\n+}\n+\n+struct Map<A>(A);\n+impl<A: Future> Future for Map<A> {}\n+\n+pub struct Promise;\n+impl Future for Promise {}\n+\n+fn main() {\n+    Promise.forget();\n+}"}]}