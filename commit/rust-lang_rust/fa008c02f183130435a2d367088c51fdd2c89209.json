{"sha": "fa008c02f183130435a2d367088c51fdd2c89209", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhMDA4YzAyZjE4MzEzMDQzNWEyZDM2NzA4OGM1MWZkZDJjODkyMDk=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-01-15T08:55:37Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-01-15T10:49:40Z"}, "message": "Rollup merge of #47443 - FenrirWolf:rand, r=alexcrichton\n\nRemove leftover Rand stuff\n\nThe in-tree version of `rand` was removed in 6bc8f164b09b9994e6a2d4c4ca60d7d36c09d3fe, but for some reason this lone file avoided the purge. Figured it's about time to finish the job. :smiling_imp:", "tree": {"sha": "1c651f8565c0b8fccd04a7229d509c041c03b5bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c651f8565c0b8fccd04a7229d509c041c03b5bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa008c02f183130435a2d367088c51fdd2c89209", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlpch0UACgkQ/vbIBR0O\nATxIeA//aRzUfSndWf0paoZT9uNn5mX/2wFNe46gAZU8ZrwHzd3TqfzmX1VlRUDb\no2PB5SJSAYebiPp7T+bVaavzRviNul8ipvdvxWmh84hZRajVlxzoxT5apVu6ySYk\no38YD1zQZQuLndU5PmOATw5NIUltK6S6Hw8RwU30nXA3dTI7c/xqMszlDl9Dhl7P\nUOx5OFPPEGHgH0TBtfOxbFZc/vyH656LQQfqXUL8D4s7boFC3q0ESxLqzUHfhCHH\nrgod3rFrS7mUM1VVRkFsRnYF7kHzLYr16/zeWJEVLt/zd5tLC+f0liXbJC8Eqn7q\nSsxUFFyxUorSEkAbtyUw8VFrXY9hPoiZkugZ9nrN5sM4VIQYw99J7tUL0cZ+y9ZC\nomAPNz9CaGUcHooHAFkzEbdxxN0P85yZq4ECNEvvCfOtr/yg/u1SjElyftCqN+xu\nwi77iLR63GqkF1kPUfaP/asR2ia3aSTtlFNPadHRlXIsKfc3j5/8Awl0Oz7y9b/A\n44zyDgi/u+AA9lQiaF54LkhCJbZPp6NQCKU5OhW7Q/Tw1QTvReJiuDN0Lr2iayWD\nh6xP0epgoZWMohS2dz9MEF8GS4Z+3ONjIVBVBZ+frA0J/o5o0chkZJH8RQT3M18m\n263t5CAO29lDiw0jRr7NSnp4P7vpq3gCidtD9qC0iiVKOL/jOzE=\n=sfH2\n-----END PGP SIGNATURE-----", "payload": "tree 1c651f8565c0b8fccd04a7229d509c041c03b5bc\nparent 5d9d5ea712b92d3a9fbfc91fc590821a51653aa4\nparent 1482afbbedfbbd6920b8cf05bd23ba30a36630ce\nauthor kennytm <kennytm@gmail.com> 1516006537 +0800\ncommitter kennytm <kennytm@gmail.com> 1516013380 +0800\n\nRollup merge of #47443 - FenrirWolf:rand, r=alexcrichton\n\nRemove leftover Rand stuff\n\nThe in-tree version of `rand` was removed in 6bc8f164b09b9994e6a2d4c4ca60d7d36c09d3fe, but for some reason this lone file avoided the purge. Figured it's about time to finish the job. :smiling_imp:\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa008c02f183130435a2d367088c51fdd2c89209", "html_url": "https://github.com/rust-lang/rust/commit/fa008c02f183130435a2d367088c51fdd2c89209", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa008c02f183130435a2d367088c51fdd2c89209/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d9d5ea712b92d3a9fbfc91fc590821a51653aa4", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d9d5ea712b92d3a9fbfc91fc590821a51653aa4", "html_url": "https://github.com/rust-lang/rust/commit/5d9d5ea712b92d3a9fbfc91fc590821a51653aa4"}, {"sha": "1482afbbedfbbd6920b8cf05bd23ba30a36630ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/1482afbbedfbbd6920b8cf05bd23ba30a36630ce", "html_url": "https://github.com/rust-lang/rust/commit/1482afbbedfbbd6920b8cf05bd23ba30a36630ce"}], "stats": {"total": 108, "additions": 0, "deletions": 108}, "files": [{"sha": "08bc809ed4d4632ac29dc8f5422487ce2dacfa1a", "filename": "src/libstd/rand/reader.rs", "status": "removed", "additions": 0, "deletions": 108, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/5d9d5ea712b92d3a9fbfc91fc590821a51653aa4/src%2Flibstd%2Frand%2Freader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d9d5ea712b92d3a9fbfc91fc590821a51653aa4/src%2Flibstd%2Frand%2Freader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Freader.rs?ref=5d9d5ea712b92d3a9fbfc91fc590821a51653aa4", "patch": "@@ -1,108 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! A wrapper around any Read to treat it as an RNG.\n-\n-#![allow(dead_code)]\n-\n-use io::prelude::*;\n-use rand::Rng;\n-\n-/// An RNG that reads random bytes straight from a `Read`. This will\n-/// work best with an infinite reader, but this is not required.\n-///\n-/// # Panics\n-///\n-/// It will panic if it there is insufficient data to fulfill a request.\n-pub struct ReaderRng<R> {\n-    reader: R\n-}\n-\n-impl<R: Read> ReaderRng<R> {\n-    /// Create a new `ReaderRng` from a `Read`.\n-    pub fn new(r: R) -> ReaderRng<R> {\n-        ReaderRng {\n-            reader: r\n-        }\n-    }\n-}\n-\n-impl<R: Read> Rng for ReaderRng<R> {\n-    fn next_u32(&mut self) -> u32 {\n-        // This is designed for speed: reading a LE integer on a LE\n-        // platform just involves blitting the bytes into the memory\n-        // of the u32, similarly for BE on BE; avoiding byteswapping.\n-        let mut bytes = [0; 4];\n-        self.fill_bytes(&mut bytes);\n-        unsafe { *(bytes.as_ptr() as *const u32) }\n-    }\n-    fn next_u64(&mut self) -> u64 {\n-        // see above for explanation.\n-        let mut bytes = [0; 8];\n-        self.fill_bytes(&mut bytes);\n-        unsafe { *(bytes.as_ptr() as *const u64) }\n-    }\n-    fn fill_bytes(&mut self, mut v: &mut [u8]) {\n-        while !v.is_empty() {\n-            let t = v;\n-            match self.reader.read(t) {\n-                Ok(0) => panic!(\"ReaderRng.fill_bytes: EOF reached\"),\n-                Ok(n) => v = t.split_at_mut(n).1,\n-                Err(e) => panic!(\"ReaderRng.fill_bytes: {}\", e),\n-            }\n-        }\n-    }\n-}\n-\n-#[cfg(test)]\n-mod tests {\n-    use super::ReaderRng;\n-    use rand::Rng;\n-\n-    #[test]\n-    fn test_reader_rng_u64() {\n-        // transmute from the target to avoid endianness concerns.\n-        let v = &[0, 0, 0, 0, 0, 0, 0, 1,\n-                  0, 0, 0, 0, 0, 0, 0, 2,\n-                  0, 0, 0, 0, 0, 0, 0, 3][..];\n-        let mut rng = ReaderRng::new(v);\n-\n-        assert_eq!(rng.next_u64(), 1u64.to_be());\n-        assert_eq!(rng.next_u64(), 2u64.to_be());\n-        assert_eq!(rng.next_u64(), 3u64.to_be());\n-    }\n-    #[test]\n-    fn test_reader_rng_u32() {\n-        let v = &[0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3][..];\n-        let mut rng = ReaderRng::new(v);\n-\n-        assert_eq!(rng.next_u32(), 1u32.to_be());\n-        assert_eq!(rng.next_u32(), 2u32.to_be());\n-        assert_eq!(rng.next_u32(), 3u32.to_be());\n-    }\n-    #[test]\n-    fn test_reader_rng_fill_bytes() {\n-        let v = [1, 2, 3, 4, 5, 6, 7, 8];\n-        let mut w = [0; 8];\n-\n-        let mut rng = ReaderRng::new(&v[..]);\n-        rng.fill_bytes(&mut w);\n-\n-        assert!(v == w);\n-    }\n-\n-    #[test]\n-    #[should_panic]\n-    fn test_reader_rng_insufficient_bytes() {\n-        let mut rng = ReaderRng::new(&[][..]);\n-        let mut v = [0; 3];\n-        rng.fill_bytes(&mut v);\n-    }\n-}"}]}