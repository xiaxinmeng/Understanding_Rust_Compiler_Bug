{"sha": "b3463ea65773972e4b5ec9ba4ef35b5f9e595284", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzNDYzZWE2NTc3Mzk3MmU0YjVlYzliYTRlZjM1YjVmOWU1OTUyODQ=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2012-12-15T18:24:10Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-12-17T03:27:06Z"}, "message": "priority_queue: replace copies with moves", "tree": {"sha": "10b7289166711edeadf5638cca0db7bfaf11e394", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/10b7289166711edeadf5638cca0db7bfaf11e394"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b3463ea65773972e4b5ec9ba4ef35b5f9e595284", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b3463ea65773972e4b5ec9ba4ef35b5f9e595284", "html_url": "https://github.com/rust-lang/rust/commit/b3463ea65773972e4b5ec9ba4ef35b5f9e595284", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b3463ea65773972e4b5ec9ba4ef35b5f9e595284/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c433f22a152f6825f3610382176aaa191ebf7cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c433f22a152f6825f3610382176aaa191ebf7cb", "html_url": "https://github.com/rust-lang/rust/commit/6c433f22a152f6825f3610382176aaa191ebf7cb"}], "stats": {"total": 34, "additions": 24, "deletions": 10}, "files": [{"sha": "c62b3897c30af39e5ae4e48774a22b8842c829be", "filename": "src/libstd/priority_queue.rs", "status": "modified", "additions": 24, "deletions": 10, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/b3463ea65773972e4b5ec9ba4ef35b5f9e595284/src%2Flibstd%2Fpriority_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3463ea65773972e4b5ec9ba4ef35b5f9e595284/src%2Flibstd%2Fpriority_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpriority_queue.rs?ref=b3463ea65773972e4b5ec9ba4ef35b5f9e595284", "patch": "@@ -1,12 +1,18 @@\n \n /// A priority queue implemented with a binary heap\n use core::cmp::Ord;\n+use ptr::addr_of;\n \n-pub struct PriorityQueue <T: Copy Ord>{\n+#[abi = \"rust-intrinsic\"]\n+extern \"C\" mod rusti {\n+    fn move_val_init<T>(dst: &mut T, -src: T);\n+}\n+\n+pub struct PriorityQueue <T: Ord>{\n     priv data: ~[T],\n }\n \n-impl <T: Copy Ord> PriorityQueue<T> {\n+impl <T: Ord> PriorityQueue<T> {\n     /// Returns the greatest item in the queue - fails if empty\n     pure fn top(&self) -> &self/T { &self.data[0] }\n \n@@ -97,38 +103,46 @@ impl <T: Copy Ord> PriorityQueue<T> {\n         q\n     }\n \n-    priv fn siftup(&mut self, start: uint, pos: uint) {\n+    // The implementations of siftup and siftdown use unsafe blocks in order to\n+    // move an element out of the vector (leaving behind a junk element), shift\n+    // along the others and move it back into the vector over the junk element.\n+    // This reduces the constant factor compared to using swaps, which involves\n+    // twice as many moves.\n+\n+    priv fn siftup(&mut self, start: uint, pos: uint) unsafe {\n         let mut pos = pos;\n-        let new = self.data[pos];\n+        let new = move *addr_of(&self.data[pos]);\n \n         while pos > start {\n             let parent = (pos - 1) >> 1;\n             if new > self.data[parent] {\n-                self.data[pos] = self.data[parent];\n+                rusti::move_val_init(&mut self.data[pos],\n+                                     move *addr_of(&self.data[parent]));\n                 pos = parent;\n                 loop\n             }\n             break\n         }\n-        self.data[pos] = new;\n+        rusti::move_val_init(&mut self.data[pos], move new);\n     }\n \n-    priv fn siftdown_range(&mut self, pos: uint, end: uint) {\n+    priv fn siftdown_range(&mut self, pos: uint, end: uint) unsafe {\n         let mut pos = pos;\n         let start = pos;\n-        let new = self.data[pos];\n+        let new = move *addr_of(&self.data[pos]);\n \n         let mut child = 2 * pos + 1;\n         while child < end {\n             let right = child + 1;\n             if right < end && !(self.data[child] > self.data[right]) {\n                 child = right;\n             }\n-            self.data[pos] = self.data[child];\n+            rusti::move_val_init(&mut self.data[pos],\n+                                 move *addr_of(&self.data[child]));\n             pos = child;\n             child = 2 * pos + 1;\n         }\n-        self.data[pos] = new;\n+        rusti::move_val_init(&mut self.data[pos], move new);\n         self.siftup(start, pos);\n     }\n "}]}