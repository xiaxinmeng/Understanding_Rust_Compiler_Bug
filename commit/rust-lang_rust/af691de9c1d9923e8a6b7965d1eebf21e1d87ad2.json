{"sha": "af691de9c1d9923e8a6b7965d1eebf21e1d87ad2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmNjkxZGU5YzFkOTkyM2U4YTZiNzk2NWQxZWViZjIxZTFkODdhZDI=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2019-10-17T01:01:26Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2019-10-17T01:01:26Z"}, "message": "Suppress validation mismatch ICE in the presence of mut borrows", "tree": {"sha": "b26639228c00941096ac7070f259a633ff5f84bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b26639228c00941096ac7070f259a633ff5f84bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af691de9c1d9923e8a6b7965d1eebf21e1d87ad2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af691de9c1d9923e8a6b7965d1eebf21e1d87ad2", "html_url": "https://github.com/rust-lang/rust/commit/af691de9c1d9923e8a6b7965d1eebf21e1d87ad2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af691de9c1d9923e8a6b7965d1eebf21e1d87ad2/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22a0856641dec573ab3b83b09c57aa597ca87b19", "url": "https://api.github.com/repos/rust-lang/rust/commits/22a0856641dec573ab3b83b09c57aa597ca87b19", "html_url": "https://github.com/rust-lang/rust/commit/22a0856641dec573ab3b83b09c57aa597ca87b19"}], "stats": {"total": 75, "additions": 58, "deletions": 17}, "files": [{"sha": "da1abb9747c1a7ef5cff597176234cc5c8905557", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 58, "deletions": 17, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/af691de9c1d9923e8a6b7965d1eebf21e1d87ad2/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af691de9c1d9923e8a6b7965d1eebf21e1d87ad2/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=af691de9c1d9923e8a6b7965d1eebf21e1d87ad2", "patch": "@@ -1024,23 +1024,12 @@ impl<'a, 'tcx> Checker<'a, 'tcx> {\n             new_errors.dedup();\n \n             if self.errors != new_errors {\n-                error!(\"old validator: {:?}\", self.errors);\n-                error!(\"new validator: {:?}\", new_errors);\n-\n-                // ICE on nightly if the validators do not emit exactly the same errors.\n-                // Users can supress this panic with an unstable compiler flag (hopefully after\n-                // filing an issue).\n-                let opts = &self.tcx.sess.opts;\n-                let trigger_ice = opts.unstable_features.is_nightly_build()\n-                    && !opts.debugging_opts.suppress_const_validation_back_compat_ice;\n-\n-                if trigger_ice {\n-                    span_bug!(\n-                        body.span,\n-                        \"{}\",\n-                        VALIDATOR_MISMATCH_ERR,\n-                    );\n-                }\n+                validator_mismatch(\n+                    self.tcx,\n+                    body,\n+                    std::mem::replace(&mut self.errors, vec![]),\n+                    new_errors,\n+                );\n             }\n         }\n \n@@ -1870,6 +1859,58 @@ fn args_required_const(tcx: TyCtxt<'_>, def_id: DefId) -> Option<FxHashSet<usize\n     Some(ret)\n }\n \n+fn validator_mismatch(\n+    tcx: TyCtxt<'tcx>,\n+    body: &Body<'tcx>,\n+    mut old_errors: Vec<(Span, String)>,\n+    mut new_errors: Vec<(Span, String)>,\n+) {\n+    error!(\"old validator: {:?}\", old_errors);\n+    error!(\"new validator: {:?}\", new_errors);\n+\n+    // ICE on nightly if the validators do not emit exactly the same errors.\n+    // Users can supress this panic with an unstable compiler flag (hopefully after\n+    // filing an issue).\n+    let opts = &tcx.sess.opts;\n+    let strict_validation_enabled = opts.unstable_features.is_nightly_build()\n+        && !opts.debugging_opts.suppress_const_validation_back_compat_ice;\n+\n+    if !strict_validation_enabled {\n+        return;\n+    }\n+\n+    // If this difference would cause a regression from the old to the new or vice versa, trigger\n+    // the ICE.\n+    if old_errors.is_empty() || new_errors.is_empty() {\n+        span_bug!(body.span, \"{}\", VALIDATOR_MISMATCH_ERR);\n+    }\n+\n+    // HACK: Borrows that would allow mutation are forbidden in const contexts, but they cause the\n+    // new validator to be more conservative about when a dropped local has been moved out of.\n+    //\n+    // Supress the mismatch ICE in cases where the validators disagree only on the number of\n+    // `LiveDrop` errors and both observe the same sequence of `MutBorrow`s.\n+\n+    let is_live_drop = |(_, s): &mut (_, String)| s.starts_with(\"LiveDrop\");\n+    let is_mut_borrow = |(_, s): &&(_, String)| s.starts_with(\"MutBorrow\");\n+\n+    let old_live_drops: Vec<_> = old_errors.drain_filter(is_live_drop).collect();\n+    let new_live_drops: Vec<_> = new_errors.drain_filter(is_live_drop).collect();\n+\n+    let only_live_drops_differ = old_live_drops != new_live_drops && old_errors == new_errors;\n+\n+    let old_mut_borrows = old_errors.iter().filter(is_mut_borrow);\n+    let new_mut_borrows = new_errors.iter().filter(is_mut_borrow);\n+\n+    let at_least_one_mut_borrow = old_mut_borrows.clone().next().is_some();\n+\n+    if only_live_drops_differ && at_least_one_mut_borrow && old_mut_borrows.eq(new_mut_borrows) {\n+        return;\n+    }\n+\n+    span_bug!(body.span, \"{}\", VALIDATOR_MISMATCH_ERR);\n+}\n+\n const VALIDATOR_MISMATCH_ERR: &str =\n     r\"Disagreement between legacy and dataflow-based const validators.\n     After filing an issue, use `-Zsuppress-const-validation-back-compat-ice` to compile your code.\";"}]}