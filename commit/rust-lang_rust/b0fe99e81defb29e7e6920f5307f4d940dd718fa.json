{"sha": "b0fe99e81defb29e7e6920f5307f4d940dd718fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwZmU5OWU4MWRlZmIyOWU3ZTY5MjBmNTMwN2Y0ZDk0MGRkNzE4ZmE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-04-16T07:06:21Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-04-16T07:06:21Z"}, "message": "consolidate ptr tests in fewer files", "tree": {"sha": "74b01e78b269d7ec01fa1e9967aca36da3ff621c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/74b01e78b269d7ec01fa1e9967aca36da3ff621c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b0fe99e81defb29e7e6920f5307f4d940dd718fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b0fe99e81defb29e7e6920f5307f4d940dd718fa", "html_url": "https://github.com/rust-lang/rust/commit/b0fe99e81defb29e7e6920f5307f4d940dd718fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b0fe99e81defb29e7e6920f5307f4d940dd718fa/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c823a1ec1eb3ff89bcbcb6c1fa8e1f8b24eb521", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c823a1ec1eb3ff89bcbcb6c1fa8e1f8b24eb521", "html_url": "https://github.com/rust-lang/rust/commit/5c823a1ec1eb3ff89bcbcb6c1fa8e1f8b24eb521"}], "stats": {"total": 151, "additions": 81, "deletions": 70}, "files": [{"sha": "a6ee151e3e13bbfa2c3dfed49463f1840a4e6467", "filename": "tests/run-pass/ptr_arith_offset.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5c823a1ec1eb3ff89bcbcb6c1fa8e1f8b24eb521/tests%2Frun-pass%2Fptr_arith_offset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c823a1ec1eb3ff89bcbcb6c1fa8e1f8b24eb521/tests%2Frun-pass%2Fptr_arith_offset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fptr_arith_offset.rs?ref=5c823a1ec1eb3ff89bcbcb6c1fa8e1f8b24eb521", "patch": "@@ -1,6 +0,0 @@\n-fn main() {\n-    let v = [1i16, 2];\n-    let x = &v as *const [i16] as *const i16;\n-    let x = x.wrapping_offset(1);\n-    assert_eq!(unsafe { *x }, 2);\n-}"}, {"sha": "fdd980e2177b5beed16fbc59ff6490f10392c2c5", "filename": "tests/run-pass/ptr_arith_offset_overflow.rs", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5c823a1ec1eb3ff89bcbcb6c1fa8e1f8b24eb521/tests%2Frun-pass%2Fptr_arith_offset_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c823a1ec1eb3ff89bcbcb6c1fa8e1f8b24eb521/tests%2Frun-pass%2Fptr_arith_offset_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fptr_arith_offset_overflow.rs?ref=5c823a1ec1eb3ff89bcbcb6c1fa8e1f8b24eb521", "patch": "@@ -1,12 +0,0 @@\n-use std::ptr;\n-\n-fn main() {\n-    let v = [1i16, 2];\n-    let x = &mut ptr::null(); // going through memory as there are more sanity checks along that path\n-    *x = v.as_ptr().wrapping_offset(1); // ptr to the 2nd element\n-    // Adding 2*isize::max and then 1 is like substracting 1\n-    *x = x.wrapping_offset(isize::MAX);\n-    *x = x.wrapping_offset(isize::MAX);\n-    *x = x.wrapping_offset(1);\n-    assert_eq!(unsafe { **x }, 1);\n-}"}, {"sha": "b9815126a8c7964b6109b37227d458f82794837b", "filename": "tests/run-pass/ptr_int_casts.rs", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b0fe99e81defb29e7e6920f5307f4d940dd718fa/tests%2Frun-pass%2Fptr_int_casts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0fe99e81defb29e7e6920f5307f4d940dd718fa/tests%2Frun-pass%2Fptr_int_casts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fptr_int_casts.rs?ref=b0fe99e81defb29e7e6920f5307f4d940dd718fa", "patch": "@@ -7,7 +7,7 @@ fn eq_ref<T>(x: &T, y: &T) -> bool {\n \n fn f() -> i32 { 42 }\n \n-fn main() {\n+fn ptr_int_casts() {\n     // int-ptr-int\n     assert_eq!(1 as *const i32 as usize, 1);\n     assert_eq!((1 as *const i32).wrapping_offset(4) as usize, 1 + 4*4);\n@@ -40,3 +40,29 @@ fn main() {\n     // involving types other than usize\n     assert_eq!((-1i32) as usize as *const i32 as usize, (-1i32) as usize);\n }\n+\n+fn ptr_int_ops() {\n+    let v = [1i16, 2];\n+    let x = &v[1] as *const i16 as usize;\n+    // arithmetic\n+    let _y = x + 4;\n+    let _y = 4 + x;\n+    let _y = x - 2;\n+    // bit-operations, covered by alignment\n+    assert_eq!(x & 1, 0);\n+    assert_eq!(x & 0, 0);\n+    assert_eq!(1 & (x+1), 1);\n+    let _y = !1 & x;\n+    let _y = !0 & x;\n+    let _y = x & !1;\n+    // remainder, covered by alignment\n+    assert_eq!(x % 2, 0);\n+    assert_eq!((x+1) % 2, 1);\n+    // remainder with 1 is always 0\n+    assert_eq!(x % 1, 0);\n+}\n+\n+fn main() {\n+    ptr_int_casts();\n+    ptr_int_ops();\n+}"}, {"sha": "9a29c2d30837d5bcea93399f410add26082d7b0e", "filename": "tests/run-pass/ptr_int_ops.rs", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5c823a1ec1eb3ff89bcbcb6c1fa8e1f8b24eb521/tests%2Frun-pass%2Fptr_int_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c823a1ec1eb3ff89bcbcb6c1fa8e1f8b24eb521/tests%2Frun-pass%2Fptr_int_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fptr_int_ops.rs?ref=5c823a1ec1eb3ff89bcbcb6c1fa8e1f8b24eb521", "patch": "@@ -1,20 +0,0 @@\n-fn main() {\n-    let v = [1i16, 2];\n-    let x = &v[1] as *const i16 as usize;\n-    // arithmetic\n-    let _y = x + 4;\n-    let _y = 4 + x;\n-    let _y = x - 2;\n-    // bit-operations, covered by alignment\n-    assert_eq!(x & 1, 0);\n-    assert_eq!(x & 0, 0);\n-    assert_eq!(1 & (x+1), 1);\n-    let _y = !1 & x;\n-    let _y = !0 & x;\n-    let _y = x & !1;\n-    // remainder, covered by alignment\n-    assert_eq!(x % 2, 0);\n-    assert_eq!((x+1) % 2, 1);\n-    // remainder with 1 is always 0\n-    assert_eq!(x % 1, 0);\n-}"}, {"sha": "f83720b547c02c487cd2f06779f24f3b32194664", "filename": "tests/run-pass/ptr_offset.rs", "status": "modified", "additions": 54, "deletions": 2, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/b0fe99e81defb29e7e6920f5307f4d940dd718fa/tests%2Frun-pass%2Fptr_offset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0fe99e81defb29e7e6920f5307f4d940dd718fa/tests%2Frun-pass%2Fptr_offset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fptr_offset.rs?ref=b0fe99e81defb29e7e6920f5307f4d940dd718fa", "patch": "@@ -1,6 +1,58 @@\n-fn f() -> i32 { 42 }\n+#![feature(ptr_offset_from)]\n+use std::{mem, ptr};\n \n fn main() {\n+    test_offset_from();\n+    test_vec_into_iter();\n+    ptr_arith_offset();\n+    ptr_arith_offset_overflow();\n+    ptr_offset();\n+}\n+\n+fn test_offset_from() { unsafe {\n+    let buf = [0u32; 4];\n+\n+    let x = buf.as_ptr() as *const u8;\n+    let y = x.offset(12);\n+\n+    assert_eq!(y.offset_from(x), 12);\n+    assert_eq!(x.offset_from(y), -12);\n+    assert_eq!((y as *const u32).offset_from(x as *const u32), 12/4);\n+    assert_eq!((x as *const u32).offset_from(y as *const u32), -12/4);\n+    \n+    let x = (((x as usize) * 2) / 2) as *const u8;\n+    assert_eq!(y.offset_from(x), 12);\n+    assert_eq!(x.offset_from(y), -12);\n+} }\n+\n+// This also internally uses offset_from.\n+fn test_vec_into_iter() {\n+    let v = Vec::<i32>::new();\n+    let i = v.into_iter();\n+    i.size_hint();\n+}\n+\n+fn ptr_arith_offset() {\n+    let v = [1i16, 2];\n+    let x = &v as *const [i16] as *const i16;\n+    let x = x.wrapping_offset(1);\n+    assert_eq!(unsafe { *x }, 2);\n+}\n+\n+fn ptr_arith_offset_overflow() {\n+    let v = [1i16, 2];\n+    let x = &mut ptr::null(); // going through memory as there are more sanity checks along that path\n+    *x = v.as_ptr().wrapping_offset(1); // ptr to the 2nd element\n+    // Adding 2*isize::max and then 1 is like substracting 1\n+    *x = x.wrapping_offset(isize::MAX);\n+    *x = x.wrapping_offset(isize::MAX);\n+    *x = x.wrapping_offset(1);\n+    assert_eq!(unsafe { **x }, 1);\n+}\n+\n+fn ptr_offset() {\n+    fn f() -> i32 { 42 }\n+\n     let v = [1i16, 2];\n     let x = &v as *const [i16; 2] as *const i16;\n     let x = unsafe { x.offset(1) };\n@@ -10,7 +62,7 @@ fn main() {\n     unsafe {\n         let p = f as fn() -> i32 as usize;\n         let x = (p as *mut u32).offset(0) as usize;\n-        let f: fn() -> i32 = std::mem::transmute(x);\n+        let f: fn() -> i32 = mem::transmute(x);\n         assert_eq!(f(), 42);\n     }\n }"}, {"sha": "92eb3f6e46e3c825976d6d85db1c38c460a6339e", "filename": "tests/run-pass/ptr_offset_from.rs", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/5c823a1ec1eb3ff89bcbcb6c1fa8e1f8b24eb521/tests%2Frun-pass%2Fptr_offset_from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c823a1ec1eb3ff89bcbcb6c1fa8e1f8b24eb521/tests%2Frun-pass%2Fptr_offset_from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fptr_offset_from.rs?ref=5c823a1ec1eb3ff89bcbcb6c1fa8e1f8b24eb521", "patch": "@@ -1,29 +0,0 @@\n-#![feature(ptr_offset_from)]\n-\n-fn test_raw() { unsafe {\n-    let buf = [0u32; 4];\n-\n-    let x = buf.as_ptr() as *const u8;\n-    let y = x.offset(12);\n-\n-    assert_eq!(y.offset_from(x), 12);\n-    assert_eq!(x.offset_from(y), -12);\n-    assert_eq!((y as *const u32).offset_from(x as *const u32), 12/4);\n-    assert_eq!((x as *const u32).offset_from(y as *const u32), -12/4);\n-    \n-    let x = (((x as usize) * 2) / 2) as *const u8;\n-    assert_eq!(y.offset_from(x), 12);\n-    assert_eq!(x.offset_from(y), -12);\n-} }\n-\n-// This also internally uses offset_from.\n-fn test_vec_into_iter() {\n-    let v = Vec::<i32>::new();\n-    let i = v.into_iter();\n-    i.size_hint();\n-}\n-\n-fn main() {\n-    test_raw();\n-    test_vec_into_iter();\n-}"}, {"sha": "4fbbb270957b39d6ee71ee70e18d64078d661c8c", "filename": "tests/run-pass/ptr_raw.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b0fe99e81defb29e7e6920f5307f4d940dd718fa/tests%2Frun-pass%2Fptr_raw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0fe99e81defb29e7e6920f5307f4d940dd718fa/tests%2Frun-pass%2Fptr_raw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fptr_raw.rs?ref=b0fe99e81defb29e7e6920f5307f4d940dd718fa", "previous_filename": "tests/run-pass/raw.rs"}]}