{"sha": "bf94aefd5aa9d9cbf24d5dd82280186777669eb1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmOTRhZWZkNWFhOWQ5Y2JmMjRkNWRkODIyODAxODY3Nzc2NjllYjE=", "commit": {"author": {"name": "NODA, Kai", "email": "nodakai@gmail.com", "date": "2014-11-05T16:40:08Z"}, "committer": {"name": "NODA, Kai", "email": "nodakai@gmail.com", "date": "2016-03-26T21:19:10Z"}, "message": "libstd/sys/*/net: very minor clean up of cvt*() utility functions.\n\nSigned-off-by: NODA, Kai <nodakai@gmail.com>", "tree": {"sha": "ca0ce7e8ea244737005837b3c51fe7b3c89ddc67", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca0ce7e8ea244737005837b3c51fe7b3c89ddc67"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf94aefd5aa9d9cbf24d5dd82280186777669eb1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf94aefd5aa9d9cbf24d5dd82280186777669eb1", "html_url": "https://github.com/rust-lang/rust/commit/bf94aefd5aa9d9cbf24d5dd82280186777669eb1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf94aefd5aa9d9cbf24d5dd82280186777669eb1/comments", "author": {"login": "nodakai", "id": 90726, "node_id": "MDQ6VXNlcjkwNzI2", "avatar_url": "https://avatars.githubusercontent.com/u/90726?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nodakai", "html_url": "https://github.com/nodakai", "followers_url": "https://api.github.com/users/nodakai/followers", "following_url": "https://api.github.com/users/nodakai/following{/other_user}", "gists_url": "https://api.github.com/users/nodakai/gists{/gist_id}", "starred_url": "https://api.github.com/users/nodakai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nodakai/subscriptions", "organizations_url": "https://api.github.com/users/nodakai/orgs", "repos_url": "https://api.github.com/users/nodakai/repos", "events_url": "https://api.github.com/users/nodakai/events{/privacy}", "received_events_url": "https://api.github.com/users/nodakai/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nodakai", "id": 90726, "node_id": "MDQ6VXNlcjkwNzI2", "avatar_url": "https://avatars.githubusercontent.com/u/90726?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nodakai", "html_url": "https://github.com/nodakai", "followers_url": "https://api.github.com/users/nodakai/followers", "following_url": "https://api.github.com/users/nodakai/following{/other_user}", "gists_url": "https://api.github.com/users/nodakai/gists{/gist_id}", "starred_url": "https://api.github.com/users/nodakai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nodakai/subscriptions", "organizations_url": "https://api.github.com/users/nodakai/orgs", "repos_url": "https://api.github.com/users/nodakai/repos", "events_url": "https://api.github.com/users/nodakai/events{/privacy}", "received_events_url": "https://api.github.com/users/nodakai/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "346d0d5175e7b236a7e3f41fd992afc61f148442", "url": "https://api.github.com/repos/rust-lang/rust/commits/346d0d5175e7b236a7e3f41fd992afc61f148442", "html_url": "https://github.com/rust-lang/rust/commit/346d0d5175e7b236a7e3f41fd992afc61f148442"}], "stats": {"total": 21, "additions": 11, "deletions": 10}, "files": [{"sha": "b05dcf42a3324636d3a5a8ae1acb3a9a6e5c8789", "filename": "src/libstd/sys/windows/net.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/bf94aefd5aa9d9cbf24d5dd82280186777669eb1/src%2Flibstd%2Fsys%2Fwindows%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf94aefd5aa9d9cbf24d5dd82280186777669eb1/src%2Flibstd%2Fsys%2Fwindows%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fnet.rs?ref=bf94aefd5aa9d9cbf24d5dd82280186777669eb1", "patch": "@@ -61,27 +61,28 @@ fn last_error() -> io::Error {\n }\n \n /// Checks if the signed integer is the Windows constant `SOCKET_ERROR` (-1)\n-/// and if so, returns the last error from the Windows socket interface. . This\n+/// and if so, returns the last error from the Windows socket interface. This\n /// function must be called before another call to the socket API is made.\n-pub fn cvt<T: One + Neg<Output=T> + PartialEq>(t: T) -> io::Result<T> {\n-    let one: T = T::one();\n-    if t == -one {\n+pub fn cvt<T: One + PartialEq + Neg<Output=T>>(t: T) -> io::Result<T> {\n+    if t == -T::one() {\n         Err(last_error())\n     } else {\n         Ok(t)\n     }\n }\n \n-/// Provides the functionality of `cvt` for the return values of `getaddrinfo`\n-/// and similar, meaning that they return an error if the return value is 0.\n+/// A variant of `cvt` for `getaddrinfo` which return 0 for a success.\n pub fn cvt_gai(err: c_int) -> io::Result<()> {\n-    if err == 0 { return Ok(()) }\n-    cvt(err).map(|_| ())\n+    if err == 0 {\n+        Ok(())\n+    } else {\n+        Err(last_error())\n+    }\n }\n \n-/// Provides the functionality of `cvt` for a closure.\n+/// Just to provide the same interface as sys/unix/net.rs\n pub fn cvt_r<T, F>(mut f: F) -> io::Result<T>\n-    where F: FnMut() -> T, T: One + Neg<Output=T> + PartialEq\n+    where T: One + PartialEq + Neg<Output=T>, F: FnMut() -> T\n {\n     cvt(f())\n }"}]}