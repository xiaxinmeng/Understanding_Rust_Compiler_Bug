{"sha": "6473909a1b1ff5c435d75d4df844c4b08dafcee9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0NzM5MDlhMWIxZmY1YzQzNWQ3NWQ0ZGY4NDRjNGIwOGRhZmNlZTk=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-09-25T17:59:24Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-09-25T17:59:24Z"}, "message": "Fix various places that were affected by adding core as dep of libc", "tree": {"sha": "f2f58d1dbb884d77ff45b4941beff3d8ed845402", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f2f58d1dbb884d77ff45b4941beff3d8ed845402"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6473909a1b1ff5c435d75d4df844c4b08dafcee9", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6473909a1b1ff5c435d75d4df844c4b08dafcee9", "html_url": "https://github.com/rust-lang/rust/commit/6473909a1b1ff5c435d75d4df844c4b08dafcee9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6473909a1b1ff5c435d75d4df844c4b08dafcee9/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca8e563bb738c4218faf8695f04b5d2b345549ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca8e563bb738c4218faf8695f04b5d2b345549ed", "html_url": "https://github.com/rust-lang/rust/commit/ca8e563bb738c4218faf8695f04b5d2b345549ed"}], "stats": {"total": 32, "additions": 15, "deletions": 17}, "files": [{"sha": "1e67c8a13e9dfd910a48f9a2c9ccdf603a0f6b79", "filename": "src/doc/guide-unsafe.md", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/6473909a1b1ff5c435d75d4df844c4b08dafcee9/src%2Fdoc%2Fguide-unsafe.md", "raw_url": "https://github.com/rust-lang/rust/raw/6473909a1b1ff5c435d75d4df844c4b08dafcee9/src%2Fdoc%2Fguide-unsafe.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-unsafe.md?ref=6473909a1b1ff5c435d75d4df844c4b08dafcee9", "patch": "@@ -466,7 +466,7 @@ fn start(_argc: int, _argv: *const *const u8) -> int {\n // provided by libstd.\n #[lang = \"stack_exhausted\"] extern fn stack_exhausted() {}\n #[lang = \"eh_personality\"] extern fn eh_personality() {}\n-#[lang = \"sized\"] trait Sized { }\n+#[lang = \"fail_fmt\"] fn fail_fmt() -> ! { loop {} }\n # // fn main() {} tricked you, rustdoc!\n ```\n \n@@ -489,32 +489,28 @@ pub extern fn main(argc: int, argv: *const *const u8) -> int {\n \n #[lang = \"stack_exhausted\"] extern fn stack_exhausted() {}\n #[lang = \"eh_personality\"] extern fn eh_personality() {}\n-#[lang = \"sized\"] trait Sized { }\n+#[lang = \"fail_fmt\"] fn fail_fmt() -> ! { loop {} }\n # // fn main() {} tricked you, rustdoc!\n ```\n \n \n The compiler currently makes a few assumptions about symbols which are available\n in the executable to call. Normally these functions are provided by the standard\n-xlibrary, but without it you must define your own.\n+library, but without it you must define your own.\n \n-The first of these two functions, `stack_exhausted`, is invoked whenever stack\n+The first of these three functions, `stack_exhausted`, is invoked whenever stack\n overflow is detected.  This function has a number of restrictions about how it\n can be called and what it must do, but if the stack limit register is not being\n maintained then a task always has an \"infinite stack\" and this function\n shouldn't get triggered.\n \n-The second of these two functions, `eh_personality`, is used by the failure\n-mechanisms of the compiler. This is often mapped to GCC's personality function\n-(see the [libstd implementation](std/rt/unwind/index.html) for more\n-information), but crates which do not trigger failure can be assured that this\n-function is never called.\n-\n-The final item in the example is a trait called `Sized`. This a trait\n-that represents data of a known static size: it is integral to the\n-Rust type system, and so the compiler expects the standard library to\n-provide it. Since you are not using the standard library, you have to\n-provide it yourself.\n+The second of these three functions, `eh_personality`, is used by the\n+failure mechanisms of the compiler. This is often mapped to GCC's\n+personality function (see the\n+[libstd implementation](std/rt/unwind/index.html) for more\n+information), but crates which do not trigger failure can be assured\n+that this function is never called. The final function, `fail_fmt`, is\n+also used by the failure mechanisms of the compiler.\n \n ## Using libcore\n \n@@ -694,7 +690,7 @@ fn main(argc: int, argv: *const *const u8) -> int {\n \n #[lang = \"stack_exhausted\"] extern fn stack_exhausted() {}\n #[lang = \"eh_personality\"] extern fn eh_personality() {}\n-#[lang = \"sized\"] trait Sized {}\n+#[lang = \"fail_fmt\"] fn fail_fmt() -> ! { loop {} }\n ```\n \n Note the use of `abort`: the `exchange_malloc` lang item is assumed to"}, {"sha": "721d16b4810c8f708b0b4fc33ffc3fba632a2394", "filename": "src/test/run-make/no-duplicate-libs/bar.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6473909a1b1ff5c435d75d4df844c4b08dafcee9/src%2Ftest%2Frun-make%2Fno-duplicate-libs%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6473909a1b1ff5c435d75d4df844c4b08dafcee9/src%2Ftest%2Frun-make%2Fno-duplicate-libs%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fno-duplicate-libs%2Fbar.rs?ref=6473909a1b1ff5c435d75d4df844c4b08dafcee9", "patch": "@@ -19,3 +19,4 @@ pub extern fn bar() {}\n \n #[lang = \"stack_exhausted\"] fn stack_exhausted() {}\n #[lang = \"eh_personality\"] fn eh_personality() {}\n+#[lang = \"fail_fmt\"] fn fail_fmt() -> ! { loop {} }"}, {"sha": "3382cc207997288494f09f77e0fade89e0ad9c8e", "filename": "src/test/run-make/no-duplicate-libs/foo.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6473909a1b1ff5c435d75d4df844c4b08dafcee9/src%2Ftest%2Frun-make%2Fno-duplicate-libs%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6473909a1b1ff5c435d75d4df844c4b08dafcee9/src%2Ftest%2Frun-make%2Fno-duplicate-libs%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fno-duplicate-libs%2Ffoo.rs?ref=6473909a1b1ff5c435d75d4df844c4b08dafcee9", "patch": "@@ -19,3 +19,4 @@ pub extern fn foo() {}\n \n #[lang = \"stack_exhausted\"] fn stack_exhausted() {}\n #[lang = \"eh_personality\"] fn eh_personality() {}\n+#[lang = \"fail_fmt\"] fn fail_fmt() -> ! { loop {} }"}, {"sha": "fdddac6bc375b1bc0aa6ab401008637f517a1410", "filename": "src/test/run-pass/smallest-hello-world.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6473909a1b1ff5c435d75d4df844c4b08dafcee9/src%2Ftest%2Frun-pass%2Fsmallest-hello-world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6473909a1b1ff5c435d75d4df844c4b08dafcee9/src%2Ftest%2Frun-pass%2Fsmallest-hello-world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsmallest-hello-world.rs?ref=6473909a1b1ff5c435d75d4df844c4b08dafcee9", "patch": "@@ -22,7 +22,7 @@ extern \"rust-intrinsic\" { fn transmute<T, U>(t: T) -> U; }\n \n #[lang = \"stack_exhausted\"] extern fn stack_exhausted() {}\n #[lang = \"eh_personality\"] extern fn eh_personality() {}\n-#[lang = \"sized\"] pub trait Sized {}\n+#[lang = \"fail_fmt\"] fn fail_fmt() -> ! { loop {} }\n \n #[start]\n #[no_split_stack]"}]}