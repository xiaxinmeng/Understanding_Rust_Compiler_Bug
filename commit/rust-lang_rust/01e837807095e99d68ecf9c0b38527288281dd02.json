{"sha": "01e837807095e99d68ecf9c0b38527288281dd02", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxZTgzNzgwNzA5NWU5OWQ2OGVjZjljMGIzODUyNzI4ODI4MWRkMDI=", "commit": {"author": {"name": "Jeremy Soller", "email": "jackpot51@gmail.com", "date": "2016-11-03T14:58:01Z"}, "committer": {"name": "Jeremy Soller", "email": "jackpot51@gmail.com", "date": "2016-11-03T14:58:01Z"}, "message": "Update to new sys requirements", "tree": {"sha": "e8d23cf4b9646f75a80df85d7b4021892bde7786", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8d23cf4b9646f75a80df85d7b4021892bde7786"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01e837807095e99d68ecf9c0b38527288281dd02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01e837807095e99d68ecf9c0b38527288281dd02", "html_url": "https://github.com/rust-lang/rust/commit/01e837807095e99d68ecf9c0b38527288281dd02", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01e837807095e99d68ecf9c0b38527288281dd02/comments", "author": {"login": "jackpot51", "id": 7741236, "node_id": "MDQ6VXNlcjc3NDEyMzY=", "avatar_url": "https://avatars.githubusercontent.com/u/7741236?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackpot51", "html_url": "https://github.com/jackpot51", "followers_url": "https://api.github.com/users/jackpot51/followers", "following_url": "https://api.github.com/users/jackpot51/following{/other_user}", "gists_url": "https://api.github.com/users/jackpot51/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackpot51/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackpot51/subscriptions", "organizations_url": "https://api.github.com/users/jackpot51/orgs", "repos_url": "https://api.github.com/users/jackpot51/repos", "events_url": "https://api.github.com/users/jackpot51/events{/privacy}", "received_events_url": "https://api.github.com/users/jackpot51/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackpot51", "id": 7741236, "node_id": "MDQ6VXNlcjc3NDEyMzY=", "avatar_url": "https://avatars.githubusercontent.com/u/7741236?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackpot51", "html_url": "https://github.com/jackpot51", "followers_url": "https://api.github.com/users/jackpot51/followers", "following_url": "https://api.github.com/users/jackpot51/following{/other_user}", "gists_url": "https://api.github.com/users/jackpot51/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackpot51/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackpot51/subscriptions", "organizations_url": "https://api.github.com/users/jackpot51/orgs", "repos_url": "https://api.github.com/users/jackpot51/repos", "events_url": "https://api.github.com/users/jackpot51/events{/privacy}", "received_events_url": "https://api.github.com/users/jackpot51/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74dc845c2de24924f143e345358103102c9f8ed5", "url": "https://api.github.com/repos/rust-lang/rust/commits/74dc845c2de24924f143e345358103102c9f8ed5", "html_url": "https://github.com/rust-lang/rust/commit/74dc845c2de24924f143e345358103102c9f8ed5"}], "stats": {"total": 123, "additions": 123, "deletions": 0}, "files": [{"sha": "e0a177308469941095d47d253dce8380a754a8e6", "filename": "src/libstd/sys/redox/fast_thread_local.rs", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/01e837807095e99d68ecf9c0b38527288281dd02/src%2Flibstd%2Fsys%2Fredox%2Ffast_thread_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01e837807095e99d68ecf9c0b38527288281dd02/src%2Flibstd%2Fsys%2Fredox%2Ffast_thread_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Ffast_thread_local.rs?ref=01e837807095e99d68ecf9c0b38527288281dd02", "patch": "@@ -0,0 +1,116 @@\n+// Copyright 2014-2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![cfg(target_thread_local)]\n+#![unstable(feature = \"thread_local_internals\", issue = \"0\")]\n+\n+use cell::{Cell, UnsafeCell};\n+use intrinsics;\n+use ptr;\n+\n+pub struct Key<T> {\n+    inner: UnsafeCell<Option<T>>,\n+\n+    // Metadata to keep track of the state of the destructor. Remember that\n+    // these variables are thread-local, not global.\n+    dtor_registered: Cell<bool>,\n+    dtor_running: Cell<bool>,\n+}\n+\n+unsafe impl<T> ::marker::Sync for Key<T> { }\n+\n+impl<T> Key<T> {\n+    pub const fn new() -> Key<T> {\n+        Key {\n+            inner: UnsafeCell::new(None),\n+            dtor_registered: Cell::new(false),\n+            dtor_running: Cell::new(false)\n+        }\n+    }\n+\n+    pub fn get(&'static self) -> Option<&'static UnsafeCell<Option<T>>> {\n+        unsafe {\n+            if intrinsics::needs_drop::<T>() && self.dtor_running.get() {\n+                return None\n+            }\n+            self.register_dtor();\n+        }\n+        Some(&self.inner)\n+    }\n+\n+    unsafe fn register_dtor(&self) {\n+        if !intrinsics::needs_drop::<T>() || self.dtor_registered.get() {\n+            return\n+        }\n+\n+        register_dtor(self as *const _ as *mut u8,\n+                      destroy_value::<T>);\n+        self.dtor_registered.set(true);\n+    }\n+}\n+\n+unsafe fn register_dtor(t: *mut u8, dtor: unsafe extern fn(*mut u8)) {\n+    // The fallback implementation uses a vanilla OS-based TLS key to track\n+    // the list of destructors that need to be run for this thread. The key\n+    // then has its own destructor which runs all the other destructors.\n+    //\n+    // The destructor for DTORS is a little special in that it has a `while`\n+    // loop to continuously drain the list of registered destructors. It\n+    // *should* be the case that this loop always terminates because we\n+    // provide the guarantee that a TLS key cannot be set after it is\n+    // flagged for destruction.\n+    use sys_common::thread_local as os;\n+\n+    static DTORS: os::StaticKey = os::StaticKey::new(Some(run_dtors));\n+    type List = Vec<(*mut u8, unsafe extern fn(*mut u8))>;\n+    if DTORS.get().is_null() {\n+        let v: Box<List> = box Vec::new();\n+        DTORS.set(Box::into_raw(v) as *mut u8);\n+    }\n+    let list: &mut List = &mut *(DTORS.get() as *mut List);\n+    list.push((t, dtor));\n+\n+    unsafe extern fn run_dtors(mut ptr: *mut u8) {\n+        while !ptr.is_null() {\n+            let list: Box<List> = Box::from_raw(ptr as *mut List);\n+            for &(ptr, dtor) in list.iter() {\n+                dtor(ptr);\n+            }\n+            ptr = DTORS.get();\n+            DTORS.set(ptr::null_mut());\n+        }\n+    }\n+}\n+\n+pub unsafe extern fn destroy_value<T>(ptr: *mut u8) {\n+    let ptr = ptr as *mut Key<T>;\n+    // Right before we run the user destructor be sure to flag the\n+    // destructor as running for this thread so calls to `get` will return\n+    // `None`.\n+    (*ptr).dtor_running.set(true);\n+\n+    // The OSX implementation of TLS apparently had an odd aspect to it\n+    // where the pointer we have may be overwritten while this destructor\n+    // is running. Specifically if a TLS destructor re-accesses TLS it may\n+    // trigger a re-initialization of all TLS variables, paving over at\n+    // least some destroyed ones with initial values.\n+    //\n+    // This means that if we drop a TLS value in place on OSX that we could\n+    // revert the value to its original state halfway through the\n+    // destructor, which would be bad!\n+    //\n+    // Hence, we use `ptr::read` on OSX (to move to a \"safe\" location)\n+    // instead of drop_in_place.\n+    if cfg!(target_os = \"macos\") {\n+        ptr::read((*ptr).inner.get());\n+    } else {\n+        ptr::drop_in_place((*ptr).inner.get());\n+    }\n+}"}, {"sha": "3f3d8f2c4f41b101499e2ff860970d9342e76b28", "filename": "src/libstd/sys/redox/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/01e837807095e99d68ecf9c0b38527288281dd02/src%2Flibstd%2Fsys%2Fredox%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01e837807095e99d68ecf9c0b38527288281dd02/src%2Flibstd%2Fsys%2Fredox%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fmod.rs?ref=01e837807095e99d68ecf9c0b38527288281dd02", "patch": "@@ -8,6 +8,7 @@ pub mod backtrace;\n pub mod condvar;\n pub mod env;\n pub mod ext;\n+pub mod fast_thread_local;\n pub mod fd;\n pub mod fs;\n pub mod memchr;\n@@ -76,3 +77,8 @@ pub fn decode_error_kind(errno: i32) -> ErrorKind {\n pub fn cvt(result: Result<usize, libc::Error>) -> io::Result<usize> {\n     result.map_err(|err| io::Error::from_raw_os_error(err.errno as i32))\n }\n+\n+/// On Redox, use an illegal instruction to abort\n+pub unsafe fn abort_internal() -> ! {\n+    ::core::intrinsics::abort();\n+}"}, {"sha": "f0a781b4383467e7c89cdb5e8a26b4cee41950f0", "filename": "src/libstd/sys/redox/stdio.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/01e837807095e99d68ecf9c0b38527288281dd02/src%2Flibstd%2Fsys%2Fredox%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01e837807095e99d68ecf9c0b38527288281dd02/src%2Flibstd%2Fsys%2Fredox%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fstdio.rs?ref=01e837807095e99d68ecf9c0b38527288281dd02", "patch": "@@ -67,3 +67,4 @@ impl io::Write for Stderr {\n }\n \n pub const EBADF_ERR: i32 = ::libc::EBADF;\n+pub const STDIN_BUF_SIZE: usize = ::sys_common::io::DEFAULT_BUF_SIZE;"}]}