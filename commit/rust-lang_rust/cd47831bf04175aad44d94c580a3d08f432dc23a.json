{"sha": "cd47831bf04175aad44d94c580a3d08f432dc23a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkNDc4MzFiZjA0MTc1YWFkNDRkOTRjNTgwYTNkMDhmNDMyZGMyM2E=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-08-10T13:01:32Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-08-14T04:06:46Z"}, "message": "syntax: gensym the injected std/core extern crates in the Rust 2018 edition.", "tree": {"sha": "32318b00cb0368caeda2e2df849bd0b86c28d40b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/32318b00cb0368caeda2e2df849bd0b86c28d40b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd47831bf04175aad44d94c580a3d08f432dc23a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd47831bf04175aad44d94c580a3d08f432dc23a", "html_url": "https://github.com/rust-lang/rust/commit/cd47831bf04175aad44d94c580a3d08f432dc23a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd47831bf04175aad44d94c580a3d08f432dc23a/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5218a5cf356b65e8fc1014cdf0e299c6c2ab6e01", "url": "https://api.github.com/repos/rust-lang/rust/commits/5218a5cf356b65e8fc1014cdf0e299c6c2ab6e01", "html_url": "https://github.com/rust-lang/rust/commit/5218a5cf356b65e8fc1014cdf0e299c6c2ab6e01"}], "stats": {"total": 43, "additions": 33, "deletions": 10}, "files": [{"sha": "ee98cc6cf927e1d31c9212340f75dd09d9e8f476", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd47831bf04175aad44d94c580a3d08f432dc23a/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd47831bf04175aad44d94c580a3d08f432dc23a/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=cd47831bf04175aad44d94c580a3d08f432dc23a", "patch": "@@ -865,7 +865,7 @@ where\n \n     krate = time(sess, \"crate injection\", || {\n         let alt_std_name = sess.opts.alt_std_name.as_ref().map(|s| &**s);\n-        syntax::std_inject::maybe_inject_crates_ref(krate, alt_std_name)\n+        syntax::std_inject::maybe_inject_crates_ref(krate, alt_std_name, sess.edition())\n     });\n \n     let mut addl_plugins = Some(addl_plugins);"}, {"sha": "626a610017d42949d26dd19df1f69d5d93f8b085", "filename": "src/libsyntax/std_inject.rs", "status": "modified", "additions": 30, "deletions": 7, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/cd47831bf04175aad44d94c580a3d08f432dc23a/src%2Flibsyntax%2Fstd_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd47831bf04175aad44d94c580a3d08f432dc23a/src%2Flibsyntax%2Fstd_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fstd_inject.rs?ref=cd47831bf04175aad44d94c580a3d08f432dc23a", "patch": "@@ -11,6 +11,8 @@\n use ast;\n use attr;\n use std::cell::Cell;\n+use std::iter;\n+use edition::Edition;\n use ext::hygiene::{Mark, SyntaxContext};\n use symbol::{Symbol, keywords};\n use syntax_pos::{DUMMY_SP, Span};\n@@ -43,7 +45,13 @@ thread_local! {\n     static INJECTED_CRATE_NAME: Cell<Option<&'static str>> = Cell::new(None);\n }\n \n-pub fn maybe_inject_crates_ref(mut krate: ast::Crate, alt_std_name: Option<&str>) -> ast::Crate {\n+pub fn maybe_inject_crates_ref(\n+    mut krate: ast::Crate,\n+    alt_std_name: Option<&str>,\n+    edition: Edition,\n+) -> ast::Crate {\n+    let rust_2018 = edition >= Edition::Edition2018;\n+\n     // the first name in this list is the crate name of the crate with the prelude\n     let names: &[&str] = if attr::contains_name(&krate.attrs, \"no_core\") {\n         return krate;\n@@ -58,14 +66,27 @@ pub fn maybe_inject_crates_ref(mut krate: ast::Crate, alt_std_name: Option<&str>\n     };\n \n     // .rev() to preserve ordering above in combination with insert(0, ...)\n-    for name in names.iter().rev() {\n+    let alt_std_name = alt_std_name.map(Symbol::intern);\n+    for orig_name in names.iter().rev() {\n+        let orig_name = Symbol::intern(orig_name);\n+        let mut rename = orig_name;\n+        // HACK(eddyb) gensym the injected crates on the Rust 2018 edition,\n+        // so they don't accidentally interfere with the new import paths.\n+        if rust_2018 {\n+            rename = orig_name.gensymed();\n+        }\n+        let orig_name = if rename != orig_name {\n+            Some(orig_name)\n+        } else {\n+            None\n+        };\n         krate.module.items.insert(0, P(ast::Item {\n             attrs: vec![attr::mk_attr_outer(DUMMY_SP,\n                                             attr::mk_attr_id(),\n                                             attr::mk_word_item(ast::Ident::from_str(\"macro_use\")))],\n             vis: dummy_spanned(ast::VisibilityKind::Inherited),\n-            node: ast::ItemKind::ExternCrate(alt_std_name.map(Symbol::intern)),\n-            ident: ast::Ident::from_str(name),\n+            node: ast::ItemKind::ExternCrate(alt_std_name.or(orig_name)),\n+            ident: ast::Ident::with_empty_ctxt(rename),\n             id: ast::DUMMY_NODE_ID,\n             span: DUMMY_SP,\n             tokens: None,\n@@ -91,9 +112,11 @@ pub fn maybe_inject_crates_ref(mut krate: ast::Crate, alt_std_name: Option<&str>\n         vis: respan(span.shrink_to_lo(), ast::VisibilityKind::Inherited),\n         node: ast::ItemKind::Use(P(ast::UseTree {\n             prefix: ast::Path {\n-                segments: [name, \"prelude\", \"v1\"].into_iter().map(|name| {\n-                    ast::PathSegment::from_ident(ast::Ident::from_str(name))\n-                }).collect(),\n+                segments: iter::once(keywords::CrateRoot.ident())\n+                    .chain(\n+                        [name, \"prelude\", \"v1\"].iter().cloned()\n+                            .map(ast::Ident::from_str)\n+                    ).map(ast::PathSegment::from_ident).collect(),\n                 span,\n             },\n             kind: ast::UseTreeKind::Glob,"}, {"sha": "b8d920754ad7922846dcb55caa79f80fa2f7d1b7", "filename": "src/test/pretty/cast-lt.pp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd47831bf04175aad44d94c580a3d08f432dc23a/src%2Ftest%2Fpretty%2Fcast-lt.pp", "raw_url": "https://github.com/rust-lang/rust/raw/cd47831bf04175aad44d94c580a3d08f432dc23a/src%2Ftest%2Fpretty%2Fcast-lt.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fcast-lt.pp?ref=cd47831bf04175aad44d94c580a3d08f432dc23a", "patch": "@@ -1,7 +1,7 @@\n #![feature(prelude_import)]\n #![no_std]\n #[prelude_import]\n-use std::prelude::v1::*;\n+use ::std::prelude::v1::*;\n #[macro_use]\n extern crate std;\n // Copyright 2017 The Rust Project Developers. See the COPYRIGHT"}, {"sha": "5f42b86c82a81e3c3984675c28a10c6431c81b7a", "filename": "src/test/pretty/issue-4264.pp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd47831bf04175aad44d94c580a3d08f432dc23a/src%2Ftest%2Fpretty%2Fissue-4264.pp", "raw_url": "https://github.com/rust-lang/rust/raw/cd47831bf04175aad44d94c580a3d08f432dc23a/src%2Ftest%2Fpretty%2Fissue-4264.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fissue-4264.pp?ref=cd47831bf04175aad44d94c580a3d08f432dc23a", "patch": "@@ -1,5 +1,5 @@\n #[prelude_import]\n-use std::prelude::v1::*;\n+use ::std::prelude::v1::*;\n #[macro_use]\n extern crate std;\n // Copyright 2014 The Rust Project Developers. See the COPYRIGHT"}]}