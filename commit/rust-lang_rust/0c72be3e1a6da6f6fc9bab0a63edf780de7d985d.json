{"sha": "0c72be3e1a6da6f6fc9bab0a63edf780de7d985d", "node_id": "C_kwDOAAsO6NoAKDBjNzJiZTNlMWE2ZGE2ZjZmYzliYWIwYTYzZWRmNzgwZGU3ZDk4NWQ", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2022-06-13T08:29:55Z"}, "committer": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2022-07-05T14:06:31Z"}, "message": "core::any: replace some unstable generic types with impl Trait\n\nSigned-off-by: Nick Cameron <nrc@ncameron.org>", "tree": {"sha": "46d0544f64b6008a5ca0af660a998f46ebddbd55", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46d0544f64b6008a5ca0af660a998f46ebddbd55"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c72be3e1a6da6f6fc9bab0a63edf780de7d985d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c72be3e1a6da6f6fc9bab0a63edf780de7d985d", "html_url": "https://github.com/rust-lang/rust/commit/0c72be3e1a6da6f6fc9bab0a63edf780de7d985d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c72be3e1a6da6f6fc9bab0a63edf780de7d985d/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4008dd8c6d92a0b81528fd138c6130d784e5958e", "url": "https://api.github.com/repos/rust-lang/rust/commits/4008dd8c6d92a0b81528fd138c6130d784e5958e", "html_url": "https://github.com/rust-lang/rust/commit/4008dd8c6d92a0b81528fd138c6130d784e5958e"}], "stats": {"total": 57, "additions": 26, "deletions": 31}, "files": [{"sha": "f20c497a183b2c07a246170116b4ea6651df9fd3", "filename": "library/core/src/any.rs", "status": "modified", "additions": 15, "deletions": 20, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/0c72be3e1a6da6f6fc9bab0a63edf780de7d985d/library%2Fcore%2Fsrc%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c72be3e1a6da6f6fc9bab0a63edf780de7d985d/library%2Fcore%2Fsrc%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fany.rs?ref=0c72be3e1a6da6f6fc9bab0a63edf780de7d985d", "patch": "@@ -125,7 +125,7 @@\n //! impl dyn MyTrait + '_ {\n //!     /// Get a reference to a field of the implementing struct.\n //!     pub fn get_context_by_ref<T: ?Sized + 'static>(&self) -> Option<&T> {\n-//!         request_ref::<T, _>(self)\n+//!         request_ref::<T>(self)\n //!     }\n //! }\n //!\n@@ -799,7 +799,7 @@ pub trait Provider {\n     /// impl Provider for SomeConcreteType {\n     ///     fn provide<'a>(&'a self, demand: &mut Demand<'a>) {\n     ///         demand.provide_ref::<str>(&self.field)\n-    ///             .provide_value::<i32, _>(|| self.num_field);\n+    ///             .provide_value::<i32>(|| self.num_field);\n     ///     }\n     /// }\n     /// ```\n@@ -817,17 +817,16 @@ pub trait Provider {\n /// # #![feature(provide_any)]\n /// use std::any::{Provider, request_value};\n ///\n-/// fn get_string<P: Provider>(provider: &P) -> String {\n-///     request_value::<String, _>(provider).unwrap()\n+/// fn get_string(provider: &impl Provider) -> String {\n+///     request_value::<String>(provider).unwrap()\n /// }\n /// ```\n #[unstable(feature = \"provide_any\", issue = \"96024\")]\n-pub fn request_value<'a, T, P>(provider: &'a P) -> Option<T>\n+pub fn request_value<'a, T>(provider: &'a (impl Provider + ?Sized)) -> Option<T>\n where\n     T: 'static,\n-    P: Provider + ?Sized,\n {\n-    request_by_type_tag::<'a, tags::Value<T>, P>(provider)\n+    request_by_type_tag::<'a, tags::Value<T>>(provider)\n }\n \n /// Request a reference from the `Provider`.\n@@ -840,24 +839,22 @@ where\n /// # #![feature(provide_any)]\n /// use std::any::{Provider, request_ref};\n ///\n-/// fn get_str<P: Provider>(provider: &P) -> &str {\n-///     request_ref::<str, _>(provider).unwrap()\n+/// fn get_str(provider: &impl Provider) -> &str {\n+///     request_ref::<str>(provider).unwrap()\n /// }\n /// ```\n #[unstable(feature = \"provide_any\", issue = \"96024\")]\n-pub fn request_ref<'a, T, P>(provider: &'a P) -> Option<&'a T>\n+pub fn request_ref<'a, T>(provider: &'a (impl Provider + ?Sized)) -> Option<&'a T>\n where\n     T: 'static + ?Sized,\n-    P: Provider + ?Sized,\n {\n-    request_by_type_tag::<'a, tags::Ref<tags::MaybeSizedValue<T>>, P>(provider)\n+    request_by_type_tag::<'a, tags::Ref<tags::MaybeSizedValue<T>>>(provider)\n }\n \n /// Request a specific value by tag from the `Provider`.\n-fn request_by_type_tag<'a, I, P>(provider: &'a P) -> Option<I::Reified>\n+fn request_by_type_tag<'a, I>(provider: &'a (impl Provider + ?Sized)) -> Option<I::Reified>\n where\n     I: tags::Type<'a>,\n-    P: Provider + ?Sized,\n {\n     let mut tagged = TaggedOption::<'a, I>(None);\n     provider.provide(tagged.as_demand());\n@@ -896,17 +893,16 @@ impl<'a> Demand<'a> {\n     ///\n     /// impl Provider for SomeConcreteType {\n     ///     fn provide<'a>(&'a self, demand: &mut Demand<'a>) {\n-    ///         demand.provide_value::<String, _>(|| self.field.clone());\n+    ///         demand.provide_value::<String>(|| self.field.clone());\n     ///     }\n     /// }\n     /// ```\n     #[unstable(feature = \"provide_any\", issue = \"96024\")]\n-    pub fn provide_value<T, F>(&mut self, fulfil: F) -> &mut Self\n+    pub fn provide_value<T>(&mut self, fulfil: impl FnOnce() -> T) -> &mut Self\n     where\n         T: 'static,\n-        F: FnOnce() -> T,\n     {\n-        self.provide_with::<tags::Value<T>, F>(fulfil)\n+        self.provide_with::<tags::Value<T>>(fulfil)\n     }\n \n     /// Provide a reference, note that the referee type must be bounded by `'static`,\n@@ -944,10 +940,9 @@ impl<'a> Demand<'a> {\n     }\n \n     /// Provide a value with the given `Type` tag, using a closure to prevent unnecessary work.\n-    fn provide_with<I, F>(&mut self, fulfil: F) -> &mut Self\n+    fn provide_with<I>(&mut self, fulfil: impl FnOnce() -> I::Reified) -> &mut Self\n     where\n         I: tags::Type<'a>,\n-        F: FnOnce() -> I::Reified,\n     {\n         if let Some(res @ TaggedOption(None)) = self.0.downcast_mut::<I>() {\n             res.0 = Some(fulfil());"}, {"sha": "8ed0c88808fe27fc47d36b4734dae75a0401e11b", "filename": "library/core/tests/any.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0c72be3e1a6da6f6fc9bab0a63edf780de7d985d/library%2Fcore%2Ftests%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c72be3e1a6da6f6fc9bab0a63edf780de7d985d/library%2Fcore%2Ftests%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fany.rs?ref=0c72be3e1a6da6f6fc9bab0a63edf780de7d985d", "patch": "@@ -142,7 +142,7 @@ impl Provider for SomeConcreteType {\n         demand\n             .provide_ref::<String>(&self.some_string)\n             .provide_ref::<str>(&self.some_string)\n-            .provide_value::<String, _>(|| \"bye\".to_owned());\n+            .provide_value::<String>(|| \"bye\".to_owned());\n     }\n }\n \n@@ -151,29 +151,29 @@ impl Provider for SomeConcreteType {\n fn test_provider() {\n     let obj: &dyn Provider = &SomeConcreteType { some_string: \"hello\".to_owned() };\n \n-    assert_eq!(&**request_ref::<String, _>(obj).unwrap(), \"hello\");\n-    assert_eq!(&*request_value::<String, _>(obj).unwrap(), \"bye\");\n-    assert_eq!(request_value::<u8, _>(obj), None);\n+    assert_eq!(&**request_ref::<String>(obj).unwrap(), \"hello\");\n+    assert_eq!(&*request_value::<String>(obj).unwrap(), \"bye\");\n+    assert_eq!(request_value::<u8>(obj), None);\n }\n \n // Test the provide and request mechanisms with a boxed trait object.\n #[test]\n fn test_provider_boxed() {\n     let obj: Box<dyn Provider> = Box::new(SomeConcreteType { some_string: \"hello\".to_owned() });\n \n-    assert_eq!(&**request_ref::<String, _>(&*obj).unwrap(), \"hello\");\n-    assert_eq!(&*request_value::<String, _>(&*obj).unwrap(), \"bye\");\n-    assert_eq!(request_value::<u8, _>(&*obj), None);\n+    assert_eq!(&**request_ref::<String>(&*obj).unwrap(), \"hello\");\n+    assert_eq!(&*request_value::<String>(&*obj).unwrap(), \"bye\");\n+    assert_eq!(request_value::<u8>(&*obj), None);\n }\n \n // Test the provide and request mechanisms with a concrete object.\n #[test]\n fn test_provider_concrete() {\n     let obj = SomeConcreteType { some_string: \"hello\".to_owned() };\n \n-    assert_eq!(&**request_ref::<String, _>(&obj).unwrap(), \"hello\");\n-    assert_eq!(&*request_value::<String, _>(&obj).unwrap(), \"bye\");\n-    assert_eq!(request_value::<u8, _>(&obj), None);\n+    assert_eq!(&**request_ref::<String>(&obj).unwrap(), \"hello\");\n+    assert_eq!(&*request_value::<String>(&obj).unwrap(), \"bye\");\n+    assert_eq!(request_value::<u8>(&obj), None);\n }\n \n trait OtherTrait: Provider {}\n@@ -182,7 +182,7 @@ impl OtherTrait for SomeConcreteType {}\n \n impl dyn OtherTrait {\n     fn get_ref<T: 'static + ?Sized>(&self) -> Option<&T> {\n-        request_ref::<T, _>(self)\n+        request_ref::<T>(self)\n     }\n }\n "}]}