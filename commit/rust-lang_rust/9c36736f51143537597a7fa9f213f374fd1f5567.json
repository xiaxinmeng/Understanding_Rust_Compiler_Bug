{"sha": "9c36736f51143537597a7fa9f213f374fd1f5567", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljMzY3MzZmNTExNDM1Mzc1OTdhN2ZhOWYyMTNmMzc0ZmQxZjU1Njc=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2016-02-21T02:16:41Z"}, "committer": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2016-02-21T02:16:41Z"}, "message": "Merge pull request #692 from mcarton/format\n\nLint about `format!(\"string lit\")` with no argument", "tree": {"sha": "a47289a0d1c23cf7c5f5bbe63e2bd9f8d1f9517b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a47289a0d1c23cf7c5f5bbe63e2bd9f8d1f9517b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c36736f51143537597a7fa9f213f374fd1f5567", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c36736f51143537597a7fa9f213f374fd1f5567", "html_url": "https://github.com/rust-lang/rust/commit/9c36736f51143537597a7fa9f213f374fd1f5567", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c36736f51143537597a7fa9f213f374fd1f5567/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "78b31c61bdf7a95a1b8bbb7ccf478f5ccd220f69", "url": "https://api.github.com/repos/rust-lang/rust/commits/78b31c61bdf7a95a1b8bbb7ccf478f5ccd220f69", "html_url": "https://github.com/rust-lang/rust/commit/78b31c61bdf7a95a1b8bbb7ccf478f5ccd220f69"}, {"sha": "1a64a4890c56f23039fbb5df3c643d6c060d7660", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a64a4890c56f23039fbb5df3c643d6c060d7660", "html_url": "https://github.com/rust-lang/rust/commit/1a64a4890c56f23039fbb5df3c643d6c060d7660"}], "stats": {"total": 261, "additions": 204, "deletions": 57}, "files": [{"sha": "62d6695b24d2c8b3e0bb33c7666612325fe16610", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9c36736f51143537597a7fa9f213f374fd1f5567/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/9c36736f51143537597a7fa9f213f374fd1f5567/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=9c36736f51143537597a7fa9f213f374fd1f5567", "patch": "@@ -8,7 +8,7 @@ A collection of lints to catch common mistakes and improve your Rust code.\n [Jump to usage instructions](#usage)\n \n ##Lints\n-There are 122 lints included in this crate:\n+There are 123 lints included in this crate:\n \n name                                                                                                           | default | meaning\n ---------------------------------------------------------------------------------------------------------------|---------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n@@ -126,6 +126,7 @@ name\n [unused_lifetimes](https://github.com/Manishearth/rust-clippy/wiki#unused_lifetimes)                           | warn    | unused lifetimes in function definitions\n [use_debug](https://github.com/Manishearth/rust-clippy/wiki#use_debug)                                         | allow   | use `Debug`-based formatting\n [used_underscore_binding](https://github.com/Manishearth/rust-clippy/wiki#used_underscore_binding)             | warn    | using a binding which is prefixed with an underscore\n+[useless_format](https://github.com/Manishearth/rust-clippy/wiki#useless_format)                               | warn    | useless use of `format!`\n [useless_transmute](https://github.com/Manishearth/rust-clippy/wiki#useless_transmute)                         | warn    | transmutes that have the same to and from types\n [useless_vec](https://github.com/Manishearth/rust-clippy/wiki#useless_vec)                                     | warn    | useless `vec!`\n [while_let_loop](https://github.com/Manishearth/rust-clippy/wiki#while_let_loop)                               | warn    | `loop { if let { ... } else break }` can be written as a `while let` loop"}, {"sha": "663d39cdbb2ff5ca9d4b611590e8df71de6cf30e", "filename": "src/collapsible_if.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9c36736f51143537597a7fa9f213f374fd1f5567/src%2Fcollapsible_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c36736f51143537597a7fa9f213f374fd1f5567/src%2Fcollapsible_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcollapsible_if.rs?ref=9c36736f51143537597a7fa9f213f374fd1f5567", "patch": "@@ -14,6 +14,7 @@\n \n use rustc::lint::*;\n use rustc_front::hir::*;\n+use std::borrow::Cow;\n use syntax::codemap::Spanned;\n \n use utils::{in_macro, snippet, snippet_block, span_lint_and_then};\n@@ -95,11 +96,11 @@ fn requires_brackets(e: &Expr) -> bool {\n     }\n }\n \n-fn check_to_string(cx: &LateContext, e: &Expr) -> String {\n+fn check_to_string(cx: &LateContext, e: &Expr) -> Cow<'static, str> {\n     if requires_brackets(e) {\n-        format!(\"({})\", snippet(cx, e.span, \"..\"))\n+        format!(\"({})\", snippet(cx, e.span, \"..\")).into()\n     } else {\n-        format!(\"{}\", snippet(cx, e.span, \"..\"))\n+        snippet(cx, e.span, \"..\")\n     }\n }\n "}, {"sha": "901cd3f7a9bd7b4fed7fc60143ad51f0f620bd80", "filename": "src/format.rs", "status": "added", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/9c36736f51143537597a7fa9f213f374fd1f5567/src%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c36736f51143537597a7fa9f213f374fd1f5567/src%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fformat.rs?ref=9c36736f51143537597a7fa9f213f374fd1f5567", "patch": "@@ -0,0 +1,112 @@\n+use rustc::front::map::Node::NodeItem;\n+use rustc::lint::*;\n+use rustc_front::hir::*;\n+use syntax::ast::LitKind;\n+use utils::{DISPLAY_FMT_METHOD_PATH, FMT_ARGUMENTS_NEWV1_PATH};\n+use utils::{is_expn_of, match_path, span_lint};\n+\n+/// **What it does:** This lints about use of `format!(\"string literal with no argument\")`.\n+///\n+/// **Why is this bad?** There is no point of doing that. If you want a `String` you can use\n+/// `to_owned` on the string literal. The even worse `&format!(\"foo\")` is often encountered in the\n+/// wild.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:** `format!(\"foo\")`\n+declare_lint! {\n+    pub USELESS_FORMAT,\n+    Warn,\n+    \"useless use of `format!`\"\n+}\n+\n+#[derive(Copy, Clone, Debug)]\n+pub struct FormatMacLint;\n+\n+impl LintPass for FormatMacLint {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array![USELESS_FORMAT]\n+    }\n+}\n+\n+impl LateLintPass for FormatMacLint {\n+    fn check_expr(&mut self, cx: &LateContext, expr: &Expr) {\n+        if let Some(span) = is_expn_of(cx, expr.span, \"format\") {\n+            match expr.node {\n+                // `format!(\"{}\", foo)` expansion\n+                ExprCall(ref fun, ref args) => {\n+                    if_let_chain!{[\n+                        let ExprPath(_, ref path) = fun.node,\n+                        args.len() == 2,\n+                        match_path(path, &FMT_ARGUMENTS_NEWV1_PATH),\n+                        // ensure the format string is `\"{..}\"` with only one argument and no text\n+                        check_static_str(cx, &args[0]),\n+                        // ensure the format argument is `{}` ie. Display with no fancy option\n+                        check_arg_is_display(&args[1])\n+                    ], {\n+                        span_lint(cx, USELESS_FORMAT, span, \"useless use of `format!`\");\n+                    }}\n+                }\n+                // `format!(\"foo\")` expansion contains `match () { () => [], }`\n+                ExprMatch(ref matchee, _, _) => {\n+                    if let ExprTup(ref tup) = matchee.node {\n+                        if tup.is_empty() {\n+                            span_lint(cx, USELESS_FORMAT, span, \"useless use of `format!`\");\n+                        }\n+                    }\n+                }\n+                _ => (),\n+            }\n+        }\n+    }\n+}\n+\n+/// Checks if the expressions matches\n+/// ```\n+/// { static __STATIC_FMTSTR: &[\"\"] = _; __STATIC_FMTSTR }\n+/// ```\n+fn check_static_str(cx: &LateContext, expr: &Expr) -> bool {\n+    if_let_chain! {[\n+        let ExprBlock(ref block) = expr.node,\n+        block.stmts.len() == 1,\n+        let StmtDecl(ref decl, _) = block.stmts[0].node,\n+        let DeclItem(ref decl) = decl.node,\n+        let Some(NodeItem(decl)) = cx.tcx.map.find(decl.id),\n+        decl.name.as_str() == \"__STATIC_FMTSTR\",\n+        let ItemStatic(_, _, ref expr) = decl.node,\n+        let ExprAddrOf(_, ref expr) = expr.node, // &[\"\"]\n+        let ExprVec(ref expr) = expr.node,\n+        expr.len() == 1,\n+        let ExprLit(ref lit) = expr[0].node,\n+        let LitKind::Str(ref lit, _) = lit.node,\n+        lit.is_empty()\n+    ], {\n+        return true;\n+    }}\n+\n+    false\n+}\n+\n+/// Checks if the expressions matches\n+/// ```\n+/// &match (&42,) {\n+///     (__arg0,) => [::std::fmt::ArgumentV1::new(__arg0, ::std::fmt::Display::fmt)],\n+/// })\n+/// ```\n+fn check_arg_is_display(expr: &Expr) -> bool {\n+    if_let_chain! {[\n+        let ExprAddrOf(_, ref expr) = expr.node,\n+        let ExprMatch(_, ref arms, _) = expr.node,\n+        arms.len() == 1,\n+        let ExprVec(ref exprs) = arms[0].body.node,\n+        exprs.len() == 1,\n+        let ExprCall(_, ref args) = exprs[0].node,\n+        args.len() == 2,\n+        let ExprPath(None, ref path) = args[1].node,\n+        match_path(path, &DISPLAY_FMT_METHOD_PATH)\n+    ], {\n+        return true;\n+    }}\n+\n+    false\n+}"}, {"sha": "8348eb09834b29855991ba5dae3c1dfd1034db53", "filename": "src/lib.rs", "status": "modified", "additions": 39, "deletions": 33, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/9c36736f51143537597a7fa9f213f374fd1f5567/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c36736f51143537597a7fa9f213f374fd1f5567/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=9c36736f51143537597a7fa9f213f374fd1f5567", "patch": "@@ -35,59 +35,63 @@ extern crate rustc_plugin;\n \n use rustc_plugin::Registry;\n \n+pub mod consts;\n #[macro_use]\n pub mod utils;\n+\n+// begin lints modules, do not remove this comment, it\u2019s used in `update_lints`\n+pub mod approx_const;\n+pub mod array_indexing;\n+pub mod attrs;\n+pub mod bit_mask;\n+pub mod block_in_if_condition;\n+pub mod collapsible_if;\n pub mod copies;\n-pub mod consts;\n-pub mod types;\n-pub mod misc;\n+pub mod cyclomatic_complexity;\n+pub mod derive;\n+pub mod drop_ref;\n+pub mod entry;\n pub mod enum_glob_use;\n+pub mod enum_variants;\n pub mod eq_op;\n-pub mod bit_mask;\n-pub mod ptr_arg;\n-pub mod needless_bool;\n-pub mod approx_const;\n+pub mod escape;\n pub mod eta_reduction;\n-pub mod enum_variants;\n+pub mod format;\n pub mod identity_op;\n pub mod items_after_statements;\n-pub mod minmax;\n-pub mod mut_mut;\n-pub mod mut_reference;\n pub mod len_zero;\n-pub mod attrs;\n-pub mod collapsible_if;\n-pub mod block_in_if_condition;\n-pub mod unicode;\n-pub mod shadow;\n-pub mod strings;\n-pub mod methods;\n-pub mod returns;\n pub mod lifetimes;\n pub mod loops;\n-pub mod ranges;\n pub mod map_clone;\n pub mod matches;\n-pub mod precedence;\n+pub mod methods;\n+pub mod minmax;\n+pub mod misc;\n+pub mod misc_early;\n+pub mod mut_mut;\n+pub mod mut_reference;\n pub mod mutex_atomic;\n-pub mod zero_div_zero;\n-pub mod open_options;\n+pub mod needless_bool;\n pub mod needless_features;\n pub mod needless_update;\n pub mod no_effect;\n-pub mod temporary_assignment;\n-pub mod transmute;\n-pub mod cyclomatic_complexity;\n-pub mod escape;\n-pub mod entry;\n-pub mod misc_early;\n-pub mod array_indexing;\n+pub mod open_options;\n pub mod panic;\n-pub mod derive;\n+pub mod precedence;\n pub mod print;\n-pub mod vec;\n-pub mod drop_ref;\n+pub mod ptr_arg;\n+pub mod ranges;\n pub mod regex;\n+pub mod returns;\n+pub mod shadow;\n+pub mod strings;\n+pub mod temporary_assignment;\n+pub mod transmute;\n+pub mod types;\n+pub mod unicode;\n+pub mod vec;\n+pub mod zero_div_zero;\n+// end lints modules, do not remove this comment, it\u2019s used in `update_lints`\n \n mod reexport {\n     pub use syntax::ast::{Name, NodeId};\n@@ -160,6 +164,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_late_lint_pass(box types::AbsurdExtremeComparisons);\n     reg.register_late_lint_pass(box regex::RegexPass::default());\n     reg.register_late_lint_pass(box copies::CopyAndPaste);\n+    reg.register_late_lint_pass(box format::FormatMacLint);\n \n     reg.register_lint_group(\"clippy_pedantic\", vec![\n         enum_glob_use::ENUM_GLOB_USE,\n@@ -206,6 +211,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n         eq_op::EQ_OP,\n         escape::BOXED_LOCAL,\n         eta_reduction::REDUNDANT_CLOSURE,\n+        format::USELESS_FORMAT,\n         identity_op::IDENTITY_OP,\n         items_after_statements::ITEMS_AFTER_STATEMENTS,\n         len_zero::LEN_WITHOUT_IS_EMPTY,"}, {"sha": "15f0e51f36c196139e948c311f0aaab0c5cd6c4c", "filename": "src/loops.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9c36736f51143537597a7fa9f213f374fd1f5567/src%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c36736f51143537597a7fa9f213f374fd1f5567/src%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Floops.rs?ref=9c36736f51143537597a7fa9f213f374fd1f5567", "patch": "@@ -245,13 +245,13 @@ impl LateLintPass for LoopsPass {\n                     let mut other_stuff = block.stmts\n                                                .iter()\n                                                .skip(1)\n-                                               .map(|stmt| format!(\"{}\", snippet(cx, stmt.span, \"..\")))\n-                                               .collect::<Vec<String>>();\n+                                               .map(|stmt| snippet(cx, stmt.span, \"..\"))\n+                                               .collect::<Vec<Cow<_>>>();\n                     if inner_stmt_expr.is_some() {\n                         // if we have a statement which has a match,\n                         if let Some(ref expr) = block.expr {\n                             // then collect the expression (without semicolon) below it\n-                            other_stuff.push(format!(\"{}\", snippet(cx, expr.span, \"..\")));\n+                            other_stuff.push(snippet(cx, expr.span, \"..\"));\n                         }\n                     }\n \n@@ -317,8 +317,8 @@ impl LateLintPass for LoopsPass {\n                     span_lint(cx,\n                               UNUSED_COLLECT,\n                               expr.span,\n-                              &format!(\"you are collect()ing an iterator and throwing away the result. Consider \\\n-                                        using an explicit for loop to exhaust the iterator\"));\n+                              \"you are collect()ing an iterator and throwing away the result. \\\n+                               Consider using an explicit for loop to exhaust the iterator\");\n                 }\n             }\n         }"}, {"sha": "c67e2eade14da39d1fb98a67a8338f41e59bf7f9", "filename": "src/methods.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9c36736f51143537597a7fa9f213f374fd1f5567/src%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c36736f51143537597a7fa9f213f374fd1f5567/src%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmethods.rs?ref=9c36736f51143537597a7fa9f213f374fd1f5567", "patch": "@@ -530,10 +530,10 @@ fn lint_or_fun_call(cx: &LateContext, expr: &Expr, name: &str, args: &[P<Expr>])\n             return;\n         }\n \n-        let sugg = match (fn_has_arguments, !or_has_args) {\n-            (true, _) => format!(\"|_| {}\", snippet(cx, arg.span, \"..\")),\n-            (false, false) => format!(\"|| {}\", snippet(cx, arg.span, \"..\")),\n-            (false, true) => format!(\"{}\", snippet(cx, fun.span, \"..\")),\n+        let sugg: Cow<_> = match (fn_has_arguments, !or_has_args) {\n+            (true, _) => format!(\"|_| {}\", snippet(cx, arg.span, \"..\")).into(),\n+            (false, false) => format!(\"|| {}\", snippet(cx, arg.span, \"..\")).into(),\n+            (false, true) => snippet(cx, fun.span, \"..\"),\n         };\n \n         span_lint(cx, OR_FUN_CALL, span, &format!(\"use of `{}` followed by a function call\", name))\n@@ -589,7 +589,7 @@ fn lint_extend(cx: &LateContext, expr: &Expr, args: &MethodArgs) {\n         span_lint(cx,\n                   EXTEND_FROM_SLICE,\n                   expr.span,\n-                  &format!(\"use of `extend` to extend a Vec by a slice\"))\n+                  \"use of `extend` to extend a Vec by a slice\")\n             .span_suggestion(expr.span,\n                              \"try this\",\n                              format!(\"{}.extend_from_slice({}{})\","}, {"sha": "bbed9ad4996bc1b19f2127565bcc70fea0740b00", "filename": "src/misc_early.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9c36736f51143537597a7fa9f213f374fd1f5567/src%2Fmisc_early.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c36736f51143537597a7fa9f213f374fd1f5567/src%2Fmisc_early.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmisc_early.rs?ref=9c36736f51143537597a7fa9f213f374fd1f5567", "patch": "@@ -45,10 +45,7 @@ impl EarlyLintPass for MiscEarly {\n     fn check_pat(&mut self, cx: &EarlyContext, pat: &Pat) {\n         if let PatKind::Struct(ref npat, ref pfields, _) = pat.node {\n             let mut wilds = 0;\n-            let type_name = match npat.segments.last() {\n-                Some(elem) => format!(\"{}\", elem.identifier.name),\n-                None => String::new(),\n-            };\n+            let type_name = npat.segments.last().expect(\"A path must have at least one segment\").identifier.name;\n \n             for field in pfields {\n                 if field.node.pat.node == PatKind::Wild {"}, {"sha": "ea2c00bab94e7b2e86af2dcd438ea2d0f7febd4f", "filename": "src/mut_reference.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9c36736f51143537597a7fa9f213f374fd1f5567/src%2Fmut_reference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c36736f51143537597a7fa9f213f374fd1f5567/src%2Fmut_reference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmut_reference.rs?ref=9c36736f51143537597a7fa9f213f374fd1f5567", "patch": "@@ -39,13 +39,13 @@ impl LateLintPass for UnnecessaryMutPassed {\n                                                            If this happened, the compiler would have \\\n                                                            aborted the compilation long ago\");\n                 if let ExprPath(_, ref path) = fn_expr.node {\n-                    check_arguments(cx, &arguments, function_type, &format!(\"{}\", path));\n+                    check_arguments(cx, &arguments, function_type, &path.to_string());\n                 }\n             }\n             ExprMethodCall(ref name, _, ref arguments) => {\n                 let method_call = MethodCall::expr(e.id);\n                 let method_type = borrowed_table.method_map.get(&method_call).expect(\"This should never happen.\");\n-                check_arguments(cx, &arguments, method_type.ty, &format!(\"{}\", name.node.as_str()))\n+                check_arguments(cx, &arguments, method_type.ty, &name.node.as_str())\n             }\n             _ => {}\n         }"}, {"sha": "745d685ec801d0e00969cfb92ffc71ae96786058", "filename": "src/regex.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9c36736f51143537597a7fa9f213f374fd1f5567/src%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c36736f51143537597a7fa9f213f374fd1f5567/src%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fregex.rs?ref=9c36736f51143537597a7fa9f213f374fd1f5567", "patch": "@@ -105,7 +105,7 @@ impl LateLintPass for RegexPass {\n                         Ok(r) => {\n                             if let Some(repl) = is_trivial_regex(&r) {\n                                 span_help_and_lint(cx, TRIVIAL_REGEX, args[0].span,\n-                                                   &\"trivial regex\",\n+                                                   \"trivial regex\",\n                                                    &format!(\"consider using {}\", repl));\n                             }\n                         }\n@@ -123,7 +123,7 @@ impl LateLintPass for RegexPass {\n                     Ok(r) => {\n                         if let Some(repl) = is_trivial_regex(&r) {\n                             span_help_and_lint(cx, TRIVIAL_REGEX, args[0].span,\n-                                               &\"trivial regex\",\n+                                               \"trivial regex\",\n                                                &format!(\"consider using {}\", repl));\n                         }\n                     }"}, {"sha": "eec8bd63eb7fae968be50b7be495eb581f8bf5ea", "filename": "src/types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9c36736f51143537597a7fa9f213f374fd1f5567/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c36736f51143537597a7fa9f213f374fd1f5567/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=9c36736f51143537597a7fa9f213f374fd1f5567", "patch": "@@ -491,12 +491,12 @@ fn check_type(cx: &LateContext, ty: &Ty) {\n         visitor.visit_ty(ty);\n         visitor.score\n     };\n-    // println!(\"{:?} --> {}\", ty, score);\n+\n     if score > 250 {\n         span_lint(cx,\n                   TYPE_COMPLEXITY,\n                   ty.span,\n-                  &format!(\"very complex type used. Consider factoring parts into `type` definitions\"));\n+                  \"very complex type used. Consider factoring parts into `type` definitions\");\n     }\n }\n "}, {"sha": "68137fbbf2a3fbefec77a523ef4ba85d80e201c6", "filename": "src/utils/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c36736f51143537597a7fa9f213f374fd1f5567/src%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c36736f51143537597a7fa9f213f374fd1f5567/src%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils%2Fmod.rs?ref=9c36736f51143537597a7fa9f213f374fd1f5567", "patch": "@@ -28,7 +28,9 @@ pub const CLONE_TRAIT_PATH: [&'static str; 2] = [\"clone\", \"Clone\"];\n pub const COW_PATH: [&'static str; 3] = [\"collections\", \"borrow\", \"Cow\"];\n pub const DEBUG_FMT_METHOD_PATH: [&'static str; 4] = [\"std\", \"fmt\", \"Debug\", \"fmt\"];\n pub const DEFAULT_TRAIT_PATH: [&'static str; 3] = [\"core\", \"default\", \"Default\"];\n+pub const DISPLAY_FMT_METHOD_PATH: [&'static str; 4] = [\"std\", \"fmt\", \"Display\", \"fmt\"];\n pub const DROP_PATH: [&'static str; 3] = [\"core\", \"mem\", \"drop\"];\n+pub const FMT_ARGUMENTS_NEWV1_PATH: [&'static str; 4] = [\"std\", \"fmt\", \"Arguments\", \"new_v1\"];\n pub const FMT_ARGUMENTV1_NEW_PATH: [&'static str; 4] = [\"std\", \"fmt\", \"ArgumentV1\", \"new\"];\n pub const HASHMAP_ENTRY_PATH: [&'static str; 5] = [\"std\", \"collections\", \"hash\", \"map\", \"Entry\"];\n pub const HASHMAP_PATH: [&'static str; 5] = [\"std\", \"collections\", \"hash\", \"map\", \"HashMap\"];"}, {"sha": "0219771e09e46b1282193f0e92c1fc4d963b80c6", "filename": "tests/compile-fail/format.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9c36736f51143537597a7fa9f213f374fd1f5567/tests%2Fcompile-fail%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c36736f51143537597a7fa9f213f374fd1f5567/tests%2Fcompile-fail%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fformat.rs?ref=9c36736f51143537597a7fa9f213f374fd1f5567", "patch": "@@ -0,0 +1,15 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+#![deny(useless_format)]\n+\n+fn main() {\n+    format!(\"foo\"); //~ERROR useless use of `format!`\n+    format!(\"{}\", 42); //~ERROR useless use of `format!`\n+    format!(\"{:?}\", 42); // we only want to warn about `{}`\n+    format!(\"{:+}\", 42); // we only want to warn about `{}`\n+    format!(\"foo {}\", 42);\n+    format!(\"{} bar\", 42);\n+\n+    println!(\"foo\");\n+    println!(\"foo {}\", 42);\n+}"}, {"sha": "2eaa6ab62116d8a279fb336310f4aa798132f129", "filename": "util/update_lints.py", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9c36736f51143537597a7fa9f213f374fd1f5567/util%2Fupdate_lints.py", "raw_url": "https://github.com/rust-lang/rust/raw/9c36736f51143537597a7fa9f213f374fd1f5567/util%2Fupdate_lints.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/util%2Fupdate_lints.py?ref=9c36736f51143537597a7fa9f213f374fd1f5567", "patch": "@@ -60,6 +60,13 @@ def gen_group(lints, levels=None):\n         yield '        %s::%s,\\n' % (module, name.upper())\n \n \n+def gen_mods(lints):\n+    \"\"\"Declare modules\"\"\"\n+\n+    for module in sorted(set(lint[0] for lint in lints)):\n+        yield 'pub mod %s;\\n' % module\n+\n+\n def replace_region(fn, region_start, region_end, callback,\n                    replace_start=True, write_back=True):\n     \"\"\"Replace a region in a file delimited by two lines matching regexes.\n@@ -128,6 +135,12 @@ def main(print_only=False, check=False):\n         lambda: ['There are %d lints included in this crate:\\n' % len(lints)],\n         write_back=not check)\n \n+    # update the `pub mod` list\n+    changed |= replace_region(\n+        'src/lib.rs', r'begin lints modules', r'end lints modules',\n+        lambda: gen_mods(lints),\n+        replace_start=False, write_back=not check)\n+\n     # same for \"clippy\" lint collection\n     changed |= replace_region(\n         'src/lib.rs', r'reg.register_lint_group\\(\"clippy\"', r'\\]\\);',"}]}