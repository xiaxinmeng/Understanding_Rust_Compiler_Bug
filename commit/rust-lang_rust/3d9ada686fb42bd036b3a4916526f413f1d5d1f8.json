{"sha": "3d9ada686fb42bd036b3a4916526f413f1d5d1f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkOWFkYTY4NmZiNDJiZDAzNmIzYTQ5MTY1MjZmNDEzZjFkNWQxZjg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-19T04:32:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-19T04:32:50Z"}, "message": "Auto merge of #79073 - davidtwco:issue-78957-const-param-attrs, r=lcnr\n\npasses: prohibit invalid attrs on generic params\n\nFixes #78957.\n\nThis PR modifies the `check_attr` pass so that attribute placement on generic parameters is checked for validity.\n\nr? `@lcnr`", "tree": {"sha": "fe8db8ba112aba65766fd64d94c3179d0552d115", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe8db8ba112aba65766fd64d94c3179d0552d115"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d9ada686fb42bd036b3a4916526f413f1d5d1f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d9ada686fb42bd036b3a4916526f413f1d5d1f8", "html_url": "https://github.com/rust-lang/rust/commit/3d9ada686fb42bd036b3a4916526f413f1d5d1f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d9ada686fb42bd036b3a4916526f413f1d5d1f8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1741e59cb87d3c8c794eebf6d5430d1b383f51f", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1741e59cb87d3c8c794eebf6d5430d1b383f51f", "html_url": "https://github.com/rust-lang/rust/commit/d1741e59cb87d3c8c794eebf6d5430d1b383f51f"}, {"sha": "75eb72cc9c23d31f10bd7b4ec6331dd8383cf829", "url": "https://api.github.com/repos/rust-lang/rust/commits/75eb72cc9c23d31f10bd7b4ec6331dd8383cf829", "html_url": "https://github.com/rust-lang/rust/commit/75eb72cc9c23d31f10bd7b4ec6331dd8383cf829"}], "stats": {"total": 152, "additions": 147, "deletions": 5}, "files": [{"sha": "2774cc9c08e1621a58b577647aeec7f0dda1065e", "filename": "compiler/rustc_hir/src/target.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3d9ada686fb42bd036b3a4916526f413f1d5d1f8/compiler%2Frustc_hir%2Fsrc%2Ftarget.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d9ada686fb42bd036b3a4916526f413f1d5d1f8/compiler%2Frustc_hir%2Fsrc%2Ftarget.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Ftarget.rs?ref=3d9ada686fb42bd036b3a4916526f413f1d5d1f8", "patch": "@@ -9,6 +9,13 @@ use crate::{Item, ItemKind, TraitItem, TraitItemKind};\n \n use std::fmt::{self, Display};\n \n+#[derive(Copy, Clone, PartialEq, Debug)]\n+pub enum GenericParamKind {\n+    Type,\n+    Lifetime,\n+    Const,\n+}\n+\n #[derive(Copy, Clone, PartialEq, Debug)]\n pub enum MethodKind {\n     Trait { body: bool },\n@@ -43,6 +50,7 @@ pub enum Target {\n     ForeignFn,\n     ForeignStatic,\n     ForeignTy,\n+    GenericParam(GenericParamKind),\n }\n \n impl Display for Target {\n@@ -77,6 +85,11 @@ impl Display for Target {\n                 Target::ForeignFn => \"foreign function\",\n                 Target::ForeignStatic => \"foreign static item\",\n                 Target::ForeignTy => \"foreign type\",\n+                Target::GenericParam(kind) => match kind {\n+                    GenericParamKind::Type => \"type parameter\",\n+                    GenericParamKind::Lifetime => \"lifetime parameter\",\n+                    GenericParamKind::Const => \"const parameter\",\n+                },\n             }\n         )\n     }\n@@ -124,4 +137,14 @@ impl Target {\n             hir::ForeignItemKind::Type => Target::ForeignTy,\n         }\n     }\n+\n+    pub fn from_generic_param(generic_param: &hir::GenericParam<'_>) -> Target {\n+        match generic_param.kind {\n+            hir::GenericParamKind::Type { .. } => Target::GenericParam(GenericParamKind::Type),\n+            hir::GenericParamKind::Lifetime { .. } => {\n+                Target::GenericParam(GenericParamKind::Lifetime)\n+            }\n+            hir::GenericParamKind::Const { .. } => Target::GenericParam(GenericParamKind::Const),\n+        }\n+    }\n }"}, {"sha": "aeaa862f5fd631e1c544f1504b4541d784cc6f53", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3d9ada686fb42bd036b3a4916526f413f1d5d1f8/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d9ada686fb42bd036b3a4916526f413f1d5d1f8/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=3d9ada686fb42bd036b3a4916526f413f1d5d1f8", "patch": "@@ -882,6 +882,18 @@ impl Visitor<'tcx> for CheckAttrVisitor<'tcx> {\n         intravisit::walk_item(self, item)\n     }\n \n+    fn visit_generic_param(&mut self, generic_param: &'tcx hir::GenericParam<'tcx>) {\n+        let target = Target::from_generic_param(generic_param);\n+        self.check_attributes(\n+            generic_param.hir_id,\n+            generic_param.attrs,\n+            &generic_param.span,\n+            target,\n+            None,\n+        );\n+        intravisit::walk_generic_param(self, generic_param)\n+    }\n+\n     fn visit_trait_item(&mut self, trait_item: &'tcx TraitItem<'tcx>) {\n         let target = Target::from_trait_item(trait_item);\n         self.check_attributes(trait_item.hir_id, &trait_item.attrs, &trait_item.span, target, None);"}, {"sha": "263c69bbc0b62444d7e2f4374855d84a30148328", "filename": "src/test/ui/issues/issue-78957.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3d9ada686fb42bd036b3a4916526f413f1d5d1f8/src%2Ftest%2Fui%2Fissues%2Fissue-78957.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d9ada686fb42bd036b3a4916526f413f1d5d1f8/src%2Ftest%2Fui%2Fissues%2Fissue-78957.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-78957.rs?ref=3d9ada686fb42bd036b3a4916526f413f1d5d1f8", "patch": "@@ -0,0 +1,30 @@\n+#![deny(unused_attributes)]\n+#![feature(min_const_generics)]\n+\n+use std::marker::PhantomData;\n+\n+pub struct Foo<#[inline] const N: usize>;\n+//~^ ERROR attribute should be applied to function or closure\n+pub struct Bar<#[cold] const N: usize>;\n+//~^ ERROR attribute should be applied to a function\n+//~| WARN this was previously accepted\n+pub struct Baz<#[repr(C)] const N: usize>;\n+//~^ ERROR attribute should be applied to a struct, enum, or union\n+//\n+pub struct Foo2<#[inline] 'a>(PhantomData<&'a ()>);\n+//~^ ERROR attribute should be applied to function or closure\n+pub struct Bar2<#[cold] 'a>(PhantomData<&'a ()>);\n+//~^ ERROR attribute should be applied to a function\n+//~| WARN this was previously accepted\n+pub struct Baz2<#[repr(C)] 'a>(PhantomData<&'a ()>);\n+//~^ ERROR attribute should be applied to a struct, enum, or union\n+//\n+pub struct Foo3<#[inline] T>(PhantomData<T>);\n+//~^ ERROR attribute should be applied to function or closure\n+pub struct Bar3<#[cold] T>(PhantomData<T>);\n+//~^ ERROR attribute should be applied to a function\n+//~| WARN this was previously accepted\n+pub struct Baz3<#[repr(C)] T>(PhantomData<T>);\n+//~^ ERROR attribute should be applied to a struct, enum, or union\n+\n+fn main() {}"}, {"sha": "26437ee4befdeee212c0b024ee85be99c3d9fcd0", "filename": "src/test/ui/issues/issue-78957.stderr", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/3d9ada686fb42bd036b3a4916526f413f1d5d1f8/src%2Ftest%2Fui%2Fissues%2Fissue-78957.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d9ada686fb42bd036b3a4916526f413f1d5d1f8/src%2Ftest%2Fui%2Fissues%2Fissue-78957.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-78957.stderr?ref=3d9ada686fb42bd036b3a4916526f413f1d5d1f8", "patch": "@@ -0,0 +1,69 @@\n+error[E0518]: attribute should be applied to function or closure\n+  --> $DIR/issue-78957.rs:6:16\n+   |\n+LL | pub struct Foo<#[inline] const N: usize>;\n+   |                ^^^^^^^^^       - not a function or closure\n+\n+error: attribute should be applied to a function\n+  --> $DIR/issue-78957.rs:8:16\n+   |\n+LL | pub struct Bar<#[cold] const N: usize>;\n+   |                ^^^^^^^       - not a function\n+   |\n+note: the lint level is defined here\n+  --> $DIR/issue-78957.rs:1:9\n+   |\n+LL | #![deny(unused_attributes)]\n+   |         ^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+\n+error[E0517]: attribute should be applied to a struct, enum, or union\n+  --> $DIR/issue-78957.rs:11:23\n+   |\n+LL | pub struct Baz<#[repr(C)] const N: usize>;\n+   |                       ^         - not a struct, enum, or union\n+\n+error[E0518]: attribute should be applied to function or closure\n+  --> $DIR/issue-78957.rs:14:17\n+   |\n+LL | pub struct Foo2<#[inline] 'a>(PhantomData<&'a ()>);\n+   |                 ^^^^^^^^^ -- not a function or closure\n+\n+error: attribute should be applied to a function\n+  --> $DIR/issue-78957.rs:16:17\n+   |\n+LL | pub struct Bar2<#[cold] 'a>(PhantomData<&'a ()>);\n+   |                 ^^^^^^^ -- not a function\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+\n+error[E0517]: attribute should be applied to a struct, enum, or union\n+  --> $DIR/issue-78957.rs:19:24\n+   |\n+LL | pub struct Baz2<#[repr(C)] 'a>(PhantomData<&'a ()>);\n+   |                        ^   -- not a struct, enum, or union\n+\n+error[E0518]: attribute should be applied to function or closure\n+  --> $DIR/issue-78957.rs:22:17\n+   |\n+LL | pub struct Foo3<#[inline] T>(PhantomData<T>);\n+   |                 ^^^^^^^^^ - not a function or closure\n+\n+error: attribute should be applied to a function\n+  --> $DIR/issue-78957.rs:24:17\n+   |\n+LL | pub struct Bar3<#[cold] T>(PhantomData<T>);\n+   |                 ^^^^^^^ - not a function\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+\n+error[E0517]: attribute should be applied to a struct, enum, or union\n+  --> $DIR/issue-78957.rs:27:24\n+   |\n+LL | pub struct Baz3<#[repr(C)] T>(PhantomData<T>);\n+   |                        ^   - not a struct, enum, or union\n+\n+error: aborting due to 9 previous errors\n+\n+Some errors have detailed explanations: E0517, E0518.\n+For more information about an error, try `rustc --explain E0517`."}, {"sha": "142efb3c6cdcf328fb0520bb849a0407557fd078", "filename": "src/test/ui/proc-macro/ambiguous-builtin-attrs.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3d9ada686fb42bd036b3a4916526f413f1d5d1f8/src%2Ftest%2Fui%2Fproc-macro%2Fambiguous-builtin-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d9ada686fb42bd036b3a4916526f413f1d5d1f8/src%2Ftest%2Fui%2Fproc-macro%2Fambiguous-builtin-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fambiguous-builtin-attrs.rs?ref=3d9ada686fb42bd036b3a4916526f413f1d5d1f8", "patch": "@@ -17,7 +17,9 @@ fn test() {}\n #[bench] // OK, shadowed\n fn bench() {}\n \n-fn non_macro_expanded_location<#[repr(C)] T>() { //~ ERROR `repr` is ambiguous\n+fn non_macro_expanded_location<#[repr(C)] T>() {\n+    //~^ ERROR `repr` is ambiguous\n+    //~| ERROR attribute should be applied to a struct, enum, or union\n     match 0u8 {\n         #[repr(C)] //~ ERROR `repr` is ambiguous\n         _ => {}"}, {"sha": "276ee1cfd3562cd56a0d79b80c661ffd8dc1ae8e", "filename": "src/test/ui/proc-macro/ambiguous-builtin-attrs.stderr", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3d9ada686fb42bd036b3a4916526f413f1d5d1f8/src%2Ftest%2Fui%2Fproc-macro%2Fambiguous-builtin-attrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d9ada686fb42bd036b3a4916526f413f1d5d1f8/src%2Ftest%2Fui%2Fproc-macro%2Fambiguous-builtin-attrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fambiguous-builtin-attrs.stderr?ref=3d9ada686fb42bd036b3a4916526f413f1d5d1f8", "patch": "@@ -1,5 +1,5 @@\n error[E0425]: cannot find value `NonExistent` in this scope\n-  --> $DIR/ambiguous-builtin-attrs.rs:30:5\n+  --> $DIR/ambiguous-builtin-attrs.rs:32:5\n    |\n LL |     NonExistent;\n    |     ^^^^^^^^^^^ not found in this scope\n@@ -47,7 +47,7 @@ LL | use builtin_attrs::*;\n    = help: use `crate::repr` to refer to this attribute macro unambiguously\n \n error[E0659]: `repr` is ambiguous (built-in attribute vs any other name)\n-  --> $DIR/ambiguous-builtin-attrs.rs:22:11\n+  --> $DIR/ambiguous-builtin-attrs.rs:24:11\n    |\n LL |         #[repr(C)]\n    |           ^^^^ ambiguous name\n@@ -74,7 +74,13 @@ LL | use builtin_attrs::*;\n    |     ^^^^^^^^^^^^^^^^\n    = help: use `crate::feature` to refer to this attribute macro unambiguously\n \n-error: aborting due to 6 previous errors\n+error[E0517]: attribute should be applied to a struct, enum, or union\n+  --> $DIR/ambiguous-builtin-attrs.rs:20:39\n+   |\n+LL | fn non_macro_expanded_location<#[repr(C)] T>() {\n+   |                                       ^   - not a struct, enum, or union\n+\n+error: aborting due to 7 previous errors\n \n-Some errors have detailed explanations: E0425, E0659.\n+Some errors have detailed explanations: E0425, E0517, E0659.\n For more information about an error, try `rustc --explain E0425`."}]}