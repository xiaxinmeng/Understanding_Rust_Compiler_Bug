{"sha": "a5f2f36ebdad455cbff8d6cb1b2647698299020a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1ZjJmMzZlYmRhZDQ1NWNiZmY4ZDZjYjFiMjY0NzY5ODI5OTAyMGE=", "commit": {"author": {"name": "Brian Campbell", "email": "lambda@continuation.org", "date": "2017-01-13T21:28:50Z"}, "committer": {"name": "Brian Campbell", "email": "lambda@continuation.org", "date": "2017-01-14T00:13:10Z"}, "message": "impl ToSocketAddrs for String\n\n`ToSocketAddrs` is implemented for a number of different types,\nincluding `(IpAddr, u16)`, `&str`, and various others, for the\nconvenience of being able to run things like\n`TcpListener::bind(\"10.11.12.13:1415\")`.  However, because this is a\ngeneric parameter with a trait bound, if you have a `String` you cannot\npass it in, either directly as `TcpListener::bind(string)`, or the\n`TcpListener::bind(&string)` as you might expect due to deref coercion;\nyou have to use `TcpListener::bind(&*string)`, which is noisy and hard\nto discover (though #39029 suggests better error messages to make it\nmore discoverable).\n\nRather than making people stumble over this, just implement\n`ToSocketAddrs` for `String`.", "tree": {"sha": "b7ed0c301930881aea54e9ace9d5beba6f239ead", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7ed0c301930881aea54e9ace9d5beba6f239ead"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5f2f36ebdad455cbff8d6cb1b2647698299020a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5f2f36ebdad455cbff8d6cb1b2647698299020a", "html_url": "https://github.com/rust-lang/rust/commit/a5f2f36ebdad455cbff8d6cb1b2647698299020a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5f2f36ebdad455cbff8d6cb1b2647698299020a/comments", "author": {"login": "lambda", "id": 37398, "node_id": "MDQ6VXNlcjM3Mzk4", "avatar_url": "https://avatars.githubusercontent.com/u/37398?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lambda", "html_url": "https://github.com/lambda", "followers_url": "https://api.github.com/users/lambda/followers", "following_url": "https://api.github.com/users/lambda/following{/other_user}", "gists_url": "https://api.github.com/users/lambda/gists{/gist_id}", "starred_url": "https://api.github.com/users/lambda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lambda/subscriptions", "organizations_url": "https://api.github.com/users/lambda/orgs", "repos_url": "https://api.github.com/users/lambda/repos", "events_url": "https://api.github.com/users/lambda/events{/privacy}", "received_events_url": "https://api.github.com/users/lambda/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lambda", "id": 37398, "node_id": "MDQ6VXNlcjM3Mzk4", "avatar_url": "https://avatars.githubusercontent.com/u/37398?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lambda", "html_url": "https://github.com/lambda", "followers_url": "https://api.github.com/users/lambda/followers", "following_url": "https://api.github.com/users/lambda/following{/other_user}", "gists_url": "https://api.github.com/users/lambda/gists{/gist_id}", "starred_url": "https://api.github.com/users/lambda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lambda/subscriptions", "organizations_url": "https://api.github.com/users/lambda/orgs", "repos_url": "https://api.github.com/users/lambda/repos", "events_url": "https://api.github.com/users/lambda/events{/privacy}", "received_events_url": "https://api.github.com/users/lambda/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9dedc815d97752f24a1073258d005d64c643ad80", "url": "https://api.github.com/repos/rust-lang/rust/commits/9dedc815d97752f24a1073258d005d64c643ad80", "html_url": "https://github.com/rust-lang/rust/commit/9dedc815d97752f24a1073258d005d64c643ad80"}], "stats": {"total": 20, "additions": 20, "deletions": 0}, "files": [{"sha": "d186a53311dab68beff14c2f357a418bc73e907c", "filename": "src/libstd/net/addr.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a5f2f36ebdad455cbff8d6cb1b2647698299020a/src%2Flibstd%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5f2f36ebdad455cbff8d6cb1b2647698299020a/src%2Flibstd%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Faddr.rs?ref=a5f2f36ebdad455cbff8d6cb1b2647698299020a", "patch": "@@ -760,6 +760,14 @@ impl<'a, T: ToSocketAddrs + ?Sized> ToSocketAddrs for &'a T {\n     }\n }\n \n+#[stable(feature = \"string_to_socket_addrs\", since = \"1.16.0\")]\n+impl ToSocketAddrs for String {\n+    type Iter = vec::IntoIter<SocketAddr>;\n+    fn to_socket_addrs(&self) -> io::Result<vec::IntoIter<SocketAddr>> {\n+        (&**self).to_socket_addrs()\n+    }\n+}\n+\n #[cfg(all(test, not(target_os = \"emscripten\")))]\n mod tests {\n     use net::*;\n@@ -797,6 +805,18 @@ mod tests {\n         assert!(tsa(\"localhost:23924\").unwrap().contains(&a));\n     }\n \n+    #[test]\n+    fn to_socket_addr_string() {\n+        let a = sa4(Ipv4Addr::new(77, 88, 21, 11), 24352);\n+        assert_eq!(Ok(vec![a]), tsa(&*format!(\"{}:{}\", \"77.88.21.11\", \"24352\")));\n+        assert_eq!(Ok(vec![a]), tsa(&format!(\"{}:{}\", \"77.88.21.11\", \"24352\")));\n+        assert_eq!(Ok(vec![a]), tsa(format!(\"{}:{}\", \"77.88.21.11\", \"24352\")));\n+\n+        let s = format!(\"{}:{}\", \"77.88.21.11\", \"24352\");\n+        assert_eq!(Ok(vec![a]), tsa(s));\n+        // s has been moved into the tsa call\n+    }\n+\n     // FIXME: figure out why this fails on openbsd and bitrig and fix it\n     #[test]\n     #[cfg(not(any(windows, target_os = \"openbsd\", target_os = \"bitrig\")))]"}]}