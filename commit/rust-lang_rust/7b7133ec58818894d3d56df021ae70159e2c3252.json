{"sha": "7b7133ec58818894d3d56df021ae70159e2c3252", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiNzEzM2VjNTg4MTg4OTRkM2Q1NmRmMDIxYWU3MDE1OWUyYzMyNTI=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-10-30T20:22:46Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-11-01T18:57:08Z"}, "message": "Insert type vars before doing assoc item resolution", "tree": {"sha": "dbc2a07b8d0d5167a50c620f491564201612adc3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dbc2a07b8d0d5167a50c620f491564201612adc3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b7133ec58818894d3d56df021ae70159e2c3252", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b7133ec58818894d3d56df021ae70159e2c3252", "html_url": "https://github.com/rust-lang/rust/commit/7b7133ec58818894d3d56df021ae70159e2c3252", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b7133ec58818894d3d56df021ae70159e2c3252/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44279ef1df49585d0b151dcfb5cefade012dbc7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/44279ef1df49585d0b151dcfb5cefade012dbc7a", "html_url": "https://github.com/rust-lang/rust/commit/44279ef1df49585d0b151dcfb5cefade012dbc7a"}], "stats": {"total": 27, "additions": 15, "deletions": 12}, "files": [{"sha": "0cde77265e64e66ad7fb3840e0ffef7c2c438ecc", "filename": "crates/ra_hir/src/ty/infer/path.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7b7133ec58818894d3d56df021ae70159e2c3252/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b7133ec58818894d3d56df021ae70159e2c3252/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fpath.rs?ref=7b7133ec58818894d3d56df021ae70159e2c3252", "patch": "@@ -124,6 +124,9 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                     return None;\n                 }\n \n+                let ty = self.insert_type_vars(ty);\n+                let ty = self.normalize_associated_types_in(ty);\n+\n                 let segment =\n                     remaining_segments.last().expect(\"there should be at least one segment here\");\n "}, {"sha": "e071e4d4e893e76cad550287c5e7f1fc082d2d91", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7b7133ec58818894d3d56df021ae70159e2c3252/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b7133ec58818894d3d56df021ae70159e2c3252/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=7b7133ec58818894d3d56df021ae70159e2c3252", "patch": "@@ -2879,9 +2879,9 @@ fn test() {\n \"#),\n         @r###\"\n     [101; 127) '{     ...e(); }': ()\n-    [111; 112) 'a': {unknown}\n-    [115; 122) 'S::make': {unknown}\n-    [115; 124) 'S::make()': {unknown}\n+    [111; 112) 'a': (S<i32>, i64)\n+    [115; 122) 'S::make': fn make<S<i32>, i64>() -> (Self, T)\n+    [115; 124) 'S::make()': (S<i32>, i64)\n     \"###\n     );\n }\n@@ -2897,18 +2897,18 @@ struct S<T>;\n impl Trait<i64> for S<u64> {}\n impl Trait<i32> for S<u32> {}\n fn test() {\n-    let a: (Self<i64>, _) = S::make();\n-    let b: (_, u32) = S::make();\n+    let a: (S<u64>, _) = S::make();\n+    let b: (_, i32) = S::make();\n }\n \"#),\n         @r###\"\n-    [131; 206) '{     ...e(); }': ()\n-    [141; 142) 'a': ({unknown}, {unknown})\n-    [161; 168) 'S::make': {unknown}\n-    [161; 170) 'S::make()': ({unknown}, {unknown})\n-    [180; 181) 'b': ({unknown}, u32)\n-    [194; 201) 'S::make': {unknown}\n-    [194; 203) 'S::make()': ({unknown}, u32)\n+    [131; 203) '{     ...e(); }': ()\n+    [141; 142) 'a': (S<u64>, i64)\n+    [158; 165) 'S::make': fn make<S<u64>, i64>() -> (Self, T)\n+    [158; 167) 'S::make()': (S<u64>, i64)\n+    [177; 178) 'b': (S<u32>, i32)\n+    [191; 198) 'S::make': fn make<S<u32>, i32>() -> (Self, T)\n+    [191; 200) 'S::make()': (S<u32>, i32)\n     \"###\n     );\n }"}]}