{"sha": "351cec0cb41ab9eba9e4085ba49dc70a9542eadf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1MWNlYzBjYjQxYWI5ZWJhOWU0MDg1YmE0OWRjNzBhOTU0MmVhZGY=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-08-18T13:35:14Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-08-20T11:50:06Z"}, "message": "Do not replace items annotated with builtin attrs with the attr input", "tree": {"sha": "508992d485a08d63d838b449753b8d6b17141b28", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/508992d485a08d63d838b449753b8d6b17141b28"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/351cec0cb41ab9eba9e4085ba49dc70a9542eadf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/351cec0cb41ab9eba9e4085ba49dc70a9542eadf", "html_url": "https://github.com/rust-lang/rust/commit/351cec0cb41ab9eba9e4085ba49dc70a9542eadf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/351cec0cb41ab9eba9e4085ba49dc70a9542eadf/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8dd3a71730161869d8da3694f3338042efa17d29", "url": "https://api.github.com/repos/rust-lang/rust/commits/8dd3a71730161869d8da3694f3338042efa17d29", "html_url": "https://github.com/rust-lang/rust/commit/8dd3a71730161869d8da3694f3338042efa17d29"}], "stats": {"total": 43, "additions": 25, "deletions": 18}, "files": [{"sha": "6cd185ceeb2cbaa8203a70721ab1f67f58f07a67", "filename": "crates/hir_def/src/builtin_attr.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/351cec0cb41ab9eba9e4085ba49dc70a9542eadf/crates%2Fhir_def%2Fsrc%2Fbuiltin_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/351cec0cb41ab9eba9e4085ba49dc70a9542eadf/crates%2Fhir_def%2Fsrc%2Fbuiltin_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbuiltin_attr.rs?ref=351cec0cb41ab9eba9e4085ba49dc70a9542eadf", "patch": "@@ -34,9 +34,6 @@ macro_rules! rustc_attr {\n     };\n }\n \n-/// Built-in macro-like attributes.\n-pub const EXTRA_ATTRIBUTES: &[BuiltinAttribute] = &[\"test\", \"bench\"];\n-\n /// \"Inert\" built-in attributes that have a special meaning to rustc or rustdoc.\n #[rustfmt::skip]\n pub const INERT_ATTRIBUTES: &[BuiltinAttribute] = &["}, {"sha": "f8b3c3949f655114bb5f90f6d3b1419dae18f2f2", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/351cec0cb41ab9eba9e4085ba49dc70a9542eadf/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/351cec0cb41ab9eba9e4085ba49dc70a9542eadf/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=351cec0cb41ab9eba9e4085ba49dc70a9542eadf", "patch": "@@ -1712,27 +1712,24 @@ impl ModCollector<'_, '_> {\n         if path.kind == PathKind::Plain {\n             if let Some(tool_module) = path.segments().first() {\n                 let tool_module = tool_module.to_string();\n-                if builtin_attr::TOOL_MODULES\n+                let is_tool = builtin_attr::TOOL_MODULES\n                     .iter()\n                     .copied()\n-                    .chain(self.def_collector.registered_tools.iter().map(|s| &**s))\n-                    .any(|m| tool_module == *m)\n-                {\n+                    .chain(self.def_collector.registered_tools.iter().map(AsRef::as_ref))\n+                    .any(|m| tool_module == *m);\n+                if is_tool {\n                     return true;\n                 }\n             }\n \n             if let Some(name) = path.as_ident() {\n                 let name = name.to_string();\n-                if builtin_attr::INERT_ATTRIBUTES\n+                let is_inert = builtin_attr::INERT_ATTRIBUTES\n                     .iter()\n-                    .chain(builtin_attr::EXTRA_ATTRIBUTES)\n                     .copied()\n-                    .chain(self.def_collector.registered_attrs.iter().map(|s| &**s))\n-                    .any(|attr| name == *attr)\n-                {\n-                    return true;\n-                }\n+                    .chain(self.def_collector.registered_attrs.iter().map(AsRef::as_ref))\n+                    .any(|attr| name == *attr);\n+                return is_inert;\n             }\n         }\n "}, {"sha": "5764c682be764178e89e71a16cd78c54617d0186", "filename": "crates/hir_expand/src/builtin_attr.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/351cec0cb41ab9eba9e4085ba49dc70a9542eadf/crates%2Fhir_expand%2Fsrc%2Fbuiltin_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/351cec0cb41ab9eba9e4085ba49dc70a9542eadf/crates%2Fhir_expand%2Fsrc%2Fbuiltin_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fbuiltin_attr.rs?ref=351cec0cb41ab9eba9e4085ba49dc70a9542eadf", "patch": "@@ -17,11 +17,12 @@ macro_rules! register_builtin {\n                 db: &dyn AstDatabase,\n                 id: MacroCallId,\n                 tt: &tt::Subtree,\n+                item: &tt::Subtree,\n             ) -> Result<tt::Subtree, mbe::ExpandError> {\n                 let expander = match *self {\n                     $( BuiltinAttrExpander::$variant => $expand, )*\n                 };\n-                expander(db, id, tt)\n+                expander(db, id, tt, item)\n             }\n \n             fn find_by_name(name: &name::Name) -> Option<Self> {\n@@ -61,7 +62,8 @@ pub fn find_builtin_attr(\n fn dummy_attr_expand(\n     _db: &dyn AstDatabase,\n     _id: MacroCallId,\n-    tt: &tt::Subtree,\n+    _tt: &tt::Subtree,\n+    item: &tt::Subtree,\n ) -> Result<tt::Subtree, mbe::ExpandError> {\n-    Ok(tt.clone())\n+    Ok(item.clone())\n }"}, {"sha": "d71cc22ce4e2365df850cd3260f970173c9930a6", "filename": "crates/hir_expand/src/db.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/351cec0cb41ab9eba9e4085ba49dc70a9542eadf/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/351cec0cb41ab9eba9e4085ba49dc70a9542eadf/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fdb.rs?ref=351cec0cb41ab9eba9e4085ba49dc70a9542eadf", "patch": "@@ -54,7 +54,18 @@ impl TokenExpander {\n             TokenExpander::MacroDef { mac, .. } => mac.expand(tt),\n             TokenExpander::Builtin(it) => it.expand(db, id, tt),\n             // FIXME switch these to ExpandResult as well\n-            TokenExpander::BuiltinAttr(it) => it.expand(db, id, tt).into(),\n+            TokenExpander::BuiltinAttr(it) => {\n+                let macro_arg = match db.macro_arg(id) {\n+                    Some(it) => it,\n+                    None => {\n+                        return mbe::ExpandResult::only_err(\n+                            mbe::ExpandError::Other(\"No item argument for attribute\".to_string())\n+                                .into(),\n+                        );\n+                    }\n+                };\n+                it.expand(db, id, tt, &macro_arg.0).into()\n+            }\n             TokenExpander::BuiltinDerive(it) => it.expand(db, id, tt).into(),\n             TokenExpander::ProcMacro(_) => {\n                 // We store the result in salsa db to prevent non-deterministic behavior in"}]}