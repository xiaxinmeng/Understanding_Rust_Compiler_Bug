{"sha": "bbbb85a4ec029e961c01fa95725ee065621c07dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiYmI4NWE0ZWMwMjllOTYxYzAxZmE5NTcyNWVlMDY1NjIxYzA3ZGM=", "commit": {"author": {"name": "Keegan McAllister", "email": "kmcallister@mozilla.com", "date": "2015-01-03T06:21:28Z"}, "committer": {"name": "Keegan McAllister", "email": "kmcallister@mozilla.com", "date": "2015-01-06T02:21:14Z"}, "message": "Forbid '#[macro_use] extern crate' outside the crate root", "tree": {"sha": "161bd7dced7c2d118a55c95f2b9945b8b311429f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/161bd7dced7c2d118a55c95f2b9945b8b311429f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bbbb85a4ec029e961c01fa95725ee065621c07dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bbbb85a4ec029e961c01fa95725ee065621c07dc", "html_url": "https://github.com/rust-lang/rust/commit/bbbb85a4ec029e961c01fa95725ee065621c07dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bbbb85a4ec029e961c01fa95725ee065621c07dc/comments", "author": {"login": "kmcallister", "id": 444997, "node_id": "MDQ6VXNlcjQ0NDk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/444997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmcallister", "html_url": "https://github.com/kmcallister", "followers_url": "https://api.github.com/users/kmcallister/followers", "following_url": "https://api.github.com/users/kmcallister/following{/other_user}", "gists_url": "https://api.github.com/users/kmcallister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmcallister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmcallister/subscriptions", "organizations_url": "https://api.github.com/users/kmcallister/orgs", "repos_url": "https://api.github.com/users/kmcallister/repos", "events_url": "https://api.github.com/users/kmcallister/events{/privacy}", "received_events_url": "https://api.github.com/users/kmcallister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kmcallister", "id": 444997, "node_id": "MDQ6VXNlcjQ0NDk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/444997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmcallister", "html_url": "https://github.com/kmcallister", "followers_url": "https://api.github.com/users/kmcallister/followers", "following_url": "https://api.github.com/users/kmcallister/following{/other_user}", "gists_url": "https://api.github.com/users/kmcallister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmcallister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmcallister/subscriptions", "organizations_url": "https://api.github.com/users/kmcallister/orgs", "repos_url": "https://api.github.com/users/kmcallister/repos", "events_url": "https://api.github.com/users/kmcallister/events{/privacy}", "received_events_url": "https://api.github.com/users/kmcallister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2e26972e307a2e82b9ff7a5345a5bff47a99501", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2e26972e307a2e82b9ff7a5345a5bff47a99501", "html_url": "https://github.com/rust-lang/rust/commit/c2e26972e307a2e82b9ff7a5345a5bff47a99501"}], "stats": {"total": 43, "additions": 40, "deletions": 3}, "files": [{"sha": "44a223954858a76d7089143c981353b2a72a705a", "filename": "src/librustc/plugin/load.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bbbb85a4ec029e961c01fa95725ee065621c07dc/src%2Flibrustc%2Fplugin%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbbb85a4ec029e961c01fa95725ee065621c07dc/src%2Flibrustc%2Fplugin%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fplugin%2Fload.rs?ref=bbbb85a4ec029e961c01fa95725ee065621c07dc", "patch": "@@ -20,6 +20,7 @@ use std::dynamic_lib::DynamicLibrary;\n use std::collections::HashSet;\n use syntax::ast;\n use syntax::attr;\n+use syntax::codemap::Span;\n use syntax::parse::token;\n use syntax::ptr::P;\n use syntax::visit;\n@@ -45,6 +46,7 @@ pub struct Plugins {\n \n struct PluginLoader<'a> {\n     sess: &'a Session,\n+    span_whitelist: HashSet<Span>,\n     reader: CrateReader<'a>,\n     plugins: Plugins,\n }\n@@ -54,6 +56,7 @@ impl<'a> PluginLoader<'a> {\n         PluginLoader {\n             sess: sess,\n             reader: CrateReader::new(sess),\n+            span_whitelist: HashSet::new(),\n             plugins: Plugins {\n                 macros: vec!(),\n                 registrars: vec!(),\n@@ -66,6 +69,14 @@ impl<'a> PluginLoader<'a> {\n pub fn load_plugins(sess: &Session, krate: &ast::Crate,\n                     addl_plugins: Option<Plugins>) -> Plugins {\n     let mut loader = PluginLoader::new(sess);\n+\n+    // We need to error on `#[macro_use] extern crate` when it isn't at the\n+    // crate root, because `$crate` won't work properly. Identify these by\n+    // spans, because the crate map isn't set up yet.\n+    for vi in krate.module.view_items.iter() {\n+        loader.span_whitelist.insert(vi.span);\n+    }\n+\n     visit::walk_crate(&mut loader, krate);\n \n     let mut plugins = loader.plugins;\n@@ -158,6 +169,11 @@ impl<'a, 'v> Visitor<'v> for PluginLoader<'a> {\n         };\n         let load_registrar = plugin_attr.is_some();\n \n+        if load_macros && !self.span_whitelist.contains(&vi.span) {\n+            self.sess.span_err(vi.span, \"an `extern crate` loading macros must be at \\\n+                                         the crate root\");\n+        }\n+\n         if load_macros || load_registrar {\n             let pmd = self.reader.read_plugin_metadata(vi);\n             if load_macros {"}, {"sha": "63dc8d692bacd762beeb6755bdd02cb594098246", "filename": "src/test/compile-fail/lint-stability.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bbbb85a4ec029e961c01fa95725ee065621c07dc/src%2Ftest%2Fcompile-fail%2Flint-stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbbb85a4ec029e961c01fa95725ee065621c07dc/src%2Ftest%2Fcompile-fail%2Flint-stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-stability.rs?ref=bbbb85a4ec029e961c01fa95725ee065621c07dc", "patch": "@@ -19,13 +19,14 @@\n #![deny(experimental)]\n #![allow(dead_code)]\n \n+#[macro_use]\n+extern crate lint_stability; //~ ERROR: use of unmarked item\n+\n mod cross_crate {\n     extern crate stability_cfg1;\n     extern crate stability_cfg2; //~ ERROR: use of experimental item\n \n-    #[macro_use]\n-    extern crate lint_stability; //~ ERROR: use of unmarked item\n-    use self::lint_stability::*;\n+    use lint_stability::*;\n \n     fn test() {\n         let foo = MethodTester;"}, {"sha": "67aaf05c3101b7ddcd747d7aef962efa3f672034", "filename": "src/test/compile-fail/macro-crate-nonterminal-non-root.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/bbbb85a4ec029e961c01fa95725ee065621c07dc/src%2Ftest%2Fcompile-fail%2Fmacro-crate-nonterminal-non-root.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbbb85a4ec029e961c01fa95725ee065621c07dc/src%2Ftest%2Fcompile-fail%2Fmacro-crate-nonterminal-non-root.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-crate-nonterminal-non-root.rs?ref=bbbb85a4ec029e961c01fa95725ee065621c07dc", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:macro_crate_nonterminal.rs\n+// ignore-stage1\n+\n+mod foo {\n+    #[macro_use]\n+    extern crate macro_crate_nonterminal;  //~ ERROR must be at the crate root\n+}\n+\n+fn main() {\n+}"}]}