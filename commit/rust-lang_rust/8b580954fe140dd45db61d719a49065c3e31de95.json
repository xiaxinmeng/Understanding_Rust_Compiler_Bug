{"sha": "8b580954fe140dd45db61d719a49065c3e31de95", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiNTgwOTU0ZmUxNDBkZDQ1ZGI2MWQ3MTlhNDkwNjVjM2UzMWRlOTU=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-12-22T22:42:52Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-12-22T22:42:52Z"}, "message": "Register snapshots and switch logging over to use of log_full or #error / #debug.", "tree": {"sha": "265e743361e058682486713db96aadb2f3381b99", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/265e743361e058682486713db96aadb2f3381b99"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b580954fe140dd45db61d719a49065c3e31de95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b580954fe140dd45db61d719a49065c3e31de95", "html_url": "https://github.com/rust-lang/rust/commit/8b580954fe140dd45db61d719a49065c3e31de95", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b580954fe140dd45db61d719a49065c3e31de95/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b610646317f3b2be49936dc113c684dc4910df6", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b610646317f3b2be49936dc113c684dc4910df6", "html_url": "https://github.com/rust-lang/rust/commit/3b610646317f3b2be49936dc113c684dc4910df6"}], "stats": {"total": 2521, "additions": 1362, "deletions": 1159}, "files": [{"sha": "3c56cdd9f611c7fb1210b96f0ae64196eb08e777", "filename": "src/cargo/cargo.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Fcargo%2Fcargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Fcargo%2Fcargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcargo%2Fcargo.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -203,7 +203,7 @@ fn try_parse_sources(filename: str, sources: map::hashmap<str, source>) {\n         some(json::dict(_j)) {\n             _j.items { |k, v|\n                 sources.insert(k, parse_source(k, v));\n-                log #fmt[\"source: %s\", k];\n+                #debug(\"source: %s\", k);\n             }\n         }\n         _ { fail \"malformed sources.json\"; }\n@@ -269,11 +269,11 @@ fn load_one_source_package(&src: source, p: map::hashmap<str, json::json>) {\n         ref: ref,\n         tags: tags\n     });\n-    log \"  Loaded package: \" + src.name + \"/\" + name;\n+    log_full(core::debug, \"  Loaded package: \" + src.name + \"/\" + name);\n }\n \n fn load_source_packages(&c: cargo, &src: source) {\n-    log \"Loading source: \" + src.name;\n+    log_full(core::debug, \"Loading source: \" + src.name);\n     let dir = fs::connect(c.sourcedir, src.name);\n     let pkgfile = fs::connect(dir, \"packages.json\");\n     if !fs::path_exists(pkgfile) { ret; }\n@@ -356,7 +356,7 @@ fn install_one_crate(c: cargo, _path: str, cf: str, _p: pkg) {\n     if ri != -1 {\n         name = str::slice(name, 0u, ri as uint);\n     }\n-    log #fmt[\"Installing: %s\", name];\n+    #debug(\"Installing: %s\", name);\n     let old = fs::list_dir(\".\");\n     let p = run::program_output(\"rustc\", [name + \".rc\"]);\n     if p.status != 0 {\n@@ -370,22 +370,22 @@ fn install_one_crate(c: cargo, _path: str, cf: str, _p: pkg) {\n     for ct: str in created {\n         if (exec_suffix != \"\" && str::ends_with(ct, exec_suffix)) ||\n             (exec_suffix == \"\" && !str::starts_with(ct, \"./lib\")) {\n-            log #fmt[\"  bin: %s\", ct];\n+            #debug(\"  bin: %s\", ct);\n             // FIXME: need libstd fs::copy or something\n             run::run_program(\"cp\", [ct, c.bindir]);\n         } else {\n-            log #fmt[\"  lib: %s\", ct];\n+            #debug(\"  lib: %s\", ct);\n             run::run_program(\"cp\", [ct, c.libdir]);\n         }\n     }\n }\n \n fn install_source(c: cargo, path: str) {\n-    log #fmt[\"source: %s\", path];\n+    #debug(\"source: %s\", path);\n     fs::change_dir(path);\n     let contents = fs::list_dir(\".\");\n \n-    log #fmt[\"contents: %s\", str::connect(contents, \", \")];\n+    #debug(\"contents: %s\", str::connect(contents, \", \"));\n \n     let cratefiles =\n         vec::filter::<str>(contents, { |n| str::ends_with(n, \".rc\") });"}, {"sha": "e7359fb2cdf9a6cc55e4148fdf13c9d9c9206cf4", "filename": "src/comp/back/link.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Fcomp%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Fcomp%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Flink.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -588,15 +588,15 @@ fn link_binary(sess: session::session,\n         let long_libname =\n             std::os::dylib_filename(#fmt(\"%s-%s-%s\",\n                                          lm.name, lm.extras_hash, lm.vers));\n-        log \"link_meta.name: \" + lm.name;\n-        log \"long_libname: \" + long_libname;\n-        log \"out_filename: \" + out_filename;\n-        log \"dirname(out_filename): \" + fs::dirname(out_filename);\n+        #debug(\"link_meta.name:  %s\", lm.name);\n+        #debug(\"long_libname: %s\", long_libname);\n+        #debug(\"out_filename: %s\", out_filename);\n+        #debug(\"dirname(out_filename): %s\", fs::dirname(out_filename));\n \n         fs::connect(fs::dirname(out_filename), long_libname)\n     } else { out_filename };\n \n-    log \"output: \" + output;\n+    log_full(core::debug, \"output: \" + output);\n \n     // The default library location, we need this to find the runtime.\n     // The location of crates will be determined as needed.\n@@ -670,7 +670,7 @@ fn link_binary(sess: session::session,\n \n     gcc_args += rpath::get_rpath_flags(sess, output);\n \n-    log #fmt(\"gcc link args: %s\", str::connect(gcc_args, \" \"));\n+    #debug(\"gcc link args: %s\", str::connect(gcc_args, \" \"));\n     // We run 'gcc' here\n     let prog = run::program_output(prog, gcc_args);\n     if 0 != prog.status {"}, {"sha": "1339e30bacf55e562f44bedda81335ee446ba1db", "filename": "src/comp/back/rpath.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Fcomp%2Fback%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Fcomp%2Fback%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Frpath.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -21,7 +21,7 @@ fn get_rpath_flags(sess: session::session, out_filename: str) -> [str] {\n         ret [];\n     }\n \n-    log \"preparing the RPATH!\";\n+    #debug(\"preparing the RPATH!\");\n \n     let cwd = os::getcwd();\n     let sysroot = sess.filesearch().sysroot();\n@@ -52,14 +52,14 @@ fn rpaths_to_flags(rpaths: [str]) -> [str] {\n fn get_rpaths(os: session::os, cwd: fs::path, sysroot: fs::path,\n               output: fs::path, libs: [fs::path],\n               target_triple: str) -> [str] {\n-    log #fmt(\"cwd: %s\", cwd);\n-    log #fmt(\"sysroot: %s\", sysroot);\n-    log #fmt(\"output: %s\", output);\n-    log #fmt(\"libs:\");\n+    #debug(\"cwd: %s\", cwd);\n+    #debug(\"sysroot: %s\", sysroot);\n+    #debug(\"output: %s\", output);\n+    #debug(\"libs:\");\n     for libpath in libs {\n-        log #fmt(\"    %s\", libpath);\n+        #debug(\"    %s\", libpath);\n     }\n-    log #fmt(\"target_triple: %s\", target_triple);\n+    #debug(\"target_triple: %s\", target_triple);\n \n     // Use relative paths to the libraries. Binaries can be moved\n     // as long as they maintain the relative relationship to the\n@@ -74,9 +74,9 @@ fn get_rpaths(os: session::os, cwd: fs::path, sysroot: fs::path,\n     let fallback_rpaths = [get_install_prefix_rpath(cwd, target_triple)];\n \n     fn log_rpaths(desc: str, rpaths: [str]) {\n-        log #fmt(\"%s rpaths:\", desc);\n+        #debug(\"%s rpaths:\", desc);\n         for rpath in rpaths {\n-            log #fmt(\"    %s\", rpath);\n+            #debug(\"    %s\", rpath);\n         }\n     }\n "}, {"sha": "98460ae2a921d6ba9aea7aa7560c0f99868ab867", "filename": "src/comp/front/attr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Fcomp%2Ffront%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Fcomp%2Ffront%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fattr.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -34,7 +34,7 @@ fn find_linkage_metas(attrs: [ast::attribute]) -> [@ast::meta_item] {\n     for attr: ast::attribute in find_attrs_by_name(attrs, \"link\") {\n         alt attr.node.value.node {\n           ast::meta_list(_, items) { metas += items; }\n-          _ { log \"ignoring link attribute that has incorrect type\"; }\n+          _ { #debug(\"ignoring link attribute that has incorrect type\"); }\n         }\n     }\n     ret metas;\n@@ -140,9 +140,9 @@ fn contains(haystack: [@ast::meta_item], needle: @ast::meta_item) -> bool {\n     for item: @ast::meta_item in haystack {\n         log #fmt[\"looking in %s\",\n                  syntax::print::pprust::meta_item_to_str(*item)];\n-        if eq(item, needle) { log \"found it!\"; ret true; }\n+        if eq(item, needle) { #debug(\"found it!\"); ret true; }\n     }\n-    log \"found it not :(\";\n+    #debug(\"found it not :(\");\n     ret false;\n }\n "}, {"sha": "d2e73508f6c085ffa8315f7f37ff8f1217251d67", "filename": "src/comp/front/test.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Fcomp%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Fcomp%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Ftest.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -79,7 +79,7 @@ fn fold_item(cx: test_ctxt, &&i: @ast::item, fld: fold::ast_fold) ->\n    @ast::item {\n \n     cx.path += [i.ident];\n-    log #fmt[\"current path: %s\", ast_util::path_name_i(cx.path)];\n+    #debug(\"current path: %s\", ast_util::path_name_i(cx.path));\n \n     if is_test_fn(i) {\n         alt i.node {\n@@ -89,12 +89,12 @@ fn fold_item(cx: test_ctxt, &&i: @ast::item, fld: fold::ast_fold) ->\n                 \"unsafe functions cannot be used for tests\");\n           }\n           _ {\n-            log \"this is a test function\";\n+            #debug(\"this is a test function\");\n             let test = {span: i.span,\n                         path: cx.path, ignore: is_ignored(cx, i),\n                         should_fail: should_fail(i)};\n             cx.testfns += [test];\n-            log #fmt[\"have %u test functions\", vec::len(cx.testfns)];\n+            #debug(\"have %u test functions\", vec::len(cx.testfns));\n           }\n         }\n     }\n@@ -177,7 +177,7 @@ fn mk_test_module(cx: test_ctxt) -> @ast::item {\n          node: item_,\n          span: dummy_sp()};\n \n-    log #fmt[\"Synthetic test module:\\n%s\\n\", pprust::item_to_str(@item)];\n+    #debug(\"Synthetic test module:\\n%s\\n\", pprust::item_to_str(@item));\n \n     ret @item;\n }\n@@ -242,7 +242,7 @@ fn mk_test_desc_vec_ty(cx: test_ctxt) -> @ast::ty {\n }\n \n fn mk_test_desc_vec(cx: test_ctxt) -> @ast::expr {\n-    log #fmt[\"building test vector from %u tests\", vec::len(cx.testfns)];\n+    #debug(\"building test vector from %u tests\", vec::len(cx.testfns));\n     let descs = [];\n     for test: test in cx.testfns {\n         let test_ = test; // Satisfy alias analysis\n@@ -258,7 +258,7 @@ fn mk_test_desc_rec(cx: test_ctxt, test: test) -> @ast::expr {\n     let span = test.span;\n     let path = test.path;\n \n-    log #fmt[\"encoding %s\", ast_util::path_name_i(path)];\n+    #debug(\"encoding %s\", ast_util::path_name_i(path));\n \n     let name_lit: ast::lit =\n         nospan(ast::lit_str(ast_util::path_name_i(path)));"}, {"sha": "256170665153b0d8b096d4f853c59b7863d40770", "filename": "src/comp/lib/llvm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Fcomp%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Fcomp%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Flib%2Fllvm.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -1010,7 +1010,7 @@ fn type_to_str_inner(names: type_names, outer0: [TypeRef], ty: TypeRef) ->\n       12 { ret \"Opaque\"; }\n       13 { ret \"Vector\"; }\n       14 { ret \"Metadata\"; }\n-      _ { log_err #fmt[\"unknown TypeKind %d\", kind as int]; fail; }\n+      _ { #error(\"unknown TypeKind %d\", kind as int); fail; }\n     }\n }\n "}, {"sha": "e61c7743eed04ce7a0660af644088f2338db5dfb", "filename": "src/comp/metadata/creader.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Fcomp%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Fcomp%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fcreader.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -107,15 +107,15 @@ fn metadata_matches(crate_data: @[u8], metas: [@ast::meta_item]) -> bool {\n     log #fmt[\"matching %u metadata requirements against %u items\",\n              vec::len(metas), vec::len(linkage_metas)];\n \n-    log #fmt(\"crate metadata:\");\n+    #debug(\"crate metadata:\");\n     for have: @ast::meta_item in linkage_metas {\n-        log #fmt(\"  %s\", pprust::meta_item_to_str(*have));\n+        #debug(\"  %s\", pprust::meta_item_to_str(*have));\n     }\n \n     for needed: @ast::meta_item in metas {\n-        log #fmt[\"looking for %s\", pprust::meta_item_to_str(*needed)];\n+        #debug(\"looking for %s\", pprust::meta_item_to_str(*needed));\n         if !attr::contains(linkage_metas, needed) {\n-            log #fmt[\"missing %s\", pprust::meta_item_to_str(*needed)];\n+            #debug(\"missing %s\", pprust::meta_item_to_str(*needed));\n             ret false;\n         }\n     }\n@@ -175,26 +175,26 @@ fn find_library_crate_aux(sess: session::session,\n     let suffix: str = nn.suffix;\n \n     ret filesearch::search(filesearch, { |path|\n-        log #fmt(\"inspecting file %s\", path);\n+        #debug(\"inspecting file %s\", path);\n         let f: str = fs::basename(path);\n         if !(str::starts_with(f, prefix) && str::ends_with(f, suffix)) {\n             log #fmt[\"skipping %s, doesn't look like %s*%s\", path, prefix,\n                      suffix];\n             option::none\n         } else {\n-            log #fmt(\"%s is a candidate\", path);\n+            #debug(\"%s is a candidate\", path);\n             alt get_metadata_section(sess, path) {\n               option::some(cvec) {\n                 if !metadata_matches(cvec, metas) {\n-                    log #fmt[\"skipping %s, metadata doesn't match\", path];\n+                    #debug(\"skipping %s, metadata doesn't match\", path);\n                     option::none\n                 } else {\n-                    log #fmt[\"found %s with matching metadata\", path];\n+                    #debug(\"found %s with matching metadata\", path);\n                     option::some({ident: path, data: cvec})\n                 }\n               }\n               _ {\n-                log #fmt(\"could not load metadata for %s\", path);\n+                #debug(\"could not load metadata for %s\", path);\n                 option::none\n               }\n             }\n@@ -270,21 +270,21 @@ fn resolve_crate(e: env, ident: ast::ident, metas: [@ast::meta_item],\n \n // Go through the crate metadata and load any crates that it references\n fn resolve_crate_deps(e: env, cdata: @[u8]) -> cstore::cnum_map {\n-    log \"resolving deps of external crate\";\n+    #debug(\"resolving deps of external crate\");\n     // The map from crate numbers in the crate we're resolving to local crate\n     // numbers\n     let cnum_map = new_int_hash::<ast::crate_num>();\n     for dep: decoder::crate_dep in decoder::get_crate_deps(cdata) {\n         let extrn_cnum = dep.cnum;\n         let cname = dep.ident;\n-        log #fmt[\"resolving dep %s\", cname];\n+        #debug(\"resolving dep %s\", cname);\n         if e.crate_cache.contains_key(cname) {\n-            log \"already have it\";\n+            #debug(\"already have it\");\n             // We've already seen this crate\n             let local_cnum = e.crate_cache.get(cname);\n             cnum_map.insert(extrn_cnum, local_cnum);\n         } else {\n-            log \"need to load it\";\n+            #debug(\"need to load it\");\n             // This is a new one so we've got to load it\n             // FIXME: Need better error reporting than just a bogus span\n             let fake_span = ast_util::dummy_sp();"}, {"sha": "b85051ea09a39bd7d2dad3e6e42557a434636df4", "filename": "src/comp/metadata/cstore.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Fcomp%2Fmetadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Fcomp%2Fmetadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fcstore.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -127,16 +127,16 @@ fn get_dep_hashes(cstore: cstore) -> [str] {\n     p(cstore).use_crate_map.values {|cnum|\n         let cdata = cstore::get_crate_data(cstore, cnum);\n         let hash = decoder::get_crate_hash(cdata.data);\n-        log #fmt(\"Add hash[%s]: %s\", cdata.name, hash);\n+        #debug(\"Add hash[%s]: %s\", cdata.name, hash);\n         result += [{name: cdata.name, hash: hash}];\n     };\n     fn lteq(a: crate_hash, b: crate_hash) -> bool {\n         ret a.name <= b.name;\n     }\n     let sorted = std::sort::merge_sort(lteq, result);\n-    log \"sorted:\";\n+    #debug(\"sorted:\");\n     for x in sorted {\n-        log #fmt(\"  hash[%s]: %s\", x.name, x.hash);\n+        #debug(\"  hash[%s]: %s\", x.name, x.hash);\n     }\n     fn mapper(ch: crate_hash) -> str { ret ch.hash; }\n     ret vec::map(sorted, mapper);"}, {"sha": "56a38ec14b4919d0ee1062f6836cb5ff39984923", "filename": "src/comp/metadata/tydecode.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Fcomp%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Fcomp%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Ftydecode.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -124,7 +124,7 @@ fn parse_constr_arg(st: @pstate, _sd: str_def) -> ast::fn_constr_arg {\n             // FIXME\n             ret ast::carg_ident((c as uint) - 48u);\n         } else {\n-            log_err \"Lit args are unimplemented\";\n+            #error(\"Lit args are unimplemented\");\n             fail; // FIXME\n         }\n         /*\n@@ -210,8 +210,8 @@ fn parse_ty(st: @pstate, sd: str_def) -> ty::t {\n               'c' { kind_copyable }\n               'a' { kind_noncopyable }\n               c {\n-                log_err \"unexpected char in encoded type param: \";\n-                log_err c;\n+                #error(\"unexpected char in encoded type param: \");\n+                log_full(core::error, c);\n                 fail\n               }\n             };\n@@ -318,7 +318,7 @@ fn parse_ty(st: @pstate, sd: str_def) -> ty::t {\n         assert (next(st) as char == ']');\n         ret ty::mk_constr(st.tcx, tt, tcs);\n       }\n-      c { log_err \"unexpected char in type string: \"; log_err c; fail; }\n+      c { #error(\"unexpected char in type string: %c\", c); fail;}\n     }\n }\n \n@@ -393,7 +393,7 @@ fn parse_def_id(buf: [u8]) -> ast::def_id {\n     let len = vec::len::<u8>(buf);\n     while colon_idx < len && buf[colon_idx] != ':' as u8 { colon_idx += 1u; }\n     if colon_idx == len {\n-        log_err \"didn't find ':' when parsing def id\";\n+        #error(\"didn't find ':' when parsing def id\");\n         fail;\n     }\n     let crate_part = vec::slice::<u8>(buf, 0u, colon_idx);"}, {"sha": "957250da9fca4a75bbebbe0b1b6517a6ffd27bda", "filename": "src/comp/middle/debuginfo.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Fcomp%2Fmiddle%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Fcomp%2Fmiddle%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fdebuginfo.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -714,9 +714,9 @@ fn create_function(fcx: @fn_ctxt) -> @metadata<subprogram_md> {\n     let cx = fcx_ccx(fcx);\n     let dbg_cx = option::get(cx.dbg_cx);\n \n-    log \"~~\";\n-    log fcx.id;\n-    log cx.sess.span_str(fcx.sp);\n+    #debug(\"~~\");\n+    log_full(core::debug, fcx.id);\n+    log_full(core::debug, cx.sess.span_str(fcx.sp));\n \n     let (ident, ret_ty, id) = alt cx.ast_map.get(fcx.id) {\n       ast_map::node_item(item) {\n@@ -746,8 +746,8 @@ fn create_function(fcx: @fn_ctxt) -> @metadata<subprogram_md> {\n       }\n     };\n \n-    log ident;\n-    log id;\n+    log_full(core::debug, ident);\n+    log_full(core::debug, id);\n \n     let path = str::connect(fcx.lcx.path + [ident], \"::\");\n "}, {"sha": "71fabffe9bce3cc233281f234c3c92dfc06af244", "filename": "src/comp/middle/fn_usage.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Fcomp%2Fmiddle%2Ffn_usage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Fcomp%2Fmiddle%2Ffn_usage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ffn_usage.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -20,7 +20,7 @@ fn fn_usage_expr(expr: @ast::expr,\n             alt ctx.tcx.def_map.find(expr.id) {\n               some(ast::def_fn(_, ast::unsafe_fn.)) |\n               some(ast::def_native_fn(_, ast::unsafe_fn.)) {\n-                log_err (\"expr=\", expr_to_str(expr));\n+                log_full(core::error, (\"expr=\", expr_to_str(expr)));\n                 ctx.tcx.sess.span_fatal(\n                     expr.span,\n                     \"unsafe functions can only be called\");"}, {"sha": "3fb9c4a37988095a98490983a89a604e56ed6825", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -447,9 +447,9 @@ fn visit_fn_block_with_scope(_e: @env, decl: fn_decl, blk: ast::blk,\n                              span: span, id: node_id,\n                              sc: scopes, v: vt<scopes>) {\n     let scope = scope_fn_expr(decl, id, []);\n-    log (\"scope=\", scope);\n+    log_full(core::debug, (\"scope=\", scope));\n     visit::visit_fn_block(decl, blk, span, id, cons(scope, @sc), v);\n-    log (\"unscope\");\n+    log_full(core::debug, (\"unscope\"));\n }\n \n fn visit_block_with_scope(b: ast::blk, sc: scopes, v: vt<scopes>) {"}, {"sha": "b974164523173280c6d46d05ba92d33790737abb", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -1122,7 +1122,7 @@ fn set_glue_inlining(cx: @local_ctxt, f: ValueRef, t: ty::t) {\n fn declare_tydesc(cx: @local_ctxt, sp: span, t: ty::t, ty_params: [uint],\n                   is_obj_body: bool) ->\n    @tydesc_info {\n-    log \"+++ declare_tydesc \" + ty_to_str(cx.ccx.tcx, t);\n+    log_full(core::debug, \"+++ declare_tydesc \" + ty_to_str(cx.ccx.tcx, t));\n     let ccx = cx.ccx;\n     let llsize;\n     let llalign;\n@@ -1158,7 +1158,7 @@ fn declare_tydesc(cx: @local_ctxt, sp: span, t: ty::t, ty_params: [uint],\n           mutable cmp_glue: none::<ValueRef>,\n           ty_params: ty_params,\n           is_obj_body: is_obj_body};\n-    log \"--- declare_tydesc \" + ty_to_str(cx.ccx.tcx, t);\n+    log_full(core::debug, \"--- declare_tydesc \" + ty_to_str(cx.ccx.tcx, t));\n     ret info;\n }\n \n@@ -5713,16 +5713,16 @@ fn trans_crate(sess: session::session, crate: @ast::crate, tcx: ty::ctxt,\n     // Translate the metadata.\n     write_metadata(cx.ccx, crate);\n     if ccx.sess.get_opts().stats {\n-        log_err \"--- trans stats ---\";\n-        log_err #fmt[\"n_static_tydescs: %u\", ccx.stats.n_static_tydescs];\n-        log_err #fmt[\"n_derived_tydescs: %u\", ccx.stats.n_derived_tydescs];\n-        log_err #fmt[\"n_glues_created: %u\", ccx.stats.n_glues_created];\n-        log_err #fmt[\"n_null_glues: %u\", ccx.stats.n_null_glues];\n-        log_err #fmt[\"n_real_glues: %u\", ccx.stats.n_real_glues];\n+        #error(\"--- trans stats ---\");\n+        #error(\"n_static_tydescs: %u\", ccx.stats.n_static_tydescs);\n+        #error(\"n_derived_tydescs: %u\", ccx.stats.n_derived_tydescs);\n+        #error(\"n_glues_created: %u\", ccx.stats.n_glues_created);\n+        #error(\"n_null_glues: %u\", ccx.stats.n_null_glues);\n+        #error(\"n_real_glues: %u\", ccx.stats.n_real_glues);\n \n \n         for timing: {ident: str, time: int} in *ccx.stats.fn_times {\n-            log_err #fmt[\"time: %s took %d ms\", timing.ident, timing.time];\n+            #error(\"time: %s took %d ms\", timing.ident, timing.time);\n         }\n     }\n     ret (llmod, link_meta);"}, {"sha": "021917f3d3e49c8b1e4ec44a955bb93c3123099a", "filename": "src/comp/middle/trans_build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Fcomp%2Fmiddle%2Ftrans_build.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Fcomp%2Fmiddle%2Ftrans_build.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_build.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -516,7 +516,7 @@ fn add_span_comment(bcx: @block_ctxt, sp: span, text: str) {\n     let ccx = bcx_ccx(bcx);\n     if (!ccx.sess.get_opts().no_asm_comments) {\n         let s = text + \" (\" + ccx.sess.span_str(sp) + \")\";\n-        log s;\n+        log_full(core::debug, s);\n         add_comment(bcx, s);\n     }\n }"}, {"sha": "2cf7549da490df9b4b0bd170762d927c9e7385e6", "filename": "src/comp/middle/tstate/annotate.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Fcomp%2Fmiddle%2Ftstate%2Fannotate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Fcomp%2Fmiddle%2Ftstate%2Fannotate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fannotate.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -15,12 +15,12 @@ fn collect_ids_block(b: blk, rs: @mutable [node_id]) { *rs += [b.node.id]; }\n fn collect_ids_stmt(s: @stmt, rs: @mutable [node_id]) {\n     alt s.node {\n       stmt_decl(_, id) {\n-        log \"node_id \" + int::str(id);\n+        log_full(core::debug, \"node_id \" + int::str(id));\n         log_stmt(*s);;\n         *rs += [id];\n       }\n       stmt_expr(_, id) {\n-        log \"node_id \" + int::str(id);\n+        log_full(core::debug, \"node_id \" + int::str(id));\n         log_stmt(*s);;\n         *rs += [id];\n       }\n@@ -44,7 +44,7 @@ fn node_ids_in_fn(body: blk, rs: @mutable [node_id]) {\n \n fn init_vecs(ccx: crate_ctxt, node_ids: [node_id], len: uint) {\n     for i: node_id in node_ids {\n-        log int::str(i) + \" |-> \" + uint::str(len);\n+        log_full(core::debug, int::str(i) + \" |-> \" + uint::str(len));\n         add_node(ccx, i, empty_ann(len));\n     }\n }"}, {"sha": "6d38e2fe3a5ae900c68e33eb28936bb39641a0b1", "filename": "src/comp/middle/tstate/auxiliary.rs", "status": "modified", "additions": 38, "deletions": 33, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -77,7 +77,9 @@ fn tritv_to_str(fcx: fn_ctxt, v: tritv::t) -> str {\n     ret s;\n }\n \n-fn log_tritv(fcx: fn_ctxt, v: tritv::t) { log tritv_to_str(fcx, v); }\n+fn log_tritv(fcx: fn_ctxt, v: tritv::t) {\n+    log_full(core::debug, tritv_to_str(fcx, v));\n+}\n \n fn first_difference_string(fcx: fn_ctxt, expected: tritv::t, actual: tritv::t)\n    -> str {\n@@ -91,7 +93,9 @@ fn first_difference_string(fcx: fn_ctxt, expected: tritv::t, actual: tritv::t)\n     ret s;\n }\n \n-fn log_tritv_err(fcx: fn_ctxt, v: tritv::t) { log_err tritv_to_str(fcx, v); }\n+fn log_tritv_err(fcx: fn_ctxt, v: tritv::t) {\n+    log_full(core::error, tritv_to_str(fcx, v));\n+}\n \n fn tos(v: [uint]) -> str {\n     let rslt = \"\";\n@@ -103,51 +107,51 @@ fn tos(v: [uint]) -> str {\n     ret rslt;\n }\n \n-fn log_cond(v: [uint]) { log tos(v); }\n+fn log_cond(v: [uint]) { log_full(core::debug, tos(v)); }\n \n-fn log_cond_err(v: [uint]) { log_err tos(v); }\n+fn log_cond_err(v: [uint]) { log_full(core::error, tos(v)); }\n \n fn log_pp(pp: pre_and_post) {\n     let p1 = tritv::to_vec(pp.precondition);\n     let p2 = tritv::to_vec(pp.postcondition);\n-    log \"pre:\";\n+    #debug(\"pre:\");\n     log_cond(p1);\n-    log \"post:\";\n+    #debug(\"post:\");\n     log_cond(p2);\n }\n \n fn log_pp_err(pp: pre_and_post) {\n     let p1 = tritv::to_vec(pp.precondition);\n     let p2 = tritv::to_vec(pp.postcondition);\n-    log_err \"pre:\";\n+    #error(\"pre:\");\n     log_cond_err(p1);\n-    log_err \"post:\";\n+    #error(\"post:\");\n     log_cond_err(p2);\n }\n \n fn log_states(pp: pre_and_post_state) {\n     let p1 = tritv::to_vec(pp.prestate);\n     let p2 = tritv::to_vec(pp.poststate);\n-    log \"prestate:\";\n+    #debug(\"prestate:\");\n     log_cond(p1);\n-    log \"poststate:\";\n+    #debug(\"poststate:\");\n     log_cond(p2);\n }\n \n fn log_states_err(pp: pre_and_post_state) {\n     let p1 = tritv::to_vec(pp.prestate);\n     let p2 = tritv::to_vec(pp.poststate);\n-    log_err \"prestate:\";\n+    #error(\"prestate:\");\n     log_cond_err(p1);\n-    log_err \"poststate:\";\n+    #error(\"poststate:\");\n     log_cond_err(p2);\n }\n \n-fn print_ident(i: ident) { log \" \" + i + \" \"; }\n+fn print_ident(i: ident) { log_full(core::debug, \" \" + i + \" \"); }\n \n fn print_idents(&idents: [ident]) {\n     if vec::len::<ident>(idents) == 0u { ret; }\n-    log \"an ident: \" + vec::pop::<ident>(idents);\n+    log_full(core::debug, \"an ident: \" + vec::pop::<ident>(idents));\n     print_idents(idents);\n }\n \n@@ -303,20 +307,20 @@ fn get_ts_ann(ccx: crate_ctxt, i: node_id) -> option::t<ts_ann> {\n fn node_id_to_ts_ann(ccx: crate_ctxt, id: node_id) -> ts_ann {\n     alt get_ts_ann(ccx, id) {\n       none. {\n-        log_err \"node_id_to_ts_ann: no ts_ann for node_id \" + int::str(id);\n+        #error(\"node_id_to_ts_ann: no ts_ann for node_id %d\", id);\n         fail;\n       }\n       some(t) { ret t; }\n     }\n }\n \n fn node_id_to_poststate(ccx: crate_ctxt, id: node_id) -> poststate {\n-    log \"node_id_to_poststate\";\n+    #debug(\"node_id_to_poststate\");\n     ret node_id_to_ts_ann(ccx, id).states.poststate;\n }\n \n fn stmt_to_ann(ccx: crate_ctxt, s: stmt) -> ts_ann {\n-    log \"stmt_to_ann\";\n+    #debug(\"stmt_to_ann\");\n     alt s.node {\n       stmt_decl(_, id) { ret node_id_to_ts_ann(ccx, id); }\n       stmt_expr(_, id) { ret node_id_to_ts_ann(ccx, id); }\n@@ -326,14 +330,14 @@ fn stmt_to_ann(ccx: crate_ctxt, s: stmt) -> ts_ann {\n \n /* fails if e has no annotation */\n fn expr_states(ccx: crate_ctxt, e: @expr) -> pre_and_post_state {\n-    log \"expr_states\";\n+    #debug(\"expr_states\");\n     ret node_id_to_ts_ann(ccx, e.id).states;\n }\n \n \n /* fails if e has no annotation */\n fn expr_pp(ccx: crate_ctxt, e: @expr) -> pre_and_post {\n-    log \"expr_pp\";\n+    #debug(\"expr_pp\");\n     ret node_id_to_ts_ann(ccx, e.id).conditions;\n }\n \n@@ -344,7 +348,7 @@ fn stmt_pp(ccx: crate_ctxt, s: stmt) -> pre_and_post {\n \n /* fails if b has no annotation */\n fn block_pp(ccx: crate_ctxt, b: blk) -> pre_and_post {\n-    log \"block_pp\";\n+    #debug(\"block_pp\");\n     ret node_id_to_ts_ann(ccx, b.node.id).conditions;\n }\n \n@@ -359,7 +363,7 @@ fn clear_precond(ccx: crate_ctxt, id: node_id) {\n }\n \n fn block_states(ccx: crate_ctxt, b: blk) -> pre_and_post_state {\n-    log \"block_states\";\n+    #debug(\"block_states\");\n     ret node_id_to_ts_ann(ccx, b.node.id).states;\n }\n \n@@ -420,43 +424,43 @@ fn block_poststate(ccx: crate_ctxt, b: blk) -> poststate {\n }\n \n fn set_prestate_ann(ccx: crate_ctxt, id: node_id, pre: prestate) -> bool {\n-    log \"set_prestate_ann\";\n+    #debug(\"set_prestate_ann\");\n     ret set_prestate(node_id_to_ts_ann(ccx, id), pre);\n }\n \n fn extend_prestate_ann(ccx: crate_ctxt, id: node_id, pre: prestate) -> bool {\n-    log \"extend_prestate_ann\";\n+    #debug(\"extend_prestate_ann\");\n     ret extend_prestate(node_id_to_ts_ann(ccx, id).states.prestate, pre);\n }\n \n fn set_poststate_ann(ccx: crate_ctxt, id: node_id, post: poststate) -> bool {\n-    log \"set_poststate_ann\";\n+    #debug(\"set_poststate_ann\");\n     ret set_poststate(node_id_to_ts_ann(ccx, id), post);\n }\n \n fn extend_poststate_ann(ccx: crate_ctxt, id: node_id, post: poststate) ->\n    bool {\n-    log \"extend_poststate_ann\";\n+    #debug(\"extend_poststate_ann\");\n     ret extend_poststate(node_id_to_ts_ann(ccx, id).states.poststate, post);\n }\n \n fn set_pre_and_post(ccx: crate_ctxt, id: node_id, pre: precond,\n                     post: postcond) {\n-    log \"set_pre_and_post\";\n+    #debug(\"set_pre_and_post\");\n     let t = node_id_to_ts_ann(ccx, id);\n     set_precondition(t, pre);\n     set_postcondition(t, post);\n }\n \n fn copy_pre_post(ccx: crate_ctxt, id: node_id, sub: @expr) {\n-    log \"set_pre_and_post\";\n+    #debug(\"set_pre_and_post\");\n     let p = expr_pp(ccx, sub);\n     copy_pre_post_(ccx, id, p.precondition, p.postcondition);\n }\n \n fn copy_pre_post_(ccx: crate_ctxt, id: node_id, pre: prestate,\n                   post: poststate) {\n-    log \"set_pre_and_post\";\n+    #debug(\"set_pre_and_post\");\n     let t = node_id_to_ts_ann(ccx, id);\n     set_precondition(t, pre);\n     set_postcondition(t, post);\n@@ -499,7 +503,7 @@ fn constraints_expr(cx: ty::ctxt, e: @expr) -> [@ty::constr] {\n fn node_id_to_def_strict(cx: ty::ctxt, id: node_id) -> def {\n     alt cx.def_map.find(id) {\n       none. {\n-        log_err \"node_id_to_def: node_id \" + int::str(id) + \" has no def\";\n+        #error(\"node_id_to_def: node_id %d has no def\", id);\n         fail;\n       }\n       some(d) { ret d; }\n@@ -546,7 +550,8 @@ fn match_args(fcx: fn_ctxt, occs: @mutable [pred_args],\n     log \"match_args: looking at \" +\n             constr_args_to_str(fn (i: inst) -> str { ret i.ident; }, occ);\n     for pd: pred_args in *occs {\n-        log \"match_args: candidate \" + pred_args_to_str(pd);\n+        log_full(core::debug,\n+                 \"match_args: candidate \" + pred_args_to_str(pd));\n         fn eq(p: inst, q: inst) -> bool { ret p.node == q.node; }\n         if ty::args_eq(eq, pd.node.args, occ) { ret pd.node.bit_num; }\n     }\n@@ -750,7 +755,7 @@ fn replace(subst: subst, d: pred_args) -> [constr_arg_general_<inst>] {\n             }\n           }\n           _ {\n-            //  log_err \"##\";\n+            //  #error(\"##\");\n             rslt += [c.node];\n           }\n         }\n@@ -760,7 +765,7 @@ fn replace(subst: subst, d: pred_args) -> [constr_arg_general_<inst>] {\n     for (constr_arg_general_<tup(ident, def_id)> p in rslt) {\n         alt (p) {\n             case (carg_ident(?p)) {\n-                log_err p._0;\n+                log_full(core::error, p._0);\n             }\n             case (_) {}\n         }\n@@ -975,7 +980,7 @@ fn args_mention<T>(args: [@constr_arg_use], q: fn([T], node_id) -> bool,\n         alt (a.node) {\n             case (carg_ident(?p1)) {\n                 auto res = q(s, p1._1);\n-                log_err (res);\n+                log_full(core::error, (res));\n                 res\n                     }\n             case (_)               { false }"}, {"sha": "10f5cfa10fe4729c8b3a14fec8f412049b99b78f", "filename": "src/comp/middle/tstate/bitvectors.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Fcomp%2Fmiddle%2Ftstate%2Fbitvectors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Fcomp%2Fmiddle%2Ftstate%2Fbitvectors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fbitvectors.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -158,7 +158,7 @@ fn relax_precond_block(fcx: fn_ctxt, i: node_id, b: blk) {\n }\n \n fn gen_poststate(fcx: fn_ctxt, id: node_id, c: tsconstr) -> bool {\n-    log \"gen_poststate\";\n+    #debug(\"gen_poststate\");\n     ret set_in_poststate(bit_num(fcx, c),\n                          node_id_to_ts_ann(fcx.ccx, id).states);\n }\n@@ -174,7 +174,7 @@ fn kill_all_prestate(fcx: fn_ctxt, id: node_id) {\n \n \n fn kill_poststate(fcx: fn_ctxt, id: node_id, c: tsconstr) -> bool {\n-    log \"kill_poststate\";\n+    #debug(\"kill_poststate\");\n     ret clear_in_poststate(bit_num(fcx, c),\n                            node_id_to_ts_ann(fcx.ccx, id).states);\n }\n@@ -203,7 +203,7 @@ fn clear_in_poststate_expr(fcx: fn_ctxt, e: @expr, t: poststate) {\n }\n \n fn kill_poststate_(fcx: fn_ctxt, c: tsconstr, post: poststate) -> bool {\n-    log \"kill_poststate_\";\n+    #debug(\"kill_poststate_\");\n     ret clear_in_poststate_(bit_num(fcx, c), post);\n }\n "}, {"sha": "ea5d666f0f09ef8e8faf78ecc184a972ed6158ad", "filename": "src/comp/middle/tstate/ck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Fcomp%2Fmiddle%2Ftstate%2Fck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Fcomp%2Fmiddle%2Ftstate%2Fck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fck.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -74,7 +74,7 @@ fn check_states_stmt(s: @stmt, fcx: fn_ctxt, v: visit::vt<fn_ctxt>) {\n \n \n     log(\"check_states_stmt:\");\n-    log print::pprust::stmt_to_str(*s);\n+    log_full(core::debug, print::pprust::stmt_to_str(*s));\n     log(\"prec = \");\n     log_tritv(fcx, prec);\n     log(\"pres = \");"}, {"sha": "f73c325ccf01843a4c265832a43fa227913a4584", "filename": "src/comp/middle/tstate/collect_locals.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Fcomp%2Fmiddle%2Ftstate%2Fcollect_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Fcomp%2Fmiddle%2Ftstate%2Fcollect_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fcollect_locals.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -13,7 +13,7 @@ type ctxt = {cs: @mutable [sp_constr], tcx: ty::ctxt};\n fn collect_local(loc: @local, cx: ctxt, v: visit::vt<ctxt>) {\n     pat_bindings(loc.node.pat) {|p|\n         let ident = alt p.node { pat_bind(id, _) { id } };\n-        log \"collect_local: pushing \" + ident;;\n+        log_full(core::debug, \"collect_local: pushing \" + ident);;\n         *cx.cs += [respan(loc.span, ninit(p.id, ident))];\n     };\n     visit::visit_local(loc, cx, v);\n@@ -65,7 +65,8 @@ fn find_locals(tcx: ty::ctxt,\n \n fn add_constraint(tcx: ty::ctxt, c: sp_constr, next: uint, tbl: constr_map) ->\n    uint {\n-    log constraint_to_str(tcx, c) + \" |-> \" + uint::str(next);\n+    log_full(core::debug,\n+             constraint_to_str(tcx, c) + \" |-> \" + uint::str(next));\n     alt c.node {\n       ninit(id, i) { tbl.insert(local_def(id), cinit(next, c.span, i)); }\n       npred(p, d_id, args) {"}, {"sha": "db2c6a7d9bad7f6a4b2ef91d702bef0b2b0f0d2f", "filename": "src/comp/middle/tstate/pre_post_conditions.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -17,12 +17,12 @@ import syntax::codemap::span;\n import util::ppaux::fn_ident_to_string;\n \n fn find_pre_post_mod(_m: _mod) -> _mod {\n-    log \"implement find_pre_post_mod!\";\n+    #debug(\"implement find_pre_post_mod!\");\n     fail;\n }\n \n fn find_pre_post_native_mod(_m: native_mod) -> native_mod {\n-    log \"implement find_pre_post_native_mod\";\n+    #debug(\"implement find_pre_post_native_mod\");\n     fail;\n }\n \n@@ -86,7 +86,7 @@ fn find_pre_post_item(ccx: crate_ctxt, i: item) {\n    be the union of all postconditions for <args> */\n fn find_pre_post_exprs(fcx: fn_ctxt, args: [@expr], id: node_id) {\n     if vec::len::<@expr>(args) > 0u {\n-        log \"find_pre_post_exprs: oper =\";\n+        #debug(\"find_pre_post_exprs: oper =\");\n         log_expr(*args[0]);\n     }\n     fn do_one(fcx: fn_ctxt, e: @expr) { find_pre_post_expr(fcx, e); }\n@@ -276,7 +276,7 @@ fn handle_var(fcx: fn_ctxt, rslt: pre_and_post, id: node_id, name: ident) {\n }\n \n fn handle_var_def(fcx: fn_ctxt, rslt: pre_and_post, def: def, name: ident) {\n-    log (\"handle_var_def: \", def, name);\n+    log_full(core::debug, (\"handle_var_def: \", def, name));\n     alt def {\n       def_local(d_id, _) | def_arg(d_id, _) {\n         use_var(fcx, d_id.node);\n@@ -302,7 +302,7 @@ fn find_pre_post_expr_fn_upvars(fcx: fn_ctxt, e: @expr) {\n     let rslt = expr_pp(fcx.ccx, e);\n     clear_pp(rslt);\n     for def in *freevars::get_freevars(fcx.ccx.tcx, e.id) {\n-        log (\"handle_var_def: def=\", def);\n+        log_full(core::debug, (\"handle_var_def: def=\", def));\n         handle_var_def(fcx, rslt, def.def, \"upvar\");\n     }\n }\n@@ -358,7 +358,7 @@ fn find_pre_post_expr(fcx: fn_ctxt, e: @expr) {\n         vec::iter(cap_clause.moves, use_cap_item);\n \n         vec::iter(cap_clause.moves) { |cap_item|\n-            log (\"forget_in_postcond: \", cap_item);\n+            log_full(core::debug, (\"forget_in_postcond: \", cap_item));\n             forget_in_postcond(fcx, e.id, cap_item.id);\n         }\n       }\n@@ -565,7 +565,7 @@ fn find_pre_post_expr(fcx: fn_ctxt, e: @expr) {\n }\n \n fn find_pre_post_stmt(fcx: fn_ctxt, s: stmt) {\n-    log \"stmt =\";\n+    #debug(\"stmt =\");\n     log_stmt(s);\n     alt s.node {\n       stmt_decl(adecl, id) {\n@@ -678,9 +678,9 @@ fn find_pre_post_block(fcx: fn_ctxt, b: blk) {\n     fn do_one_(fcx: fn_ctxt, s: @stmt) {\n         find_pre_post_stmt(fcx, *s);\n         /*\n-                log_err \"pre_post for stmt:\";\n+                #error(\"pre_post for stmt:\");\n                 log_stmt_err(*s);\n-                log_err \"is:\";\n+                #error(\"is:\");\n                 log_pp_err(stmt_pp(fcx.ccx, *s));\n         */\n     }"}, {"sha": "a0f264e921a96d0dc96c1d86c41dc7b9e7ebc4d1", "filename": "src/comp/middle/tstate/states.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -468,15 +468,15 @@ fn find_pre_post_state_expr(fcx: fn_ctxt, pres: prestate, e: @expr) -> bool {\n       }\n       expr_while(test, body) {\n         /*\n-        log_err \"in a while loop:\";\n+        #error(\"in a while loop:\");\n         log_expr_err(*e);\n         aux::log_tritv_err(fcx, block_poststate(fcx.ccx, body));\n         aux::log_tritv_err(fcx, pres);\n         */\n         let loop_pres =\n             intersect_states(block_poststate(fcx.ccx, body), pres);\n         // aux::log_tritv_err(fcx, loop_pres);\n-        // log_err \"---------------\";\n+        // #error(\"---------------\");\n \n         let changed =\n             set_prestate_ann(fcx.ccx, e.id, loop_pres) |\n@@ -621,14 +621,14 @@ fn find_pre_post_state_stmt(fcx: fn_ctxt, pres: prestate, s: @stmt) -> bool {\n     let stmt_ann = stmt_to_ann(fcx.ccx, *s);\n \n     /*\n-        log_err (\"[\" + fcx.name + \"]\");\n-        log_err \"*At beginning: stmt = \";\n+        log_full(core::error, (\"[\" + fcx.name + \"]\"));\n+        #error(\"*At beginning: stmt = \");\n         log_stmt_err(*s);\n-        log_err \"*prestate = \";\n+        #error(\"*prestate = \");\n         log_tritv_err(fcx, stmt_ann.states.prestate);\n-        log_err \"*poststate =\";\n+        #error(\"*poststate =\");\n         log_tritv_err(fcx, stmt_ann.states.poststate);\n-        log_err \"pres = \";\n+        #error(\"pres = \");\n         log_tritv_err(fcx, pres);\n     */\n \n@@ -646,14 +646,14 @@ fn find_pre_post_state_stmt(fcx: fn_ctxt, pres: prestate, s: @stmt) -> bool {\n                 set_poststate(stmt_ann, c_and_p.post) | c_and_p.changed;\n \n             /*\n-                            log_err \"Summary: stmt = \";\n+                            #error(\"Summary: stmt = \");\n                             log_stmt_err(*s);\n-                            log_err \"prestate = \";\n+                            #error(\"prestate = \");\n                             log_tritv_err(fcx, stmt_ann.states.prestate);\n-                            log_err \"poststate =\";\n+                            #error(\"poststate =\");\n                             log_tritv_err(fcx, stmt_ann.states.poststate);\n-                            log_err \"changed =\";\n-                            log_err changed;\n+                            #error(\"changed =\");\n+                            log_full(core::error, changed);\n             */\n \n             ret changed;\n@@ -671,7 +671,7 @@ fn find_pre_post_state_stmt(fcx: fn_ctxt, pres: prestate, s: @stmt) -> bool {\n                 set_poststate(stmt_ann, expr_poststate(fcx.ccx, ex));\n \n         /*\n-        log_err \"Finally:\";\n+        #error(\"Finally:\");\n         log_stmt_err(*s);\n         log_err(\"prestate = \");\n         log_err(bitv::to_str(stmt_ann.states.prestate));\n@@ -718,16 +718,16 @@ fn find_pre_post_state_block(fcx: fn_ctxt, pres0: prestate, b: blk) -> bool {\n \n \n     /*\n-        log_err \"For block:\";\n+        #error(\"For block:\");\n         log_block_err(b);\n-        log_err \"poststate = \";\n+        #error(\"poststate = \");\n         log_states_err(block_states(fcx.ccx, b));\n-        log_err \"pres0:\";\n+        #error(\"pres0:\");\n         log_tritv_err(fcx, pres0);\n-        log_err \"post:\";\n+        #error(\"post:\");\n         log_tritv_err(fcx, post);\n-        log_err \"changed = \";\n-        log_err changed;\n+        #error(\"changed = \");\n+        log_full(core::error, changed);\n     */\n \n     ret changed;\n@@ -773,8 +773,8 @@ fn find_pre_post_state_fn(fcx: fn_ctxt,\n     }\n \n     /*\n-        log_err \"find_pre_post_state_fn\";\n-        log_err changed;\n+        #error(\"find_pre_post_state_fn\");\n+        log_full(core::error, changed);\n         fcx.ccx.tcx.sess.span_note(f_body.span, fcx.name);\n     */\n "}, {"sha": "593720f4d6f5ef83bdad5fda5ed0d24fa111a1c3", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -1535,7 +1535,7 @@ fn is_pred_ty(cx: ctxt, fty: t) -> bool {\n fn ty_var_id(cx: ctxt, typ: t) -> int {\n     alt struct(cx, typ) {\n       ty::ty_var(vid) { ret vid; }\n-      _ { log_err \"ty_var_id called on non-var ty\"; fail; }\n+      _ { #error(\"ty_var_id called on non-var ty\"); fail; }\n     }\n }\n \n@@ -2450,7 +2450,7 @@ mod unify {\n               none. { typespec = \"\"; }\n               some(typ) { typespec = \" =\" + ty_to_str(tcx, typ); }\n             }\n-            log_err #fmt[\"set %u:%s%s\", i, typespec, sets];\n+            #error(\"set %u:%s%s\", i, typespec, sets);\n             i += 1u;\n         }\n     }"}, {"sha": "f9faa39dbf6aa36dc687fea1932f4611e4d19839", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -1530,7 +1530,8 @@ fn check_expr_fn_with_unifier(fcx: @fn_ctxt,\n \n fn check_expr_with_unifier(fcx: @fn_ctxt, expr: @ast::expr, unify: unifier,\n                            expected: ty::t) -> bool {\n-    //log_err \"typechecking expr \" + syntax::print::pprust::expr_to_str(expr);\n+    #debug(\"typechecking expr %s\",\n+           syntax::print::pprust::expr_to_str(expr));\n \n     // A generic function to factor out common logic from call and bind\n     // expressions."}, {"sha": "b91c19644bb16ba665f32770ec3989359cff8d00", "filename": "src/comp/syntax/ext/fmt.rs", "status": "modified", "additions": 32, "deletions": 28, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Fcomp%2Fsyntax%2Fext%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Fcomp%2Fsyntax%2Fext%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Ffmt.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -28,8 +28,8 @@ fn expand_syntax_ext(cx: ext_ctxt, sp: span, arg: @ast::expr,\n         expr_to_str(cx, args[0],\n                     \"first argument to #fmt must be a \" + \"string literal.\");\n     let fmtspan = args[0].span;\n-    log \"Format string:\";\n-    log fmt;\n+    #debug(\"Format string:\");\n+    log_full(core::debug, fmt);\n     fn parse_fmt_err_(cx: ext_ctxt, sp: span, msg: str) -> ! {\n         cx.span_fatal(sp, msg);\n     }\n@@ -252,53 +252,57 @@ fn pieces_to_expr(cx: ext_ctxt, sp: span, pieces: [piece], args: [@ast::expr])\n     }\n     fn log_conv(c: conv) {\n         alt c.param {\n-          some(p) { log \"param: \" + int::to_str(p, 10u); }\n-          _ { log \"param: none\"; }\n+          some(p) { log_full(core::debug, \"param: \" + int::to_str(p, 10u)); }\n+          _ { #debug(\"param: none\"); }\n         }\n         for f: flag in c.flags {\n             alt f {\n-              flag_left_justify. { log \"flag: left justify\"; }\n-              flag_left_zero_pad. { log \"flag: left zero pad\"; }\n-              flag_space_for_sign. { log \"flag: left space pad\"; }\n-              flag_sign_always. { log \"flag: sign always\"; }\n-              flag_alternate. { log \"flag: alternate\"; }\n+              flag_left_justify. { #debug(\"flag: left justify\"); }\n+              flag_left_zero_pad. { #debug(\"flag: left zero pad\"); }\n+              flag_space_for_sign. { #debug(\"flag: left space pad\"); }\n+              flag_sign_always. { #debug(\"flag: sign always\"); }\n+              flag_alternate. { #debug(\"flag: alternate\"); }\n             }\n         }\n         alt c.width {\n-          count_is(i) { log \"width: count is \" + int::to_str(i, 10u); }\n+          count_is(i) { log_full(core::debug,\n+                                 \"width: count is \" + int::to_str(i, 10u)); }\n           count_is_param(i) {\n-            log \"width: count is param \" + int::to_str(i, 10u);\n+            log_full(core::debug,\n+                     \"width: count is param \" + int::to_str(i, 10u));\n           }\n-          count_is_next_param. { log \"width: count is next param\"; }\n-          count_implied. { log \"width: count is implied\"; }\n+          count_is_next_param. { #debug(\"width: count is next param\"); }\n+          count_implied. { #debug(\"width: count is implied\"); }\n         }\n         alt c.precision {\n-          count_is(i) { log \"prec: count is \" + int::to_str(i, 10u); }\n+          count_is(i) { log_full(core::debug,\n+                                 \"prec: count is \" + int::to_str(i, 10u)); }\n           count_is_param(i) {\n-            log \"prec: count is param \" + int::to_str(i, 10u);\n+            log_full(core::debug,\n+                     \"prec: count is param \" + int::to_str(i, 10u));\n           }\n-          count_is_next_param. { log \"prec: count is next param\"; }\n-          count_implied. { log \"prec: count is implied\"; }\n+          count_is_next_param. { #debug(\"prec: count is next param\"); }\n+          count_implied. { #debug(\"prec: count is implied\"); }\n         }\n         alt c.ty {\n-          ty_bool. { log \"type: bool\"; }\n-          ty_str. { log \"type: str\"; }\n-          ty_char. { log \"type: char\"; }\n+          ty_bool. { #debug(\"type: bool\"); }\n+          ty_str. { #debug(\"type: str\"); }\n+          ty_char. { #debug(\"type: char\"); }\n           ty_int(s) {\n             alt s {\n-              signed. { log \"type: signed\"; }\n-              unsigned. { log \"type: unsigned\"; }\n+              signed. { #debug(\"type: signed\"); }\n+              unsigned. { #debug(\"type: unsigned\"); }\n             }\n           }\n-          ty_bits. { log \"type: bits\"; }\n+          ty_bits. { #debug(\"type: bits\"); }\n           ty_hex(cs) {\n             alt cs {\n-              case_upper. { log \"type: uhex\"; }\n-              case_lower. { log \"type: lhex\"; }\n+              case_upper. { #debug(\"type: uhex\"); }\n+              case_lower. { #debug(\"type: lhex\"); }\n             }\n           }\n-          ty_octal. { log \"type: octal\"; }\n-          ty_float. { log \"type: float\"; }\n+          ty_octal. { #debug(\"type: octal\"); }\n+          ty_float. { #debug(\"type: float\"); }\n         }\n     }\n     let fmt_sp = args[0].span;\n@@ -318,7 +322,7 @@ fn pieces_to_expr(cx: ext_ctxt, sp: span, pieces: [piece], args: [@ast::expr])\n                               \"not enough arguments to #fmt \" +\n                                   \"for the given format string\");\n             }\n-            log \"Building conversion:\";\n+            #debug(\"Building conversion:\");\n             log_conv(conv);\n             let arg_expr = args[n];\n             let c_expr = make_new_conv(cx, fmt_sp, conv, arg_expr);"}, {"sha": "904b7698118c9d973e96957dafab029162e196bf", "filename": "src/comp/syntax/parse/eval.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Fcomp%2Fsyntax%2Fparse%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Fcomp%2Fsyntax%2Fparse%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Feval.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -29,7 +29,7 @@ fn eval_crate_directives(cx: ctx, cdirs: [@ast::crate_directive], prefix: str,\n fn eval_crate_directives_to_mod(cx: ctx, cdirs: [@ast::crate_directive],\n                                 prefix: str, suffix: option::t<str>)\n     -> (ast::_mod, [ast::attribute]) {\n-    log #fmt(\"eval crate prefix: %s\", prefix);\n+    #debug(\"eval crate prefix: %s\", prefix);\n     log #fmt(\"eval crate suffix: %s\",\n              option::from_maybe(\"none\", suffix));\n     let (cview_items, citems, cattrs)\n@@ -72,9 +72,9 @@ fn parse_companion_mod(cx: ctx, prefix: str, suffix: option::t<str>)\n     }\n \n     let modpath = companion_file(prefix, suffix);\n-    log #fmt(\"looking for companion mod %s\", modpath);\n+    #debug(\"looking for companion mod %s\", modpath);\n     if file_exists(modpath) {\n-        log \"found companion mod\";\n+        #debug(\"found companion mod\");\n         let p0 = new_parser_from_file(cx.sess, cx.cfg, modpath,\n                                      cx.chpos, cx.byte_pos, SOURCE_FILE);\n         let inner_attrs = parse_inner_attrs_and_next(p0);"}, {"sha": "9821f7bdfa99dfa127e64581afc8f949a7acd398", "filename": "src/comp/syntax/parse/lexer.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -560,7 +560,7 @@ fn consume_non_eol_whitespace(rdr: reader) {\n }\n \n fn push_blank_line_comment(rdr: reader, &comments: [cmnt]) {\n-    log \">>> blank-line comment\";\n+    #debug(\">>> blank-line comment\");\n     let v: [str] = [];\n     comments += [{style: blank_line, lines: v, pos: rdr.get_chpos()}];\n }\n@@ -575,16 +575,16 @@ fn consume_whitespace_counting_blank_lines(rdr: reader, &comments: [cmnt]) {\n }\n \n fn read_line_comments(rdr: reader, code_to_the_left: bool) -> cmnt {\n-    log \">>> line comments\";\n+    #debug(\">>> line comments\");\n     let p = rdr.get_chpos();\n     let lines: [str] = [];\n     while rdr.curr() == '/' && rdr.next() == '/' {\n         let line = read_one_line_comment(rdr);\n-        log line;\n+        log_full(core::debug, line);\n         lines += [line];\n         consume_non_eol_whitespace(rdr);\n     }\n-    log \"<<< line comments\";\n+    #debug(\"<<< line comments\");\n     ret {style: if code_to_the_left { trailing } else { isolated },\n          lines: lines,\n          pos: p};\n@@ -603,12 +603,12 @@ fn trim_whitespace_prefix_and_push_line(&lines: [str], s: str, col: uint) {\n             s1 = str::slice(s, col, str::byte_len(s));\n         } else { s1 = \"\"; }\n     } else { s1 = s; }\n-    log \"pushing line: \" + s1;\n+    log_full(core::debug, \"pushing line: \" + s1);\n     lines += [s1];\n }\n \n fn read_block_comment(rdr: reader, code_to_the_left: bool) -> cmnt {\n-    log \">>> block comment\";\n+    #debug(\">>> block comment\");\n     let p = rdr.get_chpos();\n     let lines: [str] = [];\n     let col: uint = rdr.get_col();\n@@ -617,7 +617,7 @@ fn read_block_comment(rdr: reader, code_to_the_left: bool) -> cmnt {\n     let curr_line = \"/*\";\n     let level: int = 1;\n     while level > 0 {\n-        log #fmt[\"=== block comment level %d\", level];\n+        #debug(\"=== block comment level %d\", level);\n         if rdr.is_eof() { rdr.err(\"unterminated block comment\"); fail; }\n         if rdr.curr() == '\\n' {\n             trim_whitespace_prefix_and_push_line(lines, curr_line, col);\n@@ -648,7 +648,7 @@ fn read_block_comment(rdr: reader, code_to_the_left: bool) -> cmnt {\n     if !rdr.is_eof() && rdr.curr() != '\\n' && vec::len(lines) == 1u {\n         style = mixed;\n     }\n-    log \"<<< block comment\";\n+    #debug(\"<<< block comment\");\n     ret {style: style, lines: lines, pos: p};\n }\n \n@@ -658,13 +658,13 @@ fn peeking_at_comment(rdr: reader) -> bool {\n }\n \n fn consume_comment(rdr: reader, code_to_the_left: bool, &comments: [cmnt]) {\n-    log \">>> consume comment\";\n+    #debug(\">>> consume comment\");\n     if rdr.curr() == '/' && rdr.next() == '/' {\n         comments += [read_line_comments(rdr, code_to_the_left)];\n     } else if rdr.curr() == '/' && rdr.next() == '*' {\n         comments += [read_block_comment(rdr, code_to_the_left)];\n     } else { fail; }\n-    log \"<<< consume comment\";\n+    #debug(\"<<< consume comment\");\n }\n \n fn is_lit(t: token::token) -> bool {\n@@ -707,7 +707,7 @@ fn gather_comments_and_literals(cm: codemap::codemap, path: str,\n         if is_lit(tok.tok) {\n             literals += [{lit: rdr.get_str_from(tok.bpos), pos: tok.chpos}];\n         }\n-        log \"tok: \" + token::to_str(rdr, tok.tok);\n+        log_full(core::debug, \"tok: \" + token::to_str(rdr, tok.tok));\n         first_read = false;\n     }\n     ret {cmnts: comments, lits: literals};"}, {"sha": "556ce0b774a58a515334d9a8835d260c566e537a", "filename": "src/comp/syntax/print/pp.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Fcomp%2Fsyntax%2Fprint%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Fcomp%2Fsyntax%2Fprint%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpp.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -101,7 +101,7 @@ fn mk_printer(out: io::writer, linewidth: uint) -> printer {\n     // fall behind.\n \n     let n: uint = 3u * linewidth;\n-    log #fmt[\"mk_printer %u\", linewidth];\n+    #debug(\"mk_printer %u\", linewidth);\n     let token: [mutable token] = vec::init_elt_mut(EOF, n);\n     let size: [mutable int] = vec::init_elt_mut(0, n);\n     let scan_stack: [mutable uint] = vec::init_elt_mut(0u, n);\n@@ -241,7 +241,7 @@ obj printer(out: io::writer,\n     fn replace_last_token(t: token) { token[right] = t; }\n \n     fn pretty_print(t: token) {\n-        log #fmt[\"pp [%u,%u]\", left, right];\n+        #debug(\"pp [%u,%u]\", left, right);\n         alt t {\n           EOF. {\n             if !scan_stack_empty {\n@@ -257,17 +257,17 @@ obj printer(out: io::writer,\n                 left = 0u;\n                 right = 0u;\n             } else { self.advance_right(); }\n-            log #fmt[\"pp BEGIN/buffer [%u,%u]\", left, right];\n+            #debug(\"pp BEGIN/buffer [%u,%u]\", left, right);\n             token[right] = t;\n             size[right] = -right_total;\n             self.scan_push(right);\n           }\n           END. {\n             if scan_stack_empty {\n-                log #fmt[\"pp END/print [%u,%u]\", left, right];\n+                #debug(\"pp END/print [%u,%u]\", left, right);\n                 self.print(t, 0);\n             } else {\n-                log #fmt[\"pp END/buffer [%u,%u]\", left, right];\n+                #debug(\"pp END/buffer [%u,%u]\", left, right);\n                 self.advance_right();\n                 token[right] = t;\n                 size[right] = -1;\n@@ -281,7 +281,7 @@ obj printer(out: io::writer,\n                 left = 0u;\n                 right = 0u;\n             } else { self.advance_right(); }\n-            log #fmt[\"pp BREAK/buffer [%u,%u]\", left, right];\n+            #debug(\"pp BREAK/buffer [%u,%u]\", left, right);\n             self.check_stack(0);\n             self.scan_push(right);\n             token[right] = t;\n@@ -290,10 +290,10 @@ obj printer(out: io::writer,\n           }\n           STRING(s, len) {\n             if scan_stack_empty {\n-                log #fmt[\"pp STRING/print [%u,%u]\", left, right];\n+                #debug(\"pp STRING/print [%u,%u]\", left, right);\n                 self.print(t, len);\n             } else {\n-                log #fmt[\"pp STRING/buffer [%u,%u]\", left, right];\n+                #debug(\"pp STRING/buffer [%u,%u]\", left, right);\n                 self.advance_right();\n                 token[right] = t;\n                 size[right] = len;\n@@ -311,7 +311,7 @@ obj printer(out: io::writer,\n                      right_total - left_total, space];\n             if !scan_stack_empty {\n                 if left == scan_stack[bottom] {\n-                    log #fmt[\"setting %u to infinity and popping\", left];\n+                    #debug(\"setting %u to infinity and popping\", left);\n                     size[self.scan_pop_bottom()] = size_infinity;\n                 }\n             }\n@@ -320,7 +320,7 @@ obj printer(out: io::writer,\n         }\n     }\n     fn scan_push(x: uint) {\n-        log #fmt[\"scan_push %u\", x];\n+        #debug(\"scan_push %u\", x);\n         if scan_stack_empty {\n             scan_stack_empty = false;\n         } else { top += 1u; top %= buf_len; assert (top != bottom); }\n@@ -349,7 +349,7 @@ obj printer(out: io::writer,\n         assert (right != left);\n     }\n     fn advance_left(x: token, L: int) {\n-        log #fmt[\"advnce_left [%u,%u], sizeof(%u)=%d\", left, right, left, L];\n+        #debug(\"advnce_left [%u,%u], sizeof(%u)=%d\", left, right, left, L);\n         if L >= 0 {\n             self.print(x, L);\n             alt x {\n@@ -388,13 +388,13 @@ obj printer(out: io::writer,\n         }\n     }\n     fn print_newline(amount: int) {\n-        log #fmt[\"NEWLINE %d\", amount];\n+        #debug(\"NEWLINE %d\", amount);\n         out.write_str(\"\\n\");\n         pending_indentation = 0;\n         self.indent(amount);\n     }\n     fn indent(amount: int) {\n-        log #fmt[\"INDENT %d\", amount];\n+        #debug(\"INDENT %d\", amount);\n         pending_indentation += amount;\n     }\n     fn top() -> print_stack_elt {\n@@ -413,51 +413,51 @@ obj printer(out: io::writer,\n     fn print(x: token, L: int) {\n         log #fmt[\"print %s %d (remaining line space=%d)\", tok_str(x), L,\n                  space];\n-        log buf_str(token, size, left, right, 6u);\n+        log_full(core::debug, buf_str(token, size, left, right, 6u));\n         alt x {\n           BEGIN(b) {\n             if L > space {\n                 let col = margin - space + b.offset;\n-                log #fmt[\"print BEGIN -> push broken block at col %d\", col];\n+                #debug(\"print BEGIN -> push broken block at col %d\", col);\n                 print_stack += [{offset: col, pbreak: broken(b.breaks)}];\n             } else {\n-                log \"print BEGIN -> push fitting block\";\n+                #debug(\"print BEGIN -> push fitting block\");\n                 print_stack += [{offset: 0, pbreak: fits}];\n             }\n           }\n           END. {\n-            log \"print END -> pop END\";\n+            #debug(\"print END -> pop END\");\n             assert (vec::len(print_stack) != 0u);\n             vec::pop(print_stack);\n           }\n           BREAK(b) {\n             let top = self.top();\n             alt top.pbreak {\n               fits. {\n-                log \"print BREAK in fitting block\";\n+                #debug(\"print BREAK in fitting block\");\n                 space -= b.blank_space;\n                 self.indent(b.blank_space);\n               }\n               broken(consistent.) {\n-                log \"print BREAK in consistent block\";\n+                #debug(\"print BREAK in consistent block\");\n                 self.print_newline(top.offset + b.offset);\n                 space = margin - (top.offset + b.offset);\n               }\n               broken(inconsistent.) {\n                 if L > space {\n-                    log \"print BREAK w/ newline in inconsistent\";\n+                    #debug(\"print BREAK w/ newline in inconsistent\");\n                     self.print_newline(top.offset + b.offset);\n                     space = margin - (top.offset + b.offset);\n                 } else {\n-                    log \"print BREAK w/o newline in inconsistent\";\n+                    #debug(\"print BREAK w/o newline in inconsistent\");\n                     self.indent(b.blank_space);\n                     space -= b.blank_space;\n                 }\n               }\n             }\n           }\n           STRING(s, len) {\n-            log \"print STRING\";\n+            #debug(\"print STRING\");\n             assert (L == len);\n             // assert L <= space;\n "}, {"sha": "206cd7156e8e4b88da2a3562f446072be25cd134", "filename": "src/comp/util/common.rs", "status": "modified", "additions": 29, "deletions": 11, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Fcomp%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Fcomp%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Futil%2Fcommon.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -35,31 +35,49 @@ fn field_exprs(fields: [ast::field]) -> [@ast::expr] {\n     ret es;\n }\n \n-fn log_expr(e: ast::expr) { log print::pprust::expr_to_str(@e); }\n+fn log_expr(e: ast::expr) {\n+    log_full(core::debug, print::pprust::expr_to_str(@e));\n+}\n \n-fn log_expr_err(e: ast::expr) { log_err print::pprust::expr_to_str(@e); }\n+fn log_expr_err(e: ast::expr) {\n+    log_full(core::error, print::pprust::expr_to_str(@e));\n+}\n \n-fn log_ty_err(t: @ty) { log_err print::pprust::ty_to_str(t); }\n+fn log_ty_err(t: @ty) {\n+    log_full(core::error, print::pprust::ty_to_str(t));\n+}\n \n-fn log_pat_err(p: @pat) { log_err print::pprust::pat_to_str(p); }\n+fn log_pat_err(p: @pat) {\n+    log_full(core::error, print::pprust::pat_to_str(p));\n+}\n \n-fn log_block(b: ast::blk) { log print::pprust::block_to_str(b); }\n+fn log_block(b: ast::blk) {\n+    log_full(core::debug, print::pprust::block_to_str(b));\n+}\n \n-fn log_block_err(b: ast::blk) { log_err print::pprust::block_to_str(b); }\n+fn log_block_err(b: ast::blk) {\n+    log_full(core::error, print::pprust::block_to_str(b));\n+}\n \n-fn log_item_err(i: @ast::item) { log_err print::pprust::item_to_str(i); }\n+fn log_item_err(i: @ast::item) {\n+    log_full(core::error, print::pprust::item_to_str(i));\n+}\n \n fn log_fn(f: ast::_fn, name: ast::ident, params: [ast::ty_param]) {\n-    log print::pprust::fun_to_str(f, name, params);\n+    log_full(core::debug, print::pprust::fun_to_str(f, name, params));\n }\n \n fn log_fn_err(f: ast::_fn, name: ast::ident, params: [ast::ty_param]) {\n-    log_err print::pprust::fun_to_str(f, name, params);\n+    log_full(core::error, print::pprust::fun_to_str(f, name, params));\n }\n \n-fn log_stmt(st: ast::stmt) { log print::pprust::stmt_to_str(st); }\n+fn log_stmt(st: ast::stmt) {\n+    log_full(core::debug, print::pprust::stmt_to_str(st));\n+}\n \n-fn log_stmt_err(st: ast::stmt) { log_err print::pprust::stmt_to_str(st); }\n+fn log_stmt_err(st: ast::stmt) {\n+    log_full(core::error, print::pprust::stmt_to_str(st));\n+}\n \n fn has_nonlocal_exits(b: ast::blk) -> bool {\n     let has_exits = @mutable false;"}, {"sha": "b7942ce8f48b4a8ef08744f2d2cf6fd2604df408", "filename": "src/comp/util/filesearch.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Fcomp%2Futil%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Fcomp%2Futil%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Futil%2Ffilesearch.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -50,22 +50,22 @@ fn mk_filesearch(maybe_sysroot: option::t<fs::path>,\n     }\n \n     let sysroot = get_sysroot(maybe_sysroot);\n-    log #fmt(\"using sysroot = %s\", sysroot);\n+    #debug(\"using sysroot = %s\", sysroot);\n     ret filesearch_impl(sysroot, addl_lib_search_paths, target_triple);\n }\n \n // FIXME #1001: This can't be an obj method\n fn search<copy T>(filesearch: filesearch, pick: pick<T>) -> option::t<T> {\n     for lib_search_path in filesearch.lib_search_paths() {\n-        log #fmt[\"searching %s\", lib_search_path];\n+        #debug(\"searching %s\", lib_search_path);\n         for path in fs::list_dir(lib_search_path) {\n-            log #fmt[\"testing %s\", path];\n+            #debug(\"testing %s\", path);\n             let maybe_picked = pick(path);\n             if option::is_some(maybe_picked) {\n-                log #fmt(\"picked %s\", path);\n+                #debug(\"picked %s\", path);\n                 ret maybe_picked;\n             } else {\n-                log #fmt(\"rejected %s\", path);\n+                #debug(\"rejected %s\", path);\n             }\n         }\n     }"}, {"sha": "d720c036d95dbf3f4aac27fd0124c10dbdc62d30", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -135,12 +135,12 @@ type tests_and_conv_fn = {\n };\n \n fn make_tests(cx: cx) -> tests_and_conv_fn {\n-    log #fmt[\"making tests from %s\", cx.config.src_base];\n+    #debug(\"making tests from %s\", cx.config.src_base);\n     let configport = port::<[u8]>();\n     let tests = [];\n     for file: str in fs::list_dir(cx.config.src_base) {\n         let file = file;\n-        log #fmt[\"inspecting file %s\", file];\n+        #debug(\"inspecting file %s\", file);\n         if is_test(cx.config, file) {\n             tests += [make_test(cx, file, configport)];\n         }"}, {"sha": "a97253119fb862c737b63fb5bfd90bd2d2cedff5", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -24,7 +24,7 @@ fn run(cx: cx, -_testfile: [u8]) {\n         // We're going to be dumping a lot of info. Start on a new line.\n         io::stdout().write_str(\"\\n\\n\");\n     }\n-    log #fmt[\"running %s\", testfile];\n+    #debug(\"running %s\", testfile);\n     let props = load_props(testfile);\n     alt cx.config.mode {\n       mode_compile_fail. { run_cfail_test(cx, props, testfile); }\n@@ -194,10 +194,10 @@ fn check_error_patterns(props: test_props, testfile: str, procres: procres) {\n     let next_err_pat = props.error_patterns[next_err_idx];\n     for line: str in str::split(procres.stdout, '\\n' as u8) {\n         if str::find(line, next_err_pat) > 0 {\n-            log #fmt[\"found error pattern %s\", next_err_pat];\n+            #debug(\"found error pattern %s\", next_err_pat);\n             next_err_idx += 1u;\n             if next_err_idx == vec::len(props.error_patterns) {\n-                log \"found all error patterns\";\n+                #debug(\"found all error patterns\");\n                 ret;\n             }\n             next_err_pat = props.error_patterns[next_err_idx];"}, {"sha": "651bef071098d5f650695948de2bb9c51c85463a", "filename": "src/compiletest/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Fcompiletest%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Fcompiletest%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Futil.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -33,6 +33,6 @@ fn path_div() -> str { \":\" }\n fn path_div() -> str { \";\" }\n \n fn logv(config: config, s: str) {\n-    log s;\n+    log_full(core::debug, s);\n     if config.verbose { io::stdout().write_line(s); }\n }"}, {"sha": "26e6b6792ee7b4875295ebdfa745bdf87bcf569e", "filename": "src/fuzzer/ast_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ffuzzer%2Fast_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ffuzzer%2Fast_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Fast_match.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -23,5 +23,5 @@ fn main() {\n     assert (!vec_equal([5, 5], [4, 5], builtin_equal));\n     assert (vec_equal([5, 5], [5, 5], builtin_equal));\n \n-    log_err \"Pass\";\n+    #error(\"Pass\");\n }"}, {"sha": "8343acaffb8cc0052fc376be61c7148c1807c7e2", "filename": "src/fuzzer/fuzzer.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ffuzzer%2Ffuzzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ffuzzer%2Ffuzzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Ffuzzer.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -236,15 +236,15 @@ fn check_variants_T<copy T>(\n   replacer: fn(ast::crate, uint, T, test_mode) -> ast::crate,\n   cx: context\n   ) {\n-    log_err #fmt(\"%s contains %u %s objects\", filename, vec::len(things), thing_label);\n+    #error(\"%s contains %u %s objects\", filename, vec::len(things), thing_label);\n \n     let L = vec::len(things);\n \n     if L < 100u {\n         under(float::min(L, 20u)) {|i|\n-            log_err \"Replacing... #\" + uint::str(i);\n+            log_full(core::error, \"Replacing... #\" + uint::str(i));\n             under(float::min(L, 30u)) {|j|\n-                log_err \"With... \" + stringifier(@things[j]);\n+                log_full(core::error, \"With... \" + stringifier(@things[j]));\n                 let crate2 = @replacer(crate, i, things[j], cx.mode);\n                 // It would be best to test the *crate* for stability, but testing the\n                 // string for stability is easier and ok for now.\n@@ -298,8 +298,8 @@ fn check_whole_compiler(code: str, suggested_filename_prefix: str, allow_running\n         removeDirIfExists(suggested_filename_prefix + \".dSYM\");\n       }\n       failed(s) {\n-        log_err \"check_whole_compiler failure: \" + s;\n-        log_err \"Saved as: \" + filename;\n+        log_full(core::error, \"check_whole_compiler failure: \" + s);\n+        log_full(core::error, \"Saved as: \" + filename);\n       }\n     }\n }\n@@ -320,7 +320,7 @@ fn check_running(exe_filename: str) -> happiness {\n     let p = std::run::program_output(\"/Users/jruderman/scripts/timed_run_rust_program.py\", [exe_filename]);\n     let comb = p.out + \"\\n\" + p.err;\n     if str::byte_len(comb) > 1u {\n-        log_err \"comb comb comb: \" + comb;\n+        log_full(core::error, \"comb comb comb: \" + comb);\n     }\n \n     if contains(comb, \"Assertion failed: (0), function alloc, file ../src/rt/rust_obstack.cpp\") {\n@@ -358,7 +358,7 @@ fn check_compiling(filename: str) -> happiness {\n \n     let p = std::run::program_output(\"bash\", [\"-c\", \"DYLD_LIBRARY_PATH=/Users/jruderman/code/rust/build/stage0/lib:/Users/jruderman/code/rust/build/rustllvm/ /Users/jruderman/code/rust/build/stage1/rustc \" + filename]);\n \n-    //log_err #fmt(\"Status: %d\", p.status);\n+    //#error(\"Status: %d\", p.status);\n     if p.err != \"\" {\n         if contains(p.err, \"Ptr must be a pointer to Val type\") {\n             known_bug(\"https://github.com/graydon/rust/issues/897\")\n@@ -369,7 +369,7 @@ fn check_compiling(filename: str) -> happiness {\n         } else if contains(p.err, \"cast<Ty>() argument of incompatible type!\") {\n             known_bug(\"https://github.com/graydon/rust/issues/973\")\n         } else {\n-            log_err \"Stderr: \" + p.err;\n+            log_full(core::error, \"Stderr: \" + p.err);\n             failed(\"Unfamiliar error message\")\n         }\n     } else if p.status == 0 {\n@@ -382,7 +382,7 @@ fn check_compiling(filename: str) -> happiness {\n     } else if contains(p.out, \"trans_rec expected a rec but found _|_\") {\n         known_bug(\"https://github.com/graydon/rust/issues/924\")\n     } else if contains(p.out, \"Assertion\") && contains(p.out, \"failed\") {\n-        log_err \"Stdout: \" + p.out;\n+        log_full(core::error, \"Stdout: \" + p.out);\n         failed(\"Looks like an llvm assertion failure\")\n \n     } else if contains(p.out, \"internal compiler error fail called with unsupported type _|_\") {\n@@ -396,14 +396,14 @@ fn check_compiling(filename: str) -> happiness {\n     } else if contains(p.out, \"internal compiler error unimplemented\") {\n         known_bug(\"Something unimplemented\")\n     } else if contains(p.out, \"internal compiler error\") {\n-        log_err \"Stdout: \" + p.out;\n+        log_full(core::error, \"Stdout: \" + p.out);\n         failed(\"internal compiler error\")\n \n     } else if contains(p.out, \"error:\") {\n         cleanly_rejected(\"rejected with span_error\")\n     } else {\n-        log_err p.status;\n-        log_err \"!Stdout: \" + p.out;\n+        log_full(core::error, p.status);\n+        log_full(core::error, \"!Stdout: \" + p.out);\n         failed(\"What happened?\")\n     }\n }\n@@ -500,9 +500,9 @@ fn check_roundtrip_convergence(code: str, maxIters: uint) {\n     }\n \n     if old == new {\n-        log_err #fmt[\"Converged after %u iterations\", i];\n+        #error(\"Converged after %u iterations\", i);\n     } else {\n-        log_err #fmt[\"Did not converge after %u iterations!\", i];\n+        #error(\"Did not converge after %u iterations!\", i);\n         write_file(\"round-trip-a.rs\", old);\n         write_file(\"round-trip-b.rs\", new);\n         std::run::run_program(\"diff\",\n@@ -513,12 +513,12 @@ fn check_roundtrip_convergence(code: str, maxIters: uint) {\n }\n \n fn check_convergence(files: [str]) {\n-    log_err #fmt[\"pp convergence tests: %u files\", vec::len(files)];\n+    #error(\"pp convergence tests: %u files\", vec::len(files));\n     for file in files {\n         if !file_might_not_converge(file) {\n             let s = result::get(io::read_whole_file_str(file));\n             if !content_might_not_converge(s) {\n-                log_err #fmt[\"pp converge: %s\", file];\n+                #error(\"pp converge: %s\", file);\n                 // Change from 7u to 2u once https://github.com/graydon/rust/issues/850 is fixed\n                 check_roundtrip_convergence(s, 7u);\n             }\n@@ -543,7 +543,7 @@ fn check_variants(files: [str], cx: context) {\n             cont;\n         }\n \n-        log_err \"check_variants: \" + file;\n+        log_full(core::error, \"check_variants: \" + file);\n         let sess = @{cm: codemap::new_codemap(), mutable next_id: 0};\n         let crate =\n             parser::parse_crate_from_source_str(\n@@ -559,7 +559,7 @@ fn check_variants(files: [str], cx: context) {\n \n fn main(args: [str]) {\n     if vec::len(args) != 2u {\n-        log_err #fmt[\"usage: %s <testdir>\", args[0]];\n+        #error(\"usage: %s <testdir>\", args[0]);\n         ret;\n     }\n     let files = [];\n@@ -570,7 +570,7 @@ fn main(args: [str]) {\n     check_variants(files, { mode: tm_converge });\n     check_variants(files, { mode: tm_run });\n \n-    log_err \"Fuzzer done\";\n+    #error(\"Fuzzer done\");\n }\n \n // Local Variables:"}, {"sha": "84ea81f9fceb3b880bd0d24d1f332373394f8799", "filename": "src/fuzzer/ivec_fuzz.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ffuzzer%2Fivec_fuzz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ffuzzer%2Fivec_fuzz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Fivec_fuzz.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -91,9 +91,9 @@ fn vec_to_str(v: [int]) -> str {\n }\n \n fn show_edits(a: [int], xs: [int]) {\n-    log_err \"=== Edits of \" + vec_to_str(a) + \" ===\";\n+    log_full(core::error, \"=== Edits of \" + vec_to_str(a) + \" ===\");\n     let b = vec_edits(a, xs);\n-    ix(0u, 1u, len(b)) {|i| log_err vec_to_str(b[i]); }\n+    ix(0u, 1u, len(b)) {|i| log_full(core::error, vec_to_str(b[i])); }\n }\n \n fn demo_edits() {"}, {"sha": "1dc1df2a7a3c25d6d0ad40859ac726177373efdd", "filename": "src/fuzzer/rand_util.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ffuzzer%2Frand_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ffuzzer%2Frand_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Frand_util.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -69,13 +69,13 @@ fn main()\n {\n     let r = rand::mk_rng();\n \n-    log_err under(r, 5u);\n-    log_err choice(r, [10, 20, 30]);\n-    log_err if unlikely(r, 5u) { \"unlikely\" } else { \"likely\" };\n+    log_full(core::error, under(r, 5u));\n+    log_full(core::error, choice(r, [10, 20, 30]));\n+    log_full(core::error, if unlikely(r, 5u) { \"unlikely\" } else { \"likely\" });\n \n     let a = [mutable 1, 2, 3];\n     shuffle(r, a);\n-    log_err a;\n+    log_full(core::error, a);\n \n     let i = 0u;\n     let v = [\n@@ -86,8 +86,8 @@ fn main()\n     let w = weighted_vec(v);\n \n     while i < 1000u {\n-        log_err \"Immed: \" + weighted_choice(r, v);\n-        log_err \"Fast: \" + choice(r, w);\n+        log_full(core::error, \"Immed: \" + weighted_choice(r, v));\n+        log_full(core::error, \"Fast: \" + choice(r, w));\n         i += 1u;\n     }\n }"}, {"sha": "2b0306609e12d2be7321a80bff7fa25085184e13", "filename": "src/libcore/core.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Flibcore%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Flibcore%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -16,3 +16,13 @@ const error : u32 = 0_u32;\n const warn : u32 = 1_u32;\n const info : u32 = 2_u32;\n const debug : u32 = 3_u32;\n+\n+// A curious inner-module that's not exported that contains the binding\n+// 'core' so that macro-expanded references to core::error and such\n+// can be resolved within libcore.\n+mod core {\n+    const error : u32 = 0_u32;\n+    const warn : u32 = 1_u32;\n+    const info : u32 = 2_u32;\n+    const debug : u32 = 3_u32;\n+}\n\\ No newline at end of file"}, {"sha": "7482631006656a913ad2b97be8520c4c6bc8e913", "filename": "src/libcore/extfmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Flibcore%2Fextfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Flibcore%2Fextfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fextfmt.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -19,7 +19,7 @@ combinations at the moment.\n \n Example:\n \n-log #fmt(\"hello, %s!\", \"world\");\n+#debug(\"hello, %s!\", \"world\");\n \n */\n "}, {"sha": "1ab22b3e06cb14ed14cf44b1883d6fc511e7a2fa", "filename": "src/libcore/int.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Flibcore%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Flibcore%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fint.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -105,7 +105,7 @@ buf must not be empty\n */\n fn parse_buf(buf: [u8], radix: uint) -> int {\n     if vec::len::<u8>(buf) == 0u {\n-        log_err \"parse_buf(): buf is empty\";\n+        #error(\"parse_buf(): buf is empty\");\n         fail;\n     }\n     let i = vec::len::<u8>(buf) - 1u;"}, {"sha": "3b31832a9b71d28afd5b3c2a2996f2cc14efb64d", "filename": "src/libcore/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -287,7 +287,7 @@ Example:\n > let i = 0;\n > while i < len(s) {\n >   let {ch, next} = char_range_at(s, i);\n->   log ch;\n+>   log_full(core::debug, ch);\n >   i = next;\n > }\n "}, {"sha": "05f953861f7da04ae67774cc4947f827d5a80489", "filename": "src/libcore/task.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Flibcore%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Flibcore%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -22,7 +22,7 @@ Tasks may execute in parallel and are scheduled automatically by the runtime.\n Example:\n \n > spawn(\"Hello, World\", fn (&&msg: str) {\n->   log msg;\n+>   log_full(core::debug, msg);\n > });\n \n */\n@@ -145,7 +145,7 @@ fn sleep(time_in_us: uint) {\n     let killed = false;\n     // FIXME: uncomment this when extfmt is moved to core\n     // in a snapshot.\n-    // log #fmt(\"yielding for %u us\", time_in_us);\n+    // #debug(\"yielding for %u us\", time_in_us);\n     rusti::task_sleep(task, time_in_us, killed);\n     if killed {\n         fail \"killed\";"}, {"sha": "9483af9b634b5fcf69c73609c4c9329ff6b4b0b3", "filename": "src/libcore/u64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Flibcore%2Fu64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Flibcore%2Fu64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fu64.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -71,7 +71,7 @@ Parse a string as an unsigned integer.\n */\n fn from_str(buf: str, radix: u64) -> u64 {\n     if str::byte_len(buf) == 0u {\n-        log_err \"parse_buf(): buf is empty\";\n+        #error(\"parse_buf(): buf is empty\");\n         fail;\n     }\n     let i = str::byte_len(buf) - 1u;"}, {"sha": "aa38a6d40dc5b71dd1275f8c6aa95519f2e63e4c", "filename": "src/libcore/uint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Flibcore%2Fuint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Flibcore%2Fuint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fuint.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -167,7 +167,7 @@ buf must not be empty\n */\n fn parse_buf(buf: [u8], radix: uint) -> uint {\n     if vec::len::<u8>(buf) == 0u {\n-        log_err \"parse_buf(): buf is empty\";\n+        #error(\"parse_buf(): buf is empty\");\n         fail;\n     }\n     let i = vec::len::<u8>(buf) - 1u;"}, {"sha": "e5f841831f6f5beb5002ceed1608e4f0facacd4e", "filename": "src/libstd/ebml.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Flibstd%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Flibstd%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Febml.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -36,7 +36,7 @@ fn vint_at(data: [u8], start: uint) -> {val: uint, next: uint} {\n                      (data[start + 2u] as uint) << 8u |\n                      (data[start + 3u] as uint),\n              next: start + 4u};\n-    } else { log_err \"vint too big\"; fail; }\n+    } else { #error(\"vint too big\"); fail; }\n }\n \n fn new_doc(data: @[u8]) -> doc {\n@@ -67,7 +67,7 @@ fn get_doc(d: doc, tg: uint) -> doc {\n     alt maybe_get_doc(d, tg) {\n       some(d) { ret d; }\n       none. {\n-        log_err \"failed to find block with tag \" + uint::to_str(tg, 10u);\n+        #error(\"failed to find block with tag %u\", tg);\n         fail;\n       }\n     }\n@@ -133,7 +133,7 @@ fn write_sized_vint(w: io::buf_writer, n: uint, size: uint) {\n             [0x10u8 | (n >> 24u as u8), n >> 16u & 0xffu as u8,\n              n >> 8u & 0xffu as u8, n & 0xffu as u8];\n       }\n-      _ { log_err \"vint to write too big\"; fail; }\n+      _ { #error(\"vint to write too big\"); fail; }\n     }\n     w.write(buf);\n }\n@@ -143,7 +143,7 @@ fn write_vint(w: io::buf_writer, n: uint) {\n     if n < 0x4000u { write_sized_vint(w, n, 2u); ret; }\n     if n < 0x200000u { write_sized_vint(w, n, 3u); ret; }\n     if n < 0x10000000u { write_sized_vint(w, n, 4u); ret; }\n-    log_err \"vint to write too big\";\n+    #error(\"vint to write too big\");\n     fail;\n }\n "}, {"sha": "7482631006656a913ad2b97be8520c4c6bc8e913", "filename": "src/libstd/extfmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Flibstd%2Fextfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Flibstd%2Fextfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fextfmt.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -19,7 +19,7 @@ combinations at the moment.\n \n Example:\n \n-log #fmt(\"hello, %s!\", \"world\");\n+#debug(\"hello, %s!\", \"world\");\n \n */\n "}, {"sha": "bf70e89fb7cc3bcc159703b0c3921977517ec655", "filename": "src/libstd/getopts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Flibstd%2Fgetopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Flibstd%2Fgetopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fgetopts.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -306,7 +306,7 @@ fn getopts(args: [str], opts: [opt]) -> result {\n fn opt_vals(m: match, nm: str) -> [optval] {\n     ret alt find_opt(m.opts, mkname(nm)) {\n           some(id) { m.vals[id] }\n-          none. { log_err \"No option '\" + nm + \"' defined.\"; fail }\n+          none. { #error(\"No option '%s' defined\", nm); fail }\n         };\n }\n "}, {"sha": "9719b8578e3972cf52f07f8092d184e766272da1", "filename": "src/libstd/io.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Flibstd%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Flibstd%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -227,7 +227,7 @@ obj byte_buf_reader(bbuf: byte_buf) {\n         bbuf.pos += 1u;\n         ret b as int;\n     }\n-    fn unread_byte(_byte: int) { log_err \"TODO: unread_byte\"; fail; }\n+    fn unread_byte(_byte: int) { #error(\"TODO: unread_byte\"); fail; }\n     fn eof() -> bool { ret bbuf.pos == vec::len::<u8>(bbuf.buf); }\n     fn seek(offset: int, whence: seek_style) {\n         let pos = bbuf.pos;\n@@ -268,7 +268,7 @@ obj FILE_writer(f: os::libc::FILE, res: option::t<@FILE_res>) {\n         let len = vec::len::<u8>(v);\n         let vbuf = vec::unsafe::to_ptr::<u8>(v);\n         let nout = os::libc::fwrite(vbuf, len, 1u, f);\n-        if nout < 1u { log_err \"error dumping buffer\"; }\n+        if nout < 1u { #error(\"error dumping buffer\"); }\n     }\n     fn seek(offset: int, whence: seek_style) {\n         assert (os::libc::fseek(f, offset, convert_whence(whence)) == 0i32);\n@@ -291,19 +291,19 @@ obj fd_buf_writer(fd: fd_t, res: option::t<@fd_res>) {\n             vbuf = ptr::offset(vec::unsafe::to_ptr::<u8>(v), count);\n             let nout = os::libc::write(fd, vbuf, len);\n             if nout < 0 {\n-                log_err \"error dumping buffer\";\n-                log_err sys::last_os_error();\n+                #error(\"error dumping buffer\");\n+                log_full(core::error, sys::last_os_error());\n                 fail;\n             }\n             count += nout as uint;\n         }\n     }\n     fn seek(_offset: int, _whence: seek_style) {\n-        log_err \"need 64-bit native calls for seek, sorry\";\n+        #error(\"need 64-bit native calls for seek, sorry\");\n         fail;\n     }\n     fn tell() -> uint {\n-        log_err \"need 64-bit native calls for tell, sorry\";\n+        #error(\"need 64-bit native calls for tell, sorry\");\n         fail;\n     }\n \n@@ -334,7 +334,7 @@ fn file_buf_writer(path: str,\n                                            os::libc_constants::S_IWUSR)\n                     });\n     ret if fd < 0i32 {\n-        log_err sys::last_os_error();\n+        log_full(core::error, sys::last_os_error());\n         result::err(\"error opening \" + path)\n     } else {\n         result::ok(fd_buf_writer(fd, option::some(@fd_res(fd))))"}, {"sha": "5ba1366ccb573a5462007f9ce1d23f2dfb38cc2d", "filename": "src/libstd/smallintmap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Flibstd%2Fsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Flibstd%2Fsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsmallintmap.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -56,7 +56,7 @@ If the key does not exist in the map\n */\n fn get<copy T>(m: smallintmap<T>, key: uint) -> T {\n     alt find(m, key) {\n-      none. { log_err \"smallintmap::get(): key not present\"; fail; }\n+      none. { #error(\"smallintmap::get(): key not present\"); fail; }\n       some(v) { ret v; }\n     }\n }"}, {"sha": "4c0a52116cc6a1fc0dcaac3cedfa63bbe6ee5427", "filename": "src/libstd/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Flibstd%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Flibstd%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftest.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -231,7 +231,7 @@ fn run_tests<copy T>(opts: test_opts, tests: [test_desc<T>],\n     // provide a great user experience because you might sit waiting for the\n     // result of a particular test for an unusually long amount of time.\n     let concurrency = get_concurrency();\n-    log #fmt[\"using %u test tasks\", concurrency];\n+    #debug(\"using %u test tasks\", concurrency);\n     let total = vec::len(filtered_tests);\n     let run_idx = 0u;\n     let wait_idx = 0u;"}, {"sha": "a12fdc8ceccb1f9f97549aa3008c0f7e5cf0d988", "filename": "src/libstd/uv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Flibstd%2Fuv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Flibstd%2Fuv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -111,7 +111,7 @@ fn unref(loop: *loop_t) {\n \n fn sanity_check() {\n     fn check_size(t: str, uv: ctypes::size_t, rust: ctypes::size_t) {\n-        log #fmt(\"size of %s: uv: %u, rust: %u\", t, uv, rust);\n+        #debug(\"size of %s: uv: %u, rust: %u\", t, uv, rust);\n         assert uv == rust;\n     }\n     check_size(\"idle_t\","}, {"sha": "e532681c8db8bb1ad2b59f94df9672b4a526aafc", "filename": "src/snapshots.txt", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Fsnapshots.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Fsnapshots.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsnapshots.txt?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -1,9 +1,16 @@\n+S 2011-12-22 3b61064\n+  winnt-i386 800fdc0e15f6917ff4318812edac611ca0162b5e\n+  linux-i386 468d13787022414aeb7f8ca755a4559691728a49\n+  macos-i386 acaf9f2b0588993d50339905e3343226e464aace\n+  linux-x86_64 51af1a655a1552c4699fea6bf603326c1ba9f05c\n+  macos-x86_64 a898937ea8e36e271b5d2df4caa21ef5268de7d5\n+\n S 2011-12-19 edf6e1e\n   winnt-i386 7a358117e123ad3d16fa66106819ec0daf5a6aba\n   linux-i386 87b9a54e2e165b5c800236f49ee58522c8664226\n   macos-i386 be1da455be1aad6305185d120dd3594413ae66de\n-  macos-x86_64 520f5af26e71a74d492d4d4d943974dd5404f798\n   linux-x86_64 ef255409d0cc6079d0a13d5bb7d436832dd294bc\n+  macos-x86_64 520f5af26e71a74d492d4d4d943974dd5404f798\n \n S 2011-12-14 5b35c9c\n   winnt-i386 1ffa2c58ff2f35a058e3da755febb173917b95ff"}, {"sha": "aec0422f5bff155518a4baed65adfe0b4bb1e220", "filename": "src/test/bench/99bob-iter.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fbench%2F99bob-iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fbench%2F99bob-iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2F99bob-iter.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -47,10 +47,10 @@ fn ninetynine(it: block(int)) {\n \n fn main() {\n     ninetynine {|n|\n-        log sub(b1(), n);\n-        log sub(b2(), n - 1);\n-        log \"\";\n+        log_full(core::debug, sub(b1(), n));\n+        log_full(core::debug, sub(b2(), n - 1));\n+        #debug(\"\");\n     };\n-    log b7();\n-    log b8();\n+    log_full(core::debug, b7());\n+    log_full(core::debug, b8());\n }"}, {"sha": "325f148df33e5f6c0bbf62529b363589afa05aa8", "filename": "src/test/bench/99bob-pattern.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fbench%2F99bob-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fbench%2F99bob-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2F99bob-pattern.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -19,21 +19,19 @@ fn show(b: bottle) {\n                 \"99 bottles of beer on the wall.\";\n       }\n       single. {\n-        log \"1 bottle of beer on the wall, 1 bottle of beer,\";\n+        #debug(\"1 bottle of beer on the wall, 1 bottle of beer,\");\n         log \"Take one down and pass it around, \" +\n                 \"no more bottles of beer on the wall.\";\n       }\n       dual. {\n-        log \"2 bottles of beer on the wall, 2 bottles of beer,\";\n+        #debug(\"2 bottles of beer on the wall, 2 bottles of beer,\");\n         log \"Take one down and pass it around, \" +\n                 \"1 bottle of beer on the wall.\";\n       }\n       multiple(n) {\n-        let nb: str = int::to_str(n, 10u);\n-        let mb: str = int::to_str(n - 1, 10u);\n-        log nb + \" bottles of beer on the wall, \" + nb + \" bottles of beer,\";\n-        log \"Take one down and pass it around, \" + mb +\n-                \" bottles of beer on the wall.\";\n+        #debug(\"%d bottles of beer on the wall, %d bottles of beer,\", n, n);\n+        #debug(\"Take one down and pass it around, \\\n+                %d bottles of beer on the wall.\", n-1);\n       }\n     }\n }\n@@ -55,5 +53,5 @@ fn more(b: bottle) -> bool { alt b { none. { ret false; } _ { ret true; } } }\n fn main() {\n     let b: bottle = multiple(99);\n     let running: bool = true;\n-    while running { show(b); log \"\"; running = more(b); b = next(b); }\n+    while running { show(b); #debug(\"\"); running = more(b); b = next(b); }\n }"}, {"sha": "51439a8bd97164b42f7586e56403c7b912aa9979", "filename": "src/test/bench/99bob-simple.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fbench%2F99bob-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fbench%2F99bob-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2F99bob-simple.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -42,7 +42,11 @@ fn sub(t: str, n: int) -> str {\n /* Straightforward counter */\n fn main() {\n     let n: int = 99;\n-    while n > 0 { log sub(b1(), n); log sub(b2(), n - 1); log \"\"; n -= 1; }\n-    log b7();\n-    log sub(b8(), 99);\n+    while n > 0 {\n+        log_full(core::debug, sub(b1(), n));\n+        log_full(core::debug, sub(b2(), n - 1));\n+        #debug(\"\"); n -= 1;\n+    }\n+    log_full(core::debug, b7());\n+    log_full(core::debug, sub(b8(), 99));\n }"}, {"sha": "cda58a34a3cc48d3287e65ca52b8f59bd63d82d3", "filename": "src/test/bench/99bob-tail.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fbench%2F99bob-tail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fbench%2F99bob-tail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2F99bob-tail.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -8,32 +8,32 @@ import str;\n \n fn main() {\n     fn multiple(n: int) {\n-        let nb: str = int::to_str(n, 10u);\n-        let mb: str = int::to_str(n - 1, 10u);\n-        log nb + \" bottles of beer on the wall, \" + nb + \" bottles of beer,\";\n-        log \"Take one down and pass it around, \" + mb +\n-                \" bottles of beer on the wall.\";\n-        log \"\";\n+        #debug(\"%d bottles of beer on the wall, %d bottles of beer,\", n, n);\n+        #debug(\"Take one down and pass it around, %d \\\n+                bottles of beer on the wall.\", n-1);\n+        #debug(\"\");\n         if n > 3 { be multiple(n - 1); } else { be dual(); }\n     }\n     fn dual() {\n-        log \"2 bottles of beer on the wall, 2 bottles of beer,\";\n-        log \"Take one down and pass it around, 1 bottle of beer on the wall.\";\n-        log \"\";\n+        #debug(\"2 bottles of beer on the wall, 2 bottles of beer,\");\n+        #debug(\"Take one down and pass it around, \\\n+                1 bottle of beer on the wall.\");\n+        #debug(\"\");\n         be single();\n     }\n     fn single() {\n-        log \"1 bottle of beer on the wall, 1 bottle of beer,\";\n+        #debug(\"1 bottle of beer on the wall, 1 bottle of beer,\");\n         log \"Take one down and pass it around, \" +\n                 \"no more bottles of beer on the wall.\";\n-        log \"\";\n+        #debug(\"\");\n         be none();\n     }\n     fn none() {\n-        log \"No more bottles of beer on the wall, no more bottles of beer,\";\n+        #debug(\"No more bottles of beer on the wall, \\\n+                no more bottles of beer,\");\n         log \"Go to the store and buy some more, \" +\n                 \"99 bottles of beer on the wall.\";\n-        log \"\";\n+        #debug(\"\");\n     }\n     multiple(99);\n }"}, {"sha": "1e4283443b9ddfb5fdb6eff41558d3c795e2ccde", "filename": "src/test/bench/shootout-fannkuchredux.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fbench%2Fshootout-fannkuchredux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fbench%2Fshootout-fannkuchredux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fannkuchredux.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -43,7 +43,7 @@ fn fannkuch(n: int) -> int {\n \n         let go = true;\n         while go {\n-            if r == n { log checksum; ret flips; }\n+            if r == n { log_full(core::debug, checksum); ret flips; }\n             let p0 = perm1[0];\n             i = 0;\n             while i < r { let j = i + 1; perm1[i] = perm1[j]; i = j; }\n@@ -58,5 +58,5 @@ fn fannkuch(n: int) -> int {\n \n fn main(args: [str]) {\n     let n = 7;\n-    log #fmt[\"Pfannkuchen(%d) = %d\", n, fannkuch(n)];\n+    #debug(\"Pfannkuchen(%d) = %d\", n, fannkuch(n));\n }"}, {"sha": "97bec11f43fced234b4a86c99ad3516695d89dd4", "filename": "src/test/bench/shootout-fasta.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fasta.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -44,25 +44,31 @@ fn select_random(r: u32, genelist: [aminoacids]) -> char {\n }\n \n fn make_random_fasta(id: str, desc: str, genelist: [aminoacids], n: int) {\n-    log \">\" + id + \" \" + desc;\n+    log_full(core::debug, \">\" + id + \" \" + desc);\n     let rng = myrandom(std::rand::mk_rng().next());\n     let op: str = \"\";\n     uint::range(0u, n as uint) {|i|\n         str::push_byte(op, select_random(rng.next(100u32), genelist) as u8);\n-        if str::byte_len(op) >= LINE_LENGTH() { log op; op = \"\"; }\n+        if str::byte_len(op) >= LINE_LENGTH() {\n+            log_full(core::debug, op);\n+            op = \"\";\n+        }\n     }\n-    if str::byte_len(op) > 0u { log op; }\n+    if str::byte_len(op) > 0u { log_full(core::debug, op); }\n }\n \n fn make_repeat_fasta(id: str, desc: str, s: str, n: int) {\n-    log \">\" + id + \" \" + desc;\n+    log_full(core::debug, \">\" + id + \" \" + desc);\n     let op: str = \"\";\n     let sl: uint = str::byte_len(s);\n     uint::range(0u, n as uint) {|i|\n         str::push_byte(op, s[i % sl]);\n-        if str::byte_len(op) >= LINE_LENGTH() { log op; op = \"\"; }\n+        if str::byte_len(op) >= LINE_LENGTH() {\n+            log_full(core::debug, op);\n+            op = \"\";\n+        }\n     }\n-    if str::byte_len(op) > 0u { log op; }\n+    if str::byte_len(op) > 0u { log_full(core::debug, op); }\n }\n \n fn acid(ch: char, prob: u32) -> aminoacids { ret {ch: ch, prob: prob}; }"}, {"sha": "b9624ecb9e6e5cea992b124916d9be1ca5539af0", "filename": "src/test/bench/shootout-fibo.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fbench%2Fshootout-fibo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fbench%2Fshootout-fibo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fibo.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -14,6 +14,6 @@ fn fib(n: int) -> int {\n fn main() {\n     assert (fib(8) == 21);\n     assert (fib(15) == 610);\n-    log fib(8);\n-    log fib(15);\n+    log_full(core::debug, fib(8));\n+    log_full(core::debug, fib(15));\n }"}, {"sha": "72c98a4c3be270b522d637411464e40e551359ef", "filename": "src/test/bench/shootout-nbody.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-nbody.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -20,11 +20,11 @@ fn main() {\n \n \n     for n: int in inputs {\n-        log NBodySystem::energy(bodies);\n+        log_full(core::debug, NBodySystem::energy(bodies));\n \n         let i: int = 0;\n         while i < n { NBodySystem::advance(bodies, 0.01); i += 1; }\n-        log NBodySystem::energy(bodies);\n+        log_full(core::debug, NBodySystem::energy(bodies));\n     }\n }\n "}, {"sha": "5c008c49019089da4f6c8857b2f0655e6a13510f", "filename": "src/test/bench/shootout-pfib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-pfib.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -72,7 +72,7 @@ fn stress_task(&&id: int) {\n         let n = 15;\n         assert (fib(n) == fib(n));\n         i += 1;\n-        log_err #fmt[\"%d: Completed %d iterations\", id, i];\n+        #error(\"%d: Completed %d iterations\", id, i);\n     }\n }\n \n@@ -87,7 +87,7 @@ fn stress(num_tasks: int) {\n fn main(argv: [str]) {\n     if vec::len(argv) == 1u {\n         assert (fib(8) == 21);\n-        log fib(8);\n+        log_full(core::debug, fib(8));\n     } else {\n         // Interactive mode! Wooo!!!!\n         let opts = parse_opts(argv);"}, {"sha": "dcab0e8bde548af10107814296833491c0d0d38e", "filename": "src/test/bench/task-perf-word-count-generic.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -88,7 +88,7 @@ mod map_reduce {\n                 send V>(-map: mapper<K1, K2, V>,\n                           -ctrl: chan<ctrl_proto<K2, V>>,\n                     -input: K1) {\n-        // log_err \"map_task \" + input;\n+        // log_full(core::error, \"map_task \" + input);\n         let intermediates = treemap::init();\n \n         fn emit<send K2,\n@@ -133,11 +133,11 @@ mod map_reduce {\n             while !is_done || ref_count > 0 {\n                 alt recv(p) {\n                   emit_val(v) {\n-                    // log_err #fmt(\"received %d\", v);\n+                    // #error(\"received %d\", v);\n                     ret some(v);\n                   }\n                   done. {\n-                    // log_err \"all done\";\n+                    // #error(\"all done\");\n                     is_done = true;\n                   }\n                   ref. { ref_count += 1; }\n@@ -167,19 +167,20 @@ mod map_reduce {\n         while num_mappers > 0 {\n             alt recv(ctrl) {\n               mapper_done. {\n-                // log_err \"received mapper terminated.\";\n+                // #error(\"received mapper terminated.\");\n                 num_mappers -= 1;\n               }\n               find_reducer(k, cc) {\n                 let c;\n-                // log_err \"finding reducer for \" + k;\n+                // log_full(core::error, \"finding reducer for \" + k);\n                 alt treemap::find(reducers, k) {\n                   some(_c) {\n-                    // log_err \"reusing existing reducer for \" + k;\n+                    // log_full(core::error,\n+                    // \"reusing existing reducer for \" + k);\n                     c = _c;\n                   }\n                   none. {\n-                    // log_err \"creating new reducer for \" + k;\n+                    // log_full(core::error, \"creating new reducer for \" + k);\n                     let p = port();\n                     let r = reduce, kk = k;\n                     tasks +=\n@@ -228,7 +229,8 @@ fn main(argv: [str]) {\n     let elapsed = stop - start;\n     elapsed /= 1000000u64;\n \n-    log_err \"MapReduce completed in \" + u64::str(elapsed) + \"ms\";\n+    log_full(core::error, \"MapReduce completed in \"\n+             + u64::str(elapsed) + \"ms\");\n }\n \n fn read_word(r: io::reader) -> option<str> {"}, {"sha": "a05ce493ddf5a740029a1ee0710866835e1b258e", "filename": "src/test/bench/task-perf-word-count.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -78,7 +78,7 @@ mod map_reduce {\n \n     fn map_task(args: (chan<ctrl_proto>, str)) {\n         let (ctrl, input) = args;\n-        // log_err \"map_task \" + input;\n+        // log_full(core::error, \"map_task \" + input);\n         let intermediates = map::new_str_hash();\n \n         fn emit(im: map::hashmap<str, chan<reduce_proto>>,\n@@ -120,11 +120,11 @@ mod map_reduce {\n             while !state.is_done || state.ref_count > 0 {\n                 alt recv(p) {\n                   emit_val(v) {\n-                    // log_err #fmt(\"received %d\", v);\n+                    // #error(\"received %d\", v);\n                     ret some(v);\n                   }\n                   done. {\n-                    // log_err \"all done\";\n+                    // #error(\"all done\");\n                     state.is_done = true;\n                   }\n                   ref. { state.ref_count += 1; }\n@@ -153,19 +153,20 @@ mod map_reduce {\n         while num_mappers > 0 {\n             alt recv(ctrl) {\n               mapper_done. {\n-                // log_err \"received mapper terminated.\";\n+                // #error(\"received mapper terminated.\");\n                 num_mappers -= 1;\n               }\n               find_reducer(k, cc) {\n                 let c;\n-                // log_err \"finding reducer for \" + k;\n+                // log_full(core::error, \"finding reducer for \" + k);\n                 alt reducers.find(k) {\n                   some(_c) {\n-                    // log_err \"reusing existing reducer for \" + k;\n+                    // log_full(core::error,\n+                    // \"reusing existing reducer for \" + k);\n                     c = _c;\n                   }\n                   none. {\n-                    // log_err \"creating new reducer for \" + k;\n+                    // log_full(core::error, \"creating new reducer for \" + k);\n                     let p = port();\n                     tasks +=\n                         [task::spawn_joinable((k, chan(p)), reduce_task)];\n@@ -200,7 +201,8 @@ fn main(argv: [str]) {\n     let elapsed = stop - start;\n     elapsed /= 1000000u64;\n \n-    log_err \"MapReduce completed in \" + u64::str(elapsed) + \"ms\";\n+    log_full(core::error, \"MapReduce completed in \"\n+             + u64::str(elapsed) + \"ms\");\n }\n \n fn read_word(r: io::reader) -> option<str> {"}, {"sha": "a950cc117e3a1858e7eb4d5ec9d01805cd08d4d9", "filename": "src/test/compile-fail/alt-join.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Falt-join.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Falt-join.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Falt-join.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -7,6 +7,6 @@ fn my_fail() -> ! { fail; }\n fn main() {\n     alt true { false { my_fail(); } true { } }\n \n-    log x;\n+    log_full(core::debug, x);\n     let x: int;\n }"}, {"sha": "6b966f4964d49f3336a5fd6d585d87fd1bdf8a50", "filename": "src/test/compile-fail/and-init.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fand-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fand-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fand-init.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -3,6 +3,6 @@\n fn main() {\n     let i: int;\n \n-    log false && { i = 5; true };\n-    log i;\n+    log_full(core::debug, false && { i = 5; true });\n+    log_full(core::debug, i);\n }"}, {"sha": "eeeae1793b7a3b55218b0ff912920c93f6364828", "filename": "src/test/compile-fail/anon-obj-overriding-wrong-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fanon-obj-overriding-wrong-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fanon-obj-overriding-wrong-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fanon-obj-overriding-wrong-type.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -18,5 +18,5 @@ fn main() {\n             my_a\n         };\n \n-    log_err my_b.foo();\n+    log_full(core::error, my_b.foo());\n }"}, {"sha": "16c83c56a9e48a9809cb0e21fd46120ced365f16", "filename": "src/test/compile-fail/autoderef-full-lval.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fautoderef-full-lval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fautoderef-full-lval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fautoderef-full-lval.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -7,11 +7,11 @@ fn main() {\n     let a: clam = {x: @1, y: @2};\n     let b: clam = {x: @10, y: @20};\n     let z: int = a.x + b.y;\n-    log z;\n+    log_full(core::debug, z);\n     assert (z == 21);\n     let forty: fish = {a: @40};\n     let two: fish = {a: @2};\n     let answer: int = forty.a + two.a;\n-    log answer;\n+    log_full(core::debug, answer);\n     assert (answer == 42);\n }"}, {"sha": "375eadac779d65a3ad9939f5a9bd7a442bc66d36", "filename": "src/test/compile-fail/bad-bang-ann-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fbad-bang-ann-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fbad-bang-ann-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-bang-ann-2.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -2,6 +2,6 @@\n // Tests that a function with a ! annotation always actually fails\n // error-pattern: some control paths may return\n \n-fn bad_bang(i: uint) -> ! { log 3; }\n+fn bad_bang(i: uint) -> ! { log_full(core::debug, 3); }\n \n fn main() { bad_bang(5u); }"}, {"sha": "0ef523e753d68ccea7760d6c3bbe3b4faffd9c0b", "filename": "src/test/compile-fail/bad-const-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fbad-const-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fbad-const-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-const-type.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -1,4 +1,4 @@\n // error-pattern:expected str but found int\n \n const i: str = 10;\n-fn main() { log i; }\n+fn main() { log_full(core::debug, i); }"}, {"sha": "340a38e4993a6ba2f745df3e7cba7417d97676a5", "filename": "src/test/compile-fail/bad-env-capture.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fbad-env-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fbad-env-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-env-capture.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -1,6 +1,6 @@\n // error-pattern: attempted dynamic environment-capture\n fn foo() {\n     let x: int;\n-    fn bar() { log x; }\n+    fn bar() { log_full(core::debug, x); }\n }\n fn main() { foo(); }"}, {"sha": "420aaa280c2ec8fcb3e974ce157b8d91d55fc2b6", "filename": "src/test/compile-fail/bad-env-capture2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fbad-env-capture2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fbad-env-capture2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-env-capture2.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -1,5 +1,5 @@\n // error-pattern: attempted dynamic environment-capture\n fn foo(x: int) {\n-    fn bar() { log x; }\n+    fn bar() { log_full(core::debug, x); }\n }\n fn main() { foo(2); }"}, {"sha": "4b2e2c74ffd26218e68521288980e946aae8d4e5", "filename": "src/test/compile-fail/bad-env-capture3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fbad-env-capture3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fbad-env-capture3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-env-capture3.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -1,7 +1,7 @@\n // error-pattern: attempted dynamic environment-capture\n obj foo(x: int) {\n     fn mth() {\n-        fn bar() { log x; }\n+        fn bar() { log_full(core::debug, x); }\n     }\n }\n "}, {"sha": "ad9e147deeb94a57af5421c40c64ecc88130e56e", "filename": "src/test/compile-fail/bad-expr-path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fbad-expr-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fbad-expr-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-expr-path.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -2,4 +2,4 @@\n \n mod m1 { }\n \n-fn main(args: [str]) { log m1::a; }\n+fn main(args: [str]) { log_full(core::debug, m1::a); }"}, {"sha": "273f93bac2237231a9c1242d4139000aa53fc5ca", "filename": "src/test/compile-fail/bad-expr-path2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fbad-expr-path2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fbad-expr-path2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-expr-path2.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -4,4 +4,4 @@ mod m1 {\n     mod a { }\n }\n \n-fn main(args: [str]) { log m1::a; }\n+fn main(args: [str]) { log_full(core::debug, m1::a); }"}, {"sha": "1a41ece08c03a39cabeb214e5d2ce93d2dbe37c0", "filename": "src/test/compile-fail/block-coerce-no.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fblock-coerce-no.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fblock-coerce-no.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fblock-coerce-no.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -10,4 +10,7 @@ fn coerce(b: block()) -> fn() {\n }\n \n \n-fn main() { let i = 8; let f = coerce(block () { log_err i; }); f(); }\n+fn main() {\n+    let i = 8;\n+    let f = coerce(block () { log_full(core::error, i); });\n+    f(); }"}, {"sha": "7afefb0f36f0ac646f7af718dfda29564f78989f", "filename": "src/test/compile-fail/block-copy.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fblock-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fblock-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fblock-copy.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -1,4 +1,8 @@\n // error-pattern: block type can only appear\n \n fn lol(f: block()) -> block() { ret f; }\n-fn main() { let i = 8; let f = lol(block () { log_err i; }); f(); }\n+fn main() {\n+    let i = 8;\n+    let f = lol(block () { log_full(core::error, i); });\n+    f();\n+}"}, {"sha": "1bff806ab46e15d19d61948631f2daad9f2b3673", "filename": "src/test/compile-fail/block-require-return.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fblock-require-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fblock-require-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fblock-require-return.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -1,3 +1,3 @@\n // error-pattern: not all control paths return\n fn force(f: block() -> int) -> int { f() }\n-fn main() { log_err force({|| }); }\n+fn main() { log_full(core::error, force({|| })); }"}, {"sha": "68870a1b876049a4fe879674b37dbc5e717b1006", "filename": "src/test/compile-fail/block-uninit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fblock-uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fblock-uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fblock-uninit.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -1,4 +1,4 @@\n // error-pattern: Unsatisfied precondition constraint\n \n fn force(f: block()) { f(); }\n-fn main() { let x: int; force(block () { log_err x; }); }\n+fn main() { let x: int; force(block () { log_full(core::error, x); }); }"}, {"sha": "1eadbee5497ae1c33e0894fee4481fa2467a7bf7", "filename": "src/test/compile-fail/bogus-tag.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fbogus-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fbogus-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbogus-tag.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -6,6 +6,9 @@ tag color { rgb(int, int, int); rgba(int, int, int, int); }\n \n fn main() {\n     let red: color = rgb(255, 0, 0);\n-    alt red { rgb(r, g, b) { log \"rgb\"; } hsl(h, s, l) { log \"hsl\"; } }\n+    alt red {\n+      rgb(r, g, b) { #debug(\"rgb\"); }\n+      hsl(h, s, l) { #debug(\"hsl\"); }\n+    }\n }\n "}, {"sha": "a7a6a92fd7ca3ad7ce27d6bebbdf1e32ba8e9ca6", "filename": "src/test/compile-fail/break-uninit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fbreak-uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fbreak-uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbreak-uninit.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -6,9 +6,9 @@ fn foo() -> int {\n \n     do  { i = 0; break; x = 0; } while x != 0\n \n-    log x;\n+    log_full(core::debug, x);\n \n     ret 17;\n }\n \n-fn main() { log foo(); }\n+fn main() { log_full(core::debug, foo()); }"}, {"sha": "3547f56545121eb9c3fa9af1c32a6a29fc7cd9f6", "filename": "src/test/compile-fail/break-uninit2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fbreak-uninit2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fbreak-uninit2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbreak-uninit2.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -6,9 +6,9 @@ fn foo() -> int {\n \n     do  { i = 0; break; x = 0; } while 1 != 2\n \n-    log x;\n+    log_full(core::debug, x);\n \n     ret 17;\n }\n \n-fn main() { log foo(); }\n+fn main() { log_full(core::debug, foo()); }"}, {"sha": "912a7f27dcc02294f0c6802545b666e814ad71c8", "filename": "src/test/compile-fail/constrained-type-missing-check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fconstrained-type-missing-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fconstrained-type-missing-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconstrained-type-missing-check.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -12,5 +12,5 @@ fn main() {\n     let a: int = 1;\n     let b: int = 2;\n     let c: ordered_range = {low: a, high: b};\n-    log c.low;\n+    log_full(core::debug, c.low);\n }"}, {"sha": "546dbbd411d51410ee7fbba51b8e48dc5f7c6639", "filename": "src/test/compile-fail/copy-a-resource.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fcopy-a-resource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fcopy-a-resource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcopy-a-resource.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -2,4 +2,4 @@\n \n resource foo(i: int) { }\n \n-fn main() { let x <- foo(10); let y = x; log_err x; }\n+fn main() { let x <- foo(10); let y = x; log_full(core::error, x); }"}, {"sha": "68334f0fda046d31def46bc4fb8b93c0b8a2572a", "filename": "src/test/compile-fail/dead-code-be.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fdead-code-be.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fdead-code-be.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdead-code-be.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -3,7 +3,7 @@\n \n // error-pattern: dead\n \n-fn f(caller: str) { log caller; }\n+fn f(caller: str) { log_full(core::debug, caller); }\n \n-fn main() { be f(\"main\"); log \"Paul is dead\"; }\n+fn main() { be f(\"main\"); #debug(\"Paul is dead\"); }\n "}, {"sha": "f7f530dc90ae12f6cb4e29f031d6c076160f3eca", "filename": "src/test/compile-fail/dead-code-ret.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fdead-code-ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fdead-code-ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdead-code-ret.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -3,7 +3,7 @@\n \n // error-pattern: dead\n \n-fn f(caller: str) { log caller; }\n+fn f(caller: str) { log_full(core::debug, caller); }\n \n-fn main() { ret f(\"main\"); log \"Paul is dead\"; }\n+fn main() { ret f(\"main\"); #debug(\"Paul is dead\"); }\n "}, {"sha": "fc893dea43850914f52f283ab48e28f1d1674653", "filename": "src/test/compile-fail/direct-obj-fn-call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fdirect-obj-fn-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fdirect-obj-fn-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdirect-obj-fn-call.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -1,7 +1,7 @@\n // error-pattern: attempted access of field hello\n \n obj x() {\n-    fn hello() { log \"hello\"; }\n+    fn hello() { #debug(\"hello\"); }\n }\n \n fn main() { x.hello(); }"}, {"sha": "479908a8d3ce469514f32670a1fb11f1f23b9a2b", "filename": "src/test/compile-fail/do-while-constraints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fdo-while-constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fdo-while-constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdo-while-constraints.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -4,7 +4,7 @@ fn main() {\n     let y: int = 42;\n     let x: int;\n     do  {\n-        log y;\n+        log_full(core::debug, y);\n         do  { do  { do  { x <- y; } while true } while true } while true\n     } while true\n }"}, {"sha": "8bf0356439302a91a8719231d1267e50f77cef5d", "filename": "src/test/compile-fail/do-while-pred-constraints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fdo-while-pred-constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fdo-while-pred-constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdo-while-pred-constraints.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -1,6 +1,6 @@\n // error-pattern: Unsatisfied precondition constraint (for example, even(y\n \n-fn print_even(y: int) : even(y) { log y; }\n+fn print_even(y: int) : even(y) { log_full(core::debug, y); }\n \n pure fn even(y: int) -> bool { true }\n "}, {"sha": "c861b460e47f04929e2ffd201228c4a0555be51d", "filename": "src/test/compile-fail/does-nothing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fdoes-nothing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fdoes-nothing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdoes-nothing.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -1,3 +1,3 @@\n // error-pattern: unresolved name: this_does_nothing_what_the\n-fn main() { log \"doing\"; this_does_nothing_what_the; log \"boing\"; }\n+fn main() { #debug(\"doing\"); this_does_nothing_what_the; #debug(\"boing\"); }\n "}, {"sha": "13163fa32f246310b85e82b62a2b8891abca016c", "filename": "src/test/compile-fail/export.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fexport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fexport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fexport.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -1,8 +1,8 @@\n // error-pattern: unresolved name\n mod foo {\n     export x;\n-    fn x(y: int) { log y; }\n-    fn z(y: int) { log y; }\n+    fn x(y: int) { log_full(core::debug, y); }\n+    fn z(y: int) { log_full(core::debug, y); }\n }\n \n fn main() { foo::z(10); }"}, {"sha": "ab8744e722a5b70813d64a270df553b00359ed79", "filename": "src/test/compile-fail/export2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fexport2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fexport2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fexport2.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -9,7 +9,7 @@ mod foo {\n mod bar {\n     export y;\n \n-    fn x() { log \"x\"; }\n+    fn x() { #debug(\"x\"); }\n \n     fn y() { }\n }"}, {"sha": "e5fac40b8fb17b041a1cedb4ecedaaae2986674e", "filename": "src/test/compile-fail/fn-constraint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Ffn-constraint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Ffn-constraint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffn-constraint.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -5,5 +5,5 @@ import str::*;\n fn main() {\n     let a: uint = 4u;\n     let b: uint = 1u;\n-    log_err safe_slice(\"kitties\", a, b);\n+    log_full(core::error, safe_slice(\"kitties\", a, b));\n }"}, {"sha": "9c998682fc321808468545d71a9e14a20a7116a1", "filename": "src/test/compile-fail/fn-expr-type-state.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Ffn-expr-type-state.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Ffn-expr-type-state.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffn-expr-type-state.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -3,5 +3,5 @@\n fn main() {\n     // Typestate should work even in a lambda. we should reject this program.\n     let f = fn () -> int { let i: int; ret i; };\n-    log_err f();\n+    log_full(core::error, f());\n }"}, {"sha": "5f2e6db0e8bbe1c4a1ac8b2b3e4ae3483c9f51ab", "filename": "src/test/compile-fail/fn-expr-typestate-2.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Ffn-expr-typestate-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Ffn-expr-typestate-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffn-expr-typestate-2.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -1,3 +1,6 @@\n // error-pattern:Unsatisfied precondition\n \n-fn main() { let j = fn () -> int { let i: int; ret i; }(); log_err j; }\n+fn main() {\n+    let j = fn () -> int { let i: int; ret i; }();\n+    log_full(core::error, j);\n+}"}, {"sha": "dd67ceabff90b45af8e30c24229bb607625b7044", "filename": "src/test/compile-fail/for-loop-decl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Ffor-loop-decl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Ffor-loop-decl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffor-loop-decl.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -16,4 +16,4 @@ fn bitv_to_str(enclosing: fn_info, v: bitv::t) -> str {\n     ret s;\n }\n \n-fn main() { log \"OK\"; }\n+fn main() { #debug(\"OK\"); }"}, {"sha": "69dedb579551642b18036cd6545baaf24b6da129", "filename": "src/test/compile-fail/if-check-precond-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fif-check-precond-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fif-check-precond-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fif-check-precond-fail.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -5,7 +5,7 @@ pure fn even(x: uint) -> bool {\n     } else if x == 2u { ret true; } else { ret even(x - 2u); }\n }\n \n-fn print_even(x: uint) : even(x) { log x; }\n+fn print_even(x: uint) : even(x) { log_full(core::debug, x); }\n \n fn foo(x: uint) { if check even(x) { fail; } else { print_even(x); } }\n "}, {"sha": "6c560ffb41d36cdb867d5f0c362b6d6218ecc53d", "filename": "src/test/compile-fail/if-without-else-result.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fif-without-else-result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fif-without-else-result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fif-without-else-result.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -2,5 +2,5 @@\n \n fn main() {\n     let a = if true { true };\n-    log a;\n+    log_full(core::debug, a);\n }\n\\ No newline at end of file"}, {"sha": "bde9dd5f19efeeff328f17453e8d67c6acf69478", "filename": "src/test/compile-fail/import-glob-0.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fimport-glob-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fimport-glob-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport-glob-0.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -7,10 +7,10 @@ mod module_of_many_things {\n     export f2;\n     export f4;\n \n-    fn f1() { log \"f1\"; }\n-    fn f2() { log \"f2\"; }\n-    fn f3() { log \"f3\"; }\n-    fn f4() { log \"f4\"; }\n+    fn f1() { #debug(\"f1\"); }\n+    fn f2() { #debug(\"f2\"); }\n+    fn f3() { #debug(\"f3\"); }\n+    fn f4() { #debug(\"f4\"); }\n }\n \n "}, {"sha": "588b0d5848ee559d92108c14c939e4cf6f3932d4", "filename": "src/test/compile-fail/import-glob-circular.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fimport-glob-circular.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fimport-glob-circular.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport-glob-circular.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -5,7 +5,7 @@ mod circ1 {\n     export f1;\n     export f2;\n     export common;\n-    fn f1() { log \"f1\"; }\n+    fn f1() { #debug(\"f1\"); }\n     fn common() -> uint { ret 0u; }\n }\n \n@@ -14,7 +14,7 @@ mod circ2 {\n     export f1;\n     export f2;\n     export common;\n-    fn f2() { log \"f2\"; }\n+    fn f2() { #debug(\"f2\"); }\n     fn common() -> uint { ret 1u; }\n }\n "}, {"sha": "f05b862cba6070ac55810dbbcb9b4d5b165526cb", "filename": "src/test/compile-fail/import-glob-multiple.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fimport-glob-multiple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fimport-glob-multiple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport-glob-multiple.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -4,13 +4,13 @@ import mod1::*;\n import mod2::*;\n \n mod mod1 {\n-    fn f1() { log \"f1\"; }\n+    fn f1() { #debug(\"f1\"); }\n     fn common1() { log \"common\" }\n     fn common2() { log \"common\" }\n }\n \n mod mod2 {\n-    fn f2() { log \"f1\"; }\n+    fn f2() { #debug(\"f1\"); }\n     fn common1() { log \"common\" }\n     fn common2() { log \"common\" }\n }"}, {"sha": "b789a25e7a7f97d1b9ae1a7d80219457214fc2c1", "filename": "src/test/compile-fail/import.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fimport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fimport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -2,6 +2,6 @@\n import zed::bar;\n import zed::baz;\n mod zed {\n-    fn bar() { log \"bar\"; }\n+    fn bar() { #debug(\"bar\"); }\n }\n fn main(args: [str]) { bar(); }"}, {"sha": "ef81ebfcb4bfee778184542b4bc7199dcb637729", "filename": "src/test/compile-fail/import2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fimport2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fimport2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport2.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -2,6 +2,6 @@\n import baz::zed::bar;\n mod baz { }\n mod zed {\n-    fn bar() { log \"bar3\"; }\n+    fn bar() { #debug(\"bar3\"); }\n }\n fn main(args: [str]) { bar(); }"}, {"sha": "35a9c587373b9e495d0b95db7cb851ba2cc872ac", "filename": "src/test/compile-fail/import3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fimport3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fimport3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport3.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -1,4 +1,4 @@\n // error-pattern: unresolved modulename\n import main::bar;\n \n-fn main(args: [str]) { log \"foo\"; }\n+fn main(args: [str]) { #debug(\"foo\"); }"}, {"sha": "aed46fb12323d1e1c1cd1791e3135669d513ccaf", "filename": "src/test/compile-fail/import4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fimport4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fimport4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport4.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -3,4 +3,4 @@\n mod a { import foo = b::foo; export foo; }\n mod b { import foo = a::foo; export foo; }\n \n-fn main(args: [str]) { log \"loop\"; }\n+fn main(args: [str]) { #debug(\"loop\"); }"}, {"sha": "85a77411e682862926ae99fa788c82b020740d6b", "filename": "src/test/compile-fail/import5.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fimport5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fimport5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport5.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -1,7 +1,7 @@\n // error-pattern:unresolved import\n \n mod m1 {\n-    fn foo() { log \"foo\"; }\n+    fn foo() { #debug(\"foo\"); }\n }\n \n mod m2 {"}, {"sha": "8b5da1c196ab5c4698c6ad89b7909fa5adbf67b3", "filename": "src/test/compile-fail/lambda-mutate-nested.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Flambda-mutate-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Flambda-mutate-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flambda-mutate-nested.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -6,10 +6,10 @@ fn f2(x: block()) { x(); }\n fn main() {\n     let i = 0;\n     let ctr = lambda () -> int { f2({|| i = i + 1; }); ret i; };\n-    log_err ctr();\n-    log_err ctr();\n-    log_err ctr();\n-    log_err ctr();\n-    log_err ctr();\n-    log_err i;\n+    log_full(core::error, ctr());\n+    log_full(core::error, ctr());\n+    log_full(core::error, ctr());\n+    log_full(core::error, ctr());\n+    log_full(core::error, ctr());\n+    log_full(core::error, i);\n }"}, {"sha": "c5b90f9edde229a4b80dfb6ecfd597c97d69e5b1", "filename": "src/test/compile-fail/lambda-mutate.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Flambda-mutate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Flambda-mutate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flambda-mutate.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -3,10 +3,10 @@\n fn main() {\n     let i = 0;\n     let ctr = lambda () -> int { i = i + 1; ret i; };\n-    log_err ctr();\n-    log_err ctr();\n-    log_err ctr();\n-    log_err ctr();\n-    log_err ctr();\n-    log_err i;\n+    log_full(core::error, ctr());\n+    log_full(core::error, ctr());\n+    log_full(core::error, ctr());\n+    log_full(core::error, ctr());\n+    log_full(core::error, ctr());\n+    log_full(core::error, i);\n }"}, {"sha": "fd5566e5c32aa43a3b2e6f3fc9f1842b176996cc", "filename": "src/test/compile-fail/move-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fmove-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fmove-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmove-arg.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -1,4 +1,4 @@\n // error-pattern: Unsatisfied precondition constraint\n fn test(-foo: int) { assert (foo == 10); }\n \n-fn main() { let x = 10; test(x); log x; }\n+fn main() { let x = 10; test(x); log_full(core::debug, x); }"}, {"sha": "8cae7c2fc36440157d6c460e437282c470cea4d7", "filename": "src/test/compile-fail/no-constraint-prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fno-constraint-prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fno-constraint-prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-constraint-prop.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -16,5 +16,5 @@ fn main() {\n     // the next statement, since it's not true in the\n     // prestate.\n     let d <- a;\n-    log safe_slice(\"kitties\", b, d);\n+    log_full(core::debug, safe_slice(\"kitties\", b, d));\n }"}, {"sha": "95de145e52e94d2ac72f457d9e5570fea840d6ef", "filename": "src/test/compile-fail/nonscalar-cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fnonscalar-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fnonscalar-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnonscalar-cast.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -4,5 +4,5 @@ use std;\n import std::os;\n \n fn main() {\n-  log { x: 1 } as int;\n+  log_full(core::debug, { x: 1 } as int);\n }"}, {"sha": "527644907f0170e2569c835707dcc7ddcbe615af", "filename": "src/test/compile-fail/nonsense-constraints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fnonsense-constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fnonsense-constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnonsense-constraints.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -10,4 +10,4 @@ fn enum_chars(start: u8, end: u8) : uint::le(start, end) -> [char] {\n     ret r;\n }\n \n-fn main() { log enum_chars('a' as u8, 'z' as u8); }\n+fn main() { log_full(core::debug, enum_chars('a' as u8, 'z' as u8)); }"}, {"sha": "54ab6c3c1b7c7f01a5fb37dcf320fd8cf0dfcb7b", "filename": "src/test/compile-fail/or-init.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2For-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2For-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2For-init.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -3,6 +3,6 @@\n fn main() {\n     let i: int;\n \n-    log false || { i = 5; true };\n-    log i;\n+    log_full(core::debug, false || { i = 5; true });\n+    log_full(core::debug, i);\n }"}, {"sha": "c189c97ded978c079076d5db7a085eba5a4c310e", "filename": "src/test/compile-fail/oversized-literal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Foversized-literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Foversized-literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Foversized-literal.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -1,3 +1,3 @@\n // error-pattern:literal out of range\n \n-fn main() { log 300u8; }\n+fn main() { log_full(core::debug, 300u8); }"}, {"sha": "3484a14f0840ac4c5616e941ae056b3161bc7d99", "filename": "src/test/compile-fail/pattern-tyvar.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -7,6 +7,13 @@ import option::some;\n \n tag bar { t1((), option::t<[int]>); t2; }\n \n-fn foo(t: bar) { alt t { t1(_, some::<int>(x)) { log x; } _ { fail; } } }\n+fn foo(t: bar) {\n+    alt t {\n+      t1(_, some::<int>(x)) {\n+        log_full(core::debug, x);\n+      }\n+      _ { fail; }\n+    }\n+}\n \n fn main() { }"}, {"sha": "a7c7d06cb5fb4a29013dde9b2874f3870d6e8990", "filename": "src/test/compile-fail/pinned-deep-copy.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fpinned-deep-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fpinned-deep-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpinned-deep-copy.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -10,7 +10,7 @@ fn main() {\n         // Can't do this copy\n         let x = ~~~{y: r(i)};\n         let z = x;\n-        log x;\n+        log_full(core::debug, x);\n     }\n-    log_err *i;\n+    log_full(core::error, *i);\n }\n\\ No newline at end of file"}, {"sha": "523641698d31576f82b2a841bad79dea3f950192", "filename": "src/test/compile-fail/rec-missing-fields.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Frec-missing-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Frec-missing-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frec-missing-fields.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -6,4 +6,4 @@\n \n type point = {x: int, y: int};\n \n-fn main() { let p: point = {x: 10}; log p.y; }\n+fn main() { let p: point = {x: 10}; log_full(core::debug, p.y); }"}, {"sha": "ff6a197abf839293c99f2e50696917db471d6d41", "filename": "src/test/compile-fail/record-with-resource.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Frecord-with-resource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Frecord-with-resource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frecord-with-resource.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -1,13 +1,13 @@\n // error-pattern: copying a noncopyable value\n \n resource my_resource(x: int) {\n-    log_err x;\n+    log_full(core::error, x);\n }\n \n fn main() {\n     {\n         let a = {x: 0, y: my_resource(20)};\n         let b = {x: 2 with a};\n-        log_err (a, b);\n+        log_full(core::error, (a, b));\n     }\n }"}, {"sha": "a21523d0763394756ea3b53771ec0e7a621f89c7", "filename": "src/test/compile-fail/reference-in-loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Freference-in-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Freference-in-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Freference-in-loop.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -4,7 +4,7 @@ fn main() {\n     let x = [];\n     let &y = x;\n     while true {\n-        log_err y;\n+        log_full(core::error, y);\n         x = [1];\n     }\n }"}, {"sha": "4cc76c93a17b6cad12bf15a5131d4ce36ced9ef0", "filename": "src/test/compile-fail/sendfn-is-not-a-lambda.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fsendfn-is-not-a-lambda.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fsendfn-is-not-a-lambda.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsendfn-is-not-a-lambda.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -6,5 +6,5 @@ fn test(f: lambda(uint) -> uint) -> uint {\n \n fn main() {\n     let f = sendfn(x: uint) -> uint { ret 4u; };\n-    log test(f);\n+    log_full(core::debug, test(f));\n }\n\\ No newline at end of file"}, {"sha": "52b49723691cc2a73b6d0c754de0b3f8abd55e64", "filename": "src/test/compile-fail/unbalanced-comment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Funbalanced-comment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Funbalanced-comment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funbalanced-comment.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -7,5 +7,5 @@\n  */\n \n fn main() {\n-  log \"hello, world.\";\n+  #debug(\"hello, world.\");\n }"}, {"sha": "4cf50b119f8090b3e0ef2e7ee9076dace47f89e9", "filename": "src/test/compile-fail/unique-pinned-nocopy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Funique-pinned-nocopy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Funique-pinned-nocopy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-pinned-nocopy.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -6,5 +6,5 @@ resource r(b: bool) {\n fn main() {\n     let i <- ~r(true);\n     let j = i;\n-    log i;\n+    log_full(core::debug, i);\n }\n\\ No newline at end of file"}, {"sha": "9fa456aaacb0a8c19a1d8f35dbd6f4061e3931b7", "filename": "src/test/compile-fail/unique-vec-res.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -14,6 +14,6 @@ fn main() {\n     let r1 <- [~r(i1)];\n     let r2 <- [~r(i2)];\n     f(r1, r2);\n-    log (r2, *i1);\n-    log (r1, *i2);\n+    log_full(core::debug, (r2, *i1));\n+    log_full(core::debug, (r1, *i2));\n }\n\\ No newline at end of file"}, {"sha": "94b95e190bd6f24deb116425b6812746fac42477", "filename": "src/test/compile-fail/unsafe-alias-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Funsafe-alias-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Funsafe-alias-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsafe-alias-2.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -4,5 +4,5 @@ fn whoknows(x: @mutable {mutable x: int}) { x.x = 10; }\n \n fn main() {\n     let box = @mutable {mutable x: 1};\n-    alt *box { x { whoknows(box); log_err x; } }\n+    alt *box { x { whoknows(box); log_full(core::error, x); } }\n }"}, {"sha": "2b71a5e72d893a6e6629e69a740292baf8925ab0", "filename": "src/test/compile-fail/unsafe-alias.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Funsafe-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Funsafe-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsafe-alias.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -1,6 +1,6 @@\n // error-pattern:may alias with argument\n \n-fn foo(x: {mutable x: int}, f: fn@()) { log x; }\n+fn foo(x: {mutable x: int}, f: fn@()) { log_full(core::debug, x); }\n \n fn whoknows(x: @mutable {mutable x: int}) { *x = {mutable x: 10}; }\n "}, {"sha": "e19edcfddc7ec04aa610639fca4a9d745c54ba1c", "filename": "src/test/compile-fail/unsafe-alt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Funsafe-alt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Funsafe-alt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsafe-alt.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -4,5 +4,5 @@ tag foo { left({mutable x: int}); right(bool); }\n \n fn main() {\n     let x = left({mutable x: 10});\n-    alt x { left(i) { x = right(false); log i; } _ { } }\n+    alt x { left(i) { x = right(false); log_full(core::debug, i); } _ { } }\n }"}, {"sha": "caaab6d89773f0e1462f1b33d9aa7e9ace4d284b", "filename": "src/test/compile-fail/unsafe-for.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Funsafe-for.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Funsafe-for.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsafe-for.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -2,5 +2,5 @@\n \n fn main() {\n     let v: [mutable {mutable x: int}] = [mutable {mutable x: 1}];\n-    for x in v { v[0] = {mutable x: 2}; log x; }\n+    for x in v { v[0] = {mutable x: 2}; log_full(core::debug, x); }\n }"}, {"sha": "f740d7d7592bb05d5218b1daea6805a2508ce457", "filename": "src/test/compile-fail/unsafe-mutable-alias.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Funsafe-mutable-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Funsafe-mutable-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsafe-mutable-alias.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -5,4 +5,4 @@ fn f(a: {mutable x: int}, &b: {mutable x: int}) -> int {\n     ret a.x + b.x;\n }\n \n-fn main() { let i = {mutable x: 4}; log f(i, i); }\n+fn main() { let i = {mutable x: 4}; log_full(core::debug, f(i, i)); }"}, {"sha": "26decd8baebf023ecacabedb4d9d0828884819a3", "filename": "src/test/compile-fail/unsupported-cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Funsupported-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Funsupported-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsupported-cast.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -4,5 +4,5 @@ use std;\n import std::os;\n \n fn main() {\n-  log 1.0 as os::libc::FILE; // Can't cast float to native.\n+  log_full(core::debug, 1.0 as os::libc::FILE); // Can't cast float to native.\n }"}, {"sha": "e0a06d73acc8d78a635ae804e4c410de4be0dcc2", "filename": "src/test/compile-fail/use-after-move.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fuse-after-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fuse-after-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fuse-after-move.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -1,2 +1,2 @@\n // error-pattern: Unsatisfied precondition constraint (for example, init(x\n-fn main() { let x = @5; let y <- x; log *x; }\n+fn main() { let x = @5; let y <- x; log_full(core::debug, *x); }"}, {"sha": "dfd34aa1168bd8159fe38d440df2a81a19fd0c37", "filename": "src/test/compile-fail/use-after-send.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fuse-after-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fuse-after-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fuse-after-send.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -1,12 +1,16 @@\n // error-pattern: Unsatisfied precondition constraint\n-fn send<send T>(ch: _chan<T>, -data: T) { log ch; log data; fail; }\n+fn send<send T>(ch: _chan<T>, -data: T) {\n+    log_full(core::debug, ch);\n+    log_full(core::debug, data);\n+    fail;\n+}\n type _chan<T> = int;\n \n-// Tests that \"log message;\" is flagged as using\n+// Tests that \"log_full(core::debug, message);\" is flagged as using\n // message after the send deinitializes it\n fn test00_start(ch: _chan<int>, message: int, count: int) {\n     send(ch, message);\n-    log message;\n+    log_full(core::debug, message);\n }\n \n fn main() { fail; }"}, {"sha": "abbca6008fccd4bffbf6e2c9cf9bebd394e58967", "filename": "src/test/compile-fail/use-uninit-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fuse-uninit-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fuse-uninit-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fuse-uninit-2.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -1,5 +1,5 @@\n // error-pattern:Unsatisfied precondition\n \n-fn foo(x: int) { log x; }\n+fn foo(x: int) { log_full(core::debug, x); }\n \n fn main() { let x: int; if 1 > 2 { x = 10; } foo(x); }"}, {"sha": "e731ba4f083f5a1b74d1df826f0b645d8e69bb14", "filename": "src/test/compile-fail/use-uninit-3.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fuse-uninit-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fuse-uninit-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fuse-uninit-3.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -1,5 +1,13 @@\n // error-pattern:Unsatisfied precondition\n \n-fn foo(x: int) { log x; }\n+fn foo(x: int) { log_full(core::debug, x); }\n \n-fn main() { let x: int; if 1 > 2 { log \"whoops\"; } else { x = 10; } foo(x); }\n+fn main() {\n+    let x: int;\n+    if 1 > 2 {\n+        #debug(\"whoops\");\n+    } else {\n+        x = 10;\n+    }\n+    foo(x);\n+}"}, {"sha": "5fac7d3ee6b49cb681678f6f68a96e3edad07c76", "filename": "src/test/compile-fail/use-uninit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fuse-uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fuse-uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fuse-uninit.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -1,5 +1,5 @@\n // error-pattern:Unsatisfied precondition\n \n-fn foo(x: int) { log x; }\n+fn foo(x: int) { log_full(core::debug, x); }\n \n fn main() { let x: int; foo(x); }"}, {"sha": "c376441163dc918e621a36e35613081f885f1833", "filename": "src/test/compile-fail/vec-field.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fvec-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fvec-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvec-field.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -3,7 +3,7 @@\n \n fn f() {\n     let v = [1];\n-    log v.some_field_name; //type error\n+    log_full(core::debug, v.some_field_name); //type error\n }\n \n fn main() { }"}, {"sha": "d2fb07bd1f71e833504c1f9b9ce936cc24bd9798", "filename": "src/test/compile-fail/vec-res-add.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fvec-res-add.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fvec-res-add.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvec-res-add.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -7,5 +7,5 @@ fn main() {\n     let i <- [r(0)];\n     let j <- [r(1)];\n     let k = i + j;\n-    log j;\n+    log_full(core::debug, j);\n }"}, {"sha": "15cb4ab9902db33513381afa7775354fa5bd0f8a", "filename": "src/test/compile-fail/while-loop-constraints.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fwhile-loop-constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fwhile-loop-constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwhile-loop-constraints.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -3,5 +3,12 @@ fn main() {\n \n     let y: int = 42;\n     let x: int;\n-    while true { log y; while true { while true { while true { x <- y; } } } }\n+    while true {\n+        log_full(core::debug, y);\n+        while true {\n+            while true {\n+                while true { x <- y; }\n+            }\n+        }\n+    }\n }"}, {"sha": "6ea21de7f58703953daa2a1a76a9db59c8319f6a", "filename": "src/test/compile-fail/while-loop-pred-constraints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fwhile-loop-pred-constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Fcompile-fail%2Fwhile-loop-pred-constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwhile-loop-pred-constraints.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -1,6 +1,6 @@\n // error-pattern: Unsatisfied precondition constraint (for example, even(y\n \n-fn print_even(y: int) : even(y) { log y; }\n+fn print_even(y: int) : even(y) { log_full(core::debug, y); }\n \n pure fn even(y: int) -> bool { true }\n "}, {"sha": "2203adbd7a73f817884be88c1eec1315c57898b5", "filename": "src/test/run-fail/binop-fail-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-fail%2Fbinop-fail-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-fail%2Fbinop-fail-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fbinop-fail-2.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -1,3 +1,3 @@\n // error-pattern:quux\n-fn my_err(s: str) -> ! { log_err s; fail \"quux\"; }\n+fn my_err(s: str) -> ! { log_full(core::error, s); fail \"quux\"; }\n fn main() { 3u == my_err(\"bye\"); }"}, {"sha": "d8aefe7d6df11dbb4a3af81fcea85a3aa0af8eb6", "filename": "src/test/run-fail/binop-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-fail%2Fbinop-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-fail%2Fbinop-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fbinop-fail.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -1,3 +1,3 @@\n // error-pattern:quux\n-fn my_err(s: str) -> ! { log_err s; fail \"quux\"; }\n+fn my_err(s: str) -> ! { log_full(core::error, s); fail \"quux\"; }\n fn main() { my_err(\"bye\") == 3u; }"}, {"sha": "bdb8ecc9453468eafff4f267af2d82604b0b303f", "filename": "src/test/run-fail/fail-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-fail%2Ffail-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-fail%2Ffail-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ffail-arg.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -1,4 +1,4 @@\n // error-pattern:woe\n-fn f(a: int) { log a; }\n+fn f(a: int) { log_full(core::debug, a); }\n \n fn main() { f(fail \"woe\"); }"}, {"sha": "6f466ea1f64e940354493c62d74ba0de50d3cd8f", "filename": "src/test/run-fail/fn-constraint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-fail%2Ffn-constraint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-fail%2Ffn-constraint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ffn-constraint.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -7,5 +7,5 @@ fn main() {\n     let a: uint = 4u;\n     let b: uint = 1u;\n     check (le(a, b));\n-    log_err safe_slice(\"kitties\", a, b);\n+    log_full(core::error, safe_slice(\"kitties\", a, b));\n }"}, {"sha": "0bf23e4a93c9961a7ca0f73d56a3c0d7e19874f2", "filename": "src/test/run-fail/if-check-fail.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-fail%2Fif-check-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-fail%2Fif-check-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fif-check-fail.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -5,6 +5,12 @@ pure fn even(x: uint) -> bool {\n     } else if x == 2u { ret true; } else { ret even(x - 2u); }\n }\n \n-fn foo(x: uint) { if check even(x) { log x; } else { fail \"Number is odd\"; } }\n+fn foo(x: uint) {\n+    if check even(x) {\n+        log_full(core::debug, x);\n+    } else {\n+        fail \"Number is odd\";\n+    }\n+}\n \n fn main() { foo(3u); }"}, {"sha": "a9877ab4b7a29126c82f226a8c3827618dd01d74", "filename": "src/test/run-fail/if-cond-bot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-fail%2Fif-cond-bot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-fail%2Fif-cond-bot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fif-cond-bot.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -1,3 +1,3 @@\n // error-pattern:quux\n-fn my_err(s: str) -> ! { log_err s; fail \"quux\"; }\n+fn my_err(s: str) -> ! { log_full(core::error, s); fail \"quux\"; }\n fn main() { if my_err(\"bye\") { } }"}, {"sha": "0954d68ad33ab57d8732cdca358fb46f784dec76", "filename": "src/test/run-pass/acyclic-unwind.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Facyclic-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Facyclic-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Facyclic-unwind.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -17,7 +17,7 @@ fn f(c: comm::_chan<int>) {\n \n     while true {\n         // spin waiting for the parent to kill us.\n-        log \"child waiting to die...\";\n+        #debug(\"child waiting to die...\");\n \n         // while waiting to die, the messages we are\n         // sending to the channel are never received\n@@ -35,5 +35,5 @@ fn main() {\n     // synchronize on event from child.\n     i = p.recv();\n \n-    log \"parent exiting, killing child\";\n+    #debug(\"parent exiting, killing child\");\n }"}, {"sha": "314483ca5345fd62e0f4fa11f696d8d2f9967380", "filename": "src/test/run-pass/alt-bot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Falt-bot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Falt-bot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-bot.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -2,5 +2,5 @@\n fn main() {\n     let i: int =\n         alt some::<int>(3) { none::<int>. { fail } some::<int>(_) { 5 } };\n-    log i;\n+    log_full(core::debug, i);\n }"}, {"sha": "e1ed1ac6c0b016018573ad9548a105a81e5f6789", "filename": "src/test/run-pass/alt-join.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Falt-join.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Falt-join.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-join.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -16,4 +16,4 @@ fn foo<T>(y: option::t<T>) {\n     ret;\n }\n \n-fn main() { log \"hello\"; foo::<int>(some::<int>(5)); }\n+fn main() { #debug(\"hello\"); foo::<int>(some::<int>(5)); }"}, {"sha": "8d8a6517a7dfdc7db1eeb11ea7f1125a5f3ca288", "filename": "src/test/run-pass/alt-pattern-drop.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Falt-pattern-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Falt-pattern-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-pattern-drop.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -13,12 +13,12 @@ fn foo(s: @int) {\n \n     alt x {\n       make_t(y) {\n-        log y; // ref up then down\n+        log_full(core::debug, y); // ref up then down\n \n       }\n-      _ { log \"?\"; fail; }\n+      _ { #debug(\"?\"); fail; }\n     }\n-    log dbg::refcount(s);\n+    log_full(core::debug, dbg::refcount(s));\n     assert (dbg::refcount(s) == count + 1u);\n }\n \n@@ -27,6 +27,6 @@ fn main() {\n \n     foo(s); // ref up then down\n \n-    log dbg::refcount(s);\n+    log_full(core::debug, dbg::refcount(s));\n     assert (dbg::refcount(s) == 1u);\n }"}, {"sha": "afc72c80afad52fa98d7942a9d8db1c97150a849", "filename": "src/test/run-pass/alt-pattern-lit.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Falt-pattern-lit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Falt-pattern-lit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-pattern-lit.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -1,7 +1,10 @@\n \n \n fn altlit(f: int) -> int {\n-    alt f { 10 { log \"case 10\"; ret 20; } 11 { log \"case 11\"; ret 22; } }\n+    alt f {\n+      10 { #debug(\"case 10\"); ret 20; }\n+      11 { #debug(\"case 11\"); ret 22; }\n+    }\n }\n \n fn main() { assert (altlit(10) == 20); assert (altlit(11) == 22); }"}, {"sha": "1cd5aa85758a3dfe42686592249ab5cd00ecf8da", "filename": "src/test/run-pass/alt-pattern-no-type-params.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Falt-pattern-no-type-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Falt-pattern-no-type-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-pattern-no-type-params.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -1,7 +1,7 @@\n tag maybe<T> { nothing; just(T); }\n \n fn foo(x: maybe<int>) {\n-    alt x { nothing. { log_err \"A\"; } just(a) { log_err \"B\"; } }\n+    alt x { nothing. { #error(\"A\"); } just(a) { #error(\"B\"); } }\n }\n \n fn main() { }"}, {"sha": "f25c78b03e4583b6ffc3d5a582124c8e7dba9a4a", "filename": "src/test/run-pass/alt-tag.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Falt-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Falt-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-tag.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -11,9 +11,9 @@ tag color {\n fn process(c: color) -> int {\n     let x: int;\n     alt c {\n-      rgb(r, _, _) { log \"rgb\"; log r; x = r; }\n-      rgba(_, _, _, a) { log \"rgba\"; log a; x = a; }\n-      hsl(_, s, _) { log \"hsl\"; log s; x = s; }\n+      rgb(r, _, _) { #debug(\"rgb\"); log_full(core::debug, r); x = r; }\n+      rgba(_, _, _, a) { #debug(\"rgba\"); log_full(core::debug, a); x = a; }\n+      hsl(_, s, _) { #debug(\"hsl\"); log_full(core::debug, s); x = s; }\n     }\n     ret x;\n }"}, {"sha": "c4b544c7c68995fab4087d167079b9d5e3d3a326", "filename": "src/test/run-pass/argv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fargv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fargv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fargv.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -1,5 +1,5 @@\n fn main(args: [str]) {\n     let vs: [str] = [\"hi\", \"there\", \"this\", \"is\", \"a\", \"vec\"];\n     let vvs: [[str]] = [args, vs];\n-    for vs: [str] in vvs { for s: str in vs { log s; } }\n+    for vs: [str] in vvs { for s: str in vs { log_full(core::debug, s); } }\n }"}, {"sha": "1649900305a552a74b6ba88114cc263fd1289a2a", "filename": "src/test/run-pass/arith-0.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Farith-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Farith-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Farith-0.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -1,3 +1,7 @@\n \n \n-fn main() { let a: int = 10; log a; assert (a * (a - 1) == 90); }\n+fn main() {\n+    let a: int = 10;\n+    log_full(core::debug, a);\n+    assert (a * (a - 1) == 90);\n+}"}, {"sha": "d1c6ac117a37082365635e5553defce790f5cec2", "filename": "src/test/run-pass/arith-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Farith-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Farith-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Farith-1.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -18,6 +18,6 @@ fn main() {\n     assert (i32_b << 1 == i32_b << 1);\n     assert (i32_b >> 1 == i32_b >> 1);\n     assert (i32_b & i32_b << 1 == 0);\n-    log i32_b | i32_b << 1;\n+    log_full(core::debug, i32_b | i32_b << 1);\n     assert (i32_b | i32_b << 1 == 0x30303030);\n }"}, {"sha": "5c963b6cc51e210c0318ea07161f37cd4a9842f3", "filename": "src/test/run-pass/auto-instantiate.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fauto-instantiate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fauto-instantiate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-instantiate.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -4,4 +4,7 @@\n // -*- rust -*-\n fn f<copy T, copy U>(x: T, y: U) -> {a: T, b: U} { ret {a: x, b: y}; }\n \n-fn main() { log f({x: 3, y: 4, z: 5}, 4).a.x; log f(5, 6).a; }\n+fn main() {\n+    log_full(core::debug, f({x: 3, y: 4, z: 5}, 4).a.x);\n+    log_full(core::debug, f(5, 6).a);\n+}"}, {"sha": "930fbe545b597596fe278493a752c4cbdef9ad7f", "filename": "src/test/run-pass/autoderef-objfn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fautoderef-objfn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fautoderef-objfn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-objfn.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -3,7 +3,7 @@\n \n // -*- rust -*-\n obj clam() {\n-    fn chowder() { log \"in clam chowder\"; }\n+    fn chowder() { #debug(\"in clam chowder\"); }\n }\n \n fn foo(c: @clam) { c.chowder(); }"}, {"sha": "1afb2cbd1ffbdb5383549174fecbf10b2e6d2be7", "filename": "src/test/run-pass/basic-1.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fbasic-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fbasic-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbasic-1.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -16,15 +16,15 @@ fn main() {\n     let n: int = 0;\n     n = recv(p);\n     n = recv(p);\n-    //    log \"Finished.\";\n+    //    #debug(\"Finished.\");\n }\n \n fn b(c: chan<int>) {\n-    //    log \"task b0\";\n-    //    log \"task b1\";\n-    //    log \"task b2\";\n-    //    log \"task b3\";\n-    //    log \"task b4\";\n-    //    log \"task b5\";\n+    //    #debug(\"task b0\");\n+    //    #debug(\"task b1\");\n+    //    #debug(\"task b2\");\n+    //    #debug(\"task b3\");\n+    //    #debug(\"task b4\");\n+    //    #debug(\"task b5\");\n     send(c, 10);\n }"}, {"sha": "077109d616a238bbe51075c2e9ea68ab4c1cdf0b", "filename": "src/test/run-pass/basic-2.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fbasic-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fbasic-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbasic-2.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -7,7 +7,7 @@ import comm::chan;\n import comm::recv;\n import task;\n \n-fn a(c: chan<int>) { log \"task a0\"; log \"task a1\"; send(c, 10); }\n+fn a(c: chan<int>) { #debug(\"task a0\"); #debug(\"task a1\"); send(c, 10); }\n \n fn main() {\n     let p = comm::port();\n@@ -16,14 +16,14 @@ fn main() {\n     let n: int = 0;\n     n = recv(p);\n     n = recv(p);\n-    log \"Finished.\";\n+    #debug(\"Finished.\");\n }\n \n fn b(c: chan<int>) {\n-    log \"task b0\";\n-    log \"task b1\";\n-    log \"task b2\";\n-    log \"task b2\";\n-    log \"task b3\";\n+    #debug(\"task b0\");\n+    #debug(\"task b1\");\n+    #debug(\"task b2\");\n+    #debug(\"task b2\");\n+    #debug(\"task b3\");\n     send(c, 10);\n }"}, {"sha": "6affd11366e9e332aa95cf4d8cd79796f73353d4", "filename": "src/test/run-pass/basic.rs", "status": "modified", "additions": 19, "deletions": 14, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbasic.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -9,18 +9,23 @@ import task;\n \n fn a(c: chan<int>) {\n     if true {\n-        log \"task a\";\n-        log \"task a\";\n-        log \"task a\";\n-        log \"task a\";\n-        log \"task a\";\n+        #debug(\"task a\");\n+        #debug(\"task a\");\n+        #debug(\"task a\");\n+        #debug(\"task a\");\n+        #debug(\"task a\");\n     }\n     send(c, 10);\n }\n \n fn k(x: int) -> int { ret 15; }\n \n-fn g(x: int, y: str) -> int { log x; log y; let z: int = k(1); ret z; }\n+fn g(x: int, y: str) -> int {\n+    log_full(core::debug, x);\n+    log_full(core::debug, y);\n+    let z: int = k(1);\n+    ret z;\n+}\n \n fn main() {\n     let n: int = 2 + 3 * 7;\n@@ -30,21 +35,21 @@ fn main() {\n     task::spawn(chan(p), b);\n     let x: int = 10;\n     x = g(n, s);\n-    log x;\n+    log_full(core::debug, x);\n     n = recv(p);\n     n = recv(p);\n     // FIXME: use signal-channel for this.\n-    log \"children finished, root finishing\";\n+    #debug(\"children finished, root finishing\");\n }\n \n fn b(c: chan<int>) {\n     if true {\n-        log \"task b\";\n-        log \"task b\";\n-        log \"task b\";\n-        log \"task b\";\n-        log \"task b\";\n-        log \"task b\";\n+        #debug(\"task b\");\n+        #debug(\"task b\");\n+        #debug(\"task b\");\n+        #debug(\"task b\");\n+        #debug(\"task b\");\n+        #debug(\"task b\");\n     }\n     send(c, 10);\n }"}, {"sha": "6a0c1ea46330deb5a0b584caae7663b61d41fd03", "filename": "src/test/run-pass/bind-generic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fbind-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fbind-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbind-generic.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -1,6 +1,6 @@\n fn wrapper3<copy T>(i: T, j: int) {\n-    log i;\n-    log j;\n+    log_full(core::debug, i);\n+    log_full(core::debug, j);\n     // This is a regression test that the spawn3 thunk to wrapper3\n     // correctly finds the value of j\n     assert j == 123456789;"}, {"sha": "981ce0c9f21bbbf2b89e4e6ef31c8f1e37024a61", "filename": "src/test/run-pass/bind-parameterized-args-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fbind-parameterized-args-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fbind-parameterized-args-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbind-parameterized-args-2.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -1,5 +1,5 @@\n fn main() {\n-    fn echo<T>(c: int, x: fn(T)) { log_err \"wee\"; }\n+    fn echo<T>(c: int, x: fn(T)) { #error(\"wee\"); }\n \n     let y = bind echo(42, _);\n "}, {"sha": "cbf936429a3b8a90c4196d7693fb0c32ddd057c3", "filename": "src/test/run-pass/bitwise.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fbitwise.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fbitwise.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbitwise.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -18,8 +18,8 @@ fn general() {\n     a ^= b;\n     b ^= a;\n     a = a ^ b;\n-    log a;\n-    log b;\n+    log_full(core::debug, a);\n+    log_full(core::debug, b);\n     assert (b == 1);\n     assert (a == 2);\n     assert (!0xf0 & 0xff == 0xf);"}, {"sha": "71bd75d03b6b300abecf21bc24f49eeef729426d", "filename": "src/test/run-pass/block-explicit-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fblock-explicit-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fblock-explicit-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-explicit-types.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -1,4 +1,4 @@\n fn main() {\n     fn as_buf<T>(s: str, f: block(str) -> T) -> T { f(s) }\n-    as_buf(\"foo\", {|foo: str| -> () log_err foo;});\n+    as_buf(\"foo\", {|foo: str| -> () log_full(core::error, foo);});\n }"}, {"sha": "2a2f754ca8631a4106b8d526d12df615527b3589", "filename": "src/test/run-pass/block-iter-1.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fblock-iter-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fblock-iter-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-iter-1.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -3,7 +3,13 @@ fn iter_vec<T>(v: [T], f: block(T)) { for x: T in v { f(x); } }\n fn main() {\n     let v = [1, 2, 3, 4, 5, 6, 7];\n     let odds = 0;\n-    iter_vec(v, {|i| log_err i; if i % 2 == 1 { odds += 1; } log_err odds; });\n-    log_err odds;\n+    iter_vec(v, {|i|\n+        log_full(core::error, i);\n+        if i % 2 == 1 {\n+            odds += 1;\n+        }\n+        log_full(core::error, odds);\n+    });\n+    log_full(core::error, odds);\n     assert (odds == 4);\n }"}, {"sha": "d5d3d45160f07b5dc4b4c3432d98014af34937e7", "filename": "src/test/run-pass/block-iter-2.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fblock-iter-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fblock-iter-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-iter-2.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -3,7 +3,12 @@ fn iter_vec<T>(v: [T], f: block(T)) { for x: T in v { f(x); } }\n fn main() {\n     let v = [1, 2, 3, 4, 5];\n     let sum = 0;\n-    iter_vec(v, {|i| iter_vec(v, {|j| log_err i * j; sum += i * j; }); });\n-    log_err sum;\n+    iter_vec(v, {|i|\n+        iter_vec(v, {|j|\n+            log_full(core::error, i * j);\n+            sum += i * j;\n+        });\n+    });\n+    log_full(core::error, sum);\n     assert (sum == 225);\n }"}, {"sha": "7569d78b42d0470fcb4e08982f49914dd91a86ce", "filename": "src/test/run-pass/block-vec-map2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fblock-vec-map2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fblock-vec-map2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-vec-map2.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -6,6 +6,6 @@ fn main() {\n         vec::map2([1, 2, 3, 4, 5],\n                   [true, false, false, true, true],\n                   {|i, b| if b { -i } else { i } });\n-    log_err v;\n+    log_full(core::error, v);\n     assert (v == [-1, 2, 3, -4, -5]);\n }"}, {"sha": "caa70c953afd84c2480e05fbd5b745bf20e6d61b", "filename": "src/test/run-pass/box-inside-if.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fbox-inside-if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fbox-inside-if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbox-inside-if.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -9,7 +9,7 @@ fn is_odd(n: int) -> bool { ret true; }\n fn length_is_even(vs: @int) -> bool { ret true; }\n \n fn foo(acc: int, n: int) {\n-    if is_odd(n) && length_is_even(some_box(1)) { log_err \"bloop\"; }\n+    if is_odd(n) && length_is_even(some_box(1)) { #error(\"bloop\"); }\n }\n \n fn main() { foo(67, 5); }"}, {"sha": "437a167cd6a96ed884b9f2958dbba0d56b974388", "filename": "src/test/run-pass/box-inside-if2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fbox-inside-if2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fbox-inside-if2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbox-inside-if2.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -9,7 +9,7 @@ fn is_odd(n: int) -> bool { ret true; }\n fn length_is_even(vs: @int) -> bool { ret true; }\n \n fn foo(acc: int, n: int) {\n-    if is_odd(n) || length_is_even(some_box(1)) { log_err \"bloop\"; }\n+    if is_odd(n) || length_is_even(some_box(1)) { #error(\"bloop\"); }\n }\n \n fn main() { foo(67, 5); }"}, {"sha": "61f932bb93920fb2a714992ee47c025d4ae416f2", "filename": "src/test/run-pass/box-unbox.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fbox-unbox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fbox-unbox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbox-unbox.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -7,6 +7,6 @@ fn unbox<copy T>(b: box<T>) -> T { ret *b.c; }\n fn main() {\n     let foo: int = 17;\n     let bfoo: box<int> = {c: @foo};\n-    log \"see what's in our box\";\n+    #debug(\"see what's in our box\");\n     assert (unbox::<int>(bfoo) == foo);\n }"}, {"sha": "4b6193f312c18c7ecf2b1bfadfb54ddecccd8f41", "filename": "src/test/run-pass/bug-862.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fbug-862.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fbug-862.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbug-862.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -4,4 +4,4 @@ fn f(i: int, j: int) : p(j) -> int { j }\n \n fn g(i: int, j: int) : p(j) -> int { f(i, j) }\n \n-fn main() { let x = 1; check (p(x)); log g(x, x); }\n+fn main() { let x = 1; check (p(x)); log_full(core::debug, g(x, x)); }"}, {"sha": "033b6f26fd812200dafb493a4da07ba2c110a019", "filename": "src/test/run-pass/comm.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcomm.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -11,13 +11,13 @@ fn main() {\n     let p = comm::port();\n     let t = task::spawn(chan(p), child);\n     let y = recv(p);\n-    log_err \"received\";\n-    log_err y;\n+    #error(\"received\");\n+    log_full(core::error, y);\n     assert (y == 10);\n }\n \n fn child(c: chan<int>) {\n-    log_err \"sending\";\n+    #error(\"sending\");\n     send(c, 10);\n     log_err \"value sent\"\n }"}, {"sha": "19251a2b97ea2ee67d33cb265bf935ee6aafb18f", "filename": "src/test/run-pass/command-line-args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fcommand-line-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fcommand-line-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcommand-line-args.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -1,3 +1,3 @@\n \n \n-fn main(args: [str]) { log args[0]; }\n+fn main(args: [str]) { log_full(core::debug, args[0]); }"}, {"sha": "4345170818ef96939e8a1a25727dcf9722496d49", "filename": "src/test/run-pass/complex.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fcomplex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fcomplex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcomplex.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -25,4 +25,9 @@ fn foo(x: int) -> int {\n     ret 0;\n }\n \n-fn main() { let x: int = 2 + 2; log x; log \"hello, world\"; log 10; }\n+fn main() {\n+    let x: int = 2 + 2;\n+    log_full(core::debug, x);\n+    #debug(\"hello, world\");\n+    log_full(core::debug, 10);\n+}"}, {"sha": "bfc75cf68d7ef10bb3a4fa7a19f5569b9c8a2464", "filename": "src/test/run-pass/const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fconst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fconst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -2,4 +2,4 @@\n \n const i: int = 10;\n \n-fn main() { log i; }\n+fn main() { log_full(core::debug, i); }"}, {"sha": "001268e5fd6e26116319cb84a411d21c72f201d5", "filename": "src/test/run-pass/constraint-prop-expr-move.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fconstraint-prop-expr-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fconstraint-prop-expr-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconstraint-prop-expr-move.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -8,5 +8,5 @@ fn main() {\n     let c: uint = 17u;\n     check (le(a, b));\n     c <- a;\n-    log safe_slice(\"kitties\", c, b);\n+    log_full(core::debug, safe_slice(\"kitties\", c, b));\n }"}, {"sha": "52d3a3551279736f895612c8f5581c9e710fd1d8", "filename": "src/test/run-pass/constraint-prop-move.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fconstraint-prop-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fconstraint-prop-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconstraint-prop-move.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -7,5 +7,5 @@ fn main() {\n     let b: uint = 4u;\n     check (le(a, b));\n     let c <- a;\n-    log safe_slice(\"kitties\", c, b);\n+    log_full(core::debug, safe_slice(\"kitties\", c, b));\n }"}, {"sha": "16dd8b8fbe2a5759f43821c0f27e04211a20641a", "filename": "src/test/run-pass/constraint-prop-swap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fconstraint-prop-swap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fconstraint-prop-swap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconstraint-prop-swap.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -7,5 +7,5 @@ fn main() {\n     let b: uint = 1u;\n     check (le(b, a));\n     b <-> a;\n-    log safe_slice(\"kitties\", a, b);\n+    log_full(core::debug, safe_slice(\"kitties\", a, b));\n }"}, {"sha": "089047d6eeda95713bfbcbb61e98f7254011050a", "filename": "src/test/run-pass/constraint-prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fconstraint-prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fconstraint-prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconstraint-prop.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -7,5 +7,5 @@ fn main() {\n     let b: uint = 4u;\n     check (le(a, b));\n     let c = b;\n-    log safe_slice(\"kitties\", a, c);\n+    log_full(core::debug, safe_slice(\"kitties\", a, c));\n }"}, {"sha": "f79072068da54982a65ad0edf495f235af74a0ee", "filename": "src/test/run-pass/dead-code-one-arm-if.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fdead-code-one-arm-if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fdead-code-one-arm-if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdead-code-one-arm-if.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -2,4 +2,4 @@\n \n \n // -*- rust -*-\n-fn main() { if 1 == 1 { ret; } log \"Paul is dead\"; }\n+fn main() { if 1 == 1 { ret; } #debug(\"Paul is dead\"); }"}, {"sha": "0f494131ab83e6b844582213c096ab9f2d92f5b9", "filename": "src/test/run-pass/deref-lval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fderef-lval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fderef-lval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderef-lval.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -1,3 +1,3 @@\n \n \n-fn main() { let x = @mutable 5; *x = 1000; log *x; }\n+fn main() { let x = @mutable 5; *x = 1000; log_full(core::debug, *x); }"}, {"sha": "007e25a251cf4cd007f08bb00e2c47d0c0ec7000", "filename": "src/test/run-pass/export-non-interference2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fexport-non-interference2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fexport-non-interference2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexport-non-interference2.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -6,7 +6,7 @@ mod foo {\n         fn y() { x(); }\n     }\n \n-    fn x() { log \"x\"; }\n+    fn x() { #debug(\"x\"); }\n }\n \n fn main() { foo::bar::y(); }"}, {"sha": "161ab05e26607556b0fe272a0c1902dcc393f276", "filename": "src/test/run-pass/export-non-interference3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fexport-non-interference3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fexport-non-interference3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexport-non-interference3.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -7,7 +7,7 @@ mod foo {\n mod bar {\n     export x;\n \n-    fn x() { log \"x\"; }\n+    fn x() { #debug(\"x\"); }\n }\n \n fn main() { foo::x(); }"}, {"sha": "768a75878f437bce5be38e89bae35e072200b464", "filename": "src/test/run-pass/expr-block-generic-box1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic-box1.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -11,8 +11,8 @@ fn test_generic<T>(expected: @T, eq: compare<T>) {\n \n fn test_box() {\n     fn compare_box(b1: @bool, b2: @bool) -> bool {\n-        log *b1;\n-        log *b2;\n+        log_full(core::debug, *b1);\n+        log_full(core::debug, *b2);\n         ret *b1 == *b2;\n     }\n     let eq = bind compare_box(_, _);"}, {"sha": "6c61cf619a123278caa2a8c9a7a45aa931b044cc", "filename": "src/test/run-pass/expr-block-generic-unique1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic-unique1.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -10,8 +10,8 @@ fn test_generic<copy T>(expected: ~T, eq: compare<T>) {\n \n fn test_box() {\n     fn compare_box(b1: ~bool, b2: ~bool) -> bool {\n-        log *b1;\n-        log *b2;\n+        log_full(core::debug, *b1);\n+        log_full(core::debug, *b2);\n         ret *b1 == *b2;\n     }\n     let eq = bind compare_box(_, _);"}, {"sha": "4baf413b4c92976afea6dd1b6487e1e4085c155b", "filename": "src/test/run-pass/fact.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Ffact.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Ffact.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffact.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -3,26 +3,26 @@\n \n // -*- rust -*-\n fn f(x: int) -> int {\n-    // log \"in f:\";\n+    // #debug(\"in f:\");\n \n-    log x;\n+    log_full(core::debug, x);\n     if x == 1 {\n-        // log \"bottoming out\";\n+        // #debug(\"bottoming out\");\n \n         ret 1;\n     } else {\n-        // log \"recurring\";\n+        // #debug(\"recurring\");\n \n         let y: int = x * f(x - 1);\n-        // log \"returned\";\n+        // #debug(\"returned\");\n \n-        log y;\n+        log_full(core::debug, y);\n         ret y;\n     }\n }\n \n fn main() {\n     assert (f(5) == 120);\n-    // log \"all done\";\n+    // #debug(\"all done\");\n \n }"}, {"sha": "f0085418fdb9c6971e67768d21877bfd607b7864", "filename": "src/test/run-pass/float-signature.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Ffloat-signature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Ffloat-signature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffloat-signature.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -4,5 +4,5 @@ fn main() {\n     fn foo(n: float) -> float { ret n + 0.12345; }\n     let n: float = 0.1;\n     let m: float = foo(n);\n-    log m;\n+    log_full(core::debug, m);\n }"}, {"sha": "a57e897f50669e7cecca6e6b9924af70076a44f4", "filename": "src/test/run-pass/float.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffloat.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -2,9 +2,9 @@\n \n fn main() {\n     let pi = 3.1415927;\n-    log -pi * (pi + 2.0 / pi) - pi * 5.0;\n+    log_full(core::debug, -pi * (pi + 2.0 / pi) - pi * 5.0);\n     if pi == 5.0 || pi < 10.0 || pi <= 2.0 || pi != 22.0 / 7.0 || pi >= 10.0\n            || pi > 1.0 {\n-        log \"yes\";\n+        #debug(\"yes\");\n     }\n }"}, {"sha": "2baea9846abf1fce18bafb0e658491558e01e417", "filename": "src/test/run-pass/fn-bare-item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Ffn-bare-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Ffn-bare-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-bare-item.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -1,5 +1,5 @@\n fn f() {\n-    log \"This is a bare function\";\n+    #debug(\"This is a bare function\");\n }\n \n fn main() {"}, {"sha": "5a3486538ae3bcee6dc644769b4a04793c60985d", "filename": "src/test/run-pass/fn-constraint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Ffn-constraint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Ffn-constraint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-constraint.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -6,5 +6,5 @@ fn main() {\n     let a: uint = 1u;\n     let b: uint = 4u;\n     check (le(a, b));\n-    log safe_slice(\"kitties\", a, b);\n+    log_full(core::debug, safe_slice(\"kitties\", a, b));\n }"}, {"sha": "947e0a0a345b74651fb936d1ad5e18a043e58357", "filename": "src/test/run-pass/foreach-put-structured.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fforeach-put-structured.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fforeach-put-structured.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-put-structured.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -11,8 +11,8 @@ fn main() {\n     let j: int = 0;\n     pairs() {|p|\n         let (_0, _1) = p;\n-        log _0;\n-        log _1;\n+        log_full(core::debug, _0);\n+        log_full(core::debug, _1);\n         assert (_0 + 10 == i);\n         i += 1;\n         j = _1;"}, {"sha": "81b26a42e1be9c89342f8bb9cfa82df230f7cdaf", "filename": "src/test/run-pass/foreach-simple-outer-slot.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fforeach-simple-outer-slot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fforeach-simple-outer-slot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-simple-outer-slot.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -4,13 +4,13 @@\n // -*- rust -*-\n fn main() {\n     let sum: int = 0;\n-    first_ten {|i| log \"main\"; log i; sum = sum + i; };\n-    log \"sum\";\n-    log sum;\n+    first_ten {|i| #debug(\"main\"); log_full(core::debug, i); sum = sum + i; };\n+    #debug(\"sum\");\n+    log_full(core::debug, sum);\n     assert (sum == 45);\n }\n \n fn first_ten(it: block(int)) {\n     let i: int = 0;\n-    while i < 10 { log \"first_ten\"; it(i); i = i + 1; }\n+    while i < 10 { #debug(\"first_ten\"); it(i); i = i + 1; }\n }"}, {"sha": "1927895c4a00158cdfaf1b500ee3677a01454500", "filename": "src/test/run-pass/generic-alias-box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fgeneric-alias-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fgeneric-alias-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-alias-box.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -5,6 +5,6 @@ fn id<copy T>(t: T) -> T { ret t; }\n fn main() {\n     let expected = @100;\n     let actual = id::<@int>(expected);\n-    log *actual;\n+    log_full(core::debug, *actual);\n     assert (*expected == *actual);\n }"}, {"sha": "afab511d0fee8c0738d9ed519bc8c600a32861dd", "filename": "src/test/run-pass/generic-alias-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fgeneric-alias-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fgeneric-alias-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-alias-unique.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -5,6 +5,6 @@ fn id<send T>(t: T) -> T { ret t; }\n fn main() {\n     let expected = ~100;\n     let actual = id::<~int>(expected);\n-    log *actual;\n+    log_full(core::debug, *actual);\n     assert (*expected == *actual);\n }"}, {"sha": "a38673c5e20386f2260090daab2aee6d8aa35a11", "filename": "src/test/run-pass/generic-derived-type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fgeneric-derived-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fgeneric-derived-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-derived-type.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -11,8 +11,8 @@ fn f<copy T>(t: T) -> {a: T, b: T} {\n \n fn main() {\n     let b = f::<int>(10);\n-    log b.a;\n-    log b.b;\n+    log_full(core::debug, b.a);\n+    log_full(core::debug, b.b);\n     assert (b.a == 10);\n     assert (b.b == 10);\n }"}, {"sha": "51fd9d266a9a26b7bb57cf36f98023203e7ccb0f", "filename": "src/test/run-pass/generic-fn-box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fgeneric-fn-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fgeneric-fn-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-fn-box.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -2,4 +2,4 @@\n \n fn f<T>(x: @T) -> @T { ret x; }\n \n-fn main() { let x = f(@3); log *x; }\n+fn main() { let x = f(@3); log_full(core::debug, *x); }"}, {"sha": "1da5e7ecbeced112861040f9e27cf3a478f88a65", "filename": "src/test/run-pass/generic-fn-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fgeneric-fn-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fgeneric-fn-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-fn-unique.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -1,4 +1,4 @@\n \n fn f<copy T>(x: ~T) -> ~T { ret x; }\n \n-fn main() { let x = f(~3); log *x; }\n+fn main() { let x = f(~3); log_full(core::debug, *x); }"}, {"sha": "64c7d969f23943e6dbfb8a5cb5a828abecde0166", "filename": "src/test/run-pass/generic-fn.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fgeneric-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fgeneric-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-fn.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -14,14 +14,14 @@ fn main() {\n     let p: triple = {x: 65, y: 66, z: 67};\n     let q: triple = {x: 68, y: 69, z: 70};\n     y = id::<int>(x);\n-    log y;\n+    log_full(core::debug, y);\n     assert (x == y);\n     b = id::<char>(a);\n-    log b;\n+    log_full(core::debug, b);\n     assert (a == b);\n     q = id::<triple>(p);\n     x = p.z;\n     y = q.z;\n-    log y;\n+    log_full(core::debug, y);\n     assert (x == y);\n }"}, {"sha": "d3d8c4cc98b6f4820def90621f45464c8e2442e1", "filename": "src/test/run-pass/generic-obj-with-derived-type.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fgeneric-obj-with-derived-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fgeneric-obj-with-derived-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-obj-with-derived-type.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -8,10 +8,10 @@ fn main() {\n     type rgb = {x: u8, y: u8, z: u8};\n \n     let h: handle<rgb> = handle::<rgb>({x: 1 as u8, y: 2 as u8, z: 3 as u8});\n-    log \"constructed object\";\n-    log h.get().x;\n-    log h.get().y;\n-    log h.get().z;\n+    #debug(\"constructed object\");\n+    log_full(core::debug, h.get().x);\n+    log_full(core::debug, h.get().y);\n+    log_full(core::debug, h.get().z);\n     assert (h.get().x == 1 as u8);\n     assert (h.get().y == 2 as u8);\n     assert (h.get().z == 3 as u8);"}, {"sha": "0b503e50f1faa8b9c481ffebb3ec231463f537af", "filename": "src/test/run-pass/generic-obj.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fgeneric-obj.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fgeneric-obj.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-obj.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -12,10 +12,10 @@ obj buf<copy T>(data: {_0: T, _1: T, _2: T}) {\n \n fn main() {\n     let b: buf<int> = buf::<int>({_0: 1, _1: 2, _2: 3});\n-    log \"constructed object\";\n-    log b.get(0);\n-    log b.get(1);\n-    log b.get(2);\n+    #debug(\"constructed object\");\n+    log_full(core::debug, b.get(0));\n+    log_full(core::debug, b.get(1));\n+    log_full(core::debug, b.get(2));\n     assert (b.get(0) == 1);\n     assert (b.get(1) == 2);\n     assert (b.get(2) == 3);"}, {"sha": "469dc20084502d625b2d0e494e710c30b4f7f879", "filename": "src/test/run-pass/generic-tag-alt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fgeneric-tag-alt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fgeneric-tag-alt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-tag-alt.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -4,7 +4,7 @@ tag foo<T> { arm(T); }\n \n fn altfoo<T>(f: foo<T>) {\n     let hit = false;\n-    alt f { arm::<T>(x) { log \"in arm\"; hit = true; } }\n+    alt f { arm::<T>(x) { #debug(\"in arm\"); hit = true; } }\n     assert (hit);\n }\n "}, {"sha": "ba7f5858b4ea953052a015b8b844eecb4bdb6c6f", "filename": "src/test/run-pass/generic-tag-values.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fgeneric-tag-values.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fgeneric-tag-values.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-tag-values.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -6,9 +6,14 @@ tag noption<T> { some(T); }\n \n fn main() {\n     let nop: noption<int> = some::<int>(5);\n-    alt nop { some::<int>(n) { log n; assert (n == 5); } }\n+    alt nop { some::<int>(n) { log_full(core::debug, n); assert (n == 5); } }\n     let nop2: noption<{x: int, y: int}> = some({x: 17, y: 42});\n     alt nop2 {\n-      some(t) { log t.x; log t.y; assert (t.x == 17); assert (t.y == 42); }\n+      some(t) {\n+        log_full(core::debug, t.x);\n+        log_full(core::debug, t.y);\n+        assert (t.x == 17);\n+        assert (t.y == 42);\n+      }\n     }\n }"}, {"sha": "954fde38d4de7f084b9b8174ed6bee2d6b7c3c2b", "filename": "src/test/run-pass/generic-temporary.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fgeneric-temporary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fgeneric-temporary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-temporary.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -2,7 +2,7 @@\n \n fn mk() -> int { ret 1; }\n \n-fn chk(&&a: int) { log a; assert (a == 1); }\n+fn chk(&&a: int) { log_full(core::debug, a); assert (a == 1); }\n \n fn apply<T>(produce: fn() -> T, consume: fn(T)) { consume(produce()); }\n "}, {"sha": "38cf67b3baa7c1fb55669be68abcf6dcb07f6d88", "filename": "src/test/run-pass/generic-tup.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fgeneric-tup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fgeneric-tup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-tup.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -1,7 +1,7 @@\n fn get_third<copy T>(t: (T, T, T)) -> T { let (_, _, x) = t; ret x; }\n \n fn main() {\n-    log get_third((1, 2, 3));\n+    log_full(core::debug, get_third((1, 2, 3)));\n     assert (get_third((1, 2, 3)) == 3);\n     assert (get_third((5u8, 6u8, 7u8)) == 7u8);\n }"}, {"sha": "204fa51730249811a07689bf38f83f622d44580f", "filename": "src/test/run-pass/hashmap-memory.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -48,11 +48,11 @@ mod map_reduce {\n               some(_c) { c = _c }\n               none. {\n                 let p = port();\n-                log_err \"sending find_reducer\";\n+                #error(\"sending find_reducer\");\n                 send(ctrl, find_reducer(str::bytes(key), chan(p)));\n-                log_err \"receiving\";\n+                #error(\"receiving\");\n                 c = recv(p);\n-                log_err c;\n+                log_full(core::error, c);\n                 im.insert(key, c);\n               }\n             }"}, {"sha": "018830de4c9f5dc9a282fcb540f3824092a509fa", "filename": "src/test/run-pass/hello.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fhello.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fhello.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhello.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -2,4 +2,4 @@\n \n \n // -*- rust -*-\n-fn main() { log \"hello, world.\"; }\n+fn main() { #debug(\"hello, world.\"); }"}, {"sha": "78acc18e64357212c60d44a60dfdbdbc770a42fb", "filename": "src/test/run-pass/if-bot.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fif-bot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fif-bot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fif-bot.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -1,3 +1,6 @@\n \n \n-fn main() { let i: int = if false { fail } else { 5 }; log i; }\n+fn main() {\n+    let i: int = if false { fail } else { 5 };\n+    log_full(core::debug, i);\n+}"}, {"sha": "58b61be0b05324c9e427fc6050a25b37a25935bb", "filename": "src/test/run-pass/if-check-precond.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fif-check-precond.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fif-check-precond.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fif-check-precond.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -4,7 +4,7 @@ pure fn even(x: uint) -> bool {\n     } else if x == 2u { ret true; } else { ret even(x - 2u); }\n }\n \n-fn print_even(x: uint) : even(x) { log x; }\n+fn print_even(x: uint) : even(x) { log_full(core::debug, x); }\n \n fn foo(x: uint) { if check even(x) { print_even(x); } else { fail; } }\n "}, {"sha": "af41543041baad5c1d3b20a3748c2b64594ffcce", "filename": "src/test/run-pass/if-check.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fif-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fif-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fif-check.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -4,6 +4,12 @@ pure fn even(x: uint) -> bool {\n     } else if x == 2u { ret true; } else { ret even(x - 2u); }\n }\n \n-fn foo(x: uint) { if check even(x) { log x; } else { fail; } }\n+fn foo(x: uint) {\n+    if check even(x) {\n+        log_full(core::debug, x);\n+    } else {\n+        fail;\n+    }\n+}\n \n fn main() { foo(2u); }"}, {"sha": "1ea6ceae22c1173bff428677b4eeb447eed2a352", "filename": "src/test/run-pass/import-glob-0.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fimport-glob-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fimport-glob-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport-glob-0.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -5,10 +5,10 @@ mod module_of_many_things {\n     export f1;\n     export f2;\n     export f4;\n-    fn f1() { log \"f1\"; }\n-    fn f2() { log \"f2\"; }\n-    fn f3() { log \"f3\"; }\n-    fn f4() { log \"f4\"; }\n+    fn f1() { #debug(\"f1\"); }\n+    fn f2() { #debug(\"f2\"); }\n+    fn f3() { #debug(\"f3\"); }\n+    fn f4() { #debug(\"f4\"); }\n }\n \n mod dug {\n@@ -17,8 +17,8 @@ mod dug {\n             mod and {\n                 mod too {\n                     mod deep {\n-                        fn nameless_fear() { log \"Boo!\"; }\n-                        fn also_redstone() { log \"Whatever.\"; }\n+                        fn nameless_fear() { #debug(\"Boo!\"); }\n+                        fn also_redstone() { #debug(\"Whatever.\"); }\n                     }\n                 }\n             }"}, {"sha": "5542f3b633aa39bd965b7bd834ac4f2e5b74ec2e", "filename": "src/test/run-pass/import-glob-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fimport-glob-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fimport-glob-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport-glob-1.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -32,7 +32,7 @@ mod a2 {\n     mod b2 {\n         //   |\n         fn word_traveler() { //   |\n-            log \"ahoy!\"; //  -/\n+            #debug(\"ahoy!\"); //  -/\n         } //\n     } //\n }"}, {"sha": "16a132c1d5d7f80d629e8bc195190546b9ace765", "filename": "src/test/run-pass/import-in-block.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fimport-in-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fimport-in-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport-in-block.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -3,9 +3,9 @@ use std;\n fn main() {\n     import vec;\n     import vec::to_mut;\n-    log vec::len(to_mut([1, 2]));\n+    log_full(core::debug, vec::len(to_mut([1, 2])));\n     {\n         import vec::*;\n-        log len([2]);\n+        log_full(core::debug, len([2]));\n     }\n }"}, {"sha": "68a7d6877d125d0d4ebfd37bd551b248e61f63b6", "filename": "src/test/run-pass/import.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fimport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fimport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -1,5 +1,5 @@\n mod foo {\n-    fn x(y: int) { log y; }\n+    fn x(y: int) { log_full(core::debug, y); }\n }\n \n mod bar {"}, {"sha": "660f4f631476fab7f0cb11a363a6cd0f99f27e25", "filename": "src/test/run-pass/import2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fimport2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fimport2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport2.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -2,7 +2,7 @@\n import zed::bar;\n \n mod zed {\n-    fn bar() { log \"bar\"; }\n+    fn bar() { #debug(\"bar\"); }\n }\n \n fn main() { bar(); }"}, {"sha": "e4cddbe082f19576c960c59c27dcf3847abe3634", "filename": "src/test/run-pass/import3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fimport3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fimport3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport3.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -4,7 +4,7 @@ import zed::bar;\n \n mod baz {\n     mod zed {\n-        fn bar() { log \"bar2\"; }\n+        fn bar() { #debug(\"bar2\"); }\n     }\n }\n "}, {"sha": "42a0bc0fb73cf2c4a4dc3531e208c00f460e4831", "filename": "src/test/run-pass/import4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fimport4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fimport4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport4.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -2,7 +2,7 @@\n import zed::bar;\n \n mod zed {\n-    fn bar() { log \"bar\"; }\n+    fn bar() { #debug(\"bar\"); }\n }\n \n fn main(args: [str]) { let zed = 42; bar(); }"}, {"sha": "f1b0c5daac921c1bb9bf3e0e0d3f9ec6b9fbd90d", "filename": "src/test/run-pass/import5.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fimport5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fimport5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport5.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -3,7 +3,7 @@ mod foo {\n     import zed::bar;\n     export bar;\n     mod zed {\n-        fn bar() { log \"foo\"; }\n+        fn bar() { #debug(\"foo\"); }\n     }\n }\n "}, {"sha": "232f83b54977572004ff39253d0b99dfbb3d1158", "filename": "src/test/run-pass/import6.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fimport6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fimport6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport6.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -2,7 +2,7 @@ import bar::baz;\n import foo::zed;\n mod foo {\n     mod zed {\n-        fn baz() { log \"baz\"; }\n+        fn baz() { #debug(\"baz\"); }\n     }\n }\n mod bar {"}, {"sha": "3bc5daaa63d688fd2a433181c1e68a8108b03004", "filename": "src/test/run-pass/import7.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fimport7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fimport7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport7.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -2,7 +2,7 @@ import bar::baz;\n import foo::zed;\n mod foo {\n     mod zed {\n-        fn baz() { log \"baz\"; }\n+        fn baz() { #debug(\"baz\"); }\n     }\n }\n mod bar {"}, {"sha": "fdaca253e54527fd953f6588bc897978977d15d5", "filename": "src/test/run-pass/import8.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fimport8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fimport8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport8.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -3,7 +3,7 @@ import foo::x;\n import z = foo::x;\n \n mod foo {\n-    fn x(y: int) { log y; }\n+    fn x(y: int) { log_full(core::debug, y); }\n }\n \n fn main() { x(10); z(10); }"}, {"sha": "c6a843cde09113c7ac53fe5529c8d7192fb25473", "filename": "src/test/run-pass/inner-module.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Finner-module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Finner-module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finner-module.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -4,7 +4,7 @@\n // -*- rust -*-\n mod inner {\n     mod inner2 {\n-        fn hello() { log \"hello, modular world\"; }\n+        fn hello() { #debug(\"hello, modular world\"); }\n     }\n     fn hello() { inner2::hello(); }\n }"}, {"sha": "81bad1e91d117032059aeebb2244528875dde2cd", "filename": "src/test/run-pass/integral-indexing.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fintegral-indexing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fintegral-indexing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintegral-indexing.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -10,11 +10,11 @@ fn main() {\n     assert (v[3i8] == 3);\n     assert (v[3u32] == 3);\n     assert (v[3i32] == 3);\n-    log v[3u8];\n+    log_full(core::debug, v[3u8]);\n     assert (s[3u] == 'd' as u8);\n     assert (s[3u8] == 'd' as u8);\n     assert (s[3i8] == 'd' as u8);\n     assert (s[3u32] == 'd' as u8);\n     assert (s[3i32] == 'd' as u8);\n-    log s[3u8];\n+    log_full(core::debug, s[3u8]);\n }"}, {"sha": "e30e9cf7ecd0fcc6423e57f65b14e4342c4638b3", "filename": "src/test/run-pass/issue-507.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fissue-507.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fissue-507.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-507.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -29,7 +29,7 @@ fn main() {\n \n     let x: int = recv(p);\n \n-    log x;\n+    log_full(core::debug, x);\n \n     assert (x == 42);\n "}, {"sha": "29c5bfecf27b06c4cc3c4f4e06d2a421d403158f", "filename": "src/test/run-pass/issue-687.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fissue-687.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fissue-687.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-687.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -20,18 +20,21 @@ fn packager(&&args: (chan<chan<[u8]>>, chan<msg>)) {\n     let p: port<[u8]> = port();\n     send(cb, chan(p));\n     while true {\n-        log \"waiting for bytes\";\n+        #debug(\"waiting for bytes\");\n         let data = recv(p);\n-        log \"got bytes\";\n-        if vec::len(data) == 0u { log \"got empty bytes, quitting\"; break; }\n-        log \"sending non-empty buffer of length\";\n-        log vec::len(data);\n+        #debug(\"got bytes\");\n+        if vec::len(data) == 0u {\n+            #debug(\"got empty bytes, quitting\");\n+            break;\n+        }\n+        #debug(\"sending non-empty buffer of length\");\n+        log_full(core::debug, vec::len(data));\n         send(msg, received(data));\n-        log \"sent non-empty buffer\";\n+        #debug(\"sent non-empty buffer\");\n     }\n-    log \"sending closed message\";\n+    #debug(\"sending closed message\");\n     send(msg, closed);\n-    log \"sent closed message\";\n+    #debug(\"sent closed message\");\n }\n \n fn main() {\n@@ -45,10 +48,10 @@ fn main() {\n     while true {\n         let msg = recv(p);\n         alt msg {\n-          closed. { log \"Got close message\"; break; }\n+          closed. { #debug(\"Got close message\"); break; }\n           received(data) {\n-            log \"Got data. Length is:\";\n-            log vec::len::<u8>(data);\n+            #debug(\"Got data. Length is:\");\n+            log_full(core::debug, vec::len::<u8>(data));\n           }\n         }\n     }"}, {"sha": "a03e7eaece8ef1428d6581f61e372aaccda14bc5", "filename": "src/test/run-pass/issue-898.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fissue-898.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fissue-898.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-898.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -3,7 +3,7 @@ fn even(&&e: int) -> bool {\n }\n \n fn log_if<T>(c: fn(T)->bool, e: T) {\n-    if c(e) { log e; }\n+    if c(e) { log_full(core::debug, e); }\n }\n \n fn main() {"}, {"sha": "56206422c2eddc1938554fcbb55202a7d6230e63", "filename": "src/test/run-pass/istr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fistr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fistr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fistr.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -1,6 +1,6 @@\n fn test_stack_assign() {\n     let s: str = \"a\";\n-    log s;\n+    log_full(core::debug, s);\n     let t: str = \"a\";\n     assert (s == t);\n     let u: str = \"b\";\n@@ -17,7 +17,7 @@ fn test_heap_assign() {\n     assert (s != u);\n }\n \n-fn test_heap_log() { let s = \"a big ol' string\"; log s; }\n+fn test_heap_log() { let s = \"a big ol' string\"; log_full(core::debug, s); }\n \n fn test_stack_add() {\n     assert (\"a\" + \"b\" == \"ab\");\n@@ -39,7 +39,7 @@ fn test_append() {\n \n     let s = \"a\";\n     s += \"b\";\n-    log s;\n+    log_full(core::debug, s);\n     assert (s == \"ab\");\n \n     let s = \"c\";"}, {"sha": "d549b247933e6621f7fcc5ca3aa02b0e06b3e034", "filename": "src/test/run-pass/iter-range.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fiter-range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fiter-range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fiter-range.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -9,5 +9,5 @@ fn range(a: int, b: int, it: block(int)) {\n fn main() {\n     let sum: int = 0;\n     range(0, 100) {|x| sum += x; }\n-    log sum;\n+    log_full(core::debug, sum);\n }"}, {"sha": "7652eb3e1d731dbc2ecf9980980346ecbfd5a4fb", "filename": "src/test/run-pass/join.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fjoin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fjoin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fjoin.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -6,10 +6,10 @@ import task::*;\n \n fn main() {\n     let other = spawn_joinable((), child);\n-    log_err \"1\";\n+    #error(\"1\");\n     yield();\n     join(other);\n-    log_err \"3\";\n+    #error(\"3\");\n }\n \n-fn child(&&_i: ()) { log_err \"2\"; }\n+fn child(&&_i: ()) { #error(\"2\"); }"}, {"sha": "3ccf97aba52d03abe8c4f293f764d8013223bd96", "filename": "src/test/run-pass/lambda-infer-unresolved.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Flambda-infer-unresolved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Flambda-infer-unresolved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flambda-infer-unresolved.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -2,6 +2,6 @@\n // resolved when we finish typechecking the lambda.\n fn main() {\n     let e = @{mutable refs: [], n: 0};\n-    let f = lambda () { log_err e.n; };\n+    let f = lambda () { log_full(core::error, e.n); };\n     e.refs += [1];\n }"}, {"sha": "17d0eda392b897bb7df55959fc7f414769dffcf0", "filename": "src/test/run-pass/lambda-no-leak.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Flambda-no-leak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Flambda-no-leak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flambda-no-leak.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -2,6 +2,6 @@\n fn force(f: fn@()) { f() }\n fn main() {\n     let x = 7;\n-    lambda () { log_err x; };\n-    force(lambda () { log_err x; });\n+    lambda () { log_full(core::error, x); };\n+    force(lambda () { log_full(core::error, x); });\n }"}, {"sha": "9aef748ce09496f601942af234b5f8ee59d2c0fa", "filename": "src/test/run-pass/lazy-and-or.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Flazy-and-or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Flazy-and-or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flazy-and-or.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -6,7 +6,7 @@ fn main() {\n     let x = 1 == 2 || 3 == 3;\n     assert (x);\n     let y: int = 10;\n-    log x || incr(y);\n+    log_full(core::debug, x || incr(y));\n     assert (y == 10);\n     if true && x { assert (true); } else { assert (false); }\n }"}, {"sha": "fb0a9979c64eab3df9caf2df5a13296cacb469dd", "filename": "src/test/run-pass/lazy-init.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Flazy-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Flazy-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flazy-init.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -1,5 +1,5 @@\n \n \n-fn foo(x: int) { log x; }\n+fn foo(x: int) { log_full(core::debug, x); }\n \n fn main() { let x: int; if 1 > 2 { x = 12; } else { x = 10; } foo(x); }"}, {"sha": "5bf47adcf06ce85c5ab68883b87fea5c26d6c3e7", "filename": "src/test/run-pass/lazychan.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Flazychan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Flazychan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flazychan.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -10,14 +10,14 @@ fn main() {\n \n     task::spawn(chan(p), child);\n     y = recv(p);\n-    log \"received 1\";\n-    log y;\n+    #debug(\"received 1\");\n+    log_full(core::debug, y);\n     assert (y == 10);\n \n     task::spawn(chan(p), child);\n     y = recv(p);\n-    log \"received 2\";\n-    log y;\n+    #debug(\"received 2\");\n+    log_full(core::debug, y);\n     assert (y == 10);\n }\n "}, {"sha": "de87837a31aace531fd5f37442927d32a31979e0", "filename": "src/test/run-pass/linear-for-loop.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Flinear-for-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Flinear-for-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flinear-for-loop.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -3,8 +3,8 @@\n fn main() {\n     let x = [1, 2, 3];\n     let y = 0;\n-    for i: int in x { log i; y += i; }\n-    log y;\n+    for i: int in x { log_full(core::debug, i); y += i; }\n+    log_full(core::debug, y);\n     assert (y == 6);\n     let s = \"hello there\";\n     let i: int = 0;\n@@ -17,8 +17,8 @@ fn main() {\n         // ...\n \n         i += 1;\n-        log i;\n-        log c;\n+        log_full(core::debug, i);\n+        log_full(core::debug, c);\n     }\n     assert (i == 11);\n }"}, {"sha": "305f84d766c416baff5a5e2fb714f52a1ec9e45a", "filename": "src/test/run-pass/log-err-phi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Flog-err-phi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Flog-err-phi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flog-err-phi.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -1,3 +1,3 @@\n \n \n-fn main() { if false { log_err \"foo\" + \"bar\"; } }\n+fn main() { if false { log_full(core::error, \"foo\" + \"bar\"); } }"}, {"sha": "88603bd1f7b7f11bf09c8f4f392afa90f04e4bb2", "filename": "src/test/run-pass/log-linearized.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Flog-linearized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Flog-linearized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flog-linearized.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -14,7 +14,7 @@ fn mk<T>() -> smallintmap<T> {\n \n fn f<T,U>() {\n     let sim = mk::<U>();\n-    log_err sim;\n+    log_full(core::error, sim);\n }\n \n fn main() {"}, {"sha": "c4d74b651710220ae5424d2319b41a048c221513", "filename": "src/test/run-pass/main-ivec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fmain-ivec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fmain-ivec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmain-ivec.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -1 +1 @@\n-fn main(args: [str]) { for s in args { log s; } }\n+fn main(args: [str]) { for s in args { log_full(core::debug, s); } }"}, {"sha": "feb95f7e363bb2a6768868d72305475dbd94cd96", "filename": "src/test/run-pass/many.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fmany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fmany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmany.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -20,7 +20,7 @@ fn main() {\n     let p = comm::port();\n     let child = task::spawn((comm::chan(p), 200), sub);\n     let y = comm::recv(p);\n-    log \"transmission complete\";\n-    log y;\n+    #debug(\"transmission complete\");\n+    log_full(core::debug, y);\n     assert (y == 200);\n }"}, {"sha": "05ebb5ac50f2e697b6456c7a4aabc18cc7e3ba9e", "filename": "src/test/run-pass/maybe-mutable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fmaybe-mutable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fmaybe-mutable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmaybe-mutable.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -10,7 +10,7 @@ fn len(v: [const int]) -> uint {\n \n fn main() {\n     let v0 = [1, 2, 3, 4, 5];\n-    log len(v0);\n+    log_full(core::debug, len(v0));\n     let v1 = [mutable 1, 2, 3, 4, 5];\n-    log len(v1);\n+    log_full(core::debug, len(v1));\n }"}, {"sha": "f851522bf52b287ce2e946cf6d097098ce6d79c9", "filename": "src/test/run-pass/multi-src/bar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fmulti-src%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fmulti-src%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmulti-src%2Fbar.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -1,3 +1,3 @@\n \n \n-fn other() { log \"yes\"; }\n+fn other() { #debug(\"yes\"); }"}, {"sha": "9f12fd12c6ec14fb9fc60b2740c96da78c9bdd6e", "filename": "src/test/run-pass/multi-src/foo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fmulti-src%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fmulti-src%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmulti-src%2Ffoo.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -1,3 +1,3 @@\n \n \n-fn main() { log \"hello, multi-file world.\"; bar::other(); }\n+fn main() { #debug(\"hello, multi-file world.\"); bar::other(); }"}, {"sha": "596103af7fc46378a3c6b6391e076ef41c8a925e", "filename": "src/test/run-pass/mutable-alias-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fmutable-alias-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fmutable-alias-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmutable-alias-vec.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -11,6 +11,6 @@ fn main() {\n     grow(v);\n     grow(v);\n     let len = vec::len::<int>(v);\n-    log len;\n+    log_full(core::debug, len);\n     assert (len == 3 as uint);\n }"}, {"sha": "c07b4ab97a6dde9055347e1331c3e160ea314b13", "filename": "src/test/run-pass/nested-alts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fnested-alts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fnested-alts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnested-alts.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -6,9 +6,9 @@ fn foo() {\n       some::<int>(x) {\n         let bar;\n         alt none::<int> { none::<int>. { bar = 5; } _ { baz(); } }\n-        log bar;\n+        log_full(core::debug, bar);\n       }\n-      none::<int>. { log \"hello\"; }\n+      none::<int>. { #debug(\"hello\"); }\n     }\n }\n "}, {"sha": "c0d0528674be5fa58f934ac2b46817e6d910d8db", "filename": "src/test/run-pass/nested-pattern.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fnested-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fnested-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnested-pattern.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -10,8 +10,8 @@ tag t { foo(int, uint); bar(int, option::t<int>); }\n \n fn nested(o: t) {\n     alt o {\n-      bar(i, some::<int>(_)) { log_err \"wrong pattern matched\"; fail; }\n-      _ { log_err \"succeeded\"; }\n+      bar(i, some::<int>(_)) { #error(\"wrong pattern matched\"); fail; }\n+      _ { #error(\"succeeded\"); }\n     }\n }\n "}, {"sha": "c37a03ed8385ae26b69cd0cc8a2ab9890d19b4be", "filename": "src/test/run-pass/obj-recursion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fobj-recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fobj-recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobj-recursion.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -6,7 +6,7 @@ type adder =\n     };\n \n obj leaf_adder(x: int) {\n-    fn add() { log \"leaf\"; log x; }\n+    fn add() { #debug(\"leaf\"); log_full(core::debug, x); }\n }\n \n obj delegate_adder(a: adder) {"}, {"sha": "cf321594586d35c47b665a6ca250ed86dda1bce8", "filename": "src/test/run-pass/obj-self-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fobj-self-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fobj-self-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobj-self-2.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -2,7 +2,7 @@\n \n fn main() {\n     obj foo() {\n-        fn m1(i: int) { let i = i + 1; log \"hi!\"; }\n+        fn m1(i: int) { let i = i + 1; #debug(\"hi!\"); }\n         fn m2(i: int) { let i = i + 1; self.m1(i); }\n     }\n     let a = foo();"}, {"sha": "588135c9121aebc28982816565e9b05fb457241f", "filename": "src/test/run-pass/obj-self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fobj-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fobj-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobj-self.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -2,7 +2,7 @@\n \n fn main() {\n     obj foo() {\n-        fn m1() { log \"hi!\"; }\n+        fn m1() { #debug(\"hi!\"); }\n         fn m2() { self.m1(); }\n     }\n     let a = foo();"}, {"sha": "1670febe0e49898cbb32530ed44f633a489ec0a9", "filename": "src/test/run-pass/obj-with-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fobj-with-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fobj-with-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobj-with-vec.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -5,6 +5,6 @@ fn main() {\n         fn get(i: int) -> u8 { ret data[i]; }\n     }\n     let b = buf([1 as u8, 2 as u8, 3 as u8]);\n-    log b.get(1);\n+    log_full(core::debug, b.get(1));\n     assert (b.get(1) == 2 as u8);\n }"}, {"sha": "96214d9669fdf4b29c210ea0a6a14a589bb0c614", "filename": "src/test/run-pass/opeq.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fopeq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fopeq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fopeq.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -5,15 +5,15 @@\n fn main() {\n     let x: int = 1;\n     x *= 2;\n-    log x;\n+    log_full(core::debug, x);\n     assert (x == 2);\n     x += 3;\n-    log x;\n+    log_full(core::debug, x);\n     assert (x == 5);\n     x *= x;\n-    log x;\n+    log_full(core::debug, x);\n     assert (x == 25);\n     x /= 5;\n-    log x;\n+    log_full(core::debug, x);\n     assert (x == 5);\n }"}, {"sha": "064d1e47347a4e5db07dd78a16734bc6f8a9d6a2", "filename": "src/test/run-pass/over-constrained-vregs.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fover-constrained-vregs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fover-constrained-vregs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fover-constrained-vregs.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -2,4 +2,11 @@\n \n \n // Regression test for issue #152.\n-fn main() { let b: uint = 1u; while b <= 32u { 0u << b; b <<= 1u; log b; } }\n+fn main() {\n+    let b: uint = 1u;\n+    while b <= 32u {\n+        0u << b;\n+        b <<= 1u;\n+        log_full(core::debug, b);\n+    }\n+}"}, {"sha": "8d68a5e7c4c986985d42ad28c3924803511936ae", "filename": "src/test/run-pass/paren-free.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fparen-free.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fparen-free.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fparen-free.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -1,5 +1,5 @@\n fn main() {\n     let x = true;\n     if x { let i = 10; while i > 0 { i -= 1; } }\n-    alt x { true { log \"right\"; } false { log \"wrong\"; } }\n+    alt x { true { #debug(\"right\"); } false { #debug(\"wrong\"); } }\n }"}, {"sha": "b9bcc80e486f862b1efde1d514dd2911241a6f98", "filename": "src/test/run-pass/parse-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fparse-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fparse-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fparse-fail.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -2,6 +2,6 @@\n \n \n // -*- rust -*-\n-fn dont_call_me() { fail; log 1; }\n+fn dont_call_me() { fail; log_full(core::debug, 1); }\n \n fn main() { }"}, {"sha": "b9eecbed2f100809643bd60b246bd00e7cd1f581", "filename": "src/test/run-pass/pass-by-copy.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fpass-by-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fpass-by-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpass-by-copy.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -1,5 +1,5 @@\n-fn magic(+x: {a: @int}) { log x; }\n-fn magic2(+x: @int) { log x; }\n+fn magic(+x: {a: @int}) { log_full(core::debug, x); }\n+fn magic2(+x: @int) { log_full(core::debug, x); }\n \n fn main() {\n     let a = {a: @10}, b = @10;"}, {"sha": "5511225086d2a6033b6fc45e576ed40b54932f32", "filename": "src/test/run-pass/preempt.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fpreempt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fpreempt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpreempt.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -2,21 +2,21 @@\n // This checks that preemption works.\n \n fn starve_main(alive: chan<int>) {\n-    log \"signalling main\";\n+    #debug(\"signalling main\");\n     alive <| 1;\n-    log \"starving main\";\n+    #debug(\"starving main\");\n     let i: int = 0;\n     while true { i += 1; }\n }\n \n fn main() {\n     let alive: port<int> = port();\n-    log \"main started\";\n+    #debug(\"main started\");\n     let s: task = spawn starve_main(chan(alive));\n     let i: int;\n-    log \"main waiting for alive signal\";\n+    #debug(\"main waiting for alive signal\");\n     alive |> i;\n-    log \"main got alive signal\";\n-    while i < 50 { log \"main iterated\"; i += 1; }\n-    log \"main completed\";\n+    #debug(\"main got alive signal\");\n+    while i < 50 { #debug(\"main iterated\"); i += 1; }\n+    #debug(\"main completed\");\n }"}, {"sha": "73ada106f430990f3a093a34fd53623ca5f3aa9c", "filename": "src/test/run-pass/rec-auto.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Frec-auto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Frec-auto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frec-auto.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -4,4 +4,8 @@\n // -*- rust -*-\n \n // Issue #50.\n-fn main() { let x = {foo: \"hello\", bar: \"world\"}; log x.foo; log x.bar; }\n+fn main() {\n+    let x = {foo: \"hello\", bar: \"world\"};\n+    log_full(core::debug, x.foo);\n+    log_full(core::debug, x.bar);\n+}"}, {"sha": "56f70a64576a065e25039a0e4497baf8f3b01719", "filename": "src/test/run-pass/reference-branch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Freference-branch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Freference-branch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freference-branch.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -5,5 +5,5 @@ fn main() {\n     let x = [];\n     let &y = x;\n     if true { x = [1]; }\n-    else { log_err y; }\n+    else { log_full(core::error, y); }\n }"}, {"sha": "9348dcd50c2c9f51392b9c42ee4708af3af27075", "filename": "src/test/run-pass/resource-assign-is-not-copy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fresource-assign-is-not-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fresource-assign-is-not-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-assign-is-not-copy.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -7,7 +7,7 @@ fn main() {\n         let a = r(i);\n         let b = (a, 10);\n         let (c, _d) = b;\n-        log c;\n+        log_full(core::debug, c);\n     }\n     assert *i == 1;\n }"}, {"sha": "e3609bf1d761e97e1a984b784038d490c602f5b9", "filename": "src/test/run-pass/ret-bang.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fret-bang.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fret-bang.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fret-bang.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -2,7 +2,7 @@\n \n \n // -*- rust -*-\n-fn my_err(s: str) -> ! { log_err s; fail; }\n+fn my_err(s: str) -> ! { log_full(core::error, s); fail; }\n \n fn okay(i: uint) -> int {\n     if i == 3u { my_err(\"I don't like three\"); } else { ret 42; }"}, {"sha": "5a6255038f6b42737e404183c9c47c84cdbd5ca6", "filename": "src/test/run-pass/sendfn-generic-fn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fsendfn-generic-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fsendfn-generic-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsendfn-generic-fn.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -14,12 +14,12 @@ fn make_generic_record<copy A,copy B>(a: A, b: B) -> pair<A,B> {\n \n fn test05_start(&&f: sendfn(&&float, &&str) -> pair<float, str>) {\n     let p = f(22.22f, \"Hi\");\n-    log p;\n+    log_full(core::debug, p);\n     assert p.a == 22.22f;\n     assert p.b == \"Hi\";\n \n     let q = f(44.44f, \"Ho\");\n-    log q;\n+    log_full(core::debug, q);\n     assert q.a == 44.44f;\n     assert q.b == \"Ho\";\n }"}, {"sha": "2edc604deb871214434dc761cf61e51892c8f0eb", "filename": "src/test/run-pass/sendfn-spawn-with-fn-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fsendfn-spawn-with-fn-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fsendfn-spawn-with-fn-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsendfn-spawn-with-fn-arg.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -13,7 +13,7 @@ fn test05_start(&&f: sendfn(int)) {\n fn test05() {\n     let three = ~3;\n     let fn_to_send = sendfn(n: int) {\n-        log_err *three + n; // will copy x into the closure\n+        log_full(core::error, *three + n); // will copy x into the closure\n         assert(*three == 3);\n     };\n     task::spawn(fn_to_send, test05_start);"}, {"sha": "1a693bc3b1a7a513f32c1f4cf1b3eb53fe3a41ae", "filename": "src/test/run-pass/shadow.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fshadow.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -5,7 +5,13 @@ fn foo(c: [int]) {\n \n \n     alt none::<int> {\n-      some::<int>(_) { for i: int in c { log a; let a = 17; b += [a]; } }\n+      some::<int>(_) {\n+        for i: int in c {\n+            log_full(core::debug, a);\n+            let a = 17;\n+            b += [a];\n+        }\n+      }\n       _ { }\n     }\n }"}, {"sha": "9132f65077248e5d67527e308f98d15052328dfe", "filename": "src/test/run-pass/shape_intrinsic_tag_then_rec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fshape_intrinsic_tag_then_rec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fshape_intrinsic_tag_then_rec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fshape_intrinsic_tag_then_rec.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -26,6 +26,6 @@ fn main() {\n     let p_: path_ = { global: true, idents: [\"hi\"], types: [t] };\n     let p: path = { data: p_, span: sp };\n     let x = { sp: sp, path: p };\n-    log_err x.path;\n-    log_err x;\n+    log_full(core::error, x.path);\n+    log_full(core::error, x);\n }"}, {"sha": "3b0776fcd55f591f761938d10c1a2d7c2f9660ad", "filename": "src/test/run-pass/simple-alt-generic-tag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fsimple-alt-generic-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fsimple-alt-generic-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsimple-alt-generic-tag.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -4,5 +4,5 @@ tag opt<T> { none; }\n \n fn main() {\n     let x = none::<int>;\n-    alt x { none::<int>. { log \"hello world\"; } }\n+    alt x { none::<int>. { #debug(\"hello world\"); } }\n }"}, {"sha": "887df2ef3f39787d4eccdc0f7fd3b7c9d3bda457", "filename": "src/test/run-pass/simple-infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fsimple-infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fsimple-infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsimple-infer.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -1,3 +1,3 @@\n \n \n-fn main() { let n; n = 1; log n; }\n+fn main() { let n; n = 1; log_full(core::debug, n); }"}, {"sha": "fe85e2852ba2c4f42b1498b843fe2a9fc81ab9ae", "filename": "src/test/run-pass/simple-obj.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fsimple-obj.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fsimple-obj.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsimple-obj.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -3,7 +3,7 @@\n \n // -*- rust -*-\n obj x() {\n-    fn hello() { log \"hello, object world\"; }\n+    fn hello() { #debug(\"hello, object world\"); }\n }\n \n fn main() { let mx = x(); mx.hello(); }"}, {"sha": "38e473f082ce64057ebc90a8a74191bac985e315", "filename": "src/test/run-pass/size-and-align.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fsize-and-align.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fsize-and-align.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsize-and-align.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -6,8 +6,8 @@ tag clam<T> { a(T, int); b; }\n \n fn uhoh<T>(v: [clam<T>]) {\n     alt v[1] {\n-      a::<T>(t, u) { log \"incorrect\"; log u; fail; }\n-      b::<T>. { log \"correct\"; }\n+      a::<T>(t, u) { #debug(\"incorrect\"); log_full(core::debug, u); fail; }\n+      b::<T>. { #debug(\"correct\"); }\n     }\n }\n "}, {"sha": "38600ba9f7eacc4c763bf60e02e85e8f50752da5", "filename": "src/test/run-pass/spawn-fn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fspawn-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fspawn-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspawn-fn.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -6,13 +6,13 @@ import task;\n \n fn x(&&args: (str, int)) {\n     let (s, n) = args;\n-    log s; log n;\n+    log_full(core::debug, s); log_full(core::debug, n);\n }\n \n fn main() {\n     task::spawn((\"hello from first spawned fn\", 65), x);\n     task::spawn((\"hello from second spawned fn\", 66), x);\n     task::spawn((\"hello from third spawned fn\", 67), x);\n     let i: int = 30;\n-    while i > 0 { i = i - 1; log \"parent sleeping\"; yield(); }\n+    while i > 0 { i = i - 1; #debug(\"parent sleeping\"); yield(); }\n }"}, {"sha": "664f3e33b061dc7643696d555d76881e9abc1c7b", "filename": "src/test/run-pass/spawn-module-qualified.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fspawn-module-qualified.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fspawn-module-qualified.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspawn-module-qualified.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -5,5 +5,5 @@ import task::spawn_joinable;\n fn main() { let x = spawn_joinable(10, m::child); join(x); }\n \n mod m {\n-    fn child(&&i: int) { log i; }\n+    fn child(&&i: int) { log_full(core::debug, i); }\n }"}, {"sha": "431eee700d13a22470f52afa3505842ebf09dcd2", "filename": "src/test/run-pass/spawn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fspawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fspawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspawn.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -6,7 +6,7 @@ import task;\n \n fn main() { let t = task::spawn_joinable(10, child); task::join(t); }\n \n-fn child(&&i: int) { log_err i; assert (i == 10); }\n+fn child(&&i: int) { log_full(core::error, i); assert (i == 10); }\n \n // Local Variables:\n // mode: rust;"}, {"sha": "1ecc5e8b3b9e8d989a03f817013e2245765e3d21", "filename": "src/test/run-pass/spawn2.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fspawn2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fspawn2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspawn2.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -7,15 +7,15 @@ fn main() { spawn((10, 20, 30, 40, 50, 60, 70, 80, 90), child); }\n \n fn child(&&args: (int, int, int, int, int, int, int, int, int)) {\n     let (i1, i2, i3, i4, i5, i6, i7, i8, i9) = args;\n-    log_err i1;\n-    log_err i2;\n-    log_err i3;\n-    log_err i4;\n-    log_err i5;\n-    log_err i6;\n-    log_err i7;\n-    log_err i8;\n-    log_err i9;\n+    log_full(core::error, i1);\n+    log_full(core::error, i2);\n+    log_full(core::error, i3);\n+    log_full(core::error, i4);\n+    log_full(core::error, i5);\n+    log_full(core::error, i6);\n+    log_full(core::error, i7);\n+    log_full(core::error, i8);\n+    log_full(core::error, i9);\n     assert (i1 == 10);\n     assert (i2 == 20);\n     assert (i3 == 30);"}, {"sha": "8176b30f9f2c77feea5ff4ab091795254889b031", "filename": "src/test/run-pass/stateful-obj.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fstateful-obj.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fstateful-obj.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstateful-obj.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -11,9 +11,9 @@ obj counter(mutable x: int) {\n fn main() {\n     let y = counter(0);\n     assert (y.hello() == 12345);\n-    log y.get();\n+    log_full(core::debug, y.get());\n     y.incr();\n     y.incr();\n-    log y.get();\n+    log_full(core::debug, y.get());\n     assert (y.get() == 2);\n }"}, {"sha": "5b6b36ba4d650c83ccde2b2c3f7c35a49f5b8b52", "filename": "src/test/run-pass/str-append.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fstr-append.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fstr-append.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstr-append.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -7,7 +7,7 @@ import str;\n fn test1() {\n     let s: str = \"hello\";\n     s += \"world\";\n-    log s;\n+    log_full(core::debug, s);\n     assert (s[9] == 'd' as u8);\n }\n \n@@ -17,8 +17,8 @@ fn test2() {\n     let ff: str = \"abc\";\n     let a: str = ff + \"ABC\" + ff;\n     let b: str = \"ABC\" + ff + \"ABC\";\n-    log a;\n-    log b;\n+    log_full(core::debug, a);\n+    log_full(core::debug, b);\n     assert (str::eq(a, \"abcABCabc\"));\n     assert (str::eq(b, \"ABCabcABC\"));\n }"}, {"sha": "69ea90b126caf00d6b374028aa9e96c0dfb05a69", "filename": "src/test/run-pass/str-concat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fstr-concat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fstr-concat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstr-concat.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -6,6 +6,6 @@ fn main() {\n     let a: str = \"hello\";\n     let b: str = \"world\";\n     let s: str = a + b;\n-    log s;\n+    log_full(core::debug, s);\n     assert (s[9] == 'd' as u8);\n }"}, {"sha": "5911cb30e1bfba9c7157a934d21b0a6f9f0f2c15", "filename": "src/test/run-pass/str-idx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fstr-idx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fstr-idx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstr-idx.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -3,6 +3,6 @@\n fn main() {\n     let s = \"hello\";\n     let c: u8 = s[4];\n-    log c;\n+    log_full(core::debug, c);\n     assert (c == 0x6f as u8);\n }"}, {"sha": "34d867e30b6f5d1781d341b97c3392cab1a771c4", "filename": "src/test/run-pass/string-self-append.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fstring-self-append.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fstring-self-append.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstring-self-append.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -7,7 +7,7 @@ fn main() {\n     let i = 20;\n     let expected_len = 1u;\n     while i > 0 {\n-        log_err str::byte_len(a);\n+        log_full(core::error, str::byte_len(a));\n         assert (str::byte_len(a) == expected_len);\n         a += a;\n         i -= 1;"}, {"sha": "9612a7749cbe53c1c8532e45ca6ee80b01f76324", "filename": "src/test/run-pass/supported-cast.rs", "status": "modified", "additions": 247, "deletions": 247, "changes": 494, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fsupported-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fsupported-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsupported-cast.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -3,251 +3,251 @@ import std::os;\n \n fn main() {\n   let f = 1 as os::libc::FILE;\n-  log f as int;\n-  log f as uint;\n-  log f as i8;\n-  log f as i16;\n-  log f as i32;\n-  log f as i64;\n-  log f as u8;\n-  log f as u16;\n-  log f as u32;\n-  log f as u64;\n-\n-  log 1 as int;\n-  log 1 as uint;\n-  log 1 as float;\n-  log 1 as bool;\n-  log 1 as os::libc::FILE;\n-  log 1 as i8;\n-  log 1 as i16;\n-  log 1 as i32;\n-  log 1 as i64;\n-  log 1 as u8;\n-  log 1 as u16;\n-  log 1 as u32;\n-  log 1 as u64;\n-  log 1 as f32;\n-  log 1 as f64;\n-\n-  log 1u as int;\n-  log 1u as uint;\n-  log 1u as float;\n-  log 1u as bool;\n-  log 1u as os::libc::FILE;\n-  log 1u as i8;\n-  log 1u as i16;\n-  log 1u as i32;\n-  log 1u as i64;\n-  log 1u as u8;\n-  log 1u as u16;\n-  log 1u as u32;\n-  log 1u as u64;\n-  log 1u as f32;\n-  log 1u as f64;\n-\n-  log 1i8 as int;\n-  log 1i8 as uint;\n-  log 1i8 as float;\n-  log 1i8 as bool;\n-  log 1i8 as os::libc::FILE;\n-  log 1i8 as i8;\n-  log 1i8 as i16;\n-  log 1i8 as i32;\n-  log 1i8 as i64;\n-  log 1i8 as u8;\n-  log 1i8 as u16;\n-  log 1i8 as u32;\n-  log 1i8 as u64;\n-  log 1i8 as f32;\n-  log 1i8 as f64;\n-\n-  log 1u8 as int;\n-  log 1u8 as uint;\n-  log 1u8 as float;\n-  log 1u8 as bool;\n-  log 1u8 as os::libc::FILE;\n-  log 1u8 as i8;\n-  log 1u8 as i16;\n-  log 1u8 as i32;\n-  log 1u8 as i64;\n-  log 1u8 as u8;\n-  log 1u8 as u16;\n-  log 1u8 as u32;\n-  log 1u8 as u64;\n-  log 1u8 as f32;\n-  log 1u8 as f64;\n-\n-  log 1i16 as int;\n-  log 1i16 as uint;\n-  log 1i16 as float;\n-  log 1i16 as bool;\n-  log 1i16 as os::libc::FILE;\n-  log 1i16 as i8;\n-  log 1i16 as i16;\n-  log 1i16 as i32;\n-  log 1i16 as i64;\n-  log 1i16 as u8;\n-  log 1i16 as u16;\n-  log 1i16 as u32;\n-  log 1i16 as u64;\n-  log 1i16 as f32;\n-  log 1i16 as f64;\n-\n-  log 1u16 as int;\n-  log 1u16 as uint;\n-  log 1u16 as float;\n-  log 1u16 as bool;\n-  log 1u16 as os::libc::FILE;\n-  log 1u16 as i8;\n-  log 1u16 as i16;\n-  log 1u16 as i32;\n-  log 1u16 as i64;\n-  log 1u16 as u8;\n-  log 1u16 as u16;\n-  log 1u16 as u32;\n-  log 1u16 as u64;\n-  log 1u16 as f32;\n-  log 1u16 as f64;\n-\n-  log 1i32 as int;\n-  log 1i32 as uint;\n-  log 1i32 as float;\n-  log 1i32 as bool;\n-  log 1i32 as os::libc::FILE;\n-  log 1i32 as i8;\n-  log 1i32 as i16;\n-  log 1i32 as i32;\n-  log 1i32 as i64;\n-  log 1i32 as u8;\n-  log 1i32 as u16;\n-  log 1i32 as u32;\n-  log 1i32 as u64;\n-  log 1i32 as f32;\n-  log 1i32 as f64;\n-\n-  log 1u32 as int;\n-  log 1u32 as uint;\n-  log 1u32 as float;\n-  log 1u32 as bool;\n-  log 1u32 as os::libc::FILE;\n-  log 1u32 as i8;\n-  log 1u32 as i16;\n-  log 1u32 as i32;\n-  log 1u32 as i64;\n-  log 1u32 as u8;\n-  log 1u32 as u16;\n-  log 1u32 as u32;\n-  log 1u32 as u64;\n-  log 1u32 as f32;\n-  log 1u32 as f64;\n-\n-  log 1i64 as int;\n-  log 1i64 as uint;\n-  log 1i64 as float;\n-  log 1i64 as bool;\n-  log 1i64 as os::libc::FILE;\n-  log 1i64 as i8;\n-  log 1i64 as i16;\n-  log 1i64 as i32;\n-  log 1i64 as i64;\n-  log 1i64 as u8;\n-  log 1i64 as u16;\n-  log 1i64 as u32;\n-  log 1i64 as u64;\n-  log 1i64 as f32;\n-  log 1i64 as f64;\n-\n-  log 1u64 as int;\n-  log 1u64 as uint;\n-  log 1u64 as float;\n-  log 1u64 as bool;\n-  log 1u64 as os::libc::FILE;\n-  log 1u64 as i8;\n-  log 1u64 as i16;\n-  log 1u64 as i32;\n-  log 1u64 as i64;\n-  log 1u64 as u8;\n-  log 1u64 as u16;\n-  log 1u64 as u32;\n-  log 1u64 as u64;\n-  log 1u64 as f32;\n-  log 1u64 as f64;\n-\n-  log 1u64 as int;\n-  log 1u64 as uint;\n-  log 1u64 as float;\n-  log 1u64 as bool;\n-  log 1u64 as os::libc::FILE;\n-  log 1u64 as i8;\n-  log 1u64 as i16;\n-  log 1u64 as i32;\n-  log 1u64 as i64;\n-  log 1u64 as u8;\n-  log 1u64 as u16;\n-  log 1u64 as u32;\n-  log 1u64 as u64;\n-  log 1u64 as f32;\n-  log 1u64 as f64;\n-\n-  log true as int;\n-  log true as uint;\n-  log true as float;\n-  log true as bool;\n-  log true as os::libc::FILE;\n-  log true as i8;\n-  log true as i16;\n-  log true as i32;\n-  log true as i64;\n-  log true as u8;\n-  log true as u16;\n-  log true as u32;\n-  log true as u64;\n-  log true as f32;\n-  log true as f64;\n-\n-  log 1. as int;\n-  log 1. as uint;\n-  log 1. as float;\n-  log 1. as bool;\n-  log 1. as i8;\n-  log 1. as i16;\n-  log 1. as i32;\n-  log 1. as i64;\n-  log 1. as u8;\n-  log 1. as u16;\n-  log 1. as u32;\n-  log 1. as u64;\n-  log 1. as f32;\n-  log 1. as f64;\n-\n-  log 1f32 as int;\n-  log 1f32 as uint;\n-  log 1f32 as float;\n-  log 1f32 as bool;\n-  log 1f32 as i8;\n-  log 1f32 as i16;\n-  log 1f32 as i32;\n-  log 1f32 as i64;\n-  log 1f32 as u8;\n-  log 1f32 as u16;\n-  log 1f32 as u32;\n-  log 1f32 as u64;\n-  log 1f32 as f32;\n-  log 1f32 as f64;\n-\n-  log 1f64 as int;\n-  log 1f64 as uint;\n-  log 1f64 as float;\n-  log 1f64 as bool;\n-  log 1f64 as i8;\n-  log 1f64 as i16;\n-  log 1f64 as i32;\n-  log 1f64 as i64;\n-  log 1f64 as u8;\n-  log 1f64 as u16;\n-  log 1f64 as u32;\n-  log 1f64 as u64;\n-  log 1f64 as f32;\n-  log 1f64 as f64;\n+  log_full(core::debug, f as int);\n+  log_full(core::debug, f as uint);\n+  log_full(core::debug, f as i8);\n+  log_full(core::debug, f as i16);\n+  log_full(core::debug, f as i32);\n+  log_full(core::debug, f as i64);\n+  log_full(core::debug, f as u8);\n+  log_full(core::debug, f as u16);\n+  log_full(core::debug, f as u32);\n+  log_full(core::debug, f as u64);\n+\n+  log_full(core::debug, 1 as int);\n+  log_full(core::debug, 1 as uint);\n+  log_full(core::debug, 1 as float);\n+  log_full(core::debug, 1 as bool);\n+  log_full(core::debug, 1 as os::libc::FILE);\n+  log_full(core::debug, 1 as i8);\n+  log_full(core::debug, 1 as i16);\n+  log_full(core::debug, 1 as i32);\n+  log_full(core::debug, 1 as i64);\n+  log_full(core::debug, 1 as u8);\n+  log_full(core::debug, 1 as u16);\n+  log_full(core::debug, 1 as u32);\n+  log_full(core::debug, 1 as u64);\n+  log_full(core::debug, 1 as f32);\n+  log_full(core::debug, 1 as f64);\n+\n+  log_full(core::debug, 1u as int);\n+  log_full(core::debug, 1u as uint);\n+  log_full(core::debug, 1u as float);\n+  log_full(core::debug, 1u as bool);\n+  log_full(core::debug, 1u as os::libc::FILE);\n+  log_full(core::debug, 1u as i8);\n+  log_full(core::debug, 1u as i16);\n+  log_full(core::debug, 1u as i32);\n+  log_full(core::debug, 1u as i64);\n+  log_full(core::debug, 1u as u8);\n+  log_full(core::debug, 1u as u16);\n+  log_full(core::debug, 1u as u32);\n+  log_full(core::debug, 1u as u64);\n+  log_full(core::debug, 1u as f32);\n+  log_full(core::debug, 1u as f64);\n+\n+  log_full(core::debug, 1i8 as int);\n+  log_full(core::debug, 1i8 as uint);\n+  log_full(core::debug, 1i8 as float);\n+  log_full(core::debug, 1i8 as bool);\n+  log_full(core::debug, 1i8 as os::libc::FILE);\n+  log_full(core::debug, 1i8 as i8);\n+  log_full(core::debug, 1i8 as i16);\n+  log_full(core::debug, 1i8 as i32);\n+  log_full(core::debug, 1i8 as i64);\n+  log_full(core::debug, 1i8 as u8);\n+  log_full(core::debug, 1i8 as u16);\n+  log_full(core::debug, 1i8 as u32);\n+  log_full(core::debug, 1i8 as u64);\n+  log_full(core::debug, 1i8 as f32);\n+  log_full(core::debug, 1i8 as f64);\n+\n+  log_full(core::debug, 1u8 as int);\n+  log_full(core::debug, 1u8 as uint);\n+  log_full(core::debug, 1u8 as float);\n+  log_full(core::debug, 1u8 as bool);\n+  log_full(core::debug, 1u8 as os::libc::FILE);\n+  log_full(core::debug, 1u8 as i8);\n+  log_full(core::debug, 1u8 as i16);\n+  log_full(core::debug, 1u8 as i32);\n+  log_full(core::debug, 1u8 as i64);\n+  log_full(core::debug, 1u8 as u8);\n+  log_full(core::debug, 1u8 as u16);\n+  log_full(core::debug, 1u8 as u32);\n+  log_full(core::debug, 1u8 as u64);\n+  log_full(core::debug, 1u8 as f32);\n+  log_full(core::debug, 1u8 as f64);\n+\n+  log_full(core::debug, 1i16 as int);\n+  log_full(core::debug, 1i16 as uint);\n+  log_full(core::debug, 1i16 as float);\n+  log_full(core::debug, 1i16 as bool);\n+  log_full(core::debug, 1i16 as os::libc::FILE);\n+  log_full(core::debug, 1i16 as i8);\n+  log_full(core::debug, 1i16 as i16);\n+  log_full(core::debug, 1i16 as i32);\n+  log_full(core::debug, 1i16 as i64);\n+  log_full(core::debug, 1i16 as u8);\n+  log_full(core::debug, 1i16 as u16);\n+  log_full(core::debug, 1i16 as u32);\n+  log_full(core::debug, 1i16 as u64);\n+  log_full(core::debug, 1i16 as f32);\n+  log_full(core::debug, 1i16 as f64);\n+\n+  log_full(core::debug, 1u16 as int);\n+  log_full(core::debug, 1u16 as uint);\n+  log_full(core::debug, 1u16 as float);\n+  log_full(core::debug, 1u16 as bool);\n+  log_full(core::debug, 1u16 as os::libc::FILE);\n+  log_full(core::debug, 1u16 as i8);\n+  log_full(core::debug, 1u16 as i16);\n+  log_full(core::debug, 1u16 as i32);\n+  log_full(core::debug, 1u16 as i64);\n+  log_full(core::debug, 1u16 as u8);\n+  log_full(core::debug, 1u16 as u16);\n+  log_full(core::debug, 1u16 as u32);\n+  log_full(core::debug, 1u16 as u64);\n+  log_full(core::debug, 1u16 as f32);\n+  log_full(core::debug, 1u16 as f64);\n+\n+  log_full(core::debug, 1i32 as int);\n+  log_full(core::debug, 1i32 as uint);\n+  log_full(core::debug, 1i32 as float);\n+  log_full(core::debug, 1i32 as bool);\n+  log_full(core::debug, 1i32 as os::libc::FILE);\n+  log_full(core::debug, 1i32 as i8);\n+  log_full(core::debug, 1i32 as i16);\n+  log_full(core::debug, 1i32 as i32);\n+  log_full(core::debug, 1i32 as i64);\n+  log_full(core::debug, 1i32 as u8);\n+  log_full(core::debug, 1i32 as u16);\n+  log_full(core::debug, 1i32 as u32);\n+  log_full(core::debug, 1i32 as u64);\n+  log_full(core::debug, 1i32 as f32);\n+  log_full(core::debug, 1i32 as f64);\n+\n+  log_full(core::debug, 1u32 as int);\n+  log_full(core::debug, 1u32 as uint);\n+  log_full(core::debug, 1u32 as float);\n+  log_full(core::debug, 1u32 as bool);\n+  log_full(core::debug, 1u32 as os::libc::FILE);\n+  log_full(core::debug, 1u32 as i8);\n+  log_full(core::debug, 1u32 as i16);\n+  log_full(core::debug, 1u32 as i32);\n+  log_full(core::debug, 1u32 as i64);\n+  log_full(core::debug, 1u32 as u8);\n+  log_full(core::debug, 1u32 as u16);\n+  log_full(core::debug, 1u32 as u32);\n+  log_full(core::debug, 1u32 as u64);\n+  log_full(core::debug, 1u32 as f32);\n+  log_full(core::debug, 1u32 as f64);\n+\n+  log_full(core::debug, 1i64 as int);\n+  log_full(core::debug, 1i64 as uint);\n+  log_full(core::debug, 1i64 as float);\n+  log_full(core::debug, 1i64 as bool);\n+  log_full(core::debug, 1i64 as os::libc::FILE);\n+  log_full(core::debug, 1i64 as i8);\n+  log_full(core::debug, 1i64 as i16);\n+  log_full(core::debug, 1i64 as i32);\n+  log_full(core::debug, 1i64 as i64);\n+  log_full(core::debug, 1i64 as u8);\n+  log_full(core::debug, 1i64 as u16);\n+  log_full(core::debug, 1i64 as u32);\n+  log_full(core::debug, 1i64 as u64);\n+  log_full(core::debug, 1i64 as f32);\n+  log_full(core::debug, 1i64 as f64);\n+\n+  log_full(core::debug, 1u64 as int);\n+  log_full(core::debug, 1u64 as uint);\n+  log_full(core::debug, 1u64 as float);\n+  log_full(core::debug, 1u64 as bool);\n+  log_full(core::debug, 1u64 as os::libc::FILE);\n+  log_full(core::debug, 1u64 as i8);\n+  log_full(core::debug, 1u64 as i16);\n+  log_full(core::debug, 1u64 as i32);\n+  log_full(core::debug, 1u64 as i64);\n+  log_full(core::debug, 1u64 as u8);\n+  log_full(core::debug, 1u64 as u16);\n+  log_full(core::debug, 1u64 as u32);\n+  log_full(core::debug, 1u64 as u64);\n+  log_full(core::debug, 1u64 as f32);\n+  log_full(core::debug, 1u64 as f64);\n+\n+  log_full(core::debug, 1u64 as int);\n+  log_full(core::debug, 1u64 as uint);\n+  log_full(core::debug, 1u64 as float);\n+  log_full(core::debug, 1u64 as bool);\n+  log_full(core::debug, 1u64 as os::libc::FILE);\n+  log_full(core::debug, 1u64 as i8);\n+  log_full(core::debug, 1u64 as i16);\n+  log_full(core::debug, 1u64 as i32);\n+  log_full(core::debug, 1u64 as i64);\n+  log_full(core::debug, 1u64 as u8);\n+  log_full(core::debug, 1u64 as u16);\n+  log_full(core::debug, 1u64 as u32);\n+  log_full(core::debug, 1u64 as u64);\n+  log_full(core::debug, 1u64 as f32);\n+  log_full(core::debug, 1u64 as f64);\n+\n+  log_full(core::debug, true as int);\n+  log_full(core::debug, true as uint);\n+  log_full(core::debug, true as float);\n+  log_full(core::debug, true as bool);\n+  log_full(core::debug, true as os::libc::FILE);\n+  log_full(core::debug, true as i8);\n+  log_full(core::debug, true as i16);\n+  log_full(core::debug, true as i32);\n+  log_full(core::debug, true as i64);\n+  log_full(core::debug, true as u8);\n+  log_full(core::debug, true as u16);\n+  log_full(core::debug, true as u32);\n+  log_full(core::debug, true as u64);\n+  log_full(core::debug, true as f32);\n+  log_full(core::debug, true as f64);\n+\n+  log_full(core::debug, 1. as int);\n+  log_full(core::debug, 1. as uint);\n+  log_full(core::debug, 1. as float);\n+  log_full(core::debug, 1. as bool);\n+  log_full(core::debug, 1. as i8);\n+  log_full(core::debug, 1. as i16);\n+  log_full(core::debug, 1. as i32);\n+  log_full(core::debug, 1. as i64);\n+  log_full(core::debug, 1. as u8);\n+  log_full(core::debug, 1. as u16);\n+  log_full(core::debug, 1. as u32);\n+  log_full(core::debug, 1. as u64);\n+  log_full(core::debug, 1. as f32);\n+  log_full(core::debug, 1. as f64);\n+\n+  log_full(core::debug, 1f32 as int);\n+  log_full(core::debug, 1f32 as uint);\n+  log_full(core::debug, 1f32 as float);\n+  log_full(core::debug, 1f32 as bool);\n+  log_full(core::debug, 1f32 as i8);\n+  log_full(core::debug, 1f32 as i16);\n+  log_full(core::debug, 1f32 as i32);\n+  log_full(core::debug, 1f32 as i64);\n+  log_full(core::debug, 1f32 as u8);\n+  log_full(core::debug, 1f32 as u16);\n+  log_full(core::debug, 1f32 as u32);\n+  log_full(core::debug, 1f32 as u64);\n+  log_full(core::debug, 1f32 as f32);\n+  log_full(core::debug, 1f32 as f64);\n+\n+  log_full(core::debug, 1f64 as int);\n+  log_full(core::debug, 1f64 as uint);\n+  log_full(core::debug, 1f64 as float);\n+  log_full(core::debug, 1f64 as bool);\n+  log_full(core::debug, 1f64 as i8);\n+  log_full(core::debug, 1f64 as i16);\n+  log_full(core::debug, 1f64 as i32);\n+  log_full(core::debug, 1f64 as i64);\n+  log_full(core::debug, 1f64 as u8);\n+  log_full(core::debug, 1f64 as u16);\n+  log_full(core::debug, 1f64 as u32);\n+  log_full(core::debug, 1f64 as u64);\n+  log_full(core::debug, 1f64 as f32);\n+  log_full(core::debug, 1f64 as f64);\n }"}, {"sha": "fdcdfac1ee932e74566bd3682497806cec21745f", "filename": "src/test/run-pass/syntax-extension-fmt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fsyntax-extension-fmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fsyntax-extension-fmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsyntax-extension-fmt.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -2,8 +2,8 @@ use std;\n import str;\n \n fn test(actual: str, expected: str) {\n-    log actual;\n-    log expected;\n+    log_full(core::debug, actual);\n+    log_full(core::debug, expected);\n     assert (str::eq(actual, expected));\n }\n "}, {"sha": "3153f60d2f31e4157c957fe5bd0e6715e8e40e5d", "filename": "src/test/run-pass/syntax-extension-shell.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fsyntax-extension-shell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fsyntax-extension-shell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsyntax-extension-shell.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -1,5 +1,5 @@\n // xfail-test\n fn main() {\n   auto s = #shell { uname -a };\n-  log s;\n+  log_full(core::debug, s);\n }"}, {"sha": "901cc990864703d5f187261924896d65185d51b7", "filename": "src/test/run-pass/tail-cps.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Ftail-cps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Ftail-cps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftail-cps.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -7,13 +7,13 @@ fn checktrue(rs: bool) -> bool { assert (rs); ret true; }\n fn main() { let k = checktrue; evenk(42, k); oddk(45, k); }\n \n fn evenk(n: int, k: fn(bool) -> bool) -> bool {\n-    log \"evenk\";\n-    log n;\n+    #debug(\"evenk\");\n+    log_full(core::debug, n);\n     if n == 0 { be k(true); } else { be oddk(n - 1, k); }\n }\n \n fn oddk(n: int, k: fn(bool) -> bool) -> bool {\n-    log \"oddk\";\n-    log n;\n+    #debug(\"oddk\");\n+    log_full(core::debug, n);\n     if n == 0 { be k(false); } else { be evenk(n - 1, k); }\n }"}, {"sha": "b512da1b204a72daaf6f3a80688cdd37d4d3a731", "filename": "src/test/run-pass/task-comm-0.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Ftask-comm-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Ftask-comm-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-0.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -8,24 +8,24 @@ import task;\n fn main() { test05(); }\n \n fn test05_start(ch : chan<int>) {\n-    log_err ch;\n+    log_full(core::error, ch);\n     send(ch, 10);\n-    log_err \"sent 10\";\n+    #error(\"sent 10\");\n     send(ch, 20);\n-    log_err \"sent 20\";\n+    #error(\"sent 20\");\n     send(ch, 30);\n-    log_err \"sent 30\";\n+    #error(\"sent 30\");\n }\n \n fn test05() {\n     let po = comm::port();\n     let ch = comm::chan(po);\n     task::spawn(ch, test05_start);\n     let value = comm::recv(po);\n-    log_err value;\n+    log_full(core::error, value);\n     value = comm::recv(po);\n-    log_err value;\n+    log_full(core::error, value);\n     value = comm::recv(po);\n-    log_err value;\n+    log_full(core::error, value);\n     assert (value == 30);\n }"}, {"sha": "478eb3292ea40adcf9ace45c20f700e3444f765d", "filename": "src/test/run-pass/task-comm-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Ftask-comm-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Ftask-comm-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-1.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -5,10 +5,10 @@ import task::join;\n \n fn main() { test00(); }\n \n-fn start(&&_i: ()) { log \"Started / Finished task.\"; }\n+fn start(&&_i: ()) { #debug(\"Started / Finished task.\"); }\n \n fn test00() {\n     let t = spawn_joinable((), start);\n     join(t);\n-    log \"Completing.\";\n+    #debug(\"Completing.\");\n }"}, {"sha": "ee4a83385999bb7b32eb7901174bb72e1dd799f4", "filename": "src/test/run-pass/task-comm-10.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Ftask-comm-10.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Ftask-comm-10.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-10.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -10,10 +10,10 @@ fn start(c: comm::chan<comm::chan<str>>) {\n     let b;\n     a = comm::recv(p);\n     assert a == \"A\";\n-    log_err a;\n+    log_full(core::error, a);\n     b = comm::recv(p);\n     assert b == \"B\";\n-    log_err b;\n+    log_full(core::error, b);\n }\n \n fn main() {"}, {"sha": "2f6adfea5dc36444a827be670545e70aa3ef17fe", "filename": "src/test/run-pass/task-comm-12.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Ftask-comm-12.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Ftask-comm-12.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-12.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -3,7 +3,7 @@ import task;\n \n fn main() { test00(); }\n \n-fn start(&&task_number: int) { log \"Started / Finished task.\"; }\n+fn start(&&task_number: int) { #debug(\"Started / Finished task.\"); }\n \n fn test00() {\n     let i: int = 0;\n@@ -15,5 +15,5 @@ fn test00() {\n     // Try joining tasks that have already finished.\n     task::join(t);\n \n-    log \"Joined task.\";\n+    #debug(\"Joined task.\");\n }"}, {"sha": "c2a15229f88778ffc12c10f6f0ca122aec5c956b", "filename": "src/test/run-pass/task-comm-13.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Ftask-comm-13.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Ftask-comm-13.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-13.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -10,9 +10,9 @@ fn start(&&args: (comm::chan<int>, int, int)) {\n }\n \n fn main() {\n-    log \"Check that we don't deadlock.\";\n+    #debug(\"Check that we don't deadlock.\");\n     let p = comm::port::<int>();\n     let a = task::spawn_joinable((comm::chan(p), 0, 10), start);\n     task::join(a);\n-    log \"Joined task\";\n+    #debug(\"Joined task\");\n }"}, {"sha": "0381fabb2d3d4c80f4cacb01b19e5aded6540cf9", "filename": "src/test/run-pass/task-comm-14.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Ftask-comm-14.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Ftask-comm-14.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-14.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -8,7 +8,7 @@ fn main() {\n     // Spawn 10 tasks each sending us back one int.\n     let i = 10;\n     while (i > 0) {\n-        log i;\n+        log_full(core::debug, i);\n         task::spawn((i, comm::chan(po)), child);\n         i = i - 1;\n     }\n@@ -19,16 +19,16 @@ fn main() {\n     i = 10;\n     let value = 0;\n     while (i > 0) {\n-        log i;\n+        log_full(core::debug, i);\n         value = comm::recv(po);\n         i = i - 1;\n     }\n \n-    log \"main thread exiting\";\n+    #debug(\"main thread exiting\");\n }\n \n fn child(&&args: (int, comm::chan<int>)) {\n     let (x, ch) = args;\n-    log x;\n+    log_full(core::debug, x);\n     comm::send(ch, x);\n }"}, {"sha": "6ad262bc3ab79b326eadedf807d5ee2703b0f4ff", "filename": "src/test/run-pass/task-comm-2.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Ftask-comm-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Ftask-comm-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-2.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -3,13 +3,16 @@ use std;\n \n import task;\n \n-fn main() { log \"===== SPAWNING and JOINING THREAD TASKS =====\"; test00(); }\n+fn main() {\n+    #debug(\"===== SPAWNING and JOINING THREAD TASKS =====\");\n+    test00();\n+}\n \n fn start(&&task_number: int) {\n-    log \"Started task.\";\n+    #debug(\"Started task.\");\n     let i: int = 0;\n     while i < 10000 { i = i + 1; }\n-    log \"Finished task.\";\n+    #debug(\"Finished task.\");\n }\n \n fn test00() {\n@@ -24,5 +27,5 @@ fn test00() {\n \n     for t in tasks { task::join(t); }\n \n-    log \"Joined all task.\";\n+    #debug(\"Joined all task.\");\n }"}, {"sha": "78b50e614fd06f554652906ea131c47616c655b5", "filename": "src/test/run-pass/task-comm-3.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -5,25 +5,25 @@ import comm::chan;\n import comm::send;\n import comm::recv;\n \n-fn main() { log \"===== WITHOUT THREADS =====\"; test00(); }\n+fn main() { #debug(\"===== WITHOUT THREADS =====\"); test00(); }\n \n fn test00_start(&&args: (chan<int>, int, int)) {\n     let (ch, message, count) = args;\n-    log \"Starting test00_start\";\n+    #debug(\"Starting test00_start\");\n     let i: int = 0;\n     while i < count {\n-        log \"Sending Message\";\n+        #debug(\"Sending Message\");\n         send(ch, message + 0);\n         i = i + 1;\n     }\n-    log \"Ending test00_start\";\n+    #debug(\"Ending test00_start\");\n }\n \n fn test00() {\n     let number_of_tasks: int = 16;\n     let number_of_messages: int = 4;\n \n-    log \"Creating tasks\";\n+    #debug(\"Creating tasks\");\n \n     let po = comm::port();\n     let ch = chan(po);\n@@ -52,8 +52,8 @@ fn test00() {\n     // Join spawned tasks...\n     for t in tasks { task::join(t); }\n \n-    log \"Completed: Final number is: \";\n-    log_err sum;\n+    #debug(\"Completed: Final number is: \");\n+    log_full(core::error, sum);\n     // assert (sum == (((number_of_tasks * (number_of_tasks - 1)) / 2) *\n     //       number_of_messages));\n     assert (sum == 480);"}, {"sha": "3409c8d4c54f0c2ba54e7de063a95d2f2f25c5c0", "filename": "src/test/run-pass/task-comm-4.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Ftask-comm-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Ftask-comm-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-4.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -15,31 +15,31 @@ fn test00() {\n     send(c, 4);\n     r = comm::recv(p);\n     sum += r;\n-    log r;\n+    log_full(core::debug, r);\n     r = comm::recv(p);\n     sum += r;\n-    log r;\n+    log_full(core::debug, r);\n     r = comm::recv(p);\n     sum += r;\n-    log r;\n+    log_full(core::debug, r);\n     r = comm::recv(p);\n     sum += r;\n-    log r;\n+    log_full(core::debug, r);\n     send(c, 5);\n     send(c, 6);\n     send(c, 7);\n     send(c, 8);\n     r = comm::recv(p);\n     sum += r;\n-    log r;\n+    log_full(core::debug, r);\n     r = comm::recv(p);\n     sum += r;\n-    log r;\n+    log_full(core::debug, r);\n     r = comm::recv(p);\n     sum += r;\n-    log r;\n+    log_full(core::debug, r);\n     r = comm::recv(p);\n     sum += r;\n-    log r;\n+    log_full(core::debug, r);\n     assert (sum == 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8);\n }"}, {"sha": "77d86081c06628d666f90a683dc75b75e28d2afa", "filename": "src/test/run-pass/task-comm-9.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -20,7 +20,11 @@ fn test00() {\n                                   test00_start);\n \n     let i: int = 0;\n-    while i < number_of_messages { sum += comm::recv(p); log r; i += 1; }\n+    while i < number_of_messages {\n+        sum += comm::recv(p);\n+        log_full(core::debug, r);\n+        i += 1;\n+    }\n \n     task::join(t0);\n "}, {"sha": "7fbfe5e29164c38613b5ef666a94009e22f7adb4", "filename": "src/test/run-pass/task-comm.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Ftask-comm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Ftask-comm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -20,20 +20,20 @@ fn main() {\n \n fn test00_start(&&args: (chan<int>, int, int)) {\n     let (ch, message, count) = args;\n-    log \"Starting test00_start\";\n+    #debug(\"Starting test00_start\");\n     let i: int = 0;\n     while i < count {\n-        log \"Sending Message\";\n+        #debug(\"Sending Message\");\n         send(ch, message + 0);\n         i = i + 1;\n     }\n-    log \"Ending test00_start\";\n+    #debug(\"Ending test00_start\");\n }\n \n fn test00() {\n     let number_of_tasks: int = 1;\n     let number_of_messages: int = 4;\n-    log \"Creating tasks\";\n+    #debug(\"Creating tasks\");\n \n     let po = port();\n     let ch = chan(po);\n@@ -54,7 +54,7 @@ fn test00() {\n \n     for t in tasks { task::join(t); }\n \n-    log \"Completed: Final number is: \";\n+    #debug(\"Completed: Final number is: \");\n     assert (sum ==\n                 number_of_messages *\n                     (number_of_tasks * number_of_tasks + number_of_tasks) /\n@@ -63,45 +63,45 @@ fn test00() {\n \n fn test01() {\n     let p = port();\n-    log \"Reading from a port that is never written to.\";\n+    #debug(\"Reading from a port that is never written to.\");\n     let value: int = recv(p);\n-    log value;\n+    log_full(core::debug, value);\n }\n \n fn test02() {\n     let p = port();\n     let c = chan(p);\n-    log \"Writing to a local task channel.\";\n+    #debug(\"Writing to a local task channel.\");\n     send(c, 42);\n-    log \"Reading from a local task port.\";\n+    #debug(\"Reading from a local task port.\");\n     let value: int = recv(p);\n-    log value;\n+    log_full(core::debug, value);\n }\n \n obj vector(mutable x: int, y: int) {\n     fn length() -> int { x = x + 2; ret x + y; }\n }\n \n fn test03() {\n-    log \"Creating object ...\";\n+    #debug(\"Creating object ...\");\n     let v: vector = vector(1, 2);\n-    log \"created object ...\";\n+    #debug(\"created object ...\");\n     let t: vector = v;\n-    log v.length();\n+    log_full(core::debug, v.length());\n }\n \n fn test04_start(&&_args: ()) {\n-    log \"Started task\";\n+    #debug(\"Started task\");\n     let i: int = 1024 * 1024;\n     while i > 0 { i = i - 1; }\n-    log \"Finished task\";\n+    #debug(\"Finished task\");\n }\n \n fn test04() {\n-    log \"Spawning lots of tasks.\";\n+    #debug(\"Spawning lots of tasks.\");\n     let i: int = 4;\n     while i > 0 { i = i - 1; task::spawn((), test04_start); }\n-    log \"Finishing up.\";\n+    #debug(\"Finishing up.\");\n }\n \n fn test05_start(ch: chan<int>) {\n@@ -120,19 +120,19 @@ fn test05() {\n     value = recv(po);\n     value = recv(po);\n     value = recv(po);\n-    log value;\n+    log_full(core::debug, value);\n }\n \n fn test06_start(&&task_number: int) {\n-    log \"Started task.\";\n+    #debug(\"Started task.\");\n     let i: int = 0;\n     while i < 1000000 { i = i + 1; }\n-    log \"Finished task.\";\n+    #debug(\"Finished task.\");\n }\n \n fn test06() {\n     let number_of_tasks: int = 4;\n-    log \"Creating tasks\";\n+    #debug(\"Creating tasks\");\n \n     let i: int = 0;\n "}, {"sha": "417e537a90591bfed69ae6d27295f533f7185a50", "filename": "src/test/run-pass/threads.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fthreads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fthreads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fthreads.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -6,8 +6,8 @@ import task;\n fn main() {\n     let i = 10;\n     while i > 0 { task::spawn(copy i, child); i = i - 1; }\n-    log \"main thread exiting\";\n+    #debug(\"main thread exiting\");\n }\n \n-fn child(&&x: int) { log x; }\n+fn child(&&x: int) { log_full(core::debug, x); }\n "}, {"sha": "cea3d49772e51e4a1fbd6916384cc0590cb1273d", "filename": "src/test/run-pass/trivial-message.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Ftrivial-message.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Ftrivial-message.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrivial-message.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -10,5 +10,5 @@ fn main() {\n     let ch = chan(po);\n     send(ch, 42);\n     let r = recv(po);\n-    log_err r;\n+    log_full(core::error, r);\n }"}, {"sha": "a25155db3d706bcd69e885bcfe4ff838ac2da03b", "filename": "src/test/run-pass/unique-copy-box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Funique-copy-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Funique-copy-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-copy-box.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -7,6 +7,6 @@ fn main() unsafe {\n     let rc1 = refcount(*i);\n     let j = i;\n     let rc2 = refcount(*i);\n-    log_err #fmt(\"rc1: %u rc2: %u\", rc1, rc2);\n+    #error(\"rc1: %u rc2: %u\", rc1, rc2);\n     assert rc1 + 1u == rc2;\n }\n\\ No newline at end of file"}, {"sha": "21159a32e73f494bbdc4ec265087d4a26c271f02", "filename": "src/test/run-pass/unique-in-tag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Funique-in-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Funique-in-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-in-tag.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -4,7 +4,7 @@ fn test1() {\n     let x = u(~10);\n     assert alt x {\n       u(a) {\n-        log_err a;\n+        log_full(core::error, a);\n         *a\n       }\n       _ { 66 }"}, {"sha": "4b545eb9c7940a9193d2601ce9b8354f29a534f5", "filename": "src/test/run-pass/unique-log.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Funique-log.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Funique-log.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-log.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -1,4 +1,4 @@\n fn main() {\n     let i = ~100;\n-    log_err i;\n+    log_full(core::error, i);\n }\n\\ No newline at end of file"}, {"sha": "d6908607130e2f30ba1d7273434a6b1a57f2b7e0", "filename": "src/test/run-pass/unique-pat-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Funique-pat-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Funique-pat-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-pat-3.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -4,7 +4,7 @@ tag bar { u(~int); w(int); }\n fn main() {\n     assert alt u(~10) {\n       u(a) {\n-        log_err a;\n+        log_full(core::error, a);\n         *a\n       }\n       _ { 66 }"}, {"sha": "52181a0cf5a0fc39f166203b7393bc5dd3dd568a", "filename": "src/test/run-pass/unreachable-code.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Funreachable-code.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Funreachable-code.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funreachable-code.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -19,13 +19,13 @@ fn bind_id_2() { bind id(ret); }\n \n fn fail_fail() { fail fail; }\n \n-fn log_fail() { log_err fail; }\n+fn log_fail() { log_full(core::error, fail); }\n \n-fn log_ret() { log_err ret; }\n+fn log_ret() { log_full(core::error, ret); }\n \n-fn log_break() { while true { log_err break; } }\n+fn log_break() { while true { log_full(core::error, break); } }\n \n-fn log_cont() { do { log_err cont; } while false }\n+fn log_cont() { do { log_full(core::error, cont); } while false }\n \n fn ret_ret() -> int { ret (ret 2) + 3; }\n "}, {"sha": "d30f7d65afb30a807c6de58def3d718bf435c12a", "filename": "src/test/run-pass/use-uninit-alt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fuse-uninit-alt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fuse-uninit-alt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fuse-uninit-alt.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -8,4 +8,4 @@ fn foo<T>(o: myoption<T>) -> int {\n \n tag myoption<T> { none; some(T); }\n \n-fn main() { log 5; }\n+fn main() { log_full(core::debug, 5); }"}, {"sha": "4481d65e9f48c6307c15e02d4d91954ae84b3969", "filename": "src/test/run-pass/use-uninit-alt2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fuse-uninit-alt2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fuse-uninit-alt2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fuse-uninit-alt2.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -8,4 +8,4 @@ fn foo<T>(o: myoption<T>) -> int {\n \n tag myoption<T> { none; some(T); }\n \n-fn main() { log 5; }\n+fn main() { log_full(core::debug, 5); }"}, {"sha": "ddca218ada2d06814b11ace8ff2762f264b7c8af", "filename": "src/test/run-pass/user.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fuser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fuser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fuser.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -8,8 +8,8 @@ use std (name = \"std\",\n fn main() {\n   auto s = str.alloc(10 as uint);\n   s += \"hello \";\n-  log s;\n+  log_full(core::debug, s);\n   s += \"there\";\n-  log s;\n+  log_full(core::debug, s);\n   auto z = vec.alloc::<int>(10 as uint);\n }"}, {"sha": "778fa22c446a0d44942c4b17aade414434322bb2", "filename": "src/test/run-pass/utf8.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Futf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Futf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Futf8.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -32,10 +32,10 @@ fn main() {\n     fn check_str_eq(a: str, b: str) {\n         let i: int = 0;\n         for ab: u8 in a {\n-            log i;\n-            log ab;\n+            log_full(core::debug, i);\n+            log_full(core::debug, ab);\n             let bb: u8 = b[i];\n-            log bb;\n+            log_full(core::debug, bb);\n             assert (ab == bb);\n             i += 1;\n         }"}, {"sha": "7604f74f7b20d1b2d08da3995207b642306936f1", "filename": "src/test/run-pass/vec-concat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fvec-concat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fvec-concat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-concat.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -6,7 +6,7 @@ fn main() {\n     let a: [int] = [1, 2, 3, 4, 5];\n     let b: [int] = [6, 7, 8, 9, 0];\n     let v: [int] = a + b;\n-    log v[9];\n+    log_full(core::debug, v[9]);\n     assert (v[0] == 1);\n     assert (v[7] == 8);\n     assert (v[9] == 0);"}, {"sha": "c41293dadb68380a4785889a1336d26be6a48ce6", "filename": "src/test/run-pass/vec-late-init.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fvec-late-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b580954fe140dd45db61d719a49065c3e31de95/src%2Ftest%2Frun-pass%2Fvec-late-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-late-init.rs?ref=8b580954fe140dd45db61d719a49065c3e31de95", "patch": "@@ -3,5 +3,5 @@\n fn main() {\n     let later: [int];\n     if true { later = [1]; } else { later = [2]; }\n-    log later[0];\n+    log_full(core::debug, later[0]);\n }"}]}