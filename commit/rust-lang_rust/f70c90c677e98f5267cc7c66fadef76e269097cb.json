{"sha": "f70c90c677e98f5267cc7c66fadef76e269097cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3MGM5MGM2NzdlOThmNTI2N2NjN2M2NmZhZGVmNzZlMjY5MDk3Y2I=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-08-11T17:09:50Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-08-17T08:12:32Z"}, "message": "Move type parameter shadowing errors to resolve\n\nFor some reason type checking did this. Further it didn't consider\nhygiene.", "tree": {"sha": "aeaddd7d62b935f92ab3f8df445b1ea09c6bb935", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aeaddd7d62b935f92ab3f8df445b1ea09c6bb935"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f70c90c677e98f5267cc7c66fadef76e269097cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f70c90c677e98f5267cc7c66fadef76e269097cb", "html_url": "https://github.com/rust-lang/rust/commit/f70c90c677e98f5267cc7c66fadef76e269097cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f70c90c677e98f5267cc7c66fadef76e269097cb/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3296d0ed6d1ce5f2f20398c5765c7876d2c63da2", "url": "https://api.github.com/repos/rust-lang/rust/commits/3296d0ed6d1ce5f2f20398c5765c7876d2c63da2", "html_url": "https://github.com/rust-lang/rust/commit/3296d0ed6d1ce5f2f20398c5765c7876d2c63da2"}], "stats": {"total": 217, "additions": 108, "deletions": 109}, "files": [{"sha": "b79e0c2bd3b2672257f12aacd1cbc652b7a86fad", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f70c90c677e98f5267cc7c66fadef76e269097cb/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f70c90c677e98f5267cc7c66fadef76e269097cb/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=f70c90c677e98f5267cc7c66fadef76e269097cb", "patch": "@@ -169,12 +169,14 @@ impl<'a> Resolver<'a> {\n                 err\n             }\n             ResolutionError::NameAlreadyUsedInParameterList(name, first_use_span) => {\n-                let mut err = struct_span_err!(self.session,\n-                                                span,\n-                                                E0403,\n-                                                \"the name `{}` is already used for a generic \\\n-                                                parameter in this list of generic parameters\",\n-                                                name);\n+                let mut err = struct_span_err!(\n+                    self.session,\n+                    span,\n+                    E0403,\n+                    \"the name `{}` is already used for a generic \\\n+                     parameter in this item's generic parameters\",\n+                    name,\n+                );\n                 err.span_label(span, \"already used\");\n                 err.span_label(first_use_span, format!(\"first use of `{}`\", name));\n                 err"}, {"sha": "1faaf97e981c14fed761bb802019e1098eb264b4", "filename": "src/librustc_resolve/error_codes.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f70c90c677e98f5267cc7c66fadef76e269097cb/src%2Flibrustc_resolve%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f70c90c677e98f5267cc7c66fadef76e269097cb/src%2Flibrustc_resolve%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Ferror_codes.rs?ref=f70c90c677e98f5267cc7c66fadef76e269097cb", "patch": "@@ -526,15 +526,25 @@ Some type parameters have the same name.\n Erroneous code example:\n \n ```compile_fail,E0403\n-fn foo<T, T>(s: T, u: T) {} // error: the name `T` is already used for a type\n-                            //        parameter in this type parameter list\n+fn f<T, T>(s: T, u: T) {} // error: the name `T` is already used for a generic\n+                          //        parameter in this item's generic parameters\n ```\n \n Please verify that none of the type parameters are misspelled, and rename any\n clashing parameters. Example:\n \n ```\n-fn foo<T, Y>(s: T, u: Y) {} // ok!\n+fn f<T, Y>(s: T, u: Y) {} // ok!\n+```\n+\n+Type parameters in an associated item also cannot shadow parameters from the\n+containing item:\n+\n+```compile_fail,E0403\n+trait Foo<T> {\n+    fn do_something(&self) -> T;\n+    fn do_something_else<T: Clone>(&self, bar: T);\n+}\n ```\n \"##,\n "}, {"sha": "e15d02a9f7ec7abcd69bc082aaf9a6ecd9b64a0b", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/f70c90c677e98f5267cc7c66fadef76e269097cb/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f70c90c677e98f5267cc7c66fadef76e269097cb/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=f70c90c677e98f5267cc7c66fadef76e269097cb", "patch": "@@ -111,6 +111,24 @@ crate enum RibKind<'a> {\n     TyParamAsConstParamTy,\n }\n \n+impl RibKind<'_> {\n+    // Whether this rib kind contains generic parameters, as opposed to local\n+    // variables.\n+    crate fn contains_params(&self) -> bool {\n+        match self {\n+            NormalRibKind\n+            | FnItemRibKind\n+            | ConstantItemRibKind\n+            | ModuleRibKind(_)\n+            | MacroDefinition(_) => false,\n+            AssocItemRibKind\n+            | ItemRibKind\n+            | ForwardTyParamBanRibKind\n+            | TyParamAsConstParamTy => true,\n+        }\n+    }\n+}\n+\n /// A single local scope.\n ///\n /// A rib represents a scope names can live in. Note that these appear in many places, not just\n@@ -798,6 +816,19 @@ impl<'a, 'b> LateResolutionVisitor<'a, '_> {\n                 let mut function_type_rib = Rib::new(rib_kind);\n                 let mut function_value_rib = Rib::new(rib_kind);\n                 let mut seen_bindings = FxHashMap::default();\n+                // We also can't shadow bindings from the parent item\n+                if let AssocItemRibKind = rib_kind {\n+                    let mut add_bindings_for_ns = |ns| {\n+                        let parent_rib = self.ribs[ns].iter()\n+                            .rfind(|rib| if let ItemRibKind = rib.kind { true } else { false })\n+                            .expect(\"associated item outside of an item\");\n+                        seen_bindings.extend(\n+                            parent_rib.bindings.iter().map(|(ident, _)| (*ident, ident.span)),\n+                        );\n+                    };\n+                    add_bindings_for_ns(ValueNS);\n+                    add_bindings_for_ns(TypeNS);\n+                }\n                 for param in &generics.params {\n                     match param.kind {\n                         GenericParamKind::Lifetime { .. } => {}"}, {"sha": "984473d781e62c0355611f1685d9932a8f6ab173", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f70c90c677e98f5267cc7c66fadef76e269097cb/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f70c90c677e98f5267cc7c66fadef76e269097cb/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=f70c90c677e98f5267cc7c66fadef76e269097cb", "patch": "@@ -1499,7 +1499,7 @@ impl<'a> Resolver<'a> {\n             debug!(\"walk rib\\n{:?}\", ribs[i].bindings);\n             // Use the rib kind to determine whether we are resolving parameters\n             // (modern hygiene) or local variables (legacy hygiene).\n-            let rib_ident = if let AssocItemRibKind | ItemRibKind = ribs[i].kind {\n+            let rib_ident = if ribs[i].kind.contains_params() {\n                 modern_ident\n             } else {\n                 ident"}, {"sha": "28a1ccda4d84187f334fb4c3facbddbba8c8ea86", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/f70c90c677e98f5267cc7c66fadef76e269097cb/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f70c90c677e98f5267cc7c66fadef76e269097cb/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=f70c90c677e98f5267cc7c66fadef76e269097cb", "patch": "@@ -203,7 +203,6 @@ fn check_associated_item(\n                 fcx.register_wf_obligation(ty, span, code.clone());\n             }\n             ty::AssocKind::Method => {\n-                reject_shadowing_parameters(fcx.tcx, item.def_id);\n                 let sig = fcx.tcx.fn_sig(item.def_id);\n                 let sig = fcx.normalize_associated_types_in(span, &sig);\n                 check_fn_or_method(tcx, fcx, span, sig,\n@@ -998,34 +997,6 @@ fn report_bivariance(tcx: TyCtxt<'_>, span: Span, param_name: ast::Name) {\n     err.emit();\n }\n \n-fn reject_shadowing_parameters(tcx: TyCtxt<'_>, def_id: DefId) {\n-    let generics = tcx.generics_of(def_id);\n-    let parent = tcx.generics_of(generics.parent.unwrap());\n-    let impl_params: FxHashMap<_, _> = parent.params.iter().flat_map(|param| match param.kind {\n-        GenericParamDefKind::Lifetime => None,\n-        GenericParamDefKind::Type { .. } | GenericParamDefKind::Const => {\n-            Some((param.name, param.def_id))\n-        }\n-    }).collect();\n-\n-    for method_param in &generics.params {\n-        // Shadowing is checked in `resolve_lifetime`.\n-        if let GenericParamDefKind::Lifetime = method_param.kind {\n-            continue\n-        }\n-        if impl_params.contains_key(&method_param.name) {\n-            // Tighten up the span to focus on only the shadowing type.\n-            let type_span = tcx.def_span(method_param.def_id);\n-\n-            // The expectation here is that the original trait declaration is\n-            // local so it should be okay to just unwrap everything.\n-            let trait_def_id = impl_params[&method_param.name];\n-            let trait_decl_span = tcx.def_span(trait_def_id);\n-            error_194(tcx, type_span, trait_decl_span, &method_param.name.as_str()[..]);\n-        }\n-    }\n-}\n-\n /// Feature gates RFC 2056 -- trivial bounds, checking for global bounds that\n /// aren't true.\n fn check_false_global_bounds(fcx: &FnCtxt<'_, '_>, span: Span, id: hir::HirId) {\n@@ -1152,12 +1123,3 @@ fn error_392(\n     err.span_label(span, \"unused parameter\");\n     err\n }\n-\n-fn error_194(tcx: TyCtxt<'_>, span: Span, trait_decl_span: Span, name: &str) {\n-    struct_span_err!(tcx.sess, span, E0194,\n-                     \"type parameter `{}` shadows another type parameter of the same name\",\n-                     name)\n-        .span_label(span, \"shadows another type parameter\")\n-        .span_label(trait_decl_span, format!(\"first `{}` declared here\", name))\n-        .emit();\n-}"}, {"sha": "ca9ce3d22b5cb0dcb2c3858412dcc0386147dab2", "filename": "src/librustc_typeck/error_codes.rs", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f70c90c677e98f5267cc7c66fadef76e269097cb/src%2Flibrustc_typeck%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f70c90c677e98f5267cc7c66fadef76e269097cb/src%2Flibrustc_typeck%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Ferror_codes.rs?ref=f70c90c677e98f5267cc7c66fadef76e269097cb", "patch": "@@ -1718,22 +1718,6 @@ Since we know for certain that `Wrapper<u32>` implements `Clone`, there's no\n reason to also specify it in a `where` clause.\n \"##,\n \n-E0194: r##\"\n-A type parameter was declared which shadows an existing one. An example of this\n-error:\n-\n-```compile_fail,E0194\n-trait Foo<T> {\n-    fn do_something(&self) -> T;\n-    fn do_something_else<T: Clone>(&self, bar: T);\n-}\n-```\n-\n-In this example, the trait `Foo` and the trait method `do_something_else` both\n-define a type parameter `T`. This is not allowed: if the method wishes to\n-define a type parameter, it must use a different name for it.\n-\"##,\n-\n E0195: r##\"\n Your method's lifetime parameters do not match the trait declaration.\n Erroneous code example:\n@@ -4837,6 +4821,7 @@ register_diagnostics! {\n //  E0188, // can not cast an immutable reference to a mutable pointer\n //  E0189, // deprecated: can only cast a boxed pointer to a boxed object\n //  E0190, // deprecated: can only cast a &-pointer to an &-object\n+//  E0194, // merged into E0403\n //  E0196, // cannot determine a type for this closure\n     E0203, // type parameter has more than one relaxed default bound,\n            // and only one is supported"}, {"sha": "6754574f0b953673bbe7034498d4d5445f5e6b67", "filename": "src/test/ui/duplicate/duplicate-type-parameter.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f70c90c677e98f5267cc7c66fadef76e269097cb/src%2Ftest%2Fui%2Fduplicate%2Fduplicate-type-parameter.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f70c90c677e98f5267cc7c66fadef76e269097cb/src%2Ftest%2Fui%2Fduplicate%2Fduplicate-type-parameter.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fduplicate%2Fduplicate-type-parameter.stderr?ref=f70c90c677e98f5267cc7c66fadef76e269097cb", "patch": "@@ -1,52 +1,52 @@\n-error[E0403]: the name `T` is already used for a generic parameter in this list of generic parameters\n+error[E0403]: the name `T` is already used for a generic parameter in this item's generic parameters\n   --> $DIR/duplicate-type-parameter.rs:1:12\n    |\n LL | type Foo<T,T> = Option<T>;\n    |          - ^ already used\n    |          |\n    |          first use of `T`\n \n-error[E0403]: the name `T` is already used for a generic parameter in this list of generic parameters\n+error[E0403]: the name `T` is already used for a generic parameter in this item's generic parameters\n   --> $DIR/duplicate-type-parameter.rs:4:14\n    |\n LL | struct Bar<T,T>(T);\n    |            - ^ already used\n    |            |\n    |            first use of `T`\n \n-error[E0403]: the name `T` is already used for a generic parameter in this list of generic parameters\n+error[E0403]: the name `T` is already used for a generic parameter in this item's generic parameters\n   --> $DIR/duplicate-type-parameter.rs:7:14\n    |\n LL | struct Baz<T,T> {\n    |            - ^ already used\n    |            |\n    |            first use of `T`\n \n-error[E0403]: the name `T` is already used for a generic parameter in this list of generic parameters\n+error[E0403]: the name `T` is already used for a generic parameter in this item's generic parameters\n   --> $DIR/duplicate-type-parameter.rs:12:12\n    |\n LL | enum Boo<T,T> {\n    |          - ^ already used\n    |          |\n    |          first use of `T`\n \n-error[E0403]: the name `T` is already used for a generic parameter in this list of generic parameters\n+error[E0403]: the name `T` is already used for a generic parameter in this item's generic parameters\n   --> $DIR/duplicate-type-parameter.rs:18:11\n    |\n LL | fn quux<T,T>(x: T) {}\n    |         - ^ already used\n    |         |\n    |         first use of `T`\n \n-error[E0403]: the name `T` is already used for a generic parameter in this list of generic parameters\n+error[E0403]: the name `T` is already used for a generic parameter in this item's generic parameters\n   --> $DIR/duplicate-type-parameter.rs:21:13\n    |\n LL | trait Qux<T,T> {}\n    |           - ^ already used\n    |           |\n    |           first use of `T`\n \n-error[E0403]: the name `T` is already used for a generic parameter in this list of generic parameters\n+error[E0403]: the name `T` is already used for a generic parameter in this item's generic parameters\n   --> $DIR/duplicate-type-parameter.rs:24:8\n    |\n LL | impl<T,T> Qux<T,T> for Option<T> {}"}, {"sha": "8a43f38fcfd5ff159999c51a32c72d4c4fd73b6b", "filename": "src/test/ui/error-codes/E0194.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f70c90c677e98f5267cc7c66fadef76e269097cb/src%2Ftest%2Fui%2Ferror-codes%2FE0194.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f70c90c677e98f5267cc7c66fadef76e269097cb/src%2Ftest%2Fui%2Ferror-codes%2FE0194.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0194.rs?ref=f70c90c677e98f5267cc7c66fadef76e269097cb", "patch": "@@ -1,7 +1,7 @@\n trait Foo<T> {\n     fn do_something(&self) -> T;\n     fn do_something_else<T: Clone>(&self, bar: T);\n-    //~^ ERROR E0194\n+    //~^ ERROR E0403\n }\n \n fn main() {"}, {"sha": "f2c908eea0bb094bb4484a11f9cf0056b8913542", "filename": "src/test/ui/error-codes/E0194.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f70c90c677e98f5267cc7c66fadef76e269097cb/src%2Ftest%2Fui%2Ferror-codes%2FE0194.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f70c90c677e98f5267cc7c66fadef76e269097cb/src%2Ftest%2Fui%2Ferror-codes%2FE0194.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0194.stderr?ref=f70c90c677e98f5267cc7c66fadef76e269097cb", "patch": "@@ -1,12 +1,12 @@\n-error[E0194]: type parameter `T` shadows another type parameter of the same name\n+error[E0403]: the name `T` is already used for a generic parameter in this item's generic parameters\n   --> $DIR/E0194.rs:3:26\n    |\n LL | trait Foo<T> {\n-   |           - first `T` declared here\n+   |           - first use of `T`\n LL |     fn do_something(&self) -> T;\n LL |     fn do_something_else<T: Clone>(&self, bar: T);\n-   |                          ^ shadows another type parameter\n+   |                          ^ already used\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0194`.\n+For more information about this error, try `rustc --explain E0403`."}, {"sha": "d76a58a7c80de33bcb13b5b1d00b4f95a9f33fb2", "filename": "src/test/ui/error-codes/E0403.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f70c90c677e98f5267cc7c66fadef76e269097cb/src%2Ftest%2Fui%2Ferror-codes%2FE0403.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f70c90c677e98f5267cc7c66fadef76e269097cb/src%2Ftest%2Fui%2Ferror-codes%2FE0403.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0403.stderr?ref=f70c90c677e98f5267cc7c66fadef76e269097cb", "patch": "@@ -1,4 +1,4 @@\n-error[E0403]: the name `T` is already used for a generic parameter in this list of generic parameters\n+error[E0403]: the name `T` is already used for a generic parameter in this item's generic parameters\n   --> $DIR/E0403.rs:1:11\n    |\n LL | fn foo<T, T>(s: T, u: T) {}"}, {"sha": "f5197fd01bfd6cd8a724007ba53e21d13060653d", "filename": "src/test/ui/rfc1598-generic-associated-types/shadowing.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f70c90c677e98f5267cc7c66fadef76e269097cb/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fshadowing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f70c90c677e98f5267cc7c66fadef76e269097cb/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fshadowing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fshadowing.rs?ref=f70c90c677e98f5267cc7c66fadef76e269097cb", "patch": "@@ -1,32 +1,30 @@\n+#![allow(incomplete_features)]\n #![feature(generic_associated_types)]\n \n-//FIXME(#44265): The lifetime shadowing and type parameter shadowing\n-// should cause an error. Now it compiles (erroneously) and this will be addressed\n-// by a future PR. Then remove the following:\n-// build-pass (FIXME(62277): could be check-pass?)\n-\n trait Shadow<'a> {\n-    type Bar<'a>; // Error: shadowed lifetime\n+    //FIXME(#44265): The lifetime parameter shadowing should cause an error.\n+    type Bar<'a>;\n }\n \n trait NoShadow<'a> {\n     type Bar<'b>; // OK\n }\n \n impl<'a> NoShadow<'a> for &'a u32 {\n-    type Bar<'a> = i32; // Error: shadowed lifetime\n+    //FIXME(#44265): The lifetime parameter shadowing should cause an error.\n+    type Bar<'a> = i32;\n }\n \n trait ShadowT<T> {\n-    type Bar<T>; // Error: shadowed type parameter\n+    type Bar<T>; //~ ERROR the name `T` is already used\n }\n \n trait NoShadowT<T> {\n     type Bar<U>; // OK\n }\n \n impl<T> NoShadowT<T> for Option<T> {\n-    type Bar<T> = i32; // Error: shadowed type parameter\n+    type Bar<T> = i32; //~ ERROR the name `T` is already used\n }\n \n fn main() {}"}, {"sha": "a06c635084525200067ecf23e0567a74138c379b", "filename": "src/test/ui/rfc1598-generic-associated-types/shadowing.stderr", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f70c90c677e98f5267cc7c66fadef76e269097cb/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fshadowing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f70c90c677e98f5267cc7c66fadef76e269097cb/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fshadowing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fshadowing.stderr?ref=f70c90c677e98f5267cc7c66fadef76e269097cb", "patch": "@@ -1,8 +1,19 @@\n-warning: the feature `generic_associated_types` is incomplete and may cause the compiler to crash\n-  --> $DIR/shadowing.rs:1:12\n+error[E0403]: the name `T` is already used for a generic parameter in this item's generic parameters\n+  --> $DIR/shadowing.rs:19:14\n    |\n-LL | #![feature(generic_associated_types)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | trait ShadowT<T> {\n+   |               - first use of `T`\n+LL |     type Bar<T>;\n+   |              ^ already used\n+\n+error[E0403]: the name `T` is already used for a generic parameter in this item's generic parameters\n+  --> $DIR/shadowing.rs:27:14\n    |\n-   = note: `#[warn(incomplete_features)]` on by default\n+LL | impl<T> NoShadowT<T> for Option<T> {\n+   |      - first use of `T`\n+LL |     type Bar<T> = i32;\n+   |              ^ already used\n+\n+error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0403`."}, {"sha": "e74620f8900c08922d1bb81abc0ff2788e913d69", "filename": "src/test/ui/shadowed/shadowed-type-parameter.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f70c90c677e98f5267cc7c66fadef76e269097cb/src%2Ftest%2Fui%2Fshadowed%2Fshadowed-type-parameter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f70c90c677e98f5267cc7c66fadef76e269097cb/src%2Ftest%2Fui%2Fshadowed%2Fshadowed-type-parameter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fshadowed%2Fshadowed-type-parameter.rs?ref=f70c90c677e98f5267cc7c66fadef76e269097cb", "patch": "@@ -6,7 +6,7 @@ struct Foo<T>(T);\n \n impl<T> Foo<T> {\n     fn shadow_in_method<T>(&self) {}\n-    //~^ ERROR type parameter `T` shadows another type parameter\n+    //~^ ERROR the name `T` is already used\n \n     fn not_shadow_in_item<U>(&self) {\n         struct Bar<T, U>(T,U); // not a shadow, separate item\n@@ -18,10 +18,10 @@ trait Bar<T> {\n     fn dummy(&self) -> T;\n \n     fn shadow_in_required<T>(&self);\n-    //~^ ERROR type parameter `T` shadows another type parameter\n+    //~^ ERROR the name `T` is already used\n \n     fn shadow_in_provided<T>(&self) {}\n-    //~^ ERROR type parameter `T` shadows another type parameter\n+    //~^ ERROR the name `T` is already used\n \n     fn not_shadow_in_required<U>(&self);\n     fn not_shadow_in_provided<U>(&self) {}"}, {"sha": "0ea82f983f1a70806880925f1b1879e0bff182af", "filename": "src/test/ui/shadowed/shadowed-type-parameter.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f70c90c677e98f5267cc7c66fadef76e269097cb/src%2Ftest%2Fui%2Fshadowed%2Fshadowed-type-parameter.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f70c90c677e98f5267cc7c66fadef76e269097cb/src%2Ftest%2Fui%2Fshadowed%2Fshadowed-type-parameter.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fshadowed%2Fshadowed-type-parameter.stderr?ref=f70c90c677e98f5267cc7c66fadef76e269097cb", "patch": "@@ -1,29 +1,29 @@\n-error[E0194]: type parameter `T` shadows another type parameter of the same name\n+error[E0403]: the name `T` is already used for a generic parameter in this item's generic parameters\n+  --> $DIR/shadowed-type-parameter.rs:8:25\n+   |\n+LL | impl<T> Foo<T> {\n+   |      - first use of `T`\n+LL |     fn shadow_in_method<T>(&self) {}\n+   |                         ^ already used\n+\n+error[E0403]: the name `T` is already used for a generic parameter in this item's generic parameters\n   --> $DIR/shadowed-type-parameter.rs:20:27\n    |\n LL | trait Bar<T> {\n-   |           - first `T` declared here\n+   |           - first use of `T`\n ...\n LL |     fn shadow_in_required<T>(&self);\n-   |                           ^ shadows another type parameter\n+   |                           ^ already used\n \n-error[E0194]: type parameter `T` shadows another type parameter of the same name\n+error[E0403]: the name `T` is already used for a generic parameter in this item's generic parameters\n   --> $DIR/shadowed-type-parameter.rs:23:27\n    |\n LL | trait Bar<T> {\n-   |           - first `T` declared here\n+   |           - first use of `T`\n ...\n LL |     fn shadow_in_provided<T>(&self) {}\n-   |                           ^ shadows another type parameter\n-\n-error[E0194]: type parameter `T` shadows another type parameter of the same name\n-  --> $DIR/shadowed-type-parameter.rs:8:25\n-   |\n-LL | impl<T> Foo<T> {\n-   |      - first `T` declared here\n-LL |     fn shadow_in_method<T>(&self) {}\n-   |                         ^ shadows another type parameter\n+   |                           ^ already used\n \n error: aborting due to 3 previous errors\n \n-For more information about this error, try `rustc --explain E0194`.\n+For more information about this error, try `rustc --explain E0403`."}]}