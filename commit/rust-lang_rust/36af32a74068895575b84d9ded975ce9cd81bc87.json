{"sha": "36af32a74068895575b84d9ded975ce9cd81bc87", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2YWYzMmE3NDA2ODg5NTU3NWI4NGQ5ZGVkOTc1Y2U5Y2Q4MWJjODc=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-01-31T15:36:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-31T15:36:54Z"}, "message": "Rollup merge of #81572 - pierwill:edit-error-codes-1, r=jonas-schievink\n\nEdit multiple error code Markdown files\n\nMakes small edits to several error code files. Fixes some missing punctuation. Changes some wording, grammar, and formatting for clarity and readability.\n\nAdds a link to the rustup book in E0658.", "tree": {"sha": "19a8fa8ed562c4f3537712589efc82f3b0fb6b88", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19a8fa8ed562c4f3537712589efc82f3b0fb6b88"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36af32a74068895575b84d9ded975ce9cd81bc87", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgFs6WCRBK7hj4Ov3rIwAAdHIIAKbvu3OJH6HJ1oQ13CWBaPbA\n4VHdvqjfU2X0EOONnzlU27t4Iv6sVXZwvHw9NxmIPB6vQWivIGxmGDMbOexjD4sb\nlXkIaq6M+FascpK4ROf3hSeMn9NGIhH2ZRqErqzU0cux/21l+/wteAIIhDtC1+gs\nVMS1IjxJLZU0nEVX6Hkl4kYkqeF2D89yM6tzcr/OjSTq42Vj/HaLvIwHbzZPzoLK\nUEosBqNe83x2V43vbcg1glFfjJDrKFwjeucAtd0ECmB41YMgNuhouLtHjAi41SUP\nLYK1arUoa/t/dmsVh+e+sVMgeaNtgxm+DUZWNiPNWrlqQtjYmtIYUJP0RztK0bs=\n=RxiC\n-----END PGP SIGNATURE-----\n", "payload": "tree 19a8fa8ed562c4f3537712589efc82f3b0fb6b88\nparent 86c01ddc22287e32dcd2bde522af0de97e65434a\nparent fabb332c1a6ad11fa6c7f18810915e809011199e\nauthor Jonas Schievink <jonasschievink@gmail.com> 1612107414 +0100\ncommitter GitHub <noreply@github.com> 1612107414 +0100\n\nRollup merge of #81572 - pierwill:edit-error-codes-1, r=jonas-schievink\n\nEdit multiple error code Markdown files\n\nMakes small edits to several error code files. Fixes some missing punctuation. Changes some wording, grammar, and formatting for clarity and readability.\n\nAdds a link to the rustup book in E0658.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36af32a74068895575b84d9ded975ce9cd81bc87", "html_url": "https://github.com/rust-lang/rust/commit/36af32a74068895575b84d9ded975ce9cd81bc87", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36af32a74068895575b84d9ded975ce9cd81bc87/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86c01ddc22287e32dcd2bde522af0de97e65434a", "url": "https://api.github.com/repos/rust-lang/rust/commits/86c01ddc22287e32dcd2bde522af0de97e65434a", "html_url": "https://github.com/rust-lang/rust/commit/86c01ddc22287e32dcd2bde522af0de97e65434a"}, {"sha": "fabb332c1a6ad11fa6c7f18810915e809011199e", "url": "https://api.github.com/repos/rust-lang/rust/commits/fabb332c1a6ad11fa6c7f18810915e809011199e", "html_url": "https://github.com/rust-lang/rust/commit/fabb332c1a6ad11fa6c7f18810915e809011199e"}], "stats": {"total": 26, "additions": 14, "deletions": 12}, "files": [{"sha": "5605302772ff689c1d9a6298f01afe67a49512fb", "filename": "compiler/rustc_error_codes/src/error_codes/E0013.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36af32a74068895575b84d9ded975ce9cd81bc87/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0013.md", "raw_url": "https://github.com/rust-lang/rust/raw/36af32a74068895575b84d9ded975ce9cd81bc87/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0013.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0013.md?ref=36af32a74068895575b84d9ded975ce9cd81bc87", "patch": "@@ -8,7 +8,7 @@ static X: i32 = 42;\n const Y: i32 = X;\n ```\n \n-In this example, `Y` cannot refer to `X` here. To fix this, the value can be\n+In this example, `Y` cannot refer to `X`. To fix this, the value can be\n extracted as a const and then used:\n \n ```"}, {"sha": "019d54b6202ed4ff5224e7b2826fdf1eb6f98322", "filename": "compiler/rustc_error_codes/src/error_codes/E0038.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36af32a74068895575b84d9ded975ce9cd81bc87/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0038.md", "raw_url": "https://github.com/rust-lang/rust/raw/36af32a74068895575b84d9ded975ce9cd81bc87/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0038.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0038.md?ref=36af32a74068895575b84d9ded975ce9cd81bc87", "patch": "@@ -287,5 +287,5 @@ the method `get_a()` would return an object of unknown type when called on the\n function. `Self` type parameters let us make object safe traits no longer safe,\n so they are forbidden when specifying supertraits.\n \n-There's no easy fix for this, generally code will need to be refactored so that\n+There's no easy fix for this. Generally, code will need to be refactored so that\n you no longer need to derive from `Super<Self>`."}, {"sha": "4e37695a529640e9a447dc5df68339b1b9a16cee", "filename": "compiler/rustc_error_codes/src/error_codes/E0107.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36af32a74068895575b84d9ded975ce9cd81bc87/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0107.md", "raw_url": "https://github.com/rust-lang/rust/raw/36af32a74068895575b84d9ded975ce9cd81bc87/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0107.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0107.md?ref=36af32a74068895575b84d9ded975ce9cd81bc87", "patch": "@@ -1,4 +1,4 @@\n-An incorrect number of generic arguments were provided.\n+An incorrect number of generic arguments was provided.\n \n Erroneous code example:\n "}, {"sha": "653be60298977308436742b864245bcee5e568c6", "filename": "compiler/rustc_error_codes/src/error_codes/E0116.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36af32a74068895575b84d9ded975ce9cd81bc87/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0116.md", "raw_url": "https://github.com/rust-lang/rust/raw/36af32a74068895575b84d9ded975ce9cd81bc87/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0116.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0116.md?ref=36af32a74068895575b84d9ded975ce9cd81bc87", "patch": "@@ -10,7 +10,7 @@ You can only define an inherent implementation for a type in the same crate\n where the type was defined. For example, an `impl` block as above is not allowed\n since `Vec` is defined in the standard library.\n \n-To fix this problem, you can do either of these things:\n+To fix this problem, you can either:\n \n  - define a trait that has the desired associated functions/types/constants and\n    implement the trait for the type in question"}, {"sha": "9f6db6ed7a225bc0a1295e667c5b2fd3fcc127dd", "filename": "compiler/rustc_error_codes/src/error_codes/E0277.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/36af32a74068895575b84d9ded975ce9cd81bc87/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0277.md", "raw_url": "https://github.com/rust-lang/rust/raw/36af32a74068895575b84d9ded975ce9cd81bc87/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0277.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0277.md?ref=36af32a74068895575b84d9ded975ce9cd81bc87", "patch": "@@ -59,9 +59,9 @@ fn main() {\n }\n ```\n \n-Note that the error here is in the definition of the generic function: Although\n+Note that the error here is in the definition of the generic function. Although\n we only call it with a parameter that does implement `Debug`, the compiler\n-still rejects the function: It must work with all possible input types. In\n+still rejects the function. It must work with all possible input types. In\n order to make this example compile, we need to restrict the generic type we're\n accepting:\n "}, {"sha": "c36a56b00ce72cf7ab2c1e7efbef9da8fea8c5e3", "filename": "compiler/rustc_error_codes/src/error_codes/E0309.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36af32a74068895575b84d9ded975ce9cd81bc87/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0309.md", "raw_url": "https://github.com/rust-lang/rust/raw/36af32a74068895575b84d9ded975ce9cd81bc87/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0309.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0309.md?ref=36af32a74068895575b84d9ded975ce9cd81bc87", "patch": "@@ -25,7 +25,7 @@ where\n \n The type definition contains some field whose type requires an outlives\n annotation. Outlives annotations (e.g., `T: 'a`) are used to guarantee that all\n-the data in T is valid for at least the lifetime `'a`. This scenario most\n+the data in `T` is valid for at least the lifetime `'a`. This scenario most\n commonly arises when the type contains an associated type reference like\n `<T as SomeTrait<'a>>::Output`, as shown in the previous code.\n "}, {"sha": "f6e0b62e1b622d6fc49b220b9edc777832e66d24", "filename": "compiler/rustc_error_codes/src/error_codes/E0597.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/36af32a74068895575b84d9ded975ce9cd81bc87/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0597.md", "raw_url": "https://github.com/rust-lang/rust/raw/36af32a74068895575b84d9ded975ce9cd81bc87/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0597.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0597.md?ref=36af32a74068895575b84d9ded975ce9cd81bc87", "patch": "@@ -1,4 +1,4 @@\n-This error occurs because a value was dropped while it was still borrowed\n+This error occurs because a value was dropped while it was still borrowed.\n \n Erroneous code example:\n \n@@ -15,7 +15,7 @@ let mut x = Foo { x: None };\n println!(\"{:?}\", x.x);\n ```\n \n-In here, `y` is dropped at the end of the inner scope, but it is borrowed by\n+Here, `y` is dropped at the end of the inner scope, but it is borrowed by\n `x` until the `println`. To fix the previous example, just remove the scope\n so that `y` isn't dropped until after the println\n "}, {"sha": "24245a38ae07ffe0562603caf9c42db8ca4bbf32", "filename": "compiler/rustc_error_codes/src/error_codes/E0658.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/36af32a74068895575b84d9ded975ce9cd81bc87/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0658.md", "raw_url": "https://github.com/rust-lang/rust/raw/36af32a74068895575b84d9ded975ce9cd81bc87/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0658.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0658.md?ref=36af32a74068895575b84d9ded975ce9cd81bc87", "patch": "@@ -11,7 +11,7 @@ enum Foo {\n \n If you're using a stable or a beta version of rustc, you won't be able to use\n any unstable features. In order to do so, please switch to a nightly version of\n-rustc (by using rustup).\n+rustc (by using [rustup]).\n \n If you're using a nightly version of rustc, just add the corresponding feature\n to be able to use it:\n@@ -24,3 +24,5 @@ enum Foo {\n     Bar(u64),\n }\n ```\n+\n+[rustup]: https://rust-lang.github.io/rustup/concepts/channels.html"}, {"sha": "9f4b19cfda6b40d857e837b57339d8917b3227e9", "filename": "compiler/rustc_error_codes/src/error_codes/E0754.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/36af32a74068895575b84d9ded975ce9cd81bc87/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0754.md", "raw_url": "https://github.com/rust-lang/rust/raw/36af32a74068895575b84d9ded975ce9cd81bc87/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0754.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0754.md?ref=36af32a74068895575b84d9ded975ce9cd81bc87", "patch": "@@ -1,4 +1,4 @@\n-An non-ascii identifier was used in an invalid context.\n+A non-ASCII identifier was used in an invalid context.\n \n Erroneous code examples:\n \n@@ -13,7 +13,7 @@ fn \u0159\u0173\u015b\u0165() {} // error!\n fn main() {}\n ```\n \n-Non-ascii can be used as module names if it is inlined or if a `#[path]`\n+Non-ASCII can be used as module names if it is inlined or if a `#[path]`\n attribute is specified. For example:\n \n ```"}]}