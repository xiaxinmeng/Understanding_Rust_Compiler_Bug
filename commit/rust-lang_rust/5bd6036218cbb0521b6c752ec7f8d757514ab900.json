{"sha": "5bd6036218cbb0521b6c752ec7f8d757514ab900", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViZDYwMzYyMThjYmIwNTIxYjZjNzUyZWM3ZjhkNzU3NTE0YWI5MDA=", "commit": {"author": {"name": "Thia Wyrod", "email": "thia@wyrod.ca", "date": "2016-04-16T23:33:17Z"}, "committer": {"name": "Thia Wyrod", "email": "thia@wyrod.ca", "date": "2016-04-17T20:48:51Z"}, "message": "Added option to configure if/else brace style", "tree": {"sha": "0a9fde193efa2c79ccb6521ec4a1919073dce9f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a9fde193efa2c79ccb6521ec4a1919073dce9f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5bd6036218cbb0521b6c752ec7f8d757514ab900", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXE/a3AAoJELvnPdPH3mEhy5UQAMRwd/Z36nn0bJRxBe4ipT04\nwmbFUYif+CyVuFHOV/AZiJUt+JhS9XGb7AbtFTmwJ/VCIZWB1MoVXyjQ+r5sfJ+U\nBmPAmPmznhw9znLOM5PHqE16YptOH1I7NyU9MlMsVzjFhUkwqsYuz7+7a6kj6+6p\n2nncTFC39u6kwiITelwv03N2OAhu5DN06ppwzFkq9Wm5rglGW7QTEAcJ3bhqntdU\n9ndQMkR1vwF8xPorD5yx4r2JwYb5pnLztXRQwx31Mwzu9JfBkEmTxFeDN/CXFpdZ\nfYdFBdFECrk31sNdRJnzo8PvEv0eUcBJ5XDoO902JnaoV2bSpg4fvc5ihG4gOzDv\nZKZNood0fQVQkykmV0v6YBg6euFvfOhNDZ8ZbRyJA+r3H14PwE8VT65EoCUkY0zg\njd01gilUOeuNNzVb4f1U63OiVo3IOcfJIi6qI22+M33oDgthL+p/pxWupSKRrbup\nBaG91uTH9b0fN/H/Mgk0xpXvvCfm5tRbscmbcxsFo6/LqnTPmaVr3lhI59DoAGzR\nAI4qP9yC59WI848pCQLMidFxLbWL/VjGguUX7x6kyaL2lLtyW8YHZCb2tOcBjCdA\nlYorh65Q1w6l+gfMIIsivUK4Ib5Ce2k94jvqAvwswPym98bu+fZczPpq2TGkHfzG\nGIhvWVk1BNVFEVb7x/V5\n=K9Hc\n-----END PGP SIGNATURE-----", "payload": "tree 0a9fde193efa2c79ccb6521ec4a1919073dce9f6\nparent fe993dbdf33dd67b27675cf709a87e86d20cd105\nauthor Thia Wyrod <thia@wyrod.ca> 1460849597 -0600\ncommitter Thia Wyrod <thia@wyrod.ca> 1460926131 -0600\n\nAdded option to configure if/else brace style\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5bd6036218cbb0521b6c752ec7f8d757514ab900", "html_url": "https://github.com/rust-lang/rust/commit/5bd6036218cbb0521b6c752ec7f8d757514ab900", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5bd6036218cbb0521b6c752ec7f8d757514ab900/comments", "author": {"login": "thwyr", "id": 13190116, "node_id": "MDQ6VXNlcjEzMTkwMTE2", "avatar_url": "https://avatars.githubusercontent.com/u/13190116?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thwyr", "html_url": "https://github.com/thwyr", "followers_url": "https://api.github.com/users/thwyr/followers", "following_url": "https://api.github.com/users/thwyr/following{/other_user}", "gists_url": "https://api.github.com/users/thwyr/gists{/gist_id}", "starred_url": "https://api.github.com/users/thwyr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thwyr/subscriptions", "organizations_url": "https://api.github.com/users/thwyr/orgs", "repos_url": "https://api.github.com/users/thwyr/repos", "events_url": "https://api.github.com/users/thwyr/events{/privacy}", "received_events_url": "https://api.github.com/users/thwyr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thwyr", "id": 13190116, "node_id": "MDQ6VXNlcjEzMTkwMTE2", "avatar_url": "https://avatars.githubusercontent.com/u/13190116?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thwyr", "html_url": "https://github.com/thwyr", "followers_url": "https://api.github.com/users/thwyr/followers", "following_url": "https://api.github.com/users/thwyr/following{/other_user}", "gists_url": "https://api.github.com/users/thwyr/gists{/gist_id}", "starred_url": "https://api.github.com/users/thwyr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thwyr/subscriptions", "organizations_url": "https://api.github.com/users/thwyr/orgs", "repos_url": "https://api.github.com/users/thwyr/repos", "events_url": "https://api.github.com/users/thwyr/events{/privacy}", "received_events_url": "https://api.github.com/users/thwyr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe993dbdf33dd67b27675cf709a87e86d20cd105", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe993dbdf33dd67b27675cf709a87e86d20cd105", "html_url": "https://github.com/rust-lang/rust/commit/fe993dbdf33dd67b27675cf709a87e86d20cd105"}], "stats": {"total": 377, "additions": 371, "deletions": 6}, "files": [{"sha": "176d40026d221fb84864ae6b2083250818bca24a", "filename": "src/config.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5bd6036218cbb0521b6c752ec7f8d757514ab900/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bd6036218cbb0521b6c752ec7f8d757514ab900/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=5bd6036218cbb0521b6c752ec7f8d757514ab900", "patch": "@@ -38,6 +38,15 @@ configuration_option_enum! { BraceStyle:\n     SameLineWhere,\n }\n \n+configuration_option_enum! { ElseIfBraceStyle:\n+    // K&R style, Rust community default\n+    AlwaysSameLine,\n+    // Stroustrup style\n+    ClosingNextLine,\n+    // Allman style\n+    AlwaysNextLine,\n+}\n+\n // How to indent a function's return type.\n configuration_option_enum! { ReturnIndent:\n     // Aligned with the arguments\n@@ -315,6 +324,8 @@ create_config! {\n     newline_style: NewlineStyle, NewlineStyle::Unix, \"Unix or Windows line endings\";\n     fn_brace_style: BraceStyle, BraceStyle::SameLineWhere, \"Brace style for functions\";\n     item_brace_style: BraceStyle, BraceStyle::SameLineWhere, \"Brace style for structs and enums\";\n+    else_if_brace_style: ElseIfBraceStyle, ElseIfBraceStyle::AlwaysSameLine,\n+        \"Brace style for if, else if, and else constructs\";\n     impl_empty_single_line: bool, true, \"Put empty-body implementations on a single line\";\n     fn_empty_single_line: bool, true, \"Put empty-body functions on a single line\";\n     fn_single_line: bool, false, \"Put single-expression functions on a single line\";"}, {"sha": "7b080760f38153eabf4943b1e474a3314b6af7e9", "filename": "src/expr.rs", "status": "modified", "additions": 29, "deletions": 6, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/5bd6036218cbb0521b6c752ec7f8d757514ab900/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bd6036218cbb0521b6c752ec7f8d757514ab900/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=5bd6036218cbb0521b6c752ec7f8d757514ab900", "patch": "@@ -23,7 +23,7 @@ use string::{StringFormat, rewrite_string};\n use utils::{CodeMapSpanUtils, extra_offset, last_line_width, wrap_str, binary_search,\n             first_line_width, semicolon_for_stmt, trimmed_last_line_width, left_most_sub_expr};\n use visitor::FmtVisitor;\n-use config::{Config, StructLitStyle, MultilineStyle};\n+use config::{Config, StructLitStyle, MultilineStyle, ElseIfBraceStyle};\n use comment::{FindUncommented, rewrite_comment, contains_comment, recover_comment_removed};\n use types::rewrite_path;\n use items::{span_lo_for_arg, span_hi_for_arg};\n@@ -701,12 +701,16 @@ fn rewrite_if_else(context: &RewriteContext,\n                    allow_single_line: bool)\n                    -> Option<String> {\n     // 3 = \"if \", 2 = \" {\"\n+    let pat_penalty = match context.config.else_if_brace_style {\n+        ElseIfBraceStyle::AlwaysNextLine => 3,\n+        _ => 3 + 2,\n+    };\n     let pat_expr_string = try_opt!(rewrite_pat_expr(context,\n                                                     pat,\n                                                     cond,\n                                                     \"let \",\n                                                     \" =\",\n-                                                    try_opt!(width.checked_sub(3 + 2)),\n+                                                    try_opt!(width.checked_sub(pat_penalty)),\n                                                     offset + 3));\n \n     // Try to format if-else on single line.\n@@ -731,13 +735,19 @@ fn rewrite_if_else(context: &RewriteContext,\n                                              offset,\n                                              width);\n \n+    let alt_block_sep = String::from(\"\\n\") + &context.block_indent.to_string(context.config);\n+    let after_sep = match context.config.else_if_brace_style {\n+        ElseIfBraceStyle::AlwaysNextLine => alt_block_sep.as_str(),\n+        _ => \" \",\n+    };\n     let mut result = format!(\"if{}{}{}{}\",\n                              between_if_cond_comment.as_ref().map_or(\" \", |str| &**str),\n                              pat_expr_string,\n-                             after_cond_comment.as_ref().map_or(\" \", |str| &**str),\n+                             after_cond_comment.as_ref().map_or(after_sep, |str| &**str),\n                              if_block_string);\n \n     if let Some(else_block) = else_block_opt {\n+        let mut last_in_chain = false;\n         let rewrite = match else_block.node {\n             // If the else expression is another if-else expression, prevent it\n             // from being formatted on a single line.\n@@ -763,7 +773,10 @@ fn rewrite_if_else(context: &RewriteContext,\n                                 offset,\n                                 false)\n             }\n-            _ => else_block.rewrite(context, width, offset),\n+            _ => {\n+                last_in_chain = true;\n+                else_block.rewrite(context, width, offset)\n+            }\n         };\n \n         let between_if_else_block = mk_sp(if_block.span.hi,\n@@ -781,10 +794,20 @@ fn rewrite_if_else(context: &RewriteContext,\n                                else_block.span.lo);\n         let after_else_comment = extract_comment(after_else, &context, offset, width);\n \n+        let between_sep = match context.config.else_if_brace_style {\n+            ElseIfBraceStyle::AlwaysNextLine |\n+            ElseIfBraceStyle::ClosingNextLine => alt_block_sep.as_str(),\n+            ElseIfBraceStyle::AlwaysSameLine => \" \",\n+        };\n+        let after_sep = match context.config.else_if_brace_style {\n+            ElseIfBraceStyle::AlwaysNextLine if last_in_chain => alt_block_sep.as_str(),\n+            _ => \" \",\n+        };\n         try_opt!(write!(&mut result,\n                         \"{}else{}\",\n-                        between_if_else_block_comment.as_ref().map_or(\" \", |str| &**str),\n-                        after_else_comment.as_ref().map_or(\" \", |str| &**str))\n+                        between_if_else_block_comment.as_ref()\n+                                                     .map_or(between_sep, |str| &**str),\n+                        after_else_comment.as_ref().map_or(after_sep, |str| &**str))\n                      .ok());\n         result.push_str(&&try_opt!(rewrite));\n     }"}, {"sha": "18a8ace1f14c158efb0d8d374d9d183536a127cd", "filename": "tests/source/else-if-brace-style-always-next-line.rs", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/5bd6036218cbb0521b6c752ec7f8d757514ab900/tests%2Fsource%2Felse-if-brace-style-always-next-line.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bd6036218cbb0521b6c752ec7f8d757514ab900/tests%2Fsource%2Felse-if-brace-style-always-next-line.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Felse-if-brace-style-always-next-line.rs?ref=5bd6036218cbb0521b6c752ec7f8d757514ab900", "patch": "@@ -0,0 +1,54 @@\n+// rustfmt-else_if_brace_style: AlwaysNextLine\n+\n+fn main() {\n+    if false\n+    {\n+        ();\n+        ();\n+    }\n+\n+    if false // lone if comment\n+    {\n+        ();\n+        ();\n+    }\n+\n+\n+    let a =\n+        if 0 > 1 {\n+            unreachable!()\n+        }\n+        else\n+        {\n+            0x0\n+        };\n+\n+\n+    if true\n+    {\n+        ();\n+    } else if false {\n+        ();\n+        ();\n+    }\n+    else {\n+        ();\n+        ();\n+        ();\n+    }\n+\n+    if true // else-if-chain if comment\n+    {\n+        ();\n+    }\n+    else if false // else-if-chain else-if comment\n+    {\n+        ();\n+        ();\n+    } else // else-if-chain else comment\n+    {\n+        ();\n+        ();\n+        ();\n+    }\n+}"}, {"sha": "090b1e9a9db5a705f1203db6da76af1a77653219", "filename": "tests/source/else-if-brace-style-always-same-line.rs", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/5bd6036218cbb0521b6c752ec7f8d757514ab900/tests%2Fsource%2Felse-if-brace-style-always-same-line.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bd6036218cbb0521b6c752ec7f8d757514ab900/tests%2Fsource%2Felse-if-brace-style-always-same-line.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Felse-if-brace-style-always-same-line.rs?ref=5bd6036218cbb0521b6c752ec7f8d757514ab900", "patch": "@@ -0,0 +1,54 @@\n+// rustfmt-else_if_brace_style: AlwaysSameLine\n+\n+fn main() {\n+    if false\n+    {\n+        ();\n+        ();\n+    }\n+\n+    if false // lone if comment\n+    {\n+        ();\n+        ();\n+    }\n+\n+\n+    let a =\n+        if 0 > 1 {\n+            unreachable!()\n+        }\n+        else\n+        {\n+            0x0\n+        };\n+\n+\n+    if true\n+    {\n+        ();\n+    } else if false {\n+        ();\n+        ();\n+    }\n+    else {\n+        ();\n+        ();\n+        ();\n+    }\n+\n+    if true // else-if-chain if comment\n+    {\n+        ();\n+    }\n+    else if false // else-if-chain else-if comment\n+    {\n+        ();\n+        ();\n+    } else // else-if-chain else comment\n+    {\n+        ();\n+        ();\n+        ();\n+    }\n+}"}, {"sha": "755b95bd54199a202e817e2f6d6be0afc922b094", "filename": "tests/source/else-if-brace-style-closing-next-line.rs", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/5bd6036218cbb0521b6c752ec7f8d757514ab900/tests%2Fsource%2Felse-if-brace-style-closing-next-line.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bd6036218cbb0521b6c752ec7f8d757514ab900/tests%2Fsource%2Felse-if-brace-style-closing-next-line.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Felse-if-brace-style-closing-next-line.rs?ref=5bd6036218cbb0521b6c752ec7f8d757514ab900", "patch": "@@ -0,0 +1,54 @@\n+// rustfmt-else_if_brace_style: ClosingNextLine\n+\n+fn main() {\n+    if false\n+    {\n+        ();\n+        ();\n+    }\n+\n+    if false // lone if comment\n+    {\n+        ();\n+        ();\n+    }\n+\n+\n+    let a =\n+        if 0 > 1 {\n+            unreachable!()\n+        }\n+        else\n+        {\n+            0x0\n+        };\n+\n+\n+    if true\n+    {\n+        ();\n+    } else if false {\n+        ();\n+        ();\n+    }\n+    else {\n+        ();\n+        ();\n+        ();\n+    }\n+\n+    if true // else-if-chain if comment\n+    {\n+        ();\n+    }\n+    else if false // else-if-chain else-if comment\n+    {\n+        ();\n+        ();\n+    } else // else-if-chain else comment\n+    {\n+        ();\n+        ();\n+        ();\n+    }\n+}"}, {"sha": "3fbd8b7af25ece6b9a9b575d8c160af0513a0329", "filename": "tests/target/else-if-brace-style-always-next-line.rs", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/5bd6036218cbb0521b6c752ec7f8d757514ab900/tests%2Ftarget%2Felse-if-brace-style-always-next-line.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bd6036218cbb0521b6c752ec7f8d757514ab900/tests%2Ftarget%2Felse-if-brace-style-always-next-line.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Felse-if-brace-style-always-next-line.rs?ref=5bd6036218cbb0521b6c752ec7f8d757514ab900", "patch": "@@ -0,0 +1,62 @@\n+// rustfmt-else_if_brace_style: AlwaysNextLine\n+\n+fn main() {\n+    if false\n+    {\n+        ();\n+        ();\n+    }\n+\n+    if false\n+    // lone if comment\n+    {\n+        ();\n+        ();\n+    }\n+\n+\n+    let a = if 0 > 1\n+    {\n+        unreachable!()\n+    }\n+    else\n+    {\n+        0x0\n+    };\n+\n+\n+    if true\n+    {\n+        ();\n+    }\n+    else if false\n+    {\n+        ();\n+        ();\n+    }\n+    else\n+    {\n+        ();\n+        ();\n+        ();\n+    }\n+\n+    if true\n+    // else-if-chain if comment\n+    {\n+        ();\n+    }\n+    else if false\n+    // else-if-chain else-if comment\n+    {\n+        ();\n+        ();\n+    }\n+    else\n+    // else-if-chain else comment\n+    {\n+        ();\n+        ();\n+        ();\n+    }\n+}"}, {"sha": "393944133f752e8cb8307854e842328c5281f214", "filename": "tests/target/else-if-brace-style-always-same-line.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/5bd6036218cbb0521b6c752ec7f8d757514ab900/tests%2Ftarget%2Felse-if-brace-style-always-same-line.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bd6036218cbb0521b6c752ec7f8d757514ab900/tests%2Ftarget%2Felse-if-brace-style-always-same-line.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Felse-if-brace-style-always-same-line.rs?ref=5bd6036218cbb0521b6c752ec7f8d757514ab900", "patch": "@@ -0,0 +1,51 @@\n+// rustfmt-else_if_brace_style: AlwaysSameLine\n+\n+fn main() {\n+    if false {\n+        ();\n+        ();\n+    }\n+\n+    if false\n+    // lone if comment\n+    {\n+        ();\n+        ();\n+    }\n+\n+\n+    let a = if 0 > 1 {\n+        unreachable!()\n+    } else {\n+        0x0\n+    };\n+\n+\n+    if true {\n+        ();\n+    } else if false {\n+        ();\n+        ();\n+    } else {\n+        ();\n+        ();\n+        ();\n+    }\n+\n+    if true\n+    // else-if-chain if comment\n+    {\n+        ();\n+    } else if false\n+    // else-if-chain else-if comment\n+    {\n+        ();\n+        ();\n+    } else\n+    // else-if-chain else comment\n+    {\n+        ();\n+        ();\n+        ();\n+    }\n+}"}, {"sha": "e50f29d2921d53ebeb477329a8f7ea8a6ecbce2b", "filename": "tests/target/else-if-brace-style-closing-next-line.rs", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/5bd6036218cbb0521b6c752ec7f8d757514ab900/tests%2Ftarget%2Felse-if-brace-style-closing-next-line.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bd6036218cbb0521b6c752ec7f8d757514ab900/tests%2Ftarget%2Felse-if-brace-style-closing-next-line.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Felse-if-brace-style-closing-next-line.rs?ref=5bd6036218cbb0521b6c752ec7f8d757514ab900", "patch": "@@ -0,0 +1,56 @@\n+// rustfmt-else_if_brace_style: ClosingNextLine\n+\n+fn main() {\n+    if false {\n+        ();\n+        ();\n+    }\n+\n+    if false\n+    // lone if comment\n+    {\n+        ();\n+        ();\n+    }\n+\n+\n+    let a = if 0 > 1 {\n+        unreachable!()\n+    }\n+    else {\n+        0x0\n+    };\n+\n+\n+    if true {\n+        ();\n+    }\n+    else if false {\n+        ();\n+        ();\n+    }\n+    else {\n+        ();\n+        ();\n+        ();\n+    }\n+\n+    if true\n+    // else-if-chain if comment\n+    {\n+        ();\n+    }\n+    else if false\n+    // else-if-chain else-if comment\n+    {\n+        ();\n+        ();\n+    }\n+    else\n+    // else-if-chain else comment\n+    {\n+        ();\n+        ();\n+        ();\n+    }\n+}"}]}