{"sha": "01d04944cefc61cd684e3554e48068926a5f30ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxZDA0OTQ0Y2VmYzYxY2Q2ODRlMzU1NGU0ODA2ODkyNmE1ZjMwYWI=", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2020-01-07T15:41:59Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2020-03-02T11:43:07Z"}, "message": "Apply review feedback", "tree": {"sha": "46acb587cf4decf0b11de1999de8a59e892a94ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46acb587cf4decf0b11de1999de8a59e892a94ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01d04944cefc61cd684e3554e48068926a5f30ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01d04944cefc61cd684e3554e48068926a5f30ab", "html_url": "https://github.com/rust-lang/rust/commit/01d04944cefc61cd684e3554e48068926a5f30ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01d04944cefc61cd684e3554e48068926a5f30ab/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35349abeb33893e9d683e507f819c16063e4797e", "url": "https://api.github.com/repos/rust-lang/rust/commits/35349abeb33893e9d683e507f819c16063e4797e", "html_url": "https://github.com/rust-lang/rust/commit/35349abeb33893e9d683e507f819c16063e4797e"}], "stats": {"total": 108, "additions": 40, "deletions": 68}, "files": [{"sha": "08c0462a1dc737e0a7f4389fea217395110a90eb", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/01d04944cefc61cd684e3554e48068926a5f30ab/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/01d04944cefc61cd684e3554e48068926a5f30ab/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=01d04944cefc61cd684e3554e48068926a5f30ab", "patch": "@@ -2308,6 +2308,7 @@ dependencies = [\n name = \"panic_abort\"\n version = \"0.0.0\"\n dependencies = [\n+ \"cfg-if\",\n  \"compiler_builtins\",\n  \"core\",\n  \"libc\","}, {"sha": "8ebd95047ac232d5340df929d51e7da6c7a123f1", "filename": "src/libpanic_abort/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/01d04944cefc61cd684e3554e48068926a5f30ab/src%2Flibpanic_abort%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/01d04944cefc61cd684e3554e48068926a5f30ab/src%2Flibpanic_abort%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_abort%2FCargo.toml?ref=01d04944cefc61cd684e3554e48068926a5f30ab", "patch": "@@ -14,3 +14,4 @@ doc = false\n core = { path = \"../libcore\" }\n libc = { version = \"0.2\", default-features = false }\n compiler_builtins = \"0.1.0\"\n+cfg-if = \"0.1.8\""}, {"sha": "6ea818ecef82784a089f9dd079ad2091994239ab", "filename": "src/libpanic_abort/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/01d04944cefc61cd684e3554e48068926a5f30ab/src%2Flibpanic_abort%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01d04944cefc61cd684e3554e48068926a5f30ab/src%2Flibpanic_abort%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_abort%2Flib.rs?ref=01d04944cefc61cd684e3554e48068926a5f30ab", "patch": "@@ -20,8 +20,11 @@\n \n use core::any::Any;\n \n+// We need the definition of TryPayload for __rust_panic_cleanup.\n+include!(\"../libpanic_unwind/payload.rs\");\n+\n #[rustc_std_internal_symbol]\n-pub unsafe extern \"C\" fn __rust_panic_cleanup(_: *mut u8) -> *mut (dyn Any + Send + 'static) {\n+pub unsafe extern \"C\" fn __rust_panic_cleanup(_: TryPayload) -> *mut (dyn Any + Send + 'static) {\n     unreachable!()\n }\n "}, {"sha": "4667ede2baad5131ef5587f06c2c3b153f8f9bb8", "filename": "src/libpanic_unwind/dummy.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01d04944cefc61cd684e3554e48068926a5f30ab/src%2Flibpanic_unwind%2Fdummy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01d04944cefc61cd684e3554e48068926a5f30ab/src%2Flibpanic_unwind%2Fdummy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Fdummy.rs?ref=01d04944cefc61cd684e3554e48068926a5f30ab", "patch": "@@ -6,8 +6,6 @@ use alloc::boxed::Box;\n use core::any::Any;\n use core::intrinsics;\n \n-pub type Payload = *mut u8;\n-\n pub unsafe fn cleanup(_ptr: *mut u8) -> Box<dyn Any + Send> {\n     intrinsics::abort()\n }"}, {"sha": "e541ec3002510489cb0dcfa38bcda601cb1425f8", "filename": "src/libpanic_unwind/emcc.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01d04944cefc61cd684e3554e48068926a5f30ab/src%2Flibpanic_unwind%2Femcc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01d04944cefc61cd684e3554e48068926a5f30ab/src%2Flibpanic_unwind%2Femcc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Femcc.rs?ref=01d04944cefc61cd684e3554e48068926a5f30ab", "patch": "@@ -48,8 +48,6 @@ static EXCEPTION_TYPE_INFO: TypeInfo = TypeInfo {\n     name: b\"rust_panic\\0\".as_ptr(),\n };\n \n-pub type Payload = *mut u8;\n-\n struct Exception {\n     // This needs to be an Option because the object's lifetime follows C++\n     // semantics: when catch_unwind moves the Box out of the exception it must"}, {"sha": "20ae5edaa2a690cd2fdfd6ddf6acccddb139a0f2", "filename": "src/libpanic_unwind/gcc.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01d04944cefc61cd684e3554e48068926a5f30ab/src%2Flibpanic_unwind%2Fgcc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01d04944cefc61cd684e3554e48068926a5f30ab/src%2Flibpanic_unwind%2Fgcc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Fgcc.rs?ref=01d04944cefc61cd684e3554e48068926a5f30ab", "patch": "@@ -82,8 +82,6 @@ pub unsafe fn panic(data: Box<dyn Any + Send>) -> u32 {\n     }\n }\n \n-pub type Payload = *mut u8;\n-\n pub unsafe fn cleanup(ptr: *mut u8) -> Box<dyn Any + Send> {\n     let exception = Box::from_raw(ptr as *mut Exception);\n     exception.cause"}, {"sha": "6bded4dd499bd7b0a6774f9df07eb31787390004", "filename": "src/libpanic_unwind/hermit.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01d04944cefc61cd684e3554e48068926a5f30ab/src%2Flibpanic_unwind%2Fhermit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01d04944cefc61cd684e3554e48068926a5f30ab/src%2Flibpanic_unwind%2Fhermit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Fhermit.rs?ref=01d04944cefc61cd684e3554e48068926a5f30ab", "patch": "@@ -6,8 +6,6 @@ use alloc::boxed::Box;\n use core::any::Any;\n use core::ptr;\n \n-pub type Payload = *mut u8;\n-\n pub unsafe fn cleanup(_ptr: *mut u8) -> Box<dyn Any + Send> {\n     extern \"C\" {\n         pub fn __rust_abort() -> !;"}, {"sha": "87d24841d04a345e4c296a41fabe315ab26f5b5a", "filename": "src/libpanic_unwind/lib.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/01d04944cefc61cd684e3554e48068926a5f30ab/src%2Flibpanic_unwind%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01d04944cefc61cd684e3554e48068926a5f30ab/src%2Flibpanic_unwind%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Flib.rs?ref=01d04944cefc61cd684e3554e48068926a5f30ab", "patch": "@@ -35,8 +35,8 @@ use alloc::boxed::Box;\n use core::any::Any;\n use core::panic::BoxMeUp;\n \n-// If adding to this list, you should also look at libstd::panicking's identical\n-// list of Payload types and likely add to there as well.\n+// If adding to this list, you should also look at the list of TryPayload types\n+// defined in payload.rs and likely add to there as well.\n cfg_if::cfg_if! {\n     if #[cfg(target_os = \"emscripten\")] {\n         #[path = \"emcc.rs\"]\n@@ -62,6 +62,8 @@ cfg_if::cfg_if! {\n     }\n }\n \n+include!(\"payload.rs\");\n+\n extern \"C\" {\n     /// Handler in libstd called when a panic object is dropped outside of\n     /// `catch_unwind`.\n@@ -71,9 +73,9 @@ extern \"C\" {\n mod dwarf;\n \n #[no_mangle]\n-pub unsafe extern \"C\" fn __rust_panic_cleanup(payload: *mut u8) -> *mut (dyn Any + Send + 'static) {\n-    let payload = payload as *mut imp::Payload;\n-    let payload = *(payload);\n+pub unsafe extern \"C\" fn __rust_panic_cleanup(\n+    payload: TryPayload,\n+) -> *mut (dyn Any + Send + 'static) {\n     Box::into_raw(imp::cleanup(payload))\n }\n "}, {"sha": "1234db7da0f0861e0841b4131ce95a78866d1b54", "filename": "src/libpanic_unwind/payload.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/01d04944cefc61cd684e3554e48068926a5f30ab/src%2Flibpanic_unwind%2Fpayload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01d04944cefc61cd684e3554e48068926a5f30ab/src%2Flibpanic_unwind%2Fpayload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Fpayload.rs?ref=01d04944cefc61cd684e3554e48068926a5f30ab", "patch": "@@ -0,0 +1,21 @@\n+// Type definition for the payload argument of the try intrinsic.\n+//\n+// This must be kept in sync with the implementations of the try intrinsic.\n+//\n+// This file is included by both panic runtimes and libstd. It is part of the\n+// panic runtime ABI.\n+cfg_if::cfg_if! {\n+    if #[cfg(target_os = \"emscripten\")] {\n+        type TryPayload = *mut u8;\n+    } else if #[cfg(target_arch = \"wasm32\")] {\n+        type TryPayload = *mut u8;\n+    } else if #[cfg(target_os = \"hermit\")] {\n+        type TryPayload = *mut u8;\n+    } else if #[cfg(all(target_env = \"msvc\", target_arch = \"aarch64\"))] {\n+        type TryPayload = *mut u8;\n+    } else if #[cfg(target_env = \"msvc\")] {\n+        type TryPayload = [u64; 2];\n+    } else {\n+        type TryPayload = *mut u8;\n+    }\n+}"}, {"sha": "da5ee5369e08267924476a77adc88351e0d8f960", "filename": "src/libpanic_unwind/seh.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01d04944cefc61cd684e3554e48068926a5f30ab/src%2Flibpanic_unwind%2Fseh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01d04944cefc61cd684e3554e48068926a5f30ab/src%2Flibpanic_unwind%2Fseh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Fseh.rs?ref=01d04944cefc61cd684e3554e48068926a5f30ab", "patch": "@@ -308,8 +308,6 @@ pub unsafe fn panic(data: Box<dyn Any + Send>) -> u32 {\n     _CxxThrowException(throw_ptr, &mut THROW_INFO as *mut _ as *mut _);\n }\n \n-pub type Payload = [u64; 2];\n-\n pub unsafe fn cleanup(payload: [u64; 2]) -> Box<dyn Any + Send> {\n     mem::transmute(raw::TraitObject { data: payload[0] as *mut _, vtable: payload[1] as *mut _ })\n }"}, {"sha": "38cb4418dd036cd3c8c887d5a80adea341a96e87", "filename": "src/libstd/panicking.rs", "status": "modified", "additions": 6, "deletions": 28, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/01d04944cefc61cd684e3554e48068926a5f30ab/src%2Flibstd%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01d04944cefc61cd684e3554e48068926a5f30ab/src%2Flibstd%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanicking.rs?ref=01d04944cefc61cd684e3554e48068926a5f30ab", "patch": "@@ -28,30 +28,8 @@ use crate::io::set_panic;\n #[cfg(test)]\n use realstd::io::set_panic;\n \n-// This must be kept in sync with the implementations in libpanic_unwind.\n-//\n-// This is *not* checked in anyway; the compiler does not allow us to use a\n-// type/macro/anything from panic_unwind, since we're then linking in the\n-// panic_unwind runtime even during -Cpanic=abort.\n-//\n-// Essentially this must be the type of `imp::Payload` in libpanic_unwind.\n-cfg_if::cfg_if! {\n-    if #[cfg(not(feature = \"panic_unwind\"))] {\n-        type Payload = ();\n-    } else if #[cfg(target_os = \"emscripten\")] {\n-        type Payload = *mut u8;\n-    } else if #[cfg(target_arch = \"wasm32\")] {\n-        type Payload = *mut u8;\n-    } else if #[cfg(target_os = \"hermit\")] {\n-        type Payload = *mut u8;\n-    } else if #[cfg(all(target_env = \"msvc\", target_arch = \"aarch64\"))] {\n-        type Payload = *mut u8;\n-    } else if #[cfg(target_env = \"msvc\")] {\n-        type Payload = [u64; 2];\n-    } else {\n-        type Payload = *mut u8;\n-    }\n-}\n+// Include the definition of UnwindPayload from libpanic_unwind.\n+include!(\"../libpanic_unwind/payload.rs\");\n \n // Binary interface to the panic runtime that the standard library depends on.\n //\n@@ -67,7 +45,7 @@ cfg_if::cfg_if! {\n extern \"C\" {\n     /// The payload ptr here is actually the same as the payload ptr for the try\n     /// intrinsic (i.e., is really `*mut [u64; 2]` or `*mut *mut u8`).\n-    fn __rust_panic_cleanup(payload: *mut u8) -> *mut (dyn Any + Send + 'static);\n+    fn __rust_panic_cleanup(payload: TryPayload) -> *mut (dyn Any + Send + 'static);\n \n     /// `payload` is actually a `*mut &mut dyn BoxMeUp` but that would cause FFI warnings.\n     /// It cannot be `Box<dyn BoxMeUp>` because the other end of this call does not depend\n@@ -297,7 +275,7 @@ pub unsafe fn r#try<R, F: FnOnce() -> R>(f: F) -> Result<R, Box<dyn Any + Send>>\n     // method of calling a catch panic whilst juggling ownership.\n     let mut data = Data { f: ManuallyDrop::new(f) };\n \n-    let mut payload: MaybeUninit<Payload> = MaybeUninit::uninit();\n+    let mut payload: MaybeUninit<TryPayload> = MaybeUninit::uninit();\n \n     let data_ptr = &mut data as *mut _ as *mut u8;\n     let payload_ptr = payload.as_mut_ptr() as *mut _;\n@@ -312,8 +290,8 @@ pub unsafe fn r#try<R, F: FnOnce() -> R>(f: F) -> Result<R, Box<dyn Any + Send>>\n     // optimizer (in most cases this function is not inlined even as a normal,\n     // non-cold function, though, as of the writing of this comment).\n     #[cold]\n-    unsafe fn cleanup(mut payload: Payload) -> Box<dyn Any + Send + 'static> {\n-        let obj = Box::from_raw(__rust_panic_cleanup(&mut payload as *mut _ as *mut u8));\n+    unsafe fn cleanup(payload: TryPayload) -> Box<dyn Any + Send + 'static> {\n+        let obj = Box::from_raw(__rust_panic_cleanup(payload));\n         update_panic_count(-1);\n         obj\n     }"}, {"sha": "44af25f7f8f48aa9561e311aac0b96aee1bb1ce9", "filename": "src/test/ui/no-landing-pads.rs", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/35349abeb33893e9d683e507f819c16063e4797e/src%2Ftest%2Fui%2Fno-landing-pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35349abeb33893e9d683e507f819c16063e4797e/src%2Ftest%2Fui%2Fno-landing-pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno-landing-pads.rs?ref=35349abeb33893e9d683e507f819c16063e4797e", "patch": "@@ -1,24 +0,0 @@\n-// run-pass\n-// compile-flags: -Z no-landing-pads -C codegen-units=1\n-// ignore-emscripten no threads support\n-// ignore-test fails because catch_unwind doesn't work with no-landing-pads\n-\n-use std::thread;\n-\n-static mut HIT: bool = false;\n-\n-struct A;\n-\n-impl Drop for A {\n-    fn drop(&mut self) {\n-        unsafe { HIT = true; }\n-    }\n-}\n-\n-fn main() {\n-    thread::spawn(move|| -> () {\n-        let _a = A;\n-        panic!();\n-    }).join().unwrap_err();\n-    assert!(unsafe { !HIT });\n-}"}]}