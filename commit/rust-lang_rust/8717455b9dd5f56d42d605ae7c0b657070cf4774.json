{"sha": "8717455b9dd5f56d42d605ae7c0b657070cf4774", "node_id": "C_kwDOAAsO6NoAKDg3MTc0NTViOWRkNWY1NmQ0MmQ2MDVhZTdjMGI2NTcwNzBjZjQ3NzQ", "commit": {"author": {"name": "Lukas Markeffsky", "email": "@", "date": "2022-11-11T14:52:49Z"}, "committer": {"name": "Lukas Markeffsky", "email": "@", "date": "2022-11-19T15:47:42Z"}, "message": "fix assembly test on windows", "tree": {"sha": "dd0549ca158f48f108673967de2dc4362ddb7e47", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd0549ca158f48f108673967de2dc4362ddb7e47"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8717455b9dd5f56d42d605ae7c0b657070cf4774", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8717455b9dd5f56d42d605ae7c0b657070cf4774", "html_url": "https://github.com/rust-lang/rust/commit/8717455b9dd5f56d42d605ae7c0b657070cf4774", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8717455b9dd5f56d42d605ae7c0b657070cf4774/comments", "author": null, "committer": null, "parents": [{"sha": "60f352fd7d1b3443a07bbfefb955a4e836749ee6", "url": "https://api.github.com/repos/rust-lang/rust/commits/60f352fd7d1b3443a07bbfefb955a4e836749ee6", "html_url": "https://github.com/rust-lang/rust/commit/60f352fd7d1b3443a07bbfefb955a4e836749ee6"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "e8e6ad5cf112ef377fbc09539aa9323154c637bd", "filename": "src/test/assembly/is_aligned.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8717455b9dd5f56d42d605ae7c0b657070cf4774/src%2Ftest%2Fassembly%2Fis_aligned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8717455b9dd5f56d42d605ae7c0b657070cf4774/src%2Ftest%2Fassembly%2Fis_aligned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fis_aligned.rs?ref=8717455b9dd5f56d42d605ae7c0b657070cf4774", "patch": "@@ -10,9 +10,9 @@\n #![feature(pointer_is_aligned)]\n \n // CHECK-LABEL: is_aligned_to_unchecked\n-// CHECK: decq %rsi\n-// CHECK-NEXT: testq %rdi, %rsi\n-// CHECK-NEXT: sete %al\n+// CHECK: decq\n+// CHECK-NEXT: testq\n+// CHECK-NEXT: sete\n // CHECK-NEXT: retq\n #[no_mangle]\n pub unsafe fn is_aligned_to_unchecked(ptr: *const u8, align: usize) -> bool {\n@@ -23,34 +23,34 @@ pub unsafe fn is_aligned_to_unchecked(ptr: *const u8, align: usize) -> bool {\n }\n \n // CHECK-LABEL: is_aligned_1\n-// CHECK: movb $1, %al\n+// CHECK: movb $1\n // CHECK-NEXT: retq\n #[no_mangle]\n pub fn is_aligned_1(ptr: *const u8) -> bool {\n     ptr.is_aligned()\n }\n \n // CHECK-LABEL: is_aligned_2\n-// CHECK: testb $1, %dil\n-// CHECK-NEXT: sete %al\n+// CHECK: testb $1\n+// CHECK-NEXT: sete\n // CHECK-NEXT: retq\n #[no_mangle]\n pub fn is_aligned_2(ptr: *const u16) -> bool {\n     ptr.is_aligned()\n }\n \n // CHECK-LABEL: is_aligned_4\n-// CHECK: testb $3, %dil\n-// CHECK-NEXT: sete %al\n+// CHECK: testb $3\n+// CHECK-NEXT: sete\n // CHECK-NEXT: retq\n #[no_mangle]\n pub fn is_aligned_4(ptr: *const u32) -> bool {\n     ptr.is_aligned()\n }\n \n // CHECK-LABEL: is_aligned_8\n-// CHECK: testb $7, %dil\n-// CHECK-NEXT: sete %al\n+// CHECK: testb $7\n+// CHECK-NEXT: sete\n // CHECK-NEXT: retq\n #[no_mangle]\n pub fn is_aligned_8(ptr: *const u64) -> bool {"}]}