{"sha": "e3a8f7db479ce6562bfc312f412b65dc4f3c77d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzYThmN2RiNDc5Y2U2NTYyYmZjMzEyZjQxMmI2NWRjNGYzYzc3ZDU=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2019-02-19T17:13:39Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2019-02-20T03:59:10Z"}, "message": "Rollup merge of #58553 - scottmcm:more-ihle, r=Centril\n\nUse more impl header lifetime elision\n\nInspired by seeing explicit lifetimes on these two:\n\n- https://doc.rust-lang.org/nightly/std/slice/struct.Iter.html#impl-FusedIterator\n- https://doc.rust-lang.org/nightly/std/primitive.u32.html#impl-Not\n\nAnd a follow-up to https://github.com/rust-lang/rust/pull/54687, that started using IHLE in libcore.\n\nMost of the changes in here fall into two big categories:\n\n- Removing lifetimes from common traits that can essentially never user a lifetime from an input (particularly `Drop`, `Debug`, and `Clone`)\n\n- Forwarding impls that are only possible because the lifetime doesn't matter (like `impl<R: Read + ?Sized> Read for &mut R`)\n\nI omitted things that seemed like they could be more controversial, like the handful of iterators that have a `Item: 'static` despite the iterator having a lifetime or the `PartialEq` implementations [where the flipped one cannot elide the lifetime](https://internals.rust-lang.org/t/impl-type-parameter-aliases/9403/2?u=scottmcm).\n\nI also removed two lifetimes that turned out to be completely unused; see https://github.com/rust-lang/rust/issues/41960#issuecomment-464557423", "tree": {"sha": "9312a71b7625ef7e88c687e49cdece9451519b2b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9312a71b7625ef7e88c687e49cdece9451519b2b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3a8f7db479ce6562bfc312f412b65dc4f3c77d5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlxs0I4ACgkQ/vbIBR0O\nATytrw/8CMC8XzsjRTbTrcuTWh3rvmgytC7j/WCedv7kAqfCxJJLxf9plxXacEng\niakyeNaJSdEozLcPB3oU7sF5qA7ZEkL2pNAlzOKxbk3csY4pKx3w8eQtT7w/chRz\nzN9QstiXggJ7Dt1pklpd9Q0YXoR9WUz+LI7jmTRcy+y1EYZ08jRdtZcLc6QKGAM8\nbVaKZBFnPIgOaVUx86chpujej0oG9bHRwYqIMCYmmv52MpJOHKx5fzNCijlf4hQU\nLKQde99BjvmXZFvIV4azuCBp9COhqGaewciXzSZv5FbViK5baZZL2QmqwcFvT42p\nTWbPYANXpWkSinGHAf8Tn/yzTPbKO5LsXCJ+yGLofTFpxthhcgQA0erJg2DWzr6R\n5GKVlEbOgoUsQLBcGF0dABNKrSTLP0J3cBLPUkbCs3dUyaC587tn2LoXcGB/9ZKf\nwh1H69apmQz0VYRgSXfhuxRCgou7M7xKHMC2zpirrbdqaRGF1PXlWvmYM2wXZZIx\npAoJ262UOdfyhamL1I5dMhyiO0abupjOYNHjKDBOW/K+uzejOkVydOqimpzgyqf2\nDgAoO5eqEjMZpyXTxJb87dUeApkAud93RNqy7j3NU2SjnCVeOfgFGCYVJ1dWuuP+\nWnWtJgazNLaqw0BelNIjuobUInsmcd/j1j0dZa7eOJ2yXSLsZ/Y=\n=8tUU\n-----END PGP SIGNATURE-----", "payload": "tree 9312a71b7625ef7e88c687e49cdece9451519b2b\nparent ef0aaddf691030874e147ca5ee79332fec0c9566\nparent 3bea2ca49d24606920b3a81811379debc0668992\nauthor kennytm <kennytm@gmail.com> 1550596419 +0800\ncommitter kennytm <kennytm@gmail.com> 1550635150 +0800\n\nRollup merge of #58553 - scottmcm:more-ihle, r=Centril\n\nUse more impl header lifetime elision\n\nInspired by seeing explicit lifetimes on these two:\n\n- https://doc.rust-lang.org/nightly/std/slice/struct.Iter.html#impl-FusedIterator\n- https://doc.rust-lang.org/nightly/std/primitive.u32.html#impl-Not\n\nAnd a follow-up to https://github.com/rust-lang/rust/pull/54687, that started using IHLE in libcore.\n\nMost of the changes in here fall into two big categories:\n\n- Removing lifetimes from common traits that can essentially never user a lifetime from an input (particularly `Drop`, `Debug`, and `Clone`)\n\n- Forwarding impls that are only possible because the lifetime doesn't matter (like `impl<R: Read + ?Sized> Read for &mut R`)\n\nI omitted things that seemed like they could be more controversial, like the handful of iterators that have a `Item: 'static` despite the iterator having a lifetime or the `PartialEq` implementations [where the flipped one cannot elide the lifetime](https://internals.rust-lang.org/t/impl-type-parameter-aliases/9403/2?u=scottmcm).\n\nI also removed two lifetimes that turned out to be completely unused; see https://github.com/rust-lang/rust/issues/41960#issuecomment-464557423\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3a8f7db479ce6562bfc312f412b65dc4f3c77d5", "html_url": "https://github.com/rust-lang/rust/commit/e3a8f7db479ce6562bfc312f412b65dc4f3c77d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3a8f7db479ce6562bfc312f412b65dc4f3c77d5/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef0aaddf691030874e147ca5ee79332fec0c9566", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef0aaddf691030874e147ca5ee79332fec0c9566", "html_url": "https://github.com/rust-lang/rust/commit/ef0aaddf691030874e147ca5ee79332fec0c9566"}, {"sha": "3bea2ca49d24606920b3a81811379debc0668992", "url": "https://api.github.com/repos/rust-lang/rust/commits/3bea2ca49d24606920b3a81811379debc0668992", "html_url": "https://github.com/rust-lang/rust/commit/3bea2ca49d24606920b3a81811379debc0668992"}], "stats": {"total": 438, "additions": 219, "deletions": 219}, "files": [{"sha": "74c80a08b12ab977bdbdf5f8b33d02dc8a4c5432", "filename": "src/liballoc/borrow.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e3a8f7db479ce6562bfc312f412b65dc4f3c77d5/src%2Fliballoc%2Fborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a8f7db479ce6562bfc312f412b65dc4f3c77d5/src%2Fliballoc%2Fborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fborrow.rs?ref=e3a8f7db479ce6562bfc312f412b65dc4f3c77d5", "patch": "@@ -182,8 +182,8 @@ pub enum Cow<'a, B: ?Sized + 'a>\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, B: ?Sized + ToOwned> Clone for Cow<'a, B> {\n-    fn clone(&self) -> Cow<'a, B> {\n+impl<B: ?Sized + ToOwned> Clone for Cow<'_, B> {\n+    fn clone(&self) -> Self {\n         match *self {\n             Borrowed(b) => Borrowed(b),\n             Owned(ref o) => {\n@@ -193,7 +193,7 @@ impl<'a, B: ?Sized + ToOwned> Clone for Cow<'a, B> {\n         }\n     }\n \n-    fn clone_from(&mut self, source: &Cow<'a, B>) {\n+    fn clone_from(&mut self, source: &Self) {\n         if let Owned(ref mut dest) = *self {\n             if let Owned(ref o) = *source {\n                 o.borrow().clone_into(dest);\n@@ -296,11 +296,11 @@ impl<B: ?Sized + ToOwned> Deref for Cow<'_, B> {\n impl<B: ?Sized> Eq for Cow<'_, B> where B: Eq + ToOwned {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, B: ?Sized> Ord for Cow<'a, B>\n+impl<B: ?Sized> Ord for Cow<'_, B>\n     where B: Ord + ToOwned\n {\n     #[inline]\n-    fn cmp(&self, other: &Cow<'a, B>) -> Ordering {\n+    fn cmp(&self, other: &Self) -> Ordering {\n         Ord::cmp(&**self, &**other)\n     }\n }\n@@ -353,18 +353,18 @@ impl<B: ?Sized> fmt::Display for Cow<'_, B>\n }\n \n #[stable(feature = \"default\", since = \"1.11.0\")]\n-impl<'a, B: ?Sized> Default for Cow<'a, B>\n+impl<B: ?Sized> Default for Cow<'_, B>\n     where B: ToOwned,\n           <B as ToOwned>::Owned: Default\n {\n     /// Creates an owned Cow<'a, B> with the default value for the contained owned value.\n-    fn default() -> Cow<'a, B> {\n+    fn default() -> Self {\n         Owned(<B as ToOwned>::Owned::default())\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, B: ?Sized> Hash for Cow<'a, B>\n+impl<B: ?Sized> Hash for Cow<'_, B>\n     where B: Hash + ToOwned\n {\n     #[inline]"}, {"sha": "ccd4e9dbc04837996145511f4fd19a5cf9b9e05b", "filename": "src/liballoc/collections/binary_heap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3a8f7db479ce6562bfc312f412b65dc4f3c77d5/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a8f7db479ce6562bfc312f412b65dc4f3c77d5/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs?ref=e3a8f7db479ce6562bfc312f412b65dc4f3c77d5", "patch": "@@ -947,8 +947,8 @@ impl<T: fmt::Debug> fmt::Debug for Iter<'_, T> {\n \n // FIXME(#26925) Remove in favor of `#[derive(Clone)]`\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T> Clone for Iter<'a, T> {\n-    fn clone(&self) -> Iter<'a, T> {\n+impl<T> Clone for Iter<'_, T> {\n+    fn clone(&self) -> Self {\n         Iter { iter: self.iter.clone() }\n     }\n }"}, {"sha": "250927138b315992ac5667d3f662bab1336bb279", "filename": "src/liballoc/collections/btree/map.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e3a8f7db479ce6562bfc312f412b65dc4f3c77d5/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a8f7db479ce6562bfc312f412b65dc4f3c77d5/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs?ref=e3a8f7db479ce6562bfc312f412b65dc4f3c77d5", "patch": "@@ -1218,8 +1218,8 @@ impl<K, V> ExactSizeIterator for Iter<'_, K, V> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, K, V> Clone for Iter<'a, K, V> {\n-    fn clone(&self) -> Iter<'a, K, V> {\n+impl<K, V> Clone for Iter<'_, K, V> {\n+    fn clone(&self) -> Self {\n         Iter {\n             range: self.range.clone(),\n             length: self.length,\n@@ -1441,8 +1441,8 @@ impl<K, V> ExactSizeIterator for Keys<'_, K, V> {\n impl<K, V> FusedIterator for Keys<'_, K, V> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, K, V> Clone for Keys<'a, K, V> {\n-    fn clone(&self) -> Keys<'a, K, V> {\n+impl<K, V> Clone for Keys<'_, K, V> {\n+    fn clone(&self) -> Self {\n         Keys { inner: self.inner.clone() }\n     }\n }\n@@ -1478,8 +1478,8 @@ impl<K, V> ExactSizeIterator for Values<'_, K, V> {\n impl<K, V> FusedIterator for Values<'_, K, V> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, K, V> Clone for Values<'a, K, V> {\n-    fn clone(&self) -> Values<'a, K, V> {\n+impl<K, V> Clone for Values<'_, K, V> {\n+    fn clone(&self) -> Self {\n         Values { inner: self.inner.clone() }\n     }\n }\n@@ -1606,8 +1606,8 @@ impl<'a, K, V> Range<'a, K, V> {\n impl<K, V> FusedIterator for Range<'_, K, V> {}\n \n #[stable(feature = \"btree_range\", since = \"1.17.0\")]\n-impl<'a, K, V> Clone for Range<'a, K, V> {\n-    fn clone(&self) -> Range<'a, K, V> {\n+impl<K, V> Clone for Range<'_, K, V> {\n+    fn clone(&self) -> Self {\n         Range {\n             front: self.front,\n             back: self.back,"}, {"sha": "2be6455ad59035bb91824c6ea5d77bcaf15cb94c", "filename": "src/liballoc/collections/btree/set.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e3a8f7db479ce6562bfc312f412b65dc4f3c77d5/src%2Fliballoc%2Fcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a8f7db479ce6562bfc312f412b65dc4f3c77d5/src%2Fliballoc%2Fcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fset.rs?ref=e3a8f7db479ce6562bfc312f412b65dc4f3c77d5", "patch": "@@ -907,8 +907,8 @@ impl<T: Debug> Debug for BTreeSet<T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T> Clone for Iter<'a, T> {\n-    fn clone(&self) -> Iter<'a, T> {\n+impl<T> Clone for Iter<'_, T> {\n+    fn clone(&self) -> Self {\n         Iter { iter: self.iter.clone() }\n     }\n }\n@@ -963,8 +963,8 @@ impl<T> ExactSizeIterator for IntoIter<T> {\n impl<T> FusedIterator for IntoIter<T> {}\n \n #[stable(feature = \"btree_range\", since = \"1.17.0\")]\n-impl<'a, T> Clone for Range<'a, T> {\n-    fn clone(&self) -> Range<'a, T> {\n+impl<T> Clone for Range<'_, T> {\n+    fn clone(&self) -> Self {\n         Range { iter: self.iter.clone() }\n     }\n }\n@@ -998,8 +998,8 @@ fn cmp_opt<T: Ord>(x: Option<&T>, y: Option<&T>, short: Ordering, long: Ordering\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T> Clone for Difference<'a, T> {\n-    fn clone(&self) -> Difference<'a, T> {\n+impl<T> Clone for Difference<'_, T> {\n+    fn clone(&self) -> Self {\n         Difference {\n             a: self.a.clone(),\n             b: self.b.clone(),\n@@ -1036,8 +1036,8 @@ impl<'a, T: Ord> Iterator for Difference<'a, T> {\n impl<T: Ord> FusedIterator for Difference<'_, T> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T> Clone for SymmetricDifference<'a, T> {\n-    fn clone(&self) -> SymmetricDifference<'a, T> {\n+impl<T> Clone for SymmetricDifference<'_, T> {\n+    fn clone(&self) -> Self {\n         SymmetricDifference {\n             a: self.a.clone(),\n             b: self.b.clone(),\n@@ -1070,8 +1070,8 @@ impl<'a, T: Ord> Iterator for SymmetricDifference<'a, T> {\n impl<T: Ord> FusedIterator for SymmetricDifference<'_, T> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T> Clone for Intersection<'a, T> {\n-    fn clone(&self) -> Intersection<'a, T> {\n+impl<T> Clone for Intersection<'_, T> {\n+    fn clone(&self) -> Self {\n         Intersection {\n             a: self.a.clone(),\n             b: self.b.clone(),\n@@ -1108,8 +1108,8 @@ impl<'a, T: Ord> Iterator for Intersection<'a, T> {\n impl<T: Ord> FusedIterator for Intersection<'_, T> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T> Clone for Union<'a, T> {\n-    fn clone(&self) -> Union<'a, T> {\n+impl<T> Clone for Union<'_, T> {\n+    fn clone(&self) -> Self {\n         Union {\n             a: self.a.clone(),\n             b: self.b.clone(),"}, {"sha": "c2ee2e63156cf51cafcb8e116f7c5df31a9bc52e", "filename": "src/liballoc/collections/linked_list.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e3a8f7db479ce6562bfc312f412b65dc4f3c77d5/src%2Fliballoc%2Fcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a8f7db479ce6562bfc312f412b65dc4f3c77d5/src%2Fliballoc%2Fcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Flinked_list.rs?ref=e3a8f7db479ce6562bfc312f412b65dc4f3c77d5", "patch": "@@ -1200,16 +1200,16 @@ unsafe impl<T: Send> Send for LinkedList<T> {}\n unsafe impl<T: Sync> Sync for LinkedList<T> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-unsafe impl<'a, T: Sync> Send for Iter<'a, T> {}\n+unsafe impl<T: Sync> Send for Iter<'_, T> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-unsafe impl<'a, T: Sync> Sync for Iter<'a, T> {}\n+unsafe impl<T: Sync> Sync for Iter<'_, T> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-unsafe impl<'a, T: Send> Send for IterMut<'a, T> {}\n+unsafe impl<T: Send> Send for IterMut<'_, T> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-unsafe impl<'a, T: Sync> Sync for IterMut<'a, T> {}\n+unsafe impl<T: Sync> Sync for IterMut<'_, T> {}\n \n #[cfg(test)]\n mod tests {"}, {"sha": "f778c4cbfde52dcc904804e989992797cd8dac62", "filename": "src/liballoc/collections/vec_deque.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e3a8f7db479ce6562bfc312f412b65dc4f3c77d5/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a8f7db479ce6562bfc312f412b65dc4f3c77d5/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fvec_deque.rs?ref=e3a8f7db479ce6562bfc312f412b65dc4f3c77d5", "patch": "@@ -2132,8 +2132,8 @@ impl<T: fmt::Debug> fmt::Debug for Iter<'_, T> {\n \n // FIXME(#26925) Remove in favor of `#[derive(Clone)]`\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T> Clone for Iter<'a, T> {\n-    fn clone(&self) -> Iter<'a, T> {\n+impl<T> Clone for Iter<'_, T> {\n+    fn clone(&self) -> Self {\n         Iter {\n             ring: self.ring,\n             tail: self.tail,\n@@ -2225,7 +2225,7 @@ pub struct IterMut<'a, T: 'a> {\n }\n \n #[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n-impl<'a, T: fmt::Debug> fmt::Debug for IterMut<'_, T> {\n+impl<T: fmt::Debug> fmt::Debug for IterMut<'_, T> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         let (front, back) = RingSlices::ring_slices(&*self.ring, self.head, self.tail);\n         f.debug_tuple(\"IterMut\")"}, {"sha": "a351d482fedde745f56ca5fac725216d775ebfa0", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3a8f7db479ce6562bfc312f412b65dc4f3c77d5/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a8f7db479ce6562bfc312f412b65dc4f3c77d5/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=e3a8f7db479ce6562bfc312f412b65dc4f3c77d5", "patch": "@@ -2455,7 +2455,7 @@ pub struct Drain<'a, T: 'a> {\n }\n \n #[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n-impl<'a, T: 'a + fmt::Debug> fmt::Debug for Drain<'a, T> {\n+impl<T: fmt::Debug> fmt::Debug for Drain<'_, T> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_tuple(\"Drain\")\n          .field(&self.iter.as_slice())"}, {"sha": "7beeffb1661476b86fa51a98dead870ffd54199b", "filename": "src/libcore/future/future.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3a8f7db479ce6562bfc312f412b65dc4f3c77d5/src%2Flibcore%2Ffuture%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a8f7db479ce6562bfc312f412b65dc4f3c77d5/src%2Flibcore%2Ffuture%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffuture%2Ffuture.rs?ref=e3a8f7db479ce6562bfc312f412b65dc4f3c77d5", "patch": "@@ -92,7 +92,7 @@ pub trait Future {\n     fn poll(self: Pin<&mut Self>, waker: &Waker) -> Poll<Self::Output>;\n }\n \n-impl<'a, F: ?Sized + Future + Unpin> Future for &'a mut F {\n+impl<F: ?Sized + Future + Unpin> Future for &mut F {\n     type Output = F::Output;\n \n     fn poll(mut self: Pin<&mut Self>, waker: &Waker) -> Poll<Self::Output> {"}, {"sha": "faca785e488c39cc32f5239cf5fd6f022600a121", "filename": "src/libcore/internal_macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3a8f7db479ce6562bfc312f412b65dc4f3c77d5/src%2Flibcore%2Finternal_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a8f7db479ce6562bfc312f412b65dc4f3c77d5/src%2Flibcore%2Finternal_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Finternal_macros.rs?ref=e3a8f7db479ce6562bfc312f412b65dc4f3c77d5", "patch": "@@ -7,7 +7,7 @@ macro_rules! forward_ref_unop {\n     };\n     (impl $imp:ident, $method:ident for $t:ty, #[$attr:meta]) => {\n         #[$attr]\n-        impl<'a> $imp for &'a $t {\n+        impl $imp for &$t {\n             type Output = <$t as $imp>::Output;\n \n             #[inline]"}, {"sha": "60aed7ce09d7f1c825c4c6512ad3ea58aeef5d4d", "filename": "src/libcore/option.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e3a8f7db479ce6562bfc312f412b65dc4f3c77d5/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a8f7db479ce6562bfc312f412b65dc4f3c77d5/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=e3a8f7db479ce6562bfc312f412b65dc4f3c77d5", "patch": "@@ -874,7 +874,7 @@ impl<T> Option<T> {\n     }\n }\n \n-impl<'a, T: Copy> Option<&'a T> {\n+impl<T: Copy> Option<&T> {\n     /// Maps an `Option<&T>` to an `Option<T>` by copying the contents of the\n     /// option.\n     ///\n@@ -895,7 +895,7 @@ impl<'a, T: Copy> Option<&'a T> {\n     }\n }\n \n-impl<'a, T: Copy> Option<&'a mut T> {\n+impl<T: Copy> Option<&mut T> {\n     /// Maps an `Option<&mut T>` to an `Option<T>` by copying the contents of the\n     /// option.\n     ///\n@@ -916,7 +916,7 @@ impl<'a, T: Copy> Option<&'a mut T> {\n     }\n }\n \n-impl<'a, T: Clone> Option<&'a T> {\n+impl<T: Clone> Option<&T> {\n     /// Maps an `Option<&T>` to an `Option<T>` by cloning the contents of the\n     /// option.\n     ///\n@@ -935,7 +935,7 @@ impl<'a, T: Clone> Option<&'a T> {\n     }\n }\n \n-impl<'a, T: Clone> Option<&'a mut T> {\n+impl<T: Clone> Option<&mut T> {\n     /// Maps an `Option<&mut T>` to an `Option<T>` by cloning the contents of the\n     /// option.\n     ///"}, {"sha": "d89443662df870349841b6207b839101940bfa95", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e3a8f7db479ce6562bfc312f412b65dc4f3c77d5/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a8f7db479ce6562bfc312f412b65dc4f3c77d5/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=e3a8f7db479ce6562bfc312f412b65dc4f3c77d5", "patch": "@@ -2903,7 +2903,7 @@ macro_rules! iterator {\n         }\n \n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl<'a, T> ExactSizeIterator for $name<'a, T> {\n+        impl<T> ExactSizeIterator for $name<'_, T> {\n             #[inline(always)]\n             fn len(&self) -> usize {\n                 len!(self)\n@@ -3098,10 +3098,10 @@ macro_rules! iterator {\n         }\n \n         #[stable(feature = \"fused\", since = \"1.26.0\")]\n-        impl<'a, T> FusedIterator for $name<'a, T> {}\n+        impl<T> FusedIterator for $name<'_, T> {}\n \n         #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n-        unsafe impl<'a, T> TrustedLen for $name<'a, T> {}\n+        unsafe impl<T> TrustedLen for $name<'_, T> {}\n     }\n }\n \n@@ -4365,8 +4365,8 @@ pub struct RChunks<'a, T:'a> {\n \n // FIXME(#26925) Remove in favor of `#[derive(Clone)]`\n #[stable(feature = \"rchunks\", since = \"1.31.0\")]\n-impl<'a, T> Clone for RChunks<'a, T> {\n-    fn clone(&self) -> RChunks<'a, T> {\n+impl<T> Clone for RChunks<'_, T> {\n+    fn clone(&self) -> Self {\n         RChunks {\n             v: self.v,\n             chunk_size: self.chunk_size,\n@@ -4455,13 +4455,13 @@ impl<'a, T> DoubleEndedIterator for RChunks<'a, T> {\n }\n \n #[stable(feature = \"rchunks\", since = \"1.31.0\")]\n-impl<'a, T> ExactSizeIterator for RChunks<'a, T> {}\n+impl<T> ExactSizeIterator for RChunks<'_, T> {}\n \n #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n-unsafe impl<'a, T> TrustedLen for RChunks<'a, T> {}\n+unsafe impl<T> TrustedLen for RChunks<'_, T> {}\n \n #[stable(feature = \"rchunks\", since = \"1.31.0\")]\n-impl<'a, T> FusedIterator for RChunks<'a, T> {}\n+impl<T> FusedIterator for RChunks<'_, T> {}\n \n #[doc(hidden)]\n #[stable(feature = \"rchunks\", since = \"1.31.0\")]\n@@ -4580,13 +4580,13 @@ impl<'a, T> DoubleEndedIterator for RChunksMut<'a, T> {\n }\n \n #[stable(feature = \"rchunks\", since = \"1.31.0\")]\n-impl<'a, T> ExactSizeIterator for RChunksMut<'a, T> {}\n+impl<T> ExactSizeIterator for RChunksMut<'_, T> {}\n \n #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n-unsafe impl<'a, T> TrustedLen for RChunksMut<'a, T> {}\n+unsafe impl<T> TrustedLen for RChunksMut<'_, T> {}\n \n #[stable(feature = \"rchunks\", since = \"1.31.0\")]\n-impl<'a, T> FusedIterator for RChunksMut<'a, T> {}\n+impl<T> FusedIterator for RChunksMut<'_, T> {}\n \n #[doc(hidden)]\n #[stable(feature = \"rchunks\", since = \"1.31.0\")]\n@@ -4711,10 +4711,10 @@ impl<'a, T> ExactSizeIterator for RChunksExact<'a, T> {\n }\n \n #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n-unsafe impl<'a, T> TrustedLen for RChunksExact<'a, T> {}\n+unsafe impl<T> TrustedLen for RChunksExact<'_, T> {}\n \n #[stable(feature = \"rchunks\", since = \"1.31.0\")]\n-impl<'a, T> FusedIterator for RChunksExact<'a, T> {}\n+impl<T> FusedIterator for RChunksExact<'_, T> {}\n \n #[doc(hidden)]\n #[stable(feature = \"rchunks\", since = \"1.31.0\")]\n@@ -4822,17 +4822,17 @@ impl<'a, T> DoubleEndedIterator for RChunksExactMut<'a, T> {\n }\n \n #[stable(feature = \"rchunks\", since = \"1.31.0\")]\n-impl<'a, T> ExactSizeIterator for RChunksExactMut<'a, T> {\n+impl<T> ExactSizeIterator for RChunksExactMut<'_, T> {\n     fn is_empty(&self) -> bool {\n         self.v.is_empty()\n     }\n }\n \n #[unstable(feature = \"trusted_len\", issue = \"37572\")]\n-unsafe impl<'a, T> TrustedLen for RChunksExactMut<'a, T> {}\n+unsafe impl<T> TrustedLen for RChunksExactMut<'_, T> {}\n \n #[stable(feature = \"rchunks\", since = \"1.31.0\")]\n-impl<'a, T> FusedIterator for RChunksExactMut<'a, T> {}\n+impl<T> FusedIterator for RChunksExactMut<'_, T> {}\n \n #[doc(hidden)]\n #[stable(feature = \"rchunks\", since = \"1.31.0\")]"}, {"sha": "8b51d8465141afbd0c1b898e1358086217460463", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3a8f7db479ce6562bfc312f412b65dc4f3c77d5/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a8f7db479ce6562bfc312f412b65dc4f3c77d5/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=e3a8f7db479ce6562bfc312f412b65dc4f3c77d5", "patch": "@@ -823,7 +823,7 @@ impl FusedIterator for Bytes<'_> {}\n unsafe impl TrustedLen for Bytes<'_> {}\n \n #[doc(hidden)]\n-unsafe impl<'a> TrustedRandomAccess for Bytes<'a> {\n+unsafe impl TrustedRandomAccess for Bytes<'_> {\n     unsafe fn get_unchecked(&mut self, i: usize) -> u8 {\n         self.0.get_unchecked(i)\n     }"}, {"sha": "a82b9498074c2d412786d99e486002a20ab77e93", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 33, "deletions": 33, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/e3a8f7db479ce6562bfc312f412b65dc4f3c77d5/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a8f7db479ce6562bfc312f412b65dc4f3c77d5/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=e3a8f7db479ce6562bfc312f412b65dc4f3c77d5", "patch": "@@ -1641,7 +1641,7 @@ impl<K, V, S> Default for HashMap<K, V, S>\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, K, Q: ?Sized, V, S> Index<&'a Q> for HashMap<K, V, S>\n+impl<K, Q: ?Sized, V, S> Index<&Q> for HashMap<K, V, S>\n     where K: Eq + Hash + Borrow<Q>,\n           Q: Eq + Hash,\n           S: BuildHasher\n@@ -1673,14 +1673,14 @@ pub struct Iter<'a, K: 'a, V: 'a> {\n \n // FIXME(#26925) Remove in favor of `#[derive(Clone)]`\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, K, V> Clone for Iter<'a, K, V> {\n-    fn clone(&self) -> Iter<'a, K, V> {\n+impl<K, V> Clone for Iter<'_, K, V> {\n+    fn clone(&self) -> Self {\n         Iter { inner: self.inner.clone() }\n     }\n }\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n-impl<'a, K: Debug, V: Debug> fmt::Debug for Iter<'a, K, V> {\n+impl<K: Debug, V: Debug> fmt::Debug for Iter<'_, K, V> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.debug_list()\n             .entries(self.clone())\n@@ -1726,14 +1726,14 @@ pub struct Keys<'a, K: 'a, V: 'a> {\n \n // FIXME(#26925) Remove in favor of `#[derive(Clone)]`\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, K, V> Clone for Keys<'a, K, V> {\n-    fn clone(&self) -> Keys<'a, K, V> {\n+impl<K, V> Clone for Keys<'_, K, V> {\n+    fn clone(&self) -> Self {\n         Keys { inner: self.inner.clone() }\n     }\n }\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n-impl<'a, K: Debug, V> fmt::Debug for Keys<'a, K, V> {\n+impl<K: Debug, V> fmt::Debug for Keys<'_, K, V> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.debug_list()\n             .entries(self.clone())\n@@ -1755,14 +1755,14 @@ pub struct Values<'a, K: 'a, V: 'a> {\n \n // FIXME(#26925) Remove in favor of `#[derive(Clone)]`\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, K, V> Clone for Values<'a, K, V> {\n-    fn clone(&self) -> Values<'a, K, V> {\n+impl<K, V> Clone for Values<'_, K, V> {\n+    fn clone(&self) -> Self {\n         Values { inner: self.inner.clone() }\n     }\n }\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n-impl<'a, K, V: Debug> fmt::Debug for Values<'a, K, V> {\n+impl<K, V: Debug> fmt::Debug for Values<'_, K, V> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.debug_list()\n             .entries(self.clone())\n@@ -2241,15 +2241,15 @@ impl<'a, K, V, S> RawVacantEntryMut<'a, K, V, S> {\n }\n \n #[unstable(feature = \"hash_raw_entry\", issue = \"56167\")]\n-impl<'a, K, V, S> Debug for RawEntryBuilderMut<'a, K, V, S> {\n+impl<K, V, S> Debug for RawEntryBuilderMut<'_, K, V, S> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.debug_struct(\"RawEntryBuilder\")\n          .finish()\n     }\n }\n \n #[unstable(feature = \"hash_raw_entry\", issue = \"56167\")]\n-impl<'a, K: Debug, V: Debug, S> Debug for RawEntryMut<'a, K, V, S> {\n+impl<K: Debug, V: Debug, S> Debug for RawEntryMut<'_, K, V, S> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n             RawEntryMut::Vacant(ref v) => {\n@@ -2267,7 +2267,7 @@ impl<'a, K: Debug, V: Debug, S> Debug for RawEntryMut<'a, K, V, S> {\n }\n \n #[unstable(feature = \"hash_raw_entry\", issue = \"56167\")]\n-impl<'a, K: Debug, V: Debug> Debug for RawOccupiedEntryMut<'a, K, V> {\n+impl<K: Debug, V: Debug> Debug for RawOccupiedEntryMut<'_, K, V> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.debug_struct(\"RawOccupiedEntryMut\")\n          .field(\"key\", self.key())\n@@ -2277,15 +2277,15 @@ impl<'a, K: Debug, V: Debug> Debug for RawOccupiedEntryMut<'a, K, V> {\n }\n \n #[unstable(feature = \"hash_raw_entry\", issue = \"56167\")]\n-impl<'a, K, V, S> Debug for RawVacantEntryMut<'a, K, V, S> {\n+impl<K, V, S> Debug for RawVacantEntryMut<'_, K, V, S> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.debug_struct(\"RawVacantEntryMut\")\n          .finish()\n     }\n }\n \n #[unstable(feature = \"hash_raw_entry\", issue = \"56167\")]\n-impl<'a, K, V, S> Debug for RawEntryBuilder<'a, K, V, S> {\n+impl<K, V, S> Debug for RawEntryBuilder<'_, K, V, S> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.debug_struct(\"RawEntryBuilder\")\n          .finish()\n@@ -2312,7 +2312,7 @@ pub enum Entry<'a, K: 'a, V: 'a> {\n }\n \n #[stable(feature= \"debug_hash_map\", since = \"1.12.0\")]\n-impl<'a, K: 'a + Debug, V: 'a + Debug> Debug for Entry<'a, K, V> {\n+impl<K: Debug, V: Debug> Debug for Entry<'_, K, V> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n             Vacant(ref v) => {\n@@ -2340,7 +2340,7 @@ pub struct OccupiedEntry<'a, K: 'a, V: 'a> {\n }\n \n #[stable(feature= \"debug_hash_map\", since = \"1.12.0\")]\n-impl<'a, K: 'a + Debug, V: 'a + Debug> Debug for OccupiedEntry<'a, K, V> {\n+impl<K: Debug, V: Debug> Debug for OccupiedEntry<'_, K, V> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.debug_struct(\"OccupiedEntry\")\n             .field(\"key\", self.key())\n@@ -2361,7 +2361,7 @@ pub struct VacantEntry<'a, K: 'a, V: 'a> {\n }\n \n #[stable(feature= \"debug_hash_map\", since = \"1.12.0\")]\n-impl<'a, K: 'a + Debug, V: 'a> Debug for VacantEntry<'a, K, V> {\n+impl<K: Debug, V> Debug for VacantEntry<'_, K, V> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.debug_tuple(\"VacantEntry\")\n             .field(self.key())\n@@ -2448,15 +2448,15 @@ impl<'a, K, V> Iterator for Iter<'a, K, V> {\n     }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, K, V> ExactSizeIterator for Iter<'a, K, V> {\n+impl<K, V> ExactSizeIterator for Iter<'_, K, V> {\n     #[inline]\n     fn len(&self) -> usize {\n         self.inner.len()\n     }\n }\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n-impl<'a, K, V> FusedIterator for Iter<'a, K, V> {}\n+impl<K, V> FusedIterator for Iter<'_, K, V> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, K, V> Iterator for IterMut<'a, K, V> {\n@@ -2472,17 +2472,17 @@ impl<'a, K, V> Iterator for IterMut<'a, K, V> {\n     }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, K, V> ExactSizeIterator for IterMut<'a, K, V> {\n+impl<K, V> ExactSizeIterator for IterMut<'_, K, V> {\n     #[inline]\n     fn len(&self) -> usize {\n         self.inner.len()\n     }\n }\n #[stable(feature = \"fused\", since = \"1.26.0\")]\n-impl<'a, K, V> FusedIterator for IterMut<'a, K, V> {}\n+impl<K, V> FusedIterator for IterMut<'_, K, V> {}\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n-impl<'a, K, V> fmt::Debug for IterMut<'a, K, V>\n+impl<K, V> fmt::Debug for IterMut<'_, K, V>\n     where K: fmt::Debug,\n           V: fmt::Debug,\n {\n@@ -2539,14 +2539,14 @@ impl<'a, K, V> Iterator for Keys<'a, K, V> {\n     }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, K, V> ExactSizeIterator for Keys<'a, K, V> {\n+impl<K, V> ExactSizeIterator for Keys<'_, K, V> {\n     #[inline]\n     fn len(&self) -> usize {\n         self.inner.len()\n     }\n }\n #[stable(feature = \"fused\", since = \"1.26.0\")]\n-impl<'a, K, V> FusedIterator for Keys<'a, K, V> {}\n+impl<K, V> FusedIterator for Keys<'_, K, V> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, K, V> Iterator for Values<'a, K, V> {\n@@ -2562,14 +2562,14 @@ impl<'a, K, V> Iterator for Values<'a, K, V> {\n     }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, K, V> ExactSizeIterator for Values<'a, K, V> {\n+impl<K, V> ExactSizeIterator for Values<'_, K, V> {\n     #[inline]\n     fn len(&self) -> usize {\n         self.inner.len()\n     }\n }\n #[stable(feature = \"fused\", since = \"1.26.0\")]\n-impl<'a, K, V> FusedIterator for Values<'a, K, V> {}\n+impl<K, V> FusedIterator for Values<'_, K, V> {}\n \n #[stable(feature = \"map_values_mut\", since = \"1.10.0\")]\n impl<'a, K, V> Iterator for ValuesMut<'a, K, V> {\n@@ -2585,17 +2585,17 @@ impl<'a, K, V> Iterator for ValuesMut<'a, K, V> {\n     }\n }\n #[stable(feature = \"map_values_mut\", since = \"1.10.0\")]\n-impl<'a, K, V> ExactSizeIterator for ValuesMut<'a, K, V> {\n+impl<K, V> ExactSizeIterator for ValuesMut<'_, K, V> {\n     #[inline]\n     fn len(&self) -> usize {\n         self.inner.len()\n     }\n }\n #[stable(feature = \"fused\", since = \"1.26.0\")]\n-impl<'a, K, V> FusedIterator for ValuesMut<'a, K, V> {}\n+impl<K, V> FusedIterator for ValuesMut<'_, K, V> {}\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n-impl<'a, K, V> fmt::Debug for ValuesMut<'a, K, V>\n+impl<K, V> fmt::Debug for ValuesMut<'_, K, V>\n     where K: fmt::Debug,\n           V: fmt::Debug,\n {\n@@ -2620,17 +2620,17 @@ impl<'a, K, V> Iterator for Drain<'a, K, V> {\n     }\n }\n #[stable(feature = \"drain\", since = \"1.6.0\")]\n-impl<'a, K, V> ExactSizeIterator for Drain<'a, K, V> {\n+impl<K, V> ExactSizeIterator for Drain<'_, K, V> {\n     #[inline]\n     fn len(&self) -> usize {\n         self.inner.len()\n     }\n }\n #[stable(feature = \"fused\", since = \"1.26.0\")]\n-impl<'a, K, V> FusedIterator for Drain<'a, K, V> {}\n+impl<K, V> FusedIterator for Drain<'_, K, V> {}\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n-impl<'a, K, V> fmt::Debug for Drain<'a, K, V>\n+impl<K, V> fmt::Debug for Drain<'_, K, V>\n     where K: fmt::Debug,\n           V: fmt::Debug,\n {"}, {"sha": "bfd36a845636321cf0a64a9e2ebdc45cf33b6b39", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/e3a8f7db479ce6562bfc312f412b65dc4f3c77d5/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a8f7db479ce6562bfc312f412b65dc4f3c77d5/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=e3a8f7db479ce6562bfc312f412b65dc4f3c77d5", "patch": "@@ -1112,8 +1112,8 @@ impl<T, S> IntoIterator for HashSet<T, S>\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, K> Clone for Iter<'a, K> {\n-    fn clone(&self) -> Iter<'a, K> {\n+impl<K> Clone for Iter<'_, K> {\n+    fn clone(&self) -> Self {\n         Iter { iter: self.iter.clone() }\n     }\n }\n@@ -1129,16 +1129,16 @@ impl<'a, K> Iterator for Iter<'a, K> {\n     }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, K> ExactSizeIterator for Iter<'a, K> {\n+impl<K> ExactSizeIterator for Iter<'_, K> {\n     fn len(&self) -> usize {\n         self.iter.len()\n     }\n }\n #[stable(feature = \"fused\", since = \"1.26.0\")]\n-impl<'a, K> FusedIterator for Iter<'a, K> {}\n+impl<K> FusedIterator for Iter<'_, K> {}\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n-impl<'a, K: fmt::Debug> fmt::Debug for Iter<'a, K> {\n+impl<K: fmt::Debug> fmt::Debug for Iter<'_, K> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.debug_list().entries(self.clone()).finish()\n     }\n@@ -1187,16 +1187,16 @@ impl<'a, K> Iterator for Drain<'a, K> {\n     }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, K> ExactSizeIterator for Drain<'a, K> {\n+impl<K> ExactSizeIterator for Drain<'_, K> {\n     fn len(&self) -> usize {\n         self.iter.len()\n     }\n }\n #[stable(feature = \"fused\", since = \"1.26.0\")]\n-impl<'a, K> FusedIterator for Drain<'a, K> {}\n+impl<K> FusedIterator for Drain<'_, K> {}\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n-impl<'a, K: fmt::Debug> fmt::Debug for Drain<'a, K> {\n+impl<K: fmt::Debug> fmt::Debug for Drain<'_, K> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         let entries_iter = self.iter\n             .inner\n@@ -1207,8 +1207,8 @@ impl<'a, K: fmt::Debug> fmt::Debug for Drain<'a, K> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T, S> Clone for Intersection<'a, T, S> {\n-    fn clone(&self) -> Intersection<'a, T, S> {\n+impl<T, S> Clone for Intersection<'_, T, S> {\n+    fn clone(&self) -> Self {\n         Intersection { iter: self.iter.clone(), ..*self }\n     }\n }\n@@ -1236,7 +1236,7 @@ impl<'a, T, S> Iterator for Intersection<'a, T, S>\n }\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n-impl<'a, T, S> fmt::Debug for Intersection<'a, T, S>\n+impl<T, S> fmt::Debug for Intersection<'_, T, S>\n     where T: fmt::Debug + Eq + Hash,\n           S: BuildHasher\n {\n@@ -1246,15 +1246,15 @@ impl<'a, T, S> fmt::Debug for Intersection<'a, T, S>\n }\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n-impl<'a, T, S> FusedIterator for Intersection<'a, T, S>\n+impl<T, S> FusedIterator for Intersection<'_, T, S>\n     where T: Eq + Hash,\n           S: BuildHasher\n {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T, S> Clone for Difference<'a, T, S> {\n-    fn clone(&self) -> Difference<'a, T, S> {\n+impl<T, S> Clone for Difference<'_, T, S> {\n+    fn clone(&self) -> Self {\n         Difference { iter: self.iter.clone(), ..*self }\n     }\n }\n@@ -1282,14 +1282,14 @@ impl<'a, T, S> Iterator for Difference<'a, T, S>\n }\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n-impl<'a, T, S> FusedIterator for Difference<'a, T, S>\n+impl<T, S> FusedIterator for Difference<'_, T, S>\n     where T: Eq + Hash,\n           S: BuildHasher\n {\n }\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n-impl<'a, T, S> fmt::Debug for Difference<'a, T, S>\n+impl<T, S> fmt::Debug for Difference<'_, T, S>\n     where T: fmt::Debug + Eq + Hash,\n           S: BuildHasher\n {\n@@ -1299,8 +1299,8 @@ impl<'a, T, S> fmt::Debug for Difference<'a, T, S>\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T, S> Clone for SymmetricDifference<'a, T, S> {\n-    fn clone(&self) -> SymmetricDifference<'a, T, S> {\n+impl<T, S> Clone for SymmetricDifference<'_, T, S> {\n+    fn clone(&self) -> Self {\n         SymmetricDifference { iter: self.iter.clone() }\n     }\n }\n@@ -1321,14 +1321,14 @@ impl<'a, T, S> Iterator for SymmetricDifference<'a, T, S>\n }\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n-impl<'a, T, S> FusedIterator for SymmetricDifference<'a, T, S>\n+impl<T, S> FusedIterator for SymmetricDifference<'_, T, S>\n     where T: Eq + Hash,\n           S: BuildHasher\n {\n }\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n-impl<'a, T, S> fmt::Debug for SymmetricDifference<'a, T, S>\n+impl<T, S> fmt::Debug for SymmetricDifference<'_, T, S>\n     where T: fmt::Debug + Eq + Hash,\n           S: BuildHasher\n {\n@@ -1338,21 +1338,21 @@ impl<'a, T, S> fmt::Debug for SymmetricDifference<'a, T, S>\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T, S> Clone for Union<'a, T, S> {\n-    fn clone(&self) -> Union<'a, T, S> {\n+impl<T, S> Clone for Union<'_, T, S> {\n+    fn clone(&self) -> Self {\n         Union { iter: self.iter.clone() }\n     }\n }\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n-impl<'a, T, S> FusedIterator for Union<'a, T, S>\n+impl<T, S> FusedIterator for Union<'_, T, S>\n     where T: Eq + Hash,\n           S: BuildHasher\n {\n }\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n-impl<'a, T, S> fmt::Debug for Union<'a, T, S>\n+impl<T, S> fmt::Debug for Union<'_, T, S>\n     where T: fmt::Debug + Eq + Hash,\n           S: BuildHasher\n {"}, {"sha": "865431252acf63ad0895c593b8bbc47a3b60e0a6", "filename": "src/libstd/collections/hash/table.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e3a8f7db479ce6562bfc312f412b65dc4f3c77d5/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a8f7db479ce6562bfc312f412b65dc4f3c77d5/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs?ref=e3a8f7db479ce6562bfc312f412b65dc4f3c77d5", "patch": "@@ -296,7 +296,7 @@ pub trait Put<K, V> {\n }\n \n \n-impl<'t, K, V> Put<K, V> for &'t mut RawTable<K, V> {\n+impl<K, V> Put<K, V> for &mut RawTable<K, V> {\n     unsafe fn borrow_table_mut(&mut self) -> &mut RawTable<K, V> {\n         *self\n     }\n@@ -865,8 +865,8 @@ struct RawBuckets<'a, K, V> {\n }\n \n // FIXME(#26925) Remove in favor of `#[derive(Clone)]`\n-impl<'a, K, V> Clone for RawBuckets<'a, K, V> {\n-    fn clone(&self) -> RawBuckets<'a, K, V> {\n+impl<K, V> Clone for RawBuckets<'_, K, V> {\n+    fn clone(&self) -> Self {\n         RawBuckets {\n             raw: self.raw,\n             elems_left: self.elems_left,\n@@ -901,7 +901,7 @@ impl<'a, K, V> Iterator for RawBuckets<'a, K, V> {\n     }\n }\n \n-impl<'a, K, V> ExactSizeIterator for RawBuckets<'a, K, V> {\n+impl<K, V> ExactSizeIterator for RawBuckets<'_, K, V> {\n     fn len(&self) -> usize {\n         self.elems_left\n     }\n@@ -912,12 +912,12 @@ pub struct Iter<'a, K: 'a, V: 'a> {\n     iter: RawBuckets<'a, K, V>,\n }\n \n-unsafe impl<'a, K: Sync, V: Sync> Sync for Iter<'a, K, V> {}\n-unsafe impl<'a, K: Sync, V: Sync> Send for Iter<'a, K, V> {}\n+unsafe impl<K: Sync, V: Sync> Sync for Iter<'_, K, V> {}\n+unsafe impl<K: Sync, V: Sync> Send for Iter<'_, K, V> {}\n \n // FIXME(#26925) Remove in favor of `#[derive(Clone)]`\n-impl<'a, K, V> Clone for Iter<'a, K, V> {\n-    fn clone(&self) -> Iter<'a, K, V> {\n+impl<K, V> Clone for Iter<'_, K, V> {\n+    fn clone(&self) -> Self {\n         Iter {\n             iter: self.iter.clone(),\n         }\n@@ -931,10 +931,10 @@ pub struct IterMut<'a, K: 'a, V: 'a> {\n     _marker: marker::PhantomData<&'a mut V>,\n }\n \n-unsafe impl<'a, K: Sync, V: Sync> Sync for IterMut<'a, K, V> {}\n+unsafe impl<K: Sync, V: Sync> Sync for IterMut<'_, K, V> {}\n // Both K: Sync and K: Send are correct for IterMut's Send impl,\n // but Send is the more useful bound\n-unsafe impl<'a, K: Send, V: Send> Send for IterMut<'a, K, V> {}\n+unsafe impl<K: Send, V: Send> Send for IterMut<'_, K, V> {}\n \n impl<'a, K: 'a, V: 'a> IterMut<'a, K, V> {\n     pub fn iter(&self) -> Iter<K, V> {\n@@ -968,8 +968,8 @@ pub struct Drain<'a, K: 'a, V: 'a> {\n     marker: marker::PhantomData<&'a RawTable<K, V>>,\n }\n \n-unsafe impl<'a, K: Sync, V: Sync> Sync for Drain<'a, K, V> {}\n-unsafe impl<'a, K: Send, V: Send> Send for Drain<'a, K, V> {}\n+unsafe impl<K: Sync, V: Sync> Sync for Drain<'_, K, V> {}\n+unsafe impl<K: Send, V: Send> Send for Drain<'_, K, V> {}\n \n impl<'a, K, V> Drain<'a, K, V> {\n     pub fn iter(&self) -> Iter<K, V> {\n@@ -994,7 +994,7 @@ impl<'a, K, V> Iterator for Iter<'a, K, V> {\n     }\n }\n \n-impl<'a, K, V> ExactSizeIterator for Iter<'a, K, V> {\n+impl<K, V> ExactSizeIterator for Iter<'_, K, V> {\n     fn len(&self) -> usize {\n         self.iter.len()\n     }\n@@ -1015,7 +1015,7 @@ impl<'a, K, V> Iterator for IterMut<'a, K, V> {\n     }\n }\n \n-impl<'a, K, V> ExactSizeIterator for IterMut<'a, K, V> {\n+impl<K, V> ExactSizeIterator for IterMut<'_, K, V> {\n     fn len(&self) -> usize {\n         self.iter.len()\n     }\n@@ -1064,13 +1064,13 @@ impl<'a, K, V> Iterator for Drain<'a, K, V> {\n     }\n }\n \n-impl<'a, K, V> ExactSizeIterator for Drain<'a, K, V> {\n+impl<K, V> ExactSizeIterator for Drain<'_, K, V> {\n     fn len(&self) -> usize {\n         self.iter.len()\n     }\n }\n \n-impl<'a, K: 'a, V: 'a> Drop for Drain<'a, K, V> {\n+impl<K, V> Drop for Drain<'_, K, V> {\n     fn drop(&mut self) {\n         self.for_each(drop);\n     }"}, {"sha": "543973ab991dffba8eb5394aff3ee92cd0c41228", "filename": "src/libstd/env.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3a8f7db479ce6562bfc312f412b65dc4f3c77d5/src%2Flibstd%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a8f7db479ce6562bfc312f412b65dc4f3c77d5/src%2Flibstd%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fenv.rs?ref=e3a8f7db479ce6562bfc312f412b65dc4f3c77d5", "patch": "@@ -399,7 +399,7 @@ impl<'a> Iterator for SplitPaths<'a> {\n }\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n-impl<'a> fmt::Debug for SplitPaths<'a> {\n+impl fmt::Debug for SplitPaths<'_> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.pad(\"SplitPaths { .. }\")\n     }"}, {"sha": "0ef72242827823316e7b11c9f801e5ff6d1fcc77", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3a8f7db479ce6562bfc312f412b65dc4f3c77d5/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a8f7db479ce6562bfc312f412b65dc4f3c77d5/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=e3a8f7db479ce6562bfc312f412b65dc4f3c77d5", "patch": "@@ -659,8 +659,8 @@ impl fmt::Debug for CStr {\n }\n \n #[stable(feature = \"cstr_default\", since = \"1.10.0\")]\n-impl<'a> Default for &'a CStr {\n-    fn default() -> &'a CStr {\n+impl Default for &CStr {\n+    fn default() -> Self {\n         const SLICE: &[c_char] = &[0];\n         unsafe { CStr::from_ptr(SLICE.as_ptr()) }\n     }"}, {"sha": "81433832ffc7e4b44a9ffce06fb913b489f15b2b", "filename": "src/libstd/ffi/os_str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3a8f7db479ce6562bfc312f412b65dc4f3c77d5/src%2Flibstd%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a8f7db479ce6562bfc312f412b65dc4f3c77d5/src%2Flibstd%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fos_str.rs?ref=e3a8f7db479ce6562bfc312f412b65dc4f3c77d5", "patch": "@@ -778,10 +778,10 @@ impl Default for Box<OsStr> {\n }\n \n #[stable(feature = \"osstring_default\", since = \"1.9.0\")]\n-impl<'a> Default for &'a OsStr {\n+impl Default for &OsStr {\n     /// Creates an empty `OsStr`.\n     #[inline]\n-    fn default() -> &'a OsStr {\n+    fn default() -> Self {\n         OsStr::new(\"\")\n     }\n }"}, {"sha": "79b5686faac601a4a55493ec2ae283f1157589b1", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e3a8f7db479ce6562bfc312f412b65dc4f3c77d5/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a8f7db479ce6562bfc312f412b65dc4f3c77d5/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=e3a8f7db479ce6562bfc312f412b65dc4f3c77d5", "patch": "@@ -627,7 +627,7 @@ impl Seek for File {\n     }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a> Read for &'a File {\n+impl Read for &File {\n     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n         self.inner.read(buf)\n     }\n@@ -638,14 +638,14 @@ impl<'a> Read for &'a File {\n     }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a> Write for &'a File {\n+impl Write for &File {\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n         self.inner.write(buf)\n     }\n     fn flush(&mut self) -> io::Result<()> { self.inner.flush() }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a> Seek for &'a File {\n+impl Seek for &File {\n     fn seek(&mut self, pos: SeekFrom) -> io::Result<u64> {\n         self.inner.seek(pos)\n     }"}, {"sha": "0c1d155a91688c903ab182454b6555ccdf46b1d8", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3a8f7db479ce6562bfc312f412b65dc4f3c77d5/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a8f7db479ce6562bfc312f412b65dc4f3c77d5/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=e3a8f7db479ce6562bfc312f412b65dc4f3c77d5", "patch": "@@ -1174,7 +1174,7 @@ mod tests {\n         // Issue #32085\n         struct FailFlushWriter<'a>(&'a mut Vec<u8>);\n \n-        impl<'a> Write for FailFlushWriter<'a> {\n+        impl Write for FailFlushWriter<'_> {\n             fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n                 self.0.extend_from_slice(buf);\n                 Ok(buf.len())"}, {"sha": "758d856867291835ad671db1802a65e376261508", "filename": "src/libstd/io/cursor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3a8f7db479ce6562bfc312f412b65dc4f3c77d5/src%2Flibstd%2Fio%2Fcursor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a8f7db479ce6562bfc312f412b65dc4f3c77d5/src%2Flibstd%2Fio%2Fcursor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fcursor.rs?ref=e3a8f7db479ce6562bfc312f412b65dc4f3c77d5", "patch": "@@ -279,7 +279,7 @@ fn vec_write(pos_mut: &mut u64, vec: &mut Vec<u8>, buf: &[u8]) -> io::Result<usi\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a> Write for Cursor<&'a mut [u8]> {\n+impl Write for Cursor<&mut [u8]> {\n     #[inline]\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n         slice_write(&mut self.pos, self.inner, buf)\n@@ -288,7 +288,7 @@ impl<'a> Write for Cursor<&'a mut [u8]> {\n }\n \n #[stable(feature = \"cursor_mut_vec\", since = \"1.25.0\")]\n-impl<'a> Write for Cursor<&'a mut Vec<u8>> {\n+impl Write for Cursor<&mut Vec<u8>> {\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n         vec_write(&mut self.pos, self.inner, buf)\n     }"}, {"sha": "2577b284714ab08687447d524ec28d915f061dfb", "filename": "src/libstd/io/impls.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e3a8f7db479ce6562bfc312f412b65dc4f3c77d5/src%2Flibstd%2Fio%2Fimpls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a8f7db479ce6562bfc312f412b65dc4f3c77d5/src%2Flibstd%2Fio%2Fimpls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fimpls.rs?ref=e3a8f7db479ce6562bfc312f412b65dc4f3c77d5", "patch": "@@ -7,7 +7,7 @@ use mem;\n // Forwarding implementations\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, R: Read + ?Sized> Read for &'a mut R {\n+impl<R: Read + ?Sized> Read for &mut R {\n     #[inline]\n     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n         (**self).read(buf)\n@@ -34,7 +34,7 @@ impl<'a, R: Read + ?Sized> Read for &'a mut R {\n     }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, W: Write + ?Sized> Write for &'a mut W {\n+impl<W: Write + ?Sized> Write for &mut W {\n     #[inline]\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> { (**self).write(buf) }\n \n@@ -52,12 +52,12 @@ impl<'a, W: Write + ?Sized> Write for &'a mut W {\n     }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, S: Seek + ?Sized> Seek for &'a mut S {\n+impl<S: Seek + ?Sized> Seek for &mut S {\n     #[inline]\n     fn seek(&mut self, pos: SeekFrom) -> io::Result<u64> { (**self).seek(pos) }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, B: BufRead + ?Sized> BufRead for &'a mut B {\n+impl<B: BufRead + ?Sized> BufRead for &mut B {\n     #[inline]\n     fn fill_buf(&mut self) -> io::Result<&[u8]> { (**self).fill_buf() }\n \n@@ -152,7 +152,7 @@ impl<B: BufRead + ?Sized> BufRead for Box<B> {\n /// Note that reading updates the slice to point to the yet unread part.\n /// The slice will be empty when EOF is reached.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a> Read for &'a [u8] {\n+impl Read for &[u8] {\n     #[inline]\n     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n         let amt = cmp::min(buf.len(), self.len());\n@@ -207,7 +207,7 @@ impl<'a> Read for &'a [u8] {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a> BufRead for &'a [u8] {\n+impl BufRead for &[u8] {\n     #[inline]\n     fn fill_buf(&mut self) -> io::Result<&[u8]> { Ok(*self) }\n \n@@ -221,7 +221,7 @@ impl<'a> BufRead for &'a [u8] {\n /// Note that writing updates the slice to point to the yet unwritten part.\n /// The slice will be empty when it has been completely overwritten.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a> Write for &'a mut [u8] {\n+impl Write for &mut [u8] {\n     #[inline]\n     fn write(&mut self, data: &[u8]) -> io::Result<usize> {\n         let amt = cmp::min(data.len(), self.len());"}, {"sha": "b634ea43e34e536efedf8bbf64b2d25bb736f047", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3a8f7db479ce6562bfc312f412b65dc4f3c77d5/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a8f7db479ce6562bfc312f412b65dc4f3c77d5/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=e3a8f7db479ce6562bfc312f412b65dc4f3c77d5", "patch": "@@ -299,7 +299,7 @@ const DEFAULT_BUF_SIZE: usize = ::sys_common::io::DEFAULT_BUF_SIZE;\n \n struct Guard<'a> { buf: &'a mut Vec<u8>, len: usize }\n \n-impl<'a> Drop for Guard<'a> {\n+impl Drop for Guard<'_> {\n     fn drop(&mut self) {\n         unsafe { self.buf.set_len(self.len); }\n     }\n@@ -1114,7 +1114,7 @@ pub trait Write {\n             error: Result<()>,\n         }\n \n-        impl<'a, T: Write + ?Sized> fmt::Write for Adaptor<'a, T> {\n+        impl<T: Write + ?Sized> fmt::Write for Adaptor<'_, T> {\n             fn write_str(&mut self, s: &str) -> fmt::Result {\n                 match self.inner.write_all(s.as_bytes()) {\n                     Ok(()) => Ok(()),"}, {"sha": "0324568e6fb5293b7898c9eda4605d027d45b0a3", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e3a8f7db479ce6562bfc312f412b65dc4f3c77d5/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a8f7db479ce6562bfc312f412b65dc4f3c77d5/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=e3a8f7db479ce6562bfc312f412b65dc4f3c77d5", "patch": "@@ -312,7 +312,7 @@ impl Read for Stdin {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a> Read for StdinLock<'a> {\n+impl Read for StdinLock<'_> {\n     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n         self.inner.read(buf)\n     }\n@@ -323,13 +323,13 @@ impl<'a> Read for StdinLock<'a> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a> BufRead for StdinLock<'a> {\n+impl BufRead for StdinLock<'_> {\n     fn fill_buf(&mut self) -> io::Result<&[u8]> { self.inner.fill_buf() }\n     fn consume(&mut self, n: usize) { self.inner.consume(n) }\n }\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n-impl<'a> fmt::Debug for StdinLock<'a> {\n+impl fmt::Debug for StdinLock<'_> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.pad(\"StdinLock { .. }\")\n     }\n@@ -485,7 +485,7 @@ impl Write for Stdout {\n     }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a> Write for StdoutLock<'a> {\n+impl Write for StdoutLock<'_> {\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n         self.inner.borrow_mut().write(buf)\n     }\n@@ -495,7 +495,7 @@ impl<'a> Write for StdoutLock<'a> {\n }\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n-impl<'a> fmt::Debug for StdoutLock<'a> {\n+impl fmt::Debug for StdoutLock<'_> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.pad(\"StdoutLock { .. }\")\n     }\n@@ -638,7 +638,7 @@ impl Write for Stderr {\n     }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a> Write for StderrLock<'a> {\n+impl Write for StderrLock<'_> {\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n         self.inner.borrow_mut().write(buf)\n     }\n@@ -648,7 +648,7 @@ impl<'a> Write for StderrLock<'a> {\n }\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n-impl<'a> fmt::Debug for StderrLock<'a> {\n+impl fmt::Debug for StderrLock<'_> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.pad(\"StderrLock { .. }\")\n     }"}, {"sha": "4b60ee8e6daddc47d04c7fa7296dfdd4a10658d9", "filename": "src/libstd/net/addr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3a8f7db479ce6562bfc312f412b65dc4f3c77d5/src%2Flibstd%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a8f7db479ce6562bfc312f412b65dc4f3c77d5/src%2Flibstd%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Faddr.rs?ref=e3a8f7db479ce6562bfc312f412b65dc4f3c77d5", "patch": "@@ -861,7 +861,7 @@ fn resolve_socket_addr(lh: LookupHost) -> io::Result<vec::IntoIter<SocketAddr>>\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a> ToSocketAddrs for (&'a str, u16) {\n+impl ToSocketAddrs for (&str, u16) {\n     type Iter = vec::IntoIter<SocketAddr>;\n     fn to_socket_addrs(&self) -> io::Result<vec::IntoIter<SocketAddr>> {\n         let (host, port) = *self;\n@@ -904,7 +904,7 @@ impl<'a> ToSocketAddrs for &'a [SocketAddr] {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T: ToSocketAddrs + ?Sized> ToSocketAddrs for &'a T {\n+impl<T: ToSocketAddrs + ?Sized> ToSocketAddrs for &T {\n     type Iter = T::Iter;\n     fn to_socket_addrs(&self) -> io::Result<T::Iter> {\n         (**self).to_socket_addrs()"}, {"sha": "51bd76ae4363e4f1e1b2ae7833a394836a2d0b9c", "filename": "src/libstd/net/tcp.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3a8f7db479ce6562bfc312f412b65dc4f3c77d5/src%2Flibstd%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a8f7db479ce6562bfc312f412b65dc4f3c77d5/src%2Flibstd%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Ftcp.rs?ref=e3a8f7db479ce6562bfc312f412b65dc4f3c77d5", "patch": "@@ -580,7 +580,7 @@ impl Write for TcpStream {\n     fn flush(&mut self) -> io::Result<()> { Ok(()) }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a> Read for &'a TcpStream {\n+impl Read for &TcpStream {\n     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> { self.0.read(buf) }\n \n     #[inline]\n@@ -589,7 +589,7 @@ impl<'a> Read for &'a TcpStream {\n     }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a> Write for &'a TcpStream {\n+impl Write for &TcpStream {\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> { self.0.write(buf) }\n     fn flush(&mut self) -> io::Result<()> { Ok(()) }\n }"}, {"sha": "daeac7107a56c6f72463fafc398a7d8ada36112f", "filename": "src/libstd/panic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e3a8f7db479ce6562bfc312f412b65dc4f3c77d5/src%2Flibstd%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a8f7db479ce6562bfc312f412b65dc4f3c77d5/src%2Flibstd%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanic.rs?ref=e3a8f7db479ce6562bfc312f412b65dc4f3c77d5", "patch": "@@ -199,9 +199,9 @@ pub struct AssertUnwindSafe<T>(\n // * Our custom AssertUnwindSafe wrapper is indeed unwind safe\n \n #[stable(feature = \"catch_unwind\", since = \"1.9.0\")]\n-impl<'a, T: ?Sized> !UnwindSafe for &'a mut T {}\n+impl<T: ?Sized> !UnwindSafe for &mut T {}\n #[stable(feature = \"catch_unwind\", since = \"1.9.0\")]\n-impl<'a, T: RefUnwindSafe + ?Sized> UnwindSafe for &'a T {}\n+impl<T: RefUnwindSafe + ?Sized> UnwindSafe for &T {}\n #[stable(feature = \"catch_unwind\", since = \"1.9.0\")]\n impl<T: RefUnwindSafe + ?Sized> UnwindSafe for *const T {}\n #[stable(feature = \"catch_unwind\", since = \"1.9.0\")]\n@@ -320,7 +320,7 @@ impl<T: fmt::Debug> fmt::Debug for AssertUnwindSafe<T> {\n }\n \n #[unstable(feature = \"futures_api\", issue = \"50547\")]\n-impl<'a, F: Future> Future for AssertUnwindSafe<F> {\n+impl<F: Future> Future for AssertUnwindSafe<F> {\n     type Output = F::Output;\n \n     fn poll(self: Pin<&mut Self>, waker: &Waker) -> Poll<Self::Output> {"}, {"sha": "240b92a17db4ca46a3dfcc9ded510a010fff669b", "filename": "src/libstd/path.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/e3a8f7db479ce6562bfc312f412b65dc4f3c77d5/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a8f7db479ce6562bfc312f412b65dc4f3c77d5/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=e3a8f7db479ce6562bfc312f412b65dc4f3c77d5", "patch": "@@ -457,14 +457,14 @@ impl<'a> cmp::PartialOrd for PrefixComponent<'a> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a> cmp::Ord for PrefixComponent<'a> {\n-    fn cmp(&self, other: &PrefixComponent<'a>) -> cmp::Ordering {\n+impl cmp::Ord for PrefixComponent<'_> {\n+    fn cmp(&self, other: &Self) -> cmp::Ordering {\n         cmp::Ord::cmp(&self.parsed, &other.parsed)\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a> Hash for PrefixComponent<'a> {\n+impl Hash for PrefixComponent<'_> {\n     fn hash<H: Hasher>(&self, h: &mut H) {\n         self.parsed.hash(h);\n     }\n@@ -561,14 +561,14 @@ impl<'a> Component<'a> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a> AsRef<OsStr> for Component<'a> {\n+impl AsRef<OsStr> for Component<'_> {\n     fn as_ref(&self) -> &OsStr {\n         self.as_os_str()\n     }\n }\n \n #[stable(feature = \"path_component_asref\", since = \"1.25.0\")]\n-impl<'a> AsRef<Path> for Component<'a> {\n+impl AsRef<Path> for Component<'_> {\n     fn as_ref(&self) -> &Path {\n         self.as_os_str().as_ref()\n     }\n@@ -630,11 +630,11 @@ pub struct Iter<'a> {\n }\n \n #[stable(feature = \"path_components_debug\", since = \"1.13.0\")]\n-impl<'a> fmt::Debug for Components<'a> {\n+impl fmt::Debug for Components<'_> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         struct DebugHelper<'a>(&'a Path);\n \n-        impl<'a> fmt::Debug for DebugHelper<'a> {\n+        impl fmt::Debug for DebugHelper<'_> {\n             fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n                 f.debug_list()\n                     .entries(self.0.components())\n@@ -814,25 +814,25 @@ impl<'a> Components<'a> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a> AsRef<Path> for Components<'a> {\n+impl AsRef<Path> for Components<'_> {\n     fn as_ref(&self) -> &Path {\n         self.as_path()\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a> AsRef<OsStr> for Components<'a> {\n+impl AsRef<OsStr> for Components<'_> {\n     fn as_ref(&self) -> &OsStr {\n         self.as_path().as_os_str()\n     }\n }\n \n #[stable(feature = \"path_iter_debug\", since = \"1.13.0\")]\n-impl<'a> fmt::Debug for Iter<'a> {\n+impl fmt::Debug for Iter<'_> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         struct DebugHelper<'a>(&'a Path);\n \n-        impl<'a> fmt::Debug for DebugHelper<'a> {\n+        impl fmt::Debug for DebugHelper<'_> {\n             fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n                 f.debug_list()\n                     .entries(self.0.iter())\n@@ -867,14 +867,14 @@ impl<'a> Iter<'a> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a> AsRef<Path> for Iter<'a> {\n+impl AsRef<Path> for Iter<'_> {\n     fn as_ref(&self) -> &Path {\n         self.as_path()\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a> AsRef<OsStr> for Iter<'a> {\n+impl AsRef<OsStr> for Iter<'_> {\n     fn as_ref(&self) -> &OsStr {\n         self.as_path().as_os_str()\n     }\n@@ -897,7 +897,7 @@ impl<'a> DoubleEndedIterator for Iter<'a> {\n }\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n-impl<'a> FusedIterator for Iter<'a> {}\n+impl FusedIterator for Iter<'_> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a> Iterator for Components<'a> {\n@@ -1000,7 +1000,7 @@ impl<'a> DoubleEndedIterator for Components<'a> {\n }\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n-impl<'a> FusedIterator for Components<'a> {}\n+impl FusedIterator for Components<'_> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a> cmp::PartialEq for Components<'a> {\n@@ -1010,7 +1010,7 @@ impl<'a> cmp::PartialEq for Components<'a> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a> cmp::Eq for Components<'a> {}\n+impl cmp::Eq for Components<'_> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a> cmp::PartialOrd for Components<'a> {\n@@ -1020,8 +1020,8 @@ impl<'a> cmp::PartialOrd for Components<'a> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a> cmp::Ord for Components<'a> {\n-    fn cmp(&self, other: &Components<'a>) -> cmp::Ordering {\n+impl cmp::Ord for Components<'_> {\n+    fn cmp(&self, other: &Self) -> cmp::Ordering {\n         Iterator::cmp(self.clone(), other.clone())\n     }\n }\n@@ -1063,7 +1063,7 @@ impl<'a> Iterator for Ancestors<'a> {\n }\n \n #[stable(feature = \"path_ancestors\", since = \"1.28.0\")]\n-impl<'a> FusedIterator for Ancestors<'a> {}\n+impl FusedIterator for Ancestors<'_> {}\n \n ////////////////////////////////////////////////////////////////////////////////\n // Basic types and traits\n@@ -2610,14 +2610,14 @@ pub struct Display<'a> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a> fmt::Debug for Display<'a> {\n+impl fmt::Debug for Display<'_> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         fmt::Debug::fmt(&self.path, f)\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a> fmt::Display for Display<'a> {\n+impl fmt::Display for Display<'_> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         self.path.inner.display(f)\n     }\n@@ -2671,7 +2671,7 @@ impl AsRef<Path> for OsStr {\n }\n \n #[stable(feature = \"cow_os_str_as_ref_path\", since = \"1.8.0\")]\n-impl<'a> AsRef<Path> for Cow<'a, OsStr> {\n+impl AsRef<Path> for Cow<'_, OsStr> {\n     fn as_ref(&self) -> &Path {\n         Path::new(self)\n     }"}, {"sha": "8591b55dc58ee9fd909f77e7f9381f0c8bc2d41e", "filename": "src/libstd/sync/mpsc/select.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3a8f7db479ce6562bfc312f412b65dc4f3c77d5/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a8f7db479ce6562bfc312f412b65dc4f3c77d5/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs?ref=e3a8f7db479ce6562bfc312f412b65dc4f3c77d5", "patch": "@@ -321,7 +321,7 @@ impl Drop for Select {\n     }\n }\n \n-impl<'rx, T: Send> Drop for Handle<'rx, T> {\n+impl<T: Send> Drop for Handle<'_, T> {\n     fn drop(&mut self) {\n         unsafe { self.remove() }\n     }\n@@ -347,7 +347,7 @@ impl fmt::Debug for Select {\n     }\n }\n \n-impl<'rx, T:Send+'rx> fmt::Debug for Handle<'rx, T> {\n+impl<T: Send> fmt::Debug for Handle<'_, T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.debug_struct(\"Handle\").finish()\n     }"}, {"sha": "954867911a03198c3535a498d7ea7b6b3c0d22b9", "filename": "src/libstd/sync/mutex.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e3a8f7db479ce6562bfc312f412b65dc4f3c77d5/src%2Flibstd%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a8f7db479ce6562bfc312f412b65dc4f3c77d5/src%2Flibstd%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmutex.rs?ref=e3a8f7db479ce6562bfc312f412b65dc4f3c77d5", "patch": "@@ -150,9 +150,9 @@ pub struct MutexGuard<'a, T: ?Sized + 'a> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T: ?Sized> !Send for MutexGuard<'a, T> { }\n+impl<T: ?Sized> !Send for MutexGuard<'_, T> { }\n #[stable(feature = \"mutexguard\", since = \"1.19.0\")]\n-unsafe impl<'a, T: ?Sized + Sync> Sync for MutexGuard<'a, T> { }\n+unsafe impl<T: ?Sized + Sync> Sync for MutexGuard<'_, T> { }\n \n impl<T> Mutex<T> {\n     /// Creates a new mutex in an unlocked state ready for use.\n@@ -421,7 +421,7 @@ impl<'mutex, T: ?Sized> MutexGuard<'mutex, T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'mutex, T: ?Sized> Deref for MutexGuard<'mutex, T> {\n+impl<T: ?Sized> Deref for MutexGuard<'_, T> {\n     type Target = T;\n \n     fn deref(&self) -> &T {\n@@ -430,14 +430,14 @@ impl<'mutex, T: ?Sized> Deref for MutexGuard<'mutex, T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'mutex, T: ?Sized> DerefMut for MutexGuard<'mutex, T> {\n+impl<T: ?Sized> DerefMut for MutexGuard<'_, T> {\n     fn deref_mut(&mut self) -> &mut T {\n         unsafe { &mut *self.__lock.data.get() }\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T: ?Sized> Drop for MutexGuard<'a, T> {\n+impl<T: ?Sized> Drop for MutexGuard<'_, T> {\n     #[inline]\n     fn drop(&mut self) {\n         unsafe {\n@@ -448,14 +448,14 @@ impl<'a, T: ?Sized> Drop for MutexGuard<'a, T> {\n }\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n-impl<'a, T: ?Sized + fmt::Debug> fmt::Debug for MutexGuard<'a, T> {\n+impl<T: ?Sized + fmt::Debug> fmt::Debug for MutexGuard<'_, T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         fmt::Debug::fmt(&**self, f)\n     }\n }\n \n #[stable(feature = \"std_guard_impls\", since = \"1.20.0\")]\n-impl<'a, T: ?Sized + fmt::Display> fmt::Display for MutexGuard<'a, T> {\n+impl<T: ?Sized + fmt::Display> fmt::Display for MutexGuard<'_, T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         (**self).fmt(f)\n     }"}, {"sha": "e207d0170d7b8cf4a6bcb5823a61872b5bd4e952", "filename": "src/libstd/sync/once.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3a8f7db479ce6562bfc312f412b65dc4f3c77d5/src%2Flibstd%2Fsync%2Fonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a8f7db479ce6562bfc312f412b65dc4f3c77d5/src%2Flibstd%2Fsync%2Fonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fonce.rs?ref=e3a8f7db479ce6562bfc312f412b65dc4f3c77d5", "patch": "@@ -436,7 +436,7 @@ impl fmt::Debug for Once {\n     }\n }\n \n-impl<'a> Drop for Finish<'a> {\n+impl Drop for Finish<'_> {\n     fn drop(&mut self) {\n         // Swap out our state with however we finished. We should only ever see\n         // an old state which was RUNNING."}, {"sha": "7f3cb4f72c7b5baa274dd999ea19c6e180cb5a14", "filename": "src/libstd/sync/rwlock.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e3a8f7db479ce6562bfc312f412b65dc4f3c77d5/src%2Flibstd%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a8f7db479ce6562bfc312f412b65dc4f3c77d5/src%2Flibstd%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Frwlock.rs?ref=e3a8f7db479ce6562bfc312f412b65dc4f3c77d5", "patch": "@@ -91,10 +91,10 @@ pub struct RwLockReadGuard<'a, T: ?Sized + 'a> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T: ?Sized> !Send for RwLockReadGuard<'a, T> {}\n+impl<T: ?Sized> !Send for RwLockReadGuard<'_, T> {}\n \n #[stable(feature = \"rwlock_guard_sync\", since = \"1.23.0\")]\n-unsafe impl<'a, T: ?Sized + Sync> Sync for RwLockReadGuard<'a, T> {}\n+unsafe impl<T: ?Sized + Sync> Sync for RwLockReadGuard<'_, T> {}\n \n /// RAII structure used to release the exclusive write access of a lock when\n /// dropped.\n@@ -113,10 +113,10 @@ pub struct RwLockWriteGuard<'a, T: ?Sized + 'a> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T: ?Sized> !Send for RwLockWriteGuard<'a, T> {}\n+impl<T: ?Sized> !Send for RwLockWriteGuard<'_, T> {}\n \n #[stable(feature = \"rwlock_guard_sync\", since = \"1.23.0\")]\n-unsafe impl<'a, T: ?Sized + Sync> Sync for RwLockWriteGuard<'a, T> {}\n+unsafe impl<T: ?Sized + Sync> Sync for RwLockWriteGuard<'_, T> {}\n \n impl<T> RwLock<T> {\n     /// Creates a new instance of an `RwLock<T>` which is unlocked.\n@@ -480,7 +480,7 @@ impl<'rwlock, T: ?Sized> RwLockWriteGuard<'rwlock, T> {\n }\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n-impl<'a, T: fmt::Debug> fmt::Debug for RwLockReadGuard<'a, T> {\n+impl<T: fmt::Debug> fmt::Debug for RwLockReadGuard<'_, T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.debug_struct(\"RwLockReadGuard\")\n             .field(\"lock\", &self.__lock)\n@@ -489,14 +489,14 @@ impl<'a, T: fmt::Debug> fmt::Debug for RwLockReadGuard<'a, T> {\n }\n \n #[stable(feature = \"std_guard_impls\", since = \"1.20.0\")]\n-impl<'a, T: ?Sized + fmt::Display> fmt::Display for RwLockReadGuard<'a, T> {\n+impl<T: ?Sized + fmt::Display> fmt::Display for RwLockReadGuard<'_, T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         (**self).fmt(f)\n     }\n }\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n-impl<'a, T: fmt::Debug> fmt::Debug for RwLockWriteGuard<'a, T> {\n+impl<T: fmt::Debug> fmt::Debug for RwLockWriteGuard<'_, T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.debug_struct(\"RwLockWriteGuard\")\n             .field(\"lock\", &self.__lock)\n@@ -505,14 +505,14 @@ impl<'a, T: fmt::Debug> fmt::Debug for RwLockWriteGuard<'a, T> {\n }\n \n #[stable(feature = \"std_guard_impls\", since = \"1.20.0\")]\n-impl<'a, T: ?Sized + fmt::Display> fmt::Display for RwLockWriteGuard<'a, T> {\n+impl<T: ?Sized + fmt::Display> fmt::Display for RwLockWriteGuard<'_, T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         (**self).fmt(f)\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'rwlock, T: ?Sized> Deref for RwLockReadGuard<'rwlock, T> {\n+impl<T: ?Sized> Deref for RwLockReadGuard<'_, T> {\n     type Target = T;\n \n     fn deref(&self) -> &T {\n@@ -521,7 +521,7 @@ impl<'rwlock, T: ?Sized> Deref for RwLockReadGuard<'rwlock, T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'rwlock, T: ?Sized> Deref for RwLockWriteGuard<'rwlock, T> {\n+impl<T: ?Sized> Deref for RwLockWriteGuard<'_, T> {\n     type Target = T;\n \n     fn deref(&self) -> &T {\n@@ -530,21 +530,21 @@ impl<'rwlock, T: ?Sized> Deref for RwLockWriteGuard<'rwlock, T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'rwlock, T: ?Sized> DerefMut for RwLockWriteGuard<'rwlock, T> {\n+impl<T: ?Sized> DerefMut for RwLockWriteGuard<'_, T> {\n     fn deref_mut(&mut self) -> &mut T {\n         unsafe { &mut *self.__lock.data.get() }\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T: ?Sized> Drop for RwLockReadGuard<'a, T> {\n+impl<T: ?Sized> Drop for RwLockReadGuard<'_, T> {\n     fn drop(&mut self) {\n         unsafe { self.__lock.inner.read_unlock(); }\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T: ?Sized> Drop for RwLockWriteGuard<'a, T> {\n+impl<T: ?Sized> Drop for RwLockWriteGuard<'_, T> {\n     fn drop(&mut self) {\n         self.__lock.poison.done(&self.__poison);\n         unsafe { self.__lock.inner.write_unlock(); }"}, {"sha": "915c17374ca02004c639370d32614e4ccbb12a65", "filename": "src/libstd/sys_common/bytestring.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3a8f7db479ce6562bfc312f412b65dc4f3c77d5/src%2Flibstd%2Fsys_common%2Fbytestring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a8f7db479ce6562bfc312f412b65dc4f3c77d5/src%2Flibstd%2Fsys_common%2Fbytestring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fbytestring.rs?ref=e3a8f7db479ce6562bfc312f412b65dc4f3c77d5", "patch": "@@ -31,7 +31,7 @@ mod tests {\n     fn smoke() {\n         struct Helper<'a>(&'a [u8]);\n \n-        impl<'a> Debug for Helper<'a> {\n+        impl Debug for Helper<'_> {\n             fn fmt(&self, f: &mut Formatter) -> Result {\n                 debug_fmt_bytestring(self.0, f)\n             }"}, {"sha": "b47d8698c605b5d70d4f947ac6914895dc601e7f", "filename": "src/libstd/sys_common/mutex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3a8f7db479ce6562bfc312f412b65dc4f3c77d5/src%2Flibstd%2Fsys_common%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a8f7db479ce6562bfc312f412b65dc4f3c77d5/src%2Flibstd%2Fsys_common%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fmutex.rs?ref=e3a8f7db479ce6562bfc312f412b65dc4f3c77d5", "patch": "@@ -76,7 +76,7 @@ pub fn raw(mutex: &Mutex) -> &imp::Mutex { &mutex.0 }\n /// A simple RAII utility for the above Mutex without the poisoning semantics.\n pub struct MutexGuard<'a>(&'a imp::Mutex);\n \n-impl<'a> Drop for MutexGuard<'a> {\n+impl Drop for MutexGuard<'_> {\n     #[inline]\n     fn drop(&mut self) {\n         unsafe { self.0.unlock(); }"}, {"sha": "596e5d534c2933fd1fc24a8257cf57d1767f8174", "filename": "src/libstd/sys_common/remutex.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e3a8f7db479ce6562bfc312f412b65dc4f3c77d5/src%2Flibstd%2Fsys_common%2Fremutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a8f7db479ce6562bfc312f412b65dc4f3c77d5/src%2Flibstd%2Fsys_common%2Fremutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fremutex.rs?ref=e3a8f7db479ce6562bfc312f412b65dc4f3c77d5", "patch": "@@ -43,7 +43,7 @@ pub struct ReentrantMutexGuard<'a, T: 'a> {\n     __poison: poison::Guard,\n }\n \n-impl<'a, T> !marker::Send for ReentrantMutexGuard<'a, T> {}\n+impl<T> !marker::Send for ReentrantMutexGuard<'_, T> {}\n \n \n impl<T> ReentrantMutex<T> {\n@@ -138,15 +138,15 @@ impl<'mutex, T> ReentrantMutexGuard<'mutex, T> {\n     }\n }\n \n-impl<'mutex, T> Deref for ReentrantMutexGuard<'mutex, T> {\n+impl<T> Deref for ReentrantMutexGuard<'_, T> {\n     type Target = T;\n \n     fn deref(&self) -> &T {\n         &self.__lock.data\n     }\n }\n \n-impl<'a, T> Drop for ReentrantMutexGuard<'a, T> {\n+impl<T> Drop for ReentrantMutexGuard<'_, T> {\n     #[inline]\n     fn drop(&mut self) {\n         unsafe {\n@@ -212,7 +212,7 @@ mod tests {\n     }\n \n     pub struct Answer<'a>(pub ReentrantMutexGuard<'a, RefCell<u32>>);\n-    impl<'a> Drop for Answer<'a> {\n+    impl Drop for Answer<'_> {\n         fn drop(&mut self) {\n             *self.0.borrow_mut() = 42;\n         }"}]}