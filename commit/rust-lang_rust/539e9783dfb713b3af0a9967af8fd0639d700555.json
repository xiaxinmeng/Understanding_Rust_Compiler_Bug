{"sha": "539e9783dfb713b3af0a9967af8fd0639d700555", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzOWU5NzgzZGZiNzEzYjNhZjBhOTk2N2FmOGZkMDYzOWQ3MDA1NTU=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-05-30T17:15:58Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-06-15T16:06:57Z"}, "message": "Tweak wording and add error code", "tree": {"sha": "b2dc9150dcebb59547eeaaba340c4fb44454a0b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b2dc9150dcebb59547eeaaba340c4fb44454a0b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/539e9783dfb713b3af0a9967af8fd0639d700555", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/539e9783dfb713b3af0a9967af8fd0639d700555", "html_url": "https://github.com/rust-lang/rust/commit/539e9783dfb713b3af0a9967af8fd0639d700555", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/539e9783dfb713b3af0a9967af8fd0639d700555/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc1579060981b5e95a18409e876c92bf0c9307e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc1579060981b5e95a18409e876c92bf0c9307e6", "html_url": "https://github.com/rust-lang/rust/commit/bc1579060981b5e95a18409e876c92bf0c9307e6"}], "stats": {"total": 191, "additions": 97, "deletions": 94}, "files": [{"sha": "4e16e8c2c5717918261d1cc76b7b5c4e3eff6c5f", "filename": "src/librustc_infer/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/539e9783dfb713b3af0a9967af8fd0639d700555/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/539e9783dfb713b3af0a9967af8fd0639d700555/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=539e9783dfb713b3af0a9967af8fd0639d700555", "patch": "@@ -2,7 +2,7 @@\n \n use crate::infer::error_reporting::nice_region_error::NiceRegionError;\n use crate::infer::lexical_region_resolve::RegionResolutionError;\n-use rustc_errors::{Applicability, ErrorReported};\n+use rustc_errors::{struct_span_err, Applicability, ErrorReported};\n use rustc_hir::{GenericBound, ItemKind, Lifetime, LifetimeName, TyKind};\n use rustc_middle::ty::RegionKind;\n \n@@ -35,10 +35,14 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                     let (lifetime_name, lifetime) = if sup_r.has_name() {\n                         (sup_r.to_string(), format!(\"lifetime `{}`\", sup_r))\n                     } else {\n-                        (\"'_\".to_owned(), \"the anonymous lifetime `'_`\".to_string())\n+                        (\"'_\".to_owned(), \"an anonymous lifetime `'_`\".to_string())\n                     };\n-                    let mut err =\n-                        self.tcx().sess.struct_span_err(sp, \"cannot infer an appropriate lifetime\");\n+                    let mut err = struct_span_err!(\n+                        self.tcx().sess,\n+                        sp,\n+                        E0758,\n+                        \"cannot infer an appropriate lifetime\"\n+                    );\n                     err.span_label(\n                         param_info.param_ty_span,\n                         &format!(\"this data with {}...\", lifetime),\n@@ -61,36 +65,35 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                             //    |\n                             // LL | fn foo(x: &i32) -> Box<dyn Debug> { Box::new(x) }\n                             //    |           ----                      ---------^-\n-                            //    |           |                         |        |\n-                            //    |           |                         |   ...and is captured here\n-                            //    |           |           ...is required to be `'static` by this...\n-                            //    |           this data with the anonymous lifetime `'_`...\n                             //\n                             // and instead show:\n                             //\n                             // error: cannot infer an appropriate lifetime\n                             //   --> $DIR/must_outlive_least_region_or_bound.rs:18:50\n                             //    |\n                             // LL | fn foo(x: &i32) -> Box<dyn Debug> { Box::new(x) }\n-                            //    |           ----                               ^ ...is captured here with a `'static` requirement\n-                            //    |           |\n-                            //    |           this data with the anonymous lifetime `'_`...\n-                            //    |\n+                            //    |           ----                               ^\n                             err.span_label(\n                                 sup_origin.span(),\n-                                \"...is captured here with a `'static` requirement\",\n+                                \"...is captured here requiring it to live as long as `'static`\",\n                             );\n                         } else if sup_origin.span() <= return_sp {\n                             err.span_label(sup_origin.span(), \"...is captured here...\");\n-                            err.span_label(return_sp, \"...and required to be `'static` by this\");\n+                            err.span_label(\n+                                return_sp,\n+                                \"...and required to live as long as `'static` by this\",\n+                            );\n                         } else {\n-                            err.span_label(return_sp, \"...is required to be `'static` by this...\");\n+                            err.span_label(\n+                                return_sp,\n+                                \"...is required to live as long as `'static` by this...\",\n+                            );\n                             err.span_label(sup_origin.span(), \"...and is captured here\");\n                         }\n                     } else {\n                         err.span_label(\n                             return_sp,\n-                            \"...is captured and required to be `'static` here\",\n+                            \"...is captured and required live as long as `'static` here\",\n                         );\n                     }\n "}, {"sha": "558d89f9289451a4b206e9a54d5d6f68c03d9449", "filename": "src/test/ui/async-await/issues/issue-62097.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/539e9783dfb713b3af0a9967af8fd0639d700555/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/539e9783dfb713b3af0a9967af8fd0639d700555/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.stderr?ref=539e9783dfb713b3af0a9967af8fd0639d700555", "patch": "@@ -1,13 +1,13 @@\n-error: cannot infer an appropriate lifetime\n+error[E0758]: cannot infer an appropriate lifetime\n   --> $DIR/issue-62097.rs:12:31\n    |\n LL |     pub async fn run_dummy_fn(&self) {\n    |                               ^^^^^\n    |                               |\n-   |                               this data with the anonymous lifetime `'_`...\n+   |                               this data with an anonymous lifetime `'_`...\n    |                               ...is captured here...\n LL |         foo(|| self.bar()).await;\n-   |         --- ...and required to be `'static` by this\n+   |         --- ...and required to live as long as `'static` by this\n \n error: aborting due to previous error\n "}, {"sha": "eff56ddc440d45db6e217498ff875404d46a6743", "filename": "src/test/ui/impl-trait/must_outlive_least_region_or_bound.stderr", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/539e9783dfb713b3af0a9967af8fd0639d700555/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/539e9783dfb713b3af0a9967af8fd0639d700555/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr?ref=539e9783dfb713b3af0a9967af8fd0639d700555", "patch": "@@ -1,41 +1,41 @@\n-error: cannot infer an appropriate lifetime\n+error[E0758]: cannot infer an appropriate lifetime\n   --> $DIR/must_outlive_least_region_or_bound.rs:3:35\n    |\n LL | fn elided(x: &i32) -> impl Copy { x }\n    |              ----     ---------   ^ ...and is captured here\n    |              |        |\n-   |              |        ...is required to be `'static` by this...\n-   |              this data with the anonymous lifetime `'_`...\n+   |              |        ...is required to live as long as `'static` by this...\n+   |              this data with an anonymous lifetime `'_`...\n    |\n-help: to permit non-static references in an `impl Trait` value, you can add an explicit bound for the anonymous lifetime `'_`\n+help: to permit non-static references in an `impl Trait` value, you can add an explicit bound for an anonymous lifetime `'_`\n    |\n LL | fn elided(x: &i32) -> impl Copy + '_ { x }\n    |                                 ^^^^\n \n-error: cannot infer an appropriate lifetime\n+error[E0758]: cannot infer an appropriate lifetime\n   --> $DIR/must_outlive_least_region_or_bound.rs:6:44\n    |\n LL | fn explicit<'a>(x: &'a i32) -> impl Copy { x }\n    |                    -------     ---------   ^ ...and is captured here\n    |                    |           |\n-   |                    |           ...is required to be `'static` by this...\n+   |                    |           ...is required to live as long as `'static` by this...\n    |                    this data with lifetime `'a`...\n    |\n help: to permit non-static references in an `impl Trait` value, you can add an explicit bound for lifetime `'a`\n    |\n LL | fn explicit<'a>(x: &'a i32) -> impl Copy + 'a { x }\n    |                                          ^^^^\n \n-error: cannot infer an appropriate lifetime\n+error[E0758]: cannot infer an appropriate lifetime\n   --> $DIR/must_outlive_least_region_or_bound.rs:9:46\n    |\n LL | fn elided2(x: &i32) -> impl Copy + 'static { x }\n    |               ----     -------------------   ^ ...and is captured here\n    |               |        |\n-   |               |        ...is required to be `'static` by this...\n-   |               this data with the anonymous lifetime `'_`...\n+   |               |        ...is required to live as long as `'static` by this...\n+   |               this data with an anonymous lifetime `'_`...\n    |\n-help: consider changing the `impl Trait`'s explicit `'static` bound to the anonymous lifetime `'_`\n+help: consider changing the `impl Trait`'s explicit `'static` bound to an anonymous lifetime `'_`\n    |\n LL | fn elided2(x: &i32) -> impl Copy + '_ { x }\n    |                                    ^^\n@@ -44,13 +44,13 @@ help: alternatively, set an explicit `'static` lifetime to this parameter\n LL | fn elided2(x: &'static i32) -> impl Copy + 'static { x }\n    |               ^^^^^^^^^^^^\n \n-error: cannot infer an appropriate lifetime\n+error[E0758]: cannot infer an appropriate lifetime\n   --> $DIR/must_outlive_least_region_or_bound.rs:12:55\n    |\n LL | fn explicit2<'a>(x: &'a i32) -> impl Copy + 'static { x }\n    |                     -------     -------------------   ^ ...and is captured here\n    |                     |           |\n-   |                     |           ...is required to be `'static` by this...\n+   |                     |           ...is required to live as long as `'static` by this...\n    |                     this data with lifetime `'a`...\n    |\n help: consider changing the `impl Trait`'s explicit `'static` bound to lifetime `'a`\n@@ -70,13 +70,13 @@ LL | fn foo<'a>(x: &i32) -> impl Copy + 'a { x }\n    |               |\n    |               help: add explicit lifetime `'a` to the type of `x`: `&'a i32`\n \n-error: cannot infer an appropriate lifetime\n+error[E0758]: cannot infer an appropriate lifetime\n   --> $DIR/must_outlive_least_region_or_bound.rs:33:69\n    |\n LL | fn with_bound<'a>(x: &'a i32) -> impl LifetimeTrait<'a> + 'static { x }\n    |                      -------     --------------------------------   ^ ...and is captured here\n    |                      |           |\n-   |                      |           ...is required to be `'static` by this...\n+   |                      |           ...is required to live as long as `'static` by this...\n    |                      this data with lifetime `'a`...\n    |\n help: consider changing the `impl Trait`'s explicit `'static` bound to lifetime `'a`\n@@ -105,24 +105,24 @@ LL | fn ty_param_wont_outlive_static<T:Debug>(x: T) -> impl Debug + 'static {\n    |                                 |\n    |                                 help: consider adding an explicit lifetime bound...: `T: 'static +`\n \n-error: cannot infer an appropriate lifetime\n+error[E0758]: cannot infer an appropriate lifetime\n   --> $DIR/must_outlive_least_region_or_bound.rs:18:50\n    |\n LL | fn elided3(x: &i32) -> Box<dyn Debug> { Box::new(x) }\n-   |               ----                               ^ ...is captured here with a `'static` requirement\n+   |               ----                               ^ ...is captured here requiring it to live as long as `'static`\n    |               |\n-   |               this data with the anonymous lifetime `'_`...\n+   |               this data with an anonymous lifetime `'_`...\n    |\n-help: to permit non-static references in a trait object value, you can add an explicit bound for the anonymous lifetime `'_`\n+help: to permit non-static references in a trait object value, you can add an explicit bound for an anonymous lifetime `'_`\n    |\n LL | fn elided3(x: &i32) -> Box<dyn Debug + '_> { Box::new(x) }\n    |                                      ^^^^\n \n-error: cannot infer an appropriate lifetime\n+error[E0758]: cannot infer an appropriate lifetime\n   --> $DIR/must_outlive_least_region_or_bound.rs:21:59\n    |\n LL | fn explicit3<'a>(x: &'a i32) -> Box<dyn Debug> { Box::new(x) }\n-   |                     -------                               ^ ...is captured here with a `'static` requirement\n+   |                     -------                               ^ ...is captured here requiring it to live as long as `'static`\n    |                     |\n    |                     this data with lifetime `'a`...\n    |\n@@ -131,15 +131,15 @@ help: to permit non-static references in a trait object value, you can add an ex\n LL | fn explicit3<'a>(x: &'a i32) -> Box<dyn Debug + 'a> { Box::new(x) }\n    |                                               ^^^^\n \n-error: cannot infer an appropriate lifetime\n+error[E0758]: cannot infer an appropriate lifetime\n   --> $DIR/must_outlive_least_region_or_bound.rs:24:60\n    |\n LL | fn elided4(x: &i32) -> Box<dyn Debug + 'static> { Box::new(x) }\n-   |               ----                                         ^ ...is captured here with a `'static` requirement\n+   |               ----                                         ^ ...is captured here requiring it to live as long as `'static`\n    |               |\n-   |               this data with the anonymous lifetime `'_`...\n+   |               this data with an anonymous lifetime `'_`...\n    |\n-help: consider changing the trait object's explicit `'static` bound to the anonymous lifetime `'_`\n+help: consider changing the trait object's explicit `'static` bound to an anonymous lifetime `'_`\n    |\n LL | fn elided4(x: &i32) -> Box<dyn Debug + '_> { Box::new(x) }\n    |                                        ^^\n@@ -148,11 +148,11 @@ help: alternatively, set an explicit `'static` lifetime in this parameter\n LL | fn elided4(x: &'static i32) -> Box<dyn Debug + 'static> { Box::new(x) }\n    |               ^^^^^^^^^^^^\n \n-error: cannot infer an appropriate lifetime\n+error[E0758]: cannot infer an appropriate lifetime\n   --> $DIR/must_outlive_least_region_or_bound.rs:27:69\n    |\n LL | fn explicit4<'a>(x: &'a i32) -> Box<dyn Debug + 'static> { Box::new(x) }\n-   |                     ------- this data with lifetime `'a`...         ^ ...is captured here with a `'static` requirement\n+   |                     ------- this data with lifetime `'a`...         ^ ...is captured here requiring it to live as long as `'static`\n    |\n help: consider changing the trait object's explicit `'static` bound to lifetime `'a`\n    |"}, {"sha": "a48580ee2d2fccec4d45c32cbf4c68b6ccccf3dc", "filename": "src/test/ui/impl-trait/static-return-lifetime-infered.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/539e9783dfb713b3af0a9967af8fd0639d700555/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/539e9783dfb713b3af0a9967af8fd0639d700555/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.stderr?ref=539e9783dfb713b3af0a9967af8fd0639d700555", "patch": "@@ -1,25 +1,25 @@\n-error: cannot infer an appropriate lifetime\n+error[E0758]: cannot infer an appropriate lifetime\n   --> $DIR/static-return-lifetime-infered.rs:7:16\n    |\n LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> {\n-   |                         -----     ----------------------- ...is required to be `'static` by this...\n+   |                         -----     ----------------------- ...is required to live as long as `'static` by this...\n    |                         |\n-   |                         this data with the anonymous lifetime `'_`...\n+   |                         this data with an anonymous lifetime `'_`...\n LL |         self.x.iter().map(|a| a.0)\n    |         ------ ^^^^\n    |         |\n    |         ...and is captured here\n    |\n-help: to permit non-static references in an `impl Trait` value, you can add an explicit bound for the anonymous lifetime `'_`\n+help: to permit non-static references in an `impl Trait` value, you can add an explicit bound for an anonymous lifetime `'_`\n    |\n LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> + '_ {\n    |                                                           ^^^^\n \n-error: cannot infer an appropriate lifetime\n+error[E0758]: cannot infer an appropriate lifetime\n   --> $DIR/static-return-lifetime-infered.rs:11:16\n    |\n LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> {\n-   |                        --------     ----------------------- ...is required to be `'static` by this...\n+   |                        --------     ----------------------- ...is required to live as long as `'static` by this...\n    |                        |\n    |                        this data with lifetime `'a`...\n LL |         self.x.iter().map(|a| a.0)"}, {"sha": "53fd658800a7aae45b635a63e1c9d12e182ec9e1", "filename": "src/test/ui/issues/issue-16922.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/539e9783dfb713b3af0a9967af8fd0639d700555/src%2Ftest%2Fui%2Fissues%2Fissue-16922.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/539e9783dfb713b3af0a9967af8fd0639d700555/src%2Ftest%2Fui%2Fissues%2Fissue-16922.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16922.stderr?ref=539e9783dfb713b3af0a9967af8fd0639d700555", "patch": "@@ -1,12 +1,12 @@\n-error: cannot infer an appropriate lifetime\n+error[E0758]: cannot infer an appropriate lifetime\n   --> $DIR/issue-16922.rs:4:14\n    |\n LL | fn foo<T: Any>(value: &T) -> Box<dyn Any> {\n-   |                       -- this data with the anonymous lifetime `'_`...\n+   |                       -- this data with an anonymous lifetime `'_`...\n LL |     Box::new(value) as Box<dyn Any>\n-   |              ^^^^^ ...is captured here with a `'static` requirement\n+   |              ^^^^^ ...is captured here requiring it to live as long as `'static`\n    |\n-help: to permit non-static references in a trait object value, you can add an explicit bound for the anonymous lifetime `'_`\n+help: to permit non-static references in a trait object value, you can add an explicit bound for an anonymous lifetime `'_`\n    |\n LL | fn foo<T: Any>(value: &T) -> Box<dyn Any + '_> {\n    |                                          ^^^^"}, {"sha": "04a06104faf9948e4772242cc4cb215555236157", "filename": "src/test/ui/object-lifetime/object-lifetime-default-from-box-error.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/539e9783dfb713b3af0a9967af8fd0639d700555/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-box-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/539e9783dfb713b3af0a9967af8fd0639d700555/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-box-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-box-error.stderr?ref=539e9783dfb713b3af0a9967af8fd0639d700555", "patch": "@@ -1,13 +1,13 @@\n-error: cannot infer an appropriate lifetime\n+error[E0758]: cannot infer an appropriate lifetime\n   --> $DIR/object-lifetime-default-from-box-error.rs:18:5\n    |\n LL | fn load(ss: &mut SomeStruct) -> Box<dyn SomeTrait> {\n-   |             --------------- this data with the anonymous lifetime `'_`...\n+   |             --------------- this data with an anonymous lifetime `'_`...\n ...\n LL |     ss.r\n-   |     ^^^^ ...is captured and required to be `'static` here\n+   |     ^^^^ ...is captured and required live as long as `'static` here\n    |\n-help: to permit non-static references in a trait object value, you can add an explicit bound for the anonymous lifetime `'_`\n+help: to permit non-static references in a trait object value, you can add an explicit bound for an anonymous lifetime `'_`\n    |\n LL | fn load(ss: &mut SomeStruct) -> Box<dyn SomeTrait + '_> {\n    |                                                   ^^^^"}, {"sha": "34cf131319a1c147c663d97e55f90cc6ac042297", "filename": "src/test/ui/regions/region-object-lifetime-in-coercion.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/539e9783dfb713b3af0a9967af8fd0639d700555/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/539e9783dfb713b3af0a9967af8fd0639d700555/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.stderr?ref=539e9783dfb713b3af0a9967af8fd0639d700555", "patch": "@@ -1,12 +1,12 @@\n-error: cannot infer an appropriate lifetime\n+error[E0758]: cannot infer an appropriate lifetime\n   --> $DIR/region-object-lifetime-in-coercion.rs:8:46\n    |\n LL | fn a(v: &[u8]) -> Box<dyn Foo + 'static> {\n-   |         ----- this data with the anonymous lifetime `'_`...\n+   |         ----- this data with an anonymous lifetime `'_`...\n LL |     let x: Box<dyn Foo + 'static> = Box::new(v);\n-   |                                              ^ ...is captured here with a `'static` requirement\n+   |                                              ^ ...is captured here requiring it to live as long as `'static`\n    |\n-help: consider changing the trait object's explicit `'static` bound to the anonymous lifetime `'_`\n+help: consider changing the trait object's explicit `'static` bound to an anonymous lifetime `'_`\n    |\n LL | fn a(v: &[u8]) -> Box<dyn Foo + '_> {\n    |                                 ^^\n@@ -15,15 +15,15 @@ help: alternatively, set an explicit `'static` lifetime in this parameter\n LL | fn a(v: &'static [u8]) -> Box<dyn Foo + 'static> {\n    |         ^^^^^^^^^^^^^\n \n-error: cannot infer an appropriate lifetime\n+error[E0758]: cannot infer an appropriate lifetime\n   --> $DIR/region-object-lifetime-in-coercion.rs:13:14\n    |\n LL | fn b(v: &[u8]) -> Box<dyn Foo + 'static> {\n-   |         ----- this data with the anonymous lifetime `'_`...\n+   |         ----- this data with an anonymous lifetime `'_`...\n LL |     Box::new(v)\n-   |              ^ ...is captured here with a `'static` requirement\n+   |              ^ ...is captured here requiring it to live as long as `'static`\n    |\n-help: consider changing the trait object's explicit `'static` bound to the anonymous lifetime `'_`\n+help: consider changing the trait object's explicit `'static` bound to an anonymous lifetime `'_`\n    |\n LL | fn b(v: &[u8]) -> Box<dyn Foo + '_> {\n    |                                 ^^\n@@ -32,16 +32,16 @@ help: alternatively, set an explicit `'static` lifetime in this parameter\n LL | fn b(v: &'static [u8]) -> Box<dyn Foo + 'static> {\n    |         ^^^^^^^^^^^^^\n \n-error: cannot infer an appropriate lifetime\n+error[E0758]: cannot infer an appropriate lifetime\n   --> $DIR/region-object-lifetime-in-coercion.rs:19:14\n    |\n LL | fn c(v: &[u8]) -> Box<dyn Foo> {\n-   |         ----- this data with the anonymous lifetime `'_`...\n+   |         ----- this data with an anonymous lifetime `'_`...\n ...\n LL |     Box::new(v)\n-   |              ^ ...is captured here with a `'static` requirement\n+   |              ^ ...is captured here requiring it to live as long as `'static`\n    |\n-help: to permit non-static references in a trait object value, you can add an explicit bound for the anonymous lifetime `'_`\n+help: to permit non-static references in a trait object value, you can add an explicit bound for an anonymous lifetime `'_`\n    |\n LL | fn c(v: &[u8]) -> Box<dyn Foo + '_> {\n    |                               ^^^^"}, {"sha": "be47ef589af8c03478af628e3e06a56a41fbee9d", "filename": "src/test/ui/regions/regions-close-object-into-object-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/539e9783dfb713b3af0a9967af8fd0639d700555/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/539e9783dfb713b3af0a9967af8fd0639d700555/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.stderr?ref=539e9783dfb713b3af0a9967af8fd0639d700555", "patch": "@@ -1,10 +1,10 @@\n-error: cannot infer an appropriate lifetime\n+error[E0758]: cannot infer an appropriate lifetime\n   --> $DIR/regions-close-object-into-object-2.rs:10:11\n    |\n LL | fn g<'a, T: 'static>(v: Box<dyn A<T> + 'a>) -> Box<dyn X + 'static> {\n    |                         ------------------ this data with lifetime `'a`...\n LL |     box B(&*v) as Box<dyn X>\n-   |           ^^^ ...is captured here with a `'static` requirement\n+   |           ^^^ ...is captured here requiring it to live as long as `'static`\n    |\n help: consider changing the trait object's explicit `'static` bound to lifetime `'a`\n    |"}, {"sha": "1b099c7d8bdf0282a477edab4dc1bed563d49ebe", "filename": "src/test/ui/regions/regions-close-object-into-object-4.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/539e9783dfb713b3af0a9967af8fd0639d700555/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/539e9783dfb713b3af0a9967af8fd0639d700555/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.stderr?ref=539e9783dfb713b3af0a9967af8fd0639d700555", "patch": "@@ -1,10 +1,10 @@\n-error: cannot infer an appropriate lifetime\n+error[E0758]: cannot infer an appropriate lifetime\n   --> $DIR/regions-close-object-into-object-4.rs:10:11\n    |\n LL | fn i<'a, T, U>(v: Box<dyn A<U>+'a>) -> Box<dyn X + 'static> {\n    |                   ---------------- this data with lifetime `'a`...\n LL |     box B(&*v) as Box<dyn X>\n-   |           ^^^ ...is captured here with a `'static` requirement\n+   |           ^^^ ...is captured here requiring it to live as long as `'static`\n    |\n help: consider changing the trait object's explicit `'static` bound to lifetime `'a`\n    |"}, {"sha": "e8baf44bd10aaa4ef2779720bd7c11ff5e44b6b2", "filename": "src/test/ui/regions/regions-proc-bound-capture.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/539e9783dfb713b3af0a9967af8fd0639d700555/src%2Ftest%2Fui%2Fregions%2Fregions-proc-bound-capture.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/539e9783dfb713b3af0a9967af8fd0639d700555/src%2Ftest%2Fui%2Fregions%2Fregions-proc-bound-capture.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-proc-bound-capture.stderr?ref=539e9783dfb713b3af0a9967af8fd0639d700555", "patch": "@@ -1,13 +1,13 @@\n-error: cannot infer an appropriate lifetime\n+error[E0758]: cannot infer an appropriate lifetime\n   --> $DIR/regions-proc-bound-capture.rs:9:14\n    |\n LL | fn static_proc(x: &isize) -> Box<dyn FnMut() -> (isize) + 'static> {\n-   |                   ------ this data with the anonymous lifetime `'_`...\n+   |                   ------ this data with an anonymous lifetime `'_`...\n LL |     // This is illegal, because the region bound on `proc` is 'static.\n LL |     Box::new(move || { *x })\n-   |              ^^^^^^^^^^^^^^ ...is captured here with a `'static` requirement\n+   |              ^^^^^^^^^^^^^^ ...is captured here requiring it to live as long as `'static`\n    |\n-help: consider changing the trait object's explicit `'static` bound to the anonymous lifetime `'_`\n+help: consider changing the trait object's explicit `'static` bound to an anonymous lifetime `'_`\n    |\n LL | fn static_proc(x: &isize) -> Box<dyn FnMut() -> (isize) + '_> {\n    |                                                           ^^"}, {"sha": "92e1473a5da7329c1fa945d83db30a6cea484e4b", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_impl_trait-async.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/539e9783dfb713b3af0a9967af8fd0639d700555/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/539e9783dfb713b3af0a9967af8fd0639d700555/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.stderr?ref=539e9783dfb713b3af0a9967af8fd0639d700555", "patch": "@@ -1,10 +1,10 @@\n-error: cannot infer an appropriate lifetime\n+error[E0758]: cannot infer an appropriate lifetime\n   --> $DIR/arbitrary_self_types_pin_lifetime_impl_trait-async.rs:8:16\n    |\n LL |     async fn f(self: Pin<&Self>) -> impl Clone { self }\n-   |                ^^^^  ----------     ---------- ...and required to be `'static` by this\n+   |                ^^^^  ----------     ---------- ...and required to live as long as `'static` by this\n    |                |     |\n-   |                |     this data with the anonymous lifetime `'_`...\n+   |                |     this data with an anonymous lifetime `'_`...\n    |                ...is captured here...\n \n error: aborting due to previous error"}, {"sha": "6721d41bb73c9e0cb68212f08b4088818938fad1", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_impl_trait.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/539e9783dfb713b3af0a9967af8fd0639d700555/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/539e9783dfb713b3af0a9967af8fd0639d700555/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.stderr?ref=539e9783dfb713b3af0a9967af8fd0639d700555", "patch": "@@ -1,13 +1,13 @@\n-error: cannot infer an appropriate lifetime\n+error[E0758]: cannot infer an appropriate lifetime\n   --> $DIR/arbitrary_self_types_pin_lifetime_impl_trait.rs:6:44\n    |\n LL |     fn f(self: Pin<&Self>) -> impl Clone { self }\n    |                ----------     ----------   ^^^^ ...and is captured here\n    |                |              |\n-   |                |              ...is required to be `'static` by this...\n-   |                this data with the anonymous lifetime `'_`...\n+   |                |              ...is required to live as long as `'static` by this...\n+   |                this data with an anonymous lifetime `'_`...\n    |\n-help: to permit non-static references in an `impl Trait` value, you can add an explicit bound for the anonymous lifetime `'_`\n+help: to permit non-static references in an `impl Trait` value, you can add an explicit bound for an anonymous lifetime `'_`\n    |\n LL |     fn f(self: Pin<&Self>) -> impl Clone + '_ { self }\n    |                                          ^^^^"}, {"sha": "ba56255af5b0cdbef974402b2b4c6830673bbb97", "filename": "src/test/ui/suggestions/lifetimes/missing-lifetimes-in-signature.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/539e9783dfb713b3af0a9967af8fd0639d700555/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/539e9783dfb713b3af0a9967af8fd0639d700555/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.stderr?ref=539e9783dfb713b3af0a9967af8fd0639d700555", "patch": "@@ -6,20 +6,20 @@ LL | fn baz<G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n    |        |\n    |        help: consider introducing lifetime `'a` here: `'a,`\n \n-error: cannot infer an appropriate lifetime\n+error[E0758]: cannot infer an appropriate lifetime\n   --> $DIR/missing-lifetimes-in-signature.rs:19:5\n    |\n LL |   fn foo<G, T>(g: G, dest: &mut T) -> impl FnOnce()\n-   |                            ------     ------------- ...is required to be `'static` by this...\n+   |                            ------     ------------- ...is required to live as long as `'static` by this...\n    |                            |\n-   |                            this data with the anonymous lifetime `'_`...\n+   |                            this data with an anonymous lifetime `'_`...\n ...\n LL | /     move || {\n LL | |         *dest = g.get();\n LL | |     }\n    | |_____^ ...and is captured here\n    |\n-help: to permit non-static references in an `impl Trait` value, you can add an explicit bound for the anonymous lifetime `'_`\n+help: to permit non-static references in an `impl Trait` value, you can add an explicit bound for an anonymous lifetime `'_`\n    |\n LL | fn foo<G, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n    |                                                   ^^^^"}, {"sha": "20d3640d4118e475ff6a21b2ce3d4202f6f0fb7f", "filename": "src/test/ui/underscore-lifetime/dyn-trait-underscore.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/539e9783dfb713b3af0a9967af8fd0639d700555/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/539e9783dfb713b3af0a9967af8fd0639d700555/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.stderr?ref=539e9783dfb713b3af0a9967af8fd0639d700555", "patch": "@@ -1,13 +1,13 @@\n-error: cannot infer an appropriate lifetime\n+error[E0758]: cannot infer an appropriate lifetime\n   --> $DIR/dyn-trait-underscore.rs:8:20\n    |\n LL | fn a<T>(items: &[T]) -> Box<dyn Iterator<Item=&T>> {\n-   |                ---- this data with the anonymous lifetime `'_`...\n+   |                ---- this data with an anonymous lifetime `'_`...\n LL |     //                      ^^^^^^^^^^^^^^^^^^^^^ bound *here* defaults to `'static`\n LL |     Box::new(items.iter())\n-   |     ---------------^^^^--- ...is captured and required to be `'static` here\n+   |     ---------------^^^^--- ...is captured and required live as long as `'static` here\n    |\n-help: to permit non-static references in a trait object value, you can add an explicit bound for the anonymous lifetime `'_`\n+help: to permit non-static references in a trait object value, you can add an explicit bound for an anonymous lifetime `'_`\n    |\n LL | fn a<T>(items: &[T]) -> Box<dyn Iterator<Item=&T> + '_> {\n    |                                                   ^^^^"}]}