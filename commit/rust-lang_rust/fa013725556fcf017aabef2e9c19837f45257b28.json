{"sha": "fa013725556fcf017aabef2e9c19837f45257b28", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhMDEzNzI1NTU2ZmNmMDE3YWFiZWYyZTljMTk4MzdmNDUyNTdiMjg=", "commit": {"author": {"name": "Ivan Dardi", "email": "ivy.dardi@gmail.com", "date": "2017-05-12T18:11:15Z"}, "committer": {"name": "Ivan Dardi", "email": "ivy.dardi@gmail.com", "date": "2017-05-12T18:11:15Z"}, "message": "Fix commit derp and update implementations and documentation", "tree": {"sha": "9fc46cc6fb61653f82ff626ca979ba88d0a953dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9fc46cc6fb61653f82ff626ca979ba88d0a953dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa013725556fcf017aabef2e9c19837f45257b28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa013725556fcf017aabef2e9c19837f45257b28", "html_url": "https://github.com/rust-lang/rust/commit/fa013725556fcf017aabef2e9c19837f45257b28", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa013725556fcf017aabef2e9c19837f45257b28/comments", "author": null, "committer": null, "parents": [{"sha": "e19ccb71c8427135a69d874623af68422aeeb9e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/e19ccb71c8427135a69d874623af68422aeeb9e9", "html_url": "https://github.com/rust-lang/rust/commit/e19ccb71c8427135a69d874623af68422aeeb9e9"}], "stats": {"total": 103, "additions": 100, "deletions": 3}, "files": [{"sha": "1277acfb8bbfc2f914a51929f6e52246751d1164", "filename": "src/libcore/iter/iterator.rs", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/fa013725556fcf017aabef2e9c19837f45257b28/src%2Flibcore%2Fiter%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa013725556fcf017aabef2e9c19837f45257b28/src%2Flibcore%2Fiter%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fiterator.rs?ref=fa013725556fcf017aabef2e9c19837f45257b28", "patch": "@@ -11,7 +11,7 @@\n use cmp::Ordering;\n \n use super::{Chain, Cycle, Cloned, Enumerate, Filter, FilterMap, FlatMap, Fuse};\n-use super::{Inspect, Map, Peekable, Scan, Skip, SkipWhile, Take, TakeWhile, Rev};\n+use super::{Inspect, Map, Peekable, Scan, Skip, SkipWhile, StepBy, Take, TakeWhile, Rev};\n use super::{Zip, Sum, Product};\n use super::{ChainState, FromIterator, ZipImpl};\n \n@@ -258,6 +258,40 @@ pub trait Iterator {\n         None\n     }\n \n+    /// Creates an iterator starting at the same point, but stepping by\n+    /// the given amount at each iteration.\n+    ///\n+    /// Note that it will always return the first element of the range,\n+    /// regardless of the step given.\n+    ///\n+    /// # Panics\n+    ///\n+    /// If the given step is `0`, the method will panic if debug assertions are\n+    /// enabled.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// #![feature(iterator_step_by)]\n+    /// let a = [0, 1, 2, 3, 4, 5];\n+    /// let mut iter = a.into_iter().step_by(2);\n+    ///\n+    /// assert_eq!(iter.next(), Some(&0));\n+    /// assert_eq!(iter.next(), Some(&2));\n+    /// assert_eq!(iter.next(), Some(&4));\n+    /// assert_eq!(iter.next(), None);\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"iterator_step_by\",\n+               reason = \"unstable replacement of Range::step_by\",\n+               issue = \"27741\")]\n+    fn step_by(self, step: usize) -> StepBy<Self> where Self: Sized {\n+        assert!(step != 0);\n+        StepBy{iter: self, step: step - 1, first_take: true}\n+    }\n+\n     /// Takes two iterators and creates a new iterator over both in sequence.\n     ///\n     /// `chain()` will return a new iterator which will first iterate over"}, {"sha": "420ff0f71193b47bdcf843db68558b27836c8e90", "filename": "src/libcore/iter/mod.rs", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/fa013725556fcf017aabef2e9c19837f45257b28/src%2Flibcore%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa013725556fcf017aabef2e9c19837f45257b28/src%2Flibcore%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fmod.rs?ref=fa013725556fcf017aabef2e9c19837f45257b28", "patch": "@@ -313,7 +313,7 @@ pub use self::iterator::Iterator;\n pub use self::range::Step;\n #[unstable(feature = \"step_by\", reason = \"recent addition\",\n            issue = \"27741\")]\n-pub use self::range::StepBy;\n+pub use self::range::StepBy as DeprecatedStepBy;\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::sources::{Repeat, repeat};\n@@ -520,6 +520,41 @@ impl<I> Iterator for Cycle<I> where I: Clone + Iterator {\n #[unstable(feature = \"fused\", issue = \"35602\")]\n impl<I> FusedIterator for Cycle<I> where I: Clone + Iterator {}\n \n+/// An iterator that steps by n elements every iteration.\n+///\n+/// This `struct` is created by the [`step_by`] method on [`Iterator`]. See\n+/// its documentation for more.\n+///\n+/// [`step_by`]: trait.Iterator.html#method.step_by\n+/// [`Iterator`]: trait.Iterator.html\n+#[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n+#[unstable(feature = \"iterator_step_by\",\n+           reason = \"unstable replacement of Range::step_by\",\n+           issue = \"27741\")]\n+#[derive(Clone, Debug)]\n+pub struct StepBy<I> {\n+    iter: I,\n+    step: usize,\n+    first_take: bool,\n+}\n+\n+#[unstable(feature = \"iterator_step_by\",\n+           reason = \"unstable replacement of Range::step_by\",\n+           issue = \"27741\")]\n+impl<I> Iterator for StepBy<I> where I: Iterator {\n+    type Item = I::Item;\n+\n+    #[inline]\n+    fn next(&mut self) -> Option<Self::Item> {\n+        if self.first_take {\n+            self.first_take = false;\n+            self.iter.next()\n+        } else {\n+            self.iter.nth(self.step)\n+        }\n+    }\n+}\n+\n /// An iterator that strings two iterators together.\n ///\n /// This `struct` is created by the [`chain`] method on [`Iterator`]. See its"}, {"sha": "ad91ba9be58f210f87032b2b62e4f597c108cfe1", "filename": "src/libcore/tests/iter.rs", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/fa013725556fcf017aabef2e9c19837f45257b28/src%2Flibcore%2Ftests%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa013725556fcf017aabef2e9c19837f45257b28/src%2Flibcore%2Ftests%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fiter.rs?ref=fa013725556fcf017aabef2e9c19837f45257b28", "patch": "@@ -144,6 +144,33 @@ fn test_iterator_chain_find() {\n     assert_eq!(iter.next(), None);\n }\n \n+#[test]\n+fn test_iterator_step_by() {\n+    // Identity\n+    // Replace with (0..).step_by(1) after Range::step_by gets removed\n+    let mut it = Iterator::step_by((0..), 1).take(3);\n+    assert_eq!(it.next(), Some(0));\n+    assert_eq!(it.next(), Some(1));\n+    assert_eq!(it.next(), Some(2));\n+    assert_eq!(it.next(), None);\n+\n+    // Replace with (0..).step_by(3) after Range::step_by gets removed\n+    let mut it = Iterator::step_by((0..), 3).take(4);\n+    assert_eq!(it.next(), Some(0));\n+    assert_eq!(it.next(), Some(3));\n+    assert_eq!(it.next(), Some(6));\n+    assert_eq!(it.next(), Some(9));\n+    assert_eq!(it.next(), None);\n+}\n+\n+#[test]\n+#[should_panic]\n+fn test_iterator_step_by_zero() {\n+    // Replace with (0..).step_by(0) after Range::step_by gets removed\n+    let mut it = Iterator::step_by((0..), 0);\n+    it.next();\n+}\n+\n #[test]\n fn test_filter_map() {\n     let it = (0..).step_by(1).take(10)\n@@ -1119,4 +1146,4 @@ fn test_step_replace_no_between() {\n     let y = x.replace_one();\n     assert_eq!(x, 1);\n     assert_eq!(y, 5);\n-}\n\\ No newline at end of file\n+}"}, {"sha": "c52155ead4f0b2774fe73db9cb4f73048a475dc4", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fa013725556fcf017aabef2e9c19837f45257b28/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa013725556fcf017aabef2e9c19837f45257b28/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=fa013725556fcf017aabef2e9c19837f45257b28", "patch": "@@ -20,6 +20,7 @@\n #![feature(fixed_size_array)]\n #![feature(flt2dec)]\n #![feature(fmt_internals)]\n+#![feature(iterator_step_by)]\n #![feature(i128_type)]\n #![feature(iter_rfind)]\n #![feature(libc)]"}]}