{"sha": "cb6c13977aa23f1d814a5504cf8b03a76743d06b", "node_id": "C_kwDOAAsO6NoAKGNiNmMxMzk3N2FhMjNmMWQ4MTRhNTUwNGNmOGIwM2E3Njc0M2QwNmI", "commit": {"author": {"name": "Fabian Wolff", "email": "fabian.wolff@alumni.ethz.ch", "date": "2021-09-24T16:55:14Z"}, "committer": {"name": "Fabian Wolff", "email": "fabian.wolff@alumni.ethz.ch", "date": "2021-09-24T18:15:19Z"}, "message": "Make error message for malformed `fn`/`fn_mut` lang item more specific", "tree": {"sha": "01d22cf8a75d04551bb8d47949f0c36c0f3f5543", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/01d22cf8a75d04551bb8d47949f0c36c0f3f5543"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb6c13977aa23f1d814a5504cf8b03a76743d06b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb6c13977aa23f1d814a5504cf8b03a76743d06b", "html_url": "https://github.com/rust-lang/rust/commit/cb6c13977aa23f1d814a5504cf8b03a76743d06b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb6c13977aa23f1d814a5504cf8b03a76743d06b/comments", "author": {"login": "FabianWolff", "id": 16052130, "node_id": "MDQ6VXNlcjE2MDUyMTMw", "avatar_url": "https://avatars.githubusercontent.com/u/16052130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FabianWolff", "html_url": "https://github.com/FabianWolff", "followers_url": "https://api.github.com/users/FabianWolff/followers", "following_url": "https://api.github.com/users/FabianWolff/following{/other_user}", "gists_url": "https://api.github.com/users/FabianWolff/gists{/gist_id}", "starred_url": "https://api.github.com/users/FabianWolff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FabianWolff/subscriptions", "organizations_url": "https://api.github.com/users/FabianWolff/orgs", "repos_url": "https://api.github.com/users/FabianWolff/repos", "events_url": "https://api.github.com/users/FabianWolff/events{/privacy}", "received_events_url": "https://api.github.com/users/FabianWolff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "FabianWolff", "id": 16052130, "node_id": "MDQ6VXNlcjE2MDUyMTMw", "avatar_url": "https://avatars.githubusercontent.com/u/16052130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FabianWolff", "html_url": "https://github.com/FabianWolff", "followers_url": "https://api.github.com/users/FabianWolff/followers", "following_url": "https://api.github.com/users/FabianWolff/following{/other_user}", "gists_url": "https://api.github.com/users/FabianWolff/gists{/gist_id}", "starred_url": "https://api.github.com/users/FabianWolff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FabianWolff/subscriptions", "organizations_url": "https://api.github.com/users/FabianWolff/orgs", "repos_url": "https://api.github.com/users/FabianWolff/repos", "events_url": "https://api.github.com/users/FabianWolff/events{/privacy}", "received_events_url": "https://api.github.com/users/FabianWolff/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4337089098e5adefa56ef249a5b200cb0693fcf5", "url": "https://api.github.com/repos/rust-lang/rust/commits/4337089098e5adefa56ef249a5b200cb0693fcf5", "html_url": "https://github.com/rust-lang/rust/commit/4337089098e5adefa56ef249a5b200cb0693fcf5"}], "stats": {"total": 49, "additions": 34, "deletions": 15}, "files": [{"sha": "df9399c56c7e949a2eb567b01fd2a815526dbcd6", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 30, "deletions": 11, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/cb6c13977aa23f1d814a5504cf8b03a76743d06b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6c13977aa23f1d814a5504cf8b03a76743d06b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=cb6c13977aa23f1d814a5504cf8b03a76743d06b", "patch": "@@ -203,33 +203,52 @@ pub fn check_trait_item(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n \n     let encl_trait_hir_id = tcx.hir().get_parent_item(hir_id);\n     let encl_trait = tcx.hir().expect_item(encl_trait_hir_id);\n-    if [tcx.lang_items().fn_trait(), tcx.lang_items().fn_mut_trait()]\n-        .contains(&Some(encl_trait.def_id.to_def_id()))\n-        && trait_item.ident.name.to_ident_string() == \"call\"\n+    let encl_trait_def_id = encl_trait.def_id.to_def_id();\n+    let fn_lang_item_name = if Some(encl_trait_def_id) == tcx.lang_items().fn_trait() {\n+        Some(\"fn\")\n+    } else if Some(encl_trait_def_id) == tcx.lang_items().fn_mut_trait() {\n+        Some(\"fn_mut\")\n+    } else {\n+        None\n+    };\n+\n+    if let (Some(fn_lang_item_name), \"call\") =\n+        (fn_lang_item_name, trait_item.ident.name.to_ident_string().as_str())\n     {\n         // We are looking at the `call` function of the `fn` or `fn_mut` lang item.\n         // Do some rudimentary sanity checking to avoid an ICE later (issue #83471).\n-        if let Some(method_sig @ hir::FnSig { decl, .. }) = method_sig {\n+        if let Some(hir::FnSig { decl, span, .. }) = method_sig {\n             if let &[self_ty, _] = &decl.inputs {\n                 if !matches!(self_ty.kind, hir::TyKind::Rptr(_, _)) {\n-                    tcx.sess.struct_span_err(\n-                        self_ty.span,\n-                        \"first argument of `call` in `fn`/`fn_mut` lang item must be a reference\",\n-                    ).emit();\n+                    tcx.sess\n+                        .struct_span_err(\n+                            self_ty.span,\n+                            &format!(\n+                                \"first argument of `call` in `{}` lang item must be a reference\",\n+                                fn_lang_item_name\n+                            ),\n+                        )\n+                        .emit();\n                 }\n             } else {\n                 tcx.sess\n                     .struct_span_err(\n-                        method_sig.span,\n-                        \"`call` function in `fn`/`fn_mut` lang item takes exactly two arguments\",\n+                        *span,\n+                        &format!(\n+                            \"`call` function in `{}` lang item takes exactly two arguments\",\n+                            fn_lang_item_name\n+                        ),\n                     )\n                     .emit();\n             }\n         } else {\n             tcx.sess\n                 .struct_span_err(\n                     trait_item.span,\n-                    \"`call` trait item in `fn`/`fn_mut` lang item must be a function\",\n+                    &format!(\n+                        \"`call` trait item in `{}` lang item must be a function\",\n+                        fn_lang_item_name\n+                    ),\n                 )\n                 .emit();\n         }"}, {"sha": "52bd8136d9c0c07719633b7524cd6a59865cbe2c", "filename": "src/test/ui/lang-items/fn-fn_mut-call-ill-formed.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb6c13977aa23f1d814a5504cf8b03a76743d06b/src%2Ftest%2Fui%2Flang-items%2Ffn-fn_mut-call-ill-formed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb6c13977aa23f1d814a5504cf8b03a76743d06b/src%2Ftest%2Fui%2Flang-items%2Ffn-fn_mut-call-ill-formed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flang-items%2Ffn-fn_mut-call-ill-formed.rs?ref=cb6c13977aa23f1d814a5504cf8b03a76743d06b", "patch": "@@ -8,13 +8,13 @@\n #[lang = \"fn\"]\n trait MyFn<T> {\n     const call: i32 = 42;\n-    //~^ ERROR: `call` trait item in `fn`/`fn_mut` lang item must be a function\n+    //~^ ERROR: `call` trait item in `fn` lang item must be a function\n }\n \n #[lang = \"fn_mut\"]\n trait MyFnMut<T> {\n     fn call(i: i32, j: i32) -> i32 { i + j }\n-    //~^ ERROR: first argument of `call` in `fn`/`fn_mut` lang item must be a reference\n+    //~^ ERROR: first argument of `call` in `fn_mut` lang item must be a reference\n }\n \n fn main() {"}, {"sha": "82bdae270c8bb316d6c218d385247a76c0f4af96", "filename": "src/test/ui/lang-items/fn-fn_mut-call-ill-formed.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb6c13977aa23f1d814a5504cf8b03a76743d06b/src%2Ftest%2Fui%2Flang-items%2Ffn-fn_mut-call-ill-formed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb6c13977aa23f1d814a5504cf8b03a76743d06b/src%2Ftest%2Fui%2Flang-items%2Ffn-fn_mut-call-ill-formed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flang-items%2Ffn-fn_mut-call-ill-formed.stderr?ref=cb6c13977aa23f1d814a5504cf8b03a76743d06b", "patch": "@@ -1,10 +1,10 @@\n-error: `call` trait item in `fn`/`fn_mut` lang item must be a function\n+error: `call` trait item in `fn` lang item must be a function\n   --> $DIR/fn-fn_mut-call-ill-formed.rs:10:5\n    |\n LL |     const call: i32 = 42;\n    |     ^^^^^^^^^^^^^^^^^^^^^\n \n-error: first argument of `call` in `fn`/`fn_mut` lang item must be a reference\n+error: first argument of `call` in `fn_mut` lang item must be a reference\n   --> $DIR/fn-fn_mut-call-ill-formed.rs:16:16\n    |\n LL |     fn call(i: i32, j: i32) -> i32 { i + j }"}]}