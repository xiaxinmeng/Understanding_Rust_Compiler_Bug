{"sha": "76e216f29b44322b52c49d8c56f20763beb271b5", "node_id": "C_kwDOAAsO6NoAKDc2ZTIxNmYyOWI0NDMyMmI1MmM0OWQ4YzU2ZjIwNzYzYmViMjcxYjU", "commit": {"author": {"name": "Lukas Markeffsky", "email": "@", "date": "2023-01-14T10:48:43Z"}, "committer": {"name": "Lukas Markeffsky", "email": "@", "date": "2023-01-14T10:58:41Z"}, "message": "Use associated items of `char` instead of freestanding items in `core::char`", "tree": {"sha": "057e5b41a888ae84795f858a3a9d8d159e32ee1c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/057e5b41a888ae84795f858a3a9d8d159e32ee1c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76e216f29b44322b52c49d8c56f20763beb271b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76e216f29b44322b52c49d8c56f20763beb271b5", "html_url": "https://github.com/rust-lang/rust/commit/76e216f29b44322b52c49d8c56f20763beb271b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76e216f29b44322b52c49d8c56f20763beb271b5/comments", "author": null, "committer": null, "parents": [{"sha": "c0b87359599629d69a7b37318088dac3a5d67c9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0b87359599629d69a7b37318088dac3a5d67c9c", "html_url": "https://github.com/rust-lang/rust/commit/c0b87359599629d69a7b37318088dac3a5d67c9c"}], "stats": {"total": 66, "additions": 21, "deletions": 45}, "files": [{"sha": "f423dcb030afaa3fb2fed98c9600c46631b4c2d8", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/76e216f29b44322b52c49d8c56f20763beb271b5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76e216f29b44322b52c49d8c56f20763beb271b5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=76e216f29b44322b52c49d8c56f20763beb271b5", "patch": "@@ -22,7 +22,6 @@ use rustc_target::spec::abi::Abi;\n use smallvec::SmallVec;\n \n use std::cell::Cell;\n-use std::char;\n use std::collections::BTreeMap;\n use std::fmt::{self, Write as _};\n use std::iter;"}, {"sha": "ed03b22c61fd6a2eb20675ee7de0f799322e53b5", "filename": "compiler/rustc_span/src/lev_distance/tests.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/76e216f29b44322b52c49d8c56f20763beb271b5/compiler%2Frustc_span%2Fsrc%2Flev_distance%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76e216f29b44322b52c49d8c56f20763beb271b5/compiler%2Frustc_span%2Fsrc%2Flev_distance%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flev_distance%2Ftests.rs?ref=76e216f29b44322b52c49d8c56f20763beb271b5", "patch": "@@ -2,9 +2,8 @@ use super::*;\n \n #[test]\n fn test_lev_distance() {\n-    use std::char::{from_u32, MAX};\n     // Test bytelength agnosticity\n-    for c in (0..MAX as u32).filter_map(from_u32).map(|i| i.to_string()) {\n+    for c in (0..char::MAX as u32).filter_map(char::from_u32).map(|i| i.to_string()) {\n         assert_eq!(lev_distance(&c[..], &c[..], usize::MAX), Some(0));\n     }\n "}, {"sha": "270e2e34396e46fbea83c00af1f58479885a1ca1", "filename": "library/alloc/src/string.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/76e216f29b44322b52c49d8c56f20763beb271b5/library%2Falloc%2Fsrc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76e216f29b44322b52c49d8c56f20763beb271b5/library%2Falloc%2Fsrc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstring.rs?ref=76e216f29b44322b52c49d8c56f20763beb271b5", "patch": "@@ -42,8 +42,6 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-#[cfg(not(no_global_oom_handling))]\n-use core::char::{decode_utf16, REPLACEMENT_CHARACTER};\n use core::error::Error;\n use core::fmt;\n use core::hash;\n@@ -683,7 +681,7 @@ impl String {\n         // This isn't done via collect::<Result<_, _>>() for performance reasons.\n         // FIXME: the function can be simplified again when #48994 is closed.\n         let mut ret = String::with_capacity(v.len());\n-        for c in decode_utf16(v.iter().cloned()) {\n+        for c in char::decode_utf16(v.iter().cloned()) {\n             if let Ok(c) = c {\n                 ret.push(c);\n             } else {\n@@ -722,7 +720,9 @@ impl String {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn from_utf16_lossy(v: &[u16]) -> String {\n-        decode_utf16(v.iter().cloned()).map(|r| r.unwrap_or(REPLACEMENT_CHARACTER)).collect()\n+        char::decode_utf16(v.iter().cloned())\n+            .map(|r| r.unwrap_or(char::REPLACEMENT_CHARACTER))\n+            .collect()\n     }\n \n     /// Decomposes a `String` into its raw components."}, {"sha": "dbfe251f2bb71e7455dc1aa2e5b14f634cc072a0", "filename": "library/core/src/char/decode.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/76e216f29b44322b52c49d8c56f20763beb271b5/library%2Fcore%2Fsrc%2Fchar%2Fdecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76e216f29b44322b52c49d8c56f20763beb271b5/library%2Fcore%2Fsrc%2Fchar%2Fdecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fdecode.rs?ref=76e216f29b44322b52c49d8c56f20763beb271b5", "patch": "@@ -3,8 +3,6 @@\n use crate::error::Error;\n use crate::fmt;\n \n-use super::from_u32_unchecked;\n-\n /// An iterator that decodes UTF-16 encoded code points from an iterator of `u16`s.\n ///\n /// This `struct` is created by the [`decode_utf16`] method on [`char`]. See its\n@@ -49,7 +47,7 @@ impl<I: Iterator<Item = u16>> Iterator for DecodeUtf16<I> {\n \n         if !u.is_utf16_surrogate() {\n             // SAFETY: not a surrogate\n-            Some(Ok(unsafe { from_u32_unchecked(u as u32) }))\n+            Some(Ok(unsafe { char::from_u32_unchecked(u as u32) }))\n         } else if u >= 0xDC00 {\n             // a trailing surrogate\n             Some(Err(DecodeUtf16Error { code: u }))\n@@ -69,7 +67,7 @@ impl<I: Iterator<Item = u16>> Iterator for DecodeUtf16<I> {\n             // all ok, so lets decode it.\n             let c = (((u & 0x3ff) as u32) << 10 | (u2 & 0x3ff) as u32) + 0x1_0000;\n             // SAFETY: we checked that it's a legal unicode value\n-            Some(Ok(unsafe { from_u32_unchecked(c) }))\n+            Some(Ok(unsafe { char::from_u32_unchecked(c) }))\n         }\n     }\n "}, {"sha": "9bc97ea0bff18d403db69d74062aed7a702771b2", "filename": "library/core/src/char/methods.rs", "status": "modified", "additions": 4, "deletions": 20, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/76e216f29b44322b52c49d8c56f20763beb271b5/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76e216f29b44322b52c49d8c56f20763beb271b5/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs?ref=76e216f29b44322b52c49d8c56f20763beb271b5", "patch": "@@ -53,15 +53,13 @@ impl char {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// use std::char::decode_utf16;\n-    ///\n     /// // \ud834\udd1emus<invalid>ic<invalid>\n     /// let v = [\n     ///     0xD834, 0xDD1E, 0x006d, 0x0075, 0x0073, 0xDD1E, 0x0069, 0x0063, 0xD834,\n     /// ];\n     ///\n     /// assert_eq!(\n-    ///     decode_utf16(v)\n+    ///     char::decode_utf16(v)\n     ///         .map(|r| r.map_err(|e| e.unpaired_surrogate()))\n     ///         .collect::<Vec<_>>(),\n     ///     vec![\n@@ -77,16 +75,14 @@ impl char {\n     /// A lossy decoder can be obtained by replacing `Err` results with the replacement character:\n     ///\n     /// ```\n-    /// use std::char::{decode_utf16, REPLACEMENT_CHARACTER};\n-    ///\n     /// // \ud834\udd1emus<invalid>ic<invalid>\n     /// let v = [\n     ///     0xD834, 0xDD1E, 0x006d, 0x0075, 0x0073, 0xDD1E, 0x0069, 0x0063, 0xD834,\n     /// ];\n     ///\n     /// assert_eq!(\n-    ///     decode_utf16(v)\n-    ///        .map(|r| r.unwrap_or(REPLACEMENT_CHARACTER))\n+    ///     char::decode_utf16(v)\n+    ///        .map(|r| r.unwrap_or(char::REPLACEMENT_CHARACTER))\n     ///        .collect::<String>(),\n     ///     \"\ud834\udd1emus\ufffdic\ufffd\"\n     /// );\n@@ -123,8 +119,6 @@ impl char {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// use std::char;\n-    ///\n     /// let c = char::from_u32(0x2764);\n     ///\n     /// assert_eq!(Some('\u2764'), c);\n@@ -133,8 +127,6 @@ impl char {\n     /// Returning `None` when the input is not a valid `char`:\n     ///\n     /// ```\n-    /// use std::char;\n-    ///\n     /// let c = char::from_u32(0x110000);\n     ///\n     /// assert_eq!(None, c);\n@@ -176,8 +168,6 @@ impl char {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// use std::char;\n-    ///\n     /// let c = unsafe { char::from_u32_unchecked(0x2764) };\n     ///\n     /// assert_eq!('\u2764', c);\n@@ -210,8 +200,6 @@ impl char {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// use std::char;\n-    ///\n     /// let c = char::from_digit(4, 10);\n     ///\n     /// assert_eq!(Some('4'), c);\n@@ -225,8 +213,6 @@ impl char {\n     /// Returning `None` when the input is not a digit:\n     ///\n     /// ```\n-    /// use std::char;\n-    ///\n     /// let c = char::from_digit(20, 10);\n     ///\n     /// assert_eq!(None, c);\n@@ -235,8 +221,6 @@ impl char {\n     /// Passing a large radix, causing a panic:\n     ///\n     /// ```should_panic\n-    /// use std::char;\n-    ///\n     /// // this panics\n     /// let _c = char::from_digit(1, 37);\n     /// ```\n@@ -1786,7 +1770,7 @@ pub fn encode_utf16_raw(mut code: u32, dst: &mut [u16]) -> &mut [u16] {\n         } else {\n             panic!(\n                 \"encode_utf16: need {} units to encode U+{:X}, but the buffer has {}\",\n-                from_u32_unchecked(code).len_utf16(),\n+                char::from_u32_unchecked(code).len_utf16(),\n                 code,\n                 dst.len(),\n             )"}, {"sha": "8ec78e88733cf186411333a82654d373d439bccc", "filename": "library/core/src/char/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76e216f29b44322b52c49d8c56f20763beb271b5/library%2Fcore%2Fsrc%2Fchar%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76e216f29b44322b52c49d8c56f20763beb271b5/library%2Fcore%2Fsrc%2Fchar%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fmod.rs?ref=76e216f29b44322b52c49d8c56f20763beb271b5", "patch": "@@ -189,7 +189,7 @@ impl Iterator for EscapeUnicode {\n             }\n             EscapeUnicodeState::Value => {\n                 let hex_digit = ((self.c as u32) >> (self.hex_digit_idx * 4)) & 0xf;\n-                let c = from_digit(hex_digit, 16).unwrap();\n+                let c = char::from_digit(hex_digit, 16).unwrap();\n                 if self.hex_digit_idx == 0 {\n                     self.state = EscapeUnicodeState::RightBrace;\n                 } else {"}, {"sha": "1ad33cc9733297d3d5b10a81c47887c6350c5ef4", "filename": "library/core/src/iter/range.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/76e216f29b44322b52c49d8c56f20763beb271b5/library%2Fcore%2Fsrc%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76e216f29b44322b52c49d8c56f20763beb271b5/library%2Fcore%2Fsrc%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Frange.rs?ref=76e216f29b44322b52c49d8c56f20763beb271b5", "patch": "@@ -1,4 +1,3 @@\n-use crate::char;\n use crate::convert::TryFrom;\n use crate::mem;\n use crate::ops::{self, Try};"}, {"sha": "95c682f42d0c93ff63233bd807021dfab1ffc31c", "filename": "library/core/src/str/iter.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/76e216f29b44322b52c49d8c56f20763beb271b5/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76e216f29b44322b52c49d8c56f20763beb271b5/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fiter.rs?ref=76e216f29b44322b52c49d8c56f20763beb271b5", "patch": "@@ -1,6 +1,6 @@\n //! Iterators for `str` methods.\n \n-use crate::char;\n+use crate::char as char_mod;\n use crate::fmt::{self, Write};\n use crate::iter::{Chain, FlatMap, Flatten};\n use crate::iter::{Copied, Filter, FusedIterator, Map, TrustedLen};\n@@ -1455,23 +1455,23 @@ impl FusedIterator for EncodeUtf16<'_> {}\n #[derive(Clone, Debug)]\n pub struct EscapeDebug<'a> {\n     pub(super) inner: Chain<\n-        Flatten<option::IntoIter<char::EscapeDebug>>,\n-        FlatMap<Chars<'a>, char::EscapeDebug, CharEscapeDebugContinue>,\n+        Flatten<option::IntoIter<char_mod::EscapeDebug>>,\n+        FlatMap<Chars<'a>, char_mod::EscapeDebug, CharEscapeDebugContinue>,\n     >,\n }\n \n /// The return type of [`str::escape_default`].\n #[stable(feature = \"str_escape\", since = \"1.34.0\")]\n #[derive(Clone, Debug)]\n pub struct EscapeDefault<'a> {\n-    pub(super) inner: FlatMap<Chars<'a>, char::EscapeDefault, CharEscapeDefault>,\n+    pub(super) inner: FlatMap<Chars<'a>, char_mod::EscapeDefault, CharEscapeDefault>,\n }\n \n /// The return type of [`str::escape_unicode`].\n #[stable(feature = \"str_escape\", since = \"1.34.0\")]\n #[derive(Clone, Debug)]\n pub struct EscapeUnicode<'a> {\n-    pub(super) inner: FlatMap<Chars<'a>, char::EscapeUnicode, CharEscapeUnicode>,\n+    pub(super) inner: FlatMap<Chars<'a>, char_mod::EscapeUnicode, CharEscapeUnicode>,\n }\n \n macro_rules! escape_types_impls {"}, {"sha": "0f91ffe2dfc94802acf63cea267020b84fd63e90", "filename": "library/core/tests/iter/range.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/76e216f29b44322b52c49d8c56f20763beb271b5/library%2Fcore%2Ftests%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76e216f29b44322b52c49d8c56f20763beb271b5/library%2Fcore%2Ftests%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Frange.rs?ref=76e216f29b44322b52c49d8c56f20763beb271b5", "patch": "@@ -26,7 +26,6 @@ fn test_range() {\n \n #[test]\n fn test_char_range() {\n-    use std::char;\n     // Miri is too slow\n     let from = if cfg!(miri) { char::from_u32(0xD800 - 10).unwrap() } else { '\\0' };\n     let to = if cfg!(miri) { char::from_u32(0xDFFF + 10).unwrap() } else { char::MAX };"}, {"sha": "5b1bfb30983b2aa1015fa57e0ffaf582115d1dc3", "filename": "library/proc_macro/src/bridge/rpc.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/76e216f29b44322b52c49d8c56f20763beb271b5/library%2Fproc_macro%2Fsrc%2Fbridge%2Frpc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76e216f29b44322b52c49d8c56f20763beb271b5/library%2Fproc_macro%2Fsrc%2Fbridge%2Frpc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Fbridge%2Frpc.rs?ref=76e216f29b44322b52c49d8c56f20763beb271b5", "patch": "@@ -1,7 +1,6 @@\n //! Serialization for client-server communication.\n \n use std::any::Any;\n-use std::char;\n use std::io::Write;\n use std::num::NonZeroU32;\n use std::str;"}, {"sha": "c2cd48470bd9adf0a271681325467e309c9fc3af", "filename": "library/std/src/sys/windows/stdio.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/76e216f29b44322b52c49d8c56f20763beb271b5/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76e216f29b44322b52c49d8c56f20763beb271b5/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fstdio.rs?ref=76e216f29b44322b52c49d8c56f20763beb271b5", "patch": "@@ -1,6 +1,5 @@\n #![unstable(issue = \"none\", feature = \"windows_stdio\")]\n \n-use crate::char::decode_utf16;\n use crate::cmp;\n use crate::io;\n use crate::mem::MaybeUninit;\n@@ -369,7 +368,7 @@ fn read_u16s(handle: c::HANDLE, buf: &mut [MaybeUninit<u16>]) -> io::Result<usiz\n #[allow(unused)]\n fn utf16_to_utf8(utf16: &[u16], utf8: &mut [u8]) -> io::Result<usize> {\n     let mut written = 0;\n-    for chr in decode_utf16(utf16.iter().cloned()) {\n+    for chr in char::decode_utf16(utf16.iter().cloned()) {\n         match chr {\n             Ok(chr) => {\n                 chr.encode_utf8(&mut utf8[written..]);"}, {"sha": "e202d17e1c23bd8a92cbc27d9a62b97a98e69bab", "filename": "library/std/src/sys_common/wtf8.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/76e216f29b44322b52c49d8c56f20763beb271b5/library%2Fstd%2Fsrc%2Fsys_common%2Fwtf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76e216f29b44322b52c49d8c56f20763beb271b5/library%2Fstd%2Fsrc%2Fsys_common%2Fwtf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fwtf8.rs?ref=76e216f29b44322b52c49d8c56f20763beb271b5", "patch": "@@ -18,10 +18,10 @@\n #[cfg(test)]\n mod tests;\n \n+use core::char::{encode_utf16_raw, encode_utf8_raw};\n use core::str::next_code_point;\n \n use crate::borrow::Cow;\n-use crate::char;\n use crate::collections::TryReserveError;\n use crate::fmt;\n use crate::hash::{Hash, Hasher};\n@@ -235,7 +235,7 @@ impl Wtf8Buf {\n     /// This does **not** include the WTF-8 concatenation check or `is_known_utf8` check.\n     fn push_code_point_unchecked(&mut self, code_point: CodePoint) {\n         let mut bytes = [0; 4];\n-        let bytes = char::encode_utf8_raw(code_point.value, &mut bytes);\n+        let bytes = encode_utf8_raw(code_point.value, &mut bytes);\n         self.bytes.extend_from_slice(bytes)\n     }\n \n@@ -939,7 +939,7 @@ impl<'a> Iterator for EncodeWide<'a> {\n \n         let mut buf = [0; 2];\n         self.code_points.next().map(|code_point| {\n-            let n = char::encode_utf16_raw(code_point.value, &mut buf).len();\n+            let n = encode_utf16_raw(code_point.value, &mut buf).len();\n             if n == 2 {\n                 self.extra = buf[1];\n             }"}]}