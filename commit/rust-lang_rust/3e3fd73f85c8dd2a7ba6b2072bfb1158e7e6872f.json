{"sha": "3e3fd73f85c8dd2a7ba6b2072bfb1158e7e6872f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlM2ZkNzNmODVjOGRkMmE3YmE2YjIwNzJiZmIxMTU4ZTdlNjg3MmY=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-04-05T23:29:19Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-04-19T10:05:23Z"}, "message": "Disallow values for `-C no-*` and `-Z no-*` options again.\n\nWith the exception of `-C no-redzone`, because that could take a value\nbefore this PR.\n\nThis partially undoes one of the earlier commits in this PR, which added\nthe ability to take a value to all boolean options that lacked it.\n\nThe help output for these options looks like this:\n```\n    -C         no-vectorize-slp=val -- disable LLVM's SLP vectorization pass\n```\nThe \"=val\" part is a lie, but hopefully this will be fixed in the future.", "tree": {"sha": "614b88e0bc6f933e105e27cf009df2f3635f13fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/614b88e0bc6f933e105e27cf009df2f3635f13fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e3fd73f85c8dd2a7ba6b2072bfb1158e7e6872f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e3fd73f85c8dd2a7ba6b2072bfb1158e7e6872f", "html_url": "https://github.com/rust-lang/rust/commit/3e3fd73f85c8dd2a7ba6b2072bfb1158e7e6872f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e3fd73f85c8dd2a7ba6b2072bfb1158e7e6872f/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc0653987215293d239bfc9fd6623a4b1d6fbc36", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc0653987215293d239bfc9fd6623a4b1d6fbc36", "html_url": "https://github.com/rust-lang/rust/commit/dc0653987215293d239bfc9fd6623a4b1d6fbc36"}], "stats": {"total": 81, "additions": 40, "deletions": 41}, "files": [{"sha": "5dda5ec2cb890d164ba5d8ccb2eb94562f7845e5", "filename": "src/doc/rustc/src/codegen-options/index.md", "status": "modified", "additions": 6, "deletions": 17, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3e3fd73f85c8dd2a7ba6b2072bfb1158e7e6872f/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/3e3fd73f85c8dd2a7ba6b2072bfb1158e7e6872f/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md?ref=3e3fd73f85c8dd2a7ba6b2072bfb1158e7e6872f", "patch": "@@ -180,30 +180,19 @@ If not specified, overflow checks are enabled if\n \n ## no-prepopulate-passes\n \n-This flag controls whether the pass manager uses a pre-populated list of\n-passes. It takes one of the following values:\n-\n-* `y`, `yes`, `on`, or no value: use an empty list of passes.\n-* `n`, `no`, or `off`: use a pre-populated list of passes (the default).\n+This flag tells the pass manager to use an empty list of passes, instead of the\n+usual pre-populated list of passes.\n \n ## no-vectorize-loops\n \n-This flag controls whether `rustc` will attempt to [vectorize\n-loops](https://llvm.org/docs/Vectorizers.html#the-loop-vectorizer). It takes\n-one of the following values:\n-\n-* `y`, `yes`, `on`, or no value: disable loop vectorization.\n-* `n`, `no`, or `off`: enable loop vectorization (the default).\n+This flag disables [loop\n+vectorization](https://llvm.org/docs/Vectorizers.html#the-loop-vectorizer).\n \n ## no-vectorize-slp\n \n-This flag controls whether `rustc` will attempt to vectorize code using\n+This flag disables vectorization using\n [superword-level\n parallelism](https://llvm.org/docs/Vectorizers.html#the-slp-vectorizer).\n-It takes one of the following values:\n-\n-* `y`, `yes`, `on`, or no value: disable SLP vectorization.\n-* `n`, `no`, or `off`: enable SLP vectorization (the default).\n \n ## soft-float\n \n@@ -309,7 +298,7 @@ This flag controls the optimization level.\n * `2`: some optimizations.\n * `3`: all optimizations.\n * `s`: optimize for binary size.\n-* `z`: optimize for binary size, but also turn off loop vectorization..\n+* `z`: optimize for binary size, but also turn off loop vectorization.\n \n Note: The [`-O` flag][option-o-optimize] is an alias for `-C opt-level=2`.\n "}, {"sha": "5e17fc989856bdbdff7f47412c1b045f9d4b7f67", "filename": "src/librustc_session/options.rs", "status": "modified", "additions": 34, "deletions": 24, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/3e3fd73f85c8dd2a7ba6b2072bfb1158e7e6872f/src%2Flibrustc_session%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e3fd73f85c8dd2a7ba6b2072bfb1158e7e6872f/src%2Flibrustc_session%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Foptions.rs?ref=3e3fd73f85c8dd2a7ba6b2072bfb1158e7e6872f", "patch": "@@ -231,6 +231,7 @@ macro_rules! options {\n \n     #[allow(non_upper_case_globals, dead_code)]\n     mod $mod_desc {\n+        pub const parse_no_flag: &str = \"no value\";\n         pub const parse_bool: &str = \"one of: `y`, `yes`, `on`, `n`, `no`, or `off`\";\n         pub const parse_opt_bool: &str = parse_bool;\n         pub const parse_string: &str = \"a string\";\n@@ -288,6 +289,15 @@ macro_rules! options {\n             }\n         )*\n \n+        /// This is for boolean options that don't take a value and start with\n+        /// `no-`. This style of option is deprecated.\n+        fn parse_no_flag(slot: &mut bool, v: Option<&str>) -> bool {\n+            match v {\n+                None => { *slot = true; true }\n+                Some(_) => false,\n+            }\n+        }\n+\n         /// Use this for any boolean option that has a static default.\n         fn parse_bool(slot: &mut bool, v: Option<&str>) -> bool {\n             match v {\n@@ -640,12 +650,12 @@ options! {CodegenOptions, CodegenSetter, basic_codegen_options,\n         \"set rpath values in libs/exes (default: no)\"),\n     overflow_checks: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"use overflow checks for integer arithmetic\"),\n-    no_prepopulate_passes: bool = (false, parse_bool, [TRACKED],\n-        \"give an empty list of passes to the pass manager (default: no)\"),\n-    no_vectorize_loops: bool = (false, parse_bool, [TRACKED],\n-        \"disable loop vectorization optimization passes (default: no)\"),\n-    no_vectorize_slp: bool = (false, parse_bool, [TRACKED],\n-        \"disable LLVM's SLP vectorization pass (default: no)\"),\n+    no_prepopulate_passes: bool = (false, parse_no_flag, [TRACKED],\n+        \"give an empty list of passes to the pass manager\"),\n+    no_vectorize_loops: bool = (false, parse_no_flag, [TRACKED],\n+        \"disable loop vectorization optimization passes\"),\n+    no_vectorize_slp: bool = (false, parse_no_flag, [TRACKED],\n+        \"disable LLVM's SLP vectorization pass\"),\n     soft_float: bool = (false, parse_bool, [TRACKED],\n         \"use soft float ABI (*eabihf targets only) (default: no)\"),\n     prefer_dynamic: bool = (false, parse_bool, [TRACKED],\n@@ -664,7 +674,7 @@ options! {CodegenOptions, CodegenSetter, basic_codegen_options,\n         \"divide crate into N units to optimize in parallel\"),\n     remark: Passes = (Passes::Some(Vec::new()), parse_passes, [UNTRACKED],\n         \"print remarks for these optimization passes (space separated, or \\\"all\\\")\"),\n-    no_stack_check: bool = (false, parse_bool, [UNTRACKED],\n+    no_stack_check: bool = (false, parse_no_flag, [UNTRACKED],\n         \"this option is deprecated and does nothing\"),\n     debuginfo: usize = (0, parse_uint, [TRACKED],\n         \"debug info emission level (0 = no debug info, 1 = line tables only, \\\n@@ -725,8 +735,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"verify LLVM IR (default: no)\"),\n     borrowck_stats: bool = (false, parse_bool, [UNTRACKED],\n         \"gather borrowck statistics (default: no)\"),\n-    no_landing_pads: bool = (false, parse_bool, [TRACKED],\n-        \"omit landing pads for unwinding (default: no)\"),\n+    no_landing_pads: bool = (false, parse_no_flag, [TRACKED],\n+        \"omit landing pads for unwinding\"),\n     fewer_names: bool = (false, parse_bool, [TRACKED],\n         \"reduce memory use by retaining fewer names within compilation artifacts (LLVM-IR) \\\n         (default: no)\"),\n@@ -758,8 +768,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"parse only; do not compile, assemble, or link (default: no)\"),\n     dual_proc_macros: bool = (false, parse_bool, [TRACKED],\n         \"load proc macros for both target and host, but only link to the target (default: no)\"),\n-    no_codegen: bool = (false, parse_bool, [TRACKED],\n-        \"run all passes except codegen; no output (default: no)\"),\n+    no_codegen: bool = (false, parse_no_flag, [TRACKED],\n+        \"run all passes except codegen; no output\"),\n     treat_err_as_bug: Option<usize> = (None, parse_treat_err_as_bug, [TRACKED],\n         \"treat error number `val` that occurs as bug\"),\n     report_delayed_bugs: bool = (false, parse_bool, [TRACKED],\n@@ -789,8 +799,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         (default: no)\"),\n     query_dep_graph: bool = (false, parse_bool, [UNTRACKED],\n         \"enable queries of the dependency graph for regression testing (default: no)\"),\n-    no_analysis: bool = (false, parse_bool, [UNTRACKED],\n-        \"parse and expand the source, but run no analysis (default: no)\"),\n+    no_analysis: bool = (false, parse_no_flag, [UNTRACKED],\n+        \"parse and expand the source, but run no analysis\"),\n     unstable_options: bool = (false, parse_bool, [UNTRACKED],\n         \"adds unstable command line options to rustc interface (default: no)\"),\n     force_overflow_checks: Option<bool> = (None, parse_opt_bool, [TRACKED],\n@@ -799,8 +809,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"for every macro invocation, print its name and arguments (default: no)\"),\n     debug_macros: bool = (false, parse_bool, [TRACKED],\n         \"emit line numbers debug info inside macros (default: no)\"),\n-    no_generate_arange_section: bool = (false, parse_bool, [TRACKED],\n-        \"omit DWARF address ranges that give faster lookups (default: no)\"),\n+    no_generate_arange_section: bool = (false, parse_no_flag, [TRACKED],\n+        \"omit DWARF address ranges that give faster lookups\"),\n     keep_hygiene_data: bool = (false, parse_bool, [UNTRACKED],\n         \"keep hygiene data after analysis (default: no)\"),\n     show_span: Option<String> = (None, parse_opt_string, [TRACKED],\n@@ -862,7 +872,7 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"extra arguments to prepend to the linker invocation (space separated)\"),\n     profile: bool = (false, parse_bool, [TRACKED],\n         \"insert profiling code (default: no)\"),\n-    no_profiler_runtime: bool = (false, parse_bool, [TRACKED],\n+    no_profiler_runtime: bool = (false, parse_no_flag, [TRACKED],\n         \"prevent automatic injection of the profiler_builtins crate\"),\n     relro_level: Option<RelroLevel> = (None, parse_relro_level, [TRACKED],\n         \"choose which RELRO level to use\"),\n@@ -911,12 +921,12 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         (default: no)\"),\n     share_generics: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"make the current crate share its generic instantiations\"),\n-    no_parallel_llvm: bool = (false, parse_bool, [UNTRACKED],\n-        \"run LLVM in non-parallel mode (while keeping codegen-units and ThinLTO) (default: no)\"),\n-    no_leak_check: bool = (false, parse_bool, [UNTRACKED],\n-        \"disable the 'leak check' for subtyping; unsound, but useful for tests (default: no)\"),\n-    no_interleave_lints: bool = (false, parse_bool, [UNTRACKED],\n-        \"execute lints separately; allows benchmarking individual lints (default: no)\"),\n+    no_parallel_llvm: bool = (false, parse_no_flag, [UNTRACKED],\n+        \"run LLVM in non-parallel mode (while keeping codegen-units and ThinLTO)\"),\n+    no_leak_check: bool = (false, parse_no_flag, [UNTRACKED],\n+        \"disable the 'leak check' for subtyping; unsound, but useful for tests\"),\n+    no_interleave_lints: bool = (false, parse_no_flag, [UNTRACKED],\n+        \"execute lints separately; allows benchmarking individual lints\"),\n     crate_attr: Vec<String> = (Vec::new(), parse_string_push, [TRACKED],\n         \"inject the given attribute in the crate\"),\n     self_profile: SwitchWithOptPath = (SwitchWithOptPath::Disabled,\n@@ -953,8 +963,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"deduplicate identical diagnostics (default: yes)\"),\n     control_flow_guard: CFGuard = (CFGuard::Disabled, parse_cfguard, [UNTRACKED],\n         \"use Windows Control Flow Guard (`disabled`, `nochecks` or `checks`)\"),\n-    no_link: bool = (false, parse_bool, [TRACKED],\n-        \"compile without linking (default: no)\"),\n+    no_link: bool = (false, parse_no_flag, [TRACKED],\n+        \"compile without linking\"),\n     link_only: bool = (false, parse_bool, [TRACKED],\n         \"link the `.rlink` file generated by `-Z no-link` (default: no)\"),\n     new_llvm_pass_manager: bool = (false, parse_bool, [TRACKED],"}]}