{"sha": "1e555bac14eb5c92507e0aa2c5271990db9e1692", "node_id": "C_kwDOAAsO6NoAKDFlNTU1YmFjMTRlYjVjOTI1MDdlMGFhMmM1MjcxOTkwZGI5ZTE2OTI", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-04-05T20:58:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-05T20:58:59Z"}, "message": "Rollup merge of #95663 - notriddle:notriddle/unsafe-fn-closure, r=compiler-errors\n\ndiagnostics: give a special note for unsafe fn / Fn/FnOnce/FnMut\n\nFixes #90073", "tree": {"sha": "dda244fa08c986c0b6e1c254ffe211a08888a843", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dda244fa08c986c0b6e1c254ffe211a08888a843"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e555bac14eb5c92507e0aa2c5271990db9e1692", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiTK2TCRBK7hj4Ov3rIwAAsnwIAFS9gzUKKHrreri6wPiex1b5\nF2nsHnFZgBnzUhKAYzD0l0lK9oSnm5loFIYoEo2ZF6jl+99fT30otB0Juh8p70OG\nTb2G3nl8j2CuI21xWtrEumvZDc6w8smu8A9/omd0unaEaqlf662bAhJNVERmw6mM\nBSNGEi1lwf0isYRxGEQHMQ7OvWaZpDY8Yld48YBJZBx7VTC93P9ssyd4TF0NVCDT\nWva3tsSs6C0Oz/WUe/Bcnv3SleLMozLlPPO86rTlJI3YcB6gg6TdODCqK9U+hwPZ\nzPr0b8E/n1/Ud0oQ0Ec6cow+oKsbkKH25AqirFkp5kQsDVUfE8tHBC7ityK5wuQ=\n=ykyx\n-----END PGP SIGNATURE-----\n", "payload": "tree dda244fa08c986c0b6e1c254ffe211a08888a843\nparent cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e\nparent 6d18fbbc3f1fee9e717ae5f55bd2970d96e2b5cb\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1649192339 +0200\ncommitter GitHub <noreply@github.com> 1649192339 +0200\n\nRollup merge of #95663 - notriddle:notriddle/unsafe-fn-closure, r=compiler-errors\n\ndiagnostics: give a special note for unsafe fn / Fn/FnOnce/FnMut\n\nFixes #90073\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e555bac14eb5c92507e0aa2c5271990db9e1692", "html_url": "https://github.com/rust-lang/rust/commit/1e555bac14eb5c92507e0aa2c5271990db9e1692", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e555bac14eb5c92507e0aa2c5271990db9e1692/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e", "html_url": "https://github.com/rust-lang/rust/commit/cbf54fad795bc9bce7905b6deb8dfb3bac4f1e2e"}, {"sha": "6d18fbbc3f1fee9e717ae5f55bd2970d96e2b5cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d18fbbc3f1fee9e717ae5f55bd2970d96e2b5cb", "html_url": "https://github.com/rust-lang/rust/commit/6d18fbbc3f1fee9e717ae5f55bd2970d96e2b5cb"}], "stats": {"total": 54, "additions": 44, "deletions": 10}, "files": [{"sha": "31b92d52bebc8d08a8690b60d7d283ecb516e6f4", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/on_unimplemented.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1e555bac14eb5c92507e0aa2c5271990db9e1692/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e555bac14eb5c92507e0aa2c5271990db9e1692/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs?ref=1e555bac14eb5c92507e0aa2c5271990db9e1692", "patch": "@@ -208,6 +208,15 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 flags.push((sym::_Self, Some(\"&[]\".to_owned())));\n             }\n \n+            if self_ty.is_fn() {\n+                let fn_sig = self_ty.fn_sig(self.tcx);\n+                let shortname = match fn_sig.unsafety() {\n+                    hir::Unsafety::Normal => \"fn\",\n+                    hir::Unsafety::Unsafe => \"unsafe fn\",\n+                };\n+                flags.push((sym::_Self, Some(shortname.to_owned())));\n+            }\n+\n             if let ty::Array(aty, len) = self_ty.kind() {\n                 flags.push((sym::_Self, Some(\"[]\".to_owned())));\n                 flags.push((sym::_Self, Some(format!(\"[{}]\", aty))));"}, {"sha": "c5a194b7d0a41ee9435837ac4c7bd39498157c14", "filename": "library/core/src/ops/function.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1e555bac14eb5c92507e0aa2c5271990db9e1692/library%2Fcore%2Fsrc%2Fops%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e555bac14eb5c92507e0aa2c5271990db9e1692/library%2Fcore%2Fsrc%2Fops%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Ffunction.rs?ref=1e555bac14eb5c92507e0aa2c5271990db9e1692", "patch": "@@ -60,6 +60,12 @@\n         Args = \"()\",\n         note = \"wrap the `{Self}` in a closure with no arguments: `|| {{ /* code */ }}`\"\n     ),\n+    on(\n+        _Self = \"unsafe fn\",\n+        note = \"unsafe function cannot be called generically without an unsafe block\",\n+        // SAFETY: tidy is not smart enough to tell that the below unsafe block is a string\n+        label = \"call the function in a closure: `|| unsafe {{ /* code */ }}`\"\n+    ),\n     message = \"expected a `{Fn}<{Args}>` closure, found `{Self}`\",\n     label = \"expected an `Fn<{Args}>` closure, found `{Self}`\"\n )]\n@@ -141,6 +147,12 @@ pub trait Fn<Args>: FnMut<Args> {\n         Args = \"()\",\n         note = \"wrap the `{Self}` in a closure with no arguments: `|| {{ /* code */ }}`\"\n     ),\n+    on(\n+        _Self = \"unsafe fn\",\n+        note = \"unsafe function cannot be called generically without an unsafe block\",\n+        // SAFETY: tidy is not smart enough to tell that the below unsafe block is a string\n+        label = \"call the function in a closure: `|| unsafe {{ /* code */ }}`\"\n+    ),\n     message = \"expected a `{FnMut}<{Args}>` closure, found `{Self}`\",\n     label = \"expected an `FnMut<{Args}>` closure, found `{Self}`\"\n )]\n@@ -214,6 +226,12 @@ pub trait FnMut<Args>: FnOnce<Args> {\n         Args = \"()\",\n         note = \"wrap the `{Self}` in a closure with no arguments: `|| {{ /* code */ }}`\"\n     ),\n+    on(\n+        _Self = \"unsafe fn\",\n+        note = \"unsafe function cannot be called generically without an unsafe block\",\n+        // SAFETY: tidy is not smart enough to tell that the below unsafe block is a string\n+        label = \"call the function in a closure: `|| unsafe {{ /* code */ }}`\"\n+    ),\n     message = \"expected a `{FnOnce}<{Args}>` closure, found `{Self}`\",\n     label = \"expected an `FnOnce<{Args}>` closure, found `{Self}`\"\n )]"}, {"sha": "bd095c2d83d8a186cb49ed9e2a36514e251883df", "filename": "src/test/ui/closures/coerce-unsafe-to-closure.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1e555bac14eb5c92507e0aa2c5271990db9e1692/src%2Ftest%2Fui%2Fclosures%2Fcoerce-unsafe-to-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1e555bac14eb5c92507e0aa2c5271990db9e1692/src%2Ftest%2Fui%2Fclosures%2Fcoerce-unsafe-to-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fcoerce-unsafe-to-closure.stderr?ref=1e555bac14eb5c92507e0aa2c5271990db9e1692", "patch": "@@ -2,11 +2,12 @@ error[E0277]: expected a `FnOnce<(&str,)>` closure, found `unsafe extern \"rust-i\n   --> $DIR/coerce-unsafe-to-closure.rs:2:44\n    |\n LL |     let x: Option<&[u8]> = Some(\"foo\").map(std::mem::transmute);\n-   |                                        --- ^^^^^^^^^^^^^^^^^^^ expected an `FnOnce<(&str,)>` closure, found `unsafe extern \"rust-intrinsic\" fn(_) -> _ {transmute::<_, _>}`\n+   |                                        --- ^^^^^^^^^^^^^^^^^^^ call the function in a closure: `|| unsafe { /* code */ }`\n    |                                        |\n    |                                        required by a bound introduced by this call\n    |\n    = help: the trait `FnOnce<(&str,)>` is not implemented for `unsafe extern \"rust-intrinsic\" fn(_) -> _ {transmute::<_, _>}`\n+   = note: unsafe function cannot be called generically without an unsafe block\n note: required by a bound in `Option::<T>::map`\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n    |"}, {"sha": "94a90a568548988a4754644f771c8838c928d9a6", "filename": "src/test/ui/rfcs/rfc-2396-target_feature-11/fn-traits.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1e555bac14eb5c92507e0aa2c5271990db9e1692/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffn-traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1e555bac14eb5c92507e0aa2c5271990db9e1692/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffn-traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Ffn-traits.stderr?ref=1e555bac14eb5c92507e0aa2c5271990db9e1692", "patch": "@@ -53,7 +53,7 @@ error[E0277]: expected a `Fn<()>` closure, found `unsafe fn() {foo_unsafe}`\n   --> $DIR/fn-traits.rs:28:10\n    |\n LL |     call(foo_unsafe);\n-   |     ---- ^^^^^^^^^^ expected an `Fn<()>` closure, found `unsafe fn() {foo_unsafe}`\n+   |     ---- ^^^^^^^^^^ call the function in a closure: `|| unsafe { /* code */ }`\n    |     |\n    |     required by a bound introduced by this call\n    |\n@@ -70,7 +70,7 @@ error[E0277]: expected a `FnMut<()>` closure, found `unsafe fn() {foo_unsafe}`\n   --> $DIR/fn-traits.rs:30:14\n    |\n LL |     call_mut(foo_unsafe);\n-   |     -------- ^^^^^^^^^^ expected an `FnMut<()>` closure, found `unsafe fn() {foo_unsafe}`\n+   |     -------- ^^^^^^^^^^ call the function in a closure: `|| unsafe { /* code */ }`\n    |     |\n    |     required by a bound introduced by this call\n    |\n@@ -87,7 +87,7 @@ error[E0277]: expected a `FnOnce<()>` closure, found `unsafe fn() {foo_unsafe}`\n   --> $DIR/fn-traits.rs:32:15\n    |\n LL |     call_once(foo_unsafe);\n-   |     --------- ^^^^^^^^^^ expected an `FnOnce<()>` closure, found `unsafe fn() {foo_unsafe}`\n+   |     --------- ^^^^^^^^^^ call the function in a closure: `|| unsafe { /* code */ }`\n    |     |\n    |     required by a bound introduced by this call\n    |"}, {"sha": "18e133957ba37fa5aebb201743715c2eb3b91caf", "filename": "src/test/ui/unboxed-closures/unboxed-closures-unsafe-extern-fn.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1e555bac14eb5c92507e0aa2c5271990db9e1692/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-unsafe-extern-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1e555bac14eb5c92507e0aa2c5271990db9e1692/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-unsafe-extern-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-unsafe-extern-fn.stderr?ref=1e555bac14eb5c92507e0aa2c5271990db9e1692", "patch": "@@ -2,11 +2,12 @@ error[E0277]: expected a `Fn<(&isize,)>` closure, found `for<'r> unsafe fn(&'r i\n   --> $DIR/unboxed-closures-unsafe-extern-fn.rs:20:21\n    |\n LL |     let x = call_it(&square, 22);\n-   |             ------- ^^^^^^^ expected an `Fn<(&isize,)>` closure, found `for<'r> unsafe fn(&'r isize) -> isize {square}`\n+   |             ------- ^^^^^^^ call the function in a closure: `|| unsafe { /* code */ }`\n    |             |\n    |             required by a bound introduced by this call\n    |\n    = help: the trait `for<'r> Fn<(&'r isize,)>` is not implemented for `for<'r> unsafe fn(&'r isize) -> isize {square}`\n+   = note: unsafe function cannot be called generically without an unsafe block\n note: required by a bound in `call_it`\n   --> $DIR/unboxed-closures-unsafe-extern-fn.rs:9:15\n    |\n@@ -17,11 +18,12 @@ error[E0277]: expected a `FnMut<(&isize,)>` closure, found `for<'r> unsafe fn(&'\n   --> $DIR/unboxed-closures-unsafe-extern-fn.rs:25:25\n    |\n LL |     let y = call_it_mut(&mut square, 22);\n-   |             ----------- ^^^^^^^^^^^ expected an `FnMut<(&isize,)>` closure, found `for<'r> unsafe fn(&'r isize) -> isize {square}`\n+   |             ----------- ^^^^^^^^^^^ call the function in a closure: `|| unsafe { /* code */ }`\n    |             |\n    |             required by a bound introduced by this call\n    |\n    = help: the trait `for<'r> FnMut<(&'r isize,)>` is not implemented for `for<'r> unsafe fn(&'r isize) -> isize {square}`\n+   = note: unsafe function cannot be called generically without an unsafe block\n note: required by a bound in `call_it_mut`\n   --> $DIR/unboxed-closures-unsafe-extern-fn.rs:12:19\n    |\n@@ -32,11 +34,12 @@ error[E0277]: expected a `FnOnce<(&isize,)>` closure, found `for<'r> unsafe fn(&\n   --> $DIR/unboxed-closures-unsafe-extern-fn.rs:30:26\n    |\n LL |     let z = call_it_once(square, 22);\n-   |             ------------ ^^^^^^ expected an `FnOnce<(&isize,)>` closure, found `for<'r> unsafe fn(&'r isize) -> isize {square}`\n+   |             ------------ ^^^^^^ call the function in a closure: `|| unsafe { /* code */ }`\n    |             |\n    |             required by a bound introduced by this call\n    |\n    = help: the trait `for<'r> FnOnce<(&'r isize,)>` is not implemented for `for<'r> unsafe fn(&'r isize) -> isize {square}`\n+   = note: unsafe function cannot be called generically without an unsafe block\n note: required by a bound in `call_it_once`\n   --> $DIR/unboxed-closures-unsafe-extern-fn.rs:15:20\n    |"}, {"sha": "c826af3c4c38f0f263f775f1840ceadc377d81c0", "filename": "src/test/ui/unboxed-closures/unboxed-closures-wrong-arg-type-extern-fn.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1e555bac14eb5c92507e0aa2c5271990db9e1692/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-wrong-arg-type-extern-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1e555bac14eb5c92507e0aa2c5271990db9e1692/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-wrong-arg-type-extern-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-wrong-arg-type-extern-fn.stderr?ref=1e555bac14eb5c92507e0aa2c5271990db9e1692", "patch": "@@ -2,11 +2,12 @@ error[E0277]: expected a `Fn<(&isize,)>` closure, found `unsafe fn(isize) -> isi\n   --> $DIR/unboxed-closures-wrong-arg-type-extern-fn.rs:21:21\n    |\n LL |     let x = call_it(&square, 22);\n-   |             ------- ^^^^^^^ expected an `Fn<(&isize,)>` closure, found `unsafe fn(isize) -> isize {square}`\n+   |             ------- ^^^^^^^ call the function in a closure: `|| unsafe { /* code */ }`\n    |             |\n    |             required by a bound introduced by this call\n    |\n    = help: the trait `for<'r> Fn<(&'r isize,)>` is not implemented for `unsafe fn(isize) -> isize {square}`\n+   = note: unsafe function cannot be called generically without an unsafe block\n note: required by a bound in `call_it`\n   --> $DIR/unboxed-closures-wrong-arg-type-extern-fn.rs:10:15\n    |\n@@ -17,11 +18,12 @@ error[E0277]: expected a `FnMut<(&isize,)>` closure, found `unsafe fn(isize) ->\n   --> $DIR/unboxed-closures-wrong-arg-type-extern-fn.rs:26:25\n    |\n LL |     let y = call_it_mut(&mut square, 22);\n-   |             ----------- ^^^^^^^^^^^ expected an `FnMut<(&isize,)>` closure, found `unsafe fn(isize) -> isize {square}`\n+   |             ----------- ^^^^^^^^^^^ call the function in a closure: `|| unsafe { /* code */ }`\n    |             |\n    |             required by a bound introduced by this call\n    |\n    = help: the trait `for<'r> FnMut<(&'r isize,)>` is not implemented for `unsafe fn(isize) -> isize {square}`\n+   = note: unsafe function cannot be called generically without an unsafe block\n note: required by a bound in `call_it_mut`\n   --> $DIR/unboxed-closures-wrong-arg-type-extern-fn.rs:13:19\n    |\n@@ -32,11 +34,12 @@ error[E0277]: expected a `FnOnce<(&isize,)>` closure, found `unsafe fn(isize) ->\n   --> $DIR/unboxed-closures-wrong-arg-type-extern-fn.rs:31:26\n    |\n LL |     let z = call_it_once(square, 22);\n-   |             ------------ ^^^^^^ expected an `FnOnce<(&isize,)>` closure, found `unsafe fn(isize) -> isize {square}`\n+   |             ------------ ^^^^^^ call the function in a closure: `|| unsafe { /* code */ }`\n    |             |\n    |             required by a bound introduced by this call\n    |\n    = help: the trait `for<'r> FnOnce<(&'r isize,)>` is not implemented for `unsafe fn(isize) -> isize {square}`\n+   = note: unsafe function cannot be called generically without an unsafe block\n note: required by a bound in `call_it_once`\n   --> $DIR/unboxed-closures-wrong-arg-type-extern-fn.rs:16:20\n    |"}]}