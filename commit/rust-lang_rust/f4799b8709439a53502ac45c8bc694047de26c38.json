{"sha": "f4799b8709439a53502ac45c8bc694047de26c38", "node_id": "C_kwDOAAsO6NoAKGY0Nzk5Yjg3MDk0MzlhNTM1MDJhYzQ1YzhiYzY5NDA0N2RlMjZjMzg", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2022-01-25T13:26:50Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2022-02-03T09:03:16Z"}, "message": "debuginfo: Make some helper functions in rustc_codegen_llvm::debuginfo::metadata more generally applicable.", "tree": {"sha": "6c5ba5b0b51a39b128a5c3cd55de9524a8904546", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c5ba5b0b51a39b128a5c3cd55de9524a8904546"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4799b8709439a53502ac45c8bc694047de26c38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4799b8709439a53502ac45c8bc694047de26c38", "html_url": "https://github.com/rust-lang/rust/commit/f4799b8709439a53502ac45c8bc694047de26c38", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4799b8709439a53502ac45c8bc694047de26c38/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1be5c8f90912c446ecbdc405cbc4a89f9acd20fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/1be5c8f90912c446ecbdc405cbc4a89f9acd20fd", "html_url": "https://github.com/rust-lang/rust/commit/1be5c8f90912c446ecbdc405cbc4a89f9acd20fd"}], "stats": {"total": 78, "additions": 54, "deletions": 24}, "files": [{"sha": "416a087dcc88412d7a4f5f61df927ed00f045753", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 54, "deletions": 24, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/f4799b8709439a53502ac45c8bc694047de26c38/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4799b8709439a53502ac45c8bc694047de26c38/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=f4799b8709439a53502ac45c8bc694047de26c38", "patch": "@@ -351,14 +351,15 @@ impl<'ll, 'tcx> RecursiveTypeDescription<'ll, 'tcx> {\n \n                 // ... then create the member descriptions ...\n                 let member_descriptions = member_description_factory.create_member_descriptions(cx);\n+                let type_params = compute_type_parameters(cx, unfinished_type);\n \n                 // ... and attach them to the stub to complete it.\n                 set_members_of_composite_type(\n                     cx,\n-                    unfinished_type,\n                     member_holding_stub,\n                     member_descriptions,\n                     None,\n+                    type_params,\n                 );\n                 MetadataCreationResult::new(metadata_stub, true)\n             }\n@@ -983,7 +984,17 @@ fn foreign_type_metadata<'ll, 'tcx>(\n     debug!(\"foreign_type_metadata: {:?}\", t);\n \n     let name = compute_debuginfo_type_name(cx.tcx, t, false);\n-    create_struct_stub(cx, t, &name, unique_type_id, NO_SCOPE_METADATA, DIFlags::FlagZero)\n+    let (size, align) = cx.size_and_align_of(t);\n+    create_struct_stub(\n+        cx,\n+        size,\n+        align,\n+        &name,\n+        unique_type_id,\n+        NO_SCOPE_METADATA,\n+        DIFlags::FlagZero,\n+        None,\n+    )\n }\n \n fn param_type_metadata<'ll, 'tcx>(cx: &CodegenCx<'ll, 'tcx>, t: Ty<'tcx>) -> &'ll DIType {\n@@ -1299,14 +1310,17 @@ fn prepare_struct_metadata<'ll, 'tcx>(\n     };\n \n     let containing_scope = get_namespace_for_item(cx, struct_def_id);\n+    let (size, align) = cx.size_and_align_of(struct_type);\n \n     let struct_metadata_stub = create_struct_stub(\n         cx,\n-        struct_type,\n+        size,\n+        align,\n         &struct_name,\n         unique_type_id,\n         Some(containing_scope),\n         DIFlags::FlagZero,\n+        None,\n     );\n \n     create_and_register_recursive_type_forward_declaration(\n@@ -1398,15 +1412,18 @@ fn prepare_tuple_metadata<'ll, 'tcx>(\n     unique_type_id: UniqueTypeId,\n     containing_scope: Option<&'ll DIScope>,\n ) -> RecursiveTypeDescription<'ll, 'tcx> {\n+    let (size, align) = cx.size_and_align_of(tuple_type);\n     let tuple_name = compute_debuginfo_type_name(cx.tcx, tuple_type, false);\n \n     let struct_stub = create_struct_stub(\n         cx,\n-        tuple_type,\n+        size,\n+        align,\n         &tuple_name[..],\n         unique_type_id,\n         containing_scope,\n         DIFlags::FlagZero,\n+        None,\n     );\n \n     create_and_register_recursive_type_forward_declaration(\n@@ -1581,13 +1598,14 @@ impl<'ll, 'tcx> EnumMemberDescriptionFactory<'ll, 'tcx> {\n                     describe_enum_variant(cx, self.layout, variant_info, self_metadata);\n \n                 let member_descriptions = member_description_factory.create_member_descriptions(cx);\n+                let type_params = compute_type_parameters(cx, self.enum_type);\n \n                 set_members_of_composite_type(\n                     cx,\n-                    self.enum_type,\n                     variant_type_metadata,\n                     member_descriptions,\n                     Some(&self.common_members),\n+                    type_params,\n                 );\n                 vec![MemberDescription {\n                     name: variant_info.variant_name(),\n@@ -1648,13 +1666,14 @@ impl<'ll, 'tcx> EnumMemberDescriptionFactory<'ll, 'tcx> {\n \n                         let member_descriptions =\n                             member_desc_factory.create_member_descriptions(cx);\n+                        let type_params = compute_type_parameters(cx, self.enum_type);\n \n                         set_members_of_composite_type(\n                             cx,\n-                            self.enum_type,\n                             variant_type_metadata,\n                             member_descriptions,\n                             Some(&self.common_members),\n+                            type_params,\n                         );\n \n                         MemberDescription {\n@@ -1777,13 +1796,14 @@ impl<'ll, 'tcx> EnumMemberDescriptionFactory<'ll, 'tcx> {\n                     );\n \n                     let member_descriptions = member_desc_factory.create_member_descriptions(cx);\n+                    let type_params = compute_type_parameters(cx, self.enum_type);\n \n                     set_members_of_composite_type(\n                         cx,\n-                        self.enum_type,\n                         variant_type_metadata,\n                         member_descriptions,\n                         Some(&self.common_members),\n+                        type_params,\n                     );\n \n                     let (size, align) =\n@@ -1823,13 +1843,14 @@ impl<'ll, 'tcx> EnumMemberDescriptionFactory<'ll, 'tcx> {\n \n                             let member_descriptions =\n                                 member_desc_factory.create_member_descriptions(cx);\n+                            let type_params = compute_type_parameters(cx, self.enum_type);\n \n                             set_members_of_composite_type(\n                                 cx,\n-                                self.enum_type,\n                                 variant_type_metadata,\n                                 member_descriptions,\n                                 Some(&self.common_members),\n+                                type_params,\n                             );\n \n                             let niche_value = calculate_niche_value(i);\n@@ -1965,13 +1986,18 @@ fn describe_enum_variant<'ll, 'tcx>(\n             .type_map\n             .borrow_mut()\n             .get_unique_type_id_of_enum_variant(cx, layout.ty, variant_name);\n+\n+        let (size, align) = cx.size_and_align_of(layout.ty);\n+\n         create_struct_stub(\n             cx,\n-            layout.ty,\n+            size,\n+            align,\n             variant_name,\n             unique_type_id,\n             Some(containing_scope),\n             DIFlags::FlagZero,\n+            None,\n         )\n     });\n \n@@ -2308,33 +2334,38 @@ fn composite_type_metadata<'ll, 'tcx>(\n     member_descriptions: Vec<MemberDescription<'ll>>,\n     containing_scope: Option<&'ll DIScope>,\n ) -> &'ll DICompositeType {\n+    let (size, align) = cx.size_and_align_of(composite_type);\n+\n     // Create the (empty) struct metadata node ...\n     let composite_type_metadata = create_struct_stub(\n         cx,\n-        composite_type,\n+        size,\n+        align,\n         composite_type_name,\n         composite_type_unique_id,\n         containing_scope,\n         DIFlags::FlagZero,\n+        None,\n     );\n+\n     // ... and immediately create and add the member descriptions.\n     set_members_of_composite_type(\n         cx,\n-        composite_type,\n         composite_type_metadata,\n         member_descriptions,\n         None,\n+        compute_type_parameters(cx, composite_type),\n     );\n \n     composite_type_metadata\n }\n \n fn set_members_of_composite_type<'ll, 'tcx>(\n     cx: &CodegenCx<'ll, 'tcx>,\n-    composite_type: Ty<'tcx>,\n     composite_type_metadata: &'ll DICompositeType,\n     member_descriptions: Vec<MemberDescription<'ll>>,\n     common_members: Option<&Vec<Option<&'ll DIType>>>,\n+    type_params: &'ll DIArray,\n ) {\n     // In some rare cases LLVM metadata uniquing would lead to an existing type\n     // description being used instead of a new one created in\n@@ -2361,13 +2392,12 @@ fn set_members_of_composite_type<'ll, 'tcx>(\n         member_metadata.extend(other_members.iter());\n     }\n \n-    let type_params = compute_type_parameters(cx, composite_type);\n     unsafe {\n-        let type_array = create_DIArray(DIB(cx), &member_metadata);\n+        let field_array = create_DIArray(DIB(cx), &member_metadata);\n         llvm::LLVMRustDICompositeTypeReplaceArrays(\n             DIB(cx),\n             composite_type_metadata,\n-            Some(type_array),\n+            Some(field_array),\n             Some(type_params),\n         );\n     }\n@@ -2420,14 +2450,14 @@ fn compute_type_parameters<'ll, 'tcx>(cx: &CodegenCx<'ll, 'tcx>, ty: Ty<'tcx>) -\n /// with `set_members_of_composite_type()`.\n fn create_struct_stub<'ll, 'tcx>(\n     cx: &CodegenCx<'ll, 'tcx>,\n-    struct_type: Ty<'tcx>,\n-    struct_type_name: &str,\n+    size: Size,\n+    align: Align,\n+    type_name: &str,\n     unique_type_id: UniqueTypeId,\n     containing_scope: Option<&'ll DIScope>,\n     flags: DIFlags,\n+    vtable_holder: Option<&'ll DIType>,\n ) -> &'ll DICompositeType {\n-    let (struct_size, struct_align) = cx.size_and_align_of(struct_type);\n-\n     let type_map = debug_context(cx).type_map.borrow();\n     let unique_type_id = type_map.get_unique_type_id_as_string(unique_type_id);\n \n@@ -2440,17 +2470,17 @@ fn create_struct_stub<'ll, 'tcx>(\n         llvm::LLVMRustDIBuilderCreateStructType(\n             DIB(cx),\n             containing_scope,\n-            struct_type_name.as_ptr().cast(),\n-            struct_type_name.len(),\n+            type_name.as_ptr().cast(),\n+            type_name.len(),\n             unknown_file_metadata(cx),\n             UNKNOWN_LINE_NUMBER,\n-            struct_size.bits(),\n-            struct_align.bits() as u32,\n+            size.bits(),\n+            align.bits() as u32,\n             flags,\n             None,\n             empty_array,\n             0,\n-            None,\n+            vtable_holder,\n             unique_type_id.as_ptr().cast(),\n             unique_type_id.len(),\n         )"}]}