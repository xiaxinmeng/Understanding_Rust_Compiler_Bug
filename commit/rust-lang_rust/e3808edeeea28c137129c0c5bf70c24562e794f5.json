{"sha": "e3808edeeea28c137129c0c5bf70c24562e794f5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzODA4ZWRlZWVhMjhjMTM3MTI5YzBjNWJmNzBjMjQ1NjJlNzk0ZjU=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-10-24T20:39:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-24T20:39:53Z"}, "message": "Rollup merge of #78119 - fusion-engineering-forks:panic-use-as-str, r=Amanieu\n\nThrow core::panic!(\"message\") as &str instead of String.\n\nThis makes `core::panic!(\"message\")` consistent with `std::panic!(\"message\")`, which throws a `&str` and not a `String`.\n\nThis also makes any other panics from `core::panicking::panic` result in a `&str` rather than a `String`, which includes compiler-generated panics such as the panics generated for `mem::zeroed()`.\n\n---\n\nDemonstration:\n\n```rust\nuse std::panic;\nuse std::any::Any;\n\nfn main() {\n    panic::set_hook(Box::new(|panic_info| check(panic_info.payload())));\n\n    check(&*panic::catch_unwind(|| core::panic!(\"core\")).unwrap_err());\n    check(&*panic::catch_unwind(|| std::panic!(\"std\")).unwrap_err());\n}\n\nfn check(msg: &(dyn Any + Send)) {\n    if let Some(s) = msg.downcast_ref::<String>() {\n        println!(\"Got a String: {:?}\", s);\n    } else if let Some(s) = msg.downcast_ref::<&str>() {\n        println!(\"Got a &str: {:?}\", s);\n    }\n}\n```\n\nBefore:\n```\nGot a String: \"core\"\nGot a String: \"core\"\nGot a &str: \"std\"\nGot a &str: \"std\"\n```\n\nAfter:\n```\nGot a &str: \"core\"\nGot a &str: \"core\"\nGot a &str: \"std\"\nGot a &str: \"std\"\n```", "tree": {"sha": "c58e4147d059534a0c5151944ff6da1ff3e9b8f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c58e4147d059534a0c5151944ff6da1ff3e9b8f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3808edeeea28c137129c0c5bf70c24562e794f5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJflJEaCRBK7hj4Ov3rIwAAdHIIAJ/iWl21QkyKS1ryN2mIUoMf\ngGwh5fyplXRpTSZajNAel+Wm6WML91IfeZY3JSuV6jXlP+yWny+tdbIiQsW+BkjU\nwp06HyoaoIGZFD9rb8tVwdmrIEiIcFX2XRgwqtrHu2qWSYHtUwx5sYKQawHFFSLH\nexkLOF9KGXryIMOWfHvqKQIU6oTxYVpPqOFlZe5FAS2pAjZ4BQUzwGIrprsqwN8K\nSatAPFfeJF+xaV/UK+YidhEXkVgSwc2hNkefov0B38WLnzIqGDEWs84tVhRV6iWk\n62nbQgdVYHRxcdW6o7o/w6bcFPtwEyP/7hxkIehMkQLP4PV7dFIJJC1WMUdZc+s=\n=7BHY\n-----END PGP SIGNATURE-----\n", "payload": "tree c58e4147d059534a0c5151944ff6da1ff3e9b8f6\nparent e12e97223f9f0bb0f2806334029aec1d9790f074\nparent 9890217c0eedcbe4742e412ea59e851ecd500bf5\nauthor Jonas Schievink <jonasschievink@gmail.com> 1603571993 +0200\ncommitter GitHub <noreply@github.com> 1603571993 +0200\n\nRollup merge of #78119 - fusion-engineering-forks:panic-use-as-str, r=Amanieu\n\nThrow core::panic!(\"message\") as &str instead of String.\n\nThis makes `core::panic!(\"message\")` consistent with `std::panic!(\"message\")`, which throws a `&str` and not a `String`.\n\nThis also makes any other panics from `core::panicking::panic` result in a `&str` rather than a `String`, which includes compiler-generated panics such as the panics generated for `mem::zeroed()`.\n\n---\n\nDemonstration:\n\n```rust\nuse std::panic;\nuse std::any::Any;\n\nfn main() {\n    panic::set_hook(Box::new(|panic_info| check(panic_info.payload())));\n\n    check(&*panic::catch_unwind(|| core::panic!(\"core\")).unwrap_err());\n    check(&*panic::catch_unwind(|| std::panic!(\"std\")).unwrap_err());\n}\n\nfn check(msg: &(dyn Any + Send)) {\n    if let Some(s) = msg.downcast_ref::<String>() {\n        println!(\"Got a String: {:?}\", s);\n    } else if let Some(s) = msg.downcast_ref::<&str>() {\n        println!(\"Got a &str: {:?}\", s);\n    }\n}\n```\n\nBefore:\n```\nGot a String: \"core\"\nGot a String: \"core\"\nGot a &str: \"std\"\nGot a &str: \"std\"\n```\n\nAfter:\n```\nGot a &str: \"core\"\nGot a &str: \"core\"\nGot a &str: \"std\"\nGot a &str: \"std\"\n```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3808edeeea28c137129c0c5bf70c24562e794f5", "html_url": "https://github.com/rust-lang/rust/commit/e3808edeeea28c137129c0c5bf70c24562e794f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3808edeeea28c137129c0c5bf70c24562e794f5/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e12e97223f9f0bb0f2806334029aec1d9790f074", "url": "https://api.github.com/repos/rust-lang/rust/commits/e12e97223f9f0bb0f2806334029aec1d9790f074", "html_url": "https://github.com/rust-lang/rust/commit/e12e97223f9f0bb0f2806334029aec1d9790f074"}, {"sha": "9890217c0eedcbe4742e412ea59e851ecd500bf5", "url": "https://api.github.com/repos/rust-lang/rust/commits/9890217c0eedcbe4742e412ea59e851ecd500bf5", "html_url": "https://github.com/rust-lang/rust/commit/9890217c0eedcbe4742e412ea59e851ecd500bf5"}], "stats": {"total": 23, "additions": 20, "deletions": 3}, "files": [{"sha": "3da0ebdd4982ae95fcce551a84f5f6cdca7d9a30", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3808edeeea28c137129c0c5bf70c24562e794f5/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3808edeeea28c137129c0c5bf70c24562e794f5/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=e3808edeeea28c137129c0c5bf70c24562e794f5", "patch": "@@ -259,6 +259,7 @@\n #![feature(exhaustive_patterns)]\n #![feature(extend_one)]\n #![feature(external_doc)]\n+#![feature(fmt_as_str)]\n #![feature(fn_traits)]\n #![feature(format_args_nl)]\n #![feature(gen_future)]"}, {"sha": "221ae809e23a2dbbd6beac3a740d99eb86ad3d3b", "filename": "library/std/src/panicking.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e3808edeeea28c137129c0c5bf70c24562e794f5/library%2Fstd%2Fsrc%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3808edeeea28c137129c0c5bf70c24562e794f5/library%2Fstd%2Fsrc%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpanicking.rs?ref=e3808edeeea28c137129c0c5bf70c24562e794f5", "patch": "@@ -478,10 +478,26 @@ pub fn begin_panic_handler(info: &PanicInfo<'_>) -> ! {\n         }\n     }\n \n+    struct StrPanicPayload(&'static str);\n+\n+    unsafe impl BoxMeUp for StrPanicPayload {\n+        fn take_box(&mut self) -> *mut (dyn Any + Send) {\n+            Box::into_raw(Box::new(self.0))\n+        }\n+\n+        fn get(&mut self) -> &(dyn Any + Send) {\n+            &self.0\n+        }\n+    }\n+\n     let loc = info.location().unwrap(); // The current implementation always returns Some\n     let msg = info.message().unwrap(); // The current implementation always returns Some\n     crate::sys_common::backtrace::__rust_end_short_backtrace(move || {\n-        rust_panic_with_hook(&mut PanicPayload::new(msg), info.message(), loc);\n+        if let Some(msg) = msg.as_str() {\n+            rust_panic_with_hook(&mut StrPanicPayload(msg), info.message(), loc);\n+        } else {\n+            rust_panic_with_hook(&mut PanicPayload::new(msg), info.message(), loc);\n+        }\n     })\n }\n "}, {"sha": "4a91198ab9f6fac8edfdca1a0e27c11bc4171509", "filename": "src/test/ui/intrinsics/panic-uninitialized-zeroed.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3808edeeea28c137129c0c5bf70c24562e794f5/src%2Ftest%2Fui%2Fintrinsics%2Fpanic-uninitialized-zeroed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3808edeeea28c137129c0c5bf70c24562e794f5/src%2Ftest%2Fui%2Fintrinsics%2Fpanic-uninitialized-zeroed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Fpanic-uninitialized-zeroed.rs?ref=e3808edeeea28c137129c0c5bf70c24562e794f5", "patch": "@@ -53,8 +53,8 @@ enum LR_NonZero {\n fn test_panic_msg<T>(op: impl (FnOnce() -> T) + panic::UnwindSafe, msg: &str) {\n     let err = panic::catch_unwind(op).err();\n     assert_eq!(\n-        err.as_ref().and_then(|a| a.downcast_ref::<String>()).map(|s| &**s),\n-        Some(msg)\n+        err.as_ref().and_then(|a| a.downcast_ref::<&str>()),\n+        Some(&msg)\n     );\n }\n "}]}