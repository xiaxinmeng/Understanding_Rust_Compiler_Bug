{"sha": "a84c93324c916ca678660268850c409e6549f834", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4NGM5MzMyNGM5MTZjYTY3ODY2MDI2ODg1MGM0MDllNjU0OWY4MzQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-02-12T03:42:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-02-12T03:42:21Z"}, "message": "Rollup merge of #58300 - taiki-e:librustc_typeck-2018, r=petrochenkov\n\nlibrustc_typeck => 2018\n\nTransitions `librustc_typeck` to Rust 2018; cc #58099\n\nTODO: elided_lifetimes_in_paths\n\nr? @Centril", "tree": {"sha": "408ce53dc634bdf5cb06bee9ab2536975571131c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/408ce53dc634bdf5cb06bee9ab2536975571131c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a84c93324c916ca678660268850c409e6549f834", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcYkCdCRBK7hj4Ov3rIwAAdHIIAJ3TOJigGfLr5n7c4u3R53r1\nRXMDLzQEKLPfFci/1b1/15HLnWfy/Lx0vr0+5w+/K2l0ms1g5wp6Y3NFdKH3RDC6\nCGcV5zu0M6uw/X9Cb2hyk8bmO4ZLdA9PjITz0lCmNkHdm3w9eaYhO/ywp5bXA+7c\nmy7lnu90lOjGMkv18Z+cKqUlgD3ELu0Yl2L6HcdVaF1xB2dbB69qPBB1sDeM6+7w\nDSQ2B4/36cZdbJq/6M/dT6LIM6NEnDrSDqaFoOBvePAsIq/SorxiJkNvHmx52h23\n0dCY1eQCyPb42iHxWaWftPu4QKMpE0GHoCQfKka4F7ABqxyaT8a0tQ+lcQ2Zazg=\n=VMQA\n-----END PGP SIGNATURE-----\n", "payload": "tree 408ce53dc634bdf5cb06bee9ab2536975571131c\nparent b8fe6f9d432c1165572f0c5fdf17bfb6b85eba82\nparent fe276239b3e01129fe1c2ecf5d729a430a6e184e\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1549942941 +0100\ncommitter GitHub <noreply@github.com> 1549942941 +0100\n\nRollup merge of #58300 - taiki-e:librustc_typeck-2018, r=petrochenkov\n\nlibrustc_typeck => 2018\n\nTransitions `librustc_typeck` to Rust 2018; cc #58099\n\nTODO: elided_lifetimes_in_paths\n\nr? @Centril\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a84c93324c916ca678660268850c409e6549f834", "html_url": "https://github.com/rust-lang/rust/commit/a84c93324c916ca678660268850c409e6549f834", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a84c93324c916ca678660268850c409e6549f834/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8fe6f9d432c1165572f0c5fdf17bfb6b85eba82", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8fe6f9d432c1165572f0c5fdf17bfb6b85eba82", "html_url": "https://github.com/rust-lang/rust/commit/b8fe6f9d432c1165572f0c5fdf17bfb6b85eba82"}, {"sha": "fe276239b3e01129fe1c2ecf5d729a430a6e184e", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe276239b3e01129fe1c2ecf5d729a430a6e184e", "html_url": "https://github.com/rust-lang/rust/commit/fe276239b3e01129fe1c2ecf5d729a430a6e184e"}], "stats": {"total": 198, "additions": 98, "deletions": 100}, "files": [{"sha": "dcfcd74257e6fcb4d85c47da724483b533dbbfed", "filename": "src/librustc_typeck/Cargo.toml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a84c93324c916ca678660268850c409e6549f834/src%2Flibrustc_typeck%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a84c93324c916ca678660268850c409e6549f834/src%2Flibrustc_typeck%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2FCargo.toml?ref=a84c93324c916ca678660268850c409e6549f834", "patch": "@@ -2,6 +2,7 @@\n authors = [\"The Rust Project Developers\"]\n name = \"rustc_typeck\"\n version = \"0.0.0\"\n+edition = \"2018\"\n \n [lib]\n name = \"rustc_typeck\"\n@@ -14,7 +15,7 @@ arena = { path = \"../libarena\" }\n log = \"0.4\"\n rustc = { path = \"../librustc\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n-rustc_errors = { path = \"../librustc_errors\" }\n+errors = { path = \"../librustc_errors\", package = \"rustc_errors\" }\n rustc_target = { path = \"../librustc_target\" }\n smallvec = { version = \"0.6.7\", features = [\"union\", \"may_dangle\"] }\n syntax = { path = \"../libsyntax\" }"}, {"sha": "ee3fd6e1601c2a886f52dd27f918a839abaa94df", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a84c93324c916ca678660268850c409e6549f834/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a84c93324c916ca678660268850c409e6549f834/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=a84c93324c916ca678660268850c409e6549f834", "patch": "@@ -3,13 +3,13 @@\n //! instance of `AstConv`.\n \n use errors::{Applicability, DiagnosticId};\n-use hir::{self, GenericArg, GenericArgs};\n-use hir::def::Def;\n-use hir::def_id::DefId;\n-use hir::HirVec;\n-use lint;\n-use middle::resolve_lifetime as rl;\n-use namespace::Namespace;\n+use crate::hir::{self, GenericArg, GenericArgs};\n+use crate::hir::def::Def;\n+use crate::hir::def_id::DefId;\n+use crate::hir::HirVec;\n+use crate::lint;\n+use crate::middle::resolve_lifetime as rl;\n+use crate::namespace::Namespace;\n use rustc::lint::builtin::AMBIGUOUS_ASSOCIATED_ITEMS;\n use rustc::traits;\n use rustc::ty::{self, Ty, TyCtxt, ToPredicate, TypeFoldable};\n@@ -18,15 +18,15 @@ use rustc::ty::subst::{Kind, Subst, Substs};\n use rustc::ty::wf::object_region_bounds;\n use rustc_data_structures::sync::Lrc;\n use rustc_target::spec::abi;\n-use require_c_abi_if_variadic;\n+use crate::require_c_abi_if_variadic;\n use smallvec::SmallVec;\n use syntax::ast;\n use syntax::feature_gate::{GateIssue, emit_feature_err};\n use syntax::ptr::P;\n use syntax::util::lev_distance::find_best_match_for_name;\n use syntax_pos::{DUMMY_SP, Span, MultiSpan};\n-use util::common::ErrorReported;\n-use util::nodemap::FxHashMap;\n+use crate::util::common::ErrorReported;\n+use crate::util::nodemap::FxHashMap;\n \n use std::collections::BTreeSet;\n use std::iter;"}, {"sha": "3a670c8e2f15eca152fd121efb651ad3b2e33420", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a84c93324c916ca678660268850c409e6549f834/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a84c93324c916ca678660268850c409e6549f834/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=a84c93324c916ca678660268850c409e6549f834", "patch": "@@ -1,5 +1,6 @@\n-use check::{FnCtxt, Expectation, Diverges, Needs};\n-use check::coercion::CoerceMany;\n+use crate::check::{FnCtxt, Expectation, Diverges, Needs};\n+use crate::check::coercion::CoerceMany;\n+use crate::util::nodemap::FxHashMap;\n use errors::Applicability;\n use rustc::hir::{self, PatKind};\n use rustc::hir::def::{Def, CtorKind};\n@@ -13,7 +14,6 @@ use syntax::source_map::Spanned;\n use syntax::ptr::P;\n use syntax::util::lev_distance::find_best_match_for_name;\n use syntax_pos::Span;\n-use util::nodemap::FxHashMap;\n \n use std::collections::hash_map::Entry::{Occupied, Vacant};\n use std::cmp;"}, {"sha": "be6d432a67f9ee1f5902ad0d5b2a162651500195", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a84c93324c916ca678660268850c409e6549f834/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a84c93324c916ca678660268850c409e6549f834/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=a84c93324c916ca678660268850c409e6549f834", "patch": "@@ -31,8 +31,8 @@\n use super::FnCtxt;\n \n use errors::{DiagnosticBuilder,Applicability};\n-use hir::def_id::DefId;\n-use lint;\n+use crate::hir::def_id::DefId;\n+use crate::lint;\n use rustc::hir;\n use rustc::session::Session;\n use rustc::traits;\n@@ -43,7 +43,7 @@ use rustc::ty::subst::Substs;\n use rustc::middle::lang_items;\n use syntax::ast;\n use syntax_pos::Span;\n-use util::common::ErrorReported;\n+use crate::util::common::ErrorReported;\n \n /// Reifies a cast check to be checked once we have full type information for\n /// a function context.\n@@ -294,7 +294,7 @@ impl<'a, 'gcx, 'tcx> CastCheck<'tcx> {\n                                   .emit();\n             }\n             CastError::SizedUnsizedCast => {\n-                use structured_errors::{SizedUnsizedCastError, StructuredDiagnostic};\n+                use crate::structured_errors::{SizedUnsizedCastError, StructuredDiagnostic};\n                 SizedUnsizedCastError::new(&fcx.tcx.sess,\n                                            self.span,\n                                            self.expr_ty,"}, {"sha": "24c300911b384d5705bf43b24380b66bf36079cd", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a84c93324c916ca678660268850c409e6549f834/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a84c93324c916ca678660268850c409e6549f834/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=a84c93324c916ca678660268850c409e6549f834", "patch": "@@ -2,8 +2,8 @@\n \n use super::{check_fn, Expectation, FnCtxt, GeneratorTypes};\n \n-use astconv::AstConv;\n-use middle::region;\n+use crate::astconv::AstConv;\n+use crate::middle::region;\n use rustc::hir::def_id::DefId;\n use rustc::infer::{InferOk, InferResult};\n use rustc::infer::LateBoundRegionConversionTime;"}, {"sha": "8a91e425db7bf40d194f2994bbafc60e81a4c307", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a84c93324c916ca678660268850c409e6549f834/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a84c93324c916ca678660268850c409e6549f834/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=a84c93324c916ca678660268850c409e6549f834", "patch": "@@ -50,7 +50,7 @@\n //! sort of a minor point so I've opted to leave it for later---after all\n //! we may want to adjust precisely when coercions occur.\n \n-use check::{FnCtxt, Needs};\n+use crate::check::{FnCtxt, Needs};\n use errors::DiagnosticBuilder;\n use rustc::hir;\n use rustc::hir::def_id::DefId;"}, {"sha": "82f00374521bd4c5ea753af501053d29854d15f2", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a84c93324c916ca678660268850c409e6549f834/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a84c93324c916ca678660268850c409e6549f834/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=a84c93324c916ca678660268850c409e6549f834", "patch": "@@ -1,4 +1,4 @@\n-use check::FnCtxt;\n+use crate::check::FnCtxt;\n use rustc::infer::InferOk;\n use rustc::traits::{ObligationCause, ObligationCauseCode};\n "}, {"sha": "0fc8241ef9d14aea15316fb30c97ac953a86e157", "filename": "src/librustc_typeck/check/dropck.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a84c93324c916ca678660268850c409e6549f834/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a84c93324c916ca678660268850c409e6549f834/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs?ref=a84c93324c916ca678660268850c409e6549f834", "patch": "@@ -1,13 +1,13 @@\n-use check::regionck::RegionCtxt;\n+use crate::check::regionck::RegionCtxt;\n \n-use hir::def_id::DefId;\n+use crate::hir::def_id::DefId;\n use rustc::infer::outlives::env::OutlivesEnvironment;\n use rustc::infer::{self, InferOk, SuppressRegionErrors};\n use rustc::middle::region;\n use rustc::traits::{ObligationCause, TraitEngine, TraitEngineExt};\n use rustc::ty::subst::{Subst, Substs, UnpackedKind};\n use rustc::ty::{self, Ty, TyCtxt};\n-use util::common::ErrorReported;\n+use crate::util::common::ErrorReported;\n \n use syntax::ast;\n use syntax_pos::Span;"}, {"sha": "7f4b0a96a15ab19c0e9acfda97fea432b1dd83fd", "filename": "src/librustc_typeck/check/generator_interior.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a84c93324c916ca678660268850c409e6549f834/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a84c93324c916ca678660268850c409e6549f834/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs?ref=a84c93324c916ca678660268850c409e6549f834", "patch": "@@ -11,7 +11,7 @@ use rustc::ty::{self, Ty};\n use rustc_data_structures::sync::Lrc;\n use syntax_pos::Span;\n use super::FnCtxt;\n-use util::nodemap::FxHashMap;\n+use crate::util::nodemap::FxHashMap;\n \n struct InteriorVisitor<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     fcx: &'a FnCtxt<'a, 'gcx, 'tcx>,"}, {"sha": "912ea39dce3ce6a552e2c0415e71f514a5787051", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a84c93324c916ca678660268850c409e6549f834/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a84c93324c916ca678660268850c409e6549f834/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=a84c93324c916ca678660268850c409e6549f834", "patch": "@@ -4,7 +4,7 @@\n use rustc::traits::{ObligationCause, ObligationCauseCode};\n use rustc::ty::{self, TyCtxt, Ty};\n use rustc::ty::subst::Subst;\n-use require_same_types;\n+use crate::require_same_types;\n \n use rustc_target::spec::abi::Abi;\n use syntax::symbol::Symbol;"}, {"sha": "34b248a106cb08cdb425afc3e0f68c6938429070", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a84c93324c916ca678660268850c409e6549f834/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a84c93324c916ca678660268850c409e6549f834/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=a84c93324c916ca678660268850c409e6549f834", "patch": "@@ -1,9 +1,9 @@\n use super::{probe, MethodCallee};\n \n-use astconv::AstConv;\n-use check::{FnCtxt, PlaceOp, callee, Needs};\n-use hir::GenericArg;\n-use hir::def_id::DefId;\n+use crate::astconv::AstConv;\n+use crate::check::{FnCtxt, PlaceOp, callee, Needs};\n+use crate::hir::GenericArg;\n+use crate::hir::def_id::DefId;\n use rustc::ty::subst::Substs;\n use rustc::traits;\n use rustc::ty::{self, Ty, GenericParamDefKind};"}, {"sha": "02cd5b79855947962d828e80f60d5f6912f164fb", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a84c93324c916ca678660268850c409e6549f834/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a84c93324c916ca678660268850c409e6549f834/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=a84c93324c916ca678660268850c409e6549f834", "patch": "@@ -10,9 +10,9 @@ pub use self::MethodError::*;\n pub use self::CandidateSource::*;\n pub use self::suggest::{SelfSource, TraitInfo};\n \n-use check::FnCtxt;\n+use crate::check::FnCtxt;\n+use crate::namespace::Namespace;\n use errors::{Applicability, DiagnosticBuilder};\n-use namespace::Namespace;\n use rustc_data_structures::sync::Lrc;\n use rustc::hir;\n use rustc::hir::def::Def;\n@@ -29,7 +29,7 @@ use syntax_pos::Span;\n use crate::{check_type_alias_enum_variants_enabled};\n use self::probe::{IsSuggestion, ProbeScope};\n \n-pub fn provide(providers: &mut ty::query::Providers) {\n+pub fn provide(providers: &mut ty::query::Providers<'_>) {\n     suggest::provide(providers);\n     probe::provide(providers);\n }"}, {"sha": "cf31a54a54b369923b496b2710512ca2c2cd97ba", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a84c93324c916ca678660268850c409e6549f834/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a84c93324c916ca678660268850c409e6549f834/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=a84c93324c916ca678660268850c409e6549f834", "patch": "@@ -3,11 +3,11 @@ use super::NoMatchData;\n use super::{CandidateSource, ImplSource, TraitSource};\n use super::suggest;\n \n-use check::autoderef::{self, Autoderef};\n-use check::FnCtxt;\n-use hir::def_id::DefId;\n-use hir::def::Def;\n-use namespace::Namespace;\n+use crate::check::autoderef::{self, Autoderef};\n+use crate::check::FnCtxt;\n+use crate::hir::def_id::DefId;\n+use crate::hir::def::Def;\n+use crate::namespace::Namespace;\n \n use rustc_data_structures::sync::Lrc;\n use rustc::hir;"}, {"sha": "8f98b347b4cc695c905afa6391b3add6060a407e", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a84c93324c916ca678660268850c409e6549f834/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a84c93324c916ca678660268850c409e6549f834/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=a84c93324c916ca678660268850c409e6549f834", "patch": "@@ -1,10 +1,11 @@\n //! Give useful errors and suggestions to users when an item can't be\n //! found or is otherwise invalid.\n \n-use check::FnCtxt;\n+use crate::check::FnCtxt;\n+use crate::middle::lang_items::FnOnceTraitLangItem;\n+use crate::namespace::Namespace;\n+use crate::util::nodemap::FxHashSet;\n use errors::{Applicability, DiagnosticBuilder};\n-use middle::lang_items::FnOnceTraitLangItem;\n-use namespace::Namespace;\n use rustc_data_structures::sync::Lrc;\n use rustc::hir::{self, ExprKind, Node, QPath};\n use rustc::hir::def::Def;\n@@ -15,7 +16,6 @@ use rustc::infer::type_variable::TypeVariableOrigin;\n use rustc::traits::Obligation;\n use rustc::ty::{self, Adt, Ty, TyCtxt, ToPolyTraitRef, ToPredicate, TypeFoldable};\n use rustc::ty::item_path::with_crate_prefix;\n-use util::nodemap::FxHashSet;\n use syntax_pos::{Span, FileName};\n use syntax::ast;\n use syntax::util::lev_distance::find_best_match_for_name;"}, {"sha": "467032f05d6a8e552c9f63fa1717013b70ef3fba", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a84c93324c916ca678660268850c409e6549f834/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a84c93324c916ca678660268850c409e6549f834/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=a84c93324c916ca678660268850c409e6549f834", "patch": "@@ -83,15 +83,15 @@ mod generator_interior;\n pub mod intrinsic;\n mod op;\n \n-use astconv::{AstConv, PathSeg};\n+use crate::astconv::{AstConv, PathSeg};\n use errors::{Applicability, DiagnosticBuilder, DiagnosticId};\n use rustc::hir::{self, ExprKind, GenericArg, ItemKind, Node, PatKind, QPath};\n use rustc::hir::def::{CtorKind, Def};\n use rustc::hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n use rustc::hir::intravisit::{self, Visitor, NestedVisitorMap};\n use rustc::hir::itemlikevisit::ItemLikeVisitor;\n-use middle::lang_items;\n-use namespace::Namespace;\n+use crate::middle::lang_items;\n+use crate::namespace::Namespace;\n use rustc::infer::{self, InferCtxt, InferOk, InferResult, RegionVariableOrigin};\n use rustc::infer::canonical::{Canonical, OriginalQueryValues, QueryResponse};\n use rustc_data_structures::indexed_vec::Idx;\n@@ -130,14 +130,14 @@ use std::mem::replace;\n use std::ops::{self, Deref};\n use std::slice;\n \n-use require_c_abi_if_variadic;\n-use session::{CompileIncomplete, Session};\n-use session::config::EntryFnType;\n-use TypeAndSubsts;\n-use lint;\n-use util::captures::Captures;\n-use util::common::{ErrorReported, indenter};\n-use util::nodemap::{DefIdMap, DefIdSet, FxHashMap, FxHashSet, NodeMap};\n+use crate::require_c_abi_if_variadic;\n+use crate::session::{CompileIncomplete, Session};\n+use crate::session::config::EntryFnType;\n+use crate::TypeAndSubsts;\n+use crate::lint;\n+use crate::util::captures::Captures;\n+use crate::util::common::{ErrorReported, indenter};\n+use crate::util::nodemap::{DefIdMap, DefIdSet, FxHashMap, FxHashSet, NodeMap};\n \n pub use self::Expectation::*;\n use self::autoderef::Autoderef;\n@@ -3044,7 +3044,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         // arguments which we skipped above.\n         if variadic {\n             fn variadic_error<'tcx>(s: &Session, span: Span, t: Ty<'tcx>, cast_ty: &str) {\n-                use structured_errors::{VariadicError, StructuredDiagnostic};\n+                use crate::structured_errors::{VariadicError, StructuredDiagnostic};\n                 VariadicError::new(s, span, t, cast_ty).diagnostic().emit();\n             }\n \n@@ -3685,8 +3685,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         display\n     }\n \n-    fn no_such_field_err<T: Display>(&self, span: Span, field: T, expr_t: &ty::TyS)\n-        -> DiagnosticBuilder {\n+    fn no_such_field_err<T: Display>(&self, span: Span, field: T, expr_t: &ty::TyS<'_>)\n+        -> DiagnosticBuilder<'_> {\n         type_error_struct!(self.tcx().sess, span, expr_t, E0609,\n                            \"no field `{}` on type `{}`\",\n                            field, expr_t)\n@@ -5257,7 +5257,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         &self,\n         blk: &'gcx hir::Block,\n         expected_ty: Ty<'tcx>,\n-        err: &mut DiagnosticBuilder,\n+        err: &mut DiagnosticBuilder<'_>,\n     ) {\n         if let Some(span_semi) = self.could_remove_semicolon(blk, expected_ty) {\n             err.span_suggestion(\n@@ -5725,7 +5725,7 @@ fn fatally_break_rust(sess: &Session) {\n     );\n     handler.note_without_error(&format!(\"rustc {} running on {}\",\n         option_env!(\"CFG_VERSION\").unwrap_or(\"unknown_version\"),\n-        ::session::config::host_triple(),\n+        crate::session::config::host_triple(),\n     ));\n }\n "}, {"sha": "c058977181c9bd534b759c919d96d4d385efcc46", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a84c93324c916ca678660268850c409e6549f834/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a84c93324c916ca678660268850c409e6549f834/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=a84c93324c916ca678660268850c409e6549f834", "patch": "@@ -72,11 +72,11 @@\n //! relation, except that a borrowed pointer never owns its\n //! contents.\n \n-use check::dropck;\n-use check::FnCtxt;\n-use middle::mem_categorization as mc;\n-use middle::mem_categorization::Categorization;\n-use middle::region;\n+use crate::check::dropck;\n+use crate::check::FnCtxt;\n+use crate::middle::mem_categorization as mc;\n+use crate::middle::mem_categorization::Categorization;\n+use crate::middle::region;\n use rustc::hir::def_id::DefId;\n use rustc::infer::outlives::env::OutlivesEnvironment;\n use rustc::infer::{self, RegionObligation, SuppressRegionErrors};"}, {"sha": "1816b7454dd2d12174d71dbe4427ccee560b1901", "filename": "src/librustc_typeck/check/upvar.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a84c93324c916ca678660268850c409e6549f834/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a84c93324c916ca678660268850c409e6549f834/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs?ref=a84c93324c916ca678660268850c409e6549f834", "patch": "@@ -32,9 +32,9 @@\n \n use super::FnCtxt;\n \n-use middle::expr_use_visitor as euv;\n-use middle::mem_categorization as mc;\n-use middle::mem_categorization::Categorization;\n+use crate::middle::expr_use_visitor as euv;\n+use crate::middle::mem_categorization as mc;\n+use crate::middle::mem_categorization::Categorization;\n use rustc::hir;\n use rustc::hir::def_id::DefId;\n use rustc::hir::def_id::LocalDefId;"}, {"sha": "b51fd58b75c20063c534fda4401149947e07add1", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a84c93324c916ca678660268850c409e6549f834/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a84c93324c916ca678660268850c409e6549f834/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=a84c93324c916ca678660268850c409e6549f834", "patch": "@@ -1,7 +1,7 @@\n-use check::{Inherited, FnCtxt};\n-use constrained_type_params::{identify_constrained_type_params, Parameter};\n+use crate::check::{Inherited, FnCtxt};\n+use crate::constrained_type_params::{identify_constrained_type_params, Parameter};\n \n-use hir::def_id::DefId;\n+use crate::hir::def_id::DefId;\n use rustc::traits::{self, ObligationCauseCode};\n use rustc::ty::{self, Lift, Ty, TyCtxt, TyKind, GenericParamDefKind, TypeFoldable, ToPredicate};\n use rustc::ty::subst::{Subst, Substs};"}, {"sha": "e02e70651d6c130d26e306a9975a843890293308", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a84c93324c916ca678660268850c409e6549f834/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a84c93324c916ca678660268850c409e6549f834/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=a84c93324c916ca678660268850c409e6549f834", "patch": "@@ -2,7 +2,7 @@\n // unresolved type variables and replaces \"ty_var\" types with their\n // substitutions.\n \n-use check::FnCtxt;\n+use crate::check::FnCtxt;\n use errors::DiagnosticBuilder;\n use rustc::hir;\n use rustc::hir::def_id::{DefId, DefIndex};"}, {"sha": "18194eeba80a273bcf85285911e6c2d47612ff03", "filename": "src/librustc_typeck/check_unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a84c93324c916ca678660268850c409e6549f834/src%2Flibrustc_typeck%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a84c93324c916ca678660268850c409e6549f834/src%2Flibrustc_typeck%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck_unused.rs?ref=a84c93324c916ca678660268850c409e6549f834", "patch": "@@ -1,4 +1,4 @@\n-use lint;\n+use crate::lint;\n use rustc::ty::TyCtxt;\n \n use errors::Applicability;"}, {"sha": "138c598a7bbf0c1340c474fe12ca2e73740533a7", "filename": "src/librustc_typeck/coherence/inherent_impls_overlap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a84c93324c916ca678660268850c409e6549f834/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls_overlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a84c93324c916ca678660268850c409e6549f834/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls_overlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls_overlap.rs?ref=a84c93324c916ca678660268850c409e6549f834", "patch": "@@ -1,11 +1,11 @@\n-use namespace::Namespace;\n+use crate::namespace::Namespace;\n use rustc::hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n use rustc::hir;\n use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::traits::{self, IntercrateMode};\n use rustc::ty::TyCtxt;\n \n-use lint;\n+use crate::lint;\n \n pub fn crate_inherent_impls_overlap_check<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                                     crate_num: CrateNum) {"}, {"sha": "4eee68b99d968433ead88b0c424b26b75844c964", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a84c93324c916ca678660268850c409e6549f834/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a84c93324c916ca678660268850c409e6549f834/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=a84c93324c916ca678660268850c409e6549f834", "patch": "@@ -5,7 +5,7 @@\n // done by the orphan and overlap modules. Then we build up various\n // mappings. That mapping code resides here.\n \n-use hir::def_id::{DefId, LOCAL_CRATE};\n+use crate::hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::traits;\n use rustc::ty::{self, TyCtxt, TypeFoldable};\n use rustc::ty::query::Providers;"}, {"sha": "bb4fba105f7326ac3419e26e170085cb1b140477", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a84c93324c916ca678660268850c409e6549f834/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a84c93324c916ca678660268850c409e6549f834/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=a84c93324c916ca678660268850c409e6549f834", "patch": "@@ -14,13 +14,13 @@\n //! At present, however, we do run collection across all items in the\n //! crate as a kind of pass. This should eventually be factored away.\n \n-use astconv::{AstConv, Bounds};\n-use constrained_type_params as ctp;\n-use check::intrinsic::intrisic_operation_unsafety;\n-use lint;\n-use middle::lang_items::SizedTraitLangItem;\n-use middle::resolve_lifetime as rl;\n-use middle::weak_lang_items;\n+use crate::astconv::{AstConv, Bounds};\n+use crate::constrained_type_params as ctp;\n+use crate::check::intrinsic::intrisic_operation_unsafety;\n+use crate::lint;\n+use crate::middle::lang_items::SizedTraitLangItem;\n+use crate::middle::resolve_lifetime as rl;\n+use crate::middle::weak_lang_items;\n use rustc::mir::mono::Linkage;\n use rustc::ty::query::Providers;\n use rustc::ty::subst::Substs;\n@@ -68,7 +68,7 @@ fn collect_mod_item_types<'tcx>(tcx: TyCtxt<'_, 'tcx, 'tcx>, module_def_id: DefI\n     );\n }\n \n-pub fn provide(providers: &mut Providers) {\n+pub fn provide(providers: &mut Providers<'_>) {\n     *providers = Providers {\n         type_of,\n         generics_of,"}, {"sha": "d1f33b65fc07a510fde0102f056ae1fca5f48e9b", "filename": "src/librustc_typeck/constrained_type_params.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a84c93324c916ca678660268850c409e6549f834/src%2Flibrustc_typeck%2Fconstrained_type_params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a84c93324c916ca678660268850c409e6549f834/src%2Flibrustc_typeck%2Fconstrained_type_params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fconstrained_type_params.rs?ref=a84c93324c916ca678660268850c409e6549f834", "patch": "@@ -124,7 +124,7 @@ pub fn identify_constrained_type_params<'tcx>(tcx: TyCtxt<'_, 'tcx, 'tcx>,\n /// which is determined by 1, which requires `U`, that is determined\n /// by 0. I should probably pick a less tangled example, but I can't\n /// think of any.\n-pub fn setup_constraining_predicates<'tcx>(tcx: TyCtxt,\n+pub fn setup_constraining_predicates<'tcx>(tcx: TyCtxt<'_, '_, '_>,\n                                            predicates: &mut [(ty::Predicate<'tcx>, Span)],\n                                            impl_trait_ref: Option<ty::TraitRef<'tcx>>,\n                                            input_parameters: &mut FxHashSet<Parameter>)"}, {"sha": "6de06b64816959334d2ff3199649087a532f765e", "filename": "src/librustc_typeck/impl_wf_check.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a84c93324c916ca678660268850c409e6549f834/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a84c93324c916ca678660268850c409e6549f834/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fimpl_wf_check.rs?ref=a84c93324c916ca678660268850c409e6549f834", "patch": "@@ -8,7 +8,7 @@\n //! specialization errors. These things can (and probably should) be\n //! fixed, but for the moment it's easier to do these checks early.\n \n-use constrained_type_params as ctp;\n+use crate::constrained_type_params as ctp;\n use rustc::hir;\n use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::hir::def_id::DefId;\n@@ -162,7 +162,7 @@ fn enforce_impl_params_are_constrained<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     // used elsewhere are not projected back out.\n }\n \n-fn report_unused_parameter(tcx: TyCtxt,\n+fn report_unused_parameter(tcx: TyCtxt<'_, '_, '_>,\n                            span: Span,\n                            kind: &str,\n                            name: &str)"}, {"sha": "e99ec539c772137110c447413fc5818e38d6591c", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a84c93324c916ca678660268850c409e6549f834/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a84c93324c916ca678660268850c409e6549f834/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=a84c93324c916ca678660268850c409e6549f834", "patch": "@@ -72,17 +72,15 @@ This API is completely unstable and subject to change.\n \n #![recursion_limit=\"256\"]\n \n+#![deny(rust_2018_idioms)]\n+#![allow(explicit_outlives_requirements)]\n+\n+#![allow(elided_lifetimes_in_paths)] // WIP\n+\n #[macro_use] extern crate log;\n #[macro_use] extern crate syntax;\n-extern crate syntax_pos;\n-\n-extern crate arena;\n \n #[macro_use] extern crate rustc;\n-extern crate rustc_data_structures;\n-extern crate rustc_errors as errors;\n-extern crate rustc_target;\n-extern crate smallvec;\n \n // N.B., this module needs to be declared first so diagnostics are\n // registered before they are used.\n@@ -141,7 +139,7 @@ fn check_type_alias_enum_variants_enabled<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx,\n     }\n }\n \n-fn require_c_abi_if_variadic(tcx: TyCtxt,\n+fn require_c_abi_if_variadic(tcx: TyCtxt<'_, '_, '_>,\n                              decl: &hir::FnDecl,\n                              abi: Abi,\n                              span: Span) {\n@@ -310,7 +308,7 @@ fn check_for_entry_fn<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     }\n }\n \n-pub fn provide(providers: &mut Providers) {\n+pub fn provide(providers: &mut Providers<'_>) {\n     collect::provide(providers);\n     coherence::provide(providers);\n     check::provide(providers);"}, {"sha": "574086f780a9d01683525e8bfa1825b2ecac29d0", "filename": "src/librustc_typeck/outlives/explicit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a84c93324c916ca678660268850c409e6549f834/src%2Flibrustc_typeck%2Foutlives%2Fexplicit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a84c93324c916ca678660268850c409e6549f834/src%2Flibrustc_typeck%2Foutlives%2Fexplicit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Foutlives%2Fexplicit.rs?ref=a84c93324c916ca678660268850c409e6549f834", "patch": "@@ -1,6 +1,6 @@\n use rustc::hir::def_id::DefId;\n use rustc::ty::{self, OutlivesPredicate, TyCtxt};\n-use util::nodemap::FxHashMap;\n+use crate::util::nodemap::FxHashMap;\n \n use super::utils::*;\n "}, {"sha": "0ff884d72b19fac8bb7067b6d6f2384d5d3f8aa7", "filename": "src/librustc_typeck/outlives/implicit_infer.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a84c93324c916ca678660268850c409e6549f834/src%2Flibrustc_typeck%2Foutlives%2Fimplicit_infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a84c93324c916ca678660268850c409e6549f834/src%2Flibrustc_typeck%2Foutlives%2Fimplicit_infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Foutlives%2Fimplicit_infer.rs?ref=a84c93324c916ca678660268850c409e6549f834", "patch": "@@ -1,5 +1,4 @@\n-use rustc::hir;\n-use hir::Node;\n+use rustc::hir::{self, Node};\n use rustc::hir::def_id::DefId;\n use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::ty::subst::{Kind, Subst, UnpackedKind};"}, {"sha": "b3634d37cc2b8553620e3e1f17711046b6b98f0b", "filename": "src/librustc_typeck/outlives/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a84c93324c916ca678660268850c409e6549f834/src%2Flibrustc_typeck%2Foutlives%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a84c93324c916ca678660268850c409e6549f834/src%2Flibrustc_typeck%2Foutlives%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Foutlives%2Fmod.rs?ref=a84c93324c916ca678660268850c409e6549f834", "patch": "@@ -12,7 +12,7 @@ mod implicit_infer;\n pub mod test;\n mod utils;\n \n-pub fn provide(providers: &mut Providers) {\n+pub fn provide(providers: &mut Providers<'_>) {\n     *providers = Providers {\n         inferred_outlives_of,\n         inferred_outlives_crate,"}, {"sha": "ec0acfb63a89a2354fc0f783b489fa81238efca7", "filename": "src/librustc_typeck/variance/terms.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a84c93324c916ca678660268850c409e6549f834/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a84c93324c916ca678660268850c409e6549f834/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs?ref=a84c93324c916ca678660268850c409e6549f834", "patch": "@@ -15,7 +15,7 @@ use std::fmt;\n use syntax::ast;\n use rustc::hir;\n use rustc::hir::itemlikevisit::ItemLikeVisitor;\n-use util::nodemap::NodeMap;\n+use crate::util::nodemap::NodeMap;\n \n use self::VarianceTerm::*;\n "}]}