{"sha": "37bffb7797ff7ffa65eeda3f936a1d45670c157b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3YmZmYjc3OTdmZjdmZmE2NWVlZGEzZjkzNmExZDQ1NjcwYzE1N2I=", "commit": {"author": {"name": "Yoshitomo Nakanishi", "email": "yurayura.rounin.3@gmail.com", "date": "2021-03-12T03:15:45Z"}, "committer": {"name": "Yoshitomo Nakanishi", "email": "yurayura.rounin.3@gmail.com", "date": "2021-03-16T02:25:46Z"}, "message": "Extract utility functions to utils.rs", "tree": {"sha": "e1464669d2937c9c4cf8d220e4a32875545ae696", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e1464669d2937c9c4cf8d220e4a32875545ae696"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37bffb7797ff7ffa65eeda3f936a1d45670c157b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37bffb7797ff7ffa65eeda3f936a1d45670c157b", "html_url": "https://github.com/rust-lang/rust/commit/37bffb7797ff7ffa65eeda3f936a1d45670c157b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37bffb7797ff7ffa65eeda3f936a1d45670c157b/comments", "author": {"login": "Y-Nak", "id": 6376004, "node_id": "MDQ6VXNlcjYzNzYwMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6376004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Y-Nak", "html_url": "https://github.com/Y-Nak", "followers_url": "https://api.github.com/users/Y-Nak/followers", "following_url": "https://api.github.com/users/Y-Nak/following{/other_user}", "gists_url": "https://api.github.com/users/Y-Nak/gists{/gist_id}", "starred_url": "https://api.github.com/users/Y-Nak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Y-Nak/subscriptions", "organizations_url": "https://api.github.com/users/Y-Nak/orgs", "repos_url": "https://api.github.com/users/Y-Nak/repos", "events_url": "https://api.github.com/users/Y-Nak/events{/privacy}", "received_events_url": "https://api.github.com/users/Y-Nak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Y-Nak", "id": 6376004, "node_id": "MDQ6VXNlcjYzNzYwMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6376004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Y-Nak", "html_url": "https://github.com/Y-Nak", "followers_url": "https://api.github.com/users/Y-Nak/followers", "following_url": "https://api.github.com/users/Y-Nak/following{/other_user}", "gists_url": "https://api.github.com/users/Y-Nak/gists{/gist_id}", "starred_url": "https://api.github.com/users/Y-Nak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Y-Nak/subscriptions", "organizations_url": "https://api.github.com/users/Y-Nak/orgs", "repos_url": "https://api.github.com/users/Y-Nak/repos", "events_url": "https://api.github.com/users/Y-Nak/events{/privacy}", "received_events_url": "https://api.github.com/users/Y-Nak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ecbef77bd71c2a4b4ad8dbb0b0ffa67affe29cc3", "url": "https://api.github.com/repos/rust-lang/rust/commits/ecbef77bd71c2a4b4ad8dbb0b0ffa67affe29cc3", "html_url": "https://github.com/rust-lang/rust/commit/ecbef77bd71c2a4b4ad8dbb0b0ffa67affe29cc3"}], "stats": {"total": 23, "additions": 14, "deletions": 9}, "files": [{"sha": "d71f9d7d24b067c6575417cea2363c4a83f4864e", "filename": "clippy_lints/src/unit_types/mod.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/37bffb7797ff7ffa65eeda3f936a1d45670c157b/clippy_lints%2Fsrc%2Funit_types%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37bffb7797ff7ffa65eeda3f936a1d45670c157b/clippy_lints%2Fsrc%2Funit_types%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funit_types%2Fmod.rs?ref=37bffb7797ff7ffa65eeda3f936a1d45670c157b", "patch": "@@ -1,9 +1,10 @@\n+mod utils;\n+\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::{BinOpKind, Block, Expr, ExprKind, MatchSource, Node, Stmt, StmtKind};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n-use rustc_middle::ty::{self, Ty};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::hygiene::{ExpnKind, MacroKind};\n \n@@ -13,6 +14,8 @@ use crate::utils::diagnostics::{span_lint, span_lint_and_then};\n use crate::utils::higher;\n use crate::utils::source::{indent_of, reindent_multiline, snippet_opt, snippet_with_macro_callsite};\n \n+use utils::{is_unit, is_unit_literal};\n+\n declare_clippy_lint! {\n     /// **What it does:** Checks for binding a unit value.\n     ///\n@@ -244,14 +247,6 @@ fn is_questionmark_desugar_marked_call(expr: &Expr<'_>) -> bool {\n     }\n }\n \n-fn is_unit(ty: Ty<'_>) -> bool {\n-    matches!(ty.kind(), ty::Tuple(slice) if slice.is_empty())\n-}\n-\n-fn is_unit_literal(expr: &Expr<'_>) -> bool {\n-    matches!(expr.kind, ExprKind::Tup(ref slice) if slice.is_empty())\n-}\n-\n fn lint_unit_args(cx: &LateContext<'_>, expr: &Expr<'_>, args_to_recover: &[&Expr<'_>]) {\n     let mut applicability = Applicability::MachineApplicable;\n     let (singular, plural) = if args_to_recover.len() > 1 {"}, {"sha": "a15a7b812c590f22786ec026f38a412e470b2df5", "filename": "clippy_lints/src/unit_types/utils.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/37bffb7797ff7ffa65eeda3f936a1d45670c157b/clippy_lints%2Fsrc%2Funit_types%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37bffb7797ff7ffa65eeda3f936a1d45670c157b/clippy_lints%2Fsrc%2Funit_types%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funit_types%2Futils.rs?ref=37bffb7797ff7ffa65eeda3f936a1d45670c157b", "patch": "@@ -0,0 +1,10 @@\n+use rustc_hir::{Expr, ExprKind};\n+use rustc_middle::ty::{self, Ty};\n+\n+pub(super) fn is_unit(ty: Ty<'_>) -> bool {\n+    matches!(ty.kind(), ty::Tuple(slice) if slice.is_empty())\n+}\n+\n+pub(super) fn is_unit_literal(expr: &Expr<'_>) -> bool {\n+    matches!(expr.kind, ExprKind::Tup(ref slice) if slice.is_empty())\n+}"}]}