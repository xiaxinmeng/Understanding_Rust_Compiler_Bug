{"sha": "114cd006f52272618bd64382213cd08eaa313136", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExNGNkMDA2ZjUyMjcyNjE4YmQ2NDM4MjIxM2NkMDhlYWEzMTMxMzY=", "commit": {"author": {"name": "csmoe", "email": "csmoe@msn.com", "date": "2020-05-09T14:04:02Z"}, "committer": {"name": "csmoe", "email": "csmoe@msn.com", "date": "2020-05-10T14:37:24Z"}, "message": "normalize Future::Ouput", "tree": {"sha": "fff00c3a67a0744397dbee217b7f5af9213a8ccf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fff00c3a67a0744397dbee217b7f5af9213a8ccf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/114cd006f52272618bd64382213cd08eaa313136", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/114cd006f52272618bd64382213cd08eaa313136", "html_url": "https://github.com/rust-lang/rust/commit/114cd006f52272618bd64382213cd08eaa313136", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/114cd006f52272618bd64382213cd08eaa313136/comments", "author": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e2aac4f57b6bd4ca8e17b9143d49c14371e071f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e2aac4f57b6bd4ca8e17b9143d49c14371e071f", "html_url": "https://github.com/rust-lang/rust/commit/2e2aac4f57b6bd4ca8e17b9143d49c14371e071f"}], "stats": {"total": 19, "additions": 10, "deletions": 9}, "files": [{"sha": "bd5049446e61582dc1a20448a8d3a7cca61836ff", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/114cd006f52272618bd64382213cd08eaa313136/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/114cd006f52272618bd64382213cd08eaa313136/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=114cd006f52272618bd64382213cd08eaa313136", "patch": "@@ -5317,22 +5317,23 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     item_def_id,\n                 };\n \n+                let cause = traits::ObligationCause::misc(sp, self.body_id);\n+                let normalized_ty = self.fulfillment_cx.borrow_mut().normalize_projection_type(\n+                    &self.infcx,\n+                    self.param_env,\n+                    projection_ty,\n+                    cause,\n+                );\n+                debug!(\"suggest_missing_await: projection_type {:?}\", normalized_ty);\n+\n                 let predicate =\n                     ty::Predicate::Projection(ty::Binder::bind(ty::ProjectionPredicate {\n                         projection_ty,\n                         ty: expected,\n                     }));\n                 let obligation = traits::Obligation::new(self.misc(sp), self.param_env, predicate);\n-                debug!(\"suggest_missing_await: trying obligation {:?}\", obligation);\n \n-                //let try_trait_def_id = self.tcx.require_lang_item(lang_items::TryTraitLangItem, None);\n-                //let try_trait_ref = ty::TraitRef {\n-                //    def_id: try_trait_def_id,\n-                //    substs: self.tcx.mk_substs_trait(self.tcx.type_of(item_def_id), &[]),\n-                //};\n-                //let try_obligation = traits::Obligation::new(self.misc(sp), self.param_env, try_trait_ref.without_const().to_predicate());\n-                //let try_trait_is_implemented = self.predicate_must_hold_modulo_regions(&try_obligation);\n-                //debug!(\"suggest_missing_await: try trait is implemented {}\", try_trait_is_implemented);\n+                debug!(\"suggest_missing_await: trying obligation {:?}\", obligation);\n \n                 if self.infcx.predicate_may_hold(&obligation) {\n                     debug!(\"suggest_missing_await: obligation held: {:?}\", obligation);"}]}