{"sha": "f091a1e075b46b22f9df92acd2cf177e84ca1834", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwOTFhMWUwNzViNDZiMjJmOWRmOTJhY2QyY2YxNzdlODRjYTE4MzQ=", "commit": {"author": {"name": "Gary Linscott", "email": "glinscott@gmail.com", "date": "2013-07-11T03:03:10Z"}, "committer": {"name": "Gary Linscott", "email": "glinscott@gmail.com", "date": "2013-07-11T03:08:13Z"}, "message": "Convert json Reader to iterators\n\nThis is much faster for strings, and eventually when there is a\nbuffered reader of some sort.\n\nReading example.json 100 times before was around 1.18s.\nAfter:\n- reading from string 0.68s\n- reading from file 1.08s (extra time is all in io::Reader)", "tree": {"sha": "d8a301fe8b84d098275387048e3c0266defb7e9b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8a301fe8b84d098275387048e3c0266defb7e9b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f091a1e075b46b22f9df92acd2cf177e84ca1834", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f091a1e075b46b22f9df92acd2cf177e84ca1834", "html_url": "https://github.com/rust-lang/rust/commit/f091a1e075b46b22f9df92acd2cf177e84ca1834", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f091a1e075b46b22f9df92acd2cf177e84ca1834/comments", "author": {"login": "glinscott", "id": 554932, "node_id": "MDQ6VXNlcjU1NDkzMg==", "avatar_url": "https://avatars.githubusercontent.com/u/554932?v=4", "gravatar_id": "", "url": "https://api.github.com/users/glinscott", "html_url": "https://github.com/glinscott", "followers_url": "https://api.github.com/users/glinscott/followers", "following_url": "https://api.github.com/users/glinscott/following{/other_user}", "gists_url": "https://api.github.com/users/glinscott/gists{/gist_id}", "starred_url": "https://api.github.com/users/glinscott/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/glinscott/subscriptions", "organizations_url": "https://api.github.com/users/glinscott/orgs", "repos_url": "https://api.github.com/users/glinscott/repos", "events_url": "https://api.github.com/users/glinscott/events{/privacy}", "received_events_url": "https://api.github.com/users/glinscott/received_events", "type": "User", "site_admin": false}, "committer": {"login": "glinscott", "id": 554932, "node_id": "MDQ6VXNlcjU1NDkzMg==", "avatar_url": "https://avatars.githubusercontent.com/u/554932?v=4", "gravatar_id": "", "url": "https://api.github.com/users/glinscott", "html_url": "https://github.com/glinscott", "followers_url": "https://api.github.com/users/glinscott/followers", "following_url": "https://api.github.com/users/glinscott/following{/other_user}", "gists_url": "https://api.github.com/users/glinscott/gists{/gist_id}", "starred_url": "https://api.github.com/users/glinscott/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/glinscott/subscriptions", "organizations_url": "https://api.github.com/users/glinscott/orgs", "repos_url": "https://api.github.com/users/glinscott/repos", "events_url": "https://api.github.com/users/glinscott/events{/privacy}", "received_events_url": "https://api.github.com/users/glinscott/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8fa09736efcd100ec675a2fe0e29906607996485", "url": "https://api.github.com/repos/rust-lang/rust/commits/8fa09736efcd100ec675a2fe0e29906607996485", "html_url": "https://github.com/rust-lang/rust/commit/8fa09736efcd100ec675a2fe0e29906607996485"}], "stats": {"total": 66, "additions": 26, "deletions": 40}, "files": [{"sha": "06b6d0cb29e8af5d0ac159cb9901ca0cce3ec1b1", "filename": "src/libextra/json.rs", "status": "modified", "additions": 26, "deletions": 40, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/f091a1e075b46b22f9df92acd2cf177e84ca1834/src%2Flibextra%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f091a1e075b46b22f9df92acd2cf177e84ca1834/src%2Flibextra%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fjson.rs?ref=f091a1e075b46b22f9df92acd2cf177e84ca1834", "patch": "@@ -16,11 +16,10 @@\n \n //! json serialization\n \n-\n-use std::char;\n+use std::iterator;\n use std::float;\n use std::hashmap::HashMap;\n-use std::io::{WriterUtil, ReaderUtil};\n+use std::io::WriterUtil;\n use std::io;\n use std::str;\n use std::to_str;\n@@ -481,24 +480,17 @@ pub fn to_pretty_str(json: &Json) -> ~str {\n     io::with_str_writer(|wr| to_pretty_writer(wr, json))\n }\n \n-static BUF_SIZE : uint = 64000;\n-\n-#[allow(missing_doc)]\n-pub struct Parser {\n-    priv rdr: @io::Reader,\n-    priv buf: ~[char],\n-    priv buf_idx: uint,\n+pub struct Parser<T> {\n+    priv rdr: ~T,\n     priv ch: char,\n     priv line: uint,\n     priv col: uint,\n }\n \n-/// Decode a json value from an io::reader\n-pub fn Parser(rdr: @io::Reader) -> Parser {\n+/// Decode a json value from an Iterator<char>\n+pub fn Parser<T : iterator::Iterator<char>>(rdr: ~T) -> Parser<T> {\n     let mut p = Parser {\n         rdr: rdr,\n-        buf: rdr.read_chars(BUF_SIZE),\n-        buf_idx: 0,\n         ch: 0 as char,\n         line: 1,\n         col: 0,\n@@ -507,7 +499,7 @@ pub fn Parser(rdr: @io::Reader) -> Parser {\n     p\n }\n \n-impl Parser {\n+impl<T: iterator::Iterator<char>> Parser<T> {\n     pub fn parse(&mut self) -> Result<Json, Error> {\n         match self.parse_value() {\n           Ok(value) => {\n@@ -525,30 +517,20 @@ impl Parser {\n     }\n }\n \n-impl Parser {\n+impl<T : iterator::Iterator<char>> Parser<T> {\n     fn eof(&self) -> bool { self.ch == -1 as char }\n \n     fn bump(&mut self) {\n-        if self.eof() {\n-            return;\n-        }\n-\n-        self.col += 1u;\n-\n-        if self.buf_idx >= self.buf.len() {\n-            self.buf = self.rdr.read_chars(BUF_SIZE);\n-            if self.buf.len() == 0 {\n-                self.ch = -1 as char;\n-                return;\n-            }\n-            self.buf_idx = 0;\n+        match self.rdr.next() {\n+            Some(ch) => self.ch = ch,\n+            None() => self.ch = -1 as char,\n         }\n-        self.ch = self.buf[self.buf_idx];\n-        self.buf_idx += 1;\n \n         if self.ch == '\\n' {\n             self.line += 1u;\n             self.col = 1u;\n+        } else {\n+            self.col += 1u;\n         }\n     }\n \n@@ -583,7 +565,10 @@ impl Parser {\n     }\n \n     fn parse_whitespace(&mut self) {\n-        while char::is_whitespace(self.ch) { self.bump(); }\n+        while self.ch == ' ' ||\n+              self.ch == '\\n' ||\n+              self.ch == '\\t' ||\n+              self.ch == '\\r' { self.bump(); }\n     }\n \n     fn parse_ident(&mut self, ident: &str, value: Json) -> Result<Json, Error> {\n@@ -727,8 +712,11 @@ impl Parser {\n         let mut escape = false;\n         let mut res = ~\"\";\n \n-        while !self.eof() {\n+        loop {\n             self.bump();\n+            if self.eof() {\n+                return self.error(~\"EOF while parsing string\");\n+            }\n \n             if (escape) {\n                 match self.ch {\n@@ -783,8 +771,6 @@ impl Parser {\n                 res.push_char(self.ch);\n             }\n         }\n-\n-        self.error(~\"EOF while parsing string\")\n     }\n \n     fn parse_list(&mut self) -> Result<Json, Error> {\n@@ -870,15 +856,15 @@ impl Parser {\n \n /// Decodes a json value from an @io::Reader\n pub fn from_reader(rdr: @io::Reader) -> Result<Json, Error> {\n-    let mut parser = Parser(rdr);\n+    let s = str::from_bytes(rdr.read_whole_stream());\n+    let mut parser = Parser(~s.iter());\n     parser.parse()\n }\n \n /// Decodes a json value from a string\n pub fn from_str(s: &str) -> Result<Json, Error> {\n-    do io::with_str_reader(s) |rdr| {\n-        from_reader(rdr)\n-    }\n+    let mut parser = Parser(~s.iter());\n+    parser.parse()\n }\n \n /// A structure to decode JSON to values in rust.\n@@ -1744,7 +1730,7 @@ mod tests {\n         assert_eq!(v, 0.4e-01f);\n     }\n \n-    // FIXME: #7611: xfailed for now\n+    #[test]\n     fn test_read_str() {\n         assert_eq!(from_str(\"\\\"\"),\n             Err(Error {line: 1u, col: 2u, msg: @~\"EOF while parsing string\""}]}