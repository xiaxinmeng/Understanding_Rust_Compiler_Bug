{"sha": "8d9d4c87d677552ae52e2d58034e4be199b5a6d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkOWQ0Yzg3ZDY3NzU1MmFlNTJlMmQ1ODAzNGU0YmUxOTliNWE2ZDI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-09T23:24:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-09T23:24:21Z"}, "message": "Auto merge of #86419 - ricobbe:raw-dylib-stdcall, r=petrochenkov\n\nAdd support for raw-dylib with stdcall, fastcall functions\n\nNext stage of work for #58713: allow `extern \"stdcall\"` and `extern \"fastcall\"` with `#[link(kind = \"raw-dylib\")]`.\n\nI've deliberately omitted support for vectorcall, as that doesn't currently work, and I wanted to get this out for review.  (I haven't really investigated the vectorcall failure much yet, but at first (very cursory) glance it appears that the problem is elsewhere.)", "tree": {"sha": "634db4e9ad0c606cf2c95e7f256da1121b18fea9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/634db4e9ad0c606cf2c95e7f256da1121b18fea9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d9d4c87d677552ae52e2d58034e4be199b5a6d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d9d4c87d677552ae52e2d58034e4be199b5a6d2", "html_url": "https://github.com/rust-lang/rust/commit/8d9d4c87d677552ae52e2d58034e4be199b5a6d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d9d4c87d677552ae52e2d58034e4be199b5a6d2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4", "url": "https://api.github.com/repos/rust-lang/rust/commits/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4", "html_url": "https://github.com/rust-lang/rust/commit/240ff4c4a0d0936c9eeb783fa9ff5c0507a6ffb4"}, {"sha": "a867dd4c7e65beb1453fcff9e252e7ab19f0e1d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/a867dd4c7e65beb1453fcff9e252e7ab19f0e1d0", "html_url": "https://github.com/rust-lang/rust/commit/a867dd4c7e65beb1453fcff9e252e7ab19f0e1d0"}], "stats": {"total": 484, "additions": 436, "deletions": 48}, "files": [{"sha": "6ac7093b7dee833870d4568529293b088950f62f", "filename": "compiler/rustc_codegen_llvm/src/back/archive.rs", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/8d9d4c87d677552ae52e2d58034e4be199b5a6d2/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d9d4c87d677552ae52e2d58034e4be199b5a6d2/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs?ref=8d9d4c87d677552ae52e2d58034e4be199b5a6d2", "patch": "@@ -12,7 +12,7 @@ use crate::llvm::{self, ArchiveKind, LLVMMachineType, LLVMRustCOFFShortExport};\n use rustc_codegen_ssa::back::archive::{find_library, ArchiveBuilder};\n use rustc_codegen_ssa::{looks_like_rust_object_file, METADATA_FILENAME};\n use rustc_data_structures::temp_dir::MaybeTempDir;\n-use rustc_middle::middle::cstore::DllImport;\n+use rustc_middle::middle::cstore::{DllCallingConvention, DllImport};\n use rustc_session::Session;\n use rustc_span::symbol::Symbol;\n \n@@ -208,10 +208,12 @@ impl<'a> ArchiveBuilder<'a> for LlvmArchiveBuilder<'a> {\n         // have any \\0 characters\n         let import_name_vector: Vec<CString> = dll_imports\n             .iter()\n-            .map(if self.config.sess.target.arch == \"x86\" {\n-                |import: &DllImport| CString::new(format!(\"_{}\", import.name.to_string())).unwrap()\n-            } else {\n-                |import: &DllImport| CString::new(import.name.to_string()).unwrap()\n+            .map(|import: &DllImport| {\n+                if self.config.sess.target.arch == \"x86\" {\n+                    LlvmArchiveBuilder::i686_decorated_name(import)\n+                } else {\n+                    CString::new(import.name.to_string()).unwrap()\n+                }\n             })\n             .collect();\n \n@@ -391,6 +393,21 @@ impl<'a> LlvmArchiveBuilder<'a> {\n             ret\n         }\n     }\n+\n+    fn i686_decorated_name(import: &DllImport) -> CString {\n+        let name = import.name;\n+        // We verified during construction that `name` does not contain any NULL characters, so the\n+        // conversion to CString is guaranteed to succeed.\n+        CString::new(match import.calling_convention {\n+            DllCallingConvention::C => format!(\"_{}\", name),\n+            DllCallingConvention::Stdcall(arg_list_size) => format!(\"_{}@{}\", name, arg_list_size),\n+            DllCallingConvention::Fastcall(arg_list_size) => format!(\"@{}@{}\", name, arg_list_size),\n+            DllCallingConvention::Vectorcall(arg_list_size) => {\n+                format!(\"{}@@{}\", name, arg_list_size)\n+            }\n+        })\n+        .unwrap()\n+    }\n }\n \n fn string_to_io_error(s: String) -> io::Error {"}, {"sha": "f9efa448c93fa32ef6970e414deb5f46443c66d2", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 44, "deletions": 25, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/8d9d4c87d677552ae52e2d58034e4be199b5a6d2/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d9d4c87d677552ae52e2d58034e4be199b5a6d2/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=8d9d4c87d677552ae52e2d58034e4be199b5a6d2", "patch": "@@ -3,7 +3,7 @@ use rustc_data_structures::temp_dir::MaybeTempDir;\n use rustc_errors::Handler;\n use rustc_fs_util::fix_windows_verbatim_for_gcc;\n use rustc_hir::def_id::CrateNum;\n-use rustc_middle::middle::cstore::DllImport;\n+use rustc_middle::middle::cstore::{DllCallingConvention, DllImport};\n use rustc_middle::middle::dependency_format::Linkage;\n use rustc_session::config::{self, CFGuard, CrateType, DebugInfo, LdImpl, Strip};\n use rustc_session::config::{OutputFilenames, OutputType, PrintRequest};\n@@ -34,8 +34,8 @@ use object::write::Object;\n use object::{Architecture, BinaryFormat, Endianness, FileFlags, SectionFlags, SectionKind};\n use tempfile::Builder as TempFileBuilder;\n \n-use std::cmp::Ordering;\n use std::ffi::OsString;\n+use std::iter::FromIterator;\n use std::path::{Path, PathBuf};\n use std::process::{ExitStatus, Output, Stdio};\n use std::{ascii, char, env, fmt, fs, io, mem, str};\n@@ -259,7 +259,7 @@ fn link_rlib<'a, B: ArchiveBuilder<'a>>(\n     }\n \n     for (raw_dylib_name, raw_dylib_imports) in\n-        collate_raw_dylibs(&codegen_results.crate_info.used_libraries)\n+        collate_raw_dylibs(sess, &codegen_results.crate_info.used_libraries)\n     {\n         ab.inject_dll_import_lib(&raw_dylib_name, &raw_dylib_imports, tmpdir);\n     }\n@@ -451,8 +451,11 @@ fn link_rlib<'a, B: ArchiveBuilder<'a>>(\n /// then the CodegenResults value contains one NativeLib instance for each block.  However, the\n /// linker appears to expect only a single import library for each library used, so we need to\n /// collate the symbols together by library name before generating the import libraries.\n-fn collate_raw_dylibs(used_libraries: &[NativeLib]) -> Vec<(String, Vec<DllImport>)> {\n-    let mut dylib_table: FxHashMap<String, FxHashSet<Symbol>> = FxHashMap::default();\n+fn collate_raw_dylibs(\n+    sess: &Session,\n+    used_libraries: &[NativeLib],\n+) -> Vec<(String, Vec<DllImport>)> {\n+    let mut dylib_table: FxHashMap<String, FxHashSet<DllImport>> = FxHashMap::default();\n \n     for lib in used_libraries {\n         if lib.kind == NativeLibKind::RawDylib {\n@@ -464,35 +467,51 @@ fn collate_raw_dylibs(used_libraries: &[NativeLib]) -> Vec<(String, Vec<DllImpor\n             } else {\n                 format!(\"{}.dll\", name)\n             };\n-            dylib_table\n-                .entry(name)\n-                .or_default()\n-                .extend(lib.dll_imports.iter().map(|import| import.name));\n+            dylib_table.entry(name).or_default().extend(lib.dll_imports.iter().cloned());\n         }\n     }\n \n-    // FIXME: when we add support for ordinals, fix this to propagate ordinals.  Also figure out\n-    // what we should do if we have two DllImport values with the same name but different\n-    // ordinals.\n-    let mut result = dylib_table\n+    // Rustc already signals an error if we have two imports with the same name but different\n+    // calling conventions (or function signatures), so we don't have pay attention to those\n+    // when ordering.\n+    // FIXME: when we add support for ordinals, figure out if we need to do anything if we\n+    // have two DllImport values with the same name but different ordinals.\n+    let mut result: Vec<(String, Vec<DllImport>)> = dylib_table\n         .into_iter()\n-        .map(|(lib_name, imported_names)| {\n-            let mut names = imported_names\n-                .iter()\n-                .map(|name| DllImport { name: *name, ordinal: None })\n-                .collect::<Vec<_>>();\n-            names.sort_unstable_by(|a: &DllImport, b: &DllImport| {\n-                match a.name.as_str().cmp(&b.name.as_str()) {\n-                    Ordering::Equal => a.ordinal.cmp(&b.ordinal),\n-                    x => x,\n-                }\n-            });\n-            (lib_name, names)\n+        .map(|(lib_name, import_table)| {\n+            let mut imports = Vec::from_iter(import_table.into_iter());\n+            imports.sort_unstable_by_key(|x: &DllImport| x.name.as_str());\n+            (lib_name, imports)\n         })\n         .collect::<Vec<_>>();\n     result.sort_unstable_by(|a: &(String, Vec<DllImport>), b: &(String, Vec<DllImport>)| {\n         a.0.cmp(&b.0)\n     });\n+    let result = result;\n+\n+    // Check for multiple imports with the same name but different calling conventions or\n+    // (when relevant) argument list sizes.  Rustc only signals an error for this if the\n+    // declarations are at the same scope level; if one shadows the other, we only get a lint\n+    // warning.\n+    for (library, imports) in &result {\n+        let mut import_table: FxHashMap<Symbol, DllCallingConvention> = FxHashMap::default();\n+        for import in imports {\n+            if let Some(old_convention) =\n+                import_table.insert(import.name, import.calling_convention)\n+            {\n+                if import.calling_convention != old_convention {\n+                    sess.span_fatal(\n+                        import.span,\n+                        &format!(\n+                            \"multiple definitions of external function `{}` from library `{}` have different calling conventions\",\n+                            import.name,\n+                            library,\n+                    ));\n+                }\n+            }\n+        }\n+    }\n+\n     result\n }\n "}, {"sha": "16b4d26b37b4b79879bea9822765f137946a9a39", "filename": "compiler/rustc_metadata/src/native_libs.rs", "status": "modified", "additions": 57, "deletions": 15, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/8d9d4c87d677552ae52e2d58034e4be199b5a6d2/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d9d4c87d677552ae52e2d58034e4be199b5a6d2/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs?ref=8d9d4c87d677552ae52e2d58034e4be199b5a6d2", "patch": "@@ -3,8 +3,8 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n-use rustc_middle::middle::cstore::{DllImport, NativeLib};\n-use rustc_middle::ty::TyCtxt;\n+use rustc_middle::middle::cstore::{DllCallingConvention, DllImport, NativeLib};\n+use rustc_middle::ty::{List, ParamEnv, ParamEnvAnd, Ty, TyCtxt};\n use rustc_session::parse::feature_err;\n use rustc_session::utils::NativeLibKind;\n use rustc_session::Session;\n@@ -199,22 +199,10 @@ impl ItemLikeVisitor<'tcx> for Collector<'tcx> {\n             }\n \n             if lib.kind == NativeLibKind::RawDylib {\n-                match abi {\n-                    Abi::C { .. } => (),\n-                    Abi::Cdecl => (),\n-                    _ => {\n-                        if sess.target.arch == \"x86\" {\n-                            sess.span_fatal(\n-                                it.span,\n-                                r#\"`#[link(kind = \"raw-dylib\")]` only supports C and Cdecl ABIs\"#,\n-                            );\n-                        }\n-                    }\n-                };\n                 lib.dll_imports.extend(\n                     foreign_mod_items\n                         .iter()\n-                        .map(|child_item| DllImport { name: child_item.ident.name, ordinal: None }),\n+                        .map(|child_item| self.build_dll_import(abi, child_item)),\n                 );\n             }\n \n@@ -396,4 +384,58 @@ impl Collector<'tcx> {\n             }\n         }\n     }\n+\n+    fn i686_arg_list_size(&self, item: &hir::ForeignItemRef<'_>) -> usize {\n+        let argument_types: &List<Ty<'_>> = self.tcx.erase_late_bound_regions(\n+            self.tcx\n+                .type_of(item.id.def_id)\n+                .fn_sig(self.tcx)\n+                .inputs()\n+                .map_bound(|slice| self.tcx.mk_type_list(slice.iter())),\n+        );\n+\n+        argument_types\n+            .iter()\n+            .map(|ty| {\n+                let layout = self\n+                    .tcx\n+                    .layout_of(ParamEnvAnd { param_env: ParamEnv::empty(), value: ty })\n+                    .expect(\"layout\")\n+                    .layout;\n+                // In both stdcall and fastcall, we always round up the argument size to the\n+                // nearest multiple of 4 bytes.\n+                (layout.size.bytes_usize() + 3) & !3\n+            })\n+            .sum()\n+    }\n+\n+    fn build_dll_import(&self, abi: Abi, item: &hir::ForeignItemRef<'_>) -> DllImport {\n+        let calling_convention = if self.tcx.sess.target.arch == \"x86\" {\n+            match abi {\n+                Abi::C { .. } | Abi::Cdecl => DllCallingConvention::C,\n+                Abi::Stdcall { .. } | Abi::System { .. } => {\n+                    DllCallingConvention::Stdcall(self.i686_arg_list_size(item))\n+                }\n+                Abi::Fastcall => DllCallingConvention::Fastcall(self.i686_arg_list_size(item)),\n+                // Vectorcall is intentionally not supported at this time.\n+                _ => {\n+                    self.tcx.sess.span_fatal(\n+                        item.span,\n+                        r#\"ABI not supported by `#[link(kind = \"raw-dylib\")]` on i686\"#,\n+                    );\n+                }\n+            }\n+        } else {\n+            match abi {\n+                Abi::C { .. } | Abi::Win64 | Abi::System { .. } => DllCallingConvention::C,\n+                _ => {\n+                    self.tcx.sess.span_fatal(\n+                        item.span,\n+                        r#\"ABI not supported by `#[link(kind = \"raw-dylib\")]` on this architecture\"#,\n+                    );\n+                }\n+            }\n+        };\n+        DllImport { name: item.ident.name, ordinal: None, calling_convention, span: item.span }\n+    }\n }"}, {"sha": "d69904f7b11a2c0a5abb76f10f09f35d501108e6", "filename": "compiler/rustc_middle/src/middle/cstore.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8d9d4c87d677552ae52e2d58034e4be199b5a6d2/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d9d4c87d677552ae52e2d58034e4be199b5a6d2/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcstore.rs?ref=8d9d4c87d677552ae52e2d58034e4be199b5a6d2", "patch": "@@ -77,10 +77,29 @@ pub struct NativeLib {\n     pub dll_imports: Vec<DllImport>,\n }\n \n-#[derive(Clone, Debug, Encodable, Decodable, HashStable)]\n+#[derive(Clone, Debug, PartialEq, Eq, Encodable, Decodable, Hash, HashStable)]\n pub struct DllImport {\n     pub name: Symbol,\n     pub ordinal: Option<u16>,\n+    /// Calling convention for the function.\n+    ///\n+    /// On x86_64, this is always `DllCallingConvention::C`; on i686, it can be any\n+    /// of the values, and we use `DllCallingConvention::C` to represent `\"cdecl\"`.\n+    pub calling_convention: DllCallingConvention,\n+    /// Span of import's \"extern\" declaration; used for diagnostics.\n+    pub span: Span,\n+}\n+\n+/// Calling convention for a function defined in an external library.\n+///\n+/// The usize value, where present, indicates the size of the function's argument list\n+/// in bytes.\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, Encodable, Decodable, Hash, HashStable)]\n+pub enum DllCallingConvention {\n+    C,\n+    Stdcall(usize),\n+    Fastcall(usize),\n+    Vectorcall(usize),\n }\n \n #[derive(Clone, TyEncodable, TyDecodable, HashStable, Debug)]"}, {"sha": "0f874333fa09cd1942b25293cdbbec002dc149f3", "filename": "src/test/run-make/raw-dylib-alt-calling-convention/Makefile", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8d9d4c87d677552ae52e2d58034e4be199b5a6d2/src%2Ftest%2Frun-make%2Fraw-dylib-alt-calling-convention%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/8d9d4c87d677552ae52e2d58034e4be199b5a6d2/src%2Ftest%2Frun-make%2Fraw-dylib-alt-calling-convention%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fraw-dylib-alt-calling-convention%2FMakefile?ref=8d9d4c87d677552ae52e2d58034e4be199b5a6d2", "patch": "@@ -0,0 +1,18 @@\n+# Test the behavior of #[link(.., kind = \"raw-dylib\")] with alternative calling conventions.\n+\n+# only-i686-pc-windows-msvc\n+\n+-include ../../run-make-fulldeps/tools.mk\n+\n+all:\n+\t$(call COMPILE_OBJ,\"$(TMPDIR)\"/extern.obj,extern.c)\n+\t$(CC) \"$(TMPDIR)\"/extern.obj -link -dll -out:\"$(TMPDIR)\"/extern.dll\n+\t$(RUSTC) --crate-type lib --crate-name raw_dylib_alt_calling_convention_test lib.rs\n+\t$(RUSTC) --crate-type bin driver.rs -L \"$(TMPDIR)\"\n+\t\"$(TMPDIR)\"/driver > \"$(TMPDIR)\"/output.txt\n+\n+ifdef RUSTC_BLESS_TEST\n+\tcp \"$(TMPDIR)\"/output.txt output.txt\n+else\n+\t$(DIFF) output.txt \"$(TMPDIR)\"/output.txt\n+endif"}, {"sha": "3710507f5e44e5bed528d6aaaa590985e88d5b93", "filename": "src/test/run-make/raw-dylib-alt-calling-convention/driver.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8d9d4c87d677552ae52e2d58034e4be199b5a6d2/src%2Ftest%2Frun-make%2Fraw-dylib-alt-calling-convention%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d9d4c87d677552ae52e2d58034e4be199b5a6d2/src%2Ftest%2Frun-make%2Fraw-dylib-alt-calling-convention%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fraw-dylib-alt-calling-convention%2Fdriver.rs?ref=8d9d4c87d677552ae52e2d58034e4be199b5a6d2", "patch": "@@ -0,0 +1,5 @@\n+extern crate raw_dylib_alt_calling_convention_test;\n+\n+fn main() {\n+    raw_dylib_alt_calling_convention_test::library_function();\n+}"}, {"sha": "8f64abf2fb505cfc4a4018bc66c5ab83b8a54681", "filename": "src/test/run-make/raw-dylib-alt-calling-convention/extern.c", "status": "added", "additions": 123, "deletions": 0, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/8d9d4c87d677552ae52e2d58034e4be199b5a6d2/src%2Ftest%2Frun-make%2Fraw-dylib-alt-calling-convention%2Fextern.c", "raw_url": "https://github.com/rust-lang/rust/raw/8d9d4c87d677552ae52e2d58034e4be199b5a6d2/src%2Ftest%2Frun-make%2Fraw-dylib-alt-calling-convention%2Fextern.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fraw-dylib-alt-calling-convention%2Fextern.c?ref=8d9d4c87d677552ae52e2d58034e4be199b5a6d2", "patch": "@@ -0,0 +1,123 @@\n+#include <stdio.h>\n+#include <stdint.h>\n+\n+struct S {\n+    uint8_t x;\n+    int32_t y;\n+};\n+\n+struct S2 {\n+    int32_t x;\n+    uint8_t y;\n+};\n+\n+struct S3 {\n+    uint8_t x[5];\n+};\n+\n+__declspec(dllexport) void __stdcall stdcall_fn_1(int i) {\n+    printf(\"stdcall_fn_1(%d)\\n\", i);\n+    fflush(stdout);\n+}\n+\n+__declspec(dllexport) void __stdcall stdcall_fn_2(uint8_t i, float f) {\n+    printf(\"stdcall_fn_2(%d, %.1f)\\n\", i, f);\n+    fflush(stdout);\n+}\n+\n+__declspec(dllexport) void __stdcall stdcall_fn_3(double d) {\n+    printf(\"stdcall_fn_3(%.1f)\\n\", d);\n+    fflush(stdout);\n+}\n+\n+__declspec(dllexport) void __stdcall stdcall_fn_4(uint8_t i, uint8_t j, float f) {\n+    printf(\"stdcall_fn_4(%d, %d, %.1f)\\n\", i, j, f);\n+    fflush(stdout);\n+}\n+\n+__declspec(dllexport) void __stdcall stdcall_fn_5(struct S s, int i) {\n+    printf(\"stdcall_fn_5(S { x: %d, y: %d }, %d)\\n\", s.x, s.y, i);\n+    fflush(stdout);\n+}\n+\n+// Test that stdcall support works correctly with the nullable pointer optimization.\n+__declspec(dllexport) void __stdcall stdcall_fn_6(struct S* s) {\n+    if (s) {\n+        printf(\"stdcall_fn_6(S { x: %d, y: %d })\\n\", s->x, s->y);\n+    } else {\n+        printf(\"stdcall_fn_6(null)\\n\");\n+    }\n+    fflush(stdout);\n+}\n+\n+__declspec(dllexport) void __stdcall stdcall_fn_7(struct S2 s, int i) {\n+    printf(\"stdcall_fn_7(S2 { x: %d, y: %d }, %d)\\n\", s.x, s.y, i);\n+    fflush(stdout);\n+}\n+\n+// Verify that we compute the correct amount of space in the argument list for a 5-byte struct.\n+__declspec(dllexport) void __stdcall stdcall_fn_8(struct S3 s, struct S3 t) {\n+    printf(\"stdcall_fn_8(S3 { x: [%d, %d, %d, %d, %d] }, S3 { x: [%d, %d, %d, %d, %d] })\\n\",\n+           s.x[0], s.x[1], s.x[2], s.x[3], s.x[4],\n+           t.x[0], t.x[1], t.x[2], t.x[3], t.x[4]\n+        );\n+    fflush(stdout);\n+}\n+\n+// test whether f64/double values are aligned on 4-byte or 8-byte boundaries.\n+__declspec(dllexport) void __stdcall stdcall_fn_9(uint8_t x, double y) {\n+    printf(\"stdcall_fn_9(%d, %.1f)\\n\", x, y);\n+    fflush(stdout);\n+}\n+\n+__declspec(dllexport) void __fastcall fastcall_fn_1(int i) {\n+    printf(\"fastcall_fn_1(%d)\\n\", i);\n+    fflush(stdout);\n+}\n+\n+__declspec(dllexport) void __fastcall fastcall_fn_2(uint8_t i, float f) {\n+    printf(\"fastcall_fn_2(%d, %.1f)\\n\", i, f);\n+    fflush(stdout);\n+}\n+\n+__declspec(dllexport) void __fastcall fastcall_fn_3(double d) {\n+    printf(\"fastcall_fn_3(%.1f)\\n\", d);\n+    fflush(stdout);\n+}\n+\n+__declspec(dllexport) void __fastcall fastcall_fn_4(uint8_t i, uint8_t j, float f) {\n+    printf(\"fastcall_fn_4(%d, %d, %.1f)\\n\", i, j, f);\n+    fflush(stdout);\n+}\n+\n+__declspec(dllexport) void __fastcall fastcall_fn_5(struct S s, int i) {\n+    printf(\"fastcall_fn_5(S { x: %d, y: %d }, %d)\\n\", s.x, s.y, i);\n+    fflush(stdout);\n+}\n+\n+__declspec(dllexport) void __fastcall fastcall_fn_6(struct S* s) {\n+    if (s) {\n+        printf(\"fastcall_fn_6(S { x: %d, y: %d })\\n\", s->x, s->y);\n+    } else {\n+        printf(\"fastcall_fn_6(null)\\n\");\n+    }\n+    fflush(stdout);\n+}\n+\n+__declspec(dllexport) void __fastcall fastcall_fn_7(struct S2 s, int i) {\n+    printf(\"fastcall_fn_7(S2 { x: %d, y: %d }, %d)\\n\", s.x, s.y, i);\n+    fflush(stdout);\n+}\n+\n+__declspec(dllexport) void __fastcall fastcall_fn_8(struct S3 s, struct S3 t) {\n+    printf(\"fastcall_fn_8(S3 { x: [%d, %d, %d, %d, %d] }, S3 { x: [%d, %d, %d, %d, %d] })\\n\",\n+           s.x[0], s.x[1], s.x[2], s.x[3], s.x[4],\n+           t.x[0], t.x[1], t.x[2], t.x[3], t.x[4]\n+        );\n+    fflush(stdout);\n+}\n+\n+__declspec(dllexport) void __fastcall fastcall_fn_9(uint8_t x, double y) {\n+    printf(\"fastcall_fn_9(%d, %.1f)\\n\", x, y);\n+    fflush(stdout);\n+}"}, {"sha": "ba0f1418aba775e2692064ee6ee6c2a77b981fb6", "filename": "src/test/run-make/raw-dylib-alt-calling-convention/lib.rs", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/8d9d4c87d677552ae52e2d58034e4be199b5a6d2/src%2Ftest%2Frun-make%2Fraw-dylib-alt-calling-convention%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d9d4c87d677552ae52e2d58034e4be199b5a6d2/src%2Ftest%2Frun-make%2Fraw-dylib-alt-calling-convention%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fraw-dylib-alt-calling-convention%2Flib.rs?ref=8d9d4c87d677552ae52e2d58034e4be199b5a6d2", "patch": "@@ -0,0 +1,71 @@\n+#![feature(raw_dylib)]\n+\n+#[repr(C)]\n+#[derive(Clone)]\n+struct S {\n+    x: u8,\n+    y: i32,\n+}\n+\n+#[repr(C)]\n+#[derive(Clone)]\n+struct S2 {\n+    x: i32,\n+    y: u8,\n+}\n+\n+#[repr(C)]\n+#[derive(Clone)]\n+struct S3 {\n+    x: [u8; 5],\n+}\n+\n+#[link(name = \"extern\", kind = \"raw-dylib\")]\n+extern \"stdcall\" {\n+    fn stdcall_fn_1(i: i32);\n+    fn stdcall_fn_2(c: u8, f: f32);\n+    fn stdcall_fn_3(d: f64);\n+    fn stdcall_fn_4(i: u8, j: u8, f: f32);\n+    fn stdcall_fn_5(a: S, b: i32);\n+    fn stdcall_fn_6(a: Option<&S>);\n+    fn stdcall_fn_7(a: S2, b: i32);\n+    fn stdcall_fn_8(a: S3, b: S3);\n+    fn stdcall_fn_9(x: u8, y: f64);\n+}\n+\n+#[link(name = \"extern\", kind = \"raw-dylib\")]\n+extern \"fastcall\" {\n+    fn fastcall_fn_1(i: i32);\n+    fn fastcall_fn_2(c: u8, f: f32);\n+    fn fastcall_fn_3(d: f64);\n+    fn fastcall_fn_4(i: u8, j: u8, f: f32);\n+    fn fastcall_fn_5(a: S, b: i32);\n+    fn fastcall_fn_6(a: Option<&S>);\n+    fn fastcall_fn_7(a: S2, b: i32);\n+    fn fastcall_fn_8(a: S3, b: S3);\n+    fn fastcall_fn_9(x: u8, y: f64);\n+}\n+\n+pub fn library_function() {\n+    unsafe {\n+        stdcall_fn_1(14);\n+        stdcall_fn_2(16, 3.5);\n+        stdcall_fn_3(3.5);\n+        stdcall_fn_4(1, 2, 3.0);\n+        stdcall_fn_5(S { x: 1, y: 2 }, 16);\n+        stdcall_fn_6(Some(&S { x: 10, y: 12 }));\n+        stdcall_fn_7(S2 { x: 15, y: 16 }, 3);\n+        stdcall_fn_8(S3 { x: [1, 2, 3, 4, 5] }, S3 { x: [6, 7, 8, 9, 10] });\n+        stdcall_fn_9(1, 3.0);\n+\n+        fastcall_fn_1(14);\n+        fastcall_fn_2(16, 3.5);\n+        fastcall_fn_3(3.5);\n+        fastcall_fn_4(1, 2, 3.0);\n+        fastcall_fn_5(S { x: 1, y: 2 }, 16);\n+        fastcall_fn_6(Some(&S { x: 10, y: 12 }));\n+        fastcall_fn_7(S2 { x: 15, y: 16 }, 3);\n+        fastcall_fn_8(S3 { x: [1, 2, 3, 4, 5] }, S3 { x: [6, 7, 8, 9, 10] });\n+        fastcall_fn_9(1, 3.0);\n+    }\n+}"}, {"sha": "be598a2202782bbcd5bcf8d1df8ba3a72745e0ab", "filename": "src/test/run-make/raw-dylib-alt-calling-convention/output.txt", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8d9d4c87d677552ae52e2d58034e4be199b5a6d2/src%2Ftest%2Frun-make%2Fraw-dylib-alt-calling-convention%2Foutput.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8d9d4c87d677552ae52e2d58034e4be199b5a6d2/src%2Ftest%2Frun-make%2Fraw-dylib-alt-calling-convention%2Foutput.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fraw-dylib-alt-calling-convention%2Foutput.txt?ref=8d9d4c87d677552ae52e2d58034e4be199b5a6d2", "patch": "@@ -0,0 +1,18 @@\n+stdcall_fn_1(14)\n+stdcall_fn_2(16, 3.5)\n+stdcall_fn_3(3.5)\n+stdcall_fn_4(1, 2, 3.0)\n+stdcall_fn_5(S { x: 1, y: 2 }, 16)\n+stdcall_fn_6(S { x: 10, y: 12 })\n+stdcall_fn_7(S2 { x: 15, y: 16 }, 3)\n+stdcall_fn_8(S3 { x: [1, 2, 3, 4, 5] }, S3 { x: [6, 7, 8, 9, 10] })\n+stdcall_fn_9(1, 3.0)\n+fastcall_fn_1(14)\n+fastcall_fn_2(16, 3.5)\n+fastcall_fn_3(3.5)\n+fastcall_fn_4(1, 2, 3.0)\n+fastcall_fn_5(S { x: 1, y: 2 }, 16)\n+fastcall_fn_6(S { x: 10, y: 12 })\n+fastcall_fn_7(S2 { x: 15, y: 16 }, 3)\n+fastcall_fn_8(S3 { x: [1, 2, 3, 4, 5] }, S3 { x: [6, 7, 8, 9, 10] })\n+fastcall_fn_9(1, 3.0)"}, {"sha": "26ab4d34764d136dbe3aa93abead4aaac097398b", "filename": "src/test/run-make/raw-dylib-c/Makefile", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8d9d4c87d677552ae52e2d58034e4be199b5a6d2/src%2Ftest%2Frun-make%2Fraw-dylib-c%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/8d9d4c87d677552ae52e2d58034e4be199b5a6d2/src%2Ftest%2Frun-make%2Fraw-dylib-c%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fraw-dylib-c%2FMakefile?ref=8d9d4c87d677552ae52e2d58034e4be199b5a6d2", "patch": "@@ -1,7 +1,6 @@\n # Test the behavior of #[link(.., kind = \"raw-dylib\")] on windows-msvc\n \n-# only-windows\n-# only-msvc\n+# only-windows-msvc\n \n -include ../../run-make-fulldeps/tools.mk\n ", "previous_filename": "src/test/run-make/raw-dylib/Makefile"}, {"sha": "4059ede11fc96ec7363aefdc0209442030390d80", "filename": "src/test/run-make/raw-dylib-c/driver.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/8d9d4c87d677552ae52e2d58034e4be199b5a6d2/src%2Ftest%2Frun-make%2Fraw-dylib-c%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d9d4c87d677552ae52e2d58034e4be199b5a6d2/src%2Ftest%2Frun-make%2Fraw-dylib-c%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fraw-dylib-c%2Fdriver.rs?ref=8d9d4c87d677552ae52e2d58034e4be199b5a6d2", "previous_filename": "src/test/run-make/raw-dylib/driver.rs"}, {"sha": "72737c086ebe292b9622bd778f4dd0c91f448f7a", "filename": "src/test/run-make/raw-dylib-c/extern_1.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/8d9d4c87d677552ae52e2d58034e4be199b5a6d2/src%2Ftest%2Frun-make%2Fraw-dylib-c%2Fextern_1.c", "raw_url": "https://github.com/rust-lang/rust/raw/8d9d4c87d677552ae52e2d58034e4be199b5a6d2/src%2Ftest%2Frun-make%2Fraw-dylib-c%2Fextern_1.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fraw-dylib-c%2Fextern_1.c?ref=8d9d4c87d677552ae52e2d58034e4be199b5a6d2", "previous_filename": "src/test/run-make/raw-dylib/extern_1.c"}, {"sha": "ae87fc3f8218b41730b9b9463fc2444bc3cec388", "filename": "src/test/run-make/raw-dylib-c/extern_2.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/8d9d4c87d677552ae52e2d58034e4be199b5a6d2/src%2Ftest%2Frun-make%2Fraw-dylib-c%2Fextern_2.c", "raw_url": "https://github.com/rust-lang/rust/raw/8d9d4c87d677552ae52e2d58034e4be199b5a6d2/src%2Ftest%2Frun-make%2Fraw-dylib-c%2Fextern_2.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fraw-dylib-c%2Fextern_2.c?ref=8d9d4c87d677552ae52e2d58034e4be199b5a6d2", "previous_filename": "src/test/run-make/raw-dylib/extern_2.c"}, {"sha": "d8e6301f38eb815fcce7ec7d78e169acc40713a4", "filename": "src/test/run-make/raw-dylib-c/lib.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/8d9d4c87d677552ae52e2d58034e4be199b5a6d2/src%2Ftest%2Frun-make%2Fraw-dylib-c%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d9d4c87d677552ae52e2d58034e4be199b5a6d2/src%2Ftest%2Frun-make%2Fraw-dylib-c%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fraw-dylib-c%2Flib.rs?ref=8d9d4c87d677552ae52e2d58034e4be199b5a6d2", "previous_filename": "src/test/run-make/raw-dylib/lib.rs"}, {"sha": "7800cba18729023478fbc5c90c98e5bd079963bb", "filename": "src/test/run-make/raw-dylib-c/output.txt", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/8d9d4c87d677552ae52e2d58034e4be199b5a6d2/src%2Ftest%2Frun-make%2Fraw-dylib-c%2Foutput.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8d9d4c87d677552ae52e2d58034e4be199b5a6d2/src%2Ftest%2Frun-make%2Fraw-dylib-c%2Foutput.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fraw-dylib-c%2Foutput.txt?ref=8d9d4c87d677552ae52e2d58034e4be199b5a6d2", "previous_filename": "src/test/run-make/raw-dylib/output.txt"}, {"sha": "3f7597498baa45b8cf6bd7a56aa4d336c77b49f4", "filename": "src/test/ui/rfc-2627-raw-dylib/multiple-definitions.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8d9d4c87d677552ae52e2d58034e4be199b5a6d2/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Fmultiple-definitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d9d4c87d677552ae52e2d58034e4be199b5a6d2/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Fmultiple-definitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Fmultiple-definitions.rs?ref=8d9d4c87d677552ae52e2d58034e4be199b5a6d2", "patch": "@@ -0,0 +1,19 @@\n+// only-i686-pc-windows-msvc\n+// compile-flags: --crate-type lib --emit link\n+#![allow(clashing_extern_declarations)]\n+#![feature(raw_dylib)]\n+//~^ WARN the feature `raw_dylib` is incomplete\n+#[link(name = \"foo\", kind = \"raw-dylib\")]\n+extern \"C\" {\n+    fn f(x: i32);\n+    //~^ ERROR multiple definitions of external function `f` from library `foo.dll` have different calling conventions\n+}\n+\n+pub fn lib_main() {\n+    #[link(name = \"foo\", kind = \"raw-dylib\")]\n+    extern \"stdcall\" {\n+        fn f(x: i32);\n+    }\n+\n+    unsafe { f(42); }\n+}"}, {"sha": "91f6f0cf7220bdce6fe3d9fd91df8e12d51d616a", "filename": "src/test/ui/rfc-2627-raw-dylib/multiple-definitions.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8d9d4c87d677552ae52e2d58034e4be199b5a6d2/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Fmultiple-definitions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d9d4c87d677552ae52e2d58034e4be199b5a6d2/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Fmultiple-definitions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Fmultiple-definitions.stderr?ref=8d9d4c87d677552ae52e2d58034e4be199b5a6d2", "patch": "@@ -0,0 +1,17 @@\n+warning: the feature `raw_dylib` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/multiple-definitions.rs:4:12\n+   |\n+LL | #![feature(raw_dylib)]\n+   |            ^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #58713 <https://github.com/rust-lang/rust/issues/58713> for more information\n+\n+error: multiple definitions of external function `f` from library `foo.dll` have different calling conventions\n+  --> $DIR/multiple-definitions.rs:8:5\n+   |\n+LL |     fn f(x: i32);\n+   |     ^^^^^^^^^^^^^\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "e5a5ac2eb2bf12747811b9dd525a5c56b49e2747", "filename": "src/test/ui/rfc-2627-raw-dylib/unsupported-abi.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8d9d4c87d677552ae52e2d58034e4be199b5a6d2/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Funsupported-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d9d4c87d677552ae52e2d58034e4be199b5a6d2/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Funsupported-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Funsupported-abi.rs?ref=8d9d4c87d677552ae52e2d58034e4be199b5a6d2", "patch": "@@ -0,0 +1,13 @@\n+// only-x86_64-pc-windows-msvc\n+// compile-flags: --crate-type lib --emit link\n+#![allow(incomplete_features)]\n+#![feature(raw_dylib)]\n+#[link(name = \"foo\", kind = \"raw-dylib\")]\n+extern \"stdcall\" {\n+    fn f(x: i32);\n+    //~^ ERROR ABI not supported by `#[link(kind = \"raw-dylib\")]` on this architecture\n+}\n+\n+pub fn lib_main() {\n+    unsafe { f(42); }\n+}"}, {"sha": "fc9008128ae43a7baca761dc6876d4a3529d869c", "filename": "src/test/ui/rfc-2627-raw-dylib/unsupported-abi.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8d9d4c87d677552ae52e2d58034e4be199b5a6d2/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Funsupported-abi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d9d4c87d677552ae52e2d58034e4be199b5a6d2/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Funsupported-abi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2627-raw-dylib%2Funsupported-abi.stderr?ref=8d9d4c87d677552ae52e2d58034e4be199b5a6d2", "patch": "@@ -0,0 +1,8 @@\n+error: ABI not supported by `#[link(kind = \"raw-dylib\")]` on this architecture\n+  --> $DIR/unsupported-abi.rs:7:5\n+   |\n+LL |     fn f(x: i32);\n+   |     ^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}]}