{"sha": "7f383c3aaf38c94fb57b0a926b057f563b8faa47", "node_id": "C_kwDOAAsO6NoAKDdmMzgzYzNhYWYzOGM5NGZiNTdiMGE5MjZiMDU3ZjU2M2I4ZmFhNDc", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-11-24T22:07:37Z"}, "committer": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2021-12-18T17:38:21Z"}, "message": "Write code directly instead of using FromIterator\n\nThe FromIterator impl made the code much harder to understand. The types\ndon't make sense until you realize there's a custom FromIterator impl.", "tree": {"sha": "a96405ef7c35556d195cdfff1ab91ccd0a6728d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a96405ef7c35556d195cdfff1ab91ccd0a6728d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f383c3aaf38c94fb57b0a926b057f563b8faa47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f383c3aaf38c94fb57b0a926b057f563b8faa47", "html_url": "https://github.com/rust-lang/rust/commit/7f383c3aaf38c94fb57b0a926b057f563b8faa47", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f383c3aaf38c94fb57b0a926b057f563b8faa47/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3f300477b89e70dd42379ba53c0e8ff74e9c694", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3f300477b89e70dd42379ba53c0e8ff74e9c694", "html_url": "https://github.com/rust-lang/rust/commit/d3f300477b89e70dd42379ba53c0e8ff74e9c694"}], "stats": {"total": 28, "additions": 16, "deletions": 12}, "files": [{"sha": "2bd90f67cf4af64f09cf1e5db6d0a4e7eb9fd246", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/7f383c3aaf38c94fb57b0a926b057f563b8faa47/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f383c3aaf38c94fb57b0a926b057f563b8faa47/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=7f383c3aaf38c94fb57b0a926b057f563b8faa47", "patch": "@@ -1,7 +1,6 @@\n use std::cell::RefCell;\n use std::default::Default;\n use std::hash::{Hash, Hasher};\n-use std::iter::FromIterator;\n use std::lazy::SyncOnceCell as OnceCell;\n use std::path::PathBuf;\n use std::rc::Rc;\n@@ -958,16 +957,14 @@ fn add_doc_fragment(out: &mut String, frag: &DocFragment) {\n     }\n }\n \n-impl<'a> FromIterator<&'a DocFragment> for String {\n-    fn from_iter<T>(iter: T) -> Self\n-    where\n-        T: IntoIterator<Item = &'a DocFragment>,\n-    {\n-        iter.into_iter().fold(String::new(), |mut acc, frag| {\n-            add_doc_fragment(&mut acc, frag);\n-            acc\n-        })\n+/// Collapse a collection of [`DocFragment`]s into one string,\n+/// handling indentation and newlines as needed.\n+crate fn collapse_doc_fragments(doc_strings: &[DocFragment]) -> String {\n+    let mut acc = String::new();\n+    for frag in doc_strings {\n+        add_doc_fragment(&mut acc, frag);\n     }\n+    acc\n }\n \n /// A link that has not yet been rendered.\n@@ -1113,7 +1110,11 @@ impl Attributes {\n     /// Finds all `doc` attributes as NameValues and returns their corresponding values, joined\n     /// with newlines.\n     crate fn collapsed_doc_value(&self) -> Option<String> {\n-        if self.doc_strings.is_empty() { None } else { Some(self.doc_strings.iter().collect()) }\n+        if self.doc_strings.is_empty() {\n+            None\n+        } else {\n+            Some(collapse_doc_fragments(&self.doc_strings))\n+        }\n     }\n \n     crate fn get_doc_aliases(&self) -> Box<[Symbol]> {"}, {"sha": "3d3d2e50321d9df44d269d211d6ba6fbe9598a4a", "filename": "src/librustdoc/passes/unindent_comments/tests.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7f383c3aaf38c94fb57b0a926b057f563b8faa47/src%2Flibrustdoc%2Fpasses%2Funindent_comments%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f383c3aaf38c94fb57b0a926b057f563b8faa47/src%2Flibrustdoc%2Fpasses%2Funindent_comments%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Funindent_comments%2Ftests.rs?ref=7f383c3aaf38c94fb57b0a926b057f563b8faa47", "patch": "@@ -1,4 +1,7 @@\n use super::*;\n+\n+use crate::clean::collapse_doc_fragments;\n+\n use rustc_span::create_default_session_globals_then;\n use rustc_span::source_map::DUMMY_SP;\n use rustc_span::symbol::Symbol;\n@@ -19,7 +22,7 @@ fn run_test(input: &str, expected: &str) {\n     create_default_session_globals_then(|| {\n         let mut s = create_doc_fragment(input);\n         unindent_fragments(&mut s);\n-        assert_eq!(&s.iter().collect::<String>(), expected);\n+        assert_eq!(collapse_doc_fragments(&s), expected);\n     });\n }\n "}]}