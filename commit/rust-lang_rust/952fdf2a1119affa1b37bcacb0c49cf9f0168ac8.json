{"sha": "952fdf2a1119affa1b37bcacb0c49cf9f0168ac8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1MmZkZjJhMTExOWFmZmExYjM3YmNhY2IwYzQ5Y2Y5ZjAxNjhhYzg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-05T19:11:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-05T19:11:43Z"}, "message": "Auto merge of #86891 - JohnTitor:rollup-gy2gan9, r=JohnTitor\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #83581 (Add std::os::unix::fs::DirEntryExt2::file_name_ref(&self) -> &OsStr)\n - #85377 (aborts: Clarify documentation and comments)\n - #86685 (double-check mutability inside Allocation)\n - #86794 (Stabilize `Seek::rewind()`)\n - #86852 (Remove some doc aliases)\n - #86878 (:arrow_up: rust-analyzer)\n - #86886 (Remove `impl Clean for {Ident, Symbol}`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "432b2721683519a6d2008bdc33ac68b39133f6df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/432b2721683519a6d2008bdc33ac68b39133f6df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/952fdf2a1119affa1b37bcacb0c49cf9f0168ac8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/952fdf2a1119affa1b37bcacb0c49cf9f0168ac8", "html_url": "https://github.com/rust-lang/rust/commit/952fdf2a1119affa1b37bcacb0c49cf9f0168ac8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/952fdf2a1119affa1b37bcacb0c49cf9f0168ac8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "969a6c2481c41cea793708f7fdd2f96a3397143f", "url": "https://api.github.com/repos/rust-lang/rust/commits/969a6c2481c41cea793708f7fdd2f96a3397143f", "html_url": "https://github.com/rust-lang/rust/commit/969a6c2481c41cea793708f7fdd2f96a3397143f"}, {"sha": "952deae6af07cb3d5d19ac00dce4ebe23c88109d", "url": "https://api.github.com/repos/rust-lang/rust/commits/952deae6af07cb3d5d19ac00dce4ebe23c88109d", "html_url": "https://github.com/rust-lang/rust/commit/952deae6af07cb3d5d19ac00dce4ebe23c88109d"}], "stats": {"total": 164, "additions": 103, "deletions": 61}, "files": [{"sha": "c2645a0914007f012fa2d55f886558dfa2b9a720", "filename": "compiler/rustc_middle/src/mir/interpret/allocation.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/952fdf2a1119affa1b37bcacb0c49cf9f0168ac8/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/952fdf2a1119affa1b37bcacb0c49cf9f0168ac8/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs?ref=952fdf2a1119affa1b37bcacb0c49cf9f0168ac8", "patch": "@@ -361,6 +361,8 @@ impl<Tag: Copy, Extra> Allocation<Tag, Extra> {\n         range: AllocRange,\n         val: ScalarMaybeUninit<Tag>,\n     ) -> AllocResult {\n+        assert!(self.mutability == Mutability::Mut);\n+\n         let val = match val {\n             ScalarMaybeUninit::Scalar(scalar) => scalar,\n             ScalarMaybeUninit::Uninit => {\n@@ -484,6 +486,7 @@ impl<Tag: Copy, Extra> Allocation<Tag, Extra> {\n         if range.size.bytes() == 0 {\n             return;\n         }\n+        assert!(self.mutability == Mutability::Mut);\n         self.init_mask.set_range(range.start, range.end(), is_init);\n     }\n }"}, {"sha": "53bfe02d0e7a31d43d8c56790a402cd3fbbfc748", "filename": "library/alloc/src/boxed.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/952fdf2a1119affa1b37bcacb0c49cf9f0168ac8/library%2Falloc%2Fsrc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/952fdf2a1119affa1b37bcacb0c49cf9f0168ac8/library%2Falloc%2Fsrc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fboxed.rs?ref=952fdf2a1119affa1b37bcacb0c49cf9f0168ac8", "patch": "@@ -187,8 +187,6 @@ impl<T> Box<T> {\n     /// ```\n     #[cfg(not(no_global_oom_handling))]\n     #[inline(always)]\n-    #[doc(alias = \"alloc\")]\n-    #[doc(alias = \"malloc\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn new(x: T) -> Self {\n         box x\n@@ -239,7 +237,6 @@ impl<T> Box<T> {\n     /// [zeroed]: mem::MaybeUninit::zeroed\n     #[cfg(not(no_global_oom_handling))]\n     #[inline]\n-    #[doc(alias = \"calloc\")]\n     #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n     pub fn new_zeroed() -> Box<mem::MaybeUninit<T>> {\n         Self::new_zeroed_in(Global)"}, {"sha": "2f656e4a6b4acc2d5cb18ddd5c6c3a7a7462c90c", "filename": "library/alloc/src/collections/binary_heap.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/952fdf2a1119affa1b37bcacb0c49cf9f0168ac8/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/952fdf2a1119affa1b37bcacb0c49cf9f0168ac8/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs?ref=952fdf2a1119affa1b37bcacb0c49cf9f0168ac8", "patch": "@@ -1034,7 +1034,6 @@ impl<T> BinaryHeap<T> {\n     ///\n     /// assert_eq!(heap.len(), 2);\n     /// ```\n-    #[doc(alias = \"length\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn len(&self) -> usize {\n         self.data.len()"}, {"sha": "dfd693d13b330f51a222324e2970598f1800134d", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/952fdf2a1119affa1b37bcacb0c49cf9f0168ac8/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/952fdf2a1119affa1b37bcacb0c49cf9f0168ac8/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=952fdf2a1119affa1b37bcacb0c49cf9f0168ac8", "patch": "@@ -889,7 +889,6 @@ impl<K, V> BTreeMap<K, V> {\n     /// assert_eq!(map.remove(&1), Some(\"a\"));\n     /// assert_eq!(map.remove(&1), None);\n     /// ```\n-    #[doc(alias = \"delete\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn remove<Q: ?Sized>(&mut self, key: &Q) -> Option<V>\n     where\n@@ -2165,7 +2164,6 @@ impl<K, V> BTreeMap<K, V> {\n     /// a.insert(1, \"a\");\n     /// assert_eq!(a.len(), 1);\n     /// ```\n-    #[doc(alias = \"length\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_btree_new\", issue = \"71835\")]\n     pub const fn len(&self) -> usize {"}, {"sha": "34ec27e461c757f551330a284df19d987d35b4c3", "filename": "library/alloc/src/collections/btree/set.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/952fdf2a1119affa1b37bcacb0c49cf9f0168ac8/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/952fdf2a1119affa1b37bcacb0c49cf9f0168ac8/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs?ref=952fdf2a1119affa1b37bcacb0c49cf9f0168ac8", "patch": "@@ -810,7 +810,6 @@ impl<T> BTreeSet<T> {\n     /// assert_eq!(set.remove(&2), true);\n     /// assert_eq!(set.remove(&2), false);\n     /// ```\n-    #[doc(alias = \"delete\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn remove<Q: ?Sized>(&mut self, value: &Q) -> bool\n     where\n@@ -1021,7 +1020,6 @@ impl<T> BTreeSet<T> {\n     /// v.insert(1);\n     /// assert_eq!(v.len(), 1);\n     /// ```\n-    #[doc(alias = \"length\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_unstable(feature = \"const_btree_new\", issue = \"71835\")]\n     pub const fn len(&self) -> usize {"}, {"sha": "588ba2de2209bcd32e1ae3425a48c87bc2b44e5d", "filename": "library/alloc/src/collections/linked_list.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/952fdf2a1119affa1b37bcacb0c49cf9f0168ac8/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/952fdf2a1119affa1b37bcacb0c49cf9f0168ac8/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs?ref=952fdf2a1119affa1b37bcacb0c49cf9f0168ac8", "patch": "@@ -586,7 +586,6 @@ impl<T> LinkedList<T> {\n     /// dl.push_back(3);\n     /// assert_eq!(dl.len(), 3);\n     /// ```\n-    #[doc(alias = \"length\")]\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn len(&self) -> usize {"}, {"sha": "461e701be054ee82b9493ef0ba0d27ec95f14668", "filename": "library/alloc/src/collections/vec_deque/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/952fdf2a1119affa1b37bcacb0c49cf9f0168ac8/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/952fdf2a1119affa1b37bcacb0c49cf9f0168ac8/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs?ref=952fdf2a1119affa1b37bcacb0c49cf9f0168ac8", "patch": "@@ -1036,7 +1036,6 @@ impl<T> VecDeque<T> {\n     /// v.push_back(1);\n     /// assert_eq!(v.len(), 1);\n     /// ```\n-    #[doc(alias = \"length\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn len(&self) -> usize {\n         count(self.tail, self.head, self.cap())"}, {"sha": "189da9f06392add94c1ac45a83e982a28715d4f1", "filename": "library/alloc/src/macros.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/952fdf2a1119affa1b37bcacb0c49cf9f0168ac8/library%2Falloc%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/952fdf2a1119affa1b37bcacb0c49cf9f0168ac8/library%2Falloc%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fmacros.rs?ref=952fdf2a1119affa1b37bcacb0c49cf9f0168ac8", "patch": "@@ -35,8 +35,6 @@\n ///\n /// [`Vec`]: crate::vec::Vec\n #[cfg(not(test))]\n-#[doc(alias = \"alloc\")]\n-#[doc(alias = \"malloc\")]\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[allow_internal_unstable(box_syntax, liballoc_internals)]"}, {"sha": "0d8678291bef749536a7a30b003ff84aa6e9eab7", "filename": "library/alloc/src/string.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/952fdf2a1119affa1b37bcacb0c49cf9f0168ac8/library%2Falloc%2Fsrc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/952fdf2a1119affa1b37bcacb0c49cf9f0168ac8/library%2Falloc%2Fsrc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstring.rs?ref=952fdf2a1119affa1b37bcacb0c49cf9f0168ac8", "patch": "@@ -419,8 +419,6 @@ impl String {\n     /// ```\n     #[cfg(not(no_global_oom_handling))]\n     #[inline]\n-    #[doc(alias = \"alloc\")]\n-    #[doc(alias = \"malloc\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn with_capacity(capacity: usize) -> String {\n         String { vec: Vec::with_capacity(capacity) }\n@@ -1534,7 +1532,6 @@ impl String {\n     /// assert_eq!(fancy_f.len(), 4);\n     /// assert_eq!(fancy_f.chars().count(), 3);\n     /// ```\n-    #[doc(alias = \"length\")]\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn len(&self) -> usize {"}, {"sha": "61599259735c7d5a25632b46f5c58f41227a8384", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/952fdf2a1119affa1b37bcacb0c49cf9f0168ac8/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/952fdf2a1119affa1b37bcacb0c49cf9f0168ac8/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=952fdf2a1119affa1b37bcacb0c49cf9f0168ac8", "patch": "@@ -459,7 +459,6 @@ impl<T> Vec<T> {\n     /// ```\n     #[cfg(not(no_global_oom_handling))]\n     #[inline]\n-    #[doc(alias = \"malloc\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn with_capacity(capacity: usize) -> Self {\n         Self::with_capacity_in(capacity, Global)\n@@ -799,7 +798,6 @@ impl<T, A: Allocator> Vec<T, A> {\n     /// assert!(vec.capacity() >= 11);\n     /// ```\n     #[cfg(not(no_global_oom_handling))]\n-    #[doc(alias = \"realloc\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn reserve(&mut self, additional: usize) {\n         self.buf.reserve(self.len, additional);\n@@ -826,7 +824,6 @@ impl<T, A: Allocator> Vec<T, A> {\n     /// assert!(vec.capacity() >= 11);\n     /// ```\n     #[cfg(not(no_global_oom_handling))]\n-    #[doc(alias = \"realloc\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn reserve_exact(&mut self, additional: usize) {\n         self.buf.reserve_exact(self.len, additional);\n@@ -864,7 +861,6 @@ impl<T, A: Allocator> Vec<T, A> {\n     /// }\n     /// # process_data(&[1, 2, 3]).expect(\"why is the test harness OOMing on 12 bytes?\");\n     /// ```\n-    #[doc(alias = \"realloc\")]\n     #[unstable(feature = \"try_reserve\", reason = \"new API\", issue = \"48043\")]\n     pub fn try_reserve(&mut self, additional: usize) -> Result<(), TryReserveError> {\n         self.buf.try_reserve(self.len, additional)\n@@ -906,7 +902,6 @@ impl<T, A: Allocator> Vec<T, A> {\n     /// }\n     /// # process_data(&[1, 2, 3]).expect(\"why is the test harness OOMing on 12 bytes?\");\n     /// ```\n-    #[doc(alias = \"realloc\")]\n     #[unstable(feature = \"try_reserve\", reason = \"new API\", issue = \"48043\")]\n     pub fn try_reserve_exact(&mut self, additional: usize) -> Result<(), TryReserveError> {\n         self.buf.try_reserve_exact(self.len, additional)\n@@ -927,7 +922,6 @@ impl<T, A: Allocator> Vec<T, A> {\n     /// assert!(vec.capacity() >= 3);\n     /// ```\n     #[cfg(not(no_global_oom_handling))]\n-    #[doc(alias = \"realloc\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn shrink_to_fit(&mut self) {\n         // The capacity is never less than the length, and there's nothing to do when\n@@ -958,7 +952,6 @@ impl<T, A: Allocator> Vec<T, A> {\n     /// assert!(vec.capacity() >= 3);\n     /// ```\n     #[cfg(not(no_global_oom_handling))]\n-    #[doc(alias = \"realloc\")]\n     #[unstable(feature = \"shrink_to\", reason = \"new API\", issue = \"56431\")]\n     pub fn shrink_to(&mut self, min_capacity: usize) {\n         if self.capacity() > min_capacity {\n@@ -1820,7 +1813,6 @@ impl<T, A: Allocator> Vec<T, A> {\n     /// let a = vec![1, 2, 3];\n     /// assert_eq!(a.len(), 3);\n     /// ```\n-    #[doc(alias = \"length\")]\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn len(&self) -> usize {"}, {"sha": "c5a4bbd32080461e6b5fece33b964ce967329966", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/952fdf2a1119affa1b37bcacb0c49cf9f0168ac8/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/952fdf2a1119affa1b37bcacb0c49cf9f0168ac8/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=952fdf2a1119affa1b37bcacb0c49cf9f0168ac8", "patch": "@@ -717,8 +717,14 @@ extern \"rust-intrinsic\" {\n     /// Therefore, implementations must not require the user to uphold\n     /// any safety invariants.\n     ///\n-    /// A more user-friendly and stable version of this operation is\n-    /// [`std::process::abort`](../../std/process/fn.abort.html).\n+    /// [`std::process::abort`](../../std/process/fn.abort.html) is to be preferred if possible,\n+    /// as its behavior is more user-friendly and more stable.\n+    ///\n+    /// The current implementation of `intrinsics::abort` is to invoke an invalid instruction,\n+    /// on most platforms.\n+    /// On Unix, the\n+    /// process will probably terminate with a signal like `SIGABRT`, `SIGILL`, `SIGTRAP`, `SIGSEGV` or\n+    /// `SIGBUS`.  The precise behaviour is not guaranteed and not stable.\n     pub fn abort() -> !;\n \n     /// Informs the optimizer that this point in the code is not reachable,"}, {"sha": "a476799b70d6c60088f66c76c3c9c5989730faca", "filename": "library/core/src/iter/traits/exact_size.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/952fdf2a1119affa1b37bcacb0c49cf9f0168ac8/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fexact_size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/952fdf2a1119affa1b37bcacb0c49cf9f0168ac8/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fexact_size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fexact_size.rs?ref=952fdf2a1119affa1b37bcacb0c49cf9f0168ac8", "patch": "@@ -97,7 +97,6 @@ pub trait ExactSizeIterator: Iterator {\n     ///\n     /// assert_eq!(5, five.len());\n     /// ```\n-    #[doc(alias = \"length\")]\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn len(&self) -> usize {"}, {"sha": "de25c984abf90fd729c1ce2556d469e2a7cf0ec7", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/952fdf2a1119affa1b37bcacb0c49cf9f0168ac8/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/952fdf2a1119affa1b37bcacb0c49cf9f0168ac8/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=952fdf2a1119affa1b37bcacb0c49cf9f0168ac8", "patch": "@@ -95,7 +95,6 @@ impl<T> [T] {\n     /// let a = [1, 2, 3];\n     /// assert_eq!(a.len(), 3);\n     /// ```\n-    #[doc(alias = \"length\")]\n     #[cfg_attr(not(bootstrap), lang = \"slice_len_fn\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_stable(feature = \"const_slice_len\", since = \"1.39.0\")]"}, {"sha": "7ca95a02dd8f482d42d1fac093e71297571cc790", "filename": "library/core/src/str/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/952fdf2a1119affa1b37bcacb0c49cf9f0168ac8/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/952fdf2a1119affa1b37bcacb0c49cf9f0168ac8/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs?ref=952fdf2a1119affa1b37bcacb0c49cf9f0168ac8", "patch": "@@ -138,7 +138,6 @@ impl str {\n     /// assert_eq!(\"\u0192oo\".len(), 4); // fancy f!\n     /// assert_eq!(\"\u0192oo\".chars().count(), 3);\n     /// ```\n-    #[doc(alias = \"length\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_stable(feature = \"const_str_len\", since = \"1.39.0\")]\n     #[inline]"}, {"sha": "d7cb8a556367c9d76d0e9de505bc18f54198af92", "filename": "library/std/src/collections/hash/map.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/952fdf2a1119affa1b37bcacb0c49cf9f0168ac8/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/952fdf2a1119affa1b37bcacb0c49cf9f0168ac8/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs?ref=952fdf2a1119affa1b37bcacb0c49cf9f0168ac8", "patch": "@@ -454,7 +454,6 @@ impl<K, V, S> HashMap<K, V, S> {\n     /// a.insert(1, \"a\");\n     /// assert_eq!(a.len(), 1);\n     /// ```\n-    #[doc(alias = \"length\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn len(&self) -> usize {\n         self.base.len()\n@@ -893,7 +892,6 @@ where\n     /// assert_eq!(map.remove(&1), Some(\"a\"));\n     /// assert_eq!(map.remove(&1), None);\n     /// ```\n-    #[doc(alias = \"delete\")]\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn remove<Q: ?Sized>(&mut self, k: &Q) -> Option<V>"}, {"sha": "272e1c2be2b409dc9d3e3eb9ee2044e6139b81c3", "filename": "library/std/src/collections/hash/set.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/952fdf2a1119affa1b37bcacb0c49cf9f0168ac8/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/952fdf2a1119affa1b37bcacb0c49cf9f0168ac8/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs?ref=952fdf2a1119affa1b37bcacb0c49cf9f0168ac8", "patch": "@@ -202,7 +202,6 @@ impl<T, S> HashSet<T, S> {\n     /// v.insert(1);\n     /// assert_eq!(v.len(), 1);\n     /// ```\n-    #[doc(alias = \"length\")]\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn len(&self) -> usize {\n@@ -875,7 +874,6 @@ where\n     /// assert_eq!(set.remove(&2), true);\n     /// assert_eq!(set.remove(&2), false);\n     /// ```\n-    #[doc(alias = \"delete\")]\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn remove<Q: ?Sized>(&mut self, value: &Q) -> bool"}, {"sha": "2a85f375ae2790250a74d9d72e823df4c04caefc", "filename": "library/std/src/ffi/os_str.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/952fdf2a1119affa1b37bcacb0c49cf9f0168ac8/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/952fdf2a1119affa1b37bcacb0c49cf9f0168ac8/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs?ref=952fdf2a1119affa1b37bcacb0c49cf9f0168ac8", "patch": "@@ -694,7 +694,6 @@ impl OsStr {\n     /// let os_str = OsStr::new(\"foo\");\n     /// assert_eq!(os_str.len(), 3);\n     /// ```\n-    #[doc(alias = \"length\")]\n     #[stable(feature = \"osstring_simple_functions\", since = \"1.9.0\")]\n     #[inline]\n     pub fn len(&self) -> usize {"}, {"sha": "a9ce814e2ec18fbb23de827cfdef0d59e97a7f09", "filename": "library/std/src/fs.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/952fdf2a1119affa1b37bcacb0c49cf9f0168ac8/library%2Fstd%2Fsrc%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/952fdf2a1119affa1b37bcacb0c49cf9f0168ac8/library%2Fstd%2Fsrc%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ffs.rs?ref=952fdf2a1119affa1b37bcacb0c49cf9f0168ac8", "patch": "@@ -1551,7 +1551,6 @@ impl AsInner<fs_imp::DirEntry> for DirEntry {\n ///     Ok(())\n /// }\n /// ```\n-#[doc(alias = \"delete\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn remove_file<P: AsRef<Path>>(path: P) -> io::Result<()> {\n     fs_imp::unlink(path.as_ref())\n@@ -1986,7 +1985,6 @@ pub fn create_dir_all<P: AsRef<Path>>(path: P) -> io::Result<()> {\n ///     Ok(())\n /// }\n /// ```\n-#[doc(alias = \"delete\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn remove_dir<P: AsRef<Path>>(path: P) -> io::Result<()> {\n     fs_imp::rmdir(path.as_ref())\n@@ -2024,7 +2022,6 @@ pub fn remove_dir<P: AsRef<Path>>(path: P) -> io::Result<()> {\n ///     Ok(())\n /// }\n /// ```\n-#[doc(alias = \"delete\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn remove_dir_all<P: AsRef<Path>>(path: P) -> io::Result<()> {\n     fs_imp::remove_dir_all(path.as_ref())"}, {"sha": "9daeee711adea59b136c1f3433dda234f3ae8561", "filename": "library/std/src/io/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/952fdf2a1119affa1b37bcacb0c49cf9f0168ac8/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/952fdf2a1119affa1b37bcacb0c49cf9f0168ac8/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fmod.rs?ref=952fdf2a1119affa1b37bcacb0c49cf9f0168ac8", "patch": "@@ -1759,7 +1759,6 @@ pub trait Seek {\n     /// # Example\n     ///\n     /// ```no_run\n-    /// #![feature(seek_rewind)]\n     /// use std::io::{Read, Seek, Write};\n     /// use std::fs::OpenOptions;\n     ///\n@@ -1777,7 +1776,7 @@ pub trait Seek {\n     /// f.read_to_string(&mut buf).unwrap();\n     /// assert_eq!(&buf, hello);\n     /// ```\n-    #[unstable(feature = \"seek_rewind\", issue = \"85149\")]\n+    #[stable(feature = \"seek_rewind\", since = \"1.55.0\")]\n     fn rewind(&mut self) -> Result<()> {\n         self.seek(SeekFrom::Start(0))?;\n         Ok(())"}, {"sha": "1beb72a9a5072344a696c13eca99646ea5d0e65d", "filename": "library/std/src/io/tests.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/952fdf2a1119affa1b37bcacb0c49cf9f0168ac8/library%2Fstd%2Fsrc%2Fio%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/952fdf2a1119affa1b37bcacb0c49cf9f0168ac8/library%2Fstd%2Fsrc%2Fio%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Ftests.rs?ref=952fdf2a1119affa1b37bcacb0c49cf9f0168ac8", "patch": "@@ -336,6 +336,10 @@ fn seek_position() -> io::Result<()> {\n     assert_eq!(c.stream_position()?, 8);\n     assert_eq!(c.stream_position()?, 8);\n \n+    c.rewind()?;\n+    assert_eq!(c.stream_position()?, 0);\n+    assert_eq!(c.stream_position()?, 0);\n+\n     Ok(())\n }\n "}, {"sha": "e4ce788f74195cbcdf843367709412004dd4c2c5", "filename": "library/std/src/os/unix/fs.rs", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/952fdf2a1119affa1b37bcacb0c49cf9f0168ac8/library%2Fstd%2Fsrc%2Fos%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/952fdf2a1119affa1b37bcacb0c49cf9f0168ac8/library%2Fstd%2Fsrc%2Fos%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Ffs.rs?ref=952fdf2a1119affa1b37bcacb0c49cf9f0168ac8", "patch": "@@ -9,6 +9,8 @@ use crate::path::Path;\n use crate::sys;\n use crate::sys_common::{AsInner, AsInnerMut, FromInner};\n // Used for `File::read` on intra-doc links\n+use crate::ffi::OsStr;\n+use crate::sealed::Sealed;\n #[allow(unused_imports)]\n use io::{Read, Write};\n \n@@ -839,6 +841,43 @@ impl DirEntryExt for fs::DirEntry {\n     }\n }\n \n+/// Sealed Unix-specific extension methods for [`fs::DirEntry`].\n+#[unstable(feature = \"dir_entry_ext2\", issue = \"85573\")]\n+pub trait DirEntryExt2: Sealed {\n+    /// Returns a reference to the underlying `OsStr` of this entry's filename.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(dir_entry_ext2)]\n+    /// use std::os::unix::fs::DirEntryExt2;\n+    /// use std::{fs, io};\n+    ///\n+    /// fn main() -> io::Result<()> {\n+    ///     let mut entries = fs::read_dir(\".\")?.collect::<Result<Vec<_>, io::Error>>()?;\n+    ///     entries.sort_unstable_by(|a, b| a.file_name_ref().cmp(b.file_name_ref()));\n+    ///\n+    ///     for p in entries {\n+    ///         println!(\"{:?}\", p);\n+    ///     }\n+    ///\n+    ///     Ok(())\n+    /// }\n+    /// ```\n+    fn file_name_ref(&self) -> &OsStr;\n+}\n+\n+/// Allows extension traits within `std`.\n+#[unstable(feature = \"sealed\", issue = \"none\")]\n+impl Sealed for fs::DirEntry {}\n+\n+#[unstable(feature = \"dir_entry_ext2\", issue = \"85573\")]\n+impl DirEntryExt2 for fs::DirEntry {\n+    fn file_name_ref(&self) -> &OsStr {\n+        self.as_inner().file_name_os_str()\n+    }\n+}\n+\n /// Creates a new symbolic link on the filesystem.\n ///\n /// The `link` path will be a symbolic link pointing to the `original` path."}, {"sha": "11a0432ce27a1ebb91e8f90724cfe87fd694a783", "filename": "library/std/src/process.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/952fdf2a1119affa1b37bcacb0c49cf9f0168ac8/library%2Fstd%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/952fdf2a1119affa1b37bcacb0c49cf9f0168ac8/library%2Fstd%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprocess.rs?ref=952fdf2a1119affa1b37bcacb0c49cf9f0168ac8", "patch": "@@ -1898,6 +1898,9 @@ pub fn exit(code: i32) -> ! {\n /// process, no destructors on the current stack or any other thread's stack\n /// will be run.\n ///\n+/// Rust IO buffers (eg, from `BufWriter`) will not be flushed.\n+/// Likewise, C stdio buffers will (on most platforms) not be flushed.\n+///\n /// This is in contrast to the default behaviour of [`panic!`] which unwinds\n /// the current thread's stack and calls all destructors.\n /// When `panic=\"abort\"` is set, either as an argument to `rustc` or in a\n@@ -1908,6 +1911,10 @@ pub fn exit(code: i32) -> ! {\n /// this function at a known point where there are no more destructors left\n /// to run.\n ///\n+/// The process's termination will be similar to that from the C `abort()`\n+/// function.  On Unix, the process will terminate with signal `SIGABRT`, which\n+/// typically means that the shell prints \"Aborted\".\n+///\n /// # Examples\n ///\n /// ```no_run"}, {"sha": "bec0d5898ac9232320f80c3c0261757d360b44ab", "filename": "library/std/src/sys/unix/fs.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/952fdf2a1119affa1b37bcacb0c49cf9f0168ac8/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/952fdf2a1119affa1b37bcacb0c49cf9f0168ac8/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs?ref=952fdf2a1119affa1b37bcacb0c49cf9f0168ac8", "patch": "@@ -647,6 +647,10 @@ impl DirEntry {\n     fn name_bytes(&self) -> &[u8] {\n         &*self.name\n     }\n+\n+    pub fn file_name_os_str(&self) -> &OsStr {\n+        OsStr::from_bytes(self.name_bytes())\n+    }\n }\n \n impl OpenOptions {"}, {"sha": "2da71b2a448ac1d8aea5a6f2be657faeaebf2723", "filename": "library/std/src/sys/unix/mod.rs", "status": "modified", "additions": 35, "deletions": 7, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/952fdf2a1119affa1b37bcacb0c49cf9f0168ac8/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/952fdf2a1119affa1b37bcacb0c49cf9f0168ac8/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs?ref=952fdf2a1119affa1b37bcacb0c49cf9f0168ac8", "patch": "@@ -217,13 +217,41 @@ pub fn cvt_nz(error: libc::c_int) -> crate::io::Result<()> {\n     if error == 0 { Ok(()) } else { Err(crate::io::Error::from_raw_os_error(error)) }\n }\n \n-// On Unix-like platforms, libc::abort will unregister signal handlers\n-// including the SIGABRT handler, preventing the abort from being blocked, and\n-// fclose streams, with the side effect of flushing them so libc buffered\n-// output will be printed.  Additionally the shell will generally print a more\n-// understandable error message like \"Abort trap\" rather than \"Illegal\n-// instruction\" that intrinsics::abort would cause, as intrinsics::abort is\n-// implemented as an illegal instruction.\n+// libc::abort() will run the SIGABRT handler.  That's fine because anyone who\n+// installs a SIGABRT handler already has to expect it to run in Very Bad\n+// situations (eg, malloc crashing).\n+//\n+// Current glibc's abort() function unblocks SIGABRT, raises SIGABRT, clears the\n+// SIGABRT handler and raises it again, and then starts to get creative.\n+//\n+// See the public documentation for `intrinsics::abort()` and `process::abort()`\n+// for further discussion.\n+//\n+// There is confusion about whether libc::abort() flushes stdio streams.\n+// libc::abort() is required by ISO C 99 (7.14.1.1p5) to be async-signal-safe,\n+// so flushing streams is at least extremely hard, if not entirely impossible.\n+//\n+// However, some versions of POSIX (eg IEEE Std 1003.1-2001) required abort to\n+// do so.  In 1003.1-2004 this was fixed.\n+//\n+// glibc's implementation did the flush, unsafely, before glibc commit\n+// 91e7cf982d01 `abort: Do not flush stdio streams [BZ #15436]' by Florian\n+// Weimer.  According to glibc's NEWS:\n+//\n+//    The abort function terminates the process immediately, without flushing\n+//    stdio streams.  Previous glibc versions used to flush streams, resulting\n+//    in deadlocks and further data corruption.  This change also affects\n+//    process aborts as the result of assertion failures.\n+//\n+// This is an accurate description of the problem.  The only solution for\n+// program with nontrivial use of C stdio is a fixed libc - one which does not\n+// try to flush in abort - since even libc-internal errors, and assertion\n+// failures generated from C, will go via abort().\n+//\n+// On systems with old, buggy, libcs, the impact can be severe for a\n+// multithreaded C program.  It is much less severe for Rust, because Rust\n+// stdlib doesn't use libc stdio buffering.  In a typical Rust program, which\n+// does not use C stdio, even a buggy libc::abort() is, in fact, safe.\n pub fn abort_internal() -> ! {\n     unsafe { libc::abort() }\n }"}, {"sha": "1edb855a5d63ef3901d718db3d44cffbf7a476ee", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/952fdf2a1119affa1b37bcacb0c49cf9f0168ac8/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/952fdf2a1119affa1b37bcacb0c49cf9f0168ac8/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=952fdf2a1119affa1b37bcacb0c49cf9f0168ac8", "patch": "@@ -552,7 +552,7 @@ fn build_macro(cx: &mut DocContext<'_>, did: DefId, name: Symbol) -> clean::Item\n \n                 let source = format!(\n                     \"macro_rules! {} {{\\n{}}}\",\n-                    name.clean(cx),\n+                    name,\n                     utils::render_macro_arms(matchers, \";\")\n                 );\n "}, {"sha": "cc086427dd0cd09032a3e98bce63fa277fa99c90", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/952fdf2a1119affa1b37bcacb0c49cf9f0168ac8/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/952fdf2a1119affa1b37bcacb0c49cf9f0168ac8/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=952fdf2a1119affa1b37bcacb0c49cf9f0168ac8", "patch": "@@ -1814,20 +1814,6 @@ impl Clean<PathSegment> for hir::PathSegment<'_> {\n     }\n }\n \n-impl Clean<String> for Ident {\n-    #[inline]\n-    fn clean(&self, cx: &mut DocContext<'_>) -> String {\n-        self.name.clean(cx)\n-    }\n-}\n-\n-impl Clean<String> for Symbol {\n-    #[inline]\n-    fn clean(&self, _: &mut DocContext<'_>) -> String {\n-        self.to_string()\n-    }\n-}\n-\n impl Clean<BareFunctionDecl> for hir::BareFnTy<'_> {\n     fn clean(&self, cx: &mut DocContext<'_>) -> BareFunctionDecl {\n         let (generic_params, decl) = enter_impl_trait(cx, |cx| {"}, {"sha": "e5c1c8cf2fcfae3e15c8bcf5256e84cad3bd3436", "filename": "src/tools/rust-analyzer", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer?ref=952fdf2a1119affa1b37bcacb0c49cf9f0168ac8", "patch": "@@ -1 +1 @@\n-Subproject commit 1fa82adfdca502a13f4dd952f9a50574870f5b7b\n+Subproject commit e5c1c8cf2fcfae3e15c8bcf5256e84cad3bd3436"}]}