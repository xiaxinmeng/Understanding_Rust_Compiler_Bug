{"sha": "d8080d828c4bbe50f13143b82bac56d19ce79f1d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4MDgwZDgyOGM0YmJlNTBmMTMxNDNiODJiYWM1NmQxOWNlNzlmMWQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-18T12:34:11Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-24T05:28:56Z"}, "message": "expand: address review comments", "tree": {"sha": "cb0fc699a5a78cf9b6b13525bc99a4d38eb85179", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb0fc699a5a78cf9b6b13525bc99a4d38eb85179"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8080d828c4bbe50f13143b82bac56d19ce79f1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8080d828c4bbe50f13143b82bac56d19ce79f1d", "html_url": "https://github.com/rust-lang/rust/commit/d8080d828c4bbe50f13143b82bac56d19ce79f1d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8080d828c4bbe50f13143b82bac56d19ce79f1d/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21944b3a108784eda5d27f2ca3b6d3769fe51a57", "url": "https://api.github.com/repos/rust-lang/rust/commits/21944b3a108784eda5d27f2ca3b6d3769fe51a57", "html_url": "https://github.com/rust-lang/rust/commit/21944b3a108784eda5d27f2ca3b6d3769fe51a57"}], "stats": {"total": 128, "additions": 64, "deletions": 64}, "files": [{"sha": "859362b5e29d391cd269ff8fe344fd4d6c82d5a5", "filename": "src/librustc_expand/mbe/macro_rules.rs", "status": "modified", "additions": 11, "deletions": 18, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/d8080d828c4bbe50f13143b82bac56d19ce79f1d/src%2Flibrustc_expand%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8080d828c4bbe50f13143b82bac56d19ce79f1d/src%2Flibrustc_expand%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fmbe%2Fmacro_rules.rs?ref=d8080d828c4bbe50f13143b82bac56d19ce79f1d", "patch": "@@ -180,17 +180,12 @@ impl TTMacroExpander for MacroRulesMacroExpander {\n     }\n }\n \n-struct MacroRulesDummyExpander;\n-\n-impl TTMacroExpander for MacroRulesDummyExpander {\n-    fn expand<'cx>(\n-        &self,\n-        _: &'cx mut ExtCtxt<'_>,\n-        sp: Span,\n-        _: TokenStream,\n-    ) -> Box<dyn MacResult + 'cx> {\n-        DummyResult::any(sp)\n-    }\n+fn macro_rules_dummy_expander<'cx>(\n+    _: &'cx mut ExtCtxt<'_>,\n+    span: Span,\n+    _: TokenStream,\n+) -> Box<dyn MacResult + 'cx> {\n+    DummyResult::any(span)\n }\n \n fn trace_macros_note(cx_expansions: &mut FxHashMap<Span, Vec<String>>, sp: Span, message: String) {\n@@ -443,14 +438,14 @@ pub fn compile_declarative_macro(\n             let s = parse_failure_msg(&token);\n             let sp = token.span.substitute_dummy(def.span);\n             sess.span_diagnostic.struct_span_err(sp, &s).span_label(sp, msg).emit();\n-            return mk_syn_ext(Box::new(MacroRulesDummyExpander));\n+            return mk_syn_ext(Box::new(macro_rules_dummy_expander));\n         }\n         Error(sp, msg) => {\n             sess.span_diagnostic.struct_span_err(sp.substitute_dummy(def.span), &msg).emit();\n-            return mk_syn_ext(Box::new(MacroRulesDummyExpander));\n+            return mk_syn_ext(Box::new(macro_rules_dummy_expander));\n         }\n         ErrorReported => {\n-            return mk_syn_ext(Box::new(MacroRulesDummyExpander));\n+            return mk_syn_ext(Box::new(macro_rules_dummy_expander));\n         }\n     };\n \n@@ -513,16 +508,14 @@ pub fn compile_declarative_macro(\n         None => {}\n     }\n \n-    let expander: Box<_> = Box::new(MacroRulesMacroExpander {\n+    mk_syn_ext(Box::new(MacroRulesMacroExpander {\n         name: def.ident,\n         span: def.span,\n         transparency,\n         lhses,\n         rhses,\n         valid,\n-    });\n-\n-    mk_syn_ext(expander)\n+    }))\n }\n \n fn check_lhs_nt_follows("}, {"sha": "d5ed9fb9a285efd885f5f40527eaf4ed7a1a6b48", "filename": "src/test/ui/editions/edition-keywords-2018-2015-parsing.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d8080d828c4bbe50f13143b82bac56d19ce79f1d/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2015-parsing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8080d828c4bbe50f13143b82bac56d19ce79f1d/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2015-parsing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2015-parsing.rs?ref=d8080d828c4bbe50f13143b82bac56d19ce79f1d", "patch": "@@ -1,6 +1,8 @@\n // edition:2018\n // aux-build:edition-kw-macro-2015.rs\n \n+#![feature(async_closure)]\n+\n fn main() {}\n \n #[macro_use]\n@@ -19,8 +21,10 @@ pub fn check_async() {\n     r#async = consumes_async_raw!(async); //~ ERROR no rules expected the token `async`\n     r#async = consumes_async_raw!(r#async); // OK\n \n-    if passes_ident!(async) == 1 {} //~ ERROR async closures are unstable\n+    if passes_ident!(async) == 1 {}\n     if passes_ident!(r#async) == 1 {} // OK\n     module::async(); //~ ERROR expected identifier, found keyword `async`\n     module::r#async(); // OK\n+\n+    let _recovery_witness: () = 0; //~ ERROR mismatched types\n }"}, {"sha": "28663563c6ccdf1079aea69293ca1398d0613f09", "filename": "src/test/ui/editions/edition-keywords-2018-2015-parsing.stderr", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d8080d828c4bbe50f13143b82bac56d19ce79f1d/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2015-parsing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d8080d828c4bbe50f13143b82bac56d19ce79f1d/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2015-parsing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2015-parsing.stderr?ref=d8080d828c4bbe50f13143b82bac56d19ce79f1d", "patch": "@@ -1,5 +1,5 @@\n error: expected identifier, found keyword `async`\n-  --> $DIR/edition-keywords-2018-2015-parsing.rs:14:13\n+  --> $DIR/edition-keywords-2018-2015-parsing.rs:16:13\n    |\n LL |     let mut async = 1;\n    |             ^^^^^ expected identifier, found keyword\n@@ -10,7 +10,7 @@ LL |     let mut r#async = 1;\n    |             ^^^^^^^\n \n error: expected identifier, found keyword `async`\n-  --> $DIR/edition-keywords-2018-2015-parsing.rs:24:13\n+  --> $DIR/edition-keywords-2018-2015-parsing.rs:26:13\n    |\n LL |     module::async();\n    |             ^^^^^ expected identifier, found keyword\n@@ -21,13 +21,13 @@ LL |     module::r#async();\n    |             ^^^^^^^\n \n error: no rules expected the token `r#async`\n-  --> $DIR/edition-keywords-2018-2015-parsing.rs:18:31\n+  --> $DIR/edition-keywords-2018-2015-parsing.rs:20:31\n    |\n LL |     r#async = consumes_async!(r#async);\n    |                               ^^^^^^^ no rules expected this token in macro call\n \n error: no rules expected the token `async`\n-  --> $DIR/edition-keywords-2018-2015-parsing.rs:19:35\n+  --> $DIR/edition-keywords-2018-2015-parsing.rs:21:35\n    |\n LL |     r#async = consumes_async_raw!(async);\n    |                                   ^^^^^ no rules expected this token in macro call\n@@ -38,20 +38,19 @@ error: macro expansion ends with an incomplete expression: expected one of `move\n LL |     ($i: ident) => ($i)\n    |                       ^ expected one of `move`, `|`, or `||`\n    | \n-  ::: $DIR/edition-keywords-2018-2015-parsing.rs:22:8\n+  ::: $DIR/edition-keywords-2018-2015-parsing.rs:24:8\n    |\n LL |     if passes_ident!(async) == 1 {}\n    |        -------------------- in this macro invocation\n \n-error[E0658]: async closures are unstable\n-  --> $DIR/edition-keywords-2018-2015-parsing.rs:22:22\n+error[E0308]: mismatched types\n+  --> $DIR/edition-keywords-2018-2015-parsing.rs:29:33\n    |\n-LL |     if passes_ident!(async) == 1 {}\n-   |                      ^^^^^\n-   |\n-   = note: see issue #62290 <https://github.com/rust-lang/rust/issues/62290> for more information\n-   = help: add `#![feature(async_closure)]` to the crate attributes to enable\n+LL |     let _recovery_witness: () = 0;\n+   |                            --   ^ expected `()`, found integer\n+   |                            |\n+   |                            expected due to this\n \n error: aborting due to 6 previous errors\n \n-For more information about this error, try `rustc --explain E0658`.\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "044ab249f2c2660f61ae510d4c9e798fd0af578e", "filename": "src/test/ui/editions/edition-keywords-2018-2018-parsing.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d8080d828c4bbe50f13143b82bac56d19ce79f1d/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-parsing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8080d828c4bbe50f13143b82bac56d19ce79f1d/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-parsing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-parsing.rs?ref=d8080d828c4bbe50f13143b82bac56d19ce79f1d", "patch": "@@ -1,6 +1,8 @@\n // edition:2018\n // aux-build:edition-kw-macro-2018.rs\n \n+#![feature(async_closure)]\n+\n fn main() {}\n \n #[macro_use]\n@@ -19,8 +21,10 @@ pub fn check_async() {\n     r#async = consumes_async_raw!(async); //~ ERROR no rules expected the token `async`\n     r#async = consumes_async_raw!(r#async); // OK\n \n-    if passes_ident!(async) == 1 {} //~ ERROR async closures are unstable\n+    if passes_ident!(async) == 1 {}\n     if passes_ident!(r#async) == 1 {} // OK\n     module::async(); //~ ERROR expected identifier, found keyword `async`\n     module::r#async(); // OK\n+\n+    let _recovery_witness: () = 0; //~ ERROR mismatched types\n }"}, {"sha": "cda7e65e437e85e1f31803096da47d7d1b4fd710", "filename": "src/test/ui/editions/edition-keywords-2018-2018-parsing.stderr", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d8080d828c4bbe50f13143b82bac56d19ce79f1d/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-parsing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d8080d828c4bbe50f13143b82bac56d19ce79f1d/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-parsing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-parsing.stderr?ref=d8080d828c4bbe50f13143b82bac56d19ce79f1d", "patch": "@@ -1,5 +1,5 @@\n error: expected identifier, found keyword `async`\n-  --> $DIR/edition-keywords-2018-2018-parsing.rs:14:13\n+  --> $DIR/edition-keywords-2018-2018-parsing.rs:16:13\n    |\n LL |     let mut async = 1;\n    |             ^^^^^ expected identifier, found keyword\n@@ -10,7 +10,7 @@ LL |     let mut r#async = 1;\n    |             ^^^^^^^\n \n error: expected identifier, found keyword `async`\n-  --> $DIR/edition-keywords-2018-2018-parsing.rs:24:13\n+  --> $DIR/edition-keywords-2018-2018-parsing.rs:26:13\n    |\n LL |     module::async();\n    |             ^^^^^ expected identifier, found keyword\n@@ -21,13 +21,13 @@ LL |     module::r#async();\n    |             ^^^^^^^\n \n error: no rules expected the token `r#async`\n-  --> $DIR/edition-keywords-2018-2018-parsing.rs:18:31\n+  --> $DIR/edition-keywords-2018-2018-parsing.rs:20:31\n    |\n LL |     r#async = consumes_async!(r#async);\n    |                               ^^^^^^^ no rules expected this token in macro call\n \n error: no rules expected the token `async`\n-  --> $DIR/edition-keywords-2018-2018-parsing.rs:19:35\n+  --> $DIR/edition-keywords-2018-2018-parsing.rs:21:35\n    |\n LL |     r#async = consumes_async_raw!(async);\n    |                                   ^^^^^ no rules expected this token in macro call\n@@ -38,20 +38,19 @@ error: macro expansion ends with an incomplete expression: expected one of `move\n LL |     ($i: ident) => ($i)\n    |                       ^ expected one of `move`, `|`, or `||`\n    | \n-  ::: $DIR/edition-keywords-2018-2018-parsing.rs:22:8\n+  ::: $DIR/edition-keywords-2018-2018-parsing.rs:24:8\n    |\n LL |     if passes_ident!(async) == 1 {}\n    |        -------------------- in this macro invocation\n \n-error[E0658]: async closures are unstable\n-  --> $DIR/edition-keywords-2018-2018-parsing.rs:22:22\n+error[E0308]: mismatched types\n+  --> $DIR/edition-keywords-2018-2018-parsing.rs:29:33\n    |\n-LL |     if passes_ident!(async) == 1 {}\n-   |                      ^^^^^\n-   |\n-   = note: see issue #62290 <https://github.com/rust-lang/rust/issues/62290> for more information\n-   = help: add `#![feature(async_closure)]` to the crate attributes to enable\n+LL |     let _recovery_witness: () = 0;\n+   |                            --   ^ expected `()`, found integer\n+   |                            |\n+   |                            expected due to this\n \n error: aborting due to 6 previous errors\n \n-For more information about this error, try `rustc --explain E0658`.\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "80e2d7c6545ba277512e0c9c2ad7ee0a0c70be40", "filename": "src/test/ui/parser/macro/issue-33569.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d8080d828c4bbe50f13143b82bac56d19ce79f1d/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fissue-33569.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8080d828c4bbe50f13143b82bac56d19ce79f1d/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fissue-33569.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fissue-33569.rs?ref=d8080d828c4bbe50f13143b82bac56d19ce79f1d", "patch": "@@ -1,5 +1,3 @@\n-fn main() {}\n-\n macro_rules! foo {\n     { $+ } => { //~ ERROR expected identifier, found `+`\n                 //~^ ERROR missing fragment specifier\n@@ -8,3 +6,5 @@ macro_rules! foo {\n }\n \n foo!();\n+\n+fn main() {}"}, {"sha": "b4d38d3ce4806ca8c5a6d9bf50241a3c01bdb684", "filename": "src/test/ui/parser/macro/issue-33569.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d8080d828c4bbe50f13143b82bac56d19ce79f1d/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fissue-33569.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d8080d828c4bbe50f13143b82bac56d19ce79f1d/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fissue-33569.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fissue-33569.stderr?ref=d8080d828c4bbe50f13143b82bac56d19ce79f1d", "patch": "@@ -1,17 +1,17 @@\n error: expected identifier, found `+`\n-  --> $DIR/issue-33569.rs:4:8\n+  --> $DIR/issue-33569.rs:2:8\n    |\n LL |     { $+ } => {\n    |        ^\n \n error: expected one of: `*`, `+`, or `?`\n-  --> $DIR/issue-33569.rs:6:13\n+  --> $DIR/issue-33569.rs:4:13\n    |\n LL |         $(x)(y)\n    |             ^^^\n \n error: missing fragment specifier\n-  --> $DIR/issue-33569.rs:4:8\n+  --> $DIR/issue-33569.rs:2:8\n    |\n LL |     { $+ } => {\n    |        ^"}, {"sha": "59b347dac679c252dd44fccd83acda84ffa59d5e", "filename": "src/test/ui/proc-macro/invalid-punct-ident-4.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d8080d828c4bbe50f13143b82bac56d19ce79f1d/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8080d828c4bbe50f13143b82bac56d19ce79f1d/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-4.rs?ref=d8080d828c4bbe50f13143b82bac56d19ce79f1d", "patch": "@@ -1,10 +1,12 @@\n // aux-build:invalid-punct-ident.rs\n \n-// We use `main` not found below as a witness for error recovery in proc macro expansion.\n-\n-#[macro_use] //~ ERROR `main` function not found\n+#[macro_use]\n extern crate invalid_punct_ident;\n \n lexer_failure!();\n //~^ ERROR proc macro panicked\n //~| ERROR unexpected closing delimiter: `)`\n+\n+fn main() {\n+    let _recovery_witness: () = 0; //~ ERROR mismatched types\n+}"}, {"sha": "3b357aecea864d685397256279ec1cb31f317979", "filename": "src/test/ui/proc-macro/invalid-punct-ident-4.stderr", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d8080d828c4bbe50f13143b82bac56d19ce79f1d/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d8080d828c4bbe50f13143b82bac56d19ce79f1d/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-4.stderr?ref=d8080d828c4bbe50f13143b82bac56d19ce79f1d", "patch": "@@ -1,26 +1,25 @@\n error: unexpected closing delimiter: `)`\n-  --> $DIR/invalid-punct-ident-4.rs:8:1\n+  --> $DIR/invalid-punct-ident-4.rs:6:1\n    |\n LL | lexer_failure!();\n    | ^^^^^^^^^^^^^^^^^ unexpected closing delimiter\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: proc macro panicked\n-  --> $DIR/invalid-punct-ident-4.rs:8:1\n+  --> $DIR/invalid-punct-ident-4.rs:6:1\n    |\n LL | lexer_failure!();\n    | ^^^^^^^^^^^^^^^^^\n \n-error[E0601]: `main` function not found in crate `invalid_punct_ident_4`\n-  --> $DIR/invalid-punct-ident-4.rs:5:1\n+error[E0308]: mismatched types\n+  --> $DIR/invalid-punct-ident-4.rs:11:33\n    |\n-LL | / #[macro_use]\n-LL | | extern crate invalid_punct_ident;\n-LL | |\n-LL | | lexer_failure!();\n-   | |_________________^ consider adding a `main` function to `$DIR/invalid-punct-ident-4.rs`\n+LL |     let _recovery_witness: () = 0;\n+   |                            --   ^ expected `()`, found integer\n+   |                            |\n+   |                            expected due to this\n \n error: aborting due to 3 previous errors\n \n-For more information about this error, try `rustc --explain E0601`.\n+For more information about this error, try `rustc --explain E0308`."}]}