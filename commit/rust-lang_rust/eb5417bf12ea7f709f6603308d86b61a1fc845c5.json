{"sha": "eb5417bf12ea7f709f6603308d86b61a1fc845c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViNTQxN2JmMTJlYTdmNzA5ZjY2MDMzMDhkODZiNjFhMWZjODQ1YzU=", "commit": {"author": {"name": "Wang Xuerui", "email": "idontknw.wang@gmail.com", "date": "2016-05-21T04:58:17Z"}, "committer": {"name": "Wang Xuerui", "email": "idontknw.wang@gmail.com", "date": "2016-07-13T19:10:45Z"}, "message": "syntax_ext: format: rename variants of ArgumentType for clarity", "tree": {"sha": "a89f7019118ecef960012cd49cc74c01f003dee0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a89f7019118ecef960012cd49cc74c01f003dee0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb5417bf12ea7f709f6603308d86b61a1fc845c5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJXhpI1AAoJEHg5bO9pIxDsJHkQAJ+hTxDFuZAshKe2UeKlen3O\nHpcSUNKeQ+K0CIuLFQ2KDFuft8yX8og9dh1voDgHSG46x+0bJKMSfXCvCTaxHZwF\nMdsfQRBWl7ghALjK6MwRtDIu09eR3kOfcc2EU4lnhhr5bE7IbotO8JCCb+5Mo4XE\nKC2DVl5OYKTeYV2w5+hlEE6pGp+ef9I9Hdenldpc5VB3fHp6YWUkYwl2PX0W96ls\npr1lUUkSCZm7R8VJtPZHgcIf70Sjlhnt1tCxuEcWEIqdBIgXLNb6kj4dlW3nYo0n\nf+2DMABDhSwYrKoykPig6ObgdLEmTOTBdM/N/iwWJl8s2nre3BPPjwyGMP6pzLbe\nzYzvKhlOknZ2yC6JvwJEg7lw0RGUgH/wO9cOn8x1zlPo5vsOWX/rm8EoozrGTI0I\nsci8TCewFpuO+1y8jBs/Kv8+oBP7+y99Zfd1sl+Dgl+9eVXFZqYHgbgyIxDG0Ua7\ncqQl3/Hw1s1+Mm1zixJP2m2Bw5qt3uE+SlHn/oD2lRrI1bS7hHmuku+3lHCJH+q/\nQ0aVTy8m1lkG2ayWHs5TY+A4QBBmX0s2biR6KsceS1NeIT5gRZWWvlMql0DafWAh\nqdDdbvZ2Z3szMvVfjWrKdd23WZGmvXhHgLhgUHHv1P9xfMo28BgChVVrgjSxUpP2\nPaQXGwxfL3A438xjSQGj\n=mc9e\n-----END PGP SIGNATURE-----", "payload": "tree a89f7019118ecef960012cd49cc74c01f003dee0\nparent 1ace7f0d49f9e482efe680d691a9d1a8f7e53f60\nauthor Wang Xuerui <idontknw.wang@gmail.com> 1463806697 +0800\ncommitter Wang Xuerui <idontknw.wang@gmail.com> 1468437045 +0800\n\nsyntax_ext: format: rename variants of ArgumentType for clarity\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb5417bf12ea7f709f6603308d86b61a1fc845c5", "html_url": "https://github.com/rust-lang/rust/commit/eb5417bf12ea7f709f6603308d86b61a1fc845c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb5417bf12ea7f709f6603308d86b61a1fc845c5/comments", "author": {"login": "xen0n", "id": 1175567, "node_id": "MDQ6VXNlcjExNzU1Njc=", "avatar_url": "https://avatars.githubusercontent.com/u/1175567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xen0n", "html_url": "https://github.com/xen0n", "followers_url": "https://api.github.com/users/xen0n/followers", "following_url": "https://api.github.com/users/xen0n/following{/other_user}", "gists_url": "https://api.github.com/users/xen0n/gists{/gist_id}", "starred_url": "https://api.github.com/users/xen0n/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xen0n/subscriptions", "organizations_url": "https://api.github.com/users/xen0n/orgs", "repos_url": "https://api.github.com/users/xen0n/repos", "events_url": "https://api.github.com/users/xen0n/events{/privacy}", "received_events_url": "https://api.github.com/users/xen0n/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xen0n", "id": 1175567, "node_id": "MDQ6VXNlcjExNzU1Njc=", "avatar_url": "https://avatars.githubusercontent.com/u/1175567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xen0n", "html_url": "https://github.com/xen0n", "followers_url": "https://api.github.com/users/xen0n/followers", "following_url": "https://api.github.com/users/xen0n/following{/other_user}", "gists_url": "https://api.github.com/users/xen0n/gists{/gist_id}", "starred_url": "https://api.github.com/users/xen0n/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xen0n/subscriptions", "organizations_url": "https://api.github.com/users/xen0n/orgs", "repos_url": "https://api.github.com/users/xen0n/repos", "events_url": "https://api.github.com/users/xen0n/events{/privacy}", "received_events_url": "https://api.github.com/users/xen0n/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ace7f0d49f9e482efe680d691a9d1a8f7e53f60", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ace7f0d49f9e482efe680d691a9d1a8f7e53f60", "html_url": "https://github.com/rust-lang/rust/commit/1ace7f0d49f9e482efe680d691a9d1a8f7e53f60"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "9e6a83a1863b18a75420fba2702c33f0683c69ed", "filename": "src/libsyntax_ext/format.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/eb5417bf12ea7f709f6603308d86b61a1fc845c5/src%2Flibsyntax_ext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb5417bf12ea7f709f6603308d86b61a1fc845c5/src%2Flibsyntax_ext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat.rs?ref=eb5417bf12ea7f709f6603308d86b61a1fc845c5", "patch": "@@ -27,8 +27,8 @@ use std::collections::HashMap;\n \n #[derive(PartialEq)]\n enum ArgumentType {\n-    Known(String),\n-    Unsigned\n+    Placeholder(String),\n+    Count,\n }\n \n enum Position {\n@@ -182,7 +182,7 @@ impl<'a, 'b> Context<'a, 'b> {\n                     parse::ArgumentNamed(s) => Named(s.to_string()),\n                 };\n \n-                let ty = Known(arg.format.ty.to_string());\n+                let ty = Placeholder(arg.format.ty.to_string());\n                 self.verify_arg_type(pos, ty);\n             }\n         }\n@@ -192,10 +192,10 @@ impl<'a, 'b> Context<'a, 'b> {\n         match c {\n             parse::CountImplied | parse::CountIs(..) => {}\n             parse::CountIsParam(i) => {\n-                self.verify_arg_type(Exact(i), Unsigned);\n+                self.verify_arg_type(Exact(i), Count);\n             }\n             parse::CountIsName(s) => {\n-                self.verify_arg_type(Named(s.to_string()), Unsigned);\n+                self.verify_arg_type(Named(s.to_string()), Count);\n             }\n         }\n     }\n@@ -545,7 +545,7 @@ impl<'a, 'b> Context<'a, 'b> {\n                   ty: &ArgumentType, arg: P<ast::Expr>)\n                   -> P<ast::Expr> {\n         let trait_ = match *ty {\n-            Known(ref tyname) => {\n+            Placeholder(ref tyname) => {\n                 match &tyname[..] {\n                     \"\"  => \"Display\",\n                     \"?\" => \"Debug\",\n@@ -564,7 +564,7 @@ impl<'a, 'b> Context<'a, 'b> {\n                     }\n                 }\n             }\n-            Unsigned => {\n+            Count => {\n                 let path = ecx.std_path(&[\"fmt\", \"ArgumentV1\", \"from_usize\"]);\n                 return ecx.expr_call_global(macsp, path, vec![arg])\n             }"}]}