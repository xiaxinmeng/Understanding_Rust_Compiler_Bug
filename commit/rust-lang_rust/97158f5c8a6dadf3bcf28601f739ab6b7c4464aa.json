{"sha": "97158f5c8a6dadf3bcf28601f739ab6b7c4464aa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3MTU4ZjVjOGE2ZGFkZjNiY2YyODYwMWY3MzlhYjZiN2M0NDY0YWE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-05-30T12:03:58Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-05-30T12:03:58Z"}, "message": "add built-in types to scopes", "tree": {"sha": "3b1fa7e454c538f767ba8dc512fe1305780902a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b1fa7e454c538f767ba8dc512fe1305780902a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97158f5c8a6dadf3bcf28601f739ab6b7c4464aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97158f5c8a6dadf3bcf28601f739ab6b7c4464aa", "html_url": "https://github.com/rust-lang/rust/commit/97158f5c8a6dadf3bcf28601f739ab6b7c4464aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97158f5c8a6dadf3bcf28601f739ab6b7c4464aa/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e5b02966b068a9aecc9d47290e865b0d44ce9ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e5b02966b068a9aecc9d47290e865b0d44ce9ce", "html_url": "https://github.com/rust-lang/rust/commit/4e5b02966b068a9aecc9d47290e865b0d44ce9ce"}], "stats": {"total": 73, "additions": 49, "deletions": 24}, "files": [{"sha": "e38fa0ff0bbcdf1974e854b6f897bc9c16c3dea8", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/97158f5c8a6dadf3bcf28601f739ab6b7c4464aa/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/97158f5c8a6dadf3bcf28601f739ab6b7c4464aa/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=97158f5c8a6dadf3bcf28601f739ab6b7c4464aa", "patch": "@@ -1084,6 +1084,7 @@ dependencies = [\n  \"insta 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"join_to_string 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"once_cell 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"parking_lot 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ra_arena 0.1.0\",\n  \"ra_db 0.1.0\","}, {"sha": "78808e72f0d75da6c821ffeb4891d897d9bda726", "filename": "crates/ra_hir/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/97158f5c8a6dadf3bcf28601f739ab6b7c4464aa/crates%2Fra_hir%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/97158f5c8a6dadf3bcf28601f739ab6b7c4464aa/crates%2Fra_hir%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2FCargo.toml?ref=97158f5c8a6dadf3bcf28601f739ab6b7c4464aa", "patch": "@@ -13,6 +13,7 @@ parking_lot = \"0.8.0\"\n ena = \"0.11\"\n join_to_string = \"0.1.3\"\n either = \"1.5.2\"\n+once_cell = \"0.2\"\n \n ra_syntax = { path = \"../ra_syntax\" }\n ra_arena = { path = \"../ra_arena\" }"}, {"sha": "e3c76567468b672739229115e6d1f1d5613e452e", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97158f5c8a6dadf3bcf28601f739ab6b7c4464aa/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97158f5c8a6dadf3bcf28601f739ab6b7c4464aa/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=97158f5c8a6dadf3bcf28601f739ab6b7c4464aa", "patch": "@@ -106,7 +106,7 @@ impl BuiltinType {\n         (KnownName::U128,  BuiltinType::Int(IntTy { signedness: Signedness::Unsigned, bitness: IntBitness::X128 })),\n \n         (KnownName::F32, BuiltinType::Float(FloatTy { bitness: FloatBitness::X32 })),\n-        (KnownName::F64, BuiltinType::Float(FloatTy { bitness: FloatBitness::X32 })),\n+        (KnownName::F64, BuiltinType::Float(FloatTy { bitness: FloatBitness::X64 })),\n     ];\n }\n "}, {"sha": "e9003e00b3bdc22b5f2d41a5eef53444d05bfc2a", "filename": "crates/ra_hir/src/name.rs", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/97158f5c8a6dadf3bcf28601f739ab6b7c4464aa/crates%2Fra_hir%2Fsrc%2Fname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97158f5c8a6dadf3bcf28601f739ab6b7c4464aa/crates%2Fra_hir%2Fsrc%2Fname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fname.rs?ref=97158f5c8a6dadf3bcf28601f739ab6b7c4464aa", "patch": "@@ -123,7 +123,7 @@ impl AsName for ra_db::Dependency {\n // const ISIZE: Name = Name::new(\"isize\")\n // ```\n // but const-fn is not that powerful yet.\n-#[derive(Debug, PartialEq, Eq)]\n+#[derive(Debug, Clone, Copy, PartialEq, Eq)]\n pub(crate) enum KnownName {\n     Isize,\n     I8,\n@@ -151,3 +151,31 @@ pub(crate) enum KnownName {\n \n     MacroRules,\n }\n+\n+impl AsName for KnownName {\n+    fn as_name(&self) -> Name {\n+        let s = match self {\n+            KnownName::Isize => \"isize\",\n+            KnownName::I8 => \"i8\",\n+            KnownName::I16 => \"i16\",\n+            KnownName::I32 => \"i32\",\n+            KnownName::I64 => \"i64\",\n+            KnownName::I128 => \"i128\",\n+            KnownName::Usize => \"usize\",\n+            KnownName::U8 => \"u8\",\n+            KnownName::U16 => \"u16\",\n+            KnownName::U32 => \"u32\",\n+            KnownName::U64 => \"u64\",\n+            KnownName::U128 => \"u128\",\n+            KnownName::F32 => \"f32\",\n+            KnownName::F64 => \"f64\",\n+            KnownName::Bool => \"bool\",\n+            KnownName::Char => \"char\",\n+            KnownName::Str => \"str\",\n+            KnownName::SelfType => \"Self\",\n+            KnownName::SelfParam => \"self\",\n+            KnownName::MacroRules => \"macro_rules\",\n+        };\n+        Name::new(s.into())\n+    }\n+}"}, {"sha": "aa26345b224d81f19d89c2964084c60f701faeaa", "filename": "crates/ra_hir/src/nameres.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/97158f5c8a6dadf3bcf28601f739ab6b7c4464aa/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97158f5c8a6dadf3bcf28601f739ab6b7c4464aa/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres.rs?ref=97158f5c8a6dadf3bcf28601f739ab6b7c4464aa", "patch": "@@ -62,9 +62,10 @@ use ra_db::{FileId, Edition};\n use test_utils::tested_by;\n use ra_syntax::ast;\n use ra_prof::profile;\n+use once_cell::sync::Lazy;\n \n use crate::{\n-    ModuleDef, Name, Crate, Module, MacroDef, KnownName, BuiltinType,\n+    ModuleDef, Name, Crate, Module, MacroDef, AsName, BuiltinType,\n     DefDatabase, Path, PathKind, HirFileId, Trait,\n     ids::MacroDefId,\n     diagnostics::DiagnosticSink,\n@@ -140,12 +141,22 @@ pub struct ModuleScope {\n     macros: FxHashMap<Name, MacroDef>,\n }\n \n+static BUILTIN_SCOPE: Lazy<FxHashMap<Name, Resolution>> = Lazy::new(|| {\n+    BuiltinType::ALL\n+        .iter()\n+        .map(|&(known_name, ty)| {\n+            (known_name.as_name(), Resolution { def: PerNs::types(ty.into()), import: None })\n+        })\n+        .collect()\n+});\n+\n impl ModuleScope {\n     pub fn entries<'a>(&'a self) -> impl Iterator<Item = (&'a Name, &'a Resolution)> + 'a {\n-        self.items.iter()\n+        //FIXME: shadowing\n+        self.items.iter().chain(BUILTIN_SCOPE.iter())\n     }\n     pub fn get(&self, name: &Name) -> Option<&Resolution> {\n-        self.items.get(name)\n+        self.items.get(name).or_else(|| BUILTIN_SCOPE.get(name))\n     }\n     pub fn traits<'a>(&'a self) -> impl Iterator<Item = Trait> + 'a {\n         self.items.values().filter_map(|r| match r.def.take_types() {\n@@ -154,7 +165,7 @@ impl ModuleScope {\n         })\n     }\n     fn get_item_or_macro(&self, name: &Name) -> Option<ItemOrMacro> {\n-        match (self.items.get(name), self.macros.get(name)) {\n+        match (self.get(name), self.macros.get(name)) {\n             (Some(item), _) if !item.def.is_none() => Some(Either::Left(item.def)),\n             (_, Some(macro_)) => Some(Either::Right(*macro_)),\n             _ => None,"}, {"sha": "bc721f6e0aed5871876166314bbe752fe6db356f", "filename": "crates/ra_hir/src/nameres/tests/incremental.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97158f5c8a6dadf3bcf28601f739ab6b7c4464aa/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests%2Fincremental.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97158f5c8a6dadf3bcf28601f739ab6b7c4464aa/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests%2Fincremental.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests%2Fincremental.rs?ref=97158f5c8a6dadf3bcf28601f739ab6b7c4464aa", "patch": "@@ -116,7 +116,7 @@ fn typing_inside_a_macro_should_not_invalidate_def_map() {\n         let events = db.log_executed(|| {\n             let module = crate::source_binder::module_from_file_id(&db, pos.file_id).unwrap();\n             let decls = module.declarations(&db);\n-            assert_eq!(decls.len(), 1);\n+            assert_eq!(decls.len(), 18);\n         });\n         assert!(format!(\"{:?}\", events).contains(\"crate_def_map\"), \"{:#?}\", events)\n     }\n@@ -126,7 +126,7 @@ fn typing_inside_a_macro_should_not_invalidate_def_map() {\n         let events = db.log_executed(|| {\n             let module = crate::source_binder::module_from_file_id(&db, pos.file_id).unwrap();\n             let decls = module.declarations(&db);\n-            assert_eq!(decls.len(), 1);\n+            assert_eq!(decls.len(), 18);\n         });\n         assert!(!format!(\"{:?}\", events).contains(\"crate_def_map\"), \"{:#?}\", events)\n     }"}, {"sha": "d2ba01826e8f9d8ff0380318829503070493784e", "filename": "crates/ra_hir/src/ty/lower.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/97158f5c8a6dadf3bcf28601f739ab6b7c4464aa/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97158f5c8a6dadf3bcf28601f739ab6b7c4464aa/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs?ref=97158f5c8a6dadf3bcf28601f739ab6b7c4464aa", "patch": "@@ -65,22 +65,6 @@ impl Ty {\n     }\n \n     pub(crate) fn from_hir_path(db: &impl HirDatabase, resolver: &Resolver, path: &Path) -> Self {\n-        if let Some(name) = path.as_ident() {\n-            // TODO: remove this\n-            if let Some(int_ty) = primitive::IntTy::from_type_name(name) {\n-                return Ty::simple(TypeCtor::Int(primitive::UncertainIntTy::Known(int_ty)));\n-            } else if let Some(float_ty) = primitive::FloatTy::from_type_name(name) {\n-                return Ty::simple(TypeCtor::Float(primitive::UncertainFloatTy::Known(float_ty)));\n-            } else if let Some(known) = name.as_known_name() {\n-                match known {\n-                    KnownName::Bool => return Ty::simple(TypeCtor::Bool),\n-                    KnownName::Char => return Ty::simple(TypeCtor::Char),\n-                    KnownName::Str => return Ty::simple(TypeCtor::Str),\n-                    _ => {}\n-                }\n-            }\n-        }\n-\n         // Resolve the path (in type namespace)\n         let resolution = resolver.resolve_path(db, path).take_types();\n "}]}