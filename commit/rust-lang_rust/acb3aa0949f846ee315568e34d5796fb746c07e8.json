{"sha": "acb3aa0949f846ee315568e34d5796fb746c07e8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjYjNhYTA5NDlmODQ2ZWUzMTU1NjhlMzRkNTc5NmZiNzQ2YzA3ZTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-07T10:21:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-07T10:21:19Z"}, "message": "Auto merge of #25175 - steveklabnik:rollup, r=steveklabnik\n\n- Successful merges: #24576, #24966, #25052, #25131, #25137, #25138, #25139, #25141, #25142, #25144, #25146, #25148, #25154, #25156, #25160, #25173\n- Failed merges:", "tree": {"sha": "b1ac42dd7d982f7a878e1bb0856795f86c3fb92a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1ac42dd7d982f7a878e1bb0856795f86c3fb92a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/acb3aa0949f846ee315568e34d5796fb746c07e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/acb3aa0949f846ee315568e34d5796fb746c07e8", "html_url": "https://github.com/rust-lang/rust/commit/acb3aa0949f846ee315568e34d5796fb746c07e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/acb3aa0949f846ee315568e34d5796fb746c07e8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95607544b6b59f88f838a9050a126149b4570049", "url": "https://api.github.com/repos/rust-lang/rust/commits/95607544b6b59f88f838a9050a126149b4570049", "html_url": "https://github.com/rust-lang/rust/commit/95607544b6b59f88f838a9050a126149b4570049"}, {"sha": "5ac5203e6e136507b63e451c32127bd9f23edd8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ac5203e6e136507b63e451c32127bd9f23edd8a", "html_url": "https://github.com/rust-lang/rust/commit/5ac5203e6e136507b63e451c32127bd9f23edd8a"}], "stats": {"total": 327, "additions": 199, "deletions": 128}, "files": [{"sha": "1a0155d4773ec5cb142f573857f445f9c0704313", "filename": "src/doc/complement-design-faq.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acb3aa0949f846ee315568e34d5796fb746c07e8/src%2Fdoc%2Fcomplement-design-faq.md", "raw_url": "https://github.com/rust-lang/rust/raw/acb3aa0949f846ee315568e34d5796fb746c07e8/src%2Fdoc%2Fcomplement-design-faq.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fcomplement-design-faq.md?ref=acb3aa0949f846ee315568e34d5796fb746c07e8", "patch": "@@ -39,7 +39,7 @@ representation as a primitive. This allows using Rust `enum`s in FFI where C\n `enum`s are also used, for most use cases. The attribute can also be applied\n to `struct`s to get the same layout as a C struct would.\n \n-[repr]: reference.html#miscellaneous-attributes\n+[repr]: reference.html#ffi-attributes\n \n ## There is no GC\n "}, {"sha": "ac65b9344557298a6f172a2185a1ad54e56d8989", "filename": "src/doc/reference.md", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/acb3aa0949f846ee315568e34d5796fb746c07e8/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/acb3aa0949f846ee315568e34d5796fb746c07e8/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=acb3aa0949f846ee315568e34d5796fb746c07e8", "patch": "@@ -1867,13 +1867,12 @@ macro scope.\n   lower to the target's SIMD instructions, if any; the `simd` feature gate\n   is necessary to use this attribute.\n - `static_assert` - on statics whose type is `bool`, terminates compilation\n-  with an error if it is not initialized to `true`.\n-- `unsafe_destructor` - allow implementations of the \"drop\" language item\n-  where the type it is implemented for does not implement the \"send\" language\n-  item; the `unsafe_destructor` feature gate is needed to use this attribute\n+  with an error if it is not initialized to `true`. To use this, the `static_assert`\n+  feature gate must be enabled.\n - `unsafe_no_drop_flag` - on structs, remove the flag that prevents\n   destructors from being run twice. Destructors might be run multiple times on\n-  the same object with this attribute.\n+  the same object with this attribute. To use this, the `unsafe_no_drop_flag` feature\n+  gate must be enabled.\n - `doc` - Doc comments such as `/// foo` are equivalent to `#[doc = \"foo\"]`.\n - `rustc_on_unimplemented` - Write a custom note to be shown along with the error\n    when the trait is found to be unimplemented on a type."}, {"sha": "6b58f7dfde81755667fddf1f06282981b64432cd", "filename": "src/doc/trpl/guessing-game.md", "status": "modified", "additions": 18, "deletions": 15, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/acb3aa0949f846ee315568e34d5796fb746c07e8/src%2Fdoc%2Ftrpl%2Fguessing-game.md", "raw_url": "https://github.com/rust-lang/rust/raw/acb3aa0949f846ee315568e34d5796fb746c07e8/src%2Fdoc%2Ftrpl%2Fguessing-game.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fguessing-game.md?ref=acb3aa0949f846ee315568e34d5796fb746c07e8", "patch": "@@ -82,11 +82,11 @@ fn main() {\n \n     let mut guess = String::new();\n \n-    let input = io::stdin().read_line(&mut guess)\n+    io::stdin().read_line(&mut guess)\n         .ok()\n         .expect(\"Failed to read line\");\n \n-    println!(\"You guessed: {}\", input);\n+    println!(\"You guessed: {}\", guess);\n }\n ```\n \n@@ -302,12 +302,12 @@ project.\n There\u2019s just one line of this first example left:\n \n ```rust,ignore\n-    println!(\"You guessed: {}\", input);\n+    println!(\"You guessed: {}\", guess);\n }\n ```\n \n This prints out the string we saved our input in. The `{}`s are a placeholder,\n-and so we pass it `input` as an argument. If we had multiple `{}`s, we would\n+and so we pass it `guess` as an argument. If we had multiple `{}`s, we would\n pass multiple arguments:\n \n ```rust\n@@ -410,24 +410,29 @@ $ cargo build\n    Compiling guessing_game v0.1.0 (file:///home/you/projects/guessing_game)\n ```\n \n-So, we told Cargo we wanted any version of `rand`, and so it fetched the\n-latest version at the time this was written, `v0.3.8`. But what happens\n-when next week, version `v0.4.0` comes out, which changes something with\n-`rand`, and it includes a breaking change? After all, a `v0.y.z` version\n-in SemVer can change every release.\n+So, we told Cargo we wanted any version of `rand`, and so it fetched the latest\n+version at the time this was written, `v0.3.8`. But what happens when next\n+week, version `v0.3.9` comes out, with an important bugfix? While getting\n+bugfixes is important, what if `0.3.9` contains a regression that breaks our\n+code?\n \n The answer to this problem is the `Cargo.lock` file you\u2019ll now find in your\n project directory. When you build your project for the first time, Cargo\n figures out all of the versions that fit your criteria, and then writes them\n to the `Cargo.lock` file. When you build your project in the future, Cargo\n will see that the `Cargo.lock` file exists, and then use that specific version\n rather than do all the work of figuring out versions again. This lets you\n-have a repeatable build automatically.\n+have a repeatable build automatically. In other words, we\u2019ll stay at `0.3.8`\n+until we explicitly upgrade, and so will anyone who we share our code with,\n+thanks to the lock file.\n \n-What about when we _do_ want to use `v0.4.0`? Cargo has another command,\n+What about when we _do_ want to use `v0.3.9`? Cargo has another command,\n `update`, which says \u2018ignore the lock, figure out all the latest versions that\n fit what we\u2019ve specified. If that works, write those versions out to the lock\n-file\u2019.\n+file\u2019. But, by default, Cargo will only look for versions larger than `0.3.0`\n+and smaller than `0.4.0`. If we want to move to `0.4.x`, we\u2019d have to update\n+the `Cargo.toml` directly. When we do, the next time we `cargo build`, Cargo\n+will update the index and re-evaluate our `rand` requirements.\n \n There\u2019s a lot more to say about [Cargo][doccargo] and [its\n ecosystem][doccratesio], but for now, that\u2019s all we need to know. Cargo makes\n@@ -843,7 +848,7 @@ fn main() {\n             Ordering::Less    => println!(\"Too small!\"),\n             Ordering::Greater => println!(\"Too big!\"),\n             Ordering::Equal   => {\n-                println!(\"You win!\"),\n+                println!(\"You win!\");\n                 break;\n             }\n         }\n@@ -960,8 +965,6 @@ fn main() {\n \n     let secret_number = rand::thread_rng().gen_range(1, 101);\n \n-    println!(\"The secret number is: {}\", secret_number);\n-\n     loop {\n         println!(\"Please input your guess.\");\n "}, {"sha": "61a6ec3eb3f4d2e3f770dc53a7638a0c2b62b2b1", "filename": "src/doc/trpl/strings.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/acb3aa0949f846ee315568e34d5796fb746c07e8/src%2Fdoc%2Ftrpl%2Fstrings.md", "raw_url": "https://github.com/rust-lang/rust/raw/acb3aa0949f846ee315568e34d5796fb746c07e8/src%2Fdoc%2Ftrpl%2Fstrings.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fstrings.md?ref=acb3aa0949f846ee315568e34d5796fb746c07e8", "patch": "@@ -73,13 +73,13 @@ individual bytes, or as codepoints:\n let hachiko = \"\u5fe0\u72ac\u30cf\u30c1\u516c\";\n \n for b in hachiko.as_bytes() {\n-print!(\"{}, \", b);\n+    print!(\"{}, \", b);\n }\n \n println!(\"\");\n \n for c in hachiko.chars() {\n-print!(\"{}, \", c);\n+    print!(\"{}, \", c);\n }\n \n println!(\"\");"}, {"sha": "f062d33f25e25514423e15c72e7f68148f59adf4", "filename": "src/grammar/RustLexer.g4", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/acb3aa0949f846ee315568e34d5796fb746c07e8/src%2Fgrammar%2FRustLexer.g4", "raw_url": "https://github.com/rust-lang/rust/raw/acb3aa0949f846ee315568e34d5796fb746c07e8/src%2Fgrammar%2FRustLexer.g4", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar%2FRustLexer.g4?ref=acb3aa0949f846ee315568e34d5796fb746c07e8", "patch": "@@ -8,14 +8,14 @@ lexer grammar RustLexer;\n \n \n tokens {\n-    EQ, LT, LE, EQEQ, NE, GE, GT, ANDAND, OROR, NOT, TILDE, PLUT,\n+    EQ, LT, LE, EQEQ, NE, GE, GT, ANDAND, OROR, NOT, TILDE, PLUS,\n     MINUS, STAR, SLASH, PERCENT, CARET, AND, OR, SHL, SHR, BINOP,\n     BINOPEQ, AT, DOT, DOTDOT, DOTDOTDOT, COMMA, SEMI, COLON,\n     MOD_SEP, RARROW, FAT_ARROW, LPAREN, RPAREN, LBRACKET, RBRACKET,\n-    LBRACE, RBRACE, POUND, DOLLAR, UNDERSCORE, LIT_CHAR,\n+    LBRACE, RBRACE, POUND, DOLLAR, UNDERSCORE, LIT_CHAR, LIT_BYTE,\n     LIT_INTEGER, LIT_FLOAT, LIT_STR, LIT_STR_RAW, LIT_BINARY,\n-    LIT_BINARY_RAW, IDENT, LIFETIME, WHITESPACE, DOC_COMMENT,\n-    COMMENT, SHEBANG\n+    LIT_BINARY_RAW, QUESTION, IDENT, LIFETIME, WHITESPACE, DOC_COMMENT,\n+    COMMENT, SHEBANG, UTF8_BOM\n }\n \n import xidstart , xidcontinue;"}, {"sha": "10b8abfc78606ddf844d9be66560d9d3737cfd3d", "filename": "src/grammar/verify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acb3aa0949f846ee315568e34d5796fb746c07e8/src%2Fgrammar%2Fverify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acb3aa0949f846ee315568e34d5796fb746c07e8/src%2Fgrammar%2Fverify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar%2Fverify.rs?ref=acb3aa0949f846ee315568e34d5796fb746c07e8", "patch": "@@ -111,7 +111,7 @@ fn parse_token_list(file: &str) -> HashMap<String, token::Token> {\n             \"LIT_BINARY_RAW\"    => token::Literal(token::BinaryRaw(Name(0), 0), None),\n             \"QUESTION\"          => token::Question,\n             \"SHEBANG\"           => token::Shebang(Name(0)),\n-            _                   => continue,\n+            _                   => panic!(\"Bad token str `{}`\", val),\n         };\n \n         res.insert(num.to_string(), tok);"}, {"sha": "a0d60be300059ed73efdd11e5b815598025dd97e", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acb3aa0949f846ee315568e34d5796fb746c07e8/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acb3aa0949f846ee315568e34d5796fb746c07e8/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=acb3aa0949f846ee315568e34d5796fb746c07e8", "patch": "@@ -37,7 +37,7 @@\n //! }\n //! ```\n //!\n-//! This will print `Cons(1, Box(Cons(2, Box(Nil))))`.\n+//! This will print `Cons(1, Cons(2, Nil))`.\n //!\n //! Recursive structures must be boxed, because if the definition of `Cons` looked like this:\n //!"}, {"sha": "a787d34f9145a890bc8646bba904637dc295baad", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acb3aa0949f846ee315568e34d5796fb746c07e8/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acb3aa0949f846ee315568e34d5796fb746c07e8/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=acb3aa0949f846ee315568e34d5796fb746c07e8", "patch": "@@ -602,6 +602,8 @@ pub trait Iterator {\n     /// Performs a fold operation over the entire iterator, returning the\n     /// eventual state at the end of the iteration.\n     ///\n+    /// This operation is sometimes called 'reduce' or 'inject'.\n+    ///\n     /// # Examples\n     ///\n     /// ```"}, {"sha": "88112b4b90cbe690a03e6480987cdad769c11981", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 123, "deletions": 4, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/acb3aa0949f846ee315568e34d5796fb746c07e8/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acb3aa0949f846ee315568e34d5796fb746c07e8/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=acb3aa0949f846ee315568e34d5796fb746c07e8", "patch": "@@ -419,6 +419,74 @@ of a loop. Without a loop to break out of or continue in, no sensible action can\n be taken.\n \"##,\n \n+E0282: r##\"\n+This error indicates that type inference did not result in one unique possible\n+type, and extra information is required. In most cases this can be provided\n+by adding a type annotation. Sometimes you need to specify a generic type\n+parameter manually.\n+\n+A common example is the `collect` method on `Iterator`. It has a generic type\n+parameter with a `FromIterator` bound, which for a `char` iterator is\n+implemented by `Vec` and `String` among others. Consider the following snippet\n+that reverses the characters of a string:\n+\n+```\n+let x = \"hello\".chars().rev().collect();\n+```\n+\n+In this case, the compiler cannot infer what the type of `x` should be:\n+`Vec<char>` and `String` are both suitable candidates. To specify which type to\n+use, you can use a type annotation on `x`:\n+\n+```\n+let x: Vec<char> = \"hello\".chars().rev().collect();\n+```\n+\n+It is not necessary to annotate the full type. Once the ambiguity is resolved,\n+the compiler can infer the rest:\n+\n+```\n+let x: Vec<_> = \"hello\".chars().rev().collect();\n+```\n+\n+Another way to provide the compiler with enough information, is to specify the\n+generic type parameter:\n+\n+```\n+let x = \"hello\".chars().rev().collect::<Vec<char>>();\n+```\n+\n+Again, you need not specify the full type if the compiler can infer it:\n+\n+```\n+let x = \"hello\".chars().rev().collect::<Vec<_>>();\n+```\n+\n+Apart from a method or function with a generic type parameter, this error can\n+occur when a type parameter of a struct or trait cannot be inferred. In that\n+case it is not always possible to use a type annotation, because all candidates\n+have the same return type. For instance:\n+\n+```\n+struct Foo<T> {\n+    // Some fields omitted.\n+}\n+\n+impl<T> Foo<T> {\n+    fn bar() -> i32 {\n+        0\n+    }\n+\n+    fn baz() {\n+        let number = Foo::bar();\n+    }\n+}\n+```\n+\n+This will fail because the compiler does not know which instance of `Foo` to\n+call `bar` on. Change `Foo::bar()` to `Foo::<T>::bar()` to resolve the error.\n+\"##,\n+\n E0296: r##\"\n This error indicates that the given recursion limit could not be parsed. Ensure\n that the value provided is a positive integer between quotes, like so:\n@@ -524,10 +592,65 @@ number cannot be negative.\n E0307: r##\"\n The length of an array is part of its type. For this reason, this length must be\n a compile-time constant.\n+\"##,\n+\n+E0308: r##\"\n+This error occurs when the compiler was unable to infer the concrete type of a\n+variable. This error can occur for several cases, the most common of which is a\n+mismatch in the expected type that the compiler inferred for a variable's\n+initializing expression, and the actual type explicitly assigned to the\n+variable.\n+\n+For example:\n+\n+let x: i32 = \"I am not a number!\";\n+//     ~~~   ~~~~~~~~~~~~~~~~~~~~\n+//      |             |\n+//      |    initializing expression;\n+//      |    compiler infers type `&str`\n+//      |\n+//    type `i32` assigned to variable `x`\n+\"##,\n+\n+E0309: r##\"\n+Types in type definitions have lifetimes associated with them that represent\n+how long the data stored within them is guaranteed to be live. This lifetime\n+must be as long as the data needs to be alive, and missing the constraint that\n+denotes this will cause this error.\n+\n+// This won't compile because T is not constrained, meaning the data\n+// stored in it is not guaranteed to last as long as the reference\n+struct Foo<'a, T> {\n+    foo: &'a T\n+}\n+\n+// This will compile, because it has the constraint on the type parameter\n+struct Foo<'a, T: 'a> {\n+    foo: &'a T\n+}\n+\"##,\n+\n+E0310: r##\"\n+Types in type definitions have lifetimes associated with them that represent\n+how long the data stored within them is guaranteed to be live. This lifetime\n+must be as long as the data needs to be alive, and missing the constraint that\n+denotes this will cause this error.\n+\n+// This won't compile because T is not constrained to the static lifetime\n+// the reference needs\n+struct Foo<T> {\n+    foo: &'static T\n+}\n+\n+// This will compile, because it has the constraint on the type parameter\n+struct Foo<T: 'static> {\n+    foo: &'static T\n+}\n \"##\n \n }\n \n+\n register_diagnostics! {\n     E0011,\n     E0012,\n@@ -562,7 +685,6 @@ register_diagnostics! {\n     E0279, // requirement is not satisfied\n     E0280, // requirement is not satisfied\n     E0281, // type implements trait but other trait is required\n-    E0282, // unable to infer enough type information about\n     E0283, // cannot resolve type\n     E0284, // cannot resolve type\n     E0285, // overflow evaluation builtin bounds\n@@ -571,9 +693,6 @@ register_diagnostics! {\n     E0300, // unexpanded macro\n     E0304, // expected signed integer constant\n     E0305, // expected constant\n-    E0308,\n-    E0309, // thing may not live long enough\n-    E0310, // thing may not live long enough\n     E0311, // thing may not live long enough\n     E0312, // lifetime of reference outlives lifetime of borrowed content\n     E0313, // lifetime of borrowed pointer outlives lifetime of captured variable"}, {"sha": "e7a03a9b7e17439ea4a1557ea9e1c026897d88b4", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/acb3aa0949f846ee315568e34d5796fb746c07e8/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acb3aa0949f846ee315568e34d5796fb746c07e8/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=acb3aa0949f846ee315568e34d5796fb746c07e8", "patch": "@@ -374,7 +374,7 @@ fn extract_labels<'v, 'a>(ctxt: &mut LifetimeContext<'a>, b: &'v ast::Block) {\n         fn visit_expr(&mut self, ex: &'v ast::Expr) {\n             if let Some(label) = expression_label(ex) {\n                 for &(prior, prior_span) in &self.labels_in_fn[..] {\n-                    // FIXME (#24278): non-hygienic comparision\n+                    // FIXME (#24278): non-hygienic comparison\n                     if label.name == prior.name {\n                         signal_shadowing_problem(self.sess,\n                                                  label.name,\n@@ -420,7 +420,7 @@ fn extract_labels<'v, 'a>(ctxt: &mut LifetimeContext<'a>, b: &'v ast::Block) {\n                 EarlyScope(_, lifetimes, s) |\n                 LateScope(lifetimes, s) => {\n                     for lifetime_def in lifetimes {\n-                        // FIXME (#24278): non-hygienic comparision\n+                        // FIXME (#24278): non-hygienic comparison\n                         if label.name == lifetime_def.lifetime.name {\n                             signal_shadowing_problem(\n                                 sess,\n@@ -677,7 +677,7 @@ impl<'a> LifetimeContext<'a> {\n                                         lifetime: &ast::Lifetime)\n     {\n         for &(label, label_span) in &self.labels_in_fn {\n-            // FIXME (#24278): non-hygienic comparision\n+            // FIXME (#24278): non-hygienic comparison\n             if lifetime.name == label.name {\n                 signal_shadowing_problem(self.sess,\n                                          lifetime.name,"}, {"sha": "c2c4d60a4ff6eaa69d06d15d3c662a5b1e199b33", "filename": "src/librustc/middle/traits/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acb3aa0949f846ee315568e34d5796fb746c07e8/src%2Flibrustc%2Fmiddle%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acb3aa0949f846ee315568e34d5796fb746c07e8/src%2Flibrustc%2Fmiddle%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Ferror_reporting.rs?ref=acb3aa0949f846ee315568e34d5796fb746c07e8", "patch": "@@ -290,7 +290,7 @@ pub fn maybe_report_ambiguity<'a, 'tcx>(infcx: &InferCtxt<'a, 'tcx>,\n                     {\n                         span_err!(infcx.tcx.sess, obligation.cause.span, E0282,\n                                 \"unable to infer enough type information about `{}`; \\\n-                                 type annotations required\",\n+                                 type annotations or generic parameter binding required\",\n                                 self_ty.user_string(infcx.tcx));\n                     } else {\n                         span_err!(infcx.tcx.sess, obligation.cause.span, E0283,"}, {"sha": "d23543924dd397d6c82f9619315d53ad9e9a563f", "filename": "src/librustc_trans/trans/cleanup.rs", "status": "modified", "additions": 0, "deletions": 60, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/acb3aa0949f846ee315568e34d5796fb746c07e8/src%2Flibrustc_trans%2Ftrans%2Fcleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acb3aa0949f846ee315568e34d5796fb746c07e8/src%2Flibrustc_trans%2Ftrans%2Fcleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcleanup.rs?ref=acb3aa0949f846ee315568e34d5796fb746c07e8", "patch": "@@ -507,23 +507,6 @@ impl<'blk, 'tcx> CleanupMethods<'blk, 'tcx> for FunctionContext<'blk, 'tcx> {\n         self.schedule_clean(cleanup_scope, drop as CleanupObj);\n     }\n \n-    /// Schedules a call to `free(val)`. Note that this is a shallow operation.\n-    fn schedule_free_slice(&self,\n-                           cleanup_scope: ScopeId,\n-                           val: ValueRef,\n-                           size: ValueRef,\n-                           align: ValueRef,\n-                           heap: Heap) {\n-        let drop = box FreeSlice { ptr: val, size: size, align: align, heap: heap };\n-\n-        debug!(\"schedule_free_slice({:?}, val={}, heap={:?})\",\n-               cleanup_scope,\n-               self.ccx.tn().val_to_string(val),\n-               heap);\n-\n-        self.schedule_clean(cleanup_scope, drop as CleanupObj);\n-    }\n-\n     fn schedule_clean(&self,\n                       cleanup_scope: ScopeId,\n                       cleanup: CleanupObj<'tcx>) {\n@@ -1106,43 +1089,6 @@ impl<'tcx> Cleanup<'tcx> for FreeValue<'tcx> {\n     }\n }\n \n-#[derive(Copy, Clone)]\n-pub struct FreeSlice {\n-    ptr: ValueRef,\n-    size: ValueRef,\n-    align: ValueRef,\n-    heap: Heap,\n-}\n-\n-impl<'tcx> Cleanup<'tcx> for FreeSlice {\n-    fn must_unwind(&self) -> bool {\n-        true\n-    }\n-\n-    fn clean_on_unwind(&self) -> bool {\n-        true\n-    }\n-\n-    fn is_lifetime_end(&self) -> bool {\n-        false\n-    }\n-\n-    fn trans<'blk>(&self,\n-                   bcx: Block<'blk, 'tcx>,\n-                   debug_loc: DebugLoc)\n-                   -> Block<'blk, 'tcx> {\n-        match self.heap {\n-            HeapExchange => {\n-                glue::trans_exchange_free_dyn(bcx,\n-                                              self.ptr,\n-                                              self.size,\n-                                              self.align,\n-                                              debug_loc)\n-            }\n-        }\n-    }\n-}\n-\n #[derive(Copy, Clone)]\n pub struct LifetimeEnd {\n     ptr: ValueRef,\n@@ -1253,12 +1199,6 @@ pub trait CleanupMethods<'blk, 'tcx> {\n                            val: ValueRef,\n                            heap: Heap,\n                            content_ty: Ty<'tcx>);\n-    fn schedule_free_slice(&self,\n-                           cleanup_scope: ScopeId,\n-                           val: ValueRef,\n-                           size: ValueRef,\n-                           align: ValueRef,\n-                           heap: Heap);\n     fn schedule_clean(&self,\n                       cleanup_scope: ScopeId,\n                       cleanup: CleanupObj<'tcx>);"}, {"sha": "677254238c03498143cda5e658a8c1c22bb45b98", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acb3aa0949f846ee315568e34d5796fb746c07e8/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acb3aa0949f846ee315568e34d5796fb746c07e8/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=acb3aa0949f846ee315568e34d5796fb746c07e8", "patch": "@@ -1344,7 +1344,7 @@ pub fn ast_ty_arg_to_ty<'tcx>(this: &AstConv<'tcx>,\n }\n \n // Check the base def in a PathResolution and convert it to a Ty. If there are\n-// associated types in the PathResolution, these will need to be seperately\n+// associated types in the PathResolution, these will need to be separately\n // resolved.\n fn base_def_to_ty<'tcx>(this: &AstConv<'tcx>,\n                         rscope: &RegionScope,"}, {"sha": "444e5dea89a46c2079cabfe59d684d16e397bb08", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acb3aa0949f846ee315568e34d5796fb746c07e8/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acb3aa0949f846ee315568e34d5796fb746c07e8/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=acb3aa0949f846ee315568e34d5796fb746c07e8", "patch": "@@ -944,7 +944,7 @@ impl<'a, 'tcx> Clean<Generics> for (&'a ty::Generics<'tcx>,\n         // a Sized bound, removing the bounds as we find them.\n         //\n         // Note that associated types also have a sized bound by default, but we\n-        // don't actually konw the set of associated types right here so that's\n+        // don't actually know the set of associated types right here so that's\n         // handled in cleaning associated types\n         let mut sized_params = HashSet::new();\n         where_predicates.retain(|pred| {"}, {"sha": "798cc6a612cde239ce60be7f158839e549bbdaab", "filename": "src/librustdoc/html/layout.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/acb3aa0949f846ee315568e34d5796fb746c07e8/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acb3aa0949f846ee315568e34d5796fb746c07e8/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Flayout.rs?ref=acb3aa0949f846ee315568e34d5796fb746c07e8", "patch": "@@ -111,6 +111,10 @@ r##\"<!DOCTYPE html>\n                 <code>trait</code>, <code>typedef</code> (or\n                 <code>tdef</code>).\n             </p>\n+            <p>\n+                Search functions by type signature (e.g.\n+                <code>vec -> usize</code>)\n+            </p>\n         </div>\n     </div>\n "}, {"sha": "6f3c0fd63aa6da6c64551e43ab3ae4167a5f0284", "filename": "src/libstd/sys/unix/process2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acb3aa0949f846ee315568e34d5796fb746c07e8/src%2Flibstd%2Fsys%2Funix%2Fprocess2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acb3aa0949f846ee315568e34d5796fb746c07e8/src%2Flibstd%2Fsys%2Funix%2Fprocess2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess2.rs?ref=acb3aa0949f846ee315568e34d5796fb746c07e8", "patch": "@@ -328,7 +328,7 @@ impl Process {\n         }) {\n             Ok(0) => None,\n             Ok(n) if n == self.pid => Some(translate_status(status)),\n-            Ok(n) => panic!(\"unkown pid: {}\", n),\n+            Ok(n) => panic!(\"unknown pid: {}\", n),\n             Err(e) => panic!(\"unknown waitpid error: {}\", e),\n         }\n     }"}, {"sha": "51f9de8edf057541e005040ad6da030a998070b9", "filename": "src/rt/valgrind/valgrind.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acb3aa0949f846ee315568e34d5796fb746c07e8/src%2Frt%2Fvalgrind%2Fvalgrind.h", "raw_url": "https://github.com/rust-lang/rust/raw/acb3aa0949f846ee315568e34d5796fb746c07e8/src%2Frt%2Fvalgrind%2Fvalgrind.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fvalgrind%2Fvalgrind.h?ref=acb3aa0949f846ee315568e34d5796fb746c07e8", "patch": "@@ -5122,7 +5122,7 @@ VALGRIND_PRINTF_BACKTRACE(const char *format, ...)\n \n \n /* These requests allow control to move from the simulated CPU to the\n-   real CPU, calling an arbitary function.\n+   real CPU, calling an arbitrary function.\n \n    Note that the current ThreadId is inserted as the first argument.\n    So this call:"}, {"sha": "5322966ae2ea0544a78d19a242c8d592a74187d2", "filename": "src/test/compile-fail/issue-12187-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/acb3aa0949f846ee315568e34d5796fb746c07e8/src%2Ftest%2Fcompile-fail%2Fissue-12187-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acb3aa0949f846ee315568e34d5796fb746c07e8/src%2Ftest%2Fcompile-fail%2Fissue-12187-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-12187-1.rs?ref=acb3aa0949f846ee315568e34d5796fb746c07e8", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2014-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -14,5 +14,5 @@ fn new<T>() -> &'static T {\n \n fn main() {\n     let &v = new();\n-    //~^ ERROR type annotations required\n+    //~^ ERROR type annotations or generic parameter binding required\n }"}, {"sha": "dabc0acba370e07a4344f577306d9752f6fcbf22", "filename": "src/test/compile-fail/issue-12187-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/acb3aa0949f846ee315568e34d5796fb746c07e8/src%2Ftest%2Fcompile-fail%2Fissue-12187-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acb3aa0949f846ee315568e34d5796fb746c07e8/src%2Ftest%2Fcompile-fail%2Fissue-12187-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-12187-2.rs?ref=acb3aa0949f846ee315568e34d5796fb746c07e8", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2014-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -14,5 +14,5 @@ fn new<'r, T>() -> &'r T {\n \n fn main() {\n     let &v = new();\n-    //~^ ERROR type annotations required\n+    //~^ ERROR type annotations or generic parameter binding required\n }"}, {"sha": "392d38a6144f19d5364d12ec0363d41881d8d44e", "filename": "src/test/compile-fail/issue-5062.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/acb3aa0949f846ee315568e34d5796fb746c07e8/src%2Ftest%2Fcompile-fail%2Fissue-5062.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acb3aa0949f846ee315568e34d5796fb746c07e8/src%2Ftest%2Fcompile-fail%2Fissue-5062.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5062.rs?ref=acb3aa0949f846ee315568e34d5796fb746c07e8", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2013-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -9,4 +9,4 @@\n // except according to those terms.\n \n fn main() { format!(\"{:?}\", None); }\n-    //~^ ERROR type annotations required\n+    //~^ ERROR type annotations or generic parameter binding required"}, {"sha": "acf1d766b6a11a65107d768ba7ee1e094b32e1e7", "filename": "src/test/compile-fail/issue-6458-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/acb3aa0949f846ee315568e34d5796fb746c07e8/src%2Ftest%2Fcompile-fail%2Fissue-6458-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acb3aa0949f846ee315568e34d5796fb746c07e8/src%2Ftest%2Fcompile-fail%2Fissue-6458-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-6458-2.rs?ref=acb3aa0949f846ee315568e34d5796fb746c07e8", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2013-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -11,5 +11,5 @@\n fn main() {\n     // Unconstrained type:\n     format!(\"{:?}\", None);\n-    //~^ ERROR type annotations required\n+    //~^ ERROR type annotations or generic parameter binding required\n }"}, {"sha": "3f81e51efe2ef40badd39877f31a4780da6a7b9a", "filename": "src/test/compile-fail/issue-6458-3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/acb3aa0949f846ee315568e34d5796fb746c07e8/src%2Ftest%2Fcompile-fail%2Fissue-6458-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acb3aa0949f846ee315568e34d5796fb746c07e8/src%2Ftest%2Fcompile-fail%2Fissue-6458-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-6458-3.rs?ref=acb3aa0949f846ee315568e34d5796fb746c07e8", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2013-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -12,5 +12,5 @@ use std::mem;\n \n fn main() {\n     mem::transmute(0);\n-    //~^ ERROR type annotations required\n+    //~^ ERROR type annotations or generic parameter binding required\n }"}, {"sha": "7f408be9c02d4c77dc3c9da9b97371b254748c1a", "filename": "src/test/compile-fail/issue-6458-4.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/acb3aa0949f846ee315568e34d5796fb746c07e8/src%2Ftest%2Fcompile-fail%2Fissue-6458-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acb3aa0949f846ee315568e34d5796fb746c07e8/src%2Ftest%2Fcompile-fail%2Fissue-6458-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-6458-4.rs?ref=acb3aa0949f846ee315568e34d5796fb746c07e8", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2013-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -10,7 +10,7 @@\n \n fn foo(b: bool) -> Result<bool,String> {\n     Err(\"bar\".to_string());\n-    //~^ ERROR type annotations required\n+    //~^ ERROR type annotations or generic parameter binding required\n }\n \n fn main() {"}, {"sha": "c1f9dd6a4b8935a501acc71b898a311694592130", "filename": "src/test/compile-fail/issue-6458.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/acb3aa0949f846ee315568e34d5796fb746c07e8/src%2Ftest%2Fcompile-fail%2Fissue-6458.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acb3aa0949f846ee315568e34d5796fb746c07e8/src%2Ftest%2Fcompile-fail%2Fissue-6458.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-6458.rs?ref=acb3aa0949f846ee315568e34d5796fb746c07e8", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2013-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -16,7 +16,8 @@ pub struct MyState;\n pub fn foo<State>(_: TypeWithState<State>) {}\n \n pub fn bar() {\n-   foo(TypeWithState(marker::PhantomData));  //~ ERROR type annotations required\n+   foo(TypeWithState(marker::PhantomData));\n+   //~^ ERROR type annotations or generic parameter binding required\n }\n \n fn main() {"}, {"sha": "327fb6adf1d54f20374bff64a5e94c733c316003", "filename": "src/test/compile-fail/issue-7813.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/acb3aa0949f846ee315568e34d5796fb746c07e8/src%2Ftest%2Fcompile-fail%2Fissue-7813.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acb3aa0949f846ee315568e34d5796fb746c07e8/src%2Ftest%2Fcompile-fail%2Fissue-7813.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7813.rs?ref=acb3aa0949f846ee315568e34d5796fb746c07e8", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2014-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -10,5 +10,5 @@\n \n fn main() {\n     let v = &[];\n-    let it = v.iter(); //~ ERROR type annotations required\n+    let it = v.iter(); //~ ERROR type annotations or generic parameter binding required\n }"}, {"sha": "59d75c5a787a6ec3815c66ee7473c8b776349f54", "filename": "src/test/compile-fail/method-ambig-one-trait-unknown-int-type.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/acb3aa0949f846ee315568e34d5796fb746c07e8/src%2Ftest%2Fcompile-fail%2Fmethod-ambig-one-trait-unknown-int-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acb3aa0949f846ee315568e34d5796fb746c07e8/src%2Ftest%2Fcompile-fail%2Fmethod-ambig-one-trait-unknown-int-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmethod-ambig-one-trait-unknown-int-type.rs?ref=acb3aa0949f846ee315568e34d5796fb746c07e8", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -31,7 +31,8 @@ impl foo for Vec<isize> {\n \n fn m1() {\n     // we couldn't infer the type of the vector just based on calling foo()...\n-    let mut x = Vec::new(); //~ ERROR type annotations required\n+    let mut x = Vec::new();\n+    //~^ ERROR type annotations or generic parameter binding required\n     x.foo();\n }\n "}, {"sha": "c77494912bc751fc1715fb9de7544bffe274131b", "filename": "src/test/compile-fail/traits-multidispatch-convert-ambig-dest.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/acb3aa0949f846ee315568e34d5796fb746c07e8/src%2Ftest%2Fcompile-fail%2Ftraits-multidispatch-convert-ambig-dest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acb3aa0949f846ee315568e34d5796fb746c07e8/src%2Ftest%2Fcompile-fail%2Ftraits-multidispatch-convert-ambig-dest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftraits-multidispatch-convert-ambig-dest.rs?ref=acb3aa0949f846ee315568e34d5796fb746c07e8", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2014-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -33,7 +33,8 @@ where T : Convert<U>\n }\n \n fn a() {\n-    test(22, std::default::Default::default()); //~ ERROR type annotations required\n+    test(22, std::default::Default::default());\n+    //~^ ERROR type annotations or generic parameter binding required\n }\n \n fn main() {}"}, {"sha": "c14de98e03f14ab6b7bfc3539c8888cb06e750d2", "filename": "src/test/compile-fail/unconstrained-none.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/acb3aa0949f846ee315568e34d5796fb746c07e8/src%2Ftest%2Fcompile-fail%2Funconstrained-none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acb3aa0949f846ee315568e34d5796fb746c07e8/src%2Ftest%2Fcompile-fail%2Funconstrained-none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funconstrained-none.rs?ref=acb3aa0949f846ee315568e34d5796fb746c07e8", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2013-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -11,5 +11,5 @@\n // Issue #5062\n \n fn main() {\n-    None; //~ ERROR type annotations required\n+    None; //~ ERROR type annotations or generic parameter binding required\n }"}, {"sha": "02a3f2b9ab8d28ad31faceed2344b574ade04563", "filename": "src/test/compile-fail/unconstrained-ref.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/acb3aa0949f846ee315568e34d5796fb746c07e8/src%2Ftest%2Fcompile-fail%2Funconstrained-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acb3aa0949f846ee315568e34d5796fb746c07e8/src%2Ftest%2Fcompile-fail%2Funconstrained-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funconstrained-ref.rs?ref=acb3aa0949f846ee315568e34d5796fb746c07e8", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -13,5 +13,5 @@ struct S<'a, T:'a> {\n }\n \n fn main() {\n-    S { o: &None }; //~ ERROR type annotations required\n+    S { o: &None }; //~ ERROR type annotations or generic parameter binding required\n }"}, {"sha": "419b8c4e1b0151847753672e2b21eba3ee067309", "filename": "src/test/compile-fail/vector-no-ann.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/acb3aa0949f846ee315568e34d5796fb746c07e8/src%2Ftest%2Fcompile-fail%2Fvector-no-ann.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acb3aa0949f846ee315568e34d5796fb746c07e8/src%2Ftest%2Fcompile-fail%2Fvector-no-ann.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvector-no-ann.rs?ref=acb3aa0949f846ee315568e34d5796fb746c07e8", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -10,5 +10,6 @@\n \n \n fn main() {\n-    let _foo = Vec::new(); //~ ERROR type annotations required\n+    let _foo = Vec::new();\n+    //~^ ERROR type annotations or generic parameter binding required\n }"}, {"sha": "d5b799710941bdb9a5c6aaf4e1e872fd46b9386c", "filename": "src/test/run-pass/issue-20616.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acb3aa0949f846ee315568e34d5796fb746c07e8/src%2Ftest%2Frun-pass%2Fissue-20616.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acb3aa0949f846ee315568e34d5796fb746c07e8/src%2Ftest%2Frun-pass%2Fissue-20616.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-20616.rs?ref=acb3aa0949f846ee315568e34d5796fb746c07e8", "patch": "@@ -32,7 +32,7 @@ type TypeF<T> = Box<T>;\n // type argument with trailing comma\n type TypeG<T> = Box<T,>;\n \n-// trailing comma on liftime defs\n+// trailing comma on lifetime defs\n type TypeH<'a,> = &'a ();\n \n // trailing comma on type argument"}]}