{"sha": "a3f8fd71df0e09b6cd161a7e7df78c67bb47d329", "node_id": "C_kwDOAAsO6NoAKGEzZjhmZDcxZGYwZTA5YjZjZDE2MWE3ZTdkZjc4YzY3YmI0N2QzMjk", "commit": {"author": {"name": "Kartavya Vashishtha", "email": "sendtokartavya@gmail.com", "date": "2022-11-19T09:30:25Z"}, "committer": {"name": "Kartavya Vashishtha", "email": "sendtokartavya@gmail.com", "date": "2022-11-19T09:30:25Z"}, "message": "fix: format expression parsing edge-cases\n\nhandle positional arg with formatting\n\nhandle indexed positional args", "tree": {"sha": "3d7b15b9b0d3a831c57e1b4e203d2d8e0824f10e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d7b15b9b0d3a831c57e1b4e203d2d8e0824f10e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a3f8fd71df0e09b6cd161a7e7df78c67bb47d329", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE+fRQYdEX7Emd36W/pQASwjJOXfAFAmN4ojEACgkQpQASwjJO\nXfAjDhAAsia1A+oCelljNv0/hMNEYHVd0dFdma1Pwe9NnZ/6Aaq6GkAogk//2SON\nHeLHLna5wYLfRTd20jPghjYfv3xnQ4qsFz7b9O16doexTFAjBKw5SCBV5cK56MKz\nToJ3h5f+D3t3Nb0OqcSLqy1XvUTAyl/6chLBadWR13apKb3+h0vZM1hjZPEnh5SM\nC7AIAvT2UxV0/m1gV24Ci0aVCr8b2V5L1q1eYedIcOJhezpAoaqFvbkKGR7eTbqo\nvRgvnHjGkconZoOFVpGNO+HjAAqnTwJ7BYoGTpJyc/xbnEYMuxtoweaQ44sIoxZp\nXD2Ywd+zWLHxuS/+VKd9akY5v/eYg0qTOncc7Q/P6QnZIjG1oCtxgpBmBIr1npei\nM+4pf0APoJKlgJmX96ViNdk8z493CxKulY4VR1x/blV+9DtSIk3yNfWeSaVEmX9T\nTNQScSesJb/cJeo4hLCRo+03EA31kO+NVOY0VYhlC49bb55Dxst7YYjbKPDHQEjD\n3iX9Q0lens54YmUfsk1+BUcQzQOpwP9kh+Qmd27fUyO7UyebeR37TjN6LQjsfQAE\nPzKIrxMNuZA0hQ8yy5+lWhFXCIZN+WmpOvN/8DSC14NQGoUtKeLI6LH6PnwVdydh\n8vebnDW4aBY+GWMYJOXBFIZqM6kU58/iaiDIBT4c/jIHMVBfNQA=\n=lE+8\n-----END PGP SIGNATURE-----", "payload": "tree 3d7b15b9b0d3a831c57e1b4e203d2d8e0824f10e\nparent 791cb87cdf47ddfd2a2b1a726dab3aa66ec2bff3\nauthor Kartavya Vashishtha <sendtokartavya@gmail.com> 1668850225 +0530\ncommitter Kartavya Vashishtha <sendtokartavya@gmail.com> 1668850225 +0530\n\nfix: format expression parsing edge-cases\n\nhandle positional arg with formatting\n\nhandle indexed positional args\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a3f8fd71df0e09b6cd161a7e7df78c67bb47d329", "html_url": "https://github.com/rust-lang/rust/commit/a3f8fd71df0e09b6cd161a7e7df78c67bb47d329", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a3f8fd71df0e09b6cd161a7e7df78c67bb47d329/comments", "author": {"login": "DesmondWillowbrook", "id": 51814158, "node_id": "MDQ6VXNlcjUxODE0MTU4", "avatar_url": "https://avatars.githubusercontent.com/u/51814158?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DesmondWillowbrook", "html_url": "https://github.com/DesmondWillowbrook", "followers_url": "https://api.github.com/users/DesmondWillowbrook/followers", "following_url": "https://api.github.com/users/DesmondWillowbrook/following{/other_user}", "gists_url": "https://api.github.com/users/DesmondWillowbrook/gists{/gist_id}", "starred_url": "https://api.github.com/users/DesmondWillowbrook/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DesmondWillowbrook/subscriptions", "organizations_url": "https://api.github.com/users/DesmondWillowbrook/orgs", "repos_url": "https://api.github.com/users/DesmondWillowbrook/repos", "events_url": "https://api.github.com/users/DesmondWillowbrook/events{/privacy}", "received_events_url": "https://api.github.com/users/DesmondWillowbrook/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DesmondWillowbrook", "id": 51814158, "node_id": "MDQ6VXNlcjUxODE0MTU4", "avatar_url": "https://avatars.githubusercontent.com/u/51814158?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DesmondWillowbrook", "html_url": "https://github.com/DesmondWillowbrook", "followers_url": "https://api.github.com/users/DesmondWillowbrook/followers", "following_url": "https://api.github.com/users/DesmondWillowbrook/following{/other_user}", "gists_url": "https://api.github.com/users/DesmondWillowbrook/gists{/gist_id}", "starred_url": "https://api.github.com/users/DesmondWillowbrook/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DesmondWillowbrook/subscriptions", "organizations_url": "https://api.github.com/users/DesmondWillowbrook/orgs", "repos_url": "https://api.github.com/users/DesmondWillowbrook/repos", "events_url": "https://api.github.com/users/DesmondWillowbrook/events{/privacy}", "received_events_url": "https://api.github.com/users/DesmondWillowbrook/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "791cb87cdf47ddfd2a2b1a726dab3aa66ec2bff3", "url": "https://api.github.com/repos/rust-lang/rust/commits/791cb87cdf47ddfd2a2b1a726dab3aa66ec2bff3", "html_url": "https://github.com/rust-lang/rust/commit/791cb87cdf47ddfd2a2b1a726dab3aa66ec2bff3"}], "stats": {"total": 68, "additions": 34, "deletions": 34}, "files": [{"sha": "11db6ae7f7b811825d59fd8b08c6e872c179195a", "filename": "crates/ide-assists/src/handlers/move_format_string_arg.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a3f8fd71df0e09b6cd161a7e7df78c67bb47d329/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fmove_format_string_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f8fd71df0e09b6cd161a7e7df78c67bb47d329/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fmove_format_string_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fmove_format_string_arg.rs?ref=a3f8fd71df0e09b6cd161a7e7df78c67bb47d329", "patch": "@@ -92,7 +92,7 @@ pub(crate) fn move_format_string_arg(acc: &mut Assists, ctx: &AssistContext<'_>)\n                         NodeOrToken::Node(n) => {\n                             format_to!(current_arg, \"{n}\");\n                         },\n-                        NodeOrToken::Token(t) if t.kind() == COMMA=> {\n+                        NodeOrToken::Token(t) if t.kind() == COMMA => {\n                             existing_args.push(current_arg.trim().into());\n                             current_arg.clear();\n                         },\n@@ -238,14 +238,14 @@ fn main() {\n             &add_macro_decl(\n                 r#\"\n fn main() {\n-    print!(\"{} {x + 1:b} {Struct(1, 2)}$0\", 1);\n+    print!(\"{:b} {x + 1:b} {Struct(1, 2)}$0\", 1);\n }\n \"#,\n             ),\n             &add_macro_decl(\n                 r#\"\n fn main() {\n-    print!(\"{} {:b} {}\"$0, 1, x + 1, Struct(1, 2));\n+    print!(\"{:b} {:b} {}\"$0, 1, x + 1, Struct(1, 2));\n }\n \"#,\n             ),"}, {"sha": "c3b7bb27d88bb4b879ffed0985eff428e7ea5398", "filename": "crates/ide-db/src/syntax_helpers/format_string_exprs.rs", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/a3f8fd71df0e09b6cd161a7e7df78c67bb47d329/crates%2Fide-db%2Fsrc%2Fsyntax_helpers%2Fformat_string_exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3f8fd71df0e09b6cd161a7e7df78c67bb47d329/crates%2Fide-db%2Fsrc%2Fsyntax_helpers%2Fformat_string_exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fsyntax_helpers%2Fformat_string_exprs.rs?ref=a3f8fd71df0e09b6cd161a7e7df78c67bb47d329", "patch": "@@ -103,7 +103,12 @@ pub fn parse_format_exprs(input: &str) -> Result<(String, Vec<Arg>), ()> {\n                 output.push(chr);\n                 extracted_expressions.push(Arg::Placeholder);\n                 state = State::NotArg;\n-            }\n+            },\n+            (State::MaybeArg, ':') => {\n+                output.push(chr);\n+                extracted_expressions.push(Arg::Placeholder);\n+                state = State::FormatOpts;\n+            },\n             (State::MaybeArg, _) => {\n                 if matches!(chr, '\\\\' | '$') {\n                     current_expr.push('\\\\');\n@@ -117,49 +122,40 @@ pub fn parse_format_exprs(input: &str) -> Result<(String, Vec<Arg>), ()> {\n                 } else {\n                     state = State::Expr;\n                 }\n-            }\n-            (State::Ident | State::Expr, '}') => {\n-                if inexpr_open_count == 0 {\n-                    output.push(chr);\n-\n-                    if matches!(state, State::Expr) {\n-                        extracted_expressions.push(Arg::Expr(current_expr.trim().into()));\n-                    } else {\n-                        extracted_expressions.push(Arg::Ident(current_expr.trim().into()));\n-                    }\n-\n-                    current_expr = String::new();\n-                    state = State::NotArg;\n-                } else {\n-                    // We're closing one brace met before inside of the expression.\n-                    current_expr.push(chr);\n-                    inexpr_open_count -= 1;\n-                }\n-            }\n+            },\n             (State::Ident | State::Expr, ':') if matches!(chars.peek(), Some(':')) => {\n                 // path separator\n                 state = State::Expr;\n                 current_expr.push_str(\"::\");\n                 chars.next();\n-            }\n-            (State::Ident | State::Expr, ':') => {\n+            },\n+            (State::Ident | State::Expr, ':' | '}') => {\n                 if inexpr_open_count == 0 {\n-                    // We're outside of braces, thus assume that it's a specifier, like \"{Some(value):?}\"\n-                    output.push(chr);\n+                    let trimmed = current_expr.trim();\n \n-                    if matches!(state, State::Expr) {\n-                        extracted_expressions.push(Arg::Expr(current_expr.trim().into()));\n+                    // if the expression consists of a single number, like \"0\" or \"12\", it can refer to\n+                    // format args in the order they are specified.\n+                    // see: https://doc.rust-lang.org/std/fmt/#positional-parameters\n+                    if trimmed.chars().fold(true, |only_num, c| c.is_ascii_digit() && only_num) {\n+                        output.push_str(trimmed);\n+                    } else if matches!(state, State::Expr) {\n+                        extracted_expressions.push(Arg::Expr(trimmed.into()));\n                     } else {\n-                        extracted_expressions.push(Arg::Ident(current_expr.trim().into()));\n+                        extracted_expressions.push(Arg::Ident(trimmed.into()));\n                     }\n \n-                    current_expr = String::new();\n-                    state = State::FormatOpts;\n-                } else {\n+                    output.push(chr);\n+                    current_expr.clear();\n+                    state = if chr == ':' {State::FormatOpts} else if chr == '}' {State::NotArg} else {unreachable!()};\n+                } else if chr == '}' {\n+                    // We're closing one brace met before inside of the expression.\n+                    current_expr.push(chr);\n+                    inexpr_open_count -= 1;\n+                } else if chr == ':' {\n                     // We're inside of braced expression, assume that it's a struct field name/value delimiter.\n                     current_expr.push(chr);\n                 }\n-            }\n+            },\n             (State::Ident | State::Expr, '{') => {\n                 state = State::Expr;\n                 current_expr.push(chr);\n@@ -219,6 +215,10 @@ mod tests {\n             (\"{expr} is {2 + 2}\", expect![[\"{} is {}; expr, 2 + 2\"]]),\n             (\"{expr:?}\", expect![[\"{:?}; expr\"]]),\n             (\"{expr:1$}\", expect![[r\"{:1\\$}; expr\"]]),\n+            (\"{:1$}\", expect![[r\"{:1\\$}; $1\"]]),\n+            (\"{:>padding$}\", expect![[r\"{:>padding\\$}; $1\"]]),\n+            (\"{}, {}, {0}\", expect![[r\"{}, {}, {0}; $1, $2\"]]),\n+            (\"{}, {}, {0:b}\", expect![[r\"{}, {}, {0:b}; $1, $2\"]]),\n             (\"{$0}\", expect![[r\"{}; \\$0\"]]),\n             (\"{malformed\", expect![[\"-\"]]),\n             (\"malformed}\", expect![[\"-\"]]),"}]}