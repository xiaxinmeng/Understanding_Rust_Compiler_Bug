{"sha": "fabbd4e8630ca1087fb69dca978ab7916d2d1adf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhYmJkNGU4NjMwY2ExMDg3ZmI2OWRjYTk3OGFiNzkxNmQyZDFhZGY=", "commit": {"author": {"name": "Alexis Beingessner", "email": "a.beingessner@gmail.com", "date": "2015-06-19T22:41:39Z"}, "committer": {"name": "Alexis Beingessner", "email": "a.beingessner@gmail.com", "date": "2015-06-19T22:41:39Z"}, "message": "progress", "tree": {"sha": "6c884bec369cf8c7b7b0a803b385fcd8690c3a6a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c884bec369cf8c7b7b0a803b385fcd8690c3a6a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fabbd4e8630ca1087fb69dca978ab7916d2d1adf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fabbd4e8630ca1087fb69dca978ab7916d2d1adf", "html_url": "https://github.com/rust-lang/rust/commit/fabbd4e8630ca1087fb69dca978ab7916d2d1adf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fabbd4e8630ca1087fb69dca978ab7916d2d1adf/comments", "author": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3c9d9140530a9709449fd32e830bf88f567845c", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3c9d9140530a9709449fd32e830bf88f567845c", "html_url": "https://github.com/rust-lang/rust/commit/c3c9d9140530a9709449fd32e830bf88f567845c"}], "stats": {"total": 58, "additions": 47, "deletions": 11}, "files": [{"sha": "159a3b00074f1cbcc63cc058966ea7f3dd134898", "filename": "lifetimes.md", "status": "modified", "additions": 47, "deletions": 11, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/fabbd4e8630ca1087fb69dca978ab7916d2d1adf/lifetimes.md", "raw_url": "https://github.com/rust-lang/rust/raw/fabbd4e8630ca1087fb69dca978ab7916d2d1adf/lifetimes.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lifetimes.md?ref=fabbd4e8630ca1087fb69dca978ab7916d2d1adf", "patch": "@@ -474,16 +474,9 @@ struct Foo<'a, 'b, A, B, C, D, E, F, G, H> {\n \n \n \n-\n-## Dropck\n-\n-TODO\n-\n-\n ## PhantomData\n \n-\n-However when working with unsafe code, we can often end up in a situation where\n+When working with unsafe code, we can often end up in a situation where\n types or lifetimes are logically associated with a struct, but not actually\n part of a field. This most commonly occurs with lifetimes. For instance, the `Iter`\n for `&'a [T]` is (approximately) defined as follows:\n@@ -498,7 +491,8 @@ pub struct Iter<'a, T: 'a> {\n However because `'a` is unused within the struct's body, it's *unbound*.\n Because of the troubles this has historically caused, unbound lifetimes and\n types are *illegal* in struct definitions. Therefore we must somehow refer\n-to these types in the body.\n+to these types in the body. Correctly doing this is necessary to have\n+correct variance and drop checking.\n \n We do this using *PhantomData*, which is a special marker type. PhantomData\n consumes no space, but simulates a field of the given type for the purpose of\n@@ -516,8 +510,50 @@ pub struct Iter<'a, T: 'a> {\n }\n ```\n \n-However PhantomData is also necessary to signal important information to\n-*dropck*. (TODO)\n+\n+\n+\n+## Dropck\n+\n+When a type is going out of scope, Rust will try to Drop it. Drop executes\n+arbitrary code, and in fact allows us to \"smuggle\" arbitrary code execution\n+into many places. As such additional soundness checks (dropck) are necessary to\n+ensure that a type T can be safely instantiated and dropped. It turns out that we\n+*really* don't need to care about dropck in practice, as it often \"just works\".\n+\n+However the one exception is with PhantomData. Given a struct like Vec:\n+\n+```\n+struct Vec<T> {\n+    data: *const T, // *const for covariance!\n+    len: usize,\n+    cap: usize,\n+}\n+```\n+\n+dropck will generously determine that Vec<T> does not contain any values of\n+type T. This will unfortunately allow people to construct unsound Drop\n+implementations that access data that has already been dropped. In order to\n+tell dropck that we *do* own values of type T and may call destructors of that\n+type, we must add extra PhantomData:\n+\n+```\n+struct Vec<T> {\n+    data: *const T, // *const for covariance!\n+    len: usize,\n+    cap: usize,\n+    _marker: marker::PhantomData<T>,\n+}\n+```\n+\n+Raw pointers that own an allocation is such a pervasive pattern that the\n+standard library made a utility for itself called `Unique<T>` which:\n+\n+* wraps a `*const T`,\n+* includes a PhantomData<T>,\n+* auto-derives Send/Sync as if T was contained\n+* marks the pointer as NonZero for the null-pointer optimization\n+\n \n \n "}]}