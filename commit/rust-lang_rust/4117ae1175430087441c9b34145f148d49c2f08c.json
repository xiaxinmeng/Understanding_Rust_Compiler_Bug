{"sha": "4117ae1175430087441c9b34145f148d49c2f08c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxMTdhZTExNzU0MzAwODc0NDFjOWIzNDE0NWYxNDhkNDljMmYwOGM=", "commit": {"author": {"name": "Eduardo Broto", "email": "ebroto@tutanota.com", "date": "2020-09-21T13:32:26Z"}, "committer": {"name": "Eduardo Broto", "email": "ebroto@tutanota.com", "date": "2020-09-21T13:32:26Z"}, "message": "Split redundant_pattern_matching tests\n\nThis is to avoid the 200 lines stderr file limit", "tree": {"sha": "3903755e869fcfc733b0b48f433fcc23f6f296cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3903755e869fcfc733b0b48f433fcc23f6f296cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4117ae1175430087441c9b34145f148d49c2f08c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4117ae1175430087441c9b34145f148d49c2f08c", "html_url": "https://github.com/rust-lang/rust/commit/4117ae1175430087441c9b34145f148d49c2f08c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4117ae1175430087441c9b34145f148d49c2f08c/comments", "author": {"login": "ebroto", "id": 816908, "node_id": "MDQ6VXNlcjgxNjkwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/816908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebroto", "html_url": "https://github.com/ebroto", "followers_url": "https://api.github.com/users/ebroto/followers", "following_url": "https://api.github.com/users/ebroto/following{/other_user}", "gists_url": "https://api.github.com/users/ebroto/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebroto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebroto/subscriptions", "organizations_url": "https://api.github.com/users/ebroto/orgs", "repos_url": "https://api.github.com/users/ebroto/repos", "events_url": "https://api.github.com/users/ebroto/events{/privacy}", "received_events_url": "https://api.github.com/users/ebroto/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ebroto", "id": 816908, "node_id": "MDQ6VXNlcjgxNjkwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/816908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebroto", "html_url": "https://github.com/ebroto", "followers_url": "https://api.github.com/users/ebroto/followers", "following_url": "https://api.github.com/users/ebroto/following{/other_user}", "gists_url": "https://api.github.com/users/ebroto/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebroto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebroto/subscriptions", "organizations_url": "https://api.github.com/users/ebroto/orgs", "repos_url": "https://api.github.com/users/ebroto/repos", "events_url": "https://api.github.com/users/ebroto/events{/privacy}", "received_events_url": "https://api.github.com/users/ebroto/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e072475781460d466a67617d6a622fddb678e21", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e072475781460d466a67617d6a622fddb678e21", "html_url": "https://github.com/rust-lang/rust/commit/6e072475781460d466a67617d6a622fddb678e21"}], "stats": {"total": 650, "additions": 351, "deletions": 299}, "files": [{"sha": "17d908336d5934f7418020ee19fd244e02256198", "filename": "tests/ui/redundant_pattern_matching.fixed", "status": "modified", "additions": 5, "deletions": 66, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/4117ae1175430087441c9b34145f148d49c2f08c/tests%2Fui%2Fredundant_pattern_matching.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4117ae1175430087441c9b34145f148d49c2f08c/tests%2Fui%2Fredundant_pattern_matching.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching.fixed?ref=4117ae1175430087441c9b34145f148d49c2f08c", "patch": "@@ -18,39 +18,14 @@ fn main() {\n \n     if Err::<i32, i32>(42).is_err() {}\n \n-    if None::<()>.is_none() {}\n-\n-    if Some(42).is_some() {}\n-\n-    if Some(42).is_some() {\n-        foo();\n-    } else {\n-        bar();\n-    }\n-\n-    while Some(42).is_some() {}\n-\n-    while Some(42).is_none() {}\n-\n-    while None::<()>.is_none() {}\n-\n     while Ok::<i32, i32>(10).is_ok() {}\n \n     while Ok::<i32, i32>(10).is_err() {}\n \n-    let mut v = vec![1, 2, 3];\n-    while v.pop().is_some() {\n-        foo();\n-    }\n-\n     if Ok::<i32, i32>(42).is_ok() {}\n \n     if Err::<i32, i32>(42).is_err() {}\n \n-    if None::<i32>.is_none() {}\n-\n-    if Some(42).is_some() {}\n-\n     if let Ok(x) = Ok::<i32, i32>(42) {\n         println!(\"{}\", x);\n     }\n@@ -63,48 +38,24 @@ fn main() {\n \n     Err::<i32, i32>(42).is_ok();\n \n-    Some(42).is_some();\n-\n-    None::<()>.is_none();\n-\n-    let _ = None::<()>.is_none();\n-\n     let _ = if Ok::<usize, ()>(4).is_ok() { true } else { false };\n \n-    let opt = Some(false);\n-    let x = if opt.is_some() { true } else { false };\n-    takes_bool(x);\n-\n     issue5504();\n     issue6067();\n \n-    let _ = if gen_opt().is_some() {\n+    let _ = if gen_res().is_ok() {\n         1\n-    } else if gen_opt().is_none() {\n-        2\n-    } else if gen_res().is_ok() {\n-        3\n     } else if gen_res().is_err() {\n-        4\n+        2\n     } else {\n-        5\n+        3\n     };\n }\n \n-fn gen_opt() -> Option<()> {\n-    None\n-}\n-\n fn gen_res() -> Result<(), ()> {\n     Ok(())\n }\n \n-fn takes_bool(_: bool) {}\n-\n-fn foo() {}\n-\n-fn bar() {}\n-\n macro_rules! m {\n     () => {\n         Some(42u32)\n@@ -129,30 +80,18 @@ fn issue5504() {\n }\n \n // Methods that are unstable const should not be suggested within a const context, see issue #5697.\n-// However, in Rust 1.48.0 the methods `is_ok` and `is_err` of `Result`, and `is_some` and `is_none`\n-// of `Option` were stabilized as const, so the following should be linted.\n+// However, in Rust 1.48.0 the methods `is_ok` and `is_err` of `Result` were stabilized as const,\n+// so the following should be linted.\n const fn issue6067() {\n     if Ok::<i32, i32>(42).is_ok() {}\n \n     if Err::<i32, i32>(42).is_err() {}\n \n-    if Some(42).is_some() {}\n-\n-    if None::<()>.is_none() {}\n-\n     while Ok::<i32, i32>(10).is_ok() {}\n \n     while Ok::<i32, i32>(10).is_err() {}\n \n-    while Some(42).is_some() {}\n-\n-    while None::<()>.is_none() {}\n-\n     Ok::<i32, i32>(42).is_ok();\n \n     Err::<i32, i32>(42).is_err();\n-\n-    Some(42).is_some();\n-\n-    None::<()>.is_none();\n }"}, {"sha": "d57fbb14ae496e369a63ac0579854266699005d1", "filename": "tests/ui/redundant_pattern_matching.rs", "status": "modified", "additions": 5, "deletions": 81, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/4117ae1175430087441c9b34145f148d49c2f08c/tests%2Fui%2Fredundant_pattern_matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4117ae1175430087441c9b34145f148d49c2f08c/tests%2Fui%2Fredundant_pattern_matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching.rs?ref=4117ae1175430087441c9b34145f148d49c2f08c", "patch": "@@ -18,39 +18,14 @@ fn main() {\n \n     if let Err(_) = Err::<i32, i32>(42) {}\n \n-    if let None = None::<()> {}\n-\n-    if let Some(_) = Some(42) {}\n-\n-    if let Some(_) = Some(42) {\n-        foo();\n-    } else {\n-        bar();\n-    }\n-\n-    while let Some(_) = Some(42) {}\n-\n-    while let None = Some(42) {}\n-\n-    while let None = None::<()> {}\n-\n     while let Ok(_) = Ok::<i32, i32>(10) {}\n \n     while let Err(_) = Ok::<i32, i32>(10) {}\n \n-    let mut v = vec![1, 2, 3];\n-    while let Some(_) = v.pop() {\n-        foo();\n-    }\n-\n     if Ok::<i32, i32>(42).is_ok() {}\n \n     if Err::<i32, i32>(42).is_err() {}\n \n-    if None::<i32>.is_none() {}\n-\n-    if Some(42).is_some() {}\n-\n     if let Ok(x) = Ok::<i32, i32>(42) {\n         println!(\"{}\", x);\n     }\n@@ -75,57 +50,24 @@ fn main() {\n         Err(_) => false,\n     };\n \n-    match Some(42) {\n-        Some(_) => true,\n-        None => false,\n-    };\n-\n-    match None::<()> {\n-        Some(_) => false,\n-        None => true,\n-    };\n-\n-    let _ = match None::<()> {\n-        Some(_) => false,\n-        None => true,\n-    };\n-\n     let _ = if let Ok(_) = Ok::<usize, ()>(4) { true } else { false };\n \n-    let opt = Some(false);\n-    let x = if let Some(_) = opt { true } else { false };\n-    takes_bool(x);\n-\n     issue5504();\n     issue6067();\n \n-    let _ = if let Some(_) = gen_opt() {\n+    let _ = if let Ok(_) = gen_res() {\n         1\n-    } else if let None = gen_opt() {\n-        2\n-    } else if let Ok(_) = gen_res() {\n-        3\n     } else if let Err(_) = gen_res() {\n-        4\n+        2\n     } else {\n-        5\n+        3\n     };\n }\n \n-fn gen_opt() -> Option<()> {\n-    None\n-}\n-\n fn gen_res() -> Result<(), ()> {\n     Ok(())\n }\n \n-fn takes_bool(_: bool) {}\n-\n-fn foo() {}\n-\n-fn bar() {}\n-\n macro_rules! m {\n     () => {\n         Some(42u32)\n@@ -150,25 +92,17 @@ fn issue5504() {\n }\n \n // Methods that are unstable const should not be suggested within a const context, see issue #5697.\n-// However, in Rust 1.48.0 the methods `is_ok` and `is_err` of `Result`, and `is_some` and `is_none`\n-// of `Option` were stabilized as const, so the following should be linted.\n+// However, in Rust 1.48.0 the methods `is_ok` and `is_err` of `Result` were stabilized as const,\n+// so the following should be linted.\n const fn issue6067() {\n     if let Ok(_) = Ok::<i32, i32>(42) {}\n \n     if let Err(_) = Err::<i32, i32>(42) {}\n \n-    if let Some(_) = Some(42) {}\n-\n-    if let None = None::<()> {}\n-\n     while let Ok(_) = Ok::<i32, i32>(10) {}\n \n     while let Err(_) = Ok::<i32, i32>(10) {}\n \n-    while let Some(_) = Some(42) {}\n-\n-    while let None = None::<()> {}\n-\n     match Ok::<i32, i32>(42) {\n         Ok(_) => true,\n         Err(_) => false,\n@@ -178,14 +112,4 @@ const fn issue6067() {\n         Ok(_) => false,\n         Err(_) => true,\n     };\n-\n-    match Some(42) {\n-        Some(_) => true,\n-        None => false,\n-    };\n-\n-    match None::<()> {\n-        Some(_) => false,\n-        None => true,\n-    };\n }"}, {"sha": "955900f3e6c9e54b001292bc6866fa0ac8ae17b5", "filename": "tests/ui/redundant_pattern_matching.stderr", "status": "modified", "additions": 22, "deletions": 152, "changes": 174, "blob_url": "https://github.com/rust-lang/rust/blob/4117ae1175430087441c9b34145f148d49c2f08c/tests%2Fui%2Fredundant_pattern_matching.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4117ae1175430087441c9b34145f148d49c2f08c/tests%2Fui%2Fredundant_pattern_matching.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching.stderr?ref=4117ae1175430087441c9b34145f148d49c2f08c", "patch": "@@ -18,62 +18,20 @@ error: redundant pattern matching, consider using `is_err()`\n LL |     if let Err(_) = Err::<i32, i32>(42) {}\n    |     -------^^^^^^---------------------- help: try this: `if Err::<i32, i32>(42).is_err()`\n \n-error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching.rs:21:12\n-   |\n-LL |     if let None = None::<()> {}\n-   |     -------^^^^------------- help: try this: `if None::<()>.is_none()`\n-\n-error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:23:12\n-   |\n-LL |     if let Some(_) = Some(42) {}\n-   |     -------^^^^^^^----------- help: try this: `if Some(42).is_some()`\n-\n-error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:25:12\n-   |\n-LL |     if let Some(_) = Some(42) {\n-   |     -------^^^^^^^----------- help: try this: `if Some(42).is_some()`\n-\n-error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:31:15\n-   |\n-LL |     while let Some(_) = Some(42) {}\n-   |     ----------^^^^^^^----------- help: try this: `while Some(42).is_some()`\n-\n-error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching.rs:33:15\n-   |\n-LL |     while let None = Some(42) {}\n-   |     ----------^^^^----------- help: try this: `while Some(42).is_none()`\n-\n-error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching.rs:35:15\n-   |\n-LL |     while let None = None::<()> {}\n-   |     ----------^^^^------------- help: try this: `while None::<()>.is_none()`\n-\n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:37:15\n+  --> $DIR/redundant_pattern_matching.rs:21:15\n    |\n LL |     while let Ok(_) = Ok::<i32, i32>(10) {}\n    |     ----------^^^^^--------------------- help: try this: `while Ok::<i32, i32>(10).is_ok()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching.rs:39:15\n+  --> $DIR/redundant_pattern_matching.rs:23:15\n    |\n LL |     while let Err(_) = Ok::<i32, i32>(10) {}\n    |     ----------^^^^^^--------------------- help: try this: `while Ok::<i32, i32>(10).is_err()`\n \n-error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:42:15\n-   |\n-LL |     while let Some(_) = v.pop() {\n-   |     ----------^^^^^^^---------- help: try this: `while v.pop().is_some()`\n-\n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:58:5\n+  --> $DIR/redundant_pattern_matching.rs:33:5\n    |\n LL | /     match Ok::<i32, i32>(42) {\n LL | |         Ok(_) => true,\n@@ -82,7 +40,7 @@ LL | |     };\n    | |_____^ help: try this: `Ok::<i32, i32>(42).is_ok()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching.rs:63:5\n+  --> $DIR/redundant_pattern_matching.rs:38:5\n    |\n LL | /     match Ok::<i32, i32>(42) {\n LL | |         Ok(_) => false,\n@@ -91,7 +49,7 @@ LL | |     };\n    | |_____^ help: try this: `Ok::<i32, i32>(42).is_err()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching.rs:68:5\n+  --> $DIR/redundant_pattern_matching.rs:43:5\n    |\n LL | /     match Err::<i32, i32>(42) {\n LL | |         Ok(_) => false,\n@@ -100,152 +58,82 @@ LL | |     };\n    | |_____^ help: try this: `Err::<i32, i32>(42).is_err()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:73:5\n+  --> $DIR/redundant_pattern_matching.rs:48:5\n    |\n LL | /     match Err::<i32, i32>(42) {\n LL | |         Ok(_) => true,\n LL | |         Err(_) => false,\n LL | |     };\n    | |_____^ help: try this: `Err::<i32, i32>(42).is_ok()`\n \n-error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:78:5\n-   |\n-LL | /     match Some(42) {\n-LL | |         Some(_) => true,\n-LL | |         None => false,\n-LL | |     };\n-   | |_____^ help: try this: `Some(42).is_some()`\n-\n-error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching.rs:83:5\n-   |\n-LL | /     match None::<()> {\n-LL | |         Some(_) => false,\n-LL | |         None => true,\n-LL | |     };\n-   | |_____^ help: try this: `None::<()>.is_none()`\n-\n-error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching.rs:88:13\n-   |\n-LL |       let _ = match None::<()> {\n-   |  _____________^\n-LL | |         Some(_) => false,\n-LL | |         None => true,\n-LL | |     };\n-   | |_____^ help: try this: `None::<()>.is_none()`\n-\n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:93:20\n+  --> $DIR/redundant_pattern_matching.rs:53:20\n    |\n LL |     let _ = if let Ok(_) = Ok::<usize, ()>(4) { true } else { false };\n    |             -------^^^^^--------------------- help: try this: `if Ok::<usize, ()>(4).is_ok()`\n \n-error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:96:20\n-   |\n-LL |     let x = if let Some(_) = opt { true } else { false };\n-   |             -------^^^^^^^------ help: try this: `if opt.is_some()`\n-\n-error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:102:20\n-   |\n-LL |     let _ = if let Some(_) = gen_opt() {\n-   |             -------^^^^^^^------------ help: try this: `if gen_opt().is_some()`\n-\n-error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching.rs:104:19\n-   |\n-LL |     } else if let None = gen_opt() {\n-   |            -------^^^^------------ help: try this: `if gen_opt().is_none()`\n-\n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:106:19\n+  --> $DIR/redundant_pattern_matching.rs:58:20\n    |\n-LL |     } else if let Ok(_) = gen_res() {\n-   |            -------^^^^^------------ help: try this: `if gen_res().is_ok()`\n+LL |     let _ = if let Ok(_) = gen_res() {\n+   |             -------^^^^^------------ help: try this: `if gen_res().is_ok()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching.rs:108:19\n+  --> $DIR/redundant_pattern_matching.rs:60:19\n    |\n LL |     } else if let Err(_) = gen_res() {\n    |            -------^^^^^^------------ help: try this: `if gen_res().is_err()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:141:19\n+  --> $DIR/redundant_pattern_matching.rs:83:19\n    |\n LL |         while let Some(_) = r#try!(result_opt()) {}\n    |         ----------^^^^^^^----------------------- help: try this: `while r#try!(result_opt()).is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:142:16\n+  --> $DIR/redundant_pattern_matching.rs:84:16\n    |\n LL |         if let Some(_) = r#try!(result_opt()) {}\n    |         -------^^^^^^^----------------------- help: try this: `if r#try!(result_opt()).is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:148:12\n+  --> $DIR/redundant_pattern_matching.rs:90:12\n    |\n LL |     if let Some(_) = m!() {}\n    |     -------^^^^^^^------- help: try this: `if m!().is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:149:15\n+  --> $DIR/redundant_pattern_matching.rs:91:15\n    |\n LL |     while let Some(_) = m!() {}\n    |     ----------^^^^^^^------- help: try this: `while m!().is_some()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:156:12\n+  --> $DIR/redundant_pattern_matching.rs:98:12\n    |\n LL |     if let Ok(_) = Ok::<i32, i32>(42) {}\n    |     -------^^^^^--------------------- help: try this: `if Ok::<i32, i32>(42).is_ok()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching.rs:158:12\n+  --> $DIR/redundant_pattern_matching.rs:100:12\n    |\n LL |     if let Err(_) = Err::<i32, i32>(42) {}\n    |     -------^^^^^^---------------------- help: try this: `if Err::<i32, i32>(42).is_err()`\n \n-error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:160:12\n-   |\n-LL |     if let Some(_) = Some(42) {}\n-   |     -------^^^^^^^----------- help: try this: `if Some(42).is_some()`\n-\n-error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching.rs:162:12\n-   |\n-LL |     if let None = None::<()> {}\n-   |     -------^^^^------------- help: try this: `if None::<()>.is_none()`\n-\n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:164:15\n+  --> $DIR/redundant_pattern_matching.rs:102:15\n    |\n LL |     while let Ok(_) = Ok::<i32, i32>(10) {}\n    |     ----------^^^^^--------------------- help: try this: `while Ok::<i32, i32>(10).is_ok()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching.rs:166:15\n+  --> $DIR/redundant_pattern_matching.rs:104:15\n    |\n LL |     while let Err(_) = Ok::<i32, i32>(10) {}\n    |     ----------^^^^^^--------------------- help: try this: `while Ok::<i32, i32>(10).is_err()`\n \n-error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:168:15\n-   |\n-LL |     while let Some(_) = Some(42) {}\n-   |     ----------^^^^^^^----------- help: try this: `while Some(42).is_some()`\n-\n-error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching.rs:170:15\n-   |\n-LL |     while let None = None::<()> {}\n-   |     ----------^^^^------------- help: try this: `while None::<()>.is_none()`\n-\n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:172:5\n+  --> $DIR/redundant_pattern_matching.rs:106:5\n    |\n LL | /     match Ok::<i32, i32>(42) {\n LL | |         Ok(_) => true,\n@@ -254,31 +142,13 @@ LL | |     };\n    | |_____^ help: try this: `Ok::<i32, i32>(42).is_ok()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching.rs:177:5\n+  --> $DIR/redundant_pattern_matching.rs:111:5\n    |\n LL | /     match Err::<i32, i32>(42) {\n LL | |         Ok(_) => false,\n LL | |         Err(_) => true,\n LL | |     };\n    | |_____^ help: try this: `Err::<i32, i32>(42).is_err()`\n \n-error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:182:5\n-   |\n-LL | /     match Some(42) {\n-LL | |         Some(_) => true,\n-LL | |         None => false,\n-LL | |     };\n-   | |_____^ help: try this: `Some(42).is_some()`\n-\n-error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching.rs:187:5\n-   |\n-LL | /     match None::<()> {\n-LL | |         Some(_) => false,\n-LL | |         None => true,\n-LL | |     };\n-   | |_____^ help: try this: `None::<()>.is_none()`\n-\n-error: aborting due to 41 previous errors\n+error: aborting due to 22 previous errors\n "}, {"sha": "499b975b2bb475d9343b556d03db861c02e0086f", "filename": "tests/ui/redundant_pattern_matching_option.fixed", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/4117ae1175430087441c9b34145f148d49c2f08c/tests%2Fui%2Fredundant_pattern_matching_option.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4117ae1175430087441c9b34145f148d49c2f08c/tests%2Fui%2Fredundant_pattern_matching_option.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching_option.fixed?ref=4117ae1175430087441c9b34145f148d49c2f08c", "patch": "@@ -0,0 +1,85 @@\n+// run-rustfix\n+\n+#![warn(clippy::all)]\n+#![warn(clippy::redundant_pattern_matching)]\n+#![allow(\n+    clippy::unit_arg,\n+    unused_must_use,\n+    clippy::needless_bool,\n+    clippy::match_like_matches_macro,\n+    deprecated\n+)]\n+\n+fn main() {\n+    if None::<()>.is_none() {}\n+\n+    if Some(42).is_some() {}\n+\n+    if Some(42).is_some() {\n+        foo();\n+    } else {\n+        bar();\n+    }\n+\n+    while Some(42).is_some() {}\n+\n+    while Some(42).is_none() {}\n+\n+    while None::<()>.is_none() {}\n+\n+    let mut v = vec![1, 2, 3];\n+    while v.pop().is_some() {\n+        foo();\n+    }\n+\n+    if None::<i32>.is_none() {}\n+\n+    if Some(42).is_some() {}\n+\n+    Some(42).is_some();\n+\n+    None::<()>.is_none();\n+\n+    let _ = None::<()>.is_none();\n+\n+    let opt = Some(false);\n+    let x = if opt.is_some() { true } else { false };\n+    takes_bool(x);\n+\n+    issue6067();\n+\n+    let _ = if gen_opt().is_some() {\n+        1\n+    } else if gen_opt().is_none() {\n+        2\n+    } else {\n+        3\n+    };\n+}\n+\n+fn gen_opt() -> Option<()> {\n+    None\n+}\n+\n+fn takes_bool(_: bool) {}\n+\n+fn foo() {}\n+\n+fn bar() {}\n+\n+// Methods that are unstable const should not be suggested within a const context, see issue #5697.\n+// However, in Rust 1.48.0 the methods `is_some` and `is_none` of `Option` were stabilized as const,\n+// so the following should be linted.\n+const fn issue6067() {\n+    if Some(42).is_some() {}\n+\n+    if None::<()>.is_none() {}\n+\n+    while Some(42).is_some() {}\n+\n+    while None::<()>.is_none() {}\n+\n+    Some(42).is_some();\n+\n+    None::<()>.is_none();\n+}"}, {"sha": "2a98435e7902e8aa7b246c71322fc30ed26e2929", "filename": "tests/ui/redundant_pattern_matching_option.rs", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/4117ae1175430087441c9b34145f148d49c2f08c/tests%2Fui%2Fredundant_pattern_matching_option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4117ae1175430087441c9b34145f148d49c2f08c/tests%2Fui%2Fredundant_pattern_matching_option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching_option.rs?ref=4117ae1175430087441c9b34145f148d49c2f08c", "patch": "@@ -0,0 +1,100 @@\n+// run-rustfix\n+\n+#![warn(clippy::all)]\n+#![warn(clippy::redundant_pattern_matching)]\n+#![allow(\n+    clippy::unit_arg,\n+    unused_must_use,\n+    clippy::needless_bool,\n+    clippy::match_like_matches_macro,\n+    deprecated\n+)]\n+\n+fn main() {\n+    if let None = None::<()> {}\n+\n+    if let Some(_) = Some(42) {}\n+\n+    if let Some(_) = Some(42) {\n+        foo();\n+    } else {\n+        bar();\n+    }\n+\n+    while let Some(_) = Some(42) {}\n+\n+    while let None = Some(42) {}\n+\n+    while let None = None::<()> {}\n+\n+    let mut v = vec![1, 2, 3];\n+    while let Some(_) = v.pop() {\n+        foo();\n+    }\n+\n+    if None::<i32>.is_none() {}\n+\n+    if Some(42).is_some() {}\n+\n+    match Some(42) {\n+        Some(_) => true,\n+        None => false,\n+    };\n+\n+    match None::<()> {\n+        Some(_) => false,\n+        None => true,\n+    };\n+\n+    let _ = match None::<()> {\n+        Some(_) => false,\n+        None => true,\n+    };\n+\n+    let opt = Some(false);\n+    let x = if let Some(_) = opt { true } else { false };\n+    takes_bool(x);\n+\n+    issue6067();\n+\n+    let _ = if let Some(_) = gen_opt() {\n+        1\n+    } else if let None = gen_opt() {\n+        2\n+    } else {\n+        3\n+    };\n+}\n+\n+fn gen_opt() -> Option<()> {\n+    None\n+}\n+\n+fn takes_bool(_: bool) {}\n+\n+fn foo() {}\n+\n+fn bar() {}\n+\n+// Methods that are unstable const should not be suggested within a const context, see issue #5697.\n+// However, in Rust 1.48.0 the methods `is_some` and `is_none` of `Option` were stabilized as const,\n+// so the following should be linted.\n+const fn issue6067() {\n+    if let Some(_) = Some(42) {}\n+\n+    if let None = None::<()> {}\n+\n+    while let Some(_) = Some(42) {}\n+\n+    while let None = None::<()> {}\n+\n+    match Some(42) {\n+        Some(_) => true,\n+        None => false,\n+    };\n+\n+    match None::<()> {\n+        Some(_) => false,\n+        None => true,\n+    };\n+}"}, {"sha": "eebb34484913e9794b774a805bc38ff9ad609616", "filename": "tests/ui/redundant_pattern_matching_option.stderr", "status": "added", "additions": 134, "deletions": 0, "changes": 134, "blob_url": "https://github.com/rust-lang/rust/blob/4117ae1175430087441c9b34145f148d49c2f08c/tests%2Fui%2Fredundant_pattern_matching_option.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4117ae1175430087441c9b34145f148d49c2f08c/tests%2Fui%2Fredundant_pattern_matching_option.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching_option.stderr?ref=4117ae1175430087441c9b34145f148d49c2f08c", "patch": "@@ -0,0 +1,134 @@\n+error: redundant pattern matching, consider using `is_none()`\n+  --> $DIR/redundant_pattern_matching_option.rs:14:12\n+   |\n+LL |     if let None = None::<()> {}\n+   |     -------^^^^------------- help: try this: `if None::<()>.is_none()`\n+   |\n+   = note: `-D clippy::redundant-pattern-matching` implied by `-D warnings`\n+\n+error: redundant pattern matching, consider using `is_some()`\n+  --> $DIR/redundant_pattern_matching_option.rs:16:12\n+   |\n+LL |     if let Some(_) = Some(42) {}\n+   |     -------^^^^^^^----------- help: try this: `if Some(42).is_some()`\n+\n+error: redundant pattern matching, consider using `is_some()`\n+  --> $DIR/redundant_pattern_matching_option.rs:18:12\n+   |\n+LL |     if let Some(_) = Some(42) {\n+   |     -------^^^^^^^----------- help: try this: `if Some(42).is_some()`\n+\n+error: redundant pattern matching, consider using `is_some()`\n+  --> $DIR/redundant_pattern_matching_option.rs:24:15\n+   |\n+LL |     while let Some(_) = Some(42) {}\n+   |     ----------^^^^^^^----------- help: try this: `while Some(42).is_some()`\n+\n+error: redundant pattern matching, consider using `is_none()`\n+  --> $DIR/redundant_pattern_matching_option.rs:26:15\n+   |\n+LL |     while let None = Some(42) {}\n+   |     ----------^^^^----------- help: try this: `while Some(42).is_none()`\n+\n+error: redundant pattern matching, consider using `is_none()`\n+  --> $DIR/redundant_pattern_matching_option.rs:28:15\n+   |\n+LL |     while let None = None::<()> {}\n+   |     ----------^^^^------------- help: try this: `while None::<()>.is_none()`\n+\n+error: redundant pattern matching, consider using `is_some()`\n+  --> $DIR/redundant_pattern_matching_option.rs:31:15\n+   |\n+LL |     while let Some(_) = v.pop() {\n+   |     ----------^^^^^^^---------- help: try this: `while v.pop().is_some()`\n+\n+error: redundant pattern matching, consider using `is_some()`\n+  --> $DIR/redundant_pattern_matching_option.rs:39:5\n+   |\n+LL | /     match Some(42) {\n+LL | |         Some(_) => true,\n+LL | |         None => false,\n+LL | |     };\n+   | |_____^ help: try this: `Some(42).is_some()`\n+\n+error: redundant pattern matching, consider using `is_none()`\n+  --> $DIR/redundant_pattern_matching_option.rs:44:5\n+   |\n+LL | /     match None::<()> {\n+LL | |         Some(_) => false,\n+LL | |         None => true,\n+LL | |     };\n+   | |_____^ help: try this: `None::<()>.is_none()`\n+\n+error: redundant pattern matching, consider using `is_none()`\n+  --> $DIR/redundant_pattern_matching_option.rs:49:13\n+   |\n+LL |       let _ = match None::<()> {\n+   |  _____________^\n+LL | |         Some(_) => false,\n+LL | |         None => true,\n+LL | |     };\n+   | |_____^ help: try this: `None::<()>.is_none()`\n+\n+error: redundant pattern matching, consider using `is_some()`\n+  --> $DIR/redundant_pattern_matching_option.rs:55:20\n+   |\n+LL |     let x = if let Some(_) = opt { true } else { false };\n+   |             -------^^^^^^^------ help: try this: `if opt.is_some()`\n+\n+error: redundant pattern matching, consider using `is_some()`\n+  --> $DIR/redundant_pattern_matching_option.rs:60:20\n+   |\n+LL |     let _ = if let Some(_) = gen_opt() {\n+   |             -------^^^^^^^------------ help: try this: `if gen_opt().is_some()`\n+\n+error: redundant pattern matching, consider using `is_none()`\n+  --> $DIR/redundant_pattern_matching_option.rs:62:19\n+   |\n+LL |     } else if let None = gen_opt() {\n+   |            -------^^^^------------ help: try this: `if gen_opt().is_none()`\n+\n+error: redundant pattern matching, consider using `is_some()`\n+  --> $DIR/redundant_pattern_matching_option.rs:83:12\n+   |\n+LL |     if let Some(_) = Some(42) {}\n+   |     -------^^^^^^^----------- help: try this: `if Some(42).is_some()`\n+\n+error: redundant pattern matching, consider using `is_none()`\n+  --> $DIR/redundant_pattern_matching_option.rs:85:12\n+   |\n+LL |     if let None = None::<()> {}\n+   |     -------^^^^------------- help: try this: `if None::<()>.is_none()`\n+\n+error: redundant pattern matching, consider using `is_some()`\n+  --> $DIR/redundant_pattern_matching_option.rs:87:15\n+   |\n+LL |     while let Some(_) = Some(42) {}\n+   |     ----------^^^^^^^----------- help: try this: `while Some(42).is_some()`\n+\n+error: redundant pattern matching, consider using `is_none()`\n+  --> $DIR/redundant_pattern_matching_option.rs:89:15\n+   |\n+LL |     while let None = None::<()> {}\n+   |     ----------^^^^------------- help: try this: `while None::<()>.is_none()`\n+\n+error: redundant pattern matching, consider using `is_some()`\n+  --> $DIR/redundant_pattern_matching_option.rs:91:5\n+   |\n+LL | /     match Some(42) {\n+LL | |         Some(_) => true,\n+LL | |         None => false,\n+LL | |     };\n+   | |_____^ help: try this: `Some(42).is_some()`\n+\n+error: redundant pattern matching, consider using `is_none()`\n+  --> $DIR/redundant_pattern_matching_option.rs:96:5\n+   |\n+LL | /     match None::<()> {\n+LL | |         Some(_) => false,\n+LL | |         None => true,\n+LL | |     };\n+   | |_____^ help: try this: `None::<()>.is_none()`\n+\n+error: aborting due to 19 previous errors\n+"}]}