{"sha": "f69293ae808dea61a2dacee6057ca5bb0d7dc817", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2OTI5M2FlODA4ZGVhNjFhMmRhY2VlNjA1N2NhNWJiMGQ3ZGM4MTc=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2019-10-16T20:40:37Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2019-10-23T13:35:34Z"}, "message": "Add `core::macros::matches!( $expr, $pat ) -> bool`\n\n# Motivation\n\nThis macro is:\n\n* General-purpose (not domain-specific)\n* Simple (the implementation is short)\n* Very popular [on crates.io](https://crates.io/crates/matches)\n  (currently 37th in all-time downloads)\n* The two previous points combined make it number one in\n  [left-pad index](https://twitter.com/bascule/status/1184523027888988160)\n  score\n\nAs such, I feel it is a good candidate for inclusion in the standard library.\n\nIn fact I already felt that way five years ago:\nhttps://github.com/rust-lang/rust/pull/14685\n(Although the proof of popularity was not as strong at the time.)\n\nBack then, the main concern was that this macro may not be quite\nuniversally-enough useful to belong in the prelude.\n\n# API\n\nTherefore, this PR adds the macro such that using it requires one of:\n\n```\nuse core::macros::matches;\nuse std::macros::matches;\n```\n\nLike arms of a `match` expression,\nthe macro supports multiple patterns separated by `|`\nand optionally followed by `if` and a guard expression:\n\n```\nlet foo = 'f';\nassert!(matches!(foo, 'A'..='Z' | 'a'..='z'));\n\nlet bar = Some(4);\nassert!(matches!(bar, Some(x) if x > 2));\n```\n\n# Implementation constraints\n\nA combination of reasons make it tricky\nfor a standard library macro not to be in the prelude.\n\nCurrently, all public `macro_rules` macros in the standard library macros\nend up \u201cin the prelude\u201d of every crate not through `use std::prelude::v1::*;`\nlike for other kinds of items,\nbut through `#[macro_use]` on `extern crate std;`.\n(Both are injected by `src/libsyntax_ext/standard_library_imports.rs`.)\n\n`#[macro_use]` seems to import every macro that is available\nat the top-level of a crate, even if through a `pub use` re-export.\n\nTherefore, for `matches!` not to be in the prelude, we need it to be\ninside of a module rather than at the root of `core` or `std`.\n\nHowever, the only way to make a `macro_rules` macro public\noutside of the crate where it is defined\nappears to be `#[macro_export]`.\nThis exports the macro at the root of the crate\nregardless of which module defines it.\nSee [macro scoping](\nhttps://doc.rust-lang.org/reference/macros-by-example.html#scoping-exporting-and-importing)\nin the reference.\n\nTherefore, the macro needs to be defined in a crate\nthat is not `core` or `std`.\n\n# Implementation\n\nThis PR adds a new `matches_macro` crate as a private implementation detail\nof the standard library.\nThis crate is `#![no_core]` so that libcore can depend on it.\nIt contains a `macro_rules` definition with `#[macro_export]`.\n\nlibcore and libstd each have a new public `macros` module\nthat contains a `pub use` re-export of the macro.\nBoth the module and the macro are unstable, for now.\n\nThe existing private `macros` modules are renamed `prelude_macros`,\nthough their respective source remains in `macros.rs` files.", "tree": {"sha": "1a6c703a7cb180933e1ca12c6d2ee5de8484bc00", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a6c703a7cb180933e1ca12c6d2ee5de8484bc00"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f69293ae808dea61a2dacee6057ca5bb0d7dc817", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f69293ae808dea61a2dacee6057ca5bb0d7dc817", "html_url": "https://github.com/rust-lang/rust/commit/f69293ae808dea61a2dacee6057ca5bb0d7dc817", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f69293ae808dea61a2dacee6057ca5bb0d7dc817/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f466f52c1bf8f2e4454e31c683a88625ad4b4033", "url": "https://api.github.com/repos/rust-lang/rust/commits/f466f52c1bf8f2e4454e31c683a88625ad4b4033", "html_url": "https://github.com/rust-lang/rust/commit/f466f52c1bf8f2e4454e31c683a88625ad4b4033"}], "stats": {"total": 103, "additions": 99, "deletions": 4}, "files": [{"sha": "343b101990a449356dad277413e93ddfeb62967d", "filename": "Cargo.lock", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f69293ae808dea61a2dacee6057ca5bb0d7dc817/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/f69293ae808dea61a2dacee6057ca5bb0d7dc817/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=f69293ae808dea61a2dacee6057ca5bb0d7dc817", "patch": "@@ -585,6 +585,7 @@ checksum = \"8ff012e225ce166d4422e0e78419d901719760f62ae2b7969ca6b564d1b54a9e\"\n name = \"core\"\n version = \"0.0.0\"\n dependencies = [\n+ \"matches_macro\",\n  \"rand 0.7.0\",\n ]\n \n@@ -1900,6 +1901,10 @@ version = \"0.1.8\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"7ffc5c5338469d4d3ea17d269fa8ea3512ad247247c30bd2df69e68309ed0a08\"\n \n+[[package]]\n+name = \"matches_macro\"\n+version = \"0.0.0\"\n+\n [[package]]\n name = \"mdbook\"\n version = \"0.3.1\""}, {"sha": "65f7a42824bf702b10d0192ec8b6bd1a07bb6c96", "filename": "src/libcore/Cargo.toml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f69293ae808dea61a2dacee6057ca5bb0d7dc817/src%2Flibcore%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f69293ae808dea61a2dacee6057ca5bb0d7dc817/src%2Flibcore%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2FCargo.toml?ref=f69293ae808dea61a2dacee6057ca5bb0d7dc817", "patch": "@@ -20,6 +20,9 @@ path = \"../libcore/tests/lib.rs\"\n name = \"corebenches\"\n path = \"../libcore/benches/lib.rs\"\n \n+[dependencies]\n+matches_macro = { path = \"../libmatches_macro\" }\n+\n [dev-dependencies]\n rand = \"0.7\"\n "}, {"sha": "a5af32250e672386530239a74a9930b318101a17", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f69293ae808dea61a2dacee6057ca5bb0d7dc817/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f69293ae808dea61a2dacee6057ca5bb0d7dc817/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=f69293ae808dea61a2dacee6057ca5bb0d7dc817", "patch": "@@ -85,6 +85,7 @@\n #![feature(iter_once_with)]\n #![feature(lang_items)]\n #![feature(link_llvm_intrinsics)]\n+#![feature(matches_macro)]\n #![feature(never_type)]\n #![feature(nll)]\n #![feature(exhaustive_patterns)]\n@@ -134,7 +135,16 @@\n use prelude::v1::*;\n \n #[macro_use]\n-mod macros;\n+#[path = \"macros.rs\"]\n+mod prelude_macros;\n+\n+/// Macros that are not in the prelude and need to be imported explicitly\n+#[unstable(feature = \"matches_macro\", issue = \"0\")]\n+pub mod macros {\n+    #[unstable(feature = \"matches_macro\", issue = \"0\")]\n+    #[doc(inline)]\n+    pub use matches_macro::matches;\n+}\n \n #[macro_use]\n mod internal_macros;"}, {"sha": "285f8d6e077f43d5f993eba52e35b215e0afd8b8", "filename": "src/libcore/prelude/v1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f69293ae808dea61a2dacee6057ca5bb0d7dc817/src%2Flibcore%2Fprelude%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f69293ae808dea61a2dacee6057ca5bb0d7dc817/src%2Flibcore%2Fprelude%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprelude%2Fv1.rs?ref=f69293ae808dea61a2dacee6057ca5bb0d7dc817", "patch": "@@ -82,7 +82,7 @@ pub use crate::{\n #[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n #[allow(deprecated)]\n #[doc(no_inline)]\n-pub use crate::macros::builtin::{\n+pub use crate::prelude_macros::builtin::{\n     RustcDecodable,\n     RustcEncodable,\n     bench,"}, {"sha": "3ed0aa60350df86c6acf22fe7e10834a264b4d32", "filename": "src/libmatches_macro/Cargo.toml", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f69293ae808dea61a2dacee6057ca5bb0d7dc817/src%2Flibmatches_macro%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f69293ae808dea61a2dacee6057ca5bb0d7dc817/src%2Flibmatches_macro%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibmatches_macro%2FCargo.toml?ref=f69293ae808dea61a2dacee6057ca5bb0d7dc817", "patch": "@@ -0,0 +1,10 @@\n+[package]\n+authors = [\"The Rust Project Developers\"]\n+name = \"matches_macro\"\n+version = \"0.0.0\"\n+autotests = false\n+autobenches = false\n+edition = \"2018\"\n+\n+[lib]\n+path = \"lib.rs\""}, {"sha": "0e3552ed4ea98d59ac4b0d4d58f5f6689fc63d2d", "filename": "src/libmatches_macro/lib.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/f69293ae808dea61a2dacee6057ca5bb0d7dc817/src%2Flibmatches_macro%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f69293ae808dea61a2dacee6057ca5bb0d7dc817/src%2Flibmatches_macro%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibmatches_macro%2Flib.rs?ref=f69293ae808dea61a2dacee6057ca5bb0d7dc817", "patch": "@@ -0,0 +1,29 @@\n+#![no_core]\n+#![feature(no_core)]\n+#![feature(staged_api)]\n+#![doc(test(no_crate_inject))]\n+\n+/// Returns whether the given expression matches (any of) the given pattern(s).\n+///\n+/// # Examples\n+///\n+/// ```\n+/// #![feature(matches_macro)]\n+/// use std::macros::matches;\n+///\n+/// let foo = 'f';\n+/// assert!(matches!(foo, 'A'..='Z' | 'a'..='z'));\n+///\n+/// let bar = Some(4);\n+/// assert!(matches!(bar, Some(x) if x > 2));\n+/// ```\n+#[macro_export]\n+#[unstable(feature = \"matches_macro\", issue = \"0\")]\n+macro_rules! matches {\n+    ($expression:expr, $( $pattern:pat )|+ $( if $guard: expr )?) => {\n+        match $expression {\n+            $( $pattern )|+ $( if $guard )? => true,\n+            _ => false\n+        }\n+    }\n+}"}, {"sha": "4c079108e2e169a2253f0e66924b3242f93fee67", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f69293ae808dea61a2dacee6057ca5bb0d7dc817/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f69293ae808dea61a2dacee6057ca5bb0d7dc817/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=f69293ae808dea61a2dacee6057ca5bb0d7dc817", "patch": "@@ -276,6 +276,7 @@\n #![feature(linkage)]\n #![feature(log_syntax)]\n #![feature(manually_drop_take)]\n+#![feature(matches_macro)]\n #![feature(maybe_uninit_ref)]\n #![feature(maybe_uninit_slice)]\n #![feature(needs_panic_runtime)]\n@@ -353,7 +354,16 @@ extern crate cfg_if;\n \n // The standard macros that are not built-in to the compiler.\n #[macro_use]\n-mod macros;\n+#[path = \"macros.rs\"]\n+mod prelude_macros;\n+\n+/// Macros that are not in the prelude and need to be imported explicitly\n+#[unstable(feature = \"matches_macro\", issue = \"0\")]\n+pub mod macros {\n+    #[unstable(feature = \"matches_macro\", issue = \"0\")]\n+    #[doc(inline)]\n+    pub use core::macros::matches;\n+}\n \n // The Rust prelude\n pub mod prelude;"}, {"sha": "27992b466baaca2cdc901586528006263a4cba44", "filename": "src/test/ui/macros/unknown-builtin.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f69293ae808dea61a2dacee6057ca5bb0d7dc817/src%2Ftest%2Fui%2Fmacros%2Funknown-builtin.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f69293ae808dea61a2dacee6057ca5bb0d7dc817/src%2Ftest%2Fui%2Fmacros%2Funknown-builtin.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Funknown-builtin.stderr?ref=f69293ae808dea61a2dacee6057ca5bb0d7dc817", "patch": "@@ -5,7 +5,7 @@ LL | macro_rules! unknown { () => () }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: cannot find a built-in macro with name `line`\n-  --> <::core::macros::builtin::line macros>:1:1\n+  --> <::core::prelude_macros::builtin::line macros>:1:1\n    |\n LL | () => { }\n    | ^^^^^^^^^"}, {"sha": "76b7e692ceea3d5837cd3de6d8d7010c83da4e1c", "filename": "src/test/ui/matches_macro_imported.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f69293ae808dea61a2dacee6057ca5bb0d7dc817/src%2Ftest%2Fui%2Fmatches_macro_imported.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f69293ae808dea61a2dacee6057ca5bb0d7dc817/src%2Ftest%2Fui%2Fmatches_macro_imported.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatches_macro_imported.rs?ref=f69293ae808dea61a2dacee6057ca5bb0d7dc817", "patch": "@@ -0,0 +1,13 @@\n+// run-pass\n+\n+#![feature(matches_macro)]\n+\n+use std::macros::matches;\n+\n+fn main() {\n+    let foo = 'f';\n+    assert!(matches!(foo, 'A'..='Z' | 'a'..='z'));\n+\n+    let foo = '_';\n+    assert!(!matches!(foo, 'A'..='Z' | 'a'..='z'));\n+}"}, {"sha": "489c7b866459fbde2bf3f571a29331bd01637b96", "filename": "src/test/ui/matches_macro_not_in_the_prelude.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f69293ae808dea61a2dacee6057ca5bb0d7dc817/src%2Ftest%2Fui%2Fmatches_macro_not_in_the_prelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f69293ae808dea61a2dacee6057ca5bb0d7dc817/src%2Ftest%2Fui%2Fmatches_macro_not_in_the_prelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatches_macro_not_in_the_prelude.rs?ref=f69293ae808dea61a2dacee6057ca5bb0d7dc817", "patch": "@@ -0,0 +1,7 @@\n+#![feature(matches_macro)]\n+\n+fn main() {\n+    let foo = 'f';\n+    assert!(matches!(foo, 'A'..='Z' | 'a'..='z'));\n+    //~^ Error: cannot find macro `matches` in this scope\n+}"}, {"sha": "0abe29a835b85798c3f0ff7efaeafbd187b0e448", "filename": "src/test/ui/matches_macro_not_in_the_prelude.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f69293ae808dea61a2dacee6057ca5bb0d7dc817/src%2Ftest%2Fui%2Fmatches_macro_not_in_the_prelude.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f69293ae808dea61a2dacee6057ca5bb0d7dc817/src%2Ftest%2Fui%2Fmatches_macro_not_in_the_prelude.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatches_macro_not_in_the_prelude.stderr?ref=f69293ae808dea61a2dacee6057ca5bb0d7dc817", "patch": "@@ -0,0 +1,8 @@\n+error: cannot find macro `matches` in this scope\n+  --> $DIR/matches_macro_not_in_the_prelude.rs:5:13\n+   |\n+LL |     assert!(matches!(foo, 'A'..='Z' | 'a'..='z'));\n+   |             ^^^^^^^\n+\n+error: aborting due to previous error\n+"}]}