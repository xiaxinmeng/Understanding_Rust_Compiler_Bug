{"sha": "99993780dc2db803877ed700cbf315246fc3ad7f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5OTkzNzgwZGMyZGI4MDM4NzdlZDcwMGNiZjMxNTI0NmZjM2FkN2Y=", "commit": {"author": {"name": "Masaki Hara", "email": "ackie.h.gmai@gmail.com", "date": "2017-05-26T13:20:53Z"}, "committer": {"name": "Masaki Hara", "email": "ackie.h.gmai@gmail.com", "date": "2017-05-26T13:21:46Z"}, "message": "Add warning cycle #42238.", "tree": {"sha": "7728fac338375c2ab8cc2aa122c764939fa9429e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7728fac338375c2ab8cc2aa122c764939fa9429e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99993780dc2db803877ed700cbf315246fc3ad7f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJZKCv6AAoJEHynqF4EmoLosG8P/RoopSceHOq66Djvuqoobkxm\nEhCKhHgEG/S51Q8zfws0svhtDCEjfcwPELopf+No/IMwKENKy2YHTJIN4BqJsmVp\nuOanfs92/L+aUs3EC3OB8woA6iH3AA8gh972iww1fo/HRR7cjjyytb6DWYDtqgt1\nOanYnnTUKyHKWdhGc8pz2lquzA4WO1zcZYwmt+l5n8WjAr0DP7pzFLwZ2SogHxLj\nYAAhMu8RrsXz1wr7WD+ifR/tBm2DyujNIkzyKJBRtHI/sOMTYUhFv94fVWYHt+4x\nr0I3UGZ14gicAuh1fAjXUtj24cO81UZvXJKnVJLeJBKWYuqjUUjhjSPprJ0rp3+l\nX1+1Tyn8bpCIo2AGwuxe7t/k3kVEwSbgIrao977+V3TwJbqTpHbDscaqsfbmWhxh\nZ0clffcejQSCgSk+zPgJlqmlmIY32dx6tBCV8mXmsjyFXlVACYcwCQtbtNLb/tZz\nxFoA/mCJpUH0L63SrQqlGa4ruyIIi/Mf3+Xuap2Ou4e7AQLASPKr5TN2jzLY/T56\ncN1jgRWe7DmpOFU04KuD43TME4PR2h1vaFpqEv9GRUUJUTFCx2vIk3kS1mNt6BvK\nF6goxoiZl/6BTgM4IvtmMs7+ENaJNbmbydMKLYtP1E0+6xm5m4mknEyJHXNZ35z3\nFUUUpV7FU/M7Hh20TtqR\n=WNdB\n-----END PGP SIGNATURE-----", "payload": "tree 7728fac338375c2ab8cc2aa122c764939fa9429e\nparent e8137d7ceadfa25b06e35e358870bb2687b0443d\nauthor Masaki Hara <ackie.h.gmai@gmail.com> 1495804853 +0900\ncommitter Masaki Hara <ackie.h.gmai@gmail.com> 1495804906 +0900\n\nAdd warning cycle #42238.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99993780dc2db803877ed700cbf315246fc3ad7f", "html_url": "https://github.com/rust-lang/rust/commit/99993780dc2db803877ed700cbf315246fc3ad7f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99993780dc2db803877ed700cbf315246fc3ad7f/comments", "author": {"login": "qnighy", "id": 41755, "node_id": "MDQ6VXNlcjQxNzU1", "avatar_url": "https://avatars.githubusercontent.com/u/41755?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qnighy", "html_url": "https://github.com/qnighy", "followers_url": "https://api.github.com/users/qnighy/followers", "following_url": "https://api.github.com/users/qnighy/following{/other_user}", "gists_url": "https://api.github.com/users/qnighy/gists{/gist_id}", "starred_url": "https://api.github.com/users/qnighy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qnighy/subscriptions", "organizations_url": "https://api.github.com/users/qnighy/orgs", "repos_url": "https://api.github.com/users/qnighy/repos", "events_url": "https://api.github.com/users/qnighy/events{/privacy}", "received_events_url": "https://api.github.com/users/qnighy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "qnighy", "id": 41755, "node_id": "MDQ6VXNlcjQxNzU1", "avatar_url": "https://avatars.githubusercontent.com/u/41755?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qnighy", "html_url": "https://github.com/qnighy", "followers_url": "https://api.github.com/users/qnighy/followers", "following_url": "https://api.github.com/users/qnighy/following{/other_user}", "gists_url": "https://api.github.com/users/qnighy/gists{/gist_id}", "starred_url": "https://api.github.com/users/qnighy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qnighy/subscriptions", "organizations_url": "https://api.github.com/users/qnighy/orgs", "repos_url": "https://api.github.com/users/qnighy/repos", "events_url": "https://api.github.com/users/qnighy/events{/privacy}", "received_events_url": "https://api.github.com/users/qnighy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e8137d7ceadfa25b06e35e358870bb2687b0443d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8137d7ceadfa25b06e35e358870bb2687b0443d", "html_url": "https://github.com/rust-lang/rust/commit/e8137d7ceadfa25b06e35e358870bb2687b0443d"}], "stats": {"total": 73, "additions": 62, "deletions": 11}, "files": [{"sha": "f08c37b773af948a3c1e15287337fafce43fd15d", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/99993780dc2db803877ed700cbf315246fc3ad7f/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99993780dc2db803877ed700cbf315246fc3ad7f/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=99993780dc2db803877ed700cbf315246fc3ad7f", "patch": "@@ -236,6 +236,12 @@ declare_lint! {\n     \"detects missing fragment specifiers in unused `macro_rules!` patterns\"\n }\n \n+declare_lint! {\n+    pub PARENTHESIZED_PARAMS_IN_TYPES_AND_MODULES,\n+    Warn,\n+    \"detects parenthesized generic parameters in type and module names\"\n+}\n+\n declare_lint! {\n     pub DEPRECATED,\n     Warn,\n@@ -286,6 +292,7 @@ impl LintPass for HardwiredLints {\n             LEGACY_IMPORTS,\n             LEGACY_CONSTRUCTOR_VISIBILITY,\n             MISSING_FRAGMENT_SPECIFIER,\n+            PARENTHESIZED_PARAMS_IN_TYPES_AND_MODULES,\n             DEPRECATED\n         )\n     }"}, {"sha": "8ff2439b6e9f87b3af9f3813db80a7a0584bcf7b", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/99993780dc2db803877ed700cbf315246fc3ad7f/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99993780dc2db803877ed700cbf315246fc3ad7f/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=99993780dc2db803877ed700cbf315246fc3ad7f", "patch": "@@ -250,6 +250,10 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n             id: LintId::of(MISSING_FRAGMENT_SPECIFIER),\n             reference: \"issue #40107 <https://github.com/rust-lang/rust/issues/40107>\",\n         },\n+        FutureIncompatibleInfo {\n+            id: LintId::of(PARENTHESIZED_PARAMS_IN_TYPES_AND_MODULES),\n+            reference: \"issue #42238 <https://github.com/rust-lang/rust/issues/42238>\",\n+        },\n         FutureIncompatibleInfo {\n             id: LintId::of(ANONYMOUS_PARAMETERS),\n             reference: \"issue #41686 <https://github.com/rust-lang/rust/issues/41686>\","}, {"sha": "7c013e91e5f7b7779aacb1abaf7558a7cbf6e53b", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/99993780dc2db803877ed700cbf315246fc3ad7f/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99993780dc2db803877ed700cbf315246fc3ad7f/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=99993780dc2db803877ed700cbf315246fc3ad7f", "patch": "@@ -22,6 +22,7 @@ use rustc::ty::subst::{Kind, Subst, Substs};\n use rustc::traits;\n use rustc::ty::{self, Ty, TyCtxt, ToPredicate, TypeFoldable};\n use rustc::ty::wf::object_region_bounds;\n+use rustc::lint::builtin::PARENTHESIZED_PARAMS_IN_TYPES_AND_MODULES;\n use rustc_back::slice;\n use require_c_abi_if_variadic;\n use util::common::{ErrorReported, FN_OUTPUT_NAME};\n@@ -161,7 +162,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n         match item_segment.parameters {\n             hir::AngleBracketedParameters(_) => {}\n             hir::ParenthesizedParameters(..) => {\n-                self.prohibit_parenthesized_params(item_segment);\n+                self.prohibit_parenthesized_params(item_segment, true);\n \n                 return Substs::for_item(tcx, def_id, |_, _| {\n                     tcx.types.re_static\n@@ -957,7 +958,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n     pub fn prohibit_type_params(&self, segments: &[hir::PathSegment]) {\n         for segment in segments {\n             if let hir::ParenthesizedParameters(_) = segment.parameters {\n-                self.prohibit_parenthesized_params(segment);\n+                self.prohibit_parenthesized_params(segment, false);\n                 break;\n             }\n             for typ in segment.parameters.types() {\n@@ -982,12 +983,18 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n         }\n     }\n \n-    pub fn prohibit_parenthesized_params(&self, segment: &hir::PathSegment) {\n+    pub fn prohibit_parenthesized_params(&self, segment: &hir::PathSegment, emit_error: bool) {\n         if let hir::ParenthesizedParameters(ref data) = segment.parameters {\n-            struct_span_err!(self.tcx().sess, data.span, E0214,\n-                      \"parenthesized parameters may only be used with a trait\")\n-                .span_label(data.span, \"only traits may use parentheses\")\n-                .emit();\n+            if emit_error {\n+                struct_span_err!(self.tcx().sess, data.span, E0214,\n+                          \"parenthesized parameters may only be used with a trait\")\n+                    .span_label(data.span, \"only traits may use parentheses\")\n+                    .emit();\n+            } else {\n+                let msg = \"parenthesized parameters may only be used with a trait\".to_string();\n+                self.tcx().sess.add_lint(PARENTHESIZED_PARAMS_IN_TYPES_AND_MODULES,\n+                                         ast::CRATE_NODE_ID, data.span, msg);\n+            }\n         }\n     }\n "}, {"sha": "ea4a78eaf296b0b209b7eda0684625d961a5ec6b", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/99993780dc2db803877ed700cbf315246fc3ad7f/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99993780dc2db803877ed700cbf315246fc3ad7f/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=99993780dc2db803877ed700cbf315246fc3ad7f", "patch": "@@ -4495,7 +4495,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     (&data.lifetimes[..], &data.types[..], data.infer_types, &data.bindings[..])\n                 }\n                 Some(&hir::ParenthesizedParameters(_)) => {\n-                    AstConv::prohibit_parenthesized_params(self, &segment.as_ref().unwrap().0);\n+                    AstConv::prohibit_parenthesized_params(self, &segment.as_ref().unwrap().0,\n+                                                           false);\n                     (&[][..], &[][..], true, &[][..])\n                 }\n                 None => (&[][..], &[][..], true, &[][..])"}, {"sha": "cb68d52ef968df73dcdca2aaffdf22d690071cd5", "filename": "src/test/compile-fail/issue-32995-2.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/99993780dc2db803877ed700cbf315246fc3ad7f/src%2Ftest%2Fcompile-fail%2Fissue-32995-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99993780dc2db803877ed700cbf315246fc3ad7f/src%2Ftest%2Fcompile-fail%2Fissue-32995-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-32995-2.rs?ref=99993780dc2db803877ed700cbf315246fc3ad7f", "patch": "@@ -8,18 +8,29 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![deny(parenthesized_params_in_types_and_modules)]\n+//~^ NOTE lint level defined here\n+//~| NOTE lint level defined here\n+//~| NOTE lint level defined here\n+#![allow(dead_code, unused_variables)]\n #![feature(conservative_impl_trait)]\n \n fn main() {\n     { fn f<X: ::std::marker()::Send>() {} }\n     //~^ ERROR parenthesized parameters may only be used with a trait\n+    //~| WARN previously accepted\n+    //~| NOTE issue #42238\n \n     { fn f() -> impl ::std::marker()::Send { } }\n     //~^ ERROR parenthesized parameters may only be used with a trait\n+    //~| WARN previously accepted\n+    //~| NOTE issue #42238\n }\n \n #[derive(Clone)]\n struct X;\n \n impl ::std::marker()::Copy for X {}\n //~^ ERROR parenthesized parameters may only be used with a trait\n+//~| WARN previously accepted\n+//~| NOTE issue #42238"}, {"sha": "f2ed8bf53eade23ad61283f4c72ba3ede9736601", "filename": "src/test/compile-fail/issue-32995.rs", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/99993780dc2db803877ed700cbf315246fc3ad7f/src%2Ftest%2Fcompile-fail%2Fissue-32995.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99993780dc2db803877ed700cbf315246fc3ad7f/src%2Ftest%2Fcompile-fail%2Fissue-32995.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-32995.rs?ref=99993780dc2db803877ed700cbf315246fc3ad7f", "patch": "@@ -8,34 +8,55 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn main() {\n-    let s: String() = String::from(\"foo\");\n-    //~^ ERROR parenthesized parameters may only be used with a trait\n+#![deny(parenthesized_params_in_types_and_modules)]\n+//~^ NOTE lint level defined here\n+//~| NOTE lint level defined here\n+//~| NOTE lint level defined here\n+//~| NOTE lint level defined here\n+//~| NOTE lint level defined here\n+//~| NOTE lint level defined here\n+//~| NOTE lint level defined here\n+#![allow(dead_code, unused_variables)]\n \n+fn main() {\n     let x: usize() = 1;\n     //~^ ERROR parenthesized parameters may only be used with a trait\n+    //~| WARN previously accepted\n+    //~| NOTE issue #42238\n \n     let b: ::std::boxed()::Box<_> = Box::new(1);\n     //~^ ERROR parenthesized parameters may only be used with a trait\n+    //~| WARN previously accepted\n+    //~| NOTE issue #42238\n \n     macro_rules! pathexpr {\n         ($p:path) => { $p }\n     }\n \n     let p = pathexpr!(::std::str()::from_utf8)(b\"foo\").unwrap();\n     //~^ ERROR parenthesized parameters may only be used with a trait\n+    //~| WARN previously accepted\n+    //~| NOTE issue #42238\n \n     let p = pathexpr!(::std::str::from_utf8())(b\"foo\").unwrap();\n     //~^ ERROR parenthesized parameters may only be used with a trait\n+    //~| WARN previously accepted\n+    //~| NOTE issue #42238\n \n     let o : Box<::std::marker()::Send> = Box::new(1);\n     //~^ ERROR parenthesized parameters may only be used with a trait\n+    //~| WARN previously accepted\n+    //~| NOTE issue #42238\n \n     let o : Box<Send + ::std::marker()::Sync> = Box::new(1);\n     //~^ ERROR parenthesized parameters may only be used with a trait\n+    //~| WARN previously accepted\n+    //~| NOTE issue #42238\n }\n \n fn foo<X:Default>() {\n     let d : X() = Default::default();\n     //~^ ERROR parenthesized parameters may only be used with a trait\n+    //~| WARN previously accepted\n+    //~| NOTE issue #42238\n }"}]}