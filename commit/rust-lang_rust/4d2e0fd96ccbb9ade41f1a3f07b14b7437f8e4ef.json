{"sha": "4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef", "node_id": "C_kwDOAAsO6NoAKDRkMmUwZmQ5NmNjYmI5YWRlNDFmMWEzZjA3YjE0Yjc0MzdmOGU0ZWY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-31T22:57:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-31T22:57:51Z"}, "message": "Auto merge of #92465 - matthiaskrgr:rollup-yuary84, r=matthiaskrgr\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #90383 (Extend check for UnsafeCell in consts to cover unions)\n - #91375 (config.rs: Add support for a per-target default_linker option.)\n - #91480 (rustdoc: use smaller number of colors to distinguish items)\n - #92338 (Add try_reserve and  try_reserve_exact for OsString)\n - #92405 (Add a couple needs-asm-support headers to tests)\n - #92435 (Sync rustc_codegen_cranelift)\n - #92440 (Fix mobile toggles position)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "ae02e3e70631489b0ee454b28b13242f8ecdc4ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae02e3e70631489b0ee454b28b13242f8ecdc4ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef", "html_url": "https://github.com/rust-lang/rust/commit/4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cfa3fe5af339e724209b25715282adae0c61628f", "url": "https://api.github.com/repos/rust-lang/rust/commits/cfa3fe5af339e724209b25715282adae0c61628f", "html_url": "https://github.com/rust-lang/rust/commit/cfa3fe5af339e724209b25715282adae0c61628f"}, {"sha": "2da54c729ecd3ad6a4557ccc6b4f9e6ef8632ae2", "url": "https://api.github.com/repos/rust-lang/rust/commits/2da54c729ecd3ad6a4557ccc6b4f9e6ef8632ae2", "html_url": "https://github.com/rust-lang/rust/commit/2da54c729ecd3ad6a4557ccc6b4f9e6ef8632ae2"}], "stats": {"total": 608, "additions": 450, "deletions": 158}, "files": [{"sha": "3aba528abfd6d193bb09847884514a4cb32d9af1", "filename": "compiler/rustc_codegen_cranelift/.github/workflows/main.yml", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef/compiler%2Frustc_codegen_cranelift%2F.github%2Fworkflows%2Fmain.yml", "raw_url": "https://github.com/rust-lang/rust/raw/4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef/compiler%2Frustc_codegen_cranelift%2F.github%2Fworkflows%2Fmain.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2F.github%2Fworkflows%2Fmain.yml?ref=4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef", "patch": "@@ -5,6 +5,21 @@ on:\n   - pull_request\n \n jobs:\n+  rustfmt:\n+    runs-on: ubuntu-latest\n+    timeout-minutes: 10\n+\n+    steps:\n+    - uses: actions/checkout@v2\n+\n+    - name: Install rustfmt\n+      run: |\n+        rustup component add rustfmt\n+\n+    - name: Rustfmt\n+      run: |\n+        cargo fmt --check\n+\n   build:\n     runs-on: ${{ matrix.os }}\n     timeout-minutes: 60"}, {"sha": "a019793edd8d25481d6b1a4d733097b1fd3eaf89", "filename": "compiler/rustc_codegen_cranelift/.github/workflows/nightly-cranelift.yml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef/compiler%2Frustc_codegen_cranelift%2F.github%2Fworkflows%2Fnightly-cranelift.yml", "raw_url": "https://github.com/rust-lang/rust/raw/4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef/compiler%2Frustc_codegen_cranelift%2F.github%2Fworkflows%2Fnightly-cranelift.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2F.github%2Fworkflows%2Fnightly-cranelift.yml?ref=4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef", "patch": "@@ -3,7 +3,7 @@ name: Test nightly Cranelift\n on:\n   push:\n   schedule:\n-    - cron: '1 17 * * *' # At 01:17 UTC every day.\n+    - cron: '17 1 * * *' # At 01:17 UTC every day.\n \n jobs:\n   build:"}, {"sha": "5aeaf3a1788043134ceb20fa64b11ec7e6f09cb7", "filename": "compiler/rustc_codegen_cranelift/.gitignore", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef/compiler%2Frustc_codegen_cranelift%2F.gitignore", "raw_url": "https://github.com/rust-lang/rust/raw/4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef/compiler%2Frustc_codegen_cranelift%2F.gitignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2F.gitignore?ref=4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef", "patch": "@@ -7,6 +7,7 @@ perf.data.old\n *.events\n *.string*\n /y.bin\n+/y.bin.dSYM\n /build\n /build_sysroot/sysroot_src\n /build_sysroot/compiler-builtins"}, {"sha": "3be4250296e774e1c5d2fb13def047985e97e4ec", "filename": "compiler/rustc_codegen_cranelift/Cargo.toml", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef/compiler%2Frustc_codegen_cranelift%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef/compiler%2Frustc_codegen_cranelift%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2FCargo.toml?ref=4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef", "patch": "@@ -40,31 +40,12 @@ unstable-features = [\"jit\", \"inline_asm\"]\n jit = [\"cranelift-jit\", \"libloading\"]\n inline_asm = []\n \n-[profile.dev]\n-# By compiling dependencies with optimizations, performing tests gets much faster.\n-opt-level = 3\n-\n-[profile.dev.package.rustc_codegen_cranelift]\n-# Disabling optimizations for cg_clif itself makes compilation after a change faster.\n-opt-level = 0\n-\n-[profile.release.package.rustc_codegen_cranelift]\n-incremental = true\n-\n # Disable optimizations and debuginfo of build scripts and some of the heavy build deps, as the\n # execution time of build scripts is so fast that optimizing them slows down the total build time.\n-[profile.dev.build-override]\n-opt-level = 0\n-debug = false\n-\n [profile.release.build-override]\n opt-level = 0\n debug = false\n \n-[profile.dev.package.cranelift-codegen-meta]\n-opt-level = 0\n-debug = false\n-\n [profile.release.package.cranelift-codegen-meta]\n opt-level = 0\n debug = false"}, {"sha": "8a2db5a43ecbf60488434ae6738677b8baad2d5b", "filename": "compiler/rustc_codegen_cranelift/Readme.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef/compiler%2Frustc_codegen_cranelift%2FReadme.md", "raw_url": "https://github.com/rust-lang/rust/raw/4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef/compiler%2Frustc_codegen_cranelift%2FReadme.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2FReadme.md?ref=4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef", "patch": "@@ -37,7 +37,7 @@ Assuming `$cg_clif_dir` is the directory you cloned this repo into and you follo\n In the directory with your project (where you can do the usual `cargo build`), run:\n \n ```bash\n-$ $cg_clif_dir/build/cargo build\n+$ $cg_clif_dir/build/cargo-clif build\n ```\n \n This will build your project with rustc_codegen_cranelift instead of the usual LLVM backend."}, {"sha": "1382c7e53793e997f1e2d699289c41c909664506", "filename": "compiler/rustc_codegen_cranelift/build_system/build_backend.rs", "status": "modified", "additions": 19, "deletions": 12, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Fbuild_backend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Fbuild_backend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Fbuild_backend.rs?ref=4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef", "patch": "@@ -10,6 +10,18 @@ pub(crate) fn build_backend(\n     let mut cmd = Command::new(\"cargo\");\n     cmd.arg(\"build\").arg(\"--target\").arg(host_triple);\n \n+    cmd.env(\"CARGO_BUILD_INCREMENTAL\", \"true\"); // Force incr comp even in release mode\n+\n+    let mut rustflags = env::var(\"RUSTFLAGS\").unwrap_or_default();\n+\n+    if env::var(\"CI\").as_ref().map(|val| &**val) == Ok(\"true\") {\n+        // Deny warnings on CI\n+        rustflags += \" -Dwarnings\";\n+\n+        // Disabling incr comp reduces cache size and incr comp doesn't save as much on CI anyway\n+        cmd.env(\"CARGO_BUILD_INCREMENTAL\", \"false\");\n+    }\n+\n     if use_unstable_features {\n         cmd.arg(\"--features\").arg(\"unstable-features\");\n     }\n@@ -22,25 +34,20 @@ pub(crate) fn build_backend(\n         _ => unreachable!(),\n     }\n \n+    // Set the rpath to make the cg_clif executable find librustc_codegen_cranelift without changing\n+    // LD_LIBRARY_PATH\n     if cfg!(unix) {\n         if cfg!(target_os = \"macos\") {\n-            cmd.env(\n-                \"RUSTFLAGS\",\n-                \"-Csplit-debuginfo=unpacked \\\n+            rustflags += \" -Csplit-debuginfo=unpacked \\\n                 -Clink-arg=-Wl,-rpath,@loader_path/../lib \\\n-                -Zosx-rpath-install-name\"\n-                    .to_string()\n-                    + env::var(\"RUSTFLAGS\").as_deref().unwrap_or(\"\"),\n-            );\n+                -Zosx-rpath-install-name\";\n         } else {\n-            cmd.env(\n-                \"RUSTFLAGS\",\n-                \"-Clink-arg=-Wl,-rpath=$ORIGIN/../lib \".to_string()\n-                    + env::var(\"RUSTFLAGS\").as_deref().unwrap_or(\"\"),\n-            );\n+            rustflags += \" -Clink-arg=-Wl,-rpath=$ORIGIN/../lib \";\n         }\n     }\n \n+    cmd.env(\"RUSTFLAGS\", rustflags);\n+\n     eprintln!(\"[BUILD] rustc_codegen_cranelift\");\n     crate::utils::spawn_and_wait(cmd);\n "}, {"sha": "2956fb698e17545307ac38dcfb701100e824da79", "filename": "compiler/rustc_codegen_cranelift/build_system/build_sysroot.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Fbuild_sysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Fbuild_sysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Fbuild_sysroot.rs?ref=4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef", "patch": "@@ -46,9 +46,9 @@ pub(crate) fn build_sysroot(\n     // Build and copy cargo wrapper\n     let mut build_cargo_wrapper_cmd = Command::new(\"rustc\");\n     build_cargo_wrapper_cmd\n-        .arg(\"scripts/cargo.rs\")\n+        .arg(\"scripts/cargo-clif.rs\")\n         .arg(\"-o\")\n-        .arg(target_dir.join(\"cargo\"))\n+        .arg(target_dir.join(\"cargo-clif\"))\n         .arg(\"-g\");\n     spawn_and_wait(build_cargo_wrapper_cmd);\n "}, {"sha": "785c7383783741701feea05580f26d527cfd0757", "filename": "compiler/rustc_codegen_cranelift/docs/usage.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef/compiler%2Frustc_codegen_cranelift%2Fdocs%2Fusage.md", "raw_url": "https://github.com/rust-lang/rust/raw/4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef/compiler%2Frustc_codegen_cranelift%2Fdocs%2Fusage.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fdocs%2Fusage.md?ref=4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef", "patch": "@@ -9,7 +9,7 @@ Assuming `$cg_clif_dir` is the directory you cloned this repo into and you follo\n In the directory with your project (where you can do the usual `cargo build`), run:\n \n ```bash\n-$ $cg_clif_dir/build/cargo build\n+$ $cg_clif_dir/build/cargo-clif build\n ```\n \n This will build your project with rustc_codegen_cranelift instead of the usual LLVM backend.\n@@ -32,7 +32,7 @@ In jit mode cg_clif will immediately execute your code without creating an execu\n > The jit mode will probably need cargo integration to make this possible.\n \n ```bash\n-$ $cg_clif_dir/build/cargo jit\n+$ $cg_clif_dir/build/cargo-clif jit\n ```\n \n or\n@@ -45,7 +45,7 @@ There is also an experimental lazy jit mode. In this mode functions are only com\n first called.\n \n ```bash\n-$ $cg_clif_dir/build/cargo lazy-jit\n+$ $cg_clif_dir/build/cargo-clif lazy-jit\n ```\n \n ## Shell"}, {"sha": "ef3b575d39314f39a9b51957cd49812a0852d11a", "filename": "compiler/rustc_codegen_cranelift/example/mini_core_hello_world.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef/compiler%2Frustc_codegen_cranelift%2Fexample%2Fmini_core_hello_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef/compiler%2Frustc_codegen_cranelift%2Fexample%2Fmini_core_hello_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fexample%2Fmini_core_hello_world.rs?ref=4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef", "patch": "@@ -129,6 +129,7 @@ fn call_return_u128_pair() {\n     return_u128_pair();\n }\n \n+#[allow(unreachable_code)] // FIXME false positive\n fn main() {\n     take_unique(Unique {\n         pointer: 0 as *const (),"}, {"sha": "cab94c0b8cfa7ee659f48c907789d6575ff539ce", "filename": "compiler/rustc_codegen_cranelift/rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef/compiler%2Frustc_codegen_cranelift%2Frust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef/compiler%2Frustc_codegen_cranelift%2Frust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Frust-toolchain?ref=4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef", "patch": "@@ -1,3 +1,3 @@\n [toolchain]\n-channel = \"nightly-2021-12-20\"\n+channel = \"nightly-2021-12-30\"\n components = [\"rust-src\", \"rustc-dev\", \"llvm-tools-preview\"]"}, {"sha": "41d82b581cd8cc07111c7f5b6a6f491a178dc801", "filename": "compiler/rustc_codegen_cranelift/scripts/cargo-clif.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef/compiler%2Frustc_codegen_cranelift%2Fscripts%2Fcargo-clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef/compiler%2Frustc_codegen_cranelift%2Fscripts%2Fcargo-clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fscripts%2Fcargo-clif.rs?ref=4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef", "previous_filename": "compiler/rustc_codegen_cranelift/scripts/cargo.rs"}, {"sha": "73600faa1e9c2ead9194c8b9fb8afef89d831910", "filename": "compiler/rustc_codegen_cranelift/scripts/setup_rust_fork.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef/compiler%2Frustc_codegen_cranelift%2Fscripts%2Fsetup_rust_fork.sh", "raw_url": "https://github.com/rust-lang/rust/raw/4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef/compiler%2Frustc_codegen_cranelift%2Fscripts%2Fsetup_rust_fork.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fscripts%2Fsetup_rust_fork.sh?ref=4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef", "patch": "@@ -1,7 +1,7 @@\n #!/bin/bash\n set -e\n \n-./y.rs build\n+./y.rs build --no-unstable-features\n source scripts/config.sh\n \n echo \"[SETUP] Rust fork\""}, {"sha": "6bcc3049ecc4eefc978e75ce8f2f0ee51f54de11", "filename": "compiler/rustc_codegen_cranelift/scripts/test_rustc_tests.sh", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef/compiler%2Frustc_codegen_cranelift%2Fscripts%2Ftest_rustc_tests.sh", "raw_url": "https://github.com/rust-lang/rust/raw/4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef/compiler%2Frustc_codegen_cranelift%2Fscripts%2Ftest_rustc_tests.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fscripts%2Ftest_rustc_tests.sh?ref=4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef", "patch": "@@ -47,6 +47,8 @@ rm src/test/ui/codegen/init-large-type.rs # same\n rm src/test/ui/sse2.rs # cpuid not supported, so sse2 not detected\n rm src/test/ui/issues/issue-33992.rs # unsupported linkages\n rm src/test/ui/issues/issue-51947.rs # same\n+rm src/test/incremental/hashes/function_interfaces.rs # same\n+rm src/test/incremental/hashes/statics.rs # same\n rm src/test/ui/numbers-arithmetic/saturating-float-casts.rs # intrinsic gives different but valid result\n rm src/test/ui/mir/mir_misc_casts.rs # depends on deduplication of constants\n rm src/test/ui/mir/mir_raw_fat_ptr.rs # same\n@@ -60,18 +62,14 @@ rm src/test/ui/intrinsics/intrinsic-nearby.rs # unimplemented nearbyintf32 and n\n \n rm src/test/incremental/hashes/inline_asm.rs # inline asm\n rm src/test/incremental/issue-72386.rs # same\n-rm src/test/incremental/issue-49482.rs # same\n-rm src/test/incremental/issue-54059.rs # same\n rm src/test/incremental/lto.rs # requires lto\n+rm src/test/incremental/dirty_clean.rs # TODO\n \n rm -r src/test/run-make/emit-shared-files # requires the rustdoc executable in build/bin/\n rm -r src/test/run-make/unstable-flag-required # same\n rm -r src/test/run-make/rustdoc-* # same\n rm -r src/test/run-make/emit-named-files # requires full --emit support\n \n-rm src/test/pretty/asm.rs # inline asm\n-rm src/test/pretty/raw-str-nonexpr.rs # same\n-\n rm -r src/test/run-pass-valgrind/unsized-locals\n \n rm src/test/ui/json-bom-plus-crlf-multifile.rs # differing warning\n@@ -97,6 +95,12 @@ rm src/test/ui/command/command-current-dir.rs # can't find libstd.so\n \n rm src/test/ui/abi/stack-protector.rs # requires stack protector support\n \n+rm src/test/incremental/issue-80691-bad-eval-cache.rs # wrong exit code\n+rm src/test/incremental/spike-neg1.rs # errors out for some reason\n+rm src/test/incremental/spike-neg2.rs # same\n+\n+rm src/test/incremental/thinlto/cgu_invalidated_when_import_{added,removed}.rs # requires LLVM\n+\n echo \"[TEST] rustc test suite\"\n-RUST_TEST_NOCAPTURE=1 COMPILETEST_FORCE_STAGE0=1 ./x.py test --stage 0 src/test/{codegen-units,run-make,run-pass-valgrind,ui}\n+RUST_TEST_NOCAPTURE=1 COMPILETEST_FORCE_STAGE0=1 ./x.py test --stage 0 src/test/{codegen-units,run-make,run-pass-valgrind,ui,incremental}\n popd"}, {"sha": "bdb3de0936dc90dc1f7b10543170b9e599e6a972", "filename": "compiler/rustc_codegen_cranelift/scripts/tests.sh", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef/compiler%2Frustc_codegen_cranelift%2Fscripts%2Ftests.sh", "raw_url": "https://github.com/rust-lang/rust/raw/4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef/compiler%2Frustc_codegen_cranelift%2Fscripts%2Ftests.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fscripts%2Ftests.sh?ref=4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef", "patch": "@@ -80,73 +80,73 @@ function base_sysroot_tests() {\n \n function extended_sysroot_tests() {\n     pushd rand\n-    ../build/cargo clean\n+    ../build/cargo-clif clean\n     if [[ \"$HOST_TRIPLE\" = \"$TARGET_TRIPLE\" ]]; then\n         echo \"[TEST] rust-random/rand\"\n-        ../build/cargo test --workspace\n+        ../build/cargo-clif test --workspace\n     else\n         echo \"[AOT] rust-random/rand\"\n-        ../build/cargo build --workspace --target $TARGET_TRIPLE --tests\n+        ../build/cargo-clif build --workspace --target $TARGET_TRIPLE --tests\n     fi\n     popd\n \n     pushd simple-raytracer\n     if [[ \"$HOST_TRIPLE\" = \"$TARGET_TRIPLE\" ]]; then\n         echo \"[BENCH COMPILE] ebobby/simple-raytracer\"\n-        hyperfine --runs \"${RUN_RUNS:-10}\" --warmup 1 --prepare \"../build/cargo clean\" \\\n+        hyperfine --runs \"${RUN_RUNS:-10}\" --warmup 1 --prepare \"../build/cargo-clif clean\" \\\n         \"RUSTC=rustc RUSTFLAGS='' cargo build\" \\\n-        \"../build/cargo build\"\n+        \"../build/cargo-clif build\"\n \n         echo \"[BENCH RUN] ebobby/simple-raytracer\"\n         cp ./target/debug/main ./raytracer_cg_clif\n         hyperfine --runs \"${RUN_RUNS:-10}\" ./raytracer_cg_llvm ./raytracer_cg_clif\n     else\n-        ../build/cargo clean\n+        ../build/cargo-clif clean\n         echo \"[BENCH COMPILE] ebobby/simple-raytracer (skipped)\"\n         echo \"[COMPILE] ebobby/simple-raytracer\"\n-        ../build/cargo build --target $TARGET_TRIPLE\n+        ../build/cargo-clif build --target $TARGET_TRIPLE\n         echo \"[BENCH RUN] ebobby/simple-raytracer (skipped)\"\n     fi\n     popd\n \n     pushd build_sysroot/sysroot_src/library/core/tests\n     echo \"[TEST] libcore\"\n-    ../../../../../build/cargo clean\n+    ../../../../../build/cargo-clif clean\n     if [[ \"$HOST_TRIPLE\" = \"$TARGET_TRIPLE\" ]]; then\n-        ../../../../../build/cargo test\n+        ../../../../../build/cargo-clif test\n     else\n-        ../../../../../build/cargo build --target $TARGET_TRIPLE --tests\n+        ../../../../../build/cargo-clif build --target $TARGET_TRIPLE --tests\n     fi\n     popd\n \n     pushd regex\n     echo \"[TEST] rust-lang/regex example shootout-regex-dna\"\n-    ../build/cargo clean\n+    ../build/cargo-clif clean\n     export RUSTFLAGS=\"$RUSTFLAGS --cap-lints warn\" # newer aho_corasick versions throw a deprecation warning\n     # Make sure `[codegen mono items] start` doesn't poison the diff\n-    ../build/cargo build --example shootout-regex-dna --target $TARGET_TRIPLE\n+    ../build/cargo-clif build --example shootout-regex-dna --target $TARGET_TRIPLE\n     if [[ \"$HOST_TRIPLE\" = \"$TARGET_TRIPLE\" ]]; then\n         cat examples/regexdna-input.txt \\\n-            | ../build/cargo run --example shootout-regex-dna --target $TARGET_TRIPLE \\\n+            | ../build/cargo-clif run --example shootout-regex-dna --target $TARGET_TRIPLE \\\n             | grep -v \"Spawned thread\" > res.txt\n         diff -u res.txt examples/regexdna-output.txt\n     fi\n \n     if [[ \"$HOST_TRIPLE\" = \"$TARGET_TRIPLE\" ]]; then\n         echo \"[TEST] rust-lang/regex tests\"\n-        ../build/cargo test --tests -- --exclude-should-panic --test-threads 1 -Zunstable-options -q\n+        ../build/cargo-clif test --tests -- --exclude-should-panic --test-threads 1 -Zunstable-options -q\n     else\n         echo \"[AOT] rust-lang/regex tests\"\n-        ../build/cargo build --tests --target $TARGET_TRIPLE\n+        ../build/cargo-clif build --tests --target $TARGET_TRIPLE\n     fi\n     popd\n \n     pushd portable-simd\n     echo \"[TEST] rust-lang/portable-simd\"\n-    ../build/cargo clean\n-    ../build/cargo build --all-targets --target $TARGET_TRIPLE\n+    ../build/cargo-clif clean\n+    ../build/cargo-clif build --all-targets --target $TARGET_TRIPLE\n     if [[ \"$HOST_TRIPLE\" = \"$TARGET_TRIPLE\" ]]; then\n-        ../build/cargo test -q\n+        ../build/cargo-clif test -q\n     fi\n     popd\n }"}, {"sha": "3b6025c73d10bd7a0113e2b31662dd7a20d9753a", "filename": "compiler/rustc_codegen_cranelift/src/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcommon.rs?ref=4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef", "patch": "@@ -237,7 +237,7 @@ pub(crate) struct FunctionCx<'m, 'clif, 'tcx: 'm> {\n     pub(crate) module: &'m mut dyn Module,\n     pub(crate) tcx: TyCtxt<'tcx>,\n     pub(crate) target_config: TargetFrontendConfig, // Cached from module\n-    pub(crate) pointer_type: Type, // Cached from module\n+    pub(crate) pointer_type: Type,                  // Cached from module\n     pub(crate) constants_cx: ConstantCx,\n \n     pub(crate) instance: Instance<'tcx>,"}, {"sha": "589910ede9688ce330e42bc2552ae3b9ea67cd54", "filename": "compiler/rustc_codegen_cranelift/src/debuginfo/emit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdebuginfo%2Femit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdebuginfo%2Femit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdebuginfo%2Femit.rs?ref=4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef", "patch": "@@ -67,7 +67,7 @@ impl WriterRelocate {\n     }\n \n     /// Perform the collected relocations to be usable for JIT usage.\n-    #[cfg(feature = \"jit\")]\n+    #[cfg(all(feature = \"jit\", not(windows)))]\n     pub(super) fn relocate_for_jit(mut self, jit_module: &cranelift_jit::JITModule) -> Vec<u8> {\n         for reloc in self.relocs.drain(..) {\n             match reloc.name {"}, {"sha": "638b025be229d57170e607b15fc0508def83986b", "filename": "compiler/rustc_codegen_cranelift/src/debuginfo/mod.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdebuginfo%2Fmod.rs?ref=4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef", "patch": "@@ -10,7 +10,7 @@ use crate::prelude::*;\n use rustc_index::vec::IndexVec;\n \n use cranelift_codegen::entity::EntityRef;\n-use cranelift_codegen::ir::{LabelValueLoc, ValueLabel};\n+use cranelift_codegen::ir::{Endianness, LabelValueLoc, ValueLabel};\n use cranelift_codegen::isa::TargetIsa;\n use cranelift_codegen::ValueLocRange;\n \n@@ -23,15 +23,6 @@ use gimli::{Encoding, Format, LineEncoding, RunTimeEndian, X86_64};\n pub(crate) use emit::{DebugReloc, DebugRelocName};\n pub(crate) use unwind::UnwindContext;\n \n-fn target_endian(tcx: TyCtxt<'_>) -> RunTimeEndian {\n-    use rustc_target::abi::Endian;\n-\n-    match tcx.data_layout.endian {\n-        Endian::Big => RunTimeEndian::Big,\n-        Endian::Little => RunTimeEndian::Little,\n-    }\n-}\n-\n pub(crate) struct DebugContext<'tcx> {\n     tcx: TyCtxt<'tcx>,\n \n@@ -60,6 +51,11 @@ impl<'tcx> DebugContext<'tcx> {\n             address_size: isa.frontend_config().pointer_bytes(),\n         };\n \n+        let endian = match isa.endianness() {\n+            Endianness::Little => RunTimeEndian::Little,\n+            Endianness::Big => RunTimeEndian::Big,\n+        };\n+\n         let mut dwarf = DwarfUnit::new(encoding);\n \n         let producer = format!(\n@@ -108,7 +104,7 @@ impl<'tcx> DebugContext<'tcx> {\n         DebugContext {\n             tcx,\n \n-            endian: target_endian(tcx),\n+            endian,\n \n             dwarf,\n             unit_range_list: RangeList(Vec::new()),"}, {"sha": "e4f28338096e1cec0175fd0c78a0d2ae567829ff", "filename": "compiler/rustc_codegen_cranelift/src/debuginfo/unwind.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdebuginfo%2Funwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdebuginfo%2Funwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdebuginfo%2Funwind.rs?ref=4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef", "patch": "@@ -2,6 +2,7 @@\n \n use crate::prelude::*;\n \n+use cranelift_codegen::ir::Endianness;\n use cranelift_codegen::isa::{unwind::UnwindInfo, TargetIsa};\n \n use cranelift_object::ObjectProduct;\n@@ -17,8 +18,11 @@ pub(crate) struct UnwindContext {\n }\n \n impl UnwindContext {\n-    pub(crate) fn new(tcx: TyCtxt<'_>, isa: &dyn TargetIsa, pic_eh_frame: bool) -> Self {\n-        let endian = super::target_endian(tcx);\n+    pub(crate) fn new(isa: &dyn TargetIsa, pic_eh_frame: bool) -> Self {\n+        let endian = match isa.endianness() {\n+            Endianness::Little => RunTimeEndian::Little,\n+            Endianness::Big => RunTimeEndian::Big,\n+        };\n         let mut frame_table = FrameTable::default();\n \n         let cie_id = if let Some(mut cie) = isa.create_systemv_cie() {"}, {"sha": "046e4393a68d6c4306cae8642b10500f8b438eec", "filename": "compiler/rustc_codegen_cranelift/src/driver/aot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Faot.rs?ref=4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef", "patch": "@@ -243,7 +243,7 @@ pub(crate) fn run_aot(\n     let isa = crate::build_isa(tcx.sess, &backend_config);\n     let mut allocator_module = make_module(tcx.sess, isa, \"allocator_shim\".to_string());\n     assert_eq!(pointer_ty(tcx), allocator_module.target_config().pointer_type());\n-    let mut allocator_unwind_context = UnwindContext::new(tcx, allocator_module.isa(), true);\n+    let mut allocator_unwind_context = UnwindContext::new(allocator_module.isa(), true);\n     let created_alloc_shim =\n         crate::allocator::codegen(tcx, &mut allocator_module, &mut allocator_unwind_context);\n "}, {"sha": "cb18f42f741d80b208b92bcfbf9a2143b68dbede", "filename": "compiler/rustc_codegen_cranelift/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs?ref=4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef", "patch": "@@ -141,7 +141,7 @@ impl<'tcx> CodegenCx<'tcx> {\n         assert_eq!(pointer_ty(tcx), isa.pointer_type());\n \n         let unwind_context =\n-            UnwindContext::new(tcx, isa, matches!(backend_config.codegen_mode, CodegenMode::Aot));\n+            UnwindContext::new(isa, matches!(backend_config.codegen_mode, CodegenMode::Aot));\n         let debug_context = if debug_info { Some(DebugContext::new(tcx, isa)) } else { None };\n         CodegenCx {\n             tcx,"}, {"sha": "5a398c2f45af52e593b34831684dbed94871c609", "filename": "compiler/rustc_const_eval/src/interpret/validity.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs?ref=4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef", "patch": "@@ -14,6 +14,7 @@ use rustc_middle::mir::interpret::InterpError;\n use rustc_middle::ty;\n use rustc_middle::ty::layout::{LayoutOf, TyAndLayout};\n use rustc_span::symbol::{sym, Symbol};\n+use rustc_span::DUMMY_SP;\n use rustc_target::abi::{Abi, Scalar as ScalarAbi, Size, VariantIdx, Variants, WrappingRange};\n \n use std::hash::Hash;\n@@ -736,9 +737,15 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n     #[inline(always)]\n     fn visit_union(\n         &mut self,\n-        _op: &OpTy<'tcx, M::PointerTag>,\n+        op: &OpTy<'tcx, M::PointerTag>,\n         _fields: NonZeroUsize,\n     ) -> InterpResult<'tcx> {\n+        // Special check preventing `UnsafeCell` inside unions in the inner part of constants.\n+        if matches!(self.ctfe_mode, Some(CtfeValidationMode::Const { inner: true, .. })) {\n+            if !op.layout.ty.is_freeze(self.ecx.tcx.at(DUMMY_SP), self.ecx.param_env) {\n+                throw_validation_failure!(self.path, { \"`UnsafeCell` in a `const`\" });\n+            }\n+        }\n         Ok(())\n     }\n "}, {"sha": "f24f8e81a7944ef4a49483a93abdfcb50d6ef037", "filename": "config.toml.example", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef", "patch": "@@ -488,9 +488,12 @@ changelog-seen = 2\n # FIXME(#75760): Some UI tests fail when this option is enabled.\n #parallel-compiler = false\n \n-# The default linker that will be hard-coded into the generated compiler for\n-# targets that don't specify linker explicitly in their target specifications.\n-# Note that this is not the linker used to link said compiler.\n+# The default linker that will be hard-coded into the generated\n+# compiler for targets that don't specify a default linker explicitly\n+# in their target specifications.  Note that this is not the linker\n+# used to link said compiler. It can also be set per-target (via the\n+# `[target.<triple>]` block), which may be useful in a cross-compilation\n+# setting.\n #\n # See https://doc.rust-lang.org/rustc/codegen-options/index.html#linker for more information.\n #default-linker = <none> (path)"}, {"sha": "982ad1898788e26104382347d239f8848bbfe1fa", "filename": "library/std/src/ffi/os_str.rs", "status": "modified", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs?ref=4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef", "patch": "@@ -3,6 +3,7 @@ mod tests;\n \n use crate::borrow::{Borrow, Cow};\n use crate::cmp;\n+use crate::collections::TryReserveError;\n use crate::fmt;\n use crate::hash::{Hash, Hasher};\n use crate::iter::{Extend, FromIterator};\n@@ -265,6 +266,43 @@ impl OsString {\n         self.inner.reserve(additional)\n     }\n \n+    /// Tries to reserve capacity for at least `additional` more length units\n+    /// in the given `OsString`. The string may reserve more space to avoid\n+    /// frequent reallocations. After calling `try_reserve`, capacity will be\n+    /// greater than or equal to `self.len() + additional`. Does nothing if\n+    /// capacity is already sufficient.\n+    ///\n+    /// # Errors\n+    ///\n+    /// If the capacity overflows, or the allocator reports a failure, then an error\n+    /// is returned.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(try_reserve_2)]\n+    /// use std::ffi::{OsStr, OsString};\n+    /// use std::collections::TryReserveError;\n+    ///\n+    /// fn process_data(data: &str) -> Result<OsString, TryReserveError> {\n+    ///     let mut s = OsString::new();\n+    ///\n+    ///     // Pre-reserve the memory, exiting if we can't\n+    ///     s.try_reserve(OsStr::new(data).len())?;\n+    ///\n+    ///     // Now we know this can't OOM in the middle of our complex work\n+    ///     s.push(data);\n+    ///\n+    ///     Ok(s)\n+    /// }\n+    /// # process_data(\"123\").expect(\"why is the test harness OOMing on 3 bytes?\");\n+    /// ```\n+    #[unstable(feature = \"try_reserve_2\", issue = \"91789\")]\n+    #[inline]\n+    pub fn try_reserve(&mut self, additional: usize) -> Result<(), TryReserveError> {\n+        self.inner.try_reserve(additional)\n+    }\n+\n     /// Reserves the minimum capacity for exactly `additional` more capacity to\n     /// be inserted in the given `OsString`. Does nothing if the capacity is\n     /// already sufficient.\n@@ -290,6 +328,49 @@ impl OsString {\n         self.inner.reserve_exact(additional)\n     }\n \n+    /// Tries to reserve the minimum capacity for exactly `additional`\n+    /// more length units in the given `OsString`. After calling\n+    /// `try_reserve_exact`, capacity will be greater than or equal to\n+    /// `self.len() + additional` if it returns `Ok(())`.\n+    /// Does nothing if the capacity is already sufficient.\n+    ///\n+    /// Note that the allocator may give the `OsString` more space than it\n+    /// requests. Therefore, capacity can not be relied upon to be precisely\n+    /// minimal. Prefer [`try_reserve`] if future insertions are expected.\n+    ///\n+    /// [`try_reserve`]: OsString::try_reserve\n+    ///\n+    /// # Errors\n+    ///\n+    /// If the capacity overflows, or the allocator reports a failure, then an error\n+    /// is returned.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(try_reserve_2)]\n+    /// use std::ffi::{OsStr, OsString};\n+    /// use std::collections::TryReserveError;\n+    ///\n+    /// fn process_data(data: &str) -> Result<OsString, TryReserveError> {\n+    ///     let mut s = OsString::new();\n+    ///\n+    ///     // Pre-reserve the memory, exiting if we can't\n+    ///     s.try_reserve_exact(OsStr::new(data).len())?;\n+    ///\n+    ///     // Now we know this can't OOM in the middle of our complex work\n+    ///     s.push(data);\n+    ///\n+    ///     Ok(s)\n+    /// }\n+    /// # process_data(\"123\").expect(\"why is the test harness OOMing on 3 bytes?\");\n+    /// ```\n+    #[unstable(feature = \"try_reserve_2\", issue = \"91789\")]\n+    #[inline]\n+    pub fn try_reserve_exact(&mut self, additional: usize) -> Result<(), TryReserveError> {\n+        self.inner.try_reserve_exact(additional)\n+    }\n+\n     /// Shrinks the capacity of the `OsString` to match its length.\n     ///\n     /// # Examples"}, {"sha": "ccbc182240cf3ddc9551bb188f38bdc12cefe60d", "filename": "library/std/src/sys/unix/os_str.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos_str.rs?ref=4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef", "patch": "@@ -2,6 +2,7 @@\n //! systems: just a `Vec<u8>`/`[u8]`.\n \n use crate::borrow::Cow;\n+use crate::collections::TryReserveError;\n use crate::fmt;\n use crate::fmt::Write;\n use crate::mem;\n@@ -112,11 +113,21 @@ impl Buf {\n         self.inner.reserve(additional)\n     }\n \n+    #[inline]\n+    pub fn try_reserve(&mut self, additional: usize) -> Result<(), TryReserveError> {\n+        self.inner.try_reserve(additional)\n+    }\n+\n     #[inline]\n     pub fn reserve_exact(&mut self, additional: usize) {\n         self.inner.reserve_exact(additional)\n     }\n \n+    #[inline]\n+    pub fn try_reserve_exact(&mut self, additional: usize) -> Result<(), TryReserveError> {\n+        self.inner.try_reserve_exact(additional)\n+    }\n+\n     #[inline]\n     pub fn shrink_to_fit(&mut self) {\n         self.inner.shrink_to_fit()"}, {"sha": "78e92a3331a1c4678ced79fe119cc263cdb5567b", "filename": "library/std/src/sys/windows/os_str.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fos_str.rs?ref=4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef", "patch": "@@ -1,6 +1,7 @@\n /// The underlying OsString/OsStr implementation on Windows is a\n /// wrapper around the \"WTF-8\" encoding; see the `wtf8` module for more.\n use crate::borrow::Cow;\n+use crate::collections::TryReserveError;\n use crate::fmt;\n use crate::mem;\n use crate::rc::Rc;\n@@ -104,10 +105,18 @@ impl Buf {\n         self.inner.reserve(additional)\n     }\n \n+    pub fn try_reserve(&mut self, additional: usize) -> Result<(), TryReserveError> {\n+        self.inner.try_reserve(additional)\n+    }\n+\n     pub fn reserve_exact(&mut self, additional: usize) {\n         self.inner.reserve_exact(additional)\n     }\n \n+    pub fn try_reserve_exact(&mut self, additional: usize) -> Result<(), TryReserveError> {\n+        self.inner.try_reserve_exact(additional)\n+    }\n+\n     pub fn shrink_to_fit(&mut self) {\n         self.inner.shrink_to_fit()\n     }"}, {"sha": "7a6e6246357d1d726162237e59db7faf05a079f5", "filename": "library/std/src/sys_common/wtf8.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef/library%2Fstd%2Fsrc%2Fsys_common%2Fwtf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef/library%2Fstd%2Fsrc%2Fsys_common%2Fwtf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fwtf8.rs?ref=4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef", "patch": "@@ -22,6 +22,7 @@ use core::str::next_code_point;\n \n use crate::borrow::Cow;\n use crate::char;\n+use crate::collections::TryReserveError;\n use crate::fmt;\n use crate::hash::{Hash, Hasher};\n use crate::iter::FromIterator;\n@@ -231,11 +232,47 @@ impl Wtf8Buf {\n         self.bytes.reserve(additional)\n     }\n \n+    /// Tries to reserve capacity for at least `additional` more length units\n+    /// in the given `Wtf8Buf`. The `Wtf8Buf` may reserve more space to avoid\n+    /// frequent reallocations. After calling `try_reserve`, capacity will be\n+    /// greater than or equal to `self.len() + additional`. Does nothing if\n+    /// capacity is already sufficient.\n+    ///\n+    /// # Errors\n+    ///\n+    /// If the capacity overflows, or the allocator reports a failure, then an error\n+    /// is returned.\n+    #[inline]\n+    pub fn try_reserve(&mut self, additional: usize) -> Result<(), TryReserveError> {\n+        self.bytes.try_reserve(additional)\n+    }\n+\n     #[inline]\n     pub fn reserve_exact(&mut self, additional: usize) {\n         self.bytes.reserve_exact(additional)\n     }\n \n+    /// Tries to reserve the minimum capacity for exactly `additional`\n+    /// length units in the given `Wtf8Buf`. After calling\n+    /// `try_reserve_exact`, capacity will be greater than or equal to\n+    /// `self.len() + additional` if it returns `Ok(())`.\n+    /// Does nothing if the capacity is already sufficient.\n+    ///\n+    /// Note that the allocator may give the `Wtf8Buf` more space than it\n+    /// requests. Therefore, capacity can not be relied upon to be precisely\n+    /// minimal. Prefer [`try_reserve`] if future insertions are expected.\n+    ///\n+    /// [`try_reserve`]: Wtf8Buf::try_reserve\n+    ///\n+    /// # Errors\n+    ///\n+    /// If the capacity overflows, or the allocator reports a failure, then an error\n+    /// is returned.\n+    #[inline]\n+    pub fn try_reserve_exact(&mut self, additional: usize) -> Result<(), TryReserveError> {\n+        self.bytes.try_reserve_exact(additional)\n+    }\n+\n     #[inline]\n     pub fn shrink_to_fit(&mut self) {\n         self.bytes.shrink_to_fit()"}, {"sha": "c0ab093f9524ad8c2a443b08a92a7d45350ec103", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef", "patch": "@@ -662,6 +662,8 @@ pub fn rustc_cargo_env(builder: &Builder<'_>, cargo: &mut Cargo, target: TargetS\n         .env(\"CFG_VERSION\", builder.rust_version());\n \n     let libdir_relative = builder.config.libdir_relative().unwrap_or_else(|| Path::new(\"lib\"));\n+    let target_config = builder.config.target_config.get(&target);\n+\n     cargo.env(\"CFG_LIBDIR_RELATIVE\", libdir_relative);\n \n     if let Some(ref ver_date) = builder.rust_info.commit_date() {\n@@ -673,9 +675,15 @@ pub fn rustc_cargo_env(builder: &Builder<'_>, cargo: &mut Cargo, target: TargetS\n     if !builder.unstable_features() {\n         cargo.env(\"CFG_DISABLE_UNSTABLE_FEATURES\", \"1\");\n     }\n-    if let Some(ref s) = builder.config.rustc_default_linker {\n+\n+    // Prefer the current target's own default_linker, else a globally\n+    // specified one.\n+    if let Some(s) = target_config.and_then(|c| c.default_linker.as_ref()) {\n+        cargo.env(\"CFG_DEFAULT_LINKER\", s);\n+    } else if let Some(ref s) = builder.config.rustc_default_linker {\n         cargo.env(\"CFG_DEFAULT_LINKER\", s);\n     }\n+\n     if builder.config.rustc_parallel {\n         cargo.rustflag(\"--cfg=parallel_compiler\");\n         cargo.rustdocflag(\"--cfg=parallel_compiler\");\n@@ -700,7 +708,6 @@ pub fn rustc_cargo_env(builder: &Builder<'_>, cargo: &mut Cargo, target: TargetS\n         }\n         let llvm_config = builder.ensure(native::Llvm { target });\n         cargo.env(\"LLVM_CONFIG\", &llvm_config);\n-        let target_config = builder.config.target_config.get(&target);\n         if let Some(s) = target_config.and_then(|c| c.llvm_config.as_ref()) {\n             cargo.env(\"CFG_LLVM_ROOT\", s);\n         }"}, {"sha": "7a4593a75f280b06cd6bf9324a5947dce8d74b2d", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef", "patch": "@@ -294,6 +294,7 @@ pub struct Target {\n     pub cxx: Option<PathBuf>,\n     pub ar: Option<PathBuf>,\n     pub ranlib: Option<PathBuf>,\n+    pub default_linker: Option<PathBuf>,\n     pub linker: Option<PathBuf>,\n     pub ndk: Option<PathBuf>,\n     pub sanitizers: Option<bool>,\n@@ -531,6 +532,7 @@ struct TomlTarget {\n     cxx: Option<String>,\n     ar: Option<String>,\n     ranlib: Option<String>,\n+    default_linker: Option<PathBuf>,\n     linker: Option<String>,\n     llvm_config: Option<String>,\n     llvm_filecheck: Option<String>,"}, {"sha": "d4701a25614cdfb90956423798ed480cb224a3d6", "filename": "src/ci/docker/host-x86_64/x86_64-gnu-tools/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2FDockerfile?ref=4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef", "patch": "@@ -72,7 +72,7 @@ ENV PATH=\"/node-v14.4.0-linux-x64/bin:${PATH}\"\n # https://github.com/puppeteer/puppeteer/issues/375\n #\n # We also specify the version in case we need to update it to go around cache limitations.\n-RUN npm install -g browser-ui-test@0.5.1 --unsafe-perm=true\n+RUN npm install -g browser-ui-test@0.5.3 --unsafe-perm=true\n \n ENV RUST_CONFIGURE_ARGS \\\n   --build=x86_64-unknown-linux-gnu \\"}, {"sha": "981eb9589e9f1cb8ac7db8d96bca71911db5d811", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef", "patch": "@@ -955,7 +955,7 @@ fn fmt_type<'cx>(\n                 Ok((ref url, _, ref path)) if !f.alternate() => {\n                     write!(\n                         f,\n-                        \"<a class=\\\"type\\\" href=\\\"{url}#{shortty}.{name}\\\" \\\n+                        \"<a class=\\\"associatedtype\\\" href=\\\"{url}#{shortty}.{name}\\\" \\\n                                     title=\\\"type {path}::{name}\\\">{name}</a>\",\n                         url = url,\n                         shortty = ItemType::AssocType,"}, {"sha": "16334890da674ed6b6c947988269ce4d14181cfa", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef", "patch": "@@ -788,7 +788,7 @@ fn assoc_type(\n ) {\n     write!(\n         w,\n-        \"{}type <a href=\\\"{}\\\" class=\\\"type\\\">{}</a>\",\n+        \"{}type <a href=\\\"{}\\\" class=\\\"associatedtype\\\">{}</a>\",\n         extra,\n         naive_assoc_href(it, link, cx),\n         it.name.as_ref().unwrap()"}, {"sha": "e5c667a37c6696681dfd25521c121259e8507081", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef", "patch": "@@ -2007,6 +2007,16 @@ details.rustdoc-toggle[open] > summary.hideme::after {\n \t\tmax-width: 100vw;\n \t\twidth: 100vw;\n \t}\n+\n+\t/* Position of the \"[-]\" element. */\n+\tdetails.rustdoc-toggle:not(.top-doc) > summary {\n+\t\tmargin-left: 10px;\n+\t}\n+\t.impl-items > details.rustdoc-toggle > summary:not(.hideme)::before,\n+\t#main-content > details.rustdoc-toggle:not(.top-doc) > summary::before,\n+\t#main-content > div > details.rustdoc-toggle > summary::before {\n+\t\tleft: -11px;\n+\t}\n }\n \n @media print {"}, {"sha": "38040eeca52d494aef3e88cafe31b6dbdfdbd632", "filename": "src/librustdoc/html/static/css/themes/ayu.css", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "raw_url": "https://github.com/rust-lang/rust/raw/4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css?ref=4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef", "patch": "@@ -167,29 +167,35 @@ pre, .rustdoc.source .example-wrap {\n \n .content .item-info::before { color: #ccc; }\n \n-.content span.foreigntype, .content a.foreigntype { color: #ef57ff; }\n-.content span.union, .content a.union { color: #98a01c; }\n+.content span.foreigntype, .content a.foreigntype { color: #ffa0a5; }\n+.content span.union, .content a.union { color: #ffa0a5; }\n .content span.constant, .content a.constant,\n-.content span.static, .content a.static { color: #6380a0; }\n-.content span.primitive, .content a.primitive { color: #32889b; }\n-.content span.traitalias, .content a.traitalias { color: #57d399; }\n-.content span.keyword, .content a.keyword { color: #de5249; }\n+.content span.static, .content a.static { color: #39AFD7; }\n+.content span.primitive, .content a.primitive { color: #ffa0a5; }\n+.content span.traitalias, .content a.traitalias { color: #39AFD7; }\n+.content span.keyword, .content a.keyword { color: #39AFD7; }\n \n .content span.externcrate, .content span.mod, .content a.mod {\n-\tcolor: #acccf9;\n+\tcolor: #39AFD7;\n }\n .content span.struct, .content a.struct {\n \tcolor: #ffa0a5;\n }\n .content span.enum, .content a.enum {\n-\tcolor: #99e0c9;\n+\tcolor: #ffa0a5;\n }\n .content span.trait, .content a.trait {\n \tcolor: #39AFD7;\n }\n .content span.type, .content a.type {\n-\tcolor: #cfbcf5;\n+\tcolor: #39AFD7;\n }\n+.content span.type,\n+.content a.type,\n+.block a.current.type { color: #39AFD7; }\n+.content span.associatedtype,\n+.content a.associatedtype,\n+.block a.current.associatedtype { color: #39AFD7; }\n .content span.fn, .content a.fn, .content span.method,\n .content a.method, .content span.tymethod,\n .content a.tymethod, .content .fnname {\n@@ -454,11 +460,12 @@ above the `@media (max-width: 700px)` rules due to a bug in the css checker */\n .block a.current.derive,.content span.macro,.content a.macro,.block a.current.macro {}\n .content span.struct,.content a.struct,.block a.current.struct {}\n #titles>button:hover,#titles>button.selected {}\n-.content span.type,.content a.type,.block a.current.type {}\n+.content span.typedef,.content a.typedef,.block a.current.typedef {}\n .content span.union,.content a.union,.block a.current.union {}\n pre.rust .lifetime {}\n .stab.unstable {}\n-h2,h3:not(.impl):not(.method):not(.type):not(.tymethod),h4:not(.method):not(.type):not(.tymethod) {}\n+h2,\n+h3:not(.impl):not(.method):not(.type):not(.tymethod), h4:not(.method):not(.type):not(.tymethod) {}\n .content span.enum,.content a.enum,.block a.current.enum {}\n .content span.constant,.content a.constant,.block a.current.constant,.content span.static,\n .content a.static, .block a.current.static {}\n@@ -495,6 +502,7 @@ a.result-fn:focus,\n a.result-method:focus,\n a.result-tymethod:focus {}\n a.result-type:focus {}\n+a.result-associatedtype:focus {}\n a.result-foreigntype:focus {}\n a.result-attr:focus,\n a.result-derive:focus,"}, {"sha": "f4181e431c896259350f4b082252fb751508503e", "filename": "src/librustdoc/html/static/css/themes/dark.css", "status": "modified", "additions": 20, "deletions": 18, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css?ref=4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef", "patch": "@@ -119,47 +119,49 @@ pre, .rustdoc.source .example-wrap {\n a.result-trait:focus { background-color: #013191; }\n a.result-traitalias:focus { background-color: #013191; }\n a.result-mod:focus,\n-a.result-externcrate:focus { background-color: #afc6e4; }\n-a.result-mod:focus { background-color: #803a1b; }\n-a.result-externcrate:focus { background-color: #396bac; }\n-a.result-enum:focus { background-color: #5b4e68; }\n+a.result-externcrate:focus { background-color: #884719; }\n+a.result-enum:focus { background-color: #194e9f; }\n a.result-struct:focus { background-color: #194e9f; }\n-a.result-union:focus { background-color: #b7bd49; }\n+a.result-union:focus { background-color: #194e9f; }\n a.result-fn:focus,\n a.result-method:focus,\n a.result-tymethod:focus { background-color: #4950ed; }\n-a.result-type:focus { background-color: #38902c; }\n-a.result-foreigntype:focus { background-color: #b200d6; }\n+a.result-type:focus { background-color: #194e9f; }\n+a.result-associatedtype:focus { background-color: #884719; }\n+a.result-foreigntype:focus { background-color: #194e9f; }\n a.result-attr:focus,\n a.result-derive:focus,\n a.result-macro:focus { background-color: #217d1c; }\n a.result-constant:focus,\n-a.result-static:focus { background-color: #0063cc; }\n-a.result-primitive:focus { background-color: #00708a; }\n+a.result-static:focus { background-color: #884719; }\n+a.result-primitive:focus { background-color: #194e9f; }\n a.result-keyword:focus { background-color: #884719; }\n \n .content .item-info::before { color: #ccc; }\n \n-.content span.enum, .content a.enum, .block a.current.enum { color: #82b089; }\n+.content span.enum, .content a.enum, .block a.current.enum { color: #2dbfb8; }\n .content span.struct, .content a.struct, .block a.current.struct { color: #2dbfb8; }\n-.content span.type, .content a.type, .block a.current.type { color: #ff7f00; }\n-.content span.foreigntype, .content a.foreigntype, .block a.current.foreigntype { color: #dd7de8; }\n+.content span.type, .content a.type, .block a.current.type { color: #2dbfb8; }\n+.content span.associatedtype,\n+.content a.associatedtype,\n+.block a.current.associatedtype { color: #D2991D; }\n+.content span.foreigntype, .content a.foreigntype, .block a.current.foreigntype { color: #2dbfb8; }\n .content span.attr, .content a.attr, .block a.current.attr,\n .content span.derive, .content a.derive, .block a.current.derive,\n .content span.macro, .content a.macro, .block a.current.macro { color: #09bd00; }\n-.content span.union, .content a.union, .block a.current.union { color: #a6ae37; }\n+.content span.union, .content a.union, .block a.current.union { color: #2dbfb8; }\n .content span.constant, .content a.constant, .block a.current.constant,\n-.content span.static, .content a.static, .block a.current.static { color: #82a5c9; }\n-.content span.primitive, .content a.primitive, .block a.current.primitive { color: #43aec7; }\n+.content span.static, .content a.static, .block a.current.static { color: #D2991D; }\n+.content span.primitive, .content a.primitive, .block a.current.primitive { color: #2dbfb8; }\n .content span.externcrate,\n-.content span.mod, .content a.mod, .block a.current.mod { color: #bda000; }\n+.content span.mod, .content a.mod, .block a.current.mod { color: #D2991D; }\n .content span.trait, .content a.trait, .block a.current.trait { color: #b78cf2; }\n-.content span.traitalias, .content a.traitalias, .block a.current.traitalias { color: #b397da; }\n+.content span.traitalias, .content a.traitalias, .block a.current.traitalias { color: #b78cf2; }\n .content span.fn, .content a.fn, .block a.current.fn,\n .content span.method, .content a.method, .block a.current.method,\n .content span.tymethod, .content a.tymethod, .block a.current.tymethod,\n .content .fnname{ color: #2BAB63; }\n-.content span.keyword, .content a.keyword, .block a.current.keyword { color: #de5249; }\n+.content span.keyword, .content a.keyword, .block a.current.keyword { color: #D2991D; }\n \n pre.rust .comment { color: #8d8d8b; }\n pre.rust .doccomment { color: #8ca375; }"}, {"sha": "176f63098a49f5c8fe22cb7384cdc214b924b4d3", "filename": "src/librustdoc/html/static/css/themes/light.css", "status": "modified", "additions": 34, "deletions": 30, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css?ref=4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef", "patch": "@@ -9,7 +9,7 @@ h1, h2, h3, h4 {\n \tcolor: black;\n }\n h1.fqn {\n-\tborder-bottom-color: #D5D5D5;\n+\tborder-bottom-color: #DDDDDD;\n }\n h2, h3, h4 {\n \tborder-bottom-color: #DDDDDD;\n@@ -31,7 +31,7 @@ pre, .rustdoc.source .example-wrap {\n }\n \n .sidebar {\n-\tbackground-color: #F1F1F1;\n+\tbackground-color: #F5F5F5;\n }\n \n /* Improve the scrollbar display on firefox */\n@@ -90,7 +90,7 @@ pre, .rustdoc.source .example-wrap {\n \n .line-numbers span { color: #c67e2d; }\n .line-numbers .line-highlighted {\n-\tbackground-color: #f6fdb0 !important;\n+\tbackground-color: #FDFFD3 !important;\n }\n \n .docblock h1, .docblock h2, .docblock h3, .docblock h4, .docblock h5, .docblock h6 {\n@@ -120,44 +120,48 @@ a.result-trait:focus { background-color: #c7b6ff; }\n a.result-traitalias:focus { background-color: #c7b6ff; }\n a.result-mod:focus,\n a.result-externcrate:focus { background-color: #afc6e4; }\n-a.result-enum:focus { background-color: #b4d1b9; }\n+a.result-enum:focus { background-color: #e7b1a0; }\n a.result-struct:focus { background-color: #e7b1a0; }\n-a.result-union:focus { background-color: #b7bd49; }\n+a.result-union:focus { background-color: #e7b1a0; }\n a.result-fn:focus,\n a.result-method:focus,\n a.result-tymethod:focus { background-color: #c6afb3; }\n-a.result-type:focus { background-color: #ffc891; }\n-a.result-foreigntype:focus { background-color: #f5c4ff; }\n+a.result-type:focus { background-color: #e7b1a0; }\n+a.result-associatedtype:focus { background-color: #afc6e4; }\n+a.result-foreigntype:focus { background-color: #e7b1a0; }\n a.result-attr:focus,\n a.result-derive:focus,\n a.result-macro:focus { background-color: #8ce488; }\n a.result-constant:focus,\n-a.result-static:focus { background-color: #c3e0ff; }\n-a.result-primitive:focus { background-color: #9aecff; }\n-a.result-keyword:focus { background-color: #f99650; }\n+a.result-static:focus { background-color: #afc6e4; }\n+a.result-primitive:focus { background-color: #e7b1a0; }\n+a.result-keyword:focus { background-color: #afc6e4; }\n \n .content .item-info::before { color: #ccc; }\n \n-.content span.enum, .content a.enum, .block a.current.enum { color: #508157; }\n-.content span.struct, .content a.struct, .block a.current.struct { color: #ad448e; }\n-.content span.type, .content a.type, .block a.current.type { color: #ba5d00; }\n-.content span.foreigntype, .content a.foreigntype, .block a.current.foreigntype { color: #cd00e2; }\n+.content span.enum, .content a.enum, .block a.current.enum { color: #AD378A; }\n+.content span.struct, .content a.struct, .block a.current.struct { color: #AD378A; }\n+.content span.type, .content a.type, .block a.current.type { color:  #AD378A; }\n+.content span.foreigntype, .content a.foreigntype, .block a.current.foreigntype { color: #3873AD; }\n+.content span.associatedtype,\n+.content a.associatedtype,\n+.block a.current.associatedtype { color: #3873AD; }\n .content span.attr, .content a.attr, .block a.current.attr,\n .content span.derive, .content a.derive, .block a.current.derive,\n .content span.macro, .content a.macro, .block a.current.macro { color: #068000; }\n-.content span.union, .content a.union, .block a.current.union { color: #767b27; }\n+.content span.union, .content a.union, .block a.current.union { color: #AD378A; }\n .content span.constant, .content a.constant, .block a.current.constant,\n-.content span.static, .content a.static, .block a.current.static { color: #546e8a; }\n-.content span.primitive, .content a.primitive, .block a.current.primitive { color: #2c8093; }\n+.content span.static, .content a.static, .block a.current.static { color: #3873AD; }\n+.content span.primitive, .content a.primitive, .block a.current.primitive { color: #AD378A; }\n .content span.externcrate,\n-.content span.mod, .content a.mod, .block a.current.mod { color: #4d76ae; }\n-.content span.trait, .content a.trait, .block a.current.trait { color: #7c5af3; }\n-.content span.traitalias, .content a.traitalias, .block a.current.traitalias { color: #6841f1; }\n+.content span.mod, .content a.mod, .block a.current.mod { color: #3873AD; }\n+.content span.trait, .content a.trait, .block a.current.trait { color: #6E4FC9; }\n+.content span.traitalias, .content a.traitalias, .block a.current.traitalias { color: #5137AD; }\n .content span.fn, .content a.fn, .block a.current.fn,\n .content span.method, .content a.method, .block a.current.method,\n .content span.tymethod, .content a.tymethod, .block a.current.tymethod,\n-.content .fnname { color: #9a6e31; }\n-.content span.keyword, .content a.keyword, .block a.current.keyword { color: #de5249; }\n+.content .fnname { color: #AD7C37; }\n+.content span.keyword, .content a.keyword, .block a.current.keyword { color: #3873AD; }\n \n nav:not(.sidebar) {\n \tborder-bottom-color: #e0e0e0;\n@@ -268,7 +272,7 @@ pre.rust .question-mark {\n }\n \n a.test-arrow {\n-\tbackground-color: rgba(78, 139, 202, 0.2);\n+\tbackground-color: rgb(78, 139, 202, 0.2);\n }\n \n a.test-arrow:hover{\n@@ -285,7 +289,7 @@ a.test-arrow:hover{\n }\n \n :target {\n-\tborder-right: 3px solid #ffb44c;\n+\tborder-right: 3px solid #AD7C37;\n }\n \n pre.compile_fail {\n@@ -337,7 +341,7 @@ pre.ignore:hover, .information:hover + pre.ignore {\n }\n \n .search-failed a {\n-\tcolor: #0089ff;\n+\tcolor: #3873AD;\n }\n \n .tooltip::after {\n@@ -374,18 +378,18 @@ pre.ignore:hover, .information:hover + pre.ignore {\n \n @media (max-width: 700px) {\n \t.sidebar-menu {\n-\t\tbackground-color: #F1F1F1;\n+\t\tbackground-color: #F5F5F5;\n \t\tborder-bottom-color: #e0e0e0;\n \t\tborder-right-color: #e0e0e0;\n \t}\n \n \t.sidebar-elems {\n-\t\tbackground-color: #F1F1F1;\n+\t\tbackground-color: #F5F5F5;\n \t\tborder-right-color: #000;\n \t}\n \n \t#sidebar-filler {\n-\t\tbackground-color: #F1F1F1;\n+\t\tbackground-color: #F5F5F5;\n \t\tborder-bottom-color: #e0e0e0;\n \t}\n }\n@@ -453,13 +457,13 @@ kbd {\n }\n \n #sidebar-toggle {\n-\tbackground-color: #F1F1F1;\n+\tbackground-color: #F5F5F5;\n }\n #sidebar-toggle:hover {\n \tbackground-color: #E0E0E0;\n }\n #source-sidebar {\n-\tbackground-color: #F1F1F1;\n+\tbackground-color: #F5F5F5;\n }\n #source-sidebar > .title {\n \tborder-bottom-color: #ccc;"}, {"sha": "1ddb345e5664c20f6b6a1e8159ee792993c68f53", "filename": "src/test/incremental/hashes/inline_asm.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef/src%2Ftest%2Fincremental%2Fhashes%2Finline_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef/src%2Ftest%2Fincremental%2Fhashes%2Finline_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Finline_asm.rs?ref=4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef", "patch": "@@ -8,6 +8,7 @@\n // build-pass (FIXME(62277): could be check-pass?)\n // revisions: cfail1 cfail2 cfail3 cfail4 cfail5 cfail6\n // compile-flags: -Z query-dep-graph\n+// needs-asm-support\n // [cfail1]compile-flags: -Zincremental-ignore-spans\n // [cfail2]compile-flags: -Zincremental-ignore-spans\n // [cfail3]compile-flags: -Zincremental-ignore-spans"}, {"sha": "5917152e1bcfe0324e4f3b6974409db364e27d0e", "filename": "src/test/incremental/issue-72386.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef/src%2Ftest%2Fincremental%2Fissue-72386.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef/src%2Ftest%2Fincremental%2Fissue-72386.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fissue-72386.rs?ref=4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef", "patch": "@@ -1,4 +1,5 @@\n // revisions: rpass1 cfail1 rpass3\n+// needs-asm-support\n // only-x86_64\n // Regression test for issue #72386\n // Checks that we don't ICE when switching to an invalid register"}, {"sha": "ca60be72cea468a6626d13b34d03f546deca3cc0", "filename": "src/test/rustdoc-gui/anchors.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef/src%2Ftest%2Frustdoc-gui%2Fanchors.goml", "raw_url": "https://github.com/rust-lang/rust/raw/4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef/src%2Ftest%2Frustdoc-gui%2Fanchors.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fanchors.goml?ref=4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef", "patch": "@@ -12,7 +12,7 @@ reload:\n \n assert-css: (\"#toggle-all-docs\", {\"color\": \"rgb(0, 0, 0)\"})\n assert-css: (\".fqn .in-band a:nth-of-type(1)\", {\"color\": \"rgb(0, 0, 0)\"})\n-assert-css: (\".fqn .in-band a:nth-of-type(2)\", {\"color\": \"rgb(173, 68, 142)\"})\n+assert-css: (\".fqn .in-band a:nth-of-type(2)\", {\"color\": \"rgb(173, 55, 138)\"})\n assert-css: (\".srclink\", {\"color\": \"rgb(0, 0, 0)\"})\n assert-css: (\".srclink\", {\"color\": \"rgb(0, 0, 0)\"})\n "}, {"sha": "a64ac8b422fc0310057f8fbf8ef230681a27c4a4", "filename": "src/test/rustdoc-gui/font-weight.goml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef/src%2Ftest%2Frustdoc-gui%2Ffont-weight.goml", "raw_url": "https://github.com/rust-lang/rust/raw/4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef/src%2Ftest%2Frustdoc-gui%2Ffont-weight.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Ffont-weight.goml?ref=4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef", "patch": "@@ -37,8 +37,8 @@ assert-css: (\n     {\"font-weight\": \"400\"},\n )\n \n-assert-count: (\".methods .type\", 1)\n-assert-css: (\".methods .type\", {\"font-weight\": \"600\"})\n+assert-count: (\".methods .associatedtype\", 1)\n+assert-css: (\".methods .associatedtype\", {\"font-weight\": \"600\"})\n assert-count: (\".methods .constant\", 1)\n assert-css: (\".methods .constant\", {\"font-weight\": \"600\"})\n assert-css: (\".methods .method\", {\"font-weight\": \"600\"})"}, {"sha": "b370dd012fae1d654cbbe592402e5fe9baa3f124", "filename": "src/test/rustdoc-gui/toggle-docs-mobile.goml", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef/src%2Ftest%2Frustdoc-gui%2Ftoggle-docs-mobile.goml", "raw_url": "https://github.com/rust-lang/rust/raw/4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef/src%2Ftest%2Frustdoc-gui%2Ftoggle-docs-mobile.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Ftoggle-docs-mobile.goml?ref=4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef", "patch": "@@ -9,6 +9,16 @@ assert-attribute: (\".top-doc\", {\"open\": \"\"})\n click: (3, 280)\n assert-attribute: (\".top-doc\", {\"open\": \"\"})\n \n+// Assert the position of the toggle on the top doc block.\n+assert-position: (\".top-doc summary::before\", {\"x\": 4})\n+// Assert the position of the toggle on the impl block.\n+assert-position: (\"#implementations + details > summary::before\", {\"x\": 4})\n+// Assert the position of the toggle on a method.\n+assert-position: (\n+    \"#trait-implementations-list .impl-items .method-toggle > summary::before\",\n+    {\"x\": 4},\n+)\n+\n // Now we do the same but with a little bigger width\n size: (600, 600)\n assert-attribute: (\".top-doc\", {\"open\": \"\"})"}, {"sha": "a409d64131afdfa96de35c418376f41569be6738", "filename": "src/test/rustdoc/assoc-item-cast.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef/src%2Ftest%2Frustdoc%2Fassoc-item-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef/src%2Ftest%2Frustdoc%2Fassoc-item-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fassoc-item-cast.rs?ref=4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef", "patch": "@@ -1,6 +1,5 @@\n #![crate_name = \"foo\"]\n \n-\n pub trait Expression {\n     type SqlType;\n }\n@@ -11,5 +10,5 @@ pub trait AsExpression<T> {\n }\n \n // @has foo/type.AsExprOf.html\n-// @has - '//*[@class=\"rust typedef\"]' 'type AsExprOf<Item, Type> = <Item as AsExpression<Type>>::Expression;'\n+// @has - '//pre[@class=\"rust typedef\"]' 'type AsExprOf<Item, Type> = <Item as AsExpression<Type>>::Expression;'\n pub type AsExprOf<Item, Type> = <Item as AsExpression<Type>>::Expression;"}, {"sha": "db9adb4838e3e1e1889e6b69f3f6e7104f89f5f5", "filename": "src/test/rustdoc/trait-impl-items-links-and-anchors.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef/src%2Ftest%2Frustdoc%2Ftrait-impl-items-links-and-anchors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef/src%2Ftest%2Frustdoc%2Ftrait-impl-items-links-and-anchors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftrait-impl-items-links-and-anchors.rs?ref=4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef", "patch": "@@ -6,9 +6,8 @@ pub trait MyTrait {\n     fn defaulted_override(&self) {}\n }\n \n-\n impl MyTrait for String {\n-    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"associatedtype.Assoc-1\"]//a[@class=\"type\"]/@href' #associatedtype.Assoc\n+    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"associatedtype.Assoc-1\"]//a[@class=\"associatedtype\"]/@href' #associatedtype.Assoc\n     // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"associatedtype.Assoc-1\"]//a[@class=\"anchor\"]/@href' #associatedtype.Assoc-1\n     type Assoc = ();\n     // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"associatedconstant.VALUE-1\"]//a[@class=\"constant\"]/@href' #associatedconstant.VALUE\n@@ -23,7 +22,7 @@ impl MyTrait for String {\n }\n \n impl MyTrait for Vec<u8> {\n-    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"associatedtype.Assoc-2\"]//a[@class=\"type\"]/@href' #associatedtype.Assoc\n+    // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"associatedtype.Assoc-2\"]//a[@class=\"associatedtype\"]/@href' #associatedtype.Assoc\n     // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"associatedtype.Assoc-2\"]//a[@class=\"anchor\"]/@href' #associatedtype.Assoc-2\n     type Assoc = ();\n     // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"associatedconstant.VALUE-2\"]//a[@class=\"constant\"]/@href' #associatedconstant.VALUE\n@@ -39,7 +38,7 @@ impl MyTrait for Vec<u8> {\n \n impl MyTrait for MyStruct {\n     // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"associatedtype.Assoc-3\"]//a[@class=\"anchor\"]/@href' #associatedtype.Assoc-3\n-    // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//div[@id=\"associatedtype.Assoc\"]//a[@class=\"type\"]/@href' trait.MyTrait.html#associatedtype.Assoc\n+    // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//div[@id=\"associatedtype.Assoc\"]//a[@class=\"associatedtype\"]/@href' trait.MyTrait.html#associatedtype.Assoc\n     // @has trait_impl_items_links_and_anchors/struct.MyStruct.html '//div[@id=\"associatedtype.Assoc\"]//a[@class=\"anchor\"]/@href' #associatedtype.Assoc\n     type Assoc = bool;\n     // @has trait_impl_items_links_and_anchors/trait.MyTrait.html '//div[@id=\"associatedconstant.VALUE-3\"]//a[@class=\"anchor\"]/@href' #associatedconstant.VALUE-3"}, {"sha": "c8f9e5704671e23b8fe04beca2e74f208f3de4dd", "filename": "src/test/ui/consts/invalid-union.32bit.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef/src%2Ftest%2Fui%2Fconsts%2Finvalid-union.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef/src%2Ftest%2Fui%2Fconsts%2Finvalid-union.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Finvalid-union.32bit.stderr?ref=4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef", "patch": "@@ -0,0 +1,24 @@\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/invalid-union.rs:41:1\n+   |\n+LL | fn main() {\n+   | ^^^^^^^^^ type validation failed at .<deref>.y.<enum-variant(B)>.0: encountered `UnsafeCell` in a `const`\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n+   = note: the raw bytes of the constant (size: 4, align: 4) {\n+               \u257e\u2500alloc7\u2500\u2500\u257c                                     \u2502 \u257e\u2500\u2500\u257c\n+           }\n+\n+error: erroneous constant used\n+  --> $DIR/invalid-union.rs:42:25\n+   |\n+LL |     let _: &'static _ = &C;\n+   |                         ^^ referenced constant has errors\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "2ca54ccf9a09ebf6a824e7f7866039810dd9b0b4", "filename": "src/test/ui/consts/invalid-union.64bit.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef/src%2Ftest%2Fui%2Fconsts%2Finvalid-union.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef/src%2Ftest%2Fui%2Fconsts%2Finvalid-union.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Finvalid-union.64bit.stderr?ref=4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef", "patch": "@@ -0,0 +1,24 @@\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/invalid-union.rs:41:1\n+   |\n+LL | fn main() {\n+   | ^^^^^^^^^ type validation failed at .<deref>.y.<enum-variant(B)>.0: encountered `UnsafeCell` in a `const`\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n+   = note: the raw bytes of the constant (size: 8, align: 8) {\n+               \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc7\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c                         \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n+           }\n+\n+error: erroneous constant used\n+  --> $DIR/invalid-union.rs:42:25\n+   |\n+LL |     let _: &'static _ = &C;\n+   |                         ^^ referenced constant has errors\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "1d5cc978a9e6bbb0f4ddb130496989abfad65f2b", "filename": "src/test/ui/consts/invalid-union.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef/src%2Ftest%2Fui%2Fconsts%2Finvalid-union.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef/src%2Ftest%2Fui%2Fconsts%2Finvalid-union.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Finvalid-union.rs?ref=4d2e0fd96ccbb9ade41f1a3f07b14b7437f8e4ef", "patch": "@@ -0,0 +1,44 @@\n+// Check that constants with interior mutability inside unions are rejected\n+// during validation.\n+//\n+// Note that this test case relies on undefined behaviour to construct a\n+// constant with interior mutability that is \"invisible\" to the static checks.\n+// If for some reason this approach no longer works, it is should be fine to\n+// remove the test case.\n+//\n+// build-fail\n+// stderr-per-bitwidth\n+#![feature(const_mut_refs)]\n+#![feature(const_ptr_offset)]\n+#![feature(untagged_unions)]\n+use std::cell::Cell;\n+\n+#[repr(C)]\n+struct S {\n+    x: u32,\n+    y: E,\n+}\n+\n+#[repr(u32)]\n+enum E {\n+    A,\n+    B(U)\n+}\n+\n+union U {\n+    cell: Cell<u32>,\n+}\n+\n+const C: S = {\n+    let s = S { x: 0, y: E::A };\n+    // Go through an &u32 reference which is definitely not allowed to mutate anything.\n+    let p = &s.x as *const u32 as *mut u32;\n+    // Change enum tag to E::B.\n+    unsafe { *p.add(1) = 1 };\n+    s\n+};\n+\n+fn main() { //~ ERROR it is undefined behavior to use this value\n+    let _: &'static _ = &C; //~ ERROR erroneous constant used\n+    //~^ WARN this was previously accepted\n+}"}]}