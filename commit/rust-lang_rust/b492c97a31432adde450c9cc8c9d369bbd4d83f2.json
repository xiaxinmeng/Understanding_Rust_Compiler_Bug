{"sha": "b492c97a31432adde450c9cc8c9d369bbd4d83f2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0OTJjOTdhMzE0MzJhZGRlNDUwYzljYzhjOWQzNjliYmQ0ZDgzZjI=", "commit": {"author": {"name": "Lukas Kalbertodt", "email": "lukas.kalbertodt@gmail.com", "date": "2019-11-01T11:04:18Z"}, "committer": {"name": "Lukas Kalbertodt", "email": "lukas.kalbertodt@gmail.com", "date": "2019-11-06T13:43:28Z"}, "message": "Add future incompatibility lint for `array.into_iter()`\n\nAs we might want to add `IntoIterator` impls for arrays in the future,\nand since that introduces a breaking change, this lint warns and\nsuggests using `iter()` instead (which is shorter and more explicit).", "tree": {"sha": "4df4cc9e5db61b16a37aa79ae4a33e5704359109", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4df4cc9e5db61b16a37aa79ae4a33e5704359109"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b492c97a31432adde450c9cc8c9d369bbd4d83f2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEENwctvZ5TgcKYXim8PLr0FT+BhicFAl3CzgAACgkQPLr0FT+B\nhicKVg/8DjdkoWOPEeEnCWftq7du1j4Uh2hnp2qh/9M6nhK58C02SgYIU/ztCu7Z\nh5DxowvyG/dZSJ6dv5N7DE34NXQ5/w0ETJf2wICF9GCf6IwSYH1wkvR8rf6Hsfsu\n6nFxqrjrwnou0wh6Cw3aspd5YC/ZntJ29QkBkg8IyrH4OxgthjR35ITPFS3ckQIc\n4o8ZO1QDVCll8gTqK/ZE7gZuWmO+KC4aqrekTHPwa6kEqzF1UY9v3kZXcVco2V9c\nB/qNlsPav2EfHwLafHiCSNWzKeVrkm+ua8cSF7aX9US3yCTK7VGP2+BlhBBxyigS\nGJhbqqb7EFXH6qt+NH0TF2jFqVfoSxzDdCGyksCWpLe2VQlpH4n8bX7S5GEKZ/OZ\nnq260EFGaAuZpGyx/b4sV7Rw/RJUTN3i7d9BDK50zUpK/rtVs+wepPuDSbfGTUy6\n2lUk1CCe1dI5Qj/9EdGnDiVTWmIrp/WdNiTuPIxmClhynWAXb0Y4Jc6vPJgiVt28\n2ZCEFqgNwRA8KRS0dh5ojzSc7MBqtkoeUeXs3LDFjm7psJkzYNId3IwlSnijWX4n\naMs6JEoj1bnK7tFzJVk+yCUyFIOh6D18AqkA8cFhLoTxgWQXVQ4+hA8sUodpie7n\nCb82Qqpwkst2xFsrPFwVgDlZn7kRbRj7HZmd33g6pPU7e1kJERo=\n=rzOA\n-----END PGP SIGNATURE-----", "payload": "tree 4df4cc9e5db61b16a37aa79ae4a33e5704359109\nparent b3a0350c2bf5d93cb734257bbddc8300bef4b851\nauthor Lukas Kalbertodt <lukas.kalbertodt@gmail.com> 1572606258 +0100\ncommitter Lukas Kalbertodt <lukas.kalbertodt@gmail.com> 1573047808 +0100\n\nAdd future incompatibility lint for `array.into_iter()`\n\nAs we might want to add `IntoIterator` impls for arrays in the future,\nand since that introduces a breaking change, this lint warns and\nsuggests using `iter()` instead (which is shorter and more explicit).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b492c97a31432adde450c9cc8c9d369bbd4d83f2", "html_url": "https://github.com/rust-lang/rust/commit/b492c97a31432adde450c9cc8c9d369bbd4d83f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b492c97a31432adde450c9cc8c9d369bbd4d83f2/comments", "author": {"login": "LukasKalbertodt", "id": 7419664, "node_id": "MDQ6VXNlcjc0MTk2NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7419664?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LukasKalbertodt", "html_url": "https://github.com/LukasKalbertodt", "followers_url": "https://api.github.com/users/LukasKalbertodt/followers", "following_url": "https://api.github.com/users/LukasKalbertodt/following{/other_user}", "gists_url": "https://api.github.com/users/LukasKalbertodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/LukasKalbertodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LukasKalbertodt/subscriptions", "organizations_url": "https://api.github.com/users/LukasKalbertodt/orgs", "repos_url": "https://api.github.com/users/LukasKalbertodt/repos", "events_url": "https://api.github.com/users/LukasKalbertodt/events{/privacy}", "received_events_url": "https://api.github.com/users/LukasKalbertodt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LukasKalbertodt", "id": 7419664, "node_id": "MDQ6VXNlcjc0MTk2NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7419664?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LukasKalbertodt", "html_url": "https://github.com/LukasKalbertodt", "followers_url": "https://api.github.com/users/LukasKalbertodt/followers", "following_url": "https://api.github.com/users/LukasKalbertodt/following{/other_user}", "gists_url": "https://api.github.com/users/LukasKalbertodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/LukasKalbertodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LukasKalbertodt/subscriptions", "organizations_url": "https://api.github.com/users/LukasKalbertodt/orgs", "repos_url": "https://api.github.com/users/LukasKalbertodt/repos", "events_url": "https://api.github.com/users/LukasKalbertodt/events{/privacy}", "received_events_url": "https://api.github.com/users/LukasKalbertodt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3a0350c2bf5d93cb734257bbddc8300bef4b851", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3a0350c2bf5d93cb734257bbddc8300bef4b851", "html_url": "https://github.com/rust-lang/rust/commit/b3a0350c2bf5d93cb734257bbddc8300bef4b851"}], "stats": {"total": 96, "additions": 96, "deletions": 0}, "files": [{"sha": "bbdb169cac0fc89b0052d44266172851f9abd462", "filename": "src/libcore/iter/traits/collect.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b492c97a31432adde450c9cc8c9d369bbd4d83f2/src%2Flibcore%2Fiter%2Ftraits%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b492c97a31432adde450c9cc8c9d369bbd4d83f2/src%2Flibcore%2Fiter%2Ftraits%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits%2Fcollect.rs?ref=b492c97a31432adde450c9cc8c9d369bbd4d83f2", "patch": "@@ -205,6 +205,7 @@ pub trait FromIterator<A>: Sized {\n ///         .collect()\n /// }\n /// ```\n+#[rustc_diagnostic_item = \"IntoIterator\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait IntoIterator {\n     /// The type of the elements being iterated over."}, {"sha": "e73414174fb3524002bedbaee0d342660c26ff46", "filename": "src/librustc_lint/array_into_iter.rs", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/b492c97a31432adde450c9cc8c9d369bbd4d83f2/src%2Flibrustc_lint%2Farray_into_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b492c97a31432adde450c9cc8c9d369bbd4d83f2/src%2Flibrustc_lint%2Farray_into_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Farray_into_iter.rs?ref=b492c97a31432adde450c9cc8c9d369bbd4d83f2", "patch": "@@ -0,0 +1,91 @@\n+use crate::lint::{LateContext, LateLintPass, LintArray, LintContext, LintPass};\n+use rustc::{\n+    lint::FutureIncompatibleInfo,\n+    hir,\n+    ty::{\n+        self,\n+        adjustment::{Adjust, Adjustment},\n+    },\n+};\n+use syntax::{\n+    errors::Applicability,\n+    symbol::sym,\n+};\n+\n+\n+declare_lint! {\n+    pub ARRAY_INTO_ITER,\n+    Warn,\n+    \"detects calling `into_iter` on arrays\",\n+    @future_incompatible = FutureIncompatibleInfo {\n+        reference: \"issue #66145 <https://github.com/rust-lang/rust/issues/66145>\",\n+        edition: None,\n+    };\n+}\n+\n+declare_lint_pass!(\n+    /// Checks for instances of calling `into_iter` on arrays.\n+    ArrayIntoIter => [ARRAY_INTO_ITER]\n+);\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ArrayIntoIter {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx hir::Expr) {\n+        // We only care about method call expressions.\n+        if let hir::ExprKind::MethodCall(call, span, args) = &expr.kind {\n+            if call.ident.name != sym::into_iter {\n+                return;\n+            }\n+\n+            // Check if the method call actually calls the libcore\n+            // `IntoIterator::into_iter`.\n+            let def_id = cx.tables.type_dependent_def_id(expr.hir_id).unwrap();\n+            match cx.tcx.trait_of_item(def_id) {\n+                Some(trait_id) if cx.tcx.is_diagnostic_item(sym::IntoIterator, trait_id) => {},\n+                _ => return,\n+            };\n+\n+            // As this is a method call expression, we have at least one\n+            // argument.\n+            let receiver_arg = &args[0];\n+\n+            // Test if the original `self` type is an array type.\n+            match cx.tables.expr_ty(receiver_arg).kind {\n+                ty::Array(..) => {}\n+                _ => return,\n+            }\n+\n+            // Make sure that the first adjustment is an autoref coercion.\n+            match cx.tables.expr_adjustments(receiver_arg).get(0) {\n+                Some(Adjustment { kind: Adjust::Borrow(_), .. }) => {}\n+                _ => return,\n+            }\n+\n+            // Emit lint diagnostic.\n+            let target = match cx.tables.expr_ty_adjusted(receiver_arg).kind {\n+                ty::Ref(_, ty::TyS { kind: ty::Array(..), ..}, _) => \"[T; N]\",\n+                ty::Ref(_, ty::TyS { kind: ty::Slice(..), ..}, _) => \"[T]\",\n+\n+                // We know the original first argument type is an array type,\n+                // we know that the first adjustment was an autoref coercion\n+                // and we know that `IntoIterator` is the trait involved. The\n+                // array cannot be coerced to something other than a reference\n+                // to an array or to a slice.\n+                _ => bug!(\"array type coerced to something other than array or slice\"),\n+            };\n+            let msg = format!(\n+                \"this method call currently resolves to `<&{} as IntoIterator>::into_iter` (due \\\n+                    to autoref coercions), but that might change in the future when \\\n+                    `IntoIterator` impls for arrays are added.\",\n+                target,\n+            );\n+            cx.struct_span_lint(ARRAY_INTO_ITER, *span, &msg)\n+                .span_suggestion(\n+                    call.ident.span,\n+                    \"use `.iter()` instead of `.into_iter()` to avoid ambiguity\",\n+                    \"iter\".into(),\n+                    Applicability::MachineApplicable,\n+                )\n+                .emit();\n+        }\n+    }\n+}"}, {"sha": "473f8d4d3eb3d3c69f34f87a152630d17e4b8204", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b492c97a31432adde450c9cc8c9d369bbd4d83f2/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b492c97a31432adde450c9cc8c9d369bbd4d83f2/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=b492c97a31432adde450c9cc8c9d369bbd4d83f2", "patch": "@@ -21,6 +21,7 @@\n #[macro_use]\n extern crate rustc;\n \n+mod array_into_iter;\n mod error_codes;\n mod nonstandard_style;\n mod redundant_semicolon;\n@@ -56,6 +57,7 @@ use types::*;\n use unused::*;\n use non_ascii_idents::*;\n use rustc::lint::internal::*;\n+use array_into_iter::ArrayIntoIter;\n \n /// Useful for other parts of the compiler.\n pub use builtin::SoftLints;\n@@ -130,6 +132,8 @@ macro_rules! late_lint_passes {\n             // FIXME: Turn the computation of types which implement Debug into a query\n             // and change this to a module lint pass\n             MissingDebugImplementations: MissingDebugImplementations::default(),\n+\n+            ArrayIntoIter: ArrayIntoIter,\n         ]);\n     )\n }"}]}