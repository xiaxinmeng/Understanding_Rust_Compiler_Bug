{"sha": "fa67631b32fcc21e2739df29b888841a8aa817a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhNjc2MzFiMzJmY2MyMWUyNzM5ZGYyOWI4ODg4NDFhOGFhODE3YTI=", "commit": {"author": {"name": "Bastian K\u00f6cher", "email": "git@kchr.de", "date": "2017-12-22T01:52:22Z"}, "committer": {"name": "Bastian K\u00f6cher", "email": "git@kchr.de", "date": "2017-12-22T01:52:22Z"}, "message": "Fixes compilation with rust version 2017-12-21", "tree": {"sha": "256bc8b1dea35dcb393338dfb021202888a2357e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/256bc8b1dea35dcb393338dfb021202888a2357e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa67631b32fcc21e2739df29b888841a8aa817a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa67631b32fcc21e2739df29b888841a8aa817a2", "html_url": "https://github.com/rust-lang/rust/commit/fa67631b32fcc21e2739df29b888841a8aa817a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa67631b32fcc21e2739df29b888841a8aa817a2/comments", "author": {"login": "bkchr", "id": 5718007, "node_id": "MDQ6VXNlcjU3MTgwMDc=", "avatar_url": "https://avatars.githubusercontent.com/u/5718007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bkchr", "html_url": "https://github.com/bkchr", "followers_url": "https://api.github.com/users/bkchr/followers", "following_url": "https://api.github.com/users/bkchr/following{/other_user}", "gists_url": "https://api.github.com/users/bkchr/gists{/gist_id}", "starred_url": "https://api.github.com/users/bkchr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bkchr/subscriptions", "organizations_url": "https://api.github.com/users/bkchr/orgs", "repos_url": "https://api.github.com/users/bkchr/repos", "events_url": "https://api.github.com/users/bkchr/events{/privacy}", "received_events_url": "https://api.github.com/users/bkchr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bkchr", "id": 5718007, "node_id": "MDQ6VXNlcjU3MTgwMDc=", "avatar_url": "https://avatars.githubusercontent.com/u/5718007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bkchr", "html_url": "https://github.com/bkchr", "followers_url": "https://api.github.com/users/bkchr/followers", "following_url": "https://api.github.com/users/bkchr/following{/other_user}", "gists_url": "https://api.github.com/users/bkchr/gists{/gist_id}", "starred_url": "https://api.github.com/users/bkchr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bkchr/subscriptions", "organizations_url": "https://api.github.com/users/bkchr/orgs", "repos_url": "https://api.github.com/users/bkchr/repos", "events_url": "https://api.github.com/users/bkchr/events{/privacy}", "received_events_url": "https://api.github.com/users/bkchr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "723b9380573edf8d0be9f21cd9a0b00aef3158a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/723b9380573edf8d0be9f21cd9a0b00aef3158a8", "html_url": "https://github.com/rust-lang/rust/commit/723b9380573edf8d0be9f21cd9a0b00aef3158a8"}], "stats": {"total": 46, "additions": 35, "deletions": 11}, "files": [{"sha": "13b4c0e49405a8af95e7b908279a0d4ac4c4ffd5", "filename": "src/items.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/fa67631b32fcc21e2739df29b888841a8aa817a2/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa67631b32fcc21e2739df29b888841a8aa817a2/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=fa67631b32fcc21e2739df29b888841a8aa817a2", "patch": "@@ -1869,7 +1869,12 @@ fn rewrite_fn_base(\n     // A conservative estimation, to goal is to be over all parens in generics\n     let args_start = fn_sig\n         .generics\n-        .ty_params\n+        .params\n+        .iter()\n+        .filter_map(|p| match p {\n+            &ast::GenericParam::Type(ref t) => Some(t),\n+            _ => None,\n+        })\n         .last()\n         .map_or(lo_after_visibility, |tp| end_typaram(tp));\n     let args_end = if fd.inputs.is_empty() {\n@@ -2363,15 +2368,22 @@ fn rewrite_generics_inner(\n         }\n     }\n \n-    if generics.lifetimes.is_empty() && generics.ty_params.is_empty() {\n+    if generics.params.is_empty() {\n         return Some(String::new());\n     }\n \n     let generics_args = generics\n-        .lifetimes\n+        .params\n         .iter()\n+        .filter_map(|p| match p {\n+            &ast::GenericParam::Lifetime(ref l) => Some(l),\n+            _ => None,\n+        })\n         .map(|lt| GenericsArg::Lifetime(lt))\n-        .chain(generics.ty_params.iter().map(|ty| GenericsArg::TyParam(ty)));\n+        .chain(generics.params.iter().filter_map(|ty| match ty {\n+            &ast::GenericParam::Type(ref ty) => Some(GenericsArg::TyParam(ty)),\n+            _ => None,\n+        }));\n     let items = itemize_list(\n         context.codemap,\n         generics_args,"}, {"sha": "d07af7376f1791c3390a2ce557369ecd459d72e9", "filename": "src/types.rs", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/fa67631b32fcc21e2739df29b888841a8aa817a2/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa67631b32fcc21e2739df29b888841a8aa817a2/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=fa67631b32fcc21e2739df29b888841a8aa817a2", "patch": "@@ -413,7 +413,7 @@ impl Rewrite for ast::WherePredicate {\n         // TODO: dead spans?\n         let result = match *self {\n             ast::WherePredicate::BoundPredicate(ast::WhereBoundPredicate {\n-                ref bound_lifetimes,\n+                ref bound_generic_params,\n                 ref bounded_ty,\n                 ref bounds,\n                 ..\n@@ -422,9 +422,13 @@ impl Rewrite for ast::WherePredicate {\n \n                 let colon = type_bound_colon(context);\n \n-                if !bound_lifetimes.is_empty() {\n-                    let lifetime_str: String = bound_lifetimes\n+                if bound_generic_params.iter().filter(|p| p.is_lifetime_param()).count() > 0 {\n+                    let lifetime_str: String = bound_generic_params\n                         .iter()\n+                        .filter_map(|p| match p {\n+                            &ast::GenericParam::Lifetime(ref l) => Some(l),\n+                            _ => None,\n+                        })\n                         .map(|lt| lt.rewrite(context, shape))\n                         .collect::<Option<Vec<_>>>()?\n                         .join(\", \");\n@@ -590,9 +594,13 @@ impl Rewrite for ast::TyParam {\n \n impl Rewrite for ast::PolyTraitRef {\n     fn rewrite(&self, context: &RewriteContext, shape: Shape) -> Option<String> {\n-        if !self.bound_lifetimes.is_empty() {\n-            let lifetime_str: String = self.bound_lifetimes\n+        if self.bound_generic_params.iter().filter(|p| p.is_lifetime_param()).count() > 0 {\n+            let lifetime_str: String = self.bound_generic_params\n                 .iter()\n+                .filter_map(|p| match p {\n+                    &ast::GenericParam::Lifetime(ref l) => Some(l),\n+                    _ => None,\n+                })\n                 .map(|lt| lt.rewrite(context, shape))\n                 .collect::<Option<Vec<_>>>()?\n                 .join(\", \");\n@@ -746,14 +754,18 @@ fn rewrite_bare_fn(\n ) -> Option<String> {\n     let mut result = String::with_capacity(128);\n \n-    if !bare_fn.lifetimes.is_empty() {\n+    if bare_fn.generic_params.iter().filter(|p| p.is_lifetime_param()).count() > 0 {\n         result.push_str(\"for<\");\n         // 6 = \"for<> \".len(), 4 = \"for<\".\n         // This doesn't work out so nicely for mutliline situation with lots of\n         // rightward drift. If that is a problem, we could use the list stuff.\n         result.push_str(&bare_fn\n-            .lifetimes\n+            .generic_params\n             .iter()\n+            .filter_map(|p| match p {\n+                &ast::GenericParam::Lifetime(ref l) => Some(l),\n+                _ => None,\n+            })\n             .map(|l| {\n                 l.rewrite(\n                     context,"}]}