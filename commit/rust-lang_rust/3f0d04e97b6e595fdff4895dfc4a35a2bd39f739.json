{"sha": "3f0d04e97b6e595fdff4895dfc4a35a2bd39f739", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmMGQwNGU5N2I2ZTU5NWZkZmY0ODk1ZGZjNGEzNWEyYmQzOWY3Mzk=", "commit": {"author": {"name": "Frank Steffahn", "email": "frank.steffahn@stu.uni-kiel.de", "date": "2021-08-13T12:41:50Z"}, "committer": {"name": "Frank Steffahn", "email": "frank.steffahn@stu.uni-kiel.de", "date": "2021-08-13T13:27:30Z"}, "message": "Improve wording, correct -> tight.", "tree": {"sha": "1d9273c5de40cabf50abd8fbca53de179a1437b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d9273c5de40cabf50abd8fbca53de179a1437b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f0d04e97b6e595fdff4895dfc4a35a2bd39f739", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f0d04e97b6e595fdff4895dfc4a35a2bd39f739", "html_url": "https://github.com/rust-lang/rust/commit/3f0d04e97b6e595fdff4895dfc4a35a2bd39f739", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f0d04e97b6e595fdff4895dfc4a35a2bd39f739/comments", "author": {"login": "steffahn", "id": 3986214, "node_id": "MDQ6VXNlcjM5ODYyMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3986214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steffahn", "html_url": "https://github.com/steffahn", "followers_url": "https://api.github.com/users/steffahn/followers", "following_url": "https://api.github.com/users/steffahn/following{/other_user}", "gists_url": "https://api.github.com/users/steffahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/steffahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steffahn/subscriptions", "organizations_url": "https://api.github.com/users/steffahn/orgs", "repos_url": "https://api.github.com/users/steffahn/repos", "events_url": "https://api.github.com/users/steffahn/events{/privacy}", "received_events_url": "https://api.github.com/users/steffahn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steffahn", "id": 3986214, "node_id": "MDQ6VXNlcjM5ODYyMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3986214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steffahn", "html_url": "https://github.com/steffahn", "followers_url": "https://api.github.com/users/steffahn/followers", "following_url": "https://api.github.com/users/steffahn/following{/other_user}", "gists_url": "https://api.github.com/users/steffahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/steffahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steffahn/subscriptions", "organizations_url": "https://api.github.com/users/steffahn/orgs", "repos_url": "https://api.github.com/users/steffahn/repos", "events_url": "https://api.github.com/users/steffahn/events{/privacy}", "received_events_url": "https://api.github.com/users/steffahn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43046860496df09d9e59a679ac3a20e1820619ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/43046860496df09d9e59a679ac3a20e1820619ee", "html_url": "https://github.com/rust-lang/rust/commit/43046860496df09d9e59a679ac3a20e1820619ee"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "13b8c059e37aef11756719ea9ac3bf00e2457d9b", "filename": "library/alloc/tests/slice.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3f0d04e97b6e595fdff4895dfc4a35a2bd39f739/library%2Falloc%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f0d04e97b6e595fdff4895dfc4a35a2bd39f739/library%2Falloc%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fslice.rs?ref=3f0d04e97b6e595fdff4895dfc4a35a2bd39f739", "patch": "@@ -1001,23 +1001,23 @@ fn test_split_iterators_size_hint() {\n         Lower,\n         Upper,\n     }\n-    fn assert_precise_size_hints(mut it: impl Iterator, which: Bounds, context: impl fmt::Display) {\n+    fn assert_tight_size_hints(mut it: impl Iterator, which: Bounds, ctx: impl fmt::Display) {\n         match which {\n             Bounds::Lower => {\n                 let mut lower_bounds = vec![it.size_hint().0];\n                 while let Some(_) = it.next() {\n                     lower_bounds.push(it.size_hint().0);\n                 }\n                 let target: Vec<_> = (0..lower_bounds.len()).rev().collect();\n-                assert_eq!(lower_bounds, target, \"incorrect lower bounds: {}\", context);\n+                assert_eq!(lower_bounds, target, \"lower bounds incorrect or not tight: {}\", ctx);\n             }\n             Bounds::Upper => {\n                 let mut upper_bounds = vec![it.size_hint().1];\n                 while let Some(_) = it.next() {\n                     upper_bounds.push(it.size_hint().1);\n                 }\n                 let target: Vec<_> = (0..upper_bounds.len()).map(Some).rev().collect();\n-                assert_eq!(upper_bounds, target, \"incorrect upper bounds: {}\", context);\n+                assert_eq!(upper_bounds, target, \"upper bounds incorrect or not tight: {}\", ctx);\n             }\n         }\n     }\n@@ -1028,13 +1028,13 @@ fn test_split_iterators_size_hint() {\n         // p: predicate, b: bound selection\n         for (p, b) in [\n             // with a predicate always returning false, the split*-iterators\n-            // become maximally short, so the size_hint lower bounds are correct\n+            // become maximally short, so the size_hint lower bounds are tight\n             ((|_| false) as fn(&_) -> _, Bounds::Lower),\n             // with a predicate always returning true, the split*-iterators\n-            // become maximally long, so the size_hint upper bounds are correct\n+            // become maximally long, so the size_hint upper bounds are tight\n             ((|_| true) as fn(&_) -> _, Bounds::Upper),\n         ] {\n-            use assert_precise_size_hints as a;\n+            use assert_tight_size_hints as a;\n             use format_args as f;\n \n             a(v.split(p), b, \"split\");"}]}