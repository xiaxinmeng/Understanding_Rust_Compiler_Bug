{"sha": "c4b07ead17aed2734e796de7c3b6fae98f1f485e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0YjA3ZWFkMTdhZWQyNzM0ZTc5NmRlN2MzYjZmYWU5OGYxZjQ4NWU=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-08-16T18:12:52Z"}, "committer": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-08-16T18:12:52Z"}, "message": "Merge pull request #179 from nweston/step-by-zero\n\nNew lint: Range::step_by(0) (fixes #95)", "tree": {"sha": "468f4c476dfa861155c84607a9d873aa39ffef02", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/468f4c476dfa861155c84607a9d873aa39ffef02"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4b07ead17aed2734e796de7c3b6fae98f1f485e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4b07ead17aed2734e796de7c3b6fae98f1f485e", "html_url": "https://github.com/rust-lang/rust/commit/c4b07ead17aed2734e796de7c3b6fae98f1f485e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4b07ead17aed2734e796de7c3b6fae98f1f485e/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "164907ece2beef1bc067ac1f2753706b65b09f98", "url": "https://api.github.com/repos/rust-lang/rust/commits/164907ece2beef1bc067ac1f2753706b65b09f98", "html_url": "https://github.com/rust-lang/rust/commit/164907ece2beef1bc067ac1f2753706b65b09f98"}, {"sha": "23a38c4170887401b3c75f9ad4443ab1f6beae11", "url": "https://api.github.com/repos/rust-lang/rust/commits/23a38c4170887401b3c75f9ad4443ab1f6beae11", "html_url": "https://github.com/rust-lang/rust/commit/23a38c4170887401b3c75f9ad4443ab1f6beae11"}], "stats": {"total": 80, "additions": 80, "deletions": 0}, "files": [{"sha": "bc82b2ee533eaeef58a9e4c9f9a27ec30ec36898", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4b07ead17aed2734e796de7c3b6fae98f1f485e/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/c4b07ead17aed2734e796de7c3b6fae98f1f485e/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=c4b07ead17aed2734e796de7c3b6fae98f1f485e", "patch": "@@ -35,6 +35,7 @@ non_ascii_literal    | allow   | using any literal non-ASCII chars in a string l\n option_unwrap_used   | allow   | using `Option.unwrap()`, which should at least get a better message using `expect()`\n precedence           | warn    | expressions where precedence may trip up the unwary reader of the source; suggests adding parentheses, e.g. `x << 2 + y` will be parsed as `x << (2 + y)`\n ptr_arg              | allow   | fn arguments of the type `&Vec<...>` or `&String`, suggesting to use `&[...]` or `&str` instead, respectively\n+range_step_by_zero   | warn    | using Range::step_by(0), which produces an infinite iterator\n redundant_closure    | warn    | using redundant closures, i.e. `|a| foo(a)` (which can be written as just `foo`)\n result_unwrap_used   | allow   | using `Result.unwrap()`, which might be better handled\n single_match         | warn    | a match statement with a single nontrivial arm (i.e, where the other arm is `_ => {}`) is used; recommends `if let` instead"}, {"sha": "967865b2c0cd7a3602ae60f4ba84a1d4b5f044f2", "filename": "src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c4b07ead17aed2734e796de7c3b6fae98f1f485e/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4b07ead17aed2734e796de7c3b6fae98f1f485e/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=c4b07ead17aed2734e796de7c3b6fae98f1f485e", "patch": "@@ -35,6 +35,7 @@ pub mod methods;\n pub mod returns;\n pub mod lifetimes;\n pub mod loops;\n+pub mod ranges;\n \n #[plugin_registrar]\n pub fn plugin_registrar(reg: &mut Registry) {\n@@ -64,6 +65,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_lint_pass(box types::LetPass as LintPassObject);\n     reg.register_lint_pass(box loops::LoopsPass as LintPassObject);\n     reg.register_lint_pass(box lifetimes::LifetimePass as LintPassObject);\n+    reg.register_lint_pass(box ranges::StepByZero as LintPassObject);\n \n     reg.register_lint_group(\"clippy\", vec![\n         approx_const::APPROX_CONSTANT,\n@@ -93,6 +95,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n         mut_mut::MUT_MUT,\n         needless_bool::NEEDLESS_BOOL,\n         ptr_arg::PTR_ARG,\n+        ranges::RANGE_STEP_BY_ZERO,\n         returns::LET_AND_RETURN,\n         returns::NEEDLESS_RETURN,\n         strings::STRING_ADD,"}, {"sha": "2981574e5020997b06fb6711a832633a5ace35dd", "filename": "src/ranges.rs", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/c4b07ead17aed2734e796de7c3b6fae98f1f485e/src%2Franges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4b07ead17aed2734e796de7c3b6fae98f1f485e/src%2Franges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Franges.rs?ref=c4b07ead17aed2734e796de7c3b6fae98f1f485e", "patch": "@@ -0,0 +1,52 @@\n+use rustc::lint::{Context, LintArray, LintPass};\n+use rustc::middle::ty::TypeVariants::TyStruct;\n+use syntax::ast::*;\n+use syntax::codemap::Spanned;\n+use utils::{match_def_path, walk_ptrs_ty};\n+\n+declare_lint! {\n+    pub RANGE_STEP_BY_ZERO, Warn,\n+    \"using Range::step_by(0), which produces an infinite iterator\"\n+}\n+\n+#[derive(Copy,Clone)]\n+pub struct StepByZero;\n+\n+impl LintPass for StepByZero {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(RANGE_STEP_BY_ZERO)\n+    }\n+\n+    fn check_expr(&mut self, cx: &Context, expr: &Expr) {\n+        if let ExprMethodCall(Spanned { node: ref ident, .. }, _,\n+                              ref args) = expr.node {\n+            // Only warn on literal ranges.\n+            if ident.name.as_str() == \"step_by\" && args.len() == 2 &&\n+                is_range(cx, &args[0]) && is_lit_zero(&args[1]) {\n+                cx.span_lint(RANGE_STEP_BY_ZERO, expr.span,\n+                             \"Range::step_by(0) produces an infinite iterator. \\\n+                              Consider using `std::iter::repeat()` instead\")\n+            }\n+        }\n+    }\n+}\n+\n+fn is_range(cx: &Context, expr: &Expr) -> bool {\n+    // No need for walk_ptrs_ty here because step_by moves self, so it\n+    // can't be called on a borrowed range.\n+    if let TyStruct(did, _) = cx.tcx.expr_ty(expr).sty {\n+        // Note: RangeTo and RangeFull don't have step_by\n+        match_def_path(cx, did.did, &[\"core\", \"ops\", \"Range\"]) ||\n+        match_def_path(cx, did.did, &[\"core\", \"ops\", \"RangeFrom\"])\n+    } else { false }\n+}\n+\n+fn is_lit_zero(expr: &Expr) -> bool {\n+    // FIXME: use constant folding\n+    if let ExprLit(ref spanned) = expr.node {\n+        if let LitInt(0, _) = spanned.node {\n+            return true;\n+        }\n+    }\n+    false\n+}"}, {"sha": "324f129fafacd496511a8c7abd77f569fad5e560", "filename": "tests/compile-fail/range.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c4b07ead17aed2734e796de7c3b6fae98f1f485e/tests%2Fcompile-fail%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4b07ead17aed2734e796de7c3b6fae98f1f485e/tests%2Fcompile-fail%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Frange.rs?ref=c4b07ead17aed2734e796de7c3b6fae98f1f485e", "patch": "@@ -0,0 +1,24 @@\n+#![feature(step_by)]\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+struct NotARange;\n+impl NotARange {\n+    fn step_by(&self, _: u32) {}\n+}\n+\n+#[deny(range_step_by_zero)]\n+fn main() {\n+    (0..1).step_by(0); //~ERROR Range::step_by(0) produces an infinite iterator\n+    // No warning for non-zero step\n+    (0..1).step_by(1);\n+\n+    (1..).step_by(0); //~ERROR Range::step_by(0) produces an infinite iterator\n+\n+    let x = 0..1;\n+    x.step_by(0); //~ERROR Range::step_by(0) produces an infinite iterator\n+\n+    // No error, not a range.\n+    let y = NotARange;\n+    y.step_by(0);\n+}"}]}