{"sha": "8163a1a5f886db9e549259be8b53d3440c359e99", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxNjNhMWE1Zjg4NmRiOWU1NDkyNTliZThiNTNkMzQ0MGMzNTllOTk=", "commit": {"author": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2019-04-17T19:03:22Z"}, "committer": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2019-04-18T04:54:32Z"}, "message": "Move two cast_lossless tests to their correct files\n\nFirst part of checking off the `tests/ui/cast.rs` checkbox in #3630.", "tree": {"sha": "cc27bf372a4ac9ce8f45e1b9134630490772d9b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc27bf372a4ac9ce8f45e1b9134630490772d9b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8163a1a5f886db9e549259be8b53d3440c359e99", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJEBAABCgAuFiEEj4U0bmbiMSg/mWqvgqphyqETl+YFAly4AwoQHGRldkBwaGFu\nc2NoLm5ldAAKCRCCqmHKoROX5nFGD/9PqQy6py1OrCYvUsRCMEnO/z5gQuZRgpwp\nfhu5hg8MLrZsEUJ2r4lpMjyBQq338+Hx1ZPPsh0hGEZK79dEuitjpLQnCxFmvdpQ\nZsDczXG3scRREpjQ0HRV4e6653gDOrKCSwZGYk0Qx6u0b7PR4/e/35eBknFfKdqB\nbnKWph2+9E0pyivzx1dyUT1SL3E4szpc3JNvkcPlOA+sS9+zEJ4A/0JR5vHxmX+z\nRsnkEf8EzeAUT9lKw6RKQ0cCGSIEfb93PcGxUhuSfWtRpWW6t+1oHhfSJYMBojYX\nfGk63Hru2nV86IdZ7N7YVzSX1Rcn0zkyDWINW7Edb1Z86fatpMFoOoUpakbeosFk\nKmGNLp+4DbuG40rn/weQla+Ymfv/1YYqGWELV/Csn9eZaDjCmci/QkdlRLmT7Hkw\nEzXfHT8Ltv5So4bzHCDFi+SN6GVmXX5QCfm8ilti0v0N1TgeBptAQPaIiMACFDMV\nTm60CcqRlqHAvbH5OOf3YSNIt3zcnNh4Bc1xd9UVKnyE6HVIB9uFnMzU0DqdeT38\ndyY7XkcktTQziMHVHyApYSFhHCw2W5rKLWrzi9rtf04IobB7TEh0SlqGpw5wFMfM\nqngmCXuicgwVZerxLS74Ib7zlZFKn22XQl/RfdUoTHhdtaEf/HOkJkzFlKBnmWY2\nvpwiTzjbiw==\n=Gnhy\n-----END PGP SIGNATURE-----", "payload": "tree cc27bf372a4ac9ce8f45e1b9134630490772d9b5\nparent 3e760cc93a4820c1f8fbb0d5e125567e065776d3\nauthor Philipp Hansch <dev@phansch.net> 1555527802 +0200\ncommitter Philipp Hansch <dev@phansch.net> 1555563272 +0200\n\nMove two cast_lossless tests to their correct files\n\nFirst part of checking off the `tests/ui/cast.rs` checkbox in #3630.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8163a1a5f886db9e549259be8b53d3440c359e99", "html_url": "https://github.com/rust-lang/rust/commit/8163a1a5f886db9e549259be8b53d3440c359e99", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8163a1a5f886db9e549259be8b53d3440c359e99/comments", "author": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e760cc93a4820c1f8fbb0d5e125567e065776d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e760cc93a4820c1f8fbb0d5e125567e065776d3", "html_url": "https://github.com/rust-lang/rust/commit/3e760cc93a4820c1f8fbb0d5e125567e065776d3"}], "stats": {"total": 107, "additions": 56, "deletions": 51}, "files": [{"sha": "914296644e6b43fcc2a0ca5a1e153d5120446f93", "filename": "tests/ui/cast.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8163a1a5f886db9e549259be8b53d3440c359e99/tests%2Fui%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8163a1a5f886db9e549259be8b53d3440c359e99/tests%2Fui%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast.rs?ref=8163a1a5f886db9e549259be8b53d3440c359e99", "patch": "@@ -2,8 +2,7 @@\n     clippy::cast_precision_loss,\n     clippy::cast_possible_truncation,\n     clippy::cast_sign_loss,\n-    clippy::cast_possible_wrap,\n-    clippy::cast_lossless\n+    clippy::cast_possible_wrap\n )]\n #[allow(clippy::no_effect, clippy::unnecessary_operation)]\n fn main() {\n@@ -32,10 +31,6 @@ fn main() {\n     1u32 as i32;\n     1u64 as i64;\n     1usize as isize;\n-    // Test clippy::cast_lossless with casts from floating-point types\n-    1.0f32 as f64;\n-    // Test clippy::cast_lossless with an expression wrapped in parens\n-    (1u8 + 1u8) as u16;\n     // Test clippy::cast_sign_loss\n     1i32 as u32;\n     -1i32 as u32;"}, {"sha": "28bcfacd8589b70953888a9c9f01da12dc4f9574", "filename": "tests/ui/cast.stderr", "status": "modified", "additions": 29, "deletions": 43, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/8163a1a5f886db9e549259be8b53d3440c359e99/tests%2Fui%2Fcast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8163a1a5f886db9e549259be8b53d3440c359e99/tests%2Fui%2Fcast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast.stderr?ref=8163a1a5f886db9e549259be8b53d3440c359e99", "patch": "@@ -1,194 +1,180 @@\n error: casting i32 to f32 causes a loss of precision (i32 is 32 bits wide, but f32's mantissa is only 23 bits wide)\n-  --> $DIR/cast.rs:12:5\n+  --> $DIR/cast.rs:11:5\n    |\n LL |     x0 as f32;\n    |     ^^^^^^^^^\n    |\n    = note: `-D clippy::cast-precision-loss` implied by `-D warnings`\n \n error: casting i64 to f32 causes a loss of precision (i64 is 64 bits wide, but f32's mantissa is only 23 bits wide)\n-  --> $DIR/cast.rs:14:5\n+  --> $DIR/cast.rs:13:5\n    |\n LL |     x1 as f32;\n    |     ^^^^^^^^^\n \n error: casting i64 to f64 causes a loss of precision (i64 is 64 bits wide, but f64's mantissa is only 52 bits wide)\n-  --> $DIR/cast.rs:15:5\n+  --> $DIR/cast.rs:14:5\n    |\n LL |     x1 as f64;\n    |     ^^^^^^^^^\n \n error: casting u32 to f32 causes a loss of precision (u32 is 32 bits wide, but f32's mantissa is only 23 bits wide)\n-  --> $DIR/cast.rs:17:5\n+  --> $DIR/cast.rs:16:5\n    |\n LL |     x2 as f32;\n    |     ^^^^^^^^^\n \n error: casting u64 to f32 causes a loss of precision (u64 is 64 bits wide, but f32's mantissa is only 23 bits wide)\n-  --> $DIR/cast.rs:19:5\n+  --> $DIR/cast.rs:18:5\n    |\n LL |     x3 as f32;\n    |     ^^^^^^^^^\n \n error: casting u64 to f64 causes a loss of precision (u64 is 64 bits wide, but f64's mantissa is only 52 bits wide)\n-  --> $DIR/cast.rs:20:5\n+  --> $DIR/cast.rs:19:5\n    |\n LL |     x3 as f64;\n    |     ^^^^^^^^^\n \n error: casting f32 to i32 may truncate the value\n-  --> $DIR/cast.rs:22:5\n+  --> $DIR/cast.rs:21:5\n    |\n LL |     1f32 as i32;\n    |     ^^^^^^^^^^^\n    |\n    = note: `-D clippy::cast-possible-truncation` implied by `-D warnings`\n \n error: casting f32 to u32 may truncate the value\n-  --> $DIR/cast.rs:23:5\n+  --> $DIR/cast.rs:22:5\n    |\n LL |     1f32 as u32;\n    |     ^^^^^^^^^^^\n \n error: casting f32 to u32 may lose the sign of the value\n-  --> $DIR/cast.rs:23:5\n+  --> $DIR/cast.rs:22:5\n    |\n LL |     1f32 as u32;\n    |     ^^^^^^^^^^^\n    |\n    = note: `-D clippy::cast-sign-loss` implied by `-D warnings`\n \n error: casting f64 to f32 may truncate the value\n-  --> $DIR/cast.rs:24:5\n+  --> $DIR/cast.rs:23:5\n    |\n LL |     1f64 as f32;\n    |     ^^^^^^^^^^^\n \n error: casting i32 to i8 may truncate the value\n-  --> $DIR/cast.rs:25:5\n+  --> $DIR/cast.rs:24:5\n    |\n LL |     1i32 as i8;\n    |     ^^^^^^^^^^\n \n error: casting i32 to u8 may truncate the value\n-  --> $DIR/cast.rs:26:5\n+  --> $DIR/cast.rs:25:5\n    |\n LL |     1i32 as u8;\n    |     ^^^^^^^^^^\n \n error: casting f64 to isize may truncate the value\n-  --> $DIR/cast.rs:27:5\n+  --> $DIR/cast.rs:26:5\n    |\n LL |     1f64 as isize;\n    |     ^^^^^^^^^^^^^\n \n error: casting f64 to usize may truncate the value\n-  --> $DIR/cast.rs:28:5\n+  --> $DIR/cast.rs:27:5\n    |\n LL |     1f64 as usize;\n    |     ^^^^^^^^^^^^^\n \n error: casting f64 to usize may lose the sign of the value\n-  --> $DIR/cast.rs:28:5\n+  --> $DIR/cast.rs:27:5\n    |\n LL |     1f64 as usize;\n    |     ^^^^^^^^^^^^^\n \n error: casting u8 to i8 may wrap around the value\n-  --> $DIR/cast.rs:30:5\n+  --> $DIR/cast.rs:29:5\n    |\n LL |     1u8 as i8;\n    |     ^^^^^^^^^\n    |\n    = note: `-D clippy::cast-possible-wrap` implied by `-D warnings`\n \n error: casting u16 to i16 may wrap around the value\n-  --> $DIR/cast.rs:31:5\n+  --> $DIR/cast.rs:30:5\n    |\n LL |     1u16 as i16;\n    |     ^^^^^^^^^^^\n \n error: casting u32 to i32 may wrap around the value\n-  --> $DIR/cast.rs:32:5\n+  --> $DIR/cast.rs:31:5\n    |\n LL |     1u32 as i32;\n    |     ^^^^^^^^^^^\n \n error: casting u64 to i64 may wrap around the value\n-  --> $DIR/cast.rs:33:5\n+  --> $DIR/cast.rs:32:5\n    |\n LL |     1u64 as i64;\n    |     ^^^^^^^^^^^\n \n error: casting usize to isize may wrap around the value\n-  --> $DIR/cast.rs:34:5\n+  --> $DIR/cast.rs:33:5\n    |\n LL |     1usize as isize;\n    |     ^^^^^^^^^^^^^^^\n \n-error: casting f32 to f64 may become silently lossy if types change\n-  --> $DIR/cast.rs:36:5\n-   |\n-LL |     1.0f32 as f64;\n-   |     ^^^^^^^^^^^^^ help: try: `f64::from(1.0f32)`\n-   |\n-   = note: `-D clippy::cast-lossless` implied by `-D warnings`\n-\n-error: casting u8 to u16 may become silently lossy if types change\n-  --> $DIR/cast.rs:38:5\n-   |\n-LL |     (1u8 + 1u8) as u16;\n-   |     ^^^^^^^^^^^^^^^^^^ help: try: `u16::from(1u8 + 1u8)`\n-\n error: casting i32 to u32 may lose the sign of the value\n-  --> $DIR/cast.rs:41:5\n+  --> $DIR/cast.rs:36:5\n    |\n LL |     -1i32 as u32;\n    |     ^^^^^^^^^^^^\n \n error: casting isize to usize may lose the sign of the value\n-  --> $DIR/cast.rs:43:5\n+  --> $DIR/cast.rs:38:5\n    |\n LL |     -1isize as usize;\n    |     ^^^^^^^^^^^^^^^^\n \n error: casting to the same type is unnecessary (`i32` -> `i32`)\n-  --> $DIR/cast.rs:52:5\n+  --> $DIR/cast.rs:47:5\n    |\n LL |     1i32 as i32;\n    |     ^^^^^^^^^^^\n    |\n    = note: `-D clippy::unnecessary-cast` implied by `-D warnings`\n \n error: casting to the same type is unnecessary (`f32` -> `f32`)\n-  --> $DIR/cast.rs:53:5\n+  --> $DIR/cast.rs:48:5\n    |\n LL |     1f32 as f32;\n    |     ^^^^^^^^^^^\n \n error: casting to the same type is unnecessary (`bool` -> `bool`)\n-  --> $DIR/cast.rs:54:5\n+  --> $DIR/cast.rs:49:5\n    |\n LL |     false as bool;\n    |     ^^^^^^^^^^^^^\n \n error: casting integer literal to f32 is unnecessary\n-  --> $DIR/cast.rs:57:5\n+  --> $DIR/cast.rs:52:5\n    |\n LL |     100 as f32;\n    |     ^^^^^^^^^^ help: try: `100_f32`\n \n error: casting integer literal to f64 is unnecessary\n-  --> $DIR/cast.rs:58:5\n+  --> $DIR/cast.rs:53:5\n    |\n LL |     100 as f64;\n    |     ^^^^^^^^^^ help: try: `100_f64`\n \n error: casting integer literal to f64 is unnecessary\n-  --> $DIR/cast.rs:59:5\n+  --> $DIR/cast.rs:54:5\n    |\n LL |     100_i32 as f64;\n    |     ^^^^^^^^^^^^^^ help: try: `100_f64`\n \n-error: aborting due to 30 previous errors\n+error: aborting due to 28 previous errors\n "}, {"sha": "8021dc229e5e8f921e5e7eac26d9652e02e767a9", "filename": "tests/ui/cast_lossless_float.fixed", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8163a1a5f886db9e549259be8b53d3440c359e99/tests%2Fui%2Fcast_lossless_float.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/8163a1a5f886db9e549259be8b53d3440c359e99/tests%2Fui%2Fcast_lossless_float.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_lossless_float.fixed?ref=8163a1a5f886db9e549259be8b53d3440c359e99", "patch": "@@ -21,6 +21,9 @@ fn main() {\n     f64::from(x4);\n     let x5 = 1u32;\n     f64::from(x5);\n+\n+    // Test with casts from floating-point types\n+    f64::from(1.0f32);\n }\n \n // The lint would suggest using `f64::from(input)` here but the `XX::from` function is not const,"}, {"sha": "3cd5ad62203695aa8e5ada74e17f0dcedf8deb19", "filename": "tests/ui/cast_lossless_float.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8163a1a5f886db9e549259be8b53d3440c359e99/tests%2Fui%2Fcast_lossless_float.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8163a1a5f886db9e549259be8b53d3440c359e99/tests%2Fui%2Fcast_lossless_float.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_lossless_float.rs?ref=8163a1a5f886db9e549259be8b53d3440c359e99", "patch": "@@ -21,6 +21,9 @@ fn main() {\n     x4 as f64;\n     let x5 = 1u32;\n     x5 as f64;\n+\n+    // Test with casts from floating-point types\n+    1.0f32 as f64;\n }\n \n // The lint would suggest using `f64::from(input)` here but the `XX::from` function is not const,"}, {"sha": "b57af31196ef3bf76f08fee074869067024142ef", "filename": "tests/ui/cast_lossless_float.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8163a1a5f886db9e549259be8b53d3440c359e99/tests%2Fui%2Fcast_lossless_float.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8163a1a5f886db9e549259be8b53d3440c359e99/tests%2Fui%2Fcast_lossless_float.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_lossless_float.stderr?ref=8163a1a5f886db9e549259be8b53d3440c359e99", "patch": "@@ -60,5 +60,11 @@ error: casting u32 to f64 may become silently lossy if types change\n LL |     x5 as f64;\n    |     ^^^^^^^^^ help: try: `f64::from(x5)`\n \n-error: aborting due to 10 previous errors\n+error: casting f32 to f64 may become silently lossy if types change\n+  --> $DIR/cast_lossless_float.rs:26:5\n+   |\n+LL |     1.0f32 as f64;\n+   |     ^^^^^^^^^^^^^ help: try: `f64::from(1.0f32)`\n+\n+error: aborting due to 11 previous errors\n "}, {"sha": "22936e41c9092030ebc33c2ad17211e1fa301945", "filename": "tests/ui/cast_lossless_integer.fixed", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8163a1a5f886db9e549259be8b53d3440c359e99/tests%2Fui%2Fcast_lossless_integer.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/8163a1a5f886db9e549259be8b53d3440c359e99/tests%2Fui%2Fcast_lossless_integer.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_lossless_integer.fixed?ref=8163a1a5f886db9e549259be8b53d3440c359e99", "patch": "@@ -23,6 +23,9 @@ fn main() {\n     i64::from(1i32);\n     i64::from(1u32);\n     u64::from(1u32);\n+\n+    // Test with an expression wrapped in parens\n+    u16::from(1u8 + 1u8);\n }\n \n // The lint would suggest using `f64::from(input)` here but the `XX::from` function is not const,"}, {"sha": "958a336cf2cd59b0255f13c207170b0f7524fb63", "filename": "tests/ui/cast_lossless_integer.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8163a1a5f886db9e549259be8b53d3440c359e99/tests%2Fui%2Fcast_lossless_integer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8163a1a5f886db9e549259be8b53d3440c359e99/tests%2Fui%2Fcast_lossless_integer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_lossless_integer.rs?ref=8163a1a5f886db9e549259be8b53d3440c359e99", "patch": "@@ -23,6 +23,9 @@ fn main() {\n     1i32 as i64;\n     1u32 as i64;\n     1u32 as u64;\n+\n+    // Test with an expression wrapped in parens\n+    (1u8 + 1u8) as u16;\n }\n \n // The lint would suggest using `f64::from(input)` here but the `XX::from` function is not const,"}, {"sha": "1fe011f693364719f568ba149fc377153c662e71", "filename": "tests/ui/cast_lossless_integer.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8163a1a5f886db9e549259be8b53d3440c359e99/tests%2Fui%2Fcast_lossless_integer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8163a1a5f886db9e549259be8b53d3440c359e99/tests%2Fui%2Fcast_lossless_integer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_lossless_integer.stderr?ref=8163a1a5f886db9e549259be8b53d3440c359e99", "patch": "@@ -108,5 +108,11 @@ error: casting u32 to u64 may become silently lossy if types change\n LL |     1u32 as u64;\n    |     ^^^^^^^^^^^ help: try: `u64::from(1u32)`\n \n-error: aborting due to 18 previous errors\n+error: casting u8 to u16 may become silently lossy if types change\n+  --> $DIR/cast_lossless_integer.rs:28:5\n+   |\n+LL |     (1u8 + 1u8) as u16;\n+   |     ^^^^^^^^^^^^^^^^^^ help: try: `u16::from(1u8 + 1u8)`\n+\n+error: aborting due to 19 previous errors\n "}]}