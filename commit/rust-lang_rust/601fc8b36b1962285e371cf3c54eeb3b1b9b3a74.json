{"sha": "601fc8b36b1962285e371cf3c54eeb3b1b9b3a74", "node_id": "C_kwDOAAsO6NoAKDYwMWZjOGIzNmIxOTYyMjg1ZTM3MWNmM2M1NGVlYjNiMWI5YjNhNzQ", "commit": {"author": {"name": "Daniil Belov", "email": "70999565+BelovDV@users.noreply.github.com", "date": "2023-01-26T14:10:13Z"}, "committer": {"name": "BelovDV", "email": "70999565+BelovDV@users.noreply.github.com", "date": "2023-02-10T09:51:12Z"}, "message": "[link] enable packed bundled lib in non stable cases", "tree": {"sha": "7442411b8396d87173d00ba1adb5f77dcd275d38", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7442411b8396d87173d00ba1adb5f77dcd275d38"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/601fc8b36b1962285e371cf3c54eeb3b1b9b3a74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/601fc8b36b1962285e371cf3c54eeb3b1b9b3a74", "html_url": "https://github.com/rust-lang/rust/commit/601fc8b36b1962285e371cf3c54eeb3b1b9b3a74", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/601fc8b36b1962285e371cf3c54eeb3b1b9b3a74/comments", "author": {"login": "belovdv", "id": 70999565, "node_id": "MDQ6VXNlcjcwOTk5NTY1", "avatar_url": "https://avatars.githubusercontent.com/u/70999565?v=4", "gravatar_id": "", "url": "https://api.github.com/users/belovdv", "html_url": "https://github.com/belovdv", "followers_url": "https://api.github.com/users/belovdv/followers", "following_url": "https://api.github.com/users/belovdv/following{/other_user}", "gists_url": "https://api.github.com/users/belovdv/gists{/gist_id}", "starred_url": "https://api.github.com/users/belovdv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/belovdv/subscriptions", "organizations_url": "https://api.github.com/users/belovdv/orgs", "repos_url": "https://api.github.com/users/belovdv/repos", "events_url": "https://api.github.com/users/belovdv/events{/privacy}", "received_events_url": "https://api.github.com/users/belovdv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "belovdv", "id": 70999565, "node_id": "MDQ6VXNlcjcwOTk5NTY1", "avatar_url": "https://avatars.githubusercontent.com/u/70999565?v=4", "gravatar_id": "", "url": "https://api.github.com/users/belovdv", "html_url": "https://github.com/belovdv", "followers_url": "https://api.github.com/users/belovdv/followers", "following_url": "https://api.github.com/users/belovdv/following{/other_user}", "gists_url": "https://api.github.com/users/belovdv/gists{/gist_id}", "starred_url": "https://api.github.com/users/belovdv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/belovdv/subscriptions", "organizations_url": "https://api.github.com/users/belovdv/orgs", "repos_url": "https://api.github.com/users/belovdv/repos", "events_url": "https://api.github.com/users/belovdv/events{/privacy}", "received_events_url": "https://api.github.com/users/belovdv/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dffea43fc1102bdfe16d88ed412c23d4f0f08d9d", "url": "https://api.github.com/repos/rust-lang/rust/commits/dffea43fc1102bdfe16d88ed412c23d4f0f08d9d", "html_url": "https://github.com/rust-lang/rust/commit/dffea43fc1102bdfe16d88ed412c23d4f0f08d9d"}], "stats": {"total": 273, "additions": 146, "deletions": 127}, "files": [{"sha": "6fe8527ada62e0360f0cd23cba65016a96ff23c8", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 39, "deletions": 96, "changes": 135, "blob_url": "https://github.com/rust-lang/rust/blob/601fc8b36b1962285e371cf3c54eeb3b1b9b3a74/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/601fc8b36b1962285e371cf3c54eeb3b1b9b3a74/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=601fc8b36b1962285e371cf3c54eeb3b1b9b3a74", "patch": "@@ -270,10 +270,9 @@ pub fn each_linked_rlib(\n \n /// Create an 'rlib'.\n ///\n-/// An rlib in its current incarnation is essentially a renamed .a file. The rlib primarily contains\n-/// the object file of the crate, but it also contains all of the object files from native\n-/// libraries. This is done by unzipping native libraries and inserting all of the contents into\n-/// this archive.\n+/// An rlib in its current incarnation is essentially a renamed .a file (with \"dummy\" object files).\n+/// The rlib primarily contains the object file of the crate, but it also some of the object files\n+/// from native libraries.\n fn link_rlib<'a>(\n     sess: &'a Session,\n     archive_builder_builder: &dyn ArchiveBuilderBuilder,\n@@ -347,44 +346,23 @@ fn link_rlib<'a>(\n     // loaded from the libraries found here and then encode that into the\n     // metadata of the rlib we're generating somehow.\n     for lib in codegen_results.crate_info.used_libraries.iter() {\n-        match lib.kind {\n-            NativeLibKind::Static { bundle: None | Some(true), whole_archive: Some(true) }\n-                if flavor == RlibFlavor::Normal && sess.opts.unstable_opts.packed_bundled_libs => {}\n-            NativeLibKind::Static { bundle: None | Some(true), whole_archive: Some(true) }\n-                if flavor == RlibFlavor::Normal =>\n-            {\n-                // Don't allow mixing +bundle with +whole_archive since an rlib may contain\n-                // multiple native libs, some of which are +whole-archive and some of which are\n-                // -whole-archive and it isn't clear how we can currently handle such a\n-                // situation correctly.\n-                // See https://github.com/rust-lang/rust/issues/88085#issuecomment-901050897\n-                sess.emit_err(errors::IncompatibleLinkingModifiers);\n-            }\n-            NativeLibKind::Static { bundle: None | Some(true), .. } => {}\n-            NativeLibKind::Static { bundle: Some(false), .. }\n-            | NativeLibKind::Dylib { .. }\n-            | NativeLibKind::Framework { .. }\n-            | NativeLibKind::RawDylib\n-            | NativeLibKind::LinkArg\n-            | NativeLibKind::Unspecified => continue,\n-        }\n-        if let Some(name) = lib.name {\n-            let location =\n+        let NativeLibKind::Static { bundle: None | Some(true), whole_archive } = lib.kind else {\n+            continue;\n+        };\n+        if whole_archive == Some(true) && !codegen_results.crate_info.feature_packed_bundled_libs {\n+            sess.emit_err(errors::IncompatibleLinkingModifiers);\n+        }\n+        if flavor == RlibFlavor::Normal && let Some(filename) = lib.filename {\n+            let path = find_native_static_library(filename.as_str(), true, &lib_search_paths, sess);\n+            let src = read(path).map_err(|e| sess.emit_fatal(errors::ReadFileError {message: e }))?;\n+            let (data, _) = create_wrapper_file(sess, b\".bundled_lib\".to_vec(), &src);\n+            let wrapper_file = emit_wrapper_file(sess, &data, tmpdir, filename.as_str());\n+            packed_bundled_libs.push(wrapper_file);\n+        } else if let Some(name) = lib.name {\n+            let path =\n                 find_native_static_library(name.as_str(), lib.verbatim, &lib_search_paths, sess);\n-            if sess.opts.unstable_opts.packed_bundled_libs && flavor == RlibFlavor::Normal {\n-                let filename = lib.filename.unwrap();\n-                let lib_path =\n-                    find_native_static_library(filename.as_str(), true, &lib_search_paths, sess);\n-                let src = read(lib_path)\n-                    .map_err(|e| sess.emit_fatal(errors::ReadFileError { message: e }))?;\n-                let (data, _) = create_wrapper_file(sess, b\".bundled_lib\".to_vec(), &src);\n-                let wrapper_file = emit_wrapper_file(sess, &data, tmpdir, filename.as_str());\n-                packed_bundled_libs.push(wrapper_file);\n-                continue;\n-            }\n-            ab.add_archive(&location, Box::new(|_| false)).unwrap_or_else(|error| {\n-                sess.emit_fatal(errors::AddNativeLibrary { library_path: location, error });\n-            });\n+            ab.add_archive(&path, Box::new(|_| false)).unwrap_or_else(|error| {\n+                sess.emit_fatal(errors::AddNativeLibrary { library_path: path, error })});\n         }\n     }\n \n@@ -516,36 +494,14 @@ fn link_staticlib<'a>(\n         &codegen_results.crate_info,\n         Some(CrateType::Staticlib),\n         &mut |cnum, path| {\n-            let name = codegen_results.crate_info.crate_name[&cnum];\n-            let native_libs = &codegen_results.crate_info.native_libraries[&cnum];\n-\n-            // Here when we include the rlib into our staticlib we need to make a\n-            // decision whether to include the extra object files along the way.\n-            // These extra object files come from statically included native\n-            // libraries, but they may be cfg'd away with #[link(cfg(..))].\n-            //\n-            // This unstable feature, though, only needs liblibc to work. The only\n-            // use case there is where musl is statically included in liblibc.rlib,\n-            // so if we don't want the included version we just need to skip it. As\n-            // a result the logic here is that if *any* linked library is cfg'd away\n-            // we just skip all object files.\n-            //\n-            // Clearly this is not sufficient for a general purpose feature, and\n-            // we'd want to read from the library's metadata to determine which\n-            // object files come from where and selectively skip them.\n-            let skip_object_files = native_libs.iter().any(|lib| {\n-                matches!(lib.kind, NativeLibKind::Static { bundle: None | Some(true), .. })\n-                    && !relevant_lib(sess, lib)\n-            });\n-\n             let lto = are_upstream_rust_objects_already_included(sess)\n                 && !ignored_for_lto(sess, &codegen_results.crate_info, cnum);\n \n-            // Ignoring obj file starting with the crate name\n-            // as simple comparison is not enough - there\n-            // might be also an extra name suffix\n-            let obj_start = name.as_str().to_owned();\n+            let native_libs = codegen_results.crate_info.native_libraries[&cnum].iter();\n+            let relevant = native_libs.clone().filter(|lib| relevant_lib(sess, &lib));\n+            let relevant_libs: FxHashSet<_> = relevant.filter_map(|lib| lib.filename).collect();\n \n+            let bundled_libs: FxHashSet<_> = native_libs.filter_map(|lib| lib.filename).collect();\n             ab.add_archive(\n                 path,\n                 Box::new(move |fname: &str| {\n@@ -559,20 +515,25 @@ fn link_staticlib<'a>(\n                         return true;\n                     }\n \n-                    // Otherwise if this is *not* a rust object and we're skipping\n-                    // objects then skip this file\n-                    if skip_object_files\n-                        && (!fname.starts_with(&obj_start) || !fname.ends_with(\".o\"))\n-                    {\n+                    // Skip objects for bundled libs.\n+                    if bundled_libs.contains(&Symbol::intern(fname)) {\n                         return true;\n                     }\n \n-                    // ok, don't skip this\n                     false\n                 }),\n             )\n             .unwrap();\n \n+            archive_builder_builder\n+                .extract_bundled_libs(path, tempdir.as_ref(), &relevant_libs)\n+                .unwrap_or_else(|e| sess.emit_fatal(e));\n+            for filename in relevant_libs {\n+                let joined = tempdir.as_ref().join(filename.as_str());\n+                let path = joined.as_path();\n+                ab.add_archive(path, Box::new(|_| false)).unwrap();\n+            }\n+\n             all_native_libs\n                 .extend(codegen_results.crate_info.native_libraries[&cnum].iter().cloned());\n         },\n@@ -2590,18 +2551,8 @@ fn add_static_crate<'a>(\n         cmd.link_rlib(&fix_windows_verbatim_for_gcc(path));\n     };\n \n-    // See the comment above in `link_staticlib` and `link_rlib` for why if\n-    // there's a static library that's not relevant we skip all object\n-    // files.\n-    let native_libs = &codegen_results.crate_info.native_libraries[&cnum];\n-    let skip_native = native_libs.iter().any(|lib| {\n-        matches!(lib.kind, NativeLibKind::Static { bundle: None | Some(true), .. })\n-            && !relevant_lib(sess, lib)\n-    });\n-\n-    if (!are_upstream_rust_objects_already_included(sess)\n-        || ignored_for_lto(sess, &codegen_results.crate_info, cnum))\n-        && !skip_native\n+    if !are_upstream_rust_objects_already_included(sess)\n+        || ignored_for_lto(sess, &codegen_results.crate_info, cnum)\n     {\n         link_upstream(cratepath);\n         return;\n@@ -2632,17 +2583,13 @@ fn add_static_crate<'a>(\n                 let is_rust_object =\n                     canonical.starts_with(&canonical_name) && looks_like_rust_object_file(&f);\n \n-                // If we've been requested to skip all native object files\n-                // (those not generated by the rust compiler) then we can skip\n-                // this file. See above for why we may want to do this.\n-                let skip_because_cfg_say_so = skip_native && !is_rust_object;\n-\n                 // If we're performing LTO and this is a rust-generated object\n                 // file, then we don't need the object file as it's part of the\n                 // LTO module. Note that `#![no_builtins]` is excluded from LTO,\n                 // though, so we let that object file slide.\n-                let skip_because_lto =\n-                    upstream_rust_objects_already_included && is_rust_object && is_builtins;\n+                if upstream_rust_objects_already_included && is_rust_object && is_builtins {\n+                    return true;\n+                }\n \n                 // We skip native libraries because:\n                 // 1. This native libraries won't be used from the generated rlib,\n@@ -2653,10 +2600,6 @@ fn add_static_crate<'a>(\n                     return true;\n                 }\n \n-                if skip_because_cfg_say_so || skip_because_lto {\n-                    return true;\n-                }\n-\n                 false\n             }),\n         ) {"}, {"sha": "de2727c8a5dc3e0f6ccf09e07a6b52d658ffc81d", "filename": "compiler/rustc_codegen_ssa/src/base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/601fc8b36b1962285e371cf3c54eeb3b1b9b3a74/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/601fc8b36b1962285e371cf3c54eeb3b1b9b3a74/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs?ref=601fc8b36b1962285e371cf3c54eeb3b1b9b3a74", "patch": "@@ -858,6 +858,7 @@ impl CrateInfo {\n             dependency_formats: tcx.dependency_formats(()).clone(),\n             windows_subsystem,\n             natvis_debugger_visualizers: Default::default(),\n+            feature_packed_bundled_libs: tcx.features().packed_bundled_libs,\n         };\n         let crates = tcx.crates(());\n "}, {"sha": "d5530c476807ac9d6b2b24110cb82607eed66f6f", "filename": "compiler/rustc_codegen_ssa/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/601fc8b36b1962285e371cf3c54eeb3b1b9b3a74/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/601fc8b36b1962285e371cf3c54eeb3b1b9b3a74/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs?ref=601fc8b36b1962285e371cf3c54eeb3b1b9b3a74", "patch": "@@ -159,6 +159,7 @@ pub struct CrateInfo {\n     pub dependency_formats: Lrc<Dependencies>,\n     pub windows_subsystem: Option<String>,\n     pub natvis_debugger_visualizers: BTreeSet<DebuggerVisualizerFile>,\n+    pub feature_packed_bundled_libs: bool, // unstable feature flag.\n }\n \n #[derive(Encodable, Decodable)]"}, {"sha": "8fe5f8d50abe2aa9696ccb519f2c4e7b7b3079db", "filename": "compiler/rustc_error_messages/locales/en-US/codegen_ssa.ftl", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/601fc8b36b1962285e371cf3c54eeb3b1b9b3a74/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fcodegen_ssa.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/601fc8b36b1962285e371cf3c54eeb3b1b9b3a74/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fcodegen_ssa.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fcodegen_ssa.ftl?ref=601fc8b36b1962285e371cf3c54eeb3b1b9b3a74", "patch": "@@ -22,7 +22,7 @@ codegen_ssa_ignoring_output = ignoring -o because multiple .{$extension} files w\n \n codegen_ssa_create_temp_dir = couldn't create a temp dir: {$error}\n \n-codegen_ssa_incompatible_linking_modifiers = the linking modifiers `+bundle` and `+whole-archive` are not compatible with each other when generating rlibs\n+codegen_ssa_incompatible_linking_modifiers = link modifiers combination `+bundle,+whole-archive` is unstable when generating rlibs\n \n codegen_ssa_add_native_library = failed to add native library {$library_path}: {$error}\n "}, {"sha": "21d211eefbef373a65150f5ab44030e8544f4388", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/601fc8b36b1962285e371cf3c54eeb3b1b9b3a74/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/601fc8b36b1962285e371cf3c54eeb3b1b9b3a74/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=601fc8b36b1962285e371cf3c54eeb3b1b9b3a74", "patch": "@@ -164,6 +164,8 @@ declare_features! (\n     (active, multiple_supertrait_upcastable, \"CURRENT_RUSTC_VERSION\", None, None),\n     /// Allows using `#[omit_gdb_pretty_printer_section]`.\n     (active, omit_gdb_pretty_printer_section, \"1.5.0\", None, None),\n+    /// Allows using `+bundled,+whole-archive` native libs.\n+    (active, packed_bundled_libs, \"1.67.0\", None, None),\n     /// Allows using `#[prelude_import]` on glob `use` items.\n     (active, prelude_import, \"1.2.0\", None, None),\n     /// Used to identify crates that contain the profiler runtime."}, {"sha": "a8514c69d1c5a2e0c2ea020648e05d974484230a", "filename": "compiler/rustc_metadata/src/native_libs.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/601fc8b36b1962285e371cf3c54eeb3b1b9b3a74/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/601fc8b36b1962285e371cf3c54eeb3b1b9b3a74/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs?ref=601fc8b36b1962285e371cf3c54eeb3b1b9b3a74", "patch": "@@ -49,20 +49,21 @@ fn find_bundled_library(\n     name: Option<Symbol>,\n     verbatim: Option<bool>,\n     kind: NativeLibKind,\n+    has_cfg: bool,\n     sess: &Session,\n ) -> Option<Symbol> {\n-    if sess.opts.unstable_opts.packed_bundled_libs &&\n-            sess.crate_types().iter().any(|ct| ct == &CrateType::Rlib || ct == &CrateType::Staticlib) &&\n-            let NativeLibKind::Static { bundle: Some(true) | None, .. } = kind {\n-        find_native_static_library(\n-            name.unwrap().as_str(),\n-            verbatim.unwrap_or(false),\n-            &sess.target_filesearch(PathKind::Native).search_path_dirs(),\n-            sess,\n-        ).file_name().and_then(|s| s.to_str()).map(Symbol::intern)\n-    } else {\n-        None\n+    if let NativeLibKind::Static { bundle: Some(true) | None, whole_archive } = kind\n+        && sess.crate_types().iter().any(|t| matches!(t, &CrateType::Rlib | CrateType::Staticlib))\n+        && (sess.opts.unstable_opts.packed_bundled_libs || has_cfg || whole_archive == Some(true))\n+    {\n+        let verbatim = verbatim.unwrap_or(false);\n+        let search_paths = &sess.target_filesearch(PathKind::Native).search_path_dirs();\n+        return find_native_static_library(name.unwrap().as_str(), verbatim, search_paths, sess)\n+            .file_name()\n+            .and_then(|s| s.to_str())\n+            .map(Symbol::intern);\n     }\n+    None\n }\n \n pub(crate) fn collect(tcx: TyCtxt<'_>) -> Vec<NativeLib> {\n@@ -385,7 +386,7 @@ impl<'tcx> Collector<'tcx> {\n \n             let name = name.map(|(name, _)| name);\n             let kind = kind.unwrap_or(NativeLibKind::Unspecified);\n-            let filename = find_bundled_library(name, verbatim, kind, sess);\n+            let filename = find_bundled_library(name, verbatim, kind, cfg.is_some(), sess);\n             self.libs.push(NativeLib {\n                 name,\n                 filename,\n@@ -475,7 +476,7 @@ impl<'tcx> Collector<'tcx> {\n                 let name = Some(Symbol::intern(new_name.unwrap_or(&passed_lib.name)));\n                 let sess = self.tcx.sess;\n                 let filename =\n-                    find_bundled_library(name, passed_lib.verbatim, passed_lib.kind, sess);\n+                    find_bundled_library(name, passed_lib.verbatim, passed_lib.kind, false, sess);\n                 self.libs.push(NativeLib {\n                     name,\n                     filename,"}, {"sha": "1933360f722a04bb53178175c387adef0fa62776", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/601fc8b36b1962285e371cf3c54eeb3b1b9b3a74/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/601fc8b36b1962285e371cf3c54eeb3b1b9b3a74/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=601fc8b36b1962285e371cf3c54eeb3b1b9b3a74", "patch": "@@ -1049,6 +1049,7 @@ symbols! {\n         overlapping_marker_traits,\n         owned_box,\n         packed,\n+        packed_bundled_libs,\n         panic,\n         panic_2015,\n         panic_2021,"}, {"sha": "62dc1b5f60602907b6d5d8d3552ca2a508adf1e1", "filename": "tests/run-make/rlib-format-packed-bundled-libs-3/Makefile", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/601fc8b36b1962285e371cf3c54eeb3b1b9b3a74/tests%2Frun-make%2Frlib-format-packed-bundled-libs-3%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/601fc8b36b1962285e371cf3c54eeb3b1b9b3a74/tests%2Frun-make%2Frlib-format-packed-bundled-libs-3%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Frlib-format-packed-bundled-libs-3%2FMakefile?ref=601fc8b36b1962285e371cf3c54eeb3b1b9b3a74", "patch": "@@ -0,0 +1,35 @@\n+-include ../../run-make-fulldeps/tools.mk\n+\n+# ignore-cross-compile\n+# only-linux\n+\n+# Make sure -Zpacked_bundled_libs-like behavior activates with whole-archive.\n+\n+# We're using the llvm-nm instead of the system nm to ensure it is compatible\n+# with the LLVM bitcode generated by rustc.\n+NM = \"$(LLVM_BIN_DIR)\"/llvm-nm\n+\n+all: $(call NATIVE_STATICLIB,native_dep_1) $(call NATIVE_STATICLIB,native_dep_2) $(call NATIVE_STATICLIB,native_dep_3) $(call NATIVE_STATICLIB,native_dep_4)\n+\t# test cfg with packed bundle\n+\t$(RUSTC) rust_dep_cfg.rs --crate-type=rlib -Zpacked_bundled_libs\n+\t$(RUSTC) main.rs --extern rust_dep=$(TMPDIR)/librust_dep_cfg.rlib --crate-type=staticlib --cfg should_add\n+\t$(AR) t $(TMPDIR)/librust_dep_cfg.rlib | $(CGREP) -e \"libnative_dep_1.a\"\n+\t$(AR) t $(TMPDIR)/librust_dep_cfg.rlib | $(CGREP) -e \"libnative_dep_2.a\"\n+\t$(AR) t $(TMPDIR)/libmain.a | $(CGREP) -e \"libnative_dep_1.o\"\n+\t$(AR) t $(TMPDIR)/libmain.a | $(CGREP) -ev \"libnative_dep_2.o\"\n+\n+\n+\t# test bundle with whole_archive\n+\t$(RUSTC) rust_dep.rs --crate-type=rlib\n+\t$(AR) t $(TMPDIR)/librust_dep.rlib | $(CGREP) -e \"native_dep_1\"\n+\t$(AR) t $(TMPDIR)/librust_dep.rlib | $(CGREP) -e \"native_dep_3\"\n+\t$(AR) t $(TMPDIR)/librust_dep.rlib | $(CGREP) -ev \"native_dep_2\"\n+\t$(AR) t $(TMPDIR)/librust_dep.rlib | $(CGREP) -ev \"native_dep_4\"\n+\n+\t# Make sure compiler doesn't use files, that it shouldn't know about.\n+\trm $(TMPDIR)/libnative_dep_1.a\n+\trm $(TMPDIR)/libnative_dep_3.a\n+\n+\t$(RUSTC) main.rs --extern rust_dep=$(TMPDIR)/librust_dep.rlib --print link-args > $(TMPDIR)/link_args\n+\tcat $(TMPDIR)/link_args | $(CGREP) -ev \"native_dep_3\"\n+\tcat $(TMPDIR)/link_args | $(CGREP) -e \"--whole-archive.*native_dep_1.*--whole-archive.*lnative_dep_2.*no-whole-archive.*lnative_dep_4\""}, {"sha": "8d2b8a2859c055eaa4f5a8e66ff11c7c2c4ea2b1", "filename": "tests/run-make/rlib-format-packed-bundled-libs-3/main.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/601fc8b36b1962285e371cf3c54eeb3b1b9b3a74/tests%2Frun-make%2Frlib-format-packed-bundled-libs-3%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/601fc8b36b1962285e371cf3c54eeb3b1b9b3a74/tests%2Frun-make%2Frlib-format-packed-bundled-libs-3%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Frlib-format-packed-bundled-libs-3%2Fmain.rs?ref=601fc8b36b1962285e371cf3c54eeb3b1b9b3a74", "patch": "@@ -0,0 +1,5 @@\n+extern crate rust_dep;\n+\n+pub fn main() {\n+    rust_dep::rust_dep();\n+}"}, {"sha": "07be8562c928fbfa2a13aebddd5a4d4db4933e0c", "filename": "tests/run-make/rlib-format-packed-bundled-libs-3/native_dep_1.c", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/601fc8b36b1962285e371cf3c54eeb3b1b9b3a74/tests%2Frun-make%2Frlib-format-packed-bundled-libs-3%2Fnative_dep_1.c", "raw_url": "https://github.com/rust-lang/rust/raw/601fc8b36b1962285e371cf3c54eeb3b1b9b3a74/tests%2Frun-make%2Frlib-format-packed-bundled-libs-3%2Fnative_dep_1.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Frlib-format-packed-bundled-libs-3%2Fnative_dep_1.c?ref=601fc8b36b1962285e371cf3c54eeb3b1b9b3a74", "patch": "@@ -0,0 +1 @@\n+int native_f1() { return 1; }"}, {"sha": "a1b94e40dc0478f271fe84c1596c2fd4024167ae", "filename": "tests/run-make/rlib-format-packed-bundled-libs-3/native_dep_2.c", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/601fc8b36b1962285e371cf3c54eeb3b1b9b3a74/tests%2Frun-make%2Frlib-format-packed-bundled-libs-3%2Fnative_dep_2.c", "raw_url": "https://github.com/rust-lang/rust/raw/601fc8b36b1962285e371cf3c54eeb3b1b9b3a74/tests%2Frun-make%2Frlib-format-packed-bundled-libs-3%2Fnative_dep_2.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Frlib-format-packed-bundled-libs-3%2Fnative_dep_2.c?ref=601fc8b36b1962285e371cf3c54eeb3b1b9b3a74", "patch": "@@ -0,0 +1 @@\n+int native_f2() { return 2; }"}, {"sha": "f81f397a4b1d0528381251e9c06c763a19821be8", "filename": "tests/run-make/rlib-format-packed-bundled-libs-3/native_dep_3.c", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/601fc8b36b1962285e371cf3c54eeb3b1b9b3a74/tests%2Frun-make%2Frlib-format-packed-bundled-libs-3%2Fnative_dep_3.c", "raw_url": "https://github.com/rust-lang/rust/raw/601fc8b36b1962285e371cf3c54eeb3b1b9b3a74/tests%2Frun-make%2Frlib-format-packed-bundled-libs-3%2Fnative_dep_3.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Frlib-format-packed-bundled-libs-3%2Fnative_dep_3.c?ref=601fc8b36b1962285e371cf3c54eeb3b1b9b3a74", "patch": "@@ -0,0 +1 @@\n+int native_f3() { return 3; }"}, {"sha": "14d41d60b1fec371e8a1ac6b7a63f989daf4bec0", "filename": "tests/run-make/rlib-format-packed-bundled-libs-3/native_dep_4.c", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/601fc8b36b1962285e371cf3c54eeb3b1b9b3a74/tests%2Frun-make%2Frlib-format-packed-bundled-libs-3%2Fnative_dep_4.c", "raw_url": "https://github.com/rust-lang/rust/raw/601fc8b36b1962285e371cf3c54eeb3b1b9b3a74/tests%2Frun-make%2Frlib-format-packed-bundled-libs-3%2Fnative_dep_4.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Frlib-format-packed-bundled-libs-3%2Fnative_dep_4.c?ref=601fc8b36b1962285e371cf3c54eeb3b1b9b3a74", "patch": "@@ -0,0 +1 @@\n+int native_f4() { return 4; }"}, {"sha": "abd846b6862d125b93d3e6f114800d9d0579fee2", "filename": "tests/run-make/rlib-format-packed-bundled-libs-3/rust_dep.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/601fc8b36b1962285e371cf3c54eeb3b1b9b3a74/tests%2Frun-make%2Frlib-format-packed-bundled-libs-3%2Frust_dep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/601fc8b36b1962285e371cf3c54eeb3b1b9b3a74/tests%2Frun-make%2Frlib-format-packed-bundled-libs-3%2Frust_dep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Frlib-format-packed-bundled-libs-3%2Frust_dep.rs?ref=601fc8b36b1962285e371cf3c54eeb3b1b9b3a74", "patch": "@@ -0,0 +1,16 @@\n+#![feature(packed_bundled_libs)]\n+\n+#[link(name = \"native_dep_1\", kind = \"static\", modifiers = \"+whole-archive,+bundle\")]\n+extern \"C\" {}\n+\n+#[link(name = \"native_dep_2\", kind = \"static\", modifiers = \"+whole-archive,-bundle\")]\n+extern \"C\" {}\n+\n+#[link(name = \"native_dep_3\", kind = \"static\", modifiers = \"+bundle\")]\n+extern \"C\" {}\n+\n+#[link(name = \"native_dep_4\", kind = \"static\", modifiers = \"-bundle\")]\n+extern \"C\" {}\n+\n+#[no_mangle]\n+pub fn rust_dep() {}"}, {"sha": "506ca62a8a6b511eb3c8ef84b0445645615867d4", "filename": "tests/run-make/rlib-format-packed-bundled-libs-3/rust_dep_cfg.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/601fc8b36b1962285e371cf3c54eeb3b1b9b3a74/tests%2Frun-make%2Frlib-format-packed-bundled-libs-3%2Frust_dep_cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/601fc8b36b1962285e371cf3c54eeb3b1b9b3a74/tests%2Frun-make%2Frlib-format-packed-bundled-libs-3%2Frust_dep_cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Frlib-format-packed-bundled-libs-3%2Frust_dep_cfg.rs?ref=601fc8b36b1962285e371cf3c54eeb3b1b9b3a74", "patch": "@@ -0,0 +1,10 @@\n+#![feature(link_cfg)]\n+\n+#[link(name = \"native_dep_1\", kind = \"static\", cfg(should_add))]\n+extern \"C\" {}\n+\n+#[link(name = \"native_dep_2\", kind = \"static\", cfg(should_not_add))]\n+extern \"C\" {}\n+\n+#[no_mangle]\n+pub fn rust_dep() {}"}, {"sha": "0ccd441cc6489d37fe1d930ea7d1059ad72b6143", "filename": "tests/ui/native-library-link-flags/mix-bundle-and-whole-archive-link-attr.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/601fc8b36b1962285e371cf3c54eeb3b1b9b3a74/tests%2Fui%2Fnative-library-link-flags%2Fmix-bundle-and-whole-archive-link-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/601fc8b36b1962285e371cf3c54eeb3b1b9b3a74/tests%2Fui%2Fnative-library-link-flags%2Fmix-bundle-and-whole-archive-link-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnative-library-link-flags%2Fmix-bundle-and-whole-archive-link-attr.rs?ref=601fc8b36b1962285e371cf3c54eeb3b1b9b3a74", "patch": "@@ -1,8 +1,11 @@\n-// compile-flags: -Zunstable-options --crate-type rlib\n+// gate-test-packed_bundled_libs\n+\n+// ignore-wasm32-bare\n+// compile-flags: --crate-type rlib\n+// error-pattern: link modifiers combination `+bundle,+whole-archive` is unstable when generating rlibs\n // build-fail\n-// error-pattern: the linking modifiers `+bundle` and `+whole-archive` are not compatible with each other when generating rlibs\n \n-#[link(name = \"mylib\", kind = \"static\", modifiers = \"+bundle,+whole-archive\")]\n-extern \"C\" { }\n+#[link(name = \"rust_test_helpers\", kind = \"static\", modifiers = \"+bundle,+whole-archive\")]\n+extern \"C\" {}\n \n-fn main() { }\n+fn main() {}"}, {"sha": "8a9fed740b04e7c3813266c2e19cc74fb0a38fb6", "filename": "tests/ui/native-library-link-flags/mix-bundle-and-whole-archive-link-attr.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/601fc8b36b1962285e371cf3c54eeb3b1b9b3a74/tests%2Fui%2Fnative-library-link-flags%2Fmix-bundle-and-whole-archive-link-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/601fc8b36b1962285e371cf3c54eeb3b1b9b3a74/tests%2Fui%2Fnative-library-link-flags%2Fmix-bundle-and-whole-archive-link-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnative-library-link-flags%2Fmix-bundle-and-whole-archive-link-attr.stderr?ref=601fc8b36b1962285e371cf3c54eeb3b1b9b3a74", "patch": "@@ -1,6 +1,4 @@\n-error: the linking modifiers `+bundle` and `+whole-archive` are not compatible with each other when generating rlibs\n+error: link modifiers combination `+bundle,+whole-archive` is unstable when generating rlibs\n \n-error: could not find native static library `mylib`, perhaps an -L flag is missing?\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n "}, {"sha": "18d4b52a34c3d84115607d5c15b5ab96a7da35cb", "filename": "tests/ui/native-library-link-flags/mix-bundle-and-whole-archive.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/601fc8b36b1962285e371cf3c54eeb3b1b9b3a74/tests%2Fui%2Fnative-library-link-flags%2Fmix-bundle-and-whole-archive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/601fc8b36b1962285e371cf3c54eeb3b1b9b3a74/tests%2Fui%2Fnative-library-link-flags%2Fmix-bundle-and-whole-archive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnative-library-link-flags%2Fmix-bundle-and-whole-archive.rs?ref=601fc8b36b1962285e371cf3c54eeb3b1b9b3a74", "patch": "@@ -1,7 +1,8 @@\n-// Mixing +bundle and +whole-archive is not allowed\n+// gate-test-packed_bundled_libs\n \n-// compile-flags: -l static:+bundle,+whole-archive=mylib -Zunstable-options --crate-type rlib\n+// ignore-wasm32-bare\n+// compile-flags: -l static:+bundle,+whole-archive=rust_test_helpers --crate-type rlib\n+// error-pattern: link modifiers combination `+bundle,+whole-archive` is unstable when generating rlibs\n // build-fail\n-// error-pattern: the linking modifiers `+bundle` and `+whole-archive` are not compatible with each other when generating rlibs\n \n-fn main() { }\n+fn main() {}"}, {"sha": "8a9fed740b04e7c3813266c2e19cc74fb0a38fb6", "filename": "tests/ui/native-library-link-flags/mix-bundle-and-whole-archive.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/601fc8b36b1962285e371cf3c54eeb3b1b9b3a74/tests%2Fui%2Fnative-library-link-flags%2Fmix-bundle-and-whole-archive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/601fc8b36b1962285e371cf3c54eeb3b1b9b3a74/tests%2Fui%2Fnative-library-link-flags%2Fmix-bundle-and-whole-archive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnative-library-link-flags%2Fmix-bundle-and-whole-archive.stderr?ref=601fc8b36b1962285e371cf3c54eeb3b1b9b3a74", "patch": "@@ -1,6 +1,4 @@\n-error: the linking modifiers `+bundle` and `+whole-archive` are not compatible with each other when generating rlibs\n+error: link modifiers combination `+bundle,+whole-archive` is unstable when generating rlibs\n \n-error: could not find native static library `mylib`, perhaps an -L flag is missing?\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n "}]}