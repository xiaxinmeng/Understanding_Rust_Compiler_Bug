{"sha": "53568f3fb34b20563ede4ffd792ea4564c08f3b8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzNTY4ZjNmYjM0YjIwNTYzZWRlNGZmZDc5MmVhNDU2NGMwOGYzYjg=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-10-27T15:46:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-27T15:46:52Z"}, "message": "Rollup merge of #65738 - ohadravid:re-rebalance-coherence-allow-fundamental-local, r=nikomatsakis\n\nCoherence should allow fundamental types to impl traits when they are local\n\nAfter #64414, `impl<T> Remote for Box<T> { }` is disallowed, but it is also disallowed in liballoc, where `Box` is a local type!\n\nEnabling `#![feature(re_rebalance_coherence)]` in `liballoc` results in:\n```\nerror[E0210]: type parameter `F` must be used as the type parameter for some local type (e.g., `MyStruct<F>`)\n    --> src\\liballoc\\boxed.rs:1098:1\n     |\n1098 | impl<F: ?Sized + Future + Unpin> Future for Box<F> {\n     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `F` must be used as the type parameter for some local type\n```\n\nThis PR relaxes `uncover_fundamental_ty` to skip local fundamental types.\nI didn't add a test since `liballoc` already fails to compile, but I can add one if needed.\n\nr? @nikomatsakis\n\ncc #63599", "tree": {"sha": "0842ad60d35c510ad710141a9b8f7f56ed044d88", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0842ad60d35c510ad710141a9b8f7f56ed044d88"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/53568f3fb34b20563ede4ffd792ea4564c08f3b8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdtbvsCRBK7hj4Ov3rIwAAdHIIABSGSMtgdXdkQeXIha8xvfNC\na7YA3qhbocrua9elI/jXroRFuCpOaDwuRP5J3bstNSny0baWuluW1qOtUlD2HVmf\nkIe/5AgEupjCyDWRRGocKra04RGwF4Jm0ab0temVEVisYspbCAeCh/9Lj8coNWUT\nAQjJwn2Ng82mDyQ3oRd3RUM7dhQvAZpy4iCe+lhq77LfORfAV9S5uuxbBIZolL2B\nh7iMW7XUaHWR7W/aGisU/TqlLkejciB1MGTF0nG1FDT4nHxeqS3yz61yKl9WSxfw\nEScd5052r3BWZwLSWht1OF1VLZxANBAc4W1gs4py2wBMPdPkCXKqnTLBoO3Riso=\n=+kDp\n-----END PGP SIGNATURE-----\n", "payload": "tree 0842ad60d35c510ad710141a9b8f7f56ed044d88\nparent a466f014b50a49fc380e5c9d8878c937732b0fb2\nparent 8f988bd92cf7d6d3e9be5310c18e472ba297e247\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1572191212 +0100\ncommitter GitHub <noreply@github.com> 1572191212 +0100\n\nRollup merge of #65738 - ohadravid:re-rebalance-coherence-allow-fundamental-local, r=nikomatsakis\n\nCoherence should allow fundamental types to impl traits when they are local\n\nAfter #64414, `impl<T> Remote for Box<T> { }` is disallowed, but it is also disallowed in liballoc, where `Box` is a local type!\n\nEnabling `#![feature(re_rebalance_coherence)]` in `liballoc` results in:\n```\nerror[E0210]: type parameter `F` must be used as the type parameter for some local type (e.g., `MyStruct<F>`)\n    --> src\\liballoc\\boxed.rs:1098:1\n     |\n1098 | impl<F: ?Sized + Future + Unpin> Future for Box<F> {\n     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `F` must be used as the type parameter for some local type\n```\n\nThis PR relaxes `uncover_fundamental_ty` to skip local fundamental types.\nI didn't add a test since `liballoc` already fails to compile, but I can add one if needed.\n\nr? @nikomatsakis\n\ncc #63599\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/53568f3fb34b20563ede4ffd792ea4564c08f3b8", "html_url": "https://github.com/rust-lang/rust/commit/53568f3fb34b20563ede4ffd792ea4564c08f3b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/53568f3fb34b20563ede4ffd792ea4564c08f3b8/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a466f014b50a49fc380e5c9d8878c937732b0fb2", "url": "https://api.github.com/repos/rust-lang/rust/commits/a466f014b50a49fc380e5c9d8878c937732b0fb2", "html_url": "https://github.com/rust-lang/rust/commit/a466f014b50a49fc380e5c9d8878c937732b0fb2"}, {"sha": "8f988bd92cf7d6d3e9be5310c18e472ba297e247", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f988bd92cf7d6d3e9be5310c18e472ba297e247", "html_url": "https://github.com/rust-lang/rust/commit/8f988bd92cf7d6d3e9be5310c18e472ba297e247"}], "stats": {"total": 46, "additions": 42, "deletions": 4}, "files": [{"sha": "2734fce4ea55ab9e3ea64fad1aa24ba724ad9fab", "filename": "src/librustc/traits/coherence.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/53568f3fb34b20563ede4ffd792ea4564c08f3b8/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53568f3fb34b20563ede4ffd792ea4564c08f3b8/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fcoherence.rs?ref=53568f3fb34b20563ede4ffd792ea4564c08f3b8", "patch": "@@ -378,15 +378,21 @@ fn orphan_check_trait_ref<'tcx>(\n         //      Let Ti be the first such type.\n         //     - No uncovered type parameters P1..=Pn may appear in T0..Ti (excluding Ti)\n         //\n-        fn uncover_fundamental_ty(ty: Ty<'_>) -> Vec<Ty<'_>> {\n-            if fundamental_ty(ty) {\n-                ty.walk_shallow().flat_map(|ty| uncover_fundamental_ty(ty)).collect()\n+        fn uncover_fundamental_ty<'a>(\n+            tcx: TyCtxt<'_>,\n+            ty: Ty<'a>,\n+            in_crate: InCrate,\n+        ) -> Vec<Ty<'a>> {\n+            if fundamental_ty(ty) && !ty_is_local(tcx, ty, in_crate) {\n+                ty.walk_shallow().flat_map(|ty| uncover_fundamental_ty(tcx, ty, in_crate)).collect()\n             } else {\n                 vec![ty]\n             }\n         }\n \n-        for input_ty in trait_ref.input_types().flat_map(uncover_fundamental_ty) {\n+        for input_ty in\n+            trait_ref.input_types().flat_map(|ty| uncover_fundamental_ty(tcx, ty, in_crate))\n+        {\n             debug!(\"orphan_check_trait_ref: check ty `{:?}`\", input_ty);\n             if ty_is_local(tcx, input_ty, in_crate) {\n                 debug!(\"orphan_check_trait_ref: ty_is_local `{:?}`\", input_ty);"}, {"sha": "d461b5abd60ff849f03a568b89443c43e739b878", "filename": "src/test/ui/coherence/impl-foreign-for-locally-defined-fundamental.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/53568f3fb34b20563ede4ffd792ea4564c08f3b8/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign-for-locally-defined-fundamental.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53568f3fb34b20563ede4ffd792ea4564c08f3b8/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign-for-locally-defined-fundamental.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign-for-locally-defined-fundamental.rs?ref=53568f3fb34b20563ede4ffd792ea4564c08f3b8", "patch": "@@ -0,0 +1,16 @@\n+#![feature(fundamental)]\n+#![feature(re_rebalance_coherence)]\n+\n+// compile-flags:--crate-name=test\n+// aux-build:coherence_lib.rs\n+// check-pass\n+\n+extern crate coherence_lib as lib;\n+use lib::*;\n+\n+#[fundamental]\n+struct Local;\n+\n+impl Remote for Local {}\n+\n+fn main() {}"}, {"sha": "0a3d9e2e0e89c3a8aa884cb119f78475de810b73", "filename": "src/test/ui/coherence/impl-foreign-for-locally-defined-fundamental[foreign].rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/53568f3fb34b20563ede4ffd792ea4564c08f3b8/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign-for-locally-defined-fundamental%5Bforeign%5D.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53568f3fb34b20563ede4ffd792ea4564c08f3b8/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign-for-locally-defined-fundamental%5Bforeign%5D.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl-foreign-for-locally-defined-fundamental%5Bforeign%5D.rs?ref=53568f3fb34b20563ede4ffd792ea4564c08f3b8", "patch": "@@ -0,0 +1,16 @@\n+#![feature(fundamental)]\n+#![feature(re_rebalance_coherence)]\n+\n+// compile-flags:--crate-name=test\n+// aux-build:coherence_lib.rs\n+// check-pass\n+\n+extern crate coherence_lib as lib;\n+use lib::*;\n+\n+#[fundamental]\n+struct MyBox<T>(T);\n+\n+impl<T> Remote for MyBox<T> {}\n+\n+fn main() {}"}]}