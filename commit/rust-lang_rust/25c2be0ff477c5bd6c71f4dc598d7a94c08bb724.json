{"sha": "25c2be0ff477c5bd6c71f4dc598d7a94c08bb724", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1YzJiZTBmZjQ3N2M1YmQ2YzcxZjRkYzU5OGQ3YTk0YzA4YmI3MjQ=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-03-16T13:28:45Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-03-16T14:39:07Z"}, "message": "Forbid boxed ifaces with self types or generic methods in bounded params\n\nThey are a soundness hole.\n\nCloses #1994", "tree": {"sha": "3bc7f46a71d8be40c964248f3555922714c8fb23", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3bc7f46a71d8be40c964248f3555922714c8fb23"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/25c2be0ff477c5bd6c71f4dc598d7a94c08bb724", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/25c2be0ff477c5bd6c71f4dc598d7a94c08bb724", "html_url": "https://github.com/rust-lang/rust/commit/25c2be0ff477c5bd6c71f4dc598d7a94c08bb724", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/25c2be0ff477c5bd6c71f4dc598d7a94c08bb724/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "484469c58d7a9467578bbc0754b734bc0c485466", "url": "https://api.github.com/repos/rust-lang/rust/commits/484469c58d7a9467578bbc0754b734bc0c485466", "html_url": "https://github.com/rust-lang/rust/commit/484469c58d7a9467578bbc0754b734bc0c485466"}], "stats": {"total": 58, "additions": 39, "deletions": 19}, "files": [{"sha": "c2cb142b46e26a74a1fc0fb601183a5752b76176", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/25c2be0ff477c5bd6c71f4dc598d7a94c08bb724/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25c2be0ff477c5bd6c71f4dc598d7a94c08bb724/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=25c2be0ff477c5bd6c71f4dc598d7a94c08bb724", "patch": "@@ -2668,12 +2668,12 @@ fn invoke_(bcx: block, llfn: ValueRef, llargs: [ValueRef],\n     // cleanups to run\n     if bcx.unreachable { ret bcx; }\n     let normal_bcx = sub_block(bcx, \"normal return\");\n-    /*std::io::println(\"fn: \" + lib::llvm::type_to_str(bcx.ccx().tn,\n-                     val_ty(llfn)));\n+    /*io::println(\"fn: \" + lib::llvm::type_to_str(bcx.ccx().tn,\n+                                                val_ty(llfn)));\n     for a in llargs {\n-        std::io::println(\" a: \" + lib::llvm::type_to_str(bcx.ccx().tn,\n-                         val_ty(a)));\n-    }*/\n+        io::println(\" a: \" + lib::llvm::type_to_str(bcx.ccx().tn,\n+                                                    val_ty(a)));\n+    }// */\n     invoker(bcx, llfn, llargs, normal_bcx.llbb, get_landing_pad(bcx));\n     ret normal_bcx;\n }"}, {"sha": "f4620677701dced9010402d084025b10eefbd4cf", "filename": "src/rustc/middle/trans/impl.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/25c2be0ff477c5bd6c71f4dc598d7a94c08bb724/src%2Frustc%2Fmiddle%2Ftrans%2Fimpl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25c2be0ff477c5bd6c71f4dc598d7a94c08bb724/src%2Frustc%2Fmiddle%2Ftrans%2Fimpl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fimpl.rs?ref=25c2be0ff477c5bd6c71f4dc598d7a94c08bb724", "patch": "@@ -115,9 +115,12 @@ fn trans_monomorphized_callee(bcx: block, callee_id: ast::node_id,\n         let ty_substs = impl_substs +\n             vec::tailn(node_substs, node_substs.len() - n_m_tps);\n         let {bcx, val} = trans_self_arg(bcx, base);\n-        {env: self_env(val, node_id_type(bcx, base.id), none)\n-         with lval_static_fn_inner(bcx, mth_id, callee_id, ty_substs,\n-                                   some(sub_origins))}\n+        let lval = lval_static_fn_inner(bcx, mth_id, callee_id, ty_substs,\n+                                        some(sub_origins));\n+        {env: self_env(val, node_id_type(bcx, base.id), none),\n+         val: PointerCast(bcx, lval.val, T_ptr(type_of_fn_from_ty(\n+             ccx, node_id_type(bcx, callee_id))))\n+         with lval}\n       }\n       typeck::vtable_iface(iid, tps) {\n         trans_iface_callee(bcx, base, callee_id, n_method)\n@@ -236,7 +239,7 @@ fn make_impl_vtable(ccx: @crate_ctxt, impl_id: ast::def_id, substs: [ty::t],\n         let fty = ty::substitute_type_params(tcx, substs,\n                                              ty::mk_fn(tcx, im.fty));\n         if (*im.tps).len() > 0u || ty::type_has_vars(fty) {\n-            C_null(type_of_fn_from_ty(ccx, fty))\n+            C_null(T_ptr(T_nil()))\n         } else {\n             let m_id = method_with_name(ccx, impl_id, im.ident);\n             if has_tps {"}, {"sha": "ff38e998461b7ca24bb665c794192e43c9f2c0c4", "filename": "src/rustc/middle/typeck.rs", "status": "modified", "additions": 27, "deletions": 10, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/25c2be0ff477c5bd6c71f4dc598d7a94c08bb724/src%2Frustc%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25c2be0ff477c5bd6c71f4dc598d7a94c08bb724/src%2Frustc%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck.rs?ref=25c2be0ff477c5bd6c71f4dc598d7a94c08bb724", "patch": "@@ -1782,7 +1782,7 @@ fn lookup_method(fcx: @fn_ctxt, expr: @ast::expr, node_id: ast::node_id,\n       some({method_ty: fty, n_tps: method_n_tps, substs, origin, self_sub}) {\n         let tcx = fcx.ccx.tcx;\n         let substs = substs, n_tps = vec::len(substs), n_tys = vec::len(tps);\n-        let has_self = ty::type_has_params(fty);\n+        let has_self = ty::type_has_vars(fty);\n         if method_n_tps + n_tps > 0u {\n             if n_tys == 0u || n_tys != method_n_tps {\n                 if n_tys != 0u {\n@@ -3335,15 +3335,16 @@ mod vtable {\n     }\n \n     fn lookup_vtables(fcx: @fn_ctxt, isc: resolve::iscopes, sp: span,\n-                    bounds: @[ty::param_bounds], tys: [ty::t])\n-        -> vtable_res {\n+                      bounds: @[ty::param_bounds], tys: [ty::t],\n+                      allow_unsafe: bool) -> vtable_res {\n         let tcx = fcx.ccx.tcx, result = [], i = 0u;\n         for ty in tys {\n             for bound in *bounds[i] {\n                 alt bound {\n                   ty::bound_iface(i_ty) {\n                     let i_ty = ty::substitute_type_params(tcx, tys, i_ty);\n-                    result += [lookup_vtable(fcx, isc, sp, ty, i_ty)];\n+                    result += [lookup_vtable(fcx, isc, sp, ty, i_ty,\n+                                             allow_unsafe)];\n                   }\n                   _ {}\n                 }\n@@ -3354,7 +3355,8 @@ mod vtable {\n     }\n \n     fn lookup_vtable(fcx: @fn_ctxt, isc: resolve::iscopes, sp: span,\n-                   ty: ty::t, iface_ty: ty::t) -> vtable_origin {\n+                     ty: ty::t, iface_ty: ty::t, allow_unsafe: bool)\n+        -> vtable_origin {\n         let tcx = fcx.ccx.tcx;\n         let (iface_id, iface_tps) = alt check ty::get(iface_ty).struct {\n             ty::ty_iface(did, tps) { (did, tps) }\n@@ -3378,6 +3380,20 @@ mod vtable {\n             }\n           }\n           ty::ty_iface(did, tps) if iface_id == did {\n+            if !allow_unsafe {\n+                for m in *ty::iface_methods(tcx, did) {\n+                    if ty::type_has_vars(ty::mk_fn(tcx, m.fty)) {\n+                        tcx.sess.span_err(\n+                            sp, \"a boxed iface with self types may not be \\\n+                                 passed as a bounded type\");\n+                    } else if (*m.tps).len() > 0u {\n+                        tcx.sess.span_err(\n+                            sp, \"a boxed iface with generic methods may not \\\n+                                 be passed as a bounded type\");\n+\n+                    }\n+                }\n+            }\n             ret vtable_iface(did, tps);\n           }\n           _ {\n@@ -3410,8 +3426,8 @@ mod vtable {\n                                                   im.did);\n                                 let params = vec::map(vars, {|t|\n                                     fixup_ty(fcx, sp, t)});\n-                                let subres = lookup_vtables(fcx, isc, sp,\n-                                                            im_bs, params);\n+                                let subres = lookup_vtables(\n+                                    fcx, isc, sp, im_bs, params, false);\n                                 found = some(vtable_static(im.did, params,\n                                                            subres));\n                             }\n@@ -3469,7 +3485,7 @@ mod vtable {\n                 if has_iface_bounds(*item_ty.bounds) {\n                     let impls = cx.impl_map.get(ex.id);\n                     cx.vtable_map.insert(ex.id, lookup_vtables(\n-                        fcx, impls, ex.span, item_ty.bounds, ts));\n+                        fcx, impls, ex.span, item_ty.bounds, ts, false));\n                 }\n               }\n               _ {}\n@@ -3490,7 +3506,7 @@ mod vtable {\n                     let ts = ty::node_id_to_type_params(cx.tcx, callee_id);\n                     let iscs = cx.impl_map.get(ex.id);\n                     cx.vtable_map.insert(callee_id, lookup_vtables(\n-                        fcx, iscs, ex.span, bounds, ts));\n+                        fcx, iscs, ex.span, bounds, ts, false));\n                 }\n               }\n               _ {}\n@@ -3502,7 +3518,8 @@ mod vtable {\n               ty::ty_iface(_, _) {\n                 let impls = cx.impl_map.get(ex.id);\n                 let vtable = lookup_vtable(fcx, impls, ex.span,\n-                                       expr_ty(cx.tcx, src), target_ty);\n+                                           expr_ty(cx.tcx, src), target_ty,\n+                                           true);\n                 cx.vtable_map.insert(ex.id, @[vtable]);\n               }\n               _ {}"}]}