{"sha": "7afa0ccb37a3006ef3cedbdd60da4febee41500b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhZmEwY2NiMzdhMzAwNmVmM2NlZGJkZDYwZGE0ZmViZWU0MTUwMGI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-15T10:29:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-15T10:29:00Z"}, "message": "Auto merge of #52381 - oli-obk:ty_to_def_id, r=eddyb\n\nRemove `ty_to_def_id`\n\nfixes https://github.com/rust-lang/rust/issues/52341\n\nThe uses were mostly convenience and generally \"too powerful\" (would also have worked for types that weren't interesting at the use site)\n\nr? @eddyb", "tree": {"sha": "0a57bdfca85695ee6e1c7bf443a93440bd113571", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a57bdfca85695ee6e1c7bf443a93440bd113571"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7afa0ccb37a3006ef3cedbdd60da4febee41500b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7afa0ccb37a3006ef3cedbdd60da4febee41500b", "html_url": "https://github.com/rust-lang/rust/commit/7afa0ccb37a3006ef3cedbdd60da4febee41500b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7afa0ccb37a3006ef3cedbdd60da4febee41500b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee8cc77b32e5480c92b0259347f32f9a4bef6f92", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee8cc77b32e5480c92b0259347f32f9a4bef6f92", "html_url": "https://github.com/rust-lang/rust/commit/ee8cc77b32e5480c92b0259347f32f9a4bef6f92"}, {"sha": "ecab96fd7ce9991218145a9e0063ef3c25c7a977", "url": "https://api.github.com/repos/rust-lang/rust/commits/ecab96fd7ce9991218145a9e0063ef3c25c7a977", "html_url": "https://github.com/rust-lang/rust/commit/ecab96fd7ce9991218145a9e0063ef3c25c7a977"}], "stats": {"total": 51, "additions": 20, "deletions": 31}, "files": [{"sha": "180469a5d848ad4d5f099d77366da6a2717f037b", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7afa0ccb37a3006ef3cedbdd60da4febee41500b/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7afa0ccb37a3006ef3cedbdd60da4febee41500b/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=7afa0ccb37a3006ef3cedbdd60da4febee41500b", "patch": "@@ -469,13 +469,9 @@ impl<'a, 'tcx> DeadVisitor<'a, 'tcx> {\n \n     fn should_warn_about_field(&mut self, field: &hir::StructField) -> bool {\n         let field_type = self.tcx.type_of(self.tcx.hir.local_def_id(field.id));\n-        let is_marker_field = match field_type.ty_to_def_id() {\n-            Some(def_id) => self.tcx.lang_items().items().iter().any(|item| *item == Some(def_id)),\n-            _ => false\n-        };\n         !field.is_positional()\n             && !self.symbol_is_live(field.id, None)\n-            && !is_marker_field\n+            && !field_type.is_phantom_data()\n             && !has_allow_dead_code_or_lang_attr(self.tcx, field.id, &field.attrs)\n     }\n "}, {"sha": "a5caacea986183a3e15245b30b414f36490f8df8", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7afa0ccb37a3006ef3cedbdd60da4febee41500b/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7afa0ccb37a3006ef3cedbdd60da4febee41500b/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=7afa0ccb37a3006ef3cedbdd60da4febee41500b", "patch": "@@ -391,7 +391,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             flags.push((name, Some(value)));\n         }\n \n-        if let Some(true) = self_ty.ty_to_def_id().map(|def_id| def_id.is_local()) {\n+        if let Some(true) = self_ty.ty_adt_def().map(|def| def.did.is_local()) {\n             flags.push((\"crate_local\".to_string(), None));\n         }\n \n@@ -775,7 +775,13 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                 }\n                 let found_trait_ty = found_trait_ref.self_ty();\n \n-                let found_did = found_trait_ty.ty_to_def_id();\n+                let found_did = match found_trait_ty.sty {\n+                    ty::TyClosure(did, _) |\n+                    ty::TyForeign(did) |\n+                    ty::TyFnDef(did, _) => Some(did),\n+                    ty::TyAdt(def, _) => Some(def.did),\n+                    _ => None,\n+                };\n                 let found_span = found_did.and_then(|did| {\n                     self.tcx.hir.span_if_local(did)\n                 }).map(|sp| self.tcx.sess.codemap().def_span(sp)); // the sp could be an fn def"}, {"sha": "934bf9a416a95f3e9a9f68d03a13c0976e63bd8d", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7afa0ccb37a3006ef3cedbdd60da4febee41500b/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7afa0ccb37a3006ef3cedbdd60da4febee41500b/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=7afa0ccb37a3006ef3cedbdd60da4febee41500b", "patch": "@@ -1767,17 +1767,6 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n         }\n     }\n \n-    pub fn ty_to_def_id(&self) -> Option<DefId> {\n-        match self.sty {\n-            TyDynamic(ref tt, ..) => tt.principal().map(|p| p.def_id()),\n-            TyAdt(def, _) => Some(def.did),\n-            TyForeign(did) => Some(did),\n-            TyClosure(id, _) => Some(id),\n-            TyFnDef(id, _) => Some(id),\n-            _ => None,\n-        }\n-    }\n-\n     pub fn ty_adt_def(&self) -> Option<&'tcx AdtDef> {\n         match self.sty {\n             TyAdt(adt, _) => Some(adt),"}, {"sha": "2179999125b61663998d71090d51e648f1a2e49b", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7afa0ccb37a3006ef3cedbdd60da4febee41500b/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7afa0ccb37a3006ef3cedbdd60da4febee41500b/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=7afa0ccb37a3006ef3cedbdd60da4febee41500b", "patch": "@@ -399,32 +399,30 @@ impl CodegenContext {\n }\n \n struct DiagnosticHandlers<'a> {\n-    inner: Box<(&'a CodegenContext, &'a Handler)>,\n+    data: *mut (&'a CodegenContext, &'a Handler),\n     llcx: ContextRef,\n }\n \n impl<'a> DiagnosticHandlers<'a> {\n     fn new(cgcx: &'a CodegenContext,\n            handler: &'a Handler,\n            llcx: ContextRef) -> DiagnosticHandlers<'a> {\n-        let data = Box::new((cgcx, handler));\n+        let data = Box::into_raw(Box::new((cgcx, handler)));\n         unsafe {\n-            let arg = &*data as &(_, _) as *const _ as *mut _;\n-            llvm::LLVMRustSetInlineAsmDiagnosticHandler(llcx, inline_asm_handler, arg);\n-            llvm::LLVMContextSetDiagnosticHandler(llcx, diagnostic_handler, arg);\n-        }\n-        DiagnosticHandlers {\n-            inner: data,\n-            llcx: llcx,\n+            llvm::LLVMRustSetInlineAsmDiagnosticHandler(llcx, inline_asm_handler, data as *mut _);\n+            llvm::LLVMContextSetDiagnosticHandler(llcx, diagnostic_handler, data as *mut _);\n         }\n+        DiagnosticHandlers { data, llcx }\n     }\n }\n \n impl<'a> Drop for DiagnosticHandlers<'a> {\n     fn drop(&mut self) {\n+        use std::ptr::null_mut;\n         unsafe {\n-            llvm::LLVMRustSetInlineAsmDiagnosticHandler(self.llcx, inline_asm_handler, 0 as *mut _);\n-            llvm::LLVMContextSetDiagnosticHandler(self.llcx, diagnostic_handler, 0 as *mut _);\n+            llvm::LLVMRustSetInlineAsmDiagnosticHandler(self.llcx, inline_asm_handler, null_mut());\n+            llvm::LLVMContextSetDiagnosticHandler(self.llcx, diagnostic_handler, null_mut());\n+            drop(Box::from_raw(self.data));\n         }\n     }\n }"}, {"sha": "0b33e397d1880d85aa44327c503bd578d03b41b6", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7afa0ccb37a3006ef3cedbdd60da4febee41500b/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7afa0ccb37a3006ef3cedbdd60da4febee41500b/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=7afa0ccb37a3006ef3cedbdd60da4febee41500b", "patch": "@@ -591,8 +591,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingDebugImplementations {\n         if self.impling_types.is_none() {\n             let mut impls = NodeSet();\n             cx.tcx.for_each_impl(debug, |d| {\n-                if let Some(ty_def) = cx.tcx.type_of(d).ty_to_def_id() {\n-                    if let Some(node_id) = cx.tcx.hir.as_local_node_id(ty_def) {\n+                if let Some(ty_def) = cx.tcx.type_of(d).ty_adt_def() {\n+                    if let Some(node_id) = cx.tcx.hir.as_local_node_id(ty_def.did) {\n                         impls.insert(node_id);\n                     }\n                 }"}]}