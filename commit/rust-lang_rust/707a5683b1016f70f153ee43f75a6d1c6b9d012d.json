{"sha": "707a5683b1016f70f153ee43f75a6d1c6b9d012d", "node_id": "C_kwDOAAsO6NoAKDcwN2E1NjgzYjEwMTZmNzBmMTUzZWU0M2Y3NWE2ZDFjNmI5ZDAxMmQ", "commit": {"author": {"name": "Amos Wenger", "email": "amoswenger@gmail.com", "date": "2022-05-20T23:43:05Z"}, "committer": {"name": "Amos Wenger", "email": "amoswenger@gmail.com", "date": "2022-05-20T23:43:05Z"}, "message": "Still suggest generating enum methods if the name ref starts with a lowercase letter", "tree": {"sha": "1cd9fef63fc15ee0d413a9f59c91dcae4f52b958", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1cd9fef63fc15ee0d413a9f59c91dcae4f52b958"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/707a5683b1016f70f153ee43f75a6d1c6b9d012d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/707a5683b1016f70f153ee43f75a6d1c6b9d012d", "html_url": "https://github.com/rust-lang/rust/commit/707a5683b1016f70f153ee43f75a6d1c6b9d012d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/707a5683b1016f70f153ee43f75a6d1c6b9d012d/comments", "author": {"login": "fasterthanlime", "id": 7998310, "node_id": "MDQ6VXNlcjc5OTgzMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/7998310?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fasterthanlime", "html_url": "https://github.com/fasterthanlime", "followers_url": "https://api.github.com/users/fasterthanlime/followers", "following_url": "https://api.github.com/users/fasterthanlime/following{/other_user}", "gists_url": "https://api.github.com/users/fasterthanlime/gists{/gist_id}", "starred_url": "https://api.github.com/users/fasterthanlime/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fasterthanlime/subscriptions", "organizations_url": "https://api.github.com/users/fasterthanlime/orgs", "repos_url": "https://api.github.com/users/fasterthanlime/repos", "events_url": "https://api.github.com/users/fasterthanlime/events{/privacy}", "received_events_url": "https://api.github.com/users/fasterthanlime/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fasterthanlime", "id": 7998310, "node_id": "MDQ6VXNlcjc5OTgzMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/7998310?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fasterthanlime", "html_url": "https://github.com/fasterthanlime", "followers_url": "https://api.github.com/users/fasterthanlime/followers", "following_url": "https://api.github.com/users/fasterthanlime/following{/other_user}", "gists_url": "https://api.github.com/users/fasterthanlime/gists{/gist_id}", "starred_url": "https://api.github.com/users/fasterthanlime/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fasterthanlime/subscriptions", "organizations_url": "https://api.github.com/users/fasterthanlime/orgs", "repos_url": "https://api.github.com/users/fasterthanlime/repos", "events_url": "https://api.github.com/users/fasterthanlime/events{/privacy}", "received_events_url": "https://api.github.com/users/fasterthanlime/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ed85beb15abac72cde1a3e83ef8f1122d6dea8c", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ed85beb15abac72cde1a3e83ef8f1122d6dea8c", "html_url": "https://github.com/rust-lang/rust/commit/0ed85beb15abac72cde1a3e83ef8f1122d6dea8c"}], "stats": {"total": 33, "additions": 31, "deletions": 2}, "files": [{"sha": "3b28a9639c87753b376c60125d5266fe3fbcf279", "filename": "crates/ide-assists/src/handlers/generate_enum_variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/707a5683b1016f70f153ee43f75a6d1c6b9d012d/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/707a5683b1016f70f153ee43f75a6d1c6b9d012d/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_enum_variant.rs?ref=707a5683b1016f70f153ee43f75a6d1c6b9d012d", "patch": "@@ -42,7 +42,7 @@ pub(crate) fn generate_enum_variant(acc: &mut Assists, ctx: &AssistContext) -> O\n \n     let name_ref = path.segment()?.name_ref()?;\n     if name_ref.text().as_str().chars().next()?.is_ascii_lowercase() {\n-        // No need to generate anything if the name starts with a lowercase letter\n+        // Don't suggest generating variant if the name starts with a lowercase letter\n         return None;\n     }\n "}, {"sha": "7077dc9e5c7cef767d12f2c0f98fa8a287b40120", "filename": "crates/ide-assists/src/handlers/generate_function.rs", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/707a5683b1016f70f153ee43f75a6d1c6b9d012d/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/707a5683b1016f70f153ee43f75a6d1c6b9d012d/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs?ref=707a5683b1016f70f153ee43f75a6d1c6b9d012d", "patch": "@@ -72,7 +72,10 @@ fn gen_fn(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n             }\n             Some(hir::PathResolution::Def(hir::ModuleDef::Adt(adt))) => {\n                 if let hir::Adt::Enum(_) = adt {\n-                    return None;\n+                    // Don't suggest generating function if the name starts with an uppercase letter\n+                    if name_ref.text().chars().next()?.is_uppercase() {\n+                        return None;\n+                    }\n                 }\n \n                 let current_module = ctx.sema.scope(call.syntax())?.module();\n@@ -1755,4 +1758,30 @@ fn main() {\n \",\n         );\n     }\n+\n+    #[test]\n+    fn applicable_for_enum_method() {\n+        check_assist(\n+            generate_function,\n+            r\"\n+enum Foo {}\n+fn main() {\n+    Foo::new$0();\n+}\n+\",\n+            r\"\n+enum Foo {}\n+fn main() {\n+    Foo::new();\n+}\n+impl Foo {\n+\n+\n+fn new() ${0:-> _} {\n+    todo!()\n+}\n+}\n+\",\n+        )\n+    }\n }"}]}