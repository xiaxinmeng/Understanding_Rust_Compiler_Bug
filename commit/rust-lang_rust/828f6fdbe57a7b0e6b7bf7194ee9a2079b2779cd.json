{"sha": "828f6fdbe57a7b0e6b7bf7194ee9a2079b2779cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyOGY2ZmRiZTU3YTdiMGU2YjdiZjcxOTRlZTlhMjA3OWIyNzc5Y2Q=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-05-27T03:38:23Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-05-28T23:32:56Z"}, "message": "Introduce and use `Mark::outer_is_descendant_of()`.\n\nIt reduces two `hygiene_data` accesses to one on some hot paths.", "tree": {"sha": "5d43ce9586cd5a31172f3cf5a0907da97e97d415", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d43ce9586cd5a31172f3cf5a0907da97e97d415"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/828f6fdbe57a7b0e6b7bf7194ee9a2079b2779cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/828f6fdbe57a7b0e6b7bf7194ee9a2079b2779cd", "html_url": "https://github.com/rust-lang/rust/commit/828f6fdbe57a7b0e6b7bf7194ee9a2079b2779cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/828f6fdbe57a7b0e6b7bf7194ee9a2079b2779cd/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "721268583759224d0f6476e0b8b196cc8afbdea0", "url": "https://api.github.com/repos/rust-lang/rust/commits/721268583759224d0f6476e0b8b196cc8afbdea0", "html_url": "https://github.com/rust-lang/rust/commit/721268583759224d0f6476e0b8b196cc8afbdea0"}], "stats": {"total": 25, "additions": 20, "deletions": 5}, "files": [{"sha": "f9cf95a873f5f3375296843ae39db93ca4ea49de", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/828f6fdbe57a7b0e6b7bf7194ee9a2079b2779cd/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/828f6fdbe57a7b0e6b7bf7194ee9a2079b2779cd/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=828f6fdbe57a7b0e6b7bf7194ee9a2079b2779cd", "patch": "@@ -2308,7 +2308,7 @@ impl<'a> Resolver<'a> {\n \n     fn hygienic_lexical_parent(&mut self, module: Module<'a>, span: &mut Span)\n                                -> Option<Module<'a>> {\n-        if !module.expansion.is_descendant_of(span.ctxt().outer()) {\n+        if !module.expansion.outer_is_descendant_of(span.ctxt()) {\n             return Some(self.macro_def_scope(span.remove_mark()));\n         }\n \n@@ -2344,7 +2344,7 @@ impl<'a> Resolver<'a> {\n             module.expansion.is_descendant_of(parent.expansion) {\n                 // The macro is a proc macro derive\n                 if module.expansion.looks_like_proc_macro_derive() {\n-                    if parent.expansion.is_descendant_of(span.ctxt().outer()) {\n+                    if parent.expansion.outer_is_descendant_of(span.ctxt()) {\n                         *poisoned = Some(node_id);\n                         return module.parent;\n                     }"}, {"sha": "3ffeaf43b85e9116bda655e917415f95f15892b7", "filename": "src/libsyntax_pos/hygiene.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/828f6fdbe57a7b0e6b7bf7194ee9a2079b2779cd/src%2Flibsyntax_pos%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/828f6fdbe57a7b0e6b7bf7194ee9a2079b2779cd/src%2Flibsyntax_pos%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fhygiene.rs?ref=828f6fdbe57a7b0e6b7bf7194ee9a2079b2779cd", "patch": "@@ -124,6 +124,21 @@ impl Mark {\n         })\n     }\n \n+    /// `mark.outer_is_descendant_of(ctxt)` is equivalent to but faster than\n+    /// `mark.is_descendant_of(ctxt.outer())`.\n+    pub fn outer_is_descendant_of(mut self, ctxt: SyntaxContext) -> bool {\n+        HygieneData::with(|data| {\n+            let outer = data.syntax_contexts[ctxt.0 as usize].outer_mark;\n+            while self != outer {\n+                if self == Mark::root() {\n+                    return false;\n+                }\n+                self = data.marks[self.0 as usize].parent;\n+            }\n+            true\n+        })\n+    }\n+\n     /// Computes a mark such that both input marks are descendants of (or equal to) the returned\n     /// mark. That is, the following holds:\n     ///\n@@ -416,7 +431,7 @@ impl SyntaxContext {\n     /// or `None` if we privacy check as usual (i.e., not w.r.t. a macro definition scope).\n     pub fn adjust(&mut self, expansion: Mark) -> Option<Mark> {\n         let mut scope = None;\n-        while !expansion.is_descendant_of(self.outer()) {\n+        while !expansion.outer_is_descendant_of(*self) {\n             scope = Some(self.remove_mark());\n         }\n         scope\n@@ -450,7 +465,7 @@ impl SyntaxContext {\n     pub fn glob_adjust(&mut self, expansion: Mark, mut glob_ctxt: SyntaxContext)\n                        -> Option<Option<Mark>> {\n         let mut scope = None;\n-        while !expansion.is_descendant_of(glob_ctxt.outer()) {\n+        while !expansion.outer_is_descendant_of(glob_ctxt) {\n             scope = Some(glob_ctxt.remove_mark());\n             if self.remove_mark() != scope.unwrap() {\n                 return None;\n@@ -476,7 +491,7 @@ impl SyntaxContext {\n         }\n \n         let mut marks = Vec::new();\n-        while !expansion.is_descendant_of(glob_ctxt.outer()) {\n+        while !expansion.outer_is_descendant_of(glob_ctxt) {\n             marks.push(glob_ctxt.remove_mark());\n         }\n "}]}