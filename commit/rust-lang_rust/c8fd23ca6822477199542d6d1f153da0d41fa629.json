{"sha": "c8fd23ca6822477199542d6d1f153da0d41fa629", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4ZmQyM2NhNjgyMjQ3NzE5OTU0MmQ2ZDFmMTUzZGEwZDQxZmE2Mjk=", "commit": {"author": {"name": "Marcus Klaas", "email": "mail@marcusklaas.nl", "date": "2015-08-20T21:05:41Z"}, "committer": {"name": "Marcus Klaas", "email": "mail@marcusklaas.nl", "date": "2015-08-20T21:05:41Z"}, "message": "Refactor closure formatting routine", "tree": {"sha": "ddfd79baf3d5bbdbe2f1de39f32762725d88ea4d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ddfd79baf3d5bbdbe2f1de39f32762725d88ea4d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c8fd23ca6822477199542d6d1f153da0d41fa629", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c8fd23ca6822477199542d6d1f153da0d41fa629", "html_url": "https://github.com/rust-lang/rust/commit/c8fd23ca6822477199542d6d1f153da0d41fa629", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c8fd23ca6822477199542d6d1f153da0d41fa629/comments", "author": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a75017e50ecbca7154713a38e7bbcc71590813a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/a75017e50ecbca7154713a38e7bbcc71590813a1", "html_url": "https://github.com/rust-lang/rust/commit/a75017e50ecbca7154713a38e7bbcc71590813a1"}], "stats": {"total": 59, "additions": 34, "deletions": 25}, "files": [{"sha": "6ed8470fbea5d289c4bd06bdd155a21ef4bd72fc", "filename": "src/expr.rs", "status": "modified", "additions": 10, "deletions": 22, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c8fd23ca6822477199542d6d1f153da0d41fa629/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8fd23ca6822477199542d6d1f153da0d41fa629/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=c8fd23ca6822477199542d6d1f153da0d41fa629", "patch": "@@ -160,7 +160,8 @@ fn rewrite_closure(capture: ast::CaptureClause,\n     let prefix = format!(\"{}|{}|\", mover, write_list(&arg_items.collect::<Vec<_>>(), &fmt));\n     let block_indent = closure_block_indent(context, offset);\n \n-    let body_rewrite = if body.stmts.is_empty() {\n+    // Try to format closure body as a single line expression without braces.\n+    if body.stmts.is_empty() {\n         let expr = body.expr.as_ref().unwrap();\n         // All closure bodies are blocks in the eyes of the AST, but we may not\n         // want to unwrap them when they only contain a single expression.\n@@ -179,29 +180,16 @@ fn rewrite_closure(capture: ast::CaptureClause,\n         let accept_rewrite = rewrite.as_ref().map(|result| !result.contains('\\n')).unwrap_or(false);\n \n         if accept_rewrite {\n-            rewrite\n-        } else {\n-            if let ast::Expr_::ExprBlock(ref inner_body) = expr.node {\n-                // Closure body is a proper block, with braces and all.\n-                let inner_context = &RewriteContext { block_indent: block_indent, ..*context };\n-                inner_body.rewrite(inner_context, 0, 0)\n-            } else {\n-                // Closure body is an expression, but not a block. It does not\n-                // fit a single line, so we format it as it were wrapped in a\n-                // block.\n-                let inner_context = &RewriteContext {\n-                    block_indent: block_indent + context.config.tab_spaces,\n-                    ..*context\n-                };\n-                let indent = offset + context.config.tab_spaces;\n-                expr.rewrite(inner_context, context.config.max_width - indent, indent)\n-                    .map(|result| {\n-                        format!(\"{{\\n{}{}\\n{}}}\", make_indent(indent), result, make_indent(offset))\n-                    })\n-            }\n+            return Some(format!(\"{} {}\", prefix, rewrite.unwrap()));\n         }\n+    }\n+\n+    // We couldn't format the closure body as a single line expression; fall\n+    // back to block formatting.\n+    let inner_context = &RewriteContext { block_indent: block_indent, ..*context };\n+    let body_rewrite = if let ast::Expr_::ExprBlock(ref inner) = body.expr.as_ref().unwrap().node {\n+        inner.rewrite(inner_context, 0, 0)\n     } else {\n-        let inner_context = &RewriteContext { block_indent: block_indent, ..*context };\n         body.rewrite(inner_context, 0, 0)\n     };\n "}, {"sha": "2489a8c1a9d5cdd951c768d4ff8662576f4d50ed", "filename": "src/visitor.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c8fd23ca6822477199542d6d1f153da0d41fa629/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8fd23ca6822477199542d6d1f153da0d41fa629/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=c8fd23ca6822477199542d6d1f153da0d41fa629", "patch": "@@ -68,9 +68,18 @@ impl<'a, 'v> visit::Visitor<'v> for FmtVisitor<'a> {\n                self.codemap.lookup_char_pos(b.span.lo),\n                self.codemap.lookup_char_pos(b.span.hi));\n \n-        self.buffer.push_str(\"{\");\n-        self.last_pos = self.last_pos + BytePos(1);\n+        // Check if this block has braces.\n+        let snippet = self.snippet(b.span);\n+        let has_braces = snippet.chars().next().unwrap() == '{' || &snippet[..6] == \"unsafe\";\n+        let brace_compensation = if has_braces {\n+            BytePos(1)\n+        } else {\n+            BytePos(0)\n+        };\n+\n+        self.last_pos = self.last_pos + brace_compensation;\n         self.block_indent += self.config.tab_spaces;\n+        self.buffer.push_str(\"{\");\n \n         for stmt in &b.stmts {\n             self.visit_stmt(&stmt)\n@@ -86,7 +95,7 @@ impl<'a, 'v> visit::Visitor<'v> for FmtVisitor<'a> {\n \n         self.block_indent -= self.config.tab_spaces;\n         // TODO we should compress any newlines here to just one\n-        self.format_missing_with_indent(b.span.hi - BytePos(1));\n+        self.format_missing_with_indent(b.span.hi - brace_compensation);\n         self.buffer.push_str(\"}\");\n         self.last_pos = b.span.hi;\n     }"}, {"sha": "06b10758011854aad2fd35ccc250092d6a0b5418", "filename": "tests/source/closure.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8fd23ca6822477199542d6d1f153da0d41fa629/tests%2Fsource%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8fd23ca6822477199542d6d1f153da0d41fa629/tests%2Fsource%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fclosure.rs?ref=c8fd23ca6822477199542d6d1f153da0d41fa629", "patch": "@@ -30,6 +30,10 @@ fn main() {\n \n     let test = |  | { do_something(); do_something_else(); };\n \n+    let arg_test = |big_argument_name, test123| looooooooooooooooooong_function_naaaaaaaaaaaaaaaaame();\n+\n+    let arg_test = |big_argument_name, test123| {looooooooooooooooooong_function_naaaaaaaaaaaaaaaaame()};\n+\n     |arg1, arg2, _, _, arg3, arg4| { let temp = arg4 + arg3;\n                                      arg2 * arg1 - temp }\n }"}, {"sha": "5042f1d037aee8b00bef4c59ba6f1c25d06ccf61", "filename": "tests/target/closure.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c8fd23ca6822477199542d6d1f153da0d41fa629/tests%2Ftarget%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8fd23ca6822477199542d6d1f153da0d41fa629/tests%2Ftarget%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fclosure.rs?ref=c8fd23ca6822477199542d6d1f153da0d41fa629", "patch": "@@ -51,6 +51,14 @@ fn main() {\n                    do_something_else();\n                };\n \n+    let arg_test = |big_argument_name, test123| {\n+                       looooooooooooooooooong_function_naaaaaaaaaaaaaaaaame()\n+                   };\n+\n+    let arg_test = |big_argument_name, test123| {\n+                       looooooooooooooooooong_function_naaaaaaaaaaaaaaaaame()\n+                   };\n+\n     |arg1, arg2, _, _, arg3, arg4| {\n         let temp = arg4 + arg3;\n         arg2 * arg1 - temp"}]}