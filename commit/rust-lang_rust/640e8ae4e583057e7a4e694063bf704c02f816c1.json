{"sha": "640e8ae4e583057e7a4e694063bf704c02f816c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0MGU4YWU0ZTU4MzA1N2U3YTRlNjk0MDYzYmY3MDRjMDJmODE2YzE=", "commit": {"author": {"name": "Jed Davis", "email": "jld@panix.com", "date": "2013-04-06T23:47:01Z"}, "committer": {"name": "Jed Davis", "email": "jld@panix.com", "date": "2013-04-08T08:03:42Z"}, "message": "Export adt::trans_get_discr abstractly to the type visitor.", "tree": {"sha": "eac244fcde7d82225db7950856e506914e23e7b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eac244fcde7d82225db7950856e506914e23e7b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/640e8ae4e583057e7a4e694063bf704c02f816c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/640e8ae4e583057e7a4e694063bf704c02f816c1", "html_url": "https://github.com/rust-lang/rust/commit/640e8ae4e583057e7a4e694063bf704c02f816c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/640e8ae4e583057e7a4e694063bf704c02f816c1/comments", "author": {"login": "jld", "id": 254973, "node_id": "MDQ6VXNlcjI1NDk3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/254973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jld", "html_url": "https://github.com/jld", "followers_url": "https://api.github.com/users/jld/followers", "following_url": "https://api.github.com/users/jld/following{/other_user}", "gists_url": "https://api.github.com/users/jld/gists{/gist_id}", "starred_url": "https://api.github.com/users/jld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jld/subscriptions", "organizations_url": "https://api.github.com/users/jld/orgs", "repos_url": "https://api.github.com/users/jld/repos", "events_url": "https://api.github.com/users/jld/events{/privacy}", "received_events_url": "https://api.github.com/users/jld/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jld", "id": 254973, "node_id": "MDQ6VXNlcjI1NDk3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/254973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jld", "html_url": "https://github.com/jld", "followers_url": "https://api.github.com/users/jld/followers", "following_url": "https://api.github.com/users/jld/following{/other_user}", "gists_url": "https://api.github.com/users/jld/gists{/gist_id}", "starred_url": "https://api.github.com/users/jld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jld/subscriptions", "organizations_url": "https://api.github.com/users/jld/orgs", "repos_url": "https://api.github.com/users/jld/repos", "events_url": "https://api.github.com/users/jld/events{/privacy}", "received_events_url": "https://api.github.com/users/jld/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ca1885da133cb7e4a1f4d557cfde5d16ac68231", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ca1885da133cb7e4a1f4d557cfde5d16ac68231", "html_url": "https://github.com/rust-lang/rust/commit/0ca1885da133cb7e4a1f4d557cfde5d16ac68231"}], "stats": {"total": 172, "additions": 150, "deletions": 22}, "files": [{"sha": "9a0526b4351ba3ac314fa5cb3cf5cef2fcef888b", "filename": "src/libcore/reflect.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/640e8ae4e583057e7a4e694063bf704c02f816c1/src%2Flibcore%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/640e8ae4e583057e7a4e694063bf704c02f816c1/src%2Flibcore%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Freflect.rs?ref=640e8ae4e583057e7a4e694063bf704c02f816c1", "patch": "@@ -15,6 +15,7 @@ Runtime type reflection\n */\n \n use intrinsic::{TyDesc, TyVisitor};\n+#[cfg(not(stage0))] use intrinsic::Opaque;\n use libc::c_void;\n use sys;\n use vec;\n@@ -393,6 +394,7 @@ impl<V:TyVisitor + MovePtr> TyVisitor for MovePtrAdaptor<V> {\n         true\n     }\n \n+    #[cfg(stage0)]\n     fn visit_enter_enum(&self, n_variants: uint, sz: uint, align: uint)\n                      -> bool {\n         self.align(align);\n@@ -402,6 +404,18 @@ impl<V:TyVisitor + MovePtr> TyVisitor for MovePtrAdaptor<V> {\n         true\n     }\n \n+    #[cfg(not(stage0))]\n+    fn visit_enter_enum(&self, n_variants: uint,\n+                        get_disr: extern unsafe fn(ptr: *Opaque) -> int,\n+                        sz: uint, align: uint)\n+                     -> bool {\n+        self.align(align);\n+        if ! self.inner.visit_enter_enum(n_variants, get_disr, sz, align) {\n+            return false;\n+        }\n+        true\n+    }\n+\n     fn visit_enter_enum_variant(&self, variant: uint,\n                                 disr_val: int,\n                                 n_fields: uint,\n@@ -443,6 +457,7 @@ impl<V:TyVisitor + MovePtr> TyVisitor for MovePtrAdaptor<V> {\n         true\n     }\n \n+    #[cfg(stage0)]\n     fn visit_leave_enum(&self, n_variants: uint, sz: uint, align: uint)\n                      -> bool {\n         if ! self.inner.visit_leave_enum(n_variants, sz, align) {\n@@ -452,6 +467,17 @@ impl<V:TyVisitor + MovePtr> TyVisitor for MovePtrAdaptor<V> {\n         true\n     }\n \n+    #[cfg(not(stage0))]\n+    fn visit_leave_enum(&self, n_variants: uint,\n+                        get_disr: extern unsafe fn(ptr: *Opaque) -> int,\n+                        sz: uint, align: uint) -> bool {\n+        if ! self.inner.visit_leave_enum(n_variants, get_disr, sz, align) {\n+            return false;\n+        }\n+        self.bump(sz);\n+        true\n+    }\n+\n     fn visit_trait(&self) -> bool {\n         self.align_to::<@TyVisitor>();\n         if ! self.inner.visit_trait() { return false; }"}, {"sha": "30ae3c3b8331e9e149b225077a44df02f6bedd9a", "filename": "src/libcore/repr.rs", "status": "modified", "additions": 81, "deletions": 13, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/640e8ae4e583057e7a4e694063bf704c02f816c1/src%2Flibcore%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/640e8ae4e583057e7a4e694063bf704c02f816c1/src%2Flibcore%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frepr.rs?ref=640e8ae4e583057e7a4e694063bf704c02f816c1", "patch": "@@ -18,6 +18,7 @@ use cast::transmute;\n use char;\n use intrinsic;\n use intrinsic::{TyDesc, TyVisitor, visit_tydesc};\n+#[cfg(not(stage0))] use intrinsic::Opaque;\n use io::{Writer, WriterUtil};\n use libc::c_void;\n use managed;\n@@ -137,12 +138,20 @@ impl Repr for char {\n \n // New implementation using reflect::MovePtr\n \n+#[cfg(stage0)]\n enum VariantState {\n     Degenerate,\n     TagMatch,\n     TagMismatch,\n }\n \n+#[cfg(not(stage0))]\n+enum VariantState {\n+    SearchingFor(int),\n+    Matched,\n+    AlreadyFound\n+}\n+\n pub struct ReprVisitor {\n     mut ptr: *c_void,\n     mut ptr_stk: ~[*c_void],\n@@ -181,26 +190,18 @@ pub impl ReprVisitor {\n         true\n     }\n \n-    #[inline(always)]\n+    #[cfg(stage0)] #[inline(always)]\n     fn bump(&self, sz: uint) {\n       do self.move_ptr() |p| {\n             ((p as uint) + sz) as *c_void\n       };\n     }\n \n-    #[inline(always)]\n+    #[cfg(stage0)] #[inline(always)]\n     fn bump_past<T>(&self) {\n         self.bump(sys::size_of::<T>());\n     }\n \n-    #[cfg(stage0)] #[inline(always)]\n-    fn stage0_bump_past<T>(&self) {\n-        self.bump_past::<T>();\n-    }\n-    #[cfg(not(stage0))] #[inline(always)]\n-    fn stage0_bump_past<T>(&self) {\n-    }\n-\n     #[inline(always)]\n     fn visit_inner(&self, inner: *TyDesc) -> bool {\n         self.visit_ptr_inner(self.ptr, inner)\n@@ -466,6 +467,7 @@ impl TyVisitor for ReprVisitor {\n         true\n     }\n \n+    #[cfg(stage0)]\n     fn visit_enter_enum(&self, n_variants: uint,\n                         _sz: uint, _align: uint) -> bool {\n         if n_variants == 1 {\n@@ -476,6 +478,16 @@ impl TyVisitor for ReprVisitor {\n         true\n     }\n \n+    #[cfg(not(stage0))]\n+    fn visit_enter_enum(&self, n_variants: uint,\n+                        get_disr: extern unsafe fn(ptr: *Opaque) -> int,\n+                        _sz: uint, _align: uint) -> bool {\n+        let disr = unsafe { get_disr(transmute(self.ptr)) };\n+        self.var_stk.push(SearchingFor(disr));\n+        true\n+    }\n+\n+    #[cfg(stage0)]\n     fn visit_enter_enum_variant(&self, _variant: uint,\n                                 disr_val: int,\n                                 n_fields: uint,\n@@ -495,7 +507,36 @@ impl TyVisitor for ReprVisitor {\n                         self.var_stk.push(TagMismatch);\n                     }\n                 };\n-                self.stage0_bump_past::<int>();\n+                self.bump_past::<int>();\n+            }\n+        }\n+\n+        if write {\n+            self.writer.write_str(name);\n+            if n_fields > 0 {\n+                self.writer.write_char('(');\n+            }\n+        }\n+        true\n+    }\n+\n+    #[cfg(not(stage0))]\n+    fn visit_enter_enum_variant(&self, _variant: uint,\n+                                disr_val: int,\n+                                n_fields: uint,\n+                                name: &str) -> bool {\n+        let mut write = false;\n+        match self.var_stk.pop() {\n+            SearchingFor(sought) => {\n+                if disr_val == sought {\n+                    self.var_stk.push(Matched);\n+                    write = true;\n+                } else {\n+                    self.var_stk.push(SearchingFor(sought));\n+                }\n+            }\n+            Matched | AlreadyFound => {\n+                self.var_stk.push(AlreadyFound);\n             }\n         }\n \n@@ -527,19 +568,20 @@ impl TyVisitor for ReprVisitor {\n     #[cfg(not(stage0))]\n     fn visit_enum_variant_field(&self, i: uint, _offset: uint, inner: *TyDesc) -> bool {\n         match self.var_stk[vec::uniq_len(&const self.var_stk) - 1] {\n-            Degenerate | TagMatch => {\n+            Matched => {\n                 if i != 0 {\n                     self.writer.write_str(\", \");\n                 }\n                 if ! self.visit_inner(inner) {\n                     return false;\n                 }\n             }\n-            TagMismatch => ()\n+            _ => ()\n         }\n         true\n     }\n \n+    #[cfg(stage0)]\n     fn visit_leave_enum_variant(&self, _variant: uint,\n                                 _disr_val: int,\n                                 n_fields: uint,\n@@ -555,8 +597,34 @@ impl TyVisitor for ReprVisitor {\n         true\n     }\n \n+    #[cfg(not(stage0))]\n+    fn visit_leave_enum_variant(&self, _variant: uint,\n+                                _disr_val: int,\n+                                n_fields: uint,\n+                                _name: &str) -> bool {\n+        match self.var_stk[vec::uniq_len(&const self.var_stk) - 1] {\n+            Matched => {\n+                if n_fields > 0 {\n+                    self.writer.write_char(')');\n+                }\n+            }\n+            _ => ()\n+        }\n+        true\n+    }\n+\n+    #[cfg(stage0)]\n+    fn visit_leave_enum(&self, _n_variants: uint,\n+                        _sz: uint, _align: uint) -> bool {\n+        self.var_stk.pop();\n+        true\n+    }\n+\n+    #[cfg(not(stage0))]\n     fn visit_leave_enum(&self, _n_variants: uint,\n+                        _get_disr: extern unsafe fn(ptr: *Opaque) -> int,\n                         _sz: uint, _align: uint) -> bool {\n+        // NOTE should this assert that it's not still SearchingFor the right variant?\n         self.var_stk.pop();\n         true\n     }"}, {"sha": "ccb7e3ffd55fc6d96cb94fc680ba29a7d9a55272", "filename": "src/librustc/front/intrinsic.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/640e8ae4e583057e7a4e694063bf704c02f816c1/src%2Flibrustc%2Ffront%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/640e8ae4e583057e7a4e694063bf704c02f816c1/src%2Flibrustc%2Ffront%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fintrinsic.rs?ref=640e8ae4e583057e7a4e694063bf704c02f816c1", "patch": "@@ -28,6 +28,9 @@ pub mod intrinsic {\n         // Remaining fields not listed\n     }\n \n+    // FIXME: make this a 0-variant enum; trans/reflect.rs has to match it.\n+    pub type Opaque = ();\n+\n     pub trait TyVisitor {\n         fn visit_bot(&self) -> bool;\n         fn visit_nil(&self) -> bool;\n@@ -91,6 +94,7 @@ pub mod intrinsic {\n                            sz: uint, align: uint) -> bool;\n \n         fn visit_enter_enum(&self, n_variants: uint,\n+                            get_disr: extern unsafe fn(ptr: *Opaque) -> int,\n                             sz: uint, align: uint) -> bool;\n         fn visit_enter_enum_variant(&self, variant: uint,\n                                     disr_val: int,\n@@ -102,6 +106,7 @@ pub mod intrinsic {\n                                     n_fields: uint,\n                                     name: &str) -> bool;\n         fn visit_leave_enum(&self, n_variants: uint,\n+                            get_disr: extern unsafe fn(ptr: *Opaque) -> int,\n                             sz: uint, align: uint) -> bool;\n \n         fn visit_enter_fn(&self, purity: uint, proto: uint,"}, {"sha": "163fc7b84e7a40b05bd35b9d1810dce3b0d3f50e", "filename": "src/librustc/middle/trans/reflect.rs", "status": "modified", "additions": 27, "deletions": 4, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/640e8ae4e583057e7a4e694063bf704c02f816c1/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/640e8ae4e583057e7a4e694063bf704c02f816c1/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=640e8ae4e583057e7a4e694063bf704c02f816c1", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-use lib::llvm::{TypeRef, ValueRef};\n+use back::link::mangle_internal_name_by_path_and_seq;\n+use lib::llvm::{TypeRef, ValueRef, llvm};\n use middle::trans::adt;\n use middle::trans::base::*;\n use middle::trans::build::*;\n@@ -25,10 +25,13 @@ use middle::trans::type_of::*;\n use middle::ty;\n use util::ppaux::ty_to_str;\n \n+use core::libc::c_uint;\n use core::option::None;\n use core::vec;\n use syntax::ast::def_id;\n use syntax::ast;\n+use syntax::ast_map::path_name;\n+use syntax::parse::token::special_idents;\n \n pub struct Reflector {\n     visitor_val: ValueRef,\n@@ -270,8 +273,28 @@ pub impl Reflector {\n             let ccx = bcx.ccx();\n             let repr = adt::represent_type(bcx.ccx(), t);\n             let variants = ty::substd_enum_variants(ccx.tcx, did, substs);\n+            let llptrty = T_ptr(type_of(ccx, t));\n+\n+            // Build the get_disr function.  (XXX: break this out into a function)\n+            let sub_path = bcx.fcx.path + ~[path_name(special_idents::anon)];\n+            let get_disr_sym = mangle_internal_name_by_path_and_seq(ccx, sub_path, ~\"get_disr\");\n+            let get_disr_args = [ty::arg { mode: ast::expl(ast::by_copy),\n+                                           ty: ty::mk_nil_ptr(ccx.tcx) }];\n+            let get_disr_llfty = type_of_fn(ccx, get_disr_args, ty::mk_int(ccx.tcx));\n+            let get_disr_llfdecl = decl_internal_cdecl_fn(ccx.llmod, get_disr_sym, get_disr_llfty);\n+            let get_disr_arg = unsafe {\n+                llvm::LLVMGetParam(get_disr_llfdecl, first_real_arg as c_uint)\n+            };\n+            let get_disr_fcx = new_fn_ctxt(ccx, ~[], get_disr_llfdecl, None);\n+            let get_disr_bcx = top_scope_block(get_disr_fcx, None);\n+            let get_disr_arg = BitCast(get_disr_bcx, get_disr_arg, llptrty);\n+            let get_disr_ret = adt::trans_get_discr(get_disr_bcx, repr, get_disr_arg);\n+            Store(get_disr_bcx, get_disr_ret, get_disr_fcx.llretptr);\n+            cleanup_and_Br(get_disr_bcx, get_disr_bcx, get_disr_fcx.llreturn);\n+            finish_fn(get_disr_fcx, get_disr_bcx.llbb);\n \n-            let enum_args = ~[self.c_uint(vec::len(variants))]\n+            let enum_args = ~[self.c_uint(vec::len(variants)),\n+                              get_disr_llfdecl]\n                 + self.c_size_and_align(t);\n             do self.bracketed(~\"enum\", enum_args) |this| {\n                 for variants.eachi |i, v| {\n@@ -282,7 +305,7 @@ pub impl Reflector {\n                     do this.bracketed(~\"enum_variant\", variant_args) |this| {\n                         for v.args.eachi |j, a| {\n                             let bcx = this.bcx;\n-                            let null = C_null(T_ptr(type_of(ccx, t)));\n+                            let null = C_null(llptrty);\n                             let offset = p2i(ccx, adt::trans_field_ptr(bcx, repr, null,\n                                                                        v.disr_val, j));\n                             let field_args = ~[this.c_uint(j),"}, {"sha": "8f3a1dd90c24c708f72613ac6910d2adbdc5b941", "filename": "src/test/run-pass/reflect-visit-data.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/640e8ae4e583057e7a4e694063bf704c02f816c1/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/640e8ae4e583057e7a4e694063bf704c02f816c1/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs?ref=640e8ae4e583057e7a4e694063bf704c02f816c1", "patch": "@@ -13,7 +13,7 @@\n use core::bool;\n use core::libc::c_void;\n use core::vec::UnboxedVecRepr;\n-use intrinsic::{TyDesc, get_tydesc, visit_tydesc, TyVisitor};\n+use intrinsic::{TyDesc, get_tydesc, visit_tydesc, TyVisitor, Opaque};\n \n #[doc = \"High-level interfaces to `intrinsic::visit_ty` reflection system.\"]\n \n@@ -376,10 +376,12 @@ impl<V:TyVisitor + movable_ptr> TyVisitor for ptr_visit_adaptor<V> {\n         true\n     }\n \n-    fn visit_enter_enum(&self, n_variants: uint, sz: uint, align: uint)\n+    fn visit_enter_enum(&self, n_variants: uint,\n+                        get_disr: extern unsafe fn(ptr: *Opaque) -> int,\n+                        sz: uint, align: uint)\n                      -> bool {\n         self.align(align);\n-        if ! self.inner.visit_enter_enum(n_variants, sz, align) { return false; }\n+        if ! self.inner.visit_enter_enum(n_variants, get_disr, sz, align) { return false; }\n         true\n     }\n \n@@ -410,9 +412,11 @@ impl<V:TyVisitor + movable_ptr> TyVisitor for ptr_visit_adaptor<V> {\n         true\n     }\n \n-    fn visit_leave_enum(&self, n_variants: uint, sz: uint, align: uint)\n+    fn visit_leave_enum(&self, n_variants: uint,\n+                        get_disr: extern unsafe fn(ptr: *Opaque) -> int,\n+                        sz: uint, align: uint)\n                      -> bool {\n-        if ! self.inner.visit_leave_enum(n_variants, sz, align) { return false; }\n+        if ! self.inner.visit_leave_enum(n_variants, get_disr, sz, align) { return false; }\n         true\n     }\n \n@@ -586,6 +590,7 @@ impl TyVisitor for my_visitor {\n                        _sz: uint, _align: uint) -> bool { true }\n \n     fn visit_enter_enum(&self, _n_variants: uint,\n+                        _get_disr: extern unsafe fn(ptr: *Opaque) -> int,\n                         _sz: uint, _align: uint) -> bool {\n         // FIXME (#3732): this needs to rewind between enum variants, or something.\n         true\n@@ -602,6 +607,7 @@ impl TyVisitor for my_visitor {\n                                 _n_fields: uint,\n                                 _name: &str) -> bool { true }\n     fn visit_leave_enum(&self, _n_variants: uint,\n+                        _get_disr: extern unsafe fn(ptr: *Opaque) -> int,\n                         _sz: uint, _align: uint) -> bool { true }\n \n     fn visit_enter_fn(&self, _purity: uint, _proto: uint,"}]}