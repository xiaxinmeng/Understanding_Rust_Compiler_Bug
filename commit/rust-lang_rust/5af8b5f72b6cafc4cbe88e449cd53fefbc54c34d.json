{"sha": "5af8b5f72b6cafc4cbe88e449cd53fefbc54c34d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhZjhiNWY3MmI2Y2FmYzRjYmU4OGU0NDljZDUzZmVmYmM1NGMzNGQ=", "commit": {"author": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2015-06-02T11:31:40Z"}, "committer": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2015-06-02T11:31:40Z"}, "message": "Extend dead code lint to detect more unused enum variants", "tree": {"sha": "c945f43019eb4b36e240aacaaf948c8752462879", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c945f43019eb4b36e240aacaaf948c8752462879"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5af8b5f72b6cafc4cbe88e449cd53fefbc54c34d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5af8b5f72b6cafc4cbe88e449cd53fefbc54c34d", "html_url": "https://github.com/rust-lang/rust/commit/5af8b5f72b6cafc4cbe88e449cd53fefbc54c34d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5af8b5f72b6cafc4cbe88e449cd53fefbc54c34d/comments", "author": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f813f9779722d3670bbfbd0a352b64fe4ae9ddbb", "url": "https://api.github.com/repos/rust-lang/rust/commits/f813f9779722d3670bbfbd0a352b64fe4ae9ddbb", "html_url": "https://github.com/rust-lang/rust/commit/f813f9779722d3670bbfbd0a352b64fe4ae9ddbb"}], "stats": {"total": 80, "additions": 73, "deletions": 7}, "files": [{"sha": "32ead26e095b638dc2c69ecff56590d018e0b459", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/5af8b5f72b6cafc4cbe88e449cd53fefbc54c34d/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5af8b5f72b6cafc4cbe88e449cd53fefbc54c34d/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=5af8b5f72b6cafc4cbe88e449cd53fefbc54c34d", "patch": "@@ -47,6 +47,7 @@ struct MarkSymbolVisitor<'a, 'tcx: 'a> {\n     struct_has_extern_repr: bool,\n     ignore_non_const_paths: bool,\n     inherited_pub_visibility: bool,\n+    ignore_variant_stack: Vec<ast::NodeId>,\n }\n \n impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n@@ -59,6 +60,7 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n             struct_has_extern_repr: false,\n             ignore_non_const_paths: false,\n             inherited_pub_visibility: false,\n+            ignore_variant_stack: vec![],\n         }\n     }\n \n@@ -79,7 +81,9 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n                 def::DefPrimTy(_) => (),\n                 def::DefVariant(enum_id, variant_id, _) => {\n                     self.check_def_id(enum_id);\n-                    self.check_def_id(variant_id);\n+                    if !self.ignore_variant_stack.contains(&variant_id.node) {\n+                        self.check_def_id(variant_id);\n+                    }\n                 }\n                 _ => {\n                     self.check_def_id(def.def_id());\n@@ -271,6 +275,23 @@ impl<'a, 'tcx, 'v> Visitor<'v> for MarkSymbolVisitor<'a, 'tcx> {\n         visit::walk_expr(self, expr);\n     }\n \n+    fn visit_arm(&mut self, arm: &ast::Arm) {\n+        if arm.pats.len() == 1 {\n+            let pat = &*arm.pats[0];\n+            let variants = pat_util::necessary_variants(&self.tcx.def_map, pat);\n+\n+            // Inside the body, ignore constructions of variants\n+            // necessary for the pattern to match. Those construction sites\n+            // can't be reached unless the variant is constructed elsewhere.\n+            let len = self.ignore_variant_stack.len();\n+            self.ignore_variant_stack.push_all(&*variants);\n+            visit::walk_arm(self, arm);\n+            self.ignore_variant_stack.truncate(len);\n+        } else {\n+            visit::walk_arm(self, arm);\n+        }\n+    }\n+\n     fn visit_pat(&mut self, pat: &ast::Pat) {\n         let def_map = &self.tcx.def_map;\n         match pat.node {\n@@ -392,6 +413,11 @@ fn create_and_seed_worklist(tcx: &ty::ctxt,\n         worklist.push(*id);\n     }\n     for id in reachable_symbols {\n+        // Reachable variants can be dead, because we warn about\n+        // variants never constructed, not variants never used.\n+        if let Some(ast_map::NodeVariant(..)) = tcx.map.find(*id) {\n+            continue;\n+        }\n         worklist.push(*id);\n     }\n "}, {"sha": "a3253bf294fa1c833d15f4cd36f0a6a59675e1d0", "filename": "src/librustc/middle/pat_util.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5af8b5f72b6cafc4cbe88e449cd53fefbc54c34d/src%2Flibrustc%2Fmiddle%2Fpat_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5af8b5f72b6cafc4cbe88e449cd53fefbc54c34d/src%2Flibrustc%2Fmiddle%2Fpat_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fpat_util.rs?ref=5af8b5f72b6cafc4cbe88e449cd53fefbc54c34d", "patch": "@@ -189,3 +189,27 @@ pub fn def_to_path(tcx: &ty::ctxt, id: ast::DefId) -> ast::Path {\n         span: DUMMY_SP,\n     })\n }\n+\n+/// Return variants that are necessary to exist for the pattern to match.\n+pub fn necessary_variants(dm: &DefMap, pat: &ast::Pat) -> Vec<ast::NodeId> {\n+    let mut variants = vec![];\n+    walk_pat(pat, |p| {\n+        match p.node {\n+            ast::PatEnum(_, _) |\n+            ast::PatIdent(_, _, None) |\n+            ast::PatStruct(..) => {\n+                match dm.borrow().get(&p.id) {\n+                    Some(&PathResolution { base_def: DefVariant(_, id, _), .. }) => {\n+                        variants.push(id.node);\n+                    }\n+                    _ => ()\n+                }\n+            }\n+            _ => ()\n+        }\n+        true\n+    });\n+    variants.sort();\n+    variants.dedup();\n+    variants\n+}"}, {"sha": "8c49daccbb22a52b4759abc690af54c964cf0a70", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5af8b5f72b6cafc4cbe88e449cd53fefbc54c34d/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5af8b5f72b6cafc4cbe88e449cd53fefbc54c34d/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=5af8b5f72b6cafc4cbe88e449cd53fefbc54c34d", "patch": "@@ -99,7 +99,6 @@ enum CastError {\n     NeedViaInt,\n     NeedViaUsize,\n     NonScalar,\n-    RefToMutPtr\n }\n \n impl<'tcx> CastCheck<'tcx> {\n@@ -161,11 +160,6 @@ impl<'tcx> CastCheck<'tcx> {\n                             fcx.infcx().ty_to_string(self.cast_ty))\n                 }, self.expr_ty, None);\n             }\n-            CastError::RefToMutPtr => {\n-                span_err!(fcx.tcx().sess, self.span, E0188,\n-                          \"cannot cast an immutable reference to a \\\n-                           mutable pointer\");\n-            }\n         }\n     }\n "}, {"sha": "0116d63caf2306d0ed534800d28cb58f84ebb1d3", "filename": "src/test/compile-fail/lint-dead-code-variant.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5af8b5f72b6cafc4cbe88e449cd53fefbc54c34d/src%2Ftest%2Fcompile-fail%2Flint-dead-code-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5af8b5f72b6cafc4cbe88e449cd53fefbc54c34d/src%2Ftest%2Fcompile-fail%2Flint-dead-code-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-dead-code-variant.rs?ref=5af8b5f72b6cafc4cbe88e449cd53fefbc54c34d", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![deny(dead_code)]\n+\n+#[derive(Clone)]\n+enum Enum {\n+    Variant1, //~ ERROR: variant is never used\n+    Variant2,\n+}\n+\n+fn main() {\n+    let e = Enum::Variant2;\n+    e.clone();\n+}"}]}