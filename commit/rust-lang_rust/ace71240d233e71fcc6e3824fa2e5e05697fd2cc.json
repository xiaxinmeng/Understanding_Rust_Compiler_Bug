{"sha": "ace71240d233e71fcc6e3824fa2e5e05697fd2cc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjZTcxMjQwZDIzM2U3MWZjYzZlMzgyNGZhMmU1ZTA1Njk3ZmQyY2M=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2019-02-13T18:02:22Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2019-03-29T22:58:17Z"}, "message": "Add a new wasm32-unknown-wasi target\n\nThis commit adds a new wasm32-based target distributed through rustup,\nsupported in the standard library, and implemented in the compiler. The\n`wasm32-unknown-wasi` target is intended to be a WebAssembly target\nwhich matches the [WASI proposal recently announced.][LINK]. In summary\nthe WASI target is an effort to define a standard set of syscalls for\nWebAssembly modules, allowing WebAssembly modules to not only be\nportable across architectures but also be portable across environments\nimplementing this standard set of system calls.\n\nThe wasi target in libstd is still somewhat bare bones. This PR does not\nfill out the filesystem, networking, threads, etc. Instead it only\nprovides the most basic of integration with the wasi syscalls, enabling\nfeatures like:\n\n* `Instant::now` and `SystemTime::now` work\n* `env::args` is hooked up\n* `env::vars` will look up environment variables\n* `println!` will print to standard out\n* `process::{exit, abort}` should be hooked up appropriately\n\nNone of these APIs can work natively on the `wasm32-unknown-unknown`\ntarget, but with the assumption of the WASI set of syscalls we're able\nto provide implementations of these syscalls that engines can implement.\nCurrently the primary engine implementing wasi is [wasmtime], but more\nwill surely emerge!\n\nIn terms of future development of libstd, I think this is something\nwe'll probably want to discuss. The purpose of the WASI target is to\nprovide a standardized set of syscalls, but it's *also* to provide a\nstandard C sysroot for compiling C/C++ programs. This means it's\nintended that functions like `read` and `write` are implemented for this\ntarget with a relatively standard definition and implementation. It's\nunclear, therefore, how we want to expose file descriptors and how we'll\nwant to implement system primitives. For example should `std::fs::File`\nhave a libc-based file descriptor underneath it? The raw wasi file\ndescriptor? We'll see! Currently these details are all intentionally\nhidden and things we can change over time.\n\nA `WasiFd` sample struct was added to the standard library as part of\nthis commit, but it's not currently used. It shows how all the wasi\nsyscalls could be ergonomically bound in Rust, and they offer a possible\nimplementation of primitives like `std::fs::File` if we bind wasi file\ndescriptors exactly.\n\nApart from the standard library, there's also the matter of how this\ntarget is integrated with respect to its C standard library. The\nreference sysroot, for example, provides managment of standard unix file\ndescriptors and also standard APIs like `open` (as opposed to the\nrelative `openat` inspiration for the wasi ssycalls). Currently the\nstandard library relies on the C sysroot symbols for operations such as\nenvironment management, process exit, and `read`/`write` of stdio fds.\nWe want these operations in Rust to be interoperable with C if they're\nused in the same process. Put another way, if Rust and C are linked into\nthe same WebAssembly binary they should work together, but that requires\nthat the same C standard library is used.\n\nWe also, however, want the `wasm32-unknown-wasi` target to be\nusable-by-default with the Rust compiler without requiring a separate\ntoolchain to get downloaded and configured. With that in mind, there's\ntwo modes of operation for the `wasm32-unknown-wasi` target:\n\n1. By default the C standard library is statically provided inside of\n   `liblibc.rlib` distributed as part of the sysroot. This means that\n   you can `rustc foo.wasm --target wasm32-unknown-unknown` and you're\n   good to go, a fully workable wasi binary pops out. This is\n   incompatible with linking in C code, however, which may be compiled\n   against a different sysroot than the Rust code was previously\n   compiled against. In this mode the default of `rust-lld` is used to\n   link binaries.\n\n2. For linking with C code, the `-C target-feature=-crt-static` flag\n   needs to be passed. This takes inspiration from the musl target for\n   this flag, but the idea is that you're no longer using the provided\n   static C runtime, but rather one will be provided externally. This\n   flag is intended to also get coupled with an external `clang`\n   compiler configured with its own sysroot. Therefore you'll typically\n   use this flag with `-C linker=/path/to/clang-script-wrapper`. Using\n   this mode the Rust code will continue to reference standard C\n   symbols, but the definition will be pulled in by the linker configured.\n\nAlright so that's all the current state of this PR. I suspect we'll\ndefinitely want to discuss this before landing of course! This PR is\ncoupled with libc changes as well which I'll be posting shortly.\n\n[LINK]:\n[wasmtime]:", "tree": {"sha": "99eedf0b8a6f4c882a542ccfc474664012b78893", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/99eedf0b8a6f4c882a542ccfc474664012b78893"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ace71240d233e71fcc6e3824fa2e5e05697fd2cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ace71240d233e71fcc6e3824fa2e5e05697fd2cc", "html_url": "https://github.com/rust-lang/rust/commit/ace71240d233e71fcc6e3824fa2e5e05697fd2cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ace71240d233e71fcc6e3824fa2e5e05697fd2cc/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e782d790f1b63d82af39248bebe027f92d891bcc", "url": "https://api.github.com/repos/rust-lang/rust/commits/e782d790f1b63d82af39248bebe027f92d891bcc", "html_url": "https://github.com/rust-lang/rust/commit/e782d790f1b63d82af39248bebe027f92d891bcc"}], "stats": {"total": 2308, "additions": 2226, "deletions": 82}, "files": [{"sha": "b7af23e8ece5361099ef01efa654cde825b3b244", "filename": "Cargo.lock", "status": "modified", "additions": 77, "deletions": 77, "changes": 154, "blob_url": "https://github.com/rust-lang/rust/blob/ace71240d233e71fcc6e3824fa2e5e05697fd2cc/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/ace71240d233e71fcc6e3824fa2e5e05697fd2cc/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=ace71240d233e71fcc6e3824fa2e5e05697fd2cc", "patch": "@@ -17,7 +17,7 @@ dependencies = [\n name = \"alloc\"\n version = \"0.0.0\"\n dependencies = [\n- \"compiler_builtins 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n  \"rand 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rand_xorshift 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -83,7 +83,7 @@ name = \"atty\"\n version = \"0.2.11\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"libc 0.2.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.51 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"termion 1.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -95,7 +95,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"backtrace-sys 0.1.27 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"cfg-if 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.51 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-demangle 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -106,8 +106,8 @@ version = \"0.1.27\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cc 1.0.28 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"compiler_builtins 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.51 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-std-workspace-core 1.0.0\",\n ]\n \n@@ -162,7 +162,7 @@ dependencies = [\n  \"filetime 0.2.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"getopts 0.2.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.51 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"num_cpus 1.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"petgraph 0.4.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"pretty_assertions 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -259,7 +259,7 @@ dependencies = [\n  \"jobserver 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazycell 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.51 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libgit2-sys 0.7.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"miow 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -458,12 +458,12 @@ name = \"commoncrypto-sys\"\n version = \"0.2.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"libc 0.2.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.51 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"compiler_builtins\"\n-version = \"0.1.5\"\n+version = \"0.1.8\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cc 1.0.28 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -479,7 +479,7 @@ dependencies = [\n  \"filetime 0.2.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"getopts 0.2.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.51 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"miow 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -499,7 +499,7 @@ dependencies = [\n  \"diff 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"filetime 0.2.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"getopts 0.2.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.51 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"miow 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -530,7 +530,7 @@ version = \"0.6.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"core-foundation-sys 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.51 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -657,7 +657,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"curl-sys 0.4.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.51 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"openssl-probe 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"openssl-sys 0.9.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"schannel 0.1.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -671,7 +671,7 @@ version = \"0.4.15\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cc 1.0.28 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.51 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libnghttp2-sys 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libz-sys 1.0.25 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"openssl-sys 0.9.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -729,7 +729,7 @@ name = \"directories\"\n version = \"1.0.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"libc 0.2.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.51 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -738,7 +738,7 @@ name = \"dirs\"\n version = \"1.0.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"libc 0.2.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.51 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"redox_users 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -748,8 +748,8 @@ name = \"dlmalloc\"\n version = \"0.1.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"compiler_builtins 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.51 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-std-workspace-core 1.0.0\",\n ]\n \n@@ -866,7 +866,7 @@ version = \"0.2.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cfg-if 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.51 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"redox_syscall 0.1.43 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -881,7 +881,7 @@ version = \"1.0.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"crc32fast 1.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.51 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libz-sys 1.0.25 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"miniz-sys 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"miniz_oxide_c_api 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -914,7 +914,7 @@ name = \"fortanix-sgx-abi\"\n version = \"0.3.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"compiler_builtins 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-std-workspace-core 1.0.0\",\n ]\n \n@@ -923,7 +923,7 @@ name = \"fs2\"\n version = \"0.4.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"libc 0.2.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.51 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -996,7 +996,7 @@ version = \"0.8.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"bitflags 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.51 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libgit2-sys 0.7.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"openssl-probe 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1171,7 +1171,7 @@ name = \"iovec\"\n version = \"0.1.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"libc 0.2.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.51 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -1208,15 +1208,15 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cc 1.0.28 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"fs_extra 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.51 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"jobserver\"\n version = \"0.1.12\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"libc 0.2.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.51 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rand 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -1264,7 +1264,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"libc\"\n-version = \"0.2.50\"\n+version = \"0.2.51\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"rustc-std-workspace-core 1.0.0\",\n@@ -1277,7 +1277,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cc 1.0.28 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"curl-sys 0.4.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.51 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libssh2-sys 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libz-sys 1.0.25 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"openssl-sys 0.9.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1290,7 +1290,7 @@ version = \"0.1.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cc 1.0.28 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.51 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -1299,7 +1299,7 @@ version = \"0.2.11\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cc 1.0.28 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.51 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libz-sys 1.0.25 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"openssl-sys 0.9.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"pkg-config 0.3.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1321,7 +1321,7 @@ version = \"1.0.25\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cc 1.0.28 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.51 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"pkg-config 0.3.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"vcpkg 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -1387,7 +1387,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cc 1.0.28 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"filetime 0.2.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.51 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"pkg-config 0.3.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -1488,7 +1488,7 @@ version = \"2.1.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cfg-if 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.51 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"version_check 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -1497,7 +1497,7 @@ name = \"memmap\"\n version = \"0.6.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"libc 0.2.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.51 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -1520,7 +1520,7 @@ version = \"0.1.11\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cc 1.0.28 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.51 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -1538,7 +1538,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cc 1.0.28 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"crc 1.8.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.51 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"miniz_oxide 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -1552,7 +1552,7 @@ dependencies = [\n  \"iovec 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazycell 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.51 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"miow 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"net2 0.2.33 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1577,7 +1577,7 @@ version = \"0.6.7\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"iovec 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.51 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"mio 0.6.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -1624,7 +1624,7 @@ version = \"0.2.33\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cfg-if 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.51 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -1670,7 +1670,7 @@ name = \"num_cpus\"\n version = \"1.8.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"libc 0.2.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.51 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -1697,7 +1697,7 @@ dependencies = [\n  \"cfg-if 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"foreign-types 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.51 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"openssl-sys 0.9.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -1720,7 +1720,7 @@ version = \"0.9.40\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cc 1.0.28 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.51 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"openssl-src 111.1.0+1.1.1a (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"pkg-config 0.3.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"vcpkg 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1756,19 +1756,19 @@ dependencies = [\n name = \"panic_abort\"\n version = \"0.0.0\"\n dependencies = [\n- \"compiler_builtins 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n- \"libc 0.2.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.51 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"panic_unwind\"\n version = \"0.0.0\"\n dependencies = [\n  \"alloc 0.0.0\",\n- \"compiler_builtins 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n- \"libc 0.2.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.51 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unwind 0.0.0\",\n ]\n \n@@ -1786,7 +1786,7 @@ name = \"parking_lot_core\"\n version = \"0.4.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"libc 0.2.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.51 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rand 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc_version 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"smallvec 0.6.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1951,7 +1951,7 @@ name = \"profiler_builtins\"\n version = \"0.0.0\"\n dependencies = [\n  \"cc 1.0.28 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"compiler_builtins 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n ]\n \n@@ -2035,7 +2035,7 @@ version = \"0.4.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"fuchsia-zircon 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.51 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -2046,7 +2046,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cloudabi 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"fuchsia-zircon 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.51 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rand_core 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -2058,7 +2058,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cloudabi 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"fuchsia-zircon 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.51 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rand_chacha 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rand_core 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rand_hc 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -2140,7 +2140,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"crossbeam-deque 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.51 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"num_cpus 1.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rand 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -2484,7 +2484,7 @@ name = \"rustc-demangle\"\n version = \"0.1.10\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"compiler_builtins 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-std-workspace-core 1.0.0\",\n ]\n \n@@ -2523,7 +2523,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"crossbeam-deque 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.51 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"num_cpus 1.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -2584,7 +2584,7 @@ dependencies = [\n  \"alloc 0.0.0\",\n  \"build_helper 0.1.0\",\n  \"cmake 0.1.33 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"compiler_builtins 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n ]\n \n@@ -2620,7 +2620,7 @@ dependencies = [\n  \"bitflags 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"cc 1.0.28 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"jobserver 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.51 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"memmap 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"num_cpus 1.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -2811,7 +2811,7 @@ dependencies = [\n  \"alloc 0.0.0\",\n  \"build_helper 0.1.0\",\n  \"cmake 0.1.33 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"compiler_builtins 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n ]\n \n@@ -2873,7 +2873,7 @@ dependencies = [\n  \"alloc 0.0.0\",\n  \"build_helper 0.1.0\",\n  \"cmake 0.1.33 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"compiler_builtins 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n ]\n \n@@ -2994,7 +2994,7 @@ dependencies = [\n  \"alloc 0.0.0\",\n  \"build_helper 0.1.0\",\n  \"cmake 0.1.33 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"compiler_builtins 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n ]\n \n@@ -3217,7 +3217,7 @@ version = \"0.1.7\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"arc-swap 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.51 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -3244,7 +3244,7 @@ version = \"0.3.8\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cfg-if 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.51 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"redox_syscall 0.1.43 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -3261,11 +3261,11 @@ dependencies = [\n  \"alloc 0.0.0\",\n  \"backtrace-sys 0.1.27 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"cc 1.0.28 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"compiler_builtins 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n  \"dlmalloc 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"fortanix-sgx-abi 0.3.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.51 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"panic_abort 0.0.0\",\n  \"panic_unwind 0.0.0\",\n  \"profiler_builtins 0.0.0\",\n@@ -3416,7 +3416,7 @@ version = \"0.4.20\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"filetime 0.2.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.51 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"redox_syscall 0.1.43 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"xattr 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -3427,7 +3427,7 @@ version = \"3.0.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cfg-if 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.51 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rand 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"redox_syscall 0.1.43 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"remove_dir_all 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -3475,7 +3475,7 @@ name = \"termion\"\n version = \"1.5.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"libc 0.2.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.51 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"redox_syscall 0.1.43 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"redox_termios 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -3494,7 +3494,7 @@ version = \"0.5.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"getopts 0.2.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.51 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"term 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -3528,7 +3528,7 @@ name = \"time\"\n version = \"0.1.40\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"libc 0.2.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.51 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"redox_syscall 0.1.43 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -3609,7 +3609,7 @@ version = \"0.2.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"futures 0.1.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.51 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"mio 0.6.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"mio-named-pipes 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"tokio-io 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -3641,7 +3641,7 @@ version = \"0.2.7\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"futures 0.1.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.51 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"mio 0.6.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"mio-uds 0.6.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"signal-hook 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -3712,7 +3712,7 @@ dependencies = [\n  \"bytes 0.4.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"futures 0.1.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"iovec 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.51 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"mio 0.6.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"mio-uds 0.6.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -3826,9 +3826,9 @@ dependencies = [\n name = \"unwind\"\n version = \"0.0.0\"\n dependencies = [\n- \"compiler_builtins 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiler_builtins 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"core 0.0.0\",\n- \"libc 0.2.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.51 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -3895,7 +3895,7 @@ name = \"wait-timeout\"\n version = \"0.1.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"libc 0.2.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.51 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -3968,7 +3968,7 @@ name = \"xattr\"\n version = \"0.2.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"libc 0.2.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.51 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -4022,7 +4022,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum colored 1.6.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b0aa3473e85a3161b59845d6096b289bb577874cafeaf75ea1b1beaa6572c7fc\"\n \"checksum commoncrypto 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d056a8586ba25a1e4d61cb090900e495952c7886786fc55f909ab2f819b69007\"\n \"checksum commoncrypto-sys 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1fed34f46747aa73dfaa578069fd8279d2818ade2b55f38f22a9401c7f4083e2\"\n-\"checksum compiler_builtins 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6711d51cb46744dd8305293cc3fbc392aaff7a8f5095a7c4fae1e5113ef07c96\"\n+\"checksum compiler_builtins 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a28c3898d0c57b26fa6f92de141ba665fa5ac5179f795db06db408be84302395\"\n \"checksum compiletest_rs 0.3.19 (registry+https://github.com/rust-lang/crates.io-index)\" = \"56c799b1f7142badf3b047b4c1f2074cc96b6b784fb2432f2ed9c87da0a03749\"\n \"checksum constant_time_eq 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8ff012e225ce166d4422e0e78419d901719760f62ae2b7969ca6b564d1b54a9e\"\n \"checksum core-foundation 0.6.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4e2640d6d0bf22e82bed1b73c6aef8d5dd31e5abe6666c57e6d45e2649f4f887\"\n@@ -4104,7 +4104,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum lazy_static 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"76f033c7ad61445c5b347c7382dd1237847eb1bce590fe50365dcb33d546be73\"\n \"checksum lazy_static 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a374c89b9db55895453a74c1e38861d9deec0b01b405a82516e9d5de4820dea1\"\n \"checksum lazycell 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b294d6fa9ee409a054354afc4352b0b9ef7ca222c69b8812cbea9e7d2bf3783f\"\n-\"checksum libc 0.2.50 (registry+https://github.com/rust-lang/crates.io-index)\" = \"aab692d7759f5cd8c859e169db98ae5b52c924add2af5fbbca11d12fefb567c1\"\n+\"checksum libc 0.2.51 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bedcc7a809076656486ffe045abeeac163da1b558e963a31e29fbfbeba916917\"\n \"checksum libgit2-sys 0.7.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"48441cb35dc255da8ae72825689a95368bf510659ae1ad55dc4aa88cb1789bf1\"\n \"checksum libnghttp2-sys 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d75d7966bda4730b722d1eab8e668df445368a24394bae9fc1e8dc0ab3dbe4f4\"\n \"checksum libssh2-sys 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"126a1f4078368b163bfdee65fbab072af08a1b374a5551b21e87ade27b1fbf9d\""}, {"sha": "5e0a2fbf0d373ed7fbb4bf42bd69f51dfb2a844b", "filename": "config.toml.example", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ace71240d233e71fcc6e3824fa2e5e05697fd2cc/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/ace71240d233e71fcc6e3824fa2e5e05697fd2cc/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=ace71240d233e71fcc6e3824fa2e5e05697fd2cc", "patch": "@@ -477,6 +477,9 @@\n # linked binaries\n #musl-root = \"...\"\n \n+# The root location of the `wasm32-unknown-wasi` sysroot.\n+#wasi-root = \"...\"\n+\n # Used in testing for configuring where the QEMU images are located, you\n # probably don't want to use this.\n #qemu-rootfs = \"...\""}, {"sha": "7429492f914a3757cef98239bd49a99dc8b53707", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ace71240d233e71fcc6e3824fa2e5e05697fd2cc/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ace71240d233e71fcc6e3824fa2e5e05697fd2cc/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=ace71240d233e71fcc6e3824fa2e5e05697fd2cc", "patch": "@@ -122,8 +122,8 @@ fn main() {\n             cmd.arg(\"-Cprefer-dynamic\");\n         }\n \n-        // Help the libc crate compile by assisting it in finding the MUSL\n-        // native libraries.\n+        // Help the libc crate compile by assisting it in finding various\n+        // sysroot native libraries.\n         if let Some(s) = env::var_os(\"MUSL_ROOT\") {\n             if target.contains(\"musl\") {\n                 let mut root = OsString::from(\"native=\");\n@@ -132,6 +132,12 @@ fn main() {\n                 cmd.arg(\"-L\").arg(&root);\n             }\n         }\n+        if let Some(s) = env::var_os(\"WASI_ROOT\") {\n+            let mut root = OsString::from(\"native=\");\n+            root.push(&s);\n+            root.push(\"/lib/wasm32-wasi\");\n+            cmd.arg(\"-L\").arg(&root);\n+        }\n \n         // Override linker if necessary.\n         if let Ok(target_linker) = env::var(\"RUSTC_TARGET_LINKER\") {"}, {"sha": "237f5c0ea2f158ca99aac32ab274d4fdaaeeaa27", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ace71240d233e71fcc6e3824fa2e5e05697fd2cc/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ace71240d233e71fcc6e3824fa2e5e05697fd2cc/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=ace71240d233e71fcc6e3824fa2e5e05697fd2cc", "patch": "@@ -129,6 +129,13 @@ fn copy_third_party_objects(builder: &Builder<'_>, compiler: &Compiler, target:\n                 &libdir.join(obj),\n             );\n         }\n+    } else if target.ends_with(\"-wasi\") {\n+        for &obj in &[\"crt1.o\"] {\n+            builder.copy(\n+                &builder.wasi_root(target).unwrap().join(\"lib/wasm32-wasi\").join(obj),\n+                &libdir.join(obj),\n+            );\n+        }\n     }\n \n     // Copies libunwind.a compiled to be linked wit x86_64-fortanix-unknown-sgx.\n@@ -190,6 +197,12 @@ pub fn std_cargo(builder: &Builder<'_>,\n                 cargo.env(\"MUSL_ROOT\", p);\n             }\n         }\n+\n+        if target.ends_with(\"-wasi\") {\n+            if let Some(p) = builder.wasi_root(target) {\n+                cargo.env(\"WASI_ROOT\", p);\n+            }\n+        }\n     }\n }\n "}, {"sha": "cb71550c12d4d66dd5de9f4e9d375f9b8381f651", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ace71240d233e71fcc6e3824fa2e5e05697fd2cc/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ace71240d233e71fcc6e3824fa2e5e05697fd2cc/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=ace71240d233e71fcc6e3824fa2e5e05697fd2cc", "patch": "@@ -169,6 +169,7 @@ pub struct Target {\n     pub ndk: Option<PathBuf>,\n     pub crt_static: Option<bool>,\n     pub musl_root: Option<PathBuf>,\n+    pub wasi_root: Option<PathBuf>,\n     pub qemu_rootfs: Option<PathBuf>,\n     pub no_std: bool,\n }\n@@ -344,6 +345,7 @@ struct TomlTarget {\n     android_ndk: Option<String>,\n     crt_static: Option<bool>,\n     musl_root: Option<String>,\n+    wasi_root: Option<String>,\n     qemu_rootfs: Option<String>,\n }\n \n@@ -605,6 +607,7 @@ impl Config {\n                 target.linker = cfg.linker.clone().map(PathBuf::from);\n                 target.crt_static = cfg.crt_static.clone();\n                 target.musl_root = cfg.musl_root.clone().map(PathBuf::from);\n+                target.wasi_root = cfg.wasi_root.clone().map(PathBuf::from);\n                 target.qemu_rootfs = cfg.qemu_rootfs.clone().map(PathBuf::from);\n \n                 config.target_config.insert(INTERNER.intern_string(triple.clone()), target);"}, {"sha": "167455af1f2e64815ee0257223ef378e52449b4a", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ace71240d233e71fcc6e3824fa2e5e05697fd2cc/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ace71240d233e71fcc6e3824fa2e5e05697fd2cc/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=ace71240d233e71fcc6e3824fa2e5e05697fd2cc", "patch": "@@ -861,6 +861,13 @@ impl Build {\n             .map(|p| &**p)\n     }\n \n+    /// Returns the sysroot for the wasi target, if defined\n+    fn wasi_root(&self, target: Interned<String>) -> Option<&Path> {\n+        self.config.target_config.get(&target)\n+            .and_then(|t| t.wasi_root.as_ref())\n+            .map(|p| &**p)\n+    }\n+\n     /// Returns `true` if this is a no-std `target`, if defined\n     fn no_std(&self, target: Interned<String>) -> Option<bool> {\n         self.config.target_config.get(&target)"}, {"sha": "c0f3326524d5c82b4027268180e6960bdca32705", "filename": "src/ci/docker/dist-various-2/Dockerfile", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ace71240d233e71fcc6e3824fa2e5e05697fd2cc/src%2Fci%2Fdocker%2Fdist-various-2%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/ace71240d233e71fcc6e3824fa2e5e05697fd2cc/src%2Fci%2Fdocker%2Fdist-various-2%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-various-2%2FDockerfile?ref=ace71240d233e71fcc6e3824fa2e5e05697fd2cc", "patch": "@@ -34,6 +34,9 @@ COPY dist-various-2/build-x86_64-fortanix-unknown-sgx-toolchain.sh /tmp/\n # Any update to the commit id here, should cause the container image to be re-built from this point on.\n RUN /tmp/build-x86_64-fortanix-unknown-sgx-toolchain.sh \"53b586346f2c7870e20b170decdc30729d97c42b\"\n \n+COPY dist-various-2/build-wasi-toolchain.sh /tmp/\n+RUN /tmp/build-wasi-toolchain.sh\n+\n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n \n@@ -66,6 +69,7 @@ ENV TARGETS=x86_64-fuchsia\n ENV TARGETS=$TARGETS,aarch64-fuchsia\n ENV TARGETS=$TARGETS,sparcv9-sun-solaris\n ENV TARGETS=$TARGETS,wasm32-unknown-unknown\n+ENV TARGETS=$TARGETS,wasm32-unknown-wasi\n ENV TARGETS=$TARGETS,x86_64-sun-solaris\n ENV TARGETS=$TARGETS,x86_64-unknown-linux-gnux32\n ENV TARGETS=$TARGETS,x86_64-unknown-cloudabi\n@@ -74,5 +78,6 @@ ENV TARGETS=$TARGETS,nvptx64-nvidia-cuda\n \n ENV X86_FORTANIX_SGX_LIBS=\"/x86_64-fortanix-unknown-sgx/lib/\"\n \n-ENV RUST_CONFIGURE_ARGS --enable-extended --enable-lld --disable-docs\n+ENV RUST_CONFIGURE_ARGS --enable-extended --enable-lld --disable-docs \\\n+  --set target.wasm32-unknown-wasi.wasi-root=/wasm32-unknown-wasi\n ENV SCRIPT python2.7 ../x.py dist --target $TARGETS"}, {"sha": "a15fb8cae256654ac0a94468333578d2b7faf8f4", "filename": "src/ci/docker/dist-various-2/build-wasi-toolchain.sh", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ace71240d233e71fcc6e3824fa2e5e05697fd2cc/src%2Fci%2Fdocker%2Fdist-various-2%2Fbuild-wasi-toolchain.sh", "raw_url": "https://github.com/rust-lang/rust/raw/ace71240d233e71fcc6e3824fa2e5e05697fd2cc/src%2Fci%2Fdocker%2Fdist-various-2%2Fbuild-wasi-toolchain.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-various-2%2Fbuild-wasi-toolchain.sh?ref=ace71240d233e71fcc6e3824fa2e5e05697fd2cc", "patch": "@@ -0,0 +1,20 @@\n+#!/bin/sh\n+#\n+# ignore-tidy-linelength\n+\n+set -ex\n+\n+# Originally from https://releases.llvm.org/8.0.0/clang+llvm-8.0.0-x86_64-linux-gnu-ubuntu-14.04.tar.xz\n+curl https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rust-ci-mirror/clang%2Bllvm-8.0.0-x86_64-linux-gnu-ubuntu-14.04.tar.xz | \\\n+  tar xJf -\n+export PATH=`pwd`/clang+llvm-8.0.0-x86_64-linux-gnu-ubuntu-14.04/bin:$PATH\n+\n+git clone https://github.com/CraneStation/wasi-sysroot\n+\n+cd wasi-sysroot\n+git reset --hard 320054e84f8f2440def3b1c8700cedb8fd697bf8\n+make -j$(nproc) INSTALL_DIR=/wasm32-unknown-wasi install\n+\n+cd ..\n+rm -rf reference-sysroot-wasi\n+rm -rf clang+llvm*"}, {"sha": "d049bb91f290ab958abacaf3fff32d6174126f9f", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ace71240d233e71fcc6e3824fa2e5e05697fd2cc/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ace71240d233e71fcc6e3824fa2e5e05697fd2cc/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=ace71240d233e71fcc6e3824fa2e5e05697fd2cc", "patch": "@@ -444,6 +444,7 @@ supported_targets! {\n     (\"asmjs-unknown-emscripten\", asmjs_unknown_emscripten),\n     (\"wasm32-unknown-emscripten\", wasm32_unknown_emscripten),\n     (\"wasm32-unknown-unknown\", wasm32_unknown_unknown),\n+    (\"wasm32-unknown-wasi\", wasm32_unknown_wasi),\n     (\"wasm32-experimental-emscripten\", wasm32_experimental_emscripten),\n \n     (\"thumbv6m-none-eabi\", thumbv6m_none_eabi),"}, {"sha": "aeabe66329237ee6c8a8f1afef7c4f9523e35404", "filename": "src/librustc_target/spec/wasm32_unknown_wasi.rs", "status": "added", "additions": 113, "deletions": 0, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/ace71240d233e71fcc6e3824fa2e5e05697fd2cc/src%2Flibrustc_target%2Fspec%2Fwasm32_unknown_wasi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ace71240d233e71fcc6e3824fa2e5e05697fd2cc/src%2Flibrustc_target%2Fspec%2Fwasm32_unknown_wasi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fwasm32_unknown_wasi.rs?ref=ace71240d233e71fcc6e3824fa2e5e05697fd2cc", "patch": "@@ -0,0 +1,113 @@\n+//! The `wasm32-unknown-wasi` target is a new and still (as of March 2019)\n+//! experimental target. The definition in this file is likely to be tweaked\n+//! over time and shouldn't be relied on too much.\n+//!\n+//! The `wasi` target is a proposal to define a standardized set of syscalls\n+//! that WebAssembly files can interoperate with. This set of syscalls is\n+//! intended to empower WebAssembly binaries with native capabilities such as\n+//! filesystem access, network access, etc.\n+//!\n+//! You can see more about the proposal at https://wasi.dev\n+//!\n+//! The Rust target definition here is interesting in a few ways. We want to\n+//! serve two use cases here with this target:\n+//!\n+//! * First, we want Rust usage of the target to be as hassle-free as possible,\n+//!   ideally avoiding the need to configure and install a local\n+//!   wasm32-unknown-wasi toolchain.\n+//!\n+//! * Second, one of the primary use cases of LLVM's new wasm backend and the\n+//!   wasm support in LLD is that any compiled language can interoperate with\n+//!   any other. To that the `wasm32-unknown-wasi` target is the first with a\n+//!   viable C standard library and sysroot common definition, so we want Rust\n+//!   and C/C++ code to interoperate when compiled to `wasm32-unknown-unknown`.\n+//!\n+//! You'll note, however, that the two goals above are somewhat at odds with one\n+//! another. To attempt to solve both use cases in one go we define a target\n+//! that (ab)uses the `crt-static` target feature to indicate which one you're\n+//! in.\n+//!\n+//! ## No interop with C required\n+//!\n+//! By default the `crt-static` target feature is enabled, and when enabled\n+//! this means that the the bundled version of `libc.a` found in `liblibc.rlib`\n+//! is used. This isn't intended really for interoperation with a C because it\n+//! may be the case that Rust's bundled C library is incompatible with a\n+//! foreign-compiled C library. In this use case, though, we use `rust-lld` and\n+//! some copied crt startup object files to ensure that you can download the\n+//! wasi target for Rust and you're off to the races, no further configuration\n+//! necessary.\n+//!\n+//! All in all, by default, no external dependencies are required. You can\n+//! compile `wasm32-unknown-wasi` binaries straight out of the box. You can't,\n+//! however, reliably interoperate with C code in this mode (yet).\n+//!\n+//! ## Interop with C required\n+//!\n+//! For the second goal we repurpose the `target-feature` flag, meaning that\n+//! you'll need to do a few things to have C/Rust code interoperate.\n+//!\n+//! 1. All Rust code needs to be compiled with `-C target-feature=-crt-static`,\n+//!    indicating that the bundled C standard library in the Rust sysroot will\n+//!    not be used.\n+//!\n+//! 2. If you're using rustc to build a linked artifact then you'll need to\n+//!    specify `-C linker` to a `clang` binary that supports\n+//!    `wasm32-unknown-wasi` and is configured with the `wasm32-unknown-wasi`\n+//!    sysroot. This will cause Rust code to be linked against the libc.a that\n+//!    the specified `clang` provides.\n+//!\n+//! 3. If you're building a staticlib and integrating Rust code elsewhere, then\n+//!    compiling with `-C target-feature=-crt-static` is all you need to do.\n+//!\n+//! You can configure the linker via Cargo using the\n+//! `CARGO_TARGET_WASM32_UNKNOWN_WASI_LINKER` env var. Be sure to also set\n+//! `CC_wasm32-unknown-wasi` if any crates in the dependency graph are using\n+//! the `cc` crate.\n+//!\n+//! ## Remember, this is all in flux\n+//!\n+//! The wasi target is **very** new in its specification. It's likely going to\n+//! be a long effort to get it standardized and stable. We'll be following it as\n+//! best we can with this target. Don't start relying on too much here unless\n+//! you know what you're getting in to!\n+\n+use super::wasm32_base;\n+use super::{LinkerFlavor, LldFlavor, Target};\n+\n+pub fn target() -> Result<Target, String> {\n+    let mut options = wasm32_base::options();\n+\n+    options\n+        .pre_link_args\n+        .entry(LinkerFlavor::Gcc)\n+        .or_insert(Vec::new())\n+        .push(\"--target=wasm32-unknown-wasi\".to_string());\n+\n+    // When generating an executable be sure to put the startup object at the\n+    // front so the main function is correctly hooked up.\n+    options.pre_link_objects_exe_crt.push(\"crt1.o\".to_string());\n+\n+    // Right now this is a bit of a workaround but we're currently saying that\n+    // the target by default has a static crt which we're taking as a signal\n+    // for \"use the bundled crt\". If that's turned off then the system's crt\n+    // will be used, but this means that default usage of this target doesn't\n+    // need an external compiler but it's still interoperable with an external\n+    // compiler if configured correctly.\n+    options.crt_static_default = true;\n+    options.crt_static_respected = true;\n+\n+    Ok(Target {\n+        llvm_target: \"wasm32-unknown-wasi\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"32\".to_string(),\n+        target_c_int_width: \"32\".to_string(),\n+        target_os: \"unknown\".to_string(),\n+        target_env: \"wasi\".to_string(),\n+        target_vendor: \"unknown\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-i64:64-n32:64-S128\".to_string(),\n+        arch: \"wasm32\".to_string(),\n+        linker_flavor: LinkerFlavor::Lld(LldFlavor::Wasm),\n+        options,\n+    })\n+}"}, {"sha": "9ac03adfc277849ef00d6f32f483fd8472c569e6", "filename": "src/libstd/Cargo.toml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ace71240d233e71fcc6e3824fa2e5e05697fd2cc/src%2Flibstd%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ace71240d233e71fcc6e3824fa2e5e05697fd2cc/src%2Flibstd%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2FCargo.toml?ref=ace71240d233e71fcc6e3824fa2e5e05697fd2cc", "patch": "@@ -18,8 +18,8 @@ alloc = { path = \"../liballoc\" }\n panic_unwind = { path = \"../libpanic_unwind\", optional = true }\n panic_abort = { path = \"../libpanic_abort\" }\n core = { path = \"../libcore\" }\n-libc = { version = \"0.2.44\", default-features = false, features = ['rustc-dep-of-std'] }\n-compiler_builtins = { version = \"0.1.1\" }\n+libc = { version = \"0.2.51\", default-features = false, features = ['rustc-dep-of-std'] }\n+compiler_builtins = { version = \"0.1.8\" }\n profiler_builtins = { path = \"../libprofiler_builtins\", optional = true }\n unwind = { path = \"../libunwind\" }\n rustc-demangle = { version = \"0.1.10\", features = ['rustc-dep-of-std'] }"}, {"sha": "d48b5acffc0745f0ee20733aa756b495da5716ce", "filename": "src/libstd/os/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ace71240d233e71fcc6e3824fa2e5e05697fd2cc/src%2Flibstd%2Fos%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ace71240d233e71fcc6e3824fa2e5e05697fd2cc/src%2Flibstd%2Fos%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fmod.rs?ref=ace71240d233e71fcc6e3824fa2e5e05697fd2cc", "patch": "@@ -51,6 +51,7 @@ cfg_if! {\n #[cfg(target_os = \"emscripten\")] pub mod emscripten;\n #[cfg(target_os = \"fuchsia\")]    pub mod fuchsia;\n #[cfg(target_os = \"hermit\")]     pub mod hermit;\n+#[cfg(target_env = \"wasi\")]      pub mod wasi;\n #[cfg(all(target_vendor = \"fortanix\", target_env = \"sgx\"))] pub mod fortanix_sgx;\n \n pub mod raw;"}, {"sha": "d25b8d39ed6807aa65d1a0f160a4d72eca1548cd", "filename": "src/libstd/os/wasi.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ace71240d233e71fcc6e3824fa2e5e05697fd2cc/src%2Flibstd%2Fos%2Fwasi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ace71240d233e71fcc6e3824fa2e5e05697fd2cc/src%2Flibstd%2Fos%2Fwasi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fwasi.rs?ref=ace71240d233e71fcc6e3824fa2e5e05697fd2cc", "patch": "@@ -0,0 +1,6 @@\n+//! WASI-specific definitions\n+\n+#![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+pub use crate::sys::ext::*;"}, {"sha": "d7ce6a08e01c99fbaf4090a6b7f91cc15deb94aa", "filename": "src/libstd/sys/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ace71240d233e71fcc6e3824fa2e5e05697fd2cc/src%2Flibstd%2Fsys%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ace71240d233e71fcc6e3824fa2e5e05697fd2cc/src%2Flibstd%2Fsys%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fmod.rs?ref=ace71240d233e71fcc6e3824fa2e5e05697fd2cc", "patch": "@@ -35,6 +35,9 @@ cfg_if! {\n     } else if #[cfg(target_os = \"redox\")] {\n         mod redox;\n         pub use self::redox::*;\n+    } else if #[cfg(target_env = \"wasi\")] {\n+        mod wasi;\n+        pub use self::wasi::*;\n     } else if #[cfg(target_arch = \"wasm32\")] {\n         mod wasm;\n         pub use self::wasm::*;"}, {"sha": "c8529937bbde0b55ef25ea507cac89847ef8e847", "filename": "src/libstd/sys/wasi/alloc.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/ace71240d233e71fcc6e3824fa2e5e05697fd2cc/src%2Flibstd%2Fsys%2Fwasi%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ace71240d233e71fcc6e3824fa2e5e05697fd2cc/src%2Flibstd%2Fsys%2Fwasi%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Falloc.rs?ref=ace71240d233e71fcc6e3824fa2e5e05697fd2cc", "patch": "@@ -0,0 +1,43 @@\n+use crate::alloc::{GlobalAlloc, Layout, System};\n+use crate::ptr;\n+use crate::sys_common::alloc::{MIN_ALIGN, realloc_fallback};\n+use libc;\n+\n+#[stable(feature = \"alloc_system_type\", since = \"1.28.0\")]\n+unsafe impl GlobalAlloc for System {\n+    #[inline]\n+    unsafe fn alloc(&self, layout: Layout) -> *mut u8 {\n+        if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {\n+            libc::malloc(layout.size()) as *mut u8\n+        } else {\n+            libc::aligned_alloc(layout.size(), layout.align()) as *mut u8\n+        }\n+    }\n+\n+    #[inline]\n+    unsafe fn alloc_zeroed(&self, layout: Layout) -> *mut u8 {\n+        if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {\n+            libc::calloc(layout.size(), 1) as *mut u8\n+        } else {\n+            let ptr = self.alloc(layout.clone());\n+            if !ptr.is_null() {\n+                ptr::write_bytes(ptr, 0, layout.size());\n+            }\n+            ptr\n+        }\n+    }\n+\n+    #[inline]\n+    unsafe fn dealloc(&self, ptr: *mut u8, _layout: Layout) {\n+        libc::free(ptr as *mut libc::c_void)\n+    }\n+\n+    #[inline]\n+    unsafe fn realloc(&self, ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 {\n+        if layout.align() <= MIN_ALIGN && layout.align() <= new_size {\n+            libc::realloc(ptr as *mut libc::c_void, new_size) as *mut u8\n+        } else {\n+            realloc_fallback(self, ptr, layout, new_size)\n+        }\n+    }\n+}"}, {"sha": "20558a8042db4490cc5a8482b9e7454fb34aa936", "filename": "src/libstd/sys/wasi/args.rs", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/ace71240d233e71fcc6e3824fa2e5e05697fd2cc/src%2Flibstd%2Fsys%2Fwasi%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ace71240d233e71fcc6e3824fa2e5e05697fd2cc/src%2Flibstd%2Fsys%2Fwasi%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Fargs.rs?ref=ace71240d233e71fcc6e3824fa2e5e05697fd2cc", "patch": "@@ -0,0 +1,78 @@\n+use crate::any::Any;\n+use crate::ffi::CStr;\n+use crate::ffi::OsString;\n+use crate::marker::PhantomData;\n+use crate::os::wasi::ffi::OsStringExt;\n+use crate::ptr;\n+use crate::vec;\n+\n+static mut ARGC: isize = 0;\n+static mut ARGV: *const *const u8 = ptr::null();\n+\n+#[cfg(not(target_feature = \"atomics\"))]\n+pub unsafe fn args_lock() -> impl Any {\n+    // No need for a lock if we're single-threaded, but this function will need\n+    // to get implemented for multi-threaded scenarios\n+}\n+\n+pub unsafe fn init(argc: isize, argv: *const *const u8) {\n+    let _guard = args_lock();\n+    ARGC = argc;\n+    ARGV = argv;\n+}\n+\n+pub unsafe fn cleanup() {\n+    let _guard = args_lock();\n+    ARGC = 0;\n+    ARGV = ptr::null();\n+}\n+\n+pub struct Args {\n+    iter: vec::IntoIter<OsString>,\n+    _dont_send_or_sync_me: PhantomData<*mut ()>,\n+}\n+\n+/// Returns the command line arguments\n+pub fn args() -> Args {\n+    unsafe {\n+        let _guard = args_lock();\n+        let args = (0..ARGC)\n+            .map(|i| {\n+                let cstr = CStr::from_ptr(*ARGV.offset(i) as *const libc::c_char);\n+                OsStringExt::from_vec(cstr.to_bytes().to_vec())\n+            })\n+            .collect::<Vec<_>>();\n+        Args {\n+            iter: args.into_iter(),\n+            _dont_send_or_sync_me: PhantomData,\n+        }\n+    }\n+}\n+\n+impl Args {\n+    pub fn inner_debug(&self) -> &[OsString] {\n+        self.iter.as_slice()\n+    }\n+}\n+\n+impl Iterator for Args {\n+    type Item = OsString;\n+    fn next(&mut self) -> Option<OsString> {\n+        self.iter.next()\n+    }\n+    fn size_hint(&self) -> (usize, Option<usize>) {\n+        self.iter.size_hint()\n+    }\n+}\n+\n+impl ExactSizeIterator for Args {\n+    fn len(&self) -> usize {\n+        self.iter.len()\n+    }\n+}\n+\n+impl DoubleEndedIterator for Args {\n+    fn next_back(&mut self) -> Option<OsString> {\n+        self.iter.next_back()\n+    }\n+}"}, {"sha": "7d56b298997aa33631d953f2dbd2a24849d8f9bb", "filename": "src/libstd/sys/wasi/backtrace.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/ace71240d233e71fcc6e3824fa2e5e05697fd2cc/src%2Flibstd%2Fsys%2Fwasi%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ace71240d233e71fcc6e3824fa2e5e05697fd2cc/src%2Flibstd%2Fsys%2Fwasi%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Fbacktrace.rs?ref=ace71240d233e71fcc6e3824fa2e5e05697fd2cc", "patch": "@@ -0,0 +1,27 @@\n+use crate::io;\n+use crate::sys::unsupported;\n+use crate::sys_common::backtrace::Frame;\n+\n+pub struct BacktraceContext;\n+\n+pub fn unwind_backtrace(_frames: &mut [Frame])\n+    -> io::Result<(usize, BacktraceContext)>\n+{\n+    unsupported()\n+}\n+\n+pub fn resolve_symname<F>(_frame: Frame,\n+                          _callback: F,\n+                          _: &BacktraceContext) -> io::Result<()>\n+    where F: FnOnce(Option<&str>) -> io::Result<()>\n+{\n+    unsupported()\n+}\n+\n+pub fn foreach_symbol_fileline<F>(_: Frame,\n+                                  _: F,\n+                                  _: &BacktraceContext) -> io::Result<bool>\n+    where F: FnMut(&[u8], u32) -> io::Result<()>\n+{\n+    unsupported()\n+}"}, {"sha": "730e356d7fe95f209d4f6122f3fa992adea33242", "filename": "src/libstd/sys/wasi/env.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ace71240d233e71fcc6e3824fa2e5e05697fd2cc/src%2Flibstd%2Fsys%2Fwasi%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ace71240d233e71fcc6e3824fa2e5e05697fd2cc/src%2Flibstd%2Fsys%2Fwasi%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Fenv.rs?ref=ace71240d233e71fcc6e3824fa2e5e05697fd2cc", "patch": "@@ -0,0 +1,9 @@\n+pub mod os {\n+    pub const FAMILY: &str = \"\";\n+    pub const OS: &str = \"\";\n+    pub const DLL_PREFIX: &str = \"\";\n+    pub const DLL_SUFFIX: &str = \".wasm\";\n+    pub const DLL_EXTENSION: &str = \"wasm\";\n+    pub const EXE_SUFFIX: &str = \".wasm\";\n+    pub const EXE_EXTENSION: &str = \"wasm\";\n+}"}, {"sha": "07b93dd143f8f148939fdbc174b4a2ff05b0319e", "filename": "src/libstd/sys/wasi/ext/ffi.rs", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/ace71240d233e71fcc6e3824fa2e5e05697fd2cc/src%2Flibstd%2Fsys%2Fwasi%2Fext%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ace71240d233e71fcc6e3824fa2e5e05697fd2cc/src%2Flibstd%2Fsys%2Fwasi%2Fext%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Fext%2Fffi.rs?ref=ace71240d233e71fcc6e3824fa2e5e05697fd2cc", "patch": "@@ -0,0 +1,61 @@\n+//! WASI-specific extension to the primitives in the `std::ffi` module\n+\n+#![stable(feature = \"rust1\", since = \"1.0.0\")]\n+\n+use crate::ffi::{OsStr, OsString};\n+use crate::mem;\n+use crate::sys::os_str::Buf;\n+use crate::sys_common::{FromInner, IntoInner, AsInner};\n+\n+/// WASI-specific extensions to [`OsString`].\n+///\n+/// [`OsString`]: ../../../../std/ffi/struct.OsString.html\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+pub trait OsStringExt {\n+    /// Creates an `OsString` from a byte vector.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    fn from_vec(vec: Vec<u8>) -> Self;\n+\n+    /// Yields the underlying byte vector of this `OsString`.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    fn into_vec(self) -> Vec<u8>;\n+}\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl OsStringExt for OsString {\n+    fn from_vec(vec: Vec<u8>) -> OsString {\n+        FromInner::from_inner(Buf { inner: vec })\n+    }\n+    fn into_vec(self) -> Vec<u8> {\n+        self.into_inner().inner\n+    }\n+}\n+\n+/// WASI-specific extensions to [`OsStr`].\n+///\n+/// [`OsStr`]: ../../../../std/ffi/struct.OsStr.html\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+pub trait OsStrExt {\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    /// Creates an [`OsStr`] from a byte slice.\n+    ///\n+    /// [`OsStr`]: ../../../ffi/struct.OsStr.html\n+    fn from_bytes(slice: &[u8]) -> &Self;\n+\n+    /// Gets the underlying byte view of the [`OsStr`] slice.\n+    ///\n+    /// [`OsStr`]: ../../../ffi/struct.OsStr.html\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    fn as_bytes(&self) -> &[u8];\n+}\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl OsStrExt for OsStr {\n+    fn from_bytes(slice: &[u8]) -> &OsStr {\n+        unsafe { mem::transmute(slice) }\n+    }\n+    fn as_bytes(&self) -> &[u8] {\n+        &self.as_inner().inner\n+    }\n+}\n+"}, {"sha": "877b9ed89d81ed37fd256ee5c63d106884bbc118", "filename": "src/libstd/sys/wasi/ext/mod.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ace71240d233e71fcc6e3824fa2e5e05697fd2cc/src%2Flibstd%2Fsys%2Fwasi%2Fext%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ace71240d233e71fcc6e3824fa2e5e05697fd2cc/src%2Flibstd%2Fsys%2Fwasi%2Fext%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Fext%2Fmod.rs?ref=ace71240d233e71fcc6e3824fa2e5e05697fd2cc", "patch": "@@ -0,0 +1,10 @@\n+pub mod ffi;\n+\n+/// A prelude for conveniently writing platform-specific code.\n+///\n+/// Includes all extension traits, and some important type definitions.\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+pub mod prelude {\n+    #[doc(no_inline)] #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    pub use crate::sys::ext::ffi::{OsStringExt, OsStrExt};\n+}"}, {"sha": "1e05e7017594ab85233d9582100fbda15ce4d5a0", "filename": "src/libstd/sys/wasi/fd.rs", "status": "added", "additions": 322, "deletions": 0, "changes": 322, "blob_url": "https://github.com/rust-lang/rust/blob/ace71240d233e71fcc6e3824fa2e5e05697fd2cc/src%2Flibstd%2Fsys%2Fwasi%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ace71240d233e71fcc6e3824fa2e5e05697fd2cc/src%2Flibstd%2Fsys%2Fwasi%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Ffd.rs?ref=ace71240d233e71fcc6e3824fa2e5e05697fd2cc", "patch": "@@ -0,0 +1,322 @@\n+#![allow(dead_code)]\n+\n+use crate::io::{self, IoVec, IoVecMut, SeekFrom};\n+use crate::mem;\n+use crate::net::Shutdown;\n+use crate::sys::cvt_wasi;\n+use libc::{self, c_char, c_void};\n+\n+pub struct WasiFd {\n+    fd: libc::__wasi_fd_t,\n+}\n+\n+// FIXME: these should probably all be fancier structs, builders, enums, etc\n+pub type LookupFlags = u32;\n+pub type FdFlags = u16;\n+pub type Advice = u8;\n+pub type Rights = u64;\n+pub type Oflags = u16;\n+pub type DirCookie = u64;\n+pub type Timestamp = u64;\n+pub type FstFlags = u16;\n+pub type RiFlags = u16;\n+pub type RoFlags = u16;\n+pub type SiFlags = u16;\n+\n+fn iovec(a: &mut [IoVecMut]) -> (*const libc::__wasi_iovec_t, usize) {\n+    assert_eq!(\n+        mem::size_of::<IoVecMut>(),\n+        mem::size_of::<libc::__wasi_iovec_t>()\n+    );\n+    assert_eq!(\n+        mem::align_of::<IoVecMut>(),\n+        mem::align_of::<libc::__wasi_iovec_t>()\n+    );\n+    (a.as_ptr() as *const libc::__wasi_iovec_t, a.len())\n+}\n+\n+fn ciovec(a: &[IoVec]) -> (*const libc::__wasi_ciovec_t, usize) {\n+    assert_eq!(\n+        mem::size_of::<IoVec>(),\n+        mem::size_of::<libc::__wasi_ciovec_t>()\n+    );\n+    assert_eq!(\n+        mem::align_of::<IoVec>(),\n+        mem::align_of::<libc::__wasi_ciovec_t>()\n+    );\n+    (a.as_ptr() as *const libc::__wasi_ciovec_t, a.len())\n+}\n+\n+impl WasiFd {\n+    pub unsafe fn from_raw(fd: libc::__wasi_fd_t) -> WasiFd {\n+        WasiFd { fd }\n+    }\n+\n+    pub fn datasync(&self) -> io::Result<()> {\n+        cvt_wasi(unsafe { libc::__wasi_fd_datasync(self.fd) })\n+    }\n+\n+    pub fn pread(&self, bufs: &mut [IoVecMut], offset: u64) -> io::Result<usize> {\n+        let mut read = 0;\n+        let (ptr, len) = iovec(bufs);\n+        cvt_wasi(unsafe { libc::__wasi_fd_pread(self.fd, ptr, len, offset, &mut read) })?;\n+        Ok(read)\n+    }\n+\n+    pub fn pwrite(&self, bufs: &[IoVec], offset: u64) -> io::Result<usize> {\n+        let mut read = 0;\n+        let (ptr, len) = ciovec(bufs);\n+        cvt_wasi(unsafe { libc::__wasi_fd_pwrite(self.fd, ptr, len, offset, &mut read) })?;\n+        Ok(read)\n+    }\n+\n+    pub fn read(&self, bufs: &mut [IoVecMut]) -> io::Result<usize> {\n+        let mut read = 0;\n+        let (ptr, len) = iovec(bufs);\n+        cvt_wasi(unsafe { libc::__wasi_fd_read(self.fd, ptr, len, &mut read) })?;\n+        Ok(read)\n+    }\n+\n+    pub fn write(&self, bufs: &[IoVec]) -> io::Result<usize> {\n+        let mut read = 0;\n+        let (ptr, len) = ciovec(bufs);\n+        cvt_wasi(unsafe { libc::__wasi_fd_write(self.fd, ptr, len, &mut read) })?;\n+        Ok(read)\n+    }\n+\n+    pub fn seek(&self, pos: SeekFrom) -> io::Result<u64> {\n+        let (whence, offset) = match pos {\n+            SeekFrom::Start(pos) => (libc::__WASI_WHENCE_SET, pos as i64),\n+            SeekFrom::End(pos) => (libc::__WASI_WHENCE_END, pos),\n+            SeekFrom::Current(pos) => (libc::__WASI_WHENCE_CUR, pos),\n+        };\n+        let mut pos = 0;\n+        cvt_wasi(unsafe { libc::__wasi_fd_seek(self.fd, offset, whence, &mut pos) })?;\n+        Ok(pos)\n+    }\n+\n+    pub fn tell(&self) -> io::Result<u64> {\n+        let mut pos = 0;\n+        cvt_wasi(unsafe { libc::__wasi_fd_tell(self.fd, &mut pos) })?;\n+        Ok(pos)\n+    }\n+\n+    // FIXME: __wasi_fd_fdstat_get\n+\n+    pub fn set_flags(&self, flags: FdFlags) -> io::Result<()> {\n+        cvt_wasi(unsafe { libc::__wasi_fd_fdstat_set_flags(self.fd, flags) })\n+    }\n+\n+    pub fn set_rights(&self, base: Rights, inheriting: Rights) -> io::Result<()> {\n+        cvt_wasi(unsafe { libc::__wasi_fd_fdstat_set_rights(self.fd, base, inheriting) })\n+    }\n+\n+    pub fn sync(&self) -> io::Result<()> {\n+        cvt_wasi(unsafe { libc::__wasi_fd_sync(self.fd) })\n+    }\n+\n+    pub fn advise(&self, offset: u64, len: u64, advice: Advice) -> io::Result<()> {\n+        cvt_wasi(unsafe { libc::__wasi_fd_advise(self.fd, offset, len, advice as u8) })\n+    }\n+\n+    pub fn allocate(&self, offset: u64, len: u64) -> io::Result<()> {\n+        cvt_wasi(unsafe { libc::__wasi_fd_allocate(self.fd, offset, len) })\n+    }\n+\n+    pub fn crate_directory(&self, path: &[u8]) -> io::Result<()> {\n+        cvt_wasi(unsafe {\n+            libc::__wasi_path_create_directory(self.fd, path.as_ptr() as *const c_char, path.len())\n+        })\n+    }\n+\n+    pub fn link(\n+        &self,\n+        old_flags: LookupFlags,\n+        old_path: &[u8],\n+        new_fd: &WasiFd,\n+        new_path: &[u8],\n+    ) -> io::Result<()> {\n+        cvt_wasi(unsafe {\n+            libc::__wasi_path_link(\n+                self.fd,\n+                old_flags,\n+                old_path.as_ptr() as *const c_char,\n+                old_path.len(),\n+                new_fd.fd,\n+                new_path.as_ptr() as *const c_char,\n+                new_path.len(),\n+            )\n+        })\n+    }\n+\n+    pub fn open(\n+        &self,\n+        dirflags: LookupFlags,\n+        path: &[u8],\n+        oflags: Oflags,\n+        fs_rights_base: Rights,\n+        fs_rights_inheriting: Rights,\n+        fs_flags: FdFlags,\n+    ) -> io::Result<WasiFd> {\n+        unsafe {\n+            let mut fd = 0;\n+            cvt_wasi(libc::__wasi_path_open(\n+                self.fd,\n+                dirflags,\n+                path.as_ptr() as *const c_char,\n+                path.len(),\n+                oflags,\n+                fs_rights_base,\n+                fs_rights_inheriting,\n+                fs_flags,\n+                &mut fd,\n+            ))?;\n+            Ok(WasiFd::from_raw(fd))\n+        }\n+    }\n+\n+    pub fn readdir(&self, buf: &mut [u8], cookie: DirCookie) -> io::Result<usize> {\n+        let mut used = 0;\n+        cvt_wasi(unsafe {\n+            libc::__wasi_fd_readdir(\n+                self.fd,\n+                buf.as_mut_ptr() as *mut c_void,\n+                buf.len(),\n+                cookie,\n+                &mut used,\n+            )\n+        })?;\n+        Ok(used)\n+    }\n+\n+    pub fn readlink(&self, path: &[u8], buf: &mut [u8]) -> io::Result<usize> {\n+        let mut used = 0;\n+        cvt_wasi(unsafe {\n+            libc::__wasi_path_readlink(\n+                self.fd,\n+                path.as_ptr() as *const c_char,\n+                path.len(),\n+                buf.as_mut_ptr() as *mut c_char,\n+                buf.len(),\n+                &mut used,\n+            )\n+        })?;\n+        Ok(used)\n+    }\n+\n+    pub fn rename(&self, old_path: &[u8], new_fd: &WasiFd, new_path: &[u8]) -> io::Result<()> {\n+        cvt_wasi(unsafe {\n+            libc::__wasi_path_rename(\n+                self.fd,\n+                old_path.as_ptr() as *const c_char,\n+                old_path.len(),\n+                new_fd.fd,\n+                new_path.as_ptr() as *const c_char,\n+                new_path.len(),\n+            )\n+        })\n+    }\n+\n+    // FIXME: __wasi_fd_filestat_get\n+\n+    pub fn filestat_set_times(\n+        &self,\n+        atim: Timestamp,\n+        mtim: Timestamp,\n+        fstflags: FstFlags,\n+    ) -> io::Result<()> {\n+        cvt_wasi(unsafe { libc::__wasi_fd_filestat_set_times(self.fd, atim, mtim, fstflags) })\n+    }\n+\n+    pub fn filestat_set_size(&self, size: u64) -> io::Result<()> {\n+        cvt_wasi(unsafe { libc::__wasi_fd_filestat_set_size(self.fd, size) })\n+    }\n+\n+    // FIXME: __wasi_path_filestat_get\n+\n+    pub fn path_filestat_set_times(\n+        &self,\n+        flags: LookupFlags,\n+        path: &[u8],\n+        atim: Timestamp,\n+        mtim: Timestamp,\n+        fstflags: FstFlags,\n+    ) -> io::Result<()> {\n+        cvt_wasi(unsafe {\n+            libc::__wasi_path_filestat_set_times(\n+                self.fd,\n+                flags,\n+                path.as_ptr() as *const c_char,\n+                path.len(),\n+                atim,\n+                mtim,\n+                fstflags,\n+            )\n+        })\n+    }\n+\n+    pub fn symlink(&self, old_path: &[u8], new_path: &[u8]) -> io::Result<()> {\n+        cvt_wasi(unsafe {\n+            libc::__wasi_path_symlink(\n+                old_path.as_ptr() as *const c_char,\n+                old_path.len(),\n+                self.fd,\n+                new_path.as_ptr() as *const c_char,\n+                new_path.len(),\n+            )\n+        })\n+    }\n+\n+    pub fn unlink_file(&self, path: &[u8]) -> io::Result<()> {\n+        cvt_wasi(unsafe {\n+            libc::__wasi_path_unlink_file(self.fd, path.as_ptr() as *const c_char, path.len())\n+        })\n+    }\n+\n+    pub fn remove_directory(&self, path: &[u8]) -> io::Result<()> {\n+        cvt_wasi(unsafe {\n+            libc::__wasi_path_remove_directory(self.fd, path.as_ptr() as *const c_char, path.len())\n+        })\n+    }\n+\n+    pub fn sock_recv(\n+        &self,\n+        ri_data: &mut [IoVecMut],\n+        ri_flags: RiFlags,\n+    ) -> io::Result<(usize, RoFlags)> {\n+        let mut ro_datalen = 0;\n+        let mut ro_flags = 0;\n+        let (ptr, len) = iovec(ri_data);\n+        cvt_wasi(unsafe {\n+            libc::__wasi_sock_recv(self.fd, ptr, len, ri_flags, &mut ro_datalen, &mut ro_flags)\n+        })?;\n+        Ok((ro_datalen, ro_flags))\n+    }\n+\n+    pub fn sock_send(&self, si_data: &[IoVec], si_flags: SiFlags) -> io::Result<usize> {\n+        let mut so_datalen = 0;\n+        let (ptr, len) = ciovec(si_data);\n+        cvt_wasi(unsafe { libc::__wasi_sock_send(self.fd, ptr, len, si_flags, &mut so_datalen) })?;\n+        Ok(so_datalen)\n+    }\n+\n+    pub fn sock_shutdown(&self, how: Shutdown) -> io::Result<()> {\n+        let how = match how {\n+            Shutdown::Read => libc::__WASI_SHUT_RD,\n+            Shutdown::Write => libc::__WASI_SHUT_WR,\n+            Shutdown::Both => libc::__WASI_SHUT_WR | libc::__WASI_SHUT_RD,\n+        };\n+        cvt_wasi(unsafe { libc::__wasi_sock_shutdown(self.fd, how) })?;\n+        Ok(())\n+    }\n+}\n+\n+impl Drop for WasiFd {\n+    fn drop(&mut self) {\n+        unsafe {\n+            // FIXME: can we handle the return code here even though we can't on\n+            // unix?\n+            libc::__wasi_fd_close(self.fd);\n+        }\n+    }\n+}"}, {"sha": "485d2c87fbd2d2003f2bf7dea01f192ae4e1243c", "filename": "src/libstd/sys/wasi/fs.rs", "status": "added", "additions": 294, "deletions": 0, "changes": 294, "blob_url": "https://github.com/rust-lang/rust/blob/ace71240d233e71fcc6e3824fa2e5e05697fd2cc/src%2Flibstd%2Fsys%2Fwasi%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ace71240d233e71fcc6e3824fa2e5e05697fd2cc/src%2Flibstd%2Fsys%2Fwasi%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Ffs.rs?ref=ace71240d233e71fcc6e3824fa2e5e05697fd2cc", "patch": "@@ -0,0 +1,294 @@\n+use crate::ffi::OsString;\n+use crate::fmt;\n+use crate::hash::{Hash, Hasher};\n+use crate::io::{self, SeekFrom};\n+use crate::path::{Path, PathBuf};\n+use crate::sys::time::SystemTime;\n+use crate::sys::{unsupported, Void};\n+\n+pub struct File(Void);\n+\n+pub struct FileAttr(Void);\n+\n+pub struct ReadDir(Void);\n+\n+pub struct DirEntry(Void);\n+\n+#[derive(Clone, Debug)]\n+pub struct OpenOptions { }\n+\n+pub struct FilePermissions(Void);\n+\n+pub struct FileType(Void);\n+\n+#[derive(Debug)]\n+pub struct DirBuilder { }\n+\n+impl FileAttr {\n+    pub fn size(&self) -> u64 {\n+        match self.0 {}\n+    }\n+\n+    pub fn perm(&self) -> FilePermissions {\n+        match self.0 {}\n+    }\n+\n+    pub fn file_type(&self) -> FileType {\n+        match self.0 {}\n+    }\n+\n+    pub fn modified(&self) -> io::Result<SystemTime> {\n+        match self.0 {}\n+    }\n+\n+    pub fn accessed(&self) -> io::Result<SystemTime> {\n+        match self.0 {}\n+    }\n+\n+    pub fn created(&self) -> io::Result<SystemTime> {\n+        match self.0 {}\n+    }\n+}\n+\n+impl Clone for FileAttr {\n+    fn clone(&self) -> FileAttr {\n+        match self.0 {}\n+    }\n+}\n+\n+impl FilePermissions {\n+    pub fn readonly(&self) -> bool {\n+        match self.0 {}\n+    }\n+\n+    pub fn set_readonly(&mut self, _readonly: bool) {\n+        match self.0 {}\n+    }\n+}\n+\n+impl Clone for FilePermissions {\n+    fn clone(&self) -> FilePermissions {\n+        match self.0 {}\n+    }\n+}\n+\n+impl PartialEq for FilePermissions {\n+    fn eq(&self, _other: &FilePermissions) -> bool {\n+        match self.0 {}\n+    }\n+}\n+\n+impl Eq for FilePermissions {\n+}\n+\n+impl fmt::Debug for FilePermissions {\n+    fn fmt(&self, _f: &mut fmt::Formatter) -> fmt::Result {\n+        match self.0 {}\n+    }\n+}\n+\n+impl FileType {\n+    pub fn is_dir(&self) -> bool {\n+        match self.0 {}\n+    }\n+\n+    pub fn is_file(&self) -> bool {\n+        match self.0 {}\n+    }\n+\n+    pub fn is_symlink(&self) -> bool {\n+        match self.0 {}\n+    }\n+}\n+\n+impl Clone for FileType {\n+    fn clone(&self) -> FileType {\n+        match self.0 {}\n+    }\n+}\n+\n+impl Copy for FileType {}\n+\n+impl PartialEq for FileType {\n+    fn eq(&self, _other: &FileType) -> bool {\n+        match self.0 {}\n+    }\n+}\n+\n+impl Eq for FileType {\n+}\n+\n+impl Hash for FileType {\n+    fn hash<H: Hasher>(&self, _h: &mut H) {\n+        match self.0 {}\n+    }\n+}\n+\n+impl fmt::Debug for FileType {\n+    fn fmt(&self, _f: &mut fmt::Formatter) -> fmt::Result {\n+        match self.0 {}\n+    }\n+}\n+\n+impl fmt::Debug for ReadDir {\n+    fn fmt(&self, _f: &mut fmt::Formatter) -> fmt::Result {\n+        match self.0 {}\n+    }\n+}\n+\n+impl Iterator for ReadDir {\n+    type Item = io::Result<DirEntry>;\n+\n+    fn next(&mut self) -> Option<io::Result<DirEntry>> {\n+        match self.0 {}\n+    }\n+}\n+\n+impl DirEntry {\n+    pub fn path(&self) -> PathBuf {\n+        match self.0 {}\n+    }\n+\n+    pub fn file_name(&self) -> OsString {\n+        match self.0 {}\n+    }\n+\n+    pub fn metadata(&self) -> io::Result<FileAttr> {\n+        match self.0 {}\n+    }\n+\n+    pub fn file_type(&self) -> io::Result<FileType> {\n+        match self.0 {}\n+    }\n+}\n+\n+impl OpenOptions {\n+    pub fn new() -> OpenOptions {\n+        OpenOptions { }\n+    }\n+\n+    pub fn read(&mut self, _read: bool) { }\n+    pub fn write(&mut self, _write: bool) { }\n+    pub fn append(&mut self, _append: bool) { }\n+    pub fn truncate(&mut self, _truncate: bool) { }\n+    pub fn create(&mut self, _create: bool) { }\n+    pub fn create_new(&mut self, _create_new: bool) { }\n+}\n+\n+impl File {\n+    pub fn open(_path: &Path, _opts: &OpenOptions) -> io::Result<File> {\n+        unsupported()\n+    }\n+\n+    pub fn file_attr(&self) -> io::Result<FileAttr> {\n+        match self.0 {}\n+    }\n+\n+    pub fn fsync(&self) -> io::Result<()> {\n+        match self.0 {}\n+    }\n+\n+    pub fn datasync(&self) -> io::Result<()> {\n+        match self.0 {}\n+    }\n+\n+    pub fn truncate(&self, _size: u64) -> io::Result<()> {\n+        match self.0 {}\n+    }\n+\n+    pub fn read(&self, _buf: &mut [u8]) -> io::Result<usize> {\n+        match self.0 {}\n+    }\n+\n+    pub fn write(&self, _buf: &[u8]) -> io::Result<usize> {\n+        match self.0 {}\n+    }\n+\n+    pub fn flush(&self) -> io::Result<()> {\n+        match self.0 {}\n+    }\n+\n+    pub fn seek(&self, _pos: SeekFrom) -> io::Result<u64> {\n+        match self.0 {}\n+    }\n+\n+    pub fn duplicate(&self) -> io::Result<File> {\n+        match self.0 {}\n+    }\n+\n+    pub fn set_permissions(&self, _perm: FilePermissions) -> io::Result<()> {\n+        match self.0 {}\n+    }\n+\n+    pub fn diverge(&self) -> ! {\n+        match self.0 {}\n+    }\n+}\n+\n+impl DirBuilder {\n+    pub fn new() -> DirBuilder {\n+        DirBuilder { }\n+    }\n+\n+    pub fn mkdir(&self, _p: &Path) -> io::Result<()> {\n+        unsupported()\n+    }\n+}\n+\n+impl fmt::Debug for File {\n+    fn fmt(&self, _f: &mut fmt::Formatter) -> fmt::Result {\n+        match self.0 {}\n+    }\n+}\n+\n+pub fn readdir(_p: &Path) -> io::Result<ReadDir> {\n+    unsupported()\n+}\n+\n+pub fn unlink(_p: &Path) -> io::Result<()> {\n+    unsupported()\n+}\n+\n+pub fn rename(_old: &Path, _new: &Path) -> io::Result<()> {\n+    unsupported()\n+}\n+\n+pub fn set_perm(_p: &Path, perm: FilePermissions) -> io::Result<()> {\n+    match perm.0 {}\n+}\n+\n+pub fn rmdir(_p: &Path) -> io::Result<()> {\n+    unsupported()\n+}\n+\n+pub fn remove_dir_all(_path: &Path) -> io::Result<()> {\n+    unsupported()\n+}\n+\n+pub fn readlink(_p: &Path) -> io::Result<PathBuf> {\n+    unsupported()\n+}\n+\n+pub fn symlink(_src: &Path, _dst: &Path) -> io::Result<()> {\n+    unsupported()\n+}\n+\n+pub fn link(_src: &Path, _dst: &Path) -> io::Result<()> {\n+    unsupported()\n+}\n+\n+pub fn stat(_p: &Path) -> io::Result<FileAttr> {\n+    unsupported()\n+}\n+\n+pub fn lstat(_p: &Path) -> io::Result<FileAttr> {\n+    unsupported()\n+}\n+\n+pub fn canonicalize(_p: &Path) -> io::Result<PathBuf> {\n+    unsupported()\n+}\n+\n+pub fn copy(_from: &Path, _to: &Path) -> io::Result<u64> {\n+    unsupported()\n+}"}, {"sha": "5f0315d279e8ee2ea59e97c8f57d50b6f32b40b0", "filename": "src/libstd/sys/wasi/io.rs", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/ace71240d233e71fcc6e3824fa2e5e05697fd2cc/src%2Flibstd%2Fsys%2Fwasi%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ace71240d233e71fcc6e3824fa2e5e05697fd2cc/src%2Flibstd%2Fsys%2Fwasi%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Fio.rs?ref=ace71240d233e71fcc6e3824fa2e5e05697fd2cc", "patch": "@@ -0,0 +1,62 @@\n+use crate::marker::PhantomData;\n+use crate::slice;\n+\n+use libc::{__wasi_ciovec_t, __wasi_iovec_t, c_void};\n+\n+#[repr(transparent)]\n+pub struct IoVec<'a> {\n+    vec: __wasi_ciovec_t,\n+    _p: PhantomData<&'a [u8]>,\n+}\n+\n+impl<'a> IoVec<'a> {\n+    #[inline]\n+    pub fn new(buf: &'a [u8]) -> IoVec<'a> {\n+        IoVec {\n+            vec: __wasi_ciovec_t {\n+                buf: buf.as_ptr() as *const c_void,\n+                buf_len: buf.len(),\n+            },\n+            _p: PhantomData,\n+        }\n+    }\n+\n+    #[inline]\n+    pub fn as_slice(&self) -> &[u8] {\n+        unsafe {\n+            slice::from_raw_parts(self.vec.buf as *const u8, self.vec.buf_len)\n+        }\n+    }\n+}\n+\n+pub struct IoVecMut<'a> {\n+    vec: __wasi_iovec_t,\n+    _p: PhantomData<&'a mut [u8]>,\n+}\n+\n+impl<'a> IoVecMut<'a> {\n+    #[inline]\n+    pub fn new(buf: &'a mut [u8]) -> IoVecMut<'a> {\n+        IoVecMut {\n+            vec: __wasi_iovec_t {\n+                buf: buf.as_mut_ptr() as *mut c_void,\n+                buf_len: buf.len()\n+            },\n+            _p: PhantomData,\n+        }\n+    }\n+\n+    #[inline]\n+    pub fn as_slice(&self) -> &[u8] {\n+        unsafe {\n+            slice::from_raw_parts(self.vec.buf as *const u8, self.vec.buf_len)\n+        }\n+    }\n+\n+    #[inline]\n+    pub fn as_mut_slice(&mut self) -> &mut [u8] {\n+        unsafe {\n+            slice::from_raw_parts_mut(self.vec.buf as *mut u8, self.vec.buf_len)\n+        }\n+    }\n+}"}, {"sha": "a9bb0151d0556544d997a23451bd11a9edf56221", "filename": "src/libstd/sys/wasi/mod.rs", "status": "added", "additions": 128, "deletions": 0, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/ace71240d233e71fcc6e3824fa2e5e05697fd2cc/src%2Flibstd%2Fsys%2Fwasi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ace71240d233e71fcc6e3824fa2e5e05697fd2cc/src%2Flibstd%2Fsys%2Fwasi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Fmod.rs?ref=ace71240d233e71fcc6e3824fa2e5e05697fd2cc", "patch": "@@ -0,0 +1,128 @@\n+//! System bindings for the wasm/web platform\n+//!\n+//! This module contains the facade (aka platform-specific) implementations of\n+//! OS level functionality for wasm. Note that this wasm is *not* the emscripten\n+//! wasm, so we have no runtime here.\n+//!\n+//! This is all super highly experimental and not actually intended for\n+//! wide/production use yet, it's still all in the experimental category. This\n+//! will likely change over time.\n+//!\n+//! Currently all functions here are basically stubs that immediately return\n+//! errors. The hope is that with a portability lint we can turn actually just\n+//! remove all this and just omit parts of the standard library if we're\n+//! compiling for wasm. That way it's a compile time error for something that's\n+//! guaranteed to be a runtime error!\n+\n+use libc;\n+use crate::io::{Error, ErrorKind};\n+use crate::mem;\n+use crate::os::raw::c_char;\n+\n+pub mod alloc;\n+pub mod args;\n+#[cfg(feature = \"backtrace\")]\n+pub mod backtrace;\n+#[path = \"../wasm/cmath.rs\"]\n+pub mod cmath;\n+#[path = \"../wasm/condvar.rs\"]\n+pub mod condvar;\n+pub mod env;\n+pub mod fd;\n+pub mod fs;\n+#[path = \"../wasm/memchr.rs\"]\n+pub mod memchr;\n+#[path = \"../wasm/mutex.rs\"]\n+pub mod mutex;\n+pub mod net;\n+pub mod io;\n+pub mod os;\n+pub use crate::sys_common::os_str_bytes as os_str;\n+pub mod path;\n+pub mod pipe;\n+pub mod process;\n+#[path = \"../wasm/rwlock.rs\"]\n+pub mod rwlock;\n+#[path = \"../wasm/stack_overflow.rs\"]\n+pub mod stack_overflow;\n+pub mod stdio;\n+pub mod thread;\n+#[path = \"../wasm/thread_local.rs\"]\n+pub mod thread_local;\n+pub mod time;\n+pub mod ext;\n+\n+#[cfg(not(test))]\n+pub fn init() {\n+}\n+\n+pub fn unsupported<T>() -> crate::io::Result<T> {\n+    Err(unsupported_err())\n+}\n+\n+pub fn unsupported_err() -> Error {\n+    Error::new(ErrorKind::Other, \"operation not supported on wasm yet\")\n+}\n+\n+pub fn decode_error_kind(_code: i32) -> ErrorKind {\n+    ErrorKind::Other\n+}\n+\n+// This enum is used as the storage for a bunch of types which can't actually\n+// exist.\n+#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Debug, Hash)]\n+pub enum Void {}\n+\n+pub unsafe fn strlen(mut s: *const c_char) -> usize {\n+    let mut n = 0;\n+    while *s != 0 {\n+        n += 1;\n+        s = s.offset(1);\n+    }\n+    return n\n+}\n+\n+pub unsafe fn abort_internal() -> ! {\n+    libc::abort()\n+}\n+\n+pub fn hashmap_random_keys() -> (u64, u64) {\n+    let mut ret = (0u64, 0u64);\n+    unsafe {\n+        let base = &mut ret as *mut (u64, u64) as *mut libc::c_void;\n+        let len = mem::size_of_val(&ret);\n+        cvt_wasi(libc::__wasi_random_get(base, len)).unwrap();\n+    }\n+    return ret\n+}\n+\n+#[doc(hidden)]\n+pub trait IsMinusOne {\n+    fn is_minus_one(&self) -> bool;\n+}\n+\n+macro_rules! impl_is_minus_one {\n+    ($($t:ident)*) => ($(impl IsMinusOne for $t {\n+        fn is_minus_one(&self) -> bool {\n+            *self == -1\n+        }\n+    })*)\n+}\n+\n+impl_is_minus_one! { i8 i16 i32 i64 isize }\n+\n+pub fn cvt<T: IsMinusOne>(t: T) -> crate::io::Result<T> {\n+    if t.is_minus_one() {\n+        Err(Error::last_os_error())\n+    } else {\n+        Ok(t)\n+    }\n+}\n+\n+pub fn cvt_wasi(r: u16) -> crate::io::Result<()> {\n+    if r != libc::__WASI_ESUCCESS {\n+        Err(Error::from_raw_os_error(r as i32))\n+    } else {\n+        Ok(())\n+    }\n+}"}, {"sha": "af9a22f5b7a36836ae13ac129cc23064ac05f1f2", "filename": "src/libstd/sys/wasi/net.rs", "status": "added", "additions": 358, "deletions": 0, "changes": 358, "blob_url": "https://github.com/rust-lang/rust/blob/ace71240d233e71fcc6e3824fa2e5e05697fd2cc/src%2Flibstd%2Fsys%2Fwasi%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ace71240d233e71fcc6e3824fa2e5e05697fd2cc/src%2Flibstd%2Fsys%2Fwasi%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Fnet.rs?ref=ace71240d233e71fcc6e3824fa2e5e05697fd2cc", "patch": "@@ -0,0 +1,358 @@\n+use crate::fmt;\n+use crate::io::{self, IoVec, IoVecMut};\n+use crate::net::{SocketAddr, Shutdown, Ipv4Addr, Ipv6Addr};\n+use crate::time::Duration;\n+use crate::sys::{unsupported, Void};\n+use crate::convert::TryFrom;\n+\n+pub struct TcpStream(Void);\n+\n+impl TcpStream {\n+    pub fn connect(_: io::Result<&SocketAddr>) -> io::Result<TcpStream> {\n+        unsupported()\n+    }\n+\n+    pub fn connect_timeout(_: &SocketAddr, _: Duration) -> io::Result<TcpStream> {\n+        unsupported()\n+    }\n+\n+    pub fn set_read_timeout(&self, _: Option<Duration>) -> io::Result<()> {\n+        match self.0 {}\n+    }\n+\n+    pub fn set_write_timeout(&self, _: Option<Duration>) -> io::Result<()> {\n+        match self.0 {}\n+    }\n+\n+    pub fn read_timeout(&self) -> io::Result<Option<Duration>> {\n+        match self.0 {}\n+    }\n+\n+    pub fn write_timeout(&self) -> io::Result<Option<Duration>> {\n+        match self.0 {}\n+    }\n+\n+    pub fn peek(&self, _: &mut [u8]) -> io::Result<usize> {\n+        match self.0 {}\n+    }\n+\n+    pub fn read(&self, _: &mut [u8]) -> io::Result<usize> {\n+        match self.0 {}\n+    }\n+\n+    pub fn read_vectored(&self, _: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n+        match self.0 {}\n+    }\n+\n+    pub fn write(&self, _: &[u8]) -> io::Result<usize> {\n+        match self.0 {}\n+    }\n+\n+    pub fn write_vectored(&self, _: &[IoVec<'_>]) -> io::Result<usize> {\n+        match self.0 {}\n+    }\n+\n+    pub fn peer_addr(&self) -> io::Result<SocketAddr> {\n+        match self.0 {}\n+    }\n+\n+    pub fn socket_addr(&self) -> io::Result<SocketAddr> {\n+        match self.0 {}\n+    }\n+\n+    pub fn shutdown(&self, _: Shutdown) -> io::Result<()> {\n+        match self.0 {}\n+    }\n+\n+    pub fn duplicate(&self) -> io::Result<TcpStream> {\n+        match self.0 {}\n+    }\n+\n+    pub fn set_nodelay(&self, _: bool) -> io::Result<()> {\n+        match self.0 {}\n+    }\n+\n+    pub fn nodelay(&self) -> io::Result<bool> {\n+        match self.0 {}\n+    }\n+\n+    pub fn set_ttl(&self, _: u32) -> io::Result<()> {\n+        match self.0 {}\n+    }\n+\n+    pub fn ttl(&self) -> io::Result<u32> {\n+        match self.0 {}\n+    }\n+\n+    pub fn take_error(&self) -> io::Result<Option<io::Error>> {\n+        match self.0 {}\n+    }\n+\n+    pub fn set_nonblocking(&self, _: bool) -> io::Result<()> {\n+        match self.0 {}\n+    }\n+}\n+\n+impl fmt::Debug for TcpStream {\n+    fn fmt(&self, _f: &mut fmt::Formatter) -> fmt::Result {\n+        match self.0 {}\n+    }\n+}\n+\n+pub struct TcpListener(Void);\n+\n+impl TcpListener {\n+    pub fn bind(_: io::Result<&SocketAddr>) -> io::Result<TcpListener> {\n+        unsupported()\n+    }\n+\n+    pub fn socket_addr(&self) -> io::Result<SocketAddr> {\n+        match self.0 {}\n+    }\n+\n+    pub fn accept(&self) -> io::Result<(TcpStream, SocketAddr)> {\n+        match self.0 {}\n+    }\n+\n+    pub fn duplicate(&self) -> io::Result<TcpListener> {\n+        match self.0 {}\n+    }\n+\n+    pub fn set_ttl(&self, _: u32) -> io::Result<()> {\n+        match self.0 {}\n+    }\n+\n+    pub fn ttl(&self) -> io::Result<u32> {\n+        match self.0 {}\n+    }\n+\n+    pub fn set_only_v6(&self, _: bool) -> io::Result<()> {\n+        match self.0 {}\n+    }\n+\n+    pub fn only_v6(&self) -> io::Result<bool> {\n+        match self.0 {}\n+    }\n+\n+    pub fn take_error(&self) -> io::Result<Option<io::Error>> {\n+        match self.0 {}\n+    }\n+\n+    pub fn set_nonblocking(&self, _: bool) -> io::Result<()> {\n+        match self.0 {}\n+    }\n+}\n+\n+impl fmt::Debug for TcpListener {\n+    fn fmt(&self, _f: &mut fmt::Formatter) -> fmt::Result {\n+        match self.0 {}\n+    }\n+}\n+\n+pub struct UdpSocket(Void);\n+\n+impl UdpSocket {\n+    pub fn bind(_: io::Result<&SocketAddr>) -> io::Result<UdpSocket> {\n+        unsupported()\n+    }\n+\n+    pub fn peer_addr(&self) -> io::Result<SocketAddr> {\n+        match self.0 {}\n+    }\n+\n+    pub fn socket_addr(&self) -> io::Result<SocketAddr> {\n+        match self.0 {}\n+    }\n+\n+    pub fn recv_from(&self, _: &mut [u8]) -> io::Result<(usize, SocketAddr)> {\n+        match self.0 {}\n+    }\n+\n+    pub fn peek_from(&self, _: &mut [u8]) -> io::Result<(usize, SocketAddr)> {\n+        match self.0 {}\n+    }\n+\n+    pub fn send_to(&self, _: &[u8], _: &SocketAddr) -> io::Result<usize> {\n+        match self.0 {}\n+    }\n+\n+    pub fn duplicate(&self) -> io::Result<UdpSocket> {\n+        match self.0 {}\n+    }\n+\n+    pub fn set_read_timeout(&self, _: Option<Duration>) -> io::Result<()> {\n+        match self.0 {}\n+    }\n+\n+    pub fn set_write_timeout(&self, _: Option<Duration>) -> io::Result<()> {\n+        match self.0 {}\n+    }\n+\n+    pub fn read_timeout(&self) -> io::Result<Option<Duration>> {\n+        match self.0 {}\n+    }\n+\n+    pub fn write_timeout(&self) -> io::Result<Option<Duration>> {\n+        match self.0 {}\n+    }\n+\n+    pub fn set_broadcast(&self, _: bool) -> io::Result<()> {\n+        match self.0 {}\n+    }\n+\n+    pub fn broadcast(&self) -> io::Result<bool> {\n+        match self.0 {}\n+    }\n+\n+    pub fn set_multicast_loop_v4(&self, _: bool) -> io::Result<()> {\n+        match self.0 {}\n+    }\n+\n+    pub fn multicast_loop_v4(&self) -> io::Result<bool> {\n+        match self.0 {}\n+    }\n+\n+    pub fn set_multicast_ttl_v4(&self, _: u32) -> io::Result<()> {\n+        match self.0 {}\n+    }\n+\n+    pub fn multicast_ttl_v4(&self) -> io::Result<u32> {\n+        match self.0 {}\n+    }\n+\n+    pub fn set_multicast_loop_v6(&self, _: bool) -> io::Result<()> {\n+        match self.0 {}\n+    }\n+\n+    pub fn multicast_loop_v6(&self) -> io::Result<bool> {\n+        match self.0 {}\n+    }\n+\n+    pub fn join_multicast_v4(&self, _: &Ipv4Addr, _: &Ipv4Addr)\n+                         -> io::Result<()> {\n+        match self.0 {}\n+    }\n+\n+    pub fn join_multicast_v6(&self, _: &Ipv6Addr, _: u32)\n+                         -> io::Result<()> {\n+        match self.0 {}\n+    }\n+\n+    pub fn leave_multicast_v4(&self, _: &Ipv4Addr, _: &Ipv4Addr)\n+                          -> io::Result<()> {\n+        match self.0 {}\n+    }\n+\n+    pub fn leave_multicast_v6(&self, _: &Ipv6Addr, _: u32)\n+                          -> io::Result<()> {\n+        match self.0 {}\n+    }\n+\n+    pub fn set_ttl(&self, _: u32) -> io::Result<()> {\n+        match self.0 {}\n+    }\n+\n+    pub fn ttl(&self) -> io::Result<u32> {\n+        match self.0 {}\n+    }\n+\n+    pub fn take_error(&self) -> io::Result<Option<io::Error>> {\n+        match self.0 {}\n+    }\n+\n+    pub fn set_nonblocking(&self, _: bool) -> io::Result<()> {\n+        match self.0 {}\n+    }\n+\n+    pub fn recv(&self, _: &mut [u8]) -> io::Result<usize> {\n+        match self.0 {}\n+    }\n+\n+    pub fn peek(&self, _: &mut [u8]) -> io::Result<usize> {\n+        match self.0 {}\n+    }\n+\n+    pub fn send(&self, _: &[u8]) -> io::Result<usize> {\n+        match self.0 {}\n+    }\n+\n+    pub fn connect(&self, _: io::Result<&SocketAddr>) -> io::Result<()> {\n+        match self.0 {}\n+    }\n+}\n+\n+impl fmt::Debug for UdpSocket {\n+    fn fmt(&self, _f: &mut fmt::Formatter) -> fmt::Result {\n+        match self.0 {}\n+    }\n+}\n+\n+pub struct LookupHost(Void);\n+\n+impl LookupHost {\n+    pub fn port(&self) -> u16 {\n+        match self.0 {}\n+    }\n+}\n+\n+impl Iterator for LookupHost {\n+    type Item = SocketAddr;\n+    fn next(&mut self) -> Option<SocketAddr> {\n+        match self.0 {}\n+    }\n+}\n+\n+impl<'a> TryFrom<&'a str> for LookupHost {\n+    type Error = io::Error;\n+\n+    fn try_from(_v: &'a str) -> io::Result<LookupHost> {\n+        unsupported()\n+    }\n+}\n+\n+impl<'a> TryFrom<(&'a str, u16)> for LookupHost {\n+    type Error = io::Error;\n+\n+    fn try_from(_v: (&'a str, u16)) -> io::Result<LookupHost> {\n+        unsupported()\n+    }\n+}\n+\n+#[allow(nonstandard_style)]\n+pub mod netc {\n+    pub const AF_INET: u8 = 0;\n+    pub const AF_INET6: u8 = 1;\n+    pub type sa_family_t = u8;\n+\n+    #[derive(Copy, Clone)]\n+    pub struct in_addr {\n+        pub s_addr: u32,\n+    }\n+\n+    #[derive(Copy, Clone)]\n+    pub struct sockaddr_in {\n+        pub sin_family: sa_family_t,\n+        pub sin_port: u16,\n+        pub sin_addr: in_addr,\n+    }\n+\n+    #[derive(Copy, Clone)]\n+    pub struct in6_addr {\n+        pub s6_addr: [u8; 16],\n+    }\n+\n+    #[derive(Copy, Clone)]\n+    pub struct sockaddr_in6 {\n+        pub sin6_family: sa_family_t,\n+        pub sin6_port: u16,\n+        pub sin6_addr: in6_addr,\n+        pub sin6_flowinfo: u32,\n+        pub sin6_scope_id: u32,\n+    }\n+\n+    #[derive(Copy, Clone)]\n+    pub struct sockaddr {\n+    }\n+\n+    pub type socklen_t = usize;\n+}"}, {"sha": "de18e4ba9507580e8c3f7c0c446428a08536ad4e", "filename": "src/libstd/sys/wasi/os.rs", "status": "added", "additions": 171, "deletions": 0, "changes": 171, "blob_url": "https://github.com/rust-lang/rust/blob/ace71240d233e71fcc6e3824fa2e5e05697fd2cc/src%2Flibstd%2Fsys%2Fwasi%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ace71240d233e71fcc6e3824fa2e5e05697fd2cc/src%2Flibstd%2Fsys%2Fwasi%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Fos.rs?ref=ace71240d233e71fcc6e3824fa2e5e05697fd2cc", "patch": "@@ -0,0 +1,171 @@\n+use crate::any::Any;\n+use crate::error::Error as StdError;\n+use crate::ffi::{OsString, OsStr, CString, CStr};\n+use crate::fmt;\n+use crate::io;\n+use crate::marker::PhantomData;\n+use crate::os::wasi::prelude::*;\n+use crate::path::{self, PathBuf};\n+use crate::ptr;\n+use crate::str;\n+use crate::sys::memchr;\n+use crate::sys::{cvt, unsupported, Void};\n+use crate::vec;\n+\n+#[cfg(not(target_feature = \"atomics\"))]\n+pub unsafe fn env_lock() -> impl Any {\n+    // No need for a lock if we're single-threaded, but this function will need\n+    // to get implemented for multi-threaded scenarios\n+}\n+\n+pub fn errno() -> i32 {\n+    extern {\n+        #[thread_local]\n+        static errno: libc::c_int;\n+    }\n+\n+    unsafe { errno as i32 }\n+}\n+\n+pub fn error_string(_errno: i32) -> String {\n+    \"operation failed\".to_string()\n+}\n+\n+pub fn getcwd() -> io::Result<PathBuf> {\n+    unsupported()\n+}\n+\n+pub fn chdir(_: &path::Path) -> io::Result<()> {\n+    unsupported()\n+}\n+\n+pub struct SplitPaths<'a>(&'a Void);\n+\n+pub fn split_paths(_unparsed: &OsStr) -> SplitPaths {\n+    panic!(\"unsupported\")\n+}\n+\n+impl<'a> Iterator for SplitPaths<'a> {\n+    type Item = PathBuf;\n+    fn next(&mut self) -> Option<PathBuf> {\n+        match *self.0 {}\n+    }\n+}\n+\n+#[derive(Debug)]\n+pub struct JoinPathsError;\n+\n+pub fn join_paths<I, T>(_paths: I) -> Result<OsString, JoinPathsError>\n+    where I: Iterator<Item=T>, T: AsRef<OsStr>\n+{\n+    Err(JoinPathsError)\n+}\n+\n+impl fmt::Display for JoinPathsError {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        \"not supported on wasm yet\".fmt(f)\n+    }\n+}\n+\n+impl StdError for JoinPathsError {\n+    fn description(&self) -> &str {\n+        \"not supported on wasm yet\"\n+    }\n+}\n+\n+pub fn current_exe() -> io::Result<PathBuf> {\n+    unsupported()\n+}\n+\n+pub struct Env {\n+    iter: vec::IntoIter<(OsString, OsString)>,\n+    _dont_send_or_sync_me: PhantomData<*mut ()>,\n+}\n+\n+impl Iterator for Env {\n+    type Item = (OsString, OsString);\n+    fn next(&mut self) -> Option<(OsString, OsString)> { self.iter.next() }\n+    fn size_hint(&self) -> (usize, Option<usize>) { self.iter.size_hint() }\n+}\n+\n+\n+pub fn env() -> Env {\n+    unsafe {\n+        let _guard = env_lock();\n+        let mut environ = libc::environ;\n+        let mut result = Vec::new();\n+        while environ != ptr::null_mut() && *environ != ptr::null_mut() {\n+            if let Some(key_value) = parse(CStr::from_ptr(*environ).to_bytes()) {\n+                result.push(key_value);\n+            }\n+            environ = environ.offset(1);\n+        }\n+        return Env {\n+            iter: result.into_iter(),\n+            _dont_send_or_sync_me: PhantomData,\n+        }\n+    }\n+\n+    // See src/libstd/sys/unix/os.rs, same as that\n+    fn parse(input: &[u8]) -> Option<(OsString, OsString)> {\n+        if input.is_empty() {\n+            return None;\n+        }\n+        let pos = memchr::memchr(b'=', &input[1..]).map(|p| p + 1);\n+        pos.map(|p| (\n+            OsStringExt::from_vec(input[..p].to_vec()),\n+            OsStringExt::from_vec(input[p+1..].to_vec()),\n+        ))\n+    }\n+}\n+\n+pub fn getenv(k: &OsStr) -> io::Result<Option<OsString>> {\n+    let k = CString::new(k.as_bytes())?;\n+    unsafe {\n+        let _guard = env_lock();\n+        let s = libc::getenv(k.as_ptr()) as *const libc::c_char;\n+        let ret = if s.is_null() {\n+            None\n+        } else {\n+            Some(OsStringExt::from_vec(CStr::from_ptr(s).to_bytes().to_vec()))\n+        };\n+        Ok(ret)\n+    }\n+}\n+\n+pub fn setenv(k: &OsStr, v: &OsStr) -> io::Result<()> {\n+    let k = CString::new(k.as_bytes())?;\n+    let v = CString::new(v.as_bytes())?;\n+\n+    unsafe {\n+        let _guard = env_lock();\n+        cvt(libc::setenv(k.as_ptr(), v.as_ptr(), 1)).map(|_| ())\n+    }\n+}\n+\n+pub fn unsetenv(n: &OsStr) -> io::Result<()> {\n+    let nbuf = CString::new(n.as_bytes())?;\n+\n+    unsafe {\n+        let _guard = env_lock();\n+        cvt(libc::unsetenv(nbuf.as_ptr())).map(|_| ())\n+    }\n+}\n+\n+pub fn temp_dir() -> PathBuf {\n+    panic!(\"no filesystem on wasm\")\n+}\n+\n+pub fn home_dir() -> Option<PathBuf> {\n+    None\n+}\n+\n+pub fn exit(code: i32) -> ! {\n+    unsafe {\n+        libc::exit(code)\n+    }\n+}\n+\n+pub fn getpid() -> u32 {\n+    panic!(\"unsupported\");\n+}"}, {"sha": "5c062e7c97cd3d5072843a62b02c5b1fbe25eb25", "filename": "src/libstd/sys/wasi/path.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ace71240d233e71fcc6e3824fa2e5e05697fd2cc/src%2Flibstd%2Fsys%2Fwasi%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ace71240d233e71fcc6e3824fa2e5e05697fd2cc/src%2Flibstd%2Fsys%2Fwasi%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Fpath.rs?ref=ace71240d233e71fcc6e3824fa2e5e05697fd2cc", "patch": "@@ -0,0 +1,19 @@\n+use crate::path::Prefix;\n+use crate::ffi::OsStr;\n+\n+#[inline]\n+pub fn is_sep_byte(b: u8) -> bool {\n+    b == b'/'\n+}\n+\n+#[inline]\n+pub fn is_verbatim_sep(b: u8) -> bool {\n+    b == b'/'\n+}\n+\n+pub fn parse_prefix(_: &OsStr) -> Option<Prefix> {\n+    None\n+}\n+\n+pub const MAIN_SEP_STR: &str = \"/\";\n+pub const MAIN_SEP: char = '/';"}, {"sha": "2582b993b608eda93136a5558784899814987cae", "filename": "src/libstd/sys/wasi/pipe.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/ace71240d233e71fcc6e3824fa2e5e05697fd2cc/src%2Flibstd%2Fsys%2Fwasi%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ace71240d233e71fcc6e3824fa2e5e05697fd2cc/src%2Flibstd%2Fsys%2Fwasi%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Fpipe.rs?ref=ace71240d233e71fcc6e3824fa2e5e05697fd2cc", "patch": "@@ -0,0 +1,25 @@\n+use crate::io;\n+use crate::sys::Void;\n+\n+pub struct AnonPipe(Void);\n+\n+impl AnonPipe {\n+    pub fn read(&self, _buf: &mut [u8]) -> io::Result<usize> {\n+        match self.0 {}\n+    }\n+\n+    pub fn write(&self, _buf: &[u8]) -> io::Result<usize> {\n+        match self.0 {}\n+    }\n+\n+    pub fn diverge(&self) -> ! {\n+        match self.0 {}\n+    }\n+}\n+\n+pub fn read2(p1: AnonPipe,\n+             _v1: &mut Vec<u8>,\n+             _p2: AnonPipe,\n+             _v2: &mut Vec<u8>) -> io::Result<()> {\n+    match p1.0 {}\n+}"}, {"sha": "c49daaa16320e2b04385cf5e1212948e6b4f7edd", "filename": "src/libstd/sys/wasi/process.rs", "status": "added", "additions": 152, "deletions": 0, "changes": 152, "blob_url": "https://github.com/rust-lang/rust/blob/ace71240d233e71fcc6e3824fa2e5e05697fd2cc/src%2Flibstd%2Fsys%2Fwasi%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ace71240d233e71fcc6e3824fa2e5e05697fd2cc/src%2Flibstd%2Fsys%2Fwasi%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Fprocess.rs?ref=ace71240d233e71fcc6e3824fa2e5e05697fd2cc", "patch": "@@ -0,0 +1,152 @@\n+use crate::ffi::OsStr;\n+use crate::fmt;\n+use crate::io;\n+use crate::sys::fs::File;\n+use crate::sys::pipe::AnonPipe;\n+use crate::sys::{unsupported, Void};\n+use crate::sys_common::process::{CommandEnv, DefaultEnvKey};\n+\n+////////////////////////////////////////////////////////////////////////////////\n+// Command\n+////////////////////////////////////////////////////////////////////////////////\n+\n+pub struct Command {\n+    env: CommandEnv<DefaultEnvKey>\n+}\n+\n+// passed back to std::process with the pipes connected to the child, if any\n+// were requested\n+pub struct StdioPipes {\n+    pub stdin: Option<AnonPipe>,\n+    pub stdout: Option<AnonPipe>,\n+    pub stderr: Option<AnonPipe>,\n+}\n+\n+pub enum Stdio {\n+    Inherit,\n+    Null,\n+    MakePipe,\n+}\n+\n+impl Command {\n+    pub fn new(_program: &OsStr) -> Command {\n+        Command {\n+            env: Default::default()\n+        }\n+    }\n+\n+    pub fn arg(&mut self, _arg: &OsStr) {\n+    }\n+\n+    pub fn env_mut(&mut self) -> &mut CommandEnv<DefaultEnvKey> {\n+        &mut self.env\n+    }\n+\n+    pub fn cwd(&mut self, _dir: &OsStr) {\n+    }\n+\n+    pub fn stdin(&mut self, _stdin: Stdio) {\n+    }\n+\n+    pub fn stdout(&mut self, _stdout: Stdio) {\n+    }\n+\n+    pub fn stderr(&mut self, _stderr: Stdio) {\n+    }\n+\n+    pub fn spawn(&mut self, _default: Stdio, _needs_stdin: bool)\n+        -> io::Result<(Process, StdioPipes)> {\n+        unsupported()\n+    }\n+}\n+\n+impl From<AnonPipe> for Stdio {\n+    fn from(pipe: AnonPipe) -> Stdio {\n+        pipe.diverge()\n+    }\n+}\n+\n+impl From<File> for Stdio {\n+    fn from(file: File) -> Stdio {\n+        file.diverge()\n+    }\n+}\n+\n+impl fmt::Debug for Command {\n+    fn fmt(&self, _f: &mut fmt::Formatter) -> fmt::Result {\n+        Ok(())\n+    }\n+}\n+\n+pub struct ExitStatus(Void);\n+\n+impl ExitStatus {\n+    pub fn success(&self) -> bool {\n+        match self.0 {}\n+    }\n+\n+    pub fn code(&self) -> Option<i32> {\n+        match self.0 {}\n+    }\n+}\n+\n+impl Clone for ExitStatus {\n+    fn clone(&self) -> ExitStatus {\n+        match self.0 {}\n+    }\n+}\n+\n+impl Copy for ExitStatus {}\n+\n+impl PartialEq for ExitStatus {\n+    fn eq(&self, _other: &ExitStatus) -> bool {\n+        match self.0 {}\n+    }\n+}\n+\n+impl Eq for ExitStatus {\n+}\n+\n+impl fmt::Debug for ExitStatus {\n+    fn fmt(&self, _f: &mut fmt::Formatter) -> fmt::Result {\n+        match self.0 {}\n+    }\n+}\n+\n+impl fmt::Display for ExitStatus {\n+    fn fmt(&self, _f: &mut fmt::Formatter) -> fmt::Result {\n+        match self.0 {}\n+    }\n+}\n+\n+#[derive(PartialEq, Eq, Clone, Copy, Debug)]\n+pub struct ExitCode(bool);\n+\n+impl ExitCode {\n+    pub const SUCCESS: ExitCode = ExitCode(false);\n+    pub const FAILURE: ExitCode = ExitCode(true);\n+\n+    pub fn as_i32(&self) -> i32 {\n+        self.0 as i32\n+    }\n+}\n+\n+pub struct Process(Void);\n+\n+impl Process {\n+    pub fn id(&self) -> u32 {\n+        match self.0 {}\n+    }\n+\n+    pub fn kill(&mut self) -> io::Result<()> {\n+        match self.0 {}\n+    }\n+\n+    pub fn wait(&mut self) -> io::Result<ExitStatus> {\n+        match self.0 {}\n+    }\n+\n+    pub fn try_wait(&mut self) -> io::Result<Option<ExitStatus>> {\n+        match self.0 {}\n+    }\n+}"}, {"sha": "f6a4958897d9b72b24b147ebf717896dc7410a7b", "filename": "src/libstd/sys/wasi/stdio.rs", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/ace71240d233e71fcc6e3824fa2e5e05697fd2cc/src%2Flibstd%2Fsys%2Fwasi%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ace71240d233e71fcc6e3824fa2e5e05697fd2cc/src%2Flibstd%2Fsys%2Fwasi%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Fstdio.rs?ref=ace71240d233e71fcc6e3824fa2e5e05697fd2cc", "patch": "@@ -0,0 +1,74 @@\n+use crate::io;\n+use crate::libc;\n+use crate::sys::cvt;\n+\n+pub struct Stdin;\n+pub struct Stdout;\n+pub struct Stderr;\n+\n+impl Stdin {\n+    pub fn new() -> io::Result<Stdin> {\n+        Ok(Stdin)\n+    }\n+\n+    pub fn read(&self, data: &mut [u8]) -> io::Result<usize> {\n+        let amt = cvt(unsafe {\n+            libc::read(libc::STDIN_FILENO, data.as_mut_ptr() as *mut _, data.len())\n+        })?;\n+        Ok(amt as usize)\n+    }\n+}\n+\n+impl Stdout {\n+    pub fn new() -> io::Result<Stdout> {\n+        Ok(Stdout)\n+    }\n+\n+    pub fn write(&self, data: &[u8]) -> io::Result<usize> {\n+        let amt = cvt(unsafe {\n+            libc::write(libc::STDOUT_FILENO, data.as_ptr() as *const _, data.len())\n+        })?;\n+        Ok(amt as usize)\n+    }\n+\n+    pub fn flush(&self) -> io::Result<()> {\n+        Ok(())\n+    }\n+}\n+\n+impl Stderr {\n+    pub fn new() -> io::Result<Stderr> {\n+        Ok(Stderr)\n+    }\n+\n+    pub fn write(&self, data: &[u8]) -> io::Result<usize> {\n+        let amt = cvt(unsafe {\n+            libc::write(libc::STDERR_FILENO, data.as_ptr() as *const _, data.len())\n+        })?;\n+        Ok(amt as usize)\n+    }\n+\n+    pub fn flush(&self) -> io::Result<()> {\n+        Ok(())\n+    }\n+}\n+\n+impl io::Write for Stderr {\n+    fn write(&mut self, data: &[u8]) -> io::Result<usize> {\n+        (&*self).write(data)\n+    }\n+\n+    fn flush(&mut self) -> io::Result<()> {\n+        (&*self).flush()\n+    }\n+}\n+\n+pub const STDIN_BUF_SIZE: usize = crate::sys_common::io::DEFAULT_BUF_SIZE;\n+\n+pub fn is_ebadf(err: &io::Error) -> bool {\n+    err.raw_os_error() == Some(libc::__WASI_EBADF as i32)\n+}\n+\n+pub fn panic_output() -> Option<impl io::Write> {\n+    Stderr::new().ok()\n+}"}, {"sha": "9d3c6ac59d186c802074880b390201528810146e", "filename": "src/libstd/sys/wasi/thread.rs", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/ace71240d233e71fcc6e3824fa2e5e05697fd2cc/src%2Flibstd%2Fsys%2Fwasi%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ace71240d233e71fcc6e3824fa2e5e05697fd2cc/src%2Flibstd%2Fsys%2Fwasi%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Fthread.rs?ref=ace71240d233e71fcc6e3824fa2e5e05697fd2cc", "patch": "@@ -0,0 +1,57 @@\n+use crate::boxed::FnBox;\n+use crate::cmp;\n+use crate::ffi::CStr;\n+use crate::io;\n+use crate::sys::cvt;\n+use crate::sys::{unsupported, Void};\n+use crate::time::Duration;\n+use libc;\n+\n+pub struct Thread(Void);\n+\n+pub const DEFAULT_MIN_STACK_SIZE: usize = 4096;\n+\n+impl Thread {\n+    // unsafe: see thread::Builder::spawn_unchecked for safety requirements\n+    pub unsafe fn new(_stack: usize, _p: Box<dyn FnBox()>)\n+        -> io::Result<Thread>\n+    {\n+        unsupported()\n+    }\n+\n+    pub fn yield_now() {\n+        let ret = unsafe { libc::__wasi_sched_yield() };\n+        debug_assert_eq!(ret, 0);\n+    }\n+\n+    pub fn set_name(_name: &CStr) {\n+        // nope\n+    }\n+\n+    pub fn sleep(dur: Duration) {\n+        let mut secs = dur.as_secs();\n+        let mut nsecs = dur.subsec_nanos() as i32;\n+\n+        unsafe {\n+            while secs > 0 || nsecs > 0 {\n+                let mut ts = libc::timespec {\n+                    tv_sec: cmp::min(libc::time_t::max_value() as u64, secs) as libc::time_t,\n+                    tv_nsec: nsecs,\n+                };\n+                secs -= ts.tv_sec as u64;\n+                cvt(libc::nanosleep(&ts, &mut ts)).unwrap();\n+                nsecs = 0;\n+            }\n+        }\n+    }\n+\n+    pub fn join(self) {\n+        match self.0 {}\n+    }\n+}\n+\n+pub mod guard {\n+    pub type Guard = !;\n+    pub unsafe fn current() -> Option<Guard> { None }\n+    pub unsafe fn init() -> Option<Guard> { None }\n+}"}, {"sha": "e1b92e7c5a7052d7abbef07daac94484c988ecd4", "filename": "src/libstd/sys/wasi/time.rs", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/ace71240d233e71fcc6e3824fa2e5e05697fd2cc/src%2Flibstd%2Fsys%2Fwasi%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ace71240d233e71fcc6e3824fa2e5e05697fd2cc/src%2Flibstd%2Fsys%2Fwasi%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Ftime.rs?ref=ace71240d233e71fcc6e3824fa2e5e05697fd2cc", "patch": "@@ -0,0 +1,72 @@\n+use crate::time::Duration;\n+use crate::mem;\n+use crate::sys::cvt_wasi;\n+use libc;\n+\n+#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Debug, Hash)]\n+pub struct Instant(Duration);\n+\n+#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Debug, Hash)]\n+pub struct SystemTime(Duration);\n+\n+pub const UNIX_EPOCH: SystemTime = SystemTime(Duration::from_secs(0));\n+\n+fn current_time(clock: u32) -> Duration {\n+    unsafe {\n+        let mut ts = mem::zeroed();\n+        cvt_wasi(libc::__wasi_clock_time_get(\n+            clock,\n+            1, // precision... seems ignored though?\n+            &mut ts,\n+        )).unwrap();\n+        Duration::new(\n+            (ts / 1_000_000_000) as u64,\n+            (ts % 1_000_000_000) as u32,\n+        )\n+    }\n+}\n+\n+impl Instant {\n+    pub fn now() -> Instant {\n+        Instant(current_time(libc::__WASI_CLOCK_MONOTONIC))\n+    }\n+\n+    pub const fn zero() -> Instant {\n+        Instant(Duration::from_secs(0))\n+    }\n+\n+    pub fn actually_monotonic() -> bool {\n+        true\n+    }\n+\n+    pub fn checked_sub_instant(&self, other: &Instant) -> Option<Duration> {\n+        self.0.checked_sub(other.0)\n+    }\n+\n+    pub fn checked_add_duration(&self, other: &Duration) -> Option<Instant> {\n+        Some(Instant(self.0.checked_add(*other)?))\n+    }\n+\n+    pub fn checked_sub_duration(&self, other: &Duration) -> Option<Instant> {\n+        Some(Instant(self.0.checked_sub(*other)?))\n+    }\n+}\n+\n+impl SystemTime {\n+    pub fn now() -> SystemTime {\n+        SystemTime(current_time(libc::__WASI_CLOCK_REALTIME))\n+    }\n+\n+    pub fn sub_time(&self, other: &SystemTime)\n+                    -> Result<Duration, Duration> {\n+        self.0.checked_sub(other.0).ok_or_else(|| other.0 - self.0)\n+    }\n+\n+    pub fn checked_add_duration(&self, other: &Duration) -> Option<SystemTime> {\n+        Some(SystemTime(self.0.checked_add(*other)?))\n+    }\n+\n+    pub fn checked_sub_duration(&self, other: &Duration) -> Option<SystemTime> {\n+        Some(SystemTime(self.0.checked_sub(*other)?))\n+    }\n+}"}, {"sha": "e61714f583c7a4ce422a4b69fcba21052e50da8d", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ace71240d233e71fcc6e3824fa2e5e05697fd2cc/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ace71240d233e71fcc6e3824fa2e5e05697fd2cc/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=ace71240d233e71fcc6e3824fa2e5e05697fd2cc", "patch": "@@ -106,6 +106,7 @@ static TARGETS: &[&str] = &[\n     \"thumbv8m.main-none-eabi\",\n     \"wasm32-unknown-emscripten\",\n     \"wasm32-unknown-unknown\",\n+    \"wasm32-unknown-wasi\",\n     \"x86_64-apple-darwin\",\n     \"x86_64-apple-ios\",\n     \"x86_64-fortanix-unknown-sgx\","}]}