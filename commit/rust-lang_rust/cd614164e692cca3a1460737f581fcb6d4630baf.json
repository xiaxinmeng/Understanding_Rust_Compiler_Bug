{"sha": "cd614164e692cca3a1460737f581fcb6d4630baf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkNjE0MTY0ZTY5MmNjYTNhMTQ2MDczN2Y1ODFmY2I2ZDQ2MzBiYWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-01-02T02:31:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-01-02T02:31:12Z"}, "message": "auto merge of #20387 : nick29581/rust/arrays-2, r=alexcrichton\n\nCloses #19999", "tree": {"sha": "9543983dc912f84eb6c12a1db4531c17c280388e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9543983dc912f84eb6c12a1db4531c17c280388e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd614164e692cca3a1460737f581fcb6d4630baf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd614164e692cca3a1460737f581fcb6d4630baf", "html_url": "https://github.com/rust-lang/rust/commit/cd614164e692cca3a1460737f581fcb6d4630baf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd614164e692cca3a1460737f581fcb6d4630baf/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39d74026663597a8d4ad0ab04e6d117bf9fd6ad4", "url": "https://api.github.com/repos/rust-lang/rust/commits/39d74026663597a8d4ad0ab04e6d117bf9fd6ad4", "html_url": "https://github.com/rust-lang/rust/commit/39d74026663597a8d4ad0ab04e6d117bf9fd6ad4"}, {"sha": "2c92ddeda7e2a8e9b6d6b629818eacdb96787575", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c92ddeda7e2a8e9b6d6b629818eacdb96787575", "html_url": "https://github.com/rust-lang/rust/commit/2c92ddeda7e2a8e9b6d6b629818eacdb96787575"}], "stats": {"total": 801, "additions": 414, "deletions": 387}, "files": [{"sha": "f4ec787a7949109c7a2a95801cfdf49ce958baa3", "filename": "src/doc/guide.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Fdoc%2Fguide.md", "raw_url": "https://github.com/rust-lang/rust/raw/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Fdoc%2Fguide.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide.md?ref=cd614164e692cca3a1460737f581fcb6d4630baf", "patch": "@@ -1606,18 +1606,18 @@ things. The most basic is the **array**, a fixed-size list of elements of the\n same type. By default, arrays are immutable.\n \n ```{rust}\n-let a = [1i, 2i, 3i];     // a: [int, ..3]\n-let mut m = [1i, 2i, 3i]; // mut m: [int, ..3]\n+let a = [1i, 2i, 3i];     // a: [int; 3]\n+let mut m = [1i, 2i, 3i]; // mut m: [int; 3]\n ```\n \n There's a shorthand for initializing each element of an array to the same\n value. In this example, each element of `a` will be initialized to `0i`:\n \n ```{rust}\n-let a = [0i, ..20]; // a: [int, ..20]\n+let a = [0i; 20]; // a: [int; 20]\n ```\n \n-Arrays have type `[T,..N]`. We'll talk about this `T` notation later, when we\n+Arrays have type `[T; N]`. We'll talk about this `T` notation later, when we\n cover generics.\n \n You can get the number of elements in an array `a` with `a.len()`, and use"}, {"sha": "f3ad19bbd2a6c038cdb2b2ea3ff730a054035cb4", "filename": "src/doc/reference.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=cd614164e692cca3a1460737f581fcb6d4630baf", "patch": "@@ -1438,11 +1438,11 @@ the `static` lifetime, fixed-size arrays, tuples, enum variants, and structs.\n const BIT1: uint = 1 << 0;\n const BIT2: uint = 1 << 1;\n \n-const BITS: [uint, ..2] = [BIT1, BIT2];\n+const BITS: [uint; 2] = [BIT1, BIT2];\n const STRING: &'static str = \"bitstring\";\n \n struct BitsNStrings<'a> {\n-    mybits: [uint, ..2],\n+    mybits: [uint; 2],\n     mystring: &'a str\n }\n \n@@ -2923,7 +2923,7 @@ constant expression that can be evaluated at compile time, such as a\n ```\n [1i, 2, 3, 4];\n [\"a\", \"b\", \"c\", \"d\"];\n-[0i, ..128];             // array with 128 zeros\n+[0i; 128];             // array with 128 zeros\n [0u8, 0u8, 0u8, 0u8];\n ```\n \n@@ -3691,7 +3691,7 @@ An example of each kind:\n \n ```{rust}\n let vec: Vec<int>  = vec![1, 2, 3];\n-let arr: [int, ..3] = [1, 2, 3];\n+let arr: [int; 3] = [1, 2, 3];\n let s: &[int]      = vec.as_slice();\n ```\n "}, {"sha": "c4ebf436c972903c328aafdc841d78a88289481b", "filename": "src/libcollections/dlist.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibcollections%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibcollections%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fdlist.rs?ref=cd614164e692cca3a1460737f581fcb6d4630baf", "patch": "@@ -1322,7 +1322,7 @@ mod tests {\n \n     #[bench]\n     fn bench_collect_into(b: &mut test::Bencher) {\n-        let v = &[0i, ..64];\n+        let v = &[0i; 64];\n         b.iter(|| {\n             let _: DList<int> = v.iter().map(|x| *x).collect();\n         })\n@@ -1384,31 +1384,31 @@ mod tests {\n \n     #[bench]\n     fn bench_iter(b: &mut test::Bencher) {\n-        let v = &[0i, ..128];\n+        let v = &[0i; 128];\n         let m: DList<int> = v.iter().map(|&x|x).collect();\n         b.iter(|| {\n             assert!(m.iter().count() == 128);\n         })\n     }\n     #[bench]\n     fn bench_iter_mut(b: &mut test::Bencher) {\n-        let v = &[0i, ..128];\n+        let v = &[0i; 128];\n         let mut m: DList<int> = v.iter().map(|&x|x).collect();\n         b.iter(|| {\n             assert!(m.iter_mut().count() == 128);\n         })\n     }\n     #[bench]\n     fn bench_iter_rev(b: &mut test::Bencher) {\n-        let v = &[0i, ..128];\n+        let v = &[0i; 128];\n         let m: DList<int> = v.iter().map(|&x|x).collect();\n         b.iter(|| {\n             assert!(m.iter().rev().count() == 128);\n         })\n     }\n     #[bench]\n     fn bench_iter_mut_rev(b: &mut test::Bencher) {\n-        let v = &[0i, ..128];\n+        let v = &[0i; 128];\n         let mut m: DList<int> = v.iter().map(|&x|x).collect();\n         b.iter(|| {\n             assert!(m.iter_mut().rev().count() == 128);"}, {"sha": "61111d96bd064cf3a7f8e9b13d0cd2d9ec587ee1", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=cd614164e692cca3a1460737f581fcb6d4630baf", "patch": "@@ -382,7 +382,7 @@ pub trait SliceExt<T> for Sized? {\n     fn get_mut(&mut self, index: uint) -> Option<&mut T>;\n \n     /// Work with `self` as a mut slice.\n-    /// Primarily intended for getting a &mut [T] from a [T, ..N].\n+    /// Primarily intended for getting a &mut [T] from a [T; N].\n     #[stable]\n     fn as_mut_slice(&mut self) -> &mut [T];\n \n@@ -861,6 +861,7 @@ pub trait CloneSliceExt<T> for Sized? {\n     fn clone_from_slice(&mut self, &[T]) -> uint;\n }\n \n+\n #[unstable = \"trait is unstable\"]\n impl<T: Clone> CloneSliceExt<T> for [T] {\n     /// Returns a copy of `v`.\n@@ -1482,14 +1483,14 @@ mod tests {\n \n     #[test]\n     fn test_is_empty() {\n-        let xs: [int, ..0] = [];\n+        let xs: [int; 0] = [];\n         assert!(xs.is_empty());\n         assert!(![0i].is_empty());\n     }\n \n     #[test]\n     fn test_len_divzero() {\n-        type Z = [i8, ..0];\n+        type Z = [i8; 0];\n         let v0 : &[Z] = &[];\n         let v1 : &[Z] = &[[]];\n         let v2 : &[Z] = &[[], []];\n@@ -1856,7 +1857,7 @@ mod tests {\n     #[test]\n     fn test_permutations() {\n         {\n-            let v: [int, ..0] = [];\n+            let v: [int; 0] = [];\n             let mut it = v.permutations();\n             let (min_size, max_opt) = it.size_hint();\n             assert_eq!(min_size, 1);\n@@ -2059,7 +2060,7 @@ mod tests {\n         }\n \n         // shouldn't panic\n-        let mut v: [uint, .. 0] = [];\n+        let mut v: [uint; 0] = [];\n         v.sort();\n \n         let mut v = [0xDEADBEEFu];\n@@ -2071,7 +2072,7 @@ mod tests {\n     fn test_sort_stability() {\n         for len in range(4i, 25) {\n             for _ in range(0u, 10) {\n-                let mut counts = [0i, .. 10];\n+                let mut counts = [0i; 10];\n \n                 // create a vector like [(6, 1), (5, 1), (6, 2), ...],\n                 // where the first item of each tuple is random, but\n@@ -2116,28 +2117,28 @@ mod tests {\n \n     #[test]\n     fn test_concat() {\n-        let v: [Vec<int>, ..0] = [];\n+        let v: [Vec<int>; 0] = [];\n         let c: Vec<int> = v.concat();\n         assert_eq!(c, []);\n         let d: Vec<int> = [vec![1i], vec![2i,3i]].concat();\n         assert_eq!(d, vec![1i, 2, 3]);\n \n-        let v: [&[int], ..2] = [&[1], &[2, 3]];\n+        let v: [&[int]; 2] = [&[1], &[2, 3]];\n         assert_eq!(v.connect(&0), vec![1i, 0, 2, 3]);\n-        let v: [&[int], ..3] = [&[1i], &[2], &[3]];\n+        let v: [&[int]; 3] = [&[1i], &[2], &[3]];\n         assert_eq!(v.connect(&0), vec![1i, 0, 2, 0, 3]);\n     }\n \n     #[test]\n     fn test_connect() {\n-        let v: [Vec<int>, ..0] = [];\n+        let v: [Vec<int>; 0] = [];\n         assert_eq!(v.connect_vec(&0), vec![]);\n         assert_eq!([vec![1i], vec![2i, 3]].connect_vec(&0), vec![1, 0, 2, 3]);\n         assert_eq!([vec![1i], vec![2i], vec![3i]].connect_vec(&0), vec![1, 0, 2, 0, 3]);\n \n-        let v: [&[int], ..2] = [&[1], &[2, 3]];\n+        let v: [&[int]; 2] = [&[1], &[2, 3]];\n         assert_eq!(v.connect_vec(&0), vec![1, 0, 2, 3]);\n-        let v: [&[int], ..3] = [&[1], &[2], &[3]];\n+        let v: [&[int]; 3] = [&[1], &[2], &[3]];\n         assert_eq!(v.connect_vec(&0), vec![1, 0, 2, 0, 3]);\n     }\n \n@@ -2710,7 +2711,7 @@ mod tests {\n         }\n         assert_eq!(cnt, 11);\n \n-        let xs: [Foo, ..3] = [Foo, Foo, Foo];\n+        let xs: [Foo; 3] = [Foo, Foo, Foo];\n         cnt = 0;\n         for f in xs.iter() {\n             assert!(*f == Foo);"}, {"sha": "129ba77d9f7a6022a8673f8d315474ff9d212d39", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=cd614164e692cca3a1460737f581fcb6d4630baf", "patch": "@@ -2517,7 +2517,7 @@ mod tests {\n \n     #[test]\n     fn test_chars_decoding() {\n-        let mut bytes = [0u8, ..4];\n+        let mut bytes = [0u8; 4];\n         for c in range(0u32, 0x110000).filter_map(|c| ::core::char::from_u32(c)) {\n             let len = c.encode_utf8(&mut bytes).unwrap_or(0);\n             let s = ::core::str::from_utf8(bytes[..len]).unwrap();\n@@ -2529,7 +2529,7 @@ mod tests {\n \n     #[test]\n     fn test_chars_rev_decoding() {\n-        let mut bytes = [0u8, ..4];\n+        let mut bytes = [0u8; 4];\n         for c in range(0u32, 0x110000).filter_map(|c| ::core::char::from_u32(c)) {\n             let len = c.encode_utf8(&mut bytes).unwrap_or(0);\n             let s = ::core::str::from_utf8(bytes[..len]).unwrap();\n@@ -2743,7 +2743,7 @@ mod tests {\n         use core::iter::order;\n         // official Unicode test data\n         // from http://www.unicode.org/Public/UCD/latest/ucd/auxiliary/GraphemeBreakTest.txt\n-        let test_same: [(_, &[_]), .. 325] = [\n+        let test_same: [(_, &[_]); 325] = [\n             (\"\\u{20}\\u{20}\", &[\"\\u{20}\", \"\\u{20}\"]),\n             (\"\\u{20}\\u{308}\\u{20}\", &[\"\\u{20}\\u{308}\", \"\\u{20}\"]),\n             (\"\\u{20}\\u{D}\", &[\"\\u{20}\", \"\\u{D}\"]),\n@@ -3075,7 +3075,7 @@ mod tests {\n             (\"\\u{646}\\u{200D}\\u{20}\", &[\"\\u{646}\\u{200D}\", \"\\u{20}\"]),\n         ];\n \n-        let test_diff: [(_, &[_], &[_]), .. 23] = [\n+        let test_diff: [(_, &[_], &[_]); 23] = [\n             (\"\\u{20}\\u{903}\", &[\"\\u{20}\\u{903}\"], &[\"\\u{20}\", \"\\u{903}\"]), (\"\\u{20}\\u{308}\\u{903}\",\n             &[\"\\u{20}\\u{308}\\u{903}\"], &[\"\\u{20}\\u{308}\", \"\\u{903}\"]), (\"\\u{D}\\u{308}\\u{903}\",\n             &[\"\\u{D}\", \"\\u{308}\\u{903}\"], &[\"\\u{D}\", \"\\u{308}\", \"\\u{903}\"]), (\"\\u{A}\\u{308}\\u{903}\","}, {"sha": "37a6e690f5d30ee5688931da70761286a34b67a7", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=cd614164e692cca3a1460737f581fcb6d4630baf", "patch": "@@ -675,7 +675,7 @@ impl String {\n         assert!(idx <= len);\n         assert!(self.is_char_boundary(idx));\n         self.vec.reserve(4);\n-        let mut bits = [0, ..4];\n+        let mut bits = [0; 4];\n         let amt = ch.encode_utf8(&mut bits).unwrap();\n \n         unsafe {"}, {"sha": "28563a60b6164eaa4593dc57ecb45f686148f36b", "filename": "src/libcore/array.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibcore%2Farray.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibcore%2Farray.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Farray.rs?ref=cd614164e692cca3a1460737f581fcb6d4630baf", "patch": "@@ -26,33 +26,33 @@ macro_rules! array_impls {\n     ($($N:expr)+) => {\n         $(\n             #[stable]\n-            impl<T:Copy> Clone for [T, ..$N] {\n-                fn clone(&self) -> [T, ..$N] {\n+            impl<T:Copy> Clone for [T; $N] {\n+                fn clone(&self) -> [T; $N] {\n                     *self\n                 }\n             }\n \n             #[unstable = \"waiting for Show to stabilize\"]\n-            impl<T:fmt::Show> fmt::Show for [T, ..$N] {\n+            impl<T:fmt::Show> fmt::Show for [T; $N] {\n                 fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n                     fmt::Show::fmt(&self[], f)\n                 }\n             }\n \n             #[stable]\n-            impl<A, B> PartialEq<[B, ..$N]> for [A, ..$N] where A: PartialEq<B> {\n+            impl<A, B> PartialEq<[B; $N]> for [A; $N] where A: PartialEq<B> {\n                 #[inline]\n-                fn eq(&self, other: &[B, ..$N]) -> bool {\n+                fn eq(&self, other: &[B; $N]) -> bool {\n                     self[] == other[]\n                 }\n                 #[inline]\n-                fn ne(&self, other: &[B, ..$N]) -> bool {\n+                fn ne(&self, other: &[B; $N]) -> bool {\n                     self[] != other[]\n                 }\n             }\n \n             #[stable]\n-            impl<'a, A, B, Rhs> PartialEq<Rhs> for [A, ..$N] where\n+            impl<'a, A, B, Rhs> PartialEq<Rhs> for [A; $N] where\n                 A: PartialEq<B>,\n                 Rhs: Deref<[B]>,\n             {\n@@ -63,47 +63,47 @@ macro_rules! array_impls {\n             }\n \n             #[stable]\n-            impl<'a, A, B, Lhs> PartialEq<[B, ..$N]> for Lhs where\n+            impl<'a, A, B, Lhs> PartialEq<[B; $N]> for Lhs where\n                 A: PartialEq<B>,\n                 Lhs: Deref<[A]>\n             {\n                 #[inline(always)]\n-                fn eq(&self, other: &[B, ..$N]) -> bool { PartialEq::eq(&**self, other[]) }\n+                fn eq(&self, other: &[B; $N]) -> bool { PartialEq::eq(&**self, other[]) }\n                 #[inline(always)]\n-                fn ne(&self, other: &[B, ..$N]) -> bool { PartialEq::ne(&**self, other[]) }\n+                fn ne(&self, other: &[B; $N]) -> bool { PartialEq::ne(&**self, other[]) }\n             }\n \n             #[stable]\n-            impl<T:Eq> Eq for [T, ..$N] { }\n+            impl<T:Eq> Eq for [T; $N] { }\n \n             #[stable]\n-            impl<T:PartialOrd> PartialOrd for [T, ..$N] {\n+            impl<T:PartialOrd> PartialOrd for [T; $N] {\n                 #[inline]\n-                fn partial_cmp(&self, other: &[T, ..$N]) -> Option<Ordering> {\n+                fn partial_cmp(&self, other: &[T; $N]) -> Option<Ordering> {\n                     PartialOrd::partial_cmp(&self[], &other[])\n                 }\n                 #[inline]\n-                fn lt(&self, other: &[T, ..$N]) -> bool {\n+                fn lt(&self, other: &[T; $N]) -> bool {\n                     PartialOrd::lt(&self[], &other[])\n                 }\n                 #[inline]\n-                fn le(&self, other: &[T, ..$N]) -> bool {\n+                fn le(&self, other: &[T; $N]) -> bool {\n                     PartialOrd::le(&self[], &other[])\n                 }\n                 #[inline]\n-                fn ge(&self, other: &[T, ..$N]) -> bool {\n+                fn ge(&self, other: &[T; $N]) -> bool {\n                     PartialOrd::ge(&self[], &other[])\n                 }\n                 #[inline]\n-                fn gt(&self, other: &[T, ..$N]) -> bool {\n+                fn gt(&self, other: &[T; $N]) -> bool {\n                     PartialOrd::gt(&self[], &other[])\n                 }\n             }\n \n             #[stable]\n-            impl<T:Ord> Ord for [T, ..$N] {\n+            impl<T:Ord> Ord for [T; $N] {\n                 #[inline]\n-                fn cmp(&self, other: &[T, ..$N]) -> Ordering {\n+                fn cmp(&self, other: &[T; $N]) -> Ordering {\n                     Ord::cmp(&self[], &other[])\n                 }\n             }"}, {"sha": "e1728d762ed10ac97344ea723522f81ac9fcf9f7", "filename": "src/libcore/fmt/float.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibcore%2Ffmt%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibcore%2Ffmt%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Ffloat.rs?ref=cd614164e692cca3a1460737f581fcb6d4630baf", "patch": "@@ -123,7 +123,7 @@ pub fn float_to_str_bytes_common<T: Float, U, F>(\n     // For an f64 the exponent is in the range of [-1022, 1023] for base 2, so\n     // we may have up to that many digits. Give ourselves some extra wiggle room\n     // otherwise as well.\n-    let mut buf = [0u8, ..1536];\n+    let mut buf = [0u8; 1536];\n     let mut end = 0;\n     let radix_gen: T = cast(radix as int).unwrap();\n "}, {"sha": "87fcb12e29f9c95ddc442e94899f7f1dd7d47890", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=cd614164e692cca3a1460737f581fcb6d4630baf", "patch": "@@ -400,7 +400,7 @@ impl<'a> Formatter<'a> {\n         // Writes the sign if it exists, and then the prefix if it was requested\n         let write_prefix = |&: f: &mut Formatter| {\n             for c in sign.into_iter() {\n-                let mut b = [0, ..4];\n+                let mut b = [0; 4];\n                 let n = c.encode_utf8(&mut b).unwrap_or(0);\n                 try!(f.buf.write(b[..n]));\n             }\n@@ -505,7 +505,7 @@ impl<'a> Formatter<'a> {\n             rt::AlignCenter => (padding / 2, (padding + 1) / 2),\n         };\n \n-        let mut fill = [0u8, ..4];\n+        let mut fill = [0u8; 4];\n         let len = self.fill.encode_utf8(&mut fill).unwrap_or(0);\n \n         for _ in range(0, pre_pad) {\n@@ -606,7 +606,7 @@ impl Show for char {\n     fn fmt(&self, f: &mut Formatter) -> Result {\n         use char::Char;\n \n-        let mut utf8 = [0u8, ..4];\n+        let mut utf8 = [0u8; 4];\n         let amt = self.encode_utf8(&mut utf8).unwrap_or(0);\n         let s: &str = unsafe { mem::transmute(utf8[..amt]) };\n         Show::fmt(s, f)"}, {"sha": "7de3e847dc68350986086c7e5c4e2b4814967741", "filename": "src/libcore/fmt/num.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibcore%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibcore%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fnum.rs?ref=cd614164e692cca3a1460737f581fcb6d4630baf", "patch": "@@ -37,7 +37,7 @@ trait GenericRadix {\n         // characters for a base 2 number.\n         let zero = Int::zero();\n         let is_positive = x >= zero;\n-        let mut buf = [0u8, ..64];\n+        let mut buf = [0u8; 64];\n         let mut curr = buf.len();\n         let base = cast(self.base()).unwrap();\n         if is_positive {"}, {"sha": "d4d241752f20b6fe1edb0e01158c2ffb3f9490d8", "filename": "src/libcore/hash/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibcore%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibcore%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fmod.rs?ref=cd614164e692cca3a1460737f581fcb6d4630baf", "patch": "@@ -100,7 +100,7 @@ macro_rules! impl_hash {\n         impl<S: Writer> Hash<S> for $ty {\n             #[inline]\n             fn hash(&self, state: &mut S) {\n-                let a: [u8, ..::$ty::BYTES] = unsafe {\n+                let a: [u8; ::$ty::BYTES] = unsafe {\n                     mem::transmute((*self as $uty).to_le() as $ty)\n                 };\n                 state.write(a.as_slice())"}, {"sha": "51c0827186d51eed097baf04ac83a2c2002df328", "filename": "src/libcore/hash/sip.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibcore%2Fhash%2Fsip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibcore%2Fhash%2Fsip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fsip.rs?ref=cd614164e692cca3a1460737f581fcb6d4630baf", "patch": "@@ -292,7 +292,7 @@ mod tests {\n     #[test]\n     #[allow(unused_must_use)]\n     fn test_siphash() {\n-        let vecs : [[u8, ..8], ..64] = [\n+        let vecs : [[u8; 8]; 64] = [\n             [ 0x31, 0x0e, 0x0e, 0xdd, 0x47, 0xdb, 0x6f, 0x72, ],\n             [ 0xfd, 0x67, 0xdc, 0x93, 0xc5, 0x39, 0xf8, 0x74, ],\n             [ 0x5a, 0x4f, 0xa9, 0xd9, 0x09, 0x80, 0x6c, 0x0d, ],\n@@ -366,7 +366,7 @@ mod tests {\n         let mut state_inc = SipState::new_with_keys(k0, k1);\n         let mut state_full = SipState::new_with_keys(k0, k1);\n \n-        fn to_hex_str(r: &[u8, ..8]) -> String {\n+        fn to_hex_str(r: &[u8; 8]) -> String {\n             let mut s = String::new();\n             for b in r.iter() {\n                 s.push_str(format!(\"{}\", fmt::radix(*b, 16)).as_slice());"}, {"sha": "7c53503b1ceb7ef4688756c9f74642c8c8914df3", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=cd614164e692cca3a1460737f581fcb6d4630baf", "patch": "@@ -1037,7 +1037,7 @@ pub trait IteratorOrdExt<A> {\n     /// ```rust\n     /// use std::iter::{NoElements, OneElement, MinMax};\n     ///\n-    /// let v: [int, ..0] = [];\n+    /// let v: [int; 0] = [];\n     /// assert_eq!(v.iter().min_max(), NoElements);\n     ///\n     /// let v = [1i];"}, {"sha": "f4fe86a0d7ec08c1a7aea723a20e68666ff64370", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=cd614164e692cca3a1460737f581fcb6d4630baf", "patch": "@@ -1027,7 +1027,7 @@ pub fn truncate_utf16_at_nul<'a>(v: &'a [u16]) -> &'a [u16] {\n }\n \n // https://tools.ietf.org/html/rfc3629\n-static UTF8_CHAR_WIDTH: [u8, ..256] = [\n+static UTF8_CHAR_WIDTH: [u8; 256] = [\n 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,\n 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1, // 0x1F\n 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,"}, {"sha": "e9e2028dc614775acd99f1ffbba443493546da04", "filename": "src/libcoretest/any.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibcoretest%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibcoretest%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fany.rs?ref=cd614164e692cca3a1460737f581fcb6d4630baf", "patch": "@@ -113,10 +113,10 @@ fn any_downcast_mut() {\n \n #[test]\n fn any_fixed_vec() {\n-    let test = [0u, ..8];\n+    let test = [0u; 8];\n     let test = &test as &Any;\n-    assert!(test.is::<[uint, ..8]>());\n-    assert!(!test.is::<[uint, ..10]>());\n+    assert!(test.is::<[uint; 8]>());\n+    assert!(!test.is::<[uint; 10]>());\n }\n \n "}, {"sha": "b931809e6036ed184f090419fd17f257a89791a9", "filename": "src/libcoretest/char.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibcoretest%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibcoretest%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fchar.rs?ref=cd614164e692cca3a1460737f581fcb6d4630baf", "patch": "@@ -169,7 +169,7 @@ fn test_escape_unicode() {\n #[test]\n fn test_encode_utf8() {\n     fn check(input: char, expect: &[u8]) {\n-        let mut buf = [0u8, ..4];\n+        let mut buf = [0u8; 4];\n         let n = input.encode_utf8(buf.as_mut_slice()).unwrap_or(0);\n         assert_eq!(buf[..n], expect);\n     }\n@@ -183,7 +183,7 @@ fn test_encode_utf8() {\n #[test]\n fn test_encode_utf16() {\n     fn check(input: char, expect: &[u16]) {\n-        let mut buf = [0u16, ..2];\n+        let mut buf = [0u16; 2];\n         let n = input.encode_utf16(buf.as_mut_slice()).unwrap_or(0);\n         assert_eq!(buf[..n], expect);\n     }"}, {"sha": "431f7e748f6db0e29a6bc4ea3bbc3dc5260cb423", "filename": "src/libcoretest/hash/sip.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibcoretest%2Fhash%2Fsip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibcoretest%2Fhash%2Fsip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fhash%2Fsip.rs?ref=cd614164e692cca3a1460737f581fcb6d4630baf", "patch": "@@ -33,7 +33,7 @@ impl<'a, S: Writer> Hash<S> for Bytes<'a> {\n #[test]\n #[allow(unused_must_use)]\n fn test_siphash() {\n-    let vecs : [[u8, ..8], ..64] = [\n+    let vecs : [[u8; 8]; 64] = [\n         [ 0x31, 0x0e, 0x0e, 0xdd, 0x47, 0xdb, 0x6f, 0x72, ],\n         [ 0xfd, 0x67, 0xdc, 0x93, 0xc5, 0x39, 0xf8, 0x74, ],\n         [ 0x5a, 0x4f, 0xa9, 0xd9, 0x09, 0x80, 0x6c, 0x0d, ],\n@@ -107,7 +107,7 @@ fn test_siphash() {\n     let mut state_inc = SipState::new_with_keys(k0, k1);\n     let mut state_full = SipState::new_with_keys(k0, k1);\n \n-    fn to_hex_str(r: &[u8, ..8]) -> String {\n+    fn to_hex_str(r: &[u8; 8]) -> String {\n         let mut s = String::new();\n         for b in r.iter() {\n             s.push_str(format!(\"{}\", fmt::radix(*b, 16)).as_slice());"}, {"sha": "d450e557383a40fe6df3bd198d7ddc26031764ca", "filename": "src/libcoretest/iter.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibcoretest%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibcoretest%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fiter.rs?ref=cd614164e692cca3a1460737f581fcb6d4630baf", "patch": "@@ -19,7 +19,7 @@ use test::Bencher;\n \n #[test]\n fn test_lt() {\n-    let empty: [int, ..0] = [];\n+    let empty: [int; 0] = [];\n     let xs = [1i,2,3];\n     let ys = [1i,2,0];\n \n@@ -781,7 +781,7 @@ fn test_peekable_is_empty() {\n \n #[test]\n fn test_min_max() {\n-    let v: [int, ..0] = [];\n+    let v: [int; 0] = [];\n     assert_eq!(v.iter().min_max(), NoElements);\n \n     let v = [1i];"}, {"sha": "162f75763de429e8eef4fb5f82fc0c26797815f9", "filename": "src/libcoretest/ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibcoretest%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibcoretest%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fptr.rs?ref=cd614164e692cca3a1460737f581fcb6d4630baf", "patch": "@@ -165,8 +165,8 @@ fn test_ptr_subtraction() {\n \n #[test]\n fn test_set_memory() {\n-    let mut xs = [0u8, ..20];\n+    let mut xs = [0u8; 20];\n     let ptr = xs.as_mut_ptr();\n     unsafe { set_memory(ptr, 5u8, xs.len()); }\n-    assert!(xs == [5u8, ..20]);\n+    assert!(xs == [5u8; 20]);\n }"}, {"sha": "9faaedc45f3b10359104febec977e9f9b0f89a7f", "filename": "src/liblibc/lib.rs", "status": "modified", "additions": 51, "deletions": 51, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Fliblibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Fliblibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc%2Flib.rs?ref=cd614164e692cca3a1460737f581fcb6d4630baf", "patch": "@@ -425,20 +425,20 @@ pub mod types {\n                 #[repr(C)]\n                 #[deriving(Copy)] pub struct sockaddr {\n                     pub sa_family: sa_family_t,\n-                    pub sa_data: [u8, ..14],\n+                    pub sa_data: [u8; 14],\n                 }\n                 #[repr(C)]\n                 #[deriving(Copy)] pub struct sockaddr_storage {\n                     pub ss_family: sa_family_t,\n                     pub __ss_align: i64,\n-                    pub __ss_pad2: [u8, ..112],\n+                    pub __ss_pad2: [u8; 112],\n                 }\n                 #[repr(C)]\n                 #[deriving(Copy)] pub struct sockaddr_in {\n                     pub sin_family: sa_family_t,\n                     pub sin_port: in_port_t,\n                     pub sin_addr: in_addr,\n-                    pub sin_zero: [u8, ..8],\n+                    pub sin_zero: [u8; 8],\n                 }\n                 #[repr(C)]\n                 #[deriving(Copy)] pub struct in_addr {\n@@ -454,7 +454,7 @@ pub mod types {\n                 }\n                 #[repr(C)]\n                 #[deriving(Copy)] pub struct in6_addr {\n-                    pub s6_addr: [u16, ..8]\n+                    pub s6_addr: [u16; 8]\n                 }\n                 #[repr(C)]\n                 #[deriving(Copy)] pub struct ip_mreq {\n@@ -491,7 +491,7 @@ pub mod types {\n                 #[repr(C)]\n                 #[deriving(Copy)] pub struct sockaddr_un {\n                     pub sun_family: sa_family_t,\n-                    pub sun_path: [c_char, ..108]\n+                    pub sun_path: [c_char; 108]\n                 }\n \n                 #[repr(C)]\n@@ -609,7 +609,7 @@ pub mod types {\n \n                 #[repr(C)]\n                 #[deriving(Copy)] pub struct pthread_attr_t {\n-                    pub __size: [u32, ..9]\n+                    pub __size: [u32; 9]\n                 }\n             }\n             #[cfg(target_arch = \"arm\")]\n@@ -625,14 +625,14 @@ pub mod types {\n                 #[repr(C)]\n                 #[deriving(Copy)] pub struct stat {\n                     pub st_dev: c_ulonglong,\n-                    pub __pad0: [c_uchar, ..4],\n+                    pub __pad0: [c_uchar; 4],\n                     pub __st_ino: ino_t,\n                     pub st_mode: c_uint,\n                     pub st_nlink: c_uint,\n                     pub st_uid: uid_t,\n                     pub st_gid: gid_t,\n                     pub st_rdev: c_ulonglong,\n-                    pub __pad3: [c_uchar, ..4],\n+                    pub __pad3: [c_uchar; 4],\n                     pub st_size: c_longlong,\n                     pub st_blksize: blksize_t,\n                     pub st_blocks: c_ulonglong,\n@@ -653,7 +653,7 @@ pub mod types {\n \n                 #[repr(C)]\n                 #[deriving(Copy)] pub struct pthread_attr_t {\n-                    pub __size: [u32, ..9]\n+                    pub __size: [u32; 9]\n                 }\n             }\n             #[cfg(any(target_arch = \"mips\", target_arch = \"mipsel\"))]\n@@ -670,14 +670,14 @@ pub mod types {\n                 #[repr(C)]\n                 #[deriving(Copy)] pub struct stat {\n                     pub st_dev: c_ulong,\n-                    pub st_pad1: [c_long, ..3],\n+                    pub st_pad1: [c_long; 3],\n                     pub st_ino: ino_t,\n                     pub st_mode: mode_t,\n                     pub st_nlink: nlink_t,\n                     pub st_uid: uid_t,\n                     pub st_gid: gid_t,\n                     pub st_rdev: c_ulong,\n-                    pub st_pad2: [c_long, ..2],\n+                    pub st_pad2: [c_long; 2],\n                     pub st_size: off_t,\n                     pub st_pad3: c_long,\n                     pub st_atime: time_t,\n@@ -688,7 +688,7 @@ pub mod types {\n                     pub st_ctime_nsec: c_long,\n                     pub st_blksize: blksize_t,\n                     pub st_blocks: blkcnt_t,\n-                    pub st_pad5: [c_long, ..14],\n+                    pub st_pad5: [c_long; 14],\n                 }\n \n                 #[repr(C)]\n@@ -699,7 +699,7 @@ pub mod types {\n \n                 #[repr(C)]\n                 #[deriving(Copy)] pub struct pthread_attr_t {\n-                    pub __size: [u32, ..9]\n+                    pub __size: [u32; 9]\n                 }\n             }\n             pub mod posix08 {}\n@@ -714,7 +714,7 @@ pub mod types {\n                     pub sll_hatype: c_ushort,\n                     pub sll_pkttype: c_uchar,\n                     pub sll_halen: c_uchar,\n-                    pub sll_addr: [c_uchar, ..8]\n+                    pub sll_addr: [c_uchar; 8]\n                 }\n             }\n \n@@ -788,7 +788,7 @@ pub mod types {\n                     pub st_mtime_nsec: c_long,\n                     pub st_ctime: time_t,\n                     pub st_ctime_nsec: c_long,\n-                    pub __unused: [c_long, ..3],\n+                    pub __unused: [c_long; 3],\n                 }\n \n                 #[repr(C)]\n@@ -799,7 +799,7 @@ pub mod types {\n \n                 #[repr(C)]\n                 #[deriving(Copy)] pub struct pthread_attr_t {\n-                    pub __size: [u64, ..7]\n+                    pub __size: [u64; 7]\n                 }\n             }\n             pub mod posix08 {\n@@ -815,7 +815,7 @@ pub mod types {\n                     pub sll_hatype: c_ushort,\n                     pub sll_pkttype: c_uchar,\n                     pub sll_halen: c_uchar,\n-                    pub sll_addr: [c_uchar, ..8]\n+                    pub sll_addr: [c_uchar; 8]\n                 }\n \n             }\n@@ -878,23 +878,23 @@ pub mod types {\n                 #[deriving(Copy)] pub struct sockaddr {\n                     pub sa_len: u8,\n                     pub sa_family: sa_family_t,\n-                    pub sa_data: [u8, ..14],\n+                    pub sa_data: [u8; 14],\n                 }\n                 #[repr(C)]\n                 #[deriving(Copy)] pub struct sockaddr_storage {\n                     pub ss_len: u8,\n                     pub ss_family: sa_family_t,\n-                    pub __ss_pad1: [u8, ..6],\n+                    pub __ss_pad1: [u8; 6],\n                     pub __ss_align: i64,\n-                    pub __ss_pad2: [u8, ..112],\n+                    pub __ss_pad2: [u8; 112],\n                 }\n                 #[repr(C)]\n                 #[deriving(Copy)] pub struct sockaddr_in {\n                     pub sin_len: u8,\n                     pub sin_family: sa_family_t,\n                     pub sin_port: in_port_t,\n                     pub sin_addr: in_addr,\n-                    pub sin_zero: [u8, ..8],\n+                    pub sin_zero: [u8; 8],\n                 }\n                 #[repr(C)]\n                 #[deriving(Copy)] pub struct in_addr {\n@@ -911,7 +911,7 @@ pub mod types {\n                 }\n                 #[repr(C)]\n                 #[deriving(Copy)] pub struct in6_addr {\n-                    pub s6_addr: [u16, ..8]\n+                    pub s6_addr: [u16; 8]\n                 }\n                 #[repr(C)]\n                 #[deriving(Copy)] pub struct ip_mreq {\n@@ -938,7 +938,7 @@ pub mod types {\n                 #[deriving(Copy)] pub struct sockaddr_un {\n                     pub sun_len: u8,\n                     pub sun_family: sa_family_t,\n-                    pub sun_path: [c_char, ..104]\n+                    pub sun_path: [c_char; 104]\n                 }\n                 #[repr(C)]\n                 #[deriving(Copy)] pub struct ifaddrs {\n@@ -1030,7 +1030,7 @@ pub mod types {\n                     pub st_lspare: int32_t,\n                     pub st_birthtime: time_t,\n                     pub st_birthtime_nsec: c_long,\n-                    pub __unused: [uint8_t, ..2],\n+                    pub __unused: [uint8_t; 2],\n                 }\n \n                 #[repr(C)]\n@@ -1106,23 +1106,23 @@ pub mod types {\n                 #[deriving(Copy)] pub struct sockaddr {\n                     pub sa_len: u8,\n                     pub sa_family: sa_family_t,\n-                    pub sa_data: [u8, ..14],\n+                    pub sa_data: [u8; 14],\n                 }\n                 #[repr(C)]\n                 #[deriving(Copy)] pub struct sockaddr_storage {\n                     pub ss_len: u8,\n                     pub ss_family: sa_family_t,\n-                    pub __ss_pad1: [u8, ..6],\n+                    pub __ss_pad1: [u8; 6],\n                     pub __ss_align: i64,\n-                    pub __ss_pad2: [u8, ..112],\n+                    pub __ss_pad2: [u8; 112],\n                 }\n                 #[repr(C)]\n                 #[deriving(Copy)] pub struct sockaddr_in {\n                     pub sin_len: u8,\n                     pub sin_family: sa_family_t,\n                     pub sin_port: in_port_t,\n                     pub sin_addr: in_addr,\n-                    pub sin_zero: [u8, ..8],\n+                    pub sin_zero: [u8; 8],\n                 }\n                 #[repr(C)]\n                 #[deriving(Copy)] pub struct in_addr {\n@@ -1139,7 +1139,7 @@ pub mod types {\n                 }\n                 #[repr(C)]\n                 #[deriving(Copy)] pub struct in6_addr {\n-                    pub s6_addr: [u16, ..8]\n+                    pub s6_addr: [u16; 8]\n                 }\n                 #[repr(C)]\n                 #[deriving(Copy)] pub struct ip_mreq {\n@@ -1166,7 +1166,7 @@ pub mod types {\n                 #[deriving(Copy)] pub struct sockaddr_un {\n                     pub sun_len: u8,\n                     pub sun_family: sa_family_t,\n-                    pub sun_path: [c_char, ..104]\n+                    pub sun_path: [c_char; 104]\n                 }\n                 #[repr(C)]\n                 #[deriving(Copy)] pub struct ifaddrs {\n@@ -1337,21 +1337,21 @@ pub mod types {\n                 #[repr(C)]\n                 #[deriving(Copy)] pub struct sockaddr {\n                     pub sa_family: sa_family_t,\n-                    pub sa_data: [u8, ..14],\n+                    pub sa_data: [u8; 14],\n                 }\n                 #[repr(C)]\n                 #[deriving(Copy)] pub struct sockaddr_storage {\n                     pub ss_family: sa_family_t,\n-                    pub __ss_pad1: [u8, ..6],\n+                    pub __ss_pad1: [u8; 6],\n                     pub __ss_align: i64,\n-                    pub __ss_pad2: [u8, ..112],\n+                    pub __ss_pad2: [u8; 112],\n                 }\n                 #[repr(C)]\n                 #[deriving(Copy)] pub struct sockaddr_in {\n                     pub sin_family: sa_family_t,\n                     pub sin_port: in_port_t,\n                     pub sin_addr: in_addr,\n-                    pub sin_zero: [u8, ..8],\n+                    pub sin_zero: [u8; 8],\n                 }\n                 #[repr(C)]\n                 #[deriving(Copy)] pub struct in_addr {\n@@ -1367,7 +1367,7 @@ pub mod types {\n                 }\n                 #[repr(C)]\n                 #[deriving(Copy)] pub struct in6_addr {\n-                    pub s6_addr: [u16, ..8]\n+                    pub s6_addr: [u16; 8]\n                 }\n                 #[repr(C)]\n                 #[deriving(Copy)] pub struct ip_mreq {\n@@ -1393,7 +1393,7 @@ pub mod types {\n                 #[repr(C)]\n                 #[deriving(Copy)] pub struct sockaddr_un {\n                     pub sun_family: sa_family_t,\n-                    pub sun_path: [c_char, ..108]\n+                    pub sun_path: [c_char; 108]\n                 }\n             }\n         }\n@@ -1626,13 +1626,13 @@ pub mod types {\n                     pub Data1: DWORD,\n                     pub Data2: WORD,\n                     pub Data3: WORD,\n-                    pub Data4: [BYTE, ..8],\n+                    pub Data4: [BYTE; 8],\n                 }\n \n                 #[repr(C)]\n                 #[deriving(Copy)] pub struct WSAPROTOCOLCHAIN {\n                     pub ChainLen: c_int,\n-                    pub ChainEntries: [DWORD, ..MAX_PROTOCOL_CHAIN as uint],\n+                    pub ChainEntries: [DWORD; MAX_PROTOCOL_CHAIN as uint],\n                 }\n \n                 pub type LPWSAPROTOCOLCHAIN = *mut WSAPROTOCOLCHAIN;\n@@ -1658,7 +1658,7 @@ pub mod types {\n                     pub iSecurityScheme: c_int,\n                     pub dwMessageSize: DWORD,\n                     pub dwProviderReserved: DWORD,\n-                    pub szProtocol: [u8, ..(WSAPROTOCOL_LEN as uint) + 1u],\n+                    pub szProtocol: [u8; (WSAPROTOCOL_LEN as uint) + 1u],\n                 }\n \n                 pub type LPWSAPROTOCOL_INFO = *mut WSAPROTOCOL_INFO;\n@@ -1675,8 +1675,8 @@ pub mod types {\n                     pub nFileSizeLow: DWORD,\n                     pub dwReserved0: DWORD,\n                     pub dwReserved1: DWORD,\n-                    pub cFileName: [wchar_t, ..260], // #define MAX_PATH 260\n-                    pub cAlternateFileName: [wchar_t, ..14],\n+                    pub cFileName: [wchar_t; 260], // #define MAX_PATH 260\n+                    pub cAlternateFileName: [wchar_t; 14],\n                 }\n \n                 pub type LPWIN32_FIND_DATAW = *mut WIN32_FIND_DATAW;\n@@ -1741,16 +1741,16 @@ pub mod types {\n                 #[deriving(Copy)] pub struct sockaddr {\n                     pub sa_len: u8,\n                     pub sa_family: sa_family_t,\n-                    pub sa_data: [u8, ..14],\n+                    pub sa_data: [u8; 14],\n                 }\n \n                 #[repr(C)]\n                 #[deriving(Copy)] pub struct sockaddr_storage {\n                     pub ss_len: u8,\n                     pub ss_family: sa_family_t,\n-                    pub __ss_pad1: [u8, ..6],\n+                    pub __ss_pad1: [u8; 6],\n                     pub __ss_align: i64,\n-                    pub __ss_pad2: [u8, ..112],\n+                    pub __ss_pad2: [u8; 112],\n                 }\n \n                 #[repr(C)]\n@@ -1759,7 +1759,7 @@ pub mod types {\n                     pub sin_family: sa_family_t,\n                     pub sin_port: in_port_t,\n                     pub sin_addr: in_addr,\n-                    pub sin_zero: [u8, ..8],\n+                    pub sin_zero: [u8; 8],\n                 }\n \n                 #[repr(C)]\n@@ -1779,7 +1779,7 @@ pub mod types {\n \n                 #[repr(C)]\n                 #[deriving(Copy)] pub struct in6_addr {\n-                    pub s6_addr: [u16, ..8]\n+                    pub s6_addr: [u16; 8]\n                 }\n \n                 #[repr(C)]\n@@ -1810,7 +1810,7 @@ pub mod types {\n                 #[deriving(Copy)] pub struct sockaddr_un {\n                     pub sun_len: u8,\n                     pub sun_family: sa_family_t,\n-                    pub sun_path: [c_char, ..104]\n+                    pub sun_path: [c_char; 104]\n                 }\n \n                 #[repr(C)]\n@@ -1899,7 +1899,7 @@ pub mod types {\n                     pub st_flags: uint32_t,\n                     pub st_gen: uint32_t,\n                     pub st_lspare: int32_t,\n-                    pub st_qspare: [int64_t, ..2],\n+                    pub st_qspare: [int64_t; 2],\n                 }\n \n                 #[repr(C)]\n@@ -1911,7 +1911,7 @@ pub mod types {\n                 #[repr(C)]\n                 #[deriving(Copy)] pub struct pthread_attr_t {\n                     pub __sig: c_long,\n-                    pub __opaque: [c_char, ..36]\n+                    pub __opaque: [c_char; 36]\n                 }\n             }\n             pub mod posix08 {\n@@ -2003,7 +2003,7 @@ pub mod types {\n                     pub st_flags: uint32_t,\n                     pub st_gen: uint32_t,\n                     pub st_lspare: int32_t,\n-                    pub st_qspare: [int64_t, ..2],\n+                    pub st_qspare: [int64_t; 2],\n                 }\n \n                 #[repr(C)]\n@@ -2015,7 +2015,7 @@ pub mod types {\n                 #[repr(C)]\n                 #[deriving(Copy)] pub struct pthread_attr_t {\n                     pub __sig: c_long,\n-                    pub __opaque: [c_char, ..56]\n+                    pub __opaque: [c_char; 56]\n                 }\n             }\n             pub mod posix08 {"}, {"sha": "7e21f5f48f16389b9b8d8d45f919d44c933d393f", "filename": "src/liblog/directive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Fliblog%2Fdirective.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Fliblog%2Fdirective.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblog%2Fdirective.rs?ref=cd614164e692cca3a1460737f581fcb6d4630baf", "patch": "@@ -18,7 +18,7 @@ pub struct LogDirective {\n     pub level: u32,\n }\n \n-pub static LOG_LEVEL_NAMES: [&'static str, ..4] = [\"ERROR\", \"WARN\", \"INFO\",\n+pub static LOG_LEVEL_NAMES: [&'static str; 4] = [\"ERROR\", \"WARN\", \"INFO\",\n                                                \"DEBUG\"];\n \n /// Parse an individual log level that is either a number or a symbolic log level"}, {"sha": "49577cd279bf84bb22c341ff236448ba237f3ffe", "filename": "src/librand/chacha.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibrand%2Fchacha.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibrand%2Fchacha.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fchacha.rs?ref=cd614164e692cca3a1460737f581fcb6d4630baf", "patch": "@@ -31,14 +31,14 @@ const CHACHA_ROUNDS: uint = 20; // Cryptographically secure from 8 upwards as of\n \n #[deriving(Copy)]\n pub struct ChaChaRng {\n-    buffer:  [u32, ..STATE_WORDS], // Internal buffer of output\n-    state:   [u32, ..STATE_WORDS], // Initial state\n+    buffer:  [u32; STATE_WORDS], // Internal buffer of output\n+    state:   [u32; STATE_WORDS], // Initial state\n     index:   uint,                 // Index into state\n }\n \n static EMPTY: ChaChaRng = ChaChaRng {\n-    buffer:  [0, ..STATE_WORDS],\n-    state:   [0, ..STATE_WORDS],\n+    buffer:  [0; STATE_WORDS],\n+    state:   [0; STATE_WORDS],\n     index:   STATE_WORDS\n };\n \n@@ -68,7 +68,7 @@ macro_rules! double_round{\n }\n \n #[inline]\n-fn core(output: &mut [u32, ..STATE_WORDS], input: &[u32, ..STATE_WORDS]) {\n+fn core(output: &mut [u32; STATE_WORDS], input: &[u32; STATE_WORDS]) {\n     *output = *input;\n \n     for _ in range(0, CHACHA_ROUNDS / 2) {\n@@ -86,7 +86,7 @@ impl ChaChaRng {\n     /// fixed key of 8 zero words.\n     pub fn new_unseeded() -> ChaChaRng {\n         let mut rng = EMPTY;\n-        rng.init(&[0, ..KEY_WORDS]);\n+        rng.init(&[0; KEY_WORDS]);\n         rng\n     }\n \n@@ -124,7 +124,7 @@ impl ChaChaRng {\n     /// ```\n     /// [1]: Daniel J. Bernstein. [*Extending the Salsa20\n     /// nonce.*](http://cr.yp.to/papers.html#xsalsa)\n-    fn init(&mut self, key: &[u32, ..KEY_WORDS]) {\n+    fn init(&mut self, key: &[u32; KEY_WORDS]) {\n         self.state[0] = 0x61707865;\n         self.state[1] = 0x3320646E;\n         self.state[2] = 0x79622D32;\n@@ -174,7 +174,7 @@ impl<'a> SeedableRng<&'a [u32]> for ChaChaRng {\n \n     fn reseed(&mut self, seed: &'a [u32]) {\n         // reset state\n-        self.init(&[0u32, ..KEY_WORDS]);\n+        self.init(&[0u32; KEY_WORDS]);\n         // set key in place\n         let key = self.state.slice_mut(4, 4+KEY_WORDS);\n         for (k, s) in key.iter_mut().zip(seed.iter()) {\n@@ -195,7 +195,7 @@ impl<'a> SeedableRng<&'a [u32]> for ChaChaRng {\n \n impl Rand for ChaChaRng {\n     fn rand<R: Rng>(other: &mut R) -> ChaChaRng {\n-        let mut key : [u32, ..KEY_WORDS] = [0, ..KEY_WORDS];\n+        let mut key : [u32; KEY_WORDS] = [0; KEY_WORDS];\n         for word in key.iter_mut() {\n             *word = other.gen();\n         }\n@@ -246,7 +246,7 @@ mod test {\n     fn test_rng_true_values() {\n         // Test vectors 1 and 2 from\n         // http://tools.ietf.org/html/draft-nir-cfrg-chacha20-poly1305-04\n-        let seed : &[_] = &[0u32, ..8];\n+        let seed : &[_] = &[0u32; 8];\n         let mut ra: ChaChaRng = SeedableRng::from_seed(seed);\n \n         let v = Vec::from_fn(16, |_| ra.next_u32());"}, {"sha": "a108fd70d1ca9d6410eb60bc1f048dbacf68b211", "filename": "src/librand/distributions/ziggurat_tables.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibrand%2Fdistributions%2Fziggurat_tables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibrand%2Fdistributions%2Fziggurat_tables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fziggurat_tables.rs?ref=cd614164e692cca3a1460737f581fcb6d4630baf", "patch": "@@ -11,9 +11,9 @@\n // Tables for distributions which are sampled using the ziggurat\n // algorithm. Autogenerated by `ziggurat_tables.py`.\n \n-pub type ZigTable = &'static [f64, .. 257];\n+pub type ZigTable = &'static [f64; 257];\n pub static ZIG_NORM_R: f64 = 3.654152885361008796;\n-pub static ZIG_NORM_X: [f64, .. 257] =\n+pub static ZIG_NORM_X: [f64; 257] =\n     [3.910757959537090045, 3.654152885361008796, 3.449278298560964462, 3.320244733839166074,\n      3.224575052047029100, 3.147889289517149969, 3.083526132001233044, 3.027837791768635434,\n      2.978603279880844834, 2.934366867207854224, 2.894121053612348060, 2.857138730872132548,\n@@ -79,7 +79,7 @@ pub static ZIG_NORM_X: [f64, .. 257] =\n      0.487443966121754335, 0.463634336771763245, 0.437518402186662658, 0.408389134588000746,\n      0.375121332850465727, 0.335737519180459465, 0.286174591747260509, 0.215241895913273806,\n      0.000000000000000000];\n-pub static ZIG_NORM_F: [f64, .. 257] =\n+pub static ZIG_NORM_F: [f64; 257] =\n     [0.000477467764586655, 0.001260285930498598, 0.002609072746106363, 0.004037972593371872,\n      0.005522403299264754, 0.007050875471392110, 0.008616582769422917, 0.010214971439731100,\n      0.011842757857943104, 0.013497450601780807, 0.015177088307982072, 0.016880083152595839,\n@@ -146,7 +146,7 @@ pub static ZIG_NORM_F: [f64, .. 257] =\n      0.932060075968990209, 0.945198953453078028, 0.959879091812415930, 0.977101701282731328,\n      1.000000000000000000];\n pub static ZIG_EXP_R: f64 = 7.697117470131050077;\n-pub static ZIG_EXP_X: [f64, .. 257] =\n+pub static ZIG_EXP_X: [f64; 257] =\n     [8.697117470131052741, 7.697117470131050077, 6.941033629377212577, 6.478378493832569696,\n      6.144164665772472667, 5.882144315795399869, 5.666410167454033697, 5.482890627526062488,\n      5.323090505754398016, 5.181487281301500047, 5.054288489981304089, 4.938777085901250530,\n@@ -212,7 +212,7 @@ pub static ZIG_EXP_X: [f64, .. 257] =\n      0.253658363385912022, 0.233790483059674731, 0.212671510630966620, 0.189958689622431842,\n      0.165127622564187282, 0.137304980940012589, 0.104838507565818778, 0.063852163815001570,\n      0.000000000000000000];\n-pub static ZIG_EXP_F: [f64, .. 257] =\n+pub static ZIG_EXP_F: [f64; 257] =\n     [0.000167066692307963, 0.000454134353841497, 0.000967269282327174, 0.001536299780301573,\n      0.002145967743718907, 0.002788798793574076, 0.003460264777836904, 0.004157295120833797,\n      0.004877655983542396, 0.005619642207205489, 0.006381905937319183, 0.007163353183634991,"}, {"sha": "1fe435a59adcbd7186205c2316592485339c0bf9", "filename": "src/librand/isaac.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibrand%2Fisaac.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibrand%2Fisaac.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fisaac.rs?ref=cd614164e692cca3a1460737f581fcb6d4630baf", "patch": "@@ -32,17 +32,17 @@ const RAND_SIZE_UINT: uint = 1 << (RAND_SIZE_LEN as uint);\n #[deriving(Copy)]\n pub struct IsaacRng {\n     cnt: u32,\n-    rsl: [u32, ..RAND_SIZE_UINT],\n-    mem: [u32, ..RAND_SIZE_UINT],\n+    rsl: [u32; RAND_SIZE_UINT],\n+    mem: [u32; RAND_SIZE_UINT],\n     a: u32,\n     b: u32,\n     c: u32\n }\n \n static EMPTY: IsaacRng = IsaacRng {\n     cnt: 0,\n-    rsl: [0, ..RAND_SIZE_UINT],\n-    mem: [0, ..RAND_SIZE_UINT],\n+    rsl: [0; RAND_SIZE_UINT],\n+    mem: [0; RAND_SIZE_UINT],\n     a: 0, b: 0, c: 0\n };\n \n@@ -267,17 +267,17 @@ const RAND_SIZE_64: uint = 1 << RAND_SIZE_64_LEN;\n #[deriving(Copy)]\n pub struct Isaac64Rng {\n     cnt: uint,\n-    rsl: [u64, .. RAND_SIZE_64],\n-    mem: [u64, .. RAND_SIZE_64],\n+    rsl: [u64; RAND_SIZE_64],\n+    mem: [u64; RAND_SIZE_64],\n     a: u64,\n     b: u64,\n     c: u64,\n }\n \n static EMPTY_64: Isaac64Rng = Isaac64Rng {\n     cnt: 0,\n-    rsl: [0, .. RAND_SIZE_64],\n-    mem: [0, .. RAND_SIZE_64],\n+    rsl: [0; RAND_SIZE_64],\n+    mem: [0; RAND_SIZE_64],\n     a: 0, b: 0, c: 0,\n };\n \n@@ -358,7 +358,7 @@ impl Isaac64Rng {\n         let mut a = self.a;\n         let mut b = self.b + self.c;\n         const MIDPOINT: uint =  RAND_SIZE_64 / 2;\n-        const MP_VEC: [(uint, uint), .. 2] = [(0,MIDPOINT), (MIDPOINT, 0)];\n+        const MP_VEC: [(uint, uint); 2] = [(0,MIDPOINT), (MIDPOINT, 0)];\n         macro_rules! ind (\n             ($x:expr) => {\n                 *self.mem.get_unchecked(($x as uint >> 3) & (RAND_SIZE_64 - 1))"}, {"sha": "568d245911826cbe0a38bdc939515eb007646bf2", "filename": "src/librand/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibrand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibrand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Flib.rs?ref=cd614164e692cca3a1460737f581fcb6d4630baf", "patch": "@@ -140,7 +140,7 @@ pub trait Rng {\n     /// ```rust\n     /// use std::rand::{thread_rng, Rng};\n     ///\n-    /// let mut v = [0u8, .. 13579];\n+    /// let mut v = [0u8; 13579];\n     /// thread_rng().fill_bytes(&mut v);\n     /// println!(\"{}\", v.as_slice());\n     /// ```\n@@ -429,9 +429,9 @@ impl Rng for XorShiftRng {\n     }\n }\n \n-impl SeedableRng<[u32, .. 4]> for XorShiftRng {\n+impl SeedableRng<[u32; 4]> for XorShiftRng {\n     /// Reseed an XorShiftRng. This will panic if `seed` is entirely 0.\n-    fn reseed(&mut self, seed: [u32, .. 4]) {\n+    fn reseed(&mut self, seed: [u32; 4]) {\n         assert!(!seed.iter().all(|&x| x == 0),\n                 \"XorShiftRng.reseed called with an all zero seed.\");\n \n@@ -442,7 +442,7 @@ impl SeedableRng<[u32, .. 4]> for XorShiftRng {\n     }\n \n     /// Create a new XorShiftRng. This will panic if `seed` is entirely 0.\n-    fn from_seed(seed: [u32, .. 4]) -> XorShiftRng {\n+    fn from_seed(seed: [u32; 4]) -> XorShiftRng {\n         assert!(!seed.iter().all(|&x| x == 0),\n                 \"XorShiftRng::from_seed called with an all zero seed.\");\n "}, {"sha": "5bfe7e15a930764c25dfbb9a52cbff1ff0fea56a", "filename": "src/librbml/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibrbml%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibrbml%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrbml%2Flib.rs?ref=cd614164e692cca3a1460737f581fcb6d4630baf", "patch": "@@ -200,7 +200,7 @@ pub mod reader {\n         // the most significant bit is set, the second most significant bit is set etc. we can\n         // replace up to three \"and+branch\" with a single table lookup which gives us a measured\n         // speedup of around 2x on x86_64.\n-        static SHIFT_MASK_TABLE: [(uint, u32), ..16] = [\n+        static SHIFT_MASK_TABLE: [(uint, u32); 16] = [\n             (0, 0x0), (0, 0x0fffffff),\n             (8, 0x1fffff), (8, 0x1fffff),\n             (16, 0x3fff), (16, 0x3fff), (16, 0x3fff), (16, 0x3fff),"}, {"sha": "0baa5e6c24f22ab1efdc6c3538c6f0f4a328d07c", "filename": "src/libregex_macros/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibregex_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibregex_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex_macros%2Flib.rs?ref=cd614164e692cca3a1460737f581fcb6d4630baf", "patch": "@@ -169,7 +169,7 @@ fn exec<'t>(which: ::regex::native::MatchKind, input: &'t str,\n         chars: CharReader::new(input),\n     }.run(start, end);\n \n-    type Captures = [Option<uint>, ..$num_cap_locs];\n+    type Captures = [Option<uint>; $num_cap_locs];\n \n     struct Nfa<'t> {\n         which: MatchKind,\n@@ -250,8 +250,8 @@ fn exec<'t>(which: ::regex::native::MatchKind, input: &'t str,\n \n     struct Threads {\n         which: MatchKind,\n-        queue: [Thread, ..$num_insts],\n-        sparse: [uint, ..$num_insts],\n+        queue: [Thread; $num_insts],\n+        sparse: [uint; $num_insts],\n         size: uint,\n     }\n "}, {"sha": "1ebb18f976e4c247962397732ca2b84c9450fa0e", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=cd614164e692cca3a1460737f581fcb6d4630baf", "patch": "@@ -1085,7 +1085,7 @@ impl<'d,'t,'tcx,TYPER:mc::Typer<'tcx>> ExprUseVisitor<'d,'t,'tcx,TYPER> {\n                         // Note: We declare here that the borrow\n                         // occurs upon entering the `[...]`\n                         // pattern. This implies that something like\n-                        // `[a, ..b]` where `a` is a move is illegal,\n+                        // `[a; b]` where `a` is a move is illegal,\n                         // because the borrow is already in effect.\n                         // In fact such a move would be safe-ish, but\n                         // it effectively *requires* that we use the"}, {"sha": "da00d737b473e785aa807d5ecf6fe8155441b522", "filename": "src/librustc/middle/graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibrustc%2Fmiddle%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibrustc%2Fmiddle%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fgraph.rs?ref=cd614164e692cca3a1460737f581fcb6d4630baf", "patch": "@@ -42,12 +42,12 @@ pub struct Graph<N,E> {\n }\n \n pub struct Node<N> {\n-    first_edge: [EdgeIndex, ..2], // see module comment\n+    first_edge: [EdgeIndex; 2], // see module comment\n     pub data: N,\n }\n \n pub struct Edge<E> {\n-    next_edge: [EdgeIndex, ..2], // see module comment\n+    next_edge: [EdgeIndex; 2], // see module comment\n     source: NodeIndex,\n     target: NodeIndex,\n     pub data: E,"}, {"sha": "3c5459ff3bc754cf19a7032e540359978c418d82", "filename": "src/librustc/middle/subst.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibrustc%2Fmiddle%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibrustc%2Fmiddle%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fsubst.rs?ref=cd614164e692cca3a1460737f581fcb6d4630baf", "patch": "@@ -188,7 +188,7 @@ pub enum ParamSpace {\n }\n \n impl ParamSpace {\n-    pub fn all() -> [ParamSpace, ..3] {\n+    pub fn all() -> [ParamSpace; 3] {\n         [TypeSpace, SelfSpace, FnSpace]\n     }\n "}, {"sha": "1e55f442fb9ac97df9d16266671836d80a75c15e", "filename": "src/librustc_back/sha2.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibrustc_back%2Fsha2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibrustc_back%2Fsha2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Fsha2.rs?ref=cd614164e692cca3a1460737f581fcb6d4630baf", "patch": "@@ -111,15 +111,15 @@ trait FixedBuffer {\n \n /// A FixedBuffer of 64 bytes useful for implementing Sha256 which has a 64 byte blocksize.\n struct FixedBuffer64 {\n-    buffer: [u8, ..64],\n+    buffer: [u8; 64],\n     buffer_idx: uint,\n }\n \n impl FixedBuffer64 {\n     /// Create a new FixedBuffer64\n     fn new() -> FixedBuffer64 {\n         return FixedBuffer64 {\n-            buffer: [0u8, ..64],\n+            buffer: [0u8; 64],\n             buffer_idx: 0\n         };\n     }\n@@ -284,7 +284,7 @@ struct Engine256State {\n }\n \n impl Engine256State {\n-    fn new(h: &[u32, ..8]) -> Engine256State {\n+    fn new(h: &[u32; 8]) -> Engine256State {\n         return Engine256State {\n             h0: h[0],\n             h1: h[1],\n@@ -297,7 +297,7 @@ impl Engine256State {\n         };\n     }\n \n-    fn reset(&mut self, h: &[u32, ..8]) {\n+    fn reset(&mut self, h: &[u32; 8]) {\n         self.h0 = h[0];\n         self.h1 = h[1];\n         self.h2 = h[2];\n@@ -342,7 +342,7 @@ impl Engine256State {\n         let mut g = self.h6;\n         let mut h = self.h7;\n \n-        let mut w = [0u32, ..64];\n+        let mut w = [0u32; 64];\n \n         // Sha-512 and Sha-256 use basically the same calculations which are implemented\n         // by these macros. Inlining the calculations seems to result in better generated code.\n@@ -408,7 +408,7 @@ impl Engine256State {\n     }\n }\n \n-static K32: [u32, ..64] = [\n+static K32: [u32; 64] = [\n     0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,\n     0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n     0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,\n@@ -437,7 +437,7 @@ struct Engine256 {\n }\n \n impl Engine256 {\n-    fn new(h: &[u32, ..8]) -> Engine256 {\n+    fn new(h: &[u32; 8]) -> Engine256 {\n         return Engine256 {\n             length_bits: 0,\n             buffer: FixedBuffer64::new(),\n@@ -446,7 +446,7 @@ impl Engine256 {\n         }\n     }\n \n-    fn reset(&mut self, h: &[u32, ..8]) {\n+    fn reset(&mut self, h: &[u32; 8]) {\n         self.length_bits = 0;\n         self.buffer.reset();\n         self.state.reset(h);\n@@ -515,7 +515,7 @@ impl Digest for Sha256 {\n     fn output_bits(&self) -> uint { 256 }\n }\n \n-static H256: [u32, ..8] = [\n+static H256: [u32; 8] = [\n     0x6a09e667,\n     0xbb67ae85,\n     0x3c6ef372,\n@@ -658,7 +658,7 @@ mod bench {\n     #[bench]\n     pub fn sha256_10(b: &mut Bencher) {\n         let mut sh = Sha256::new();\n-        let bytes = [1u8, ..10];\n+        let bytes = [1u8; 10];\n         b.iter(|| {\n             sh.input(&bytes);\n         });\n@@ -668,7 +668,7 @@ mod bench {\n     #[bench]\n     pub fn sha256_1k(b: &mut Bencher) {\n         let mut sh = Sha256::new();\n-        let bytes = [1u8, ..1024];\n+        let bytes = [1u8; 1024];\n         b.iter(|| {\n             sh.input(&bytes);\n         });\n@@ -678,7 +678,7 @@ mod bench {\n     #[bench]\n     pub fn sha256_64k(b: &mut Bencher) {\n         let mut sh = Sha256::new();\n-        let bytes = [1u8, ..65536];\n+        let bytes = [1u8; 65536];\n         b.iter(|| {\n             sh.input(&bytes);\n         });"}, {"sha": "ac2ab56b2c5f8edbb492b5d27787b8eb821bd84a", "filename": "src/librustc_borrowck/borrowck/doc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibrustc_borrowck%2Fborrowck%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibrustc_borrowck%2Fborrowck%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fdoc.rs?ref=cd614164e692cca3a1460737f581fcb6d4630baf", "patch": "@@ -1152,7 +1152,7 @@\n //! the following:\n //!\n //! ```rust\n-//! fn foo(a: [D, ..10], i: uint) -> D {\n+//! fn foo(a: [D; 10], i: uint) -> D {\n //!     a[i]\n //! }\n //! ```\n@@ -1168,7 +1168,7 @@\n //! would arise is the following:\n //!\n //! ```rust\n-//! fn foo(a: [D, ..10], b: [D, ..10], i: uint, t: bool) -> D {\n+//! fn foo(a: [D; 10], b: [D; 10], i: uint, t: bool) -> D {\n //!     if t {\n //!         a[i]\n //!     } else {\n@@ -1182,7 +1182,7 @@\n //! ```\n //!\n //! There are a number of ways that the trans backend could choose to\n-//! compile this (e.g. a `[bool, ..10]` array for each such moved array;\n+//! compile this (e.g. a `[bool; 10]` array for each such moved array;\n //! or an `Option<uint>` for each moved array).  From the viewpoint of the\n //! borrow-checker, the important thing is to record what kind of fragment\n //! is implied by the relevant moves."}, {"sha": "b39dbd71117e818b933e64f2b0d9aaeb134944cc", "filename": "src/librustc_trans/trans/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibrustc_trans%2Ftrans%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibrustc_trans%2Ftrans%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbuilder.rs?ref=cd614164e692cca3a1460737f581fcb6d4630baf", "patch": "@@ -547,7 +547,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         // Small vector optimization. This should catch 100% of the cases that\n         // we care about.\n         if ixs.len() < 16 {\n-            let mut small_vec = [ C_i32(self.ccx, 0), ..16 ];\n+            let mut small_vec = [ C_i32(self.ccx, 0); 16 ];\n             for (small_vec_e, &ix) in small_vec.iter_mut().zip(ixs.iter()) {\n                 *small_vec_e = C_i32(self.ccx, ix as i32);\n             }"}, {"sha": "8ac427dd06124c75c93d457707cd3fc210e2e6ce", "filename": "src/librustc_trans/trans/cleanup.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibrustc_trans%2Ftrans%2Fcleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibrustc_trans%2Ftrans%2Fcleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcleanup.rs?ref=cd614164e692cca3a1460737f581fcb6d4630baf", "patch": "@@ -63,7 +63,7 @@ pub const EXIT_MAX: uint = 2;\n pub enum CleanupScopeKind<'blk, 'tcx: 'blk> {\n     CustomScopeKind,\n     AstScopeKind(ast::NodeId),\n-    LoopScopeKind(ast::NodeId, [Block<'blk, 'tcx>, ..EXIT_MAX])\n+    LoopScopeKind(ast::NodeId, [Block<'blk, 'tcx>; EXIT_MAX])\n }\n \n impl<'blk, 'tcx: 'blk> fmt::Show for CleanupScopeKind<'blk, 'tcx> {\n@@ -146,7 +146,7 @@ impl<'blk, 'tcx> CleanupMethods<'blk, 'tcx> for FunctionContext<'blk, 'tcx> {\n \n     fn push_loop_cleanup_scope(&self,\n                                id: ast::NodeId,\n-                               exits: [Block<'blk, 'tcx>, ..EXIT_MAX]) {\n+                               exits: [Block<'blk, 'tcx>; EXIT_MAX]) {\n         debug!(\"push_loop_cleanup_scope({})\",\n                self.ccx.tcx().map.node_to_string(id));\n         assert_eq!(Some(id), self.top_ast_scope());\n@@ -1058,7 +1058,7 @@ pub trait CleanupMethods<'blk, 'tcx> {\n     fn push_ast_cleanup_scope(&self, id: NodeInfo);\n     fn push_loop_cleanup_scope(&self,\n                                id: ast::NodeId,\n-                               exits: [Block<'blk, 'tcx>, ..EXIT_MAX]);\n+                               exits: [Block<'blk, 'tcx>; EXIT_MAX]);\n     fn push_custom_cleanup_scope(&self) -> CustomScopeIndex;\n     fn push_custom_cleanup_scope_with_debug_loc(&self,\n                                                 debug_loc: NodeInfo)"}, {"sha": "d748266ed2ea9907a1aa24d0ca7a9a348f23798e", "filename": "src/librustc_typeck/check/method/doc.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fdoc.rs?ref=cd614164e692cca3a1460737f581fcb6d4630baf", "patch": "@@ -53,12 +53,12 @@\n //! The first thing that the probe phase does is to create a series of\n //! *steps*. This is done by progressively dereferencing the receiver type\n //! until it cannot be deref'd anymore, as well as applying an optional\n-//! \"unsize\" step. So if the receiver has type `Rc<Box<[T, ..3]>>`, this\n+//! \"unsize\" step. So if the receiver has type `Rc<Box<[T; 3]>>`, this\n //! might yield:\n //!\n-//!     Rc<Box<[T, ..3]>>\n-//!     Box<[T, ..3]>\n-//!     [T, ..3]\n+//!     Rc<Box<[T; 3]>>\n+//!     Box<[T; 3]>\n+//!     [T; 3]\n //!     [T]\n //!\n //! ### Candidate assembly\n@@ -96,13 +96,13 @@\n //! method.\n //!\n //! So, let's continue our example. Imagine that we were calling a method\n-//! `foo` with the receiver `Rc<Box<[T, ..3]>>` and there is a trait `Foo`\n+//! `foo` with the receiver `Rc<Box<[T; 3]>>` and there is a trait `Foo`\n //! that defines it with `&self` for the type `Rc<U>` as well as a method\n //! on the type `Box` that defines `Foo` but with `&mut self`. Then we\n //! might have two candidates:\n //!\n-//!     &Rc<Box<[T, ..3]>> from the impl of `Foo` for `Rc<U>` where `U=Box<T, ..3]>\n-//!     &mut Box<[T, ..3]>> from the inherent impl on `Box<U>` where `U=[T, ..3]`\n+//!     &Rc<Box<[T; 3]>> from the impl of `Foo` for `Rc<U>` where `U=Box<T; 3]>\n+//!     &mut Box<[T; 3]>> from the inherent impl on `Box<U>` where `U=[T; 3]`\n //!\n //! ### Candidate search\n //!\n@@ -112,9 +112,9 @@\n //! that makes any of the candidates match. We pick the first step where\n //! we find a match.\n //!\n-//! In the case of our example, the first step is `Rc<Box<[T, ..3]>>`,\n+//! In the case of our example, the first step is `Rc<Box<[T; 3]>>`,\n //! which does not itself match any candidate. But when we autoref it, we\n-//! get the type `&Rc<Box<[T, ..3]>>` which does match. We would then\n+//! get the type `&Rc<Box<[T; 3]>>` which does match. We would then\n //! recursively consider all where-clauses that appear on the impl: if\n //! those match (or we cannot rule out that they do), then this is the\n //! method we would pick. Otherwise, we would continue down the series of"}, {"sha": "ac2c4337907b105a01cc73973ac3e80c4b4ba0e0", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=cd614164e692cca3a1460737f581fcb6d4630baf", "patch": "@@ -4544,7 +4544,7 @@ impl<'tcx> Expectation<'tcx> {\n     /// In this case, the expected type for the `&[1, 2, 3]` expression is\n     /// `&[int]`. If however we were to say that `[1, 2, 3]` has the\n     /// expectation `ExpectHasType([int])`, that would be too strong --\n-    /// `[1, 2, 3]` does not have the type `[int]` but rather `[int, ..3]`.\n+    /// `[1, 2, 3]` does not have the type `[int]` but rather `[int; 3]`.\n     /// It is only the `&[1, 2, 3]` expression as a whole that can be coerced\n     /// to the type `&[int]`. Therefore, we propagate this more limited hint,\n     /// which still is useful, because it informs integer literals and the like."}, {"sha": "a17f3b31be3213139fe6cae69abe182a3612f35a", "filename": "src/librustc_typeck/variance.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibrustc_typeck%2Fvariance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibrustc_typeck%2Fvariance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance.rs?ref=cd614164e692cca3a1460737f581fcb6d4630baf", "patch": "@@ -407,9 +407,9 @@ struct ConstraintContext<'a, 'tcx: 'a> {\n     // are indexed by the `ParamKind` (type, lifetime, self). Note\n     // that there are no marker types for self, so the entries for\n     // self are always None.\n-    invariant_lang_items: [Option<ast::DefId>, ..2],\n-    covariant_lang_items: [Option<ast::DefId>, ..2],\n-    contravariant_lang_items: [Option<ast::DefId>, ..2],\n+    invariant_lang_items: [Option<ast::DefId>; 2],\n+    covariant_lang_items: [Option<ast::DefId>; 2],\n+    contravariant_lang_items: [Option<ast::DefId>; 2],\n     unsafe_lang_item: Option<ast::DefId>,\n \n     // These are pointers to common `ConstantTerm` instances\n@@ -432,9 +432,9 @@ struct Constraint<'a> {\n fn add_constraints_from_crate<'a, 'tcx>(terms_cx: TermsContext<'a, 'tcx>,\n                                         krate: &ast::Crate)\n                                         -> ConstraintContext<'a, 'tcx> {\n-    let mut invariant_lang_items = [None, ..2];\n-    let mut covariant_lang_items = [None, ..2];\n-    let mut contravariant_lang_items = [None, ..2];\n+    let mut invariant_lang_items = [None; 2];\n+    let mut covariant_lang_items = [None; 2];\n+    let mut contravariant_lang_items = [None; 2];\n \n     covariant_lang_items[TypeParam as uint] =\n         terms_cx.tcx.lang_items.covariant_type();"}, {"sha": "2c05524ea7f7b51b0133db598fc6bee72c75b8ce", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=cd614164e692cca3a1460737f581fcb6d4630baf", "patch": "@@ -80,7 +80,7 @@ struct hoedown_renderer {\n     blockhtml: Option<extern \"C\" fn(*mut hoedown_buffer, *const hoedown_buffer,\n                                     *mut libc::c_void)>,\n     header: Option<headerfn>,\n-    other: [libc::size_t, ..28],\n+    other: [libc::size_t; 28],\n }\n \n #[repr(C)]"}, {"sha": "54b390e0c3f0ab575e8eebc161c7496209b592aa", "filename": "src/libserialize/base64.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibserialize%2Fbase64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibserialize%2Fbase64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fbase64.rs?ref=cd614164e692cca3a1460737f581fcb6d4630baf", "patch": "@@ -314,7 +314,7 @@ mod tests {\n \n     #[test]\n     fn test_to_base64_crlf_line_break() {\n-        assert!(![0u8, ..1000].to_base64(Config {line_length: None, ..STANDARD})\n+        assert!(![0u8; 1000].to_base64(Config {line_length: None, ..STANDARD})\n                               .contains(\"\\r\\n\"));\n         assert_eq!(b\"foobar\".to_base64(Config {line_length: Some(4),\n                                                ..STANDARD}),\n@@ -323,7 +323,7 @@ mod tests {\n \n     #[test]\n     fn test_to_base64_lf_line_break() {\n-        assert!(![0u8, ..1000].to_base64(Config {line_length: None,\n+        assert!(![0u8; 1000].to_base64(Config {line_length: None,\n                                                  newline: Newline::LF,\n                                                  ..STANDARD})\n                               .as_slice()"}, {"sha": "8a9c2eebf3a5325db027fdad1c508e4dc58c09be", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=cd614164e692cca3a1460737f581fcb6d4630baf", "patch": "@@ -392,14 +392,14 @@ fn escape_str(writer: &mut io::Writer, v: &str) -> Result<(), io::IoError> {\n }\n \n fn escape_char(writer: &mut io::Writer, v: char) -> Result<(), io::IoError> {\n-    let mut buf = [0, .. 4];\n+    let mut buf = [0; 4];\n     let len = v.encode_utf8(&mut buf).unwrap();\n     escape_bytes(writer, buf[mut ..len])\n }\n \n fn spaces(wr: &mut io::Writer, mut n: uint) -> Result<(), io::IoError> {\n     const LEN: uint = 16;\n-    static BUF: [u8, ..LEN] = [b' ', ..LEN];\n+    static BUF: [u8; LEN] = [b' '; LEN];\n \n     while n >= LEN {\n         try!(wr.write(&BUF));"}, {"sha": "2c2b7313a7bb44a3e3ef053bae2a758329d9ce17", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=cd614164e692cca3a1460737f581fcb6d4630baf", "patch": "@@ -234,7 +234,7 @@ pub fn escape_default<F>(c: u8, mut f: F) where\n     }\n }\n \n-static ASCII_LOWERCASE_MAP: [u8, ..256] = [\n+static ASCII_LOWERCASE_MAP: [u8; 256] = [\n     0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,\n     0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,\n     0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,\n@@ -273,7 +273,7 @@ static ASCII_LOWERCASE_MAP: [u8, ..256] = [\n     0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff,\n ];\n \n-static ASCII_UPPERCASE_MAP: [u8, ..256] = [\n+static ASCII_UPPERCASE_MAP: [u8; 256] = [\n     0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,\n     0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,\n     0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,"}, {"sha": "46498610e560448242951eeb504e8af32414a3b6", "filename": "src/libstd/c_str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibstd%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibstd%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fc_str.rs?ref=cd614164e692cca3a1460737f581fcb6d4630baf", "patch": "@@ -454,7 +454,7 @@ unsafe fn with_c_str<T, F>(v: &[u8], checked: bool, f: F) -> T where\n     F: FnOnce(*const libc::c_char) -> T,\n {\n     let c_str = if v.len() < BUF_LEN {\n-        let mut buf: [u8, .. BUF_LEN] = mem::uninitialized();\n+        let mut buf: [u8; BUF_LEN] = mem::uninitialized();\n         slice::bytes::copy_memory(&mut buf, v);\n         buf[v.len()] = 0;\n "}, {"sha": "c5405601048cea55b9f88eb1eed3804d6474e297", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=cd614164e692cca3a1460737f581fcb6d4630baf", "patch": "@@ -39,7 +39,7 @@ use kinds::{Send,Sync};\n /// let file = File::open(&Path::new(\"message.txt\"));\n /// let mut reader = BufferedReader::new(file);\n ///\n-/// let mut buf = [0, ..100];\n+/// let mut buf = [0; 100];\n /// match reader.read(&mut buf) {\n ///     Ok(nread) => println!(\"Read {} bytes\", nread),\n ///     Err(e) => println!(\"error reading: {}\", e)\n@@ -326,7 +326,7 @@ impl<W: Reader> Reader for InternalBufferedWriter<W> {\n /// stream.write(\"hello, world\".as_bytes());\n /// stream.flush();\n ///\n-/// let mut buf = [0, ..100];\n+/// let mut buf = [0; 100];\n /// match stream.read(&mut buf) {\n ///     Ok(nread) => println!(\"Read {} bytes\", nread),\n ///     Err(e) => println!(\"error reading: {}\", e)"}, {"sha": "077f75e2edd6f9e77bf88c55dd93d9bbb8f9c49c", "filename": "src/libstd/io/comm_adapters.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibstd%2Fio%2Fcomm_adapters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibstd%2Fio%2Fcomm_adapters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fcomm_adapters.rs?ref=cd614164e692cca3a1460737f581fcb6d4630baf", "patch": "@@ -29,7 +29,7 @@ use vec::Vec;\n /// # drop(tx);\n /// let mut reader = ChanReader::new(rx);\n ///\n-/// let mut buf = [0u8, ..100];\n+/// let mut buf = [0u8; 100];\n /// match reader.read(&mut buf) {\n ///     Ok(nread) => println!(\"Read {} bytes\", nread),\n ///     Err(e) => println!(\"read error: {}\", e),\n@@ -171,7 +171,7 @@ mod test {\n         }).detach();\n \n         let mut reader = ChanReader::new(rx);\n-        let mut buf = [0u8, ..3];\n+        let mut buf = [0u8; 3];\n \n         assert_eq!(Ok(0), reader.read(&mut []));\n "}, {"sha": "51e09e547e3eef4fb77642fffd8b5344940a1ee9", "filename": "src/libstd/io/extensions.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibstd%2Fio%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibstd%2Fio%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fextensions.rs?ref=cd614164e692cca3a1460737f581fcb6d4630baf", "patch": "@@ -86,9 +86,9 @@ pub fn u64_to_le_bytes<T, F>(n: u64, size: uint, f: F) -> T where\n     assert!(size <= 8u);\n     match size {\n       1u => f(&[n as u8]),\n-      2u => f(unsafe { & transmute::<_, [u8, ..2]>((n as u16).to_le()) }),\n-      4u => f(unsafe { & transmute::<_, [u8, ..4]>((n as u32).to_le()) }),\n-      8u => f(unsafe { & transmute::<_, [u8, ..8]>(n.to_le()) }),\n+      2u => f(unsafe { & transmute::<_, [u8; 2]>((n as u16).to_le()) }),\n+      4u => f(unsafe { & transmute::<_, [u8; 4]>((n as u32).to_le()) }),\n+      8u => f(unsafe { & transmute::<_, [u8; 8]>(n.to_le()) }),\n       _ => {\n \n         let mut bytes = vec!();\n@@ -127,9 +127,9 @@ pub fn u64_to_be_bytes<T, F>(n: u64, size: uint, f: F) -> T where\n     assert!(size <= 8u);\n     match size {\n       1u => f(&[n as u8]),\n-      2u => f(unsafe { & transmute::<_, [u8, ..2]>((n as u16).to_be()) }),\n-      4u => f(unsafe { & transmute::<_, [u8, ..4]>((n as u32).to_be()) }),\n-      8u => f(unsafe { & transmute::<_, [u8, ..8]>(n.to_be()) }),\n+      2u => f(unsafe { & transmute::<_, [u8; 2]>((n as u16).to_be()) }),\n+      4u => f(unsafe { & transmute::<_, [u8; 4]>((n as u32).to_be()) }),\n+      8u => f(unsafe { & transmute::<_, [u8; 8]>(n.to_be()) }),\n       _ => {\n         let mut bytes = vec!();\n         let mut i = size;\n@@ -164,7 +164,7 @@ pub fn u64_from_be_bytes(data: &[u8], start: uint, size: uint) -> u64 {\n         panic!(\"index out of bounds\");\n     }\n \n-    let mut buf = [0u8, ..8];\n+    let mut buf = [0u8; 8];\n     unsafe {\n         let ptr = data.as_ptr().offset(start as int);\n         let out = buf.as_mut_ptr();"}, {"sha": "7fa6ebc6e3bac0837633496428d44f9f6721d7ab", "filename": "src/libstd/io/fs.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibstd%2Fio%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibstd%2Fio%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ffs.rs?ref=cd614164e692cca3a1460737f581fcb6d4630baf", "patch": "@@ -882,7 +882,7 @@ mod test {\n         }\n         {\n             let mut read_stream = File::open_mode(filename, Open, Read);\n-            let mut read_buf = [0, .. 1028];\n+            let mut read_buf = [0; 1028];\n             let read_str = match check!(read_stream.read(&mut read_buf)) {\n                 -1|0 => panic!(\"shouldn't happen\"),\n                 n => str::from_utf8(read_buf[..n]).unwrap().to_string()\n@@ -922,7 +922,7 @@ mod test {\n     #[test]\n     fn file_test_io_non_positional_read() {\n         let message: &str = \"ten-four\";\n-        let mut read_mem = [0, .. 8];\n+        let mut read_mem = [0; 8];\n         let tmpdir = tmpdir();\n         let filename = &tmpdir.join(\"file_rt_io_file_test_positional.txt\");\n         {\n@@ -948,7 +948,7 @@ mod test {\n     #[test]\n     fn file_test_io_seek_and_tell_smoke_test() {\n         let message = \"ten-four\";\n-        let mut read_mem = [0, .. 4];\n+        let mut read_mem = [0; 4];\n         let set_cursor = 4 as u64;\n         let mut tell_pos_pre_read;\n         let mut tell_pos_post_read;\n@@ -978,7 +978,7 @@ mod test {\n         let overwrite_msg =    \"-the-bar!!\";\n         let final_msg =     \"foo-the-bar!!\";\n         let seek_idx = 3i;\n-        let mut read_mem = [0, .. 13];\n+        let mut read_mem = [0; 13];\n         let tmpdir = tmpdir();\n         let filename = &tmpdir.join(\"file_rt_io_file_test_seek_and_write.txt\");\n         {\n@@ -1003,7 +1003,7 @@ mod test {\n         let chunk_one: &str = \"qwer\";\n         let chunk_two: &str = \"asdf\";\n         let chunk_three: &str = \"zxcv\";\n-        let mut read_mem = [0, .. 4];\n+        let mut read_mem = [0; 4];\n         let tmpdir = tmpdir();\n         let filename = &tmpdir.join(\"file_rt_io_file_test_seek_shakedown.txt\");\n         {\n@@ -1105,7 +1105,7 @@ mod test {\n             check!(w.write(msg));\n         }\n         let files = check!(readdir(dir));\n-        let mut mem = [0u8, .. 4];\n+        let mut mem = [0u8; 4];\n         for f in files.iter() {\n             {\n                 let n = f.filestem_str();\n@@ -1137,7 +1137,7 @@ mod test {\n         check!(File::create(&dir2.join(\"14\")));\n \n         let mut files = check!(walk_dir(dir));\n-        let mut cur = [0u8, .. 2];\n+        let mut cur = [0u8; 2];\n         for f in files {\n             let stem = f.filestem_str().unwrap();\n             let root = stem.as_bytes()[0] - b'0';\n@@ -1546,7 +1546,7 @@ mod test {\n     fn binary_file() {\n         use rand::{StdRng, Rng};\n \n-        let mut bytes = [0, ..1024];\n+        let mut bytes = [0; 1024];\n         StdRng::new().ok().unwrap().fill_bytes(&mut bytes);\n \n         let tmpdir = tmpdir();"}, {"sha": "f8ea373f8f456794abda187489bbb7a42200e619", "filename": "src/libstd/io/mem.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibstd%2Fio%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibstd%2Fio%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmem.rs?ref=cd614164e692cca3a1460737f581fcb6d4630baf", "patch": "@@ -252,7 +252,7 @@ impl<'a> Buffer for &'a [u8] {\n /// # #![allow(unused_must_use)]\n /// use std::io::BufWriter;\n ///\n-/// let mut buf = [0, ..4];\n+/// let mut buf = [0; 4];\n /// {\n ///     let mut w = BufWriter::new(&mut buf);\n ///     w.write(&[0, 1, 2]);\n@@ -427,7 +427,7 @@ mod test {\n \n     #[test]\n     fn test_buf_writer() {\n-        let mut buf = [0 as u8, ..9];\n+        let mut buf = [0 as u8; 9];\n         {\n             let mut writer = BufWriter::new(&mut buf);\n             assert_eq!(writer.tell(), Ok(0));\n@@ -448,7 +448,7 @@ mod test {\n \n     #[test]\n     fn test_buf_writer_seek() {\n-        let mut buf = [0 as u8, ..8];\n+        let mut buf = [0 as u8; 8];\n         {\n             let mut writer = BufWriter::new(&mut buf);\n             assert_eq!(writer.tell(), Ok(0));\n@@ -477,7 +477,7 @@ mod test {\n \n     #[test]\n     fn test_buf_writer_error() {\n-        let mut buf = [0 as u8, ..2];\n+        let mut buf = [0 as u8; 2];\n         let mut writer = BufWriter::new(&mut buf);\n         writer.write(&[0]).unwrap();\n \n@@ -498,7 +498,7 @@ mod test {\n         assert_eq!(reader.tell(), Ok(1));\n         let b: &[_] = &[0];\n         assert_eq!(buf, b);\n-        let mut buf = [0, ..4];\n+        let mut buf = [0; 4];\n         assert_eq!(reader.read(&mut buf), Ok(4));\n         assert_eq!(reader.tell(), Ok(5));\n         let b: &[_] = &[1, 2, 3, 4];\n@@ -524,7 +524,7 @@ mod test {\n         assert_eq!(reader.len(), 7);\n         let b: &[_] = &[0];\n         assert_eq!(buf.as_slice(), b);\n-        let mut buf = [0, ..4];\n+        let mut buf = [0; 4];\n         assert_eq!(reader.read(&mut buf), Ok(4));\n         assert_eq!(reader.len(), 3);\n         let b: &[_] = &[1, 2, 3, 4];\n@@ -551,7 +551,7 @@ mod test {\n         assert_eq!(reader.tell(), Ok(1));\n         let b: &[_] = &[0];\n         assert_eq!(buf, b);\n-        let mut buf = [0, ..4];\n+        let mut buf = [0; 4];\n         assert_eq!(reader.read(&mut buf), Ok(4));\n         assert_eq!(reader.tell(), Ok(5));\n         let b: &[_] = &[1, 2, 3, 4];\n@@ -648,7 +648,7 @@ mod test {\n     #[test]\n     fn io_read_at_least() {\n         let mut r = MemReader::new(vec![1, 2, 3, 4, 5, 6, 7, 8]);\n-        let mut buf = [0, ..3];\n+        let mut buf = [0; 3];\n         assert!(r.read_at_least(buf.len(), &mut buf).is_ok());\n         let b: &[_] = &[1, 2, 3];\n         assert_eq!(buf, b);\n@@ -721,13 +721,13 @@ mod test {\n     #[bench]\n     fn bench_mem_reader(b: &mut Bencher) {\n         b.iter(|| {\n-            let buf = [5 as u8, ..100].to_vec();\n+            let buf = [5 as u8; 100].to_vec();\n             {\n                 let mut rdr = MemReader::new(buf);\n                 for _i in range(0u, 10) {\n-                    let mut buf = [0 as u8, .. 10];\n+                    let mut buf = [0 as u8; 10];\n                     rdr.read(&mut buf).unwrap();\n-                    assert_eq!(buf.as_slice(), [5, .. 10].as_slice());\n+                    assert_eq!(buf.as_slice(), [5; 10].as_slice());\n                 }\n             }\n         });\n@@ -736,27 +736,27 @@ mod test {\n     #[bench]\n     fn bench_buf_writer(b: &mut Bencher) {\n         b.iter(|| {\n-            let mut buf = [0 as u8, ..100];\n+            let mut buf = [0 as u8; 100];\n             {\n                 let mut wr = BufWriter::new(&mut buf);\n                 for _i in range(0u, 10) {\n-                    wr.write(&[5, .. 10]).unwrap();\n+                    wr.write(&[5; 10]).unwrap();\n                 }\n             }\n-            assert_eq!(buf.as_slice(), [5, .. 100].as_slice());\n+            assert_eq!(buf.as_slice(), [5; 100].as_slice());\n         });\n     }\n \n     #[bench]\n     fn bench_buf_reader(b: &mut Bencher) {\n         b.iter(|| {\n-            let buf = [5 as u8, ..100];\n+            let buf = [5 as u8; 100];\n             {\n                 let mut rdr = BufReader::new(&buf);\n                 for _i in range(0u, 10) {\n-                    let mut buf = [0 as u8, .. 10];\n+                    let mut buf = [0 as u8; 10];\n                     rdr.read(&mut buf).unwrap();\n-                    assert_eq!(buf, [5, .. 10]);\n+                    assert_eq!(buf, [5; 10]);\n                 }\n             }\n         });"}, {"sha": "e8b852ee492b95c02e42ae4bc47daf4bf7d19449", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=cd614164e692cca3a1460737f581fcb6d4630baf", "patch": "@@ -1081,7 +1081,7 @@ pub trait Writer {\n     /// Write a single char, encoded as UTF-8.\n     #[inline]\n     fn write_char(&mut self, c: char) -> IoResult<()> {\n-        let mut buf = [0u8, ..4];\n+        let mut buf = [0u8; 4];\n         let n = c.encode_utf8(buf.as_mut_slice()).unwrap_or(0);\n         self.write(buf[..n])\n     }\n@@ -1968,7 +1968,7 @@ mod tests {\n     fn test_read_at_least() {\n         let mut r = BadReader::new(MemReader::new(b\"hello, world!\".to_vec()),\n                                    vec![GoodBehavior(uint::MAX)]);\n-        let buf = &mut [0u8, ..5];\n+        let buf = &mut [0u8; 5];\n         assert!(r.read_at_least(1, buf).unwrap() >= 1);\n         assert!(r.read_exact(5).unwrap().len() == 5); // read_exact uses read_at_least\n         assert!(r.read_at_least(0, buf).is_ok());"}, {"sha": "49ab9ddb92487a6c24038e54a910f2bbd830ac98", "filename": "src/libstd/io/net/ip.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibstd%2Fio%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibstd%2Fio%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Fip.rs?ref=cd614164e692cca3a1460737f581fcb6d4630baf", "patch": "@@ -223,7 +223,7 @@ impl<'a> Parser<'a> {\n     }\n \n     fn read_ipv4_addr_impl(&mut self) -> Option<IpAddr> {\n-        let mut bs = [0u8, ..4];\n+        let mut bs = [0u8; 4];\n         let mut i = 0;\n         while i < 4 {\n             if i != 0 && self.read_given_char('.').is_none() {\n@@ -248,13 +248,13 @@ impl<'a> Parser<'a> {\n     fn read_ipv6_addr_impl(&mut self) -> Option<IpAddr> {\n         fn ipv6_addr_from_head_tail(head: &[u16], tail: &[u16]) -> IpAddr {\n             assert!(head.len() + tail.len() <= 8);\n-            let mut gs = [0u16, ..8];\n+            let mut gs = [0u16; 8];\n             gs.clone_from_slice(head);\n             gs.slice_mut(8 - tail.len(), 8).clone_from_slice(tail);\n             Ipv6Addr(gs[0], gs[1], gs[2], gs[3], gs[4], gs[5], gs[6], gs[7])\n         }\n \n-        fn read_groups(p: &mut Parser, groups: &mut [u16, ..8], limit: uint) -> (uint, bool) {\n+        fn read_groups(p: &mut Parser, groups: &mut [u16; 8], limit: uint) -> (uint, bool) {\n             let mut i = 0;\n             while i < limit {\n                 if i < limit - 1 {\n@@ -291,7 +291,7 @@ impl<'a> Parser<'a> {\n             (i, false)\n         }\n \n-        let mut head = [0u16, ..8];\n+        let mut head = [0u16; 8];\n         let (head_size, head_ipv4) = read_groups(self, &mut head, 8);\n \n         if head_size == 8 {\n@@ -310,7 +310,7 @@ impl<'a> Parser<'a> {\n             return None;\n         }\n \n-        let mut tail = [0u16, ..8];\n+        let mut tail = [0u16; 8];\n         let (tail_size, _) = read_groups(self, &mut tail, 8 - head_size);\n         Some(ipv6_addr_from_head_tail(head[..head_size], tail[..tail_size]))\n     }"}, {"sha": "6ce66c3273bd6c2acb64ab0af2377de344bb3952", "filename": "src/libstd/io/net/pipe.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibstd%2Fio%2Fnet%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibstd%2Fio%2Fnet%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Fpipe.rs?ref=cd614164e692cca3a1460737f581fcb6d4630baf", "patch": "@@ -672,7 +672,7 @@ mod tests {\n \n         s.set_timeout(Some(20));\n         for i in range(0u, 1001) {\n-            match s.write(&[0, .. 128 * 1024]) {\n+            match s.write(&[0; 128 * 1024]) {\n                 Ok(()) | Err(IoError { kind: ShortWrite(..), .. }) => {},\n                 Err(IoError { kind: TimedOut, .. }) => break,\n                 Err(e) => panic!(\"{}\", e),\n@@ -701,7 +701,7 @@ mod tests {\n             rx.recv();\n             let mut amt = 0;\n             while amt < 100 * 128 * 1024 {\n-                match s.read(&mut [0, ..128 * 1024]) {\n+                match s.read(&mut [0;128 * 1024]) {\n                     Ok(n) => { amt += n; }\n                     Err(e) => panic!(\"{}\", e),\n                 }\n@@ -716,7 +716,7 @@ mod tests {\n \n         tx.send(());\n         for _ in range(0u, 100) {\n-            assert!(s.write(&[0, ..128 * 1024]).is_ok());\n+            assert!(s.write(&[0;128 * 1024]).is_ok());\n         }\n     }\n \n@@ -735,7 +735,7 @@ mod tests {\n         let mut s = a.accept().unwrap();\n         s.set_write_timeout(Some(20));\n         for i in range(0u, 1001) {\n-            match s.write(&[0, .. 128 * 1024]) {\n+            match s.write(&[0; 128 * 1024]) {\n                 Ok(()) | Err(IoError { kind: ShortWrite(..), .. }) => {},\n                 Err(IoError { kind: TimedOut, .. }) => break,\n                 Err(e) => panic!(\"{}\", e),"}, {"sha": "826f492d85d3135f061963b85c23c9b820080e66", "filename": "src/libstd/io/net/tcp.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs?ref=cd614164e692cca3a1460737f581fcb6d4630baf", "patch": "@@ -979,7 +979,7 @@ mod test {\n \n         rx.recv();\n         let mut c = TcpStream::connect(addr).unwrap();\n-        let mut b = [0, ..10];\n+        let mut b = [0; 10];\n         assert_eq!(c.read(&mut b), Ok(1));\n         c.write(&[1]).unwrap();\n         rx.recv();\n@@ -1256,7 +1256,7 @@ mod test {\n \n         s.set_timeout(Some(20));\n         for i in range(0i, 1001) {\n-            match s.write(&[0, .. 128 * 1024]) {\n+            match s.write(&[0; 128 * 1024]) {\n                 Ok(()) | Err(IoError { kind: ShortWrite(..), .. }) => {},\n                 Err(IoError { kind: TimedOut, .. }) => break,\n                 Err(e) => panic!(\"{}\", e),\n@@ -1280,7 +1280,7 @@ mod test {\n             rx.recv();\n             let mut amt = 0;\n             while amt < 100 * 128 * 1024 {\n-                match s.read(&mut [0, ..128 * 1024]) {\n+                match s.read(&mut [0;128 * 1024]) {\n                     Ok(n) => { amt += n; }\n                     Err(e) => panic!(\"{}\", e),\n                 }\n@@ -1295,7 +1295,7 @@ mod test {\n \n         tx.send(());\n         for _ in range(0i, 100) {\n-            assert!(s.write(&[0, ..128 * 1024]).is_ok());\n+            assert!(s.write(&[0;128 * 1024]).is_ok());\n         }\n     }\n \n@@ -1314,7 +1314,7 @@ mod test {\n         let mut s = a.accept().unwrap();\n         s.set_write_timeout(Some(20));\n         for i in range(0i, 1001) {\n-            match s.write(&[0, .. 128 * 1024]) {\n+            match s.write(&[0; 128 * 1024]) {\n                 Ok(()) | Err(IoError { kind: ShortWrite(..), .. }) => {},\n                 Err(IoError { kind: TimedOut, .. }) => break,\n                 Err(e) => panic!(\"{}\", e),"}, {"sha": "11c2f956c355259d922bba4c5eecceab72f55bf0", "filename": "src/libstd/io/net/udp.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibstd%2Fio%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibstd%2Fio%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Fudp.rs?ref=cd614164e692cca3a1460737f581fcb6d4630baf", "patch": "@@ -45,7 +45,7 @@ use sys_common;\n ///         Err(e) => panic!(\"couldn't bind socket: {}\", e),\n ///     };\n ///\n-///     let mut buf = [0, ..10];\n+///     let mut buf = [0; 10];\n ///     match socket.recv_from(&mut buf) {\n ///         Ok((amt, src)) => {\n ///             // Send a reply to the socket we received data from\n@@ -599,7 +599,7 @@ mod test {\n \n         a.set_write_timeout(Some(1000));\n         for _ in range(0u, 100) {\n-            match a.send_to(&[0, ..4*1024], addr2) {\n+            match a.send_to(&[0;4*1024], addr2) {\n                 Ok(()) | Err(IoError { kind: ShortWrite(..), .. }) => {},\n                 Err(IoError { kind: TimedOut, .. }) => break,\n                 Err(e) => panic!(\"other error: {}\", e),"}, {"sha": "93465d5510b87893a2373627362686da901218fb", "filename": "src/libstd/io/pipe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibstd%2Fio%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibstd%2Fio%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fpipe.rs?ref=cd614164e692cca3a1460737f581fcb6d4630baf", "patch": "@@ -129,7 +129,7 @@ mod test {\n             rx.recv(); // don't close the pipe until the other read has finished\n         });\n \n-        let mut buf = [0, ..10];\n+        let mut buf = [0; 10];\n         input.read(&mut buf).unwrap();\n         tx.send(());\n     }"}, {"sha": "40941fda79c93821cd3a604fc7a1516f48c68d90", "filename": "src/libstd/io/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibstd%2Fio%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibstd%2Fio%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ftest.rs?ref=cd614164e692cca3a1460737f581fcb6d4630baf", "patch": "@@ -130,7 +130,7 @@ mod darwin_fd_limit {\n         use os::last_os_error;\n \n         // Fetch the kern.maxfilesperproc value\n-        let mut mib: [libc::c_int, ..2] = [CTL_KERN, KERN_MAXFILESPERPROC];\n+        let mut mib: [libc::c_int; 2] = [CTL_KERN, KERN_MAXFILESPERPROC];\n         let mut maxfiles: libc::c_int = 0;\n         let mut size: libc::size_t = size_of_val(&maxfiles) as libc::size_t;\n         if sysctl(&mut mib[0], 2, &mut maxfiles as *mut libc::c_int as *mut libc::c_void, &mut size,"}, {"sha": "9840412160d9fb431e33d0c5bb0f9e99291f7be8", "filename": "src/libstd/io/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibstd%2Fio%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibstd%2Fio%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Futil.rs?ref=cd614164e692cca3a1460737f581fcb6d4630baf", "patch": "@@ -103,7 +103,7 @@ impl Reader for ZeroReader {\n \n impl Buffer for ZeroReader {\n     fn fill_buf<'a>(&'a mut self) -> io::IoResult<&'a [u8]> {\n-        static DATA: [u8, ..64] = [0, ..64];\n+        static DATA: [u8; 64] = [0; 64];\n         Ok(DATA.as_slice())\n     }\n \n@@ -235,7 +235,7 @@ impl<R: Reader, W: Writer> Reader for TeeReader<R, W> {\n \n /// Copies all data from a `Reader` to a `Writer`.\n pub fn copy<R: Reader, W: Writer>(r: &mut R, w: &mut W) -> io::IoResult<()> {\n-    let mut buf = [0, ..super::DEFAULT_BUF_SIZE];\n+    let mut buf = [0; super::DEFAULT_BUF_SIZE];\n     loop {\n         let len = match r.read(&mut buf) {\n             Ok(len) => len,"}, {"sha": "febdf5f6118a58cbd485f78991f04b7d928f3c2b", "filename": "src/libstd/num/strconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibstd%2Fnum%2Fstrconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibstd%2Fnum%2Fstrconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fstrconv.rs?ref=cd614164e692cca3a1460737f581fcb6d4630baf", "patch": "@@ -104,7 +104,7 @@ fn int_to_str_bytes_common<T, F>(num: T, radix: uint, sign: SignFormat, mut f: F\n     // This is just for integral types, the largest of which is a u64. The\n     // smallest base that we can have is 2, so the most number of digits we're\n     // ever going to have is 64\n-    let mut buf = [0u8, ..64];\n+    let mut buf = [0u8; 64];\n     let mut cur = 0;\n \n     // Loop at least once to make sure at least a `0` gets emitted."}, {"sha": "e74f45f8f0a159d26f744a9ba40962673797e613", "filename": "src/libstd/num/uint_macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibstd%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibstd%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fuint_macros.rs?ref=cd614164e692cca3a1460737f581fcb6d4630baf", "patch": "@@ -38,7 +38,7 @@ pub fn to_str_bytes<U, F>(n: $T, radix: uint, f: F) -> U where\n     use io::{Writer, Seek};\n     // The radix can be as low as 2, so we need at least 64 characters for a\n     // base 2 number, and then we need another for a possible '-' character.\n-    let mut buf = [0u8, ..65];\n+    let mut buf = [0u8; 65];\n     let amt = {\n         let mut wr = ::io::BufWriter::new(&mut buf);\n         (write!(&mut wr, \"{}\", ::fmt::radix(n, radix as u8))).unwrap();"}, {"sha": "f665d150f387831334793ce6b9bda8dcc586d912", "filename": "src/libstd/rand/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibstd%2Frand%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibstd%2Frand%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fmod.rs?ref=cd614164e692cca3a1460737f581fcb6d4630baf", "patch": "@@ -669,7 +669,7 @@ mod bench {\n     #[bench]\n     fn rand_shuffle_100(b: &mut Bencher) {\n         let mut rng = weak_rng();\n-        let x : &mut[uint] = &mut [1,..100];\n+        let x : &mut[uint] = &mut [1; 100];\n         b.iter(|| {\n             rng.shuffle(x);\n         })"}, {"sha": "ca36f2d8997b1df67dc3f00468a55753a1243132", "filename": "src/libstd/rand/os.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibstd%2Frand%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibstd%2Frand%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fos.rs?ref=cd614164e692cca3a1460737f581fcb6d4630baf", "patch": "@@ -70,15 +70,15 @@ mod imp {\n     }\n \n     fn getrandom_next_u32() -> u32 {\n-        let mut buf: [u8, ..4] = [0u8, ..4];\n+        let mut buf: [u8; 4] = [0u8; 4];\n         getrandom_fill_bytes(&mut buf);\n-        unsafe { mem::transmute::<[u8, ..4], u32>(buf) }\n+        unsafe { mem::transmute::<[u8; 4], u32>(buf) }\n     }\n \n     fn getrandom_next_u64() -> u64 {\n-        let mut buf: [u8, ..8] = [0u8, ..8];\n+        let mut buf: [u8; 8] = [0u8; 8];\n         getrandom_fill_bytes(&mut buf);\n-        unsafe { mem::transmute::<[u8, ..8], u64>(buf) }\n+        unsafe { mem::transmute::<[u8; 8], u64>(buf) }\n     }\n \n     #[cfg(all(target_os = \"linux\",\n@@ -90,7 +90,7 @@ mod imp {\n         static GETRANDOM_AVAILABLE: AtomicBool = INIT_ATOMIC_BOOL;\n \n         if !GETRANDOM_CHECKED.load(Relaxed) {\n-            let mut buf: [u8, ..0] = [];\n+            let mut buf: [u8; 0] = [];\n             let result = getrandom(&mut buf);\n             let available = if result == -1 {\n                 let err = errno() as libc::c_int;\n@@ -217,12 +217,12 @@ mod imp {\n \n     impl Rng for OsRng {\n         fn next_u32(&mut self) -> u32 {\n-            let mut v = [0u8, .. 4];\n+            let mut v = [0u8; 4];\n             self.fill_bytes(&mut v);\n             unsafe { mem::transmute(v) }\n         }\n         fn next_u64(&mut self) -> u64 {\n-            let mut v = [0u8, .. 8];\n+            let mut v = [0u8; 8];\n             self.fill_bytes(&mut v);\n             unsafe { mem::transmute(v) }\n         }\n@@ -304,12 +304,12 @@ mod imp {\n \n     impl Rng for OsRng {\n         fn next_u32(&mut self) -> u32 {\n-            let mut v = [0u8, .. 4];\n+            let mut v = [0u8; 4];\n             self.fill_bytes(&mut v);\n             unsafe { mem::transmute(v) }\n         }\n         fn next_u64(&mut self) -> u64 {\n-            let mut v = [0u8, .. 8];\n+            let mut v = [0u8; 8];\n             self.fill_bytes(&mut v);\n             unsafe { mem::transmute(v) }\n         }\n@@ -351,7 +351,7 @@ mod test {\n         r.next_u32();\n         r.next_u64();\n \n-        let mut v = [0u8, .. 1000];\n+        let mut v = [0u8; 1000];\n         r.fill_bytes(&mut v);\n     }\n \n@@ -371,7 +371,7 @@ mod test {\n                 // as possible (XXX: is this a good test?)\n                 let mut r = OsRng::new().unwrap();\n                 Thread::yield_now();\n-                let mut v = [0u8, .. 1000];\n+                let mut v = [0u8; 1000];\n \n                 for _ in range(0u, 100) {\n                     r.next_u32();"}, {"sha": "15e63aa19eabc43312ffeae6ed3074d2cebe11cc", "filename": "src/libstd/rand/reader.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibstd%2Frand%2Freader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibstd%2Frand%2Freader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Freader.rs?ref=cd614164e692cca3a1460737f581fcb6d4630baf", "patch": "@@ -105,7 +105,7 @@ mod test {\n     #[test]\n     fn test_reader_rng_fill_bytes() {\n         let v = [1u8, 2, 3, 4, 5, 6, 7, 8];\n-        let mut w = [0u8, .. 8];\n+        let mut w = [0u8; 8];\n \n         let mut rng = ReaderRng::new(MemReader::new(v.as_slice().to_vec()));\n         rng.fill_bytes(&mut w);\n@@ -117,7 +117,7 @@ mod test {\n     #[should_fail]\n     fn test_reader_rng_insufficient_bytes() {\n         let mut rng = ReaderRng::new(MemReader::new(vec!()));\n-        let mut v = [0u8, .. 3];\n+        let mut v = [0u8; 3];\n         rng.fill_bytes(&mut v);\n     }\n }"}, {"sha": "4dbe878277da3d8efc2bc93495807954298773e6", "filename": "src/libstd/rt/libunwind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibstd%2Frt%2Flibunwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibstd%2Frt%2Flibunwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flibunwind.rs?ref=cd614164e692cca3a1460737f581fcb6d4630baf", "patch": "@@ -82,7 +82,7 @@ pub const unwinder_private_data_size: uint = 2;\n pub struct _Unwind_Exception {\n     pub exception_class: _Unwind_Exception_Class,\n     pub exception_cleanup: _Unwind_Exception_Cleanup_Fn,\n-    pub private: [_Unwind_Word, ..unwinder_private_data_size],\n+    pub private: [_Unwind_Word; unwinder_private_data_size],\n }\n \n pub enum _Unwind_Context {}"}, {"sha": "e0c512706e6a96b5fcdd5260748606cabd7ccecc", "filename": "src/libstd/rt/unwind.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibstd%2Frt%2Funwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibstd%2Frt%2Funwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Funwind.rs?ref=cd614164e692cca3a1460737f581fcb6d4630baf", "patch": "@@ -83,7 +83,7 @@ pub type Callback = fn(msg: &(Any + Send), file: &'static str, line: uint);\n //\n // For more information, see below.\n const MAX_CALLBACKS: uint = 16;\n-static CALLBACKS: [atomic::AtomicUint, ..MAX_CALLBACKS] =\n+static CALLBACKS: [atomic::AtomicUint; MAX_CALLBACKS] =\n         [atomic::INIT_ATOMIC_UINT, atomic::INIT_ATOMIC_UINT,\n          atomic::INIT_ATOMIC_UINT, atomic::INIT_ATOMIC_UINT,\n          atomic::INIT_ATOMIC_UINT, atomic::INIT_ATOMIC_UINT,\n@@ -168,7 +168,7 @@ fn rust_panic(cause: Box<Any + Send>) -> ! {\n             uwe: uw::_Unwind_Exception {\n                 exception_class: rust_exception_class(),\n                 exception_cleanup: exception_cleanup,\n-                private: [0, ..uw::unwinder_private_data_size],\n+                private: [0; uw::unwinder_private_data_size],\n             },\n             cause: Some(cause),\n         };"}, {"sha": "fee86e33455d40c086e96c835bc0c675eca5537f", "filename": "src/libstd/rt/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibstd%2Frt%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibstd%2Frt%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Futil.rs?ref=cd614164e692cca3a1460737f581fcb6d4630baf", "patch": "@@ -134,7 +134,7 @@ pub fn abort(args: fmt::Arguments) -> ! {\n     }\n \n     // Convert the arguments into a stack-allocated string\n-    let mut msg = [0u8, ..512];\n+    let mut msg = [0u8; 512];\n     let mut w = BufWriter { buf: &mut msg, pos: 0 };\n     let _ = write!(&mut w, \"{}\", args);\n     let msg = str::from_utf8(w.buf[mut ..w.pos]).unwrap_or(\"aborted\");"}, {"sha": "259c15b5f06347cbb93792023ecfe4e10afc0b17", "filename": "src/libstd/sys/common/net.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs?ref=cd614164e692cca3a1460737f581fcb6d4630baf", "patch": "@@ -310,7 +310,7 @@ pub fn get_address_name(addr: IpAddr) -> Result<String, IoError> {\n     let mut storage: libc::sockaddr_storage = unsafe { mem::zeroed() };\n     let len = addr_to_sockaddr(addr, &mut storage);\n \n-    let mut hostbuf = [0 as c_char, ..NI_MAXHOST];\n+    let mut hostbuf = [0 as c_char; NI_MAXHOST];\n \n     let res = unsafe {\n         getnameinfo(&storage as *const _ as *const libc::sockaddr, len,"}, {"sha": "9e26475f814b79d483b04438bfd55eb01524ece5", "filename": "src/libstd/sys/unix/backtrace.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibstd%2Fsys%2Funix%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibstd%2Fsys%2Funix%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fbacktrace.rs?ref=cd614164e692cca3a1460737f581fcb6d4630baf", "patch": "@@ -123,7 +123,7 @@ pub fn write(w: &mut Writer) -> IoResult<()> {\n     try!(writeln!(w, \"stack backtrace:\"));\n     // 100 lines should be enough\n     const SIZE: uint = 100;\n-    let mut buf: [*mut libc::c_void, ..SIZE] = unsafe {mem::zeroed()};\n+    let mut buf: [*mut libc::c_void; SIZE] = unsafe {mem::zeroed()};\n     let cnt = unsafe { backtrace(buf.as_mut_ptr(), SIZE as libc::c_int) as uint};\n \n     // skipping the first one as it is write itself\n@@ -320,7 +320,7 @@ fn print(w: &mut Writer, idx: int, addr: *mut libc::c_void) -> IoResult<()> {\n     //        tested if this is required or not.\n     unsafe fn init_state() -> *mut backtrace_state {\n         static mut STATE: *mut backtrace_state = 0 as *mut backtrace_state;\n-        static mut LAST_FILENAME: [libc::c_char, ..256] = [0, ..256];\n+        static mut LAST_FILENAME: [libc::c_char; 256] = [0; 256];\n         if !STATE.is_null() { return STATE }\n         let selfname = if cfg!(target_os = \"freebsd\") ||\n                           cfg!(target_os = \"dragonfly\") {"}, {"sha": "1bb8ed78177dc8e8735cef77dc5db511a3b2412f", "filename": "src/libstd/sys/unix/c.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibstd%2Fsys%2Funix%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibstd%2Fsys%2Funix%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fc.rs?ref=cd614164e692cca3a1460737f581fcb6d4630baf", "patch": "@@ -94,7 +94,7 @@ mod select {\n \n     #[repr(C)]\n     pub struct fd_set {\n-        fds_bits: [i32, ..(FD_SETSIZE / 32)]\n+        fds_bits: [i32; (FD_SETSIZE / 32)]\n     }\n \n     pub fn fd_set(set: &mut fd_set, fd: i32) {\n@@ -115,7 +115,7 @@ mod select {\n     #[repr(C)]\n     pub struct fd_set {\n         // FIXME: shouldn't this be a c_ulong?\n-        fds_bits: [libc::uintptr_t, ..(FD_SETSIZE / uint::BITS)]\n+        fds_bits: [libc::uintptr_t; (FD_SETSIZE / uint::BITS)]\n     }\n \n     pub fn fd_set(set: &mut fd_set, fd: i32) {\n@@ -168,13 +168,13 @@ mod signal {\n     #[repr(C)]\n     #[cfg(target_word_size = \"32\")]\n     pub struct sigset_t {\n-        __val: [libc::c_ulong, ..32],\n+        __val: [libc::c_ulong; 32],\n     }\n \n     #[repr(C)]\n     #[cfg(target_word_size = \"64\")]\n     pub struct sigset_t {\n-        __val: [libc::c_ulong, ..16],\n+        __val: [libc::c_ulong; 16],\n     }\n }\n \n@@ -211,15 +211,15 @@ mod signal {\n         pub sa_handler: extern fn(libc::c_int),\n         pub sa_mask: sigset_t,\n         sa_restorer: *mut libc::c_void,\n-        sa_resv: [libc::c_int, ..1],\n+        sa_resv: [libc::c_int; 1],\n     }\n \n     unsafe impl ::kinds::Send for sigaction { }\n     unsafe impl ::kinds::Sync for sigaction { }\n \n     #[repr(C)]\n     pub struct sigset_t {\n-        __val: [libc::c_ulong, ..32],\n+        __val: [libc::c_ulong; 32],\n     }\n }\n \n@@ -244,7 +244,7 @@ mod signal {\n     #[cfg(any(target_os = \"freebsd\", target_os = \"dragonfly\"))]\n     #[repr(C)]\n     pub struct sigset_t {\n-        bits: [u32, ..4],\n+        bits: [u32; 4],\n     }\n \n     // This structure has more fields, but we're not all that interested in"}, {"sha": "8de4ffa7022a92ece4d9e289b25a90f3668ccd7b", "filename": "src/libstd/sys/unix/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs.rs?ref=cd614164e692cca3a1460737f581fcb6d4630baf", "patch": "@@ -372,7 +372,7 @@ mod tests {\n         let mut writer = FileDesc::new(writer, true);\n \n         writer.write(b\"test\").ok().unwrap();\n-        let mut buf = [0u8, ..4];\n+        let mut buf = [0u8; 4];\n         match reader.read(&mut buf) {\n             Ok(4) => {\n                 assert_eq!(buf[0], 't' as u8);"}, {"sha": "595191db3b2829b91910524ad23961896a79e4cf", "filename": "src/libstd/sys/unix/os.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos.rs?ref=cd614164e692cca3a1460737f581fcb6d4630baf", "patch": "@@ -100,7 +100,7 @@ pub fn error_string(errno: i32) -> String {\n         }\n     }\n \n-    let mut buf = [0 as c_char, ..TMPBUF_SZ];\n+    let mut buf = [0 as c_char; TMPBUF_SZ];\n \n     let p = buf.as_mut_ptr();\n     unsafe {\n@@ -113,7 +113,7 @@ pub fn error_string(errno: i32) -> String {\n }\n \n pub unsafe fn pipe() -> IoResult<(FileDesc, FileDesc)> {\n-    let mut fds = [0, ..2];\n+    let mut fds = [0; 2];\n     if libc::pipe(fds.as_mut_ptr()) == 0 {\n         Ok((FileDesc::new(fds[0], true), FileDesc::new(fds[1], true)))\n     } else {\n@@ -124,7 +124,7 @@ pub unsafe fn pipe() -> IoResult<(FileDesc, FileDesc)> {\n pub fn getcwd() -> IoResult<Path> {\n     use c_str::CString;\n \n-    let mut buf = [0 as c_char, ..BUF_BYTES];\n+    let mut buf = [0 as c_char; BUF_BYTES];\n     unsafe {\n         if libc::getcwd(buf.as_mut_ptr(), buf.len() as libc::size_t).is_null() {\n             Err(IoError::last_error())"}, {"sha": "c1c28bd5fc4dfaf3154ac600c494e7e4bac5c037", "filename": "src/libstd/sys/unix/process.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs?ref=cd614164e692cca3a1460737f581fcb6d4630baf", "patch": "@@ -120,7 +120,7 @@ impl Process {\n \n                     let p = Process{ pid: pid };\n                     drop(output);\n-                    let mut bytes = [0, ..8];\n+                    let mut bytes = [0; 8];\n                     return match input.read(&mut bytes) {\n                         Ok(8) => {\n                             assert!(combine(CLOEXEC_MSG_FOOTER) == combine(bytes.slice(4, 8)),\n@@ -348,7 +348,7 @@ impl Process {\n         // handler we're going to start receiving signals.\n         fn register_sigchld() -> (libc::c_int, c::sigaction) {\n             unsafe {\n-                let mut pipes = [0, ..2];\n+                let mut pipes = [0; 2];\n                 assert_eq!(libc::pipe(pipes.as_mut_ptr()), 0);\n                 set_nonblocking(pipes[0], true).ok().unwrap();\n                 set_nonblocking(pipes[1], true).ok().unwrap();\n@@ -482,7 +482,7 @@ impl Process {\n         fn drain(fd: libc::c_int) -> bool {\n             let mut ret = false;\n             loop {\n-                let mut buf = [0u8, ..1];\n+                let mut buf = [0u8; 1];\n                 match unsafe {\n                     libc::read(fd, buf.as_mut_ptr() as *mut libc::c_void,\n                                buf.len() as libc::size_t)"}, {"sha": "95ab9b459d671b152f8db2eed0bd75db538929c4", "filename": "src/libstd/sys/unix/stack_overflow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs?ref=cd614164e692cca3a1460737f581fcb6d4630baf", "patch": "@@ -184,12 +184,12 @@ mod imp {\n         #[cfg(target_word_size = \"32\")]\n         #[repr(C)]\n         pub struct sigset_t {\n-            __val: [libc::c_ulong, ..32],\n+            __val: [libc::c_ulong; 32],\n         }\n         #[cfg(target_word_size = \"64\")]\n         #[repr(C)]\n         pub struct sigset_t {\n-            __val: [libc::c_ulong, ..16],\n+            __val: [libc::c_ulong; 16],\n         }\n \n         #[repr(C)]"}, {"sha": "77c5582d8a4ee8944e44686fc2afa886d83bb1e0", "filename": "src/libstd/sys/unix/sync.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibstd%2Fsys%2Funix%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibstd%2Fsys%2Funix%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fsync.rs?ref=cd614164e692cca3a1460737f581fcb6d4630baf", "patch": "@@ -86,30 +86,30 @@ mod os {\n     #[repr(C)]\n     pub struct pthread_mutex_t {\n         __sig: libc::c_long,\n-        __opaque: [u8, ..__PTHREAD_MUTEX_SIZE__],\n+        __opaque: [u8; __PTHREAD_MUTEX_SIZE__],\n     }\n     #[repr(C)]\n     pub struct pthread_cond_t {\n         __sig: libc::c_long,\n-        __opaque: [u8, ..__PTHREAD_COND_SIZE__],\n+        __opaque: [u8; __PTHREAD_COND_SIZE__],\n     }\n     #[repr(C)]\n     pub struct pthread_rwlock_t {\n         __sig: libc::c_long,\n-        __opaque: [u8, ..__PTHREAD_RWLOCK_SIZE__],\n+        __opaque: [u8; __PTHREAD_RWLOCK_SIZE__],\n     }\n \n     pub const PTHREAD_MUTEX_INITIALIZER: pthread_mutex_t = pthread_mutex_t {\n         __sig: _PTHREAD_MUTEX_SIG_INIT,\n-        __opaque: [0, ..__PTHREAD_MUTEX_SIZE__],\n+        __opaque: [0; __PTHREAD_MUTEX_SIZE__],\n     };\n     pub const PTHREAD_COND_INITIALIZER: pthread_cond_t = pthread_cond_t {\n         __sig: _PTHREAD_COND_SIG_INIT,\n-        __opaque: [0, ..__PTHREAD_COND_SIZE__],\n+        __opaque: [0; __PTHREAD_COND_SIZE__],\n     };\n     pub const PTHREAD_RWLOCK_INITIALIZER: pthread_rwlock_t = pthread_rwlock_t {\n         __sig: _PTHREAD_RWLOCK_SIG_INIT,\n-        __opaque: [0, ..__PTHREAD_RWLOCK_SIZE__],\n+        __opaque: [0; __PTHREAD_RWLOCK_SIZE__],\n     };\n }\n \n@@ -145,30 +145,30 @@ mod os {\n     #[repr(C)]\n     pub struct pthread_mutex_t {\n         __align: libc::c_longlong,\n-        size: [u8, ..__SIZEOF_PTHREAD_MUTEX_T],\n+        size: [u8; __SIZEOF_PTHREAD_MUTEX_T],\n     }\n     #[repr(C)]\n     pub struct pthread_cond_t {\n         __align: libc::c_longlong,\n-        size: [u8, ..__SIZEOF_PTHREAD_COND_T],\n+        size: [u8; __SIZEOF_PTHREAD_COND_T],\n     }\n     #[repr(C)]\n     pub struct pthread_rwlock_t {\n         __align: libc::c_longlong,\n-        size: [u8, ..__SIZEOF_PTHREAD_RWLOCK_T],\n+        size: [u8; __SIZEOF_PTHREAD_RWLOCK_T],\n     }\n \n     pub const PTHREAD_MUTEX_INITIALIZER: pthread_mutex_t = pthread_mutex_t {\n         __align: 0,\n-        size: [0, ..__SIZEOF_PTHREAD_MUTEX_T],\n+        size: [0; __SIZEOF_PTHREAD_MUTEX_T],\n     };\n     pub const PTHREAD_COND_INITIALIZER: pthread_cond_t = pthread_cond_t {\n         __align: 0,\n-        size: [0, ..__SIZEOF_PTHREAD_COND_T],\n+        size: [0; __SIZEOF_PTHREAD_COND_T],\n     };\n     pub const PTHREAD_RWLOCK_INITIALIZER: pthread_rwlock_t = pthread_rwlock_t {\n         __align: 0,\n-        size: [0, ..__SIZEOF_PTHREAD_RWLOCK_T],\n+        size: [0; __SIZEOF_PTHREAD_RWLOCK_T],\n     };\n }\n #[cfg(target_os = \"android\")]\n@@ -187,7 +187,7 @@ mod os {\n         writerThreadId: libc::c_int,\n         pendingReaders: libc::c_int,\n         pendingWriters: libc::c_int,\n-        reserved: [*mut libc::c_void, ..4],\n+        reserved: [*mut libc::c_void; 4],\n     }\n \n     pub const PTHREAD_MUTEX_INITIALIZER: pthread_mutex_t = pthread_mutex_t {\n@@ -203,6 +203,6 @@ mod os {\n         writerThreadId: 0,\n         pendingReaders: 0,\n         pendingWriters: 0,\n-        reserved: [0 as *mut _, ..4],\n+        reserved: [0 as *mut _; 4],\n     };\n }"}, {"sha": "319a458087b9b51f949c997cf08c101ca55b662f", "filename": "src/libstd/sys/windows/backtrace.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace.rs?ref=cd614164e692cca3a1460737f581fcb6d4630baf", "patch": "@@ -68,7 +68,7 @@ const IMAGE_FILE_MACHINE_AMD64: libc::DWORD = 0x8664;\n struct SYMBOL_INFO {\n     SizeOfStruct: libc::c_ulong,\n     TypeIndex: libc::c_ulong,\n-    Reserved: [u64, ..2],\n+    Reserved: [u64; 2],\n     Index: libc::c_ulong,\n     Size: libc::c_ulong,\n     ModBase: u64,\n@@ -83,7 +83,7 @@ struct SYMBOL_INFO {\n     // note that windows has this as 1, but it basically just means that\n     // the name is inline at the end of the struct. For us, we just bump\n     // the struct size up to MAX_SYM_NAME.\n-    Name: [libc::c_char, ..MAX_SYM_NAME],\n+    Name: [libc::c_char; MAX_SYM_NAME],\n }\n \n \n@@ -108,10 +108,10 @@ struct STACKFRAME64 {\n     AddrStack: ADDRESS64,\n     AddrBStore: ADDRESS64,\n     FuncTableEntry: *mut libc::c_void,\n-    Params: [u64, ..4],\n+    Params: [u64; 4],\n     Far: libc::BOOL,\n     Virtual: libc::BOOL,\n-    Reserved: [u64, ..3],\n+    Reserved: [u64; 3],\n     KdHelp: KDHELP64,\n }\n \n@@ -127,7 +127,7 @@ struct KDHELP64 {\n     KiUserExceptionDispatcher: u64,\n     StackBase: u64,\n     StackLimit: u64,\n-    Reserved: [u64, ..5],\n+    Reserved: [u64; 5],\n }\n \n #[cfg(target_arch = \"x86\")]\n@@ -162,7 +162,7 @@ mod arch {\n         EFlags: libc::DWORD,\n         Esp: libc::DWORD,\n         SegSs: libc::DWORD,\n-        ExtendedRegisters: [u8, ..MAXIMUM_SUPPORTED_EXTENSION],\n+        ExtendedRegisters: [u8; MAXIMUM_SUPPORTED_EXTENSION],\n     }\n \n     #[repr(C)]\n@@ -174,7 +174,7 @@ mod arch {\n         ErrorSelector: libc::DWORD,\n         DataOffset: libc::DWORD,\n         DataSelector: libc::DWORD,\n-        RegisterArea: [u8, ..80],\n+        RegisterArea: [u8; 80],\n         Cr0NpxState: libc::DWORD,\n     }\n \n@@ -198,7 +198,7 @@ mod arch {\n \n     #[repr(C)]\n     pub struct CONTEXT {\n-        _align_hack: [simd::u64x2, ..0], // FIXME align on 16-byte\n+        _align_hack: [simd::u64x2; 0], // FIXME align on 16-byte\n         P1Home: DWORDLONG,\n         P2Home: DWORDLONG,\n         P3Home: DWORDLONG,\n@@ -245,7 +245,7 @@ mod arch {\n \n         FltSave: FLOATING_SAVE_AREA,\n \n-        VectorRegister: [M128A, .. 26],\n+        VectorRegister: [M128A; 26],\n         VectorControl: DWORDLONG,\n \n         DebugControl: DWORDLONG,\n@@ -257,15 +257,15 @@ mod arch {\n \n     #[repr(C)]\n     pub struct M128A {\n-        _align_hack: [simd::u64x2, ..0], // FIXME align on 16-byte\n+        _align_hack: [simd::u64x2; 0], // FIXME align on 16-byte\n         Low:  c_ulonglong,\n         High: c_longlong\n     }\n \n     #[repr(C)]\n     pub struct FLOATING_SAVE_AREA {\n-        _align_hack: [simd::u64x2, ..0], // FIXME align on 16-byte\n-        _Dummy: [u8, ..512] // FIXME: Fill this out\n+        _align_hack: [simd::u64x2; 0], // FIXME align on 16-byte\n+        _Dummy: [u8; 512] // FIXME: Fill this out\n     }\n \n     pub fn init_frame(frame: &mut super::STACKFRAME64,"}, {"sha": "6cccefbe89064dd20e0cf7133f88509c92541ca0", "filename": "src/libstd/sys/windows/c.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs?ref=cd614164e692cca3a1460737f581fcb6d4630baf", "patch": "@@ -43,8 +43,8 @@ pub const WSA_WAIT_FAILED: libc::DWORD = libc::consts::os::extra::WAIT_FAILED;\n pub struct WSADATA {\n     pub wVersion: libc::WORD,\n     pub wHighVersion: libc::WORD,\n-    pub szDescription: [u8, ..WSADESCRIPTION_LEN + 1],\n-    pub szSystemStatus: [u8, ..WSASYS_STATUS_LEN + 1],\n+    pub szDescription: [u8; WSADESCRIPTION_LEN + 1],\n+    pub szSystemStatus: [u8; WSASYS_STATUS_LEN + 1],\n     pub iMaxSockets: u16,\n     pub iMaxUdpDg: u16,\n     pub lpVendorInfo: *mut u8,\n@@ -57,16 +57,16 @@ pub struct WSADATA {\n     pub iMaxSockets: u16,\n     pub iMaxUdpDg: u16,\n     pub lpVendorInfo: *mut u8,\n-    pub szDescription: [u8, ..WSADESCRIPTION_LEN + 1],\n-    pub szSystemStatus: [u8, ..WSASYS_STATUS_LEN + 1],\n+    pub szDescription: [u8; WSADESCRIPTION_LEN + 1],\n+    pub szSystemStatus: [u8; WSASYS_STATUS_LEN + 1],\n }\n \n pub type LPWSADATA = *mut WSADATA;\n \n #[repr(C)]\n pub struct WSANETWORKEVENTS {\n     pub lNetworkEvents: libc::c_long,\n-    pub iErrorCode: [libc::c_int, ..FD_MAX_EVENTS],\n+    pub iErrorCode: [libc::c_int; FD_MAX_EVENTS],\n }\n \n pub type LPWSANETWORKEVENTS = *mut WSANETWORKEVENTS;\n@@ -76,7 +76,7 @@ pub type WSAEVENT = libc::HANDLE;\n #[repr(C)]\n pub struct fd_set {\n     fd_count: libc::c_uint,\n-    fd_array: [libc::SOCKET, ..FD_SETSIZE],\n+    fd_array: [libc::SOCKET; FD_SETSIZE],\n }\n \n pub fn fd_set(set: &mut fd_set, s: libc::SOCKET) {"}, {"sha": "09003f87ff0c143d655a7eb0da756caf170fc195", "filename": "src/libstd/sys/windows/os.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fos.rs?ref=cd614164e692cca3a1460737f581fcb6d4630baf", "patch": "@@ -80,7 +80,7 @@ pub fn error_string(errnum: i32) -> String {\n     // MAKELANGID(LANG_SYSTEM_DEFAULT, SUBLANG_SYS_DEFAULT)\n     let langId = 0x0800 as DWORD;\n \n-    let mut buf = [0 as WCHAR, ..TMPBUF_SZ];\n+    let mut buf = [0 as WCHAR; TMPBUF_SZ];\n \n     unsafe {\n         let res = FormatMessageW(FORMAT_MESSAGE_FROM_SYSTEM |\n@@ -112,7 +112,7 @@ pub unsafe fn pipe() -> IoResult<(FileDesc, FileDesc)> {\n     // fully understand. Here we explicitly make the pipe non-inheritable,\n     // which means to pass it to a subprocess they need to be duplicated\n     // first, as in std::run.\n-    let mut fds = [0, ..2];\n+    let mut fds = [0; 2];\n     match libc::pipe(fds.as_mut_ptr(), 1024 as ::libc::c_uint,\n                      (libc::O_BINARY | libc::O_NOINHERIT) as c_int) {\n         0 => {\n@@ -164,7 +164,7 @@ pub fn getcwd() -> IoResult<Path> {\n     use libc::GetCurrentDirectoryW;\n     use io::OtherIoError;\n \n-    let mut buf = [0 as u16, ..BUF_BYTES];\n+    let mut buf = [0 as u16; BUF_BYTES];\n     unsafe {\n         if libc::GetCurrentDirectoryW(buf.len() as DWORD, buf.as_mut_ptr()) == 0 as DWORD {\n             return Err(IoError::last_error());"}, {"sha": "e8b447022cbf4f0b0134bc857c5fd3ca4290d76f", "filename": "src/libstd/sys/windows/stack_overflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibstd%2Fsys%2Fwindows%2Fstack_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibstd%2Fsys%2Fwindows%2Fstack_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fstack_overflow.rs?ref=cd614164e692cca3a1460737f581fcb6d4630baf", "patch": "@@ -90,7 +90,7 @@ pub struct EXCEPTION_RECORD {\n     pub ExceptionRecord: *mut EXCEPTION_RECORD,\n     pub ExceptionAddress: LPVOID,\n     pub NumberParameters: DWORD,\n-    pub ExceptionInformation: [LPVOID, ..EXCEPTION_MAXIMUM_PARAMETERS]\n+    pub ExceptionInformation: [LPVOID; EXCEPTION_MAXIMUM_PARAMETERS]\n }\n \n pub struct EXCEPTION_POINTERS {"}, {"sha": "720a907fe77f0cb4971bbfc92c9232741bd6bbf0", "filename": "src/libsyntax/diagnostics/plugin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs?ref=cd614164e692cca3a1460737f581fcb6d4630baf", "patch": "@@ -119,6 +119,6 @@ pub fn expand_build_diagnostic_array<'cx>(ecx: &'cx mut ExtCtxt,\n         });\n \n     MacItems::new(vec![quote_item!(ecx,\n-        pub static $name: [(&'static str, &'static str), ..$count] = $expr;\n+        pub static $name: [(&'static str, &'static str); $count] = $expr;\n     ).unwrap()].into_iter())\n }"}, {"sha": "457085f5cc84878c61d935fe0ba8af1d5a83b6b4", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 13, "deletions": 19, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=cd614164e692cca3a1460737f581fcb6d4630baf", "patch": "@@ -292,7 +292,7 @@ pub struct Parser<'a> {\n     pub cfg: CrateConfig,\n     /// the previous token or None (only stashed sometimes).\n     pub last_token: Option<Box<token::Token>>,\n-    pub buffer: [TokenAndSpan, ..4],\n+    pub buffer: [TokenAndSpan; 4],\n     pub buffer_start: int,\n     pub buffer_end: int,\n     pub tokens_consumed: uint,\n@@ -1716,12 +1716,7 @@ impl<'a> Parser<'a> {\n     }\n \n     pub fn maybe_parse_fixed_length_of_vec(&mut self) -> Option<P<ast::Expr>> {\n-        if self.check(&token::Comma) &&\n-                self.look_ahead(1, |t| *t == token::DotDot) {\n-            self.bump();\n-            self.bump();\n-            Some(self.parse_expr_res(RESTRICTION_NO_DOTS))\n-        } else if self.check(&token::Semi) {\n+        if self.check(&token::Semi) {\n             self.bump();\n             Some(self.parse_expr())\n         } else {\n@@ -2155,10 +2150,10 @@ impl<'a> Parser<'a> {\n     }\n \n     pub fn mk_range(&mut self,\n-                    start: P<Expr>,\n+                    start: Option<P<Expr>>,\n                     end: Option<P<Expr>>)\n                     -> ast::Expr_ {\n-        ExprRange(Some(start), end)\n+        ExprRange(start, end)\n     }\n \n     pub fn mk_field(&mut self, expr: P<Expr>, ident: ast::SpannedIdent) -> ast::Expr_ {\n@@ -2277,15 +2272,7 @@ impl<'a> Parser<'a> {\n                 } else {\n                     // Nonempty vector.\n                     let first_expr = self.parse_expr();\n-                    if self.check(&token::Comma) &&\n-                        self.look_ahead(1, |t| *t == token::DotDot) {\n-                        // Repeating vector syntax: [ 0, ..512 ]\n-                        self.bump();\n-                        self.bump();\n-                        let count = self.parse_expr();\n-                        self.expect(&token::CloseDelim(token::Bracket));\n-                        ex = ExprRepeat(first_expr, count);\n-                    } else if self.check(&token::Semi) {\n+                    if self.check(&token::Semi) {\n                         // Repeating vector syntax: [ 0; 512 ]\n                         self.bump();\n                         let count = self.parse_expr();\n@@ -2689,7 +2676,7 @@ impl<'a> Parser<'a> {\n                 };\n \n                 let hi = self.span.hi;\n-                let range = self.mk_range(e, opt_end);\n+                let range = self.mk_range(Some(e), opt_end);\n                 return self.mk_expr(lo, hi, range);\n               }\n               _ => return e\n@@ -2902,6 +2889,13 @@ impl<'a> Parser<'a> {\n             hi = e.span.hi;\n             ex = self.mk_unary(UnUniq, e);\n           }\n+          token::DotDot if !self.restrictions.contains(RESTRICTION_NO_DOTS) => {\n+            // A range, closed above: `..expr`.\n+            self.bump();\n+            let e = self.parse_prefix_expr();\n+            hi = e.span.hi;\n+            ex = self.mk_range(None, Some(e));\n+          }\n           token::Ident(_, _) => {\n             if !self.token.is_keyword(keywords::Box) {\n                 return self.parse_dot_or_call_expr();"}, {"sha": "35d1e166e9ca4cc1744d5ad0f375105be29810e0", "filename": "src/libterm/terminfo/parm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibterm%2Fterminfo%2Fparm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibterm%2Fterminfo%2Fparm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fparm.rs?ref=cd614164e692cca3a1460737f581fcb6d4630baf", "patch": "@@ -53,9 +53,9 @@ pub enum Param {\n /// Container for static and dynamic variable arrays\n pub struct Variables {\n     /// Static variables A-Z\n-    sta: [Param, ..26],\n+    sta: [Param; 26],\n     /// Dynamic variables a-z\n-    dyn: [Param, ..26]\n+    dyn: [Param; 26]\n }\n \n impl Variables {"}, {"sha": "3130ad0af3fa7a26e8c4cbff0b598defb1cb07b9", "filename": "src/libterm/win.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibterm%2Fwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibterm%2Fwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fwin.rs?ref=cd614164e692cca3a1460737f581fcb6d4630baf", "patch": "@@ -32,11 +32,11 @@ pub struct WinConsole<T> {\n #[allow(non_snake_case)]\n #[repr(C)]\n struct CONSOLE_SCREEN_BUFFER_INFO {\n-    dwSize: [libc::c_short, ..2],\n-    dwCursorPosition: [libc::c_short, ..2],\n+    dwSize: [libc::c_short; 2],\n+    dwCursorPosition: [libc::c_short; 2],\n     wAttributes: libc::WORD,\n-    srWindow: [libc::c_short, ..4],\n-    dwMaximumWindowSize: [libc::c_short, ..2],\n+    srWindow: [libc::c_short; 4],\n+    dwMaximumWindowSize: [libc::c_short; 2],\n }\n \n #[allow(non_snake_case)]"}, {"sha": "19821ecb7ca7a03b75effb31f911d7ed7b699eb3", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=cd614164e692cca3a1460737f581fcb6d4630baf", "patch": "@@ -1387,7 +1387,7 @@ impl Bencher {\n         if n == 0 { n = 1; }\n \n         let mut total_run = Duration::nanoseconds(0);\n-        let samples : &mut [f64] = &mut [0.0_f64, ..50];\n+        let samples : &mut [f64] = &mut [0.0_f64; 50];\n         loop {\n             let mut summ = None;\n             let mut summ5 = None;"}, {"sha": "9b473ea5f54a709fe84fe88f28c24ecbd13be288", "filename": "src/libunicode/u_str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibunicode%2Fu_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Flibunicode%2Fu_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunicode%2Fu_str.rs?ref=cd614164e692cca3a1460737f581fcb6d4630baf", "patch": "@@ -353,7 +353,7 @@ impl<'a> DoubleEndedIterator<&'a str> for Graphemes<'a> {\n }\n \n // https://tools.ietf.org/html/rfc3629\n-static UTF8_CHAR_WIDTH: [u8, ..256] = [\n+static UTF8_CHAR_WIDTH: [u8; 256] = [\n 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,\n 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1, // 0x1F\n 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,\n@@ -519,7 +519,7 @@ impl<I> Iterator<u16> for Utf16Encoder<I> where I: Iterator<char> {\n             return Some(tmp);\n         }\n \n-        let mut buf = [0u16, ..2];\n+        let mut buf = [0u16; 2];\n         self.chars.next().map(|ch| {\n             let n = ch.encode_utf16(buf.as_mut_slice()).unwrap_or(0);\n             if n == 2 { self.extra = buf[1]; }"}, {"sha": "3c01a7756a6b9656fbabb3e67a38e7272f778721", "filename": "src/test/compile-fail/array-old-syntax-1.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Ftest%2Fcompile-fail%2Farray-old-syntax-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Ftest%2Fcompile-fail%2Farray-old-syntax-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Farray-old-syntax-1.rs?ref=cd614164e692cca3a1460737f581fcb6d4630baf", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that the old fixed length array syntax is a parsing error.\n+\n+fn main() {\n+    let _x: [int, ..3] = [0i, 1, 2]; //~ ERROR\n+}"}, {"sha": "df2cc305ca8e1182d86795b085f443657bb96952", "filename": "src/test/compile-fail/array-old-syntax-2.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Ftest%2Fcompile-fail%2Farray-old-syntax-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Ftest%2Fcompile-fail%2Farray-old-syntax-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Farray-old-syntax-2.rs?ref=cd614164e692cca3a1460737f581fcb6d4630baf", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that the old repeating array syntax gives an error.\n+\n+fn main() {\n+    let _ = [0i, ..3]; //~ ERROR\n+}"}, {"sha": "672d8a30fc56c808c2636f11ad688d9f8de0f63c", "filename": "src/test/compile-fail/better-expected.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Ftest%2Fcompile-fail%2Fbetter-expected.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Ftest%2Fcompile-fail%2Fbetter-expected.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbetter-expected.rs?ref=cd614164e692cca3a1460737f581fcb6d4630baf", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n fn main() {\n-    let x: [int 3]; //~ ERROR expected one of `(`, `+`, `,`, `::`, `;`, or `]`, found `3`\n+    let x: [int 3]; //~ ERROR expected one of `(`, `+`, `::`, `;`, or `]`, found `3`\n }"}, {"sha": "3224edb381cccbf2d1c4c0dbecc230308478eca4", "filename": "src/test/compile-fail/issue-17913.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Ftest%2Fcompile-fail%2Fissue-17913.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Ftest%2Fcompile-fail%2Fissue-17913.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17913.rs?ref=cd614164e692cca3a1460737f581fcb6d4630baf", "patch": "@@ -13,13 +13,13 @@\n #[cfg(target_word_size = \"64\")]\n fn main() {\n     let n = 0u;\n-    let a = box [&n,..0xF000000000000000u];\n+    let a = box [&n; 0xF000000000000000u];\n     println!(\"{}\", a[0xFFFFFFu]);\n }\n \n #[cfg(target_word_size = \"32\")]\n fn main() {\n     let n = 0u;\n-    let a = box [&n,..0xFFFFFFFFu];\n+    let a = box [&n; 0xFFFFFFFFu];\n     println!(\"{}\", a[0xFFFFFFu]);\n }"}, {"sha": "c2bd810abad2537858a7a202cc1fed87fff22b73", "filename": "src/test/compile-fail/issue-6977.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Ftest%2Fcompile-fail%2Fissue-6977.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Ftest%2Fcompile-fail%2Fissue-6977.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-6977.rs?ref=cd614164e692cca3a1460737f581fcb6d4630baf", "patch": "@@ -11,5 +11,5 @@\n // Trying to create a fixed-length vector with a negative size\n \n fn main() {\n-      let _x = [0,..-1]; //~ ERROR found negative integer\n+      let _x = [0; -1]; //~ ERROR found negative integer\n }"}, {"sha": "6537e3ddd27d0c11caa7f475171007181a8ef128", "filename": "src/test/compile-fail/removed-syntax-fixed-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Ftest%2Fcompile-fail%2Fremoved-syntax-fixed-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Ftest%2Fcompile-fail%2Fremoved-syntax-fixed-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fremoved-syntax-fixed-vec.rs?ref=cd614164e692cca3a1460737f581fcb6d4630baf", "patch": "@@ -8,4 +8,4 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-type v = [int * 3]; //~ ERROR expected one of `(`, `+`, `,`, `::`, `;`, or `]`, found `*`\n+type v = [int * 3]; //~ ERROR expected one of `(`, `+`, `::`, `;`, or `]`, found `*`"}, {"sha": "efde1f1b24d617efe673cf8bebc9bb6a2ea4be6b", "filename": "src/test/compile-fail/removed-syntax-mut-vec-ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Ftest%2Fcompile-fail%2Fremoved-syntax-mut-vec-ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Ftest%2Fcompile-fail%2Fremoved-syntax-mut-vec-ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fremoved-syntax-mut-vec-ty.rs?ref=cd614164e692cca3a1460737f581fcb6d4630baf", "patch": "@@ -10,4 +10,4 @@\n \n type v = [mut int];\n     //~^  ERROR expected identifier, found keyword `mut`\n-    //~^^ ERROR expected one of `(`, `+`, `,`, `::`, `;`, or `]`, found `int`\n+    //~^^ ERROR expected one of `(`, `+`, `::`, `;`, or `]`, found `int`"}, {"sha": "b481e109e1a3d4e30e7eda1ec7d79a5a4a79a0ec", "filename": "src/test/pretty/issue-4264.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Ftest%2Fpretty%2Fissue-4264.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Ftest%2Fpretty%2Fissue-4264.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fissue-4264.rs?ref=cd614164e692cca3a1460737f581fcb6d4630baf", "patch": "@@ -14,35 +14,35 @@\n \n // #4264 fixed-length vector types\n \n-pub fn foo(_: [int, ..3]) {}\n+pub fn foo(_: [int; 3]) {}\n \n pub fn bar() {\n     const FOO: uint = 5u - 4u;\n-    let _: [(), ..FOO] = [()];\n+    let _: [(); FOO] = [()];\n \n-    let _ : [(), ..1u] = [()];\n+    let _ : [(); 1u] = [()];\n \n-    let _ = &([1i,2,3]) as *const _ as *const [int, ..3u];\n+    let _ = &([1i,2,3]) as *const _ as *const [int; 3u];\n \n     format!(\"test\");\n }\n \n-pub type Foo = [int, ..3u];\n+pub type Foo = [int; 3u];\n \n pub struct Bar {\n-    pub x: [int, ..3u]\n+    pub x: [int; 3u]\n }\n \n-pub struct TupleBar([int, ..4u]);\n+pub struct TupleBar([int; 4u]);\n \n pub enum Baz {\n-    BazVariant([int, ..5u])\n+    BazVariant([int; 5u])\n }\n \n pub fn id<T>(x: T) -> T { x }\n \n pub fn use_id() {\n-    let _ = id::<[int, ..3u]>([1,2,3]);\n+    let _ = id::<[int; 3u]>([1,2,3]);\n }\n \n "}, {"sha": "34ff0b3821cc6dfc85ce519e46c962ae5e03fb65", "filename": "src/test/run-pass/enum-null-pointer-opt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Ftest%2Frun-pass%2Fenum-null-pointer-opt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Ftest%2Frun-pass%2Fenum-null-pointer-opt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-null-pointer-opt.rs?ref=cd614164e692cca3a1460737f581fcb6d4630baf", "patch": "@@ -54,7 +54,7 @@ fn main() {\n     // and tuples\n     assert_eq!(size_of::<(u8, Box<int>)>(), size_of::<Option<(u8, Box<int>)>>());\n     // and fixed-size arrays\n-    assert_eq!(size_of::<[Box<int>, ..1]>(), size_of::<Option<[Box<int>, ..1]>>());\n+    assert_eq!(size_of::<[Box<int>; 1]>(), size_of::<Option<[Box<int>; 1]>>());\n \n     // Should apply to NonZero\n     assert_eq!(size_of::<NonZero<uint>>(), size_of::<Option<NonZero<uint>>>());"}, {"sha": "5f7770e97a9cf99258c19f8752b4af5d248fcb0e", "filename": "src/test/run-pass/foreach-external-iterators-break.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-break.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-break.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-break.rs?ref=cd614164e692cca3a1460737f581fcb6d4630baf", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n pub fn main() {\n-    let x = [1i,..100];\n+    let x = [1i; 100];\n     let mut y = 0i;\n     for i in x.iter() {\n         if y > 10 {"}, {"sha": "d8c6dd6a93dae97d8e745e9e8fc006f04f3c6d22", "filename": "src/test/run-pass/foreach-external-iterators-loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-loop.rs?ref=cd614164e692cca3a1460737f581fcb6d4630baf", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n pub fn main() {\n-    let x = [1i,..100];\n+    let x = [1i; 100];\n     let mut y = 0i;\n     for (n,i) in x.iter().enumerate() {\n         if n < 10 {"}, {"sha": "20ea9c440a1fc49be8878406bf1cf52f420b60ba", "filename": "src/test/run-pass/foreach-external-iterators-nested.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-external-iterators-nested.rs?ref=cd614164e692cca3a1460737f581fcb6d4630baf", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n pub fn main() {\n-    let x = [1i,..100];\n-    let y = [2i,..100];\n+    let x = [1i; 100];\n+    let y = [2i; 100];\n     let mut p = 0i;\n     let mut q = 0i;\n     for i in x.iter() {"}, {"sha": "0ac642cc449af763ef05bfb14899b7c2ac8ab626", "filename": "src/test/run-pass/foreach-external-iterators.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Ftest%2Frun-pass%2Fforeach-external-iterators.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Ftest%2Frun-pass%2Fforeach-external-iterators.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-external-iterators.rs?ref=cd614164e692cca3a1460737f581fcb6d4630baf", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n pub fn main() {\n-    let x = [1i,..100];\n+    let x = [1i; 100];\n     let mut y = 0i;\n     for i in x.iter() {\n         y += *i"}, {"sha": "43b6d4b3109c8bb825ebe25d1f3253e8326b635b", "filename": "src/test/run-pass/range.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Ftest%2Frun-pass%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Ftest%2Frun-pass%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frange.rs?ref=cd614164e692cca3a1460737f581fcb6d4630baf", "patch": "@@ -41,6 +41,8 @@ pub fn main() {\n     let _ = 0u..4+4-3;\n     let _ = 0..foo();\n \n+    let _ = ..42u;\n+\n     // Test we can use two different types with a common supertype.\n     let x = &42i;\n     {"}, {"sha": "70a41f773a3e0a2c4cdd45ebfe12087525b6e630", "filename": "src/test/run-pass/transmute-non-immediate-to-immediate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Ftest%2Frun-pass%2Ftransmute-non-immediate-to-immediate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Ftest%2Frun-pass%2Ftransmute-non-immediate-to-immediate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftransmute-non-immediate-to-immediate.rs?ref=cd614164e692cca3a1460737f581fcb6d4630baf", "patch": "@@ -13,6 +13,6 @@\n \n pub fn main() {\n     unsafe {\n-        ::std::mem::transmute::<[int,..1],int>([1])\n+        ::std::mem::transmute::<[int; 1],int>([1])\n     };\n }"}, {"sha": "961a4472bd4e7cae4ed0e1d77889f196b7ebe019", "filename": "src/test/run-pass/type-sizes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Ftest%2Frun-pass%2Ftype-sizes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd614164e692cca3a1460737f581fcb6d4630baf/src%2Ftest%2Frun-pass%2Ftype-sizes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftype-sizes.rs?ref=cd614164e692cca3a1460737f581fcb6d4630baf", "patch": "@@ -26,7 +26,7 @@ enum e2 {\n }\n \n enum e3 {\n-    a([u16, ..0], u8), b\n+    a([u16; 0], u8), b\n }\n \n pub fn main() {"}]}