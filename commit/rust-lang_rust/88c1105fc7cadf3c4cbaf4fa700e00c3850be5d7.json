{"sha": "88c1105fc7cadf3c4cbaf4fa700e00c3850be5d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4YzExMDVmYzdjYWRmM2M0Y2JhZjRmYTcwMGUwMGMzODUwYmU1ZDc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-12T07:32:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-12T07:32:54Z"}, "message": "Auto merge of #26931 - reem:string-conversions, r=alexcrichton\n\nImplements merged RFC 1152.\n\nCloses #26697.", "tree": {"sha": "3d3ebfc865f8b9fba3b3c48e912f9fd87fcdd6c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d3ebfc865f8b9fba3b3c48e912f9fd87fcdd6c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88c1105fc7cadf3c4cbaf4fa700e00c3850be5d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88c1105fc7cadf3c4cbaf4fa700e00c3850be5d7", "html_url": "https://github.com/rust-lang/rust/commit/88c1105fc7cadf3c4cbaf4fa700e00c3850be5d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88c1105fc7cadf3c4cbaf4fa700e00c3850be5d7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "78547d2b951c4499142fa586dfb852ba35d61655", "url": "https://api.github.com/repos/rust-lang/rust/commits/78547d2b951c4499142fa586dfb852ba35d61655", "html_url": "https://github.com/rust-lang/rust/commit/78547d2b951c4499142fa586dfb852ba35d61655"}, {"sha": "69521affbb6c177192522606d4f7f09f5c07537c", "url": "https://api.github.com/repos/rust-lang/rust/commits/69521affbb6c177192522606d4f7f09f5c07537c", "html_url": "https://github.com/rust-lang/rust/commit/69521affbb6c177192522606d4f7f09f5c07537c"}], "stats": {"total": 60, "additions": 39, "deletions": 21}, "files": [{"sha": "7f86209bd2ac9c514f5def488724cb726fb163c7", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 12, "deletions": 21, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/88c1105fc7cadf3c4cbaf4fa700e00c3850be5d7/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c1105fc7cadf3c4cbaf4fa700e00c3850be5d7/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=88c1105fc7cadf3c4cbaf4fa700e00c3850be5d7", "patch": "@@ -61,6 +61,7 @@ use core::result::Result;\n use core::str as core_str;\n use core::str::pattern::Pattern;\n use core::str::pattern::{Searcher, ReverseSearcher, DoubleEndedSearcher};\n+use core::mem;\n use rustc_unicode::str::{UnicodeStr, Utf16Encoder};\n \n use vec_deque::VecDeque;\n@@ -69,6 +70,7 @@ use string::String;\n use rustc_unicode;\n use vec::Vec;\n use slice::SliceConcatExt;\n+use boxed::Box;\n \n pub use core::str::{FromStr, Utf8Error};\n pub use core::str::{Lines, LinesAny, CharRange};\n@@ -82,10 +84,6 @@ pub use core::str::{from_utf8_unchecked, ParseBoolError};\n pub use rustc_unicode::str::{SplitWhitespace, Words, Graphemes, GraphemeIndices};\n pub use core::str::pattern;\n \n-/*\n-Section: Creating a string\n-*/\n-\n impl<S: Borrow<str>> SliceConcatExt<str> for [S] {\n     type Output = String;\n \n@@ -134,10 +132,6 @@ impl<S: Borrow<str>> SliceConcatExt<str> for [S] {\n     }\n }\n \n-/*\n-Section: Iterators\n-*/\n-\n // Helper functions used for Unicode normalization\n fn canonical_sort(comb: &mut [(char, u8)]) {\n     let len = comb.len();\n@@ -382,10 +376,6 @@ impl<'a> Iterator for Utf16Units<'a> {\n     fn size_hint(&self) -> (usize, Option<usize>) { self.encoder.size_hint() }\n }\n \n-/*\n-Section: Misc\n-*/\n-\n // Return the initial codepoint accumulator for the first byte.\n // The first byte is special, only want bottom 5 bits for width 2, 4 bits\n // for width 3, and 3 bits for width 4\n@@ -414,15 +404,6 @@ impl ToOwned for str {\n     }\n }\n \n-/*\n-Section: CowString\n-*/\n-\n-/*\n-Section: Trait implementations\n-*/\n-\n-\n /// Any string that can be represented as a slice.\n #[lang = \"str\"]\n #[cfg(not(test))]\n@@ -1924,4 +1905,14 @@ impl str {\n     pub fn escape_unicode(&self) -> String {\n         self.chars().flat_map(|c| c.escape_unicode()).collect()\n     }\n+\n+    /// Converts the `Box<str>` into a `String` without copying or allocating.\n+    #[unstable(feature = \"box_str\",\n+               reason = \"recently added, matches RFC\")]\n+    pub fn into_string(self: Box<str>) -> String {\n+        unsafe {\n+            let slice = mem::transmute::<Box<str>, Box<[u8]>>(self);\n+            String::from_utf8_unchecked(slice.into_vec())\n+        }\n+    }\n }"}, {"sha": "ef1d9b08b4a9a6d4b5b5328c5529f9c71bd4db62", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/88c1105fc7cadf3c4cbaf4fa700e00c3850be5d7/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c1105fc7cadf3c4cbaf4fa700e00c3850be5d7/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=88c1105fc7cadf3c4cbaf4fa700e00c3850be5d7", "patch": "@@ -29,6 +29,7 @@ use borrow::{Cow, IntoCow};\n use range::RangeArgument;\n use str::{self, FromStr, Utf8Error, Chars};\n use vec::{DerefVec, Vec, as_vec};\n+use boxed::Box;\n \n /// A growable string stored as a UTF-8 encoded buffer.\n #[derive(Clone, PartialOrd, Eq, Ord)]\n@@ -741,6 +742,16 @@ impl String {\n             string: self_ptr,\n         }\n     }\n+\n+    /// Converts the string into `Box<str>`.\n+    ///\n+    /// Note that this will drop any excess capacity.\n+    #[unstable(feature = \"box_str\",\n+               reason = \"recently added, matches RFC\")]\n+    pub fn into_boxed_slice(self) -> Box<str> {\n+        let slice = self.vec.into_boxed_slice();\n+        unsafe { mem::transmute::<Box<[u8]>, Box<str>>(slice) }\n+    }\n }\n \n impl FromUtf8Error {"}, {"sha": "87c7449540c7953a8ec8afc0364c486d77d7c5a3", "filename": "src/libcollectionstest/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88c1105fc7cadf3c4cbaf4fa700e00c3850be5d7/src%2Flibcollectionstest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c1105fc7cadf3c4cbaf4fa700e00c3850be5d7/src%2Flibcollectionstest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Flib.rs?ref=88c1105fc7cadf3c4cbaf4fa700e00c3850be5d7", "patch": "@@ -44,6 +44,7 @@\n #![feature(str_escape)]\n #![feature(str_match_indices)]\n #![feature(str_utf16)]\n+#![feature(box_str)]\n #![feature(subslice_offset)]\n #![feature(test)]\n #![feature(unboxed_closures)]"}, {"sha": "4eee99f2bc91284137d97f77499af643718bbdba", "filename": "src/libcollectionstest/str.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/88c1105fc7cadf3c4cbaf4fa700e00c3850be5d7/src%2Flibcollectionstest%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c1105fc7cadf3c4cbaf4fa700e00c3850be5d7/src%2Flibcollectionstest%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fstr.rs?ref=88c1105fc7cadf3c4cbaf4fa700e00c3850be5d7", "patch": "@@ -1746,6 +1746,14 @@ fn to_uppercase() {\n     assert_eq!(\"a\u00e9\u01c5\u00df\ufb01\u1f80\".to_uppercase(), \"A\u00c9\u01c4SSFI\u1f08\u0399\");\n }\n \n+#[test]\n+fn test_into_string() {\n+    // The only way to acquire a Box<str> in the first place is through a String, so just\n+    // test that we can round-trip between Box<str> and String.\n+    let string = String::from(\"Some text goes here\");\n+    assert_eq!(string.clone().into_boxed_slice().into_string(), string);\n+}\n+\n mod pattern {\n     use std::str::pattern::Pattern;\n     use std::str::pattern::{Searcher, ReverseSearcher};"}, {"sha": "7b69601f010ba4af2435ed40410b4614a637eb2d", "filename": "src/libcollectionstest/string.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/88c1105fc7cadf3c4cbaf4fa700e00c3850be5d7/src%2Flibcollectionstest%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c1105fc7cadf3c4cbaf4fa700e00c3850be5d7/src%2Flibcollectionstest%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fstring.rs?ref=88c1105fc7cadf3c4cbaf4fa700e00c3850be5d7", "patch": "@@ -374,6 +374,13 @@ fn test_extend_ref() {\n     assert_eq!(&a, \"foobar\");\n }\n \n+#[test]\n+fn test_into_boxed_slice() {\n+    let xs = String::from(\"hello my name is bob\");\n+    let ys = xs.into_boxed_slice();\n+    assert_eq!(&*ys, \"hello my name is bob\");\n+}\n+\n #[bench]\n fn bench_with_capacity(b: &mut Bencher) {\n     b.iter(|| {"}]}