{"sha": "43ab6c7d5a9a9951de487baf49b91fd4b85e584d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzYWI2YzdkNWE5YTk5NTFkZTQ4N2JhZjQ5YjkxZmQ0Yjg1ZTU4NGQ=", "commit": {"author": {"name": "arcnmx", "email": "arcnmx@users.noreply.github.com", "date": "2015-12-29T18:02:08Z"}, "committer": {"name": "arcnmx", "email": "arcnmx@users.noreply.github.com", "date": "2015-12-29T18:02:08Z"}, "message": "AsRef and related conversions for CString", "tree": {"sha": "3923eaba55888e30a2ab5aa4326c1207f5447669", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3923eaba55888e30a2ab5aa4326c1207f5447669"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/43ab6c7d5a9a9951de487baf49b91fd4b85e584d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/43ab6c7d5a9a9951de487baf49b91fd4b85e584d", "html_url": "https://github.com/rust-lang/rust/commit/43ab6c7d5a9a9951de487baf49b91fd4b85e584d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/43ab6c7d5a9a9951de487baf49b91fd4b85e584d/comments", "author": {"login": "arcnmx", "id": 13426784, "node_id": "MDQ6VXNlcjEzNDI2Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/13426784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arcnmx", "html_url": "https://github.com/arcnmx", "followers_url": "https://api.github.com/users/arcnmx/followers", "following_url": "https://api.github.com/users/arcnmx/following{/other_user}", "gists_url": "https://api.github.com/users/arcnmx/gists{/gist_id}", "starred_url": "https://api.github.com/users/arcnmx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arcnmx/subscriptions", "organizations_url": "https://api.github.com/users/arcnmx/orgs", "repos_url": "https://api.github.com/users/arcnmx/repos", "events_url": "https://api.github.com/users/arcnmx/events{/privacy}", "received_events_url": "https://api.github.com/users/arcnmx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arcnmx", "id": 13426784, "node_id": "MDQ6VXNlcjEzNDI2Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/13426784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arcnmx", "html_url": "https://github.com/arcnmx", "followers_url": "https://api.github.com/users/arcnmx/followers", "following_url": "https://api.github.com/users/arcnmx/following{/other_user}", "gists_url": "https://api.github.com/users/arcnmx/gists{/gist_id}", "starred_url": "https://api.github.com/users/arcnmx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arcnmx/subscriptions", "organizations_url": "https://api.github.com/users/arcnmx/orgs", "repos_url": "https://api.github.com/users/arcnmx/repos", "events_url": "https://api.github.com/users/arcnmx/events{/privacy}", "received_events_url": "https://api.github.com/users/arcnmx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27a1834ce522e3ec7fe4726b1661de16ee30c503", "url": "https://api.github.com/repos/rust-lang/rust/commits/27a1834ce522e3ec7fe4726b1661de16ee30c503", "html_url": "https://github.com/rust-lang/rust/commit/27a1834ce522e3ec7fe4726b1661de16ee30c503"}], "stats": {"total": 35, "additions": 33, "deletions": 2}, "files": [{"sha": "d2a885dc7fe26ea16847e05c0ed9640135f8dcf4", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 33, "deletions": 2, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/43ab6c7d5a9a9951de487baf49b91fd4b85e584d/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43ab6c7d5a9a9951de487baf49b91fd4b85e584d/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=43ab6c7d5a9a9951de487baf49b91fd4b85e584d", "patch": "@@ -20,7 +20,7 @@ use iter::Iterator;\n use libc;\n use mem;\n use memchr;\n-use ops::Deref;\n+use ops;\n use option::Option::{self, Some, None};\n use os::raw::c_char;\n use result::Result::{self, Ok, Err};\n@@ -282,7 +282,7 @@ impl CString {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl Deref for CString {\n+impl ops::Deref for CString {\n     type Target = CStr;\n \n     fn deref(&self) -> &CStr {\n@@ -522,6 +522,37 @@ impl ToOwned for CStr {\n     }\n }\n \n+#[unstable(feature = \"cstring_asref\", reason = \"recently added\", issue = \"0\")]\n+impl ops::Index<ops::RangeFull> for CString {\n+    type Output = CStr;\n+\n+    #[inline]\n+    fn index(&self, _index: ops::RangeFull) -> &CStr {\n+        self\n+    }\n+}\n+\n+#[unstable(feature = \"cstring_asref\", reason = \"recently added\", issue = \"0\")]\n+impl<'a, T: ?Sized + AsRef<CStr>> From<&'a T> for CString {\n+    fn from(s: &'a T) -> CString {\n+        s.as_ref().to_owned()\n+    }\n+}\n+\n+#[unstable(feature = \"cstring_asref\", reason = \"recently added\", issue = \"0\")]\n+impl AsRef<CStr> for CStr {\n+    fn as_ref(&self) -> &CStr {\n+        self\n+    }\n+}\n+\n+#[unstable(feature = \"cstring_asref\", reason = \"recently added\", issue = \"0\")]\n+impl AsRef<CStr> for CString {\n+    fn as_ref(&self) -> &CStr {\n+        self\n+    }\n+}\n+\n #[cfg(test)]\n mod tests {\n     use prelude::v1::*;"}]}