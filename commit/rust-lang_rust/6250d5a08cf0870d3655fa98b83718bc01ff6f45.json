{"sha": "6250d5a08cf0870d3655fa98b83718bc01ff6f45", "node_id": "C_kwDOAAsO6NoAKDYyNTBkNWEwOGNmMDg3MGQzNjU1ZmE5OGI4MzcxOGJjMDFmZjZmNDU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-28T23:20:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-28T23:20:38Z"}, "message": "Auto merge of #93427 - matthiaskrgr:rollup-esd3ixl, r=matthiaskrgr\n\nRollup of 10 pull requests\n\nSuccessful merges:\n\n - #92611 (Add links to the reference and rust by example for asm! docs and lints)\n - #93158 (wasi: implement `sock_accept` and enable networking)\n - #93239 (Add os::unix::net::SocketAddr::from_path)\n - #93261 (Some unwinding related cg_ssa cleanups)\n - #93295 (Avoid double panics when using `TempDir` in tests)\n - #93353 (Unimpl {Add,Sub,Mul,Div,Rem,BitXor,BitOr,BitAnd}<$t> for Saturating<$t>)\n - #93356 (Edit docs introduction for `std::cmp::PartialOrd`)\n - #93375 (fix typo `documenation`)\n - #93399 (rustbuild: Fix compiletest warning when building outside of root.)\n - #93404 (Fix a typo from #92899)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "5a6368fa9de181de2ac8f9c359aa11773b6d4561", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a6368fa9de181de2ac8f9c359aa11773b6d4561"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6250d5a08cf0870d3655fa98b83718bc01ff6f45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6250d5a08cf0870d3655fa98b83718bc01ff6f45", "html_url": "https://github.com/rust-lang/rust/commit/6250d5a08cf0870d3655fa98b83718bc01ff6f45", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6250d5a08cf0870d3655fa98b83718bc01ff6f45/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0a55f4491a729bffc63b402ba903d90858c806b", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0a55f4491a729bffc63b402ba903d90858c806b", "html_url": "https://github.com/rust-lang/rust/commit/e0a55f4491a729bffc63b402ba903d90858c806b"}, {"sha": "27f68212ab8b5216e986b4bc866257029ff5b2ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/27f68212ab8b5216e986b4bc866257029ff5b2ef", "html_url": "https://github.com/rust-lang/rust/commit/27f68212ab8b5216e986b4bc866257029ff5b2ef"}], "stats": {"total": 575, "additions": 321, "deletions": 254}, "files": [{"sha": "ab88bbe1491f0124ec5569ad775775c66f38fb94", "filename": "Cargo.lock", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6250d5a08cf0870d3655fa98b83718bc01ff6f45/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/6250d5a08cf0870d3655fa98b83718bc01ff6f45/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=6250d5a08cf0870d3655fa98b83718bc01ff6f45", "patch": "@@ -1473,7 +1473,7 @@ checksum = \"7abc8dd8451921606d809ba32e95b6111925cd2906060d2dcc29c070220503eb\"\n dependencies = [\n  \"cfg-if 0.1.10\",\n  \"libc\",\n- \"wasi\",\n+ \"wasi 0.9.0+wasi-snapshot-preview1\",\n ]\n \n [[package]]\n@@ -1484,7 +1484,7 @@ checksum = \"ee8025cf36f917e6a52cce185b7c7177689b838b7ec138364e50cc2277a56cf4\"\n dependencies = [\n  \"cfg-if 0.1.10\",\n  \"libc\",\n- \"wasi\",\n+ \"wasi 0.9.0+wasi-snapshot-preview1\",\n ]\n \n [[package]]\n@@ -4854,7 +4854,7 @@ dependencies = [\n  \"rustc-demangle\",\n  \"std_detect\",\n  \"unwind\",\n- \"wasi\",\n+ \"wasi 0.11.0+wasi-snapshot-preview1\",\n ]\n \n [[package]]\n@@ -5612,6 +5612,12 @@ name = \"wasi\"\n version = \"0.9.0+wasi-snapshot-preview1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"cccddf32554fecc6acb585f82a32a72e28b48f8c4c1883ddfeeeaa96f7d8e519\"\n+\n+[[package]]\n+name = \"wasi\"\n+version = \"0.11.0+wasi-snapshot-preview1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"9c8d87e72b64a3b4db28d11ce29237c246188f4f51057d65a7eab63b7987e423\"\n dependencies = [\n  \"compiler_builtins\",\n  \"rustc-std-workspace-alloc\","}, {"sha": "ffb77e16a14863c505b199efdf2acdb02e9118a8", "filename": "compiler/rustc_codegen_gcc/src/builder.rs", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/6250d5a08cf0870d3655fa98b83718bc01ff6f45/compiler%2Frustc_codegen_gcc%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6250d5a08cf0870d3655fa98b83718bc01ff6f45/compiler%2Frustc_codegen_gcc%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fbuilder.rs?ref=6250d5a08cf0870d3655fa98b83718bc01ff6f45", "patch": "@@ -1256,7 +1256,11 @@ impl<'a, 'gcc, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'gcc, 'tcx> {\n         aggregate_value\n     }\n \n-    fn landing_pad(&mut self, _ty: Type<'gcc>, _pers_fn: RValue<'gcc>, _num_clauses: usize) -> RValue<'gcc> {\n+    fn set_personality_fn(&mut self, _personality: RValue<'gcc>) {\n+        // TODO(antoyo)\n+    }\n+\n+    fn cleanup_landing_pad(&mut self, _ty: Type<'gcc>, _pers_fn: RValue<'gcc>) -> RValue<'gcc> {\n         let field1 = self.context.new_field(None, self.u8_type, \"landing_pad_field_1\");\n         let field2 = self.context.new_field(None, self.i32_type, \"landing_pad_field_1\");\n         let struct_type = self.context.new_struct_type(None, \"landing_pad\", &[field1, field2]);\n@@ -1267,38 +1271,31 @@ impl<'a, 'gcc, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'gcc, 'tcx> {\n         // rustc_codegen_ssa now calls the unwinding builder methods even on panic=abort.\n     }\n \n-    fn set_cleanup(&mut self, _landing_pad: RValue<'gcc>) {\n-        // TODO(antoyo)\n-    }\n-\n-    fn resume(&mut self, _exn: RValue<'gcc>) -> RValue<'gcc> {\n+    fn resume(&mut self, _exn: RValue<'gcc>) {\n         unimplemented!();\n     }\n \n     fn cleanup_pad(&mut self, _parent: Option<RValue<'gcc>>, _args: &[RValue<'gcc>]) -> Funclet {\n         unimplemented!();\n     }\n \n-    fn cleanup_ret(&mut self, _funclet: &Funclet, _unwind: Option<Block<'gcc>>) -> RValue<'gcc> {\n+    fn cleanup_ret(&mut self, _funclet: &Funclet, _unwind: Option<Block<'gcc>>) {\n         unimplemented!();\n     }\n \n     fn catch_pad(&mut self, _parent: RValue<'gcc>, _args: &[RValue<'gcc>]) -> Funclet {\n         unimplemented!();\n     }\n \n-    fn catch_switch(&mut self, _parent: Option<RValue<'gcc>>, _unwind: Option<Block<'gcc>>, _num_handlers: usize) -> RValue<'gcc> {\n+    fn catch_switch(\n+        &mut self,\n+        _parent: Option<RValue<'gcc>>,\n+        _unwind: Option<Block<'gcc>>,\n+        _handlers: &[Block<'gcc>],\n+    ) -> RValue<'gcc> {\n         unimplemented!();\n     }\n \n-    fn add_handler(&mut self, _catch_switch: RValue<'gcc>, _handler: Block<'gcc>) {\n-        unimplemented!();\n-    }\n-\n-    fn set_personality_fn(&mut self, _personality: RValue<'gcc>) {\n-        // TODO(antoyo)\n-    }\n-\n     // Atomic Operations\n     fn atomic_cmpxchg(&mut self, dst: RValue<'gcc>, cmp: RValue<'gcc>, src: RValue<'gcc>, order: AtomicOrdering, failure_order: AtomicOrdering, weak: bool) -> RValue<'gcc> {\n         let expected = self.current_func().new_local(None, cmp.get_type(), \"expected\");"}, {"sha": "c9a04e6280f4092d4537ffec4e535a12ffafa805", "filename": "compiler/rustc_codegen_llvm/src/builder.rs", "status": "modified", "additions": 37, "deletions": 36, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/6250d5a08cf0870d3655fa98b83718bc01ff6f45/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6250d5a08cf0870d3655fa98b83718bc01ff6f45/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs?ref=6250d5a08cf0870d3655fa98b83718bc01ff6f45", "patch": "@@ -956,29 +956,24 @@ impl<'a, 'll, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         unsafe { llvm::LLVMBuildInsertValue(self.llbuilder, agg_val, elt, idx as c_uint, UNNAMED) }\n     }\n \n-    fn landing_pad(\n-        &mut self,\n-        ty: &'ll Type,\n-        pers_fn: &'ll Value,\n-        num_clauses: usize,\n-    ) -> &'ll Value {\n-        // Use LLVMSetPersonalityFn to set the personality. It supports arbitrary Consts while,\n-        // LLVMBuildLandingPad requires the argument to be a Function (as of LLVM 12). The\n-        // personality lives on the parent function anyway.\n-        self.set_personality_fn(pers_fn);\n+    fn set_personality_fn(&mut self, personality: &'ll Value) {\n         unsafe {\n-            llvm::LLVMBuildLandingPad(self.llbuilder, ty, None, num_clauses as c_uint, UNNAMED)\n+            llvm::LLVMSetPersonalityFn(self.llfn(), personality);\n         }\n     }\n \n-    fn set_cleanup(&mut self, landing_pad: &'ll Value) {\n+    fn cleanup_landing_pad(&mut self, ty: &'ll Type, pers_fn: &'ll Value) -> &'ll Value {\n+        let landing_pad = self.landing_pad(ty, pers_fn, 1 /* FIXME should this be 0? */);\n         unsafe {\n             llvm::LLVMSetCleanup(landing_pad, llvm::True);\n         }\n+        landing_pad\n     }\n \n-    fn resume(&mut self, exn: &'ll Value) -> &'ll Value {\n-        unsafe { llvm::LLVMBuildResume(self.llbuilder, exn) }\n+    fn resume(&mut self, exn: &'ll Value) {\n+        unsafe {\n+            llvm::LLVMBuildResume(self.llbuilder, exn);\n+        }\n     }\n \n     fn cleanup_pad(&mut self, parent: Option<&'ll Value>, args: &[&'ll Value]) -> Funclet<'ll> {\n@@ -995,14 +990,11 @@ impl<'a, 'll, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         Funclet::new(ret.expect(\"LLVM does not have support for cleanuppad\"))\n     }\n \n-    fn cleanup_ret(\n-        &mut self,\n-        funclet: &Funclet<'ll>,\n-        unwind: Option<&'ll BasicBlock>,\n-    ) -> &'ll Value {\n-        let ret =\n-            unsafe { llvm::LLVMRustBuildCleanupRet(self.llbuilder, funclet.cleanuppad(), unwind) };\n-        ret.expect(\"LLVM does not have support for cleanupret\")\n+    fn cleanup_ret(&mut self, funclet: &Funclet<'ll>, unwind: Option<&'ll BasicBlock>) {\n+        unsafe {\n+            llvm::LLVMRustBuildCleanupRet(self.llbuilder, funclet.cleanuppad(), unwind)\n+                .expect(\"LLVM does not have support for cleanupret\");\n+        }\n     }\n \n     fn catch_pad(&mut self, parent: &'ll Value, args: &[&'ll Value]) -> Funclet<'ll> {\n@@ -1023,31 +1015,25 @@ impl<'a, 'll, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         &mut self,\n         parent: Option<&'ll Value>,\n         unwind: Option<&'ll BasicBlock>,\n-        num_handlers: usize,\n+        handlers: &[&'ll BasicBlock],\n     ) -> &'ll Value {\n         let name = cstr!(\"catchswitch\");\n         let ret = unsafe {\n             llvm::LLVMRustBuildCatchSwitch(\n                 self.llbuilder,\n                 parent,\n                 unwind,\n-                num_handlers as c_uint,\n+                handlers.len() as c_uint,\n                 name.as_ptr(),\n             )\n         };\n-        ret.expect(\"LLVM does not have support for catchswitch\")\n-    }\n-\n-    fn add_handler(&mut self, catch_switch: &'ll Value, handler: &'ll BasicBlock) {\n-        unsafe {\n-            llvm::LLVMRustAddHandler(catch_switch, handler);\n-        }\n-    }\n-\n-    fn set_personality_fn(&mut self, personality: &'ll Value) {\n-        unsafe {\n-            llvm::LLVMSetPersonalityFn(self.llfn(), personality);\n+        let ret = ret.expect(\"LLVM does not have support for catchswitch\");\n+        for handler in handlers {\n+            unsafe {\n+                llvm::LLVMRustAddHandler(ret, handler);\n+            }\n         }\n+        ret\n     }\n \n     // Atomic Operations\n@@ -1478,4 +1464,19 @@ impl<'a, 'll, 'tcx> Builder<'a, 'll, 'tcx> {\n             None\n         }\n     }\n+\n+    pub(crate) fn landing_pad(\n+        &mut self,\n+        ty: &'ll Type,\n+        pers_fn: &'ll Value,\n+        num_clauses: usize,\n+    ) -> &'ll Value {\n+        // Use LLVMSetPersonalityFn to set the personality. It supports arbitrary Consts while,\n+        // LLVMBuildLandingPad requires the argument to be a Function (as of LLVM 12). The\n+        // personality lives on the parent function anyway.\n+        self.set_personality_fn(pers_fn);\n+        unsafe {\n+            llvm::LLVMBuildLandingPad(self.llbuilder, ty, None, num_clauses as c_uint, UNNAMED)\n+        }\n+    }\n }"}, {"sha": "f51d014bfb39a97f2af4c07efccff68fe5771af8", "filename": "compiler/rustc_codegen_llvm/src/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6250d5a08cf0870d3655fa98b83718bc01ff6f45/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6250d5a08cf0870d3655fa98b83718bc01ff6f45/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs?ref=6250d5a08cf0870d3655fa98b83718bc01ff6f45", "patch": "@@ -525,9 +525,8 @@ fn codegen_msvc_try<'ll>(\n \n         normal.ret(bx.const_i32(0));\n \n-        let cs = catchswitch.catch_switch(None, None, 2);\n-        catchswitch.add_handler(cs, catchpad_rust.llbb());\n-        catchswitch.add_handler(cs, catchpad_foreign.llbb());\n+        let cs =\n+            catchswitch.catch_switch(None, None, &[catchpad_rust.llbb(), catchpad_foreign.llbb()]);\n \n         // We can't use the TypeDescriptor defined in libpanic_unwind because it\n         // might be in another DLL and the SEH encoding only supports specifying"}, {"sha": "4c7a09ca1e94b2ede7ff45f957aaf240552c3a8e", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6250d5a08cf0870d3655fa98b83718bc01ff6f45/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6250d5a08cf0870d3655fa98b83718bc01ff6f45/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=6250d5a08cf0870d3655fa98b83718bc01ff6f45", "patch": "@@ -1346,8 +1346,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     let mut cp_bx = self.new_block(&format!(\"cp_funclet{:?}\", bb));\n                     ret_llbb = cs_bx.llbb();\n \n-                    let cs = cs_bx.catch_switch(None, None, 1);\n-                    cs_bx.add_handler(cs, cp_bx.llbb());\n+                    let cs = cs_bx.catch_switch(None, None, &[cp_bx.llbb()]);\n \n                     // The \"null\" here is actually a RTTI type descriptor for the\n                     // C++ personality function, but `catch (...)` has no type so\n@@ -1374,8 +1373,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n \n             let llpersonality = self.cx.eh_personality();\n             let llretty = self.landing_pad_type();\n-            let lp = bx.landing_pad(llretty, llpersonality, 1);\n-            bx.set_cleanup(lp);\n+            let lp = bx.cleanup_landing_pad(llretty, llpersonality);\n \n             let slot = self.get_personality_slot(&mut bx);\n             slot.storage_live(&mut bx);"}, {"sha": "53fb21b269a12f46a3696388ff69324d1f773132", "filename": "compiler/rustc_codegen_ssa/src/traits/builder.rs", "status": "modified", "additions": 9, "deletions": 16, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6250d5a08cf0870d3655fa98b83718bc01ff6f45/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6250d5a08cf0870d3655fa98b83718bc01ff6f45/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbuilder.rs?ref=6250d5a08cf0870d3655fa98b83718bc01ff6f45", "patch": "@@ -421,29 +421,22 @@ pub trait BuilderMethods<'a, 'tcx>:\n     fn extract_value(&mut self, agg_val: Self::Value, idx: u64) -> Self::Value;\n     fn insert_value(&mut self, agg_val: Self::Value, elt: Self::Value, idx: u64) -> Self::Value;\n \n-    fn landing_pad(\n-        &mut self,\n-        ty: Self::Type,\n-        pers_fn: Self::Value,\n-        num_clauses: usize,\n-    ) -> Self::Value;\n-    fn set_cleanup(&mut self, landing_pad: Self::Value);\n-    fn resume(&mut self, exn: Self::Value) -> Self::Value;\n+    fn set_personality_fn(&mut self, personality: Self::Value);\n+\n+    // These are used by everyone except msvc\n+    fn cleanup_landing_pad(&mut self, ty: Self::Type, pers_fn: Self::Value) -> Self::Value;\n+    fn resume(&mut self, exn: Self::Value);\n+\n+    // These are used only by msvc\n     fn cleanup_pad(&mut self, parent: Option<Self::Value>, args: &[Self::Value]) -> Self::Funclet;\n-    fn cleanup_ret(\n-        &mut self,\n-        funclet: &Self::Funclet,\n-        unwind: Option<Self::BasicBlock>,\n-    ) -> Self::Value;\n+    fn cleanup_ret(&mut self, funclet: &Self::Funclet, unwind: Option<Self::BasicBlock>);\n     fn catch_pad(&mut self, parent: Self::Value, args: &[Self::Value]) -> Self::Funclet;\n     fn catch_switch(\n         &mut self,\n         parent: Option<Self::Value>,\n         unwind: Option<Self::BasicBlock>,\n-        num_handlers: usize,\n+        handlers: &[Self::BasicBlock],\n     ) -> Self::Value;\n-    fn add_handler(&mut self, catch_switch: Self::Value, handler: Self::BasicBlock);\n-    fn set_personality_fn(&mut self, personality: Self::Value);\n \n     fn atomic_cmpxchg(\n         &mut self,"}, {"sha": "9b24f43f7fd32863ee49eb55202815df76ff6d26", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6250d5a08cf0870d3655fa98b83718bc01ff6f45/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6250d5a08cf0870d3655fa98b83718bc01ff6f45/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=6250d5a08cf0870d3655fa98b83718bc01ff6f45", "patch": "@@ -3158,7 +3158,10 @@ declare_lint! {\n     /// of this, GNU assembler [local labels] *must* be used instead of labels\n     /// with a name. Using named labels might cause assembler or linker errors.\n     ///\n+    /// See the explanation in [Rust By Example] for more details.\n+    ///\n     /// [local labels]: https://sourceware.org/binutils/docs/as/Symbol-Names.html#Local-Labels\n+    /// [Rust By Example]: https://doc.rust-lang.org/nightly/rust-by-example/unsafe/asm.html#labels\n     pub NAMED_ASM_LABELS,\n     Deny,\n     \"named labels in inline assembly\","}, {"sha": "21c25a2fd989dd02600a1277ade8c3b27450a3a2", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6250d5a08cf0870d3655fa98b83718bc01ff6f45/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6250d5a08cf0870d3655fa98b83718bc01ff6f45/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=6250d5a08cf0870d3655fa98b83718bc01ff6f45", "patch": "@@ -762,6 +762,7 @@ pub trait LintContext: Sized {\n                 }\n                 BuiltinLintDiagnostics::NamedAsmLabel(help) => {\n                     db.help(&help);\n+                    db.note(\"see the asm section of Rust By Example <https://doc.rust-lang.org/nightly/rust-by-example/unsafe/asm.html#labels> for more information\");\n                 }\n             }\n             // Rewrap `db`, and pass control to the user."}, {"sha": "4af68233f0dd0d34b7fd185d503e3b4ec4dd1f59", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6250d5a08cf0870d3655fa98b83718bc01ff6f45/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6250d5a08cf0870d3655fa98b83718bc01ff6f45/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=6250d5a08cf0870d3655fa98b83718bc01ff6f45", "patch": "@@ -2456,6 +2456,10 @@ declare_lint! {\n     /// register size, to alert you of possibly using the incorrect width. To\n     /// fix this, add the suggested modifier to the template, or cast the\n     /// value to the correct size.\n+    ///\n+    /// See [register template modifiers] in the reference for more details.\n+    ///\n+    /// [register template modifiers]: https://doc.rust-lang.org/nightly/reference/inline-assembly.html#template-modifiers\n     pub ASM_SUB_REGISTER,\n     Warn,\n     \"using only a subset of a register for inline asm inputs\","}, {"sha": "a3e7747991190acccc0337aecfcb00c9462d7a6c", "filename": "library/core/src/cmp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6250d5a08cf0870d3655fa98b83718bc01ff6f45/library%2Fcore%2Fsrc%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6250d5a08cf0870d3655fa98b83718bc01ff6f45/library%2Fcore%2Fsrc%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcmp.rs?ref=6250d5a08cf0870d3655fa98b83718bc01ff6f45", "patch": "@@ -880,7 +880,7 @@ impl PartialOrd for Ordering {\n     }\n }\n \n-/// Trait for values that can be compared for a sort-order.\n+/// Trait for types that form a [partial order](https://en.wikipedia.org/wiki/Partial_order).\n ///\n /// The `lt`, `le`, `gt`, and `ge` methods of this trait can be called using\n /// the `<`, `<=`, `>`, and `>=` operators, respectively."}, {"sha": "a8fe5f59bae0148794c333f14e48b6588d216b49", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6250d5a08cf0870d3655fa98b83718bc01ff6f45/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6250d5a08cf0870d3655fa98b83718bc01ff6f45/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=6250d5a08cf0870d3655fa98b83718bc01ff6f45", "patch": "@@ -515,7 +515,7 @@ pub trait Iterator {\n     /// assert_eq!((2, 'o'), zipper[2]);\n     /// ```\n     ///\n-    /// If both iterators have roughly equivalent syntax, it may me more readable to use [`zip`]:\n+    /// If both iterators have roughly equivalent syntax, it may be more readable to use [`zip`]:\n     ///\n     /// ```\n     /// use std::iter::zip;"}, {"sha": "ade888ed26e6194e09da5f999fec38eec06553c5", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6250d5a08cf0870d3655fa98b83718bc01ff6f45/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6250d5a08cf0870d3655fa98b83718bc01ff6f45/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=6250d5a08cf0870d3655fa98b83718bc01ff6f45", "patch": "@@ -374,13 +374,25 @@ pub mod arch {\n     pub use crate::core_arch::arch::*;\n \n     /// Inline assembly.\n+    ///\n+    /// Refer to [rust by example] for a usage guide and the [reference] for\n+    /// detailed information about the syntax and available options.\n+    ///\n+    /// [rust by example]: https://doc.rust-lang.org/nightly/rust-by-example/unsafe/asm.html\n+    /// [reference]: https://doc.rust-lang.org/nightly/reference/inline-assembly.html\n     #[stable(feature = \"asm\", since = \"1.59.0\")]\n     #[rustc_builtin_macro]\n     pub macro asm(\"assembly template\", $(operands,)* $(options($(option),*))?) {\n         /* compiler built-in */\n     }\n \n     /// Module-level inline assembly.\n+    ///\n+    /// Refer to [rust by example] for a usage guide and the [reference] for\n+    /// detailed information about the syntax and available options.\n+    ///\n+    /// [rust by example]: https://doc.rust-lang.org/nightly/rust-by-example/unsafe/asm.html\n+    /// [reference]: https://doc.rust-lang.org/nightly/reference/inline-assembly.html\n     #[stable(feature = \"global_asm\", since = \"1.59.0\")]\n     #[rustc_builtin_macro]\n     pub macro global_asm(\"assembly template\", $(operands,)* $(options($(option),*))?) {"}, {"sha": "8982473b2dc0378bed4cd2bab60feba7239037c4", "filename": "library/core/src/num/saturating.rs", "status": "modified", "additions": 8, "deletions": 122, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/6250d5a08cf0870d3655fa98b83718bc01ff6f45/library%2Fcore%2Fsrc%2Fnum%2Fsaturating.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6250d5a08cf0870d3655fa98b83718bc01ff6f45/library%2Fcore%2Fsrc%2Fnum%2Fsaturating.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fsaturating.rs?ref=6250d5a08cf0870d3655fa98b83718bc01ff6f45", "patch": "@@ -217,18 +217,6 @@ macro_rules! saturating_impl {\n         forward_ref_binop! { impl Add, add for Saturating<$t>, Saturating<$t>,\n                 #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")] }\n \n-        #[unstable(feature = \"saturating_int_assign_impl\", issue = \"92354\")]\n-        impl Add<$t> for Saturating<$t> {\n-            type Output = Saturating<$t>;\n-\n-            #[inline]\n-            fn add(self, other: $t) -> Saturating<$t> {\n-                Saturating(self.0.saturating_add(other))\n-            }\n-        }\n-        forward_ref_binop! { impl Add, add for Saturating<$t>, $t,\n-                #[unstable(feature = \"saturating_int_assign_impl\", issue = \"92354\")] }\n-\n         #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n         impl AddAssign for Saturating<$t> {\n             #[inline]\n@@ -242,7 +230,7 @@ macro_rules! saturating_impl {\n         impl AddAssign<$t> for Saturating<$t> {\n             #[inline]\n             fn add_assign(&mut self, other: $t) {\n-                *self = *self + other;\n+                *self = *self + Saturating(other);\n             }\n         }\n         forward_ref_op_assign! { impl AddAssign, add_assign for Saturating<$t>, $t }\n@@ -259,18 +247,6 @@ macro_rules! saturating_impl {\n         forward_ref_binop! { impl Sub, sub for Saturating<$t>, Saturating<$t>,\n                 #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")] }\n \n-        #[unstable(feature = \"saturating_int_assign_impl\", issue = \"92354\")]\n-        impl Sub<$t> for Saturating<$t> {\n-            type Output = Saturating<$t>;\n-\n-            #[inline]\n-            fn sub(self, other: $t) -> Saturating<$t> {\n-                Saturating(self.0.saturating_sub(other))\n-            }\n-        }\n-        forward_ref_binop! { impl Sub, sub for Saturating<$t>, $t,\n-                #[unstable(feature = \"saturating_int_assign_impl\", issue = \"92354\")] }\n-\n         #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n         impl SubAssign for Saturating<$t> {\n             #[inline]\n@@ -284,7 +260,7 @@ macro_rules! saturating_impl {\n         impl SubAssign<$t> for Saturating<$t> {\n             #[inline]\n             fn sub_assign(&mut self, other: $t) {\n-                *self = *self - other;\n+                *self = *self - Saturating(other);\n             }\n         }\n         forward_ref_op_assign! { impl SubAssign, sub_assign for Saturating<$t>, $t }\n@@ -301,18 +277,6 @@ macro_rules! saturating_impl {\n         forward_ref_binop! { impl Mul, mul for Saturating<$t>, Saturating<$t>,\n                 #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")] }\n \n-        #[unstable(feature = \"saturating_int_assign_impl\", issue = \"92354\")]\n-        impl Mul<$t> for Saturating<$t> {\n-            type Output = Saturating<$t>;\n-\n-            #[inline]\n-            fn mul(self, other: $t) -> Saturating<$t> {\n-                Saturating(self.0.saturating_mul(other))\n-            }\n-        }\n-        forward_ref_binop! { impl Mul, mul for Saturating<$t>, $t,\n-                #[unstable(feature = \"saturating_int_assign_impl\", issue = \"92354\")] }\n-\n         #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n         impl MulAssign for Saturating<$t> {\n             #[inline]\n@@ -326,7 +290,7 @@ macro_rules! saturating_impl {\n         impl MulAssign<$t> for Saturating<$t> {\n             #[inline]\n             fn mul_assign(&mut self, other: $t) {\n-                *self = *self * other;\n+                *self = *self * Saturating(other);\n             }\n         }\n         forward_ref_op_assign! { impl MulAssign, mul_assign for Saturating<$t>, $t }\n@@ -362,36 +326,6 @@ macro_rules! saturating_impl {\n         forward_ref_binop! { impl Div, div for Saturating<$t>, Saturating<$t>,\n                 #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")] }\n \n-        /// # Examples\n-        ///\n-        /// Basic usage:\n-        ///\n-        /// ```\n-        /// #![feature(saturating_int_impl, saturating_int_assign_impl)]\n-        /// use std::num::Saturating;\n-        ///\n-        #[doc = concat!(\"assert_eq!(Saturating(2\", stringify!($t), \"), Saturating(5\", stringify!($t), \") / 2);\")]\n-        #[doc = concat!(\"assert_eq!(Saturating(\", stringify!($t), \"::MAX), Saturating(\", stringify!($t), \"::MAX) / 1);\")]\n-        #[doc = concat!(\"assert_eq!(Saturating(\", stringify!($t), \"::MIN), Saturating(\", stringify!($t), \"::MIN) / 1);\")]\n-        /// ```\n-        ///\n-        /// ```should_panic\n-        /// #![feature(saturating_int_impl, saturating_int_assign_impl)]\n-        /// use std::num::Saturating;\n-        ///\n-        #[doc = concat!(\"let _ = Saturating(0\", stringify!($t), \") / 0;\")]\n-        /// ```\n-        #[unstable(feature = \"saturating_int_assign_impl\", issue = \"92354\")]\n-        impl Div<$t> for Saturating<$t> {\n-            type Output = Saturating<$t>;\n-\n-            #[inline]\n-            fn div(self, other: $t) -> Saturating<$t> {\n-                Saturating(self.0.saturating_div(other))\n-            }\n-        }\n-        forward_ref_binop! { impl Div, div for Saturating<$t>, $t,\n-                #[unstable(feature = \"saturating_int_assign_impl\", issue = \"92354\")] }\n \n         #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n         impl DivAssign for Saturating<$t> {\n@@ -406,7 +340,7 @@ macro_rules! saturating_impl {\n         impl DivAssign<$t> for Saturating<$t> {\n             #[inline]\n             fn div_assign(&mut self, other: $t) {\n-                *self = *self / other;\n+                *self = *self / Saturating(other);\n             }\n         }\n         forward_ref_op_assign! { impl DivAssign, div_assign for Saturating<$t>, $t }\n@@ -423,18 +357,6 @@ macro_rules! saturating_impl {\n         forward_ref_binop! { impl Rem, rem for Saturating<$t>, Saturating<$t>,\n                 #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")] }\n \n-        #[unstable(feature = \"saturating_int_assign_impl\", issue = \"92354\")]\n-        impl Rem<$t> for Saturating<$t> {\n-            type Output = Saturating<$t>;\n-\n-            #[inline]\n-            fn rem(self, other: $t) -> Saturating<$t> {\n-                Saturating(self.0.rem(other))\n-            }\n-        }\n-        forward_ref_binop! { impl Rem, rem for Saturating<$t>, $t,\n-                #[unstable(feature = \"saturating_int_assign_impl\", issue = \"92354\")] }\n-\n         #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n         impl RemAssign for Saturating<$t> {\n             #[inline]\n@@ -448,7 +370,7 @@ macro_rules! saturating_impl {\n         impl RemAssign<$t> for Saturating<$t> {\n             #[inline]\n             fn rem_assign(&mut self, other: $t) {\n-                *self = *self % other;\n+                *self = *self % Saturating(other);\n             }\n         }\n         forward_ref_op_assign! { impl RemAssign, rem_assign for Saturating<$t>, $t }\n@@ -477,18 +399,6 @@ macro_rules! saturating_impl {\n         forward_ref_binop! { impl BitXor, bitxor for Saturating<$t>, Saturating<$t>,\n                 #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")] }\n \n-        #[unstable(feature = \"saturating_int_assign_impl\", issue = \"92354\")]\n-        impl BitXor<$t> for Saturating<$t> {\n-            type Output = Saturating<$t>;\n-\n-            #[inline]\n-            fn bitxor(self, other: $t) -> Saturating<$t> {\n-                Saturating(self.0 ^ other)\n-            }\n-        }\n-        forward_ref_binop! { impl BitXor, bitxor for Saturating<$t>, $t,\n-                #[unstable(feature = \"saturating_int_assign_impl\", issue = \"92354\")] }\n-\n         #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n         impl BitXorAssign for Saturating<$t> {\n             #[inline]\n@@ -502,7 +412,7 @@ macro_rules! saturating_impl {\n         impl BitXorAssign<$t> for Saturating<$t> {\n             #[inline]\n             fn bitxor_assign(&mut self, other: $t) {\n-                *self = *self ^ other;\n+                *self = *self ^ Saturating(other);\n             }\n         }\n         forward_ref_op_assign! { impl BitXorAssign, bitxor_assign for Saturating<$t>, $t }\n@@ -519,18 +429,6 @@ macro_rules! saturating_impl {\n         forward_ref_binop! { impl BitOr, bitor for Saturating<$t>, Saturating<$t>,\n                 #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")] }\n \n-        #[unstable(feature = \"saturating_int_assign_impl\", issue = \"92354\")]\n-        impl BitOr<$t> for Saturating<$t> {\n-            type Output = Saturating<$t>;\n-\n-            #[inline]\n-            fn bitor(self, other: $t) -> Saturating<$t> {\n-                Saturating(self.0 | other)\n-            }\n-        }\n-        forward_ref_binop! { impl BitOr, bitor for Saturating<$t>, $t,\n-                #[unstable(feature = \"saturating_int_assign_impl\", issue = \"92354\")] }\n-\n         #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n         impl BitOrAssign for Saturating<$t> {\n             #[inline]\n@@ -544,7 +442,7 @@ macro_rules! saturating_impl {\n         impl BitOrAssign<$t> for Saturating<$t> {\n             #[inline]\n             fn bitor_assign(&mut self, other: $t) {\n-                *self = *self | other;\n+                *self = *self | Saturating(other);\n             }\n         }\n         forward_ref_op_assign! { impl BitOrAssign, bitor_assign for Saturating<$t>, $t }\n@@ -561,18 +459,6 @@ macro_rules! saturating_impl {\n         forward_ref_binop! { impl BitAnd, bitand for Saturating<$t>, Saturating<$t>,\n                 #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")] }\n \n-        #[unstable(feature = \"saturating_int_assign_impl\", issue = \"92354\")]\n-        impl BitAnd<$t> for Saturating<$t> {\n-            type Output = Saturating<$t>;\n-\n-            #[inline]\n-            fn bitand(self, other: $t) -> Saturating<$t> {\n-                Saturating(self.0 & other)\n-            }\n-        }\n-        forward_ref_binop! { impl BitAnd, bitand for Saturating<$t>, $t,\n-                #[unstable(feature = \"saturating_int_assign_impl\", issue = \"92354\")] }\n-\n         #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n         impl BitAndAssign for Saturating<$t> {\n             #[inline]\n@@ -586,7 +472,7 @@ macro_rules! saturating_impl {\n         impl BitAndAssign<$t> for Saturating<$t> {\n             #[inline]\n             fn bitand_assign(&mut self, other: $t) {\n-                *self = *self & other;\n+                *self = *self & Saturating(other);\n             }\n         }\n         forward_ref_op_assign! { impl BitAndAssign, bitand_assign for Saturating<$t>, $t }"}, {"sha": "c54f38615c5801de3e7f97b18149df259c0bac9b", "filename": "library/std/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6250d5a08cf0870d3655fa98b83718bc01ff6f45/library%2Fstd%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/6250d5a08cf0870d3655fa98b83718bc01ff6f45/library%2Fstd%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2FCargo.toml?ref=6250d5a08cf0870d3655fa98b83718bc01ff6f45", "patch": "@@ -45,7 +45,7 @@ fortanix-sgx-abi = { version = \"0.3.2\", features = ['rustc-dep-of-std'] }\n hermit-abi = { version = \"0.1.19\", features = ['rustc-dep-of-std'] }\n \n [target.wasm32-wasi.dependencies]\n-wasi = { version = \"0.9.0\", features = ['rustc-dep-of-std'], default-features = false }\n+wasi = { version = \"0.11.0\", features = ['rustc-dep-of-std'], default-features = false }\n \n [features]\n backtrace = ["}, {"sha": "9dbd4548bc92d02240e64b20a7bf24b9380ce0e5", "filename": "library/std/src/os/unix/net/addr.rs", "status": "modified", "additions": 48, "deletions": 8, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/6250d5a08cf0870d3655fa98b83718bc01ff6f45/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6250d5a08cf0870d3655fa98b83718bc01ff6f45/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Faddr.rs?ref=6250d5a08cf0870d3655fa98b83718bc01ff6f45", "patch": "@@ -2,7 +2,7 @@ use crate::ffi::OsStr;\n use crate::os::unix::ffi::OsStrExt;\n use crate::path::Path;\n use crate::sys::cvt;\n-use crate::{ascii, fmt, io, iter, mem};\n+use crate::{ascii, fmt, io, mem, ptr};\n \n // FIXME(#43348): Make libc adapt #[doc(cfg(...))] so we don't need these fake definitions here?\n #[cfg(not(unix))]\n@@ -22,8 +22,9 @@ fn sun_path_offset(addr: &libc::sockaddr_un) -> usize {\n     path - base\n }\n \n-pub(super) unsafe fn sockaddr_un(path: &Path) -> io::Result<(libc::sockaddr_un, libc::socklen_t)> {\n-    let mut addr: libc::sockaddr_un = mem::zeroed();\n+pub(super) fn sockaddr_un(path: &Path) -> io::Result<(libc::sockaddr_un, libc::socklen_t)> {\n+    // SAFETY: All zeros is a valid representation for `sockaddr_un`.\n+    let mut addr: libc::sockaddr_un = unsafe { mem::zeroed() };\n     addr.sun_family = libc::AF_UNIX as libc::sa_family_t;\n \n     let bytes = path.as_os_str().as_bytes();\n@@ -41,11 +42,13 @@ pub(super) unsafe fn sockaddr_un(path: &Path) -> io::Result<(libc::sockaddr_un,\n             &\"path must be shorter than SUN_LEN\",\n         ));\n     }\n-    for (dst, src) in iter::zip(&mut addr.sun_path, bytes) {\n-        *dst = *src as libc::c_char;\n-    }\n-    // null byte for pathname addresses is already there because we zeroed the\n-    // struct\n+    // SAFETY: `bytes` and `addr.sun_path` are not overlapping and\n+    // both point to valid memory.\n+    // NOTE: We zeroed the memory above, so the path is already null\n+    // terminated.\n+    unsafe {\n+        ptr::copy_nonoverlapping(bytes.as_ptr(), addr.sun_path.as_mut_ptr().cast(), bytes.len())\n+    };\n \n     let mut len = sun_path_offset(&addr) + bytes.len();\n     match bytes.get(0) {\n@@ -127,6 +130,43 @@ impl SocketAddr {\n         Ok(SocketAddr { addr, len })\n     }\n \n+    /// Constructs a `SockAddr` with the family `AF_UNIX` and the provided path.\n+    ///\n+    /// # Errors\n+    ///\n+    /// Returns an error if the path is longer than `SUN_LEN` or if it contains\n+    /// NULL bytes.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(unix_socket_creation)]\n+    /// use std::os::unix::net::SocketAddr;\n+    /// use std::path::Path;\n+    ///\n+    /// # fn main() -> std::io::Result<()> {\n+    /// let address = SocketAddr::from_path(\"/path/to/socket\")?;\n+    /// assert_eq!(address.as_pathname(), Some(Path::new(\"/path/to/socket\")));\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n+    ///\n+    /// Creating a `SocketAddr` with a NULL byte results in an error.\n+    ///\n+    /// ```\n+    /// #![feature(unix_socket_creation)]\n+    /// use std::os::unix::net::SocketAddr;\n+    ///\n+    /// assert!(SocketAddr::from_path(\"/path/with/\\0/bytes\").is_err());\n+    /// ```\n+    #[unstable(feature = \"unix_socket_creation\", issue = \"93423\")]\n+    pub fn from_path<P>(path: P) -> io::Result<SocketAddr>\n+    where\n+        P: AsRef<Path>,\n+    {\n+        sockaddr_un(path.as_ref()).map(|(addr, len)| SocketAddr { addr, len })\n+    }\n+\n     /// Returns `true` if the address is unnamed.\n     ///\n     /// # Examples"}, {"sha": "37126069f942b218d0f1f8bef319d8bab01f7b34", "filename": "library/std/src/os/wasi/fs.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6250d5a08cf0870d3655fa98b83718bc01ff6f45/library%2Fstd%2Fsrc%2Fos%2Fwasi%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6250d5a08cf0870d3655fa98b83718bc01ff6f45/library%2Fstd%2Fsrc%2Fos%2Fwasi%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwasi%2Ffs.rs?ref=6250d5a08cf0870d3655fa98b83718bc01ff6f45", "patch": "@@ -250,6 +250,21 @@ impl FileExt for fs::File {\n     }\n \n     fn advise(&self, offset: u64, len: u64, advice: u8) -> io::Result<()> {\n+        let advice = match advice {\n+            a if a == wasi::ADVICE_NORMAL.raw() => wasi::ADVICE_NORMAL,\n+            a if a == wasi::ADVICE_SEQUENTIAL.raw() => wasi::ADVICE_SEQUENTIAL,\n+            a if a == wasi::ADVICE_RANDOM.raw() => wasi::ADVICE_RANDOM,\n+            a if a == wasi::ADVICE_WILLNEED.raw() => wasi::ADVICE_WILLNEED,\n+            a if a == wasi::ADVICE_DONTNEED.raw() => wasi::ADVICE_DONTNEED,\n+            a if a == wasi::ADVICE_NOREUSE.raw() => wasi::ADVICE_NOREUSE,\n+            _ => {\n+                return Err(io::Error::new_const(\n+                    io::ErrorKind::InvalidInput,\n+                    &\"invalid parameter 'advice'\",\n+                ));\n+            }\n+        };\n+\n         self.as_inner().as_inner().advise(offset, len, advice)\n     }\n "}, {"sha": "73c097d4a50abbe647490dc29c4072802f909156", "filename": "library/std/src/os/wasi/net/mod.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6250d5a08cf0870d3655fa98b83718bc01ff6f45/library%2Fstd%2Fsrc%2Fos%2Fwasi%2Fnet%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6250d5a08cf0870d3655fa98b83718bc01ff6f45/library%2Fstd%2Fsrc%2Fos%2Fwasi%2Fnet%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwasi%2Fnet%2Fmod.rs?ref=6250d5a08cf0870d3655fa98b83718bc01ff6f45", "patch": "@@ -1,3 +1,23 @@\n //! WASI-specific networking functionality\n \n #![unstable(feature = \"wasi_ext\", issue = \"71213\")]\n+\n+use crate::io;\n+use crate::net;\n+use crate::sys_common::AsInner;\n+\n+/// WASI-specific extensions to [`std::net::TcpListener`].\n+///\n+/// [`std::net::TcpListener`]: crate::net::TcpListener\n+pub trait TcpListenerExt {\n+    /// Accept a socket.\n+    ///\n+    /// This corresponds to the `sock_accept` syscall.\n+    fn sock_accept(&self, flags: u16) -> io::Result<u32>;\n+}\n+\n+impl TcpListenerExt for net::TcpListener {\n+    fn sock_accept(&self, flags: u16) -> io::Result<u32> {\n+        self.as_inner().as_inner().as_inner().sock_accept(flags)\n+    }\n+}"}, {"sha": "0b9c8e61db84c4ec76c3017bd6d0b3b804148637", "filename": "library/std/src/sys/wasi/fd.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6250d5a08cf0870d3655fa98b83718bc01ff6f45/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6250d5a08cf0870d3655fa98b83718bc01ff6f45/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ffd.rs?ref=6250d5a08cf0870d3655fa98b83718bc01ff6f45", "patch": "@@ -228,6 +228,10 @@ impl WasiFd {\n         unsafe { wasi::path_remove_directory(self.as_raw_fd() as wasi::Fd, path).map_err(err2io) }\n     }\n \n+    pub fn sock_accept(&self, flags: wasi::Fdflags) -> io::Result<wasi::Fd> {\n+        unsafe { wasi::sock_accept(self.as_raw_fd() as wasi::Fd, flags).map_err(err2io) }\n+    }\n+\n     pub fn sock_recv(\n         &self,\n         ri_data: &mut [IoSliceMut<'_>],"}, {"sha": "f878941939ce8915f60a760bb8f5eaf493f7ef6e", "filename": "library/std/src/sys/wasi/mod.rs", "status": "modified", "additions": 22, "deletions": 19, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/6250d5a08cf0870d3655fa98b83718bc01ff6f45/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6250d5a08cf0870d3655fa98b83718bc01ff6f45/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fmod.rs?ref=6250d5a08cf0870d3655fa98b83718bc01ff6f45", "patch": "@@ -61,23 +61,26 @@ pub fn decode_error_kind(errno: i32) -> std_io::ErrorKind {\n     if errno > u16::MAX as i32 || errno < 0 {\n         return Uncategorized;\n     }\n-    match errno as u16 {\n-        wasi::ERRNO_CONNREFUSED => ConnectionRefused,\n-        wasi::ERRNO_CONNRESET => ConnectionReset,\n-        wasi::ERRNO_PERM | wasi::ERRNO_ACCES => PermissionDenied,\n-        wasi::ERRNO_PIPE => BrokenPipe,\n-        wasi::ERRNO_NOTCONN => NotConnected,\n-        wasi::ERRNO_CONNABORTED => ConnectionAborted,\n-        wasi::ERRNO_ADDRNOTAVAIL => AddrNotAvailable,\n-        wasi::ERRNO_ADDRINUSE => AddrInUse,\n-        wasi::ERRNO_NOENT => NotFound,\n-        wasi::ERRNO_INTR => Interrupted,\n-        wasi::ERRNO_INVAL => InvalidInput,\n-        wasi::ERRNO_TIMEDOUT => TimedOut,\n-        wasi::ERRNO_EXIST => AlreadyExists,\n-        wasi::ERRNO_AGAIN => WouldBlock,\n-        wasi::ERRNO_NOSYS => Unsupported,\n-        wasi::ERRNO_NOMEM => OutOfMemory,\n+\n+    match errno {\n+        e if e == wasi::ERRNO_CONNREFUSED.raw().into() => ConnectionRefused,\n+        e if e == wasi::ERRNO_CONNRESET.raw().into() => ConnectionReset,\n+        e if e == wasi::ERRNO_PERM.raw().into() || e == wasi::ERRNO_ACCES.raw().into() => {\n+            PermissionDenied\n+        }\n+        e if e == wasi::ERRNO_PIPE.raw().into() => BrokenPipe,\n+        e if e == wasi::ERRNO_NOTCONN.raw().into() => NotConnected,\n+        e if e == wasi::ERRNO_CONNABORTED.raw().into() => ConnectionAborted,\n+        e if e == wasi::ERRNO_ADDRNOTAVAIL.raw().into() => AddrNotAvailable,\n+        e if e == wasi::ERRNO_ADDRINUSE.raw().into() => AddrInUse,\n+        e if e == wasi::ERRNO_NOENT.raw().into() => NotFound,\n+        e if e == wasi::ERRNO_INTR.raw().into() => Interrupted,\n+        e if e == wasi::ERRNO_INVAL.raw().into() => InvalidInput,\n+        e if e == wasi::ERRNO_TIMEDOUT.raw().into() => TimedOut,\n+        e if e == wasi::ERRNO_EXIST.raw().into() => AlreadyExists,\n+        e if e == wasi::ERRNO_AGAIN.raw().into() => WouldBlock,\n+        e if e == wasi::ERRNO_NOSYS.raw().into() => Unsupported,\n+        e if e == wasi::ERRNO_NOMEM.raw().into() => OutOfMemory,\n         _ => Uncategorized,\n     }\n }\n@@ -96,6 +99,6 @@ pub fn hashmap_random_keys() -> (u64, u64) {\n     return ret;\n }\n \n-fn err2io(err: wasi::Error) -> std_io::Error {\n-    std_io::Error::from_raw_os_error(err.raw_error().into())\n+fn err2io(err: wasi::Errno) -> std_io::Error {\n+    std_io::Error::from_raw_os_error(err.raw().into())\n }"}, {"sha": "c66e0e4d328ad09a3401fa7517419090d9be5604", "filename": "library/std/src/sys/wasi/net.rs", "status": "modified", "additions": 53, "deletions": 13, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/6250d5a08cf0870d3655fa98b83718bc01ff6f45/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6250d5a08cf0870d3655fa98b83718bc01ff6f45/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fnet.rs?ref=6250d5a08cf0870d3655fa98b83718bc01ff6f45", "patch": "@@ -1,5 +1,6 @@\n #![deny(unsafe_op_in_unsafe_fn)]\n \n+use super::err2io;\n use super::fd::WasiFd;\n use crate::convert::TryFrom;\n use crate::fmt;\n@@ -87,24 +88,24 @@ impl TcpStream {\n         unsupported()\n     }\n \n-    pub fn read(&self, _: &mut [u8]) -> io::Result<usize> {\n-        unsupported()\n+    pub fn read(&self, buf: &mut [u8]) -> io::Result<usize> {\n+        self.read_vectored(&mut [IoSliceMut::new(buf)])\n     }\n \n-    pub fn read_vectored(&self, _: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n-        unsupported()\n+    pub fn read_vectored(&self, bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n+        self.socket().as_inner().read(bufs)\n     }\n \n     pub fn is_read_vectored(&self) -> bool {\n         true\n     }\n \n-    pub fn write(&self, _: &[u8]) -> io::Result<usize> {\n-        unsupported()\n+    pub fn write(&self, buf: &[u8]) -> io::Result<usize> {\n+        self.write_vectored(&[IoSlice::new(buf)])\n     }\n \n-    pub fn write_vectored(&self, _: &[IoSlice<'_>]) -> io::Result<usize> {\n-        unsupported()\n+    pub fn write_vectored(&self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n+        self.socket().as_inner().write(bufs)\n     }\n \n     pub fn is_write_vectored(&self) -> bool {\n@@ -155,8 +156,23 @@ impl TcpStream {\n         unsupported()\n     }\n \n-    pub fn set_nonblocking(&self, _: bool) -> io::Result<()> {\n-        unsupported()\n+    pub fn set_nonblocking(&self, state: bool) -> io::Result<()> {\n+        let fdstat = unsafe {\n+            wasi::fd_fdstat_get(self.socket().as_inner().as_raw_fd() as wasi::Fd).map_err(err2io)?\n+        };\n+\n+        let mut flags = fdstat.fs_flags;\n+\n+        if state {\n+            flags |= wasi::FDFLAGS_NONBLOCK;\n+        } else {\n+            flags &= !wasi::FDFLAGS_NONBLOCK;\n+        }\n+\n+        unsafe {\n+            wasi::fd_fdstat_set_flags(self.socket().as_inner().as_raw_fd() as wasi::Fd, flags)\n+                .map_err(err2io)\n+        }\n     }\n \n     pub fn socket(&self) -> &Socket {\n@@ -194,7 +210,16 @@ impl TcpListener {\n     }\n \n     pub fn accept(&self) -> io::Result<(TcpStream, SocketAddr)> {\n-        unsupported()\n+        let fd = unsafe {\n+            wasi::sock_accept(self.as_inner().as_inner().as_raw_fd() as _, 0).map_err(err2io)?\n+        };\n+\n+        Ok((\n+            TcpStream::from_inner(unsafe { Socket::from_raw_fd(fd as _) }),\n+            // WASI has no concept of SocketAddr yet\n+            // return an unspecified IPv4Addr\n+            SocketAddr::new(Ipv4Addr::UNSPECIFIED.into(), 0),\n+        ))\n     }\n \n     pub fn duplicate(&self) -> io::Result<TcpListener> {\n@@ -221,8 +246,23 @@ impl TcpListener {\n         unsupported()\n     }\n \n-    pub fn set_nonblocking(&self, _: bool) -> io::Result<()> {\n-        unsupported()\n+    pub fn set_nonblocking(&self, state: bool) -> io::Result<()> {\n+        let fdstat = unsafe {\n+            wasi::fd_fdstat_get(self.socket().as_inner().as_raw_fd() as wasi::Fd).map_err(err2io)?\n+        };\n+\n+        let mut flags = fdstat.fs_flags;\n+\n+        if state {\n+            flags |= wasi::FDFLAGS_NONBLOCK;\n+        } else {\n+            flags &= !wasi::FDFLAGS_NONBLOCK;\n+        }\n+\n+        unsafe {\n+            wasi::fd_fdstat_set_flags(self.socket().as_inner().as_raw_fd() as wasi::Fd, flags)\n+                .map_err(err2io)\n+        }\n     }\n \n     pub fn socket(&self) -> &Socket {"}, {"sha": "4cc0e4ed5a45a775f2a9879153fcd31b4e2b526d", "filename": "library/std/src/sys/wasi/stdio.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6250d5a08cf0870d3655fa98b83718bc01ff6f45/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6250d5a08cf0870d3655fa98b83718bc01ff6f45/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fstdio.rs?ref=6250d5a08cf0870d3655fa98b83718bc01ff6f45", "patch": "@@ -104,7 +104,7 @@ impl io::Write for Stderr {\n pub const STDIN_BUF_SIZE: usize = crate::sys_common::io::DEFAULT_BUF_SIZE;\n \n pub fn is_ebadf(err: &io::Error) -> bool {\n-    err.raw_os_error() == Some(wasi::ERRNO_BADF.into())\n+    err.raw_os_error() == Some(wasi::ERRNO_BADF.raw().into())\n }\n \n pub fn panic_output() -> Option<impl io::Write> {"}, {"sha": "e7a6ab4be826f5053982bed385347424b06fe66c", "filename": "library/std/src/sys/wasi/thread.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6250d5a08cf0870d3655fa98b83718bc01ff6f45/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6250d5a08cf0870d3655fa98b83718bc01ff6f45/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fthread.rs?ref=6250d5a08cf0870d3655fa98b83718bc01ff6f45", "patch": "@@ -41,8 +41,7 @@ impl Thread {\n \n         let in_ = wasi::Subscription {\n             userdata: USERDATA,\n-            r#type: wasi::EVENTTYPE_CLOCK,\n-            u: wasi::SubscriptionU { clock },\n+            u: wasi::SubscriptionU { tag: 0, u: wasi::SubscriptionUU { clock } },\n         };\n         unsafe {\n             let mut event: wasi::Event = mem::zeroed();\n@@ -51,7 +50,10 @@ impl Thread {\n                 (\n                     Ok(1),\n                     wasi::Event {\n-                        userdata: USERDATA, error: 0, r#type: wasi::EVENTTYPE_CLOCK, ..\n+                        userdata: USERDATA,\n+                        error: wasi::ERRNO_SUCCESS,\n+                        type_: wasi::EVENTTYPE_CLOCK,\n+                        ..\n                     },\n                 ) => {}\n                 _ => panic!(\"thread::sleep(): unexpected result of poll_oneoff\"),"}, {"sha": "db0ddecf0c62942e30304e99d2445d9f98cb8b5d", "filename": "library/std/src/sys/wasi/time.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6250d5a08cf0870d3655fa98b83718bc01ff6f45/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6250d5a08cf0870d3655fa98b83718bc01ff6f45/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ftime.rs?ref=6250d5a08cf0870d3655fa98b83718bc01ff6f45", "patch": "@@ -10,7 +10,7 @@ pub struct SystemTime(Duration);\n \n pub const UNIX_EPOCH: SystemTime = SystemTime(Duration::from_secs(0));\n \n-fn current_time(clock: u32) -> Duration {\n+fn current_time(clock: wasi::Clockid) -> Duration {\n     let ts = unsafe {\n         wasi::clock_time_get(\n             clock, 1, // precision... seems ignored though?"}, {"sha": "d1e9fed41fc930093b85b900ab5fb9e2735fcc3d", "filename": "library/std/src/sys_common/io.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6250d5a08cf0870d3655fa98b83718bc01ff6f45/library%2Fstd%2Fsrc%2Fsys_common%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6250d5a08cf0870d3655fa98b83718bc01ff6f45/library%2Fstd%2Fsrc%2Fsys_common%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fio.rs?ref=6250d5a08cf0870d3655fa98b83718bc01ff6f45", "patch": "@@ -8,6 +8,7 @@ pub mod test {\n     use crate::env;\n     use crate::fs;\n     use crate::path::{Path, PathBuf};\n+    use crate::thread;\n     use rand::RngCore;\n \n     pub struct TempDir(PathBuf);\n@@ -29,7 +30,12 @@ pub mod test {\n             // Gee, seeing how we're testing the fs module I sure hope that we\n             // at least implement this correctly!\n             let TempDir(ref p) = *self;\n-            fs::remove_dir_all(p).unwrap();\n+            let result = fs::remove_dir_all(p);\n+            // Avoid panicking while panicking as this causes the process to\n+            // immediately abort, without displaying test results.\n+            if !thread::panicking() {\n+                result.unwrap();\n+            }\n         }\n     }\n "}, {"sha": "2c78ceb1e5bec5b21386ecc70ee8d2d96310634a", "filename": "src/bootstrap/util.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6250d5a08cf0870d3655fa98b83718bc01ff6f45/src%2Fbootstrap%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6250d5a08cf0870d3655fa98b83718bc01ff6f45/src%2Fbootstrap%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Futil.rs?ref=6250d5a08cf0870d3655fa98b83718bc01ff6f45", "patch": "@@ -282,9 +282,10 @@ pub fn is_valid_test_suite_arg<'a, P: AsRef<Path>>(\n     if !path.starts_with(suite_path) {\n         return None;\n     }\n-    let exists = path.is_dir() || path.is_file();\n+    let abs_path = builder.src.join(path);\n+    let exists = abs_path.is_dir() || abs_path.is_file();\n     if !exists {\n-        if let Some(p) = path.to_str() {\n+        if let Some(p) = abs_path.to_str() {\n             builder.info(&format!(\"Warning: Skipping \\\"{}\\\": not a regular file or directory\", p));\n         }\n         return None;"}, {"sha": "18c0055b8aea49391e8f758a4400097999c9cf1e", "filename": "src/doc/rust-by-example", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust-by-example?ref=6250d5a08cf0870d3655fa98b83718bc01ff6f45", "patch": "@@ -1 +1 @@\n-Subproject commit 1ca6a7bd1d73edc4a3e6c7d6a40f5d4b66c1e517\n+Subproject commit 18c0055b8aea49391e8f758a4400097999c9cf1e"}, {"sha": "45cf4e88eef6b9b34b72d877faeb56749376fa53", "filename": "src/doc/rustdoc/src/references.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6250d5a08cf0870d3655fa98b83718bc01ff6f45/src%2Fdoc%2Frustdoc%2Fsrc%2Freferences.md", "raw_url": "https://github.com/rust-lang/rust/raw/6250d5a08cf0870d3655fa98b83718bc01ff6f45/src%2Fdoc%2Frustdoc%2Fsrc%2Freferences.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Freferences.md?ref=6250d5a08cf0870d3655fa98b83718bc01ff6f45", "patch": "@@ -16,13 +16,13 @@ If you know of other great resources, please submit a pull request!\n - [Github tagged RFCs]\n - [Github tagged issues]\n - [RFC (stalled) front page styleguide]\n-- [Guide on how to write documenation for a Rust crate]\n+- [Guide on how to write documentation for a Rust crate]\n \n \n [API Guidelines]: https://rust-lang.github.io/api-guidelines/documentation.html\n [Github tagged RFCs]: https://github.com/rust-lang/rfcs/issues?q=label%3AT-rustdoc\n [Github tagged issues]: https://github.com/rust-lang/rust/issues?q=is%3Aissue+is%3Aopen+label%3AT-rustdoc\n-[Guide on how to write documenation for a Rust crate]: https://blog.guillaume-gomez.fr/articles/2020-03-12+Guide+on+how+to+write+documentation+for+a+Rust+crate\n+[Guide on how to write documentation for a Rust crate]: https://blog.guillaume-gomez.fr/articles/2020-03-12+Guide+on+how+to+write+documentation+for+a+Rust+crate\n [Learn Rust]: https://doc.rust-lang.org/book/ch14-02-publishing-to-crates-io.html#making-useful-documentation-comments\n [RFC 1574: More API Documentation Conventions]: https://rust-lang.github.io/rfcs/1574-more-api-documentation-conventions.html\n [RFC 1946: Intra Rustdoc Links]: https://rust-lang.github.io/rfcs/1946-intra-rustdoc-links.html"}, {"sha": "001601497a2720f617c16ae8bc4eec8b7deeb3ac", "filename": "src/test/ui/asm/named-asm-labels.stderr", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/6250d5a08cf0870d3655fa98b83718bc01ff6f45/src%2Ftest%2Fui%2Fasm%2Fnamed-asm-labels.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6250d5a08cf0870d3655fa98b83718bc01ff6f45/src%2Ftest%2Fui%2Fasm%2Fnamed-asm-labels.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fnamed-asm-labels.stderr?ref=6250d5a08cf0870d3655fa98b83718bc01ff6f45", "patch": "@@ -6,6 +6,7 @@ LL |         asm!(\"bar: nop\");\n    |\n    = note: `#[deny(named_asm_labels)]` on by default\n    = help: only local labels of the form `<number>:` should be used in inline asm\n+   = note: see the asm section of Rust By Example <https://doc.rust-lang.org/nightly/rust-by-example/unsafe/asm.html#labels> for more information\n \n error: avoid using named labels in inline assembly\n   --> $DIR/named-asm-labels.rs:27:15\n@@ -14,6 +15,7 @@ LL |         asm!(\"abcd:\");\n    |               ^^^^\n    |\n    = help: only local labels of the form `<number>:` should be used in inline asm\n+   = note: see the asm section of Rust By Example <https://doc.rust-lang.org/nightly/rust-by-example/unsafe/asm.html#labels> for more information\n \n error: avoid using named labels in inline assembly\n   --> $DIR/named-asm-labels.rs:30:15\n@@ -22,6 +24,7 @@ LL |         asm!(\"foo: bar1: nop\");\n    |               ^^^  ^^^^\n    |\n    = help: only local labels of the form `<number>:` should be used in inline asm\n+   = note: see the asm section of Rust By Example <https://doc.rust-lang.org/nightly/rust-by-example/unsafe/asm.html#labels> for more information\n \n error: avoid using named labels in inline assembly\n   --> $DIR/named-asm-labels.rs:34:15\n@@ -30,6 +33,7 @@ LL |         asm!(\"foo1: nop\", \"nop\");\n    |               ^^^^\n    |\n    = help: only local labels of the form `<number>:` should be used in inline asm\n+   = note: see the asm section of Rust By Example <https://doc.rust-lang.org/nightly/rust-by-example/unsafe/asm.html#labels> for more information\n \n error: avoid using named labels in inline assembly\n   --> $DIR/named-asm-labels.rs:35:15\n@@ -38,6 +42,7 @@ LL |         asm!(\"foo2: foo3: nop\", \"nop\");\n    |               ^^^^  ^^^^\n    |\n    = help: only local labels of the form `<number>:` should be used in inline asm\n+   = note: see the asm section of Rust By Example <https://doc.rust-lang.org/nightly/rust-by-example/unsafe/asm.html#labels> for more information\n \n error: avoid using named labels in inline assembly\n   --> $DIR/named-asm-labels.rs:37:22\n@@ -46,6 +51,7 @@ LL |         asm!(\"nop\", \"foo4: nop\");\n    |                      ^^^^\n    |\n    = help: only local labels of the form `<number>:` should be used in inline asm\n+   = note: see the asm section of Rust By Example <https://doc.rust-lang.org/nightly/rust-by-example/unsafe/asm.html#labels> for more information\n \n error: avoid using named labels in inline assembly\n   --> $DIR/named-asm-labels.rs:38:15\n@@ -54,6 +60,7 @@ LL |         asm!(\"foo5: nop\", \"foo6: nop\");\n    |               ^^^^\n    |\n    = help: only local labels of the form `<number>:` should be used in inline asm\n+   = note: see the asm section of Rust By Example <https://doc.rust-lang.org/nightly/rust-by-example/unsafe/asm.html#labels> for more information\n \n error: avoid using named labels in inline assembly\n   --> $DIR/named-asm-labels.rs:38:28\n@@ -62,6 +69,7 @@ LL |         asm!(\"foo5: nop\", \"foo6: nop\");\n    |                            ^^^^\n    |\n    = help: only local labels of the form `<number>:` should be used in inline asm\n+   = note: see the asm section of Rust By Example <https://doc.rust-lang.org/nightly/rust-by-example/unsafe/asm.html#labels> for more information\n \n error: avoid using named labels in inline assembly\n   --> $DIR/named-asm-labels.rs:43:15\n@@ -70,6 +78,7 @@ LL |         asm!(\"foo7: nop; foo8: nop\");\n    |               ^^^^       ^^^^\n    |\n    = help: only local labels of the form `<number>:` should be used in inline asm\n+   = note: see the asm section of Rust By Example <https://doc.rust-lang.org/nightly/rust-by-example/unsafe/asm.html#labels> for more information\n \n error: avoid using named labels in inline assembly\n   --> $DIR/named-asm-labels.rs:45:15\n@@ -78,6 +87,7 @@ LL |         asm!(\"foo9: nop; nop\");\n    |               ^^^^\n    |\n    = help: only local labels of the form `<number>:` should be used in inline asm\n+   = note: see the asm section of Rust By Example <https://doc.rust-lang.org/nightly/rust-by-example/unsafe/asm.html#labels> for more information\n \n error: avoid using named labels in inline assembly\n   --> $DIR/named-asm-labels.rs:46:20\n@@ -86,6 +96,7 @@ LL |         asm!(\"nop; foo10: nop\");\n    |                    ^^^^^\n    |\n    = help: only local labels of the form `<number>:` should be used in inline asm\n+   = note: see the asm section of Rust By Example <https://doc.rust-lang.org/nightly/rust-by-example/unsafe/asm.html#labels> for more information\n \n error: avoid using named labels in inline assembly\n   --> $DIR/named-asm-labels.rs:49:15\n@@ -94,6 +105,7 @@ LL |         asm!(\"bar2: nop\\n bar3: nop\");\n    |               ^^^^        ^^^^\n    |\n    = help: only local labels of the form `<number>:` should be used in inline asm\n+   = note: see the asm section of Rust By Example <https://doc.rust-lang.org/nightly/rust-by-example/unsafe/asm.html#labels> for more information\n \n error: avoid using named labels in inline assembly\n   --> $DIR/named-asm-labels.rs:51:15\n@@ -102,6 +114,7 @@ LL |         asm!(\"bar4: nop\\n nop\");\n    |               ^^^^\n    |\n    = help: only local labels of the form `<number>:` should be used in inline asm\n+   = note: see the asm section of Rust By Example <https://doc.rust-lang.org/nightly/rust-by-example/unsafe/asm.html#labels> for more information\n \n error: avoid using named labels in inline assembly\n   --> $DIR/named-asm-labels.rs:52:21\n@@ -110,6 +123,7 @@ LL |         asm!(\"nop\\n bar5: nop\");\n    |                     ^^^^\n    |\n    = help: only local labels of the form `<number>:` should be used in inline asm\n+   = note: see the asm section of Rust By Example <https://doc.rust-lang.org/nightly/rust-by-example/unsafe/asm.html#labels> for more information\n \n error: avoid using named labels in inline assembly\n   --> $DIR/named-asm-labels.rs:53:21\n@@ -118,6 +132,7 @@ LL |         asm!(\"nop\\n bar6: bar7: nop\");\n    |                     ^^^^  ^^^^\n    |\n    = help: only local labels of the form `<number>:` should be used in inline asm\n+   = note: see the asm section of Rust By Example <https://doc.rust-lang.org/nightly/rust-by-example/unsafe/asm.html#labels> for more information\n \n error: avoid using named labels in inline assembly\n   --> $DIR/named-asm-labels.rs:59:13\n@@ -128,6 +143,7 @@ LL |             blah3: nop\n    |             ^^^^^\n    |\n    = help: only local labels of the form `<number>:` should be used in inline asm\n+   = note: see the asm section of Rust By Example <https://doc.rust-lang.org/nightly/rust-by-example/unsafe/asm.html#labels> for more information\n \n error: avoid using named labels in inline assembly\n   --> $DIR/named-asm-labels.rs:68:19\n@@ -136,6 +152,7 @@ LL |             nop ; blah4: nop\n    |                   ^^^^^\n    |\n    = help: only local labels of the form `<number>:` should be used in inline asm\n+   = note: see the asm section of Rust By Example <https://doc.rust-lang.org/nightly/rust-by-example/unsafe/asm.html#labels> for more information\n \n error: avoid using named labels in inline assembly\n   --> $DIR/named-asm-labels.rs:82:15\n@@ -144,6 +161,7 @@ LL |         asm!(\"blah1: 2bar: nop\");\n    |               ^^^^^\n    |\n    = help: only local labels of the form `<number>:` should be used in inline asm\n+   = note: see the asm section of Rust By Example <https://doc.rust-lang.org/nightly/rust-by-example/unsafe/asm.html#labels> for more information\n \n error: avoid using named labels in inline assembly\n   --> $DIR/named-asm-labels.rs:85:15\n@@ -152,6 +170,7 @@ LL |         asm!(\"def: def: nop\");\n    |               ^^^\n    |\n    = help: only local labels of the form `<number>:` should be used in inline asm\n+   = note: see the asm section of Rust By Example <https://doc.rust-lang.org/nightly/rust-by-example/unsafe/asm.html#labels> for more information\n \n error: avoid using named labels in inline assembly\n   --> $DIR/named-asm-labels.rs:86:15\n@@ -160,6 +179,7 @@ LL |         asm!(\"def: nop\\ndef: nop\");\n    |               ^^^\n    |\n    = help: only local labels of the form `<number>:` should be used in inline asm\n+   = note: see the asm section of Rust By Example <https://doc.rust-lang.org/nightly/rust-by-example/unsafe/asm.html#labels> for more information\n \n error: avoid using named labels in inline assembly\n   --> $DIR/named-asm-labels.rs:87:15\n@@ -168,6 +188,7 @@ LL |         asm!(\"def: nop; def: nop\");\n    |               ^^^\n    |\n    = help: only local labels of the form `<number>:` should be used in inline asm\n+   = note: see the asm section of Rust By Example <https://doc.rust-lang.org/nightly/rust-by-example/unsafe/asm.html#labels> for more information\n \n error: avoid using named labels in inline assembly\n   --> $DIR/named-asm-labels.rs:95:15\n@@ -176,6 +197,7 @@ LL |         asm!(\"fooo\\u{003A} nop\");\n    |               ^^^^^^^^^^^^^^^^\n    |\n    = help: only local labels of the form `<number>:` should be used in inline asm\n+   = note: see the asm section of Rust By Example <https://doc.rust-lang.org/nightly/rust-by-example/unsafe/asm.html#labels> for more information\n \n error: avoid using named labels in inline assembly\n   --> $DIR/named-asm-labels.rs:96:15\n@@ -184,6 +206,7 @@ LL |         asm!(\"foooo\\x3A nop\");\n    |               ^^^^^^^^^^^^^\n    |\n    = help: only local labels of the form `<number>:` should be used in inline asm\n+   = note: see the asm section of Rust By Example <https://doc.rust-lang.org/nightly/rust-by-example/unsafe/asm.html#labels> for more information\n \n error: avoid using named labels in inline assembly\n   --> $DIR/named-asm-labels.rs:99:15\n@@ -192,6 +215,7 @@ LL |         asm!(\"fooooo:\\u{000A} nop\");\n    |               ^^^^^^\n    |\n    = help: only local labels of the form `<number>:` should be used in inline asm\n+   = note: see the asm section of Rust By Example <https://doc.rust-lang.org/nightly/rust-by-example/unsafe/asm.html#labels> for more information\n \n error: avoid using named labels in inline assembly\n   --> $DIR/named-asm-labels.rs:100:15\n@@ -200,6 +224,7 @@ LL |         asm!(\"foooooo:\\x0A nop\");\n    |               ^^^^^^^\n    |\n    = help: only local labels of the form `<number>:` should be used in inline asm\n+   = note: see the asm section of Rust By Example <https://doc.rust-lang.org/nightly/rust-by-example/unsafe/asm.html#labels> for more information\n \n error: avoid using named labels in inline assembly\n   --> $DIR/named-asm-labels.rs:104:14\n@@ -208,6 +233,7 @@ LL |         asm!(\"\\x41\\x42\\x43\\x3A\\x20\\x6E\\x6F\\x70\");\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: only local labels of the form `<number>:` should be used in inline asm\n+   = note: see the asm section of Rust By Example <https://doc.rust-lang.org/nightly/rust-by-example/unsafe/asm.html#labels> for more information\n \n error: avoid using named labels in inline assembly\n   --> $DIR/named-asm-labels.rs:112:13\n@@ -216,6 +242,7 @@ LL |             ab: nop // ab: does foo\n    |             ^^\n    |\n    = help: only local labels of the form `<number>:` should be used in inline asm\n+   = note: see the asm section of Rust By Example <https://doc.rust-lang.org/nightly/rust-by-example/unsafe/asm.html#labels> for more information\n \n error: avoid using named labels in inline assembly\n   --> $DIR/named-asm-labels.rs:124:14\n@@ -224,6 +251,7 @@ LL |         asm!(include_str!(\"named-asm-labels.s\"));\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: only local labels of the form `<number>:` should be used in inline asm\n+   = note: see the asm section of Rust By Example <https://doc.rust-lang.org/nightly/rust-by-example/unsafe/asm.html#labels> for more information\n \n warning: avoid using named labels in inline assembly\n   --> $DIR/named-asm-labels.rs:134:19\n@@ -237,6 +265,7 @@ note: the lint level is defined here\n LL |         #[warn(named_asm_labels)]\n    |                ^^^^^^^^^^^^^^^^\n    = help: only local labels of the form `<number>:` should be used in inline asm\n+   = note: see the asm section of Rust By Example <https://doc.rust-lang.org/nightly/rust-by-example/unsafe/asm.html#labels> for more information\n \n error: avoid using named labels in inline assembly\n   --> $DIR/named-asm-labels.rs:143:20\n@@ -245,6 +274,7 @@ LL |     unsafe { asm!(\".Lfoo: mov rax, {}; ret;\", \"nop\", const 1, options(noret\n    |                    ^^^^^\n    |\n    = help: only local labels of the form `<number>:` should be used in inline asm\n+   = note: see the asm section of Rust By Example <https://doc.rust-lang.org/nightly/rust-by-example/unsafe/asm.html#labels> for more information\n \n error: avoid using named labels in inline assembly\n   --> $DIR/named-asm-labels.rs:149:20\n@@ -253,6 +283,7 @@ LL |     unsafe { asm!(\".Lbar: mov rax, {}; ret;\", \"nop\", const 1, options(noret\n    |                    ^^^^^\n    |\n    = help: only local labels of the form `<number>:` should be used in inline asm\n+   = note: see the asm section of Rust By Example <https://doc.rust-lang.org/nightly/rust-by-example/unsafe/asm.html#labels> for more information\n \n error: avoid using named labels in inline assembly\n   --> $DIR/named-asm-labels.rs:157:20\n@@ -261,6 +292,7 @@ LL |     unsafe { asm!(\".Laaa: nop; ret;\", options(noreturn)) }\n    |                    ^^^^^\n    |\n    = help: only local labels of the form `<number>:` should be used in inline asm\n+   = note: see the asm section of Rust By Example <https://doc.rust-lang.org/nightly/rust-by-example/unsafe/asm.html#labels> for more information\n \n error: avoid using named labels in inline assembly\n   --> $DIR/named-asm-labels.rs:167:24\n@@ -269,6 +301,7 @@ LL |         unsafe { asm!(\".Lbbb: nop; ret;\", options(noreturn)) }\n    |                        ^^^^^\n    |\n    = help: only local labels of the form `<number>:` should be used in inline asm\n+   = note: see the asm section of Rust By Example <https://doc.rust-lang.org/nightly/rust-by-example/unsafe/asm.html#labels> for more information\n \n error: avoid using named labels in inline assembly\n   --> $DIR/named-asm-labels.rs:176:15\n@@ -277,6 +310,7 @@ LL |         asm!(\"closure1: nop\");\n    |               ^^^^^^^^\n    |\n    = help: only local labels of the form `<number>:` should be used in inline asm\n+   = note: see the asm section of Rust By Example <https://doc.rust-lang.org/nightly/rust-by-example/unsafe/asm.html#labels> for more information\n \n error: avoid using named labels in inline assembly\n   --> $DIR/named-asm-labels.rs:180:15\n@@ -285,6 +319,7 @@ LL |         asm!(\"closure2: nop\");\n    |               ^^^^^^^^\n    |\n    = help: only local labels of the form `<number>:` should be used in inline asm\n+   = note: see the asm section of Rust By Example <https://doc.rust-lang.org/nightly/rust-by-example/unsafe/asm.html#labels> for more information\n \n error: avoid using named labels in inline assembly\n   --> $DIR/named-asm-labels.rs:190:19\n@@ -293,6 +328,7 @@ LL |             asm!(\"closure3: nop\");\n    |                   ^^^^^^^^\n    |\n    = help: only local labels of the form `<number>:` should be used in inline asm\n+   = note: see the asm section of Rust By Example <https://doc.rust-lang.org/nightly/rust-by-example/unsafe/asm.html#labels> for more information\n \n error: aborting due to 35 previous errors; 1 warning emitted\n "}]}