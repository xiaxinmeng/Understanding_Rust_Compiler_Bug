{"sha": "8b3856b1bc1c23969e5d8983f25cf85698a5c2b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiMzg1NmIxYmMxYzIzOTY5ZTVkODk4M2YyNWNmODU2OThhNWMyYjE=", "commit": {"author": {"name": "Oliver 'ker' Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-02-09T17:01:08Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-02-11T11:34:48Z"}, "message": "[breaking-change] don't glob export ast::StrStyle variants", "tree": {"sha": "6fc585af50a42be52b5a268f6ce74d36dacb1651", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6fc585af50a42be52b5a268f6ce74d36dacb1651"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b3856b1bc1c23969e5d8983f25cf85698a5c2b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b3856b1bc1c23969e5d8983f25cf85698a5c2b1", "html_url": "https://github.com/rust-lang/rust/commit/8b3856b1bc1c23969e5d8983f25cf85698a5c2b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b3856b1bc1c23969e5d8983f25cf85698a5c2b1/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d844bfb1967b780ff6cc6e81644bf4b529dc0738", "url": "https://api.github.com/repos/rust-lang/rust/commits/d844bfb1967b780ff6cc6e81644bf4b529dc0738", "html_url": "https://github.com/rust-lang/rust/commit/d844bfb1967b780ff6cc6e81644bf4b529dc0738"}], "stats": {"total": 56, "additions": 28, "deletions": 28}, "files": [{"sha": "cc43e3ae56eaf9871cc37add3d37a100de920e45", "filename": "src/librustc_front/print/pprust.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8b3856b1bc1c23969e5d8983f25cf85698a5c2b1/src%2Flibrustc_front%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b3856b1bc1c23969e5d8983f25cf85698a5c2b1/src%2Flibrustc_front%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Fprint%2Fpprust.rs?ref=8b3856b1bc1c23969e5d8983f25cf85698a5c2b1", "patch": "@@ -652,7 +652,7 @@ impl<'a> State<'a> {\n                 if let Some(p) = *optional_path {\n                     let val = p.as_str();\n                     if val.contains(\"-\") {\n-                        try!(self.print_string(&val, ast::CookedStr));\n+                        try!(self.print_string(&val, ast::StrStyle::Cooked));\n                     } else {\n                         try!(self.print_name(p));\n                     }\n@@ -1510,9 +1510,9 @@ impl<'a> State<'a> {\n                 try!(self.commasep(Inconsistent, &a.outputs, |s, out| {\n                     match out.constraint.slice_shift_char() {\n                         Some(('=', operand)) if out.is_rw => {\n-                            try!(s.print_string(&format!(\"+{}\", operand), ast::CookedStr))\n+                            try!(s.print_string(&format!(\"+{}\", operand), ast::StrStyle::Cooked))\n                         }\n-                        _ => try!(s.print_string(&out.constraint, ast::CookedStr)),\n+                        _ => try!(s.print_string(&out.constraint, ast::StrStyle::Cooked)),\n                     }\n                     try!(s.popen());\n                     try!(s.print_expr(&*out.expr));\n@@ -1523,7 +1523,7 @@ impl<'a> State<'a> {\n                 try!(self.word_space(\":\"));\n \n                 try!(self.commasep(Inconsistent, &a.inputs, |s, &(ref co, ref o)| {\n-                    try!(s.print_string(&co, ast::CookedStr));\n+                    try!(s.print_string(&co, ast::StrStyle::Cooked));\n                     try!(s.popen());\n                     try!(s.print_expr(&**o));\n                     try!(s.pclose());\n@@ -1533,7 +1533,7 @@ impl<'a> State<'a> {\n                 try!(self.word_space(\":\"));\n \n                 try!(self.commasep(Inconsistent, &a.clobbers, |s, co| {\n-                    try!(s.print_string(&co, ast::CookedStr));\n+                    try!(s.print_string(&co, ast::StrStyle::Cooked));\n                     Ok(())\n                 }));\n \n@@ -1552,7 +1552,7 @@ impl<'a> State<'a> {\n                     try!(space(&mut self.s));\n                     try!(self.word_space(\":\"));\n                     try!(self.commasep(Inconsistent, &*options, |s, &co| {\n-                        try!(s.print_string(co, ast::CookedStr));\n+                        try!(s.print_string(co, ast::StrStyle::Cooked));\n                         Ok(())\n                     }));\n                 }"}, {"sha": "713f5c9a7be381428cbfc5ed8038b276d8e0f077", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8b3856b1bc1c23969e5d8983f25cf85698a5c2b1/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b3856b1bc1c23969e5d8983f25cf85698a5c2b1/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=8b3856b1bc1c23969e5d8983f25cf85698a5c2b1", "patch": "@@ -12,7 +12,6 @@\n \n pub use self::Pat_::*;\n pub use self::PathListItem_::*;\n-pub use self::StrStyle::*;\n pub use self::StructFieldKind::*;\n pub use self::TyParamBound::*;\n pub use self::UnsafeSource::*;\n@@ -1246,11 +1245,11 @@ pub struct Mac_ {\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n pub enum StrStyle {\n     /// A regular string, like `\"foo\"`\n-    CookedStr,\n+    Cooked,\n     /// A raw string, like `r##\"foo\"##`\n     ///\n     /// The uint is the number of `#` symbols used\n-    RawStr(usize)\n+    Raw(usize)\n }\n \n /// A literal"}, {"sha": "cc5f30e21849fd48c929bca10167abfc46abd907", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b3856b1bc1c23969e5d8983f25cf85698a5c2b1/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b3856b1bc1c23969e5d8983f25cf85698a5c2b1/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=8b3856b1bc1c23969e5d8983f25cf85698a5c2b1", "patch": "@@ -173,7 +173,7 @@ impl AttributeMethods for Attribute {\n \n pub fn mk_name_value_item_str(name: InternedString, value: InternedString)\n                               -> P<MetaItem> {\n-    let value_lit = dummy_spanned(ast::LitKind::Str(value, ast::CookedStr));\n+    let value_lit = dummy_spanned(ast::LitKind::Str(value, ast::StrStyle::Cooked));\n     mk_name_value_item(name, value_lit)\n }\n \n@@ -225,7 +225,7 @@ pub fn mk_sugared_doc_attr(id: AttrId, text: InternedString, lo: BytePos,\n                            hi: BytePos)\n                            -> Attribute {\n     let style = doc_comment_style(&text);\n-    let lit = spanned(lo, hi, ast::LitKind::Str(text, ast::CookedStr));\n+    let lit = spanned(lo, hi, ast::LitKind::Str(text, ast::StrStyle::Cooked));\n     let attr = Attribute_ {\n         id: id,\n         style: style,"}, {"sha": "161443c6eb0074c543b8e74d8d9aeb3324d5a828", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b3856b1bc1c23969e5d8983f25cf85698a5c2b1/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b3856b1bc1c23969e5d8983f25cf85698a5c2b1/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=8b3856b1bc1c23969e5d8983f25cf85698a5c2b1", "patch": "@@ -715,7 +715,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         self.expr_addr_of(sp, self.expr_vec(sp, exprs))\n     }\n     fn expr_str(&self, sp: Span, s: InternedString) -> P<ast::Expr> {\n-        self.expr_lit(sp, ast::LitKind::Str(s, ast::CookedStr))\n+        self.expr_lit(sp, ast::LitKind::Str(s, ast::StrStyle::Cooked))\n     }\n \n     fn expr_cast(&self, sp: Span, expr: P<ast::Expr>, ty: P<ast::Ty>) -> P<ast::Expr> {"}, {"sha": "57db13470210023dacc848223b91c93a69cd365c", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b3856b1bc1c23969e5d8983f25cf85698a5c2b1/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b3856b1bc1c23969e5d8983f25cf85698a5c2b1/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=8b3856b1bc1c23969e5d8983f25cf85698a5c2b1", "patch": "@@ -219,7 +219,7 @@ pub mod rt {\n     impl ToTokens for str {\n         fn to_tokens(&self, cx: &ExtCtxt) -> Vec<TokenTree> {\n             let lit = ast::LitKind::Str(\n-                token::intern_and_get_ident(self), ast::CookedStr);\n+                token::intern_and_get_ident(self), ast::StrStyle::Cooked);\n             dummy_spanned(lit).to_tokens(cx)\n         }\n     }"}, {"sha": "afab3a0711be1a695a38d1d923cead74b399f4c8", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8b3856b1bc1c23969e5d8983f25cf85698a5c2b1/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b3856b1bc1c23969e5d8983f25cf85698a5c2b1/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=8b3856b1bc1c23969e5d8983f25cf85698a5c2b1", "patch": "@@ -1544,13 +1544,13 @@ impl<'a> Parser<'a> {\n                     token::Str_(s) => {\n                         (true,\n                          LitKind::Str(token::intern_and_get_ident(&parse::str_lit(&s.as_str())),\n-                                      ast::CookedStr))\n+                                      ast::StrStyle::Cooked))\n                     }\n                     token::StrRaw(s, n) => {\n                         (true,\n                          LitKind::Str(\n                             token::intern_and_get_ident(&parse::raw_str_lit(&s.as_str())),\n-                            ast::RawStr(n)))\n+                            ast::StrStyle::Raw(n)))\n                     }\n                     token::ByteStr(i) =>\n                         (true, LitKind::ByteStr(parse::byte_str_lit(&i.as_str()))),\n@@ -5966,10 +5966,12 @@ impl<'a> Parser<'a> {\n                                          Option<ast::Name>)> {\n         let ret = match self.token {\n             token::Literal(token::Str_(s), suf) => {\n-                (self.id_to_interned_str(ast::Ident::with_empty_ctxt(s)), ast::CookedStr, suf)\n+                let s = self.id_to_interned_str(ast::Ident::with_empty_ctxt(s));\n+                (s, ast::StrStyle::Cooked, suf)\n             }\n             token::Literal(token::StrRaw(s, n), suf) => {\n-                (self.id_to_interned_str(ast::Ident::with_empty_ctxt(s)), ast::RawStr(n), suf)\n+                let s = self.id_to_interned_str(ast::Ident::with_empty_ctxt(s));\n+                (s, ast::StrStyle::Raw(n), suf)\n             }\n             _ => return None\n         };"}, {"sha": "bb3bc2d78e33c5d551bcd7d171c05b69fe1ad1f9", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8b3856b1bc1c23969e5d8983f25cf85698a5c2b1/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b3856b1bc1c23969e5d8983f25cf85698a5c2b1/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=8b3856b1bc1c23969e5d8983f25cf85698a5c2b1", "patch": "@@ -682,10 +682,10 @@ pub trait PrintState<'a> {\n     fn print_string(&mut self, st: &str,\n                     style: ast::StrStyle) -> io::Result<()> {\n         let st = match style {\n-            ast::CookedStr => {\n+            ast::StrStyle::Cooked => {\n                 (format!(\"\\\"{}\\\"\", st.escape_default()))\n             }\n-            ast::RawStr(n) => {\n+            ast::StrStyle::Raw(n) => {\n                 (format!(\"r{delim}\\\"{string}\\\"{delim}\",\n                          delim=repeat(\"#\", n),\n                          string=st))\n@@ -1123,7 +1123,7 @@ impl<'a> State<'a> {\n                 if let Some(p) = *optional_path {\n                     let val = p.as_str();\n                     if val.contains(\"-\") {\n-                        try!(self.print_string(&val, ast::CookedStr));\n+                        try!(self.print_string(&val, ast::StrStyle::Cooked));\n                     } else {\n                         try!(self.print_name(p));\n                     }\n@@ -2215,9 +2215,9 @@ impl<'a> State<'a> {\n                     match out.constraint.slice_shift_char() {\n                         Some(('=', operand)) if out.is_rw => {\n                             try!(s.print_string(&format!(\"+{}\", operand),\n-                                                ast::CookedStr))\n+                                                ast::StrStyle::Cooked))\n                         }\n-                        _ => try!(s.print_string(&out.constraint, ast::CookedStr))\n+                        _ => try!(s.print_string(&out.constraint, ast::StrStyle::Cooked))\n                     }\n                     try!(s.popen());\n                     try!(s.print_expr(&*out.expr));\n@@ -2229,7 +2229,7 @@ impl<'a> State<'a> {\n \n                 try!(self.commasep(Inconsistent, &a.inputs,\n                                    |s, &(ref co, ref o)| {\n-                    try!(s.print_string(&co, ast::CookedStr));\n+                    try!(s.print_string(&co, ast::StrStyle::Cooked));\n                     try!(s.popen());\n                     try!(s.print_expr(&**o));\n                     try!(s.pclose());\n@@ -2240,7 +2240,7 @@ impl<'a> State<'a> {\n \n                 try!(self.commasep(Inconsistent, &a.clobbers,\n                                    |s, co| {\n-                    try!(s.print_string(&co, ast::CookedStr));\n+                    try!(s.print_string(&co, ast::StrStyle::Cooked));\n                     Ok(())\n                 }));\n \n@@ -2260,7 +2260,7 @@ impl<'a> State<'a> {\n                     try!(self.word_space(\":\"));\n                     try!(self.commasep(Inconsistent, &*options,\n                                        |s, &co| {\n-                        try!(s.print_string(co, ast::CookedStr));\n+                        try!(s.print_string(co, ast::StrStyle::Cooked));\n                         Ok(())\n                     }));\n                 }"}, {"sha": "858066cb62603fff6c0658d8743be312a12b8647", "filename": "src/libsyntax_ext/deriving/debug.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8b3856b1bc1c23969e5d8983f25cf85698a5c2b1/src%2Flibsyntax_ext%2Fderiving%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b3856b1bc1c23969e5d8983f25cf85698a5c2b1/src%2Flibsyntax_ext%2Fderiving%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fdebug.rs?ref=8b3856b1bc1c23969e5d8983f25cf85698a5c2b1", "patch": "@@ -71,8 +71,7 @@ fn show_substructure(cx: &mut ExtCtxt, span: Span,\n \n     // We want to make sure we have the expn_id set so that we can use unstable methods\n     let span = Span { expn_id: cx.backtrace(), .. span };\n-    let name = cx.expr_lit(span, ast::LitKind::Str(ident.name.as_str(),\n-                                                         ast::StrStyle::CookedStr));\n+    let name = cx.expr_lit(span, ast::LitKind::Str(ident.name.as_str(), ast::StrStyle::Cooked));\n     let builder = token::str_to_ident(\"builder\");\n     let builder_expr = cx.expr_ident(span, builder.clone());\n \n@@ -114,7 +113,7 @@ fn show_substructure(cx: &mut ExtCtxt, span: Span,\n                 for field in fields {\n                     let name = cx.expr_lit(field.span, ast::LitKind::Str(\n                             field.name.unwrap().name.as_str(),\n-                            ast::StrStyle::CookedStr));\n+                            ast::StrStyle::Cooked));\n \n                     // Use double indirection to make sure this works for unsized types\n                     let field = cx.expr_addr_of(field.span, field.self_.clone());"}]}