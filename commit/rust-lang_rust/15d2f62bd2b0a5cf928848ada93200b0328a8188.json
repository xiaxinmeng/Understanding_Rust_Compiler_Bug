{"sha": "15d2f62bd2b0a5cf928848ada93200b0328a8188", "node_id": "C_kwDOAAsO6NoAKDE1ZDJmNjJiZDJiMGE1Y2Y5Mjg4NDhhZGE5MzIwMGIwMzI4YTgxODg", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-10-30T17:20:08Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-11-01T17:02:51Z"}, "message": "Use VecCache for LocalDefId.", "tree": {"sha": "0260556b5c2c22a9b8f4792e1cff4f6ce2c99536", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0260556b5c2c22a9b8f4792e1cff4f6ce2c99536"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15d2f62bd2b0a5cf928848ada93200b0328a8188", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15d2f62bd2b0a5cf928848ada93200b0328a8188", "html_url": "https://github.com/rust-lang/rust/commit/15d2f62bd2b0a5cf928848ada93200b0328a8188", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15d2f62bd2b0a5cf928848ada93200b0328a8188/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aee4d132e75b5dbd22d98299c0c373cd92b08749", "url": "https://api.github.com/repos/rust-lang/rust/commits/aee4d132e75b5dbd22d98299c0c373cd92b08749", "html_url": "https://github.com/rust-lang/rust/commit/aee4d132e75b5dbd22d98299c0c373cd92b08749"}], "stats": {"total": 184, "additions": 183, "deletions": 1}, "files": [{"sha": "985d396a2d05bfdff61dfe6d07a5ffd64d15927c", "filename": "compiler/rustc_middle/src/ty/query.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/15d2f62bd2b0a5cf928848ada93200b0328a8188/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15d2f62bd2b0a5cf928848ada93200b0328a8188/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs?ref=15d2f62bd2b0a5cf928848ada93200b0328a8188", "patch": "@@ -120,6 +120,14 @@ macro_rules! query_helper_param_ty {\n }\n \n macro_rules! query_storage {\n+    // FIXME(cjgillot) this macro-based way to perform type-based dispatch is clearly brittle.\n+    // It should probably be replaced by an associated type on the `Key` trait.\n+    ([][CrateNum, $V:ty]) => { VecCache<CrateNum, $V> };\n+    ([(arena_cache) $($rest:tt)*][CrateNum, $V:ty]) => { VecArenaCache<'tcx, CrateNum, $V> };\n+    ([][LocalDefId, $V:ty]) => { VecCache<LocalDefId, $V> };\n+    ([(arena_cache) $($rest:tt)*][LocalDefId, $V:ty]) => { VecArenaCache<'tcx, LocalDefId, $V> };\n+    ([][hir::OwnerId, $V:ty]) => { VecCache<hir::OwnerId, $V> };\n+    ([(arena_cache) $($rest:tt)*][hir::OwnerId, $V:ty]) => { VecArenaCache<'tcx, hir::OwnerId, $V> };\n     ([][$K:ty, $V:ty]) => { DefaultCache<$K, $V> };\n     ([(arena_cache) $($rest:tt)*][$K:ty, $V:ty]) => { ArenaCache<'tcx, $K, $V> };\n     ([$other:tt $($modifiers:tt)*][$($args:tt)*]) => { query_storage!([$($modifiers)*][$($args)*]) };"}, {"sha": "0a473f912670b5cdb25561480a9cb7fdd02cfe4f", "filename": "compiler/rustc_query_system/src/query/caches.rs", "status": "modified", "additions": 172, "deletions": 0, "changes": 172, "blob_url": "https://github.com/rust-lang/rust/blob/15d2f62bd2b0a5cf928848ada93200b0328a8188/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fcaches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15d2f62bd2b0a5cf928848ada93200b0328a8188/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fcaches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fcaches.rs?ref=15d2f62bd2b0a5cf928848ada93200b0328a8188", "patch": "@@ -8,6 +8,7 @@ use rustc_data_structures::sharded::Sharded;\n #[cfg(not(parallel_compiler))]\n use rustc_data_structures::sync::Lock;\n use rustc_data_structures::sync::WorkerLocal;\n+use rustc_index::vec::{Idx, IndexVec};\n use std::default::Default;\n use std::fmt::Debug;\n use std::hash::Hash;\n@@ -207,3 +208,174 @@ where\n         }\n     }\n }\n+\n+pub struct VecCache<K: Idx, V> {\n+    #[cfg(parallel_compiler)]\n+    cache: Sharded<IndexVec<K, Option<(V, DepNodeIndex)>>>,\n+    #[cfg(not(parallel_compiler))]\n+    cache: Lock<IndexVec<K, Option<(V, DepNodeIndex)>>>,\n+}\n+\n+impl<K: Idx, V> Default for VecCache<K, V> {\n+    fn default() -> Self {\n+        VecCache { cache: Default::default() }\n+    }\n+}\n+\n+impl<K: Eq + Idx, V: Clone + Debug> QueryStorage for VecCache<K, V> {\n+    type Value = V;\n+    type Stored = V;\n+\n+    #[inline]\n+    fn store_nocache(&self, value: Self::Value) -> Self::Stored {\n+        // We have no dedicated storage\n+        value\n+    }\n+}\n+\n+impl<K, V> QueryCache for VecCache<K, V>\n+where\n+    K: Eq + Idx + Clone + Debug,\n+    V: Clone + Debug,\n+{\n+    type Key = K;\n+\n+    #[inline(always)]\n+    fn lookup<R, OnHit>(&self, key: &K, on_hit: OnHit) -> Result<R, ()>\n+    where\n+        OnHit: FnOnce(&V, DepNodeIndex) -> R,\n+    {\n+        #[cfg(parallel_compiler)]\n+        let lock = self.cache.get_shard_by_hash(key.index() as u64).lock();\n+        #[cfg(not(parallel_compiler))]\n+        let lock = self.cache.lock();\n+        if let Some(Some(value)) = lock.get(*key) {\n+            let hit_result = on_hit(&value.0, value.1);\n+            Ok(hit_result)\n+        } else {\n+            Err(())\n+        }\n+    }\n+\n+    #[inline]\n+    fn complete(&self, key: K, value: V, index: DepNodeIndex) -> Self::Stored {\n+        #[cfg(parallel_compiler)]\n+        let mut lock = self.cache.get_shard_by_hash(key.index() as u64).lock();\n+        #[cfg(not(parallel_compiler))]\n+        let mut lock = self.cache.lock();\n+        lock.insert(key, (value.clone(), index));\n+        value\n+    }\n+\n+    fn iter(&self, f: &mut dyn FnMut(&Self::Key, &Self::Value, DepNodeIndex)) {\n+        #[cfg(parallel_compiler)]\n+        {\n+            let shards = self.cache.lock_shards();\n+            for shard in shards.iter() {\n+                for (k, v) in shard.iter_enumerated() {\n+                    if let Some(v) = v {\n+                        f(&k, &v.0, v.1);\n+                    }\n+                }\n+            }\n+        }\n+        #[cfg(not(parallel_compiler))]\n+        {\n+            let map = self.cache.lock();\n+            for (k, v) in map.iter_enumerated() {\n+                if let Some(v) = v {\n+                    f(&k, &v.0, v.1);\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+pub struct VecArenaCache<'tcx, K: Idx, V> {\n+    arena: WorkerLocal<TypedArena<(V, DepNodeIndex)>>,\n+    #[cfg(parallel_compiler)]\n+    cache: Sharded<IndexVec<K, Option<&'tcx (V, DepNodeIndex)>>>,\n+    #[cfg(not(parallel_compiler))]\n+    cache: Lock<IndexVec<K, Option<&'tcx (V, DepNodeIndex)>>>,\n+}\n+\n+impl<'tcx, K: Idx, V> Default for VecArenaCache<'tcx, K, V> {\n+    fn default() -> Self {\n+        VecArenaCache {\n+            arena: WorkerLocal::new(|_| TypedArena::default()),\n+            cache: Default::default(),\n+        }\n+    }\n+}\n+\n+impl<'tcx, K: Eq + Idx, V: Debug + 'tcx> QueryStorage for VecArenaCache<'tcx, K, V> {\n+    type Value = V;\n+    type Stored = &'tcx V;\n+\n+    #[inline]\n+    fn store_nocache(&self, value: Self::Value) -> Self::Stored {\n+        let value = self.arena.alloc((value, DepNodeIndex::INVALID));\n+        let value = unsafe { &*(&value.0 as *const _) };\n+        &value\n+    }\n+}\n+\n+impl<'tcx, K, V: 'tcx> QueryCache for VecArenaCache<'tcx, K, V>\n+where\n+    K: Eq + Idx + Clone + Debug,\n+    V: Debug,\n+{\n+    type Key = K;\n+\n+    #[inline(always)]\n+    fn lookup<R, OnHit>(&self, key: &K, on_hit: OnHit) -> Result<R, ()>\n+    where\n+        OnHit: FnOnce(&&'tcx V, DepNodeIndex) -> R,\n+    {\n+        #[cfg(parallel_compiler)]\n+        let lock = self.cache.get_shard_by_hash(key.index() as u64).lock();\n+        #[cfg(not(parallel_compiler))]\n+        let lock = self.cache.lock();\n+        if let Some(Some(value)) = lock.get(*key) {\n+            let hit_result = on_hit(&&value.0, value.1);\n+            Ok(hit_result)\n+        } else {\n+            Err(())\n+        }\n+    }\n+\n+    #[inline]\n+    fn complete(&self, key: K, value: V, index: DepNodeIndex) -> Self::Stored {\n+        let value = self.arena.alloc((value, index));\n+        let value = unsafe { &*(value as *const _) };\n+        #[cfg(parallel_compiler)]\n+        let mut lock = self.cache.get_shard_by_hash(key.index() as u64).lock();\n+        #[cfg(not(parallel_compiler))]\n+        let mut lock = self.cache.lock();\n+        lock.insert(key, value);\n+        &value.0\n+    }\n+\n+    fn iter(&self, f: &mut dyn FnMut(&Self::Key, &Self::Value, DepNodeIndex)) {\n+        #[cfg(parallel_compiler)]\n+        {\n+            let shards = self.cache.lock_shards();\n+            for shard in shards.iter() {\n+                for (k, v) in shard.iter_enumerated() {\n+                    if let Some(v) = v {\n+                        f(&k, &v.0, v.1);\n+                    }\n+                }\n+            }\n+        }\n+        #[cfg(not(parallel_compiler))]\n+        {\n+            let map = self.cache.lock();\n+            for (k, v) in map.iter_enumerated() {\n+                if let Some(v) = v {\n+                    f(&k, &v.0, v.1);\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "bf14cd8de37658697c095647a04015e77a1bbc40", "filename": "compiler/rustc_query_system/src/query/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/15d2f62bd2b0a5cf928848ada93200b0328a8188/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15d2f62bd2b0a5cf928848ada93200b0328a8188/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fmod.rs?ref=15d2f62bd2b0a5cf928848ada93200b0328a8188", "patch": "@@ -7,7 +7,9 @@ pub use self::job::deadlock;\n pub use self::job::{print_query_stack, QueryInfo, QueryJob, QueryJobId, QueryJobInfo, QueryMap};\n \n mod caches;\n-pub use self::caches::{ArenaCache, DefaultCache, QueryCache, QueryStorage};\n+pub use self::caches::{\n+    ArenaCache, DefaultCache, QueryCache, QueryStorage, VecArenaCache, VecCache,\n+};\n \n mod config;\n pub use self::config::{QueryConfig, QueryDescription, QueryVTable};"}]}