{"sha": "809e180a76ce97340bf4354ff357bc59e3ca40b2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwOWUxODBhNzZjZTk3MzQwYmY0MzU0ZmYzNTdiYzU5ZTNjYTQwYjI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-27T00:32:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-27T00:32:30Z"}, "message": "Auto merge of #66794 - tmandry:rollup-99qrpr0, r=tmandry\n\nRollup of 14 pull requests\n\nSuccessful merges:\n\n - #66128 (alloc: Add new_zeroed() versions like new_uninit().)\n - #66661 (Add riscv64gc-unknown-linux-gnu target)\n - #66663 (Miri: print leak report even without tracing)\n - #66711 (Add hardware floating point features to aarch64-pc-windows-msvc)\n - #66713 (introduce a target to build the kernel of the unikernel HermitCore)\n - #66717 (tidy: Accommodate rustfmt's preferred layout of stability attributes)\n - #66719 (Store pointer width as u32 on Config)\n - #66720 (Move ErrorReported to rustc_errors)\n - #66737 (Error codes cleanup)\n - #66754 (Various tweaks to diagnostic output)\n - #66763 (Minor edit for documentation-tests.md that increases clarity)\n - #66779 (follow the same function order in the trait)\n - #66786 (Add wildcard test for const_if_match)\n - #66788 (Allow `Unreachable` terminators through `min_const_fn` checks)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "7c8e0aaf9f4345352e07818cb99d9b99d78ad81e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c8e0aaf9f4345352e07818cb99d9b99d78ad81e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/809e180a76ce97340bf4354ff357bc59e3ca40b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/809e180a76ce97340bf4354ff357bc59e3ca40b2", "html_url": "https://github.com/rust-lang/rust/commit/809e180a76ce97340bf4354ff357bc59e3ca40b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/809e180a76ce97340bf4354ff357bc59e3ca40b2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7d791b4503a86c1b16b4393ba7998ef8b561a27", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7d791b4503a86c1b16b4393ba7998ef8b561a27", "html_url": "https://github.com/rust-lang/rust/commit/a7d791b4503a86c1b16b4393ba7998ef8b561a27"}, {"sha": "8547ea32db4a6f2c5b27827b30f372859de22fbb", "url": "https://api.github.com/repos/rust-lang/rust/commits/8547ea32db4a6f2c5b27827b30f372859de22fbb", "html_url": "https://github.com/rust-lang/rust/commit/8547ea32db4a6f2c5b27827b30f372859de22fbb"}], "stats": {"total": 843, "additions": 441, "deletions": 402}, "files": [{"sha": "96fa4344b04b726525805979156a6a12ba25219a", "filename": "src/doc/rustdoc/src/documentation-tests.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Fdoc%2Frustdoc%2Fsrc%2Fdocumentation-tests.md", "raw_url": "https://github.com/rust-lang/rust/raw/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Fdoc%2Frustdoc%2Fsrc%2Fdocumentation-tests.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fdocumentation-tests.md?ref=809e180a76ce97340bf4354ff357bc59e3ca40b2", "patch": "@@ -1,7 +1,7 @@\n # Documentation tests\n \n `rustdoc` supports executing your documentation examples as tests. This makes sure\n-that your tests are up to date and working.\n+that examples within your documentation are up to date and working.\n \n The basic idea is this:\n "}, {"sha": "51ad3a04e87fe6b7791ce14af0ff204f094b864b", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=809e180a76ce97340bf4354ff357bc59e3ca40b2", "patch": "@@ -152,6 +152,33 @@ impl<T> Box<T> {\n         Box(ptr.cast().into())\n     }\n \n+    /// Constructs a new `Box` with uninitialized contents, with the memory\n+    /// being filled with `0` bytes.\n+    ///\n+    /// See [`MaybeUninit::zeroed`][zeroed] for examples of correct and incorrect usage\n+    /// of this method.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(new_uninit)]\n+    ///\n+    /// let zero = Box::<u32>::new_zeroed();\n+    /// let zero = unsafe { zero.assume_init() };\n+    ///\n+    /// assert_eq!(*zero, 0)\n+    /// ```\n+    ///\n+    /// [zeroed]: ../../std/mem/union.MaybeUninit.html#method.zeroed\n+    #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n+    pub fn new_zeroed() -> Box<mem::MaybeUninit<T>> {\n+        unsafe {\n+            let mut uninit = Self::new_uninit();\n+            ptr::write_bytes::<T>(uninit.as_mut_ptr(), 0, 1);\n+            uninit\n+        }\n+    }\n+\n     /// Constructs a new `Pin<Box<T>>`. If `T` does not implement `Unpin`, then\n     /// `x` will be pinned in memory and unable to be moved.\n     #[stable(feature = \"pin\", since = \"1.33.0\")]"}, {"sha": "ec08965674ad7d62f223c39d4f33d8aed7194109", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=809e180a76ce97340bf4354ff357bc59e3ca40b2", "patch": "@@ -361,6 +361,35 @@ impl<T> Rc<T> {\n         }\n     }\n \n+    /// Constructs a new `Rc` with uninitialized contents, with the memory\n+    /// being filled with `0` bytes.\n+    ///\n+    /// See [`MaybeUninit::zeroed`][zeroed] for examples of correct and\n+    /// incorrect usage of this method.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(new_uninit)]\n+    ///\n+    /// use std::rc::Rc;\n+    ///\n+    /// let zero = Rc::<u32>::new_zeroed();\n+    /// let zero = unsafe { zero.assume_init() };\n+    ///\n+    /// assert_eq!(*zero, 0)\n+    /// ```\n+    ///\n+    /// [zeroed]: ../../std/mem/union.MaybeUninit.html#method.zeroed\n+    #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n+    pub fn new_zeroed() -> Rc<mem::MaybeUninit<T>> {\n+        unsafe {\n+            let mut uninit = Self::new_uninit();\n+            ptr::write_bytes::<T>(Rc::get_mut_unchecked(&mut uninit).as_mut_ptr(), 0, 1);\n+            uninit\n+        }\n+    }\n+\n     /// Constructs a new `Pin<Rc<T>>`. If `T` does not implement `Unpin`, then\n     /// `value` will be pinned in memory and unable to be moved.\n     #[stable(feature = \"pin\", since = \"1.33.0\")]"}, {"sha": "0deb321d6231f7ced4deefa306fed276b4ce4e68", "filename": "src/liballoc/sync.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Fliballoc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Fliballoc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync.rs?ref=809e180a76ce97340bf4354ff357bc59e3ca40b2", "patch": "@@ -341,6 +341,35 @@ impl<T> Arc<T> {\n         }\n     }\n \n+    /// Constructs a new `Arc` with uninitialized contents, with the memory\n+    /// being filled with `0` bytes.\n+    ///\n+    /// See [`MaybeUninit::zeroed`][zeroed] for examples of correct and incorrect usage\n+    /// of this method.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(new_uninit)]\n+    ///\n+    /// use std::sync::Arc;\n+    ///\n+    /// let zero = Arc::<u32>::new_zeroed();\n+    /// let zero = unsafe { zero.assume_init() };\n+    ///\n+    /// assert_eq!(*zero, 0)\n+    /// ```\n+    ///\n+    /// [zeroed]: ../../std/mem/union.MaybeUninit.html#method.zeroed\n+    #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n+    pub fn new_zeroed() -> Arc<mem::MaybeUninit<T>> {\n+        unsafe {\n+            let mut uninit = Self::new_uninit();\n+            ptr::write_bytes::<T>(Arc::get_mut_unchecked(&mut uninit).as_mut_ptr(), 0, 1);\n+            uninit\n+        }\n+    }\n+\n     /// Constructs a new `Pin<Arc<T>>`. If `T` does not implement `Unpin`, then\n     /// `data` will be pinned in memory and unable to be moved.\n     #[stable(feature = \"pin\", since = \"1.33.0\")]"}, {"sha": "eea3dc39d345ea3ea6aa8c35b5aad8e2b5cd747b", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=809e180a76ce97340bf4354ff357bc59e3ca40b2", "patch": "@@ -464,9 +464,9 @@ impl<T: PartialOrd> PartialOrd for Reverse<T> {\n     #[inline]\n     fn le(&self, other: &Self) -> bool { other.0 <= self.0 }\n     #[inline]\n-    fn ge(&self, other: &Self) -> bool { other.0 >= self.0 }\n-    #[inline]\n     fn gt(&self, other: &Self) -> bool { other.0 > self.0 }\n+    #[inline]\n+    fn ge(&self, other: &Self) -> bool { other.0 >= self.0 }\n }\n \n #[stable(feature = \"reverse_cmp_key\", since = \"1.19.0\")]\n@@ -1176,9 +1176,9 @@ mod impls {\n         #[inline]\n         fn le(&self, other: & &B) -> bool { PartialOrd::le(*self, *other) }\n         #[inline]\n-        fn ge(&self, other: & &B) -> bool { PartialOrd::ge(*self, *other) }\n-        #[inline]\n         fn gt(&self, other: & &B) -> bool { PartialOrd::gt(*self, *other) }\n+        #[inline]\n+        fn ge(&self, other: & &B) -> bool { PartialOrd::ge(*self, *other) }\n     }\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     impl<A: ?Sized> Ord for &A where A: Ord {\n@@ -1208,9 +1208,9 @@ mod impls {\n         #[inline]\n         fn le(&self, other: &&mut B) -> bool { PartialOrd::le(*self, *other) }\n         #[inline]\n-        fn ge(&self, other: &&mut B) -> bool { PartialOrd::ge(*self, *other) }\n-        #[inline]\n         fn gt(&self, other: &&mut B) -> bool { PartialOrd::gt(*self, *other) }\n+        #[inline]\n+        fn ge(&self, other: &&mut B) -> bool { PartialOrd::ge(*self, *other) }\n     }\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     impl<A: ?Sized> Ord for &mut A where A: Ord {"}, {"sha": "b670658a10a50702fbd2ee351872dcc2d0ca5394", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=809e180a76ce97340bf4354ff357bc59e3ca40b2", "patch": "@@ -463,7 +463,6 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         &self,\n         err: &mut DiagnosticBuilder<'_>,\n         terr: &TypeError<'tcx>,\n-        sp: Span,\n     ) {\n         use hir::def_id::CrateNum;\n         use hir::map::DisambiguatedDefPathData;\n@@ -577,14 +576,10 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 };\n                 if same_path().unwrap_or(false) {\n                     let crate_name = self.tcx.crate_name(did1.krate);\n-                    err.span_note(\n-                        sp,\n-                        &format!(\n-                            \"Perhaps two different versions \\\n-                             of crate `{}` are being used?\",\n-                            crate_name\n-                        ),\n-                    );\n+                    err.note(&format!(\n+                        \"perhaps two different versions of crate `{}` are being used?\",\n+                        crate_name\n+                    ));\n                 }\n             }\n         };\n@@ -1434,7 +1429,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             .unwrap_or_else(|| {\n                 self.tcx.hir().body_owner_def_id(hir::BodyId { hir_id: cause.body_id })\n             });\n-        self.check_and_note_conflicting_crates(diag, terr, span);\n+        self.check_and_note_conflicting_crates(diag, terr);\n         self.tcx.note_and_explain_type_err(diag, terr, span, body_owner_def_id);\n \n         // It reads better to have the error origin as the final"}, {"sha": "6733250e1e8d89b875918e6c5a651e2c839651c6", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=809e180a76ce97340bf4354ff357bc59e3ca40b2", "patch": "@@ -12,7 +12,7 @@ use rustc_target::spec::{LinkerFlavor, MergeFunctions, PanicStrategy, RelroLevel\n use rustc_target::spec::{Target, TargetTriple};\n \n use syntax;\n-use syntax::ast::{self, IntTy, UintTy};\n+use syntax::ast;\n use syntax::source_map::{FileName, FilePathMapping};\n use syntax::edition::{Edition, EDITION_NAME_LIST, DEFAULT_EDITION};\n use syntax::symbol::{sym, Symbol};\n@@ -36,8 +36,7 @@ use std::path::{Path, PathBuf};\n \n pub struct Config {\n     pub target: Target,\n-    pub isize_ty: IntTy,\n-    pub usize_ty: UintTy,\n+    pub ptr_width: u32,\n }\n \n #[derive(Clone, Debug, Hash, PartialEq, Eq, PartialOrd, Ord)]\n@@ -1621,10 +1620,10 @@ pub fn build_target_config(opts: &Options, sp: &Handler) -> Config {\n         FatalError.raise();\n     });\n \n-    let (isize_ty, usize_ty) = match &target.target_pointer_width[..] {\n-        \"16\" => (ast::IntTy::I16, ast::UintTy::U16),\n-        \"32\" => (ast::IntTy::I32, ast::UintTy::U32),\n-        \"64\" => (ast::IntTy::I64, ast::UintTy::U64),\n+    let ptr_width = match &target.target_pointer_width[..] {\n+        \"16\" => 16,\n+        \"32\" => 32,\n+        \"64\" => 64,\n         w => sp.fatal(&format!(\n             \"target specification was invalid: \\\n              unrecognized target-pointer-width {}\",\n@@ -1634,8 +1633,7 @@ pub fn build_target_config(opts: &Options, sp: &Handler) -> Config {\n \n     Config {\n         target,\n-        isize_ty,\n-        usize_ty,\n+        ptr_width,\n     }\n }\n "}, {"sha": "8581a5b220ac6ac6e7c82e31e8023696f0de7604", "filename": "src/librustc/util/common.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Flibrustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Flibrustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fcommon.rs?ref=809e180a76ce97340bf4354ff357bc59e3ca40b2", "patch": "@@ -7,7 +7,6 @@ use std::fmt::Debug;\n use std::time::{Duration, Instant};\n \n use syntax::symbol::{Symbol, sym};\n-use rustc_macros::HashStable;\n use crate::session::Session;\n \n #[cfg(test)]\n@@ -16,10 +15,7 @@ mod tests;\n // The name of the associated type for `Fn` return types.\n pub const FN_OUTPUT_NAME: Symbol = sym::Output;\n \n-// Useful type to use with `Result<>` indicate that an error has already\n-// been reported to the user, so no need to continue checking.\n-#[derive(Clone, Copy, Debug, RustcEncodable, RustcDecodable, HashStable)]\n-pub struct ErrorReported;\n+pub use errors::ErrorReported;\n \n thread_local!(static TIME_DEPTH: Cell<usize> = Cell::new(0));\n "}, {"sha": "6f72466c559dc82484a318b71b087474fb51e233", "filename": "src/librustc_codegen_llvm/builder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbuilder.rs?ref=809e180a76ce97340bf4354ff357bc59e3ca40b2", "patch": "@@ -325,8 +325,8 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         use rustc::ty::{Int, Uint};\n \n         let new_kind = match ty.kind {\n-            Int(Isize) => Int(self.tcx.sess.target.isize_ty),\n-            Uint(Usize) => Uint(self.tcx.sess.target.usize_ty),\n+            Int(t @ Isize) => Int(t.normalize(self.tcx.sess.target.ptr_width)),\n+            Uint(t @ Usize) => Uint(t.normalize(self.tcx.sess.target.ptr_width)),\n             ref t @ Uint(_) | ref t @ Int(_) => t.clone(),\n             _ => panic!(\"tried to get overflow intrinsic for op applied to non-int type\")\n         };"}, {"sha": "aa55f3a19e2be45edd4e0fcdad72dc2cb8466b2e", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=809e180a76ce97340bf4354ff357bc59e3ca40b2", "patch": "@@ -1926,15 +1926,15 @@ unsupported {} from `{}` with element `{}` of size `{}` to `{}`\"#,\n fn int_type_width_signed(ty: Ty<'_>, cx: &CodegenCx<'_, '_>) -> Option<(u64, bool)> {\n     match ty.kind {\n         ty::Int(t) => Some((match t {\n-            ast::IntTy::Isize => cx.tcx.sess.target.isize_ty.bit_width().unwrap() as u64,\n+            ast::IntTy::Isize => cx.tcx.sess.target.ptr_width as u64,\n             ast::IntTy::I8 => 8,\n             ast::IntTy::I16 => 16,\n             ast::IntTy::I32 => 32,\n             ast::IntTy::I64 => 64,\n             ast::IntTy::I128 => 128,\n         }, true)),\n         ty::Uint(t) => Some((match t {\n-            ast::UintTy::Usize => cx.tcx.sess.target.usize_ty.bit_width().unwrap() as u64,\n+            ast::UintTy::Usize => cx.tcx.sess.target.ptr_width as u64,\n             ast::UintTy::U8 => 8,\n             ast::UintTy::U16 => 16,\n             ast::UintTy::U32 => 32,"}, {"sha": "64fc027b885b632b4c06debbd9c4f2a2269759b1", "filename": "src/librustc_error_codes/error_codes/E0062.md", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Flibrustc_error_codes%2Ferror_codes%2FE0062.md", "raw_url": "https://github.com/rust-lang/rust/raw/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Flibrustc_error_codes%2Ferror_codes%2FE0062.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0062.md?ref=809e180a76ce97340bf4354ff357bc59e3ca40b2", "patch": "@@ -1,6 +1,6 @@\n-This error indicates that during an attempt to build a struct or struct-like\n-enum variant, one of the fields was specified more than once. Erroneous code\n-example:\n+A struct's or struct-like enum variant's field was specified more than once.\n+\n+Erroneous code example:\n \n ```compile_fail,E0062\n struct Foo {\n@@ -15,7 +15,9 @@ fn main() {\n }\n ```\n \n-Each field should be specified exactly one time. Example:\n+This error indicates that during an attempt to build a struct or struct-like\n+enum variant, one of the fields was specified more than once. Each field should\n+be specified exactly one time. Example:\n \n ```\n struct Foo {"}, {"sha": "0e611deac426fa6d081957d1530ae8149a4c3cd1", "filename": "src/librustc_error_codes/error_codes/E0063.md", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Flibrustc_error_codes%2Ferror_codes%2FE0063.md", "raw_url": "https://github.com/rust-lang/rust/raw/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Flibrustc_error_codes%2Ferror_codes%2FE0063.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0063.md?ref=809e180a76ce97340bf4354ff357bc59e3ca40b2", "patch": "@@ -1,5 +1,6 @@\n-This error indicates that during an attempt to build a struct or struct-like\n-enum variant, one of the fields was not provided. Erroneous code example:\n+A struct's or struct-like enum variant's field was not provided.\n+\n+Erroneous code example:\n \n ```compile_fail,E0063\n struct Foo {"}, {"sha": "11041bb53ee5527c7d154401c79b36709ee94d1b", "filename": "src/librustc_error_codes/error_codes/E0067.md", "status": "modified", "additions": 7, "deletions": 25, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Flibrustc_error_codes%2Ferror_codes%2FE0067.md", "raw_url": "https://github.com/rust-lang/rust/raw/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Flibrustc_error_codes%2Ferror_codes%2FE0067.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0067.md?ref=809e180a76ce97340bf4354ff357bc59e3ca40b2", "patch": "@@ -1,33 +1,15 @@\n-The left-hand side of a compound assignment expression must be a place\n-expression. A place expression represents a memory location and includes\n-item paths (ie, namespaced variables), dereferences, indexing expressions,\n-and field references.\n+An invalid left-hand side expression was used on an assignment operation.\n \n-Let's start with some erroneous code examples:\n+Erroneous code example:\n \n ```compile_fail,E0067\n-use std::collections::LinkedList;\n-\n-// Bad: assignment to non-place expression\n-LinkedList::new() += 1;\n-\n-// ...\n-\n-fn some_func(i: &mut i32) {\n-    i += 12; // Error : '+=' operation cannot be applied on a reference !\n-}\n+12 += 1; // error!\n ```\n \n-And now some working examples:\n+You need to have a place expression to be able to assign it something. For\n+example:\n \n ```\n-let mut i : i32 = 0;\n-\n-i += 12; // Good !\n-\n-// ...\n-\n-fn some_func(i: &mut i32) {\n-    *i += 12; // Good !\n-}\n+let mut x: i8 = 12;\n+x += 1; // ok!\n ```"}, {"sha": "7367a5c0922ea9eae793ce6df00aa69de9519108", "filename": "src/librustc_error_codes/error_codes/E0069.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Flibrustc_error_codes%2Ferror_codes%2FE0069.md", "raw_url": "https://github.com/rust-lang/rust/raw/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Flibrustc_error_codes%2Ferror_codes%2FE0069.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0069.md?ref=809e180a76ce97340bf4354ff357bc59e3ca40b2", "patch": "@@ -1,5 +1,7 @@\n The compiler found a function whose body contains a `return;` statement but\n-whose return type is not `()`. An example of this is:\n+whose return type is not `()`.\n+\n+Erroneous code example:\n \n ```compile_fail,E0069\n // error"}, {"sha": "97522af3da867573aea68c34f40112e3949e61db", "filename": "src/librustc_error_codes/error_codes/E0070.md", "status": "modified", "additions": 20, "deletions": 18, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Flibrustc_error_codes%2Ferror_codes%2FE0070.md", "raw_url": "https://github.com/rust-lang/rust/raw/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Flibrustc_error_codes%2Ferror_codes%2FE0070.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0070.md?ref=809e180a76ce97340bf4354ff357bc59e3ca40b2", "patch": "@@ -1,41 +1,43 @@\n-The left-hand side of an assignment operator must be a place expression. A\n-place expression represents a memory location and can be a variable (with\n-optional namespacing), a dereference, an indexing expression or a field\n-reference.\n+An assignment operator was used on a non-place expression.\n \n-More details can be found in the [Expressions] section of the Reference.\n-\n-[Expressions]: https://doc.rust-lang.org/reference/expressions.html#places-rvalues-and-temporaries\n-\n-Now, we can go further. Here are some erroneous code examples:\n+Erroneous code examples:\n \n ```compile_fail,E0070\n struct SomeStruct {\n     x: i32,\n-    y: i32\n+    y: i32,\n }\n \n-const SOME_CONST : i32 = 12;\n+const SOME_CONST: i32 = 12;\n \n fn some_other_func() {}\n \n fn some_function() {\n-    SOME_CONST = 14; // error : a constant value cannot be changed!\n-    1 = 3; // error : 1 isn't a valid place!\n-    some_other_func() = 4; // error : we cannot assign value to a function!\n-    SomeStruct.x = 12; // error : SomeStruct a structure name but it is used\n-                       // like a variable!\n+    SOME_CONST = 14; // error: a constant value cannot be changed!\n+    1 = 3; // error: 1 isn't a valid place!\n+    some_other_func() = 4; // error: we cannot assign value to a function!\n+    SomeStruct::x = 12; // error: SomeStruct a structure name but it is used\n+                        //        like a variable!\n }\n ```\n \n+The left-hand side of an assignment operator must be a place expression. A\n+place expression represents a memory location and can be a variable (with\n+optional namespacing), a dereference, an indexing expression or a field\n+reference.\n+\n+More details can be found in the [Expressions] section of the Reference.\n+\n+[Expressions]: https://doc.rust-lang.org/reference/expressions.html#places-rvalues-and-temporaries\n+\n And now let's give working examples:\n \n ```\n struct SomeStruct {\n     x: i32,\n-    y: i32\n+    y: i32,\n }\n-let mut s = SomeStruct {x: 0, y: 0};\n+let mut s = SomeStruct { x: 0, y: 0 };\n \n s.x = 3; // that's good !\n "}, {"sha": "ae5876848185bc89c8588563813450c3644724ac", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=809e180a76ce97340bf4354ff357bc59e3ca40b2", "patch": "@@ -993,3 +993,10 @@ macro_rules! pluralize {\n         if $x != 1 { \"s\" } else { \"\" }\n     };\n }\n+\n+// Useful type to use with `Result<>` indicate that an error has already\n+// been reported to the user, so no need to continue checking.\n+#[derive(Clone, Copy, Debug, RustcEncodable, RustcDecodable, Hash, PartialEq, Eq)]\n+pub struct ErrorReported;\n+\n+rustc_data_structures::impl_stable_hash_via_hash!(ErrorReported);"}, {"sha": "f2e56c69fd79f5567fcc8be8b35e99277ae570a3", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=809e180a76ce97340bf4354ff357bc59e3ca40b2", "patch": "@@ -252,12 +252,7 @@ fn lint_int_literal<'a, 'tcx>(\n     t: ast::IntTy,\n     v: u128,\n ) {\n-    let int_type = if let ast::IntTy::Isize = t {\n-        cx.sess().target.isize_ty\n-    } else {\n-        t\n-    };\n-\n+    let int_type = t.normalize(cx.sess().target.ptr_width);\n     let (_, max) = int_ty_range(int_type);\n     let max = max as u128;\n     let negative = type_limits.negated_expr_id == e.hir_id;\n@@ -303,11 +298,7 @@ fn lint_uint_literal<'a, 'tcx>(\n     lit: &hir::Lit,\n     t: ast::UintTy,\n ) {\n-    let uint_type = if let ast::UintTy::Usize = t {\n-        cx.sess().target.usize_ty\n-    } else {\n-        t\n-    };\n+    let uint_type = t.normalize(cx.sess().target.ptr_width);\n     let (min, max) = uint_ty_range(uint_type);\n     let lit_val: u128 = match lit.node {\n         // _v is u8, within range by definition"}, {"sha": "7b54b98cbc13ccf031e6df75871a29ca75ad2c87", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=809e180a76ce97340bf4354ff357bc59e3ca40b2", "patch": "@@ -698,7 +698,9 @@ impl<'a> CrateLoader<'a> {\n         let has_global_allocator = match &*global_allocator_spans(krate) {\n             [span1, span2, ..] => {\n                 self.sess.struct_span_err(*span2, \"cannot define multiple global allocators\")\n-                         .span_note(*span1, \"the previous global allocator is defined here\").emit();\n+                    .span_label(*span2, \"cannot define a new global allocator\")\n+                    .span_label(*span1, \"previous global allocator is defined here\")\n+                    .emit();\n                 true\n             }\n             spans => !spans.is_empty()"}, {"sha": "9364bbedb0c587c2cd8d994e24123d3da5eaae18", "filename": "src/librustc_mir/borrow_check/conflict_errors.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs?ref=809e180a76ce97340bf4354ff357bc59e3ca40b2", "patch": "@@ -1264,23 +1264,17 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             Applicability::MachineApplicable,\n         );\n \n-        match category {\n-            ConstraintCategory::Return => {\n-                err.span_note(constraint_span, \"closure is returned here\");\n-            }\n-            ConstraintCategory::OpaqueType => {\n-                err.span_note(constraint_span, \"generator is returned here\");\n-            }\n+        let msg = match category {\n+            ConstraintCategory::Return => \"closure is returned here\".to_string(),\n+            ConstraintCategory::OpaqueType => \"generator is returned here\".to_string(),\n             ConstraintCategory::CallArgument => {\n                 fr_name.highlight_region_name(&mut err);\n-                err.span_note(\n-                    constraint_span,\n-                    &format!(\"function requires argument type to outlive `{}`\", fr_name),\n-                );\n+                format!(\"function requires argument type to outlive `{}`\", fr_name)\n             }\n             _ => bug!(\"report_escaping_closure_capture called with unexpected constraint \\\n                        category: `{:?}`\", category),\n-        }\n+        };\n+        err.span_note(constraint_span, &msg);\n         err\n     }\n "}, {"sha": "c7cfda79b9383a4e3a4ca343c12a9ed75e5cb06e", "filename": "src/librustc_mir/borrow_check/move_errors.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs?ref=809e180a76ce97340bf4354ff357bc59e3ca40b2", "patch": "@@ -558,7 +558,6 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         err: &mut DiagnosticBuilder<'a>,\n         binds_to: &[Local],\n     ) {\n-        let mut noncopy_var_spans = Vec::new();\n         for (j, local) in binds_to.into_iter().enumerate() {\n             let bind_to = &self.body.local_decls[*local];\n             let binding_span = bind_to.source_info.span;\n@@ -576,16 +575,12 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                     bind_to.ty,\n                     Some(binding_span)\n                 );\n-            } else {\n-                noncopy_var_spans.push(binding_span);\n             }\n         }\n \n         if binds_to.len() > 1 {\n-            err.span_note(\n-                noncopy_var_spans,\n-                \"move occurs because these variables have types that \\\n-                    don't implement the `Copy` trait\",\n+            err.note(\"move occurs because these variables have types that \\\n+                      don't implement the `Copy` trait\",\n             );\n         }\n     }"}, {"sha": "626e81fa91186f51805acb108053987504356085", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=809e180a76ce97340bf4354ff357bc59e3ca40b2", "patch": "@@ -733,7 +733,9 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         if let LocalValue::Live(Operand::Indirect(MemPlace { ptr, .. })) = local {\n             trace!(\"deallocating local\");\n             let ptr = ptr.to_ptr()?;\n-            self.memory.dump_alloc(ptr.alloc_id);\n+            if log_enabled!(::log::Level::Trace) {\n+                self.memory.dump_alloc(ptr.alloc_id);\n+            }\n             self.memory.deallocate_local(ptr)?;\n         };\n         Ok(())"}, {"sha": "eccdc5b03261b8dbbe8f47ba040d1b434e2cb09c", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=809e180a76ce97340bf4354ff357bc59e3ca40b2", "patch": "@@ -635,7 +635,9 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         Ok(())\n     }\n \n-    /// For debugging, print an allocation and all allocations it points to, recursively.\n+    /// Print an allocation and all allocations it points to, recursively.\n+    /// This prints directly to stderr, ignoring RUSTC_LOG! It is up to the caller to\n+    /// control for this.\n     pub fn dump_alloc(&self, id: AllocId) {\n         self.dump_allocs(vec![id]);\n     }\n@@ -674,7 +676,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n             }\n         }\n \n-        trace!(\n+        eprintln!(\n             \"{}({} bytes, alignment {}){}\",\n             msg,\n             alloc.size.bytes(),\n@@ -695,15 +697,14 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n                 write!(msg, \"\u2514{0:\u2500^1$}\u2518 \", target, relocation_width as usize).unwrap();\n                 pos = i + self.pointer_size();\n             }\n-            trace!(\"{}\", msg);\n+            eprintln!(\"{}\", msg);\n         }\n     }\n \n-    /// For debugging, print a list of allocations and all allocations they point to, recursively.\n+    /// Print a list of allocations and all allocations they point to, recursively.\n+    /// This prints directly to stderr, ignoring RUSTC_LOG! It is up to the caller to\n+    /// control for this.\n     pub fn dump_allocs(&self, mut allocs: Vec<AllocId>) {\n-        if !log_enabled!(::log::Level::Trace) {\n-            return;\n-        }\n         allocs.sort();\n         allocs.dedup();\n         let mut allocs_to_print = VecDeque::from(allocs);\n@@ -735,13 +736,13 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n                             );\n                         }\n                         Some(GlobalAlloc::Function(func)) => {\n-                            trace!(\"{} {}\", msg, func);\n+                            eprintln!(\"{} {}\", msg, func);\n                         }\n                         Some(GlobalAlloc::Static(did)) => {\n-                            trace!(\"{} {:?}\", msg, did);\n+                            eprintln!(\"{} {:?}\", msg, did);\n                         }\n                         None => {\n-                            trace!(\"{} (deallocated)\", msg);\n+                            eprintln!(\"{} (deallocated)\", msg);\n                         }\n                     }\n                 },\n@@ -751,12 +752,14 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n     }\n \n     pub fn leak_report(&self) -> usize {\n-        trace!(\"### LEAK REPORT ###\");\n         let leaks: Vec<_> = self.alloc_map.filter_map_collect(|&id, &(kind, _)| {\n             if kind.may_leak() { None } else { Some(id) }\n         });\n         let n = leaks.len();\n-        self.dump_allocs(leaks);\n+        if n > 0 {\n+            eprintln!(\"### LEAK REPORT ###\");\n+            self.dump_allocs(leaks);\n+        }\n         n\n     }\n "}, {"sha": "81f4c277f4d76746146b02db115dda17cef98ca7", "filename": "src/librustc_mir/transform/qualify_min_const_fn.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs?ref=809e180a76ce97340bf4354ff357bc59e3ca40b2", "patch": "@@ -337,6 +337,9 @@ fn check_terminator(\n             check_operand(tcx, discr, span, def_id, body)\n         }\n \n+        // FIXME(ecstaticmorse): We probably want to allow `Unreachable` unconditionally.\n+        TerminatorKind::Unreachable if tcx.features().const_if_match => Ok(()),\n+\n         | TerminatorKind::Abort | TerminatorKind::Unreachable => {\n             Err((span, \"const fn with unreachable code is not stable\".into()))\n         }"}, {"sha": "cab9b8b78d30af131a92a0ff9e0139caf274e26d", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=809e180a76ce97340bf4354ff357bc59e3ca40b2", "patch": "@@ -491,9 +491,12 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parses a macro invocation inside a `trait`, `impl` or `extern` block.\n-    fn parse_assoc_macro_invoc(&mut self, item_kind: &str, vis: Option<&Visibility>,\n-                               at_end: &mut bool) -> PResult<'a, Option<Mac>>\n-    {\n+    fn parse_assoc_macro_invoc(\n+        &mut self,\n+        item_kind: &str,\n+        vis: Option<&Visibility>,\n+        at_end: &mut bool,\n+    ) -> PResult<'a, Option<Mac>> {\n         if self.token.is_path_start() &&\n                 !(self.is_async_fn() && self.token.span.rust_2015()) {\n             let prev_span = self.prev_span;\n@@ -532,9 +535,11 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n-    fn missing_assoc_item_kind_err(&self, item_type: &str, prev_span: Span)\n-                                   -> DiagnosticBuilder<'a>\n-    {\n+    fn missing_assoc_item_kind_err(\n+        &self,\n+        item_type: &str,\n+        prev_span: Span,\n+    ) -> DiagnosticBuilder<'a> {\n         let expected_kinds = if item_type == \"extern\" {\n             \"missing `fn`, `type`, or `static`\"\n         } else {"}, {"sha": "50f0d66b5e3fd3bce91a784731d2ca75b643d53d", "filename": "src/librustc_passes/loops.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Flibrustc_passes%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Flibrustc_passes%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Floops.rs?ref=809e180a76ce97340bf4354ff357bc59e3ca40b2", "patch": "@@ -144,8 +144,8 @@ impl<'a, 'hir> Visitor<'hir> for CheckLoopVisitor<'a, 'hir> {\n                                             \"`continue` pointing to a labeled block\")\n                                 .span_label(e.span,\n                                             \"labeled blocks cannot be `continue`'d\")\n-                                .span_note(block.span,\n-                                            \"labeled block the continue points to\")\n+                                .span_label(block.span,\n+                                            \"labeled block the `continue` points to\")\n                                 .emit();\n                         }\n                     }"}, {"sha": "3ad53737f49693f6888027c296cd8c0cfbe77fb5", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=809e180a76ce97340bf4354ff357bc59e3ca40b2", "patch": "@@ -1160,8 +1160,10 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                     .emit();\n             } else {\n                 let msg = format!(\"`{}` is private, and cannot be re-exported\", ident);\n-                let note_msg =\n-                    format!(\"consider marking `{}` as `pub` in the imported module\", ident);\n+                let note_msg = format!(\n+                    \"consider marking `{}` as `pub` in the imported module\",\n+                    ident,\n+                );\n                 struct_span_err!(self.r.session, directive.span, E0364, \"{}\", &msg)\n                     .span_note(directive.span, &note_msg)\n                     .emit();"}, {"sha": "37dd9427ef4f242486b8a28467460c1f0d52293d", "filename": "src/librustc_target/spec/aarch64_pc_windows_msvc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Flibrustc_target%2Fspec%2Faarch64_pc_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Flibrustc_target%2Fspec%2Faarch64_pc_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Faarch64_pc_windows_msvc.rs?ref=809e180a76ce97340bf4354ff357bc59e3ca40b2", "patch": "@@ -4,6 +4,7 @@ pub fn target() -> TargetResult {\n     let mut base = super::windows_msvc_base::opts();\n     base.max_atomic_width = Some(64);\n     base.has_elf_tls = true;\n+    base.features = \"+neon,+fp-armv8\".to_string();\n \n     // FIXME: this shouldn't be panic=abort, it should be panic=unwind\n     base.panic_strategy = PanicStrategy::Abort;"}, {"sha": "ad1027c7bc775ecf2f246a788318704c0239aa84", "filename": "src/librustc_target/spec/hermit_kernel_base.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Flibrustc_target%2Fspec%2Fhermit_kernel_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Flibrustc_target%2Fspec%2Fhermit_kernel_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fhermit_kernel_base.rs?ref=809e180a76ce97340bf4354ff357bc59e3ca40b2", "patch": "@@ -0,0 +1,27 @@\n+use crate::spec::{LldFlavor, LinkArgs, LinkerFlavor, PanicStrategy, TargetOptions};\n+use std::default::Default;\n+\n+pub fn opts() -> TargetOptions {\n+    let mut pre_link_args = LinkArgs::new();\n+    pre_link_args.insert(LinkerFlavor::Lld(LldFlavor::Ld), vec![\n+        \"--build-id\".to_string(),\n+        \"--hash-style=gnu\".to_string(),\n+        \"--Bstatic\".to_string(),\n+    ]);\n+\n+    TargetOptions {\n+        disable_redzone: true,\n+        linker: Some(\"rust-lld\".to_owned()),\n+        executables: true,\n+        has_elf_tls: true,\n+        linker_is_gnu: true,\n+        pre_link_args,\n+        no_default_libraries: true,\n+        panic_strategy: PanicStrategy::Abort,\n+        position_independent_executables: true,\n+        relocation_model: \"static\".to_string(),\n+        target_family: None,\n+        tls_model: \"initial-exec\".to_string(),\n+        .. Default::default()\n+    }\n+}"}, {"sha": "29076254584c0cac200db10112c25deabbe0d712", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=809e180a76ce97340bf4354ff357bc59e3ca40b2", "patch": "@@ -54,6 +54,7 @@ mod dragonfly_base;\n mod freebsd_base;\n mod haiku_base;\n mod hermit_base;\n+mod hermit_kernel_base;\n mod linux_base;\n mod linux_kernel_base;\n mod linux_musl_base;\n@@ -481,12 +482,14 @@ supported_targets! {\n \n     (\"aarch64-unknown-hermit\", aarch64_unknown_hermit),\n     (\"x86_64-unknown-hermit\", x86_64_unknown_hermit),\n+    (\"x86_64-unknown-hermit-kernel\", x86_64_unknown_hermit_kernel),\n \n     (\"riscv32i-unknown-none-elf\", riscv32i_unknown_none_elf),\n     (\"riscv32imc-unknown-none-elf\", riscv32imc_unknown_none_elf),\n     (\"riscv32imac-unknown-none-elf\", riscv32imac_unknown_none_elf),\n     (\"riscv64imac-unknown-none-elf\", riscv64imac_unknown_none_elf),\n     (\"riscv64gc-unknown-none-elf\", riscv64gc_unknown_none_elf),\n+    (\"riscv64gc-unknown-linux-gnu\", riscv64gc_unknown_linux_gnu),\n \n     (\"aarch64-unknown-none\", aarch64_unknown_none),\n     (\"aarch64-unknown-none-softfloat\", aarch64_unknown_none_softfloat),"}, {"sha": "638e6770ebf8c59d87fcc09ab19187e7be259271", "filename": "src/librustc_target/spec/riscv64gc_unknown_linux_gnu.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Flibrustc_target%2Fspec%2Friscv64gc_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Flibrustc_target%2Fspec%2Friscv64gc_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Friscv64gc_unknown_linux_gnu.rs?ref=809e180a76ce97340bf4354ff357bc59e3ca40b2", "patch": "@@ -0,0 +1,25 @@\n+use crate::spec::{LinkerFlavor, Target, TargetOptions, TargetResult};\n+\n+pub fn target() -> TargetResult {\n+    Ok(Target {\n+        llvm_target: \"riscv64-unknown-linux-gnu\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"64\".to_string(),\n+        target_c_int_width: \"32\".to_string(),\n+        target_env: \"gnu\".to_string(),\n+        data_layout: \"e-m:e-p:64:64-i64:64-i128:128-n64-S128\".to_string(),\n+        arch: \"riscv64\".to_string(),\n+        target_os: \"linux\".to_string(),\n+        target_vendor: \"unknown\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n+        options: TargetOptions {\n+            abi_blacklist: super::riscv_base::abi_blacklist(),\n+            code_model: Some(\"medium\".to_string()),\n+            cpu: \"generic-rv64\".to_string(),\n+            features: \"+m,+a,+f,+d,+c\".to_string(),\n+            llvm_abiname: \"lp64d\".to_string(),\n+            max_atomic_width: Some(64),\n+            ..super::linux_base::opts()\n+        },\n+    })\n+}"}, {"sha": "ebaada8f4f8eb86dffbd567ce3a7f28bb7bfd16f", "filename": "src/librustc_target/spec/x86_64_unknown_hermit_kernel.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_hermit_kernel.rs", "raw_url": "https://github.com/rust-lang/rust/raw/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_hermit_kernel.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_hermit_kernel.rs?ref=809e180a76ce97340bf4354ff357bc59e3ca40b2", "patch": "@@ -0,0 +1,25 @@\n+use crate::spec::{LldFlavor, LinkerFlavor, Target, TargetResult};\n+\n+pub fn target() -> TargetResult {\n+    let mut base = super::hermit_kernel_base::opts();\n+    base.cpu = \"x86-64\".to_string();\n+    base.max_atomic_width = Some(64);\n+    base.features =\n+        \"-mmx,-sse,-sse2,-sse3,-ssse3,-sse4.1,-sse4.2,-3dnow,-3dnowa,-avx,-avx2,+soft-float\"\n+        .to_string();\n+    base.stack_probes = true;\n+\n+    Ok(Target {\n+        llvm_target: \"x86_64-unknown-hermit\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"64\".to_string(),\n+        target_c_int_width: \"32\".to_string(),\n+        data_layout: \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\".to_string(),\n+        arch: \"x86_64\".to_string(),\n+        target_os: \"hermit\".to_string(),\n+        target_env: String::new(),\n+        target_vendor: \"unknown\".to_string(),\n+        linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),\n+        options: base,\n+    })\n+}"}, {"sha": "0a95d4209ac6a46dfcfb7aba12005fe433f2ebb6", "filename": "src/librustdoc/passes/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fmod.rs?ref=809e180a76ce97340bf4354ff357bc59e3ca40b2", "patch": "@@ -344,7 +344,7 @@ pub fn look_for_tests<'tcx>(\n             lint::builtin::MISSING_DOC_CODE_EXAMPLES,\n             hir_id,\n             sp,\n-            \"Missing code example in this documentation\");\n+            \"missing code example in this documentation\");\n         diag.emit();\n     } else if check_missing_code == false &&\n               tests.found_tests > 0 &&\n@@ -353,7 +353,7 @@ pub fn look_for_tests<'tcx>(\n             lint::builtin::PRIVATE_DOC_TESTS,\n             hir_id,\n             span_of_attrs(&item.attrs).unwrap_or(item.source.span()),\n-            \"Documentation test in private item\");\n+            \"documentation test in private item\");\n         diag.emit();\n     }\n }\n@@ -367,7 +367,7 @@ crate fn span_of_attrs(attrs: &clean::Attributes) -> Option<Span> {\n     if start == DUMMY_SP {\n         return None;\n     }\n-    let end = attrs.doc_strings.last().expect(\"No doc strings provided\").span();\n+    let end = attrs.doc_strings.last().expect(\"no doc strings provided\").span();\n     Some(start.to(end))\n }\n "}, {"sha": "512f43c86ca010cc55b52c38511eae0b6f526a22", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=809e180a76ce97340bf4354ff357bc59e3ca40b2", "patch": "@@ -1718,6 +1718,18 @@ impl IntTy {\n             IntTy::I128 => 128,\n         })\n     }\n+\n+    pub fn normalize(&self, target_width: u32) -> Self {\n+        match self {\n+            IntTy::Isize => match target_width {\n+                16 => IntTy::I16,\n+                32 => IntTy::I32,\n+                64 => IntTy::I64,\n+                _ => unreachable!(),\n+            },\n+            _ => *self,\n+        }\n+    }\n }\n \n #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, HashStable_Generic,\n@@ -1768,6 +1780,18 @@ impl UintTy {\n             UintTy::U128 => 128,\n         })\n     }\n+\n+    pub fn normalize(&self, target_width: u32) -> Self {\n+        match self {\n+            UintTy::Usize => match target_width {\n+                16 => UintTy::U16,\n+                32 => UintTy::U32,\n+                64 => UintTy::U64,\n+                _ => unreachable!(),\n+            },\n+            _ => *self,\n+        }\n+    }\n }\n \n /// A constraint on an associated type (e.g., `A = Bar` in `Foo<A = Bar>` or"}, {"sha": "ec0eaa568123ab42954528c1bdf0c7c5874e6744", "filename": "src/libsyntax/feature_gate/check.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs?ref=809e180a76ce97340bf4354ff357bc59e3ca40b2", "patch": "@@ -688,10 +688,9 @@ pub fn get_features(span_handler: &Handler, krate_attrs: &[ast::Attribute],\n                     crate_edition: Edition, allow_features: &Option<Vec<String>>) -> Features {\n     fn feature_removed(span_handler: &Handler, span: Span, reason: Option<&str>) {\n         let mut err = struct_span_err!(span_handler, span, E0557, \"feature has been removed\");\n+        err.span_label(span, \"feature has been removed\");\n         if let Some(reason) = reason {\n-            err.span_note(span, reason);\n-        } else {\n-            err.span_label(span, \"feature has been removed\");\n+            err.note(reason);\n         }\n         err.emit();\n     }"}, {"sha": "837e04afd34016a1786e96f3a22f826205477218", "filename": "src/libsyntax_expand/mbe/macro_check.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Flibsyntax_expand%2Fmbe%2Fmacro_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Flibsyntax_expand%2Fmbe%2Fmacro_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fmbe%2Fmacro_check.rs?ref=809e180a76ce97340bf4354ff357bc59e3ca40b2", "patch": "@@ -269,7 +269,8 @@ fn check_binders(\n                 // for nested macro definitions.\n                 sess.span_diagnostic\n                     .struct_span_err(span, \"duplicate matcher binding\")\n-                    .span_note(prev_info.span, \"previous declaration was here\")\n+                    .span_label(span, \"duplicate binding\")\n+                    .span_label(prev_info.span, \"previous binding\")\n                     .emit();\n                 *valid = false;\n             } else {"}, {"sha": "0a19d64200ce70dbb754b0c269b5570d5a23b7ea", "filename": "src/libsyntax_ext/format.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Flibsyntax_ext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Flibsyntax_ext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat.rs?ref=809e180a76ce97340bf4354ff357bc59e3ca40b2", "patch": "@@ -172,7 +172,8 @@ fn parse_args<'a>(\n             let e = p.parse_expr()?;\n             if let Some(prev) = names.get(&name) {\n                 ecx.struct_span_err(e.span, &format!(\"duplicate argument named `{}`\", name))\n-                    .span_note(args[*prev].span, \"previously here\")\n+                    .span_label(args[*prev].span, \"previously here\")\n+                    .span_label(e.span, \"duplicate argument\")\n                     .emit();\n                 continue;\n             }"}, {"sha": "604400c3cc2ff5562384c61bbfc84e5ea671d413", "filename": "src/libsyntax_ext/proc_macro_harness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Flibsyntax_ext%2Fproc_macro_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Flibsyntax_ext%2Fproc_macro_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fproc_macro_harness.rs?ref=809e180a76ce97340bf4354ff357bc59e3ca40b2", "patch": "@@ -270,7 +270,7 @@ impl<'a> Visitor<'a> for CollectProcMacros<'a> {\n                     };\n \n                     self.handler.struct_span_err(attr.span, &msg)\n-                        .span_note(prev_attr.span, \"previous attribute here\")\n+                        .span_label(prev_attr.span, \"previous attribute here\")\n                         .emit();\n \n                     return;"}, {"sha": "5ad8e8a826f053b5eff3576942d7b33c648970e6", "filename": "src/test/rustdoc-ui/doc-without-codeblock.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Ftest%2Frustdoc-ui%2Fdoc-without-codeblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Ftest%2Frustdoc-ui%2Fdoc-without-codeblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fdoc-without-codeblock.rs?ref=809e180a76ce97340bf4354ff357bc59e3ca40b2", "patch": "@@ -1,13 +1,13 @@\n-#![deny(missing_doc_code_examples)] //~ ERROR Missing code example in this documentation\n+#![deny(missing_doc_code_examples)] //~ ERROR missing code example in this documentation\n \n /// Some docs.\n-//~^ ERROR Missing code example in this documentation\n+//~^ ERROR missing code example in this documentation\n pub struct Foo;\n \n /// And then, the princess died.\n-//~^ ERROR Missing code example in this documentation\n+//~^ ERROR missing code example in this documentation\n pub mod foo {\n     /// Or maybe not because she saved herself!\n-    //~^ ERROR Missing code example in this documentation\n+    //~^ ERROR missing code example in this documentation\n     pub fn bar() {}\n }"}, {"sha": "bf65fcf19a0d6e56ab140df534b3297917730aeb", "filename": "src/test/rustdoc-ui/doc-without-codeblock.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Ftest%2Frustdoc-ui%2Fdoc-without-codeblock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Ftest%2Frustdoc-ui%2Fdoc-without-codeblock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fdoc-without-codeblock.stderr?ref=809e180a76ce97340bf4354ff357bc59e3ca40b2", "patch": "@@ -1,4 +1,4 @@\n-error: Missing code example in this documentation\n+error: missing code example in this documentation\n   --> $DIR/doc-without-codeblock.rs:1:1\n    |\n LL | / #![deny(missing_doc_code_examples)]\n@@ -16,19 +16,19 @@ note: lint level defined here\n LL | #![deny(missing_doc_code_examples)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: Missing code example in this documentation\n+error: missing code example in this documentation\n   --> $DIR/doc-without-codeblock.rs:3:1\n    |\n LL | /// Some docs.\n    | ^^^^^^^^^^^^^^\n \n-error: Missing code example in this documentation\n+error: missing code example in this documentation\n   --> $DIR/doc-without-codeblock.rs:7:1\n    |\n LL | /// And then, the princess died.\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: Missing code example in this documentation\n+error: missing code example in this documentation\n   --> $DIR/doc-without-codeblock.rs:10:5\n    |\n LL |     /// Or maybe not because she saved herself!"}, {"sha": "06766db5335a1eeb4d3c2ec7da0f1db03cac6e7f", "filename": "src/test/rustdoc-ui/lint-group.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Ftest%2Frustdoc-ui%2Flint-group.rs", "raw_url": "https://github.com/rust-lang/rust/raw/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Ftest%2Frustdoc-ui%2Flint-group.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Flint-group.rs?ref=809e180a76ce97340bf4354ff357bc59e3ca40b2", "patch": "@@ -14,11 +14,11 @@\n pub fn link_error() {} //~^^^^^ ERROR cannot be resolved, ignoring it\n \n /// wait, this doesn't have a doctest?\n-pub fn no_doctest() {} //~^ ERROR Missing code example in this documentation\n+pub fn no_doctest() {} //~^ ERROR missing code example in this documentation\n \n /// wait, this *does* have a doctest?\n ///\n /// ```\n /// println!(\"sup\");\n /// ```\n-fn private_doctest() {} //~^^^^^ ERROR Documentation test in private item\n+fn private_doctest() {} //~^^^^^ ERROR documentation test in private item"}, {"sha": "63274ae2be4f639a4cb608d81a41cc9e85cfaade", "filename": "src/test/rustdoc-ui/lint-group.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Ftest%2Frustdoc-ui%2Flint-group.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Ftest%2Frustdoc-ui%2Flint-group.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Flint-group.stderr?ref=809e180a76ce97340bf4354ff357bc59e3ca40b2", "patch": "@@ -1,4 +1,4 @@\n-error: Documentation test in private item\n+error: documentation test in private item\n   --> $DIR/lint-group.rs:19:1\n    |\n LL | / /// wait, this *does* have a doctest?\n@@ -29,7 +29,7 @@ LL | #![deny(rustdoc)]\n    = note: `#[deny(intra_doc_link_resolution_failure)]` implied by `#[deny(rustdoc)]`\n    = help: to escape `[` and `]` characters, just add '\\' before them like `\\[` or `\\]`\n \n-error: Missing code example in this documentation\n+error: missing code example in this documentation\n   --> $DIR/lint-group.rs:16:1\n    |\n LL | /// wait, this doesn't have a doctest?"}, {"sha": "179dba17c6d818f0413b3319e0a6d90e44d85582", "filename": "src/test/rustdoc-ui/lint-missing-doc-code-example.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Ftest%2Frustdoc-ui%2Flint-missing-doc-code-example.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Ftest%2Frustdoc-ui%2Flint-missing-doc-code-example.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Flint-missing-doc-code-example.stderr?ref=809e180a76ce97340bf4354ff357bc59e3ca40b2", "patch": "@@ -1,4 +1,4 @@\n-error: Missing code example in this documentation\n+error: missing code example in this documentation\n   --> $DIR/lint-missing-doc-code-example.rs:19:1\n    |\n LL | / mod module1 {\n@@ -11,7 +11,7 @@ note: lint level defined here\n LL | #![deny(missing_doc_code_examples)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: Missing code example in this documentation\n+error: missing code example in this documentation\n   --> $DIR/lint-missing-doc-code-example.rs:37:3\n    |\n LL |   /// doc"}, {"sha": "2f1bddc7c75ccdbc4754554838c4a9b12a4df923", "filename": "src/test/rustdoc-ui/private-item-doc-test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Ftest%2Frustdoc-ui%2Fprivate-item-doc-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Ftest%2Frustdoc-ui%2Fprivate-item-doc-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fprivate-item-doc-test.rs?ref=809e180a76ce97340bf4354ff357bc59e3ca40b2", "patch": "@@ -6,6 +6,6 @@ mod foo {\n     /// ```\n     /// assert!(false);\n     /// ```\n-    //~^^^^^ ERROR Documentation test in private item\n+    //~^^^^^ ERROR documentation test in private item\n     fn bar() {}\n }"}, {"sha": "8abbdb31ec91acedac122cd87677adf49883877d", "filename": "src/test/rustdoc-ui/private-item-doc-test.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Ftest%2Frustdoc-ui%2Fprivate-item-doc-test.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Ftest%2Frustdoc-ui%2Fprivate-item-doc-test.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fprivate-item-doc-test.stderr?ref=809e180a76ce97340bf4354ff357bc59e3ca40b2", "patch": "@@ -1,4 +1,4 @@\n-error: Documentation test in private item\n+error: documentation test in private item\n   --> $DIR/private-item-doc-test.rs:4:5\n    |\n LL | /     /// private doc test"}, {"sha": "35d9f0f42f00164fcbdd7f30fd4bcb5f6425687d", "filename": "src/test/ui/allocator/two-allocators.stderr", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Ftest%2Fui%2Fallocator%2Ftwo-allocators.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Ftest%2Fui%2Fallocator%2Ftwo-allocators.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fallocator%2Ftwo-allocators.stderr?ref=809e180a76ce97340bf4354ff357bc59e3ca40b2", "patch": "@@ -1,14 +1,11 @@\n error: cannot define multiple global allocators\n   --> $DIR/two-allocators.rs:6:1\n    |\n-LL | static B: System = System;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: the previous global allocator is defined here\n-  --> $DIR/two-allocators.rs:4:1\n-   |\n LL | static A: System = System;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | -------------------------- previous global allocator is defined here\n+LL | #[global_allocator]\n+LL | static B: System = System;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot define a new global allocator\n \n error: aborting due to previous error\n "}, {"sha": "26de39101f2117e98f3f4a14c01ea9eee3e3cbeb", "filename": "src/test/ui/borrowck/borrowck-move-error-with-note.stderr", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.stderr?ref=809e180a76ce97340bf4354ff357bc59e3ca40b2", "patch": "@@ -10,15 +10,7 @@ LL |                   num2) => (),\n LL |         Foo::Foo2(num) => (),\n    |                   --- ...and here\n    |\n-note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/borrowck-move-error-with-note.rs:12:19\n-   |\n-LL |         Foo::Foo1(num1,\n-   |                   ^^^^\n-LL |                   num2) => (),\n-   |                   ^^^^\n-LL |         Foo::Foo2(num) => (),\n-   |                   ^^^\n+   = note: move occurs because these variables have types that don't implement the `Copy` trait\n \n error[E0509]: cannot move out of type `S`, which implements the `Drop` trait\n   --> $DIR/borrowck-move-error-with-note.rs:28:11\n@@ -31,13 +23,7 @@ LL |             f: _s,\n LL |             g: _t\n    |                -- ...and here\n    |\n-note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/borrowck-move-error-with-note.rs:31:16\n-   |\n-LL |             f: _s,\n-   |                ^^\n-LL |             g: _t\n-   |                ^^\n+   = note: move occurs because these variables have types that don't implement the `Copy` trait\n \n error[E0507]: cannot move out of `a.a` which is behind a shared reference\n   --> $DIR/borrowck-move-error-with-note.rs:46:11"}, {"sha": "8fb4c062c0363772f5e529b179000cbad372f0e9", "filename": "src/test/ui/borrowck/borrowck-move-out-of-vec-tail.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-vec-tail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-vec-tail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-vec-tail.stderr?ref=809e180a76ce97340bf4354ff357bc59e3ca40b2", "patch": "@@ -9,13 +9,7 @@ LL |                 &[Foo { string: a },\n LL |                   Foo { string: b }] => {\n    |                                 - ...and here\n    |\n-note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/borrowck-move-out-of-vec-tail.rs:21:33\n-   |\n-LL |                 &[Foo { string: a },\n-   |                                 ^\n-LL |                   Foo { string: b }] => {\n-   |                                 ^\n+   = note: move occurs because these variables have types that don't implement the `Copy` trait\n help: consider removing the `&`\n    |\n LL |                 [Foo { string: a },"}, {"sha": "e274d105e05034f4e0fb2512cc98fa981dd60de9", "filename": "src/test/ui/borrowck/borrowck-vec-pattern-nesting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.rs?ref=809e180a76ce97340bf4354ff357bc59e3ca40b2", "patch": "@@ -75,12 +75,12 @@ fn e() {\n     match vec {\n         //~^ ERROR cannot move out\n         //~| NOTE cannot move out\n+        //~| NOTE move occurs because these variables have types\n         &mut [_a, _b, _c] => {}\n         //~^ NOTE data moved here\n         //~| NOTE and here\n         //~| NOTE and here\n         //~| HELP consider removing the `&mut`\n-        //~| NOTE move occurs because these variables have types\n         _ => {}\n     }\n     let a = vec[0]; //~ ERROR cannot move out"}, {"sha": "a3324f25d0bb5968c52f611958544f5a6366f395", "filename": "src/test/ui/borrowck/borrowck-vec-pattern-nesting.stderr", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.stderr?ref=809e180a76ce97340bf4354ff357bc59e3ca40b2", "patch": "@@ -97,11 +97,7 @@ LL |         &mut [_a, _b, _c] => {}\n    |         |     data moved here\n    |         help: consider removing the `&mut`: `[_a, _b, _c]`\n    |\n-note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/borrowck-vec-pattern-nesting.rs:78:15\n-   |\n-LL |         &mut [_a, _b, _c] => {}\n-   |               ^^  ^^  ^^\n+   = note: move occurs because these variables have types that don't implement the `Copy` trait\n \n error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy slice\n   --> $DIR/borrowck-vec-pattern-nesting.rs:86:13"}, {"sha": "9e22151f2e9eed5686a0aefce329160f3d9a4573", "filename": "src/test/ui/consts/control-flow/exhaustive-c-like-enum-match.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fexhaustive-c-like-enum-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fexhaustive-c-like-enum-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fexhaustive-c-like-enum-match.rs?ref=809e180a76ce97340bf4354ff357bc59e3ca40b2", "patch": "@@ -0,0 +1,21 @@\n+// Test for <https://github.com/rust-lang/rust/issues/66756>\n+\n+// check-pass\n+\n+#![feature(const_if_match)]\n+\n+enum E {\n+    A,\n+    B,\n+    C\n+}\n+\n+const fn f(e: E) {\n+    match e {\n+        E::A => {}\n+        E::B => {}\n+        E::C => {}\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "fba6e3583cc2978cbb82d9ec9f0f09851b4b8e2d", "filename": "src/test/ui/consts/control-flow/single-arm-match-wild.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fsingle-arm-match-wild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fsingle-arm-match-wild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fsingle-arm-match-wild.rs?ref=809e180a76ce97340bf4354ff357bc59e3ca40b2", "patch": "@@ -0,0 +1,21 @@\n+// check-pass\n+\n+#![feature(const_if_match)]\n+\n+enum E {\n+    A,\n+    B,\n+    C\n+}\n+\n+const fn f(e: E) -> usize {\n+    match e {\n+        _ => 0\n+    }\n+}\n+\n+fn main() {\n+    const X: usize = f(E::C);\n+    assert_eq!(X, 0);\n+    assert_eq!(f(E::A), 0);\n+}"}, {"sha": "c024094dd5610da186114734332eb165b6f2b31f", "filename": "src/test/ui/if/ifmt-bad-arg.stderr", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Ftest%2Fui%2Fif%2Fifmt-bad-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Ftest%2Fui%2Fif%2Fifmt-bad-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fifmt-bad-arg.stderr?ref=809e180a76ce97340bf4354ff357bc59e3ca40b2", "patch": "@@ -138,13 +138,9 @@ error: duplicate argument named `foo`\n   --> $DIR/ifmt-bad-arg.rs:40:33\n    |\n LL |     format!(\"{foo}\", foo=1, foo=2);\n-   |                                 ^\n-   |\n-note: previously here\n-  --> $DIR/ifmt-bad-arg.rs:40:26\n-   |\n-LL |     format!(\"{foo}\", foo=1, foo=2);\n-   |                          ^\n+   |                          -      ^ duplicate argument\n+   |                          |\n+   |                          previously here\n \n error: positional arguments cannot follow named arguments\n   --> $DIR/ifmt-bad-arg.rs:41:35"}, {"sha": "9d9a88f4f9b06353a1a0a73c1f600d281e712ed4", "filename": "src/test/ui/issues/issue-12567.stderr", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Ftest%2Fui%2Fissues%2Fissue-12567.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Ftest%2Fui%2Fissues%2Fissue-12567.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-12567.stderr?ref=809e180a76ce97340bf4354ff357bc59e3ca40b2", "patch": "@@ -10,14 +10,7 @@ LL |             => println!(\"one empty\"),\n LL |         (&[hd1, ..], &[hd2, ..])\n    |                        --- ...and here\n    |\n-note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/issue-12567.rs:8:17\n-   |\n-LL |         (&[], &[hd, ..]) | (&[hd, ..], &[])\n-   |                 ^^\n-LL |             => println!(\"one empty\"),\n-LL |         (&[hd1, ..], &[hd2, ..])\n-   |                        ^^^\n+   = note: move occurs because these variables have types that don't implement the `Copy` trait\n \n error[E0508]: cannot move out of type `[T]`, a non-copy slice\n   --> $DIR/issue-12567.rs:4:11\n@@ -31,14 +24,7 @@ LL |             => println!(\"one empty\"),\n LL |         (&[hd1, ..], &[hd2, ..])\n    |            --- ...and here\n    |\n-note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/issue-12567.rs:8:17\n-   |\n-LL |         (&[], &[hd, ..]) | (&[hd, ..], &[])\n-   |                 ^^\n-LL |             => println!(\"one empty\"),\n-LL |         (&[hd1, ..], &[hd2, ..])\n-   |            ^^^\n+   = note: move occurs because these variables have types that don't implement the `Copy` trait\n \n error: aborting due to 2 previous errors\n "}, {"sha": "d0a4097de6816fcb35321b63fca5900feaf80582", "filename": "src/test/ui/issues/issue-40402-ref-hints/issue-40402-2.stderr", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Ftest%2Fui%2Fissues%2Fissue-40402-ref-hints%2Fissue-40402-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Ftest%2Fui%2Fissues%2Fissue-40402-ref-hints%2Fissue-40402-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40402-ref-hints%2Fissue-40402-2.stderr?ref=809e180a76ce97340bf4354ff357bc59e3ca40b2", "patch": "@@ -7,11 +7,7 @@ LL |     let (a, b) = x[0];\n    |          |  ...and here\n    |          data moved here\n    |\n-note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/issue-40402-2.rs:5:10\n-   |\n-LL |     let (a, b) = x[0];\n-   |          ^  ^\n+   = note: move occurs because these variables have types that don't implement the `Copy` trait\n \n error: aborting due to previous error\n "}, {"sha": "c5f79ed6333ee6f62242c33870cc670754b8bac7", "filename": "src/test/ui/label/label_break_value_continue.stderr", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Ftest%2Fui%2Flabel%2Flabel_break_value_continue.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Ftest%2Fui%2Flabel%2Flabel_break_value_continue.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flabel%2Flabel_break_value_continue.stderr?ref=809e180a76ce97340bf4354ff357bc59e3ca40b2", "patch": "@@ -7,16 +7,11 @@ LL |         continue;\n error[E0696]: `continue` pointing to a labeled block\n   --> $DIR/label_break_value_continue.rs:14:9\n    |\n-LL |         continue 'b;\n-   |         ^^^^^^^^^^^ labeled blocks cannot be `continue`'d\n-   |\n-note: labeled block the continue points to\n-  --> $DIR/label_break_value_continue.rs:13:5\n-   |\n LL | /     'b: {\n LL | |         continue 'b;\n+   | |         ^^^^^^^^^^^ labeled blocks cannot be `continue`'d\n LL | |     }\n-   | |_____^\n+   | |_____- labeled block the `continue` points to\n \n error[E0695]: unlabeled `continue` inside of a labeled block\n   --> $DIR/label_break_value_continue.rs:22:13"}, {"sha": "3ad1297ffb2f3961ab497030ad69d70e5b0a3171", "filename": "src/test/ui/macros/macro-multiple-matcher-bindings.stderr", "status": "modified", "additions": 12, "deletions": 28, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Ftest%2Fui%2Fmacros%2Fmacro-multiple-matcher-bindings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Ftest%2Fui%2Fmacros%2Fmacro-multiple-matcher-bindings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-multiple-matcher-bindings.stderr?ref=809e180a76ce97340bf4354ff357bc59e3ca40b2", "patch": "@@ -2,49 +2,33 @@ error: duplicate matcher binding\n   --> $DIR/macro-multiple-matcher-bindings.rs:7:16\n    |\n LL |     ($a:ident, $a:ident) => {};\n-   |                ^^^^^^^^\n-   |\n-note: previous declaration was here\n-  --> $DIR/macro-multiple-matcher-bindings.rs:7:6\n-   |\n-LL |     ($a:ident, $a:ident) => {};\n-   |      ^^^^^^^^\n+   |      --------  ^^^^^^^^ duplicate binding\n+   |      |\n+   |      previous binding\n \n error: duplicate matcher binding\n   --> $DIR/macro-multiple-matcher-bindings.rs:8:16\n    |\n LL |     ($a:ident, $a:path) => {};\n-   |                ^^^^^^^\n-   |\n-note: previous declaration was here\n-  --> $DIR/macro-multiple-matcher-bindings.rs:8:6\n-   |\n-LL |     ($a:ident, $a:path) => {};\n-   |      ^^^^^^^^\n+   |      --------  ^^^^^^^ duplicate binding\n+   |      |\n+   |      previous binding\n \n error: duplicate matcher binding\n   --> $DIR/macro-multiple-matcher-bindings.rs:17:18\n    |\n LL |     ($a:ident, $($a:ident),*) => {};\n-   |                  ^^^^^^^^\n-   |\n-note: previous declaration was here\n-  --> $DIR/macro-multiple-matcher-bindings.rs:17:6\n-   |\n-LL |     ($a:ident, $($a:ident),*) => {};\n-   |      ^^^^^^^^\n+   |      --------    ^^^^^^^^ duplicate binding\n+   |      |\n+   |      previous binding\n \n error: duplicate matcher binding\n   --> $DIR/macro-multiple-matcher-bindings.rs:18:25\n    |\n LL |     ($($a:ident)+ # $($($a:path),+);*) => {};\n-   |                         ^^^^^^^\n-   |\n-note: previous declaration was here\n-  --> $DIR/macro-multiple-matcher-bindings.rs:18:8\n-   |\n-LL |     ($($a:ident)+ # $($($a:path),+);*) => {};\n-   |        ^^^^^^^^\n+   |        --------         ^^^^^^^ duplicate binding\n+   |        |\n+   |        previous binding\n \n error: aborting due to 4 previous errors\n "}, {"sha": "475a586ddc083ed4da470db3523c92950fef0e31", "filename": "src/test/ui/macros/macro-reexport-removed.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Ftest%2Fui%2Fmacros%2Fmacro-reexport-removed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Ftest%2Fui%2Fmacros%2Fmacro-reexport-removed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-reexport-removed.stderr?ref=809e180a76ce97340bf4354ff357bc59e3ca40b2", "patch": "@@ -2,13 +2,9 @@ error[E0557]: feature has been removed\n   --> $DIR/macro-reexport-removed.rs:3:12\n    |\n LL | #![feature(macro_reexport)]\n-   |            ^^^^^^^^^^^^^^\n+   |            ^^^^^^^^^^^^^^ feature has been removed\n    |\n-note: subsumed by `pub use`\n-  --> $DIR/macro-reexport-removed.rs:3:12\n-   |\n-LL | #![feature(macro_reexport)]\n-   |            ^^^^^^^^^^^^^^\n+   = note: subsumed by `pub use`\n \n error: cannot find attribute `macro_reexport` in this scope\n   --> $DIR/macro-reexport-removed.rs:5:3"}, {"sha": "d4a0e45648c25ea2653e9568bf4478119c3f592b", "filename": "src/test/ui/nll/move-errors.stderr", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Ftest%2Fui%2Fnll%2Fmove-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Ftest%2Fui%2Fnll%2Fmove-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmove-errors.stderr?ref=809e180a76ce97340bf4354ff357bc59e3ca40b2", "patch": "@@ -83,13 +83,7 @@ LL |         B::U(d) => (),\n LL |         B::V(s) => (),\n    |              - ...and here\n    |\n-note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/move-errors.rs:76:14\n-   |\n-LL |         B::U(d) => (),\n-   |              ^\n-LL |         B::V(s) => (),\n-   |              ^\n+   = note: move occurs because these variables have types that don't implement the `Copy` trait\n \n error[E0509]: cannot move out of type `D`, which implements the `Drop` trait\n   --> $DIR/move-errors.rs:83:11\n@@ -138,11 +132,7 @@ LL |         F(s, mut t) => (),\n    |           |\n    |           data moved here\n    |\n-note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/move-errors.rs:104:11\n-   |\n-LL |         F(s, mut t) => (),\n-   |           ^  ^^^^^\n+   = note: move occurs because these variables have types that don't implement the `Copy` trait\n \n error[E0507]: cannot move out of `x.0` which is behind a shared reference\n   --> $DIR/move-errors.rs:110:11"}, {"sha": "1f1211aa198f8ea09a83ccb58a2a60f4b73229ff", "filename": "src/test/ui/suggestions/dont-suggest-ref/duplicate-suggestions.stderr", "status": "modified", "additions": 17, "deletions": 91, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fduplicate-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fduplicate-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fduplicate-suggestions.stderr?ref=809e180a76ce97340bf4354ff357bc59e3ca40b2", "patch": "@@ -8,11 +8,7 @@ LL |     let &(X(_t), X(_u)) = &(x.clone(), x.clone());\n    |         |   data moved here\n    |         help: consider removing the `&`: `(X(_t), X(_u))`\n    |\n-note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/duplicate-suggestions.rs:39:13\n-   |\n-LL |     let &(X(_t), X(_u)) = &(x.clone(), x.clone());\n-   |             ^^     ^^\n+   = note: move occurs because these variables have types that don't implement the `Copy` trait\n \n error[E0507]: cannot move out of a shared reference\n   --> $DIR/duplicate-suggestions.rs:43:50\n@@ -24,11 +20,7 @@ LL |     if let &(Either::One(_t), Either::Two(_u)) = &(e.clone(), e.clone()) {\n    |            |             data moved here\n    |            help: consider removing the `&`: `(Either::One(_t), Either::Two(_u))`\n    |\n-note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/duplicate-suggestions.rs:43:26\n-   |\n-LL |     if let &(Either::One(_t), Either::Two(_u)) = &(e.clone(), e.clone()) { }\n-   |                          ^^               ^^\n+   = note: move occurs because these variables have types that don't implement the `Copy` trait\n \n error[E0507]: cannot move out of a shared reference\n   --> $DIR/duplicate-suggestions.rs:47:53\n@@ -40,11 +32,7 @@ LL |     while let &(Either::One(_t), Either::Two(_u)) = &(e.clone(), e.clone())\n    |               |             data moved here\n    |               help: consider removing the `&`: `(Either::One(_t), Either::Two(_u))`\n    |\n-note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/duplicate-suggestions.rs:47:29\n-   |\n-LL |     while let &(Either::One(_t), Either::Two(_u)) = &(e.clone(), e.clone()) { }\n-   |                             ^^               ^^\n+   = note: move occurs because these variables have types that don't implement the `Copy` trait\n \n error[E0507]: cannot move out of a shared reference\n   --> $DIR/duplicate-suggestions.rs:51:11\n@@ -60,14 +48,7 @@ LL |         &(Either::One(_t), Either::Two(_u)) => (),\n LL |         &(Either::Two(_t), Either::One(_u)) => (),\n    |                       -- ...and here   -- ...and here\n    |\n-note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/duplicate-suggestions.rs:53:23\n-   |\n-LL |         &(Either::One(_t), Either::Two(_u)) => (),\n-   |                       ^^               ^^\n-...\n-LL |         &(Either::Two(_t), Either::One(_u)) => (),\n-   |                       ^^               ^^\n+   = note: move occurs because these variables have types that don't implement the `Copy` trait\n help: consider removing the `&`\n    |\n LL |         (Either::One(_t), Either::Two(_u)) => (),\n@@ -90,11 +71,7 @@ LL |         &(Either::One(_t), Either::Two(_u))\n    |         |             data moved here\n    |         help: consider removing the `&`: `(Either::One(_t), Either::Two(_u))`\n    |\n-note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/duplicate-suggestions.rs:63:23\n-   |\n-LL |         &(Either::One(_t), Either::Two(_u))\n-   |                       ^^               ^^\n+   = note: move occurs because these variables have types that don't implement the `Copy` trait\n \n error[E0507]: cannot move out of a shared reference\n   --> $DIR/duplicate-suggestions.rs:70:11\n@@ -109,11 +86,7 @@ LL |         &(Either::One(_t), Either::Two(_u)) => (),\n    |         |             data moved here\n    |         help: consider removing the `&`: `(Either::One(_t), Either::Two(_u))`\n    |\n-note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/duplicate-suggestions.rs:72:23\n-   |\n-LL |         &(Either::One(_t), Either::Two(_u)) => (),\n-   |                       ^^               ^^\n+   = note: move occurs because these variables have types that don't implement the `Copy` trait\n \n error[E0507]: cannot move out of a shared reference\n   --> $DIR/duplicate-suggestions.rs:78:11\n@@ -128,11 +101,7 @@ LL |         &(Either::One(_t), Either::Two(_u)) => (),\n    |         |             data moved here\n    |         help: consider removing the `&`: `(Either::One(_t), Either::Two(_u))`\n    |\n-note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/duplicate-suggestions.rs:80:23\n-   |\n-LL |         &(Either::One(_t), Either::Two(_u)) => (),\n-   |                       ^^               ^^\n+   = note: move occurs because these variables have types that don't implement the `Copy` trait\n \n error[E0507]: cannot move out of a mutable reference\n   --> $DIR/duplicate-suggestions.rs:91:31\n@@ -144,11 +113,7 @@ LL |     let &mut (X(_t), X(_u)) = &mut (xm.clone(), xm.clone());\n    |         |       data moved here\n    |         help: consider removing the `&mut`: `(X(_t), X(_u))`\n    |\n-note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/duplicate-suggestions.rs:91:17\n-   |\n-LL |     let &mut (X(_t), X(_u)) = &mut (xm.clone(), xm.clone());\n-   |                 ^^     ^^\n+   = note: move occurs because these variables have types that don't implement the `Copy` trait\n \n error[E0507]: cannot move out of a mutable reference\n   --> $DIR/duplicate-suggestions.rs:95:54\n@@ -160,11 +125,7 @@ LL |     if let &mut (Either::One(_t), Either::Two(_u)) = &mut (em.clone(), em.c\n    |            |                 data moved here\n    |            help: consider removing the `&mut`: `(Either::One(_t), Either::Two(_u))`\n    |\n-note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/duplicate-suggestions.rs:95:30\n-   |\n-LL |     if let &mut (Either::One(_t), Either::Two(_u)) = &mut (em.clone(), em.clone()) { }\n-   |                              ^^               ^^\n+   = note: move occurs because these variables have types that don't implement the `Copy` trait\n \n error[E0507]: cannot move out of a mutable reference\n   --> $DIR/duplicate-suggestions.rs:99:57\n@@ -176,11 +137,7 @@ LL |     while let &mut (Either::One(_t), Either::Two(_u)) = &mut (em.clone(), e\n    |               |                 data moved here\n    |               help: consider removing the `&mut`: `(Either::One(_t), Either::Two(_u))`\n    |\n-note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/duplicate-suggestions.rs:99:33\n-   |\n-LL |     while let &mut (Either::One(_t), Either::Two(_u)) = &mut (em.clone(), em.clone()) { }\n-   |                                 ^^               ^^\n+   = note: move occurs because these variables have types that don't implement the `Copy` trait\n \n error[E0507]: cannot move out of a mutable reference\n   --> $DIR/duplicate-suggestions.rs:103:11\n@@ -196,14 +153,7 @@ LL |         &mut (Either::One(_t), Either::Two(_u)) => (),\n LL |         &mut (Either::Two(_t), Either::One(_u)) => (),\n    |                           -- ...and here   -- ...and here\n    |\n-note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/duplicate-suggestions.rs:105:27\n-   |\n-LL |         &mut (Either::One(_t), Either::Two(_u)) => (),\n-   |                           ^^               ^^\n-...\n-LL |         &mut (Either::Two(_t), Either::One(_u)) => (),\n-   |                           ^^               ^^\n+   = note: move occurs because these variables have types that don't implement the `Copy` trait\n help: consider removing the `&mut`\n    |\n LL |         (Either::One(_t), Either::Two(_u)) => (),\n@@ -226,11 +176,7 @@ LL |         &mut (Either::One(_t), Either::Two(_u))\n    |         |                 data moved here\n    |         help: consider removing the `&mut`: `(Either::One(_t), Either::Two(_u))`\n    |\n-note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/duplicate-suggestions.rs:115:27\n-   |\n-LL |         &mut (Either::One(_t), Either::Two(_u))\n-   |                           ^^               ^^\n+   = note: move occurs because these variables have types that don't implement the `Copy` trait\n \n error[E0507]: cannot move out of a mutable reference\n   --> $DIR/duplicate-suggestions.rs:122:11\n@@ -245,11 +191,7 @@ LL |         &mut (Either::One(_t), Either::Two(_u)) => (),\n    |         |                 data moved here\n    |         help: consider removing the `&mut`: `(Either::One(_t), Either::Two(_u))`\n    |\n-note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/duplicate-suggestions.rs:124:27\n-   |\n-LL |         &mut (Either::One(_t), Either::Two(_u)) => (),\n-   |                           ^^               ^^\n+   = note: move occurs because these variables have types that don't implement the `Copy` trait\n \n error[E0507]: cannot move out of a mutable reference\n   --> $DIR/duplicate-suggestions.rs:130:11\n@@ -264,11 +206,7 @@ LL |         &mut (Either::One(_t), Either::Two(_u)) => (),\n    |         |                 data moved here\n    |         help: consider removing the `&mut`: `(Either::One(_t), Either::Two(_u))`\n    |\n-note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/duplicate-suggestions.rs:132:27\n-   |\n-LL |         &mut (Either::One(_t), Either::Two(_u)) => (),\n-   |                           ^^               ^^\n+   = note: move occurs because these variables have types that don't implement the `Copy` trait\n \n error[E0507]: cannot move out of a mutable reference\n   --> $DIR/duplicate-suggestions.rs:138:11\n@@ -283,11 +221,7 @@ LL |         &mut (Either::One(_t), Either::Two(_u)) => (),\n    |         |                 data moved here\n    |         help: consider removing the `&mut`: `(Either::One(_t), Either::Two(_u))`\n    |\n-note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/duplicate-suggestions.rs:140:27\n-   |\n-LL |         &mut (Either::One(_t), Either::Two(_u)) => (),\n-   |                           ^^               ^^\n+   = note: move occurs because these variables have types that don't implement the `Copy` trait\n \n error[E0507]: cannot move out of a shared reference\n   --> $DIR/duplicate-suggestions.rs:86:11\n@@ -299,11 +233,7 @@ LL |     fn f5(&(X(_t), X(_u)): &(X, X)) { }\n    |           |   data moved here\n    |           help: consider removing the `&`: `(X(_t), X(_u))`\n    |\n-note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/duplicate-suggestions.rs:86:15\n-   |\n-LL |     fn f5(&(X(_t), X(_u)): &(X, X)) { }\n-   |               ^^     ^^\n+   = note: move occurs because these variables have types that don't implement the `Copy` trait\n \n error[E0507]: cannot move out of a mutable reference\n   --> $DIR/duplicate-suggestions.rs:146:11\n@@ -315,11 +245,7 @@ LL |     fn f6(&mut (X(_t), X(_u)): &mut (X, X)) { }\n    |           |       data moved here\n    |           help: consider removing the `&mut`: `(X(_t), X(_u))`\n    |\n-note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/duplicate-suggestions.rs:146:19\n-   |\n-LL |     fn f6(&mut (X(_t), X(_u)): &mut (X, X)) { }\n-   |                   ^^     ^^\n+   = note: move occurs because these variables have types that don't implement the `Copy` trait\n \n error: aborting due to 17 previous errors\n "}, {"sha": "ac91ac43736f95e7b301b640389d6756562fcddc", "filename": "src/test/ui/suggestions/dont-suggest-ref/simple.stderr", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fsimple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fsimple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fsimple.stderr?ref=809e180a76ce97340bf4354ff357bc59e3ca40b2", "patch": "@@ -337,14 +337,7 @@ LL |         &mut Either::One(_t) => (),\n LL |         &mut Either::Two(_t) => (),\n    |                          -- ...and here\n    |\n-note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/simple.rs:221:26\n-   |\n-LL |         &mut Either::One(_t) => (),\n-   |                          ^^\n-...\n-LL |         &mut Either::Two(_t) => (),\n-   |                          ^^\n+   = note: move occurs because these variables have types that don't implement the `Copy` trait\n help: consider removing the `&mut`\n    |\n LL |         Either::One(_t) => (),\n@@ -470,13 +463,7 @@ LL |         (&mut Either::One(_t),) => (),\n LL |         (&mut Either::Two(_t),) => (),\n    |                           -- ...and here\n    |\n-note: move occurs because these variables have types that don't implement the `Copy` trait\n-  --> $DIR/simple.rs:280:27\n-   |\n-LL |         (&mut Either::One(_t),) => (),\n-   |                           ^^\n-LL |         (&mut Either::Two(_t),) => (),\n-   |                           ^^\n+   = note: move occurs because these variables have types that don't implement the `Copy` trait\n \n error[E0507]: cannot move out of a shared reference\n   --> $DIR/simple.rs:288:18"}, {"sha": "eeda5460ac36acf03eb135fdf4867a3f057475ef", "filename": "src/test/ui/type/type-mismatch-same-crate-name.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Ftest%2Fui%2Ftype%2Ftype-mismatch-same-crate-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Ftest%2Fui%2Ftype%2Ftype-mismatch-same-crate-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-mismatch-same-crate-name.rs?ref=809e180a76ce97340bf4354ff357bc59e3ca40b2", "patch": "@@ -15,11 +15,11 @@ fn main() {\n         extern crate crate_a1 as a;\n         a::try_foo(foo2);\n         //~^ ERROR mismatched types\n-        //~| Perhaps two different versions of crate `crate_a1`\n+        //~| perhaps two different versions of crate `crate_a1`\n         //~| expected struct `main::a::Foo`\n         a::try_bar(bar2);\n         //~^ ERROR mismatched types\n-        //~| Perhaps two different versions of crate `crate_a1`\n+        //~| perhaps two different versions of crate `crate_a1`\n         //~| expected trait `main::a::Bar`\n         //~| expected struct `std::boxed::Box<(dyn main::a::Bar + 'static)>`\n         //~| found struct `std::boxed::Box<dyn main::a::Bar>`"}, {"sha": "be5406696b7de790747dc7c79e1bad6a19214d4b", "filename": "src/test/ui/type/type-mismatch-same-crate-name.stderr", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Ftest%2Fui%2Ftype%2Ftype-mismatch-same-crate-name.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Ftest%2Fui%2Ftype%2Ftype-mismatch-same-crate-name.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-mismatch-same-crate-name.stderr?ref=809e180a76ce97340bf4354ff357bc59e3ca40b2", "patch": "@@ -4,11 +4,7 @@ error[E0308]: mismatched types\n LL |         a::try_foo(foo2);\n    |                    ^^^^ expected struct `main::a::Foo`, found a different struct `main::a::Foo`\n    |\n-note: Perhaps two different versions of crate `crate_a1` are being used?\n-  --> $DIR/type-mismatch-same-crate-name.rs:16:20\n-   |\n-LL |         a::try_foo(foo2);\n-   |                    ^^^^\n+   = note: perhaps two different versions of crate `crate_a1` are being used?\n \n error[E0308]: mismatched types\n   --> $DIR/type-mismatch-same-crate-name.rs:20:20\n@@ -18,11 +14,7 @@ LL |         a::try_bar(bar2);\n    |\n    = note: expected struct `std::boxed::Box<(dyn main::a::Bar + 'static)>`\n               found struct `std::boxed::Box<dyn main::a::Bar>`\n-note: Perhaps two different versions of crate `crate_a1` are being used?\n-  --> $DIR/type-mismatch-same-crate-name.rs:20:20\n-   |\n-LL |         a::try_bar(bar2);\n-   |                    ^^^^\n+   = note: perhaps two different versions of crate `crate_a1` are being used?\n \n error: aborting due to 2 previous errors\n "}, {"sha": "defe85ef46a231155b69a129f43990c44622c503", "filename": "src/tools/tidy/src/features.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/809e180a76ce97340bf4354ff357bc59e3ca40b2/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs?ref=809e180a76ce97340bf4354ff357bc59e3ca40b2", "patch": "@@ -397,7 +397,8 @@ fn map_lib_features(base_src_path: &Path,\n         }\n \n         let mut becoming_feature: Option<(&str, Feature)> = None;\n-        for (i, line) in contents.lines().enumerate() {\n+        let mut iter_lines = contents.lines().enumerate().peekable();\n+        while let Some((i, line)) = iter_lines.next() {\n             macro_rules! err {\n                 ($msg:expr) => {{\n                     mf(Err($msg), file, i + 1);\n@@ -411,7 +412,7 @@ fn map_lib_features(base_src_path: &Path,\n                 }\n                 if line.ends_with(']') {\n                     mf(Ok((name, f.clone())), file, i + 1);\n-                } else if !line.ends_with(',') && !line.ends_with('\\\\') {\n+                } else if !line.ends_with(',') && !line.ends_with('\\\\') && !line.ends_with('\"') {\n                     // We need to bail here because we might have missed the\n                     // end of a stability attribute above because the ']'\n                     // might not have been at the end of the line.\n@@ -450,7 +451,9 @@ fn map_lib_features(base_src_path: &Path,\n             } else {\n                 continue;\n             };\n-            let feature_name = match find_attr_val(line, \"feature\") {\n+            let feature_name = match find_attr_val(line, \"feature\")\n+                .or_else(|| iter_lines.peek().and_then(|next| find_attr_val(next.1, \"feature\")))\n+            {\n                 Some(name) => name,\n                 None => err!(\"malformed stability attribute: missing `feature` key\"),\n             };"}]}