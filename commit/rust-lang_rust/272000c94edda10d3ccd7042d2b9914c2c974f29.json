{"sha": "272000c94edda10d3ccd7042d2b9914c2c974f29", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3MjAwMGM5NGVkZGExMGQzY2NkNzA0MmQyYjk5MTRjMmM5NzRmMjk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-28T20:42:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-28T20:42:09Z"}, "message": "Auto merge of #60317 - flip1995:internal_lints, r=oli-obk\n\nInternal lints: usage_of_qualified_ty & ty_pass_by_reference\n\nCloses #59952\n\nImplements internal lints:\n\n- `USAGE_OF_QUALIFIED_TY`\n- `TY_PASS_BY_REFERENCE`\n\nr? @oli-obk", "tree": {"sha": "00f63ea8e174115dc61b1b102f05ab940dd88778", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00f63ea8e174115dc61b1b102f05ab940dd88778"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/272000c94edda10d3ccd7042d2b9914c2c974f29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/272000c94edda10d3ccd7042d2b9914c2c974f29", "html_url": "https://github.com/rust-lang/rust/commit/272000c94edda10d3ccd7042d2b9914c2c974f29", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/272000c94edda10d3ccd7042d2b9914c2c974f29/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bdfdbcd44d457b2ac6d0cea4fb71739d3166cb98", "url": "https://api.github.com/repos/rust-lang/rust/commits/bdfdbcd44d457b2ac6d0cea4fb71739d3166cb98", "html_url": "https://github.com/rust-lang/rust/commit/bdfdbcd44d457b2ac6d0cea4fb71739d3166cb98"}, {"sha": "2e5f0b3c49875e8cf1ee1bad2a74c2a81dcc7f78", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e5f0b3c49875e8cf1ee1bad2a74c2a81dcc7f78", "html_url": "https://github.com/rust-lang/rust/commit/2e5f0b3c49875e8cf1ee1bad2a74c2a81dcc7f78"}], "stats": {"total": 650, "additions": 480, "deletions": 170}, "files": [{"sha": "c20a08fc5aea603c78f534164b16f6b1b1f3ffca", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=272000c94edda10d3ccd7042d2b9914c2c974f29", "patch": "@@ -690,7 +690,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         name: String,\n         sub: ty::subst::SubstsRef<'tcx>,\n         pos: usize,\n-        other_ty: &Ty<'tcx>,\n+        other_ty: Ty<'tcx>,\n     ) {\n         // `value` and `other_value` hold two incomplete type representation for display.\n         // `name` is the path of both types being compared. `sub`\n@@ -768,10 +768,10 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         path: String,\n         sub: ty::subst::SubstsRef<'tcx>,\n         other_path: String,\n-        other_ty: &Ty<'tcx>,\n+        other_ty: Ty<'tcx>,\n     ) -> Option<()> {\n         for (i, ta) in sub.types().enumerate() {\n-            if &ta == other_ty {\n+            if ta == other_ty {\n                 self.highlight_outer(&mut t1_out, &mut t2_out, path, sub, i, &other_ty);\n                 return Some(());\n             }\n@@ -839,7 +839,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     /// Compares two given types, eliding parts that are the same between them and highlighting\n     /// relevant differences, and return two representation of those types for highlighted printing.\n     fn cmp(&self, t1: Ty<'tcx>, t2: Ty<'tcx>) -> (DiagnosticStyledString, DiagnosticStyledString) {\n-        fn equals<'tcx>(a: &Ty<'tcx>, b: &Ty<'tcx>) -> bool {\n+        fn equals<'tcx>(a: Ty<'tcx>, b: Ty<'tcx>) -> bool {\n             match (&a.sty, &b.sty) {\n                 (a, b) if *a == *b => true,\n                 (&ty::Int(_), &ty::Infer(ty::InferTy::IntVar(_)))\n@@ -1099,7 +1099,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             }\n         };\n \n-        let span = cause.span(&self.tcx);\n+        let span = cause.span(self.tcx);\n \n         diag.span_label(span, terr.to_string());\n         if let Some((sp, msg)) = secondary_span {\n@@ -1233,7 +1233,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             trace, terr\n         );\n \n-        let span = trace.cause.span(&self.tcx);\n+        let span = trace.cause.span(self.tcx);\n         let failure_code = trace.cause.as_failure_code(terr);\n         let mut diag = match failure_code {\n             FailureCode::Error0317(failure_str) => {"}, {"sha": "ca159872ea7fbde2ccb5e2deff0a21429b8fb48f", "filename": "src/librustc/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=272000c94edda10d3ccd7042d2b9914c2c974f29", "patch": "@@ -11,7 +11,7 @@ use errors::DiagnosticBuilder;\n \n struct FindLocalByTypeVisitor<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n     infcx: &'a InferCtxt<'a, 'gcx, 'tcx>,\n-    target_ty: &'a Ty<'tcx>,\n+    target_ty: Ty<'tcx>,\n     hir_map: &'a hir::map::Map<'gcx>,\n     found_local_pattern: Option<&'gcx Pat>,\n     found_arg_pattern: Option<&'gcx Pat>,\n@@ -26,7 +26,7 @@ impl<'a, 'gcx, 'tcx> FindLocalByTypeVisitor<'a, 'gcx, 'tcx> {\n             Some(ty) => {\n                 let ty = self.infcx.resolve_type_vars_if_possible(&ty);\n                 ty.walk().any(|inner_ty| {\n-                    inner_ty == *self.target_ty || match (&inner_ty.sty, &self.target_ty.sty) {\n+                    inner_ty == self.target_ty || match (&inner_ty.sty, &self.target_ty.sty) {\n                         (&Infer(TyVar(a_vid)), &Infer(TyVar(b_vid))) => {\n                             self.infcx\n                                 .type_variables\n@@ -68,10 +68,10 @@ impl<'a, 'gcx, 'tcx> Visitor<'gcx> for FindLocalByTypeVisitor<'a, 'gcx, 'tcx> {\n impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     pub fn extract_type_name(\n         &self,\n-        ty: &'a Ty<'tcx>,\n+        ty: Ty<'tcx>,\n         highlight: Option<ty::print::RegionHighlightMode>,\n     ) -> String {\n-        if let ty::Infer(ty::TyVar(ty_vid)) = (*ty).sty {\n+        if let ty::Infer(ty::TyVar(ty_vid)) = ty.sty {\n             let ty_vars = self.type_variables.borrow();\n             if let TypeVariableOrigin::TypeParameterDefinition(_, name) =\n                 *ty_vars.var_origin(ty_vid) {\n@@ -102,7 +102,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n \n         let mut local_visitor = FindLocalByTypeVisitor {\n             infcx: &self,\n-            target_ty: &ty,\n+            target_ty: ty,\n             hir_map: &self.tcx.hir(),\n             found_local_pattern: None,\n             found_arg_pattern: None,"}, {"sha": "60acbe0afe431935ebf430c6d2dd19d1e83d814a", "filename": "src/librustc/infer/error_reporting/nice_region_error/placeholder_error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs?ref=272000c94edda10d3ccd7042d2b9914c2c974f29", "patch": "@@ -193,7 +193,7 @@ impl NiceRegionError<'me, 'gcx, 'tcx> {\n         );\n \n         let mut err = self.tcx().sess.struct_span_err(\n-            cause.span(&self.tcx()),\n+            cause.span(self.tcx()),\n             &format!(\n                 \"implementation of `{}` is not general enough\",\n                 self.tcx().def_path_str(trait_def_id),"}, {"sha": "753fd04aac38a0eae7030947652592da87e29428", "filename": "src/librustc/infer/nll_relate/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Flibrustc%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Flibrustc%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fnll_relate%2Fmod.rs?ref=272000c94edda10d3ccd7042d2b9914c2c974f29", "patch": "@@ -267,7 +267,7 @@ where\n     fn relate_projection_ty(\n         &mut self,\n         projection_ty: ty::ProjectionTy<'tcx>,\n-        value_ty: ty::Ty<'tcx>,\n+        value_ty: Ty<'tcx>,\n     ) -> Ty<'tcx> {\n         use crate::infer::type_variable::TypeVariableOrigin;\n         use crate::traits::WhereClause;"}, {"sha": "126a7cd3349153db422e7449df28c464b6f28c9b", "filename": "src/librustc/lint/internal.rs", "status": "modified", "additions": 122, "deletions": 10, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Flibrustc%2Flint%2Finternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Flibrustc%2Flint%2Finternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Finternal.rs?ref=272000c94edda10d3ccd7042d2b9914c2c974f29", "patch": "@@ -1,7 +1,7 @@\n //! Some lints that are only useful in the compiler or crates that use compiler internals, such as\n //! Clippy.\n \n-use crate::hir::{HirId, Path, PathSegment, QPath, Ty, TyKind};\n+use crate::hir::{GenericArg, HirId, MutTy, Mutability, Path, PathSegment, QPath, Ty, TyKind};\n use crate::lint::{\n     EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintArray, LintContext, LintPass,\n };\n@@ -57,12 +57,28 @@ impl EarlyLintPass for DefaultHashTypes {\n declare_lint! {\n     pub USAGE_OF_TY_TYKIND,\n     Allow,\n-    \"Usage of `ty::TyKind` outside of the `ty::sty` module\"\n+    \"usage of `ty::TyKind` outside of the `ty::sty` module\"\n }\n \n-declare_lint_pass!(TyKindUsage => [USAGE_OF_TY_TYKIND]);\n+declare_lint! {\n+    pub TY_PASS_BY_REFERENCE,\n+    Allow,\n+    \"passing `Ty` or `TyCtxt` by reference\"\n+}\n+\n+declare_lint! {\n+    pub USAGE_OF_QUALIFIED_TY,\n+    Allow,\n+    \"using `ty::{Ty,TyCtxt}` instead of importing it\"\n+}\n+\n+declare_lint_pass!(TyTyKind => [\n+    USAGE_OF_TY_TYKIND,\n+    TY_PASS_BY_REFERENCE,\n+    USAGE_OF_QUALIFIED_TY,\n+]);\n \n-impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TyKindUsage {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TyTyKind {\n     fn check_path(&mut self, cx: &LateContext<'_, '_>, path: &'tcx Path, _: HirId) {\n         let segments = path.segments.iter().rev().skip(1).rev();\n \n@@ -82,16 +98,72 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TyKindUsage {\n     }\n \n     fn check_ty(&mut self, cx: &LateContext<'_, '_>, ty: &'tcx Ty) {\n-        if let TyKind::Path(qpath) = &ty.node {\n-            if let QPath::Resolved(_, path) = qpath {\n-                if let Some(last) = path.segments.iter().last() {\n-                    if lint_ty_kind_usage(cx, last) {\n-                        cx.struct_span_lint(USAGE_OF_TY_TYKIND, path.span, \"usage of `ty::TyKind`\")\n-                            .help(\"try using `ty::Ty` instead\")\n+        match &ty.node {\n+            TyKind::Path(qpath) => {\n+                if let QPath::Resolved(_, path) = qpath {\n+                    if let Some(last) = path.segments.iter().last() {\n+                        if lint_ty_kind_usage(cx, last) {\n+                            cx.struct_span_lint(\n+                                USAGE_OF_TY_TYKIND,\n+                                path.span,\n+                                \"usage of `ty::TyKind`\",\n+                            )\n+                            .help(\"try using `Ty` instead\")\n                             .emit();\n+                        } else {\n+                            if ty.span.ctxt().outer().expn_info().is_some() {\n+                                return;\n+                            }\n+                            if let Some(t) = is_ty_or_ty_ctxt(cx, ty) {\n+                                if path.segments.len() > 1 {\n+                                    cx.struct_span_lint(\n+                                        USAGE_OF_QUALIFIED_TY,\n+                                        path.span,\n+                                        &format!(\"usage of qualified `ty::{}`\", t),\n+                                    )\n+                                    .span_suggestion(\n+                                        path.span,\n+                                        \"try using it unqualified\",\n+                                        t,\n+                                        // The import probably needs to be changed\n+                                        Applicability::MaybeIncorrect,\n+                                    )\n+                                    .emit();\n+                                }\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+            TyKind::Rptr(\n+                _,\n+                MutTy {\n+                    ty: inner_ty,\n+                    mutbl: Mutability::MutImmutable,\n+                },\n+            ) => {\n+                if let Some(impl_did) = cx.tcx.impl_of_method(ty.hir_id.owner_def_id()) {\n+                    if cx.tcx.impl_trait_ref(impl_did).is_some() {\n+                        return;\n                     }\n                 }\n+                if let Some(t) = is_ty_or_ty_ctxt(cx, &inner_ty) {\n+                    cx.struct_span_lint(\n+                        TY_PASS_BY_REFERENCE,\n+                        ty.span,\n+                        &format!(\"passing `{}` by reference\", t),\n+                    )\n+                    .span_suggestion(\n+                        ty.span,\n+                        \"try passing by value\",\n+                        t,\n+                        // Changing type of function argument\n+                        Applicability::MaybeIncorrect,\n+                    )\n+                    .emit();\n+                }\n             }\n+            _ => {}\n         }\n     }\n }\n@@ -107,3 +179,43 @@ fn lint_ty_kind_usage(cx: &LateContext<'_, '_>, segment: &PathSegment) -> bool {\n \n     false\n }\n+\n+fn is_ty_or_ty_ctxt(cx: &LateContext<'_, '_>, ty: &Ty) -> Option<String> {\n+    match &ty.node {\n+        TyKind::Path(qpath) => {\n+            if let QPath::Resolved(_, path) = qpath {\n+                let did = path.def.opt_def_id()?;\n+                if cx.match_def_path(did, &[\"rustc\", \"ty\", \"Ty\"]) {\n+                    return Some(format!(\"Ty{}\", gen_args(path.segments.last().unwrap())));\n+                } else if cx.match_def_path(did, &[\"rustc\", \"ty\", \"context\", \"TyCtxt\"]) {\n+                    return Some(format!(\"TyCtxt{}\", gen_args(path.segments.last().unwrap())));\n+                }\n+            }\n+        }\n+        _ => {}\n+    }\n+\n+    None\n+}\n+\n+fn gen_args(segment: &PathSegment) -> String {\n+    if let Some(args) = &segment.args {\n+        let lifetimes = args\n+            .args\n+            .iter()\n+            .filter_map(|arg| {\n+                if let GenericArg::Lifetime(lt) = arg {\n+                    Some(lt.name.ident().to_string())\n+                } else {\n+                    None\n+                }\n+            })\n+            .collect::<Vec<_>>();\n+\n+        if !lifetimes.is_empty() {\n+            return format!(\"<{}>\", lifetimes.join(\", \"));\n+        }\n+    }\n+\n+    String::new()\n+}"}, {"sha": "4eb3a2bd10b44b73e6b5e00d28bb884033380c17", "filename": "src/librustc/middle/exported_symbols.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Flibrustc%2Fmiddle%2Fexported_symbols.rs", "raw_url": "https://github.com/rust-lang/rust/raw/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Flibrustc%2Fmiddle%2Fexported_symbols.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexported_symbols.rs?ref=272000c94edda10d3ccd7042d2b9914c2c974f29", "patch": "@@ -4,7 +4,7 @@ use rustc_data_structures::stable_hasher::{StableHasher, HashStable,\n                                            StableHasherResult};\n use std::cmp;\n use std::mem;\n-use crate::ty;\n+use crate::ty::{self, TyCtxt};\n use crate::ty::subst::SubstsRef;\n \n /// The SymbolExportLevel of a symbols specifies from which kinds of crates\n@@ -39,7 +39,7 @@ pub enum ExportedSymbol<'tcx> {\n \n impl<'tcx> ExportedSymbol<'tcx> {\n     pub fn symbol_name(&self,\n-                       tcx: ty::TyCtxt<'_, 'tcx, '_>)\n+                       tcx: TyCtxt<'_, 'tcx, '_>)\n                        -> ty::SymbolName {\n         match *self {\n             ExportedSymbol::NonGeneric(def_id) => {\n@@ -55,7 +55,7 @@ impl<'tcx> ExportedSymbol<'tcx> {\n     }\n \n     pub fn compare_stable(&self,\n-                          tcx: ty::TyCtxt<'_, 'tcx, '_>,\n+                          tcx: TyCtxt<'_, 'tcx, '_>,\n                           other: &ExportedSymbol<'tcx>)\n                           -> cmp::Ordering {\n         match *self {\n@@ -92,7 +92,7 @@ impl<'tcx> ExportedSymbol<'tcx> {\n     }\n }\n \n-pub fn metadata_symbol_name(tcx: ty::TyCtxt<'_, '_, '_>) -> String {\n+pub fn metadata_symbol_name(tcx: TyCtxt<'_, '_, '_>) -> String {\n     format!(\"rust_metadata_{}_{}\",\n             tcx.original_crate_name(LOCAL_CRATE),\n             tcx.crate_disambiguator(LOCAL_CRATE).to_fingerprint().to_hex())"}, {"sha": "e82e90ede8c103daf1c91cca1a5daa669612b3bc", "filename": "src/librustc/mir/mono.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Flibrustc%2Fmir%2Fmono.rs", "raw_url": "https://github.com/rust-lang/rust/raw/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Flibrustc%2Fmir%2Fmono.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmono.rs?ref=272000c94edda10d3ccd7042d2b9914c2c974f29", "patch": "@@ -18,7 +18,7 @@ pub enum MonoItem<'tcx> {\n }\n \n impl<'tcx> MonoItem<'tcx> {\n-    pub fn size_estimate<'a>(&self, tcx: &TyCtxt<'a, 'tcx, 'tcx>) -> usize {\n+    pub fn size_estimate<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>) -> usize {\n         match *self {\n             MonoItem::Fn(instance) => {\n                 // Estimate the size of a function based on how many statements\n@@ -144,7 +144,7 @@ impl<'tcx> CodegenUnit<'tcx> {\n         base_n::encode(hash, base_n::CASE_INSENSITIVE)\n     }\n \n-    pub fn estimate_size<'a>(&mut self, tcx: &TyCtxt<'a, 'tcx, 'tcx>) {\n+    pub fn estimate_size<'a>(&mut self, tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n         // Estimate the size of a codegen unit as (approximately) the number of MIR\n         // statements it corresponds to.\n         self.size_estimate = Some(self.items.keys().map(|mi| mi.size_estimate(tcx)).sum());"}, {"sha": "88ecae02cef36eb4e7b38392177c6942c7d3b0bc", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=272000c94edda10d3ccd7042d2b9914c2c974f29", "patch": "@@ -198,7 +198,7 @@ macro_rules! make_mir_visitor {\n             }\n \n             fn visit_ty(&mut self,\n-                        ty: & $($mutability)? Ty<'tcx>,\n+                        ty: $(& $mutability)? Ty<'tcx>,\n                         _: TyContext) {\n                 self.super_ty(ty);\n             }\n@@ -864,7 +864,7 @@ macro_rules! make_mir_visitor {\n                 self.visit_ty(& $($mutability)? ty.inferred_ty, TyContext::UserTy(ty.span));\n             }\n \n-            fn super_ty(&mut self, _ty: & $($mutability)? Ty<'tcx>) {\n+            fn super_ty(&mut self, _ty: $(& $mutability)? Ty<'tcx>) {\n             }\n \n             fn super_region(&mut self, _region: & $($mutability)? ty::Region<'tcx>) {"}, {"sha": "bb3dcdcf72b3932a0a5822b8438a17a043aba349", "filename": "src/librustc/traits/auto_trait.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Flibrustc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Flibrustc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fauto_trait.rs?ref=272000c94edda10d3ccd7042d2b9914c2c974f29", "patch": "@@ -49,11 +49,11 @@ pub struct AutoTraitInfo<'cx> {\n }\n \n pub struct AutoTraitFinder<'a, 'tcx: 'a> {\n-    tcx: &'a TyCtxt<'a, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n }\n \n impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n-    pub fn new(tcx: &'a TyCtxt<'a, 'tcx, 'tcx>) -> Self {\n+    pub fn new(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Self {\n         AutoTraitFinder { tcx }\n     }\n \n@@ -291,7 +291,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n         infcx: &InferCtxt<'b, 'tcx, 'c>,\n         ty_did: DefId,\n         trait_did: DefId,\n-        ty: ty::Ty<'c>,\n+        ty: Ty<'c>,\n         param_env: ty::ParamEnv<'c>,\n         user_env: ty::ParamEnv<'c>,\n         fresh_preds: &mut FxHashSet<ty::Predicate<'c>>,\n@@ -661,7 +661,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n         T: Iterator<Item = Obligation<'cx, ty::Predicate<'cx>>>,\n     >(\n         &self,\n-        ty: ty::Ty<'_>,\n+        ty: Ty<'_>,\n         nested: T,\n         computed_preds: &'b mut FxHashSet<ty::Predicate<'cx>>,\n         fresh_preds: &'b mut FxHashSet<ty::Predicate<'cx>>,"}, {"sha": "47d96708ebea3eea9544e0215971cfcdb65804ec", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=272000c94edda10d3ccd7042d2b9914c2c974f29", "patch": "@@ -1242,7 +1242,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                            found: ty::PolyTraitRef<'tcx>)\n         -> DiagnosticBuilder<'tcx>\n     {\n-        fn build_fn_sig_string<'a, 'gcx, 'tcx>(tcx: ty::TyCtxt<'a, 'gcx, 'tcx>,\n+        fn build_fn_sig_string<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n                                                trait_ref: &ty::TraitRef<'tcx>) -> String {\n             let inputs = trait_ref.substs.type_at(1);\n             let sig = if let ty::Tuple(inputs) = inputs.sty {"}, {"sha": "c544340a80f0ab28bfdb1bbd7981ba7368338a03", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=272000c94edda10d3ccd7042d2b9914c2c974f29", "patch": "@@ -138,7 +138,7 @@ pub struct ObligationCause<'tcx> {\n }\n \n impl<'tcx> ObligationCause<'tcx> {\n-    pub fn span<'a, 'gcx>(&self, tcx: &TyCtxt<'a, 'gcx, 'tcx>) -> Span {\n+    pub fn span<'a, 'gcx>(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> Span {\n         match self.code {\n             ObligationCauseCode::CompareImplMethodObligation { .. } |\n             ObligationCauseCode::MainFunctionType |"}, {"sha": "400a0f526c4ef887e3bdf7c8c7ade4816b4fa13d", "filename": "src/librustc/traits/structural_impls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs?ref=272000c94edda10d3ccd7042d2b9914c2c974f29", "patch": "@@ -3,7 +3,7 @@ use smallvec::SmallVec;\n use crate::traits;\n use crate::traits::project::Normalized;\n use crate::ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n-use crate::ty::{self, Lift, TyCtxt};\n+use crate::ty::{self, Lift, Ty, TyCtxt};\n use syntax::symbol::InternedString;\n \n use std::fmt;\n@@ -311,7 +311,7 @@ impl<'tcx> TypeVisitor<'tcx> for BoundNamesCollector {\n         result\n     }\n \n-    fn visit_ty(&mut self, t: ty::Ty<'tcx>) -> bool {\n+    fn visit_ty(&mut self, t: Ty<'tcx>) -> bool {\n         use syntax::symbol::Symbol;\n \n         match t.sty {"}, {"sha": "552fbac5756a8a243d08ff4dcaf7ed7ab7c0255a", "filename": "src/librustc/ty/fold.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Flibrustc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Flibrustc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffold.rs?ref=272000c94edda10d3ccd7042d2b9914c2c974f29", "patch": "@@ -421,7 +421,7 @@ struct BoundVarReplacer<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n     current_index: ty::DebruijnIndex,\n \n     fld_r: &'a mut (dyn FnMut(ty::BoundRegion) -> ty::Region<'tcx> + 'a),\n-    fld_t: &'a mut (dyn FnMut(ty::BoundTy) -> ty::Ty<'tcx> + 'a),\n+    fld_t: &'a mut (dyn FnMut(ty::BoundTy) -> Ty<'tcx> + 'a),\n }\n \n impl<'a, 'gcx, 'tcx> BoundVarReplacer<'a, 'gcx, 'tcx> {\n@@ -431,7 +431,7 @@ impl<'a, 'gcx, 'tcx> BoundVarReplacer<'a, 'gcx, 'tcx> {\n         fld_t: &'a mut G\n     ) -> Self\n         where F: FnMut(ty::BoundRegion) -> ty::Region<'tcx>,\n-              G: FnMut(ty::BoundTy) -> ty::Ty<'tcx>\n+              G: FnMut(ty::BoundTy) -> Ty<'tcx>\n     {\n         BoundVarReplacer {\n             tcx,\n@@ -533,7 +533,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         mut fld_t: G\n     ) -> (T, BTreeMap<ty::BoundRegion, ty::Region<'tcx>>)\n         where F: FnMut(ty::BoundRegion) -> ty::Region<'tcx>,\n-              G: FnMut(ty::BoundTy) -> ty::Ty<'tcx>,\n+              G: FnMut(ty::BoundTy) -> Ty<'tcx>,\n               T: TypeFoldable<'tcx>\n     {\n         use rustc_data_structures::fx::FxHashMap;\n@@ -568,7 +568,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         fld_t: G\n     ) -> (T, BTreeMap<ty::BoundRegion, ty::Region<'tcx>>)\n         where F: FnMut(ty::BoundRegion) -> ty::Region<'tcx>,\n-              G: FnMut(ty::BoundTy) -> ty::Ty<'tcx>,\n+              G: FnMut(ty::BoundTy) -> Ty<'tcx>,\n               T: TypeFoldable<'tcx>\n     {\n         self.replace_escaping_bound_vars(value.skip_binder(), fld_r, fld_t)\n@@ -710,7 +710,7 @@ impl TypeFolder<'gcx, 'tcx> for Shifter<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    fn fold_ty(&mut self, ty: ty::Ty<'tcx>) -> ty::Ty<'tcx> {\n+    fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {\n         match ty.sty {\n             ty::Bound(debruijn, bound_ty) => {\n                 if self.amount == 0 || debruijn < self.current_index {"}, {"sha": "69532b9b2c4ef7051109e4a930bb492acf3874a0", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=272000c94edda10d3ccd7042d2b9914c2c974f29", "patch": "@@ -212,7 +212,7 @@ impl AssociatedItem {\n         }\n     }\n \n-    pub fn signature<'a, 'tcx>(&self, tcx: &TyCtxt<'a, 'tcx, 'tcx>) -> String {\n+    pub fn signature<'a, 'tcx>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>) -> String {\n         match self.kind {\n             ty::AssociatedKind::Method => {\n                 // We skip the binder here because the binder would deanonymize all"}, {"sha": "24ba0744a688a83d09432f3df36b8e37919066a1", "filename": "src/librustc/ty/query/on_disk_cache.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=272000c94edda10d3ccd7042d2b9914c2c974f29", "patch": "@@ -9,7 +9,7 @@ use crate::rustc_serialize::{Decodable, Decoder, Encodable, Encoder, opaque,\n                       SpecializedDecoder, SpecializedEncoder,\n                       UseSpecializedDecodable, UseSpecializedEncodable};\n use crate::session::{CrateDisambiguator, Session};\n-use crate::ty;\n+use crate::ty::{self, Ty};\n use crate::ty::codec::{self as ty_codec, TyDecoder, TyEncoder};\n use crate::ty::context::TyCtxt;\n use crate::util::common::{time, time_ext};\n@@ -545,8 +545,8 @@ impl<'a, 'tcx: 'a, 'x> ty_codec::TyDecoder<'a, 'tcx> for CacheDecoder<'a, 'tcx,\n     fn cached_ty_for_shorthand<F>(&mut self,\n                                   shorthand: usize,\n                                   or_insert_with: F)\n-                                  -> Result<ty::Ty<'tcx>, Self::Error>\n-        where F: FnOnce(&mut Self) -> Result<ty::Ty<'tcx>, Self::Error>\n+                                  -> Result<Ty<'tcx>, Self::Error>\n+        where F: FnOnce(&mut Self) -> Result<Ty<'tcx>, Self::Error>\n     {\n         let tcx = self.tcx();\n \n@@ -751,7 +751,7 @@ struct CacheEncoder<'enc, 'a, 'tcx, E>\n {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     encoder: &'enc mut E,\n-    type_shorthands: FxHashMap<ty::Ty<'tcx>, usize>,\n+    type_shorthands: FxHashMap<Ty<'tcx>, usize>,\n     predicate_shorthands: FxHashMap<ty::Predicate<'tcx>, usize>,\n     expn_info_shorthands: FxHashMap<Mark, AbsoluteBytePos>,\n     interpret_allocs: FxHashMap<interpret::AllocId, usize>,\n@@ -881,11 +881,11 @@ impl<'enc, 'a, 'tcx, E> SpecializedEncoder<CrateNum> for CacheEncoder<'enc, 'a,\n     }\n }\n \n-impl<'enc, 'a, 'tcx, E> SpecializedEncoder<ty::Ty<'tcx>> for CacheEncoder<'enc, 'a, 'tcx, E>\n+impl<'enc, 'a, 'tcx, E> SpecializedEncoder<Ty<'tcx>> for CacheEncoder<'enc, 'a, 'tcx, E>\n     where E: 'enc + ty_codec::TyEncoder\n {\n     #[inline]\n-    fn specialized_encode(&mut self, ty: &ty::Ty<'tcx>) -> Result<(), Self::Error> {\n+    fn specialized_encode(&mut self, ty: &Ty<'tcx>) -> Result<(), Self::Error> {\n         ty_codec::encode_with_shorthand(self, ty,\n             |encoder| &mut encoder.type_shorthands)\n     }"}, {"sha": "0bb9d4389dd0b7eb0e773f1a34077b5ca590b2ab", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=272000c94edda10d3ccd7042d2b9914c2c974f29", "patch": "@@ -495,7 +495,7 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n \n pub fn register_internals(store: &mut lint::LintStore, sess: Option<&Session>) {\n     store.register_early_pass(sess, false, false, box DefaultHashTypes::new());\n-    store.register_late_pass(sess, false, false, false, box TyKindUsage);\n+    store.register_late_pass(sess, false, false, false, box TyTyKind);\n     store.register_group(\n         sess,\n         false,\n@@ -504,6 +504,8 @@ pub fn register_internals(store: &mut lint::LintStore, sess: Option<&Session>) {\n         vec![\n             LintId::of(DEFAULT_HASH_TYPES),\n             LintId::of(USAGE_OF_TY_TYKIND),\n+            LintId::of(TY_PASS_BY_REFERENCE),\n+            LintId::of(USAGE_OF_QUALIFIED_TY),\n         ],\n     );\n }"}, {"sha": "f914184b34f541fe11a61287656214b0917069e2", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=272000c94edda10d3ccd7042d2b9914c2c974f29", "patch": "@@ -789,7 +789,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n             ctor_vis = ty::Visibility::Restricted(DefId::local(CRATE_DEF_INDEX));\n         }\n \n-        let repr_options = get_repr_options(&tcx, adt_def_id);\n+        let repr_options = get_repr_options(tcx, adt_def_id);\n \n         Entry {\n             kind: EntryKind::Struct(self.lazy(&data), repr_options),\n@@ -1119,7 +1119,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n             hir::ItemKind::GlobalAsm(..) => EntryKind::GlobalAsm,\n             hir::ItemKind::Ty(..) => EntryKind::Type,\n             hir::ItemKind::Existential(..) => EntryKind::Existential,\n-            hir::ItemKind::Enum(..) => EntryKind::Enum(get_repr_options(&tcx, def_id)),\n+            hir::ItemKind::Enum(..) => EntryKind::Enum(get_repr_options(tcx, def_id)),\n             hir::ItemKind::Struct(ref struct_def, _) => {\n                 let variant = tcx.adt_def(def_id).non_enum_variant();\n \n@@ -1129,7 +1129,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n                 let ctor = struct_def.ctor_hir_id()\n                     .map(|ctor_hir_id| tcx.hir().local_def_id_from_hir_id(ctor_hir_id).index);\n \n-                let repr_options = get_repr_options(&tcx, def_id);\n+                let repr_options = get_repr_options(tcx, def_id);\n \n                 EntryKind::Struct(self.lazy(&VariantData {\n                     ctor_kind: variant.ctor_kind,\n@@ -1140,7 +1140,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n             }\n             hir::ItemKind::Union(..) => {\n                 let variant = tcx.adt_def(def_id).non_enum_variant();\n-                let repr_options = get_repr_options(&tcx, def_id);\n+                let repr_options = get_repr_options(tcx, def_id);\n \n                 EntryKind::Union(self.lazy(&VariantData {\n                     ctor_kind: variant.ctor_kind,\n@@ -1938,7 +1938,7 @@ pub fn encode_metadata<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>)\n     EncodedMetadata { raw_data: result }\n }\n \n-pub fn get_repr_options<'a, 'tcx, 'gcx>(tcx: &TyCtxt<'a, 'tcx, 'gcx>, did: DefId) -> ReprOptions {\n+pub fn get_repr_options<'a, 'tcx, 'gcx>(tcx: TyCtxt<'a, 'tcx, 'gcx>, did: DefId) -> ReprOptions {\n     let ty = tcx.type_of(did);\n     match ty.sty {\n         ty::Adt(ref def, _) => return def.repr,"}, {"sha": "90f23f78fec23ff4924eaa8b9de29260400f693c", "filename": "src/librustc_mir/borrow_check/borrow_set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs?ref=272000c94edda10d3ccd7042d2b9914c2c974f29", "patch": "@@ -315,7 +315,7 @@ impl<'a, 'gcx, 'tcx> GatherBorrows<'a, 'gcx, 'tcx> {\n             start_location, assigned_place, borrow_index,\n         );\n \n-        if !allow_two_phase_borrow(&self.tcx, kind) {\n+        if !allow_two_phase_borrow(kind) {\n             debug!(\"  -> {:?}\", start_location);\n             return;\n         }"}, {"sha": "a8ebe85e2510ca651ae2663b99911ad4c8b705d3", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=272000c94edda10d3ccd7042d2b9914c2c974f29", "patch": "@@ -12,7 +12,7 @@ use rustc::mir::{\n     Place, PlaceBase, PlaceProjection, ProjectionElem, Rvalue, Statement, StatementKind,\n     Static, StaticKind, TerminatorKind, VarBindingForm,\n };\n-use rustc::ty::{self, DefIdTree};\n+use rustc::ty::{self, DefIdTree, Ty};\n use rustc::ty::layout::VariantIdx;\n use rustc::ty::print::Print;\n use rustc_data_structures::fx::FxHashSet;\n@@ -918,7 +918,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         borrow: &BorrowData<'tcx>,\n         (place, drop_span): (&Place<'tcx>, Span),\n         kind: Option<WriteKind>,\n-        dropped_ty: ty::Ty<'tcx>,\n+        dropped_ty: Ty<'tcx>,\n     ) {\n         debug!(\n             \"report_borrow_conflicts_with_destructor(\\\n@@ -1483,7 +1483,7 @@ pub(super) struct IncludingDowncast(bool);\n enum StorageDeadOrDrop<'tcx> {\n     LocalStorageDead,\n     BoxedStorageDead,\n-    Destructor(ty::Ty<'tcx>),\n+    Destructor(Ty<'tcx>),\n }\n \n impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n@@ -1787,7 +1787,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n     /// End-user visible description of the `field_index`nth field of `ty`\n     fn describe_field_from_ty(\n         &self,\n-        ty: &ty::Ty<'_>,\n+        ty: Ty<'_>,\n         field: Field,\n         variant_index: Option<VariantIdx>\n     ) -> String {\n@@ -2258,18 +2258,18 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n #[derive(Debug)]\n enum AnnotatedBorrowFnSignature<'tcx> {\n     NamedFunction {\n-        arguments: Vec<(ty::Ty<'tcx>, Span)>,\n-        return_ty: ty::Ty<'tcx>,\n+        arguments: Vec<(Ty<'tcx>, Span)>,\n+        return_ty: Ty<'tcx>,\n         return_span: Span,\n     },\n     AnonymousFunction {\n-        argument_ty: ty::Ty<'tcx>,\n+        argument_ty: Ty<'tcx>,\n         argument_span: Span,\n-        return_ty: ty::Ty<'tcx>,\n+        return_ty: Ty<'tcx>,\n         return_span: Span,\n     },\n     Closure {\n-        argument_ty: ty::Ty<'tcx>,\n+        argument_ty: Ty<'tcx>,\n         argument_span: Span,\n     },\n }\n@@ -2355,7 +2355,7 @@ impl<'tcx> AnnotatedBorrowFnSignature<'tcx> {\n impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n     /// Return the name of the provided `Ty` (that must be a reference) with a synthesized lifetime\n     /// name where required.\n-    fn get_name_for_ty(&self, ty: ty::Ty<'tcx>, counter: usize) -> String {\n+    fn get_name_for_ty(&self, ty: Ty<'tcx>, counter: usize) -> String {\n         let mut s = String::new();\n         let mut printer = ty::print::FmtPrinter::new(self.infcx.tcx, &mut s, Namespace::TypeNS);\n \n@@ -2378,7 +2378,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n \n     /// Returns the name of the provided `Ty` (that must be a reference)'s region with a\n     /// synthesized lifetime name where required.\n-    fn get_region_name_for_ty(&self, ty: ty::Ty<'tcx>, counter: usize) -> String {\n+    fn get_region_name_for_ty(&self, ty: Ty<'tcx>, counter: usize) -> String {\n         let mut s = String::new();\n         let mut printer = ty::print::FmtPrinter::new(self.infcx.tcx, &mut s, Namespace::TypeNS);\n "}, {"sha": "169d56523591d3e44a854405429e1d4b228d75d2", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=272000c94edda10d3ccd7042d2b9914c2c974f29", "patch": "@@ -1076,7 +1076,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                 (Read(kind), BorrowKind::Unique) | (Read(kind), BorrowKind::Mut { .. }) => {\n                     // Reading from mere reservations of mutable-borrows is OK.\n                     if !is_active(&this.dominators, borrow, context.loc) {\n-                        assert!(allow_two_phase_borrow(&tcx, borrow.kind));\n+                        assert!(allow_two_phase_borrow(borrow.kind));\n                         return Control::Continue;\n                     }\n \n@@ -1233,7 +1233,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                     BorrowKind::Shared => (Deep, Read(ReadKind::Borrow(bk))),\n                     BorrowKind::Unique | BorrowKind::Mut { .. } => {\n                         let wk = WriteKind::MutableBorrow(bk);\n-                        if allow_two_phase_borrow(&self.infcx.tcx, bk) {\n+                        if allow_two_phase_borrow(bk) {\n                             (Deep, Reservation(wk))\n                         } else {\n                             (Deep, Write(wk))"}, {"sha": "32088ff9f61eee5c1a094d59ee3d8f8b2d0c57ef", "filename": "src/librustc_mir/borrow_check/mutability_errors.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs?ref=272000c94edda10d3ccd7042d2b9914c2c974f29", "patch": "@@ -5,7 +5,7 @@ use rustc::mir::{\n     Mutability, Operand, Place, PlaceBase, Projection, ProjectionElem, Static, StaticKind,\n };\n use rustc::mir::{Terminator, TerminatorKind};\n-use rustc::ty::{self, Const, DefIdTree, TyS, TyCtxt};\n+use rustc::ty::{self, Const, DefIdTree, Ty, TyS, TyCtxt};\n use rustc_data_structures::indexed_vec::Idx;\n use syntax_pos::Span;\n use syntax_pos::symbol::keywords;\n@@ -613,7 +613,7 @@ fn suggest_ampmut<'cx, 'gcx, 'tcx>(\n      })\n }\n \n-fn is_closure_or_generator(ty: ty::Ty<'_>) -> bool {\n+fn is_closure_or_generator(ty: Ty<'_>) -> bool {\n     ty.is_closure() || ty.is_generator()\n }\n \n@@ -626,7 +626,7 @@ fn is_closure_or_generator(ty: ty::Ty<'_>) -> bool {\n /// ```\n fn annotate_struct_field(\n     tcx: TyCtxt<'cx, 'gcx, 'tcx>,\n-    ty: ty::Ty<'tcx>,\n+    ty: Ty<'tcx>,\n     field: &mir::Field,\n ) -> Option<(Span, String)> {\n     // Expect our local to be a reference to a struct of some kind."}, {"sha": "ec2555886ce1fd2a3896bfe6b6bbf5dd7a6d1b82", "filename": "src/librustc_mir/borrow_check/nll/constraint_generation.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_generation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_generation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_generation.rs?ref=272000c94edda10d3ccd7042d2b9914c2c974f29", "patch": "@@ -10,7 +10,7 @@ use rustc::mir::{BasicBlock, BasicBlockData, Location, Mir, Place, PlaceBase, Rv\n use rustc::mir::{SourceInfo, Statement, Terminator};\n use rustc::mir::UserTypeProjection;\n use rustc::ty::fold::TypeFoldable;\n-use rustc::ty::{self, ClosureSubsts, GeneratorSubsts, RegionVid};\n+use rustc::ty::{self, ClosureSubsts, GeneratorSubsts, RegionVid, Ty};\n use rustc::ty::subst::SubstsRef;\n \n pub(super) fn generate_constraints<'cx, 'gcx, 'tcx>(\n@@ -64,7 +64,7 @@ impl<'cg, 'cx, 'gcx, 'tcx> Visitor<'tcx> for ConstraintGeneration<'cg, 'cx, 'gcx\n \n     /// We sometimes have `ty` within an rvalue, or within a\n     /// call. Make them live at the location where they appear.\n-    fn visit_ty(&mut self, ty: &ty::Ty<'tcx>, ty_context: TyContext) {\n+    fn visit_ty(&mut self, ty: Ty<'tcx>, ty_context: TyContext) {\n         match ty_context {\n             TyContext::ReturnTy(SourceInfo { span, .. })\n             | TyContext::YieldTy(SourceInfo { span, .. })\n@@ -77,7 +77,7 @@ impl<'cg, 'cx, 'gcx, 'tcx> Visitor<'tcx> for ConstraintGeneration<'cg, 'cx, 'gcx\n                 );\n             }\n             TyContext::Location(location) => {\n-                self.add_regular_live_constraint(*ty, location);\n+                self.add_regular_live_constraint(ty, location);\n             }\n         }\n "}, {"sha": "3a368ea8c8d59acc703ce7b70d0799d93dc0bd07", "filename": "src/librustc_mir/borrow_check/nll/invalidation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs?ref=272000c94edda10d3ccd7042d2b9914c2c974f29", "patch": "@@ -321,7 +321,7 @@ impl<'cg, 'cx, 'tcx, 'gcx> InvalidationGenerator<'cx, 'tcx, 'gcx> {\n                     BorrowKind::Shared => (Deep, Read(ReadKind::Borrow(bk))),\n                     BorrowKind::Unique | BorrowKind::Mut { .. } => {\n                         let wk = WriteKind::MutableBorrow(bk);\n-                        if allow_two_phase_borrow(&self.tcx, bk) {\n+                        if allow_two_phase_borrow(bk) {\n                             (Deep, Reservation(wk))\n                         } else {\n                             (Deep, Write(wk))\n@@ -439,7 +439,7 @@ impl<'cg, 'cx, 'tcx, 'gcx> InvalidationGenerator<'cx, 'tcx, 'gcx> {\n                         // Reading from mere reservations of mutable-borrows is OK.\n                         if !is_active(&this.dominators, borrow, context.loc) {\n                             // If the borrow isn't active yet, reads don't invalidate it\n-                            assert!(allow_two_phase_borrow(&this.tcx, borrow.kind));\n+                            assert!(allow_two_phase_borrow(borrow.kind));\n                             return Control::Continue;\n                         }\n "}, {"sha": "86af2490408aac755bd02c3e41216a042f3c92b7", "filename": "src/librustc_mir/borrow_check/path_utils.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Flibrustc_mir%2Fborrow_check%2Fpath_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Flibrustc_mir%2Fborrow_check%2Fpath_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fpath_utils.rs?ref=272000c94edda10d3ccd7042d2b9914c2c974f29", "patch": "@@ -11,10 +11,7 @@ use rustc_data_structures::graph::dominators::Dominators;\n /// Returns `true` if the borrow represented by `kind` is\n /// allowed to be split into separate Reservation and\n /// Activation phases.\n-pub(super) fn allow_two_phase_borrow<'a, 'tcx, 'gcx: 'tcx>(\n-    _tcx: &TyCtxt<'a, 'gcx, 'tcx>,\n-    kind: BorrowKind\n-) -> bool {\n+pub(super) fn allow_two_phase_borrow<'a, 'tcx, 'gcx: 'tcx>(kind: BorrowKind) -> bool {\n     kind.allows_two_phase_borrow()\n }\n "}, {"sha": "4b8b3232bfa3da6075cb4b8282bb9371528e248f", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=272000c94edda10d3ccd7042d2b9914c2c974f29", "patch": "@@ -440,7 +440,7 @@ impl<'a, 'mir, 'tcx> interpret::Machine<'a, 'mir, 'tcx>\n \n         let span = ecx.frame().span;\n         ecx.machine.loop_detector.observe_and_analyze(\n-            &ecx.tcx,\n+            *ecx.tcx,\n             span,\n             &ecx.memory,\n             &ecx.stack[..],\n@@ -513,7 +513,7 @@ pub fn error_to_const_error<'a, 'mir, 'tcx>(\n }\n \n fn validate_and_turn_into_const<'a, 'tcx>(\n-    tcx: ty::TyCtxt<'a, 'tcx, 'tcx>,\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     constant: RawConst<'tcx>,\n     key: ty::ParamEnvAnd<'tcx, GlobalId<'tcx>>,\n ) -> ::rustc::mir::interpret::ConstEvalResult<'tcx> {"}, {"sha": "6d619793160fba312112709aa02b49f52a5ba0d3", "filename": "src/librustc_mir/dataflow/move_paths/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs?ref=272000c94edda10d3ccd7042d2b9914c2c974f29", "patch": "@@ -1,4 +1,4 @@\n-use rustc::ty::{self, TyCtxt};\n+use rustc::ty::{Ty, TyCtxt};\n use rustc::mir::*;\n use rustc::util::nodemap::FxHashMap;\n use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n@@ -285,10 +285,10 @@ pub(crate) enum IllegalMoveOriginKind<'tcx> {\n     /// implements `Drop`. Rust maintains invariant that all `Drop`\n     /// ADT's remain fully-initialized so that user-defined destructor\n     /// can safely read from all of the ADT's fields.\n-    InteriorOfTypeWithDestructor { container_ty: ty::Ty<'tcx> },\n+    InteriorOfTypeWithDestructor { container_ty: Ty<'tcx> },\n \n     /// Illegal move due to attempt to move out of a slice or array.\n-    InteriorOfSliceOrArray { ty: ty::Ty<'tcx>, is_index: bool, },\n+    InteriorOfSliceOrArray { ty: Ty<'tcx>, is_index: bool, },\n }\n \n #[derive(Debug)]"}, {"sha": "83bd3666b3d3b3d24d9fe3350879dae133391b17", "filename": "src/librustc_mir/interpret/snapshot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Flibrustc_mir%2Finterpret%2Fsnapshot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Flibrustc_mir%2Finterpret%2Fsnapshot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fsnapshot.rs?ref=272000c94edda10d3ccd7042d2b9914c2c974f29", "patch": "@@ -47,7 +47,7 @@ impl<'a, 'mir, 'tcx> InfiniteLoopDetector<'a, 'mir, 'tcx>\n {\n     pub fn observe_and_analyze<'b>(\n         &mut self,\n-        tcx: &TyCtxt<'b, 'tcx, 'tcx>,\n+        tcx: TyCtxt<'b, 'tcx, 'tcx>,\n         span: Span,\n         memory: &Memory<'a, 'mir, 'tcx, CompileTimeInterpreter<'a, 'mir, 'tcx>>,\n         stack: &[Frame<'mir, 'tcx>],"}, {"sha": "4eb79cf56fcf2a764f1ba9a4d4ae3f08a7c7a708", "filename": "src/librustc_mir/interpret/traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs?ref=272000c94edda10d3ccd7042d2b9914c2c974f29", "patch": "@@ -101,7 +101,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> InterpretCx<'a, 'mir, 'tcx, M>\n     pub fn read_drop_type_from_vtable(\n         &self,\n         vtable: Pointer<M::PointerTag>,\n-    ) -> EvalResult<'tcx, (ty::Instance<'tcx>, ty::Ty<'tcx>)> {\n+    ) -> EvalResult<'tcx, (ty::Instance<'tcx>, Ty<'tcx>)> {\n         // we don't care about the pointee type, we just want a pointer\n         self.memory.check_align(vtable.into(), self.tcx.data_layout.pointer_align.abi)?;\n         let drop_fn = self.memory"}, {"sha": "368bcc333996f546b44f944b614bd6b5eea6a0c9", "filename": "src/librustc_mir/monomorphize/partitioning.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs?ref=272000c94edda10d3ccd7042d2b9914c2c974f29", "patch": "@@ -228,7 +228,7 @@ pub fn partition<'a, 'tcx, I>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     // functions and statics defined in the local crate.\n     let mut initial_partitioning = place_root_mono_items(tcx, mono_items);\n \n-    initial_partitioning.codegen_units.iter_mut().for_each(|cgu| cgu.estimate_size(&tcx));\n+    initial_partitioning.codegen_units.iter_mut().for_each(|cgu| cgu.estimate_size(tcx));\n \n     debug_dump(tcx, \"INITIAL PARTITIONING:\", initial_partitioning.codegen_units.iter());\n \n@@ -247,7 +247,7 @@ pub fn partition<'a, 'tcx, I>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let mut post_inlining = place_inlined_mono_items(initial_partitioning,\n                                                             inlining_map);\n \n-    post_inlining.codegen_units.iter_mut().for_each(|cgu| cgu.estimate_size(&tcx));\n+    post_inlining.codegen_units.iter_mut().for_each(|cgu| cgu.estimate_size(tcx));\n \n     debug_dump(tcx, \"POST INLINING:\", post_inlining.codegen_units.iter());\n "}, {"sha": "ea139e6e9fc582fe7c674ca62ccf124e26be12ce", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=272000c94edda10d3ccd7042d2b9914c2c974f29", "patch": "@@ -644,7 +644,7 @@ impl<'a, 'tcx> CloneShimBuilder<'a, 'tcx> {\n \n     fn tuple_like_shim<I>(&mut self, dest: Place<'tcx>,\n                           src: Place<'tcx>, tys: I)\n-            where I: Iterator<Item = ty::Ty<'tcx>> {\n+            where I: Iterator<Item = Ty<'tcx>> {\n         let mut previous_field = None;\n         for (i, ity) in tys.enumerate() {\n             let field = Field::new(i);"}, {"sha": "1e0ba9023317133bb2b3e01f4361bcd141df898a", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=272000c94edda10d3ccd7042d2b9914c2c974f29", "patch": "@@ -8,7 +8,7 @@ use rustc::mir::{NullOp, UnOp, StatementKind, Statement, BasicBlock, LocalKind,\n use rustc::mir::{TerminatorKind, ClearCrossCrate, SourceInfo, BinOp, ProjectionElem};\n use rustc::mir::visit::{Visitor, PlaceContext, MutatingUseContext, NonMutatingUseContext};\n use rustc::mir::interpret::{InterpError, Scalar, GlobalId, EvalResult};\n-use rustc::ty::{TyCtxt, self, Instance};\n+use rustc::ty::{self, Instance, Ty, TyCtxt};\n use syntax::source_map::{Span, DUMMY_SP};\n use rustc::ty::subst::InternalSubsts;\n use rustc_data_structures::indexed_vec::IndexVec;\n@@ -80,10 +80,10 @@ struct ConstPropagator<'a, 'mir, 'tcx:'a+'mir> {\n }\n \n impl<'a, 'b, 'tcx> LayoutOf for ConstPropagator<'a, 'b, 'tcx> {\n-    type Ty = ty::Ty<'tcx>;\n+    type Ty = Ty<'tcx>;\n     type TyLayout = Result<TyLayout<'tcx>, LayoutError<'tcx>>;\n \n-    fn layout_of(&self, ty: ty::Ty<'tcx>) -> Self::TyLayout {\n+    fn layout_of(&self, ty: Ty<'tcx>) -> Self::TyLayout {\n         self.tcx.layout_of(self.param_env.and(ty))\n     }\n }\n@@ -476,7 +476,7 @@ impl<'a, 'mir, 'tcx> ConstPropagator<'a, 'mir, 'tcx> {\n \n fn type_size_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                           param_env: ty::ParamEnv<'tcx>,\n-                          ty: ty::Ty<'tcx>) -> Option<u64> {\n+                          ty: Ty<'tcx>) -> Option<u64> {\n     tcx.layout_of(param_env.and(ty)).ok().map(|layout| layout.size.bytes())\n }\n \n@@ -555,7 +555,7 @@ impl<'b, 'a, 'tcx> Visitor<'tcx> for ConstPropagator<'b, 'a, 'tcx> {\n     ) {\n         trace!(\"visit_statement: {:?}\", statement);\n         if let StatementKind::Assign(ref place, ref rval) = statement.kind {\n-            let place_ty: ty::Ty<'tcx> = place\n+            let place_ty: Ty<'tcx> = place\n                 .ty(&self.mir.local_decls, self.tcx)\n                 .ty;\n             if let Ok(place_layout) = self.tcx.layout_of(self.param_env.and(place_ty)) {"}, {"sha": "e1d41ba4fc509f151800216059972090e7dd1ae9", "filename": "src/librustc_mir/transform/qualify_min_const_fn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs?ref=272000c94edda10d3ccd7042d2b9914c2c974f29", "patch": "@@ -1,7 +1,7 @@\n use rustc::hir::def_id::DefId;\n use rustc::hir;\n use rustc::mir::*;\n-use rustc::ty::{self, Predicate, TyCtxt, adjustment::{PointerCast}};\n+use rustc::ty::{self, Predicate, Ty, TyCtxt, adjustment::{PointerCast}};\n use rustc_target::spec::abi;\n use std::borrow::Cow;\n use syntax_pos::Span;\n@@ -81,7 +81,7 @@ pub fn is_min_const_fn(\n \n fn check_ty(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    ty: ty::Ty<'tcx>,\n+    ty: Ty<'tcx>,\n     span: Span,\n     fn_def_id: DefId,\n ) -> McfResult {"}, {"sha": "bf3cdf4abf797fbda244b9f3d7f9bd75405e2c06", "filename": "src/librustc_mir/util/borrowck_errors.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs?ref=272000c94edda10d3ccd7042d2b9914c2c974f29", "patch": "@@ -1,5 +1,5 @@\n use rustc::session::config::BorrowckMode;\n-use rustc::ty::{self, TyCtxt};\n+use rustc::ty::{self, Ty, TyCtxt};\n use rustc_errors::{DiagnosticBuilder, DiagnosticId};\n use syntax_pos::{MultiSpan, Span};\n \n@@ -437,7 +437,7 @@ pub trait BorrowckErrors<'cx>: Sized + Copy {\n     fn cannot_move_out_of_interior_noncopy(\n         self,\n         move_from_span: Span,\n-        ty: ty::Ty<'_>,\n+        ty: Ty<'_>,\n         is_index: Option<bool>,\n         o: Origin,\n     ) -> DiagnosticBuilder<'cx> {\n@@ -464,7 +464,7 @@ pub trait BorrowckErrors<'cx>: Sized + Copy {\n     fn cannot_move_out_of_interior_of_drop(\n         self,\n         move_from_span: Span,\n-        container_ty: ty::Ty<'_>,\n+        container_ty: Ty<'_>,\n         o: Origin,\n     ) -> DiagnosticBuilder<'cx> {\n         let mut err = struct_span_err!("}, {"sha": "0e7f473a3e70d2af498488f8531661fdf6cac6bd", "filename": "src/librustc_mir/util/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Flibrustc_mir%2Futil%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Flibrustc_mir%2Futil%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fmod.rs?ref=272000c94edda10d3ccd7042d2b9914c2c974f29", "patch": "@@ -1,5 +1,5 @@\n use core::unicode::property::Pattern_White_Space;\n-use rustc::ty;\n+use rustc::ty::TyCtxt;\n use syntax_pos::Span;\n \n pub mod borrowck_errors;\n@@ -20,7 +20,7 @@ pub use self::graphviz::write_node_label as write_graphviz_node_label;\n \n /// If possible, suggest replacing `ref` with `ref mut`.\n pub fn suggest_ref_mut<'cx, 'gcx, 'tcx>(\n-    tcx: ty::TyCtxt<'cx, 'gcx, 'tcx>,\n+    tcx: TyCtxt<'cx, 'gcx, 'tcx>,\n     binding_span: Span,\n ) -> Option<(String)> {\n     let hi_src = tcx.sess.source_map().span_to_snippet(binding_span).unwrap();"}, {"sha": "bd72a049b772ed7e7edd11118987ac00956cbff4", "filename": "src/librustc_traits/chalk_context/program_clauses/builtin.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses%2Fbuiltin.rs?ref=272000c94edda10d3ccd7042d2b9914c2c974f29", "patch": "@@ -4,7 +4,7 @@ use rustc::traits::{\n     ProgramClause,\n     ProgramClauseCategory,\n };\n-use rustc::ty;\n+use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::subst::{Kind, InternalSubsts, Subst};\n use rustc::hir;\n use rustc::hir::def_id::DefId;\n@@ -15,8 +15,8 @@ use crate::generic_types;\n /// `Implemented(ty: Trait) :- Implemented(nested: Trait)...`\n /// where `Trait` is specified by `trait_def_id`.\n fn builtin_impl_clause(\n-    tcx: ty::TyCtxt<'_, '_, 'tcx>,\n-    ty: ty::Ty<'tcx>,\n+    tcx: TyCtxt<'_, '_, 'tcx>,\n+    ty: Ty<'tcx>,\n     nested: &[Kind<'tcx>],\n     trait_def_id: DefId\n ) -> ProgramClause<'tcx> {\n@@ -43,10 +43,10 @@ fn builtin_impl_clause(\n }\n \n crate fn assemble_builtin_unsize_impls<'tcx>(\n-    tcx: ty::TyCtxt<'_, '_, 'tcx>,\n+    tcx: TyCtxt<'_, '_, 'tcx>,\n     unsize_def_id: DefId,\n-    source: ty::Ty<'tcx>,\n-    target: ty::Ty<'tcx>,\n+    source: Ty<'tcx>,\n+    target: Ty<'tcx>,\n     clauses: &mut Vec<Clause<'tcx>>\n ) {\n     match (&source.sty, &target.sty) {\n@@ -119,12 +119,12 @@ crate fn assemble_builtin_unsize_impls<'tcx>(\n }\n \n crate fn assemble_builtin_sized_impls<'tcx>(\n-    tcx: ty::TyCtxt<'_, '_, 'tcx>,\n+    tcx: TyCtxt<'_, '_, 'tcx>,\n     sized_def_id: DefId,\n-    ty: ty::Ty<'tcx>,\n+    ty: Ty<'tcx>,\n     clauses: &mut Vec<Clause<'tcx>>\n ) {\n-    let mut push_builtin_impl = |ty: ty::Ty<'tcx>, nested: &[Kind<'tcx>]| {\n+    let mut push_builtin_impl = |ty: Ty<'tcx>, nested: &[Kind<'tcx>]| {\n         let clause = builtin_impl_clause(tcx, ty, nested, sized_def_id);\n         // Bind innermost bound vars that may exist in `ty` and `nested`.\n         clauses.push(Clause::ForAll(ty::Binder::bind(clause)));\n@@ -223,12 +223,12 @@ crate fn assemble_builtin_sized_impls<'tcx>(\n }\n \n crate fn assemble_builtin_copy_clone_impls<'tcx>(\n-    tcx: ty::TyCtxt<'_, '_, 'tcx>,\n+    tcx: TyCtxt<'_, '_, 'tcx>,\n     trait_def_id: DefId,\n-    ty: ty::Ty<'tcx>,\n+    ty: Ty<'tcx>,\n     clauses: &mut Vec<Clause<'tcx>>\n ) {\n-    let mut push_builtin_impl = |ty: ty::Ty<'tcx>, nested: &[Kind<'tcx>]| {\n+    let mut push_builtin_impl = |ty: Ty<'tcx>, nested: &[Kind<'tcx>]| {\n         let clause = builtin_impl_clause(tcx, ty, nested, trait_def_id);\n         // Bind innermost bound vars that may exist in `ty` and `nested`.\n         clauses.push(Clause::ForAll(ty::Binder::bind(clause)));"}, {"sha": "7ce450c7039a0c39640f0a1c75d98e37ae5656f2", "filename": "src/librustc_traits/chalk_context/program_clauses/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses%2Fmod.rs?ref=272000c94edda10d3ccd7042d2b9914c2c974f29", "patch": "@@ -10,7 +10,7 @@ use rustc::traits::{\n     ProgramClauseCategory,\n     Environment,\n };\n-use rustc::ty;\n+use rustc::ty::{self, TyCtxt};\n use rustc::hir::def_id::DefId;\n use super::ChalkInferenceContext;\n use std::iter;\n@@ -19,7 +19,7 @@ use self::primitive::*;\n use self::builtin::*;\n \n fn assemble_clauses_from_impls<'tcx>(\n-    tcx: ty::TyCtxt<'_, '_, 'tcx>,\n+    tcx: TyCtxt<'_, '_, 'tcx>,\n     trait_def_id: DefId,\n     clauses: &mut Vec<Clause<'tcx>>\n ) {\n@@ -33,7 +33,7 @@ fn assemble_clauses_from_impls<'tcx>(\n }\n \n fn assemble_clauses_from_assoc_ty_values<'tcx>(\n-    tcx: ty::TyCtxt<'_, '_, 'tcx>,\n+    tcx: TyCtxt<'_, '_, 'tcx>,\n     trait_def_id: DefId,\n     clauses: &mut Vec<Clause<'tcx>>\n ) {"}, {"sha": "c37c8faaacde49b00a8a3ad22f04144e3488c6d7", "filename": "src/librustc_traits/chalk_context/program_clauses/primitive.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses%2Fprimitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses%2Fprimitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses%2Fprimitive.rs?ref=272000c94edda10d3ccd7042d2b9914c2c974f29", "patch": "@@ -7,7 +7,7 @@ use rustc::traits::{\n     ProgramClause,\n     ProgramClauseCategory,\n };\n-use rustc::ty;\n+use rustc::ty::{self, TyCtxt};\n use rustc::hir;\n use rustc::hir::def_id::DefId;\n use rustc_target::spec::abi;\n@@ -16,7 +16,7 @@ use crate::generic_types;\n use std::iter;\n \n crate fn wf_clause_for_raw_ptr<'tcx>(\n-    tcx: ty::TyCtxt<'_, '_, 'tcx>,\n+    tcx: TyCtxt<'_, '_, 'tcx>,\n     mutbl: hir::Mutability\n ) -> Clauses<'tcx> {\n     let ptr_ty = generic_types::raw_ptr(tcx, mutbl);\n@@ -33,7 +33,7 @@ crate fn wf_clause_for_raw_ptr<'tcx>(\n }\n \n crate fn wf_clause_for_fn_ptr<'tcx>(\n-    tcx: ty::TyCtxt<'_, '_, 'tcx>,\n+    tcx: TyCtxt<'_, '_, 'tcx>,\n     arity_and_output: usize,\n     variadic: bool,\n     unsafety: hir::Unsafety,\n@@ -53,7 +53,7 @@ crate fn wf_clause_for_fn_ptr<'tcx>(\n     tcx.mk_clauses(iter::once(wf_clause))\n }\n \n-crate fn wf_clause_for_slice<'tcx>(tcx: ty::TyCtxt<'_, '_, 'tcx>) -> Clauses<'tcx> {\n+crate fn wf_clause_for_slice<'tcx>(tcx: TyCtxt<'_, '_, 'tcx>) -> Clauses<'tcx> {\n     let ty = generic_types::bound(tcx, 0);\n     let slice_ty = tcx.mk_slice(ty);\n \n@@ -83,7 +83,7 @@ crate fn wf_clause_for_slice<'tcx>(tcx: ty::TyCtxt<'_, '_, 'tcx>) -> Clauses<'tc\n }\n \n crate fn wf_clause_for_array<'tcx>(\n-    tcx: ty::TyCtxt<'_, '_, 'tcx>,\n+    tcx: TyCtxt<'_, '_, 'tcx>,\n     length: &'tcx ty::Const<'tcx>\n ) -> Clauses<'tcx> {\n     let ty = generic_types::bound(tcx, 0);\n@@ -115,7 +115,7 @@ crate fn wf_clause_for_array<'tcx>(\n }\n \n crate fn wf_clause_for_tuple<'tcx>(\n-    tcx: ty::TyCtxt<'_, '_, 'tcx>,\n+    tcx: TyCtxt<'_, '_, 'tcx>,\n     arity: usize\n ) -> Clauses<'tcx> {\n     let type_list = generic_types::type_list(tcx, arity);\n@@ -159,7 +159,7 @@ crate fn wf_clause_for_tuple<'tcx>(\n }\n \n crate fn wf_clause_for_ref<'tcx>(\n-    tcx: ty::TyCtxt<'_, '_, 'tcx>,\n+    tcx: TyCtxt<'_, '_, 'tcx>,\n     mutbl: hir::Mutability\n ) -> Clauses<'tcx> {\n     let region = tcx.mk_region(\n@@ -186,7 +186,7 @@ crate fn wf_clause_for_ref<'tcx>(\n }\n \n crate fn wf_clause_for_fn_def<'tcx>(\n-    tcx: ty::TyCtxt<'_, '_, 'tcx>,\n+    tcx: TyCtxt<'_, '_, 'tcx>,\n     def_id: DefId\n ) -> Clauses<'tcx> {\n     let fn_def = generic_types::fn_def(tcx, def_id);"}, {"sha": "4f5a4996db5375309426bdebee802de1a51efb84", "filename": "src/librustc_traits/chalk_context/resolvent_ops.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Flibrustc_traits%2Fchalk_context%2Fresolvent_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Flibrustc_traits%2Fchalk_context%2Fresolvent_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk_context%2Fresolvent_ops.rs?ref=272000c94edda10d3ccd7042d2b9914c2c974f29", "patch": "@@ -16,7 +16,7 @@ use rustc::traits::{\n     Environment,\n     InEnvironment,\n };\n-use rustc::ty::{self, Ty};\n+use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::subst::Kind;\n use rustc::ty::relate::{Relate, RelateResult, TypeRelation};\n use syntax_pos::DUMMY_SP;\n@@ -169,7 +169,7 @@ impl AnswerSubstitutor<'cx, 'gcx, 'tcx> {\n }\n \n impl TypeRelation<'cx, 'gcx, 'tcx> for AnswerSubstitutor<'cx, 'gcx, 'tcx> {\n-    fn tcx(&self) -> ty::TyCtxt<'cx, 'gcx, 'tcx> {\n+    fn tcx(&self) -> TyCtxt<'cx, 'gcx, 'tcx> {\n         self.infcx.tcx\n     }\n "}, {"sha": "6ea3626dc9d085852fcf4bdbfcfb1bcfebb5b0b2", "filename": "src/librustc_traits/generic_types.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Flibrustc_traits%2Fgeneric_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Flibrustc_traits%2Fgeneric_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fgeneric_types.rs?ref=272000c94edda10d3ccd7042d2b9914c2c974f29", "patch": "@@ -6,7 +6,7 @@ use rustc::hir;\n use rustc::hir::def_id::DefId;\n use rustc_target::spec::abi;\n \n-crate fn bound(tcx: ty::TyCtxt<'_, '_, 'tcx>, index: u32) -> Ty<'tcx> {\n+crate fn bound(tcx: TyCtxt<'_, '_, 'tcx>, index: u32) -> Ty<'tcx> {\n     let ty = ty::Bound(\n         ty::INNERMOST,\n         ty::BoundVar::from_u32(index).into()\n@@ -22,7 +22,7 @@ crate fn raw_ptr(tcx: TyCtxt<'_, '_, 'tcx>, mutbl: hir::Mutability) -> Ty<'tcx>\n }\n \n crate fn fn_ptr(\n-    tcx: ty::TyCtxt<'_, '_, 'tcx>,\n+    tcx: TyCtxt<'_, '_, 'tcx>,\n     arity_and_output: usize,\n     c_variadic: bool,\n     unsafety: hir::Unsafety,\n@@ -44,7 +44,7 @@ crate fn fn_ptr(\n     tcx.mk_fn_ptr(fn_sig)\n }\n \n-crate fn type_list(tcx: ty::TyCtxt<'_, '_, 'tcx>, arity: usize) -> SubstsRef<'tcx> {\n+crate fn type_list(tcx: TyCtxt<'_, '_, 'tcx>, arity: usize) -> SubstsRef<'tcx> {\n     tcx.mk_substs(\n         (0..arity).into_iter()\n             .map(|i| ty::BoundVar::from(i))\n@@ -53,7 +53,7 @@ crate fn type_list(tcx: ty::TyCtxt<'_, '_, 'tcx>, arity: usize) -> SubstsRef<'tc\n     )\n }\n \n-crate fn ref_ty(tcx: ty::TyCtxt<'_, '_, 'tcx>, mutbl: hir::Mutability) -> Ty<'tcx> {\n+crate fn ref_ty(tcx: TyCtxt<'_, '_, 'tcx>, mutbl: hir::Mutability) -> Ty<'tcx> {\n     let region = tcx.mk_region(\n         ty::ReLateBound(ty::INNERMOST, ty::BoundRegion::BrAnon(0))\n     );\n@@ -64,17 +64,17 @@ crate fn ref_ty(tcx: ty::TyCtxt<'_, '_, 'tcx>, mutbl: hir::Mutability) -> Ty<'tc\n     })\n }\n \n-crate fn fn_def(tcx: ty::TyCtxt<'_, '_, 'tcx>, def_id: DefId) -> Ty<'tcx> {\n+crate fn fn_def(tcx: TyCtxt<'_, '_, 'tcx>, def_id: DefId) -> Ty<'tcx> {\n     tcx.mk_ty(ty::FnDef(def_id, InternalSubsts::bound_vars_for_item(tcx, def_id)))\n }\n \n-crate fn closure(tcx: ty::TyCtxt<'_, '_, 'tcx>, def_id: DefId) -> Ty<'tcx> {\n+crate fn closure(tcx: TyCtxt<'_, '_, 'tcx>, def_id: DefId) -> Ty<'tcx> {\n     tcx.mk_closure(def_id, ty::ClosureSubsts {\n         substs: InternalSubsts::bound_vars_for_item(tcx, def_id),\n     })\n }\n \n-crate fn generator(tcx: ty::TyCtxt<'_, '_, 'tcx>, def_id: DefId) -> Ty<'tcx> {\n+crate fn generator(tcx: TyCtxt<'_, '_, 'tcx>, def_id: DefId) -> Ty<'tcx> {\n     tcx.mk_generator(def_id, ty::GeneratorSubsts {\n         substs: InternalSubsts::bound_vars_for_item(tcx, def_id),\n     }, hir::GeneratorMovability::Movable)"}, {"sha": "b47cce04012a0854e08e4875c73302437c89993f", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=272000c94edda10d3ccd7042d2b9914c2c974f29", "patch": "@@ -308,7 +308,7 @@ fn compare_predicate_entailment<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             };\n \n             let mut diag = struct_span_err!(tcx.sess,\n-                                            cause.span(&tcx),\n+                                            cause.span(tcx),\n                                             E0053,\n                                             \"method `{}` has an incompatible type for trait\",\n                                             trait_m.ident);\n@@ -448,9 +448,9 @@ fn extract_spans_for_error_reporting<'a, 'gcx, 'tcx>(infcx: &infer::InferCtxt<'a\n                 }).map(|(ref impl_arg, ref trait_arg)| {\n                     (impl_arg.span, Some(trait_arg.span))\n                 })\n-                .unwrap_or_else(|| (cause.span(&tcx), tcx.hir().span_if_local(trait_m.def_id)))\n+                .unwrap_or_else(|| (cause.span(tcx), tcx.hir().span_if_local(trait_m.def_id)))\n             } else {\n-                (cause.span(&tcx), tcx.hir().span_if_local(trait_m.def_id))\n+                (cause.span(tcx), tcx.hir().span_if_local(trait_m.def_id))\n             }\n         }\n         TypeError::Sorts(ExpectedFound { .. }) => {\n@@ -483,14 +483,14 @@ fn extract_spans_for_error_reporting<'a, 'gcx, 'tcx>(infcx: &infer::InferCtxt<'a\n                              {\n                                  (impl_m_output.span(), Some(trait_m_output.span()))\n                              } else {\n-                                 (cause.span(&tcx), tcx.hir().span_if_local(trait_m.def_id))\n+                                 (cause.span(tcx), tcx.hir().span_if_local(trait_m.def_id))\n                              }\n                          )\n             } else {\n-                (cause.span(&tcx), tcx.hir().span_if_local(trait_m.def_id))\n+                (cause.span(tcx), tcx.hir().span_if_local(trait_m.def_id))\n             }\n         }\n-        _ => (cause.span(&tcx), tcx.hir().span_if_local(trait_m.def_id)),\n+        _ => (cause.span(tcx), tcx.hir().span_if_local(trait_m.def_id)),\n     }\n }\n \n@@ -549,7 +549,7 @@ fn compare_self_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 err.span_label(span, format!(\"trait method declared without `{}`\", self_descr));\n             } else {\n                 err.note_trait_signature(trait_m.ident.to_string(),\n-                                         trait_m.signature(&tcx));\n+                                         trait_m.signature(tcx));\n             }\n             err.emit();\n             return Err(ErrorReported);\n@@ -569,7 +569,7 @@ fn compare_self_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 err.span_label(span, format!(\"`{}` used in trait\", self_descr));\n             } else {\n                 err.note_trait_signature(trait_m.ident.to_string(),\n-                                         trait_m.signature(&tcx));\n+                                         trait_m.signature(tcx));\n             }\n             err.emit();\n             return Err(ErrorReported);\n@@ -726,7 +726,7 @@ fn compare_number_of_method_arguments<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 potentially_plural_count(trait_number_args, \"parameter\")));\n         } else {\n             err.note_trait_signature(trait_m.ident.to_string(),\n-                                     trait_m.signature(&tcx));\n+                                     trait_m.signature(tcx));\n         }\n         err.span_label(impl_span, format!(\"expected {}, found {}\",\n             potentially_plural_count(trait_number_args, \"parameter\"), impl_number_args));"}, {"sha": "35d4568bd9c4c1fa01b90da615f1277d36236c96", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=272000c94edda10d3ccd7042d2b9914c2c974f29", "patch": "@@ -26,7 +26,7 @@ use super::{MethodError, NoMatchData, CandidateSource};\n use super::probe::Mode;\n \n impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n-    fn is_fn_ty(&self, ty: &Ty<'tcx>, span: Span) -> bool {\n+    fn is_fn_ty(&self, ty: Ty<'tcx>, span: Span) -> bool {\n         let tcx = self.tcx;\n         match ty.sty {\n             // Not all of these (e.g., unsafe fns) implement `FnOnce`,"}, {"sha": "f11638478923f09bc80ff8a4d6143e1a60995e44", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=272000c94edda10d3ccd7042d2b9914c2c974f29", "patch": "@@ -1026,10 +1026,10 @@ impl<'a, 'gcx, 'tcx> Visitor<'gcx> for GatherLocalsVisitor<'a, 'gcx, 'tcx> {\n /// points.\n struct GeneratorTypes<'tcx> {\n     /// Type of value that is yielded.\n-    yield_ty: ty::Ty<'tcx>,\n+    yield_ty: Ty<'tcx>,\n \n     /// Types that are captured (see `GeneratorInterior` for more).\n-    interior: ty::Ty<'tcx>,\n+    interior: Ty<'tcx>,\n \n     /// Indicates if the generator is movable or static (immovable).\n     movability: hir::GeneratorMovability,\n@@ -1667,7 +1667,7 @@ fn check_impl_items_against_trait<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 err.span_label(span, format!(\"`{}` from trait\", trait_item.ident));\n             } else {\n                 err.note_trait_signature(trait_item.ident.to_string(),\n-                                         trait_item.signature(&tcx));\n+                                         trait_item.signature(tcx));\n             }\n         }\n         err.emit();"}, {"sha": "e4f690c6ec0622a9a1ed35bf1a1ff4bc7acd6815", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=272000c94edda10d3ccd7042d2b9914c2c974f29", "patch": "@@ -405,7 +405,7 @@ impl<'cx, 'gcx, 'tcx> WritebackCx<'cx, 'gcx, 'tcx> {\n                 c_ty\n             } else {\n                 span_bug!(\n-                    hir_id.to_span(&self.fcx.tcx),\n+                    hir_id.to_span(self.fcx.tcx),\n                     \"writeback: `{:?}` missing from the global type context\",\n                     c_ty\n                 );\n@@ -730,7 +730,7 @@ impl<'cx, 'gcx, 'tcx> WritebackCx<'cx, 'gcx, 'tcx> {\n             lifted\n         } else {\n             span_bug!(\n-                span.to_span(&self.fcx.tcx),\n+                span.to_span(self.fcx.tcx),\n                 \"writeback: `{:?}` missing from the global type context\",\n                 x\n             );\n@@ -739,24 +739,24 @@ impl<'cx, 'gcx, 'tcx> WritebackCx<'cx, 'gcx, 'tcx> {\n }\n \n trait Locatable {\n-    fn to_span(&self, tcx: &TyCtxt<'_, '_, '_>) -> Span;\n+    fn to_span(&self, tcx: TyCtxt<'_, '_, '_>) -> Span;\n }\n \n impl Locatable for Span {\n-    fn to_span(&self, _: &TyCtxt<'_, '_, '_>) -> Span {\n+    fn to_span(&self, _: TyCtxt<'_, '_, '_>) -> Span {\n         *self\n     }\n }\n \n impl Locatable for DefIndex {\n-    fn to_span(&self, tcx: &TyCtxt<'_, '_, '_>) -> Span {\n+    fn to_span(&self, tcx: TyCtxt<'_, '_, '_>) -> Span {\n         let hir_id = tcx.hir().def_index_to_hir_id(*self);\n         tcx.hir().span_by_hir_id(hir_id)\n     }\n }\n \n impl Locatable for hir::HirId {\n-    fn to_span(&self, tcx: &TyCtxt<'_, '_, '_>) -> Span {\n+    fn to_span(&self, tcx: TyCtxt<'_, '_, '_>) -> Span {\n         tcx.hir().span_by_hir_id(*self)\n     }\n }\n@@ -789,7 +789,7 @@ impl<'cx, 'gcx, 'tcx> Resolver<'cx, 'gcx, 'tcx> {\n     fn report_error(&self, t: Ty<'tcx>) {\n         if !self.tcx.sess.has_errors() {\n             self.infcx\n-                .need_type_info_err(Some(self.body.id()), self.span.to_span(&self.tcx), t)\n+                .need_type_info_err(Some(self.body.id()), self.span.to_span(self.tcx), t)\n                 .emit();\n         }\n     }"}, {"sha": "b4f6ae9baae1b2a178da2e234ce21c4ddef3fa66", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=272000c94edda10d3ccd7042d2b9914c2c974f29", "patch": "@@ -1451,8 +1451,8 @@ pub fn checked_type_of<'a, 'tcx>(\n fn find_existential_constraints<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     def_id: DefId,\n-) -> ty::Ty<'tcx> {\n-    use rustc::hir::*;\n+) -> Ty<'tcx> {\n+    use rustc::hir::{ImplItem, Item, TraitItem};\n \n     struct ConstraintLocator<'a, 'tcx: 'a> {\n         tcx: TyCtxt<'a, 'tcx, 'tcx>,\n@@ -1463,7 +1463,7 @@ fn find_existential_constraints<'a, 'tcx>(\n         // The mapping is an index for each use site of a generic parameter in the concrete type\n         //\n         // The indices index into the generic parameters on the existential type.\n-        found: Option<(Span, ty::Ty<'tcx>, Vec<usize>)>,\n+        found: Option<(Span, Ty<'tcx>, Vec<usize>)>,\n     }\n \n     impl<'a, 'tcx> ConstraintLocator<'a, 'tcx> {\n@@ -1519,7 +1519,7 @@ fn find_existential_constraints<'a, 'tcx>(\n                         ty::Param(p) => Some(*index_map.get(p).unwrap()),\n                         _ => None,\n                     }).collect();\n-                let is_param = |ty: ty::Ty<'_>| match ty.sty {\n+                let is_param = |ty: Ty<'_>| match ty.sty {\n                     ty::Param(_) => true,\n                     _ => false,\n                 };"}, {"sha": "a33b3a9312e4b8111e903cb9b1caf052958feb74", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=272000c94edda10d3ccd7042d2b9914c2c974f29", "patch": "@@ -14,7 +14,7 @@ pub struct AutoTraitFinder<'a, 'tcx> {\n \n impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n     pub fn new(cx: &'a core::DocContext<'tcx>) -> Self {\n-        let f = auto::AutoTraitFinder::new(&cx.tcx);\n+        let f = auto::AutoTraitFinder::new(cx.tcx);\n \n         AutoTraitFinder { cx, f }\n     }\n@@ -634,7 +634,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                                 // that we don't end up with duplicate bounds (e.g., for<'b, 'b>)\n                                 for_generics.extend(p.generic_params.clone());\n                                 p.generic_params = for_generics.into_iter().collect();\n-                                self.is_fn_ty(&tcx, &p.trait_)\n+                                self.is_fn_ty(tcx, &p.trait_)\n                             }\n                             _ => false,\n                         };\n@@ -681,7 +681,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                                 } => {\n                                     let mut new_trait_path = trait_path.clone();\n \n-                                    if self.is_fn_ty(&tcx, trait_) && left_name == FN_OUTPUT_NAME {\n+                                    if self.is_fn_ty(tcx, trait_) && left_name == FN_OUTPUT_NAME {\n                                         ty_to_fn\n                                             .entry(*ty.clone())\n                                             .and_modify(|e| *e = (e.0.clone(), Some(rhs.clone())))\n@@ -850,7 +850,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n         vec.sort_by_cached_key(|x| format!(\"{:?}\", x))\n     }\n \n-    fn is_fn_ty(&self, tcx: &TyCtxt<'_, '_, '_>, ty: &Type) -> bool {\n+    fn is_fn_ty(&self, tcx: TyCtxt<'_, '_, '_>, ty: &Type) -> bool {\n         match &ty {\n             &&Type::ResolvedPath { ref did, .. } => {\n                 *did == tcx.require_lang_item(lang_items::FnTraitLangItem)"}, {"sha": "8232254cdec14aeec62860fc49a01fd9e09c16d6", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=272000c94edda10d3ccd7042d2b9914c2c974f29", "patch": "@@ -4399,7 +4399,7 @@ where\n \n // Start of code copied from rust-clippy\n \n-pub fn path_to_def_local(tcx: &TyCtxt<'_, '_, '_>, path: &[&str]) -> Option<DefId> {\n+pub fn path_to_def_local(tcx: TyCtxt<'_, '_, '_>, path: &[&str]) -> Option<DefId> {\n     let krate = tcx.hir().krate();\n     let mut items = krate.module.item_ids.clone();\n     let mut path_it = path.iter().peekable();\n@@ -4424,7 +4424,7 @@ pub fn path_to_def_local(tcx: &TyCtxt<'_, '_, '_>, path: &[&str]) -> Option<DefI\n     }\n }\n \n-pub fn path_to_def(tcx: &TyCtxt<'_, '_, '_>, path: &[&str]) -> Option<DefId> {\n+pub fn path_to_def(tcx: TyCtxt<'_, '_, '_>, path: &[&str]) -> Option<DefId> {\n     let crates = tcx.crates();\n \n     let krate = crates"}, {"sha": "2274f4e81d43c6044edf527b5e14b94e9b2f2d84", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=272000c94edda10d3ccd7042d2b9914c2c974f29", "patch": "@@ -466,9 +466,9 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n             };\n \n             let send_trait = if crate_name == Some(\"core\".to_string()) {\n-                clean::path_to_def_local(&tcx, &[\"marker\", \"Send\"])\n+                clean::path_to_def_local(tcx, &[\"marker\", \"Send\"])\n             } else {\n-                clean::path_to_def(&tcx, &[\"core\", \"marker\", \"Send\"])\n+                clean::path_to_def(tcx, &[\"core\", \"marker\", \"Send\"])\n             };\n \n             let mut renderinfo = RenderInfo::default();"}, {"sha": "075ce8b1a1cb203d9b5ebf6a029244a36797b186", "filename": "src/test/ui-fulldeps/internal-lints/pass_ty_by_ref.rs", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fpass_ty_by_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fpass_ty_by_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fpass_ty_by_ref.rs?ref=272000c94edda10d3ccd7042d2b9914c2c974f29", "patch": "@@ -0,0 +1,64 @@\n+// compile-flags: -Z unstable-options\n+\n+#![feature(rustc_private)]\n+#![deny(ty_pass_by_reference)]\n+#![allow(unused)]\n+\n+extern crate rustc;\n+\n+use rustc::ty::{Ty, TyCtxt};\n+\n+fn ty_by_ref(\n+    ty_val: Ty<'_>,\n+    ty_ref: &Ty<'_>, //~ ERROR passing `Ty<'_>` by reference\n+    ty_ctxt_val: TyCtxt<'_, '_, '_>,\n+    ty_ctxt_ref: &TyCtxt<'_, '_, '_>, //~ ERROR passing `TyCtxt<'_, '_, '_>` by reference\n+) {\n+}\n+\n+fn ty_multi_ref(ty_multi: &&Ty<'_>, ty_ctxt_multi: &&&&TyCtxt<'_, '_, '_>) {}\n+//~^ ERROR passing `Ty<'_>` by reference\n+//~^^ ERROR passing `TyCtxt<'_, '_, '_>` by reference\n+\n+trait T {\n+    fn ty_by_ref_in_trait(\n+        ty_val: Ty<'_>,\n+        ty_ref: &Ty<'_>, //~ ERROR passing `Ty<'_>` by reference\n+        ty_ctxt_val: TyCtxt<'_, '_, '_>,\n+        ty_ctxt_ref: &TyCtxt<'_, '_, '_>, //~ ERROR passing `TyCtxt<'_, '_, '_>` by reference\n+    );\n+\n+    fn ty_multi_ref_in_trait(ty_multi: &&Ty<'_>, ty_ctxt_multi: &&&&TyCtxt<'_, '_, '_>);\n+    //~^ ERROR passing `Ty<'_>` by reference\n+    //~^^ ERROR passing `TyCtxt<'_, '_, '_>` by reference\n+}\n+\n+struct Foo;\n+\n+impl T for Foo {\n+    fn ty_by_ref_in_trait(\n+        ty_val: Ty<'_>,\n+        ty_ref: &Ty<'_>,\n+        ty_ctxt_val: TyCtxt<'_, '_, '_>,\n+        ty_ctxt_ref: &TyCtxt<'_, '_, '_>,\n+    ) {\n+    }\n+\n+    fn ty_multi_ref_in_trait(ty_multi: &&Ty<'_>, ty_ctxt_multi: &&&&TyCtxt<'_, '_, '_>) {}\n+}\n+\n+impl Foo {\n+    fn ty_by_ref_assoc(\n+        ty_val: Ty<'_>,\n+        ty_ref: &Ty<'_>, //~ ERROR passing `Ty<'_>` by reference\n+        ty_ctxt_val: TyCtxt<'_, '_, '_>,\n+        ty_ctxt_ref: &TyCtxt<'_, '_, '_>, //~ ERROR passing `TyCtxt<'_, '_, '_>` by reference\n+    ) {\n+    }\n+\n+    fn ty_multi_ref_assoc(ty_multi: &&Ty<'_>, ty_ctxt_multi: &&&&TyCtxt<'_, '_, '_>) {}\n+    //~^ ERROR passing `Ty<'_>` by reference\n+    //~^^ ERROR passing `TyCtxt<'_, '_, '_>` by reference\n+}\n+\n+fn main() {}"}, {"sha": "f3e630f3be23828886b68c2720dd493ccfe10b68", "filename": "src/test/ui-fulldeps/internal-lints/pass_ty_by_ref.stderr", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fpass_ty_by_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fpass_ty_by_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fpass_ty_by_ref.stderr?ref=272000c94edda10d3ccd7042d2b9914c2c974f29", "patch": "@@ -0,0 +1,80 @@\n+error: passing `Ty<'_>` by reference\n+  --> $DIR/pass_ty_by_ref.rs:13:13\n+   |\n+LL |     ty_ref: &Ty<'_>,\n+   |             ^^^^^^^ help: try passing by value: `Ty<'_>`\n+   |\n+note: lint level defined here\n+  --> $DIR/pass_ty_by_ref.rs:4:9\n+   |\n+LL | #![deny(ty_pass_by_reference)]\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+\n+error: passing `TyCtxt<'_, '_, '_>` by reference\n+  --> $DIR/pass_ty_by_ref.rs:15:18\n+   |\n+LL |     ty_ctxt_ref: &TyCtxt<'_, '_, '_>,\n+   |                  ^^^^^^^^^^^^^^^^^^^ help: try passing by value: `TyCtxt<'_, '_, '_>`\n+\n+error: passing `Ty<'_>` by reference\n+  --> $DIR/pass_ty_by_ref.rs:19:28\n+   |\n+LL | fn ty_multi_ref(ty_multi: &&Ty<'_>, ty_ctxt_multi: &&&&TyCtxt<'_, '_, '_>) {}\n+   |                            ^^^^^^^ help: try passing by value: `Ty<'_>`\n+\n+error: passing `TyCtxt<'_, '_, '_>` by reference\n+  --> $DIR/pass_ty_by_ref.rs:19:55\n+   |\n+LL | fn ty_multi_ref(ty_multi: &&Ty<'_>, ty_ctxt_multi: &&&&TyCtxt<'_, '_, '_>) {}\n+   |                                                       ^^^^^^^^^^^^^^^^^^^ help: try passing by value: `TyCtxt<'_, '_, '_>`\n+\n+error: passing `Ty<'_>` by reference\n+  --> $DIR/pass_ty_by_ref.rs:26:17\n+   |\n+LL |         ty_ref: &Ty<'_>,\n+   |                 ^^^^^^^ help: try passing by value: `Ty<'_>`\n+\n+error: passing `TyCtxt<'_, '_, '_>` by reference\n+  --> $DIR/pass_ty_by_ref.rs:28:22\n+   |\n+LL |         ty_ctxt_ref: &TyCtxt<'_, '_, '_>,\n+   |                      ^^^^^^^^^^^^^^^^^^^ help: try passing by value: `TyCtxt<'_, '_, '_>`\n+\n+error: passing `Ty<'_>` by reference\n+  --> $DIR/pass_ty_by_ref.rs:31:41\n+   |\n+LL |     fn ty_multi_ref_in_trait(ty_multi: &&Ty<'_>, ty_ctxt_multi: &&&&TyCtxt<'_, '_, '_>);\n+   |                                         ^^^^^^^ help: try passing by value: `Ty<'_>`\n+\n+error: passing `TyCtxt<'_, '_, '_>` by reference\n+  --> $DIR/pass_ty_by_ref.rs:31:68\n+   |\n+LL |     fn ty_multi_ref_in_trait(ty_multi: &&Ty<'_>, ty_ctxt_multi: &&&&TyCtxt<'_, '_, '_>);\n+   |                                                                    ^^^^^^^^^^^^^^^^^^^ help: try passing by value: `TyCtxt<'_, '_, '_>`\n+\n+error: passing `Ty<'_>` by reference\n+  --> $DIR/pass_ty_by_ref.rs:53:17\n+   |\n+LL |         ty_ref: &Ty<'_>,\n+   |                 ^^^^^^^ help: try passing by value: `Ty<'_>`\n+\n+error: passing `TyCtxt<'_, '_, '_>` by reference\n+  --> $DIR/pass_ty_by_ref.rs:55:22\n+   |\n+LL |         ty_ctxt_ref: &TyCtxt<'_, '_, '_>,\n+   |                      ^^^^^^^^^^^^^^^^^^^ help: try passing by value: `TyCtxt<'_, '_, '_>`\n+\n+error: passing `Ty<'_>` by reference\n+  --> $DIR/pass_ty_by_ref.rs:59:38\n+   |\n+LL |     fn ty_multi_ref_assoc(ty_multi: &&Ty<'_>, ty_ctxt_multi: &&&&TyCtxt<'_, '_, '_>) {}\n+   |                                      ^^^^^^^ help: try passing by value: `Ty<'_>`\n+\n+error: passing `TyCtxt<'_, '_, '_>` by reference\n+  --> $DIR/pass_ty_by_ref.rs:59:65\n+   |\n+LL |     fn ty_multi_ref_assoc(ty_multi: &&Ty<'_>, ty_ctxt_multi: &&&&TyCtxt<'_, '_, '_>) {}\n+   |                                                                 ^^^^^^^^^^^^^^^^^^^ help: try passing by value: `TyCtxt<'_, '_, '_>`\n+\n+error: aborting due to 12 previous errors\n+"}, {"sha": "5e10697ec66d4e76f64a843317e294d1d570293b", "filename": "src/test/ui-fulldeps/internal-lints/qualified_ty_ty_ctxt.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fqualified_ty_ty_ctxt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fqualified_ty_ty_ctxt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fqualified_ty_ty_ctxt.rs?ref=272000c94edda10d3ccd7042d2b9914c2c974f29", "patch": "@@ -0,0 +1,35 @@\n+// compile-flags: -Z unstable-options\n+\n+#![feature(rustc_private)]\n+#![deny(usage_of_qualified_ty)]\n+#![allow(unused)]\n+\n+extern crate rustc;\n+\n+use rustc::ty::{self, Ty, TyCtxt};\n+\n+macro_rules! qualified_macro {\n+    ($a:ident) => {\n+        fn ty_in_macro(\n+            ty_q: ty::Ty<'_>,\n+            ty: Ty<'_>,\n+            ty_ctxt_q: ty::TyCtxt<'_, '_, '_>,\n+            ty_ctxt: TyCtxt<'_, '_, '_>,\n+        ) {\n+            println!(\"{}\", stringify!($a));\n+        }\n+    };\n+}\n+\n+fn ty_qualified(\n+    ty_q: ty::Ty<'_>, //~ ERROR usage of qualified `ty::Ty<'_>`\n+    ty: Ty<'_>,\n+    ty_ctxt_q: ty::TyCtxt<'_, '_, '_>, //~ ERROR usage of qualified `ty::TyCtxt<'_, '_, '_>`\n+    ty_ctxt: TyCtxt<'_, '_, '_>,\n+) {\n+}\n+\n+\n+fn main() {\n+    qualified_macro!(a);\n+}"}, {"sha": "31d776cd9e00add360c018f4ec213aed77000575", "filename": "src/test/ui-fulldeps/internal-lints/qualified_ty_ty_ctxt.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fqualified_ty_ty_ctxt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fqualified_ty_ty_ctxt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fqualified_ty_ty_ctxt.stderr?ref=272000c94edda10d3ccd7042d2b9914c2c974f29", "patch": "@@ -0,0 +1,20 @@\n+error: usage of qualified `ty::Ty<'_>`\n+  --> $DIR/qualified_ty_ty_ctxt.rs:25:11\n+   |\n+LL |     ty_q: ty::Ty<'_>,\n+   |           ^^^^^^^^^^ help: try using it unqualified: `Ty<'_>`\n+   |\n+note: lint level defined here\n+  --> $DIR/qualified_ty_ty_ctxt.rs:4:9\n+   |\n+LL | #![deny(usage_of_qualified_ty)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: usage of qualified `ty::TyCtxt<'_, '_, '_>`\n+  --> $DIR/qualified_ty_ty_ctxt.rs:27:16\n+   |\n+LL |     ty_ctxt_q: ty::TyCtxt<'_, '_, '_>,\n+   |                ^^^^^^^^^^^^^^^^^^^^^^ help: try using it unqualified: `TyCtxt<'_, '_, '_>`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "10229a331c285b4a7a6ce71b517a42a8d0a19a1a", "filename": "src/test/ui-fulldeps/internal-lints/ty_tykind_usage.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fty_tykind_usage.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/272000c94edda10d3ccd7042d2b9914c2c974f29/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fty_tykind_usage.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fty_tykind_usage.stderr?ref=272000c94edda10d3ccd7042d2b9914c2c974f29", "patch": "@@ -190,7 +190,7 @@ error: usage of `ty::TyKind`\n LL |     fn ty_kind(ty_bad: TyKind<'_>, ty_good: Ty<'_>) {}\n    |                        ^^^^^^^^^^\n    |\n-   = help: try using `ty::Ty` instead\n+   = help: try using `Ty` instead\n \n error: aborting due to 31 previous errors\n "}]}