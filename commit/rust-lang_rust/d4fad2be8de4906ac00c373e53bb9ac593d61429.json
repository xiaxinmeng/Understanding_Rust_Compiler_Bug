{"sha": "d4fad2be8de4906ac00c373e53bb9ac593d61429", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0ZmFkMmJlOGRlNDkwNmFjMDBjMzczZTUzYmI5YWM1OTNkNjE0Mjk=", "commit": {"author": {"name": "Conrad Ludgate", "email": "conradludgate@gmail.com", "date": "2021-03-02T14:28:53Z"}, "committer": {"name": "Conrad Ludgate", "email": "conradludgate@gmail.com", "date": "2021-03-02T14:30:11Z"}, "message": "refactor: re-use add_turbo_fish function", "tree": {"sha": "792754ed2233241d438c7fee642b060b734f413f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/792754ed2233241d438c7fee642b060b734f413f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4fad2be8de4906ac00c373e53bb9ac593d61429", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE6pcFW95LJgarInbuPdGh2zy0v2MFAmA+S/MACgkQPdGh2zy0\nv2OBQw//SOlFf9cw2Xd9v0O15HPe2s2PTbtYo9yz738ocIuvOp7sf2tI50ih5GhK\n5pNaxK2ueS6qJWo19B+ovuGHMu7M1MYCPDO2mu/pTyFyrTjEtMH+VvhJOgwOw+kB\nF4EL+HJu9P/ErJ3CKHLiBCbYma1eSULcbDsoBztBpGtM1ZfR3hIpdP+dd+7AttFO\nm5S8KuPfig9bDDRkOjB+zQecHke2WKWE/xhUr1ibeMGQvKmZh8ow5ZWFT7+vGA7P\nkiy1jMmLjBHa8ynIvZcbrydkDe4jyqjzCqEz6I2cuFwn0wh0gzKz5y2Qcj+mnQVa\nFZjwYR0pdT88EFYjMQY0Wzh02EM40WmDqt9fHBEMyp2lZC6WQ+sbBhtxUVXdf2Zy\nEJbOg1/C6yDoK3pKYs2h66UKDJax2/k1/JamqJHiWCWzcn792K0jsNklBB53MeYq\nurfjgRbV7OySO+fEidPdozBSZG5UwaUU2ydwxT4DGmb0tnhyK1DSUOrx6a2dr8wh\nDYY8B0b6dxm1I9cqbphbzcdiE7GFVMTJiNTzLuInm9auBZZjJHITkI4r7N9plpfg\nbE+j2dN3QhNFNm0wYN9xkwZELMy0IqmTHdmkyxurNtRlwCPsLFfzy5tAjHTDxroY\n+NKztc5r2ovOhI3/gYmCUzQumYERimu1DTi8GlIpsj/mh+nQqMk=\n=DwA9\n-----END PGP SIGNATURE-----", "payload": "tree 792754ed2233241d438c7fee642b060b734f413f\nparent 4a36129c7a018828548e2eddebdd49cdb7d6879d\nauthor Conrad Ludgate <conradludgate@gmail.com> 1614695333 +0000\ncommitter Conrad Ludgate <conradludgate@gmail.com> 1614695411 +0000\n\nrefactor: re-use add_turbo_fish function\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4fad2be8de4906ac00c373e53bb9ac593d61429", "html_url": "https://github.com/rust-lang/rust/commit/d4fad2be8de4906ac00c373e53bb9ac593d61429", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4fad2be8de4906ac00c373e53bb9ac593d61429/comments", "author": {"login": "conradludgate", "id": 6625462, "node_id": "MDQ6VXNlcjY2MjU0NjI=", "avatar_url": "https://avatars.githubusercontent.com/u/6625462?v=4", "gravatar_id": "", "url": "https://api.github.com/users/conradludgate", "html_url": "https://github.com/conradludgate", "followers_url": "https://api.github.com/users/conradludgate/followers", "following_url": "https://api.github.com/users/conradludgate/following{/other_user}", "gists_url": "https://api.github.com/users/conradludgate/gists{/gist_id}", "starred_url": "https://api.github.com/users/conradludgate/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/conradludgate/subscriptions", "organizations_url": "https://api.github.com/users/conradludgate/orgs", "repos_url": "https://api.github.com/users/conradludgate/repos", "events_url": "https://api.github.com/users/conradludgate/events{/privacy}", "received_events_url": "https://api.github.com/users/conradludgate/received_events", "type": "User", "site_admin": false}, "committer": {"login": "conradludgate", "id": 6625462, "node_id": "MDQ6VXNlcjY2MjU0NjI=", "avatar_url": "https://avatars.githubusercontent.com/u/6625462?v=4", "gravatar_id": "", "url": "https://api.github.com/users/conradludgate", "html_url": "https://github.com/conradludgate", "followers_url": "https://api.github.com/users/conradludgate/followers", "following_url": "https://api.github.com/users/conradludgate/following{/other_user}", "gists_url": "https://api.github.com/users/conradludgate/gists{/gist_id}", "starred_url": "https://api.github.com/users/conradludgate/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/conradludgate/subscriptions", "organizations_url": "https://api.github.com/users/conradludgate/orgs", "repos_url": "https://api.github.com/users/conradludgate/repos", "events_url": "https://api.github.com/users/conradludgate/events{/privacy}", "received_events_url": "https://api.github.com/users/conradludgate/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a36129c7a018828548e2eddebdd49cdb7d6879d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a36129c7a018828548e2eddebdd49cdb7d6879d", "html_url": "https://github.com/rust-lang/rust/commit/4a36129c7a018828548e2eddebdd49cdb7d6879d"}], "stats": {"total": 338, "additions": 137, "deletions": 201}, "files": [{"sha": "f18e3edf9fb55fac43303febc74a7197d3ad444c", "filename": "crates/ide_assists/src/handlers/add_turbo_fish.rs", "status": "modified", "additions": 137, "deletions": 1, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/d4fad2be8de4906ac00c373e53bb9ac593d61429/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_turbo_fish.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4fad2be8de4906ac00c373e53bb9ac593d61429/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_turbo_fish.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_turbo_fish.rs?ref=d4fad2be8de4906ac00c373e53bb9ac593d61429", "patch": "@@ -31,11 +31,13 @@ pub(crate) fn add_turbo_fish(acc: &mut Assists, ctx: &AssistContext) -> Option<(\n             return None;\n         }\n         mark::hit!(add_turbo_fish_after_call);\n+        mark::hit!(add_type_ascription_after_call);\n         arg_list.l_paren_token()?.prev_token().filter(|it| it.kind() == SyntaxKind::IDENT)\n     })?;\n     let next_token = ident.next_token()?;\n     if next_token.kind() == T![::] {\n         mark::hit!(add_turbo_fish_one_fish_is_enough);\n+        mark::hit!(add_type_ascription_turbofished);\n         return None;\n     }\n     let name_ref = ast::NameRef::cast(ident.parent())?;\n@@ -50,8 +52,27 @@ pub(crate) fn add_turbo_fish(acc: &mut Assists, ctx: &AssistContext) -> Option<(\n     let generics = hir::GenericDef::Function(fun).params(ctx.sema.db);\n     if generics.is_empty() {\n         mark::hit!(add_turbo_fish_non_generic);\n+        mark::hit!(add_type_ascription_non_generic);\n         return None;\n     }\n+\n+    if let Some(let_stmt) = ctx.find_node_at_offset::<ast::LetStmt>() {\n+        if let_stmt.colon_token().is_none() {\n+            let type_pos = let_stmt.pat()?.syntax().last_token()?.text_range().end();\n+            acc.add(\n+                AssistId(\"add_type_ascription\", AssistKind::RefactorRewrite),\n+                \"Add `: _` before assignment operator\",\n+                ident.text_range(),\n+                |builder| match ctx.config.snippet_cap {\n+                    Some(cap) => builder.insert_snippet(cap, type_pos, \": ${0:_}\"),\n+                    None => builder.insert(type_pos, \": _\"),\n+                },\n+            )?\n+        } else {\n+            mark::hit!(add_type_ascription_already_typed);\n+        }\n+    }\n+\n     acc.add(\n         AssistId(\"add_turbo_fish\", AssistKind::RefactorRewrite),\n         \"Add `::<>`\",\n@@ -65,7 +86,7 @@ pub(crate) fn add_turbo_fish(acc: &mut Assists, ctx: &AssistContext) -> Option<(\n \n #[cfg(test)]\n mod tests {\n-    use crate::tests::{check_assist, check_assist_not_applicable};\n+    use crate::tests::{check_assist, check_assist_by_label, check_assist_not_applicable};\n \n     use super::*;\n     use test_utils::mark;\n@@ -158,6 +179,121 @@ fn make() -> () {}\n fn main() {\n     make$0();\n }\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn add_type_ascription_function() {\n+        check_assist_by_label(\n+            add_turbo_fish,\n+            r#\"\n+fn make<T>() -> T {}\n+fn main() {\n+    let x = make$0();\n+}\n+\"#,\n+            r#\"\n+fn make<T>() -> T {}\n+fn main() {\n+    let x: ${0:_} = make();\n+}\n+\"#,\n+            \"Add `: _` before assignment operator\",\n+        );\n+    }\n+\n+    #[test]\n+    fn add_type_ascription_after_call() {\n+        mark::check!(add_type_ascription_after_call);\n+        check_assist_by_label(\n+            add_turbo_fish,\n+            r#\"\n+fn make<T>() -> T {}\n+fn main() {\n+    let x = make()$0;\n+}\n+\"#,\n+            r#\"\n+fn make<T>() -> T {}\n+fn main() {\n+    let x: ${0:_} = make();\n+}\n+\"#,\n+            \"Add `: _` before assignment operator\",\n+        );\n+    }\n+\n+    #[test]\n+    fn add_type_ascription_method() {\n+        check_assist_by_label(\n+            add_turbo_fish,\n+            r#\"\n+struct S;\n+impl S {\n+    fn make<T>(&self) -> T {}\n+}\n+fn main() {\n+    let x = S.make$0();\n+}\n+\"#,\n+            r#\"\n+struct S;\n+impl S {\n+    fn make<T>(&self) -> T {}\n+}\n+fn main() {\n+    let x: ${0:_} = S.make();\n+}\n+\"#,\n+            \"Add `: _` before assignment operator\",\n+        );\n+    }\n+\n+    #[test]\n+    fn add_type_ascription_turbofished() {\n+        mark::check!(add_type_ascription_turbofished);\n+        check_assist_not_applicable(\n+            add_turbo_fish,\n+            r#\"\n+fn make<T>() -> T {}\n+fn main() {\n+    let x = make$0::<()>();\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn add_type_ascription_already_typed() {\n+        mark::check!(add_type_ascription_already_typed);\n+        check_assist(\n+            add_turbo_fish,\n+            r#\"\n+fn make<T>() -> T {}\n+fn main() {\n+    let x: () = make$0();\n+}\n+\"#,\n+            r#\"\n+fn make<T>() -> T {}\n+fn main() {\n+    let x: () = make::<${0:_}>();\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn add_type_ascription_non_generic() {\n+        mark::check!(add_type_ascription_non_generic);\n+        check_assist_not_applicable(\n+            add_turbo_fish,\n+            r#\"\n+fn make() -> () {}\n+fn main() {\n+    let x = make$0();\n+}\n \"#,\n         );\n     }"}, {"sha": "060c326bf43e8bc5037e4506793267eec00410cc", "filename": "crates/ide_assists/src/handlers/add_type_ascription.rs", "status": "removed", "additions": 0, "deletions": 198, "changes": 198, "blob_url": "https://github.com/rust-lang/rust/blob/4a36129c7a018828548e2eddebdd49cdb7d6879d/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_type_ascription.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a36129c7a018828548e2eddebdd49cdb7d6879d/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_type_ascription.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_type_ascription.rs?ref=4a36129c7a018828548e2eddebdd49cdb7d6879d", "patch": "@@ -1,198 +0,0 @@\n-use ide_db::defs::{Definition, NameRefClass};\n-use syntax::{ast, AstNode, SyntaxKind, T};\n-use test_utils::mark;\n-\n-use crate::{\n-    assist_context::{AssistContext, Assists},\n-    AssistId, AssistKind,\n-};\n-\n-// Assist: add_type_ascription\n-//\n-// Adds `: _` before the assignment operator to prompt the user for a type.\n-//\n-// ```\n-// fn make<T>() -> T { todo!() }\n-// fn main() {\n-//     let x = make$0();\n-// }\n-// ```\n-// ->\n-// ```\n-// fn make<T>() -> T { todo!() }\n-// fn main() {\n-//     let x: ${0:_} = make();\n-// }\n-// ```\n-pub(crate) fn add_type_ascription(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n-    let let_stmt = ctx.find_node_at_offset::<ast::LetStmt>()?;\n-    if let_stmt.colon_token().is_some() {\n-        mark::hit!(add_type_ascription_already_typed);\n-        return None;\n-    }\n-    let type_pos = let_stmt.pat()?.syntax().last_token()?.text_range().end();\n-\n-    let ident = ctx.find_token_syntax_at_offset(SyntaxKind::IDENT).or_else(|| {\n-        let arg_list = ctx.find_node_at_offset::<ast::ArgList>()?;\n-        if arg_list.args().count() > 0 {\n-            return None;\n-        }\n-        mark::hit!(add_type_ascription_after_call);\n-        arg_list.l_paren_token()?.prev_token().filter(|it| it.kind() == SyntaxKind::IDENT)\n-    })?;\n-    let next_token = ident.next_token()?;\n-    if next_token.kind() == T![::] {\n-        mark::hit!(add_type_ascription_turbofished);\n-        return None;\n-    }\n-    let name_ref = ast::NameRef::cast(ident.parent())?;\n-    let def = match NameRefClass::classify(&ctx.sema, &name_ref)? {\n-        NameRefClass::Definition(def) => def,\n-        NameRefClass::ExternCrate(_) | NameRefClass::FieldShorthand { .. } => return None,\n-    };\n-    let fun = match def {\n-        Definition::ModuleDef(hir::ModuleDef::Function(it)) => it,\n-        _ => return None,\n-    };\n-    let generics = hir::GenericDef::Function(fun).params(ctx.sema.db);\n-    if generics.is_empty() {\n-        mark::hit!(add_type_ascription_non_generic);\n-        return None;\n-    }\n-    acc.add(\n-        AssistId(\"add_type_ascription\", AssistKind::RefactorRewrite),\n-        \"Add `: _` before assignment operator\",\n-        ident.text_range(),\n-        |builder| match ctx.config.snippet_cap {\n-            Some(cap) => builder.insert_snippet(cap, type_pos, \": ${0:_}\"),\n-            None => builder.insert(type_pos, \": _\"),\n-        },\n-    )\n-}\n-\n-#[cfg(test)]\n-mod tests {\n-    use crate::tests::{check_assist, check_assist_not_applicable};\n-\n-    use super::*;\n-    use test_utils::mark;\n-\n-    #[test]\n-    fn add_type_ascription_function() {\n-        check_assist(\n-            add_type_ascription,\n-            r#\"\n-fn make<T>() -> T {}\n-fn main() {\n-    let x = make$0();\n-}\n-\"#,\n-            r#\"\n-fn make<T>() -> T {}\n-fn main() {\n-    let x: ${0:_} = make();\n-}\n-\"#,\n-        );\n-    }\n-\n-    #[test]\n-    fn add_type_ascription_after_call() {\n-        mark::check!(add_type_ascription_after_call);\n-        check_assist(\n-            add_type_ascription,\n-            r#\"\n-fn make<T>() -> T {}\n-fn main() {\n-    let x = make()$0;\n-}\n-\"#,\n-            r#\"\n-fn make<T>() -> T {}\n-fn main() {\n-    let x: ${0:_} = make();\n-}\n-\"#,\n-        );\n-    }\n-\n-    #[test]\n-    fn add_type_ascription_method() {\n-        check_assist(\n-            add_type_ascription,\n-            r#\"\n-struct S;\n-impl S {\n-    fn make<T>(&self) -> T {}\n-}\n-fn main() {\n-    let x = S.make$0();\n-}\n-\"#,\n-            r#\"\n-struct S;\n-impl S {\n-    fn make<T>(&self) -> T {}\n-}\n-fn main() {\n-    let x: ${0:_} = S.make();\n-}\n-\"#,\n-        );\n-    }\n-\n-    #[test]\n-    fn add_type_ascription_turbofished() {\n-        mark::check!(add_type_ascription_turbofished);\n-        check_assist_not_applicable(\n-            add_type_ascription,\n-            r#\"\n-fn make<T>() -> T {}\n-fn main() {\n-    let x = make$0::<()>();\n-}\n-\"#,\n-        );\n-    }\n-\n-    #[test]\n-    fn add_type_ascription_already_typed() {\n-        mark::check!(add_type_ascription_already_typed);\n-        check_assist_not_applicable(\n-            add_type_ascription,\n-            r#\"\n-fn make<T>() -> T {}\n-fn main() {\n-    let x: () = make$0();\n-}\n-\"#,\n-        );\n-    }\n-\n-    #[test]\n-    fn add_type_ascription_non_generic() {\n-        mark::check!(add_type_ascription_non_generic);\n-        check_assist_not_applicable(\n-            add_type_ascription,\n-            r#\"\n-fn make() -> () {}\n-fn main() {\n-    let x = make$0();\n-}\n-\"#,\n-        );\n-    }\n-\n-    #[test]\n-    fn add_type_ascription_no_let() {\n-        check_assist_not_applicable(\n-            add_type_ascription,\n-            r#\"\n-fn make<T>() -> T {}\n-fn main() {\n-    make$0();\n-}\n-\"#,\n-        );\n-    }\n-}"}, {"sha": "9c8148462c0a9d4e1ccaa88e017e04afe5382610", "filename": "crates/ide_assists/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4fad2be8de4906ac00c373e53bb9ac593d61429/crates%2Fide_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4fad2be8de4906ac00c373e53bb9ac593d61429/crates%2Fide_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Flib.rs?ref=d4fad2be8de4906ac00c373e53bb9ac593d61429", "patch": "@@ -111,7 +111,6 @@ mod handlers {\n     mod add_lifetime_to_type;\n     mod add_missing_impl_members;\n     mod add_turbo_fish;\n-    mod add_type_ascription;\n     mod apply_demorgan;\n     mod auto_import;\n     mod change_visibility;\n@@ -176,7 +175,6 @@ mod handlers {\n             add_explicit_type::add_explicit_type,\n             add_lifetime_to_type::add_lifetime_to_type,\n             add_turbo_fish::add_turbo_fish,\n-            add_type_ascription::add_type_ascription,\n             apply_demorgan::apply_demorgan,\n             auto_import::auto_import,\n             change_visibility::change_visibility,"}]}