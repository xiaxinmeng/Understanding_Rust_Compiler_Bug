{"sha": "2715c5f984fda7faa156d1c9cf91aa4934f0e00f", "node_id": "C_kwDOAAsO6NoAKDI3MTVjNWY5ODRmZGE3ZmFhMTU2ZDFjOWNmOTFhYTQ5MzRmMGUwMGY", "commit": {"author": {"name": "Cormac Relf", "email": "web@cormacrelf.net", "date": "2021-10-17T05:42:22Z"}, "committer": {"name": "Cormac Relf", "email": "web@cormacrelf.net", "date": "2021-12-13T03:02:41Z"}, "message": "let-else: add match-ergonomics tests adapted from rfc2005\n\ncollect explicit-mut passing tests in one file", "tree": {"sha": "93bcc7fa0129af21d22040b18b500398c863e51e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93bcc7fa0129af21d22040b18b500398c863e51e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2715c5f984fda7faa156d1c9cf91aa4934f0e00f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2715c5f984fda7faa156d1c9cf91aa4934f0e00f", "html_url": "https://github.com/rust-lang/rust/commit/2715c5f984fda7faa156d1c9cf91aa4934f0e00f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2715c5f984fda7faa156d1c9cf91aa4934f0e00f/comments", "author": {"login": "cormacrelf", "id": 378760, "node_id": "MDQ6VXNlcjM3ODc2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/378760?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cormacrelf", "html_url": "https://github.com/cormacrelf", "followers_url": "https://api.github.com/users/cormacrelf/followers", "following_url": "https://api.github.com/users/cormacrelf/following{/other_user}", "gists_url": "https://api.github.com/users/cormacrelf/gists{/gist_id}", "starred_url": "https://api.github.com/users/cormacrelf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cormacrelf/subscriptions", "organizations_url": "https://api.github.com/users/cormacrelf/orgs", "repos_url": "https://api.github.com/users/cormacrelf/repos", "events_url": "https://api.github.com/users/cormacrelf/events{/privacy}", "received_events_url": "https://api.github.com/users/cormacrelf/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cormacrelf", "id": 378760, "node_id": "MDQ6VXNlcjM3ODc2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/378760?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cormacrelf", "html_url": "https://github.com/cormacrelf", "followers_url": "https://api.github.com/users/cormacrelf/followers", "following_url": "https://api.github.com/users/cormacrelf/following{/other_user}", "gists_url": "https://api.github.com/users/cormacrelf/gists{/gist_id}", "starred_url": "https://api.github.com/users/cormacrelf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cormacrelf/subscriptions", "organizations_url": "https://api.github.com/users/cormacrelf/orgs", "repos_url": "https://api.github.com/users/cormacrelf/repos", "events_url": "https://api.github.com/users/cormacrelf/events{/privacy}", "received_events_url": "https://api.github.com/users/cormacrelf/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "102b9125e1cefbb8ed8408d2db3f9f7d5afddbf0", "url": "https://api.github.com/repos/rust-lang/rust/commits/102b9125e1cefbb8ed8408d2db3f9f7d5afddbf0", "html_url": "https://github.com/rust-lang/rust/commit/102b9125e1cefbb8ed8408d2db3f9f7d5afddbf0"}], "stats": {"total": 228, "additions": 228, "deletions": 0}, "files": [{"sha": "b65fa13c1de1eb1383be87db0f2b26c5b02a6442", "filename": "src/test/ui/let-else/let-else-binding-explicit-mut-annotated.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2715c5f984fda7faa156d1c9cf91aa4934f0e00f/src%2Ftest%2Fui%2Flet-else%2Flet-else-binding-explicit-mut-annotated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2715c5f984fda7faa156d1c9cf91aa4934f0e00f/src%2Ftest%2Fui%2Flet-else%2Flet-else-binding-explicit-mut-annotated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-binding-explicit-mut-annotated.rs?ref=2715c5f984fda7faa156d1c9cf91aa4934f0e00f", "patch": "@@ -0,0 +1,16 @@\n+// from rfc2005 test suite\n+\n+#![feature(let_else)]\n+\n+// Verify the binding mode shifts - only when no `&` are auto-dereferenced is the\n+// final default binding mode mutable.\n+\n+fn main() {\n+    let Some(n): &mut Option<i32> = &&Some(5i32) else { return }; //~ ERROR mismatched types\n+    *n += 1;\n+    let _ = n;\n+\n+    let Some(n): &mut Option<i32> = &&mut Some(5i32) else { return }; //~ ERROR mismatched types\n+    *n += 1;\n+    let _ = n;\n+}"}, {"sha": "fdec7e7f6a75361b3890038c7840015e9e6c56ae", "filename": "src/test/ui/let-else/let-else-binding-explicit-mut-annotated.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2715c5f984fda7faa156d1c9cf91aa4934f0e00f/src%2Ftest%2Fui%2Flet-else%2Flet-else-binding-explicit-mut-annotated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2715c5f984fda7faa156d1c9cf91aa4934f0e00f/src%2Ftest%2Fui%2Flet-else%2Flet-else-binding-explicit-mut-annotated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-binding-explicit-mut-annotated.stderr?ref=2715c5f984fda7faa156d1c9cf91aa4934f0e00f", "patch": "@@ -0,0 +1,21 @@\n+error[E0308]: mismatched types\n+  --> $DIR/let-else-binding-explicit-mut-annotated.rs:9:37\n+   |\n+LL |     let Some(n): &mut Option<i32> = &&Some(5i32) else { return };\n+   |                                     ^^^^^^^^^^^^ types differ in mutability\n+   |\n+   = note: expected mutable reference `&mut Option<i32>`\n+                      found reference `&&Option<i32>`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/let-else-binding-explicit-mut-annotated.rs:13:37\n+   |\n+LL |     let Some(n): &mut Option<i32> = &&mut Some(5i32) else { return };\n+   |                                     ^^^^^^^^^^^^^^^^ types differ in mutability\n+   |\n+   = note: expected mutable reference `&mut Option<i32>`\n+                      found reference `&&mut Option<i32>`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "63b35df76aa044e5f632aef4cea4fdc71aad205a", "filename": "src/test/ui/let-else/let-else-binding-explicit-mut-borrow.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2715c5f984fda7faa156d1c9cf91aa4934f0e00f/src%2Ftest%2Fui%2Flet-else%2Flet-else-binding-explicit-mut-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2715c5f984fda7faa156d1c9cf91aa4934f0e00f/src%2Ftest%2Fui%2Flet-else%2Flet-else-binding-explicit-mut-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-binding-explicit-mut-borrow.rs?ref=2715c5f984fda7faa156d1c9cf91aa4934f0e00f", "patch": "@@ -0,0 +1,13 @@\n+#![feature(let_else)]\n+\n+// Slightly different from explicit-mut-annotated -- this won't show an error until borrowck.\n+// Should it show a type error instead?\n+\n+fn main() {\n+    let Some(n): &mut Option<i32> = &mut &Some(5i32) else {\n+        //~^ ERROR cannot borrow data in a `&` reference as mutable\n+        return\n+    };\n+    *n += 1;\n+    let _ = n;\n+}"}, {"sha": "023fab8fe4a3ddef6aba425c596cae5e5a22a513", "filename": "src/test/ui/let-else/let-else-binding-explicit-mut-borrow.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2715c5f984fda7faa156d1c9cf91aa4934f0e00f/src%2Ftest%2Fui%2Flet-else%2Flet-else-binding-explicit-mut-borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2715c5f984fda7faa156d1c9cf91aa4934f0e00f/src%2Ftest%2Fui%2Flet-else%2Flet-else-binding-explicit-mut-borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-binding-explicit-mut-borrow.stderr?ref=2715c5f984fda7faa156d1c9cf91aa4934f0e00f", "patch": "@@ -0,0 +1,9 @@\n+error[E0596]: cannot borrow data in a `&` reference as mutable\n+  --> $DIR/let-else-binding-explicit-mut-borrow.rs:7:37\n+   |\n+LL |     let Some(n): &mut Option<i32> = &mut &Some(5i32) else {\n+   |                                     ^^^^^^^^^^^^^^^^ cannot borrow as mutable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0596`."}, {"sha": "305be922192144f1a31456c55e6bcb512a330720", "filename": "src/test/ui/let-else/let-else-binding-explicit-mut-pass.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2715c5f984fda7faa156d1c9cf91aa4934f0e00f/src%2Ftest%2Fui%2Flet-else%2Flet-else-binding-explicit-mut-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2715c5f984fda7faa156d1c9cf91aa4934f0e00f/src%2Ftest%2Fui%2Flet-else%2Flet-else-binding-explicit-mut-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-binding-explicit-mut-pass.rs?ref=2715c5f984fda7faa156d1c9cf91aa4934f0e00f", "patch": "@@ -0,0 +1,13 @@\n+// check-pass\n+\n+#![feature(let_else)]\n+\n+fn main() {\n+    let Some(n) = &mut &mut Some(5i32) else { return; };\n+    *n += 1; // OK\n+    let _ = n;\n+\n+    let Some(n): &mut Option<i32> = &mut &mut Some(5i32) else { return; };\n+    *n += 1; // OK\n+    let _ = n;\n+}"}, {"sha": "dbe4715b1a9751d68aa19277f067fbd481ece62c", "filename": "src/test/ui/let-else/let-else-binding-explicit-mut.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2715c5f984fda7faa156d1c9cf91aa4934f0e00f/src%2Ftest%2Fui%2Flet-else%2Flet-else-binding-explicit-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2715c5f984fda7faa156d1c9cf91aa4934f0e00f/src%2Ftest%2Fui%2Flet-else%2Flet-else-binding-explicit-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-binding-explicit-mut.rs?ref=2715c5f984fda7faa156d1c9cf91aa4934f0e00f", "patch": "@@ -0,0 +1,20 @@\n+// from rfc2005 test suite\n+\n+#![feature(let_else)]\n+\n+// Verify the binding mode shifts - only when no `&` are auto-dereferenced is the\n+// final default binding mode mutable.\n+\n+fn main() {\n+    let Some(n) = &&Some(5i32) else { return };\n+    *n += 1; //~ ERROR cannot assign to `*n`, which is behind a `&` reference\n+    let _ = n;\n+\n+    let Some(n) = &mut &Some(5i32) else { return };\n+    *n += 1; //~ ERROR cannot assign to `*n`, which is behind a `&` reference\n+    let _ = n;\n+\n+    let Some(n) = &&mut Some(5i32) else { return };\n+    *n += 1; //~ ERROR cannot assign to `*n`, which is behind a `&` reference\n+    let _ = n;\n+}"}, {"sha": "45f2b6b3bcee8c30abdbd6d79eccc565a4ca3aff", "filename": "src/test/ui/let-else/let-else-binding-explicit-mut.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2715c5f984fda7faa156d1c9cf91aa4934f0e00f/src%2Ftest%2Fui%2Flet-else%2Flet-else-binding-explicit-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2715c5f984fda7faa156d1c9cf91aa4934f0e00f/src%2Ftest%2Fui%2Flet-else%2Flet-else-binding-explicit-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-binding-explicit-mut.stderr?ref=2715c5f984fda7faa156d1c9cf91aa4934f0e00f", "patch": "@@ -0,0 +1,21 @@\n+error[E0594]: cannot assign to `*n`, which is behind a `&` reference\n+  --> $DIR/let-else-binding-explicit-mut.rs:10:5\n+   |\n+LL |     *n += 1;\n+   |     ^^^^^^^ `n` is a `&` reference, so the data it refers to cannot be written\n+\n+error[E0594]: cannot assign to `*n`, which is behind a `&` reference\n+  --> $DIR/let-else-binding-explicit-mut.rs:14:5\n+   |\n+LL |     *n += 1;\n+   |     ^^^^^^^ `n` is a `&` reference, so the data it refers to cannot be written\n+\n+error[E0594]: cannot assign to `*n`, which is behind a `&` reference\n+  --> $DIR/let-else-binding-explicit-mut.rs:18:5\n+   |\n+LL |     *n += 1;\n+   |     ^^^^^^^ `n` is a `&` reference, so the data it refers to cannot be written\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0594`."}, {"sha": "96de0ffe26e6b4c05a7a4b6a7807a750268a5529", "filename": "src/test/ui/let-else/let-else-binding-immutable.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2715c5f984fda7faa156d1c9cf91aa4934f0e00f/src%2Ftest%2Fui%2Flet-else%2Flet-else-binding-immutable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2715c5f984fda7faa156d1c9cf91aa4934f0e00f/src%2Ftest%2Fui%2Flet-else%2Flet-else-binding-immutable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-binding-immutable.rs?ref=2715c5f984fda7faa156d1c9cf91aa4934f0e00f", "patch": "@@ -0,0 +1,10 @@\n+// from rfc2005 test suite\n+\n+#![feature(let_else)]\n+\n+pub fn main() {\n+    let Some(x) = &Some(3) else {\n+        panic!();\n+    };\n+    *x += 1; //~ ERROR: cannot assign to `*x`, which is behind a `&` reference\n+}"}, {"sha": "dd1365a9ef0785274847660ddf8b1a8eea6dd2a8", "filename": "src/test/ui/let-else/let-else-binding-immutable.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2715c5f984fda7faa156d1c9cf91aa4934f0e00f/src%2Ftest%2Fui%2Flet-else%2Flet-else-binding-immutable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2715c5f984fda7faa156d1c9cf91aa4934f0e00f/src%2Ftest%2Fui%2Flet-else%2Flet-else-binding-immutable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-binding-immutable.stderr?ref=2715c5f984fda7faa156d1c9cf91aa4934f0e00f", "patch": "@@ -0,0 +1,9 @@\n+error[E0594]: cannot assign to `*x`, which is behind a `&` reference\n+  --> $DIR/let-else-binding-immutable.rs:9:5\n+   |\n+LL |     *x += 1;\n+   |     ^^^^^^^ `x` is a `&` reference, so the data it refers to cannot be written\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0594`."}, {"sha": "d5121e744dad39b9766f276d850351c9f2226363", "filename": "src/test/ui/let-else/let-else-bindings.rs", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/2715c5f984fda7faa156d1c9cf91aa4934f0e00f/src%2Ftest%2Fui%2Flet-else%2Flet-else-bindings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2715c5f984fda7faa156d1c9cf91aa4934f0e00f/src%2Ftest%2Fui%2Flet-else%2Flet-else-bindings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-bindings.rs?ref=2715c5f984fda7faa156d1c9cf91aa4934f0e00f", "patch": "@@ -0,0 +1,75 @@\n+// run-pass\n+// adapted from src/test/ui/binding/if-let.rs\n+#![feature(let_else)]\n+#![allow(dead_code)]\n+\n+fn none() -> bool {\n+    let None = Some(\"test\") else {\n+        return true;\n+    };\n+    false\n+}\n+\n+fn ok() -> bool {\n+    let Ok(()) = Err::<(),&'static str>(\"test\") else {\n+        return true;\n+    };\n+    false\n+}\n+\n+pub fn main() {\n+    let x = Some(3);\n+    let Some(y) = x else {\n+        panic!(\"let-else panicked\");\n+    };\n+    assert_eq!(y, 3);\n+    let Some(_) = x else {\n+        panic!(\"bad match\");\n+    };\n+    assert!(none());\n+    assert!(ok());\n+\n+    assert!((|| {\n+        let 1 = 2 else {\n+            return true;\n+        };\n+        false\n+    })());\n+\n+    enum Foo {\n+        One,\n+        Two(usize),\n+        Three(String, isize),\n+    }\n+\n+    let foo = Foo::Three(\"three\".to_string(), 42);\n+    let one = || {\n+        let Foo::One = foo else {\n+            return true;\n+        };\n+        false\n+    };\n+    assert!(one());\n+    let two = || {\n+        let Foo::Two(_x) = foo else {\n+            return true;\n+        };\n+        false\n+    };\n+    assert!(two());\n+    let three = || {\n+        let Foo::Three(s, _x) = foo else {\n+            return false;\n+        };\n+        s == \"three\"\n+    };\n+    assert!(three());\n+\n+    let a@Foo::Two(_) = Foo::Two(42_usize) else {\n+        panic!(\"bad match\")\n+    };\n+    let Foo::Two(b) = a else {\n+        panic!(\"panic in nested `if let`\");\n+    };\n+    assert_eq!(b, 42_usize);\n+}"}, {"sha": "35dcdd3f6be3c1cb842c2c78ead0a3cc3db04d9b", "filename": "src/test/ui/let-else/let-else-no-double-error.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2715c5f984fda7faa156d1c9cf91aa4934f0e00f/src%2Ftest%2Fui%2Flet-else%2Flet-else-no-double-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2715c5f984fda7faa156d1c9cf91aa4934f0e00f/src%2Ftest%2Fui%2Flet-else%2Flet-else-no-double-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-no-double-error.rs?ref=2715c5f984fda7faa156d1c9cf91aa4934f0e00f", "patch": "@@ -0,0 +1,12 @@\n+// from rfc2005 test suite\n+\n+#![feature(let_else)]\n+\n+// Without caching type lookups in FnCtxt.resolve_ty_and_def_ufcs\n+// the error below would be reported twice (once when checking\n+// for a non-ref pattern, once when processing the pattern).\n+\n+fn main() {\n+    let foo = 22;\n+    let u32::XXX = foo else { return }; //~ ERROR: no associated item named `XXX` found for type `u32` in the current scope [E0599]\n+}"}, {"sha": "941e588b1768d3092dd06583e144ba4d91b827d3", "filename": "src/test/ui/let-else/let-else-no-double-error.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2715c5f984fda7faa156d1c9cf91aa4934f0e00f/src%2Ftest%2Fui%2Flet-else%2Flet-else-no-double-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2715c5f984fda7faa156d1c9cf91aa4934f0e00f/src%2Ftest%2Fui%2Flet-else%2Flet-else-no-double-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-no-double-error.stderr?ref=2715c5f984fda7faa156d1c9cf91aa4934f0e00f", "patch": "@@ -0,0 +1,9 @@\n+error[E0599]: no associated item named `XXX` found for type `u32` in the current scope\n+  --> $DIR/let-else-no-double-error.rs:11:14\n+   |\n+LL |     let u32::XXX = foo else { return };\n+   |              ^^^ associated item not found in `u32`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0599`."}]}