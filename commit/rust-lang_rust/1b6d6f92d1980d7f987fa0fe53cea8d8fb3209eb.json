{"sha": "1b6d6f92d1980d7f987fa0fe53cea8d8fb3209eb", "node_id": "C_kwDOAAsO6NoAKDFiNmQ2ZjkyZDE5ODBkN2Y5ODdmYTBmZTUzY2VhOGQ4ZmIzMjA5ZWI", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-03-08T22:10:24Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-03-09T17:24:07Z"}, "message": "Fix canonicalizer bug for int/float vars too", "tree": {"sha": "11bfa301675cad40a76b1f5ace78a7e92afccc36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11bfa301675cad40a76b1f5ace78a7e92afccc36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b6d6f92d1980d7f987fa0fe53cea8d8fb3209eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b6d6f92d1980d7f987fa0fe53cea8d8fb3209eb", "html_url": "https://github.com/rust-lang/rust/commit/1b6d6f92d1980d7f987fa0fe53cea8d8fb3209eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b6d6f92d1980d7f987fa0fe53cea8d8fb3209eb/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3aea46979a103fc7415d6e211cc21734196adde5", "url": "https://api.github.com/repos/rust-lang/rust/commits/3aea46979a103fc7415d6e211cc21734196adde5", "html_url": "https://github.com/rust-lang/rust/commit/3aea46979a103fc7415d6e211cc21734196adde5"}], "stats": {"total": 82, "additions": 69, "deletions": 13}, "files": [{"sha": "8ac82653c0ee80294cfe7c757793eb6e1ba0b36a", "filename": "compiler/rustc_infer/src/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 22, "deletions": 9, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/1b6d6f92d1980d7f987fa0fe53cea8d8fb3209eb/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6d6f92d1980d7f987fa0fe53cea8d8fb3209eb/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=1b6d6f92d1980d7f987fa0fe53cea8d8fb3209eb", "patch": "@@ -411,15 +411,28 @@ impl<'cx, 'tcx> TypeFolder<TyCtxt<'tcx>> for Canonicalizer<'cx, 'tcx> {\n                 }\n             }\n \n-            ty::Infer(ty::IntVar(_)) => self.canonicalize_ty_var(\n-                CanonicalVarInfo { kind: CanonicalVarKind::Ty(CanonicalTyVarKind::Int) },\n-                t,\n-            ),\n-\n-            ty::Infer(ty::FloatVar(_)) => self.canonicalize_ty_var(\n-                CanonicalVarInfo { kind: CanonicalVarKind::Ty(CanonicalTyVarKind::Float) },\n-                t,\n-            ),\n+            ty::Infer(ty::IntVar(vid)) => {\n+                let nt = self.infcx.opportunistic_resolve_int_var(vid);\n+                if nt != t {\n+                    return self.fold_ty(nt);\n+                } else {\n+                    self.canonicalize_ty_var(\n+                        CanonicalVarInfo { kind: CanonicalVarKind::Ty(CanonicalTyVarKind::Int) },\n+                        t,\n+                    )\n+                }\n+            }\n+            ty::Infer(ty::FloatVar(vid)) => {\n+                let nt = self.infcx.opportunistic_resolve_float_var(vid);\n+                if nt != t {\n+                    return self.fold_ty(nt);\n+                } else {\n+                    self.canonicalize_ty_var(\n+                        CanonicalVarInfo { kind: CanonicalVarKind::Ty(CanonicalTyVarKind::Float) },\n+                        t,\n+                    )\n+                }\n+            }\n \n             ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {\n                 bug!(\"encountered a fresh type during canonicalization\")"}, {"sha": "4a834957959dbef27b8df1247ed235c198fd1d9f", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1b6d6f92d1980d7f987fa0fe53cea8d8fb3209eb/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6d6f92d1980d7f987fa0fe53cea8d8fb3209eb/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=1b6d6f92d1980d7f987fa0fe53cea8d8fb3209eb", "patch": "@@ -1363,6 +1363,28 @@ impl<'tcx> InferCtxt<'tcx> {\n         self.inner.borrow_mut().const_unification_table().find(var)\n     }\n \n+    /// Resolves an int var to a rigid int type, if it was constrained to one,\n+    /// or else the root int var in the unification table.\n+    pub fn opportunistic_resolve_int_var(&self, vid: ty::IntVid) -> Ty<'tcx> {\n+        let mut inner = self.inner.borrow_mut();\n+        if let Some(value) = inner.int_unification_table().probe_value(vid) {\n+            value.to_type(self.tcx)\n+        } else {\n+            self.tcx.mk_int_var(inner.int_unification_table().find(vid))\n+        }\n+    }\n+\n+    /// Resolves a float var to a rigid int type, if it was constrained to one,\n+    /// or else the root float var in the unification table.\n+    pub fn opportunistic_resolve_float_var(&self, vid: ty::FloatVid) -> Ty<'tcx> {\n+        let mut inner = self.inner.borrow_mut();\n+        if let Some(value) = inner.float_unification_table().probe_value(vid) {\n+            value.to_type(self.tcx)\n+        } else {\n+            self.tcx.mk_float_var(inner.float_unification_table().find(vid))\n+        }\n+    }\n+\n     /// Where possible, replaces type/const variables in\n     /// `value` with their final value. Note that region variables\n     /// are unaffected. If a type/const variable has not been unified, it"}, {"sha": "7ee4f33230630d0a55a93f0000985a8301708aa9", "filename": "compiler/rustc_trait_selection/src/solve/canonical/canonicalize.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1b6d6f92d1980d7f987fa0fe53cea8d8fb3209eb/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fcanonical%2Fcanonicalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6d6f92d1980d7f987fa0fe53cea8d8fb3209eb/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fcanonical%2Fcanonicalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fcanonical%2Fcanonicalize.rs?ref=1b6d6f92d1980d7f987fa0fe53cea8d8fb3209eb", "patch": "@@ -278,16 +278,16 @@ impl<'tcx> TypeFolder<TyCtxt<'tcx>> for Canonicalizer<'_, 'tcx> {\n                     Err(ui) => CanonicalVarKind::Ty(CanonicalTyVarKind::General(ui)),\n                 }\n             }\n-            ty::Infer(ty::IntVar(_)) => {\n-                let nt = self.infcx.shallow_resolve(t);\n+            ty::Infer(ty::IntVar(vid)) => {\n+                let nt = self.infcx.opportunistic_resolve_int_var(vid);\n                 if nt != t {\n                     return self.fold_ty(nt);\n                 } else {\n                     CanonicalVarKind::Ty(CanonicalTyVarKind::Int)\n                 }\n             }\n-            ty::Infer(ty::FloatVar(_)) => {\n-                let nt = self.infcx.shallow_resolve(t);\n+            ty::Infer(ty::FloatVar(vid)) => {\n+                let nt = self.infcx.opportunistic_resolve_float_var(vid);\n                 if nt != t {\n                     return self.fold_ty(nt);\n                 } else {"}, {"sha": "3f7316a2279d3e8ab2cf66b3c8625cef0b34c67b", "filename": "tests/ui/traits/new-solver/canonical-int-var-eq-in-response.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1b6d6f92d1980d7f987fa0fe53cea8d8fb3209eb/tests%2Fui%2Ftraits%2Fnew-solver%2Fcanonical-int-var-eq-in-response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6d6f92d1980d7f987fa0fe53cea8d8fb3209eb/tests%2Fui%2Ftraits%2Fnew-solver%2Fcanonical-int-var-eq-in-response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fcanonical-int-var-eq-in-response.rs?ref=1b6d6f92d1980d7f987fa0fe53cea8d8fb3209eb", "patch": "@@ -0,0 +1,21 @@\n+// check-pass\n+\n+trait Mirror {\n+    type Assoc;\n+}\n+\n+impl<T> Mirror for T {\n+    type Assoc = T;\n+}\n+\n+trait Test {}\n+impl Test for i64 {}\n+impl Test for u64 {}\n+\n+fn mirror_me<T: Mirror>(t: T, s: <T as Mirror>::Assoc) where <T as Mirror>::Assoc: Test {}\n+\n+fn main() {\n+    let mut x = 0;\n+    mirror_me(x, 1);\n+    x = 1i64;\n+}"}]}