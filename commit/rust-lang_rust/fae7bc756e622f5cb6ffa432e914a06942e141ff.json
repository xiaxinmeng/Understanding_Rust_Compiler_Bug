{"sha": "fae7bc756e622f5cb6ffa432e914a06942e141ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhZTdiYzc1NmU2MjJmNWNiNmZmYTQzMmU5MTRhMDY5NDJlMTQxZmY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-07T06:06:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-07T06:06:09Z"}, "message": "Rollup merge of #64192 - estebank:turbofish-madness, r=petrochenkov\n\nBail out when encountering likely missing turbofish in parser\n\nWhen encountering a likely intended turbofish without `::`, bubble\nup the diagnostic instead of emitting it to allow the parser to recover\nmore gracefully and avoid uneccessary type errors that are likely to be\nwrong.\n\nFix #61329.", "tree": {"sha": "013e7b2b7166773a653dc433ea89f072a34cb683", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/013e7b2b7166773a653dc433ea89f072a34cb683"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fae7bc756e622f5cb6ffa432e914a06942e141ff", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdc0jRCRBK7hj4Ov3rIwAAdHIIADGJiUnGdnqblFzfQz/KtxJM\nBgxHhY27TLb+NnBehm22bpBBmIv0wFbnvBjggw3VOIDuvvybX/3nnJLSRCvU/FRa\n9L+b797tkLR5JynZoGndrr0F/6pz/Dtdwzm2r5NSsKe6UO7qNPBPtYqauqoFlIRu\nyPxcYtsJUHYZE9KcECc8JAolKYeDHokMb5nCEl8Q/urhAan+Frvxq8/qOp6jOINp\neZA9qGKLqJl6xGihQoVFsuvO7lmhzuyc0BqnEskNruaAP85/f3tb6z0KB2509v++\ndvm1D4ou8zZ+VzDXJFy60n6qxS1n6lcRD9FzyLmrxk65FO6f1W1Eq1oUzMX8GsI=\n=6TbW\n-----END PGP SIGNATURE-----\n", "payload": "tree 013e7b2b7166773a653dc433ea89f072a34cb683\nparent da61325bfab3f4292843791b10eeaabf2f835741\nparent dc613c6d055c1b45f7e11e6ee03e4a3095d5b8a9\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1567836369 +0200\ncommitter GitHub <noreply@github.com> 1567836369 +0200\n\nRollup merge of #64192 - estebank:turbofish-madness, r=petrochenkov\n\nBail out when encountering likely missing turbofish in parser\n\nWhen encountering a likely intended turbofish without `::`, bubble\nup the diagnostic instead of emitting it to allow the parser to recover\nmore gracefully and avoid uneccessary type errors that are likely to be\nwrong.\n\nFix #61329.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fae7bc756e622f5cb6ffa432e914a06942e141ff", "html_url": "https://github.com/rust-lang/rust/commit/fae7bc756e622f5cb6ffa432e914a06942e141ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fae7bc756e622f5cb6ffa432e914a06942e141ff/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da61325bfab3f4292843791b10eeaabf2f835741", "url": "https://api.github.com/repos/rust-lang/rust/commits/da61325bfab3f4292843791b10eeaabf2f835741", "html_url": "https://github.com/rust-lang/rust/commit/da61325bfab3f4292843791b10eeaabf2f835741"}, {"sha": "dc613c6d055c1b45f7e11e6ee03e4a3095d5b8a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc613c6d055c1b45f7e11e6ee03e4a3095d5b8a9", "html_url": "https://github.com/rust-lang/rust/commit/dc613c6d055c1b45f7e11e6ee03e4a3095d5b8a9"}], "stats": {"total": 175, "additions": 37, "deletions": 138}, "files": [{"sha": "d050d4f4ce705343ea27a153385c4ec4b36a120e", "filename": "src/libsyntax/parse/diagnostics.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fae7bc756e622f5cb6ffa432e914a06942e141ff/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fae7bc756e622f5cb6ffa432e914a06942e141ff/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs?ref=fae7bc756e622f5cb6ffa432e914a06942e141ff", "patch": "@@ -544,7 +544,7 @@ impl<'a> Parser<'a> {\n     /// Produce an error if comparison operators are chained (RFC #558).\n     /// We only need to check lhs, not rhs, because all comparison ops\n     /// have same precedence and are left-associative\n-    crate fn check_no_chained_comparison(&self, lhs: &Expr, outer_op: &AssocOp) {\n+    crate fn check_no_chained_comparison(&self, lhs: &Expr, outer_op: &AssocOp) -> PResult<'a, ()> {\n         debug_assert!(outer_op.is_comparison(),\n                       \"check_no_chained_comparison: {:?} is not comparison\",\n                       outer_op);\n@@ -563,11 +563,14 @@ impl<'a> Parser<'a> {\n                     err.help(\n                         \"use `::<...>` instead of `<...>` if you meant to specify type arguments\");\n                     err.help(\"or use `(...)` if you meant to specify fn arguments\");\n+                    // These cases cause too many knock-down errors, bail out (#61329).\n+                    return Err(err);\n                 }\n                 err.emit();\n             }\n             _ => {}\n         }\n+        Ok(())\n     }\n \n     crate fn maybe_report_ambiguous_plus("}, {"sha": "e8c8e199fd06b9a463f4f12ac15f5742b24b4948", "filename": "src/libsyntax/parse/parser/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fae7bc756e622f5cb6ffa432e914a06942e141ff/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fae7bc756e622f5cb6ffa432e914a06942e141ff/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs?ref=fae7bc756e622f5cb6ffa432e914a06942e141ff", "patch": "@@ -231,7 +231,7 @@ impl<'a> Parser<'a> {\n \n             self.bump();\n             if op.is_comparison() {\n-                self.check_no_chained_comparison(&lhs, &op);\n+                self.check_no_chained_comparison(&lhs, &op)?;\n             }\n             // Special cases:\n             if op == AssocOp::As {"}, {"sha": "596f515da2f7fc8f0a3ba8a26567c99abda2f676", "filename": "src/test/ui-fulldeps/pprust-expr-roundtrip.rs", "status": "modified", "additions": 25, "deletions": 22, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/fae7bc756e622f5cb6ffa432e914a06942e141ff/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fae7bc756e622f5cb6ffa432e914a06942e141ff/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs?ref=fae7bc756e622f5cb6ffa432e914a06942e141ff", "patch": "@@ -32,13 +32,15 @@ use syntax::print::pprust;\n use syntax::ptr::P;\n \n \n-fn parse_expr(ps: &ParseSess, src: &str) -> P<Expr> {\n+fn parse_expr(ps: &ParseSess, src: &str) -> Option<P<Expr>> {\n     let src_as_string = src.to_string();\n \n-    let mut p = parse::new_parser_from_source_str(ps,\n-                                                  FileName::Custom(src_as_string.clone()),\n-                                                  src_as_string);\n-    p.parse_expr().unwrap()\n+    let mut p = parse::new_parser_from_source_str(\n+        ps,\n+        FileName::Custom(src_as_string.clone()),\n+        src_as_string,\n+    );\n+    p.parse_expr().map_err(|mut e| e.cancel()).ok()\n }\n \n \n@@ -209,22 +211,23 @@ fn run() {\n         let printed = pprust::expr_to_string(&e);\n         println!(\"printed: {}\", printed);\n \n-        let mut parsed = parse_expr(&ps, &printed);\n-\n-        // We want to know if `parsed` is structurally identical to `e`, ignoring trivial\n-        // differences like placement of `Paren`s or the exact ranges of node spans.\n-        // Unfortunately, there is no easy way to make this comparison. Instead, we add `Paren`s\n-        // everywhere we can, then pretty-print. This should give an unambiguous representation of\n-        // each `Expr`, and it bypasses nearly all of the parenthesization logic, so we aren't\n-        // relying on the correctness of the very thing we're testing.\n-        RemoveParens.visit_expr(&mut e);\n-        AddParens.visit_expr(&mut e);\n-        let text1 = pprust::expr_to_string(&e);\n-        RemoveParens.visit_expr(&mut parsed);\n-        AddParens.visit_expr(&mut parsed);\n-        let text2 = pprust::expr_to_string(&parsed);\n-        assert!(text1 == text2,\n-                \"exprs are not equal:\\n  e =      {:?}\\n  parsed = {:?}\",\n-                text1, text2);\n+        // Ignore expressions with chained comparisons that fail to parse\n+        if let Some(mut parsed) = parse_expr(&ps, &printed) {\n+            // We want to know if `parsed` is structurally identical to `e`, ignoring trivial\n+            // differences like placement of `Paren`s or the exact ranges of node spans.\n+            // Unfortunately, there is no easy way to make this comparison. Instead, we add `Paren`s\n+            // everywhere we can, then pretty-print. This should give an unambiguous representation\n+            // of each `Expr`, and it bypasses nearly all of the parenthesization logic, so we\n+            // aren't relying on the correctness of the very thing we're testing.\n+            RemoveParens.visit_expr(&mut e);\n+            AddParens.visit_expr(&mut e);\n+            let text1 = pprust::expr_to_string(&e);\n+            RemoveParens.visit_expr(&mut parsed);\n+            AddParens.visit_expr(&mut parsed);\n+            let text2 = pprust::expr_to_string(&parsed);\n+            assert!(text1 == text2,\n+                    \"exprs are not equal:\\n  e =      {:?}\\n  parsed = {:?}\",\n+                    text1, text2);\n+        }\n     });\n }"}, {"sha": "6902779f33d23c7a3497e96c1a5ba43d5ee7aa30", "filename": "src/test/ui/did_you_mean/issue-40396.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fae7bc756e622f5cb6ffa432e914a06942e141ff/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40396.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fae7bc756e622f5cb6ffa432e914a06942e141ff/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40396.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40396.rs?ref=fae7bc756e622f5cb6ffa432e914a06942e141ff", "patch": "@@ -1,27 +1,16 @@\n fn foo() {\n     (0..13).collect<Vec<i32>>();\n     //~^ ERROR chained comparison\n-    //~| ERROR expected value, found struct `Vec`\n-    //~| ERROR expected value, found builtin type `i32`\n-    //~| ERROR attempted to take value of method `collect`\n }\n \n fn bar() {\n     Vec<i32>::new();\n     //~^ ERROR chained comparison\n-    //~| ERROR expected value, found struct `Vec`\n-    //~| ERROR expected value, found builtin type `i32`\n-    //~| ERROR cannot find function `new` in the crate root\n }\n \n fn qux() {\n     (0..13).collect<Vec<i32>();\n     //~^ ERROR chained comparison\n-    //~| ERROR chained comparison\n-    //~| ERROR expected value, found struct `Vec`\n-    //~| ERROR expected value, found builtin type `i32`\n-    //~| ERROR attempted to take value of method `collect`\n-    //~| ERROR mismatched types\n }\n \n fn main() {}"}, {"sha": "7a08fda27e355c3d6816cfafe251d57443fcc19c", "filename": "src/test/ui/did_you_mean/issue-40396.stderr", "status": "modified", "additions": 3, "deletions": 77, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/fae7bc756e622f5cb6ffa432e914a06942e141ff/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40396.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fae7bc756e622f5cb6ffa432e914a06942e141ff/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40396.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40396.stderr?ref=fae7bc756e622f5cb6ffa432e914a06942e141ff", "patch": "@@ -8,7 +8,7 @@ LL |     (0..13).collect<Vec<i32>>();\n    = help: or use `(...)` if you meant to specify fn arguments\n \n error: chained comparison operators require parentheses\n-  --> $DIR/issue-40396.rs:10:8\n+  --> $DIR/issue-40396.rs:7:8\n    |\n LL |     Vec<i32>::new();\n    |        ^^^^^^^\n@@ -17,87 +17,13 @@ LL |     Vec<i32>::new();\n    = help: or use `(...)` if you meant to specify fn arguments\n \n error: chained comparison operators require parentheses\n-  --> $DIR/issue-40396.rs:18:20\n+  --> $DIR/issue-40396.rs:12:20\n    |\n LL |     (0..13).collect<Vec<i32>();\n    |                    ^^^^^^^^\n    |\n    = help: use `::<...>` instead of `<...>` if you meant to specify type arguments\n    = help: or use `(...)` if you meant to specify fn arguments\n \n-error: chained comparison operators require parentheses\n-  --> $DIR/issue-40396.rs:18:24\n-   |\n-LL |     (0..13).collect<Vec<i32>();\n-   |                        ^^^^^^\n-   |\n-   = help: use `::<...>` instead of `<...>` if you meant to specify type arguments\n-   = help: or use `(...)` if you meant to specify fn arguments\n-\n-error[E0423]: expected value, found struct `Vec`\n-  --> $DIR/issue-40396.rs:2:21\n-   |\n-LL |     (0..13).collect<Vec<i32>>();\n-   |                     ^^^ did you mean `Vec { /* fields */ }`?\n-\n-error[E0423]: expected value, found builtin type `i32`\n-  --> $DIR/issue-40396.rs:2:25\n-   |\n-LL |     (0..13).collect<Vec<i32>>();\n-   |                         ^^^ not a value\n-\n-error[E0423]: expected value, found struct `Vec`\n-  --> $DIR/issue-40396.rs:10:5\n-   |\n-LL |     Vec<i32>::new();\n-   |     ^^^ did you mean `Vec { /* fields */ }`?\n-\n-error[E0423]: expected value, found builtin type `i32`\n-  --> $DIR/issue-40396.rs:10:9\n-   |\n-LL |     Vec<i32>::new();\n-   |         ^^^ not a value\n-\n-error[E0425]: cannot find function `new` in the crate root\n-  --> $DIR/issue-40396.rs:10:15\n-   |\n-LL |     Vec<i32>::new();\n-   |               ^^^ not found in the crate root\n-\n-error[E0423]: expected value, found struct `Vec`\n-  --> $DIR/issue-40396.rs:18:21\n-   |\n-LL |     (0..13).collect<Vec<i32>();\n-   |                     ^^^ did you mean `Vec { /* fields */ }`?\n-\n-error[E0423]: expected value, found builtin type `i32`\n-  --> $DIR/issue-40396.rs:18:25\n-   |\n-LL |     (0..13).collect<Vec<i32>();\n-   |                         ^^^ not a value\n-\n-error[E0615]: attempted to take value of method `collect` on type `std::ops::Range<{integer}>`\n-  --> $DIR/issue-40396.rs:2:13\n-   |\n-LL |     (0..13).collect<Vec<i32>>();\n-   |             ^^^^^^^ help: use parentheses to call the method: `collect()`\n-\n-error[E0615]: attempted to take value of method `collect` on type `std::ops::Range<{integer}>`\n-  --> $DIR/issue-40396.rs:18:13\n-   |\n-LL |     (0..13).collect<Vec<i32>();\n-   |             ^^^^^^^ help: use parentheses to call the method: `collect()`\n-\n-error[E0308]: mismatched types\n-  --> $DIR/issue-40396.rs:18:29\n-   |\n-LL |     (0..13).collect<Vec<i32>();\n-   |                             ^^ expected bool, found ()\n-   |\n-   = note: expected type `bool`\n-              found type `()`\n-\n-error: aborting due to 14 previous errors\n+error: aborting due to 3 previous errors\n \n-Some errors have detailed explanations: E0308, E0423, E0425, E0615.\n-For more information about an error, try `rustc --explain E0308`."}, {"sha": "3dcc0c8f3d496eb03e6cd0a641c264b868014117", "filename": "src/test/ui/parser/require-parens-for-chained-comparison.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fae7bc756e622f5cb6ffa432e914a06942e141ff/src%2Ftest%2Fui%2Fparser%2Frequire-parens-for-chained-comparison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fae7bc756e622f5cb6ffa432e914a06942e141ff/src%2Ftest%2Fui%2Fparser%2Frequire-parens-for-chained-comparison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frequire-parens-for-chained-comparison.rs?ref=fae7bc756e622f5cb6ffa432e914a06942e141ff", "patch": "@@ -11,8 +11,7 @@ fn main() {\n     //~| ERROR: mismatched types\n \n     f<X>();\n-    //~^ ERROR: chained comparison operators require parentheses\n-    //~| ERROR: binary operation `<` cannot be applied to type `fn() {f::<_>}`\n+    //~^ ERROR chained comparison operators require parentheses\n     //~| HELP: use `::<...>` instead of `<...>`\n     //~| HELP: or use `(...)`\n }"}, {"sha": "e927f4c32484ededce5d662205d609a516e8fb77", "filename": "src/test/ui/parser/require-parens-for-chained-comparison.stderr", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/fae7bc756e622f5cb6ffa432e914a06942e141ff/src%2Ftest%2Fui%2Fparser%2Frequire-parens-for-chained-comparison.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fae7bc756e622f5cb6ffa432e914a06942e141ff/src%2Ftest%2Fui%2Fparser%2Frequire-parens-for-chained-comparison.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frequire-parens-for-chained-comparison.stderr?ref=fae7bc756e622f5cb6ffa432e914a06942e141ff", "patch": "@@ -37,17 +37,6 @@ LL |     false == 0 < 2;\n    = note: expected type `bool`\n               found type `{integer}`\n \n-error[E0369]: binary operation `<` cannot be applied to type `fn() {f::<_>}`\n-  --> $DIR/require-parens-for-chained-comparison.rs:13:6\n-   |\n-LL |     f<X>();\n-   |     -^- X\n-   |     |\n-   |     fn() {f::<_>}\n-   |\n-   = note: an implementation of `std::cmp::PartialOrd` might be missing for `fn() {f::<_>}`\n-\n-error: aborting due to 6 previous errors\n+error: aborting due to 5 previous errors\n \n-Some errors have detailed explanations: E0308, E0369.\n-For more information about an error, try `rustc --explain E0308`.\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "c8b0eb684f33dff1c14b7017bf1990b4d66076c0", "filename": "src/test/ui/parser/trait-object-lifetime-parens.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fae7bc756e622f5cb6ffa432e914a06942e141ff/src%2Ftest%2Fui%2Fparser%2Ftrait-object-lifetime-parens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fae7bc756e622f5cb6ffa432e914a06942e141ff/src%2Ftest%2Fui%2Fparser%2Ftrait-object-lifetime-parens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrait-object-lifetime-parens.rs?ref=fae7bc756e622f5cb6ffa432e914a06942e141ff", "patch": "@@ -9,7 +9,6 @@ fn check<'a>() {\n     let _: Box<('a) + Trait>;\n     //~^ ERROR expected type, found `'a`\n     //~| ERROR expected `:`, found `)`\n-    //~| ERROR chained comparison operators require parentheses\n }\n \n fn main() {}"}, {"sha": "319a308c0137c307bddf0b693ccc617fc02d0a1f", "filename": "src/test/ui/parser/trait-object-lifetime-parens.stderr", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fae7bc756e622f5cb6ffa432e914a06942e141ff/src%2Ftest%2Fui%2Fparser%2Ftrait-object-lifetime-parens.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fae7bc756e622f5cb6ffa432e914a06942e141ff/src%2Ftest%2Fui%2Fparser%2Ftrait-object-lifetime-parens.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrait-object-lifetime-parens.stderr?ref=fae7bc756e622f5cb6ffa432e914a06942e141ff", "patch": "@@ -16,15 +16,6 @@ error: expected `:`, found `)`\n LL |     let _: Box<('a) + Trait>;\n    |                   ^ expected `:`\n \n-error: chained comparison operators require parentheses\n-  --> $DIR/trait-object-lifetime-parens.rs:9:15\n-   |\n-LL |     let _: Box<('a) + Trait>;\n-   |               ^^^^^^^^^^^^^^^\n-   |\n-   = help: use `::<...>` instead of `<...>` if you meant to specify type arguments\n-   = help: or use `(...)` if you meant to specify fn arguments\n-\n error: expected type, found `'a`\n   --> $DIR/trait-object-lifetime-parens.rs:9:17\n    |\n@@ -33,5 +24,5 @@ LL |     let _: Box<('a) + Trait>;\n    |         |\n    |         while parsing the type for `_`\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 4 previous errors\n "}]}