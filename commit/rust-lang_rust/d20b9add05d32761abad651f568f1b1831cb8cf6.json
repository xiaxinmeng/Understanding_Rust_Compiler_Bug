{"sha": "d20b9add05d32761abad651f568f1b1831cb8cf6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyMGI5YWRkMDVkMzI3NjFhYmFkNjUxZjU2OGYxYjE4MzFjYjhjZjY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-02T05:25:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-02T05:25:41Z"}, "message": "Auto merge of #85905 - cjgillot:one-trait-map, r=Aaron1011\n\nOnly compute the trait map once\n\nPart of #85153\n\nr? `@Aaron1011`", "tree": {"sha": "3452f7be18991c88ab61cfc1d1cdf73d93ddbce1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3452f7be18991c88ab61cfc1d1cdf73d93ddbce1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d20b9add05d32761abad651f568f1b1831cb8cf6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d20b9add05d32761abad651f568f1b1831cb8cf6", "html_url": "https://github.com/rust-lang/rust/commit/d20b9add05d32761abad651f568f1b1831cb8cf6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d20b9add05d32761abad651f568f1b1831cb8cf6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4f186f0ea443db4aacdd90a2515632c20ccd3fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4f186f0ea443db4aacdd90a2515632c20ccd3fe", "html_url": "https://github.com/rust-lang/rust/commit/c4f186f0ea443db4aacdd90a2515632c20ccd3fe"}, {"sha": "93b25bd2936a92406a10c9aa7d57e764c431fd97", "url": "https://api.github.com/repos/rust-lang/rust/commits/93b25bd2936a92406a10c9aa7d57e764c431fd97", "html_url": "https://github.com/rust-lang/rust/commit/93b25bd2936a92406a10c9aa7d57e764c431fd97"}], "stats": {"total": 97, "additions": 28, "deletions": 69}, "files": [{"sha": "0ff1efd8165eae60cc5d294a41e4f95dee9a82ec", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d20b9add05d32761abad651f568f1b1831cb8cf6/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d20b9add05d32761abad651f568f1b1831cb8cf6/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=d20b9add05d32761abad651f568f1b1831cb8cf6", "patch": "@@ -43,7 +43,7 @@ use rustc_ast::walk_list;\n use rustc_ast::{self as ast, *};\n use rustc_ast_pretty::pprust;\n use rustc_data_structures::captures::Captures;\n-use rustc_data_structures::fx::FxHashSet;\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::{struct_span_err, Applicability};\n use rustc_hir as hir;\n@@ -198,7 +198,7 @@ pub trait ResolverAstLowering {\n \n     fn next_node_id(&mut self) -> NodeId;\n \n-    fn trait_map(&self) -> &NodeMap<Vec<hir::TraitCandidate>>;\n+    fn take_trait_map(&mut self) -> NodeMap<Vec<hir::TraitCandidate>>;\n \n     fn opt_local_def_id(&self, node: NodeId) -> Option<LocalDefId>;\n \n@@ -501,14 +501,13 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         let proc_macros =\n             c.proc_macros.iter().map(|id| self.node_id_to_hir_id[*id].unwrap()).collect();\n \n-        let trait_map = self\n-            .resolver\n-            .trait_map()\n-            .iter()\n-            .filter_map(|(&k, v)| {\n-                self.node_id_to_hir_id.get(k).and_then(|id| id.as_ref()).map(|id| (*id, v.clone()))\n-            })\n-            .collect();\n+        let mut trait_map: FxHashMap<_, FxHashMap<_, _>> = FxHashMap::default();\n+        for (k, v) in self.resolver.take_trait_map().into_iter() {\n+            if let Some(Some(hir_id)) = self.node_id_to_hir_id.get(k) {\n+                let map = trait_map.entry(hir_id.owner).or_default();\n+                map.insert(hir_id.local_id, v.into_boxed_slice());\n+            }\n+        }\n \n         let mut def_id_to_hir_id = IndexVec::default();\n "}, {"sha": "18b352cf3b0b9152f42eb6c43dfd536c92f4e1dd", "filename": "compiler/rustc_data_structures/src/stable_hasher.rs", "status": "modified", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/d20b9add05d32761abad651f568f1b1831cb8cf6/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d20b9add05d32761abad651f568f1b1831cb8cf6/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fstable_hasher.rs?ref=d20b9add05d32761abad651f568f1b1831cb8cf6", "patch": "@@ -550,35 +550,3 @@ pub fn hash_stable_hashmap<HCX, K, V, R, SK, F>(\n     entries.sort_unstable_by(|&(ref sk1, _), &(ref sk2, _)| sk1.cmp(sk2));\n     entries.hash_stable(hcx, hasher);\n }\n-\n-/// A vector container that makes sure that its items are hashed in a stable\n-/// order.\n-#[derive(Debug)]\n-pub struct StableVec<T>(Vec<T>);\n-\n-impl<T> StableVec<T> {\n-    pub fn new(v: Vec<T>) -> Self {\n-        StableVec(v)\n-    }\n-}\n-\n-impl<T> ::std::ops::Deref for StableVec<T> {\n-    type Target = Vec<T>;\n-\n-    fn deref(&self) -> &Vec<T> {\n-        &self.0\n-    }\n-}\n-\n-impl<T, HCX> HashStable<HCX> for StableVec<T>\n-where\n-    T: HashStable<HCX> + ToStableHashKey<HCX>,\n-{\n-    fn hash_stable(&self, hcx: &mut HCX, hasher: &mut StableHasher) {\n-        let StableVec(ref v) = *self;\n-\n-        let mut sorted: Vec<_> = v.iter().map(|x| x.to_stable_hash_key(hcx)).collect();\n-        sorted.sort_unstable();\n-        sorted.hash_stable(hcx, hasher);\n-    }\n-}"}, {"sha": "e9055c9541086af692da936dbe70a89bfe3ce79d", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d20b9add05d32761abad651f568f1b1831cb8cf6/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d20b9add05d32761abad651f568f1b1831cb8cf6/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=d20b9add05d32761abad651f568f1b1831cb8cf6", "patch": "@@ -1,7 +1,7 @@\n // ignore-tidy-filelength\n use crate::def::{CtorKind, DefKind, Res};\n use crate::def_id::DefId;\n-crate use crate::hir_id::HirId;\n+crate use crate::hir_id::{HirId, ItemLocalId};\n use crate::{itemlikevisit, LangItem};\n \n use rustc_ast::util::parser::ExprPrecedence;\n@@ -10,6 +10,7 @@ use rustc_ast::{Attribute, FloatTy, IntTy, Label, LitKind, StrStyle, TraitObject\n pub use rustc_ast::{BorrowKind, ImplPolarity, IsAuto};\n pub use rustc_ast::{CaptureBy, Movability, Mutability};\n use rustc_ast::{InlineAsmOptions, InlineAsmTemplatePiece};\n+use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::{par_for_each_in, Send, Sync};\n use rustc_macros::HashStable_Generic;\n use rustc_span::source_map::Spanned;\n@@ -658,7 +659,9 @@ pub struct Crate<'hir> {\n     /// they are declared in the static array generated by proc_macro_harness.\n     pub proc_macros: Vec<HirId>,\n \n-    pub trait_map: BTreeMap<HirId, Vec<TraitCandidate>>,\n+    /// Map indicating what traits are in scope for places where this\n+    /// is relevant; generated by resolve.\n+    pub trait_map: FxHashMap<LocalDefId, FxHashMap<ItemLocalId, Box<[TraitCandidate]>>>,\n \n     /// Collected attributes from HIR nodes.\n     pub attrs: BTreeMap<HirId, &'hir [Attribute]>,"}, {"sha": "3cc8fc3fe318981fb75561208d5ce5b7831b3949", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d20b9add05d32761abad651f568f1b1831cb8cf6/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d20b9add05d32761abad651f568f1b1831cb8cf6/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=d20b9add05d32761abad651f568f1b1831cb8cf6", "patch": "@@ -1127,8 +1127,7 @@ rustc_queries! {\n         desc { \"computing whether impls specialize one another\" }\n     }\n     query in_scope_traits_map(_: LocalDefId)\n-        -> Option<&'tcx FxHashMap<ItemLocalId, StableVec<TraitCandidate>>> {\n-        eval_always\n+        -> Option<&'tcx FxHashMap<ItemLocalId, Box<[TraitCandidate]>>> {\n         desc { \"traits in scope at a block\" }\n     }\n "}, {"sha": "ef93f4f64d8bc18520f798fd054db5a71b359435", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 6, "deletions": 15, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d20b9add05d32761abad651f568f1b1831cb8cf6/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d20b9add05d32761abad651f568f1b1831cb8cf6/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=d20b9add05d32761abad651f568f1b1831cb8cf6", "patch": "@@ -31,7 +31,7 @@ use rustc_attr as attr;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::profiling::SelfProfilerRef;\n use rustc_data_structures::sharded::{IntoPointer, ShardedHashMap};\n-use rustc_data_structures::stable_hasher::{HashStable, StableHasher, StableVec};\n+use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::steal::Steal;\n use rustc_data_structures::sync::{self, Lock, Lrc, WorkerLocal};\n use rustc_errors::ErrorReported;\n@@ -966,10 +966,6 @@ pub struct GlobalCtxt<'tcx> {\n     /// Resolutions of `extern crate` items produced by resolver.\n     extern_crate_map: FxHashMap<LocalDefId, CrateNum>,\n \n-    /// Map indicating what traits are in scope for places where this\n-    /// is relevant; generated by resolve.\n-    trait_map: FxHashMap<LocalDefId, FxHashMap<ItemLocalId, StableVec<TraitCandidate>>>,\n-\n     /// Export map produced by name resolution.\n     export_map: ExportMap<LocalDefId>,\n \n@@ -1150,12 +1146,6 @@ impl<'tcx> TyCtxt<'tcx> {\n         let common_consts = CommonConsts::new(&interners, &common_types);\n         let cstore = resolutions.cstore;\n \n-        let mut trait_map: FxHashMap<_, FxHashMap<_, _>> = FxHashMap::default();\n-        for (hir_id, v) in krate.trait_map.iter() {\n-            let map = trait_map.entry(hir_id.owner).or_default();\n-            map.insert(hir_id.local_id, StableVec::new(v.to_vec()));\n-        }\n-\n         GlobalCtxt {\n             sess: s,\n             lint_store,\n@@ -1169,7 +1159,6 @@ impl<'tcx> TyCtxt<'tcx> {\n             consts: common_consts,\n             visibilities: resolutions.visibilities,\n             extern_crate_map: resolutions.extern_crate_map,\n-            trait_map,\n             export_map: resolutions.export_map,\n             maybe_unused_trait_imports: resolutions.maybe_unused_trait_imports,\n             maybe_unused_extern_crates: resolutions.maybe_unused_extern_crates,\n@@ -2662,8 +2651,10 @@ impl<'tcx> TyCtxt<'tcx> {\n         struct_lint_level(self.sess, lint, level, src, None, decorate);\n     }\n \n-    pub fn in_scope_traits(self, id: HirId) -> Option<&'tcx StableVec<TraitCandidate>> {\n-        self.in_scope_traits_map(id.owner).and_then(|map| map.get(&id.local_id))\n+    pub fn in_scope_traits(self, id: HirId) -> Option<&'tcx [TraitCandidate]> {\n+        let map = self.in_scope_traits_map(id.owner)?;\n+        let candidates = map.get(&id.local_id)?;\n+        Some(&*candidates)\n     }\n \n     pub fn named_region(self, id: HirId) -> Option<resolve_lifetime::Region> {\n@@ -2793,7 +2784,7 @@ fn ptr_eq<T, U>(t: *const T, u: *const U) -> bool {\n }\n \n pub fn provide(providers: &mut ty::query::Providers) {\n-    providers.in_scope_traits_map = |tcx, id| tcx.gcx.trait_map.get(&id);\n+    providers.in_scope_traits_map = |tcx, id| tcx.hir_crate(()).trait_map.get(&id);\n     providers.module_exports = |tcx, id| tcx.gcx.export_map.get(&id).map(|v| &v[..]);\n     providers.crate_name = |tcx, id| {\n         assert_eq!(id, LOCAL_CRATE);"}, {"sha": "a5b540dcb70cd55438db56ecf94148789938fd50", "filename": "compiler/rustc_middle/src/ty/query/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d20b9add05d32761abad651f568f1b1831cb8cf6/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d20b9add05d32761abad651f568f1b1831cb8cf6/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fmod.rs?ref=d20b9add05d32761abad651f568f1b1831cb8cf6", "patch": "@@ -34,7 +34,6 @@ use crate::ty::subst::{GenericArg, SubstsRef};\n use crate::ty::util::AlwaysRequiresDrop;\n use crate::ty::{self, AdtSizedConstraint, CrateInherentImpls, ParamEnvAnd, Ty, TyCtxt};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexMap};\n-use rustc_data_structures::stable_hasher::StableVec;\n use rustc_data_structures::steal::Steal;\n use rustc_data_structures::svh::Svh;\n use rustc_data_structures::sync::Lrc;"}, {"sha": "408d9b239216541f20f35e6543fca12b089733e0", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d20b9add05d32761abad651f568f1b1831cb8cf6/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d20b9add05d32761abad651f568f1b1831cb8cf6/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=d20b9add05d32761abad651f568f1b1831cb8cf6", "patch": "@@ -1959,7 +1959,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                 if ns == ValueNS {\n                     let item_name = path.last().unwrap().ident;\n                     let traits = self.traits_in_scope(item_name, ns);\n-                    self.r.trait_map.insert(id, traits);\n+                    self.r.trait_map.as_mut().unwrap().insert(id, traits);\n                 }\n \n                 if PrimTy::from_name(path[0].ident.name).is_some() {\n@@ -2435,12 +2435,12 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                 // the field name so that we can do some nice error reporting\n                 // later on in typeck.\n                 let traits = self.traits_in_scope(ident, ValueNS);\n-                self.r.trait_map.insert(expr.id, traits);\n+                self.r.trait_map.as_mut().unwrap().insert(expr.id, traits);\n             }\n             ExprKind::MethodCall(ref segment, ..) => {\n                 debug!(\"(recording candidate traits for expr) recording traits for {}\", expr.id);\n                 let traits = self.traits_in_scope(segment.ident, ValueNS);\n-                self.r.trait_map.insert(expr.id, traits);\n+                self.r.trait_map.as_mut().unwrap().insert(expr.id, traits);\n             }\n             _ => {\n                 // Nothing to do."}, {"sha": "86431b44fd680d0d1d18970aeb277fcbc9c3fff5", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d20b9add05d32761abad651f568f1b1831cb8cf6/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d20b9add05d32761abad651f568f1b1831cb8cf6/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=d20b9add05d32761abad651f568f1b1831cb8cf6", "patch": "@@ -909,7 +909,7 @@ pub struct Resolver<'a> {\n     /// `CrateNum` resolutions of `extern crate` items.\n     extern_crate_map: FxHashMap<LocalDefId, CrateNum>,\n     export_map: ExportMap<LocalDefId>,\n-    trait_map: NodeMap<Vec<TraitCandidate>>,\n+    trait_map: Option<NodeMap<Vec<TraitCandidate>>>,\n \n     /// A map from nodes to anonymous modules.\n     /// Anonymous modules are pseudo-modules that are implicitly created around items\n@@ -1138,8 +1138,8 @@ impl ResolverAstLowering for Resolver<'_> {\n         self.next_node_id()\n     }\n \n-    fn trait_map(&self) -> &NodeMap<Vec<TraitCandidate>> {\n-        &self.trait_map\n+    fn take_trait_map(&mut self) -> NodeMap<Vec<TraitCandidate>> {\n+        std::mem::replace(&mut self.trait_map, None).unwrap()\n     }\n \n     fn opt_local_def_id(&self, node: NodeId) -> Option<LocalDefId> {\n@@ -1286,7 +1286,7 @@ impl<'a> Resolver<'a> {\n             label_res_map: Default::default(),\n             extern_crate_map: Default::default(),\n             export_map: FxHashMap::default(),\n-            trait_map: Default::default(),\n+            trait_map: Some(NodeMap::default()),\n             underscore_disambiguator: 0,\n             empty_module,\n             module_map,"}]}