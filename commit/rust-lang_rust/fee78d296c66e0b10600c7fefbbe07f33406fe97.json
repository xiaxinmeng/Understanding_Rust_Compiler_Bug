{"sha": "fee78d296c66e0b10600c7fefbbe07f33406fe97", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlZTc4ZDI5NmM2NmUwYjEwNjAwYzdmZWZiYmUwN2YzMzQwNmZlOTc=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-06-22T04:30:16Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-06-22T04:30:16Z"}, "message": "Port resources to classes in libcore", "tree": {"sha": "da76576b422f5bd82cc091576a9f15fdab95563d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da76576b422f5bd82cc091576a9f15fdab95563d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fee78d296c66e0b10600c7fefbbe07f33406fe97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fee78d296c66e0b10600c7fefbbe07f33406fe97", "html_url": "https://github.com/rust-lang/rust/commit/fee78d296c66e0b10600c7fefbbe07f33406fe97", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fee78d296c66e0b10600c7fefbbe07f33406fe97/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8710de5fffdc45c19ccc27ad8ed98c1ee51c025", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8710de5fffdc45c19ccc27ad8ed98c1ee51c025", "html_url": "https://github.com/rust-lang/rust/commit/b8710de5fffdc45c19ccc27ad8ed98c1ee51c025"}], "stats": {"total": 69, "additions": 45, "deletions": 24}, "files": [{"sha": "df1cf16781dbb9dd8ee1c09b682e2d7ffa2d00a8", "filename": "src/libcore/io.rs", "status": "modified", "additions": 23, "deletions": 11, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/fee78d296c66e0b10600c7fefbbe07f33406fe97/src%2Flibcore%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fee78d296c66e0b10600c7fefbbe07f33406fe97/src%2Flibcore%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fio.rs?ref=fee78d296c66e0b10600c7fefbbe07f33406fe97", "patch": "@@ -224,7 +224,11 @@ impl <T: reader, C> of reader for {base: T, cleanup: C} {\n     fn tell() -> uint { self.base.tell() }\n }\n \n-resource FILE_res(f: *libc::FILE) { libc::fclose(f); }\n+class FILE_res {\n+    let f: *libc::FILE;\n+    new(f: *libc::FILE) { self.f = f; }\n+    drop { libc::fclose(self.f); }\n+}\n \n fn FILE_reader(f: *libc::FILE, cleanup: bool) -> reader {\n     if cleanup {\n@@ -383,7 +387,11 @@ impl of writer for fd_t {\n     fn flush() -> int { 0 }\n }\n \n-resource fd_res(fd: fd_t) { libc::close(fd); }\n+class fd_res {\n+    let fd: fd_t;\n+    new(fd: fd_t) { self.fd = fd; }\n+    drop { libc::close(self.fd); }\n+}\n \n fn fd_writer(fd: fd_t, cleanup: bool) -> writer {\n     if cleanup {\n@@ -695,13 +703,17 @@ mod fsync {\n     }\n \n \n-    // Resource of artifacts that need to fsync on destruction\n-    resource res<t>(arg: arg<t>) {\n-        alt arg.opt_level {\n-          option::none { }\n-          option::some(level) {\n-            // fail hard if not succesful\n-            assert(arg.fsync_fn(arg.val, level) != -1);\n+    // Artifacts that need to fsync on destruction\n+    class res<t> {\n+        let arg: arg<t>;\n+        new(-arg: arg<t>) { self.arg <- arg; }\n+        drop {\n+          alt self.arg.opt_level {\n+            option::none { }\n+            option::some(level) {\n+              // fail hard if not succesful\n+              assert(self.arg.fsync_fn(self.arg.val, level) != -1);\n+            }\n           }\n         }\n     }\n@@ -718,7 +730,7 @@ mod fsync {\n     fn FILE_res_sync(&&file: FILE_res, opt_level: option<level>,\n                   blk: fn(&&res<*libc::FILE>)) {\n         blk(res({\n-            val: *file, opt_level: opt_level,\n+            val: file.f, opt_level: opt_level,\n             fsync_fn: fn@(&&file: *libc::FILE, l: level) -> int {\n                 ret os::fsync_fd(libc::fileno(file), l) as int;\n             }\n@@ -729,7 +741,7 @@ mod fsync {\n     fn fd_res_sync(&&fd: fd_res, opt_level: option<level>,\n                    blk: fn(&&res<fd_t>)) {\n         blk(res({\n-            val: *fd, opt_level: opt_level,\n+            val: fd.fd, opt_level: opt_level,\n             fsync_fn: fn@(&&fd: fd_t, l: level) -> int {\n                 ret os::fsync_fd(fd, l) as int;\n             }"}, {"sha": "723059060103326cd499081d5d61648e882e2839", "filename": "src/libcore/option.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fee78d296c66e0b10600c7fefbbe07f33406fe97/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fee78d296c66e0b10600c7fefbbe07f33406fe97/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=fee78d296c66e0b10600c7fefbbe07f33406fe97", "patch": "@@ -140,8 +140,10 @@ fn test_unwrap_str() {\n \n #[test]\n fn test_unwrap_resource() {\n-    resource r(i: @mut int) {\n-        *i += 1;\n+    class r {\n+       let i: @mut int;\n+       new(i: @mut int) { self.i = i; }\n+       drop { *(self.i) += 1; }\n     }\n     let i = @mut 0;\n     {"}, {"sha": "53e8e4017ba29c2077ec5afe279f3d21f3cdedeb", "filename": "src/libcore/sys.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/fee78d296c66e0b10600c7fefbbe07f33406fe97/src%2Flibcore%2Fsys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fee78d296c66e0b10600c7fefbbe07f33406fe97/src%2Flibcore%2Fsys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsys.rs?ref=fee78d296c66e0b10600c7fefbbe07f33406fe97", "patch": "@@ -85,16 +85,20 @@ pure fn log_str<T>(t: T) -> str {\n     }\n }\n \n-resource lock_and_signal(lock: rust_cond_lock) {\n-    rustrt::rust_destroy_cond_lock(lock);\n+class lock_and_signal {\n+    let lock: rust_cond_lock;\n+    new(lock: rust_cond_lock) { self.lock = lock; }\n+    drop { rustrt::rust_destroy_cond_lock(self.lock); }\n }\n \n enum condition {\n     condition_(rust_cond_lock)\n }\n \n-resource unlock(lock: rust_cond_lock) {\n-    rustrt::rust_unlock_cond_lock(lock);\n+class unlock {\n+    let lock: rust_cond_lock;\n+    new(lock: rust_cond_lock) { self.lock = lock; }\n+    drop { rustrt::rust_unlock_cond_lock(self.lock); }\n }\n \n fn create_lock() -> lock_and_signal {\n@@ -103,15 +107,15 @@ fn create_lock() -> lock_and_signal {\n \n impl methods for lock_and_signal {\n     fn lock<T>(f: fn() -> T) -> T {\n-        rustrt::rust_lock_cond_lock(*self);\n-        let _r = unlock(*self);\n+        rustrt::rust_lock_cond_lock(self.lock);\n+        let _r = unlock(self.lock);\n         f()\n     }\n \n     fn lock_cond<T>(f: fn(condition) -> T) -> T {\n-        rustrt::rust_lock_cond_lock(*self);\n-        let _r = unlock(*self);\n-        f(condition_(*self))\n+        rustrt::rust_lock_cond_lock(self.lock);\n+        let _r = unlock(self.lock);\n+        f(condition_(self.lock))\n     }\n }\n "}, {"sha": "2a746d76127149ed45098f033052931ddc4b4ac5", "filename": "src/libcore/task.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fee78d296c66e0b10600c7fefbbe07f33406fe97/src%2Flibcore%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fee78d296c66e0b10600c7fefbbe07f33406fe97/src%2Flibcore%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask.rs?ref=fee78d296c66e0b10600c7fefbbe07f33406fe97", "patch": "@@ -482,9 +482,12 @@ Temporarily make the task unkillable\n \n \"]\n unsafe fn unkillable(f: fn()) {\n-    resource allow_failure(_i: ()) {\n-        rustrt::rust_task_allow_kill();\n+    class allow_failure {\n+      let i: (); // since a class must have at least one field\n+      new(_i: ()) { self.i = (); }\n+      drop { rustrt::rust_task_allow_kill(); }\n     }\n+\n     let _allow_failure = allow_failure(());\n     rustrt::rust_task_inhibit_kill();\n     f();"}]}