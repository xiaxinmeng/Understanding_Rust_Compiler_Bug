{"sha": "6f90f583b4795ea3d90f83f9ba413cf5974dd7f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmOTBmNTgzYjQ3OTVlYTNkOTBmODNmOWJhNDEzY2Y1OTc0ZGQ3ZjM=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2018-01-31T07:27:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-01-31T07:27:53Z"}, "message": "Merge pull request #2410 from gnieto/task/questionMarkIso\n\nQuestion mark lint", "tree": {"sha": "de4e997ea07c124ed1dd63dfd4289d3d8b48d037", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de4e997ea07c124ed1dd63dfd4289d3d8b48d037"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f90f583b4795ea3d90f83f9ba413cf5974dd7f3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJacW/5CRBK7hj4Ov3rIwAAdHIIAIhJA0jID7qwfEu+u+JQBYAq\n2jPKukI+mQ9smFUwWVue/AJ2Ny7dObs+BeqjK+x8R5WYSfY7Go/gXZkJLnQEirhW\n4j/DCPDGXb/BQ0KJtTk60MyKLqJpw2o2CmRIHxZdKcx4dccKtvLdsXEXeFShtnJn\nYHKNgZt5xQD9b6LpSPirLzwBdzv5c4uFGkNGFqhNiJgAsxquwQiv5GwErNKHIhQ9\nkxBvs7LEk02iHqIJJ1PU5yaN3av52lWTlaNpHWJxbu/uQCSQMxSRjCPdC3QR4eMj\nW7RCqD3gud9YQhll4RCIZkoU/ZV40nb4DK2QVehmf2dxREoWHQdfVLCyVkm+nLk=\n=qUWG\n-----END PGP SIGNATURE-----\n", "payload": "tree de4e997ea07c124ed1dd63dfd4289d3d8b48d037\nparent ee8d32850d1c32aaa593ca9e42e127cfa88ec9c9\nparent 05ed42193055b6c01cf31f82e782e313e807880e\nauthor Oliver Schneider <oli-obk@users.noreply.github.com> 1517383673 +0100\ncommitter GitHub <noreply@github.com> 1517383673 +0100\n\nMerge pull request #2410 from gnieto/task/questionMarkIso\n\nQuestion mark lint"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f90f583b4795ea3d90f83f9ba413cf5974dd7f3", "html_url": "https://github.com/rust-lang/rust/commit/6f90f583b4795ea3d90f83f9ba413cf5974dd7f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f90f583b4795ea3d90f83f9ba413cf5974dd7f3/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee8d32850d1c32aaa593ca9e42e127cfa88ec9c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee8d32850d1c32aaa593ca9e42e127cfa88ec9c9", "html_url": "https://github.com/rust-lang/rust/commit/ee8d32850d1c32aaa593ca9e42e127cfa88ec9c9"}, {"sha": "05ed42193055b6c01cf31f82e782e313e807880e", "url": "https://api.github.com/repos/rust-lang/rust/commits/05ed42193055b6c01cf31f82e782e313e807880e", "html_url": "https://github.com/rust-lang/rust/commit/05ed42193055b6c01cf31f82e782e313e807880e"}], "stats": {"total": 216, "additions": 216, "deletions": 0}, "files": [{"sha": "287595a6e8a99606313a6a3db9f2097a68b20eae", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f90f583b4795ea3d90f83f9ba413cf5974dd7f3/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f90f583b4795ea3d90f83f9ba413cf5974dd7f3/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=6f90f583b4795ea3d90f83f9ba413cf5974dd7f3", "patch": "@@ -89,6 +89,7 @@ pub mod doc;\n pub mod double_comparison;\n pub mod double_parens;\n pub mod drop_forget_ref;\n+pub mod question_mark;\n pub mod else_if_without_else;\n pub mod empty_enum;\n pub mod entry;\n@@ -371,6 +372,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n     reg.register_late_lint_pass(box replace_consts::ReplaceConsts);\n     reg.register_late_lint_pass(box types::UnitArg);\n     reg.register_late_lint_pass(box double_comparison::DoubleComparisonPass);\n+    reg.register_late_lint_pass(box question_mark::QuestionMarkPass);\n \n     reg.register_lint_group(\"clippy_restrictions\", vec![\n         arithmetic::FLOAT_ARITHMETIC,"}, {"sha": "4c01899936b5001d78293a265f59ec10a56e8def", "filename": "clippy_lints/src/question_mark.rs", "status": "added", "additions": 138, "deletions": 0, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/6f90f583b4795ea3d90f83f9ba413cf5974dd7f3/clippy_lints%2Fsrc%2Fquestion_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f90f583b4795ea3d90f83f9ba413cf5974dd7f3/clippy_lints%2Fsrc%2Fquestion_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fquestion_mark.rs?ref=6f90f583b4795ea3d90f83f9ba413cf5974dd7f3", "patch": "@@ -0,0 +1,138 @@\n+use rustc::lint::*;\n+use rustc::hir::*;\n+use rustc::hir::def::Def;\n+use utils::sugg::Sugg;\n+use syntax::ptr::P;\n+\n+use utils::{match_def_path, match_type, span_lint_and_then};\n+use utils::paths::*;\n+\n+/// **What it does:** Checks for expressions that could be replaced by the question mark operator\n+///\n+/// **Why is this bad?** Question mark usage is more idiomatic\n+///\n+/// **Known problems:** None\n+///\n+/// **Example:**\n+/// ```rust\n+/// if option.is_none() {\n+///     return None;\n+/// }\n+/// ```\n+///\n+/// Could be written:\n+///\n+/// ```rust\n+/// option?;\n+/// ```\n+declare_lint!{\n+    pub QUESTION_MARK,\n+    Warn,\n+    \"checks for expressions that could be replaced by the question mark operator\"\n+}\n+\n+#[derive(Copy, Clone)]\n+pub struct QuestionMarkPass;\n+\n+impl LintPass for QuestionMarkPass {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(QUESTION_MARK)\n+    }\n+}\n+\n+impl QuestionMarkPass {\n+    /// Check if the given expression on the given context matches the following structure:\n+    ///\n+    /// ```\n+    /// if option.is_none() {\n+    ///    return None;\n+    /// }\n+    /// ```\n+    ///\n+    /// If it matches, it will suggest to use the question mark operator instead\n+    fn check_is_none_and_early_return_none(cx: &LateContext, expr: &Expr) {\n+        if_chain! {\n+            if let ExprIf(ref if_expr, ref body, _) = expr.node;\n+            if let ExprMethodCall(ref segment, _, ref args) = if_expr.node;\n+            if segment.name == \"is_none\";\n+            if Self::expression_returns_none(cx, &body);\n+            if let Some(subject) = args.get(0);\n+            if Self::is_option(cx, subject);\n+\n+            then {\n+                span_lint_and_then(\n+                    cx,\n+                    QUESTION_MARK,\n+                    expr.span,\n+                    &format!(\"this block may be rewritten with the `?` operator\"),\n+                    |db| {\n+                        let receiver_str = &Sugg::hir(cx, subject, \"..\");\n+\n+                        db.span_suggestion(\n+                            expr.span,\n+                            \"replace_it_with\",\n+                            format!(\"{}?;\", receiver_str),\n+                        );\n+                    }\n+                )\n+            }\n+        }\n+    }\n+\n+    fn is_option(cx: &LateContext, expression: &Expr) -> bool {\n+        let expr_ty = cx.tables.expr_ty(expression);\n+\n+        return match_type(cx, expr_ty, &OPTION);\n+    }\n+\n+    fn expression_returns_none(cx: &LateContext, expression: &Expr) -> bool {\n+        match expression.node {\n+            ExprBlock(ref block) => {\n+                if let Some(return_expression) = Self::return_expression(block) {\n+                    return Self::expression_returns_none(cx, &return_expression);\n+                }\n+\n+                false\n+            },\n+            ExprRet(Some(ref expr)) => {\n+                Self::expression_returns_none(cx, expr)\n+            },\n+            ExprPath(ref qp) => {\n+                if let Def::VariantCtor(def_id, _) = cx.tables.qpath_def(qp, expression.hir_id) {\n+                    return match_def_path(cx.tcx, def_id,  &OPTION_NONE);\n+                }\n+\n+                false\n+            },\n+            _ => false\n+        }\n+    }\n+\n+    fn return_expression(block: &Block) -> Option<P<Expr>> {\n+        // Check if last expression is a return statement. Then, return the expression\n+        if_chain! {\n+            if block.stmts.len() == 1;\n+            if let Some(expr) = block.stmts.iter().last();\n+            if let StmtSemi(ref expr, _) = expr.node;\n+            if let ExprRet(ref ret_expr) = expr.node;\n+            if let &Some(ref ret_expr) = ret_expr;\n+\n+            then {\n+                return Some(ret_expr.clone());\n+            }\n+        }\n+\n+        // Check if the block has an implicit return expression\n+        if let Some(ref ret_expr) = block.expr {\n+            return Some(ret_expr.clone());\n+        }\n+\n+        return None;\n+    }\n+}\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for QuestionMarkPass {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n+        Self::check_is_none_and_early_return_none(cx, expr);\n+    }\n+}"}, {"sha": "369b868a50d007bfeead1e96ac0442f90b11b01d", "filename": "tests/ui/question_mark.rs", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/6f90f583b4795ea3d90f83f9ba413cf5974dd7f3/tests%2Fui%2Fquestion_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f90f583b4795ea3d90f83f9ba413cf5974dd7f3/tests%2Fui%2Fquestion_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fquestion_mark.rs?ref=6f90f583b4795ea3d90f83f9ba413cf5974dd7f3", "patch": "@@ -0,0 +1,54 @@\n+fn some_func(a: Option<u32>) -> Option<u32> {\n+\tif a.is_none() {\n+\t\treturn None\n+\t}\n+\n+\ta\n+}\n+\n+pub enum SeemsOption<T> {\n+    Some(T),\n+    None\n+}\n+\n+impl<T> SeemsOption<T> {\n+    pub fn is_none(&self) -> bool {\n+        match *self {\n+            SeemsOption::None => true,\n+            SeemsOption::Some(_) => false,\n+        }\n+    }\n+}\n+\n+fn returns_something_similar_to_option(a: SeemsOption<u32>) -> SeemsOption<u32> {\n+    if a.is_none() {\n+        return SeemsOption::None;\n+    }\n+\n+    a\n+}\n+\n+pub struct SomeStruct {\n+\tpub opt: Option<u32>,\n+}\n+\n+impl SomeStruct {\n+\tpub fn func(&self) -> Option<u32> {\n+\t\tif (self.opt).is_none() {\n+\t\t\treturn None;\n+\t\t}\n+\n+\t\tself.opt\n+\t}\n+}\n+\n+fn main() {\n+\tsome_func(Some(42));\n+\tsome_func(None);\n+\n+\tlet some_struct = SomeStruct { opt: Some(54) };\n+\tsome_struct.func();\n+\n+    let so = SeemsOption::Some(45);\n+    returns_something_similar_to_option(so);\n+}"}, {"sha": "e97b1869824fcb77895c72402a6a7ff01b0894b6", "filename": "tests/ui/question_mark.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6f90f583b4795ea3d90f83f9ba413cf5974dd7f3/tests%2Fui%2Fquestion_mark.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6f90f583b4795ea3d90f83f9ba413cf5974dd7f3/tests%2Fui%2Fquestion_mark.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fquestion_mark.stderr?ref=6f90f583b4795ea3d90f83f9ba413cf5974dd7f3", "patch": "@@ -0,0 +1,22 @@\n+error: this block may be rewritten with the `?` operator\n+ --> $DIR/question_mark.rs:2:2\n+  |\n+2 |       if a.is_none() {\n+  |  _____^\n+3 | |         return None\n+4 | |     }\n+  | |_____^ help: replace_it_with: `a?;`\n+  |\n+  = note: `-D question-mark` implied by `-D warnings`\n+\n+error: this block may be rewritten with the `?` operator\n+  --> $DIR/question_mark.rs:37:3\n+   |\n+37 |           if (self.opt).is_none() {\n+   |  _________^\n+38 | |             return None;\n+39 | |         }\n+   | |_________^ help: replace_it_with: `(self.opt)?;`\n+\n+error: aborting due to 2 previous errors\n+"}]}