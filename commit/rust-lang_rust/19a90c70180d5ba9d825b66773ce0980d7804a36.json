{"sha": "19a90c70180d5ba9d825b66773ce0980d7804a36", "node_id": "C_kwDOAAsO6NoAKDE5YTkwYzcwMTgwZDViYTlkODI1YjY2NzczY2UwOTgwZDc4MDRhMzY", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-04-03T21:21:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-03T21:21:42Z"}, "message": "Rollup merge of #95553 - jam1garner:naked-function-compile-error, r=tmiasko\n\nDon't emit non-asm contents error for naked function composed of errors\n\n## Motivation\n\nFor naked functions an error is emitted when they are composed of anything other than a single asm!() block. However, this error triggers in a couple situations in which it adds no additional information or is actively misleading.\n\nOne example is if you do have an asm!() block but simply one with a syntax error:\n```rust\n#[naked]\nunsafe extern \"C\" fn compiler_errors() {\n    asm!(invalid_syntax)\n}\n```\n\nThis results in two errors, one for the syntax error itself and another telling you that you need an asm block in your function:\n\n```rust\nerror[E0787]: naked functions must contain a single asm block\n --> src/main.rs:6:1\n  |\n6 | / unsafe extern \"C\" fn naked_compile_error() {\n7 | |     asm!(blah)\n8 | | }\n  | |_^\n```\n\nThis issue also comes up when [utilizing `compile_error!()` for improving your diagnostics](https://twitter.com/steveklabnik/status/1509538243020218372), such as raising a compiler error when compiling for an unsupported target.\n\n## Implementation\n\nThe rules this PR implements are as follows:\n\n1. If any non-erroneous  non-asm statement is included, an error will still occur\n2. If multiple asm statements are included, an error will still occur\n3. If 0 or 1 asm statements are present, as well as any non-zero number of erroneous statements, then this error will *not* be raised as it is likely either redundant or incorrect\n\nThe rule of thumb is effectively \"if an error is present and its correction could change things, don't raise an error\".", "tree": {"sha": "0cc0b429c73cf0e4fbe9007634e69e9f85f5d0fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0cc0b429c73cf0e4fbe9007634e69e9f85f5d0fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19a90c70180d5ba9d825b66773ce0980d7804a36", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiSg/mCRBK7hj4Ov3rIwAAJ0QIAJdbrMGyK6G04l2i2VGe74KX\n5nnAUdjpVvkmto1CwOeT2/Y+QCz6sSoLjr4cnPW4Ud7rUxZ6PTiYtaXXgYJq66Lx\nLj8rq/HQ+RX10cmzSfqomQNqOswMJ9LPDnEJXdhnQMoLeJHii/pS2xr1Q9TonvWc\nsznFRWB6YueyCvp+KdmxBKqUOeEcTzbTzjFz6hArCX5oXh+MJ+6Nz0dzqyKcERlg\nIPX76B/+u8sq+bgl8CumoUi8P1puHhK4VzEenAjHw0ik/J0DwdJCs6dHBhjwD6gv\nskVaJMyPEpGCJwt8nd8xQAfO61uX8dgrNujvJP4i367QcvGJsHNppkBzV64BJJA=\n=IwcD\n-----END PGP SIGNATURE-----\n", "payload": "tree 0cc0b429c73cf0e4fbe9007634e69e9f85f5d0fd\nparent 796bc7e9aafd3592063a485f9abed0bb65f01ba8\nparent bf26d87df669d706c7897ca168c04bdeefb78bc5\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1649020902 +0200\ncommitter GitHub <noreply@github.com> 1649020902 +0200\n\nRollup merge of #95553 - jam1garner:naked-function-compile-error, r=tmiasko\n\nDon't emit non-asm contents error for naked function composed of errors\n\n## Motivation\n\nFor naked functions an error is emitted when they are composed of anything other than a single asm!() block. However, this error triggers in a couple situations in which it adds no additional information or is actively misleading.\n\nOne example is if you do have an asm!() block but simply one with a syntax error:\n```rust\n#[naked]\nunsafe extern \"C\" fn compiler_errors() {\n    asm!(invalid_syntax)\n}\n```\n\nThis results in two errors, one for the syntax error itself and another telling you that you need an asm block in your function:\n\n```rust\nerror[E0787]: naked functions must contain a single asm block\n --> src/main.rs:6:1\n  |\n6 | / unsafe extern \"C\" fn naked_compile_error() {\n7 | |     asm!(blah)\n8 | | }\n  | |_^\n```\n\nThis issue also comes up when [utilizing `compile_error!()` for improving your diagnostics](https://twitter.com/steveklabnik/status/1509538243020218372), such as raising a compiler error when compiling for an unsupported target.\n\n## Implementation\n\nThe rules this PR implements are as follows:\n\n1. If any non-erroneous  non-asm statement is included, an error will still occur\n2. If multiple asm statements are included, an error will still occur\n3. If 0 or 1 asm statements are present, as well as any non-zero number of erroneous statements, then this error will *not* be raised as it is likely either redundant or incorrect\n\nThe rule of thumb is effectively \"if an error is present and its correction could change things, don't raise an error\".\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19a90c70180d5ba9d825b66773ce0980d7804a36", "html_url": "https://github.com/rust-lang/rust/commit/19a90c70180d5ba9d825b66773ce0980d7804a36", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19a90c70180d5ba9d825b66773ce0980d7804a36/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "796bc7e9aafd3592063a485f9abed0bb65f01ba8", "url": "https://api.github.com/repos/rust-lang/rust/commits/796bc7e9aafd3592063a485f9abed0bb65f01ba8", "html_url": "https://github.com/rust-lang/rust/commit/796bc7e9aafd3592063a485f9abed0bb65f01ba8"}, {"sha": "bf26d87df669d706c7897ca168c04bdeefb78bc5", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf26d87df669d706c7897ca168c04bdeefb78bc5", "html_url": "https://github.com/rust-lang/rust/commit/bf26d87df669d706c7897ca168c04bdeefb78bc5"}], "stats": {"total": 64, "additions": 60, "deletions": 4}, "files": [{"sha": "af78fd5a6f2120b435f428dc755d8698eedbfabb", "filename": "compiler/rustc_passes/src/naked_functions.rs", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/19a90c70180d5ba9d825b66773ce0980d7804a36/compiler%2Frustc_passes%2Fsrc%2Fnaked_functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19a90c70180d5ba9d825b66773ce0980d7804a36/compiler%2Frustc_passes%2Fsrc%2Fnaked_functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fnaked_functions.rs?ref=19a90c70180d5ba9d825b66773ce0980d7804a36", "patch": "@@ -147,7 +147,7 @@ impl<'tcx> Visitor<'tcx> for CheckParameters<'tcx> {\n fn check_asm<'tcx>(tcx: TyCtxt<'tcx>, body: &'tcx hir::Body<'tcx>, fn_span: Span) {\n     let mut this = CheckInlineAssembly { tcx, items: Vec::new() };\n     this.visit_body(body);\n-    if let [(ItemKind::Asm, _)] = this.items[..] {\n+    if let [(ItemKind::Asm | ItemKind::Err, _)] = this.items[..] {\n         // Ok.\n     } else {\n         let mut diag = struct_span_err!(\n@@ -156,19 +156,33 @@ fn check_asm<'tcx>(tcx: TyCtxt<'tcx>, body: &'tcx hir::Body<'tcx>, fn_span: Span\n             E0787,\n             \"naked functions must contain a single asm block\"\n         );\n+\n+        let mut must_show_error = false;\n         let mut has_asm = false;\n+        let mut has_err = false;\n         for &(kind, span) in &this.items {\n             match kind {\n                 ItemKind::Asm if has_asm => {\n+                    must_show_error = true;\n                     diag.span_label(span, \"multiple asm blocks are unsupported in naked functions\");\n                 }\n                 ItemKind::Asm => has_asm = true,\n                 ItemKind::NonAsm => {\n+                    must_show_error = true;\n                     diag.span_label(span, \"non-asm is unsupported in naked functions\");\n                 }\n+                ItemKind::Err => has_err = true,\n             }\n         }\n-        diag.emit();\n+\n+        // If the naked function only contains a single asm block and a non-zero number of\n+        // errors, then don't show an additional error. This allows for appending/prepending\n+        // `compile_error!(\"...\")` statements and reduces error noise.\n+        if must_show_error || !has_err {\n+            diag.emit();\n+        } else {\n+            diag.cancel();\n+        }\n     }\n }\n \n@@ -181,6 +195,7 @@ struct CheckInlineAssembly<'tcx> {\n enum ItemKind {\n     Asm,\n     NonAsm,\n+    Err,\n }\n \n impl<'tcx> CheckInlineAssembly<'tcx> {\n@@ -222,9 +237,13 @@ impl<'tcx> CheckInlineAssembly<'tcx> {\n                 self.check_inline_asm(asm, span);\n             }\n \n-            ExprKind::DropTemps(..) | ExprKind::Block(..) | ExprKind::Err => {\n+            ExprKind::DropTemps(..) | ExprKind::Block(..) => {\n                 hir::intravisit::walk_expr(self, expr);\n             }\n+\n+            ExprKind::Err => {\n+                self.items.push((ItemKind::Err, span));\n+            }\n         }\n     }\n "}, {"sha": "2a57afa1a6a6ed6387d739d725275853c9e3a6c0", "filename": "src/test/ui/asm/naked-functions.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/19a90c70180d5ba9d825b66773ce0980d7804a36/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19a90c70180d5ba9d825b66773ce0980d7804a36/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.rs?ref=19a90c70180d5ba9d825b66773ce0980d7804a36", "patch": "@@ -196,3 +196,22 @@ pub unsafe extern \"C\" fn inline_never() {\n pub unsafe extern \"C\" fn inline_all() {\n     asm!(\"\", options(noreturn));\n }\n+\n+#[naked]\n+pub unsafe extern \"C\" fn allow_compile_error(a: u32) -> u32 {\n+    compile_error!(\"this is a user specified error\")\n+    //~^ ERROR this is a user specified error\n+}\n+\n+#[naked]\n+pub unsafe extern \"C\" fn allow_compile_error_and_asm(a: u32) -> u32 {\n+    compile_error!(\"this is a user specified error\");\n+    //~^ ERROR this is a user specified error\n+    asm!(\"\", options(noreturn))\n+}\n+\n+#[naked]\n+pub unsafe extern \"C\" fn invalid_asm_syntax(a: u32) -> u32 {\n+    asm!(invalid_syntax)\n+    //~^ ERROR asm template must be a string literal\n+}"}, {"sha": "8a610b25f0039963edc8cfacc7215c8c75bf28ae", "filename": "src/test/ui/asm/naked-functions.stderr", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/19a90c70180d5ba9d825b66773ce0980d7804a36/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19a90c70180d5ba9d825b66773ce0980d7804a36/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fnaked-functions.stderr?ref=19a90c70180d5ba9d825b66773ce0980d7804a36", "patch": "@@ -4,6 +4,24 @@ error: asm with the `pure` option must have at least one output\n LL |     asm!(\"\", options(readonly, nostack), options(pure));\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^\n \n+error: this is a user specified error\n+  --> $DIR/naked-functions.rs:202:5\n+   |\n+LL |     compile_error!(\"this is a user specified error\")\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: this is a user specified error\n+  --> $DIR/naked-functions.rs:208:5\n+   |\n+LL |     compile_error!(\"this is a user specified error\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: asm template must be a string literal\n+  --> $DIR/naked-functions.rs:215:10\n+   |\n+LL |     asm!(invalid_syntax)\n+   |          ^^^^^^^^^^^^^^\n+\n error: patterns not allowed in naked function parameters\n   --> $DIR/naked-functions.rs:20:5\n    |\n@@ -280,6 +298,6 @@ error: naked functions cannot be inlined\n LL | #[inline(never)]\n    | ^^^^^^^^^^^^^^^^\n \n-error: aborting due to 30 previous errors; 2 warnings emitted\n+error: aborting due to 33 previous errors; 2 warnings emitted\n \n For more information about this error, try `rustc --explain E0787`."}]}