{"sha": "1c7a62c93b21ad1958db80b39bca14a09ea8b4bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjN2E2MmM5M2IyMWFkMTk1OGRiODBiMzliY2ExNGEwOWVhOGI0YmM=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-01-17T12:36:00Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-01-17T13:04:55Z"}, "message": "Use a memset upcall to zero things without static alignment\n\nThis fixes issues #843 and #1546. The cost of an upcall is\nunfortunate, though. I assume there must be a way to simply manually\ncompute the pointer or size, using something akin to the formula in\n`align_to` in `rust_util.h`. I could not get this to work,\nunfortunately.", "tree": {"sha": "6b3df97b7023bc3c5ac8b6ba51993c88d878bc96", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b3df97b7023bc3c5ac8b6ba51993c88d878bc96"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c7a62c93b21ad1958db80b39bca14a09ea8b4bc", "comment_count": 1, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c7a62c93b21ad1958db80b39bca14a09ea8b4bc", "html_url": "https://github.com/rust-lang/rust/commit/1c7a62c93b21ad1958db80b39bca14a09ea8b4bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c7a62c93b21ad1958db80b39bca14a09ea8b4bc/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e046360e690534229bd674ff2b1f61d324820230", "url": "https://api.github.com/repos/rust-lang/rust/commits/e046360e690534229bd674ff2b1f61d324820230", "html_url": "https://github.com/rust-lang/rust/commit/e046360e690534229bd674ff2b1f61d324820230"}], "stats": {"total": 44, "additions": 28, "deletions": 16}, "files": [{"sha": "115cd53276d43e0c22c47542a45366310b22a3d5", "filename": "src/comp/back/upcall.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c7a62c93b21ad1958db80b39bca14a09ea8b4bc/src%2Fcomp%2Fback%2Fupcall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7a62c93b21ad1958db80b39bca14a09ea8b4bc/src%2Fcomp%2Fback%2Fupcall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Fupcall.rs?ref=1c7a62c93b21ad1958db80b39bca14a09ea8b4bc", "patch": "@@ -16,6 +16,7 @@ type upcalls =\n      free: ValueRef,\n      shared_malloc: ValueRef,\n      shared_free: ValueRef,\n+     memset: ValueRef,\n      mark: ValueRef,\n      create_shared_type_desc: ValueRef,\n      free_shared_type_desc: ValueRef,\n@@ -64,6 +65,7 @@ fn declare_upcalls(targ_cfg: @session::config,\n                 T_ptr(T_i8())),\n           shared_free:\n               dv(\"shared_free\", [T_ptr(T_i8())]),\n+          memset: dv(\"memset\", [T_ptr(T_i8()), T_i8(), T_i32(), T_i32()]),\n           mark:\n               d(\"mark\", [T_ptr(T_i8())], int_t),\n           create_shared_type_desc:"}, {"sha": "2a029c22b3d58fcfe42fa3682cd74f321b123d6b", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/1c7a62c93b21ad1958db80b39bca14a09ea8b4bc/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c7a62c93b21ad1958db80b39bca14a09ea8b4bc/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=1c7a62c93b21ad1958db80b39bca14a09ea8b4bc", "patch": "@@ -1942,21 +1942,21 @@ fn call_memmove(cx: @block_ctxt, dst: ValueRef, src: ValueRef,\n }\n \n fn call_bzero(cx: @block_ctxt, dst: ValueRef, n_bytes: ValueRef,\n-              align_bytes: ValueRef) -> result {\n+              align_bytes: ValueRef) -> @block_ctxt {\n     // FIXME: switch to the 64-bit variant when on such a platform.\n-    let ccx = bcx_ccx(cx);\n-    let i = ccx.intrinsics;\n-    assert (i.contains_key(\"llvm.memset.p0i8.i32\"));\n-    let memset = i.get(\"llvm.memset.p0i8.i32\");\n+    let ccx = bcx_ccx(cx), dst = dst;\n     let dst_ptr = PointerCast(cx, dst, T_ptr(T_i8()));\n     let size = IntCast(cx, n_bytes, T_i32());\n-    let align =\n-        if lib::llvm::llvm::LLVMIsConstant(align_bytes) == True {\n-            IntCast(cx, align_bytes, T_i32())\n-        } else { IntCast(cx, C_int(ccx, 0), T_i32()) };\n-    let volatile = C_bool(false);\n-    ret rslt(cx,\n-             Call(cx, memset, [dst_ptr, C_u8(0u), size, align, volatile]));\n+    let align = IntCast(cx, align_bytes, T_i32());\n+    if lib::llvm::llvm::LLVMIsConstant(align_bytes) != True {\n+        // Use our own upcall (see issue 843), since the LLVM intrinsic can\n+        // only handle constant alignments.\n+        Call(cx, ccx.upcalls.memset, [dst_ptr, C_u8(0u), size, align]);\n+    } else {\n+        let memset = ccx.intrinsics.get(\"llvm.memset.p0i8.i32\");\n+        Call(cx, memset, [dst_ptr, C_u8(0u), size, align, C_bool(false)]);\n+    }\n+    cx\n }\n \n fn memmove_ty(bcx: @block_ctxt, dst: ValueRef, src: ValueRef, t: ty::t) ->\n@@ -3977,13 +3977,13 @@ fn zero_alloca(cx: @block_ctxt, llptr: ValueRef, t: ty::t)\n         let sp = cx.sp;\n         let llty = type_of(ccx, sp, t);\n         Store(bcx, C_null(llty), llptr);\n+        bcx\n     } else {\n-        let llsz = size_of(bcx, t);\n+        let {bcx, val: llsz} = size_of(bcx, t);\n         // FIXME passing in the align here is correct, but causes issue #843\n-        // let llalign = align_of(llsz.bcx, t);\n-        bcx = call_bzero(llsz.bcx, llptr, llsz.val, C_int(ccx, 0)).bcx;\n+        let {bcx, val: align} = align_of(bcx, t);\n+        call_bzero(bcx, llptr, llsz, align)\n     }\n-    ret bcx;\n }\n \n fn trans_stmt(cx: @block_ctxt, s: ast::stmt) -> @block_ctxt {"}, {"sha": "096c814f7c91df9446b7af3c6673f4ec5c4f929f", "filename": "src/rt/rust_upcall.cpp", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1c7a62c93b21ad1958db80b39bca14a09ea8b4bc/src%2Frt%2Frust_upcall.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/1c7a62c93b21ad1958db80b39bca14a09ea8b4bc/src%2Frt%2Frust_upcall.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.cpp?ref=1c7a62c93b21ad1958db80b39bca14a09ea8b4bc", "patch": "@@ -227,6 +227,15 @@ upcall_shared_free(void* ptr) {\n     UPCALL_SWITCH_STACK(&args, upcall_s_shared_free);\n }\n \n+/************************************************************************\n+ * Memset that, contrary to the llvm intrinsic, handles dynamic alignment\n+ */\n+\n+extern \"C\" CDECL void\n+upcall_memset(void* ptr, char val, unsigned size, unsigned align) {\n+    memset(ptr, val, align_to(size, align));\n+}\n+\n /**********************************************************************\n  * Called to deep copy a type descriptor onto the exchange heap.\n  * Used when sending closures.  It's possible that we should have"}, {"sha": "f507687df82239d1c80d7df9705c2f0d504c1f12", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1c7a62c93b21ad1958db80b39bca14a09ea8b4bc/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/1c7a62c93b21ad1958db80b39bca14a09ea8b4bc/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=1c7a62c93b21ad1958db80b39bca14a09ea8b4bc", "patch": "@@ -74,6 +74,7 @@ upcall_rust_personality\n upcall_s_shared_malloc\n upcall_shared_malloc\n upcall_shared_free\n+upcall_memset\n upcall_vec_grow\n upcall_vec_push\n upcall_call_shim_on_c_stack"}]}