{"sha": "9c6a0088fbdae5a6554c39f8db9207c1b878eb05", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljNmEwMDg4ZmJkYWU1YTY1NTRjMzlmOGRiOTIwN2MxYjg3OGViMDU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-02-26T04:38:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-02-26T04:38:28Z"}, "message": "Auto merge of #31857 - jseyfried:fix_scoping, r=nikomatsakis\n\nThis fixes a bug (#31845) introduced in #31105 in which lexical scopes contain items from all anonymous module ancestors, even if the path to the anonymous module includes a normal module:\n```rust\nfn f() {\n    fn g() {}\n    mod foo {\n        fn h() {\n           g(); // This erroneously resolves on nightly\n        }\n    }\n}\n```\n\nThis is a [breaking-change] on nightly but not on stable or beta.\nr? @nikomatsakis", "tree": {"sha": "15c6bd51f453053cfac2183ed2c2628baf55342b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15c6bd51f453053cfac2183ed2c2628baf55342b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c6a0088fbdae5a6554c39f8db9207c1b878eb05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c6a0088fbdae5a6554c39f8db9207c1b878eb05", "html_url": "https://github.com/rust-lang/rust/commit/9c6a0088fbdae5a6554c39f8db9207c1b878eb05", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c6a0088fbdae5a6554c39f8db9207c1b878eb05/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15e9a95a4b9557eac48179b1dce5119a0dfa0b31", "url": "https://api.github.com/repos/rust-lang/rust/commits/15e9a95a4b9557eac48179b1dce5119a0dfa0b31", "html_url": "https://github.com/rust-lang/rust/commit/15e9a95a4b9557eac48179b1dce5119a0dfa0b31"}, {"sha": "2942cf7b0ace5a23fc26713f49de7b1e696bfb16", "url": "https://api.github.com/repos/rust-lang/rust/commits/2942cf7b0ace5a23fc26713f49de7b1e696bfb16", "html_url": "https://github.com/rust-lang/rust/commit/2942cf7b0ace5a23fc26713f49de7b1e696bfb16"}], "stats": {"total": 75, "additions": 56, "deletions": 19}, "files": [{"sha": "067d83a17e57bd29af185600731e4bff3fd013f8", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 27, "deletions": 19, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/9c6a0088fbdae5a6554c39f8db9207c1b878eb05/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c6a0088fbdae5a6554c39f8db9207c1b878eb05/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=9c6a0088fbdae5a6554c39f8db9207c1b878eb05", "patch": "@@ -731,8 +731,8 @@ enum RibKind<'a> {\n     // We're in a constant item. Can't refer to dynamic stuff.\n     ConstantItemRibKind,\n \n-    // We passed through an anonymous module.\n-    AnonymousModuleRibKind(Module<'a>),\n+    // We passed through a module.\n+    ModuleRibKind(Module<'a>),\n }\n \n #[derive(Copy, Clone)]\n@@ -1680,16 +1680,20 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n     fn with_scope<F>(&mut self, id: NodeId, f: F)\n         where F: FnOnce(&mut Resolver)\n     {\n-        let orig_module = self.current_module;\n+        if let Some(module) = self.current_module.module_children.borrow().get(&id) {\n+            // Move down in the graph.\n+            let orig_module = ::std::mem::replace(&mut self.current_module, module);\n+            self.value_ribs.push(Rib::new(ModuleRibKind(module)));\n+            self.type_ribs.push(Rib::new(ModuleRibKind(module)));\n \n-        // Move down in the graph.\n-        if let Some(module) = orig_module.module_children.borrow().get(&id) {\n-            self.current_module = module;\n-        }\n+            f(self);\n \n-        f(self);\n-\n-        self.current_module = orig_module;\n+            self.current_module = orig_module;\n+            self.value_ribs.pop();\n+            self.type_ribs.pop();\n+        } else {\n+            f(self);\n+        }\n     }\n \n     /// Searches the current set of local scopes for labels.\n@@ -2266,8 +2270,8 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n \n         if let Some(anonymous_module) = anonymous_module {\n             debug!(\"(resolving block) found anonymous module, moving down\");\n-            self.value_ribs.push(Rib::new(AnonymousModuleRibKind(anonymous_module)));\n-            self.type_ribs.push(Rib::new(AnonymousModuleRibKind(anonymous_module)));\n+            self.value_ribs.push(Rib::new(ModuleRibKind(anonymous_module)));\n+            self.type_ribs.push(Rib::new(ModuleRibKind(anonymous_module)));\n             self.current_module = anonymous_module;\n         } else {\n             self.value_ribs.push(Rib::new(NormalRibKind));\n@@ -2811,8 +2815,9 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         }\n \n         if check_ribs {\n-            if let Some(def) = self.resolve_identifier_in_local_ribs(identifier, namespace) {\n-                return Some(def);\n+            match self.resolve_identifier_in_local_ribs(identifier, namespace, record_used) {\n+                Some(def) => return Some(def),\n+                None => {}\n             }\n         }\n \n@@ -2844,7 +2849,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             Def::Local(_, node_id) => {\n                 for rib in ribs {\n                     match rib.kind {\n-                        NormalRibKind | AnonymousModuleRibKind(..) => {\n+                        NormalRibKind | ModuleRibKind(..) => {\n                             // Nothing to do. Continue.\n                         }\n                         ClosureRibKind(function_id) => {\n@@ -2893,7 +2898,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                 for rib in ribs {\n                     match rib.kind {\n                         NormalRibKind | MethodRibKind | ClosureRibKind(..) |\n-                        AnonymousModuleRibKind(..) => {\n+                        ModuleRibKind(..) => {\n                             // Nothing to do. Continue.\n                         }\n                         ItemRibKind => {\n@@ -3024,7 +3029,8 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n \n     fn resolve_identifier_in_local_ribs(&mut self,\n                                         ident: hir::Ident,\n-                                        namespace: Namespace)\n+                                        namespace: Namespace,\n+                                        record_used: bool)\n                                         -> Option<LocalDef> {\n         // Check the local set of ribs.\n         let name = match namespace { ValueNS => ident.name, TypeNS => ident.unhygienic_name };\n@@ -3051,16 +3057,18 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                 }\n             }\n \n-            if let AnonymousModuleRibKind(module) = self.get_ribs(namespace)[i].kind {\n+            if let ModuleRibKind(module) = self.get_ribs(namespace)[i].kind {\n                 if let Success(binding) = self.resolve_name_in_module(module,\n                                                                       ident.unhygienic_name,\n                                                                       namespace,\n                                                                       true,\n-                                                                      true) {\n+                                                                      record_used) {\n                     if let Some(def) = binding.def() {\n                         return Some(LocalDef::from_def(def));\n                     }\n                 }\n+                // We can only see through anonymous modules\n+                if module.def.is_some() { return None; }\n             }\n         }\n "}, {"sha": "344a1117254601a9ba4d545710e2f62076c901ff", "filename": "src/test/compile-fail/issue-31845.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9c6a0088fbdae5a6554c39f8db9207c1b878eb05/src%2Ftest%2Fcompile-fail%2Fissue-31845.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c6a0088fbdae5a6554c39f8db9207c1b878eb05/src%2Ftest%2Fcompile-fail%2Fissue-31845.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-31845.rs?ref=9c6a0088fbdae5a6554c39f8db9207c1b878eb05", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Checks lexical scopes cannot see through normal module boundries\n+\n+fn f() {\n+    fn g() {}\n+    mod foo {\n+        fn h() {\n+           g(); //~ ERROR unresolved name\n+        }\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "3c1f4b04306218be71dccfc866bbc368acd38b76", "filename": "src/test/compile-fail/lint-unused-imports.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9c6a0088fbdae5a6554c39f8db9207c1b878eb05/src%2Ftest%2Fcompile-fail%2Flint-unused-imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c6a0088fbdae5a6554c39f8db9207c1b878eb05/src%2Ftest%2Fcompile-fail%2Flint-unused-imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unused-imports.rs?ref=9c6a0088fbdae5a6554c39f8db9207c1b878eb05", "patch": "@@ -69,6 +69,13 @@ mod bar {\n     }\n }\n \n+fn g() {\n+    use self::g; //~ ERROR unused import\n+    fn f() {\n+        self::g();\n+    }\n+}\n+\n fn main() {\n     cal(foo::Point{x:3, y:9});\n     let mut a = 3;"}]}