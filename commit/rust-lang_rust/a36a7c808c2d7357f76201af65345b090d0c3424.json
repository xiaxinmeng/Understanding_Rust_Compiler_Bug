{"sha": "a36a7c808c2d7357f76201af65345b090d0c3424", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzNmE3YzgwOGMyZDczNTdmNzYyMDFhZjY1MzQ1YjA5MGQwYzM0MjQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-14T06:58:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-14T06:58:12Z"}, "message": "Auto merge of #7270 - Valentine-Mario:vec_extend_to_append, r=flip1995\n\nVec extend to append\n\nThis PR adds a check to suggest changes of vector from\n\n```\nvec.extend(other_vec.drain(..))\n```\n\ncould be written as\n\n```\nvec![].append(&mut vec![]);\n```\n\nchangelog: Add vec_extend_to_append lint\nissue: #7209", "tree": {"sha": "0a6b79eaf7e108cbd01c4cc3c31949f891332a2e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a6b79eaf7e108cbd01c4cc3c31949f891332a2e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a36a7c808c2d7357f76201af65345b090d0c3424", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a36a7c808c2d7357f76201af65345b090d0c3424", "html_url": "https://github.com/rust-lang/rust/commit/a36a7c808c2d7357f76201af65345b090d0c3424", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a36a7c808c2d7357f76201af65345b090d0c3424/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6379d260e7f75db77b67968aa7b878f4c461a906", "url": "https://api.github.com/repos/rust-lang/rust/commits/6379d260e7f75db77b67968aa7b878f4c461a906", "html_url": "https://github.com/rust-lang/rust/commit/6379d260e7f75db77b67968aa7b878f4c461a906"}, {"sha": "44608b1857951ba82b630853da6fc6c2f40fde53", "url": "https://api.github.com/repos/rust-lang/rust/commits/44608b1857951ba82b630853da6fc6c2f40fde53", "html_url": "https://github.com/rust-lang/rust/commit/44608b1857951ba82b630853da6fc6c2f40fde53"}], "stats": {"total": 210, "additions": 208, "deletions": 2}, "files": [{"sha": "52d0e8c7cdebb0eb18da69027029b6cdc94d3664", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a36a7c808c2d7357f76201af65345b090d0c3424/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/a36a7c808c2d7357f76201af65345b090d0c3424/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=a36a7c808c2d7357f76201af65345b090d0c3424", "patch": "@@ -2295,6 +2295,7 @@ Released 2018-09-13\n <!-- begin autogenerated links to lint list -->\n [`absurd_extreme_comparisons`]: https://rust-lang.github.io/rust-clippy/master/index.html#absurd_extreme_comparisons\n [`almost_swapped`]: https://rust-lang.github.io/rust-clippy/master/index.html#almost_swapped\n+[`append_instead_of_extend`]: https://rust-lang.github.io/rust-clippy/master/index.html#append_instead_of_extend\n [`approx_constant`]: https://rust-lang.github.io/rust-clippy/master/index.html#approx_constant\n [`as_conversions`]: https://rust-lang.github.io/rust-clippy/master/index.html#as_conversions\n [`assertions_on_constants`]: https://rust-lang.github.io/rust-clippy/master/index.html#assertions_on_constants"}, {"sha": "5ab333f8aa10737d52ff47ec34d1175a252ad0af", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a36a7c808c2d7357f76201af65345b090d0c3424/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a36a7c808c2d7357f76201af65345b090d0c3424/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=a36a7c808c2d7357f76201af65345b090d0c3424", "patch": "@@ -730,6 +730,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         mem_replace::MEM_REPLACE_OPTION_WITH_NONE,\n         mem_replace::MEM_REPLACE_WITH_DEFAULT,\n         mem_replace::MEM_REPLACE_WITH_UNINIT,\n+        methods::APPEND_INSTEAD_OF_EXTEND,\n         methods::BIND_INSTEAD_OF_MAP,\n         methods::BYTES_NTH,\n         methods::CHARS_LAST_CMP,\n@@ -1276,6 +1277,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(mem_replace::MEM_REPLACE_OPTION_WITH_NONE),\n         LintId::of(mem_replace::MEM_REPLACE_WITH_DEFAULT),\n         LintId::of(mem_replace::MEM_REPLACE_WITH_UNINIT),\n+        LintId::of(methods::APPEND_INSTEAD_OF_EXTEND),\n         LintId::of(methods::BIND_INSTEAD_OF_MAP),\n         LintId::of(methods::BYTES_NTH),\n         LintId::of(methods::CHARS_LAST_CMP),\n@@ -1736,6 +1738,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(large_enum_variant::LARGE_ENUM_VARIANT),\n         LintId::of(loops::MANUAL_MEMCPY),\n         LintId::of(loops::NEEDLESS_COLLECT),\n+        LintId::of(methods::APPEND_INSTEAD_OF_EXTEND),\n         LintId::of(methods::EXPECT_FUN_CALL),\n         LintId::of(methods::ITER_NTH),\n         LintId::of(methods::MANUAL_STR_REPEAT),"}, {"sha": "e39a5a1efd1e18f2a76bc64ab5cb76ef84e806a7", "filename": "clippy_lints/src/methods/append_instead_of_extend.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/a36a7c808c2d7357f76201af65345b090d0c3424/clippy_lints%2Fsrc%2Fmethods%2Fappend_instead_of_extend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a36a7c808c2d7357f76201af65345b090d0c3424/clippy_lints%2Fsrc%2Fmethods%2Fappend_instead_of_extend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fappend_instead_of_extend.rs?ref=a36a7c808c2d7357f76201af65345b090d0c3424", "patch": "@@ -0,0 +1,41 @@\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::source::snippet_with_applicability;\n+use clippy_utils::ty::{is_type_diagnostic_item, is_type_lang_item};\n+use if_chain::if_chain;\n+use rustc_errors::Applicability;\n+use rustc_hir::{Expr, ExprKind, LangItem};\n+use rustc_lint::LateContext;\n+use rustc_span::symbol::sym;\n+\n+use super::APPEND_INSTEAD_OF_EXTEND;\n+\n+pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, recv: &Expr<'_>, arg: &Expr<'_>) {\n+    let ty = cx.typeck_results().expr_ty(recv).peel_refs();\n+    if_chain! {\n+        if is_type_diagnostic_item(cx, ty, sym::vec_type);\n+        //check source object\n+        if let ExprKind::MethodCall(src_method, _, [drain_vec, drain_arg], _) = &arg.kind;\n+        if src_method.ident.as_str() == \"drain\";\n+        if let src_ty = cx.typeck_results().expr_ty(drain_vec).peel_refs();\n+        if is_type_diagnostic_item(cx, src_ty, sym::vec_type);\n+        //check drain range\n+        if let src_ty_range = cx.typeck_results().expr_ty(drain_arg).peel_refs();\n+        if is_type_lang_item(cx, src_ty_range, LangItem::RangeFull);\n+        then {\n+            let mut applicability = Applicability::MachineApplicable;\n+            span_lint_and_sugg(\n+                cx,\n+                APPEND_INSTEAD_OF_EXTEND,\n+                expr.span,\n+                \"use of `extend` instead of `append` for adding the full range of a second vector\",\n+                \"try this\",\n+                format!(\n+                    \"{}.append(&mut {})\",\n+                    snippet_with_applicability(cx, recv.span, \"..\", &mut applicability),\n+                    snippet_with_applicability(cx, drain_vec.span, \"..\", &mut applicability)\n+                ),\n+                applicability,\n+            );\n+        }\n+    }\n+}"}, {"sha": "b556dcb4dfe800f0e588ad6fb893e52485f87f10", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 31, "deletions": 2, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/a36a7c808c2d7357f76201af65345b090d0c3424/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a36a7c808c2d7357f76201af65345b090d0c3424/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=a36a7c808c2d7357f76201af65345b090d0c3424", "patch": "@@ -1,3 +1,4 @@\n+mod append_instead_of_extend;\n mod bind_instead_of_map;\n mod bytes_nth;\n mod chars_cmp;\n@@ -1032,6 +1033,30 @@ declare_clippy_lint! {\n     \"using `.get().unwrap()` or `.get_mut().unwrap()` when using `[]` would work instead\"\n }\n \n+declare_clippy_lint! {\n+    /// **What it does:** Checks for occurrences where one vector gets extended instead of append\n+    ///\n+    /// **Why is this bad?** Using `append` instead of `extend` is more concise and faster\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust\n+    /// let mut a = vec![1, 2, 3];\n+    /// let mut b = vec![4, 5, 6];\n+    ///\n+    /// // Bad\n+    /// a.extend(b.drain(..));\n+    ///\n+    /// // Good\n+    /// a.append(&mut b);\n+    /// ```\n+    pub APPEND_INSTEAD_OF_EXTEND,\n+    perf,\n+    \"using vec.append(&mut vec) to move the full range of a vecor to another\"\n+}\n+\n declare_clippy_lint! {\n     /// **What it does:** Checks for the use of `.extend(s.chars())` where s is a\n     /// `&str` or `String`.\n@@ -1785,7 +1810,8 @@ impl_lint_pass!(Methods => [\n     INSPECT_FOR_EACH,\n     IMPLICIT_CLONE,\n     SUSPICIOUS_SPLITN,\n-    MANUAL_STR_REPEAT\n+    MANUAL_STR_REPEAT,\n+    APPEND_INSTEAD_OF_EXTEND\n ]);\n \n /// Extracts a method call name, args, and `Span` of the method name.\n@@ -2047,7 +2073,10 @@ fn check_methods<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, msrv: Optio\n                 Some((\"ok\", [recv], _)) => ok_expect::check(cx, expr, recv),\n                 _ => expect_used::check(cx, expr, recv),\n             },\n-            (\"extend\", [arg]) => string_extend_chars::check(cx, expr, recv, arg),\n+            (\"extend\", [arg]) => {\n+                string_extend_chars::check(cx, expr, recv, arg);\n+                append_instead_of_extend::check(cx, expr, recv, arg);\n+            },\n             (\"filter_map\", [arg]) => {\n                 unnecessary_filter_map::check(cx, expr, arg);\n                 filter_map_identity::check(cx, expr, arg, span);"}, {"sha": "283358333cdfd30bb4dfef176b0c25c54cc65519", "filename": "tests/ui/append_instead_of_extend.fixed", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/a36a7c808c2d7357f76201af65345b090d0c3424/tests%2Fui%2Fappend_instead_of_extend.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a36a7c808c2d7357f76201af65345b090d0c3424/tests%2Fui%2Fappend_instead_of_extend.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fappend_instead_of_extend.fixed?ref=a36a7c808c2d7357f76201af65345b090d0c3424", "patch": "@@ -0,0 +1,55 @@\n+// run-rustfix\n+#![warn(clippy::append_instead_of_extend)]\n+use std::collections::BinaryHeap;\n+fn main() {\n+    //gets linted\n+    let mut vec1 = vec![0u8; 1024];\n+    let mut vec2: std::vec::Vec<u8> = Vec::new();\n+\n+    vec2.append(&mut vec1);\n+\n+    let mut vec3 = vec![0u8; 1024];\n+    let mut vec4: std::vec::Vec<u8> = Vec::new();\n+\n+    vec4.append(&mut vec3);\n+\n+    let mut vec11: std::vec::Vec<u8> = Vec::new();\n+\n+    vec11.append(&mut return_vector());\n+\n+    //won't get linted it dosen't move the entire content of a vec into another\n+    let mut test1 = vec![0u8, 10];\n+    let mut test2: std::vec::Vec<u8> = Vec::new();\n+\n+    test2.extend(test1.drain(4..10));\n+\n+    let mut vec3 = vec![0u8; 104];\n+    let mut vec7: std::vec::Vec<u8> = Vec::new();\n+\n+    vec3.append(&mut vec7);\n+\n+    let mut vec5 = vec![0u8; 1024];\n+    let mut vec6: std::vec::Vec<u8> = Vec::new();\n+\n+    vec5.extend(vec6.drain(..4));\n+\n+    let mut vec9: std::vec::Vec<u8> = Vec::new();\n+\n+    return_vector().append(&mut vec9);\n+\n+    //won't get linted because it is not a vec\n+\n+    let mut heap = BinaryHeap::from(vec![1, 3]);\n+    let mut heap2 = BinaryHeap::from(vec![]);\n+    heap2.extend(heap.drain())\n+}\n+\n+fn return_vector() -> Vec<u8> {\n+    let mut new_vector = vec![];\n+\n+    for i in 1..10 {\n+        new_vector.push(i)\n+    }\n+\n+    new_vector\n+}"}, {"sha": "abde5cdac5cf7f6079c3d1b77c3595b515c13d19", "filename": "tests/ui/append_instead_of_extend.rs", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/a36a7c808c2d7357f76201af65345b090d0c3424/tests%2Fui%2Fappend_instead_of_extend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a36a7c808c2d7357f76201af65345b090d0c3424/tests%2Fui%2Fappend_instead_of_extend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fappend_instead_of_extend.rs?ref=a36a7c808c2d7357f76201af65345b090d0c3424", "patch": "@@ -0,0 +1,55 @@\n+// run-rustfix\n+#![warn(clippy::append_instead_of_extend)]\n+use std::collections::BinaryHeap;\n+fn main() {\n+    //gets linted\n+    let mut vec1 = vec![0u8; 1024];\n+    let mut vec2: std::vec::Vec<u8> = Vec::new();\n+\n+    vec2.extend(vec1.drain(..));\n+\n+    let mut vec3 = vec![0u8; 1024];\n+    let mut vec4: std::vec::Vec<u8> = Vec::new();\n+\n+    vec4.extend(vec3.drain(..));\n+\n+    let mut vec11: std::vec::Vec<u8> = Vec::new();\n+\n+    vec11.extend(return_vector().drain(..));\n+\n+    //won't get linted it dosen't move the entire content of a vec into another\n+    let mut test1 = vec![0u8, 10];\n+    let mut test2: std::vec::Vec<u8> = Vec::new();\n+\n+    test2.extend(test1.drain(4..10));\n+\n+    let mut vec3 = vec![0u8; 104];\n+    let mut vec7: std::vec::Vec<u8> = Vec::new();\n+\n+    vec3.append(&mut vec7);\n+\n+    let mut vec5 = vec![0u8; 1024];\n+    let mut vec6: std::vec::Vec<u8> = Vec::new();\n+\n+    vec5.extend(vec6.drain(..4));\n+\n+    let mut vec9: std::vec::Vec<u8> = Vec::new();\n+\n+    return_vector().append(&mut vec9);\n+\n+    //won't get linted because it is not a vec\n+\n+    let mut heap = BinaryHeap::from(vec![1, 3]);\n+    let mut heap2 = BinaryHeap::from(vec![]);\n+    heap2.extend(heap.drain())\n+}\n+\n+fn return_vector() -> Vec<u8> {\n+    let mut new_vector = vec![];\n+\n+    for i in 1..10 {\n+        new_vector.push(i)\n+    }\n+\n+    new_vector\n+}"}, {"sha": "9d309d981def99cbbc86ceeae681ed097a315b5b", "filename": "tests/ui/append_instead_of_extend.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a36a7c808c2d7357f76201af65345b090d0c3424/tests%2Fui%2Fappend_instead_of_extend.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a36a7c808c2d7357f76201af65345b090d0c3424/tests%2Fui%2Fappend_instead_of_extend.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fappend_instead_of_extend.stderr?ref=a36a7c808c2d7357f76201af65345b090d0c3424", "patch": "@@ -0,0 +1,22 @@\n+error: use of `extend` instead of `append` for adding the full range of a second vector\n+  --> $DIR/append_instead_of_extend.rs:9:5\n+   |\n+LL |     vec2.extend(vec1.drain(..));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `vec2.append(&mut vec1)`\n+   |\n+   = note: `-D clippy::append-instead-of-extend` implied by `-D warnings`\n+\n+error: use of `extend` instead of `append` for adding the full range of a second vector\n+  --> $DIR/append_instead_of_extend.rs:14:5\n+   |\n+LL |     vec4.extend(vec3.drain(..));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `vec4.append(&mut vec3)`\n+\n+error: use of `extend` instead of `append` for adding the full range of a second vector\n+  --> $DIR/append_instead_of_extend.rs:18:5\n+   |\n+LL |     vec11.extend(return_vector().drain(..));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `vec11.append(&mut return_vector())`\n+\n+error: aborting due to 3 previous errors\n+"}]}