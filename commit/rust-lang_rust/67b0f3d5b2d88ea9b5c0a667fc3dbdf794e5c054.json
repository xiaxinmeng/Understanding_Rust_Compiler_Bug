{"sha": "67b0f3d5b2d88ea9b5c0a667fc3dbdf794e5c054", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3YjBmM2Q1YjJkODhlYTliNWMwYTY2N2ZjM2RiZGY3OTRlNWMwNTQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-03-13T20:57:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-03-13T20:57:56Z"}, "message": "auto merge of #5339 : catamorphism/rust/less-copy, r=catamorphism", "tree": {"sha": "d6e25209c0e2ac3cdd7823e9048df23d692eba16", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6e25209c0e2ac3cdd7823e9048df23d692eba16"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67b0f3d5b2d88ea9b5c0a667fc3dbdf794e5c054", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67b0f3d5b2d88ea9b5c0a667fc3dbdf794e5c054", "html_url": "https://github.com/rust-lang/rust/commit/67b0f3d5b2d88ea9b5c0a667fc3dbdf794e5c054", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67b0f3d5b2d88ea9b5c0a667fc3dbdf794e5c054/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d8ddff52a60d3785052f1e0a231cb95c98fdc24", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d8ddff52a60d3785052f1e0a231cb95c98fdc24", "html_url": "https://github.com/rust-lang/rust/commit/4d8ddff52a60d3785052f1e0a231cb95c98fdc24"}, {"sha": "f9269a1bda7a8e128ce52327df35cd645332a77e", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9269a1bda7a8e128ce52327df35cd645332a77e", "html_url": "https://github.com/rust-lang/rust/commit/f9269a1bda7a8e128ce52327df35cd645332a77e"}], "stats": {"total": 11, "additions": 5, "deletions": 6}, "files": [{"sha": "8fd9fea6bae4b58817b12862753d2be4d8e4250c", "filename": "src/librust/rust.rc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/67b0f3d5b2d88ea9b5c0a667fc3dbdf794e5c054/src%2Flibrust%2Frust.rc", "raw_url": "https://github.com/rust-lang/rust/raw/67b0f3d5b2d88ea9b5c0a667fc3dbdf794e5c054/src%2Flibrust%2Frust.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrust%2Frust.rc?ref=67b0f3d5b2d88ea9b5c0a667fc3dbdf794e5c054", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n // rust - central access to other rust tools\n-// XXX: Make commands run and test emit proper file endings on winds\n-// XXX: Make run only accept source that emits an executable\n+// FIXME #2238 Make commands run and test emit proper file endings on winds\n+// FIXME #2238 Make run only accept source that emits an executable\n \n #[deny(deprecated_self)];\n "}, {"sha": "31779a765d7e052560ea22deb555c19cb84f46a2", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/67b0f3d5b2d88ea9b5c0a667fc3dbdf794e5c054/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b0f3d5b2d88ea9b5c0a667fc3dbdf794e5c054/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=67b0f3d5b2d88ea9b5c0a667fc3dbdf794e5c054", "patch": "@@ -867,7 +867,7 @@ pub fn in_lpad_scope_cx(bcx: block, f: &fn(+si: &mut scope_info)) {\n     let mut bcx = bcx;\n     loop {\n         {\n-            // XXX: Borrow check bug workaround.\n+            // FIXME #4280: Borrow check bug workaround.\n             let kind: &mut block_kind = &mut *bcx.kind;\n             match *kind {\n                 block_scope(ref mut inf) => {\n@@ -1272,7 +1272,7 @@ pub fn cleanup_and_leave(bcx: block,\n         }\n \n         {\n-            // XXX: Borrow check bug workaround.\n+            // FIXME #4280: Borrow check bug workaround.\n             let kind: &mut block_kind = &mut *cur.kind;\n             match *kind {\n               block_scope(ref mut inf) if !inf.cleanups.is_empty() => {\n@@ -1850,8 +1850,7 @@ pub fn trans_enum_variant(ccx: @CrateContext,\n     };\n     let fcx = new_fn_ctxt_w_id(ccx, ~[], llfndecl, variant.node.id, None,\n                                param_substs, None);\n-    // XXX: Bad copy.\n-    let raw_llargs = create_llargs_for_fn_args(fcx, no_self, copy fn_args);\n+    let raw_llargs = create_llargs_for_fn_args(fcx, no_self, fn_args);\n     let ty_param_substs = match param_substs {\n       Some(ref substs) => /*bad*/copy substs.tys,\n       None => ~[]"}]}