{"sha": "f174099885fed58c8053cf02bf353b6822897b75", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxNzQwOTk4ODVmZWQ1OGM4MDUzY2YwMmJmMzUzYjY4MjI4OTdiNzU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-06T17:10:15Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-07T15:54:31Z"}, "message": "array index accesses are stable places", "tree": {"sha": "f42fbf29fc6dbc22564cfddcb0bfd6e5d874f833", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f42fbf29fc6dbc22564cfddcb0bfd6e5d874f833"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f174099885fed58c8053cf02bf353b6822897b75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f174099885fed58c8053cf02bf353b6822897b75", "html_url": "https://github.com/rust-lang/rust/commit/f174099885fed58c8053cf02bf353b6822897b75", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f174099885fed58c8053cf02bf353b6822897b75/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b9a35dcb49dbc69b484bc97f807715c218a9ecbf", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9a35dcb49dbc69b484bc97f807715c218a9ecbf", "html_url": "https://github.com/rust-lang/rust/commit/b9a35dcb49dbc69b484bc97f807715c218a9ecbf"}], "stats": {"total": 60, "additions": 54, "deletions": 6}, "files": [{"sha": "cb3c88876a3a803b7d5a327c3bccd37db88f34ab", "filename": "src/librustc_mir/build/expr/as_place.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f174099885fed58c8053cf02bf353b6822897b75/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f174099885fed58c8053cf02bf353b6822897b75/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_place.rs?ref=f174099885fed58c8053cf02bf353b6822897b75", "patch": "@@ -86,6 +86,9 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 // region_scope=None so place indexes live forever. They are scalars so they\n                 // do not need storage annotations, and they are often copied between\n                 // places.\n+                // Making this a *fresh* temporary also means we do not have to worry about\n+                // the index changing later: Nothing will ever change this temporary.\n+                // The \"retagging\" transformation (for Stacked Borrows) relies on this.\n                 let idx = unpack!(block = this.as_temp(block, None, index, Mutability::Mut));\n \n                 // bounds check:"}, {"sha": "be7e34e2dcb3cf595d776fdab3178ffb32ccdace", "filename": "src/librustc_mir/transform/add_retag.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f174099885fed58c8053cf02bf353b6822897b75/src%2Flibrustc_mir%2Ftransform%2Fadd_retag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f174099885fed58c8053cf02bf353b6822897b75/src%2Flibrustc_mir%2Ftransform%2Fadd_retag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fadd_retag.rs?ref=f174099885fed58c8053cf02bf353b6822897b75", "patch": "@@ -38,17 +38,19 @@ fn is_stable<'tcx>(\n         // Recurse for projections\n         Projection(ref proj) => {\n             match proj.elem {\n-                ProjectionElem::Deref |\n-                ProjectionElem::Index(_) =>\n-                    // Which place these point to depends on external circumstances\n-                    // (a local storing the array index, the current value of\n-                    // the projection base), so we stop tracking here.\n+                // Which place this evaluates to can change with any memory write,\n+                // so cannot assume this to be stable.\n+                ProjectionElem::Deref =>\n                     false,\n+                // Array indices are intersting, but MIR building generates a *fresh*\n+                // temporary for every array access, so the index cannot be changed as\n+                // a side-effect.\n+                ProjectionElem::Index { .. } |\n+                // The rest is completely boring, they just offset by a constant.\n                 ProjectionElem::Field { .. } |\n                 ProjectionElem::ConstantIndex { .. } |\n                 ProjectionElem::Subslice { .. } |\n                 ProjectionElem::Downcast { .. } =>\n-                    // These just offset by a constant, entirely independent of everything else.\n                     is_stable(&proj.base),\n             }\n         }"}, {"sha": "856e1063f60019fe1b6578601ecb44b789265170", "filename": "src/test/mir-opt/array-index-is-temporary.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/f174099885fed58c8053cf02bf353b6822897b75/src%2Ftest%2Fmir-opt%2Farray-index-is-temporary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f174099885fed58c8053cf02bf353b6822897b75/src%2Ftest%2Fmir-opt%2Farray-index-is-temporary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Farray-index-is-temporary.rs?ref=f174099885fed58c8053cf02bf353b6822897b75", "patch": "@@ -0,0 +1,43 @@\n+// Retagging (from Stacked Borrows) relies on the array index being a fresh\n+// temporary, so that side-effects cannot change it.\n+// Test that this is indeed the case.\n+\n+unsafe fn foo(z: *mut usize) -> u32 {\n+    *z = 2;\n+    99\n+}\n+\n+fn main() {\n+    let mut x = [42, 43, 44];\n+    let mut y = 1;\n+    let z: *mut usize = &mut y;\n+    x[y] = unsafe { foo(z) };\n+}\n+\n+// END RUST SOURCE\n+// START rustc.main.EraseRegions.after.mir\n+//     bb0: {\n+//         ...\n+//         _6 = &mut _2;\n+//         _5 = &mut (*_6);\n+//         _4 = move _5 as *mut usize (Misc);\n+//         _3 = move _4;\n+//         ...\n+//         _8 = _3;\n+//         _7 = const foo(move _8) -> bb1;\n+//     }\n+//\n+//     bb1: {\n+//         ...\n+//         _9 = _2;\n+//         _10 = Len(_1);\n+//         _11 = Lt(_9, _10);\n+//         assert(move _11, \"index out of bounds: the len is move _10 but the index is _9\") -> bb2;\n+//     }\n+//\n+//     bb2: {\n+//         _1[_9] = move _7;\n+//         ...\n+//         return;\n+//     }\n+// END rustc.main.EraseRegions.after.mir"}]}