{"sha": "fbb3a47b90b6468ae9cb308c3f49548c78615326", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiYjNhNDdiOTBiNjQ2OGFlOWNiMzA4YzNmNDk1NDhjNzg2MTUzMjY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-14T21:08:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-14T21:08:00Z"}, "message": "Auto merge of #3961 - rust-lang:rustup, r=matthiaskrgr\n\nRust upgrade to rustc 1.35.0-nightly (9cd61f025 2019-04-14)\n\nHandles breakages from https://github.com/rust-lang/rust/pull/59877\n\nr? @oli-obk @matthiaskrgr", "tree": {"sha": "410f17a9222927ca69adc96af62b803e60010b21", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/410f17a9222927ca69adc96af62b803e60010b21"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fbb3a47b90b6468ae9cb308c3f49548c78615326", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fbb3a47b90b6468ae9cb308c3f49548c78615326", "html_url": "https://github.com/rust-lang/rust/commit/fbb3a47b90b6468ae9cb308c3f49548c78615326", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fbb3a47b90b6468ae9cb308c3f49548c78615326/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6505794bc64d1dc2beacbcec3ba351c834cbf47f", "url": "https://api.github.com/repos/rust-lang/rust/commits/6505794bc64d1dc2beacbcec3ba351c834cbf47f", "html_url": "https://github.com/rust-lang/rust/commit/6505794bc64d1dc2beacbcec3ba351c834cbf47f"}, {"sha": "2156f6733e9bee83be265d35447bb25091d7e9b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/2156f6733e9bee83be265d35447bb25091d7e9b2", "html_url": "https://github.com/rust-lang/rust/commit/2156f6733e9bee83be265d35447bb25091d7e9b2"}], "stats": {"total": 45, "additions": 21, "deletions": 24}, "files": [{"sha": "2a4d404ccc7fd503173e3b63bdbc53ecb8329868", "filename": "clippy_lints/src/eval_order_dependence.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fbb3a47b90b6468ae9cb308c3f49548c78615326/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbb3a47b90b6468ae9cb308c3f49548c78615326/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feval_order_dependence.rs?ref=fbb3a47b90b6468ae9cb308c3f49548c78615326", "patch": "@@ -5,7 +5,6 @@ use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::ty;\n use rustc::{declare_tool_lint, lint_array};\n-use syntax::ast;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for a read and a write to the same variable where\n@@ -287,7 +286,7 @@ fn check_stmt<'a, 'tcx>(vis: &mut ReadVisitor<'a, 'tcx>, stmt: &'tcx Stmt) -> St\n struct ReadVisitor<'a, 'tcx: 'a> {\n     cx: &'a LateContext<'a, 'tcx>,\n     /// The ID of the variable we're looking for.\n-    var: ast::NodeId,\n+    var: HirId,\n     /// The expressions where the write to the variable occurred (for reporting\n     /// in the lint).\n     write_expr: &'tcx Expr,"}, {"sha": "d657bb6a0b4eea016a761fa44eb0815aefb29718", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fbb3a47b90b6468ae9cb308c3f49548c78615326/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbb3a47b90b6468ae9cb308c3f49548c78615326/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=fbb3a47b90b6468ae9cb308c3f49548c78615326", "patch": "@@ -327,7 +327,7 @@ impl<'a, 'tcx: 'a> DerefVisitor<'a, 'tcx> {\n     fn check_arg(&self, ptr: &hir::Expr) {\n         if let hir::ExprKind::Path(ref qpath) = ptr.node {\n             if let Def::Local(id) = self.cx.tables.qpath_def(qpath, ptr.hir_id) {\n-                if self.ptrs.contains(&self.cx.tcx.hir().node_to_hir_id(id)) {\n+                if self.ptrs.contains(&id) {\n                     span_lint(\n                         self.cx,\n                         NOT_UNSAFE_PTR_ARG_DEREF,"}, {"sha": "1f454c4983a96c936bf6015ade6dd9b551fd8280", "filename": "clippy_lints/src/let_if_seq.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fbb3a47b90b6468ae9cb308c3f49548c78615326/clippy_lints%2Fsrc%2Flet_if_seq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbb3a47b90b6468ae9cb308c3f49548c78615326/clippy_lints%2Fsrc%2Flet_if_seq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_if_seq.rs?ref=fbb3a47b90b6468ae9cb308c3f49548c78615326", "patch": "@@ -150,7 +150,7 @@ impl<'a, 'tcx> hir::intravisit::Visitor<'tcx> for UsedVisitor<'a, 'tcx> {\n         if_chain! {\n             if let hir::ExprKind::Path(ref qpath) = expr.node;\n             if let Def::Local(local_id) = self.cx.tables.qpath_def(qpath, expr.hir_id);\n-            if self.id == self.cx.tcx.hir().node_to_hir_id(local_id);\n+            if self.id == local_id;\n             then {\n                 self.used = true;\n                 return;\n@@ -175,7 +175,7 @@ fn check_assign<'a, 'tcx>(\n         if let hir::ExprKind::Assign(ref var, ref value) = expr.node;\n         if let hir::ExprKind::Path(ref qpath) = var.node;\n         if let Def::Local(local_id) = cx.tables.qpath_def(qpath, var.hir_id);\n-        if decl == cx.tcx.hir().node_to_hir_id(local_id);\n+        if decl == local_id;\n         then {\n             let mut v = UsedVisitor {\n                 cx,"}, {"sha": "a070e824cc0d9211c9350f4a52050e61948fb39c", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fbb3a47b90b6468ae9cb308c3f49548c78615326/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbb3a47b90b6468ae9cb308c3f49548c78615326/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=fbb3a47b90b6468ae9cb308c3f49548c78615326", "patch": "@@ -790,7 +790,7 @@ fn same_var<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &Expr, var: HirId) -> bo\n         if path.segments.len() == 1;\n         if let Def::Local(local_id) = cx.tables.qpath_def(qpath, expr.hir_id);\n         // our variable!\n-        if cx.tcx.hir().node_to_hir_id(local_id) == var;\n+        if local_id == var;\n         then {\n             return true;\n         }\n@@ -1657,13 +1657,13 @@ fn check_for_mutability(cx: &LateContext<'_, '_>, bound: &Expr) -> Option<HirId>\n         then {\n             let def = cx.tables.qpath_def(qpath, bound.hir_id);\n             if let Def::Local(node_id) = def {\n-                let node_str = cx.tcx.hir().get(node_id);\n+                let node_str = cx.tcx.hir().get_by_hir_id(node_id);\n                 if_chain! {\n                     if let Node::Binding(pat) = node_str;\n                     if let PatKind::Binding(bind_ann, ..) = pat.node;\n                     if let BindingAnnotation::Mutable = bind_ann;\n                     then {\n-                        return Some(cx.tcx.hir().node_to_hir_id(node_id));\n+                        return Some(node_id);\n                     }\n                 }\n             }\n@@ -1792,9 +1792,7 @@ impl<'a, 'tcx> VarVisitor<'a, 'tcx> {\n                     }\n                     let def = self.cx.tables.qpath_def(seqpath, seqexpr.hir_id);\n                     match def {\n-                        Def::Local(node_id) | Def::Upvar(node_id, ..) => {\n-                            let hir_id = self.cx.tcx.hir().node_to_hir_id(node_id);\n-\n+                        Def::Local(hir_id) | Def::Upvar(hir_id, ..) => {\n                             let parent_id = self.cx.tcx.hir().get_parent_item(expr.hir_id);\n                             let parent_def_id = self.cx.tcx.hir().local_def_id_from_hir_id(parent_id);\n                             let extent = self.cx.tcx.region_scope_tree(parent_def_id).var_scope(hir_id.local_id);\n@@ -1856,15 +1854,15 @@ impl<'a, 'tcx> Visitor<'tcx> for VarVisitor<'a, 'tcx> {\n             then {\n                 match self.cx.tables.qpath_def(qpath, expr.hir_id) {\n                     Def::Upvar(local_id, ..) => {\n-                        if self.cx.tcx.hir().node_to_hir_id(local_id) == self.var {\n+                        if local_id == self.var {\n                             // we are not indexing anything, record that\n                             self.nonindex = true;\n                         }\n                     }\n                     Def::Local(local_id) =>\n                     {\n \n-                        if self.cx.tcx.hir().node_to_hir_id(local_id) == self.var {\n+                        if local_id == self.var {\n                             self.nonindex = true;\n                         } else {\n                             // not the correct variable, but still a variable\n@@ -2209,7 +2207,7 @@ fn var_def_id(cx: &LateContext<'_, '_>, expr: &Expr) -> Option<HirId> {\n     if let ExprKind::Path(ref qpath) = expr.node {\n         let path_res = cx.tables.qpath_def(qpath, expr.hir_id);\n         if let Def::Local(node_id) = path_res {\n-            return Some(cx.tcx.hir().node_to_hir_id(node_id));\n+            return Some(node_id);\n         }\n     }\n     None\n@@ -2404,7 +2402,7 @@ impl<'a, 'tcx> VarCollectorVisitor<'a, 'tcx> {\n             then {\n                 match def {\n                     Def::Local(node_id) | Def::Upvar(node_id, ..) => {\n-                        self.ids.insert(self.cx.tcx.hir().node_to_hir_id(node_id));\n+                        self.ids.insert(node_id);\n                     },\n                     Def::Static(def_id, mutable) => {\n                         self.def_ids.insert(def_id, mutable);"}, {"sha": "c751de865bee1b7d524e8d09103c74e1de0081cc", "filename": "clippy_lints/src/methods/unnecessary_filter_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fbb3a47b90b6468ae9cb308c3f49548c78615326/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbb3a47b90b6468ae9cb308c3f49548c78615326/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs?ref=fbb3a47b90b6468ae9cb308c3f49548c78615326", "patch": "@@ -68,7 +68,7 @@ fn check_expression<'a, 'tcx: 'a>(\n                             if let hir::ExprKind::Path(path) = &args[0].node;\n                             if let Def::Local(ref local) = cx.tables.qpath_def(path, args[0].hir_id);\n                             then {\n-                                if arg_id == cx.tcx.hir().node_to_hir_id(*local) {\n+                                if arg_id == *local {\n                                     return (false, false)\n                                 }\n                             }"}, {"sha": "bd0b4bd4515a4b40289a62c3b1bc5e2d384ec8cf", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fbb3a47b90b6468ae9cb308c3f49548c78615326/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbb3a47b90b6468ae9cb308c3f49548c78615326/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=fbb3a47b90b6468ae9cb308c3f49548c78615326", "patch": "@@ -612,7 +612,7 @@ fn in_attributes_expansion(expr: &Expr) -> bool {\n /// Tests whether `def` is a variable defined outside a macro.\n fn non_macro_local(cx: &LateContext<'_, '_>, def: &def::Def) -> bool {\n     match *def {\n-        def::Def::Local(id) | def::Def::Upvar(id, _, _) => !in_macro(cx.tcx.hir().span(id)),\n+        def::Def::Local(id) | def::Def::Upvar(id, _, _) => !in_macro(cx.tcx.hir().span_by_hir_id(id)),\n         _ => false,\n     }\n }"}, {"sha": "89f6873565a5d94283fe2f7a34e8ba1570a8fe52", "filename": "clippy_lints/src/unused_io_amount.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fbb3a47b90b6468ae9cb308c3f49548c78615326/clippy_lints%2Fsrc%2Funused_io_amount.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbb3a47b90b6468ae9cb308c3f49548c78615326/clippy_lints%2Fsrc%2Funused_io_amount.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_io_amount.rs?ref=fbb3a47b90b6468ae9cb308c3f49548c78615326", "patch": "@@ -50,7 +50,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedIoAmount {\n         };\n \n         match expr.node {\n-            hir::ExprKind::Match(ref res, _, _) if is_try(cx, expr).is_some() => {\n+            hir::ExprKind::Match(ref res, _, _) if is_try(expr).is_some() => {\n                 if let hir::ExprKind::Call(ref func, ref args) = res.node {\n                     if let hir::ExprKind::Path(ref path) = func.node {\n                         if match_qpath(path, &paths::TRY_INTO_RESULT) && args.len() == 1 {"}, {"sha": "46aec1fa343f3e6f397615af3dd1f180010dd803", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fbb3a47b90b6468ae9cb308c3f49548c78615326/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbb3a47b90b6468ae9cb308c3f49548c78615326/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=fbb3a47b90b6468ae9cb308c3f49548c78615326", "patch": "@@ -950,15 +950,15 @@ pub fn iter_input_pats<'tcx>(decl: &FnDecl, body: &'tcx Body) -> impl Iterator<I\n \n /// Checks if a given expression is a match expression expanded from the `?`\n /// operator or the `try` macro.\n-pub fn is_try<'a>(cx: &'_ LateContext<'_, '_>, expr: &'a Expr) -> Option<&'a Expr> {\n-    fn is_ok(cx: &'_ LateContext<'_, '_>, arm: &Arm) -> bool {\n+pub fn is_try(expr: &Expr) -> Option<&Expr> {\n+    fn is_ok(arm: &Arm) -> bool {\n         if_chain! {\n             if let PatKind::TupleStruct(ref path, ref pat, None) = arm.pats[0].node;\n             if match_qpath(path, &paths::RESULT_OK[1..]);\n             if let PatKind::Binding(_, hir_id, _, None) = pat[0].node;\n             if let ExprKind::Path(QPath::Resolved(None, ref path)) = arm.body.node;\n             if let Def::Local(lid) = path.def;\n-            if cx.tcx.hir().node_to_hir_id(lid) == hir_id;\n+            if lid == hir_id;\n             then {\n                 return true;\n             }\n@@ -984,8 +984,8 @@ pub fn is_try<'a>(cx: &'_ LateContext<'_, '_>, expr: &'a Expr) -> Option<&'a Exp\n             if arms.len() == 2;\n             if arms[0].pats.len() == 1 && arms[0].guard.is_none();\n             if arms[1].pats.len() == 1 && arms[1].guard.is_none();\n-            if (is_ok(cx, &arms[0]) && is_err(&arms[1])) ||\n-                (is_ok(cx, &arms[1]) && is_err(&arms[0]));\n+            if (is_ok(&arms[0]) && is_err(&arms[1])) ||\n+                (is_ok(&arms[1]) && is_err(&arms[0]));\n             then {\n                 return Some(expr);\n             }"}, {"sha": "14711b7fe1b4833999af54a322decfd7e9b65d41", "filename": "clippy_lints/src/utils/usage.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fbb3a47b90b6468ae9cb308c3f49548c78615326/clippy_lints%2Fsrc%2Futils%2Fusage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbb3a47b90b6468ae9cb308c3f49548c78615326/clippy_lints%2Fsrc%2Futils%2Fusage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fusage.rs?ref=fbb3a47b90b6468ae9cb308c3f49548c78615326", "patch": "@@ -33,7 +33,7 @@ pub fn is_potentially_mutated<'a, 'tcx: 'a>(\n         Def::Local(id) | Def::Upvar(id, ..) => id,\n         _ => return true,\n     };\n-    mutated_variables(expr, cx).map_or(true, |mutated| mutated.contains(&cx.tcx.hir().node_to_hir_id(id)))\n+    mutated_variables(expr, cx).map_or(true, |mutated| mutated.contains(&id))\n }\n \n struct MutVarsDelegate {"}]}