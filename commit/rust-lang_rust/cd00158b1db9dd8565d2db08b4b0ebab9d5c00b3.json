{"sha": "cd00158b1db9dd8565d2db08b4b0ebab9d5c00b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkMDAxNThiMWRiOWRkODU2NWQyZGIwOGI0YjBlYmFiOWQ1YzAwYjM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-10T21:37:10Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-10T21:51:34Z"}, "message": "wire sysroot into crate graph", "tree": {"sha": "2072596e298e76aa6d5a8896ef30f591d7c7051c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2072596e298e76aa6d5a8896ef30f591d7c7051c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd00158b1db9dd8565d2db08b4b0ebab9d5c00b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd00158b1db9dd8565d2db08b4b0ebab9d5c00b3", "html_url": "https://github.com/rust-lang/rust/commit/cd00158b1db9dd8565d2db08b4b0ebab9d5c00b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd00158b1db9dd8565d2db08b4b0ebab9d5c00b3/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e35374ec7c26be8de61ec7c6175c2385ee5c006f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e35374ec7c26be8de61ec7c6175c2385ee5c006f", "html_url": "https://github.com/rust-lang/rust/commit/e35374ec7c26be8de61ec7c6175c2385ee5c006f"}], "stats": {"total": 132, "additions": 95, "deletions": 37}, "files": [{"sha": "1dbab57f82ac71b563ba20f42008bea7874a97b7", "filename": "crates/ra_lsp_server/src/project_model/sysroot.rs", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/cd00158b1db9dd8565d2db08b4b0ebab9d5c00b3/crates%2Fra_lsp_server%2Fsrc%2Fproject_model%2Fsysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd00158b1db9dd8565d2db08b4b0ebab9d5c00b3/crates%2Fra_lsp_server%2Fsrc%2Fproject_model%2Fsysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fproject_model%2Fsysroot.rs?ref=cd00158b1db9dd8565d2db08b4b0ebab9d5c00b3", "patch": "@@ -20,7 +20,7 @@ impl_arena_id!(SysrootCrate);\n #[derive(Debug, Clone)]\n struct SysrootCrateData {\n     name: SmolStr,\n-    path: PathBuf,\n+    root: PathBuf,\n     deps: Vec<SysrootCrate>,\n }\n \n@@ -29,6 +29,10 @@ impl Sysroot {\n         self.by_name(\"std\")\n     }\n \n+    pub(crate) fn crates<'a>(&'a self) -> impl Iterator<Item = SysrootCrate> + 'a {\n+        self.crates.iter().map(|(id, _data)| id)\n+    }\n+\n     pub(super) fn discover(cargo_toml: &Path) -> Result<Sysroot> {\n         let rustc_output = Command::new(\"rustc\")\n             .current_dir(cargo_toml.parent().unwrap())\n@@ -45,11 +49,11 @@ impl Sysroot {\n             crates: Arena::default(),\n         };\n         for name in SYSROOT_CRATES.trim().lines() {\n-            let path = src.join(format!(\"lib{}\", name)).join(\"lib.rs\");\n-            if path.exists() {\n+            let root = src.join(format!(\"lib{}\", name)).join(\"lib.rs\");\n+            if root.exists() {\n                 sysroot.crates.alloc(SysrootCrateData {\n                     name: name.into(),\n-                    path,\n+                    root,\n                     deps: Vec::new(),\n                 });\n             }\n@@ -72,6 +76,21 @@ impl Sysroot {\n     }\n }\n \n+impl SysrootCrate {\n+    pub(crate) fn name(self, sysroot: &Sysroot) -> &SmolStr {\n+        &sysroot.crates[self].name\n+    }\n+    pub(crate) fn root(self, sysroot: &Sysroot) -> &Path {\n+        sysroot.crates[self].root.as_path()\n+    }\n+    pub(crate) fn root_dir(self, sysroot: &Sysroot) -> &Path {\n+        self.root(sysroot).parent().unwrap()\n+    }\n+    pub(crate) fn deps<'a>(self, sysroot: &'a Sysroot) -> impl Iterator<Item = SysrootCrate> + 'a {\n+        sysroot.crates[self].deps.iter().map(|&it| it)\n+    }\n+}\n+\n const SYSROOT_CRATES: &str = \"\n std\n core"}, {"sha": "4f3c231d319c48b1db65eacfdab811e05a197f2a", "filename": "crates/ra_lsp_server/src/server_world.rs", "status": "modified", "additions": 49, "deletions": 2, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/cd00158b1db9dd8565d2db08b4b0ebab9d5c00b3/crates%2Fra_lsp_server%2Fsrc%2Fserver_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd00158b1db9dd8565d2db08b4b0ebab9d5c00b3/crates%2Fra_lsp_server%2Fsrc%2Fserver_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fserver_world.rs?ref=cd00158b1db9dd8565d2db08b4b0ebab9d5c00b3", "patch": "@@ -44,7 +44,12 @@ impl ServerWorldState {\n             for pkg in ws.cargo.packages() {\n                 roots.push(pkg.root(&ws.cargo).to_path_buf());\n             }\n+            for krate in ws.sysroot.crates() {\n+                roots.push(krate.root_dir(&ws.sysroot).to_path_buf())\n+            }\n         }\n+        roots.sort();\n+        roots.dedup();\n         let roots_to_scan = roots.len();\n         let (mut vfs, roots) = Vfs::new(roots);\n         for r in roots {\n@@ -53,16 +58,43 @@ impl ServerWorldState {\n         }\n \n         let mut crate_graph = CrateGraph::default();\n-        let mut pkg_to_lib_crate = FxHashMap::default();\n-        let mut pkg_crates = FxHashMap::default();\n         for ws in workspaces.iter() {\n+            // First, load std\n+            let mut sysroot_crates = FxHashMap::default();\n+            for krate in ws.sysroot.crates() {\n+                if let Some(file_id) = vfs.load(krate.root(&ws.sysroot)) {\n+                    let file_id = FileId(file_id.0.into());\n+                    sysroot_crates.insert(krate, crate_graph.add_crate_root(file_id));\n+                }\n+            }\n+            for from in ws.sysroot.crates() {\n+                for to in from.deps(&ws.sysroot) {\n+                    let name = to.name(&ws.sysroot);\n+                    if let (Some(&from), Some(&to)) =\n+                        (sysroot_crates.get(&from), sysroot_crates.get(&to))\n+                    {\n+                        crate_graph.add_dep(from, name.clone(), to);\n+                    }\n+                }\n+            }\n+\n+            let libstd = ws\n+                .sysroot\n+                .std()\n+                .and_then(|it| sysroot_crates.get(&it).map(|&it| it));\n+\n+            let mut pkg_to_lib_crate = FxHashMap::default();\n+            let mut pkg_crates = FxHashMap::default();\n+            // Next, create crates for each package, target pair\n             for pkg in ws.cargo.packages() {\n+                let mut lib_tgt = None;\n                 for tgt in pkg.targets(&ws.cargo) {\n                     let root = tgt.root(&ws.cargo);\n                     if let Some(file_id) = vfs.load(root) {\n                         let file_id = FileId(file_id.0.into());\n                         let crate_id = crate_graph.add_crate_root(file_id);\n                         if tgt.kind(&ws.cargo) == TargetKind::Lib {\n+                            lib_tgt = Some(crate_id);\n                             pkg_to_lib_crate.insert(pkg, crate_id);\n                         }\n                         pkg_crates\n@@ -71,7 +103,22 @@ impl ServerWorldState {\n                             .push(crate_id);\n                     }\n                 }\n+\n+                // Set deps to the std and to the lib target of the current package\n+                for &from in pkg_crates.get(&pkg).into_iter().flatten() {\n+                    if let Some(to) = lib_tgt {\n+                        if to != from {\n+                            crate_graph.add_dep(from, pkg.name(&ws.cargo).into(), to);\n+                        }\n+                    }\n+                    if let Some(std) = libstd {\n+                        crate_graph.add_dep(from, \"std\".into(), std);\n+                    }\n+                }\n             }\n+\n+            // Now add a dep ednge from all targets of upstream to the lib\n+            // target of downstream.\n             for pkg in ws.cargo.packages() {\n                 for dep in pkg.dependencies(&ws.cargo) {\n                     if let Some(&to) = pkg_to_lib_crate.get(&dep.pkg) {"}, {"sha": "02d62a259160a22ef08c6d8f66e2fc1e44997ffc", "filename": "crates/ra_lsp_server/tests/heavy_tests/main.rs", "status": "modified", "additions": 16, "deletions": 25, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/cd00158b1db9dd8565d2db08b4b0ebab9d5c00b3/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd00158b1db9dd8565d2db08b4b0ebab9d5c00b3/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fmain.rs?ref=cd00158b1db9dd8565d2db08b4b0ebab9d5c00b3", "patch": "@@ -1,5 +1,10 @@\n mod support;\n \n+use std::{\n+    collections::HashMap,\n+    time::Instant,\n+};\n+\n use languageserver_types::{\n     CodeActionContext, DocumentFormattingParams, FormattingOptions, Position, Range,\n };\n@@ -14,6 +19,7 @@ const LOG: &'static str = \"\";\n \n #[test]\n fn completes_items_from_standard_library() {\n+    let project_start = Instant::now();\n     let server = project(\n         r#\"\n //- Cargo.toml\n@@ -22,33 +28,19 @@ name = \"foo\"\n version = \"0.0.0\"\n \n //- src/lib.rs\n-use std::collections::;\n+use std::collections::Spam;\n \"#,\n     );\n     server.wait_for_feedback(\"workspace loaded\");\n-    server.request::<Completion>(\n-        CompletionParams {\n-            text_document: server.doc_id(\"src/lib.rs\"),\n-            context: None,\n-            position: Position::new(0, 22),\n-        },\n-        json!([\n-          {\n-            \"filterText\": \"self\",\n-            \"insertText\": \"self\",\n-            \"insertTextFormat\": 1,\n-            \"kind\": 14,\n-            \"label\": \"self\"\n-          },\n-          {\n-            \"filterText\": \"super\",\n-            \"insertText\": \"super\",\n-            \"insertTextFormat\": 1,\n-            \"kind\": 14,\n-            \"label\": \"super\"\n-          }\n-        ]),\n-    );\n+    eprintln!(\"loading took    {:?}\", project_start.elapsed());\n+    let completion_start = Instant::now();\n+    let res = server.send_request::<Completion>(CompletionParams {\n+        text_document: server.doc_id(\"src/lib.rs\"),\n+        context: None,\n+        position: Position::new(0, 23),\n+    });\n+    assert!(format!(\"{}\", res).contains(\"HashMap\"));\n+    eprintln!(\"completion took {:?}\", completion_start.elapsed());\n }\n \n #[test]\n@@ -161,7 +153,6 @@ fn test_eggs() {}\n     );\n }\n \n-use std::collections::HashMap;\n #[test]\n fn test_format_document() {\n     let server = project("}, {"sha": "46107b6b6008da81f2695ab4688059a7feb2f0f5", "filename": "crates/ra_lsp_server/tests/heavy_tests/support.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/cd00158b1db9dd8565d2db08b4b0ebab9d5c00b3/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fsupport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd00158b1db9dd8565d2db08b4b0ebab9d5c00b3/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fsupport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fsupport.rs?ref=cd00158b1db9dd8565d2db08b4b0ebab9d5c00b3", "patch": "@@ -93,9 +93,7 @@ impl Server {\n         R: Request,\n         R::Params: Serialize,\n     {\n-        let id = self.req_id.get();\n-        self.req_id.set(id + 1);\n-        let actual = self.send_request::<R>(id, params);\n+        let actual = self.send_request::<R>(params);\n         match find_mismatch(&expected_resp, &actual) {\n             Some((expected_part, actual_part)) => panic!(\n                 \"JSON mismatch\\nExpected:\\n{}\\nWas:\\n{}\\nExpected part:\\n{}\\nActual part:\\n{}\\n\",\n@@ -108,11 +106,14 @@ impl Server {\n         }\n     }\n \n-    fn send_request<R>(&self, id: u64, params: R::Params) -> Value\n+    pub fn send_request<R>(&self, params: R::Params) -> Value\n     where\n         R: Request,\n         R::Params: Serialize,\n     {\n+        let id = self.req_id.get();\n+        self.req_id.set(id + 1);\n+\n         let r = RawRequest::new::<R>(id, &params);\n         self.send_request_(r)\n     }\n@@ -178,7 +179,7 @@ impl Server {\n \n impl Drop for Server {\n     fn drop(&mut self) {\n-        self.send_request::<Shutdown>(666, ());\n+        self.send_request::<Shutdown>(());\n         let receiver = self.worker.take().unwrap().shutdown();\n         while let Some(msg) = recv_timeout(&receiver) {\n             drop(msg);\n@@ -188,7 +189,7 @@ impl Drop for Server {\n }\n \n fn recv_timeout(receiver: &Receiver<RawMessage>) -> Option<RawMessage> {\n-    let timeout = Duration::from_secs(5);\n+    let timeout = Duration::from_secs(50);\n     select! {\n         recv(receiver) -> msg => msg.ok(),\n         recv(after(timeout)) -> _ => panic!(\"timed out\"),"}]}