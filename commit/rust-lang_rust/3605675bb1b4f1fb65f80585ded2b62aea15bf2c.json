{"sha": "3605675bb1b4f1fb65f80585ded2b62aea15bf2c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2MDU2NzViYjFiNGYxZmI2NWY4MDU4NWRlZDJiNjJhZWExNWJmMmM=", "commit": {"author": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2021-04-26T18:19:23Z"}, "committer": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2021-07-25T07:28:51Z"}, "message": "Add inferred args to typeck", "tree": {"sha": "f03a517cc2797415e47ba0ddc1504e3cfd7c3618", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f03a517cc2797415e47ba0ddc1504e3cfd7c3618"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3605675bb1b4f1fb65f80585ded2b62aea15bf2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3605675bb1b4f1fb65f80585ded2b62aea15bf2c", "html_url": "https://github.com/rust-lang/rust/commit/3605675bb1b4f1fb65f80585ded2b62aea15bf2c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3605675bb1b4f1fb65f80585ded2b62aea15bf2c/comments", "author": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "417b098cfc493a9b803b4ffbf6b74fc4f8e76f3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/417b098cfc493a9b803b4ffbf6b74fc4f8e76f3d", "html_url": "https://github.com/rust-lang/rust/commit/417b098cfc493a9b803b4ffbf6b74fc4f8e76f3d"}], "stats": {"total": 184, "additions": 132, "deletions": 52}, "files": [{"sha": "40a890a0cfdeb22dd02c03495330746f64f14a96", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3605675bb1b4f1fb65f80585ded2b62aea15bf2c/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3605675bb1b4f1fb65f80585ded2b62aea15bf2c/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=3605675bb1b4f1fb65f80585ded2b62aea15bf2c", "patch": "@@ -437,7 +437,7 @@ pub trait Visitor<'v>: Sized {\n         walk_label(self, label)\n     }\n     fn visit_infer(&mut self, inf: &'v InferArg) {\n-        self.visit_id(inf.hir_id);\n+        walk_inf(self, inf);\n     }\n     fn visit_generic_arg(&mut self, generic_arg: &'v GenericArg<'v>) {\n         match generic_arg {\n@@ -447,11 +447,6 @@ pub trait Visitor<'v>: Sized {\n             GenericArg::Infer(inf) => self.visit_infer(inf),\n         }\n     }\n-    /*\n-    fn tcx(&self) -> Option<&TyCtxt<'tcx>> {\n-        None\n-    }\n-    */\n     fn visit_lifetime(&mut self, lifetime: &'v Lifetime) {\n         walk_lifetime(self, lifetime)\n     }"}, {"sha": "052efa851f7cf5477a17fd8cb8c6f8afb28f0747", "filename": "compiler/rustc_lint/src/late.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3605675bb1b4f1fb65f80585ded2b62aea15bf2c/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3605675bb1b4f1fb65f80585ded2b62aea15bf2c/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flate.rs?ref=3605675bb1b4f1fb65f80585ded2b62aea15bf2c", "patch": "@@ -244,6 +244,11 @@ impl<'tcx, T: LateLintPass<'tcx>> hir_visit::Visitor<'tcx> for LateContextAndPas\n         hir_visit::walk_ty(self, t);\n     }\n \n+    fn visit_infer(&mut self, inf: &'tcx hir::InferArg) {\n+        lint_callback!(self, check_infer, inf);\n+        hir_visit::walk_inf(self, inf);\n+    }\n+\n     fn visit_name(&mut self, sp: Span, name: Symbol) {\n         lint_callback!(self, check_name, sp, name);\n     }"}, {"sha": "2d047ac7a0814f6e01dcf303d934ccb39fd62ad4", "filename": "compiler/rustc_lint/src/passes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3605675bb1b4f1fb65f80585ded2b62aea15bf2c/compiler%2Frustc_lint%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3605675bb1b4f1fb65f80585ded2b62aea15bf2c/compiler%2Frustc_lint%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fpasses.rs?ref=3605675bb1b4f1fb65f80585ded2b62aea15bf2c", "patch": "@@ -33,6 +33,7 @@ macro_rules! late_lint_methods {\n             fn check_expr(a: &$hir hir::Expr<$hir>);\n             fn check_expr_post(a: &$hir hir::Expr<$hir>);\n             fn check_ty(a: &$hir hir::Ty<$hir>);\n+            fn check_infer(a: &$hir hir::InferArg);\n             fn check_generic_arg(a: &$hir hir::GenericArg<$hir>);\n             fn check_generic_param(a: &$hir hir::GenericParam<$hir>);\n             fn check_generics(a: &$hir hir::Generics<$hir>);"}, {"sha": "6b74724a57c74c22fd1d18372f01938c73414ac8", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3605675bb1b4f1fb65f80585ded2b62aea15bf2c/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3605675bb1b4f1fb65f80585ded2b62aea15bf2c/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=3605675bb1b4f1fb65f80585ded2b62aea15bf2c", "patch": "@@ -272,11 +272,11 @@ impl<'hir> Map<'hir> {\n                 GenericParamKind::Type { .. } => DefKind::TyParam,\n                 GenericParamKind::Const { .. } => DefKind::ConstParam,\n             },\n-            Node::Infer(_) => todo!(),\n             Node::Crate(_) => DefKind::Mod,\n             Node::Stmt(_)\n             | Node::PathSegment(_)\n             | Node::Ty(_)\n+            | Node::Infer(_)\n             | Node::TraitRef(_)\n             | Node::Pat(_)\n             | Node::Binding(_)"}, {"sha": "0908b6a1763d50c32129019ce2e63435908dadd5", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3605675bb1b4f1fb65f80585ded2b62aea15bf2c/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3605675bb1b4f1fb65f80585ded2b62aea15bf2c/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=3605675bb1b4f1fb65f80585ded2b62aea15bf2c", "patch": "@@ -133,11 +133,6 @@ rustc_queries! {\n         cache_on_disk_if { key.is_local() }\n     }\n \n-    query generic_arg_for_infer_arg(key: DefId) -> hir::GenericArg<'tcx> {\n-        desc { |tcx| \"computes concrete type for inference, `{}`\", tcx.def_path_str(key) }\n-        storage(ArenaCacheSelector<'tcx>)\n-    }\n-\n     /// Maps from the `DefId` of an item (trait/struct/enum/fn) to the\n     /// predicates (where-clauses) that must be proven true in order\n     /// to reference it. This is almost always the \"predicates query\""}, {"sha": "e77bda7d4ab033c3f60acfd83802ba797eb9704c", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/3605675bb1b4f1fb65f80585ded2b62aea15bf2c/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3605675bb1b4f1fb65f80585ded2b62aea15bf2c/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=3605675bb1b4f1fb65f80585ded2b62aea15bf2c", "patch": "@@ -1191,16 +1191,7 @@ impl<'tcx> Visitor<'tcx> for TypePrivacyVisitor<'tcx> {\n     fn visit_generic_arg(&mut self, generic_arg: &'tcx hir::GenericArg<'tcx>) {\n         match generic_arg {\n             hir::GenericArg::Type(t) => self.visit_ty(t),\n-            hir::GenericArg::Infer(inf) => {\n-                self.span = inf.span;\n-                let parent_hir_id = self.tcx.hir().get_parent_node(inf.hir_id);\n-                if let Some(typeck_results) = self.maybe_typeck_results {\n-                    let node_substs = typeck_results.node_substs(parent_hir_id);\n-                    for ty in node_substs.types() {\n-                        self.visit(ty);\n-                    }\n-                }\n-            }\n+            hir::GenericArg::Infer(inf) => self.visit_infer(inf),\n             hir::GenericArg::Lifetime(_) | hir::GenericArg::Const(_) => {}\n         }\n     }\n@@ -1224,6 +1215,23 @@ impl<'tcx> Visitor<'tcx> for TypePrivacyVisitor<'tcx> {\n         intravisit::walk_ty(self, hir_ty);\n     }\n \n+    fn visit_infer(&mut self, inf: &'tcx hir::InferArg) {\n+        self.span = inf.span;\n+        if let Some(typeck_results) = self.maybe_typeck_results {\n+            if let Some(ty) = typeck_results.node_type_opt(inf.hir_id) {\n+                if self.visit(ty).is_break() {\n+                    return;\n+                }\n+            }\n+        } else {\n+            // FIXME see above note for same issue.\n+            if self.visit(rustc_typeck::hir_ty_to_ty(self.tcx, &inf.to_ty())).is_break() {\n+                return;\n+            }\n+        }\n+        intravisit::walk_inf(self, inf);\n+    }\n+\n     fn visit_trait_ref(&mut self, trait_ref: &'tcx hir::TraitRef<'tcx>) {\n         self.span = trait_ref.path.span;\n         if self.maybe_typeck_results.is_none() {"}, {"sha": "dd15d2d65b99301fd2bfc91e25853fdc544445dc", "filename": "compiler/rustc_typeck/src/astconv/generics.rs", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3605675bb1b4f1fb65f80585ded2b62aea15bf2c/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3605675bb1b4f1fb65f80585ded2b62aea15bf2c/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs?ref=3605675bb1b4f1fb65f80585ded2b62aea15bf2c", "patch": "@@ -18,23 +18,6 @@ use rustc_session::lint::builtin::LATE_BOUND_LIFETIME_ARGUMENTS;\n use rustc_span::{symbol::kw, MultiSpan, Span};\n use smallvec::SmallVec;\n \n-/*\n-pub fn generic_arg_for_infer_arg<'tcx>(tcx: TyCtxt<'tcx>, did: LocalDefId) -> GenericArg<'tcx> {\n-    todo!()\n-    let hir_id = tcx.hir().local_def_id_to_hir_id(did);\n-    let arg = match tcx.hir().get(hir_id) {\n-        hir::Node::GenericParam(hir::GenericParam {\n-            kind: hir::GenericParamKind::Const { ty: _, default: _ },\n-            ..\n-        }) => todo!(),\n-        _ => bug!(\"Expected GenericParam for generic_arg_for_infer_arg\"),\n-    };\n-\n-    assert!(!matches!(arg, GenericArg::Infer(_)));\n-    arg\n-}\n-*/\n-\n impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n     /// Report an error that a generic argument did not match the generic parameter that was\n     /// expected."}, {"sha": "58ad086f2259ba406367d9cecb211a83548841a4", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3605675bb1b4f1fb65f80585ded2b62aea15bf2c/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3605675bb1b4f1fb65f80585ded2b62aea15bf2c/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=3605675bb1b4f1fb65f80585ded2b62aea15bf2c", "patch": "@@ -479,6 +479,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                                 param.def_id,\n                                 Some(arg.id()),\n                                 arg.span(),\n+                                None,\n                                 |_, _| {\n                                     // Default generic parameters may not be marked\n                                     // with stability attributes, i.e. when the"}, {"sha": "310517339cd677c6e5b026ed64b399a28cacad5f", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3605675bb1b4f1fb65f80585ded2b62aea15bf2c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3605675bb1b4f1fb65f80585ded2b62aea15bf2c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=3605675bb1b4f1fb65f80585ded2b62aea15bf2c", "patch": "@@ -581,6 +581,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n+    pub fn node_ty_opt(&self, id: hir::HirId) -> Option<Ty<'tcx>> {\n+        match self.typeck_results.borrow().node_types().get(id) {\n+            Some(&t) => Some(t),\n+            None if self.is_tainted_by_errors() => Some(self.tcx.ty_error()),\n+            None => None,\n+        }\n+    }\n+\n     /// Registers an obligation for checking later, during regionck, that `arg` is well-formed.\n     pub fn register_wf_obligation(\n         &self,"}, {"sha": "e6eac16667d4ed4a4e2014e0ea222393545ad308", "filename": "compiler/rustc_typeck/src/check/writeback.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3605675bb1b4f1fb65f80585ded2b62aea15bf2c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3605675bb1b4f1fb65f80585ded2b62aea15bf2c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs?ref=3605675bb1b4f1fb65f80585ded2b62aea15bf2c", "patch": "@@ -331,6 +331,15 @@ impl<'cx, 'tcx> Visitor<'tcx> for WritebackCx<'cx, 'tcx> {\n         let ty = self.resolve(ty, &hir_ty.span);\n         self.write_ty_to_typeck_results(hir_ty.hir_id, ty);\n     }\n+\n+    fn visit_infer(&mut self, inf: &'tcx hir::InferArg) {\n+        intravisit::walk_inf(self, inf);\n+        // Ignore cases where the inference is a const.\n+        if let Some(ty) = self.fcx.node_ty_opt(inf.hir_id) {\n+            let ty = self.resolve(ty, &inf.span);\n+            self.write_ty_to_typeck_results(inf.hir_id, ty);\n+        }\n+    }\n }\n \n impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {"}, {"sha": "997fdcefe037ac6587f6fecfb21bc7ae2ac394e2", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3605675bb1b4f1fb65f80585ded2b62aea15bf2c/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3605675bb1b4f1fb65f80585ded2b62aea15bf2c/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=3605675bb1b4f1fb65f80585ded2b62aea15bf2c", "patch": "@@ -133,6 +133,7 @@ impl<'v> Visitor<'v> for PlaceholderHirTyCollector {\n         match generic_arg {\n             hir::GenericArg::Infer(inf) => {\n                 self.0.push(inf.span);\n+                intravisit::walk_inf(self, inf);\n             }\n             hir::GenericArg::Type(t) => self.visit_ty(t),\n             _ => {}"}, {"sha": "85db42e9c13a443b9416329a264f95e3089b6c6a", "filename": "src/test/ui/privacy/associated-item-privacy-trait.stderr", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3605675bb1b4f1fb65f80585ded2b62aea15bf2c/src%2Ftest%2Fui%2Fprivacy%2Fassociated-item-privacy-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3605675bb1b4f1fb65f80585ded2b62aea15bf2c/src%2Ftest%2Fui%2Fprivacy%2Fassociated-item-privacy-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fassociated-item-privacy-trait.stderr?ref=3605675bb1b4f1fb65f80585ded2b62aea15bf2c", "patch": "@@ -273,6 +273,17 @@ LL |     priv_parent_substs::mac!();\n    |\n    = note: this error originates in the macro `priv_parent_substs::mac` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n+error: type `priv_parent_substs::Priv` is private\n+  --> $DIR/associated-item-privacy-trait.rs:117:30\n+   |\n+LL |         let _: <Pub as PubTr<_>>::AssocTy;\n+   |                              ^ private type\n+...\n+LL |     priv_parent_substs::mac!();\n+   |     --------------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-trait.rs:119:17\n    |\n@@ -317,5 +328,5 @@ LL |     priv_parent_substs::mac!();\n    |\n    = note: this error originates in the macro `priv_parent_substs::mac` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 29 previous errors\n+error: aborting due to 30 previous errors\n "}, {"sha": "ad4898d1ccbb5575676414ac158934ed12f7c201", "filename": "src/tools/clippy/clippy_lints/src/implicit_hasher.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3605675bb1b4f1fb65f80585ded2b62aea15bf2c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fimplicit_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3605675bb1b4f1fb65f80585ded2b62aea15bf2c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fimplicit_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fimplicit_hasher.rs?ref=3605675bb1b4f1fb65f80585ded2b62aea15bf2c", "patch": "@@ -5,7 +5,7 @@ use std::collections::BTreeMap;\n \n use rustc_errors::DiagnosticBuilder;\n use rustc_hir as hir;\n-use rustc_hir::intravisit::{walk_body, walk_expr, walk_ty, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{walk_body, walk_expr, walk_ty, walk_inf, NestedVisitorMap, Visitor};\n use rustc_hir::{Body, Expr, ExprKind, GenericArg, Item, ItemKind, QPath, TyKind};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::hir::map::Map;\n@@ -295,6 +295,14 @@ impl<'a, 'tcx> Visitor<'tcx> for ImplicitHasherTypeVisitor<'a, 'tcx> {\n         walk_ty(self, t);\n     }\n \n+    fn visit_infer(&mut self, inf: &'tcx hir::InferArg) {\n+        if let Some(target) = ImplicitHasherType::new(self.cx, &inf.to_ty()) {\n+            self.found.push(target);\n+        }\n+\n+        walk_inf(self, inf);\n+    }\n+\n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n         NestedVisitorMap::None\n     }"}, {"sha": "b438d680d2cbded0f1c99b8c2ed210da86147722", "filename": "src/tools/clippy/clippy_lints/src/types/type_complexity.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3605675bb1b4f1fb65f80585ded2b62aea15bf2c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Ftype_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3605675bb1b4f1fb65f80585ded2b62aea15bf2c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Ftype_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Ftype_complexity.rs?ref=3605675bb1b4f1fb65f80585ded2b62aea15bf2c", "patch": "@@ -1,6 +1,6 @@\n use clippy_utils::diagnostics::span_lint;\n use rustc_hir as hir;\n-use rustc_hir::intravisit::{walk_ty, NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{walk_ty, walk_inf, NestedVisitorMap, Visitor};\n use rustc_hir::{GenericParamKind, TyKind};\n use rustc_lint::LateContext;\n use rustc_middle::hir::map::Map;\n@@ -39,6 +39,11 @@ struct TypeComplexityVisitor {\n impl<'tcx> Visitor<'tcx> for TypeComplexityVisitor {\n     type Map = Map<'tcx>;\n \n+    fn visit_infer(&mut self, inf: &'tcx hir::InferArg) {\n+      self.score += 1;\n+      walk_inf(self, inf);\n+    }\n+\n     fn visit_ty(&mut self, ty: &'tcx hir::Ty<'_>) {\n         let (add_score, sub_nest) = match ty.kind {\n             // _, &x and *x have only small overhead; don't mess with nesting level"}, {"sha": "c8cdf1a5d2c9c4eba44e96380a0dbef89042b145", "filename": "src/tools/clippy/clippy_lints/src/use_self.rs", "status": "modified", "additions": 54, "deletions": 2, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/3605675bb1b4f1fb65f80585ded2b62aea15bf2c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3605675bb1b4f1fb65f80585ded2b62aea15bf2c/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fuse_self.rs?ref=3605675bb1b4f1fb65f80585ded2b62aea15bf2c", "patch": "@@ -8,8 +8,9 @@ use rustc_hir::{\n     self as hir,\n     def::{CtorOf, DefKind, Res},\n     def_id::LocalDefId,\n-    intravisit::{walk_ty, NestedVisitorMap, Visitor},\n-    Expr, ExprKind, FnRetTy, FnSig, GenericArg, HirId, Impl, ImplItemKind, Item, ItemKind, Path, QPath, TyKind,\n+    intravisit::{walk_ty, walk_inf, NestedVisitorMap, Visitor},\n+    Expr, ExprKind, FnRetTy, FnSig, GenericArg, HirId, Impl, ImplItemKind, Item, ItemKind, Node, Path, PathSegment,\n+    QPath, TyKind,\n };\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::hir::map::Map;\n@@ -263,6 +264,11 @@ struct SkipTyCollector {\n impl<'tcx> Visitor<'tcx> for SkipTyCollector {\n     type Map = Map<'tcx>;\n \n+    fn visit_infer(&mut self, inf: &hir::InferArg) {\n+      self.types_to_skip.push(inf.hir_id);\n+\n+      walk_inf(self, inf)\n+    }\n     fn visit_ty(&mut self, hir_ty: &hir::Ty<'_>) {\n         self.types_to_skip.push(hir_ty.hir_id);\n \n@@ -274,6 +280,52 @@ impl<'tcx> Visitor<'tcx> for SkipTyCollector {\n     }\n }\n \n+<<<<<<< HEAD\n+=======\n+struct LintTyCollector<'a, 'tcx> {\n+    cx: &'a LateContext<'tcx>,\n+    self_ty: Ty<'tcx>,\n+    types_to_lint: Vec<HirId>,\n+    types_to_skip: Vec<HirId>,\n+}\n+\n+impl<'a, 'tcx> Visitor<'tcx> for LintTyCollector<'a, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn visit_ty(&mut self, hir_ty: &'tcx hir::Ty<'_>) {\n+        if_chain! {\n+            if let Some(ty) = self.cx.typeck_results().node_type_opt(hir_ty.hir_id);\n+            if should_lint_ty(hir_ty, ty, self.self_ty);\n+            then {\n+                self.types_to_lint.push(hir_ty.hir_id);\n+            } else {\n+                self.types_to_skip.push(hir_ty.hir_id);\n+            }\n+        }\n+\n+        walk_ty(self, hir_ty);\n+    }\n+\n+    fn visit_infer(&mut self, inf: &'tcx hir::InferArg) {\n+        if_chain! {\n+            if let Some(ty) = self.cx.typeck_results().node_type_opt(inf.hir_id);\n+            if should_lint_ty(&inf.to_ty(), ty, self.self_ty);\n+            then {\n+                self.types_to_lint.push(inf.hir_id);\n+            } else {\n+                self.types_to_skip.push(inf.hir_id);\n+            }\n+        }\n+\n+        walk_inf(self, inf)\n+    }\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n+        NestedVisitorMap::None\n+    }\n+}\n+\n+>>>>>>> Add inferred args to typeck\n fn span_lint(cx: &LateContext<'_>, span: Span) {\n     span_lint_and_sugg(\n         cx,"}, {"sha": "e636038b6e1a5a02eb08522235c433752b339cab", "filename": "src/tools/clippy/clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3605675bb1b4f1fb65f80585ded2b62aea15bf2c/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3605675bb1b4f1fb65f80585ded2b62aea15bf2c/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs?ref=3605675bb1b4f1fb65f80585ded2b62aea15bf2c", "patch": "@@ -288,6 +288,8 @@ impl HirEqInterExpr<'_, '_, '_> {\n             (GenericArg::Const(l), GenericArg::Const(r)) => self.eq_body(l.value.body, r.value.body),\n             (GenericArg::Lifetime(l_lt), GenericArg::Lifetime(r_lt)) => Self::eq_lifetime(l_lt, r_lt),\n             (GenericArg::Type(l_ty), GenericArg::Type(r_ty)) => self.eq_ty(l_ty, r_ty),\n+            (GenericArg::Infer(l_inf), GenericArg::Infer(r_inf)) =>\n+              self.eq_ty(&l_inf.to_ty(), &r_inf.to_ty()),\n             _ => false,\n         }\n     }\n@@ -888,10 +890,6 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n         self.hash_tykind(&ty.kind);\n     }\n \n-    pub fn hash_infer(&mut self) {\n-        \"_\".hash(&mut self.s);\n-    }\n-\n     pub fn hash_tykind(&mut self, ty: &TyKind<'_>) {\n         match ty {\n             TyKind::Slice(ty) => {\n@@ -957,7 +955,7 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                 GenericArg::Lifetime(l) => self.hash_lifetime(l),\n                 GenericArg::Type(ref ty) => self.hash_ty(ty),\n                 GenericArg::Const(ref ca) => self.hash_body(ca.value.body),\n-                GenericArg::Infer(ref _inf) => self.hash_infer(),\n+                GenericArg::Infer(ref inf) => self.hash_ty(&inf.to_ty()),\n             }\n         }\n     }"}, {"sha": "e914dc1c222f681549855fd75bbbd2b6ccbb3202", "filename": "src/tools/clippy/clippy_utils/src/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3605675bb1b4f1fb65f80585ded2b62aea15bf2c/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3605675bb1b4f1fb65f80585ded2b62aea15bf2c/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs?ref=3605675bb1b4f1fb65f80585ded2b62aea15bf2c", "patch": "@@ -180,7 +180,7 @@ pub fn is_must_use_ty<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n }\n \n // FIXME: Per https://doc.rust-lang.org/nightly/nightly-rustc/rustc_trait_selection/infer/at/struct.At.html#method.normalize\n-// this function can be removed once the `normalizie` method does not panic when normalization does\n+// this function can be removed once the `normalize` method does not panic when normalization does\n // not succeed\n /// Checks if `Ty` is normalizable. This function is useful\n /// to avoid crashes on `layout_of`."}, {"sha": "54ab04f8c5d388e30f74824b15ae021513b7a646", "filename": "src/tools/clippy/tests/ui/transmute_ptr_to_ref.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3605675bb1b4f1fb65f80585ded2b62aea15bf2c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftransmute_ptr_to_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3605675bb1b4f1fb65f80585ded2b62aea15bf2c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftransmute_ptr_to_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftransmute_ptr_to_ref.stderr?ref=3605675bb1b4f1fb65f80585ded2b62aea15bf2c", "patch": "@@ -46,13 +46,13 @@ error: transmute from a pointer type (`*const i32`) to a reference type (`&issue\n   --> $DIR/transmute_ptr_to_ref.rs:32:32\n    |\n LL |     let _: &Foo<u8> = unsafe { std::mem::transmute::<_, &Foo<_>>(raw) };\n-   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*(raw as *const Foo<_>)`\n+   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*(raw as *const issue1231::Foo<u8>)`\n \n error: transmute from a pointer type (`*const i32`) to a reference type (`&issue1231::Foo<&u8>`)\n   --> $DIR/transmute_ptr_to_ref.rs:34:33\n    |\n LL |     let _: &Foo<&u8> = unsafe { std::mem::transmute::<_, &Foo<&_>>(raw) };\n-   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*(raw as *const Foo<&_>)`\n+   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*(raw as *const issue1231::Foo<&u8>)`\n \n error: transmute from a pointer type (`*const i32`) to a reference type (`&u8`)\n   --> $DIR/transmute_ptr_to_ref.rs:38:14"}]}