{"sha": "a813cc1bf190f9cdcd7dce2eba287c637ce4048f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4MTNjYzFiZjE5MGY5Y2RjZDdkY2UyZWJhMjg3YzYzN2NlNDA0OGY=", "commit": {"author": {"name": "csmoe", "email": "csmoe@msn.com", "date": "2019-09-21T03:17:57Z"}, "committer": {"name": "csmoe", "email": "csmoe@msn.com", "date": "2019-09-21T03:17:57Z"}, "message": "rename is_async_fn to asyncness", "tree": {"sha": "4ef07df95341cd37db30d0edf139cc2e183fdb75", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ef07df95341cd37db30d0edf139cc2e183fdb75"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a813cc1bf190f9cdcd7dce2eba287c637ce4048f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a813cc1bf190f9cdcd7dce2eba287c637ce4048f", "html_url": "https://github.com/rust-lang/rust/commit/a813cc1bf190f9cdcd7dce2eba287c637ce4048f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a813cc1bf190f9cdcd7dce2eba287c637ce4048f/comments", "author": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ffb1ce28cb1656d6142f1f9f6f882eb187fac25", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ffb1ce28cb1656d6142f1f9f6f882eb187fac25", "html_url": "https://github.com/rust-lang/rust/commit/9ffb1ce28cb1656d6142f1f9f6f882eb187fac25"}], "stats": {"total": 34, "additions": 13, "deletions": 21}, "files": [{"sha": "252e49d5d15f674c7ec15ca3e5158bda5193b286", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a813cc1bf190f9cdcd7dce2eba287c637ce4048f/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a813cc1bf190f9cdcd7dce2eba287c637ce4048f/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=a813cc1bf190f9cdcd7dce2eba287c637ce4048f", "patch": "@@ -244,7 +244,7 @@ rustc_queries! {\n             desc { |tcx| \"checking if item is const fn: `{}`\", tcx.def_path_str(key) }\n         }\n \n-        query is_async_fn(key: DefId) -> bool {\n+        query asyncness(key: DefId) -> hir::IsAsync {\n             desc { |tcx| \"checking if the function is async: `{}`\", tcx.def_path_str(key) }\n         }\n "}, {"sha": "dd36a4520929acf69ffdc9f4bad97d58f8d0473b", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a813cc1bf190f9cdcd7dce2eba287c637ce4048f/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a813cc1bf190f9cdcd7dce2eba287c637ce4048f/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=a813cc1bf190f9cdcd7dce2eba287c637ce4048f", "patch": "@@ -3349,16 +3349,17 @@ fn issue33140_self_ty(tcx: TyCtxt<'_>, def_id: DefId) -> Option<Ty<'_>> {\n     }\n }\n \n-fn is_async_fn(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n+/// Check if a function is async.\n+fn asyncness(tcx: TyCtxt<'_>, def_id: DefId) -> hir::IsAsync {\n     if let Some(hir_id) = tcx.hir().as_local_hir_id(def_id) {\n         let node = tcx.hir().get(hir_id);\n         if let Some(fn_like) = hir::map::blocks::FnLikeNode::from_node(node) {\n-             fn_like.asyncness() == hir::IsAsync::Async\n+             fn_like.asyncness()\n         } else {\n-            false\n+            hir::IsAsync::NotAsync\n         }\n     } else {\n-        false\n+        hir::IsAsync::NotAsync\n     }\n }\n \n@@ -3370,7 +3371,7 @@ pub fn provide(providers: &mut ty::query::Providers<'_>) {\n     util::provide(providers);\n     constness::provide(providers);\n     *providers = ty::query::Providers {\n-        is_async_fn,\n+        asyncness,\n         associated_item,\n         associated_item_def_ids,\n         adt_sized_constraint,"}, {"sha": "55cf3965aa85a69e3934e6994eca3a1ad8267f7c", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a813cc1bf190f9cdcd7dce2eba287c637ce4048f/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a813cc1bf190f9cdcd7dce2eba287c637ce4048f/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=a813cc1bf190f9cdcd7dce2eba287c637ce4048f", "patch": "@@ -133,7 +133,7 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     fn_sig => { cdata.fn_sig(def_id.index, tcx) }\n     inherent_impls => { cdata.get_inherent_implementations_for_type(tcx, def_id.index) }\n     is_const_fn_raw => { cdata.is_const_fn_raw(def_id.index) }\n-    is_async_fn => { cdata.is_async_fn(def_id.index) }\n+    asyncness => { cdata.asyncness(def_id.index) }\n     is_foreign_item => { cdata.is_foreign_item(def_id.index) }\n     static_mutability => { cdata.static_mutability(def_id.index) }\n     def_kind => { cdata.def_kind(def_id.index) }"}, {"sha": "5153564fc82557b1aeb37711da1a0f8b4517808d", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a813cc1bf190f9cdcd7dce2eba287c637ce4048f/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a813cc1bf190f9cdcd7dce2eba287c637ce4048f/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=a813cc1bf190f9cdcd7dce2eba287c637ce4048f", "patch": "@@ -1208,13 +1208,12 @@ impl<'a, 'tcx> CrateMetadata {\n         constness == hir::Constness::Const\n     }\n \n-    pub fn is_async_fn(&self, id: DefIndex) -> bool {\n-        let asyncness = match self.entry(id).kind {\n+    pub fn asyncness(&self, id: DefIndex) -> hir::IsAsync {\n+         match self.entry(id).kind {\n             EntryKind::Fn(data) => data.decode(self).asyncness,\n             EntryKind::Method(data) => data.decode(self).fn_data.asyncness,\n             _ => hir::IsAsync::NotAsync,\n-        };\n-        asyncness == hir::IsAsync::Async\n+        }\n     }\n \n     pub fn is_foreign_item(&self, id: DefIndex) -> bool {"}, {"sha": "d71acb4fa7b31d123ffaade9cceb8847993e5786", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a813cc1bf190f9cdcd7dce2eba287c637ce4048f/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a813cc1bf190f9cdcd7dce2eba287c637ce4048f/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=a813cc1bf190f9cdcd7dce2eba287c637ce4048f", "patch": "@@ -217,11 +217,7 @@ fn build_external_function(cx: &DocContext<'_>, did: DefId) -> clean::Function {\n     } else {\n         hir::Constness::NotConst\n     };\n-    let asyncness =  if cx.tcx.is_async_fn(did) {\n-        hir::IsAsync::Async\n-    } else {\n-        hir::IsAsync::NotAsync\n-    };\n+    let asyncness =  cx.tcx.asyncness(did);\n     let predicates = cx.tcx.predicates_of(did);\n     let (generics, decl) = clean::enter_impl_trait(cx, || {\n         ((cx.tcx.generics_of(did), &predicates).clean(cx), (did, sig).clean(cx))"}, {"sha": "95a5869e84510c8f66b2eb7fc093376d380d8760", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a813cc1bf190f9cdcd7dce2eba287c637ce4048f/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a813cc1bf190f9cdcd7dce2eba287c637ce4048f/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=a813cc1bf190f9cdcd7dce2eba287c637ce4048f", "patch": "@@ -2403,11 +2403,7 @@ impl Clean<Item> for ty::AssocItem {\n                     } else {\n                         hir::Constness::NotConst\n                     };\n-                    let asyncness = if cx.tcx.is_async_fn(self.def_id) {\n-                        hir::IsAsync::Async\n-                    } else {\n-                        hir::IsAsync::NotAsync\n-                    };\n+                    let asyncness = cx.tcx.asyncness(self.def_id);\n                     let defaultness = match self.container {\n                         ty::ImplContainer(_) => Some(self.defaultness),\n                         ty::TraitContainer(_) => None,"}]}