{"sha": "b2b72a08dbd18e384972dd835a93df9167380247", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyYjcyYTA4ZGJkMThlMzg0OTcyZGQ4MzVhOTNkZjkxNjczODAyNDc=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-08-25T19:07:03Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-08-25T19:08:05Z"}, "message": "Janitorial work on obj box / body / field terminology, following froystig's brave lead.", "tree": {"sha": "5a660cce5790a4ad28650bcbcf336ee44f68a46e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a660cce5790a4ad28650bcbcf336ee44f68a46e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b2b72a08dbd18e384972dd835a93df9167380247", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b2b72a08dbd18e384972dd835a93df9167380247", "html_url": "https://github.com/rust-lang/rust/commit/b2b72a08dbd18e384972dd835a93df9167380247", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b2b72a08dbd18e384972dd835a93df9167380247/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af6e1d2c2ba777622c21455f897bbc7a1c88372d", "url": "https://api.github.com/repos/rust-lang/rust/commits/af6e1d2c2ba777622c21455f897bbc7a1c88372d", "html_url": "https://github.com/rust-lang/rust/commit/af6e1d2c2ba777622c21455f897bbc7a1c88372d"}], "stats": {"total": 75, "additions": 40, "deletions": 35}, "files": [{"sha": "5dd6037bcc480df37e42a830419103a09109c96e", "filename": "src/boot/be/abi.ml", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b2b72a08dbd18e384972dd835a93df9167380247/src%2Fboot%2Fbe%2Fabi.ml", "raw_url": "https://github.com/rust-lang/rust/raw/b2b72a08dbd18e384972dd835a93df9167380247/src%2Fboot%2Fbe%2Fabi.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fbe%2Fabi.ml?ref=b2b72a08dbd18e384972dd835a93df9167380247", "patch": "@@ -47,13 +47,15 @@ let stk_field_data = stk_field_limit + 1;;\n \n (* Both obj and fn are two-word \"bindings\":  One word points to some\n  * static dispatch information (vtbl or thunk), and the other points to\n- * some bag of bound data (object-body or closure). *)\n+ * some bag of bound data (object-body or closure).\n+ *)\n \n let binding_field_dispatch = 0;;\n let binding_field_bound_data = 1;;\n \n let obj_field_vtbl = binding_field_dispatch;;\n-let obj_field_body_box = binding_field_bound_data;;\n+let obj_field_box = binding_field_bound_data;;\n+\n let obj_body_elt_tydesc = 0;;\n let obj_body_elt_fields = 1;;\n "}, {"sha": "202f35897e44cdf995e8fec1ace3e464f8ebf24f", "filename": "src/boot/be/x86.ml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2b72a08dbd18e384972dd835a93df9167380247/src%2Fboot%2Fbe%2Fx86.ml", "raw_url": "https://github.com/rust-lang/rust/raw/b2b72a08dbd18e384972dd835a93df9167380247/src%2Fboot%2Fbe%2Fx86.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fbe%2Fx86.ml?ref=b2b72a08dbd18e384972dd835a93df9167380247", "patch": "@@ -1055,7 +1055,7 @@ let rec calculate_sz (e:Il.emitter) (size:size) (in_obj:bool) : unit =\n \n     (* Bind all the referent types we'll need... *)\n \n-    let obj_body_rty = Semant.obj_closure_rty word_bits in\n+    let obj_box_rty = Semant.obj_box_rty word_bits in\n     let tydesc_rty = Semant.tydesc_rty word_bits in\n     (* Note that we cheat here and pretend only to have i+1 tydescs (because\n        we GEP to the i'th while still in this function, so no one outside\n@@ -1068,7 +1068,7 @@ let rec calculate_sz (e:Il.emitter) (size:size) (in_obj:bool) : unit =\n \n       mov (rc eax) (Il.Cell closure_ptr);\n       let obj_body = word_n (h eax) Abi.box_rc_field_body in\n-      let obj_body = Il.ptr_cast obj_body obj_body_rty in\n+      let obj_body = Il.ptr_cast obj_body obj_box_rty in\n       let tydesc_ptr = get_element_ptr obj_body Abi.obj_body_elt_tydesc in\n \n         mov (rc eax) (Il.Cell tydesc_ptr);"}, {"sha": "6cf03dfc1c43df7283d055647526c7bf6f53887e", "filename": "src/boot/me/semant.ml", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b2b72a08dbd18e384972dd835a93df9167380247/src%2Fboot%2Fme%2Fsemant.ml", "raw_url": "https://github.com/rust-lang/rust/raw/b2b72a08dbd18e384972dd835a93df9167380247/src%2Fboot%2Fme%2Fsemant.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Fsemant.ml?ref=b2b72a08dbd18e384972dd835a93df9167380247", "patch": "@@ -1878,7 +1878,10 @@ let tydesc_rty (word_bits:Il.bits) : Il.referent_ty =\n     |]\n ;;\n \n-let obj_closure_rty (word_bits:Il.bits) : Il.referent_ty =\n+(* \n+ * [ rc [ tydesc* | obj-body ] ]\n+ *)\n+let obj_box_rty (word_bits:Il.bits) : Il.referent_ty =\n   Il.StructTy [|\n     word_rty word_bits;\n     Il.StructTy [|\n@@ -1945,8 +1948,8 @@ let rec referent_type (word_bits:Il.bits) (t:Ast.ty) : Il.referent_ty =\n             Il.StructTy [| codeptr; fn_closure_ptr |]\n \n       | Ast.TY_obj _ ->\n-          let obj_closure_ptr = sp (obj_closure_rty word_bits) in\n-            Il.StructTy [| ptr; obj_closure_ptr |]\n+          let obj_box_ptr = sp (obj_box_rty word_bits) in\n+            Il.StructTy [| ptr; obj_box_ptr |]\n \n       | Ast.TY_tag ttag -> tag ttag\n       | Ast.TY_iso tiso -> tag tiso.Ast.iso_group.(tiso.Ast.iso_index)"}, {"sha": "2dccb023a603e32e41330af3fab2395e1bd2bdb2", "filename": "src/boot/me/trans.ml", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/b2b72a08dbd18e384972dd835a93df9167380247/src%2Fboot%2Fme%2Ftrans.ml", "raw_url": "https://github.com/rust-lang/rust/raw/b2b72a08dbd18e384972dd835a93df9167380247/src%2Fboot%2Fme%2Ftrans.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftrans.ml?ref=b2b72a08dbd18e384972dd835a93df9167380247", "patch": "@@ -459,7 +459,7 @@ let trans_visitor\n     in\n       deref (ptr_cast\n                (get_element_ptr indirect_args Abi.indirect_args_elt_closure)\n-               (Il.ScalarTy (Il.AddrTy (obj_closure_rty word_bits))))\n+               (Il.ScalarTy (Il.AddrTy (obj_box_rty word_bits))))\n   in\n \n   let fp_to_args (fp:Il.cell) (args_rty:Il.referent_ty): Il.cell =\n@@ -1236,7 +1236,7 @@ let trans_visitor\n     let fty = Hashtbl.find (snd caller) ident in\n     let self_args_rty =\n       call_args_referent_type cx 0\n-        (Ast.TY_fn fty) (Some (obj_closure_rty word_bits))\n+        (Ast.TY_fn fty) (Some (obj_box_rty word_bits))\n     in\n     let callsz = Il.referent_ty_size word_bits self_args_rty in\n     let spill = new_fixup \"forwarding fn spill\" in\n@@ -1891,8 +1891,8 @@ let trans_visitor\n     begin\n       match ty with\n           Ast.TY_obj _ ->\n-            let lhs_binding = get_element_ptr lhs Abi.obj_field_body_box in\n-            let rhs_binding = get_element_ptr rhs Abi.obj_field_body_box in\n+            let lhs_binding = get_element_ptr lhs Abi.obj_field_box in\n+            let rhs_binding = get_element_ptr rhs Abi.obj_field_box in\n             let lhs_box, rhs_box = deref lhs_binding, deref rhs_binding in\n             let lhs_obj = get_element_ptr lhs_box Abi.box_rc_field_body in\n             let rhs_obj = get_element_ptr rhs_box Abi.box_rc_field_body in\n@@ -2643,7 +2643,7 @@ let trans_visitor\n \n         | Ast.TY_obj _ ->\n             note_drop_step ty \"drop_ty: obj path\";\n-            let binding = get_element_ptr cell Abi.obj_field_body_box in\n+            let binding = get_element_ptr cell Abi.obj_field_box in\n             let null_jmp = null_check binding in\n             let rc_jmp = drop_refcount_and_cmp binding in\n             let obj_box = deref binding in\n@@ -4948,14 +4948,14 @@ let trans_visitor\n         all_args_cell Abi.calltup_elt_ty_params\n     in\n \n-    let obj_args_tup =\n+    let obj_fields_tup =\n       Array.map (fun (sloti,_) -> (slot_ty sloti.node)) header\n     in\n-    let obj_args_ty = Ast.TY_tup obj_args_tup in\n-    let state_ty = Ast.TY_tup [| Ast.TY_type; obj_args_ty |] in\n-    let state_ptr_ty = Ast.TY_box state_ty in\n-    let state_ptr_rty = referent_type word_bits state_ptr_ty in\n-    let state_malloc_sz = box_allocation_size state_ptr_ty in\n+    let obj_fields_ty = Ast.TY_tup obj_fields_tup in\n+    let obj_body_ty = Ast.TY_tup [| Ast.TY_type; obj_fields_ty |] in\n+    let box_ptr_ty = Ast.TY_box obj_body_ty in\n+    let box_ptr_rty = referent_type word_bits box_ptr_ty in\n+    let box_malloc_sz = box_allocation_size box_ptr_ty in\n \n     let ctor_ty = Hashtbl.find cx.ctxt_all_item_types obj_id in\n     let obj_ty =\n@@ -4973,48 +4973,48 @@ let trans_visitor\n     let dst_pair_item_cell =\n       get_element_ptr dst_pair_cell Abi.obj_field_vtbl\n     in\n-    let dst_pair_state_cell =\n-      get_element_ptr dst_pair_cell Abi.obj_field_body_box\n+    let dst_pair_box_cell =\n+      get_element_ptr dst_pair_cell Abi.obj_field_box\n     in\n \n       (* Load first cell of pair with vtbl ptr.*)\n       iflog (fun _ -> annotate \"mov vtbl-ptr to obj.item cell\");\n       mov dst_pair_item_cell (Il.Cell vtbl_cell);\n \n-      (* Load second cell of pair with pointer to fresh state tuple.*)\n-      iflog (fun _ -> annotate \"malloc state-tuple to obj.state cell\");\n-      trans_malloc dst_pair_state_cell state_malloc_sz zero;\n+      (* Load second cell of pair with pointer to fresh body tuple.*)\n+      iflog (fun _ -> annotate \"malloc state-tuple to obj.box-ptr cell\");\n+      trans_malloc dst_pair_box_cell box_malloc_sz zero;\n \n-      (* Copy args into the state tuple. *)\n-      let state_ptr = next_vreg_cell (need_scalar_ty state_ptr_rty) in\n-        iflog (fun _ -> annotate \"load obj.state ptr to vreg\");\n-        mov state_ptr (Il.Cell dst_pair_state_cell);\n-        let state = deref state_ptr in\n+      (* Copy rc, tydesc, args into the obj. *)\n+      let box_ptr = next_vreg_cell (need_scalar_ty box_ptr_rty) in\n+        iflog (fun _ -> annotate \"load obj.box ptr to vreg\");\n+        mov box_ptr (Il.Cell dst_pair_box_cell);\n+        let box = deref box_ptr in\n         let refcnt =\n-          get_element_ptr_dyn_in_current_frame state\n+          get_element_ptr_dyn_in_current_frame box\n             Abi.box_rc_field_refcnt\n         in\n         let body =\n-          get_element_ptr_dyn_in_current_frame state\n+          get_element_ptr_dyn_in_current_frame box\n             Abi.box_rc_field_body\n         in\n         let obj_tydesc =\n           get_element_ptr_dyn_in_current_frame body Abi.obj_body_elt_tydesc\n         in\n-        let obj_args =\n+        let obj_fields =\n           get_element_ptr_dyn_in_current_frame body Abi.obj_body_elt_fields\n         in\n-          iflog (fun _ -> annotate \"write refcnt=1 to obj state\");\n+          iflog (fun _ -> annotate \"write refcnt=1 to obj box\");\n           mov refcnt one;\n-          iflog (fun _ -> annotate \"get args-tup tydesc\");\n+          iflog (fun _ -> annotate \"write tydesc to obj body\");\n           mov obj_tydesc\n             (Il.Cell (get_tydesc\n                         (Some obj_id)\n-                        (Ast.TY_tup obj_args_tup)));\n+                        (Ast.TY_tup obj_fields_tup)));\n           iflog (fun _ -> annotate \"copy ctor args to obj args\");\n           trans_copy_tup\n             frame_ty_params true\n-            obj_args frame_args obj_args_tup;\n+            obj_fields frame_args obj_fields_tup;\n           (* We have to do something curious here: we can't drop the\n            * arg slots directly as in the normal frame-exit sequence,\n            * because the arg slot ids are actually given layout"}]}