{"sha": "19e78020bd54d97c670a1bcfb187dffd2b79a3fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5ZTc4MDIwYmQ1NGQ5N2M2NzBhMWJjZmIxODdkZmZkMmI3OWEzZmE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-17T13:54:40Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-17T13:54:40Z"}, "message": "Remove insta for ra_hir_def", "tree": {"sha": "ba069b9ecb7f73d3131aee935ab72b356f63501f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba069b9ecb7f73d3131aee935ab72b356f63501f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19e78020bd54d97c670a1bcfb187dffd2b79a3fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19e78020bd54d97c670a1bcfb187dffd2b79a3fa", "html_url": "https://github.com/rust-lang/rust/commit/19e78020bd54d97c670a1bcfb187dffd2b79a3fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19e78020bd54d97c670a1bcfb187dffd2b79a3fa/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "798f43da502e4b8d52e9b907420708d956faa054", "url": "https://api.github.com/repos/rust-lang/rust/commits/798f43da502e4b8d52e9b907420708d956faa054", "html_url": "https://github.com/rust-lang/rust/commit/798f43da502e4b8d52e9b907420708d956faa054"}], "stats": {"total": 334, "additions": 169, "deletions": 165}, "files": [{"sha": "d341d10544a33c152bba0d7cfc399f4ead1a508d", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/19e78020bd54d97c670a1bcfb187dffd2b79a3fa/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/19e78020bd54d97c670a1bcfb187dffd2b79a3fa/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=19e78020bd54d97c670a1bcfb187dffd2b79a3fa", "patch": "@@ -1111,7 +1111,6 @@ dependencies = [\n  \"expect\",\n  \"fst\",\n  \"indexmap\",\n- \"insta\",\n  \"itertools\",\n  \"log\",\n  \"once_cell\","}, {"sha": "d96a86b80f0ced2a01eb73a05ba2e8efb32a2d4a", "filename": "crates/ra_hir_def/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/19e78020bd54d97c670a1bcfb187dffd2b79a3fa/crates%2Fra_hir_def%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/19e78020bd54d97c670a1bcfb187dffd2b79a3fa/crates%2Fra_hir_def%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2FCargo.toml?ref=19e78020bd54d97c670a1bcfb187dffd2b79a3fa", "patch": "@@ -33,5 +33,4 @@ ra_cfg = { path = \"../ra_cfg\" }\n tt = { path = \"../ra_tt\", package = \"ra_tt\" }\n \n [dev-dependencies]\n-insta = \"0.16.0\"\n expect = { path = \"../expect\" }"}, {"sha": "9e4c30b1abf1c169d43a1e2f352f67b185fab3ce", "filename": "crates/ra_hir_def/src/import_map.rs", "status": "modified", "additions": 154, "deletions": 146, "changes": 300, "blob_url": "https://github.com/rust-lang/rust/blob/19e78020bd54d97c670a1bcfb187dffd2b79a3fa/crates%2Fra_hir_def%2Fsrc%2Fimport_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19e78020bd54d97c670a1bcfb187dffd2b79a3fa/crates%2Fra_hir_def%2Fsrc%2Fimport_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fimport_map.rs?ref=19e78020bd54d97c670a1bcfb187dffd2b79a3fa", "patch": "@@ -327,32 +327,14 @@ pub fn search_dependencies<'a>(\n \n #[cfg(test)]\n mod tests {\n-    use super::*;\n-    use crate::{test_db::TestDB, AssocContainerId, Lookup};\n-    use insta::assert_snapshot;\n-    use itertools::Itertools;\n-    use ra_db::fixture::WithFixture;\n-    use ra_db::{SourceDatabase, Upcast};\n+    use expect::{expect, Expect};\n+    use ra_db::{fixture::WithFixture, SourceDatabase, Upcast};\n \n-    fn import_map(ra_fixture: &str) -> String {\n-        let db = TestDB::with_files(ra_fixture);\n-        let crate_graph = db.crate_graph();\n-\n-        let s = crate_graph\n-            .iter()\n-            .filter_map(|krate| {\n-                let cdata = &crate_graph[krate];\n-                let name = cdata.display_name.as_ref()?;\n-\n-                let map = db.import_map(krate);\n+    use crate::{test_db::TestDB, AssocContainerId, Lookup};\n \n-                Some(format!(\"{}:\\n{:?}\", name, map))\n-            })\n-            .join(\"\\n\");\n-        s\n-    }\n+    use super::*;\n \n-    fn search_dependencies_of(ra_fixture: &str, krate_name: &str, query: Query) -> String {\n+    fn check_search(ra_fixture: &str, krate_name: &str, query: Query, expect: Expect) {\n         let db = TestDB::with_files(ra_fixture);\n         let crate_graph = db.crate_graph();\n         let krate = crate_graph\n@@ -363,7 +345,7 @@ mod tests {\n             })\n             .unwrap();\n \n-        search_dependencies(db.upcast(), krate, query)\n+        let actual = search_dependencies(db.upcast(), krate, query)\n             .into_iter()\n             .filter_map(|item| {\n                 let mark = match item {\n@@ -376,14 +358,15 @@ mod tests {\n                     let map = db.import_map(krate);\n                     let path = map.path_of(item).unwrap();\n                     format!(\n-                        \"{}::{} ({})\",\n+                        \"{}::{} ({})\\n\",\n                         crate_graph[krate].display_name.as_ref().unwrap(),\n                         path,\n                         mark\n                     )\n                 })\n             })\n-            .join(\"\\n\")\n+            .collect::<String>();\n+        expect.assert_eq(&actual)\n     }\n \n     fn assoc_to_trait(db: &dyn DefDatabase, item: ItemInNs) -> ItemInNs {\n@@ -409,9 +392,28 @@ mod tests {\n         }\n     }\n \n+    fn check(ra_fixture: &str, expect: Expect) {\n+        let db = TestDB::with_files(ra_fixture);\n+        let crate_graph = db.crate_graph();\n+\n+        let actual = crate_graph\n+            .iter()\n+            .filter_map(|krate| {\n+                let cdata = &crate_graph[krate];\n+                let name = cdata.display_name.as_ref()?;\n+\n+                let map = db.import_map(krate);\n+\n+                Some(format!(\"{}:\\n{:?}\\n\", name, map))\n+            })\n+            .collect::<String>();\n+\n+        expect.assert_eq(&actual)\n+    }\n+\n     #[test]\n     fn smoke() {\n-        let map = import_map(\n+        check(\n             r\"\n             //- /main.rs crate:main deps:lib\n \n@@ -436,24 +438,23 @@ mod tests {\n             pub struct Pub2; // t + v\n             struct Priv;\n         \",\n+            expect![[r#\"\n+                main:\n+                - publ1 (t)\n+                - real_pu2 (t)\n+                - real_pub (t)\n+                - real_pub::Pub (t)\n+                lib:\n+                - Pub (t)\n+                - Pub2 (t)\n+                - Pub2 (v)\n+            \"#]],\n         );\n-\n-        assert_snapshot!(map, @r###\"\n-        main:\n-        - publ1 (t)\n-        - real_pu2 (t)\n-        - real_pub (t)\n-        - real_pub::Pub (t)\n-        lib:\n-        - Pub (t)\n-        - Pub2 (t)\n-        - Pub2 (v)\n-        \"###);\n     }\n \n     #[test]\n     fn prefers_shortest_path() {\n-        let map = import_map(\n+        check(\n             r\"\n             //- /main.rs crate:main\n \n@@ -465,21 +466,20 @@ mod tests {\n                 pub use super::sub::subsub::Def;\n             }\n         \",\n+            expect![[r#\"\n+                main:\n+                - sub (t)\n+                - sub::Def (t)\n+                - sub::subsub (t)\n+            \"#]],\n         );\n-\n-        assert_snapshot!(map, @r###\"\n-        main:\n-        - sub (t)\n-        - sub::Def (t)\n-        - sub::subsub (t)\n-        \"###);\n     }\n \n     #[test]\n     fn type_reexport_cross_crate() {\n         // Reexports need to be visible from a crate, even if the original crate exports the item\n         // at a shorter path.\n-        let map = import_map(\n+        check(\n             r\"\n             //- /main.rs crate:main deps:lib\n             pub mod m {\n@@ -488,22 +488,21 @@ mod tests {\n             //- /lib.rs crate:lib\n             pub struct S;\n         \",\n+            expect![[r#\"\n+                main:\n+                - m (t)\n+                - m::S (t)\n+                - m::S (v)\n+                lib:\n+                - S (t)\n+                - S (v)\n+            \"#]],\n         );\n-\n-        assert_snapshot!(map, @r###\"\n-        main:\n-        - m (t)\n-        - m::S (t)\n-        - m::S (v)\n-        lib:\n-        - S (t)\n-        - S (v)\n-        \"###);\n     }\n \n     #[test]\n     fn macro_reexport() {\n-        let map = import_map(\n+        check(\n             r\"\n             //- /main.rs crate:main deps:lib\n             pub mod m {\n@@ -515,21 +514,20 @@ mod tests {\n                 () => {};\n             }\n         \",\n+            expect![[r#\"\n+                main:\n+                - m (t)\n+                - m::pub_macro (m)\n+                lib:\n+                - pub_macro (m)\n+            \"#]],\n         );\n-\n-        assert_snapshot!(map, @r###\"\n-        main:\n-        - m (t)\n-        - m::pub_macro (m)\n-        lib:\n-        - pub_macro (m)\n-        \"###);\n     }\n \n     #[test]\n     fn module_reexport() {\n         // Reexporting modules from a dependency adds all contents to the import map.\n-        let map = import_map(\n+        check(\n             r\"\n             //- /main.rs crate:main deps:lib\n             pub use lib::module as reexported_module;\n@@ -538,24 +536,23 @@ mod tests {\n                 pub struct S;\n             }\n         \",\n+            expect![[r#\"\n+                main:\n+                - reexported_module (t)\n+                - reexported_module::S (t)\n+                - reexported_module::S (v)\n+                lib:\n+                - module (t)\n+                - module::S (t)\n+                - module::S (v)\n+            \"#]],\n         );\n-\n-        assert_snapshot!(map, @r###\"\n-        main:\n-        - reexported_module (t)\n-        - reexported_module::S (t)\n-        - reexported_module::S (v)\n-        lib:\n-        - module (t)\n-        - module::S (t)\n-        - module::S (v)\n-        \"###);\n     }\n \n     #[test]\n     fn cyclic_module_reexport() {\n         // A cyclic reexport does not hang.\n-        let map = import_map(\n+        check(\n             r\"\n             //- /lib.rs crate:lib\n             pub mod module {\n@@ -567,36 +564,35 @@ mod tests {\n                 pub use super::module;\n             }\n         \",\n+            expect![[r#\"\n+                lib:\n+                - module (t)\n+                - module::S (t)\n+                - module::S (v)\n+                - sub (t)\n+            \"#]],\n         );\n-\n-        assert_snapshot!(map, @r###\"\n-        lib:\n-        - module (t)\n-        - module::S (t)\n-        - module::S (v)\n-        - sub (t)\n-        \"###);\n     }\n \n     #[test]\n     fn private_macro() {\n-        let map = import_map(\n+        check(\n             r\"\n             //- /lib.rs crate:lib\n             macro_rules! private_macro {\n                 () => {};\n             }\n         \",\n-        );\n+            expect![[r#\"\n+                lib:\n \n-        assert_snapshot!(map, @r###\"\n-        lib:\n-        \"###);\n+            \"#]],\n+        );\n     }\n \n     #[test]\n     fn namespacing() {\n-        let map = import_map(\n+        check(\n             r\"\n             //- /lib.rs crate:lib\n             pub struct Thing;     // t + v\n@@ -605,16 +601,15 @@ mod tests {\n                 () => {};\n             }\n         \",\n+            expect![[r#\"\n+                lib:\n+                - Thing (m)\n+                - Thing (t)\n+                - Thing (v)\n+            \"#]],\n         );\n \n-        assert_snapshot!(map, @r###\"\n-        lib:\n-        - Thing (m)\n-        - Thing (t)\n-        - Thing (v)\n-        \"###);\n-\n-        let map = import_map(\n+        check(\n             r\"\n             //- /lib.rs crate:lib\n             pub mod Thing {}      // t\n@@ -623,13 +618,12 @@ mod tests {\n                 () => {};\n             }\n         \",\n+            expect![[r#\"\n+                lib:\n+                - Thing (m)\n+                - Thing (t)\n+            \"#]],\n         );\n-\n-        assert_snapshot!(map, @r###\"\n-        lib:\n-        - Thing (m)\n-        - Thing (t)\n-        \"###);\n     }\n \n     #[test]\n@@ -658,25 +652,33 @@ mod tests {\n             }\n         \"#;\n \n-        let res = search_dependencies_of(ra_fixture, \"main\", Query::new(\"fmt\"));\n-        assert_snapshot!(res, @r###\"\n-        dep::fmt (t)\n-        dep::Fmt (t)\n-        dep::Fmt (v)\n-        dep::Fmt (m)\n-        dep::fmt::Display (t)\n-        dep::format (v)\n-        dep::fmt::Display (t)\n-        \"###);\n-\n-        let res = search_dependencies_of(ra_fixture, \"main\", Query::new(\"fmt\").anchor_end());\n-        assert_snapshot!(res, @r###\"\n-        dep::fmt (t)\n-        dep::Fmt (t)\n-        dep::Fmt (v)\n-        dep::Fmt (m)\n-        dep::fmt::Display (t)\n-        \"###);\n+        check_search(\n+            ra_fixture,\n+            \"main\",\n+            Query::new(\"fmt\"),\n+            expect![[r#\"\n+                dep::fmt (t)\n+                dep::Fmt (t)\n+                dep::Fmt (v)\n+                dep::Fmt (m)\n+                dep::fmt::Display (t)\n+                dep::format (v)\n+                dep::fmt::Display (t)\n+            \"#]],\n+        );\n+\n+        check_search(\n+            ra_fixture,\n+            \"main\",\n+            Query::new(\"fmt\").anchor_end(),\n+            expect![[r#\"\n+                dep::fmt (t)\n+                dep::Fmt (t)\n+                dep::Fmt (v)\n+                dep::Fmt (m)\n+                dep::fmt::Display (t)\n+            \"#]],\n+        );\n     }\n \n     #[test]\n@@ -689,26 +691,32 @@ mod tests {\n             pub struct FMT;\n         \"#;\n \n-        let res = search_dependencies_of(ra_fixture, \"main\", Query::new(\"FMT\"));\n-\n-        assert_snapshot!(res, @r###\"\n-        dep::fmt (t)\n-        dep::fmt (v)\n-        dep::FMT (t)\n-        dep::FMT (v)\n-        \"###);\n-\n-        let res = search_dependencies_of(ra_fixture, \"main\", Query::new(\"FMT\").case_sensitive());\n+        check_search(\n+            ra_fixture,\n+            \"main\",\n+            Query::new(\"FMT\"),\n+            expect![[r#\"\n+                dep::fmt (t)\n+                dep::fmt (v)\n+                dep::FMT (t)\n+                dep::FMT (v)\n+            \"#]],\n+        );\n \n-        assert_snapshot!(res, @r###\"\n-        dep::FMT (t)\n-        dep::FMT (v)\n-        \"###);\n+        check_search(\n+            ra_fixture,\n+            \"main\",\n+            Query::new(\"FMT\").case_sensitive(),\n+            expect![[r#\"\n+                dep::FMT (t)\n+                dep::FMT (v)\n+            \"#]],\n+        );\n     }\n \n     #[test]\n     fn search_limit() {\n-        let res = search_dependencies_of(\n+        check_search(\n             r#\"\n         //- /main.rs crate:main deps:dep\n         //- /dep.rs crate:dep\n@@ -728,10 +736,10 @@ mod tests {\n     \"#,\n             \"main\",\n             Query::new(\"\").limit(2),\n+            expect![[r#\"\n+                dep::fmt (t)\n+                dep::Fmt (t)\n+            \"#]],\n         );\n-        assert_snapshot!(res, @r###\"\n-        dep::fmt (t)\n-        dep::Fmt (t)\n-        \"###);\n     }\n }"}, {"sha": "ae58948c4261e73faf42fcae063d2e290fafc4fc", "filename": "crates/ra_hir_def/src/nameres/tests/mod_resolution.rs", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/19e78020bd54d97c670a1bcfb187dffd2b79a3fa/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fmod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19e78020bd54d97c670a1bcfb187dffd2b79a3fa/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fmod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fmod_resolution.rs?ref=19e78020bd54d97c670a1bcfb187dffd2b79a3fa", "patch": "@@ -686,27 +686,25 @@ fn unresolved_module_diagnostics() {\n \n     let crate_def_map = db.crate_def_map(krate);\n \n-    insta::assert_debug_snapshot!(\n-        crate_def_map.diagnostics,\n-        @r###\"\n-    [\n-        UnresolvedModule {\n-            module: Idx::<ModuleData>(0),\n-            declaration: InFile {\n-                file_id: HirFileId(\n-                    FileId(\n+    expect![[r#\"\n+        [\n+            UnresolvedModule {\n+                module: Idx::<ModuleData>(0),\n+                declaration: InFile {\n+                    file_id: HirFileId(\n                         FileId(\n-                            0,\n+                            FileId(\n+                                0,\n+                            ),\n                         ),\n                     ),\n-                ),\n-                value: FileAstId::<ra_syntax::ast::generated::nodes::Module>(1),\n+                    value: FileAstId::<ra_syntax::ast::generated::nodes::Module>(1),\n+                },\n+                candidate: \"bar.rs\",\n             },\n-            candidate: \"bar.rs\",\n-        },\n-    ]\n-    \"###\n-    );\n+        ]\n+    \"#]]\n+    .assert_debug_eq(&crate_def_map.diagnostics);\n }\n \n #[test]"}]}