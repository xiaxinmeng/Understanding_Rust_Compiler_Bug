{"sha": "bcb610da7fae8297689883782601ecb8645604e2", "node_id": "C_kwDOAAsO6NoAKGJjYjYxMGRhN2ZhZTgyOTc2ODk4ODM3ODI2MDFlY2I4NjQ1NjA0ZTI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-01T06:23:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-01T06:23:19Z"}, "message": "Auto merge of #108587 - matthiaskrgr:rollup-rw6po59, r=matthiaskrgr\n\nRollup of 10 pull requests\n\nSuccessful merges:\n\n - #108376 (compiler/rustc_session: fix sysroot detection logic)\n - #108400 (add llvm cgu instructions stats to perf)\n - #108496 (fix #108495, postfix decrement and prefix decrement has no warning)\n - #108505 (Further unify validity intrinsics)\n - #108520 (Small cleanup to `one_bound_for_assoc_type`)\n - #108560 (Some `infer/mod.rs` cleanups)\n - #108563 (Make mailmap more correct)\n - #108564 (Fix `x clean` with specific paths)\n - #108571 (Add contains_key to SortedIndexMultiMap)\n - #108578 (Update Fuchsia platform team members)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "322f92893bf5d1856feab6d6ea44f308b0bea092", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/322f92893bf5d1856feab6d6ea44f308b0bea092"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bcb610da7fae8297689883782601ecb8645604e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bcb610da7fae8297689883782601ecb8645604e2", "html_url": "https://github.com/rust-lang/rust/commit/bcb610da7fae8297689883782601ecb8645604e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bcb610da7fae8297689883782601ecb8645604e2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5983a3a99ea631da9d7d1ce510a6761913f92a89", "url": "https://api.github.com/repos/rust-lang/rust/commits/5983a3a99ea631da9d7d1ce510a6761913f92a89", "html_url": "https://github.com/rust-lang/rust/commit/5983a3a99ea631da9d7d1ce510a6761913f92a89"}, {"sha": "cd5352dbce21a71cad920c5e9efe9edfd6555147", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd5352dbce21a71cad920c5e9efe9edfd6555147", "html_url": "https://github.com/rust-lang/rust/commit/cd5352dbce21a71cad920c5e9efe9edfd6555147"}], "stats": {"total": 570, "additions": 343, "deletions": 227}, "files": [{"sha": "715bc4d30855ebb638ab7f524db727c2391abbc5", "filename": ".mailmap", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcb610da7fae8297689883782601ecb8645604e2/.mailmap", "raw_url": "https://github.com/rust-lang/rust/raw/bcb610da7fae8297689883782601ecb8645604e2/.mailmap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.mailmap?ref=bcb610da7fae8297689883782601ecb8645604e2", "patch": "@@ -15,7 +15,7 @@ Adrien T\u00e9tar <adri-from-59@hotmail.fr>\n Ahmed Charles <ahmedcharles@gmail.com> <acharles@outlook.com>\n Alan Egerton <eggyal@gmail.com>\n Alan Stoate <alan.stoate@gmail.com>\n-Albert Larsan <albert.larsan@gmail.com> Albert Larsan <74931857+albertlarsan68@users.noreply.github.com>\n+Albert Larsan <albert.larsan@gmail.com> <74931857+albertlarsan68@users.noreply.github.com>\n Alessandro Decina <alessandro.d@gmail.com>\n Alex Burka <durka42+github@gmail.com> Alex Burka <aburka@seas.upenn.edu>\n Alex Hansen <ahansen2@trinity.edu>"}, {"sha": "917aa5a73a07febee41d8d280525db5e244cbe80", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcb610da7fae8297689883782601ecb8645604e2/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/bcb610da7fae8297689883782601ecb8645604e2/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=bcb610da7fae8297689883782601ecb8645604e2", "patch": "@@ -3801,6 +3801,8 @@ dependencies = [\n  \"rustc_span\",\n  \"rustc_symbol_mangling\",\n  \"rustc_target\",\n+ \"serde\",\n+ \"serde_json\",\n  \"smallvec\",\n  \"tempfile\",\n  \"tracing\","}, {"sha": "e74aabf2fcb0d3a643ef277018de8d1b306c5a37", "filename": "compiler/rustc_codegen_cranelift/src/intrinsics/mod.rs", "status": "modified", "additions": 31, "deletions": 49, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/bcb610da7fae8297689883782601ecb8645604e2/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb610da7fae8297689883782601ecb8645604e2/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs?ref=bcb610da7fae8297689883782601ecb8645604e2", "patch": "@@ -22,7 +22,7 @@ pub(crate) use cpuid::codegen_cpuid_call;\n pub(crate) use llvm::codegen_llvm_intrinsic_call;\n \n use rustc_middle::ty;\n-use rustc_middle::ty::layout::{HasParamEnv, InitKind};\n+use rustc_middle::ty::layout::{HasParamEnv, ValidityRequirement};\n use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_span::symbol::{kw, sym, Symbol};\n@@ -628,57 +628,39 @@ fn codegen_regular_intrinsic_call<'tcx>(\n             intrinsic_args!(fx, args => (); intrinsic);\n \n             let ty = substs.type_at(0);\n-            let layout = fx.layout_of(ty);\n-            if layout.abi.is_uninhabited() {\n-                with_no_trimmed_paths!({\n-                    crate::base::codegen_panic_nounwind(\n-                        fx,\n-                        &format!(\"attempted to instantiate uninhabited type `{}`\", layout.ty),\n-                        source_info,\n-                    )\n-                });\n-                return;\n-            }\n \n-            if intrinsic == sym::assert_zero_valid\n-                && !fx\n-                    .tcx\n-                    .check_validity_of_init((InitKind::Zero, fx.param_env().and(ty)))\n-                    .expect(\"expected to have layout during codegen\")\n-            {\n-                with_no_trimmed_paths!({\n-                    crate::base::codegen_panic_nounwind(\n-                        fx,\n-                        &format!(\n-                            \"attempted to zero-initialize type `{}`, which is invalid\",\n-                            layout.ty\n-                        ),\n-                        source_info,\n-                    );\n-                });\n-                return;\n-            }\n+            let requirement = ValidityRequirement::from_intrinsic(intrinsic);\n \n-            if intrinsic == sym::assert_mem_uninitialized_valid\n-                && !fx\n+            if let Some(requirement) = requirement {\n+                let do_panic = !fx\n                     .tcx\n-                    .check_validity_of_init((\n-                        InitKind::UninitMitigated0x01Fill,\n-                        fx.param_env().and(ty),\n-                    ))\n-                    .expect(\"expected to have layout during codegen\")\n-            {\n-                with_no_trimmed_paths!({\n-                    crate::base::codegen_panic_nounwind(\n-                        fx,\n-                        &format!(\n-                            \"attempted to leave type `{}` uninitialized, which is invalid\",\n-                            layout.ty\n-                        ),\n-                        source_info,\n-                    )\n-                });\n-                return;\n+                    .check_validity_requirement((requirement, fx.param_env().and(ty)))\n+                    .expect(\"expect to have layout during codegen\");\n+\n+                if do_panic {\n+                    let layout = fx.layout_of(ty);\n+\n+                    with_no_trimmed_paths!({\n+                        crate::base::codegen_panic_nounwind(\n+                            fx,\n+                            &if layout.abi.is_uninhabited() {\n+                                format!(\"attempted to instantiate uninhabited type `{}`\", layout.ty)\n+                            } else if requirement == ValidityRequirement::Zero {\n+                                format!(\n+                                    \"attempted to zero-initialize type `{}`, which is invalid\",\n+                                    layout.ty\n+                                )\n+                            } else {\n+                                format!(\n+                                    \"attempted to leave type `{}` uninitialized, which is invalid\",\n+                                    layout.ty\n+                                )\n+                            },\n+                            source_info,\n+                        )\n+                    });\n+                    return;\n+                }\n             }\n         }\n "}, {"sha": "a7ba2f8b69533d8a7f6048671845ee78f77a8763", "filename": "compiler/rustc_codegen_llvm/Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcb610da7fae8297689883782601ecb8645604e2/compiler%2Frustc_codegen_llvm%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/bcb610da7fae8297689883782601ecb8645604e2/compiler%2Frustc_codegen_llvm%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2FCargo.toml?ref=bcb610da7fae8297689883782601ecb8645604e2", "patch": "@@ -36,3 +36,5 @@ smallvec = { version = \"1.8.1\", features = [\"union\", \"may_dangle\"] }\n rustc_ast = { path = \"../rustc_ast\" }\n rustc_span = { path = \"../rustc_span\" }\n tempfile = \"3.2.0\"\n+serde = { version = \"1\", features = [ \"derive\" ]}\n+serde_json = \"1\""}, {"sha": "a4ae1b01e869d48428d5af05b75df55bc1647d71", "filename": "compiler/rustc_codegen_llvm/src/back/write.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/bcb610da7fae8297689883782601ecb8645604e2/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb610da7fae8297689883782601ecb8645604e2/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs?ref=bcb610da7fae8297689883782601ecb8645604e2", "patch": "@@ -761,6 +761,7 @@ pub(crate) unsafe fn codegen(\n             EmitObj::None => {}\n         }\n \n+        record_llvm_cgu_instructions_stats(&cgcx.prof, llmod);\n         drop(handlers);\n     }\n \n@@ -974,3 +975,23 @@ fn record_artifact_size(\n         self_profiler_ref.artifact_size(artifact_kind, artifact_name.to_string_lossy(), file_size);\n     }\n }\n+\n+fn record_llvm_cgu_instructions_stats(prof: &SelfProfilerRef, llmod: &llvm::Module) {\n+    if !prof.enabled() {\n+        return;\n+    }\n+\n+    let raw_stats =\n+        llvm::build_string(|s| unsafe { llvm::LLVMRustModuleInstructionStats(&llmod, s) })\n+            .expect(\"cannot get module instruction stats\");\n+\n+    #[derive(serde::Deserialize)]\n+    struct InstructionsStats {\n+        module: String,\n+        total: u64,\n+    }\n+\n+    let InstructionsStats { module, total } =\n+        serde_json::from_str(&raw_stats).expect(\"cannot parse llvm cgu instructions stats\");\n+    prof.artifact_size(\"cgu_instructions\", module, total);\n+}"}, {"sha": "1b3ce2e83a979e5e01607546fcb7164854ac6ef8", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcb610da7fae8297689883782601ecb8645604e2/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb610da7fae8297689883782601ecb8645604e2/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=bcb610da7fae8297689883782601ecb8645604e2", "patch": "@@ -2410,6 +2410,8 @@ extern \"C\" {\n     pub fn LLVMRustModuleBufferLen(p: &ModuleBuffer) -> usize;\n     pub fn LLVMRustModuleBufferFree(p: &'static mut ModuleBuffer);\n     pub fn LLVMRustModuleCost(M: &Module) -> u64;\n+    #[allow(improper_ctypes)]\n+    pub fn LLVMRustModuleInstructionStats(M: &Module, Str: &RustString);\n \n     pub fn LLVMRustThinLTOBufferCreate(M: &Module, is_thin: bool) -> &'static mut ThinLTOBuffer;\n     pub fn LLVMRustThinLTOBufferFree(M: &'static mut ThinLTOBuffer);"}, {"sha": "57a19a4ab1eab8250e1c0e05a2d874c308c761a3", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 11, "deletions": 31, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/bcb610da7fae8297689883782601ecb8645604e2/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb610da7fae8297689883782601ecb8645604e2/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=bcb610da7fae8297689883782601ecb8645604e2", "patch": "@@ -14,7 +14,7 @@ use rustc_ast::{InlineAsmOptions, InlineAsmTemplatePiece};\n use rustc_hir::lang_items::LangItem;\n use rustc_index::vec::Idx;\n use rustc_middle::mir::{self, AssertKind, SwitchTargets};\n-use rustc_middle::ty::layout::{HasTyCtxt, InitKind, LayoutOf};\n+use rustc_middle::ty::layout::{HasTyCtxt, LayoutOf, ValidityRequirement};\n use rustc_middle::ty::print::{with_no_trimmed_paths, with_no_visible_paths};\n use rustc_middle::ty::{self, Instance, Ty, TypeVisitableExt};\n use rustc_session::config::OptLevel;\n@@ -655,44 +655,24 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         // Emit a panic or a no-op for `assert_*` intrinsics.\n         // These are intrinsics that compile to panics so that we can get a message\n         // which mentions the offending type, even from a const context.\n-        #[derive(Debug, PartialEq)]\n-        enum AssertIntrinsic {\n-            Inhabited,\n-            ZeroValid,\n-            MemUninitializedValid,\n-        }\n-        let panic_intrinsic = intrinsic.and_then(|i| match i {\n-            sym::assert_inhabited => Some(AssertIntrinsic::Inhabited),\n-            sym::assert_zero_valid => Some(AssertIntrinsic::ZeroValid),\n-            sym::assert_mem_uninitialized_valid => Some(AssertIntrinsic::MemUninitializedValid),\n-            _ => None,\n-        });\n-        if let Some(intrinsic) = panic_intrinsic {\n-            use AssertIntrinsic::*;\n-\n+        let panic_intrinsic = intrinsic.and_then(|s| ValidityRequirement::from_intrinsic(s));\n+        if let Some(requirement) = panic_intrinsic {\n             let ty = instance.unwrap().substs.type_at(0);\n+\n+            let do_panic = !bx\n+                .tcx()\n+                .check_validity_requirement((requirement, bx.param_env().and(ty)))\n+                .expect(\"expect to have layout during codegen\");\n+\n             let layout = bx.layout_of(ty);\n-            let do_panic = match intrinsic {\n-                Inhabited => layout.abi.is_uninhabited(),\n-                ZeroValid => !bx\n-                    .tcx()\n-                    .check_validity_of_init((InitKind::Zero, bx.param_env().and(ty)))\n-                    .expect(\"expected to have layout during codegen\"),\n-                MemUninitializedValid => !bx\n-                    .tcx()\n-                    .check_validity_of_init((\n-                        InitKind::UninitMitigated0x01Fill,\n-                        bx.param_env().and(ty),\n-                    ))\n-                    .expect(\"expected to have layout during codegen\"),\n-            };\n+\n             Some(if do_panic {\n                 let msg_str = with_no_visible_paths!({\n                     with_no_trimmed_paths!({\n                         if layout.abi.is_uninhabited() {\n                             // Use this error even for the other intrinsics as it is more precise.\n                             format!(\"attempted to instantiate uninhabited type `{}`\", ty)\n-                        } else if intrinsic == ZeroValid {\n+                        } else if requirement == ValidityRequirement::Zero {\n                             format!(\"attempted to zero-initialize type `{}`, which is invalid\", ty)\n                         } else {\n                             format!("}, {"sha": "c65d677e8ea75812e9b36415e90f6b8e4a9395ca", "filename": "compiler/rustc_const_eval/src/interpret/intrinsics.rs", "status": "modified", "additions": 26, "deletions": 48, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/bcb610da7fae8297689883782601ecb8645604e2/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb610da7fae8297689883782601ecb8645604e2/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=bcb610da7fae8297689883782601ecb8645604e2", "patch": "@@ -11,7 +11,7 @@ use rustc_middle::mir::{\n     BinOp, NonDivergingIntrinsic,\n };\n use rustc_middle::ty;\n-use rustc_middle::ty::layout::{InitKind, LayoutOf as _};\n+use rustc_middle::ty::layout::{LayoutOf as _, ValidityRequirement};\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::{Ty, TyCtxt};\n use rustc_span::symbol::{sym, Symbol};\n@@ -418,57 +418,35 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             | sym::assert_zero_valid\n             | sym::assert_mem_uninitialized_valid => {\n                 let ty = instance.substs.type_at(0);\n-                let layout = self.layout_of(ty)?;\n-\n-                // For *all* intrinsics we first check `is_uninhabited` to give a more specific\n-                // error message.\n-                if layout.abi.is_uninhabited() {\n-                    // The run-time intrinsic panics just to get a good backtrace; here we abort\n-                    // since there is no problem showing a backtrace even for aborts.\n-                    M::abort(\n-                        self,\n-                        format!(\n+                let requirement = ValidityRequirement::from_intrinsic(intrinsic_name).unwrap();\n+\n+                let should_panic = !self\n+                    .tcx\n+                    .check_validity_requirement((requirement, self.param_env.and(ty)))\n+                    .map_err(|_| err_inval!(TooGeneric))?;\n+\n+                if should_panic {\n+                    let layout = self.layout_of(ty)?;\n+\n+                    let msg = match requirement {\n+                        // For *all* intrinsics we first check `is_uninhabited` to give a more specific\n+                        // error message.\n+                        _ if layout.abi.is_uninhabited() => format!(\n                             \"aborted execution: attempted to instantiate uninhabited type `{}`\",\n                             ty\n                         ),\n-                    )?;\n-                }\n-\n-                if intrinsic_name == sym::assert_zero_valid {\n-                    let should_panic = !self\n-                        .tcx\n-                        .check_validity_of_init((InitKind::Zero, self.param_env.and(ty)))\n-                        .map_err(|_| err_inval!(TooGeneric))?;\n-\n-                    if should_panic {\n-                        M::abort(\n-                            self,\n-                            format!(\n-                                \"aborted execution: attempted to zero-initialize type `{}`, which is invalid\",\n-                                ty\n-                            ),\n-                        )?;\n-                    }\n-                }\n+                        ValidityRequirement::Inhabited => bug!(\"handled earlier\"),\n+                        ValidityRequirement::Zero => format!(\n+                            \"aborted execution: attempted to zero-initialize type `{}`, which is invalid\",\n+                            ty\n+                        ),\n+                        ValidityRequirement::UninitMitigated0x01Fill => format!(\n+                            \"aborted execution: attempted to leave type `{}` uninitialized, which is invalid\",\n+                            ty\n+                        ),\n+                    };\n \n-                if intrinsic_name == sym::assert_mem_uninitialized_valid {\n-                    let should_panic = !self\n-                        .tcx\n-                        .check_validity_of_init((\n-                            InitKind::UninitMitigated0x01Fill,\n-                            self.param_env.and(ty),\n-                        ))\n-                        .map_err(|_| err_inval!(TooGeneric))?;\n-\n-                    if should_panic {\n-                        M::abort(\n-                            self,\n-                            format!(\n-                                \"aborted execution: attempted to leave type `{}` uninitialized, which is invalid\",\n-                                ty\n-                            ),\n-                        )?;\n-                    }\n+                    M::abort(self, msg)?;\n                 }\n             }\n             sym::simd_insert => {"}, {"sha": "ed9efe568fb303ff268f90f76076bcfec6bc2dfd", "filename": "compiler/rustc_const_eval/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bcb610da7fae8297689883782601ecb8645604e2/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb610da7fae8297689883782601ecb8645604e2/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs?ref=bcb610da7fae8297689883782601ecb8645604e2", "patch": "@@ -61,7 +61,7 @@ pub fn provide(providers: &mut Providers) {\n         let (param_env, value) = param_env_and_value.into_parts();\n         const_eval::deref_mir_constant(tcx, param_env, value)\n     };\n-    providers.check_validity_of_init = |tcx, (init_kind, param_env_and_ty)| {\n-        util::might_permit_raw_init(tcx, init_kind, param_env_and_ty)\n+    providers.check_validity_requirement = |tcx, (init_kind, param_env_and_ty)| {\n+        util::check_validity_requirement(tcx, init_kind, param_env_and_ty)\n     };\n }"}, {"sha": "dcd15b919f4e3026c535b9bd3ca68810d1d6410b", "filename": "compiler/rustc_const_eval/src/util/check_validity_requirement.rs", "status": "renamed", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/bcb610da7fae8297689883782601ecb8645604e2/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fcheck_validity_requirement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb610da7fae8297689883782601ecb8645604e2/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fcheck_validity_requirement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fcheck_validity_requirement.rs?ref=bcb610da7fae8297689883782601ecb8645604e2", "patch": "@@ -1,4 +1,4 @@\n-use rustc_middle::ty::layout::{InitKind, LayoutCx, LayoutError, LayoutOf, TyAndLayout};\n+use rustc_middle::ty::layout::{LayoutCx, LayoutError, LayoutOf, TyAndLayout, ValidityRequirement};\n use rustc_middle::ty::{ParamEnv, ParamEnvAnd, Ty, TyCtxt};\n use rustc_session::Limit;\n use rustc_target::abi::{Abi, FieldsShape, Scalar, Variants};\n@@ -18,16 +18,23 @@ use crate::interpret::{InterpCx, MemoryKind, OpTy};\n /// Rust UB as long as there is no risk of miscompilations. The `strict_init_checks` can be set to\n /// do a full check against Rust UB instead (in which case we will also ignore the 0x01-filling and\n /// to the full uninit check).\n-pub fn might_permit_raw_init<'tcx>(\n+pub fn check_validity_requirement<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    kind: InitKind,\n+    kind: ValidityRequirement,\n     param_env_and_ty: ParamEnvAnd<'tcx, Ty<'tcx>>,\n ) -> Result<bool, LayoutError<'tcx>> {\n+    let layout = tcx.layout_of(param_env_and_ty)?;\n+\n+    // There is nothing strict or lax about inhabitedness.\n+    if kind == ValidityRequirement::Inhabited {\n+        return Ok(!layout.abi.is_uninhabited());\n+    }\n+\n     if tcx.sess.opts.unstable_opts.strict_init_checks {\n-        might_permit_raw_init_strict(tcx.layout_of(param_env_and_ty)?, tcx, kind)\n+        might_permit_raw_init_strict(layout, tcx, kind)\n     } else {\n         let layout_cx = LayoutCx { tcx, param_env: param_env_and_ty.param_env };\n-        might_permit_raw_init_lax(tcx.layout_of(param_env_and_ty)?, &layout_cx, kind)\n+        might_permit_raw_init_lax(layout, &layout_cx, kind)\n     }\n }\n \n@@ -36,7 +43,7 @@ pub fn might_permit_raw_init<'tcx>(\n fn might_permit_raw_init_strict<'tcx>(\n     ty: TyAndLayout<'tcx>,\n     tcx: TyCtxt<'tcx>,\n-    kind: InitKind,\n+    kind: ValidityRequirement,\n ) -> Result<bool, LayoutError<'tcx>> {\n     let machine = CompileTimeInterpreter::new(\n         Limit::new(0),\n@@ -50,7 +57,7 @@ fn might_permit_raw_init_strict<'tcx>(\n         .allocate(ty, MemoryKind::Machine(crate::const_eval::MemoryKind::Heap))\n         .expect(\"OOM: failed to allocate for uninit check\");\n \n-    if kind == InitKind::Zero {\n+    if kind == ValidityRequirement::Zero {\n         cx.write_bytes_ptr(\n             allocated.ptr,\n             std::iter::repeat(0_u8).take(ty.layout.size().bytes_usize()),\n@@ -72,15 +79,18 @@ fn might_permit_raw_init_strict<'tcx>(\n fn might_permit_raw_init_lax<'tcx>(\n     this: TyAndLayout<'tcx>,\n     cx: &LayoutCx<'tcx, TyCtxt<'tcx>>,\n-    init_kind: InitKind,\n+    init_kind: ValidityRequirement,\n ) -> Result<bool, LayoutError<'tcx>> {\n     let scalar_allows_raw_init = move |s: Scalar| -> bool {\n         match init_kind {\n-            InitKind::Zero => {\n+            ValidityRequirement::Inhabited => {\n+                bug!(\"ValidityRequirement::Inhabited should have been handled above\")\n+            }\n+            ValidityRequirement::Zero => {\n                 // The range must contain 0.\n                 s.valid_range(cx).contains(0)\n             }\n-            InitKind::UninitMitigated0x01Fill => {\n+            ValidityRequirement::UninitMitigated0x01Fill => {\n                 // The range must include an 0x01-filled buffer.\n                 let mut val: u128 = 0x01;\n                 for _ in 1..s.size(cx).bytes() {", "previous_filename": "compiler/rustc_const_eval/src/util/might_permit_raw_init.rs"}, {"sha": "c0aabd77ceeadb3153cc8750b2ca556ff93c1f37", "filename": "compiler/rustc_const_eval/src/util/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bcb610da7fae8297689883782601ecb8645604e2/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb610da7fae8297689883782601ecb8645604e2/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fmod.rs?ref=bcb610da7fae8297689883782601ecb8645604e2", "patch": "@@ -1,14 +1,14 @@\n mod alignment;\n mod call_kind;\n+mod check_validity_requirement;\n pub mod collect_writes;\n mod compare_types;\n mod find_self_call;\n-mod might_permit_raw_init;\n mod type_name;\n \n pub use self::alignment::is_disaligned;\n pub use self::call_kind::{call_kind, CallDesugaringKind, CallKind};\n+pub use self::check_validity_requirement::check_validity_requirement;\n pub use self::compare_types::{is_equal_up_to_subtyping, is_subtype};\n pub use self::find_self_call::find_self_call;\n-pub use self::might_permit_raw_init::might_permit_raw_init;\n pub use self::type_name::type_name;"}, {"sha": "7d23ff5194870cf547ae97ef3eb952e332a7bbb0", "filename": "compiler/rustc_data_structures/src/sorted_map/index_map.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bcb610da7fae8297689883782601ecb8645604e2/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map%2Findex_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb610da7fae8297689883782601ecb8645604e2/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map%2Findex_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map%2Findex_map.rs?ref=bcb610da7fae8297689883782601ecb8645604e2", "patch": "@@ -100,6 +100,11 @@ impl<I: Idx, K: Ord, V> SortedIndexMultiMap<I, K, V> {\n             (k == &key).then_some((i, v))\n         })\n     }\n+\n+    #[inline]\n+    pub fn contains_key(&self, key: K) -> bool {\n+        self.get_by_key(key).next().is_some()\n+    }\n }\n \n impl<I: Idx, K: Eq, V: Eq> Eq for SortedIndexMultiMap<I, K, V> {}"}, {"sha": "def7a7112fb3f2acf6f34d74cf58dd2649970338", "filename": "compiler/rustc_data_structures/src/sorted_map/tests.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bcb610da7fae8297689883782601ecb8645604e2/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb610da7fae8297689883782601ecb8645604e2/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map%2Ftests.rs?ref=bcb610da7fae8297689883782601ecb8645604e2", "patch": "@@ -17,6 +17,10 @@ fn test_sorted_index_multi_map() {\n     assert_eq!(set.get_by_key(3).copied().collect::<Vec<_>>(), vec![0]);\n     assert!(set.get_by_key(4).next().is_none());\n \n+    // `contains_key` works\n+    assert!(set.contains_key(3));\n+    assert!(!set.contains_key(4));\n+\n     // `get_by_key` returns items in insertion order.\n     let twos: Vec<_> = set.get_by_key_enumerated(2).collect();\n     let idxs: Vec<usize> = twos.iter().map(|(i, _)| *i).collect();"}, {"sha": "25c467bfd2bd604ed9f8f050fe8894820f8a4f1d", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 16, "deletions": 20, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/bcb610da7fae8297689883782601ecb8645604e2/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb610da7fae8297689883782601ecb8645604e2/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=bcb610da7fae8297689883782601ecb8645604e2", "patch": "@@ -50,6 +50,7 @@ use rustc_trait_selection::traits::{self, astconv_object_safety_violations, Obli\n \n use smallvec::{smallvec, SmallVec};\n use std::collections::BTreeSet;\n+use std::fmt::Display;\n use std::slice;\n \n #[derive(Debug)]\n@@ -1095,11 +1096,11 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 // those that do.\n                 self.one_bound_for_assoc_type(\n                     || traits::supertraits(tcx, trait_ref),\n-                    || trait_ref.print_only_trait_path().to_string(),\n+                    trait_ref.print_only_trait_path(),\n                     binding.item_name,\n                     path_span,\n-                    || match binding.kind {\n-                        ConvertedBindingKind::Equality(ty) => Some(ty.to_string()),\n+                    match binding.kind {\n+                        ConvertedBindingKind::Equality(term) => Some(term),\n                         _ => None,\n                     },\n                 )?\n@@ -1789,10 +1790,10 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     assoc_name,\n                 )\n             },\n-            || param_name.to_string(),\n+            param_name,\n             assoc_name,\n             span,\n-            || None,\n+            None,\n         )\n     }\n \n@@ -1802,10 +1803,10 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n     fn one_bound_for_assoc_type<I>(\n         &self,\n         all_candidates: impl Fn() -> I,\n-        ty_param_name: impl Fn() -> String,\n+        ty_param_name: impl Display,\n         assoc_name: Ident,\n         span: Span,\n-        is_equality: impl Fn() -> Option<String>,\n+        is_equality: Option<ty::Term<'tcx>>,\n     ) -> Result<ty::PolyTraitRef<'tcx>, ErrorGuaranteed>\n     where\n         I: Iterator<Item = ty::PolyTraitRef<'tcx>>,\n@@ -1821,7 +1822,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             (None, None) => {\n                 let reported = self.complain_about_assoc_type_not_found(\n                     all_candidates,\n-                    &ty_param_name(),\n+                    &ty_param_name.to_string(),\n                     assoc_name,\n                     span,\n                 );\n@@ -1833,7 +1834,6 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         if let Some(bound2) = next_cand {\n             debug!(?bound2);\n \n-            let is_equality = is_equality();\n             let bounds = IntoIterator::into_iter([bound, bound2]).chain(matching_candidates);\n             let mut err = if is_equality.is_some() {\n                 // More specific Error Index entry.\n@@ -1843,7 +1843,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     E0222,\n                     \"ambiguous associated type `{}` in bounds of `{}`\",\n                     assoc_name,\n-                    ty_param_name()\n+                    ty_param_name\n                 )\n             } else {\n                 struct_span_err!(\n@@ -1852,7 +1852,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     E0221,\n                     \"ambiguous associated type `{}` in bounds of `{}`\",\n                     assoc_name,\n-                    ty_param_name()\n+                    ty_param_name\n                 )\n             };\n             err.span_label(span, format!(\"ambiguous associated type `{}`\", assoc_name));\n@@ -1886,18 +1886,14 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                         err.span_suggestion_verbose(\n                             span.with_hi(assoc_name.span.lo()),\n                             \"use fully qualified syntax to disambiguate\",\n-                            format!(\n-                                \"<{} as {}>::\",\n-                                ty_param_name(),\n-                                bound.print_only_trait_path(),\n-                            ),\n+                            format!(\"<{} as {}>::\", ty_param_name, bound.print_only_trait_path()),\n                             Applicability::MaybeIncorrect,\n                         );\n                     }\n                 } else {\n                     err.note(&format!(\n                         \"associated type `{}` could derive from `{}`\",\n-                        ty_param_name(),\n+                        ty_param_name,\n                         bound.print_only_trait_path(),\n                     ));\n                 }\n@@ -1906,7 +1902,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 err.help(&format!(\n                     \"consider introducing a new type parameter `T` and adding `where` constraints:\\\n                      \\n    where\\n        T: {},\\n{}\",\n-                    ty_param_name(),\n+                    ty_param_name,\n                     where_bounds.join(\",\\n\"),\n                 ));\n             }\n@@ -2070,10 +2066,10 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n                 self.one_bound_for_assoc_type(\n                     || traits::supertraits(tcx, ty::Binder::dummy(trait_ref.subst_identity())),\n-                    || \"Self\".to_string(),\n+                    kw::SelfUpper,\n                     assoc_ident,\n                     span,\n-                    || None,\n+                    None,\n                 )?\n             }\n             ("}, {"sha": "bd1f96635a681a494a5e90e56afd45034c852381", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 11, "deletions": 39, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/bcb610da7fae8297689883782601ecb8645604e2/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb610da7fae8297689883782601ecb8645604e2/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=bcb610da7fae8297689883782601ecb8645604e2", "patch": "@@ -156,7 +156,7 @@ pub struct InferCtxtInner<'tcx> {\n     undo_log: InferCtxtUndoLogs<'tcx>,\n \n     /// Caches for opaque type inference.\n-    pub opaque_type_storage: OpaqueTypeStorage<'tcx>,\n+    opaque_type_storage: OpaqueTypeStorage<'tcx>,\n }\n \n impl<'tcx> InferCtxtInner<'tcx> {\n@@ -195,41 +195,17 @@ impl<'tcx> InferCtxtInner<'tcx> {\n     }\n \n     #[inline]\n-    fn int_unification_table(\n-        &mut self,\n-    ) -> ut::UnificationTable<\n-        ut::InPlace<\n-            ty::IntVid,\n-            &mut ut::UnificationStorage<ty::IntVid>,\n-            &mut InferCtxtUndoLogs<'tcx>,\n-        >,\n-    > {\n+    fn int_unification_table(&mut self) -> UnificationTable<'_, 'tcx, ty::IntVid> {\n         self.int_unification_storage.with_log(&mut self.undo_log)\n     }\n \n     #[inline]\n-    fn float_unification_table(\n-        &mut self,\n-    ) -> ut::UnificationTable<\n-        ut::InPlace<\n-            ty::FloatVid,\n-            &mut ut::UnificationStorage<ty::FloatVid>,\n-            &mut InferCtxtUndoLogs<'tcx>,\n-        >,\n-    > {\n+    fn float_unification_table(&mut self) -> UnificationTable<'_, 'tcx, ty::FloatVid> {\n         self.float_unification_storage.with_log(&mut self.undo_log)\n     }\n \n     #[inline]\n-    fn const_unification_table(\n-        &mut self,\n-    ) -> ut::UnificationTable<\n-        ut::InPlace<\n-            ty::ConstVid<'tcx>,\n-            &mut ut::UnificationStorage<ty::ConstVid<'tcx>>,\n-            &mut InferCtxtUndoLogs<'tcx>,\n-        >,\n-    > {\n+    fn const_unification_table(&mut self) -> UnificationTable<'_, 'tcx, ty::ConstVid<'tcx>> {\n         self.const_unification_storage.with_log(&mut self.undo_log)\n     }\n \n@@ -1429,17 +1405,14 @@ impl<'tcx> InferCtxt<'tcx> {\n         }\n     }\n \n+    /// Attempts to resolve all type/region/const variables in\n+    /// `value`. Region inference must have been run already (e.g.,\n+    /// by calling `resolve_regions_and_report_errors`). If some\n+    /// variable was never unified, an `Err` results.\n+    ///\n+    /// This method is idempotent, but it not typically not invoked\n+    /// except during the writeback phase.\n     pub fn fully_resolve<T: TypeFoldable<TyCtxt<'tcx>>>(&self, value: T) -> FixupResult<'tcx, T> {\n-        /*!\n-         * Attempts to resolve all type/region/const variables in\n-         * `value`. Region inference must have been run already (e.g.,\n-         * by calling `resolve_regions_and_report_errors`). If some\n-         * variable was never unified, an `Err` results.\n-         *\n-         * This method is idempotent, but it not typically not invoked\n-         * except during the writeback phase.\n-         */\n-\n         let value = resolve::fully_resolve(self, value);\n         assert!(\n             value.as_ref().map_or(true, |value| !value.needs_infer()),\n@@ -1754,7 +1727,6 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n     // in this case. The typechecker should only ever report type errors involving mismatched\n     // types using one of these methods, and should not call span_err directly for such\n     // errors.\n-\n     pub fn type_error_struct_with_diag<M>(\n         &self,\n         sp: Span,"}, {"sha": "05890628378666e3e1dc77de42e898879e341ffa", "filename": "compiler/rustc_llvm/llvm-wrapper/LLVMWrapper.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bcb610da7fae8297689883782601ecb8645604e2/compiler%2Frustc_llvm%2Fllvm-wrapper%2FLLVMWrapper.h", "raw_url": "https://github.com/rust-lang/rust/raw/bcb610da7fae8297689883782601ecb8645604e2/compiler%2Frustc_llvm%2Fllvm-wrapper%2FLLVMWrapper.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FLLVMWrapper.h?ref=bcb610da7fae8297689883782601ecb8645604e2", "patch": "@@ -14,6 +14,7 @@\n #include \"llvm/Support/Debug.h\"\n #include \"llvm/Support/DynamicLibrary.h\"\n #include \"llvm/Support/FormattedStream.h\"\n+#include \"llvm/Support/JSON.h\"\n #include \"llvm/Support/Host.h\"\n #include \"llvm/Support/Memory.h\"\n #include \"llvm/Support/SourceMgr.h\""}, {"sha": "e3493caaaf74e35b1308166a3696e92eb345d3c2", "filename": "compiler/rustc_llvm/llvm-wrapper/RustWrapper.cpp", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/bcb610da7fae8297689883782601ecb8645604e2/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/bcb610da7fae8297689883782601ecb8645604e2/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp?ref=bcb610da7fae8297689883782601ecb8645604e2", "patch": "@@ -1751,6 +1751,19 @@ LLVMRustModuleCost(LLVMModuleRef M) {\n   return std::distance(std::begin(f), std::end(f));\n }\n \n+extern \"C\" void\n+LLVMRustModuleInstructionStats(LLVMModuleRef M, RustStringRef Str)\n+{\n+  RawRustStringOstream OS(Str);\n+  llvm::json::OStream JOS(OS);\n+  auto Module = unwrap(M);\n+\n+  JOS.object([&] {\n+    JOS.attribute(\"module\", Module->getName());\n+    JOS.attribute(\"total\", Module->getInstructionCount());\n+  });\n+}\n+\n // Vector reductions:\n extern \"C\" LLVMValueRef\n LLVMRustBuildVectorReduceFAdd(LLVMBuilderRef B, LLVMValueRef Acc, LLVMValueRef Src) {"}, {"sha": "78ee8a6a8fd64aacbe6573f19dd116d35097e062", "filename": "compiler/rustc_middle/src/query/keys.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bcb610da7fae8297689883782601ecb8645604e2/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb610da7fae8297689883782601ecb8645604e2/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fkeys.rs?ref=bcb610da7fae8297689883782601ecb8645604e2", "patch": "@@ -4,7 +4,7 @@ use crate::infer::canonical::Canonical;\n use crate::mir;\n use crate::traits;\n use crate::ty::fast_reject::SimplifiedType;\n-use crate::ty::layout::{InitKind, TyAndLayout};\n+use crate::ty::layout::{TyAndLayout, ValidityRequirement};\n use crate::ty::subst::{GenericArg, SubstsRef};\n use crate::ty::{self, Ty, TyCtxt};\n use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, LOCAL_CRATE};\n@@ -698,7 +698,7 @@ impl Key for HirId {\n     }\n }\n \n-impl<'tcx> Key for (InitKind, ty::ParamEnvAnd<'tcx, Ty<'tcx>>) {\n+impl<'tcx> Key for (ValidityRequirement, ty::ParamEnvAnd<'tcx, Ty<'tcx>>) {\n     type CacheSelector = DefaultCacheSelector<Self>;\n \n     // Just forward to `Ty<'tcx>`"}, {"sha": "b07540cf58c111050c1164e693fdd09f337a6f6b", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bcb610da7fae8297689883782601ecb8645604e2/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb610da7fae8297689883782601ecb8645604e2/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=bcb610da7fae8297689883782601ecb8645604e2", "patch": "@@ -2166,8 +2166,8 @@ rustc_queries! {\n         separate_provide_extern\n     }\n \n-    query check_validity_of_init(key: (InitKind, ty::ParamEnvAnd<'tcx, Ty<'tcx>>)) -> Result<bool, ty::layout::LayoutError<'tcx>> {\n-        desc { \"checking to see if `{}` permits being left {}\", key.1.value, key.0 }\n+    query check_validity_requirement(key: (ValidityRequirement, ty::ParamEnvAnd<'tcx, Ty<'tcx>>)) -> Result<bool, ty::layout::LayoutError<'tcx>> {\n+        desc { \"checking validity requirement for `{}`: {}\", key.1.value, key.0 }\n     }\n \n     query compare_impl_const("}, {"sha": "090272a6fa6d935f4fc4ecff0a36f78328efd29a", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/bcb610da7fae8297689883782601ecb8645604e2/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb610da7fae8297689883782601ecb8645604e2/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=bcb610da7fae8297689883782601ecb8645604e2", "patch": "@@ -7,6 +7,7 @@ use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_index::vec::Idx;\n use rustc_session::config::OptLevel;\n+use rustc_span::symbol::{sym, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n use rustc_target::abi::call::FnAbi;\n use rustc_target::abi::*;\n@@ -172,16 +173,29 @@ pub const MAX_SIMD_LANES: u64 = 1 << 0xF;\n /// Used in `might_permit_raw_init` to indicate the kind of initialisation\n /// that is checked to be valid\n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, HashStable)]\n-pub enum InitKind {\n+pub enum ValidityRequirement {\n+    Inhabited,\n     Zero,\n     UninitMitigated0x01Fill,\n }\n \n-impl fmt::Display for InitKind {\n+impl ValidityRequirement {\n+    pub fn from_intrinsic(intrinsic: Symbol) -> Option<Self> {\n+        match intrinsic {\n+            sym::assert_inhabited => Some(Self::Inhabited),\n+            sym::assert_zero_valid => Some(Self::Zero),\n+            sym::assert_mem_uninitialized_valid => Some(Self::UninitMitigated0x01Fill),\n+            _ => None,\n+        }\n+    }\n+}\n+\n+impl fmt::Display for ValidityRequirement {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self {\n-            Self::Zero => f.write_str(\"zeroed\"),\n-            Self::UninitMitigated0x01Fill => f.write_str(\"filled with 0x01\"),\n+            Self::Inhabited => f.write_str(\"is inhabited\"),\n+            Self::Zero => f.write_str(\"allows being left zeroed\"),\n+            Self::UninitMitigated0x01Fill => f.write_str(\"allows being filled with 0x01\"),\n         }\n     }\n }"}, {"sha": "2bc51baf87905b3247db503429b739a83121b148", "filename": "compiler/rustc_middle/src/ty/query.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcb610da7fae8297689883782601ecb8645604e2/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb610da7fae8297689883782601ecb8645604e2/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs?ref=bcb610da7fae8297689883782601ecb8645604e2", "patch": "@@ -32,7 +32,7 @@ use crate::traits::specialization_graph;\n use crate::traits::{self, ImplSource};\n use crate::ty::context::TyCtxtFeed;\n use crate::ty::fast_reject::SimplifiedType;\n-use crate::ty::layout::InitKind;\n+use crate::ty::layout::ValidityRequirement;\n use crate::ty::subst::{GenericArg, SubstsRef};\n use crate::ty::util::AlwaysRequiresDrop;\n use crate::ty::GeneratorDiagnosticData;"}, {"sha": "4182da1957e39d9ac662f18bd774ed47b2505d88", "filename": "compiler/rustc_mir_transform/src/instcombine.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bcb610da7fae8297689883782601ecb8645604e2/compiler%2Frustc_mir_transform%2Fsrc%2Finstcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb610da7fae8297689883782601ecb8645604e2/compiler%2Frustc_mir_transform%2Fsrc%2Finstcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finstcombine.rs?ref=bcb610da7fae8297689883782601ecb8645604e2", "patch": "@@ -6,9 +6,9 @@ use rustc_middle::mir::{\n     BinOp, Body, Constant, ConstantKind, LocalDecls, Operand, Place, ProjectionElem, Rvalue,\n     SourceInfo, Statement, StatementKind, Terminator, TerminatorKind, UnOp,\n };\n-use rustc_middle::ty::layout::InitKind;\n+use rustc_middle::ty::layout::ValidityRequirement;\n use rustc_middle::ty::{self, ParamEnv, SubstsRef, Ty, TyCtxt};\n-use rustc_span::symbol::{sym, Symbol};\n+use rustc_span::symbol::Symbol;\n \n pub struct InstCombine;\n \n@@ -256,16 +256,8 @@ fn intrinsic_assert_panics<'tcx>(\n     ty: Ty<'tcx>,\n     intrinsic_name: Symbol,\n ) -> Option<bool> {\n-    Some(match intrinsic_name {\n-        sym::assert_inhabited => tcx.layout_of(param_env.and(ty)).ok()?.abi.is_uninhabited(),\n-        sym::assert_zero_valid => {\n-            !tcx.check_validity_of_init((InitKind::Zero, param_env.and(ty))).ok()?\n-        }\n-        sym::assert_mem_uninitialized_valid => !tcx\n-            .check_validity_of_init((InitKind::UninitMitigated0x01Fill, param_env.and(ty)))\n-            .ok()?,\n-        _ => return None,\n-    })\n+    let requirement = ValidityRequirement::from_intrinsic(intrinsic_name)?;\n+    Some(!tcx.check_validity_requirement((requirement, param_env.and(ty))).ok()?)\n }\n \n fn resolve_rust_intrinsic<'tcx>("}, {"sha": "a051dbe9ff5b9db70ab32dfedb85e61e4bbcf448", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bcb610da7fae8297689883782601ecb8645604e2/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb610da7fae8297689883782601ecb8645604e2/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=bcb610da7fae8297689883782601ecb8645604e2", "patch": "@@ -165,8 +165,6 @@ enum IsStandalone {\n #[derive(Debug, Copy, Clone, PartialEq, Eq)]\n enum IncOrDec {\n     Inc,\n-    // FIXME: `i--` recovery isn't implemented yet\n-    #[allow(dead_code)]\n     Dec,\n }\n \n@@ -1357,6 +1355,20 @@ impl<'a> Parser<'a> {\n         self.recover_from_inc_dec(operand_expr, kind, op_span)\n     }\n \n+    pub(super) fn recover_from_postfix_decrement(\n+        &mut self,\n+        operand_expr: P<Expr>,\n+        op_span: Span,\n+        start_stmt: bool,\n+    ) -> PResult<'a, P<Expr>> {\n+        let kind = IncDecRecovery {\n+            standalone: if start_stmt { IsStandalone::Standalone } else { IsStandalone::Subexpr },\n+            op: IncOrDec::Dec,\n+            fixity: UnaryFixity::Post,\n+        };\n+        self.recover_from_inc_dec(operand_expr, kind, op_span)\n+    }\n+\n     fn recover_from_inc_dec(\n         &mut self,\n         base: P<Expr>,"}, {"sha": "24d4c17f5d8ab42a52fd1c42d20e627c83f8b2ce", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bcb610da7fae8297689883782601ecb8645604e2/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb610da7fae8297689883782601ecb8645604e2/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=bcb610da7fae8297689883782601ecb8645604e2", "patch": "@@ -282,6 +282,18 @@ impl<'a> Parser<'a> {\n                 continue;\n             }\n \n+            if self.prev_token == token::BinOp(token::Minus)\n+                && self.token == token::BinOp(token::Minus)\n+                && self.prev_token.span.between(self.token.span).is_empty()\n+                && !self.look_ahead(1, |tok| tok.can_begin_expr())\n+            {\n+                let op_span = self.prev_token.span.to(self.token.span);\n+                // Eat the second `-`\n+                self.bump();\n+                lhs = self.recover_from_postfix_decrement(lhs, op_span, starts_stmt)?;\n+                continue;\n+            }\n+\n             let op = op.node;\n             // Special cases:\n             if op == AssocOp::As {"}, {"sha": "f1fbf38217d64b82d09f36cb57c51e392e6170e4", "filename": "compiler/rustc_session/src/filesearch.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bcb610da7fae8297689883782601ecb8645604e2/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb610da7fae8297689883782601ecb8645604e2/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs?ref=bcb610da7fae8297689883782601ecb8645604e2", "patch": "@@ -182,7 +182,17 @@ pub fn get_or_default_sysroot() -> Result<PathBuf, String> {\n         if dir.ends_with(crate::config::host_triple()) {\n             dir.parent() // chop off `$target`\n                 .and_then(|p| p.parent()) // chop off `rustlib`\n-                .and_then(|p| p.parent()) // chop off `lib`\n+                .and_then(|p| {\n+                    // chop off `lib` (this could be also $arch dir if the host sysroot uses a\n+                    // multi-arch layout like Debian or Ubuntu)\n+                    match p.parent() {\n+                        Some(p) => match p.file_name() {\n+                            Some(f) if f == \"lib\" => p.parent(), // first chop went for $arch, so chop again for `lib`\n+                            _ => Some(p),\n+                        },\n+                        None => None,\n+                    }\n+                })\n                 .map(|s| s.to_owned())\n                 .ok_or(format!(\n                     \"Could not move 3 levels upper using `parent()` on {}\","}, {"sha": "7ebd0a8f27069faeb474456194f10207a4d1e9b8", "filename": "src/bootstrap/clean.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bcb610da7fae8297689883782601ecb8645604e2/src%2Fbootstrap%2Fclean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb610da7fae8297689883782601ecb8645604e2/src%2Fbootstrap%2Fclean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fclean.rs?ref=bcb610da7fae8297689883782601ecb8645604e2", "patch": "@@ -62,6 +62,7 @@ macro_rules! clean_crate_tree {\n                 let target = compiler.host;\n                 let mut cargo = builder.bare_cargo(compiler, $mode, target, \"clean\");\n                 for krate in &*self.crates {\n+                    cargo.arg(\"-p\");\n                     cargo.arg(krate);\n                 }\n "}, {"sha": "56322d0da43747b465b893f63c9688eb9f70e7ce", "filename": "src/doc/rustc/src/platform-support/fuchsia.md", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bcb610da7fae8297689883782601ecb8645604e2/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Ffuchsia.md", "raw_url": "https://github.com/rust-lang/rust/raw/bcb610da7fae8297689883782601ecb8645604e2/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Ffuchsia.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Ffuchsia.md?ref=bcb610da7fae8297689883782601ecb8645604e2", "patch": "@@ -12,7 +12,6 @@ The [Fuchsia team]:\n - Tyler Mandry ([@tmandry](https://github.com/tmandry))\n - Dan Johnson ([@computerdruid](https://github.com/computerdruid))\n - David Koloski ([@djkoloski](https://github.com/djkoloski))\n-- Andrew Pollack ([@andrewpollack](https://github.com/andrewpollack))\n - Joseph Ryan ([@P1n3appl3](https://github.com/P1n3appl3))\n \n As the team evolves over time, the specific members listed here may differ from"}, {"sha": "e0816f84e5c1523924602cf02997898018ded0e5", "filename": "tests/ui/parser/issue-108495-dec.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/bcb610da7fae8297689883782601ecb8645604e2/tests%2Fui%2Fparser%2Fissue-108495-dec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb610da7fae8297689883782601ecb8645604e2/tests%2Fui%2Fparser%2Fissue-108495-dec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fissue-108495-dec.rs?ref=bcb610da7fae8297689883782601ecb8645604e2", "patch": "@@ -0,0 +1,39 @@\n+fn test0() {\n+    let mut i = 0;\n+    let _ = i + i--; //~ ERROR Rust has no postfix decrement operator\n+    // won't suggest since we can not handle the precedences\n+}\n+\n+fn test1() {\n+    let mut i = 0;\n+    let _ = i-- + i--; //~ ERROR Rust has no postfix decrement operator\n+}\n+\n+fn test2() {\n+    let mut i = 0;\n+    let _ = --i + i--; //~ ERROR Rust has no postfix decrement operator\n+}\n+\n+fn test3() {\n+    let mut i = 0;\n+    let _ = i-- + --i; //~ ERROR Rust has no postfix decrement operator\n+}\n+\n+fn test4() {\n+    let mut i = 0;\n+    let _ = (1 + 2 + i)--; //~ ERROR Rust has no postfix decrement operator\n+}\n+\n+fn test5() {\n+    let mut i = 0;\n+    let _ = (i-- + 1) + 2; //~ ERROR Rust has no postfix decrement operator\n+}\n+\n+fn test6(){\n+    let i=10;\n+    while i != 0 {\n+        i--; //~ ERROR Rust has no postfix decrement operator\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "85b29038f7c78d47c2caf19663cfba5dc1652260", "filename": "tests/ui/parser/issue-108495-dec.stderr", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/bcb610da7fae8297689883782601ecb8645604e2/tests%2Fui%2Fparser%2Fissue-108495-dec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bcb610da7fae8297689883782601ecb8645604e2/tests%2Fui%2Fparser%2Fissue-108495-dec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fissue-108495-dec.stderr?ref=bcb610da7fae8297689883782601ecb8645604e2", "patch": "@@ -0,0 +1,69 @@\n+error: Rust has no postfix decrement operator\n+  --> $DIR/issue-108495-dec.rs:3:18\n+   |\n+LL |     let _ = i + i--;\n+   |                  ^^ not a valid postfix operator\n+\n+error: Rust has no postfix decrement operator\n+  --> $DIR/issue-108495-dec.rs:9:14\n+   |\n+LL |     let _ = i-- + i--;\n+   |              ^^ not a valid postfix operator\n+   |\n+help: use `-= 1` instead\n+   |\n+LL |     let _ = { let tmp = i; i -= 1; tmp } + i--;\n+   |             +++++++++++  ~~~~~~~~~~~~~~~\n+\n+error: Rust has no postfix decrement operator\n+  --> $DIR/issue-108495-dec.rs:14:20\n+   |\n+LL |     let _ = --i + i--;\n+   |                    ^^ not a valid postfix operator\n+\n+error: Rust has no postfix decrement operator\n+  --> $DIR/issue-108495-dec.rs:19:14\n+   |\n+LL |     let _ = i-- + --i;\n+   |              ^^ not a valid postfix operator\n+   |\n+help: use `-= 1` instead\n+   |\n+LL |     let _ = { let tmp = i; i -= 1; tmp } + --i;\n+   |             +++++++++++  ~~~~~~~~~~~~~~~\n+\n+error: Rust has no postfix decrement operator\n+  --> $DIR/issue-108495-dec.rs:24:24\n+   |\n+LL |     let _ = (1 + 2 + i)--;\n+   |                        ^^ not a valid postfix operator\n+   |\n+help: use `-= 1` instead\n+   |\n+LL |     let _ = { let tmp = (1 + 2 + i); (1 + 2 + i) -= 1; tmp };\n+   |             +++++++++++            ~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+error: Rust has no postfix decrement operator\n+  --> $DIR/issue-108495-dec.rs:29:15\n+   |\n+LL |     let _ = (i-- + 1) + 2;\n+   |               ^^ not a valid postfix operator\n+   |\n+help: use `-= 1` instead\n+   |\n+LL |     let _ = ({ let tmp = i; i -= 1; tmp } + 1) + 2;\n+   |              +++++++++++  ~~~~~~~~~~~~~~~\n+\n+error: Rust has no postfix decrement operator\n+  --> $DIR/issue-108495-dec.rs:35:10\n+   |\n+LL |         i--;\n+   |          ^^ not a valid postfix operator\n+   |\n+help: use `-= 1` instead\n+   |\n+LL |         i -= 1;\n+   |           ~~~~\n+\n+error: aborting due to 7 previous errors\n+"}]}