{"sha": "a605441e049f0b6d5f7715b94b8ac4662fd7fcf6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2MDU0NDFlMDQ5ZjBiNmQ1Zjc3MTViOTRiOGFjNDY2MmZkN2ZjZjY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-15T07:17:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-15T07:17:06Z"}, "message": "Auto merge of #67310 - Centril:rollup-22jiyow, r=Centril\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #67255 (Remove i686-unknown-dragonfly target)\n - #67267 (Fix signature of `__wasilibc_find_relpath`)\n - #67282 (Fix example code of OpenOptions::open)\n - #67289 (Do not ICE on unnamed future)\n - #67300 (Restore original implementation of Vec::retain)\n - #67305 (Doc typo)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "f60596ca9dbae104e70cfd1a31aef5a90a255293", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f60596ca9dbae104e70cfd1a31aef5a90a255293"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a605441e049f0b6d5f7715b94b8ac4662fd7fcf6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a605441e049f0b6d5f7715b94b8ac4662fd7fcf6", "html_url": "https://github.com/rust-lang/rust/commit/a605441e049f0b6d5f7715b94b8ac4662fd7fcf6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a605441e049f0b6d5f7715b94b8ac4662fd7fcf6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc6b5d6efe163060bde31cc1c801086ed7ebc8f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc6b5d6efe163060bde31cc1c801086ed7ebc8f1", "html_url": "https://github.com/rust-lang/rust/commit/fc6b5d6efe163060bde31cc1c801086ed7ebc8f1"}, {"sha": "e5c34411f979712fc21f338c730158a2ac399c75", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5c34411f979712fc21f338c730158a2ac399c75", "html_url": "https://github.com/rust-lang/rust/commit/e5c34411f979712fc21f338c730158a2ac399c75"}], "stats": {"total": 141, "additions": 96, "deletions": 45}, "files": [{"sha": "2ad4e22884ea77630388bfc2dc42c3fdc7d20dd4", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a605441e049f0b6d5f7715b94b8ac4662fd7fcf6/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a605441e049f0b6d5f7715b94b8ac4662fd7fcf6/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=a605441e049f0b6d5f7715b94b8ac4662fd7fcf6", "patch": "@@ -1079,7 +1079,22 @@ impl<T> Vec<T> {\n     pub fn retain<F>(&mut self, mut f: F)\n         where F: FnMut(&T) -> bool\n     {\n-        self.drain_filter(|x| !f(x));\n+        let len = self.len();\n+        let mut del = 0;\n+        {\n+            let v = &mut **self;\n+\n+            for i in 0..len {\n+                if !f(&v[i]) {\n+                    del += 1;\n+                } else if del > 0 {\n+                    v.swap(i - del, i);\n+                }\n+            }\n+        }\n+        if del > 0 {\n+            self.truncate(len - del);\n+        }\n     }\n \n     /// Removes all but the first of consecutive elements in the vector that resolve to the same"}, {"sha": "33715418ffd73d7ff6d4bc0d63260d43e51fbd3c", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a605441e049f0b6d5f7715b94b8ac4662fd7fcf6/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a605441e049f0b6d5f7715b94b8ac4662fd7fcf6/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=a605441e049f0b6d5f7715b94b8ac4662fd7fcf6", "patch": "@@ -144,7 +144,7 @@ NonZeroI8 NonZeroI16 NonZeroI32 NonZeroI64 NonZeroI128 NonZeroIsize }\n \n /// Provides intentionally-wrapped arithmetic on `T`.\n ///\n-/// Operations like `+` on `u32` values is intended to never overflow,\n+/// Operations like `+` on `u32` values are intended to never overflow,\n /// and in some debug configurations overflow is detected and results\n /// in a panic. While most arithmetic falls into this category, some\n /// code explicitly expects and relies upon modular arithmetic (e.g.,"}, {"sha": "69e772697f846e9af28159ba32a794616426a719", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a605441e049f0b6d5f7715b94b8ac4662fd7fcf6/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a605441e049f0b6d5f7715b94b8ac4662fd7fcf6/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=a605441e049f0b6d5f7715b94b8ac4662fd7fcf6", "patch": "@@ -1016,8 +1016,8 @@ impl<'hir> Map<'hir> {\n         }\n     }\n \n-    pub fn name(&self, id: HirId) -> Name {\n-        match self.get(id) {\n+    pub fn opt_name(&self, id: HirId) -> Option<Name> {\n+        Some(match self.get(id) {\n             Node::Item(i) => i.ident.name,\n             Node::ForeignItem(fi) => fi.ident.name,\n             Node::ImplItem(ii) => ii.ident.name,\n@@ -1028,7 +1028,14 @@ impl<'hir> Map<'hir> {\n             Node::GenericParam(param) => param.name.ident().name,\n             Node::Binding(&Pat { kind: PatKind::Binding(_, _, l, _), .. }) => l.name,\n             Node::Ctor(..) => self.name(self.get_parent_item(id)),\n-            _ => bug!(\"no name for {}\", self.node_to_string(id))\n+            _ => return None,\n+        })\n+    }\n+\n+    pub fn name(&self, id: HirId) -> Name {\n+        match self.opt_name(id) {\n+            Some(name) => name,\n+            None => bug!(\"no name for {}\", self.node_to_string(id)),\n         }\n     }\n "}, {"sha": "701c19085bec586e20beabe1b5eaf98d55c2f513", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a605441e049f0b6d5f7715b94b8ac4662fd7fcf6/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a605441e049f0b6d5f7715b94b8ac4662fd7fcf6/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=a605441e049f0b6d5f7715b94b8ac4662fd7fcf6", "patch": "@@ -2404,7 +2404,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             let message = if let Some(name) = last_generator\n                 .and_then(|generator_did| self.tcx.parent(generator_did))\n                 .and_then(|parent_did| self.tcx.hir().as_local_hir_id(parent_did))\n-                .map(|parent_hir_id| self.tcx.hir().name(parent_hir_id))\n+                .and_then(|parent_hir_id| self.tcx.hir().opt_name(parent_hir_id))\n             {\n                 format!(\"future returned by `{}` is not {}\", name, trait_name)\n             } else {"}, {"sha": "20315e7145c732874e916fda0256780a6721f53b", "filename": "src/librustc_target/spec/i686_unknown_dragonfly.rs", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/fc6b5d6efe163060bde31cc1c801086ed7ebc8f1/src%2Flibrustc_target%2Fspec%2Fi686_unknown_dragonfly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc6b5d6efe163060bde31cc1c801086ed7ebc8f1/src%2Flibrustc_target%2Fspec%2Fi686_unknown_dragonfly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fi686_unknown_dragonfly.rs?ref=fc6b5d6efe163060bde31cc1c801086ed7ebc8f1", "patch": "@@ -1,23 +0,0 @@\n-use crate::spec::{LinkerFlavor, Target, TargetResult};\n-\n-pub fn target() -> TargetResult {\n-    let mut base = super::dragonfly_base::opts();\n-    base.cpu = \"pentium4\".to_string();\n-    base.max_atomic_width = Some(64);\n-    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m32\".to_string());\n-    base.stack_probes = true;\n-\n-    Ok(Target {\n-        llvm_target: \"i686-unknown-dragonfly\".to_string(),\n-        target_endian: \"little\".to_string(),\n-        target_pointer_width: \"32\".to_string(),\n-        target_c_int_width: \"32\".to_string(),\n-        data_layout: \"e-m:e-p:32:32-f64:32:64-f80:32-n8:16:32-S128\".to_string(),\n-        arch: \"x86\".to_string(),\n-        target_os: \"dragonfly\".to_string(),\n-        target_env: String::new(),\n-        target_vendor: \"unknown\".to_string(),\n-        linker_flavor: LinkerFlavor::Gcc,\n-        options: base,\n-    })\n-}"}, {"sha": "34b321d38f0f65a157d6c01fe62e8af6dfa76f54", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a605441e049f0b6d5f7715b94b8ac4662fd7fcf6/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a605441e049f0b6d5f7715b94b8ac4662fd7fcf6/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=a605441e049f0b6d5f7715b94b8ac4662fd7fcf6", "patch": "@@ -398,7 +398,6 @@ supported_targets! {\n     (\"powerpc64-unknown-freebsd\", powerpc64_unknown_freebsd),\n     (\"x86_64-unknown-freebsd\", x86_64_unknown_freebsd),\n \n-    (\"i686-unknown-dragonfly\", i686_unknown_dragonfly),\n     (\"x86_64-unknown-dragonfly\", x86_64_unknown_dragonfly),\n \n     (\"aarch64-unknown-openbsd\", aarch64_unknown_openbsd),"}, {"sha": "01e57ec0ab9415600e0023688fc40e971bf55431", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a605441e049f0b6d5f7715b94b8ac4662fd7fcf6/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a605441e049f0b6d5f7715b94b8ac4662fd7fcf6/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=a605441e049f0b6d5f7715b94b8ac4662fd7fcf6", "patch": "@@ -936,7 +936,7 @@ impl OpenOptions {\n     /// ```no_run\n     /// use std::fs::OpenOptions;\n     ///\n-    /// let file = OpenOptions::new().open(\"foo.txt\");\n+    /// let file = OpenOptions::new().read(true).open(\"foo.txt\");\n     /// ```\n     ///\n     /// [`ErrorKind`]: ../io/enum.ErrorKind.html"}, {"sha": "04bfdf67e12d28b416ce43d5e89d59503fbe3c05", "filename": "src/libstd/sys/wasi/fs.rs", "status": "modified", "additions": 21, "deletions": 14, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/a605441e049f0b6d5f7715b94b8ac4662fd7fcf6/src%2Flibstd%2Fsys%2Fwasi%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a605441e049f0b6d5f7715b94b8ac4662fd7fcf6/src%2Flibstd%2Fsys%2Fwasi%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Ffs.rs?ref=a605441e049f0b6d5f7715b94b8ac4662fd7fcf6", "patch": "@@ -364,7 +364,7 @@ impl OpenOptions {\n \n impl File {\n     pub fn open(path: &Path, opts: &OpenOptions) -> io::Result<File> {\n-        let (dir, file) = open_parent(path, wasi::RIGHTS_PATH_OPEN)?;\n+        let (dir, file) = open_parent(path)?;\n         open_at(&dir, &file, opts)\n     }\n \n@@ -452,7 +452,7 @@ impl DirBuilder {\n     }\n \n     pub fn mkdir(&self, p: &Path) -> io::Result<()> {\n-        let (dir, file) = open_parent(p, wasi::RIGHTS_PATH_CREATE_DIRECTORY)?;\n+        let (dir, file) = open_parent(p)?;\n         dir.create_directory(osstr2str(file.as_ref())?)\n     }\n }\n@@ -478,13 +478,13 @@ pub fn readdir(p: &Path) -> io::Result<ReadDir> {\n }\n \n pub fn unlink(p: &Path) -> io::Result<()> {\n-    let (dir, file) = open_parent(p, wasi::RIGHTS_PATH_UNLINK_FILE)?;\n+    let (dir, file) = open_parent(p)?;\n     dir.unlink_file(osstr2str(file.as_ref())?)\n }\n \n pub fn rename(old: &Path, new: &Path) -> io::Result<()> {\n-    let (old, old_file) = open_parent(old, wasi::RIGHTS_PATH_RENAME_SOURCE)?;\n-    let (new, new_file) = open_parent(new, wasi::RIGHTS_PATH_RENAME_TARGET)?;\n+    let (old, old_file) = open_parent(old)?;\n+    let (new, new_file) = open_parent(new)?;\n     old.rename(osstr2str(old_file.as_ref())?, &new, osstr2str(new_file.as_ref())?)\n }\n \n@@ -495,12 +495,12 @@ pub fn set_perm(_p: &Path, _perm: FilePermissions) -> io::Result<()> {\n }\n \n pub fn rmdir(p: &Path) -> io::Result<()> {\n-    let (dir, file) = open_parent(p, wasi::RIGHTS_PATH_REMOVE_DIRECTORY)?;\n+    let (dir, file) = open_parent(p)?;\n     dir.remove_directory(osstr2str(file.as_ref())?)\n }\n \n pub fn readlink(p: &Path) -> io::Result<PathBuf> {\n-    let (dir, file) = open_parent(p, wasi::RIGHTS_PATH_READLINK)?;\n+    let (dir, file) = open_parent(p)?;\n     read_link(&dir, &file)\n }\n \n@@ -536,13 +536,13 @@ fn read_link(fd: &WasiFd, file: &Path) -> io::Result<PathBuf> {\n }\n \n pub fn symlink(src: &Path, dst: &Path) -> io::Result<()> {\n-    let (dst, dst_file) = open_parent(dst, wasi::RIGHTS_PATH_SYMLINK)?;\n+    let (dst, dst_file) = open_parent(dst)?;\n     dst.symlink(osstr2str(src.as_ref())?, osstr2str(dst_file.as_ref())?)\n }\n \n pub fn link(src: &Path, dst: &Path) -> io::Result<()> {\n-    let (src, src_file) = open_parent(src, wasi::RIGHTS_PATH_LINK_SOURCE)?;\n-    let (dst, dst_file) = open_parent(dst, wasi::RIGHTS_PATH_LINK_TARGET)?;\n+    let (src, src_file) = open_parent(src)?;\n+    let (dst, dst_file) = open_parent(dst)?;\n     src.link(\n         wasi::LOOKUPFLAGS_SYMLINK_FOLLOW,\n         osstr2str(src_file.as_ref())?,\n@@ -552,12 +552,12 @@ pub fn link(src: &Path, dst: &Path) -> io::Result<()> {\n }\n \n pub fn stat(p: &Path) -> io::Result<FileAttr> {\n-    let (dir, file) = open_parent(p, wasi::RIGHTS_PATH_FILESTAT_GET)?;\n+    let (dir, file) = open_parent(p)?;\n     metadata_at(&dir, wasi::LOOKUPFLAGS_SYMLINK_FOLLOW, &file)\n }\n \n pub fn lstat(p: &Path) -> io::Result<FileAttr> {\n-    let (dir, file) = open_parent(p, wasi::RIGHTS_PATH_FILESTAT_GET)?;\n+    let (dir, file) = open_parent(p)?;\n     metadata_at(&dir, 0, &file)\n }\n \n@@ -611,11 +611,11 @@ fn open_at(fd: &WasiFd, path: &Path, opts: &OpenOptions) -> io::Result<File> {\n ///\n /// Note that this can fail if `p` doesn't look like it can be opened relative\n /// to any preopened file descriptor.\n-fn open_parent(p: &Path, rights: wasi::Rights) -> io::Result<(ManuallyDrop<WasiFd>, PathBuf)> {\n+fn open_parent(p: &Path) -> io::Result<(ManuallyDrop<WasiFd>, PathBuf)> {\n     let p = CString::new(p.as_os_str().as_bytes())?;\n     unsafe {\n         let mut ret = ptr::null();\n-        let fd = libc::__wasilibc_find_relpath(p.as_ptr(), rights, 0, &mut ret);\n+        let fd = __wasilibc_find_relpath(p.as_ptr(), &mut ret);\n         if fd == -1 {\n             let msg = format!(\n                 \"failed to find a preopened file descriptor \\\n@@ -635,6 +635,13 @@ fn open_parent(p: &Path, rights: wasi::Rights) -> io::Result<(ManuallyDrop<WasiF\n \n         return Ok((ManuallyDrop::new(WasiFd::from_raw(fd as u32)), path));\n     }\n+\n+    extern \"C\" {\n+        pub fn __wasilibc_find_relpath(\n+            path: *const libc::c_char,\n+            relative_path: *mut *const libc::c_char,\n+        ) -> libc::c_int;\n+    }\n }\n \n pub fn osstr2str(f: &OsStr) -> io::Result<&str> {"}, {"sha": "1a7ff613341ece66d7d2097028ccd642abfcf6fc", "filename": "src/test/ui/async-await/issue-67252-unnamed-future.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a605441e049f0b6d5f7715b94b8ac4662fd7fcf6/src%2Ftest%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a605441e049f0b6d5f7715b94b8ac4662fd7fcf6/src%2Ftest%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.rs?ref=a605441e049f0b6d5f7715b94b8ac4662fd7fcf6", "patch": "@@ -0,0 +1,24 @@\n+// edition:2018\n+use std::future::Future;\n+use std::pin::Pin;\n+use std::task::{Context, Poll};\n+\n+fn spawn<T: Send>(_: T) {}\n+\n+pub struct AFuture;\n+impl Future for AFuture{\n+    type Output = ();\n+\n+    fn poll(mut self: Pin<&mut Self>, _: &mut Context<'_>) -> Poll<()> {\n+        unimplemented!()\n+    }\n+}\n+\n+async fn foo() {\n+    spawn(async { //~ ERROR future cannot be sent between threads safely\n+        let _a = std::ptr::null_mut::<()>(); // `*mut ()` is not `Send`\n+        AFuture.await;\n+    });\n+}\n+\n+fn main() {}"}, {"sha": "24aedeb96597aecb69f43333960ec6e02de9693f", "filename": "src/test/ui/async-await/issue-67252-unnamed-future.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a605441e049f0b6d5f7715b94b8ac4662fd7fcf6/src%2Ftest%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a605441e049f0b6d5f7715b94b8ac4662fd7fcf6/src%2Ftest%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.stderr?ref=a605441e049f0b6d5f7715b94b8ac4662fd7fcf6", "patch": "@@ -0,0 +1,22 @@\n+error: future cannot be sent between threads safely\n+  --> $DIR/issue-67252-unnamed-future.rs:18:5\n+   |\n+LL | fn spawn<T: Send>(_: T) {}\n+   |    -----    ---- required by this bound in `spawn`\n+...\n+LL |     spawn(async {\n+   |     ^^^^^ future is not `Send`\n+   |\n+   = help: within `impl std::future::Future`, the trait `std::marker::Send` is not implemented for `*mut ()`\n+note: future is not `Send` as this value is used across an await\n+  --> $DIR/issue-67252-unnamed-future.rs:20:9\n+   |\n+LL |         let _a = std::ptr::null_mut::<()>(); // `*mut ()` is not `Send`\n+   |             -- has type `*mut ()`\n+LL |         AFuture.await;\n+   |         ^^^^^^^^^^^^^ await occurs here, with `_a` maybe used later\n+LL |     });\n+   |     - `_a` is later dropped here\n+\n+error: aborting due to previous error\n+"}]}