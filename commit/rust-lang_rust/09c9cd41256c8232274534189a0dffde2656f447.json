{"sha": "09c9cd41256c8232274534189a0dffde2656f447", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5YzljZDQxMjU2YzgyMzIyNzQ1MzQxODlhMGRmZmRlMjY1NmY0NDc=", "commit": {"author": {"name": "wada314", "email": "pc@wada314.jp", "date": "2018-12-25T09:03:48Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2018-12-25T09:03:48Z"}, "message": "Fix issue #3263 (#3264)", "tree": {"sha": "a6534c6aa5af31019dbf4467526d38ce091a77d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a6534c6aa5af31019dbf4467526d38ce091a77d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/09c9cd41256c8232274534189a0dffde2656f447", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/09c9cd41256c8232274534189a0dffde2656f447", "html_url": "https://github.com/rust-lang/rust/commit/09c9cd41256c8232274534189a0dffde2656f447", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/09c9cd41256c8232274534189a0dffde2656f447/comments", "author": {"login": "wada314", "id": 1488411, "node_id": "MDQ6VXNlcjE0ODg0MTE=", "avatar_url": "https://avatars.githubusercontent.com/u/1488411?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wada314", "html_url": "https://github.com/wada314", "followers_url": "https://api.github.com/users/wada314/followers", "following_url": "https://api.github.com/users/wada314/following{/other_user}", "gists_url": "https://api.github.com/users/wada314/gists{/gist_id}", "starred_url": "https://api.github.com/users/wada314/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wada314/subscriptions", "organizations_url": "https://api.github.com/users/wada314/orgs", "repos_url": "https://api.github.com/users/wada314/repos", "events_url": "https://api.github.com/users/wada314/events{/privacy}", "received_events_url": "https://api.github.com/users/wada314/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84702bc2896cd9ef6152163d2ae75e1390ce0779", "url": "https://api.github.com/repos/rust-lang/rust/commits/84702bc2896cd9ef6152163d2ae75e1390ce0779", "html_url": "https://github.com/rust-lang/rust/commit/84702bc2896cd9ef6152163d2ae75e1390ce0779"}], "stats": {"total": 39, "additions": 33, "deletions": 6}, "files": [{"sha": "c2e136d9938ac650a5f0908983c1000e3feb7fdb", "filename": "src/string.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/09c9cd41256c8232274534189a0dffde2656f447/src%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09c9cd41256c8232274534189a0dffde2656f447/src%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstring.rs?ref=09c9cd41256c8232274534189a0dffde2656f447", "patch": "@@ -105,7 +105,7 @@ pub fn rewrite_string<'a>(\n         // All the input starting at cur_start fits on the current line\n         if graphemes.len() - cur_start <= cur_max_chars {\n             for (i, grapheme) in graphemes[cur_start..].iter().enumerate() {\n-                if is_line_feed(grapheme) {\n+                if is_new_line(grapheme) {\n                     // take care of blank lines\n                     result = trim_end_but_line_feed(fmt.trim_end, result);\n                     result.push_str(\"\\n\");\n@@ -223,7 +223,7 @@ enum SnippetState {\n }\n \n fn not_whitespace_except_line_feed(g: &str) -> bool {\n-    is_line_feed(g) || !is_whitespace(g)\n+    is_new_line(g) || !is_whitespace(g)\n }\n \n /// Break the input string at a boundary character around the offset `max_chars`. A boundary\n@@ -240,7 +240,7 @@ fn break_string(max_chars: usize, trim_end: bool, line_end: &str, input: &[&str]\n         // line. If there is one, then text after it could be rewritten in a way that the available\n         // space is fully used.\n         for (i, grapheme) in input[0..=index].iter().enumerate() {\n-            if is_line_feed(grapheme) {\n+            if is_new_line(grapheme) {\n                 if i <= index_minus_ws {\n                     let mut line = &input[0..i].concat()[..];\n                     if trim_end {\n@@ -254,7 +254,7 @@ fn break_string(max_chars: usize, trim_end: bool, line_end: &str, input: &[&str]\n \n         let mut index_plus_ws = index;\n         for (i, grapheme) in input[index + 1..].iter().enumerate() {\n-            if !trim_end && is_line_feed(grapheme) {\n+            if !trim_end && is_new_line(grapheme) {\n                 return SnippetState::EndWithLineFeed(\n                     input[0..=index + 1 + i].concat(),\n                     index + 2 + i,\n@@ -325,8 +325,9 @@ fn break_string(max_chars: usize, trim_end: bool, line_end: &str, input: &[&str]\n     }\n }\n \n-fn is_line_feed(grapheme: &str) -> bool {\n-    grapheme.as_bytes()[0] == b'\\n'\n+fn is_new_line(grapheme: &str) -> bool {\n+    let bytes = grapheme.as_bytes();\n+    bytes.starts_with(b\"\\n\") || bytes.starts_with(b\"\\r\\n\")\n }\n \n fn is_whitespace(grapheme: &str) -> bool {"}, {"sha": "72f7e9cc6277ed2b65b50a5e1100881ccd4d738c", "filename": "tests/target/format_strings/issue-3263.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/09c9cd41256c8232274534189a0dffde2656f447/tests%2Ftarget%2Fformat_strings%2Fissue-3263.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09c9cd41256c8232274534189a0dffde2656f447/tests%2Ftarget%2Fformat_strings%2Fissue-3263.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fformat_strings%2Fissue-3263.rs?ref=09c9cd41256c8232274534189a0dffde2656f447", "patch": "@@ -0,0 +1,26 @@\n+// rustfmt-format_strings: true\n+// rustfmt-newline_style: Windows\n+\n+#[test]\n+fn compile_empty_program() {\n+    let result = get_result();\n+    let expected = \"; ModuleID = \\'foo\\'\n+\n+; Function Attrs: nounwind\n+declare void @llvm.memset.p0i8.i32(i8* nocapture, i8, i32, i32, i1) #0\n+\n+declare i32 @write(i32, i8*, i32)\n+\n+declare i32 @putchar(i32)\n+\n+declare i32 @getchar()\n+\n+define i32 @main() {\n+entry:\n+  ret i32 0\n+}\n+\n+attributes #0 = { nounwind }\n+\";\n+    assert_eq!(result, CString::new(expected).unwrap());\n+}"}]}