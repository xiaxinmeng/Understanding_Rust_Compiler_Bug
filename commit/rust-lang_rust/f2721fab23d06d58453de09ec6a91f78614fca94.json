{"sha": "f2721fab23d06d58453de09ec6a91f78614fca94", "node_id": "C_kwDOAAsO6NoAKGYyNzIxZmFiMjNkMDZkNTg0NTNkZTA5ZWM2YTkxZjc4NjE0ZmNhOTQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-02-04T13:58:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-04T13:58:56Z"}, "message": "Rollup merge of #92735 - GuillaumeGomez:crate-filter-url-param, r=jsha\n\nAdd crate filter parameter in URL\n\nFixes #92621.\n\nr? `@jsha`", "tree": {"sha": "22a283f43688442c9911fe7e6470ff73c14515f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22a283f43688442c9911fe7e6470ff73c14515f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2721fab23d06d58453de09ec6a91f78614fca94", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh/TEgCRBK7hj4Ov3rIwAA158IAHuzDecsalYvYt1Yw8Xswtuv\nGK+c/4iCR4oCh1kkO+bAyRoebxYACW6G3LA+RCJy4aBQXigVt5LNXjtPis5PbspR\nkIkCg2Viu+4tEpNYQIB2ic69qYnXNQRYJ2lVeUKw5HCZxbyHArQw6jvBIMvRYdxK\n+KK5ZLXVTmrH9CZy0CDiB+Rww/c2v8QhcsLtMs7a4UNO554koPh+mg6PRY6DG858\n6GnWdHAhbDyDHQWwg3bjXjZrs0H077w7Nm+xu+m5OhLErlK5Gtos/BO0Gdi/qwvr\n1iE3xKoUXLkdzr2oBTP9E4K4P7lcds+JuVtDPaso1CV8y7LZ27BkObQWw9P/OBc=\n=9Bpi\n-----END PGP SIGNATURE-----\n", "payload": "tree 22a283f43688442c9911fe7e6470ff73c14515f4\nparent 4e8fb743ccbec27344b2dd42de7057f41d4ebfdd\nparent 829a0471d01d728585c4a8b433b815a82bf72cb3\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1643983136 +0100\ncommitter GitHub <noreply@github.com> 1643983136 +0100\n\nRollup merge of #92735 - GuillaumeGomez:crate-filter-url-param, r=jsha\n\nAdd crate filter parameter in URL\n\nFixes #92621.\n\nr? `@jsha`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2721fab23d06d58453de09ec6a91f78614fca94", "html_url": "https://github.com/rust-lang/rust/commit/f2721fab23d06d58453de09ec6a91f78614fca94", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2721fab23d06d58453de09ec6a91f78614fca94/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e8fb743ccbec27344b2dd42de7057f41d4ebfdd", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e8fb743ccbec27344b2dd42de7057f41d4ebfdd", "html_url": "https://github.com/rust-lang/rust/commit/4e8fb743ccbec27344b2dd42de7057f41d4ebfdd"}, {"sha": "829a0471d01d728585c4a8b433b815a82bf72cb3", "url": "https://api.github.com/repos/rust-lang/rust/commits/829a0471d01d728585c4a8b433b815a82bf72cb3", "html_url": "https://github.com/rust-lang/rust/commit/829a0471d01d728585c4a8b433b815a82bf72cb3"}], "stats": {"total": 198, "additions": 140, "deletions": 58}, "files": [{"sha": "cab3c28342dab5df73e0c6d258eff3ae3d083f3e", "filename": "src/librustdoc/html/static/js/main.js", "status": "modified", "additions": 3, "deletions": 20, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f2721fab23d06d58453de09ec6a91f78614fca94/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/f2721fab23d06d58453de09ec6a91f78614fca94/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js?ref=f2721fab23d06d58453de09ec6a91f78614fca94", "patch": "@@ -54,7 +54,6 @@ function resourcePath(basename, extension) {\n     return getVar(\"root-path\") + basename + getVar(\"resource-suffix\") + extension;\n }\n \n-\n (function () {\n     window.rootPath = getVar(\"root-path\");\n     window.currentCrate = getVar(\"current-crate\");\n@@ -232,7 +231,7 @@ function hideThemeButtonState() {\n             document.title = searchState.titleBeforeSearch;\n             // We also remove the query parameter from the URL.\n             if (searchState.browserSupportsHistoryApi()) {\n-                history.replaceState(\"\", window.currentCrate + \" - Rust\",\n+                history.replaceState(null, window.currentCrate + \" - Rust\",\n                     getNakedUrl() + window.location.hash);\n             }\n         },\n@@ -246,18 +245,6 @@ function hideThemeButtonState() {\n                 });\n             return params;\n         },\n-        putBackSearch: function(search_input) {\n-            var search = searchState.outputElement();\n-            if (search_input.value !== \"\" && hasClass(search, \"hidden\")) {\n-                searchState.showResults(search);\n-                if (searchState.browserSupportsHistoryApi()) {\n-                    var extra = \"?search=\" + encodeURIComponent(search_input.value);\n-                    history.replaceState(search_input.value, \"\",\n-                        getNakedUrl() + extra + window.location.hash);\n-                }\n-                document.title = searchState.title;\n-            }\n-        },\n         browserSupportsHistoryApi: function() {\n             return window.history && typeof window.history.pushState === \"function\";\n         },\n@@ -282,14 +269,10 @@ function hideThemeButtonState() {\n             }\n \n             search_input.addEventListener(\"focus\", function() {\n-                searchState.putBackSearch(this);\n-                search_input.origPlaceholder = searchState.input.placeholder;\n+                search_input.origPlaceholder = search_input.placeholder;\n                 search_input.placeholder = \"Type your search here.\";\n                 loadSearch();\n             });\n-            search_input.addEventListener(\"blur\", function() {\n-                search_input.placeholder = searchState.input.origPlaceholder;\n-            });\n \n             if (search_input.value != '') {\n                 loadSearch();\n@@ -330,7 +313,7 @@ function hideThemeButtonState() {\n             var hash = ev.newURL.slice(ev.newURL.indexOf(\"#\") + 1);\n             if (searchState.browserSupportsHistoryApi()) {\n                 // `window.location.search`` contains all the query parameters, not just `search`.\n-                history.replaceState(hash, \"\",\n+                history.replaceState(null, \"\",\n                     getNakedUrl() + window.location.search + \"#\" + hash);\n             }\n             elem = document.getElementById(hash);"}, {"sha": "8c832a222b74d942a3a45d9de3aceee3ebe69164", "filename": "src/librustdoc/html/static/js/search.js", "status": "modified", "additions": 94, "deletions": 27, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/f2721fab23d06d58453de09ec6a91f78614fca94/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "raw_url": "https://github.com/rust-lang/rust/raw/f2721fab23d06d58453de09ec6a91f78614fca94/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js?ref=f2721fab23d06d58453de09ec6a91f78614fca94", "patch": "@@ -1,5 +1,5 @@\n /* global addClass, getNakedUrl, getSettingValue, hasOwnPropertyRustdoc, initSearch, onEach */\n-/* global onEachLazy, removeClass, searchState, updateLocalStorage */\n+/* global onEachLazy, removeClass, searchState, hasClass */\n \n (function() {\n // This mapping table should match the discriminants of\n@@ -133,6 +133,39 @@ window.initSearch = function(rawSearchIndex) {\n         searchState.input.value = params.search || \"\";\n     }\n \n+    /**\n+     * Build an URL with search parameters.\n+     *\n+     * @param {string} search            - The current search being performed.\n+     * @param {string|null} filterCrates - The current filtering crate (if any).\n+     * @return {string}\n+     */\n+    function buildUrl(search, filterCrates) {\n+        var extra = \"?search=\" + encodeURIComponent(search);\n+\n+        if (filterCrates !== null) {\n+            extra += \"&filter-crate=\" + encodeURIComponent(filterCrates);\n+        }\n+        return getNakedUrl() + extra + window.location.hash;\n+    }\n+\n+    /**\n+     * Return the filtering crate or `null` if there is none.\n+     *\n+     * @return {string|null}\n+     */\n+    function getFilterCrates() {\n+        var elem = document.getElementById(\"crate-search\");\n+\n+        if (elem &&\n+            elem.value !== \"All crates\" &&\n+            hasOwnPropertyRustdoc(rawSearchIndex, elem.value))\n+        {\n+            return elem.value;\n+        }\n+        return null;\n+    }\n+\n     /**\n      * Executes the query and returns a list of results for each results tab.\n      * @param  {Object}        query          - The user query\n@@ -595,7 +628,7 @@ window.initSearch = function(rawSearchIndex) {\n             // aliases to be before the others in the displayed results.\n             var aliases = [];\n             var crateAliases = [];\n-            if (filterCrates !== undefined) {\n+            if (filterCrates !== null) {\n                 if (ALIASES[filterCrates] && ALIASES[filterCrates][query.search]) {\n                     var query_aliases = ALIASES[filterCrates][query.search];\n                     var len = query_aliases.length;\n@@ -694,7 +727,7 @@ window.initSearch = function(rawSearchIndex) {\n         {\n             val = extractGenerics(val.substr(1, val.length - 2));\n             for (i = 0; i < nSearchWords; ++i) {\n-                if (filterCrates !== undefined && searchIndex[i].crate !== filterCrates) {\n+                if (filterCrates !== null && searchIndex[i].crate !== filterCrates) {\n                     continue;\n                 }\n                 in_args = findArg(searchIndex[i], val, true, typeFilter);\n@@ -725,7 +758,7 @@ window.initSearch = function(rawSearchIndex) {\n             var output = extractGenerics(parts[1]);\n \n             for (i = 0; i < nSearchWords; ++i) {\n-                if (filterCrates !== undefined && searchIndex[i].crate !== filterCrates) {\n+                if (filterCrates !== null && searchIndex[i].crate !== filterCrates) {\n                     continue;\n                 }\n                 var type = searchIndex[i].type;\n@@ -781,7 +814,7 @@ window.initSearch = function(rawSearchIndex) {\n             var lev, j;\n             for (j = 0; j < nSearchWords; ++j) {\n                 ty = searchIndex[j];\n-                if (!ty || (filterCrates !== undefined && ty.crate !== filterCrates)) {\n+                if (!ty || (filterCrates !== null && ty.crate !== filterCrates)) {\n                     continue;\n                 }\n                 var lev_add = 0;\n@@ -1279,17 +1312,6 @@ window.initSearch = function(rawSearchIndex) {\n         };\n     }\n \n-    function getFilterCrates() {\n-        var elem = document.getElementById(\"crate-search\");\n-\n-        if (elem && elem.value !== \"All crates\" &&\n-            hasOwnPropertyRustdoc(rawSearchIndex, elem.value))\n-        {\n-            return elem.value;\n-        }\n-        return undefined;\n-    }\n-\n     /**\n      * Perform a search based on the current state of the search input element\n      * and display the results.\n@@ -1309,27 +1331,34 @@ window.initSearch = function(rawSearchIndex) {\n         }\n         if (!forced && query.id === currentResults) {\n             if (query.query.length > 0) {\n-                searchState.putBackSearch(searchState.input);\n+                putBackSearch();\n             }\n             return;\n         }\n \n+        var filterCrates = getFilterCrates();\n+\n+        // In case we have no information about the saved crate and there is a URL query parameter,\n+        // we override it with the URL query parameter.\n+        if (filterCrates === null && params[\"filter-crate\"] !== undefined) {\n+            filterCrates = params[\"filter-crate\"];\n+        }\n+\n         // Update document title to maintain a meaningful browser history\n         searchState.title = \"Results for \" + query.query + \" - Rust\";\n \n         // Because searching is incremental by character, only the most\n         // recent search query is added to the browser history.\n         if (searchState.browserSupportsHistoryApi()) {\n-            var newURL = getNakedUrl() + \"?search=\" + encodeURIComponent(query.raw) +\n-                window.location.hash;\n+            var newURL = buildUrl(query.raw, filterCrates);\n+\n             if (!history.state && !params.search) {\n-                history.pushState(query, \"\", newURL);\n+                history.pushState(null, \"\", newURL);\n             } else {\n-                history.replaceState(query, \"\", newURL);\n+                history.replaceState(null, \"\", newURL);\n             }\n         }\n \n-        var filterCrates = getFilterCrates();\n         showResults(execSearch(query, searchWords, filterCrates),\n             params[\"go_to_first\"], filterCrates);\n     }\n@@ -1495,12 +1524,28 @@ window.initSearch = function(rawSearchIndex) {\n         search();\n     }\n \n+    function putBackSearch() {\n+        var search_input = searchState.input;\n+        if (!searchState.input) {\n+            return;\n+        }\n+        var search = searchState.outputElement();\n+        if (search_input.value !== \"\" && hasClass(search, \"hidden\")) {\n+            searchState.showResults(search);\n+            if (searchState.browserSupportsHistoryApi()) {\n+                history.replaceState(null, \"\",\n+                    buildUrl(search_input.value, getFilterCrates()));\n+            }\n+            document.title = searchState.title;\n+        }\n+    }\n+\n     function registerSearchEvents() {\n         var searchAfter500ms = function() {\n             searchState.clearInputTimeout();\n             if (searchState.input.value.length === 0) {\n                 if (searchState.browserSupportsHistoryApi()) {\n-                    history.replaceState(\"\", window.currentCrate + \" - Rust\",\n+                    history.replaceState(null, window.currentCrate + \" - Rust\",\n                         getNakedUrl() + window.location.hash);\n                 }\n                 searchState.hideResults();\n@@ -1567,6 +1612,14 @@ window.initSearch = function(rawSearchIndex) {\n             }\n         });\n \n+        searchState.input.addEventListener(\"focus\", function() {\n+            putBackSearch();\n+        });\n+\n+        searchState.input.addEventListener(\"blur\", function() {\n+            searchState.input.placeholder = searchState.input.origPlaceholder;\n+        });\n+\n         // Push and pop states are used to add search results to the browser\n         // history.\n         if (searchState.browserSupportsHistoryApi()) {\n@@ -1619,7 +1672,16 @@ window.initSearch = function(rawSearchIndex) {\n     }\n \n     function updateCrate(ev) {\n-        updateLocalStorage(\"rustdoc-saved-filter-crate\", ev.target.value);\n+        if (ev.target.value === \"All crates\") {\n+            // If we don't remove it from the URL, it'll be picked up again by the search.\n+            var params = searchState.getQueryStringParams();\n+            var query = searchState.input.value.trim();\n+            if (!history.state && !params.search) {\n+                history.pushState(null, \"\", buildUrl(query, null));\n+            } else {\n+                history.replaceState(null, \"\", buildUrl(query, null));\n+            }\n+        }\n         // In case you \"cut\" the entry from the search input, then change the crate filter\n         // before paste back the previous search, you get the old search results without\n         // the filter. To prevent this, we need to remove the previous results.\n@@ -1629,10 +1691,15 @@ window.initSearch = function(rawSearchIndex) {\n \n     searchWords = buildIndex(rawSearchIndex);\n     registerSearchEvents();\n-    // If there's a search term in the URL, execute the search now.\n-    if (searchState.getQueryStringParams().search) {\n-        search();\n+\n+    function runSearchIfNeeded() {\n+        // If there's a search term in the URL, execute the search now.\n+        if (searchState.getQueryStringParams().search) {\n+            search();\n+        }\n     }\n+\n+    runSearchIfNeeded();\n };\n \n if (window.searchIndex !== undefined) {"}, {"sha": "139fa5c9a11a62e4db3586a604a1dd849c7a729c", "filename": "src/librustdoc/html/static/js/settings.js", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2721fab23d06d58453de09ec6a91f78614fca94/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsettings.js", "raw_url": "https://github.com/rust-lang/rust/raw/f2721fab23d06d58453de09ec6a91f78614fca94/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsettings.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsettings.js?ref=f2721fab23d06d58453de09ec6a91f78614fca94", "patch": "@@ -4,7 +4,7 @@\n \n (function () {\n     function changeSetting(settingName, value) {\n-        updateLocalStorage(\"rustdoc-\" + settingName, value);\n+        updateLocalStorage(settingName, value);\n \n         switch (settingName) {\n             case \"theme\":"}, {"sha": "90490acccfdb5714a79994d19f8582e5febe2476", "filename": "src/librustdoc/html/static/js/source-script.js", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2721fab23d06d58453de09ec6a91f78614fca94/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsource-script.js", "raw_url": "https://github.com/rust-lang/rust/raw/f2721fab23d06d58453de09ec6a91f78614fca94/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsource-script.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsource-script.js?ref=f2721fab23d06d58453de09ec6a91f78614fca94", "patch": "@@ -82,11 +82,11 @@ function toggleSidebar() {\n     if (child.innerText === \">\") {\n         sidebar.classList.add(\"expanded\");\n         child.innerText = \"<\";\n-        updateLocalStorage(\"rustdoc-source-sidebar-show\", \"true\");\n+        updateLocalStorage(\"source-sidebar-show\", \"true\");\n     } else {\n         sidebar.classList.remove(\"expanded\");\n         child.innerText = \">\";\n-        updateLocalStorage(\"rustdoc-source-sidebar-show\", \"false\");\n+        updateLocalStorage(\"source-sidebar-show\", \"false\");\n     }\n }\n \n@@ -97,7 +97,7 @@ function createSidebarToggle() {\n \n     var inner = document.createElement(\"div\");\n \n-    if (getCurrentValue(\"rustdoc-source-sidebar-show\") === \"true\") {\n+    if (getCurrentValue(\"source-sidebar-show\") === \"true\") {\n         inner.innerText = \"<\";\n     } else {\n         inner.innerText = \">\";\n@@ -120,7 +120,7 @@ function createSourceSidebar() {\n \n     var sidebar = document.createElement(\"div\");\n     sidebar.id = \"source-sidebar\";\n-    if (getCurrentValue(\"rustdoc-source-sidebar-show\") !== \"true\") {\n+    if (getCurrentValue(\"source-sidebar-show\") !== \"true\") {\n         container.classList.remove(\"expanded\");\n     } else {\n         container.classList.add(\"expanded\");"}, {"sha": "ccf3d0a581a171e3fd4dc5e59fd981db5e1a3b25", "filename": "src/librustdoc/html/static/js/storage.js", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f2721fab23d06d58453de09ec6a91f78614fca94/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fstorage.js", "raw_url": "https://github.com/rust-lang/rust/raw/f2721fab23d06d58453de09ec6a91f78614fca94/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fstorage.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fstorage.js?ref=f2721fab23d06d58453de09ec6a91f78614fca94", "patch": "@@ -15,7 +15,7 @@ var settingsDataset = (function () {\n })();\n \n function getSettingValue(settingName) {\n-    var current = getCurrentValue('rustdoc-' + settingName);\n+    var current = getCurrentValue(settingName);\n     if (current !== null) {\n         return current;\n     }\n@@ -106,15 +106,15 @@ function hasOwnPropertyRustdoc(obj, property) {\n \n function updateLocalStorage(name, value) {\n     try {\n-        window.localStorage.setItem(name, value);\n+        window.localStorage.setItem(\"rustdoc-\" + name, value);\n     } catch(e) {\n         // localStorage is not accessible, do nothing\n     }\n }\n \n function getCurrentValue(name) {\n     try {\n-        return window.localStorage.getItem(name);\n+        return window.localStorage.getItem(\"rustdoc-\" + name);\n     } catch(e) {\n         return null;\n     }\n@@ -127,7 +127,7 @@ function switchTheme(styleElem, mainStyleElem, newTheme, saveTheme) {\n     // If this new value comes from a system setting or from the previously\n     // saved theme, no need to save it.\n     if (saveTheme) {\n-        updateLocalStorage(\"rustdoc-theme\", newTheme);\n+        updateLocalStorage(\"theme\", newTheme);\n     }\n \n     if (styleElem.href === newHref) {\n@@ -158,7 +158,7 @@ function useSystemTheme(value) {\n         value = true;\n     }\n \n-    updateLocalStorage(\"rustdoc-use-system-theme\", value);\n+    updateLocalStorage(\"use-system-theme\", value);\n \n     // update the toggle if we're on the settings page\n     var toggle = document.getElementById(\"use-system-theme\");\n@@ -231,7 +231,7 @@ if (getSettingValue(\"use-system-theme\") !== \"false\" && window.matchMedia) {\n     if (getSettingValue(\"use-system-theme\") === null\n         && getSettingValue(\"preferred-dark-theme\") === null\n         && darkThemes.indexOf(localStoredTheme) >= 0) {\n-        updateLocalStorage(\"rustdoc-preferred-dark-theme\", localStoredTheme);\n+        updateLocalStorage(\"preferred-dark-theme\", localStoredTheme);\n     }\n \n     // call the function to initialize the theme at least once!"}, {"sha": "73d310fc5c9cc6464ef8d214c5667c5c1847c206", "filename": "src/test/rustdoc-gui/search-filter.goml", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f2721fab23d06d58453de09ec6a91f78614fca94/src%2Ftest%2Frustdoc-gui%2Fsearch-filter.goml", "raw_url": "https://github.com/rust-lang/rust/raw/f2721fab23d06d58453de09ec6a91f78614fca94/src%2Ftest%2Frustdoc-gui%2Fsearch-filter.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsearch-filter.goml?ref=f2721fab23d06d58453de09ec6a91f78614fca94", "patch": "@@ -11,8 +11,38 @@ wait-for: \"#crate-search\"\n click: \"#crate-search\"\n // We select \"lib2\" option then press enter to change the filter.\n press-key: \"ArrowDown\"\n+press-key: \"ArrowDown\"\n press-key: \"Enter\"\n // Waiting for the search results to appear...\n wait-for: \"#titles\"\n // We check that there is no more \"test_docs\" appearing.\n assert-false: \"#results .externcrate\"\n+// We also check that \"lib2\" is the filter crate.\n+assert-property: (\"#crate-search\", {\"value\": \"lib2\"})\n+\n+// Now we check that leaving the search results and putting them back keeps the\n+// crate filtering.\n+press-key: \"Escape\"\n+wait-for: 100\n+assert-css: (\"#main-content\", {\"display\": \"block\"})\n+focus: \".search-input\"\n+wait-for: 100\n+assert-css: (\"#main-content\", {\"display\": \"none\"})\n+// We check that there is no more \"test_docs\" appearing.\n+assert-false: \"#results .externcrate\"\n+assert-property: (\"#crate-search\", {\"value\": \"lib2\"})\n+\n+// Selecting back \"All crates\"\n+click: \"#crate-search\"\n+press-key: \"ArrowUp\"\n+press-key: \"ArrowUp\"\n+press-key: \"Enter\"\n+// Waiting for the search results to appear...\n+wait-for: \"#titles\"\n+assert-property: (\"#crate-search\", {\"value\": \"All crates\"})\n+\n+// Checking that the URL parameter is taken into account for crate filtering.\n+goto: file://|DOC_PATH|/test_docs/index.html?search=test&filter-crate=lib2\n+wait-for: \"#crate-search\"\n+assert-property: (\"#crate-search\", {\"value\": \"lib2\"})\n+assert-false: \"#results .externcrate\""}, {"sha": "dbf5cf9650c5f4f16098a2d11979b1bf423531c3", "filename": "src/tools/rustdoc-js/tester.js", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2721fab23d06d58453de09ec6a91f78614fca94/src%2Ftools%2Frustdoc-js%2Ftester.js", "raw_url": "https://github.com/rust-lang/rust/raw/f2721fab23d06d58453de09ec6a91f78614fca94/src%2Ftools%2Frustdoc-js%2Ftester.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-js%2Ftester.js?ref=f2721fab23d06d58453de09ec6a91f78614fca94", "patch": "@@ -357,6 +357,8 @@ function runChecks(testFile, loaded, index) {\n     var testFileContent = readFile(testFile) + 'exports.QUERY = QUERY;exports.EXPECTED = EXPECTED;';\n     if (testFileContent.indexOf(\"FILTER_CRATE\") !== -1) {\n         testFileContent += \"exports.FILTER_CRATE = FILTER_CRATE;\";\n+    } else {\n+        testFileContent += \"exports.FILTER_CRATE = null;\";\n     }\n     var loadedFile = loadContent(testFileContent);\n "}]}