{"sha": "204c5162939760c7b16af7d42ec5ae8590dd8ae7", "node_id": "C_kwDOAAsO6NoAKDIwNGM1MTYyOTM5NzYwYzdiMTZhZjdkNDJlYzVhZTg1OTBkZDhhZTc", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-04-19T17:20:28Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-04-19T17:47:39Z"}, "message": "Substitute missing item suggestion correctly", "tree": {"sha": "fe46644233d5783339df4090c8cc99f3bebc7042", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe46644233d5783339df4090c8cc99f3bebc7042"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/204c5162939760c7b16af7d42ec5ae8590dd8ae7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/204c5162939760c7b16af7d42ec5ae8590dd8ae7", "html_url": "https://github.com/rust-lang/rust/commit/204c5162939760c7b16af7d42ec5ae8590dd8ae7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/204c5162939760c7b16af7d42ec5ae8590dd8ae7/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de96f3d8735b70d5dc1ca178aaee198b329b8f3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/de96f3d8735b70d5dc1ca178aaee198b329b8f3d", "html_url": "https://github.com/rust-lang/rust/commit/de96f3d8735b70d5dc1ca178aaee198b329b8f3d"}], "stats": {"total": 39, "additions": 27, "deletions": 12}, "files": [{"sha": "51ec5dd7a285fb3d60a651ef3f911f15c114d38c", "filename": "compiler/rustc_hir_analysis/src/check/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/204c5162939760c7b16af7d42ec5ae8590dd8ae7/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/204c5162939760c7b16af7d42ec5ae8590dd8ae7/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs?ref=204c5162939760c7b16af7d42ec5ae8590dd8ae7", "patch": "@@ -863,7 +863,7 @@ fn check_impl_items_against_trait<'tcx>(\n         if !missing_items.is_empty() {\n             let full_impl_span =\n                 tcx.hir().span_with_body(tcx.hir().local_def_id_to_hir_id(impl_id));\n-            missing_items_err(tcx, tcx.def_span(impl_id), &missing_items, full_impl_span);\n+            missing_items_err(tcx, impl_id, &missing_items, full_impl_span);\n         }\n \n         if let Some(missing_items) = must_implement_one_of {"}, {"sha": "f147b4657cccfe01dd0099127a44e956e40021a0", "filename": "compiler/rustc_hir_analysis/src/check/mod.rs", "status": "modified", "additions": 23, "deletions": 8, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/204c5162939760c7b16af7d42ec5ae8590dd8ae7/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/204c5162939760c7b16af7d42ec5ae8590dd8ae7/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fmod.rs?ref=204c5162939760c7b16af7d42ec5ae8590dd8ae7", "patch": "@@ -198,7 +198,7 @@ fn report_forbidden_specialization(tcx: TyCtxt<'_>, impl_item: DefId, parent_imp\n \n fn missing_items_err(\n     tcx: TyCtxt<'_>,\n-    impl_span: Span,\n+    impl_def_id: LocalDefId,\n     missing_items: &[ty::AssocItem],\n     full_impl_span: Span,\n ) {\n@@ -211,6 +211,7 @@ fn missing_items_err(\n         .collect::<Vec<_>>()\n         .join(\"`, `\");\n \n+    let impl_span = tcx.def_span(impl_def_id);\n     let mut err = struct_span_err!(\n         tcx.sess,\n         impl_span,\n@@ -229,7 +230,11 @@ fn missing_items_err(\n         tcx.sess.source_map().indentation_before(sugg_sp).unwrap_or_else(|| String::new());\n \n     for &trait_item in missing_items {\n-        let snippet = suggestion_signature(trait_item, tcx);\n+        let snippet = suggestion_signature(\n+            tcx,\n+            trait_item,\n+            tcx.impl_trait_ref(impl_def_id).unwrap().subst_identity(),\n+        );\n         let code = format!(\"{}{}\\n{}\", padding, snippet, padding);\n         let msg = format!(\"implement the missing item: `{snippet}`\");\n         let appl = Applicability::HasPlaceholders;\n@@ -301,11 +306,11 @@ fn default_body_is_unstable(\n /// Re-sugar `ty::GenericPredicates` in a way suitable to be used in structured suggestions.\n fn bounds_from_generic_predicates<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    predicates: ty::GenericPredicates<'tcx>,\n+    predicates: impl IntoIterator<Item = (ty::Predicate<'tcx>, Span)>,\n ) -> (String, String) {\n     let mut types: FxHashMap<Ty<'tcx>, Vec<DefId>> = FxHashMap::default();\n     let mut projections = vec![];\n-    for (predicate, _) in predicates.predicates {\n+    for (predicate, _) in predicates {\n         debug!(\"predicate {:?}\", predicate);\n         let bound_predicate = predicate.kind();\n         match bound_predicate.skip_binder() {\n@@ -367,7 +372,7 @@ fn fn_sig_suggestion<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     sig: ty::FnSig<'tcx>,\n     ident: Ident,\n-    predicates: ty::GenericPredicates<'tcx>,\n+    predicates: impl IntoIterator<Item = (ty::Predicate<'tcx>, Span)>,\n     assoc: ty::AssocItem,\n ) -> String {\n     let args = sig\n@@ -436,7 +441,17 @@ pub fn ty_kind_suggestion(ty: Ty<'_>) -> Option<&'static str> {\n /// Return placeholder code for the given associated item.\n /// Similar to `ty::AssocItem::suggestion`, but appropriate for use as the code snippet of a\n /// structured suggestion.\n-fn suggestion_signature(assoc: ty::AssocItem, tcx: TyCtxt<'_>) -> String {\n+fn suggestion_signature<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    assoc: ty::AssocItem,\n+    impl_trait_ref: ty::TraitRef<'tcx>,\n+) -> String {\n+    let substs = ty::InternalSubsts::identity_for_item(tcx, assoc.def_id).rebase_onto(\n+        tcx,\n+        assoc.container_id(tcx),\n+        impl_trait_ref.with_self_ty(tcx, tcx.types.self_param).substs,\n+    );\n+\n     match assoc.kind {\n         ty::AssocKind::Fn => {\n             // We skip the binder here because the binder would deanonymize all\n@@ -445,9 +460,9 @@ fn suggestion_signature(assoc: ty::AssocItem, tcx: TyCtxt<'_>) -> String {\n             // regions just fine, showing `fn(&MyType)`.\n             fn_sig_suggestion(\n                 tcx,\n-                tcx.fn_sig(assoc.def_id).subst_identity().skip_binder(),\n+                tcx.fn_sig(assoc.def_id).subst(tcx, substs).skip_binder(),\n                 assoc.ident(tcx),\n-                tcx.predicates_of(assoc.def_id),\n+                tcx.predicates_of(assoc.def_id).instantiate_own(tcx, substs),\n                 assoc,\n             )\n         }"}, {"sha": "9ba73f76923a15f20260cedcba4491fadfa33a04", "filename": "tests/ui/async-await/issue-74047.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/204c5162939760c7b16af7d42ec5ae8590dd8ae7/tests%2Fui%2Fasync-await%2Fissue-74047.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/204c5162939760c7b16af7d42ec5ae8590dd8ae7/tests%2Fui%2Fasync-await%2Fissue-74047.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-74047.stderr?ref=204c5162939760c7b16af7d42ec5ae8590dd8ae7", "patch": "@@ -5,7 +5,7 @@ LL | impl TryFrom<OtherStream> for MyStream {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `Error`, `try_from` in implementation\n    |\n    = help: implement the missing item: `type Error = Type;`\n-   = help: implement the missing item: `fn try_from(_: T) -> Result<Self, <Self as TryFrom<T>>::Error> { todo!() }`\n+   = help: implement the missing item: `fn try_from(_: OtherStream) -> Result<Self, <Self as TryFrom<OtherStream>>::Error> { todo!() }`\n \n error: aborting due to previous error\n "}, {"sha": "e849f5d0490d7504fcfd4a7ed5a066e07adda225", "filename": "tests/ui/issues/issue-3344.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/204c5162939760c7b16af7d42ec5ae8590dd8ae7/tests%2Fui%2Fissues%2Fissue-3344.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/204c5162939760c7b16af7d42ec5ae8590dd8ae7/tests%2Fui%2Fissues%2Fissue-3344.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-3344.stderr?ref=204c5162939760c7b16af7d42ec5ae8590dd8ae7", "patch": "@@ -4,7 +4,7 @@ error[E0046]: not all trait items implemented, missing: `partial_cmp`\n LL | impl PartialOrd for Thing {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^ missing `partial_cmp` in implementation\n    |\n-   = help: implement the missing item: `fn partial_cmp(&self, _: &Rhs) -> Option<std::cmp::Ordering> { todo!() }`\n+   = help: implement the missing item: `fn partial_cmp(&self, _: &Thing) -> Option<std::cmp::Ordering> { todo!() }`\n \n error: aborting due to previous error\n "}, {"sha": "77fa956287816b0db6ac9d82b69aebc245f6f2e2", "filename": "tests/ui/suggestions/missing-assoc-fn.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/204c5162939760c7b16af7d42ec5ae8590dd8ae7/tests%2Fui%2Fsuggestions%2Fmissing-assoc-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/204c5162939760c7b16af7d42ec5ae8590dd8ae7/tests%2Fui%2Fsuggestions%2Fmissing-assoc-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fmissing-assoc-fn.stderr?ref=204c5162939760c7b16af7d42ec5ae8590dd8ae7", "patch": "@@ -28,7 +28,7 @@ error[E0046]: not all trait items implemented, missing: `from_iter`\n LL | impl FromIterator<()> for X {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `from_iter` in implementation\n    |\n-   = help: implement the missing item: `fn from_iter<T>(_: T) -> Self where T: IntoIterator, std::iter::IntoIterator::Item = A { todo!() }`\n+   = help: implement the missing item: `fn from_iter<T>(_: T) -> Self where T: IntoIterator, std::iter::IntoIterator::Item = () { todo!() }`\n \n error: aborting due to 3 previous errors\n "}]}