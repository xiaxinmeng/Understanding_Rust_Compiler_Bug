{"sha": "2a41abb9efee7e07b3989f3a60b994a05c386851", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhNDFhYmI5ZWZlZTdlMDdiMzk4OWYzYTYwYjk5NGEwNWMzODY4NTE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-10-07T08:52:06Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-10-07T08:52:06Z"}, "message": "Work on the tutorial section on 'do'", "tree": {"sha": "4ad9c4ba3e5017c5fb4041fa4353ab59b1af249e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ad9c4ba3e5017c5fb4041fa4353ab59b1af249e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a41abb9efee7e07b3989f3a60b994a05c386851", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a41abb9efee7e07b3989f3a60b994a05c386851", "html_url": "https://github.com/rust-lang/rust/commit/2a41abb9efee7e07b3989f3a60b994a05c386851", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a41abb9efee7e07b3989f3a60b994a05c386851/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07fb35227b08d35213a7a17cded9a3933fd09479", "url": "https://api.github.com/repos/rust-lang/rust/commits/07fb35227b08d35213a7a17cded9a3933fd09479", "html_url": "https://github.com/rust-lang/rust/commit/07fb35227b08d35213a7a17cded9a3933fd09479"}], "stats": {"total": 45, "additions": 22, "deletions": 23}, "files": [{"sha": "36b118a21a37fc51f5713927bfd01394e56a8464", "filename": "doc/tutorial.md", "status": "modified", "additions": 22, "deletions": 23, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/2a41abb9efee7e07b3989f3a60b994a05c386851/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/2a41abb9efee7e07b3989f3a60b994a05c386851/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=2a41abb9efee7e07b3989f3a60b994a05c386851", "patch": "@@ -1618,10 +1618,8 @@ call_twice(bare_function);\n \n ## Do syntax\n \n-The `do` expression is syntactic sugar for use with functions which\n-take a closure as a final argument, because closures in Rust\n-are so frequently used in combination with higher-order\n-functions.\n+The `do` expression provides a way to treat higher-order functions\n+(functions that take closures as arguments) as control structures.\n \n Consider this function which iterates over a vector of\n integers, passing in a pointer to each integer in the vector:\n@@ -1636,20 +1634,22 @@ fn each(v: &[int], op: fn(v: &int)) {\n }\n ~~~~\n \n-The reason we pass in a *pointer* to an integer rather than the\n-integer itself is that this is how the actual `each()` function for\n-vectors works.  Using a pointer means that the function can be used\n-for vectors of any type, even large structs that would be impractical\n-to copy out of the vector on each iteration.  As a caller, if we use a\n-closure to provide the final operator argument, we can write it in a\n-way that has a pleasant, block-like structure.\n+As an aside, the reason we pass in a *pointer* to an integer rather\n+than the integer itself is that this is how the actual `each()`\n+function for vectors works. `vec::each` though is a\n+[generic](#generics) function, so must be efficient to use for all\n+types. Passing the elements by pointer avoids copying potentially\n+large objects.\n+\n+As a caller, if we use a closure to provide the final operator\n+argument, we can write it in a way that has a pleasant, block-like\n+structure.\n \n ~~~~\n # fn each(v: &[int], op: fn(v: &int)) { }\n-# fn do_some_work(i: int) { }\n+# fn do_some_work(i: &int) { }\n each(&[1, 2, 3], |n| {\n-    debug!(\"%i\", *n);\n-    do_some_work(*n);\n+    do_some_work(n);\n });\n ~~~~\n \n@@ -1658,10 +1658,9 @@ call that can be written more like a built-in control structure:\n \n ~~~~\n # fn each(v: &[int], op: fn(v: &int)) { }\n-# fn do_some_work(i: int) { }\n+# fn do_some_work(i: &int) { }\n do each(&[1, 2, 3]) |n| {\n-    debug!(\"%i\", *n);\n-    do_some_work(*n);\n+    do_some_work(n);\n }\n ~~~~\n \n@@ -1670,7 +1669,9 @@ final closure inside the argument list it is moved outside of the\n parenthesis where it looks visually more like a typical block of\n code.\n \n-`do` is often used for task spawning.\n+`do` is often used to create tasks with the `task::spawn` function.\n+`spawn` has the signature `spawn(fn: fn~())`. In other words, it\n+is a function that takes an owned closure that takes no arguments.\n \n ~~~~\n use task::spawn;\n@@ -1680,9 +1681,9 @@ do spawn() || {\n }\n ~~~~\n \n-That's nice, but look at all those bars and parentheses - that's two empty\n-argument lists back to back. Wouldn't it be great if they weren't\n-there?\n+Look at all those bars and parentheses - that's two empty argument\n+lists back to back. Since that is so unsightly, empty argument lists\n+may be omitted from `do` expressions.\n \n ~~~~\n # use task::spawn;\n@@ -1691,8 +1692,6 @@ do spawn {\n }\n ~~~~\n \n-Empty argument lists can be omitted from `do` expressions.\n-\n ## For loops\n \n Most iteration in Rust is done with `for` loops. Like `do`,"}]}