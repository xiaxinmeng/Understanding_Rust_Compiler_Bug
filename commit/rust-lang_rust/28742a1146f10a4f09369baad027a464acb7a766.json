{"sha": "28742a1146f10a4f09369baad027a464acb7a766", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4NzQyYTExNDZmMTBhNGYwOTM2OWJhYWQwMjdhNDY0YWNiN2E3NjY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-18T01:37:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-18T01:37:27Z"}, "message": "Auto merge of #71147 - cuviper:min-llvm8, r=Mark-Simulacrum\n\nUpdate the minimum external LLVM to 8\n\nLLVM 8 was released on March 20, 2019, over a year ago.", "tree": {"sha": "94974b0b3e0b732c95e0cbcb9ad3dbae0f18d0f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94974b0b3e0b732c95e0cbcb9ad3dbae0f18d0f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28742a1146f10a4f09369baad027a464acb7a766", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28742a1146f10a4f09369baad027a464acb7a766", "html_url": "https://github.com/rust-lang/rust/commit/28742a1146f10a4f09369baad027a464acb7a766", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28742a1146f10a4f09369baad027a464acb7a766/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cff9a758ae116a0b54a55033f6a5156f8656cc0c", "url": "https://api.github.com/repos/rust-lang/rust/commits/cff9a758ae116a0b54a55033f6a5156f8656cc0c", "html_url": "https://github.com/rust-lang/rust/commit/cff9a758ae116a0b54a55033f6a5156f8656cc0c"}, {"sha": "8506bb006040cf8e8cb004202706c81e62ddacee", "url": "https://api.github.com/repos/rust-lang/rust/commits/8506bb006040cf8e8cb004202706c81e62ddacee", "html_url": "https://github.com/rust-lang/rust/commit/8506bb006040cf8e8cb004202706c81e62ddacee"}], "stats": {"total": 262, "additions": 67, "deletions": 195}, "files": [{"sha": "958d9b67bdf9b4b8afe01988ccc7cdc37639dcbe", "filename": ".github/workflows/ci.yml", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/28742a1146f10a4f09369baad027a464acb7a766/.github%2Fworkflows%2Fci.yml", "raw_url": "https://github.com/rust-lang/rust/raw/28742a1146f10a4f09369baad027a464acb7a766/.github%2Fworkflows%2Fci.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fci.yml?ref=28742a1146f10a4f09369baad027a464acb7a766", "patch": "@@ -36,13 +36,13 @@ jobs:\n       matrix:\n         name:\n           - mingw-check\n-          - x86_64-gnu-llvm-7\n+          - x86_64-gnu-llvm-8\n           - x86_64-gnu-tools\n         include:\n           - name: mingw-check\n             os: ubuntu-latest-xl\n             env: {}\n-          - name: x86_64-gnu-llvm-7\n+          - name: x86_64-gnu-llvm-8\n             os: ubuntu-latest-xl\n             env: {}\n           - name: x86_64-gnu-tools\n@@ -352,7 +352,7 @@ jobs:\n           - x86_64-gnu-debug\n           - x86_64-gnu-distcheck\n           - x86_64-gnu-full-bootstrap\n-          - x86_64-gnu-llvm-7\n+          - x86_64-gnu-llvm-8\n           - x86_64-gnu-nopt\n           - x86_64-gnu-tools\n           - x86_64-mingw-1\n@@ -469,7 +469,7 @@ jobs:\n           - name: x86_64-gnu-full-bootstrap\n             os: ubuntu-latest-xl\n             env: {}\n-          - name: x86_64-gnu-llvm-7\n+          - name: x86_64-gnu-llvm-8\n             env:\n               RUST_BACKTRACE: 1\n             os: ubuntu-latest-xl"}, {"sha": "0c87695ff7cae53d63fdaa856c3d1b3b1505360a", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/28742a1146f10a4f09369baad027a464acb7a766/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28742a1146f10a4f09369baad027a464acb7a766/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=28742a1146f10a4f09369baad027a464acb7a766", "patch": "@@ -289,11 +289,11 @@ fn check_llvm_version(builder: &Builder<'_>, llvm_config: &Path) {\n     let version = output(cmd.arg(\"--version\"));\n     let mut parts = version.split('.').take(2).filter_map(|s| s.parse::<u32>().ok());\n     if let (Some(major), Some(_minor)) = (parts.next(), parts.next()) {\n-        if major >= 7 {\n+        if major >= 8 {\n             return;\n         }\n     }\n-    panic!(\"\\n\\nbad LLVM version: {}, need >=7.0\\n\\n\", version)\n+    panic!(\"\\n\\nbad LLVM version: {}, need >=8.0\\n\\n\", version)\n }\n \n fn configure_cmake("}, {"sha": "46d3cf7a38ca22aa67d52de2b0194bd61f3e7f07", "filename": "src/ci/azure-pipelines/auto.yml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28742a1146f10a4f09369baad027a464acb7a766/src%2Fci%2Fazure-pipelines%2Fauto.yml", "raw_url": "https://github.com/rust-lang/rust/raw/28742a1146f10a4f09369baad027a464acb7a766/src%2Fci%2Fazure-pipelines%2Fauto.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fazure-pipelines%2Fauto.yml?ref=28742a1146f10a4f09369baad027a464acb7a766", "patch": "@@ -29,7 +29,7 @@ jobs:\n   - template: steps/run.yml\n   strategy:\n     matrix:\n-      x86_64-gnu-llvm-7:\n+      x86_64-gnu-llvm-8:\n         RUST_BACKTRACE: 1\n       dist-x86_64-linux: {}\n       dist-x86_64-linux-alt:"}, {"sha": "1fc8d187242f8cacc16df7c7c6f170e83cb7b733", "filename": "src/ci/azure-pipelines/pr.yml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28742a1146f10a4f09369baad027a464acb7a766/src%2Fci%2Fazure-pipelines%2Fpr.yml", "raw_url": "https://github.com/rust-lang/rust/raw/28742a1146f10a4f09369baad027a464acb7a766/src%2Fci%2Fazure-pipelines%2Fpr.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fazure-pipelines%2Fpr.yml?ref=28742a1146f10a4f09369baad027a464acb7a766", "patch": "@@ -29,7 +29,7 @@ jobs:\n     - template: steps/run.yml\n   strategy:\n     matrix:\n-      x86_64-gnu-llvm-7: {}\n+      x86_64-gnu-llvm-8: {}\n       mingw-check: {}\n       x86_64-gnu-tools:\n         CI_ONLY_WHEN_SUBMODULES_CHANGED: 1"}, {"sha": "58fdc6f262376c8cc26a2484653be4672df7ffe4", "filename": "src/ci/docker/x86_64-gnu-llvm-8/Dockerfile", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/28742a1146f10a4f09369baad027a464acb7a766/src%2Fci%2Fdocker%2Fx86_64-gnu-llvm-8%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/28742a1146f10a4f09369baad027a464acb7a766/src%2Fci%2Fdocker%2Fx86_64-gnu-llvm-8%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu-llvm-8%2FDockerfile?ref=28742a1146f10a4f09369baad027a464acb7a766", "patch": "@@ -12,7 +12,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   cmake \\\n   sudo \\\n   gdb \\\n-  llvm-7-tools \\\n+  llvm-8-tools \\\n   libedit-dev \\\n   libssl-dev \\\n   pkg-config \\\n@@ -26,7 +26,7 @@ RUN sh /scripts/sccache.sh\n # using llvm-link-shared due to libffi issues -- see #34486\n ENV RUST_CONFIGURE_ARGS \\\n       --build=x86_64-unknown-linux-gnu \\\n-      --llvm-root=/usr/lib/llvm-7 \\\n+      --llvm-root=/usr/lib/llvm-8 \\\n       --enable-llvm-link-shared \\\n       --set rust.thin-lto-import-instr-limit=10\n ", "previous_filename": "src/ci/docker/x86_64-gnu-llvm-7/Dockerfile"}, {"sha": "df1467ea73a12c1762756827c2e6779ad50a776f", "filename": "src/ci/github-actions/ci.yml", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/28742a1146f10a4f09369baad027a464acb7a766/src%2Fci%2Fgithub-actions%2Fci.yml", "raw_url": "https://github.com/rust-lang/rust/raw/28742a1146f10a4f09369baad027a464acb7a766/src%2Fci%2Fgithub-actions%2Fci.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fgithub-actions%2Fci.yml?ref=28742a1146f10a4f09369baad027a464acb7a766", "patch": "@@ -259,13 +259,13 @@ jobs:\n       matrix:\n         name:\n           - mingw-check\n-          - x86_64-gnu-llvm-7\n+          - x86_64-gnu-llvm-8\n           - x86_64-gnu-tools\n         include:\n           - name: mingw-check\n             <<: *job-linux-xl\n \n-          - name: x86_64-gnu-llvm-7\n+          - name: x86_64-gnu-llvm-8\n             <<: *job-linux-xl\n \n           - name: x86_64-gnu-tools\n@@ -349,7 +349,7 @@ jobs:\n           - x86_64-gnu-debug\n           - x86_64-gnu-distcheck\n           - x86_64-gnu-full-bootstrap\n-          - x86_64-gnu-llvm-7\n+          - x86_64-gnu-llvm-8\n           - x86_64-gnu-nopt\n           - x86_64-gnu-tools\n           - x86_64-mingw-1\n@@ -471,7 +471,7 @@ jobs:\n           - name: x86_64-gnu-full-bootstrap\n             <<: *job-linux-xl\n \n-          - name: x86_64-gnu-llvm-7\n+          - name: x86_64-gnu-llvm-8\n             env:\n               RUST_BACKTRACE: 1\n             <<: *job-linux-xl"}, {"sha": "004de8d8ca9a87461560b9b473672edf16854ae9", "filename": "src/librustc_codegen_llvm/attributes.rs", "status": "modified", "additions": 6, "deletions": 15, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/28742a1146f10a4f09369baad027a464acb7a766/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28742a1146f10a4f09369baad027a464acb7a766/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fattributes.rs?ref=28742a1146f10a4f09369baad027a464acb7a766", "patch": "@@ -82,21 +82,12 @@ fn naked(val: &'ll Value, is_naked: bool) {\n \n pub fn set_frame_pointer_elimination(cx: &CodegenCx<'ll, '_>, llfn: &'ll Value) {\n     if cx.sess().must_not_eliminate_frame_pointers() {\n-        if llvm_util::get_major_version() >= 8 {\n-            llvm::AddFunctionAttrStringValue(\n-                llfn,\n-                llvm::AttributePlace::Function,\n-                const_cstr!(\"frame-pointer\"),\n-                const_cstr!(\"all\"),\n-            );\n-        } else {\n-            llvm::AddFunctionAttrStringValue(\n-                llfn,\n-                llvm::AttributePlace::Function,\n-                const_cstr!(\"no-frame-pointer-elim\"),\n-                const_cstr!(\"true\"),\n-            );\n-        }\n+        llvm::AddFunctionAttrStringValue(\n+            llfn,\n+            llvm::AttributePlace::Function,\n+            const_cstr!(\"frame-pointer\"),\n+            const_cstr!(\"all\"),\n+        );\n     }\n }\n "}, {"sha": "03bba7657bb6dcac759957fad7380c3d62ef9463", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/28742a1146f10a4f09369baad027a464acb7a766/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28742a1146f10a4f09369baad027a464acb7a766/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=28742a1146f10a4f09369baad027a464acb7a766", "patch": "@@ -16,7 +16,6 @@ use crate::llvm::debuginfo::{\n     DIArray, DICompositeType, DIDescriptor, DIFile, DIFlags, DILexicalBlock, DIScope, DIType,\n     DebugEmissionKind,\n };\n-use crate::llvm_util;\n use crate::value::Value;\n \n use log::debug;\n@@ -1289,22 +1288,11 @@ fn prepare_union_metadata(\n // Enums\n //=-----------------------------------------------------------------------------\n \n-/// DWARF variant support is only available starting in LLVM 8.\n-/// Although the earlier enum debug info output did not work properly\n-/// in all situations, it is better for the time being to continue to\n-/// sometimes emit the old style rather than emit something completely\n-/// useless when rust is compiled against LLVM 6 or older. LLVM 7\n-/// contains an early version of the DWARF variant support, and will\n-/// crash when handling the new debug info format. This function\n-/// decides which representation will be emitted.\n+/// DWARF variant support is only available starting in LLVM 8, but\n+/// on MSVC we have to use the fallback mode, because LLVM doesn't\n+/// lower variant parts to PDB.\n fn use_enum_fallback(cx: &CodegenCx<'_, '_>) -> bool {\n-    // On MSVC we have to use the fallback mode, because LLVM doesn't\n-    // lower variant parts to PDB.\n     cx.sess().target.target.options.is_like_msvc\n-        // LLVM version 7 did not release with an important bug fix;\n-        // but the required patch is in the LLVM 8.  Rust LLVM reports\n-        // 8 as well.\n-        || llvm_util::get_major_version() < 8\n }\n \n // FIXME(eddyb) maybe precompute this? Right now it's computed once"}, {"sha": "86d10e91d6de459395451b373553475801b63204", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 9, "deletions": 42, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/28742a1146f10a4f09369baad027a464acb7a766/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28742a1146f10a4f09369baad027a464acb7a766/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=28742a1146f10a4f09369baad027a464acb7a766", "patch": "@@ -2,7 +2,6 @@ use crate::abi::{Abi, FnAbi, LlvmType, PassMode};\n use crate::builder::Builder;\n use crate::context::CodegenCx;\n use crate::llvm;\n-use crate::llvm_util;\n use crate::type_::Type;\n use crate::type_of::LayoutLlvmExt;\n use crate::va_arg::emit_va_arg;\n@@ -11,7 +10,7 @@ use crate::value::Value;\n use rustc_ast::ast;\n use rustc_codegen_ssa::base::{compare_simd_types, to_immediate, wants_msvc_seh};\n use rustc_codegen_ssa::common::span_invalid_monomorphization_error;\n-use rustc_codegen_ssa::common::{IntPredicate, TypeKind};\n+use rustc_codegen_ssa::common::TypeKind;\n use rustc_codegen_ssa::glue;\n use rustc_codegen_ssa::mir::operand::{OperandRef, OperandValue};\n use rustc_codegen_ssa::mir::place::PlaceRef;\n@@ -461,46 +460,14 @@ impl IntrinsicCallMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n                             let is_add = name == \"saturating_add\";\n                             let lhs = args[0].immediate();\n                             let rhs = args[1].immediate();\n-                            if llvm_util::get_major_version() >= 8 {\n-                                let llvm_name = &format!(\n-                                    \"llvm.{}{}.sat.i{}\",\n-                                    if signed { 's' } else { 'u' },\n-                                    if is_add { \"add\" } else { \"sub\" },\n-                                    width\n-                                );\n-                                let llfn = self.get_intrinsic(llvm_name);\n-                                self.call(llfn, &[lhs, rhs], None)\n-                            } else {\n-                                let llvm_name = &format!(\n-                                    \"llvm.{}{}.with.overflow.i{}\",\n-                                    if signed { 's' } else { 'u' },\n-                                    if is_add { \"add\" } else { \"sub\" },\n-                                    width\n-                                );\n-                                let llfn = self.get_intrinsic(llvm_name);\n-                                let pair = self.call(llfn, &[lhs, rhs], None);\n-                                let val = self.extract_value(pair, 0);\n-                                let overflow = self.extract_value(pair, 1);\n-                                let llty = self.type_ix(width);\n-\n-                                let limit = if signed {\n-                                    let limit_lo = self\n-                                        .const_uint_big(llty, (i128::MIN >> (128 - width)) as u128);\n-                                    let limit_hi = self\n-                                        .const_uint_big(llty, (i128::MAX >> (128 - width)) as u128);\n-                                    let neg = self.icmp(\n-                                        IntPredicate::IntSLT,\n-                                        val,\n-                                        self.const_uint(llty, 0),\n-                                    );\n-                                    self.select(neg, limit_hi, limit_lo)\n-                                } else if is_add {\n-                                    self.const_uint_big(llty, u128::MAX >> (128 - width))\n-                                } else {\n-                                    self.const_uint(llty, 0)\n-                                };\n-                                self.select(overflow, limit, val)\n-                            }\n+                            let llvm_name = &format!(\n+                                \"llvm.{}{}.sat.i{}\",\n+                                if signed { 's' } else { 'u' },\n+                                if is_add { \"add\" } else { \"sub\" },\n+                                width\n+                            );\n+                            let llfn = self.get_intrinsic(llvm_name);\n+                            self.call(llfn, &[lhs, rhs], None)\n                         }\n                         _ => bug!(),\n                     },"}, {"sha": "6f16b0fb79c399b0c10ce93640a6cc3ddb448ce1", "filename": "src/librustc_codegen_llvm/llvm_util.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/28742a1146f10a4f09369baad027a464acb7a766/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28742a1146f10a4f09369baad027a464acb7a766/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs?ref=28742a1146f10a4f09369baad027a464acb7a766", "patch": "@@ -83,17 +83,15 @@ unsafe fn configure_llvm(sess: &Session) {\n         if !sess.opts.debugging_opts.no_generate_arange_section {\n             add(\"-generate-arange-section\", false);\n         }\n-        if get_major_version() >= 8 {\n-            match sess\n-                .opts\n-                .debugging_opts\n-                .merge_functions\n-                .unwrap_or(sess.target.target.options.merge_functions)\n-            {\n-                MergeFunctions::Disabled | MergeFunctions::Trampolines => {}\n-                MergeFunctions::Aliases => {\n-                    add(\"-mergefunc-use-aliases\", false);\n-                }\n+        match sess\n+            .opts\n+            .debugging_opts\n+            .merge_functions\n+            .unwrap_or(sess.target.target.options.merge_functions)\n+        {\n+            MergeFunctions::Disabled | MergeFunctions::Trampolines => {}\n+            MergeFunctions::Aliases => {\n+                add(\"-mergefunc-use-aliases\", false);\n             }\n         }\n "}, {"sha": "b221c17b422f5de36f3361534f19975683e78f55", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 2, "deletions": 20, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/28742a1146f10a4f09369baad027a464acb7a766/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/28742a1146f10a4f09369baad027a464acb7a766/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=28742a1146f10a4f09369baad027a464acb7a766", "patch": "@@ -33,10 +33,8 @@\n #include \"llvm/Transforms/Instrumentation/AddressSanitizer.h\"\n #include \"llvm/Support/TimeProfiler.h\"\n #endif\n-#if LLVM_VERSION_GE(8, 0)\n #include \"llvm/Transforms/Instrumentation/ThreadSanitizer.h\"\n #include \"llvm/Transforms/Instrumentation/MemorySanitizer.h\"\n-#endif\n #if LLVM_VERSION_GE(9, 0)\n #include \"llvm/Transforms/Utils/CanonicalizeAliases.h\"\n #endif\n@@ -138,19 +136,13 @@ extern \"C\" LLVMPassRef LLVMRustCreateMemorySanitizerPass(int TrackOrigins, bool\n \n   return wrap(createMemorySanitizerLegacyPassPass(\n       MemorySanitizerOptions{TrackOrigins, Recover, CompileKernel}));\n-#elif LLVM_VERSION_GE(8, 0)\n-  return wrap(createMemorySanitizerLegacyPassPass(TrackOrigins, Recover));\n #else\n-  return wrap(createMemorySanitizerPass(TrackOrigins, Recover));\n+  return wrap(createMemorySanitizerLegacyPassPass(TrackOrigins, Recover));\n #endif\n }\n \n extern \"C\" LLVMPassRef LLVMRustCreateThreadSanitizerPass() {\n-#if LLVM_VERSION_GE(8, 0)\n   return wrap(createThreadSanitizerLegacyPassPass());\n-#else\n-  return wrap(createThreadSanitizerPass());\n-#endif\n }\n \n extern \"C\" LLVMRustPassKind LLVMRustPassKind(LLVMPassRef RustPass) {\n@@ -1236,15 +1228,11 @@ LLVMRustCreateThinLTOData(LLVMRustThinLTOModule *modules,\n   auto deadIsPrevailing = [&](GlobalValue::GUID G) {\n     return PrevailingType::Unknown;\n   };\n-#if LLVM_VERSION_GE(8, 0)\n   // We don't have a complete picture in our use of ThinLTO, just our immediate\n   // crate, so we need `ImportEnabled = false` to limit internalization.\n   // Otherwise, we sometimes lose `static` values -- see #60184.\n   computeDeadSymbolsWithConstProp(Ret->Index, Ret->GUIDPreservedSymbols,\n                                   deadIsPrevailing, /* ImportEnabled = */ false);\n-#else\n-  computeDeadSymbols(Ret->Index, Ret->GUIDPreservedSymbols, deadIsPrevailing);\n-#endif\n   ComputeCrossModuleImport(\n     Ret->Index,\n     Ret->ModuleToDefinedGVSummaries,\n@@ -1277,10 +1265,8 @@ LLVMRustCreateThinLTOData(LLVMRustThinLTOModule *modules,\n #if LLVM_VERSION_GE(9, 0)\n   thinLTOResolvePrevailingInIndex(Ret->Index, isPrevailing, recordNewLinkage,\n                                   Ret->GUIDPreservedSymbols);\n-#elif LLVM_VERSION_GE(8, 0)\n-  thinLTOResolvePrevailingInIndex(Ret->Index, isPrevailing, recordNewLinkage);\n #else\n-  thinLTOResolveWeakForLinkerInIndex(Ret->Index, isPrevailing, recordNewLinkage);\n+  thinLTOResolvePrevailingInIndex(Ret->Index, isPrevailing, recordNewLinkage);\n #endif\n \n   // Here we calculate an `ExportedGUIDs` set for use in the `isExported`\n@@ -1346,11 +1332,7 @@ extern \"C\" bool\n LLVMRustPrepareThinLTOResolveWeak(const LLVMRustThinLTOData *Data, LLVMModuleRef M) {\n   Module &Mod = *unwrap(M);\n   const auto &DefinedGlobals = Data->ModuleToDefinedGVSummaries.lookup(Mod.getModuleIdentifier());\n-#if LLVM_VERSION_GE(8, 0)\n   thinLTOResolvePrevailingInModule(Mod, DefinedGlobals);\n-#else\n-  thinLTOResolveWeakForLinkerModule(Mod, DefinedGlobals);\n-#endif\n   return true;\n }\n "}, {"sha": "28efc8bf5dd544e9890df94205b9d85c4b40ae1b", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/28742a1146f10a4f09369baad027a464acb7a766/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/28742a1146f10a4f09369baad027a464acb7a766/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=28742a1146f10a4f09369baad027a464acb7a766", "patch": "@@ -586,7 +586,6 @@ inline LLVMRustDISPFlags virtuality(LLVMRustDISPFlags F) {\n   return static_cast<LLVMRustDISPFlags>(static_cast<uint32_t>(F) & 0x3);\n }\n \n-#if LLVM_VERSION_GE(8, 0)\n static DISubprogram::DISPFlags fromRust(LLVMRustDISPFlags SPFlags) {\n   DISubprogram::DISPFlags Result = DISubprogram::DISPFlags::SPFlagZero;\n \n@@ -619,7 +618,6 @@ static DISubprogram::DISPFlags fromRust(LLVMRustDISPFlags SPFlags) {\n \n   return Result;\n }\n-#endif\n \n enum class LLVMRustDebugEmissionKind {\n   NoDebug,\n@@ -734,7 +732,6 @@ extern \"C\" LLVMMetadataRef LLVMRustDIBuilderCreateFunction(\n     LLVMMetadataRef Decl) {\n   DITemplateParameterArray TParams =\n       DITemplateParameterArray(unwrap<MDTuple>(TParam));\n-#if LLVM_VERSION_GE(8, 0)\n   DISubprogram::DISPFlags llvmSPFlags = fromRust(SPFlags);\n   DINode::DIFlags llvmFlags = fromRust(Flags);\n #if LLVM_VERSION_LT(9, 0)\n@@ -748,22 +745,6 @@ extern \"C\" LLVMMetadataRef LLVMRustDIBuilderCreateFunction(\n       unwrapDI<DIFile>(File), LineNo,\n       unwrapDI<DISubroutineType>(Ty), ScopeLine, llvmFlags,\n       llvmSPFlags, TParams, unwrapDIPtr<DISubprogram>(Decl));\n-#else\n-  bool IsLocalToUnit = isSet(SPFlags & LLVMRustDISPFlags::SPFlagLocalToUnit);\n-  bool IsDefinition = isSet(SPFlags & LLVMRustDISPFlags::SPFlagDefinition);\n-  bool IsOptimized = isSet(SPFlags & LLVMRustDISPFlags::SPFlagOptimized);\n-  DINode::DIFlags llvmFlags = fromRust(Flags);\n-  if (isSet(SPFlags & LLVMRustDISPFlags::SPFlagMainSubprogram))\n-    llvmFlags |= DINode::DIFlags::FlagMainSubprogram;\n-  DISubprogram *Sub = Builder->createFunction(\n-      unwrapDI<DIScope>(Scope),\n-      StringRef(Name, NameLen),\n-      StringRef(LinkageName, LinkageNameLen),\n-      unwrapDI<DIFile>(File), LineNo,\n-      unwrapDI<DISubroutineType>(Ty), IsLocalToUnit, IsDefinition,\n-      ScopeLine, llvmFlags, IsOptimized, TParams,\n-      unwrapDIPtr<DISubprogram>(Decl));\n-#endif\n   unwrap<Function>(Fn)->setSubprogram(Sub);\n   return wrap(Sub);\n }\n@@ -884,9 +865,7 @@ extern \"C\" LLVMMetadataRef LLVMRustDIBuilderCreateStaticVariable(\n       /* isDefined */ true,\n #endif\n       InitExpr, unwrapDIPtr<MDNode>(Decl),\n-#if LLVM_VERSION_GE(8, 0)\n       /* templateParams */ nullptr,\n-#endif\n       AlignInBits);\n \n   InitVal->setMetadata(\"dbg\", VarExpr);\n@@ -1107,11 +1086,7 @@ extern \"C\" void LLVMRustUnpackOptimizationDiagnostic(\n   if (loc.isValid()) {\n     *Line = loc.getLine();\n     *Column = loc.getColumn();\n-#if LLVM_VERSION_GE(8, 0)\n     FilenameOS << loc.getAbsolutePath();\n-#else\n-    FilenameOS << loc.getFilename();\n-#endif\n   }\n \n   RawRustStringOstream MessageOS(MessageOut);"}, {"sha": "134443931e986729e1f19730027b4625ab6bb43d", "filename": "src/test/codegen/enum-debug-clike.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/28742a1146f10a4f09369baad027a464acb7a766/src%2Ftest%2Fcodegen%2Fenum-debug-clike.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28742a1146f10a4f09369baad027a464acb7a766/src%2Ftest%2Fcodegen%2Fenum-debug-clike.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fenum-debug-clike.rs?ref=28742a1146f10a4f09369baad027a464acb7a766", "patch": "@@ -1,18 +1,13 @@\n-// This test depends on a patch that was committed to upstream LLVM\n-// before 7.0, then backported to the Rust LLVM fork.  It tests that\n-// debug info for \"c-like\" enums is properly emitted.\n+// This tests that debug info for \"c-like\" enums is properly emitted.\n+// This is ignored for the fallback mode on MSVC due to problems with PDB.\n \n // ignore-tidy-linelength\n-// ignore-windows\n-// min-system-llvm-version 8.0\n+// ignore-msvc\n \n // compile-flags: -g -C no-prepopulate-passes\n \n-// DIFlagFixedEnum was deprecated in 8.0, renamed to DIFlagEnumClass.\n-// We match either for compatibility.\n-\n // CHECK-LABEL: @main\n-// CHECK: {{.*}}DICompositeType{{.*}}tag: DW_TAG_enumeration_type,{{.*}}name: \"E\",{{.*}}flags: {{(DIFlagEnumClass|DIFlagFixedEnum)}},{{.*}}\n+// CHECK: {{.*}}DICompositeType{{.*}}tag: DW_TAG_enumeration_type,{{.*}}name: \"E\",{{.*}}flags: DIFlagEnumClass,{{.*}}\n // CHECK: {{.*}}DIEnumerator{{.*}}name: \"A\",{{.*}}value: {{[0-9].*}}\n // CHECK: {{.*}}DIEnumerator{{.*}}name: \"B\",{{.*}}value: {{[0-9].*}}\n // CHECK: {{.*}}DIEnumerator{{.*}}name: \"C\",{{.*}}value: {{[0-9].*}}"}, {"sha": "0f78234d9774d2f74b46d1fc66e1980e87d99ccc", "filename": "src/test/codegen/enum-debug-niche-2.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/28742a1146f10a4f09369baad027a464acb7a766/src%2Ftest%2Fcodegen%2Fenum-debug-niche-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28742a1146f10a4f09369baad027a464acb7a766/src%2Ftest%2Fcodegen%2Fenum-debug-niche-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fenum-debug-niche-2.rs?ref=28742a1146f10a4f09369baad027a464acb7a766", "patch": "@@ -1,10 +1,8 @@\n-// This test depends on a patch that was committed to upstream LLVM\n-// before 7.0, then backported to the Rust LLVM fork.  It tests that\n-// optimized enum debug info accurately reflects the enum layout.\n+// This tests that optimized enum debug info accurately reflects the enum layout.\n+// This is ignored for the fallback mode on MSVC due to problems with PDB.\n \n // ignore-tidy-linelength\n-// ignore-windows\n-// min-system-llvm-version 8.0\n+// ignore-msvc\n \n // compile-flags: -g -C no-prepopulate-passes\n "}, {"sha": "b718a6854dd7e0ccfbc1bccfa73fae2651767072", "filename": "src/test/codegen/enum-debug-niche.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/28742a1146f10a4f09369baad027a464acb7a766/src%2Ftest%2Fcodegen%2Fenum-debug-niche.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28742a1146f10a4f09369baad027a464acb7a766/src%2Ftest%2Fcodegen%2Fenum-debug-niche.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fenum-debug-niche.rs?ref=28742a1146f10a4f09369baad027a464acb7a766", "patch": "@@ -1,9 +1,7 @@\n-// This test depends on a patch that was committed to upstream LLVM\n-// before 7.0, then backported to the Rust LLVM fork.  It tests that\n-// optimized enum debug info accurately reflects the enum layout.\n+// This tests that optimized enum debug info accurately reflects the enum layout.\n+// This is ignored for the fallback mode on MSVC due to problems with PDB.\n \n-// ignore-windows\n-// min-system-llvm-version 8.0\n+// ignore-msvc\n \n // compile-flags: -g -C no-prepopulate-passes\n "}, {"sha": "095c49ac3acb9b99c87068d9b0541057725dda08", "filename": "src/test/codegen/enum-debug-tagged.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/28742a1146f10a4f09369baad027a464acb7a766/src%2Ftest%2Fcodegen%2Fenum-debug-tagged.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28742a1146f10a4f09369baad027a464acb7a766/src%2Ftest%2Fcodegen%2Fenum-debug-tagged.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fenum-debug-tagged.rs?ref=28742a1146f10a4f09369baad027a464acb7a766", "patch": "@@ -1,9 +1,7 @@\n-// This test depends on a patch that was committed to upstream LLVM\n-// before 7.0, then backported to the Rust LLVM fork.  It tests that\n-// debug info for tagged (ordinary) enums is properly emitted.\n+// This tests that debug info for tagged (ordinary) enums is properly emitted.\n+// This is ignored for the fallback mode on MSVC due to problems with PDB.\n \n-// ignore-windows\n-// min-system-llvm-version 8.0\n+// ignore-msvc\n \n // compile-flags: -g -C no-prepopulate-passes\n "}, {"sha": "637c4234654b49d8f14065dc7ef29aae3bd4efa0", "filename": "src/test/codegen/force-frame-pointers.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/28742a1146f10a4f09369baad027a464acb7a766/src%2Ftest%2Fcodegen%2Fforce-frame-pointers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28742a1146f10a4f09369baad027a464acb7a766/src%2Ftest%2Fcodegen%2Fforce-frame-pointers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fforce-frame-pointers.rs?ref=28742a1146f10a4f09369baad027a464acb7a766", "patch": "@@ -1,4 +1,3 @@\n-// min-llvm-version 8.0\n // compile-flags: -C no-prepopulate-passes -C force-frame-pointers=y\n \n #![crate_type=\"lib\"]"}, {"sha": "518a2a0da2a845880c4175327fa722bbe6ed36c0", "filename": "src/test/codegen/instrument-mcount.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/28742a1146f10a4f09369baad027a464acb7a766/src%2Ftest%2Fcodegen%2Finstrument-mcount.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28742a1146f10a4f09369baad027a464acb7a766/src%2Ftest%2Fcodegen%2Finstrument-mcount.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Finstrument-mcount.rs?ref=28742a1146f10a4f09369baad027a464acb7a766", "patch": "@@ -1,4 +1,3 @@\n-// min-llvm-version 8.0\n // ignore-tidy-linelength\n // compile-flags: -Z instrument-mcount\n "}, {"sha": "85e11c10c688f4d86ca898a33ce60a61f7f8820b", "filename": "src/test/debuginfo/borrowed-enum.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/28742a1146f10a4f09369baad027a464acb7a766/src%2Ftest%2Fdebuginfo%2Fborrowed-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28742a1146f10a4f09369baad027a464acb7a766/src%2Ftest%2Fdebuginfo%2Fborrowed-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fborrowed-enum.rs?ref=28742a1146f10a4f09369baad027a464acb7a766", "patch": "@@ -1,7 +1,6 @@\n // ignore-tidy-linelength\n \n-// Require LLVM with DW_TAG_variant_part and a gdb or lldb that can read it.\n-// min-system-llvm-version: 8.0\n+// Require a gdb or lldb that can read DW_TAG_variant_part.\n // min-gdb-version: 8.2\n // rust-lldb\n "}, {"sha": "9359e55dceed3b9a9beb1ce36a265eb121289b9c", "filename": "src/test/debuginfo/enum-thinlto.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/28742a1146f10a4f09369baad027a464acb7a766/src%2Ftest%2Fdebuginfo%2Fenum-thinlto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28742a1146f10a4f09369baad027a464acb7a766/src%2Ftest%2Fdebuginfo%2Fenum-thinlto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fenum-thinlto.rs?ref=28742a1146f10a4f09369baad027a464acb7a766", "patch": "@@ -1,5 +1,4 @@\n-// Require LLVM with DW_TAG_variant_part and a gdb that can read it.\n-// min-system-llvm-version: 8.0\n+// Require a gdb that can read DW_TAG_variant_part.\n // min-gdb-version: 8.2\n \n // compile-flags:-g -Z thinlto"}, {"sha": "382b0231d3bd263252b8b80b77b69a6fa1ffaa36", "filename": "src/test/debuginfo/generator-objects.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/28742a1146f10a4f09369baad027a464acb7a766/src%2Ftest%2Fdebuginfo%2Fgenerator-objects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28742a1146f10a4f09369baad027a464acb7a766/src%2Ftest%2Fdebuginfo%2Fgenerator-objects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgenerator-objects.rs?ref=28742a1146f10a4f09369baad027a464acb7a766", "patch": "@@ -1,7 +1,6 @@\n // ignore-tidy-linelength\n \n-// Require LLVM with DW_TAG_variant_part and a gdb that can read it.\n-// min-system-llvm-version: 8.0\n+// Require a gdb that can read DW_TAG_variant_part.\n // min-gdb-version: 8.2\n \n // compile-flags:-g"}, {"sha": "adcb04da30d06c3eb8cc41c34449d9f232680d77", "filename": "src/test/debuginfo/generic-enum-with-different-disr-sizes.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/28742a1146f10a4f09369baad027a464acb7a766/src%2Ftest%2Fdebuginfo%2Fgeneric-enum-with-different-disr-sizes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28742a1146f10a4f09369baad027a464acb7a766/src%2Ftest%2Fdebuginfo%2Fgeneric-enum-with-different-disr-sizes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgeneric-enum-with-different-disr-sizes.rs?ref=28742a1146f10a4f09369baad027a464acb7a766", "patch": "@@ -1,8 +1,7 @@\n // ignore-lldb: FIXME(#27089)\n // min-lldb-version: 310\n \n-// Require LLVM with DW_TAG_variant_part and a gdb that can read it.\n-// min-system-llvm-version: 8.0\n+// Require a gdb that can read DW_TAG_variant_part.\n // min-gdb-version: 8.2\n \n // compile-flags:-g"}, {"sha": "678ca8df040685419614ceefdd843b658240959a", "filename": "src/test/debuginfo/generic-struct-style-enum.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/28742a1146f10a4f09369baad027a464acb7a766/src%2Ftest%2Fdebuginfo%2Fgeneric-struct-style-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28742a1146f10a4f09369baad027a464acb7a766/src%2Ftest%2Fdebuginfo%2Fgeneric-struct-style-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgeneric-struct-style-enum.rs?ref=28742a1146f10a4f09369baad027a464acb7a766", "patch": "@@ -1,8 +1,7 @@\n // ignore-tidy-linelength\n // min-lldb-version: 310\n \n-// Require LLVM with DW_TAG_variant_part and a gdb that can read it.\n-// min-system-llvm-version: 8.0\n+// Require a gdb that can read DW_TAG_variant_part.\n // min-gdb-version: 8.2\n \n // compile-flags:-g"}, {"sha": "89aa78a6e10493ed28e5fdc0de34dc93611736a8", "filename": "src/test/debuginfo/generic-tuple-style-enum.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/28742a1146f10a4f09369baad027a464acb7a766/src%2Ftest%2Fdebuginfo%2Fgeneric-tuple-style-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28742a1146f10a4f09369baad027a464acb7a766/src%2Ftest%2Fdebuginfo%2Fgeneric-tuple-style-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgeneric-tuple-style-enum.rs?ref=28742a1146f10a4f09369baad027a464acb7a766", "patch": "@@ -1,8 +1,6 @@\n // ignore-tidy-linelength\n \n-// Require LLVM with DW_TAG_variant_part and a gdb and lldb that can\n-// read it.\n-// min-system-llvm-version: 8.0\n+// Require a gdb or lldb that can read DW_TAG_variant_part.\n // min-gdb-version: 8.2\n // rust-lldb\n "}, {"sha": "e9cfa3f7d69f738d7a8e3c63cc6ae23aaf3e74d7", "filename": "src/test/debuginfo/issue-57822.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/28742a1146f10a4f09369baad027a464acb7a766/src%2Ftest%2Fdebuginfo%2Fissue-57822.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28742a1146f10a4f09369baad027a464acb7a766/src%2Ftest%2Fdebuginfo%2Fissue-57822.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fissue-57822.rs?ref=28742a1146f10a4f09369baad027a464acb7a766", "patch": "@@ -1,8 +1,7 @@\n // This test makes sure that the LLDB pretty printer does not throw an exception\n // for nested closures and generators.\n \n-// Require LLVM with DW_TAG_variant_part and a gdb that can read it.\n-// min-system-llvm-version: 8.0\n+// Require a gdb that can read DW_TAG_variant_part.\n // min-gdb-version: 8.2\n // ignore-tidy-linelength\n "}, {"sha": "c0bd67367012f51ad3bcc5735868fc54fe0df0ad", "filename": "src/test/debuginfo/recursive-struct.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/28742a1146f10a4f09369baad027a464acb7a766/src%2Ftest%2Fdebuginfo%2Frecursive-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28742a1146f10a4f09369baad027a464acb7a766/src%2Ftest%2Fdebuginfo%2Frecursive-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Frecursive-struct.rs?ref=28742a1146f10a4f09369baad027a464acb7a766", "patch": "@@ -1,7 +1,6 @@\n // ignore-lldb\n \n-// Require LLVM with DW_TAG_variant_part and a gdb that can read it.\n-// min-system-llvm-version: 8.0\n+// Require a gdb that can read DW_TAG_variant_part.\n // min-gdb-version: 8.2\n \n // compile-flags:-g"}, {"sha": "34f75a4e3045bc8a6e634d8de3fd70bc2d746d60", "filename": "src/test/debuginfo/struct-style-enum.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/28742a1146f10a4f09369baad027a464acb7a766/src%2Ftest%2Fdebuginfo%2Fstruct-style-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28742a1146f10a4f09369baad027a464acb7a766/src%2Ftest%2Fdebuginfo%2Fstruct-style-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fstruct-style-enum.rs?ref=28742a1146f10a4f09369baad027a464acb7a766", "patch": "@@ -1,8 +1,6 @@\n // ignore-tidy-linelength\n \n-// Require LLVM with DW_TAG_variant_part and a gdb and lldb that can\n-// read it.\n-// min-system-llvm-version: 8.0\n+// Require a gdb or lldb that can read DW_TAG_variant_part.\n // min-gdb-version: 8.2\n // rust-lldb\n "}, {"sha": "87b0bc6294dd91ee8bfbcc0b8754dc0594048ebd", "filename": "src/test/debuginfo/tuple-style-enum.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/28742a1146f10a4f09369baad027a464acb7a766/src%2Ftest%2Fdebuginfo%2Ftuple-style-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28742a1146f10a4f09369baad027a464acb7a766/src%2Ftest%2Fdebuginfo%2Ftuple-style-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ftuple-style-enum.rs?ref=28742a1146f10a4f09369baad027a464acb7a766", "patch": "@@ -1,8 +1,6 @@\n // ignore-tidy-linelength\n \n-// Require LLVM with DW_TAG_variant_part and a gdb and lldb that can\n-// read it.\n-// min-system-llvm-version: 8.0\n+// Require a gdb or lldb that can read DW_TAG_variant_part.\n // min-gdb-version: 8.2\n // rust-lldb\n "}, {"sha": "9d938b6e36919f31f75efab60a220028321a98cb", "filename": "src/test/debuginfo/unique-enum.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/28742a1146f10a4f09369baad027a464acb7a766/src%2Ftest%2Fdebuginfo%2Funique-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28742a1146f10a4f09369baad027a464acb7a766/src%2Ftest%2Fdebuginfo%2Funique-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Funique-enum.rs?ref=28742a1146f10a4f09369baad027a464acb7a766", "patch": "@@ -1,6 +1,4 @@\n-// Require LLVM with DW_TAG_variant_part and a gdb and lldb that can\n-// read it.\n-// min-system-llvm-version: 8.0\n+// Require a gdb or lldb that can read DW_TAG_variant_part.\n // min-gdb-version: 8.2\n // rust-lldb\n "}, {"sha": "e664ecadda2599933efc71594395d8792148a817", "filename": "src/test/ui/simd/simd-intrinsic-generic-arithmetic-saturating.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/28742a1146f10a4f09369baad027a464acb7a766/src%2Ftest%2Fui%2Fsimd%2Fsimd-intrinsic-generic-arithmetic-saturating.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28742a1146f10a4f09369baad027a464acb7a766/src%2Ftest%2Fui%2Fsimd%2Fsimd-intrinsic-generic-arithmetic-saturating.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fsimd-intrinsic-generic-arithmetic-saturating.rs?ref=28742a1146f10a4f09369baad027a464acb7a766", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n // ignore-emscripten\n-// min-llvm-version 8.0\n \n #![allow(non_camel_case_types)]\n #![feature(repr_simd, platform_intrinsics)]"}]}