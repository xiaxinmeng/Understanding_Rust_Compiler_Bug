{"sha": "73ce34a1970e860d14111127dd11d9ba56c41c3a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczY2UzNGExOTcwZTg2MGQxNDExMTEyN2RkMTFkOWJhNTZjNDFjM2E=", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2020-11-23T19:20:53Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2020-12-22T16:51:56Z"}, "message": "Remove redundant shadow check\n\nThere is already an assertion that consecutive lines assign to a struct\nfield.", "tree": {"sha": "9c5a893931f16e678724809fcfc82b5a17a8b300", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c5a893931f16e678724809fcfc82b5a17a8b300"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/73ce34a1970e860d14111127dd11d9ba56c41c3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/73ce34a1970e860d14111127dd11d9ba56c41c3a", "html_url": "https://github.com/rust-lang/rust/commit/73ce34a1970e860d14111127dd11d9ba56c41c3a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/73ce34a1970e860d14111127dd11d9ba56c41c3a/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8bdf34e10cfa47b6e0cfccd5d0f8e6a5c079bc30", "url": "https://api.github.com/repos/rust-lang/rust/commits/8bdf34e10cfa47b6e0cfccd5d0f8e6a5c079bc30", "html_url": "https://github.com/rust-lang/rust/commit/8bdf34e10cfa47b6e0cfccd5d0f8e6a5c079bc30"}], "stats": {"total": 20, "additions": 2, "deletions": 18}, "files": [{"sha": "c3fe77f6250170537bd2d12815a69c438043a60a", "filename": "clippy_lints/src/default.rs", "status": "modified", "additions": 2, "deletions": 18, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/73ce34a1970e860d14111127dd11d9ba56c41c3a/clippy_lints%2Fsrc%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73ce34a1970e860d14111127dd11d9ba56c41c3a/clippy_lints%2Fsrc%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdefault.rs?ref=73ce34a1970e860d14111127dd11d9ba56c41c3a", "patch": "@@ -122,15 +122,8 @@ impl LateLintPass<'_> for Default {\n             let mut assigned_fields = Vec::new();\n             let mut cancel_lint = false;\n             for consecutive_statement in &block.stmts[stmt_idx + 1..] {\n-                // interrupt if the statement is a let binding (`Local`) that shadows the original\n-                // binding\n-                if stmt_shadows_binding(consecutive_statement, binding_name) {\n-                    break;\n-                }\n                 // find out if and which field was set by this `consecutive_statement`\n-                else if let Some((field_ident, assign_rhs)) =\n-                    field_reassigned_by_stmt(consecutive_statement, binding_name)\n-                {\n+                if let Some((field_ident, assign_rhs)) = field_reassigned_by_stmt(consecutive_statement, binding_name) {\n                     // interrupt and cancel lint if assign_rhs references the original binding\n                     if contains_name(binding_name, assign_rhs) {\n                         cancel_lint = true;\n@@ -152,7 +145,7 @@ impl LateLintPass<'_> for Default {\n                         first_assign = Some(consecutive_statement);\n                     }\n                 }\n-                // interrupt also if no field was assigned, since we only want to look at consecutive statements\n+                // interrupt if no field was assigned, since we only want to look at consecutive statements\n                 else {\n                     break;\n                 }\n@@ -256,15 +249,6 @@ fn enumerate_bindings_using_default<'tcx>(\n         .collect()\n }\n \n-fn stmt_shadows_binding(this: &Stmt<'_>, shadowed: Symbol) -> bool {\n-    if let StmtKind::Local(local) = &this.kind {\n-        if let PatKind::Binding(_, _, ident, _) = local.pat.kind {\n-            return ident.name == shadowed;\n-        }\n-    }\n-    false\n-}\n-\n /// Returns the reassigned field and the assigning expression (right-hand side of assign).\n fn field_reassigned_by_stmt<'tcx>(this: &Stmt<'tcx>, binding_name: Symbol) -> Option<(Ident, &'tcx Expr<'tcx>)> {\n     if_chain! {"}]}