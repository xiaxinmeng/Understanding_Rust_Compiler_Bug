{"sha": "c82a9141abe6b6cbf5b55710dc8a315a3839081b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4MmE5MTQxYWJlNmI2Y2JmNWI1NTcxMGRjOGEzMTVhMzgzOTA4MWI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-06-17T12:01:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-17T12:01:43Z"}, "message": "Merge #9310\n\n9310: internal: Refine and test UseTree completions r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "1d130833fa51a6fd46e3ff61f3f68155e546c535", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d130833fa51a6fd46e3ff61f3f68155e546c535"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c82a9141abe6b6cbf5b55710dc8a315a3839081b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgyzmnCRBK7hj4Ov3rIwAAy6IIAAb6+3b8RXB8rz2g4e/dlbuw\nUEVwcywvCD8xQXrmzMcEX/qVB97Qr8jAsU1hxQ5X+WmikIaumq8ytDW9WWQkQRRD\naR09seidBylYjrnEz12CGr5qnJ6ODV1fWhhingPgnzLJuBIYAypzEOTTyvgaoHxX\nEgOO0kl8brKVDnPGNKWXJ8SEx1sVSHGRek6NjoQlb5JtQKjwgagtEks4C6MP9X23\nwk9A9khI9y45GZpW/Qaqb7BNPEYj0lY1przAclt08vrYys/2twTbbAf7pZXEHCeV\nliXw1EgSVcQFZh0XCOpF6Csct5PTb35urgJJFq20ez2Pr30EWjq++W9zC5Zq5ko=\n=M6No\n-----END PGP SIGNATURE-----\n", "payload": "tree 1d130833fa51a6fd46e3ff61f3f68155e546c535\nparent 3b58d8f785917b4212cd917fced6c3006210e4d3\nparent 9353f36516e5b4026ce3a181d578c3a63876a18f\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1623931303 +0000\ncommitter GitHub <noreply@github.com> 1623931303 +0000\n\nMerge #9310\n\n9310: internal: Refine and test UseTree completions r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c82a9141abe6b6cbf5b55710dc8a315a3839081b", "html_url": "https://github.com/rust-lang/rust/commit/c82a9141abe6b6cbf5b55710dc8a315a3839081b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c82a9141abe6b6cbf5b55710dc8a315a3839081b/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b58d8f785917b4212cd917fced6c3006210e4d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b58d8f785917b4212cd917fced6c3006210e4d3", "html_url": "https://github.com/rust-lang/rust/commit/3b58d8f785917b4212cd917fced6c3006210e4d3"}, {"sha": "9353f36516e5b4026ce3a181d578c3a63876a18f", "url": "https://api.github.com/repos/rust-lang/rust/commits/9353f36516e5b4026ce3a181d578c3a63876a18f", "html_url": "https://github.com/rust-lang/rust/commit/9353f36516e5b4026ce3a181d578c3a63876a18f"}], "stats": {"total": 554, "additions": 299, "deletions": 255}, "files": [{"sha": "814c1565362ec8ee742b2ae8d860f74ac33cbbfb", "filename": "crates/ide_completion/src/completions/flyimport.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c82a9141abe6b6cbf5b55710dc8a315a3839081b/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c82a9141abe6b6cbf5b55710dc8a315a3839081b/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs?ref=c82a9141abe6b6cbf5b55710dc8a315a3839081b", "patch": "@@ -109,7 +109,7 @@ pub(crate) fn import_on_the_fly(acc: &mut Completions, ctx: &CompletionContext)\n     if !ctx.config.enable_imports_on_the_fly {\n         return None;\n     }\n-    if ctx.use_item_syntax.is_some()\n+    if ctx.in_use_tree()\n         || ctx.is_path_disallowed()\n         || ctx.expects_item()\n         || ctx.expects_assoc_item()"}, {"sha": "9754122a0e4499ab54df6d7bc34198c358ecb05d", "filename": "crates/ide_completion/src/completions/keyword.rs", "status": "modified", "additions": 18, "deletions": 46, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/c82a9141abe6b6cbf5b55710dc8a315a3839081b/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fkeyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c82a9141abe6b6cbf5b55710dc8a315a3839081b/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fkeyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fkeyword.rs?ref=c82a9141abe6b6cbf5b55710dc8a315a3839081b", "patch": "@@ -18,17 +18,24 @@ pub(crate) fn complete_use_tree_keyword(acc: &mut Completions, ctx: &CompletionC\n         item\n     };\n \n-    if ctx.use_item_syntax.is_some() {\n-        let qual = ctx.path_qual();\n-        if qual.is_none() {\n-            kw_completion(\"crate::\").add_to(acc);\n-        }\n-        kw_completion(\"self\").add_to(acc);\n-        if iter::successors(qual.cloned(), |p| p.qualifier())\n-            .all(|p| p.segment().and_then(|s| s.super_token()).is_some())\n-        {\n-            kw_completion(\"super::\").add_to(acc);\n-        }\n+    if ctx.in_use_tree() {\n+        match &ctx.path_context {\n+            Some(PathCompletionContext { qualifier: Some(qual), use_tree_parent, .. }) => {\n+                if iter::successors(Some(qual.clone()), |p| p.qualifier())\n+                    .all(|p| p.segment().and_then(|s| s.super_token()).is_some())\n+                {\n+                    kw_completion(\"super::\").add_to(acc);\n+                }\n+                if *use_tree_parent {\n+                    kw_completion(\"self\").add_to(acc);\n+                }\n+            }\n+            _ => {\n+                kw_completion(\"crate::\").add_to(acc);\n+                kw_completion(\"self::\").add_to(acc);\n+                kw_completion(\"super::\").add_to(acc);\n+            }\n+        };\n     }\n \n     // Suggest .await syntax for types that implement Future trait\n@@ -199,41 +206,6 @@ mod tests {\n         expect.assert_eq(&actual)\n     }\n \n-    #[test]\n-    fn test_keywords_in_use_stmt() {\n-        check(\n-            r\"use $0\",\n-            expect![[r#\"\n-                kw crate::\n-                kw self\n-                kw super::\n-            \"#]],\n-        );\n-\n-        // FIXME: `self` shouldn't be shown here and the check below\n-        check(\n-            r\"use a::$0\",\n-            expect![[r#\"\n-            kw self\n-        \"#]],\n-        );\n-\n-        check(\n-            r\"use super::$0\",\n-            expect![[r#\"\n-                kw self\n-                kw super::\n-            \"#]],\n-        );\n-\n-        check(\n-            r\"use a::{b, $0}\",\n-            expect![[r#\"\n-            kw self\n-        \"#]],\n-        );\n-    }\n-\n     #[test]\n     fn test_keywords_in_function() {\n         check("}, {"sha": "0597879ac61341a89b92275fdfdcff5f1c887558", "filename": "crates/ide_completion/src/completions/qualified_path.rs", "status": "modified", "additions": 1, "deletions": 158, "changes": 159, "blob_url": "https://github.com/rust-lang/rust/blob/c82a9141abe6b6cbf5b55710dc8a315a3839081b/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c82a9141abe6b6cbf5b55710dc8a315a3839081b/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs?ref=c82a9141abe6b6cbf5b55710dc8a315a3839081b", "patch": "@@ -49,7 +49,7 @@ pub(crate) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionCon\n         hir::PathResolution::Def(hir::ModuleDef::Module(module)) => {\n             let module_scope = module.scope(ctx.db, context_module);\n             for (name, def) in module_scope {\n-                if ctx.use_item_syntax.is_some() {\n+                if ctx.in_use_tree() {\n                     if let hir::ScopeDef::Unknown = def {\n                         if let Some(name_ref) = ctx.name_ref_syntax.as_ref() {\n                             if name_ref.syntax().text() == name.to_string().as_str() {\n@@ -212,12 +212,6 @@ mod tests {\n         expect.assert_eq(&actual);\n     }\n \n-    #[test]\n-    fn dont_complete_current_use() {\n-        cov_mark::check!(dont_complete_current_use);\n-        check(r#\"use self::foo$0;\"#, expect![[\"\"]]);\n-    }\n-\n     #[test]\n     fn dont_complete_values_in_type_pos() {\n         check(\n@@ -248,20 +242,6 @@ fn foo() {\n         );\n     }\n \n-    #[test]\n-    fn dont_complete_current_use_in_braces_with_glob() {\n-        check(\n-            r#\"\n-mod foo { pub struct S; }\n-use self::{foo::*, bar$0};\n-\"#,\n-            expect![[r#\"\n-                st S\n-                md foo\n-            \"#]],\n-        );\n-    }\n-\n     #[test]\n     fn dont_complete_primitive_in_use() {\n         check_builtin(r#\"use self::$0;\"#, expect![[\"\"]]);\n@@ -298,108 +278,6 @@ use self::{foo::*, bar$0};\n         );\n     }\n \n-    #[test]\n-    fn completes_mod_with_same_name_as_function() {\n-        check(\n-            r#\"\n-use self::my::$0;\n-\n-mod my { pub struct Bar; }\n-fn my() {}\n-\"#,\n-            expect![[r#\"\n-                st Bar\n-            \"#]],\n-        );\n-    }\n-\n-    #[test]\n-    fn filters_visibility() {\n-        check(\n-            r#\"\n-use self::my::$0;\n-\n-mod my {\n-    struct Bar;\n-    pub struct Foo;\n-    pub use Bar as PublicBar;\n-}\n-\"#,\n-            expect![[r#\"\n-                st Foo\n-                st PublicBar\n-            \"#]],\n-        );\n-    }\n-\n-    #[test]\n-    fn completes_use_item_starting_with_self() {\n-        check(\n-            r#\"\n-use self::m::$0;\n-\n-mod m { pub struct Bar; }\n-\"#,\n-            expect![[r#\"\n-                st Bar\n-            \"#]],\n-        );\n-    }\n-\n-    #[test]\n-    fn completes_use_item_starting_with_crate() {\n-        check(\n-            r#\"\n-//- /lib.rs\n-mod foo;\n-struct Spam;\n-//- /foo.rs\n-use crate::Sp$0\n-\"#,\n-            expect![[r#\"\n-                md foo\n-                st Spam\n-            \"#]],\n-        );\n-    }\n-\n-    #[test]\n-    fn completes_nested_use_tree() {\n-        check(\n-            r#\"\n-//- /lib.rs\n-mod foo;\n-struct Spam;\n-//- /foo.rs\n-use crate::{Sp$0};\n-\"#,\n-            expect![[r#\"\n-                md foo\n-                st Spam\n-            \"#]],\n-        );\n-    }\n-\n-    #[test]\n-    fn completes_deeply_nested_use_tree() {\n-        check(\n-            r#\"\n-//- /lib.rs\n-mod foo;\n-pub mod bar {\n-    pub mod baz {\n-        pub struct Spam;\n-    }\n-}\n-//- /foo.rs\n-use crate::{bar::{baz::Sp$0}};\n-\"#,\n-            expect![[r#\"\n-                st Spam\n-            \"#]],\n-        );\n-    }\n-\n     #[test]\n     fn completes_enum_variant() {\n         check(\n@@ -496,22 +374,6 @@ fn foo() { let _ = U::$0 }\n         );\n     }\n \n-    #[test]\n-    fn completes_use_paths_across_crates() {\n-        check(\n-            r#\"\n-//- /main.rs crate:main deps:foo\n-use foo::$0;\n-\n-//- /foo/lib.rs crate:foo\n-pub mod bar { pub struct S; }\n-\"#,\n-            expect![[r#\"\n-                md bar\n-            \"#]],\n-        );\n-    }\n-\n     #[test]\n     fn completes_trait_associated_method_1() {\n         check(\n@@ -713,25 +575,6 @@ impl MyStruct {\n         );\n     }\n \n-    #[test]\n-    fn test_super_super_completion() {\n-        check(\n-            r#\"\n-mod a {\n-    const A: usize = 0;\n-    mod b {\n-        const B: usize = 0;\n-        mod c { use super::super::$0 }\n-    }\n-}\n-\"#,\n-            expect![[r#\"\n-                md b\n-                ct A\n-            \"#]],\n-        );\n-    }\n-\n     #[test]\n     fn completes_reexported_items_under_correct_name() {\n         check("}, {"sha": "6f96eceb9c1e70e06757ec66718e51f6d14540ef", "filename": "crates/ide_completion/src/completions/unqualified_path.rs", "status": "modified", "additions": 1, "deletions": 33, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/c82a9141abe6b6cbf5b55710dc8a315a3839081b/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c82a9141abe6b6cbf5b55710dc8a315a3839081b/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs?ref=c82a9141abe6b6cbf5b55710dc8a315a3839081b", "patch": "@@ -25,7 +25,7 @@ pub(crate) fn complete_unqualified_path(acc: &mut Completions, ctx: &CompletionC\n         return;\n     }\n \n-    if ctx.expects_use_tree() {\n+    if ctx.in_use_tree() {\n         // only show modules in a fresh UseTree\n         cov_mark::hit!(only_completes_modules_in_import);\n         ctx.scope.process_all_names(&mut |name, res| {\n@@ -129,22 +129,6 @@ fn foo() {\n         );\n     }\n \n-    #[test]\n-    fn only_completes_modules_in_import() {\n-        cov_mark::check!(only_completes_modules_in_import);\n-        check(\n-            r#\"\n-use f$0\n-\n-struct Foo;\n-mod foo {}\n-\"#,\n-            expect![[r#\"\n-                md foo\n-            \"#]],\n-        );\n-    }\n-\n     #[test]\n     fn bind_pat_and_path_ignore_at() {\n         check(\n@@ -358,22 +342,6 @@ fn _alpha() {}\n         )\n     }\n \n-    #[test]\n-    fn completes_extern_prelude() {\n-        check(\n-            r#\"\n-//- /lib.rs crate:main deps:other_crate\n-use $0;\n-\n-//- /other_crate/lib.rs crate:other_crate\n-// nothing here\n-\"#,\n-            expect![[r#\"\n-                md other_crate\n-            \"#]],\n-        );\n-    }\n-\n     #[test]\n     fn completes_module_items_in_nested_modules() {\n         check("}, {"sha": "240cac1de0973931cdfa5b07eef8f6b08c89be16", "filename": "crates/ide_completion/src/context.rs", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c82a9141abe6b6cbf5b55710dc8a315a3839081b/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c82a9141abe6b6cbf5b55710dc8a315a3839081b/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcontext.rs?ref=c82a9141abe6b6cbf5b55710dc8a315a3839081b", "patch": "@@ -43,6 +43,8 @@ pub(crate) struct PathCompletionContext {\n     pub(super) is_trivial_path: bool,\n     /// If not a trivial path, the prefix (qualifier).\n     pub(super) qualifier: Option<ast::Path>,\n+    /// Whether the qualifier comes from a use tree parent or not\n+    pub(super) use_tree_parent: bool,\n     pub(super) kind: Option<PathKind>,\n     /// Whether the path segment has type args or not.\n     pub(super) has_type_args: bool,\n@@ -79,7 +81,6 @@ pub(crate) struct CompletionContext<'a> {\n     /// The parent impl of the cursor position if it exists.\n     pub(super) impl_def: Option<ast::Impl>,\n     pub(super) name_ref_syntax: Option<ast::NameRef>,\n-    pub(super) use_item_syntax: Option<ast::Use>,\n \n     // potentially set if we are completing a lifetime\n     pub(super) lifetime_syntax: Option<ast::Lifetime>,\n@@ -151,7 +152,6 @@ impl<'a> CompletionContext<'a> {\n             function_def: None,\n             impl_def: None,\n             name_ref_syntax: None,\n-            use_item_syntax: None,\n             lifetime_syntax: None,\n             lifetime_param_syntax: None,\n             lifetime_allowed: false,\n@@ -264,10 +264,6 @@ impl<'a> CompletionContext<'a> {\n         }\n     }\n \n-    pub(crate) fn expects_use_tree(&self) -> bool {\n-        matches!(self.completion_location, Some(ImmediateLocation::Use))\n-    }\n-\n     pub(crate) fn expects_non_trait_assoc_item(&self) -> bool {\n         matches!(self.completion_location, Some(ImmediateLocation::Impl))\n     }\n@@ -295,6 +291,13 @@ impl<'a> CompletionContext<'a> {\n         matches!(self.completion_location, Some(ImmediateLocation::RecordField))\n     }\n \n+    pub(crate) fn in_use_tree(&self) -> bool {\n+        matches!(\n+            self.completion_location,\n+            Some(ImmediateLocation::Use) | Some(ImmediateLocation::UseTree)\n+        )\n+    }\n+\n     pub(crate) fn has_impl_or_trait_prev_sibling(&self) -> bool {\n         matches!(\n             self.prev_sibling,\n@@ -578,9 +581,6 @@ impl<'a> CompletionContext<'a> {\n         self.name_ref_syntax =\n             find_node_at_offset(original_file, name_ref.syntax().text_range().start());\n \n-        self.use_item_syntax =\n-            self.sema.token_ancestors_with_macros(self.token.clone()).find_map(ast::Use::cast);\n-\n         self.function_def = self\n             .sema\n             .token_ancestors_with_macros(self.token.clone())\n@@ -600,6 +600,7 @@ impl<'a> CompletionContext<'a> {\n                 has_type_args: false,\n                 can_be_stmt: false,\n                 in_loop_body: false,\n+                use_tree_parent: false,\n                 kind: None,\n             });\n             path_ctx.in_loop_body = is_in_loop_body(name_ref.syntax());\n@@ -627,7 +628,8 @@ impl<'a> CompletionContext<'a> {\n             }\n             path_ctx.has_type_args = segment.generic_arg_list().is_some();\n \n-            if let Some(path) = path_or_use_tree_qualifier(&path) {\n+            if let Some((path, use_tree_parent)) = path_or_use_tree_qualifier(&path) {\n+                path_ctx.use_tree_parent = use_tree_parent;\n                 path_ctx.qualifier = path\n                     .segment()\n                     .and_then(|it| {\n@@ -681,13 +683,13 @@ fn is_node<N: AstNode>(node: &SyntaxNode) -> bool {\n     }\n }\n \n-fn path_or_use_tree_qualifier(path: &ast::Path) -> Option<ast::Path> {\n+fn path_or_use_tree_qualifier(path: &ast::Path) -> Option<(ast::Path, bool)> {\n     if let Some(qual) = path.qualifier() {\n-        return Some(qual);\n+        return Some((qual, false));\n     }\n     let use_tree_list = path.syntax().ancestors().find_map(ast::UseTreeList::cast)?;\n     let use_tree = use_tree_list.syntax().parent().and_then(ast::UseTree::cast)?;\n-    use_tree.path()\n+    use_tree.path().zip(Some(true))\n }\n \n #[cfg(test)]"}, {"sha": "271409c38adbc199b96f61935d8ec9a2247d4352", "filename": "crates/ide_completion/src/patterns.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c82a9141abe6b6cbf5b55710dc8a315a3839081b/crates%2Fide_completion%2Fsrc%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c82a9141abe6b6cbf5b55710dc8a315a3839081b/crates%2Fide_completion%2Fsrc%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fpatterns.rs?ref=c82a9141abe6b6cbf5b55710dc8a315a3839081b", "patch": "@@ -27,6 +27,7 @@ pub(crate) enum ImmediatePrevSibling {\n #[derive(Clone, Debug, PartialEq, Eq)]\n pub(crate) enum ImmediateLocation {\n     Use,\n+    UseTree,\n     Impl,\n     Trait,\n     RecordField,\n@@ -180,6 +181,8 @@ pub(crate) fn determine_location(\n         match parent {\n             ast::IdentPat(_it) => ImmediateLocation::IdentPat,\n             ast::Use(_it) => ImmediateLocation::Use,\n+            ast::UseTree(_it) => ImmediateLocation::UseTree,\n+            ast::UseTreeList(_it) => ImmediateLocation::UseTree,\n             ast::BlockExpr(_it) => ImmediateLocation::BlockExpr,\n             ast::SourceFile(_it) => ImmediateLocation::ItemList,\n             ast::ItemList(_it) => ImmediateLocation::ItemList,\n@@ -373,8 +376,8 @@ mod tests {\n     fn test_use_loc() {\n         check_location(r\"use f$0\", ImmediateLocation::Use);\n         check_location(r\"use f$0;\", ImmediateLocation::Use);\n-        check_location(r\"use f::{f$0}\", None);\n-        check_location(r\"use {f$0}\", None);\n+        check_location(r\"use f::{f$0}\", ImmediateLocation::UseTree);\n+        check_location(r\"use {f$0}\", ImmediateLocation::UseTree);\n     }\n \n     #[test]"}, {"sha": "749dfc665a023465e1f51aa9708a76bdc1ac1a93", "filename": "crates/ide_completion/src/render/builder_ext.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c82a9141abe6b6cbf5b55710dc8a315a3839081b/crates%2Fide_completion%2Fsrc%2Frender%2Fbuilder_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c82a9141abe6b6cbf5b55710dc8a315a3839081b/crates%2Fide_completion%2Fsrc%2Frender%2Fbuilder_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fbuilder_ext.rs?ref=c82a9141abe6b6cbf5b55710dc8a315a3839081b", "patch": "@@ -28,7 +28,7 @@ impl Builder {\n         if !ctx.config.add_call_parenthesis {\n             return false;\n         }\n-        if ctx.use_item_syntax.is_some() {\n+        if ctx.in_use_tree() {\n             cov_mark::hit!(no_parens_in_use_item);\n             return false;\n         }"}, {"sha": "4d5179c4f95fefd57a9f1de87cf40f772dcbded4", "filename": "crates/ide_completion/src/render/macro_.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c82a9141abe6b6cbf5b55710dc8a315a3839081b/crates%2Fide_completion%2Fsrc%2Frender%2Fmacro_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c82a9141abe6b6cbf5b55710dc8a315a3839081b/crates%2Fide_completion%2Fsrc%2Frender%2Fmacro_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fmacro_.rs?ref=c82a9141abe6b6cbf5b55710dc8a315a3839081b", "patch": "@@ -69,7 +69,7 @@ impl<'a> MacroRender<'a> {\n     }\n \n     fn needs_bang(&self) -> bool {\n-        self.ctx.completion.use_item_syntax.is_none()\n+        !self.ctx.completion.in_use_tree()\n             && !matches!(self.ctx.completion.path_call_kind(), Some(CallKind::Mac))\n     }\n "}, {"sha": "89c7fb524eca57a4d2f12d8a10f56c927ca4d5bf", "filename": "crates/ide_completion/src/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c82a9141abe6b6cbf5b55710dc8a315a3839081b/crates%2Fide_completion%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c82a9141abe6b6cbf5b55710dc8a315a3839081b/crates%2Fide_completion%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests.rs?ref=c82a9141abe6b6cbf5b55710dc8a315a3839081b", "patch": "@@ -1,4 +1,5 @@\n mod item_list;\n+mod use_tree;\n \n use hir::{PrefixKind, Semantics};\n use ide_db::{"}, {"sha": "7e6748cccd21d5280a62f881feab0e39ecdb255e", "filename": "crates/ide_completion/src/tests/use_tree.rs", "status": "added", "additions": 255, "deletions": 0, "changes": 255, "blob_url": "https://github.com/rust-lang/rust/blob/c82a9141abe6b6cbf5b55710dc8a315a3839081b/crates%2Fide_completion%2Fsrc%2Ftests%2Fuse_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c82a9141abe6b6cbf5b55710dc8a315a3839081b/crates%2Fide_completion%2Fsrc%2Ftests%2Fuse_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fuse_tree.rs?ref=c82a9141abe6b6cbf5b55710dc8a315a3839081b", "patch": "@@ -0,0 +1,255 @@\n+use expect_test::{expect, Expect};\n+\n+use crate::tests::completion_list;\n+\n+fn check(ra_fixture: &str, expect: Expect) {\n+    let actual = completion_list(ra_fixture);\n+    expect.assert_eq(&actual)\n+}\n+\n+#[test]\n+fn use_tree_start() {\n+    cov_mark::check!(only_completes_modules_in_import);\n+    check(\n+        r#\"\n+//- /lib.rs crate:main deps:other_crate\n+use f$0\n+\n+struct Foo;\n+mod foo {}\n+//- /other_crate/lib.rs crate:other_crate\n+// nothing here\n+\"#,\n+        expect![[r#\"\n+            kw crate::\n+            kw self::\n+            kw super::\n+            md foo\n+            md other_crate\n+        \"#]],\n+    );\n+}\n+\n+#[test]\n+fn dont_complete_current_use() {\n+    cov_mark::check!(dont_complete_current_use);\n+    check(r#\"use self::foo$0;\"#, expect![[r#\"\"#]]);\n+    check(\n+        r#\"\n+mod foo { pub struct S; }\n+use self::{foo::*, bar$0};\n+\"#,\n+        expect![[r#\"\n+            kw self\n+            st S\n+            md foo\n+        \"#]],\n+    );\n+}\n+\n+#[test]\n+fn nested_use_tree() {\n+    check(\n+        r#\"\n+mod foo {\n+    pub mod bar {\n+        pub struct FooBar;\n+    }\n+}\n+use foo::{bar::$0}\n+\"#,\n+        expect![[r#\"\n+            st FooBar\n+        \"#]],\n+    );\n+    check(\n+        r#\"\n+mod foo {\n+    pub mod bar {\n+        pub struct FooBar;\n+    }\n+}\n+use foo::{$0}\n+\"#,\n+        expect![[r#\"\n+            kw self\n+            md bar\n+        \"#]],\n+    );\n+}\n+\n+#[test]\n+fn deeply_nested_use_tree() {\n+    check(\n+        r#\"\n+mod foo {\n+    pub mod bar {\n+        pub mod baz {\n+            pub struct FooBarBaz;\n+        }\n+    }\n+}\n+use foo::{bar::{baz::$0}}\n+\"#,\n+        expect![[r#\"\n+            st FooBarBaz\n+        \"#]],\n+    );\n+    check(\n+        r#\"\n+mod foo {\n+    pub mod bar {\n+        pub mod baz {\n+            pub struct FooBarBaz;\n+        }\n+    }\n+}\n+use foo::{bar::{$0}}\n+\"#,\n+        expect![[r#\"\n+            kw self\n+            md baz\n+        \"#]],\n+    );\n+}\n+\n+#[test]\n+fn plain_qualified_use_tree() {\n+    check(\n+        r#\"\n+use foo::$0\n+\n+mod foo {\n+    struct Private;\n+    pub struct Foo;\n+}\n+struct Bar;\n+\"#,\n+        expect![[r#\"\n+            st Foo\n+        \"#]],\n+    );\n+}\n+\n+#[test]\n+fn self_qualified_use_tree() {\n+    check(\n+        r#\"\n+use self::$0\n+\n+mod foo {}\n+struct Bar;\n+\"#,\n+        expect![[r#\"\n+            md foo\n+            st Bar\n+        \"#]],\n+    );\n+}\n+\n+#[test]\n+fn super_qualified_use_tree() {\n+    check(\n+        r#\"\n+mod bar {\n+    use super::$0\n+}\n+\n+mod foo {}\n+struct Bar;\n+\"#,\n+        expect![[r#\"\n+            kw super::\n+            st Bar\n+            md bar\n+            md foo\n+        \"#]],\n+    );\n+}\n+\n+#[test]\n+fn super_super_qualified_use_tree() {\n+    check(\n+        r#\"\n+mod a {\n+    const A: usize = 0;\n+    mod b {\n+        const B: usize = 0;\n+        mod c { use super::super::$0 }\n+    }\n+}\n+\"#,\n+        expect![[r#\"\n+            kw super::\n+            md b\n+            ct A\n+        \"#]],\n+    );\n+}\n+\n+#[test]\n+fn crate_qualified_use_tree() {\n+    check(\n+        r#\"\n+use crate::$0\n+\n+mod foo {}\n+struct Bar;\n+\"#,\n+        expect![[r#\"\n+            md foo\n+            st Bar\n+        \"#]],\n+    );\n+}\n+\n+#[test]\n+fn extern_crate_qualified_use_tree() {\n+    check(\n+        r#\"\n+//- /lib.rs crate:main deps:other_crate\n+use other_crate::$0\n+//- /other_crate/lib.rs crate:other_crate\n+pub struct Foo;\n+pub mod foo {}\n+\"#,\n+        expect![[r#\"\n+            st Foo\n+            md foo\n+        \"#]],\n+    );\n+}\n+\n+#[test]\n+fn pub_use_tree() {\n+    check(\n+        r#\"\n+pub struct X;\n+pub mod bar {}\n+pub use $0;\n+\"#,\n+        expect![[r#\"\n+            kw crate::\n+            kw self::\n+            kw super::\n+            md bar\n+        \"#]],\n+    );\n+}\n+\n+#[test]\n+fn use_tree_braces_at_start() {\n+    check(\n+        r#\"\n+struct X;\n+mod bar {}\n+use {$0};\n+\"#,\n+        expect![[r#\"\n+            kw crate::\n+            kw self::\n+            kw super::\n+            md bar\n+        \"#]],\n+    );\n+}"}]}