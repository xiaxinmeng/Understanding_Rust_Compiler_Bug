{"sha": "907d44a75113d318102ff05a66b4dcdafa1b5e7f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwN2Q0NGE3NTExM2QzMTgxMDJmZjA1YTY2YjRkY2RhZmExYjVlN2Y=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-09-12T14:13:11Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-09-15T21:00:05Z"}, "message": "any-cache", "tree": {"sha": "d1f1511030946b859cae204b68d6bb8d645aee55", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1f1511030946b859cae204b68d6bb8d645aee55"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/907d44a75113d318102ff05a66b4dcdafa1b5e7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/907d44a75113d318102ff05a66b4dcdafa1b5e7f", "html_url": "https://github.com/rust-lang/rust/commit/907d44a75113d318102ff05a66b4dcdafa1b5e7f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/907d44a75113d318102ff05a66b4dcdafa1b5e7f/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dbdf72e2e2fb3ebc1a5cdeac4e70108371bb91fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/dbdf72e2e2fb3ebc1a5cdeac4e70108371bb91fb", "html_url": "https://github.com/rust-lang/rust/commit/dbdf72e2e2fb3ebc1a5cdeac4e70108371bb91fb"}], "stats": {"total": 39, "additions": 18, "deletions": 21}, "files": [{"sha": "d67cc189cde6b47c0ececc085488a459e4e520fc", "filename": "crates/libanalysis/src/db.rs", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/907d44a75113d318102ff05a66b4dcdafa1b5e7f/crates%2Flibanalysis%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/907d44a75113d318102ff05a66b4dcdafa1b5e7f/crates%2Flibanalysis%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibanalysis%2Fsrc%2Fdb.rs?ref=907d44a75113d318102ff05a66b4dcdafa1b5e7f", "patch": "@@ -3,14 +3,14 @@ use std::{\n     sync::Arc,\n     cell::RefCell,\n     fmt::Debug,\n+    any::Any,\n };\n use parking_lot::Mutex;\n use libsyntax2::{File};\n use im;\n use {\n     FileId,\n     imp::{FileResolverImp},\n-    module_map_db::ModuleDescr,\n };\n \n #[derive(Debug)]\n@@ -94,11 +94,13 @@ impl Clone for Db {\n \n #[derive(Default, Debug)]\n pub(crate) struct Cache {\n-    pub(crate) module_descr: QueryCache<ModuleDescr>,\n     gen: Gen,\n     green: im::HashMap<QueryInvocationId, (Gen, OutputHash)>,\n     deps: im::HashMap<QueryInvocationId, Vec<(QueryInvocationId, OutputHash)>>,\n+    results: im::HashMap<QueryInvocationId, Arc<Any>>,\n }\n+\n+\n #[allow(type_alias_bounds)]\n pub(crate) type QueryCache<Q: Query> = im::HashMap<\n     <Q as Query>::Params,\n@@ -109,6 +111,15 @@ impl Cache {\n     fn new() -> Cache {\n         Default::default()\n     }\n+\n+    fn get_result<Q: Query>(&self, id: QueryInvocationId) -> Q::Output\n+    where\n+        Q::Output: Clone\n+    {\n+        let res = &self.results[&id];\n+        let res = res.downcast_ref::<Q::Output>().unwrap();\n+        res.clone()\n+    }\n }\n \n pub(crate) struct QueryCtx {\n@@ -150,8 +161,8 @@ impl QueryCtx {\n \n pub(crate) trait Query {\n     const ID: u32;\n-    type Params: Hash + Eq + Debug;\n-    type Output: Hash + Debug;\n+    type Params: Hash + Eq + Debug + Any + 'static;\n+    type Output: Hash + Debug + Any + 'static;\n }\n \n pub(crate) trait Get: Query {\n@@ -164,11 +175,6 @@ where\n     Q::Output: Clone,\n {\n     fn get(ctx: &QueryCtx, params: &Self::Params) -> Self::Output {\n-        if !Self::cacheable() {\n-            ctx.trace(TraceEvent { query_id: Q::ID, kind: TraceEventKind::Evaluating });\n-            return Self::eval(ctx, params);\n-        }\n-\n         if let Some(res) = try_reuse::<Q>(ctx, params) {\n             return res;\n         }\n@@ -185,8 +191,7 @@ where\n         let output_hash = output_hash::<Q>(&res);\n         let id = id::<Q>(params);\n         cache.green.insert(id, (gen, output_hash));\n-        let cache = Self::cache(&mut cache);\n-        cache.insert(params.clone(), res.clone());\n+        cache.results.insert(me, Arc::new(res.clone()));\n         res\n     }\n }\n@@ -201,7 +206,7 @@ where\n     let curr_gen = cache.gen;\n     let old_hash = match *cache.green.get(&id)? {\n         (gen, _) if gen == curr_gen => {\n-            return Some(Q::cache(&mut cache)[params].clone());\n+            return Some(cache.get_result::<Q>(id));\n         }\n         (_, hash) => hash,\n     };\n@@ -218,18 +223,14 @@ where\n         return None;\n     }\n     cache.green.insert(id, (curr_gen, old_hash));\n-    Some(Q::cache(&mut cache)[params].clone())\n+    Some(cache.get_result::<Q>(id))\n }\n \n pub(crate) trait Eval: Query\n where\n     Self::Params: Clone,\n     Self::Output: Clone,\n {\n-    fn cacheable() -> bool { false }\n-    fn cache(_cache: &mut Cache) -> &mut QueryCache<Self> {\n-        unimplemented!()\n-    }\n     fn eval(ctx: &QueryCtx, params: &Self::Params) -> Self::Output;\n }\n "}, {"sha": "4d4bd91046f63f7d087dcf9c3d092e0bac08cd88", "filename": "crates/libanalysis/src/module_map_db.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/907d44a75113d318102ff05a66b4dcdafa1b5e7f/crates%2Flibanalysis%2Fsrc%2Fmodule_map_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/907d44a75113d318102ff05a66b4dcdafa1b5e7f/crates%2Flibanalysis%2Fsrc%2Fmodule_map_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibanalysis%2Fsrc%2Fmodule_map_db.rs?ref=907d44a75113d318102ff05a66b4dcdafa1b5e7f", "patch": "@@ -30,10 +30,6 @@ impl Query for ParentModule {\n }\n \n impl Eval for ModuleDescr {\n-    fn cacheable() -> bool { true }\n-    fn cache(cache: &mut Cache) -> &mut QueryCache<Self> {\n-        &mut cache.module_descr\n-    }\n     fn eval(ctx: &QueryCtx, file_id: &FileId) -> Arc<descr::ModuleDescr> {\n         let file = ctx.get::<FileSyntax>(file_id);\n         Arc::new(descr::ModuleDescr::new(file.ast()))"}]}