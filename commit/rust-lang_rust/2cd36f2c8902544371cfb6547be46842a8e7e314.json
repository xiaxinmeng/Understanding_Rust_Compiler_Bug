{"sha": "2cd36f2c8902544371cfb6547be46842a8e7e314", "node_id": "C_kwDOAAsO6NoAKDJjZDM2ZjJjODkwMjU0NDM3MWNmYjY1NDdiZTQ2ODQyYThlN2UzMTQ", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-12-07T13:37:47Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-12-09T14:53:23Z"}, "message": "Generate crate loaders on the fly", "tree": {"sha": "839d2b1ce8998a0785d2560b3e4ee20c0ea02632", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/839d2b1ce8998a0785d2560b3e4ee20c0ea02632"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2cd36f2c8902544371cfb6547be46842a8e7e314", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2cd36f2c8902544371cfb6547be46842a8e7e314", "html_url": "https://github.com/rust-lang/rust/commit/2cd36f2c8902544371cfb6547be46842a8e7e314", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2cd36f2c8902544371cfb6547be46842a8e7e314/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b08fbaea84a1ecce23af151c9072a02cb9bcdae", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b08fbaea84a1ecce23af151c9072a02cb9bcdae", "html_url": "https://github.com/rust-lang/rust/commit/4b08fbaea84a1ecce23af151c9072a02cb9bcdae"}], "stats": {"total": 121, "additions": 67, "deletions": 54}, "files": [{"sha": "d77630deb7477a71d2fc0614c44993ef187ebd8e", "filename": "compiler/rustc_metadata/src/creader.rs", "status": "modified", "additions": 31, "deletions": 29, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/2cd36f2c8902544371cfb6547be46842a8e7e314/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cd36f2c8902544371cfb6547be46842a8e7e314/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs?ref=2cd36f2c8902544371cfb6547be46842a8e7e314", "patch": "@@ -68,11 +68,12 @@ impl std::fmt::Debug for CStore {\n pub struct CrateLoader<'a> {\n     // Immutable configuration.\n     sess: &'a Session,\n-    metadata_loader: Box<MetadataLoaderDyn>,\n+    metadata_loader: &'a MetadataLoaderDyn,\n+    definitions: &'a Definitions,\n     local_crate_name: Symbol,\n     // Mutable output.\n-    cstore: CStore,\n-    used_extern_options: FxHashSet<Symbol>,\n+    cstore: &'a mut CStore,\n+    used_extern_options: &'a mut FxHashSet<Symbol>,\n }\n \n pub enum LoadedMacro {\n@@ -239,47 +240,49 @@ impl CStore {\n             );\n         }\n     }\n+\n+    pub fn new(sess: &Session) -> CStore {\n+        let mut stable_crate_ids = FxHashMap::default();\n+        stable_crate_ids.insert(sess.local_stable_crate_id(), LOCAL_CRATE);\n+        CStore {\n+            // We add an empty entry for LOCAL_CRATE (which maps to zero) in\n+            // order to make array indices in `metas` match with the\n+            // corresponding `CrateNum`. This first entry will always remain\n+            // `None`.\n+            metas: IndexVec::from_elem_n(None, 1),\n+            injected_panic_runtime: None,\n+            allocator_kind: None,\n+            alloc_error_handler_kind: None,\n+            has_global_allocator: false,\n+            has_alloc_error_handler: false,\n+            stable_crate_ids,\n+            unused_externs: Vec::new(),\n+        }\n+    }\n }\n \n impl<'a> CrateLoader<'a> {\n     pub fn new(\n         sess: &'a Session,\n-        metadata_loader: Box<MetadataLoaderDyn>,\n+        metadata_loader: &'a MetadataLoaderDyn,\n         local_crate_name: Symbol,\n+        cstore: &'a mut CStore,\n+        definitions: &'a Definitions,\n+        used_extern_options: &'a mut FxHashSet<Symbol>,\n     ) -> Self {\n-        let mut stable_crate_ids = FxHashMap::default();\n-        stable_crate_ids.insert(sess.local_stable_crate_id(), LOCAL_CRATE);\n-\n         CrateLoader {\n             sess,\n             metadata_loader,\n             local_crate_name,\n-            cstore: CStore {\n-                // We add an empty entry for LOCAL_CRATE (which maps to zero) in\n-                // order to make array indices in `metas` match with the\n-                // corresponding `CrateNum`. This first entry will always remain\n-                // `None`.\n-                metas: IndexVec::from_elem_n(None, 1),\n-                injected_panic_runtime: None,\n-                allocator_kind: None,\n-                alloc_error_handler_kind: None,\n-                has_global_allocator: false,\n-                has_alloc_error_handler: false,\n-                stable_crate_ids,\n-                unused_externs: Vec::new(),\n-            },\n-            used_extern_options: Default::default(),\n+            cstore,\n+            used_extern_options,\n+            definitions,\n         }\n     }\n-\n     pub fn cstore(&self) -> &CStore {\n         &self.cstore\n     }\n \n-    pub fn into_cstore(self) -> CStore {\n-        self.cstore\n-    }\n-\n     fn existing_match(&self, name: Symbol, hash: Option<Svh>, kind: PathKind) -> Option<CrateNum> {\n         for (cnum, data) in self.cstore.iter_crate_data() {\n             if data.name() != name {\n@@ -989,7 +992,6 @@ impl<'a> CrateLoader<'a> {\n     pub fn process_extern_crate(\n         &mut self,\n         item: &ast::Item,\n-        definitions: &Definitions,\n         def_id: LocalDefId,\n     ) -> Option<CrateNum> {\n         match item.kind {\n@@ -1013,7 +1015,7 @@ impl<'a> CrateLoader<'a> {\n \n                 let cnum = self.resolve_crate(name, item.span, dep_kind)?;\n \n-                let path_len = definitions.def_path(def_id).data.len();\n+                let path_len = self.definitions.def_path(def_id).data.len();\n                 self.update_extern_crate(\n                     cnum,\n                     ExternCrate {"}, {"sha": "cb93b2599af2cb2f19e2ad81a7224c3278579e8b", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2cd36f2c8902544371cfb6547be46842a8e7e314/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cd36f2c8902544371cfb6547be46842a8e7e314/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=2cd36f2c8902544371cfb6547be46842a8e7e314", "patch": "@@ -836,12 +836,10 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n         } else if orig_name == Some(kw::SelfLower) {\n             Some(self.r.graph_root)\n         } else {\n-            self.r.crate_loader.process_extern_crate(item, &self.r.definitions, local_def_id).map(\n-                |crate_id| {\n-                    self.r.extern_crate_map.insert(local_def_id, crate_id);\n-                    self.r.expect_module(crate_id.as_def_id())\n-                },\n-            )\n+            self.r.crate_loader().process_extern_crate(item, local_def_id).map(|crate_id| {\n+                self.r.extern_crate_map.insert(local_def_id, crate_id);\n+                self.r.expect_module(crate_id.as_def_id())\n+            })\n         }\n         .map(|module| {\n             let used = self.process_macro_use_imports(item, module);"}, {"sha": "7227c02e22f38fc8d9116b548d83455a3ebe117a", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2cd36f2c8902544371cfb6547be46842a8e7e314/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cd36f2c8902544371cfb6547be46842a8e7e314/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=2cd36f2c8902544371cfb6547be46842a8e7e314", "patch": "@@ -1298,7 +1298,7 @@ impl<'a> Resolver<'a> {\n                     // otherwise cause duplicate suggestions.\n                     continue;\n                 }\n-                if let Some(crate_id) = self.crate_loader.maybe_process_path_extern(ident.name) {\n+                if let Some(crate_id) = self.crate_loader().maybe_process_path_extern(ident.name) {\n                     let crate_root = self.expect_module(crate_id.as_def_id());\n                     suggestions.extend(self.lookup_import_candidates_from_module(\n                         lookup_ident,"}, {"sha": "33d02db186ae55382e783bf3056e8d6154646eb2", "filename": "compiler/rustc_resolve/src/effective_visibilities.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2cd36f2c8902544371cfb6547be46842a8e7e314/compiler%2Frustc_resolve%2Fsrc%2Feffective_visibilities.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cd36f2c8902544371cfb6547be46842a8e7e314/compiler%2Frustc_resolve%2Fsrc%2Feffective_visibilities.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Feffective_visibilities.rs?ref=2cd36f2c8902544371cfb6547be46842a8e7e314", "patch": "@@ -107,7 +107,7 @@ impl<'r, 'a> EffectiveVisibilitiesVisitor<'r, 'a> {\n                 r.effective_visibilities.update_eff_vis(\n                     r.local_def_id(node_id),\n                     eff_vis,\n-                    ResolverTree(&r.definitions, r.crate_loader.cstore()),\n+                    ResolverTree(&r.definitions, &r.cstore),\n                 )\n             }\n         }"}, {"sha": "d43983ea8150faf15db202c7b8a242a770c81c97", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2cd36f2c8902544371cfb6547be46842a8e7e314/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cd36f2c8902544371cfb6547be46842a8e7e314/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=2cd36f2c8902544371cfb6547be46842a8e7e314", "patch": "@@ -1663,8 +1663,10 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                         if !module.no_implicit_prelude {\n                             let extern_prelude = self.r.extern_prelude.clone();\n                             names.extend(extern_prelude.iter().flat_map(|(ident, _)| {\n-                                self.r.crate_loader.maybe_process_path_extern(ident.name).and_then(\n-                                    |crate_id| {\n+                                self.r\n+                                    .crate_loader()\n+                                    .maybe_process_path_extern(ident.name)\n+                                    .and_then(|crate_id| {\n                                         let crate_mod =\n                                             Res::Def(DefKind::Mod, crate_id.as_def_id());\n \n@@ -1673,8 +1675,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                                         } else {\n                                             None\n                                         }\n-                                    },\n-                                )\n+                                    })\n                             }));\n \n                             if let Some(prelude) = self.r.prelude {"}, {"sha": "2154017fcb3f92489dbf1d0a904d8e4cdc70932b", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 24, "deletions": 12, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/2cd36f2c8902544371cfb6547be46842a8e7e314/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cd36f2c8902544371cfb6547be46842a8e7e314/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=2cd36f2c8902544371cfb6547be46842a8e7e314", "patch": "@@ -954,7 +954,10 @@ pub struct Resolver<'a> {\n     arenas: &'a ResolverArenas<'a>,\n     dummy_binding: &'a NameBinding<'a>,\n \n-    crate_loader: CrateLoader<'a>,\n+    local_crate_name: Symbol,\n+    metadata_loader: Box<MetadataLoaderDyn>,\n+    cstore: CStore,\n+    used_extern_options: FxHashSet<Symbol>,\n     macro_names: FxHashSet<Ident>,\n     builtin_macros: FxHashMap<Symbol, BuiltinMacroState>,\n     /// A small map keeping true kinds of built-in macros that appear to be fn-like on\n@@ -1129,7 +1132,7 @@ impl DefIdTree for ResolverTree<'_> {\n impl<'a, 'b> DefIdTree for &'a Resolver<'b> {\n     #[inline]\n     fn opt_parent(self, id: DefId) -> Option<DefId> {\n-        ResolverTree(&self.definitions, self.cstore()).opt_parent(id)\n+        ResolverTree(&self.definitions, &self.cstore).opt_parent(id)\n     }\n }\n \n@@ -1311,7 +1314,10 @@ impl<'a> Resolver<'a> {\n                 vis: ty::Visibility::Public,\n             }),\n \n-            crate_loader: CrateLoader::new(session, metadata_loader, crate_name),\n+            metadata_loader,\n+            local_crate_name: crate_name,\n+            used_extern_options: Default::default(),\n+            cstore: CStore::new(session),\n             macro_names: FxHashSet::default(),\n             builtin_macros: Default::default(),\n             builtin_macro_kinds: Default::default(),\n@@ -1403,7 +1409,7 @@ impl<'a> Resolver<'a> {\n     pub fn into_outputs(self) -> ResolverOutputs {\n         let proc_macros = self.proc_macros.iter().map(|id| self.local_def_id(*id)).collect();\n         let definitions = self.definitions;\n-        let cstore = Box::new(self.crate_loader.into_cstore());\n+        let cstore = Box::new(self.cstore);\n         let source_span = self.source_span;\n         let expn_that_defined = self.expn_that_defined;\n         let visibilities = self.visibilities;\n@@ -1501,16 +1507,22 @@ impl<'a> Resolver<'a> {\n     }\n \n     fn create_stable_hashing_context(&self) -> StableHashingContext<'_> {\n-        StableHashingContext::new(\n-            self.session,\n+        StableHashingContext::new(self.session, &self.definitions, &self.cstore, &self.source_span)\n+    }\n+\n+    pub fn crate_loader(&mut self) -> CrateLoader<'_> {\n+        CrateLoader::new(\n+            &self.session,\n+            &*self.metadata_loader,\n+            self.local_crate_name,\n+            &mut self.cstore,\n             &self.definitions,\n-            self.crate_loader.cstore(),\n-            &self.source_span,\n+            &mut self.used_extern_options,\n         )\n     }\n \n     pub fn cstore(&self) -> &CStore {\n-        self.crate_loader.cstore()\n+        &self.cstore\n     }\n \n     fn dummy_ext(&self, macro_kind: MacroKind) -> Lrc<SyntaxExtension> {\n@@ -1553,7 +1565,7 @@ impl<'a> Resolver<'a> {\n             self.session.time(\"resolve_main\", || self.resolve_main());\n             self.session.time(\"resolve_check_unused\", || self.check_unused(krate));\n             self.session.time(\"resolve_report_errors\", || self.report_errors(krate));\n-            self.session.time(\"resolve_postprocess\", || self.crate_loader.postprocess(krate));\n+            self.session.time(\"resolve_postprocess\", || self.crate_loader().postprocess(krate));\n         });\n     }\n \n@@ -1871,10 +1883,10 @@ impl<'a> Resolver<'a> {\n             } else {\n                 let crate_id = if finalize {\n                     let Some(crate_id) =\n-                        self.crate_loader.process_path_extern(ident.name, ident.span) else { return Some(self.dummy_binding); };\n+                        self.crate_loader().process_path_extern(ident.name, ident.span) else { return Some(self.dummy_binding); };\n                     crate_id\n                 } else {\n-                    self.crate_loader.maybe_process_path_extern(ident.name)?\n+                    self.crate_loader().maybe_process_path_extern(ident.name)?\n                 };\n                 let crate_root = self.expect_module(crate_id.as_def_id());\n                 let vis = ty::Visibility::<LocalDefId>::Public;"}, {"sha": "32f66ef92c31a8a65d20c50c7824f0a0faa6ec6b", "filename": "compiler/rustc_resolve/src/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2cd36f2c8902544371cfb6547be46842a8e7e314/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cd36f2c8902544371cfb6547be46842a8e7e314/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs?ref=2cd36f2c8902544371cfb6547be46842a8e7e314", "patch": "@@ -455,7 +455,7 @@ impl<'a> ResolverExpand for Resolver<'a> {\n     }\n \n     fn get_proc_macro_quoted_span(&self, krate: CrateNum, id: usize) -> Span {\n-        self.crate_loader.cstore().get_proc_macro_quoted_span_untracked(krate, id, self.session)\n+        self.cstore.get_proc_macro_quoted_span_untracked(krate, id, self.session)\n     }\n \n     fn declare_proc_macro(&mut self, id: NodeId) {"}]}