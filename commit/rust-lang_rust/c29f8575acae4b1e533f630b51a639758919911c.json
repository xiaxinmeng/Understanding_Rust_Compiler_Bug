{"sha": "c29f8575acae4b1e533f630b51a639758919911c", "node_id": "C_kwDOAAsO6NoAKGMyOWY4NTc1YWNhZTRiMWU1MzNmNjMwYjUxYTYzOTc1ODkxOTkxMWM", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2022-05-07T13:23:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-05-07T13:23:44Z"}, "message": "Rollup merge of #96581 - RalfJung:debug-size-align, r=oli-obk\n\nmake Size and Align debug-printing a bit more compact\n\nIn particular in `{:#?}`-mode, these take up a lot of space, so I think this is the better alternative (even though it is a bit longer in `{:?}` mode, I think it is still more readable).\n\nWe could make it even smaller by deviating further from what the actual code looks like, e.g. via something like `Size(4 bytes)`. Not sure what people would think about that?\n\nCc `````@oli-obk`````", "tree": {"sha": "0069dcecc6f47d711990fa5b67ec039dedd56478", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0069dcecc6f47d711990fa5b67ec039dedd56478"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c29f8575acae4b1e533f630b51a639758919911c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJidnLgCRBK7hj4Ov3rIwAAVl4IAB1ACZnrZeXNREaAKyUC2vg7\nmuR44VSYly5/r3WhxE9xj4Guyp4V7GQFYOCoQPzU1hb4cevn2SKIeNCrJaobW4A3\n7LXOCY3zUFOQsmT+uTt34ri1sJeiAq7QOmk4/sy6v3seCMFrIoQitA6ZOgYp3ZVX\nhUFkuupB0YZwrBfd1LBjTq38ne7v4iaH5J+y0xiuaR6G5ScaqwdRukKeYB1C+QZ9\nfM162wPA826QgXsVTrKJP/HmyB1qvXqCF7IYUEgjkwXXq/bZV+FYO5S5FDrI9K1c\nfujyKi1QZntG9CvrhjVamu0nR9mE3fUTi22Qj2Rkfrb+VhNNjfnGDvQb2PATL1M=\n=oIh5\n-----END PGP SIGNATURE-----\n", "payload": "tree 0069dcecc6f47d711990fa5b67ec039dedd56478\nparent 613920562215286a84dae65e63b7aff7061f7cdd\nparent d4557529704e0ec6956bb1fadf666abe9b1a9a61\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1651929824 +0200\ncommitter GitHub <noreply@github.com> 1651929824 +0200\n\nRollup merge of #96581 - RalfJung:debug-size-align, r=oli-obk\n\nmake Size and Align debug-printing a bit more compact\n\nIn particular in `{:#?}`-mode, these take up a lot of space, so I think this is the better alternative (even though it is a bit longer in `{:?}` mode, I think it is still more readable).\n\nWe could make it even smaller by deviating further from what the actual code looks like, e.g. via something like `Size(4 bytes)`. Not sure what people would think about that?\n\nCc `````@oli-obk`````\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c29f8575acae4b1e533f630b51a639758919911c", "html_url": "https://github.com/rust-lang/rust/commit/c29f8575acae4b1e533f630b51a639758919911c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c29f8575acae4b1e533f630b51a639758919911c/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "613920562215286a84dae65e63b7aff7061f7cdd", "url": "https://api.github.com/repos/rust-lang/rust/commits/613920562215286a84dae65e63b7aff7061f7cdd", "html_url": "https://github.com/rust-lang/rust/commit/613920562215286a84dae65e63b7aff7061f7cdd"}, {"sha": "d4557529704e0ec6956bb1fadf666abe9b1a9a61", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4557529704e0ec6956bb1fadf666abe9b1a9a61", "html_url": "https://github.com/rust-lang/rust/commit/d4557529704e0ec6956bb1fadf666abe9b1a9a61"}], "stats": {"total": 799, "additions": 244, "deletions": 555}, "files": [{"sha": "8111409b8bc0eef45854b76ae6eaa07cfa498bfb", "filename": "compiler/rustc_middle/src/mir/pretty.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c29f8575acae4b1e533f630b51a639758919911c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c29f8575acae4b1e533f630b51a639758919911c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs?ref=c29f8575acae4b1e533f630b51a639758919911c", "patch": "@@ -448,6 +448,12 @@ impl<'tcx> Visitor<'tcx> for ExtraComments<'tcx> {\n                 self.push(&format!(\"+ user_ty: {:?}\", user_ty));\n             }\n \n+            let fmt_val = |val: &ConstValue<'tcx>| match val {\n+                ConstValue::Scalar(s) => format!(\"Scalar({:?})\", s),\n+                ConstValue::Slice { .. } => format!(\"Slice(..)\"),\n+                ConstValue::ByRef { .. } => format!(\"ByRef(..)\"),\n+            };\n+\n             let val = match literal {\n                 ConstantKind::Ty(ct) => match ct.val() {\n                     ty::ConstKind::Param(p) => format!(\"Param({})\", p),\n@@ -457,7 +463,7 @@ impl<'tcx> Visitor<'tcx> for ExtraComments<'tcx> {\n                         uv.substs,\n                         uv.promoted,\n                     ),\n-                    ty::ConstKind::Value(val) => format!(\"Value({:?})\", val),\n+                    ty::ConstKind::Value(val) => format!(\"Value({})\", fmt_val(&val)),\n                     ty::ConstKind::Error(_) => \"Error\".to_string(),\n                     // These variants shouldn't exist in the MIR.\n                     ty::ConstKind::Placeholder(_)\n@@ -467,7 +473,7 @@ impl<'tcx> Visitor<'tcx> for ExtraComments<'tcx> {\n                 // To keep the diffs small, we render this like we render `ty::Const::Value`.\n                 //\n                 // This changes once `ty::Const::Value` is represented using valtrees.\n-                ConstantKind::Val(val, _) => format!(\"Value({:?})\", val),\n+                ConstantKind::Val(val, _) => format!(\"Value({})\", fmt_val(&val)),\n             };\n \n             self.push(&format!(\"+ literal: Const {{ ty: {}, val: {} }}\", literal.ty(), val));"}, {"sha": "a2cd3c4c46816e44ef715038e9f94994e678551e", "filename": "compiler/rustc_target/src/abi/mod.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c29f8575acae4b1e533f630b51a639758919911c/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c29f8575acae4b1e533f630b51a639758919911c/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs?ref=c29f8575acae4b1e533f630b51a639758919911c", "patch": "@@ -276,12 +276,19 @@ impl ToJson for Endian {\n }\n \n /// Size of a type in bytes.\n-#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, Encodable, Decodable)]\n+#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Encodable, Decodable)]\n #[derive(HashStable_Generic)]\n pub struct Size {\n     raw: u64,\n }\n \n+// This is debug-printed a lot in larger structs, don't waste too much space there\n+impl fmt::Debug for Size {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        write!(f, \"Size({} bytes)\", self.bytes())\n+    }\n+}\n+\n impl Size {\n     pub const ZERO: Size = Size { raw: 0 };\n \n@@ -485,12 +492,19 @@ impl Step for Size {\n }\n \n /// Alignment of a type in bytes (always a power of two).\n-#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, Encodable, Decodable)]\n+#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Encodable, Decodable)]\n #[derive(HashStable_Generic)]\n pub struct Align {\n     pow2: u8,\n }\n \n+// This is debug-printed a lot in larger structs, don't waste too much space there\n+impl fmt::Debug for Align {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        write!(f, \"Align({} bytes)\", self.bytes())\n+    }\n+}\n+\n impl Align {\n     pub const ONE: Align = Align { pow2: 0 };\n "}, {"sha": "bbde6ad4b637d433097c4548b551e4fde3f2db88", "filename": "src/test/mir-opt/const_debuginfo.main.ConstDebugInfo.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c29f8575acae4b1e533f630b51a639758919911c/src%2Ftest%2Fmir-opt%2Fconst_debuginfo.main.ConstDebugInfo.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c29f8575acae4b1e533f630b51a639758919911c/src%2Ftest%2Fmir-opt%2Fconst_debuginfo.main.ConstDebugInfo.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_debuginfo.main.ConstDebugInfo.diff?ref=c29f8575acae4b1e533f630b51a639758919911c", "patch": "@@ -77,7 +77,7 @@\n           _9 = const \"hello, world!\";      // scope 4 at $DIR/const_debuginfo.rs:14:13: 14:28\n                                            // mir::Constant\n                                            // + span: $DIR/const_debuginfo.rs:14:13: 14:28\n-                                           // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [104, 101, 108, 108, 111, 44, 32, 119, 111, 114, 108, 100, 33], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [8191], len: Size { raw: 13 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 13 }) }\n+                                           // + literal: Const { ty: &str, val: Value(Slice(..)) }\n           StorageLive(_10);                // scope 5 at $DIR/const_debuginfo.rs:16:9: 16:10\n           Deinit(_10);                     // scope 5 at $DIR/const_debuginfo.rs:16:13: 16:34\n           (_10.0: bool) = const true;      // scope 5 at $DIR/const_debuginfo.rs:16:13: 16:34"}, {"sha": "cb4273ba6bd6e1e3660c52ae8f3751b18a08df9f", "filename": "src/test/mir-opt/const_prop/control_flow_simplification.hello.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c29f8575acae4b1e533f630b51a639758919911c/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.hello.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c29f8575acae4b1e533f630b51a639758919911c/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.hello.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fcontrol_flow_simplification.hello.ConstProp.diff?ref=c29f8575acae4b1e533f630b51a639758919911c", "patch": "@@ -22,7 +22,7 @@\n                                            // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(Scalar(<ZST>)) }\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/std/src/panic.rs:LL:COL\n-                                           // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [101, 120, 112, 108, 105, 99, 105, 116, 32, 112, 97, 110, 105, 99], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [16383], len: Size { raw: 14 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 14 }) }\n+                                           // + literal: Const { ty: &str, val: Value(Slice(..)) }\n       }\n   \n       bb2: {"}, {"sha": "31719b435d694533512cecb8c10084bc4876d901", "filename": "src/test/mir-opt/inline/inline_diverging.g.Inline.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c29f8575acae4b1e533f630b51a639758919911c/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.g.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c29f8575acae4b1e533f630b51a639758919911c/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.g.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.g.Inline.diff?ref=c29f8575acae4b1e533f630b51a639758919911c", "patch": "@@ -43,7 +43,7 @@\n +                                          // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(Scalar(<ZST>)) }\n +                                          // mir::Constant\n +                                          // + span: $SRC_DIR/std/src/panic.rs:LL:COL\n-+                                          // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [101, 120, 112, 108, 105, 99, 105, 116, 32, 112, 97, 110, 105, 99], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [16383], len: Size { raw: 14 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 14 }) }\n++                                          // + literal: Const { ty: &str, val: Value(Slice(..)) }\n       }\n   }\n   "}, {"sha": "c19cbe3e5b0dfe75b126c0cbcbab316f9833fef9", "filename": "src/test/mir-opt/inline/inline_into_box_place.main.Inline.32bit.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c29f8575acae4b1e533f630b51a639758919911c/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c29f8575acae4b1e533f630b51a639758919911c/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.32bit.diff?ref=c29f8575acae4b1e533f630b51a639758919911c", "patch": "@@ -46,7 +46,7 @@\n -     bb2: {\n +                                          // + span: $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n +                                          // + user_ty: UserType(0)\n-+                                          // + literal: Const { ty: alloc::raw_vec::RawVec<u32>, val: Value(ByRef { alloc: Allocation { bytes: [4, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, align: Align { pow2: 2 }, mutability: Not, extra: () }, offset: Size { raw: 0 } }) }\n++                                          // + literal: Const { ty: alloc::raw_vec::RawVec<u32>, val: Value(ByRef(..)) }\n +         Deinit((*_7));                   // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n +         ((*_7).0: alloc::raw_vec::RawVec<u32>) = move _8; // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n +         ((*_7).1: usize) = const 0_usize; // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL"}, {"sha": "c19cbe3e5b0dfe75b126c0cbcbab316f9833fef9", "filename": "src/test/mir-opt/inline/inline_into_box_place.main.Inline.64bit.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c29f8575acae4b1e533f630b51a639758919911c/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c29f8575acae4b1e533f630b51a639758919911c/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.64bit.diff?ref=c29f8575acae4b1e533f630b51a639758919911c", "patch": "@@ -46,7 +46,7 @@\n -     bb2: {\n +                                          // + span: $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n +                                          // + user_ty: UserType(0)\n-+                                          // + literal: Const { ty: alloc::raw_vec::RawVec<u32>, val: Value(ByRef { alloc: Allocation { bytes: [4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [65535], len: Size { raw: 16 } }, align: Align { pow2: 3 }, mutability: Not, extra: () }, offset: Size { raw: 0 } }) }\n++                                          // + literal: Const { ty: alloc::raw_vec::RawVec<u32>, val: Value(ByRef(..)) }\n +         Deinit((*_7));                   // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n +         ((*_7).0: alloc::raw_vec::RawVec<u32>) = move _8; // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n +         ((*_7).1: usize) = const 0_usize; // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL"}, {"sha": "f9e11439dd9d2870d82aaf7bb34a06aae5cfd037", "filename": "src/test/mir-opt/issue_76432.test.SimplifyComparisonIntegral.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c29f8575acae4b1e533f630b51a639758919911c/src%2Ftest%2Fmir-opt%2Fissue_76432.test.SimplifyComparisonIntegral.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c29f8575acae4b1e533f630b51a639758919911c/src%2Ftest%2Fmir-opt%2Fissue_76432.test.SimplifyComparisonIntegral.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_76432.test.SimplifyComparisonIntegral.diff?ref=c29f8575acae4b1e533f630b51a639758919911c", "patch": "@@ -73,7 +73,7 @@\n                                            // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(Scalar(<ZST>)) }\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/panic.rs:LL:COL\n-                                           // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [105, 110, 116, 101, 114, 110, 97, 108, 32, 101, 114, 114, 111, 114, 58, 32, 101, 110, 116, 101, 114, 101, 100, 32, 117, 110, 114, 101, 97, 99, 104, 97, 98, 108, 101, 32, 99, 111, 100, 101], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1099511627775], len: Size { raw: 40 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 40 }) }\n+                                           // + literal: Const { ty: &str, val: Value(Slice(..)) }\n       }\n   \n       bb2: {"}, {"sha": "a6174174849784283abac47bb0097b5aab987846", "filename": "src/test/mir-opt/issues/issue_59352.num_to_digit.PreCodegen.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c29f8575acae4b1e533f630b51a639758919911c/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_59352.num_to_digit.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/c29f8575acae4b1e533f630b51a639758919911c/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_59352.num_to_digit.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_59352.num_to_digit.PreCodegen.after.mir?ref=c29f8575acae4b1e533f630b51a639758919911c", "patch": "@@ -92,7 +92,7 @@ fn num_to_digit(_1: char) -> u32 {\n                                          // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(Scalar(<ZST>)) }\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/core/src/option.rs:LL:COL\n-                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [99, 97, 108, 108, 101, 100, 32, 96, 79, 112, 116, 105, 111, 110, 58, 58, 117, 110, 119, 114, 97, 112, 40, 41, 96, 32, 111, 110, 32, 97, 32, 96, 78, 111, 110, 101, 96, 32, 118, 97, 108, 117, 101], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [8796093022207], len: Size { raw: 43 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 43 }) }\n+                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }\n     }\n \n     bb7: {"}, {"sha": "2044d34a3db7bcc3ab8b31a8f9478077c23223f3", "filename": "src/test/mir-opt/no_drop_for_inactive_variant.unwrap.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c29f8575acae4b1e533f630b51a639758919911c/src%2Ftest%2Fmir-opt%2Fno_drop_for_inactive_variant.unwrap.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/c29f8575acae4b1e533f630b51a639758919911c/src%2Ftest%2Fmir-opt%2Fno_drop_for_inactive_variant.unwrap.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fno_drop_for_inactive_variant.unwrap.SimplifyCfg-elaborate-drops.after.mir?ref=c29f8575acae4b1e533f630b51a639758919911c", "patch": "@@ -26,7 +26,7 @@ fn unwrap(_1: Option<T>) -> T {\n                                          // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(Scalar(<ZST>)) }\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/std/src/panic.rs:LL:COL\n-                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [101, 120, 112, 108, 105, 99, 105, 116, 32, 112, 97, 110, 105, 99], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [16383], len: Size { raw: 14 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 14 }) }\n+                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }\n     }\n \n     bb2: {"}, {"sha": "bdab2d9322210db104bacb941d25d6ead927f924", "filename": "src/test/mir-opt/no_spurious_drop_after_call.main.ElaborateDrops.before.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c29f8575acae4b1e533f630b51a639758919911c/src%2Ftest%2Fmir-opt%2Fno_spurious_drop_after_call.main.ElaborateDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/c29f8575acae4b1e533f630b51a639758919911c/src%2Ftest%2Fmir-opt%2Fno_spurious_drop_after_call.main.ElaborateDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fno_spurious_drop_after_call.main.ElaborateDrops.before.mir?ref=c29f8575acae4b1e533f630b51a639758919911c", "patch": "@@ -15,7 +15,7 @@ fn main() -> () {\n         _4 = const \"\";                   // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:20: 9:22\n                                          // mir::Constant\n                                          // + span: $DIR/no-spurious-drop-after-call.rs:9:20: 9:22\n-                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [], len: Size { raw: 0 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 0 }) }\n+                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }\n         _3 = &(*_4);                     // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:20: 9:34\n         _2 = <str as ToString>::to_string(move _3) -> bb1; // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:20: 9:34\n                                          // mir::Constant"}, {"sha": "e0875ab0069e761263807a3c30e460ee9567bc5d", "filename": "src/test/mir-opt/storage_live_dead_in_statics.XXX.mir_map.0.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c29f8575acae4b1e533f630b51a639758919911c/src%2Ftest%2Fmir-opt%2Fstorage_live_dead_in_statics.XXX.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/c29f8575acae4b1e533f630b51a639758919911c/src%2Ftest%2Fmir-opt%2Fstorage_live_dead_in_statics.XXX.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fstorage_live_dead_in_statics.XXX.mir_map.0.mir?ref=c29f8575acae4b1e533f630b51a639758919911c", "patch": "@@ -192,7 +192,7 @@ static XXX: &Foo = {\n         _2 = Foo { tup: const \"hi\", data: move _3 }; // scope 0 at $DIR/storage_live_dead_in_statics.rs:5:29: 23:2\n                                          // mir::Constant\n                                          // + span: $DIR/storage_live_dead_in_statics.rs:6:10: 6:14\n-                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [104, 105], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [3], len: Size { raw: 2 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 2 }) }\n+                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }\n         StorageDead(_3);                 // scope 0 at $DIR/storage_live_dead_in_statics.rs:23:1: 23:2\n         _1 = &_2;                        // scope 0 at $DIR/storage_live_dead_in_statics.rs:5:28: 23:2\n         _0 = &(*_1);                     // scope 0 at $DIR/storage_live_dead_in_statics.rs:5:28: 23:2"}, {"sha": "16fd328b6f966926de046b3e527fb97b5bdd7768", "filename": "src/test/mir-opt/uninhabited_enum_branching.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c29f8575acae4b1e533f630b51a639758919911c/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/c29f8575acae4b1e533f630b51a639758919911c/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir?ref=c29f8575acae4b1e533f630b51a639758919911c", "patch": "@@ -22,7 +22,7 @@ fn main() -> () {\n         _5 = const \"C\";                  // scope 0 at $DIR/uninhabited_enum_branching.rs:23:21: 23:24\n                                          // mir::Constant\n                                          // + span: $DIR/uninhabited_enum_branching.rs:23:21: 23:24\n-                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [67], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }\n+                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }\n         _1 = &(*_5);                     // scope 0 at $DIR/uninhabited_enum_branching.rs:23:21: 23:24\n         StorageDead(_5);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:23:23: 23:24\n         StorageDead(_2);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:24:6: 24:7\n@@ -40,7 +40,7 @@ fn main() -> () {\n         _9 = const \"E\";                  // scope 0 at $DIR/uninhabited_enum_branching.rs:28:21: 28:24\n                                          // mir::Constant\n                                          // + span: $DIR/uninhabited_enum_branching.rs:28:21: 28:24\n-                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [69], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }\n+                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }\n         _6 = &(*_9);                     // scope 0 at $DIR/uninhabited_enum_branching.rs:28:21: 28:24\n         StorageDead(_9);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:28:23: 28:24\n         goto -> bb3;                     // scope 0 at $DIR/uninhabited_enum_branching.rs:28:23: 28:24\n@@ -50,7 +50,7 @@ fn main() -> () {\n         _6 = const \"D\";                  // scope 0 at $DIR/uninhabited_enum_branching.rs:27:21: 27:24\n                                          // mir::Constant\n                                          // + span: $DIR/uninhabited_enum_branching.rs:27:21: 27:24\n-                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [68], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }\n+                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }\n         goto -> bb3;                     // scope 0 at $DIR/uninhabited_enum_branching.rs:27:21: 27:24\n     }\n "}, {"sha": "c499e5c59dbeb3ec4c55e36120911e175808be18", "filename": "src/test/mir-opt/uninhabited_enum_branching.main.UninhabitedEnumBranching.diff", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c29f8575acae4b1e533f630b51a639758919911c/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching.main.UninhabitedEnumBranching.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c29f8575acae4b1e533f630b51a639758919911c/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching.main.UninhabitedEnumBranching.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching.main.UninhabitedEnumBranching.diff?ref=c29f8575acae4b1e533f630b51a639758919911c", "patch": "@@ -28,7 +28,7 @@\n           _5 = const \"C\";                  // scope 0 at $DIR/uninhabited_enum_branching.rs:23:21: 23:24\n                                            // mir::Constant\n                                            // + span: $DIR/uninhabited_enum_branching.rs:23:21: 23:24\n-                                           // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [67], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }\n+                                           // + literal: Const { ty: &str, val: Value(Slice(..)) }\n           _1 = &(*_5);                     // scope 0 at $DIR/uninhabited_enum_branching.rs:23:21: 23:24\n           StorageDead(_5);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:23:23: 23:24\n           goto -> bb4;                     // scope 0 at $DIR/uninhabited_enum_branching.rs:23:23: 23:24\n@@ -38,7 +38,7 @@\n           _1 = const \"A(Empty)\";           // scope 0 at $DIR/uninhabited_enum_branching.rs:21:24: 21:34\n                                            // mir::Constant\n                                            // + span: $DIR/uninhabited_enum_branching.rs:21:24: 21:34\n-                                           // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [65, 40, 69, 109, 112, 116, 121, 41], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 8 }) }\n+                                           // + literal: Const { ty: &str, val: Value(Slice(..)) }\n           goto -> bb4;                     // scope 0 at $DIR/uninhabited_enum_branching.rs:21:24: 21:34\n       }\n   \n@@ -47,7 +47,7 @@\n           _4 = const \"B(Empty)\";           // scope 0 at $DIR/uninhabited_enum_branching.rs:22:24: 22:34\n                                            // mir::Constant\n                                            // + span: $DIR/uninhabited_enum_branching.rs:22:24: 22:34\n-                                           // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [66, 40, 69, 109, 112, 116, 121, 41], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 8 }) }\n+                                           // + literal: Const { ty: &str, val: Value(Slice(..)) }\n           _1 = &(*_4);                     // scope 0 at $DIR/uninhabited_enum_branching.rs:22:24: 22:34\n           StorageDead(_4);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:22:33: 22:34\n           goto -> bb4;                     // scope 0 at $DIR/uninhabited_enum_branching.rs:22:33: 22:34\n@@ -69,7 +69,7 @@\n           _9 = const \"E\";                  // scope 0 at $DIR/uninhabited_enum_branching.rs:28:21: 28:24\n                                            // mir::Constant\n                                            // + span: $DIR/uninhabited_enum_branching.rs:28:21: 28:24\n-                                           // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [69], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }\n+                                           // + literal: Const { ty: &str, val: Value(Slice(..)) }\n           _6 = &(*_9);                     // scope 0 at $DIR/uninhabited_enum_branching.rs:28:21: 28:24\n           StorageDead(_9);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:28:23: 28:24\n           goto -> bb7;                     // scope 0 at $DIR/uninhabited_enum_branching.rs:28:23: 28:24\n@@ -79,7 +79,7 @@\n           _6 = const \"D\";                  // scope 0 at $DIR/uninhabited_enum_branching.rs:27:21: 27:24\n                                            // mir::Constant\n                                            // + span: $DIR/uninhabited_enum_branching.rs:27:21: 27:24\n-                                           // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [68], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }\n+                                           // + literal: Const { ty: &str, val: Value(Slice(..)) }\n           goto -> bb7;                     // scope 0 at $DIR/uninhabited_enum_branching.rs:27:21: 27:24\n       }\n   "}, {"sha": "77951bc8d7b6779ac446249dd946b0e287852264", "filename": "src/test/mir-opt/uninhabited_enum_branching2.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c29f8575acae4b1e533f630b51a639758919911c/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching2.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/c29f8575acae4b1e533f630b51a639758919911c/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching2.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching2.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir?ref=c29f8575acae4b1e533f630b51a639758919911c", "patch": "@@ -40,7 +40,7 @@ fn main() -> () {\n         _8 = const \"D\";                  // scope 1 at $DIR/uninhabited_enum_branching2.rs:25:21: 25:24\n                                          // mir::Constant\n                                          // + span: $DIR/uninhabited_enum_branching2.rs:25:21: 25:24\n-                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [68], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }\n+                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }\n         _3 = &(*_8);                     // scope 1 at $DIR/uninhabited_enum_branching2.rs:25:21: 25:24\n         StorageDead(_8);                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:25:23: 25:24\n         goto -> bb3;                     // scope 1 at $DIR/uninhabited_enum_branching2.rs:25:23: 25:24\n@@ -51,7 +51,7 @@ fn main() -> () {\n         _7 = const \"C\";                  // scope 1 at $DIR/uninhabited_enum_branching2.rs:24:21: 24:24\n                                          // mir::Constant\n                                          // + span: $DIR/uninhabited_enum_branching2.rs:24:21: 24:24\n-                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [67], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }\n+                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }\n         _3 = &(*_7);                     // scope 1 at $DIR/uninhabited_enum_branching2.rs:24:21: 24:24\n         StorageDead(_7);                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:24:23: 24:24\n         goto -> bb3;                     // scope 1 at $DIR/uninhabited_enum_branching2.rs:24:23: 24:24\n@@ -70,7 +70,7 @@ fn main() -> () {\n         _13 = const \"D\";                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:32:21: 32:24\n                                          // mir::Constant\n                                          // + span: $DIR/uninhabited_enum_branching2.rs:32:21: 32:24\n-                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [68], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }\n+                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }\n         _9 = &(*_13);                    // scope 1 at $DIR/uninhabited_enum_branching2.rs:32:21: 32:24\n         StorageDead(_13);                // scope 1 at $DIR/uninhabited_enum_branching2.rs:32:23: 32:24\n         goto -> bb6;                     // scope 1 at $DIR/uninhabited_enum_branching2.rs:32:23: 32:24\n@@ -81,7 +81,7 @@ fn main() -> () {\n         _12 = const \"C\";                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:31:21: 31:24\n                                          // mir::Constant\n                                          // + span: $DIR/uninhabited_enum_branching2.rs:31:21: 31:24\n-                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [67], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }\n+                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }\n         _9 = &(*_12);                    // scope 1 at $DIR/uninhabited_enum_branching2.rs:31:21: 31:24\n         StorageDead(_12);                // scope 1 at $DIR/uninhabited_enum_branching2.rs:31:23: 31:24\n         goto -> bb6;                     // scope 1 at $DIR/uninhabited_enum_branching2.rs:31:23: 31:24"}, {"sha": "1b06c730cdab6139636ee29e7607129f8c822390", "filename": "src/test/mir-opt/uninhabited_enum_branching2.main.UninhabitedEnumBranching.diff", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c29f8575acae4b1e533f630b51a639758919911c/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching2.main.UninhabitedEnumBranching.diff", "raw_url": "https://github.com/rust-lang/rust/raw/c29f8575acae4b1e533f630b51a639758919911c/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching2.main.UninhabitedEnumBranching.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching2.main.UninhabitedEnumBranching.diff?ref=c29f8575acae4b1e533f630b51a639758919911c", "patch": "@@ -42,7 +42,7 @@\n           _8 = const \"D\";                  // scope 1 at $DIR/uninhabited_enum_branching2.rs:25:21: 25:24\n                                            // mir::Constant\n                                            // + span: $DIR/uninhabited_enum_branching2.rs:25:21: 25:24\n-                                           // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [68], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }\n+                                           // + literal: Const { ty: &str, val: Value(Slice(..)) }\n           _3 = &(*_8);                     // scope 1 at $DIR/uninhabited_enum_branching2.rs:25:21: 25:24\n           StorageDead(_8);                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:25:23: 25:24\n           goto -> bb5;                     // scope 1 at $DIR/uninhabited_enum_branching2.rs:25:23: 25:24\n@@ -52,7 +52,7 @@\n           _3 = const \"A(Empty)\";           // scope 1 at $DIR/uninhabited_enum_branching2.rs:22:24: 22:34\n                                            // mir::Constant\n                                            // + span: $DIR/uninhabited_enum_branching2.rs:22:24: 22:34\n-                                           // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [65, 40, 69, 109, 112, 116, 121, 41], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 8 }) }\n+                                           // + literal: Const { ty: &str, val: Value(Slice(..)) }\n           goto -> bb5;                     // scope 1 at $DIR/uninhabited_enum_branching2.rs:22:24: 22:34\n       }\n   \n@@ -61,7 +61,7 @@\n           _6 = const \"B(Empty)\";           // scope 1 at $DIR/uninhabited_enum_branching2.rs:23:24: 23:34\n                                            // mir::Constant\n                                            // + span: $DIR/uninhabited_enum_branching2.rs:23:24: 23:34\n-                                           // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [66, 40, 69, 109, 112, 116, 121, 41], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 8 }) }\n+                                           // + literal: Const { ty: &str, val: Value(Slice(..)) }\n           _3 = &(*_6);                     // scope 1 at $DIR/uninhabited_enum_branching2.rs:23:24: 23:34\n           StorageDead(_6);                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:23:33: 23:34\n           goto -> bb5;                     // scope 1 at $DIR/uninhabited_enum_branching2.rs:23:33: 23:34\n@@ -72,7 +72,7 @@\n           _7 = const \"C\";                  // scope 1 at $DIR/uninhabited_enum_branching2.rs:24:21: 24:24\n                                            // mir::Constant\n                                            // + span: $DIR/uninhabited_enum_branching2.rs:24:21: 24:24\n-                                           // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [67], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }\n+                                           // + literal: Const { ty: &str, val: Value(Slice(..)) }\n           _3 = &(*_7);                     // scope 1 at $DIR/uninhabited_enum_branching2.rs:24:21: 24:24\n           StorageDead(_7);                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:24:23: 24:24\n           goto -> bb5;                     // scope 1 at $DIR/uninhabited_enum_branching2.rs:24:23: 24:24\n@@ -92,7 +92,7 @@\n           _13 = const \"D\";                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:32:21: 32:24\n                                            // mir::Constant\n                                            // + span: $DIR/uninhabited_enum_branching2.rs:32:21: 32:24\n-                                           // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [68], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }\n+                                           // + literal: Const { ty: &str, val: Value(Slice(..)) }\n           _9 = &(*_13);                    // scope 1 at $DIR/uninhabited_enum_branching2.rs:32:21: 32:24\n           StorageDead(_13);                // scope 1 at $DIR/uninhabited_enum_branching2.rs:32:23: 32:24\n           goto -> bb10;                    // scope 1 at $DIR/uninhabited_enum_branching2.rs:32:23: 32:24\n@@ -102,7 +102,7 @@\n           _9 = const \"A(Empty)\";           // scope 1 at $DIR/uninhabited_enum_branching2.rs:29:24: 29:34\n                                            // mir::Constant\n                                            // + span: $DIR/uninhabited_enum_branching2.rs:29:24: 29:34\n-                                           // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [65, 40, 69, 109, 112, 116, 121, 41], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 8 }) }\n+                                           // + literal: Const { ty: &str, val: Value(Slice(..)) }\n           goto -> bb10;                    // scope 1 at $DIR/uninhabited_enum_branching2.rs:29:24: 29:34\n       }\n   \n@@ -111,7 +111,7 @@\n           _11 = const \"B(Empty)\";          // scope 1 at $DIR/uninhabited_enum_branching2.rs:30:24: 30:34\n                                            // mir::Constant\n                                            // + span: $DIR/uninhabited_enum_branching2.rs:30:24: 30:34\n-                                           // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [66, 40, 69, 109, 112, 116, 121, 41], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 8 }) }\n+                                           // + literal: Const { ty: &str, val: Value(Slice(..)) }\n           _9 = &(*_11);                    // scope 1 at $DIR/uninhabited_enum_branching2.rs:30:24: 30:34\n           StorageDead(_11);                // scope 1 at $DIR/uninhabited_enum_branching2.rs:30:33: 30:34\n           goto -> bb10;                    // scope 1 at $DIR/uninhabited_enum_branching2.rs:30:33: 30:34\n@@ -122,7 +122,7 @@\n           _12 = const \"C\";                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:31:21: 31:24\n                                            // mir::Constant\n                                            // + span: $DIR/uninhabited_enum_branching2.rs:31:21: 31:24\n-                                           // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [67], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }\n+                                           // + literal: Const { ty: &str, val: Value(Slice(..)) }\n           _9 = &(*_12);                    // scope 1 at $DIR/uninhabited_enum_branching2.rs:31:21: 31:24\n           StorageDead(_12);                // scope 1 at $DIR/uninhabited_enum_branching2.rs:31:23: 31:24\n           goto -> bb10;                    // scope 1 at $DIR/uninhabited_enum_branching2.rs:31:23: 31:24"}, {"sha": "a282e71235c31f73cb0c1db7a21c02920ebe6069", "filename": "src/test/ui/layout/debug.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c29f8575acae4b1e533f630b51a639758919911c/src%2Ftest%2Fui%2Flayout%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c29f8575acae4b1e533f630b51a639758919911c/src%2Ftest%2Fui%2Flayout%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flayout%2Fdebug.rs?ref=c29f8575acae4b1e533f630b51a639758919911c", "patch": "@@ -1,4 +1,4 @@\n-// normalize-stderr-test \"pref: Align \\{\\n *pow2: [1-3],\\n *\\}\" -> \"pref: $$PREF_ALIGN\"\n+// normalize-stderr-test \"pref: Align\\([1-8] bytes\\)\" -> \"pref: $$PREF_ALIGN\"\n #![feature(never_type, rustc_attrs, type_alias_impl_trait)]\n #![crate_type = \"lib\"]\n "}, {"sha": "56a1337e6a5ea55eb001159862fdedd99012ca30", "filename": "src/test/ui/layout/debug.stderr", "status": "modified", "additions": 30, "deletions": 90, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/c29f8575acae4b1e533f630b51a639758919911c/src%2Ftest%2Fui%2Flayout%2Fdebug.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c29f8575acae4b1e533f630b51a639758919911c/src%2Ftest%2Fui%2Flayout%2Fdebug.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flayout%2Fdebug.stderr?ref=c29f8575acae4b1e533f630b51a639758919911c", "patch": "@@ -1,9 +1,7 @@\n error: layout_of(E) = Layout {\n            fields: Arbitrary {\n                offsets: [\n-                   Size {\n-                       raw: 0,\n-                   },\n+                   Size(0 bytes),\n                ],\n                memory_index: [\n                    0,\n@@ -33,27 +31,17 @@ error: layout_of(E) = Layout {\n                        },\n                        largest_niche: None,\n                        align: AbiAndPrefAlign {\n-                           abi: Align {\n-                               pow2: 0,\n-                           },\n+                           abi: Align(1 bytes),\n                            pref: $PREF_ALIGN,\n                        },\n-                       size: Size {\n-                           raw: 4,\n-                       },\n+                       size: Size(4 bytes),\n                    },\n                    Layout {\n                        fields: Arbitrary {\n                            offsets: [\n-                               Size {\n-                                   raw: 4,\n-                               },\n-                               Size {\n-                                   raw: 4,\n-                               },\n-                               Size {\n-                                   raw: 8,\n-                               },\n+                               Size(4 bytes),\n+                               Size(4 bytes),\n+                               Size(8 bytes),\n                            ],\n                            memory_index: [\n                                0,\n@@ -67,14 +55,10 @@ error: layout_of(E) = Layout {\n                        abi: Uninhabited,\n                        largest_niche: None,\n                        align: AbiAndPrefAlign {\n-                           abi: Align {\n-                               pow2: 2,\n-                           },\n+                           abi: Align(4 bytes),\n                            pref: $PREF_ALIGN,\n                        },\n-                       size: Size {\n-                           raw: 12,\n-                       },\n+                       size: Size(12 bytes),\n                    },\n                ],\n            },\n@@ -83,9 +67,7 @@ error: layout_of(E) = Layout {\n            },\n            largest_niche: Some(\n                Niche {\n-                   offset: Size {\n-                       raw: 0,\n-                   },\n+                   offset: Size(0 bytes),\n                    value: Int(\n                        I32,\n                        false,\n@@ -94,14 +76,10 @@ error: layout_of(E) = Layout {\n                },\n            ),\n            align: AbiAndPrefAlign {\n-               abi: Align {\n-                   pow2: 2,\n-               },\n+               abi: Align(4 bytes),\n                pref: $PREF_ALIGN,\n            },\n-           size: Size {\n-               raw: 12,\n-           },\n+           size: Size(12 bytes),\n        }\n   --> $DIR/debug.rs:6:1\n    |\n@@ -111,15 +89,9 @@ LL | enum E { Foo, Bar(!, i32, i32) }\n error: layout_of(S) = Layout {\n            fields: Arbitrary {\n                offsets: [\n-                   Size {\n-                       raw: 0,\n-                   },\n-                   Size {\n-                       raw: 0,\n-                   },\n-                   Size {\n-                       raw: 4,\n-                   },\n+                   Size(0 bytes),\n+                   Size(0 bytes),\n+                   Size(4 bytes),\n                ],\n                memory_index: [\n                    1,\n@@ -148,14 +120,10 @@ error: layout_of(S) = Layout {\n            ),\n            largest_niche: None,\n            align: AbiAndPrefAlign {\n-               abi: Align {\n-                   pow2: 2,\n-               },\n+               abi: Align(4 bytes),\n                pref: $PREF_ALIGN,\n            },\n-           size: Size {\n-               raw: 8,\n-           },\n+           size: Size(8 bytes),\n        }\n   --> $DIR/debug.rs:9:1\n    |\n@@ -174,14 +142,10 @@ error: layout_of(U) = Layout {\n            },\n            largest_niche: None,\n            align: AbiAndPrefAlign {\n-               abi: Align {\n-                   pow2: 2,\n-               },\n+               abi: Align(4 bytes),\n                pref: $PREF_ALIGN,\n            },\n-           size: Size {\n-               raw: 8,\n-           },\n+           size: Size(8 bytes),\n        }\n   --> $DIR/debug.rs:12:1\n    |\n@@ -191,9 +155,7 @@ LL | union U { f1: (i32, i32), f3: i32 }\n error: layout_of(std::result::Result<i32, i32>) = Layout {\n            fields: Arbitrary {\n                offsets: [\n-                   Size {\n-                       raw: 0,\n-                   },\n+                   Size(0 bytes),\n                ],\n                memory_index: [\n                    0,\n@@ -213,9 +175,7 @@ error: layout_of(std::result::Result<i32, i32>) = Layout {\n                    Layout {\n                        fields: Arbitrary {\n                            offsets: [\n-                               Size {\n-                                   raw: 4,\n-                               },\n+                               Size(4 bytes),\n                            ],\n                            memory_index: [\n                                0,\n@@ -229,21 +189,15 @@ error: layout_of(std::result::Result<i32, i32>) = Layout {\n                        },\n                        largest_niche: None,\n                        align: AbiAndPrefAlign {\n-                           abi: Align {\n-                               pow2: 2,\n-                           },\n+                           abi: Align(4 bytes),\n                            pref: $PREF_ALIGN,\n                        },\n-                       size: Size {\n-                           raw: 8,\n-                       },\n+                       size: Size(8 bytes),\n                    },\n                    Layout {\n                        fields: Arbitrary {\n                            offsets: [\n-                               Size {\n-                                   raw: 4,\n-                               },\n+                               Size(4 bytes),\n                            ],\n                            memory_index: [\n                                0,\n@@ -257,14 +211,10 @@ error: layout_of(std::result::Result<i32, i32>) = Layout {\n                        },\n                        largest_niche: None,\n                        align: AbiAndPrefAlign {\n-                           abi: Align {\n-                               pow2: 2,\n-                           },\n+                           abi: Align(4 bytes),\n                            pref: $PREF_ALIGN,\n                        },\n-                       size: Size {\n-                           raw: 8,\n-                       },\n+                       size: Size(8 bytes),\n                    },\n                ],\n            },\n@@ -286,9 +236,7 @@ error: layout_of(std::result::Result<i32, i32>) = Layout {\n            ),\n            largest_niche: Some(\n                Niche {\n-                   offset: Size {\n-                       raw: 0,\n-                   },\n+                   offset: Size(0 bytes),\n                    value: Int(\n                        I32,\n                        false,\n@@ -297,14 +245,10 @@ error: layout_of(std::result::Result<i32, i32>) = Layout {\n                },\n            ),\n            align: AbiAndPrefAlign {\n-               abi: Align {\n-                   pow2: 2,\n-               },\n+               abi: Align(4 bytes),\n                pref: $PREF_ALIGN,\n            },\n-           size: Size {\n-               raw: 8,\n-           },\n+           size: Size(8 bytes),\n        }\n   --> $DIR/debug.rs:15:1\n    |\n@@ -327,14 +271,10 @@ error: layout_of(i32) = Layout {\n            ),\n            largest_niche: None,\n            align: AbiAndPrefAlign {\n-               abi: Align {\n-                   pow2: 2,\n-               },\n+               abi: Align(4 bytes),\n                pref: $PREF_ALIGN,\n            },\n-           size: Size {\n-               raw: 4,\n-           },\n+           size: Size(4 bytes),\n        }\n   --> $DIR/debug.rs:18:1\n    |"}, {"sha": "ba919df771fca096b73467a13a44f08b7f2fc5ca", "filename": "src/test/ui/layout/hexagon-enum.stderr", "status": "modified", "additions": 40, "deletions": 120, "changes": 160, "blob_url": "https://github.com/rust-lang/rust/blob/c29f8575acae4b1e533f630b51a639758919911c/src%2Ftest%2Fui%2Flayout%2Fhexagon-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c29f8575acae4b1e533f630b51a639758919911c/src%2Ftest%2Fui%2Flayout%2Fhexagon-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flayout%2Fhexagon-enum.stderr?ref=c29f8575acae4b1e533f630b51a639758919911c", "patch": "@@ -1,9 +1,7 @@\n error: layout_of(A) = Layout {\n            fields: Arbitrary {\n                offsets: [\n-                   Size {\n-                       raw: 0,\n-                   },\n+                   Size(0 bytes),\n                ],\n                memory_index: [\n                    0,\n@@ -33,16 +31,10 @@ error: layout_of(A) = Layout {\n                        },\n                        largest_niche: None,\n                        align: AbiAndPrefAlign {\n-                           abi: Align {\n-                               pow2: 0,\n-                           },\n-                           pref: Align {\n-                               pow2: 0,\n-                           },\n-                       },\n-                       size: Size {\n-                           raw: 1,\n+                           abi: Align(1 bytes),\n+                           pref: Align(1 bytes),\n                        },\n+                       size: Size(1 bytes),\n                    },\n                ],\n            },\n@@ -57,9 +49,7 @@ error: layout_of(A) = Layout {\n            ),\n            largest_niche: Some(\n                Niche {\n-                   offset: Size {\n-                       raw: 0,\n-                   },\n+                   offset: Size(0 bytes),\n                    value: Int(\n                        I8,\n                        false,\n@@ -68,16 +58,10 @@ error: layout_of(A) = Layout {\n                },\n            ),\n            align: AbiAndPrefAlign {\n-               abi: Align {\n-                   pow2: 0,\n-               },\n-               pref: Align {\n-                   pow2: 0,\n-               },\n-           },\n-           size: Size {\n-               raw: 1,\n+               abi: Align(1 bytes),\n+               pref: Align(1 bytes),\n            },\n+           size: Size(1 bytes),\n        }\n   --> $DIR/hexagon-enum.rs:16:1\n    |\n@@ -87,9 +71,7 @@ LL | enum A { Apple }\n error: layout_of(B) = Layout {\n            fields: Arbitrary {\n                offsets: [\n-                   Size {\n-                       raw: 0,\n-                   },\n+                   Size(0 bytes),\n                ],\n                memory_index: [\n                    0,\n@@ -119,16 +101,10 @@ error: layout_of(B) = Layout {\n                        },\n                        largest_niche: None,\n                        align: AbiAndPrefAlign {\n-                           abi: Align {\n-                               pow2: 0,\n-                           },\n-                           pref: Align {\n-                               pow2: 0,\n-                           },\n-                       },\n-                       size: Size {\n-                           raw: 1,\n+                           abi: Align(1 bytes),\n+                           pref: Align(1 bytes),\n                        },\n+                       size: Size(1 bytes),\n                    },\n                ],\n            },\n@@ -143,9 +119,7 @@ error: layout_of(B) = Layout {\n            ),\n            largest_niche: Some(\n                Niche {\n-                   offset: Size {\n-                       raw: 0,\n-                   },\n+                   offset: Size(0 bytes),\n                    value: Int(\n                        I8,\n                        false,\n@@ -154,16 +128,10 @@ error: layout_of(B) = Layout {\n                },\n            ),\n            align: AbiAndPrefAlign {\n-               abi: Align {\n-                   pow2: 0,\n-               },\n-               pref: Align {\n-                   pow2: 0,\n-               },\n-           },\n-           size: Size {\n-               raw: 1,\n+               abi: Align(1 bytes),\n+               pref: Align(1 bytes),\n            },\n+           size: Size(1 bytes),\n        }\n   --> $DIR/hexagon-enum.rs:20:1\n    |\n@@ -173,9 +141,7 @@ LL | enum B { Banana = 255, }\n error: layout_of(C) = Layout {\n            fields: Arbitrary {\n                offsets: [\n-                   Size {\n-                       raw: 0,\n-                   },\n+                   Size(0 bytes),\n                ],\n                memory_index: [\n                    0,\n@@ -205,16 +171,10 @@ error: layout_of(C) = Layout {\n                        },\n                        largest_niche: None,\n                        align: AbiAndPrefAlign {\n-                           abi: Align {\n-                               pow2: 1,\n-                           },\n-                           pref: Align {\n-                               pow2: 1,\n-                           },\n-                       },\n-                       size: Size {\n-                           raw: 2,\n+                           abi: Align(2 bytes),\n+                           pref: Align(2 bytes),\n                        },\n+                       size: Size(2 bytes),\n                    },\n                ],\n            },\n@@ -229,9 +189,7 @@ error: layout_of(C) = Layout {\n            ),\n            largest_niche: Some(\n                Niche {\n-                   offset: Size {\n-                       raw: 0,\n-                   },\n+                   offset: Size(0 bytes),\n                    value: Int(\n                        I16,\n                        false,\n@@ -240,16 +198,10 @@ error: layout_of(C) = Layout {\n                },\n            ),\n            align: AbiAndPrefAlign {\n-               abi: Align {\n-                   pow2: 1,\n-               },\n-               pref: Align {\n-                   pow2: 1,\n-               },\n-           },\n-           size: Size {\n-               raw: 2,\n+               abi: Align(2 bytes),\n+               pref: Align(2 bytes),\n            },\n+           size: Size(2 bytes),\n        }\n   --> $DIR/hexagon-enum.rs:24:1\n    |\n@@ -259,9 +211,7 @@ LL | enum C { Chaenomeles = 256, }\n error: layout_of(P) = Layout {\n            fields: Arbitrary {\n                offsets: [\n-                   Size {\n-                       raw: 0,\n-                   },\n+                   Size(0 bytes),\n                ],\n                memory_index: [\n                    0,\n@@ -291,16 +241,10 @@ error: layout_of(P) = Layout {\n                        },\n                        largest_niche: None,\n                        align: AbiAndPrefAlign {\n-                           abi: Align {\n-                               pow2: 2,\n-                           },\n-                           pref: Align {\n-                               pow2: 2,\n-                           },\n-                       },\n-                       size: Size {\n-                           raw: 4,\n+                           abi: Align(4 bytes),\n+                           pref: Align(4 bytes),\n                        },\n+                       size: Size(4 bytes),\n                    },\n                ],\n            },\n@@ -315,9 +259,7 @@ error: layout_of(P) = Layout {\n            ),\n            largest_niche: Some(\n                Niche {\n-                   offset: Size {\n-                       raw: 0,\n-                   },\n+                   offset: Size(0 bytes),\n                    value: Int(\n                        I32,\n                        false,\n@@ -326,16 +268,10 @@ error: layout_of(P) = Layout {\n                },\n            ),\n            align: AbiAndPrefAlign {\n-               abi: Align {\n-                   pow2: 2,\n-               },\n-               pref: Align {\n-                   pow2: 2,\n-               },\n-           },\n-           size: Size {\n-               raw: 4,\n+               abi: Align(4 bytes),\n+               pref: Align(4 bytes),\n            },\n+           size: Size(4 bytes),\n        }\n   --> $DIR/hexagon-enum.rs:28:1\n    |\n@@ -345,9 +281,7 @@ LL | enum P { Peach = 0x1000_0000isize, }\n error: layout_of(T) = Layout {\n            fields: Arbitrary {\n                offsets: [\n-                   Size {\n-                       raw: 0,\n-                   },\n+                   Size(0 bytes),\n                ],\n                memory_index: [\n                    0,\n@@ -377,16 +311,10 @@ error: layout_of(T) = Layout {\n                        },\n                        largest_niche: None,\n                        align: AbiAndPrefAlign {\n-                           abi: Align {\n-                               pow2: 2,\n-                           },\n-                           pref: Align {\n-                               pow2: 2,\n-                           },\n-                       },\n-                       size: Size {\n-                           raw: 4,\n+                           abi: Align(4 bytes),\n+                           pref: Align(4 bytes),\n                        },\n+                       size: Size(4 bytes),\n                    },\n                ],\n            },\n@@ -401,9 +329,7 @@ error: layout_of(T) = Layout {\n            ),\n            largest_niche: Some(\n                Niche {\n-                   offset: Size {\n-                       raw: 0,\n-                   },\n+                   offset: Size(0 bytes),\n                    value: Int(\n                        I32,\n                        true,\n@@ -412,16 +338,10 @@ error: layout_of(T) = Layout {\n                },\n            ),\n            align: AbiAndPrefAlign {\n-               abi: Align {\n-                   pow2: 2,\n-               },\n-               pref: Align {\n-                   pow2: 2,\n-               },\n-           },\n-           size: Size {\n-               raw: 4,\n+               abi: Align(4 bytes),\n+               pref: Align(4 bytes),\n            },\n+           size: Size(4 bytes),\n        }\n   --> $DIR/hexagon-enum.rs:34:1\n    |"}, {"sha": "6c97a09b0c666bf9f0a37b4cc5365d3c5c686182", "filename": "src/test/ui/layout/homogeneous-aggr-zero-sized-c-struct.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c29f8575acae4b1e533f630b51a639758919911c/src%2Ftest%2Fui%2Flayout%2Fhomogeneous-aggr-zero-sized-c-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c29f8575acae4b1e533f630b51a639758919911c/src%2Ftest%2Fui%2Flayout%2Fhomogeneous-aggr-zero-sized-c-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flayout%2Fhomogeneous-aggr-zero-sized-c-struct.stderr?ref=c29f8575acae4b1e533f630b51a639758919911c", "patch": "@@ -1,10 +1,10 @@\n-error: homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size { raw: 4 } }))\n+error: homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size(4 bytes) }))\n   --> $DIR/homogeneous-aggr-zero-sized-c-struct.rs:22:1\n    |\n LL | pub type TestMiddle = Middle;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size { raw: 4 } }))\n+error: homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size(4 bytes) }))\n   --> $DIR/homogeneous-aggr-zero-sized-c-struct.rs:33:1\n    |\n LL | pub type TestFinal = Final;"}, {"sha": "a473c5c97c0b26d4ba53355c96183f250a479d77", "filename": "src/test/ui/layout/homogeneous-aggr-zero-sized-repr-rust.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c29f8575acae4b1e533f630b51a639758919911c/src%2Ftest%2Fui%2Flayout%2Fhomogeneous-aggr-zero-sized-repr-rust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c29f8575acae4b1e533f630b51a639758919911c/src%2Ftest%2Fui%2Flayout%2Fhomogeneous-aggr-zero-sized-repr-rust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flayout%2Fhomogeneous-aggr-zero-sized-repr-rust.rs?ref=c29f8575acae4b1e533f630b51a639758919911c", "patch": "@@ -17,8 +17,7 @@ pub struct WithPhantomData {\n     pub _unit: std::marker::PhantomData<()>,\n }\n \n-pub struct EmptyRustStruct {\n-}\n+pub struct EmptyRustStruct {}\n \n #[repr(C)]\n pub struct WithEmptyRustStruct {\n@@ -52,22 +51,22 @@ pub struct WithEmptyRustEnum {\n \n #[rustc_layout(homogeneous_aggregate)]\n pub type Test1 = BaseCase;\n-//~^ ERROR homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size { raw: 4 } }))\n+//~^ ERROR homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size(4 bytes) }))\n \n #[rustc_layout(homogeneous_aggregate)]\n pub type Test2 = WithPhantomData;\n-//~^ ERROR homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size { raw: 4 } }))\n+//~^ ERROR homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size(4 bytes) }))\n \n #[rustc_layout(homogeneous_aggregate)]\n pub type Test3 = WithEmptyRustStruct;\n-//~^ ERROR homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size { raw: 4 } }))\n+//~^ ERROR homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size(4 bytes) }))\n \n #[rustc_layout(homogeneous_aggregate)]\n pub type Test4 = WithTransitivelyEmptyRustStruct;\n-//~^ ERROR homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size { raw: 4 } }))\n+//~^ ERROR homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size(4 bytes) }))\n \n #[rustc_layout(homogeneous_aggregate)]\n pub type Test5 = WithEmptyRustEnum;\n-//~^ ERROR homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size { raw: 4 } }))\n+//~^ ERROR homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size(4 bytes) }))\n \n-fn main() { }\n+fn main() {}"}, {"sha": "322948ff7839978e7f59d5427e72cd36fed9d288", "filename": "src/test/ui/layout/homogeneous-aggr-zero-sized-repr-rust.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c29f8575acae4b1e533f630b51a639758919911c/src%2Ftest%2Fui%2Flayout%2Fhomogeneous-aggr-zero-sized-repr-rust.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c29f8575acae4b1e533f630b51a639758919911c/src%2Ftest%2Fui%2Flayout%2Fhomogeneous-aggr-zero-sized-repr-rust.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flayout%2Fhomogeneous-aggr-zero-sized-repr-rust.stderr?ref=c29f8575acae4b1e533f630b51a639758919911c", "patch": "@@ -1,29 +1,29 @@\n-error: homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size { raw: 4 } }))\n-  --> $DIR/homogeneous-aggr-zero-sized-repr-rust.rs:54:1\n+error: homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size(4 bytes) }))\n+  --> $DIR/homogeneous-aggr-zero-sized-repr-rust.rs:53:1\n    |\n LL | pub type Test1 = BaseCase;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size { raw: 4 } }))\n-  --> $DIR/homogeneous-aggr-zero-sized-repr-rust.rs:58:1\n+error: homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size(4 bytes) }))\n+  --> $DIR/homogeneous-aggr-zero-sized-repr-rust.rs:57:1\n    |\n LL | pub type Test2 = WithPhantomData;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size { raw: 4 } }))\n-  --> $DIR/homogeneous-aggr-zero-sized-repr-rust.rs:62:1\n+error: homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size(4 bytes) }))\n+  --> $DIR/homogeneous-aggr-zero-sized-repr-rust.rs:61:1\n    |\n LL | pub type Test3 = WithEmptyRustStruct;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size { raw: 4 } }))\n-  --> $DIR/homogeneous-aggr-zero-sized-repr-rust.rs:66:1\n+error: homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size(4 bytes) }))\n+  --> $DIR/homogeneous-aggr-zero-sized-repr-rust.rs:65:1\n    |\n LL | pub type Test4 = WithTransitivelyEmptyRustStruct;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size { raw: 4 } }))\n-  --> $DIR/homogeneous-aggr-zero-sized-repr-rust.rs:70:1\n+error: homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size(4 bytes) }))\n+  --> $DIR/homogeneous-aggr-zero-sized-repr-rust.rs:69:1\n    |\n LL | pub type Test5 = WithEmptyRustEnum;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "af5f5885d67c5d3d8ed134b3472f32e4f1b06d41", "filename": "src/test/ui/layout/issue-96158-scalarpair-payload-might-be-uninit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c29f8575acae4b1e533f630b51a639758919911c/src%2Ftest%2Fui%2Flayout%2Fissue-96158-scalarpair-payload-might-be-uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c29f8575acae4b1e533f630b51a639758919911c/src%2Ftest%2Fui%2Flayout%2Fissue-96158-scalarpair-payload-might-be-uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flayout%2Fissue-96158-scalarpair-payload-might-be-uninit.rs?ref=c29f8575acae4b1e533f630b51a639758919911c", "patch": "@@ -1,4 +1,4 @@\n-// normalize-stderr-test \"pref: Align \\{\\n *pow2: [1-3],\\n *\\}\" -> \"pref: $$PREF_ALIGN\"\n+// normalize-stderr-test \"pref: Align\\([1-8] bytes\\)\" -> \"pref: $$PREF_ALIGN\"\n #![crate_type = \"lib\"]\n #![feature(rustc_attrs)]\n "}, {"sha": "1a724e6f59be1ed2ec5690cc6dd3e7f5fdc9d0b7", "filename": "src/test/ui/layout/issue-96158-scalarpair-payload-might-be-uninit.stderr", "status": "modified", "additions": 55, "deletions": 165, "changes": 220, "blob_url": "https://github.com/rust-lang/rust/blob/c29f8575acae4b1e533f630b51a639758919911c/src%2Ftest%2Fui%2Flayout%2Fissue-96158-scalarpair-payload-might-be-uninit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c29f8575acae4b1e533f630b51a639758919911c/src%2Ftest%2Fui%2Flayout%2Fissue-96158-scalarpair-payload-might-be-uninit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flayout%2Fissue-96158-scalarpair-payload-might-be-uninit.stderr?ref=c29f8575acae4b1e533f630b51a639758919911c", "patch": "@@ -1,9 +1,7 @@\n error: layout_of(MissingPayloadField) = Layout {\n            fields: Arbitrary {\n                offsets: [\n-                   Size {\n-                       raw: 0,\n-                   },\n+                   Size(0 bytes),\n                ],\n                memory_index: [\n                    0,\n@@ -23,9 +21,7 @@ error: layout_of(MissingPayloadField) = Layout {\n                    Layout {\n                        fields: Arbitrary {\n                            offsets: [\n-                               Size {\n-                                   raw: 1,\n-                               },\n+                               Size(1 bytes),\n                            ],\n                            memory_index: [\n                                0,\n@@ -39,14 +35,10 @@ error: layout_of(MissingPayloadField) = Layout {\n                        },\n                        largest_niche: None,\n                        align: AbiAndPrefAlign {\n-                           abi: Align {\n-                               pow2: 0,\n-                           },\n+                           abi: Align(1 bytes),\n                            pref: $PREF_ALIGN,\n                        },\n-                       size: Size {\n-                           raw: 2,\n-                       },\n+                       size: Size(2 bytes),\n                    },\n                    Layout {\n                        fields: Arbitrary {\n@@ -61,14 +53,10 @@ error: layout_of(MissingPayloadField) = Layout {\n                        },\n                        largest_niche: None,\n                        align: AbiAndPrefAlign {\n-                           abi: Align {\n-                               pow2: 0,\n-                           },\n+                           abi: Align(1 bytes),\n                            pref: $PREF_ALIGN,\n                        },\n-                       size: Size {\n-                           raw: 1,\n-                       },\n+                       size: Size(1 bytes),\n                    },\n                ],\n            },\n@@ -89,9 +77,7 @@ error: layout_of(MissingPayloadField) = Layout {\n            ),\n            largest_niche: Some(\n                Niche {\n-                   offset: Size {\n-                       raw: 0,\n-                   },\n+                   offset: Size(0 bytes),\n                    value: Int(\n                        I8,\n                        false,\n@@ -100,14 +86,10 @@ error: layout_of(MissingPayloadField) = Layout {\n                },\n            ),\n            align: AbiAndPrefAlign {\n-               abi: Align {\n-                   pow2: 0,\n-               },\n+               abi: Align(1 bytes),\n                pref: $PREF_ALIGN,\n            },\n-           size: Size {\n-               raw: 2,\n-           },\n+           size: Size(2 bytes),\n        }\n   --> $DIR/issue-96158-scalarpair-payload-might-be-uninit.rs:16:1\n    |\n@@ -120,9 +102,7 @@ LL | | }\n error: layout_of(CommonPayloadField) = Layout {\n            fields: Arbitrary {\n                offsets: [\n-                   Size {\n-                       raw: 0,\n-                   },\n+                   Size(0 bytes),\n                ],\n                memory_index: [\n                    0,\n@@ -142,9 +122,7 @@ error: layout_of(CommonPayloadField) = Layout {\n                    Layout {\n                        fields: Arbitrary {\n                            offsets: [\n-                               Size {\n-                                   raw: 1,\n-                               },\n+                               Size(1 bytes),\n                            ],\n                            memory_index: [\n                                0,\n@@ -158,21 +136,15 @@ error: layout_of(CommonPayloadField) = Layout {\n                        },\n                        largest_niche: None,\n                        align: AbiAndPrefAlign {\n-                           abi: Align {\n-                               pow2: 0,\n-                           },\n+                           abi: Align(1 bytes),\n                            pref: $PREF_ALIGN,\n                        },\n-                       size: Size {\n-                           raw: 2,\n-                       },\n+                       size: Size(2 bytes),\n                    },\n                    Layout {\n                        fields: Arbitrary {\n                            offsets: [\n-                               Size {\n-                                   raw: 1,\n-                               },\n+                               Size(1 bytes),\n                            ],\n                            memory_index: [\n                                0,\n@@ -186,14 +158,10 @@ error: layout_of(CommonPayloadField) = Layout {\n                        },\n                        largest_niche: None,\n                        align: AbiAndPrefAlign {\n-                           abi: Align {\n-                               pow2: 0,\n-                           },\n+                           abi: Align(1 bytes),\n                            pref: $PREF_ALIGN,\n                        },\n-                       size: Size {\n-                           raw: 2,\n-                       },\n+                       size: Size(2 bytes),\n                    },\n                ],\n            },\n@@ -215,9 +183,7 @@ error: layout_of(CommonPayloadField) = Layout {\n            ),\n            largest_niche: Some(\n                Niche {\n-                   offset: Size {\n-                       raw: 0,\n-                   },\n+                   offset: Size(0 bytes),\n                    value: Int(\n                        I8,\n                        false,\n@@ -226,14 +192,10 @@ error: layout_of(CommonPayloadField) = Layout {\n                },\n            ),\n            align: AbiAndPrefAlign {\n-               abi: Align {\n-                   pow2: 0,\n-               },\n+               abi: Align(1 bytes),\n                pref: $PREF_ALIGN,\n            },\n-           size: Size {\n-               raw: 2,\n-           },\n+           size: Size(2 bytes),\n        }\n   --> $DIR/issue-96158-scalarpair-payload-might-be-uninit.rs:25:1\n    |\n@@ -246,9 +208,7 @@ LL | | }\n error: layout_of(CommonPayloadFieldIsMaybeUninit) = Layout {\n            fields: Arbitrary {\n                offsets: [\n-                   Size {\n-                       raw: 0,\n-                   },\n+                   Size(0 bytes),\n                ],\n                memory_index: [\n                    0,\n@@ -268,9 +228,7 @@ error: layout_of(CommonPayloadFieldIsMaybeUninit) = Layout {\n                    Layout {\n                        fields: Arbitrary {\n                            offsets: [\n-                               Size {\n-                                   raw: 1,\n-                               },\n+                               Size(1 bytes),\n                            ],\n                            memory_index: [\n                                0,\n@@ -284,21 +242,15 @@ error: layout_of(CommonPayloadFieldIsMaybeUninit) = Layout {\n                        },\n                        largest_niche: None,\n                        align: AbiAndPrefAlign {\n-                           abi: Align {\n-                               pow2: 0,\n-                           },\n+                           abi: Align(1 bytes),\n                            pref: $PREF_ALIGN,\n                        },\n-                       size: Size {\n-                           raw: 2,\n-                       },\n+                       size: Size(2 bytes),\n                    },\n                    Layout {\n                        fields: Arbitrary {\n                            offsets: [\n-                               Size {\n-                                   raw: 1,\n-                               },\n+                               Size(1 bytes),\n                            ],\n                            memory_index: [\n                                0,\n@@ -312,14 +264,10 @@ error: layout_of(CommonPayloadFieldIsMaybeUninit) = Layout {\n                        },\n                        largest_niche: None,\n                        align: AbiAndPrefAlign {\n-                           abi: Align {\n-                               pow2: 0,\n-                           },\n+                           abi: Align(1 bytes),\n                            pref: $PREF_ALIGN,\n                        },\n-                       size: Size {\n-                           raw: 2,\n-                       },\n+                       size: Size(2 bytes),\n                    },\n                ],\n            },\n@@ -340,9 +288,7 @@ error: layout_of(CommonPayloadFieldIsMaybeUninit) = Layout {\n            ),\n            largest_niche: Some(\n                Niche {\n-                   offset: Size {\n-                       raw: 0,\n-                   },\n+                   offset: Size(0 bytes),\n                    value: Int(\n                        I8,\n                        false,\n@@ -351,14 +297,10 @@ error: layout_of(CommonPayloadFieldIsMaybeUninit) = Layout {\n                },\n            ),\n            align: AbiAndPrefAlign {\n-               abi: Align {\n-                   pow2: 0,\n-               },\n+               abi: Align(1 bytes),\n                pref: $PREF_ALIGN,\n            },\n-           size: Size {\n-               raw: 2,\n-           },\n+           size: Size(2 bytes),\n        }\n   --> $DIR/issue-96158-scalarpair-payload-might-be-uninit.rs:33:1\n    |\n@@ -371,9 +313,7 @@ LL | | }\n error: layout_of(NicheFirst) = Layout {\n            fields: Arbitrary {\n                offsets: [\n-                   Size {\n-                       raw: 0,\n-                   },\n+                   Size(0 bytes),\n                ],\n                memory_index: [\n                    0,\n@@ -397,12 +337,8 @@ error: layout_of(NicheFirst) = Layout {\n                    Layout {\n                        fields: Arbitrary {\n                            offsets: [\n-                               Size {\n-                                   raw: 0,\n-                               },\n-                               Size {\n-                                   raw: 1,\n-                               },\n+                               Size(0 bytes),\n+                               Size(1 bytes),\n                            ],\n                            memory_index: [\n                                0,\n@@ -430,9 +366,7 @@ error: layout_of(NicheFirst) = Layout {\n                        ),\n                        largest_niche: Some(\n                            Niche {\n-                               offset: Size {\n-                                   raw: 0,\n-                               },\n+                               offset: Size(0 bytes),\n                                value: Int(\n                                    I8,\n                                    false,\n@@ -441,14 +375,10 @@ error: layout_of(NicheFirst) = Layout {\n                            },\n                        ),\n                        align: AbiAndPrefAlign {\n-                           abi: Align {\n-                               pow2: 0,\n-                           },\n+                           abi: Align(1 bytes),\n                            pref: $PREF_ALIGN,\n                        },\n-                       size: Size {\n-                           raw: 2,\n-                       },\n+                       size: Size(2 bytes),\n                    },\n                    Layout {\n                        fields: Arbitrary {\n@@ -463,14 +393,10 @@ error: layout_of(NicheFirst) = Layout {\n                        },\n                        largest_niche: None,\n                        align: AbiAndPrefAlign {\n-                           abi: Align {\n-                               pow2: 0,\n-                           },\n+                           abi: Align(1 bytes),\n                            pref: $PREF_ALIGN,\n                        },\n-                       size: Size {\n-                           raw: 0,\n-                       },\n+                       size: Size(0 bytes),\n                    },\n                    Layout {\n                        fields: Arbitrary {\n@@ -485,14 +411,10 @@ error: layout_of(NicheFirst) = Layout {\n                        },\n                        largest_niche: None,\n                        align: AbiAndPrefAlign {\n-                           abi: Align {\n-                               pow2: 0,\n-                           },\n+                           abi: Align(1 bytes),\n                            pref: $PREF_ALIGN,\n                        },\n-                       size: Size {\n-                           raw: 0,\n-                       },\n+                       size: Size(0 bytes),\n                    },\n                ],\n            },\n@@ -513,9 +435,7 @@ error: layout_of(NicheFirst) = Layout {\n            ),\n            largest_niche: Some(\n                Niche {\n-                   offset: Size {\n-                       raw: 0,\n-                   },\n+                   offset: Size(0 bytes),\n                    value: Int(\n                        I8,\n                        false,\n@@ -524,14 +444,10 @@ error: layout_of(NicheFirst) = Layout {\n                },\n            ),\n            align: AbiAndPrefAlign {\n-               abi: Align {\n-                   pow2: 0,\n-               },\n+               abi: Align(1 bytes),\n                pref: $PREF_ALIGN,\n            },\n-           size: Size {\n-               raw: 2,\n-           },\n+           size: Size(2 bytes),\n        }\n   --> $DIR/issue-96158-scalarpair-payload-might-be-uninit.rs:41:1\n    |\n@@ -545,9 +461,7 @@ LL | | }\n error: layout_of(NicheSecond) = Layout {\n            fields: Arbitrary {\n                offsets: [\n-                   Size {\n-                       raw: 1,\n-                   },\n+                   Size(1 bytes),\n                ],\n                memory_index: [\n                    0,\n@@ -571,12 +485,8 @@ error: layout_of(NicheSecond) = Layout {\n                    Layout {\n                        fields: Arbitrary {\n                            offsets: [\n-                               Size {\n-                                   raw: 0,\n-                               },\n-                               Size {\n-                                   raw: 1,\n-                               },\n+                               Size(0 bytes),\n+                               Size(1 bytes),\n                            ],\n                            memory_index: [\n                                0,\n@@ -604,9 +514,7 @@ error: layout_of(NicheSecond) = Layout {\n                        ),\n                        largest_niche: Some(\n                            Niche {\n-                               offset: Size {\n-                                   raw: 1,\n-                               },\n+                               offset: Size(1 bytes),\n                                value: Int(\n                                    I8,\n                                    false,\n@@ -615,14 +523,10 @@ error: layout_of(NicheSecond) = Layout {\n                            },\n                        ),\n                        align: AbiAndPrefAlign {\n-                           abi: Align {\n-                               pow2: 0,\n-                           },\n+                           abi: Align(1 bytes),\n                            pref: $PREF_ALIGN,\n                        },\n-                       size: Size {\n-                           raw: 2,\n-                       },\n+                       size: Size(2 bytes),\n                    },\n                    Layout {\n                        fields: Arbitrary {\n@@ -637,14 +541,10 @@ error: layout_of(NicheSecond) = Layout {\n                        },\n                        largest_niche: None,\n                        align: AbiAndPrefAlign {\n-                           abi: Align {\n-                               pow2: 0,\n-                           },\n+                           abi: Align(1 bytes),\n                            pref: $PREF_ALIGN,\n                        },\n-                       size: Size {\n-                           raw: 0,\n-                       },\n+                       size: Size(0 bytes),\n                    },\n                    Layout {\n                        fields: Arbitrary {\n@@ -659,14 +559,10 @@ error: layout_of(NicheSecond) = Layout {\n                        },\n                        largest_niche: None,\n                        align: AbiAndPrefAlign {\n-                           abi: Align {\n-                               pow2: 0,\n-                           },\n+                           abi: Align(1 bytes),\n                            pref: $PREF_ALIGN,\n                        },\n-                       size: Size {\n-                           raw: 0,\n-                       },\n+                       size: Size(0 bytes),\n                    },\n                ],\n            },\n@@ -687,9 +583,7 @@ error: layout_of(NicheSecond) = Layout {\n            ),\n            largest_niche: Some(\n                Niche {\n-                   offset: Size {\n-                       raw: 1,\n-                   },\n+                   offset: Size(1 bytes),\n                    value: Int(\n                        I8,\n                        false,\n@@ -698,14 +592,10 @@ error: layout_of(NicheSecond) = Layout {\n                },\n            ),\n            align: AbiAndPrefAlign {\n-               abi: Align {\n-                   pow2: 0,\n-               },\n+               abi: Align(1 bytes),\n                pref: $PREF_ALIGN,\n            },\n-           size: Size {\n-               raw: 2,\n-           },\n+           size: Size(2 bytes),\n        }\n   --> $DIR/issue-96158-scalarpair-payload-might-be-uninit.rs:50:1\n    |"}, {"sha": "9db9ad5a784862023e646a018da233d100e18c7c", "filename": "src/test/ui/layout/thumb-enum.stderr", "status": "modified", "additions": 40, "deletions": 120, "changes": 160, "blob_url": "https://github.com/rust-lang/rust/blob/c29f8575acae4b1e533f630b51a639758919911c/src%2Ftest%2Fui%2Flayout%2Fthumb-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c29f8575acae4b1e533f630b51a639758919911c/src%2Ftest%2Fui%2Flayout%2Fthumb-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flayout%2Fthumb-enum.stderr?ref=c29f8575acae4b1e533f630b51a639758919911c", "patch": "@@ -1,9 +1,7 @@\n error: layout_of(A) = Layout {\n            fields: Arbitrary {\n                offsets: [\n-                   Size {\n-                       raw: 0,\n-                   },\n+                   Size(0 bytes),\n                ],\n                memory_index: [\n                    0,\n@@ -33,16 +31,10 @@ error: layout_of(A) = Layout {\n                        },\n                        largest_niche: None,\n                        align: AbiAndPrefAlign {\n-                           abi: Align {\n-                               pow2: 0,\n-                           },\n-                           pref: Align {\n-                               pow2: 2,\n-                           },\n-                       },\n-                       size: Size {\n-                           raw: 1,\n+                           abi: Align(1 bytes),\n+                           pref: Align(4 bytes),\n                        },\n+                       size: Size(1 bytes),\n                    },\n                ],\n            },\n@@ -57,9 +49,7 @@ error: layout_of(A) = Layout {\n            ),\n            largest_niche: Some(\n                Niche {\n-                   offset: Size {\n-                       raw: 0,\n-                   },\n+                   offset: Size(0 bytes),\n                    value: Int(\n                        I8,\n                        false,\n@@ -68,16 +58,10 @@ error: layout_of(A) = Layout {\n                },\n            ),\n            align: AbiAndPrefAlign {\n-               abi: Align {\n-                   pow2: 0,\n-               },\n-               pref: Align {\n-                   pow2: 2,\n-               },\n-           },\n-           size: Size {\n-               raw: 1,\n+               abi: Align(1 bytes),\n+               pref: Align(4 bytes),\n            },\n+           size: Size(1 bytes),\n        }\n   --> $DIR/thumb-enum.rs:16:1\n    |\n@@ -87,9 +71,7 @@ LL | enum A { Apple }\n error: layout_of(B) = Layout {\n            fields: Arbitrary {\n                offsets: [\n-                   Size {\n-                       raw: 0,\n-                   },\n+                   Size(0 bytes),\n                ],\n                memory_index: [\n                    0,\n@@ -119,16 +101,10 @@ error: layout_of(B) = Layout {\n                        },\n                        largest_niche: None,\n                        align: AbiAndPrefAlign {\n-                           abi: Align {\n-                               pow2: 0,\n-                           },\n-                           pref: Align {\n-                               pow2: 2,\n-                           },\n-                       },\n-                       size: Size {\n-                           raw: 1,\n+                           abi: Align(1 bytes),\n+                           pref: Align(4 bytes),\n                        },\n+                       size: Size(1 bytes),\n                    },\n                ],\n            },\n@@ -143,9 +119,7 @@ error: layout_of(B) = Layout {\n            ),\n            largest_niche: Some(\n                Niche {\n-                   offset: Size {\n-                       raw: 0,\n-                   },\n+                   offset: Size(0 bytes),\n                    value: Int(\n                        I8,\n                        false,\n@@ -154,16 +128,10 @@ error: layout_of(B) = Layout {\n                },\n            ),\n            align: AbiAndPrefAlign {\n-               abi: Align {\n-                   pow2: 0,\n-               },\n-               pref: Align {\n-                   pow2: 2,\n-               },\n-           },\n-           size: Size {\n-               raw: 1,\n+               abi: Align(1 bytes),\n+               pref: Align(4 bytes),\n            },\n+           size: Size(1 bytes),\n        }\n   --> $DIR/thumb-enum.rs:20:1\n    |\n@@ -173,9 +141,7 @@ LL | enum B { Banana = 255, }\n error: layout_of(C) = Layout {\n            fields: Arbitrary {\n                offsets: [\n-                   Size {\n-                       raw: 0,\n-                   },\n+                   Size(0 bytes),\n                ],\n                memory_index: [\n                    0,\n@@ -205,16 +171,10 @@ error: layout_of(C) = Layout {\n                        },\n                        largest_niche: None,\n                        align: AbiAndPrefAlign {\n-                           abi: Align {\n-                               pow2: 1,\n-                           },\n-                           pref: Align {\n-                               pow2: 2,\n-                           },\n-                       },\n-                       size: Size {\n-                           raw: 2,\n+                           abi: Align(2 bytes),\n+                           pref: Align(4 bytes),\n                        },\n+                       size: Size(2 bytes),\n                    },\n                ],\n            },\n@@ -229,9 +189,7 @@ error: layout_of(C) = Layout {\n            ),\n            largest_niche: Some(\n                Niche {\n-                   offset: Size {\n-                       raw: 0,\n-                   },\n+                   offset: Size(0 bytes),\n                    value: Int(\n                        I16,\n                        false,\n@@ -240,16 +198,10 @@ error: layout_of(C) = Layout {\n                },\n            ),\n            align: AbiAndPrefAlign {\n-               abi: Align {\n-                   pow2: 1,\n-               },\n-               pref: Align {\n-                   pow2: 2,\n-               },\n-           },\n-           size: Size {\n-               raw: 2,\n+               abi: Align(2 bytes),\n+               pref: Align(4 bytes),\n            },\n+           size: Size(2 bytes),\n        }\n   --> $DIR/thumb-enum.rs:24:1\n    |\n@@ -259,9 +211,7 @@ LL | enum C { Chaenomeles = 256, }\n error: layout_of(P) = Layout {\n            fields: Arbitrary {\n                offsets: [\n-                   Size {\n-                       raw: 0,\n-                   },\n+                   Size(0 bytes),\n                ],\n                memory_index: [\n                    0,\n@@ -291,16 +241,10 @@ error: layout_of(P) = Layout {\n                        },\n                        largest_niche: None,\n                        align: AbiAndPrefAlign {\n-                           abi: Align {\n-                               pow2: 2,\n-                           },\n-                           pref: Align {\n-                               pow2: 2,\n-                           },\n-                       },\n-                       size: Size {\n-                           raw: 4,\n+                           abi: Align(4 bytes),\n+                           pref: Align(4 bytes),\n                        },\n+                       size: Size(4 bytes),\n                    },\n                ],\n            },\n@@ -315,9 +259,7 @@ error: layout_of(P) = Layout {\n            ),\n            largest_niche: Some(\n                Niche {\n-                   offset: Size {\n-                       raw: 0,\n-                   },\n+                   offset: Size(0 bytes),\n                    value: Int(\n                        I32,\n                        false,\n@@ -326,16 +268,10 @@ error: layout_of(P) = Layout {\n                },\n            ),\n            align: AbiAndPrefAlign {\n-               abi: Align {\n-                   pow2: 2,\n-               },\n-               pref: Align {\n-                   pow2: 2,\n-               },\n-           },\n-           size: Size {\n-               raw: 4,\n+               abi: Align(4 bytes),\n+               pref: Align(4 bytes),\n            },\n+           size: Size(4 bytes),\n        }\n   --> $DIR/thumb-enum.rs:28:1\n    |\n@@ -345,9 +281,7 @@ LL | enum P { Peach = 0x1000_0000isize, }\n error: layout_of(T) = Layout {\n            fields: Arbitrary {\n                offsets: [\n-                   Size {\n-                       raw: 0,\n-                   },\n+                   Size(0 bytes),\n                ],\n                memory_index: [\n                    0,\n@@ -377,16 +311,10 @@ error: layout_of(T) = Layout {\n                        },\n                        largest_niche: None,\n                        align: AbiAndPrefAlign {\n-                           abi: Align {\n-                               pow2: 2,\n-                           },\n-                           pref: Align {\n-                               pow2: 2,\n-                           },\n-                       },\n-                       size: Size {\n-                           raw: 4,\n+                           abi: Align(4 bytes),\n+                           pref: Align(4 bytes),\n                        },\n+                       size: Size(4 bytes),\n                    },\n                ],\n            },\n@@ -401,9 +329,7 @@ error: layout_of(T) = Layout {\n            ),\n            largest_niche: Some(\n                Niche {\n-                   offset: Size {\n-                       raw: 0,\n-                   },\n+                   offset: Size(0 bytes),\n                    value: Int(\n                        I32,\n                        true,\n@@ -412,16 +338,10 @@ error: layout_of(T) = Layout {\n                },\n            ),\n            align: AbiAndPrefAlign {\n-               abi: Align {\n-                   pow2: 2,\n-               },\n-               pref: Align {\n-                   pow2: 2,\n-               },\n-           },\n-           size: Size {\n-               raw: 4,\n+               abi: Align(4 bytes),\n+               pref: Align(4 bytes),\n            },\n+           size: Size(4 bytes),\n        }\n   --> $DIR/thumb-enum.rs:34:1\n    |"}, {"sha": "8faf8593294cc78724faccf3fc19493b2168a2db", "filename": "src/test/ui/layout/zero-sized-array-union.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c29f8575acae4b1e533f630b51a639758919911c/src%2Ftest%2Fui%2Flayout%2Fzero-sized-array-union.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c29f8575acae4b1e533f630b51a639758919911c/src%2Ftest%2Fui%2Flayout%2Fzero-sized-array-union.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flayout%2Fzero-sized-array-union.stderr?ref=c29f8575acae4b1e533f630b51a639758919911c", "patch": "@@ -1,22 +1,22 @@\n-error: homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size { raw: 4 } }))\n+error: homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size(4 bytes) }))\n   --> $DIR/zero-sized-array-union.rs:59:1\n    |\n LL | type TestBaz1 = Baz1;\n    | ^^^^^^^^^^^^^^^^^^^^^\n \n-error: homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size { raw: 4 } }))\n+error: homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size(4 bytes) }))\n   --> $DIR/zero-sized-array-union.rs:70:1\n    |\n LL | type TestBaz2 = Baz2;\n    | ^^^^^^^^^^^^^^^^^^^^^\n \n-error: homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size { raw: 4 } }))\n+error: homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size(4 bytes) }))\n   --> $DIR/zero-sized-array-union.rs:81:1\n    |\n LL | type TestBaz3 = Baz3;\n    | ^^^^^^^^^^^^^^^^^^^^^\n \n-error: homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size { raw: 4 } }))\n+error: homogeneous_aggregate: Ok(Homogeneous(Reg { kind: Float, size: Size(4 bytes) }))\n   --> $DIR/zero-sized-array-union.rs:92:1\n    |\n LL | type TestBaz4 = Baz4;"}]}