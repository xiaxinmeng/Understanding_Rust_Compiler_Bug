{"sha": "c8e12cc8bf0de646234524924f39c85d9f3c7c37", "node_id": "C_kwDOAAsO6NoAKGM4ZTEyY2M4YmYwZGU2NDYyMzQ1MjQ5MjRmMzljODVkOWYzYzdjMzc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-19T02:13:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-19T02:13:54Z"}, "message": "Auto merge of #101799 - LukeMathWalker:distribute-json-doc, r=jyn514\n\nDistribute json doc\n\n# Overview\n\nWe add a new component, `rust-json-docs`, to distribute the JSON version of rustdoc's output for public compiler crates (i.e. `std`, `alloc`, `proc_macro`, `core` and `test`).\nAs discussed in #101383, we do not bundle this up as part of the existing `rust-docs` component since `rustdoc`'s JSON format is still unstable.\n\n# Open questions / Doubts\n\nI tried my best, but I never touched this codebase and I couldn't find much documentation on how `dist` works - I pattern-matched existing code, which might have led to some non-sensical choices in the eyes of people more familiar with the codebase. In particular, I am not sure if my choice of adding a new config flag is appropriate or if the decision to build/not build the JSON docs is more appropriately gated by one of the existing flags.\nAny suggestion is more than welcome.\n\nCloses #101383", "tree": {"sha": "8171778babc259edafa48ae8332e304b569f06c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8171778babc259edafa48ae8332e304b569f06c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c8e12cc8bf0de646234524924f39c85d9f3c7c37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c8e12cc8bf0de646234524924f39c85d9f3c7c37", "html_url": "https://github.com/rust-lang/rust/commit/c8e12cc8bf0de646234524924f39c85d9f3c7c37", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c8e12cc8bf0de646234524924f39c85d9f3c7c37/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a37499ae66ec5fc52a93d71493b78fb141c32f6b", "url": "https://api.github.com/repos/rust-lang/rust/commits/a37499ae66ec5fc52a93d71493b78fb141c32f6b", "html_url": "https://github.com/rust-lang/rust/commit/a37499ae66ec5fc52a93d71493b78fb141c32f6b"}, {"sha": "235dccef2b8012e7d9da87f4b6091912d802cff2", "url": "https://api.github.com/repos/rust-lang/rust/commits/235dccef2b8012e7d9da87f4b6091912d802cff2", "html_url": "https://github.com/rust-lang/rust/commit/235dccef2b8012e7d9da87f4b6091912d802cff2"}], "stats": {"total": 281, "additions": 219, "deletions": 62}, "files": [{"sha": "bc6283ef467d62084fc81f2ce8f200b64af26e0a", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c8e12cc8bf0de646234524924f39c85d9f3c7c37/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8e12cc8bf0de646234524924f39c85d9f3c7c37/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=c8e12cc8bf0de646234524924f39c85d9f3c7c37", "patch": "@@ -708,6 +708,7 @@ impl<'a> Builder<'a> {\n             Kind::Dist => describe!(\n                 dist::Docs,\n                 dist::RustcDocs,\n+                dist::JsonDocs,\n                 dist::Mingw,\n                 dist::Rustc,\n                 dist::Std,"}, {"sha": "88bbcc93d072cc47ba11b30b14a2bdbf3334b368", "filename": "src/bootstrap/builder/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8e12cc8bf0de646234524924f39c85d9f3c7c37/src%2Fbootstrap%2Fbuilder%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8e12cc8bf0de646234524924f39c85d9f3c7c37/src%2Fbootstrap%2Fbuilder%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder%2Ftests.rs?ref=c8e12cc8bf0de646234524924f39c85d9f3c7c37", "patch": "@@ -236,7 +236,7 @@ mod defaults {\n     fn doc_default() {\n         let mut config = configure(\"doc\", &[\"A\"], &[\"A\"]);\n         config.compiler_docs = true;\n-        config.cmd = Subcommand::Doc { paths: Vec::new(), open: false };\n+        config.cmd = Subcommand::Doc { paths: Vec::new(), open: false, json: false };\n         let mut cache = run_build(&[], config);\n         let a = TargetSelection::from_user(\"A\");\n \n@@ -587,7 +587,7 @@ mod dist {\n     fn doc_ci() {\n         let mut config = configure(&[\"A\"], &[\"A\"]);\n         config.compiler_docs = true;\n-        config.cmd = Subcommand::Doc { paths: Vec::new(), open: false };\n+        config.cmd = Subcommand::Doc { paths: Vec::new(), open: false, json: false };\n         let build = Build::new(config);\n         let mut builder = Builder::new(&build);\n         builder.run_step_descriptions(&Builder::get_step_descriptions(Kind::Doc), &[]);"}, {"sha": "c9ee3c1c7d65d435fea3e1a1ffef9d14f22bcc92", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/c8e12cc8bf0de646234524924f39c85d9f3c7c37/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8e12cc8bf0de646234524924f39c85d9f3c7c37/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=c8e12cc8bf0de646234524924f39c85d9f3c7c37", "patch": "@@ -87,6 +87,45 @@ impl Step for Docs {\n     }\n }\n \n+#[derive(Debug, PartialOrd, Ord, Copy, Clone, Hash, PartialEq, Eq)]\n+pub struct JsonDocs {\n+    pub host: TargetSelection,\n+}\n+\n+impl Step for JsonDocs {\n+    type Output = Option<GeneratedTarball>;\n+    const DEFAULT: bool = true;\n+\n+    fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n+        let default = run.builder.config.docs;\n+        run.alias(\"rust-json-docs\").default_condition(default)\n+    }\n+\n+    fn make_run(run: RunConfig<'_>) {\n+        run.builder.ensure(JsonDocs { host: run.target });\n+    }\n+\n+    /// Builds the `rust-json-docs` installer component.\n+    fn run(self, builder: &Builder<'_>) -> Option<GeneratedTarball> {\n+        // This prevents JSON docs from being built for \"dist\" or \"install\"\n+        // on the stable/beta channels. The JSON format is not stable yet and\n+        // should not be included in stable/beta toolchains.\n+        if !builder.build.unstable_features() {\n+            return None;\n+        }\n+\n+        let host = self.host;\n+        builder.ensure(crate::doc::JsonStd { stage: builder.top_stage, target: host });\n+\n+        let dest = \"share/doc/rust/json\";\n+\n+        let mut tarball = Tarball::new(builder, \"rust-json-docs\", &host.triple);\n+        tarball.set_product_name(\"Rust Documentation In JSON Format\");\n+        tarball.add_bulk_dir(&builder.json_doc_out(host), dest);\n+        Some(tarball.generate())\n+    }\n+}\n+\n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct RustcDocs {\n     pub host: TargetSelection,"}, {"sha": "819af6587484d4c048ee3316e1dad67c7c7475d2", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 153, "deletions": 59, "changes": 212, "blob_url": "https://github.com/rust-lang/rust/blob/c8e12cc8bf0de646234524924f39c85d9f3c7c37/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8e12cc8bf0de646234524924f39c85d9f3c7c37/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=c8e12cc8bf0de646234524924f39c85d9f3c7c37", "patch": "@@ -7,6 +7,7 @@\n //! Everything here is basically just a shim around calling either `rustbook` or\n //! `rustdoc`.\n \n+use std::ffi::OsStr;\n use std::fs;\n use std::io;\n use std::path::{Path, PathBuf};\n@@ -425,49 +426,24 @@ impl Step for Std {\n     fn run(self, builder: &Builder<'_>) {\n         let stage = self.stage;\n         let target = self.target;\n-        builder.info(&format!(\"Documenting stage{} std ({})\", stage, target));\n-        if builder.no_std(target) == Some(true) {\n-            panic!(\n-                \"building std documentation for no_std target {target} is not supported\\n\\\n-                 Set `docs = false` in the config to disable documentation.\"\n-            );\n-        }\n         let out = builder.doc_out(target);\n         t!(fs::create_dir_all(&out));\n-        let compiler = builder.compiler(stage, builder.config.build);\n-\n-        let out_dir = builder.stage_out(compiler, Mode::Std).join(target.triple).join(\"doc\");\n-\n         t!(fs::copy(builder.src.join(\"src/doc/rust.css\"), out.join(\"rust.css\")));\n \n-        let run_cargo_rustdoc_for = |package: &str| {\n-            let mut cargo =\n-                builder.cargo(compiler, Mode::Std, SourceType::InTree, target, \"rustdoc\");\n-            compile::std_cargo(builder, target, compiler.stage, &mut cargo);\n-\n-            cargo\n-                .arg(\"-p\")\n-                .arg(package)\n-                .arg(\"-Zskip-rustdoc-fingerprint\")\n-                .arg(\"--\")\n-                .arg(\"--markdown-css\")\n-                .arg(\"rust.css\")\n-                .arg(\"--markdown-no-toc\")\n-                .arg(\"-Z\")\n-                .arg(\"unstable-options\")\n-                .arg(\"--resource-suffix\")\n-                .arg(&builder.version)\n-                .arg(\"--index-page\")\n-                .arg(&builder.src.join(\"src/doc/index.md\"));\n-\n-            if !builder.config.docs_minification {\n-                cargo.arg(\"--disable-minification\");\n-            }\n-\n-            builder.run(&mut cargo.into());\n-        };\n+        let index_page = builder.src.join(\"src/doc/index.md\").into_os_string();\n+        let mut extra_args = vec![\n+            OsStr::new(\"--markdown-css\"),\n+            OsStr::new(\"rust.css\"),\n+            OsStr::new(\"--markdown-no-toc\"),\n+            OsStr::new(\"--index-page\"),\n+            &index_page,\n+        ];\n+\n+        if !builder.config.docs_minification {\n+            extra_args.push(OsStr::new(\"--disable-minification\"));\n+        }\n \n-        let paths = builder\n+        let requested_crates = builder\n             .paths\n             .iter()\n             .map(components_simplified)\n@@ -485,37 +461,155 @@ impl Step for Std {\n             })\n             .collect::<Vec<_>>();\n \n-        // Only build the following crates. While we could just iterate over the\n-        // folder structure, that would also build internal crates that we do\n-        // not want to show in documentation. These crates will later be visited\n-        // by the rustc step, so internal documentation will show them.\n-        //\n-        // Note that the order here is important! The crates need to be\n-        // processed starting from the leaves, otherwise rustdoc will not\n-        // create correct links between crates because rustdoc depends on the\n-        // existence of the output directories to know if it should be a local\n-        // or remote link.\n-        let krates = [\"core\", \"alloc\", \"std\", \"proc_macro\", \"test\"];\n-        for krate in &krates {\n-            run_cargo_rustdoc_for(krate);\n-            if paths.iter().any(|p| p == krate) {\n-                // No need to document more of the libraries if we have the one we want.\n-                break;\n-            }\n-        }\n-        builder.cp_r(&out_dir, &out);\n+        doc_std(\n+            builder,\n+            DocumentationFormat::HTML,\n+            stage,\n+            target,\n+            &out,\n+            &extra_args,\n+            &requested_crates,\n+        );\n \n         // Look for library/std, library/core etc in the `x.py doc` arguments and\n         // open the corresponding rendered docs.\n-        for requested_crate in paths {\n-            if krates.iter().any(|k| *k == requested_crate.as_str()) {\n+        for requested_crate in requested_crates {\n+            if STD_PUBLIC_CRATES.iter().any(|k| *k == requested_crate.as_str()) {\n                 let index = out.join(requested_crate).join(\"index.html\");\n                 open(builder, &index);\n             }\n         }\n     }\n }\n \n+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n+pub struct JsonStd {\n+    pub stage: u32,\n+    pub target: TargetSelection,\n+}\n+\n+impl Step for JsonStd {\n+    type Output = ();\n+    const DEFAULT: bool = false;\n+\n+    fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n+        let default = run.builder.config.docs && run.builder.config.cmd.json();\n+        run.all_krates(\"test\").path(\"library\").default_condition(default)\n+    }\n+\n+    fn make_run(run: RunConfig<'_>) {\n+        run.builder.ensure(Std { stage: run.builder.top_stage, target: run.target });\n+    }\n+\n+    /// Build JSON documentation for the standard library crates.\n+    ///\n+    /// This is largely just a wrapper around `cargo doc`.\n+    fn run(self, builder: &Builder<'_>) {\n+        let stage = self.stage;\n+        let target = self.target;\n+        let out = builder.json_doc_out(target);\n+        t!(fs::create_dir_all(&out));\n+        let extra_args = [OsStr::new(\"--output-format\"), OsStr::new(\"json\")];\n+        doc_std(builder, DocumentationFormat::JSON, stage, target, &out, &extra_args, &[])\n+    }\n+}\n+\n+/// Name of the crates that are visible to consumers of the standard library.\n+/// Documentation for internal crates is handled by the rustc step, so internal crates will show\n+/// up there.\n+///\n+/// Order here is important!\n+/// Crates need to be processed starting from the leaves, otherwise rustdoc will not\n+/// create correct links between crates because rustdoc depends on the\n+/// existence of the output directories to know if it should be a local\n+/// or remote link.\n+const STD_PUBLIC_CRATES: [&str; 5] = [\"core\", \"alloc\", \"std\", \"proc_macro\", \"test\"];\n+\n+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n+enum DocumentationFormat {\n+    HTML,\n+    JSON,\n+}\n+\n+impl DocumentationFormat {\n+    fn as_str(&self) -> &str {\n+        match self {\n+            DocumentationFormat::HTML => \"HTML\",\n+            DocumentationFormat::JSON => \"JSON\",\n+        }\n+    }\n+}\n+\n+/// Build the documentation for public standard library crates.\n+///\n+/// `requested_crates` can be used to build only a subset of the crates. If empty, all crates will\n+/// be built.\n+fn doc_std(\n+    builder: &Builder<'_>,\n+    format: DocumentationFormat,\n+    stage: u32,\n+    target: TargetSelection,\n+    out: &Path,\n+    extra_args: &[&OsStr],\n+    requested_crates: &[String],\n+) {\n+    builder.info(&format!(\n+        \"Documenting stage{} std ({}) in {} format\",\n+        stage,\n+        target,\n+        format.as_str()\n+    ));\n+    if builder.no_std(target) == Some(true) {\n+        panic!(\n+            \"building std documentation for no_std target {target} is not supported\\n\\\n+             Set `docs = false` in the config to disable documentation.\"\n+        );\n+    }\n+    let compiler = builder.compiler(stage, builder.config.build);\n+    // This is directory where the compiler will place the output of the command.\n+    // We will then copy the files from this directory into the final `out` directory, the specified\n+    // as a function parameter.\n+    let out_dir = builder.stage_out(compiler, Mode::Std).join(target.triple).join(\"doc\");\n+    // `cargo` uses the same directory for both JSON docs and HTML docs.\n+    // This could lead to cross-contamination when copying files into the specified `out` directory.\n+    // For example:\n+    // ```bash\n+    // x doc std\n+    // x doc std --json\n+    // ```\n+    // could lead to HTML docs being copied into the JSON docs output directory.\n+    // To avoid this issue, we clean the doc folder before invoking `cargo`.\n+    if out_dir.exists() {\n+        builder.remove_dir(&out_dir);\n+    }\n+\n+    let run_cargo_rustdoc_for = |package: &str| {\n+        let mut cargo = builder.cargo(compiler, Mode::Std, SourceType::InTree, target, \"rustdoc\");\n+        compile::std_cargo(builder, target, compiler.stage, &mut cargo);\n+        cargo\n+            .arg(\"-p\")\n+            .arg(package)\n+            .arg(\"-Zskip-rustdoc-fingerprint\")\n+            .arg(\"--\")\n+            .arg(\"-Z\")\n+            .arg(\"unstable-options\")\n+            .arg(\"--resource-suffix\")\n+            .arg(&builder.version)\n+            .args(extra_args);\n+        builder.run(&mut cargo.into());\n+    };\n+\n+    for krate in STD_PUBLIC_CRATES {\n+        run_cargo_rustdoc_for(krate);\n+        if requested_crates.iter().any(|p| p == krate) {\n+            // No need to document more of the libraries if we have the one we want.\n+            break;\n+        }\n+    }\n+\n+    builder.cp_r(&out_dir, &out);\n+}\n+\n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct Rustc {\n     pub stage: u32,"}, {"sha": "802b49d748ac6f64fccc89bfcd9790939e6d27cf", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c8e12cc8bf0de646234524924f39c85d9f3c7c37/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8e12cc8bf0de646234524924f39c85d9f3c7c37/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=c8e12cc8bf0de646234524924f39c85d9f3c7c37", "patch": "@@ -107,6 +107,7 @@ pub enum Subcommand {\n     Doc {\n         paths: Vec<PathBuf>,\n         open: bool,\n+        json: bool,\n     },\n     Test {\n         paths: Vec<PathBuf>,\n@@ -325,6 +326,11 @@ To learn more about a subcommand, run `./x.py <subcommand> -h`\",\n             }\n             Kind::Doc => {\n                 opts.optflag(\"\", \"open\", \"open the docs in a browser\");\n+                opts.optflag(\n+                    \"\",\n+                    \"json\",\n+                    \"render the documentation in JSON format in addition to the usual HTML format\",\n+                );\n             }\n             Kind::Clean => {\n                 opts.optflag(\"\", \"all\", \"clean all build artifacts\");\n@@ -493,6 +499,7 @@ Arguments:\n         ./x.py doc src/doc/book\n         ./x.py doc src/doc/nomicon\n         ./x.py doc src/doc/book library/std\n+        ./x.py doc library/std --json\n         ./x.py doc library/std --open\n \n     If no arguments are passed then everything is documented:\n@@ -581,7 +588,11 @@ Arguments:\n                 },\n             },\n             Kind::Bench => Subcommand::Bench { paths, test_args: matches.opt_strs(\"test-args\") },\n-            Kind::Doc => Subcommand::Doc { paths, open: matches.opt_present(\"open\") },\n+            Kind::Doc => Subcommand::Doc {\n+                paths,\n+                open: matches.opt_present(\"open\"),\n+                json: matches.opt_present(\"json\"),\n+            },\n             Kind::Clean => {\n                 if !paths.is_empty() {\n                     println!(\"\\nclean does not take a path argument\\n\");\n@@ -787,6 +798,13 @@ impl Subcommand {\n             _ => false,\n         }\n     }\n+\n+    pub fn json(&self) -> bool {\n+        match *self {\n+            Subcommand::Doc { json, .. } => json,\n+            _ => false,\n+        }\n+    }\n }\n \n fn split(s: &[String]) -> Vec<String> {"}, {"sha": "b7d271e6494b1d2e9c69560772d47e8b292f7740", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c8e12cc8bf0de646234524924f39c85d9f3c7c37/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8e12cc8bf0de646234524924f39c85d9f3c7c37/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=c8e12cc8bf0de646234524924f39c85d9f3c7c37", "patch": "@@ -825,6 +825,11 @@ impl Build {\n         self.out.join(&*target.triple).join(\"doc\")\n     }\n \n+    /// Output directory for all JSON-formatted documentation for a target\n+    fn json_doc_out(&self, target: TargetSelection) -> PathBuf {\n+        self.out.join(&*target.triple).join(\"json-doc\")\n+    }\n+\n     fn test_out(&self, target: TargetSelection) -> PathBuf {\n         self.out.join(&*target.triple).join(\"test\")\n     }"}]}