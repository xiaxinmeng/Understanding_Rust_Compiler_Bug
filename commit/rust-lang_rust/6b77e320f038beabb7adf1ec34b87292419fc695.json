{"sha": "6b77e320f038beabb7adf1ec34b87292419fc695", "node_id": "C_kwDOAAsO6NoAKDZiNzdlMzIwZjAzOGJlYWJiN2FkZjFlYzM0Yjg3MjkyNDE5ZmM2OTU", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-09-21T22:54:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-09-21T22:54:56Z"}, "message": "Merge #10306\n\n10306: Generate function assist creates bad param names for const/static item args r=XFFXFF a=XFFXFF\n\nTry to fix #10278 \n\nCo-authored-by: zhoufan <1247714429@qq.com>", "tree": {"sha": "50262a0edc6cc648c622dea58bb50f68afe06341", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50262a0edc6cc648c622dea58bb50f68afe06341"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b77e320f038beabb7adf1ec34b87292419fc695", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhSmLACRBK7hj4Ov3rIwAAQKYIAJEjRiJvt3zglwWCB4pcJHJa\n+zGF+5Lk/4yXKVxrQSWkbm4DofEEPo2GRsLPeBChbdT4/w98WzREILr5c9I7EUpJ\nkqYfFbeipVEmvvV/VsZAnGaVMRz1lhNUf42/XkAeWBtuzkC7RfXGVSWbMtGdR3na\nVT2//VPaiXDimUcxR212AWdiaXUEzgnXtOLU1LlOx3wQZOzrCjyO+q1FKqiEsml5\nA+hbhDiDRJNCxdS7n6E4eyDNnsJezx8ZcMh6IukQtS5lP47v2NhXjysCuc4iY6BK\nP3DyV/oMzzEIc2YOlfUqKFQFlxQu7zHTWzqiNhSl8Xzt1m3wKTb0mcuQVsUTmSc=\n=Pv50\n-----END PGP SIGNATURE-----\n", "payload": "tree 50262a0edc6cc648c622dea58bb50f68afe06341\nparent 254022c13cd286d3697f97bc8ef6be7d90d18d9d\nparent 8690cfb868f6116f223ab424d48945f7db45cb02\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1632264896 +0000\ncommitter GitHub <noreply@github.com> 1632264896 +0000\n\nMerge #10306\n\n10306: Generate function assist creates bad param names for const/static item args r=XFFXFF a=XFFXFF\n\nTry to fix #10278 \n\nCo-authored-by: zhoufan <1247714429@qq.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b77e320f038beabb7adf1ec34b87292419fc695", "html_url": "https://github.com/rust-lang/rust/commit/6b77e320f038beabb7adf1ec34b87292419fc695", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b77e320f038beabb7adf1ec34b87292419fc695/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "254022c13cd286d3697f97bc8ef6be7d90d18d9d", "url": "https://api.github.com/repos/rust-lang/rust/commits/254022c13cd286d3697f97bc8ef6be7d90d18d9d", "html_url": "https://github.com/rust-lang/rust/commit/254022c13cd286d3697f97bc8ef6be7d90d18d9d"}, {"sha": "8690cfb868f6116f223ab424d48945f7db45cb02", "url": "https://api.github.com/repos/rust-lang/rust/commits/8690cfb868f6116f223ab424d48945f7db45cb02", "html_url": "https://github.com/rust-lang/rust/commit/8690cfb868f6116f223ab424d48945f7db45cb02"}], "stats": {"total": 94, "additions": 87, "deletions": 7}, "files": [{"sha": "0255e508b4fc4733451d2ebe6950fdf5b6aec042", "filename": "crates/ide_assists/src/handlers/generate_function.rs", "status": "modified", "additions": 87, "deletions": 7, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/6b77e320f038beabb7adf1ec34b87292419fc695/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b77e320f038beabb7adf1ec34b87292419fc695/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs?ref=6b77e320f038beabb7adf1ec34b87292419fc695", "patch": "@@ -1,5 +1,10 @@\n-use hir::{HasSource, HirDisplay, Module, TypeInfo};\n-use ide_db::{base_db::FileId, helpers::SnippetCap};\n+use hir::{HasSource, HirDisplay, Module, ModuleDef, Semantics, TypeInfo};\n+use ide_db::{\n+    base_db::FileId,\n+    defs::{Definition, NameRefClass},\n+    helpers::SnippetCap,\n+    RootDatabase,\n+};\n use rustc_hash::{FxHashMap, FxHashSet};\n use stdx::to_lower_snake_case;\n use syntax::{\n@@ -438,7 +443,7 @@ fn fn_args(\n     let mut arg_names = Vec::new();\n     let mut arg_types = Vec::new();\n     for arg in call.arg_list()?.args() {\n-        arg_names.push(fn_arg_name(&arg));\n+        arg_names.push(fn_arg_name(&ctx.sema, &arg));\n         arg_types.push(match fn_arg_type(ctx, target_module, &arg) {\n             Some(ty) => {\n                 if !ty.is_empty() && ty.starts_with('&') {\n@@ -503,12 +508,18 @@ fn deduplicate_arg_names(arg_names: &mut Vec<String>) {\n     }\n }\n \n-fn fn_arg_name(arg_expr: &ast::Expr) -> String {\n+fn fn_arg_name(sema: &Semantics<RootDatabase>, arg_expr: &ast::Expr) -> String {\n     let name = (|| match arg_expr {\n-        ast::Expr::CastExpr(cast_expr) => Some(fn_arg_name(&cast_expr.expr()?)),\n+        ast::Expr::CastExpr(cast_expr) => Some(fn_arg_name(sema, &cast_expr.expr()?)),\n         expr => {\n-            let s = expr.syntax().descendants().filter_map(ast::NameRef::cast).last()?.to_string();\n-            Some(to_lower_snake_case(&s))\n+            let name_ref = expr.syntax().descendants().filter_map(ast::NameRef::cast).last()?;\n+            if let Some(NameRefClass::Definition(Definition::ModuleDef(\n+                ModuleDef::Const(_) | ModuleDef::Static(_),\n+            ))) = NameRefClass::classify(sema, &name_ref)\n+            {\n+                return Some(name_ref.to_string().to_lowercase());\n+            };\n+            Some(to_lower_snake_case(&name_ref.to_string()))\n         }\n     })();\n     match name {\n@@ -1683,6 +1694,75 @@ fn main() {\n fn foo(arg0: ()) ${0:-> _} {\n     todo!()\n }\n+\",\n+        )\n+    }\n+\n+    #[test]\n+    fn add_function_with_const_arg() {\n+        check_assist(\n+            generate_function,\n+            r\"\n+const VALUE: usize = 0;\n+fn main() {\n+    foo$0(VALUE);\n+}\n+\",\n+            r\"\n+const VALUE: usize = 0;\n+fn main() {\n+    foo(VALUE);\n+}\n+\n+fn foo(value: usize) ${0:-> _} {\n+    todo!()\n+}\n+\",\n+        )\n+    }\n+\n+    #[test]\n+    fn add_function_with_static_arg() {\n+        check_assist(\n+            generate_function,\n+            r\"\n+static VALUE: usize = 0;\n+fn main() {\n+    foo$0(VALUE);\n+}\n+\",\n+            r\"\n+static VALUE: usize = 0;\n+fn main() {\n+    foo(VALUE);\n+}\n+\n+fn foo(value: usize) ${0:-> _} {\n+    todo!()\n+}\n+\",\n+        )\n+    }\n+\n+    #[test]\n+    fn add_function_with_static_mut_arg() {\n+        check_assist(\n+            generate_function,\n+            r\"\n+static mut VALUE: usize = 0;\n+fn main() {\n+    foo$0(VALUE);\n+}\n+\",\n+            r\"\n+static mut VALUE: usize = 0;\n+fn main() {\n+    foo(VALUE);\n+}\n+\n+fn foo(value: usize) ${0:-> _} {\n+    todo!()\n+}\n \",\n         )\n     }"}]}