{"sha": "1230a08679e70b8d9a9ce653f8663ff27832db54", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyMzBhMDg2NzllNzBiOGQ5YTljZTY1M2Y4NjYzZmYyNzgzMmRiNTQ=", "commit": {"author": {"name": "Paul Dicker", "email": "pitdicker@gmail.com", "date": "2016-01-14T15:59:28Z"}, "committer": {"name": "Paul Dicker", "email": "pitdicker@gmail.com", "date": "2016-01-14T15:59:28Z"}, "message": "Fix doctests", "tree": {"sha": "20f266b9b3f3b8ced311a6312322db458b264ad1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20f266b9b3f3b8ced311a6312322db458b264ad1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1230a08679e70b8d9a9ce653f8663ff27832db54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1230a08679e70b8d9a9ce653f8663ff27832db54", "html_url": "https://github.com/rust-lang/rust/commit/1230a08679e70b8d9a9ce653f8663ff27832db54", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1230a08679e70b8d9a9ce653f8663ff27832db54/comments", "author": {"login": "pitdicker", "id": 6255050, "node_id": "MDQ6VXNlcjYyNTUwNTA=", "avatar_url": "https://avatars.githubusercontent.com/u/6255050?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pitdicker", "html_url": "https://github.com/pitdicker", "followers_url": "https://api.github.com/users/pitdicker/followers", "following_url": "https://api.github.com/users/pitdicker/following{/other_user}", "gists_url": "https://api.github.com/users/pitdicker/gists{/gist_id}", "starred_url": "https://api.github.com/users/pitdicker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pitdicker/subscriptions", "organizations_url": "https://api.github.com/users/pitdicker/orgs", "repos_url": "https://api.github.com/users/pitdicker/repos", "events_url": "https://api.github.com/users/pitdicker/events{/privacy}", "received_events_url": "https://api.github.com/users/pitdicker/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pitdicker", "id": 6255050, "node_id": "MDQ6VXNlcjYyNTUwNTA=", "avatar_url": "https://avatars.githubusercontent.com/u/6255050?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pitdicker", "html_url": "https://github.com/pitdicker", "followers_url": "https://api.github.com/users/pitdicker/followers", "following_url": "https://api.github.com/users/pitdicker/following{/other_user}", "gists_url": "https://api.github.com/users/pitdicker/gists{/gist_id}", "starred_url": "https://api.github.com/users/pitdicker/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pitdicker/subscriptions", "organizations_url": "https://api.github.com/users/pitdicker/orgs", "repos_url": "https://api.github.com/users/pitdicker/repos", "events_url": "https://api.github.com/users/pitdicker/events{/privacy}", "received_events_url": "https://api.github.com/users/pitdicker/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a1817c9d4a0649a7ea1c948bd731a5b63aa3d06", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a1817c9d4a0649a7ea1c948bd731a5b63aa3d06", "html_url": "https://github.com/rust-lang/rust/commit/7a1817c9d4a0649a7ea1c948bd731a5b63aa3d06"}], "stats": {"total": 9, "additions": 6, "deletions": 3}, "files": [{"sha": "fcaa2fede2e8722d75e9763fe220867e8b284feb", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1230a08679e70b8d9a9ce653f8663ff27832db54/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1230a08679e70b8d9a9ce653f8663ff27832db54/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=1230a08679e70b8d9a9ce653f8663ff27832db54", "patch": "@@ -515,6 +515,7 @@ impl OpenOptions {\n     /// # Examples\n     ///\n     /// ```no_run\n+    /// #![feature(expand_open_options)]\n     /// use std::fs::OpenOptions;\n     ///\n     /// let file = OpenOptions::new().write(true).create_new(true).open(\"foo.txt\");"}, {"sha": "33f29d44f87b6a177a85df2492ff60a59be54aac", "filename": "src/libstd/sys/unix/ext/fs.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1230a08679e70b8d9a9ce653f8663ff27832db54/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1230a08679e70b8d9a9ce653f8663ff27832db54/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs?ref=1230a08679e70b8d9a9ce653f8663ff27832db54", "patch": "@@ -114,12 +114,13 @@ pub trait OpenOptionsExt {\n     ///\n     /// # Examples\n     ///\n-    /// ```no_run\n+    /// ```rust,ignore\n     /// extern crate libc;\n     /// use std::fs::OpenOptions;\n     /// use std::os::unix::fs::OpenOptionsExt;\n     ///\n-    /// let options = OpenOptions::new().write(true);\n+    /// let mut options = OpenOptions::new();\n+    /// options.write(true);\n     /// if cfg!(unix) { options.custom_flags(libc::O_NOFOLLOW); }\n     /// let file = options.open(\"foo.txt\");\n     /// ```"}, {"sha": "4bb67b0fad953e538389bba84bacdadb6b53f98e", "filename": "src/libstd/sys/windows/ext/fs.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1230a08679e70b8d9a9ce653f8663ff27832db54/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1230a08679e70b8d9a9ce653f8663ff27832db54/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs?ref=1230a08679e70b8d9a9ce653f8663ff27832db54", "patch": "@@ -77,7 +77,8 @@ pub trait OpenOptionsExt {\n     /// use std::fs::OpenOptions;\n     /// use std::os::windows::fs::OpenOptionsExt;\n     ///\n-    /// let options = OpenOptions::new().create(true).write(true);\n+    /// let mut options = OpenOptions::new();\n+    /// options.create(true).write(true);\n     /// if cfg!(windows) { options.custom_flags(winapi::FILE_FLAG_DELETE_ON_CLOSE); }\n     /// let file = options.open(\"foo.txt\");\n     /// ```"}]}