{"sha": "d97e8ca33524399620aef1c0053f8b593bfbf521", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5N2U4Y2EzMzUyNDM5OTYyMGFlZjFjMDA1M2Y4YjU5M2JmYmY1MjE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-06-15T10:00:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-15T10:00:59Z"}, "message": "Rollup merge of #72740 - estebank:recursive-indirection, r=matthewjasper\n\nOn recursive ADT, provide indirection structured suggestion", "tree": {"sha": "be3ee681901ecf70fde8aebece3212c2e7d43241", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be3ee681901ecf70fde8aebece3212c2e7d43241"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d97e8ca33524399620aef1c0053f8b593bfbf521", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe50bcCRBK7hj4Ov3rIwAAdHIIADJvlTeZKWFtiYHWtg23xFDQ\nrK2TREx5GUavsZtHmYl559kQcywVQ5tyjeA2znEi8O3EyB12B7oMdoPVMa/vc2Wx\nLszrefbKuBX3hEaN8ba+hzeDQvPdTzizdixH+rIGzF983ED1RYV5ijqeqXpIlZRm\nA9bhQJlIdaM06PYwk1cA5KaZ4MgYyKotJSon7mcJJ0TvTVwD/+SVBJF6XTH/fm7v\nwkmSHm13gnb1TfPLdetS5H/H5DTrfs6tf+Bhsb7muyCNQCVydv8BKN05s2JrUCk6\n/IO7nhseAMv7kw5HUxW1MxEs2xXTvinZBaQmS1wqov3CMXR+zVLF9Syrydpv5Sk=\n=0kgU\n-----END PGP SIGNATURE-----\n", "payload": "tree be3ee681901ecf70fde8aebece3212c2e7d43241\nparent eef9356e39d58800e77727a9045b8326a5fb20e5\nparent 03552ec3fa4828329874a17d1b8966a0c03809d8\nauthor Ralf Jung <post@ralfj.de> 1592215259 +0200\ncommitter GitHub <noreply@github.com> 1592215259 +0200\n\nRollup merge of #72740 - estebank:recursive-indirection, r=matthewjasper\n\nOn recursive ADT, provide indirection structured suggestion\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d97e8ca33524399620aef1c0053f8b593bfbf521", "html_url": "https://github.com/rust-lang/rust/commit/d97e8ca33524399620aef1c0053f8b593bfbf521", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d97e8ca33524399620aef1c0053f8b593bfbf521/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eef9356e39d58800e77727a9045b8326a5fb20e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/eef9356e39d58800e77727a9045b8326a5fb20e5", "html_url": "https://github.com/rust-lang/rust/commit/eef9356e39d58800e77727a9045b8326a5fb20e5"}, {"sha": "03552ec3fa4828329874a17d1b8966a0c03809d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/03552ec3fa4828329874a17d1b8966a0c03809d8", "html_url": "https://github.com/rust-lang/rust/commit/03552ec3fa4828329874a17d1b8966a0c03809d8"}], "stats": {"total": 269, "additions": 202, "deletions": 67}, "files": [{"sha": "acaa26c6ad2fc609b72adbc4c8f79761e3ab902e", "filename": "src/librustc_errors/diagnostic.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d97e8ca33524399620aef1c0053f8b593bfbf521/src%2Flibrustc_errors%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d97e8ca33524399620aef1c0053f8b593bfbf521/src%2Flibrustc_errors%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic.rs?ref=d97e8ca33524399620aef1c0053f8b593bfbf521", "patch": "@@ -296,6 +296,29 @@ impl Diagnostic {\n         self\n     }\n \n+    pub fn multipart_suggestions(\n+        &mut self,\n+        msg: &str,\n+        suggestions: Vec<Vec<(Span, String)>>,\n+        applicability: Applicability,\n+    ) -> &mut Self {\n+        self.suggestions.push(CodeSuggestion {\n+            substitutions: suggestions\n+                .into_iter()\n+                .map(|suggestion| Substitution {\n+                    parts: suggestion\n+                        .into_iter()\n+                        .map(|(span, snippet)| SubstitutionPart { snippet, span })\n+                        .collect(),\n+                })\n+                .collect(),\n+            msg: msg.to_owned(),\n+            style: SuggestionStyle::ShowCode,\n+            applicability,\n+        });\n+        self\n+    }\n+\n     /// Prints out a message with for a multipart suggestion without showing the suggested code.\n     ///\n     /// This is intended to be used for suggestions that are obvious in what the changes need to"}, {"sha": "22bf8fe34aa155543c72fa41ad11d746ec1c8ee3", "filename": "src/librustc_errors/diagnostic_builder.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d97e8ca33524399620aef1c0053f8b593bfbf521/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d97e8ca33524399620aef1c0053f8b593bfbf521/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic_builder.rs?ref=d97e8ca33524399620aef1c0053f8b593bfbf521", "patch": "@@ -260,6 +260,19 @@ impl<'a> DiagnosticBuilder<'a> {\n         self\n     }\n \n+    pub fn multipart_suggestions(\n+        &mut self,\n+        msg: &str,\n+        suggestions: Vec<Vec<(Span, String)>>,\n+        applicability: Applicability,\n+    ) -> &mut Self {\n+        if !self.0.allow_suggestions {\n+            return self;\n+        }\n+        self.0.diagnostic.multipart_suggestions(msg, suggestions, applicability);\n+        self\n+    }\n+\n     pub fn tool_only_multipart_suggestion(\n         &mut self,\n         msg: &str,"}, {"sha": "866a35ebfa60d5a2cac33ffb53eb6e240107620a", "filename": "src/librustc_middle/ty/util.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d97e8ca33524399620aef1c0053f8b593bfbf521/src%2Flibrustc_middle%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d97e8ca33524399620aef1c0053f8b593bfbf521/src%2Flibrustc_middle%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Futil.rs?ref=d97e8ca33524399620aef1c0053f8b593bfbf521", "patch": "@@ -878,7 +878,15 @@ impl<'tcx> ty::TyS<'tcx> {\n                     // Find non representable fields with their spans\n                     fold_repr(def.all_fields().map(|field| {\n                         let ty = field.ty(tcx, substs);\n-                        let span = tcx.hir().span_if_local(field.did).unwrap_or(sp);\n+                        let span = match field\n+                            .did\n+                            .as_local()\n+                            .map(|id| tcx.hir().as_local_hir_id(id))\n+                            .and_then(|id| tcx.hir().find(id))\n+                        {\n+                            Some(hir::Node::Field(field)) => field.ty.span,\n+                            _ => sp,\n+                        };\n                         match is_type_structurally_recursive(\n                             tcx,\n                             span,"}, {"sha": "d31e04cffd55f57cbb03e39c75268960b50f5b95", "filename": "src/librustc_trait_selection/traits/error_reporting/mod.rs", "status": "modified", "additions": 31, "deletions": 14, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/d97e8ca33524399620aef1c0053f8b593bfbf521/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d97e8ca33524399620aef1c0053f8b593bfbf521/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=d97e8ca33524399620aef1c0053f8b593bfbf521", "patch": "@@ -1747,24 +1747,41 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n pub fn recursive_type_with_infinite_size_error(\n     tcx: TyCtxt<'tcx>,\n     type_def_id: DefId,\n-) -> DiagnosticBuilder<'tcx> {\n+    spans: Vec<Span>,\n+) {\n     assert!(type_def_id.is_local());\n     let span = tcx.hir().span_if_local(type_def_id).unwrap();\n     let span = tcx.sess.source_map().guess_head_span(span);\n-    let mut err = struct_span_err!(\n-        tcx.sess,\n-        span,\n-        E0072,\n-        \"recursive type `{}` has infinite size\",\n-        tcx.def_path_str(type_def_id)\n-    );\n+    let path = tcx.def_path_str(type_def_id);\n+    let mut err =\n+        struct_span_err!(tcx.sess, span, E0072, \"recursive type `{}` has infinite size\", path);\n     err.span_label(span, \"recursive type has infinite size\");\n-    err.help(&format!(\n-        \"insert indirection (e.g., a `Box`, `Rc`, or `&`) \\\n-                           at some point to make `{}` representable\",\n-        tcx.def_path_str(type_def_id)\n-    ));\n-    err\n+    for &span in &spans {\n+        err.span_label(span, \"recursive without indirection\");\n+    }\n+    let msg = format!(\n+        \"insert some indirection (e.g., a `Box`, `Rc`, or `&`) to make `{}` representable\",\n+        path,\n+    );\n+    if spans.len() <= 4 {\n+        err.multipart_suggestion(\n+            &msg,\n+            spans\n+                .iter()\n+                .flat_map(|&span| {\n+                    vec![\n+                        (span.shrink_to_lo(), \"Box<\".to_string()),\n+                        (span.shrink_to_hi(), \">\".to_string()),\n+                    ]\n+                    .into_iter()\n+                })\n+                .collect(),\n+            Applicability::HasPlaceholders,\n+        );\n+    } else {\n+        err.help(&msg);\n+    }\n+    err.emit();\n }\n \n /// Summarizes information"}, {"sha": "a409e20953da144c53067fdcfcf3c9631ffde9d9", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d97e8ca33524399620aef1c0053f8b593bfbf521/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d97e8ca33524399620aef1c0053f8b593bfbf521/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=d97e8ca33524399620aef1c0053f8b593bfbf521", "patch": "@@ -2387,11 +2387,7 @@ fn check_representable(tcx: TyCtxt<'_>, sp: Span, item_def_id: LocalDefId) -> bo\n     // caught by case 1.\n     match rty.is_representable(tcx, sp) {\n         Representability::SelfRecursive(spans) => {\n-            let mut err = recursive_type_with_infinite_size_error(tcx, item_def_id.to_def_id());\n-            for span in spans {\n-                err.span_label(span, \"recursive without indirection\");\n-            }\n-            err.emit();\n+            recursive_type_with_infinite_size_error(tcx, item_def_id.to_def_id(), spans);\n             return false;\n         }\n         Representability::Representable | Representability::ContainsRecursive => (),"}, {"sha": "6d1df4fda2eb052db05b8c94464eac0b2d1fb247", "filename": "src/test/ui/infinite/infinite-tag-type-recursion.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d97e8ca33524399620aef1c0053f8b593bfbf521/src%2Ftest%2Fui%2Finfinite%2Finfinite-tag-type-recursion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d97e8ca33524399620aef1c0053f8b593bfbf521/src%2Ftest%2Fui%2Finfinite%2Finfinite-tag-type-recursion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finfinite%2Finfinite-tag-type-recursion.stderr?ref=d97e8ca33524399620aef1c0053f8b593bfbf521", "patch": "@@ -6,7 +6,10 @@ LL | enum MList { Cons(isize, MList), Nil }\n    | |\n    | recursive type has infinite size\n    |\n-   = help: insert indirection (e.g., a `Box`, `Rc`, or `&`) at some point to make `MList` representable\n+help: insert some indirection (e.g., a `Box`, `Rc`, or `&`) to make `MList` representable\n+   |\n+LL | enum MList { Cons(isize, Box<MList>), Nil }\n+   |                          ^^^^     ^\n \n error[E0391]: cycle detected when computing drop-check constraints for `MList`\n   --> $DIR/infinite-tag-type-recursion.rs:1:1"}, {"sha": "58d087ca1998b7900e35b094e94b7d5f9841a5fd", "filename": "src/test/ui/issues/issue-17431-1.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d97e8ca33524399620aef1c0053f8b593bfbf521/src%2Ftest%2Fui%2Fissues%2Fissue-17431-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d97e8ca33524399620aef1c0053f8b593bfbf521/src%2Ftest%2Fui%2Fissues%2Fissue-17431-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17431-1.stderr?ref=d97e8ca33524399620aef1c0053f8b593bfbf521", "patch": "@@ -2,11 +2,14 @@ error[E0072]: recursive type `Foo` has infinite size\n   --> $DIR/issue-17431-1.rs:1:1\n    |\n LL | struct Foo { foo: Option<Option<Foo>> }\n-   | ^^^^^^^^^^   ------------------------ recursive without indirection\n+   | ^^^^^^^^^^        ------------------- recursive without indirection\n    | |\n    | recursive type has infinite size\n    |\n-   = help: insert indirection (e.g., a `Box`, `Rc`, or `&`) at some point to make `Foo` representable\n+help: insert some indirection (e.g., a `Box`, `Rc`, or `&`) to make `Foo` representable\n+   |\n+LL | struct Foo { foo: Box<Option<Option<Foo>>> }\n+   |                   ^^^^                   ^\n \n error: aborting due to previous error\n "}, {"sha": "eba4bf6d1d5eaf2ab9a408bc1e0359fd6801b339", "filename": "src/test/ui/issues/issue-17431-2.stderr", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d97e8ca33524399620aef1c0053f8b593bfbf521/src%2Ftest%2Fui%2Fissues%2Fissue-17431-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d97e8ca33524399620aef1c0053f8b593bfbf521/src%2Ftest%2Fui%2Fissues%2Fissue-17431-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17431-2.stderr?ref=d97e8ca33524399620aef1c0053f8b593bfbf521", "patch": "@@ -2,21 +2,27 @@ error[E0072]: recursive type `Baz` has infinite size\n   --> $DIR/issue-17431-2.rs:1:1\n    |\n LL | struct Baz { q: Option<Foo> }\n-   | ^^^^^^^^^^   -------------- recursive without indirection\n+   | ^^^^^^^^^^      ----------- recursive without indirection\n    | |\n    | recursive type has infinite size\n    |\n-   = help: insert indirection (e.g., a `Box`, `Rc`, or `&`) at some point to make `Baz` representable\n+help: insert some indirection (e.g., a `Box`, `Rc`, or `&`) to make `Baz` representable\n+   |\n+LL | struct Baz { q: Box<Option<Foo>> }\n+   |                 ^^^^           ^\n \n error[E0072]: recursive type `Foo` has infinite size\n   --> $DIR/issue-17431-2.rs:4:1\n    |\n LL | struct Foo { q: Option<Baz> }\n-   | ^^^^^^^^^^   -------------- recursive without indirection\n+   | ^^^^^^^^^^      ----------- recursive without indirection\n    | |\n    | recursive type has infinite size\n    |\n-   = help: insert indirection (e.g., a `Box`, `Rc`, or `&`) at some point to make `Foo` representable\n+help: insert some indirection (e.g., a `Box`, `Rc`, or `&`) to make `Foo` representable\n+   |\n+LL | struct Foo { q: Box<Option<Baz>> }\n+   |                 ^^^^           ^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "f6b15d0528ae8ab605e8ace07f8502461ba27d38", "filename": "src/test/ui/issues/issue-17431-3.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d97e8ca33524399620aef1c0053f8b593bfbf521/src%2Ftest%2Fui%2Fissues%2Fissue-17431-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d97e8ca33524399620aef1c0053f8b593bfbf521/src%2Ftest%2Fui%2Fissues%2Fissue-17431-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17431-3.stderr?ref=d97e8ca33524399620aef1c0053f8b593bfbf521", "patch": "@@ -2,11 +2,14 @@ error[E0072]: recursive type `Foo` has infinite size\n   --> $DIR/issue-17431-3.rs:3:1\n    |\n LL | struct Foo { foo: Mutex<Option<Foo>> }\n-   | ^^^^^^^^^^   ----------------------- recursive without indirection\n+   | ^^^^^^^^^^        ------------------ recursive without indirection\n    | |\n    | recursive type has infinite size\n    |\n-   = help: insert indirection (e.g., a `Box`, `Rc`, or `&`) at some point to make `Foo` representable\n+help: insert some indirection (e.g., a `Box`, `Rc`, or `&`) to make `Foo` representable\n+   |\n+LL | struct Foo { foo: Box<Mutex<Option<Foo>>> }\n+   |                   ^^^^                  ^\n \n error: aborting due to previous error\n "}, {"sha": "aa709e1ad518350eb0ac815ae67f8dba787c8e81", "filename": "src/test/ui/issues/issue-17431-4.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d97e8ca33524399620aef1c0053f8b593bfbf521/src%2Ftest%2Fui%2Fissues%2Fissue-17431-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d97e8ca33524399620aef1c0053f8b593bfbf521/src%2Ftest%2Fui%2Fissues%2Fissue-17431-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17431-4.stderr?ref=d97e8ca33524399620aef1c0053f8b593bfbf521", "patch": "@@ -2,11 +2,14 @@ error[E0072]: recursive type `Foo` has infinite size\n   --> $DIR/issue-17431-4.rs:3:1\n    |\n LL | struct Foo<T> { foo: Option<Option<Foo<T>>>, marker: marker::PhantomData<T> }\n-   | ^^^^^^^^^^^^^   --------------------------- recursive without indirection\n+   | ^^^^^^^^^^^^^        ---------------------- recursive without indirection\n    | |\n    | recursive type has infinite size\n    |\n-   = help: insert indirection (e.g., a `Box`, `Rc`, or `&`) at some point to make `Foo` representable\n+help: insert some indirection (e.g., a `Box`, `Rc`, or `&`) to make `Foo` representable\n+   |\n+LL | struct Foo<T> { foo: Box<Option<Option<Foo<T>>>>, marker: marker::PhantomData<T> }\n+   |                      ^^^^                      ^\n \n error: aborting due to previous error\n "}, {"sha": "1558cffb036b3490fac5b9487a6bc6cbdf77c7dd", "filename": "src/test/ui/issues/issue-17431-5.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d97e8ca33524399620aef1c0053f8b593bfbf521/src%2Ftest%2Fui%2Fissues%2Fissue-17431-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d97e8ca33524399620aef1c0053f8b593bfbf521/src%2Ftest%2Fui%2Fissues%2Fissue-17431-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17431-5.stderr?ref=d97e8ca33524399620aef1c0053f8b593bfbf521", "patch": "@@ -2,11 +2,14 @@ error[E0072]: recursive type `Bar` has infinite size\n   --> $DIR/issue-17431-5.rs:5:1\n    |\n LL | struct Bar<T> { x: Bar<Foo> , marker: marker::PhantomData<T> }\n-   | ^^^^^^^^^^^^^   ----------- recursive without indirection\n+   | ^^^^^^^^^^^^^      -------- recursive without indirection\n    | |\n    | recursive type has infinite size\n    |\n-   = help: insert indirection (e.g., a `Box`, `Rc`, or `&`) at some point to make `Bar` representable\n+help: insert some indirection (e.g., a `Box`, `Rc`, or `&`) to make `Bar` representable\n+   |\n+LL | struct Bar<T> { x: Box<Bar<Foo>> , marker: marker::PhantomData<T> }\n+   |                    ^^^^        ^\n \n error: aborting due to previous error\n "}, {"sha": "f2aa2a79c820030141750f658c73b90df23cc798", "filename": "src/test/ui/issues/issue-17431-6.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d97e8ca33524399620aef1c0053f8b593bfbf521/src%2Ftest%2Fui%2Fissues%2Fissue-17431-6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d97e8ca33524399620aef1c0053f8b593bfbf521/src%2Ftest%2Fui%2Fissues%2Fissue-17431-6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17431-6.stderr?ref=d97e8ca33524399620aef1c0053f8b593bfbf521", "patch": "@@ -6,7 +6,10 @@ LL | enum Foo { X(Mutex<Option<Foo>>) }\n    | |\n    | recursive type has infinite size\n    |\n-   = help: insert indirection (e.g., a `Box`, `Rc`, or `&`) at some point to make `Foo` representable\n+help: insert some indirection (e.g., a `Box`, `Rc`, or `&`) to make `Foo` representable\n+   |\n+LL | enum Foo { X(Box<Mutex<Option<Foo>>>) }\n+   |              ^^^^                  ^\n \n error: aborting due to previous error\n "}, {"sha": "684c3089e85ec872695fb5da4845861780b599a3", "filename": "src/test/ui/issues/issue-17431-7.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d97e8ca33524399620aef1c0053f8b593bfbf521/src%2Ftest%2Fui%2Fissues%2Fissue-17431-7.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d97e8ca33524399620aef1c0053f8b593bfbf521/src%2Ftest%2Fui%2Fissues%2Fissue-17431-7.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17431-7.stderr?ref=d97e8ca33524399620aef1c0053f8b593bfbf521", "patch": "@@ -6,7 +6,10 @@ LL | enum Foo { Voo(Option<Option<Foo>>) }\n    | |\n    | recursive type has infinite size\n    |\n-   = help: insert indirection (e.g., a `Box`, `Rc`, or `&`) at some point to make `Foo` representable\n+help: insert some indirection (e.g., a `Box`, `Rc`, or `&`) to make `Foo` representable\n+   |\n+LL | enum Foo { Voo(Box<Option<Option<Foo>>>) }\n+   |                ^^^^                   ^\n \n error: aborting due to previous error\n "}, {"sha": "d152ffde4e57d28e7dea5533d787cf8f3b3f41c8", "filename": "src/test/ui/issues/issue-2718-a.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d97e8ca33524399620aef1c0053f8b593bfbf521/src%2Ftest%2Fui%2Fissues%2Fissue-2718-a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d97e8ca33524399620aef1c0053f8b593bfbf521/src%2Ftest%2Fui%2Fissues%2Fissue-2718-a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-2718-a.stderr?ref=d97e8ca33524399620aef1c0053f8b593bfbf521", "patch": "@@ -7,7 +7,10 @@ LL |     pub struct Pong(SendPacket<Ping>);\n    |     |               recursive without indirection\n    |     recursive type has infinite size\n    |\n-   = help: insert indirection (e.g., a `Box`, `Rc`, or `&`) at some point to make `pingpong::Pong` representable\n+help: insert some indirection (e.g., a `Box`, `Rc`, or `&`) to make `pingpong::Pong` representable\n+   |\n+LL |     pub struct Pong(Box<SendPacket<Ping>>);\n+   |                     ^^^^                ^\n \n error: aborting due to previous error\n "}, {"sha": "87ee36df21696e3b51fa3b18db910ed106b7f89e", "filename": "src/test/ui/issues/issue-3008-1.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d97e8ca33524399620aef1c0053f8b593bfbf521/src%2Ftest%2Fui%2Fissues%2Fissue-3008-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d97e8ca33524399620aef1c0053f8b593bfbf521/src%2Ftest%2Fui%2Fissues%2Fissue-3008-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3008-1.stderr?ref=d97e8ca33524399620aef1c0053f8b593bfbf521", "patch": "@@ -7,7 +7,10 @@ LL | enum Bar {\n LL |     BarSome(Bar)\n    |             --- recursive without indirection\n    |\n-   = help: insert indirection (e.g., a `Box`, `Rc`, or `&`) at some point to make `Bar` representable\n+help: insert some indirection (e.g., a `Box`, `Rc`, or `&`) to make `Bar` representable\n+   |\n+LL |     BarSome(Box<Bar>)\n+   |             ^^^^   ^\n \n error: aborting due to previous error\n "}, {"sha": "369a19d37e6f6450679ba38e959871a709b6eb11", "filename": "src/test/ui/issues/issue-3008-2.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d97e8ca33524399620aef1c0053f8b593bfbf521/src%2Ftest%2Fui%2Fissues%2Fissue-3008-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d97e8ca33524399620aef1c0053f8b593bfbf521/src%2Ftest%2Fui%2Fissues%2Fissue-3008-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3008-2.stderr?ref=d97e8ca33524399620aef1c0053f8b593bfbf521", "patch": "@@ -2,11 +2,14 @@ error[E0072]: recursive type `Bar` has infinite size\n   --> $DIR/issue-3008-2.rs:2:1\n    |\n LL | struct Bar { x: Bar }\n-   | ^^^^^^^^^^   ------ recursive without indirection\n+   | ^^^^^^^^^^      --- recursive without indirection\n    | |\n    | recursive type has infinite size\n    |\n-   = help: insert indirection (e.g., a `Box`, `Rc`, or `&`) at some point to make `Bar` representable\n+help: insert some indirection (e.g., a `Box`, `Rc`, or `&`) to make `Bar` representable\n+   |\n+LL | struct Bar { x: Box<Bar> }\n+   |                 ^^^^   ^\n \n error: aborting due to previous error\n "}, {"sha": "0b162eff94a7cb251fe529dc44c105387e7107d9", "filename": "src/test/ui/issues/issue-3008-3.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d97e8ca33524399620aef1c0053f8b593bfbf521/src%2Ftest%2Fui%2Fissues%2Fissue-3008-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d97e8ca33524399620aef1c0053f8b593bfbf521/src%2Ftest%2Fui%2Fissues%2Fissue-3008-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3008-3.stderr?ref=d97e8ca33524399620aef1c0053f8b593bfbf521", "patch": "@@ -6,7 +6,10 @@ LL | enum E2<T> { V2(E2<E1>, marker::PhantomData<T>), }\n    | |\n    | recursive type has infinite size\n    |\n-   = help: insert indirection (e.g., a `Box`, `Rc`, or `&`) at some point to make `E2` representable\n+help: insert some indirection (e.g., a `Box`, `Rc`, or `&`) to make `E2` representable\n+   |\n+LL | enum E2<T> { V2(Box<E2<E1>>, marker::PhantomData<T>), }\n+   |                 ^^^^      ^\n \n error: aborting due to previous error\n "}, {"sha": "0f3d3690b732ea1bf1d3660b2bd441f02caae636", "filename": "src/test/ui/issues/issue-32326.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d97e8ca33524399620aef1c0053f8b593bfbf521/src%2Ftest%2Fui%2Fissues%2Fissue-32326.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d97e8ca33524399620aef1c0053f8b593bfbf521/src%2Ftest%2Fui%2Fissues%2Fissue-32326.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32326.stderr?ref=d97e8ca33524399620aef1c0053f8b593bfbf521", "patch": "@@ -8,7 +8,10 @@ LL |     Plus(Expr, Expr),\n    |          |\n    |          recursive without indirection\n    |\n-   = help: insert indirection (e.g., a `Box`, `Rc`, or `&`) at some point to make `Expr` representable\n+help: insert some indirection (e.g., a `Box`, `Rc`, or `&`) to make `Expr` representable\n+   |\n+LL |     Plus(Box<Expr>, Box<Expr>),\n+   |          ^^^^    ^  ^^^^    ^\n \n error: aborting due to previous error\n "}, {"sha": "7b17e91421660f4a31d83ec28692b8394a7da156", "filename": "src/test/ui/issues/issue-3779.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d97e8ca33524399620aef1c0053f8b593bfbf521/src%2Ftest%2Fui%2Fissues%2Fissue-3779.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d97e8ca33524399620aef1c0053f8b593bfbf521/src%2Ftest%2Fui%2Fissues%2Fissue-3779.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3779.stderr?ref=d97e8ca33524399620aef1c0053f8b593bfbf521", "patch": "@@ -5,9 +5,12 @@ LL | struct S {\n    | ^^^^^^^^ recursive type has infinite size\n LL |\n LL |     element: Option<S>\n-   |     ------------------ recursive without indirection\n+   |              --------- recursive without indirection\n    |\n-   = help: insert indirection (e.g., a `Box`, `Rc`, or `&`) at some point to make `S` representable\n+help: insert some indirection (e.g., a `Box`, `Rc`, or `&`) to make `S` representable\n+   |\n+LL |     element: Box<Option<S>>\n+   |              ^^^^         ^\n \n error: aborting due to previous error\n "}, {"sha": "b7c799e163cee7474a99e9781995aaf55f06774c", "filename": "src/test/ui/issues/issue-57271.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d97e8ca33524399620aef1c0053f8b593bfbf521/src%2Ftest%2Fui%2Fissues%2Fissue-57271.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d97e8ca33524399620aef1c0053f8b593bfbf521/src%2Ftest%2Fui%2Fissues%2Fissue-57271.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-57271.stderr?ref=d97e8ca33524399620aef1c0053f8b593bfbf521", "patch": "@@ -7,7 +7,10 @@ LL |     Class(ClassTypeSignature),\n LL |     Array(TypeSignature),\n    |           ------------- recursive without indirection\n    |\n-   = help: insert indirection (e.g., a `Box`, `Rc`, or `&`) at some point to make `ObjectType` representable\n+help: insert some indirection (e.g., a `Box`, `Rc`, or `&`) to make `ObjectType` representable\n+   |\n+LL |     Array(Box<TypeSignature>),\n+   |           ^^^^             ^\n \n error[E0072]: recursive type `TypeSignature` has infinite size\n   --> $DIR/issue-57271.rs:19:1\n@@ -18,7 +21,10 @@ LL |     Base(BaseType),\n LL |     Object(ObjectType),\n    |            ---------- recursive without indirection\n    |\n-   = help: insert indirection (e.g., a `Box`, `Rc`, or `&`) at some point to make `TypeSignature` representable\n+help: insert some indirection (e.g., a `Box`, `Rc`, or `&`) to make `TypeSignature` representable\n+   |\n+LL |     Object(Box<ObjectType>),\n+   |            ^^^^          ^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "9de94c393a7113508b79bb92868efba6a463b9ee", "filename": "src/test/ui/issues/issue-72554.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d97e8ca33524399620aef1c0053f8b593bfbf521/src%2Ftest%2Fui%2Fissues%2Fissue-72554.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d97e8ca33524399620aef1c0053f8b593bfbf521/src%2Ftest%2Fui%2Fissues%2Fissue-72554.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-72554.stderr?ref=d97e8ca33524399620aef1c0053f8b593bfbf521", "patch": "@@ -6,7 +6,10 @@ LL | pub enum ElemDerived {\n LL |     A(ElemDerived)\n    |       ----------- recursive without indirection\n    |\n-   = help: insert indirection (e.g., a `Box`, `Rc`, or `&`) at some point to make `ElemDerived` representable\n+help: insert some indirection (e.g., a `Box`, `Rc`, or `&`) to make `ElemDerived` representable\n+   |\n+LL |     A(Box<ElemDerived>)\n+   |       ^^^^           ^\n \n error: aborting due to previous error\n "}, {"sha": "ab4709d8e709e0bd5c5f5b7bc389cce36dc7eb37", "filename": "src/test/ui/recursion/recursive-enum.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d97e8ca33524399620aef1c0053f8b593bfbf521/src%2Ftest%2Fui%2Frecursion%2Frecursive-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d97e8ca33524399620aef1c0053f8b593bfbf521/src%2Ftest%2Fui%2Frecursion%2Frecursive-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Frecursive-enum.stderr?ref=d97e8ca33524399620aef1c0053f8b593bfbf521", "patch": "@@ -6,7 +6,10 @@ LL | enum List<T> { Cons(T, List<T>), Nil }\n    | |\n    | recursive type has infinite size\n    |\n-   = help: insert indirection (e.g., a `Box`, `Rc`, or `&`) at some point to make `List` representable\n+help: insert some indirection (e.g., a `Box`, `Rc`, or `&`) to make `List` representable\n+   |\n+LL | enum List<T> { Cons(T, Box<List<T>>), Nil }\n+   |                        ^^^^       ^\n \n error: aborting due to previous error\n "}, {"sha": "45062c2ea6c7239fa0a847f9a06d36a8223daf55", "filename": "src/test/ui/sized-cycle-note.stderr", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d97e8ca33524399620aef1c0053f8b593bfbf521/src%2Ftest%2Fui%2Fsized-cycle-note.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d97e8ca33524399620aef1c0053f8b593bfbf521/src%2Ftest%2Fui%2Fsized-cycle-note.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsized-cycle-note.stderr?ref=d97e8ca33524399620aef1c0053f8b593bfbf521", "patch": "@@ -2,21 +2,27 @@ error[E0072]: recursive type `Baz` has infinite size\n   --> $DIR/sized-cycle-note.rs:9:1\n    |\n LL | struct Baz { q: Option<Foo> }\n-   | ^^^^^^^^^^   -------------- recursive without indirection\n+   | ^^^^^^^^^^      ----------- recursive without indirection\n    | |\n    | recursive type has infinite size\n    |\n-   = help: insert indirection (e.g., a `Box`, `Rc`, or `&`) at some point to make `Baz` representable\n+help: insert some indirection (e.g., a `Box`, `Rc`, or `&`) to make `Baz` representable\n+   |\n+LL | struct Baz { q: Box<Option<Foo>> }\n+   |                 ^^^^           ^\n \n error[E0072]: recursive type `Foo` has infinite size\n   --> $DIR/sized-cycle-note.rs:11:1\n    |\n LL | struct Foo { q: Option<Baz> }\n-   | ^^^^^^^^^^   -------------- recursive without indirection\n+   | ^^^^^^^^^^      ----------- recursive without indirection\n    | |\n    | recursive type has infinite size\n    |\n-   = help: insert indirection (e.g., a `Box`, `Rc`, or `&`) at some point to make `Foo` representable\n+help: insert some indirection (e.g., a `Box`, `Rc`, or `&`) to make `Foo` representable\n+   |\n+LL | struct Foo { q: Box<Option<Baz>> }\n+   |                 ^^^^           ^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "06493f05142e6d2a59fa7e2ab6ba4a17d4253e40", "filename": "src/test/ui/span/E0072.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d97e8ca33524399620aef1c0053f8b593bfbf521/src%2Ftest%2Fui%2Fspan%2FE0072.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d97e8ca33524399620aef1c0053f8b593bfbf521/src%2Ftest%2Fui%2Fspan%2FE0072.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2FE0072.stderr?ref=d97e8ca33524399620aef1c0053f8b593bfbf521", "patch": "@@ -5,9 +5,12 @@ LL | struct ListNode {\n    | ^^^^^^^^^^^^^^^ recursive type has infinite size\n LL |     head: u8,\n LL |     tail: Option<ListNode>,\n-   |     ---------------------- recursive without indirection\n+   |           ---------------- recursive without indirection\n    |\n-   = help: insert indirection (e.g., a `Box`, `Rc`, or `&`) at some point to make `ListNode` representable\n+help: insert some indirection (e.g., a `Box`, `Rc`, or `&`) to make `ListNode` representable\n+   |\n+LL |     tail: Box<Option<ListNode>>,\n+   |           ^^^^                ^\n \n error: aborting due to previous error\n "}, {"sha": "55128347f7404f26f091e4e1a240047a6f2bbcb2", "filename": "src/test/ui/span/multiline-span-E0072.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d97e8ca33524399620aef1c0053f8b593bfbf521/src%2Ftest%2Fui%2Fspan%2Fmultiline-span-E0072.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d97e8ca33524399620aef1c0053f8b593bfbf521/src%2Ftest%2Fui%2Fspan%2Fmultiline-span-E0072.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmultiline-span-E0072.stderr?ref=d97e8ca33524399620aef1c0053f8b593bfbf521", "patch": "@@ -6,11 +6,14 @@ LL | | ListNode\n LL | | {\n LL | |     head: u8,\n LL | |     tail: Option<ListNode>,\n-   | |     ---------------------- recursive without indirection\n+   | |           ---------------- recursive without indirection\n LL | | }\n    | |_^ recursive type has infinite size\n    |\n-   = help: insert indirection (e.g., a `Box`, `Rc`, or `&`) at some point to make `ListNode` representable\n+help: insert some indirection (e.g., a `Box`, `Rc`, or `&`) to make `ListNode` representable\n+   |\n+LL |     tail: Box<Option<ListNode>>,\n+   |           ^^^^                ^\n \n error: aborting due to previous error\n "}, {"sha": "fb1d98b58dfbe3cd433767b8b19e9de241ad2b48", "filename": "src/test/ui/span/recursive-type-field.stderr", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d97e8ca33524399620aef1c0053f8b593bfbf521/src%2Ftest%2Fui%2Fspan%2Frecursive-type-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d97e8ca33524399620aef1c0053f8b593bfbf521/src%2Ftest%2Fui%2Fspan%2Frecursive-type-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Frecursive-type-field.stderr?ref=d97e8ca33524399620aef1c0053f8b593bfbf521", "patch": "@@ -4,28 +4,31 @@ error[E0072]: recursive type `Foo` has infinite size\n LL | struct Foo<'a> {\n    | ^^^^^^^^^^^^^^ recursive type has infinite size\n LL |     bar: Bar<'a>,\n-   |     ------------ recursive without indirection\n+   |          ------- recursive without indirection\n    |\n-   = help: insert indirection (e.g., a `Box`, `Rc`, or `&`) at some point to make `Foo` representable\n+help: insert some indirection (e.g., a `Box`, `Rc`, or `&`) to make `Foo` representable\n+   |\n+LL |     bar: Box<Bar<'a>>,\n+   |          ^^^^       ^\n \n error[E0072]: recursive type `Bar` has infinite size\n   --> $DIR/recursive-type-field.rs:8:1\n    |\n LL | struct Bar<'a> {\n    | ^^^^^^^^^^^^^^ recursive type has infinite size\n LL |     y: (Foo<'a>, Foo<'a>),\n-   |     --------------------- recursive without indirection\n+   |        ------------------ recursive without indirection\n LL |     z: Option<Bar<'a>>,\n-   |     ------------------ recursive without indirection\n+   |        --------------- recursive without indirection\n ...\n LL |     d: [Bar<'a>; 1],\n-   |     --------------- recursive without indirection\n+   |        ------------ recursive without indirection\n LL |     e: Foo<'a>,\n-   |     ---------- recursive without indirection\n+   |        ------- recursive without indirection\n LL |     x: Bar<'a>,\n-   |     ---------- recursive without indirection\n+   |        ------- recursive without indirection\n    |\n-   = help: insert indirection (e.g., a `Box`, `Rc`, or `&`) at some point to make `Bar` representable\n+   = help: insert some indirection (e.g., a `Box`, `Rc`, or `&`) to make `Bar` representable\n \n error: aborting due to 2 previous errors\n "}, {"sha": "d6d32cc5d6f395ffa9c2b4e4f239287fe5e0a548", "filename": "src/test/ui/type/type-recursive.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d97e8ca33524399620aef1c0053f8b593bfbf521/src%2Ftest%2Fui%2Ftype%2Ftype-recursive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d97e8ca33524399620aef1c0053f8b593bfbf521/src%2Ftest%2Fui%2Ftype%2Ftype-recursive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-recursive.stderr?ref=d97e8ca33524399620aef1c0053f8b593bfbf521", "patch": "@@ -5,9 +5,12 @@ LL | struct T1 {\n    | ^^^^^^^^^ recursive type has infinite size\n LL |     foo: isize,\n LL |     foolish: T1\n-   |     ----------- recursive without indirection\n+   |              -- recursive without indirection\n    |\n-   = help: insert indirection (e.g., a `Box`, `Rc`, or `&`) at some point to make `T1` representable\n+help: insert some indirection (e.g., a `Box`, `Rc`, or `&`) to make `T1` representable\n+   |\n+LL |     foolish: Box<T1>\n+   |              ^^^^  ^\n \n error: aborting due to previous error\n "}, {"sha": "c54d04de12c509043382130f57522fff7d5f9e7c", "filename": "src/test/ui/union/union-nonrepresentable.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d97e8ca33524399620aef1c0053f8b593bfbf521/src%2Ftest%2Fui%2Funion%2Funion-nonrepresentable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d97e8ca33524399620aef1c0053f8b593bfbf521/src%2Ftest%2Fui%2Funion%2Funion-nonrepresentable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-nonrepresentable.stderr?ref=d97e8ca33524399620aef1c0053f8b593bfbf521", "patch": "@@ -5,9 +5,12 @@ LL | union U {\n    | ^^^^^^^ recursive type has infinite size\n LL |     a: u8,\n LL |     b: U,\n-   |     ---- recursive without indirection\n+   |        - recursive without indirection\n    |\n-   = help: insert indirection (e.g., a `Box`, `Rc`, or `&`) at some point to make `U` representable\n+help: insert some indirection (e.g., a `Box`, `Rc`, or `&`) to make `U` representable\n+   |\n+LL |     b: Box<U>,\n+   |        ^^^^ ^\n \n error: aborting due to previous error\n "}]}