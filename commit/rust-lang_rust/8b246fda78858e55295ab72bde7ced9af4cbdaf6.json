{"sha": "8b246fda78858e55295ab72bde7ced9af4cbdaf6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiMjQ2ZmRhNzg4NThlNTUyOTVhYjcyYmRlN2NlZDlhZjRjYmRhZjY=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-02-21T11:40:53Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-02-23T14:15:39Z"}, "message": "green,native,rustuv: Replace many pointer `transmute`'s with `as` or referencing.\n\nThese can all be written in a more controlled manner than with the\ntransmute hammer, leading to (hopefully) safer code.", "tree": {"sha": "3af1881f7f980361f5650d23a3e66418e519b421", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3af1881f7f980361f5650d23a3e66418e519b421"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b246fda78858e55295ab72bde7ced9af4cbdaf6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b246fda78858e55295ab72bde7ced9af4cbdaf6", "html_url": "https://github.com/rust-lang/rust/commit/8b246fda78858e55295ab72bde7ced9af4cbdaf6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b246fda78858e55295ab72bde7ced9af4cbdaf6/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06e3e63c9046c160a00122990f31b82dd729a4a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/06e3e63c9046c160a00122990f31b82dd729a4a3", "html_url": "https://github.com/rust-lang/rust/commit/06e3e63c9046c160a00122990f31b82dd729a4a3"}], "stats": {"total": 30, "additions": 10, "deletions": 20}, "files": [{"sha": "779fb6815b7e92f45a993e0cb71ee36270a1bb6d", "filename": "src/libgreen/context.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8b246fda78858e55295ab72bde7ced9af4cbdaf6/src%2Flibgreen%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b246fda78858e55295ab72bde7ced9af4cbdaf6/src%2Flibgreen%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fcontext.rs?ref=8b246fda78858e55295ab72bde7ced9af4cbdaf6", "patch": "@@ -289,11 +289,8 @@ fn initialize_call_frame(regs: &mut Registers, fptr: InitFn, arg: uint,\n }\n \n fn align_down(sp: *mut uint) -> *mut uint {\n-    unsafe {\n-        let sp: uint = transmute(sp);\n-        let sp = sp & !(16 - 1);\n-        transmute::<uint, *mut uint>(sp)\n-    }\n+    let sp = (sp as uint) & !(16 - 1);\n+    sp as *mut uint\n }\n \n // ptr::mut_offset is positive ints only"}, {"sha": "c6db989d036d76e75504b478d13b297a667f4962", "filename": "src/libgreen/sched.rs", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8b246fda78858e55295ab72bde7ced9af4cbdaf6/src%2Flibgreen%2Fsched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b246fda78858e55295ab72bde7ced9af4cbdaf6/src%2Flibgreen%2Fsched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fsched.rs?ref=8b246fda78858e55295ab72bde7ced9af4cbdaf6", "patch": "@@ -612,9 +612,7 @@ impl Scheduler {\n                                f: |&mut Scheduler, ~GreenTask|) -> ~GreenTask {\n         let f_opaque = ClosureConverter::from_fn(f);\n \n-        let current_task_dupe = unsafe {\n-            *cast::transmute::<&~GreenTask, &uint>(&current_task)\n-        };\n+        let current_task_dupe = &*current_task as *GreenTask;\n \n         // The current task is placed inside an enum with the cleanup\n         // function. This enum is then placed inside the scheduler.\n@@ -633,13 +631,8 @@ impl Scheduler {\n                 cast::transmute_mut_region(*next_task.sched.get_mut_ref());\n \n             let current_task: &mut GreenTask = match sched.cleanup_job {\n-                Some(CleanupJob { task: ref task, .. }) => {\n-                    let task_ptr: *~GreenTask = task;\n-                    cast::transmute_mut_region(*cast::transmute_mut_unsafe(task_ptr))\n-                }\n-                None => {\n-                    rtabort!(\"no cleanup job\");\n-                }\n+                Some(CleanupJob { task: ref mut task, .. }) => &mut **task,\n+                None => rtabort!(\"no cleanup job\")\n             };\n \n             let (current_task_context, next_task_context) =\n@@ -852,7 +845,7 @@ impl Scheduler {\n \n     // * Utility Functions\n \n-    pub fn sched_id(&self) -> uint { unsafe { cast::transmute(self) } }\n+    pub fn sched_id(&self) -> uint { self as *Scheduler as uint }\n \n     pub fn run_cleanup_job(&mut self) {\n         let cleanup_job = self.cleanup_job.take_unwrap();"}, {"sha": "bf0ea14ca875373c6e71664edb77c34768a87459", "filename": "src/libgreen/task.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b246fda78858e55295ab72bde7ced9af4cbdaf6/src%2Flibgreen%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b246fda78858e55295ab72bde7ced9af4cbdaf6/src%2Flibgreen%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Ftask.rs?ref=8b246fda78858e55295ab72bde7ced9af4cbdaf6", "patch": "@@ -266,7 +266,7 @@ impl GreenTask {\n     // context switches\n \n     pub fn as_uint(&self) -> uint {\n-        unsafe { cast::transmute(self) }\n+        self as *GreenTask as uint\n     }\n \n     pub unsafe fn from_uint(val: uint) -> ~GreenTask { cast::transmute(val) }"}, {"sha": "5682697ebfc8197ed829a4936f6408d9c3a9096f", "filename": "src/libnative/task.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b246fda78858e55295ab72bde7ced9af4cbdaf6/src%2Flibnative%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b246fda78858e55295ab72bde7ced9af4cbdaf6/src%2Flibnative%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Ftask.rs?ref=8b246fda78858e55295ab72bde7ced9af4cbdaf6", "patch": "@@ -186,7 +186,7 @@ impl rt::Runtime for Ops {\n         cur_task.put_runtime(self as ~rt::Runtime);\n \n         unsafe {\n-            let cur_task_dupe = *cast::transmute::<&~Task, &uint>(&cur_task);\n+            let cur_task_dupe = &*cur_task as *Task;\n             let task = BlockedTask::block(cur_task);\n \n             if times == 1 {\n@@ -218,7 +218,7 @@ impl rt::Runtime for Ops {\n                 }\n             }\n             // re-acquire ownership of the task\n-            cur_task = cast::transmute::<uint, ~Task>(cur_task_dupe);\n+            cur_task = cast::transmute(cur_task_dupe);\n         }\n \n         // put the task back in TLS, and everything is as it once was."}, {"sha": "e998b5ca20b300a1250ff8009949e1ce30699ca6", "filename": "src/librustuv/queue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b246fda78858e55295ab72bde7ced9af4cbdaf6/src%2Flibrustuv%2Fqueue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b246fda78858e55295ab72bde7ced9af4cbdaf6/src%2Flibrustuv%2Fqueue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fqueue.rs?ref=8b246fda78858e55295ab72bde7ced9af4cbdaf6", "patch": "@@ -123,7 +123,7 @@ impl QueuePool {\n         unsafe {\n             assert_eq!(uvll::uv_async_init(loop_.handle, handle, async_cb), 0);\n             uvll::uv_unref(handle);\n-            let data: *c_void = *cast::transmute::<&~QueuePool, &*c_void>(&q);\n+            let data = &*q as *QueuePool as *c_void;\n             uvll::set_data_for_uv_handle(handle, data);\n         }\n "}]}