{"sha": "246d989a30ad55e333a1870da96fab5066c5b8e9", "node_id": "C_kwDOAAsO6NoAKDI0NmQ5ODlhMzBhZDU1ZTMzM2ExODcwZGE5NmZhYjUwNjZjNWI4ZTk", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-17T07:42:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-17T07:42:40Z"}, "message": "Rollup merge of #109198 - compiler-errors:new-rpitit-default-body, r=spastorino\n\nInstall projection from RPITIT to default trait method opaque correctly\n\n1. For new lowering strategy `-Zlower-impl-trait-in-trait-to-assoc-ty`, install the correct default trait method projection predicates (RPITIT -> opaque). This makes default trait body tests pass!\n\n2. Fix two WF-checking bugs -- first, we want to make sure that we're always looking for an opaque type in `check_return_position_impl_trait_in_trait_bounds`. That's because the RPITIT projections are normalized to opaques during wfcheck. Second, fix RPITIT's param-envs by not adding the projection predicates that we install on trait methods to make default RPITITs work -- I left a comment why.\n\n3. Also, just a small drive-by for `rustc_on_unimplemented`. Not sure if it affects any tests, but can't hurt.\n\nr? ````@spastorino,```` based off of #109140", "tree": {"sha": "e4381edef150657305d90f8a5c00d74da4467d8b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4381edef150657305d90f8a5c00d74da4467d8b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/246d989a30ad55e333a1870da96fab5066c5b8e9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkFBnwCRBK7hj4Ov3rIwAAmpwIAIZ+Ig5B4rznzl7a2L/l80MF\nfbi8n9ad26YaLGrU/ydspWIsXOtGMsYB2TM4xcTBGgZgbvgiX/pM888E94gcxgvm\nsobOHkMxJtVTbmtMI+3QGiJZn5hGOTLeuRbZ+7RMmu78LiwWFnpDn2ct63xstl8d\n/96HEBkm04f9OnszTnbaT61N4QmHKxbuoliyOaaYA+qk3hUUXcIf+vtVaw0UBYmw\nAFZgeQYC11q2FTvXXYVYWKFEmUl+vBfjrSsbic/cgKmVB6XTIFw2uIZMOJ1ReK7Y\nrPcEWSUQtap4x2COee/jy/WJU0aydSeoML3mWViH3k8uejdhAuFaSsqerRVlM6U=\n=frbe\n-----END PGP SIGNATURE-----\n", "payload": "tree e4381edef150657305d90f8a5c00d74da4467d8b\nparent edd6b4256557ec2cd9aac0c4de46848cc26931e5\nparent 8d922eba796a236dbfdd032d5e4c279519e02b60\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1679038960 +0100\ncommitter GitHub <noreply@github.com> 1679038960 +0100\n\nRollup merge of #109198 - compiler-errors:new-rpitit-default-body, r=spastorino\n\nInstall projection from RPITIT to default trait method opaque correctly\n\n1. For new lowering strategy `-Zlower-impl-trait-in-trait-to-assoc-ty`, install the correct default trait method projection predicates (RPITIT -> opaque). This makes default trait body tests pass!\n\n2. Fix two WF-checking bugs -- first, we want to make sure that we're always looking for an opaque type in `check_return_position_impl_trait_in_trait_bounds`. That's because the RPITIT projections are normalized to opaques during wfcheck. Second, fix RPITIT's param-envs by not adding the projection predicates that we install on trait methods to make default RPITITs work -- I left a comment why.\n\n3. Also, just a small drive-by for `rustc_on_unimplemented`. Not sure if it affects any tests, but can't hurt.\n\nr? ````@spastorino,```` based off of #109140\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/246d989a30ad55e333a1870da96fab5066c5b8e9", "html_url": "https://github.com/rust-lang/rust/commit/246d989a30ad55e333a1870da96fab5066c5b8e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/246d989a30ad55e333a1870da96fab5066c5b8e9/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "edd6b4256557ec2cd9aac0c4de46848cc26931e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/edd6b4256557ec2cd9aac0c4de46848cc26931e5", "html_url": "https://github.com/rust-lang/rust/commit/edd6b4256557ec2cd9aac0c4de46848cc26931e5"}, {"sha": "8d922eba796a236dbfdd032d5e4c279519e02b60", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d922eba796a236dbfdd032d5e4c279519e02b60", "html_url": "https://github.com/rust-lang/rust/commit/8d922eba796a236dbfdd032d5e4c279519e02b60"}], "stats": {"total": 526, "additions": 419, "deletions": 107}, "files": [{"sha": "872fec3954b2999a1c36738c8430fbcd33d154f4", "filename": "compiler/rustc_hir_analysis/src/check/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/246d989a30ad55e333a1870da96fab5066c5b8e9/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/246d989a30ad55e333a1870da96fab5066c5b8e9/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs?ref=246d989a30ad55e333a1870da96fab5066c5b8e9", "patch": "@@ -557,7 +557,7 @@ fn check_item_type(tcx: TyCtxt<'_>, id: hir::ItemId) {\n             check_opaque(tcx, id);\n         }\n         DefKind::ImplTraitPlaceholder => {\n-            let parent = tcx.impl_trait_in_trait_parent(id.owner_id.to_def_id());\n+            let parent = tcx.impl_trait_in_trait_parent_fn(id.owner_id.to_def_id());\n             // Only check the validity of this opaque type if the function has a default body\n             if let hir::Node::TraitItem(hir::TraitItem {\n                 kind: hir::TraitItemKind::Fn(_, hir::TraitFn::Provided(_)),"}, {"sha": "4120ad45f6a6b79a474f096b44710b6a9d7c6c78", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/246d989a30ad55e333a1870da96fab5066c5b8e9/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/246d989a30ad55e333a1870da96fab5066c5b8e9/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=246d989a30ad55e333a1870da96fab5066c5b8e9", "patch": "@@ -1,7 +1,6 @@\n use crate::autoderef::Autoderef;\n use crate::constrained_generic_params::{identify_constrained_generic_params, Parameter};\n \n-use hir::def::DefKind;\n use rustc_ast as ast;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexSet};\n use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder, ErrorGuaranteed};\n@@ -1548,16 +1547,27 @@ fn check_return_position_impl_trait_in_trait_bounds<'tcx>(\n     if let Some(assoc_item) = tcx.opt_associated_item(fn_def_id.to_def_id())\n         && assoc_item.container == ty::AssocItemContainer::TraitContainer\n     {\n+        // FIXME(-Zlower-impl-trait-in-trait-to-assoc-ty): Even with the new lowering\n+        // strategy, we can't just call `check_associated_item` on the new RPITITs,\n+        // because tests like `tests/ui/async-await/in-trait/implied-bounds.rs` will fail.\n+        // That's because we need to check that the bounds of the RPITIT hold using\n+        // the special substs that we create during opaque type lowering, otherwise we're\n+        // getting a bunch of early bound and free regions mixed up... Haven't looked too\n+        // deep into this, though.\n         for arg in fn_output.walk() {\n             if let ty::GenericArgKind::Type(ty) = arg.unpack()\n-                && let ty::Alias(ty::Opaque, proj) = ty.kind()\n-                && tcx.def_kind(proj.def_id) == DefKind::ImplTraitPlaceholder\n-                && tcx.impl_trait_in_trait_parent(proj.def_id) == fn_def_id.to_def_id()\n+                // RPITITs are always eagerly normalized into opaques, so always look for an\n+                // opaque here.\n+                && let ty::Alias(ty::Opaque, opaque_ty) = ty.kind()\n+                && let Some(opaque_def_id) = opaque_ty.def_id.as_local()\n+                && let opaque = tcx.hir().expect_item(opaque_def_id).expect_opaque_ty()\n+                && let hir::OpaqueTyOrigin::FnReturn(source) | hir::OpaqueTyOrigin::AsyncFn(source) = opaque.origin\n+                && source == fn_def_id\n             {\n-                let span = tcx.def_span(proj.def_id);\n-                let bounds = wfcx.tcx().explicit_item_bounds(proj.def_id);\n+                let span = tcx.def_span(opaque_ty.def_id);\n+                let bounds = wfcx.tcx().explicit_item_bounds(opaque_ty.def_id);\n                 let wf_obligations = bounds.iter().flat_map(|&(bound, bound_span)| {\n-                    let bound = ty::EarlyBinder(bound).subst(tcx, proj.substs);\n+                    let bound = ty::EarlyBinder(bound).subst(tcx, opaque_ty.substs);\n                     let normalized_bound = wfcx.normalize(span, None, bound);\n                     traits::wf::predicate_obligations(\n                         wfcx.infcx,"}, {"sha": "df0258ff7a36cec30173f64ad6589f211f1dcfe2", "filename": "compiler/rustc_hir_analysis/src/collect/item_bounds.rs", "status": "modified", "additions": 22, "deletions": 14, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/246d989a30ad55e333a1870da96fab5066c5b8e9/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fitem_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/246d989a30ad55e333a1870da96fab5066c5b8e9/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fitem_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fitem_bounds.rs?ref=246d989a30ad55e333a1870da96fab5066c5b8e9", "patch": "@@ -3,7 +3,7 @@ use crate::astconv::AstConv;\n use rustc_hir as hir;\n use rustc_infer::traits::util;\n use rustc_middle::ty::subst::InternalSubsts;\n-use rustc_middle::ty::{self, ImplTraitInTraitData, Ty, TyCtxt};\n+use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_span::def_id::DefId;\n use rustc_span::Span;\n \n@@ -76,18 +76,26 @@ pub(super) fn explicit_item_bounds(\n     tcx: TyCtxt<'_>,\n     def_id: DefId,\n ) -> &'_ [(ty::Predicate<'_>, Span)] {\n-    // If the def_id is about an RPITIT, delegate explicit_item_bounds to the opaque_def_id that\n-    // generated the synthesized associate type.\n-    let rpitit_info = if let Some(ImplTraitInTraitData::Trait { opaque_def_id, .. }) =\n-        tcx.opt_rpitit_info(def_id)\n-    {\n-        Some(opaque_def_id)\n-    } else {\n-        None\n-    };\n+    match tcx.opt_rpitit_info(def_id) {\n+        // RPITIT's bounds are the same as opaque type bounds, but with\n+        // a projection self type.\n+        Some(ty::ImplTraitInTraitData::Trait { opaque_def_id, .. }) => {\n+            let item = tcx.hir().get_by_def_id(opaque_def_id.expect_local()).expect_item();\n+            let opaque_ty = item.expect_opaque_ty();\n+            return opaque_type_bounds(\n+                tcx,\n+                opaque_def_id,\n+                opaque_ty.bounds,\n+                tcx.mk_projection(def_id, ty::InternalSubsts::identity_for_item(tcx, def_id)),\n+                item.span,\n+            );\n+        }\n+        // These should have been fed!\n+        Some(ty::ImplTraitInTraitData::Impl { .. }) => unreachable!(),\n+        None => {}\n+    }\n \n-    let bounds_def_id = rpitit_info.unwrap_or(def_id);\n-    let hir_id = tcx.hir().local_def_id_to_hir_id(bounds_def_id.expect_local());\n+    let hir_id = tcx.hir().local_def_id_to_hir_id(def_id.expect_local());\n     match tcx.hir().get(hir_id) {\n         hir::Node::TraitItem(hir::TraitItem {\n             kind: hir::TraitItemKind::Type(bounds, _),\n@@ -100,12 +108,12 @@ pub(super) fn explicit_item_bounds(\n             ..\n         }) => {\n             let substs = InternalSubsts::identity_for_item(tcx, def_id);\n-            let item_ty = if *in_trait || rpitit_info.is_some() {\n+            let item_ty = if *in_trait && !tcx.lower_impl_trait_in_trait_to_assoc_ty() {\n                 tcx.mk_projection(def_id, substs)\n             } else {\n                 tcx.mk_opaque(def_id, substs)\n             };\n-            opaque_type_bounds(tcx, bounds_def_id, bounds, item_ty, *span)\n+            opaque_type_bounds(tcx, def_id, bounds, item_ty, *span)\n         }\n         _ => bug!(\"item_bounds called on {:?}\", def_id),\n     }"}, {"sha": "361e8948e851a4b066d3953261b9153d193e3e40", "filename": "compiler/rustc_hir_analysis/src/variance/mod.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/246d989a30ad55e333a1870da96fab5066c5b8e9/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/246d989a30ad55e333a1870da96fab5066c5b8e9/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fmod.rs?ref=246d989a30ad55e333a1870da96fab5066c5b8e9", "patch": "@@ -112,10 +112,14 @@ fn variance_of_opaque(tcx: TyCtxt<'_>, item_def_id: LocalDefId) -> &[ty::Varianc\n         fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n             match t.kind() {\n                 ty::Alias(_, ty::AliasTy { def_id, substs, .. })\n-                    if matches!(\n-                        self.tcx.def_kind(*def_id),\n-                        DefKind::OpaqueTy | DefKind::ImplTraitPlaceholder\n-                    ) =>\n+                    if matches!(self.tcx.def_kind(*def_id), DefKind::OpaqueTy) =>\n+                {\n+                    self.visit_opaque(*def_id, substs)\n+                }\n+                // FIXME(-Zlower-impl-trait-in-trait-to-assoc-ty) check whether this is necessary\n+                // at all for RPITITs.\n+                ty::Alias(_, ty::AliasTy { def_id, substs, .. })\n+                    if self.tcx.is_impl_trait_in_trait(*def_id) =>\n                 {\n                     self.visit_opaque(*def_id, substs)\n                 }"}, {"sha": "ec391ea80f48b97ca09f91d4fa9988beb2c099b1", "filename": "compiler/rustc_hir_typeck/src/closure.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/246d989a30ad55e333a1870da96fab5066c5b8e9/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/246d989a30ad55e333a1870da96fab5066c5b8e9/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs?ref=246d989a30ad55e333a1870da96fab5066c5b8e9", "patch": "@@ -2,7 +2,6 @@\n \n use super::{check_fn, Expectation, FnCtxt, GeneratorTypes};\n \n-use hir::def::DefKind;\n use rustc_errors::ErrorGuaranteed;\n use rustc_hir as hir;\n use rustc_hir::lang_items::LangItem;\n@@ -715,14 +714,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 .subst_iter_copied(self.tcx, substs)\n                 .find_map(|(p, s)| get_future_output(p, s))?,\n             ty::Error(_) => return None,\n-            ty::Alias(ty::Projection, proj)\n-                if self.tcx.def_kind(proj.def_id) == DefKind::ImplTraitPlaceholder =>\n-            {\n-                self.tcx\n-                    .bound_explicit_item_bounds(proj.def_id)\n-                    .subst_iter_copied(self.tcx, proj.substs)\n-                    .find_map(|(p, s)| get_future_output(p, s))?\n-            }\n+            ty::Alias(ty::Projection, proj) if self.tcx.is_impl_trait_in_trait(proj.def_id) => self\n+                .tcx\n+                .bound_explicit_item_bounds(proj.def_id)\n+                .subst_iter_copied(self.tcx, proj.substs)\n+                .find_map(|(p, s)| get_future_output(p, s))?,\n             _ => span_bug!(\n                 self.tcx.def_span(expr_def_id),\n                 \"async fn generator return type not an inference variable: {ret_ty}\""}, {"sha": "de1a2e6a577bf83cc24416a4fe9bfd035c3734ff", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/246d989a30ad55e333a1870da96fab5066c5b8e9/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/246d989a30ad55e333a1870da96fab5066c5b8e9/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=246d989a30ad55e333a1870da96fab5066c5b8e9", "patch": "@@ -359,10 +359,12 @@ impl<'tcx> InferCtxt<'tcx> {\n     pub fn get_impl_future_output_ty(&self, ty: Ty<'tcx>) -> Option<Ty<'tcx>> {\n         let (def_id, substs) = match *ty.kind() {\n             ty::Alias(_, ty::AliasTy { def_id, substs, .. })\n-                if matches!(\n-                    self.tcx.def_kind(def_id),\n-                    DefKind::OpaqueTy | DefKind::ImplTraitPlaceholder\n-                ) =>\n+                if matches!(self.tcx.def_kind(def_id), DefKind::OpaqueTy) =>\n+            {\n+                (def_id, substs)\n+            }\n+            ty::Alias(_, ty::AliasTy { def_id, substs, .. })\n+                if self.tcx.is_impl_trait_in_trait(def_id) =>\n             {\n                 (def_id, substs)\n             }\n@@ -1757,8 +1759,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                                 )\n                             }\n                             (true, ty::Alias(ty::Projection, proj))\n-                                if self.tcx.def_kind(proj.def_id)\n-                                    == DefKind::ImplTraitPlaceholder =>\n+                                if self.tcx.is_impl_trait_in_trait(proj.def_id) =>\n                             {\n                                 let sm = self.tcx.sess.source_map();\n                                 let pos = sm.lookup_char_pos(self.tcx.def_span(proj.def_id).lo());"}, {"sha": "b38bbdfe7bb8b9ec4ad55835715a7b82347efa95", "filename": "compiler/rustc_infer/src/infer/error_reporting/note_and_explain.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/246d989a30ad55e333a1870da96fab5066c5b8e9/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote_and_explain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/246d989a30ad55e333a1870da96fab5066c5b8e9/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote_and_explain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote_and_explain.rs?ref=246d989a30ad55e333a1870da96fab5066c5b8e9", "patch": "@@ -1,7 +1,7 @@\n use super::TypeErrCtxt;\n use rustc_errors::Applicability::{MachineApplicable, MaybeIncorrect};\n use rustc_errors::{pluralize, Diagnostic, MultiSpan};\n-use rustc_hir::{self as hir, def::DefKind};\n+use rustc_hir as hir;\n use rustc_middle::traits::ObligationCauseCode;\n use rustc_middle::ty::error::ExpectedFound;\n use rustc_middle::ty::print::Printer;\n@@ -75,7 +75,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                         diag.note(\"an associated type was expected, but a different one was found\");\n                     }\n                     (ty::Param(p), ty::Alias(ty::Projection, proj)) | (ty::Alias(ty::Projection, proj), ty::Param(p))\n-                        if tcx.def_kind(proj.def_id) != DefKind::ImplTraitPlaceholder =>\n+                        if !tcx.is_impl_trait_in_trait(proj.def_id) =>\n                     {\n                         let p_def_id = tcx\n                             .generics_of(body_owner_def_id)\n@@ -222,7 +222,7 @@ impl<T> Trait<T> for X {\n                             diag.span_label(p_span, \"this type parameter\");\n                         }\n                     }\n-                    (ty::Alias(ty::Projection, proj_ty), _) if tcx.def_kind(proj_ty.def_id) != DefKind::ImplTraitPlaceholder => {\n+                    (ty::Alias(ty::Projection, proj_ty), _) if !tcx.is_impl_trait_in_trait(proj_ty.def_id) => {\n                         self.expected_projection(\n                             diag,\n                             proj_ty,\n@@ -231,7 +231,7 @@ impl<T> Trait<T> for X {\n                             cause.code(),\n                         );\n                     }\n-                    (_, ty::Alias(ty::Projection, proj_ty)) if tcx.def_kind(proj_ty.def_id) != DefKind::ImplTraitPlaceholder => {\n+                    (_, ty::Alias(ty::Projection, proj_ty)) if !tcx.is_impl_trait_in_trait(proj_ty.def_id) => {\n                         let msg = format!(\n                             \"consider constraining the associated type `{}` to `{}`\",\n                             values.found, values.expected,"}, {"sha": "49f823a47b83d3c462783e33b2b26b5cefa031cf", "filename": "compiler/rustc_infer/src/infer/opaque_types.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/246d989a30ad55e333a1870da96fab5066c5b8e9/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/246d989a30ad55e333a1870da96fab5066c5b8e9/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs?ref=246d989a30ad55e333a1870da96fab5066c5b8e9", "patch": "@@ -3,7 +3,6 @@ use super::{DefineOpaqueTypes, InferResult};\n use crate::errors::OpaqueHiddenTypeDiag;\n use crate::infer::{DefiningAnchor, InferCtxt, InferOk};\n use crate::traits;\n-use hir::def::DefKind;\n use hir::def_id::{DefId, LocalDefId};\n use hir::OpaqueTyOrigin;\n use rustc_data_structures::sync::Lrc;\n@@ -478,9 +477,7 @@ where\n                 }\n             }\n \n-            ty::Alias(ty::Projection, proj)\n-                if self.tcx.def_kind(proj.def_id) == DefKind::ImplTraitPlaceholder =>\n-            {\n+            ty::Alias(ty::Projection, proj) if self.tcx.is_impl_trait_in_trait(proj.def_id) => {\n                 // Skip lifetime parameters that are not captures.\n                 let variances = self.tcx.variances_of(proj.def_id);\n \n@@ -559,8 +556,7 @@ impl<'tcx> InferCtxt<'tcx> {\n                     // FIXME(RPITIT): Don't replace RPITITs with inference vars.\n                     ty::Alias(ty::Projection, projection_ty)\n                         if !projection_ty.has_escaping_bound_vars()\n-                            && tcx.def_kind(projection_ty.def_id)\n-                                != DefKind::ImplTraitPlaceholder =>\n+                            && !tcx.is_impl_trait_in_trait(projection_ty.def_id) =>\n                     {\n                         self.infer_projection(\n                             param_env,"}, {"sha": "c778574b2c57b15d59070f3f6ba9c18cc78325e4", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/246d989a30ad55e333a1870da96fab5066c5b8e9/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/246d989a30ad55e333a1870da96fab5066c5b8e9/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=246d989a30ad55e333a1870da96fab5066c5b8e9", "patch": "@@ -1028,7 +1028,7 @@ fn should_encode_type(tcx: TyCtxt<'_>, def_id: LocalDefId, def_kind: DefKind) ->\n         | DefKind::InlineConst => true,\n \n         DefKind::ImplTraitPlaceholder => {\n-            let parent_def_id = tcx.impl_trait_in_trait_parent(def_id.to_def_id());\n+            let parent_def_id = tcx.impl_trait_in_trait_parent_fn(def_id.to_def_id());\n             let assoc_item = tcx.associated_item(parent_def_id);\n             match assoc_item.container {\n                 // Always encode an RPIT in an impl fn, since it always has a body"}, {"sha": "c8860cc55f6b71f3a41dd712792a6af7dd6fcfb3", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/246d989a30ad55e333a1870da96fab5066c5b8e9/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/246d989a30ad55e333a1870da96fab5066c5b8e9/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=246d989a30ad55e333a1870da96fab5066c5b8e9", "patch": "@@ -191,6 +191,7 @@ rustc_queries! {\n     {\n         desc { \"determine whether the opaque is a type-alias impl trait\" }\n         separate_provide_extern\n+        feedable\n     }\n \n     query unsizing_params_for_adt(key: DefId) -> &'tcx rustc_index::bit_set::BitSet<u32>"}, {"sha": "6ef8384d0107a5c75875f1ee0b1b269040e24117", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/246d989a30ad55e333a1870da96fab5066c5b8e9/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/246d989a30ad55e333a1870da96fab5066c5b8e9/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=246d989a30ad55e333a1870da96fab5066c5b8e9", "patch": "@@ -2552,12 +2552,18 @@ impl<'tcx> TyCtxt<'tcx> {\n         matches!(self.trait_of_item(def_id), Some(trait_id) if self.has_attr(trait_id, sym::const_trait))\n     }\n \n-    pub fn impl_trait_in_trait_parent(self, mut def_id: DefId) -> DefId {\n-        while let def_kind = self.def_kind(def_id) && def_kind != DefKind::AssocFn {\n-            debug_assert_eq!(def_kind, DefKind::ImplTraitPlaceholder);\n-            def_id = self.parent(def_id);\n+    pub fn impl_trait_in_trait_parent_fn(self, mut def_id: DefId) -> DefId {\n+        match self.opt_rpitit_info(def_id) {\n+            Some(ImplTraitInTraitData::Trait { fn_def_id, .. })\n+            | Some(ImplTraitInTraitData::Impl { fn_def_id, .. }) => fn_def_id,\n+            None => {\n+                while let def_kind = self.def_kind(def_id) && def_kind != DefKind::AssocFn {\n+                    debug_assert_eq!(def_kind, DefKind::ImplTraitPlaceholder);\n+                    def_id = self.parent(def_id);\n+                }\n+                def_id\n+            }\n         }\n-        def_id\n     }\n \n     pub fn impl_method_has_trait_impl_trait_tys(self, def_id: DefId) -> bool {\n@@ -2572,6 +2578,10 @@ impl<'tcx> TyCtxt<'tcx> {\n \n         let Some(trait_item_def_id) = item.trait_item_def_id else { return false; };\n \n+        if self.lower_impl_trait_in_trait_to_assoc_ty() {\n+            return !self.associated_items_for_impl_trait_in_trait(trait_item_def_id).is_empty();\n+        }\n+\n         // FIXME(RPITIT): This does a somewhat manual walk through the signature\n         // of the trait fn to look for any RPITITs, but that's kinda doing a lot\n         // of work. We can probably remove this when we refactor RPITITs to be"}, {"sha": "fffdbfc9660bb1651794167f8c19b0319c42fb60", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/246d989a30ad55e333a1870da96fab5066c5b8e9/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/246d989a30ad55e333a1870da96fab5066c5b8e9/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=246d989a30ad55e333a1870da96fab5066c5b8e9", "patch": "@@ -728,7 +728,7 @@ pub trait PrettyPrinter<'tcx>:\n             }\n             ty::Alias(ty::Projection, ref data) => {\n                 if !(self.should_print_verbose() || NO_QUERIES.with(|q| q.get()))\n-                    && self.tcx().def_kind(data.def_id) == DefKind::ImplTraitPlaceholder\n+                    && self.tcx().is_impl_trait_in_trait(data.def_id)\n                 {\n                     return self.pretty_print_opaque_impl_type(data.def_id, data.substs);\n                 } else {"}, {"sha": "4c606b939b25ed0b0eb88998a178c0ca943f71e6", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/246d989a30ad55e333a1870da96fab5066c5b8e9/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/246d989a30ad55e333a1870da96fab5066c5b8e9/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=246d989a30ad55e333a1870da96fab5066c5b8e9", "patch": "@@ -1288,7 +1288,7 @@ impl<'tcx> AliasTy<'tcx> {\n         match tcx.def_kind(self.def_id) {\n             DefKind::AssocTy | DefKind::AssocConst => tcx.parent(self.def_id),\n             DefKind::ImplTraitPlaceholder => {\n-                tcx.parent(tcx.impl_trait_in_trait_parent(self.def_id))\n+                tcx.parent(tcx.impl_trait_in_trait_parent_fn(self.def_id))\n             }\n             kind => bug!(\"expected a projection AliasTy; found {kind:?}\"),\n         }"}, {"sha": "cd67644589846dc071bf2c3bdaf97257e103054f", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/246d989a30ad55e333a1870da96fab5066c5b8e9/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/246d989a30ad55e333a1870da96fab5066c5b8e9/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=246d989a30ad55e333a1870da96fab5066c5b8e9", "patch": "@@ -132,7 +132,7 @@ where\n                 projection.trait_ref_and_own_substs(tcx)\n             } else {\n                 // HACK(RPITIT): Remove this when RPITITs are lowered to regular assoc tys\n-                let def_id = tcx.impl_trait_in_trait_parent(projection.def_id);\n+                let def_id = tcx.impl_trait_in_trait_parent_fn(projection.def_id);\n                 let trait_generics = tcx.generics_of(def_id);\n                 (\n                     tcx.mk_trait_ref(def_id, projection.substs.truncate_to(tcx, trait_generics)),"}, {"sha": "a9c4e12681635f8a847ad201c2dfe388bb6ee145", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/on_unimplemented.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/246d989a30ad55e333a1870da96fab5066c5b8e9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/246d989a30ad55e333a1870da96fab5066c5b8e9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs?ref=246d989a30ad55e333a1870da96fab5066c5b8e9", "patch": "@@ -144,18 +144,22 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         trait_ref: ty::PolyTraitRef<'tcx>,\n         obligation: &PredicateObligation<'tcx>,\n     ) -> OnUnimplementedNote {\n-        if self.tcx.opt_rpitit_info(obligation.cause.body_id.to_def_id()).is_some() {\n-            return OnUnimplementedNote::default();\n-        }\n-\n         let (def_id, substs) = self\n             .impl_similar_to(trait_ref, obligation)\n             .unwrap_or_else(|| (trait_ref.def_id(), trait_ref.skip_binder().substs));\n         let trait_ref = trait_ref.skip_binder();\n \n-        let body_hir = self.tcx.hir().local_def_id_to_hir_id(obligation.cause.body_id);\n-        let mut flags =\n-            vec![(sym::ItemContext, self.describe_enclosure(body_hir).map(|s| s.to_owned()))];\n+        let mut flags = vec![];\n+        // FIXME(-Zlower-impl-trait-in-trait-to-assoc-ty): HIR is not present for RPITITs,\n+        // but I guess we could synthesize one here. We don't see any errors that rely on\n+        // that yet, though.\n+        let enclosure =\n+            if let Some(body_hir) = self.tcx.opt_local_def_id_to_hir_id(obligation.cause.body_id) {\n+                self.describe_enclosure(body_hir).map(|s| s.to_owned())\n+            } else {\n+                None\n+            };\n+        flags.push((sym::ItemContext, enclosure));\n \n         match obligation.cause.code() {\n             ObligationCauseCode::BuiltinDerivedObligation(..)"}, {"sha": "b8d9cff9c489ba2d1208c04cd5ae6c3c26a4ea6f", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/246d989a30ad55e333a1870da96fab5066c5b8e9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/246d989a30ad55e333a1870da96fab5066c5b8e9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=246d989a30ad55e333a1870da96fab5066c5b8e9", "patch": "@@ -1298,7 +1298,7 @@ fn assemble_candidate_for_impl_trait_in_trait<'cx, 'tcx>(\n ) {\n     let tcx = selcx.tcx();\n     if tcx.def_kind(obligation.predicate.def_id) == DefKind::ImplTraitPlaceholder {\n-        let trait_fn_def_id = tcx.impl_trait_in_trait_parent(obligation.predicate.def_id);\n+        let trait_fn_def_id = tcx.impl_trait_in_trait_parent_fn(obligation.predicate.def_id);\n \n         let trait_def_id = tcx.parent(trait_fn_def_id);\n         let trait_substs =\n@@ -2200,7 +2200,7 @@ fn confirm_impl_trait_in_trait_candidate<'tcx>(\n     let tcx = selcx.tcx();\n     let mut obligations = data.nested;\n \n-    let trait_fn_def_id = tcx.impl_trait_in_trait_parent(obligation.predicate.def_id);\n+    let trait_fn_def_id = tcx.impl_trait_in_trait_parent_fn(obligation.predicate.def_id);\n     let leaf_def = match specialization_graph::assoc_def(tcx, data.impl_def_id, trait_fn_def_id) {\n         Ok(assoc_ty) => assoc_ty,\n         Err(guar) => return Progress::error(tcx, guar),"}, {"sha": "68b1086e8e3f5d8f87fd6374364e3d68c44ca848", "filename": "compiler/rustc_ty_utils/src/assoc.rs", "status": "modified", "additions": 34, "deletions": 3, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/246d989a30ad55e333a1870da96fab5066c5b8e9/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/246d989a30ad55e333a1870da96fab5066c5b8e9/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs?ref=246d989a30ad55e333a1870da96fab5066c5b8e9", "patch": "@@ -244,7 +244,7 @@ fn associated_item_for_impl_trait_in_trait(\n     tcx: TyCtxt<'_>,\n     opaque_ty_def_id: LocalDefId,\n ) -> LocalDefId {\n-    let fn_def_id = tcx.impl_trait_in_trait_parent(opaque_ty_def_id.to_def_id());\n+    let fn_def_id = tcx.impl_trait_in_trait_parent_fn(opaque_ty_def_id.to_def_id());\n     let trait_def_id = tcx.parent(fn_def_id);\n     assert_eq!(tcx.def_kind(trait_def_id), DefKind::Trait);\n \n@@ -289,8 +289,39 @@ fn associated_item_for_impl_trait_in_trait(\n         InternalSubsts::identity_for_item(tcx, opaque_ty_def_id.to_def_id()),\n     )));\n \n-    // Copy generics_of of the opaque.\n-    trait_assoc_ty.generics_of(tcx.generics_of(opaque_ty_def_id).clone());\n+    trait_assoc_ty.is_type_alias_impl_trait(false);\n+\n+    // Copy generics_of of the opaque type item but the trait is the parent.\n+    trait_assoc_ty.generics_of({\n+        let opaque_ty_generics = tcx.generics_of(opaque_ty_def_id);\n+        let opaque_ty_parent_count = opaque_ty_generics.parent_count;\n+        let mut params = opaque_ty_generics.params.clone();\n+\n+        let parent_generics = tcx.generics_of(trait_def_id);\n+        let parent_count = parent_generics.parent_count + parent_generics.params.len();\n+\n+        let mut trait_fn_params = tcx.generics_of(fn_def_id).params.clone();\n+\n+        for param in &mut params {\n+            param.index = param.index + parent_count as u32 + trait_fn_params.len() as u32\n+                - opaque_ty_parent_count as u32;\n+        }\n+\n+        trait_fn_params.extend(params);\n+        params = trait_fn_params;\n+\n+        let param_def_id_to_index =\n+            params.iter().map(|param| (param.def_id, param.index)).collect();\n+\n+        ty::Generics {\n+            parent: Some(trait_def_id),\n+            parent_count,\n+            params,\n+            param_def_id_to_index,\n+            has_self: false,\n+            has_late_bound_regions: opaque_ty_generics.has_late_bound_regions,\n+        }\n+    });\n \n     // There are no predicates for the synthesized associated type.\n     trait_assoc_ty.explicit_predicates_of(ty::GenericPredicates {"}, {"sha": "9fed1e57c92131f9bbe7a471e20c80115f8da433", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 31, "deletions": 10, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/246d989a30ad55e333a1870da96fab5066c5b8e9/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/246d989a30ad55e333a1870da96fab5066c5b8e9/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=246d989a30ad55e333a1870da96fab5066c5b8e9", "patch": "@@ -117,16 +117,22 @@ fn adt_sized_constraint(tcx: TyCtxt<'_>, def_id: DefId) -> &[Ty<'_>] {\n \n /// See `ParamEnv` struct definition for details.\n fn param_env(tcx: TyCtxt<'_>, def_id: DefId) -> ty::ParamEnv<'_> {\n-    // When computing the param_env of an RPITIT, copy param_env of the containing function. The\n-    // synthesized associated type doesn't have extra predicates to assume.\n-    if let Some(ImplTraitInTraitData::Trait { fn_def_id, .. }) = tcx.opt_rpitit_info(def_id) {\n-        return tcx.param_env(fn_def_id);\n-    }\n-\n     // Compute the bounds on Self and the type parameters.\n     let ty::InstantiatedPredicates { mut predicates, .. } =\n         tcx.predicates_of(def_id).instantiate_identity(tcx);\n \n+    // When computing the param_env of an RPITIT, use predicates of the containing function,\n+    // *except* for the additional assumption that the RPITIT normalizes to the trait method's\n+    // default opaque type. This is needed to properly check the item bounds of the assoc\n+    // type hold (`check_type_bounds`), since that method already installs a similar projection\n+    // bound, so they will conflict.\n+    // FIXME(-Zlower-impl-trait-in-trait-to-assoc-ty): I don't like this, we should\n+    // at least be making sure that the generics in RPITITs and their parent fn don't\n+    // get out of alignment, or else we do actually need to substitute these predicates.\n+    if let Some(ImplTraitInTraitData::Trait { fn_def_id, .. }) = tcx.opt_rpitit_info(def_id) {\n+        predicates = tcx.predicates_of(fn_def_id).instantiate_identity(tcx).predicates;\n+    }\n+\n     // Finally, we have to normalize the bounds in the environment, in\n     // case they contain any associated type projections. This process\n     // can yield errors if the put in illegal associated types, like\n@@ -160,7 +166,9 @@ fn param_env(tcx: TyCtxt<'_>, def_id: DefId) -> ty::ParamEnv<'_> {\n     }\n \n     let local_did = def_id.as_local();\n-    let hir_id = local_did.map(|def_id| tcx.hir().local_def_id_to_hir_id(def_id));\n+    // FIXME(-Zlower-impl-trait-in-trait-to-assoc-ty): This isn't correct for\n+    // RPITITs in const trait fn.\n+    let hir_id = local_did.and_then(|def_id| tcx.opt_local_def_id_to_hir_id(def_id));\n \n     // FIXME(consts): This is not exactly in line with the constness query.\n     let constness = match hir_id {\n@@ -268,8 +276,8 @@ impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for ImplTraitInTraitFinder<'_, 'tcx> {\n \n     fn visit_ty(&mut self, ty: Ty<'tcx>) -> std::ops::ControlFlow<Self::BreakTy> {\n         if let ty::Alias(ty::Projection, alias_ty) = *ty.kind()\n-            && self.tcx.def_kind(alias_ty.def_id) == DefKind::ImplTraitPlaceholder\n-            && self.tcx.impl_trait_in_trait_parent(alias_ty.def_id) == self.fn_def_id\n+            && self.tcx.is_impl_trait_in_trait(alias_ty.def_id)\n+            && self.tcx.impl_trait_in_trait_parent_fn(alias_ty.def_id) == self.fn_def_id\n             && self.seen.insert(alias_ty.def_id)\n         {\n             // We have entered some binders as we've walked into the\n@@ -282,11 +290,24 @@ impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for ImplTraitInTraitFinder<'_, 'tcx> {\n                     re\n                 }\n             });\n+\n+            // If we're lowering to associated item, install the opaque type which is just\n+            // the `type_of` of the trait's associated item. If we're using the old lowering\n+            // strategy, then just reinterpret the associated type like an opaque :^)\n+            let default_ty = if self.tcx.lower_impl_trait_in_trait_to_assoc_ty() {\n+                self\n+                    .tcx\n+                    .type_of(alias_ty.def_id)\n+                    .subst(self.tcx, alias_ty.substs)\n+            } else {\n+                self.tcx.mk_alias(ty::Opaque, alias_ty)\n+            };\n+\n             self.predicates.push(\n                 ty::Binder::bind_with_vars(\n                     ty::ProjectionPredicate {\n                         projection_ty: alias_ty,\n-                        term: self.tcx.mk_alias(ty::Opaque, alias_ty).into(),\n+                        term: default_ty.into(),\n                     },\n                     self.bound_vars,\n                 )"}, {"sha": "989e091a0d2d8235cb699e313112693cad20169d", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/246d989a30ad55e333a1870da96fab5066c5b8e9/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/246d989a30ad55e333a1870da96fab5066c5b8e9/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=246d989a30ad55e333a1870da96fab5066c5b8e9", "patch": "@@ -426,7 +426,7 @@ fn clean_projection<'tcx>(\n     cx: &mut DocContext<'tcx>,\n     def_id: Option<DefId>,\n ) -> Type {\n-    if cx.tcx.def_kind(ty.skip_binder().def_id) == DefKind::ImplTraitPlaceholder {\n+    if cx.tcx.is_impl_trait_in_trait(ty.skip_binder().def_id) {\n         let bounds = cx\n             .tcx\n             .explicit_item_bounds(ty.skip_binder().def_id)"}, {"sha": "2142ee232ca5c54935facab007d87a5ec2fea447", "filename": "tests/ui/async-await/in-trait/async-default-fn-overridden.current.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/246d989a30ad55e333a1870da96fab5066c5b8e9/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-default-fn-overridden.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/246d989a30ad55e333a1870da96fab5066c5b8e9/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-default-fn-overridden.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-default-fn-overridden.current.stderr?ref=246d989a30ad55e333a1870da96fab5066c5b8e9", "patch": "@@ -1,5 +1,5 @@\n warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/async-default-fn-overridden.rs:4:12\n+  --> $DIR/async-default-fn-overridden.rs:6:12\n    |\n LL | #![feature(async_fn_in_trait)]\n    |            ^^^^^^^^^^^^^^^^^", "previous_filename": "tests/ui/async-await/in-trait/async-default-fn-overridden.stderr"}, {"sha": "2142ee232ca5c54935facab007d87a5ec2fea447", "filename": "tests/ui/async-await/in-trait/async-default-fn-overridden.next.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/246d989a30ad55e333a1870da96fab5066c5b8e9/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-default-fn-overridden.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/246d989a30ad55e333a1870da96fab5066c5b8e9/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-default-fn-overridden.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-default-fn-overridden.next.stderr?ref=246d989a30ad55e333a1870da96fab5066c5b8e9", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/async-default-fn-overridden.rs:6:12\n+   |\n+LL | #![feature(async_fn_in_trait)]\n+   |            ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+warning: 1 warning emitted\n+"}, {"sha": "dd1af93d706c43c2a8396e1fafc8316ec8573d19", "filename": "tests/ui/async-await/in-trait/async-default-fn-overridden.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/246d989a30ad55e333a1870da96fab5066c5b8e9/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-default-fn-overridden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/246d989a30ad55e333a1870da96fab5066c5b8e9/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-default-fn-overridden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-default-fn-overridden.rs?ref=246d989a30ad55e333a1870da96fab5066c5b8e9", "patch": "@@ -1,5 +1,7 @@\n // run-pass\n // edition:2021\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(async_fn_in_trait)]\n //~^ WARN the feature `async_fn_in_trait` is incomplete and may not be safe to use"}, {"sha": "780da068962964b167d9a6333d3ee337094dda84", "filename": "tests/ui/async-await/in-trait/async-generics-and-bounds.current.stderr", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/246d989a30ad55e333a1870da96fab5066c5b8e9/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics-and-bounds.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/246d989a30ad55e333a1870da96fab5066c5b8e9/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics-and-bounds.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics-and-bounds.current.stderr?ref=246d989a30ad55e333a1870da96fab5066c5b8e9", "patch": "@@ -1,33 +1,33 @@\n error[E0311]: the parameter type `U` may not live long enough\n-  --> $DIR/async-generics-and-bounds.rs:12:28\n+  --> $DIR/async-generics-and-bounds.rs:14:28\n    |\n LL |     async fn foo(&self) -> &(T, U) where T: Debug + Sized, U: Hash;\n    |                            ^^^^^^^\n    |\n note: the parameter type `U` must be valid for the anonymous lifetime defined here...\n-  --> $DIR/async-generics-and-bounds.rs:12:18\n+  --> $DIR/async-generics-and-bounds.rs:14:18\n    |\n LL |     async fn foo(&self) -> &(T, U) where T: Debug + Sized, U: Hash;\n    |                  ^^^^^\n note: ...so that the reference type `&(T, U)` does not outlive the data it points at\n-  --> $DIR/async-generics-and-bounds.rs:12:28\n+  --> $DIR/async-generics-and-bounds.rs:14:28\n    |\n LL |     async fn foo(&self) -> &(T, U) where T: Debug + Sized, U: Hash;\n    |                            ^^^^^^^\n \n error[E0311]: the parameter type `T` may not live long enough\n-  --> $DIR/async-generics-and-bounds.rs:12:28\n+  --> $DIR/async-generics-and-bounds.rs:14:28\n    |\n LL |     async fn foo(&self) -> &(T, U) where T: Debug + Sized, U: Hash;\n    |                            ^^^^^^^\n    |\n note: the parameter type `T` must be valid for the anonymous lifetime defined here...\n-  --> $DIR/async-generics-and-bounds.rs:12:18\n+  --> $DIR/async-generics-and-bounds.rs:14:18\n    |\n LL |     async fn foo(&self) -> &(T, U) where T: Debug + Sized, U: Hash;\n    |                  ^^^^^\n note: ...so that the reference type `&(T, U)` does not outlive the data it points at\n-  --> $DIR/async-generics-and-bounds.rs:12:28\n+  --> $DIR/async-generics-and-bounds.rs:14:28\n    |\n LL |     async fn foo(&self) -> &(T, U) where T: Debug + Sized, U: Hash;\n    |                            ^^^^^^^", "previous_filename": "tests/ui/async-await/in-trait/async-generics-and-bounds.stderr"}, {"sha": "780da068962964b167d9a6333d3ee337094dda84", "filename": "tests/ui/async-await/in-trait/async-generics-and-bounds.next.stderr", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/246d989a30ad55e333a1870da96fab5066c5b8e9/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics-and-bounds.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/246d989a30ad55e333a1870da96fab5066c5b8e9/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics-and-bounds.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics-and-bounds.next.stderr?ref=246d989a30ad55e333a1870da96fab5066c5b8e9", "patch": "@@ -0,0 +1,37 @@\n+error[E0311]: the parameter type `U` may not live long enough\n+  --> $DIR/async-generics-and-bounds.rs:14:28\n+   |\n+LL |     async fn foo(&self) -> &(T, U) where T: Debug + Sized, U: Hash;\n+   |                            ^^^^^^^\n+   |\n+note: the parameter type `U` must be valid for the anonymous lifetime defined here...\n+  --> $DIR/async-generics-and-bounds.rs:14:18\n+   |\n+LL |     async fn foo(&self) -> &(T, U) where T: Debug + Sized, U: Hash;\n+   |                  ^^^^^\n+note: ...so that the reference type `&(T, U)` does not outlive the data it points at\n+  --> $DIR/async-generics-and-bounds.rs:14:28\n+   |\n+LL |     async fn foo(&self) -> &(T, U) where T: Debug + Sized, U: Hash;\n+   |                            ^^^^^^^\n+\n+error[E0311]: the parameter type `T` may not live long enough\n+  --> $DIR/async-generics-and-bounds.rs:14:28\n+   |\n+LL |     async fn foo(&self) -> &(T, U) where T: Debug + Sized, U: Hash;\n+   |                            ^^^^^^^\n+   |\n+note: the parameter type `T` must be valid for the anonymous lifetime defined here...\n+  --> $DIR/async-generics-and-bounds.rs:14:18\n+   |\n+LL |     async fn foo(&self) -> &(T, U) where T: Debug + Sized, U: Hash;\n+   |                  ^^^^^\n+note: ...so that the reference type `&(T, U)` does not outlive the data it points at\n+  --> $DIR/async-generics-and-bounds.rs:14:28\n+   |\n+LL |     async fn foo(&self) -> &(T, U) where T: Debug + Sized, U: Hash;\n+   |                            ^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0311`."}, {"sha": "146e74ec2d03b812f1c771f2a7db2978e1e088ac", "filename": "tests/ui/async-await/in-trait/async-generics-and-bounds.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/246d989a30ad55e333a1870da96fab5066c5b8e9/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics-and-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/246d989a30ad55e333a1870da96fab5066c5b8e9/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics-and-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics-and-bounds.rs?ref=246d989a30ad55e333a1870da96fab5066c5b8e9", "patch": "@@ -1,6 +1,8 @@\n // check-fail\n // known-bug: #102682\n // edition: 2021\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(async_fn_in_trait)]\n #![allow(incomplete_features)]"}, {"sha": "04e1ab6d76978a94d1326f80cb219dc07bcc64c7", "filename": "tests/ui/async-await/in-trait/async-generics.current.stderr", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/246d989a30ad55e333a1870da96fab5066c5b8e9/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/246d989a30ad55e333a1870da96fab5066c5b8e9/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics.current.stderr?ref=246d989a30ad55e333a1870da96fab5066c5b8e9", "patch": "@@ -1,33 +1,33 @@\n error[E0311]: the parameter type `U` may not live long enough\n-  --> $DIR/async-generics.rs:9:28\n+  --> $DIR/async-generics.rs:11:28\n    |\n LL |     async fn foo(&self) -> &(T, U);\n    |                            ^^^^^^^\n    |\n note: the parameter type `U` must be valid for the anonymous lifetime defined here...\n-  --> $DIR/async-generics.rs:9:18\n+  --> $DIR/async-generics.rs:11:18\n    |\n LL |     async fn foo(&self) -> &(T, U);\n    |                  ^^^^^\n note: ...so that the reference type `&(T, U)` does not outlive the data it points at\n-  --> $DIR/async-generics.rs:9:28\n+  --> $DIR/async-generics.rs:11:28\n    |\n LL |     async fn foo(&self) -> &(T, U);\n    |                            ^^^^^^^\n \n error[E0311]: the parameter type `T` may not live long enough\n-  --> $DIR/async-generics.rs:9:28\n+  --> $DIR/async-generics.rs:11:28\n    |\n LL |     async fn foo(&self) -> &(T, U);\n    |                            ^^^^^^^\n    |\n note: the parameter type `T` must be valid for the anonymous lifetime defined here...\n-  --> $DIR/async-generics.rs:9:18\n+  --> $DIR/async-generics.rs:11:18\n    |\n LL |     async fn foo(&self) -> &(T, U);\n    |                  ^^^^^\n note: ...so that the reference type `&(T, U)` does not outlive the data it points at\n-  --> $DIR/async-generics.rs:9:28\n+  --> $DIR/async-generics.rs:11:28\n    |\n LL |     async fn foo(&self) -> &(T, U);\n    |                            ^^^^^^^", "previous_filename": "tests/ui/async-await/in-trait/async-generics.stderr"}, {"sha": "04e1ab6d76978a94d1326f80cb219dc07bcc64c7", "filename": "tests/ui/async-await/in-trait/async-generics.next.stderr", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/246d989a30ad55e333a1870da96fab5066c5b8e9/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/246d989a30ad55e333a1870da96fab5066c5b8e9/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics.next.stderr?ref=246d989a30ad55e333a1870da96fab5066c5b8e9", "patch": "@@ -0,0 +1,37 @@\n+error[E0311]: the parameter type `U` may not live long enough\n+  --> $DIR/async-generics.rs:11:28\n+   |\n+LL |     async fn foo(&self) -> &(T, U);\n+   |                            ^^^^^^^\n+   |\n+note: the parameter type `U` must be valid for the anonymous lifetime defined here...\n+  --> $DIR/async-generics.rs:11:18\n+   |\n+LL |     async fn foo(&self) -> &(T, U);\n+   |                  ^^^^^\n+note: ...so that the reference type `&(T, U)` does not outlive the data it points at\n+  --> $DIR/async-generics.rs:11:28\n+   |\n+LL |     async fn foo(&self) -> &(T, U);\n+   |                            ^^^^^^^\n+\n+error[E0311]: the parameter type `T` may not live long enough\n+  --> $DIR/async-generics.rs:11:28\n+   |\n+LL |     async fn foo(&self) -> &(T, U);\n+   |                            ^^^^^^^\n+   |\n+note: the parameter type `T` must be valid for the anonymous lifetime defined here...\n+  --> $DIR/async-generics.rs:11:18\n+   |\n+LL |     async fn foo(&self) -> &(T, U);\n+   |                  ^^^^^\n+note: ...so that the reference type `&(T, U)` does not outlive the data it points at\n+  --> $DIR/async-generics.rs:11:28\n+   |\n+LL |     async fn foo(&self) -> &(T, U);\n+   |                            ^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0311`."}, {"sha": "507500abf4e1cd5501a4b1ec291a6d956761f815", "filename": "tests/ui/async-await/in-trait/async-generics.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/246d989a30ad55e333a1870da96fab5066c5b8e9/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/246d989a30ad55e333a1870da96fab5066c5b8e9/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics.rs?ref=246d989a30ad55e333a1870da96fab5066c5b8e9", "patch": "@@ -1,6 +1,8 @@\n // check-fail\n // known-bug: #102682\n // edition: 2021\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(async_fn_in_trait)]\n #![allow(incomplete_features)]"}, {"sha": "05c025cc169ffb8c9273fa4646fa307b2e19265c", "filename": "tests/ui/impl-trait/in-trait/box-coerce-span-in-default.current.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/246d989a30ad55e333a1870da96fab5066c5b8e9/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fbox-coerce-span-in-default.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/246d989a30ad55e333a1870da96fab5066c5b8e9/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fbox-coerce-span-in-default.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fbox-coerce-span-in-default.current.stderr?ref=246d989a30ad55e333a1870da96fab5066c5b8e9", "patch": "@@ -1,5 +1,5 @@\n warning: the feature `return_position_impl_trait_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/box-coerce-span-in-default.rs:3:12\n+  --> $DIR/box-coerce-span-in-default.rs:5:12\n    |\n LL | #![feature(return_position_impl_trait_in_trait)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^", "previous_filename": "tests/ui/impl-trait/in-trait/box-coerce-span-in-default.stderr"}, {"sha": "05c025cc169ffb8c9273fa4646fa307b2e19265c", "filename": "tests/ui/impl-trait/in-trait/box-coerce-span-in-default.next.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/246d989a30ad55e333a1870da96fab5066c5b8e9/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fbox-coerce-span-in-default.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/246d989a30ad55e333a1870da96fab5066c5b8e9/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fbox-coerce-span-in-default.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fbox-coerce-span-in-default.next.stderr?ref=246d989a30ad55e333a1870da96fab5066c5b8e9", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `return_position_impl_trait_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/box-coerce-span-in-default.rs:5:12\n+   |\n+LL | #![feature(return_position_impl_trait_in_trait)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+warning: 1 warning emitted\n+"}, {"sha": "163bb4fcf773daca83158c50d70b7d0ca259cae8", "filename": "tests/ui/impl-trait/in-trait/box-coerce-span-in-default.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/246d989a30ad55e333a1870da96fab5066c5b8e9/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fbox-coerce-span-in-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/246d989a30ad55e333a1870da96fab5066c5b8e9/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fbox-coerce-span-in-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fbox-coerce-span-in-default.rs?ref=246d989a30ad55e333a1870da96fab5066c5b8e9", "patch": "@@ -1,4 +1,6 @@\n // check-pass\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(return_position_impl_trait_in_trait)]\n //~^ WARN the feature `return_position_impl_trait_in_trait` is incomplete"}, {"sha": "85450e3b0a0b830d4df8eb49bcff29152f9d286e", "filename": "tests/ui/impl-trait/in-trait/default-body-type-err-2.current.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/246d989a30ad55e333a1870da96fab5066c5b8e9/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-type-err-2.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/246d989a30ad55e333a1870da96fab5066c5b8e9/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-type-err-2.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-type-err-2.current.stderr?ref=246d989a30ad55e333a1870da96fab5066c5b8e9", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/default-body-type-err-2.rs:8:9\n+  --> $DIR/default-body-type-err-2.rs:10:9\n    |\n LL |         42\n    |         ^^- help: try using a conversion method: `.to_string()`", "previous_filename": "tests/ui/impl-trait/in-trait/default-body-type-err-2.stderr"}, {"sha": "85450e3b0a0b830d4df8eb49bcff29152f9d286e", "filename": "tests/ui/impl-trait/in-trait/default-body-type-err-2.next.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/246d989a30ad55e333a1870da96fab5066c5b8e9/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-type-err-2.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/246d989a30ad55e333a1870da96fab5066c5b8e9/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-type-err-2.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-type-err-2.next.stderr?ref=246d989a30ad55e333a1870da96fab5066c5b8e9", "patch": "@@ -0,0 +1,11 @@\n+error[E0308]: mismatched types\n+  --> $DIR/default-body-type-err-2.rs:10:9\n+   |\n+LL |         42\n+   |         ^^- help: try using a conversion method: `.to_string()`\n+   |         |\n+   |         expected `String`, found integer\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "623237763100dd7741e88fe5050366650cd9b66f", "filename": "tests/ui/impl-trait/in-trait/default-body-type-err-2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/246d989a30ad55e333a1870da96fab5066c5b8e9/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-type-err-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/246d989a30ad55e333a1870da96fab5066c5b8e9/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-type-err-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-type-err-2.rs?ref=246d989a30ad55e333a1870da96fab5066c5b8e9", "patch": "@@ -1,4 +1,6 @@\n // edition:2021\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![allow(incomplete_features)]\n #![feature(async_fn_in_trait)]"}, {"sha": "c949168a3778998a068dc38fa9fedbcc7f26c0e4", "filename": "tests/ui/impl-trait/in-trait/default-body-type-err.current.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/246d989a30ad55e333a1870da96fab5066c5b8e9/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-type-err.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/246d989a30ad55e333a1870da96fab5066c5b8e9/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-type-err.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-type-err.current.stderr?ref=246d989a30ad55e333a1870da96fab5066c5b8e9", "patch": "@@ -1,5 +1,5 @@\n error[E0271]: type mismatch resolving `<&i32 as Deref>::Target == String`\n-  --> $DIR/default-body-type-err.rs:7:22\n+  --> $DIR/default-body-type-err.rs:10:22\n    |\n LL |     fn lol(&self) -> impl Deref<Target = String> {\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `i32`, found `String`", "previous_filename": "tests/ui/impl-trait/in-trait/default-body-type-err.stderr"}, {"sha": "c949168a3778998a068dc38fa9fedbcc7f26c0e4", "filename": "tests/ui/impl-trait/in-trait/default-body-type-err.next.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/246d989a30ad55e333a1870da96fab5066c5b8e9/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-type-err.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/246d989a30ad55e333a1870da96fab5066c5b8e9/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-type-err.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-type-err.next.stderr?ref=246d989a30ad55e333a1870da96fab5066c5b8e9", "patch": "@@ -0,0 +1,12 @@\n+error[E0271]: type mismatch resolving `<&i32 as Deref>::Target == String`\n+  --> $DIR/default-body-type-err.rs:10:22\n+   |\n+LL |     fn lol(&self) -> impl Deref<Target = String> {\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `i32`, found `String`\n+LL |\n+LL |         &1i32\n+   |         ----- return type was inferred to be `&i32` here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0271`."}, {"sha": "9bd5b7779898b5e0a55d225ef4a84fb7be7ceb01", "filename": "tests/ui/impl-trait/in-trait/default-body-type-err.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/246d989a30ad55e333a1870da96fab5066c5b8e9/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-type-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/246d989a30ad55e333a1870da96fab5066c5b8e9/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-type-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body-type-err.rs?ref=246d989a30ad55e333a1870da96fab5066c5b8e9", "patch": "@@ -1,3 +1,6 @@\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n+\n #![allow(incomplete_features)]\n #![feature(return_position_impl_trait_in_trait)]\n "}, {"sha": "ab6a51c6bcb84d8842eaad3e0c91e66125b88833", "filename": "tests/ui/impl-trait/in-trait/default-body.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/246d989a30ad55e333a1870da96fab5066c5b8e9/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/246d989a30ad55e333a1870da96fab5066c5b8e9/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-body.rs?ref=246d989a30ad55e333a1870da96fab5066c5b8e9", "patch": "@@ -1,5 +1,7 @@\n // check-pass\n // edition:2021\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(async_fn_in_trait, return_position_impl_trait_in_trait)]\n #![allow(incomplete_features)]"}, {"sha": "7bb79911f56f81168e24eae0f7d9ab3387b7887d", "filename": "tests/ui/impl-trait/in-trait/default-method-constraint.current.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/246d989a30ad55e333a1870da96fab5066c5b8e9/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-constraint.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/246d989a30ad55e333a1870da96fab5066c5b8e9/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-constraint.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-constraint.current.stderr?ref=246d989a30ad55e333a1870da96fab5066c5b8e9", "patch": "@@ -1,5 +1,5 @@\n warning: the feature `return_position_impl_trait_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/default-method-constraint.rs:5:12\n+  --> $DIR/default-method-constraint.rs:7:12\n    |\n LL | #![feature(return_position_impl_trait_in_trait)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^", "previous_filename": "tests/ui/impl-trait/in-trait/default-method-constraint.stderr"}, {"sha": "7bb79911f56f81168e24eae0f7d9ab3387b7887d", "filename": "tests/ui/impl-trait/in-trait/default-method-constraint.next.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/246d989a30ad55e333a1870da96fab5066c5b8e9/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-constraint.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/246d989a30ad55e333a1870da96fab5066c5b8e9/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-constraint.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-constraint.next.stderr?ref=246d989a30ad55e333a1870da96fab5066c5b8e9", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `return_position_impl_trait_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/default-method-constraint.rs:7:12\n+   |\n+LL | #![feature(return_position_impl_trait_in_trait)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+warning: 1 warning emitted\n+"}, {"sha": "e85fe3c8626f45e003d6a39d9e7ab3d196cad744", "filename": "tests/ui/impl-trait/in-trait/default-method-constraint.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/246d989a30ad55e333a1870da96fab5066c5b8e9/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-constraint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/246d989a30ad55e333a1870da96fab5066c5b8e9/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-constraint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-constraint.rs?ref=246d989a30ad55e333a1870da96fab5066c5b8e9", "patch": "@@ -1,4 +1,6 @@\n // check-pass\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n // This didn't work in the previous default RPITIT method hack attempt\n "}, {"sha": "cac9a29f6440f41f5590a72192f773d73ff5de94", "filename": "tests/ui/impl-trait/in-trait/issue-102571.current.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/246d989a30ad55e333a1870da96fab5066c5b8e9/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fissue-102571.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/246d989a30ad55e333a1870da96fab5066c5b8e9/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fissue-102571.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fissue-102571.current.stderr?ref=246d989a30ad55e333a1870da96fab5066c5b8e9", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/issue-102571.rs:20:9\n+  --> $DIR/issue-102571.rs:23:9\n    |\n LL |     let () = t.bar();\n    |         ^^   ------- this expression has type `impl Deref<Target = impl std::fmt::Display + ?Sized>`", "previous_filename": "tests/ui/impl-trait/in-trait/issue-102571.stderr"}, {"sha": "cac9a29f6440f41f5590a72192f773d73ff5de94", "filename": "tests/ui/impl-trait/in-trait/issue-102571.next.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/246d989a30ad55e333a1870da96fab5066c5b8e9/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fissue-102571.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/246d989a30ad55e333a1870da96fab5066c5b8e9/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fissue-102571.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fissue-102571.next.stderr?ref=246d989a30ad55e333a1870da96fab5066c5b8e9", "patch": "@@ -0,0 +1,14 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-102571.rs:23:9\n+   |\n+LL |     let () = t.bar();\n+   |         ^^   ------- this expression has type `impl Deref<Target = impl std::fmt::Display + ?Sized>`\n+   |         |\n+   |         expected associated type, found `()`\n+   |\n+   = note: expected associated type `impl Deref<Target = impl std::fmt::Display + ?Sized>`\n+                    found unit type `()`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "f0ddab5e7f2271e5bd470fc3c57e18e4beceb4f1", "filename": "tests/ui/impl-trait/in-trait/issue-102571.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/246d989a30ad55e333a1870da96fab5066c5b8e9/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fissue-102571.rs", "raw_url": "https://github.com/rust-lang/rust/raw/246d989a30ad55e333a1870da96fab5066c5b8e9/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fissue-102571.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fissue-102571.rs?ref=246d989a30ad55e333a1870da96fab5066c5b8e9", "patch": "@@ -1,3 +1,6 @@\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n+\n #![feature(return_position_impl_trait_in_trait)]\n #![allow(incomplete_features)]\n "}, {"sha": "f48e7a1ed1407461cb57a4371ce48b67f8ca1f0f", "filename": "tests/ui/impl-trait/in-trait/specialization-broken.current.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/246d989a30ad55e333a1870da96fab5066c5b8e9/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fspecialization-broken.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/246d989a30ad55e333a1870da96fab5066c5b8e9/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fspecialization-broken.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fspecialization-broken.current.stderr?ref=246d989a30ad55e333a1870da96fab5066c5b8e9", "patch": "@@ -1,5 +1,5 @@\n error[E0053]: method `bar` has an incompatible type for trait\n-  --> $DIR/specialization-broken.rs:16:22\n+  --> $DIR/specialization-broken.rs:19:22\n    |\n LL | default impl<U> Foo for U\n    |              - this type parameter\n@@ -11,15 +11,15 @@ LL |     fn bar(&self) -> U {\n    |                      help: change the output type to match the trait: `impl Sized`\n    |\n note: type in trait\n-  --> $DIR/specialization-broken.rs:9:22\n+  --> $DIR/specialization-broken.rs:12:22\n    |\n LL |     fn bar(&self) -> impl Sized;\n    |                      ^^^^^^^^^^\n    = note: expected signature `fn(&U) -> impl Sized`\n               found signature `fn(&U) -> U`\n \n error: method with return-position `impl Trait` in trait cannot be specialized\n-  --> $DIR/specialization-broken.rs:16:5\n+  --> $DIR/specialization-broken.rs:19:5\n    |\n LL |     fn bar(&self) -> U {\n    |     ^^^^^^^^^^^^^^^^^^", "previous_filename": "tests/ui/impl-trait/in-trait/specialization-broken.stderr"}, {"sha": "f48e7a1ed1407461cb57a4371ce48b67f8ca1f0f", "filename": "tests/ui/impl-trait/in-trait/specialization-broken.next.stderr", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/246d989a30ad55e333a1870da96fab5066c5b8e9/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fspecialization-broken.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/246d989a30ad55e333a1870da96fab5066c5b8e9/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fspecialization-broken.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fspecialization-broken.next.stderr?ref=246d989a30ad55e333a1870da96fab5066c5b8e9", "patch": "@@ -0,0 +1,31 @@\n+error[E0053]: method `bar` has an incompatible type for trait\n+  --> $DIR/specialization-broken.rs:19:22\n+   |\n+LL | default impl<U> Foo for U\n+   |              - this type parameter\n+...\n+LL |     fn bar(&self) -> U {\n+   |                      ^\n+   |                      |\n+   |                      expected associated type, found type parameter `U`\n+   |                      help: change the output type to match the trait: `impl Sized`\n+   |\n+note: type in trait\n+  --> $DIR/specialization-broken.rs:12:22\n+   |\n+LL |     fn bar(&self) -> impl Sized;\n+   |                      ^^^^^^^^^^\n+   = note: expected signature `fn(&U) -> impl Sized`\n+              found signature `fn(&U) -> U`\n+\n+error: method with return-position `impl Trait` in trait cannot be specialized\n+  --> $DIR/specialization-broken.rs:19:5\n+   |\n+LL |     fn bar(&self) -> U {\n+   |     ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: specialization behaves in inconsistent and surprising ways with `#![feature(return_position_impl_trait_in_trait)]`, and for now is disallowed\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0053`."}, {"sha": "658d0709717a1bb14eb83d54b6fa287ab436ba2f", "filename": "tests/ui/impl-trait/in-trait/specialization-broken.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/246d989a30ad55e333a1870da96fab5066c5b8e9/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fspecialization-broken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/246d989a30ad55e333a1870da96fab5066c5b8e9/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fspecialization-broken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fspecialization-broken.rs?ref=246d989a30ad55e333a1870da96fab5066c5b8e9", "patch": "@@ -1,3 +1,6 @@\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n+\n // FIXME(compiler-errors): I'm not exactly sure if this is expected to pass or not.\n // But we fixed an ICE anyways.\n "}, {"sha": "8392f26e7c8cacdd29bfb418037b6ba07c3ea530", "filename": "tests/ui/impl-trait/in-trait/wf-bounds.current.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/246d989a30ad55e333a1870da96fab5066c5b8e9/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fwf-bounds.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/246d989a30ad55e333a1870da96fab5066c5b8e9/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fwf-bounds.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fwf-bounds.current.stderr?ref=246d989a30ad55e333a1870da96fab5066c5b8e9", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n-  --> $DIR/wf-bounds.rs:9:22\n+  --> $DIR/wf-bounds.rs:11:22\n    |\n LL |     fn nya() -> impl Wf<Vec<[u8]>>;\n    |                      ^^^^^^^^^^^^^ doesn't have a size known at compile-time\n@@ -9,14 +9,14 @@ note: required by a bound in `Vec`\n   --> $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n \n error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n-  --> $DIR/wf-bounds.rs:12:23\n+  --> $DIR/wf-bounds.rs:14:23\n    |\n LL |     fn nya2() -> impl Wf<[u8]>;\n    |                       ^^^^^^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `[u8]`\n note: required by a bound in `Wf`\n-  --> $DIR/wf-bounds.rs:6:10\n+  --> $DIR/wf-bounds.rs:8:10\n    |\n LL | trait Wf<T> {}\n    |          ^ required by this bound in `Wf`", "previous_filename": "tests/ui/impl-trait/in-trait/wf-bounds.stderr"}, {"sha": "8392f26e7c8cacdd29bfb418037b6ba07c3ea530", "filename": "tests/ui/impl-trait/in-trait/wf-bounds.next.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/246d989a30ad55e333a1870da96fab5066c5b8e9/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fwf-bounds.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/246d989a30ad55e333a1870da96fab5066c5b8e9/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fwf-bounds.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fwf-bounds.next.stderr?ref=246d989a30ad55e333a1870da96fab5066c5b8e9", "patch": "@@ -0,0 +1,30 @@\n+error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n+  --> $DIR/wf-bounds.rs:11:22\n+   |\n+LL |     fn nya() -> impl Wf<Vec<[u8]>>;\n+   |                      ^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: the trait `Sized` is not implemented for `[u8]`\n+note: required by a bound in `Vec`\n+  --> $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n+\n+error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n+  --> $DIR/wf-bounds.rs:14:23\n+   |\n+LL |     fn nya2() -> impl Wf<[u8]>;\n+   |                       ^^^^^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: the trait `Sized` is not implemented for `[u8]`\n+note: required by a bound in `Wf`\n+  --> $DIR/wf-bounds.rs:8:10\n+   |\n+LL | trait Wf<T> {}\n+   |          ^ required by this bound in `Wf`\n+help: consider relaxing the implicit `Sized` restriction\n+   |\n+LL | trait Wf<T: ?Sized> {}\n+   |           ++++++++\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "39f412753159e474249d551b49cf376c29c5a3a0", "filename": "tests/ui/impl-trait/in-trait/wf-bounds.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/246d989a30ad55e333a1870da96fab5066c5b8e9/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fwf-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/246d989a30ad55e333a1870da96fab5066c5b8e9/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fwf-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fwf-bounds.rs?ref=246d989a30ad55e333a1870da96fab5066c5b8e9", "patch": "@@ -1,4 +1,6 @@\n // issue #101663\n+// [next] compile-flags: -Zlower-impl-trait-in-trait-to-assoc-ty\n+// revisions: current next\n \n #![feature(return_position_impl_trait_in_trait)]\n #![allow(incomplete_features)]"}]}