{"sha": "0a5abcac7f43dde694ae202678b8271e8b57279f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhNWFiY2FjN2Y0M2RkZTY5NGFlMjAyNjc4YjgyNzFlOGI1NzI3OWY=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-02-07T17:56:56Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-02-19T05:03:29Z"}, "message": "Use early return when forbidding unstable attrs", "tree": {"sha": "673f67e3e3e464c4fbc55196636ebfaa852d2262", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/673f67e3e3e464c4fbc55196636ebfaa852d2262"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a5abcac7f43dde694ae202678b8271e8b57279f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a5abcac7f43dde694ae202678b8271e8b57279f", "html_url": "https://github.com/rust-lang/rust/commit/0a5abcac7f43dde694ae202678b8271e8b57279f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a5abcac7f43dde694ae202678b8271e8b57279f/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70f78797d5f3e4ea7fb4ae853dc0f368007c56a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/70f78797d5f3e4ea7fb4ae853dc0f368007c56a2", "html_url": "https://github.com/rust-lang/rust/commit/70f78797d5f3e4ea7fb4ae853dc0f368007c56a2"}], "stats": {"total": 246, "additions": 129, "deletions": 117}, "files": [{"sha": "7d93666b1a6297933a0616394f13fe918f505c73", "filename": "src/librustc_passes/stability.rs", "status": "modified", "additions": 129, "deletions": 117, "changes": 246, "blob_url": "https://github.com/rust-lang/rust/blob/0a5abcac7f43dde694ae202678b8271e8b57279f/src%2Flibrustc_passes%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a5abcac7f43dde694ae202678b8271e8b57279f/src%2Flibrustc_passes%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fstability.rs?ref=0a5abcac7f43dde694ae202678b8271e8b57279f", "patch": "@@ -58,144 +58,156 @@ impl<'a, 'tcx> Annotator<'a, 'tcx> {\n     ) where\n         F: FnOnce(&mut Self),\n     {\n-        if self.tcx.features().staged_api {\n-            // This crate explicitly wants staged API.\n-            debug!(\"annotate(id = {:?}, attrs = {:?})\", hir_id, attrs);\n-            if let Some(..) = attr::find_deprecation(&self.tcx.sess.parse_sess, attrs, item_sp) {\n-                self.tcx.sess.span_err(\n-                    item_sp,\n-                    \"`#[deprecated]` cannot be used in staged API; \\\n-                                                 use `#[rustc_deprecated]` instead\",\n-                );\n-            }\n-            let (stab, const_stab) =\n-                attr::find_stability(&self.tcx.sess.parse_sess, attrs, item_sp);\n-            if let Some(const_stab) = const_stab {\n-                let const_stab = self.tcx.intern_const_stability(const_stab);\n-                self.index.const_stab_map.insert(hir_id, const_stab);\n+        if !self.tcx.features().staged_api {\n+            self.forbid_staged_api_attrs(hir_id, attrs, item_sp, kind, visit_children);\n+            return;\n+        }\n+\n+        // This crate explicitly wants staged API.\n+        debug!(\"annotate(id = {:?}, attrs = {:?})\", hir_id, attrs);\n+        if let Some(..) = attr::find_deprecation(&self.tcx.sess.parse_sess, attrs, item_sp) {\n+            self.tcx.sess.span_err(\n+                item_sp,\n+                \"`#[deprecated]` cannot be used in staged API; \\\n+                                             use `#[rustc_deprecated]` instead\",\n+            );\n+        }\n+        let (stab, const_stab) =\n+            attr::find_stability(&self.tcx.sess.parse_sess, attrs, item_sp);\n+        if let Some(const_stab) = const_stab {\n+            let const_stab = self.tcx.intern_const_stability(const_stab);\n+            self.index.const_stab_map.insert(hir_id, const_stab);\n+        }\n+        if let Some(mut stab) = stab {\n+            // Error if prohibited, or can't inherit anything from a container.\n+            if kind == AnnotationKind::Prohibited\n+                || (kind == AnnotationKind::Container\n+                    && stab.level.is_stable()\n+                    && stab.rustc_depr.is_none())\n+            {\n+                self.tcx.sess.span_err(item_sp, \"This stability annotation is useless\");\n             }\n-            if let Some(mut stab) = stab {\n-                // Error if prohibited, or can't inherit anything from a container.\n-                if kind == AnnotationKind::Prohibited\n-                    || (kind == AnnotationKind::Container\n-                        && stab.level.is_stable()\n-                        && stab.rustc_depr.is_none())\n-                {\n-                    self.tcx.sess.span_err(item_sp, \"This stability annotation is useless\");\n-                }\n \n-                debug!(\"annotate: found {:?}\", stab);\n-                // If parent is deprecated and we're not, inherit this by merging\n-                // deprecated_since and its reason.\n-                if let Some(parent_stab) = self.parent_stab {\n-                    if parent_stab.rustc_depr.is_some() && stab.rustc_depr.is_none() {\n-                        stab.rustc_depr = parent_stab.rustc_depr\n-                    }\n+            debug!(\"annotate: found {:?}\", stab);\n+            // If parent is deprecated and we're not, inherit this by merging\n+            // deprecated_since and its reason.\n+            if let Some(parent_stab) = self.parent_stab {\n+                if parent_stab.rustc_depr.is_some() && stab.rustc_depr.is_none() {\n+                    stab.rustc_depr = parent_stab.rustc_depr\n                 }\n+            }\n \n-                let stab = self.tcx.intern_stability(stab);\n-\n-                // Check if deprecated_since < stable_since. If it is,\n-                // this is *almost surely* an accident.\n-                if let (\n-                    &Some(attr::RustcDeprecation { since: dep_since, .. }),\n-                    &attr::Stable { since: stab_since },\n-                ) = (&stab.rustc_depr, &stab.level)\n+            let stab = self.tcx.intern_stability(stab);\n+\n+            // Check if deprecated_since < stable_since. If it is,\n+            // this is *almost surely* an accident.\n+            if let (\n+                &Some(attr::RustcDeprecation { since: dep_since, .. }),\n+                &attr::Stable { since: stab_since },\n+            ) = (&stab.rustc_depr, &stab.level)\n+            {\n+                // Explicit version of iter::order::lt to handle parse errors properly\n+                for (dep_v, stab_v) in\n+                    dep_since.as_str().split('.').zip(stab_since.as_str().split('.'))\n                 {\n-                    // Explicit version of iter::order::lt to handle parse errors properly\n-                    for (dep_v, stab_v) in\n-                        dep_since.as_str().split('.').zip(stab_since.as_str().split('.'))\n-                    {\n-                        if let (Ok(dep_v), Ok(stab_v)) = (dep_v.parse::<u64>(), stab_v.parse()) {\n-                            match dep_v.cmp(&stab_v) {\n-                                Ordering::Less => {\n-                                    self.tcx.sess.span_err(\n-                                        item_sp,\n-                                        \"An API can't be stabilized \\\n-                                                                     after it is deprecated\",\n-                                    );\n-                                    break;\n-                                }\n-                                Ordering::Equal => continue,\n-                                Ordering::Greater => break,\n+                    if let (Ok(dep_v), Ok(stab_v)) = (dep_v.parse::<u64>(), stab_v.parse()) {\n+                        match dep_v.cmp(&stab_v) {\n+                            Ordering::Less => {\n+                                self.tcx.sess.span_err(\n+                                    item_sp,\n+                                    \"An API can't be stabilized \\\n+                                                                 after it is deprecated\",\n+                                );\n+                                break;\n                             }\n-                        } else {\n-                            // Act like it isn't less because the question is now nonsensical,\n-                            // and this makes us not do anything else interesting.\n-                            self.tcx.sess.span_err(\n-                                item_sp,\n-                                \"Invalid stability or deprecation \\\n-                                                             version found\",\n-                            );\n-                            break;\n+                            Ordering::Equal => continue,\n+                            Ordering::Greater => break,\n                         }\n+                    } else {\n+                        // Act like it isn't less because the question is now nonsensical,\n+                        // and this makes us not do anything else interesting.\n+                        self.tcx.sess.span_err(\n+                            item_sp,\n+                            \"Invalid stability or deprecation \\\n+                                                         version found\",\n+                        );\n+                        break;\n                     }\n                 }\n+            }\n \n-                self.index.stab_map.insert(hir_id, stab);\n+            self.index.stab_map.insert(hir_id, stab);\n \n-                let orig_parent_stab = replace(&mut self.parent_stab, Some(stab));\n-                visit_children(self);\n-                self.parent_stab = orig_parent_stab;\n-            } else {\n-                debug!(\"annotate: not found, parent = {:?}\", self.parent_stab);\n-                if let Some(stab) = self.parent_stab {\n-                    if stab.level.is_unstable() {\n-                        self.index.stab_map.insert(hir_id, stab);\n-                    }\n-                }\n-                visit_children(self);\n-            }\n+            let orig_parent_stab = replace(&mut self.parent_stab, Some(stab));\n+            visit_children(self);\n+            self.parent_stab = orig_parent_stab;\n         } else {\n-            // Emit errors for non-staged-api crates.\n-            let unstable_attrs = [\n-                sym::unstable,\n-                sym::stable,\n-                sym::rustc_deprecated,\n-                sym::rustc_const_unstable,\n-                sym::rustc_const_stable,\n-            ];\n-            for attr in attrs {\n-                let name = attr.name_or_empty();\n-                if unstable_attrs.contains(&name) {\n-                    attr::mark_used(attr);\n-                    struct_span_err!(\n-                        self.tcx.sess,\n-                        attr.span,\n-                        E0734,\n-                        \"stability attributes may not be used outside of the standard library\",\n-                    )\n-                    .emit();\n-                }\n-            }\n-\n-            // Propagate unstability.  This can happen even for non-staged-api crates in case\n-            // -Zforce-unstable-if-unmarked is set.\n+            debug!(\"annotate: not found, parent = {:?}\", self.parent_stab);\n             if let Some(stab) = self.parent_stab {\n                 if stab.level.is_unstable() {\n                     self.index.stab_map.insert(hir_id, stab);\n                 }\n             }\n+            visit_children(self);\n+        }\n+    }\n \n-            if let Some(depr) = attr::find_deprecation(&self.tcx.sess.parse_sess, attrs, item_sp) {\n-                if kind == AnnotationKind::Prohibited {\n-                    self.tcx.sess.span_err(item_sp, \"This deprecation annotation is useless\");\n-                }\n+    fn forbid_staged_api_attrs(\n+        &mut self,\n+        hir_id: HirId,\n+        attrs: &[Attribute],\n+        item_sp: Span,\n+        kind: AnnotationKind,\n+        visit_children: impl FnOnce(&mut Self),\n+    ) {\n+        // Emit errors for non-staged-api crates.\n+        let unstable_attrs = [\n+            sym::unstable,\n+            sym::stable,\n+            sym::rustc_deprecated,\n+            sym::rustc_const_unstable,\n+            sym::rustc_const_stable,\n+        ];\n+        for attr in attrs {\n+            let name = attr.name_or_empty();\n+            if unstable_attrs.contains(&name) {\n+                attr::mark_used(attr);\n+                struct_span_err!(\n+                    self.tcx.sess,\n+                    attr.span,\n+                    E0734,\n+                    \"stability attributes may not be used outside of the standard library\",\n+                )\n+                .emit();\n+            }\n+        }\n \n-                // `Deprecation` is just two pointers, no need to intern it\n-                let depr_entry = DeprecationEntry::local(depr, hir_id);\n-                self.index.depr_map.insert(hir_id, depr_entry.clone());\n-\n-                let orig_parent_depr = replace(&mut self.parent_depr, Some(depr_entry));\n-                visit_children(self);\n-                self.parent_depr = orig_parent_depr;\n-            } else if let Some(parent_depr) = self.parent_depr.clone() {\n-                self.index.depr_map.insert(hir_id, parent_depr);\n-                visit_children(self);\n-            } else {\n-                visit_children(self);\n+        // Propagate unstability.  This can happen even for non-staged-api crates in case\n+        // -Zforce-unstable-if-unmarked is set.\n+        if let Some(stab) = self.parent_stab {\n+            if stab.level.is_unstable() {\n+                self.index.stab_map.insert(hir_id, stab);\n             }\n         }\n+\n+        if let Some(depr) = attr::find_deprecation(&self.tcx.sess.parse_sess, attrs, item_sp) {\n+            if kind == AnnotationKind::Prohibited {\n+                self.tcx.sess.span_err(item_sp, \"This deprecation annotation is useless\");\n+            }\n+\n+            // `Deprecation` is just two pointers, no need to intern it\n+            let depr_entry = DeprecationEntry::local(depr, hir_id);\n+            self.index.depr_map.insert(hir_id, depr_entry.clone());\n+\n+            let orig_parent_depr = replace(&mut self.parent_depr, Some(depr_entry));\n+            visit_children(self);\n+            self.parent_depr = orig_parent_depr;\n+        } else if let Some(parent_depr) = self.parent_depr.clone() {\n+            self.index.depr_map.insert(hir_id, parent_depr);\n+            visit_children(self);\n+        } else {\n+            visit_children(self);\n+        }\n     }\n }\n "}]}