{"sha": "d9feaaa548ce380159a1de68f4f6e605db9a9fc5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5ZmVhYWE1NDhjZTM4MDE1OWExZGU2OGY0ZjZlNjA1ZGI5YTlmYzU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-31T12:41:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-31T12:41:55Z"}, "message": "Auto merge of #85704 - Aaron1011:const-panic-hard-err, r=RalfJung\n\nEmit a hard error when a panic occurs during const-eval\n\nPrevious, a panic during const evaluation would go through the\n`const_err` lint. This PR ensures that such a panic always causes\ncompilation to fail.", "tree": {"sha": "97d1668918b3856d1b5bb8c2d653072a332101d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/97d1668918b3856d1b5bb8c2d653072a332101d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9feaaa548ce380159a1de68f4f6e605db9a9fc5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9feaaa548ce380159a1de68f4f6e605db9a9fc5", "html_url": "https://github.com/rust-lang/rust/commit/d9feaaa548ce380159a1de68f4f6e605db9a9fc5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9feaaa548ce380159a1de68f4f6e605db9a9fc5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91ddf3e76a17e7c890de182ae20571fde62ee753", "url": "https://api.github.com/repos/rust-lang/rust/commits/91ddf3e76a17e7c890de182ae20571fde62ee753", "html_url": "https://github.com/rust-lang/rust/commit/91ddf3e76a17e7c890de182ae20571fde62ee753"}, {"sha": "2779fc1c4768567b74b757a8083db3c39765f071", "url": "https://api.github.com/repos/rust-lang/rust/commits/2779fc1c4768567b74b757a8083db3c39765f071", "html_url": "https://github.com/rust-lang/rust/commit/2779fc1c4768567b74b757a8083db3c39765f071"}], "stats": {"total": 300, "additions": 118, "deletions": 182}, "files": [{"sha": "65d9c1dd90efbdc76dfc8897414686d8c47366f2", "filename": "compiler/rustc_middle/src/mir/interpret/error.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d9feaaa548ce380159a1de68f4f6e605db9a9fc5/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9feaaa548ce380159a1de68f4f6e605db9a9fc5/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs?ref=d9feaaa548ce380159a1de68f4f6e605db9a9fc5", "patch": "@@ -435,8 +435,12 @@ impl<T: Any> AsAny for T {\n }\n \n /// A trait for machine-specific errors (or other \"machine stop\" conditions).\n-pub trait MachineStopType: AsAny + fmt::Display + Send {}\n-impl MachineStopType for String {}\n+pub trait MachineStopType: AsAny + fmt::Display + Send {\n+    /// If `true`, emit a hard error instead of going through the `CONST_ERR` lint\n+    fn is_hard_err(&self) -> bool {\n+        false\n+    }\n+}\n \n impl dyn MachineStopType {\n     #[inline(always)]"}, {"sha": "fc21047ab72ff3a02d040a757f4f82ed1a04907a", "filename": "compiler/rustc_mir/src/const_eval/error.rs", "status": "modified", "additions": 56, "deletions": 52, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/d9feaaa548ce380159a1de68f4f6e605db9a9fc5/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9feaaa548ce380159a1de68f4f6e605db9a9fc5/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Ferror.rs?ref=d9feaaa548ce380159a1de68f4f6e605db9a9fc5", "patch": "@@ -9,7 +9,7 @@ use rustc_span::{Span, Symbol};\n \n use super::InterpCx;\n use crate::interpret::{\n-    struct_error, ErrorHandled, FrameInfo, InterpError, InterpErrorInfo, Machine,\n+    struct_error, ErrorHandled, FrameInfo, InterpError, InterpErrorInfo, Machine, MachineStopType,\n };\n \n /// The CTFE machine has some custom error kinds.\n@@ -24,12 +24,21 @@ pub enum ConstEvalErrKind {\n     Abort(String),\n }\n \n+impl MachineStopType for ConstEvalErrKind {\n+    fn is_hard_err(&self) -> bool {\n+        match self {\n+            Self::Panic { .. } => true,\n+            _ => false,\n+        }\n+    }\n+}\n+\n // The errors become `MachineStop` with plain strings when being raised.\n // `ConstEvalErr` (in `librustc_middle/mir/interpret/error.rs`) knows to\n // handle these.\n impl<'tcx> Into<InterpErrorInfo<'tcx>> for ConstEvalErrKind {\n     fn into(self) -> InterpErrorInfo<'tcx> {\n-        err_machine_stop!(self.to_string()).into()\n+        err_machine_stop!(self).into()\n     }\n }\n \n@@ -148,31 +157,10 @@ impl<'tcx> ConstEvalErr<'tcx> {\n         tcx: TyCtxtAt<'tcx>,\n         message: &str,\n         emit: impl FnOnce(DiagnosticBuilder<'_>),\n-        lint_root: Option<hir::HirId>,\n+        mut lint_root: Option<hir::HirId>,\n     ) -> ErrorHandled {\n-        let must_error = match self.error {\n-            err_inval!(Layout(LayoutError::Unknown(_))) | err_inval!(TooGeneric) => {\n-                return ErrorHandled::TooGeneric;\n-            }\n-            err_inval!(AlreadyReported(error_reported)) => {\n-                return ErrorHandled::Reported(error_reported);\n-            }\n-            // We must *always* hard error on these, even if the caller wants just a lint.\n-            err_inval!(Layout(LayoutError::SizeOverflow(_))) => true,\n-            _ => false,\n-        };\n-        trace!(\"reporting const eval failure at {:?}\", self.span);\n-\n-        let err_msg = match &self.error {\n-            InterpError::MachineStop(msg) => {\n-                // A custom error (`ConstEvalErrKind` in `librustc_mir/interp/const_eval/error.rs`).\n-                // Should be turned into a string by now.\n-                msg.downcast_ref::<String>().expect(\"invalid MachineStop payload\").clone()\n-            }\n-            err => err.to_string(),\n-        };\n-\n         let finish = |mut err: DiagnosticBuilder<'_>, span_msg: Option<String>| {\n+            trace!(\"reporting const eval failure at {:?}\", self.span);\n             if let Some(span_msg) = span_msg {\n                 err.span_label(self.span, span_msg);\n             }\n@@ -186,34 +174,50 @@ impl<'tcx> ConstEvalErr<'tcx> {\n             emit(err)\n         };\n \n-        if must_error {\n-            // The `message` makes little sense here, this is a more serious error than the\n-            // caller thinks anyway.\n-            // See <https://github.com/rust-lang/rust/pull/63152>.\n-            finish(struct_error(tcx, &err_msg), None);\n-            ErrorHandled::Reported(ErrorReported)\n-        } else {\n-            // Regular case.\n-            if let Some(lint_root) = lint_root {\n-                // Report as lint.\n-                let hir_id = self\n-                    .stacktrace\n-                    .iter()\n-                    .rev()\n-                    .find_map(|frame| frame.lint_root)\n-                    .unwrap_or(lint_root);\n-                tcx.struct_span_lint_hir(\n-                    rustc_session::lint::builtin::CONST_ERR,\n-                    hir_id,\n-                    tcx.span,\n-                    |lint| finish(lint.build(message), Some(err_msg)),\n-                );\n-                ErrorHandled::Linted\n-            } else {\n-                // Report as hard error.\n-                finish(struct_error(tcx, message), Some(err_msg));\n-                ErrorHandled::Reported(ErrorReported)\n+        // Special handling for certain errors\n+        match &self.error {\n+            // Don't emit a new diagnostic for these errors\n+            err_inval!(Layout(LayoutError::Unknown(_))) | err_inval!(TooGeneric) => {\n+                return ErrorHandled::TooGeneric;\n+            }\n+            err_inval!(AlreadyReported(error_reported)) => {\n+                return ErrorHandled::Reported(*error_reported);\n+            }\n+            err_inval!(Layout(LayoutError::SizeOverflow(_))) => {\n+                // We must *always* hard error on these, even if the caller wants just a lint.\n+                // The `message` makes little sense here, this is a more serious error than the\n+                // caller thinks anyway.\n+                // See <https://github.com/rust-lang/rust/pull/63152>.\n+                finish(struct_error(tcx, &self.error.to_string()), None);\n+                return ErrorHandled::Reported(ErrorReported);\n             }\n+            _ => {}\n+        };\n+\n+        // If we have a 'hard error', then set `lint_root` to `None` so that we don't\n+        // emit a lint.\n+        if matches!(&self.error, InterpError::MachineStop(err) if err.is_hard_err()) {\n+            lint_root = None;\n+        }\n+\n+        let err_msg = self.error.to_string();\n+\n+        // Regular case - emit a lint.\n+        if let Some(lint_root) = lint_root {\n+            // Report as lint.\n+            let hir_id =\n+                self.stacktrace.iter().rev().find_map(|frame| frame.lint_root).unwrap_or(lint_root);\n+            tcx.struct_span_lint_hir(\n+                rustc_session::lint::builtin::CONST_ERR,\n+                hir_id,\n+                tcx.span,\n+                |lint| finish(lint.build(message), Some(err_msg)),\n+            );\n+            ErrorHandled::Linted\n+        } else {\n+            // Report as hard error.\n+            finish(struct_error(tcx, message), Some(err_msg));\n+            ErrorHandled::Reported(ErrorReported)\n         }\n     }\n }"}, {"sha": "b33b1475a2221722c814ae3d651e370e906f0728", "filename": "src/test/ui/consts/const-eval/const_panic.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d9feaaa548ce380159a1de68f4f6e605db9a9fc5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9feaaa548ce380159a1de68f4f6e605db9a9fc5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.rs?ref=d9feaaa548ce380159a1de68f4f6e605db9a9fc5", "patch": "@@ -6,40 +6,30 @@ const MSG: &str = \"hello\";\n \n const Z: () = std::panic!(\"cheese\");\n //~^ ERROR any use of this value will cause an error\n-//~| WARN this was previously accepted by the compiler but is being phased out\n \n const Z2: () = std::panic!();\n //~^ ERROR any use of this value will cause an error\n-//~| WARN this was previously accepted by the compiler but is being phased out\n \n const Y: () = std::unreachable!();\n //~^ ERROR any use of this value will cause an error\n-//~| WARN this was previously accepted by the compiler but is being phased out\n \n const X: () = std::unimplemented!();\n //~^ ERROR any use of this value will cause an error\n-//~| WARN this was previously accepted by the compiler but is being phased out\n //\n const W: () = std::panic!(MSG);\n //~^ ERROR any use of this value will cause an error\n-//~| WARN this was previously accepted by the compiler but is being phased out\n \n const Z_CORE: () = core::panic!(\"cheese\");\n //~^ ERROR any use of this value will cause an error\n-//~| WARN this was previously accepted by the compiler but is being phased out\n \n const Z2_CORE: () = core::panic!();\n //~^ ERROR any use of this value will cause an error\n-//~| WARN this was previously accepted by the compiler but is being phased out\n \n const Y_CORE: () = core::unreachable!();\n //~^ ERROR any use of this value will cause an error\n-//~| WARN this was previously accepted by the compiler but is being phased out\n \n const X_CORE: () = core::unimplemented!();\n //~^ ERROR any use of this value will cause an error\n-//~| WARN this was previously accepted by the compiler but is being phased out\n \n const W_CORE: () = core::panic!(MSG);\n //~^ ERROR any use of this value will cause an error\n-//~| WARN this was previously accepted by the compiler but is being phased out"}, {"sha": "3c890f78af741f193b1f5f5bfad7cd467daf3df2", "filename": "src/test/ui/consts/const-eval/const_panic.stderr", "status": "modified", "additions": 29, "deletions": 49, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/d9feaaa548ce380159a1de68f4f6e605db9a9fc5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d9feaaa548ce380159a1de68f4f6e605db9a9fc5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.stderr?ref=d9feaaa548ce380159a1de68f4f6e605db9a9fc5", "patch": "@@ -1,123 +1,103 @@\n-error: any use of this value will cause an error\n+error[E0080]: any use of this value will cause an error\n   --> $DIR/const_panic.rs:7:15\n    |\n LL | const Z: () = std::panic!(\"cheese\");\n    | --------------^^^^^^^^^^^^^^^^^^^^^-\n    |               |\n    |               the evaluated program panicked at 'cheese', $DIR/const_panic.rs:7:15\n    |\n-   = note: `#[deny(const_err)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: any use of this value will cause an error\n-  --> $DIR/const_panic.rs:11:16\n+error[E0080]: any use of this value will cause an error\n+  --> $DIR/const_panic.rs:10:16\n    |\n LL | const Z2: () = std::panic!();\n    | ---------------^^^^^^^^^^^^^-\n    |                |\n-   |                the evaluated program panicked at 'explicit panic', $DIR/const_panic.rs:11:16\n+   |                the evaluated program panicked at 'explicit panic', $DIR/const_panic.rs:10:16\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: any use of this value will cause an error\n-  --> $DIR/const_panic.rs:15:15\n+error[E0080]: any use of this value will cause an error\n+  --> $DIR/const_panic.rs:13:15\n    |\n LL | const Y: () = std::unreachable!();\n    | --------------^^^^^^^^^^^^^^^^^^^-\n    |               |\n-   |               the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic.rs:15:15\n+   |               the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic.rs:13:15\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: any use of this value will cause an error\n-  --> $DIR/const_panic.rs:19:15\n+error[E0080]: any use of this value will cause an error\n+  --> $DIR/const_panic.rs:16:15\n    |\n LL | const X: () = std::unimplemented!();\n    | --------------^^^^^^^^^^^^^^^^^^^^^-\n    |               |\n-   |               the evaluated program panicked at 'not implemented', $DIR/const_panic.rs:19:15\n+   |               the evaluated program panicked at 'not implemented', $DIR/const_panic.rs:16:15\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: any use of this value will cause an error\n-  --> $DIR/const_panic.rs:23:15\n+error[E0080]: any use of this value will cause an error\n+  --> $DIR/const_panic.rs:19:15\n    |\n LL | const W: () = std::panic!(MSG);\n    | --------------^^^^^^^^^^^^^^^^-\n    |               |\n-   |               the evaluated program panicked at 'hello', $DIR/const_panic.rs:23:15\n+   |               the evaluated program panicked at 'hello', $DIR/const_panic.rs:19:15\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: any use of this value will cause an error\n-  --> $DIR/const_panic.rs:27:20\n+error[E0080]: any use of this value will cause an error\n+  --> $DIR/const_panic.rs:22:20\n    |\n LL | const Z_CORE: () = core::panic!(\"cheese\");\n    | -------------------^^^^^^^^^^^^^^^^^^^^^^-\n    |                    |\n-   |                    the evaluated program panicked at 'cheese', $DIR/const_panic.rs:27:20\n+   |                    the evaluated program panicked at 'cheese', $DIR/const_panic.rs:22:20\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: any use of this value will cause an error\n-  --> $DIR/const_panic.rs:31:21\n+error[E0080]: any use of this value will cause an error\n+  --> $DIR/const_panic.rs:25:21\n    |\n LL | const Z2_CORE: () = core::panic!();\n    | --------------------^^^^^^^^^^^^^^-\n    |                     |\n-   |                     the evaluated program panicked at 'explicit panic', $DIR/const_panic.rs:31:21\n+   |                     the evaluated program panicked at 'explicit panic', $DIR/const_panic.rs:25:21\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: any use of this value will cause an error\n-  --> $DIR/const_panic.rs:35:20\n+error[E0080]: any use of this value will cause an error\n+  --> $DIR/const_panic.rs:28:20\n    |\n LL | const Y_CORE: () = core::unreachable!();\n    | -------------------^^^^^^^^^^^^^^^^^^^^-\n    |                    |\n-   |                    the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic.rs:35:20\n+   |                    the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic.rs:28:20\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: any use of this value will cause an error\n-  --> $DIR/const_panic.rs:39:20\n+error[E0080]: any use of this value will cause an error\n+  --> $DIR/const_panic.rs:31:20\n    |\n LL | const X_CORE: () = core::unimplemented!();\n    | -------------------^^^^^^^^^^^^^^^^^^^^^^-\n    |                    |\n-   |                    the evaluated program panicked at 'not implemented', $DIR/const_panic.rs:39:20\n+   |                    the evaluated program panicked at 'not implemented', $DIR/const_panic.rs:31:20\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: any use of this value will cause an error\n-  --> $DIR/const_panic.rs:43:20\n+error[E0080]: any use of this value will cause an error\n+  --> $DIR/const_panic.rs:34:20\n    |\n LL | const W_CORE: () = core::panic!(MSG);\n    | -------------------^^^^^^^^^^^^^^^^^-\n    |                    |\n-   |                    the evaluated program panicked at 'hello', $DIR/const_panic.rs:43:20\n+   |                    the evaluated program panicked at 'hello', $DIR/const_panic.rs:34:20\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 10 previous errors\n \n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "6b03e847def140dbf98864f75a05aaef99254ad9", "filename": "src/test/ui/consts/const-eval/const_panic_libcore_bin.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d9feaaa548ce380159a1de68f4f6e605db9a9fc5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_bin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9feaaa548ce380159a1de68f4f6e605db9a9fc5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_bin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_bin.rs?ref=d9feaaa548ce380159a1de68f4f6e605db9a9fc5", "patch": "@@ -8,15 +8,12 @@ use core::panic::PanicInfo;\n \n const Z: () = panic!(\"cheese\");\n //~^ ERROR any use of this value will cause an error\n-//~| WARN this was previously accepted by the compiler but is being phased out\n \n const Y: () = unreachable!();\n //~^ ERROR any use of this value will cause an error\n-//~| WARN this was previously accepted by the compiler but is being phased out\n \n const X: () = unimplemented!();\n //~^ ERROR any use of this value will cause an error\n-//~| WARN this was previously accepted by the compiler but is being phased out\n \n #[lang = \"eh_personality\"]\n fn eh() {}"}, {"sha": "2a3ad3ca18060c0768067c643d7acd2886548763", "filename": "src/test/ui/consts/const-eval/const_panic_libcore_bin.stderr", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d9feaaa548ce380159a1de68f4f6e605db9a9fc5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_bin.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d9feaaa548ce380159a1de68f4f6e605db9a9fc5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_bin.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_bin.stderr?ref=d9feaaa548ce380159a1de68f4f6e605db9a9fc5", "patch": "@@ -1,39 +1,33 @@\n-error: any use of this value will cause an error\n+error[E0080]: any use of this value will cause an error\n   --> $DIR/const_panic_libcore_bin.rs:9:15\n    |\n LL | const Z: () = panic!(\"cheese\");\n    | --------------^^^^^^^^^^^^^^^^-\n    |               |\n    |               the evaluated program panicked at 'cheese', $DIR/const_panic_libcore_bin.rs:9:15\n    |\n-   = note: `#[deny(const_err)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: any use of this value will cause an error\n-  --> $DIR/const_panic_libcore_bin.rs:13:15\n+error[E0080]: any use of this value will cause an error\n+  --> $DIR/const_panic_libcore_bin.rs:12:15\n    |\n LL | const Y: () = unreachable!();\n    | --------------^^^^^^^^^^^^^^-\n    |               |\n-   |               the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic_libcore_bin.rs:13:15\n+   |               the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic_libcore_bin.rs:12:15\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: any use of this value will cause an error\n-  --> $DIR/const_panic_libcore_bin.rs:17:15\n+error[E0080]: any use of this value will cause an error\n+  --> $DIR/const_panic_libcore_bin.rs:15:15\n    |\n LL | const X: () = unimplemented!();\n    | --------------^^^^^^^^^^^^^^^^-\n    |               |\n-   |               the evaluated program panicked at 'not implemented', $DIR/const_panic_libcore_bin.rs:17:15\n+   |               the evaluated program panicked at 'not implemented', $DIR/const_panic_libcore_bin.rs:15:15\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 3 previous errors\n \n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "dd18a98035bca05df11fdaa1390cd63a60451c59", "filename": "src/test/ui/consts/const-eval/panic-assoc-never-type.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d9feaaa548ce380159a1de68f4f6e605db9a9fc5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-assoc-never-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9feaaa548ce380159a1de68f4f6e605db9a9fc5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-assoc-never-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-assoc-never-type.rs?ref=d9feaaa548ce380159a1de68f4f6e605db9a9fc5", "patch": "@@ -9,8 +9,7 @@ struct PrintName;\n \n impl PrintName {\n     const VOID: ! = panic!();\n-    //~^ WARN any use of this value will cause an error\n-    //~| WARN this was previously accepted by the compiler but is being phased out\n+    //~^ ERROR any use of this value will cause an error\n }\n \n fn main() {"}, {"sha": "e186240f53ad2f9e2b358bf53f79e8acd58a0050", "filename": "src/test/ui/consts/const-eval/panic-assoc-never-type.stderr", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d9feaaa548ce380159a1de68f4f6e605db9a9fc5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-assoc-never-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d9feaaa548ce380159a1de68f4f6e605db9a9fc5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-assoc-never-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-assoc-never-type.stderr?ref=d9feaaa548ce380159a1de68f4f6e605db9a9fc5", "patch": "@@ -1,26 +1,19 @@\n-warning: any use of this value will cause an error\n+error[E0080]: any use of this value will cause an error\n   --> $DIR/panic-assoc-never-type.rs:11:21\n    |\n LL |     const VOID: ! = panic!();\n    |     ----------------^^^^^^^^-\n    |                     |\n    |                     the evaluated program panicked at 'explicit panic', $DIR/panic-assoc-never-type.rs:11:21\n    |\n-note: the lint level is defined here\n-  --> $DIR/panic-assoc-never-type.rs:4:9\n-   |\n-LL | #![warn(const_err)]\n-   |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: this warning originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: erroneous constant used\n-  --> $DIR/panic-assoc-never-type.rs:17:13\n+  --> $DIR/panic-assoc-never-type.rs:16:13\n    |\n LL |     let _ = PrintName::VOID;\n    |             ^^^^^^^^^^^^^^^ referenced constant has errors\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "71b489d828c081fd1c3c91285aa0be381d110d26", "filename": "src/test/ui/consts/const-eval/panic-never-type.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d9feaaa548ce380159a1de68f4f6e605db9a9fc5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-never-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9feaaa548ce380159a1de68f4f6e605db9a9fc5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-never-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-never-type.rs?ref=d9feaaa548ce380159a1de68f4f6e605db9a9fc5", "patch": "@@ -1,15 +1,11 @@\n-// build-fail\n-\n // Regression test for #66975\n #![warn(const_err)]\n #![feature(const_panic)]\n #![feature(never_type)]\n \n const VOID: ! = panic!();\n-//~^ WARN any use of this value will cause an error\n-//~| WARN this was previously accepted by the compiler but is being phased out\n+//~^ ERROR any use of this value will cause an error\n \n fn main() {\n     let _ = VOID;\n-    //~^ ERROR erroneous constant used\n }"}, {"sha": "2254c3dcfdfb0c80c9f7436887047b0f6216917e", "filename": "src/test/ui/consts/const-eval/panic-never-type.stderr", "status": "modified", "additions": 5, "deletions": 18, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d9feaaa548ce380159a1de68f4f6e605db9a9fc5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-never-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d9feaaa548ce380159a1de68f4f6e605db9a9fc5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-never-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-never-type.stderr?ref=d9feaaa548ce380159a1de68f4f6e605db9a9fc5", "patch": "@@ -1,26 +1,13 @@\n-warning: any use of this value will cause an error\n-  --> $DIR/panic-never-type.rs:8:17\n+error[E0080]: any use of this value will cause an error\n+  --> $DIR/panic-never-type.rs:6:17\n    |\n LL | const VOID: ! = panic!();\n    | ----------------^^^^^^^^-\n    |                 |\n-   |                 the evaluated program panicked at 'explicit panic', $DIR/panic-never-type.rs:8:17\n+   |                 the evaluated program panicked at 'explicit panic', $DIR/panic-never-type.rs:6:17\n    |\n-note: the lint level is defined here\n-  --> $DIR/panic-never-type.rs:4:9\n-   |\n-LL | #![warn(const_err)]\n-   |         ^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: this warning originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error[E0080]: erroneous constant used\n-  --> $DIR/panic-never-type.rs:13:13\n-   |\n-LL |     let _ = VOID;\n-   |             ^^^^ referenced constant has errors\n+   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "9bc63d9328c69342d1f720732c2ef83f5a0bb3c8", "filename": "src/test/ui/consts/const-eval/unwind-abort.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d9feaaa548ce380159a1de68f4f6e605db9a9fc5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funwind-abort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9feaaa548ce380159a1de68f4f6e605db9a9fc5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funwind-abort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funwind-abort.rs?ref=d9feaaa548ce380159a1de68f4f6e605db9a9fc5", "patch": "@@ -2,8 +2,7 @@\n \n #[unwind(aborts)]\n const fn foo() {\n-    panic!() //~ ERROR any use of this value will cause an error [const_err]\n-    //~| WARN this was previously accepted by the compiler but is being phased out\n+    panic!() //~ ERROR any use of this value will cause an error\n }\n \n const _: () = foo();"}, {"sha": "b41d786169b9e8cd6225d78ad6f88fbe2e7209af", "filename": "src/test/ui/consts/const-eval/unwind-abort.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d9feaaa548ce380159a1de68f4f6e605db9a9fc5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funwind-abort.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d9feaaa548ce380159a1de68f4f6e605db9a9fc5/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funwind-abort.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funwind-abort.stderr?ref=d9feaaa548ce380159a1de68f4f6e605db9a9fc5", "patch": "@@ -1,20 +1,18 @@\n-error: any use of this value will cause an error\n+error[E0080]: any use of this value will cause an error\n   --> $DIR/unwind-abort.rs:5:5\n    |\n LL |     panic!()\n    |     ^^^^^^^^\n    |     |\n    |     the evaluated program panicked at 'explicit panic', $DIR/unwind-abort.rs:5:5\n    |     inside `foo` at $SRC_DIR/std/src/panic.rs:LL:COL\n-   |     inside `_` at $DIR/unwind-abort.rs:9:15\n+   |     inside `_` at $DIR/unwind-abort.rs:8:15\n ...\n LL | const _: () = foo();\n    | --------------------\n    |\n-   = note: `#[deny(const_err)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "95f4711cb65b036770db39844eec5025e6f163e5", "filename": "src/test/ui/consts/const-unwrap.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d9feaaa548ce380159a1de68f4f6e605db9a9fc5/src%2Ftest%2Fui%2Fconsts%2Fconst-unwrap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d9feaaa548ce380159a1de68f4f6e605db9a9fc5/src%2Ftest%2Fui%2Fconsts%2Fconst-unwrap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-unwrap.stderr?ref=d9feaaa548ce380159a1de68f4f6e605db9a9fc5", "patch": "@@ -1,4 +1,4 @@\n-error: any use of this value will cause an error\n+error[E0080]: any use of this value will cause an error\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n    |\n LL |             None => panic!(\"called `Option::unwrap()` on a `None` value\"),\n@@ -13,10 +13,8 @@ LL |             None => panic!(\"called `Option::unwrap()` on a `None` value\"),\n LL | const BAR: i32 = Option::<i32>::None.unwrap();\n    | ----------------------------------------------\n    |\n-   = note: `#[deny(const_err)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "8e1a2b5eb461096e2db6de30112b9c61f10d6b9f", "filename": "src/test/ui/consts/control-flow/assert.const_panic.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d9feaaa548ce380159a1de68f4f6e605db9a9fc5/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.const_panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d9feaaa548ce380159a1de68f4f6e605db9a9fc5/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.const_panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.const_panic.stderr?ref=d9feaaa548ce380159a1de68f4f6e605db9a9fc5", "patch": "@@ -1,15 +1,13 @@\n-error: any use of this value will cause an error\n+error[E0080]: any use of this value will cause an error\n   --> $DIR/assert.rs:10:15\n    |\n LL | const _: () = assert!(false);\n    | --------------^^^^^^^^^^^^^^-\n    |               |\n    |               the evaluated program panicked at 'assertion failed: false', $DIR/assert.rs:10:15\n    |\n-   = note: `#[deny(const_err)]` on by default\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n    = note: this error originates in the macro `assert` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "90017fee1933738022a13a7cc6b0167f21af6f97", "filename": "src/test/ui/consts/control-flow/assert.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d9feaaa548ce380159a1de68f4f6e605db9a9fc5/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9feaaa548ce380159a1de68f4f6e605db9a9fc5/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fassert.rs?ref=d9feaaa548ce380159a1de68f4f6e605db9a9fc5", "patch": "@@ -10,6 +10,5 @@ const _: () = assert!(true);\n const _: () = assert!(false);\n //[stock]~^ ERROR panicking in constants is unstable\n //[const_panic]~^^ ERROR any use of this value will cause an error\n-//[const_panic]~| WARN this was previously accepted by the compiler but is being phased out\n \n fn main() {}"}]}