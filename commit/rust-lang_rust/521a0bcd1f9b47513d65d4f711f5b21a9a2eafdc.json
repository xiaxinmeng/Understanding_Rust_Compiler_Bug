{"sha": "521a0bcd1f9b47513d65d4f711f5b21a9a2eafdc", "node_id": "C_kwDOAAsO6NoAKDUyMWEwYmNkMWY5YjQ3NTEzZDY1ZDRmNzExZjViMjFhOWEyZWFmZGM", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-05-18T20:42:46Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-05-24T16:06:32Z"}, "message": "Use ObligationCtxt in custom type ops", "tree": {"sha": "7601b37a18a4056a9a060ad7e5dbbf33fac8de29", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7601b37a18a4056a9a060ad7e5dbbf33fac8de29"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/521a0bcd1f9b47513d65d4f711f5b21a9a2eafdc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/521a0bcd1f9b47513d65d4f711f5b21a9a2eafdc", "html_url": "https://github.com/rust-lang/rust/commit/521a0bcd1f9b47513d65d4f711f5b21a9a2eafdc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/521a0bcd1f9b47513d65d4f711f5b21a9a2eafdc/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70db8369226c4d2386b25d66a49c8989247934bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/70db8369226c4d2386b25d66a49c8989247934bf", "html_url": "https://github.com/rust-lang/rust/commit/70db8369226c4d2386b25d66a49c8989247934bf"}], "stats": {"total": 126, "additions": 66, "deletions": 60}, "files": [{"sha": "f41795d60a0b4d219c2454888a6e6d7b488f66ee", "filename": "compiler/rustc_borrowck/src/diagnostics/bound_region_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/521a0bcd1f9b47513d65d4f711f5b21a9a2eafdc/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fbound_region_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/521a0bcd1f9b47513d65d4f711f5b21a9a2eafdc/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fbound_region_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fbound_region_errors.rs?ref=521a0bcd1f9b47513d65d4f711f5b21a9a2eafdc", "patch": "@@ -128,7 +128,7 @@ impl<'tcx> ToUniverseInfo<'tcx>\n     }\n }\n \n-impl<'tcx, F, G> ToUniverseInfo<'tcx> for Canonical<'tcx, type_op::custom::CustomTypeOp<F, G>> {\n+impl<'tcx, F> ToUniverseInfo<'tcx> for Canonical<'tcx, type_op::custom::CustomTypeOp<F>> {\n     fn to_universe_info(self, _base_universe: ty::UniverseIndex) -> UniverseInfo<'tcx> {\n         // We can't rerun custom type ops.\n         UniverseInfo::other()"}, {"sha": "95dcc8d4b1916f1b24fc64ecbe1778ae52ba57c6", "filename": "compiler/rustc_borrowck/src/type_check/canonical.rs", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/521a0bcd1f9b47513d65d4f711f5b21a9a2eafdc/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/521a0bcd1f9b47513d65d4f711f5b21a9a2eafdc/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fcanonical.rs?ref=521a0bcd1f9b47513d65d4f711f5b21a9a2eafdc", "patch": "@@ -1,13 +1,13 @@\n use std::fmt;\n \n-use rustc_infer::infer::{canonical::Canonical, InferOk};\n+use rustc_infer::infer::canonical::Canonical;\n use rustc_middle::mir::ConstraintCategory;\n use rustc_middle::ty::{self, ToPredicate, Ty, TyCtxt, TypeFoldable};\n use rustc_span::def_id::DefId;\n use rustc_span::Span;\n use rustc_trait_selection::traits::query::type_op::{self, TypeOpOutput};\n use rustc_trait_selection::traits::query::{Fallible, NoSolution};\n-use rustc_trait_selection::traits::{ObligationCause, ObligationCtxt};\n+use rustc_trait_selection::traits::ObligationCause;\n \n use crate::diagnostics::{ToUniverseInfo, UniverseInfo};\n \n@@ -219,20 +219,17 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n \n         let cause = ObligationCause::dummy_with_span(span);\n         let param_env = self.param_env;\n-        let op = |infcx: &'_ _| {\n-            let ocx = ObligationCtxt::new_in_snapshot(infcx);\n-            let user_ty = ocx.normalize(&cause, param_env, user_ty);\n-            ocx.eq(&cause, param_env, user_ty, mir_ty)?;\n-            if !ocx.select_all_or_error().is_empty() {\n-                return Err(NoSolution);\n-            }\n-            Ok(InferOk { value: (), obligations: vec![] })\n-        };\n-\n         self.fully_perform_op(\n             Locations::All(span),\n             ConstraintCategory::Boring,\n-            type_op::custom::CustomTypeOp::new(op, || \"ascribe_user_type_skip_wf\".to_string()),\n+            type_op::custom::CustomTypeOp::new(\n+                |ocx| {\n+                    let user_ty = ocx.normalize(&cause, param_env, user_ty);\n+                    ocx.eq(&cause, param_env, user_ty, mir_ty)?;\n+                    Ok(())\n+                },\n+                \"ascribe_user_type_skip_wf\",\n+            ),\n         )\n         .unwrap_or_else(|err| {\n             span_mirbug!("}, {"sha": "ab5e01e1952d58b049b16b3a59a4bb2be5884008", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/521a0bcd1f9b47513d65d4f711f5b21a9a2eafdc/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/521a0bcd1f9b47513d65d4f711f5b21a9a2eafdc/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=521a0bcd1f9b47513d65d4f711f5b21a9a2eafdc", "patch": "@@ -20,7 +20,7 @@ use rustc_infer::infer::outlives::env::RegionBoundPairs;\n use rustc_infer::infer::region_constraints::RegionConstraintData;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_infer::infer::{\n-    InferCtxt, InferOk, LateBoundRegion, LateBoundRegionConversionTime, NllRegionVariableOrigin,\n+    InferCtxt, LateBoundRegion, LateBoundRegionConversionTime, NllRegionVariableOrigin,\n };\n use rustc_middle::mir::tcx::PlaceTy;\n use rustc_middle::mir::visit::{NonMutatingUseContext, PlaceContext, Visitor};\n@@ -218,16 +218,16 @@ pub(crate) fn type_check<'mir, 'tcx>(\n                     Locations::All(body.span),\n                     ConstraintCategory::OpaqueType,\n                     CustomTypeOp::new(\n-                        |infcx| {\n-                            infcx.register_member_constraints(\n+                        |ocx| {\n+                            ocx.infcx.register_member_constraints(\n                                 param_env,\n                                 opaque_type_key,\n                                 decl.hidden_type.ty,\n                                 decl.hidden_type.span,\n                             );\n-                            Ok(InferOk { value: (), obligations: vec![] })\n+                            Ok(())\n                         },\n-                        || \"opaque_type_map\".to_string(),\n+                        \"opaque_type_map\",\n                     ),\n                 )\n                 .unwrap();\n@@ -2713,8 +2713,9 @@ impl<'tcx> TypeOp<'tcx> for InstantiateOpaqueType<'tcx> {\n     type ErrorInfo = InstantiateOpaqueType<'tcx>;\n \n     fn fully_perform(mut self, infcx: &InferCtxt<'tcx>) -> Fallible<TypeOpOutput<'tcx, Self>> {\n-        let (mut output, region_constraints) = scrape_region_constraints(infcx, || {\n-            Ok(InferOk { value: (), obligations: self.obligations.clone() })\n+        let (mut output, region_constraints) = scrape_region_constraints(infcx, |ocx| {\n+            ocx.register_obligations(self.obligations.clone());\n+            Ok(())\n         })?;\n         self.region_constraints = Some(region_constraints);\n         output.error_info = Some(self);"}, {"sha": "dd1f89e5b9157f15c7380682c3f9b0eec15e9a79", "filename": "compiler/rustc_borrowck/src/type_check/relate_tys.rs", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/521a0bcd1f9b47513d65d4f711f5b21a9a2eafdc/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/521a0bcd1f9b47513d65d4f711f5b21a9a2eafdc/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs?ref=521a0bcd1f9b47513d65d4f711f5b21a9a2eafdc", "patch": "@@ -185,17 +185,25 @@ impl<'tcx> TypeRelatingDelegate<'tcx> for NllTypeRelatingDelegate<'_, '_, 'tcx>\n     }\n \n     fn register_obligations(&mut self, obligations: PredicateObligations<'tcx>) {\n-        self.type_checker\n-            .fully_perform_op(\n-                self.locations,\n-                self.category,\n-                InstantiateOpaqueType {\n-                    obligations,\n-                    // These fields are filled in during execution of the operation\n-                    base_universe: None,\n-                    region_constraints: None,\n-                },\n-            )\n-            .unwrap();\n+        match self.type_checker.fully_perform_op(\n+            self.locations,\n+            self.category,\n+            InstantiateOpaqueType {\n+                obligations,\n+                // These fields are filled in during execution of the operation\n+                base_universe: None,\n+                region_constraints: None,\n+            },\n+        ) {\n+            Ok(()) => {}\n+            Err(_) => {\n+                // It's a bit redundant to delay a bug here, but I'd rather\n+                // delay more bugs than accidentally not delay a bug at all.\n+                self.type_checker.tcx().sess.delay_span_bug(\n+                    self.locations.span(self.type_checker.body),\n+                    \"errors selecting obligation during MIR typeck\",\n+                );\n+            }\n+        };\n     }\n }"}, {"sha": "3d6c1d9e2b02e8503b5d44ab8c291d3e79235a61", "filename": "compiler/rustc_trait_selection/src/traits/query/type_op/custom.rs", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/521a0bcd1f9b47513d65d4f711f5b21a9a2eafdc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fcustom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/521a0bcd1f9b47513d65d4f711f5b21a9a2eafdc/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fcustom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fcustom.rs?ref=521a0bcd1f9b47513d65d4f711f5b21a9a2eafdc", "patch": "@@ -1,32 +1,31 @@\n use crate::infer::canonical::query_response;\n-use crate::infer::{InferCtxt, InferOk};\n+use crate::infer::InferCtxt;\n use crate::traits::query::type_op::TypeOpOutput;\n use crate::traits::query::Fallible;\n use crate::traits::ObligationCtxt;\n use rustc_infer::infer::region_constraints::RegionConstraintData;\n+use rustc_middle::traits::query::NoSolution;\n use rustc_span::source_map::DUMMY_SP;\n \n use std::fmt;\n \n-pub struct CustomTypeOp<F, G> {\n+pub struct CustomTypeOp<F> {\n     closure: F,\n-    description: G,\n+    description: &'static str,\n }\n \n-impl<F, G> CustomTypeOp<F, G> {\n-    pub fn new<'tcx, R>(closure: F, description: G) -> Self\n+impl<F> CustomTypeOp<F> {\n+    pub fn new<'tcx, R>(closure: F, description: &'static str) -> Self\n     where\n-        F: FnOnce(&InferCtxt<'tcx>) -> Fallible<InferOk<'tcx, R>>,\n-        G: Fn() -> String,\n+        F: FnOnce(&ObligationCtxt<'_, 'tcx>) -> Fallible<R>,\n     {\n         CustomTypeOp { closure, description }\n     }\n }\n \n-impl<'tcx, F, R: fmt::Debug, G> super::TypeOp<'tcx> for CustomTypeOp<F, G>\n+impl<'tcx, F, R: fmt::Debug> super::TypeOp<'tcx> for CustomTypeOp<F>\n where\n-    F: for<'a, 'cx> FnOnce(&'a InferCtxt<'tcx>) -> Fallible<InferOk<'tcx, R>>,\n-    G: Fn() -> String,\n+    F: FnOnce(&ObligationCtxt<'_, 'tcx>) -> Fallible<R>,\n {\n     type Output = R;\n     /// We can't do any custom error reporting for `CustomTypeOp`, so\n@@ -41,24 +40,21 @@ where\n             info!(\"fully_perform({:?})\", self);\n         }\n \n-        Ok(scrape_region_constraints(infcx, || (self.closure)(infcx))?.0)\n+        Ok(scrape_region_constraints(infcx, self.closure)?.0)\n     }\n }\n \n-impl<F, G> fmt::Debug for CustomTypeOp<F, G>\n-where\n-    G: Fn() -> String,\n-{\n+impl<F> fmt::Debug for CustomTypeOp<F> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        write!(f, \"{}\", (self.description)())\n+        self.description.fmt(f)\n     }\n }\n \n /// Executes `op` and then scrapes out all the \"old style\" region\n /// constraints that result, creating query-region-constraints.\n pub fn scrape_region_constraints<'tcx, Op: super::TypeOp<'tcx, Output = R>, R>(\n     infcx: &InferCtxt<'tcx>,\n-    op: impl FnOnce() -> Fallible<InferOk<'tcx, R>>,\n+    op: impl FnOnce(&ObligationCtxt<'_, 'tcx>) -> Fallible<R>,\n ) -> Fallible<(TypeOpOutput<'tcx, Op>, RegionConstraintData<'tcx>)> {\n     // During NLL, we expect that nobody will register region\n     // obligations **except** as part of a custom type op (and, at the\n@@ -72,16 +68,20 @@ pub fn scrape_region_constraints<'tcx, Op: super::TypeOp<'tcx, Output = R>, R>(\n         pre_obligations,\n     );\n \n-    let InferOk { value, obligations } = infcx.commit_if_ok(|_| op())?;\n-    let ocx = ObligationCtxt::new(infcx);\n-    ocx.register_obligations(obligations);\n-    let errors = ocx.select_all_or_error();\n-    if !errors.is_empty() {\n-        infcx.tcx.sess.diagnostic().delay_span_bug(\n-            DUMMY_SP,\n-            format!(\"errors selecting obligation during MIR typeck: {:?}\", errors),\n-        );\n-    }\n+    let value = infcx.commit_if_ok(|_| {\n+        let ocx = ObligationCtxt::new_in_snapshot(infcx);\n+        let value = op(&ocx)?;\n+        let errors = ocx.select_all_or_error();\n+        if errors.is_empty() {\n+            Ok(value)\n+        } else {\n+            infcx.tcx.sess.delay_span_bug(\n+                DUMMY_SP,\n+                format!(\"errors selecting obligation during MIR typeck: {:?}\", errors),\n+            );\n+            Err(NoSolution)\n+        }\n+    })?;\n \n     let region_obligations = infcx.take_registered_region_obligations();\n     let region_constraint_data = infcx.take_and_reset_region_constraints();"}]}