{"sha": "e761f3af904b3c275bdebc73bb29ffc45384945d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3NjFmM2FmOTA0YjNjMjc1YmRlYmM3M2JiMjlmZmM0NTM4NDk0NWQ=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-02-18T05:12:24Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-02-18T05:46:50Z"}, "message": "Inline various simple `emit_*` and `read_*` methods in `Decoder`.\n\nMostly, these are the ones whose body just contains `f(self)`.", "tree": {"sha": "054129c9828f9f3e7ab1a79c483da300741f896f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/054129c9828f9f3e7ab1a79c483da300741f896f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e761f3af904b3c275bdebc73bb29ffc45384945d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e761f3af904b3c275bdebc73bb29ffc45384945d", "html_url": "https://github.com/rust-lang/rust/commit/e761f3af904b3c275bdebc73bb29ffc45384945d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e761f3af904b3c275bdebc73bb29ffc45384945d/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c02d689a626d44e82f3769d8be1a842f2d211005", "url": "https://api.github.com/repos/rust-lang/rust/commits/c02d689a626d44e82f3769d8be1a842f2d211005", "html_url": "https://github.com/rust-lang/rust/commit/c02d689a626d44e82f3769d8be1a842f2d211005"}], "stats": {"total": 19, "additions": 19, "deletions": 0}, "files": [{"sha": "8c6548cd3c5b205e2ae56ad1b8410f16277a8314", "filename": "src/libserialize/serialize.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e761f3af904b3c275bdebc73bb29ffc45384945d/src%2Flibserialize%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e761f3af904b3c275bdebc73bb29ffc45384945d/src%2Flibserialize%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fserialize.rs?ref=e761f3af904b3c275bdebc73bb29ffc45384945d", "patch": "@@ -36,6 +36,7 @@ pub trait Encoder {\n     fn emit_str(&mut self, v: &str) -> Result<(), Self::Error>;\n \n     // Compound types:\n+    #[inline]\n     fn emit_enum<F>(&mut self, _name: &str, f: F) -> Result<(), Self::Error>\n     where\n         F: FnOnce(&mut Self) -> Result<(), Self::Error>,\n@@ -57,6 +58,7 @@ pub trait Encoder {\n         f(self)\n     }\n \n+    #[inline]\n     fn emit_enum_variant_arg<F>(&mut self, _a_idx: usize, f: F) -> Result<(), Self::Error>\n     where\n         F: FnOnce(&mut Self) -> Result<(), Self::Error>,\n@@ -89,13 +91,15 @@ pub trait Encoder {\n         self.emit_enum_variant_arg(f_idx, f)\n     }\n \n+    #[inline]\n     fn emit_struct<F>(&mut self, _name: &str, _len: usize, f: F) -> Result<(), Self::Error>\n     where\n         F: FnOnce(&mut Self) -> Result<(), Self::Error>,\n     {\n         f(self)\n     }\n \n+    #[inline]\n     fn emit_struct_field<F>(\n         &mut self,\n         _f_name: &str,\n@@ -108,13 +112,15 @@ pub trait Encoder {\n         f(self)\n     }\n \n+    #[inline]\n     fn emit_tuple<F>(&mut self, _len: usize, f: F) -> Result<(), Self::Error>\n     where\n         F: FnOnce(&mut Self) -> Result<(), Self::Error>,\n     {\n         f(self)\n     }\n \n+    #[inline]\n     fn emit_tuple_arg<F>(&mut self, _idx: usize, f: F) -> Result<(), Self::Error>\n     where\n         F: FnOnce(&mut Self) -> Result<(), Self::Error>,\n@@ -164,6 +170,7 @@ pub trait Encoder {\n         f(self)\n     }\n \n+    #[inline]\n     fn emit_seq_elt<F>(&mut self, _idx: usize, f: F) -> Result<(), Self::Error>\n     where\n         F: FnOnce(&mut Self) -> Result<(), Self::Error>,\n@@ -179,13 +186,15 @@ pub trait Encoder {\n         f(self)\n     }\n \n+    #[inline]\n     fn emit_map_elt_key<F>(&mut self, _idx: usize, f: F) -> Result<(), Self::Error>\n     where\n         F: FnOnce(&mut Self) -> Result<(), Self::Error>,\n     {\n         f(self)\n     }\n \n+    #[inline]\n     fn emit_map_elt_val<F>(&mut self, _idx: usize, f: F) -> Result<(), Self::Error>\n     where\n         F: FnOnce(&mut Self) -> Result<(), Self::Error>,\n@@ -218,13 +227,15 @@ pub trait Decoder {\n     fn read_str(&mut self) -> Result<Cow<'_, str>, Self::Error>;\n \n     // Compound types:\n+    #[inline]\n     fn read_enum<T, F>(&mut self, _name: &str, f: F) -> Result<T, Self::Error>\n     where\n         F: FnOnce(&mut Self) -> Result<T, Self::Error>,\n     {\n         f(self)\n     }\n \n+    #[inline]\n     fn read_enum_variant<T, F>(&mut self, _names: &[&str], mut f: F) -> Result<T, Self::Error>\n     where\n         F: FnMut(&mut Self, usize) -> Result<T, Self::Error>,\n@@ -233,6 +244,7 @@ pub trait Decoder {\n         f(self, disr)\n     }\n \n+    #[inline]\n     fn read_enum_variant_arg<T, F>(&mut self, _a_idx: usize, f: F) -> Result<T, Self::Error>\n     where\n         F: FnOnce(&mut Self) -> Result<T, Self::Error>,\n@@ -259,13 +271,15 @@ pub trait Decoder {\n         self.read_enum_variant_arg(f_idx, f)\n     }\n \n+    #[inline]\n     fn read_struct<T, F>(&mut self, _s_name: &str, _len: usize, f: F) -> Result<T, Self::Error>\n     where\n         F: FnOnce(&mut Self) -> Result<T, Self::Error>,\n     {\n         f(self)\n     }\n \n+    #[inline]\n     fn read_struct_field<T, F>(\n         &mut self,\n         _f_name: &str,\n@@ -278,13 +292,15 @@ pub trait Decoder {\n         f(self)\n     }\n \n+    #[inline]\n     fn read_tuple<T, F>(&mut self, _len: usize, f: F) -> Result<T, Self::Error>\n     where\n         F: FnOnce(&mut Self) -> Result<T, Self::Error>,\n     {\n         f(self)\n     }\n \n+    #[inline]\n     fn read_tuple_arg<T, F>(&mut self, _a_idx: usize, f: F) -> Result<T, Self::Error>\n     where\n         F: FnOnce(&mut Self) -> Result<T, Self::Error>,\n@@ -328,6 +344,7 @@ pub trait Decoder {\n         f(self, len)\n     }\n \n+    #[inline]\n     fn read_seq_elt<T, F>(&mut self, _idx: usize, f: F) -> Result<T, Self::Error>\n     where\n         F: FnOnce(&mut Self) -> Result<T, Self::Error>,\n@@ -343,13 +360,15 @@ pub trait Decoder {\n         f(self, len)\n     }\n \n+    #[inline]\n     fn read_map_elt_key<T, F>(&mut self, _idx: usize, f: F) -> Result<T, Self::Error>\n     where\n         F: FnOnce(&mut Self) -> Result<T, Self::Error>,\n     {\n         f(self)\n     }\n \n+    #[inline]\n     fn read_map_elt_val<T, F>(&mut self, _idx: usize, f: F) -> Result<T, Self::Error>\n     where\n         F: FnOnce(&mut Self) -> Result<T, Self::Error>,"}]}