{"sha": "b726b41daf9abd351f6b58984f76965a61947818", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3MjZiNDFkYWY5YWJkMzUxZjZiNTg5ODRmNzY5NjVhNjE5NDc4MTg=", "commit": {"author": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2019-06-08T11:32:43Z"}, "committer": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2019-06-08T11:35:04Z"}, "message": "Add OUTER_EXPN_INFO lint", "tree": {"sha": "fbd1af05fd0abdd62cf7394c14c0c9f0daa5c90c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fbd1af05fd0abdd62cf7394c14c0c9f0daa5c90c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b726b41daf9abd351f6b58984f76965a61947818", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b726b41daf9abd351f6b58984f76965a61947818", "html_url": "https://github.com/rust-lang/rust/commit/b726b41daf9abd351f6b58984f76965a61947818", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b726b41daf9abd351f6b58984f76965a61947818/comments", "author": null, "committer": null, "parents": [{"sha": "71be6f62fa920c0bd10cdf3a29aeb8c6719a8075", "url": "https://api.github.com/repos/rust-lang/rust/commits/71be6f62fa920c0bd10cdf3a29aeb8c6719a8075", "html_url": "https://github.com/rust-lang/rust/commit/71be6f62fa920c0bd10cdf3a29aeb8c6719a8075"}], "stats": {"total": 100, "additions": 99, "deletions": 1}, "files": [{"sha": "eaf8f9b5710866ce80d5a59ad91acf9bd9061b69", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b726b41daf9abd351f6b58984f76965a61947818/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b726b41daf9abd351f6b58984f76965a61947818/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=b726b41daf9abd351f6b58984f76965a61947818", "patch": "@@ -429,6 +429,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n     reg.register_early_lint_pass(box utils::internal_lints::ClippyLintsInternal);\n     reg.register_late_lint_pass(box utils::internal_lints::CompilerLintFunctions::new());\n     reg.register_late_lint_pass(box utils::internal_lints::LintWithoutLintPass::default());\n+    reg.register_late_lint_pass(box utils::internal_lints::OuterExpnInfoPass);\n     reg.register_late_lint_pass(box utils::inspector::DeepCodeInspector);\n     reg.register_late_lint_pass(box utils::author::Author);\n     reg.register_late_lint_pass(box types::Types);\n@@ -659,6 +660,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         utils::internal_lints::CLIPPY_LINTS_INTERNAL,\n         utils::internal_lints::COMPILER_LINT_FUNCTIONS,\n         utils::internal_lints::LINT_WITHOUT_LINT_PASS,\n+        utils::internal_lints::OUTER_EXPN_INFO,\n     ]);\n \n     reg.register_lint_group(\"clippy::all\", Some(\"clippy\"), vec!["}, {"sha": "44cdba8ce344ebfc0bf2d3829a2e15778c161842", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 58, "deletions": 1, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/b726b41daf9abd351f6b58984f76965a61947818/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b726b41daf9abd351f6b58984f76965a61947818/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=b726b41daf9abd351f6b58984f76965a61947818", "patch": "@@ -1,4 +1,6 @@\n-use crate::utils::{match_def_path, match_type, paths, span_help_and_lint, span_lint, walk_ptrs_ty};\n+use crate::utils::{\n+    match_def_path, match_type, method_calls, paths, span_help_and_lint, span_lint, span_lint_and_sugg, walk_ptrs_ty,\n+};\n use if_chain::if_chain;\n use rustc::hir;\n use rustc::hir::def::{DefKind, Res};\n@@ -7,6 +9,7 @@ use rustc::hir::*;\n use rustc::lint::{EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintArray, LintPass};\n use rustc::{declare_lint_pass, declare_tool_lint, impl_lint_pass};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_errors::Applicability;\n use syntax::ast::{Crate as AstCrate, ItemKind, Name};\n use syntax::source_map::Span;\n use syntax_pos::symbol::LocalInternedString;\n@@ -72,6 +75,29 @@ declare_clippy_lint! {\n     \"usage of the lint functions of the compiler instead of the utils::* variant\"\n }\n \n+declare_clippy_lint! {\n+    /// **What it does:** Checks for calls to `cx.outer().expn_info()` and suggests to use\n+    /// the `cx.outer_expn_info()`\n+    ///\n+    /// **Why is this bad?** `cx.outer_expn_info()` is faster and more concise.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    /// Bad:\n+    /// ```rust\n+    /// expr.span.ctxt().outer().expn_info()\n+    /// ```\n+    ///\n+    /// Good:\n+    /// ```rust\n+    /// expr.span.ctxt().outer_expn_info()\n+    /// ```\n+    pub OUTER_EXPN_INFO,\n+    internal,\n+    \"using `cx.outer().expn_info()` instead of `cx.outer_expn_info()`\"\n+}\n+\n declare_lint_pass!(ClippyLintsInternal => [CLIPPY_LINTS_INTERNAL]);\n \n impl EarlyLintPass for ClippyLintsInternal {\n@@ -251,3 +277,34 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CompilerLintFunctions {\n         }\n     }\n }\n+\n+pub struct OuterExpnInfoPass;\n+\n+impl_lint_pass!(OuterExpnInfoPass => [OUTER_EXPN_INFO]);\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for OuterExpnInfoPass {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx hir::Expr) {\n+        let (method_names, arg_lists) = method_calls(expr, 2);\n+        let method_names: Vec<LocalInternedString> = method_names.iter().map(|s| s.as_str()).collect();\n+        let method_names: Vec<&str> = method_names.iter().map(std::convert::AsRef::as_ref).collect();\n+        if_chain! {\n+            if let [\"expn_info\", \"outer\"] = method_names.as_slice();\n+            let args = arg_lists[1];\n+            if args.len() == 1;\n+            let self_arg = &args[0];\n+            let self_ty = walk_ptrs_ty(cx.tables.expr_ty(self_arg));\n+            if match_type(cx, self_ty, &paths::SYNTAX_CONTEXT);\n+            then {\n+                span_lint_and_sugg(\n+                    cx,\n+                    OUTER_EXPN_INFO,\n+                    expr.span.trim_start(self_arg.span).unwrap_or(expr.span),\n+                    \"usage of `outer().expn_info()`\",\n+                    \"try\",\n+                    \".outer_expn_info()\".to_string(),\n+                    Applicability::MachineApplicable,\n+                );\n+            }\n+        }\n+    }\n+}"}, {"sha": "1960618ebfaa98a1a9c9bf76f212bb7bcf22d6d4", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b726b41daf9abd351f6b58984f76965a61947818/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b726b41daf9abd351f6b58984f76965a61947818/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=b726b41daf9abd351f6b58984f76965a61947818", "patch": "@@ -101,6 +101,7 @@ pub const STDOUT: [&str; 4] = [\"std\", \"io\", \"stdio\", \"stdout\"];\n pub const STD_MEM_TRANSMUTE: [&str; 3] = [\"std\", \"mem\", \"transmute\"];\n pub const STD_PTR_NULL: [&str; 3] = [\"std\", \"ptr\", \"null\"];\n pub const STRING: [&str; 3] = [\"alloc\", \"string\", \"String\"];\n+pub const SYNTAX_CONTEXT: [&str; 3] = [\"syntax_pos\", \"hygiene\", \"SyntaxContext\"];\n pub const TO_OWNED: [&str; 3] = [\"alloc\", \"borrow\", \"ToOwned\"];\n pub const TO_OWNED_METHOD: [&str; 4] = [\"alloc\", \"borrow\", \"ToOwned\", \"to_owned\"];\n pub const TO_STRING: [&str; 3] = [\"alloc\", \"string\", \"ToString\"];"}, {"sha": "1bc6f6888054513f129861f62e1eec3a45c57664", "filename": "tests/ui/outer_expn_info.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b726b41daf9abd351f6b58984f76965a61947818/tests%2Fui%2Fouter_expn_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b726b41daf9abd351f6b58984f76965a61947818/tests%2Fui%2Fouter_expn_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fouter_expn_info.rs?ref=b726b41daf9abd351f6b58984f76965a61947818", "patch": "@@ -0,0 +1,23 @@\n+#![deny(clippy::internal)]\n+#![feature(rustc_private)]\n+\n+#[macro_use]\n+extern crate rustc;\n+use rustc::hir::Expr;\n+use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+\n+declare_lint! {\n+    pub TEST_LINT,\n+    Warn,\n+    \"\"\n+}\n+\n+declare_lint_pass!(Pass => [TEST_LINT]);\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n+    fn check_expr(&mut self, _cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n+        let _ = expr.span.ctxt().outer().expn_info();\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "2bd3a98354576d2596a80be8bd0a593b80cd40a9", "filename": "tests/ui/outer_expn_info.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b726b41daf9abd351f6b58984f76965a61947818/tests%2Fui%2Fouter_expn_info.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b726b41daf9abd351f6b58984f76965a61947818/tests%2Fui%2Fouter_expn_info.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fouter_expn_info.stderr?ref=b726b41daf9abd351f6b58984f76965a61947818", "patch": "@@ -0,0 +1,15 @@\n+error: usage of `outer().expn_info()`\n+  --> $DIR/outer_expn_info.rs:19:33\n+   |\n+LL |         let _ = expr.span.ctxt().outer().expn_info();\n+   |                                 ^^^^^^^^^^^^^^^^^^^^ help: try: `.outer_expn_info()`\n+   |\n+note: lint level defined here\n+  --> $DIR/outer_expn_info.rs:1:9\n+   |\n+LL | #![deny(clippy::internal)]\n+   |         ^^^^^^^^^^^^^^^^\n+   = note: #[deny(clippy::outer_expn_info)] implied by #[deny(clippy::internal)]\n+\n+error: aborting due to previous error\n+"}]}