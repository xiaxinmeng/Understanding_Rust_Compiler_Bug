{"sha": "4c73b646328d4adeb66fe67bae57c8206803eef8", "node_id": "C_kwDOAAsO6NoAKDRjNzNiNjQ2MzI4ZDRhZGViNjZmZTY3YmFlNTdjODIwNjgwM2VlZjg", "commit": {"author": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2022-12-02T16:40:57Z"}, "committer": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2022-12-02T16:47:57Z"}, "message": "Use proper HirId for async track_caller attribute check", "tree": {"sha": "75b17e9cc18cf9c660aaba49a1b78f559c625b11", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75b17e9cc18cf9c660aaba49a1b78f559c625b11"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c73b646328d4adeb66fe67bae57c8206803eef8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c73b646328d4adeb66fe67bae57c8206803eef8", "html_url": "https://github.com/rust-lang/rust/commit/4c73b646328d4adeb66fe67bae57c8206803eef8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c73b646328d4adeb66fe67bae57c8206803eef8/comments", "author": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c0bc3028a575eece6d4e8fbc6624cb95b9c9893", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c0bc3028a575eece6d4e8fbc6624cb95b9c9893", "html_url": "https://github.com/rust-lang/rust/commit/9c0bc3028a575eece6d4e8fbc6624cb95b9c9893"}], "stats": {"total": 65, "additions": 45, "deletions": 20}, "files": [{"sha": "2d7cd067e08a86e1c670de722e0bdb3c975f238e", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/4c73b646328d4adeb66fe67bae57c8206803eef8/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c73b646328d4adeb66fe67bae57c8206803eef8/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=4c73b646328d4adeb66fe67bae57c8206803eef8", "patch": "@@ -147,6 +147,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 ),\n                 ExprKind::Async(capture_clause, closure_node_id, block) => self.make_async_expr(\n                     *capture_clause,\n+                    None,\n                     *closure_node_id,\n                     None,\n                     e.span,\n@@ -581,6 +582,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     pub(super) fn make_async_expr(\n         &mut self,\n         capture_clause: CaptureBy,\n+        outer_hir_id: Option<hir::HirId>,\n         closure_node_id: NodeId,\n         ret_ty: Option<hir::FnRetTy<'hir>>,\n         span: Span,\n@@ -647,18 +649,20 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n             hir::ExprKind::Closure(c)\n         };\n-        let parent_has_track_caller = self\n-            .attrs\n-            .values()\n-            .find(|attrs| attrs.into_iter().find(|attr| attr.has_name(sym::track_caller)).is_some())\n-            .is_some();\n-        let unstable_span =\n-            self.mark_span_with_reason(DesugaringKind::Async, span, self.allow_gen_future.clone());\n \n-        let hir_id = if parent_has_track_caller {\n-            let generator_hir_id = self.lower_node_id(closure_node_id);\n+        let track_caller = outer_hir_id\n+            .and_then(|id| self.attrs.get(&id.local_id))\n+            .map_or(false, |attrs| attrs.into_iter().any(|attr| attr.has_name(sym::track_caller)));\n+\n+        let hir_id = self.lower_node_id(closure_node_id);\n+        if track_caller {\n+            let unstable_span = self.mark_span_with_reason(\n+                DesugaringKind::Async,\n+                span,\n+                self.allow_gen_future.clone(),\n+            );\n             self.lower_attrs(\n-                generator_hir_id,\n+                hir_id,\n                 &[Attribute {\n                     kind: AttrKind::Normal(ptr::P(NormalAttr {\n                         item: AttrItem {\n@@ -673,10 +677,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     span: unstable_span,\n                 }],\n             );\n-            generator_hir_id\n-        } else {\n-            self.lower_node_id(closure_node_id)\n-        };\n+        }\n \n         let generator = hir::Expr { hir_id, kind: generator_kind, span: self.lower_span(span) };\n \n@@ -1012,6 +1013,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n                 let async_body = this.make_async_expr(\n                     capture_clause,\n+                    None,\n                     inner_closure_id,\n                     async_ret_ty,\n                     body.span,"}, {"sha": "b66923a91f6852a84f0364f44e0748c41acf3bcc", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4c73b646328d4adeb66fe67bae57c8206803eef8/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c73b646328d4adeb66fe67bae57c8206803eef8/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=4c73b646328d4adeb66fe67bae57c8206803eef8", "patch": "@@ -268,8 +268,13 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     // only cares about the input argument patterns in the function\n                     // declaration (decl), not the return types.\n                     let asyncness = header.asyncness;\n-                    let body_id =\n-                        this.lower_maybe_async_body(span, &decl, asyncness, body.as_deref());\n+                    let body_id = this.lower_maybe_async_body(\n+                        span,\n+                        hir_id,\n+                        &decl,\n+                        asyncness,\n+                        body.as_deref(),\n+                    );\n \n                     let mut itctx = ImplTraitContext::Universal;\n                     let (generics, decl) = this.lower_generics(generics, id, &mut itctx, |this| {\n@@ -789,7 +794,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             AssocItemKind::Fn(box Fn { sig, generics, body: Some(body), .. }) => {\n                 let asyncness = sig.header.asyncness;\n                 let body_id =\n-                    self.lower_maybe_async_body(i.span, &sig.decl, asyncness, Some(&body));\n+                    self.lower_maybe_async_body(i.span, hir_id, &sig.decl, asyncness, Some(&body));\n                 let (generics, sig) = self.lower_method_sig(\n                     generics,\n                     sig,\n@@ -863,6 +868,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         // Since `default impl` is not yet implemented, this is always true in impls.\n         let has_value = true;\n         let (defaultness, _) = self.lower_defaultness(i.kind.defaultness(), has_value);\n+        let hir_id = self.lower_node_id(i.id);\n \n         let (generics, kind) = match &i.kind {\n             AssocItemKind::Const(_, ty, expr) => {\n@@ -875,8 +881,13 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             AssocItemKind::Fn(box Fn { sig, generics, body, .. }) => {\n                 self.current_item = Some(i.span);\n                 let asyncness = sig.header.asyncness;\n-                let body_id =\n-                    self.lower_maybe_async_body(i.span, &sig.decl, asyncness, body.as_deref());\n+                let body_id = self.lower_maybe_async_body(\n+                    i.span,\n+                    hir_id,\n+                    &sig.decl,\n+                    asyncness,\n+                    body.as_deref(),\n+                );\n                 let (generics, sig) = self.lower_method_sig(\n                     generics,\n                     sig,\n@@ -909,7 +920,6 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             AssocItemKind::MacCall(..) => panic!(\"`TyMac` should have been expanded by now\"),\n         };\n \n-        let hir_id = self.lower_node_id(i.id);\n         self.lower_attrs(hir_id, &i.attrs);\n         let item = hir::ImplItem {\n             owner_id: hir_id.expect_owner(),\n@@ -1043,6 +1053,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     fn lower_maybe_async_body(\n         &mut self,\n         span: Span,\n+        fn_id: hir::HirId,\n         decl: &FnDecl,\n         asyncness: Async,\n         body: Option<&Block>,\n@@ -1193,6 +1204,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n             let async_expr = this.make_async_expr(\n                 CaptureBy::Value,\n+                Some(fn_id),\n                 closure_id,\n                 None,\n                 body.span,"}, {"sha": "4e52b8e250b9fa6b3e8989089052fc63e4616184", "filename": "src/test/ui/async-await/track-caller/issue-105134.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4c73b646328d4adeb66fe67bae57c8206803eef8/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fissue-105134.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c73b646328d4adeb66fe67bae57c8206803eef8/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fissue-105134.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fissue-105134.rs?ref=4c73b646328d4adeb66fe67bae57c8206803eef8", "patch": "@@ -0,0 +1,11 @@\n+// check-pass\n+// edition:2021\n+\n+#[track_caller]\n+fn f() {\n+    let _ = async {};\n+}\n+\n+fn main() {\n+    f();\n+}"}]}