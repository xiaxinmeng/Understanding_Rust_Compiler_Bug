{"sha": "069f851671d5ce6eefbfd3071c5bb7cbe7df9df5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2OWY4NTE2NzFkNWNlNmVlZmJmZDMwNzFjNWJiN2NiZTdkZjlkZjU=", "commit": {"author": {"name": "Ryan1729", "email": "Ryan1729@gmail.com", "date": "2020-08-03T04:00:51Z"}, "committer": {"name": "Ryan1729", "email": "Ryan1729@gmail.com", "date": "2020-08-06T10:24:24Z"}, "message": "initial compiling version of TRANSMUTES_EXPRESSIBLE_AS_PTR_CASTS", "tree": {"sha": "b8c3ea49ea28e7bb37b9a230ded8b06bfae2d46f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8c3ea49ea28e7bb37b9a230ded8b06bfae2d46f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/069f851671d5ce6eefbfd3071c5bb7cbe7df9df5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/069f851671d5ce6eefbfd3071c5bb7cbe7df9df5", "html_url": "https://github.com/rust-lang/rust/commit/069f851671d5ce6eefbfd3071c5bb7cbe7df9df5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/069f851671d5ce6eefbfd3071c5bb7cbe7df9df5/comments", "author": {"login": "Ryan1729", "id": 2133026, "node_id": "MDQ6VXNlcjIxMzMwMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2133026?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ryan1729", "html_url": "https://github.com/Ryan1729", "followers_url": "https://api.github.com/users/Ryan1729/followers", "following_url": "https://api.github.com/users/Ryan1729/following{/other_user}", "gists_url": "https://api.github.com/users/Ryan1729/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ryan1729/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ryan1729/subscriptions", "organizations_url": "https://api.github.com/users/Ryan1729/orgs", "repos_url": "https://api.github.com/users/Ryan1729/repos", "events_url": "https://api.github.com/users/Ryan1729/events{/privacy}", "received_events_url": "https://api.github.com/users/Ryan1729/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Ryan1729", "id": 2133026, "node_id": "MDQ6VXNlcjIxMzMwMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2133026?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ryan1729", "html_url": "https://github.com/Ryan1729", "followers_url": "https://api.github.com/users/Ryan1729/followers", "following_url": "https://api.github.com/users/Ryan1729/following{/other_user}", "gists_url": "https://api.github.com/users/Ryan1729/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ryan1729/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ryan1729/subscriptions", "organizations_url": "https://api.github.com/users/Ryan1729/orgs", "repos_url": "https://api.github.com/users/Ryan1729/repos", "events_url": "https://api.github.com/users/Ryan1729/events{/privacy}", "received_events_url": "https://api.github.com/users/Ryan1729/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e84b8c2fb48ed864347296cafa3119ac094873f", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e84b8c2fb48ed864347296cafa3119ac094873f", "html_url": "https://github.com/rust-lang/rust/commit/5e84b8c2fb48ed864347296cafa3119ac094873f"}], "stats": {"total": 74, "additions": 72, "deletions": 2}, "files": [{"sha": "d5b694ce3118d7defe80bf82db826f2e6c3b5421", "filename": "clippy_lints/src/transmute.rs", "status": "modified", "additions": 72, "deletions": 2, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/069f851671d5ce6eefbfd3071c5bb7cbe7df9df5/clippy_lints%2Fsrc%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/069f851671d5ce6eefbfd3071c5bb7cbe7df9df5/clippy_lints%2Fsrc%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute.rs?ref=069f851671d5ce6eefbfd3071c5bb7cbe7df9df5", "patch": "@@ -7,8 +7,10 @@ use rustc_ast::ast;\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind, GenericArg, Mutability, QPath, TyKind, UnOp};\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::ty::{self, Ty};\n+use rustc_middle::ty::{self, cast::CastKind, Ty};\n+use rustc_span::DUMMY_SP;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_typeck::check::{cast::CastCheck, FnCtxt, Inherited};\n use std::borrow::Cow;\n \n declare_clippy_lint! {\n@@ -624,7 +626,21 @@ impl<'tcx> LateLintPass<'tcx> for Transmute {\n                             );\n                         }\n                     },\n-                    _ => return,\n+                    (_, _) if can_be_expressed_as_pointer_cast(cx, e, from_ty, to_ty) => {\n+                        span_lint(\n+                            cx,\n+                            TRANSMUTES_EXPRESSIBLE_AS_PTR_CASTS,\n+                            e.span,\n+                            &format!(\n+                                \"transmute from `{}` to `{}` which could be expressed as a pointer cast instead\",\n+                                from_ty,\n+                                to_ty\n+                            )\n+                        );\n+                    },\n+                    _ => {\n+                        return\n+                    },\n                 }\n             }\n         }\n@@ -671,3 +687,57 @@ fn is_layout_incompatible<'tcx>(cx: &LateContext<'tcx>, from: Ty<'tcx>, to: Ty<'\n         false\n     }\n }\n+\n+/// Check if the the type conversion can be expressed as a pointer cast, instead of a transmute.\n+fn can_be_expressed_as_pointer_cast<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>, from_ty: Ty<'tcx>, to_ty: Ty<'tcx>) -> bool {\n+    use CastKind::*;\n+    matches!(\n+        check_cast(cx, e, from_ty, to_ty),\n+        Some(\n+            PtrPtrCast\n+            | PtrAddrCast\n+            | AddrPtrCast\n+            | ArrayPtrCast\n+            | FnPtrPtrCast\n+            | FnPtrAddrCast\n+        )\n+    )\n+}\n+\n+/// If a cast from from_ty to to_ty is valid, returns an Ok containing the kind of the cast.\n+fn check_cast<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>, from_ty: Ty<'tcx>, to_ty: Ty<'tcx>) -> Option<CastKind> {\n+    let hir_id = e.hir_id;\n+    let local_def_id = hir_id.owner;\n+\n+    Inherited::build(cx.tcx, local_def_id).enter(|inherited| {\n+        let fn_ctxt = FnCtxt::new(\n+            &inherited,\n+            // TODO should we try to get the correct ParamEnv?\n+            ty::ParamEnv::empty(),\n+            hir_id\n+        );\n+\n+        // If we already have errors, we can't be sure we can pointer cast.\n+        if fn_ctxt.errors_reported_since_creation() {\n+            return None;\n+        }\n+\n+        if let Ok(check) = CastCheck::new(\n+            &fn_ctxt,\n+            e,\n+            from_ty,\n+            to_ty,\n+            // We won't show any error to the user, so we don't care what the span is here.\n+            DUMMY_SP,\n+            DUMMY_SP,\n+        ) {\n+            check.do_check(&fn_ctxt)\n+                .ok()\n+                // do_check's documentation says that it might return Ok and create\n+                // errors in the fcx instead of returing Err in some cases.\n+                .filter(|_| !fn_ctxt.errors_reported_since_creation())\n+        } else {\n+            None\n+        }\n+    })\n+}\n\\ No newline at end of file"}]}