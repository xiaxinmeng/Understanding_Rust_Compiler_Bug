{"sha": "2d100212a916107f336e92c8c0ed79a5bedc4f6a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkMTAwMjEyYTkxNjEwN2YzMzZlOTJjOGMwZWQ3OWE1YmVkYzRmNmE=", "commit": {"author": {"name": "Tamir Duberstein", "email": "tamird@squareup.com", "date": "2014-12-23T05:20:31Z"}, "committer": {"name": "Tamir Duberstein", "email": "tamird@squareup.com", "date": "2014-12-28T17:43:57Z"}, "message": "Regression test for #17728\n\nCloses #17728.", "tree": {"sha": "0aa27a270f86f83f811864e03c5eb2924df70d2c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0aa27a270f86f83f811864e03c5eb2924df70d2c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d100212a916107f336e92c8c0ed79a5bedc4f6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d100212a916107f336e92c8c0ed79a5bedc4f6a", "html_url": "https://github.com/rust-lang/rust/commit/2d100212a916107f336e92c8c0ed79a5bedc4f6a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d100212a916107f336e92c8c0ed79a5bedc4f6a/comments", "author": {"login": "tamird", "id": 1535036, "node_id": "MDQ6VXNlcjE1MzUwMzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1535036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tamird", "html_url": "https://github.com/tamird", "followers_url": "https://api.github.com/users/tamird/followers", "following_url": "https://api.github.com/users/tamird/following{/other_user}", "gists_url": "https://api.github.com/users/tamird/gists{/gist_id}", "starred_url": "https://api.github.com/users/tamird/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tamird/subscriptions", "organizations_url": "https://api.github.com/users/tamird/orgs", "repos_url": "https://api.github.com/users/tamird/repos", "events_url": "https://api.github.com/users/tamird/events{/privacy}", "received_events_url": "https://api.github.com/users/tamird/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tamird", "id": 1535036, "node_id": "MDQ6VXNlcjE1MzUwMzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1535036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tamird", "html_url": "https://github.com/tamird", "followers_url": "https://api.github.com/users/tamird/followers", "following_url": "https://api.github.com/users/tamird/following{/other_user}", "gists_url": "https://api.github.com/users/tamird/gists{/gist_id}", "starred_url": "https://api.github.com/users/tamird/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tamird/subscriptions", "organizations_url": "https://api.github.com/users/tamird/orgs", "repos_url": "https://api.github.com/users/tamird/repos", "events_url": "https://api.github.com/users/tamird/events{/privacy}", "received_events_url": "https://api.github.com/users/tamird/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01cdf00c2fbc388f777366a5ee303019c462b99a", "url": "https://api.github.com/repos/rust-lang/rust/commits/01cdf00c2fbc388f777366a5ee303019c462b99a", "html_url": "https://github.com/rust-lang/rust/commit/01cdf00c2fbc388f777366a5ee303019c462b99a"}], "stats": {"total": 132, "additions": 132, "deletions": 0}, "files": [{"sha": "50b0a1a20c24c2e238acc7c7036a4fb0fc399c23", "filename": "src/test/compile-fail/issue-17728.rs", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/2d100212a916107f336e92c8c0ed79a5bedc4f6a/src%2Ftest%2Fcompile-fail%2Fissue-17728.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d100212a916107f336e92c8c0ed79a5bedc4f6a/src%2Ftest%2Fcompile-fail%2Fissue-17728.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17728.rs?ref=2d100212a916107f336e92c8c0ed79a5bedc4f6a", "patch": "@@ -0,0 +1,132 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::fmt::{Show, Formatter, Error};\n+use std::collections::HashMap;\n+\n+trait HasInventory {\n+    fn getInventory<'s>(&'s self) -> &'s mut Inventory;\n+    fn addToInventory(&self, item: &Item);\n+    fn removeFromInventory(&self, itemName: &str) -> bool;\n+}\n+\n+trait TraversesWorld {\n+    fn attemptTraverse(&self, room: &Room, directionStr: &str) -> Result<&Room, &str> {\n+        let direction = str_to_direction(directionStr);\n+        let maybe_room = room.direction_to_room.find(&direction);\n+        //~^ ERROR cannot infer an appropriate lifetime for autoref due to conflicting requirements\n+        match maybe_room {\n+            Some(entry) => Ok(entry),\n+            _ => Err(\"Direction does not exist in room.\")\n+        }\n+    }\n+}\n+\n+\n+#[deriving(Show, Eq, PartialEq, Hash)]\n+enum RoomDirection {\n+    West,\n+    East,\n+    North,\n+    South,\n+    Up,\n+    Down,\n+    In,\n+    Out,\n+\n+    None\n+}\n+\n+struct Room {\n+    description: String,\n+    items: Vec<Item>,\n+    direction_to_room: HashMap<RoomDirection, Room>,\n+}\n+\n+impl Room {\n+    fn new(description: &'static str) -> Room {\n+        Room {\n+            description: description.to_string(),\n+            items: Vec::new(),\n+            direction_to_room: HashMap::new()\n+        }\n+    }\n+\n+    fn add_direction(&mut self, direction: RoomDirection, room: Room) {\n+        self.direction_to_room.insert(direction, room);\n+    }\n+}\n+\n+struct Item {\n+    name: String,\n+}\n+\n+struct Inventory {\n+    items: Vec<Item>,\n+}\n+\n+impl Inventory {\n+    fn new() -> Inventory {\n+        Inventory {\n+            items: Vec::new()\n+        }\n+    }\n+}\n+\n+struct Player {\n+    name: String,\n+    inventory: Inventory,\n+}\n+\n+impl Player {\n+    fn new(name: &'static str) -> Player {\n+        Player {\n+            name: name.to_string(),\n+            inventory: Inventory::new()\n+        }\n+    }\n+}\n+\n+impl TraversesWorld for Player {\n+}\n+\n+impl Show for Player {\n+    fn fmt(&self, formatter: &mut Formatter) -> Result<(), Error> {\n+        formatter.write_str(\"Player{ name:\");\n+        formatter.write_str(self.name.as_slice());\n+        formatter.write_str(\" }\");\n+        Ok(())\n+    }\n+}\n+\n+fn str_to_direction(to_parse: &str) -> RoomDirection {\n+    match to_parse {\n+        \"w\" | \"west\" => RoomDirection::West,\n+        \"e\" | \"east\" => RoomDirection::East,\n+        \"n\" | \"north\" => RoomDirection::North,\n+        \"s\" | \"south\" => RoomDirection::South,\n+        \"in\" => RoomDirection::In,\n+        \"out\" => RoomDirection::Out,\n+        \"up\" => RoomDirection::Up,\n+        \"down\" => RoomDirection::Down,\n+        _ => None //~ ERROR mismatched types\n+    }\n+}\n+\n+fn main() {\n+    let mut player = Player::new(\"Test player\");\n+    let mut room = Room::new(\"A test room\");\n+    println!(\"Made a player: {}\", player);\n+    println!(\"Direction parse: {}\", str_to_direction(\"east\"));\n+    match player.attemptTraverse(&room, \"west\") {\n+        Ok(_) => println!(\"Was able to move west\"),\n+        Err(msg) => println!(\"Not able to move west: {}\", msg)\n+    };\n+}"}]}