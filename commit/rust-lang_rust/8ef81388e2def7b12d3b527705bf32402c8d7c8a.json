{"sha": "8ef81388e2def7b12d3b527705bf32402c8d7c8a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlZjgxMzg4ZTJkZWY3YjEyZDNiNTI3NzA1YmYzMjQwMmM4ZDdjOGE=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2020-12-30T15:34:53Z"}, "committer": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2021-03-23T17:16:20Z"}, "message": "Some refactoring", "tree": {"sha": "c9aa6da68f23fcf67e738005809e476de4887eba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c9aa6da68f23fcf67e738005809e476de4887eba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ef81388e2def7b12d3b527705bf32402c8d7c8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ef81388e2def7b12d3b527705bf32402c8d7c8a", "html_url": "https://github.com/rust-lang/rust/commit/8ef81388e2def7b12d3b527705bf32402c8d7c8a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ef81388e2def7b12d3b527705bf32402c8d7c8a/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4e5db4e4207e21c38c07640d44005dab022f1b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4e5db4e4207e21c38c07640d44005dab022f1b8", "html_url": "https://github.com/rust-lang/rust/commit/e4e5db4e4207e21c38c07640d44005dab022f1b8"}], "stats": {"total": 163, "additions": 74, "deletions": 89}, "files": [{"sha": "f426f2c7fece55cc4258ad06af092560ac4b2b22", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ef81388e2def7b12d3b527705bf32402c8d7c8a/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ef81388e2def7b12d3b527705bf32402c8d7c8a/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=8ef81388e2def7b12d3b527705bf32402c8d7c8a", "patch": "@@ -785,8 +785,8 @@ pub fn noop_flat_map_generic_param<T: MutVisitor>(\n             visit_opt(default, |default| vis.visit_ty(default));\n         }\n         GenericParamKind::Const { ty, kw_span: _, default } => {\n-            visit_opt(default, |default| vis.visit_anon_const(default));\n             vis.visit_ty(ty);\n+            visit_opt(default, |default| vis.visit_anon_const(default));\n         }\n     }\n     smallvec![param]"}, {"sha": "d4d7713f705658eaad1a9d52dcd953b15301a7ea", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ef81388e2def7b12d3b527705bf32402c8d7c8a/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ef81388e2def7b12d3b527705bf32402c8d7c8a/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=8ef81388e2def7b12d3b527705bf32402c8d7c8a", "patch": "@@ -1180,7 +1180,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                         default.value.span,\n                         \"default values for const generic parameters are unstable\",\n                     );\n-                    err.note(\"to enable them use #![feature(const_generic_defaults)]\");\n+                    err.help(\"add `#![feature(const_generic_defaults)]` to the crate attributes to enable\");\n                     err.emit();\n                     break;\n                 }"}, {"sha": "d6f2773cc47ce4fa2efc1b74e8bbffd8d486ff0b", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8ef81388e2def7b12d3b527705bf32402c8d7c8a/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ef81388e2def7b12d3b527705bf32402c8d7c8a/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=8ef81388e2def7b12d3b527705bf32402c8d7c8a", "patch": "@@ -2659,6 +2659,7 @@ impl<'a> State<'a> {\n                     s.word_space(\":\");\n                     s.print_type(ty);\n                     s.print_type_bounds(\":\", &param.bounds);\n+                    // FIXME(const_generic_defaults)\n                     if let Some(ref _default) = default {\n                         // FIXME(const_generics_defaults): print the `default` value here\n                         s.s.space();"}, {"sha": "7df80b2b5b9a4ddbd5e391a3edf48f675799b407", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8ef81388e2def7b12d3b527705bf32402c8d7c8a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ef81388e2def7b12d3b527705bf32402c8d7c8a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=8ef81388e2def7b12d3b527705bf32402c8d7c8a", "patch": "@@ -963,9 +963,8 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             .rev()\n             .filter_map(|param| match param.kind {\n                 ty::GenericParamDefKind::Lifetime => None,\n-\n-                ty::GenericParamDefKind::Type { has_default, .. }\n-                | ty::GenericParamDefKind::Const { has_default } => {\n+                ty::GenericParamDefKind::Const { has_default }\n+                | ty::GenericParamDefKind::Type { has_default, .. } => {\n                     Some((param.def_id, has_default))\n                 }\n             })"}, {"sha": "323785745273689bba75df91b8e63513b344867b", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8ef81388e2def7b12d3b527705bf32402c8d7c8a/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ef81388e2def7b12d3b527705bf32402c8d7c8a/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=8ef81388e2def7b12d3b527705bf32402c8d7c8a", "patch": "@@ -1876,13 +1876,16 @@ impl EncodeContext<'a, 'tcx> {\n                         default.is_some(),\n                     );\n                 }\n-                GenericParamKind::Const { .. } => {\n+                GenericParamKind::Const { ref default, .. } => {\n                     self.encode_info_for_generic_param(\n                         def_id.to_def_id(),\n                         EntryKind::ConstParam,\n                         true,\n                     );\n-                    // FIXME(const_generics_defaults)\n+                    if default.is_some() {\n+                        self.encode_stability(def_id.to_def_id());\n+                    }\n+                    // FIXME(const_generic_defaults)\n                 }\n             }\n         }"}, {"sha": "8a6ac843534c659a883e7d9fc6def13ece3f0cb0", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8ef81388e2def7b12d3b527705bf32402c8d7c8a/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ef81388e2def7b12d3b527705bf32402c8d7c8a/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=8ef81388e2def7b12d3b527705bf32402c8d7c8a", "patch": "@@ -507,10 +507,9 @@ impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> {\n \n     fn visit_generic_param(&mut self, p: &'tcx hir::GenericParam<'tcx>) {\n         let kind = match &p.kind {\n-            // FIXME(const_generics_defaults)\n-            hir::GenericParamKind::Type { default, .. } if default.is_some() => {\n-                AnnotationKind::Container\n-            }\n+            // Allow stability attributes on default generic arguments.\n+            hir::GenericParamKind::Type { default: Some(_), .. }\n+            | hir::GenericParamKind::Const { default: Some(_), .. } => AnnotationKind::Container,\n             _ => AnnotationKind::Prohibited,\n         };\n "}, {"sha": "d9789dda2ea9e8f27f6de015926a81dcac735050", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8ef81388e2def7b12d3b527705bf32402c8d7c8a/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ef81388e2def7b12d3b527705bf32402c8d7c8a/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=8ef81388e2def7b12d3b527705bf32402c8d7c8a", "patch": "@@ -931,6 +931,7 @@ impl ReachEverythingInTheInterfaceVisitor<'_, 'tcx> {\n                 GenericParamDefKind::Const { has_default, .. } => {\n                     self.visit(self.ev.tcx.type_of(param.def_id));\n                     if has_default {\n+                        // FIXME(const_generic_defaults)\n                         // how should the error case be handled here?\n                         // let default_const = self.ev.tcx.const_eval_poly(param.def_id).unwrap();\n                         // self.visit(default_const);"}, {"sha": "d402fa4f8494f9fcb0a475532e9fdf6dab3d997e", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ef81388e2def7b12d3b527705bf32402c8d7c8a/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ef81388e2def7b12d3b527705bf32402c8d7c8a/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=8ef81388e2def7b12d3b527705bf32402c8d7c8a", "patch": "@@ -450,12 +450,12 @@ impl<'a> Resolver<'a> {\n                     self.session,\n                     span,\n                     E0128,\n-                    \"type parameters with a default cannot use \\\n+                    \"generic parameters with a default cannot use \\\n                                                 forward declared identifiers\"\n                 );\n                 err.span_label(\n                     span,\n-                    \"defaulted type parameters cannot be forward declared\".to_string(),\n+                    \"defaulted generic parameters cannot be forward declared\".to_string(),\n                 );\n                 err\n             }"}, {"sha": "f9f33492a1ec35d0e6584755056b33dc86729244", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/8ef81388e2def7b12d3b527705bf32402c8d7c8a/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ef81388e2def7b12d3b527705bf32402c8d7c8a/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=8ef81388e2def7b12d3b527705bf32402c8d7c8a", "patch": "@@ -132,10 +132,10 @@ crate enum RibKind<'a> {\n     /// We passed through a `macro_rules!` statement\n     MacroDefinition(DefId),\n \n-    /// All bindings in this rib are type parameters that can't be used\n-    /// from the default of a type parameter because they're not declared\n-    /// before said type parameter. Also see the `visit_generics` override.\n-    ForwardTyParamBanRibKind,\n+    /// All bindings in this rib are generic parameters that can't be used\n+    /// from the default of a generic parameter because they're not declared\n+    /// before said generic parameter. Also see the `visit_generics` override.\n+    ForwardGenericParamBanRibKind,\n \n     /// We are inside of the type of a const parameter. Can't refer to any\n     /// parameters.\n@@ -154,7 +154,7 @@ impl RibKind<'_> {\n             | ModuleRibKind(_)\n             | MacroDefinition(_)\n             | ConstParamTyRibKind => false,\n-            AssocItemRibKind | ItemRibKind(_) | ForwardTyParamBanRibKind => true,\n+            AssocItemRibKind | ItemRibKind(_) | ForwardGenericParamBanRibKind => true,\n         }\n     }\n }\n@@ -555,15 +555,16 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n         // provide previous type parameters as they're built. We\n         // put all the parameters on the ban list and then remove\n         // them one by one as they are processed and become available.\n-        let mut default_ban_rib = Rib::new(ForwardTyParamBanRibKind);\n+        let mut default_ban_rib = Rib::new(ForwardGenericParamBanRibKind);\n         let mut found_default = false;\n         default_ban_rib.bindings.extend(generics.params.iter().filter_map(\n             |param| match param.kind {\n-                GenericParamKind::Const { .. } | GenericParamKind::Lifetime { .. } => None,\n-                GenericParamKind::Type { ref default, .. } => {\n-                    found_default |= default.is_some();\n-                    found_default.then_some((Ident::with_dummy_span(param.ident.name), Res::Err))\n+                GenericParamKind::Type { default: Some(_), .. }\n+                | GenericParamKind::Const { default: Some(_), .. } => {\n+                    found_default = true;\n+                    Some((Ident::with_dummy_span(param.ident.name), Res::Err))\n                 }\n+                _ => None,\n             },\n         ));\n \n@@ -591,8 +592,8 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n \n                     if let Some(ref ty) = default {\n                         self.ribs[TypeNS].push(default_ban_rib);\n-                        self.with_rib(ValueNS, ForwardTyParamBanRibKind, |this| {\n-                            // HACK: We use an empty `ForwardTyParamBanRibKind` here which\n+                        self.with_rib(ValueNS, ForwardGenericParamBanRibKind, |this| {\n+                            // HACK: We use an empty `ForwardGenericParamBanRibKind` here which\n                             // is only used to forbid the use of const parameters inside of\n                             // type defaults.\n                             //\n@@ -616,7 +617,6 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n                     self.visit_ty(ty);\n                     self.ribs[TypeNS].pop().unwrap();\n                     self.ribs[ValueNS].pop().unwrap();\n-                    // FIXME(const_generics:default) do something with default here?\n                 }\n             }\n         }\n@@ -866,7 +866,7 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                 | ItemRibKind(..)\n                 | ConstantItemRibKind(..)\n                 | ModuleRibKind(..)\n-                | ForwardTyParamBanRibKind\n+                | ForwardGenericParamBanRibKind\n                 | ConstParamTyRibKind => {\n                     return false;\n                 }"}, {"sha": "4eda1220599c794a1ac55be7f459c2b6d6d9f149", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8ef81388e2def7b12d3b527705bf32402c8d7c8a/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ef81388e2def7b12d3b527705bf32402c8d7c8a/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=8ef81388e2def7b12d3b527705bf32402c8d7c8a", "patch": "@@ -2592,8 +2592,8 @@ impl<'a> Resolver<'a> {\n         debug!(\"validate_res_from_ribs({:?})\", res);\n         let ribs = &all_ribs[rib_index + 1..];\n \n-        // An invalid forward use of a type parameter from a previous default.\n-        if let ForwardTyParamBanRibKind = all_ribs[rib_index].kind {\n+        // An invalid forward use of a generic parameter from a previous default.\n+        if let ForwardGenericParamBanRibKind = all_ribs[rib_index].kind {\n             if record_used {\n                 let res_error = if rib_ident.name == kw::SelfUpper {\n                     ResolutionError::SelfInTyParamDefault\n@@ -2617,7 +2617,7 @@ impl<'a> Resolver<'a> {\n                         | ClosureOrAsyncRibKind\n                         | ModuleRibKind(..)\n                         | MacroDefinition(..)\n-                        | ForwardTyParamBanRibKind => {\n+                        | ForwardGenericParamBanRibKind => {\n                             // Nothing to do. Continue.\n                         }\n                         ItemRibKind(_) | FnItemRibKind | AssocItemRibKind => {\n@@ -2689,7 +2689,9 @@ impl<'a> Resolver<'a> {\n \n                         // We only forbid constant items if we are inside of type defaults,\n                         // for example `struct Foo<T, U = [u8; std::mem::size_of::<T>()]>`\n-                        ForwardTyParamBanRibKind => {\n+                        ForwardGenericParamBanRibKind => {\n+                            // FIXME(const_generic_defaults): we may need to distinguish between\n+                            // being in type parameter defaults and const parameter defaults\n                             in_ty_param_default = true;\n                             continue;\n                         }\n@@ -2782,7 +2784,9 @@ impl<'a> Resolver<'a> {\n \n                         // We only forbid constant items if we are inside of type defaults,\n                         // for example `struct Foo<T, U = [u8; std::mem::size_of::<T>()]>`\n-                        ForwardTyParamBanRibKind => {\n+                        ForwardGenericParamBanRibKind => {\n+                            // FIXME(const_generic_defaults): we may need to distinguish between\n+                            // being in type parameter defaults and const parameter defaults\n                             in_ty_param_default = true;\n                             continue;\n                         }"}, {"sha": "4328d0acb0a2af2168987bae4ff4f07c1449bbfe", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8ef81388e2def7b12d3b527705bf32402c8d7c8a/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ef81388e2def7b12d3b527705bf32402c8d7c8a/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=8ef81388e2def7b12d3b527705bf32402c8d7c8a", "patch": "@@ -507,14 +507,15 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     GenericParamDefKind::Const { has_default } => {\n                         let ty = tcx.at(self.span).type_of(param.def_id);\n                         if !infer_args && has_default {\n-                            let c = ty::Const::from_anon_const(tcx, param.def_id.expect_local());\n+                            let c = substs.unwrap()[param.index as usize].expect_const();\n                             ty::subst::GenericArg::from(c)\n                         } else if infer_args {\n                             self.astconv.ct_infer(ty, Some(param), self.span).into()\n                         } else {\n                             // We've already errored above about the mismatch.\n                             tcx.const_error(ty).into()\n                         }\n+                        // FIXME(const_generic_defaults)\n                         /*\n                         if !infer_args && has_default {\n                             /*"}, {"sha": "2c13405b72c999996d6ba0c40be0e09f1c767a21", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ef81388e2def7b12d3b527705bf32402c8d7c8a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ef81388e2def7b12d3b527705bf32402c8d7c8a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=8ef81388e2def7b12d3b527705bf32402c8d7c8a", "patch": "@@ -1447,7 +1447,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         if infer_args || !has_default {\n                             return self.fcx.var_for_def(self.span, param);\n                         }\n-                        // FIXME(const_generics:defaults)\n+                        // FIXME(const_generic_defaults)\n                         // No const parameters were provided, we have to infer them.\n                         todo!()\n                     }"}, {"sha": "5e61a168270f5aec9442c7e88936ab5c75baa2b7", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8ef81388e2def7b12d3b527705bf32402c8d7c8a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ef81388e2def7b12d3b527705bf32402c8d7c8a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=8ef81388e2def7b12d3b527705bf32402c8d7c8a", "patch": "@@ -713,10 +713,11 @@ fn check_where_clauses<'tcx, 'fcx>(\n     let generics = tcx.generics_of(def_id);\n \n     let is_our_default = |def: &ty::GenericParamDef| match def.kind {\n-        GenericParamDefKind::Type { has_default, .. } => {\n+        GenericParamDefKind::Type { has_default, .. }\n+        | GenericParamDefKind::Const { has_default } => {\n             has_default && def.index >= generics.parent_count as u32\n         }\n-        _ => unreachable!(),\n+        GenericParamDefKind::Lifetime => unreachable!(),\n     };\n \n     // Check that concrete defaults are well-formed. See test `type-check-defaults.rs`.\n@@ -758,7 +759,7 @@ fn check_where_clauses<'tcx, 'fcx>(\n                 fcx.tcx.mk_param_from_def(param)\n             }\n \n-            GenericParamDefKind::Const { .. } | GenericParamDefKind::Type { .. } => {\n+            GenericParamDefKind::Type { .. } | GenericParamDefKind::Const { .. } => {\n                 // If the param has a default, ...\n                 if is_our_default(param) {\n                     let default_ty = fcx.tcx.type_of(param.def_id);"}, {"sha": "44e905c0b0a2687316ade27cee0422d5eb0ee080", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8ef81388e2def7b12d3b527705bf32402c8d7c8a/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ef81388e2def7b12d3b527705bf32402c8d7c8a/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=8ef81388e2def7b12d3b527705bf32402c8d7c8a", "patch": "@@ -254,10 +254,14 @@ impl Visitor<'tcx> for CollectItemTypesVisitor<'tcx> {\n                     self.tcx.ensure().type_of(def_id);\n                 }\n                 hir::GenericParamKind::Type { .. } => {}\n-                hir::GenericParamKind::Const { .. } => {\n+                hir::GenericParamKind::Const { default, .. } => {\n                     let def_id = self.tcx.hir().local_def_id(param.hir_id);\n                     self.tcx.ensure().type_of(def_id);\n                     // FIXME(const_generics_defaults)\n+                    if let Some(default) = default {\n+                        let def_id = self.tcx.hir().local_def_id(default.hir_id);\n+                        self.tcx.ensure().type_of(def_id);\n+                    }\n                 }\n             }\n         }"}, {"sha": "95905b53585a9fecde17d228575d2d5add0220c7", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8ef81388e2def7b12d3b527705bf32402c8d7c8a/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ef81388e2def7b12d3b527705bf32402c8d7c8a/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=8ef81388e2def7b12d3b527705bf32402c8d7c8a", "patch": "@@ -83,8 +83,7 @@ pub(super) fn opt_const_param_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Option<\n                     return generics\n                         .params\n                         .iter()\n-                        .filter(|param| matches!(param.kind, ty::GenericParamDefKind::Const { ..\n-                        }))\n+                        .filter(|param| matches!(param.kind, ty::GenericParamDefKind::Const { .. }))\n                         .nth(arg_index)\n                         .map(|param| param.def_id);\n                 }"}, {"sha": "00410224de5bb6a73689dc001eb32bee533f17df", "filename": "src/test/ui/const-generics/defaults/const-default.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8ef81388e2def7b12d3b527705bf32402c8d7c8a/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fconst-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ef81388e2def7b12d3b527705bf32402c8d7c8a/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fconst-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fconst-default.rs?ref=8ef81388e2def7b12d3b527705bf32402c8d7c8a", "patch": "@@ -5,10 +5,7 @@\n #![allow(incomplete_features)]\n \n \n-#[derive(Default)]\n-pub struct ConstDefault<const N: usize = 3> {\n-  items: [u32; N]\n-}\n+pub struct ConstDefault<const N: usize = 3> {}\n \n pub fn main() {\n   let s = ConstDefault::default();"}, {"sha": "52803c5b7266a02363f70c36abbe20e528ec7583", "filename": "src/test/ui/const-generics/min_const_generics/default_function_param.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8ef81388e2def7b12d3b527705bf32402c8d7c8a/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fdefault_function_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ef81388e2def7b12d3b527705bf32402c8d7c8a/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fdefault_function_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fdefault_function_param.rs?ref=8ef81388e2def7b12d3b527705bf32402c8d7c8a", "patch": "@@ -1,7 +1,6 @@\n-#![feature(const_generic_defaults)]\n+#![crate_type = \"lib\"]\n+#![feature(const_generics_defaults)]\n #![feature(min_const_generics)]\n+#![allow(incomplete_features)]\n \n-fn foo<const SIZE: usize = 5>() {}\n-//~^ ERROR default values for const generic parameters are experimental\n-\n-fn main() {}\n+fn foo<const SIZE: usize = 5usize>() {}"}, {"sha": "c7148e8ec071a2d2cea6e381e066a48dfbf82b2d", "filename": "src/test/ui/const-generics/min_const_generics/default_function_param.stderr", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8ef81388e2def7b12d3b527705bf32402c8d7c8a/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fdefault_function_param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ef81388e2def7b12d3b527705bf32402c8d7c8a/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fdefault_function_param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fdefault_function_param.stderr?ref=8ef81388e2def7b12d3b527705bf32402c8d7c8a", "patch": "@@ -1,12 +1,9 @@\n-error[E0658]: default values for const generic parameters are experimental\n-  --> $DIR/default_function_param.rs:1:26\n+error[E0282]: type annotations needed\n+  --> $DIR/default_function_param.rs:6:28\n    |\n LL | fn foo<const SIZE: usize = 5>() {}\n-   |                          ^^^\n-   |\n-   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n-   = help: add `#![feature(const_generics_defaults)]` to the crate attributes to enable\n+   |                            ^ cannot infer type for type `{integer}`\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0658`.\n+For more information about this error, try `rustc --explain E0282`."}, {"sha": "14bac473ed9a08a8d1dc537e95cd98797e13c40b", "filename": "src/test/ui/const-generics/min_const_generics/default_trait_param.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ef81388e2def7b12d3b527705bf32402c8d7c8a/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fdefault_trait_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ef81388e2def7b12d3b527705bf32402c8d7c8a/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fdefault_trait_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fdefault_trait_param.rs?ref=8ef81388e2def7b12d3b527705bf32402c8d7c8a", "patch": "@@ -1,2 +1,4 @@\n trait Foo<const KIND: bool = true> {}\n //~^ ERROR default values for const generic parameters are experimental\n+\n+fn main() {}"}, {"sha": "eb66d46936a85ab6be4f5253373af029f3dc1b6a", "filename": "src/test/ui/error-codes/E0128.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ef81388e2def7b12d3b527705bf32402c8d7c8a/src%2Ftest%2Fui%2Ferror-codes%2FE0128.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ef81388e2def7b12d3b527705bf32402c8d7c8a/src%2Ftest%2Fui%2Ferror-codes%2FE0128.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0128.stderr?ref=8ef81388e2def7b12d3b527705bf32402c8d7c8a", "patch": "@@ -1,8 +1,8 @@\n-error[E0128]: type parameters with a default cannot use forward declared identifiers\n+error[E0128]: generic parameters with a default cannot use forward declared identifiers\n   --> $DIR/E0128.rs:1:14\n    |\n LL | struct Foo<T=U, U=()> {\n-   |              ^ defaulted type parameters cannot be forward declared\n+   |              ^ defaulted generic parameters cannot be forward declared\n \n error: aborting due to previous error\n "}, {"sha": "6ba314666e2e5bc37e774145448054065007f200", "filename": "src/test/ui/feature-gate/feature-gate-const_generic_defaults.rs", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e4e5db4e4207e21c38c07640d44005dab022f1b8/src%2Ftest%2Fui%2Ffeature-gate%2Ffeature-gate-const_generic_defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4e5db4e4207e21c38c07640d44005dab022f1b8/src%2Ftest%2Fui%2Ffeature-gate%2Ffeature-gate-const_generic_defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Ffeature-gate-const_generic_defaults.rs?ref=e4e5db4e4207e21c38c07640d44005dab022f1b8", "patch": "@@ -1,5 +0,0 @@\n-#![feature(min_const_generics)]\n-#![crate_type=\"lib\"]\n-\n-struct A<const N: usize = 3>;\n-//~^ ERROR default values for"}, {"sha": "0b7140c0c0f80c7875ba37806d3492a42d998cec", "filename": "src/test/ui/feature-gate/feature-gate-const_generic_defaults.stderr", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e4e5db4e4207e21c38c07640d44005dab022f1b8/src%2Ftest%2Fui%2Ffeature-gate%2Ffeature-gate-const_generic_defaults.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4e5db4e4207e21c38c07640d44005dab022f1b8/src%2Ftest%2Fui%2Ffeature-gate%2Ffeature-gate-const_generic_defaults.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Ffeature-gate-const_generic_defaults.stderr?ref=e4e5db4e4207e21c38c07640d44005dab022f1b8", "patch": "@@ -1,10 +0,0 @@\n-error: default values for const generic parameters are unstable\n-  --> $DIR/feature-gate-const_generic_defaults.rs:4:27\n-   |\n-LL | struct A<const N: usize = 3>;\n-   |                           ^\n-   |\n-   = note: to enable them use #![feature(const_generic_defaults)]\n-\n-error: aborting due to previous error\n-"}, {"sha": "33dd44297220846a058e421487e13ea67a67ede5", "filename": "src/test/ui/generics/generic-non-trailing-defaults.stderr", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8ef81388e2def7b12d3b527705bf32402c8d7c8a/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-non-trailing-defaults.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ef81388e2def7b12d3b527705bf32402c8d7c8a/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-non-trailing-defaults.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-non-trailing-defaults.stderr?ref=8ef81388e2def7b12d3b527705bf32402c8d7c8a", "patch": "@@ -10,12 +10,5 @@ error: type parameters with a default must be trailing\n LL | struct Foo<A, B = Vec<C>, C>(A, B, C);\n    |               ^\n \n-error[E0128]: type parameters with a default cannot use forward declared identifiers\n-  --> $DIR/generic-non-trailing-defaults.rs:6:23\n-   |\n-LL | struct Foo<A, B = Vec<C>, C>(A, B, C);\n-   |                       ^ defaulted type parameters cannot be forward declared\n-\n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0128`."}, {"sha": "fa661c274ebcaefba3d31224c8e7c992058f0424", "filename": "src/test/ui/generics/generic-type-params-forward-mention.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ef81388e2def7b12d3b527705bf32402c8d7c8a/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-type-params-forward-mention.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ef81388e2def7b12d3b527705bf32402c8d7c8a/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-type-params-forward-mention.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fgeneric-type-params-forward-mention.stderr?ref=8ef81388e2def7b12d3b527705bf32402c8d7c8a", "patch": "@@ -1,8 +1,8 @@\n-error[E0128]: type parameters with a default cannot use forward declared identifiers\n+error[E0128]: generic parameters with a default cannot use forward declared identifiers\n   --> $DIR/generic-type-params-forward-mention.rs:2:23\n    |\n LL | struct Foo<T = Option<U>, U = bool>(T, U);\n-   |                       ^ defaulted type parameters cannot be forward declared\n+   |                       ^ defaulted generic parameters cannot be forward declared\n \n error: aborting due to previous error\n "}, {"sha": "a7dc64708d85615be2746ba6d32916aaa96293b6", "filename": "src/test/ui/issues/issue-18183.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ef81388e2def7b12d3b527705bf32402c8d7c8a/src%2Ftest%2Fui%2Fissues%2Fissue-18183.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ef81388e2def7b12d3b527705bf32402c8d7c8a/src%2Ftest%2Fui%2Fissues%2Fissue-18183.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18183.stderr?ref=8ef81388e2def7b12d3b527705bf32402c8d7c8a", "patch": "@@ -1,8 +1,8 @@\n-error[E0128]: type parameters with a default cannot use forward declared identifiers\n+error[E0128]: generic parameters with a default cannot use forward declared identifiers\n   --> $DIR/issue-18183.rs:1:20\n    |\n LL | pub struct Foo<Bar=Bar>(Bar);\n-   |                    ^^^ defaulted type parameters cannot be forward declared\n+   |                    ^^^ defaulted generic parameters cannot be forward declared\n \n error: aborting due to previous error\n "}, {"sha": "fd1bbb9c5673d2df5eb580b786cbf6290e3d9585", "filename": "src/test/ui/issues/issue-26812.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ef81388e2def7b12d3b527705bf32402c8d7c8a/src%2Ftest%2Fui%2Fissues%2Fissue-26812.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ef81388e2def7b12d3b527705bf32402c8d7c8a/src%2Ftest%2Fui%2Fissues%2Fissue-26812.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26812.stderr?ref=8ef81388e2def7b12d3b527705bf32402c8d7c8a", "patch": "@@ -1,8 +1,8 @@\n-error[E0128]: type parameters with a default cannot use forward declared identifiers\n+error[E0128]: generic parameters with a default cannot use forward declared identifiers\n   --> $DIR/issue-26812.rs:3:10\n    |\n LL | fn avg<T=T::Item>(_: T) {}\n-   |          ^^^^^^^ defaulted type parameters cannot be forward declared\n+   |          ^^^^^^^ defaulted generic parameters cannot be forward declared\n \n error: aborting due to previous error\n "}, {"sha": "b7c040c7a850be8bb646d88caca43a3f29b61e3b", "filename": "src/test/ui/panic-handler/weak-lang-item.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ef81388e2def7b12d3b527705bf32402c8d7c8a/src%2Ftest%2Fui%2Fpanic-handler%2Fweak-lang-item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ef81388e2def7b12d3b527705bf32402c8d7c8a/src%2Ftest%2Fui%2Fpanic-handler%2Fweak-lang-item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-handler%2Fweak-lang-item.stderr?ref=8ef81388e2def7b12d3b527705bf32402c8d7c8a", "patch": "@@ -10,10 +10,10 @@ help: you can use `as` to change the binding name of the import\n LL | extern crate core as other_core;\n    |\n \n-error: language item required, but not found: `eh_personality`\n-\n error: `#[panic_handler]` function required, but not found\n \n+error: language item required, but not found: `eh_personality`\n+\n error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0259`."}]}