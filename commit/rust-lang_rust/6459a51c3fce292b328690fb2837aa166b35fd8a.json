{"sha": "6459a51c3fce292b328690fb2837aa166b35fd8a", "node_id": "C_kwDOAAsO6NoAKDY0NTlhNTFjM2ZjZTI5MmIzMjg2OTBmYjI4MzdhYTE2NmIzNWZkOGE", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev+love@gmail.com", "date": "2023-01-08T08:01:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-08T08:01:49Z"}, "message": "Rollup merge of #106580 - Ezrashaw:remove-e0313, r=compiler-errors\n\nremove unreachable error code `E0313`\n\nFixes #103742\nMakes #103433 redundant\n\nImplements removal of `E0313`. I agree with the linked issue that this error code is unreachable but if someone could confirm that would be great, are crater runs done for this sort of thing?\n\nAlso removed a redundant `// ignore-tidy-filelength` that I found while reading code.\n\ncc ``@GuillaumeGomez`` #61137", "tree": {"sha": "ecf70308b10e7ecc9b82d5b692ce08a52836f1f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ecf70308b10e7ecc9b82d5b692ce08a52836f1f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6459a51c3fce292b328690fb2837aa166b35fd8a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjunhtCRBK7hj4Ov3rIwAApkkIAH3P6sXntYaB5tLje7riqXSu\nxsyjjbDAjmWKxJh0kPHtRLK+1Xa6oZF9iPgKT3C6T+n3jRGcO4cQsxPlk9z0ZLpi\n3+dNo2ScD/mHUSQtgFg7kh3wzGpP+vycLER7vr35VORxxchTli7j1QdEefcayFbt\nYsFB3PKJA7LLCZ/QuXem5kbb+Vn0t7YLhSnMuD74P3w66NNJMD3S3QW6a0iSKLxY\nN+n9tplL208+pffK5bti2Cjezh6elYtaH/BQ/qKxejAf/oMhzrc5BnuXygS0+9Wi\n9WKzCw2DahClEASqUl4mhBI1J+1ckZZNn2iUrmethJzcgPs4+4icClF6MlwYBNE=\n=tJbs\n-----END PGP SIGNATURE-----\n", "payload": "tree ecf70308b10e7ecc9b82d5b692ce08a52836f1f5\nparent 14ce60333d918f7ed86174379791da681cbf408c\nparent 93c0d8d5d59e096dc2ed545d1eba09f16f0b5874\nauthor Yuki Okushi <huyuumi.dev+love@gmail.com> 1673164909 +0900\ncommitter GitHub <noreply@github.com> 1673164909 +0900\n\nRollup merge of #106580 - Ezrashaw:remove-e0313, r=compiler-errors\n\nremove unreachable error code `E0313`\n\nFixes #103742\nMakes #103433 redundant\n\nImplements removal of `E0313`. I agree with the linked issue that this error code is unreachable but if someone could confirm that would be great, are crater runs done for this sort of thing?\n\nAlso removed a redundant `// ignore-tidy-filelength` that I found while reading code.\n\ncc ``@GuillaumeGomez`` #61137\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6459a51c3fce292b328690fb2837aa166b35fd8a", "html_url": "https://github.com/rust-lang/rust/commit/6459a51c3fce292b328690fb2837aa166b35fd8a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6459a51c3fce292b328690fb2837aa166b35fd8a/comments", "author": null, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14ce60333d918f7ed86174379791da681cbf408c", "url": "https://api.github.com/repos/rust-lang/rust/commits/14ce60333d918f7ed86174379791da681cbf408c", "html_url": "https://github.com/rust-lang/rust/commit/14ce60333d918f7ed86174379791da681cbf408c"}, {"sha": "93c0d8d5d59e096dc2ed545d1eba09f16f0b5874", "url": "https://api.github.com/repos/rust-lang/rust/commits/93c0d8d5d59e096dc2ed545d1eba09f16f0b5874", "html_url": "https://github.com/rust-lang/rust/commit/93c0d8d5d59e096dc2ed545d1eba09f16f0b5874"}], "stats": {"total": 49, "additions": 3, "deletions": 46}, "files": [{"sha": "76d5da19399ed9bb58776ed01b066ad90e3496d2", "filename": "compiler/rustc_error_codes/src/error_codes.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6459a51c3fce292b328690fb2837aa166b35fd8a/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6459a51c3fce292b328690fb2837aa166b35fd8a/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs?ref=6459a51c3fce292b328690fb2837aa166b35fd8a", "patch": "@@ -579,8 +579,7 @@ E0791: include_str!(\"./error_codes/E0791.md\"),\n //  E0300, // unexpanded macro\n //  E0304, // expected signed integer constant\n //  E0305, // expected constant\n-    E0313, // lifetime of borrowed pointer outlives lifetime of captured\n-           // variable\n+//  E0313, // removed: found unreachable\n //  E0314, // closure outlives stack frame\n //  E0315, // cannot invoke closure outside of its lifetime\n //  E0319, // trait impls for defaulted traits allowed just for structs/enums"}, {"sha": "b02e7d73c51f863e33390d59ef320b1f24e07302", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6459a51c3fce292b328690fb2837aa166b35fd8a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6459a51c3fce292b328690fb2837aa166b35fd8a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=6459a51c3fce292b328690fb2837aa166b35fd8a", "patch": "@@ -1,4 +1,3 @@\n-// ignore-tidy-filelength\n //! Error Reporting Code for the inference engine\n //!\n //! Because of the way inference, and in particular region inference,"}, {"sha": "7bb79d7bda8ddf5e2954803da34046a212a45a91", "filename": "compiler/rustc_infer/src/infer/error_reporting/note.rs", "status": "modified", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/6459a51c3fce292b328690fb2837aa166b35fd8a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6459a51c3fce292b328690fb2837aa166b35fd8a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs?ref=6459a51c3fce292b328690fb2837aa166b35fd8a", "patch": "@@ -25,16 +25,6 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n             infer::Reborrow(span) => {\n                 RegionOriginNote::Plain { span, msg: fluent::infer_reborrow }.add_to_diagnostic(err)\n             }\n-            infer::ReborrowUpvar(span, ref upvar_id) => {\n-                let var_name = self.tcx.hir().name(upvar_id.var_path.hir_id);\n-                RegionOriginNote::WithName {\n-                    span,\n-                    msg: fluent::infer_reborrow,\n-                    name: &var_name.to_string(),\n-                    continues: false,\n-                }\n-                .add_to_diagnostic(err);\n-            }\n             infer::RelateObjectBound(span) => {\n                 RegionOriginNote::Plain { span, msg: fluent::infer_relate_object_bound }\n                     .add_to_diagnostic(err);\n@@ -162,33 +152,6 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                 );\n                 err\n             }\n-            infer::ReborrowUpvar(span, ref upvar_id) => {\n-                let var_name = self.tcx.hir().name(upvar_id.var_path.hir_id);\n-                let mut err = struct_span_err!(\n-                    self.tcx.sess,\n-                    span,\n-                    E0313,\n-                    \"lifetime of borrowed pointer outlives lifetime of captured variable `{}`...\",\n-                    var_name\n-                );\n-                note_and_explain_region(\n-                    self.tcx,\n-                    &mut err,\n-                    \"...the borrowed pointer is valid for \",\n-                    sub,\n-                    \"...\",\n-                    None,\n-                );\n-                note_and_explain_region(\n-                    self.tcx,\n-                    &mut err,\n-                    &format!(\"...but `{}` is only valid for \", var_name),\n-                    sup,\n-                    \"\",\n-                    None,\n-                );\n-                err\n-            }\n             infer::RelateObjectBound(span) => {\n                 let mut err = struct_span_err!(\n                     self.tcx.sess,"}, {"sha": "bc8bbd4be6ae19105f2bf84d2e5defd17d0c96ef", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6459a51c3fce292b328690fb2837aa166b35fd8a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6459a51c3fce292b328690fb2837aa166b35fd8a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=6459a51c3fce292b328690fb2837aa166b35fd8a", "patch": "@@ -409,9 +409,6 @@ pub enum SubregionOrigin<'tcx> {\n     /// Creating a pointer `b` to contents of another reference\n     Reborrow(Span),\n \n-    /// Creating a pointer `b` to contents of an upvar\n-    ReborrowUpvar(Span, ty::UpvarId),\n-\n     /// Data with type `Ty<'tcx>` was borrowed\n     DataBorrowed(Ty<'tcx>, Span),\n \n@@ -1954,7 +1951,6 @@ impl<'tcx> SubregionOrigin<'tcx> {\n             RelateParamBound(a, ..) => a,\n             RelateRegionParamBound(a) => a,\n             Reborrow(a) => a,\n-            ReborrowUpvar(a, _) => a,\n             DataBorrowed(_, a) => a,\n             ReferenceOutlivesReferent(_, a) => a,\n             CompareImplItemObligation { span, .. } => span,"}, {"sha": "8d70335a9e7b9ef0a2709cb8465c9065e9617a50", "filename": "src/tools/tidy/src/error_codes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6459a51c3fce292b328690fb2837aa166b35fd8a/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6459a51c3fce292b328690fb2837aa166b35fd8a/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes.rs?ref=6459a51c3fce292b328690fb2837aa166b35fd8a", "patch": "@@ -31,8 +31,8 @@ const IGNORE_DOCTEST_CHECK: &[&str] = &[\"E0464\", \"E0570\", \"E0601\", \"E0602\"];\n \n // Error codes that don't yet have a UI test. This list will eventually be removed.\n const IGNORE_UI_TEST_CHECK: &[&str] = &[\n-    \"E0313\", \"E0461\", \"E0465\", \"E0476\", \"E0490\", \"E0514\", \"E0523\", \"E0554\", \"E0640\", \"E0717\",\n-    \"E0729\", \"E0789\",\n+    \"E0461\", \"E0465\", \"E0476\", \"E0490\", \"E0514\", \"E0523\", \"E0554\", \"E0640\", \"E0717\", \"E0729\",\n+    \"E0789\",\n ];\n \n macro_rules! verbose_print {"}]}