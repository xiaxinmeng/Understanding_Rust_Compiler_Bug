{"sha": "b846b42c8dcf052eabda71d416a986a7891093f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4NDZiNDJjOGRjZjA1MmVhYmRhNzFkNDE2YTk4NmE3ODkxMDkzZjc=", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-01-12T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-02-05T22:30:38Z"}, "message": "Selectively disable sanitizer instrumentation\n\nAdd `no_sanitize` attribute that allows to opt out from sanitizer\ninstrumentation in an annotated function.", "tree": {"sha": "fd4f1b3e820fe93dc523e21a72482cca20ebb7e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd4f1b3e820fe93dc523e21a72482cca20ebb7e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b846b42c8dcf052eabda71d416a986a7891093f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b846b42c8dcf052eabda71d416a986a7891093f7", "html_url": "https://github.com/rust-lang/rust/commit/b846b42c8dcf052eabda71d416a986a7891093f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b846b42c8dcf052eabda71d416a986a7891093f7/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eda1a7adfcf6de70afa4ca0a6f709ed0e507516a", "url": "https://api.github.com/repos/rust-lang/rust/commits/eda1a7adfcf6de70afa4ca0a6f709ed0e507516a", "html_url": "https://github.com/rust-lang/rust/commit/eda1a7adfcf6de70afa4ca0a6f709ed0e507516a"}], "stats": {"total": 272, "additions": 255, "deletions": 17}, "files": [{"sha": "28c683934d4ed10d0454f039418e7c2d2ed1b603", "filename": "src/doc/unstable-book/src/language-features/no-sanitize.md", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/b846b42c8dcf052eabda71d416a986a7891093f7/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fno-sanitize.md", "raw_url": "https://github.com/rust-lang/rust/raw/b846b42c8dcf052eabda71d416a986a7891093f7/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fno-sanitize.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fno-sanitize.md?ref=b846b42c8dcf052eabda71d416a986a7891093f7", "patch": "@@ -0,0 +1,29 @@\n+# `no_sanitize`\n+\n+The tracking issue for this feature is: [#39699]\n+\n+[#39699]: https://github.com/rust-lang/rust/issues/39699\n+\n+------------------------\n+\n+The `no_sanitize` attribute can be used to selectively disable sanitizer\n+instrumentation in an annotated function. This might be useful to: avoid\n+instrumentation overhead in a performance critical function, or avoid\n+instrumenting code that contains constructs unsupported by given sanitizer.\n+\n+The precise effect of this annotation depends on particular sanitizer in use.\n+For example, with `no_sanitize(thread)`, the thread sanitizer will no longer\n+instrument non-atomic store / load operations, but it will instrument atomic\n+operations to avoid reporting false positives and provide meaning full stack\n+traces.\n+\n+## Examples\n+\n+``` rust\n+#![feature(no_sanitize)]\n+\n+#[no_sanitize(address)]\n+fn foo() {\n+  // ...\n+}\n+```"}, {"sha": "5eef3fb3c57656ac10742f9265d6835fa3a26bb1", "filename": "src/librustc/middle/codegen_fn_attrs.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b846b42c8dcf052eabda71d416a986a7891093f7/src%2Flibrustc%2Fmiddle%2Fcodegen_fn_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b846b42c8dcf052eabda71d416a986a7891093f7/src%2Flibrustc%2Fmiddle%2Fcodegen_fn_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcodegen_fn_attrs.rs?ref=b846b42c8dcf052eabda71d416a986a7891093f7", "patch": "@@ -72,6 +72,12 @@ bitflags! {\n         const FFI_RETURNS_TWICE         = 1 << 10;\n         /// `#[track_caller]`: allow access to the caller location\n         const TRACK_CALLER              = 1 << 11;\n+        /// `#[no_sanitize(address)]`: disables address sanitizer instrumentation\n+        const NO_SANITIZE_ADDRESS = 1 << 12;\n+        /// `#[no_sanitize(memory)]`: disables memory sanitizer instrumentation\n+        const NO_SANITIZE_MEMORY  = 1 << 13;\n+        /// `#[no_sanitize(thread)]`: disables thread sanitizer instrumentation\n+        const NO_SANITIZE_THREAD  = 1 << 14;\n     }\n }\n "}, {"sha": "3e23df09c66846e3f1476b49978a077244ffade9", "filename": "src/librustc_codegen_llvm/attributes.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b846b42c8dcf052eabda71d416a986a7891093f7/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b846b42c8dcf052eabda71d416a986a7891093f7/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fattributes.rs?ref=b846b42c8dcf052eabda71d416a986a7891093f7", "patch": "@@ -288,6 +288,26 @@ pub fn from_fn_attrs(\n     if codegen_fn_attrs.flags.contains(CodegenFnAttrFlags::ALLOCATOR) {\n         Attribute::NoAlias.apply_llfn(llvm::AttributePlace::ReturnValue, llfn);\n     }\n+    if let Some(ref sanitizer) = cx.tcx.sess.opts.debugging_opts.sanitizer {\n+        match *sanitizer {\n+            Sanitizer::Address => {\n+                if !codegen_fn_attrs.flags.contains(CodegenFnAttrFlags::NO_SANITIZE_ADDRESS) {\n+                    llvm::Attribute::SanitizeAddress.apply_llfn(Function, llfn);\n+                }\n+            }\n+            Sanitizer::Memory => {\n+                if !codegen_fn_attrs.flags.contains(CodegenFnAttrFlags::NO_SANITIZE_MEMORY) {\n+                    llvm::Attribute::SanitizeMemory.apply_llfn(Function, llfn);\n+                }\n+            }\n+            Sanitizer::Thread => {\n+                if !codegen_fn_attrs.flags.contains(CodegenFnAttrFlags::NO_SANITIZE_THREAD) {\n+                    llvm::Attribute::SanitizeThread.apply_llfn(Function, llfn);\n+                }\n+            }\n+            Sanitizer::Leak => {}\n+        }\n+    }\n \n     unwind(\n         llfn,"}, {"sha": "691f32dd85a05b8faee5ebc835fa9960107e7ee7", "filename": "src/librustc_codegen_llvm/declare.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b846b42c8dcf052eabda71d416a986a7891093f7/src%2Flibrustc_codegen_llvm%2Fdeclare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b846b42c8dcf052eabda71d416a986a7891093f7/src%2Flibrustc_codegen_llvm%2Fdeclare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdeclare.rs?ref=b846b42c8dcf052eabda71d416a986a7891093f7", "patch": "@@ -19,7 +19,6 @@ use crate::llvm::AttributePlace::Function;\n use crate::type_::Type;\n use crate::value::Value;\n use log::debug;\n-use rustc::session::config::Sanitizer;\n use rustc::ty::Ty;\n use rustc_codegen_ssa::traits::*;\n use rustc_data_structures::small_c_str::SmallCStr;\n@@ -47,21 +46,6 @@ fn declare_raw_fn(\n         llvm::Attribute::NoRedZone.apply_llfn(Function, llfn);\n     }\n \n-    if let Some(ref sanitizer) = cx.tcx.sess.opts.debugging_opts.sanitizer {\n-        match *sanitizer {\n-            Sanitizer::Address => {\n-                llvm::Attribute::SanitizeAddress.apply_llfn(Function, llfn);\n-            }\n-            Sanitizer::Memory => {\n-                llvm::Attribute::SanitizeMemory.apply_llfn(Function, llfn);\n-            }\n-            Sanitizer::Thread => {\n-                llvm::Attribute::SanitizeThread.apply_llfn(Function, llfn);\n-            }\n-            _ => {}\n-        }\n-    }\n-\n     attributes::default_optimisation_attrs(cx.tcx.sess, llfn);\n     attributes::non_lazy_bind(cx.sess(), llfn);\n     llfn"}, {"sha": "d7fd15a8a7b5fd681bd7928f62c0e2c6e382d525", "filename": "src/librustc_feature/active.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b846b42c8dcf052eabda71d416a986a7891093f7/src%2Flibrustc_feature%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b846b42c8dcf052eabda71d416a986a7891093f7/src%2Flibrustc_feature%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Factive.rs?ref=b846b42c8dcf052eabda71d416a986a7891093f7", "patch": "@@ -541,6 +541,9 @@ declare_features! (\n     /// Allows `T: ?const Trait` syntax in bounds.\n     (active, const_trait_bound_opt_out, \"1.42.0\", Some(67794), None),\n \n+    /// Allows the use of `no_sanitize` attribute.\n+    (active, no_sanitize, \"1.42.0\", Some(39699), None),\n+\n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates\n     // -------------------------------------------------------------------------"}, {"sha": "e2e061c185c03f58adfa29f42f02d94b0da9ac1b", "filename": "src/librustc_feature/builtin_attrs.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b846b42c8dcf052eabda71d416a986a7891093f7/src%2Flibrustc_feature%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b846b42c8dcf052eabda71d416a986a7891093f7/src%2Flibrustc_feature%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Fbuiltin_attrs.rs?ref=b846b42c8dcf052eabda71d416a986a7891093f7", "patch": "@@ -261,6 +261,11 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     ungated!(cold, Whitelisted, template!(Word)),\n     ungated!(no_builtins, Whitelisted, template!(Word)),\n     ungated!(target_feature, Whitelisted, template!(List: r#\"enable = \"name\"\"#)),\n+    gated!(\n+        no_sanitize, Whitelisted,\n+        template!(List: \"address, memory, thread\"),\n+        experimental!(no_sanitize)\n+    ),\n \n     // FIXME: #14408 whitelist docs since rustdoc looks at them\n     ungated!(doc, Whitelisted, template!(List: \"hidden|inline|...\", NameValueStr: \"string\")),"}, {"sha": "b6802505df73f0b255f27c3b5c45e630e8f06baa", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b846b42c8dcf052eabda71d416a986a7891093f7/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b846b42c8dcf052eabda71d416a986a7891093f7/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=b846b42c8dcf052eabda71d416a986a7891093f7", "patch": "@@ -8,6 +8,7 @@ use rustc_index::vec::{Idx, IndexVec};\n use rustc::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc::mir::visit::*;\n use rustc::mir::*;\n+use rustc::session::config::Sanitizer;\n use rustc::ty::subst::{InternalSubsts, Subst, SubstsRef};\n use rustc::ty::{self, Instance, InstanceDef, ParamEnv, Ty, TyCtxt, TypeFoldable};\n \n@@ -228,6 +229,28 @@ impl Inliner<'tcx> {\n             return false;\n         }\n \n+        // Avoid inlining functions marked as no_sanitize if sanitizer is enabled,\n+        // since instrumentation might be enabled and performed on the caller.\n+        match self.tcx.sess.opts.debugging_opts.sanitizer {\n+            Some(Sanitizer::Address) => {\n+                if codegen_fn_attrs.flags.contains(CodegenFnAttrFlags::NO_SANITIZE_ADDRESS) {\n+                    return false;\n+                }\n+            }\n+            Some(Sanitizer::Memory) => {\n+                if codegen_fn_attrs.flags.contains(CodegenFnAttrFlags::NO_SANITIZE_MEMORY) {\n+                    return false;\n+                }\n+            }\n+            Some(Sanitizer::Thread) => {\n+                if codegen_fn_attrs.flags.contains(CodegenFnAttrFlags::NO_SANITIZE_THREAD) {\n+                    return false;\n+                }\n+            }\n+            Some(Sanitizer::Leak) => {}\n+            None => {}\n+        }\n+\n         let hinted = match codegen_fn_attrs.inline {\n             // Just treat inline(always) as a hint for now,\n             // there are cases that prevent inlining that we"}, {"sha": "a61ab5b5e17559f20f9561a13f2d1ccc29d47d57", "filename": "src/librustc_session/lint/builtin.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b846b42c8dcf052eabda71d416a986a7891093f7/src%2Flibrustc_session%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b846b42c8dcf052eabda71d416a986a7891093f7/src%2Flibrustc_session%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Flint%2Fbuiltin.rs?ref=b846b42c8dcf052eabda71d416a986a7891093f7", "patch": "@@ -474,6 +474,12 @@ declare_lint! {\n     };\n }\n \n+declare_lint! {\n+    pub INLINE_NO_SANITIZE,\n+    Warn,\n+    \"detects incompatible use of `#[inline(always)]` and `#[no_sanitize(...)]`\",\n+}\n+\n declare_lint_pass! {\n     /// Does nothing as a lint pass, but registers some `Lint`s\n     /// that are used by other parts of the compiler.\n@@ -537,5 +543,6 @@ declare_lint_pass! {\n         MUTABLE_BORROW_RESERVATION_CONFLICT,\n         INDIRECT_STRUCTURAL_MATCH,\n         SOFT_UNSTABLE,\n+        INLINE_NO_SANITIZE,\n     ]\n }"}, {"sha": "31100cc573df17cd342ffd0339c6ee282f05cbdc", "filename": "src/librustc_span/symbol.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b846b42c8dcf052eabda71d416a986a7891093f7/src%2Flibrustc_span%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b846b42c8dcf052eabda71d416a986a7891093f7/src%2Flibrustc_span%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsymbol.rs?ref=b846b42c8dcf052eabda71d416a986a7891093f7", "patch": "@@ -120,6 +120,7 @@ symbols! {\n         abi_vectorcall,\n         abi_x86_interrupt,\n         aborts,\n+        address,\n         add_with_overflow,\n         advanced_slice_patterns,\n         adx_target_feature,\n@@ -445,6 +446,7 @@ symbols! {\n         mem_uninitialized,\n         mem_zeroed,\n         member_constraints,\n+        memory,\n         message,\n         meta,\n         min_align_of,\n@@ -487,6 +489,7 @@ symbols! {\n         None,\n         non_exhaustive,\n         non_modrs_mods,\n+        no_sanitize,\n         no_stack_check,\n         no_start,\n         no_std,\n@@ -721,6 +724,7 @@ symbols! {\n         test_removed_feature,\n         test_runner,\n         then_with,\n+        thread,\n         thread_local,\n         tool_attributes,\n         tool_lints,"}, {"sha": "79cd769569e85795d803540f86d0a1a144d83ae8", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 38, "deletions": 1, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/b846b42c8dcf052eabda71d416a986a7891093f7/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b846b42c8dcf052eabda71d416a986a7891093f7/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=b846b42c8dcf052eabda71d416a986a7891093f7", "patch": "@@ -2743,6 +2743,7 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n \n     let mut inline_span = None;\n     let mut link_ordinal_span = None;\n+    let mut no_sanitize_span = None;\n     for attr in attrs.iter() {\n         if attr.check_name(sym::cold) {\n             codegen_fn_attrs.flags |= CodegenFnAttrFlags::COLD;\n@@ -2832,6 +2833,24 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n             if let ordinal @ Some(_) = check_link_ordinal(tcx, attr) {\n                 codegen_fn_attrs.link_ordinal = ordinal;\n             }\n+        } else if attr.check_name(sym::no_sanitize) {\n+            no_sanitize_span = Some(attr.span);\n+            if let Some(list) = attr.meta_item_list() {\n+                for item in list.iter() {\n+                    if item.check_name(sym::address) {\n+                        codegen_fn_attrs.flags |= CodegenFnAttrFlags::NO_SANITIZE_ADDRESS;\n+                    } else if item.check_name(sym::memory) {\n+                        codegen_fn_attrs.flags |= CodegenFnAttrFlags::NO_SANITIZE_MEMORY;\n+                    } else if item.check_name(sym::thread) {\n+                        codegen_fn_attrs.flags |= CodegenFnAttrFlags::NO_SANITIZE_THREAD;\n+                    } else {\n+                        tcx.sess\n+                            .struct_span_err(item.span(), \"invalid argument for `no_sanitize`\")\n+                            .note(\"expected one of: `address`, `memory` or `thread`\")\n+                            .emit();\n+                    }\n+                }\n+            }\n         }\n     }\n \n@@ -2911,7 +2930,6 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n     // purpose functions as they wouldn't have the right target features\n     // enabled. For that reason we also forbid #[inline(always)] as it can't be\n     // respected.\n-\n     if codegen_fn_attrs.target_features.len() > 0 {\n         if codegen_fn_attrs.inline == InlineAttr::Always {\n             if let Some(span) = inline_span {\n@@ -2924,6 +2942,25 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n         }\n     }\n \n+    let no_sanitize_flags = CodegenFnAttrFlags::NO_SANITIZE_ADDRESS\n+        | CodegenFnAttrFlags::NO_SANITIZE_MEMORY\n+        | CodegenFnAttrFlags::NO_SANITIZE_THREAD;\n+    if codegen_fn_attrs.flags.intersects(no_sanitize_flags) {\n+        if codegen_fn_attrs.inline == InlineAttr::Always {\n+            if let (Some(no_sanitize_span), Some(inline_span)) = (no_sanitize_span, inline_span) {\n+                let hir_id = tcx.hir().as_local_hir_id(id).unwrap();\n+                tcx.struct_span_lint_hir(\n+                    lint::builtin::INLINE_NO_SANITIZE,\n+                    hir_id,\n+                    no_sanitize_span,\n+                    \"`no_sanitize` will have no effect after inlining\",\n+                )\n+                .span_note(inline_span, \"inlining requested here\")\n+                .emit();\n+            }\n+        }\n+    }\n+\n     // Weak lang items have the same semantics as \"std internal\" symbols in the\n     // sense that they're preserved through all our LTO passes and only\n     // strippable by the linker."}, {"sha": "d96e76618d32501e33f91ac03276b177563ddf8c", "filename": "src/test/codegen/sanitizer-no-sanitize-inlining.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b846b42c8dcf052eabda71d416a986a7891093f7/src%2Ftest%2Fcodegen%2Fsanitizer-no-sanitize-inlining.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b846b42c8dcf052eabda71d416a986a7891093f7/src%2Ftest%2Fcodegen%2Fsanitizer-no-sanitize-inlining.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsanitizer-no-sanitize-inlining.rs?ref=b846b42c8dcf052eabda71d416a986a7891093f7", "patch": "@@ -0,0 +1,32 @@\n+// Verifies that no_sanitize attribute prevents inlining when\n+// given sanitizer is enabled, but has no effect on inlining otherwise.\n+//\n+// needs-sanitizer-support\n+// only-x86_64\n+//\n+// revisions: ASAN LSAN\n+//\n+//[ASAN] compile-flags: -Zsanitizer=address -C opt-level=3 -Z mir-opt-level=3\n+//[LSAN] compile-flags: -Zsanitizer=leak    -C opt-level=3 -Z mir-opt-level=3\n+\n+#![crate_type=\"lib\"]\n+#![feature(no_sanitize)]\n+\n+// ASAN-LABEL: define void @test\n+// ASAN:         tail call fastcc void @random_inline\n+// ASAN:       }\n+//\n+// LSAN-LABEL: define void @test\n+// LSAN-NO:      call\n+// LSAN:       }\n+#[no_mangle]\n+pub fn test(n: &mut u32) {\n+    random_inline(n);\n+}\n+\n+#[no_sanitize(address)]\n+#[inline]\n+#[no_mangle]\n+pub fn random_inline(n: &mut u32) {\n+    *n = 42;\n+}"}, {"sha": "dfceb28c8dd107eaaa01eb5c87021c5241c9fe85", "filename": "src/test/codegen/sanitizer-no-sanitize.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/b846b42c8dcf052eabda71d416a986a7891093f7/src%2Ftest%2Fcodegen%2Fsanitizer-no-sanitize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b846b42c8dcf052eabda71d416a986a7891093f7/src%2Ftest%2Fcodegen%2Fsanitizer-no-sanitize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsanitizer-no-sanitize.rs?ref=b846b42c8dcf052eabda71d416a986a7891093f7", "patch": "@@ -0,0 +1,29 @@\n+// Verifies that no_sanitze attribute can be used to\n+// selectively disable sanitizer instrumentation.\n+//\n+// needs-sanitizer-support\n+// compile-flags: -Zsanitizer=address\n+\n+#![crate_type=\"lib\"]\n+#![feature(no_sanitize)]\n+\n+// CHECK-LABEL: ; sanitizer_no_sanitize::unsanitized\n+// CHECK-NEXT:  ; Function Attrs:\n+// CHECK-NOT:   sanitize_address\n+// CHECK:       start:\n+// CHECK-NOT:   call void @__asan_report_load\n+// CHECK:       }\n+#[no_sanitize(address)]\n+pub fn unsanitized(b: &mut u8) -> u8 {\n+    *b\n+}\n+\n+// CHECK-LABEL: ; sanitizer_no_sanitize::sanitized\n+// CHECK-NEXT:  ; Function Attrs:\n+// CHECK:       sanitize_address\n+// CHECK:       start:\n+// CHECK:       call void @__asan_report_load\n+// CHECK:       }\n+pub fn sanitized(b: &mut u8) -> u8 {\n+    *b\n+}"}, {"sha": "66a9263e13a53168bf032ff971cad46deeab3343", "filename": "src/test/ui/feature-gates/feature-gate-no_sanitize.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b846b42c8dcf052eabda71d416a986a7891093f7/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-no_sanitize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b846b42c8dcf052eabda71d416a986a7891093f7/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-no_sanitize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-no_sanitize.rs?ref=b846b42c8dcf052eabda71d416a986a7891093f7", "patch": "@@ -0,0 +1,4 @@\n+#[no_sanitize(address)]\n+//~^ the `#[no_sanitize]` attribute is an experimental feature\n+fn main() {\n+}"}, {"sha": "7359cf03652bcdb93cb4f08fc650d9dadf2107c0", "filename": "src/test/ui/feature-gates/feature-gate-no_sanitize.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b846b42c8dcf052eabda71d416a986a7891093f7/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-no_sanitize.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b846b42c8dcf052eabda71d416a986a7891093f7/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-no_sanitize.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-no_sanitize.stderr?ref=b846b42c8dcf052eabda71d416a986a7891093f7", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: the `#[no_sanitize]` attribute is an experimental feature\n+  --> $DIR/feature-gate-no_sanitize.rs:1:1\n+   |\n+LL | #[no_sanitize(address)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/39699\n+   = help: add `#![feature(no_sanitize)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "b52e3cc83fab2715aa43bce8a7e6189d6d192af5", "filename": "src/test/ui/invalid/invalid-no-sanitize.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b846b42c8dcf052eabda71d416a986a7891093f7/src%2Ftest%2Fui%2Finvalid%2Finvalid-no-sanitize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b846b42c8dcf052eabda71d416a986a7891093f7/src%2Ftest%2Fui%2Finvalid%2Finvalid-no-sanitize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid%2Finvalid-no-sanitize.rs?ref=b846b42c8dcf052eabda71d416a986a7891093f7", "patch": "@@ -0,0 +1,5 @@\n+#![feature(no_sanitize)]\n+\n+#[no_sanitize(brontosaurus)] //~ ERROR invalid argument\n+fn main() {\n+}"}, {"sha": "e9983e5fbd24d71da68f80504f06bb1adfff9634", "filename": "src/test/ui/invalid/invalid-no-sanitize.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b846b42c8dcf052eabda71d416a986a7891093f7/src%2Ftest%2Fui%2Finvalid%2Finvalid-no-sanitize.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b846b42c8dcf052eabda71d416a986a7891093f7/src%2Ftest%2Fui%2Finvalid%2Finvalid-no-sanitize.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid%2Finvalid-no-sanitize.stderr?ref=b846b42c8dcf052eabda71d416a986a7891093f7", "patch": "@@ -0,0 +1,10 @@\n+error: invalid argument for `no_sanitize`\n+  --> $DIR/invalid-no-sanitize.rs:3:15\n+   |\n+LL | #[no_sanitize(brontosaurus)]\n+   |               ^^^^^^^^^^^^\n+   |\n+   = note: expected one of: `address`, `memory` or `thread`\n+\n+error: aborting due to previous error\n+"}, {"sha": "52dc5578180396198a400f9ae4d1307a58185a1d", "filename": "src/test/ui/sanitize-inline-always.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b846b42c8dcf052eabda71d416a986a7891093f7/src%2Ftest%2Fui%2Fsanitize-inline-always.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b846b42c8dcf052eabda71d416a986a7891093f7/src%2Ftest%2Fui%2Fsanitize-inline-always.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsanitize-inline-always.rs?ref=b846b42c8dcf052eabda71d416a986a7891093f7", "patch": "@@ -0,0 +1,15 @@\n+// check-pass\n+\n+#![feature(no_sanitize)]\n+\n+#[inline(always)]\n+//~^ NOTE inlining requested here\n+#[no_sanitize(address)]\n+//~^ WARN will have no effect after inlining\n+//~| NOTE on by default\n+fn x() {\n+}\n+\n+fn main() {\n+    x()\n+}"}, {"sha": "50b9474baa2d66c6175c929f4905a0da99778929", "filename": "src/test/ui/sanitize-inline-always.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b846b42c8dcf052eabda71d416a986a7891093f7/src%2Ftest%2Fui%2Fsanitize-inline-always.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b846b42c8dcf052eabda71d416a986a7891093f7/src%2Ftest%2Fui%2Fsanitize-inline-always.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsanitize-inline-always.stderr?ref=b846b42c8dcf052eabda71d416a986a7891093f7", "patch": "@@ -0,0 +1,13 @@\n+warning: `no_sanitize` will have no effect after inlining\n+  --> $DIR/sanitize-inline-always.rs:7:1\n+   |\n+LL | #[no_sanitize(address)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(inline_no_sanitize)]` on by default\n+note: inlining requested here\n+  --> $DIR/sanitize-inline-always.rs:5:1\n+   |\n+LL | #[inline(always)]\n+   | ^^^^^^^^^^^^^^^^^\n+"}]}