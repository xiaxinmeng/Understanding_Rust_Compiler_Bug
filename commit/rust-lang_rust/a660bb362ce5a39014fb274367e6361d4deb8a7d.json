{"sha": "a660bb362ce5a39014fb274367e6361d4deb8a7d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2NjBiYjM2MmNlNWEzOTAxNGZiMjc0MzY3ZTYzNjFkNGRlYjhhN2Q=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-03-01T06:45:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-03-01T06:45:37Z"}, "message": "auto merge of #5180 : catamorphism/rust/post-snapshot, r=catamorphism\n\n* Disallow structural records everywhere\r\n* Remove all #[cfg(stage0)] stuff\r\n* Remove the last deprecated modes in libcore\r\n* Un-xfail a test", "tree": {"sha": "a697e39ba2c9b48184982e03af6f0d1c69dfdb98", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a697e39ba2c9b48184982e03af6f0d1c69dfdb98"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a660bb362ce5a39014fb274367e6361d4deb8a7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a660bb362ce5a39014fb274367e6361d4deb8a7d", "html_url": "https://github.com/rust-lang/rust/commit/a660bb362ce5a39014fb274367e6361d4deb8a7d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a660bb362ce5a39014fb274367e6361d4deb8a7d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7e72974dc09b050b07f7acb30dd70b0a65f4110", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7e72974dc09b050b07f7acb30dd70b0a65f4110", "html_url": "https://github.com/rust-lang/rust/commit/b7e72974dc09b050b07f7acb30dd70b0a65f4110"}, {"sha": "d66a3dd0ec5982f964e540c758276d59af178960", "url": "https://api.github.com/repos/rust-lang/rust/commits/d66a3dd0ec5982f964e540c758276d59af178960", "html_url": "https://github.com/rust-lang/rust/commit/d66a3dd0ec5982f964e540c758276d59af178960"}], "stats": {"total": 70, "additions": 2, "deletions": 68}, "files": [{"sha": "b0825816626791a3929465adad458b190dfd5fda", "filename": "src/libcore/comm.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a660bb362ce5a39014fb274367e6361d4deb8a7d/src%2Flibcore%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a660bb362ce5a39014fb274367e6361d4deb8a7d/src%2Flibcore%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcomm.rs?ref=a660bb362ce5a39014fb274367e6361d4deb8a7d", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Transitional -- needs snapshot\n-#[allow(structural_records)];\n-\n use either::{Either, Left, Right};\n use kinds::Owned;\n use option;"}, {"sha": "91eb61e342ed7d450787afb28783357bcaba4045", "filename": "src/libcore/core.rc", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a660bb362ce5a39014fb274367e6361d4deb8a7d/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/a660bb362ce5a39014fb274367e6361d4deb8a7d/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=a660bb362ce5a39014fb274367e6361d4deb8a7d", "patch": "@@ -227,10 +227,6 @@ pub const debug : u32 = 4_u32;\n \n // The runtime interface used by the compiler\n #[cfg(notest)] pub mod rt;\n-// The runtime and compiler interface to fmt!\n-#[cfg(stage0)]\n-#[path = \"private/extfmt.rs\"]\n-pub mod extfmt;\n // Private APIs\n pub mod private;\n "}, {"sha": "77554656913c4f4aafaabe3249932bc012af475b", "filename": "src/libcore/pipes.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a660bb362ce5a39014fb274367e6361d4deb8a7d/src%2Flibcore%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a660bb362ce5a39014fb274367e6361d4deb8a7d/src%2Flibcore%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpipes.rs?ref=a660bb362ce5a39014fb274367e6361d4deb8a7d", "patch": "@@ -82,8 +82,6 @@ bounded and unbounded protocols allows for less code duplication.\n \n */\n \n-#[allow(structural_records)]; // Macros -- needs another snapshot\n-\n use cmp::Eq;\n use cast::{forget, reinterpret_cast, transmute};\n use cell::Cell;"}, {"sha": "ff75963511c3806cced8bf47f7a970e2c67e6ad5", "filename": "src/libcore/private/finally.rs", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a660bb362ce5a39014fb274367e6361d4deb8a7d/src%2Flibcore%2Fprivate%2Ffinally.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a660bb362ce5a39014fb274367e6361d4deb8a7d/src%2Flibcore%2Fprivate%2Ffinally.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprivate%2Ffinally.rs?ref=a660bb362ce5a39014fb274367e6361d4deb8a7d", "patch": "@@ -26,33 +26,10 @@ do || {\n use ops::Drop;\n use task::{spawn, failing};\n \n-#[cfg(stage0)]\n-pub trait Finally<T> {\n-    fn finally(&self, +dtor: &fn()) -> T;\n-}\n-\n-#[cfg(stage1)]\n-#[cfg(stage2)]\n-#[cfg(stage3)]\n pub trait Finally<T> {\n     fn finally(&self, dtor: &fn()) -> T;\n }\n \n-#[cfg(stage0)]\n-impl<T> Finally<T> for &fn() -> T {\n-    // FIXME #4518: Should not require a mode here\n-    fn finally(&self, +dtor: &fn()) -> T {\n-        let _d = Finallyalizer {\n-            dtor: dtor\n-        };\n-\n-        (*self)()\n-    }\n-}\n-\n-#[cfg(stage1)]\n-#[cfg(stage2)]\n-#[cfg(stage3)]\n impl<T> Finally<T> for &fn() -> T {\n     fn finally(&self, dtor: &fn()) -> T {\n         let _d = Finallyalizer {"}, {"sha": "8950a1d0c0268eea2d845d130b73d9f3084c7ff8", "filename": "src/libcore/stackwalk.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a660bb362ce5a39014fb274367e6361d4deb8a7d/src%2Flibcore%2Fstackwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a660bb362ce5a39014fb274367e6361d4deb8a7d/src%2Flibcore%2Fstackwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstackwalk.rs?ref=a660bb362ce5a39014fb274367e6361d4deb8a7d", "patch": "@@ -10,9 +10,6 @@\n \n #[doc(hidden)]; // FIXME #3538\n \n-#[legacy_modes]; // tjc: remove after snapshot\n-#[allow(deprecated_mode)];\n-\n use cast::reinterpret_cast;\n use ptr::offset;\n use sys::size_of;"}, {"sha": "97f8ec84a1dc7962f8deec735d831a2ce26b7d70", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a660bb362ce5a39014fb274367e6361d4deb8a7d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a660bb362ce5a39014fb274367e6361d4deb8a7d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=a660bb362ce5a39014fb274367e6361d4deb8a7d", "patch": "@@ -553,10 +553,7 @@ impl get_node_info for ast::blk {\n     }\n }\n \n-// XXX: Work around a trait parsing bug. remove after snapshot\n-pub type optional_boxed_ast_expr = Option<@ast::expr>;\n-\n-impl get_node_info for optional_boxed_ast_expr {\n+impl get_node_info for Option<@ast::expr> {\n     fn info(&self) -> Option<NodeInfo> {\n         self.chain_ref(|s| s.info())\n     }"}, {"sha": "49a8dff4a962db4d101d1e18f5180e0ddae8b8c8", "filename": "src/libstd/test.rs", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a660bb362ce5a39014fb274367e6361d4deb8a7d/src%2Flibstd%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a660bb362ce5a39014fb274367e6361d4deb8a7d/src%2Flibstd%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftest.rs?ref=a660bb362ce5a39014fb274367e6361d4deb8a7d", "patch": "@@ -46,34 +46,10 @@ extern mod rustrt {\n // colons. This way if some test runner wants to arrange the tests\n // hierarchically it may.\n \n-#[cfg(stage0)]\n-pub enum TestName {\n-    // Stage0 doesn't understand sendable &static/str yet\n-    StaticTestName(&static/[u8]),\n-    DynTestName(~str)\n-}\n-\n-#[cfg(stage0)]\n-impl ToStr for TestName {\n-    pure fn to_str(&self) -> ~str {\n-        match self {\n-            &StaticTestName(s) => str::from_bytes(s),\n-            &DynTestName(s) => s.to_str()\n-        }\n-    }\n-}\n-\n-#[cfg(stage1)]\n-#[cfg(stage2)]\n-#[cfg(stage3)]\n pub enum TestName {\n     StaticTestName(&static/str),\n     DynTestName(~str)\n }\n-\n-#[cfg(stage1)]\n-#[cfg(stage2)]\n-#[cfg(stage3)]\n impl ToStr for TestName {\n     pure fn to_str(&self) -> ~str {\n         match self {"}, {"sha": "f026f217b99d18f5ea3953bc3187c0b029d12e17", "filename": "src/test/pretty/record-trailing-comma.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a660bb362ce5a39014fb274367e6361d4deb8a7d/src%2Ftest%2Fpretty%2Frecord-trailing-comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a660bb362ce5a39014fb274367e6361d4deb8a7d/src%2Ftest%2Fpretty%2Frecord-trailing-comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Frecord-trailing-comma.rs?ref=a660bb362ce5a39014fb274367e6361d4deb8a7d", "patch": "@@ -8,9 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// NOTE this is a pretty-printer bug that I fixed, but it's\n-// not in the snapshot yet. After a new snapshot, can un-xfail\n-// xfail-pretty\n+// xfail-test\n // pp-exact\n struct Thing {\n     x: int,"}, {"sha": "a77e6acbb2508373d673a59d0476a80bef19f449", "filename": "src/test/run-pass/pipe-select-macro.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a660bb362ce5a39014fb274367e6361d4deb8a7d/src%2Ftest%2Frun-pass%2Fpipe-select-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a660bb362ce5a39014fb274367e6361d4deb8a7d/src%2Ftest%2Frun-pass%2Fpipe-select-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-select-macro.rs?ref=a660bb362ce5a39014fb274367e6361d4deb8a7d", "patch": "@@ -8,9 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// tjc: un-xfail after snapshot\n // xfail-test\n-// xfail-pretty\n \n // Protocols\n proto! foo ("}]}