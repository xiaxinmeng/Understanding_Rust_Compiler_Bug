{"sha": "3722ad4c26d650b113353e264a91c7f2ddf324ae", "node_id": "C_kwDOAAsO6NoAKDM3MjJhZDRjMjZkNjUwYjExMzM1M2UyNjRhOTFjN2YyZGRmMzI0YWU", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-09-29T22:44:24Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-09-29T22:44:43Z"}, "message": "Don't lower assoc bindings just to deny them", "tree": {"sha": "e027d7fa17edd779ff2a79f140460bfd9d2ec259", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e027d7fa17edd779ff2a79f140460bfd9d2ec259"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3722ad4c26d650b113353e264a91c7f2ddf324ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3722ad4c26d650b113353e264a91c7f2ddf324ae", "html_url": "https://github.com/rust-lang/rust/commit/3722ad4c26d650b113353e264a91c7f2ddf324ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3722ad4c26d650b113353e264a91c7f2ddf324ae/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f1a21ae2bd41b3dd335c44f38f29a1fb8712ddc", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f1a21ae2bd41b3dd335c44f38f29a1fb8712ddc", "html_url": "https://github.com/rust-lang/rust/commit/9f1a21ae2bd41b3dd335c44f38f29a1fb8712ddc"}], "stats": {"total": 18, "additions": 7, "deletions": 11}, "files": [{"sha": "fbb0c8918d2bd8f678acd2a9943d50faaa78ac7f", "filename": "compiler/rustc_hir_analysis/src/astconv/generics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3722ad4c26d650b113353e264a91c7f2ddf324ae/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3722ad4c26d650b113353e264a91c7f2ddf324ae/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fgenerics.rs?ref=3722ad4c26d650b113353e264a91c7f2ddf324ae", "patch": "@@ -448,8 +448,8 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         let infer_lifetimes =\n             (gen_pos != GenericArgPosition::Type || infer_args) && !gen_args.has_lifetime_params();\n \n-        if gen_pos != GenericArgPosition::Type && !gen_args.bindings.is_empty() {\n-            Self::prohibit_assoc_ty_binding(tcx, gen_args.bindings[0].span);\n+        if gen_pos != GenericArgPosition::Type && let Some(b) = gen_args.bindings.first() {\n+            Self::prohibit_assoc_ty_binding(tcx, b.span);\n         }\n \n         let explicit_late_bound ="}, {"sha": "52bd4d95a000cc2fa409f9a85cc2deb24377a381", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3722ad4c26d650b113353e264a91c7f2ddf324ae/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3722ad4c26d650b113353e264a91c7f2ddf324ae/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=3722ad4c26d650b113353e264a91c7f2ddf324ae", "patch": "@@ -276,9 +276,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             item_segment.infer_args,\n             None,\n         );\n-        let assoc_bindings = self.create_assoc_bindings_for_generic_args(item_segment.args());\n-\n-        if let Some(b) = assoc_bindings.first() {\n+        if let Some(b) = item_segment.args().bindings.first() {\n             Self::prohibit_assoc_ty_binding(self.tcx(), b.span);\n         }\n \n@@ -605,8 +603,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             None,\n         );\n \n-        let assoc_bindings = self.create_assoc_bindings_for_generic_args(item_segment.args());\n-        if let Some(b) = assoc_bindings.first() {\n+        if let Some(b) = item_segment.args().bindings.first() {\n             Self::prohibit_assoc_ty_binding(self.tcx(), b.span);\n         }\n \n@@ -794,8 +791,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             trait_segment,\n             is_impl,\n         );\n-        let assoc_bindings = self.create_assoc_bindings_for_generic_args(trait_segment.args());\n-        if let Some(b) = assoc_bindings.first() {\n+        if let Some(b) = trait_segment.args().bindings.first() {\n             Self::prohibit_assoc_ty_binding(self.tcx(), b.span);\n         }\n         ty::TraitRef::new(trait_def_id, substs)\n@@ -2208,8 +2204,8 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n         for segment in segments {\n             // Only emit the first error to avoid overloading the user with error messages.\n-            if let [binding, ..] = segment.args().bindings {\n-                Self::prohibit_assoc_ty_binding(self.tcx(), binding.span);\n+            if let Some(b) = segment.args().bindings.first() {\n+                Self::prohibit_assoc_ty_binding(self.tcx(), b.span);\n                 return true;\n             }\n         }"}]}