{"sha": "996ba932ccd03f2372c5c25eaf5f5025d397a73c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5NmJhOTMyY2NkMDNmMjM3MmM1YzI1ZWFmNWY1MDI1ZDM5N2E3M2M=", "commit": {"author": {"name": "Albin Stjerna", "email": "albin.stjerna@gmail.com", "date": "2019-07-18T10:38:32Z"}, "committer": {"name": "Albin Stjerna", "email": "albin.stjerna@gmail.com", "date": "2019-09-04T07:44:40Z"}, "message": "NLL: Adapt to the new Polonius types", "tree": {"sha": "ff020087eaa6142216367611d73d27719ba475b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff020087eaa6142216367611d73d27719ba475b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/996ba932ccd03f2372c5c25eaf5f5025d397a73c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/996ba932ccd03f2372c5c25eaf5f5025d397a73c", "html_url": "https://github.com/rust-lang/rust/commit/996ba932ccd03f2372c5c25eaf5f5025d397a73c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/996ba932ccd03f2372c5c25eaf5f5025d397a73c/comments", "author": null, "committer": null, "parents": [{"sha": "2adb246b5c6bfcaae09971c9d54810cb7d58d43e", "url": "https://api.github.com/repos/rust-lang/rust/commits/2adb246b5c6bfcaae09971c9d54810cb7d58d43e", "html_url": "https://github.com/rust-lang/rust/commit/2adb246b5c6bfcaae09971c9d54810cb7d58d43e"}], "stats": {"total": 38, "additions": 24, "deletions": 14}, "files": [{"sha": "4400e0c8395a205b82ffa0ac4c00212b39eb938b", "filename": "src/librustc_mir/borrow_check/flows.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/996ba932ccd03f2372c5c25eaf5f5025d397a73c/src%2Flibrustc_mir%2Fborrow_check%2Fflows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/996ba932ccd03f2372c5c25eaf5f5025d397a73c/src%2Flibrustc_mir%2Fborrow_check%2Fflows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fflows.rs?ref=996ba932ccd03f2372c5c25eaf5f5025d397a73c", "patch": "@@ -12,7 +12,7 @@ use crate::borrow_check::location::LocationIndex;\n use polonius_engine::Output;\n \n use crate::dataflow::indexes::BorrowIndex;\n-use crate::dataflow::move_paths::HasMoveData;\n+use crate::dataflow::move_paths::{HasMoveData, MovePathIndex};\n use crate::dataflow::Borrows;\n use crate::dataflow::EverInitializedPlaces;\n use crate::dataflow::MaybeUninitializedPlaces;\n@@ -21,7 +21,7 @@ use either::Either;\n use std::fmt;\n use std::rc::Rc;\n \n-crate type PoloniusOutput = Output<RegionVid, BorrowIndex, LocationIndex, Local>;\n+crate type PoloniusOutput = Output<RegionVid, BorrowIndex, LocationIndex, Local, MovePathIndex>;\n \n // (forced to be `pub` due to its use as an associated type below.)\n crate struct Flows<'b, 'tcx> {"}, {"sha": "10ce3a099cf2b5fbab0efbbd0b41ae87d6c78f08", "filename": "src/librustc_mir/borrow_check/nll/facts.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/996ba932ccd03f2372c5c25eaf5f5025d397a73c/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ffacts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/996ba932ccd03f2372c5c25eaf5f5025d397a73c/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ffacts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ffacts.rs?ref=996ba932ccd03f2372c5c25eaf5f5025d397a73c", "patch": "@@ -1,5 +1,5 @@\n use crate::borrow_check::location::{LocationIndex, LocationTable};\n-use crate::dataflow::indexes::BorrowIndex;\n+use crate::dataflow::indexes::{BorrowIndex, MovePathIndex};\n use polonius_engine::AllFacts as PoloniusAllFacts;\n use polonius_engine::Atom;\n use rustc::mir::Local;\n@@ -11,7 +11,7 @@ use std::fs::{self, File};\n use std::io::Write;\n use std::path::Path;\n \n-crate type AllFacts = PoloniusAllFacts<RegionVid, BorrowIndex, LocationIndex, Local>;\n+crate type AllFacts = PoloniusAllFacts<RegionVid, BorrowIndex, LocationIndex, Local, MovePathIndex>;\n \n crate trait AllFactsExt {\n     /// Returns `true` if there is a need to gather `AllFacts` given the\n@@ -65,7 +65,11 @@ impl AllFactsExt for AllFacts {\n                 var_drop_used,\n                 var_uses_region,\n                 var_drops_region,\n-                var_initialized_on_exit,\n+                var_maybe_initialized_on_exit,\n+                parent,\n+                var_starts_path,\n+                initialized_at,\n+                moved_out_at,\n             ])\n         }\n         Ok(())\n@@ -84,6 +88,12 @@ impl Atom for LocationIndex {\n     }\n }\n \n+impl Atom for MovePathIndex {\n+    fn index(self) -> usize {\n+        Idx::index(self)\n+    }\n+}\n+\n struct FactWriter<'w> {\n     location_table: &'w LocationTable,\n     dir: &'w Path,"}, {"sha": "19a3d0eb03d561c22a44b7a240c072b6a8ac71f0", "filename": "src/librustc_mir/borrow_check/nll/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/996ba932ccd03f2372c5c25eaf5f5025d397a73c/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/996ba932ccd03f2372c5c25eaf5f5025d397a73c/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs?ref=996ba932ccd03f2372c5c25eaf5f5025d397a73c", "patch": "@@ -4,7 +4,7 @@ use crate::borrow_check::nll::facts::AllFactsExt;\n use crate::borrow_check::nll::type_check::{MirTypeckResults, MirTypeckRegionConstraints};\n use crate::borrow_check::nll::region_infer::values::RegionValueElements;\n use crate::dataflow::indexes::BorrowIndex;\n-use crate::dataflow::move_paths::MoveData;\n+use crate::dataflow::move_paths::{MoveData, MovePathIndex};\n use crate::dataflow::FlowAtLocation;\n use crate::dataflow::MaybeInitializedPlaces;\n use crate::transform::MirSource;\n@@ -87,7 +87,7 @@ pub(in crate::borrow_check) fn compute_regions<'cx, 'tcx>(\n     errors_buffer: &mut Vec<Diagnostic>,\n ) -> (\n     RegionInferenceContext<'tcx>,\n-    Option<Rc<Output<RegionVid, BorrowIndex, LocationIndex, Local>>>,\n+    Option<Rc<Output<RegionVid, BorrowIndex, LocationIndex, Local, MovePathIndex>>>,\n     Option<ClosureRegionRequirements<'tcx>>,\n ) {\n     let mut all_facts = if AllFacts::enabled(infcx.tcx) {"}, {"sha": "de085fc480a0ef08fe5808c30d46f4300b919bb5", "filename": "src/librustc_mir/borrow_check/nll/type_check/liveness/trace.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/996ba932ccd03f2372c5c25eaf5f5025d397a73c/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Ftrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/996ba932ccd03f2372c5c25eaf5f5025d397a73c/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Ftrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Ftrace.rs?ref=996ba932ccd03f2372c5c25eaf5f5025d397a73c", "patch": "@@ -134,7 +134,7 @@ impl LivenessResults<'me, 'typeck, 'flow, 'tcx> {\n \n             // FIXME: this is temporary until we can generate our own initialization\n             if self.cx.typeck.borrowck_context.all_facts.is_some() {\n-                self.add_polonius_var_initialized_on_exit_for(local)\n+                self.add_polonius_var_maybe_initialized_on_exit_for(local)\n             }\n \n             self.compute_use_live_points_for(local);\n@@ -161,14 +161,14 @@ impl LivenessResults<'me, 'typeck, 'flow, 'tcx> {\n     //\n     // FIXME: this analysis (the initialization tracking) should be\n     // done in Polonius, but isn't yet.\n-    fn add_polonius_var_initialized_on_exit_for(&mut self, local: Local) {\n+    fn add_polonius_var_maybe_initialized_on_exit_for(&mut self, local: Local) {\n         let move_path = self.cx.move_data.rev_lookup.find_local(local);\n         let facts = self.cx.typeck.borrowck_context.all_facts.as_mut().unwrap();\n         for block in self.cx.body.basic_blocks().indices() {\n             debug!(\"polonius: generating initialization facts for {:?} in {:?}\", local, block);\n \n             // iterate through the block, applying the effects of each statement\n-            // up to and including location, and populate `var_initialized_on_exit`\n+            // up to and including location, and populate `var_maybe_initialized_on_exit`\n             self.cx.flow_inits.reset_to_entry_of(block);\n             let start_location = Location { block, statement_index: 0 };\n             self.cx.flow_inits.apply_local_effect(start_location);\n@@ -181,7 +181,7 @@ impl LivenessResults<'me, 'typeck, 'flow, 'tcx> {\n                 // statement has not yet taken effect:\n                 if self.cx.flow_inits.has_any_child_of(move_path).is_some() {\n                     facts\n-                        .var_initialized_on_exit\n+                        .var_maybe_initialized_on_exit\n                         .push((local, self.cx.location_table.start_index(current_location)));\n                 }\n \n@@ -190,7 +190,7 @@ impl LivenessResults<'me, 'typeck, 'flow, 'tcx> {\n \n                 if self.cx.flow_inits.has_any_child_of(move_path).is_some() {\n                     facts\n-                        .var_initialized_on_exit\n+                        .var_maybe_initialized_on_exit\n                         .push((local, self.cx.location_table.mid_index(current_location)));\n                 }\n             }\n@@ -199,7 +199,7 @@ impl LivenessResults<'me, 'typeck, 'flow, 'tcx> {\n \n             if self.cx.flow_inits.has_any_child_of(move_path).is_some() {\n                 facts\n-                    .var_initialized_on_exit\n+                    .var_maybe_initialized_on_exit\n                     .push((local, self.cx.location_table.start_index(terminator_location)));\n             }\n \n@@ -208,7 +208,7 @@ impl LivenessResults<'me, 'typeck, 'flow, 'tcx> {\n \n             if self.cx.flow_inits.has_any_child_of(move_path).is_some() {\n                 facts\n-                    .var_initialized_on_exit\n+                    .var_maybe_initialized_on_exit\n                     .push((local, self.cx.location_table.mid_index(terminator_location)));\n             }\n         }"}]}