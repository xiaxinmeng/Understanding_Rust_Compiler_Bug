{"sha": "e58df0d8c5221fa5743587740eb50e4db42c3d1e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1OGRmMGQ4YzUyMjFmYTU3NDM1ODc3NDBlYjUwZTRkYjQyYzNkMWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-03-28T05:29:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-03-28T05:29:57Z"}, "message": "Auto merge of #49304 - sinkuu:impl_trait_rustdoc, r=QuietMisdreavus\n\nRustdoc support for universal_impl_trait\n\nHides type parameters synthesized by `impl Trait`-in-argument-position, and enables links to trait names.\n\n<img alt=\"before\" src=\"https://user-images.githubusercontent.com/7091080/37831646-a61413c6-2ee9-11e8-8ec2-a6137956d922.png\" width=\"450\"/>\n\u2193\n<img alt=\"after\" src=\"https://user-images.githubusercontent.com/7091080/37831657-b2ff0ae6-2ee9-11e8-8797-fdad904782bf.png\" width=\"450\"/>\n\nFixes #49309", "tree": {"sha": "d7996f34294c11ec8b49e61725c0529119530c46", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d7996f34294c11ec8b49e61725c0529119530c46"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e58df0d8c5221fa5743587740eb50e4db42c3d1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e58df0d8c5221fa5743587740eb50e4db42c3d1e", "html_url": "https://github.com/rust-lang/rust/commit/e58df0d8c5221fa5743587740eb50e4db42c3d1e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e58df0d8c5221fa5743587740eb50e4db42c3d1e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59ec9bfc66b86f04b50f00bb32839315f59252ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/59ec9bfc66b86f04b50f00bb32839315f59252ec", "html_url": "https://github.com/rust-lang/rust/commit/59ec9bfc66b86f04b50f00bb32839315f59252ec"}, {"sha": "4800afa5f5982b06d9cf27ae6003b058ca8855c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/4800afa5f5982b06d9cf27ae6003b058ca8855c8", "html_url": "https://github.com/rust-lang/rust/commit/4800afa5f5982b06d9cf27ae6003b058ca8855c8"}], "stats": {"total": 155, "additions": 127, "deletions": 28}, "files": [{"sha": "42c9d9e52f35c7ef19dc40a3734dd84dd66e4ffa", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 67, "deletions": 12, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/e58df0d8c5221fa5743587740eb50e4db42c3d1e/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e58df0d8c5221fa5743587740eb50e4db42c3d1e/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=e58df0d8c5221fa5743587740eb50e4db42c3d1e", "patch": "@@ -1235,6 +1235,7 @@ pub struct TyParam {\n     pub did: DefId,\n     pub bounds: Vec<TyParamBound>,\n     pub default: Option<Type>,\n+    pub synthetic: Option<hir::SyntheticTyParamKind>,\n }\n \n impl Clean<TyParam> for hir::TyParam {\n@@ -1244,6 +1245,7 @@ impl Clean<TyParam> for hir::TyParam {\n             did: cx.tcx.hir.local_def_id(self.id),\n             bounds: self.bounds.clean(cx),\n             default: self.default.clean(cx),\n+            synthetic: self.synthetic,\n         }\n     }\n }\n@@ -1259,7 +1261,8 @@ impl<'tcx> Clean<TyParam> for ty::TypeParameterDef {\n                 Some(cx.tcx.type_of(self.def_id).clean(cx))\n             } else {\n                 None\n-            }\n+            },\n+            synthetic: None,\n         }\n     }\n }\n@@ -1627,6 +1630,16 @@ pub enum GenericParam {\n     Type(TyParam),\n }\n \n+impl GenericParam {\n+    pub fn is_synthetic_type_param(&self) -> bool {\n+        if let GenericParam::Type(ref t) = *self {\n+            t.synthetic.is_some()\n+        } else {\n+            false\n+        }\n+    }\n+}\n+\n impl Clean<GenericParam> for hir::GenericParam {\n     fn clean(&self, cx: &DocContext) -> GenericParam {\n         match *self {\n@@ -1759,11 +1772,12 @@ pub struct Method {\n \n impl<'a> Clean<Method> for (&'a hir::MethodSig, &'a hir::Generics, hir::BodyId) {\n     fn clean(&self, cx: &DocContext) -> Method {\n+        let generics = self.1.clean(cx);\n         Method {\n-            generics: self.1.clean(cx),\n+            decl: enter_impl_trait(cx, &generics.params, || (&*self.0.decl, self.2).clean(cx)),\n+            generics,\n             unsafety: self.0.unsafety,\n             constness: self.0.constness,\n-            decl: (&*self.0.decl, self.2).clean(cx),\n             abi: self.0.abi\n         }\n     }\n@@ -1788,6 +1802,8 @@ pub struct Function {\n \n impl Clean<Item> for doctree::Function {\n     fn clean(&self, cx: &DocContext) -> Item {\n+        let generics = self.generics.clean(cx);\n+        let decl = enter_impl_trait(cx, &generics.params, || (&self.decl, self.body).clean(cx));\n         Item {\n             name: Some(self.name.clean(cx)),\n             attrs: self.attrs.clean(cx),\n@@ -1797,8 +1813,8 @@ impl Clean<Item> for doctree::Function {\n             deprecation: self.depr.clean(cx),\n             def_id: cx.tcx.hir.local_def_id(self.id),\n             inner: FunctionItem(Function {\n-                decl: (&self.decl, self.body).clean(cx),\n-                generics: self.generics.clean(cx),\n+                decl,\n+                generics,\n                 unsafety: self.unsafety,\n                 constness: self.constness,\n                 abi: self.abi,\n@@ -1883,7 +1899,8 @@ impl<'a, 'tcx> Clean<FnDecl> for (DefId, ty::PolyFnSig<'tcx>) {\n             vec![].into_iter()\n         } else {\n             cx.tcx.fn_arg_names(did).into_iter()\n-        }.peekable();\n+        };\n+\n         FnDecl {\n             output: Return(sig.skip_binder().output().clean(cx)),\n             attrs: Attributes::default(),\n@@ -2025,10 +2042,13 @@ impl Clean<Item> for hir::TraitItem {\n                 MethodItem((sig, &self.generics, body).clean(cx))\n             }\n             hir::TraitItemKind::Method(ref sig, hir::TraitMethod::Required(ref names)) => {\n+                let generics = self.generics.clean(cx);\n                 TyMethodItem(TyMethod {\n                     unsafety: sig.unsafety.clone(),\n-                    decl: (&*sig.decl, &names[..]).clean(cx),\n-                    generics: self.generics.clean(cx),\n+                    decl: enter_impl_trait(cx, &generics.params, || {\n+                        (&*sig.decl, &names[..]).clean(cx)\n+                    }),\n+                    generics,\n                     abi: sig.abi\n                 })\n             }\n@@ -2532,6 +2552,12 @@ impl Clean<Type> for hir::Ty {\n                     return new_ty;\n                 }\n \n+                if let Def::TyParam(did) = path.def {\n+                    if let Some(bounds) = cx.impl_trait_bounds.borrow_mut().remove(&did) {\n+                        return ImplTrait(bounds);\n+                    }\n+                }\n+\n                 let mut alias = None;\n                 if let Def::TyAlias(def_id) = path.def {\n                     // Substitute private type aliases\n@@ -3244,10 +3270,13 @@ pub struct BareFunctionDecl {\n \n impl Clean<BareFunctionDecl> for hir::BareFnTy {\n     fn clean(&self, cx: &DocContext) -> BareFunctionDecl {\n+        let generic_params = self.generic_params.clean(cx);\n         BareFunctionDecl {\n             unsafety: self.unsafety,\n-            generic_params: self.generic_params.clean(cx),\n-            decl: (&*self.decl, &self.arg_names[..]).clean(cx),\n+            decl: enter_impl_trait(cx, &generic_params, || {\n+                (&*self.decl, &self.arg_names[..]).clean(cx)\n+            }),\n+            generic_params,\n             abi: self.abi,\n         }\n     }\n@@ -3548,9 +3577,12 @@ impl Clean<Item> for hir::ForeignItem {\n     fn clean(&self, cx: &DocContext) -> Item {\n         let inner = match self.node {\n             hir::ForeignItemFn(ref decl, ref names, ref generics) => {\n+                let generics = generics.clean(cx);\n                 ForeignFunctionItem(Function {\n-                    decl: (&**decl, &names[..]).clean(cx),\n-                    generics: generics.clean(cx),\n+                    decl: enter_impl_trait(cx, &generics.params, || {\n+                        (&**decl, &names[..]).clean(cx)\n+                    }),\n+                    generics,\n                     unsafety: hir::Unsafety::Unsafe,\n                     abi: Abi::Rust,\n                     constness: hir::Constness::NotConst,\n@@ -3852,6 +3884,29 @@ pub fn def_id_to_path(cx: &DocContext, did: DefId, name: Option<String>) -> Vec<\n     once(crate_name).chain(relative).collect()\n }\n \n+pub fn enter_impl_trait<F, R>(cx: &DocContext, gps: &[GenericParam], f: F) -> R\n+where\n+    F: FnOnce() -> R,\n+{\n+    let bounds = gps.iter()\n+        .filter_map(|p| {\n+            if let GenericParam::Type(ref tp) = *p {\n+                if tp.synthetic == Some(hir::SyntheticTyParamKind::ImplTrait) {\n+                    return Some((tp.did, tp.bounds.clone()));\n+                }\n+            }\n+\n+            None\n+        })\n+        .collect::<FxHashMap<DefId, Vec<TyParamBound>>>();\n+\n+    let old_bounds = mem::replace(&mut *cx.impl_trait_bounds.borrow_mut(), bounds);\n+    let r = f();\n+    assert!(cx.impl_trait_bounds.borrow().is_empty());\n+    *cx.impl_trait_bounds.borrow_mut() = old_bounds;\n+    r\n+}\n+\n // Start of code copied from rust-clippy\n \n pub fn get_trait_def_id(tcx: &TyCtxt, path: &[&str], use_local: bool) -> Option<DefId> {"}, {"sha": "749d7ec126be30a8b8fa7dbe07cecb68245addc9", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e58df0d8c5221fa5743587740eb50e4db42c3d1e/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e58df0d8c5221fa5743587740eb50e4db42c3d1e/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=e58df0d8c5221fa5743587740eb50e4db42c3d1e", "patch": "@@ -72,6 +72,8 @@ pub struct DocContext<'a, 'tcx: 'a, 'rcx: 'a> {\n     pub ty_substs: RefCell<FxHashMap<Def, clean::Type>>,\n     /// Table node id of lifetime parameter definition -> substituted lifetime\n     pub lt_substs: RefCell<FxHashMap<DefId, clean::Lifetime>>,\n+    /// Table DefId of `impl Trait` in argument position -> bounds\n+    pub impl_trait_bounds: RefCell<FxHashMap<DefId, Vec<clean::TyParamBound>>>,\n     pub send_trait: Option<DefId>,\n     pub fake_def_ids: RefCell<FxHashMap<CrateNum, DefId>>,\n     pub all_fake_def_ids: RefCell<FxHashSet<DefId>>,\n@@ -261,6 +263,7 @@ pub fn run_core(search_paths: SearchPaths,\n             renderinfo: Default::default(),\n             ty_substs: Default::default(),\n             lt_substs: Default::default(),\n+            impl_trait_bounds: Default::default(),\n             mod_ids: Default::default(),\n             send_trait: send_trait,\n             fake_def_ids: RefCell::new(FxHashMap()),"}, {"sha": "0a7e19fc643f654ca97789deaec6ea8d36b8bfcd", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 11, "deletions": 16, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e58df0d8c5221fa5743587740eb50e4db42c3d1e/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e58df0d8c5221fa5743587740eb50e4db42c3d1e/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=e58df0d8c5221fa5743587740eb50e4db42c3d1e", "patch": "@@ -148,11 +148,17 @@ impl fmt::Display for clean::GenericParam {\n \n impl fmt::Display for clean::Generics {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        if self.params.is_empty() { return Ok(()) }\n+        let real_params = self.params\n+            .iter()\n+            .filter(|p| !p.is_synthetic_type_param())\n+            .collect::<Vec<_>>();\n+        if real_params.is_empty() {\n+            return Ok(());\n+        }\n         if f.alternate() {\n-            write!(f, \"<{:#}>\", CommaSep(&self.params))\n+            write!(f, \"<{:#}>\", CommaSep(&real_params))\n         } else {\n-            write!(f, \"&lt;{}&gt;\", CommaSep(&self.params))\n+            write!(f, \"&lt;{}&gt;\", CommaSep(&real_params))\n         }\n     }\n }\n@@ -575,7 +581,7 @@ fn fmt_type(t: &clean::Type, f: &mut fmt::Formatter, use_absolute: bool) -> fmt:\n                 }\n                 many => {\n                     primitive_link(f, PrimitiveType::Tuple, \"(\")?;\n-                    fmt::Display::fmt(&CommaSep(&many), f)?;\n+                    fmt::Display::fmt(&CommaSep(many), f)?;\n                     primitive_link(f, PrimitiveType::Tuple, \")\")\n                 }\n             }\n@@ -661,18 +667,7 @@ fn fmt_type(t: &clean::Type, f: &mut fmt::Formatter, use_absolute: bool) -> fmt:\n             }\n         }\n         clean::ImplTrait(ref bounds) => {\n-            write!(f, \"impl \")?;\n-            for (i, bound) in bounds.iter().enumerate() {\n-                if i != 0 {\n-                    write!(f, \" + \")?;\n-                }\n-                if f.alternate() {\n-                    write!(f, \"{:#}\", *bound)?;\n-                } else {\n-                    write!(f, \"{}\", *bound)?;\n-                }\n-            }\n-            Ok(())\n+            write!(f, \"impl {}\", TyParamBounds(bounds))\n         }\n         clean::QPath { ref name, ref self_type, ref trait_ } => {\n             let should_show_cast = match *trait_ {"}, {"sha": "4cf99562c52992ba389fb8332a1d3a1b40ab2461", "filename": "src/test/rustdoc/universal-impl-trait.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/e58df0d8c5221fa5743587740eb50e4db42c3d1e/src%2Ftest%2Frustdoc%2Funiversal-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e58df0d8c5221fa5743587740eb50e4db42c3d1e/src%2Ftest%2Frustdoc%2Funiversal-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Funiversal-impl-trait.rs?ref=e58df0d8c5221fa5743587740eb50e4db42c3d1e", "patch": "@@ -0,0 +1,46 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(universal_impl_trait)]\n+#![crate_name = \"foo\"]\n+\n+// @has foo/fn.foo.html\n+// @has - //pre 'foo('\n+// @matches - '_x: impl <a class=\"trait\" href=\"[^\"]+/trait\\.Clone\\.html\"'\n+// @matches - '_z: .+impl.+trait\\.Copy\\.html.+, impl.+trait\\.Clone\\.html'\n+pub fn foo(_x: impl Clone, _y: i32, _z: (impl Copy, impl Clone)) {\n+}\n+\n+pub trait Trait {\n+    // @has foo/trait.Trait.html\n+    // @has - 'method</a>('\n+    // @matches - '_x: impl <a class=\"trait\" href=\"[^\"]+/trait\\.Debug\\.html\"'\n+    fn method(&self, _x: impl std::fmt::Debug) {\n+    }\n+}\n+\n+pub struct S<T>(T);\n+\n+impl<T> S<T> {\n+    // @has foo/struct.S.html\n+    // @has - 'bar</a>('\n+    // @matches - '_bar: impl <a class=\"trait\" href=\"[^\"]+/trait\\.Copy\\.html\"'\n+    pub fn bar(_bar: impl Copy) {\n+    }\n+\n+    // @has - 'baz</a>('\n+    // @matches - '_baz:.+struct\\.S\\.html.+impl .+trait\\.Clone\\.html'\n+    pub fn baz(_baz: S<impl Clone>) {\n+    }\n+}\n+\n+// @has - 'method</a>('\n+// @matches - '_x: impl <a class=\"trait\" href=\"[^\"]+/trait\\.Debug\\.html\"'\n+impl<T> Trait for S<T> {}"}]}