{"sha": "95d27c3b7905b437f21deddbe946f93caaa4c51f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1ZDI3YzNiNzkwNWI0MzdmMjFkZWRkYmU5NDZmOTNjYWFhNGM1MWY=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-01-18T17:59:28Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-01-27T19:37:30Z"}, "message": "syntax: Permit `+` in return types of function declarations\n\n`+` is still disallowed in function types and function-like traits", "tree": {"sha": "1e38c20ea7c2a5689995f4c60cef2e254060ede1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e38c20ea7c2a5689995f4c60cef2e254060ede1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/95d27c3b7905b437f21deddbe946f93caaa4c51f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/95d27c3b7905b437f21deddbe946f93caaa4c51f", "html_url": "https://github.com/rust-lang/rust/commit/95d27c3b7905b437f21deddbe946f93caaa4c51f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/95d27c3b7905b437f21deddbe946f93caaa4c51f/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "873b77531cdfefa38024f84532ca0083e8f17e3a", "url": "https://api.github.com/repos/rust-lang/rust/commits/873b77531cdfefa38024f84532ca0083e8f17e3a", "html_url": "https://github.com/rust-lang/rust/commit/873b77531cdfefa38024f84532ca0083e8f17e3a"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "0430be101b08063aa4a9786ba0d30ece2ca35945", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/95d27c3b7905b437f21deddbe946f93caaa4c51f/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95d27c3b7905b437f21deddbe946f93caaa4c51f/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=95d27c3b7905b437f21deddbe946f93caaa4c51f", "patch": "@@ -1362,7 +1362,7 @@ impl<'a> Parser<'a> {\n \n         self.expect_keyword(keywords::Fn)?;\n         let (inputs, variadic) = self.parse_fn_args(false, true)?;\n-        let ret_ty = self.parse_ret_ty()?;\n+        let ret_ty = self.parse_ret_ty(false)?;\n         let decl = P(FnDecl {\n             inputs,\n             output: ret_ty,\n@@ -1501,9 +1501,9 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parse optional return type [ -> TY ] in function decl\n-    pub fn parse_ret_ty(&mut self) -> PResult<'a, FunctionRetTy> {\n+    fn parse_ret_ty(&mut self, allow_plus: bool) -> PResult<'a, FunctionRetTy> {\n         if self.eat(&token::RArrow) {\n-            Ok(FunctionRetTy::Ty(self.parse_ty_no_plus()?))\n+            Ok(FunctionRetTy::Ty(self.parse_ty_common(allow_plus, true)?))\n         } else {\n             Ok(FunctionRetTy::Default(self.span.with_hi(self.span.lo())))\n         }\n@@ -4893,7 +4893,7 @@ impl<'a> Parser<'a> {\n     pub fn parse_fn_decl(&mut self, allow_variadic: bool) -> PResult<'a, P<FnDecl>> {\n \n         let (args, variadic) = self.parse_fn_args(true, allow_variadic)?;\n-        let ret_ty = self.parse_ret_ty()?;\n+        let ret_ty = self.parse_ret_ty(true)?;\n \n         Ok(P(FnDecl {\n             inputs: args,\n@@ -5034,7 +5034,7 @@ impl<'a> Parser<'a> {\n         self.expect(&token::CloseDelim(token::Paren))?;\n         Ok(P(FnDecl {\n             inputs: fn_inputs,\n-            output: self.parse_ret_ty()?,\n+            output: self.parse_ret_ty(true)?,\n             variadic: false\n         }))\n     }\n@@ -5056,7 +5056,7 @@ impl<'a> Parser<'a> {\n                 args\n             }\n         };\n-        let output = self.parse_ret_ty()?;\n+        let output = self.parse_ret_ty(true)?;\n \n         Ok(P(FnDecl {\n             inputs: inputs_captures,"}, {"sha": "351dc6b776b210f7c12916e7ac8a047426e3a23f", "filename": "src/test/compile-fail/private-inferred-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95d27c3b7905b437f21deddbe946f93caaa4c51f/src%2Ftest%2Fcompile-fail%2Fprivate-inferred-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95d27c3b7905b437f21deddbe946f93caaa4c51f/src%2Ftest%2Fcompile-fail%2Fprivate-inferred-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-inferred-type.rs?ref=95d27c3b7905b437f21deddbe946f93caaa4c51f", "patch": "@@ -72,7 +72,7 @@ mod m {\n     impl TraitWithAssocTy for u8 { type AssocTy = Priv; }\n     //~^ ERROR private type `m::Priv` in public interface\n \n-    pub fn leak_anon1() -> (impl Trait + 'static) { 0 }\n+    pub fn leak_anon1() -> impl Trait + 'static { 0 }\n     pub fn leak_anon2() -> impl TraitWithTyParam<Alias> { 0 }\n     pub fn leak_anon3() -> impl TraitWithAssocTy<AssocTy = Alias> { 0 }\n "}]}