{"sha": "76ce198128c136cf908a4dfb1146489ae4ae7db3", "node_id": "C_kwDOAAsO6NoAKDc2Y2UxOTgxMjhjMTM2Y2Y5MDhhNGRmYjExNDY0ODlhZTRhZTdkYjM", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2022-11-11T17:12:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-11T17:12:28Z"}, "message": "Rollup merge of #100386 - compiler-errors:sized-coinductive-redux, r=lcnr\n\nMake `Sized` coinductive, again\n\nA revival of #83647\n\n---\n\nWhat exactly makes co-induction sound? Better question: are there any unsoundness risks from this? `Sized` can't be implemented by custom `impl` blocks, nor can it be conditionally implemented based on anything other than child fields being `Sized`, right?\n\nr? `@nikomatsakis` for whenever he gets back from vacation", "tree": {"sha": "b105de94b1f8c6a11cf3af02f46ea6242ffd6aa4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b105de94b1f8c6a11cf3af02f46ea6242ffd6aa4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76ce198128c136cf908a4dfb1146489ae4ae7db3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjboJ8CRBK7hj4Ov3rIwAAe6oIABaL4CTWSjsNshMeVoWQ4Vxk\nG0n4bEFBlvjNtoSBGV2Nt4c+92avjZCrZ5YL8AAlFSuVIhQpImzbno1h05vH6H6Q\nfuxGwahYO6Pu+6+q18tG6Y48jo8dgAIFpElyOLk9xMa87tHx6XGDYEISGdo/WAwo\neUhiDRV0Yo1osDGxZAiadkZ0eA9BZsWnAIp9o2qr2IVNTGHIfaOpyFEl4Oihhos5\nVabCdUOXxfoECCTGO6nb3ZgJUIoMQATmeHCKDuVRHMfXj3uoYzMG6Si0sgGGFjdd\neyYPfUeLllZGqM3qRDnRwmGfIvggTSdBFoGc2hZDjvXwyiYZ2I5zguULlWD28VQ=\n=kbxM\n-----END PGP SIGNATURE-----\n", "payload": "tree b105de94b1f8c6a11cf3af02f46ea6242ffd6aa4\nparent cd30ccf9744a09fb4fd7d63703a3f29899a5e88d\nparent fea8d0eb999dbe732a70cd61518d79195c139b2c\nauthor Manish Goregaokar <manishsmail@gmail.com> 1668186748 -0500\ncommitter GitHub <noreply@github.com> 1668186748 -0500\n\nRollup merge of #100386 - compiler-errors:sized-coinductive-redux, r=lcnr\n\nMake `Sized` coinductive, again\n\nA revival of #83647\n\n---\n\nWhat exactly makes co-induction sound? Better question: are there any unsoundness risks from this? `Sized` can't be implemented by custom `impl` blocks, nor can it be conditionally implemented based on anything other than child fields being `Sized`, right?\n\nr? `@nikomatsakis` for whenever he gets back from vacation\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76ce198128c136cf908a4dfb1146489ae4ae7db3", "html_url": "https://github.com/rust-lang/rust/commit/76ce198128c136cf908a4dfb1146489ae4ae7db3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76ce198128c136cf908a4dfb1146489ae4ae7db3/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd30ccf9744a09fb4fd7d63703a3f29899a5e88d", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd30ccf9744a09fb4fd7d63703a3f29899a5e88d", "html_url": "https://github.com/rust-lang/rust/commit/cd30ccf9744a09fb4fd7d63703a3f29899a5e88d"}, {"sha": "fea8d0eb999dbe732a70cd61518d79195c139b2c", "url": "https://api.github.com/repos/rust-lang/rust/commits/fea8d0eb999dbe732a70cd61518d79195c139b2c", "html_url": "https://github.com/rust-lang/rust/commit/fea8d0eb999dbe732a70cd61518d79195c139b2c"}], "stats": {"total": 188, "additions": 118, "deletions": 70}, "files": [{"sha": "18eb06b83c9dfa87f54fbdf56fed2f0e014dd8f5", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/76ce198128c136cf908a4dfb1146489ae4ae7db3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76ce198128c136cf908a4dfb1146489ae4ae7db3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=76ce198128c136cf908a4dfb1146489ae4ae7db3", "patch": "@@ -2506,6 +2506,10 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.trait_def(trait_def_id).has_auto_impl\n     }\n \n+    pub fn trait_is_coinductive(self, trait_def_id: DefId) -> bool {\n+        self.trait_is_auto(trait_def_id) || self.lang_items().sized_trait() == Some(trait_def_id)\n+    }\n+\n     /// Returns layout of a generator. Layout might be unavailable if the\n     /// generator is tainted by errors.\n     pub fn generator_layout(self, def_id: DefId) -> Option<&'tcx GeneratorLayout<'tcx>> {"}, {"sha": "a12f67125bbc0f2afba2fe9b15af46572743bacf", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76ce198128c136cf908a4dfb1146489ae4ae7db3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76ce198128c136cf908a4dfb1146489ae4ae7db3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=76ce198128c136cf908a4dfb1146489ae4ae7db3", "patch": "@@ -959,7 +959,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n     fn coinductive_predicate(&self, predicate: ty::Predicate<'tcx>) -> bool {\n         let result = match predicate.kind().skip_binder() {\n-            ty::PredicateKind::Trait(ref data) => self.tcx().trait_is_auto(data.def_id()),\n+            ty::PredicateKind::Trait(ref data) => self.tcx().trait_is_coinductive(data.def_id()),\n             ty::PredicateKind::WellFormed(_) => true,\n             _ => false,\n         };"}, {"sha": "d6e18010f3b271a42810d91a153c53695950cf7c", "filename": "src/test/ui/generic-associated-types/bugs/issue-80626.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/76ce198128c136cf908a4dfb1146489ae4ae7db3/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-80626.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76ce198128c136cf908a4dfb1146489ae4ae7db3/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-80626.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-80626.rs?ref=76ce198128c136cf908a4dfb1146489ae4ae7db3", "patch": "@@ -1,15 +1,12 @@\n-// check-fail\n-// known-bug: #80626\n-\n-// This should pass, but it requires `Sized` to be coinductive.\n+// check-pass\n \n trait Allocator {\n     type Allocated<T>;\n }\n \n enum LinkedList<A: Allocator> {\n     Head,\n-    Next(A::Allocated<Self>)\n+    Next(A::Allocated<Self>),\n }\n \n fn main() {}"}, {"sha": "9a0f332ed47360141760f8f697d340417855dde6", "filename": "src/test/ui/generic-associated-types/bugs/issue-80626.stderr", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/cd30ccf9744a09fb4fd7d63703a3f29899a5e88d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-80626.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd30ccf9744a09fb4fd7d63703a3f29899a5e88d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-80626.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-80626.stderr?ref=cd30ccf9744a09fb4fd7d63703a3f29899a5e88d", "patch": "@@ -1,15 +0,0 @@\n-error[E0275]: overflow evaluating the requirement `LinkedList<A>: Sized`\n-  --> $DIR/issue-80626.rs:12:10\n-   |\n-LL |     Next(A::Allocated<Self>)\n-   |          ^^^^^^^^^^^^^^^^^^\n-   |\n-note: required by a bound in `Allocator::Allocated`\n-  --> $DIR/issue-80626.rs:7:20\n-   |\n-LL |     type Allocated<T>;\n-   |                    ^ required by this bound in `Allocator::Allocated`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0275`."}, {"sha": "b35657989efb96ddda749a38767a8c04edd723ba", "filename": "src/test/ui/generic-associated-types/issue-87750.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/76ce198128c136cf908a4dfb1146489ae4ae7db3/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87750.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76ce198128c136cf908a4dfb1146489ae4ae7db3/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87750.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87750.rs?ref=76ce198128c136cf908a4dfb1146489ae4ae7db3", "patch": "@@ -1,3 +1,5 @@\n+// check-pass\n+\n trait PointerFamily {\n     type Pointer<T>;\n }\n@@ -10,11 +12,13 @@ impl PointerFamily for RcFamily {\n }\n \n #[allow(dead_code)]\n-enum Node<T, P: PointerFamily> where P::Pointer<Node<T, P>>: Sized {\n+enum Node<T, P: PointerFamily>\n+where\n+    P::Pointer<Node<T, P>>: Sized,\n+{\n     Cons(P::Pointer<Node<T, P>>),\n }\n \n fn main() {\n     let _list: <RcFamily as PointerFamily>::Pointer<Node<i32, RcFamily>>;\n-    //~^ ERROR overflow evaluating the requirement `Node<i32, RcFamily>: Sized`\n }"}, {"sha": "b358ca273ca79c3854dc92bfbc3d02a22ea4737b", "filename": "src/test/ui/generic-associated-types/issue-87750.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cd30ccf9744a09fb4fd7d63703a3f29899a5e88d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87750.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd30ccf9744a09fb4fd7d63703a3f29899a5e88d/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87750.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87750.stderr?ref=cd30ccf9744a09fb4fd7d63703a3f29899a5e88d", "patch": "@@ -1,9 +0,0 @@\n-error[E0275]: overflow evaluating the requirement `Node<i32, RcFamily>: Sized`\n-  --> $DIR/issue-87750.rs:18:16\n-   |\n-LL |     let _list: <RcFamily as PointerFamily>::Pointer<Node<i32, RcFamily>>;\n-   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0275`."}, {"sha": "ecf6f69c9fa7ebca2426cf28e384f1790afdcb08", "filename": "src/test/ui/generic-associated-types/projection-bound-cycle-generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76ce198128c136cf908a4dfb1146489ae4ae7db3/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-bound-cycle-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76ce198128c136cf908a4dfb1146489ae4ae7db3/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-bound-cycle-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-bound-cycle-generic.rs?ref=76ce198128c136cf908a4dfb1146489ae4ae7db3", "patch": "@@ -21,6 +21,7 @@ impl<T> Foo for Number<T> {\n     // ```\n     // which it is :)\n     type Item = [T] where [T]: Sized;\n+    //~^ ERROR overflow evaluating the requirement `<Number<T> as Foo>::Item == _`\n }\n \n struct OnlySized<T> where T: Sized { f: T }\n@@ -40,7 +41,6 @@ impl<T> Bar for T where T: Foo {\n     // can use the bound on `Foo::Item` for this, but that requires\n     // `wf(<T as Foo>::Item)`, which is an invalid cycle.\n     type Assoc = OnlySized<<T as Foo>::Item>;\n-    //~^ ERROR overflow evaluating the requirement `<T as Foo>::Item: Sized`\n }\n \n fn foo<T: Print>() {"}, {"sha": "aae9a56bb612878da03b2e46c2bdc74c3ff1c175", "filename": "src/test/ui/generic-associated-types/projection-bound-cycle-generic.stderr", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/76ce198128c136cf908a4dfb1146489ae4ae7db3/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-bound-cycle-generic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/76ce198128c136cf908a4dfb1146489ae4ae7db3/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-bound-cycle-generic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-bound-cycle-generic.stderr?ref=76ce198128c136cf908a4dfb1146489ae4ae7db3", "patch": "@@ -1,14 +1,8 @@\n-error[E0275]: overflow evaluating the requirement `<T as Foo>::Item: Sized`\n-  --> $DIR/projection-bound-cycle-generic.rs:42:18\n+error[E0275]: overflow evaluating the requirement `<Number<T> as Foo>::Item == _`\n+  --> $DIR/projection-bound-cycle-generic.rs:23:5\n    |\n-LL |     type Assoc = OnlySized<<T as Foo>::Item>;\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: required by a bound in `OnlySized`\n-  --> $DIR/projection-bound-cycle-generic.rs:26:18\n-   |\n-LL | struct OnlySized<T> where T: Sized { f: T }\n-   |                  ^ required by this bound in `OnlySized`\n+LL |     type Item = [T] where [T]: Sized;\n+   |     ^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "b51ae7ef20186dcf07ad3725677657b81296ffaa", "filename": "src/test/ui/generic-associated-types/projection-bound-cycle.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76ce198128c136cf908a4dfb1146489ae4ae7db3/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-bound-cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76ce198128c136cf908a4dfb1146489ae4ae7db3/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-bound-cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-bound-cycle.rs?ref=76ce198128c136cf908a4dfb1146489ae4ae7db3", "patch": "@@ -24,6 +24,7 @@ impl Foo for Number {\n     // ```\n     // which it is :)\n     type Item = str where str: Sized;\n+    //~^ ERROR overflow evaluating the requirement `<Number as Foo>::Item == _`\n }\n \n struct OnlySized<T> where T: Sized { f: T }\n@@ -43,7 +44,6 @@ impl<T> Bar for T where T: Foo {\n     // can use the bound on `Foo::Item` for this, but that requires\n     // `wf(<T as Foo>::Item)`, which is an invalid cycle.\n     type Assoc = OnlySized<<T as Foo>::Item>;\n-    //~^ ERROR overflow evaluating the requirement `<T as Foo>::Item: Sized`\n }\n \n fn foo<T: Print>() {"}, {"sha": "b1b8afeecd02f51c65457461a4e7bd5f38e6abdb", "filename": "src/test/ui/generic-associated-types/projection-bound-cycle.stderr", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/76ce198128c136cf908a4dfb1146489ae4ae7db3/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-bound-cycle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/76ce198128c136cf908a4dfb1146489ae4ae7db3/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-bound-cycle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-bound-cycle.stderr?ref=76ce198128c136cf908a4dfb1146489ae4ae7db3", "patch": "@@ -1,14 +1,8 @@\n-error[E0275]: overflow evaluating the requirement `<T as Foo>::Item: Sized`\n-  --> $DIR/projection-bound-cycle.rs:45:18\n+error[E0275]: overflow evaluating the requirement `<Number as Foo>::Item == _`\n+  --> $DIR/projection-bound-cycle.rs:26:5\n    |\n-LL |     type Assoc = OnlySized<<T as Foo>::Item>;\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: required by a bound in `OnlySized`\n-  --> $DIR/projection-bound-cycle.rs:29:18\n-   |\n-LL | struct OnlySized<T> where T: Sized { f: T }\n-   |                  ^ required by this bound in `OnlySized`\n+LL |     type Item = str where str: Sized;\n+   |     ^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "cdf70920f009542e78d7dd2eab9dfd49b13ce063", "filename": "src/test/ui/sized/coinductive-1-gat.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/76ce198128c136cf908a4dfb1146489ae4ae7db3/src%2Ftest%2Fui%2Fsized%2Fcoinductive-1-gat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76ce198128c136cf908a4dfb1146489ae4ae7db3/src%2Ftest%2Fui%2Fsized%2Fcoinductive-1-gat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsized%2Fcoinductive-1-gat.rs?ref=76ce198128c136cf908a4dfb1146489ae4ae7db3", "patch": "@@ -0,0 +1,14 @@\n+// check-pass\n+struct Node<C: Trait>(C::Assoc::<Self>);\n+\n+trait Trait {\n+    type Assoc<T>;\n+}\n+\n+impl Trait for Vec<()> {\n+    type Assoc<T> = Vec<T>;\n+}\n+\n+fn main() {\n+    let _ = Node::<Vec<()>>(Vec::new());\n+}"}, {"sha": "7bcd0f1fdaf6d55eac6f68382c99f508bf50df4e", "filename": "src/test/ui/sized/coinductive-1.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/76ce198128c136cf908a4dfb1146489ae4ae7db3/src%2Ftest%2Fui%2Fsized%2Fcoinductive-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76ce198128c136cf908a4dfb1146489ae4ae7db3/src%2Ftest%2Fui%2Fsized%2Fcoinductive-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsized%2Fcoinductive-1.rs?ref=76ce198128c136cf908a4dfb1146489ae4ae7db3", "patch": "@@ -0,0 +1,14 @@\n+// check-pass\n+struct Node<C: Trait<Self>>(C::Assoc);\n+\n+trait Trait<T> {\n+    type Assoc;\n+}\n+\n+impl<T> Trait<T> for Vec<()> {\n+    type Assoc = Vec<T>;\n+}\n+\n+fn main() {\n+    let _ = Node::<Vec<()>>(Vec::new());\n+}"}, {"sha": "212274d2e4b6c8350c25bc6c9a66037a64d775b3", "filename": "src/test/ui/sized/coinductive-2.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/76ce198128c136cf908a4dfb1146489ae4ae7db3/src%2Ftest%2Fui%2Fsized%2Fcoinductive-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76ce198128c136cf908a4dfb1146489ae4ae7db3/src%2Ftest%2Fui%2Fsized%2Fcoinductive-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsized%2Fcoinductive-2.rs?ref=76ce198128c136cf908a4dfb1146489ae4ae7db3", "patch": "@@ -0,0 +1,28 @@\n+// run-pass\n+struct Node<C: CollectionFactory<Self>> {\n+    _children: C::Collection,\n+}\n+\n+trait CollectionFactory<T> {\n+    type Collection;\n+}\n+\n+impl<T> CollectionFactory<T> for Vec<()> {\n+    type Collection = Vec<T>;\n+}\n+\n+trait Collection<T>: Sized {\n+    fn push(&mut self, v: T);\n+}\n+\n+impl<T> Collection<T> for Vec<T> {\n+    fn push(&mut self, v: T) {\n+        self.push(v)\n+    }\n+}\n+\n+fn main() {\n+    let _ = Node::<Vec<()>> {\n+        _children: Vec::new(),\n+    };\n+}"}, {"sha": "cd6805967e524e2d860104818365d90157332431", "filename": "src/test/ui/sized/recursive-type-1.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/76ce198128c136cf908a4dfb1146489ae4ae7db3/src%2Ftest%2Fui%2Fsized%2Frecursive-type-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76ce198128c136cf908a4dfb1146489ae4ae7db3/src%2Ftest%2Fui%2Fsized%2Frecursive-type-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsized%2Frecursive-type-1.rs?ref=76ce198128c136cf908a4dfb1146489ae4ae7db3", "patch": "@@ -0,0 +1,10 @@\n+// check-pass\n+trait A { type Assoc; }\n+\n+impl A for () {\n+    // FIXME: it would be nice for this to at least cause a warning.\n+    type Assoc = Foo<()>;\n+}\n+struct Foo<T: A>(T::Assoc);\n+\n+fn main() {}"}, {"sha": "7d95417a6ffd97ed0deffc8d0788783684e487b6", "filename": "src/test/ui/sized/recursive-type-2.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/76ce198128c136cf908a4dfb1146489ae4ae7db3/src%2Ftest%2Fui%2Fsized%2Frecursive-type-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76ce198128c136cf908a4dfb1146489ae4ae7db3/src%2Ftest%2Fui%2Fsized%2Frecursive-type-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsized%2Frecursive-type-2.rs?ref=76ce198128c136cf908a4dfb1146489ae4ae7db3", "patch": "@@ -0,0 +1,13 @@\n+// build-fail\n+//~^ ERROR cycle detected when computing layout of `Foo<()>`\n+\n+trait A { type Assoc: ?Sized; }\n+\n+impl A for () {\n+    type Assoc = Foo<()>;\n+}\n+struct Foo<T: A>(T::Assoc);\n+\n+fn main() {\n+    let x: Foo<()>;\n+}"}, {"sha": "d0e6e9db07e9bfa6b970c68a35deae6d8ce63671", "filename": "src/test/ui/sized/recursive-type-2.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/76ce198128c136cf908a4dfb1146489ae4ae7db3/src%2Ftest%2Fui%2Fsized%2Frecursive-type-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/76ce198128c136cf908a4dfb1146489ae4ae7db3/src%2Ftest%2Fui%2Fsized%2Frecursive-type-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsized%2Frecursive-type-2.stderr?ref=76ce198128c136cf908a4dfb1146489ae4ae7db3", "patch": "@@ -0,0 +1,13 @@\n+error[E0391]: cycle detected when computing layout of `Foo<()>`\n+   |\n+   = note: ...which requires computing layout of `<() as A>::Assoc`...\n+   = note: ...which again requires computing layout of `Foo<()>`, completing the cycle\n+note: cycle used when elaborating drops for `main`\n+  --> $DIR/recursive-type-2.rs:11:1\n+   |\n+LL | fn main() {\n+   | ^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0391`."}, {"sha": "37bae2e90a595a0252eabf1f907ff6b59857ce37", "filename": "src/test/ui/traits/issue-82830.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/76ce198128c136cf908a4dfb1146489ae4ae7db3/src%2Ftest%2Fui%2Ftraits%2Fissue-82830.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76ce198128c136cf908a4dfb1146489ae4ae7db3/src%2Ftest%2Fui%2Ftraits%2Fissue-82830.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-82830.rs?ref=76ce198128c136cf908a4dfb1146489ae4ae7db3", "patch": "@@ -1,10 +1,12 @@\n+// check-pass\n+\n trait A<Y, N> {\n     type B;\n }\n \n type MaybeBox<T> = <T as A<T, Box<T>>>::B;\n struct P {\n-    t: MaybeBox<P>, //~ ERROR: overflow evaluating the requirement `P: Sized`\n+    t: MaybeBox<P>,\n }\n \n impl<Y, N> A<Y, N> for P {"}, {"sha": "6a597a402156f1926912f3ac5bb958a4e53187ec", "filename": "src/test/ui/traits/issue-82830.stderr", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/cd30ccf9744a09fb4fd7d63703a3f29899a5e88d/src%2Ftest%2Fui%2Ftraits%2Fissue-82830.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd30ccf9744a09fb4fd7d63703a3f29899a5e88d/src%2Ftest%2Fui%2Ftraits%2Fissue-82830.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-82830.stderr?ref=cd30ccf9744a09fb4fd7d63703a3f29899a5e88d", "patch": "@@ -1,15 +0,0 @@\n-error[E0275]: overflow evaluating the requirement `P: Sized`\n-  --> $DIR/issue-82830.rs:7:8\n-   |\n-LL |     t: MaybeBox<P>,\n-   |        ^^^^^^^^^^^\n-   |\n-note: required for `P` to implement `A<P, Box<P>>`\n-  --> $DIR/issue-82830.rs:10:12\n-   |\n-LL | impl<Y, N> A<Y, N> for P {\n-   |            ^^^^^^^     ^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0275`."}]}