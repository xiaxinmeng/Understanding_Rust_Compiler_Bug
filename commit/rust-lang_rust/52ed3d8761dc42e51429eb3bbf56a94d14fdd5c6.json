{"sha": "52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyZWQzZDg3NjFkYzQyZTUxNDI5ZWIzYmJmNTZhOTRkMTRmZGQ1YzY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-24T05:43:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-24T05:43:32Z"}, "message": "Auto merge of #50191 - kennytm:rollup, r=kennytm\n\nRollup of 11 pull requests\n\nSuccessful merges:\n\n - #49461 (std: Child::kill() returns error if process has already exited)\n - #49727 (Add Cell::update)\n - #49812 (Fix revision support for UI tests.)\n - #49829 (Add doc links to `std::os` extension traits)\n - #49906 (Stabilize `std::hint::unreachable_unchecked`.)\n - #49970 (Deprecate Read::chars and char::decode_utf8)\n - #49985 (don't see issue #0)\n - #50118 (fix search bar bug)\n - #50139 (encourage descriptive issue titles)\n - #50174 (Use FxHashMap in syntax_pos::symbol::Interner::intern.)\n - #50185 (core: Fix overflow in `int::mod_euc` when `self < 0 && rhs == MIN`)\n\nFailed merges:", "tree": {"sha": "fe2dca988e2194b65e4103ff6012bdce4ab3433e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe2dca988e2194b65e4103ff6012bdce4ab3433e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6", "html_url": "https://github.com/rust-lang/rust/commit/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f305b025cf907d0bbdd2135ec59d89cd32e5cbe9", "url": "https://api.github.com/repos/rust-lang/rust/commits/f305b025cf907d0bbdd2135ec59d89cd32e5cbe9", "html_url": "https://github.com/rust-lang/rust/commit/f305b025cf907d0bbdd2135ec59d89cd32e5cbe9"}, {"sha": "893774e119b3197e12c1891b39d0e1e2830a362d", "url": "https://api.github.com/repos/rust-lang/rust/commits/893774e119b3197e12c1891b39d0e1e2830a362d", "html_url": "https://github.com/rust-lang/rust/commit/893774e119b3197e12c1891b39d0e1e2830a362d"}], "stats": {"total": 592, "additions": 425, "deletions": 167}, "files": [{"sha": "e7041dcddc42c1e222b3b5a8b8e7d23f188ae2c0", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6", "patch": "@@ -47,6 +47,12 @@ as it's possible that someone else has already reported your error. This doesn't\n always work, and sometimes it's hard to know what to search for, so consider this\n extra credit. We won't mind if you accidentally file a duplicate report.\n \n+Similarly, to help others who encountered the bug find your issue,\n+consider filing an issue with with a descriptive title, which contains information that might be unique to it.\n+This can be the language or compiler feature used, the conditions that trigger the bug,\n+or part of the error message if there is any.\n+An example could be: **\"impossible case reached\" on lifetime inference for impl Trait in return position**.\n+\n Opening an issue is as easy as following [this\n link](https://github.com/rust-lang/rust/issues/new) and filling out the fields.\n Here's a template that you can use to file a bug, though it's not necessary to"}, {"sha": "1ff187ed3f109722f397f705ce728e886494c87e", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6", "patch": "@@ -256,6 +256,33 @@ impl<T:Copy> Cell<T> {\n     pub fn get(&self) -> T {\n         unsafe{ *self.value.get() }\n     }\n+\n+    /// Updates the contained value using a function and returns the new value.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(cell_update)]\n+    ///\n+    /// use std::cell::Cell;\n+    ///\n+    /// let c = Cell::new(5);\n+    /// let new = c.update(|x| x + 1);\n+    ///\n+    /// assert_eq!(new, 6);\n+    /// assert_eq!(c.get(), 6);\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"cell_update\", issue = \"50186\")]\n+    pub fn update<F>(&self, f: F) -> T\n+    where\n+        F: FnOnce(T) -> T,\n+    {\n+        let old = self.get();\n+        let new = f(old);\n+        self.set(new);\n+        new\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "45a73191db2f2cfc0004644c2fdd2954c716d31f", "filename": "src/libcore/char/decode.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/src%2Flibcore%2Fchar%2Fdecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/src%2Flibcore%2Fchar%2Fdecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar%2Fdecode.rs?ref=52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6", "patch": "@@ -17,22 +17,32 @@ use super::from_u32_unchecked;\n /// An iterator over an iterator of bytes of the characters the bytes represent\n /// as UTF-8\n #[unstable(feature = \"decode_utf8\", issue = \"33906\")]\n+#[rustc_deprecated(since = \"1.27.0\", reason = \"Use str::from_utf8 instead:\n+    https://doc.rust-lang.org/nightly/std/str/struct.Utf8Error.html#examples\")]\n #[derive(Clone, Debug)]\n+#[allow(deprecated)]\n pub struct DecodeUtf8<I: Iterator<Item = u8>>(::iter::Peekable<I>);\n \n /// Decodes an `Iterator` of bytes as UTF-8.\n #[unstable(feature = \"decode_utf8\", issue = \"33906\")]\n+#[rustc_deprecated(since = \"1.27.0\", reason = \"Use str::from_utf8 instead:\n+    https://doc.rust-lang.org/nightly/std/str/struct.Utf8Error.html#examples\")]\n+#[allow(deprecated)]\n #[inline]\n pub fn decode_utf8<I: IntoIterator<Item = u8>>(i: I) -> DecodeUtf8<I::IntoIter> {\n     DecodeUtf8(i.into_iter().peekable())\n }\n \n /// `<DecodeUtf8 as Iterator>::next` returns this for an invalid input sequence.\n #[unstable(feature = \"decode_utf8\", issue = \"33906\")]\n+#[rustc_deprecated(since = \"1.27.0\", reason = \"Use str::from_utf8 instead:\n+    https://doc.rust-lang.org/nightly/std/str/struct.Utf8Error.html#examples\")]\n #[derive(PartialEq, Eq, Debug)]\n+#[allow(deprecated)]\n pub struct InvalidSequence(());\n \n #[unstable(feature = \"decode_utf8\", issue = \"33906\")]\n+#[allow(deprecated)]\n impl<I: Iterator<Item = u8>> Iterator for DecodeUtf8<I> {\n     type Item = Result<char, InvalidSequence>;\n     #[inline]\n@@ -127,6 +137,7 @@ impl<I: Iterator<Item = u8>> Iterator for DecodeUtf8<I> {\n }\n \n #[unstable(feature = \"decode_utf8\", issue = \"33906\")]\n+#[allow(deprecated)]\n impl<I: FusedIterator<Item = u8>> FusedIterator for DecodeUtf8<I> {}\n \n /// An iterator that decodes UTF-16 encoded code points from an iterator of `u16`s."}, {"sha": "4f6c302247dd2034864f3cbaf9c53bf4fa2e5b3f", "filename": "src/libcore/char/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/src%2Flibcore%2Fchar%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/src%2Flibcore%2Fchar%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar%2Fmod.rs?ref=52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6", "patch": "@@ -51,6 +51,9 @@ pub use unicode::tables::UNICODE_VERSION;\n #[unstable(feature = \"unicode_version\", issue = \"49726\")]\n pub use unicode::version::UnicodeVersion;\n #[unstable(feature = \"decode_utf8\", issue = \"33906\")]\n+#[rustc_deprecated(since = \"1.27.0\", reason = \"Use str::from_utf8 instead:\n+    https://doc.rust-lang.org/nightly/std/str/struct.Utf8Error.html#examples\")]\n+#[allow(deprecated)]\n pub use self::decode::{decode_utf8, DecodeUtf8, InvalidSequence};\n \n use fmt::{self, Write};"}, {"sha": "f4e96e67b2c66aeea3b8b7b73e7949fd2d1ffba2", "filename": "src/libcore/hint.rs", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/src%2Flibcore%2Fhint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/src%2Flibcore%2Fhint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhint.rs?ref=52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6", "patch": "@@ -0,0 +1,61 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![stable(feature = \"core_hint\", since = \"1.27.0\")]\n+\n+//! Hints to compiler that affects how code should be emitted or optimized.\n+\n+use intrinsics;\n+\n+/// Informs the compiler that this point in the code is not reachable, enabling\n+/// further optimizations.\n+///\n+/// # Safety\n+///\n+/// Reaching this function is completely *undefined behavior* (UB). In\n+/// particular, the compiler assumes that all UB must never happen, and\n+/// therefore will eliminate all branches that reach to a call to\n+/// `unreachable_unchecked()`.\n+///\n+/// Like all instances of UB, if this assumption turns out to be wrong, i.e. the\n+/// `unreachable_unchecked()` call is actually reachable among all possible\n+/// control flow, the compiler will apply the wrong optimization strategy, and\n+/// may sometimes even corrupt seemingly unrelated code, causing\n+/// difficult-to-debug problems.\n+///\n+/// Use this function only when you can prove that the code will never call it.\n+///\n+/// The [`unreachable!()`] macro is the safe counterpart of this function, which\n+/// will panic instead when executed.\n+///\n+/// [`unreachable!()`]: ../macro.unreachable.html\n+///\n+/// # Example\n+///\n+/// ```\n+/// fn div_1(a: u32, b: u32) -> u32 {\n+///     use std::hint::unreachable_unchecked;\n+///\n+///     // `b.saturating_add(1)` is always positive (not zero),\n+///     // hence `checked_div` will never return None.\n+///     // Therefore, the else branch is unreachable.\n+///     a.checked_div(b.saturating_add(1))\n+///         .unwrap_or_else(|| unsafe { unreachable_unchecked() })\n+/// }\n+///\n+/// assert_eq!(div_1(7, 0), 7);\n+/// assert_eq!(div_1(9, 1), 4);\n+/// assert_eq!(div_1(11, std::u32::MAX), 0);\n+/// ```\n+#[inline]\n+#[stable(feature = \"unreachable\", since = \"1.27.0\")]\n+pub unsafe fn unreachable_unchecked() -> ! {\n+    intrinsics::unreachable()\n+}"}, {"sha": "fb0d2d9c882196da3d7189d234ad7a9a992e5c93", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6", "patch": "@@ -638,6 +638,9 @@ extern \"rust-intrinsic\" {\n     /// NB: This is very different from the `unreachable!()` macro: Unlike the\n     /// macro, which panics when it is executed, it is *undefined behavior* to\n     /// reach code marked with this function.\n+    ///\n+    /// The stabilized version of this intrinsic is\n+    /// [`std::hint::unreachable_unchecked`](../../std/hint/fn.unreachable_unchecked.html).\n     pub fn unreachable() -> !;\n \n     /// Informs the optimizer that a condition is always true."}, {"sha": "0e21a3327fddf471f6a486fb9e1f222f5e545981", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6", "patch": "@@ -163,6 +163,7 @@ pub mod intrinsics;\n pub mod mem;\n pub mod nonzero;\n pub mod ptr;\n+pub mod hint;\n \n /* Core language traits */\n "}, {"sha": "f9371ed0575e49782f7471320d83c5b852d663a1", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6", "patch": "@@ -421,13 +421,13 @@ macro_rules! writeln {\n /// * Iterators that dynamically terminate.\n ///\n /// If the determination that the code is unreachable proves incorrect, the\n-/// program immediately terminates with a [`panic!`].  The function [`unreachable`],\n-/// which belongs to the [`std::intrinsics`] module, informs the compilier to\n+/// program immediately terminates with a [`panic!`].  The function [`unreachable_unchecked`],\n+/// which belongs to the [`std::hint`] module, informs the compilier to\n /// optimize the code out of the release version entirely.\n ///\n /// [`panic!`]:  ../std/macro.panic.html\n-/// [`unreachable`]: ../std/intrinsics/fn.unreachable.html\n-/// [`std::intrinsics`]: ../std/intrinsics/index.html\n+/// [`unreachable_unchecked`]: ../std/hint/fn.unreachable_unchecked.html\n+/// [`std::hint`]: ../std/hint/index.html\n ///\n /// # Panics\n ///"}, {"sha": "10efab82ddff586d6c44671388968ecf8e8a318f", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6", "patch": "@@ -1094,18 +1094,6 @@ impl<T: ::hash::Hash> ::hash::Hash for ManuallyDrop<T> {\n     }\n }\n \n-/// Tells LLVM that this point in the code is not reachable, enabling further\n-/// optimizations.\n-///\n-/// NB: This is very different from the `unreachable!()` macro: Unlike the\n-/// macro, which panics when it is executed, it is *undefined behavior* to\n-/// reach code marked with this function.\n-#[inline]\n-#[unstable(feature = \"unreachable\", issue = \"43751\")]\n-pub unsafe fn unreachable() -> ! {\n-    intrinsics::unreachable()\n-}\n-\n /// A pinned reference.\n ///\n /// A pinned reference is a lot like a mutable reference, except that it is not"}, {"sha": "a062fbda5bad0bcd0add87188743a596f2679a5b", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6", "patch": "@@ -1765,7 +1765,11 @@ assert_eq!((-a).mod_euc(-b), 1);\n             pub fn mod_euc(self, rhs: Self) -> Self {\n                 let r = self % rhs;\n                 if r < 0 {\n-                    r + rhs.abs()\n+                    if rhs < 0 {\n+                        r - rhs\n+                    } else {\n+                        r + rhs\n+                    }\n                 } else {\n                     r\n                 }"}, {"sha": "962fb2f0e027b3924507205b43145beccef82485", "filename": "src/libcore/tests/cell.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/src%2Flibcore%2Ftests%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/src%2Flibcore%2Ftests%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fcell.rs?ref=52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6", "patch": "@@ -26,6 +26,17 @@ fn smoketest_cell() {\n     assert!(y.get() == (30, 40));\n }\n \n+#[test]\n+fn cell_update() {\n+    let x = Cell::new(10);\n+\n+    assert_eq!(x.update(|x| x + 5), 15);\n+    assert_eq!(x.get(), 15);\n+\n+    assert_eq!(x.update(|x| x / 3), 5);\n+    assert_eq!(x.get(), 5);\n+}\n+\n #[test]\n fn cell_has_sensible_show() {\n     let x = Cell::new(\"foo bar\");"}, {"sha": "ab90763abf8d5ef8ad335e7cf97058b23c406920", "filename": "src/libcore/tests/char.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/src%2Flibcore%2Ftests%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/src%2Flibcore%2Ftests%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fchar.rs?ref=52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6", "patch": "@@ -364,6 +364,7 @@ fn eu_iterator_specializations() {\n }\n \n #[test]\n+#[allow(deprecated)]\n fn test_decode_utf8() {\n     macro_rules! assert_decode_utf8 {\n         ($input_bytes: expr, $expected_str: expr) => {"}, {"sha": "e4d277179382f3e522259bbc67abebafaab8b3d4", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6", "patch": "@@ -10,11 +10,13 @@\n \n #![feature(ascii_ctype)]\n #![feature(box_syntax)]\n+#![feature(cell_update)]\n #![feature(core_float)]\n #![feature(core_private_bignum)]\n #![feature(core_private_diy_float)]\n #![feature(dec2flt)]\n #![feature(decode_utf8)]\n+#![feature(euclidean_division)]\n #![feature(exact_size_is_empty)]\n #![feature(fixed_size_array)]\n #![feature(float_internals)]"}, {"sha": "71d2e7945389ba63aac87a3844a1d55344821d1f", "filename": "src/libcore/tests/num/int_macros.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/src%2Flibcore%2Ftests%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/src%2Flibcore%2Ftests%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnum%2Fint_macros.rs?ref=52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6", "patch": "@@ -30,6 +30,11 @@ mod tests {\n         num::test_num(10 as $T, 2 as $T);\n     }\n \n+    #[test]\n+    fn test_mod_euc() {\n+        assert!((-1 as $T).mod_euc(MIN) == MAX);\n+    }\n+\n     #[test]\n     pub fn test_abs() {\n         assert!((1 as $T).abs() == 1 as $T);"}, {"sha": "ef8bf2244d97763186352b7593fb50a3da93dd4a", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6", "patch": "@@ -1375,13 +1375,17 @@\n \n         function search(e) {\n             var params = getQueryStringParams();\n-            var query = getQuery(document.getElementsByClassName('search-input')[0].value.trim());\n+            var search_input = document.getElementsByClassName('search-input')[0];\n+            var query = getQuery(search_input.value.trim());\n \n             if (e) {\n                 e.preventDefault();\n             }\n \n             if (!query.query || query.id === currentResults) {\n+                if (query.query.length > 0) {\n+                    putBackSearch(search_input);\n+                }\n                 return;\n             }\n \n@@ -2072,19 +2076,23 @@\n         };\n     });\n \n+    function putBackSearch(search_input) {\n+        if (search_input.value !== \"\") {\n+            addClass(document.getElementById(\"main\"), \"hidden\");\n+            removeClass(document.getElementById(\"search\"), \"hidden\");\n+            if (browserSupportsHistoryApi()) {\n+                history.replaceState(search_input.value,\n+                                     \"\",\n+                                     \"?search=\" + encodeURIComponent(search_input.value));\n+            }\n+        }\n+    }\n+\n     var search_input = document.getElementsByClassName(\"search-input\")[0];\n \n     if (search_input) {\n         search_input.onfocus = function() {\n-            if (search_input.value !== \"\") {\n-                addClass(document.getElementById(\"main\"), \"hidden\");\n-                removeClass(document.getElementById(\"search\"), \"hidden\");\n-                if (browserSupportsHistoryApi()) {\n-                    history.replaceState(search_input.value,\n-                                         \"\",\n-                                         \"?search=\" + encodeURIComponent(search_input.value));\n-                }\n-            }\n+            putBackSearch(this);\n         };\n     }\n "}, {"sha": "ee297d3783e522caf24a8ca4b8f79d313770895d", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6", "patch": "@@ -1251,13 +1251,15 @@ mod tests {\n     }\n \n     #[test]\n+    #[allow(deprecated)]\n     fn read_char_buffered() {\n         let buf = [195, 159];\n         let reader = BufReader::with_capacity(1, &buf[..]);\n         assert_eq!(reader.chars().next().unwrap().unwrap(), '\u00df');\n     }\n \n     #[test]\n+    #[allow(deprecated)]\n     fn test_chars() {\n         let buf = [195, 159, b'a'];\n         let reader = BufReader::with_capacity(1, &buf[..]);"}, {"sha": "8ac52572810c6c99e2ce8ccddaa0d1be66174a55", "filename": "src/libstd/io/cursor.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/src%2Flibstd%2Fio%2Fcursor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/src%2Flibstd%2Fio%2Fcursor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fcursor.rs?ref=52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6", "patch": "@@ -566,6 +566,7 @@ mod tests {\n     }\n \n     #[test]\n+    #[allow(deprecated)]\n     fn test_read_char() {\n         let b = &b\"Vi\\xE1\\xBB\\x87t\"[..];\n         let mut c = Cursor::new(b).chars();\n@@ -577,6 +578,7 @@ mod tests {\n     }\n \n     #[test]\n+    #[allow(deprecated)]\n     fn test_read_bad_char() {\n         let b = &b\"\\x80\"[..];\n         let mut c = Cursor::new(b).chars();"}, {"sha": "eba4e9fe70368f6de4e853316ede9a6110e43ab1", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6", "patch": "@@ -840,6 +840,9 @@ pub trait Read {\n                                          of where errors happen is currently \\\n                                          unclear and may change\",\n                issue = \"27802\")]\n+    #[rustc_deprecated(since = \"1.27.0\", reason = \"Use str::from_utf8 instead:\n+        https://doc.rust-lang.org/nightly/std/str/struct.Utf8Error.html#examples\")]\n+    #[allow(deprecated)]\n     fn chars(self) -> Chars<Self> where Self: Sized {\n         Chars { inner: self }\n     }\n@@ -2010,16 +2013,22 @@ impl<R: Read> Iterator for Bytes<R> {\n /// [chars]: trait.Read.html#method.chars\n #[unstable(feature = \"io\", reason = \"awaiting stability of Read::chars\",\n            issue = \"27802\")]\n+#[rustc_deprecated(since = \"1.27.0\", reason = \"Use str::from_utf8 instead:\n+    https://doc.rust-lang.org/nightly/std/str/struct.Utf8Error.html#examples\")]\n #[derive(Debug)]\n+#[allow(deprecated)]\n pub struct Chars<R> {\n     inner: R,\n }\n \n /// An enumeration of possible errors that can be generated from the `Chars`\n /// adapter.\n-#[derive(Debug)]\n #[unstable(feature = \"io\", reason = \"awaiting stability of Read::chars\",\n            issue = \"27802\")]\n+#[rustc_deprecated(since = \"1.27.0\", reason = \"Use str::from_utf8 instead:\n+    https://doc.rust-lang.org/nightly/std/str/struct.Utf8Error.html#examples\")]\n+#[derive(Debug)]\n+#[allow(deprecated)]\n pub enum CharsError {\n     /// Variant representing that the underlying stream was read successfully\n     /// but it did not contain valid utf8 data.\n@@ -2031,6 +2040,7 @@ pub enum CharsError {\n \n #[unstable(feature = \"io\", reason = \"awaiting stability of Read::chars\",\n            issue = \"27802\")]\n+#[allow(deprecated)]\n impl<R: Read> Iterator for Chars<R> {\n     type Item = result::Result<char, CharsError>;\n \n@@ -2063,6 +2073,7 @@ impl<R: Read> Iterator for Chars<R> {\n \n #[unstable(feature = \"io\", reason = \"awaiting stability of Read::chars\",\n            issue = \"27802\")]\n+#[allow(deprecated)]\n impl std_error::Error for CharsError {\n     fn description(&self) -> &str {\n         match *self {\n@@ -2080,6 +2091,7 @@ impl std_error::Error for CharsError {\n \n #[unstable(feature = \"io\", reason = \"awaiting stability of Read::chars\",\n            issue = \"27802\")]\n+#[allow(deprecated)]\n impl fmt::Display for CharsError {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {"}, {"sha": "419921931350906e5c9223ace3e19de4d80a63c0", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6", "patch": "@@ -461,6 +461,8 @@ pub use alloc_crate::vec;\n pub use core::char;\n #[stable(feature = \"i128\", since = \"1.26.0\")]\n pub use core::u128;\n+#[stable(feature = \"core_hint\", since = \"1.27.0\")]\n+pub use core::hint;\n \n pub mod f32;\n pub mod f64;"}, {"sha": "5899dc688e22563bc69dd709f0224dc696b7c9bd", "filename": "src/libstd/os/android/fs.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/src%2Flibstd%2Fos%2Fandroid%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/src%2Flibstd%2Fos%2Fandroid%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fandroid%2Ffs.rs?ref=52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6", "patch": "@@ -18,7 +18,9 @@ use sys_common::AsInner;\n #[allow(deprecated)]\n use os::android::raw;\n \n-/// OS-specific extension methods for `fs::Metadata`\n+/// OS-specific extensions to [`fs::Metadata`].\n+///\n+/// [`fs::Metadata`]: ../../../../std/fs/struct.Metadata.html\n #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n pub trait MetadataExt {\n     /// Gain a reference to the underlying `stat` structure which contains"}, {"sha": "24caf326ab0fd2dba4b6cf69242d2f675667c296", "filename": "src/libstd/os/bitrig/fs.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/src%2Flibstd%2Fos%2Fbitrig%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/src%2Flibstd%2Fos%2Fbitrig%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fbitrig%2Ffs.rs?ref=52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6", "patch": "@@ -18,7 +18,9 @@ use sys_common::AsInner;\n #[allow(deprecated)]\n use os::bitrig::raw;\n \n-/// OS-specific extension methods for `fs::Metadata`\n+/// OS-specific extensions to [`fs::Metadata`].\n+///\n+/// [`fs::Metadata`]: ../../../../std/fs/struct.Metadata.html\n #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n pub trait MetadataExt {\n     /// Gain a reference to the underlying `stat` structure which contains"}, {"sha": "6aea450774ffd39d9bb48a3dc04b1386604f09fb", "filename": "src/libstd/os/dragonfly/fs.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/src%2Flibstd%2Fos%2Fdragonfly%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/src%2Flibstd%2Fos%2Fdragonfly%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fdragonfly%2Ffs.rs?ref=52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6", "patch": "@@ -18,7 +18,9 @@ use sys_common::AsInner;\n #[allow(deprecated)]\n use os::dragonfly::raw;\n \n-/// OS-specific extension methods for `fs::Metadata`\n+/// OS-specific extensions to [`fs::Metadata`].\n+///\n+/// [`fs::Metadata`]: ../../../../std/fs/struct.Metadata.html\n #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n pub trait MetadataExt {\n     /// Gain a reference to the underlying `stat` structure which contains"}, {"sha": "e0e197dc122a1d2aaa9f36e02b67d7a0ad30d64f", "filename": "src/libstd/os/emscripten/fs.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/src%2Flibstd%2Fos%2Femscripten%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/src%2Flibstd%2Fos%2Femscripten%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Femscripten%2Ffs.rs?ref=52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6", "patch": "@@ -18,7 +18,9 @@ use sys_common::AsInner;\n #[allow(deprecated)]\n use os::emscripten::raw;\n \n-/// OS-specific extension methods for `fs::Metadata`\n+/// OS-specific extensions to [`fs::Metadata`].\n+///\n+/// [`fs::Metadata`]: ../../../../std/fs/struct.Metadata.html\n #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n pub trait MetadataExt {\n     /// Gain a reference to the underlying `stat` structure which contains"}, {"sha": "5f24cd636d541ab75611244212d9f86a1ba712f3", "filename": "src/libstd/os/freebsd/fs.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/src%2Flibstd%2Fos%2Ffreebsd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/src%2Flibstd%2Fos%2Ffreebsd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Ffreebsd%2Ffs.rs?ref=52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6", "patch": "@@ -18,7 +18,9 @@ use sys_common::AsInner;\n #[allow(deprecated)]\n use os::freebsd::raw;\n \n-/// OS-specific extension methods for `fs::Metadata`\n+/// OS-specific extensions to [`fs::Metadata`].\n+///\n+/// [`fs::Metadata`]: ../../../../std/fs/struct.Metadata.html\n #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n pub trait MetadataExt {\n     /// Gain a reference to the underlying `stat` structure which contains"}, {"sha": "16802576356d192b24d762642d10c6d1c735da52", "filename": "src/libstd/os/fuchsia/fs.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/src%2Flibstd%2Fos%2Ffuchsia%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/src%2Flibstd%2Fos%2Ffuchsia%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Ffuchsia%2Ffs.rs?ref=52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6", "patch": "@@ -13,7 +13,9 @@\n use fs::Metadata;\n use sys_common::AsInner;\n \n-/// OS-specific extension methods for `fs::Metadata`\n+/// OS-specific extensions to [`fs::Metadata`].\n+///\n+/// [`fs::Metadata`]: ../../../../std/fs/struct.Metadata.html\n #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n pub trait MetadataExt {\n     #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]"}, {"sha": "453136e0ac864afe4cf42f0a875d20ec2e90fb65", "filename": "src/libstd/os/haiku/fs.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/src%2Flibstd%2Fos%2Fhaiku%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/src%2Flibstd%2Fos%2Fhaiku%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fhaiku%2Ffs.rs?ref=52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6", "patch": "@@ -18,7 +18,9 @@ use sys_common::AsInner;\n #[allow(deprecated)]\n use os::haiku::raw;\n \n-/// OS-specific extension methods for `fs::Metadata`\n+/// OS-specific extensions to [`fs::Metadata`].\n+///\n+/// [`fs::Metadata`]: ../../../../std/fs/struct.Metadata.html\n #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n pub trait MetadataExt {\n     /// Gain a reference to the underlying `stat` structure which contains"}, {"sha": "296ce69ff43620e7f0aa70b01879f01ba1362cf3", "filename": "src/libstd/os/ios/fs.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/src%2Flibstd%2Fos%2Fios%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/src%2Flibstd%2Fos%2Fios%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fios%2Ffs.rs?ref=52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6", "patch": "@@ -18,7 +18,9 @@ use sys_common::AsInner;\n #[allow(deprecated)]\n use os::ios::raw;\n \n-/// OS-specific extension methods for `fs::Metadata`\n+/// OS-specific extensions to [`fs::Metadata`].\n+///\n+/// [`fs::Metadata`]: ../../../../std/fs/struct.Metadata.html\n #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n pub trait MetadataExt {\n     /// Gain a reference to the underlying `stat` structure which contains"}, {"sha": "76fb10da850b16b4044cd86fdfc4284d970dea53", "filename": "src/libstd/os/linux/fs.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/src%2Flibstd%2Fos%2Flinux%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/src%2Flibstd%2Fos%2Flinux%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Flinux%2Ffs.rs?ref=52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6", "patch": "@@ -18,7 +18,9 @@ use sys_common::AsInner;\n #[allow(deprecated)]\n use os::linux::raw;\n \n-/// OS-specific extension methods for `fs::Metadata`\n+/// OS-specific extensions to [`fs::Metadata`].\n+///\n+/// [`fs::Metadata`]: ../../../../std/fs/struct.Metadata.html\n #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n pub trait MetadataExt {\n     /// Gain a reference to the underlying `stat` structure which contains"}, {"sha": "0b14c05cb5519bffbaf6481ece1af64d52ae18df", "filename": "src/libstd/os/macos/fs.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/src%2Flibstd%2Fos%2Fmacos%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/src%2Flibstd%2Fos%2Fmacos%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fmacos%2Ffs.rs?ref=52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6", "patch": "@@ -18,7 +18,9 @@ use sys_common::AsInner;\n #[allow(deprecated)]\n use os::macos::raw;\n \n-/// OS-specific extension methods for `fs::Metadata`\n+/// OS-specific extensions to [`fs::Metadata`].\n+///\n+/// [`fs::Metadata`]: ../../../../std/fs/struct.Metadata.html\n #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n pub trait MetadataExt {\n     /// Gain a reference to the underlying `stat` structure which contains"}, {"sha": "e9cad33fee61d7fceea55e767dff2e1f6081b832", "filename": "src/libstd/os/netbsd/fs.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/src%2Flibstd%2Fos%2Fnetbsd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/src%2Flibstd%2Fos%2Fnetbsd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fnetbsd%2Ffs.rs?ref=52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6", "patch": "@@ -18,7 +18,9 @@ use sys_common::AsInner;\n #[allow(deprecated)]\n use os::netbsd::raw;\n \n-/// OS-specific extension methods for `fs::Metadata`\n+/// OS-specific extensions to [`fs::Metadata`].\n+///\n+/// [`fs::Metadata`]: ../../../../std/fs/struct.Metadata.html\n #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n pub trait MetadataExt {\n     /// Gain a reference to the underlying `stat` structure which contains"}, {"sha": "0f6b83b6e324b56cf8e2f68d907fd4093ac279a9", "filename": "src/libstd/os/openbsd/fs.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/src%2Flibstd%2Fos%2Fopenbsd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/src%2Flibstd%2Fos%2Fopenbsd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fopenbsd%2Ffs.rs?ref=52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6", "patch": "@@ -18,7 +18,9 @@ use sys_common::AsInner;\n #[allow(deprecated)]\n use os::openbsd::raw;\n \n-/// OS-specific extension methods for `fs::Metadata`\n+/// OS-specific extensions to [`fs::Metadata`].\n+///\n+/// [`fs::Metadata`]: ../../../../std/fs/struct.Metadata.html\n #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n pub trait MetadataExt {\n     /// Gain a reference to the underlying `stat` structure which contains"}, {"sha": "19dce1ba34c76c98482094cec0ea0ccc117bbf22", "filename": "src/libstd/os/solaris/fs.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/src%2Flibstd%2Fos%2Fsolaris%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/src%2Flibstd%2Fos%2Fsolaris%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fsolaris%2Ffs.rs?ref=52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6", "patch": "@@ -18,7 +18,9 @@ use sys_common::AsInner;\n #[allow(deprecated)]\n use os::solaris::raw;\n \n-/// OS-specific extension methods for `fs::Metadata`\n+/// OS-specific extensions to [`fs::Metadata`].\n+///\n+/// [`fs::Metadata`]: ../../../../std/fs/struct.Metadata.html\n #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n pub trait MetadataExt {\n     /// Gain a reference to the underlying `stat` structure which contains"}, {"sha": "00051d4487a214eac90bef8a089468bea345b835", "filename": "src/libstd/process.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6", "patch": "@@ -1121,8 +1121,13 @@ impl ExitCode {\n }\n \n impl Child {\n-    /// Forces the child to exit. This is equivalent to sending a\n-    /// SIGKILL on unix platforms.\n+    /// Forces the child process to exit. If the child has already exited, an [`InvalidInput`]\n+    /// error is returned.\n+    ///\n+    /// The mapping to [`ErrorKind`]s is not part of the compatibility contract of the function,\n+    /// especially the [`Other`] kind might change to more specific kinds in the future.\n+    ///\n+    /// This is equivalent to sending a SIGKILL on Unix platforms.\n     ///\n     /// # Examples\n     ///\n@@ -1138,6 +1143,10 @@ impl Child {\n     ///     println!(\"yes command didn't start\");\n     /// }\n     /// ```\n+    ///\n+    /// [`ErrorKind`]: ../io/enum.ErrorKind.html\n+    /// [`InvalidInput`]: ../io/enum.ErrorKind.html#variant.InvalidInput\n+    /// [`Other`]: ../io/enum.ErrorKind.html#variant.Other\n     #[stable(feature = \"process\", since = \"1.0.0\")]\n     pub fn kill(&mut self) -> io::Result<()> {\n         self.handle.kill()"}, {"sha": "cd88c8f46b3c0c6b3ef78a0342306b7b6a0642a9", "filename": "src/libstd/sys/redox/ext/ffi.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fffi.rs?ref=52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Unix-specific extension to the primitives in the `std::ffi` module\n+//! Redox-specific extension to the primitives in the `std::ffi` module.\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n@@ -17,7 +17,9 @@ use mem;\n use sys::os_str::Buf;\n use sys_common::{FromInner, IntoInner, AsInner};\n \n-/// Unix-specific extensions to `OsString`.\n+/// Redox-specific extensions to [`OsString`].\n+///\n+/// [`OsString`]: ../../../../std/ffi/struct.OsString.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait OsStringExt {\n     /// Creates an `OsString` from a byte vector.\n@@ -39,7 +41,9 @@ impl OsStringExt for OsString {\n     }\n }\n \n-/// Unix-specific extensions to `OsStr`.\n+/// Redox-specific extensions to [`OsStr`].\n+///\n+/// [`OsStr`]: ../../../../std/ffi/struct.OsStr.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait OsStrExt {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "c1dba6edda484f66e6f702555d91ce372166f826", "filename": "src/libstd/sys/redox/ext/fs.rs", "status": "modified", "additions": 25, "deletions": 11, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/src%2Flibstd%2Fsys%2Fredox%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/src%2Flibstd%2Fsys%2Fredox%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fext%2Ffs.rs?ref=52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6", "patch": "@@ -18,7 +18,9 @@ use path::Path;\n use sys;\n use sys_common::{FromInner, AsInner, AsInnerMut};\n \n-/// Redox-specific extensions to `Permissions`\n+/// Redox-specific extensions to [`fs::Permissions`].\n+///\n+/// [`fs::Permissions`]: ../../../../std/fs/struct.Permissions.html\n #[stable(feature = \"fs_ext\", since = \"1.1.0\")]\n pub trait PermissionsExt {\n     /// Returns the underlying raw `mode_t` bits that are the standard Redox\n@@ -95,7 +97,9 @@ impl PermissionsExt for Permissions {\n     }\n }\n \n-/// Redox-specific extensions to `OpenOptions`\n+/// Redox-specific extensions to [`fs::OpenOptions`].\n+///\n+/// [`fs::OpenOptions`]: ../../../../std/fs/struct.OpenOptions.html\n #[stable(feature = \"fs_ext\", since = \"1.1.0\")]\n pub trait OpenOptionsExt {\n     /// Sets the mode bits that a new file will be created with.\n@@ -163,13 +167,9 @@ impl OpenOptionsExt for OpenOptions {\n     }\n }\n \n-// Hm, why are there casts here to the returned type, shouldn't the types always\n-// be the same? Right you are! Turns out, however, on android at least the types\n-// in the raw `stat` structure are not the same as the types being returned. Who\n-// knew!\n-//\n-// As a result to make sure this compiles for all platforms we do the manual\n-// casts and rely on manual lowering to `stat` if the raw type is desired.\n+/// Redox-specific extensions to [`fs::Metadata`].\n+///\n+/// [`fs::Metadata`]: ../../../../std/fs/struct.Metadata.html\n #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n pub trait MetadataExt {\n     #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n@@ -204,6 +204,13 @@ pub trait MetadataExt {\n     fn blocks(&self) -> u64;\n }\n \n+// Hm, why are there casts here to the returned type, shouldn't the types always\n+// be the same? Right you are! Turns out, however, on android at least the types\n+// in the raw `stat` structure are not the same as the types being returned. Who\n+// knew!\n+//\n+// As a result to make sure this compiles for all platforms we do the manual\n+// casts and rely on manual lowering to `stat` if the raw type is desired.\n #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n impl MetadataExt for fs::Metadata {\n     fn dev(&self) -> u64 {\n@@ -253,7 +260,12 @@ impl MetadataExt for fs::Metadata {\n     }\n }\n \n-/// Add special Redox types (block/char device, fifo and socket)\n+/// Redox-specific extensions for [`FileType`].\n+///\n+/// Adds support for special Unix file types such as block/character devices,\n+/// pipes, and sockets.\n+///\n+/// [`FileType`]: ../../../../std/fs/struct.FileType.html\n #[stable(feature = \"file_type_ext\", since = \"1.5.0\")]\n pub trait FileTypeExt {\n     /// Returns whether this file type is a block device.\n@@ -307,8 +319,10 @@ pub fn symlink<P: AsRef<Path>, Q: AsRef<Path>>(src: P, dst: Q) -> io::Result<()>\n     sys::fs::symlink(src.as_ref(), dst.as_ref())\n }\n \n+/// Redox-specific extensions to [`fs::DirBuilder`].\n+///\n+/// [`fs::DirBuilder`]: ../../../../std/fs/struct.DirBuilder.html\n #[stable(feature = \"dir_builder\", since = \"1.6.0\")]\n-/// An extension trait for `fs::DirBuilder` for Redox-specific options.\n pub trait DirBuilderExt {\n     /// Sets the mode to create new directories with. This option defaults to\n     /// 0o777."}, {"sha": "cfb6d5fc703a614ef84e1c2b363ed8d7bb8b48c5", "filename": "src/libstd/sys/redox/ext/process.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fprocess.rs?ref=52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Unix-specific extensions to primitives in the `std::process` module.\n+//! Redox-specific extensions to primitives in the `std::process` module.\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n@@ -18,7 +18,9 @@ use process;\n use sys;\n use sys_common::{AsInnerMut, AsInner, FromInner, IntoInner};\n \n-/// Unix-specific extensions to the `std::process::Command` builder\n+/// Redox-specific extensions to the [`process::Command`] builder,\n+///\n+/// [`process::Command`]: ../../../../std/process/struct.Command.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait CommandExt {\n     /// Sets the child process's user id. This translates to a\n@@ -107,7 +109,9 @@ impl CommandExt for process::Command {\n     }\n }\n \n-/// Unix-specific extensions to `std::process::ExitStatus`\n+/// Redox-specific extensions to [`process::ExitStatus`].\n+///\n+/// [`process::ExitStatus`]: ../../../../std/process/struct.ExitStatus.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait ExitStatusExt {\n     /// Creates a new `ExitStatus` from the raw underlying `i32` return value of"}, {"sha": "71ff0d46b91e31f8553689730f1ccc9d2a519e7b", "filename": "src/libstd/sys/redox/ext/thread.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fext%2Fthread.rs?ref=52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Unix-specific extensions to primitives in the `std::thread` module.\n+//! Redox-specific extensions to primitives in the `std::thread` module.\n \n #![stable(feature = \"thread_extensions\", since = \"1.9.0\")]\n \n@@ -19,7 +19,9 @@ use thread::JoinHandle;\n #[allow(deprecated)]\n pub type RawPthread = usize;\n \n-/// Unix-specific extensions to `std::thread::JoinHandle`\n+/// Redox-specific extensions to [`thread::JoinHandle`].\n+///\n+/// [`thread::JoinHandle`]: ../../../../std/thread/struct.JoinHandle.html\n #[stable(feature = \"thread_extensions\", since = \"1.9.0\")]\n pub trait JoinHandleExt {\n     /// Extracts the raw pthread_t without taking ownership"}, {"sha": "8347145db5aaf493a9c8ad3cf379415c5897a5bd", "filename": "src/libstd/sys/unix/ext/ffi.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/src%2Flibstd%2Fsys%2Funix%2Fext%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/src%2Flibstd%2Fsys%2Funix%2Fext%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fffi.rs?ref=52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6", "patch": "@@ -17,7 +17,9 @@ use mem;\n use sys::os_str::Buf;\n use sys_common::{FromInner, IntoInner, AsInner};\n \n-/// Unix-specific extensions to `OsString`.\n+/// Unix-specific extensions to [`OsString`].\n+///\n+/// [`OsString`]: ../../../../std/ffi/struct.OsString.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait OsStringExt {\n     /// Creates an [`OsString`] from a byte vector.\n@@ -66,7 +68,9 @@ impl OsStringExt for OsString {\n     }\n }\n \n-/// Unix-specific extensions to `OsStr`.\n+/// Unix-specific extensions to [`OsStr`].\n+///\n+/// [`OsStr`]: ../../../../std/ffi/struct.OsStr.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait OsStrExt {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "4e981012669033ff393d85a44f1511bab82df6a0", "filename": "src/libstd/sys/unix/ext/fs.rs", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs?ref=52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6", "patch": "@@ -105,7 +105,9 @@ impl FileExt for fs::File {\n     }\n }\n \n-/// Unix-specific extensions to `Permissions`\n+/// Unix-specific extensions to [`fs::Permissions`].\n+///\n+/// [`fs::Permissions`]: ../../../../std/fs/struct.Permissions.html\n #[stable(feature = \"fs_ext\", since = \"1.1.0\")]\n pub trait PermissionsExt {\n     /// Returns the underlying raw `st_mode` bits that contain the standard\n@@ -180,7 +182,9 @@ impl PermissionsExt for Permissions {\n     }\n }\n \n-/// Unix-specific extensions to `OpenOptions`\n+/// Unix-specific extensions to [`fs::OpenOptions`].\n+///\n+/// [`fs::OpenOptions`]: ../../../../std/fs/struct.OpenOptions.html\n #[stable(feature = \"fs_ext\", since = \"1.1.0\")]\n pub trait OpenOptionsExt {\n     /// Sets the mode bits that a new file will be created with.\n@@ -246,13 +250,9 @@ impl OpenOptionsExt for OpenOptions {\n     }\n }\n \n-// Hm, why are there casts here to the returned type, shouldn't the types always\n-// be the same? Right you are! Turns out, however, on android at least the types\n-// in the raw `stat` structure are not the same as the types being returned. Who\n-// knew!\n-//\n-// As a result to make sure this compiles for all platforms we do the manual\n-// casts and rely on manual lowering to `stat` if the raw type is desired.\n+/// Unix-specific extensions to [`fs::Metadata`].\n+///\n+/// [`fs::Metadata`]: ../../../../std/fs/struct.Metadata.html\n #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n pub trait MetadataExt {\n     /// Returns the ID of the device containing the file.\n@@ -555,7 +555,12 @@ impl MetadataExt for fs::Metadata {\n     fn blocks(&self) -> u64 { self.st_blocks() }\n }\n \n-/// Add support for special unix types (block/char device, fifo and socket).\n+/// Unix-specific extensions for [`FileType`].\n+///\n+/// Adds support for special Unix file types such as block/character devices,\n+/// pipes, and sockets.\n+///\n+/// [`FileType`]: ../../../../std/fs/struct.FileType.html\n #[stable(feature = \"file_type_ext\", since = \"1.5.0\")]\n pub trait FileTypeExt {\n     /// Returns whether this file type is a block device.\n@@ -701,10 +706,10 @@ pub fn symlink<P: AsRef<Path>, Q: AsRef<Path>>(src: P, dst: Q) -> io::Result<()>\n     sys::fs::symlink(src.as_ref(), dst.as_ref())\n }\n \n-#[stable(feature = \"dir_builder\", since = \"1.6.0\")]\n-/// An extension trait for [`fs::DirBuilder`] for unix-specific options.\n+/// Unix-specific extensions to [`fs::DirBuilder`].\n ///\n /// [`fs::DirBuilder`]: ../../../../std/fs/struct.DirBuilder.html\n+#[stable(feature = \"dir_builder\", since = \"1.6.0\")]\n pub trait DirBuilderExt {\n     /// Sets the mode to create new directories with. This option defaults to\n     /// 0o777."}, {"sha": "21630ae9746fcdcca4aa3a4fe97a1e77fa551600", "filename": "src/libstd/sys/unix/ext/process.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/src%2Flibstd%2Fsys%2Funix%2Fext%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/src%2Flibstd%2Fsys%2Funix%2Fext%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fprocess.rs?ref=52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6", "patch": "@@ -18,7 +18,9 @@ use process;\n use sys;\n use sys_common::{AsInnerMut, AsInner, FromInner, IntoInner};\n \n-/// Unix-specific extensions to the `std::process::Command` builder\n+/// Unix-specific extensions to the [`process::Command`] builder.\n+///\n+/// [`process::Command`]: ../../../../std/process/struct.Command.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait CommandExt {\n     /// Sets the child process's user id. This translates to a\n@@ -117,7 +119,9 @@ impl CommandExt for process::Command {\n     }\n }\n \n-/// Unix-specific extensions to `std::process::ExitStatus`\n+/// Unix-specific extensions to [`process::ExitStatus`].\n+///\n+/// [`process::ExitStatus`]: ../../../../std/process/struct.ExitStatus.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait ExitStatusExt {\n     /// Creates a new `ExitStatus` from the raw underlying `i32` return value of"}, {"sha": "8dadf29945c1a816a217cfb12f0634bb4189acf5", "filename": "src/libstd/sys/unix/ext/thread.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/src%2Flibstd%2Fsys%2Funix%2Fext%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/src%2Flibstd%2Fsys%2Funix%2Fext%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fthread.rs?ref=52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6", "patch": "@@ -21,7 +21,9 @@ use thread::JoinHandle;\n #[allow(deprecated)]\n pub type RawPthread = pthread_t;\n \n-/// Unix-specific extensions to `std::thread::JoinHandle`\n+/// Unix-specific extensions to [`thread::JoinHandle`].\n+///\n+/// [`thread::JoinHandle`]: ../../../../std/thread/struct.JoinHandle.html\n #[stable(feature = \"thread_extensions\", since = \"1.9.0\")]\n pub trait JoinHandleExt {\n     /// Extracts the raw pthread_t without taking ownership"}, {"sha": "98d4355248990a92ec748b667409e91b1e5a1f2d", "filename": "src/libstd/sys/windows/ext/ffi.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fffi.rs?ref=52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6", "patch": "@@ -76,7 +76,9 @@ use sys_common::{FromInner, AsInner};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use sys_common::wtf8::EncodeWide;\n \n-/// Windows-specific extensions to `OsString`.\n+/// Windows-specific extensions to [`OsString`].\n+///\n+/// [`OsString`]: ../../../../std/ffi/struct.OsString.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait OsStringExt {\n     /// Creates an `OsString` from a potentially ill-formed UTF-16 slice of\n@@ -109,7 +111,9 @@ impl OsStringExt for OsString {\n     }\n }\n \n-/// Windows-specific extensions to `OsStr`.\n+/// Windows-specific extensions to [`OsStr`].\n+///\n+/// [`OsStr`]: ../../../../std/ffi/struct.OsStr.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait OsStrExt {\n     /// Re-encodes an `OsStr` as a wide character sequence, i.e. potentially"}, {"sha": "78c9e95a05501d0821602ab330ecc8cde75ff178", "filename": "src/libstd/sys/windows/ext/fs.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs?ref=52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6", "patch": "@@ -103,9 +103,9 @@ impl FileExt for fs::File {\n     }\n }\n \n-/// Windows-specific extensions to [`OpenOptions`].\n+/// Windows-specific extensions to [`fs::OpenOptions`].\n ///\n-/// [`OpenOptions`]: ../../../fs/struct.OpenOptions.html\n+/// [`fs::OpenOptions`]: ../../../../std/fs/struct.OpenOptions.html\n #[stable(feature = \"open_options_ext\", since = \"1.10.0\")]\n pub trait OpenOptionsExt {\n     /// Overrides the `dwDesiredAccess` argument to the call to [`CreateFile`]\n@@ -281,13 +281,12 @@ impl OpenOptionsExt for OpenOptions {\n     }\n }\n \n-/// Extension methods for [`fs::Metadata`] to access the raw fields contained\n-/// within.\n+/// Windows-specific extensions to [`fs::Metadata`].\n ///\n /// The data members that this trait exposes correspond to the members\n /// of the [`BY_HANDLE_FILE_INFORMATION`] structure.\n ///\n-/// [`fs::Metadata`]: ../../../fs/struct.Metadata.html\n+/// [`fs::Metadata`]: ../../../../std/fs/struct.Metadata.html\n /// [`BY_HANDLE_FILE_INFORMATION`]:\n ///     https://msdn.microsoft.com/en-us/library/windows/desktop/aa363788.aspx\n #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n@@ -445,8 +444,11 @@ impl MetadataExt for Metadata {\n     fn file_size(&self) -> u64 { self.as_inner().size() }\n }\n \n-/// Add support for the Windows specific fact that a symbolic link knows whether it is a file\n-/// or directory.\n+/// Windows-specific extensions to [`FileType`].\n+///\n+/// On Windows, a symbolic link knows whether it is a file or directory.\n+///\n+/// [`FileType`]: ../../../../std/fs/struct.FileType.html\n #[unstable(feature = \"windows_file_type_ext\", issue = \"0\")]\n pub trait FileTypeExt {\n     /// Returns whether this file type is a symbolic link that is also a directory."}, {"sha": "a02bcbe0c87c259ad599c2e0d2dbb2b973fe73fd", "filename": "src/libstd/sys/windows/ext/process.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fprocess.rs?ref=52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6", "patch": "@@ -82,7 +82,9 @@ impl IntoRawHandle for process::ChildStderr {\n     }\n }\n \n-/// Windows-specific extensions to `std::process::ExitStatus`\n+/// Windows-specific extensions to [`process::ExitStatus`].\n+///\n+/// [`process::ExitStatus`]: ../../../../std/process/struct.ExitStatus.html\n #[stable(feature = \"exit_status_from\", since = \"1.12.0\")]\n pub trait ExitStatusExt {\n     /// Creates a new `ExitStatus` from the raw underlying `u32` return value of\n@@ -98,7 +100,9 @@ impl ExitStatusExt for process::ExitStatus {\n     }\n }\n \n-/// Windows-specific extensions to the `std::process::Command` builder\n+/// Windows-specific extensions to the [`process::Command`] builder.\n+///\n+/// [`process::Command`]: ../../../../std/process/struct.Command.html\n #[stable(feature = \"windows_process_extensions\", since = \"1.16.0\")]\n pub trait CommandExt {\n     /// Sets the [process creation flags][1] to be passed to `CreateProcess`."}, {"sha": "120dff2dbb926acf80ea10b3c1bb793499f24ed1", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6", "patch": "@@ -1242,10 +1242,9 @@ fn leveled_feature_err<'a>(sess: &'a ParseSess, feature: &str, span: Span, issue\n         GateIssue::Library(lib) => lib,\n     };\n \n-    let explanation = if let Some(n) = issue {\n-        format!(\"{} (see issue #{})\", explain, n)\n-    } else {\n-        explain.to_owned()\n+    let explanation = match issue {\n+        None | Some(0) => explain.to_owned(),\n+        Some(n) => format!(\"{} (see issue #{})\", explain, n)\n     };\n \n     let mut err = match level {"}, {"sha": "b449c5eea6658e7cdda063f0dac41b2c467bf008", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6", "patch": "@@ -15,8 +15,8 @@\n use hygiene::SyntaxContext;\n use {Span, DUMMY_SP, GLOBALS};\n \n+use rustc_data_structures::fx::FxHashMap;\n use serialize::{Decodable, Decoder, Encodable, Encoder};\n-use std::collections::HashMap;\n use std::fmt;\n use std::hash::{Hash, Hasher};\n \n@@ -184,7 +184,7 @@ impl<T: ::std::ops::Deref<Target=str>> PartialEq<T> for Symbol {\n \n #[derive(Default)]\n pub struct Interner {\n-    names: HashMap<Box<str>, Symbol>,\n+    names: FxHashMap<Box<str>, Symbol>,\n     strings: Vec<Box<str>>,\n     gensyms: Vec<Symbol>,\n }"}, {"sha": "1e0039aba04bb15c13bcd5d4c0e5433164c9d22b", "filename": "src/test/ui/feature-gate/issue-49983-see-issue-0.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-49983-see-issue-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-49983-see-issue-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-49983-see-issue-0.rs?ref=52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+extern crate core;\n+\n+// error should not say \"(see issue #0)\"\n+#[allow(unused_imports)] use core::ptr::Unique; //~ ERROR use of unstable library feature\n+\n+fn main() {}"}, {"sha": "986a2d88e00a2c3153a2c2d12a4b1b4b8a9a08bc", "filename": "src/test/ui/feature-gate/issue-49983-see-issue-0.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-49983-see-issue-0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-49983-see-issue-0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-49983-see-issue-0.stderr?ref=52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6", "patch": "@@ -0,0 +1,11 @@\n+error[E0658]: use of unstable library feature 'ptr_internals': use NonNull instead and consider PhantomData<T> (if you also use #[may_dangle]), Send, and/or Sync\n+  --> $DIR/issue-49983-see-issue-0.rs:14:30\n+   |\n+LL | #[allow(unused_imports)] use core::ptr::Unique; //~ ERROR use of unstable library feature\n+   |                              ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(ptr_internals)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "4fc11daaa3afa0de5758d8c046f433467e571299", "filename": "src/test/ui/update-references.sh", "status": "modified", "additions": 11, "deletions": 18, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/src%2Ftest%2Fui%2Fupdate-references.sh", "raw_url": "https://github.com/rust-lang/rust/raw/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/src%2Ftest%2Fui%2Fupdate-references.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fupdate-references.sh?ref=52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6", "patch": "@@ -31,24 +31,17 @@ MYDIR=$(dirname $0)\n BUILD_DIR=\"$1\"\n shift\n \n+shopt -s nullglob\n+\n while [[ \"$1\" != \"\" ]]; do\n-    STDERR_NAME=\"${1/%.rs/.stderr}\"\n-    STDERR_NLL_NAME=\"${1/%.rs/.nll.stderr}\"\n-    STDOUT_NAME=\"${1/%.rs/.stdout}\"\n+    for EXT in \"stderr\" \"stdout\"; do\n+        for OUT_NAME in $BUILD_DIR/${1%.rs}.*$EXT; do\n+            OUT_BASE=`basename \"$OUT_NAME\"`\n+            if ! (diff $OUT_NAME $MYDIR/$OUT_BASE >& /dev/null); then\n+                echo updating $MYDIR/$OUT_BASE\n+                cp $OUT_NAME $MYDIR\n+            fi\n+        done\n+    done\n     shift\n-    if [ -f $BUILD_DIR/$STDOUT_NAME ] && \\\n-           ! (diff $BUILD_DIR/$STDOUT_NAME $MYDIR/$STDOUT_NAME >& /dev/null); then\n-        echo updating $MYDIR/$STDOUT_NAME\n-        cp $BUILD_DIR/$STDOUT_NAME $MYDIR/$STDOUT_NAME\n-    fi\n-    if [ -f $BUILD_DIR/$STDERR_NAME ] && \\\n-           ! (diff $BUILD_DIR/$STDERR_NAME $MYDIR/$STDERR_NAME >& /dev/null); then\n-        echo updating $MYDIR/$STDERR_NAME\n-        cp $BUILD_DIR/$STDERR_NAME $MYDIR/$STDERR_NAME\n-    fi\n-    if [ -f $BUILD_DIR/$STDERR_NLL_NAME ] && \\\n-           ! (diff $BUILD_DIR/$STDERR_NLL_NAME $MYDIR/$STDERR_NLL_NAME >& /dev/null); then\n-        echo updating $MYDIR/$STDERR_NLL_NAME\n-        cp $BUILD_DIR/$STDERR_NLL_NAME $MYDIR/$STDERR_NLL_NAME\n-    fi\n done"}, {"sha": "aabf2e6f8f0e675c2e918e7491c1cd59546c75d0", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 44, "deletions": 26, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6", "patch": "@@ -26,7 +26,7 @@ use std::collections::VecDeque;\n use std::collections::HashMap;\n use std::collections::HashSet;\n use std::env;\n-use std::ffi::OsString;\n+use std::ffi::{OsStr, OsString};\n use std::fs::{self, create_dir_all, File};\n use std::fmt;\n use std::io::prelude::*;\n@@ -72,6 +72,26 @@ impl Mismatch {\n     }\n }\n \n+trait PathBufExt {\n+    /// Append an extension to the path, even if it already has one.\n+    fn with_extra_extension<S: AsRef<OsStr>>(&self, extension: S) -> PathBuf;\n+}\n+\n+impl PathBufExt for PathBuf {\n+    fn with_extra_extension<S: AsRef<OsStr>>(&self, extension: S) -> PathBuf {\n+        if extension.as_ref().len() == 0 {\n+            self.clone()\n+        } else {\n+            let mut fname = self.file_name().unwrap().to_os_string();\n+            if !extension.as_ref().to_str().unwrap().starts_with(\".\") {\n+                fname.push(\".\");\n+            }\n+            fname.push(extension);\n+            self.with_file_name(fname)\n+        }\n+    }\n+}\n+\n // Produces a diff between the expected output and actual output.\n pub fn make_diff(expected: &str, actual: &str, context_size: usize) -> Vec<Mismatch> {\n     let mut line_number = 1;\n@@ -1725,20 +1745,14 @@ impl<'test> TestCx<'test> {\n     }\n \n     fn make_exe_name(&self) -> PathBuf {\n-        let mut f = self.output_base_name();\n+        let mut f = self.output_base_name_stage();\n         // FIXME: This is using the host architecture exe suffix, not target!\n         if self.config.target.contains(\"emscripten\") {\n-            let mut fname = f.file_name().unwrap().to_os_string();\n-            fname.push(\".js\");\n-            f.set_file_name(&fname);\n+            f = f.with_extra_extension(\"js\");\n         } else if self.config.target.contains(\"wasm32\") {\n-            let mut fname = f.file_name().unwrap().to_os_string();\n-            fname.push(\".wasm\");\n-            f.set_file_name(&fname);\n+            f = f.with_extra_extension(\"wasm\");\n         } else if !env::consts::EXE_SUFFIX.is_empty() {\n-            let mut fname = f.file_name().unwrap().to_os_string();\n-            fname.push(env::consts::EXE_SUFFIX);\n-            f.set_file_name(&fname);\n+            f = f.with_extra_extension(env::consts::EXE_SUFFIX);\n         }\n         f\n     }\n@@ -1846,25 +1860,28 @@ impl<'test> TestCx<'test> {\n     }\n \n     fn aux_output_dir_name(&self) -> PathBuf {\n-        let f = self.output_base_name();\n-        let mut fname = f.file_name().unwrap().to_os_string();\n-        fname.push(&format!(\"{}.aux\", self.config.mode.disambiguator()));\n-        f.with_file_name(&fname)\n+        self.output_base_name_stage()\n+            .with_extra_extension(self.config.mode.disambiguator())\n+            .with_extra_extension(\".aux\")\n     }\n \n     fn output_testname(&self, filepath: &Path) -> PathBuf {\n         PathBuf::from(filepath.file_stem().unwrap())\n     }\n \n-    /// Given a test path like `compile-fail/foo/bar.rs` Returns a name like\n-    ///\n-    ///     <output>/foo/bar-stage1\n+    /// Given a test path like `compile-fail/foo/bar.rs` returns a name like\n+    /// `/path/to/build/<triple>/test/compile-fail/foo/bar`.\n     fn output_base_name(&self) -> PathBuf {\n         let dir = self.config.build_base.join(&self.testpaths.relative_dir);\n \n         // Note: The directory `dir` is created during `collect_tests_from_dir`\n         dir.join(&self.output_testname(&self.testpaths.file))\n-            .with_extension(&self.config.stage_id)\n+    }\n+\n+    /// Same as `output_base_name`, but includes the stage ID as an extension,\n+    /// such as: `.../compile-fail/foo/bar.stage1-<triple>`\n+    fn output_base_name_stage(&self) -> PathBuf {\n+        self.output_base_name().with_extension(&self.config.stage_id)\n     }\n \n     fn maybe_dump_to_stdout(&self, out: &str, err: &str) {\n@@ -1989,7 +2006,7 @@ impl<'test> TestCx<'test> {\n     fn run_rustdoc_test(&self) {\n         assert!(self.revision.is_none(), \"revisions not relevant here\");\n \n-        let out_dir = self.output_base_name();\n+        let out_dir = self.output_base_name_stage();\n         let _ = fs::remove_dir_all(&out_dir);\n         create_dir_all(&out_dir).unwrap();\n \n@@ -2391,7 +2408,7 @@ impl<'test> TestCx<'test> {\n             .unwrap();\n         let src_root = cwd.join(&src_root);\n \n-        let tmpdir = cwd.join(self.output_base_name());\n+        let tmpdir = cwd.join(self.output_base_name_stage());\n         if tmpdir.exists() {\n             self.aggressive_rm_rf(&tmpdir).unwrap();\n         }\n@@ -2816,7 +2833,6 @@ impl<'test> TestCx<'test> {\n                                             self.revision,\n                                             &self.config.compare_mode,\n                                             kind);\n-\n         if !path.exists() && self.config.compare_mode.is_some() {\n             // fallback!\n             path = expected_output_path(&self.testpaths, self.revision, &None, kind);\n@@ -2880,10 +2896,12 @@ impl<'test> TestCx<'test> {\n             }\n         }\n \n-        let expected_output = self.expected_output_path(kind);\n-        // #50113: output is abspath; only want filename component.\n-        let expected_output = expected_output.file_name().expect(\"output path requires file name\");\n-        let output_file = self.output_base_name().with_file_name(&expected_output);\n+        let mode = self.config.compare_mode.as_ref().map_or(\"\", |m| m.to_str());\n+        let output_file = self.output_base_name()\n+            .with_extra_extension(self.revision.unwrap_or(\"\"))\n+            .with_extra_extension(mode)\n+            .with_extra_extension(kind);\n+\n         match File::create(&output_file).and_then(|mut f| f.write_all(actual.as_bytes())) {\n             Ok(()) => {}\n             Err(e) => self.fatal(&format!("}, {"sha": "351005ff4b816b3038f4e6d99980f6320dd5d152", "filename": "src/tools/tidy/src/ui_tests.rs", "status": "modified", "additions": 15, "deletions": 27, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs?ref=52ed3d8761dc42e51429eb3bbf56a94d14fdd5c6", "patch": "@@ -12,38 +12,26 @@\n \n use std::path::Path;\n \n-// See rust-lang/rust#48879: In addition to the mapping from `foo.rs`\n-// to `foo.stderr`/`foo.stdout`, we also can optionally have\n-// `foo.$mode.stderr`, where $mode is one of the strings on this list,\n-// as an alternative to use when running under that mode.\n-static COMPARE_MODE_NAMES: [&'static str; 1] = [\"nll\"];\n-\n pub fn check(path: &Path, bad: &mut bool) {\n     super::walk_many(&[&path.join(\"test/ui\"), &path.join(\"test/ui-fulldeps\")],\n                      &mut |_| false,\n                      &mut |file_path| {\n         if let Some(ext) = file_path.extension() {\n-            if (ext == \"stderr\" || ext == \"stdout\") && !file_path.with_extension(\"rs\").exists() {\n-\n-                // rust-lang/rust#48879: this fn used to be beautful\n-                // because Path API special-cases replacing\n-                // extensions. That works great for \".stderr\" but not\n-                // so well for \".nll.stderr\". To support the latter,\n-                // we explicitly search backwards for mode's starting\n-                // point and build corresponding source name.\n-                let filename = file_path.file_name().expect(\"need filename\")\n-                    .to_str().expect(\"need UTF-8 filename\");\n-                let found_matching_prefix = COMPARE_MODE_NAMES.iter().any(|mode| {\n-                    if let Some(r_idx) = filename.rfind(&format!(\".{}\", mode)) {\n-                        let source_name = format!(\"{}.rs\", &filename[0..r_idx]);\n-                        let source_path = file_path.with_file_name(source_name);\n-                        source_path.exists()\n-                    } else {\n-                        false\n-                    }\n-                });\n-\n-                if !found_matching_prefix {\n+            if ext == \"stderr\" || ext == \"stdout\" {\n+                // Test output filenames have the format:\n+                // $testname.stderr\n+                // $testname.$mode.stderr\n+                // $testname.$revision.stderr\n+                // $testname.$revision.$mode.stderr\n+                //\n+                // For now, just make sure that there is a corresponding\n+                // $testname.rs file.\n+                let testname = file_path.file_name().unwrap()\n+                                        .to_str().unwrap()\n+                                        .splitn(2, '.').next().unwrap();\n+                if !file_path.with_file_name(testname)\n+                             .with_extension(\"rs\")\n+                             .exists() {\n                     println!(\"Stray file with UI testing output: {:?}\", file_path);\n                     *bad = true;\n                 }"}]}