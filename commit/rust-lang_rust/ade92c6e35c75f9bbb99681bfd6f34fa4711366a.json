{"sha": "ade92c6e35c75f9bbb99681bfd6f34fa4711366a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkZTkyYzZlMzVjNzVmOWJiYjk5NjgxYmZkNmYzNGZhNDcxMTM2NmE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-08-05T03:21:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-08-05T03:21:27Z"}, "message": "auto merge of #16188 : nham/rust/immut_slice_split_at, r=brson\n\nThis operation seems common enough that it would be convenient for it to be a standard method.", "tree": {"sha": "43c4147d5e85e798e0b3974e792cc757b9e3f393", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/43c4147d5e85e798e0b3974e792cc757b9e3f393"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ade92c6e35c75f9bbb99681bfd6f34fa4711366a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ade92c6e35c75f9bbb99681bfd6f34fa4711366a", "html_url": "https://github.com/rust-lang/rust/commit/ade92c6e35c75f9bbb99681bfd6f34fa4711366a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ade92c6e35c75f9bbb99681bfd6f34fa4711366a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b54110c3380e3cc6a641798a0be0c30e84dc907", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b54110c3380e3cc6a641798a0be0c30e84dc907", "html_url": "https://github.com/rust-lang/rust/commit/4b54110c3380e3cc6a641798a0be0c30e84dc907"}, {"sha": "7e5440ea9d0045741663f142e83a247fe540599e", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e5440ea9d0045741663f142e83a247fe540599e", "html_url": "https://github.com/rust-lang/rust/commit/7e5440ea9d0045741663f142e83a247fe540599e"}], "stats": {"total": 21, "additions": 17, "deletions": 4}, "files": [{"sha": "d3b761f9665d425f78efd8f101d8f69a02f7434c", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ade92c6e35c75f9bbb99681bfd6f34fa4711366a/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade92c6e35c75f9bbb99681bfd6f34fa4711366a/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=ade92c6e35c75f9bbb99681bfd6f34fa4711366a", "patch": "@@ -76,6 +76,16 @@ pub trait ImmutableVector<'a, T> {\n      * Fails when `end` points outside the bounds of self.\n      */\n     fn slice_to(&self, end: uint) -> &'a [T];\n+\n+    /// Divides one slice into two at an index.\n+    ///\n+    /// The first will contain all indices from `[0, mid)` (excluding\n+    /// the index `mid` itself) and the second will contain all\n+    /// indices from `[mid, len)` (excluding the index `len` itself).\n+    ///\n+    /// Fails if `mid > len`.\n+    fn split_at(&self, mid: uint) -> (&'a [T], &'a [T]);\n+\n     /// Returns an iterator over the vector\n     fn iter(self) -> Items<'a, T>;\n     /// Returns an iterator over the subslices of the vector which are\n@@ -247,6 +257,11 @@ impl<'a,T> ImmutableVector<'a, T> for &'a [T] {\n         self.slice(0, end)\n     }\n \n+    #[inline]\n+    fn split_at(&self, mid: uint) -> (&'a [T], &'a [T]) {\n+        (self.slice(0, mid), self.slice(mid, self.len()))\n+    }\n+\n     #[inline]\n     fn iter(self) -> Items<'a, T> {\n         unsafe {\n@@ -1192,8 +1207,7 @@ impl<'a, T> Iterator<&'a [T]> for Chunks<'a, T> {\n             None\n         } else {\n             let chunksz = cmp::min(self.v.len(), self.size);\n-            let (fst, snd) = (self.v.slice_to(chunksz),\n-                              self.v.slice_from(chunksz));\n+            let (fst, snd) = self.v.split_at(chunksz);\n             self.v = snd;\n             Some(fst)\n         }\n@@ -1219,8 +1233,7 @@ impl<'a, T> DoubleEndedIterator<&'a [T]> for Chunks<'a, T> {\n         } else {\n             let remainder = self.v.len() % self.size;\n             let chunksz = if remainder != 0 { remainder } else { self.size };\n-            let (fst, snd) = (self.v.slice_to(self.v.len() - chunksz),\n-                              self.v.slice_from(self.v.len() - chunksz));\n+            let (fst, snd) = self.v.split_at(self.v.len() - chunksz);\n             self.v = fst;\n             Some(snd)\n         }"}]}