{"sha": "311dbb854536dd526cdbcadc6d270f9a37e4b816", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxMWRiYjg1NDUzNmRkNTI2Y2RiY2FkYzZkMjcwZjlhMzdlNGI4MTY=", "commit": {"author": {"name": "Ekaterina Babshukova", "email": "ekaterina.babshukova@yandex.ru", "date": "2019-10-05T14:48:31Z"}, "committer": {"name": "Ekaterina Babshukova", "email": "ekaterina.babshukova@yandex.ru", "date": "2019-10-05T14:48:31Z"}, "message": "remove `visitor` module", "tree": {"sha": "db4857e394f6bd6a1045a13d0b3f11a98be8da49", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db4857e394f6bd6a1045a13d0b3f11a98be8da49"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/311dbb854536dd526cdbcadc6d270f9a37e4b816", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/311dbb854536dd526cdbcadc6d270f9a37e4b816", "html_url": "https://github.com/rust-lang/rust/commit/311dbb854536dd526cdbcadc6d270f9a37e4b816", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/311dbb854536dd526cdbcadc6d270f9a37e4b816/comments", "author": {"login": "viorina", "id": 6714973, "node_id": "MDQ6VXNlcjY3MTQ5NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/6714973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/viorina", "html_url": "https://github.com/viorina", "followers_url": "https://api.github.com/users/viorina/followers", "following_url": "https://api.github.com/users/viorina/following{/other_user}", "gists_url": "https://api.github.com/users/viorina/gists{/gist_id}", "starred_url": "https://api.github.com/users/viorina/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/viorina/subscriptions", "organizations_url": "https://api.github.com/users/viorina/orgs", "repos_url": "https://api.github.com/users/viorina/repos", "events_url": "https://api.github.com/users/viorina/events{/privacy}", "received_events_url": "https://api.github.com/users/viorina/received_events", "type": "User", "site_admin": false}, "committer": {"login": "viorina", "id": 6714973, "node_id": "MDQ6VXNlcjY3MTQ5NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/6714973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/viorina", "html_url": "https://github.com/viorina", "followers_url": "https://api.github.com/users/viorina/followers", "following_url": "https://api.github.com/users/viorina/following{/other_user}", "gists_url": "https://api.github.com/users/viorina/gists{/gist_id}", "starred_url": "https://api.github.com/users/viorina/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/viorina/subscriptions", "organizations_url": "https://api.github.com/users/viorina/orgs", "repos_url": "https://api.github.com/users/viorina/repos", "events_url": "https://api.github.com/users/viorina/events{/privacy}", "received_events_url": "https://api.github.com/users/viorina/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fc22901730f35405d2bdfe33f88d7b3c6b14304", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fc22901730f35405d2bdfe33f88d7b3c6b14304", "html_url": "https://github.com/rust-lang/rust/commit/2fc22901730f35405d2bdfe33f88d7b3c6b14304"}], "stats": {"total": 171, "additions": 27, "deletions": 144}, "files": [{"sha": "fe3e64af50e060d747e4e7f190510ad064497556", "filename": "crates/ra_assists/src/assists/split_import.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/311dbb854536dd526cdbcadc6d270f9a37e4b816/crates%2Fra_assists%2Fsrc%2Fassists%2Fsplit_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/311dbb854536dd526cdbcadc6d270f9a37e4b816/crates%2Fra_assists%2Fsrc%2Fassists%2Fsplit_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fsplit_import.rs?ref=311dbb854536dd526cdbcadc6d270f9a37e4b816", "patch": "@@ -51,13 +51,13 @@ mod tests {\n     fn split_import_works_with_trees() {\n         check_assist(\n             split_import,\n-            \"use algo:<|>:visitor::{Visitor, visit}\",\n-            \"use algo::{<|>visitor::{Visitor, visit}}\",\n+            \"use crate:<|>:db::{RootDatabase, FileSymbol}\",\n+            \"use crate::{<|>db::{RootDatabase, FileSymbol}}\",\n         )\n     }\n \n     #[test]\n     fn split_import_target() {\n-        check_assist_target(split_import, \"use algo::<|>visitor::{Visitor, visit}\", \"::\");\n+        check_assist_target(split_import, \"use crate::<|>db::{RootDatabase, FileSymbol}\", \"::\");\n     }\n }"}, {"sha": "7cfea70f9791d1a528b06af03fcd3ede4d23aea6", "filename": "crates/ra_syntax/src/algo.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/311dbb854536dd526cdbcadc6d270f9a37e4b816/crates%2Fra_syntax%2Fsrc%2Falgo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/311dbb854536dd526cdbcadc6d270f9a37e4b816/crates%2Fra_syntax%2Fsrc%2Falgo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Falgo.rs?ref=311dbb854536dd526cdbcadc6d270f9a37e4b816", "patch": "@@ -1,7 +1,5 @@\n //! FIXME: write short doc here\n \n-pub mod visit;\n-\n use std::ops::RangeInclusive;\n \n use itertools::Itertools;"}, {"sha": "4df275ba4ffc4e127ea88883d4987f8ecf2f715a", "filename": "crates/ra_syntax/src/algo/visit.rs", "status": "removed", "additions": 0, "deletions": 112, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/2fc22901730f35405d2bdfe33f88d7b3c6b14304/crates%2Fra_syntax%2Fsrc%2Falgo%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fc22901730f35405d2bdfe33f88d7b3c6b14304/crates%2Fra_syntax%2Fsrc%2Falgo%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Falgo%2Fvisit.rs?ref=2fc22901730f35405d2bdfe33f88d7b3c6b14304", "patch": "@@ -1,112 +0,0 @@\n-//! FIXME: write short doc here\n-\n-use crate::{AstNode, SyntaxNode};\n-\n-use std::marker::PhantomData;\n-\n-pub fn visitor<'a, T>() -> impl Visitor<'a, Output = T> {\n-    EmptyVisitor { ph: PhantomData }\n-}\n-\n-pub fn visitor_ctx<'a, T, C>(ctx: C) -> impl VisitorCtx<'a, Output = T, Ctx = C> {\n-    EmptyVisitorCtx { ph: PhantomData, ctx }\n-}\n-\n-pub trait Visitor<'a>: Sized {\n-    type Output;\n-    fn accept(self, node: &'a SyntaxNode) -> Option<Self::Output>;\n-    fn visit<N, F>(self, f: F) -> Vis<Self, N, F>\n-    where\n-        N: AstNode + 'a,\n-        F: FnOnce(N) -> Self::Output,\n-    {\n-        Vis { inner: self, f, ph: PhantomData }\n-    }\n-}\n-\n-pub trait VisitorCtx<'a>: Sized {\n-    type Output;\n-    type Ctx;\n-    fn accept(self, node: &'a SyntaxNode) -> Result<Self::Output, Self::Ctx>;\n-    fn visit<N, F>(self, f: F) -> VisCtx<Self, N, F>\n-    where\n-        N: AstNode + 'a,\n-        F: FnOnce(N, Self::Ctx) -> Self::Output,\n-    {\n-        VisCtx { inner: self, f, ph: PhantomData }\n-    }\n-}\n-\n-#[derive(Debug)]\n-struct EmptyVisitor<T> {\n-    ph: PhantomData<fn() -> T>,\n-}\n-\n-impl<'a, T> Visitor<'a> for EmptyVisitor<T> {\n-    type Output = T;\n-\n-    fn accept(self, _node: &'a SyntaxNode) -> Option<T> {\n-        None\n-    }\n-}\n-\n-#[derive(Debug)]\n-struct EmptyVisitorCtx<T, C> {\n-    ctx: C,\n-    ph: PhantomData<fn() -> T>,\n-}\n-\n-impl<'a, T, C> VisitorCtx<'a> for EmptyVisitorCtx<T, C> {\n-    type Output = T;\n-    type Ctx = C;\n-\n-    fn accept(self, _node: &'a SyntaxNode) -> Result<T, C> {\n-        Err(self.ctx)\n-    }\n-}\n-\n-#[derive(Debug)]\n-pub struct Vis<V, N, F> {\n-    inner: V,\n-    f: F,\n-    ph: PhantomData<fn(N)>,\n-}\n-\n-impl<'a, V, N, F> Visitor<'a> for Vis<V, N, F>\n-where\n-    V: Visitor<'a>,\n-    N: AstNode + 'a,\n-    F: FnOnce(N) -> <V as Visitor<'a>>::Output,\n-{\n-    type Output = <V as Visitor<'a>>::Output;\n-\n-    fn accept(self, node: &'a SyntaxNode) -> Option<Self::Output> {\n-        let Vis { inner, f, .. } = self;\n-        inner.accept(node).or_else(|| N::cast(node.clone()).map(f))\n-    }\n-}\n-\n-#[derive(Debug)]\n-pub struct VisCtx<V, N, F> {\n-    inner: V,\n-    f: F,\n-    ph: PhantomData<fn(N)>,\n-}\n-\n-impl<'a, V, N, F> VisitorCtx<'a> for VisCtx<V, N, F>\n-where\n-    V: VisitorCtx<'a>,\n-    N: AstNode + 'a,\n-    F: FnOnce(N, <V as VisitorCtx<'a>>::Ctx) -> <V as VisitorCtx<'a>>::Output,\n-{\n-    type Output = <V as VisitorCtx<'a>>::Output;\n-    type Ctx = <V as VisitorCtx<'a>>::Ctx;\n-\n-    fn accept(self, node: &'a SyntaxNode) -> Result<Self::Output, Self::Ctx> {\n-        let VisCtx { inner, f, .. } = self;\n-        inner.accept(node).or_else(|ctx| match N::cast(node.clone()) {\n-            None => Err(ctx),\n-            Some(node) => Ok(f(node, ctx)),\n-        })\n-    }\n-}"}, {"sha": "c315ba552814aaa7e03f554fb143991fe84ed26e", "filename": "crates/ra_syntax/src/lib.rs", "status": "modified", "additions": 21, "deletions": 22, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/311dbb854536dd526cdbcadc6d270f9a37e4b816/crates%2Fra_syntax%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/311dbb854536dd526cdbcadc6d270f9a37e4b816/crates%2Fra_syntax%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Flib.rs?ref=311dbb854536dd526cdbcadc6d270f9a37e4b816", "patch": "@@ -160,6 +160,17 @@ impl SourceFile {\n     }\n }\n \n+#[macro_export]\n+macro_rules! match_ast {\n+    (match $node:ident {\n+        $( ast::$ast:ident($it:ident) => $res:block, )*\n+        _ => $catch_all:expr,\n+    }) => {{\n+        $( if let Some($it) = ast::$ast::cast($node.clone()) $res else )*\n+        { $catch_all }\n+    }};\n+}\n+\n /// This test does not assert anything and instead just shows off the crate's\n /// API.\n #[test]\n@@ -294,8 +305,7 @@ fn api_walkthrough() {\n     // To recursively process the tree, there are three approaches:\n     // 1. explicitly call getter methods on AST nodes.\n     // 2. use descendants and `AstNode::cast`.\n-    // 3. use descendants and the visitor.\n-    // 4. use descendants and `match_ast!`.\n+    // 3. use descendants and `match_ast!`.\n     //\n     // Here's how the first one looks like:\n     let exprs_cast: Vec<String> = file\n@@ -305,29 +315,18 @@ fn api_walkthrough() {\n         .map(|expr| expr.syntax().text().to_string())\n         .collect();\n \n-    // An alternative is to use a visitor. The visitor does not do traversal\n-    // automatically (so it's more akin to a generic lambda) and is constructed\n-    // from closures. This seems more flexible than a single generated visitor\n-    // trait.\n-    use algo::visit::{visitor, Visitor};\n+    // An alternative is to use a macro.\n     let mut exprs_visit = Vec::new();\n     for node in file.syntax().descendants() {\n-        if let Some(result) =\n-            visitor().visit::<ast::Expr, _>(|expr| expr.syntax().text().to_string()).accept(&node)\n-        {\n-            exprs_visit.push(result);\n+        match_ast! {\n+            match node {\n+                ast::Expr(it) => {\n+                    let res = it.syntax().text().to_string();\n+                    exprs_visit.push(res);\n+                },\n+                _ => (),\n+            }\n         }\n     }\n     assert_eq!(exprs_cast, exprs_visit);\n }\n-\n-#[macro_export]\n-macro_rules! match_ast {\n-    (match $node:ident {\n-        $( ast::$ast:ident($it:ident) => $res:block, )*\n-        _ => $catch_all:expr,\n-    }) => {{\n-        $( if let Some($it) = ast::$ast::cast($node.clone()) $res else )*\n-        { $catch_all }\n-    }};\n-}"}, {"sha": "1ffabc6efb6401c55ddb460bb909c4b5555e1961", "filename": "docs/dev/architecture.md", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/311dbb854536dd526cdbcadc6d270f9a37e4b816/docs%2Fdev%2Farchitecture.md", "raw_url": "https://github.com/rust-lang/rust/raw/311dbb854536dd526cdbcadc6d270f9a37e4b816/docs%2Fdev%2Farchitecture.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Farchitecture.md?ref=311dbb854536dd526cdbcadc6d270f9a37e4b816", "patch": "@@ -79,9 +79,7 @@ Rust syntax tree structure and parser. See\n - `grammar.ron` RON description of the grammar, which is used to\n   generate `syntax_kinds` and `ast` modules, using `cargo gen-syntax` command.\n - `algo`: generic tree algorithms, including `walk` for O(1) stack\n-  space tree traversal (this is cool) and `visit` for type-driven\n-  visiting the nodes (this is double plus cool, if you understand how\n-  `Visitor` works, you understand the design of syntax trees).\n+  space tree traversal (this is cool).\n \n Tests for ra_syntax are mostly data-driven: `test_data/parser` contains subdirectories with a bunch of `.rs`\n (test vectors) and `.txt` files with corresponding syntax trees. During testing, we check"}, {"sha": "757a02838ebbf513f858591e1619018250acb78a", "filename": "docs/user/features.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/311dbb854536dd526cdbcadc6d270f9a37e4b816/docs%2Fuser%2Ffeatures.md", "raw_url": "https://github.com/rust-lang/rust/raw/311dbb854536dd526cdbcadc6d270f9a37e4b816/docs%2Fuser%2Ffeatures.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Ffeatures.md?ref=311dbb854536dd526cdbcadc6d270f9a37e4b816", "patch": "@@ -367,9 +367,9 @@ impl VariantData {\n \n ```rust\n // before:\n-use algo:<|>:visitor::{Visitor, visit};\n+use crate:<|>:db::{RootDatabase, FileSymbol};\n // after:\n-use algo::{<|>visitor::{Visitor, visit}};\n+use crate::{<|>db::{RootDatabase, FileSymbol}};\n ```\n \n - Flip binary expression"}]}