{"sha": "59c2ff532d588d5268256578982e5c2cf7d15dad", "node_id": "C_kwDOAAsO6NoAKDU5YzJmZjUzMmQ1ODhkNTI2ODI1NjU3ODk4MmU1YzJjZjdkMTVkYWQ", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-06-11T05:42:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-11T05:42:13Z"}, "message": "Rollup merge of #97703 - lcnr:post-89862, r=estebank\n\nsome additional `need_type_info.rs` cleanup\n\nalso fixes #97698, fixes #97806\n\ncc `@estebank`", "tree": {"sha": "a8c94e6ec077546f7295ed2df3abdf337987137c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8c94e6ec077546f7295ed2df3abdf337987137c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59c2ff532d588d5268256578982e5c2cf7d15dad", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJipCs1CRBK7hj4Ov3rIwAAMEkIACDGEjG8KJlsR0CfhEJ7Rbmf\npynypt/j8hr3/LPZZ8oSDEREztYvzuLzvNP2jx31eUpQnP+8madmM/hqSTwZLwME\n+i7rXbJ/NGi7IQfWBj7SUhBB65omlRvlZK4/dxxSBXavwhcRKzOxHLNB5lvs2Rpv\nz8XPSfE1Q5vSltRhltlW45I7k+TPSZOLGXPIS03hbciVN5kcazVWtGJN2rvX1HBt\nkorbDnK6zdXBW/T7lXzqM5wUfrIfvh+sMDuOA/e+DyT/dVZG0YGgf+pKG78C782l\nn/S9ycnvuxCVYZXyDgjyl4g6ogGkFKkO1/u4zrKpq+FcgF7bYI2625dvPByz9kY=\n=3yfE\n-----END PGP SIGNATURE-----\n", "payload": "tree a8c94e6ec077546f7295ed2df3abdf337987137c\nparent f1f44b9e4d405f9361ee5ade3e0656b34d9bd1b1\nparent d6b28f377cedada86c67cedc28fee4c925841a6d\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1654926133 +0200\ncommitter GitHub <noreply@github.com> 1654926133 +0200\n\nRollup merge of #97703 - lcnr:post-89862, r=estebank\n\nsome additional `need_type_info.rs` cleanup\n\nalso fixes #97698, fixes #97806\n\ncc `@estebank`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59c2ff532d588d5268256578982e5c2cf7d15dad", "html_url": "https://github.com/rust-lang/rust/commit/59c2ff532d588d5268256578982e5c2cf7d15dad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59c2ff532d588d5268256578982e5c2cf7d15dad/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1f44b9e4d405f9361ee5ade3e0656b34d9bd1b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1f44b9e4d405f9361ee5ade3e0656b34d9bd1b1", "html_url": "https://github.com/rust-lang/rust/commit/f1f44b9e4d405f9361ee5ade3e0656b34d9bd1b1"}, {"sha": "d6b28f377cedada86c67cedc28fee4c925841a6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6b28f377cedada86c67cedc28fee4c925841a6d", "html_url": "https://github.com/rust-lang/rust/commit/d6b28f377cedada86c67cedc28fee4c925841a6d"}], "stats": {"total": 387, "additions": 249, "deletions": 138}, "files": [{"sha": "1181925dd96721b6e427020904ac2faf29c2fe48", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 10, "deletions": 46, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/59c2ff532d588d5268256578982e5c2cf7d15dad/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59c2ff532d588d5268256578982e5c2cf7d15dad/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=59c2ff532d588d5268256578982e5c2cf7d15dad", "patch": "@@ -67,10 +67,8 @@ use rustc_hir::{Item, ItemKind, Node};\n use rustc_middle::dep_graph::DepContext;\n use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::{\n-    self,\n-    error::TypeError,\n-    subst::{GenericArgKind, Subst, SubstsRef},\n-    Binder, EarlyBinder, List, Region, Ty, TyCtxt, TypeFoldable, TypeSuperFoldable,\n+    self, error::TypeError, Binder, List, Region, Subst, Ty, TyCtxt, TypeFoldable,\n+    TypeSuperFoldable,\n };\n use rustc_span::{sym, symbol::kw, BytePos, DesugaringKind, Pos, Span};\n use rustc_target::spec::abi;\n@@ -926,10 +924,13 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         mut t1_out: &mut DiagnosticStyledString,\n         mut t2_out: &mut DiagnosticStyledString,\n         path: String,\n-        sub: ty::subst::SubstsRef<'tcx>,\n+        sub: &'tcx [ty::GenericArg<'tcx>],\n         other_path: String,\n         other_ty: Ty<'tcx>,\n     ) -> Option<()> {\n+        // FIXME/HACK: Go back to `SubstsRef` to use its inherent methods,\n+        // ideally that shouldn't be necessary.\n+        let sub = self.tcx.intern_substs(sub);\n         for (i, ta) in sub.types().enumerate() {\n             if ta == other_ty {\n                 self.highlight_outer(&mut t1_out, &mut t2_out, path, sub, i, other_ty);\n@@ -960,45 +961,6 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         }\n     }\n \n-    /// For generic types with parameters with defaults, remove the parameters corresponding to\n-    /// the defaults. This repeats a lot of the logic found in `ty::print::pretty`.\n-    fn strip_generic_default_params(\n-        &self,\n-        def_id: DefId,\n-        substs: ty::subst::SubstsRef<'tcx>,\n-    ) -> SubstsRef<'tcx> {\n-        let generics = self.tcx.generics_of(def_id);\n-        let mut num_supplied_defaults = 0;\n-\n-        let default_params = generics.params.iter().rev().filter_map(|param| match param.kind {\n-            ty::GenericParamDefKind::Type { has_default: true, .. } => Some(param.def_id),\n-            ty::GenericParamDefKind::Const { has_default: true } => Some(param.def_id),\n-            _ => None,\n-        });\n-        for (def_id, actual) in iter::zip(default_params, substs.iter().rev()) {\n-            match actual.unpack() {\n-                GenericArgKind::Const(c) => {\n-                    if EarlyBinder(self.tcx.const_param_default(def_id)).subst(self.tcx, substs)\n-                        != c\n-                    {\n-                        break;\n-                    }\n-                }\n-                GenericArgKind::Type(ty) => {\n-                    if self.tcx.bound_type_of(def_id).subst(self.tcx, substs) != ty {\n-                        break;\n-                    }\n-                }\n-                _ => break,\n-            }\n-            num_supplied_defaults += 1;\n-        }\n-        let len = generics.params.len();\n-        let mut generics = generics.clone();\n-        generics.params.truncate(len - num_supplied_defaults);\n-        substs.truncate_to(self.tcx, &generics)\n-    }\n-\n     /// Given two `fn` signatures highlight only sub-parts that are different.\n     fn cmp_fn_sig(\n         &self,\n@@ -1156,8 +1118,10 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             (&ty::Adt(def1, sub1), &ty::Adt(def2, sub2)) => {\n                 let did1 = def1.did();\n                 let did2 = def2.did();\n-                let sub_no_defaults_1 = self.strip_generic_default_params(did1, sub1);\n-                let sub_no_defaults_2 = self.strip_generic_default_params(did2, sub2);\n+                let sub_no_defaults_1 =\n+                    self.tcx.generics_of(did1).own_substs_no_defaults(self.tcx, sub1);\n+                let sub_no_defaults_2 =\n+                    self.tcx.generics_of(did2).own_substs_no_defaults(self.tcx, sub2);\n                 let mut values = (DiagnosticStyledString::new(), DiagnosticStyledString::new());\n                 let path1 = self.tcx.def_path_str(did1);\n                 let path2 = self.tcx.def_path_str(did2);"}, {"sha": "207d2870c5c79e7ace349152543cb7e562c7838d", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 21, "deletions": 27, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/59c2ff532d588d5268256578982e5c2cf7d15dad/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59c2ff532d588d5268256578982e5c2cf7d15dad/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=59c2ff532d588d5268256578982e5c2cf7d15dad", "patch": "@@ -2,6 +2,7 @@ use crate::infer::type_variable::TypeVariableOriginKind;\n use crate::infer::InferCtxt;\n use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder, ErrorGuaranteed};\n use rustc_hir as hir;\n+use rustc_hir::def::Res;\n use rustc_hir::def::{CtorOf, DefKind, Namespace};\n use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::{self, Visitor};\n@@ -11,7 +12,7 @@ use rustc_middle::infer::unify_key::ConstVariableOriginKind;\n use rustc_middle::ty::adjustment::{Adjust, Adjustment, AutoBorrow, AutoBorrowMutability};\n use rustc_middle::ty::print::{FmtPrinter, PrettyPrinter, Print, Printer};\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind, Subst, SubstsRef};\n-use rustc_middle::ty::{self, DefIdTree, GenericParamDefKind, InferConst};\n+use rustc_middle::ty::{self, DefIdTree, InferConst};\n use rustc_middle::ty::{Ty, TyCtxt, TypeckResults};\n use rustc_span::symbol::{kw, Ident};\n use rustc_span::{BytePos, Span};\n@@ -853,12 +854,23 @@ impl<'a, 'tcx> FindInferSourceVisitor<'a, 'tcx> {\n                             hir::TyKind::Path(hir::QPath::Resolved(_self_ty, path)),\n                         ) => {\n                             if tcx.res_generics_def_id(path.res) != Some(def.did()) {\n-                                bug!(\n-                                    \"unexpected path: def={:?} substs={:?} path={:?}\",\n-                                    def,\n-                                    substs,\n-                                    path,\n-                                );\n+                                match path.res {\n+                                    Res::Def(DefKind::TyAlias, _) => {\n+                                        // FIXME: Ideally we should support this. For that\n+                                        // we have to map back from the self type to the\n+                                        // type alias though. That's difficult.\n+                                        //\n+                                        // See the `need_type_info/type-alias.rs` test for\n+                                        // some examples.\n+                                    }\n+                                    // There cannot be inference variables in the self type,\n+                                    // so there's nothing for us to do here.\n+                                    Res::SelfTy { .. } => {}\n+                                    _ => warn!(\n+                                        \"unexpected path: def={:?} substs={:?} path={:?}\",\n+                                        def, substs, path,\n+                                    ),\n+                                }\n                             } else {\n                                 return Box::new(\n                                     self.resolved_path_inferred_subst_iter(path, substs)\n@@ -958,26 +970,8 @@ impl<'a, 'tcx> Visitor<'tcx> for FindInferSourceVisitor<'a, 'tcx> {\n                 generics.own_substs(substs).iter().position(|&arg| self.generic_arg_is_target(arg))\n             {\n                 let substs = self.infcx.resolve_vars_if_possible(substs);\n-                let num_args = generics\n-                    .params\n-                    .iter()\n-                    .rev()\n-                    .filter(|&p| !matches!(p.kind, GenericParamDefKind::Lifetime))\n-                    .skip_while(|&param| {\n-                        if let Some(default) = param.default_value(tcx) {\n-                            // FIXME: Using structural comparisions has a bunch of false negatives.\n-                            //\n-                            // We should instead try to replace inference variables with placeholders and\n-                            // then use `infcx.can_eq`. That probably should be a separate method\n-                            // generally used during error reporting.\n-                            default.subst(tcx, substs) == substs[param.index as usize]\n-                        } else {\n-                            false\n-                        }\n-                    })\n-                    .count();\n-                let generic_args =\n-                    &generics.own_substs(substs)[generics.own_counts().lifetimes..][..num_args];\n+                let generic_args = &generics.own_substs_no_defaults(tcx, substs)\n+                    [generics.own_counts().lifetimes..];\n                 let span = match expr.kind {\n                     ExprKind::MethodCall(path, _, _) => path.ident.span,\n                     _ => expr.span,"}, {"sha": "5fff840c39ec709e960540b0a1e1c0fc7179f7d8", "filename": "compiler/rustc_middle/src/ty/generics.rs", "status": "modified", "additions": 40, "deletions": 1, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/59c2ff532d588d5268256578982e5c2cf7d15dad/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59c2ff532d588d5268256578982e5c2cf7d15dad/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs?ref=59c2ff532d588d5268256578982e5c2cf7d15dad", "patch": "@@ -228,8 +228,47 @@ impl<'tcx> Generics {\n         })\n     }\n \n+    /// Returns the substs corresponding to the generic parameters\n+    /// of this item, excluding `Self`.\n+    ///\n+    /// **This should only be used for diagnostics purposes.**\n+    pub fn own_substs_no_defaults(\n+        &'tcx self,\n+        tcx: TyCtxt<'tcx>,\n+        substs: &'tcx [ty::GenericArg<'tcx>],\n+    ) -> &'tcx [ty::GenericArg<'tcx>] {\n+        let mut own_params = self.parent_count..self.count();\n+        if self.has_self && self.parent.is_none() {\n+            own_params.start = 1;\n+        }\n+\n+        // Filter the default arguments.\n+        //\n+        // This currently uses structural equality instead\n+        // of semantic equivalance. While not ideal, that's\n+        // good enough for now as this should only be used\n+        // for diagnostics anyways.\n+        own_params.end -= self\n+            .params\n+            .iter()\n+            .rev()\n+            .take_while(|param| {\n+                param.default_value(tcx).map_or(false, |default| {\n+                    default.subst(tcx, substs) == substs[param.index as usize]\n+                })\n+            })\n+            .count();\n+\n+        &substs[own_params]\n+    }\n+\n     /// Returns the substs corresponding to the generic parameters of this item, excluding `Self`.\n-    pub fn own_substs(&'tcx self, substs: SubstsRef<'tcx>) -> &'tcx [ty::GenericArg<'tcx>] {\n+    ///\n+    /// **This should only be used for diagnostics purposes.**\n+    pub fn own_substs(\n+        &'tcx self,\n+        substs: &'tcx [ty::GenericArg<'tcx>],\n+    ) -> &'tcx [ty::GenericArg<'tcx>] {\n         let own = &substs[self.parent_count..][..self.params.len()];\n         if self.has_self && self.parent.is_none() { &own[1..] } else { &own }\n     }"}, {"sha": "7f0f3755c4b33bf501f700130d866c14d90421c2", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59c2ff532d588d5268256578982e5c2cf7d15dad/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59c2ff532d588d5268256578982e5c2cf7d15dad/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=59c2ff532d588d5268256578982e5c2cf7d15dad", "patch": "@@ -22,7 +22,6 @@ use crate::mir::{Body, GeneratorLayout};\n use crate::traits::{self, Reveal};\n use crate::ty;\n use crate::ty::fast_reject::SimplifiedType;\n-use crate::ty::subst::{GenericArg, InternalSubsts, Subst, SubstsRef};\n use crate::ty::util::Discr;\n pub use adt::*;\n pub use assoc::*;\n@@ -44,6 +43,7 @@ use rustc_session::cstore::CrateStoreDyn;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::Span;\n use rustc_target::abi::Align;\n+pub use subst::*;\n pub use vtable::*;\n \n use std::fmt::Debug;"}, {"sha": "5ad93d778208dd1c651a619ede544dca89bb6301", "filename": "compiler/rustc_middle/src/ty/print/mod.rs", "status": "modified", "additions": 1, "deletions": 38, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/59c2ff532d588d5268256578982e5c2cf7d15dad/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59c2ff532d588d5268256578982e5c2cf7d15dad/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs?ref=59c2ff532d588d5268256578982e5c2cf7d15dad", "patch": "@@ -149,7 +149,7 @@ pub trait Printer<'tcx>: Sized {\n                         // on top of the same path, but without its own generics.\n                         _ => {\n                             if !generics.params.is_empty() && substs.len() >= generics.count() {\n-                                let args = self.generic_args_to_print(generics, substs);\n+                                let args = generics.own_substs_no_defaults(self.tcx(), substs);\n                                 return self.path_generic_args(\n                                     |cx| cx.print_def_path(def_id, parent_substs),\n                                     args,\n@@ -184,43 +184,6 @@ pub trait Printer<'tcx>: Sized {\n         }\n     }\n \n-    fn generic_args_to_print(\n-        &self,\n-        generics: &'tcx ty::Generics,\n-        substs: &'tcx [GenericArg<'tcx>],\n-    ) -> &'tcx [GenericArg<'tcx>] {\n-        let mut own_params = generics.parent_count..generics.count();\n-\n-        // Don't print args for `Self` parameters (of traits).\n-        if generics.has_self && own_params.start == 0 {\n-            own_params.start = 1;\n-        }\n-\n-        // Don't print args that are the defaults of their respective parameters.\n-        own_params.end -= generics\n-            .params\n-            .iter()\n-            .rev()\n-            .take_while(|param| match param.kind {\n-                ty::GenericParamDefKind::Lifetime => false,\n-                ty::GenericParamDefKind::Type { has_default, .. } => {\n-                    has_default\n-                        && substs[param.index as usize]\n-                            == GenericArg::from(\n-                                self.tcx().bound_type_of(param.def_id).subst(self.tcx(), substs),\n-                            )\n-                }\n-                ty::GenericParamDefKind::Const { has_default } => {\n-                    has_default\n-                        && substs[param.index as usize]\n-                            == GenericArg::from(self.tcx().const_param_default(param.def_id))\n-                }\n-            })\n-            .count();\n-\n-        &substs[own_params]\n-    }\n-\n     fn default_print_impl_path(\n         self,\n         impl_def_id: DefId,"}, {"sha": "53a97a46b2d2627082f10eee33fbf72aa2a67146", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/59c2ff532d588d5268256578982e5c2cf7d15dad/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59c2ff532d588d5268256578982e5c2cf7d15dad/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=59c2ff532d588d5268256578982e5c2cf7d15dad", "patch": "@@ -825,12 +825,11 @@ pub trait PrettyPrinter<'tcx>:\n \n         for (fn_once_trait_ref, entry) in fn_traits {\n             // Get the (single) generic ty (the args) of this FnOnce trait ref.\n-            let generics = self.generic_args_to_print(\n-                self.tcx().generics_of(fn_once_trait_ref.def_id()),\n-                fn_once_trait_ref.skip_binder().substs,\n-            );\n+            let generics = self.tcx().generics_of(fn_once_trait_ref.def_id());\n+            let args =\n+                generics.own_substs_no_defaults(self.tcx(), fn_once_trait_ref.skip_binder().substs);\n \n-            match (entry.return_ty, generics[0].expect_ty()) {\n+            match (entry.return_ty, args[0].expect_ty()) {\n                 // We can only print `impl Fn() -> ()` if we have a tuple of args and we recorded\n                 // a return type.\n                 (Some(return_ty), arg_tys) if matches!(arg_tys.kind(), ty::Tuple(_)) => {\n@@ -892,15 +891,13 @@ pub trait PrettyPrinter<'tcx>:\n                 print(trait_ref.skip_binder().print_only_trait_name())\n             );\n \n-            let generics = self.generic_args_to_print(\n-                self.tcx().generics_of(trait_ref.def_id()),\n-                trait_ref.skip_binder().substs,\n-            );\n+            let generics = self.tcx().generics_of(trait_ref.def_id());\n+            let args = generics.own_substs_no_defaults(self.tcx(), trait_ref.skip_binder().substs);\n \n-            if !generics.is_empty() || !assoc_items.is_empty() {\n+            if !args.is_empty() || !assoc_items.is_empty() {\n                 let mut first = true;\n \n-                for ty in generics {\n+                for ty in args {\n                     if first {\n                         p!(\"<\");\n                         first = false;\n@@ -1071,10 +1068,10 @@ pub trait PrettyPrinter<'tcx>:\n                     let dummy_cx = cx.tcx().mk_ty_infer(ty::FreshTy(0));\n                     let principal = principal.with_self_ty(cx.tcx(), dummy_cx);\n \n-                    let args = cx.generic_args_to_print(\n-                        cx.tcx().generics_of(principal.def_id),\n-                        principal.substs,\n-                    );\n+                    let args = cx\n+                        .tcx()\n+                        .generics_of(principal.def_id)\n+                        .own_substs_no_defaults(cx.tcx(), principal.substs);\n \n                     // Don't print `'_` if there's no unerased regions.\n                     let print_regions = args.iter().any(|arg| match arg.unpack() {"}, {"sha": "f633e56b0ec1de31c7bc77c128256db810cba09f", "filename": "src/test/ui/const-generics/defaults/rp_impl_trait_fail.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/59c2ff532d588d5268256578982e5c2cf7d15dad/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frp_impl_trait_fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59c2ff532d588d5268256578982e5c2cf7d15dad/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frp_impl_trait_fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frp_impl_trait_fail.rs?ref=59c2ff532d588d5268256578982e5c2cf7d15dad", "patch": "@@ -15,12 +15,12 @@ impl Traitor<1, 2> for u64 {}\n \n \n fn uwu<const N: u8>() -> impl Traitor<N> {\n-    //~^ error: the trait bound `u32: Traitor<N, N>` is not satisfied\n+    //~^ error: the trait bound `u32: Traitor<N>` is not satisfied\n     1_u32\n }\n \n fn owo() -> impl Traitor {\n-    //~^ error: the trait bound `u64: Traitor<1_u8, 1_u8>` is not satisfied\n+    //~^ error: the trait bound `u64: Traitor` is not satisfied\n     1_u64\n }\n "}, {"sha": "cbe4a4ac0d6596cd955d374ea267835e92fbb465", "filename": "src/test/ui/const-generics/defaults/rp_impl_trait_fail.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/59c2ff532d588d5268256578982e5c2cf7d15dad/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frp_impl_trait_fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59c2ff532d588d5268256578982e5c2cf7d15dad/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frp_impl_trait_fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Frp_impl_trait_fail.stderr?ref=59c2ff532d588d5268256578982e5c2cf7d15dad", "patch": "@@ -6,21 +6,21 @@ LL | fn rawr() -> impl Trait {\n    |\n    = help: the trait `Trait` is implemented for `Uwu<N>`\n \n-error[E0277]: the trait bound `u32: Traitor<N, N>` is not satisfied\n+error[E0277]: the trait bound `u32: Traitor<N>` is not satisfied\n   --> $DIR/rp_impl_trait_fail.rs:17:26\n    |\n LL | fn uwu<const N: u8>() -> impl Traitor<N> {\n-   |                          ^^^^^^^^^^^^^^^ the trait `Traitor<N, N>` is not implemented for `u32`\n+   |                          ^^^^^^^^^^^^^^^ the trait `Traitor<N>` is not implemented for `u32`\n    |\n    = help: the following other types implement trait `Traitor<N, M>`:\n              <u32 as Traitor<N, 2_u8>>\n              <u64 as Traitor<1_u8, 2_u8>>\n \n-error[E0277]: the trait bound `u64: Traitor<1_u8, 1_u8>` is not satisfied\n+error[E0277]: the trait bound `u64: Traitor` is not satisfied\n   --> $DIR/rp_impl_trait_fail.rs:22:13\n    |\n LL | fn owo() -> impl Traitor {\n-   |             ^^^^^^^^^^^^ the trait `Traitor<1_u8, 1_u8>` is not implemented for `u64`\n+   |             ^^^^^^^^^^^^ the trait `Traitor` is not implemented for `u64`\n    |\n    = help: the following other types implement trait `Traitor<N, M>`:\n              <u32 as Traitor<N, 2_u8>>"}, {"sha": "5e779d2e8de594c1529865624d09a568283956eb", "filename": "src/test/ui/const-generics/defaults/trait_objects_fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59c2ff532d588d5268256578982e5c2cf7d15dad/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Ftrait_objects_fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59c2ff532d588d5268256578982e5c2cf7d15dad/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Ftrait_objects_fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Ftrait_objects_fail.rs?ref=59c2ff532d588d5268256578982e5c2cf7d15dad", "patch": "@@ -26,5 +26,5 @@ fn main() {\n     foo(&10_u32);\n     //~^ error: the trait bound `u32: Trait` is not satisfied\n     bar(&true);\n-    //~^ error: the trait bound `bool: Traitor<{_: u8}, {_: u8}>` is not satisfied\n+    //~^ error: the trait bound `bool: Traitor<{_: u8}>` is not satisfied\n }"}, {"sha": "60dc96f675a8b680893c4f84f48d5bf42a12b50e", "filename": "src/test/ui/const-generics/defaults/trait_objects_fail.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/59c2ff532d588d5268256578982e5c2cf7d15dad/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Ftrait_objects_fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59c2ff532d588d5268256578982e5c2cf7d15dad/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Ftrait_objects_fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Ftrait_objects_fail.stderr?ref=59c2ff532d588d5268256578982e5c2cf7d15dad", "patch": "@@ -9,16 +9,16 @@ LL |     foo(&10_u32);\n    = help: the trait `Trait<2_u8>` is implemented for `u32`\n    = note: required for the cast to the object type `dyn Trait`\n \n-error[E0277]: the trait bound `bool: Traitor<{_: u8}, {_: u8}>` is not satisfied\n+error[E0277]: the trait bound `bool: Traitor<{_: u8}>` is not satisfied\n   --> $DIR/trait_objects_fail.rs:28:9\n    |\n LL |     bar(&true);\n-   |     --- ^^^^^ the trait `Traitor<{_: u8}, {_: u8}>` is not implemented for `bool`\n+   |     --- ^^^^^ the trait `Traitor<{_: u8}>` is not implemented for `bool`\n    |     |\n    |     required by a bound introduced by this call\n    |\n    = help: the trait `Traitor<2_u8, 3_u8>` is implemented for `bool`\n-   = note: required for the cast to the object type `dyn Traitor<{_: u8}, {_: u8}>`\n+   = note: required for the cast to the object type `dyn Traitor<{_: u8}>`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "72e0e74f3234233e6e498dc4fde58ff6eec662e3", "filename": "src/test/ui/inference/need_type_info/concrete-impl.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/59c2ff532d588d5268256578982e5c2cf7d15dad/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Fconcrete-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59c2ff532d588d5268256578982e5c2cf7d15dad/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Fconcrete-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Fconcrete-impl.rs?ref=59c2ff532d588d5268256578982e5c2cf7d15dad", "patch": "@@ -0,0 +1,16 @@\n+trait Ambiguous<A> {\n+    fn method() {}\n+}\n+\n+struct One;\n+struct Two;\n+struct Struct;\n+\n+impl Ambiguous<One> for Struct {}\n+impl Ambiguous<Two> for Struct {}\n+\n+fn main() {\n+    <Struct as Ambiguous<_>>::method();\n+    //~^ ERROR type annotations needed\n+    //~| ERROR type annotations needed\n+}"}, {"sha": "b79d34affa249ecf2ccf3084b2cfc7d06d22f33b", "filename": "src/test/ui/inference/need_type_info/concrete-impl.stderr", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/59c2ff532d588d5268256578982e5c2cf7d15dad/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Fconcrete-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59c2ff532d588d5268256578982e5c2cf7d15dad/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Fconcrete-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Fconcrete-impl.stderr?ref=59c2ff532d588d5268256578982e5c2cf7d15dad", "patch": "@@ -0,0 +1,33 @@\n+error[E0282]: type annotations needed\n+  --> $DIR/concrete-impl.rs:13:5\n+   |\n+LL |     <Struct as Ambiguous<_>>::method();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type of the type parameter `Self` declared on the trait `Ambiguous`\n+   |\n+help: consider specifying the generic argument\n+   |\n+LL |     <Struct as Ambiguous::<_>>::method();\n+   |                         ~~~~~\n+\n+error[E0283]: type annotations needed\n+  --> $DIR/concrete-impl.rs:13:5\n+   |\n+LL |     <Struct as Ambiguous<_>>::method();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type of the type parameter `Self` declared on the trait `Ambiguous`\n+   |\n+note: multiple `impl`s satisfying `Struct: Ambiguous<_>` found\n+  --> $DIR/concrete-impl.rs:9:1\n+   |\n+LL | impl Ambiguous<One> for Struct {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | impl Ambiguous<Two> for Struct {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: consider specifying the generic argument\n+   |\n+LL |     <Struct as Ambiguous::<_>>::method();\n+   |                         ~~~~~\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0282, E0283.\n+For more information about an error, try `rustc --explain E0282`."}, {"sha": "768a8cc377823440dd893a66e42e06b5eaa08537", "filename": "src/test/ui/inference/need_type_info/self-ty-in-path.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/59c2ff532d588d5268256578982e5c2cf7d15dad/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Fself-ty-in-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59c2ff532d588d5268256578982e5c2cf7d15dad/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Fself-ty-in-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Fself-ty-in-path.rs?ref=59c2ff532d588d5268256578982e5c2cf7d15dad", "patch": "@@ -0,0 +1,13 @@\n+// Test that we don't ICE when encountering a `Self` in a path.\n+struct TestErr<T>(T);\n+\n+impl<T> TestErr<T> {\n+    fn func_a<U>() {}\n+\n+    fn func_b() {\n+        Self::func_a();\n+        //~^ ERROR type annotations needed\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "04b521dbdb3609c6c2c3efad581646c99e363b3c", "filename": "src/test/ui/inference/need_type_info/self-ty-in-path.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/59c2ff532d588d5268256578982e5c2cf7d15dad/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Fself-ty-in-path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59c2ff532d588d5268256578982e5c2cf7d15dad/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Fself-ty-in-path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Fself-ty-in-path.stderr?ref=59c2ff532d588d5268256578982e5c2cf7d15dad", "patch": "@@ -0,0 +1,14 @@\n+error[E0282]: type annotations needed\n+  --> $DIR/self-ty-in-path.rs:8:9\n+   |\n+LL |         Self::func_a();\n+   |         ^^^^^^^^^^^^ cannot infer type of the type parameter `U` declared on the associated function `func_a`\n+   |\n+help: consider specifying the generic argument\n+   |\n+LL |         Self::func_a::<U>();\n+   |                     +++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0282`."}, {"sha": "0ed02ddc5f390029072bb576415060634d87f60c", "filename": "src/test/ui/inference/need_type_info/type-alias-indirect.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/59c2ff532d588d5268256578982e5c2cf7d15dad/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Ftype-alias-indirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59c2ff532d588d5268256578982e5c2cf7d15dad/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Ftype-alias-indirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Ftype-alias-indirect.rs?ref=59c2ff532d588d5268256578982e5c2cf7d15dad", "patch": "@@ -0,0 +1,18 @@\n+// An addition to the `type-alias.rs` test,\n+// see the FIXME in that file for why this test\n+// exists.\n+//\n+// If there is none, feel free to remove this test\n+// again.\n+struct Ty<T>(T);\n+impl<T> Ty<T> {\n+    fn new() {}\n+}\n+\n+type IndirectAlias<T> = Ty<Box<T>>;\n+fn indirect_alias() {\n+    IndirectAlias::new();\n+    //~^ ERROR type annotations needed\n+}\n+\n+fn main() {}"}, {"sha": "6161690df50503aa976d0ba9f74f1d8f03ce5cc1", "filename": "src/test/ui/inference/need_type_info/type-alias-indirect.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/59c2ff532d588d5268256578982e5c2cf7d15dad/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Ftype-alias-indirect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59c2ff532d588d5268256578982e5c2cf7d15dad/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Ftype-alias-indirect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Ftype-alias-indirect.stderr?ref=59c2ff532d588d5268256578982e5c2cf7d15dad", "patch": "@@ -0,0 +1,9 @@\n+error[E0282]: type annotations needed\n+  --> $DIR/type-alias-indirect.rs:14:5\n+   |\n+LL |     IndirectAlias::new();\n+   |     ^^^^^^^^^^^^^ cannot infer type for type parameter `T` declared on the type alias `IndirectAlias`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0282`."}, {"sha": "f921b046b6cac524f36cee427b81e2c56f0ada09", "filename": "src/test/ui/inference/need_type_info/type-alias.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/59c2ff532d588d5268256578982e5c2cf7d15dad/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Ftype-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59c2ff532d588d5268256578982e5c2cf7d15dad/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Ftype-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Ftype-alias.rs?ref=59c2ff532d588d5268256578982e5c2cf7d15dad", "patch": "@@ -0,0 +1,36 @@\n+// Test the inference errors in case the relevant path\n+// uses a type alias.\n+//\n+// Regression test for #97698.\n+struct Ty<T>(T);\n+impl<T> Ty<T> {\n+    fn new() {}\n+}\n+\n+type DirectAlias<T> = Ty<T>;\n+fn direct_alias() {\n+    DirectAlias::new()\n+    //~^ ERROR type annotations needed\n+}\n+\n+type IndirectAlias<T> = Ty<Box<T>>;\n+fn indirect_alias() {\n+    IndirectAlias::new();\n+    // FIXME: This should also emit an error.\n+    //\n+    // Added it separately as `type-alias-indirect.rs`\n+    // where it does error.\n+}\n+\n+struct TyDefault<T, U = u32>(T, U);\n+impl<T> TyDefault<T> {\n+    fn new() {}\n+}\n+\n+type DirectButWithDefaultAlias<T> = TyDefault<T>;\n+fn direct_but_with_default_alias() {\n+    DirectButWithDefaultAlias::new();\n+    //~^ ERROR type annotations needed\n+}\n+\n+fn main() {}"}, {"sha": "a33f49baf549f4506e793bd31a00000b33dbd51e", "filename": "src/test/ui/inference/need_type_info/type-alias.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/59c2ff532d588d5268256578982e5c2cf7d15dad/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Ftype-alias.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59c2ff532d588d5268256578982e5c2cf7d15dad/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Ftype-alias.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Ftype-alias.stderr?ref=59c2ff532d588d5268256578982e5c2cf7d15dad", "patch": "@@ -0,0 +1,15 @@\n+error[E0282]: type annotations needed\n+  --> $DIR/type-alias.rs:12:5\n+   |\n+LL |     DirectAlias::new()\n+   |     ^^^^^^^^^^^^^^^^ cannot infer type for type parameter `T`\n+\n+error[E0282]: type annotations needed\n+  --> $DIR/type-alias.rs:32:5\n+   |\n+LL |     DirectButWithDefaultAlias::new();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type for type parameter `T`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0282`."}]}