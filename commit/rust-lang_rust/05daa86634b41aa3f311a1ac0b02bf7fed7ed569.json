{"sha": "05daa86634b41aa3f311a1ac0b02bf7fed7ed569", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1ZGFhODY2MzRiNDFhYTNmMzExYTFhYzBiMDJiZjdmZWQ3ZWQ1Njk=", "commit": {"author": {"name": "Jan Jansen", "email": "farodin91@googlemail.com", "date": "2018-12-27T20:45:16Z"}, "committer": {"name": "Jan Jansen", "email": "farodin91@googlemail.com", "date": "2018-12-31T14:00:04Z"}, "message": " Make modules with tests runnable\n\nFixes #154", "tree": {"sha": "b703cfe2fc7788631703141d9f4be63b0f5d7fe5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b703cfe2fc7788631703141d9f4be63b0f5d7fe5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05daa86634b41aa3f311a1ac0b02bf7fed7ed569", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05daa86634b41aa3f311a1ac0b02bf7fed7ed569", "html_url": "https://github.com/rust-lang/rust/commit/05daa86634b41aa3f311a1ac0b02bf7fed7ed569", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05daa86634b41aa3f311a1ac0b02bf7fed7ed569/comments", "author": {"login": "farodin91", "id": 1159212, "node_id": "MDQ6VXNlcjExNTkyMTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1159212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/farodin91", "html_url": "https://github.com/farodin91", "followers_url": "https://api.github.com/users/farodin91/followers", "following_url": "https://api.github.com/users/farodin91/following{/other_user}", "gists_url": "https://api.github.com/users/farodin91/gists{/gist_id}", "starred_url": "https://api.github.com/users/farodin91/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/farodin91/subscriptions", "organizations_url": "https://api.github.com/users/farodin91/orgs", "repos_url": "https://api.github.com/users/farodin91/repos", "events_url": "https://api.github.com/users/farodin91/events{/privacy}", "received_events_url": "https://api.github.com/users/farodin91/received_events", "type": "User", "site_admin": false}, "committer": {"login": "farodin91", "id": 1159212, "node_id": "MDQ6VXNlcjExNTkyMTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1159212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/farodin91", "html_url": "https://github.com/farodin91", "followers_url": "https://api.github.com/users/farodin91/followers", "following_url": "https://api.github.com/users/farodin91/following{/other_user}", "gists_url": "https://api.github.com/users/farodin91/gists{/gist_id}", "starred_url": "https://api.github.com/users/farodin91/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/farodin91/subscriptions", "organizations_url": "https://api.github.com/users/farodin91/orgs", "repos_url": "https://api.github.com/users/farodin91/repos", "events_url": "https://api.github.com/users/farodin91/events{/privacy}", "received_events_url": "https://api.github.com/users/farodin91/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "690826871202c77326836a895a38532ebd83c54b", "url": "https://api.github.com/repos/rust-lang/rust/commits/690826871202c77326836a895a38532ebd83c54b", "html_url": "https://github.com/rust-lang/rust/commit/690826871202c77326836a895a38532ebd83c54b"}], "stats": {"total": 351, "additions": 288, "deletions": 63}, "files": [{"sha": "5669aa94d36c2ee2d4d48cc332ce6c80bb9e1142", "filename": "crates/ra_analysis/src/imp.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/05daa86634b41aa3f311a1ac0b02bf7fed7ed569/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05daa86634b41aa3f311a1ac0b02bf7fed7ed569/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fimp.rs?ref=05daa86634b41aa3f311a1ac0b02bf7fed7ed569", "patch": "@@ -181,6 +181,28 @@ impl AnalysisImpl {\n         };\n         Ok(query.search(&buf))\n     }\n+\n+    pub(crate) fn module_path(&self, position: FilePosition) -> Cancelable<Option<String>> {\n+        let descr = match source_binder::module_from_position(&*self.db, position)? {\n+            None => return Ok(None),\n+            Some(it) => it,\n+        };\n+        let name = match descr.name() {\n+            None => return Ok(None),\n+            Some(it) => it.to_string(),\n+        };\n+\n+        let modules = descr.path_to_root();\n+\n+        let path = modules\n+            .iter()\n+            .filter_map(|s| s.name())\n+            .skip(1) // name is already part of the string.\n+            .fold(name, |path, it| format!(\"{}::{}\", it, path));\n+\n+        Ok(Some(path.to_string()))\n+    }\n+\n     /// This returns `Vec` because a module may be included from several places. We\n     /// don't handle this case yet though, so the Vec has length at most one.\n     pub fn parent_module(&self, position: FilePosition) -> Cancelable<Vec<(FileId, FileSymbol)>> {"}, {"sha": "e6cfaecc3c10d2e62f9f4cd13778158b6718f55f", "filename": "crates/ra_analysis/src/lib.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/05daa86634b41aa3f311a1ac0b02bf7fed7ed569/crates%2Fra_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05daa86634b41aa3f311a1ac0b02bf7fed7ed569/crates%2Fra_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Flib.rs?ref=05daa86634b41aa3f311a1ac0b02bf7fed7ed569", "patch": "@@ -15,6 +15,7 @@ mod imp;\n mod completion;\n mod symbol_index;\n pub mod mock_analysis;\n+mod runnables;\n \n mod extend_selection;\n mod syntax_highlighting;\n@@ -33,10 +34,12 @@ use crate::{\n     symbol_index::SymbolIndex,\n };\n \n-pub use crate::completion::{CompletionItem, CompletionItemKind, InsertText};\n+pub use crate::{\n+    completion::{CompletionItem, CompletionItemKind, InsertText},\n+    runnables::{Runnable, RunnableKind}\n+};\n pub use ra_editor::{\n-    FileSymbol, Fold, FoldKind, HighlightedRange, LineIndex, Runnable, RunnableKind, StructureNode,\n-    Severity\n+    FileSymbol, Fold, FoldKind, HighlightedRange, LineIndex, StructureNode, Severity\n };\n pub use hir::FnSignatureInfo;\n \n@@ -336,6 +339,9 @@ impl Analysis {\n     pub fn parent_module(&self, position: FilePosition) -> Cancelable<Vec<(FileId, FileSymbol)>> {\n         self.imp.parent_module(position)\n     }\n+    pub fn module_path(&self, position: FilePosition) -> Cancelable<Option<String>> {\n+        self.imp.module_path(position)\n+    }\n     pub fn crate_for(&self, file_id: FileId) -> Cancelable<Vec<CrateId>> {\n         self.imp.crate_for(file_id)\n     }\n@@ -344,7 +350,7 @@ impl Analysis {\n     }\n     pub fn runnables(&self, file_id: FileId) -> Cancelable<Vec<Runnable>> {\n         let file = self.imp.file_syntax(file_id);\n-        Ok(ra_editor::runnables(&file))\n+        Ok(runnables::runnables(self, &file, file_id))\n     }\n     pub fn highlight(&self, file_id: FileId) -> Cancelable<Vec<HighlightedRange>> {\n         syntax_highlighting::highlight(&*self.imp.db, file_id)"}, {"sha": "61ca0930a79b7f12676d2a5294ddd8562546aeef", "filename": "crates/ra_analysis/src/runnables.rs", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/05daa86634b41aa3f311a1ac0b02bf7fed7ed569/crates%2Fra_analysis%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05daa86634b41aa3f311a1ac0b02bf7fed7ed569/crates%2Fra_analysis%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Frunnables.rs?ref=05daa86634b41aa3f311a1ac0b02bf7fed7ed569", "patch": "@@ -0,0 +1,72 @@\n+use ra_syntax::{\n+    ast::{self, AstNode, NameOwner, ModuleItemOwner},\n+    SourceFileNode, TextRange, SyntaxNodeRef,\n+    TextUnit,\n+};\n+use crate::{\n+    Analysis, FileId, FilePosition\n+};\n+\n+#[derive(Debug)]\n+pub struct Runnable {\n+    pub range: TextRange,\n+    pub kind: RunnableKind,\n+}\n+\n+#[derive(Debug)]\n+pub enum RunnableKind {\n+    Test { name: String },\n+    TestMod { path: String },\n+    Bin,\n+}\n+\n+pub fn runnables(\n+    analysis: &Analysis,\n+    file_node: &SourceFileNode,\n+    file_id: FileId,\n+) -> Vec<Runnable> {\n+    file_node\n+        .syntax()\n+        .descendants()\n+        .filter_map(|i| runnable(analysis, i, file_id))\n+        .collect()\n+}\n+\n+fn runnable<'a>(analysis: &Analysis, item: SyntaxNodeRef<'a>, file_id: FileId) -> Option<Runnable> {\n+    if let Some(f) = ast::FnDef::cast(item) {\n+        let name = f.name()?.text();\n+        let kind = if name == \"main\" {\n+            RunnableKind::Bin\n+        } else if f.has_atom_attr(\"test\") {\n+            RunnableKind::Test {\n+                name: name.to_string(),\n+            }\n+        } else {\n+            return None;\n+        };\n+        Some(Runnable {\n+            range: f.syntax().range(),\n+            kind,\n+        })\n+    } else if let Some(m) = ast::Module::cast(item) {\n+        if m.item_list()?\n+            .items()\n+            .map(ast::ModuleItem::syntax)\n+            .filter_map(ast::FnDef::cast)\n+            .any(|f| f.has_atom_attr(\"test\"))\n+        {\n+            let postition = FilePosition {\n+                file_id,\n+                offset: m.syntax().range().start() + TextUnit::from_usize(1),\n+            };\n+            analysis.module_path(postition).ok()?.map(|path| Runnable {\n+                range: m.syntax().range(),\n+                kind: RunnableKind::TestMod { path },\n+            })\n+        } else {\n+            None\n+        }\n+    } else {\n+        None\n+    }\n+}"}, {"sha": "9e5342c4625a1fef44b0b0ad03a843c8876b70b4", "filename": "crates/ra_analysis/tests/runnables.rs", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/05daa86634b41aa3f311a1ac0b02bf7fed7ed569/crates%2Fra_analysis%2Ftests%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05daa86634b41aa3f311a1ac0b02bf7fed7ed569/crates%2Fra_analysis%2Ftests%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Ftests%2Frunnables.rs?ref=05daa86634b41aa3f311a1ac0b02bf7fed7ed569", "patch": "@@ -0,0 +1,118 @@\n+extern crate ra_analysis;\n+extern crate ra_editor;\n+extern crate ra_syntax;\n+extern crate relative_path;\n+extern crate rustc_hash;\n+extern crate test_utils;\n+\n+use test_utils::assert_eq_dbg;\n+\n+use ra_analysis::{\n+    mock_analysis::{analysis_and_position},\n+};\n+\n+#[test]\n+fn test_runnables() {\n+    let (analysis, pos) = analysis_and_position(\n+        r#\"\n+        //- /lib.rs\n+        <|> //empty\n+        fn main() {}\n+\n+        #[test]\n+        fn test_foo() {}\n+\n+        #[test]\n+        #[ignore]\n+        fn test_foo() {}\n+        \"#,\n+    );\n+    let runnables = analysis.runnables(pos.file_id).unwrap();\n+    assert_eq_dbg(\n+        r#\"[Runnable { range: [1; 21), kind: Bin },\n+                Runnable { range: [22; 46), kind: Test { name: \"test_foo\" } },\n+                Runnable { range: [47; 81), kind: Test { name: \"test_foo\" } }]\"#,\n+        &runnables,\n+    )\n+}\n+\n+#[test]\n+fn test_runnables_module() {\n+    let (analysis, pos) = analysis_and_position(\n+        r#\"\n+        //- /lib.rs\n+        <|> //empty\n+        mod test_mod {\n+            #[test]\n+            fn test_foo1() {}\n+        }\n+        \"#,\n+    );\n+    let runnables = analysis.runnables(pos.file_id).unwrap();\n+    assert_eq_dbg(\n+        r#\"[Runnable { range: [1; 59), kind: TestMod { path: \"test_mod\" } },\n+                Runnable { range: [28; 57), kind: Test { name: \"test_foo1\" } }]\"#,\n+        &runnables,\n+    )\n+}\n+\n+#[test]\n+fn test_runnables_one_depth_layer_module() {\n+    let (analysis, pos) = analysis_and_position(\n+        r#\"\n+        //- /lib.rs\n+        <|> //empty\n+        mod foo {\n+            mod test_mod {\n+                #[test]\n+                fn test_foo1() {}\n+            }\n+        }\n+        \"#,\n+    );\n+    let runnables = analysis.runnables(pos.file_id).unwrap();\n+    assert_eq_dbg(\n+        r#\"[Runnable { range: [23; 85), kind: TestMod { path: \"foo::test_mod\" } },\n+                Runnable { range: [46; 79), kind: Test { name: \"test_foo1\" } }]\"#,\n+        &runnables,\n+    )\n+}\n+\n+#[test]\n+fn test_runnables_multiple_depth_module() {\n+    let (analysis, pos) = analysis_and_position(\n+        r#\"\n+        //- /lib.rs\n+        <|> //empty\n+        mod foo {\n+            mod bar {\n+                mod test_mod {\n+                    #[test]\n+                    fn test_foo1() {}\n+                }\n+            }\n+        }\n+        \"#,\n+    );\n+    let runnables = analysis.runnables(pos.file_id).unwrap();\n+    assert_eq_dbg(\n+        r#\"[Runnable { range: [41; 115), kind: TestMod { path: \"foo::bar::test_mod\" } },\n+                Runnable { range: [68; 105), kind: Test { name: \"test_foo1\" } }]\"#,\n+        &runnables,\n+    )\n+}\n+\n+#[test]\n+fn test_runnables_no_test_function_in_module() {\n+    let (analysis, pos) = analysis_and_position(\n+        r#\"\n+        //- /lib.rs\n+        <|> //empty\n+        mod test_mod {\n+            fn foo1() {}\n+        }\n+        \"#,\n+    );\n+    let runnables = analysis.runnables(pos.file_id).unwrap();\n+    assert_eq_dbg(r#\"[]\"#, &runnables)\n+}"}, {"sha": "b61ead752c59a883c1746b9708ba9b7c8dcf7b6b", "filename": "crates/ra_analysis/tests/tests.rs", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/05daa86634b41aa3f311a1ac0b02bf7fed7ed569/crates%2Fra_analysis%2Ftests%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05daa86634b41aa3f311a1ac0b02bf7fed7ed569/crates%2Fra_analysis%2Ftests%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Ftests%2Ftests.rs?ref=05daa86634b41aa3f311a1ac0b02bf7fed7ed569", "patch": "@@ -131,6 +131,56 @@ fn test_resolve_parent_module_for_inline() {\n     );\n }\n \n+#[test]\n+fn test_path_one_layer() {\n+    let (analysis, pos) = analysis_and_position(\n+        \"\n+        //- /lib.rs\n+        mod foo;\n+        //- /foo/mod.rs\n+        mod bla;\n+        //- /foo/bla.rs\n+        <|> //empty\n+    \",\n+    );\n+    let symbols = analysis.module_path(pos).unwrap().unwrap();\n+    assert_eq!(\"foo::bla\", &symbols);\n+}\n+\n+#[test]\n+fn test_path_two_layer() {\n+    let (analysis, pos) = analysis_and_position(\n+        \"\n+        //- /lib.rs\n+        mod foo;\n+        //- /foo/mod.rs\n+        mod bla;\n+        //- /foo/bla/mod.rs\n+        mod more;\n+        //- /foo/bla/more.rs\n+        <|> //empty\n+    \",\n+    );\n+    let symbols = analysis.module_path(pos).unwrap().unwrap();\n+    assert_eq!(\"foo::bla::more\", &symbols);\n+}\n+\n+#[test]\n+fn test_path_in_file_mod() {\n+    let (analysis, pos) = analysis_and_position(\n+        \"\n+        //- /lib.rs\n+        mod foo;\n+        //- /foo.rs\n+        mod bar {\n+            <|> //empty\n+        }\n+    \",\n+    );\n+    let symbols = analysis.module_path(pos).unwrap().unwrap();\n+    assert_eq!(\"foo::bar\", &symbols);\n+}\n+\n #[test]\n fn test_resolve_crate_root() {\n     let mock = MockAnalysis::with_files("}, {"sha": "412b8aea92a3310b6e44f33510d17cb0a47fa394", "filename": "crates/ra_editor/src/lib.rs", "status": "modified", "additions": 1, "deletions": 59, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/05daa86634b41aa3f311a1ac0b02bf7fed7ed569/crates%2Fra_editor%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05daa86634b41aa3f311a1ac0b02bf7fed7ed569/crates%2Fra_editor%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Flib.rs?ref=05daa86634b41aa3f311a1ac0b02bf7fed7ed569", "patch": "@@ -22,7 +22,7 @@ pub use self::{\n use ra_text_edit::{TextEdit, TextEditBuilder};\n use ra_syntax::{\n     algo::find_leaf_at_offset,\n-    ast::{self, AstNode, NameOwner},\n+    ast::{self, AstNode},\n     SourceFileNode,\n     SyntaxKind::{self, *},\n     SyntaxNodeRef, TextRange, TextUnit, Direction,\n@@ -49,18 +49,6 @@ pub struct Diagnostic {\n     pub fix: Option<LocalEdit>,\n }\n \n-#[derive(Debug)]\n-pub struct Runnable {\n-    pub range: TextRange,\n-    pub kind: RunnableKind,\n-}\n-\n-#[derive(Debug)]\n-pub enum RunnableKind {\n-    Test { name: String },\n-    Bin,\n-}\n-\n pub fn matching_brace(file: &SourceFileNode, offset: TextUnit) -> Option<TextUnit> {\n     const BRACES: &[SyntaxKind] = &[\n         L_CURLY, R_CURLY, L_BRACK, R_BRACK, L_PAREN, R_PAREN, L_ANGLE, R_ANGLE,\n@@ -133,29 +121,6 @@ pub fn syntax_tree(file: &SourceFileNode) -> String {\n     ::ra_syntax::utils::dump_tree(file.syntax())\n }\n \n-pub fn runnables(file: &SourceFileNode) -> Vec<Runnable> {\n-    file.syntax()\n-        .descendants()\n-        .filter_map(ast::FnDef::cast)\n-        .filter_map(|f| {\n-            let name = f.name()?.text();\n-            let kind = if name == \"main\" {\n-                RunnableKind::Bin\n-            } else if f.has_atom_attr(\"test\") {\n-                RunnableKind::Test {\n-                    name: name.to_string(),\n-                }\n-            } else {\n-                return None;\n-            };\n-            Some(Runnable {\n-                range: f.syntax().range(),\n-                kind,\n-            })\n-        })\n-        .collect()\n-}\n-\n pub fn find_node_at_offset<'a, N: AstNode<'a>>(\n     syntax: SyntaxNodeRef<'a>,\n     offset: TextUnit,\n@@ -190,29 +155,6 @@ fn main() {}\n         );\n     }\n \n-    #[test]\n-    fn test_runnables() {\n-        let file = SourceFileNode::parse(\n-            r#\"\n-fn main() {}\n-\n-#[test]\n-fn test_foo() {}\n-\n-#[test]\n-#[ignore]\n-fn test_foo() {}\n-\"#,\n-        );\n-        let runnables = runnables(&file);\n-        assert_eq_dbg(\n-            r#\"[Runnable { range: [1; 13), kind: Bin },\n-                Runnable { range: [15; 39), kind: Test { name: \"test_foo\" } },\n-                Runnable { range: [41; 75), kind: Test { name: \"test_foo\" } }]\"#,\n-            &runnables,\n-        )\n-    }\n-\n     #[test]\n     fn test_matching_brace() {\n         fn do_check(before: &str, after: &str) {"}, {"sha": "87e30191fbada4ec400a887d3958f2050ad7153d", "filename": "crates/ra_hir/src/module.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/05daa86634b41aa3f311a1ac0b02bf7fed7ed569/crates%2Fra_hir%2Fsrc%2Fmodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05daa86634b41aa3f311a1ac0b02bf7fed7ed569/crates%2Fra_hir%2Fsrc%2Fmodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmodule.rs?ref=05daa86634b41aa3f311a1ac0b02bf7fed7ed569", "patch": "@@ -75,6 +75,11 @@ impl Module {\n         Some(Crate::new(crate_id))\n     }\n \n+    /// Returns the all modulkes on the way to the root.\n+    pub fn path_to_root(&self) -> Vec<Module> {\n+        generate(Some(self.clone()), move |it| it.parent()).collect::<Vec<Module>>()\n+    }\n+\n     /// The root of the tree this module is part of\n     pub fn crate_root(&self) -> Module {\n         let root_id = self.module_id.crate_root(&self.tree);"}, {"sha": "1d93e8f4dd4191e0524fbe0467c07f38a56cdba2", "filename": "crates/ra_lsp_server/src/main_loop/handlers.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/05daa86634b41aa3f311a1ac0b02bf7fed7ed569/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05daa86634b41aa3f311a1ac0b02bf7fed7ed569/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=05daa86634b41aa3f311a1ac0b02bf7fed7ed569", "patch": "@@ -257,6 +257,7 @@ pub fn handle_runnables(\n             range: runnable.range.conv_with(&line_index),\n             label: match &runnable.kind {\n                 RunnableKind::Test { name } => format!(\"test {}\", name),\n+                RunnableKind::TestMod { path } => format!(\"test-mod {}\", path),\n                 RunnableKind::Bin => \"run binary\".to_string(),\n             },\n             bin: \"cargo\".to_string(),\n@@ -308,6 +309,15 @@ pub fn handle_runnables(\n                 res.push(name.to_string());\n                 res.push(\"--nocapture\".to_string());\n             }\n+            RunnableKind::TestMod { path } => {\n+                res.push(\"test\".to_string());\n+                if let Some(spec) = spec {\n+                    spec.push_to(&mut res);\n+                }\n+                res.push(\"--\".to_string());\n+                res.push(path.to_string());\n+                res.push(\"--nocapture\".to_string());\n+            }\n             RunnableKind::Bin => {\n                 res.push(\"run\".to_string());\n                 if let Some(spec) = spec {"}]}