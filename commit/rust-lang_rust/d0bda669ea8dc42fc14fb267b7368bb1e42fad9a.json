{"sha": "d0bda669ea8dc42fc14fb267b7368bb1e42fad9a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwYmRhNjY5ZWE4ZGM0MmZjMTRmYjI2N2I3MzY4YmIxZTQyZmFkOWE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-08T21:31:47Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-18T12:47:37Z"}, "message": "move the signature into the closure type", "tree": {"sha": "fe8d80a0b1900a79a7131cd3cff8f8983f4cba9d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe8d80a0b1900a79a7131cd3cff8f8983f4cba9d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0bda669ea8dc42fc14fb267b7368bb1e42fad9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0bda669ea8dc42fc14fb267b7368bb1e42fad9a", "html_url": "https://github.com/rust-lang/rust/commit/d0bda669ea8dc42fc14fb267b7368bb1e42fad9a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0bda669ea8dc42fc14fb267b7368bb1e42fad9a/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54f4f396d90e492fe9ede8608fe1a870e21fd10e", "url": "https://api.github.com/repos/rust-lang/rust/commits/54f4f396d90e492fe9ede8608fe1a870e21fd10e", "html_url": "https://github.com/rust-lang/rust/commit/54f4f396d90e492fe9ede8608fe1a870e21fd10e"}], "stats": {"total": 92, "additions": 66, "deletions": 26}, "files": [{"sha": "ea3c0a8ddb4507d9c9e3851f6643eab1bc134926", "filename": "src/librustc/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d0bda669ea8dc42fc14fb267b7368bb1e42fad9a/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0bda669ea8dc42fc14fb267b7368bb1e42fad9a/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=d0bda669ea8dc42fc14fb267b7368bb1e42fad9a", "patch": "@@ -125,9 +125,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             // ```\n             labels.clear();\n             labels.push((pattern.span, format!(\"consider giving this closure parameter a type\")));\n-        }\n-\n-        if let Some(pattern) = local_visitor.found_local_pattern {\n+        } else if let Some(pattern) = local_visitor.found_local_pattern {\n             if let Some(simple_name) = pattern.simple_name() {\n                 labels.push((pattern.span, format!(\"consider giving `{}` a type\", simple_name)));\n             } else {"}, {"sha": "77aa35539677bb3ea56e0caa1f6034141efcd8d8", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d0bda669ea8dc42fc14fb267b7368bb1e42fad9a/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0bda669ea8dc42fc14fb267b7368bb1e42fad9a/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=d0bda669ea8dc42fc14fb267b7368bb1e42fad9a", "patch": "@@ -174,7 +174,7 @@ pub enum TypeVariants<'tcx> {\n \n /// A closure can be modeled as a struct that looks like:\n ///\n-///     struct Closure<'l0...'li, T0...Tj, CK, U0...Uk> {\n+///     struct Closure<'l0...'li, T0...Tj, CK, CS, U0...Uk> {\n ///         upvar0: U0,\n ///         ...\n ///         upvark: Uk\n@@ -187,6 +187,10 @@ pub enum TypeVariants<'tcx> {\n /// - CK represents the *closure kind* (Fn vs FnMut vs FnOnce). This\n ///   is rather hackily encoded via a scalar type. See\n ///   `TyS::to_opt_closure_kind` for details.\n+/// - CS represents the *closure signature*, representing as a `fn()`\n+///   type. For example, `fn(u32, u32) -> u32` would mean that the closure\n+///   implements `CK<(u32, u32), Output = u32>`, where `CK` is the trait\n+///   specified above.\n /// - U0...Uk are type parameters representing the types of its upvars\n ///   (borrowed, if appropriate; that is, if Ui represents a by-ref upvar,\n ///    and the up-var has the type `Foo`, then `Ui = &Foo`).\n@@ -266,6 +270,7 @@ pub struct ClosureSubsts<'tcx> {\n /// parent slice and not canonical substs themselves.\n struct SplitClosureSubsts<'tcx> {\n     closure_kind_ty: Ty<'tcx>,\n+    closure_sig_ty: Ty<'tcx>,\n     upvar_kinds: &'tcx [Kind<'tcx>],\n }\n \n@@ -277,8 +282,9 @@ impl<'tcx> ClosureSubsts<'tcx> {\n         let generics = tcx.generics_of(def_id);\n         let parent_len = generics.parent_count();\n         SplitClosureSubsts {\n-            closure_kind_ty: self.substs[parent_len].as_type().expect(\"closure-kind should be type\"),\n-            upvar_kinds: &self.substs[parent_len + 1..],\n+            closure_kind_ty: self.substs[parent_len].as_type().expect(\"CK should be a type\"),\n+            closure_sig_ty: self.substs[parent_len + 1].as_type().expect(\"CS should be a type\"),\n+            upvar_kinds: &self.substs[parent_len + 2..],\n         }\n     }\n \n@@ -295,6 +301,20 @@ impl<'tcx> ClosureSubsts<'tcx> {\n     pub fn closure_kind_ty(self, def_id: DefId, tcx: TyCtxt<'_, '_, '_>) -> Ty<'tcx> {\n         self.split(def_id, tcx).closure_kind_ty\n     }\n+\n+    /// Returns the type representing the closure signature for this\n+    /// closure; may contain type variables during inference.\n+    pub fn closure_sig_ty(self, def_id: DefId, tcx: TyCtxt<'_, '_, '_>) -> Ty<'tcx> {\n+        self.split(def_id, tcx).closure_sig_ty\n+    }\n+\n+    /// Extracts the signature from the closure.\n+    pub fn closure_sig(self, def_id: DefId, tcx: TyCtxt<'_, '_, '_>) -> ty::PolyFnSig<'tcx> {\n+        match &self.split(def_id, tcx).closure_sig_ty.sty {\n+            ty::TyFnPtr(sig) => *sig,\n+            t => bug!(\"closure_sig_ty is not a fn-ptr: {:?}\", t),\n+        }\n+    }\n }\n \n impl<'tcx> ClosureSubsts<'tcx> {"}, {"sha": "5f5a418092b738e5fcb2b480599d2796aeef5bc7", "filename": "src/librustc/ty/wf.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d0bda669ea8dc42fc14fb267b7368bb1e42fad9a/src%2Flibrustc%2Fty%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0bda669ea8dc42fc14fb267b7368bb1e42fad9a/src%2Flibrustc%2Fty%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwf.rs?ref=d0bda669ea8dc42fc14fb267b7368bb1e42fad9a", "patch": "@@ -336,7 +336,7 @@ impl<'a, 'gcx, 'tcx> WfPredicates<'a, 'gcx, 'tcx> {\n                     }\n                 }\n \n-                ty::TyGenerator(..) | ty::TyClosure(..) => {\n+                ty::TyGenerator(..) => {\n                     // the types in a closure or generator are always the types of\n                     // local variables (or possibly references to local\n                     // variables), we'll walk those.\n@@ -346,6 +346,21 @@ impl<'a, 'gcx, 'tcx> WfPredicates<'a, 'gcx, 'tcx> {\n                     // WFedness.)\n                 }\n \n+                ty::TyClosure(def_id, substs) => {\n+                    // Just check the upvar types for WF. This is\n+                    // needed because we capture the signature and it\n+                    // may not be WF without the implied\n+                    // bounds. Consider a closure like `|x: &'a T|` --\n+                    // it may be that `T: 'a` is not known to hold in\n+                    // the creator's context (and indeed the closure\n+                    // may not be invoked by its creator, but rather\n+                    // turned to someone who *can* verify that).\n+                    subtys.skip_current_subtree(); // subtree handled by compute_projection\n+                    for upvar_ty in substs.upvar_tys(def_id, self.infcx.tcx) {\n+                        self.compute(upvar_ty);\n+                    }\n+                }\n+\n                 ty::TyFnDef(..) | ty::TyFnPtr(_) => {\n                     // let the loop iterate into the argument/return\n                     // types appearing in the fn signature"}, {"sha": "6c20468c286fc8406db5f0c9bb57d88d4fc392ca", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d0bda669ea8dc42fc14fb267b7368bb1e42fad9a/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0bda669ea8dc42fc14fb267b7368bb1e42fad9a/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=d0bda669ea8dc42fc14fb267b7368bb1e42fad9a", "patch": "@@ -110,6 +110,9 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             self.demand_eqtype(expr.span,\n                                ty::ClosureKind::FnOnce.to_ty(self.tcx),\n                                substs.closure_kind_ty(expr_def_id, self.tcx));\n+            self.demand_eqtype(expr.span,\n+                               self.tcx.types.char, // for generator, use some bogus type\n+                               substs.closure_sig_ty(expr_def_id, self.tcx));\n             return self.tcx.mk_generator(expr_def_id, substs, interior);\n         }\n \n@@ -138,6 +141,11 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             opt_kind\n         );\n \n+        let sig_fn_ptr_ty = self.tcx.mk_fn_ptr(sig);\n+        self.demand_eqtype(expr.span,\n+                           sig_fn_ptr_ty,\n+                           substs.closure_sig_ty(expr_def_id, self.tcx));\n+\n         self.tables.borrow_mut().closure_tys_mut().insert(expr.hir_id, sig);\n         if let Some(kind) = opt_kind {\n             self.demand_eqtype(expr.span,"}, {"sha": "7a03d97c18a682a243dd9aef6eb02c8f6e94c438", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d0bda669ea8dc42fc14fb267b7368bb1e42fad9a/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0bda669ea8dc42fc14fb267b7368bb1e42fad9a/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=d0bda669ea8dc42fc14fb267b7368bb1e42fad9a", "patch": "@@ -1017,7 +1017,7 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     if let NodeExpr(&hir::Expr { node: hir::ExprClosure(..), .. }) = node {\n         // add a dummy parameter for the closure kind\n         types.push(ty::TypeParameterDef {\n-            index: type_start as u32,\n+            index: type_start,\n             name: Symbol::intern(\"<closure_kind>\"),\n             def_id,\n             has_default: false,\n@@ -1026,9 +1026,20 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             synthetic: None,\n         });\n \n+        // add a dummy parameter for the closure signature\n+        types.push(ty::TypeParameterDef {\n+            index: type_start + 1,\n+            name: Symbol::intern(\"<closure_signature>\"),\n+            def_id,\n+            has_default: false,\n+            object_lifetime_default: rl::Set1::Empty,\n+            pure_wrt_drop: false,\n+            synthetic: None,\n+        });\n+\n         tcx.with_freevars(node_id, |fv| {\n-            types.extend(fv.iter().zip(1..).map(|(_, i)| ty::TypeParameterDef {\n-                index: type_start + i as u32,\n+            types.extend(fv.iter().zip(2..).map(|(_, i)| ty::TypeParameterDef {\n+                index: type_start + i,\n                 name: Symbol::intern(\"<upvar>\"),\n                 def_id,\n                 has_default: false,"}, {"sha": "513a17e2ef2f4e1a1218da12ccadcddc65b5f5f9", "filename": "src/test/compile-fail/closure-bounds-static-cant-capture-borrowed.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d0bda669ea8dc42fc14fb267b7368bb1e42fad9a/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-static-cant-capture-borrowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0bda669ea8dc42fc14fb267b7368bb1e42fad9a/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-static-cant-capture-borrowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-static-cant-capture-borrowed.rs?ref=d0bda669ea8dc42fc14fb267b7368bb1e42fad9a", "patch": "@@ -13,8 +13,7 @@ fn bar<F>(blk: F) where F: FnOnce() + 'static {\n \n fn foo(x: &()) {\n     bar(|| {\n-        //~^ ERROR cannot infer\n-        //~| ERROR does not fulfill\n+        //~^ ERROR does not fulfill\n         let _ = x;\n     })\n }"}, {"sha": "731cfa2b04d28d2062656625a0c1f6d696d68417", "filename": "src/test/compile-fail/issue-21410.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0bda669ea8dc42fc14fb267b7368bb1e42fad9a/src%2Ftest%2Fcompile-fail%2Fissue-21410.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0bda669ea8dc42fc14fb267b7368bb1e42fad9a/src%2Ftest%2Fcompile-fail%2Fissue-21410.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-21410.rs?ref=d0bda669ea8dc42fc14fb267b7368bb1e42fad9a", "patch": "@@ -11,5 +11,5 @@\n fn g<F>(_: F) where F: FnOnce(Option<F>) {}\n \n fn main() {\n-    g(|_| {  });\n+    g(|_| {  }); //~ ERROR mismatched types\n }", "previous_filename": "src/test/run-pass/issue-21410.rs"}, {"sha": "fc65ead6e639468416a4ea870437977b8a540915", "filename": "src/test/compile-fail/issue-25439.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0bda669ea8dc42fc14fb267b7368bb1e42fad9a/src%2Ftest%2Fcompile-fail%2Fissue-25439.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0bda669ea8dc42fc14fb267b7368bb1e42fad9a/src%2Ftest%2Fcompile-fail%2Fissue-25439.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-25439.rs?ref=d0bda669ea8dc42fc14fb267b7368bb1e42fad9a", "patch": "@@ -15,5 +15,5 @@ fn fix<F>(f: F) -> i32 where F: Fn(Helper<F>, i32) -> i32 {\n }\n \n fn main() {\n-    fix(|_, x| x);\n+    fix(|_, x| x); //~ ERROR mismatched types\n }", "previous_filename": "src/test/run-pass/issue-25439.rs"}, {"sha": "c3d5f21b0a51ead63e51e685b3b3233b928d9739", "filename": "src/test/ui/block-result/issue-3563.stderr", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d0bda669ea8dc42fc14fb267b7368bb1e42fad9a/src%2Ftest%2Fui%2Fblock-result%2Fissue-3563.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d0bda669ea8dc42fc14fb267b7368bb1e42fad9a/src%2Ftest%2Fui%2Fblock-result%2Fissue-3563.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-3563.stderr?ref=d0bda669ea8dc42fc14fb267b7368bb1e42fad9a", "patch": "@@ -6,16 +6,5 @@ error[E0599]: no method named `b` found for type `&Self` in the current scope\n    |\n    = help: did you mean `a`?\n \n-error[E0308]: mismatched types\n-  --> $DIR/issue-3563.rs:13:9\n-   |\n-12 |     fn a(&self) {\n-   |                 - possibly return type missing here?\n-13 |         || self.b()\n-   |         ^^^^^^^^^^^ expected (), found closure\n-   |\n-   = note: expected type `()`\n-              found type `[closure@$DIR/issue-3563.rs:13:9: 13:20 self:_]`\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n "}]}