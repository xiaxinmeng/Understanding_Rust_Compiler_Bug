{"sha": "5d2b488aeb17410aec3b89eac69038c51f332448", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkMmI0ODhhZWIxNzQxMGFlYzNiODllYWM2OTAzOGM1MWYzMzI0NDg=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-04-03T20:18:02Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-04-04T11:16:38Z"}, "message": "Replace remaining uses of Substitution::build_for_def", "tree": {"sha": "30ef50eb5dc4e8c572c6bec969ce96b3ed2f3e68", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30ef50eb5dc4e8c572c6bec969ce96b3ed2f3e68"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d2b488aeb17410aec3b89eac69038c51f332448", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d2b488aeb17410aec3b89eac69038c51f332448", "html_url": "https://github.com/rust-lang/rust/commit/5d2b488aeb17410aec3b89eac69038c51f332448", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d2b488aeb17410aec3b89eac69038c51f332448/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77333a571ffb401a6765bbc80dea082ad08238d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/77333a571ffb401a6765bbc80dea082ad08238d9", "html_url": "https://github.com/rust-lang/rust/commit/77333a571ffb401a6765bbc80dea082ad08238d9"}], "stats": {"total": 67, "additions": 46, "deletions": 21}, "files": [{"sha": "42ae53c6696501f678c2d986302beb0a362a8bd4", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5d2b488aeb17410aec3b89eac69038c51f332448/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d2b488aeb17410aec3b89eac69038c51f332448/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=5d2b488aeb17410aec3b89eac69038c51f332448", "patch": "@@ -1702,10 +1702,9 @@ impl Type {\n     fn from_def(\n         db: &dyn HirDatabase,\n         krate: CrateId,\n-        def: impl HasResolver + Into<TyDefId> + Into<GenericDefId>,\n+        def: impl HasResolver + Into<TyDefId>,\n     ) -> Type {\n-        let substs = Substitution::build_for_def(db, def).fill_with_unknown().build();\n-        let ty = db.ty(def.into()).subst(&substs);\n+        let ty = TyBuilder::def_ty(db, def.into()).fill_with_unknown().build();\n         Type::new(db, krate, def, ty)\n     }\n "}, {"sha": "caafeccb8ec90f2a3289605b4a4307c7dff94d4b", "filename": "crates/hir_ty/src/infer.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5d2b488aeb17410aec3b89eac69038c51f332448/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d2b488aeb17410aec3b89eac69038c51f332448/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer.rs?ref=5d2b488aeb17410aec3b89eac69038c51f332448", "patch": "@@ -514,10 +514,9 @@ impl<'a> InferenceContext<'a> {\n                 }\n             }\n             TypeNs::TypeAliasId(it) => {\n-                let substs = Substitution::build_for_def(self.db, it)\n+                let ty = TyBuilder::def_ty(self.db, it.into())\n                     .fill(std::iter::repeat_with(|| self.table.new_type_var()))\n                     .build();\n-                let ty = self.db.ty(it.into()).subst(&substs);\n                 let variant = ty_variant(&ty);\n                 forbid_unresolved_segments((ty, variant), unresolved)\n             }"}, {"sha": "028a4d568d70b8417fb120b79dfa5ae81ce42222", "filename": "crates/hir_ty/src/infer/coerce.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5d2b488aeb17410aec3b89eac69038c51f332448/crates%2Fhir_ty%2Fsrc%2Finfer%2Fcoerce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d2b488aeb17410aec3b89eac69038c51f332448/crates%2Fhir_ty%2Fsrc%2Finfer%2Fcoerce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fcoerce.rs?ref=5d2b488aeb17410aec3b89eac69038c51f332448", "patch": "@@ -7,10 +7,7 @@\n use chalk_ir::{cast::Cast, Mutability, TyVariableKind};\n use hir_def::lang_item::LangItemTarget;\n \n-use crate::{\n-    autoderef, traits::Solution, Interner, Ty,\n-    TyBuilder, TyKind,\n-};\n+use crate::{autoderef, traits::Solution, Interner, Ty, TyBuilder, TyKind};\n \n use super::{InEnvironment, InferenceContext};\n "}, {"sha": "c9219776bde1e43a27ebd635dc4a2bc9fc389f12", "filename": "crates/hir_ty/src/infer/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5d2b488aeb17410aec3b89eac69038c51f332448/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d2b488aeb17410aec3b89eac69038c51f332448/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpath.rs?ref=5d2b488aeb17410aec3b89eac69038c51f332448", "patch": "@@ -243,7 +243,7 @@ impl<'a> InferenceContext<'a> {\n                 };\n                 let substs = match container {\n                     AssocContainerId::ImplId(impl_id) => {\n-                        let impl_substs = Substitution::build_for_def(self.db, impl_id)\n+                        let impl_substs = TyBuilder::subst_for_def(self.db, impl_id)\n                             .fill(iter::repeat_with(|| self.table.new_type_var()))\n                             .build();\n                         let impl_self_ty = self.db.impl_self_ty(impl_id).subst(&impl_substs);"}, {"sha": "75bf8bcd9fd163a89bf99e74578ab759d048fc1f", "filename": "crates/hir_ty/src/lib.rs", "status": "modified", "additions": 38, "deletions": 8, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/5d2b488aeb17410aec3b89eac69038c51f332448/crates%2Fhir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d2b488aeb17410aec3b89eac69038c51f332448/crates%2Fhir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flib.rs?ref=5d2b488aeb17410aec3b89eac69038c51f332448", "patch": "@@ -28,7 +28,10 @@ mod chalk_ext;\n use std::{iter, mem, sync::Arc};\n \n use base_db::salsa;\n-use chalk_ir::cast::{CastTo, Caster};\n+use chalk_ir::{\n+    cast::{CastTo, Caster},\n+    interner::HasInterner,\n+};\n use hir_def::{\n     builtin_type::BuiltinType, expr::ExprId, type_ref::Rawness, AssocContainerId, FunctionId,\n     GenericDefId, HasModule, LifetimeParamId, Lookup, TraitId, TypeAliasId, TypeParamId,\n@@ -490,13 +493,6 @@ impl Substitution {\n         )\n     }\n \n-    pub fn build_for_def(db: &dyn HirDatabase, def: impl Into<GenericDefId>) -> SubstsBuilder {\n-        let def = def.into();\n-        let params = generics(db.upcast(), def);\n-        let param_count = params.len();\n-        Substitution::builder(param_count)\n-    }\n-\n     pub(crate) fn build_for_generics(generic_params: &Generics) -> SubstsBuilder {\n         Substitution::builder(generic_params.len())\n     }\n@@ -894,6 +890,18 @@ impl TyBuilder<()> {\n             }\n         }\n     }\n+\n+    pub fn subst_for_def(db: &dyn HirDatabase, def: impl Into<GenericDefId>) -> TyBuilder<()> {\n+        let def = def.into();\n+        let params = generics(db.upcast(), def);\n+        let param_count = params.len();\n+        TyBuilder::new((), param_count)\n+    }\n+\n+    pub fn build(self) -> Substitution {\n+        let ((), subst) = self.build_internal();\n+        subst\n+    }\n }\n \n impl TyBuilder<hir_def::AdtId> {\n@@ -956,6 +964,28 @@ impl TyBuilder<TypeAliasId> {\n     }\n }\n \n+impl<T: TypeWalk + HasInterner<Interner = Interner>> TyBuilder<Binders<T>> {\n+    fn subst_binders(b: Binders<T>) -> Self {\n+        let param_count = b.num_binders;\n+        TyBuilder::new(b, param_count)\n+    }\n+\n+    pub fn build(self) -> T {\n+        let (b, subst) = self.build_internal();\n+        b.subst(&subst)\n+    }\n+}\n+\n+impl TyBuilder<Binders<Ty>> {\n+    pub fn def_ty(db: &dyn HirDatabase, def: TyDefId) -> TyBuilder<Binders<Ty>> {\n+        TyBuilder::subst_binders(db.ty(def.into()))\n+    }\n+\n+    pub fn impl_self_ty(db: &dyn HirDatabase, def: hir_def::ImplId) -> TyBuilder<Binders<Ty>> {\n+        TyBuilder::subst_binders(db.impl_self_ty(def))\n+    }\n+}\n+\n impl Ty {\n     pub fn as_reference(&self) -> Option<(&Ty, Mutability)> {\n         match self.kind(&Interner) {"}, {"sha": "a76586f0cc04f7e7864dea57b33d27e1010187d8", "filename": "crates/hir_ty/src/method_resolution.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5d2b488aeb17410aec3b89eac69038c51f332448/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d2b488aeb17410aec3b89eac69038c51f332448/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fmethod_resolution.rs?ref=5d2b488aeb17410aec3b89eac69038c51f332448", "patch": "@@ -709,7 +709,7 @@ pub(crate) fn inherent_impl_substs(\n ) -> Option<Substitution> {\n     // we create a var for each type parameter of the impl; we need to keep in\n     // mind here that `self_ty` might have vars of its own\n-    let vars = Substitution::build_for_def(db, impl_id)\n+    let vars = TyBuilder::subst_for_def(db, impl_id)\n         .fill_with_bound_vars(DebruijnIndex::INNERMOST, self_ty.binders.len(&Interner))\n         .build();\n     let self_ty_with_vars = db.impl_self_ty(impl_id).subst(&vars);\n@@ -760,13 +760,13 @@ fn transform_receiver_ty(\n     self_ty: &Canonical<Ty>,\n ) -> Option<Ty> {\n     let substs = match function_id.lookup(db.upcast()).container {\n-        AssocContainerId::TraitId(_) => Substitution::build_for_def(db, function_id)\n+        AssocContainerId::TraitId(_) => TyBuilder::subst_for_def(db, function_id)\n             .push(self_ty.value.clone())\n             .fill_with_unknown()\n             .build(),\n         AssocContainerId::ImplId(impl_id) => {\n             let impl_substs = inherent_impl_substs(db, impl_id, &self_ty)?;\n-            Substitution::build_for_def(db, function_id)\n+            TyBuilder::subst_for_def(db, function_id)\n                 .use_parent_substs(&impl_substs)\n                 .fill_with_unknown()\n                 .build()"}]}