{"sha": "5e0e7ff0681a679d1115015e358d4b2c4bec8240", "node_id": "C_kwDOAAsO6NoAKDVlMGU3ZmYwNjgxYTY3OWQxMTE1MDE1ZTM1OGQ0YjJjNGJlYzgyNDA", "commit": {"author": {"name": "Ellen", "email": "supbscripter@gmail.com", "date": "2022-02-12T11:48:58Z"}, "committer": {"name": "Ellen", "email": "supbscripter@gmail.com", "date": "2022-02-12T11:48:58Z"}, "message": "trailing whitespace", "tree": {"sha": "90b16c48dbf1b272e7da1336108cdfb579cf3749", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90b16c48dbf1b272e7da1336108cdfb579cf3749"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e0e7ff0681a679d1115015e358d4b2c4bec8240", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e0e7ff0681a679d1115015e358d4b2c4bec8240", "html_url": "https://github.com/rust-lang/rust/commit/5e0e7ff0681a679d1115015e358d4b2c4bec8240", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e0e7ff0681a679d1115015e358d4b2c4bec8240/comments", "author": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "committer": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9130af2e4d5c42f5a4d980e8d9071bde613e12c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/9130af2e4d5c42f5a4d980e8d9071bde613e12c1", "html_url": "https://github.com/rust-lang/rust/commit/9130af2e4d5c42f5a4d980e8d9071bde613e12c1"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "e99f61d034fb8b3a340f8fc616f924872296ba29", "filename": "compiler/rustc_hir/src/def.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5e0e7ff0681a679d1115015e358d4b2c4bec8240/compiler%2Frustc_hir%2Fsrc%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e0e7ff0681a679d1115015e358d4b2c4bec8240/compiler%2Frustc_hir%2Fsrc%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fdef.rs?ref=5e0e7ff0681a679d1115015e358d4b2c4bec8240", "patch": "@@ -275,25 +275,25 @@ pub enum Res<Id = hir::HirId> {\n     /// ```\n     /// struct Bar(Box<Self>);\n     /// // `Res::SelfTy { trait_: None, alias_of: Some(Bar) }`\n-    /// \n+    ///\n     /// trait Foo {\n     ///     fn foo() -> Box<Self>;\n     ///     // `Res::SelfTy { trait_: Some(Foo), alias_of: None }`\n     /// }\n-    /// \n+    ///\n     /// impl Bar {\n     ///     fn blah() {\n     ///         let _: Self;\n     ///         // `Res::SelfTy { trait_: None, alias_of: Some(::{impl#0}) }`\n     ///     }\n     /// }\n-    /// \n+    ///\n     /// impl Foo for Bar {\n     ///     fn foo() -> Box<Self> {\n     ///     // `Res::SelfTy { trait_: Some(Foo), alias_of: Some(::{impl#1}) }`\n     ///         let _: Self;\n     ///         // `Res::SelfTy { trait_: Some(Foo), alias_of: Some(::{impl#1}) }`\n-    /// \n+    ///\n     ///         todo!()\n     ///     }\n     /// }\n@@ -307,7 +307,7 @@ pub enum Res<Id = hir::HirId> {\n     /// any generic parameters to allow the following with `min_const_generics`:\n     /// ```\n     /// impl Foo { fn test() -> [u8; std::mem::size_of::<Self>()] { todo!() } }\n-    /// \n+    ///\n     /// struct Bar([u8; baz::<Self>()]);\n     /// const fn baz<T>() -> usize { 10 }\n     /// ```\n@@ -323,7 +323,7 @@ pub enum Res<Id = hir::HirId> {\n         /// The trait this `Self` is a generic arg for.\n         trait_: Option<DefId>,\n         /// The item introducing the `Self` type alias. Can be used in the `type_of` query\n-        /// to get the underlying type. Additionally whether the `Self` type is disallowed \n+        /// to get the underlying type. Additionally whether the `Self` type is disallowed\n         /// from mentioning generics (i.e. when used in an anonymous constant).\n         alias_to: Option<(DefId, bool)>,\n     },"}]}