{"sha": "e28287b32c40c44fb120c9a3a7eae6f82a7031fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyODI4N2IzMmM0MGM0NGZiMTIwYzlhM2E3ZWFlNmY4MmE3MDMxZmE=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-10-25T16:35:51Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-11-06T10:04:42Z"}, "message": "The unsafety in `iter.rs` is already documented wonderfully", "tree": {"sha": "7831e6cfc2ceefa50800c3468bb506629ec57805", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7831e6cfc2ceefa50800c3468bb506629ec57805"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e28287b32c40c44fb120c9a3a7eae6f82a7031fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e28287b32c40c44fb120c9a3a7eae6f82a7031fa", "html_url": "https://github.com/rust-lang/rust/commit/e28287b32c40c44fb120c9a3a7eae6f82a7031fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e28287b32c40c44fb120c9a3a7eae6f82a7031fa/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34f7fcb862c4c53bc281af8be2542887a965deee", "url": "https://api.github.com/repos/rust-lang/rust/commits/34f7fcb862c4c53bc281af8be2542887a965deee", "html_url": "https://github.com/rust-lang/rust/commit/34f7fcb862c4c53bc281af8be2542887a965deee"}], "stats": {"total": 13, "additions": 8, "deletions": 5}, "files": [{"sha": "307e9b90ee2c0cfe1f62e6f875867796453534ea", "filename": "src/libcore/array/iter.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e28287b32c40c44fb120c9a3a7eae6f82a7031fa/src%2Flibcore%2Farray%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e28287b32c40c44fb120c9a3a7eae6f82a7031fa/src%2Flibcore%2Farray%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Farray%2Fiter.rs?ref=e28287b32c40c44fb120c9a3a7eae6f82a7031fa", "patch": "@@ -51,7 +51,7 @@ where\n     /// iterator (either via `IntoIterator` for arrays or via another way).\n     #[unstable(feature = \"array_value_iter\", issue = \"65798\")]\n     pub fn new(array: [T; N]) -> Self {\n-        // The transmute here is actually safe. The docs of `MaybeUninit`\n+        // SAFETY: The transmute here is actually safe. The docs of `MaybeUninit`\n         // promise:\n         //\n         // > `MaybeUninit<T>` is guaranteed to have the same size and alignment\n@@ -84,10 +84,10 @@ where\n     /// Returns an immutable slice of all elements that have not been yielded\n     /// yet.\n     fn as_slice(&self) -> &[T] {\n-        // This transmute is safe. As mentioned in `new`, `MaybeUninit` retains\n+        let slice = &self.data[self.alive.clone()];\n+        // SAFETY: This transmute is safe. As mentioned in `new`, `MaybeUninit` retains\n         // the size and alignment of `T`. Furthermore, we know that all\n         // elements within `alive` are properly initialized.\n-        let slice = &self.data[self.alive.clone()];\n         unsafe {\n             mem::transmute::<&[MaybeUninit<T>], &[T]>(slice)\n         }\n@@ -117,7 +117,8 @@ where\n         let idx = self.alive.start;\n         self.alive.start += 1;\n \n-        // Read the element from the array. This is safe: `idx` is an index\n+        // Read the element from the array.\n+        // SAFETY: This is safe: `idx` is an index\n         // into the \"alive\" region of the array. Reading this element means\n         // that `data[idx]` is regarded as dead now (i.e. do not touch). As\n         // `idx` was the start of the alive-zone, the alive zone is now\n@@ -163,7 +164,8 @@ where\n         // + 1]`.\n         self.alive.end -= 1;\n \n-        // Read the element from the array. This is safe: `alive.end` is an\n+        // Read the element from the array.\n+        // SAFETY: This is safe: `alive.end` is an\n         // index into the \"alive\" region of the array. Compare the previous\n         // comment that states that the alive region is\n         // `data[alive.start..alive.end + 1]`. Reading this element means that\n@@ -226,6 +228,7 @@ where\n     [T; N]: LengthAtMost32,\n {\n     fn clone(&self) -> Self {\n+        // SAFETY: each point of unsafety is documented inside the unsafe block\n         unsafe {\n             // This creates a new uninitialized array. Note that the `assume_init`\n             // refers to the array, not the individual elements. And it is Ok if"}]}