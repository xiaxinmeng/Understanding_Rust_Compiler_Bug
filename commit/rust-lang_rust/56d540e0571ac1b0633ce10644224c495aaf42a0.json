{"sha": "56d540e0571ac1b0633ce10644224c495aaf42a0", "node_id": "C_kwDOAAsO6NoAKDU2ZDU0MGUwNTcxYWMxYjA2MzNjZTEwNjQ0MjI0YzQ5NWFhZjQyYTA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-16T02:33:34Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-16T02:33:34Z"}, "message": "Auto merge of #97053 - CAD97:realloc-clarification, r=dtolnay\n\nRemove potentially misleading realloc parenthetical\n\nThis parenthetical is problematic, because it suggests that the following is sound:\n\n```rust\nlet layout = Layout::new::<[u8; 32]>();\nlet p1 = alloc(layout);\nlet p2 = realloc(p1, layout, 32);\nif p1 == p2 {\n    p1.write([0; 32]);\n    dealloc(p1, layout);\n} else {\n    dealloc(p2, layout);\n}\n```\n\nAt the very least, this isn't the case for [ANSI `realloc`](https://en.cppreference.com/w/c/memory/realloc)\n\n> The original pointer `ptr` is invalidated and any access to it is undefined behavior (even if reallocation was in-place).\n\nand [Windows `HeapReAlloc`](https://docs.microsoft.com/en-us/windows/win32/api/heapapi/nf-heapapi-heaprealloc) is unclear at best (`HEAP_REALLOC_IN_PLACE_ONLY`'s description may imply that the old pointer may be used if `HEAP_REALLOC_IN_PLACE_ONLY` is provided).\n\nThe conservative position is to just remove the parenthetical.\n\ncc `@rust-lang/wg-unsafe-code-guidelines` `@rust-lang/wg-allocators`", "tree": {"sha": "fc6b28edf61020b4855fd6a34efe65cc42b60c47", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc6b28edf61020b4855fd6a34efe65cc42b60c47"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56d540e0571ac1b0633ce10644224c495aaf42a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56d540e0571ac1b0633ce10644224c495aaf42a0", "html_url": "https://github.com/rust-lang/rust/commit/56d540e0571ac1b0633ce10644224c495aaf42a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56d540e0571ac1b0633ce10644224c495aaf42a0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cdd74fc7b19805c65c7d6f759ec6871be1c38fce", "url": "https://api.github.com/repos/rust-lang/rust/commits/cdd74fc7b19805c65c7d6f759ec6871be1c38fce", "html_url": "https://github.com/rust-lang/rust/commit/cdd74fc7b19805c65c7d6f759ec6871be1c38fce"}, {"sha": "09dc24bc04ed162b92790195f2f84bc674cc3025", "url": "https://api.github.com/repos/rust-lang/rust/commits/09dc24bc04ed162b92790195f2f84bc674cc3025", "html_url": "https://github.com/rust-lang/rust/commit/09dc24bc04ed162b92790195f2f84bc674cc3025"}], "stats": {"total": 14, "additions": 5, "deletions": 9}, "files": [{"sha": "887246c600144801dc4d7e7d48229e800cc7a5aa", "filename": "library/core/src/alloc/global.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/56d540e0571ac1b0633ce10644224c495aaf42a0/library%2Fcore%2Fsrc%2Falloc%2Fglobal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56d540e0571ac1b0633ce10644224c495aaf42a0/library%2Fcore%2Fsrc%2Falloc%2Fglobal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Falloc%2Fglobal.rs?ref=56d540e0571ac1b0633ce10644224c495aaf42a0", "patch": "@@ -208,11 +208,9 @@ pub unsafe trait GlobalAlloc {\n     ///\n     /// If this returns a non-null pointer, then ownership of the memory block\n     /// referenced by `ptr` has been transferred to this allocator.\n-    /// The memory may or may not have been deallocated,\n-    /// and should be considered unusable (unless of course it was\n-    /// transferred back to the caller again via the return value of\n-    /// this method). The new memory block is allocated with `layout`, but\n-    /// with the `size` updated to `new_size`. This new layout should be\n+    /// The memory may or may not have been deallocated, and should be\n+    /// considered unusable. The new memory block is allocated with `layout`,\n+    /// but with the `size` updated to `new_size`. This new layout should be\n     /// used when deallocating the new memory block with `dealloc`. The range\n     /// `0..min(layout.size(), new_size)` of the new memory block is\n     /// guaranteed to have the same values as the original block."}, {"sha": "6cc6e359e65b6029bc413a070289a5ae30eaad2c", "filename": "library/core/src/alloc/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/56d540e0571ac1b0633ce10644224c495aaf42a0/library%2Fcore%2Fsrc%2Falloc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56d540e0571ac1b0633ce10644224c495aaf42a0/library%2Fcore%2Fsrc%2Falloc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Falloc%2Fmod.rs?ref=56d540e0571ac1b0633ce10644224c495aaf42a0", "patch": "@@ -161,8 +161,7 @@ pub unsafe trait Allocator {\n     ///\n     /// If this returns `Ok`, then ownership of the memory block referenced by `ptr` has been\n     /// transferred to this allocator. The memory may or may not have been freed, and should be\n-    /// considered unusable unless it was transferred back to the caller again via the return value\n-    /// of this method.\n+    /// considered unusable.\n     ///\n     /// If this method returns `Err`, then ownership of the memory block has not been transferred to\n     /// this allocator, and the contents of the memory block are unaltered.\n@@ -288,8 +287,7 @@ pub unsafe trait Allocator {\n     ///\n     /// If this returns `Ok`, then ownership of the memory block referenced by `ptr` has been\n     /// transferred to this allocator. The memory may or may not have been freed, and should be\n-    /// considered unusable unless it was transferred back to the caller again via the return value\n-    /// of this method.\n+    /// considered unusable.\n     ///\n     /// If this method returns `Err`, then ownership of the memory block has not been transferred to\n     /// this allocator, and the contents of the memory block are unaltered."}]}