{"sha": "acb8934fd57b3c2740c4abac0a5728c2c9b1423b", "node_id": "C_kwDOAAsO6NoAKGFjYjg5MzRmZDU3YjNjMjc0MGM0YWJhYzBhNTcyOGMyYzliMTQyM2I", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-20T02:20:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-20T02:20:15Z"}, "message": "Auto merge of #102022 - matthiaskrgr:rollup-emwfjd1, r=matthiaskrgr\n\nRollup of 11 pull requests\n\nSuccessful merges:\n\n - #101389 (Tone down explanation on RefCell::get_mut)\n - #101798 (Make `from_waker`, `waker` and `from_raw` unstably `const`)\n - #101881 (Remove an unused struct field `late_bound`)\n - #101904 (Add help for invalid inline argument)\n - #101966 (Add unit test for identifier Unicode emoji diagnostics)\n - #101979 (Update release notes for 1.64)\n - #101985 (interpret: expose generate_stacktrace without full InterpCx)\n - #102004 (Try to clarify what's new in 1.64.0 ffi types)\n - #102005 (rustdoc: remove unused CSS `td.summary-column`)\n - #102017 (Add all submodules to the list of directories tidy skips)\n - #102019 (Remove backed off PRs from relnotes)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "93adfc8cd7266d643f9333f6c47a54683d658e0a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93adfc8cd7266d643f9333f6c47a54683d658e0a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/acb8934fd57b3c2740c4abac0a5728c2c9b1423b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/acb8934fd57b3c2740c4abac0a5728c2c9b1423b", "html_url": "https://github.com/rust-lang/rust/commit/acb8934fd57b3c2740c4abac0a5728c2c9b1423b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/acb8934fd57b3c2740c4abac0a5728c2c9b1423b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a57a6ac2eb17f9074c3762d6392bc4bad437fa7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/a57a6ac2eb17f9074c3762d6392bc4bad437fa7b", "html_url": "https://github.com/rust-lang/rust/commit/a57a6ac2eb17f9074c3762d6392bc4bad437fa7b"}, {"sha": "683cf99f1d9b28be648850748759a3646af51ff7", "url": "https://api.github.com/repos/rust-lang/rust/commits/683cf99f1d9b28be648850748759a3646af51ff7", "html_url": "https://github.com/rust-lang/rust/commit/683cf99f1d9b28be648850748759a3646af51ff7"}], "stats": {"total": 274, "additions": 176, "deletions": 98}, "files": [{"sha": "694bd09658f75e31e98f668e0820f79e583bff29", "filename": "RELEASES.md", "status": "modified", "additions": 44, "deletions": 55, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/acb8934fd57b3c2740c4abac0a5728c2c9b1423b/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/acb8934fd57b3c2740c4abac0a5728c2c9b1423b/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=acb8934fd57b3c2740c4abac0a5728c2c9b1423b", "patch": "@@ -3,63 +3,33 @@ Version 1.64.0 (2022-09-22)\n \n Language\n --------\n-- [make `const_err` show up in future breakage reports](https://github.com/rust-lang/rust/pull/97743/)\n-- [allow unions with mutable references and tuples of allowed types](https://github.com/rust-lang/rust/pull/97995/)\n+- [Unions with mutable references or tuples of allowed types are now allowed](https://github.com/rust-lang/rust/pull/97995/)\n - It is now considered valid to deallocate memory pointed to by a shared reference `&T` [if every byte in `T` is inside an `UnsafeCell`](https://github.com/rust-lang/rust/pull/98017/)\n - Unused tuple struct fields are now warned against in an allow-by-default lint, [`unused_tuple_struct_fields`](https://github.com/rust-lang/rust/pull/95977/), similar to the existing warning for unused struct fields. This lint will become warn-by-default in the future.\n \n Compiler\n --------\n-- The minimum required versions for all `-linux-gnu` targets are now at least kernel 3.2 and glibc 2.17, for targets that previously supported older versions: [Increase the minimum linux-gnu versions](https://github.com/rust-lang/rust/pull/95026/)\n-- [Keep unstable target features for asm feature checking](https://github.com/rust-lang/rust/pull/99155/)\n - [Add Nintendo Switch as tier 3 target](https://github.com/rust-lang/rust/pull/88991/)\n   - Refer to Rust's [platform support page][platform-support-doc] for more\n     information on Rust's tiered platform support.\n-- [Only compile #[used] as llvm.compiler.used for ELF targets](https://github.com/rust-lang/rust/pull/93718/)\n-- [sess: stabilize `-Zterminal-width` as `--diagnostic-width`](https://github.com/rust-lang/rust/pull/95635/)\n-- [Fix repr(align) enum handling](https://github.com/rust-lang/rust/pull/96814/)\n-- [Suggest defining variable as mutable on `&mut _` type mismatch in pats](https://github.com/rust-lang/rust/pull/98431/)\n-- [Emit warning when named arguments are used positionally in format](https://github.com/rust-lang/rust/pull/98580/)\n-- [Add support for link-flavor rust-lld for iOS, tvOS and watchOS](https://github.com/rust-lang/rust/pull/98771/)\n-- [Do not mention private types from other crates as impl candidates](https://github.com/rust-lang/rust/pull/99091/)\n+- [Only compile `#[used]` as llvm.compiler.used for ELF targets](https://github.com/rust-lang/rust/pull/93718/)\n+- [Add the `--diagnostic-width` compiler flag to define the terminal width.](https://github.com/rust-lang/rust/pull/95635/)\n+- [Add support for link-flavor `rust-lld` for iOS, tvOS and watchOS](https://github.com/rust-lang/rust/pull/98771/)\n \n Libraries\n ---------\n-- [Implement network primitives with ideal Rust layout, not C system layout](https://github.com/rust-lang/rust/pull/78802/)\n - [Remove restrictions on compare-exchange memory ordering.](https://github.com/rust-lang/rust/pull/98383/)\n - You can now `write!` or `writeln!` into an `OsString`: [Implement `fmt::Write` for `OsString`](https://github.com/rust-lang/rust/pull/97915/)\n-- [Enforce that layout size fits in isize in Layout](https://github.com/rust-lang/rust/pull/95295/)\n - [Make RwLockReadGuard covariant](https://github.com/rust-lang/rust/pull/96820/)\n - [Implement `FusedIterator` for `std::net::[Into]Incoming`](https://github.com/rust-lang/rust/pull/97300/)\n - [`impl<T: AsRawFd> AsRawFd for {Arc,Box}<T>`](https://github.com/rust-lang/rust/pull/97437/)\n-- [ptr::copy and ptr::swap are doing untyped copies](https://github.com/rust-lang/rust/pull/97712/)\n-- [Add assertion that `transmute_copy`'s U is not larger than T](https://github.com/rust-lang/rust/pull/98839/)\n-- [A soundness bug in `BTreeMap` was fixed](https://github.com/rust-lang/rust/pull/99413/) that allowed data it was borrowing to be dropped before the container.\n+- [`ptr::copy` and `ptr::swap` are doing untyped copies](https://github.com/rust-lang/rust/pull/97712/)\n - [Add cgroupv1 support to `available_parallelism`](https://github.com/rust-lang/rust/pull/97925/)\n-- [mem::uninitialized: mitigate many incorrect uses of this function](https://github.com/rust-lang/rust/pull/99182/)\n+- [Mitigate many incorrect uses of `mem::uninitialized`](https://github.com/rust-lang/rust/pull/99182/)\n \n Stabilized APIs\n ---------------\n \n-- [`ffi::CStr`](https://doc.rust-lang.org/stable/std/ffi/struct.CStr.html)\n-- [`ffi::CString`](https://doc.rust-lang.org/stable/std/ffi/struct.CString.html)\n-- [`ffi::FromBytesWithNulError`](https://doc.rust-lang.org/stable/std/ffi/struct.FromBytesWithNulError.html)\n-- [`ffi::FromVecWithNulError`](https://doc.rust-lang.org/stable/std/ffi/struct.FromVecWithNulError.html)\n-- [`ffi::IntoStringError`](https://doc.rust-lang.org/stable/std/ffi/struct.IntoStringError.html)\n-- [`ffi::NulError`](https://doc.rust-lang.org/stable/std/ffi/struct.NulError.html)\n-- [`ffi::c_char`](https://doc.rust-lang.org/stable/std/ffi/type.c_char.html)\n-- [`ffi::c_double`](https://doc.rust-lang.org/stable/std/ffi/type.c_double.html)\n-- [`ffi::c_float`](https://doc.rust-lang.org/stable/std/ffi/type.c_float.html)\n-- [`ffi::c_int`](https://doc.rust-lang.org/stable/std/ffi/type.c_int.html)\n-- [`ffi::c_long`](https://doc.rust-lang.org/stable/std/ffi/type.c_long.html)\n-- [`ffi::c_longlong`](https://doc.rust-lang.org/stable/std/ffi/type.c_longlong.html)\n-- [`ffi::c_schar`](https://doc.rust-lang.org/stable/std/ffi/type.c_schar.html)\n-- [`ffi::c_short`](https://doc.rust-lang.org/stable/std/ffi/type.c_short.html)\n-- [`ffi::c_uchar`](https://doc.rust-lang.org/stable/std/ffi/type.c_uchar.html)\n-- [`ffi::c_uint`](https://doc.rust-lang.org/stable/std/ffi/type.c_uint.html)\n-- [`ffi::c_ulong`](https://doc.rust-lang.org/stable/std/ffi/type.c_ulong.html)\n-- [`ffi::c_ulonglong`](https://doc.rust-lang.org/stable/std/ffi/type.c_ulonglong.html)\n-- [`ffi::c_ushort`](https://doc.rust-lang.org/stable/std/ffi/type.c_ushort.html)\n - [`future::IntoFuture`](https://doc.rust-lang.org/stable/std/future/trait.IntoFuture.html)\n - [`future::poll_fn`](https://doc.rust-lang.org/stable/std/future/fn.poll_fn.html)\n - [`task::ready!`](https://doc.rust-lang.org/stable/std/task/macro.ready.html)\n@@ -80,46 +50,65 @@ Stabilized APIs\n - [`os::windows::fs::FileTypeExt::is_symlink_dir`](https://doc.rust-lang.org/stable/std/os/windows/fs/trait.FileTypeExt.html#tymethod.is_symlink_dir)\n - [`os::windows::fs::FileTypeExt::is_symlink_file`](https://doc.rust-lang.org/stable/std/os/windows/fs/trait.FileTypeExt.html#tymethod.is_symlink_file)\n \n+These types were previously stable in `std::ffi`, but are now also available in `core` and `alloc`:\n+\n+- [`core::ffi::CStr`](https://doc.rust-lang.org/stable/core/ffi/struct.CStr.html)\n+- [`core::ffi::FromBytesWithNulError`](https://doc.rust-lang.org/stable/core/ffi/struct.FromBytesWithNulError.html)\n+- [`alloc::ffi::CString`](https://doc.rust-lang.org/stable/alloc/ffi/struct.CString.html)\n+- [`alloc::ffi::FromVecWithNulError`](https://doc.rust-lang.org/stable/alloc/ffi/struct.FromVecWithNulError.html)\n+- [`alloc::ffi::IntoStringError`](https://doc.rust-lang.org/stable/alloc/ffi/struct.IntoStringError.html)\n+- [`alloc::ffi::NulError`](https://doc.rust-lang.org/stable/alloc/ffi/struct.NulError.html)\n+\n+These types were previously stable in `std::os::raw`, but are now also available in `core::ffi` and `std::ffi`:\n+\n+- [`ffi::c_char`](https://doc.rust-lang.org/stable/std/ffi/type.c_char.html)\n+- [`ffi::c_double`](https://doc.rust-lang.org/stable/std/ffi/type.c_double.html)\n+- [`ffi::c_float`](https://doc.rust-lang.org/stable/std/ffi/type.c_float.html)\n+- [`ffi::c_int`](https://doc.rust-lang.org/stable/std/ffi/type.c_int.html)\n+- [`ffi::c_long`](https://doc.rust-lang.org/stable/std/ffi/type.c_long.html)\n+- [`ffi::c_longlong`](https://doc.rust-lang.org/stable/std/ffi/type.c_longlong.html)\n+- [`ffi::c_schar`](https://doc.rust-lang.org/stable/std/ffi/type.c_schar.html)\n+- [`ffi::c_short`](https://doc.rust-lang.org/stable/std/ffi/type.c_short.html)\n+- [`ffi::c_uchar`](https://doc.rust-lang.org/stable/std/ffi/type.c_uchar.html)\n+- [`ffi::c_uint`](https://doc.rust-lang.org/stable/std/ffi/type.c_uint.html)\n+- [`ffi::c_ulong`](https://doc.rust-lang.org/stable/std/ffi/type.c_ulong.html)\n+- [`ffi::c_ulonglong`](https://doc.rust-lang.org/stable/std/ffi/type.c_ulonglong.html)\n+- [`ffi::c_ushort`](https://doc.rust-lang.org/stable/std/ffi/type.c_ushort.html)\n+\n These APIs are now usable in const contexts:\n \n - [`slice::from_raw_parts`](https://doc.rust-lang.org/stable/core/slice/fn.from_raw_parts.html)\n \n Cargo\n -----\n-- Packages can now inherit settings from the workspace so that the settings\n-  can be centralized in one place. See\n+- [Packages can now inherit settings from the workspace so that the settings\n+  can be centralized in one place.](https://github.com/rust-lang/cargo/pull/10859) See\n   [`workspace.package`](https://doc.rust-lang.org/nightly/cargo/reference/workspaces.html#the-workspacepackage-table)\n   and\n   [`workspace.dependencies`](https://doc.rust-lang.org/nightly/cargo/reference/workspaces.html#the-workspacedependencies-table)\n   for more details on how to define these common settings.\n-  [#10859](https://github.com/rust-lang/cargo/pull/10859)\n-- Cargo commands can now accept multiple `--target` flags to build for\n-  multiple targets at once, and the\n+- [Cargo commands can now accept multiple `--target` flags to build for\n+  multiple targets at once](https://github.com/rust-lang/cargo/pull/10766), and the\n   [`build.target`](https://doc.rust-lang.org/nightly/cargo/reference/config.html#buildtarget)\n   config option may now take an array of multiple targets.\n-  [#10766](https://github.com/rust-lang/cargo/pull/10766)\n-- The `--jobs` argument can now take a negative number to count backwards from\n-  the max CPUs.\n-  [#10844](https://github.com/rust-lang/cargo/pull/10844)\n-- `cargo add` will now update `Cargo.lock`.\n-  [#10902](https://github.com/rust-lang/cargo/pull/10902)\n-- Added the\n+- [The `--jobs` argument can now take a negative number to count backwards from\n+  the max CPUs.](https://github.com/rust-lang/cargo/pull/10844)\n+- [`cargo add` will now update `Cargo.lock`.](https://github.com/rust-lang/cargo/pull/10902)\n+- [Added](https://github.com/rust-lang/cargo/pull/10838) the\n   [`--crate-type`](https://doc.rust-lang.org/nightly/cargo/commands/cargo-rustc.html#option-cargo-rustc---crate-type)\n   flag to `cargo rustc` to override the crate type.\n-  [#10838](https://github.com/rust-lang/cargo/pull/10838)\n-- Significantly improved the performance fetching git dependencies from GitHub\n-  when using a hash in the `rev` field.\n-  [#10079](https://github.com/rust-lang/cargo/pull/10079)\n+- [Significantly improved the performance fetching git dependencies from GitHub\n+  when using a hash in the `rev` field.](https://github.com/rust-lang/cargo/pull/10079)\n \n Misc\n ----\n-- [Let rust-analyzer ship on stable, non-preview](https://github.com/rust-lang/rust/pull/98640/)\n+- [The `rust-analyzer` rustup component is now available on the stable channel.](https://github.com/rust-lang/rust/pull/98640/)\n \n Compatibility Notes\n -------------------\n - The minimum required versions for all `-linux-gnu` targets are now at least kernel 3.2 and glibc 2.17, for targets that previously supported older versions: [Increase the minimum linux-gnu versions](https://github.com/rust-lang/rust/pull/95026/)\n-- [Implement network primitives with ideal Rust layout, not C system layout](https://github.com/rust-lang/rust/pull/78802/)\n-- [Add assertion that `transmute_copy`'s U is not larger than T](https://github.com/rust-lang/rust/pull/98839/)\n+- [Network primitives are now implemented with the ideal Rust layout, not the C system layout](https://github.com/rust-lang/rust/pull/78802/). This can cause problems when transmuting the types.\n+- [Add assertion that `transmute_copy`'s `U` is not larger than `T`](https://github.com/rust-lang/rust/pull/98839/)\n - [A soundness bug in `BTreeMap` was fixed](https://github.com/rust-lang/rust/pull/99413/) that allowed data it was borrowing to be dropped before the container.\n - [The Drop behavior of C-like enums cast to ints has changed](https://github.com/rust-lang/rust/pull/96862/). These are already discouraged by a compiler warning.\n - [Relate late-bound closure lifetimes to parent fn in NLL](https://github.com/rust-lang/rust/pull/98835/)"}, {"sha": "3177537fee25ec8e04a05a43bdf4984955d895f3", "filename": "compiler/rustc_const_eval/src/interpret/eval_context.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/acb8934fd57b3c2740c4abac0a5728c2c9b1423b/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acb8934fd57b3c2740c4abac0a5728c2c9b1423b/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs?ref=acb8934fd57b3c2740c4abac0a5728c2c9b1423b", "patch": "@@ -929,11 +929,13 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     }\n \n     #[must_use]\n-    pub fn generate_stacktrace(&self) -> Vec<FrameInfo<'tcx>> {\n+    pub fn generate_stacktrace_from_stack(\n+        stack: &[Frame<'mir, 'tcx, M::Provenance, M::FrameExtra>],\n+    ) -> Vec<FrameInfo<'tcx>> {\n         let mut frames = Vec::new();\n         // This deliberately does *not* honor `requires_caller_location` since it is used for much\n         // more than just panics.\n-        for frame in self.stack().iter().rev() {\n+        for frame in stack.iter().rev() {\n             let lint_root = frame.current_source_info().and_then(|source_info| {\n                 match &frame.body.source_scopes[source_info.scope].local_data {\n                     mir::ClearCrossCrate::Set(data) => Some(data.lint_root),\n@@ -947,6 +949,11 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         trace!(\"generate stacktrace: {:#?}\", frames);\n         frames\n     }\n+\n+    #[must_use]\n+    pub fn generate_stacktrace(&self) -> Vec<FrameInfo<'tcx>> {\n+        Self::generate_stacktrace_from_stack(self.stack())\n+    }\n }\n \n #[doc(hidden)]"}, {"sha": "2a1a0bbe2aebe4825d9b573baaa7bbe1cbf906bc", "filename": "compiler/rustc_middle/src/middle/resolve_lifetime.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/acb8934fd57b3c2740c4abac0a5728c2c9b1423b/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acb8934fd57b3c2740c4abac0a5728c2c9b1423b/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fresolve_lifetime.rs?ref=acb8934fd57b3c2740c4abac0a5728c2c9b1423b", "patch": "@@ -2,7 +2,7 @@\n \n use crate::ty;\n \n-use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::ItemLocalId;\n use rustc_macros::HashStable;\n@@ -51,10 +51,5 @@ pub struct ResolveLifetimes {\n     /// `Region` describing how that region is bound\n     pub defs: FxHashMap<LocalDefId, FxHashMap<ItemLocalId, Region>>,\n \n-    /// Set of lifetime def ids that are late-bound; a region can\n-    /// be late-bound if (a) it does NOT appear in a where-clause and\n-    /// (b) it DOES appear in the arguments.\n-    pub late_bound: FxHashMap<LocalDefId, FxHashSet<LocalDefId>>,\n-\n     pub late_bound_vars: FxHashMap<LocalDefId, FxHashMap<ItemLocalId, Vec<ty::BoundVariableKind>>>,\n }"}, {"sha": "afc8a9600ad48d4c0c2e524ea39f10fe861ca41d", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/acb8934fd57b3c2740c4abac0a5728c2c9b1423b/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acb8934fd57b3c2740c4abac0a5728c2c9b1423b/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=acb8934fd57b3c2740c4abac0a5728c2c9b1423b", "patch": "@@ -3154,6 +3154,7 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, did: DefId) -> CodegenFnAttrs {\n                         E0535,\n                         \"invalid argument\"\n                     )\n+                    .help(\"valid inline arguments are `always` and `never`\")\n                     .emit();\n \n                     InlineAttr::None"}, {"sha": "ce71cd600fcbbf1f2acc25fd84c30e4194eb7245", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/acb8934fd57b3c2740c4abac0a5728c2c9b1423b/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acb8934fd57b3c2740c4abac0a5728c2c9b1423b/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=acb8934fd57b3c2740c4abac0a5728c2c9b1423b", "patch": "@@ -109,6 +109,7 @@\n #![feature(core_intrinsics)]\n #![feature(const_eval_select)]\n #![feature(const_pin)]\n+#![feature(const_waker)]\n #![feature(cstr_from_bytes_until_nul)]\n #![feature(dispatch_from_dyn)]\n #![cfg_attr(not(bootstrap), feature(error_generic_member_access))]"}, {"sha": "1abbb39497a0f6522544855eef73de4122c37cb0", "filename": "library/core/src/cell.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/acb8934fd57b3c2740c4abac0a5728c2c9b1423b/library%2Fcore%2Fsrc%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acb8934fd57b3c2740c4abac0a5728c2c9b1423b/library%2Fcore%2Fsrc%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell.rs?ref=acb8934fd57b3c2740c4abac0a5728c2c9b1423b", "patch": "@@ -1021,15 +1021,18 @@ impl<T: ?Sized> RefCell<T> {\n \n     /// Returns a mutable reference to the underlying data.\n     ///\n-    /// This call borrows `RefCell` mutably (at compile-time) so there is no\n-    /// need for dynamic checks.\n-    ///\n-    /// However be cautious: this method expects `self` to be mutable, which is\n-    /// generally not the case when using a `RefCell`. Take a look at the\n-    /// [`borrow_mut`] method instead if `self` isn't mutable.\n-    ///\n-    /// Also, please be aware that this method is only for special circumstances and is usually\n-    /// not what you want. In case of doubt, use [`borrow_mut`] instead.\n+    /// Since this method borrows `RefCell` mutably, it is statically guaranteed\n+    /// that no borrows to the underlying data exist. The dynamic checks inherent\n+    /// in [`borrow_mut`] and most other methods of `RefCell` are therefor\n+    /// unnecessary.\n+    ///\n+    /// This method can only be called if `RefCell` can be mutably borrowed,\n+    /// which in general is only the case directly after the `RefCell` has\n+    /// been created. In these situations, skipping the aforementioned dynamic\n+    /// borrowing checks may yield better ergonomics and runtime-performance.\n+    ///\n+    /// In most situations where `RefCell` is used, it can't be borrowed mutably.\n+    /// Use [`borrow_mut`] to get mutable access to the underlying data then.\n     ///\n     /// [`borrow_mut`]: RefCell::borrow_mut()\n     ///"}, {"sha": "c912b933065a5467597fdb9a66ba45c5c80631b3", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/acb8934fd57b3c2740c4abac0a5728c2c9b1423b/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acb8934fd57b3c2740c4abac0a5728c2c9b1423b/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=acb8934fd57b3c2740c4abac0a5728c2c9b1423b", "patch": "@@ -145,6 +145,7 @@\n #![feature(const_default_impls)]\n #![feature(const_unicode_case_lookup)]\n #![feature(const_unsafecell_get_mut)]\n+#![feature(const_waker)]\n #![feature(core_panic)]\n #![feature(duration_consts_float)]\n #![feature(maybe_uninit_uninit_array)]"}, {"sha": "0cff972df3a5a8d4e961fe5fca309ab69a62b827", "filename": "library/core/src/task/wake.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/acb8934fd57b3c2740c4abac0a5728c2c9b1423b/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acb8934fd57b3c2740c4abac0a5728c2c9b1423b/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs?ref=acb8934fd57b3c2740c4abac0a5728c2c9b1423b", "patch": "@@ -186,17 +186,19 @@ pub struct Context<'a> {\n impl<'a> Context<'a> {\n     /// Create a new `Context` from a [`&Waker`](Waker).\n     #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n+    #[rustc_const_unstable(feature = \"const_waker\", issue = \"102012\")]\n     #[must_use]\n     #[inline]\n-    pub fn from_waker(waker: &'a Waker) -> Self {\n+    pub const fn from_waker(waker: &'a Waker) -> Self {\n         Context { waker, _marker: PhantomData }\n     }\n \n     /// Returns a reference to the [`Waker`] for the current task.\n     #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n+    #[rustc_const_unstable(feature = \"const_waker\", issue = \"102012\")]\n     #[must_use]\n     #[inline]\n-    pub fn waker(&self) -> &'a Waker {\n+    pub const fn waker(&self) -> &'a Waker {\n         &self.waker\n     }\n }\n@@ -311,7 +313,8 @@ impl Waker {\n     #[inline]\n     #[must_use]\n     #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n-    pub unsafe fn from_raw(waker: RawWaker) -> Waker {\n+    #[rustc_const_unstable(feature = \"const_waker\", issue = \"102012\")]\n+    pub const unsafe fn from_raw(waker: RawWaker) -> Waker {\n         Waker { waker }\n     }\n "}, {"sha": "46f603eaebaca8fe9b625521126fdd8e41cdc7da", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/acb8934fd57b3c2740c4abac0a5728c2c9b1423b/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acb8934fd57b3c2740c4abac0a5728c2c9b1423b/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=acb8934fd57b3c2740c4abac0a5728c2c9b1423b", "patch": "@@ -74,6 +74,7 @@\n #![feature(iterator_try_reduce)]\n #![feature(const_mut_refs)]\n #![feature(const_pin)]\n+#![feature(const_waker)]\n #![feature(never_type)]\n #![feature(unwrap_infallible)]\n #![feature(pointer_byte_offsets)]"}, {"sha": "56be30e9282452b8b9aa0a8b59b9255f072dd350", "filename": "library/core/tests/task.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/acb8934fd57b3c2740c4abac0a5728c2c9b1423b/library%2Fcore%2Ftests%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acb8934fd57b3c2740c4abac0a5728c2c9b1423b/library%2Fcore%2Ftests%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Ftask.rs?ref=acb8934fd57b3c2740c4abac0a5728c2c9b1423b", "patch": "@@ -1,4 +1,4 @@\n-use core::task::Poll;\n+use core::task::{Context, Poll, RawWaker, RawWakerVTable, Waker};\n \n #[test]\n fn poll_const() {\n@@ -12,3 +12,18 @@ fn poll_const() {\n     const IS_PENDING: bool = POLL.is_pending();\n     assert!(IS_PENDING);\n }\n+\n+#[test]\n+fn waker_const() {\n+    const VOID_TABLE: RawWakerVTable = RawWakerVTable::new(|_| VOID_WAKER, |_| {}, |_| {}, |_| {});\n+\n+    const VOID_WAKER: RawWaker = RawWaker::new(&(), &VOID_TABLE);\n+\n+    static WAKER: Waker = unsafe { Waker::from_raw(VOID_WAKER) };\n+\n+    static CONTEXT: Context<'static> = Context::from_waker(&WAKER);\n+\n+    static WAKER_REF: &'static Waker = CONTEXT.waker();\n+\n+    WAKER_REF.wake_by_ref();\n+}"}, {"sha": "07b40f64ac2b47e0ee66696967a2fd4c956b3e0d", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/acb8934fd57b3c2740c4abac0a5728c2c9b1423b/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acb8934fd57b3c2740c4abac0a5728c2c9b1423b/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=acb8934fd57b3c2740c4abac0a5728c2c9b1423b", "patch": "@@ -315,6 +315,7 @@\n #![feature(strict_provenance)]\n #![feature(maybe_uninit_uninit_array)]\n #![feature(const_maybe_uninit_uninit_array)]\n+#![feature(const_waker)]\n //\n // Library features (alloc):\n #![feature(alloc_layout_extra)]"}, {"sha": "b4f5bf933a6e379ffb3b00defc0d44bebab713ea", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/acb8934fd57b3c2740c4abac0a5728c2c9b1423b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/acb8934fd57b3c2740c4abac0a5728c2c9b1423b/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=acb8934fd57b3c2740c4abac0a5728c2c9b1423b", "patch": "@@ -1152,10 +1152,6 @@ so that we can apply CSS-filters to change the arrow color in themes */\n \tfont-size: 1rem;\n }\n \n-td.summary-column {\n-\twidth: 100%;\n-}\n-\n .summary {\n \tpadding-right: 0px;\n }"}, {"sha": "2501b1e23f2f14737c12a963ef5b72345bc63749", "filename": "src/test/ui/invalid/invalid-inline.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/acb8934fd57b3c2740c4abac0a5728c2c9b1423b/src%2Ftest%2Fui%2Finvalid%2Finvalid-inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acb8934fd57b3c2740c4abac0a5728c2c9b1423b/src%2Ftest%2Fui%2Finvalid%2Finvalid-inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid%2Finvalid-inline.rs?ref=acb8934fd57b3c2740c4abac0a5728c2c9b1423b", "patch": "@@ -1,19 +1,14 @@\n #![allow(dead_code)]\n \n-#[inline(please_no)] //~ ERROR invalid argument\n-fn a() {\n-}\n-\n #[inline(please,no)] //~ ERROR expected one argument\n-fn b() {\n+fn a() {\n }\n \n #[inline()] //~ ERROR expected one argument\n-fn c() {\n+fn b() {\n }\n \n fn main() {\n     a();\n     b();\n-    c();\n }"}, {"sha": "7edbf936b1b4d2948958951be3111243a18f9b81", "filename": "src/test/ui/invalid/invalid-inline.stderr", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/acb8934fd57b3c2740c4abac0a5728c2c9b1423b/src%2Ftest%2Fui%2Finvalid%2Finvalid-inline.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/acb8934fd57b3c2740c4abac0a5728c2c9b1423b/src%2Ftest%2Fui%2Finvalid%2Finvalid-inline.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid%2Finvalid-inline.stderr?ref=acb8934fd57b3c2740c4abac0a5728c2c9b1423b", "patch": "@@ -1,22 +1,15 @@\n-error[E0535]: invalid argument\n-  --> $DIR/invalid-inline.rs:3:10\n-   |\n-LL | #[inline(please_no)]\n-   |          ^^^^^^^^^\n-\n error[E0534]: expected one argument\n-  --> $DIR/invalid-inline.rs:7:1\n+  --> $DIR/invalid-inline.rs:3:1\n    |\n LL | #[inline(please,no)]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n error[E0534]: expected one argument\n-  --> $DIR/invalid-inline.rs:11:1\n+  --> $DIR/invalid-inline.rs:7:1\n    |\n LL | #[inline()]\n    | ^^^^^^^^^^^\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0534, E0535.\n-For more information about an error, try `rustc --explain E0534`.\n+For more information about this error, try `rustc --explain E0534`."}, {"sha": "91b5929c0fea66565a50ecbb52f201d4e53758ba", "filename": "src/test/ui/lexer/lex-emoji-identifiers.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/acb8934fd57b3c2740c4abac0a5728c2c9b1423b/src%2Ftest%2Fui%2Flexer%2Flex-emoji-identifiers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acb8934fd57b3c2740c4abac0a5728c2c9b1423b/src%2Ftest%2Fui%2Flexer%2Flex-emoji-identifiers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flexer%2Flex-emoji-identifiers.rs?ref=acb8934fd57b3c2740c4abac0a5728c2c9b1423b", "patch": "@@ -0,0 +1,17 @@\n+fn invalid_emoji_usages() {\n+    let arrow\u2194\ufe0f = \"basic emoji\"; //~ ERROR: identifiers cannot contain emoji\n+    // FIXME\n+    let planet\ud83e\ude90 = \"basic emoji\"; //~ ERROR: unknown start of token\n+    // FIXME\n+    let wireless\ud83d\udedc = \"basic emoji\"; //~ ERROR: unknown start of token\n+    // FIXME\n+    let key1\ufe0f\u20e3 = \"keycap sequence\"; //~ ERROR: unknown start of token\n+                                    //~^ WARN: identifier contains uncommon Unicode codepoints\n+    let flag\ud83c\uddfa\ud83c\uddf3 = \"flag sequence\"; //~ ERROR: identifiers cannot contain emoji\n+    let wales\ud83c\udff4 = \"tag sequence\"; //~ ERROR: identifiers cannot contain emoji\n+    let folded\ud83d\ude4f\ud83c\udfff = \"modifier sequence\"; //~ ERROR: identifiers cannot contain emoji\n+}\n+\n+fn main() {\n+    invalid_emoji_usages();\n+}"}, {"sha": "6237c5d0236d2d215c1a59b5b9fc8de10384fc99", "filename": "src/test/ui/lexer/lex-emoji-identifiers.stderr", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/acb8934fd57b3c2740c4abac0a5728c2c9b1423b/src%2Ftest%2Fui%2Flexer%2Flex-emoji-identifiers.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/acb8934fd57b3c2740c4abac0a5728c2c9b1423b/src%2Ftest%2Fui%2Flexer%2Flex-emoji-identifiers.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flexer%2Flex-emoji-identifiers.stderr?ref=acb8934fd57b3c2740c4abac0a5728c2c9b1423b", "patch": "@@ -0,0 +1,52 @@\n+error: unknown start of token: \\u{1fa90}\n+  --> $DIR/lex-emoji-identifiers.rs:4:15\n+   |\n+LL |     let planet\ud83e\ude90 = \"basic emoji\";\n+   |               ^^\n+\n+error: unknown start of token: \\u{1f6dc}\n+  --> $DIR/lex-emoji-identifiers.rs:6:17\n+   |\n+LL |     let wireless\ud83d\udedc = \"basic emoji\";\n+   |                 ^^\n+\n+error: unknown start of token: \\u{20e3}\n+  --> $DIR/lex-emoji-identifiers.rs:8:14\n+   |\n+LL |     let key1\ufe0f\u20e3 = \"keycap sequence\";\n+   |             ^\n+\n+error: identifiers cannot contain emoji: `arrow\u2194\ufe0f`\n+  --> $DIR/lex-emoji-identifiers.rs:2:9\n+   |\n+LL |     let arrow\u2194\ufe0f = \"basic emoji\";\n+   |         ^^^^^^\n+\n+error: identifiers cannot contain emoji: `flag\ud83c\uddfa\ud83c\uddf3`\n+  --> $DIR/lex-emoji-identifiers.rs:10:9\n+   |\n+LL |     let flag\ud83c\uddfa\ud83c\uddf3 = \"flag sequence\";\n+   |         ^^^^^^\n+\n+error: identifiers cannot contain emoji: `wales\ud83c\udff4`\n+  --> $DIR/lex-emoji-identifiers.rs:11:9\n+   |\n+LL |     let wales\ud83c\udff4 = \"tag sequence\";\n+   |         ^^^^^^^\n+\n+error: identifiers cannot contain emoji: `folded\ud83d\ude4f\ud83c\udfff`\n+  --> $DIR/lex-emoji-identifiers.rs:12:9\n+   |\n+LL |     let folded\ud83d\ude4f\ud83c\udfff = \"modifier sequence\";\n+   |         ^^^^^^^^^^\n+\n+warning: identifier contains uncommon Unicode codepoints\n+  --> $DIR/lex-emoji-identifiers.rs:8:9\n+   |\n+LL |     let key1\ufe0f\u20e3 = \"keycap sequence\";\n+   |         ^^^^\n+   |\n+   = note: `#[warn(uncommon_codepoints)]` on by default\n+\n+error: aborting due to 7 previous errors; 1 warning emitted\n+"}, {"sha": "b1411bc436ae2f4edbd9049fa75d7219d9d380f0", "filename": "src/test/ui/span/E0535.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acb8934fd57b3c2740c4abac0a5728c2c9b1423b/src%2Ftest%2Fui%2Fspan%2FE0535.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/acb8934fd57b3c2740c4abac0a5728c2c9b1423b/src%2Ftest%2Fui%2Fspan%2FE0535.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2FE0535.stderr?ref=acb8934fd57b3c2740c4abac0a5728c2c9b1423b", "patch": "@@ -3,6 +3,8 @@ error[E0535]: invalid argument\n    |\n LL | #[inline(unknown)]\n    |          ^^^^^^^\n+   |\n+   = help: valid inline arguments are `always` and `never`\n \n error: aborting due to previous error\n "}, {"sha": "4cfb70fa31c4ee7f2a9a57b2ef91a66707b41dff", "filename": "src/tools/tidy/src/walk.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/acb8934fd57b3c2740c4abac0a5728c2c9b1423b/src%2Ftools%2Ftidy%2Fsrc%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acb8934fd57b3c2740c4abac0a5728c2c9b1423b/src%2Ftools%2Ftidy%2Fsrc%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fwalk.rs?ref=acb8934fd57b3c2740c4abac0a5728c2c9b1423b", "patch": "@@ -21,6 +21,12 @@ pub fn filter_dirs(path: &Path) -> bool {\n         \"src/tools/rust-installer\",\n         \"src/tools/rustfmt\",\n         \"src/doc/book\",\n+        \"src/doc/edition-guide\",\n+        \"src/doc/embedded-book\",\n+        \"src/doc/nomicon\",\n+        \"src/doc/rust-by-example\",\n+        \"src/doc/rustc-dev-guide\",\n+        \"src/doc/reference\",\n         // Filter RLS output directories\n         \"target/rls\",\n         \"src/bootstrap/target\","}]}