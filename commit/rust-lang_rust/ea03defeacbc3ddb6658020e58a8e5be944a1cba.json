{"sha": "ea03defeacbc3ddb6658020e58a8e5be944a1cba", "node_id": "C_kwDOAAsO6NoAKGVhMDNkZWZlYWNiYzNkZGI2NjU4MDIwZTU4YThlNWJlOTQ0YTFjYmE", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-11-19T12:17:35Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-11-19T12:17:35Z"}, "message": "fix: Diagnose invalid derive attribute input", "tree": {"sha": "d5ecef427bfb8dc868f98eafaeb72a8607a371ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d5ecef427bfb8dc868f98eafaeb72a8607a371ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea03defeacbc3ddb6658020e58a8e5be944a1cba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea03defeacbc3ddb6658020e58a8e5be944a1cba", "html_url": "https://github.com/rust-lang/rust/commit/ea03defeacbc3ddb6658020e58a8e5be944a1cba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea03defeacbc3ddb6658020e58a8e5be944a1cba/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "675791093487a52efc811eb22a369909d726ad58", "url": "https://api.github.com/repos/rust-lang/rust/commits/675791093487a52efc811eb22a369909d726ad58", "html_url": "https://github.com/rust-lang/rust/commit/675791093487a52efc811eb22a369909d726ad58"}], "stats": {"total": 124, "additions": 100, "deletions": 24}, "files": [{"sha": "83c6f2c3b8a66c841b4db6d675146e3f834724f9", "filename": "crates/hir/src/diagnostics.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ea03defeacbc3ddb6658020e58a8e5be944a1cba/crates%2Fhir%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea03defeacbc3ddb6658020e58a8e5be944a1cba/crates%2Fhir%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fdiagnostics.rs?ref=ea03defeacbc3ddb6658020e58a8e5be944a1cba", "patch": "@@ -34,6 +34,7 @@ diagnostics![\n     IncorrectCase,\n     InvalidDeriveTarget,\n     MacroError,\n+    MalformedDerive,\n     MismatchedArgCount,\n     MissingFields,\n     MissingMatchArms,\n@@ -104,6 +105,11 @@ pub struct InvalidDeriveTarget {\n     pub node: InFile<SyntaxNodePtr>,\n }\n \n+#[derive(Debug)]\n+pub struct MalformedDerive {\n+    pub node: InFile<SyntaxNodePtr>,\n+}\n+\n #[derive(Debug)]\n pub struct NoSuchField {\n     pub field: InFile<AstPtr<ast::RecordExprField>>,"}, {"sha": "baa58c0824824dcfda724e1a32682bf17849f291", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ea03defeacbc3ddb6658020e58a8e5be944a1cba/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea03defeacbc3ddb6658020e58a8e5be944a1cba/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=ea03defeacbc3ddb6658020e58a8e5be944a1cba", "patch": "@@ -83,10 +83,11 @@ pub use crate::{\n     attrs::{HasAttrs, Namespace},\n     diagnostics::{\n         AddReferenceHere, AnyDiagnostic, BreakOutsideOfLoop, InactiveCode, IncorrectCase,\n-        InvalidDeriveTarget, MacroError, MismatchedArgCount, MissingFields, MissingMatchArms,\n-        MissingOkOrSomeInTailExpr, MissingUnsafe, NoSuchField, RemoveThisSemicolon,\n-        ReplaceFilterMapNextWithFindMap, UnimplementedBuiltinMacro, UnresolvedExternCrate,\n-        UnresolvedImport, UnresolvedMacroCall, UnresolvedModule, UnresolvedProcMacro,\n+        InvalidDeriveTarget, MacroError, MalformedDerive, MismatchedArgCount, MissingFields,\n+        MissingMatchArms, MissingOkOrSomeInTailExpr, MissingUnsafe, NoSuchField,\n+        RemoveThisSemicolon, ReplaceFilterMapNextWithFindMap, UnimplementedBuiltinMacro,\n+        UnresolvedExternCrate, UnresolvedImport, UnresolvedMacroCall, UnresolvedModule,\n+        UnresolvedProcMacro,\n     },\n     has_source::HasSource,\n     semantics::{PathResolution, Semantics, SemanticsScope, TypeInfo},\n@@ -669,6 +670,21 @@ impl Module {\n                         None => stdx::never!(\"derive diagnostic on item without derive attribute\"),\n                     }\n                 }\n+                DefDiagnosticKind::MalformedDerive { ast, id } => {\n+                    let node = ast.to_node(db.upcast());\n+                    let derive = node.attrs().nth(*id as usize);\n+                    match derive {\n+                        Some(derive) => {\n+                            acc.push(\n+                                MalformedDerive {\n+                                    node: ast.with_value(SyntaxNodePtr::from(AstPtr::new(&derive))),\n+                                }\n+                                .into(),\n+                            );\n+                        }\n+                        None => stdx::never!(\"derive diagnostic on item without derive attribute\"),\n+                    }\n+                }\n             }\n         }\n         for decl in self.declarations(db) {"}, {"sha": "5673bef38bc5a9df4de89bd71b19f74d9616ae3f", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 22, "deletions": 19, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/ea03defeacbc3ddb6658020e58a8e5be944a1cba/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea03defeacbc3ddb6658020e58a8e5be944a1cba/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=ea03defeacbc3ddb6658020e58a8e5be944a1cba", "patch": "@@ -8,7 +8,6 @@ use std::iter;\n use base_db::{CrateId, Edition, FileId, ProcMacroId};\n use cfg::{CfgExpr, CfgOptions};\n use hir_expand::{\n-    ast_id_map::FileAstId,\n     builtin_attr_macro::find_builtin_attr,\n     builtin_derive_macro::find_builtin_derive,\n     builtin_fn_macro::find_builtin_macro,\n@@ -1081,8 +1080,10 @@ impl DefCollector<'_> {\n                         return false;\n                     }\n                 }\n-                MacroDirectiveKind::Attr { ast_id, mod_item, attr } => {\n-                    let file_id = ast_id.ast_id.file_id;\n+                MacroDirectiveKind::Attr { ast_id: file_ast_id, mod_item, attr } => {\n+                    let &AstIdWithPath { ast_id, ref path } = file_ast_id;\n+                    let file_id = ast_id.file_id;\n+\n                     let mut recollect_without = |collector: &mut Self, item_tree| {\n                         // Remove the original directive since we resolved it.\n                         let mod_dir = collector.mod_dirs[&directive.module_id].clone();\n@@ -1100,8 +1101,8 @@ impl DefCollector<'_> {\n                         false\n                     };\n \n-                    if let Some(ident) = ast_id.path.as_ident() {\n-                        if let Some(helpers) = self.derive_helpers_in_scope.get(&ast_id.ast_id) {\n+                    if let Some(ident) = path.as_ident() {\n+                        if let Some(helpers) = self.derive_helpers_in_scope.get(&ast_id) {\n                             if helpers.contains(ident) {\n                                 cov_mark::hit!(resolved_derive_helper);\n                                 // Resolved to derive helper. Collect the item's attributes again,\n@@ -1112,7 +1113,7 @@ impl DefCollector<'_> {\n                         }\n                     }\n \n-                    let def = resolver(ast_id.path.clone()).filter(MacroDefId::is_attribute);\n+                    let def = resolver(path.clone()).filter(MacroDefId::is_attribute);\n                     if matches!(\n                         def,\n                         Some(MacroDefId {  kind:MacroDefKind::BuiltInAttr(expander, _),.. })\n@@ -1121,26 +1122,23 @@ impl DefCollector<'_> {\n                         // Resolved to `#[derive]`\n                         let item_tree = self.db.file_item_tree(file_id);\n \n-                        let ast_id: FileAstId<ast::Item> = match *mod_item {\n-                            ModItem::Struct(it) => item_tree[it].ast_id.upcast(),\n-                            ModItem::Union(it) => item_tree[it].ast_id.upcast(),\n-                            ModItem::Enum(it) => item_tree[it].ast_id.upcast(),\n+                        match mod_item {\n+                            ModItem::Struct(_) | ModItem::Union(_) | ModItem::Enum(_) => (),\n                             _ => {\n                                 let diag = DefDiagnostic::invalid_derive_target(\n                                     directive.module_id,\n-                                    ast_id.ast_id,\n+                                    ast_id,\n                                     attr.id,\n                                 );\n                                 self.def_map.diagnostics.push(diag);\n-                                res = ReachedFixedPoint::No;\n-                                return false;\n+                                return recollect_without(self, &item_tree);\n                             }\n-                        };\n+                        }\n \n                         match attr.parse_derive() {\n                             Some(derive_macros) => {\n                                 for path in derive_macros {\n-                                    let ast_id = AstIdWithPath::new(file_id, ast_id, path);\n+                                    let ast_id = AstIdWithPath::new(file_id, ast_id.value, path);\n                                     self.unresolved_macros.push(MacroDirective {\n                                         module_id: directive.module_id,\n                                         depth: directive.depth + 1,\n@@ -1152,8 +1150,12 @@ impl DefCollector<'_> {\n                                 }\n                             }\n                             None => {\n-                                // FIXME: diagnose\n-                                tracing::debug!(\"malformed derive: {:?}\", attr);\n+                                let diag = DefDiagnostic::malformed_derive(\n+                                    directive.module_id,\n+                                    ast_id,\n+                                    attr.id,\n+                                );\n+                                self.def_map.diagnostics.push(diag);\n                             }\n                         }\n \n@@ -1165,7 +1167,8 @@ impl DefCollector<'_> {\n                     }\n \n                     // Not resolved to a derive helper or the derive attribute, so try to resolve as a normal attribute.\n-                    match attr_macro_as_call_id(ast_id, attr, self.db, self.def_map.krate, def) {\n+                    match attr_macro_as_call_id(file_ast_id, attr, self.db, self.def_map.krate, def)\n+                    {\n                         Ok(call_id) => {\n                             let loc: MacroCallLoc = self.db.lookup_intern_macro_call(call_id);\n \n@@ -1198,7 +1201,7 @@ impl DefCollector<'_> {\n \n                             self.def_map.modules[directive.module_id]\n                                 .scope\n-                                .add_attr_macro_invoc(ast_id.ast_id, call_id);\n+                                .add_attr_macro_invoc(ast_id, call_id);\n \n                             resolved.push((directive.module_id, call_id, directive.depth));\n                             res = ReachedFixedPoint::No;"}, {"sha": "51e3f18c1113cc1771cd34f4d8c976d40400fff5", "filename": "crates/hir_def/src/nameres/diagnostics.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ea03defeacbc3ddb6658020e58a8e5be944a1cba/crates%2Fhir_def%2Fsrc%2Fnameres%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea03defeacbc3ddb6658020e58a8e5be944a1cba/crates%2Fhir_def%2Fsrc%2Fnameres%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fdiagnostics.rs?ref=ea03defeacbc3ddb6658020e58a8e5be944a1cba", "patch": "@@ -32,6 +32,8 @@ pub enum DefDiagnosticKind {\n     UnimplementedBuiltinMacro { ast: AstId<ast::Macro> },\n \n     InvalidDeriveTarget { ast: AstId<ast::Item>, id: u32 },\n+\n+    MalformedDerive { ast: AstId<ast::Item>, id: u32 },\n }\n \n #[derive(Debug, PartialEq, Eq)]\n@@ -116,4 +118,15 @@ impl DefDiagnostic {\n             kind: DefDiagnosticKind::InvalidDeriveTarget { ast, id: id.ast_index },\n         }\n     }\n+\n+    pub(super) fn malformed_derive(\n+        container: LocalModuleId,\n+        ast: AstId<ast::Item>,\n+        id: AttrId,\n+    ) -> Self {\n+        Self {\n+            in_module: container,\n+            kind: DefDiagnosticKind::MalformedDerive { ast, id: id.ast_index },\n+        }\n+    }\n }"}, {"sha": "c779266bc97b2fda617e6ed1f673d97e7ea2a6be", "filename": "crates/ide_diagnostics/src/handlers/invalid_derive_target.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ea03defeacbc3ddb6658020e58a8e5be944a1cba/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Finvalid_derive_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea03defeacbc3ddb6658020e58a8e5be944a1cba/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Finvalid_derive_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Finvalid_derive_target.rs?ref=ea03defeacbc3ddb6658020e58a8e5be944a1cba", "patch": "@@ -8,7 +8,6 @@ pub(crate) fn invalid_derive_target(\n     ctx: &DiagnosticsContext<'_>,\n     d: &hir::InvalidDeriveTarget,\n ) -> Diagnostic {\n-    // Use more accurate position if available.\n     let display_range = ctx.sema.diagnostics_display_range(d.node.clone()).range;\n \n     Diagnostic::new("}, {"sha": "cd48bdba07e57d2952a084e0facf5c997a48349e", "filename": "crates/ide_diagnostics/src/handlers/malformed_derive.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/ea03defeacbc3ddb6658020e58a8e5be944a1cba/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fmalformed_derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea03defeacbc3ddb6658020e58a8e5be944a1cba/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fmalformed_derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_diagnostics%2Fsrc%2Fhandlers%2Fmalformed_derive.rs?ref=ea03defeacbc3ddb6658020e58a8e5be944a1cba", "patch": "@@ -0,0 +1,37 @@\n+use crate::{Diagnostic, DiagnosticsContext, Severity};\n+\n+// Diagnostic: malformed-derive\n+//\n+// This diagnostic is shown when the derive attribute has invalid input.\n+pub(crate) fn malformed_derive(\n+    ctx: &DiagnosticsContext<'_>,\n+    d: &hir::MalformedDerive,\n+) -> Diagnostic {\n+    let display_range = ctx.sema.diagnostics_display_range(d.node.clone()).range;\n+\n+    Diagnostic::new(\n+        \"malformed-derive\",\n+        \"malformed derive input, derive attributes are of the form `#[derive(Derive1, Derive2, ...)]`\",\n+        display_range,\n+    )\n+    .severity(Severity::Error)\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::tests::check_diagnostics;\n+\n+    #[test]\n+    fn invalid_input() {\n+        check_diagnostics(\n+            r#\"\n+//- minicore:derive\n+mod __ {\n+    #[derive = \"aaaa\"]\n+  //^^^^^^^^^^^^^^^^^^ error: malformed derive input, derive attributes are of the form `#[derive(Derive1, Derive2, ...)]`\n+    struct Foo;\n+}\n+            \"#,\n+        );\n+    }\n+}"}, {"sha": "c921d989bd3c0ebaad2904fbb4947b091634cc91", "filename": "crates/ide_diagnostics/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea03defeacbc3ddb6658020e58a8e5be944a1cba/crates%2Fide_diagnostics%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea03defeacbc3ddb6658020e58a8e5be944a1cba/crates%2Fide_diagnostics%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_diagnostics%2Fsrc%2Flib.rs?ref=ea03defeacbc3ddb6658020e58a8e5be944a1cba", "patch": "@@ -30,6 +30,7 @@ mod handlers {\n     pub(crate) mod incorrect_case;\n     pub(crate) mod invalid_derive_target;\n     pub(crate) mod macro_error;\n+    pub(crate) mod malformed_derive;\n     pub(crate) mod mismatched_arg_count;\n     pub(crate) mod missing_fields;\n     pub(crate) mod missing_match_arms;\n@@ -182,6 +183,7 @@ pub fn diagnostics(\n             AnyDiagnostic::BreakOutsideOfLoop(d) => handlers::break_outside_of_loop::break_outside_of_loop(&ctx, &d),\n             AnyDiagnostic::IncorrectCase(d) => handlers::incorrect_case::incorrect_case(&ctx, &d),\n             AnyDiagnostic::MacroError(d) => handlers::macro_error::macro_error(&ctx, &d),\n+            AnyDiagnostic::MalformedDerive(d) => handlers::malformed_derive::malformed_derive(&ctx, &d),\n             AnyDiagnostic::MismatchedArgCount(d) => handlers::mismatched_arg_count::mismatched_arg_count(&ctx, &d),\n             AnyDiagnostic::MissingFields(d) => handlers::missing_fields::missing_fields(&ctx, &d),\n             AnyDiagnostic::MissingMatchArms(d) => handlers::missing_match_arms::missing_match_arms(&ctx, &d),"}]}