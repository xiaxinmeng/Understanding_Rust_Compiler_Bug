{"sha": "633e4aafe65cd424cf6c8076869df1b49a4e0ec4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzM2U0YWFmZTY1Y2Q0MjRjZjZjODA3Njg2OWRmMWI0OWE0ZTBlYzQ=", "commit": {"author": {"name": "csmoe", "email": "csmoe@msn.com", "date": "2020-05-16T08:08:56Z"}, "committer": {"name": "csmoe", "email": "csmoe@msn.com", "date": "2020-05-16T09:05:20Z"}, "message": "suggest on Self return type", "tree": {"sha": "0b59ee06b9f7af73547f49aeb34274ab3c14ce15", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b59ee06b9f7af73547f49aeb34274ab3c14ce15"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/633e4aafe65cd424cf6c8076869df1b49a4e0ec4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/633e4aafe65cd424cf6c8076869df1b49a4e0ec4", "html_url": "https://github.com/rust-lang/rust/commit/633e4aafe65cd424cf6c8076869df1b49a4e0ec4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/633e4aafe65cd424cf6c8076869df1b49a4e0ec4/comments", "author": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "008d90a66a30bc8ff498f8ad47dea315c1853a75", "url": "https://api.github.com/repos/rust-lang/rust/commits/008d90a66a30bc8ff498f8ad47dea315c1853a75", "html_url": "https://github.com/rust-lang/rust/commit/008d90a66a30bc8ff498f8ad47dea315c1853a75"}], "stats": {"total": 79, "additions": 43, "deletions": 36}, "files": [{"sha": "0906c25baef09faf98d94c7eff4b766d75055fca", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 43, "deletions": 24, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/633e4aafe65cd424cf6c8076869df1b49a4e0ec4/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/633e4aafe65cd424cf6c8076869df1b49a4e0ec4/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=633e4aafe65cd424cf6c8076869df1b49a4e0ec4", "patch": "@@ -1639,51 +1639,56 @@ fn check_opaque_for_inheriting_lifetimes(tcx: TyCtxt<'tcx>, def_id: LocalDefId,\n     struct ProhibitOpaqueVisitor<'tcx> {\n         opaque_identity_ty: Ty<'tcx>,\n         generics: &'tcx ty::Generics,\n+        ty: Option<Ty<'tcx>>,\n     };\n \n     impl<'tcx> ty::fold::TypeVisitor<'tcx> for ProhibitOpaqueVisitor<'tcx> {\n         fn visit_ty(&mut self, t: Ty<'tcx>) -> bool {\n             debug!(\"check_opaque_for_inheriting_lifetimes: (visit_ty) t={:?}\", t);\n+            self.ty = Some(t);\n             if t == self.opaque_identity_ty { false } else { t.super_visit_with(self) }\n         }\n \n         fn visit_region(&mut self, r: ty::Region<'tcx>) -> bool {\n             debug!(\"check_opaque_for_inheriting_lifetimes: (visit_region) r={:?}\", r);\n             if let RegionKind::ReEarlyBound(ty::EarlyBoundRegion { index, .. }) = r {\n-                return *index < self.generics.parent_count as u32;\n+                let found_lifetime = *index < self.generics.parent_count as u32;\n+                if !found_lifetime {\n+                    self.ty = None;\n+                }\n+                return found_lifetime;\n             }\n \n             r.super_visit_with(self)\n         }\n     }\n \n+    let mut visitor = ProhibitOpaqueVisitor {\n+        opaque_identity_ty: tcx.mk_opaque(\n+            def_id.to_def_id(),\n+            InternalSubsts::identity_for_item(tcx, def_id.to_def_id()),\n+        ),\n+        generics: tcx.generics_of(def_id),\n+        ty: None,\n+    };\n+    debug!(\"check_opaque_for_inheriting_lifetimes: visitor={:?}\", visitor);\n+\n     let prohibit_opaque = match item.kind {\n         ItemKind::OpaqueTy(hir::OpaqueTy {\n-            bounds,\n             origin: hir::OpaqueTyOrigin::AsyncFn | hir::OpaqueTyOrigin::FnReturn,\n             ..\n-        }) => {\n-            let mut visitor = ProhibitOpaqueVisitor {\n-                opaque_identity_ty: tcx.mk_opaque(\n-                    def_id.to_def_id(),\n-                    InternalSubsts::identity_for_item(tcx, def_id.to_def_id()),\n-                ),\n-                generics: tcx.generics_of(def_id),\n-            };\n-            debug!(\"check_opaque_for_inheriting_lifetimes: visitor={:?}\", visitor);\n-\n-            for bound in bounds {\n-                debug!(\"check_opaque_for_inheriting_lifetimes: {:?}\", bound.trait_ref());\n-            }\n-            tcx.predicates_of(def_id)\n-                .predicates\n-                .iter()\n-                .any(|(predicate, _)| predicate.visit_with(&mut visitor))\n-        }\n+        }) => tcx\n+            .predicates_of(def_id)\n+            .predicates\n+            .iter()\n+            .any(|(predicate, _)| predicate.visit_with(&mut visitor)),\n         _ => false,\n     };\n+    debug!(\n+        \"check_opaque_for_inheriting_lifetimes: prohibit_opaque={:?}, visitor={:?}\",\n+        prohibit_opaque, visitor\n+    );\n \n-    debug!(\"check_opaque_for_inheriting_lifetimes: prohibit_opaque={:?}\", prohibit_opaque);\n     if prohibit_opaque {\n         let is_async = match item.kind {\n             ItemKind::OpaqueTy(hir::OpaqueTy { origin, .. }) => match origin {\n@@ -1693,14 +1698,28 @@ fn check_opaque_for_inheriting_lifetimes(tcx: TyCtxt<'tcx>, def_id: LocalDefId,\n             _ => unreachable!(),\n         };\n \n-        tcx.sess.span_err(\n+        let mut err = struct_span_err!(\n+            tcx.sess,\n             span,\n-            &format!(\n+            E0754,\n             \"`{}` return type cannot contain a projection or `Self` that references lifetimes from \\\n              a parent scope\",\n             if is_async { \"async fn\" } else { \"impl Trait\" },\n-        )\n         );\n+\n+        if let Ok(snippet) = tcx.sess.source_map().span_to_snippet(span) {\n+            if snippet == \"Self\" {\n+                if let Some(ty) = visitor.ty {\n+                    err.span_suggestion(\n+                        span,\n+                        \"consider spelling out the type instead\",\n+                        format!(\"{:?}\", ty),\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                }\n+            }\n+        }\n+        err.emit();\n     }\n }\n "}, {"sha": "224b76e2d903f15559c90681295b93077b9a5617", "filename": "src/test/ui/async-await/issue-69276.rs", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/008d90a66a30bc8ff498f8ad47dea315c1853a75/src%2Ftest%2Fui%2Fasync-await%2Fissue-69276.rs", "raw_url": "https://github.com/rust-lang/rust/raw/008d90a66a30bc8ff498f8ad47dea315c1853a75/src%2Ftest%2Fui%2Fasync-await%2Fissue-69276.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-69276.rs?ref=008d90a66a30bc8ff498f8ad47dea315c1853a75", "patch": "@@ -1,12 +0,0 @@\n-// edition:2018\n-\n-struct S<'a>(&'a i32);\n-\n-impl<'a> S<'a> {\n-    async fn new(i: &'a i32) -> Self {\n-    //~^ ERROR `async fn` return type cannot contain a projection or `Self` that references lifetimes from a parent scope\n-        S(&22)\n-    }\n-}\n-\n-fn main() {}"}]}