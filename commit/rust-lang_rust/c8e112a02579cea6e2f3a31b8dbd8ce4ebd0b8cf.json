{"sha": "c8e112a02579cea6e2f3a31b8dbd8ce4ebd0b8cf", "node_id": "C_kwDOAAsO6NoAKGM4ZTExMmEwMjU3OWNlYTZlMmYzYTMxYjhkYmQ4Y2U0ZWJkMGI4Y2Y", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2023-03-19T10:03:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-19T10:03:57Z"}, "message": "Rollup merge of #108973 - est31:pin_docs, r=Mark-Simulacrum\n\nBeautify pin! docs\n\nThis makes pin docs a little bit less jargon-y and easier to read, by\n\n* splitting up the sentences\n* making them less interrupted by punctuation\n* turning the footnotes into paragraphs, as they contain useful information that shouldn't be hidden in footnotes. Footnotes also interrupt the read flow.", "tree": {"sha": "70a2eb153d63e3b3f4ab7544e98e75e2bfc77aea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70a2eb153d63e3b3f4ab7544e98e75e2bfc77aea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c8e112a02579cea6e2f3a31b8dbd8ce4ebd0b8cf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkFt4NCRBK7hj4Ov3rIwAAUHUIACqE3MwzSQi4WnxtwRDQiOA4\nsfAGnGL/+hdFTsRPKSn/3PZ/Cls7Ejgo832geVV6ALfV/lFqKdx8i3HxKYuYJmo5\n3bg3Plmi3fjjouo4XUBCF8SUBqe4eW6kuIfiFSfC6Eh4DxyV2woRaW1JnYc/VyfH\nY7qdNb4+fOpoP3Jb+B6b7tRSo+I4u4Gr7FK6vXws3RVRp4jHukmeH65Cy+m5YUxi\nf3DPn7KyN/lHdpWhIYct38IZsOwnfVvn45hG/qcV+diS1Ja8gN+jw7VtB5+gH+cA\ntReAq4/y8wNlhYaGVczFz9hIe4XGv4f925l5AqB6DyMOF3BMNNdyziuqBCMC81k=\n=eWkp\n-----END PGP SIGNATURE-----\n", "payload": "tree 70a2eb153d63e3b3f4ab7544e98e75e2bfc77aea\nparent acaae90bf5485e1238f0953c5b087772d9045284\nparent f663f0946771260ba4a0a24eb24bb5d8ce2fe546\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1679220237 +0530\ncommitter GitHub <noreply@github.com> 1679220237 +0530\n\nRollup merge of #108973 - est31:pin_docs, r=Mark-Simulacrum\n\nBeautify pin! docs\n\nThis makes pin docs a little bit less jargon-y and easier to read, by\n\n* splitting up the sentences\n* making them less interrupted by punctuation\n* turning the footnotes into paragraphs, as they contain useful information that shouldn't be hidden in footnotes. Footnotes also interrupt the read flow.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c8e112a02579cea6e2f3a31b8dbd8ce4ebd0b8cf", "html_url": "https://github.com/rust-lang/rust/commit/c8e112a02579cea6e2f3a31b8dbd8ce4ebd0b8cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c8e112a02579cea6e2f3a31b8dbd8ce4ebd0b8cf/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "acaae90bf5485e1238f0953c5b087772d9045284", "url": "https://api.github.com/repos/rust-lang/rust/commits/acaae90bf5485e1238f0953c5b087772d9045284", "html_url": "https://github.com/rust-lang/rust/commit/acaae90bf5485e1238f0953c5b087772d9045284"}, {"sha": "f663f0946771260ba4a0a24eb24bb5d8ce2fe546", "url": "https://api.github.com/repos/rust-lang/rust/commits/f663f0946771260ba4a0a24eb24bb5d8ce2fe546", "html_url": "https://github.com/rust-lang/rust/commit/f663f0946771260ba4a0a24eb24bb5d8ce2fe546"}], "stats": {"total": 35, "additions": 19, "deletions": 16}, "files": [{"sha": "c4b89a6301965b6a6c8efbc0cbb5fe8173da189f", "filename": "library/core/src/pin.rs", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/c8e112a02579cea6e2f3a31b8dbd8ce4ebd0b8cf/library%2Fcore%2Fsrc%2Fpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8e112a02579cea6e2f3a31b8dbd8ce4ebd0b8cf/library%2Fcore%2Fsrc%2Fpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpin.rs?ref=c8e112a02579cea6e2f3a31b8dbd8ce4ebd0b8cf", "patch": "@@ -1003,22 +1003,25 @@ impl<P, U> CoerceUnsized<Pin<U>> for Pin<P> where P: CoerceUnsized<U> {}\n #[stable(feature = \"pin\", since = \"1.33.0\")]\n impl<P, U> DispatchFromDyn<Pin<U>> for Pin<P> where P: DispatchFromDyn<U> {}\n \n-/// Constructs a <code>[Pin]<[&mut] T></code>, by pinning[^1] a `value: T` _locally_[^2].\n+/// Constructs a <code>[Pin]<[&mut] T></code>, by pinning a `value: T` locally.\n ///\n-/// Unlike [`Box::pin`], this does not involve a heap allocation.\n+/// Unlike [`Box::pin`], this does not create a new heap allocation. As explained\n+/// below, the element might still end up on the heap however.\n ///\n-/// [^1]: If the (type `T` of the) given value does not implement [`Unpin`], then this\n-/// effectively pins the `value` in memory, where it will be unable to be moved.\n-/// Otherwise, <code>[Pin]<[&mut] T></code> behaves like <code>[&mut] T</code>, and operations such\n-/// as [`mem::replace()`][crate::mem::replace] will allow extracting that value, and therefore,\n-/// moving it.\n-/// See [the `Unpin` section of the `pin` module][self#unpin] for more info.\n+/// The local pinning performed by this macro is usually dubbed \"stack\"-pinning.\n+/// Outside of `async` contexts locals do indeed get stored on the stack. In\n+/// `async` functions or blocks however, any locals crossing an `.await` point\n+/// are part of the state captured by the `Future`, and will use the storage of\n+/// those. That storage can either be on the heap or on the stack. Therefore,\n+/// local pinning is a more accurate term.\n ///\n-/// [^2]: This is usually dubbed \"stack\"-pinning. And whilst local values are almost always located\n-/// in the stack (_e.g._, when within the body of a non-`async` function), the truth is that inside\n-/// the body of an `async fn` or block \u2014more generally, the body of a generator\u2014 any locals crossing\n-/// an `.await` point \u2014a `yield` point\u2014 end up being part of the state captured by the `Future` \u2014by\n-/// the `Generator`\u2014, and thus will be stored wherever that one is.\n+/// If the type of the given value does not implement [`Unpin`], then this macro\n+/// pins the value in memory in a way that prevents moves. On the other hand,\n+/// if the type does implement [`Unpin`], <code>[Pin]<[&mut] T></code> behaves\n+/// like <code>[&mut] T</code>, and operations such as\n+/// [`mem::replace()`][crate::mem::replace] or [`mem::take()`](crate::mem::take)\n+/// will allow moves of the value.\n+/// See [the `Unpin` section of the `pin` module][self#unpin] for details.\n ///\n /// ## Examples\n ///\n@@ -1158,9 +1161,9 @@ impl<P, U> DispatchFromDyn<Pin<U>> for Pin<P> where P: DispatchFromDyn<U> {}\n ///\n /// If you really need to return a pinned value, consider using [`Box::pin`] instead.\n ///\n-/// On the other hand, pinning to the stack[<sup>2</sup>](#fn2) using [`pin!`] is likely to be\n-/// cheaper than pinning into a fresh heap allocation using [`Box::pin`]. Moreover, by virtue of not\n-/// even needing an allocator, [`pin!`] is the main non-`unsafe` `#![no_std]`-compatible [`Pin`]\n+/// On the other hand, local pinning using [`pin!`] is likely to be cheaper than\n+/// pinning into a fresh heap allocation using [`Box::pin`]. Moreover, by virtue of not\n+/// requiring an allocator, [`pin!`] is the main non-`unsafe` `#![no_std]`-compatible [`Pin`]\n /// constructor.\n ///\n /// [`Box::pin`]: ../../std/boxed/struct.Box.html#method.pin"}]}