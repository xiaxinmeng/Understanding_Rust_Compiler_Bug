{"sha": "52f9e80e5f4d67d8af4831a9e27a557b30b81761", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyZjllODBlNWY0ZDY3ZDhhZjQ4MzFhOWUyN2E1NTdiMzBiODE3NjE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-10T06:13:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-08-10T06:13:17Z"}, "message": "Rollup merge of #63337 - estebank:break-ee0308, r=Centril\n\nTweak mismatched types error\n\n- Change expected/found for type mismatches in `break`\n- Be more accurate when talking about diverging match arms\n- Tweak wording of function without a return value\n- Suggest calling bare functions when their return value can be coerced to the expected type\n- Give more parsing errors when encountering `foo(_, _, _)`\n\nFix #51767, fix #62677, fix #63136, cc #37384, cc #35241, cc #51669.", "tree": {"sha": "1bc4ff583c55ca814be7555426ed115adc51b08e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1bc4ff583c55ca814be7555426ed115adc51b08e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/52f9e80e5f4d67d8af4831a9e27a557b30b81761", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdTmB+CRBK7hj4Ov3rIwAAdHIIADnMfajiRLxQDPVFpH//q2/K\nbsY1j5aWSWOg7XzUaTMFe1AsgXpLac0Wdk65SuT0hxedzNwo9mYB/hKkyGHC+f6S\ny8yuhgvmkR7CONgbHxBKw44mLLDUupyRDd+n7G0Fv/ScE6UnItSikG3DhPoVCxdi\n6KMAgN61QFWd1tlVdvxP156jJfVUa7DeQOAuXmhVR0GHZzgNzL6e2KlOPDEm7Sgj\nrcTOUHGWjRCR5CPfCDmcvP/JVLyAilKWQdsy5LaoSlhVcMiMwdmxqyysg43mTgGZ\npaIWAJ2Ta8WG+FVX0LI/skj65Txy7QPFqEpWZ47T9RUbY06SNDfMhezsu6n+pSI=\n=kSpm\n-----END PGP SIGNATURE-----\n", "payload": "tree 1bc4ff583c55ca814be7555426ed115adc51b08e\nparent eb44561600a3f2edceae13d1395ca84d7a23dc17\nparent 45a5bc7619d19e58cbb1497f571e2ba987d1d53b\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1565417597 +0200\ncommitter GitHub <noreply@github.com> 1565417597 +0200\n\nRollup merge of #63337 - estebank:break-ee0308, r=Centril\n\nTweak mismatched types error\n\n- Change expected/found for type mismatches in `break`\n- Be more accurate when talking about diverging match arms\n- Tweak wording of function without a return value\n- Suggest calling bare functions when their return value can be coerced to the expected type\n- Give more parsing errors when encountering `foo(_, _, _)`\n\nFix #51767, fix #62677, fix #63136, cc #37384, cc #35241, cc #51669.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/52f9e80e5f4d67d8af4831a9e27a557b30b81761", "html_url": "https://github.com/rust-lang/rust/commit/52f9e80e5f4d67d8af4831a9e27a557b30b81761", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/52f9e80e5f4d67d8af4831a9e27a557b30b81761/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb44561600a3f2edceae13d1395ca84d7a23dc17", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb44561600a3f2edceae13d1395ca84d7a23dc17", "html_url": "https://github.com/rust-lang/rust/commit/eb44561600a3f2edceae13d1395ca84d7a23dc17"}, {"sha": "45a5bc7619d19e58cbb1497f571e2ba987d1d53b", "url": "https://api.github.com/repos/rust-lang/rust/commits/45a5bc7619d19e58cbb1497f571e2ba987d1d53b", "html_url": "https://github.com/rust-lang/rust/commit/45a5bc7619d19e58cbb1497f571e2ba987d1d53b"}], "stats": {"total": 810, "additions": 701, "deletions": 109}, "files": [{"sha": "b85738dd29a6d835255235d06e60be19bbb6341f", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52f9e80e5f4d67d8af4831a9e27a557b30b81761/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52f9e80e5f4d67d8af4831a9e27a557b30b81761/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=52f9e80e5f4d67d8af4831a9e27a557b30b81761", "patch": "@@ -287,7 +287,7 @@ impl<'hir> Map<'hir> {\n         self.definitions.def_index_to_hir_id(def_id.to_def_id().index)\n     }\n \n-    fn def_kind(&self, hir_id: HirId) -> Option<DefKind> {\n+    pub fn def_kind(&self, hir_id: HirId) -> Option<DefKind> {\n         let node = if let Some(node) = self.find(hir_id) {\n             node\n         } else {"}, {"sha": "2ffcd2c4ace7bc48d1533463bbf9cdee16239f0d", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 10, "deletions": 28, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/52f9e80e5f4d67d8af4831a9e27a557b30b81761/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52f9e80e5f4d67d8af4831a9e27a557b30b81761/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=52f9e80e5f4d67d8af4831a9e27a557b30b81761", "patch": "@@ -662,19 +662,22 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     }\n                 }\n                 _ => {\n+                    // `last_ty` can be `!`, `expected` will have better info when present.\n+                    let t = self.resolve_vars_if_possible(&match exp_found {\n+                        Some(ty::error::ExpectedFound { expected, .. }) => expected,\n+                        _ => last_ty,\n+                    });\n                     let msg = \"`match` arms have incompatible types\";\n                     err.span_label(cause.span, msg);\n                     if prior_arms.len() <= 4 {\n                         for sp in prior_arms {\n-                            err.span_label(*sp, format!(\n-                                \"this is found to be of type `{}`\",\n-                                self.resolve_vars_if_possible(&last_ty),\n-                            ));\n+                            err.span_label( *sp, format!(\"this is found to be of type `{}`\", t));\n                         }\n                     } else if let Some(sp) = prior_arms.last() {\n-                        err.span_label(*sp, format!(\n-                            \"this and all prior arms are found to be of type `{}`\", last_ty,\n-                        ));\n+                        err.span_label(\n+                            *sp,\n+                            format!(\"this and all prior arms are found to be of type `{}`\", t),\n+                        );\n                     }\n                 }\n             },\n@@ -1143,27 +1146,6 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 }\n                 (_, false, _) => {\n                     if let Some(exp_found) = exp_found {\n-                        let (def_id, ret_ty) = match exp_found.found.sty {\n-                            ty::FnDef(def, _) => {\n-                                (Some(def), Some(self.tcx.fn_sig(def).output()))\n-                            }\n-                            _ => (None, None),\n-                        };\n-\n-                        let exp_is_struct = match exp_found.expected.sty {\n-                            ty::Adt(def, _) => def.is_struct(),\n-                            _ => false,\n-                        };\n-\n-                        if let (Some(def_id), Some(ret_ty)) = (def_id, ret_ty) {\n-                            if exp_is_struct && &exp_found.expected == ret_ty.skip_binder() {\n-                                let message = format!(\n-                                    \"did you mean `{}(/* fields */)`?\",\n-                                    self.tcx.def_path_str(def_id)\n-                                );\n-                                diag.span_label(span, message);\n-                            }\n-                        }\n                         self.suggest_as_ref_where_appropriate(span, &exp_found, diag);\n                     }\n "}, {"sha": "9680f61d6990314f9a4424e80c0c543204931074", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/52f9e80e5f4d67d8af4831a9e27a557b30b81761/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52f9e80e5f4d67d8af4831a9e27a557b30b81761/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=52f9e80e5f4d67d8af4831a9e27a557b30b81761", "patch": "@@ -548,7 +548,23 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     coerce.coerce(self, &cause, e, e_ty);\n                 } else {\n                     assert!(e_ty.is_unit());\n-                    coerce.coerce_forced_unit(self, &cause, &mut |_| (), true);\n+                    let ty = coerce.expected_ty();\n+                    coerce.coerce_forced_unit(self, &cause, &mut |err| {\n+                        let val = match ty.sty {\n+                            ty::Bool => \"true\",\n+                            ty::Char => \"'a'\",\n+                            ty::Int(_) | ty::Uint(_) => \"42\",\n+                            ty::Float(_) => \"3.14159\",\n+                            ty::Error | ty::Never => return,\n+                            _ => \"value\",\n+                        };\n+                        let msg = \"give it a value of the expected type\";\n+                        let label = destination.label\n+                            .map(|l| format!(\" {}\", l.ident))\n+                            .unwrap_or_else(String::new);\n+                        let sugg = format!(\"break{} {}\", label, val);\n+                        err.span_suggestion(expr.span, msg, sugg, Applicability::HasPlaceholders);\n+                    }, false);\n                 }\n             } else {\n                 // If `ctxt.coerce` is `None`, we can just ignore"}, {"sha": "4fb28db6e94fa09c29530badc86613449f445f7b", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 108, "deletions": 1, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/52f9e80e5f4d67d8af4831a9e27a557b30b81761/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52f9e80e5f4d67d8af4831a9e27a557b30b81761/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=52f9e80e5f4d67d8af4831a9e27a557b30b81761", "patch": "@@ -3709,7 +3709,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             self.consider_hint_about_removing_semicolon(blk, expected_ty, err);\n                         }\n                         if let Some(fn_span) = fn_span {\n-                            err.span_label(fn_span, \"this function's body doesn't return\");\n+                            err.span_label(\n+                                fn_span,\n+                                \"implicitly returns `()` as its body has no tail or `return` \\\n+                                 expression\",\n+                            );\n                         }\n                     }, false);\n                 }\n@@ -3819,6 +3823,101 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         pointing_at_return_type\n     }\n \n+    /// When encountering an fn-like ctor that needs to unify with a value, check whether calling\n+    /// the ctor would successfully solve the type mismatch and if so, suggest it:\n+    /// ```\n+    /// fn foo(x: usize) -> usize { x }\n+    /// let x: usize = foo;  // suggest calling the `foo` function: `foo(42)`\n+    /// ```\n+    fn suggest_fn_call(\n+        &self,\n+        err: &mut DiagnosticBuilder<'tcx>,\n+        expr: &hir::Expr,\n+        expected: Ty<'tcx>,\n+        found: Ty<'tcx>,\n+    ) -> bool {\n+        match found.sty {\n+            ty::FnDef(..) | ty::FnPtr(_) => {}\n+            _ => return false,\n+        }\n+        let hir = self.tcx.hir();\n+\n+        let sig = found.fn_sig(self.tcx);\n+        let sig = self\n+            .replace_bound_vars_with_fresh_vars(expr.span, infer::FnCall, &sig)\n+            .0;\n+        let sig = self.normalize_associated_types_in(expr.span, &sig);\n+        if let Ok(_) = self.try_coerce(expr, sig.output(), expected, AllowTwoPhase::No) {\n+            let (mut sugg_call, applicability) = if sig.inputs().is_empty() {\n+                (String::new(), Applicability::MachineApplicable)\n+            } else {\n+                (\"...\".to_string(), Applicability::HasPlaceholders)\n+            };\n+            let mut msg = \"call this function\";\n+            if let ty::FnDef(def_id, ..) = found.sty {\n+                match hir.get_if_local(def_id) {\n+                    Some(Node::Item(hir::Item {\n+                        node: ItemKind::Fn(.., body_id),\n+                        ..\n+                    })) |\n+                    Some(Node::ImplItem(hir::ImplItem {\n+                        node: hir::ImplItemKind::Method(_, body_id),\n+                        ..\n+                    })) |\n+                    Some(Node::TraitItem(hir::TraitItem {\n+                        node: hir::TraitItemKind::Method(.., hir::TraitMethod::Provided(body_id)),\n+                        ..\n+                    })) => {\n+                        let body = hir.body(*body_id);\n+                        sugg_call = body.arguments.iter()\n+                            .map(|arg| match &arg.pat.node {\n+                                hir::PatKind::Binding(_, _, ident, None)\n+                                if ident.name != kw::SelfLower => ident.to_string(),\n+                                _ => \"_\".to_string(),\n+                            }).collect::<Vec<_>>().join(\", \");\n+                    }\n+                    Some(Node::Ctor(hir::VariantData::Tuple(fields, _))) => {\n+                        sugg_call = fields.iter().map(|_| \"_\").collect::<Vec<_>>().join(\", \");\n+                        match hir.as_local_hir_id(def_id).and_then(|hir_id| hir.def_kind(hir_id)) {\n+                            Some(hir::def::DefKind::Ctor(hir::def::CtorOf::Variant, _)) => {\n+                                msg = \"instantiate this tuple variant\";\n+                            }\n+                            Some(hir::def::DefKind::Ctor(hir::def::CtorOf::Struct, _)) => {\n+                                msg = \"instantiate this tuple struct\";\n+                            }\n+                            _ => {}\n+                        }\n+                    }\n+                    Some(Node::ForeignItem(hir::ForeignItem {\n+                        node: hir::ForeignItemKind::Fn(_, idents, _),\n+                        ..\n+                    })) |\n+                    Some(Node::TraitItem(hir::TraitItem {\n+                        node: hir::TraitItemKind::Method(.., hir::TraitMethod::Required(idents)),\n+                        ..\n+                    })) => sugg_call = idents.iter()\n+                            .map(|ident| if ident.name != kw::SelfLower {\n+                                ident.to_string()\n+                            } else {\n+                                \"_\".to_string()\n+                            }).collect::<Vec<_>>()\n+                            .join(\", \"),\n+                    _ => {}\n+                }\n+            };\n+            if let Ok(code) = self.sess().source_map().span_to_snippet(expr.span) {\n+                err.span_suggestion(\n+                    expr.span,\n+                    &format!(\"use parentheses to {}\", msg),\n+                    format!(\"{}({})\", code, sugg_call),\n+                    applicability,\n+                );\n+                return true;\n+            }\n+        }\n+        false\n+    }\n+\n     pub fn suggest_ref_or_into(\n         &self,\n         err: &mut DiagnosticBuilder<'tcx>,\n@@ -3833,6 +3932,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 suggestion,\n                 Applicability::MachineApplicable,\n             );\n+        } else if let (ty::FnDef(def_id, ..), true) = (\n+            &found.sty,\n+            self.suggest_fn_call(err, expr, expected, found),\n+        ) {\n+            if let Some(sp) = self.tcx.hir().span_if_local(*def_id) {\n+                let sp = self.sess().source_map().def_span(sp);\n+                err.span_label(sp, &format!(\"{} defined here\", found));\n+            }\n         } else if !self.check_for_cast(err, expr, found, expected) {\n             let is_struct_pat_shorthand_field = self.is_hir_id_from_struct_pattern_shorthand_field(\n                 expr.hir_id,"}, {"sha": "30e16592113b623a4b0d62d901b57b5234807979", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 50, "deletions": 20, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/52f9e80e5f4d67d8af4831a9e27a557b30b81761/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52f9e80e5f4d67d8af4831a9e27a557b30b81761/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=52f9e80e5f4d67d8af4831a9e27a557b30b81761", "patch": "@@ -2052,9 +2052,23 @@ impl<'a> Parser<'a> {\n                 while self.token != token::CloseDelim(token::Paren) {\n                     es.push(match self.parse_expr() {\n                         Ok(es) => es,\n-                        Err(err) => {\n+                        Err(mut err) => {\n                             // recover from parse error in tuple list\n-                            return Ok(self.recover_seq_parse_error(token::Paren, lo, Err(err)));\n+                            match self.token.kind {\n+                                token::Ident(name, false)\n+                                if name == kw::Underscore && self.look_ahead(1, |t| {\n+                                    t == &token::Comma\n+                                }) => {\n+                                    // Special-case handling of `Foo<(_, _, _)>`\n+                                    err.emit();\n+                                    let sp = self.token.span;\n+                                    self.bump();\n+                                    self.mk_expr(sp, ExprKind::Err, ThinVec::new())\n+                                }\n+                                _ => return Ok(\n+                                    self.recover_seq_parse_error(token::Paren, lo, Err(err)),\n+                                ),\n+                            }\n                         }\n                     });\n                     recovered = self.expect_one_of(\n@@ -2456,37 +2470,35 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parses `a.b` or `a(13)` or `a[4]` or just `a`.\n-    fn parse_dot_or_call_expr(&mut self,\n-                                  already_parsed_attrs: Option<ThinVec<Attribute>>)\n-                                  -> PResult<'a, P<Expr>> {\n+    fn parse_dot_or_call_expr(\n+        &mut self,\n+        already_parsed_attrs: Option<ThinVec<Attribute>>,\n+    ) -> PResult<'a, P<Expr>> {\n         let attrs = self.parse_or_use_outer_attributes(already_parsed_attrs)?;\n \n         let b = self.parse_bottom_expr();\n         let (span, b) = self.interpolated_or_expr_span(b)?;\n         self.parse_dot_or_call_expr_with(b, span, attrs)\n     }\n \n-    fn parse_dot_or_call_expr_with(&mut self,\n-                                       e0: P<Expr>,\n-                                       lo: Span,\n-                                       mut attrs: ThinVec<Attribute>)\n-                                       -> PResult<'a, P<Expr>> {\n+    fn parse_dot_or_call_expr_with(\n+        &mut self,\n+        e0: P<Expr>,\n+        lo: Span,\n+        mut attrs: ThinVec<Attribute>,\n+    ) -> PResult<'a, P<Expr>> {\n         // Stitch the list of outer attributes onto the return value.\n         // A little bit ugly, but the best way given the current code\n         // structure\n-        self.parse_dot_or_call_expr_with_(e0, lo)\n-        .map(|expr|\n+        self.parse_dot_or_call_expr_with_(e0, lo).map(|expr|\n             expr.map(|mut expr| {\n                 attrs.extend::<Vec<_>>(expr.attrs.into());\n                 expr.attrs = attrs;\n                 match expr.node {\n                     ExprKind::If(..) if !expr.attrs.is_empty() => {\n                         // Just point to the first attribute in there...\n                         let span = expr.attrs[0].span;\n-\n-                        self.span_err(span,\n-                            \"attributes are not yet allowed on `if` \\\n-                            expressions\");\n+                        self.span_err(span, \"attributes are not yet allowed on `if` expressions\");\n                     }\n                     _ => {}\n                 }\n@@ -2624,7 +2636,24 @@ impl<'a> Parser<'a> {\n     }\n \n     fn parse_paren_expr_seq(&mut self) -> PResult<'a, Vec<P<Expr>>> {\n-        self.parse_paren_comma_seq(|p| p.parse_expr()).map(|(r, _)| r)\n+        self.parse_paren_comma_seq(|p| {\n+            match p.parse_expr() {\n+                Ok(expr) => Ok(expr),\n+                Err(mut err) => match p.token.kind {\n+                    token::Ident(name, false)\n+                    if name == kw::Underscore && p.look_ahead(1, |t| {\n+                        t == &token::Comma\n+                    }) => {\n+                        // Special-case handling of `foo(_, _, _)`\n+                        err.emit();\n+                        let sp = p.token.span;\n+                        p.bump();\n+                        Ok(p.mk_expr(sp, ExprKind::Err, ThinVec::new()))\n+                    }\n+                    _ => Err(err),\n+                },\n+            }\n+        }).map(|(r, _)| r)\n     }\n \n     crate fn process_potential_macro_variable(&mut self) {\n@@ -2806,9 +2835,10 @@ impl<'a> Parser<'a> {\n     /// This parses an expression accounting for associativity and precedence of the operators in\n     /// the expression.\n     #[inline]\n-    fn parse_assoc_expr(&mut self,\n-                            already_parsed_attrs: Option<ThinVec<Attribute>>)\n-                            -> PResult<'a, P<Expr>> {\n+    fn parse_assoc_expr(\n+        &mut self,\n+        already_parsed_attrs: Option<ThinVec<Attribute>>,\n+    ) -> PResult<'a, P<Expr>> {\n         self.parse_assoc_expr_with(0, already_parsed_attrs.into())\n     }\n "}, {"sha": "f3f2d14584ef7c9d91ed0dff1eb4fb596f48f426", "filename": "src/test/ui/async-await/async-block-control-flow-static-semantics.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/52f9e80e5f4d67d8af4831a9e27a557b30b81761/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52f9e80e5f4d67d8af4831a9e27a557b30b81761/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr?ref=52f9e80e5f4d67d8af4831a9e27a557b30b81761", "patch": "@@ -16,7 +16,7 @@ error[E0308]: mismatched types\n LL | fn return_targets_async_block_not_fn() -> u8 {\n    |    ---------------------------------      ^^ expected u8, found ()\n    |    |\n-   |    this function's body doesn't return\n+   |    implicitly returns `()` as its body has no tail or `return` expression\n    |\n    = note: expected type `u8`\n               found type `()`\n@@ -57,7 +57,7 @@ error[E0308]: mismatched types\n LL | fn rethrow_targets_async_block_not_fn() -> Result<u8, MyErr> {\n    |    ----------------------------------      ^^^^^^^^^^^^^^^^^ expected enum `std::result::Result`, found ()\n    |    |\n-   |    this function's body doesn't return\n+   |    implicitly returns `()` as its body has no tail or `return` expression\n    |\n    = note: expected type `std::result::Result<u8, MyErr>`\n               found type `()`\n@@ -68,7 +68,7 @@ error[E0308]: mismatched types\n LL | fn rethrow_targets_async_block_not_async_fn() -> Result<u8, MyErr> {\n    |    ----------------------------------------      ^^^^^^^^^^^^^^^^^ expected enum `std::result::Result`, found ()\n    |    |\n-   |    this function's body doesn't return\n+   |    implicitly returns `()` as its body has no tail or `return` expression\n    |\n    = note: expected type `std::result::Result<u8, MyErr>`\n               found type `()`"}, {"sha": "f4984ca446309d83d88ba24dd63387b1efa5afaf", "filename": "src/test/ui/block-result/consider-removing-last-semi.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52f9e80e5f4d67d8af4831a9e27a557b30b81761/src%2Ftest%2Fui%2Fblock-result%2Fconsider-removing-last-semi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52f9e80e5f4d67d8af4831a9e27a557b30b81761/src%2Ftest%2Fui%2Fblock-result%2Fconsider-removing-last-semi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fconsider-removing-last-semi.stderr?ref=52f9e80e5f4d67d8af4831a9e27a557b30b81761", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL | fn f() -> String {\n    |    -      ^^^^^^ expected struct `std::string::String`, found ()\n    |    |\n-   |    this function's body doesn't return\n+   |    implicitly returns `()` as its body has no tail or `return` expression\n LL |     0u8;\n LL |     \"bla\".to_string();\n    |                      - help: consider removing this semicolon\n@@ -18,7 +18,7 @@ error[E0308]: mismatched types\n LL | fn g() -> String {\n    |    -      ^^^^^^ expected struct `std::string::String`, found ()\n    |    |\n-   |    this function's body doesn't return\n+   |    implicitly returns `()` as its body has no tail or `return` expression\n LL |     \"this won't work\".to_string();\n LL |     \"removeme\".to_string();\n    |                           - help: consider removing this semicolon"}, {"sha": "cfb42c601279a9abdc5304b4a3a2fa8806310ffa", "filename": "src/test/ui/block-result/issue-11714.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52f9e80e5f4d67d8af4831a9e27a557b30b81761/src%2Ftest%2Fui%2Fblock-result%2Fissue-11714.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52f9e80e5f4d67d8af4831a9e27a557b30b81761/src%2Ftest%2Fui%2Fblock-result%2Fissue-11714.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-11714.stderr?ref=52f9e80e5f4d67d8af4831a9e27a557b30b81761", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL | fn blah() -> i32 {\n    |    ----      ^^^ expected i32, found ()\n    |    |\n-   |    this function's body doesn't return\n+   |    implicitly returns `()` as its body has no tail or `return` expression\n ...\n LL |     ;\n    |     - help: consider removing this semicolon"}, {"sha": "f7cafab3d773bdc3250146dd61596ec369915721", "filename": "src/test/ui/block-result/issue-13428.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52f9e80e5f4d67d8af4831a9e27a557b30b81761/src%2Ftest%2Fui%2Fblock-result%2Fissue-13428.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52f9e80e5f4d67d8af4831a9e27a557b30b81761/src%2Ftest%2Fui%2Fblock-result%2Fissue-13428.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-13428.stderr?ref=52f9e80e5f4d67d8af4831a9e27a557b30b81761", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL | fn foo() -> String {\n    |    ---      ^^^^^^ expected struct `std::string::String`, found ()\n    |    |\n-   |    this function's body doesn't return\n+   |    implicitly returns `()` as its body has no tail or `return` expression\n ...\n LL |     ;\n    |     - help: consider removing this semicolon\n@@ -18,7 +18,7 @@ error[E0308]: mismatched types\n LL | fn bar() -> String {\n    |    ---      ^^^^^^ expected struct `std::string::String`, found ()\n    |    |\n-   |    this function's body doesn't return\n+   |    implicitly returns `()` as its body has no tail or `return` expression\n LL |     \"foobar\".to_string()\n LL |     ;\n    |     - help: consider removing this semicolon"}, {"sha": "955793e8586e7d221e2253632019a8caa08088f6", "filename": "src/test/ui/coercion/coercion-missing-tail-expected-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52f9e80e5f4d67d8af4831a9e27a557b30b81761/src%2Ftest%2Fui%2Fcoercion%2Fcoercion-missing-tail-expected-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52f9e80e5f4d67d8af4831a9e27a557b30b81761/src%2Ftest%2Fui%2Fcoercion%2Fcoercion-missing-tail-expected-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoercion-missing-tail-expected-type.stderr?ref=52f9e80e5f4d67d8af4831a9e27a557b30b81761", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL | fn plus_one(x: i32) -> i32 {\n    |    --------            ^^^ expected i32, found ()\n    |    |\n-   |    this function's body doesn't return\n+   |    implicitly returns `()` as its body has no tail or `return` expression\n LL |     x + 1;\n    |          - help: consider removing this semicolon\n    |\n@@ -17,7 +17,7 @@ error[E0308]: mismatched types\n LL | fn foo() -> Result<u8, u64> {\n    |    ---      ^^^^^^^^^^^^^^^ expected enum `std::result::Result`, found ()\n    |    |\n-   |    this function's body doesn't return\n+   |    implicitly returns `()` as its body has no tail or `return` expression\n LL |     Ok(1);\n    |          - help: consider removing this semicolon\n    |"}, {"sha": "7678984a518ba89bdc84ada86fef76bb10e00b41", "filename": "src/test/ui/issues/issue-27042.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/52f9e80e5f4d67d8af4831a9e27a557b30b81761/src%2Ftest%2Fui%2Fissues%2Fissue-27042.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52f9e80e5f4d67d8af4831a9e27a557b30b81761/src%2Ftest%2Fui%2Fissues%2Fissue-27042.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27042.stderr?ref=52f9e80e5f4d67d8af4831a9e27a557b30b81761", "patch": "@@ -12,10 +12,13 @@ error[E0308]: mismatched types\n   --> $DIR/issue-27042.rs:6:16\n    |\n LL |         loop { break };\n-   |                ^^^^^ expected (), found i32\n+   |                ^^^^^\n+   |                |\n+   |                expected i32, found ()\n+   |                help: give it a value of the expected type: `break 42`\n    |\n-   = note: expected type `()`\n-              found type `i32`\n+   = note: expected type `i32`\n+              found type `()`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-27042.rs:8:9"}, {"sha": "6256dc0c550226f3dfe774e26199cc437d02bc25", "filename": "src/test/ui/issues/issue-32323.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52f9e80e5f4d67d8af4831a9e27a557b30b81761/src%2Ftest%2Fui%2Fissues%2Fissue-32323.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52f9e80e5f4d67d8af4831a9e27a557b30b81761/src%2Ftest%2Fui%2Fissues%2Fissue-32323.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32323.stderr?ref=52f9e80e5f4d67d8af4831a9e27a557b30b81761", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL | pub fn f<'a, T: Tr<'a>>() -> <T as Tr<'a>>::Out {}\n    |        -                     ^^^^^^^^^^^^^^^^^^ expected associated type, found ()\n    |        |\n-   |        this function's body doesn't return\n+   |        implicitly returns `()` as its body has no tail or `return` expression\n    |\n    = note: expected type `<T as Tr<'a>>::Out`\n               found type `()`"}, {"sha": "4457d71cbb4a7b132df872e73bf31f5ba56cecf7", "filename": "src/test/ui/issues/issue-34334.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/52f9e80e5f4d67d8af4831a9e27a557b30b81761/src%2Ftest%2Fui%2Fissues%2Fissue-34334.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52f9e80e5f4d67d8af4831a9e27a557b30b81761/src%2Ftest%2Fui%2Fissues%2Fissue-34334.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34334.rs?ref=52f9e80e5f4d67d8af4831a9e27a557b30b81761", "patch": "@@ -5,6 +5,7 @@ fn main () {\n     //~| ERROR mismatched types\n     //~| ERROR invalid left-hand side expression\n     //~| ERROR expected expression, found reserved identifier `_`\n+    //~| ERROR expected expression, found reserved identifier `_`\n     let sr2: Vec<(u32, _, _)> = sr.iter().map(|(faction, th_sender, th_receiver)| {}).collect();\n     //~^ ERROR no method named `iter` found for type `()` in the current scope\n }"}, {"sha": "7f89caf92abe14a0ed945dbe611a50b7c7435328", "filename": "src/test/ui/issues/issue-34334.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/52f9e80e5f4d67d8af4831a9e27a557b30b81761/src%2Ftest%2Fui%2Fissues%2Fissue-34334.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52f9e80e5f4d67d8af4831a9e27a557b30b81761/src%2Ftest%2Fui%2Fissues%2Fissue-34334.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34334.stderr?ref=52f9e80e5f4d67d8af4831a9e27a557b30b81761", "patch": "@@ -4,6 +4,12 @@ error: expected expression, found reserved identifier `_`\n LL |     let sr: Vec<(u32, _, _) = vec![];\n    |                       ^ expected expression\n \n+error: expected expression, found reserved identifier `_`\n+  --> $DIR/issue-34334.rs:2:26\n+   |\n+LL |     let sr: Vec<(u32, _, _) = vec![];\n+   |                          ^ expected expression\n+\n error: expected one of `,` or `>`, found `=`\n   --> $DIR/issue-34334.rs:2:29\n    |\n@@ -36,12 +42,12 @@ LL |     let sr: Vec<(u32, _, _) = vec![];\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^ left-hand of expression not valid\n \n error[E0599]: no method named `iter` found for type `()` in the current scope\n-  --> $DIR/issue-34334.rs:8:36\n+  --> $DIR/issue-34334.rs:9:36\n    |\n LL |     let sr2: Vec<(u32, _, _)> = sr.iter().map(|(faction, th_sender, th_receiver)| {}).collect();\n    |                                    ^^^^\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 7 previous errors\n \n Some errors have detailed explanations: E0070, E0308, E0423, E0599.\n For more information about an error, try `rustc --explain E0070`."}, {"sha": "586146cbaa4ee9fc1eee9fce581fa7eaaa6a6616", "filename": "src/test/ui/issues/issue-35241.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/52f9e80e5f4d67d8af4831a9e27a557b30b81761/src%2Ftest%2Fui%2Fissues%2Fissue-35241.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52f9e80e5f4d67d8af4831a9e27a557b30b81761/src%2Ftest%2Fui%2Fissues%2Fissue-35241.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-35241.stderr?ref=52f9e80e5f4d67d8af4831a9e27a557b30b81761", "patch": "@@ -1,11 +1,14 @@\n error[E0308]: mismatched types\n   --> $DIR/issue-35241.rs:3:20\n    |\n+LL | struct Foo(u32);\n+   | ---------------- fn(u32) -> Foo {Foo} defined here\n+LL | \n LL | fn test() -> Foo { Foo }\n    |              ---   ^^^\n    |              |     |\n    |              |     expected struct `Foo`, found fn item\n-   |              |     did you mean `Foo(/* fields */)`?\n+   |              |     help: use parentheses to instantiate this tuple struct: `Foo(_)`\n    |              expected `Foo` because of return type\n    |\n    = note: expected type `Foo`"}, {"sha": "6d3e8b5ba2323a3c814be17ca77312c14107020d", "filename": "src/test/ui/issues/issue-43162.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52f9e80e5f4d67d8af4831a9e27a557b30b81761/src%2Ftest%2Fui%2Fissues%2Fissue-43162.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52f9e80e5f4d67d8af4831a9e27a557b30b81761/src%2Ftest%2Fui%2Fissues%2Fissue-43162.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43162.stderr?ref=52f9e80e5f4d67d8af4831a9e27a557b30b81761", "patch": "@@ -16,7 +16,7 @@ error[E0308]: mismatched types\n LL | fn foo() -> bool {\n    |    ---      ^^^^ expected bool, found ()\n    |    |\n-   |    this function's body doesn't return\n+   |    implicitly returns `()` as its body has no tail or `return` expression\n LL |\n LL |     break true;\n    |               - help: consider removing this semicolon"}, {"sha": "258ffe558e9ba283aef71e1330d709f3320ab936", "filename": "src/test/ui/issues/issue-44023.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52f9e80e5f4d67d8af4831a9e27a557b30b81761/src%2Ftest%2Fui%2Fissues%2Fissue-44023.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52f9e80e5f4d67d8af4831a9e27a557b30b81761/src%2Ftest%2Fui%2Fissues%2Fissue-44023.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-44023.stderr?ref=52f9e80e5f4d67d8af4831a9e27a557b30b81761", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL | fn \u10e1\u10d0\u10ed\u10db\u10d4\u10da\u10d0\u10d3_\u10d2\u10d4\u10db\u10e0\u10d8\u10d4\u10da\u10d8_\u10e1\u10d0\u10d3\u10d8\u10da\u10d8 ( ) -> isize {\n    |    ------------------------        ^^^^^ expected isize, found ()\n    |    |\n-   |    this function's body doesn't return\n+   |    implicitly returns `()` as its body has no tail or `return` expression\n    |\n    = note: expected type `isize`\n               found type `()`"}, {"sha": "ecf729e1032b15f63291a372b62e0264e35cbe57", "filename": "src/test/ui/issues/issue-6458-4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52f9e80e5f4d67d8af4831a9e27a557b30b81761/src%2Ftest%2Fui%2Fissues%2Fissue-6458-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52f9e80e5f4d67d8af4831a9e27a557b30b81761/src%2Ftest%2Fui%2Fissues%2Fissue-6458-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-6458-4.stderr?ref=52f9e80e5f4d67d8af4831a9e27a557b30b81761", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL | fn foo(b: bool) -> Result<bool,String> {\n    |    ---             ^^^^^^^^^^^^^^^^^^^ expected enum `std::result::Result`, found ()\n    |    |\n-   |    this function's body doesn't return\n+   |    implicitly returns `()` as its body has no tail or `return` expression\n LL |     Err(\"bar\".to_string());\n    |                           - help: consider removing this semicolon\n    |"}, {"sha": "4baf351f7eb2d52c31bca83c3fc433780a706f1a", "filename": "src/test/ui/liveness/liveness-forgot-ret.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52f9e80e5f4d67d8af4831a9e27a557b30b81761/src%2Ftest%2Fui%2Fliveness%2Fliveness-forgot-ret.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52f9e80e5f4d67d8af4831a9e27a557b30b81761/src%2Ftest%2Fui%2Fliveness%2Fliveness-forgot-ret.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-forgot-ret.stderr?ref=52f9e80e5f4d67d8af4831a9e27a557b30b81761", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL | fn f(a: isize) -> isize { if god_exists(a) { return 5; }; }\n    |    -              ^^^^^ expected isize, found ()\n    |    |\n-   |    this function's body doesn't return\n+   |    implicitly returns `()` as its body has no tail or `return` expression\n    |\n    = note: expected type `isize`\n               found type `()`"}, {"sha": "1f60560b45043928ddbd4cff2323fc71d2edcbeb", "filename": "src/test/ui/liveness/liveness-missing-ret2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52f9e80e5f4d67d8af4831a9e27a557b30b81761/src%2Ftest%2Fui%2Fliveness%2Fliveness-missing-ret2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52f9e80e5f4d67d8af4831a9e27a557b30b81761/src%2Ftest%2Fui%2Fliveness%2Fliveness-missing-ret2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-missing-ret2.stderr?ref=52f9e80e5f4d67d8af4831a9e27a557b30b81761", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL | fn f() -> isize {\n    |    -      ^^^^^ expected isize, found ()\n    |    |\n-   |    this function's body doesn't return\n+   |    implicitly returns `()` as its body has no tail or `return` expression\n    |\n    = note: expected type `isize`\n               found type `()`"}, {"sha": "2497d93daa494628cbd367d3247addec99c8ae49", "filename": "src/test/ui/liveness/liveness-return-last-stmt-semi.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/52f9e80e5f4d67d8af4831a9e27a557b30b81761/src%2Ftest%2Fui%2Fliveness%2Fliveness-return-last-stmt-semi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52f9e80e5f4d67d8af4831a9e27a557b30b81761/src%2Ftest%2Fui%2Fliveness%2Fliveness-return-last-stmt-semi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-return-last-stmt-semi.stderr?ref=52f9e80e5f4d67d8af4831a9e27a557b30b81761", "patch": "@@ -5,7 +5,7 @@ LL | macro_rules! test { () => { fn foo() -> i32 { 1; } } }\n    |                                ---      ^^^    - help: consider removing this semicolon\n    |                                |        |\n    |                                |        expected i32, found ()\n-   |                                this function's body doesn't return\n+   |                                implicitly returns `()` as its body has no tail or `return` expression\n ...\n LL |     test!();\n    |     -------- in this macro invocation\n@@ -19,7 +19,7 @@ error[E0308]: mismatched types\n LL | fn no_return() -> i32 {}\n    |    ---------      ^^^ expected i32, found ()\n    |    |\n-   |    this function's body doesn't return\n+   |    implicitly returns `()` as its body has no tail or `return` expression\n    |\n    = note: expected type `i32`\n               found type `()`\n@@ -30,7 +30,7 @@ error[E0308]: mismatched types\n LL | fn bar(x: u32) -> u32 {\n    |    ---            ^^^ expected u32, found ()\n    |    |\n-   |    this function's body doesn't return\n+   |    implicitly returns `()` as its body has no tail or `return` expression\n LL |     x * 2;\n    |          - help: consider removing this semicolon\n    |\n@@ -43,7 +43,7 @@ error[E0308]: mismatched types\n LL | fn baz(x: u64) -> u32 {\n    |    ---            ^^^ expected u32, found ()\n    |    |\n-   |    this function's body doesn't return\n+   |    implicitly returns `()` as its body has no tail or `return` expression\n    |\n    = note: expected type `u32`\n               found type `()`"}, {"sha": "fef5b5873068f3cf8e19bd3d7b30b4813ee8dee3", "filename": "src/test/ui/loops/loop-break-value.stderr", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/52f9e80e5f4d67d8af4831a9e27a557b30b81761/src%2Ftest%2Fui%2Floops%2Floop-break-value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52f9e80e5f4d67d8af4831a9e27a557b30b81761/src%2Ftest%2Fui%2Floops%2Floop-break-value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Floops%2Floop-break-value.stderr?ref=52f9e80e5f4d67d8af4831a9e27a557b30b81761", "patch": "@@ -90,10 +90,10 @@ error[E0308]: mismatched types\n   --> $DIR/loop-break-value.rs:4:31\n    |\n LL |     let val: ! = loop { break break; };\n-   |                               ^^^^^ expected (), found !\n+   |                               ^^^^^ expected !, found ()\n    |\n-   = note: expected type `()`\n-              found type `!`\n+   = note: expected type `!`\n+              found type `()`\n \n error[E0308]: mismatched types\n   --> $DIR/loop-break-value.rs:11:19\n@@ -153,10 +153,13 @@ error[E0308]: mismatched types\n   --> $DIR/loop-break-value.rs:90:9\n    |\n LL |         break;\n-   |         ^^^^^ expected (), found integer\n+   |         ^^^^^\n+   |         |\n+   |         expected integer, found ()\n+   |         help: give it a value of the expected type: `break value`\n    |\n-   = note: expected type `()`\n-              found type `{integer}`\n+   = note: expected type `{integer}`\n+              found type `()`\n \n error: aborting due to 16 previous errors\n "}, {"sha": "8b9468cacc1f9d5a11a049bf20d86e7b253abf2d", "filename": "src/test/ui/loops/loop-labeled-break-value.stderr", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/52f9e80e5f4d67d8af4831a9e27a557b30b81761/src%2Ftest%2Fui%2Floops%2Floop-labeled-break-value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52f9e80e5f4d67d8af4831a9e27a557b30b81761/src%2Ftest%2Fui%2Floops%2Floop-labeled-break-value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Floops%2Floop-labeled-break-value.stderr?ref=52f9e80e5f4d67d8af4831a9e27a557b30b81761", "patch": "@@ -2,28 +2,37 @@ error[E0308]: mismatched types\n   --> $DIR/loop-labeled-break-value.rs:3:29\n    |\n LL |         let _: i32 = loop { break };\n-   |                             ^^^^^ expected (), found i32\n+   |                             ^^^^^\n+   |                             |\n+   |                             expected i32, found ()\n+   |                             help: give it a value of the expected type: `break 42`\n    |\n-   = note: expected type `()`\n-              found type `i32`\n+   = note: expected type `i32`\n+              found type `()`\n \n error[E0308]: mismatched types\n   --> $DIR/loop-labeled-break-value.rs:6:37\n    |\n LL |         let _: i32 = 'inner: loop { break 'inner };\n-   |                                     ^^^^^^^^^^^^ expected (), found i32\n+   |                                     ^^^^^^^^^^^^\n+   |                                     |\n+   |                                     expected i32, found ()\n+   |                                     help: give it a value of the expected type: `break 'inner 42`\n    |\n-   = note: expected type `()`\n-              found type `i32`\n+   = note: expected type `i32`\n+              found type `()`\n \n error[E0308]: mismatched types\n   --> $DIR/loop-labeled-break-value.rs:9:45\n    |\n LL |         let _: i32 = 'inner2: loop { loop { break 'inner2 } };\n-   |                                             ^^^^^^^^^^^^^ expected (), found i32\n+   |                                             ^^^^^^^^^^^^^\n+   |                                             |\n+   |                                             expected i32, found ()\n+   |                                             help: give it a value of the expected type: `break 'inner2 42`\n    |\n-   = note: expected type `()`\n-              found type `i32`\n+   = note: expected type `i32`\n+              found type `()`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "3758bbf9f6f31c3be80d95f5dcf142e6671103d5", "filename": "src/test/ui/loops/loop-properly-diverging-2.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/52f9e80e5f4d67d8af4831a9e27a557b30b81761/src%2Ftest%2Fui%2Floops%2Floop-properly-diverging-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52f9e80e5f4d67d8af4831a9e27a557b30b81761/src%2Ftest%2Fui%2Floops%2Floop-properly-diverging-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Floops%2Floop-properly-diverging-2.stderr?ref=52f9e80e5f4d67d8af4831a9e27a557b30b81761", "patch": "@@ -2,10 +2,13 @@ error[E0308]: mismatched types\n   --> $DIR/loop-properly-diverging-2.rs:2:23\n    |\n LL |   let x: i32 = loop { break };\n-   |                       ^^^^^ expected (), found i32\n+   |                       ^^^^^\n+   |                       |\n+   |                       expected i32, found ()\n+   |                       help: give it a value of the expected type: `break 42`\n    |\n-   = note: expected type `()`\n-              found type `i32`\n+   = note: expected type `i32`\n+              found type `()`\n \n error: aborting due to previous error\n "}, {"sha": "8f54023305e839b76a847f21d5f28a1923fe024e", "filename": "src/test/ui/match/match-arm-resolving-to-never.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/52f9e80e5f4d67d8af4831a9e27a557b30b81761/src%2Ftest%2Fui%2Fmatch%2Fmatch-arm-resolving-to-never.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52f9e80e5f4d67d8af4831a9e27a557b30b81761/src%2Ftest%2Fui%2Fmatch%2Fmatch-arm-resolving-to-never.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-arm-resolving-to-never.rs?ref=52f9e80e5f4d67d8af4831a9e27a557b30b81761", "patch": "@@ -0,0 +1,19 @@\n+enum E {\n+    A,\n+    B,\n+    C,\n+    D,\n+    E,\n+    F,\n+}\n+\n+fn main() {\n+    match E::F {\n+        E::A => 1,\n+        E::B => 2,\n+        E::C => 3,\n+        E::D => 4,\n+        E::E => unimplemented!(\"\"),\n+        E::F => \"\", //~ ERROR match arms have incompatible types\n+    };\n+}"}, {"sha": "24ce97f86e76023476b602b1eb16b73c44e7f514", "filename": "src/test/ui/match/match-arm-resolving-to-never.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/52f9e80e5f4d67d8af4831a9e27a557b30b81761/src%2Ftest%2Fui%2Fmatch%2Fmatch-arm-resolving-to-never.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52f9e80e5f4d67d8af4831a9e27a557b30b81761/src%2Ftest%2Fui%2Fmatch%2Fmatch-arm-resolving-to-never.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-arm-resolving-to-never.stderr?ref=52f9e80e5f4d67d8af4831a9e27a557b30b81761", "patch": "@@ -0,0 +1,22 @@\n+error[E0308]: match arms have incompatible types\n+  --> $DIR/match-arm-resolving-to-never.rs:17:17\n+   |\n+LL | /     match E::F {\n+LL | |         E::A => 1,\n+LL | |         E::B => 2,\n+LL | |         E::C => 3,\n+LL | |         E::D => 4,\n+LL | |         E::E => unimplemented!(\"\"),\n+   | |                 ------------------ this and all prior arms are found to be of type `{integer}`\n+LL | |         E::F => \"\",\n+   | |                 ^^ expected integer, found reference\n+LL | |     };\n+   | |_____- `match` arms have incompatible types\n+   |\n+   = note: expected type `{integer}`\n+              found type `&'static str`\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "3c8ecdcfbcbe4679a7cf259bfdefe18b5242692f", "filename": "src/test/ui/missing/missing-return.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52f9e80e5f4d67d8af4831a9e27a557b30b81761/src%2Ftest%2Fui%2Fmissing%2Fmissing-return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52f9e80e5f4d67d8af4831a9e27a557b30b81761/src%2Ftest%2Fui%2Fmissing%2Fmissing-return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing%2Fmissing-return.stderr?ref=52f9e80e5f4d67d8af4831a9e27a557b30b81761", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL | fn f() -> isize { }\n    |    -      ^^^^^ expected isize, found ()\n    |    |\n-   |    this function's body doesn't return\n+   |    implicitly returns `()` as its body has no tail or `return` expression\n    |\n    = note: expected type `isize`\n               found type `()`"}, {"sha": "3d58b6fba0bafae14fe9ec43880108574cff5f47", "filename": "src/test/ui/parser/issue-62881.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52f9e80e5f4d67d8af4831a9e27a557b30b81761/src%2Ftest%2Fui%2Fparser%2Fissue-62881.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52f9e80e5f4d67d8af4831a9e27a557b30b81761/src%2Ftest%2Fui%2Fparser%2Fissue-62881.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-62881.stderr?ref=52f9e80e5f4d67d8af4831a9e27a557b30b81761", "patch": "@@ -19,7 +19,7 @@ error[E0308]: mismatched types\n LL | fn f() -> isize { fn f() -> isize {} pub f<\n    |                      -      ^^^^^ expected isize, found ()\n    |                      |\n-   |                      this function's body doesn't return\n+   |                      implicitly returns `()` as its body has no tail or `return` expression\n    |\n    = note: expected type `isize`\n               found type `()`"}, {"sha": "39ce980964b77f8b3349e8238222e459f2a657a4", "filename": "src/test/ui/parser/issue-62895.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52f9e80e5f4d67d8af4831a9e27a557b30b81761/src%2Ftest%2Fui%2Fparser%2Fissue-62895.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52f9e80e5f4d67d8af4831a9e27a557b30b81761/src%2Ftest%2Fui%2Fparser%2Fissue-62895.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-62895.stderr?ref=52f9e80e5f4d67d8af4831a9e27a557b30b81761", "patch": "@@ -38,7 +38,7 @@ error[E0308]: mismatched types\n LL | fn v() -> isize {\n    |    -      ^^^^^ expected isize, found ()\n    |    |\n-   |    this function's body doesn't return\n+   |    implicitly returns `()` as its body has no tail or `return` expression\n    |\n    = note: expected type `isize`\n               found type `()`"}, {"sha": "2538bbbf8067f6c4c450f808476224356e2883d4", "filename": "src/test/ui/resolve/privacy-enum-ctor.stderr", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/52f9e80e5f4d67d8af4831a9e27a557b30b81761/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52f9e80e5f4d67d8af4831a9e27a557b30b81761/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr?ref=52f9e80e5f4d67d8af4831a9e27a557b30b81761", "patch": "@@ -195,8 +195,14 @@ LL |     let _: Z = m::n::Z::Unit {};\n error[E0308]: mismatched types\n   --> $DIR/privacy-enum-ctor.rs:27:20\n    |\n+LL |             Fn(u8),\n+   |             ------ fn(u8) -> m::n::Z {m::n::Z::Fn} defined here\n+...\n LL |         let _: Z = Z::Fn;\n-   |                    ^^^^^ expected enum `m::n::Z`, found fn item\n+   |                    ^^^^^\n+   |                    |\n+   |                    expected enum `m::n::Z`, found fn item\n+   |                    help: use parentheses to instantiate this tuple variant: `Z::Fn(_)`\n    |\n    = note: expected type `m::n::Z`\n               found type `fn(u8) -> m::n::Z {m::n::Z::Fn}`\n@@ -219,8 +225,14 @@ LL |         let _ = Z::Unit;\n error[E0308]: mismatched types\n   --> $DIR/privacy-enum-ctor.rs:43:16\n    |\n+LL |         Fn(u8),\n+   |         ------ fn(u8) -> m::E {m::E::Fn} defined here\n+...\n LL |     let _: E = m::E::Fn;\n-   |                ^^^^^^^^ expected enum `m::E`, found fn item\n+   |                ^^^^^^^^\n+   |                |\n+   |                expected enum `m::E`, found fn item\n+   |                help: use parentheses to instantiate this tuple variant: `m::E::Fn(_)`\n    |\n    = note: expected type `m::E`\n               found type `fn(u8) -> m::E {m::E::Fn}`\n@@ -243,8 +255,14 @@ LL |     let _: E = m::E::Unit;\n error[E0308]: mismatched types\n   --> $DIR/privacy-enum-ctor.rs:51:16\n    |\n+LL |         Fn(u8),\n+   |         ------ fn(u8) -> m::E {m::E::Fn} defined here\n+...\n LL |     let _: E = E::Fn;\n-   |                ^^^^^ expected enum `m::E`, found fn item\n+   |                ^^^^^\n+   |                |\n+   |                expected enum `m::E`, found fn item\n+   |                help: use parentheses to instantiate this tuple variant: `E::Fn(_)`\n    |\n    = note: expected type `m::E`\n               found type `fn(u8) -> m::E {m::E::Fn}`"}, {"sha": "b3b879ef9acbef79523669ae7a2b9cef2422480a", "filename": "src/test/ui/substs-ppaux.normal.stderr", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/52f9e80e5f4d67d8af4831a9e27a557b30b81761/src%2Ftest%2Fui%2Fsubsts-ppaux.normal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52f9e80e5f4d67d8af4831a9e27a557b30b81761/src%2Ftest%2Fui%2Fsubsts-ppaux.normal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsubsts-ppaux.normal.stderr?ref=52f9e80e5f4d67d8af4831a9e27a557b30b81761", "patch": "@@ -1,35 +1,59 @@\n error[E0308]: mismatched types\n   --> $DIR/substs-ppaux.rs:16:17\n    |\n+LL |     fn bar<'a, T>() where T: 'a {}\n+   |     --------------------------- fn() {<i8 as Foo<'static, 'static, u8>>::bar::<'static, char>} defined here\n+...\n LL |     let x: () = <i8 as Foo<'static, 'static,  u8>>::bar::<'static, char>;\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected (), found fn item\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                 |\n+   |                 expected (), found fn item\n+   |                 help: use parentheses to call this function: `<i8 as Foo<'static, 'static,  u8>>::bar::<'static, char>()`\n    |\n    = note: expected type `()`\n               found type `fn() {<i8 as Foo<'static, 'static, u8>>::bar::<'static, char>}`\n \n error[E0308]: mismatched types\n   --> $DIR/substs-ppaux.rs:25:17\n    |\n+LL |     fn bar<'a, T>() where T: 'a {}\n+   |     --------------------------- fn() {<i8 as Foo<'static, 'static>>::bar::<'static, char>} defined here\n+...\n LL |     let x: () = <i8 as Foo<'static, 'static,  u32>>::bar::<'static, char>;\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected (), found fn item\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                 |\n+   |                 expected (), found fn item\n+   |                 help: use parentheses to call this function: `<i8 as Foo<'static, 'static,  u32>>::bar::<'static, char>()`\n    |\n    = note: expected type `()`\n               found type `fn() {<i8 as Foo<'static, 'static>>::bar::<'static, char>}`\n \n error[E0308]: mismatched types\n   --> $DIR/substs-ppaux.rs:33:17\n    |\n+LL |     fn baz() {}\n+   |     -------- fn() {<i8 as Foo<'static, 'static, u8>>::baz} defined here\n+...\n LL |     let x: () = <i8 as Foo<'static, 'static,  u8>>::baz;\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected (), found fn item\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                 |\n+   |                 expected (), found fn item\n+   |                 help: use parentheses to call this function: `<i8 as Foo<'static, 'static,  u8>>::baz()`\n    |\n    = note: expected type `()`\n               found type `fn() {<i8 as Foo<'static, 'static, u8>>::baz}`\n \n error[E0308]: mismatched types\n   --> $DIR/substs-ppaux.rs:41:17\n    |\n+LL | fn foo<'z>() where &'z (): Sized {\n+   | -------------------------------- fn() {foo::<'static>} defined here\n+...\n LL |     let x: () = foo::<'static>;\n-   |                 ^^^^^^^^^^^^^^ expected (), found fn item\n+   |                 ^^^^^^^^^^^^^^\n+   |                 |\n+   |                 expected (), found fn item\n+   |                 help: use parentheses to call this function: `foo::<'static>()`\n    |\n    = note: expected type `()`\n               found type `fn() {foo::<'static>}`"}, {"sha": "363018db232d88858766fc437c0e4d427b732071", "filename": "src/test/ui/substs-ppaux.verbose.stderr", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/52f9e80e5f4d67d8af4831a9e27a557b30b81761/src%2Ftest%2Fui%2Fsubsts-ppaux.verbose.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52f9e80e5f4d67d8af4831a9e27a557b30b81761/src%2Ftest%2Fui%2Fsubsts-ppaux.verbose.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsubsts-ppaux.verbose.stderr?ref=52f9e80e5f4d67d8af4831a9e27a557b30b81761", "patch": "@@ -1,35 +1,59 @@\n error[E0308]: mismatched types\n   --> $DIR/substs-ppaux.rs:16:17\n    |\n+LL |     fn bar<'a, T>() where T: 'a {}\n+   |     --------------------------- fn() {<i8 as Foo<ReStatic, ReStatic, u8>>::bar::<ReStatic, char>} defined here\n+...\n LL |     let x: () = <i8 as Foo<'static, 'static,  u8>>::bar::<'static, char>;\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected (), found fn item\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                 |\n+   |                 expected (), found fn item\n+   |                 help: use parentheses to call this function: `<i8 as Foo<'static, 'static,  u8>>::bar::<'static, char>()`\n    |\n    = note: expected type `()`\n               found type `fn() {<i8 as Foo<ReStatic, ReStatic, u8>>::bar::<ReStatic, char>}`\n \n error[E0308]: mismatched types\n   --> $DIR/substs-ppaux.rs:25:17\n    |\n+LL |     fn bar<'a, T>() where T: 'a {}\n+   |     --------------------------- fn() {<i8 as Foo<ReStatic, ReStatic>>::bar::<ReStatic, char>} defined here\n+...\n LL |     let x: () = <i8 as Foo<'static, 'static,  u32>>::bar::<'static, char>;\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected (), found fn item\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                 |\n+   |                 expected (), found fn item\n+   |                 help: use parentheses to call this function: `<i8 as Foo<'static, 'static,  u32>>::bar::<'static, char>()`\n    |\n    = note: expected type `()`\n               found type `fn() {<i8 as Foo<ReStatic, ReStatic>>::bar::<ReStatic, char>}`\n \n error[E0308]: mismatched types\n   --> $DIR/substs-ppaux.rs:33:17\n    |\n+LL |     fn baz() {}\n+   |     -------- fn() {<i8 as Foo<ReStatic, ReStatic, u8>>::baz} defined here\n+...\n LL |     let x: () = <i8 as Foo<'static, 'static,  u8>>::baz;\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected (), found fn item\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                 |\n+   |                 expected (), found fn item\n+   |                 help: use parentheses to call this function: `<i8 as Foo<'static, 'static,  u8>>::baz()`\n    |\n    = note: expected type `()`\n               found type `fn() {<i8 as Foo<ReStatic, ReStatic, u8>>::baz}`\n \n error[E0308]: mismatched types\n   --> $DIR/substs-ppaux.rs:41:17\n    |\n+LL | fn foo<'z>() where &'z (): Sized {\n+   | -------------------------------- fn() {foo::<ReStatic>} defined here\n+...\n LL |     let x: () = foo::<'static>;\n-   |                 ^^^^^^^^^^^^^^ expected (), found fn item\n+   |                 ^^^^^^^^^^^^^^\n+   |                 |\n+   |                 expected (), found fn item\n+   |                 help: use parentheses to call this function: `foo::<'static>()`\n    |\n    = note: expected type `()`\n               found type `fn() {foo::<ReStatic>}`"}, {"sha": "a8ea3faefe876a12a5659691b5a542a58e9b5c4a", "filename": "src/test/ui/suggestions/fn-or-tuple-struct-with-underscore-args.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/52f9e80e5f4d67d8af4831a9e27a557b30b81761/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-with-underscore-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52f9e80e5f4d67d8af4831a9e27a557b30b81761/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-with-underscore-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-with-underscore-args.rs?ref=52f9e80e5f4d67d8af4831a9e27a557b30b81761", "patch": "@@ -0,0 +1,19 @@\n+fn foo(a: usize, b: usize) -> usize { a }\n+\n+struct S(usize, usize);\n+\n+trait T {\n+    fn baz(x: usize, y: usize) -> usize { x }\n+}\n+\n+fn main() {\n+    let _: usize = foo(_, _);\n+    //~^ ERROR expected expression\n+    //~| ERROR expected expression\n+    let _: S = S(_, _);\n+    //~^ ERROR expected expression\n+    //~| ERROR expected expression\n+    let _: usize = T::baz(_, _);\n+    //~^ ERROR expected expression\n+    //~| ERROR expected expression\n+}"}, {"sha": "a6d1c4b859f2f73611763a074a60c07e72de991f", "filename": "src/test/ui/suggestions/fn-or-tuple-struct-with-underscore-args.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/52f9e80e5f4d67d8af4831a9e27a557b30b81761/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-with-underscore-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52f9e80e5f4d67d8af4831a9e27a557b30b81761/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-with-underscore-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-with-underscore-args.stderr?ref=52f9e80e5f4d67d8af4831a9e27a557b30b81761", "patch": "@@ -0,0 +1,38 @@\n+error: expected expression, found reserved identifier `_`\n+  --> $DIR/fn-or-tuple-struct-with-underscore-args.rs:10:24\n+   |\n+LL |     let _: usize = foo(_, _);\n+   |                        ^ expected expression\n+\n+error: expected expression, found reserved identifier `_`\n+  --> $DIR/fn-or-tuple-struct-with-underscore-args.rs:10:27\n+   |\n+LL |     let _: usize = foo(_, _);\n+   |                           ^ expected expression\n+\n+error: expected expression, found reserved identifier `_`\n+  --> $DIR/fn-or-tuple-struct-with-underscore-args.rs:13:18\n+   |\n+LL |     let _: S = S(_, _);\n+   |                  ^ expected expression\n+\n+error: expected expression, found reserved identifier `_`\n+  --> $DIR/fn-or-tuple-struct-with-underscore-args.rs:13:21\n+   |\n+LL |     let _: S = S(_, _);\n+   |                     ^ expected expression\n+\n+error: expected expression, found reserved identifier `_`\n+  --> $DIR/fn-or-tuple-struct-with-underscore-args.rs:16:27\n+   |\n+LL |     let _: usize = T::baz(_, _);\n+   |                           ^ expected expression\n+\n+error: expected expression, found reserved identifier `_`\n+  --> $DIR/fn-or-tuple-struct-with-underscore-args.rs:16:30\n+   |\n+LL |     let _: usize = T::baz(_, _);\n+   |                              ^ expected expression\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "9b6b10748172b6b3295ddd03b95b111a7f666b44", "filename": "src/test/ui/suggestions/fn-or-tuple-struct-without-args.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/52f9e80e5f4d67d8af4831a9e27a557b30b81761/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52f9e80e5f4d67d8af4831a9e27a557b30b81761/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.rs?ref=52f9e80e5f4d67d8af4831a9e27a557b30b81761", "patch": "@@ -0,0 +1,45 @@\n+fn foo(a: usize, b: usize) -> usize { a }\n+\n+fn bar() -> usize { 42 }\n+\n+struct S(usize, usize);\n+enum E {\n+    A(usize),\n+    B { a: usize },\n+}\n+struct V();\n+\n+trait T {\n+    fn baz(x: usize, y: usize) -> usize { x }\n+    fn bat(x: usize) -> usize { 42 }\n+    fn bax(x: usize) -> usize { 42 }\n+    fn bach(x: usize) -> usize;\n+    fn ban(&self) -> usize { 42 }\n+    fn bal(&self) -> usize;\n+}\n+\n+struct X;\n+\n+impl T for X {\n+    fn bach(x: usize) -> usize { 42 }\n+    fn bal(&self) -> usize { 42 }\n+}\n+\n+fn main() {\n+    let _: usize = foo; //~ ERROR mismatched types\n+    let _: S = S; //~ ERROR mismatched types\n+    let _: usize = bar; //~ ERROR mismatched types\n+    let _: V = V; //~ ERROR mismatched types\n+    let _: usize = T::baz; //~ ERROR mismatched types\n+    let _: usize = T::bat; //~ ERROR mismatched types\n+    let _: E = E::A; //~ ERROR mismatched types\n+    let _: E = E::B; //~ ERROR expected value, found struct variant `E::B`\n+    let _: usize = X::baz; //~ ERROR mismatched types\n+    let _: usize = X::bat; //~ ERROR mismatched types\n+    let _: usize = X::bax; //~ ERROR mismatched types\n+    let _: usize = X::bach; //~ ERROR mismatched types\n+    let _: usize = X::ban; //~ ERROR mismatched types\n+    let _: usize = X::bal; //~ ERROR mismatched types\n+    let _: usize = X.ban; //~ ERROR attempted to take value of method\n+    let _: usize = X.bal; //~ ERROR attempted to take value of method\n+}"}, {"sha": "0686b56f97ded5d4a5a9f9707c388b771d6f5dc7", "filename": "src/test/ui/suggestions/fn-or-tuple-struct-without-args.stderr", "status": "added", "additions": 220, "deletions": 0, "changes": 220, "blob_url": "https://github.com/rust-lang/rust/blob/52f9e80e5f4d67d8af4831a9e27a557b30b81761/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52f9e80e5f4d67d8af4831a9e27a557b30b81761/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.stderr?ref=52f9e80e5f4d67d8af4831a9e27a557b30b81761", "patch": "@@ -0,0 +1,220 @@\n+error[E0423]: expected value, found struct variant `E::B`\n+  --> $DIR/fn-or-tuple-struct-without-args.rs:36:16\n+   |\n+LL |     let _: E = E::B;\n+   |                ^^^-\n+   |                |  |\n+   |                |  help: a tuple variant with a similar name exists: `A`\n+   |                did you mean `E::B { /* fields */ }`?\n+\n+error[E0308]: mismatched types\n+  --> $DIR/fn-or-tuple-struct-without-args.rs:29:20\n+   |\n+LL | fn foo(a: usize, b: usize) -> usize { a }\n+   | ----------------------------------- fn(usize, usize) -> usize {foo} defined here\n+...\n+LL |     let _: usize = foo;\n+   |                    ^^^\n+   |                    |\n+   |                    expected usize, found fn item\n+   |                    help: use parentheses to call this function: `foo(a, b)`\n+   |\n+   = note: expected type `usize`\n+              found type `fn(usize, usize) -> usize {foo}`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/fn-or-tuple-struct-without-args.rs:30:16\n+   |\n+LL | struct S(usize, usize);\n+   | ----------------------- fn(usize, usize) -> S {S} defined here\n+...\n+LL |     let _: S = S;\n+   |                ^\n+   |                |\n+   |                expected struct `S`, found fn item\n+   |                help: use parentheses to instantiate this tuple struct: `S(_, _)`\n+   |\n+   = note: expected type `S`\n+              found type `fn(usize, usize) -> S {S}`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/fn-or-tuple-struct-without-args.rs:31:20\n+   |\n+LL | fn bar() -> usize { 42 }\n+   | ----------------- fn() -> usize {bar} defined here\n+...\n+LL |     let _: usize = bar;\n+   |                    ^^^\n+   |                    |\n+   |                    expected usize, found fn item\n+   |                    help: use parentheses to call this function: `bar()`\n+   |\n+   = note: expected type `usize`\n+              found type `fn() -> usize {bar}`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/fn-or-tuple-struct-without-args.rs:32:16\n+   |\n+LL | struct V();\n+   | ----------- fn() -> V {V} defined here\n+...\n+LL |     let _: V = V;\n+   |                ^\n+   |                |\n+   |                expected struct `V`, found fn item\n+   |                help: use parentheses to instantiate this tuple struct: `V()`\n+   |\n+   = note: expected type `V`\n+              found type `fn() -> V {V}`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/fn-or-tuple-struct-without-args.rs:33:20\n+   |\n+LL |     fn baz(x: usize, y: usize) -> usize { x }\n+   |     ----------------------------------- fn(usize, usize) -> usize {<_ as T>::baz} defined here\n+...\n+LL |     let _: usize = T::baz;\n+   |                    ^^^^^^\n+   |                    |\n+   |                    expected usize, found fn item\n+   |                    help: use parentheses to call this function: `T::baz(x, y)`\n+   |\n+   = note: expected type `usize`\n+              found type `fn(usize, usize) -> usize {<_ as T>::baz}`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/fn-or-tuple-struct-without-args.rs:34:20\n+   |\n+LL |     fn bat(x: usize) -> usize { 42 }\n+   |     ------------------------- fn(usize) -> usize {<_ as T>::bat} defined here\n+...\n+LL |     let _: usize = T::bat;\n+   |                    ^^^^^^\n+   |                    |\n+   |                    expected usize, found fn item\n+   |                    help: use parentheses to call this function: `T::bat(x)`\n+   |\n+   = note: expected type `usize`\n+              found type `fn(usize) -> usize {<_ as T>::bat}`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/fn-or-tuple-struct-without-args.rs:35:16\n+   |\n+LL |     A(usize),\n+   |     -------- fn(usize) -> E {E::A} defined here\n+...\n+LL |     let _: E = E::A;\n+   |                ^^^^\n+   |                |\n+   |                expected enum `E`, found fn item\n+   |                help: use parentheses to instantiate this tuple variant: `E::A(_)`\n+   |\n+   = note: expected type `E`\n+              found type `fn(usize) -> E {E::A}`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/fn-or-tuple-struct-without-args.rs:37:20\n+   |\n+LL |     fn baz(x: usize, y: usize) -> usize { x }\n+   |     ----------------------------------- fn(usize, usize) -> usize {<X as T>::baz} defined here\n+...\n+LL |     let _: usize = X::baz;\n+   |                    ^^^^^^\n+   |                    |\n+   |                    expected usize, found fn item\n+   |                    help: use parentheses to call this function: `X::baz(x, y)`\n+   |\n+   = note: expected type `usize`\n+              found type `fn(usize, usize) -> usize {<X as T>::baz}`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/fn-or-tuple-struct-without-args.rs:38:20\n+   |\n+LL |     fn bat(x: usize) -> usize { 42 }\n+   |     ------------------------- fn(usize) -> usize {<X as T>::bat} defined here\n+...\n+LL |     let _: usize = X::bat;\n+   |                    ^^^^^^\n+   |                    |\n+   |                    expected usize, found fn item\n+   |                    help: use parentheses to call this function: `X::bat(x)`\n+   |\n+   = note: expected type `usize`\n+              found type `fn(usize) -> usize {<X as T>::bat}`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/fn-or-tuple-struct-without-args.rs:39:20\n+   |\n+LL |     fn bax(x: usize) -> usize { 42 }\n+   |     ------------------------- fn(usize) -> usize {<X as T>::bax} defined here\n+...\n+LL |     let _: usize = X::bax;\n+   |                    ^^^^^^\n+   |                    |\n+   |                    expected usize, found fn item\n+   |                    help: use parentheses to call this function: `X::bax(x)`\n+   |\n+   = note: expected type `usize`\n+              found type `fn(usize) -> usize {<X as T>::bax}`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/fn-or-tuple-struct-without-args.rs:40:20\n+   |\n+LL |     fn bach(x: usize) -> usize;\n+   |     --------------------------- fn(usize) -> usize {<X as T>::bach} defined here\n+...\n+LL |     let _: usize = X::bach;\n+   |                    ^^^^^^^\n+   |                    |\n+   |                    expected usize, found fn item\n+   |                    help: use parentheses to call this function: `X::bach(x)`\n+   |\n+   = note: expected type `usize`\n+              found type `fn(usize) -> usize {<X as T>::bach}`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/fn-or-tuple-struct-without-args.rs:41:20\n+   |\n+LL |     fn ban(&self) -> usize { 42 }\n+   |     ---------------------- for<'r> fn(&'r X) -> usize {<X as T>::ban} defined here\n+...\n+LL |     let _: usize = X::ban;\n+   |                    ^^^^^^\n+   |                    |\n+   |                    expected usize, found fn item\n+   |                    help: use parentheses to call this function: `X::ban(_)`\n+   |\n+   = note: expected type `usize`\n+              found type `for<'r> fn(&'r X) -> usize {<X as T>::ban}`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/fn-or-tuple-struct-without-args.rs:42:20\n+   |\n+LL |     fn bal(&self) -> usize;\n+   |     ----------------------- for<'r> fn(&'r X) -> usize {<X as T>::bal} defined here\n+...\n+LL |     let _: usize = X::bal;\n+   |                    ^^^^^^\n+   |                    |\n+   |                    expected usize, found fn item\n+   |                    help: use parentheses to call this function: `X::bal(_)`\n+   |\n+   = note: expected type `usize`\n+              found type `for<'r> fn(&'r X) -> usize {<X as T>::bal}`\n+\n+error[E0615]: attempted to take value of method `ban` on type `X`\n+  --> $DIR/fn-or-tuple-struct-without-args.rs:43:22\n+   |\n+LL |     let _: usize = X.ban;\n+   |                      ^^^ help: use parentheses to call the method: `ban()`\n+\n+error[E0615]: attempted to take value of method `bal` on type `X`\n+  --> $DIR/fn-or-tuple-struct-without-args.rs:44:22\n+   |\n+LL |     let _: usize = X.bal;\n+   |                      ^^^ help: use parentheses to call the method: `bal()`\n+\n+error: aborting due to 16 previous errors\n+\n+Some errors have detailed explanations: E0308, E0423, E0615.\n+For more information about an error, try `rustc --explain E0308`."}]}