{"sha": "01794cc993a1f00ca2bc82498b256a88556a4e83", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxNzk0Y2M5OTNhMWYwMGNhMmJjODI0OThiMjU2YTg4NTU2YTRlODM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-11T10:41:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-11T10:41:23Z"}, "message": "auto merge of #11461 : alexcrichton/rust/rustdoc-fixes, r=brson\n\nSee the commits.", "tree": {"sha": "bead932f41e54315f35d4226885ebf44f0755018", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bead932f41e54315f35d4226885ebf44f0755018"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01794cc993a1f00ca2bc82498b256a88556a4e83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01794cc993a1f00ca2bc82498b256a88556a4e83", "html_url": "https://github.com/rust-lang/rust/commit/01794cc993a1f00ca2bc82498b256a88556a4e83", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01794cc993a1f00ca2bc82498b256a88556a4e83/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e57424b5cc78b83c69d3b7f8b5298aa6edf93164", "url": "https://api.github.com/repos/rust-lang/rust/commits/e57424b5cc78b83c69d3b7f8b5298aa6edf93164", "html_url": "https://github.com/rust-lang/rust/commit/e57424b5cc78b83c69d3b7f8b5298aa6edf93164"}, {"sha": "60880af47dca7f9d7aa1ccd263bb704a7b3649b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/60880af47dca7f9d7aa1ccd263bb704a7b3649b6", "html_url": "https://github.com/rust-lang/rust/commit/60880af47dca7f9d7aa1ccd263bb704a7b3649b6"}], "stats": {"total": 36, "additions": 30, "deletions": 6}, "files": [{"sha": "a42de4a4ca04aaf301cc35e19babffaa501e955a", "filename": "mk/docs.mk", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/01794cc993a1f00ca2bc82498b256a88556a4e83/mk%2Fdocs.mk", "raw_url": "https://github.com/rust-lang/rust/raw/01794cc993a1f00ca2bc82498b256a88556a4e83/mk%2Fdocs.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fdocs.mk?ref=01794cc993a1f00ca2bc82498b256a88556a4e83", "patch": "@@ -308,6 +308,7 @@ $(eval $(call libdoc,std,$(STDLIB_CRATE),$(CFG_BUILD)))\n $(eval $(call libdoc,extra,$(EXTRALIB_CRATE),$(CFG_BUILD)))\n $(eval $(call libdoc,native,$(LIBNATIVE_CRATE),$(CFG_BUILD)))\n $(eval $(call libdoc,green,$(LIBGREEN_CRATE),$(CFG_BUILD)))\n+$(eval $(call libdoc,rustuv,$(LIBRUSTUV_CRATE),$(CFG_BUILD)))\n \n $(eval $(call compiledoc,rustc,$(COMPILER_CRATE),$(CFG_BUILD)))\n $(eval $(call compiledoc,syntax,$(LIBSYNTAX_CRATE),$(CFG_BUILD)))"}, {"sha": "74f94ba00f562b150ef0e6af2d97689d3a6626ee", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/01794cc993a1f00ca2bc82498b256a88556a4e83/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01794cc993a1f00ca2bc82498b256a88556a4e83/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=01794cc993a1f00ca2bc82498b256a88556a4e83", "patch": "@@ -157,6 +157,7 @@ pub struct Cache {\n     priv stack: ~[~str],\n     priv parent_stack: ~[ast::NodeId],\n     priv search_index: ~[IndexItem],\n+    priv privmod: bool,\n }\n \n /// Helper struct to render all source code to HTML pages\n@@ -241,6 +242,7 @@ pub fn run(mut crate: clean::Crate, dst: Path) {\n         parent_stack: ~[],\n         search_index: ~[],\n         extern_locations: HashMap::new(),\n+        privmod: false,\n     };\n     cache.stack.push(crate.name.clone());\n     crate = cache.fold_crate(crate);\n@@ -455,6 +457,16 @@ impl<'a> SourceCollector<'a> {\n \n impl DocFolder for Cache {\n     fn fold_item(&mut self, item: clean::Item) -> Option<clean::Item> {\n+        // If this is a private module, we don't want it in the search index.\n+        let orig_privmod = match item.inner {\n+            clean::ModuleItem(..) => {\n+                let prev = self.privmod;\n+                self.privmod = prev || item.visibility != Some(ast::Public);\n+                prev\n+            }\n+            _ => self.privmod,\n+        };\n+\n         // Register any generics to their corresponding string. This is used\n         // when pretty-printing types\n         match item.inner {\n@@ -530,7 +542,7 @@ impl DocFolder for Cache {\n                     _ => Some((None, self.stack.as_slice()))\n                 };\n                 match parent {\n-                    Some((parent, path)) => {\n+                    Some((parent, path)) if !self.privmod => {\n                         self.search_index.push(IndexItem {\n                             ty: shortty(&item),\n                             name: s.to_owned(),\n@@ -539,7 +551,7 @@ impl DocFolder for Cache {\n                             parent: parent,\n                         });\n                     }\n-                    None => {}\n+                    Some(..) | None => {}\n                 }\n             }\n             None => {}\n@@ -612,8 +624,12 @@ impl DocFolder for Cache {\n                     // Private modules may survive the strip-private pass if\n                     // they contain impls for public types, but those will get\n                     // stripped here\n-                    clean::Item { inner: clean::ModuleItem(ref m), .. }\n-                            if m.items.len() == 0 => None,\n+                    clean::Item { inner: clean::ModuleItem(ref m),\n+                                  visibility, .. }\n+                            if (m.items.len() == 0 &&\n+                                item.doc_value().is_none()) ||\n+                               visibility != Some(ast::Public) => None,\n+\n                     i => Some(i),\n                 }\n             }\n@@ -622,6 +638,7 @@ impl DocFolder for Cache {\n \n         if pushed { self.stack.pop(); }\n         if parent_pushed { self.parent_stack.pop(); }\n+        self.privmod = orig_privmod;\n         return ret;\n     }\n }\n@@ -1186,7 +1203,7 @@ fn item_struct(w: &mut Writer, it: &clean::Item, s: &clean::Struct) {\n \n     document(w, it);\n     match s.struct_type {\n-        doctree::Plain => {\n+        doctree::Plain if s.fields.len() > 0 => {\n             write!(w, \"<h2 class='fields'>Fields</h2>\\n<table>\");\n             for field in s.fields.iter() {\n                 write!(w, \"<tr><td id='structfield.{name}'>\\"}, {"sha": "5940fc731c47228b7f3ad55bd3d28558138ee327", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/01794cc993a1f00ca2bc82498b256a88556a4e83/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01794cc993a1f00ca2bc82498b256a88556a4e83/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=01794cc993a1f00ca2bc82498b256a88556a4e83", "patch": "@@ -83,6 +83,7 @@ pub fn opts() -> ~[groups::OptGroup] {\n     use extra::getopts::groups::*;\n     ~[\n         optflag(\"h\", \"help\", \"show this help message\"),\n+        optflag(\"\", \"version\", \"print rustdoc's version\"),\n         optopt(\"r\", \"input-format\", \"the input type of the specified file\",\n                \"[rust|json]\"),\n         optopt(\"w\", \"output-format\", \"the output type to write\",\n@@ -119,6 +120,9 @@ pub fn main_args(args: &[~str]) -> int {\n     if matches.opt_present(\"h\") || matches.opt_present(\"help\") {\n         usage(args[0]);\n         return 0;\n+    } else if matches.opt_present(\"version\") {\n+        rustc::version(args[0]);\n+        return 0;\n     }\n \n     if matches.free.len() == 0 {"}, {"sha": "cd3d3ecddfec22da4f31fe4eac1e894c37462c8d", "filename": "src/librustdoc/passes.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/01794cc993a1f00ca2bc82498b256a88556a4e83/src%2Flibrustdoc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01794cc993a1f00ca2bc82498b256a88556a4e83/src%2Flibrustdoc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses.rs?ref=01794cc993a1f00ca2bc82498b256a88556a4e83", "patch": "@@ -136,7 +136,9 @@ impl<'a> fold::DocFolder for Stripper<'a> {\n             Some(i) => {\n                 match i.inner {\n                     // emptied modules/impls have no need to exist\n-                    clean::ModuleItem(ref m) if m.items.len() == 0 => None,\n+                    clean::ModuleItem(ref m)\n+                        if m.items.len() == 0 &&\n+                           i.doc_value().is_none() => None,\n                     clean::ImplItem(ref i) if i.methods.len() == 0 => None,\n                     _ => {\n                         self.retained.insert(i.id);"}]}