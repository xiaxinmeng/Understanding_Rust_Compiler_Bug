{"sha": "251c5cfffdc04e91bb421334a2a8117db66027f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1MWM1Y2ZmZmRjMDRlOTFiYjQyMTMzNGEyYTgxMTdkYjY2MDI3ZjY=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-07-16T06:53:02Z"}, "committer": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-07-16T06:53:02Z"}, "message": "rustup, also first time clippy was used on itself, which led to a small refactoring", "tree": {"sha": "55629ef7f79afd482333d99f2e9ee94ac4832094", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55629ef7f79afd482333d99f2e9ee94ac4832094"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/251c5cfffdc04e91bb421334a2a8117db66027f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/251c5cfffdc04e91bb421334a2a8117db66027f6", "html_url": "https://github.com/rust-lang/rust/commit/251c5cfffdc04e91bb421334a2a8117db66027f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/251c5cfffdc04e91bb421334a2a8117db66027f6/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad3d36dc7259fd49f5e6f57af88292b830f41073", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad3d36dc7259fd49f5e6f57af88292b830f41073", "html_url": "https://github.com/rust-lang/rust/commit/ad3d36dc7259fd49f5e6f57af88292b830f41073"}], "stats": {"total": 44, "additions": 33, "deletions": 11}, "files": [{"sha": "87339f464646b0f40d8ce80fa4738f918c7cd498", "filename": "README.md", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/251c5cfffdc04e91bb421334a2a8117db66027f6/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/251c5cfffdc04e91bb421334a2a8117db66027f6/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=251c5cfffdc04e91bb421334a2a8117db66027f6", "patch": "@@ -86,5 +86,12 @@ You can add options  to `allow`/`warn`/`deny`:\n \n *`deny` produces error instead of warnings*\n \n+To have cargo compile your crate with clippy without needing `#![plugin(clippy)]` \n+in your code, you can use:\n+\n+```\n+cargo rustc -- -L /path/to/clippy_so -Z extra-plugins=clippy\n+```\n+\n ##License\n Licensed under [MPL](https://www.mozilla.org/MPL/2.0/). If you're having issues with the license, let me know and I'll try to change it to something more permissive."}, {"sha": "17dac5930c41a9e2694e6babd96e3413c7288f5a", "filename": "src/eta_reduction.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/251c5cfffdc04e91bb421334a2a8117db66027f6/src%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/251c5cfffdc04e91bb421334a2a8117db66027f6/src%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feta_reduction.rs?ref=251c5cfffdc04e91bb421334a2a8117db66027f6", "patch": "@@ -18,7 +18,7 @@ impl LintPass for EtaPass {\n \n     fn check_expr(&mut self, cx: &Context, expr: &Expr) {\n         if let ExprClosure(_, ref decl, ref blk) = expr.node {\n-            if blk.stmts.len() != 0 {\n+            if !blk.stmts.is_empty() {\n                 // || {foo(); bar()}; can't be reduced here\n                 return;\n             }"}, {"sha": "35e11dfdcb9377ef0bdda64c6562b64d2a20186a", "filename": "src/len_zero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/251c5cfffdc04e91bb421334a2a8117db66027f6/src%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/251c5cfffdc04e91bb421334a2a8117db66027f6/src%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flen_zero.rs?ref=251c5cfffdc04e91bb421334a2a8117db66027f6", "patch": "@@ -5,7 +5,7 @@ use std::cell::RefCell;\n use syntax::ptr::P;\n use rustc::lint::{Context, LintPass, LintArray, Lint};\n use rustc::util::nodemap::DefIdMap;\n-use rustc::middle::ty::{self, TypeVariants, mt, MethodTraitItemId, ImplOrTraitItemId};\n+use rustc::middle::ty::{self, TypeVariants, TypeAndMut, MethodTraitItemId, ImplOrTraitItemId};\n use rustc::middle::def::{DefTy, DefStruct, DefTrait};\n use syntax::codemap::{Span, Spanned};\n use syntax::ast::*;"}, {"sha": "da2df2cc82078e5c75fc9a629afa685ffe95a410", "filename": "src/misc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/251c5cfffdc04e91bb421334a2a8117db66027f6/src%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/251c5cfffdc04e91bb421334a2a8117db66027f6/src%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmisc.rs?ref=251c5cfffdc04e91bb421334a2a8117db66027f6", "patch": "@@ -36,8 +36,8 @@ impl LintPass for MiscPass {\n             if arms.len() == 2 {\n                 if arms[0].guard.is_none() && arms[1].pats.len() == 1 {\n                     match arms[1].body.node {\n-                        ExprTup(ref v) if v.len() == 0 && arms[1].guard.is_none() => (),\n-                        ExprBlock(ref b) if b.stmts.len() == 0 && arms[1].guard.is_none() => (),\n+                        ExprTup(ref v) if v.is_empty() && arms[1].guard.is_none() => (),\n+                        ExprBlock(ref b) if b.stmts.is_empty() && arms[1].guard.is_none() => (),\n                          _ => return\n                     }\n                     // In some cases, an exhaustive match is preferred to catch situations when"}, {"sha": "cfa040ddb049baf0a4f710297e202ad0383e2b80", "filename": "src/mut_mut.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/251c5cfffdc04e91bb421334a2a8117db66027f6/src%2Fmut_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/251c5cfffdc04e91bb421334a2a8117db66027f6/src%2Fmut_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmut_mut.rs?ref=251c5cfffdc04e91bb421334a2a8117db66027f6", "patch": "@@ -1,7 +1,7 @@\n use syntax::ptr::P;\n use syntax::ast::*;\n use rustc::lint::{Context, LintPass, LintArray, Lint};\n-use rustc::middle::ty::{TypeVariants, mt, TyRef};\n+use rustc::middle::ty::{TypeVariants, TypeAndMut, TyRef};\n use syntax::codemap::{BytePos, ExpnInfo, Span};\n use utils::in_macro;\n \n@@ -42,7 +42,7 @@ fn check_expr_expd(cx: &Context, expr: &Expr, info: Option<&ExpnInfo>) {\n \t\t\tcx.span_lint(MUT_MUT, expr.span, \n \t\t\t\t\"Generally you want to avoid &mut &mut _ if possible.\")\n \t\t}).unwrap_or_else(|| {\n-\t\t\tif let TyRef(_, mt{ty: _, mutbl: MutMutable}) = \n+\t\t\tif let TyRef(_, TypeAndMut{ty: _, mutbl: MutMutable}) = \n \t\t\t\t\tcx.tcx.expr_ty(e).sty {\n \t\t\t\tcx.span_lint(MUT_MUT, expr.span,\n \t\t\t\t\t\"This expression mutably borrows a mutable reference. \\"}, {"sha": "9b52771d8af2519b987b56c788d447a526308423", "filename": "src/needless_bool.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/251c5cfffdc04e91bb421334a2a8117db66027f6/src%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/251c5cfffdc04e91bb421334a2a8117db66027f6/src%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fneedless_bool.rs?ref=251c5cfffdc04e91bb421334a2a8117db66027f6", "patch": "@@ -10,6 +10,7 @@ use syntax::ast::*;\n use syntax::ast_util::{is_comparison_binop, binop_to_string};\n use syntax::ptr::P;\n use syntax::codemap::Span;\n+use utils::de_p;\n \n declare_lint! {\n     pub NEEDLESS_BOOL,\n@@ -28,18 +29,28 @@ impl LintPass for NeedlessBool {\n     fn check_expr(&mut self, cx: &Context, e: &Expr) {\n         if let ExprIf(_, ref then_block, Option::Some(ref else_expr)) = e.node {\n \t\t\tmatch (fetch_bool_block(then_block), fetch_bool_expr(else_expr)) {\n-\t\t\t\t(Option::Some(true), Option::Some(true)) => { cx.span_lint(NEEDLESS_BOOL, e.span, \"your if-then-else expression will always return true\"); },\n-\t\t\t\t(Option::Some(true), Option::Some(false)) => { cx.span_lint(NEEDLESS_BOOL, e.span, \"you can reduce your if-statement to its predicate\"); },\n-\t\t\t\t(Option::Some(false), Option::Some(true)) => { cx.span_lint(NEEDLESS_BOOL, e.span, \"you can reduce your if-statement to '!' + your predicate\"); },\n-\t\t\t\t(Option::Some(false), Option::Some(false)) => { cx.span_lint(NEEDLESS_BOOL, e.span, \"your if-then-else expression will always return false\"); },\n+\t\t\t\t(Option::Some(true), Option::Some(true)) => { \n+\t\t\t\t\tcx.span_lint(NEEDLESS_BOOL, e.span, \n+\t\t\t\t\t\t\"your if-then-else expression will always return true\"); },\n+\t\t\t\t(Option::Some(true), Option::Some(false)) => { \n+\t\t\t\t\tcx.span_lint(NEEDLESS_BOOL, e.span, \n+\t\t\t\t\t\t\"you can reduce your if-statement to its predicate\"); },\n+\t\t\t\t(Option::Some(false), Option::Some(true)) => { \n+\t\t\t\t\tcx.span_lint(NEEDLESS_BOOL, e.span, \n+\t\t\t\t\t\t\"you can reduce your if-statement to '!' + your predicate\"); },\n+\t\t\t\t(Option::Some(false), Option::Some(false)) => { \n+\t\t\t\t\tcx.span_lint(NEEDLESS_BOOL, e.span, \n+\t\t\t\t\t\t\"your if-then-else expression will always return false\"); },\n \t\t\t\t_ => ()\n \t\t\t}\n \t\t}\n     }\n }\n \n fn fetch_bool_block(block: &Block) -> Option<bool> {\n-\tif block.stmts.is_empty() { block.expr.as_ref().and_then(|e| fetch_bool_expr(e)) } else { Option::None }\n+\tif block.stmts.is_empty() { \n+\t\tblock.expr.as_ref().map(de_p).and_then(fetch_bool_expr)\n+\t} else { Option::None }\n }\n \t\n fn fetch_bool_expr(expr: &Expr) -> Option<bool> {"}, {"sha": "065c20717a1122dc9f654c1135c630af785b6738", "filename": "src/utils.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/251c5cfffdc04e91bb421334a2a8117db66027f6/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/251c5cfffdc04e91bb421334a2a8117db66027f6/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=251c5cfffdc04e91bb421334a2a8117db66027f6", "patch": "@@ -1,6 +1,7 @@\n use rustc::lint::Context;\n use syntax::ast::{DefId, Name, Path};\n use syntax::codemap::{ExpnInfo, Span};\n+use syntax::ptr::P;\n use rustc::middle::ty;\n use std::borrow::{Cow, IntoCow};\n use std::convert::From;\n@@ -48,3 +49,6 @@ pub fn match_path(path: &Path, segments: &[&str]) -> bool {\n pub fn snippet<'a>(cx: &Context, span: Span, default: &'a str) -> Cow<'a, str> {\n \tcx.sess().codemap().span_to_snippet(span).map(From::from).unwrap_or(Cow::Borrowed(default))\n }\n+\n+/// dereference a P<T> and return a ref on the result\n+pub fn de_p<T>(p: &P<T>) -> &T { &*p }"}]}