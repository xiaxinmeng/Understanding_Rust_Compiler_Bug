{"sha": "93a75de18ecb8c52b61432f355458ad14e4bba69", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzYTc1ZGUxOGVjYjhjNTJiNjE0MzJmMzU1NDU4YWQxNGU0YmJhNjk=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2017-12-11T01:01:00Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2017-12-11T02:48:17Z"}, "message": "Print command line options in alphabetical order", "tree": {"sha": "a4e0d183996e8a73be3d44b130dbb3f6eeeb4f97", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a4e0d183996e8a73be3d44b130dbb3f6eeeb4f97"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/93a75de18ecb8c52b61432f355458ad14e4bba69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/93a75de18ecb8c52b61432f355458ad14e4bba69", "html_url": "https://github.com/rust-lang/rust/commit/93a75de18ecb8c52b61432f355458ad14e4bba69", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/93a75de18ecb8c52b61432f355458ad14e4bba69/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e982c66a0ba9f04af745bbf1b70bf43d8596403", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e982c66a0ba9f04af745bbf1b70bf43d8596403", "html_url": "https://github.com/rust-lang/rust/commit/1e982c66a0ba9f04af745bbf1b70bf43d8596403"}], "stats": {"total": 56, "additions": 28, "deletions": 28}, "files": [{"sha": "4eb1deb2e74a271738421b94d21f656279386653", "filename": "src/bin/rustfmt.rs", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/93a75de18ecb8c52b61432f355458ad14e4bba69/src%2Fbin%2Frustfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93a75de18ecb8c52b61432f355458ad14e4bba69/src%2Fbin%2Frustfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Frustfmt.rs?ref=93a75de18ecb8c52b61432f355458ad14e4bba69", "patch": "@@ -136,38 +136,24 @@ fn match_cli_path_or_file(\n fn make_opts() -> Options {\n     let mut opts = Options::new();\n \n-    opts.optflag(\"h\", \"help\", \"Show this message\");\n-    opts.optflag(\"V\", \"version\", \"Show version information\");\n-    opts.optflag(\"v\", \"verbose\", \"Print verbose output\");\n-    opts.optflag(\"\", \"skip-children\", \"Don't reformat child modules\");\n-    opts.optflag(\n+    // Sorted in alphabetical order.\n+    opts.optopt(\n         \"\",\n-        \"unstable-features\",\n-        \"Enables unstable features. Only available on nightly channel\",\n+        \"color\",\n+        \"Use colored output (if supported)\",\n+        \"[always|never|auto]\",\n     );\n     opts.optflag(\n         \"\",\n         \"config-help\",\n         \"Show details of rustfmt configuration options\",\n     );\n-    opts.optflag(\n-        \"\",\n-        \"error-on-unformatted\",\n-        \"Error if unable to get comments or string literals within max_width, \\\n-         or they are left with trailing whitespaces\",\n-    );\n-\n-    opts.optopt(\n-        \"\",\n-        \"write-mode\",\n-        \"How to write output (not usable when piping from stdin)\",\n-        \"[replace|overwrite|display|plain|diff|coverage|checkstyle]\",\n-    );\n     opts.optopt(\n         \"\",\n-        \"color\",\n-        \"Use colored output (if supported)\",\n-        \"[always|never|auto]\",\n+        \"config-path\",\n+        \"Recursively searches the given path for the rustfmt.toml config file. If not \\\n+         found reverts to the input file path\",\n+        \"[Path for the configuration file]\",\n     );\n     opts.optopt(\n         \"\",\n@@ -181,19 +167,33 @@ fn make_opts() -> Options {\n         \"Dumps configuration options that were checked during formatting to a file.\",\n         \"PATH\",\n     );\n-    opts.optopt(\n+    opts.optflag(\n         \"\",\n-        \"config-path\",\n-        \"Recursively searches the given path for the rustfmt.toml config file. If not \\\n-         found reverts to the input file path\",\n-        \"[Path for the configuration file]\",\n+        \"error-on-unformatted\",\n+        \"Error if unable to get comments or string literals within max_width, \\\n+         or they are left with trailing whitespaces\",\n     );\n     opts.optopt(\n         \"\",\n         \"file-lines\",\n         \"Format specified line ranges. See README for more detail on the JSON format.\",\n         \"JSON\",\n     );\n+    opts.optflag(\"h\", \"help\", \"Show this message\");\n+    opts.optflag(\"\", \"skip-children\", \"Don't reformat child modules\");\n+    opts.optflag(\n+        \"\",\n+        \"unstable-features\",\n+        \"Enables unstable features. Only available on nightly channel\",\n+    );\n+    opts.optflag(\"v\", \"verbose\", \"Print verbose output\");\n+    opts.optflag(\"V\", \"version\", \"Show version information\");\n+    opts.optopt(\n+        \"\",\n+        \"write-mode\",\n+        \"How to write output (not usable when piping from stdin)\",\n+        \"[replace|overwrite|display|plain|diff|coverage|checkstyle]\",\n+    );\n \n     opts\n }"}]}