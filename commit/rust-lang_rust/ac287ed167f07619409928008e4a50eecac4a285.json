{"sha": "ac287ed167f07619409928008e4a50eecac4a285", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjMjg3ZWQxNjdmMDc2MTk0MDk5MjgwMDhlNGE1MGVlY2FjNGEyODU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-09T13:28:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-09T13:28:15Z"}, "message": "Auto merge of #50546 - kennytm:rollup, r=kennytm\n\nRollup of 11 pull requests\n\nSuccessful merges:\n\n - #49988 (Mention Result<!, E> in never docs.)\n - #50148 (turn `ManuallyDrop::new` into a constant function)\n - #50456 (Update the Cargo submodule)\n - #50460 (Make `String::new()` const)\n - #50464 (Remove some transmutes)\n - #50505 (Added regression function match value test)\n - #50511 (Add some explanations for #[must_use])\n - #50525 (Optimize string handling in lit_token().)\n - #50527 (Cleanup a `use` in a raw_vec test)\n - #50539 (Add more logarithm constants)\n - #49523 (Update RELEASES.md for 1.26.0)\n\nFailed merges:", "tree": {"sha": "af5a99bdfb479ee083a98e8f13e5dab963735b75", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af5a99bdfb479ee083a98e8f13e5dab963735b75"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac287ed167f07619409928008e4a50eecac4a285", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac287ed167f07619409928008e4a50eecac4a285", "html_url": "https://github.com/rust-lang/rust/commit/ac287ed167f07619409928008e4a50eecac4a285", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac287ed167f07619409928008e4a50eecac4a285/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ff4b42064b374bb62043f7729f84b6d979c7667", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ff4b42064b374bb62043f7729f84b6d979c7667", "html_url": "https://github.com/rust-lang/rust/commit/8ff4b42064b374bb62043f7729f84b6d979c7667"}, {"sha": "99cd9a9f401de3bf2f8c44f9e61bc505cd663a18", "url": "https://api.github.com/repos/rust-lang/rust/commits/99cd9a9f401de3bf2f8c44f9e61bc505cd663a18", "html_url": "https://github.com/rust-lang/rust/commit/99cd9a9f401de3bf2f8c44f9e61bc505cd663a18"}], "stats": {"total": 385, "additions": 354, "deletions": 31}, "files": [{"sha": "26dd5a5c7f6376b70690d58b259311b048078672", "filename": "RELEASES.md", "status": "modified", "additions": 206, "deletions": 0, "changes": 206, "blob_url": "https://github.com/rust-lang/rust/blob/ac287ed167f07619409928008e4a50eecac4a285/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/ac287ed167f07619409928008e4a50eecac4a285/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=ac287ed167f07619409928008e4a50eecac4a285", "patch": "@@ -1,3 +1,209 @@\n+Version 1.26.0 (2018-05-10)\n+==========================\n+\n+Language\n+--------\n+- [Closures now implement `Copy` and/or `Clone` if all captured variables\n+  implement either or both traits.][49299]\n+- [The inclusive range syntax e.g. `for x in 0..=10` is now stable.][47813]\n+- [Stablise `'_`. The underscore lifetime can be used anywhere where a\n+  lifetime can be elided.][49458]\n+- [`impl Trait` is now stable allowing you to have abstract types in returns\n+   or in function parameters.][49255] e.g. `fn foo() -> impl Iterator<Item=u8>` or\n+  `fn open(path: impl AsRef<Path>)`.\n+- [Pattern matching will now automatically apply dereferences.][49394]\n+- [128-bit integers in the form of `u128` and `i128` are now stable.][49101]\n+- [`main` can now return `Result<(), E: Debug>`][49162] in addition to `()`.\n+- [A lot of operations are now available in a const context.][46882] E.g. You\n+  can now index into constant arrays, reference and dereference into constants,\n+  and use Tuple struct constructors.\n+- [Fixed entry slice patterns are now stable.][48516] e.g.\n+  ```rust\n+  let points = [1, 2, 3, 4];\n+  match points {\n+      [1, 2, 3, 4] => println!(\"All points were sequential.\"),\n+      _ => println!(\"Not all points were sequential.\"),\n+  }\n+  ```\n+\n+\n+Compiler\n+--------\n+- [LLD is now used as the default linker for `wasm32-unknown-unknown`.][48125]\n+- [Fixed exponential projection complexity on nested types.][48296]\n+  This can provide up to a ~12% reduction in compile times for certain crates.\n+- [Added the `--remap-path-prefix` option to rustc.][48359] Allowing you\n+  to remap path prefixes outputted by the compiler.\n+- [Added `powerpc-unknown-netbsd` target.][48281]\n+\n+Libraries\n+---------\n+- [Implemented `From<u16> for usize` & `From<{u8, i16}> for isize`.][49305]\n+- [Added hexadecimal formatting for integers with fmt::Debug][48978]\n+  e.g. `assert!(format!(\"{:02x?}\", b\"Foo\\0\") == \"[46, 6f, 6f, 00]\")`\n+- [Implemented `Default, Hash` for `cmp::Reverse`.][48628]\n+- [Optimized `str::repeat` being 8x faster in large cases.][48657]\n+- [`ascii::escape_default` is now available in libcore.][48735]\n+- [Trailing commas are now supported in std and core macros.][48056]\n+- [Implemented `Copy, Clone` for `cmp::Reverse`][47379]\n+- [Implemented `Clone` for `char::{ToLowercase, ToUppercase}`.][48629]\n+\n+Stabilized APIs\n+---------------\n+- [`*const T::add`]\n+- [`*const T::copy_to_nonoverlapping`]\n+- [`*const T::copy_to`]\n+- [`*const T::read_unaligned`]\n+- [`*const T::read_volatile`]\n+- [`*const T::read`]\n+- [`*const T::sub`]\n+- [`*const T::wrapping_add`]\n+- [`*const T::wrapping_sub`]\n+- [`*mut T::add`]\n+- [`*mut T::copy_to_nonoverlapping`]\n+- [`*mut T::copy_to`]\n+- [`*mut T::read_unaligned`]\n+- [`*mut T::read_volatile`]\n+- [`*mut T::read`]\n+- [`*mut T::replace`]\n+- [`*mut T::sub`]\n+- [`*mut T::swap`]\n+- [`*mut T::wrapping_add`]\n+- [`*mut T::wrapping_sub`]\n+- [`*mut T::write_bytes`]\n+- [`*mut T::write_unaligned`]\n+- [`*mut T::write_volatile`]\n+- [`*mut T::write`]\n+- [`Box::leak`]\n+- [`FromUtf8Error::as_bytes`]\n+- [`LocalKey::try_with`]\n+- [`Option::cloned`]\n+- [`btree_map::Entry::and_modify`]\n+- [`fs::read_to_string`]\n+- [`fs::read`]\n+- [`fs::write`]\n+- [`hash_map::Entry::and_modify`]\n+- [`iter::FusedIterator`]\n+- [`ops::RangeInclusive`]\n+- [`ops::RangeToInclusive`]\n+- [`process::id`]\n+- [`slice::rotate_left`]\n+- [`slice::rotate_right`]\n+- [`String::retain`]\n+\n+\n+Cargo\n+-----\n+- [Cargo will now output path to custom commands when `-v` is\n+  passed with `--list`][cargo/5041]\n+- [The Cargo binary version is now the same as the Rust version][cargo/5083]\n+- [`Cargo.lock` files are now included in published crates.][cargo/5093]\n+\n+Misc\n+----\n+- [The second edition of \"The Rust Programming Language\" book is now recommended\n+  over the first.][48404]\n+\n+Compatibility Notes\n+-------------------\n+\n+- [aliasing a `Fn` trait as `dyn` no longer works.][48481] E.g. the following\n+  syntax is now invalid.\n+  ```\n+  use std::ops::Fn as dyn;\n+  fn g(_: Box<dyn(std::fmt::Debug)>) {}\n+  ```\n+- [The result of dereferences are no longer promoted to `'static`.][47408]\n+  e.g.\n+  ```rust\n+  fn main() {\n+      const PAIR: &(i32, i32) = &(0, 1);\n+      let _reversed_pair: &'static _ = &(PAIR.1, PAIR.0); // Doesn't work\n+  }\n+  ```\n+- [Deprecate `AsciiExt` trait in favor of inherent methods.][49109]\n+- [`\".e0\"` will now no longer parse as `0.0` and will instead cause\n+  an error.][48235]\n+- [Removed hoedown from rustdoc.][48274]\n+- [Bounds on higher-kinded lifetimes a hard error.][48326]\n+\n+[46882]: https://github.com/rust-lang/rust/pull/46882\n+[47379]: https://github.com/rust-lang/rust/pull/47379\n+[47408]: https://github.com/rust-lang/rust/pull/47408\n+[47813]: https://github.com/rust-lang/rust/pull/47813\n+[48056]: https://github.com/rust-lang/rust/pull/48056\n+[48125]: https://github.com/rust-lang/rust/pull/48125\n+[48166]: https://github.com/rust-lang/rust/pull/48166\n+[48235]: https://github.com/rust-lang/rust/pull/48235\n+[48274]: https://github.com/rust-lang/rust/pull/48274\n+[48281]: https://github.com/rust-lang/rust/pull/48281\n+[48296]: https://github.com/rust-lang/rust/pull/48296\n+[48326]: https://github.com/rust-lang/rust/pull/48326\n+[48359]: https://github.com/rust-lang/rust/pull/48359\n+[48404]: https://github.com/rust-lang/rust/pull/48404\n+[48481]: https://github.com/rust-lang/rust/pull/48481\n+[48516]: https://github.com/rust-lang/rust/pull/48516\n+[48628]: https://github.com/rust-lang/rust/pull/48628\n+[48629]: https://github.com/rust-lang/rust/pull/48629\n+[48657]: https://github.com/rust-lang/rust/pull/48657\n+[48735]: https://github.com/rust-lang/rust/pull/48735\n+[48978]: https://github.com/rust-lang/rust/pull/48978\n+[49101]: https://github.com/rust-lang/rust/pull/49101\n+[49109]: https://github.com/rust-lang/rust/pull/49109\n+[49121]: https://github.com/rust-lang/rust/pull/49121\n+[49162]: https://github.com/rust-lang/rust/pull/49162\n+[49184]: https://github.com/rust-lang/rust/pull/49184\n+[49234]: https://github.com/rust-lang/rust/pull/49234\n+[49255]: https://github.com/rust-lang/rust/pull/49255\n+[49299]: https://github.com/rust-lang/rust/pull/49299\n+[49305]: https://github.com/rust-lang/rust/pull/49305\n+[49394]: https://github.com/rust-lang/rust/pull/49394\n+[49458]: https://github.com/rust-lang/rust/pull/49458\n+[`*const T::add`]: https://doc.rust-lang.org/std/primitive.pointer.html#method.add\n+[`*const T::copy_to_nonoverlapping`]: https://doc.rust-lang.org/std/primitive.pointer.html#method.copy_to_nonoverlapping\n+[`*const T::copy_to`]: https://doc.rust-lang.org/std/primitive.pointer.html#method.copy_to\n+[`*const T::read_unaligned`]: https://doc.rust-lang.org/std/primitive.pointer.html#method.read_unaligned\n+[`*const T::read_volatile`]: https://doc.rust-lang.org/std/primitive.pointer.html#method.read_volatile\n+[`*const T::read`]: https://doc.rust-lang.org/std/primitive.pointer.html#method.read\n+[`*const T::sub`]: https://doc.rust-lang.org/std/primitive.pointer.html#method.sub\n+[`*const T::wrapping_add`]: https://doc.rust-lang.org/std/primitive.pointer.html#method.wrapping_add\n+[`*const T::wrapping_sub`]: https://doc.rust-lang.org/std/primitive.pointer.html#method.wrapping_sub\n+[`*mut T::add`]: https://doc.rust-lang.org/std/primitive.pointer.html#method.add-1\n+[`*mut T::copy_to_nonoverlapping`]: https://doc.rust-lang.org/std/primitive.pointer.html#method.copy_to_nonoverlapping-1\n+[`*mut T::copy_to`]: https://doc.rust-lang.org/std/primitive.pointer.html#method.copy_to-1\n+[`*mut T::read_unaligned`]: https://doc.rust-lang.org/std/primitive.pointer.html#method.read_unaligned-1\n+[`*mut T::read_volatile`]: https://doc.rust-lang.org/std/primitive.pointer.html#method.read_volatile-1\n+[`*mut T::read`]: https://doc.rust-lang.org/std/primitive.pointer.html#method.read-1\n+[`*mut T::replace`]: https://doc.rust-lang.org/std/primitive.pointer.html#method.replace\n+[`*mut T::sub`]: https://doc.rust-lang.org/std/primitive.pointer.html#method.sub-1\n+[`*mut T::swap`]: https://doc.rust-lang.org/std/primitive.pointer.html#method.swap\n+[`*mut T::wrapping_add`]: https://doc.rust-lang.org/std/primitive.pointer.html#method.wrapping_add-1\n+[`*mut T::wrapping_sub`]: https://doc.rust-lang.org/std/primitive.pointer.html#method.wrapping_sub-1\n+[`*mut T::write_bytes`]: https://doc.rust-lang.org/std/primitive.pointer.html#method.write_bytes\n+[`*mut T::write_unaligned`]: https://doc.rust-lang.org/std/primitive.pointer.html#method.write_unaligned\n+[`*mut T::write_volatile`]: https://doc.rust-lang.org/std/primitive.pointer.html#method.write_volatile\n+[`*mut T::write`]: https://doc.rust-lang.org/std/primitive.pointer.html#method.write\n+[`Box::leak`]: https://doc.rust-lang.org/std/boxed/struct.Box.html#method.leak\n+[`FromUtf8Error::as_bytes`]: https://doc.rust-lang.org/std/string/struct.FromUtf8Error.html#method.as_bytes\n+[`LocalKey::try_with`]: https://doc.rust-lang.org/std/thread/struct.LocalKey.html#method.try_with\n+[`Option::cloned`]: https://doc.rust-lang.org/std/option/enum.Option.html#method.cloned\n+[`btree_map::Entry::and_modify`]: https://doc.rust-lang.org/std/collections/btree_map/enum.Entry.html#method.and_modify\n+[`fs::read_to_string`]: https://doc.rust-lang.org/std/fs/fn.read_to_string.html\n+[`fs::read`]: https://doc.rust-lang.org/std/fs/fn.read.html\n+[`fs::write`]: https://doc.rust-lang.org/std/fs/fn.write.html\n+[`hash_map::Entry::and_modify`]: https://doc.rust-lang.org/std/collections/hash_map/enum.Entry.html#method.and_modify\n+[`iter::FusedIterator`]: https://doc.rust-lang.org/std/iter/trait.FusedIterator.html\n+[`ops::RangeInclusive`]: https://doc.rust-lang.org/std/ops/struct.RangeInclusive.html\n+[`ops::RangeToInclusive`]: https://doc.rust-lang.org/std/ops/struct.RangeToInclusive.html\n+[`process::id`]: https://doc.rust-lang.org/std/process/fn.id.html\n+[`slice::rotate_left`]: https://doc.rust-lang.org/std/primitive.slice.html#method.rotate_left\n+[`slice::rotate_right`]: https://doc.rust-lang.org/std/primitive.slice.html#method.rotate_right\n+[`String::retain`]: https://doc.rust-lang.org/std/string/struct.String.html#method.retain\n+[cargo/5041]: https://github.com/rust-lang/cargo/pull/5041\n+[cargo/5083]: https://github.com/rust-lang/cargo/pull/5083\n+[cargo/5093]: https://github.com/rust-lang/cargo/pull/5093\n+\n+\n Version 1.25.0 (2018-03-29)\n ==========================\n "}, {"sha": "bb78c14b90586fcb65a93559491662489b83813e", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ac287ed167f07619409928008e4a50eecac4a285/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac287ed167f07619409928008e4a50eecac4a285/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=ac287ed167f07619409928008e4a50eecac4a285", "patch": "@@ -125,6 +125,7 @@\n #![feature(inclusive_range_methods)]\n #![cfg_attr(stage0, feature(generic_param_attrs))]\n #![feature(rustc_const_unstable)]\n+#![feature(const_vec_new)]\n \n #![cfg_attr(not(test), feature(fn_traits, i128))]\n #![cfg_attr(test, feature(test))]"}, {"sha": "4d73d3aa07e66590c0e95ba81e1dccc604f54010", "filename": "src/liballoc/raw_vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac287ed167f07619409928008e4a50eecac4a285/src%2Fliballoc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac287ed167f07619409928008e4a50eecac4a285/src%2Fliballoc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fraw_vec.rs?ref=ac287ed167f07619409928008e4a50eecac4a285", "patch": "@@ -748,7 +748,7 @@ mod tests {\n \n     #[test]\n     fn allocator_param() {\n-        use allocator::{Alloc, AllocErr};\n+        use alloc::AllocErr;\n \n         // Writing a test of integration between third-party\n         // allocators and RawVec is a little tricky because the RawVec"}, {"sha": "9e693c89be90d06662a408250b896225968dda0e", "filename": "src/liballoc/str.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ac287ed167f07619409928008e4a50eecac4a285/src%2Fliballoc%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac287ed167f07619409928008e4a50eecac4a285/src%2Fliballoc%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstr.rs?ref=ac287ed167f07619409928008e4a50eecac4a285", "patch": "@@ -207,7 +207,8 @@ impl str {\n     /// let s = \"this is old\";\n     /// assert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n     /// ```\n-    #[must_use]\n+    #[must_use = \"this returns the replaced string as a new allocation, \\\n+                  without modifying the original\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn replace<'a, P: Pattern<'a>>(&'a self, from: P, to: &str) -> String {\n@@ -247,7 +248,8 @@ impl str {\n     /// let s = \"this is old\";\n     /// assert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n     /// ```\n-    #[must_use]\n+    #[must_use = \"this returns the replaced string as a new allocation, \\\n+                  without modifying the original\"]\n     #[stable(feature = \"str_replacen\", since = \"1.16.0\")]\n     pub fn replacen<'a, P: Pattern<'a>>(&'a self, pat: P, to: &str, count: usize) -> String {\n         // Hope to reduce the times of re-allocation"}, {"sha": "da9afdd2ca37bcb410b70bcbab444bb06715eaa1", "filename": "src/liballoc/string.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ac287ed167f07619409928008e4a50eecac4a285/src%2Fliballoc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac287ed167f07619409928008e4a50eecac4a285/src%2Fliballoc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstring.rs?ref=ac287ed167f07619409928008e4a50eecac4a285", "patch": "@@ -380,7 +380,8 @@ impl String {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn new() -> String {\n+    #[rustc_const_unstable(feature = \"const_string_new\")]\n+    pub const fn new() -> String {\n         String { vec: Vec::new() }\n     }\n "}, {"sha": "e8ea2e743da93c92cf645b0d23c1723129498b5c", "filename": "src/libcore/fmt/builders.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ac287ed167f07619409928008e4a50eecac4a285/src%2Flibcore%2Ffmt%2Fbuilders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac287ed167f07619409928008e4a50eecac4a285/src%2Flibcore%2Ffmt%2Fbuilders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fbuilders.rs?ref=ac287ed167f07619409928008e4a50eecac4a285", "patch": "@@ -84,7 +84,7 @@ impl<'a> fmt::Write for PadAdapter<'a> {\n /// // prints \"Foo { bar: 10, baz: \"Hello World\" }\"\n /// println!(\"{:?}\", Foo { bar: 10, baz: \"Hello World\".to_string() });\n /// ```\n-#[must_use]\n+#[must_use = \"must eventually call `finish()` on Debug builders\"]\n #[allow(missing_debug_implementations)]\n #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n pub struct DebugStruct<'a, 'b: 'a> {\n@@ -181,7 +181,7 @@ impl<'a, 'b: 'a> DebugStruct<'a, 'b> {\n /// // prints \"Foo(10, \"Hello World\")\"\n /// println!(\"{:?}\", Foo(10, \"Hello World\".to_string()));\n /// ```\n-#[must_use]\n+#[must_use = \"must eventually call `finish()` on Debug builders\"]\n #[allow(missing_debug_implementations)]\n #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n pub struct DebugTuple<'a, 'b: 'a> {\n@@ -319,7 +319,7 @@ impl<'a, 'b: 'a> DebugInner<'a, 'b> {\n /// // prints \"{10, 11}\"\n /// println!(\"{:?}\", Foo(vec![10, 11]));\n /// ```\n-#[must_use]\n+#[must_use = \"must eventually call `finish()` on Debug builders\"]\n #[allow(missing_debug_implementations)]\n #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n pub struct DebugSet<'a, 'b: 'a> {\n@@ -390,7 +390,7 @@ impl<'a, 'b: 'a> DebugSet<'a, 'b> {\n /// // prints \"[10, 11]\"\n /// println!(\"{:?}\", Foo(vec![10, 11]));\n /// ```\n-#[must_use]\n+#[must_use = \"must eventually call `finish()` on Debug builders\"]\n #[allow(missing_debug_implementations)]\n #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n pub struct DebugList<'a, 'b: 'a> {\n@@ -461,7 +461,7 @@ impl<'a, 'b: 'a> DebugList<'a, 'b> {\n /// // prints \"{\"A\": 10, \"B\": 11}\"\n /// println!(\"{:?}\", Foo(vec![(\"A\".to_string(), 10), (\"B\".to_string(), 11)]));\n /// ```\n-#[must_use]\n+#[must_use = \"must eventually call `finish()` on Debug builders\"]\n #[allow(missing_debug_implementations)]\n #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n pub struct DebugMap<'a, 'b: 'a> {"}, {"sha": "20445def634ecaa9127119259e4685544fe85d61", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ac287ed167f07619409928008e4a50eecac4a285/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac287ed167f07619409928008e4a50eecac4a285/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=ac287ed167f07619409928008e4a50eecac4a285", "patch": "@@ -959,8 +959,9 @@ impl<T> ManuallyDrop<T> {\n     /// ManuallyDrop::new(Box::new(()));\n     /// ```\n     #[stable(feature = \"manually_drop\", since = \"1.20.0\")]\n+    #[rustc_const_unstable(feature = \"const_manually_drop_new\")]\n     #[inline]\n-    pub fn new(value: T) -> ManuallyDrop<T> {\n+    pub const fn new(value: T) -> ManuallyDrop<T> {\n         ManuallyDrop { value: value }\n     }\n "}, {"sha": "672119eba7f9dc814739c2a93b4db903aecc23e4", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ac287ed167f07619409928008e4a50eecac4a285/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac287ed167f07619409928008e4a50eecac4a285/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=ac287ed167f07619409928008e4a50eecac4a285", "patch": "@@ -128,10 +128,18 @@ pub mod consts {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const LOG2_E: f32 = 1.44269504088896340735992468100189214_f32;\n \n+    /// log<sub>2</sub>(10)\n+    #[unstable(feature = \"extra_log_consts\", issue = \"50540\")]\n+    pub const LOG2_10: f32 = 3.32192809488736234787031942948939018_f32;\n+\n     /// log<sub>10</sub>(e)\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const LOG10_E: f32 = 0.434294481903251827651128918916605082_f32;\n \n+    /// log<sub>10</sub>(2)\n+    #[unstable(feature = \"extra_log_consts\", issue = \"50540\")]\n+    pub const LOG10_2: f32 = 0.301029995663981195213738894724493027_f32;\n+\n     /// ln(2)\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const LN_2: f32 = 0.693147180559945309417232121458176568_f32;"}, {"sha": "220b23a1e6a016fdd0a7ef5cd7165044e56c7811", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ac287ed167f07619409928008e4a50eecac4a285/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac287ed167f07619409928008e4a50eecac4a285/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=ac287ed167f07619409928008e4a50eecac4a285", "patch": "@@ -124,10 +124,18 @@ pub mod consts {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const E: f64 = 2.71828182845904523536028747135266250_f64;\n \n+    /// log<sub>2</sub>(10)\n+    #[unstable(feature = \"extra_log_consts\", issue = \"50540\")]\n+    pub const LOG2_10: f64 = 3.32192809488736234787031942948939018_f64;\n+\n     /// log<sub>2</sub>(e)\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const LOG2_E: f64 = 1.44269504088896340735992468100189214_f64;\n \n+    /// log<sub>10</sub>(2)\n+    #[unstable(feature = \"extra_log_consts\", issue = \"50540\")]\n+    pub const LOG10_2: f64 = 0.301029995663981195213738894724493027_f64;\n+\n     /// log<sub>10</sub>(e)\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const LOG10_E: f64 = 0.434294481903251827651128918916605082_f64;"}, {"sha": "e0cc669d0350a05b6c696b7645e1163f69fae318", "filename": "src/libcore/result.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac287ed167f07619409928008e4a50eecac4a285/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac287ed167f07619409928008e4a50eecac4a285/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=ac287ed167f07619409928008e4a50eecac4a285", "patch": "@@ -251,7 +251,7 @@ use ops;\n /// [`Ok`]: enum.Result.html#variant.Ok\n /// [`Err`]: enum.Result.html#variant.Err\n #[derive(Clone, Copy, PartialEq, PartialOrd, Eq, Ord, Debug, Hash)]\n-#[must_use]\n+#[must_use = \"this `Result` may be an `Err` variant, which should be handled\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub enum Result<T, E> {\n     /// Contains the success value"}, {"sha": "a1928657dabc480413d361950f8234d60ab8474b", "filename": "src/libcore/tests/num/flt2dec/random.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ac287ed167f07619409928008e4a50eecac4a285/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Frandom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac287ed167f07619409928008e4a50eecac4a285/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Frandom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Frandom.rs?ref=ac287ed167f07619409928008e4a50eecac4a285", "patch": "@@ -11,7 +11,6 @@\n #![cfg(not(target_arch = \"wasm32\"))]\n \n use std::i16;\n-use std::mem;\n use std::str;\n \n use core::num::flt2dec::MAX_SIG_DIGITS;\n@@ -75,8 +74,7 @@ pub fn f32_random_equivalence_test<F, G>(f: F, g: G, k: usize, n: usize)\n     let mut rng: XorShiftRng = Rand::rand(&mut rand::thread_rng());\n     let f32_range = Range::new(0x0000_0001u32, 0x7f80_0000);\n     iterate(\"f32_random_equivalence_test\", k, n, f, g, |_| {\n-        let i: u32 = f32_range.ind_sample(&mut rng);\n-        let x: f32 = unsafe {mem::transmute(i)};\n+        let x = f32::from_bits(f32_range.ind_sample(&mut rng));\n         decode_finite(x)\n     });\n }\n@@ -87,8 +85,7 @@ pub fn f64_random_equivalence_test<F, G>(f: F, g: G, k: usize, n: usize)\n     let mut rng: XorShiftRng = Rand::rand(&mut rand::thread_rng());\n     let f64_range = Range::new(0x0000_0000_0000_0001u64, 0x7ff0_0000_0000_0000);\n     iterate(\"f64_random_equivalence_test\", k, n, f, g, |_| {\n-        let i: u64 = f64_range.ind_sample(&mut rng);\n-        let x: f64 = unsafe {mem::transmute(i)};\n+        let x = f64::from_bits(f64_range.ind_sample(&mut rng));\n         decode_finite(x)\n     });\n }\n@@ -105,7 +102,8 @@ pub fn f32_exhaustive_equivalence_test<F, G>(f: F, g: G, k: usize)\n     // iterate from 0x0000_0001 to 0x7f7f_ffff, i.e. all finite ranges\n     let (npassed, nignored) = iterate(\"f32_exhaustive_equivalence_test\",\n                                       k, 0x7f7f_ffff, f, g, |i: usize| {\n-        let x: f32 = unsafe {mem::transmute(i as u32 + 1)};\n+\n+        let x = f32::from_bits(i as u32 + 1);\n         decode_finite(x)\n     });\n     assert_eq!((npassed, nignored), (2121451881, 17643158));"}, {"sha": "437d7d74cae0d7b3f1c52dc66398e2b3290f6b62", "filename": "src/libstd/primitive_docs.rs", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/ac287ed167f07619409928008e4a50eecac4a285/src%2Flibstd%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac287ed167f07619409928008e4a50eecac4a285/src%2Flibstd%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprimitive_docs.rs?ref=ac287ed167f07619409928008e4a50eecac4a285", "patch": "@@ -116,6 +116,8 @@ mod prim_bool { }\n ///\n /// # `!` and generics\n ///\n+/// ## Infallible errors\n+///\n /// The main place you'll see `!` used explicitly is in generic code. Consider the [`FromStr`]\n /// trait:\n ///\n@@ -144,9 +146,60 @@ mod prim_bool { }\n /// [`Ok`] variant. This illustrates another behaviour of `!` - it can be used to \"delete\" certain\n /// enum variants from generic types like `Result`.\n ///\n+/// ## Infinite loops\n+///\n+/// While [`Result<T, !>`] is very useful for removing errors, `!` can also be used to remove\n+/// successes as well. If we think of [`Result<T, !>`] as \"if this function returns, it has not\n+/// errored,\" we get a very intuitive idea of [`Result<!, E>`] as well: if the function returns, it\n+/// *has* errored.\n+///\n+/// For example, consider the case of a simple web server, which can be simplified to:\n+///\n+/// ```ignore (hypothetical-example)\n+/// loop {\n+///     let (client, request) = get_request().expect(\"disconnected\");\n+///     let response = request.process();\n+///     response.send(client);\n+/// }\n+/// ```\n+///\n+/// Currently, this isn't ideal, because we simply panic whenever we fail to get a new connection.\n+/// Instead, we'd like to keep track of this error, like this:\n+///\n+/// ```ignore (hypothetical-example)\n+/// loop {\n+///     match get_request() {\n+///         Err(err) => break err,\n+///         Ok((client, request)) => {\n+///             let response = request.process();\n+///             response.send(client);\n+///         },\n+///     }\n+/// }\n+/// ```\n+///\n+/// Now, when the server disconnects, we exit the loop with an error instead of panicking. While it\n+/// might be intuitive to simply return the error, we might want to wrap it in a [`Result<!, E>`]\n+/// instead:\n+///\n+/// ```ignore (hypothetical-example)\n+/// fn server_loop() -> Result<!, ConnectionError> {\n+///     loop {\n+///         let (client, request) = get_request()?;\n+///         let response = request.process();\n+///         response.send(client);\n+///     }\n+/// }\n+/// ```\n+///\n+/// Now, we can use `?` instead of `match`, and the return type makes a lot more sense: if the loop\n+/// ever stops, it means that an error occurred. We don't even have to wrap the loop in an `Ok`\n+/// because `!` coerces to `Result<!, ConnectionError>` automatically.\n+///\n /// [`String::from_str`]: str/trait.FromStr.html#tymethod.from_str\n /// [`Result<String, !>`]: result/enum.Result.html\n /// [`Result<T, !>`]: result/enum.Result.html\n+/// [`Result<!, E>`]: result/enum.Result.html\n /// [`Ok`]: result/enum.Result.html#variant.Ok\n /// [`String`]: string/struct.String.html\n /// [`Err`]: result/enum.Result.html#variant.Err"}, {"sha": "f3503b0b3a6a768b4cb10a568e2da6d936ee162a", "filename": "src/libstd/sync/mutex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac287ed167f07619409928008e4a50eecac4a285/src%2Flibstd%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac287ed167f07619409928008e4a50eecac4a285/src%2Flibstd%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmutex.rs?ref=ac287ed167f07619409928008e4a50eecac4a285", "patch": "@@ -150,7 +150,7 @@ unsafe impl<T: ?Sized + Send> Sync for Mutex<T> { }\n /// [`lock`]: struct.Mutex.html#method.lock\n /// [`try_lock`]: struct.Mutex.html#method.try_lock\n /// [`Mutex`]: struct.Mutex.html\n-#[must_use]\n+#[must_use = \"if unused the Mutex will immediately unlock\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct MutexGuard<'a, T: ?Sized + 'a> {\n     // funny underscores due to how Deref/DerefMut currently work (they"}, {"sha": "e3db60cff8474767167eb02e5e6bb56c20f73ae2", "filename": "src/libstd/sync/rwlock.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ac287ed167f07619409928008e4a50eecac4a285/src%2Flibstd%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac287ed167f07619409928008e4a50eecac4a285/src%2Flibstd%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Frwlock.rs?ref=ac287ed167f07619409928008e4a50eecac4a285", "patch": "@@ -94,7 +94,7 @@ unsafe impl<T: ?Sized + Send + Sync> Sync for RwLock<T> {}\n /// [`read`]: struct.RwLock.html#method.read\n /// [`try_read`]: struct.RwLock.html#method.try_read\n /// [`RwLock`]: struct.RwLock.html\n-#[must_use]\n+#[must_use = \"if unused the RwLock will immediately unlock\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct RwLockReadGuard<'a, T: ?Sized + 'a> {\n     __lock: &'a RwLock<T>,\n@@ -115,7 +115,7 @@ unsafe impl<'a, T: ?Sized + Sync> Sync for RwLockReadGuard<'a, T> {}\n /// [`write`]: struct.RwLock.html#method.write\n /// [`try_write`]: struct.RwLock.html#method.try_write\n /// [`RwLock`]: struct.RwLock.html\n-#[must_use]\n+#[must_use = \"if unused the RwLock will immediately unlock\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct RwLockWriteGuard<'a, T: ?Sized + 'a> {\n     __lock: &'a RwLock<T>,"}, {"sha": "022056f8a8a700fd9c41c45006f4472ef4c0252e", "filename": "src/libstd/sys_common/remutex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac287ed167f07619409928008e4a50eecac4a285/src%2Flibstd%2Fsys_common%2Fremutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac287ed167f07619409928008e4a50eecac4a285/src%2Flibstd%2Fsys_common%2Fremutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fremutex.rs?ref=ac287ed167f07619409928008e4a50eecac4a285", "patch": "@@ -41,7 +41,7 @@ unsafe impl<T: Send> Sync for ReentrantMutex<T> {}\n /// because implementation of the trait would violate Rust\u2019s reference aliasing\n /// rules. Use interior mutability (usually `RefCell`) in order to mutate the\n /// guarded data.\n-#[must_use]\n+#[must_use = \"if unused the ReentrantMutex will immediately unlock\"]\n pub struct ReentrantMutexGuard<'a, T: 'a> {\n     // funny underscores due to how Deref currently works (it disregards field\n     // privacy)."}, {"sha": "f26a6a5307401cb8645517e69e6dda98862f0b22", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ac287ed167f07619409928008e4a50eecac4a285/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac287ed167f07619409928008e4a50eecac4a285/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=ac287ed167f07619409928008e4a50eecac4a285", "patch": "@@ -419,13 +419,24 @@ pub fn lit_token(lit: token::Lit, suf: Option<Symbol>, diag: Option<(Span, &Hand\n         token::Integer(s) => (false, integer_lit(&s.as_str(), suf, diag)),\n         token::Float(s) => (false, float_lit(&s.as_str(), suf, diag)),\n \n-        token::Str_(s) => {\n-            let s = Symbol::intern(&str_lit(&s.as_str(), diag));\n-            (true, Some(LitKind::Str(s, ast::StrStyle::Cooked)))\n+        token::Str_(mut sym) => {\n+            // If there are no characters requiring special treatment we can\n+            // reuse the symbol from the Token. Otherwise, we must generate a\n+            // new symbol because the string in the LitKind is different to the\n+            // string in the Token.\n+            let s = &sym.as_str();\n+            if s.as_bytes().iter().any(|&c| c == b'\\\\' || c == b'\\r') {\n+                sym = Symbol::intern(&str_lit(s, diag));\n+            }\n+            (true, Some(LitKind::Str(sym, ast::StrStyle::Cooked)))\n         }\n-        token::StrRaw(s, n) => {\n-            let s = Symbol::intern(&raw_str_lit(&s.as_str()));\n-            (true, Some(LitKind::Str(s, ast::StrStyle::Raw(n))))\n+        token::StrRaw(mut sym, n) => {\n+            // Ditto.\n+            let s = &sym.as_str();\n+            if s.contains('\\r') {\n+                sym = Symbol::intern(&raw_str_lit(s));\n+            }\n+            (true, Some(LitKind::Str(sym, ast::StrStyle::Raw(n))))\n         }\n         token::ByteStr(i) => {\n             (true, Some(LitKind::ByteStr(byte_str_lit(&i.as_str()))))"}, {"sha": "2f86c75a2479cf051b92fc98273daaf7f151e7a1", "filename": "src/stdsimd", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstdsimd?ref=ac287ed167f07619409928008e4a50eecac4a285", "patch": "@@ -1 +1 @@\n-Subproject commit 1ea18a5cb431e24aa838b652ac305acc5e394d6b\n+Subproject commit 2f86c75a2479cf051b92fc98273daaf7f151e7a1"}, {"sha": "4003c2ec4f7e4aa6a1f209a394148894778952c7", "filename": "src/test/run-pass/collections-const-new.rs", "status": "renamed", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ac287ed167f07619409928008e4a50eecac4a285/src%2Ftest%2Frun-pass%2Fcollections-const-new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac287ed167f07619409928008e4a50eecac4a285/src%2Ftest%2Frun-pass%2Fcollections-const-new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcollections-const-new.rs?ref=ac287ed167f07619409928008e4a50eecac4a285", "patch": "@@ -8,10 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Test that Vec::new() can be used for constants\n+// Test several functions can be used for constants\n+// 1. Vec::new()\n+// 2. String::new()\n \n #![feature(const_vec_new)]\n+#![feature(const_string_new)]\n \n const MY_VEC: Vec<usize> = Vec::new();\n \n+const MY_STRING: String = String::new();\n+\n pub fn main() {}", "previous_filename": "src/test/run-pass/vec-const-new.rs"}, {"sha": "72731f41321135d3e774fb3fa1f1f1056e89f314", "filename": "src/test/run-pass/issue-44333.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/ac287ed167f07619409928008e4a50eecac4a285/src%2Ftest%2Frun-pass%2Fissue-44333.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac287ed167f07619409928008e4a50eecac4a285/src%2Ftest%2Frun-pass%2Fissue-44333.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-44333.rs?ref=ac287ed167f07619409928008e4a50eecac4a285", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+type Func = fn(usize, usize) -> usize;\n+\n+fn foo(a: usize, b: usize) -> usize { a + b }\n+fn bar(a: usize, b: usize) -> usize { a * b }\n+fn test(x: usize) -> Func {\n+    if x % 2 == 0 { foo }\n+    else { bar }\n+}\n+\n+const FOO: Func = foo;\n+const BAR: Func = bar;\n+\n+fn main() {\n+    match test(std::env::consts::ARCH.len()) {\n+        FOO => println!(\"foo\"),\n+        BAR => println!(\"bar\"),\n+        _ => unreachable!(),\n+    }\n+}"}, {"sha": "9e53ac6e6525da914cb05a85e5e8eff7b5dca81f", "filename": "src/tools/cargo", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargo?ref=ac287ed167f07619409928008e4a50eecac4a285", "patch": "@@ -1 +1 @@\n-Subproject commit af3f1cd29bc872b932a13083e531255aab233a7e\n+Subproject commit 9e53ac6e6525da914cb05a85e5e8eff7b5dca81f"}, {"sha": "d2ade31a52a417257742de72c5936a8a342a34b5", "filename": "src/tools/rls", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frls?ref=ac287ed167f07619409928008e4a50eecac4a285", "patch": "@@ -1 +1 @@\n-Subproject commit 1263f1ff25bb329b76f74715ad4a7ec0d1f71430\n+Subproject commit d2ade31a52a417257742de72c5936a8a342a34b5"}]}