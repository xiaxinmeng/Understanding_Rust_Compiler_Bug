{"sha": "cef495028019b5bbb380bfa1d7a10e9e06dbf166", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlZjQ5NTAyODAxOWI1YmJiMzgwYmZhMWQ3YTEwZTllMDZkYmYxNjY=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-04-13T20:30:53Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-10-15T15:23:51Z"}, "message": "rustc_metadata: generalize Table<T> to hold T, not Lazy<T>, elements.", "tree": {"sha": "90d4903ae2df9c398147d8889f0beb206c721327", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90d4903ae2df9c398147d8889f0beb206c721327"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cef495028019b5bbb380bfa1d7a10e9e06dbf166", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cef495028019b5bbb380bfa1d7a10e9e06dbf166", "html_url": "https://github.com/rust-lang/rust/commit/cef495028019b5bbb380bfa1d7a10e9e06dbf166", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cef495028019b5bbb380bfa1d7a10e9e06dbf166/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "677f0df63b7f39c3b22a84004c1697e85743c470", "url": "https://api.github.com/repos/rust-lang/rust/commits/677f0df63b7f39c3b22a84004c1697e85743c470", "html_url": "https://github.com/rust-lang/rust/commit/677f0df63b7f39c3b22a84004c1697e85743c470"}], "stats": {"total": 126, "additions": 78, "deletions": 48}, "files": [{"sha": "f1ae0487529897863ec5340e48dafa33ceafec9f", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cef495028019b5bbb380bfa1d7a10e9e06dbf166/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cef495028019b5bbb380bfa1d7a10e9e06dbf166/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=cef495028019b5bbb380bfa1d7a10e9e06dbf166", "patch": "@@ -2,7 +2,7 @@\n \n use crate::cstore::{self, CrateMetadata, MetadataBlob};\n use crate::schema::*;\n-use crate::table::PerDefTable;\n+use crate::table::{FixedSizeEncoding, PerDefTable};\n \n use rustc_index::vec::IndexVec;\n use rustc_data_structures::sync::{Lrc, ReadGuard};\n@@ -256,7 +256,7 @@ impl<'a, 'tcx, T: Encodable> SpecializedDecoder<Lazy<[T]>> for DecodeContext<'a,\n }\n \n impl<'a, 'tcx, T> SpecializedDecoder<Lazy<PerDefTable<T>>> for DecodeContext<'a, 'tcx>\n-    where T: LazyMeta<Meta = ()>,\n+    where Option<T>: FixedSizeEncoding,\n {\n     fn specialized_decode(&mut self) -> Result<Lazy<PerDefTable<T>>, Self::Error> {\n         let len = self.read_usize()?;\n@@ -481,7 +481,7 @@ impl<'a, 'tcx> CrateMetadata {\n     }\n \n     fn maybe_entry(&self, item_id: DefIndex) -> Option<Lazy<Entry<'tcx>>> {\n-        self.root.per_def.entry.lookup(self.blob.raw_bytes(), item_id)\n+        self.root.per_def.entry.get(self.blob.raw_bytes(), item_id)\n     }\n \n     fn entry(&self, item_id: DefIndex) -> Entry<'tcx> {"}, {"sha": "c9426aaece94194fe07a74c09a10e36098d5ed2c", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cef495028019b5bbb380bfa1d7a10e9e06dbf166/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cef495028019b5bbb380bfa1d7a10e9e06dbf166/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=cef495028019b5bbb380bfa1d7a10e9e06dbf166", "patch": "@@ -1,5 +1,5 @@\n use crate::schema::*;\n-use crate::table::PerDefTable;\n+use crate::table::{FixedSizeEncoding, PerDefTable};\n \n use rustc::middle::cstore::{LinkagePreference, NativeLibrary,\n                             EncodedMetadata, ForeignModule};\n@@ -61,7 +61,7 @@ struct EncodeContext<'tcx> {\n }\n \n struct PerDefTables<'tcx> {\n-    entry: PerDefTable<Entry<'tcx>>,\n+    entry: PerDefTable<Lazy<Entry<'tcx>>>,\n }\n \n macro_rules! encoder_methods {\n@@ -119,7 +119,7 @@ impl<'tcx, T: Encodable> SpecializedEncoder<Lazy<[T]>> for EncodeContext<'tcx> {\n }\n \n impl<'tcx, T> SpecializedEncoder<Lazy<PerDefTable<T>>> for EncodeContext<'tcx>\n-    where T: LazyMeta<Meta = ()>,\n+    where Option<T>: FixedSizeEncoding,\n {\n     fn specialized_encode(&mut self, lazy: &Lazy<PerDefTable<T>>) -> Result<(), Self::Error> {\n         self.emit_usize(lazy.meta)?;\n@@ -280,14 +280,14 @@ impl<I, T: Encodable> EncodeContentsForLazy<[T]> for I\n     }\n }\n \n-// Shorthand for `$self.$tables.$table.record($key, $self.lazy($value))`, which would\n+// Shorthand for `$self.$tables.$table.set($key, $self.lazy($value))`, which would\n // normally need extra variables to avoid errors about multiple mutable borrows.\n macro_rules! record {\n     ($self:ident.$tables:ident.$table:ident[$key:expr] <- $value:expr) => {{\n         {\n             let value = $value;\n             let lazy = $self.lazy(value);\n-            $self.$tables.$table.record($key, lazy);\n+            $self.$tables.$table.set($key, lazy);\n         }\n     }}\n }"}, {"sha": "e70ba2532caafb6b1c40898b9590c560005c396d", "filename": "src/librustc_metadata/schema.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cef495028019b5bbb380bfa1d7a10e9e06dbf166/src%2Flibrustc_metadata%2Fschema.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cef495028019b5bbb380bfa1d7a10e9e06dbf166/src%2Flibrustc_metadata%2Fschema.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fschema.rs?ref=cef495028019b5bbb380bfa1d7a10e9e06dbf166", "patch": "@@ -229,7 +229,7 @@ crate struct TraitImpls {\n \n #[derive(RustcEncodable, RustcDecodable)]\n crate struct LazyPerDefTables<'tcx> {\n-    pub entry: Lazy!(PerDefTable<Entry<'tcx>>),\n+    pub entry: Lazy!(PerDefTable<Lazy<Entry<'tcx>>>),\n }\n \n #[derive(RustcEncodable, RustcDecodable)]"}, {"sha": "c069ea2830c13ec572214cb6520bb63c624c5bec", "filename": "src/librustc_metadata/table.rs", "status": "modified", "additions": 69, "deletions": 39, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/cef495028019b5bbb380bfa1d7a10e9e06dbf166/src%2Flibrustc_metadata%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cef495028019b5bbb380bfa1d7a10e9e06dbf166/src%2Flibrustc_metadata%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Ftable.rs?ref=cef495028019b5bbb380bfa1d7a10e9e06dbf166", "patch": "@@ -8,7 +8,10 @@ use std::num::NonZeroUsize;\n use log::debug;\n \n /// Helper trait, for encoding to, and decoding from, a fixed number of bytes.\n-trait FixedSizeEncoding {\n+/// Used mainly for Lazy positions and lengths.\n+/// Unchecked invariant: `Self::default()` should encode as `[0; BYTE_LEN]`,\n+/// but this has no impact on safety.\n+crate trait FixedSizeEncoding: Default {\n     const BYTE_LEN: usize;\n \n     // FIXME(eddyb) convert to and from `[u8; Self::BYTE_LEN]` instead,\n@@ -38,7 +41,7 @@ macro_rules! fixed_size_encoding_byte_len_and_defaults {\n                     b.len() / BYTE_LEN,\n                 )\n             };\n-            Self::from_bytes(&b[i])\n+            FixedSizeEncoding::from_bytes(&b[i])\n         }\n         fn write_to_bytes_at(self, b: &mut [u8], i: usize) {\n             const BYTE_LEN: usize = $byte_len;\n@@ -69,37 +72,69 @@ impl FixedSizeEncoding for u32 {\n     }\n }\n \n-/// Random-access position table, allowing encoding in an arbitrary order\n-/// (e.g. while visiting the definitions of a crate), and on-demand decoding\n-/// of specific indices (e.g. queries for per-definition data).\n-/// Similar to `Vec<Lazy<T>>`, but with zero-copy decoding.\n-// FIXME(eddyb) newtype `[u8]` here, such that `Box<Table<T>>` would be used\n+// NOTE(eddyb) there could be an impl for `usize`, which would enable a more\n+// generic `Lazy<T>` impl, but in the general case we might not need / want to\n+// fit every `usize` in `u32`.\n+impl<T: Encodable> FixedSizeEncoding for Option<Lazy<T>> {\n+    fixed_size_encoding_byte_len_and_defaults!(u32::BYTE_LEN);\n+\n+    fn from_bytes(b: &[u8]) -> Self {\n+        Some(Lazy::from_position(NonZeroUsize::new(u32::from_bytes(b) as usize)?))\n+    }\n+\n+    fn write_to_bytes(self, b: &mut [u8]) {\n+        let position = self.map_or(0, |lazy| lazy.position.get());\n+        let position: u32 = position.try_into().unwrap();\n+\n+        position.write_to_bytes(b)\n+    }\n+}\n+\n+impl<T: Encodable> FixedSizeEncoding for Option<Lazy<[T]>> {\n+    fixed_size_encoding_byte_len_and_defaults!(u32::BYTE_LEN * 2);\n+\n+    fn from_bytes(b: &[u8]) -> Self {\n+        Some(Lazy::from_position_and_meta(\n+            <Option<Lazy<T>>>::from_bytes(b)?.position,\n+            u32::from_bytes(&b[u32::BYTE_LEN..]) as usize,\n+        ))\n+    }\n+\n+    fn write_to_bytes(self, b: &mut [u8]) {\n+        self.map(|lazy| Lazy::<T>::from_position(lazy.position))\n+            .write_to_bytes(b);\n+\n+        let len = self.map_or(0, |lazy| lazy.meta);\n+        let len: u32 = len.try_into().unwrap();\n+\n+        len.write_to_bytes(&mut b[u32::BYTE_LEN..]);\n+    }\n+}\n+\n+/// Random-access table, similar to `Vec<Option<T>>`, but without requiring\n+/// encoding or decoding all the values eagerly and in-order.\n+// FIXME(eddyb) replace `Vec` with `[_]` here, such that `Box<Table<T>>` would be used\n // when building it, and `Lazy<Table<T>>` or `&Table<T>` when reading it.\n // Sadly, that doesn't work for `DefPerTable`, which is `(Table<T>, Table<T>)`,\n // and so would need two lengths in its metadata, which is not supported yet.\n-crate struct Table<T: LazyMeta<Meta = ()>> {\n+crate struct Table<T> where Option<T>: FixedSizeEncoding {\n+    // FIXME(eddyb) store `[u8; <Option<T>>::BYTE_LEN]` instead of `u8` in `Vec`,\n+    // once that starts being allowed by the compiler (i.e. lazy normalization).\n     bytes: Vec<u8>,\n     _marker: PhantomData<T>,\n }\n \n-impl<T: LazyMeta<Meta = ()>> Table<T> {\n+impl<T> Table<T> where Option<T>: FixedSizeEncoding {\n     crate fn new(len: usize) -> Self {\n         Table {\n-            bytes: vec![0; len * 4],\n+            // FIXME(eddyb) only allocate and encode as many entries as needed.\n+            bytes: vec![0; len * <Option<T>>::BYTE_LEN],\n             _marker: PhantomData,\n         }\n     }\n \n-    crate fn record(&mut self, i: usize, entry: Lazy<T>) {\n-        let position: u32 = entry.position.get().try_into().unwrap();\n-\n-        assert!(u32::read_from_bytes_at(&self.bytes, i) == 0,\n-                \"recorded position for index {:?} twice, first at {:?} and now at {:?}\",\n-                i,\n-                u32::read_from_bytes_at(&self.bytes, i),\n-                position);\n-\n-        position.write_to_bytes_at(&mut self.bytes, i)\n+    crate fn set(&mut self, i: usize, value: T) {\n+        Some(value).write_to_bytes_at(&mut self.bytes, i);\n     }\n \n     crate fn encode(&self, buf: &mut Encoder) -> Lazy<Self> {\n@@ -112,42 +147,37 @@ impl<T: LazyMeta<Meta = ()>> Table<T> {\n     }\n }\n \n-impl<T: LazyMeta<Meta = ()>> LazyMeta for Table<T> {\n+impl<T> LazyMeta for Table<T> where Option<T>: FixedSizeEncoding {\n     type Meta = usize;\n \n     fn min_size(len: usize) -> usize {\n         len\n     }\n }\n \n-impl<T: Encodable> Lazy<Table<T>> {\n-    /// Given the metadata, extract out the offset of a particular index (if any).\n+impl<T> Lazy<Table<T>> where Option<T>: FixedSizeEncoding {\n+    /// Given the metadata, extract out the value at a particular index (if any).\n     #[inline(never)]\n-    crate fn lookup(&self, bytes: &[u8], i: usize) -> Option<Lazy<T>> {\n+    crate fn get(&self, bytes: &[u8], i: usize) -> Option<T> {\n         debug!(\"Table::lookup: index={:?} len={:?}\", i, self.meta);\n \n-        let bytes = &bytes[self.position.get()..][..self.meta];\n-        let position = u32::read_from_bytes_at(bytes, i);\n-        debug!(\"Table::lookup: position={:?}\", position);\n-\n-        NonZeroUsize::new(position as usize).map(Lazy::from_position)\n+        <Option<T>>::read_from_bytes_at(&bytes[self.position.get()..][..self.meta], i)\n     }\n }\n \n-\n /// Per-definition table, similar to `Table` but keyed on `DefIndex`.\n // FIXME(eddyb) replace by making `Table` behave like `IndexVec`,\n // and by using `newtype_index!` to define `DefIndex`.\n-crate struct PerDefTable<T: LazyMeta<Meta = ()>>(Table<T>);\n+crate struct PerDefTable<T>(Table<T>) where Option<T>: FixedSizeEncoding;\n \n-impl<T: LazyMeta<Meta = ()>> PerDefTable<T> {\n+impl<T> PerDefTable<T> where Option<T>: FixedSizeEncoding {\n     crate fn new(def_index_count: usize) -> Self {\n         PerDefTable(Table::new(def_index_count))\n     }\n \n-    crate fn record(&mut self, def_id: DefId, entry: Lazy<T>) {\n+    crate fn set(&mut self, def_id: DefId, value: T) {\n         assert!(def_id.is_local());\n-        self.0.record(def_id.index.index(), entry);\n+        self.0.set(def_id.index.index(), value);\n     }\n \n     crate fn encode(&self, buf: &mut Encoder) -> Lazy<Self> {\n@@ -156,22 +186,22 @@ impl<T: LazyMeta<Meta = ()>> PerDefTable<T> {\n     }\n }\n \n-impl<T: LazyMeta<Meta = ()>> LazyMeta for PerDefTable<T> {\n+impl<T> LazyMeta for PerDefTable<T> where Option<T>: FixedSizeEncoding {\n     type Meta = <Table<T> as LazyMeta>::Meta;\n \n     fn min_size(meta: Self::Meta) -> usize {\n         Table::<T>::min_size(meta)\n     }\n }\n \n-impl<T: Encodable> Lazy<PerDefTable<T>> {\n+impl<T> Lazy<PerDefTable<T>> where Option<T>: FixedSizeEncoding {\n     fn as_table(&self) -> Lazy<Table<T>> {\n         Lazy::from_position_and_meta(self.position, self.meta)\n     }\n \n-    /// Given the metadata, extract out the offset of a particular DefIndex (if any).\n+    /// Given the metadata, extract out the value at a particular DefIndex (if any).\n     #[inline(never)]\n-    crate fn lookup(&self, bytes: &[u8], def_index: DefIndex) -> Option<Lazy<T>> {\n-        self.as_table().lookup(bytes, def_index.index())\n+    crate fn get(&self, bytes: &[u8], def_index: DefIndex) -> Option<T> {\n+        self.as_table().get(bytes, def_index.index())\n     }\n }"}]}