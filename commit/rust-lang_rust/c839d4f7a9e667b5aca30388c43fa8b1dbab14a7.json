{"sha": "c839d4f7a9e667b5aca30388c43fa8b1dbab14a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4MzlkNGY3YTllNjY3YjVhY2EzMDM4OGM0M2ZhOGIxZGJhYjE0YTc=", "commit": {"author": {"name": "Benjamin Coenen", "email": "5719034+bnjjj@users.noreply.github.com", "date": "2020-05-07T14:52:14Z"}, "committer": {"name": "Benjamin Coenen", "email": "5719034+bnjjj@users.noreply.github.com", "date": "2020-05-07T14:52:14Z"}, "message": "do not show runnables for main function outside of a binary target #4356\n\nSigned-off-by: Benjamin Coenen <5719034+bnjjj@users.noreply.github.com>", "tree": {"sha": "0bb3079b5a88f33e0d5316386e784ecb39199e1e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0bb3079b5a88f33e0d5316386e784ecb39199e1e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c839d4f7a9e667b5aca30388c43fa8b1dbab14a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c839d4f7a9e667b5aca30388c43fa8b1dbab14a7", "html_url": "https://github.com/rust-lang/rust/commit/c839d4f7a9e667b5aca30388c43fa8b1dbab14a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c839d4f7a9e667b5aca30388c43fa8b1dbab14a7/comments", "author": {"login": "bnjjj", "id": 5719034, "node_id": "MDQ6VXNlcjU3MTkwMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5719034?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bnjjj", "html_url": "https://github.com/bnjjj", "followers_url": "https://api.github.com/users/bnjjj/followers", "following_url": "https://api.github.com/users/bnjjj/following{/other_user}", "gists_url": "https://api.github.com/users/bnjjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/bnjjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bnjjj/subscriptions", "organizations_url": "https://api.github.com/users/bnjjj/orgs", "repos_url": "https://api.github.com/users/bnjjj/repos", "events_url": "https://api.github.com/users/bnjjj/events{/privacy}", "received_events_url": "https://api.github.com/users/bnjjj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bnjjj", "id": 5719034, "node_id": "MDQ6VXNlcjU3MTkwMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5719034?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bnjjj", "html_url": "https://github.com/bnjjj", "followers_url": "https://api.github.com/users/bnjjj/followers", "following_url": "https://api.github.com/users/bnjjj/following{/other_user}", "gists_url": "https://api.github.com/users/bnjjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/bnjjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bnjjj/subscriptions", "organizations_url": "https://api.github.com/users/bnjjj/orgs", "repos_url": "https://api.github.com/users/bnjjj/repos", "events_url": "https://api.github.com/users/bnjjj/events{/privacy}", "received_events_url": "https://api.github.com/users/bnjjj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9cb55966fe0fee791072f275ac55b90b8ee13e32", "url": "https://api.github.com/repos/rust-lang/rust/commits/9cb55966fe0fee791072f275ac55b90b8ee13e32", "html_url": "https://github.com/rust-lang/rust/commit/9cb55966fe0fee791072f275ac55b90b8ee13e32"}], "stats": {"total": 26, "additions": 24, "deletions": 2}, "files": [{"sha": "f4353af64703d1f7154714a4397156677729d4f4", "filename": "crates/rust-analyzer/src/main_loop/handlers.rs", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c839d4f7a9e667b5aca30388c43fa8b1dbab14a7/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c839d4f7a9e667b5aca30388c43fa8b1dbab14a7/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=c839d4f7a9e667b5aca30388c43fa8b1dbab14a7", "patch": "@@ -42,6 +42,7 @@ use crate::{\n     world::WorldSnapshot,\n     LspError, Result,\n };\n+use ra_project_model::TargetKind;\n \n pub fn handle_analyzer_status(world: WorldSnapshot, _: ()) -> Result<String> {\n     let _p = profile(\"handle_analyzer_status\");\n@@ -384,16 +385,27 @@ pub fn handle_runnables(\n     let offset = params.position.map(|it| it.conv_with(&line_index));\n     let mut res = Vec::new();\n     let workspace_root = world.workspace_root_for(file_id);\n+    let cargo_spec = CargoTargetSpec::for_file(&world, file_id)?;\n     for runnable in world.analysis().runnables(file_id)? {\n         if let Some(offset) = offset {\n             if !runnable.range.contains_inclusive(offset) {\n                 continue;\n             }\n         }\n+        // Do not suggest binary run on other target than binary\n+        if let RunnableKind::Bin = runnable.kind {\n+            if let Some(spec) = &cargo_spec {\n+                match spec.target_kind {\n+                    TargetKind::Bin => {}\n+                    _ => continue,\n+                }\n+            }\n+        }\n         res.push(to_lsp_runnable(&world, file_id, runnable)?);\n     }\n+\n     // Add `cargo check` and `cargo test` for the whole package\n-    match CargoTargetSpec::for_file(&world, file_id)? {\n+    match cargo_spec {\n         Some(spec) => {\n             for &cmd in [\"check\", \"test\"].iter() {\n                 res.push(req::Runnable {\n@@ -831,13 +843,23 @@ pub fn handle_code_lens(\n \n     let mut lenses: Vec<CodeLens> = Default::default();\n \n+    let cargo_spec = CargoTargetSpec::for_file(&world, file_id)?;\n     // Gather runnables\n     for runnable in world.analysis().runnables(file_id)? {\n         let title = match &runnable.kind {\n             RunnableKind::Test { .. } | RunnableKind::TestMod { .. } => \"\u25b6\ufe0f\\u{fe0e}Run Test\",\n             RunnableKind::DocTest { .. } => \"\u25b6\ufe0f\\u{fe0e}Run Doctest\",\n             RunnableKind::Bench { .. } => \"Run Bench\",\n-            RunnableKind::Bin => \"Run\",\n+            RunnableKind::Bin => {\n+                // Do not suggest binary run on other target than binary\n+                match &cargo_spec {\n+                    Some(spec) => match spec.target_kind {\n+                        TargetKind::Bin => \"Run\",\n+                        _ => continue,\n+                    },\n+                    None => continue,\n+                }\n+            }\n         }\n         .to_string();\n         let mut r = to_lsp_runnable(&world, file_id, runnable)?;"}]}