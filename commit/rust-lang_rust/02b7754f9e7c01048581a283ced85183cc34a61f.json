{"sha": "02b7754f9e7c01048581a283ced85183cc34a61f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyYjc3NTRmOWU3YzAxMDQ4NTgxYTI4M2NlZDg1MTgzY2MzNGE2MWY=", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-08-03T05:24:31Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-08-03T08:17:57Z"}, "message": "don't use .into() to convert types to identical types (clippy::useless_conversion)\n\nExample:\nlet _x: String = String::from(\"hello world\").into();", "tree": {"sha": "959fe46127e386f84e6ebd94fafd6b0a90ba0fc4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/959fe46127e386f84e6ebd94fafd6b0a90ba0fc4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02b7754f9e7c01048581a283ced85183cc34a61f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02b7754f9e7c01048581a283ced85183cc34a61f", "html_url": "https://github.com/rust-lang/rust/commit/02b7754f9e7c01048581a283ced85183cc34a61f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02b7754f9e7c01048581a283ced85183cc34a61f/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e91405b9d5c8dabb3e488bafb314147f1050f9b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/e91405b9d5c8dabb3e488bafb314147f1050f9b9", "html_url": "https://github.com/rust-lang/rust/commit/e91405b9d5c8dabb3e488bafb314147f1050f9b9"}], "stats": {"total": 43, "additions": 21, "deletions": 22}, "files": [{"sha": "17aecfdc41da28bf9b10e24ad847e98e2176db35", "filename": "compiler/rustc_mir/src/interpret/operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02b7754f9e7c01048581a283ced85183cc34a61f/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b7754f9e7c01048581a283ced85183cc34a61f/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Foperand.rs?ref=02b7754f9e7c01048581a283ced85183cc34a61f", "patch": "@@ -585,7 +585,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 let ptr = self.global_base_pointer(Pointer::new(id, offset))?;\n                 Operand::Indirect(MemPlace::from_ptr(ptr.into(), layout.align.abi))\n             }\n-            ConstValue::Scalar(x) => Operand::Immediate(tag_scalar(x.into())?.into()),\n+            ConstValue::Scalar(x) => Operand::Immediate(tag_scalar(x)?.into()),\n             ConstValue::Slice { data, start, end } => {\n                 // We rely on mutability being set correctly in `data` to prevent writes\n                 // where none should happen."}, {"sha": "35ae07e25cadac47363dfd739297f217b689b79f", "filename": "compiler/rustc_mir/src/interpret/terminator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02b7754f9e7c01048581a283ced85183cc34a61f/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b7754f9e7c01048581a283ced85183cc34a61f/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fterminator.rs?ref=02b7754f9e7c01048581a283ced85183cc34a61f", "patch": "@@ -73,7 +73,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     ty::FnPtr(sig) => {\n                         let caller_abi = sig.abi();\n                         let fn_ptr = self.read_pointer(&func)?;\n-                        let fn_val = self.memory.get_fn(fn_ptr.into())?;\n+                        let fn_val = self.memory.get_fn(fn_ptr)?;\n                         (\n                             fn_val,\n                             caller_abi,"}, {"sha": "948fcd9f4550f4e6ec0a7cbdbb606240978b494b", "filename": "compiler/rustc_mir/src/transform/simplify_comparison_integral.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02b7754f9e7c01048581a283ced85183cc34a61f/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fsimplify_comparison_integral.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b7754f9e7c01048581a283ced85183cc34a61f/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fsimplify_comparison_integral.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fsimplify_comparison_integral.rs?ref=02b7754f9e7c01048581a283ced85183cc34a61f", "patch": "@@ -211,7 +211,7 @@ fn find_branch_value_info<'tcx>(\n                 return None;\n             };\n             let branch_value_scalar = branch_value.literal.try_to_scalar()?;\n-            Some((branch_value_scalar.into(), branch_value_ty, *to_switch_on))\n+            Some((branch_value_scalar, branch_value_ty, *to_switch_on))\n         }\n         _ => None,\n     }"}, {"sha": "b3fc1e73f78856602d86829de383c568dfdf4b08", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/02b7754f9e7c01048581a283ced85183cc34a61f/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b7754f9e7c01048581a283ced85183cc34a61f/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=02b7754f9e7c01048581a283ced85183cc34a61f", "patch": "@@ -675,11 +675,10 @@ impl<'a, 'tcx> Clean<Generics> for (&'a ty::Generics, ty::GenericPredicates<'tcx\n                         if let Some(((_, trait_did, name), rhs)) =\n                             proj.as_ref().and_then(|(lhs, rhs)| Some((lhs.projection()?, rhs)))\n                         {\n-                            impl_trait_proj.entry(param_idx).or_default().push((\n-                                trait_did.into(),\n-                                name,\n-                                rhs,\n-                            ));\n+                            impl_trait_proj\n+                                .entry(param_idx)\n+                                .or_default()\n+                                .push((trait_did, name, rhs));\n                         }\n \n                         return None;"}, {"sha": "5c73d3de5b93fb4aed6a763c774013de821edd82", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02b7754f9e7c01048581a283ced85183cc34a61f/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b7754f9e7c01048581a283ced85183cc34a61f/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=02b7754f9e7c01048581a283ced85183cc34a61f", "patch": "@@ -1614,7 +1614,7 @@ impl Type {\n impl Type {\n     fn inner_def_id(&self, cache: Option<&Cache>) -> Option<DefId> {\n         let t: PrimitiveType = match *self {\n-            ResolvedPath { did, .. } => return Some(did.into()),\n+            ResolvedPath { did, .. } => return Some(did),\n             DynTrait(ref bounds, _) => return bounds[0].trait_.inner_def_id(cache),\n             Primitive(p) => return cache.and_then(|c| c.primitive_locations.get(&p).cloned()),\n             BorrowedRef { type_: box Generic(..), .. } => PrimitiveType::Reference,"}, {"sha": "3d267ca50334dc9136ee115d0523759ec1f48f7e", "filename": "src/librustdoc/formats/cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02b7754f9e7c01048581a283ced85183cc34a61f/src%2Flibrustdoc%2Fformats%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b7754f9e7c01048581a283ced85183cc34a61f/src%2Flibrustdoc%2Fformats%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fcache.rs?ref=02b7754f9e7c01048581a283ced85183cc34a61f", "patch": "@@ -228,7 +228,7 @@ impl<'a, 'tcx> DocFolder for CacheBuilder<'a, 'tcx> {\n                 if i.blanket_impl.is_none() {\n                     self.cache\n                         .implementors\n-                        .entry(did.into())\n+                        .entry(did)\n                         .or_default()\n                         .push(Impl { impl_item: item.clone() });\n                 }"}, {"sha": "8ab6aa775d2e4fb09eda2bb004828903d6ba13e4", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02b7754f9e7c01048581a283ced85183cc34a61f/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b7754f9e7c01048581a283ced85183cc34a61f/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=02b7754f9e7c01048581a283ced85183cc34a61f", "patch": "@@ -688,7 +688,7 @@ crate fn anchor<'a, 'cx: 'a>(\n     text: &'a str,\n     cx: &'cx Context<'_>,\n ) -> impl fmt::Display + 'a {\n-    let parts = href(did.into(), cx);\n+    let parts = href(did, cx);\n     display_fn(move |f| {\n         if let Ok((url, short_ty, fqp)) = parts {\n             write!(\n@@ -921,7 +921,7 @@ fn fmt_type<'cx>(\n                 //        everything comes in as a fully resolved QPath (hard to\n                 //        look at).\n                 box clean::ResolvedPath { did, .. } => {\n-                    match href(did.into(), cx) {\n+                    match href(did, cx) {\n                         Ok((ref url, _, ref path)) if !f.alternate() => {\n                             write!(\n                                 f,"}, {"sha": "1c083522beaa901f3409a9de0bb084911100de2c", "filename": "src/librustdoc/html/render/cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02b7754f9e7c01048581a283ced85183cc34a61f/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b7754f9e7c01048581a283ced85183cc34a61f/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs?ref=02b7754f9e7c01048581a283ced85183cc34a61f", "patch": "@@ -42,7 +42,7 @@ crate fn build_index<'tcx>(krate: &clean::Crate, cache: &mut Cache, tcx: TyCtxt<\n                 name: item.name.unwrap().to_string(),\n                 path: fqp[..fqp.len() - 1].join(\"::\"),\n                 desc,\n-                parent: Some(did.into()),\n+                parent: Some(did),\n                 parent_idx: None,\n                 search_type: get_index_search_type(&item, tcx),\n                 aliases: item.attrs.get_doc_aliases(),"}, {"sha": "b36be9541d2b3980b32c04b9997abc63d6ebaf04", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/02b7754f9e7c01048581a283ced85183cc34a61f/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b7754f9e7c01048581a283ced85183cc34a61f/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=02b7754f9e7c01048581a283ced85183cc34a61f", "patch": "@@ -293,7 +293,7 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n     ) -> Result<(Res, Option<String>), ErrorKind<'path>> {\n         let tcx = self.cx.tcx;\n         let no_res = || ResolutionFailure::NotResolved {\n-            module_id: module_id.into(),\n+            module_id: module_id,\n             partial_res: None,\n             unresolved: path_str.into(),\n         };\n@@ -521,7 +521,7 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                     // but the disambiguator logic expects the associated item.\n                     // Store the kind in a side channel so that only the disambiguator logic looks at it.\n                     if let Some((kind, id)) = side_channel {\n-                        self.kind_side_channel.set(Some((kind, id.into())));\n+                        self.kind_side_channel.set(Some((kind, id)));\n                     }\n                     Ok((res, Some(fragment)))\n                 };\n@@ -1268,7 +1268,7 @@ impl LinkCollector<'_, '_> {\n                     // doesn't allow statements like `use str::trim;`, making this a (hopefully)\n                     // valid omission. See https://github.com/rust-lang/rust/pull/80660#discussion_r551585677\n                     // for discussion on the matter.\n-                    verify(kind, id.into())?;\n+                    verify(kind, id)?;\n \n                     // FIXME: it would be nice to check that the feature gate was enabled in the original crate, not just ignore it altogether.\n                     // However I'm not sure how to check that across crates.\n@@ -1306,9 +1306,9 @@ impl LinkCollector<'_, '_> {\n                 Some(ItemLink { link: ori_link.link, link_text, did: None, fragment })\n             }\n             Res::Def(kind, id) => {\n-                verify(kind, id.into())?;\n+                verify(kind, id)?;\n                 let id = clean::register_res(self.cx, rustc_hir::def::Res::Def(kind, id));\n-                Some(ItemLink { link: ori_link.link, link_text, did: Some(id.into()), fragment })\n+                Some(ItemLink { link: ori_link.link, link_text, did: Some(id), fragment })\n             }\n         }\n     }\n@@ -1886,7 +1886,7 @@ fn resolution_failure(\n                         name = start;\n                         for ns in [TypeNS, ValueNS, MacroNS] {\n                             if let Some(res) =\n-                                collector.check_full_res(ns, &start, module_id.into(), &None)\n+                                collector.check_full_res(ns, &start, module_id, &None)\n                             {\n                                 debug!(\"found partial_res={:?}\", res);\n                                 *partial_res = Some(res);"}, {"sha": "eefe50caa345e85548377051cc9e7d10bb0c1a08", "filename": "src/librustdoc/passes/collect_trait_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02b7754f9e7c01048581a283ced85183cc34a61f/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b7754f9e7c01048581a283ced85183cc34a61f/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs?ref=02b7754f9e7c01048581a283ced85183cc34a61f", "patch": "@@ -45,7 +45,7 @@ crate fn collect_trait_impls(krate: Crate, cx: &mut DocContext<'_>) -> Crate {\n \n                 // FIXME(eddyb) is this `doc(hidden)` check needed?\n                 if !cx.tcx.get_attrs(def_id).lists(sym::doc).has_word(sym::hidden) {\n-                    let impls = get_auto_trait_and_blanket_impls(cx, def_id.into());\n+                    let impls = get_auto_trait_and_blanket_impls(cx, def_id);\n                     new_items.extend(impls.filter(|i| cx.inlined.insert(i.def_id)));\n                 }\n             });"}, {"sha": "e28910355357b29b50eb9c69fcbab79ee60b743c", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02b7754f9e7c01048581a283ced85183cc34a61f/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b7754f9e7c01048581a283ced85183cc34a61f/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=02b7754f9e7c01048581a283ced85183cc34a61f", "patch": "@@ -192,7 +192,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     } else {\n                         // All items need to be handled here in case someone wishes to link\n                         // to them with intra-doc links\n-                        self.cx.cache.access_levels.map.insert(did.into(), AccessLevel::Public);\n+                        self.cx.cache.access_levels.map.insert(did, AccessLevel::Public);\n                     }\n                 }\n             }\n@@ -204,7 +204,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             None => return false,\n         };\n \n-        let is_private = !self.cx.cache.access_levels.is_public(res_did.into());\n+        let is_private = !self.cx.cache.access_levels.is_public(res_did);\n         let is_hidden = inherits_doc_hidden(self.cx.tcx, res_hir_id);\n \n         // Only inline if requested or if the item would otherwise be stripped."}]}