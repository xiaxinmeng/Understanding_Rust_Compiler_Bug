{"sha": "43552c9cb9a5378d2bcbafe0e74114d51981513c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzNTUyYzljYjlhNTM3OGQyYmNiYWZlMGU3NDExNGQ1MTk4MTUxM2M=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-11-15T10:47:19Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-11-15T10:47:19Z"}, "message": "Replace some variadic function calls in libstd with unimplemented!()", "tree": {"sha": "a1c7c49cfa182df71271ff5378e65d2a1f670f1c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1c7c49cfa182df71271ff5378e65d2a1f670f1c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/43552c9cb9a5378d2bcbafe0e74114d51981513c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/43552c9cb9a5378d2bcbafe0e74114d51981513c", "html_url": "https://github.com/rust-lang/rust/commit/43552c9cb9a5378d2bcbafe0e74114d51981513c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/43552c9cb9a5378d2bcbafe0e74114d51981513c/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f42b7c8ca9dad966d0315fa106a5c8638c3dceb5", "url": "https://api.github.com/repos/rust-lang/rust/commits/f42b7c8ca9dad966d0315fa106a5c8638c3dceb5", "html_url": "https://github.com/rust-lang/rust/commit/f42b7c8ca9dad966d0315fa106a5c8638c3dceb5"}], "stats": {"total": 211, "additions": 211, "deletions": 0}, "files": [{"sha": "a46bf1dd60a39ffe84aa8d126701bd6d8931f92b", "filename": "0008-Replace-some-variadic-function-calls-with-unimplemen.patch", "status": "added", "additions": 211, "deletions": 0, "changes": 211, "blob_url": "https://github.com/rust-lang/rust/blob/43552c9cb9a5378d2bcbafe0e74114d51981513c/0008-Replace-some-variadic-function-calls-with-unimplemen.patch", "raw_url": "https://github.com/rust-lang/rust/raw/43552c9cb9a5378d2bcbafe0e74114d51981513c/0008-Replace-some-variadic-function-calls-with-unimplemen.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/0008-Replace-some-variadic-function-calls-with-unimplemen.patch?ref=43552c9cb9a5378d2bcbafe0e74114d51981513c", "patch": "@@ -0,0 +1,211 @@\n+From 96aefe8fdd28704d903d585f5be6a667d2485582 Mon Sep 17 00:00:00 2001\n+From: bjorn3 <bjorn3@users.noreply.github.com>\n+Date: Thu, 15 Nov 2018 11:41:06 +0100\n+Subject: [PATCH] Replace some variadic function calls with unimplemented!()\n+\n+---\n+ src/libstd/sys/unix/fd.rs     | 18 ++++++++++++++++++\n+ src/libstd/sys/unix/fs.rs     |  9 +++++++++\n+ src/libstd/sys/unix/net.rs    |  3 +++\n+ src/libstd/sys/unix/rand.rs   |  3 +++\n+ src/libstd/sys/unix/thread.rs |  3 +++\n+ 5 files changed, 36 insertions(+)\n+\n+diff --git a/src/libstd/sys/unix/fd.rs b/src/libstd/sys/unix/fd.rs\n+index af33d26..2433ae4 100644\n+--- a/src/libstd/sys/unix/fd.rs\n++++ b/src/libstd/sys/unix/fd.rs\n+@@ -156,9 +156,12 @@ impl FileDesc {\n+ \n+     #[cfg(target_os = \"linux\")]\n+     pub fn get_cloexec(&self) -> io::Result<bool> {\n++        /*\n+         unsafe {\n+             Ok((cvt(libc::fcntl(self.fd, libc::F_GETFD))? & libc::FD_CLOEXEC) != 0)\n+         }\n++        */\n++        unimplemented!();\n+     }\n+ \n+     #[cfg(not(any(target_env = \"newlib\",\n+@@ -168,10 +171,13 @@ impl FileDesc {\n+                   target_os = \"l4re\",\n+                   target_os = \"haiku\")))]\n+     pub fn set_cloexec(&self) -> io::Result<()> {\n++        /*\n+         unsafe {\n+             cvt(libc::ioctl(self.fd, libc::FIOCLEX))?;\n+             Ok(())\n+         }\n++        */\n++        unimplemented!();\n+     }\n+     #[cfg(any(target_env = \"newlib\",\n+               target_os = \"solaris\",\n+@@ -180,6 +186,7 @@ impl FileDesc {\n+               target_os = \"l4re\",\n+               target_os = \"haiku\"))]\n+     pub fn set_cloexec(&self) -> io::Result<()> {\n++        /*\n+         unsafe {\n+             let previous = cvt(libc::fcntl(self.fd, libc::F_GETFD))?;\n+             let new = previous | libc::FD_CLOEXEC;\n+@@ -188,19 +195,25 @@ impl FileDesc {\n+             }\n+             Ok(())\n+         }\n++        */\n++        unimplemented!();\n+     }\n+ \n+     #[cfg(target_os = \"linux\")]\n+     pub fn set_nonblocking(&self, nonblocking: bool) -> io::Result<()> {\n++        /*\n+         unsafe {\n+             let v = nonblocking as c_int;\n+             cvt(libc::ioctl(self.fd, libc::FIONBIO, &v))?;\n+             Ok(())\n+         }\n++        */\n++        unimplemented!();\n+     }\n+ \n+     #[cfg(not(target_os = \"linux\"))]\n+     pub fn set_nonblocking(&self, nonblocking: bool) -> io::Result<()> {\n++        /*\n+         unsafe {\n+             let previous = cvt(libc::fcntl(self.fd, libc::F_GETFL))?;\n+             let new = if nonblocking {\n+@@ -213,9 +226,12 @@ impl FileDesc {\n+             }\n+             Ok(())\n+         }\n++        */\n++        unimplemented!();\n+     }\n+ \n+     pub fn duplicate(&self) -> io::Result<FileDesc> {\n++        /*\n+         // We want to atomically duplicate this file descriptor and set the\n+         // CLOEXEC flag, and currently that's done via F_DUPFD_CLOEXEC. This\n+         // flag, however, isn't supported on older Linux kernels (earlier than\n+@@ -263,6 +279,8 @@ impl FileDesc {\n+             }\n+         }\n+         cvt(unsafe { libc::fcntl(fd, libc::F_DUPFD, 0) }).and_then(make_filedesc)\n++        */\n++        unimplemented!();\n+     }\n+ }\n+ \n+diff --git a/src/libstd/sys/unix/fs.rs b/src/libstd/sys/unix/fs.rs\n+index add06ae..e0d3f84 100644\n+--- a/src/libstd/sys/unix/fs.rs\n++++ b/src/libstd/sys/unix/fs.rs\n+@@ -465,6 +465,7 @@ impl File {\n+     }\n+ \n+     pub fn open_c(path: &CStr, opts: &OpenOptions) -> io::Result<File> {\n++        /*\n+         let flags = libc::O_CLOEXEC |\n+                     opts.get_access_mode()? |\n+                     opts.get_creation_mode()? |\n+@@ -519,6 +520,8 @@ impl File {\n+ \n+         ensure_cloexec(&fd)?;\n+         Ok(File(fd))\n++        */\n++        unimplemented!();\n+     }\n+ \n+     pub fn file_attr(&self) -> io::Result<FileAttr> {\n+@@ -667,6 +670,7 @@ impl fmt::Debug for File {\n+ \n+         #[cfg(any(target_os = \"linux\", target_os = \"macos\"))]\n+         fn get_mode(fd: c_int) -> Option<(bool, bool)> {\n++            /*\n+             let mode = unsafe { libc::fcntl(fd, libc::F_GETFL) };\n+             if mode == -1 {\n+                 return None;\n+@@ -677,6 +681,8 @@ impl fmt::Debug for File {\n+                 libc::O_WRONLY => Some((false, true)),\n+                 _ => None\n+             }\n++            */\n++            unimplemented!();\n+         }\n+ \n+         #[cfg(not(any(target_os = \"linux\", target_os = \"macos\")))]\n+@@ -868,6 +874,7 @@ pub fn copy(from: &Path, to: &Path) -> io::Result<u64> {\n+         len: libc::size_t,\n+         flags: libc::c_uint,\n+     ) -> libc::c_long {\n++        /*\n+         libc::syscall(\n+             libc::SYS_copy_file_range,\n+             fd_in,\n+@@ -877,6 +884,8 @@ pub fn copy(from: &Path, to: &Path) -> io::Result<u64> {\n+             len,\n+             flags,\n+         )\n++        */\n++        unimplemented!();\n+     }\n+ \n+     if !from.is_file() {\n+diff --git a/src/libstd/sys/unix/net.rs b/src/libstd/sys/unix/net.rs\n+index 2d10541..19e96c4 100644\n+--- a/src/libstd/sys/unix/net.rs\n++++ b/src/libstd/sys/unix/net.rs\n+@@ -339,8 +339,11 @@ impl Socket {\n+     }\n+ \n+     pub fn set_nonblocking(&self, nonblocking: bool) -> io::Result<()> {\n++        /*\n+         let mut nonblocking = nonblocking as libc::c_int;\n+         cvt(unsafe { libc::ioctl(*self.as_inner(), libc::FIONBIO, &mut nonblocking) }).map(|_| ())\n++        */\n++        unimplemented!();\n+     }\n+ \n+     pub fn take_error(&self) -> io::Result<Option<io::Error>> {\n+diff --git a/src/libstd/sys/unix/rand.rs b/src/libstd/sys/unix/rand.rs\n+index 371e58a..28d4c68 100644\n+--- a/src/libstd/sys/unix/rand.rs\n++++ b/src/libstd/sys/unix/rand.rs\n+@@ -34,9 +34,12 @@ mod imp {\n+ \n+     #[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n+     fn getrandom(buf: &mut [u8]) -> libc::c_long {\n++        /*\n+         unsafe {\n+             libc::syscall(libc::SYS_getrandom, buf.as_mut_ptr(), buf.len(), libc::GRND_NONBLOCK)\n+         }\n++        */\n++        unimplemented!();\n+     }\n+ \n+     #[cfg(not(any(target_os = \"linux\", target_os = \"android\")))]\n+diff --git a/src/libstd/sys/unix/thread.rs b/src/libstd/sys/unix/thread.rs\n+index f3a45d2..1c2f0ce 100644\n+--- a/src/libstd/sys/unix/thread.rs\n++++ b/src/libstd/sys/unix/thread.rs\n+@@ -100,12 +100,15 @@ impl Thread {\n+     #[cfg(any(target_os = \"linux\",\n+               target_os = \"android\"))]\n+     pub fn set_name(name: &CStr) {\n++        /*\n+         const PR_SET_NAME: libc::c_int = 15;\n+         // pthread wrapper only appeared in glibc 2.12, so we use syscall\n+         // directly.\n+         unsafe {\n+             libc::prctl(PR_SET_NAME, name.as_ptr() as libc::c_ulong, 0, 0, 0);\n+         }\n++        */\n++        unimplemented!();\n+     }\n+ \n+     #[cfg(any(target_os = \"freebsd\",\n+-- \n+2.11.0\n+"}]}