{"sha": "adf98ab2dc6b3d8332873d41f3371a839b4e9df1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkZjk4YWIyZGM2YjNkODMzMjg3M2Q0MWYzMzcxYTgzOWI0ZTlkZjE=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-09-20T15:22:33Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-09-20T16:42:15Z"}, "message": "Use precise errors during const to pat conversion instead of a catch-all on the main constant", "tree": {"sha": "94db6d5558a7a37eb042c67e21409983f855f209", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94db6d5558a7a37eb042c67e21409983f855f209"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/adf98ab2dc6b3d8332873d41f3371a839b4e9df1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/adf98ab2dc6b3d8332873d41f3371a839b4e9df1", "html_url": "https://github.com/rust-lang/rust/commit/adf98ab2dc6b3d8332873d41f3371a839b4e9df1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/adf98ab2dc6b3d8332873d41f3371a839b4e9df1/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aba5ea1430df393eddc90068e838de6b1707c0d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/aba5ea1430df393eddc90068e838de6b1707c0d8", "html_url": "https://github.com/rust-lang/rust/commit/aba5ea1430df393eddc90068e838de6b1707c0d8"}], "stats": {"total": 355, "additions": 240, "deletions": 115}, "files": [{"sha": "ad0bcfeb367f946eed48dfd8d9b495cf6b957aa6", "filename": "compiler/rustc_mir_build/src/thir/pattern/const_to_pat.rs", "status": "modified", "additions": 73, "deletions": 12, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/adf98ab2dc6b3d8332873d41f3371a839b4e9df1/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adf98ab2dc6b3d8332873d41f3371a839b4e9df1/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs?ref=adf98ab2dc6b3d8332873d41f3371a839b4e9df1", "patch": "@@ -43,7 +43,7 @@ struct ConstToPat<'a, 'tcx> {\n     span: Span,\n     param_env: ty::ParamEnv<'tcx>,\n \n-    // This tracks if we signal some hard error for a given const value, so that\n+    // This tracks if we saw some error or lint for a given const value, so that\n     // we will not subsequently issue an irrelevant lint for the same const\n     // value.\n     saw_const_match_error: Cell<bool>,\n@@ -103,7 +103,7 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n         // once indirect_structural_match is a full fledged error, this\n         // level of indirection can be eliminated\n \n-        let inlined_const_as_pat = self.recur(cv);\n+        let inlined_const_as_pat = self.recur(cv, mir_structural_match_violation);\n \n         if self.include_lint_checks && !self.saw_const_match_error.get() {\n             // If we were able to successfully convert the const to some pat,\n@@ -216,7 +216,7 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n     }\n \n     // Recursive helper for `to_pat`; invoke that (instead of calling this directly).\n-    fn recur(&self, cv: &'tcx ty::Const<'tcx>) -> Pat<'tcx> {\n+    fn recur(&self, cv: &'tcx ty::Const<'tcx>, mir_structural_match_violation: bool) -> Pat<'tcx> {\n         let id = self.id;\n         let span = self.span;\n         let tcx = self.tcx();\n@@ -227,7 +227,7 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n                 .enumerate()\n                 .map(|(idx, val)| {\n                     let field = Field::new(idx);\n-                    FieldPat { field, pattern: self.recur(val) }\n+                    FieldPat { field, pattern: self.recur(val, false) }\n                 })\n                 .collect()\n         };\n@@ -248,6 +248,21 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n                 tcx.sess.span_err(span, \"cannot use unions in constant patterns\");\n                 PatKind::Wild\n             }\n+            ty::Adt(..)\n+                if !self.type_has_partial_eq_impl(cv.ty)\n+                    // FIXME(#73448): Find a way to bring const qualification into parity with\n+                    // `search_for_structural_match_violation` and then remove this condition.\n+                    && self.search_for_structural_match_violation(cv.ty).is_some() =>\n+            {\n+                let msg = format!(\n+                    \"to use a constant of type `{}` in a pattern, \\\n+                    `{}` must be annotated with `#[derive(PartialEq, Eq)]`\",\n+                    cv.ty, cv.ty,\n+                );\n+                self.saw_const_match_error.set(true);\n+                self.tcx().sess.span_err(self.span, &msg);\n+                PatKind::Wild\n+            }\n             // If the type is not structurally comparable, just emit the constant directly,\n             // causing the pattern match code to treat it opaquely.\n             // FIXME: This code doesn't emit errors itself, the caller emits the errors.\n@@ -258,6 +273,20 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n             // Backwards compatibility hack because we can't cause hard errors on these\n             // types, so we compare them via `PartialEq::eq` at runtime.\n             ty::Adt(..) if !self.type_marked_structural(cv.ty) && self.behind_reference.get() => {\n+                if self.include_lint_checks && !self.saw_const_match_error.get() {\n+                    self.saw_const_match_error.set(true);\n+                    let msg = format!(\n+                        \"to use a constant of type `{}` in a pattern, \\\n+                        `{}` must be annotated with `#[derive(PartialEq, Eq)]`\",\n+                        cv.ty, cv.ty,\n+                    );\n+                    tcx.struct_span_lint_hir(\n+                        lint::builtin::INDIRECT_STRUCTURAL_MATCH,\n+                        id,\n+                        span,\n+                        |lint| lint.build(&msg).emit(),\n+                    );\n+                }\n                 PatKind::Constant { value: cv }\n             }\n             ty::Adt(adt_def, _) if !self.type_marked_structural(cv.ty) => {\n@@ -292,14 +321,18 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n                     .destructure_const(param_env.and(cv))\n                     .fields\n                     .iter()\n-                    .map(|val| self.recur(val))\n+                    .map(|val| self.recur(val, false))\n                     .collect(),\n                 slice: None,\n                 suffix: Vec::new(),\n             },\n             ty::Ref(_, pointee_ty, ..) => match *pointee_ty.kind() {\n                 // These are not allowed and will error elsewhere anyway.\n-                ty::Dynamic(..) => PatKind::Constant { value: cv },\n+                ty::Dynamic(..) => {\n+                    self.saw_const_match_error.set(true);\n+                    tcx.sess.span_err(span, &format!(\"`{}` cannot be used in patterns\", cv.ty));\n+                    PatKind::Wild\n+                }\n                 // `&str` and `&[u8]` are represented as `ConstValue::Slice`, let's keep using this\n                 // optimization for now.\n                 ty::Str => PatKind::Constant { value: cv },\n@@ -321,7 +354,7 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n                                     .destructure_const(param_env.and(array))\n                                     .fields\n                                     .iter()\n-                                    .map(|val| self.recur(val))\n+                                    .map(|val| self.recur(val, false))\n                                     .collect(),\n                                 slice: None,\n                                 suffix: vec![],\n@@ -333,16 +366,21 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n                     self.behind_reference.set(old);\n                     val\n                 }\n-                // Backwards compatibility hack. Don't take away the reference, since\n-                // `PartialEq::eq` takes a reference, this makes the rest of the matching logic\n-                // simpler.\n+                // Backwards compatibility hack: support references to non-structural types.\n+                // We'll lower\n+                // this pattern to a `PartialEq::eq` comparison and `PartialEq::eq` takes a\n+                // reference. This makes the rest of the matching logic simpler as it doesn't have\n+                // to figure out how to get a reference again.\n                 ty::Adt(..) if !self.type_marked_structural(pointee_ty) => {\n                     PatKind::Constant { value: cv }\n                 }\n+                // All other references are converted into deref patterns and then recursively\n+                // convert the dereferenced constant to a pattern that is the sub-pattern of the\n+                // deref pattern.\n                 _ => {\n                     let old = self.behind_reference.replace(true);\n                     let val = PatKind::Deref {\n-                        subpattern: self.recur(tcx.deref_const(self.param_env.and(cv))),\n+                        subpattern: self.recur(tcx.deref_const(self.param_env.and(cv)), false),\n                     };\n                     self.behind_reference.set(old);\n                     val\n@@ -373,11 +411,34 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n                 PatKind::Constant { value: cv }\n             }\n             _ => {\n-                tcx.sess.delay_span_bug(span, &format!(\"cannot make a pattern out of {}\", cv.ty));\n+                self.saw_const_match_error.set(true);\n+                tcx.sess.span_err(span, &format!(\"`{}` cannot be used in patterns\", cv.ty));\n                 PatKind::Wild\n             }\n         };\n \n+        if self.include_lint_checks\n+            && !self.saw_const_match_error.get()\n+            && mir_structural_match_violation\n+            // FIXME(#73448): Find a way to bring const qualification into parity with\n+            // `search_for_structural_match_violation` and then remove this condition.\n+            && self.search_for_structural_match_violation(cv.ty).is_some()\n+        {\n+            self.saw_const_match_error.set(true);\n+            let msg = format!(\n+                \"to use a constant of type `{}` in a pattern, \\\n+                 the constant's initializer must be trivial or all types \\\n+                 in the constant must be annotated with `#[derive(PartialEq, Eq)]`\",\n+                cv.ty,\n+            );\n+            tcx.struct_span_lint_hir(\n+                lint::builtin::NONTRIVIAL_STRUCTURAL_MATCH,\n+                id,\n+                span,\n+                |lint| lint.build(&msg).emit(),\n+            );\n+        }\n+\n         Pat { span, ty: cv.ty, kind: Box::new(kind) }\n     }\n }"}, {"sha": "919aaf81ed207adccffd2296ce8cc81d9c51d1f0", "filename": "compiler/rustc_session/src/lint/builtin.rs", "status": "modified", "additions": 52, "deletions": 18, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/adf98ab2dc6b3d8332873d41f3371a839b4e9df1/compiler%2Frustc_session%2Fsrc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adf98ab2dc6b3d8332873d41f3371a839b4e9df1/compiler%2Frustc_session%2Fsrc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Flint%2Fbuiltin.rs?ref=adf98ab2dc6b3d8332873d41f3371a839b4e9df1", "patch": "@@ -2138,22 +2138,16 @@ declare_lint! {\n     /// ```rust,compile_fail\n     /// #![deny(indirect_structural_match)]\n     ///\n-    /// struct Plus(i32, i32);\n-    /// const ONE_PLUS_TWO: &&Plus = &&Plus(1, 2);\n-    ///\n-    /// impl PartialEq for Plus {\n-    ///     fn eq(&self, other: &Self) -> bool {\n-    ///         self.0 + self.1 == other.0 + other.1\n-    ///     }\n-    /// }\n-    ///\n-    /// impl Eq for Plus {}\n-    ///\n+    /// struct NoDerive(i32);\n+    /// impl PartialEq for NoDerive { fn eq(&self, _: &Self) -> bool { false } }\n+    /// impl Eq for NoDerive { }\n+    /// #[derive(PartialEq, Eq)]\n+    /// struct WrapParam<T>(T);\n+    /// const WRAP_INDIRECT_PARAM: & &WrapParam<NoDerive> = & &WrapParam(NoDerive(0));\n     /// fn main() {\n-    ///     if let ONE_PLUS_TWO = &&Plus(3, 0) {\n-    ///         println!(\"semantic!\");\n-    ///     } else {\n-    ///         println!(\"structural!\");\n+    ///     match WRAP_INDIRECT_PARAM {\n+    ///         WRAP_INDIRECT_PARAM => { }\n+    ///         _ => { }\n     ///     }\n     /// }\n     /// ```\n@@ -2170,9 +2164,8 @@ declare_lint! {\n     /// [issue #62411]: https://github.com/rust-lang/rust/issues/62411\n     /// [future-incompatible]: ../index.md#future-incompatible-lints\n     pub INDIRECT_STRUCTURAL_MATCH,\n-    // defaulting to allow until rust-lang/rust#62614 is fixed.\n-    Allow,\n-    \"pattern with const indirectly referencing non-structural-match type\",\n+    Warn,\n+    \"constant used in pattern contains value of non-structural-match type in a field or a variant\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #62411 <https://github.com/rust-lang/rust/issues/62411>\",\n         edition: None,\n@@ -2223,6 +2216,46 @@ declare_lint! {\n     };\n }\n \n+declare_lint! {\n+    /// The `nontrivial_structural_match` lint detects constants that are used in patterns,\n+    /// whose type is not structural-match and whose initializer body actually uses values\n+    /// that are not structural-match. So `Option<NotStruturalMatch>` is ok if the constant\n+    /// is just `None`.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust,compile_fail\n+    /// #![deny(nontrivial_structural_match)]\n+    ///\n+    /// struct Plus(i32, i32);\n+    /// const ONE_PLUS_TWO: &&Plus = &&Plus(1, 2);\n+    ///\n+    /// impl PartialEq for Plus {\n+    ///     fn eq(&self, other: &Self) -> bool {\n+    ///         self.0 + self.1 == other.0 + other.1\n+    ///     }\n+    /// }\n+    ///\n+    /// impl Eq for Plus {}\n+    ///\n+    /// fn main() {\n+    ///     if let ONE_PLUS_TWO = &&Plus(3, 0) {\n+    ///         println!(\"semantic!\");\n+    ///     } else {\n+    ///         println!(\"structural!\");\n+    ///     }\n+    /// }\n+    /// ```\n+    pub NONTRIVIAL_STRUCTURAL_MATCH,\n+    Warn,\n+    \"constant used in pattern of non-structural-match type and the constant's initializer \\\n+    expression contains values of non-structural-match types\",\n+    @future_incompatible = FutureIncompatibleInfo {\n+        reference: \"issue #73448 <https://github.com/rust-lang/rust/issues/73448>\",\n+        edition: None,\n+    };\n+}\n+\n declare_lint! {\n     /// The `ambiguous_associated_items` lint detects ambiguity between\n     /// [associated items] and [enum variants].\n@@ -2657,6 +2690,7 @@ declare_lint_pass! {\n         MUTABLE_BORROW_RESERVATION_CONFLICT,\n         INDIRECT_STRUCTURAL_MATCH,\n         POINTER_STRUCTURAL_MATCH,\n+        NONTRIVIAL_STRUCTURAL_MATCH,\n         SOFT_UNSTABLE,\n         INLINE_NO_SANITIZE,\n         ASM_SUB_REGISTER,"}, {"sha": "856d204178d42b8d3ed289567e1412ea70d86d55", "filename": "src/test/ui/consts/const_in_pattern/custom-eq-branch-warn.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/adf98ab2dc6b3d8332873d41f3371a839b4e9df1/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fcustom-eq-branch-warn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adf98ab2dc6b3d8332873d41f3371a839b4e9df1/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fcustom-eq-branch-warn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fcustom-eq-branch-warn.rs?ref=adf98ab2dc6b3d8332873d41f3371a839b4e9df1", "patch": "@@ -1,8 +1,5 @@\n // check-pass\n \n-#![warn(indirect_structural_match)]\n-//~^ NOTE lint level is defined here\n-\n struct CustomEq;\n \n impl Eq for CustomEq {}\n@@ -32,7 +29,8 @@ fn main() {\n         BAR_BAZ => panic!(),\n         //~^ WARN must be annotated with `#[derive(PartialEq, Eq)]`\n         //~| WARN this was previously accepted\n-        //~| NOTE see issue #62411\n+        //~| NOTE see issue #73448\n+        //~| NOTE `#[warn(nontrivial_structural_match)]` on by default\n         _ => {}\n     }\n }"}, {"sha": "fd6732195e49411793415288a6b07b0a63ef1f15", "filename": "src/test/ui/consts/const_in_pattern/custom-eq-branch-warn.stderr", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/adf98ab2dc6b3d8332873d41f3371a839b4e9df1/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fcustom-eq-branch-warn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/adf98ab2dc6b3d8332873d41f3371a839b4e9df1/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fcustom-eq-branch-warn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fcustom-eq-branch-warn.stderr?ref=adf98ab2dc6b3d8332873d41f3371a839b4e9df1", "patch": "@@ -1,16 +1,12 @@\n-warning: to use a constant of type `CustomEq` in a pattern, `CustomEq` must be annotated with `#[derive(PartialEq, Eq)]`\n-  --> $DIR/custom-eq-branch-warn.rs:32:9\n+warning: to use a constant of type `Foo` in a pattern, the constant's initializer must be trivial or all types in the constant must be annotated with `#[derive(PartialEq, Eq)]`\n+  --> $DIR/custom-eq-branch-warn.rs:29:9\n    |\n LL |         BAR_BAZ => panic!(),\n    |         ^^^^^^^\n    |\n-note: the lint level is defined here\n-  --> $DIR/custom-eq-branch-warn.rs:3:9\n-   |\n-LL | #![warn(indirect_structural_match)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: `#[warn(nontrivial_structural_match)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #62411 <https://github.com/rust-lang/rust/issues/62411>\n+   = note: for more information, see issue #73448 <https://github.com/rust-lang/rust/issues/73448>\n \n warning: 1 warning emitted\n "}, {"sha": "2b421f4c705ecddea3ab9d3cc5b94b6c4fdf14cf", "filename": "src/test/ui/consts/const_in_pattern/issue-65466.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/adf98ab2dc6b3d8332873d41f3371a839b4e9df1/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fissue-65466.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adf98ab2dc6b3d8332873d41f3371a839b4e9df1/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fissue-65466.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fissue-65466.rs?ref=adf98ab2dc6b3d8332873d41f3371a839b4e9df1", "patch": "@@ -1,9 +1,7 @@\n-// FIXME: This still ICEs.\n-//\n-// ignore-test\n-\n #![deny(indirect_structural_match)]\n \n+// check-pass\n+\n #[derive(PartialEq, Eq)]\n enum O<T> {\n     Some(*const T), // Can also use PhantomData<T>"}, {"sha": "9fe3049d1d85f3a6346dc25a90a0f104de7f6784", "filename": "src/test/ui/consts/const_in_pattern/issue-65466.stderr", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/aba5ea1430df393eddc90068e838de6b1707c0d8/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fissue-65466.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aba5ea1430df393eddc90068e838de6b1707c0d8/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fissue-65466.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fissue-65466.stderr?ref=aba5ea1430df393eddc90068e838de6b1707c0d8", "patch": "@@ -1,15 +0,0 @@\n-error[E0601]: `main` function not found in crate `issue_65466`\n-  --> $DIR/issue-65466.rs:1:1\n-   |\n-LL | / #![deny(indirect_structural_match)]\n-LL | |\n-LL | | #[derive(PartialEq, Eq)]\n-LL | | enum O<T> {\n-...  |\n-LL | |     }\n-LL | | }\n-   | |_^ consider adding a `main` function to `$DIR/issue-65466.rs`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0601`."}, {"sha": "b2b2daa830f8990cdc0727eca254494f96969667", "filename": "src/test/ui/consts/const_in_pattern/reject_non_partial_eq.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/adf98ab2dc6b3d8332873d41f3371a839b4e9df1/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Freject_non_partial_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adf98ab2dc6b3d8332873d41f3371a839b4e9df1/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Freject_non_partial_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Freject_non_partial_eq.rs?ref=adf98ab2dc6b3d8332873d41f3371a839b4e9df1", "patch": "@@ -27,6 +27,7 @@ fn main() {\n     match None {\n         NO_PARTIAL_EQ_NONE => println!(\"NO_PARTIAL_EQ_NONE\"),\n         //~^ ERROR must be annotated with `#[derive(PartialEq, Eq)]`\n+        //~| ERROR must be annotated with `#[derive(PartialEq, Eq)]`\n         _ => panic!(\"whoops\"),\n     }\n }"}, {"sha": "dc830d360031ac387610852dcc4243449a5716d8", "filename": "src/test/ui/consts/const_in_pattern/reject_non_partial_eq.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/adf98ab2dc6b3d8332873d41f3371a839b4e9df1/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Freject_non_partial_eq.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/adf98ab2dc6b3d8332873d41f3371a839b4e9df1/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Freject_non_partial_eq.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Freject_non_partial_eq.stderr?ref=adf98ab2dc6b3d8332873d41f3371a839b4e9df1", "patch": "@@ -1,8 +1,14 @@\n-error: to use a constant of type `NoPartialEq` in a pattern, `NoPartialEq` must be annotated with `#[derive(PartialEq, Eq)]`\n+error: to use a constant of type `Option<NoPartialEq>` in a pattern, `Option<NoPartialEq>` must be annotated with `#[derive(PartialEq, Eq)]`\n   --> $DIR/reject_non_partial_eq.rs:28:9\n    |\n LL |         NO_PARTIAL_EQ_NONE => println!(\"NO_PARTIAL_EQ_NONE\"),\n    |         ^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error\n+error: to use a constant of type `Option<NoPartialEq>` in a pattern, `Option<NoPartialEq>` must be annotated with `#[derive(PartialEq, Eq)]`\n+  --> $DIR/reject_non_partial_eq.rs:28:9\n+   |\n+LL |         NO_PARTIAL_EQ_NONE => println!(\"NO_PARTIAL_EQ_NONE\"),\n+   |         ^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n "}, {"sha": "a4feaff55b2e115e43eb19879992bb9e1ad95b20", "filename": "src/test/ui/consts/const_in_pattern/warn_corner_cases.stderr", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/adf98ab2dc6b3d8332873d41f3371a839b4e9df1/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fwarn_corner_cases.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/adf98ab2dc6b3d8332873d41f3371a839b4e9df1/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fwarn_corner_cases.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fwarn_corner_cases.stderr?ref=adf98ab2dc6b3d8332873d41f3371a839b4e9df1", "patch": "@@ -1,34 +1,30 @@\n-warning: to use a constant of type `NoDerive` in a pattern, `NoDerive` must be annotated with `#[derive(PartialEq, Eq)]`\n+warning: to use a constant of type `Option<NoDerive>` in a pattern, the constant's initializer must be trivial or all types in the constant must be annotated with `#[derive(PartialEq, Eq)]`\n   --> $DIR/warn_corner_cases.rs:26:47\n    |\n LL |     match None { Some(_) => panic!(\"whoops\"), INDEX => dbg!(INDEX), };\n    |                                               ^^^^^\n    |\n-note: the lint level is defined here\n-  --> $DIR/warn_corner_cases.rs:15:9\n-   |\n-LL | #![warn(indirect_structural_match)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: `#[warn(nontrivial_structural_match)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #62411 <https://github.com/rust-lang/rust/issues/62411>\n+   = note: for more information, see issue #73448 <https://github.com/rust-lang/rust/issues/73448>\n \n-warning: to use a constant of type `NoDerive` in a pattern, `NoDerive` must be annotated with `#[derive(PartialEq, Eq)]`\n+warning: to use a constant of type `Option<NoDerive>` in a pattern, the constant's initializer must be trivial or all types in the constant must be annotated with `#[derive(PartialEq, Eq)]`\n   --> $DIR/warn_corner_cases.rs:32:47\n    |\n LL |     match None { Some(_) => panic!(\"whoops\"), CALL => dbg!(CALL), };\n    |                                               ^^^^\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #62411 <https://github.com/rust-lang/rust/issues/62411>\n+   = note: for more information, see issue #73448 <https://github.com/rust-lang/rust/issues/73448>\n \n-warning: to use a constant of type `NoDerive` in a pattern, `NoDerive` must be annotated with `#[derive(PartialEq, Eq)]`\n+warning: to use a constant of type `Option<NoDerive>` in a pattern, the constant's initializer must be trivial or all types in the constant must be annotated with `#[derive(PartialEq, Eq)]`\n   --> $DIR/warn_corner_cases.rs:38:47\n    |\n LL |     match None { Some(_) => panic!(\"whoops\"), METHOD_CALL => dbg!(METHOD_CALL), };\n    |                                               ^^^^^^^^^^^\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #62411 <https://github.com/rust-lang/rust/issues/62411>\n+   = note: for more information, see issue #73448 <https://github.com/rust-lang/rust/issues/73448>\n \n warning: 3 warnings emitted\n "}, {"sha": "db76e230070890c9aca20ea5db0f68e15a4550be", "filename": "src/test/ui/consts/match_ice.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/adf98ab2dc6b3d8332873d41f3371a839b4e9df1/src%2Ftest%2Fui%2Fconsts%2Fmatch_ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adf98ab2dc6b3d8332873d41f3371a839b4e9df1/src%2Ftest%2Fui%2Fconsts%2Fmatch_ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmatch_ice.rs?ref=adf98ab2dc6b3d8332873d41f3371a839b4e9df1", "patch": "@@ -8,8 +8,10 @@ struct T;\n fn main() {\n     const C: &S = &S;\n     match C {\n+        //~^ non-exhaustive patterns: `&S` not covered\n         C => {}\n-        //~^ ERROR to use a constant of type `S` in a pattern, `S` must be annotated with\n+        //~^ WARN must be annotated with `#[derive(PartialEq, Eq)]`\n+        //~| WARN was previously accepted by the compiler\n     }\n     const K: &T = &T;\n     match K {"}, {"sha": "6cc79dbca7cc2219d0c8fbf6e357123dd3308b75", "filename": "src/test/ui/consts/match_ice.stderr", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/adf98ab2dc6b3d8332873d41f3371a839b4e9df1/src%2Ftest%2Fui%2Fconsts%2Fmatch_ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/adf98ab2dc6b3d8332873d41f3371a839b4e9df1/src%2Ftest%2Fui%2Fconsts%2Fmatch_ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmatch_ice.stderr?ref=adf98ab2dc6b3d8332873d41f3371a839b4e9df1", "patch": "@@ -1,8 +1,25 @@\n-error: to use a constant of type `S` in a pattern, `S` must be annotated with `#[derive(PartialEq, Eq)]`\n-  --> $DIR/match_ice.rs:11:9\n+warning: to use a constant of type `&S` in a pattern, the constant's initializer must be trivial or all types in the constant must be annotated with `#[derive(PartialEq, Eq)]`\n+  --> $DIR/match_ice.rs:12:9\n    |\n LL |         C => {}\n    |         ^\n+   |\n+   = note: `#[warn(nontrivial_structural_match)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #73448 <https://github.com/rust-lang/rust/issues/73448>\n+\n+error[E0004]: non-exhaustive patterns: `&S` not covered\n+  --> $DIR/match_ice.rs:10:11\n+   |\n+LL | struct S;\n+   | --------- `S` defined here\n+...\n+LL |     match C {\n+   |           ^ pattern `&S` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `&S`\n \n-error: aborting due to previous error\n+error: aborting due to previous error; 1 warning emitted\n \n+For more information about this error, try `rustc --explain E0004`."}, {"sha": "98d943470a7f9ac05aa3e31abd1997fca5e3b7a5", "filename": "src/test/ui/issues/issue-34784.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/adf98ab2dc6b3d8332873d41f3371a839b4e9df1/src%2Ftest%2Fui%2Fissues%2Fissue-34784.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adf98ab2dc6b3d8332873d41f3371a839b4e9df1/src%2Ftest%2Fui%2Fissues%2Fissue-34784.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34784.rs?ref=adf98ab2dc6b3d8332873d41f3371a839b4e9df1", "patch": "@@ -1,4 +1,6 @@\n // run-pass\n+\n+#![warn(pointer_structural_match)]\n #![allow(dead_code)]\n const C: *const u8 = &0;\n "}, {"sha": "b69e2dab2650bc7d5c05a1ab313f94e9b7cfe795", "filename": "src/test/ui/match/issue-70972-dyn-trait.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/adf98ab2dc6b3d8332873d41f3371a839b4e9df1/src%2Ftest%2Fui%2Fmatch%2Fissue-70972-dyn-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adf98ab2dc6b3d8332873d41f3371a839b4e9df1/src%2Ftest%2Fui%2Fmatch%2Fissue-70972-dyn-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fissue-70972-dyn-trait.rs?ref=adf98ab2dc6b3d8332873d41f3371a839b4e9df1", "patch": "@@ -4,7 +4,8 @@ fn main() {\n     let a: &dyn Send = &7u32;\n     match a {\n         F => panic!(),\n-        //~^ ERROR trait objects cannot be used in patterns\n+        //~^ ERROR `&dyn Send` cannot be used in patterns\n+        //~| ERROR `&dyn Send` cannot be used in patterns\n         _ => {}\n     }\n }"}, {"sha": "985799b3c8357973cfab8a8ffb1695125031ef15", "filename": "src/test/ui/match/issue-70972-dyn-trait.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/adf98ab2dc6b3d8332873d41f3371a839b4e9df1/src%2Ftest%2Fui%2Fmatch%2Fissue-70972-dyn-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/adf98ab2dc6b3d8332873d41f3371a839b4e9df1/src%2Ftest%2Fui%2Fmatch%2Fissue-70972-dyn-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fissue-70972-dyn-trait.stderr?ref=adf98ab2dc6b3d8332873d41f3371a839b4e9df1", "patch": "@@ -1,8 +1,14 @@\n-error: trait objects cannot be used in patterns\n+error: `&dyn Send` cannot be used in patterns\n   --> $DIR/issue-70972-dyn-trait.rs:6:9\n    |\n LL |         F => panic!(),\n    |         ^\n \n-error: aborting due to previous error\n+error: `&dyn Send` cannot be used in patterns\n+  --> $DIR/issue-70972-dyn-trait.rs:6:9\n+   |\n+LL |         F => panic!(),\n+   |         ^\n+\n+error: aborting due to 2 previous errors\n "}, {"sha": "0c38b533a16e6fd0365840bdeb149dc93f2a4ca5", "filename": "src/test/ui/pattern/issue-71042-opaquely-typed-constant-used-in-pattern.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/adf98ab2dc6b3d8332873d41f3371a839b4e9df1/src%2Ftest%2Fui%2Fpattern%2Fissue-71042-opaquely-typed-constant-used-in-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adf98ab2dc6b3d8332873d41f3371a839b4e9df1/src%2Ftest%2Fui%2Fpattern%2Fissue-71042-opaquely-typed-constant-used-in-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fissue-71042-opaquely-typed-constant-used-in-pattern.rs?ref=adf98ab2dc6b3d8332873d41f3371a839b4e9df1", "patch": "@@ -4,6 +4,8 @@\n fn main() {\n     const C: impl Copy = 0;\n     match C {\n-        C | _ => {} //~ ERROR: opaque types cannot be used in patterns\n+        C => {} //~ ERROR: `impl Copy` cannot be used in patterns\n+        //~^ ERROR: `impl Copy` cannot be used in patterns\n+        _ => {}\n     }\n }"}, {"sha": "ad6cc0aa3e3e9ed9c8829b635271169b6c42f0c1", "filename": "src/test/ui/pattern/issue-71042-opaquely-typed-constant-used-in-pattern.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/adf98ab2dc6b3d8332873d41f3371a839b4e9df1/src%2Ftest%2Fui%2Fpattern%2Fissue-71042-opaquely-typed-constant-used-in-pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/adf98ab2dc6b3d8332873d41f3371a839b4e9df1/src%2Ftest%2Fui%2Fpattern%2Fissue-71042-opaquely-typed-constant-used-in-pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fissue-71042-opaquely-typed-constant-used-in-pattern.stderr?ref=adf98ab2dc6b3d8332873d41f3371a839b4e9df1", "patch": "@@ -1,8 +1,14 @@\n-error: opaque types cannot be used in patterns\n+error: `impl Copy` cannot be used in patterns\n   --> $DIR/issue-71042-opaquely-typed-constant-used-in-pattern.rs:7:9\n    |\n-LL |         C | _ => {}\n+LL |         C => {}\n    |         ^\n \n-error: aborting due to previous error\n+error: `impl Copy` cannot be used in patterns\n+  --> $DIR/issue-71042-opaquely-typed-constant-used-in-pattern.rs:7:9\n+   |\n+LL |         C => {}\n+   |         ^\n+\n+error: aborting due to 2 previous errors\n "}, {"sha": "c6d7166e74065bde8a2c5ca1fc42619a8193a632", "filename": "src/test/ui/rfc1445/allow-hide-behind-direct-unsafe-ptr-embedded.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/adf98ab2dc6b3d8332873d41f3371a839b4e9df1/src%2Ftest%2Fui%2Frfc1445%2Fallow-hide-behind-direct-unsafe-ptr-embedded.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adf98ab2dc6b3d8332873d41f3371a839b4e9df1/src%2Ftest%2Fui%2Frfc1445%2Fallow-hide-behind-direct-unsafe-ptr-embedded.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1445%2Fallow-hide-behind-direct-unsafe-ptr-embedded.rs?ref=adf98ab2dc6b3d8332873d41f3371a839b4e9df1", "patch": "@@ -3,6 +3,8 @@\n \n // run-pass\n \n+#![warn(pointer_structural_match)]\n+\n struct NoDerive(i32);\n \n // This impl makes NoDerive irreflexive"}, {"sha": "cc7ea6cde8d7f3bea786f4460fc9a2f0197dac34", "filename": "src/test/ui/rfc1445/allow-hide-behind-direct-unsafe-ptr-param.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/adf98ab2dc6b3d8332873d41f3371a839b4e9df1/src%2Ftest%2Fui%2Frfc1445%2Fallow-hide-behind-direct-unsafe-ptr-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adf98ab2dc6b3d8332873d41f3371a839b4e9df1/src%2Ftest%2Fui%2Frfc1445%2Fallow-hide-behind-direct-unsafe-ptr-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1445%2Fallow-hide-behind-direct-unsafe-ptr-param.rs?ref=adf98ab2dc6b3d8332873d41f3371a839b4e9df1", "patch": "@@ -3,6 +3,8 @@\n \n // run-pass\n \n+#![warn(pointer_structural_match)]\n+\n struct NoDerive(i32);\n \n // This impl makes NoDerive irreflexive"}, {"sha": "86db09cc08fc8a0194f16c0dc92ba14fbb1ab02f", "filename": "src/test/ui/rfc1445/allow-hide-behind-indirect-unsafe-ptr-embedded.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/adf98ab2dc6b3d8332873d41f3371a839b4e9df1/src%2Ftest%2Fui%2Frfc1445%2Fallow-hide-behind-indirect-unsafe-ptr-embedded.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adf98ab2dc6b3d8332873d41f3371a839b4e9df1/src%2Ftest%2Fui%2Frfc1445%2Fallow-hide-behind-indirect-unsafe-ptr-embedded.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1445%2Fallow-hide-behind-indirect-unsafe-ptr-embedded.rs?ref=adf98ab2dc6b3d8332873d41f3371a839b4e9df1", "patch": "@@ -3,6 +3,8 @@\n \n // run-pass\n \n+#![warn(pointer_structural_match)]\n+\n struct NoDerive(i32);\n \n // This impl makes NoDerive irreflexive"}, {"sha": "99c574d0780457345a05e8d9387df403d39b142d", "filename": "src/test/ui/rfc1445/allow-hide-behind-indirect-unsafe-ptr-param.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/adf98ab2dc6b3d8332873d41f3371a839b4e9df1/src%2Ftest%2Fui%2Frfc1445%2Fallow-hide-behind-indirect-unsafe-ptr-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adf98ab2dc6b3d8332873d41f3371a839b4e9df1/src%2Ftest%2Fui%2Frfc1445%2Fallow-hide-behind-indirect-unsafe-ptr-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1445%2Fallow-hide-behind-indirect-unsafe-ptr-param.rs?ref=adf98ab2dc6b3d8332873d41f3371a839b4e9df1", "patch": "@@ -3,6 +3,8 @@\n \n // run-pass\n \n+#![warn(pointer_structural_match)]\n+\n struct NoDerive(i32);\n \n // This impl makes NoDerive irreflexive"}, {"sha": "eb13eed6ec11b7047c572da0a4da7830d5a06ed5", "filename": "src/test/ui/rfc1445/cant-hide-behind-doubly-indirect-embedded.stderr", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/adf98ab2dc6b3d8332873d41f3371a839b4e9df1/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-doubly-indirect-embedded.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/adf98ab2dc6b3d8332873d41f3371a839b4e9df1/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-doubly-indirect-embedded.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-doubly-indirect-embedded.stderr?ref=adf98ab2dc6b3d8332873d41f3371a839b4e9df1", "patch": "@@ -1,16 +1,12 @@\n-warning: to use a constant of type `NoDerive` in a pattern, `NoDerive` must be annotated with `#[derive(PartialEq, Eq)]`\n+warning: to use a constant of type `&&WrapInline` in a pattern, the constant's initializer must be trivial or all types in the constant must be annotated with `#[derive(PartialEq, Eq)]`\n   --> $DIR/cant-hide-behind-doubly-indirect-embedded.rs:24:9\n    |\n LL |         WRAP_DOUBLY_INDIRECT_INLINE => { panic!(\"WRAP_DOUBLY_INDIRECT_INLINE matched itself\"); }\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the lint level is defined here\n-  --> $DIR/cant-hide-behind-doubly-indirect-embedded.rs:7:9\n-   |\n-LL | #![warn(indirect_structural_match)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: `#[warn(nontrivial_structural_match)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #62411 <https://github.com/rust-lang/rust/issues/62411>\n+   = note: for more information, see issue #73448 <https://github.com/rust-lang/rust/issues/73448>\n \n warning: 1 warning emitted\n "}, {"sha": "ddee99e76bbb9fc5ded5f5653de4396a05f68d6f", "filename": "src/test/ui/rfc1445/cant-hide-behind-doubly-indirect-param.stderr", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/adf98ab2dc6b3d8332873d41f3371a839b4e9df1/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-doubly-indirect-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/adf98ab2dc6b3d8332873d41f3371a839b4e9df1/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-doubly-indirect-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1445%2Fcant-hide-behind-doubly-indirect-param.stderr?ref=adf98ab2dc6b3d8332873d41f3371a839b4e9df1", "patch": "@@ -1,16 +1,12 @@\n-warning: to use a constant of type `NoDerive` in a pattern, `NoDerive` must be annotated with `#[derive(PartialEq, Eq)]`\n+warning: to use a constant of type `&&WrapParam<NoDerive>` in a pattern, the constant's initializer must be trivial or all types in the constant must be annotated with `#[derive(PartialEq, Eq)]`\n   --> $DIR/cant-hide-behind-doubly-indirect-param.rs:24:9\n    |\n LL |         WRAP_DOUBLY_INDIRECT_PARAM => { panic!(\"WRAP_DOUBLY_INDIRECT_PARAM matched itself\"); }\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the lint level is defined here\n-  --> $DIR/cant-hide-behind-doubly-indirect-param.rs:7:9\n-   |\n-LL | #![warn(indirect_structural_match)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: `#[warn(nontrivial_structural_match)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #62411 <https://github.com/rust-lang/rust/issues/62411>\n+   = note: for more information, see issue #73448 <https://github.com/rust-lang/rust/issues/73448>\n \n warning: 1 warning emitted\n "}, {"sha": "b5e19611da83ad035e387dc74fdb70e2e160f0f5", "filename": "src/test/ui/rfc1445/issue-62307-match-ref-ref-forbidden-without-eq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/adf98ab2dc6b3d8332873d41f3371a839b4e9df1/src%2Ftest%2Fui%2Frfc1445%2Fissue-62307-match-ref-ref-forbidden-without-eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adf98ab2dc6b3d8332873d41f3371a839b4e9df1/src%2Ftest%2Fui%2Frfc1445%2Fissue-62307-match-ref-ref-forbidden-without-eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1445%2Fissue-62307-match-ref-ref-forbidden-without-eq.rs?ref=adf98ab2dc6b3d8332873d41f3371a839b4e9df1", "patch": "@@ -10,7 +10,7 @@\n \n // Issue 62307 pointed out a case where the structural-match checking\n // was too shallow.\n-#![warn(indirect_structural_match)]\n+#![warn(indirect_structural_match, nontrivial_structural_match)]\n // run-pass\n \n #[derive(Debug)]"}, {"sha": "7f4b4923332a4bf3efabe8bb6a34f2beb65727f2", "filename": "src/test/ui/rfc1445/issue-62307-match-ref-ref-forbidden-without-eq.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/adf98ab2dc6b3d8332873d41f3371a839b4e9df1/src%2Ftest%2Fui%2Frfc1445%2Fissue-62307-match-ref-ref-forbidden-without-eq.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/adf98ab2dc6b3d8332873d41f3371a839b4e9df1/src%2Ftest%2Fui%2Frfc1445%2Fissue-62307-match-ref-ref-forbidden-without-eq.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1445%2Fissue-62307-match-ref-ref-forbidden-without-eq.stderr?ref=adf98ab2dc6b3d8332873d41f3371a839b4e9df1", "patch": "@@ -1,25 +1,25 @@\n-warning: to use a constant of type `B` in a pattern, `B` must be annotated with `#[derive(PartialEq, Eq)]`\n+warning: to use a constant of type `&&B` in a pattern, the constant's initializer must be trivial or all types in the constant must be annotated with `#[derive(PartialEq, Eq)]`\n   --> $DIR/issue-62307-match-ref-ref-forbidden-without-eq.rs:31:9\n    |\n LL |         RR_B1 => { println!(\"CLAIM RR0: {:?} matches {:?}\", RR_B1, RR_B0); }\n    |         ^^^^^\n    |\n note: the lint level is defined here\n-  --> $DIR/issue-62307-match-ref-ref-forbidden-without-eq.rs:13:9\n+  --> $DIR/issue-62307-match-ref-ref-forbidden-without-eq.rs:13:36\n    |\n-LL | #![warn(indirect_structural_match)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #![warn(indirect_structural_match, nontrivial_structural_match)]\n+   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #62411 <https://github.com/rust-lang/rust/issues/62411>\n+   = note: for more information, see issue #73448 <https://github.com/rust-lang/rust/issues/73448>\n \n-warning: to use a constant of type `B` in a pattern, `B` must be annotated with `#[derive(PartialEq, Eq)]`\n+warning: to use a constant of type `&&B` in a pattern, the constant's initializer must be trivial or all types in the constant must be annotated with `#[derive(PartialEq, Eq)]`\n   --> $DIR/issue-62307-match-ref-ref-forbidden-without-eq.rs:38:9\n    |\n LL |         RR_B1 => { println!(\"CLAIM RR1: {:?} matches {:?}\", RR_B1, RR_B1); }\n    |         ^^^^^\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: for more information, see issue #62411 <https://github.com/rust-lang/rust/issues/62411>\n+   = note: for more information, see issue #73448 <https://github.com/rust-lang/rust/issues/73448>\n \n warning: 2 warnings emitted\n "}, {"sha": "54fc4956b9b2825753922e574c900e6554db0224", "filename": "src/test/ui/type-alias-impl-trait/structural-match-no-leak.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/adf98ab2dc6b3d8332873d41f3371a839b4e9df1/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match-no-leak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adf98ab2dc6b3d8332873d41f3371a839b4e9df1/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match-no-leak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match-no-leak.rs?ref=adf98ab2dc6b3d8332873d41f3371a839b4e9df1", "patch": "@@ -12,9 +12,10 @@ const LEAK_FREE: Bar = leak_free();\n fn leak_free_test() {\n     match todo!() {\n         LEAK_FREE => (),\n-        //~^ opaque types cannot be used in patterns\n+        //~^ `impl Send` cannot be used in patterns\n+        //~| `impl Send` cannot be used in patterns\n         _ => (),\n     }\n }\n \n-fn main() { }\n+fn main() {}"}, {"sha": "90b44f6598df6647792101eaa1540f1d9f2e790d", "filename": "src/test/ui/type-alias-impl-trait/structural-match-no-leak.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/adf98ab2dc6b3d8332873d41f3371a839b4e9df1/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match-no-leak.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/adf98ab2dc6b3d8332873d41f3371a839b4e9df1/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match-no-leak.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match-no-leak.stderr?ref=adf98ab2dc6b3d8332873d41f3371a839b4e9df1", "patch": "@@ -1,8 +1,14 @@\n-error: opaque types cannot be used in patterns\n+error: `impl Send` cannot be used in patterns\n   --> $DIR/structural-match-no-leak.rs:14:9\n    |\n LL |         LEAK_FREE => (),\n    |         ^^^^^^^^^\n \n-error: aborting due to previous error\n+error: `impl Send` cannot be used in patterns\n+  --> $DIR/structural-match-no-leak.rs:14:9\n+   |\n+LL |         LEAK_FREE => (),\n+   |         ^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n "}, {"sha": "5fe5bb4bdeaa83a9112589f97595b5a24390286b", "filename": "src/test/ui/type-alias-impl-trait/structural-match.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/adf98ab2dc6b3d8332873d41f3371a839b4e9df1/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adf98ab2dc6b3d8332873d41f3371a839b4e9df1/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match.rs?ref=adf98ab2dc6b3d8332873d41f3371a839b4e9df1", "patch": "@@ -13,9 +13,10 @@ const VALUE: Foo = value();\n fn test() {\n     match todo!() {\n         VALUE => (),\n-        //~^ opaque types cannot be used in patterns\n+        //~^ `impl Send` cannot be used in patterns\n+        //~| `impl Send` cannot be used in patterns\n         _ => (),\n     }\n }\n \n-fn main() { }\n+fn main() {}"}, {"sha": "7aca3ba8640f14e033b392bb60a4bfe958ad977b", "filename": "src/test/ui/type-alias-impl-trait/structural-match.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/adf98ab2dc6b3d8332873d41f3371a839b4e9df1/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/adf98ab2dc6b3d8332873d41f3371a839b4e9df1/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match.stderr?ref=adf98ab2dc6b3d8332873d41f3371a839b4e9df1", "patch": "@@ -1,8 +1,14 @@\n-error: opaque types cannot be used in patterns\n+error: `impl Send` cannot be used in patterns\n   --> $DIR/structural-match.rs:15:9\n    |\n LL |         VALUE => (),\n    |         ^^^^^\n \n-error: aborting due to previous error\n+error: `impl Send` cannot be used in patterns\n+  --> $DIR/structural-match.rs:15:9\n+   |\n+LL |         VALUE => (),\n+   |         ^^^^^\n+\n+error: aborting due to 2 previous errors\n "}]}