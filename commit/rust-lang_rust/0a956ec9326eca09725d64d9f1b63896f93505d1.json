{"sha": "0a956ec9326eca09725d64d9f1b63896f93505d1", "node_id": "C_kwDOAAsO6NoAKDBhOTU2ZWM5MzI2ZWNhMDk3MjVkNjRkOWYxYjYzODk2ZjkzNTA1ZDE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-05T16:27:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-05T16:27:48Z"}, "message": "Auto merge of #14255 - HKalbasi:const-hex, r=HKalbasi\n\nBring back the hex in const hover", "tree": {"sha": "3d8edcb6a5da2f0d350756b68fd5ba5c3c38e1d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d8edcb6a5da2f0d350756b68fd5ba5c3c38e1d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a956ec9326eca09725d64d9f1b63896f93505d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a956ec9326eca09725d64d9f1b63896f93505d1", "html_url": "https://github.com/rust-lang/rust/commit/0a956ec9326eca09725d64d9f1b63896f93505d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a956ec9326eca09725d64d9f1b63896f93505d1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6ba791dcecfb2d69e831e204f06f2d3bf86323a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6ba791dcecfb2d69e831e204f06f2d3bf86323a", "html_url": "https://github.com/rust-lang/rust/commit/e6ba791dcecfb2d69e831e204f06f2d3bf86323a"}, {"sha": "ae8ce99d976bc25935bc2c7b09c978aee7d5863c", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae8ce99d976bc25935bc2c7b09c978aee7d5863c", "html_url": "https://github.com/rust-lang/rust/commit/ae8ce99d976bc25935bc2c7b09c978aee7d5863c"}], "stats": {"total": 78, "additions": 66, "deletions": 12}, "files": [{"sha": "6dde4773602238572164ad883f88c1284bf4f0ec", "filename": "crates/hir-ty/src/display.rs", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0a956ec9326eca09725d64d9f1b63896f93505d1/crates%2Fhir-ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a956ec9326eca09725d64d9f1b63896f93505d1/crates%2Fhir-ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fdisplay.rs?ref=0a956ec9326eca09725d64d9f1b63896f93505d1", "patch": "@@ -5,7 +5,7 @@\n use std::fmt::{self, Debug};\n \n use base_db::CrateId;\n-use chalk_ir::BoundVar;\n+use chalk_ir::{BoundVar, TyKind};\n use hir_def::{\n     adt::VariantData,\n     body,\n@@ -36,7 +36,7 @@ use crate::{\n     AdtId, AliasEq, AliasTy, Binders, CallableDefId, CallableSig, Const, ConstScalar, ConstValue,\n     DomainGoal, GenericArg, ImplTraitId, Interner, Lifetime, LifetimeData, LifetimeOutlives,\n     MemoryMap, Mutability, OpaqueTy, ProjectionTy, ProjectionTyExt, QuantifiedWhereClause, Scalar,\n-    Substitution, TraitRef, TraitRefExt, Ty, TyExt, TyKind, WhereClause,\n+    Substitution, TraitRef, TraitRefExt, Ty, TyExt, WhereClause,\n };\n \n pub trait HirWrite: fmt::Write {\n@@ -383,6 +383,28 @@ impl HirDisplay for Const {\n     }\n }\n \n+pub struct HexifiedConst(pub Const);\n+\n+impl HirDisplay for HexifiedConst {\n+    fn hir_fmt(&self, f: &mut HirFormatter<'_>) -> Result<(), HirDisplayError> {\n+        let data = &self.0.data(Interner);\n+        if let TyKind::Scalar(s) = data.ty.kind(Interner) {\n+            if matches!(s, Scalar::Int(_) | Scalar::Uint(_)) {\n+                if let ConstValue::Concrete(c) = &data.value {\n+                    if let ConstScalar::Bytes(b, m) = &c.interned {\n+                        let value = u128::from_le_bytes(pad16(b, false));\n+                        if value >= 10 {\n+                            render_const_scalar(f, &b, m, &data.ty)?;\n+                            return write!(f, \" ({:#X})\", value);\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+        self.0.hir_fmt(f)\n+    }\n+}\n+\n fn render_const_scalar(\n     f: &mut HirFormatter<'_>,\n     b: &[u8],"}, {"sha": "df6484db536ed21e6d6d0cbc35f781b59859be74", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0a956ec9326eca09725d64d9f1b63896f93505d1/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a956ec9326eca09725d64d9f1b63896f93505d1/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=0a956ec9326eca09725d64d9f1b63896f93505d1", "patch": "@@ -60,6 +60,7 @@ use hir_ty::{\n     all_super_traits, autoderef,\n     consteval::{try_const_usize, unknown_const_as_generic, ConstEvalError, ConstExt},\n     diagnostics::BodyValidationDiagnostic,\n+    display::HexifiedConst,\n     layout::layout_of_ty,\n     method_resolution::{self, TyFingerprint},\n     mir::interpret_mir,\n@@ -1883,8 +1884,18 @@ impl Const {\n         Type::new_with_resolver_inner(db, &resolver, ty)\n     }\n \n-    pub fn eval(self, db: &dyn HirDatabase) -> Result<hir_ty::Const, ConstEvalError> {\n-        db.const_eval(self.id)\n+    pub fn render_eval(self, db: &dyn HirDatabase) -> Result<String, ConstEvalError> {\n+        let c = db.const_eval(self.id)?;\n+        let r = format!(\"{}\", HexifiedConst(c).display(db));\n+        // We want to see things like `<utf8-error>` and `<layout-error>` as they are probably bug in our\n+        // implementation, but there is no need to show things like `<enum-not-supported>` or `<ref-not-supported>` to\n+        // the user.\n+        if r.contains(\"not-supported>\") {\n+            return Err(ConstEvalError::MirEvalError(MirEvalError::NotSupported(\n+                \"rendering complex constants\".to_string(),\n+            )));\n+        }\n+        return Ok(r);\n     }\n }\n "}, {"sha": "6a29ddf59e18611081ecb10ea5e2fe17747be9f1", "filename": "crates/ide/src/hover/render.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a956ec9326eca09725d64d9f1b63896f93505d1/crates%2Fide%2Fsrc%2Fhover%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a956ec9326eca09725d64d9f1b63896f93505d1/crates%2Fide%2Fsrc%2Fhover%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover%2Frender.rs?ref=0a956ec9326eca09725d64d9f1b63896f93505d1", "patch": "@@ -432,9 +432,9 @@ pub(super) fn definition(\n             }\n         }),\n         Definition::Const(it) => label_value_and_docs(db, it, |it| {\n-            let body = it.eval(db);\n+            let body = it.render_eval(db);\n             match body {\n-                Ok(x) => Some(format!(\"{}\", x.display(db))),\n+                Ok(x) => Some(x),\n                 Err(_) => {\n                     let source = it.source(db)?;\n                     let mut body = source.value.body()?.syntax().clone();"}, {"sha": "57bf0f9ad5f3cbd95370caf003ed7efcbff24c31", "filename": "crates/ide/src/hover/tests.rs", "status": "modified", "additions": 27, "deletions": 6, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/0a956ec9326eca09725d64d9f1b63896f93505d1/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a956ec9326eca09725d64d9f1b63896f93505d1/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs?ref=0a956ec9326eca09725d64d9f1b63896f93505d1", "patch": "@@ -531,7 +531,7 @@ fn hover_const_static() {\n             ```\n \n             ```rust\n-            const foo: u32 = 123\n+            const foo: u32 = 123 (0x7B)\n             ```\n         \"#]],\n     );\n@@ -3770,7 +3770,6 @@ const FOO$0: usize = 1 << 3;\n             This is a doc\n         \"#]],\n     );\n-    // FIXME: show hex for >10\n     check(\n         r#\"\n /// This is a doc\n@@ -3784,7 +3783,7 @@ const FOO$0: usize = (1 << 3) + (1 << 2);\n             ```\n \n             ```rust\n-            const FOO: usize = 12\n+            const FOO: usize = 12 (0xC)\n             ```\n \n             ---\n@@ -3828,7 +3827,7 @@ const FOO$0: i32 = 2 - 3;\n             ```\n \n             ```rust\n-            const FOO: i32 = -1\n+            const FOO: i32 = -1 (0xFFFFFFFF)\n             ```\n \n             ---\n@@ -3915,7 +3914,7 @@ const FOO$0: u8 = b'a';\n             ```\n \n             ```rust\n-            const FOO: u8 = 97\n+            const FOO: u8 = 97 (0x61)\n             ```\n \n             ---\n@@ -3937,7 +3936,7 @@ const FOO$0: u8 = b'\\x61';\n             ```\n \n             ```rust\n-            const FOO: u8 = 97\n+            const FOO: u8 = 97 (0x61)\n             ```\n \n             ---\n@@ -3989,6 +3988,28 @@ const FOO$0: f32 = 1f32;\n             This is a doc\n         \"#]],\n     );\n+    // Don't show `<ref-not-supported>` in const hover\n+    check(\n+        r#\"\n+/// This is a doc\n+const FOO$0: &i32 = &2;\n+\"#,\n+        expect![[r#\"\n+            *FOO*\n+\n+            ```rust\n+            test\n+            ```\n+\n+            ```rust\n+            const FOO: &i32 = &2\n+            ```\n+\n+            ---\n+\n+            This is a doc\n+        \"#]],\n+    );\n     //show f64 typecasted from float\n     check(\n         r#\""}]}