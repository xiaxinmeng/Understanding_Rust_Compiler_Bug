{"sha": "d4f57620ae3a221d94a893f57fc31f96a8a3a0ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0ZjU3NjIwYWUzYTIyMWQ5NGE4OTNmNTdmYzMxZjk2YThhM2EwYWU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-21T06:08:24Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-22T00:14:02Z"}, "message": "rustdoc: Implement a parallel fold", "tree": {"sha": "a0e8043cda56d374a0102374869d6346d06da5cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0e8043cda56d374a0102374869d6346d06da5cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4f57620ae3a221d94a893f57fc31f96a8a3a0ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4f57620ae3a221d94a893f57fc31f96a8a3a0ae", "html_url": "https://github.com/rust-lang/rust/commit/d4f57620ae3a221d94a893f57fc31f96a8a3a0ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4f57620ae3a221d94a893f57fc31f96a8a3a0ae/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7599d2dd51eb76892c929404dd7b49265e9f7c8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/7599d2dd51eb76892c929404dd7b49265e9f7c8f", "html_url": "https://github.com/rust-lang/rust/commit/7599d2dd51eb76892c929404dd7b49265e9f7c8f"}], "stats": {"total": 119, "additions": 92, "deletions": 27}, "files": [{"sha": "777dc0f83e9892364c6835f45598931ccc14b5ec", "filename": "src/rustdoc/fold.rs", "status": "modified", "additions": 72, "deletions": 27, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/d4f57620ae3a221d94a893f57fc31f96a8a3a0ae/src%2Frustdoc%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4f57620ae3a221d94a893f57fc31f96a8a3a0ae/src%2Frustdoc%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Ffold.rs?ref=d4f57620ae3a221d94a893f57fc31f96a8a3a0ae", "patch": "@@ -11,6 +11,8 @@ export default_seq_fold_res;\n export default_seq_fold_iface;\n export default_seq_fold_impl;\n export default_seq_fold_type;\n+export default_par_fold;\n+export default_par_fold_mod;\n \n enum fold<T> = t<T>;\n \n@@ -86,6 +88,22 @@ fn default_seq_fold<T:copy>(ctxt: T) -> fold<T> {\n     )\n }\n \n+fn default_par_fold<T:send>(ctxt: T) -> fold<T> {\n+    mk_fold(\n+        ctxt,\n+        {|f, d| default_seq_fold_crate(f, d)},\n+        {|f, d| default_seq_fold_item(f, d)},\n+        {|f, d| default_par_fold_mod(f, d)},\n+        {|f, d| default_seq_fold_fn(f, d)},\n+        {|f, d| default_seq_fold_const(f, d)},\n+        {|f, d| default_seq_fold_enum(f, d)},\n+        {|f, d| default_seq_fold_res(f, d)},\n+        {|f, d| default_seq_fold_iface(f, d)},\n+        {|f, d| default_seq_fold_impl(f, d)},\n+        {|f, d| default_seq_fold_type(f, d)}\n+    )\n+}\n+\n fn default_seq_fold_crate<T>(\n     fold: fold<T>,\n     doc: doc::cratedoc\n@@ -109,37 +127,54 @@ fn default_seq_fold_mod<T>(\n     {\n         item: fold.fold_item(fold, doc.item),\n         items: ~vec::map(*doc.items) {|itemtag|\n-            alt itemtag {\n-              doc::modtag(moddoc) {\n-                doc::modtag(fold.fold_mod(fold, moddoc))\n-              }\n-              doc::fntag(fndoc) {\n-                doc::fntag(fold.fold_fn(fold, fndoc))\n-              }\n-              doc::consttag(constdoc) {\n-                doc::consttag(fold.fold_const(fold, constdoc))\n-              }\n-              doc::enumtag(enumdoc) {\n-                doc::enumtag(fold.fold_enum(fold, enumdoc))\n-              }\n-              doc::restag(resdoc) {\n-                doc::restag(fold.fold_res(fold, resdoc))\n-              }\n-              doc::ifacetag(ifacedoc) {\n-                doc::ifacetag(fold.fold_iface(fold, ifacedoc))\n-              }\n-              doc::impltag(impldoc) {\n-                doc::impltag(fold.fold_impl(fold, impldoc))\n-              }\n-              doc::tytag(tydoc) {\n-                doc::tytag(fold.fold_type(fold, tydoc))\n-              }\n-            }\n+            fold_itemtag(fold, itemtag)\n+        }\n+        with doc\n+    }\n+}\n+\n+fn default_par_fold_mod<T:send>(\n+    fold: fold<T>,\n+    doc: doc::moddoc\n+) -> doc::moddoc {\n+    {\n+        item: fold.fold_item(fold, doc.item),\n+        items: ~util::parmap(*doc.items) {|itemtag|\n+            fold_itemtag(fold, itemtag)\n         }\n         with doc\n     }\n }\n \n+fn fold_itemtag<T>(fold: fold<T>, doc: doc::itemtag) -> doc::itemtag {\n+    alt doc {\n+      doc::modtag(moddoc) {\n+        doc::modtag(fold.fold_mod(fold, moddoc))\n+      }\n+      doc::fntag(fndoc) {\n+        doc::fntag(fold.fold_fn(fold, fndoc))\n+      }\n+      doc::consttag(constdoc) {\n+        doc::consttag(fold.fold_const(fold, constdoc))\n+      }\n+      doc::enumtag(enumdoc) {\n+        doc::enumtag(fold.fold_enum(fold, enumdoc))\n+      }\n+      doc::restag(resdoc) {\n+        doc::restag(fold.fold_res(fold, resdoc))\n+      }\n+      doc::ifacetag(ifacedoc) {\n+        doc::ifacetag(fold.fold_iface(fold, ifacedoc))\n+      }\n+      doc::impltag(impldoc) {\n+        doc::impltag(fold.fold_impl(fold, impldoc))\n+      }\n+      doc::tytag(tydoc) {\n+        doc::tytag(fold.fold_type(fold, tydoc))\n+      }\n+    }\n+}\n+\n fn default_seq_fold_fn<T>(\n     fold: fold<T>,\n     doc: doc::fndoc\n@@ -238,4 +273,14 @@ fn default_fold_should_produce_same_enums() {\n     let fld = default_seq_fold(());\n     let folded = fld.fold_crate(fld, doc);\n     assert doc == folded;\n-}\n\\ No newline at end of file\n+}\n+\n+#[test]\n+fn default_parallel_fold_should_produce_same_doc() {\n+    let source = \"mod a { fn b() { } mod c { fn d() { } } }\";\n+    let ast = parse::from_str(source);\n+    let doc = extract::extract(ast, \"\");\n+    let fld = default_par_fold(());\n+    let folded = fld.fold_crate(fld, doc);\n+    assert doc == folded;\n+}"}, {"sha": "2991f490ecd070cb0ebde8ffd1993837058eb9da", "filename": "src/rustdoc/rustdoc.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d4f57620ae3a221d94a893f57fc31f96a8a3a0ae/src%2Frustdoc%2Frustdoc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/d4f57620ae3a221d94a893f57fc31f96a8a3a0ae/src%2Frustdoc%2Frustdoc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Frustdoc.rc?ref=d4f57620ae3a221d94a893f57fc31f96a8a3a0ae", "patch": "@@ -34,3 +34,4 @@ mod sort_pass;\n mod sort_item_name_pass;\n mod sort_item_type_pass;\n mod reexport_pass;\n+mod util;"}, {"sha": "b864cad99835d543a85e6e2ec5c3137d51f7b0d3", "filename": "src/rustdoc/util.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d4f57620ae3a221d94a893f57fc31f96a8a3a0ae/src%2Frustdoc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4f57620ae3a221d94a893f57fc31f96a8a3a0ae/src%2Frustdoc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Futil.rs?ref=d4f57620ae3a221d94a893f57fc31f96a8a3a0ae", "patch": "@@ -0,0 +1,19 @@\n+export parmap;\n+\n+fn parmap<T:send, U:send>(v: [T], f: fn~(T) -> U) -> [U] {\n+    let futures = vec::map(v) {|elt|\n+        future::spawn {||\n+            f(elt)\n+        }\n+    };\n+    vec::map(futures) {|future|\n+        future::get(future)\n+    }\n+}\n+\n+#[test]\n+fn test_parallel_map() {\n+    let i = [1, 2, 3, 4];\n+    let j = parmap(i) {|e| e + 1 };\n+    assert j == [2, 3, 4, 5];\n+}\n\\ No newline at end of file"}]}