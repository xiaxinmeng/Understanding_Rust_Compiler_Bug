{"sha": "e5f35df2c6944b843b08369c4b2ff3bdb0beb2d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1ZjM1ZGYyYzY5NDRiODQzYjA4MzY5YzRiMmZmM2JkYjBiZWIyZDI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-03T12:05:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-03T12:05:46Z"}, "message": "Auto merge of #70825 - eddyb:enum-discr-correct-generics-parent, r=nikomatsakis\n\ntypeck: always expose explicit enum discriminant `AnonConst`s' parent in `generics_of`.\n\nThis is similar to #70452 but for explicit `enum` discriminant constant expressions.\nHowever, unlike #70452, this PR should have no effect on stable code, as while it alleviates #43408 errors, there is no way to actually compile an `enum` with generic parameters *and* explicit discriminants, without `#![feature(arbitrary_enum_discriminant)]`, as explicit discriminant expression don't count as uses of parameters (if they did, they would count as invariant uses).\n\n<hr/>\n\nThere's also 2 other commits here, both related to #70453:\n* \"ty: use `delay_span_bug` in `ty::AdtDef::eval_explicit_discr`.\" - hides the ICEs demonstrated on #70453, when there are other errors (which the next commit adds)\n* \"typeck/wfcheck: require that explicit enum discriminants const-evaluate succesfully.\" - closes #70453 by picking alternative \"2\", i.e. erroring when a discriminant doesn't fully const-evaluate from the perspective of the `enum` definition\n\nIn the future, it might be possible to allow `enum` discriminants to actually depend on parameters, but that will likely require #68436 + some way to restrict the values so no two variants can end up with overlapping discriminants.\n\nAs this PR would close #70453, it shouldn't be merged until a decision is reached there.\n\nr? @nikomatsakis", "tree": {"sha": "8e125542a16e6d045f8e1dc01af69b818c7af889", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e125542a16e6d045f8e1dc01af69b818c7af889"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5f35df2c6944b843b08369c4b2ff3bdb0beb2d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5f35df2c6944b843b08369c4b2ff3bdb0beb2d2", "html_url": "https://github.com/rust-lang/rust/commit/e5f35df2c6944b843b08369c4b2ff3bdb0beb2d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5f35df2c6944b843b08369c4b2ff3bdb0beb2d2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d626e4dadc37d7027d65f087da0ad1ddb460959f", "url": "https://api.github.com/repos/rust-lang/rust/commits/d626e4dadc37d7027d65f087da0ad1ddb460959f", "html_url": "https://github.com/rust-lang/rust/commit/d626e4dadc37d7027d65f087da0ad1ddb460959f"}, {"sha": "926c7a298d413166a11e0b5069e038c26de25df5", "url": "https://api.github.com/repos/rust-lang/rust/commits/926c7a298d413166a11e0b5069e038c26de25df5", "html_url": "https://github.com/rust-lang/rust/commit/926c7a298d413166a11e0b5069e038c26de25df5"}], "stats": {"total": 145, "additions": 126, "deletions": 19}, "files": [{"sha": "8bb9934789a234d35c2526b28f5261a4f263f786", "filename": "src/librustc_middle/ty/mod.rs", "status": "modified", "additions": 8, "deletions": 15, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e5f35df2c6944b843b08369c4b2ff3bdb0beb2d2/src%2Flibrustc_middle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5f35df2c6944b843b08369c4b2ff3bdb0beb2d2/src%2Flibrustc_middle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fmod.rs?ref=e5f35df2c6944b843b08369c4b2ff3bdb0beb2d2", "patch": "@@ -2388,21 +2388,14 @@ impl<'tcx> AdtDef {\n                     None\n                 }\n             }\n-            Err(ErrorHandled::Reported(ErrorReported) | ErrorHandled::Linted) => {\n-                if !expr_did.is_local() {\n-                    span_bug!(\n-                        tcx.def_span(expr_did),\n-                        \"variant discriminant evaluation succeeded \\\n-                         in its crate but failed locally\"\n-                    );\n-                }\n-                None\n-            }\n-            Err(ErrorHandled::TooGeneric) => {\n-                tcx.sess.delay_span_bug(\n-                    tcx.def_span(expr_did),\n-                    \"enum discriminant depends on generic arguments\",\n-                );\n+            Err(err) => {\n+                let msg = match err {\n+                    ErrorHandled::Reported(ErrorReported) | ErrorHandled::Linted => {\n+                        \"enum discriminant evaluation failed\"\n+                    }\n+                    ErrorHandled::TooGeneric => \"enum discriminant depends on generics\",\n+                };\n+                tcx.sess.delay_span_bug(tcx.def_span(expr_did), msg);\n                 None\n             }\n         }"}, {"sha": "e82e40503e08b05494d93bca6375eda9fd38b07d", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 35, "deletions": 2, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/e5f35df2c6944b843b08369c4b2ff3bdb0beb2d2/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5f35df2c6944b843b08369c4b2ff3bdb0beb2d2/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=e5f35df2c6944b843b08369c4b2ff3bdb0beb2d2", "patch": "@@ -411,6 +411,23 @@ fn check_type_defn<'tcx, F>(\n                     ObligationCauseCode::MiscObligation,\n                 )\n             }\n+\n+            // Explicit `enum` discriminant values must const-evaluate successfully.\n+            if let Some(discr_def_id) = variant.explicit_discr {\n+                let discr_substs =\n+                    InternalSubsts::identity_for_item(fcx.tcx, discr_def_id.to_def_id());\n+\n+                let cause = traits::ObligationCause::new(\n+                    fcx.tcx.def_span(discr_def_id),\n+                    fcx.body_id,\n+                    traits::MiscObligation,\n+                );\n+                fcx.register_predicate(traits::Obligation::new(\n+                    cause,\n+                    fcx.param_env,\n+                    ty::Predicate::ConstEvaluatable(discr_def_id.to_def_id(), discr_substs),\n+                ));\n+            }\n         }\n \n         check_where_clauses(tcx, fcx, item.span, def_id.to_def_id(), None);\n@@ -1287,8 +1304,14 @@ impl ParItemLikeVisitor<'tcx> for CheckTypeWellFormedVisitor<'tcx> {\n ///////////////////////////////////////////////////////////////////////////\n // ADT\n \n+// FIXME(eddyb) replace this with getting fields/discriminants through `ty::AdtDef`.\n struct AdtVariant<'tcx> {\n+    /// Types of fields in the variant, that must be well-formed.\n     fields: Vec<AdtField<'tcx>>,\n+\n+    /// Explicit discriminant of this variant (e.g. `A = 123`),\n+    /// that must evaluate to a constant value.\n+    explicit_discr: Option<LocalDefId>,\n }\n \n struct AdtField<'tcx> {\n@@ -1297,6 +1320,7 @@ struct AdtField<'tcx> {\n }\n \n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n+    // FIXME(eddyb) replace this with getting fields through `ty::AdtDef`.\n     fn non_enum_variant(&self, struct_def: &hir::VariantData<'_>) -> AdtVariant<'tcx> {\n         let fields = struct_def\n             .fields()\n@@ -1309,11 +1333,20 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 AdtField { ty: field_ty, span: field.span }\n             })\n             .collect();\n-        AdtVariant { fields }\n+        AdtVariant { fields, explicit_discr: None }\n     }\n \n     fn enum_variants(&self, enum_def: &hir::EnumDef<'_>) -> Vec<AdtVariant<'tcx>> {\n-        enum_def.variants.iter().map(|variant| self.non_enum_variant(&variant.data)).collect()\n+        enum_def\n+            .variants\n+            .iter()\n+            .map(|variant| AdtVariant {\n+                fields: self.non_enum_variant(&variant.data).fields,\n+                explicit_discr: variant\n+                    .disr_expr\n+                    .map(|explicit_discr| self.tcx.hir().local_def_id(explicit_discr.hir_id)),\n+            })\n+            .collect()\n     }\n \n     fn impl_implied_bounds(&self, impl_def_id: DefId, span: Span) -> Vec<Ty<'tcx>> {"}, {"sha": "0fad328459890e3fa4c2005dc56b0952b4328cf3", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e5f35df2c6944b843b08369c4b2ff3bdb0beb2d2/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5f35df2c6944b843b08369c4b2ff3bdb0beb2d2/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=e5f35df2c6944b843b08369c4b2ff3bdb0beb2d2", "patch": "@@ -1178,9 +1178,11 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n                 let parent_node = tcx.hir().get(tcx.hir().get_parent_node(hir_id));\n                 match parent_node {\n                     // HACK(eddyb) this provides the correct generics for repeat\n-                    // expressions' count (i.e. `N` in `[x; N]`), as they shouldn't\n-                    // be able to cause query cycle errors.\n+                    // expressions' count (i.e. `N` in `[x; N]`), and explicit\n+                    // `enum` discriminants (i.e. `D` in `enum Foo { Bar = D }`),\n+                    // as they shouldn't be able to cause query cycle errors.\n                     Node::Expr(&Expr { kind: ExprKind::Repeat(_, ref constant), .. })\n+                    | Node::Variant(Variant { disr_expr: Some(ref constant), .. })\n                         if constant.hir_id == hir_id =>\n                     {\n                         Some(parent_def_id.to_def_id())"}, {"sha": "0cfb93d466835adc95d29a8337d8fdab578eadda", "filename": "src/test/ui/enum-discriminant/issue-70453-generics-in-discr-ice-2.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e5f35df2c6944b843b08369c4b2ff3bdb0beb2d2/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70453-generics-in-discr-ice-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5f35df2c6944b843b08369c4b2ff3bdb0beb2d2/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70453-generics-in-discr-ice-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70453-generics-in-discr-ice-2.rs?ref=e5f35df2c6944b843b08369c4b2ff3bdb0beb2d2", "patch": "@@ -0,0 +1,16 @@\n+#![feature(arbitrary_enum_discriminant, core_intrinsics)]\n+\n+extern crate core;\n+use core::intrinsics::discriminant_value;\n+\n+#[repr(usize)]\n+enum MyWeirdOption<T> {\n+    None = 0,\n+    Some(T) = std::mem::size_of::<T>(),\n+    //~^ ERROR constant expression depends on a generic parameter\n+}\n+\n+fn main() {\n+    assert_eq!(discriminant_value(&MyWeirdOption::<u8>::None), 0);\n+    assert_eq!(discriminant_value(&MyWeirdOption::Some(0u8)), 1);\n+}"}, {"sha": "91d488a07cc6df61575be045f6ab1d7fd06dac89", "filename": "src/test/ui/enum-discriminant/issue-70453-generics-in-discr-ice-2.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e5f35df2c6944b843b08369c4b2ff3bdb0beb2d2/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70453-generics-in-discr-ice-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5f35df2c6944b843b08369c4b2ff3bdb0beb2d2/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70453-generics-in-discr-ice-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70453-generics-in-discr-ice-2.stderr?ref=e5f35df2c6944b843b08369c4b2ff3bdb0beb2d2", "patch": "@@ -0,0 +1,10 @@\n+error: constant expression depends on a generic parameter\n+  --> $DIR/issue-70453-generics-in-discr-ice-2.rs:9:15\n+   |\n+LL |     Some(T) = std::mem::size_of::<T>(),\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n+error: aborting due to previous error\n+"}, {"sha": "676f1115dde01cd8e8ee574c8810d98c5796bc21", "filename": "src/test/ui/enum-discriminant/issue-70453-generics-in-discr-ice.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e5f35df2c6944b843b08369c4b2ff3bdb0beb2d2/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70453-generics-in-discr-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5f35df2c6944b843b08369c4b2ff3bdb0beb2d2/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70453-generics-in-discr-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70453-generics-in-discr-ice.rs?ref=e5f35df2c6944b843b08369c4b2ff3bdb0beb2d2", "patch": "@@ -0,0 +1,17 @@\n+#![feature(core_intrinsics)]\n+\n+extern crate core;\n+use core::intrinsics::discriminant_value;\n+\n+#[repr(usize)]\n+enum MyWeirdOption<T> {\n+//~^ ERROR parameter `T` is never used\n+    None = 0,\n+    Some = std::mem::size_of::<T>(),\n+    //~^ ERROR constant expression depends on a generic parameter\n+}\n+\n+fn main() {\n+    assert_eq!(discriminant_value(&MyWeirdOption::<u8>::None), 0);\n+    assert_eq!(discriminant_value(&MyWeirdOption::<u8>::Some), 1);\n+}"}, {"sha": "52e58aa4c6d70039075a63f1d15881686b7e6b4d", "filename": "src/test/ui/enum-discriminant/issue-70453-generics-in-discr-ice.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e5f35df2c6944b843b08369c4b2ff3bdb0beb2d2/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70453-generics-in-discr-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5f35df2c6944b843b08369c4b2ff3bdb0beb2d2/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70453-generics-in-discr-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70453-generics-in-discr-ice.stderr?ref=e5f35df2c6944b843b08369c4b2ff3bdb0beb2d2", "patch": "@@ -0,0 +1,19 @@\n+error: constant expression depends on a generic parameter\n+  --> $DIR/issue-70453-generics-in-discr-ice.rs:10:12\n+   |\n+LL |     Some = std::mem::size_of::<T>(),\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n+error[E0392]: parameter `T` is never used\n+  --> $DIR/issue-70453-generics-in-discr-ice.rs:7:20\n+   |\n+LL | enum MyWeirdOption<T> {\n+   |                    ^ unused parameter\n+   |\n+   = help: consider removing `T`, referring to it in a field, or using a marker such as `std::marker::PhantomData`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0392`."}, {"sha": "05911a9a3036e7088388b17aff54b71d5a133424", "filename": "src/test/ui/enum-discriminant/issue-70453-polymorphic-ctfe.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e5f35df2c6944b843b08369c4b2ff3bdb0beb2d2/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70453-polymorphic-ctfe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5f35df2c6944b843b08369c4b2ff3bdb0beb2d2/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70453-polymorphic-ctfe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70453-polymorphic-ctfe.rs?ref=e5f35df2c6944b843b08369c4b2ff3bdb0beb2d2", "patch": "@@ -0,0 +1,17 @@\n+// run-pass\n+\n+#![feature(arbitrary_enum_discriminant, core_intrinsics)]\n+\n+extern crate core;\n+use core::intrinsics::discriminant_value;\n+\n+#[repr(usize)]\n+enum MyWeirdOption<T> {\n+    None = 0,\n+    Some(T) = core::mem::size_of::<*mut T>(),\n+}\n+\n+fn main() {\n+    assert_eq!(discriminant_value(&MyWeirdOption::<()>::None), 0);\n+    assert_eq!(discriminant_value(&MyWeirdOption::Some(())), core::mem::size_of::<usize>() as u64);\n+}"}]}