{"sha": "611866f3cfb129202bc229659c1e8f4f313b330e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxMTg2NmYzY2ZiMTI5MjAyYmMyMjk2NTljMWU4ZjRmMzEzYjMzMGU=", "commit": {"author": {"name": "QuietMisdreavus", "email": "grey@quietmisdreavus.net", "date": "2017-12-28T16:52:40Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-01-22T09:54:27Z"}, "message": "cleanup", "tree": {"sha": "da2a814189d7ab98811691c07590e18bf9b7aab3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da2a814189d7ab98811691c07590e18bf9b7aab3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/611866f3cfb129202bc229659c1e8f4f313b330e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/611866f3cfb129202bc229659c1e8f4f313b330e", "html_url": "https://github.com/rust-lang/rust/commit/611866f3cfb129202bc229659c1e8f4f313b330e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/611866f3cfb129202bc229659c1e8f4f313b330e/comments", "author": {"login": "QuietMisdreavus", "id": 5217170, "node_id": "MDQ6VXNlcjUyMTcxNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/5217170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuietMisdreavus", "html_url": "https://github.com/QuietMisdreavus", "followers_url": "https://api.github.com/users/QuietMisdreavus/followers", "following_url": "https://api.github.com/users/QuietMisdreavus/following{/other_user}", "gists_url": "https://api.github.com/users/QuietMisdreavus/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuietMisdreavus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuietMisdreavus/subscriptions", "organizations_url": "https://api.github.com/users/QuietMisdreavus/orgs", "repos_url": "https://api.github.com/users/QuietMisdreavus/repos", "events_url": "https://api.github.com/users/QuietMisdreavus/events{/privacy}", "received_events_url": "https://api.github.com/users/QuietMisdreavus/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e8dd5df69b67b30ec92e0198f1ade6476916d463", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8dd5df69b67b30ec92e0198f1ade6476916d463", "html_url": "https://github.com/rust-lang/rust/commit/e8dd5df69b67b30ec92e0198f1ade6476916d463"}], "stats": {"total": 73, "additions": 47, "deletions": 26}, "files": [{"sha": "f2154f885fa4a22fa05f0493bb422a54ff57cf36", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/611866f3cfb129202bc229659c1e8f4f313b330e/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/611866f3cfb129202bc229659c1e8f4f313b330e/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=611866f3cfb129202bc229659c1e8f4f313b330e", "patch": "@@ -152,9 +152,9 @@ pub trait Resolver {\n     /// This should only return `None` during testing.\n     fn definitions(&mut self) -> &mut Definitions;\n \n-    /// Given suffix [\"b\",\"c\",\"d\"], returns path `::cratename::b::c::d` when\n-    /// The path is also resolved according to `is_value`.\n-    fn std_path(&mut self, span: Span, crate_root: Option<&str>,\n+    /// Given suffix [\"b\",\"c\",\"d\"], creates a HIR path for `[::crate_root]::b::c::d` and resolves\n+    /// it based on `is_value`.\n+    fn resolve_str_path(&mut self, span: Span, crate_root: Option<&str>,\n                 components: &[&str], is_value: bool) -> hir::Path {\n         let mut path = hir::Path {\n             span,\n@@ -3641,7 +3641,7 @@ impl<'a> LoweringContext<'a> {\n     /// `fld.cx.use_std`, and `::core::b::c::d` otherwise.\n     /// The path is also resolved according to `is_value`.\n     fn std_path(&mut self, span: Span, components: &[&str], is_value: bool) -> hir::Path {\n-        self.resolver.std_path(span, self.crate_root, components, is_value)\n+        self.resolver.resolve_str_path(span, self.crate_root, components, is_value)\n     }\n \n     fn signal_block_expr(&mut self,"}, {"sha": "b2897bd454839cf77ff1f8aaf8334dcd9b2601b7", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/611866f3cfb129202bc229659c1e8f4f313b330e/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/611866f3cfb129202bc229659c1e8f4f313b330e/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=611866f3cfb129202bc229659c1e8f4f313b330e", "patch": "@@ -576,8 +576,8 @@ pub struct InnerExpansionResult<'a> {\n /// standard library and prelude, and name resolution.\n ///\n /// Returns `None` if we're aborting after handling -W help.\n-pub fn phase_2_configure_and_expand<'a, F>(sess: &'a Session,\n-                                       cstore: &'a CStore,\n+pub fn phase_2_configure_and_expand<F>(sess: &Session,\n+                                       cstore: &CStore,\n                                        krate: ast::Crate,\n                                        registry: Option<Registry>,\n                                        crate_name: &str,\n@@ -593,8 +593,9 @@ pub fn phase_2_configure_and_expand<'a, F>(sess: &'a Session,\n     // this back at some point.\n     let mut crate_loader = CrateLoader::new(sess, &cstore, &crate_name);\n     let resolver_arenas = Resolver::arenas();\n-    let result = phase_2_configure_and_expand_inner(sess, cstore, krate, registry, crate_name, addl_plugins,\n-                                                    make_glob_map, &resolver_arenas, &mut crate_loader, after_expand);\n+    let result = phase_2_configure_and_expand_inner(sess, cstore, krate, registry, crate_name,\n+                                                    addl_plugins, make_glob_map, &resolver_arenas,\n+                                                    &mut crate_loader, after_expand);\n     match result {\n         Ok(InnerExpansionResult {expanded_crate, resolver, hir_forest}) => {\n             Ok(ExpansionResult {"}, {"sha": "ed072331847403d2109681716a6c0ff5f8203456", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/611866f3cfb129202bc229659c1e8f4f313b330e/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/611866f3cfb129202bc229659c1e8f4f313b330e/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=611866f3cfb129202bc229659c1e8f4f313b330e", "patch": "@@ -127,7 +127,7 @@ pub struct Crate {\n     pub masked_crates: FxHashSet<CrateNum>,\n }\n \n-impl<'a, 'b, 'tcx, 'rcx> Clean<Crate> for visit_ast::RustdocVisitor<'a, 'b, 'tcx, 'rcx> {\n+impl<'a, 'tcx, 'rcx> Clean<Crate> for visit_ast::RustdocVisitor<'a, 'tcx, 'rcx> {\n     fn clean(&self, cx: &DocContext) -> Crate {\n         use ::visit_lib::LibEmbargoVisitor;\n \n@@ -836,11 +836,11 @@ impl Clean<Attributes> for [ast::Attribute] {\n                 }\n \n                 let path = {\n-                    // This allocation could be avoided if std_path could take an iterator;\n+                    // This allocation could be avoided if resolve_str_path could take an iterator;\n                     // but it can't because that would break object safety. This can still be\n                     // fixed.\n                     let components = link.split(\"::\").skip(1).collect::<Vec<_>>();\n-                    cx.resolver.borrow_mut().std_path(DUMMY_SP, None, &components, false)\n+                    cx.resolver.borrow_mut().resolve_str_path(DUMMY_SP, None, &components, false)\n                 };\n \n                 if path.def != Def::Err {"}, {"sha": "86657aa000b0daff87f9aa1d39fdacb998067c95", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/611866f3cfb129202bc229659c1e8f4f313b330e/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/611866f3cfb129202bc229659c1e8f4f313b330e/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=611866f3cfb129202bc229659c1e8f4f313b330e", "patch": "@@ -269,7 +269,8 @@ impl<'a, 'b, I: Iterator<Item = Event<'a>>> Iterator for LinkReplacer<'a, 'b, I>\n     fn next(&mut self) -> Option<Self::Item> {\n         let event = self.inner.next();\n         if let Some(Event::Start(Tag::Link(dest, text))) = event {\n-            if let Some(&(_, ref replace)) = self.links.into_iter().find(|link| &*link.0 == &*dest) {\n+            if let Some(&(_, ref replace)) = self.links.into_iter().find(|link| &*link.0 == &*dest)\n+            {\n                 Some(Event::Start(Tag::Link(replace.to_owned().into(), text)))\n             } else {\n                 Some(Event::Start(Tag::Link(dest, text)))\n@@ -1045,7 +1046,11 @@ impl<'a> fmt::Display for Markdown<'a> {\n             let mut s = String::with_capacity(md.len() * 3 / 2);\n \n             html::push_html(&mut s,\n-                            Footnotes::new(CodeBlocks::new(LinkReplacer::new(HeadingLinks::new(p, None), links))));\n+                            Footnotes::new(\n+                                CodeBlocks::new(\n+                                    LinkReplacer::new(\n+                                        HeadingLinks::new(p, None),\n+                                        links))));\n \n             fmt.write_str(&s)\n         }\n@@ -1233,6 +1238,7 @@ pub fn markdown_links(md: &str, render_type: RenderType) -> Vec<String> {\n                 hoedown_document_free(document);\n \n                 hoedown_html_renderer_free(renderer);\n+                hoedown_buffer_free(ob);\n \n                 opaque.links.unwrap()\n             }"}, {"sha": "5dea05cedbeaf2d53536bfc3e3e7bb0cab7c5219", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/611866f3cfb129202bc229659c1e8f4f313b330e/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/611866f3cfb129202bc229659c1e8f4f313b330e/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=611866f3cfb129202bc229659c1e8f4f313b330e", "patch": "@@ -1867,7 +1867,8 @@ fn render_markdown(w: &mut fmt::Formatter,\n                    prefix: &str,\n                    scx: &SharedContext)\n                    -> fmt::Result {\n-    let (hoedown_output, pulldown_output) = render_text(|ty| format!(\"{}\", Markdown(md_text, &links, ty)));\n+    let (hoedown_output, pulldown_output) =\n+        render_text(|ty| format!(\"{}\", Markdown(md_text, &links, ty)));\n     let mut differences = html_diff::get_differences(&pulldown_output, &hoedown_output);\n     differences.retain(|s| {\n         match *s {\n@@ -1899,7 +1900,13 @@ fn document_short(w: &mut fmt::Formatter, item: &clean::Item, link: AssocItemLin\n         } else {\n             format!(\"{}\", &plain_summary_line(Some(s)))\n         };\n-        render_markdown(w, &markdown, item.links(), item.source.clone(), cx.render_type, prefix, &cx.shared)?;\n+        render_markdown(w,\n+                        &markdown,\n+                        item.links(),\n+                        item.source.clone(),\n+                        cx.render_type,\n+                        prefix,\n+                        &cx.shared)?;\n     } else if !prefix.is_empty() {\n         write!(w, \"<div class='docblock'>{}</div>\", prefix)?;\n     }\n@@ -1925,7 +1932,13 @@ fn document_full(w: &mut fmt::Formatter, item: &clean::Item,\n                  cx: &Context, prefix: &str) -> fmt::Result {\n     if let Some(s) = cx.shared.maybe_collapsed_doc_value(item) {\n         debug!(\"Doc block: =====\\n{}\\n=====\", s);\n-        render_markdown(w, &*s, item.links(), item.source.clone(), cx.render_type, prefix, &cx.shared)?;\n+        render_markdown(w,\n+                        &*s,\n+                        item.links(),\n+                        item.source.clone(),\n+                        cx.render_type,\n+                        prefix,\n+                        &cx.shared)?;\n     } else if !prefix.is_empty() {\n         write!(w, \"<div class='docblock'>{}</div>\", prefix)?;\n     }\n@@ -3339,7 +3352,8 @@ fn render_impl(w: &mut fmt::Formatter, cx: &Context, i: &Impl, link: AssocItemLi\n         write!(w, \"</span>\")?;\n         write!(w, \"</h3>\\n\")?;\n         if let Some(ref dox) = cx.shared.maybe_collapsed_doc_value(&i.impl_item) {\n-            write!(w, \"<div class='docblock'>{}</div>\", Markdown(&*dox, &i.impl_item.links(), cx.render_type))?;\n+            write!(w, \"<div class='docblock'>{}</div>\",\n+                   Markdown(&*dox, &i.impl_item.links(), cx.render_type))?;\n         }\n     }\n "}, {"sha": "01c2a5620da25af332a813e9b8857f01b3c72f8a", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/611866f3cfb129202bc229659c1e8f4f313b330e/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/611866f3cfb129202bc229659c1e8f4f313b330e/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=611866f3cfb129202bc229659c1e8f4f313b330e", "patch": "@@ -12,7 +12,7 @@\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n        html_root_url = \"https://doc.rust-lang.org/nightly/\",\n        html_playground_url = \"https://play.rust-lang.org/\")]\n-\n+#![deny(warnings)]\n \n #![feature(ascii_ctype)]\n #![feature(rustc_private)]"}, {"sha": "7b208465369fc128388914aff1245c4618e92122", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/611866f3cfb129202bc229659c1e8f4f313b330e/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/611866f3cfb129202bc229659c1e8f4f313b330e/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=611866f3cfb129202bc229659c1e8f4f313b330e", "patch": "@@ -40,21 +40,21 @@ use doctree::*;\n // also, is there some reason that this doesn't use the 'visit'\n // framework from syntax?\n \n-pub struct RustdocVisitor<'a, 'b: 'a, 'tcx: 'b, 'rcx: 'b> {\n+pub struct RustdocVisitor<'a, 'tcx: 'a, 'rcx: 'a> {\n     cstore: &'a CrateStore,\n     pub module: Module,\n     pub attrs: hir::HirVec<ast::Attribute>,\n-    pub cx: &'a core::DocContext<'b, 'tcx, 'rcx>,\n+    pub cx: &'a core::DocContext<'a, 'tcx, 'rcx>,\n     view_item_stack: FxHashSet<ast::NodeId>,\n     inlining: bool,\n     /// Is the current module and all of its parents public?\n     inside_public_path: bool,\n     reexported_macros: FxHashSet<DefId>,\n }\n \n-impl<'a, 'b, 'tcx, 'rcx> RustdocVisitor<'a, 'b, 'tcx, 'rcx> {\n+impl<'a, 'tcx, 'rcx> RustdocVisitor<'a, 'tcx, 'rcx> {\n     pub fn new(cstore: &'a CrateStore,\n-               cx: &'a core::DocContext<'b, 'tcx, 'rcx>) -> RustdocVisitor<'a, 'b, 'tcx, 'rcx> {\n+               cx: &'a core::DocContext<'a, 'tcx, 'rcx>) -> RustdocVisitor<'a, 'tcx, 'rcx> {\n         // If the root is re-exported, terminate all recursion.\n         let mut stack = FxHashSet();\n         stack.insert(ast::CRATE_NODE_ID);"}, {"sha": "15a8b58d0f6b92297010c63aea500bf6e241ec98", "filename": "src/librustdoc/visit_lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/611866f3cfb129202bc229659c1e8f4f313b330e/src%2Flibrustdoc%2Fvisit_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/611866f3cfb129202bc229659c1e8f4f313b330e/src%2Flibrustdoc%2Fvisit_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_lib.rs?ref=611866f3cfb129202bc229659c1e8f4f313b330e", "patch": "@@ -22,8 +22,8 @@ use clean::{AttributesExt, NestedAttributesExt};\n \n /// Similar to `librustc_privacy::EmbargoVisitor`, but also takes\n /// specific rustdoc annotations into account (i.e. `doc(hidden)`)\n-pub struct LibEmbargoVisitor<'a, 'b: 'a, 'tcx: 'b, 'rcx: 'b> {\n-    cx: &'a ::core::DocContext<'b, 'tcx, 'rcx>,\n+pub struct LibEmbargoVisitor<'a, 'tcx: 'a, 'rcx: 'a> {\n+    cx: &'a ::core::DocContext<'a, 'tcx, 'rcx>,\n     // Accessibility levels for reachable nodes\n     access_levels: RefMut<'a, AccessLevels<DefId>>,\n     // Previous accessibility level, None means unreachable\n@@ -32,8 +32,8 @@ pub struct LibEmbargoVisitor<'a, 'b: 'a, 'tcx: 'b, 'rcx: 'b> {\n     visited_mods: FxHashSet<DefId>,\n }\n \n-impl<'a, 'b, 'tcx, 'rcx> LibEmbargoVisitor<'a, 'b, 'tcx, 'rcx> {\n-    pub fn new(cx: &'a ::core::DocContext<'b, 'tcx, 'rcx>) -> LibEmbargoVisitor<'a, 'b, 'tcx, 'rcx> {\n+impl<'a, 'tcx, 'rcx> LibEmbargoVisitor<'a, 'tcx, 'rcx> {\n+    pub fn new(cx: &'a ::core::DocContext<'a, 'tcx, 'rcx>) -> LibEmbargoVisitor<'a, 'tcx, 'rcx> {\n         LibEmbargoVisitor {\n             cx,\n             access_levels: cx.access_levels.borrow_mut(),"}]}