{"sha": "cb4317de008408945bb873155d67439579b12b6c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiNDMxN2RlMDA4NDA4OTQ1YmI4NzMxNTVkNjc0Mzk1NzliMTJiNmM=", "commit": {"author": {"name": "D\u00e1niel Buga", "email": "bugadani@gmail.com", "date": "2020-12-31T09:11:50Z"}, "committer": {"name": "D\u00e1niel Buga", "email": "bugadani@gmail.com", "date": "2020-12-31T09:41:25Z"}, "message": "Always provide a range\n\nCo-authored-by: Joshua Nelson <joshua@yottadb.com>", "tree": {"sha": "c67cca471a9905054fdd296d27cfa7d8e77a0170", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c67cca471a9905054fdd296d27cfa7d8e77a0170"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb4317de008408945bb873155d67439579b12b6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb4317de008408945bb873155d67439579b12b6c", "html_url": "https://github.com/rust-lang/rust/commit/cb4317de008408945bb873155d67439579b12b6c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb4317de008408945bb873155d67439579b12b6c/comments", "author": {"login": "bugadani", "id": 977627, "node_id": "MDQ6VXNlcjk3NzYyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/977627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bugadani", "html_url": "https://github.com/bugadani", "followers_url": "https://api.github.com/users/bugadani/followers", "following_url": "https://api.github.com/users/bugadani/following{/other_user}", "gists_url": "https://api.github.com/users/bugadani/gists{/gist_id}", "starred_url": "https://api.github.com/users/bugadani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bugadani/subscriptions", "organizations_url": "https://api.github.com/users/bugadani/orgs", "repos_url": "https://api.github.com/users/bugadani/repos", "events_url": "https://api.github.com/users/bugadani/events{/privacy}", "received_events_url": "https://api.github.com/users/bugadani/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bugadani", "id": 977627, "node_id": "MDQ6VXNlcjk3NzYyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/977627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bugadani", "html_url": "https://github.com/bugadani", "followers_url": "https://api.github.com/users/bugadani/followers", "following_url": "https://api.github.com/users/bugadani/following{/other_user}", "gists_url": "https://api.github.com/users/bugadani/gists{/gist_id}", "starred_url": "https://api.github.com/users/bugadani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bugadani/subscriptions", "organizations_url": "https://api.github.com/users/bugadani/orgs", "repos_url": "https://api.github.com/users/bugadani/repos", "events_url": "https://api.github.com/users/bugadani/events{/privacy}", "received_events_url": "https://api.github.com/users/bugadani/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b70da1661995dc3817e07f5230d192b658db0d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b70da1661995dc3817e07f5230d192b658db0d5", "html_url": "https://github.com/rust-lang/rust/commit/2b70da1661995dc3817e07f5230d192b658db0d5"}], "stats": {"total": 73, "additions": 34, "deletions": 39}, "files": [{"sha": "b642f27c0b457e43d6b7678a4dfa57f3c0bae966", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cb4317de008408945bb873155d67439579b12b6c/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb4317de008408945bb873155d67439579b12b6c/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=cb4317de008408945bb873155d67439579b12b6c", "patch": "@@ -1127,32 +1127,32 @@ crate fn plain_text_summary(md: &str) -> String {\n     s\n }\n \n-crate fn markdown_links(md: &str) -> Vec<(String, Option<Range<usize>>)> {\n+crate fn markdown_links(md: &str) -> Vec<(String, Range<usize>)> {\n     if md.is_empty() {\n         return vec![];\n     }\n \n     let mut links = vec![];\n     let mut shortcut_links = vec![];\n \n-    let locate = |s: &str| unsafe {\n+    let locate = |s: &str, fallback: Range<usize>| unsafe {\n         let s_start = s.as_ptr();\n         let s_end = s_start.add(s.len());\n         let md_start = md.as_ptr();\n         let md_end = md_start.add(md.len());\n         if md_start <= s_start && s_end <= md_end {\n             let start = s_start.offset_from(md_start) as usize;\n             let end = s_end.offset_from(md_start) as usize;\n-            Some(start..end)\n+            start..end\n         } else {\n-            None\n+            fallback\n         }\n     };\n \n     let mut push = |link: BrokenLink<'_>| {\n         // FIXME: use `link.span` instead of `locate`\n         // (doing it now includes the `[]` as well as the text)\n-        shortcut_links.push((link.reference.to_owned(), locate(link.reference)));\n+        shortcut_links.push((link.reference.to_owned(), locate(link.reference, link.span)));\n         None\n     };\n     let p = Parser::new_with_broken_link_callback(md, opts(), Some(&mut push)).into_offset_iter();\n@@ -1166,8 +1166,8 @@ crate fn markdown_links(md: &str) -> Vec<(String, Option<Range<usize>>)> {\n         if let Event::Start(Tag::Link(_, dest, _)) = ev.0 {\n             debug!(\"found link: {}\", dest);\n             links.push(match dest {\n-                CowStr::Borrowed(s) => (s.to_owned(), locate(s)),\n-                s @ (CowStr::Boxed(..) | CowStr::Inlined(..)) => (s.into_string(), None),\n+                CowStr::Borrowed(s) => (s.to_owned(), locate(s, ev.1)),\n+                s @ (CowStr::Boxed(..) | CowStr::Inlined(..)) => (s.into_string(), ev.1),\n             });\n         }\n     }"}, {"sha": "3fc102f2fd2edaab64af4fbefc7f513b2657f734", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 27, "deletions": 32, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/cb4317de008408945bb873155d67439579b12b6c/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb4317de008408945bb873155d67439579b12b6c/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=cb4317de008408945bb873155d67439579b12b6c", "patch": "@@ -245,7 +245,7 @@ struct DiagnosticInfo<'a> {\n     item: &'a Item,\n     dox: &'a str,\n     ori_link: &'a str,\n-    link_range: Option<Range<usize>>,\n+    link_range: Range<usize>,\n }\n \n #[derive(Clone, Debug, Hash)]\n@@ -982,7 +982,7 @@ impl LinkCollector<'_, '_> {\n         parent_node: Option<DefId>,\n         krate: CrateNum,\n         ori_link: String,\n-        link_range: Option<Range<usize>>,\n+        link_range: Range<usize>,\n     ) -> Option<ItemLink> {\n         trace!(\"considering link '{}'\", ori_link);\n \n@@ -1628,7 +1628,7 @@ fn report_diagnostic(\n     msg: &str,\n     item: &Item,\n     dox: &str,\n-    link_range: &Option<Range<usize>>,\n+    link_range: &Range<usize>,\n     decorate: impl FnOnce(&mut DiagnosticBuilder<'_>, Option<rustc_span::Span>),\n ) {\n     let hir_id = match cx.as_local_hir_id(item.def_id) {\n@@ -1646,31 +1646,27 @@ fn report_diagnostic(\n     cx.tcx.struct_span_lint_hir(lint, hir_id, sp, |lint| {\n         let mut diag = lint.build(msg);\n \n-        let span = link_range\n-            .as_ref()\n-            .and_then(|range| super::source_span_for_markdown_range(cx, dox, range, attrs));\n+        let span = super::source_span_for_markdown_range(cx, dox, link_range, attrs);\n \n-        if let Some(link_range) = link_range {\n-            if let Some(sp) = span {\n-                diag.set_span(sp);\n-            } else {\n-                // blah blah blah\\nblah\\nblah [blah] blah blah\\nblah blah\n-                //                       ^     ~~~~\n-                //                       |     link_range\n-                //                       last_new_line_offset\n-                let last_new_line_offset = dox[..link_range.start].rfind('\\n').map_or(0, |n| n + 1);\n-                let line = dox[last_new_line_offset..].lines().next().unwrap_or(\"\");\n-\n-                // Print the line containing the `link_range` and manually mark it with '^'s.\n-                diag.note(&format!(\n-                    \"the link appears in this line:\\n\\n{line}\\n\\\n+        if let Some(sp) = span {\n+            diag.set_span(sp);\n+        } else {\n+            // blah blah blah\\nblah\\nblah [blah] blah blah\\nblah blah\n+            //                       ^     ~~~~\n+            //                       |     link_range\n+            //                       last_new_line_offset\n+            let last_new_line_offset = dox[..link_range.start].rfind('\\n').map_or(0, |n| n + 1);\n+            let line = dox[last_new_line_offset..].lines().next().unwrap_or(\"\");\n+\n+            // Print the line containing the `link_range` and manually mark it with '^'s.\n+            diag.note(&format!(\n+                \"the link appears in this line:\\n\\n{line}\\n\\\n                      {indicator: <before$}{indicator:^<found$}\",\n-                    line = line,\n-                    indicator = \"\",\n-                    before = link_range.start - last_new_line_offset,\n-                    found = link_range.len(),\n-                ));\n-            }\n+                line = line,\n+                indicator = \"\",\n+                before = link_range.start - last_new_line_offset,\n+                found = link_range.len(),\n+            ));\n         }\n \n         decorate(&mut diag, span);\n@@ -1690,7 +1686,7 @@ fn resolution_failure(\n     path_str: &str,\n     disambiguator: Option<Disambiguator>,\n     dox: &str,\n-    link_range: Option<Range<usize>>,\n+    link_range: Range<usize>,\n     kinds: SmallVec<[ResolutionFailure<'_>; 3]>,\n ) {\n     let tcx = collector.cx.tcx;\n@@ -1914,7 +1910,7 @@ fn anchor_failure(\n     item: &Item,\n     path_str: &str,\n     dox: &str,\n-    link_range: Option<Range<usize>>,\n+    link_range: Range<usize>,\n     failure: AnchorFailure,\n ) {\n     let msg = match failure {\n@@ -1939,7 +1935,7 @@ fn ambiguity_error(\n     item: &Item,\n     path_str: &str,\n     dox: &str,\n-    link_range: Option<Range<usize>>,\n+    link_range: Range<usize>,\n     candidates: Vec<Res>,\n ) {\n     let mut msg = format!(\"`{}` is \", path_str);\n@@ -1988,13 +1984,12 @@ fn suggest_disambiguator(\n     path_str: &str,\n     dox: &str,\n     sp: Option<rustc_span::Span>,\n-    link_range: &Option<Range<usize>>,\n+    link_range: &Range<usize>,\n ) {\n     let suggestion = disambiguator.suggestion();\n     let help = format!(\"to link to the {}, {}\", disambiguator.descr(), suggestion.descr());\n \n     if let Some(sp) = sp {\n-        let link_range = link_range.as_ref().expect(\"must have a link range if we have a span\");\n         let msg = if dox.bytes().nth(link_range.start) == Some(b'`') {\n             format!(\"`{}`\", suggestion.as_help(path_str))\n         } else {\n@@ -2013,7 +2008,7 @@ fn privacy_error(\n     item: &Item,\n     path_str: &str,\n     dox: &str,\n-    link_range: Option<Range<usize>>,\n+    link_range: Range<usize>,\n ) {\n     let sym;\n     let item_name = match item.name {"}]}