{"sha": "a8430a4ee5cc3863f2cb160822f5ae0eb4c7ed53", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4NDMwYTRlZTVjYzM4NjNmMmNiMTYwODIyZjVhZTBlYjRjN2VkNTM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-11-23T08:12:17Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-11-23T08:12:24Z"}, "message": "Miri: print leak report even without tracing", "tree": {"sha": "f549f078370e80bd823ddab0c14f29ccf6d4a6bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f549f078370e80bd823ddab0c14f29ccf6d4a6bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8430a4ee5cc3863f2cb160822f5ae0eb4c7ed53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8430a4ee5cc3863f2cb160822f5ae0eb4c7ed53", "html_url": "https://github.com/rust-lang/rust/commit/a8430a4ee5cc3863f2cb160822f5ae0eb4c7ed53", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8430a4ee5cc3863f2cb160822f5ae0eb4c7ed53/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9025395c8e46599f062216c818e3388e597d553", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9025395c8e46599f062216c818e3388e597d553", "html_url": "https://github.com/rust-lang/rust/commit/d9025395c8e46599f062216c818e3388e597d553"}], "stats": {"total": 27, "additions": 15, "deletions": 12}, "files": [{"sha": "b5bd96db1f4303242f705c2fee9b196cc6b98465", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8430a4ee5cc3863f2cb160822f5ae0eb4c7ed53/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8430a4ee5cc3863f2cb160822f5ae0eb4c7ed53/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=a8430a4ee5cc3863f2cb160822f5ae0eb4c7ed53", "patch": "@@ -703,7 +703,9 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         if let LocalValue::Live(Operand::Indirect(MemPlace { ptr, .. })) = local {\n             trace!(\"deallocating local\");\n             let ptr = ptr.to_ptr()?;\n-            self.memory.dump_alloc(ptr.alloc_id);\n+            if log_enabled!(::log::Level::Trace) {\n+                self.memory.dump_alloc(ptr.alloc_id);\n+            }\n             self.memory.deallocate_local(ptr)?;\n         };\n         Ok(())"}, {"sha": "dc8b035f43afdcf22532da98e25fed902def7530", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a8430a4ee5cc3863f2cb160822f5ae0eb4c7ed53/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8430a4ee5cc3863f2cb160822f5ae0eb4c7ed53/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=a8430a4ee5cc3863f2cb160822f5ae0eb4c7ed53", "patch": "@@ -635,7 +635,9 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         Ok(())\n     }\n \n-    /// For debugging, print an allocation and all allocations it points to, recursively.\n+    /// Print an allocation and all allocations it points to, recursively.\n+    /// This prints directly to stderr, ignoring RUSTC_LOG! It is up to the caller to\n+    /// control for this.\n     pub fn dump_alloc(&self, id: AllocId) {\n         self.dump_allocs(vec![id]);\n     }\n@@ -674,7 +676,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n             }\n         }\n \n-        trace!(\n+        eprintln!(\n             \"{}({} bytes, alignment {}){}\",\n             msg,\n             alloc.size.bytes(),\n@@ -695,15 +697,14 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n                 write!(msg, \"\u2514{0:\u2500^1$}\u2518 \", target, relocation_width as usize).unwrap();\n                 pos = i + self.pointer_size();\n             }\n-            trace!(\"{}\", msg);\n+            eprintln!(\"{}\", msg);\n         }\n     }\n \n-    /// For debugging, print a list of allocations and all allocations they point to, recursively.\n+    /// Print a list of allocations and all allocations they point to, recursively.\n+    /// This prints directly to stderr, ignoring RUSTC_LOG! It is up to the caller to\n+    /// control for this.\n     pub fn dump_allocs(&self, mut allocs: Vec<AllocId>) {\n-        if !log_enabled!(::log::Level::Trace) {\n-            return;\n-        }\n         allocs.sort();\n         allocs.dedup();\n         let mut allocs_to_print = VecDeque::from(allocs);\n@@ -735,13 +736,13 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n                             );\n                         }\n                         Some(GlobalAlloc::Function(func)) => {\n-                            trace!(\"{} {}\", msg, func);\n+                            eprintln!(\"{} {}\", msg, func);\n                         }\n                         Some(GlobalAlloc::Static(did)) => {\n-                            trace!(\"{} {:?}\", msg, did);\n+                            eprintln!(\"{} {:?}\", msg, did);\n                         }\n                         None => {\n-                            trace!(\"{} (deallocated)\", msg);\n+                            eprintln!(\"{} (deallocated)\", msg);\n                         }\n                     }\n                 },\n@@ -751,7 +752,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n     }\n \n     pub fn leak_report(&self) -> usize {\n-        trace!(\"### LEAK REPORT ###\");\n+        eprintln!(\"### LEAK REPORT ###\");\n         let leaks: Vec<_> = self.alloc_map.filter_map_collect(|&id, &(kind, _)| {\n             if kind.may_leak() { None } else { Some(id) }\n         });"}]}