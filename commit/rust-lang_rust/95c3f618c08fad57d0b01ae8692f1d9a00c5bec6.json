{"sha": "95c3f618c08fad57d0b01ae8692f1d9a00c5bec6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1YzNmNjE4YzA4ZmFkNTdkMGIwMWFlODY5MmYxZDlhMDBjNWJlYzY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-10-13T17:54:18Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-11-21T21:17:09Z"}, "message": "core: Deprecated remaining free functions in `char`\n\nPrefer the methods.", "tree": {"sha": "8abded04e1c7fe9973672124ed137c6a553e2d81", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8abded04e1c7fe9973672124ed137c6a553e2d81"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/95c3f618c08fad57d0b01ae8692f1d9a00c5bec6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/95c3f618c08fad57d0b01ae8692f1d9a00c5bec6", "html_url": "https://github.com/rust-lang/rust/commit/95c3f618c08fad57d0b01ae8692f1d9a00c5bec6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/95c3f618c08fad57d0b01ae8692f1d9a00c5bec6/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4dd17245769082d07c3f98100e5a7cf922813ec9", "url": "https://api.github.com/repos/rust-lang/rust/commits/4dd17245769082d07c3f98100e5a7cf922813ec9", "html_url": "https://github.com/rust-lang/rust/commit/4dd17245769082d07c3f98100e5a7cf922813ec9"}], "stats": {"total": 5, "additions": 5, "deletions": 0}, "files": [{"sha": "ad836fca57efc9cd06acf331314b19d5d561d534", "filename": "src/libcore/char.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/95c3f618c08fad57d0b01ae8692f1d9a00c5bec6/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c3f618c08fad57d0b01ae8692f1d9a00c5bec6/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=95c3f618c08fad57d0b01ae8692f1d9a00c5bec6", "patch": "@@ -98,6 +98,7 @@ pub fn from_u32(i: u32) -> Option<char> {\n /// This just wraps `to_digit()`.\n ///\n #[inline]\n+#[deprecated = \"use the Char::is_digit method\"]\n pub fn is_digit_radix(c: char, radix: uint) -> bool {\n     match to_digit(c, radix) {\n         Some(_) => true,\n@@ -120,6 +121,7 @@ pub fn is_digit_radix(c: char, radix: uint) -> bool {\n /// Panics if given a `radix` outside the range `[0..36]`.\n ///\n #[inline]\n+#[deprecated = \"use the Char::to_digit method\"]\n pub fn to_digit(c: char, radix: uint) -> Option<uint> {\n     if radix > 36 {\n         panic!(\"to_digit: radix is too high (maximum 36)\");\n@@ -174,6 +176,7 @@ pub fn from_digit(num: uint, radix: uint) -> Option<char> {\n /// - chars in [0x100,0xffff] get 4-digit escapes: `\\\\uNNNN`\n /// - chars above 0x10000 get 8-digit escapes: `\\\\UNNNNNNNN`\n ///\n+#[deprecated = \"use the Char::escape_unicode method\"]\n pub fn escape_unicode(c: char, f: |char|) {\n     // avoid calling str::to_str_radix because we don't really need to allocate\n     // here.\n@@ -206,6 +209,7 @@ pub fn escape_unicode(c: char, f: |char|) {\n /// - Any other chars in the range [0x20,0x7e] are not escaped.\n /// - Any other chars are given hex Unicode escapes; see `escape_unicode`.\n ///\n+#[deprecated = \"use the Char::escape_default method\"]\n pub fn escape_default(c: char, f: |char|) {\n     match c {\n         '\\t' => { f('\\\\'); f('t'); }\n@@ -221,6 +225,7 @@ pub fn escape_default(c: char, f: |char|) {\n \n /// Returns the amount of bytes this `char` would need if encoded in UTF-8\n #[inline]\n+#[deprecated = \"use the Char::len_utf8 method\"]\n pub fn len_utf8_bytes(c: char) -> uint {\n     let code = c as u32;\n     match () {"}]}