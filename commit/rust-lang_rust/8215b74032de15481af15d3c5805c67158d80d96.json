{"sha": "8215b74032de15481af15d3c5805c67158d80d96", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyMTViNzQwMzJkZTE1NDgxYWYxNWQzYzU4MDVjNjcxNThkODBkOTY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-27T13:15:32Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-27T13:20:22Z"}, "message": "Move tests to a new file", "tree": {"sha": "ec966c7deb22699b18b8d94402129cc3bc38c951", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec966c7deb22699b18b8d94402129cc3bc38c951"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8215b74032de15481af15d3c5805c67158d80d96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8215b74032de15481af15d3c5805c67158d80d96", "html_url": "https://github.com/rust-lang/rust/commit/8215b74032de15481af15d3c5805c67158d80d96", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8215b74032de15481af15d3c5805c67158d80d96/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "695460fbf5969d6e2182f368a4dd707c3c921ffe", "url": "https://api.github.com/repos/rust-lang/rust/commits/695460fbf5969d6e2182f368a4dd707c3c921ffe", "html_url": "https://github.com/rust-lang/rust/commit/695460fbf5969d6e2182f368a4dd707c3c921ffe"}], "stats": {"total": 263, "additions": 129, "deletions": 134}, "files": [{"sha": "796f0e545a6277a04ab835f68adb2a6439219f78", "filename": "crates/ra_ide/src/syntax_highlighting.rs", "status": "modified", "additions": 2, "deletions": 134, "changes": 136, "blob_url": "https://github.com/rust-lang/rust/blob/8215b74032de15481af15d3c5805c67158d80d96/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8215b74032de15481af15d3c5805c67158d80d96/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs?ref=8215b74032de15481af15d3c5805c67158d80d96", "patch": "@@ -2,6 +2,8 @@\n \n mod tags;\n mod html;\n+#[cfg(test)]\n+mod tests;\n \n use hir::{Name, Semantics};\n use ra_ide_db::{\n@@ -279,137 +281,3 @@ fn highlight_name_by_syntax(name: ast::Name) -> Highlight {\n         _ => default,\n     }\n }\n-\n-#[cfg(test)]\n-mod tests {\n-    use std::fs;\n-\n-    use test_utils::{assert_eq_text, project_dir, read_text};\n-\n-    use crate::{\n-        mock_analysis::{single_file, MockAnalysis},\n-        FileRange, TextRange,\n-    };\n-\n-    #[test]\n-    fn test_highlighting() {\n-        let (analysis, file_id) = single_file(\n-            r#\"\n-#[derive(Clone, Debug)]\n-struct Foo {\n-    pub x: i32,\n-    pub y: i32,\n-}\n-\n-fn foo<T>() -> T {\n-    unimplemented!();\n-    foo::<i32>();\n-}\n-\n-macro_rules! def_fn {\n-    ($($tt:tt)*) => {$($tt)*}\n-}\n-\n-def_fn!{\n-    fn bar() -> u32 {\n-        100\n-    }\n-}\n-\n-// comment\n-fn main() {\n-    println!(\"Hello, {}!\", 92);\n-\n-    let mut vec = Vec::new();\n-    if true {\n-        let x = 92;\n-        vec.push(Foo { x, y: 1 });\n-    }\n-    unsafe { vec.set_len(0); }\n-\n-    let mut x = 42;\n-    let y = &mut x;\n-    let z = &y;\n-\n-    y;\n-}\n-\n-enum E<X> {\n-    V(X)\n-}\n-\n-impl<X> E<X> {\n-    fn new<T>() -> E<T> {}\n-}\n-\"#\n-            .trim(),\n-        );\n-        let dst_file = project_dir().join(\"crates/ra_ide/src/snapshots/highlighting.html\");\n-        let actual_html = &analysis.highlight_as_html(file_id, false).unwrap();\n-        let expected_html = &read_text(&dst_file);\n-        fs::write(dst_file, &actual_html).unwrap();\n-        assert_eq_text!(expected_html, actual_html);\n-    }\n-\n-    #[test]\n-    fn test_rainbow_highlighting() {\n-        let (analysis, file_id) = single_file(\n-            r#\"\n-fn main() {\n-    let hello = \"hello\";\n-    let x = hello.to_string();\n-    let y = hello.to_string();\n-\n-    let x = \"other color please!\";\n-    let y = x.to_string();\n-}\n-\n-fn bar() {\n-    let mut hello = \"hello\";\n-}\n-\"#\n-            .trim(),\n-        );\n-        let dst_file = project_dir().join(\"crates/ra_ide/src/snapshots/rainbow_highlighting.html\");\n-        let actual_html = &analysis.highlight_as_html(file_id, true).unwrap();\n-        let expected_html = &read_text(&dst_file);\n-        fs::write(dst_file, &actual_html).unwrap();\n-        assert_eq_text!(expected_html, actual_html);\n-    }\n-\n-    #[test]\n-    fn accidentally_quadratic() {\n-        let file = project_dir().join(\"crates/ra_syntax/test_data/accidentally_quadratic\");\n-        let src = fs::read_to_string(file).unwrap();\n-\n-        let mut mock = MockAnalysis::new();\n-        let file_id = mock.add_file(\"/main.rs\", &src);\n-        let host = mock.analysis_host();\n-\n-        // let t = std::time::Instant::now();\n-        let _ = host.analysis().highlight(file_id).unwrap();\n-        // eprintln!(\"elapsed: {:?}\", t.elapsed());\n-    }\n-\n-    #[test]\n-    fn test_ranges() {\n-        let (analysis, file_id) = single_file(\n-            r#\"\n-            #[derive(Clone, Debug)]\n-            struct Foo {\n-                pub x: i32,\n-                pub y: i32,\n-            }\"#,\n-        );\n-\n-        // The \"x\"\n-        let highlights = &analysis\n-            .highlight_range(FileRange {\n-                file_id,\n-                range: TextRange::offset_len(82.into(), 1.into()),\n-            })\n-            .unwrap();\n-\n-        assert_eq!(&highlights[0].highlight.to_string(), \"field\");\n-    }\n-}"}, {"sha": "ff23d4ac5e8d2b901a3c6ecd0b53f34e88eda980", "filename": "crates/ra_ide/src/syntax_highlighting/tests.rs", "status": "added", "additions": 127, "deletions": 0, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/8215b74032de15481af15d3c5805c67158d80d96/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8215b74032de15481af15d3c5805c67158d80d96/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs?ref=8215b74032de15481af15d3c5805c67158d80d96", "patch": "@@ -0,0 +1,127 @@\n+use std::fs;\n+\n+use test_utils::{assert_eq_text, project_dir, read_text};\n+\n+use crate::{\n+    mock_analysis::{single_file, MockAnalysis},\n+    FileRange, TextRange,\n+};\n+\n+#[test]\n+fn test_highlighting() {\n+    let (analysis, file_id) = single_file(\n+        r#\"\n+#[derive(Clone, Debug)]\n+struct Foo {\n+    pub x: i32,\n+    pub y: i32,\n+}\n+\n+fn foo<T>() -> T {\n+    unimplemented!();\n+    foo::<i32>();\n+}\n+\n+macro_rules! def_fn {\n+    ($($tt:tt)*) => {$($tt)*}\n+}\n+\n+def_fn!{\n+    fn bar() -> u32 {\n+        100\n+    }\n+}\n+\n+// comment\n+fn main() {\n+    println!(\"Hello, {}!\", 92);\n+\n+    let mut vec = Vec::new();\n+    if true {\n+        let x = 92;\n+        vec.push(Foo { x, y: 1 });\n+    }\n+    unsafe { vec.set_len(0); }\n+\n+    let mut x = 42;\n+    let y = &mut x;\n+    let z = &y;\n+\n+    y;\n+}\n+\n+enum E<X> {\n+    V(X)\n+}\n+\n+impl<X> E<X> {\n+    fn new<T>() -> E<T> {}\n+}\n+\"#\n+        .trim(),\n+    );\n+    let dst_file = project_dir().join(\"crates/ra_ide/src/snapshots/highlighting.html\");\n+    let actual_html = &analysis.highlight_as_html(file_id, false).unwrap();\n+    let expected_html = &read_text(&dst_file);\n+    fs::write(dst_file, &actual_html).unwrap();\n+    assert_eq_text!(expected_html, actual_html);\n+}\n+\n+#[test]\n+fn test_rainbow_highlighting() {\n+    let (analysis, file_id) = single_file(\n+        r#\"\n+fn main() {\n+    let hello = \"hello\";\n+    let x = hello.to_string();\n+    let y = hello.to_string();\n+\n+    let x = \"other color please!\";\n+    let y = x.to_string();\n+}\n+\n+fn bar() {\n+    let mut hello = \"hello\";\n+}\n+\"#\n+        .trim(),\n+    );\n+    let dst_file = project_dir().join(\"crates/ra_ide/src/snapshots/rainbow_highlighting.html\");\n+    let actual_html = &analysis.highlight_as_html(file_id, true).unwrap();\n+    let expected_html = &read_text(&dst_file);\n+    fs::write(dst_file, &actual_html).unwrap();\n+    assert_eq_text!(expected_html, actual_html);\n+}\n+\n+#[test]\n+fn accidentally_quadratic() {\n+    let file = project_dir().join(\"crates/ra_syntax/test_data/accidentally_quadratic\");\n+    let src = fs::read_to_string(file).unwrap();\n+\n+    let mut mock = MockAnalysis::new();\n+    let file_id = mock.add_file(\"/main.rs\", &src);\n+    let host = mock.analysis_host();\n+\n+    // let t = std::time::Instant::now();\n+    let _ = host.analysis().highlight(file_id).unwrap();\n+    // eprintln!(\"elapsed: {:?}\", t.elapsed());\n+}\n+\n+#[test]\n+fn test_ranges() {\n+    let (analysis, file_id) = single_file(\n+        r#\"\n+            #[derive(Clone, Debug)]\n+            struct Foo {\n+                pub x: i32,\n+                pub y: i32,\n+            }\"#,\n+    );\n+\n+    // The \"x\"\n+    let highlights = &analysis\n+        .highlight_range(FileRange { file_id, range: TextRange::offset_len(82.into(), 1.into()) })\n+        .unwrap();\n+\n+    assert_eq!(&highlights[0].highlight.to_string(), \"field\");\n+}"}]}