{"sha": "0b0fd78c6c49165dc8bcd5867cc291d4f6b1142a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiMGZkNzhjNmM0OTE2NWRjOGJjZDU4NjdjYzI5MWQ0ZjZiMTE0MmE=", "commit": {"author": {"name": "XAMPPRocky", "email": "4464295+XAMPPRocky@users.noreply.github.com", "date": "2021-02-22T06:55:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-22T06:55:43Z"}, "message": "Update RELEASES.md", "tree": {"sha": "3691cad512a376c69073a450d833e7a3c1caabfc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3691cad512a376c69073a450d833e7a3c1caabfc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b0fd78c6c49165dc8bcd5867cc291d4f6b1142a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgM1VvCRBK7hj4Ov3rIwAAdHIIAFc+RtF3PJE+pqj4d9gc7lnw\nXR4zTzrcjP/LafJALZyc+15sMPKpsgzTcZCBbp+MUeV9WQsnUVpf5TajO9X06FEp\nqR7PtH1JEl0KekzozEDAR9JW12dfKngLaipJgMxrxrR9V+r7vmznxaC/2dZTfTpJ\nu/RiEWWy1NT0BO6ykXZmU9PIuWpxpaPtMJ16jHkdpuLWemX4WPr7YTxd3XnB+b9M\nDFD0/l+UTVquJPgsFX2zgKP8m6PTiDI0VWt2o2F+tZdQeTtE8thHdXIey86B5Kx4\nJt7YbmxlS0ym5vIXi6loKBvNU7LVzomlUN4wtScDWZyiTd5BgP8UAM6IiwgcVTE=\n=wl1R\n-----END PGP SIGNATURE-----\n", "payload": "tree 3691cad512a376c69073a450d833e7a3c1caabfc\nparent 69e56ad7d16c2a089b83d4d49616daabbf5fac8b\nauthor XAMPPRocky <4464295+XAMPPRocky@users.noreply.github.com> 1613976943 +0100\ncommitter GitHub <noreply@github.com> 1613976943 +0100\n\nUpdate RELEASES.md"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b0fd78c6c49165dc8bcd5867cc291d4f6b1142a", "html_url": "https://github.com/rust-lang/rust/commit/0b0fd78c6c49165dc8bcd5867cc291d4f6b1142a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b0fd78c6c49165dc8bcd5867cc291d4f6b1142a/comments", "author": {"login": "XAMPPRocky", "id": 4464295, "node_id": "MDQ6VXNlcjQ0NjQyOTU=", "avatar_url": "https://avatars.githubusercontent.com/u/4464295?v=4", "gravatar_id": "", "url": "https://api.github.com/users/XAMPPRocky", "html_url": "https://github.com/XAMPPRocky", "followers_url": "https://api.github.com/users/XAMPPRocky/followers", "following_url": "https://api.github.com/users/XAMPPRocky/following{/other_user}", "gists_url": "https://api.github.com/users/XAMPPRocky/gists{/gist_id}", "starred_url": "https://api.github.com/users/XAMPPRocky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/XAMPPRocky/subscriptions", "organizations_url": "https://api.github.com/users/XAMPPRocky/orgs", "repos_url": "https://api.github.com/users/XAMPPRocky/repos", "events_url": "https://api.github.com/users/XAMPPRocky/events{/privacy}", "received_events_url": "https://api.github.com/users/XAMPPRocky/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69e56ad7d16c2a089b83d4d49616daabbf5fac8b", "url": "https://api.github.com/repos/rust-lang/rust/commits/69e56ad7d16c2a089b83d4d49616daabbf5fac8b", "html_url": "https://github.com/rust-lang/rust/commit/69e56ad7d16c2a089b83d4d49616daabbf5fac8b"}], "stats": {"total": 31, "additions": 24, "deletions": 7}, "files": [{"sha": "cf2e80cdab3bc50103c7e066d52abe1ad9e52703", "filename": "RELEASES.md", "status": "modified", "additions": 24, "deletions": 7, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/0b0fd78c6c49165dc8bcd5867cc291d4f6b1142a/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/0b0fd78c6c49165dc8bcd5867cc291d4f6b1142a/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=0b0fd78c6c49165dc8bcd5867cc291d4f6b1142a", "patch": "@@ -4,8 +4,9 @@ Version 1.51.0 (2021-03-25)\n Language\n --------\n - [You can now parameterize items such as functions, traits, and `struct`s by constant\n-  values in addition to by types.][79135] E.g. you can now write the following. Note:\n-  Only values of primitive integers, `bool`, or `char` types are currently permitted.\n+  values in addition to by types and lifetimes.][79135] Also known as \"const generics\"\n+  E.g. you can now write the following. Note: Only values of primitive integers, \n+  `bool`, or `char` types are currently permitted.\n   ```rust\n   struct GenericArray<T, const LENGTH: usize> {\n       inner: [T; LENGTH]\n@@ -26,10 +27,11 @@ Language\n Compiler\n --------\n \n-- [Added the `-Csplit-debuginfo` codegen option.][79570] This option controls whether\n-  debug information is split across multiple files or packed into a single file.\n-- [Added tier 3\\* support for `aarch64_be-unknown-linux-gnu`, `aarch64-unknown-linux-gnu_ilp32`,\n-  and `aarch64_be-unknown-linux-gnu_ilp32` targets.][81455]\n+- [Added the `-Csplit-debuginfo` codegen option for macOS platforms.][79570]\n+  This option controls whether debug information is split across multiple files\n+  or packed into a single file. **Note** This option is unstable on other platforms.\n+- [Added tier 3\\* support for `aarch64_be-unknown-linux-gnu`,\n+  `aarch64-unknown-linux-gnu_ilp32`, and `aarch64_be-unknown-linux-gnu_ilp32` targets.][81455]\n - [Added tier 3 support for `i386-unknown-linux-gnu` and `i486-unknown-linux-gnu` targets.][80662]\n - [The `target-cpu=native` option will now detect individual features of CPUs.][80749]\n - [Rust now uses `inline-asm` for stack probes when used with LLVM 11.0.1+][77885]\n@@ -72,6 +74,21 @@ Stabilized APIs\n - [`sync::OnceState`]\n - [`task::Wake`]\n \n+Cargo\n+-----\n+- [Added the `split-debuginfo` profile option to control the -Csplit-debuginfo\n+  codegen option.][cargo/9112]\n+- [Added the `resolver` field to `Cargo.toml` to enable the new feature resolver\n+  and CLI option behavior.][cargo/8997] Version 2 of the feature resolver will try\n+  to avoid unifying features of dependencies where that unification could be unwanted.\n+  Such as using the same dependency at build time (such as build scripts and\n+  proc-macros). See the [Cargo book documentation][feature-resolver@2.0]\n+  for more information on the feature.\n+\n+[feature-resolver@2.0]: https://doc.rust-lang.org/nightly/cargo/reference/features.html#feature-resolver-version-2\n+[cargo/8997]: https://github.com/rust-lang/cargo/pull/8997\n+[cargo/9112]: https://github.com/rust-lang/cargo/pull/9112\n+\n Rustdoc\n -------\n \n@@ -94,7 +111,7 @@ Compatibility Notes\n -------------------\n \n - [Bumped the minimum `g++` for `linux-gnu` targets to `g++-8` from `g++-7`.][81521]\n-- [WASI platforms no longer use the `wasm-bindgen` ABI.][79998]\n+- [WASI platforms no longer use the `wasm-bindgen` ABI, and instead use the wasm32 ABI.][79998]\n - [`rustc` no longer promotes division, modulo and indexing operations to `const` that\n   could fail.][80579]\n "}]}