{"sha": "d21cdf3c998bb24e48e81a7e6909df2146ce097c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyMWNkZjNjOTk4YmIyNGU0OGU4MWE3ZTY5MDlkZjIxNDZjZTA5N2M=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-09-07T13:13:05Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-09-07T13:13:05Z"}, "message": "Lower `Fn(X, Y) -> Z` paths", "tree": {"sha": "5f6928f1ee40b3f314c6f74f3552e06f820b5ca7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f6928f1ee40b3f314c6f74f3552e06f820b5ca7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d21cdf3c998bb24e48e81a7e6909df2146ce097c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d21cdf3c998bb24e48e81a7e6909df2146ce097c", "html_url": "https://github.com/rust-lang/rust/commit/d21cdf3c998bb24e48e81a7e6909df2146ce097c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d21cdf3c998bb24e48e81a7e6909df2146ce097c/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60bdb66ef23f78d8c73afa1897a4542e7e722ed2", "url": "https://api.github.com/repos/rust-lang/rust/commits/60bdb66ef23f78d8c73afa1897a4542e7e722ed2", "html_url": "https://github.com/rust-lang/rust/commit/60bdb66ef23f78d8c73afa1897a4542e7e722ed2"}], "stats": {"total": 68, "additions": 55, "deletions": 13}, "files": [{"sha": "d6c78593bc55a945fbd3ea8651b91513b1d2ae77", "filename": "crates/ra_hir/src/path.rs", "status": "modified", "additions": 40, "deletions": 4, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/d21cdf3c998bb24e48e81a7e6909df2146ce097c/crates%2Fra_hir%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21cdf3c998bb24e48e81a7e6909df2146ce097c/crates%2Fra_hir%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fpath.rs?ref=d21cdf3c998bb24e48e81a7e6909df2146ce097c", "patch": "@@ -1,11 +1,11 @@\n use std::sync::Arc;\n \n use ra_syntax::{\n-    ast::{self, NameOwner},\n+    ast::{self, NameOwner, TypeAscriptionOwner},\n     AstNode,\n };\n \n-use crate::{type_ref::TypeRef, AsName, Name};\n+use crate::{name, type_ref::TypeRef, AsName, Name};\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Path {\n@@ -76,8 +76,16 @@ impl Path {\n \n             match segment.kind()? {\n                 ast::PathSegmentKind::Name(name) => {\n-                    let args =\n-                        segment.type_arg_list().and_then(GenericArgs::from_ast).map(Arc::new);\n+                    let args = segment\n+                        .type_arg_list()\n+                        .and_then(GenericArgs::from_ast)\n+                        .or_else(|| {\n+                            GenericArgs::from_fn_like_path_ast(\n+                                segment.param_list(),\n+                                segment.ret_type(),\n+                            )\n+                        })\n+                        .map(Arc::new);\n                     let segment = PathSegment { name: name.as_name(), args_and_bindings: args };\n                     segments.push(segment);\n                 }\n@@ -187,6 +195,34 @@ impl GenericArgs {\n         }\n     }\n \n+    /// Collect `GenericArgs` from the parts of a fn-like path, i.e. `Fn(X, Y)\n+    /// -> Z` (which desugars to `Fn<(X, Y), Output=Z>`).\n+    pub(crate) fn from_fn_like_path_ast(\n+        params: Option<ast::ParamList>,\n+        ret_type: Option<ast::RetType>,\n+    ) -> Option<GenericArgs> {\n+        let mut args = Vec::new();\n+        let mut bindings = Vec::new();\n+        if let Some(params) = params {\n+            let mut param_types = Vec::new();\n+            for param in params.params() {\n+                let type_ref = TypeRef::from_ast_opt(param.ascribed_type());\n+                param_types.push(type_ref);\n+            }\n+            let arg = GenericArg::Type(TypeRef::Tuple(param_types));\n+            args.push(arg);\n+        }\n+        if let Some(ret_type) = ret_type {\n+            let type_ref = TypeRef::from_ast_opt(ret_type.type_ref());\n+            bindings.push((name::OUTPUT, type_ref))\n+        }\n+        if args.is_empty() && bindings.is_empty() {\n+            None\n+        } else {\n+            Some(GenericArgs { args, has_self_type: false, bindings })\n+        }\n+    }\n+\n     pub(crate) fn empty() -> GenericArgs {\n         GenericArgs { args: Vec::new(), has_self_type: false, bindings: Vec::new() }\n     }"}, {"sha": "c414e6a955c6c08da545000949c13a451fdcc463", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d21cdf3c998bb24e48e81a7e6909df2146ce097c/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21cdf3c998bb24e48e81a7e6909df2146ce097c/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=d21cdf3c998bb24e48e81a7e6909df2146ce097c", "patch": "@@ -3736,7 +3736,7 @@ fn fn_trait() {\n trait FnOnce<Args> {\n     type Output;\n \n-    fn call_once(self, args: Args) -> Self::Output;\n+    fn call_once(self, args: Args) -> <Self as FnOnce<Args>>::Output;\n }\n \n fn test<F: FnOnce(u32, u64) -> u128>(f: F) {\n@@ -3746,13 +3746,13 @@ fn test<F: FnOnce(u32, u64) -> u128>(f: F) {\n         @r###\"\n     [57; 61) 'self': Self\n     [63; 67) 'args': Args\n-    [132; 133) 'f': F\n-    [138; 166) '{     ...2)); }': ()\n-    [144; 145) 'f': F\n-    [144; 163) 'f.call...1, 2))': {unknown}\n-    [156; 162) '(1, 2)': (i32, i32)\n-    [157; 158) '1': i32\n-    [160; 161) '2': i32\n+    [150; 151) 'f': F\n+    [156; 184) '{     ...2)); }': ()\n+    [162; 163) 'f': F\n+    [162; 181) 'f.call...1, 2))': {unknown}\n+    [174; 180) '(1, 2)': (u32, u64)\n+    [175; 176) '1': u32\n+    [178; 179) '2': u64\n     \"###\n     );\n }"}, {"sha": "d274b6fbc0f0f41a9a1aa9a3f4ab7f3a23fbdc71", "filename": "crates/ra_syntax/src/ast/generated.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d21cdf3c998bb24e48e81a7e6909df2146ce097c/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21cdf3c998bb24e48e81a7e6909df2146ce097c/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs?ref=d21cdf3c998bb24e48e81a7e6909df2146ce097c", "patch": "@@ -2312,6 +2312,12 @@ impl PathSegment {\n     pub fn type_arg_list(&self) -> Option<TypeArgList> {\n         AstChildren::new(&self.syntax).next()\n     }\n+    pub fn param_list(&self) -> Option<ParamList> {\n+        AstChildren::new(&self.syntax).next()\n+    }\n+    pub fn ret_type(&self) -> Option<RetType> {\n+        AstChildren::new(&self.syntax).next()\n+    }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct PathType {"}, {"sha": "993e58e645a12ef5f2bd94934e312d0ba5fcfe8f", "filename": "crates/ra_syntax/src/grammar.ron", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d21cdf3c998bb24e48e81a7e6909df2146ce097c/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/d21cdf3c998bb24e48e81a7e6909df2146ce097c/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron?ref=d21cdf3c998bb24e48e81a7e6909df2146ce097c", "patch": "@@ -684,7 +684,7 @@ Grammar(\n             ]\n         ),\n         \"PathSegment\": (\n-            options: [ \"NameRef\", \"TypeArgList\" ]\n+            options: [ \"NameRef\", \"TypeArgList\", \"ParamList\", \"RetType\" ]\n         ),\n         \"TypeArgList\": (collections: [\n             (\"type_args\", \"TypeArg\"),"}]}