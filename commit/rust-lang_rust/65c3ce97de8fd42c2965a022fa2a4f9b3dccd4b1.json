{"sha": "65c3ce97de8fd42c2965a022fa2a4f9b3dccd4b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1YzNjZTk3ZGU4ZmQ0MmMyOTY1YTAyMmZhMmE0ZjliM2RjY2Q0YjE=", "commit": {"author": {"name": "Jubilee", "email": "46493976+workingjubilee@users.noreply.github.com", "date": "2021-03-22T21:01:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-22T21:01:29Z"}, "message": "Merge pull request #81 from rust-lang/feature/std-cargo-feature\n\nAdd std cargo feature", "tree": {"sha": "39cc82b750142ee7c9ef7440c5e56aeb7d5dc1df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/39cc82b750142ee7c9ef7440c5e56aeb7d5dc1df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65c3ce97de8fd42c2965a022fa2a4f9b3dccd4b1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgWQWpCRBK7hj4Ov3rIwAAdHIIAH69Y9nUm7AaWIznyV1LQti8\nTYkCEtn30EjrC1/t2x/7F1hg5q9WQ5CF1mtkGjO9HiRWM5dkNai0dsoJD5F0PWI/\nwvBPxMIEWZEZovCKLRQuSVmEdGEz3+7AWPDtHmiCnBVAH9PvTUWLpaA5WQ1vza+C\nWRIAygQv3NjFKp1Eu07JRkgWNfC7A2hj0fqEeCYzKbDWBRFNjqKhbnJ2BYAgVJEw\nSIYh/+FYymftJxbEdNKW4vOnrj5nYb5j36HJCU5jK/X7brcZvg6cwmR0p15C56NF\nAw3LPe98zOh9k55fEdfuZ6vy4Bojzc17h4jV3o+556kXYd5XWlzJ86FJBisBG38=\n=FgsH\n-----END PGP SIGNATURE-----\n", "payload": "tree 39cc82b750142ee7c9ef7440c5e56aeb7d5dc1df\nparent d95433dbb5ba16d809dab3fd8146847d0e38142e\nparent fa77b196c8f4cca27009c334f09466b80aca2f8a\nauthor Jubilee <46493976+workingjubilee@users.noreply.github.com> 1616446889 -0700\ncommitter GitHub <noreply@github.com> 1616446889 -0700\n\nMerge pull request #81 from rust-lang/feature/std-cargo-feature\n\nAdd std cargo feature"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65c3ce97de8fd42c2965a022fa2a4f9b3dccd4b1", "html_url": "https://github.com/rust-lang/rust/commit/65c3ce97de8fd42c2965a022fa2a4f9b3dccd4b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65c3ce97de8fd42c2965a022fa2a4f9b3dccd4b1/comments", "author": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d95433dbb5ba16d809dab3fd8146847d0e38142e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d95433dbb5ba16d809dab3fd8146847d0e38142e", "html_url": "https://github.com/rust-lang/rust/commit/d95433dbb5ba16d809dab3fd8146847d0e38142e"}, {"sha": "fa77b196c8f4cca27009c334f09466b80aca2f8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa77b196c8f4cca27009c334f09466b80aca2f8a", "html_url": "https://github.com/rust-lang/rust/commit/fa77b196c8f4cca27009c334f09466b80aca2f8a"}], "stats": {"total": 27, "additions": 19, "deletions": 8}, "files": [{"sha": "6044eabcd140cee79b04a0a3b0ec1e24a41af8dc", "filename": "crates/core_simd/Cargo.toml", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65c3ce97de8fd42c2965a022fa2a4f9b3dccd4b1/crates%2Fcore_simd%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/65c3ce97de8fd42c2965a022fa2a4f9b3dccd4b1/crates%2Fcore_simd%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2FCargo.toml?ref=65c3ce97de8fd42c2965a022fa2a4f9b3dccd4b1", "patch": "@@ -9,6 +9,10 @@ keywords = [\"core\", \"simd\", \"intrinsics\"]\n categories = [\"hardware-support\", \"no-std\"]\n license = \"MIT OR Apache-2.0\"\n \n+[features]\n+default = [\"std\"]\n+std = []\n+\n [target.'cfg(target_arch = \"wasm32\")'.dev-dependencies.wasm-bindgen]\n version = \"0.2\"\n "}, {"sha": "213ebff3df4541b7d8373bae8e9158a1cd8c641f", "filename": "crates/core_simd/src/intrinsics.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65c3ce97de8fd42c2965a022fa2a4f9b3dccd4b1/crates%2Fcore_simd%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c3ce97de8fd42c2965a022fa2a4f9b3dccd4b1/crates%2Fcore_simd%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fintrinsics.rs?ref=65c3ce97de8fd42c2965a022fa2a4f9b3dccd4b1", "patch": "@@ -41,9 +41,11 @@ extern \"platform-intrinsic\" {\n     pub(crate) fn simd_cast<T, U>(x: T) -> U;\n \n     // floor\n+    #[cfg(feature = \"std\")]\n     pub(crate) fn simd_floor<T>(x: T) -> T;\n \n     // ceil\n+    #[cfg(feature = \"std\")]\n     pub(crate) fn simd_ceil<T>(x: T) -> T;\n \n     pub(crate) fn simd_eq<T, U>(x: T, y: T) -> U;"}, {"sha": "dc37130a8ce680343ba0f1f088c359ab56e2c33c", "filename": "crates/core_simd/src/round.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65c3ce97de8fd42c2965a022fa2a4f9b3dccd4b1/crates%2Fcore_simd%2Fsrc%2Fround.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c3ce97de8fd42c2965a022fa2a4f9b3dccd4b1/crates%2Fcore_simd%2Fsrc%2Fround.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fround.rs?ref=65c3ce97de8fd42c2965a022fa2a4f9b3dccd4b1", "patch": "@@ -7,13 +7,15 @@ macro_rules! implement {\n             Self: crate::LanesAtMost64,\n         {\n             /// Returns the largest integer less than or equal to each lane.\n+            #[cfg(feature = \"std\")]\n             #[must_use = \"method returns a new vector and does not mutate the original value\"]\n             #[inline]\n             pub fn floor(self) -> Self {\n                 unsafe { crate::intrinsics::simd_floor(self) }\n             }\n \n             /// Returns the smallest integer greater than or equal to each lane.\n+            #[cfg(feature = \"std\")]\n             #[must_use = \"method returns a new vector and does not mutate the original value\"]\n             #[inline]\n             pub fn ceil(self) -> Self {"}, {"sha": "8e0b9626861f7f20c9ae59375ca83f75f1d920eb", "filename": "crates/core_simd/tests/ops_macros.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/65c3ce97de8fd42c2965a022fa2a4f9b3dccd4b1/crates%2Fcore_simd%2Ftests%2Fops_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65c3ce97de8fd42c2965a022fa2a4f9b3dccd4b1/crates%2Fcore_simd%2Ftests%2Fops_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fops_macros.rs?ref=65c3ce97de8fd42c2965a022fa2a4f9b3dccd4b1", "patch": "@@ -265,15 +265,8 @@ macro_rules! impl_float_tests {\n             impl_binary_op_test!(Vector<LANES>, Scalar, Div::div, DivAssign::div_assign);\n             impl_binary_op_test!(Vector<LANES>, Scalar, Rem::rem, RemAssign::rem_assign);\n \n+            #[cfg(feature = \"std\")]\n             test_helpers::test_lanes! {\n-                fn abs<const LANES: usize>() {\n-                    test_helpers::test_unary_elementwise(\n-                        &Vector::<LANES>::abs,\n-                        &Scalar::abs,\n-                        &|_| true,\n-                    )\n-                }\n-\n                 fn ceil<const LANES: usize>() {\n                     test_helpers::test_unary_elementwise(\n                         &Vector::<LANES>::ceil,\n@@ -289,6 +282,16 @@ macro_rules! impl_float_tests {\n                         &|_| true,\n                     )\n                 }\n+            }\n+\n+            test_helpers::test_lanes! {\n+                fn abs<const LANES: usize>() {\n+                    test_helpers::test_unary_elementwise(\n+                        &Vector::<LANES>::abs,\n+                        &Scalar::abs,\n+                        &|_| true,\n+                    )\n+                }\n \n                 fn round_from_int<const LANES: usize>() {\n                     test_helpers::test_unary_elementwise("}]}