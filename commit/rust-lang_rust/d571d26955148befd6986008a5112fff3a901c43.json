{"sha": "d571d26955148befd6986008a5112fff3a901c43", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1NzFkMjY5NTUxNDhiZWZkNjk4NjAwOGE1MTEyZmZmM2E5MDFjNDM=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-01-30T21:41:44Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-02-01T21:54:30Z"}, "message": "Make the Resolution variants tuple variants", "tree": {"sha": "2668177168de835fd88cfe21f44d307ced7dfa94", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2668177168de835fd88cfe21f44d307ced7dfa94"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d571d26955148befd6986008a5112fff3a901c43", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d571d26955148befd6986008a5112fff3a901c43", "html_url": "https://github.com/rust-lang/rust/commit/d571d26955148befd6986008a5112fff3a901c43", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d571d26955148befd6986008a5112fff3a901c43/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3df80dfe41e4e3ab7644ae576119a264ba0e7f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3df80dfe41e4e3ab7644ae576119a264ba0e7f1", "html_url": "https://github.com/rust-lang/rust/commit/d3df80dfe41e4e3ab7644ae576119a264ba0e7f1"}], "stats": {"total": 94, "additions": 41, "deletions": 53}, "files": [{"sha": "a82205f0b3e0d1d7bd9ca21441d4029cd10b8159", "filename": "crates/ra_hir/src/generics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d571d26955148befd6986008a5112fff3a901c43/crates%2Fra_hir%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d571d26955148befd6986008a5112fff3a901c43/crates%2Fra_hir%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fgenerics.rs?ref=d571d26955148befd6986008a5112fff3a901c43", "patch": "@@ -12,6 +12,7 @@ use crate::{db::PersistentHirDatabase, Name, AsName, Function, Struct, Enum, Tra\n /// Data about a generic parameter (to a function, struct, impl, ...).\n #[derive(Clone, PartialEq, Eq, Debug)]\n pub struct GenericParam {\n+    // TODO: give generic params proper IDs\n     pub(crate) idx: u32,\n     pub(crate) name: Name,\n }"}, {"sha": "738c58fbe88a9102add56fe7470309fa0f0b62da", "filename": "crates/ra_hir/src/impl_block.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d571d26955148befd6986008a5112fff3a901c43/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d571d26955148befd6986008a5112fff3a901c43/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs?ref=d571d26955148befd6986008a5112fff3a901c43", "patch": "@@ -90,9 +90,8 @@ impl ImplBlock {\n     pub fn target_trait(&self, db: &impl HirDatabase) -> Option<Trait> {\n         if let Some(TypeRef::Path(path)) = self.target_trait_ref() {\n             let resolver = self.resolver(db);\n-            if let Some(Resolution::Def {\n-                def: ModuleDef::Trait(tr),\n-            }) = resolver.resolve_path(db, path).take_types()\n+            if let Some(Resolution::Def(ModuleDef::Trait(tr))) =\n+                resolver.resolve_path(db, path).take_types()\n             {\n                 return Some(tr);\n             }\n@@ -106,7 +105,7 @@ impl ImplBlock {\n \n     pub fn resolver(&self, db: &impl HirDatabase) -> Resolver {\n         let r = self.module().resolver(db);\n-        // FIXME: add generics\n+        // TODO: add generics\n         let r = r.push_impl_block_scope(self.clone());\n         r\n     }"}, {"sha": "7929e8b7cbc0e38c627350dcde0b093f8f4bfca4", "filename": "crates/ra_hir/src/resolve.rs", "status": "modified", "additions": 11, "deletions": 19, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d571d26955148befd6986008a5112fff3a901c43/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d571d26955148befd6986008a5112fff3a901c43/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fresolve.rs?ref=d571d26955148befd6986008a5112fff3a901c43", "patch": "@@ -48,17 +48,11 @@ pub(crate) enum Scope {\n pub enum Resolution {\n     // FIXME make these tuple variants\n     /// An item\n-    Def {\n-        def: ModuleDef,\n-    },\n+    Def(ModuleDef),\n     /// A local binding (only value namespace)\n-    LocalBinding {\n-        pat: PatId,\n-    },\n+    LocalBinding(PatId),\n     /// A generic parameter\n-    GenericParam {\n-        idx: u32,\n-    },\n+    GenericParam(u32),\n     SelfType(ImplBlock),\n }\n \n@@ -85,7 +79,7 @@ impl Resolver {\n                 _ => return PerNs::none(),\n             };\n             let module_res = item_map.resolve_path(db, module, path);\n-            module_res.map(|def| Resolution::Def { def })\n+            module_res.map(|def| Resolution::Def(def))\n         }\n     }\n \n@@ -157,18 +151,16 @@ impl Scope {\n         match self {\n             Scope::ModuleScope(m) => {\n                 if let Some(KnownName::SelfParam) = name.as_known_name() {\n-                    PerNs::types(Resolution::Def {\n-                        def: m.module.into(),\n-                    })\n+                    PerNs::types(Resolution::Def(m.module.into()))\n                 } else {\n                     match m.item_map[m.module.module_id].get(name) {\n-                        Some(res) => res.def.map(|def| Resolution::Def { def }),\n+                        Some(res) => res.def.map(Resolution::Def),\n                         None => PerNs::none(),\n                     }\n                 }\n             }\n             Scope::GenericParams(gp) => match gp.find_by_name(name) {\n-                Some(gp) => PerNs::types(Resolution::GenericParam { idx: gp.idx }),\n+                Some(gp) => PerNs::types(Resolution::GenericParam(gp.idx)),\n                 None => PerNs::none(),\n             },\n             Scope::ImplBlockScope(i) => {\n@@ -185,7 +177,7 @@ impl Scope {\n                     .iter()\n                     .find(|entry| entry.name() == name);\n                 match entry {\n-                    Some(e) => PerNs::values(Resolution::LocalBinding { pat: e.pat() }),\n+                    Some(e) => PerNs::values(Resolution::LocalBinding(e.pat())),\n                     None => PerNs::none(),\n                 }\n             }\n@@ -205,14 +197,14 @@ impl Scope {\n                 m.item_map[m.module.module_id]\n                     .entries()\n                     .for_each(|(name, res)| {\n-                        f(name.clone(), res.def.map(|def| Resolution::Def { def }));\n+                        f(name.clone(), res.def.map(Resolution::Def));\n                     })\n             }\n             Scope::GenericParams(gp) => {\n                 for param in &gp.params {\n                     f(\n                         param.name.clone(),\n-                        PerNs::types(Resolution::GenericParam { idx: param.idx }),\n+                        PerNs::types(Resolution::GenericParam(param.idx)),\n                     )\n                 }\n             }\n@@ -226,7 +218,7 @@ impl Scope {\n                 e.expr_scopes.entries(e.scope_id).iter().for_each(|e| {\n                     f(\n                         e.name().clone(),\n-                        PerNs::values(Resolution::LocalBinding { pat: e.pat() }),\n+                        PerNs::values(Resolution::LocalBinding(e.pat())),\n                     );\n                 });\n             }"}, {"sha": "cc5afad7533dca791ce3a2315656355c1e533d86", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d571d26955148befd6986008a5112fff3a901c43/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d571d26955148befd6986008a5112fff3a901c43/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=d571d26955148befd6986008a5112fff3a901c43", "patch": "@@ -368,12 +368,12 @@ impl Ty {\n         let resolution = resolver.resolve_path(db, path).take_types();\n \n         let def = match resolution {\n-            Some(Resolution::Def { def, .. }) => def,\n-            Some(Resolution::LocalBinding { .. }) => {\n+            Some(Resolution::Def(def)) => def,\n+            Some(Resolution::LocalBinding(..)) => {\n                 // this should never happen\n                 panic!(\"path resolved to local binding in type ns\");\n             }\n-            Some(Resolution::GenericParam { idx }) => {\n+            Some(Resolution::GenericParam(idx)) => {\n                 return Ty::Param {\n                     idx,\n                     // TODO: maybe return name in resolution?\n@@ -1107,20 +1107,20 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n     fn infer_path_expr(&mut self, resolver: &Resolver, path: &Path) -> Option<Ty> {\n         let resolved = resolver.resolve_path(self.db, &path).take_values()?;\n         match resolved {\n-            Resolution::Def { def, .. } => {\n+            Resolution::Def(def) => {\n                 let typable: Option<TypableDef> = def.into();\n                 let typable = typable?;\n                 let substs = Ty::substs_from_path(self.db, &self.resolver, path, typable);\n                 let ty = self.db.type_for_def(typable).apply_substs(substs);\n                 let ty = self.insert_type_vars(ty);\n                 Some(ty)\n             }\n-            Resolution::LocalBinding { pat } => {\n+            Resolution::LocalBinding(pat) => {\n                 let ty = self.type_of_pat.get(pat)?;\n                 let ty = self.resolve_ty_as_possible(&mut vec![], ty.clone());\n                 Some(ty)\n             }\n-            Resolution::GenericParam { .. } => {\n+            Resolution::GenericParam(..) => {\n                 // generic params can't refer to values... yet\n                 None\n             }\n@@ -1138,13 +1138,13 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         };\n         let resolver = &self.resolver;\n         let typable: Option<TypableDef> = match resolver.resolve_path(self.db, &path).take_types() {\n-            Some(Resolution::Def { def, .. }) => def.into(),\n-            Some(Resolution::LocalBinding { .. }) => {\n+            Some(Resolution::Def(def)) => def.into(),\n+            Some(Resolution::LocalBinding(..)) => {\n                 // this cannot happen\n                 log::error!(\"path resolved to local binding in type ns\");\n                 return (Ty::Unknown, None);\n             }\n-            Some(Resolution::GenericParam { .. }) => {\n+            Some(Resolution::GenericParam(..)) => {\n                 // generic params can't be used in struct literals\n                 return (Ty::Unknown, None);\n             }"}, {"sha": "8e0f6a79e53364f7f122902f1da19a36a48222f0", "filename": "crates/ra_ide_api/src/completion/complete_path.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d571d26955148befd6986008a5112fff3a901c43/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d571d26955148befd6986008a5112fff3a901c43/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs?ref=d571d26955148befd6986008a5112fff3a901c43", "patch": "@@ -12,7 +12,7 @@ pub(super) fn complete_path(acc: &mut Completions, ctx: &CompletionContext) {\n         _ => return,\n     };\n     let def = match ctx.resolver.resolve_path(ctx.db, &path).take_types() {\n-        Some(Resolution::Def { def }) => def,\n+        Some(Resolution::Def(def)) => def,\n         _ => return,\n     };\n     match def {\n@@ -24,7 +24,7 @@ pub(super) fn complete_path(acc: &mut Completions, ctx: &CompletionContext) {\n                     ctx.source_range(),\n                     name.to_string(),\n                 )\n-                .from_resolution(ctx, &res.def.map(|def| hir::Resolution::Def { def }))\n+                .from_resolution(ctx, &res.def.map(hir::Resolution::Def))\n                 .add_to(acc);\n             }\n         }"}, {"sha": "bada6a33bf25cda892449f948371b08f2dd66626", "filename": "crates/ra_ide_api/src/completion/completion_item.rs", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d571d26955148befd6986008a5112fff3a901c43/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d571d26955148befd6986008a5112fff3a901c43/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_item.rs?ref=d571d26955148befd6986008a5112fff3a901c43", "patch": "@@ -223,22 +223,18 @@ impl Builder {\n             Some(it) => it,\n         };\n         let (kind, docs) = match def {\n-            Resolution::Def { def: Module(it) } => (CompletionItemKind::Module, it.docs(ctx.db)),\n-            Resolution::Def {\n-                def: Function(func),\n-            } => return self.from_function(ctx, *func),\n-            Resolution::Def { def: Struct(it) } => (CompletionItemKind::Struct, it.docs(ctx.db)),\n-            Resolution::Def { def: Enum(it) } => (CompletionItemKind::Enum, it.docs(ctx.db)),\n-            Resolution::Def {\n-                def: EnumVariant(it),\n-            } => (CompletionItemKind::EnumVariant, it.docs(ctx.db)),\n-            Resolution::Def { def: Const(it) } => (CompletionItemKind::Const, it.docs(ctx.db)),\n-            Resolution::Def { def: Static(it) } => (CompletionItemKind::Static, it.docs(ctx.db)),\n-            Resolution::Def { def: Trait(it) } => (CompletionItemKind::Trait, it.docs(ctx.db)),\n-            Resolution::Def { def: Type(it) } => (CompletionItemKind::TypeAlias, it.docs(ctx.db)),\n-            Resolution::GenericParam { .. } => (CompletionItemKind::TypeParam, None),\n-            Resolution::LocalBinding { .. } => (CompletionItemKind::Binding, None),\n-            Resolution::SelfType { .. } => (\n+            Resolution::Def(Module(it)) => (CompletionItemKind::Module, it.docs(ctx.db)),\n+            Resolution::Def(Function(func)) => return self.from_function(ctx, *func),\n+            Resolution::Def(Struct(it)) => (CompletionItemKind::Struct, it.docs(ctx.db)),\n+            Resolution::Def(Enum(it)) => (CompletionItemKind::Enum, it.docs(ctx.db)),\n+            Resolution::Def(EnumVariant(it)) => (CompletionItemKind::EnumVariant, it.docs(ctx.db)),\n+            Resolution::Def(Const(it)) => (CompletionItemKind::Const, it.docs(ctx.db)),\n+            Resolution::Def(Static(it)) => (CompletionItemKind::Static, it.docs(ctx.db)),\n+            Resolution::Def(Trait(it)) => (CompletionItemKind::Trait, it.docs(ctx.db)),\n+            Resolution::Def(Type(it)) => (CompletionItemKind::TypeAlias, it.docs(ctx.db)),\n+            Resolution::GenericParam(..) => (CompletionItemKind::TypeParam, None),\n+            Resolution::LocalBinding(..) => (CompletionItemKind::Binding, None),\n+            Resolution::SelfType(..) => (\n                 CompletionItemKind::TypeParam, // (does this need its own kind?)\n                 None,\n             ),"}, {"sha": "88efcea2a57368808f4c36ad8b3729495dd1dbd8", "filename": "crates/ra_ide_api/src/goto_definition.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d571d26955148befd6986008a5112fff3a901c43/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d571d26955148befd6986008a5112fff3a901c43/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs?ref=d571d26955148befd6986008a5112fff3a901c43", "patch": "@@ -90,8 +90,8 @@ pub(crate) fn reference_definition(\n     {\n         let resolved = resolver.resolve_path(db, &path);\n         match resolved.clone().take_types().or(resolved.take_values()) {\n-            Some(Resolution::Def { def }) => return Exact(NavigationTarget::from_def(db, def)),\n-            Some(Resolution::LocalBinding { pat }) => {\n+            Some(Resolution::Def(def)) => return Exact(NavigationTarget::from_def(db, def)),\n+            Some(Resolution::LocalBinding(pat)) => {\n                 let body = resolver.body().expect(\"no body for local binding\");\n                 let syntax_mapping = body.syntax_mapping(db);\n                 let ptr = syntax_mapping\n@@ -104,7 +104,7 @@ pub(crate) fn reference_definition(\n                 let nav = NavigationTarget::from_scope_entry(file_id, name, ptr);\n                 return Exact(nav);\n             }\n-            Some(Resolution::GenericParam { .. }) => {\n+            Some(Resolution::GenericParam(..)) => {\n                 // TODO go to the generic param def\n             }\n             Some(Resolution::SelfType(_impl_block)) => {"}]}