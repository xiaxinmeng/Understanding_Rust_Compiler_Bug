{"sha": "94be14516968501306f1ed95774a3f227956e809", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0YmUxNDUxNjk2ODUwMTMwNmYxZWQ5NTc3NGEzZjIyNzk1NmU4MDk=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-12-04T01:45:19Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-12-04T01:45:19Z"}, "message": "core: rename box to managed. Close #4079.", "tree": {"sha": "bccf079bcdc9fd38554c91d0a8901057faa7a78f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bccf079bcdc9fd38554c91d0a8901057faa7a78f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94be14516968501306f1ed95774a3f227956e809", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94be14516968501306f1ed95774a3f227956e809", "html_url": "https://github.com/rust-lang/rust/commit/94be14516968501306f1ed95774a3f227956e809", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94be14516968501306f1ed95774a3f227956e809/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a5713ed5c129977c4c3880f633f9fce35813ab1", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a5713ed5c129977c4c3880f633f9fce35813ab1", "html_url": "https://github.com/rust-lang/rust/commit/2a5713ed5c129977c4c3880f633f9fce35813ab1"}], "stats": {"total": 52, "additions": 27, "deletions": 25}, "files": [{"sha": "5f313244e2758292465206b43c91873af482af49", "filename": "src/libcore/core.rc", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/94be14516968501306f1ed95774a3f227956e809/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/94be14516968501306f1ed95774a3f227956e809/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=94be14516968501306f1ed95774a3f227956e809", "patch": "@@ -19,12 +19,12 @@ used features.\n \n `core` includes modules corresponding to each of the integer types, each of\n the floating point types, the `bool` type, tuples, characters, strings,\n-vectors (`vec`), shared boxes (`box`), and unsafe and borrowed pointers\n-(`ptr`).  Additionally, `core` provides task management and creation (`task`),\n-communication primitives (`comm` and `pipes`), an efficient vector builder\n-(`dvec`), platform abstractions (`os` and `path`), basic I/O abstractions\n-(`io`), common traits (`cmp`, `num`, `to_str`), and complete bindings\n-to the C standard library (`libc`).\n+vectors (`vec`), managed boxes (`managed`), owned boxes (`owned`), and unsafe\n+and borrowed pointers (`ptr`).  Additionally, `core` provides task management\n+and creation (`task`), communication primitives (`comm` and `pipes`), an\n+efficient vector builder (`dvec`), platform abstractions (`os` and `path`),\n+basic I/O abstractions (`io`), common traits (`cmp`, `num`, `to_str`), and\n+complete bindings to the C standard library (`libc`).\n \n `core` is linked to all crates by default and its contents imported.\n Implicitly, all crates behave as if they included the following prologue:\n@@ -92,7 +92,7 @@ pub mod at_vec;\n pub mod str;\n \n pub mod ptr;\n-pub mod box; // FIXME #4079 Rename to 'managed' to match 'owned'\n+pub mod managed;\n pub mod owned;\n \n "}, {"sha": "35ff98ac17dae6471cc6f38d81ac6966f2178f25", "filename": "src/libcore/dlist.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/94be14516968501306f1ed95774a3f227956e809/src%2Flibcore%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94be14516968501306f1ed95774a3f227956e809/src%2Flibcore%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fdlist.rs?ref=94be14516968501306f1ed95774a3f227956e809", "patch": "@@ -43,7 +43,7 @@ priv impl<T> DListNode<T> {\n     pure fn assert_links() {\n         match self.next {\n             Some(neighbour) => match neighbour.prev {\n-              Some(me) => if !box::ptr_eq(*self, *me) {\n+              Some(me) => if !managed::ptr_eq(*self, *me) {\n                   fail ~\"Asymmetric next-link in dlist node.\"\n               },\n               None => fail ~\"One-way next-link in dlist node.\"\n@@ -52,7 +52,7 @@ priv impl<T> DListNode<T> {\n         }\n         match self.prev {\n             Some(neighbour) => match neighbour.next {\n-              Some(me) => if !box::ptr_eq(*me, *self) {\n+              Some(me) => if !managed::ptr_eq(*me, *self) {\n                   fail ~\"Asymmetric prev-link in dlist node.\"\n               },\n               None => fail ~\"One-way prev-link in dlist node.\"\n@@ -137,9 +137,11 @@ priv impl<T> DList<T> {\n         }\n         if !nobe.linked { fail ~\"That node isn't linked to any dlist.\" }\n         if !((nobe.prev.is_some()\n-              || box::ptr_eq(*self.hd.expect(~\"headless dlist?\"), *nobe)) &&\n+              || managed::ptr_eq(*self.hd.expect(~\"headless dlist?\"),\n+                                 *nobe)) &&\n              (nobe.next.is_some()\n-              || box::ptr_eq(*self.tl.expect(~\"tailless dlist?\"), *nobe))) {\n+              || managed::ptr_eq(*self.tl.expect(~\"tailless dlist?\"),\n+                                 *nobe))) {\n             fail ~\"That node isn't on this dlist.\"\n         }\n     }\n@@ -322,7 +324,7 @@ impl<T> DList<T> {\n      * to the other list's head. O(1).\n      */\n     fn append(them: DList<T>) {\n-        if box::ptr_eq(*self, *them) {\n+        if managed::ptr_eq(*self, *them) {\n             fail ~\"Cannot append a dlist to itself!\"\n         }\n         if them.len() > 0 {\n@@ -339,7 +341,7 @@ impl<T> DList<T> {\n      * list's tail to this list's head. O(1).\n      */\n     fn prepend(them: DList<T>) {\n-        if box::ptr_eq(*self, *them) {\n+        if managed::ptr_eq(*self, *them) {\n             fail ~\"Cannot prepend a dlist to itself!\"\n         }\n         if them.len() > 0 {\n@@ -405,7 +407,7 @@ impl<T> DList<T> {\n                 rabbit = option::get(rabbit).next;\n             }\n             if option::is_some(&rabbit) {\n-                assert !box::ptr_eq(*option::get(rabbit), *nobe);\n+                assert !managed::ptr_eq(*option::get(rabbit), *nobe);\n             }\n             // advance\n             link = nobe.next_link();\n@@ -426,7 +428,7 @@ impl<T> DList<T> {\n                 rabbit = option::get(rabbit).prev;\n             }\n             if option::is_some(&rabbit) {\n-                assert !box::ptr_eq(*option::get(rabbit), *nobe);\n+                assert !managed::ptr_eq(*option::get(rabbit), *nobe);\n             }\n             // advance\n             link = nobe.prev_link();"}, {"sha": "ce5f775878cf36f8d74f1e6eac2d8192431f5aef", "filename": "src/libcore/iter-trait/dlist.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94be14516968501306f1ed95774a3f227956e809/src%2Flibcore%2Fiter-trait%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94be14516968501306f1ed95774a3f227956e809/src%2Flibcore%2Fiter-trait%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter-trait%2Fdlist.rs?ref=94be14516968501306f1ed95774a3f227956e809", "patch": "@@ -31,10 +31,10 @@ mod inst {\n             }\n             if !nobe.linked ||\n                 (!((nobe.prev.is_some()\n-                    || box::ptr_eq(*self.hd.expect(~\"headless dlist?\"),\n+                    || managed::ptr_eq(*self.hd.expect(~\"headless dlist?\"),\n                                    *nobe))\n                    && (nobe.next.is_some()\n-                    || box::ptr_eq(*self.tl.expect(~\"tailless dlist?\"),\n+                    || managed::ptr_eq(*self.tl.expect(~\"tailless dlist?\"),\n                                    *nobe)))) {\n                 fail ~\"Removing a dlist node during iteration is forbidden!\"\n             }"}, {"sha": "bc6a56868a5c44e75fb791e654251a3f5cea16c2", "filename": "src/libcore/managed.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/94be14516968501306f1ed95774a3f227956e809/src%2Flibcore%2Fmanaged.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94be14516968501306f1ed95774a3f227956e809/src%2Flibcore%2Fmanaged.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmanaged.rs?ref=94be14516968501306f1ed95774a3f227956e809", "previous_filename": "src/libcore/box.rs"}, {"sha": "9a0cfeefd60747e2bbc7d5b467ec011c36a5ceca", "filename": "src/libcore/repr.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/94be14516968501306f1ed95774a3f227956e809/src%2Flibcore%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94be14516968501306f1ed95774a3f227956e809/src%2Flibcore%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frepr.rs?ref=94be14516968501306f1ed95774a3f227956e809", "patch": "@@ -27,8 +27,8 @@ use intrinsic::{TyDesc, TyVisitor, visit_tydesc};\n use reflect::{MovePtr, MovePtrAdaptor};\n use vec::UnboxedVecRepr;\n use vec::raw::{VecRepr, SliceRepr};\n-pub use box::raw::BoxRepr;\n-use box::raw::BoxHeaderRepr;\n+pub use managed::raw::BoxRepr;\n+use managed::raw::BoxHeaderRepr;\n \n /// Helpers\n \n@@ -279,7 +279,7 @@ impl ReprVisitor : TyVisitor {\n     fn visit_box(mtbl: uint, inner: *TyDesc) -> bool {\n         self.writer.write_char('@');\n         self.write_mut_qualifier(mtbl);\n-        do self.get::<&box::raw::BoxRepr> |b| {\n+        do self.get::<&managed::raw::BoxRepr> |b| {\n             let p = ptr::to_unsafe_ptr(&b.data) as *c_void;\n             self.visit_ptr_inner(p, inner);\n         }\n@@ -288,7 +288,7 @@ impl ReprVisitor : TyVisitor {\n     fn visit_uniq(mtbl: uint, inner: *TyDesc) -> bool {\n         self.writer.write_char('~');\n         self.write_mut_qualifier(mtbl);\n-        do self.get::<&box::raw::BoxRepr> |b| {\n+        do self.get::<&managed::raw::BoxRepr> |b| {\n             let p = ptr::to_unsafe_ptr(&b.data) as *c_void;\n             self.visit_ptr_inner(p, inner);\n         }\n@@ -446,7 +446,7 @@ impl ReprVisitor : TyVisitor {\n \n     fn visit_opaque_box() -> bool {\n         self.writer.write_char('@');\n-        do self.get::<&box::raw::BoxRepr> |b| {\n+        do self.get::<&managed::raw::BoxRepr> |b| {\n             let p = ptr::to_unsafe_ptr(&b.data) as *c_void;\n             self.visit_ptr_inner(p, b.header.type_desc);\n         }"}, {"sha": "ceb169c2e6e9c65185ece2be3a84b717baf8afa5", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94be14516968501306f1ed95774a3f227956e809/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94be14516968501306f1ed95774a3f227956e809/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=94be14516968501306f1ed95774a3f227956e809", "patch": "@@ -1763,7 +1763,7 @@ mod raw {\n \n     /// The internal representation of a (boxed) vector\n     pub struct VecRepr {\n-        box_header: box::raw::BoxHeaderRepr,\n+        box_header: managed::raw::BoxHeaderRepr,\n         unboxed: UnboxedVecRepr\n     }\n "}, {"sha": "21bd01b6f9124eef8cb6cb6f31fd863f8cffb98b", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94be14516968501306f1ed95774a3f227956e809/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94be14516968501306f1ed95774a3f227956e809/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=94be14516968501306f1ed95774a3f227956e809", "patch": "@@ -63,7 +63,7 @@ use syntax::visit::{visit_crate, visit_expr, visit_expr_opt, visit_fn};\n use syntax::visit::{visit_foreign_item, visit_item, visit_method_helper};\n use syntax::visit::{visit_mod, visit_ty, vt};\n \n-use box::ptr_eq;\n+use managed::ptr_eq;\n use dvec::DVec;\n use option::{Some, get, is_some, is_none};\n use str::{connect, split_str};"}, {"sha": "5e47dee548ff47fc88ef06bbb000929d7cc5091d", "filename": "src/libsyntax/ext/simplext.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94be14516968501306f1ed95774a3f227956e809/src%2Flibsyntax%2Fext%2Fsimplext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94be14516968501306f1ed95774a3f227956e809/src%2Flibsyntax%2Fext%2Fsimplext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsimplext.rs?ref=94be14516968501306f1ed95774a3f227956e809", "patch": "@@ -476,7 +476,7 @@ fn p_t_s_rec(cx: ext_ctxt, m: matchable, s: selector, b: binders) {\n                match_result {\n                 return match m {\n                       match_expr(e) => {\n-                        if box::ptr_eq(e, pat) {\n+                        if managed::ptr_eq(e, pat) {\n                             // XXX: Is this right?\n                             Some(leaf(match_exact))\n                         } else {"}]}