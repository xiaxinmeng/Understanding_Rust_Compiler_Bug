{"sha": "17ddcb434b8fca7eeb865985942b146647a3510f", "node_id": "C_kwDOAAsO6NoAKDE3ZGRjYjQzNGI4ZmNhN2VlYjg2NTk4NTk0MmIxNDY2NDdhMzUxMGY", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2022-04-30T17:01:31Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2022-08-20T21:50:29Z"}, "message": "Improve primitive/std docs separation and headers", "tree": {"sha": "96b82deea6193db1d6b755e8acd82d6708ced755", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96b82deea6193db1d6b755e8acd82d6708ced755"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/17ddcb434b8fca7eeb865985942b146647a3510f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/17ddcb434b8fca7eeb865985942b146647a3510f", "html_url": "https://github.com/rust-lang/rust/commit/17ddcb434b8fca7eeb865985942b146647a3510f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/17ddcb434b8fca7eeb865985942b146647a3510f/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd01122b5c62a04e64b4109c5576eeea9ae4145b", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd01122b5c62a04e64b4109c5576eeea9ae4145b", "html_url": "https://github.com/rust-lang/rust/commit/dd01122b5c62a04e64b4109c5576eeea9ae4145b"}], "stats": {"total": 255, "additions": 127, "deletions": 128}, "files": [{"sha": "6955d863c99e792df84660d50d14203ceb9b9848", "filename": "library/alloc/src/boxed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17ddcb434b8fca7eeb865985942b146647a3510f/library%2Falloc%2Fsrc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17ddcb434b8fca7eeb865985942b146647a3510f/library%2Falloc%2Fsrc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fboxed.rs?ref=17ddcb434b8fca7eeb865985942b146647a3510f", "patch": "@@ -1,4 +1,4 @@\n-//! A pointer type for heap allocation.\n+//! The `Box<T>` type for heap allocation.\n //!\n //! [`Box<T>`], casually referred to as a 'box', provides the simplest form of\n //! heap allocation in Rust. Boxes provide ownership for this allocation, and"}, {"sha": "2bc08f86def1e2048b3784b3b2722333e165d286", "filename": "library/alloc/src/slice.rs", "status": "modified", "additions": 5, "deletions": 75, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/17ddcb434b8fca7eeb865985942b146647a3510f/library%2Falloc%2Fsrc%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17ddcb434b8fca7eeb865985942b146647a3510f/library%2Falloc%2Fsrc%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fslice.rs?ref=17ddcb434b8fca7eeb865985942b146647a3510f", "patch": "@@ -1,82 +1,12 @@\n-//! A dynamically-sized view into a contiguous sequence, `[T]`.\n+//! Utilities for the slice primitive type.\n //!\n //! *[See also the slice primitive type](slice).*\n //!\n-//! Slices are a view into a block of memory represented as a pointer and a\n-//! length.\n+//! Most of the structs in this module are iterator types which can only be created\n+//! using a certain function. For example, `slice.iter()` yields an [`Iter`].\n //!\n-//! ```\n-//! // slicing a Vec\n-//! let vec = vec![1, 2, 3];\n-//! let int_slice = &vec[..];\n-//! // coercing an array to a slice\n-//! let str_slice: &[&str] = &[\"one\", \"two\", \"three\"];\n-//! ```\n-//!\n-//! Slices are either mutable or shared. The shared slice type is `&[T]`,\n-//! while the mutable slice type is `&mut [T]`, where `T` represents the element\n-//! type. For example, you can mutate the block of memory that a mutable slice\n-//! points to:\n-//!\n-//! ```\n-//! let x = &mut [1, 2, 3];\n-//! x[1] = 7;\n-//! assert_eq!(x, &[1, 7, 3]);\n-//! ```\n-//!\n-//! Here are some of the things this module contains:\n-//!\n-//! ## Structs\n-//!\n-//! There are several structs that are useful for slices, such as [`Iter`], which\n-//! represents iteration over a slice.\n-//!\n-//! ## Trait Implementations\n-//!\n-//! There are several implementations of common traits for slices. Some examples\n-//! include:\n-//!\n-//! * [`Clone`]\n-//! * [`Eq`], [`Ord`] - for slices whose element type are [`Eq`] or [`Ord`].\n-//! * [`Hash`] - for slices whose element type is [`Hash`].\n-//!\n-//! ## Iteration\n-//!\n-//! The slices implement `IntoIterator`. The iterator yields references to the\n-//! slice elements.\n-//!\n-//! ```\n-//! let numbers = &[0, 1, 2];\n-//! for n in numbers {\n-//!     println!(\"{n} is a number!\");\n-//! }\n-//! ```\n-//!\n-//! The mutable slice yields mutable references to the elements:\n-//!\n-//! ```\n-//! let mut scores = [7, 8, 9];\n-//! for score in &mut scores[..] {\n-//!     *score += 1;\n-//! }\n-//! ```\n-//!\n-//! This iterator yields mutable references to the slice's elements, so while\n-//! the element type of the slice is `i32`, the element type of the iterator is\n-//! `&mut i32`.\n-//!\n-//! * [`.iter`] and [`.iter_mut`] are the explicit methods to return the default\n-//!   iterators.\n-//! * Further methods that return iterators are [`.split`], [`.splitn`],\n-//!   [`.chunks`], [`.windows`] and more.\n-//!\n-//! [`Hash`]: core::hash::Hash\n-//! [`.iter`]: slice::iter\n-//! [`.iter_mut`]: slice::iter_mut\n-//! [`.split`]: slice::split\n-//! [`.splitn`]: slice::splitn\n-//! [`.chunks`]: slice::chunks\n-//! [`.windows`]: slice::windows\n+//! A few functions are provided to create a slice from a value reference\n+//! or from a raw pointer.\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n // Many of the usings in this module are only used in the test configuration.\n // It's cleaner to just turn off the unused_imports warning than to fix them."}, {"sha": "101dd1e57ec4dc20ab408950219d63afaa3b3ff6", "filename": "library/alloc/src/str.rs", "status": "modified", "additions": 1, "deletions": 21, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/17ddcb434b8fca7eeb865985942b146647a3510f/library%2Falloc%2Fsrc%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17ddcb434b8fca7eeb865985942b146647a3510f/library%2Falloc%2Fsrc%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstr.rs?ref=17ddcb434b8fca7eeb865985942b146647a3510f", "patch": "@@ -1,26 +1,6 @@\n-//! Unicode string slices.\n+//! Utilities for the `str` primitive type.\n //!\n //! *[See also the `str` primitive type](str).*\n-//!\n-//! The `&str` type is one of the two main string types, the other being `String`.\n-//! Unlike its `String` counterpart, its contents are borrowed.\n-//!\n-//! # Basic Usage\n-//!\n-//! A basic string declaration of `&str` type:\n-//!\n-//! ```\n-//! let hello_world = \"Hello, World!\";\n-//! ```\n-//!\n-//! Here we have declared a string literal, also known as a string slice.\n-//! String literals have a static lifetime, which means the string `hello_world`\n-//! is guaranteed to be valid for the duration of the entire program.\n-//! We can explicitly specify `hello_world`'s lifetime as well:\n-//!\n-//! ```\n-//! let hello_world: &'static str = \"Hello, world!\";\n-//! ```\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n // Many of the usings in this module are only used in the test configuration."}, {"sha": "e54f6c912d5945eacdc096a27c4b5b52222a6575", "filename": "library/core/src/any.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/17ddcb434b8fca7eeb865985942b146647a3510f/library%2Fcore%2Fsrc%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17ddcb434b8fca7eeb865985942b146647a3510f/library%2Fcore%2Fsrc%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fany.rs?ref=17ddcb434b8fca7eeb865985942b146647a3510f", "patch": "@@ -1,7 +1,4 @@\n-//! This module contains the `Any` trait, which enables dynamic typing\n-//! of any `'static` type through runtime reflection. It also contains the\n-//! `Provider` trait and accompanying API, which enable trait objects to provide\n-//! data based on typed requests, an alternate form of runtime reflection.\n+//! Utilities for dynamic typing or type reflection.\n //!\n //! # `Any` and `TypeId`\n //!"}, {"sha": "db5bfcab9d2b163c1a3e6e07234fd7a9682019d4", "filename": "library/core/src/array/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17ddcb434b8fca7eeb865985942b146647a3510f/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17ddcb434b8fca7eeb865985942b146647a3510f/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fmod.rs?ref=17ddcb434b8fca7eeb865985942b146647a3510f", "patch": "@@ -1,4 +1,4 @@\n-//! Helper functions and types for fixed-length arrays.\n+//! Utilities for the array primitive type.\n //!\n //! *[See also the array primitive type](array).*\n "}, {"sha": "8378611eb18c306b237f9f568610fc5a91cfbd58", "filename": "library/core/src/borrow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17ddcb434b8fca7eeb865985942b146647a3510f/library%2Fcore%2Fsrc%2Fborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17ddcb434b8fca7eeb865985942b146647a3510f/library%2Fcore%2Fsrc%2Fborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fborrow.rs?ref=17ddcb434b8fca7eeb865985942b146647a3510f", "patch": "@@ -1,4 +1,4 @@\n-//! A module for working with borrowed data.\n+//! Utilities for working with borrowed data.\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}, {"sha": "a4bdd38f6553095c91a26e2ba4691c8d6a26ae63", "filename": "library/core/src/char/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17ddcb434b8fca7eeb865985942b146647a3510f/library%2Fcore%2Fsrc%2Fchar%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17ddcb434b8fca7eeb865985942b146647a3510f/library%2Fcore%2Fsrc%2Fchar%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fmod.rs?ref=17ddcb434b8fca7eeb865985942b146647a3510f", "patch": "@@ -1,4 +1,6 @@\n-//! A character type.\n+//! Utilities for the `char` primitive type.\n+//!\n+//! *[See also the `char` primitive type](primitive@char).*\n //!\n //! The `char` type represents a single character. More specifically, since\n //! 'character' isn't a well-defined concept in Unicode, `char` is a '[Unicode"}, {"sha": "8a30bb6745060c22a01c947752bbc15e45ff2a6f", "filename": "library/core/src/cmp.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17ddcb434b8fca7eeb865985942b146647a3510f/library%2Fcore%2Fsrc%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17ddcb434b8fca7eeb865985942b146647a3510f/library%2Fcore%2Fsrc%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcmp.rs?ref=17ddcb434b8fca7eeb865985942b146647a3510f", "patch": "@@ -1,6 +1,6 @@\n-//! Functionality for ordering and comparison.\n+//! Utilities for comparing and ordering values.\n //!\n-//! This module contains various tools for ordering and comparing values. In\n+//! This module contains various tools for comparing and ordering values. In\n //! summary:\n //!\n //! * [`Eq`] and [`PartialEq`] are traits that allow you to define total and"}, {"sha": "b53cd6074b5327d18e6044b11a27cffc3eb2a7df", "filename": "library/core/src/default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17ddcb434b8fca7eeb865985942b146647a3510f/library%2Fcore%2Fsrc%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17ddcb434b8fca7eeb865985942b146647a3510f/library%2Fcore%2Fsrc%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fdefault.rs?ref=17ddcb434b8fca7eeb865985942b146647a3510f", "patch": "@@ -1,4 +1,4 @@\n-//! The `Default` trait for types which may have meaningful default values.\n+//! The `Default` trait for types with a default value.\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}, {"sha": "94a8a1ec792844bb8c529076578c40619186828a", "filename": "library/core/src/num/f32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17ddcb434b8fca7eeb865985942b146647a3510f/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17ddcb434b8fca7eeb865985942b146647a3510f/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs?ref=17ddcb434b8fca7eeb865985942b146647a3510f", "patch": "@@ -1,4 +1,4 @@\n-//! Constants specific to the `f32` single-precision floating point type.\n+//! Constants for the `f32` single-precision floating point type.\n //!\n //! *[See also the `f32` primitive type][f32].*\n //!"}, {"sha": "bc278fa806927b303c073349052bb80bea3fe9cc", "filename": "library/core/src/num/f64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17ddcb434b8fca7eeb865985942b146647a3510f/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17ddcb434b8fca7eeb865985942b146647a3510f/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs?ref=17ddcb434b8fca7eeb865985942b146647a3510f", "patch": "@@ -1,4 +1,4 @@\n-//! Constants specific to the `f64` double-precision floating point type.\n+//! Constants for the `f64` double-precision floating point type.\n //!\n //! *[See also the `f64` primitive type][f64].*\n //!"}, {"sha": "2b2ef64fdb1c3f31cacc27592ee7fc8f43d5d108", "filename": "library/core/src/primitive_docs.rs", "status": "modified", "additions": 53, "deletions": 8, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/17ddcb434b8fca7eeb865985942b146647a3510f/library%2Fcore%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17ddcb434b8fca7eeb865985942b146647a3510f/library%2Fcore%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fprimitive_docs.rs?ref=17ddcb434b8fca7eeb865985942b146647a3510f", "patch": "@@ -801,11 +801,53 @@ mod prim_array {}\n /// assert_eq!(2 * pointer_size, std::mem::size_of::<Box<[u8]>>());\n /// assert_eq!(2 * pointer_size, std::mem::size_of::<Rc<[u8]>>());\n /// ```\n+///\n+/// ## Trait Implementations\n+///\n+/// Some traits are implemented for slices if the element type implements\n+/// that trait. This includes [`Eq`], [`Hash`] and [`Ord`].\n+///\n+/// ## Iteration\n+///\n+/// The slices implement `IntoIterator`. The iterator yields references to the\n+/// slice elements.\n+///\n+/// ```\n+/// let numbers: &[i32] = &[0, 1, 2];\n+/// for n in numbers {\n+///     println!(\"{n} is a number!\");\n+/// }\n+/// ```\n+///\n+/// The mutable slice yields mutable references to the elements:\n+///\n+/// ```\n+/// let mut scores: &mut [i32] = &mut [7, 8, 9];\n+/// for score in scores {\n+///     *score += 1;\n+/// }\n+/// ```\n+///\n+/// This iterator yields mutable references to the slice's elements, so while\n+/// the element type of the slice is `i32`, the element type of the iterator is\n+/// `&mut i32`.\n+///\n+/// * [`.iter`] and [`.iter_mut`] are the explicit methods to return the default\n+///   iterators.\n+/// * Further methods that return iterators are [`.split`], [`.splitn`],\n+///   [`.chunks`], [`.windows`] and more.\n+///\n+/// [`Hash`]: core::hash::Hash\n+/// [`.iter`]: slice::iter\n+/// [`.iter_mut`]: slice::iter_mut\n+/// [`.split`]: slice::split\n+/// [`.splitn`]: slice::splitn\n+/// [`.chunks`]: slice::chunks\n+/// [`.windows`]: slice::windows\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_slice {}\n \n #[doc(primitive = \"str\")]\n-//\n /// String slices.\n ///\n /// *[See also the `std::str` module](crate::str).*\n@@ -816,19 +858,22 @@ mod prim_slice {}\n ///\n /// String slices are always valid UTF-8.\n ///\n-/// # Examples\n+/// # Basic Usage\n ///\n /// String literals are string slices:\n ///\n /// ```\n-/// let hello = \"Hello, world!\";\n-///\n-/// // with an explicit type annotation\n-/// let hello: &'static str = \"Hello, world!\";\n+/// let hello_world = \"Hello, World!\";\n /// ```\n ///\n-/// They are `'static` because they're stored directly in the final binary, and\n-/// so will be valid for the `'static` duration.\n+/// Here we have declared a string slice initialized with a string literal.\n+/// String literals have a static lifetime, which means the string `hello_world`\n+/// is guaranteed to be valid for the duration of the entire program.\n+/// We can explicitly specify `hello_world`'s lifetime as well:\n+///\n+/// ```\n+/// let hello_world: &'static str = \"Hello, world!\";\n+/// ```\n ///\n /// # Representation\n ///"}, {"sha": "4fbcfd85d7c04060cf8612577c32709eecc154ed", "filename": "library/std/src/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17ddcb434b8fca7eeb865985942b146647a3510f/library%2Fstd%2Fsrc%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17ddcb434b8fca7eeb865985942b146647a3510f/library%2Fstd%2Fsrc%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ferror.rs?ref=17ddcb434b8fca7eeb865985942b146647a3510f", "patch": "@@ -1,4 +1,4 @@\n-//! Interfaces for working with Errors.\n+//! The `Error` trait provides common functionality for errors.\n //!\n //! # Error Handling In Rust\n //!"}, {"sha": "3dd5b12507fb2b136692e8e7220fda047d4fb261", "filename": "library/std/src/f32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17ddcb434b8fca7eeb865985942b146647a3510f/library%2Fstd%2Fsrc%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17ddcb434b8fca7eeb865985942b146647a3510f/library%2Fstd%2Fsrc%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ff32.rs?ref=17ddcb434b8fca7eeb865985942b146647a3510f", "patch": "@@ -1,4 +1,4 @@\n-//! Constants specific to the `f32` single-precision floating point type.\n+//! Constants for the `f32` single-precision floating point type.\n //!\n //! *[See also the `f32` primitive type](primitive@f32).*\n //!"}, {"sha": "31351a87978c918dcaec443c092ef60b5b853272", "filename": "library/std/src/f64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17ddcb434b8fca7eeb865985942b146647a3510f/library%2Fstd%2Fsrc%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17ddcb434b8fca7eeb865985942b146647a3510f/library%2Fstd%2Fsrc%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ff64.rs?ref=17ddcb434b8fca7eeb865985942b146647a3510f", "patch": "@@ -1,4 +1,4 @@\n-//! Constants specific to the `f64` double-precision floating point type.\n+//! Constants for the `f64` double-precision floating point type.\n //!\n //! *[See also the `f64` primitive type](primitive@f64).*\n //!"}, {"sha": "2b2ef64fdb1c3f31cacc27592ee7fc8f43d5d108", "filename": "library/std/src/primitive_docs.rs", "status": "modified", "additions": 53, "deletions": 8, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/17ddcb434b8fca7eeb865985942b146647a3510f/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17ddcb434b8fca7eeb865985942b146647a3510f/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprimitive_docs.rs?ref=17ddcb434b8fca7eeb865985942b146647a3510f", "patch": "@@ -801,11 +801,53 @@ mod prim_array {}\n /// assert_eq!(2 * pointer_size, std::mem::size_of::<Box<[u8]>>());\n /// assert_eq!(2 * pointer_size, std::mem::size_of::<Rc<[u8]>>());\n /// ```\n+///\n+/// ## Trait Implementations\n+///\n+/// Some traits are implemented for slices if the element type implements\n+/// that trait. This includes [`Eq`], [`Hash`] and [`Ord`].\n+///\n+/// ## Iteration\n+///\n+/// The slices implement `IntoIterator`. The iterator yields references to the\n+/// slice elements.\n+///\n+/// ```\n+/// let numbers: &[i32] = &[0, 1, 2];\n+/// for n in numbers {\n+///     println!(\"{n} is a number!\");\n+/// }\n+/// ```\n+///\n+/// The mutable slice yields mutable references to the elements:\n+///\n+/// ```\n+/// let mut scores: &mut [i32] = &mut [7, 8, 9];\n+/// for score in scores {\n+///     *score += 1;\n+/// }\n+/// ```\n+///\n+/// This iterator yields mutable references to the slice's elements, so while\n+/// the element type of the slice is `i32`, the element type of the iterator is\n+/// `&mut i32`.\n+///\n+/// * [`.iter`] and [`.iter_mut`] are the explicit methods to return the default\n+///   iterators.\n+/// * Further methods that return iterators are [`.split`], [`.splitn`],\n+///   [`.chunks`], [`.windows`] and more.\n+///\n+/// [`Hash`]: core::hash::Hash\n+/// [`.iter`]: slice::iter\n+/// [`.iter_mut`]: slice::iter_mut\n+/// [`.split`]: slice::split\n+/// [`.splitn`]: slice::splitn\n+/// [`.chunks`]: slice::chunks\n+/// [`.windows`]: slice::windows\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_slice {}\n \n #[doc(primitive = \"str\")]\n-//\n /// String slices.\n ///\n /// *[See also the `std::str` module](crate::str).*\n@@ -816,19 +858,22 @@ mod prim_slice {}\n ///\n /// String slices are always valid UTF-8.\n ///\n-/// # Examples\n+/// # Basic Usage\n ///\n /// String literals are string slices:\n ///\n /// ```\n-/// let hello = \"Hello, world!\";\n-///\n-/// // with an explicit type annotation\n-/// let hello: &'static str = \"Hello, world!\";\n+/// let hello_world = \"Hello, World!\";\n /// ```\n ///\n-/// They are `'static` because they're stored directly in the final binary, and\n-/// so will be valid for the `'static` duration.\n+/// Here we have declared a string slice initialized with a string literal.\n+/// String literals have a static lifetime, which means the string `hello_world`\n+/// is guaranteed to be valid for the duration of the entire program.\n+/// We can explicitly specify `hello_world`'s lifetime as well:\n+///\n+/// ```\n+/// let hello_world: &'static str = \"Hello, world!\";\n+/// ```\n ///\n /// # Representation\n ///"}]}