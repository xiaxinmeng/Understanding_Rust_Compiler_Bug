{"sha": "37df2753fc52ff80625430aa7e8cdcdc6f16e362", "node_id": "C_kwDOAAsO6NoAKDM3ZGYyNzUzZmM1MmZmODA2MjU0MzBhYTdlOGNkY2RjNmYxNmUzNjI", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2021-10-01T16:18:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-01T16:18:16Z"}, "message": "Rollup merge of #87868 - Kixiron:packing-on-the-pounds, r=eddyb\n\nAdded -Z randomize-layout flag\n\nAn implementation of #77316, it currently randomly shuffles the fields of `repr(rust)` types based on their `DefPathHash`\nr? ``@eddyb``", "tree": {"sha": "f7b3b60b2bff258c8808905e97bc54ba134213b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7b3b60b2bff258c8808905e97bc54ba134213b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37df2753fc52ff80625430aa7e8cdcdc6f16e362", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhVzTICRBK7hj4Ov3rIwAAIrwIAD26X8yZHVF8CR7/kZdKDVul\nSVeQLHbPEMcvosoVombJQaRuCl7JDbTNQ6V2mmB4x2ll1D+m+U/raFB/6BmPjzE2\nMsX9VCIpaw6BaUU1CrxjYnRUGMBRuoag1XFTs3Qa6MUiZvlU5iHtApy6tm4EpaiW\nNjuMJ2smm4VkyK/T9VWWgFtMjlIZ/zibeZE0f0sTdkhOPyn/h/IxSUiPKz7zO5wa\n+5Qs4yMiTqxhtNEtbo/C4ycPBCh5QcOwiZKVJK6VdMYBzwCPKpxaKmWuOknxdsZI\nq+WyJV04n6NQG0RaBTQVqt+AF6yHuGVIDxhadjy+Jh6ahqo+M9dWPwZcg5HVUQI=\n=2Grq\n-----END PGP SIGNATURE-----\n", "payload": "tree f7b3b60b2bff258c8808905e97bc54ba134213b1\nparent ed937594d3912ced11f6f35a90bb8bf591909d2a\nparent 09f1542418fb6312e2252b4dead8a16ad0817e30\nauthor Manish Goregaokar <manishsmail@gmail.com> 1633105096 -0700\ncommitter GitHub <noreply@github.com> 1633105096 -0700\n\nRollup merge of #87868 - Kixiron:packing-on-the-pounds, r=eddyb\n\nAdded -Z randomize-layout flag\n\nAn implementation of #77316, it currently randomly shuffles the fields of `repr(rust)` types based on their `DefPathHash`\nr? ``@eddyb``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37df2753fc52ff80625430aa7e8cdcdc6f16e362", "html_url": "https://github.com/rust-lang/rust/commit/37df2753fc52ff80625430aa7e8cdcdc6f16e362", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37df2753fc52ff80625430aa7e8cdcdc6f16e362/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed937594d3912ced11f6f35a90bb8bf591909d2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed937594d3912ced11f6f35a90bb8bf591909d2a", "html_url": "https://github.com/rust-lang/rust/commit/ed937594d3912ced11f6f35a90bb8bf591909d2a"}, {"sha": "09f1542418fb6312e2252b4dead8a16ad0817e30", "url": "https://api.github.com/repos/rust-lang/rust/commits/09f1542418fb6312e2252b4dead8a16ad0817e30", "html_url": "https://github.com/rust-lang/rust/commit/09f1542418fb6312e2252b4dead8a16ad0817e30"}], "stats": {"total": 112, "additions": 93, "deletions": 19}, "files": [{"sha": "a4e1ab6c1e4a871c8ae2271d57891241275d3959", "filename": "Cargo.lock", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/37df2753fc52ff80625430aa7e8cdcdc6f16e362/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/37df2753fc52ff80625430aa7e8cdcdc6f16e362/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=37df2753fc52ff80625430aa7e8cdcdc6f16e362", "patch": "@@ -1660,7 +1660,7 @@ checksum = \"3ca8957e71f04a205cb162508f9326aea04676c8dfd0711220190d6b83664f3f\"\n dependencies = [\n  \"bitmaps\",\n  \"rand_core 0.5.1\",\n- \"rand_xoshiro\",\n+ \"rand_xoshiro 0.4.0\",\n  \"sized-chunks\",\n  \"typenum\",\n  \"version_check\",\n@@ -2256,7 +2256,7 @@ dependencies = [\n  \"libc\",\n  \"log\",\n  \"measureme\",\n- \"rand 0.8.3\",\n+ \"rand 0.8.4\",\n  \"rustc-workspace-hack\",\n  \"rustc_version\",\n  \"shell-escape\",\n@@ -2852,9 +2852,9 @@ dependencies = [\n \n [[package]]\n name = \"rand\"\n-version = \"0.8.3\"\n+version = \"0.8.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"0ef9e7e66b4468674bfcb0c81af8b7fa0bb154fa9f28eb840da5c447baeb8d7e\"\n+checksum = \"2e7573632e6454cf6b99d7aac4ccca54be06da05aca2ef7423d22d27d4d4bcd8\"\n dependencies = [\n  \"libc\",\n  \"rand_chacha 0.3.0\",\n@@ -2945,6 +2945,15 @@ dependencies = [\n  \"rand_core 0.5.1\",\n ]\n \n+[[package]]\n+name = \"rand_xoshiro\"\n+version = \"0.6.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"6f97cdb2a36ed4183de61b2f824cc45c9f1037f28afe0a322e9fff4c108b5aaa\"\n+dependencies = [\n+ \"rand_core 0.6.2\",\n+]\n+\n [[package]]\n name = \"rayon\"\n version = \"1.3.1\"\n@@ -4087,6 +4096,8 @@ dependencies = [\n  \"either\",\n  \"gsgdt\",\n  \"polonius-engine\",\n+ \"rand 0.8.4\",\n+ \"rand_xoshiro 0.6.0\",\n  \"rustc-rayon-core\",\n  \"rustc_apfloat\",\n  \"rustc_arena\",\n@@ -5097,7 +5108,7 @@ checksum = \"dac1c663cfc93810f88aed9b8941d48cabf856a1b111c29a40439018d870eb22\"\n dependencies = [\n  \"cfg-if 1.0.0\",\n  \"libc\",\n- \"rand 0.8.3\",\n+ \"rand 0.8.4\",\n  \"redox_syscall\",\n  \"remove_dir_all\",\n  \"winapi\","}, {"sha": "d06c593d39481e12e11a5adbb82778dc0bbfd669", "filename": "compiler/rustc_middle/Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37df2753fc52ff80625430aa7e8cdcdc6f16e362/compiler%2Frustc_middle%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/37df2753fc52ff80625430aa7e8cdcdc6f16e362/compiler%2Frustc_middle%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2FCargo.toml?ref=37df2753fc52ff80625430aa7e8cdcdc6f16e362", "patch": "@@ -32,3 +32,5 @@ chalk-ir = \"0.55.0\"\n smallvec = { version = \"1.6.1\", features = [\"union\", \"may_dangle\"] }\n rustc_session = { path = \"../rustc_session\" }\n rustc_type_ir = { path = \"../rustc_type_ir\" }\n+rand = \"0.8.4\"\n+rand_xoshiro = \"0.6.0\""}, {"sha": "b6aeb9122c3d302dc74098d3ea362191977125e3", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 35, "deletions": 13, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/37df2753fc52ff80625430aa7e8cdcdc6f16e362/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37df2753fc52ff80625430aa7e8cdcdc6f16e362/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=37df2753fc52ff80625430aa7e8cdcdc6f16e362", "patch": "@@ -24,6 +24,9 @@ use std::iter;\n use std::num::NonZeroUsize;\n use std::ops::Bound;\n \n+use rand::{seq::SliceRandom, SeedableRng};\n+use rand_xoshiro::Xoshiro128StarStar;\n+\n pub fn provide(providers: &mut ty::query::Providers) {\n     *providers =\n         ty::query::Providers { layout_of, fn_abi_of_fn_ptr, fn_abi_of_instance, ..*providers };\n@@ -324,6 +327,10 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n \n         let mut inverse_memory_index: Vec<u32> = (0..fields.len() as u32).collect();\n \n+        // `ReprOptions.layout_seed` is a deterministic seed that we can use to\n+        // randomize field ordering with\n+        let mut rng = Xoshiro128StarStar::seed_from_u64(repr.field_shuffle_seed);\n+\n         let optimize = !repr.inhibit_struct_field_reordering_opt();\n         if optimize {\n             let end =\n@@ -332,20 +339,35 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n             let field_align = |f: &TyAndLayout<'_>| {\n                 if let Some(pack) = pack { f.align.abi.min(pack) } else { f.align.abi }\n             };\n-            match kind {\n-                StructKind::AlwaysSized | StructKind::MaybeUnsized => {\n-                    optimizing.sort_by_key(|&x| {\n-                        // Place ZSTs first to avoid \"interesting offsets\",\n-                        // especially with only one or two non-ZST fields.\n-                        let f = &fields[x as usize];\n-                        (!f.is_zst(), cmp::Reverse(field_align(f)))\n-                    });\n-                }\n-                StructKind::Prefixed(..) => {\n-                    // Sort in ascending alignment so that the layout stay optimal\n-                    // regardless of the prefix\n-                    optimizing.sort_by_key(|&x| field_align(&fields[x as usize]));\n+\n+            // If `-Z randomize-layout` was enabled for the type definition we can shuffle\n+            // the field ordering to try and catch some code making assumptions about layouts\n+            // we don't guarantee\n+            if repr.can_randomize_type_layout() {\n+                // Shuffle the ordering of the fields\n+                optimizing.shuffle(&mut rng);\n+\n+            // Otherwise we just leave things alone and actually optimize the type's fields\n+            } else {\n+                match kind {\n+                    StructKind::AlwaysSized | StructKind::MaybeUnsized => {\n+                        optimizing.sort_by_key(|&x| {\n+                            // Place ZSTs first to avoid \"interesting offsets\",\n+                            // especially with only one or two non-ZST fields.\n+                            let f = &fields[x as usize];\n+                            (!f.is_zst(), cmp::Reverse(field_align(f)))\n+                        });\n+                    }\n+\n+                    StructKind::Prefixed(..) => {\n+                        // Sort in ascending alignment so that the layout stays optimal\n+                        // regardless of the prefix\n+                        optimizing.sort_by_key(|&x| field_align(&fields[x as usize]));\n+                    }\n                 }\n+\n+                // FIXME(Kixiron): We can always shuffle fields within a given alignment class\n+                //                 regardless of the status of `-Z randomize-layout`\n             }\n         }\n "}, {"sha": "d04d1565fead7cdb5464bedda4ff97796c8ca955", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/37df2753fc52ff80625430aa7e8cdcdc6f16e362/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37df2753fc52ff80625430aa7e8cdcdc6f16e362/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=37df2753fc52ff80625430aa7e8cdcdc6f16e362", "patch": "@@ -1491,6 +1491,9 @@ bitflags! {\n         const IS_LINEAR          = 1 << 3;\n         // If true, don't expose any niche to type's context.\n         const HIDE_NICHE         = 1 << 4;\n+        // If true, the type's layout can be randomized using\n+        // the seed stored in `ReprOptions.layout_seed`\n+        const RANDOMIZE_LAYOUT   = 1 << 5;\n         // Any of these flags being set prevent field reordering optimisation.\n         const IS_UNOPTIMISABLE   = ReprFlags::IS_C.bits |\n                                    ReprFlags::IS_SIMD.bits |\n@@ -1505,6 +1508,14 @@ pub struct ReprOptions {\n     pub align: Option<Align>,\n     pub pack: Option<Align>,\n     pub flags: ReprFlags,\n+    /// The seed to be used for randomizing a type's layout\n+    ///\n+    /// Note: This could technically be a `[u8; 16]` (a `u128`) which would\n+    /// be the \"most accurate\" hash as it'd encompass the item and crate\n+    /// hash without loss, but it does pay the price of being larger.\n+    /// Everything's a tradeoff, a `u64` seed should be sufficient for our\n+    /// purposes (primarily `-Z randomize-layout`)\n+    pub field_shuffle_seed: u64,\n }\n \n impl ReprOptions {\n@@ -1513,6 +1524,11 @@ impl ReprOptions {\n         let mut size = None;\n         let mut max_align: Option<Align> = None;\n         let mut min_pack: Option<Align> = None;\n+\n+        // Generate a deterministically-derived seed from the item's path hash\n+        // to allow for cross-crate compilation to actually work\n+        let field_shuffle_seed = tcx.def_path_hash(did).0.to_smaller_hash();\n+\n         for attr in tcx.get_attrs(did).iter() {\n             for r in attr::find_repr_attrs(&tcx.sess, attr) {\n                 flags.insert(match r {\n@@ -1541,33 +1557,45 @@ impl ReprOptions {\n             }\n         }\n \n+        // If `-Z randomize-layout` was enabled for the type definition then we can\n+        // consider performing layout randomization\n+        if tcx.sess.opts.debugging_opts.randomize_layout {\n+            flags.insert(ReprFlags::RANDOMIZE_LAYOUT);\n+        }\n+\n         // This is here instead of layout because the choice must make it into metadata.\n         if !tcx.consider_optimizing(|| format!(\"Reorder fields of {:?}\", tcx.def_path_str(did))) {\n             flags.insert(ReprFlags::IS_LINEAR);\n         }\n-        ReprOptions { int: size, align: max_align, pack: min_pack, flags }\n+\n+        Self { int: size, align: max_align, pack: min_pack, flags, field_shuffle_seed }\n     }\n \n     #[inline]\n     pub fn simd(&self) -> bool {\n         self.flags.contains(ReprFlags::IS_SIMD)\n     }\n+\n     #[inline]\n     pub fn c(&self) -> bool {\n         self.flags.contains(ReprFlags::IS_C)\n     }\n+\n     #[inline]\n     pub fn packed(&self) -> bool {\n         self.pack.is_some()\n     }\n+\n     #[inline]\n     pub fn transparent(&self) -> bool {\n         self.flags.contains(ReprFlags::IS_TRANSPARENT)\n     }\n+\n     #[inline]\n     pub fn linear(&self) -> bool {\n         self.flags.contains(ReprFlags::IS_LINEAR)\n     }\n+\n     #[inline]\n     pub fn hide_niche(&self) -> bool {\n         self.flags.contains(ReprFlags::HIDE_NICHE)\n@@ -1594,9 +1622,17 @@ impl ReprOptions {\n                 return true;\n             }\n         }\n+\n         self.flags.intersects(ReprFlags::IS_UNOPTIMISABLE) || self.int.is_some()\n     }\n \n+    /// Returns `true` if this type is valid for reordering and `-Z randomize-layout`\n+    /// was enabled for its declaration crate\n+    pub fn can_randomize_type_layout(&self) -> bool {\n+        !self.inhibit_struct_field_reordering_opt()\n+            && self.flags.contains(ReprFlags::RANDOMIZE_LAYOUT)\n+    }\n+\n     /// Returns `true` if this `#[repr()]` should inhibit union ABI optimisations.\n     pub fn inhibit_union_abi_opt(&self) -> bool {\n         self.c()"}, {"sha": "8ecb7a031ad8167864a0ffc6dc59a60b6111919d", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37df2753fc52ff80625430aa7e8cdcdc6f16e362/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37df2753fc52ff80625430aa7e8cdcdc6f16e362/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=37df2753fc52ff80625430aa7e8cdcdc6f16e362", "patch": "@@ -1246,6 +1246,8 @@ options! {\n         \"enable queries of the dependency graph for regression testing (default: no)\"),\n     query_stats: bool = (false, parse_bool, [UNTRACKED],\n         \"print some statistics about the query system (default: no)\"),\n+    randomize_layout: bool = (false, parse_bool, [TRACKED],\n+        \"randomize the layout of types (default: no)\"),\n     relax_elf_relocations: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"whether ELF relocations can be relaxed\"),\n     relro_level: Option<RelroLevel> = (None, parse_relro_level, [TRACKED],"}, {"sha": "c1719a9ffe80c7530698b4ef7b70b78b07d3e8f1", "filename": "src/tools/tidy/src/deps.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/37df2753fc52ff80625430aa7e8cdcdc6f16e362/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37df2753fc52ff80625430aa7e8cdcdc6f16e362/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs?ref=37df2753fc52ff80625430aa7e8cdcdc6f16e362", "patch": "@@ -167,6 +167,7 @@ const PERMITTED_DEPENDENCIES: &[&str] = &[\n     \"rand_hc\",\n     \"rand_pcg\",\n     \"rand_xorshift\",\n+    \"rand_xoshiro\",\n     \"redox_syscall\",\n     \"regex\",\n     \"regex-automata\","}]}