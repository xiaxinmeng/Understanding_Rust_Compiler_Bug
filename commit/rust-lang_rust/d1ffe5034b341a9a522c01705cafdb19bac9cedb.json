{"sha": "d1ffe5034b341a9a522c01705cafdb19bac9cedb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxZmZlNTAzNGIzNDFhOWE1MjJjMDE3MDVjYWZkYjE5YmFjOWNlZGI=", "commit": {"author": {"name": "Lenny222", "email": "github@kudling.de", "date": "2012-01-03T18:08:13Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-01-04T08:33:07Z"}, "message": "\"str\": rename \"str_from_cstr\" to \"from_cstr\" (analogous to the other \"from_*\")", "tree": {"sha": "3f9a1b4110b5010e7c6e8d82d38e642831be989f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f9a1b4110b5010e7c6e8d82d38e642831be989f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1ffe5034b341a9a522c01705cafdb19bac9cedb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1ffe5034b341a9a522c01705cafdb19bac9cedb", "html_url": "https://github.com/rust-lang/rust/commit/d1ffe5034b341a9a522c01705cafdb19bac9cedb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1ffe5034b341a9a522c01705cafdb19bac9cedb/comments", "author": null, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd284eb396d802646106bdb15f474ebc10a9dfbb", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd284eb396d802646106bdb15f474ebc10a9dfbb", "html_url": "https://github.com/rust-lang/rust/commit/dd284eb396d802646106bdb15f474ebc10a9dfbb"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "8950618c2e6e6b90c177e9f8df76896b7a870e0d", "filename": "src/comp/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1ffe5034b341a9a522c01705cafdb19bac9cedb/src%2Fcomp%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1ffe5034b341a9a522c01705cafdb19bac9cedb/src%2Fcomp%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Flink.rs?ref=d1ffe5034b341a9a522c01705cafdb19bac9cedb", "patch": "@@ -34,7 +34,7 @@ fn llvm_err(sess: session::session, msg: str) unsafe {\n     let buf = llvm::LLVMRustGetLastError();\n     if buf == ptr::null() {\n         sess.fatal(msg);\n-    } else { sess.fatal(msg + \": \" + str::str_from_cstr(buf)); }\n+    } else { sess.fatal(msg + \": \" + str::from_cstr(buf)); }\n }\n \n fn load_intrinsics_bc(sess: session::session) -> option::t<ModuleRef> {"}, {"sha": "21ead604d31d72b6053badc3aef301a6b60169e3", "filename": "src/comp/metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1ffe5034b341a9a522c01705cafdb19bac9cedb/src%2Fcomp%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1ffe5034b341a9a522c01705cafdb19bac9cedb/src%2Fcomp%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fcreader.rs?ref=d1ffe5034b341a9a522c01705cafdb19bac9cedb", "patch": "@@ -216,7 +216,7 @@ fn get_metadata_section(sess: session::session,\n     let si = mk_section_iter(of.llof);\n     while llvm::LLVMIsSectionIteratorAtEnd(of.llof, si.llsi) == False {\n         let name_buf = llvm::LLVMGetSectionName(si.llsi);\n-        let name = unsafe { str::str_from_cstr(name_buf) };\n+        let name = unsafe { str::from_cstr(name_buf) };\n         if str::eq(name, sess.get_targ_cfg().target_strs.meta_sect_name) {\n             let cbuf = llvm::LLVMGetSectionContents(si.llsi);\n             let csz = llvm::LLVMGetSectionSize(si.llsi);"}, {"sha": "cba9b11cb3d3888308f68cc6ee434502d2f9dc39", "filename": "src/libcore/str.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d1ffe5034b341a9a522c01705cafdb19bac9cedb/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1ffe5034b341a9a522c01705cafdb19bac9cedb/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=d1ffe5034b341a9a522c01705cafdb19bac9cedb", "patch": "@@ -12,7 +12,7 @@ export eq, lteq, hash, is_empty, is_not_empty, is_whitespace, byte_len,\n        push_char, is_utf8, from_chars, to_chars, char_len, char_len_range,\n        char_at, bytes, is_ascii, shift_byte, pop_byte,\n        unsafe_from_byte, unsafe_from_bytes, from_char, char_range_at,\n-       str_from_cstr, sbuf, as_buf, push_byte, utf8_char_width, safe_slice,\n+       from_cstr, sbuf, as_buf, push_byte, utf8_char_width, safe_slice,\n        contains, iter_chars, loop_chars, loop_chars_sub,\n        escape;\n \n@@ -973,11 +973,11 @@ fn as_buf<T>(s: str, f: block(sbuf) -> T) -> T unsafe {\n }\n \n /*\n-Function: str_from_cstr\n+Function: from_cstr\n \n Create a Rust string from a null-terminated C string\n */\n-unsafe fn str_from_cstr(cstr: sbuf) -> str {\n+unsafe fn from_cstr(cstr: sbuf) -> str {\n     let res = \"\";\n     let start = cstr;\n     let curr = start;"}, {"sha": "c1312ad460803710911aa7d0d9452f27e9cb5225", "filename": "src/libstd/generic_os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1ffe5034b341a9a522c01705cafdb19bac9cedb/src%2Flibstd%2Fgeneric_os.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1ffe5034b341a9a522c01705cafdb19bac9cedb/src%2Flibstd%2Fgeneric_os.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fgeneric_os.rs?ref=d1ffe5034b341a9a522c01705cafdb19bac9cedb", "patch": "@@ -35,7 +35,7 @@ fn getenv(n: str) -> option::t<str> unsafe {\n             option::none::<str>\n         } else {\n             let s = unsafe::reinterpret_cast(s);\n-            option::some::<str>(str::str_from_cstr(s))\n+            option::some::<str>(str::from_cstr(s))\n         };\n }\n "}, {"sha": "39217fb8a8b5345733a572ae21444fcf28f51951", "filename": "src/test/stdtest/str.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d1ffe5034b341a9a522c01705cafdb19bac9cedb/src%2Ftest%2Fstdtest%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1ffe5034b341a9a522c01705cafdb19bac9cedb/src%2Ftest%2Fstdtest%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fstr.rs?ref=d1ffe5034b341a9a522c01705cafdb19bac9cedb", "patch": "@@ -287,10 +287,10 @@ fn unsafe_from_bytes() {\n }\n \n #[test]\n-fn str_from_cstr() unsafe {\n+fn from_cstr() unsafe {\n     let a = [65u8, 65u8, 65u8, 65u8, 65u8, 65u8, 65u8, 0u8];\n     let b = vec::to_ptr(a);\n-    let c = str::str_from_cstr(b);\n+    let c = str::from_cstr(b);\n     assert (c == \"AAAAAAA\");\n }\n \n@@ -312,7 +312,7 @@ fn as_buf_small() unsafe {\n fn as_buf2() unsafe {\n     let s = \"hello\";\n     let sb = str::as_buf(s, {|b| b });\n-    let s_cstr = str::str_from_cstr(sb);\n+    let s_cstr = str::from_cstr(sb);\n     assert (str::eq(s_cstr, s));\n }\n "}]}