{"sha": "706a1cc0f21bb3212e1e1f9987f5be543ae12f6e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwNmExY2MwZjIxYmIzMjEyZTFlMWY5OTg3ZjViZTU0M2FlMTJmNmU=", "commit": {"author": {"name": "Alex Burka", "email": "web@alexburka.com", "date": "2018-11-03T05:03:30Z"}, "committer": {"name": "Alex Burka", "email": "web@alexburka.com", "date": "2018-11-03T05:03:30Z"}, "message": "fix test fallout", "tree": {"sha": "425fc0255b45f3c43c32eeaf1c4d9a20de53b01c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/425fc0255b45f3c43c32eeaf1c4d9a20de53b01c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/706a1cc0f21bb3212e1e1f9987f5be543ae12f6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/706a1cc0f21bb3212e1e1f9987f5be543ae12f6e", "html_url": "https://github.com/rust-lang/rust/commit/706a1cc0f21bb3212e1e1f9987f5be543ae12f6e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/706a1cc0f21bb3212e1e1f9987f5be543ae12f6e/comments", "author": null, "committer": null, "parents": [{"sha": "d5e3e8a89f7279a2240b691752d0f850feab8929", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5e3e8a89f7279a2240b691752d0f850feab8929", "html_url": "https://github.com/rust-lang/rust/commit/d5e3e8a89f7279a2240b691752d0f850feab8929"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "e6dd421f48f51dce9e782843955475e66fc6b734", "filename": "src/test/run-pass/impl-trait/example-calendar.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/706a1cc0f21bb3212e1e1f9987f5be543ae12f6e/src%2Ftest%2Frun-pass%2Fimpl-trait%2Fexample-calendar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/706a1cc0f21bb3212e1e1f9987f5be543ae12f6e/src%2Ftest%2Frun-pass%2Fimpl-trait%2Fexample-calendar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimpl-trait%2Fexample-calendar.rs?ref=706a1cc0f21bb3212e1e1f9987f5be543ae12f6e", "patch": "@@ -310,10 +310,10 @@ trait IteratorExt: Iterator + Sized {\n     where Self::Item: std::fmt::Display {\n         let mut s = String::new();\n         if let Some(e) = self.next() {\n-            write!(s, \"{}\", e);\n+            write!(s, \"{}\", e).unwrap();\n             for e in self {\n                 s.push_str(sep);\n-                write!(s, \"{}\", e);\n+                write!(s, \"{}\", e).unwrap();\n             }\n         }\n         s\n@@ -537,7 +537,7 @@ fn format_weeks(it: impl Iterator<Item = impl DateIterator>) -> impl Iterator<It\n                 first = false;\n             }\n \n-            write!(buf, \" {:>2}\", d.day());\n+            write!(buf, \" {:>2}\", d.day()).unwrap();\n         }\n \n         // Insert more filler at the end to fill up the remainder of the week,"}, {"sha": "ee597f11c6a9de1f355f95326af84b1e3f3a9d1e", "filename": "src/test/run-pass/macros/colorful-write-macros.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/706a1cc0f21bb3212e1e1f9987f5be543ae12f6e/src%2Ftest%2Frun-pass%2Fmacros%2Fcolorful-write-macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/706a1cc0f21bb3212e1e1f9987f5be543ae12f6e/src%2Ftest%2Frun-pass%2Fmacros%2Fcolorful-write-macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacros%2Fcolorful-write-macros.rs?ref=706a1cc0f21bb3212e1e1f9987f5be543ae12f6e", "patch": "@@ -27,18 +27,18 @@ impl fmt::Write for Bar {\n }\n \n fn borrowing_writer_from_struct_and_formatting_struct_field(foo: Foo) {\n-    write!(foo.writer, \"{}\", foo.other);\n+    write!(foo.writer, \"{}\", foo.other).unwrap();\n }\n \n fn main() {\n     let mut w = Vec::new();\n-    write!(&mut w as &mut Write, \"\");\n-    write!(&mut w, \"\"); // should coerce\n+    write!(&mut w as &mut Write, \"\").unwrap();\n+    write!(&mut w, \"\").unwrap(); // should coerce\n     println!(\"ok\");\n \n     let mut s = Bar;\n     {\n         use std::fmt::Write;\n-        write!(&mut s, \"test\");\n+        write!(&mut s, \"test\").unwrap();\n     }\n }"}]}