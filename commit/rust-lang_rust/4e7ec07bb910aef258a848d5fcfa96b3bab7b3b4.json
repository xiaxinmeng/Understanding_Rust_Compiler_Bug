{"sha": "4e7ec07bb910aef258a848d5fcfa96b3bab7b3b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlN2VjMDdiYjkxMGFlZjI1OGE4NDhkNWZjZmE5NmIzYmFiN2IzYjQ=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-03-27T02:04:25Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-03-28T02:44:08Z"}, "message": "Account for short-hand field syntax when suggesting borrow", "tree": {"sha": "4aff2e0428cfa2423e8b5e20d1f74cd57c4f0be5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4aff2e0428cfa2423e8b5e20d1f74cd57c4f0be5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e7ec07bb910aef258a848d5fcfa96b3bab7b3b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e7ec07bb910aef258a848d5fcfa96b3bab7b3b4", "html_url": "https://github.com/rust-lang/rust/commit/4e7ec07bb910aef258a848d5fcfa96b3bab7b3b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e7ec07bb910aef258a848d5fcfa96b3bab7b3b4/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33ef0bad21d6bb646c7c3ab0dbf381ca96c324bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/33ef0bad21d6bb646c7c3ab0dbf381ca96c324bf", "html_url": "https://github.com/rust-lang/rust/commit/33ef0bad21d6bb646c7c3ab0dbf381ca96c324bf"}], "stats": {"total": 94, "additions": 82, "deletions": 12}, "files": [{"sha": "5939f965269be4df4f5d2668d2907c8a20f184f4", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 40, "deletions": 8, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/4e7ec07bb910aef258a848d5fcfa96b3bab7b3b4/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e7ec07bb910aef258a848d5fcfa96b3bab7b3b4/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=4e7ec07bb910aef258a848d5fcfa96b3bab7b3b4", "patch": "@@ -277,6 +277,24 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             return None;\n         }\n \n+        let parent_id = self.tcx.hir().get_parent_node_by_hir_id(expr.hir_id);\n+        let mut is_struct_pat_shorthand_field = false;\n+        if let Some(parent) = self.tcx.hir().find_by_hir_id(parent_id) {\n+            // Account for fields\n+            if let Node::Expr(hir::Expr {\n+                node: hir::ExprKind::Struct(_, fields, ..), ..\n+            }) = parent {\n+                if let Ok(src) = cm.span_to_snippet(sp) {\n+                    for field in fields {\n+                        if field.ident.as_str() == src.as_str() && field.is_shorthand {\n+                            is_struct_pat_shorthand_field = true;\n+                            break;\n+                        }\n+                    }\n+                }\n+            }\n+        };\n+\n         match (&expected.sty, &checked_ty.sty) {\n             (&ty::Ref(_, exp, _), &ty::Ref(_, check, _)) => match (&exp.sty, &check.sty) {\n                 (&ty::Str, &ty::Array(arr, _)) |\n@@ -341,14 +359,22 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         if let Some(sugg) = self.can_use_as_ref(expr) {\n                             return Some(sugg);\n                         }\n-                        return Some(match mutability {\n-                            hir::Mutability::MutMutable => {\n-                                (sp, \"consider mutably borrowing here\", format!(\"&mut {}\",\n-                                                                                sugg_expr))\n+                        return Some(match (mutability, is_struct_pat_shorthand_field) {\n+                            (hir::Mutability::MutMutable, false) => {\n+                                (sp, \"consider mutably borrowing here\",\n+                                 format!(\"&mut {}\", sugg_expr))\n                             }\n-                            hir::Mutability::MutImmutable => {\n+                            (hir::Mutability::MutImmutable, false) => {\n                                 (sp, \"consider borrowing here\", format!(\"&{}\", sugg_expr))\n                             }\n+                            (hir::Mutability::MutMutable, true) => {\n+                                (sp, \"consider mutably borrowing here\",\n+                                 format!(\"{}: &mut {}\", sugg_expr, sugg_expr))\n+                            }\n+                            (hir::Mutability::MutImmutable, true) => {\n+                                (sp, \"consider borrowing here\",\n+                                 format!(\"{}: &{}\", sugg_expr, sugg_expr))\n+                            }\n                         });\n                     }\n                 }\n@@ -389,12 +415,18 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                                                       checked,\n                                                                       sp) {\n                                 // do not suggest if the span comes from a macro (#52783)\n-                                if let (Ok(code),\n-                                        true) = (cm.span_to_snippet(sp), sp == expr.span) {\n+                                if let (Ok(code), true) = (\n+                                    cm.span_to_snippet(sp),\n+                                    sp == expr.span,\n+                                ) {\n                                     return Some((\n                                         sp,\n                                         \"consider dereferencing the borrow\",\n-                                        format!(\"*{}\", code),\n+                                        if is_struct_pat_shorthand_field {\n+                                            format!(\"{}: *{}\", code, code)\n+                                        } else {\n+                                            format!(\"*{}\", code)\n+                                        },\n                                     ));\n                                 }\n                             }"}, {"sha": "f156766f528815a58f9caef68545f39200b1b82d", "filename": "src/test/ui/deref-suggestion.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4e7ec07bb910aef258a848d5fcfa96b3bab7b3b4/src%2Ftest%2Fui%2Fderef-suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e7ec07bb910aef258a848d5fcfa96b3bab7b3b4/src%2Ftest%2Fui%2Fderef-suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderef-suggestion.rs?ref=4e7ec07bb910aef258a848d5fcfa96b3bab7b3b4", "patch": "@@ -15,6 +15,14 @@ fn foo4(u: &u32) {\n     //~^ ERROR mismatched types\n }\n \n+struct S<'a> {\n+    u: &'a u32,\n+}\n+\n+struct R {\n+    i: u32,\n+}\n+\n fn main() {\n     let s = String::new();\n     let r_s = &s;\n@@ -27,4 +35,10 @@ fn main() {\n     foo4(&0);\n     assert_eq!(3i32, &3i32);\n     //~^ ERROR mismatched types\n+    let u = 3;\n+    let s = S { u };\n+    //~^ ERROR mismatched types\n+    let i = &4;\n+    let r = R { i };\n+    //~^ ERROR mismatched types\n }"}, {"sha": "bd0ebfac5319d694d88c3746fae31dea21d8a6ac", "filename": "src/test/ui/deref-suggestion.stderr", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/4e7ec07bb910aef258a848d5fcfa96b3bab7b3b4/src%2Ftest%2Fui%2Fderef-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e7ec07bb910aef258a848d5fcfa96b3bab7b3b4/src%2Ftest%2Fui%2Fderef-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderef-suggestion.stderr?ref=4e7ec07bb910aef258a848d5fcfa96b3bab7b3b4", "patch": "@@ -23,7 +23,7 @@ LL |     foo3(u);\n               found type `&u32`\n \n error[E0308]: mismatched types\n-  --> $DIR/deref-suggestion.rs:22:9\n+  --> $DIR/deref-suggestion.rs:30:9\n    |\n LL |     foo(&\"aaa\".to_owned());\n    |         ^^^^^^^^^^^^^^^^^\n@@ -35,7 +35,7 @@ LL |     foo(&\"aaa\".to_owned());\n               found type `&std::string::String`\n \n error[E0308]: mismatched types\n-  --> $DIR/deref-suggestion.rs:24:9\n+  --> $DIR/deref-suggestion.rs:32:9\n    |\n LL |     foo(&mut \"aaa\".to_owned());\n    |         ^^^^^^^^^^^^^^^^^^^^^\n@@ -59,7 +59,7 @@ LL |     foo3(borrow!(0));\n               found type `&{integer}`\n \n error[E0308]: mismatched types\n-  --> $DIR/deref-suggestion.rs:28:5\n+  --> $DIR/deref-suggestion.rs:36:5\n    |\n LL |     assert_eq!(3i32, &3i32);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ expected i32, found &i32\n@@ -68,6 +68,30 @@ LL |     assert_eq!(3i32, &3i32);\n               found type `&i32`\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n-error: aborting due to 6 previous errors\n+error[E0308]: mismatched types\n+  --> $DIR/deref-suggestion.rs:39:17\n+   |\n+LL |     let s = S { u };\n+   |                 ^\n+   |                 |\n+   |                 expected &u32, found integer\n+   |                 help: consider borrowing here: `u: &u`\n+   |\n+   = note: expected type `&u32`\n+              found type `{integer}`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/deref-suggestion.rs:42:17\n+   |\n+LL |     let r = R { i };\n+   |                 ^\n+   |                 |\n+   |                 expected u32, found &{integer}\n+   |                 help: consider dereferencing the borrow: `i: *i`\n+   |\n+   = note: expected type `u32`\n+              found type `&{integer}`\n+\n+error: aborting due to 8 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}]}