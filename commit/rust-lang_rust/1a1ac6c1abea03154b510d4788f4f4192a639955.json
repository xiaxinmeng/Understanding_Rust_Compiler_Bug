{"sha": "1a1ac6c1abea03154b510d4788f4f4192a639955", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhMWFjNmMxYWJlYTAzMTU0YjUxMGQ0Nzg4ZjRmNDE5MmE2Mzk5NTU=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-02-17T10:21:18Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-02-17T12:03:19Z"}, "message": "Rollup merge of #22404 - semarie:signal_reported_right, r=aturon\n\n The test \\\"signal_reported_right\\\" send a signal `1` to `/bin/sh`, and check\nthe status code to check if the signal is reported right.\n\nUnder OpenBSD, the signal `1` (`SIGHUP`) is catched by `/bin/sh`,\nresulting the test failed.\n\nUse the uncatchable signal `9` (`SIGKILL`) for test.", "tree": {"sha": "c2b286d90b81d2e0441f2ef90d973b7bb4ba94ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c2b286d90b81d2e0441f2ef90d973b7bb4ba94ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a1ac6c1abea03154b510d4788f4f4192a639955", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a1ac6c1abea03154b510d4788f4f4192a639955", "html_url": "https://github.com/rust-lang/rust/commit/1a1ac6c1abea03154b510d4788f4f4192a639955", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a1ac6c1abea03154b510d4788f4f4192a639955/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e0adf2401b6fab9bcd79070a096957783fbcc9d", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e0adf2401b6fab9bcd79070a096957783fbcc9d", "html_url": "https://github.com/rust-lang/rust/commit/5e0adf2401b6fab9bcd79070a096957783fbcc9d"}, {"sha": "5a6ea7a0716e9b6e10655b62d893a973b7c43ad8", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a6ea7a0716e9b6e10655b62d893a973b7c43ad8", "html_url": "https://github.com/rust-lang/rust/commit/5a6ea7a0716e9b6e10655b62d893a973b7c43ad8"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "09a0deec9c93527a7194a09a8a6b146893dfc9d0", "filename": "src/libstd/old_io/process.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1a1ac6c1abea03154b510d4788f4f4192a639955/src%2Flibstd%2Fold_io%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a1ac6c1abea03154b510d4788f4f4192a639955/src%2Flibstd%2Fold_io%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fprocess.rs?ref=1a1ac6c1abea03154b510d4788f4f4192a639955", "patch": "@@ -800,12 +800,12 @@ mod tests {\n     #[cfg(all(unix, not(target_os=\"android\")))]\n     #[test]\n     fn signal_reported_right() {\n-        let p = Command::new(\"/bin/sh\").arg(\"-c\").arg(\"kill -1 $$\").spawn();\n+        let p = Command::new(\"/bin/sh\").arg(\"-c\").arg(\"kill -9 $$\").spawn();\n         assert!(p.is_ok());\n         let mut p = p.unwrap();\n         match p.wait().unwrap() {\n-            process::ExitSignal(1) => {},\n-            result => panic!(\"not terminated by signal 1 (instead, {})\", result),\n+            process::ExitSignal(9) => {},\n+            result => panic!(\"not terminated by signal 9 (instead, {})\", result),\n         }\n     }\n "}, {"sha": "0530527c93fe665243642797153b122edff9aa11", "filename": "src/libstd/process.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1a1ac6c1abea03154b510d4788f4f4192a639955/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a1ac6c1abea03154b510d4788f4f4192a639955/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=1a1ac6c1abea03154b510d4788f4f4192a639955", "patch": "@@ -537,12 +537,12 @@ mod tests {\n     fn signal_reported_right() {\n         use os::unix::ExitStatusExt;\n \n-        let p = Command::new(\"/bin/sh\").arg(\"-c\").arg(\"kill -1 $$\").spawn();\n+        let p = Command::new(\"/bin/sh\").arg(\"-c\").arg(\"kill -9 $$\").spawn();\n         assert!(p.is_ok());\n         let mut p = p.unwrap();\n         match p.wait().unwrap().signal() {\n-            Some(1) => {},\n-            result => panic!(\"not terminated by signal 1 (instead, {:?})\", result),\n+            Some(9) => {},\n+            result => panic!(\"not terminated by signal 9 (instead, {:?})\", result),\n         }\n     }\n "}]}