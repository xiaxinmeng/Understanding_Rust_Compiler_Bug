{"sha": "ecc4ca54a4c7b1c436c466357877336c1df781cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjYzRjYTU0YTRjN2IxYzQzNmM0NjYzNTc4NzczMzZjMWRmNzgxY2Q=", "commit": {"author": {"name": "Felix Chapman", "email": "aelred717@gmail.com", "date": "2018-12-10T14:45:26Z"}, "committer": {"name": "Felix Chapman", "email": "aelred717@gmail.com", "date": "2018-12-10T14:45:26Z"}, "message": "Add #[must_use] attribute to stdlib traits", "tree": {"sha": "fc1152a312945022c21650a4f8937d3c15ccc466", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc1152a312945022c21650a4f8937d3c15ccc466"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ecc4ca54a4c7b1c436c466357877336c1df781cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ecc4ca54a4c7b1c436c466357877336c1df781cd", "html_url": "https://github.com/rust-lang/rust/commit/ecc4ca54a4c7b1c436c466357877336c1df781cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ecc4ca54a4c7b1c436c466357877336c1df781cd/comments", "author": {"login": "aelred", "id": 4632588, "node_id": "MDQ6VXNlcjQ2MzI1ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/4632588?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aelred", "html_url": "https://github.com/aelred", "followers_url": "https://api.github.com/users/aelred/followers", "following_url": "https://api.github.com/users/aelred/following{/other_user}", "gists_url": "https://api.github.com/users/aelred/gists{/gist_id}", "starred_url": "https://api.github.com/users/aelred/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aelred/subscriptions", "organizations_url": "https://api.github.com/users/aelred/orgs", "repos_url": "https://api.github.com/users/aelred/repos", "events_url": "https://api.github.com/users/aelred/events{/privacy}", "received_events_url": "https://api.github.com/users/aelred/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aelred", "id": 4632588, "node_id": "MDQ6VXNlcjQ2MzI1ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/4632588?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aelred", "html_url": "https://github.com/aelred", "followers_url": "https://api.github.com/users/aelred/followers", "following_url": "https://api.github.com/users/aelred/following{/other_user}", "gists_url": "https://api.github.com/users/aelred/gists{/gist_id}", "starred_url": "https://api.github.com/users/aelred/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aelred/subscriptions", "organizations_url": "https://api.github.com/users/aelred/orgs", "repos_url": "https://api.github.com/users/aelred/repos", "events_url": "https://api.github.com/users/aelred/events{/privacy}", "received_events_url": "https://api.github.com/users/aelred/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a336228760389b5ef01390f1c90a029dc44a0dc1", "url": "https://api.github.com/repos/rust-lang/rust/commits/a336228760389b5ef01390f1c90a029dc44a0dc1", "html_url": "https://github.com/rust-lang/rust/commit/a336228760389b5ef01390f1c90a029dc44a0dc1"}], "stats": {"total": 5, "additions": 5, "deletions": 0}, "files": [{"sha": "5dee1d6dd3a39dcb66115401481d41e23eb7341c", "filename": "src/libcore/future/future.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ecc4ca54a4c7b1c436c466357877336c1df781cd/src%2Flibcore%2Ffuture%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecc4ca54a4c7b1c436c466357877336c1df781cd/src%2Flibcore%2Ffuture%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffuture%2Ffuture.rs?ref=ecc4ca54a4c7b1c436c466357877336c1df781cd", "patch": "@@ -33,6 +33,7 @@ use task::{Poll, LocalWaker};\n ///\n /// When using a future, you generally won't call `poll` directly, but instead\n /// `await!` the value.\n+#[must_use]\n pub trait Future {\n     /// The result of the `Future`.\n     type Output;"}, {"sha": "c0b83a6868b383aab4b4df2a8529e234f54051ba", "filename": "src/libcore/iter/iterator.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ecc4ca54a4c7b1c436c466357877336c1df781cd/src%2Flibcore%2Fiter%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecc4ca54a4c7b1c436c466357877336c1df781cd/src%2Flibcore%2Fiter%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fiterator.rs?ref=ecc4ca54a4c7b1c436c466357877336c1df781cd", "patch": "@@ -98,6 +98,7 @@ fn _assert_is_object_safe(_: &dyn Iterator<Item=()>) {}\n     message=\"`{Self}` is not an iterator\"\n )]\n #[doc(spotlight)]\n+#[must_use]\n pub trait Iterator {\n     /// The type of the elements being iterated over.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "3b356b9a1e7b4ee73206f66895da7c99ee7fc041", "filename": "src/libcore/ops/function.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ecc4ca54a4c7b1c436c466357877336c1df781cd/src%2Flibcore%2Fops%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecc4ca54a4c7b1c436c466357877336c1df781cd/src%2Flibcore%2Fops%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Ffunction.rs?ref=ecc4ca54a4c7b1c436c466357877336c1df781cd", "patch": "@@ -72,6 +72,7 @@\n     label=\"expected an `Fn<{Args}>` closure, found `{Self}`\",\n )]\n #[fundamental] // so that regex can rely that `&str: !FnMut`\n+#[must_use]\n pub trait Fn<Args> : FnMut<Args> {\n     /// Performs the call operation.\n     #[unstable(feature = \"fn_traits\", issue = \"29625\")]\n@@ -150,6 +151,7 @@ pub trait Fn<Args> : FnMut<Args> {\n     label=\"expected an `FnMut<{Args}>` closure, found `{Self}`\",\n )]\n #[fundamental] // so that regex can rely that `&str: !FnMut`\n+#[must_use]\n pub trait FnMut<Args> : FnOnce<Args> {\n     /// Performs the call operation.\n     #[unstable(feature = \"fn_traits\", issue = \"29625\")]\n@@ -228,6 +230,7 @@ pub trait FnMut<Args> : FnOnce<Args> {\n     label=\"expected an `FnOnce<{Args}>` closure, found `{Self}`\",\n )]\n #[fundamental] // so that regex can rely that `&str: !FnMut`\n+#[must_use]\n pub trait FnOnce<Args> {\n     /// The returned type after the call operator is used.\n     #[stable(feature = \"fn_once_output\", since = \"1.12.0\")]"}]}