{"sha": "f9f5a88bc4d2e62ea325be8a37e5811a951f234c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5ZjVhODhiYzRkMmU2MmVhMzI1YmU4YTM3ZTU4MTFhOTUxZjIzNGM=", "commit": {"author": {"name": "Vytautas Astrauskas", "email": "vastrauskas@gmail.com", "date": "2019-11-11T15:09:03Z"}, "committer": {"name": "Vytautas Astrauskas", "email": "vastrauskas@gmail.com", "date": "2019-11-11T18:29:34Z"}, "message": "Add a callback that allows compiler consumers to override queries.", "tree": {"sha": "d2d626f52d37b8920230a6f1c62b4cad03e24b41", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2d626f52d37b8920230a6f1c62b4cad03e24b41"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9f5a88bc4d2e62ea325be8a37e5811a951f234c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9f5a88bc4d2e62ea325be8a37e5811a951f234c", "html_url": "https://github.com/rust-lang/rust/commit/f9f5a88bc4d2e62ea325be8a37e5811a951f234c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9f5a88bc4d2e62ea325be8a37e5811a951f234c/comments", "author": {"login": "vakaras", "id": 75347, "node_id": "MDQ6VXNlcjc1MzQ3", "avatar_url": "https://avatars.githubusercontent.com/u/75347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vakaras", "html_url": "https://github.com/vakaras", "followers_url": "https://api.github.com/users/vakaras/followers", "following_url": "https://api.github.com/users/vakaras/following{/other_user}", "gists_url": "https://api.github.com/users/vakaras/gists{/gist_id}", "starred_url": "https://api.github.com/users/vakaras/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vakaras/subscriptions", "organizations_url": "https://api.github.com/users/vakaras/orgs", "repos_url": "https://api.github.com/users/vakaras/repos", "events_url": "https://api.github.com/users/vakaras/events{/privacy}", "received_events_url": "https://api.github.com/users/vakaras/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vakaras", "id": 75347, "node_id": "MDQ6VXNlcjc1MzQ3", "avatar_url": "https://avatars.githubusercontent.com/u/75347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vakaras", "html_url": "https://github.com/vakaras", "followers_url": "https://api.github.com/users/vakaras/followers", "following_url": "https://api.github.com/users/vakaras/following{/other_user}", "gists_url": "https://api.github.com/users/vakaras/gists{/gist_id}", "starred_url": "https://api.github.com/users/vakaras/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vakaras/subscriptions", "organizations_url": "https://api.github.com/users/vakaras/orgs", "repos_url": "https://api.github.com/users/vakaras/repos", "events_url": "https://api.github.com/users/vakaras/events{/privacy}", "received_events_url": "https://api.github.com/users/vakaras/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a9be46cc4b5aa09e978653aba071c7c52b531eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a9be46cc4b5aa09e978653aba071c7c52b531eb", "html_url": "https://github.com/rust-lang/rust/commit/2a9be46cc4b5aa09e978653aba071c7c52b531eb"}], "stats": {"total": 21, "additions": 21, "deletions": 0}, "files": [{"sha": "4bea605125c1567ba4f663b0eaeb9aef276557c1", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9f5a88bc4d2e62ea325be8a37e5811a951f234c/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9f5a88bc4d2e62ea325be8a37e5811a951f234c/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=f9f5a88bc4d2e62ea325be8a37e5811a951f234c", "patch": "@@ -181,6 +181,7 @@ pub fn run_compiler(\n             crate_name: None,\n             lint_caps: Default::default(),\n             register_lints: None,\n+            override_queries: None,\n         };\n         callbacks.config(&mut config);\n         config\n@@ -259,6 +260,7 @@ pub fn run_compiler(\n         crate_name: None,\n         lint_caps: Default::default(),\n         register_lints: None,\n+        override_queries: None,\n     };\n \n     callbacks.config(&mut config);"}, {"sha": "fae4eb48c4a1b127aa810d5de5b8aada02057efc", "filename": "src/librustc_interface/interface.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f9f5a88bc4d2e62ea325be8a37e5811a951f234c/src%2Flibrustc_interface%2Finterface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9f5a88bc4d2e62ea325be8a37e5811a951f234c/src%2Flibrustc_interface%2Finterface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Finterface.rs?ref=f9f5a88bc4d2e62ea325be8a37e5811a951f234c", "patch": "@@ -12,6 +12,7 @@ use rustc_data_structures::OnDrop;\n use rustc_data_structures::sync::Lrc;\n use rustc_data_structures::fx::{FxHashSet, FxHashMap};\n use rustc_parse::new_parser_from_source_str;\n+use rustc::ty;\n use std::path::PathBuf;\n use std::result;\n use std::sync::{Arc, Mutex};\n@@ -38,6 +39,8 @@ pub struct Compiler {\n     pub(crate) queries: Queries,\n     pub(crate) crate_name: Option<String>,\n     pub(crate) register_lints: Option<Box<dyn Fn(&Session, &mut lint::LintStore) + Send + Sync>>,\n+    pub(crate) override_queries:\n+        Option<fn(&Session, &mut ty::query::Providers<'_>, &mut ty::query::Providers<'_>)>,\n }\n \n impl Compiler {\n@@ -131,6 +134,13 @@ pub struct Config {\n     /// Note that if you find a Some here you probably want to call that function in the new\n     /// function being registered.\n     pub register_lints: Option<Box<dyn Fn(&Session, &mut lint::LintStore) + Send + Sync>>,\n+\n+    /// This is a callback from the driver that is called just after we have populated\n+    /// the list of queries.\n+    ///\n+    /// The second parameter is local providers and the third parameter is external providers.\n+    pub override_queries:\n+        Option<fn(&Session, &mut ty::query::Providers<'_>, &mut ty::query::Providers<'_>)>,\n }\n \n pub fn run_compiler_in_existing_thread_pool<F, R>(config: Config, f: F) -> R\n@@ -157,6 +167,7 @@ where\n         queries: Default::default(),\n         crate_name: config.crate_name,\n         register_lints: config.register_lints,\n+        override_queries: config.override_queries,\n     };\n \n     let _sess_abort_error = OnDrop(|| {"}, {"sha": "c57622b8b8fe5d587c0c8c427eb65cef27c111ef", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f9f5a88bc4d2e62ea325be8a37e5811a951f234c/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9f5a88bc4d2e62ea325be8a37e5811a951f234c/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=f9f5a88bc4d2e62ea325be8a37e5811a951f234c", "patch": "@@ -786,6 +786,7 @@ pub fn create_global_ctxt(\n     let codegen_backend = compiler.codegen_backend().clone();\n     let crate_name = crate_name.to_string();\n     let defs = mem::take(&mut resolver_outputs.definitions);\n+    let override_queries = compiler.override_queries;\n \n     let ((), result) = BoxedGlobalCtxt::new(static move || {\n         let sess = &*sess;\n@@ -810,6 +811,10 @@ pub fn create_global_ctxt(\n         default_provide_extern(&mut extern_providers);\n         codegen_backend.provide_extern(&mut extern_providers);\n \n+        if let Some(callback) = override_queries {\n+            callback(sess, &mut local_providers, &mut extern_providers);\n+        }\n+\n         let gcx = TyCtxt::create_global_ctxt(\n             sess,\n             lint_store,"}, {"sha": "3d8b7ece04b417e6d1105472484eb859d8ab11a0", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f9f5a88bc4d2e62ea325be8a37e5811a951f234c/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9f5a88bc4d2e62ea325be8a37e5811a951f234c/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=f9f5a88bc4d2e62ea325be8a37e5811a951f234c", "patch": "@@ -335,6 +335,7 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n         crate_name,\n         lint_caps,\n         register_lints: None,\n+        override_queries: None,\n     };\n \n     interface::run_compiler_in_existing_thread_pool(config, |compiler| {"}, {"sha": "04ee11dcf07711b9e3f2ce300d261948d4fa23f8", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f9f5a88bc4d2e62ea325be8a37e5811a951f234c/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9f5a88bc4d2e62ea325be8a37e5811a951f234c/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=f9f5a88bc4d2e62ea325be8a37e5811a951f234c", "patch": "@@ -79,6 +79,7 @@ pub fn run(options: Options) -> i32 {\n         crate_name: options.crate_name.clone(),\n         lint_caps: Default::default(),\n         register_lints: None,\n+        override_queries: None,\n     };\n \n     let mut test_args = options.test_args.clone();"}, {"sha": "9f1850dfb4c90e291a6b612a40e9d777e9f49eb1", "filename": "src/test/run-make-fulldeps/issue-19371/foo.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f9f5a88bc4d2e62ea325be8a37e5811a951f234c/src%2Ftest%2Frun-make-fulldeps%2Fissue-19371%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9f5a88bc4d2e62ea325be8a37e5811a951f234c/src%2Ftest%2Frun-make-fulldeps%2Fissue-19371%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fissue-19371%2Ffoo.rs?ref=f9f5a88bc4d2e62ea325be8a37e5811a951f234c", "patch": "@@ -60,6 +60,7 @@ fn compile(code: String, output: PathBuf, sysroot: PathBuf) {\n         crate_name: None,\n         lint_caps: Default::default(),\n         register_lints: None,\n+        override_queries: None,\n     };\n \n     interface::run_compiler(config, |compiler| {"}]}