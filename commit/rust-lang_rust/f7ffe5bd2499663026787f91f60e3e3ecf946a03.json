{"sha": "f7ffe5bd2499663026787f91f60e3e3ecf946a03", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3ZmZlNWJkMjQ5OTY2MzAyNjc4N2Y5MWY2MGUzZTNlY2Y5NDZhMDM=", "commit": {"author": {"name": "Stjepan Glavina", "email": "stjepang@gmail.com", "date": "2017-04-07T16:04:15Z"}, "committer": {"name": "Stjepan Glavina", "email": "stjepang@gmail.com", "date": "2017-04-07T16:04:15Z"}, "message": "Replace compare_exchange with swap", "tree": {"sha": "a370b0b8203a72fbc4f4e489a09b8e517dca83fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a370b0b8203a72fbc4f4e489a09b8e517dca83fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7ffe5bd2499663026787f91f60e3e3ecf946a03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7ffe5bd2499663026787f91f60e3e3ecf946a03", "html_url": "https://github.com/rust-lang/rust/commit/f7ffe5bd2499663026787f91f60e3e3ecf946a03", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7ffe5bd2499663026787f91f60e3e3ecf946a03/comments", "author": null, "committer": null, "parents": [{"sha": "5c5a5182c94d07409fac8cb40b2cdab488c140ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c5a5182c94d07409fac8cb40b2cdab488c140ff", "html_url": "https://github.com/rust-lang/rust/commit/5c5a5182c94d07409fac8cb40b2cdab488c140ff"}], "stats": {"total": 11, "additions": 3, "deletions": 8}, "files": [{"sha": "a4050f271eb99b30a08eb91961680bf468444e28", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f7ffe5bd2499663026787f91f60e3e3ecf946a03/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7ffe5bd2499663026787f91f60e3e3ecf946a03/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=f7ffe5bd2499663026787f91f60e3e3ecf946a03", "patch": "@@ -539,20 +539,15 @@ impl AtomicBool {\n         // We can't use atomic_nand here because it can result in a bool with\n         // an invalid value. This happens because the atomic operation is done\n         // with an 8-bit integer internally, which would set the upper 7 bits.\n-        // So we just use fetch_xor or compare_exchange instead.\n+        // So we just use fetch_xor or swap instead.\n         if val {\n             // !(x & true) == !x\n             // We must invert the bool.\n             self.fetch_xor(true, order)\n         } else {\n             // !(x & false) == true\n-            // We must set the bool to true. Instead of delegating to swap or fetch_or, use\n-            // compare_exchange instead in order to avoid unnecessary writes to memory, which\n-            // might minimize cache-coherence traffic.\n-            match self.compare_exchange(false, true, order, Ordering::Relaxed) {\n-                Ok(_) => false,\n-                Err(_) => true,\n-            }\n+            // We must set the bool to true.\n+            self.swap(true, order)\n         }\n     }\n "}]}