{"sha": "217ff6b7ea5ca80b01ee1436914a061ed190d8a8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxN2ZmNmI3ZWE1Y2E4MGIwMWVlMTQzNjkxNGEwNjFlZDE5MGQ4YTg=", "commit": {"author": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2021-01-23T08:57:04Z"}, "committer": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2021-03-09T16:54:14Z"}, "message": "Switch to changing cp_non_overlap in tform\n\nIt was suggested to lower this in MIR instead of ssa, so do that instead.", "tree": {"sha": "4cf4cc9a0bca8791b41ccaf47844ec2c85af5f9b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4cf4cc9a0bca8791b41ccaf47844ec2c85af5f9b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/217ff6b7ea5ca80b01ee1436914a061ed190d8a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/217ff6b7ea5ca80b01ee1436914a061ed190d8a8", "html_url": "https://github.com/rust-lang/rust/commit/217ff6b7ea5ca80b01ee1436914a061ed190d8a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/217ff6b7ea5ca80b01ee1436914a061ed190d8a8/comments", "author": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4ae9ff82664a1d7473e32d59819c208efce48c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4ae9ff82664a1d7473e32d59819c208efce48c7", "html_url": "https://github.com/rust-lang/rust/commit/d4ae9ff82664a1d7473e32d59819c208efce48c7"}], "stats": {"total": 129, "additions": 67, "deletions": 62}, "files": [{"sha": "e148ed7ad3bcecb0697cf6bfd552a05741032478", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 2, "deletions": 18, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/217ff6b7ea5ca80b01ee1436914a061ed190d8a8/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/217ff6b7ea5ca80b01ee1436914a061ed190d8a8/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=217ff6b7ea5ca80b01ee1436914a061ed190d8a8", "patch": "@@ -643,23 +643,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n \n         match intrinsic {\n             None | Some(sym::drop_in_place) => {}\n-            Some(sym::copy_nonoverlapping) => {\n-                bx = self.codegen_statement(\n-                    bx,\n-                    &rustc_middle::mir::Statement {\n-                        source_info: rustc_middle::mir::SourceInfo::outermost(span),\n-                        kind: rustc_middle::mir::StatementKind::CopyNonOverlapping(\n-                            box rustc_middle::mir::CopyNonOverlapping {\n-                                src: args[0].clone(),\n-                                dst: args[1].clone(),\n-                                count: args[2].clone(),\n-                            },\n-                        ),\n-                    },\n-                );\n-                helper.funclet_br(self, &mut bx, destination.unwrap().1);\n-                return;\n-            }\n+            Some(sym::copy_nonoverlapping) => unreachable!(),\n             Some(intrinsic) => {\n                 let dest = match ret_dest {\n                     _ if fn_abi.ret.is_indirect() => llargs[0],\n@@ -702,7 +686,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     })\n                     .collect();\n \n-                self.codegen_intrinsic_call(\n+                Self::codegen_intrinsic_call(\n                     &mut bx,\n                     *instance.as_ref().unwrap(),\n                     &fn_abi,"}, {"sha": "8502309b90e5a1e7bfab7d1bd54cdc16b7d229e4", "filename": "compiler/rustc_codegen_ssa/src/mir/intrinsic.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/217ff6b7ea5ca80b01ee1436914a061ed190d8a8/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/217ff6b7ea5ca80b01ee1436914a061ed190d8a8/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fintrinsic.rs?ref=217ff6b7ea5ca80b01ee1436914a061ed190d8a8", "patch": "@@ -49,7 +49,6 @@ fn memset_intrinsic<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n \n impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n     pub fn codegen_intrinsic_call(\n-        &self,\n         bx: &mut Bx,\n         instance: ty::Instance<'tcx>,\n         fn_abi: &FnAbi<'tcx, Ty<'tcx>>,\n@@ -126,11 +125,6 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 let offset = args[1].immediate();\n                 bx.gep(ptr, &[offset])\n             }\n-\n-            sym::copy_nonoverlapping => {\n-                // handled explicitly in compiler/rustc_codegen_ssa/src/mir/block.rs\n-                unreachable!();\n-            }\n             sym::copy => {\n                 copy_intrinsic(\n                     bx,"}, {"sha": "f6952667494db5d12f12cdea90484e84e6469dca", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/217ff6b7ea5ca80b01ee1436914a061ed190d8a8/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/217ff6b7ea5ca80b01ee1436914a061ed190d8a8/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=217ff6b7ea5ca80b01ee1436914a061ed190d8a8", "patch": "@@ -1682,7 +1682,7 @@ pub struct Coverage {\n     pub code_region: Option<CodeRegion>,\n }\n \n-#[derive(Clone, Debug, PartialEq, TyEncodable, TyDecodable, HashStable, TypeFoldable)]\n+#[derive(Clone, Debug, PartialEq, TyEncodable, TyDecodable, Hash, HashStable, TypeFoldable)]\n pub struct CopyNonOverlapping<'tcx> {\n     pub src: Operand<'tcx>,\n     pub dst: Operand<'tcx>,"}, {"sha": "8683318e4a7b55652bd86b8c57004445ac81a5c0", "filename": "compiler/rustc_mir/src/borrow_check/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/217ff6b7ea5ca80b01ee1436914a061ed190d8a8/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/217ff6b7ea5ca80b01ee1436914a061ed190d8a8/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs?ref=217ff6b7ea5ca80b01ee1436914a061ed190d8a8", "patch": "@@ -628,13 +628,19 @@ impl<'cx, 'tcx> dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtxt<'cx, 'tc\n             }\n \n             StatementKind::CopyNonOverlapping(box rustc_middle::mir::CopyNonOverlapping {\n+                ..\n+                /*\n                 src,\n                 dst,\n                 count,\n+                */\n             }) => {\n+                unreachable!()\n+                /*\n                 self.consume_operand(location, (src, span), flow_state);\n                 self.consume_operand(location, (dst, span), flow_state);\n                 self.consume_operand(location, (count, span), flow_state);\n+                */\n             }\n             StatementKind::Nop\n             | StatementKind::Coverage(..)"}, {"sha": "b0a2d906519acd7c6b4a0d290ac0c8a761135d30", "filename": "compiler/rustc_mir/src/interpret/intrinsics.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/217ff6b7ea5ca80b01ee1436914a061ed190d8a8/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/217ff6b7ea5ca80b01ee1436914a061ed190d8a8/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=217ff6b7ea5ca80b01ee1436914a061ed190d8a8", "patch": "@@ -323,7 +323,10 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 let result = Scalar::from_uint(truncated_bits, layout.size);\n                 self.write_scalar(result, dest)?;\n             }\n-            sym::copy | sym::copy_nonoverlapping => {\n+            sym::copy_nonoverlapping => {\n+                self.copy_nonoverlapping(args[0], args[1], args[2])?;\n+            }\n+            sym::copy => {\n                 let elem_ty = instance.substs.type_at(0);\n                 let elem_layout = self.layout_of(elem_ty)?;\n                 let count = self.read_scalar(&args[2])?.to_machine_usize(self)?;\n@@ -338,12 +341,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 let dest = self.memory.check_ptr_access(dest, size, elem_align)?;\n \n                 if let (Some(src), Some(dest)) = (src, dest) {\n-                    self.memory.copy(\n-                        src,\n-                        dest,\n-                        size,\n-                        intrinsic_name == sym::copy_nonoverlapping,\n-                    )?;\n+                    self.memory.copy(src, dest, size, false)?;\n                 }\n             }\n             sym::offset => {"}, {"sha": "1c2bc57c99a835b1e76ca84f7992bb40bc39941f", "filename": "compiler/rustc_mir/src/interpret/step.rs", "status": "modified", "additions": 29, "deletions": 27, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/217ff6b7ea5ca80b01ee1436914a061ed190d8a8/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/217ff6b7ea5ca80b01ee1436914a061ed190d8a8/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fstep.rs?ref=217ff6b7ea5ca80b01ee1436914a061ed190d8a8", "patch": "@@ -2,6 +2,7 @@\n //!\n //! The main entry point is the `step` method.\n \n+use crate::interpret::OpTy;\n use rustc_middle::mir;\n use rustc_middle::mir::interpret::{InterpResult, Scalar};\n use rustc_target::abi::LayoutOf;\n@@ -115,35 +116,11 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n             // Call CopyNonOverlapping\n             CopyNonOverlapping(box rustc_middle::mir::CopyNonOverlapping { dst, src, count }) => {\n-                let (src, size) = {\n-                    let src = self.eval_operand(src, None)?;\n-                    let size = src.layout.layout.size;\n-                    let mplace = *src.assert_mem_place(self);\n-                    let ptr = match mplace.ptr {\n-                        Scalar::Ptr(ptr) => ptr,\n-                        _ => panic!(),\n-                    };\n-                    (ptr, size)\n-                };\n-\n-                let dst = {\n-                    let dst = self.eval_operand(dst, None)?;\n-                    let mplace = *dst.assert_mem_place(self);\n-                    match mplace.ptr {\n-                        Scalar::Ptr(ptr) => ptr,\n-                        _ => panic!(),\n-                    }\n-                };\n-\n                 let count = self.eval_operand(count, None)?;\n-                let count = self.read_immediate(count)?.to_scalar()?;\n-                let count = if let Scalar::Int(i) = count {\n-                    core::convert::TryFrom::try_from(i).unwrap()\n-                } else {\n-                    panic!();\n-                };\n \n-                self.memory.copy_repeatedly(src, dst, size, count, /*nonoverlapping*/ true)?;\n+                let src = self.eval_operand(src, None)?;\n+                let dst = self.eval_operand(dst, None)?;\n+                self.copy_nonoverlapping(src, dst, count)?;\n             }\n \n             // Statements we do not track.\n@@ -173,6 +150,31 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         Ok(())\n     }\n \n+    pub(crate) fn copy_nonoverlapping(\n+        &mut self,\n+        src: OpTy<'tcx, <M as Machine<'mir, 'tcx>>::PointerTag>,\n+        dst: OpTy<'tcx, <M as Machine<'mir, 'tcx>>::PointerTag>,\n+        count: OpTy<'tcx, <M as Machine<'mir, 'tcx>>::PointerTag>,\n+    ) -> InterpResult<'tcx> {\n+        let count = self.read_scalar(&count)?.to_machine_usize(self)?;\n+        let layout = self.layout_of(src.layout.ty.builtin_deref(true).unwrap().ty)?;\n+        let (size, align) = (layout.size, layout.align.abi);\n+        let src =\n+            self.memory.check_ptr_access(self.read_scalar(&src)?.check_init()?, size, align)?;\n+\n+        let dst =\n+            self.memory.check_ptr_access(self.read_scalar(&dst)?.check_init()?, size, align)?;\n+\n+        let size = size.checked_mul(count, self).ok_or_else(|| {\n+            err_ub_format!(\"overflow computing total size of `copy_nonoverlapping`\")\n+        })?;\n+\n+        if let (Some(src), Some(dst)) = (src, dst) {\n+            self.memory.copy(src, dst, size, /*nonoverlapping*/ true)?;\n+        }\n+        Ok(())\n+    }\n+\n     /// Evaluate an assignment statement.\n     ///\n     /// There is no separate `eval_rvalue` function. Instead, the code for handling each rvalue"}, {"sha": "33848bc130581a60822f3849eff21cf3a348072f", "filename": "compiler/rustc_mir/src/transform/check_unsafety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/217ff6b7ea5ca80b01ee1436914a061ed190d8a8/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/217ff6b7ea5ca80b01ee1436914a061ed190d8a8/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_unsafety.rs?ref=217ff6b7ea5ca80b01ee1436914a061ed190d8a8", "patch": "@@ -115,7 +115,6 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n             | StatementKind::Retag { .. }\n             | StatementKind::AscribeUserType(..)\n             | StatementKind::Coverage(..)\n-            | StatementKind::CopyNonOverlapping(..)\n             | StatementKind::Nop => {\n                 // safe (at least as emitted during MIR construction)\n             }\n@@ -124,6 +123,7 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                 UnsafetyViolationKind::General,\n                 UnsafetyViolationDetails::UseOfInlineAssembly,\n             ),\n+            StatementKind::CopyNonOverlapping(..) => unreachable!(),\n         }\n         self.super_statement(statement, location);\n     }"}, {"sha": "d6a733606160818b6727fb1d7667dbffc8b31b05", "filename": "compiler/rustc_mir/src/transform/lower_intrinsics.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/217ff6b7ea5ca80b01ee1436914a061ed190d8a8/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Flower_intrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/217ff6b7ea5ca80b01ee1436914a061ed190d8a8/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Flower_intrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Flower_intrinsics.rs?ref=217ff6b7ea5ca80b01ee1436914a061ed190d8a8", "patch": "@@ -40,6 +40,27 @@ impl<'tcx> MirPass<'tcx> for LowerIntrinsics {\n                             terminator.kind = TerminatorKind::Goto { target };\n                         }\n                     }\n+                    sym::copy_nonoverlapping => {\n+                        let target = destination.unwrap().1;\n+                        let mut args = args.drain(..);\n+                        block.statements.push(Statement {\n+                            source_info: terminator.source_info,\n+                            kind: StatementKind::CopyNonOverlapping(\n+                                box rustc_middle::mir::CopyNonOverlapping {\n+                                    src: args.next().unwrap(),\n+                                    dst: args.next().unwrap(),\n+                                    count: args.next().unwrap(),\n+                                },\n+                            ),\n+                        });\n+                        assert_eq!(\n+                            args.next(),\n+                            None,\n+                            \"Extra argument for copy_non_overlapping intrinsic\"\n+                        );\n+                        drop(args);\n+                        terminator.kind = TerminatorKind::Goto { target };\n+                    }\n                     sym::wrapping_add | sym::wrapping_sub | sym::wrapping_mul => {\n                         if let Some((destination, target)) = *destination {\n                             let lhs;"}, {"sha": "5347846a4b3341a83e1d65d4fa1e1f39bf78aca3", "filename": "compiler/rustc_mir/src/transform/remove_noop_landing_pads.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/217ff6b7ea5ca80b01ee1436914a061ed190d8a8/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fremove_noop_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/217ff6b7ea5ca80b01ee1436914a061ed190d8a8/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fremove_noop_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fremove_noop_landing_pads.rs?ref=217ff6b7ea5ca80b01ee1436914a061ed190d8a8", "patch": "@@ -39,7 +39,6 @@ impl RemoveNoopLandingPads {\n                 | StatementKind::StorageDead(_)\n                 | StatementKind::AscribeUserType(..)\n                 | StatementKind::Coverage(..)\n-                | StatementKind::CopyNonOverlapping(..)\n                 | StatementKind::Nop => {\n                     // These are all nops in a landing pad\n                 }\n@@ -56,6 +55,7 @@ impl RemoveNoopLandingPads {\n                 StatementKind::Assign { .. }\n                 | StatementKind::SetDiscriminant { .. }\n                 | StatementKind::LlvmInlineAsm { .. }\n+                | StatementKind::CopyNonOverlapping(..)\n                 | StatementKind::Retag { .. } => {\n                     return false;\n                 }"}, {"sha": "1391f7505e27cc3655ec67b9b8ad7661ce322c4d", "filename": "src/tools/clippy/clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/217ff6b7ea5ca80b01ee1436914a061ed190d8a8/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/217ff6b7ea5ca80b01ee1436914a061ed190d8a8/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=217ff6b7ea5ca80b01ee1436914a061ed190d8a8", "patch": "@@ -224,7 +224,7 @@ fn check_statement(tcx: TyCtxt<'tcx>, body: &Body<'tcx>, def_id: DefId, statemen\n           check_operand(tcx, dst, span, body)?;\n           check_operand(tcx, src, span, body)?;\n           check_operand(tcx, count, span, body)\n-        },\n+        }\n         // These are all NOPs\n         StatementKind::StorageLive(_)\n         | StatementKind::StorageDead(_)"}]}