{"sha": "8e764a8bb1e34ae773d3a5e41e8421cc23b49562", "node_id": "C_kwDOAAsO6NoAKDhlNzY0YThiYjFlMzRhZTc3M2QzYTVlNDFlODQyMWNjMjNiNDk1NjI", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-07-01T14:21:21Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-07-01T14:21:21Z"}, "message": "fix: Fix attribute macros on assoc items being discarded with disabled proc macros", "tree": {"sha": "d397bea8afb1b10fafe006c4e6376b6d2fda4aff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d397bea8afb1b10fafe006c4e6376b6d2fda4aff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e764a8bb1e34ae773d3a5e41e8421cc23b49562", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e764a8bb1e34ae773d3a5e41e8421cc23b49562", "html_url": "https://github.com/rust-lang/rust/commit/8e764a8bb1e34ae773d3a5e41e8421cc23b49562", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e764a8bb1e34ae773d3a5e41e8421cc23b49562/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8c416e1b9b591d9c72b613f4dcbe05432f57ee8", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8c416e1b9b591d9c72b613f4dcbe05432f57ee8", "html_url": "https://github.com/rust-lang/rust/commit/f8c416e1b9b591d9c72b613f4dcbe05432f57ee8"}], "stats": {"total": 40, "additions": 23, "deletions": 17}, "files": [{"sha": "12bfbbe3084e25ff297a4710b72104b702a2f06b", "filename": "crates/hir-def/src/data.rs", "status": "modified", "additions": 23, "deletions": 17, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/8e764a8bb1e34ae773d3a5e41e8421cc23b49562/crates%2Fhir-def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e764a8bb1e34ae773d3a5e41e8421cc23b49562/crates%2Fhir-def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fdata.rs?ref=8e764a8bb1e34ae773d3a5e41e8421cc23b49562", "patch": "@@ -458,7 +458,6 @@ impl<'a> AssocItemCollector<'a> {\n             def_map: module_id.def_map(db),\n             container,\n             expander: Expander::new(db, file_id, module_id),\n-\n             items: Vec::new(),\n             attr_calls: Vec::new(),\n         }\n@@ -473,6 +472,7 @@ impl<'a> AssocItemCollector<'a> {\n         }\n     }\n \n+    // FIXME: proc-macro diagnostics\n     fn collect(&mut self, tree_id: TreeId, assoc_items: &[AssocItem]) {\n         let item_tree = tree_id.item_tree(self.db);\n \n@@ -482,7 +482,7 @@ impl<'a> AssocItemCollector<'a> {\n                 continue;\n             }\n \n-            for attr in &*attrs {\n+            'attrs: for attr in &*attrs {\n                 let ast_id =\n                     AstId::new(self.expander.current_file_id(), item.ast_id(&item_tree).upcast());\n                 let ast_id_with_path = AstIdWithPath { path: (*attr.path).clone(), ast_id };\n@@ -494,9 +494,17 @@ impl<'a> AssocItemCollector<'a> {\n                     attr,\n                 ) {\n                     self.attr_calls.push((ast_id, call_id));\n-                    let res = self.expander.enter_expand_id(self.db, call_id);\n-                    self.collect_macro_items(res);\n-                    continue 'items;\n+                    // If proc attribute macro expansion is disabled, skip expanding it here\n+                    if !self.db.enable_proc_attr_macros() {\n+                        continue 'attrs;\n+                    }\n+                    match self.expander.enter_expand_id(self.db, call_id) {\n+                        ExpandResult { value: Some((mark, mac)), .. } => {\n+                            self.collect_macro_items(mark, mac);\n+                            continue 'items;\n+                        }\n+                        ExpandResult { .. } => {}\n+                    }\n                 }\n             }\n \n@@ -537,25 +545,23 @@ impl<'a> AssocItemCollector<'a> {\n                         stdx::panic_context::enter(format!(\"collect_items MacroCall: {}\", call));\n                     let res = self.expander.enter_expand(self.db, call);\n \n-                    if let Ok(res) = res {\n-                        self.collect_macro_items(res);\n+                    if let Ok(ExpandResult { value: Some((mark, mac)), .. }) = res {\n+                        self.collect_macro_items(mark, mac);\n                     }\n                 }\n             }\n         }\n     }\n \n-    fn collect_macro_items(&mut self, res: ExpandResult<Option<(Mark, ast::MacroItems)>>) {\n-        if let Some((mark, mac)) = res.value {\n-            let src: InFile<ast::MacroItems> = self.expander.to_source(mac);\n-            let tree_id = item_tree::TreeId::new(src.file_id, None);\n-            let item_tree = tree_id.item_tree(self.db);\n-            let iter: Vec<_> =\n-                item_tree.top_level_items().iter().filter_map(ModItem::as_assoc_item).collect();\n+    fn collect_macro_items(&mut self, mark: Mark, mac: ast::MacroItems) {\n+        let src: InFile<ast::MacroItems> = self.expander.to_source(mac);\n+        let tree_id = item_tree::TreeId::new(src.file_id, None);\n+        let item_tree = tree_id.item_tree(self.db);\n+        let iter: Vec<_> =\n+            item_tree.top_level_items().iter().filter_map(ModItem::as_assoc_item).collect();\n \n-            self.collect(tree_id, &iter);\n+        self.collect(tree_id, &iter);\n \n-            self.expander.exit(self.db, mark);\n-        }\n+        self.expander.exit(self.db, mark);\n     }\n }"}]}