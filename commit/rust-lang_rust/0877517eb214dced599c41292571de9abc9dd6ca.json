{"sha": "0877517eb214dced599c41292571de9abc9dd6ca", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4Nzc1MTdlYjIxNGRjZWQ1OTljNDEyOTI1NzFkZTlhYmM5ZGQ2Y2E=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2018-06-25T08:59:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-06-25T08:59:31Z"}, "message": "Merge pull request #2806 from topecongiro/rustc-ap-syntax\n\nUpdate rustc-ap-* to 174.0.0", "tree": {"sha": "877af443b75a89d981c4542ca30e4ca15326f334", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/877af443b75a89d981c4542ca30e4ca15326f334"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0877517eb214dced599c41292571de9abc9dd6ca", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbMK7zCRBK7hj4Ov3rIwAAdHIIAERPC/MjUaX8Annpg2Wbui87\nLSa50F5Xf2MeguPijQj5A/CwhLg92j/0sUKPBpZW/Us177A9qeWqaAIvPiiOu64J\nj3X0X3nhKCtwXwjNVgEctVyBCRJKhrT6KEaAXfjac5pIQiky0F9ocNtWdHw/hPa4\njjUGm+kFXEsf/2W0l6QefgopBJ4UAe8OMkJeht9iuEJ9yzhGoBUxoaWS6B9+4Pqc\nD+30i5XAJIPzKeirG+7zeQk5xPq70oHCs9upng4YUHTO7Rdic32j0mVo6vDjEsDG\nE0bPeatU2F7w+fg0b0JJR+rrmnwan3XJ14lKzMOREVd9d03+aJ2UPY09mKejZ60=\n=ouSI\n-----END PGP SIGNATURE-----\n", "payload": "tree 877af443b75a89d981c4542ca30e4ca15326f334\nparent 87edd75ecf26c9084969f431bb5e363693a8a4ca\nparent fa1978882beb04d90a066bbafce2ca021b7b4d8f\nauthor Nick Cameron <nrc@ncameron.org> 1529917171 +1200\ncommitter GitHub <noreply@github.com> 1529917171 +1200\n\nMerge pull request #2806 from topecongiro/rustc-ap-syntax\n\nUpdate rustc-ap-* to 174.0.0"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0877517eb214dced599c41292571de9abc9dd6ca", "html_url": "https://github.com/rust-lang/rust/commit/0877517eb214dced599c41292571de9abc9dd6ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0877517eb214dced599c41292571de9abc9dd6ca/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87edd75ecf26c9084969f431bb5e363693a8a4ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/87edd75ecf26c9084969f431bb5e363693a8a4ca", "html_url": "https://github.com/rust-lang/rust/commit/87edd75ecf26c9084969f431bb5e363693a8a4ca"}, {"sha": "fa1978882beb04d90a066bbafce2ca021b7b4d8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa1978882beb04d90a066bbafce2ca021b7b4d8f", "html_url": "https://github.com/rust-lang/rust/commit/fa1978882beb04d90a066bbafce2ca021b7b4d8f"}], "stats": {"total": 336, "additions": 175, "deletions": 161}, "files": [{"sha": "24681cfffbe5fec5a6b5d68c96ae186d51ce63af", "filename": "Cargo.lock", "status": "modified", "additions": 46, "deletions": 46, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/0877517eb214dced599c41292571de9abc9dd6ca/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/0877517eb214dced599c41292571de9abc9dd6ca/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=0877517eb214dced599c41292571de9abc9dd6ca", "patch": "@@ -24,7 +24,7 @@ dependencies = [\n  \"environment 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"failure 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"failure_derive 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_json 1.0.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_json 1.0.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -77,7 +77,7 @@ dependencies = [\n  \"semver 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde 1.0.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_derive 1.0.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_json 1.0.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_json 1.0.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -175,7 +175,7 @@ dependencies = [\n  \"atty 0.2.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"humantime 1.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"regex 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"regex 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"termcolor 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -334,7 +334,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"libc 0.2.42 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rand 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"smallvec 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"smallvec 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -405,7 +405,7 @@ dependencies = [\n \n [[package]]\n name = \"regex\"\n-version = \"1.0.0\"\n+version = \"1.0.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"aho-corasick 0.6.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -425,15 +425,15 @@ dependencies = [\n \n [[package]]\n name = \"rustc-ap-arena\"\n-version = \"164.0.0\"\n+version = \"174.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"rustc-ap-rustc_data_structures 164.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 174.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rustc-ap-rustc_cratesio_shim\"\n-version = \"164.0.0\"\n+version = \"174.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"bitflags 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -442,16 +442,16 @@ dependencies = [\n \n [[package]]\n name = \"rustc-ap-rustc_data_structures\"\n-version = \"164.0.0\"\n+version = \"174.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cfg-if 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ena 0.9.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"parking_lot 0.5.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"parking_lot_core 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_cratesio_shim 164.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-serialize 164.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_cratesio_shim 174.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-serialize 174.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-rayon 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-rayon-core 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -460,56 +460,56 @@ dependencies = [\n \n [[package]]\n name = \"rustc-ap-rustc_errors\"\n-version = \"164.0.0\"\n+version = \"174.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"atty 0.2.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_data_structures 164.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-serialize 164.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-syntax_pos 164.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 174.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-serialize 174.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-syntax_pos 174.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"termcolor 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-width 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rustc-ap-rustc_target\"\n-version = \"164.0.0\"\n+version = \"174.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"bitflags 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_cratesio_shim 164.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-serialize 164.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_cratesio_shim 174.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-serialize 174.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rustc-ap-serialize\"\n-version = \"164.0.0\"\n+version = \"174.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"rustc-ap-syntax\"\n-version = \"164.0.0\"\n+version = \"174.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"bitflags 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_data_structures 164.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_errors 164.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_target 164.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-serialize 164.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-syntax_pos 164.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 174.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_errors 174.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_target 174.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-serialize 174.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-syntax_pos 174.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"scoped-tls 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rustc-ap-syntax_pos\"\n-version = \"164.0.0\"\n+version = \"174.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"rustc-ap-arena 164.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_data_structures 164.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-serialize 164.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-arena 174.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 174.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-serialize 174.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"scoped-tls 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-width 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -563,12 +563,12 @@ dependencies = [\n  \"itertools 0.7.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"regex 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_target 164.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-syntax 164.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"regex 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_target 174.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-syntax 174.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde 1.0.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_derive 1.0.66 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_json 1.0.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_json 1.0.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"term 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"toml 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-segmentation 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -615,7 +615,7 @@ dependencies = [\n \n [[package]]\n name = \"serde_json\"\n-version = \"1.0.20\"\n+version = \"1.0.22\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"dtoa 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -625,7 +625,7 @@ dependencies = [\n \n [[package]]\n name = \"smallvec\"\n-version = \"0.6.1\"\n+version = \"0.6.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n@@ -848,16 +848,16 @@ dependencies = [\n \"checksum rand 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"eba5f8cb59cc50ed56be8880a5c7b496bfd9bd26394e176bc67884094145c2c5\"\n \"checksum redox_syscall 0.1.40 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c214e91d3ecf43e9a4e41e578973adeb14b474f2bee858742d127af75a0112b1\"\n \"checksum redox_termios 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7e891cfe48e9100a70a3b6eb652fef28920c117d366339687bd5576160db0f76\"\n-\"checksum regex 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"75ecf88252dce580404a22444fc7d626c01815debba56a7f4f536772a5ff19d3\"\n+\"checksum regex 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"13c93d55961981ba9226a213b385216f83ab43bd6ac53ab16b2eeb47e337cf4e\"\n \"checksum regex-syntax 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"05b06a75f5217880fc5e905952a42750bf44787e56a6c6d6852ed0992f5e1d54\"\n-\"checksum rustc-ap-arena 164.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6f0687e373d86505f31faeaee87d2be552843a830a0a20e252e76337b9596161\"\n-\"checksum rustc-ap-rustc_cratesio_shim 164.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7ab5b83e209f3bcdb3c058a996d54b67db58eed5496bd114a781d9faa021aba7\"\n-\"checksum rustc-ap-rustc_data_structures 164.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4bb330c149e9b133d4707718a7981d65ce4eb14f2d59cb487761aa922fefb206\"\n-\"checksum rustc-ap-rustc_errors 164.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6e19ae6a813d5cdd12b8b95cea71438bf8a5fa3505bea1e7d68d438a8ac5ae7b\"\n-\"checksum rustc-ap-rustc_target 164.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"867d4a6bc1b62d373fc6ec72632d5cbd36f3cb1f4e51282d0c7b4e771b393031\"\n-\"checksum rustc-ap-serialize 164.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e095f23598f115432ffef263201e030626f454d183cf425ef68fcca984f6594b\"\n-\"checksum rustc-ap-syntax 164.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ab8f97532dabc3713ac3e8d11a85f1a5b154486e79a0c2643d62078f0f948ce2\"\n-\"checksum rustc-ap-syntax_pos 164.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3e098adae207a4b8d470bc5e9565904cfe65dca799ba4c9efc872e7436eb5a67\"\n+\"checksum rustc-ap-arena 174.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ea3d63ae8a31549b639dc2d9bfab8cc1f36b4b0d26d3631997a96b8728125357\"\n+\"checksum rustc-ap-rustc_cratesio_shim 174.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3331eeec95b71418483fb08661829115c4b52543b54b46954f5598690b28d48a\"\n+\"checksum rustc-ap-rustc_data_structures 174.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"36ca6c4b74ca9f4a56c0bd85355969698643ac6e5b275fc321ac98e71404b2aa\"\n+\"checksum rustc-ap-rustc_errors 174.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"23e8f5cba1e335ce86f86922e0d713fef107770cdf4f830377dda12c1ec0f43c\"\n+\"checksum rustc-ap-rustc_target 174.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0c90964f9259dd23d574ee0edc0643bcb49b8e0307090ece853670aafd5f9de5\"\n+\"checksum rustc-ap-serialize 174.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5d370a086d698a968c97bd89f361f9ec2092cab41f52068ffc6fe070d7b38983\"\n+\"checksum rustc-ap-syntax 174.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"625746e5c28b776cdaf28bd12e8c33d97241f08fbf6bb97d05577f4dbb0f8cab\"\n+\"checksum rustc-ap-syntax_pos 174.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"41943a782dae68994a1e1b75ed51f5cf5ed2c20e9451dbf993d013e7797d2ede\"\n \"checksum rustc-demangle 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"76d7ba1feafada44f2d38eed812bd2489a03c0f5abb975799251518b68848649\"\n \"checksum rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7540fc8b0c49f096ee9c961cda096467dce8084bec6bdca2fc83895fd9b28cb8\"\n \"checksum rustc-rayon 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8c6d5a683c6ba4ed37959097e88d71c9e8e26659a3cb5be8b389078e7ad45306\"\n@@ -868,8 +868,8 @@ dependencies = [\n \"checksum semver-parser 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"388a1df253eca08550bef6c72392cfe7c30914bf41df5269b68cbd6ff8f570a3\"\n \"checksum serde 1.0.66 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e9a2d9a9ac5120e0f768801ca2b58ad6eec929dc9d1d616c162f208869c2ce95\"\n \"checksum serde_derive 1.0.66 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0a90213fa7e0f5eac3f7afe2d5ff6b088af515052cc7303bd68c7e3b91a3fb79\"\n-\"checksum serde_json 1.0.20 (registry+https://github.com/rust-lang/crates.io-index)\" = \"fc97cccc2959f39984524026d760c08ef0dd5f0f5948c8d31797dbfae458c875\"\n-\"checksum smallvec 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"03dab98ab5ded3a8b43b2c80751194608d0b2aa0f1d46cf95d1c35e192844aa7\"\n+\"checksum serde_json 1.0.22 (registry+https://github.com/rust-lang/crates.io-index)\" = \"84b8035cabe9b35878adec8ac5fe03d5f6bc97ff6edd7ccb96b44c1276ba390e\"\n+\"checksum smallvec 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"312a7df010092e73d6bbaf141957e868d4f30efd2bfd9bb1028ad91abec58514\"\n \"checksum stable_deref_trait 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ffbc596e092fe5f598b12ef46cc03754085ac2f4d8c739ad61c4ae266cc3b3fa\"\n \"checksum syn 0.11.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d3b891b9015c88c576343b9b3e41c2c11a51c219ef067b264bd9c8aa9b441dad\"\n \"checksum syn 0.13.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"14f9bf6292f3a61d2c716723fdb789a41bbe104168e6f496dc6497e531ea1b9b\""}, {"sha": "1772207444f7535523ca750b52e41f089e5076f8", "filename": "Cargo.toml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0877517eb214dced599c41292571de9abc9dd6ca/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0877517eb214dced599c41292571de9abc9dd6ca/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=0877517eb214dced599c41292571de9abc9dd6ca", "patch": "@@ -47,8 +47,8 @@ env_logger = \"0.5\"\n getopts = \"0.2\"\n derive-new = \"0.5\"\n cargo_metadata = \"0.5.1\"\n-rustc-ap-rustc_target = \"164.0.0\"\n-rustc-ap-syntax = \"164.0.0\"\n+rustc-ap-rustc_target = \"174.0.0\"\n+rustc-ap-syntax = \"174.0.0\"\n failure = \"0.1.1\"\n \n [dev-dependencies]"}, {"sha": "52999635cf125ce4fa1dc1a6f2b8550e9056a740", "filename": "src/chains.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0877517eb214dced599c41292571de9abc9dd6ca/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0877517eb214dced599c41292571de9abc9dd6ca/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=0877517eb214dced599c41292571de9abc9dd6ca", "patch": "@@ -70,6 +70,7 @@ use expr::rewrite_call;\n use macros::convert_try_mac;\n use rewrite::{Rewrite, RewriteContext};\n use shape::Shape;\n+use spanned::Spanned;\n use utils::{\n     first_line_width, last_line_extendable, last_line_width, mk_sp, trimmed_last_line_width,\n     wrap_str,\n@@ -436,9 +437,9 @@ fn rewrite_chain_subexpr(\n \n     match expr.node {\n         ast::ExprKind::MethodCall(ref segment, ref expressions) => {\n-            let types = match segment.parameters {\n+            let types = match segment.args {\n                 Some(ref params) => match **params {\n-                    ast::PathParameters::AngleBracketed(ref data) => &data.types[..],\n+                    ast::GenericArgs::AngleBracketed(ref data) => &data.args[..],\n                     _ => &[],\n                 },\n                 _ => &[],\n@@ -484,7 +485,7 @@ fn is_try(expr: &ast::Expr) -> bool {\n \n fn rewrite_method_call(\n     method_name: ast::Ident,\n-    types: &[ptr::P<ast::Ty>],\n+    types: &[ast::GenericArg],\n     args: &[ptr::P<ast::Expr>],\n     span: Span,\n     context: &RewriteContext,\n@@ -500,7 +501,7 @@ fn rewrite_method_call(\n \n         let type_str = format!(\"::<{}>\", type_list.join(\", \"));\n \n-        (types.last().unwrap().span.hi(), type_str)\n+        (types.last().unwrap().span().hi(), type_str)\n     };\n \n     let callee_str = format!(\".{}{}\", method_name, type_str);"}, {"sha": "b8a323f73a24e464a8201f0f66086d2b776798df", "filename": "src/expr.rs", "status": "modified", "additions": 22, "deletions": 7, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/0877517eb214dced599c41292571de9abc9dd6ca/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0877517eb214dced599c41292571de9abc9dd6ca/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=0877517eb214dced599c41292571de9abc9dd6ca", "patch": "@@ -2014,8 +2014,8 @@ fn rewrite_assignment(\n pub enum RhsTactics {\n     /// Use heuristics.\n     Default,\n-    /// Put the rhs on the next line if it uses multiple line.\n-    ForceNextLine,\n+    /// Put the rhs on the next line if it uses multiple line, without extra indentation.\n+    ForceNextLineWithoutIndent,\n }\n \n // The left hand side must contain everything up to, and including, the\n@@ -2072,11 +2072,12 @@ fn choose_rhs<R: Rewrite>(\n         _ => {\n             // Expression did not fit on the same line as the identifier.\n             // Try splitting the line and see if that works better.\n-            let new_shape =\n-                Shape::indented(shape.indent.block_indent(context.config), context.config)\n-                    .sub_width(shape.rhs_overhead(context.config))?;\n+            let new_shape = shape_from_rhs_tactic(context, shape, rhs_tactics)?;\n             let new_rhs = expr.rewrite(context, new_shape);\n-            let new_indent_str = &new_shape.indent.to_string_with_newline(context.config);\n+            let new_indent_str = &shape\n+                .indent\n+                .block_indent(context.config)\n+                .to_string_with_newline(context.config);\n \n             match (orig_rhs, new_rhs) {\n                 (Some(ref orig_rhs), Some(ref new_rhs))\n@@ -2098,8 +2099,22 @@ fn choose_rhs<R: Rewrite>(\n     }\n }\n \n+fn shape_from_rhs_tactic(\n+    context: &RewriteContext,\n+    shape: Shape,\n+    rhs_tactic: RhsTactics,\n+) -> Option<Shape> {\n+    match rhs_tactic {\n+        RhsTactics::ForceNextLineWithoutIndent => Some(shape.with_max_width(context.config)),\n+        RhsTactics::Default => {\n+            Shape::indented(shape.indent.block_indent(context.config), context.config)\n+                .sub_width(shape.rhs_overhead(context.config))\n+        }\n+    }\n+}\n+\n pub fn prefer_next_line(orig_rhs: &str, next_line_rhs: &str, rhs_tactics: RhsTactics) -> bool {\n-    rhs_tactics == RhsTactics::ForceNextLine\n+    rhs_tactics == RhsTactics::ForceNextLineWithoutIndent\n         || !next_line_rhs.contains('\\n')\n         || count_newlines(orig_rhs) > count_newlines(next_line_rhs) + 1\n }"}, {"sha": "b8639fdd67e127413789443c3f900127e83d7d35", "filename": "src/imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0877517eb214dced599c41292571de9abc9dd6ca/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0877517eb214dced599c41292571de9abc9dd6ca/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=0877517eb214dced599c41292571de9abc9dd6ca", "patch": "@@ -346,7 +346,7 @@ impl UseTree {\n                         .collect(),\n                 ));\n             }\n-            UseTreeKind::Simple(ref rename) => {\n+            UseTreeKind::Simple(ref rename, ..) => {\n                 let mut name = (*path_to_imported_ident(&a.prefix).name.as_str()).to_owned();\n                 let alias = rename.and_then(|ident| {\n                     if ident == path_to_imported_ident(&a.prefix) {"}, {"sha": "05ac3a3fe36c0af6b6a06539d8e639db014b5d94", "filename": "src/items.rs", "status": "modified", "additions": 15, "deletions": 26, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/0877517eb214dced599c41292571de9abc9dd6ca/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0877517eb214dced599c41292571de9abc9dd6ca/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=0877517eb214dced599c41292571de9abc9dd6ca", "patch": "@@ -36,7 +36,6 @@ use overflow;\n use rewrite::{Rewrite, RewriteContext};\n use shape::{Indent, Shape};\n use spanned::Spanned;\n-use types::TraitTyParamBounds;\n use utils::*;\n use vertical::rewrite_with_alignment;\n use visitor::FmtVisitor;\n@@ -971,7 +970,7 @@ pub fn format_trait(context: &RewriteContext, item: &ast::Item, offset: Indent)\n         is_auto,\n         unsafety,\n         ref generics,\n-        ref type_param_bounds,\n+        ref generic_bounds,\n         ref trait_items,\n     ) = item.node\n     {\n@@ -997,23 +996,22 @@ pub fn format_trait(context: &RewriteContext, item: &ast::Item, offset: Indent)\n         result.push_str(&generics_str);\n \n         // FIXME(#2055): rustfmt fails to format when there are comments between trait bounds.\n-        if !type_param_bounds.is_empty() {\n+        if !generic_bounds.is_empty() {\n             let ident_hi = context\n                 .snippet_provider\n                 .span_after(item.span, &format!(\"{}\", item.ident));\n-            let bound_hi = type_param_bounds.last().unwrap().span().hi();\n+            let bound_hi = generic_bounds.last().unwrap().span().hi();\n             let snippet = context.snippet(mk_sp(ident_hi, bound_hi));\n             if contains_comment(snippet) {\n                 return None;\n             }\n-        }\n-        if !type_param_bounds.is_empty() {\n+\n             result = rewrite_assign_rhs_with(\n                 context,\n                 result + \":\",\n-                &TraitTyParamBounds::new(type_param_bounds),\n+                generic_bounds,\n                 shape,\n-                RhsTactics::ForceNextLine,\n+                RhsTactics::ForceNextLineWithoutIndent,\n             )?;\n         }\n \n@@ -1026,10 +1024,10 @@ pub fn format_trait(context: &RewriteContext, item: &ast::Item, offset: Indent)\n             };\n \n             let where_budget = context.budget(last_line_width(&result));\n-            let pos_before_where = if type_param_bounds.is_empty() {\n+            let pos_before_where = if generic_bounds.is_empty() {\n                 generics.where_clause.span.lo()\n             } else {\n-                type_param_bounds[type_param_bounds.len() - 1].span().hi()\n+                generic_bounds[generic_bounds.len() - 1].span().hi()\n             };\n             let option = WhereClauseOption::snuggled(&generics_str);\n             let where_clause_str = rewrite_where_clause(\n@@ -1134,7 +1132,7 @@ pub fn format_trait_alias(\n     context: &RewriteContext,\n     ident: ast::Ident,\n     generics: &ast::Generics,\n-    ty_param_bounds: &ast::TyParamBounds,\n+    generic_bounds: &ast::GenericBounds,\n     shape: Shape,\n ) -> Option<String> {\n     let alias = ident.name.as_str();\n@@ -1143,7 +1141,7 @@ pub fn format_trait_alias(\n     let generics_str = rewrite_generics(context, &alias, generics, g_shape, generics.span)?;\n     let lhs = format!(\"trait {} =\", generics_str);\n     // 1 = \";\"\n-    rewrite_assign_rhs(context, lhs, ty_param_bounds, shape.sub_width(1)?).map(|s| s + \";\")\n+    rewrite_assign_rhs(context, lhs, generic_bounds, shape.sub_width(1)?).map(|s| s + \";\")\n }\n \n fn format_unit_struct(context: &RewriteContext, p: &StructParts, offset: Indent) -> Option<String> {\n@@ -1671,13 +1669,13 @@ fn rewrite_static(\n pub fn rewrite_associated_type(\n     ident: ast::Ident,\n     ty_opt: Option<&ptr::P<ast::Ty>>,\n-    ty_param_bounds_opt: Option<&ast::TyParamBounds>,\n+    generic_bounds_opt: Option<&ast::GenericBounds>,\n     context: &RewriteContext,\n     indent: Indent,\n ) -> Option<String> {\n     let prefix = format!(\"type {}\", ident);\n \n-    let type_bounds_str = if let Some(bounds) = ty_param_bounds_opt {\n+    let type_bounds_str = if let Some(bounds) = generic_bounds_opt {\n         if bounds.is_empty() {\n             String::new()\n         } else {\n@@ -1703,11 +1701,11 @@ pub fn rewrite_associated_impl_type(\n     ident: ast::Ident,\n     defaultness: ast::Defaultness,\n     ty_opt: Option<&ptr::P<ast::Ty>>,\n-    ty_param_bounds_opt: Option<&ast::TyParamBounds>,\n+    generic_bounds_opt: Option<&ast::GenericBounds>,\n     context: &RewriteContext,\n     indent: Indent,\n ) -> Option<String> {\n-    let result = rewrite_associated_type(ident, ty_opt, ty_param_bounds_opt, context, indent)?;\n+    let result = rewrite_associated_type(ident, ty_opt, generic_bounds_opt, context, indent)?;\n \n     match defaultness {\n         ast::Defaultness::Default => Some(format!(\"default {}\", result)),\n@@ -2698,7 +2696,7 @@ fn format_generics(\n         }\n         // If the generics are not parameterized then generics.span.hi() == 0,\n         // so we use span.lo(), which is the position after `struct Foo`.\n-        let span_end_before_where = if generics.is_parameterized() {\n+        let span_end_before_where = if !generics.params.is_empty() {\n             generics.span.hi()\n         } else {\n             span.lo()\n@@ -2804,15 +2802,6 @@ impl Rewrite for ast::ForeignItem {\n     }\n }\n \n-impl Rewrite for ast::GenericParam {\n-    fn rewrite(&self, context: &RewriteContext, shape: Shape) -> Option<String> {\n-        match *self {\n-            ast::GenericParam::Lifetime(ref lifetime_def) => lifetime_def.rewrite(context, shape),\n-            ast::GenericParam::Type(ref ty) => ty.rewrite(context, shape),\n-        }\n-    }\n-}\n-\n /// Rewrite an inline mod.\n pub fn rewrite_mod(item: &ast::Item) -> String {\n     let mut result = String::with_capacity(32);"}, {"sha": "c2886fcdd8fb4023a007a5036565aa722d8a0cc8", "filename": "src/spanned.rs", "status": "modified", "additions": 28, "deletions": 32, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/0877517eb214dced599c41292571de9abc9dd6ca/src%2Fspanned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0877517eb214dced599c41292571de9abc9dd6ca/src%2Fspanned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fspanned.rs?ref=0877517eb214dced599c41292571de9abc9dd6ca", "patch": "@@ -14,6 +14,8 @@ use syntax::codemap::Span;\n use macros::MacroArg;\n use utils::{mk_sp, outer_attributes};\n \n+use std::cmp::max;\n+\n /// Spanned returns a span including attributes, if available.\n pub trait Spanned {\n     fn span(&self) -> Span;\n@@ -110,10 +112,25 @@ impl Spanned for ast::Arg {\n \n impl Spanned for ast::GenericParam {\n     fn span(&self) -> Span {\n-        match *self {\n-            ast::GenericParam::Lifetime(ref lifetime_def) => lifetime_def.span(),\n-            ast::GenericParam::Type(ref ty) => ty.span(),\n-        }\n+        let lo = if self.attrs.is_empty() {\n+            self.ident.span.lo()\n+        } else {\n+            self.attrs[0].span.lo()\n+        };\n+        let hi = if self.bounds.is_empty() {\n+            self.ident.span.hi()\n+        } else {\n+            self.bounds.last().unwrap().span().hi()\n+        };\n+        let ty_hi = if let ast::GenericParamKind::Type {\n+            default: Some(ref ty),\n+        } = self.kind\n+        {\n+            ty.span().hi()\n+        } else {\n+            hi\n+        };\n+        mk_sp(lo, max(hi, ty_hi))\n     }\n }\n \n@@ -142,45 +159,24 @@ impl Spanned for ast::FunctionRetTy {\n     }\n }\n \n-impl Spanned for ast::TyParam {\n+impl Spanned for ast::GenericArg {\n     fn span(&self) -> Span {\n-        // Note that ty.span is the span for ty.ident, not the whole item.\n-        let lo = if self.attrs.is_empty() {\n-            self.ident.span.lo()\n-        } else {\n-            self.attrs[0].span.lo()\n-        };\n-        if let Some(ref def) = self.default {\n-            return mk_sp(lo, def.span.hi());\n-        }\n-        if self.bounds.is_empty() {\n-            return mk_sp(lo, self.ident.span.hi());\n+        match *self {\n+            ast::GenericArg::Lifetime(ref lt) => lt.ident.span,\n+            ast::GenericArg::Type(ref ty) => ty.span(),\n         }\n-        let hi = self.bounds[self.bounds.len() - 1].span().hi();\n-        mk_sp(lo, hi)\n     }\n }\n \n-impl Spanned for ast::TyParamBound {\n+impl Spanned for ast::GenericBound {\n     fn span(&self) -> Span {\n         match *self {\n-            ast::TyParamBound::TraitTyParamBound(ref ptr, _) => ptr.span,\n-            ast::TyParamBound::RegionTyParamBound(ref l) => l.ident.span,\n+            ast::GenericBound::Trait(ref ptr, _) => ptr.span,\n+            ast::GenericBound::Outlives(ref l) => l.ident.span,\n         }\n     }\n }\n \n-impl Spanned for ast::LifetimeDef {\n-    fn span(&self) -> Span {\n-        let hi = if self.bounds.is_empty() {\n-            self.lifetime.ident.span.hi()\n-        } else {\n-            self.bounds[self.bounds.len() - 1].ident.span.hi()\n-        };\n-        mk_sp(self.lifetime.ident.span.lo(), hi)\n-    }\n-}\n-\n impl Spanned for MacroArg {\n     fn span(&self) -> Span {\n         match *self {"}, {"sha": "20c6cebeefdbb21b874884608ddc804d8c02ca9e", "filename": "src/types.rs", "status": "modified", "additions": 45, "deletions": 39, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/0877517eb214dced599c41292571de9abc9dd6ca/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0877517eb214dced599c41292571de9abc9dd6ca/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=0877517eb214dced599c41292571de9abc9dd6ca", "patch": "@@ -148,6 +148,15 @@ enum SegmentParam<'a> {\n     Binding(&'a ast::TypeBinding),\n }\n \n+impl<'a> SegmentParam<'a> {\n+    fn from_generic_arg(arg: &ast::GenericArg) -> SegmentParam {\n+        match arg {\n+            ast::GenericArg::Lifetime(ref lt) => SegmentParam::LifeTime(lt),\n+            ast::GenericArg::Type(ref ty) => SegmentParam::Type(ty),\n+        }\n+    }\n+}\n+\n impl<'a> Spanned for SegmentParam<'a> {\n     fn span(&self) -> Span {\n         match *self {\n@@ -220,18 +229,15 @@ fn rewrite_segment(\n         shape.shrink_left(ident_len)?\n     };\n \n-    if let Some(ref params) = segment.parameters {\n-        match **params {\n-            ast::PathParameters::AngleBracketed(ref data)\n-                if !data.lifetimes.is_empty()\n-                    || !data.types.is_empty()\n-                    || !data.bindings.is_empty() =>\n+    if let Some(ref args) = segment.args {\n+        match **args {\n+            ast::GenericArgs::AngleBracketed(ref data)\n+                if !data.args.is_empty() || !data.bindings.is_empty() =>\n             {\n                 let param_list = data\n-                    .lifetimes\n+                    .args\n                     .iter()\n-                    .map(SegmentParam::LifeTime)\n-                    .chain(data.types.iter().map(|x| SegmentParam::Type(&*x)))\n+                    .map(SegmentParam::from_generic_arg)\n                     .chain(data.bindings.iter().map(|x| SegmentParam::Binding(&*x)))\n                     .collect::<Vec<_>>();\n \n@@ -257,7 +263,7 @@ fn rewrite_segment(\n \n                 result.push_str(&generics_str)\n             }\n-            ast::PathParameters::Parenthesized(ref data) => {\n+            ast::GenericArgs::Parenthesized(ref data) => {\n                 let output = match data.output {\n                     Some(ref ty) => FunctionRetTy::Ty(ty.clone()),\n                     None => FunctionRetTy::Default(codemap::DUMMY_SP),\n@@ -457,15 +463,18 @@ impl Rewrite for ast::WherePredicate {\n     }\n }\n \n-impl Rewrite for ast::LifetimeDef {\n+impl Rewrite for ast::GenericArg {\n     fn rewrite(&self, context: &RewriteContext, shape: Shape) -> Option<String> {\n-        rewrite_bounded_lifetime(&self.lifetime, &self.bounds, context, shape)\n+        match *self {\n+            ast::GenericArg::Lifetime(ref lt) => lt.rewrite(context, shape),\n+            ast::GenericArg::Type(ref ty) => ty.rewrite(context, shape),\n+        }\n     }\n }\n \n fn rewrite_bounded_lifetime(\n     lt: &ast::Lifetime,\n-    bounds: &[ast::Lifetime],\n+    bounds: &[ast::GenericBound],\n     context: &RewriteContext,\n     shape: Shape,\n ) -> Option<String> {\n@@ -486,45 +495,36 @@ fn rewrite_bounded_lifetime(\n     }\n }\n \n-impl Rewrite for ast::TyParamBound {\n-    fn rewrite(&self, context: &RewriteContext, shape: Shape) -> Option<String> {\n-        match *self {\n-            ast::TyParamBound::TraitTyParamBound(ref tref, ast::TraitBoundModifier::None) => {\n-                tref.rewrite(context, shape)\n-            }\n-            ast::TyParamBound::TraitTyParamBound(ref tref, ast::TraitBoundModifier::Maybe) => Some(\n-                format!(\"?{}\", tref.rewrite(context, shape.offset_left(1)?)?),\n-            ),\n-            ast::TyParamBound::RegionTyParamBound(ref l) => l.rewrite(context, shape),\n-        }\n-    }\n-}\n-\n impl Rewrite for ast::Lifetime {\n     fn rewrite(&self, _: &RewriteContext, _: Shape) -> Option<String> {\n         Some(self.ident.to_string())\n     }\n }\n \n-/// A simple wrapper over type param bounds in trait.\n-#[derive(new)]\n-pub struct TraitTyParamBounds<'a> {\n-    inner: &'a ast::TyParamBounds,\n-}\n-\n-impl<'a> Rewrite for TraitTyParamBounds<'a> {\n+impl Rewrite for ast::GenericBound {\n     fn rewrite(&self, context: &RewriteContext, shape: Shape) -> Option<String> {\n-        join_bounds(context, shape, self.inner, false)\n+        match *self {\n+            ast::GenericBound::Trait(ref poly_trait_ref, trait_bound_modifier) => {\n+                match trait_bound_modifier {\n+                    ast::TraitBoundModifier::None => poly_trait_ref.rewrite(context, shape),\n+                    ast::TraitBoundModifier::Maybe => {\n+                        let rw = poly_trait_ref.rewrite(context, shape.offset_left(1)?)?;\n+                        Some(format!(\"?{}\", rw))\n+                    }\n+                }\n+            }\n+            ast::GenericBound::Outlives(ref lifetime) => lifetime.rewrite(context, shape),\n+        }\n     }\n }\n \n-impl Rewrite for ast::TyParamBounds {\n+impl Rewrite for ast::GenericBounds {\n     fn rewrite(&self, context: &RewriteContext, shape: Shape) -> Option<String> {\n         join_bounds(context, shape, self, true)\n     }\n }\n \n-impl Rewrite for ast::TyParam {\n+impl Rewrite for ast::GenericParam {\n     fn rewrite(&self, context: &RewriteContext, shape: Shape) -> Option<String> {\n         let mut result = String::with_capacity(128);\n         // FIXME: If there are more than one attributes, this will force multiline.\n@@ -537,7 +537,10 @@ impl Rewrite for ast::TyParam {\n             result.push_str(type_bound_colon(context));\n             result.push_str(&self.bounds.rewrite(context, shape)?)\n         }\n-        if let Some(ref def) = self.default {\n+        if let ast::GenericParamKind::Type {\n+            default: Some(ref def),\n+        } = self.kind\n+        {\n             let eq_str = match context.config.type_punctuation_density() {\n                 TypeDensity::Compressed => \"=\",\n                 TypeDensity::Wide => \" = \",\n@@ -786,7 +789,10 @@ fn rewrite_lifetime_param(\n ) -> Option<String> {\n     let result = generic_params\n         .iter()\n-        .filter(|p| p.is_lifetime_param())\n+        .filter(|p| match p.kind {\n+            ast::GenericParamKind::Lifetime => true,\n+            _ => false,\n+        })\n         .map(|lt| lt.rewrite(context, shape))\n         .collect::<Option<Vec<_>>>()?\n         .join(\", \");"}, {"sha": "c58122025de7d37dad91502cf25550255c4a34da", "filename": "src/visitor.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0877517eb214dced599c41292571de9abc9dd6ca/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0877517eb214dced599c41292571de9abc9dd6ca/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=0877517eb214dced599c41292571de9abc9dd6ca", "patch": "@@ -354,13 +354,13 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                 let rw = format_trait(&self.get_context(), item, self.block_indent);\n                 self.push_rewrite(item.span, rw);\n             }\n-            ast::ItemKind::TraitAlias(ref generics, ref ty_param_bounds) => {\n+            ast::ItemKind::TraitAlias(ref generics, ref generic_bounds) => {\n                 let shape = Shape::indented(self.block_indent, self.config);\n                 let rw = format_trait_alias(\n                     &self.get_context(),\n                     item.ident,\n                     generics,\n-                    ty_param_bounds,\n+                    generic_bounds,\n                     shape,\n                 );\n                 self.push_rewrite(item.span, rw);\n@@ -461,11 +461,11 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                     Some(&inner_attrs),\n                 );\n             }\n-            ast::TraitItemKind::Type(ref type_param_bounds, ref type_default) => {\n+            ast::TraitItemKind::Type(ref generic_bounds, ref type_default) => {\n                 let rewrite = rewrite_associated_type(\n                     ti.ident,\n                     type_default.as_ref(),\n-                    Some(type_param_bounds),\n+                    Some(generic_bounds),\n                     &self.get_context(),\n                     self.block_indent,\n                 );"}, {"sha": "71de325566dd56877b030a0384e8f649e5cb9482", "filename": "tests/source/assignment.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0877517eb214dced599c41292571de9abc9dd6ca/tests%2Fsource%2Fassignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0877517eb214dced599c41292571de9abc9dd6ca/tests%2Fsource%2Fassignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fassignment.rs?ref=0877517eb214dced599c41292571de9abc9dd6ca", "patch": "@@ -13,6 +13,10 @@ fn main() {\n         DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD;\n \n     single_line_fit =   5;single_lit_fit    >>=  10;\n+\n+\n+    // #2791\n+    let x = 2;;;;\n }\n \n fn break_meee() {"}, {"sha": "a33f3cb40abe1d47b485080c15560fe60317b434", "filename": "tests/target/assignment.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0877517eb214dced599c41292571de9abc9dd6ca/tests%2Ftarget%2Fassignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0877517eb214dced599c41292571de9abc9dd6ca/tests%2Ftarget%2Fassignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fassignment.rs?ref=0877517eb214dced599c41292571de9abc9dd6ca", "patch": "@@ -15,6 +15,9 @@ fn main() {\n \n     single_line_fit = 5;\n     single_lit_fit >>= 10;\n+\n+    // #2791\n+    let x = 2;;;;\n }\n \n fn break_meee() {"}]}