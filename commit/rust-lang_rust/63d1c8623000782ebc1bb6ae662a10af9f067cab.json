{"sha": "63d1c8623000782ebc1bb6ae662a10af9f067cab", "node_id": "C_kwDOAAsO6NoAKDYzZDFjODYyMzAwMDc4MmViYzFiYjZhZTY2MmExMGFmOWYwNjdjYWI", "commit": {"author": {"name": "Gus Wynn", "email": "guswynn@gmail.com", "date": "2022-06-01T18:36:20Z"}, "committer": {"name": "Gus Wynn", "email": "guswynn@gmail.com", "date": "2022-06-07T20:10:50Z"}, "message": "[core] add Exclusive to sync", "tree": {"sha": "e99dbc5dff23eb64432da220cec0138d0d3b3ca5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e99dbc5dff23eb64432da220cec0138d0d3b3ca5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63d1c8623000782ebc1bb6ae662a10af9f067cab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63d1c8623000782ebc1bb6ae662a10af9f067cab", "html_url": "https://github.com/rust-lang/rust/commit/63d1c8623000782ebc1bb6ae662a10af9f067cab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63d1c8623000782ebc1bb6ae662a10af9f067cab/comments", "author": {"login": "guswynn", "id": 5404303, "node_id": "MDQ6VXNlcjU0MDQzMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/5404303?v=4", "gravatar_id": "", "url": "https://api.github.com/users/guswynn", "html_url": "https://github.com/guswynn", "followers_url": "https://api.github.com/users/guswynn/followers", "following_url": "https://api.github.com/users/guswynn/following{/other_user}", "gists_url": "https://api.github.com/users/guswynn/gists{/gist_id}", "starred_url": "https://api.github.com/users/guswynn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/guswynn/subscriptions", "organizations_url": "https://api.github.com/users/guswynn/orgs", "repos_url": "https://api.github.com/users/guswynn/repos", "events_url": "https://api.github.com/users/guswynn/events{/privacy}", "received_events_url": "https://api.github.com/users/guswynn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "guswynn", "id": 5404303, "node_id": "MDQ6VXNlcjU0MDQzMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/5404303?v=4", "gravatar_id": "", "url": "https://api.github.com/users/guswynn", "html_url": "https://github.com/guswynn", "followers_url": "https://api.github.com/users/guswynn/followers", "following_url": "https://api.github.com/users/guswynn/following{/other_user}", "gists_url": "https://api.github.com/users/guswynn/gists{/gist_id}", "starred_url": "https://api.github.com/users/guswynn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/guswynn/subscriptions", "organizations_url": "https://api.github.com/users/guswynn/orgs", "repos_url": "https://api.github.com/users/guswynn/repos", "events_url": "https://api.github.com/users/guswynn/events{/privacy}", "received_events_url": "https://api.github.com/users/guswynn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8256e97231332ef49bd47a74b1809e785ecc78df", "url": "https://api.github.com/repos/rust-lang/rust/commits/8256e97231332ef49bd47a74b1809e785ecc78df", "html_url": "https://github.com/rust-lang/rust/commit/8256e97231332ef49bd47a74b1809e785ecc78df"}], "stats": {"total": 179, "additions": 179, "deletions": 0}, "files": [{"sha": "6ada07fd576a14d9fcc40ca66789c001f8c6a815", "filename": "library/core/src/sync/exclusive.rs", "status": "added", "additions": 173, "deletions": 0, "changes": 173, "blob_url": "https://github.com/rust-lang/rust/blob/63d1c8623000782ebc1bb6ae662a10af9f067cab/library%2Fcore%2Fsrc%2Fsync%2Fexclusive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63d1c8623000782ebc1bb6ae662a10af9f067cab/library%2Fcore%2Fsrc%2Fsync%2Fexclusive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fsync%2Fexclusive.rs?ref=63d1c8623000782ebc1bb6ae662a10af9f067cab", "patch": "@@ -0,0 +1,173 @@\n+//! Defines [`Exclusive`].\n+\n+use core::fmt;\n+use core::future::Future;\n+use core::pin::Pin;\n+use core::task::{Context, Poll};\n+\n+/// `Exclusive` provides only _mutable_ access, also referred to as _exclusive_\n+/// access to the underlying value. It provides no _immutable_, or _shared_\n+/// access to the underlying value.\n+///\n+/// While this may seem not very useful, it allows `Exclusive` to _unconditionally_\n+/// implement [`Sync`]. Indeed, the safety requirements of `Sync` state that for `Exclusive`\n+/// to be `Sync`, it must be sound to _share_ across threads, that is, it must be sound\n+/// for `&Exclusive` to cross thread boundaries. By design, a `&Exclusive` has no API\n+/// whatsoever, making it useless, thus harmless, thus memory safe.\n+///\n+/// Certain constructs like [`Future`]s can only be used with _exclusive_ access,\n+/// and are often `Send` but not `Sync`, so `Exclusive` can be used as hint to the\n+/// rust compiler that something is `Sync` in practice.\n+///\n+/// ## Examples\n+/// Using a non-`Sync` future prevents the wrapping struct from being `Sync`\n+/// ```compile_fail\n+/// use core::cell::Cell;\n+///\n+/// async fn other() {}\n+/// fn assert_sync<T: Sync>(t: T) {}\n+/// struct State<F> {\n+///     future: F\n+/// }\n+///\n+/// assert_sync(State {\n+///     future: async {\n+///         let cell = Cell::new(1);\n+///         let cell_ref = &cell;\n+///         other().await;\n+///         let value = cell_ref.get();\n+///     }\n+/// });\n+/// ```\n+///\n+/// `Exclusive` ensures the struct is `Sync` without stripping the future of its\n+/// functionality.\n+/// ```\n+/// #![feature(exclusive_wrapper)]\n+/// use core::cell::Cell;\n+/// use core::sync::Exclusive;\n+///\n+/// async fn other() {}\n+/// fn assert_sync<T: Sync>(t: T) {}\n+/// struct State<F> {\n+///     future: Exclusive<F>\n+/// }\n+///\n+/// assert_sync(State {\n+///     future: Exclusive::new(async {\n+///         let cell = Cell::new(1);\n+///         let cell_ref = &cell;\n+///         other().await;\n+///         let value = cell_ref.get();\n+///     })\n+/// });\n+/// ```\n+///\n+/// ## Parallels with a mutex\n+/// In some sense, `Exclusive` can be thought of as a _compile-time_ version of\n+/// a mutex, as the borrow-checker guarantees that only one `&mut` can exist\n+/// for any value. This is a parallel with the fact that\n+/// `&` and `&mut` references together can be thought of as a _compile-time_\n+/// version of a read-write lock.\n+///\n+///\n+/// [`Sync`]: core::marker::Sync\n+#[unstable(feature = \"exclusive_wrapper\", issue = \"none\")]\n+#[doc(alias = \"SyncWrapper\")]\n+#[doc(alias = \"SyncCell\")]\n+#[doc(alias = \"Unique\")]\n+// `Exclusive` can't have `PartialOrd`, `Clone`, etc. impls as they would\n+// use `&` access to the inner value, violating the `Sync` impl's safety\n+// requirements.\n+#[derive(Default)]\n+#[repr(transparent)]\n+pub struct Exclusive<T: ?Sized> {\n+    inner: T,\n+}\n+\n+// See `Exclusive`'s docs for justification.\n+#[unstable(feature = \"exclusive_wrapper\", issue = \"none\")]\n+unsafe impl<T: ?Sized> Sync for Exclusive<T> {}\n+\n+#[unstable(feature = \"exclusive_wrapper\", issue = \"none\")]\n+impl<T: ?Sized> fmt::Debug for Exclusive<T> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> Result<(), fmt::Error> {\n+        f.debug_struct(\"Exclusive\").finish_non_exhaustive()\n+    }\n+}\n+\n+impl<T: Sized> Exclusive<T> {\n+    /// Wrap a value in an `Exclusive`\n+    #[unstable(feature = \"exclusive_wrapper\", issue = \"none\")]\n+    #[must_use]\n+    pub const fn new(t: T) -> Self {\n+        Self { inner: t }\n+    }\n+\n+    /// Unwrap the value contained in the `Exclusive`\n+    #[unstable(feature = \"exclusive_wrapper\", issue = \"none\")]\n+    #[must_use]\n+    pub const fn into_inner(self) -> T {\n+        self.inner\n+    }\n+}\n+\n+impl<T: ?Sized> Exclusive<T> {\n+    /// Get exclusive access to the underlying value.\n+    #[unstable(feature = \"exclusive_wrapper\", issue = \"none\")]\n+    #[must_use]\n+    pub const fn get_mut(&mut self) -> &mut T {\n+        &mut self.inner\n+    }\n+\n+    /// Get pinned exclusive access to the underlying value.\n+    ///\n+    /// `Exclusive` is considered to _structurally pin_ the underlying\n+    /// value, which means _unpinned_ `Exclusive`s can produce _unpinned_\n+    /// access to the underlying value, but _pinned_ `Exclusive`s only\n+    /// produce _pinned_ access to the underlying value.\n+    #[unstable(feature = \"exclusive_wrapper\", issue = \"none\")]\n+    #[must_use]\n+    pub const fn get_pin_mut(self: Pin<&mut Self>) -> Pin<&mut T> {\n+        // SAFETY: `Exclusive` can only produce `&mut T` if itself is unpinned\n+        // `Pin::map_unchecked_mut` is not const, so we do this conversion manually\n+        unsafe { Pin::new_unchecked(&mut self.get_unchecked_mut().inner) }\n+    }\n+\n+    /// Build a _mutable_ references to an `Exclusive<T>` from\n+    /// a _mutable_ reference to a `T`. This allows you to skip\n+    /// building an `Exclusive` with [`Exclusive::new`].\n+    #[unstable(feature = \"exclusive_wrapper\", issue = \"none\")]\n+    #[must_use]\n+    pub const fn from_mut(r: &'_ mut T) -> &'_ mut Exclusive<T> {\n+        // SAFETY: repr is \u2265 C, so refs have the same layout; and `Exclusive` properties are `&mut`-agnostic\n+        unsafe { &mut *(r as *mut T as *mut Exclusive<T>) }\n+    }\n+\n+    /// Build a _pinned mutable_ references to an `Exclusive<T>` from\n+    /// a _pinned mutable_ reference to a `T`. This allows you to skip\n+    /// building an `Exclusive` with [`Exclusive::new`].\n+    #[unstable(feature = \"exclusive_wrapper\", issue = \"none\")]\n+    #[must_use]\n+    pub const fn from_pin_mut(r: Pin<&'_ mut T>) -> Pin<&'_ mut Exclusive<T>> {\n+        // SAFETY: `Exclusive` can only produce `&mut T` if itself is unpinned\n+        // `Pin::map_unchecked_mut` is not const, so we do this conversion manually\n+        unsafe { Pin::new_unchecked(Self::from_mut(r.get_unchecked_mut())) }\n+    }\n+}\n+\n+#[unstable(feature = \"exclusive_wrapper\", issue = \"none\")]\n+impl<T> From<T> for Exclusive<T> {\n+    fn from(t: T) -> Self {\n+        Self::new(t)\n+    }\n+}\n+\n+#[unstable(feature = \"exclusive_wrapper\", issue = \"none\")]\n+impl<T: Future + ?Sized> Future for Exclusive<T> {\n+    type Output = T::Output;\n+\n+    fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {\n+        self.get_pin_mut().poll(cx)\n+    }\n+}"}, {"sha": "88d87e8ac40ee9af698aa63a0e9012acfdc3e111", "filename": "library/core/src/sync/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/63d1c8623000782ebc1bb6ae662a10af9f067cab/library%2Fcore%2Fsrc%2Fsync%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63d1c8623000782ebc1bb6ae662a10af9f067cab/library%2Fcore%2Fsrc%2Fsync%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fsync%2Fmod.rs?ref=63d1c8623000782ebc1bb6ae662a10af9f067cab", "patch": "@@ -3,3 +3,6 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n pub mod atomic;\n+mod exclusive;\n+#[unstable(feature = \"exclusive_wrapper\", issue = \"none\")]\n+pub use exclusive::Exclusive;"}, {"sha": "f22264c2bf1e67b1f8d5fd0e4cb037b4a6f1a461", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/63d1c8623000782ebc1bb6ae662a10af9f067cab/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63d1c8623000782ebc1bb6ae662a10af9f067cab/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=63d1c8623000782ebc1bb6ae662a10af9f067cab", "patch": "@@ -269,6 +269,7 @@\n #![feature(duration_checked_float)]\n #![feature(duration_constants)]\n #![feature(exact_size_is_empty)]\n+#![feature(exclusive_wrapper)]\n #![feature(extend_one)]\n #![feature(float_minimum_maximum)]\n #![feature(hasher_prefixfree_extras)]"}, {"sha": "c70dcf7f66c5165f3db29bfc4c915624ddac38d8", "filename": "library/std/src/sync/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63d1c8623000782ebc1bb6ae662a10af9f067cab/library%2Fstd%2Fsrc%2Fsync%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63d1c8623000782ebc1bb6ae662a10af9f067cab/library%2Fstd%2Fsrc%2Fsync%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fmod.rs?ref=63d1c8623000782ebc1bb6ae662a10af9f067cab", "patch": "@@ -155,6 +155,8 @@\n pub use alloc_crate::sync::{Arc, Weak};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::sync::atomic;\n+#[unstable(feature = \"exclusive_wrapper\", issue = \"none\")]\n+pub use core::sync::Exclusive;\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::barrier::{Barrier, BarrierWaitResult};"}]}