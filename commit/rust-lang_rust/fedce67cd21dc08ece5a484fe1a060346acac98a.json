{"sha": "fedce67cd21dc08ece5a484fe1a060346acac98a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlZGNlNjdjZDIxZGMwOGVjZTVhNDg0ZmUxYTA2MDM0NmFjYWM5OGE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-03-09T10:45:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-03-09T10:45:29Z"}, "message": "Auto merge of #48326 - RalfJung:generic-bounds, r=petrochenkov\n\nWarn about ignored generic bounds in `for`\n\nThis adds a new lint to fix #42181. For consistency and to avoid code duplication, I also moved the existing \"bounds in type aliases are ignored\" here.\n\nQuestions to the reviewer:\n* Is it okay to just remove a diagnostic error code like this? Should I instead keep the warning about type aliases where it is? The old code provided a detailed explanation of what's going on when asked, that information is now lost. On the other hand, `span_warn!` seems deprecated (after this patch, it has exactly one user left!).\n* Did I miss any syntactic construct that can appear as `for` in the surface syntax? I covered function types (`for<'a> fn(...)`), generic traits (`for <'a> Fn(...)`, can appear both as bounds as as trait objects) and bounds (`for<'a> F: ...`).\n* For the sake of backwards compatibility, this adds a warning, not an error. @nikomatsakis suggested an error in https://github.com/rust-lang/rust/issues/42181#issuecomment-306924389, but I feel that can only happen in a new epoch -- right?\n\nCc @eddyb", "tree": {"sha": "2cc26079f1d4ee58c1bc38e326585013e52f7e6b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2cc26079f1d4ee58c1bc38e326585013e52f7e6b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fedce67cd21dc08ece5a484fe1a060346acac98a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fedce67cd21dc08ece5a484fe1a060346acac98a", "html_url": "https://github.com/rust-lang/rust/commit/fedce67cd21dc08ece5a484fe1a060346acac98a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fedce67cd21dc08ece5a484fe1a060346acac98a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2079a084df08c38eb4dbfc5c8de5c0245170c3d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/2079a084df08c38eb4dbfc5c8de5c0245170c3d9", "html_url": "https://github.com/rust-lang/rust/commit/2079a084df08c38eb4dbfc5c8de5c0245170c3d9"}, {"sha": "780b544a391fb2dc42d814ce8cb7e6ad3633fa39", "url": "https://api.github.com/repos/rust-lang/rust/commits/780b544a391fb2dc42d814ce8cb7e6ad3633fa39", "html_url": "https://github.com/rust-lang/rust/commit/780b544a391fb2dc42d814ce8cb7e6ad3633fa39"}], "stats": {"total": 432, "additions": 324, "deletions": 108}, "files": [{"sha": "a1381817223f19f8be7077f1056e7b3d3b464a42", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/fedce67cd21dc08ece5a484fe1a060346acac98a/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fedce67cd21dc08ece5a484fe1a060346acac98a/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=fedce67cd21dc08ece5a484fe1a060346acac98a", "patch": "@@ -824,6 +824,17 @@ impl<'a, 'tcx> hir_visit::Visitor<'tcx> for LateContext<'a, 'tcx> {\n         hir_visit::walk_generics(self, g);\n     }\n \n+    fn visit_where_predicate(&mut self, p: &'tcx hir::WherePredicate) {\n+        run_lints!(self, check_where_predicate, late_passes, p);\n+        hir_visit::walk_where_predicate(self, p);\n+    }\n+\n+    fn visit_poly_trait_ref(&mut self, t: &'tcx hir::PolyTraitRef,\n+                            m: hir::TraitBoundModifier) {\n+        run_lints!(self, check_poly_trait_ref, late_passes, t, m);\n+        hir_visit::walk_poly_trait_ref(self, t, m);\n+    }\n+\n     fn visit_trait_item(&mut self, trait_item: &'tcx hir::TraitItem) {\n         let generics = self.generics.take();\n         self.generics = Some(&trait_item.generics);\n@@ -986,6 +997,16 @@ impl<'a> ast_visit::Visitor<'a> for EarlyContext<'a> {\n         ast_visit::walk_generics(self, g);\n     }\n \n+    fn visit_where_predicate(&mut self, p: &'a ast::WherePredicate) {\n+        run_lints!(self, check_where_predicate, early_passes, p);\n+        ast_visit::walk_where_predicate(self, p);\n+    }\n+\n+    fn visit_poly_trait_ref(&mut self, t: &'a ast::PolyTraitRef, m: &'a ast::TraitBoundModifier) {\n+        run_lints!(self, check_poly_trait_ref, early_passes, t, m);\n+        ast_visit::walk_poly_trait_ref(self, t, m);\n+    }\n+\n     fn visit_trait_item(&mut self, trait_item: &'a ast::TraitItem) {\n         self.with_lint_attrs(trait_item.id, &trait_item.attrs, |cx| {\n             run_lints!(cx, check_trait_item, early_passes, trait_item);"}, {"sha": "7c103dc2721091b31e2472f1ec0f0f12ce963605", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fedce67cd21dc08ece5a484fe1a060346acac98a/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fedce67cd21dc08ece5a484fe1a060346acac98a/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=fedce67cd21dc08ece5a484fe1a060346acac98a", "patch": "@@ -181,6 +181,9 @@ pub trait LateLintPass<'a, 'tcx>: LintPass {\n     fn check_ty(&mut self, _: &LateContext<'a, 'tcx>, _: &'tcx hir::Ty) { }\n     fn check_generic_param(&mut self, _: &LateContext<'a, 'tcx>, _: &'tcx hir::GenericParam) { }\n     fn check_generics(&mut self, _: &LateContext<'a, 'tcx>, _: &'tcx hir::Generics) { }\n+    fn check_where_predicate(&mut self, _: &LateContext<'a, 'tcx>, _: &'tcx hir::WherePredicate) { }\n+    fn check_poly_trait_ref(&mut self, _: &LateContext<'a, 'tcx>, _: &'tcx hir::PolyTraitRef,\n+                            _: hir::TraitBoundModifier) { }\n     fn check_fn(&mut self,\n                 _: &LateContext<'a, 'tcx>,\n                 _: FnKind<'tcx>,\n@@ -253,6 +256,9 @@ pub trait EarlyLintPass: LintPass {\n     fn check_ty(&mut self, _: &EarlyContext, _: &ast::Ty) { }\n     fn check_generic_param(&mut self, _: &EarlyContext, _: &ast::GenericParam) { }\n     fn check_generics(&mut self, _: &EarlyContext, _: &ast::Generics) { }\n+    fn check_where_predicate(&mut self, _: &EarlyContext, _: &ast::WherePredicate) { }\n+    fn check_poly_trait_ref(&mut self, _: &EarlyContext, _: &ast::PolyTraitRef,\n+                            _: &ast::TraitBoundModifier) { }\n     fn check_fn(&mut self, _: &EarlyContext,\n         _: ast_visit::FnKind, _: &ast::FnDecl, _: Span, _: ast::NodeId) { }\n     fn check_fn_post(&mut self, _: &EarlyContext,"}, {"sha": "c6698cbd006893c7f664152d3af957dd3e7e0005", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/fedce67cd21dc08ece5a484fe1a060346acac98a/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fedce67cd21dc08ece5a484fe1a060346acac98a/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=fedce67cd21dc08ece5a484fe1a060346acac98a", "patch": "@@ -1315,3 +1315,50 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnreachablePub {\n         self.perform_lint(cx, \"item\", impl_item.id, &impl_item.vis, impl_item.span, false);\n     }\n }\n+\n+/// Lint for trait and lifetime bounds that are (accidentally) accepted by the parser, but\n+/// ignored later.\n+\n+pub struct IgnoredGenericBounds;\n+\n+declare_lint! {\n+    IGNORED_GENERIC_BOUNDS,\n+    Warn,\n+    \"these generic bounds are ignored\"\n+}\n+\n+impl LintPass for IgnoredGenericBounds {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(IGNORED_GENERIC_BOUNDS)\n+    }\n+}\n+\n+impl EarlyLintPass for IgnoredGenericBounds {\n+    fn check_item(&mut self, cx: &EarlyContext, item: &ast::Item) {\n+        let type_alias_generics = match item.node {\n+            ast::ItemKind::Ty(_, ref generics) => generics,\n+            _ => return,\n+        };\n+        // There must not be a where clause\n+        if !type_alias_generics.where_clause.predicates.is_empty() {\n+            let spans : Vec<_> = type_alias_generics.where_clause.predicates.iter()\n+                .map(|pred| pred.span()).collect();\n+            cx.span_lint(IGNORED_GENERIC_BOUNDS, spans,\n+                \"where clauses are ignored in type aliases\");\n+        }\n+        // The parameters must not have bounds\n+        for param in type_alias_generics.params.iter() {\n+            let spans : Vec<_> = match param {\n+                &ast::GenericParam::Lifetime(ref l) => l.bounds.iter().map(|b| b.span).collect(),\n+                &ast::GenericParam::Type(ref ty) => ty.bounds.iter().map(|b| b.span()).collect(),\n+            };\n+            if !spans.is_empty() {\n+                cx.span_lint(\n+                    IGNORED_GENERIC_BOUNDS,\n+                    spans,\n+                    \"bounds on generic parameters are ignored in type aliases\",\n+                );\n+            }\n+        }\n+    }\n+}"}, {"sha": "779aa3a9037ca8d955977f0ed32bb827bb9a31cd", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fedce67cd21dc08ece5a484fe1a060346acac98a/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fedce67cd21dc08ece5a484fe1a060346acac98a/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=fedce67cd21dc08ece5a484fe1a060346acac98a", "patch": "@@ -109,6 +109,7 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n                        UnusedImportBraces,\n                        AnonymousParameters,\n                        UnusedDocComment,\n+                       IgnoredGenericBounds,\n                        );\n \n     add_early_builtin_with_new!(sess,"}, {"sha": "55d00f92e4dac0b1d235fa3bb9f72b6996e5a927", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/fedce67cd21dc08ece5a484fe1a060346acac98a/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fedce67cd21dc08ece5a484fe1a060346acac98a/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=fedce67cd21dc08ece5a484fe1a060346acac98a", "patch": "@@ -136,6 +136,33 @@ impl<'a> AstValidator<'a> {\n                                                          in patterns\")\n         }\n     }\n+\n+    fn check_late_bound_lifetime_defs(&self, params: &Vec<GenericParam>) {\n+        // Check: Only lifetime parameters\n+        let non_lifetime_param_spans : Vec<_> = params.iter()\n+            .filter_map(|param| match *param {\n+                GenericParam::Lifetime(_) => None,\n+                GenericParam::Type(ref t) => Some(t.span),\n+            }).collect();\n+        if !non_lifetime_param_spans.is_empty() {\n+            self.err_handler().span_err(non_lifetime_param_spans,\n+                \"only lifetime parameters can be used in this context\");\n+        }\n+\n+        // Check: No bounds on lifetime parameters\n+        for param in params.iter() {\n+            match *param {\n+                GenericParam::Lifetime(ref l) => {\n+                    if !l.bounds.is_empty() {\n+                        let spans : Vec<_> = l.bounds.iter().map(|b| b.span).collect();\n+                        self.err_handler().span_err(spans,\n+                            \"lifetime bounds cannot be used in this context\");\n+                    }\n+                }\n+                GenericParam::Type(_) => {}\n+            }\n+        }\n+    }\n }\n \n impl<'a> Visitor<'a> for AstValidator<'a> {\n@@ -157,6 +184,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                     struct_span_err!(self.session, span, E0561,\n                                      \"patterns aren't allowed in function pointer types\").emit();\n                 });\n+                self.check_late_bound_lifetime_defs(&bfty.generic_params);\n             }\n             TyKind::TraitObject(ref bounds, ..) => {\n                 let mut any_lifetime_bounds = false;\n@@ -417,6 +445,19 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n \n         visit::walk_pat(self, pat)\n     }\n+\n+    fn visit_where_predicate(&mut self, p: &'a WherePredicate) {\n+        if let &WherePredicate::BoundPredicate(ref bound_predicate) = p {\n+            // A type binding, eg `for<'c> Foo: Send+Clone+'c`\n+            self.check_late_bound_lifetime_defs(&bound_predicate.bound_generic_params);\n+        }\n+        visit::walk_where_predicate(self, p);\n+    }\n+\n+    fn visit_poly_trait_ref(&mut self, t: &'a PolyTraitRef, m: &'a TraitBoundModifier) {\n+        self.check_late_bound_lifetime_defs(&t.bound_generic_params);\n+        visit::walk_poly_trait_ref(self, t, m);\n+    }\n }\n \n // Bans nested `impl Trait`, e.g. `impl Into<impl Debug>`."}, {"sha": "a17b35dec42d7c2f75683b7ec789a3ee6adf0a66", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 40, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/fedce67cd21dc08ece5a484fe1a060346acac98a/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fedce67cd21dc08ece5a484fe1a060346acac98a/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=fedce67cd21dc08ece5a484fe1a060346acac98a", "patch": "@@ -356,39 +356,6 @@ fn is_param<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     }\n }\n \n-fn ensure_no_param_bounds(tcx: TyCtxt,\n-                          span: Span,\n-                          generics: &hir::Generics,\n-                          thing: &'static str) {\n-    let mut warn = false;\n-\n-    for ty_param in generics.ty_params() {\n-        if !ty_param.bounds.is_empty() {\n-            warn = true;\n-        }\n-    }\n-\n-    for lft_param in generics.lifetimes() {\n-        if !lft_param.bounds.is_empty() {\n-            warn = true;\n-        }\n-    }\n-\n-    if !generics.where_clause.predicates.is_empty() {\n-        warn = true;\n-    }\n-\n-    if warn {\n-        // According to accepted RFC #XXX, we should\n-        // eventually accept these, but it will not be\n-        // part of this PR. Still, convert to warning to\n-        // make bootstrapping easier.\n-        span_warn!(tcx.sess, span, E0122,\n-                   \"generic bounds are ignored in {}\",\n-                   thing);\n-    }\n-}\n-\n fn convert_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, item_id: ast::NodeId) {\n     let it = tcx.hir.expect_item(item_id);\n     debug!(\"convert: item {} with id {}\", it.name, it.id);\n@@ -449,13 +416,7 @@ fn convert_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, item_id: ast::NodeId) {\n                 convert_variant_ctor(tcx, struct_def.id());\n             }\n         },\n-        hir::ItemTy(_, ref generics) => {\n-            ensure_no_param_bounds(tcx, it.span, generics, \"type aliases\");\n-            tcx.generics_of(def_id);\n-            tcx.type_of(def_id);\n-            tcx.predicates_of(def_id);\n-        }\n-        hir::ItemStatic(..) | hir::ItemConst(..) | hir::ItemFn(..) => {\n+        hir::ItemTy(..) | hir::ItemStatic(..) | hir::ItemConst(..) | hir::ItemFn(..) => {\n             tcx.generics_of(def_id);\n             tcx.type_of(def_id);\n             tcx.predicates_of(def_id);"}, {"sha": "24044fd2d721840d237ea6a744787fb93f9423a5", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 20, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/fedce67cd21dc08ece5a484fe1a060346acac98a/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fedce67cd21dc08ece5a484fe1a060346acac98a/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=fedce67cd21dc08ece5a484fe1a060346acac98a", "patch": "@@ -1489,26 +1489,6 @@ static BAR: _ = \"test\"; // error, explicitly write out the type instead\n ```\n \"##,\n \n-E0122: r##\"\n-An attempt was made to add a generic constraint to a type alias. This constraint\n-is entirely ignored. For backwards compatibility, Rust still allows this with a\n-warning. Consider the example below:\n-\n-```\n-trait Foo{}\n-\n-type MyType<R: Foo> = (R, ());\n-\n-fn main() {\n-    let t: MyType<u32>;\n-}\n-```\n-\n-We're able to declare a variable of type `MyType<u32>`, despite the fact that\n-`u32` does not implement `Foo`. As a result, one should avoid using generic\n-constraints in concert with type aliases.\n-\"##,\n-\n E0124: r##\"\n You declared two fields of a struct with the same name. Erroneous code\n example:\n@@ -4815,6 +4795,7 @@ register_diagnostics! {\n //  E0086,\n //  E0103,\n //  E0104,\n+//  E0122, // bounds in type aliases are ignored, turned into proper lint\n //  E0123,\n //  E0127,\n //  E0129,"}, {"sha": "8b3a7164cccb6779d679b7f2c8daff76e5ce37cb", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/fedce67cd21dc08ece5a484fe1a060346acac98a/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fedce67cd21dc08ece5a484fe1a060346acac98a/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=fedce67cd21dc08ece5a484fe1a060346acac98a", "patch": "@@ -294,6 +294,15 @@ pub enum TyParamBound {\n     RegionTyParamBound(Lifetime)\n }\n \n+impl TyParamBound {\n+    pub fn span(&self) -> Span {\n+        match self {\n+            &TraitTyParamBound(ref t, ..) => t.span,\n+            &RegionTyParamBound(ref l) => l.span,\n+        }\n+    }\n+}\n+\n /// A modifier on a bound, currently this is only used for `?Sized`, where the\n /// modifier is `Maybe`. Negative bounds should also be handled here.\n #[derive(Copy, Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n@@ -404,6 +413,16 @@ pub enum WherePredicate {\n     EqPredicate(WhereEqPredicate),\n }\n \n+impl WherePredicate {\n+    pub fn span(&self) -> Span {\n+        match self {\n+            &WherePredicate::BoundPredicate(ref p) => p.span,\n+            &WherePredicate::RegionPredicate(ref p) => p.span,\n+            &WherePredicate::EqPredicate(ref p) => p.span,\n+        }\n+    }\n+}\n+\n /// A type bound.\n ///\n /// E.g. `for<'c> Foo: Send+Clone+'c`"}, {"sha": "f5aa01fb034597b7e2a2660fec3914702fc2080b", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/fedce67cd21dc08ece5a484fe1a060346acac98a/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fedce67cd21dc08ece5a484fe1a060346acac98a/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=fedce67cd21dc08ece5a484fe1a060346acac98a", "patch": "@@ -4951,6 +4951,7 @@ impl<'a> Parser<'a> {\n                         }\n                     ));\n                 // FIXME: Decide what should be used here, `=` or `==`.\n+                // FIXME: We are just dropping the binders in lifetime_defs on the floor here.\n                 } else if self.eat(&token::Eq) || self.eat(&token::EqEq) {\n                     let rhs_ty = self.parse_ty()?;\n                     where_clause.predicates.push(ast::WherePredicate::EqPredicate(\n@@ -5608,18 +5609,8 @@ impl<'a> Parser<'a> {\n             self.expect_lt()?;\n             let params = self.parse_generic_params()?;\n             self.expect_gt()?;\n-\n-            let first_non_lifetime_param_span = params.iter()\n-                .filter_map(|param| match *param {\n-                    ast::GenericParam::Lifetime(_) => None,\n-                    ast::GenericParam::Type(ref t) => Some(t.span),\n-                })\n-                .next();\n-\n-            if let Some(span) = first_non_lifetime_param_span {\n-                self.span_err(span, \"only lifetime parameters can be used in this context\");\n-            }\n-\n+            // We rely on AST validation to rule out invalid cases: There must not be type\n+            // parameters, and the lifetime parameters must not have bounds.\n             Ok(params)\n         } else {\n             Ok(Vec::new())"}, {"sha": "5bfaa6c54fa9f2c117f8950da76486c9ffc026f8", "filename": "src/test/compile-fail/bounds-lifetime.rs", "status": "renamed", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fedce67cd21dc08ece5a484fe1a060346acac98a/src%2Ftest%2Fcompile-fail%2Fbounds-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fedce67cd21dc08ece5a484fe1a060346acac98a/src%2Ftest%2Fcompile-fail%2Fbounds-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbounds-lifetime.rs?ref=fedce67cd21dc08ece5a484fe1a060346acac98a", "patch": "@@ -8,6 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-type Foo<T: std::ops::Add> = T; //~ WARNING E0122\n+type A = for<'b, 'a: 'b> fn(); //~ ERROR lifetime bounds cannot be used in this context\n+type B = for<'b, 'a: 'b,> fn(); //~ ERROR lifetime bounds cannot be used in this context\n+type C = for<'b, 'a: 'b +> fn(); //~ ERROR lifetime bounds cannot be used in this context\n+type D = for<'a, T> fn(); //~ ERROR only lifetime parameters can be used in this context\n+type E = for<T> Fn(); //~ ERROR only lifetime parameters can be used in this context\n \n-type Bar<T> where T: std::ops::Add = T; //~ WARNING E0122\n+fn main() {}", "previous_filename": "src/test/compile-fail/issue-39122.rs"}, {"sha": "ceaa371623223647c6eed876b18004a785f465a1", "filename": "src/test/compile-fail/dst-bad-assign-3.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fedce67cd21dc08ece5a484fe1a060346acac98a/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fedce67cd21dc08ece5a484fe1a060346acac98a/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign-3.rs?ref=fedce67cd21dc08ece5a484fe1a060346acac98a", "patch": "@@ -12,8 +12,7 @@\n \n #![feature(unsized_tuple_coercion)]\n \n-type Fat<T: ?Sized> = (isize, &'static str, T);\n-//~^ WARNING bounds are ignored\n+type Fat<T> = (isize, &'static str, T);\n \n #[derive(PartialEq,Eq)]\n struct Bar;"}, {"sha": "0f30e2461cf3be6849d6efe8d871ee28ac75e00d", "filename": "src/test/compile-fail/issue-17994.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fedce67cd21dc08ece5a484fe1a060346acac98a/src%2Ftest%2Fcompile-fail%2Fissue-17994.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fedce67cd21dc08ece5a484fe1a060346acac98a/src%2Ftest%2Fcompile-fail%2Fissue-17994.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17994.rs?ref=fedce67cd21dc08ece5a484fe1a060346acac98a", "patch": "@@ -10,5 +10,5 @@\n \n trait Tr {}\n type Huh<T> where T: Tr = isize; //~  ERROR type parameter `T` is unused\n-                                 //~| WARNING E0122\n+                                 //~| WARNING where clauses are ignored in type aliases\n fn main() {}"}, {"sha": "670706b7a9adf8af4ec82139d1a24a31a899e450", "filename": "src/test/compile-fail/issue-23046.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fedce67cd21dc08ece5a484fe1a060346acac98a/src%2Ftest%2Fcompile-fail%2Fissue-23046.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fedce67cd21dc08ece5a484fe1a060346acac98a/src%2Ftest%2Fcompile-fail%2Fissue-23046.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-23046.rs?ref=fedce67cd21dc08ece5a484fe1a060346acac98a", "patch": "@@ -10,15 +10,15 @@\n \n pub enum Expr<'var, VAR> {\n     Let(Box<Expr<'var, VAR>>,\n-        Box<for<'v: 'var> Fn(Expr<'v, VAR>) -> Expr<'v, VAR> + 'var>)\n+        Box<for<'v> Fn(Expr<'v, VAR>) -> Expr<'v, VAR> + 'var>)\n }\n \n pub fn add<'var, VAR>\n                       (a: Expr<'var, VAR>, b: Expr<'var, VAR>) -> Expr<'var, VAR> {\n     loop {}\n }\n \n-pub fn let_<'var, VAR, F: for<'v: 'var> Fn(Expr<'v, VAR>) -> Expr<'v, VAR>>\n+pub fn let_<'var, VAR, F: for<'v> Fn(Expr<'v, VAR>) -> Expr<'v, VAR>>\n                        (a: Expr<'var, VAR>, b: F) -> Expr<'var, VAR> {\n     loop {}\n }"}, {"sha": "cc9eed7e65426238667185a8a693556d2183b4e4", "filename": "src/test/compile-fail/private-in-public-warn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fedce67cd21dc08ece5a484fe1a060346acac98a/src%2Ftest%2Fcompile-fail%2Fprivate-in-public-warn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fedce67cd21dc08ece5a484fe1a060346acac98a/src%2Ftest%2Fcompile-fail%2Fprivate-in-public-warn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-in-public-warn.rs?ref=fedce67cd21dc08ece5a484fe1a060346acac98a", "patch": "@@ -58,7 +58,7 @@ mod traits {\n     pub trait PubTr {}\n \n     pub type Alias<T: PrivTr> = T; //~ ERROR private trait `traits::PrivTr` in public interface\n-    //~^ WARN bounds are ignored in type aliases\n+    //~^ WARNING bounds on generic parameters are ignored\n     //~| WARNING hard error\n     pub trait Tr1: PrivTr {} //~ ERROR private trait `traits::PrivTr` in public interface\n     //~^ WARNING hard error\n@@ -85,7 +85,7 @@ mod traits_where {\n     pub type Alias<T> where T: PrivTr = T;\n         //~^ ERROR private trait `traits_where::PrivTr` in public interface\n         //~| WARNING hard error\n-        //~| WARNING E0122\n+        //~| WARNING where clauses are ignored in type aliases\n     pub trait Tr2<T> where T: PrivTr {}\n         //~^ ERROR private trait `traits_where::PrivTr` in public interface\n         //~| WARNING hard error"}, {"sha": "579fa378a1c2485aee40872d95a5a22ab8ef671a", "filename": "src/test/compile-fail/rfc1623.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fedce67cd21dc08ece5a484fe1a060346acac98a/src%2Ftest%2Fcompile-fail%2Frfc1623.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fedce67cd21dc08ece5a484fe1a060346acac98a/src%2Ftest%2Fcompile-fail%2Frfc1623.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frfc1623.rs?ref=fedce67cd21dc08ece5a484fe1a060346acac98a", "patch": "@@ -22,7 +22,7 @@ static NON_ELIDABLE_FN: &fn(&u8, &u8) -> &u8 =\n struct SomeStruct<'x, 'y, 'z: 'x> {\n     foo: &'x Foo<'z>,\n     bar: &'x Bar<'z>,\n-    f: &'y for<'a, 'b: 'a> Fn(&'a Foo<'b>) -> &'a Bar<'b>,\n+    f: &'y for<'a, 'b> Fn(&'a Foo<'b>) -> &'a Bar<'b>,\n }\n \n fn id<T>(t: T) -> T {"}, {"sha": "88db205310ce156027f2f7de63456197f14450d2", "filename": "src/test/parse-fail/bounds-lifetime.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fedce67cd21dc08ece5a484fe1a060346acac98a/src%2Ftest%2Fparse-fail%2Fbounds-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fedce67cd21dc08ece5a484fe1a060346acac98a/src%2Ftest%2Fparse-fail%2Fbounds-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fbounds-lifetime.rs?ref=fedce67cd21dc08ece5a484fe1a060346acac98a", "patch": "@@ -8,17 +8,16 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: -Z parse-only -Z continue-parse-after-error\n+// compile-flags: -Z parse-only\n \n-type A = for<'a: 'b + 'c> fn(); // OK\n-type A = for<'a: 'b,> fn(); // OK\n type A = for<'a:> fn(); // OK\n type A = for<'a:,> fn(); // OK\n type A = for<'a> fn(); // OK\n type A = for<> fn(); // OK\n-type A = for<'a: 'b +> fn(); // OK\n-\n-type A = for<'a, T> fn(); //~ ERROR only lifetime parameters can be used in this context\n+type A = for<'a: 'b + 'c> fn(); // OK (rejected later by ast_validation)\n+type A = for<'a: 'b,> fn(); // OK(rejected later by ast_validation)\n+type A = for<'a: 'b +> fn(); // OK (rejected later by ast_validation)\n+type A = for<'a, T> fn(); // OK (rejected later by ast_validation)\n type A = for<,> fn(); //~ ERROR expected one of `>`, identifier, or lifetime, found `,`\n \n fn main() {}"}, {"sha": "0ebe7fde0a63f36f16e730ec2228e01941dc02b2", "filename": "src/test/parse-fail/bounds-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fedce67cd21dc08ece5a484fe1a060346acac98a/src%2Ftest%2Fparse-fail%2Fbounds-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fedce67cd21dc08ece5a484fe1a060346acac98a/src%2Ftest%2Fparse-fail%2Fbounds-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fbounds-type.rs?ref=fedce67cd21dc08ece5a484fe1a060346acac98a", "patch": "@@ -15,7 +15,7 @@ struct S<\n     T: Tr + 'a, // OK\n     T: 'a, // OK\n     T:, // OK\n-    T: ?for<'a: 'b + 'c> Trait, // OK\n+    T: ?for<'a> Trait, // OK\n     T: Tr +, // OK\n     T: ?'a, //~ ERROR `?` may only modify trait bounds, not lifetime bounds\n >;"}, {"sha": "fcad23926fc0caf45b2a085f3e3194ac2129badf", "filename": "src/test/run-pass/impl-trait/lifetimes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fedce67cd21dc08ece5a484fe1a060346acac98a/src%2Ftest%2Frun-pass%2Fimpl-trait%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fedce67cd21dc08ece5a484fe1a060346acac98a/src%2Ftest%2Frun-pass%2Fimpl-trait%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimpl-trait%2Flifetimes.rs?ref=fedce67cd21dc08ece5a484fe1a060346acac98a", "patch": "@@ -69,8 +69,8 @@ fn foo(x: &impl Debug) -> &impl Debug { x }\n fn foo_explicit_lifetime<'a>(x: &'a impl Debug) -> &'a impl Debug { x }\n fn foo_explicit_arg<T: Debug>(x: &T) -> &impl Debug { x }\n \n-fn mixed_lifetimes<'a>() -> impl for<'b: 'a> Fn(&'b u32) { |_| () }\n-fn mixed_as_static() -> impl Fn(&'static u32) { mixed_lifetimes() }\n+fn mixed_lifetimes<'a>() -> impl for<'b> Fn(&'b &'a u32) { |_| () }\n+fn mixed_as_static() -> impl Fn(&'static &'static u32) { mixed_lifetimes() }\n \n trait MultiRegionTrait<'a, 'b>: Debug {}\n "}, {"sha": "94bcdec945035033d8ca36a9ca977bc02c504b95", "filename": "src/test/ui/param-bounds-ignored.rs", "status": "modified", "additions": 75, "deletions": 5, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/fedce67cd21dc08ece5a484fe1a060346acac98a/src%2Ftest%2Fui%2Fparam-bounds-ignored.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fedce67cd21dc08ece5a484fe1a060346acac98a/src%2Ftest%2Fui%2Fparam-bounds-ignored.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparam-bounds-ignored.rs?ref=fedce67cd21dc08ece5a484fe1a060346acac98a", "patch": "@@ -8,13 +8,18 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// must-compile-successfully\n+#![allow(dead_code, non_camel_case_types)]\n \n use std::rc::Rc;\n \n-type SVec<T: Send> = Vec<T>;\n-type VVec<'b, 'a: 'b> = Vec<&'a i32>;\n-type WVec<'b, T: 'b> = Vec<T>;\n+type SVec<T: Send+Send> = Vec<T>;\n+//~^ WARN bounds on generic parameters are ignored in type aliases\n+type VVec<'b, 'a: 'b+'b> = Vec<&'a i32>;\n+//~^ WARN bounds on generic parameters are ignored in type aliases\n+type WVec<'b, T: 'b+'b> = Vec<T>;\n+//~^ WARN bounds on generic parameters are ignored in type aliases\n+type W2Vec<'b, T> where T: 'b, T: 'b = Vec<T>;\n+//~^ WARN where clauses are ignored in type aliases\n \n fn foo<'a>(y: &'a i32) {\n     // If the bounds above would matter, the code below would be rejected.\n@@ -26,8 +31,73 @@ fn foo<'a>(y: &'a i32) {\n \n     let mut x : WVec<'static, & 'a i32> = Vec::new();\n     x.push(y);\n+\n+    let mut x : W2Vec<'static, & 'a i32> = Vec::new();\n+    x.push(y);\n+}\n+\n+fn bar1<'a, 'b>(\n+    x: &'a i32,\n+    y: &'b i32,\n+    f: for<'xa, 'xb: 'xa+'xa> fn(&'xa i32, &'xb i32) -> &'xa i32)\n+    //~^ ERROR lifetime bounds cannot be used in this context\n+{\n+    // If the bound in f's type would matter, the call below would (have to)\n+    // be rejected.\n+    f(x, y);\n }\n \n+fn bar2<'a, 'b, F: for<'xa, 'xb: 'xa> Fn(&'xa i32, &'xb i32) -> &'xa i32>(\n+    //~^ ERROR lifetime bounds cannot be used in this context\n+    x: &'a i32,\n+    y: &'b i32,\n+    f: F)\n+{\n+    // If the bound in f's type would matter, the call below would (have to)\n+    // be rejected.\n+    f(x, y);\n+}\n+\n+fn bar3<'a, 'b, F>(\n+    x: &'a i32,\n+    y: &'b i32,\n+    f: F)\n+    where F: for<'xa, 'xb: 'xa> Fn(&'xa i32, &'xb i32) -> &'xa i32\n+    //~^ ERROR lifetime bounds cannot be used in this context\n+{\n+    // If the bound in f's type would matter, the call below would (have to)\n+    // be rejected.\n+    f(x, y);\n+}\n+\n+fn bar4<'a, 'b, F>(\n+    x: &'a i32,\n+    y: &'b i32,\n+    f: F)\n+    where for<'xa, 'xb: 'xa> F: Fn(&'xa i32, &'xb i32) -> &'xa i32\n+    //~^ ERROR lifetime bounds cannot be used in this context\n+{\n+    // If the bound in f's type would matter, the call below would (have to)\n+    // be rejected.\n+    f(x, y);\n+}\n+\n+struct S1<F: for<'xa, 'xb: 'xa> Fn(&'xa i32, &'xb i32) -> &'xa i32>(F);\n+//~^ ERROR lifetime bounds cannot be used in this context\n+struct S2<F>(F) where F: for<'xa, 'xb: 'xa> Fn(&'xa i32, &'xb i32) -> &'xa i32;\n+//~^ ERROR lifetime bounds cannot be used in this context\n+struct S3<F>(F) where for<'xa, 'xb: 'xa> F: Fn(&'xa i32, &'xb i32) -> &'xa i32;\n+//~^ ERROR lifetime bounds cannot be used in this context\n+\n+struct S_fnty(for<'xa, 'xb: 'xa> fn(&'xa i32, &'xb i32) -> &'xa i32);\n+//~^ ERROR lifetime bounds cannot be used in this context\n+\n+type T1 = Box<for<'xa, 'xb: 'xa> Fn(&'xa i32, &'xb i32) -> &'xa i32>;\n+//~^ ERROR lifetime bounds cannot be used in this context\n+\n fn main() {\n-    foo(&42);\n+    let _ : Option<for<'xa, 'xb: 'xa> fn(&'xa i32, &'xb i32) -> &'xa i32> = None;\n+    //~^ ERROR lifetime bounds cannot be used in this context\n+    let _ : Option<Box<for<'xa, 'xb: 'xa> Fn(&'xa i32, &'xb i32) -> &'xa i32>> = None;\n+    //~^ ERROR lifetime bounds cannot be used in this context\n }"}, {"sha": "657fec54f9608ac415c0ccf8bbf58eac196d5eae", "filename": "src/test/ui/param-bounds-ignored.stderr", "status": "modified", "additions": 88, "deletions": 12, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/fedce67cd21dc08ece5a484fe1a060346acac98a/src%2Ftest%2Fui%2Fparam-bounds-ignored.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fedce67cd21dc08ece5a484fe1a060346acac98a/src%2Ftest%2Fui%2Fparam-bounds-ignored.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparam-bounds-ignored.stderr?ref=fedce67cd21dc08ece5a484fe1a060346acac98a", "patch": "@@ -1,18 +1,94 @@\n-warning[E0122]: generic bounds are ignored in type aliases\n-  --> $DIR/param-bounds-ignored.rs:15:1\n+error: lifetime bounds cannot be used in this context\n+  --> $DIR/param-bounds-ignored.rs:42:22\n    |\n-LL | type SVec<T: Send> = Vec<T>;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     f: for<'xa, 'xb: 'xa+'xa> fn(&'xa i32, &'xb i32) -> &'xa i32)\n+   |                      ^^^ ^^^\n \n-warning[E0122]: generic bounds are ignored in type aliases\n-  --> $DIR/param-bounds-ignored.rs:16:1\n+error: lifetime bounds cannot be used in this context\n+  --> $DIR/param-bounds-ignored.rs:50:34\n    |\n-LL | type VVec<'b, 'a: 'b> = Vec<&'a i32>;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | fn bar2<'a, 'b, F: for<'xa, 'xb: 'xa> Fn(&'xa i32, &'xb i32) -> &'xa i32>(\n+   |                                  ^^^\n \n-warning[E0122]: generic bounds are ignored in type aliases\n-  --> $DIR/param-bounds-ignored.rs:17:1\n+error: lifetime bounds cannot be used in this context\n+  --> $DIR/param-bounds-ignored.rs:65:28\n    |\n-LL | type WVec<'b, T: 'b> = Vec<T>;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     where F: for<'xa, 'xb: 'xa> Fn(&'xa i32, &'xb i32) -> &'xa i32\n+   |                            ^^^\n+\n+error: lifetime bounds cannot be used in this context\n+  --> $DIR/param-bounds-ignored.rs:77:25\n+   |\n+LL |     where for<'xa, 'xb: 'xa> F: Fn(&'xa i32, &'xb i32) -> &'xa i32\n+   |                         ^^^\n+\n+error: lifetime bounds cannot be used in this context\n+  --> $DIR/param-bounds-ignored.rs:85:28\n+   |\n+LL | struct S1<F: for<'xa, 'xb: 'xa> Fn(&'xa i32, &'xb i32) -> &'xa i32>(F);\n+   |                            ^^^\n+\n+error: lifetime bounds cannot be used in this context\n+  --> $DIR/param-bounds-ignored.rs:87:40\n+   |\n+LL | struct S2<F>(F) where F: for<'xa, 'xb: 'xa> Fn(&'xa i32, &'xb i32) -> &'xa i32;\n+   |                                        ^^^\n+\n+error: lifetime bounds cannot be used in this context\n+  --> $DIR/param-bounds-ignored.rs:89:37\n+   |\n+LL | struct S3<F>(F) where for<'xa, 'xb: 'xa> F: Fn(&'xa i32, &'xb i32) -> &'xa i32;\n+   |                                     ^^^\n+\n+error: lifetime bounds cannot be used in this context\n+  --> $DIR/param-bounds-ignored.rs:92:29\n+   |\n+LL | struct S_fnty(for<'xa, 'xb: 'xa> fn(&'xa i32, &'xb i32) -> &'xa i32);\n+   |                             ^^^\n+\n+error: lifetime bounds cannot be used in this context\n+  --> $DIR/param-bounds-ignored.rs:95:29\n+   |\n+LL | type T1 = Box<for<'xa, 'xb: 'xa> Fn(&'xa i32, &'xb i32) -> &'xa i32>;\n+   |                             ^^^\n+\n+error: lifetime bounds cannot be used in this context\n+  --> $DIR/param-bounds-ignored.rs:99:34\n+   |\n+LL |     let _ : Option<for<'xa, 'xb: 'xa> fn(&'xa i32, &'xb i32) -> &'xa i32> = None;\n+   |                                  ^^^\n+\n+error: lifetime bounds cannot be used in this context\n+  --> $DIR/param-bounds-ignored.rs:101:38\n+   |\n+LL |     let _ : Option<Box<for<'xa, 'xb: 'xa> Fn(&'xa i32, &'xb i32) -> &'xa i32>> = None;\n+   |                                      ^^^\n+\n+warning: bounds on generic parameters are ignored in type aliases\n+  --> $DIR/param-bounds-ignored.rs:15:14\n+   |\n+LL | type SVec<T: Send+Send> = Vec<T>;\n+   |              ^^^^ ^^^^\n+   |\n+   = note: #[warn(ignored_generic_bounds)] on by default\n+\n+warning: bounds on generic parameters are ignored in type aliases\n+  --> $DIR/param-bounds-ignored.rs:17:19\n+   |\n+LL | type VVec<'b, 'a: 'b+'b> = Vec<&'a i32>;\n+   |                   ^^ ^^\n+\n+warning: bounds on generic parameters are ignored in type aliases\n+  --> $DIR/param-bounds-ignored.rs:19:18\n+   |\n+LL | type WVec<'b, T: 'b+'b> = Vec<T>;\n+   |                  ^^ ^^\n+\n+warning: where clauses are ignored in type aliases\n+  --> $DIR/param-bounds-ignored.rs:21:25\n+   |\n+LL | type W2Vec<'b, T> where T: 'b, T: 'b = Vec<T>;\n+   |                         ^^^^^  ^^^^^\n+\n+error: aborting due to 11 previous errors\n "}]}