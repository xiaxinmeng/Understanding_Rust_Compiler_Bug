{"sha": "2bb8fca18215298487a8684a132da828fdb5a751", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiYjhmY2ExODIxNTI5ODQ4N2E4Njg0YTEzMmRhODI4ZmRiNWE3NTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-23T13:46:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-23T13:46:14Z"}, "message": "Auto merge of #44058 - frewsxcv:rollup, r=frewsxcv\n\nRollup of 8 pull requests\n\n- Successful merges: #43631, #43977, #43983, #44016, #44039, #44043, #44047, #44054\n- Failed merges:", "tree": {"sha": "85c998b7c0ca6f5f97226790c95650e843566882", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/85c998b7c0ca6f5f97226790c95650e843566882"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2bb8fca18215298487a8684a132da828fdb5a751", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2bb8fca18215298487a8684a132da828fdb5a751", "html_url": "https://github.com/rust-lang/rust/commit/2bb8fca18215298487a8684a132da828fdb5a751", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2bb8fca18215298487a8684a132da828fdb5a751/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3f0ee9a7b17d522bfc6385f841d040445730f28", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3f0ee9a7b17d522bfc6385f841d040445730f28", "html_url": "https://github.com/rust-lang/rust/commit/a3f0ee9a7b17d522bfc6385f841d040445730f28"}, {"sha": "96efcdf0657004e48a279a469c42fe3097b2e8be", "url": "https://api.github.com/repos/rust-lang/rust/commits/96efcdf0657004e48a279a469c42fe3097b2e8be", "html_url": "https://github.com/rust-lang/rust/commit/96efcdf0657004e48a279a469c42fe3097b2e8be"}], "stats": {"total": 48, "additions": 30, "deletions": 18}, "files": [{"sha": "78a9f509bbcb4c79b37608963b241f748b8aa64b", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2bb8fca18215298487a8684a132da828fdb5a751/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/2bb8fca18215298487a8684a132da828fdb5a751/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=2bb8fca18215298487a8684a132da828fdb5a751", "patch": "@@ -135,7 +135,7 @@ Windows build triples are:\n     - `i686-pc-windows-msvc`\n     - `x86_64-pc-windows-msvc`\n \n-The build triple can be specified by either specifying `--build=ABI` when\n+The build triple can be specified by either specifying `--build=<triple>` when\n invoking `x.py` commands, or by copying the `config.toml` file (as described\n in Building From Source), and modifying the `build` option under the `[build]`\n section."}, {"sha": "38665b403d6abdf65b96217fe5f825dd7ed5ec8f", "filename": "src/libproc_macro/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2bb8fca18215298487a8684a132da828fdb5a751/src%2Flibproc_macro%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bb8fca18215298487a8684a132da828fdb5a751/src%2Flibproc_macro%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Flib.rs?ref=2bb8fca18215298487a8684a132da828fdb5a751", "patch": "@@ -246,9 +246,9 @@ pub enum TokenNode {\n pub enum Delimiter {\n     /// `( ... )`\n     Parenthesis,\n-    /// `[ ... ]`\n-    Brace,\n     /// `{ ... }`\n+    Brace,\n+    /// `[ ... ]`\n     Bracket,\n     /// An implicit delimiter, e.g. `$var`, where $var is  `...`.\n     None,"}, {"sha": "26a64f6cd2245620d8d4d66220fa0c9e516b7f70", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2bb8fca18215298487a8684a132da828fdb5a751/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/2bb8fca18215298487a8684a132da828fdb5a751/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=2bb8fca18215298487a8684a132da828fdb5a751", "patch": "@@ -126,6 +126,10 @@ p {\n \tmargin: 0 0 .6em 0;\n }\n \n+summary {\n+\toutline: none;\n+}\n+\n code, pre {\n \tfont-family: \"Source Code Pro\", Menlo, Monaco, Consolas, \"DejaVu Sans Mono\", Inconsolata, monospace;\n \twhite-space: pre-wrap;"}, {"sha": "30495f297453d33e7c62bfa21b591c27f36d75a5", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2bb8fca18215298487a8684a132da828fdb5a751/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bb8fca18215298487a8684a132da828fdb5a751/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=2bb8fca18215298487a8684a132da828fdb5a751", "patch": "@@ -81,7 +81,7 @@\n //! Note the documentation for the primitives [`str`] and [`[T]`][slice] (also\n //! called 'slice'). Many method calls on [`String`] and [`Vec<T>`] are actually\n //! calls to methods on [`str`] and [`[T]`][slice] respectively, via [deref\n-//! coercions].\n+//! coercions][deref-coercions].\n //!\n //! Third, the standard library defines [The Rust Prelude], a small collection\n //! of items - mostly traits - that are imported into every module of every\n@@ -203,7 +203,7 @@\n //! [`use`]: ../book/first-edition/crates-and-modules.html#importing-modules-with-use\n //! [crate root]: ../book/first-edition/crates-and-modules.html#basic-terminology-crates-and-modules\n //! [crates.io]: https://crates.io\n-//! [deref coercions]: ../book/first-edition/deref-coercions.html\n+//! [deref-coercions]: ../book/second-edition/ch15-02-deref.html#implicit-deref-coercions-with-functions-and-methods\n //! [files]: fs/struct.File.html\n //! [multithreading]: thread/index.html\n //! [other]: #what-is-in-the-standard-library-documentation"}, {"sha": "830b9dc475d6daf534bd0e4e803aa379f9bc389a", "filename": "src/libstd/path.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2bb8fca18215298487a8684a132da828fdb5a751/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bb8fca18215298487a8684a132da828fdb5a751/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=2bb8fca18215298487a8684a132da828fdb5a751", "patch": "@@ -323,6 +323,11 @@ unsafe fn u8_slice_as_os_str(s: &[u8]) -> &OsStr {\n     mem::transmute(s)\n }\n \n+// Detect scheme on Redox\n+fn has_redox_scheme(s: &[u8]) -> bool {\n+    cfg!(target_os = \"redox\") && s.split(|b| *b == b'/').next().unwrap_or(b\"\").contains(&b':')\n+}\n+\n ////////////////////////////////////////////////////////////////////////////////\n // Cross-platform, iterator-independent parsing\n ////////////////////////////////////////////////////////////////////////////////\n@@ -1685,8 +1690,12 @@ impl Path {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[allow(deprecated)]\n     pub fn is_absolute(&self) -> bool {\n-        // FIXME: Remove target_os = \"redox\" and allow Redox prefixes\n-        self.has_root() && (cfg!(unix) || cfg!(target_os = \"redox\") || self.prefix().is_some())\n+        if !cfg!(target_os = \"redox\") {\n+            self.has_root() && (cfg!(unix) || self.prefix().is_some())\n+        } else {\n+            // FIXME: Allow Redox prefixes\n+            has_redox_scheme(self.as_u8_slice())\n+        }\n     }\n \n     /// Returns `true` if the `Path` is relative, i.e. not absolute.\n@@ -2050,7 +2059,8 @@ impl Path {\n         Components {\n             path: self.as_u8_slice(),\n             prefix,\n-            has_physical_root: has_physical_root(self.as_u8_slice(), prefix),\n+            has_physical_root: has_physical_root(self.as_u8_slice(), prefix) ||\n+                               has_redox_scheme(self.as_u8_slice()),\n             front: State::Prefix,\n             back: State::Body,\n         }"}, {"sha": "76ef36cc9a733737663fdba36ed588c48fe31ede", "filename": "src/libstd/primitive_docs.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2bb8fca18215298487a8684a132da828fdb5a751/src%2Flibstd%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bb8fca18215298487a8684a132da828fdb5a751/src%2Flibstd%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprimitive_docs.rs?ref=2bb8fca18215298487a8684a132da828fdb5a751", "patch": "@@ -188,9 +188,10 @@ mod prim_unit { }\n /// Working with raw pointers in Rust is uncommon,\n /// typically limited to a few patterns.\n ///\n-/// Use the [`null`] function to create null pointers, and the [`is_null`] method\n-/// of the `*const T` type  to check for null. The `*const T` type also defines\n-/// the [`offset`] method, for pointer math.\n+/// Use the [`null`] and [`null_mut`] functions to create null pointers, and the\n+/// [`is_null`] method of the `*const T` and `*mut T` types to check for null.\n+/// The `*const T` and `*mut T` types also define the [`offset`] method, for\n+/// pointer math.\n ///\n /// # Common ways to create raw pointers\n ///\n@@ -261,6 +262,7 @@ mod prim_unit { }\n /// *[See also the `std::ptr` module](ptr/index.html).*\n ///\n /// [`null`]: ../std/ptr/fn.null.html\n+/// [`null_mut`]: ../std/ptr/fn.null_mut.html\n /// [`is_null`]: ../std/primitive.pointer.html#method.is_null\n /// [`offset`]: ../std/primitive.pointer.html#method.offset\n /// [`into_raw`]: ../std/boxed/struct.Box.html#method.into_raw"}, {"sha": "ee103c803f542b58d447bebd2322ca06341ec627", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2bb8fca18215298487a8684a132da828fdb5a751/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bb8fca18215298487a8684a132da828fdb5a751/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=2bb8fca18215298487a8684a132da828fdb5a751", "patch": "@@ -374,7 +374,7 @@ impl Builder {\n     {\n         let Builder { name, stack_size } = self;\n \n-        let stack_size = stack_size.unwrap_or(util::min_stack());\n+        let stack_size = stack_size.unwrap_or_else(util::min_stack);\n \n         let my_thread = Thread::new(name);\n         let their_thread = my_thread.clone();"}, {"sha": "079f6a6b641e9178dd2aae3402e6537bdf256b4b", "filename": "src/test/run-pass/union/union-basic.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2bb8fca18215298487a8684a132da828fdb5a751/src%2Ftest%2Frun-pass%2Funion%2Funion-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bb8fca18215298487a8684a132da828fdb5a751/src%2Ftest%2Frun-pass%2Funion%2Funion-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funion%2Funion-basic.rs?ref=2bb8fca18215298487a8684a132da828fdb5a751", "patch": "@@ -10,10 +10,6 @@\n \n // aux-build:union.rs\n \n-// FIXME: This test case makes little-endian assumptions.\n-// ignore-s390x\n-// ignore-sparc\n-\n extern crate union;\n use std::mem::{size_of, align_of, zeroed};\n \n@@ -39,7 +35,7 @@ fn local() {\n         assert_eq!(w.b, 0);\n         w.a = 1;\n         assert_eq!(w.a, 1);\n-        assert_eq!(w.b, 1);\n+        assert_eq!(w.b.to_le(), 1);\n     }\n }\n \n@@ -60,7 +56,7 @@ fn xcrate() {\n         assert_eq!(w.b, 0);\n         w.a = 1;\n         assert_eq!(w.a, 1);\n-        assert_eq!(w.b, 1);\n+        assert_eq!(w.b.to_le(), 1);\n     }\n }\n "}]}