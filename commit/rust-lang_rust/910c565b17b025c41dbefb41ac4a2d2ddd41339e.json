{"sha": "910c565b17b025c41dbefb41ac4a2d2ddd41339e", "node_id": "C_kwDOAAsO6NoAKDkxMGM1NjViMTdiMDI1YzQxZGJlZmI0MWFjNGEyZDJkZGQ0MTMzOWU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-10T06:34:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-10T06:34:58Z"}, "message": "Auto merge of #13376 - DropDemBits:strip-generic-bounds-and-defaults, r=Veykril\n\ninternal: Add `GenericParamList::to_generic_args` and `{TypeParam,ConstParam}::remove_default` APIs\n\nAlso fixes `generate_impl` not removing the default const param value, though it seems that no one has encountered or reported that issue yet \ud83d\ude05\n\nThis initially started out as refactoring `utils::generate_impl_text_inner` to understand it better (which was the reason for adding `{TypeParam,ConstParam}::remove_default`), but ended up also finding another place that needed `GenericParamList::to_generic_args`, hence its addition in here.", "tree": {"sha": "92404c989206c715fc04257d5db8ccb5efef6c3e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92404c989206c715fc04257d5db8ccb5efef6c3e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/910c565b17b025c41dbefb41ac4a2d2ddd41339e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/910c565b17b025c41dbefb41ac4a2d2ddd41339e", "html_url": "https://github.com/rust-lang/rust/commit/910c565b17b025c41dbefb41ac4a2d2ddd41339e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/910c565b17b025c41dbefb41ac4a2d2ddd41339e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61504c8d951c566eb03037dcb300c96f4bd9a8b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/61504c8d951c566eb03037dcb300c96f4bd9a8b6", "html_url": "https://github.com/rust-lang/rust/commit/61504c8d951c566eb03037dcb300c96f4bd9a8b6"}, {"sha": "1015a177d4a9f1c8ed853dee68dc2bf13e0cb02d", "url": "https://api.github.com/repos/rust-lang/rust/commits/1015a177d4a9f1c8ed853dee68dc2bf13e0cb02d", "html_url": "https://github.com/rust-lang/rust/commit/1015a177d4a9f1c8ed853dee68dc2bf13e0cb02d"}], "stats": {"total": 202, "additions": 127, "deletions": 75}, "files": [{"sha": "970e948dfd930f4226be3c9697f0e19dead8d044", "filename": "crates/ide-assists/src/handlers/extract_struct_from_enum_variant.rs", "status": "modified", "additions": 2, "deletions": 32, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/910c565b17b025c41dbefb41ac4a2d2ddd41339e/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/910c565b17b025c41dbefb41ac4a2d2ddd41339e/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs?ref=910c565b17b025c41dbefb41ac4a2d2ddd41339e", "patch": "@@ -9,7 +9,7 @@ use ide_db::{\n     search::FileReference,\n     FxHashSet, RootDatabase,\n };\n-use itertools::{Itertools, Position};\n+use itertools::Itertools;\n use syntax::{\n     ast::{\n         self, edit::IndentLevel, edit_in_place::Indent, make, AstNode, HasAttrs, HasGenericParams,\n@@ -298,37 +298,7 @@ fn update_variant(variant: &ast::Variant, generics: Option<ast::GenericParamList\n     let name = variant.name()?;\n     let ty = generics\n         .filter(|generics| generics.generic_params().count() > 0)\n-        .map(|generics| {\n-            let mut generic_str = String::with_capacity(8);\n-\n-            for (p, more) in generics.generic_params().with_position().map(|p| match p {\n-                Position::First(p) | Position::Middle(p) => (p, true),\n-                Position::Last(p) | Position::Only(p) => (p, false),\n-            }) {\n-                match p {\n-                    ast::GenericParam::ConstParam(konst) => {\n-                        if let Some(name) = konst.name() {\n-                            generic_str.push_str(name.text().as_str());\n-                        }\n-                    }\n-                    ast::GenericParam::LifetimeParam(lt) => {\n-                        if let Some(lt) = lt.lifetime() {\n-                            generic_str.push_str(lt.text().as_str());\n-                        }\n-                    }\n-                    ast::GenericParam::TypeParam(ty) => {\n-                        if let Some(name) = ty.name() {\n-                            generic_str.push_str(name.text().as_str());\n-                        }\n-                    }\n-                }\n-                if more {\n-                    generic_str.push_str(\", \");\n-                }\n-            }\n-\n-            make::ty(&format!(\"{}<{}>\", &name.text(), &generic_str))\n-        })\n+        .map(|generics| make::ty(&format!(\"{}{}\", &name.text(), generics.to_generic_args())))\n         .unwrap_or_else(|| make::ty(&name.text()));\n \n     // change from a record to a tuple field list"}, {"sha": "307cea3d0a4f875aee3a92d954c133c0688c22c1", "filename": "crates/ide-assists/src/handlers/generate_impl.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/910c565b17b025c41dbefb41ac4a2d2ddd41339e/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/910c565b17b025c41dbefb41ac4a2d2ddd41339e/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_impl.rs?ref=910c565b17b025c41dbefb41ac4a2d2ddd41339e", "patch": "@@ -52,6 +52,7 @@ mod tests {\n \n     use super::*;\n \n+    // FIXME: break up into separate test fns\n     #[test]\n     fn test_add_impl() {\n         check_assist(\n@@ -134,6 +135,18 @@ mod tests {\n             }\"#,\n         );\n \n+        check_assist(\n+            generate_impl,\n+            r#\"\n+            struct Defaulted<const N: i32 = 0> {}$0\"#,\n+            r#\"\n+            struct Defaulted<const N: i32 = 0> {}\n+\n+            impl<const N: i32> Defaulted<N> {\n+                $0\n+            }\"#,\n+        );\n+\n         check_assist(\n             generate_impl,\n             r#\"pub trait Trait {}"}, {"sha": "38396cd7d7bafd47c36e4d4d473915cdc41f827a", "filename": "crates/ide-assists/src/utils.rs", "status": "modified", "additions": 38, "deletions": 38, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/910c565b17b025c41dbefb41ac4a2d2ddd41339e/crates%2Fide-assists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/910c565b17b025c41dbefb41ac4a2d2ddd41339e/crates%2Fide-assists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Futils.rs?ref=910c565b17b025c41dbefb41ac4a2d2ddd41339e", "patch": "@@ -2,8 +2,6 @@\n \n use std::ops;\n \n-use itertools::Itertools;\n-\n pub(crate) use gen_trait_fn_body::gen_trait_fn_body;\n use hir::{db::HirDatabase, HirDisplay, Semantics};\n use ide_db::{famous_defs::FamousDefs, path_transform::PathTransform, RootDatabase, SnippetCap};\n@@ -15,7 +13,7 @@ use syntax::{\n         edit_in_place::{AttrsOwnerEdit, Removable},\n         make, HasArgList, HasAttrs, HasGenericParams, HasName, HasTypeBounds, Whitespace,\n     },\n-    ted, AstNode, AstToken, Direction, SmolStr, SourceFile,\n+    ted, AstNode, AstToken, Direction, SourceFile,\n     SyntaxKind::*,\n     SyntaxNode, TextRange, TextSize, T,\n };\n@@ -424,34 +422,44 @@ pub(crate) fn generate_trait_impl_text(adt: &ast::Adt, trait_text: &str, code: &\n }\n \n fn generate_impl_text_inner(adt: &ast::Adt, trait_text: Option<&str>, code: &str) -> String {\n-    let generic_params = adt.generic_param_list();\n+    // Ensure lifetime params are before type & const params\n+    let generic_params = adt.generic_param_list().map(|generic_params| {\n+        let lifetime_params =\n+            generic_params.lifetime_params().map(ast::GenericParam::LifetimeParam);\n+        let ty_or_const_params = generic_params.type_or_const_params().filter_map(|param| {\n+            // remove defaults since they can't be specified in impls\n+            match param {\n+                ast::TypeOrConstParam::Type(param) => {\n+                    let param = param.clone_for_update();\n+                    param.remove_default();\n+                    Some(ast::GenericParam::TypeParam(param))\n+                }\n+                ast::TypeOrConstParam::Const(param) => {\n+                    let param = param.clone_for_update();\n+                    param.remove_default();\n+                    Some(ast::GenericParam::ConstParam(param))\n+                }\n+            }\n+        });\n+\n+        make::generic_param_list(itertools::chain(lifetime_params, ty_or_const_params))\n+    });\n+\n+    // FIXME: use syntax::make & mutable AST apis instead\n+    // `trait_text` and `code` can't be opaque blobs of text\n     let mut buf = String::with_capacity(code.len());\n+\n+    // Copy any cfg attrs from the original adt\n     buf.push_str(\"\\n\\n\");\n-    adt.attrs()\n-        .filter(|attr| attr.as_simple_call().map(|(name, _arg)| name == \"cfg\").unwrap_or(false))\n-        .for_each(|attr| buf.push_str(format!(\"{}\\n\", attr).as_str()));\n+    let cfg_attrs = adt\n+        .attrs()\n+        .filter(|attr| attr.as_simple_call().map(|(name, _arg)| name == \"cfg\").unwrap_or(false));\n+    cfg_attrs.for_each(|attr| buf.push_str(&format!(\"{attr}\\n\")));\n+\n+    // `impl{generic_params} {trait_text} for {name}{generic_params.to_generic_args()}`\n     buf.push_str(\"impl\");\n     if let Some(generic_params) = &generic_params {\n-        let lifetimes = generic_params.lifetime_params().map(|lt| format!(\"{}\", lt.syntax()));\n-        let toc_params = generic_params.type_or_const_params().map(|toc_param| {\n-            let type_param = match toc_param {\n-                ast::TypeOrConstParam::Type(x) => x,\n-                ast::TypeOrConstParam::Const(x) => return x.syntax().to_string(),\n-            };\n-            let mut buf = String::new();\n-            if let Some(it) = type_param.name() {\n-                format_to!(buf, \"{}\", it.syntax());\n-            }\n-            if let Some(it) = type_param.colon_token() {\n-                format_to!(buf, \"{} \", it);\n-            }\n-            if let Some(it) = type_param.type_bound_list() {\n-                format_to!(buf, \"{}\", it.syntax());\n-            }\n-            buf\n-        });\n-        let generics = lifetimes.chain(toc_params).format(\", \");\n-        format_to!(buf, \"<{}>\", generics);\n+        format_to!(buf, \"{generic_params}\");\n     }\n     buf.push(' ');\n     if let Some(trait_text) = trait_text {\n@@ -460,23 +468,15 @@ fn generate_impl_text_inner(adt: &ast::Adt, trait_text: Option<&str>, code: &str\n     }\n     buf.push_str(&adt.name().unwrap().text());\n     if let Some(generic_params) = generic_params {\n-        let lifetime_params = generic_params\n-            .lifetime_params()\n-            .filter_map(|it| it.lifetime())\n-            .map(|it| SmolStr::from(it.text()));\n-        let toc_params = generic_params\n-            .type_or_const_params()\n-            .filter_map(|it| it.name())\n-            .map(|it| SmolStr::from(it.text()));\n-        format_to!(buf, \"<{}>\", lifetime_params.chain(toc_params).format(\", \"))\n+        format_to!(buf, \"{}\", generic_params.to_generic_args());\n     }\n \n     match adt.where_clause() {\n         Some(where_clause) => {\n-            format_to!(buf, \"\\n{}\\n{{\\n{}\\n}}\", where_clause, code);\n+            format_to!(buf, \"\\n{where_clause}\\n{{\\n{code}\\n}}\");\n         }\n         None => {\n-            format_to!(buf, \" {{\\n{}\\n}}\", code);\n+            format_to!(buf, \" {{\\n{code}\\n}}\");\n         }\n     }\n "}, {"sha": "229e7419b736febecf341b114dc86b121e6e006d", "filename": "crates/syntax/src/ast/edit_in_place.rs", "status": "modified", "additions": 55, "deletions": 1, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/910c565b17b025c41dbefb41ac4a2d2ddd41339e/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/910c565b17b025c41dbefb41ac4a2d2ddd41339e/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs?ref=910c565b17b025c41dbefb41ac4a2d2ddd41339e", "patch": "@@ -235,6 +235,24 @@ impl ast::GenericParamList {\n             }\n         }\n     }\n+\n+    /// Constructs a matching [`ast::GenericArgList`]\n+    pub fn to_generic_args(&self) -> ast::GenericArgList {\n+        let args = self.generic_params().filter_map(|param| match param {\n+            ast::GenericParam::LifetimeParam(it) => {\n+                Some(ast::GenericArg::LifetimeArg(make::lifetime_arg(it.lifetime()?)))\n+            }\n+            ast::GenericParam::TypeParam(it) => {\n+                Some(ast::GenericArg::TypeArg(make::type_arg(make::ext::ty_name(it.name()?))))\n+            }\n+            ast::GenericParam::ConstParam(it) => {\n+                // Name-only const params get parsed as `TypeArg`s\n+                Some(ast::GenericArg::TypeArg(make::type_arg(make::ext::ty_name(it.name()?))))\n+            }\n+        });\n+\n+        make::generic_arg_list(args)\n+    }\n }\n \n impl ast::WhereClause {\n@@ -248,6 +266,42 @@ impl ast::WhereClause {\n     }\n }\n \n+impl ast::TypeParam {\n+    pub fn remove_default(&self) {\n+        if let Some((eq, last)) = self\n+            .syntax()\n+            .children_with_tokens()\n+            .find(|it| it.kind() == T![=])\n+            .zip(self.syntax().last_child_or_token())\n+        {\n+            ted::remove_all(eq..=last);\n+\n+            // remove any trailing ws\n+            if let Some(last) = self.syntax().last_token().filter(|it| it.kind() == WHITESPACE) {\n+                last.detach();\n+            }\n+        }\n+    }\n+}\n+\n+impl ast::ConstParam {\n+    pub fn remove_default(&self) {\n+        if let Some((eq, last)) = self\n+            .syntax()\n+            .children_with_tokens()\n+            .find(|it| it.kind() == T![=])\n+            .zip(self.syntax().last_child_or_token())\n+        {\n+            ted::remove_all(eq..=last);\n+\n+            // remove any trailing ws\n+            if let Some(last) = self.syntax().last_token().filter(|it| it.kind() == WHITESPACE) {\n+                last.detach();\n+            }\n+        }\n+    }\n+}\n+\n pub trait Removable: AstNode {\n     fn remove(&self);\n }\n@@ -264,7 +318,7 @@ impl Removable for ast::TypeBoundList {\n impl ast::PathSegment {\n     pub fn get_or_create_generic_arg_list(&self) -> ast::GenericArgList {\n         if self.generic_arg_list().is_none() {\n-            let arg_list = make::generic_arg_list().clone_for_update();\n+            let arg_list = make::generic_arg_list(empty()).clone_for_update();\n             ted::append_child(self.syntax(), arg_list.syntax());\n         }\n         self.generic_arg_list().unwrap()"}, {"sha": "c9a21e12c085b3f3ed7464c7555371838725bd59", "filename": "crates/syntax/src/ast/make.rs", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/910c565b17b025c41dbefb41ac4a2d2ddd41339e/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/910c565b17b025c41dbefb41ac4a2d2ddd41339e/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs?ref=910c565b17b025c41dbefb41ac4a2d2ddd41339e", "patch": "@@ -88,6 +88,9 @@ pub mod ext {\n         block_expr(None, None)\n     }\n \n+    pub fn ty_name(name: ast::Name) -> ast::Type {\n+        ty_path(ident_path(&format!(\"{name}\")))\n+    }\n     pub fn ty_bool() -> ast::Type {\n         ty_path(ident_path(\"bool\"))\n     }\n@@ -160,6 +163,7 @@ pub fn assoc_item_list() -> ast::AssocItemList {\n     ast_from_text(\"impl C for D {}\")\n }\n \n+// FIXME: `ty_params` should be `ast::GenericArgList`\n pub fn impl_(\n     ty: ast::Path,\n     params: Option<ast::GenericParamList>,\n@@ -185,10 +189,6 @@ pub fn impl_trait(\n     ast_from_text(&format!(\"impl{ty_params} {trait_} for {ty}{ty_params} {{}}\"))\n }\n \n-pub(crate) fn generic_arg_list() -> ast::GenericArgList {\n-    ast_from_text(\"const S: T<> = ();\")\n-}\n-\n pub fn path_segment(name_ref: ast::NameRef) -> ast::PathSegment {\n     ast_from_text(&format!(\"type __ = {name_ref};\"))\n }\n@@ -718,6 +718,21 @@ pub fn generic_param_list(\n     ast_from_text(&format!(\"fn f<{args}>() {{ }}\"))\n }\n \n+pub fn type_arg(ty: ast::Type) -> ast::TypeArg {\n+    ast_from_text(&format!(\"const S: T<{ty}> = ();\"))\n+}\n+\n+pub fn lifetime_arg(lifetime: ast::Lifetime) -> ast::LifetimeArg {\n+    ast_from_text(&format!(\"const S: T<{lifetime}> = ();\"))\n+}\n+\n+pub(crate) fn generic_arg_list(\n+    args: impl IntoIterator<Item = ast::GenericArg>,\n+) -> ast::GenericArgList {\n+    let args = args.into_iter().join(\", \");\n+    ast_from_text(&format!(\"const S: T<{args}> = ();\"))\n+}\n+\n pub fn visibility_pub_crate() -> ast::Visibility {\n     ast_from_text(\"pub(crate) struct S\")\n }"}]}