{"sha": "a3800535b1c9213fa99d897d317bfcf0ba7bf426", "node_id": "C_kwDOAAsO6NoAKGEzODAwNTM1YjFjOTIxM2ZhOTlkODk3ZDMxN2JmY2YwYmE3YmY0MjY", "commit": {"author": {"name": "Luqman Aden", "email": "me@luqman.ca", "date": "2022-12-01T07:09:51Z"}, "committer": {"name": "Luqman Aden", "email": "me@luqman.ca", "date": "2023-05-05T23:00:19Z"}, "message": "Add helper methods inherent_align and to_union on Abi.", "tree": {"sha": "9616c064964b61927f513b6bd42c7251e46640c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9616c064964b61927f513b6bd42c7251e46640c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a3800535b1c9213fa99d897d317bfcf0ba7bf426", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a3800535b1c9213fa99d897d317bfcf0ba7bf426", "html_url": "https://github.com/rust-lang/rust/commit/a3800535b1c9213fa99d897d317bfcf0ba7bf426", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a3800535b1c9213fa99d897d317bfcf0ba7bf426/comments", "author": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "committer": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23d09aebc8c6b89ba86bce2c38a0fc31f227d722", "url": "https://api.github.com/repos/rust-lang/rust/commits/23d09aebc8c6b89ba86bce2c38a0fc31f227d722", "html_url": "https://github.com/rust-lang/rust/commit/23d09aebc8c6b89ba86bce2c38a0fc31f227d722"}], "stats": {"total": 27, "additions": 26, "deletions": 1}, "files": [{"sha": "bbbc417e892f6811cc7c1dd4d8477b688c1f33e8", "filename": "compiler/rustc_abi/src/lib.rs", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a3800535b1c9213fa99d897d317bfcf0ba7bf426/compiler%2Frustc_abi%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3800535b1c9213fa99d897d317bfcf0ba7bf426/compiler%2Frustc_abi%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_abi%2Fsrc%2Flib.rs?ref=a3800535b1c9213fa99d897d317bfcf0ba7bf426", "patch": "@@ -1,11 +1,11 @@\n #![cfg_attr(feature = \"nightly\", feature(step_trait, rustc_attrs, min_specialization))]\n \n-use std::fmt;\n #[cfg(feature = \"nightly\")]\n use std::iter::Step;\n use std::num::{NonZeroUsize, ParseIntError};\n use std::ops::{Add, AddAssign, Mul, RangeInclusive, Sub};\n use std::str::FromStr;\n+use std::{cmp, fmt};\n \n use bitflags::bitflags;\n use rustc_data_structures::intern::Interned;\n@@ -1272,6 +1272,31 @@ impl Abi {\n     pub fn is_scalar(&self) -> bool {\n         matches!(*self, Abi::Scalar(_))\n     }\n+\n+    /// Returns the fixed alignment of this ABI, if any\n+    pub fn inherent_align<C: HasDataLayout>(&self, cx: &C) -> Option<AbiAndPrefAlign> {\n+        Some(match *self {\n+            Abi::Scalar(s) => s.align(cx),\n+            Abi::ScalarPair(s1, s2) => {\n+                AbiAndPrefAlign::new(cmp::max(s1.align(cx).abi, s2.align(cx).abi))\n+            }\n+            Abi::Vector { element, count } => {\n+                cx.data_layout().vector_align(element.size(cx) * count)\n+            }\n+            Abi::Uninhabited | Abi::Aggregate { .. } => return None,\n+        })\n+    }\n+\n+    /// Discard valid range information and allow undef\n+    pub fn to_union(&self) -> Self {\n+        assert!(self.is_sized());\n+        match *self {\n+            Abi::Scalar(s) => Abi::Scalar(s.to_union()),\n+            Abi::ScalarPair(s1, s2) => Abi::ScalarPair(s1.to_union(), s2.to_union()),\n+            Abi::Vector { element, count } => Abi::Vector { element: element.to_union(), count },\n+            Abi::Uninhabited | Abi::Aggregate { .. } => Abi::Aggregate { sized: true },\n+        }\n+    }\n }\n \n #[derive(PartialEq, Eq, Hash, Clone, Debug)]"}]}