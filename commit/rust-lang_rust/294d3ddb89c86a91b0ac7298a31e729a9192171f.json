{"sha": "294d3ddb89c86a91b0ac7298a31e729a9192171f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5NGQzZGRiODljODZhOTFiMGFjNzI5OGEzMWU3MjlhOTE5MjE3MWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-11T03:07:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-11T03:07:02Z"}, "message": "auto merge of #12766 : TeXitoi/rust/fix-shootout-spectralnorm, r=alexcrichton", "tree": {"sha": "f1f8a9fd2cc9a05b17422e3877a1ff7e01f74485", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1f8a9fd2cc9a05b17422e3877a1ff7e01f74485"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/294d3ddb89c86a91b0ac7298a31e729a9192171f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/294d3ddb89c86a91b0ac7298a31e729a9192171f", "html_url": "https://github.com/rust-lang/rust/commit/294d3ddb89c86a91b0ac7298a31e729a9192171f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/294d3ddb89c86a91b0ac7298a31e729a9192171f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd3e9d743d621f2532e6a5e8f7d0c6081ef6159f", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd3e9d743d621f2532e6a5e8f7d0c6081ef6159f", "html_url": "https://github.com/rust-lang/rust/commit/dd3e9d743d621f2532e6a5e8f7d0c6081ef6159f"}, {"sha": "9e49a077d08104af150df387914a2bef4ab1ab55", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e49a077d08104af150df387914a2bef4ab1ab55", "html_url": "https://github.com/rust-lang/rust/commit/9e49a077d08104af150df387914a2bef4ab1ab55"}], "stats": {"total": 29, "additions": 18, "deletions": 11}, "files": [{"sha": "7a393ad785081cf64fe65908eb1bb29f040ae656", "filename": "src/test/bench/shootout-spectralnorm.rs", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/294d3ddb89c86a91b0ac7298a31e729a9192171f/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/294d3ddb89c86a91b0ac7298a31e729a9192171f/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs?ref=294d3ddb89c86a91b0ac7298a31e729a9192171f", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012-2013-2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,16 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-test arcs no longer unwrap\n-\n extern crate sync;\n \n use std::from_str::FromStr;\n use std::iter::count;\n use std::cmp::min;\n use std::os;\n use std::vec::from_elem;\n-use sync::Arc;\n use sync::RWArc;\n \n fn A(i: uint, j: uint) -> f64 {\n@@ -33,23 +30,32 @@ fn dot(v: &[f64], u: &[f64]) -> f64 {\n }\n \n fn mult(v: RWArc<~[f64]>, out: RWArc<~[f64]>, f: fn(&~[f64], uint) -> f64) {\n-    let wait = Arc::new(());\n+    // We lanch in different tasks the work to be done.  To finish\n+    // this fuction, we need to wait for the completion of every\n+    // tasks.  To do that, we give to each tasks a wait_chan that we\n+    // drop at the end of the work.  At the end of this function, we\n+    // wait until the channel hang up.\n+    let (wait_port, wait_chan) = Chan::new();\n+\n     let len = out.read(|out| out.len());\n     let chunk = len / 100 + 1;\n     for chk in count(0, chunk) {\n         if chk >= len {break;}\n-        let w = wait.clone();\n+        let w = wait_chan.clone();\n         let v = v.clone();\n         let out = out.clone();\n         spawn(proc() {\n             for i in range(chk, min(len, chk + chunk)) {\n                 let val = v.read(|v| f(v, i));\n                 out.write(|out| out[i] = val);\n             }\n-            let _ = w;\n+            drop(w)\n         });\n     }\n-    let _ = wait.unwrap();\n+\n+    // wait until the channel hang up (every task finished)\n+    drop(wait_chan);\n+    for () in wait_port.iter() {}\n }\n \n fn mult_Av_impl(v: &~[f64], i: uint) -> f64 {\n@@ -97,7 +103,8 @@ fn main() {\n         mult_AtAv(u.clone(), v.clone(), tmp.clone());\n         mult_AtAv(v.clone(), u.clone(), tmp.clone());\n     }\n-    let u = u.unwrap();\n-    let v = v.unwrap();\n-    println!(\"{:.9f}\", (dot(u,v) / dot(v,v)).sqrt());\n+\n+    u.read(|u| v.read(|v| {\n+        println!(\"{:.9f}\", (dot(*u, *v) / dot(*v, *v)).sqrt());\n+    }))\n }"}]}