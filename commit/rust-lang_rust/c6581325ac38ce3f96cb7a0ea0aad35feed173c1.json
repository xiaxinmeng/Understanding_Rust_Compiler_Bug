{"sha": "c6581325ac38ce3f96cb7a0ea0aad35feed173c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2NTgxMzI1YWMzOGNlM2Y5NmNiN2EwZWEwYWFkMzVmZWVkMTczYzE=", "commit": {"author": {"name": "G\u00e1bor Horv\u00e1th", "email": "xazax.hun@gmail.com", "date": "2013-05-24T08:27:31Z"}, "committer": {"name": "G\u00e1bor Horv\u00e1th", "email": "xazax.hun@gmail.com", "date": "2013-05-24T08:27:31Z"}, "message": "Warnings for missing documentations.", "tree": {"sha": "6e07d00518a99007d410192bed73fa20267d9495", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e07d00518a99007d410192bed73fa20267d9495"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6581325ac38ce3f96cb7a0ea0aad35feed173c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6581325ac38ce3f96cb7a0ea0aad35feed173c1", "html_url": "https://github.com/rust-lang/rust/commit/c6581325ac38ce3f96cb7a0ea0aad35feed173c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6581325ac38ce3f96cb7a0ea0aad35feed173c1/comments", "author": {"login": "Xazax-hun", "id": 922897, "node_id": "MDQ6VXNlcjkyMjg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/922897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xazax-hun", "html_url": "https://github.com/Xazax-hun", "followers_url": "https://api.github.com/users/Xazax-hun/followers", "following_url": "https://api.github.com/users/Xazax-hun/following{/other_user}", "gists_url": "https://api.github.com/users/Xazax-hun/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xazax-hun/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xazax-hun/subscriptions", "organizations_url": "https://api.github.com/users/Xazax-hun/orgs", "repos_url": "https://api.github.com/users/Xazax-hun/repos", "events_url": "https://api.github.com/users/Xazax-hun/events{/privacy}", "received_events_url": "https://api.github.com/users/Xazax-hun/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Xazax-hun", "id": 922897, "node_id": "MDQ6VXNlcjkyMjg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/922897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xazax-hun", "html_url": "https://github.com/Xazax-hun", "followers_url": "https://api.github.com/users/Xazax-hun/followers", "following_url": "https://api.github.com/users/Xazax-hun/following{/other_user}", "gists_url": "https://api.github.com/users/Xazax-hun/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xazax-hun/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xazax-hun/subscriptions", "organizations_url": "https://api.github.com/users/Xazax-hun/orgs", "repos_url": "https://api.github.com/users/Xazax-hun/repos", "events_url": "https://api.github.com/users/Xazax-hun/events{/privacy}", "received_events_url": "https://api.github.com/users/Xazax-hun/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed9a793d244c42e77e40f18a5f243ff58dec07f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed9a793d244c42e77e40f18a5f243ff58dec07f7", "html_url": "https://github.com/rust-lang/rust/commit/ed9a793d244c42e77e40f18a5f243ff58dec07f7"}], "stats": {"total": 71, "additions": 71, "deletions": 0}, "files": [{"sha": "50d127869e572e2476ae7787232083976ce00f78", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/c6581325ac38ce3f96cb7a0ea0aad35feed173c1/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6581325ac38ce3f96cb7a0ea0aad35feed173c1/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=c6581325ac38ce3f96cb7a0ea0aad35feed173c1", "patch": "@@ -82,6 +82,9 @@ pub enum lint {\n     dead_assignment,\n     unused_mut,\n     unnecessary_allocation,\n+\n+    missing_struct_doc,\n+    missing_trait_doc,\n }\n \n pub fn level_to_str(lv: level) -> &'static str {\n@@ -252,6 +255,20 @@ static lint_table: &'static [(&'static str, LintSpec)] = &[\n         desc: \"detects unnecessary allocations that can be eliminated\",\n         default: warn\n     }),\n+\n+    (\"missing_struct_doc\",\n+     LintSpec {\n+        lint: missing_struct_doc,\n+        desc: \"detects missing documentation for structs\",\n+        default: allow\n+    }),\n+\n+    (\"missing_trait_doc\",\n+     LintSpec {\n+        lint: missing_trait_doc,\n+        desc: \"detects missing documentation for traits\",\n+        default: allow\n+    }),\n ];\n \n /*\n@@ -952,6 +969,58 @@ fn lint_unnecessary_allocations(cx: @mut Context) -> visit::vt<()> {\n     })\n }\n \n+fn lint_missing_struct_doc(cx: @mut Context) -> visit::vt<()> {\n+    visit::mk_simple_visitor(@visit::SimpleVisitor {\n+        visit_struct_field: |field| {\n+            let mut has_doc = false;\n+            for field.node.attrs.each |attr| {\n+                if attr.node.is_sugared_doc {\n+                    has_doc = true;\n+                    break;\n+                }\n+            }\n+            if !has_doc {\n+                cx.span_lint(missing_struct_doc, field.span, \"missing documentation \\\n+                                                              for a field.\");\n+            }\n+        },\n+        .. *visit::default_simple_visitor()\n+    })\n+}\n+\n+fn lint_missing_trait_doc(cx: @mut Context) -> visit::vt<()> {\n+    visit::mk_simple_visitor(@visit::SimpleVisitor {\n+        visit_trait_method: |method| {\n+            let mut has_doc = false;\n+            let span = match copy *method {\n+                ast::required(m) => {\n+                    for m.attrs.each |attr| {\n+                        if attr.node.is_sugared_doc {\n+                            has_doc = true;\n+                            break;\n+                        }\n+                    }\n+                    m.span\n+                },\n+                ast::provided(m) => {\n+                    for m.attrs.each |attr| {\n+                        if attr.node.is_sugared_doc {\n+                            has_doc = true;\n+                            break;\n+                        }\n+                    }\n+                    m.span\n+                }\n+            };\n+            if !has_doc {\n+                cx.span_lint(missing_trait_doc, span, \"missing documentation \\\n+                                                        for a method.\");\n+            }\n+        },\n+        .. *visit::default_simple_visitor()\n+    })\n+}\n+\n pub fn check_crate(tcx: ty::ctxt, crate: @ast::crate) {\n     let cx = @mut Context {\n         dict: @get_lint_dict(),\n@@ -980,6 +1049,8 @@ pub fn check_crate(tcx: ty::ctxt, crate: @ast::crate) {\n     cx.add_lint(lint_unused_mut(cx));\n     cx.add_lint(lint_session(cx));\n     cx.add_lint(lint_unnecessary_allocations(cx));\n+    cx.add_lint(lint_missing_struct_doc(cx));\n+    cx.add_lint(lint_missing_trait_doc(cx));\n \n     // type inference doesn't like this being declared below, we need to tell it\n     // what the type of this first function is..."}]}