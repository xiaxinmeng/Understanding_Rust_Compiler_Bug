{"sha": "3287a65fc05028dce3b521765f4643384ebc4346", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyODdhNjVmYzA1MDI4ZGNlM2I1MjE3NjVmNDY0MzM4NGViYzQzNDY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-13T09:19:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-13T09:19:43Z"}, "message": "Auto merge of #64254 - aleksijuvani:fix-macos-sysroot, r=alexcrichton\n\nFix sysroot on macOS when cross-compiling and SDKROOT is set\n\nFixes rust-lang/cargo#7283\nCloses rust-lang/cargo#7284\n\nr? @alexcrichton", "tree": {"sha": "6a78d2f6054238f9cb5b6d759d0793aa780c3552", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a78d2f6054238f9cb5b6d759d0793aa780c3552"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3287a65fc05028dce3b521765f4643384ebc4346", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3287a65fc05028dce3b521765f4643384ebc4346", "html_url": "https://github.com/rust-lang/rust/commit/3287a65fc05028dce3b521765f4643384ebc4346", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3287a65fc05028dce3b521765f4643384ebc4346/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f43ac065347ccbd80d0465489f51408fd907bcf7", "url": "https://api.github.com/repos/rust-lang/rust/commits/f43ac065347ccbd80d0465489f51408fd907bcf7", "html_url": "https://github.com/rust-lang/rust/commit/f43ac065347ccbd80d0465489f51408fd907bcf7"}, {"sha": "fe6d626abcc6ca994f0554bb78858ccd2b33dcfd", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe6d626abcc6ca994f0554bb78858ccd2b33dcfd", "html_url": "https://github.com/rust-lang/rust/commit/fe6d626abcc6ca994f0554bb78858ccd2b33dcfd"}], "stats": {"total": 67, "additions": 63, "deletions": 4}, "files": [{"sha": "2d84d67e3c85bd097a4dc8924005593711fac2bd", "filename": "src/librustc_codegen_ssa/back/command.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3287a65fc05028dce3b521765f4643384ebc4346/src%2Flibrustc_codegen_ssa%2Fback%2Fcommand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3287a65fc05028dce3b521765f4643384ebc4346/src%2Flibrustc_codegen_ssa%2Fback%2Fcommand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fcommand.rs?ref=3287a65fc05028dce3b521765f4643384ebc4346", "patch": "@@ -15,6 +15,7 @@ pub struct Command {\n     program: Program,\n     args: Vec<OsString>,\n     env: Vec<(OsString, OsString)>,\n+    env_remove: Vec<OsString>,\n }\n \n #[derive(Clone)]\n@@ -42,6 +43,7 @@ impl Command {\n             program,\n             args: Vec::new(),\n             env: Vec::new(),\n+            env_remove: Vec::new(),\n         }\n     }\n \n@@ -81,6 +83,17 @@ impl Command {\n         self.env.push((key.to_owned(), value.to_owned()));\n     }\n \n+    pub fn env_remove<K>(&mut self, key: K) -> &mut Command\n+        where K: AsRef<OsStr>,\n+    {\n+        self._env_remove(key.as_ref());\n+        self\n+    }\n+\n+    fn _env_remove(&mut self, key: &OsStr) {\n+        self.env_remove.push(key.to_owned());\n+    }\n+\n     pub fn output(&mut self) -> io::Result<Output> {\n         self.command().output()\n     }\n@@ -106,6 +119,9 @@ impl Command {\n         };\n         ret.args(&self.args);\n         ret.envs(self.env.clone());\n+        for k in &self.env_remove {\n+            ret.env_remove(k);\n+        }\n         return ret\n     }\n "}, {"sha": "9b044d9b45377c03d750082ab7da1b0d09689ae3", "filename": "src/librustc_codegen_ssa/back/link.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3287a65fc05028dce3b521765f4643384ebc4346/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3287a65fc05028dce3b521765f4643384ebc4346/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs?ref=3287a65fc05028dce3b521765f4643384ebc4346", "patch": "@@ -533,6 +533,9 @@ fn link_natively<'a, B: ArchiveBuilder<'a>>(sess: &'a Session,\n     for &(ref k, ref v) in &sess.target.target.options.link_env {\n         cmd.env(k, v);\n     }\n+    for k in &sess.target.target.options.link_env_remove {\n+        cmd.env_remove(k);\n+    }\n \n     if sess.opts.debugging_opts.print_link_args {\n         println!(\"{:?}\", &cmd);"}, {"sha": "f7551aa768dfc6ac457844525df7defac6267a38", "filename": "src/librustc_target/spec/apple_base.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3287a65fc05028dce3b521765f4643384ebc4346/src%2Flibrustc_target%2Fspec%2Fapple_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3287a65fc05028dce3b521765f4643384ebc4346/src%2Flibrustc_target%2Fspec%2Fapple_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fapple_base.rs?ref=3287a65fc05028dce3b521765f4643384ebc4346", "patch": "@@ -51,3 +51,19 @@ pub fn macos_llvm_target(arch: &str) -> String {\n     let (major, minor) = macos_deployment_target();\n     format!(\"{}-apple-macosx{}.{}.0\", arch, major, minor)\n }\n+\n+pub fn macos_link_env_remove() -> Vec<String> {\n+    let mut env_remove = Vec::with_capacity(2);\n+    // Remove the `SDKROOT` environment variable if it's clearly set for the wrong platform, which\n+    // may occur when we're linking a custom build script while targeting iOS for example.\n+    if let Some(sdkroot) = env::var(\"SDKROOT\").ok() {\n+        if sdkroot.contains(\"iPhoneOS.platform\") || sdkroot.contains(\"iPhoneSimulator.platform\") {\n+            env_remove.push(\"SDKROOT\".to_string())\n+        }\n+    }\n+    // Additionally, `IPHONEOS_DEPLOYMENT_TARGET` must not be set when using the Xcode linker at\n+    // \"/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ld\",\n+    // although this is apparently ignored when using the linker at \"/usr/bin/ld\".\n+    env_remove.push(\"IPHONEOS_DEPLOYMENT_TARGET\".to_string());\n+    env_remove\n+}"}, {"sha": "fdbb1bd5db34b6c1a4a9dbf181afee886b8cd8bb", "filename": "src/librustc_target/spec/apple_ios_base.rs", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3287a65fc05028dce3b521765f4643384ebc4346/src%2Flibrustc_target%2Fspec%2Fapple_ios_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3287a65fc05028dce3b521765f4643384ebc4346/src%2Flibrustc_target%2Fspec%2Fapple_ios_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fapple_ios_base.rs?ref=3287a65fc05028dce3b521765f4643384ebc4346", "patch": "@@ -38,9 +38,18 @@ pub fn get_sdk_root(sdk_name: &str) -> Result<String, String> {\n     // SDKROOT; for rustc, the user or build system can set it, or we\n     // can fall back to checking for xcrun on PATH.)\n     if let Some(sdkroot) = env::var(\"SDKROOT\").ok() {\n-        let sdkroot_path = Path::new(&sdkroot);\n-        if sdkroot_path.is_absolute() && sdkroot_path != Path::new(\"/\") && sdkroot_path.exists() {\n-            return Ok(sdkroot);\n+        let p = Path::new(&sdkroot);\n+        match sdk_name {\n+            // Ignore `SDKROOT` if it's clearly set for the wrong platform.\n+            \"iphoneos\" if sdkroot.contains(\"iPhoneSimulator.platform\")\n+                       || sdkroot.contains(\"MacOSX.platform\") => (),\n+            \"iphonesimulator\" if sdkroot.contains(\"iPhoneOS.platform\")\n+                              || sdkroot.contains(\"MacOSX.platform\") => (),\n+            \"macosx10.15\" if sdkroot.contains(\"iPhoneOS.platform\")\n+                          || sdkroot.contains(\"iPhoneSimulator.platform\") => (),\n+            // Ignore `SDKROOT` if it's not a valid path.\n+            _ if !p.is_absolute() || p == Path::new(\"/\") || !p.exists() => (),\n+            _ => return Ok(sdkroot),\n         }\n     }\n     let res = Command::new(\"xcrun\")\n@@ -100,13 +109,21 @@ fn target_cpu(arch: Arch) -> String {\n     }.to_string()\n }\n \n+fn link_env_remove(arch: Arch) -> Vec<String> {\n+    match arch {\n+        Armv7 | Armv7s | Arm64 | I386 | X86_64 => vec![\"MACOSX_DEPLOYMENT_TARGET\".to_string()],\n+        X86_64_macabi => vec![\"IPHONEOS_DEPLOYMENT_TARGET\".to_string()],\n+    }\n+}\n+\n pub fn opts(arch: Arch) -> Result<TargetOptions, String> {\n     let pre_link_args = build_pre_link_args(arch)?;\n     Ok(TargetOptions {\n         cpu: target_cpu(arch),\n         dynamic_linking: false,\n         executables: true,\n         pre_link_args,\n+        link_env_remove: link_env_remove(arch),\n         has_elf_tls: false,\n         eliminate_frame_pointer: false,\n         .. super::apple_base::opts()"}, {"sha": "27d05823bf21e15bf50fde7239d164a05633f0bd", "filename": "src/librustc_target/spec/i686_apple_darwin.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3287a65fc05028dce3b521765f4643384ebc4346/src%2Flibrustc_target%2Fspec%2Fi686_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3287a65fc05028dce3b521765f4643384ebc4346/src%2Flibrustc_target%2Fspec%2Fi686_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fi686_apple_darwin.rs?ref=3287a65fc05028dce3b521765f4643384ebc4346", "patch": "@@ -5,6 +5,7 @@ pub fn target() -> TargetResult {\n     base.cpu = \"yonah\".to_string();\n     base.max_atomic_width = Some(64);\n     base.pre_link_args.insert(LinkerFlavor::Gcc, vec![\"-m32\".to_string()]);\n+    base.link_env_remove.extend(super::apple_base::macos_link_env_remove());\n     base.stack_probes = true;\n     base.eliminate_frame_pointer = false;\n "}, {"sha": "626fa374a1bd467a765cbd670dc779d93d878c34", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3287a65fc05028dce3b521765f4643384ebc4346/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3287a65fc05028dce3b521765f4643384ebc4346/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=3287a65fc05028dce3b521765f4643384ebc4346", "patch": "@@ -581,8 +581,10 @@ pub struct TargetOptions {\n     /// user-defined libraries.\n     pub post_link_args: LinkArgs,\n \n-    /// Environment variables to be set before invoking the linker.\n+    /// Environment variables to be set for the linker invocation.\n     pub link_env: Vec<(String, String)>,\n+    /// Environment variables to be removed for the linker invocation.\n+    pub link_env_remove: Vec<String>,\n \n     /// Extra arguments to pass to the external assembler (when used)\n     pub asm_args: Vec<String>,\n@@ -844,6 +846,7 @@ impl Default for TargetOptions {\n             post_link_objects_crt: Vec::new(),\n             late_link_args: LinkArgs::new(),\n             link_env: Vec::new(),\n+            link_env_remove: Vec::new(),\n             archive_format: \"gnu\".to_string(),\n             custom_unwind_resume: false,\n             allow_asm: true,\n@@ -1119,6 +1122,7 @@ impl Target {\n         key!(post_link_objects_crt, list);\n         key!(post_link_args, link_args);\n         key!(link_env, env);\n+        key!(link_env_remove, list);\n         key!(asm_args, list);\n         key!(cpu);\n         key!(features);\n@@ -1335,6 +1339,7 @@ impl ToJson for Target {\n         target_option_val!(post_link_objects_crt);\n         target_option_val!(link_args - post_link_args);\n         target_option_val!(env - link_env);\n+        target_option_val!(link_env_remove);\n         target_option_val!(asm_args);\n         target_option_val!(cpu);\n         target_option_val!(features);"}, {"sha": "d059e44c5c82ac82656bcc7399c452dadfb6ee72", "filename": "src/librustc_target/spec/x86_64_apple_darwin.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3287a65fc05028dce3b521765f4643384ebc4346/src%2Flibrustc_target%2Fspec%2Fx86_64_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3287a65fc05028dce3b521765f4643384ebc4346/src%2Flibrustc_target%2Fspec%2Fx86_64_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_apple_darwin.rs?ref=3287a65fc05028dce3b521765f4643384ebc4346", "patch": "@@ -6,6 +6,7 @@ pub fn target() -> TargetResult {\n     base.max_atomic_width = Some(128); // core2 support cmpxchg16b\n     base.eliminate_frame_pointer = false;\n     base.pre_link_args.insert(LinkerFlavor::Gcc, vec![\"-m64\".to_string()]);\n+    base.link_env_remove.extend(super::apple_base::macos_link_env_remove());\n     base.stack_probes = true;\n \n     // Clang automatically chooses a more specific target based on"}]}