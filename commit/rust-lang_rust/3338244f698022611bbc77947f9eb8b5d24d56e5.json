{"sha": "3338244f698022611bbc77947f9eb8b5d24d56e5", "node_id": "C_kwDOAAsO6NoAKDMzMzgyNDRmNjk4MDIyNjExYmJjNzc5NDdmOWViOGI1ZDI0ZDU2ZTU", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-11-19T12:41:21Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-11-19T13:08:12Z"}, "message": "deduplicate constant evaluation in cranelift backend\n\nalso sync LLVM and cranelift structure a bit", "tree": {"sha": "b33afe377d3dfdeb805e42b570f07bdfe214d831", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b33afe377d3dfdeb805e42b570f07bdfe214d831"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3338244f698022611bbc77947f9eb8b5d24d56e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3338244f698022611bbc77947f9eb8b5d24d56e5", "html_url": "https://github.com/rust-lang/rust/commit/3338244f698022611bbc77947f9eb8b5d24d56e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3338244f698022611bbc77947f9eb8b5d24d56e5/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "becc24a23aed2639db3b78acd93ec6d553898583", "url": "https://api.github.com/repos/rust-lang/rust/commits/becc24a23aed2639db3b78acd93ec6d553898583", "html_url": "https://github.com/rust-lang/rust/commit/becc24a23aed2639db3b78acd93ec6d553898583"}], "stats": {"total": 82, "additions": 31, "deletions": 51}, "files": [{"sha": "077f33bb99cf7ad5e74fda657454ed21814aa711", "filename": "compiler/rustc_codegen_cranelift/src/constant.rs", "status": "modified", "additions": 23, "deletions": 35, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/3338244f698022611bbc77947f9eb8b5d24d56e5/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3338244f698022611bbc77947f9eb8b5d24d56e5/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs?ref=3338244f698022611bbc77947f9eb8b5d24d56e5", "patch": "@@ -38,22 +38,8 @@ impl ConstantCx {\n pub(crate) fn check_constants(fx: &mut FunctionCx<'_, '_, '_>) -> bool {\n     let mut all_constants_ok = true;\n     for constant in &fx.mir.required_consts {\n-        let unevaluated = match fx.monomorphize(constant.literal) {\n-            ConstantKind::Ty(_) => unreachable!(),\n-            ConstantKind::Unevaluated(uv, _) => uv,\n-            ConstantKind::Val(..) => continue,\n-        };\n-\n-        if let Err(err) = fx.tcx.const_eval_resolve(ParamEnv::reveal_all(), unevaluated, None) {\n+        if eval_mir_constant(fx, constant).is_none() {\n             all_constants_ok = false;\n-            match err {\n-                ErrorHandled::Reported(_) => {\n-                    fx.tcx.sess.span_err(constant.span, \"erroneous constant encountered\");\n-                }\n-                ErrorHandled::TooGeneric => {\n-                    span_bug!(constant.span, \"codegen encountered polymorphic constant: {:?}\", err);\n-                }\n-            }\n         }\n     }\n     all_constants_ok\n@@ -80,15 +66,15 @@ pub(crate) fn codegen_tls_ref<'tcx>(\n }\n \n pub(crate) fn eval_mir_constant<'tcx>(\n-    fx: &mut FunctionCx<'_, '_, 'tcx>,\n+    fx: &FunctionCx<'_, '_, 'tcx>,\n     constant: &Constant<'tcx>,\n-) -> (ConstValue<'tcx>, Ty<'tcx>) {\n+) -> Option<(ConstValue<'tcx>, Ty<'tcx>)> {\n     let constant_kind = fx.monomorphize(constant.literal);\n     let uv = match constant_kind {\n         ConstantKind::Ty(const_) => match const_.kind() {\n             ty::ConstKind::Unevaluated(uv) => uv.expand(),\n             ty::ConstKind::Value(val) => {\n-                return (fx.tcx.valtree_to_const_val((const_.ty(), val)), const_.ty());\n+                return Some((fx.tcx.valtree_to_const_val((const_.ty(), val)), const_.ty()));\n             }\n             err => span_bug!(\n                 constant.span,\n@@ -102,22 +88,31 @@ pub(crate) fn eval_mir_constant<'tcx>(\n             span_bug!(constant.span, \"MIR constant refers to static\");\n         }\n         ConstantKind::Unevaluated(uv, _) => uv,\n-        ConstantKind::Val(val, _) => return (val, constant_kind.ty()),\n+        ConstantKind::Val(val, _) => return Some((val, constant_kind.ty())),\n     };\n \n-    (\n-        fx.tcx.const_eval_resolve(ty::ParamEnv::reveal_all(), uv, None).unwrap_or_else(|_err| {\n-            span_bug!(constant.span, \"erroneous constant not captured by required_consts\");\n-        }),\n-        constant_kind.ty(),\n-    )\n+    let val = fx\n+        .tcx\n+        .const_eval_resolve(ty::ParamEnv::reveal_all(), uv, None)\n+        .map_err(|err| match err {\n+            ErrorHandled::Reported(_) => {\n+                fx.tcx.sess.span_err(constant.span, \"erroneous constant encountered\");\n+            }\n+            ErrorHandled::TooGeneric => {\n+                span_bug!(constant.span, \"codegen encountered polymorphic constant: {:?}\", err);\n+            }\n+        })\n+        .ok();\n+    val.map(|val| (val, constant_kind.ty()))\n }\n \n pub(crate) fn codegen_constant_operand<'tcx>(\n     fx: &mut FunctionCx<'_, '_, 'tcx>,\n     constant: &Constant<'tcx>,\n ) -> CValue<'tcx> {\n-    let (const_val, ty) = eval_mir_constant(fx, constant);\n+    let (const_val, ty) = eval_mir_constant(fx, constant).unwrap_or_else(|| {\n+        span_bug!(constant.span, \"erroneous constant not captured by required_consts\")\n+    });\n \n     codegen_const_value(fx, const_val, ty)\n }\n@@ -453,20 +448,13 @@ fn define_all_allocs(tcx: TyCtxt<'_>, module: &mut dyn Module, cx: &mut Constant\n     assert!(cx.todo.is_empty(), \"{:?}\", cx.todo);\n }\n \n+/// Used only for intrinsic implementations that need a compile-time constant\n pub(crate) fn mir_operand_get_const_val<'tcx>(\n     fx: &FunctionCx<'_, '_, 'tcx>,\n     operand: &Operand<'tcx>,\n ) -> Option<ConstValue<'tcx>> {\n     match operand {\n-        Operand::Constant(const_) => match fx.monomorphize(const_.literal) {\n-            ConstantKind::Ty(const_) => Some(\n-                const_.eval_for_mir(fx.tcx, ParamEnv::reveal_all()).try_to_value(fx.tcx).unwrap(),\n-            ),\n-            ConstantKind::Val(val, _) => Some(val),\n-            ConstantKind::Unevaluated(uv, _) => {\n-                Some(fx.tcx.const_eval_resolve(ParamEnv::reveal_all(), uv, None).unwrap())\n-            }\n-        },\n+        Operand::Constant(const_) => Some(eval_mir_constant(fx, const_).unwrap().0),\n         // FIXME(rust-lang/rust#85105): Casts like `IMM8 as u32` result in the const being stored\n         // inside a temporary before being passed to the intrinsic requiring the const argument.\n         // This code tries to find a single constant defining definition of the referenced local."}, {"sha": "53ff3c24096262207ff95b19e35f1142ca2b2c71", "filename": "compiler/rustc_codegen_ssa/src/mir/constant.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3338244f698022611bbc77947f9eb8b5d24d56e5/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3338244f698022611bbc77947f9eb8b5d24d56e5/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fconstant.rs?ref=3338244f698022611bbc77947f9eb8b5d24d56e5", "patch": "@@ -42,7 +42,14 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         };\n \n         self.cx.tcx().const_eval_resolve(ty::ParamEnv::reveal_all(), uv, None).map_err(|err| {\n-            self.cx.tcx().sess.span_err(constant.span, \"erroneous constant encountered\");\n+            match err {\n+                ErrorHandled::Reported(_) => {\n+                    self.cx.tcx().sess.span_err(constant.span, \"erroneous constant encountered\");\n+                }\n+                ErrorHandled::TooGeneric => {\n+                    span_bug!(constant.span, \"codegen encountered polymorphic constant: {:?}\", err);\n+                }\n+            }\n             err\n         })\n     }"}, {"sha": "9a58a196ed721cd6369794c02849de99a10d13f9", "filename": "compiler/rustc_middle/src/ty/consts.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3338244f698022611bbc77947f9eb8b5d24d56e5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3338244f698022611bbc77947f9eb8b5d24d56e5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs?ref=3338244f698022611bbc77947f9eb8b5d24d56e5", "patch": "@@ -1,5 +1,4 @@\n use crate::mir::interpret::LitToConstInput;\n-use crate::mir::ConstantKind;\n use crate::ty::{self, DefIdTree, InternalSubsts, ParamEnv, ParamEnvAnd, Ty, TyCtxt};\n use rustc_data_structures::intern::Interned;\n use rustc_hir as hir;\n@@ -230,20 +229,6 @@ impl<'tcx> Const<'tcx> {\n         }\n     }\n \n-    #[inline]\n-    /// Tries to evaluate the constant if it is `Unevaluated` and creates a ConstValue if the\n-    /// evaluation succeeds. If it doesn't succeed, returns the unevaluated constant.\n-    pub fn eval_for_mir(self, tcx: TyCtxt<'tcx>, param_env: ParamEnv<'tcx>) -> ConstantKind<'tcx> {\n-        if let Some(val) = self.kind().try_eval_for_mir(tcx, param_env) {\n-            match val {\n-                Ok(const_val) => ConstantKind::from_value(const_val, self.ty()),\n-                Err(guar) => ConstantKind::Ty(tcx.const_error_with_guaranteed(self.ty(), guar)),\n-            }\n-        } else {\n-            ConstantKind::Ty(self)\n-        }\n-    }\n-\n     #[inline]\n     /// Panics if the value cannot be evaluated or doesn't contain a valid integer of the given type.\n     pub fn eval_bits(self, tcx: TyCtxt<'tcx>, param_env: ParamEnv<'tcx>, ty: Ty<'tcx>) -> u128 {"}]}