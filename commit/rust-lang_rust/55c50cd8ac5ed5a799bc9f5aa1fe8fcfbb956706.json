{"sha": "55c50cd8ac5ed5a799bc9f5aa1fe8fcfbb956706", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1YzUwY2Q4YWM1ZWQ1YTc5OWJjOWY1YWExZmU4ZmNmYmI5NTY3MDY=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2017-12-22T18:50:21Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2018-01-20T10:09:23Z"}, "message": "Stabilize std::ptr::NonNull", "tree": {"sha": "df55f9b19b89d7b1e06a8fc7abdf002ed8d60da6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df55f9b19b89d7b1e06a8fc7abdf002ed8d60da6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/55c50cd8ac5ed5a799bc9f5aa1fe8fcfbb956706", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/55c50cd8ac5ed5a799bc9f5aa1fe8fcfbb956706", "html_url": "https://github.com/rust-lang/rust/commit/55c50cd8ac5ed5a799bc9f5aa1fe8fcfbb956706", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/55c50cd8ac5ed5a799bc9f5aa1fe8fcfbb956706/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d51e7458037187eb789caacf3180c14f3d84614", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d51e7458037187eb789caacf3180c14f3d84614", "html_url": "https://github.com/rust-lang/rust/commit/2d51e7458037187eb789caacf3180c14f3d84614"}], "stats": {"total": 50, "additions": 20, "deletions": 30}, "files": [{"sha": "e7bc10dfaa93ce44af900aae9a84d839e5bec11e", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/55c50cd8ac5ed5a799bc9f5aa1fe8fcfbb956706/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55c50cd8ac5ed5a799bc9f5aa1fe8fcfbb956706/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=55c50cd8ac5ed5a799bc9f5aa1fe8fcfbb956706", "patch": "@@ -288,16 +288,13 @@ impl<T: ?Sized> Box<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(nonnull)]\n-    ///\n     /// fn main() {\n     ///     let x = Box::new(5);\n     ///     let ptr = Box::into_nonnull_raw(x);\n     ///     let x = unsafe { Box::from_nonnull_raw(ptr) };\n     /// }\n     /// ```\n-    #[unstable(feature = \"nonnull\", reason = \"needs an RFC to flesh out design\",\n-               issue = \"27730\")]\n+    #[stable(feature = \"nonnull\", since = \"1.24.0\")]\n     #[inline]\n     pub unsafe fn from_nonnull_raw(u: NonNull<T>) -> Self {\n         Box(u.into())\n@@ -352,15 +349,12 @@ impl<T: ?Sized> Box<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(nonnull)]\n-    ///\n     /// fn main() {\n     ///     let x = Box::new(5);\n     ///     let ptr = Box::into_nonnull_raw(x);\n     /// }\n     /// ```\n-    #[unstable(feature = \"nonnull\", reason = \"needs an RFC to flesh out design\",\n-               issue = \"27730\")]\n+    #[stable(feature = \"nonnull\", since = \"1.24.0\")]\n     #[inline]\n     pub fn into_nonnull_raw(b: Box<T>) -> NonNull<T> {\n         Box::into_unique(b).into()"}, {"sha": "f25b455f9154fe2b40c045b87ad0662e91a43f6f", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/55c50cd8ac5ed5a799bc9f5aa1fe8fcfbb956706/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55c50cd8ac5ed5a799bc9f5aa1fe8fcfbb956706/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=55c50cd8ac5ed5a799bc9f5aa1fe8fcfbb956706", "patch": "@@ -103,7 +103,6 @@\n #![feature(iter_rfold)]\n #![feature(lang_items)]\n #![feature(needs_allocator)]\n-#![feature(nonnull)]\n #![feature(nonzero)]\n #![feature(offset_to)]\n #![feature(optin_builtin_traits)]"}, {"sha": "2e5f36ed71f207ef7ec2056ef69d315539f48aac", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/55c50cd8ac5ed5a799bc9f5aa1fe8fcfbb956706/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55c50cd8ac5ed5a799bc9f5aa1fe8fcfbb956706/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=55c50cd8ac5ed5a799bc9f5aa1fe8fcfbb956706", "patch": "@@ -2481,13 +2481,12 @@ pub type Shared<T> = NonNull<T>;\n /// Usually this won't be necessary; covariance is correct for most safe abstractions,\n /// such as Box, Rc, Arc, Vec, and LinkedList. This is the case because they\n /// provide a public API that follows the normal shared XOR mutable rules of Rust.\n-#[unstable(feature = \"shared\", reason = \"needs an RFC to flesh out design\",\n-           issue = \"27730\")]\n+#[stable(feature = \"nonnull\", since = \"1.24.0\")]\n pub struct NonNull<T: ?Sized> {\n     pointer: NonZero<*const T>,\n }\n \n-#[unstable(feature = \"shared\", issue = \"27730\")]\n+#[stable(feature = \"nonnull\", since = \"1.24.0\")]\n impl<T: ?Sized> fmt::Debug for NonNull<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"{:p}\", self.as_ptr())\n@@ -2496,20 +2495,20 @@ impl<T: ?Sized> fmt::Debug for NonNull<T> {\n \n /// `NonNull` pointers are not `Send` because the data they reference may be aliased.\n // NB: This impl is unnecessary, but should provide better error messages.\n-#[unstable(feature = \"nonnull\", issue = \"27730\")]\n+#[stable(feature = \"nonnull\", since = \"1.24.0\")]\n impl<T: ?Sized> !Send for NonNull<T> { }\n \n /// `NonNull` pointers are not `Sync` because the data they reference may be aliased.\n // NB: This impl is unnecessary, but should provide better error messages.\n-#[unstable(feature = \"nonnull\", issue = \"27730\")]\n+#[stable(feature = \"nonnull\", since = \"1.24.0\")]\n impl<T: ?Sized> !Sync for NonNull<T> { }\n \n-#[unstable(feature = \"nonnull\", issue = \"27730\")]\n impl<T: Sized> NonNull<T> {\n     /// Creates a new `NonNull` that is dangling, but well-aligned.\n     ///\n     /// This is useful for initializing types which lazily allocate, like\n     /// `Vec::new` does.\n+    #[stable(feature = \"nonnull\", since = \"1.24.0\")]\n     pub fn empty() -> Self {\n         unsafe {\n             let ptr = mem::align_of::<T>() as *mut T;\n@@ -2518,24 +2517,25 @@ impl<T: Sized> NonNull<T> {\n     }\n }\n \n-#[unstable(feature = \"nonnull\", issue = \"27730\")]\n impl<T: ?Sized> NonNull<T> {\n     /// Creates a new `NonNull`.\n     ///\n     /// # Safety\n     ///\n     /// `ptr` must be non-null.\n-    #[unstable(feature = \"nonnull\", issue = \"27730\")]\n+    #[stable(feature = \"nonnull\", since = \"1.24.0\")]\n     pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {\n         NonNull { pointer: NonZero::new_unchecked(ptr) }\n     }\n \n     /// Creates a new `NonNull` if `ptr` is non-null.\n+    #[stable(feature = \"nonnull\", since = \"1.24.0\")]\n     pub fn new(ptr: *mut T) -> Option<Self> {\n         NonZero::new(ptr as *const T).map(|nz| NonNull { pointer: nz })\n     }\n \n     /// Acquires the underlying `*mut` pointer.\n+    #[stable(feature = \"nonnull\", since = \"1.24.0\")]\n     pub fn as_ptr(self) -> *mut T {\n         self.pointer.get() as *mut T\n     }\n@@ -2545,6 +2545,7 @@ impl<T: ?Sized> NonNull<T> {\n     /// The resulting lifetime is bound to self so this behaves \"as if\"\n     /// it were actually an instance of T that is getting borrowed. If a longer\n     /// (unbound) lifetime is needed, use `&*my_ptr.ptr()`.\n+    #[stable(feature = \"nonnull\", since = \"1.24.0\")]\n     pub unsafe fn as_ref(&self) -> &T {\n         &*self.as_ptr()\n     }\n@@ -2554,46 +2555,47 @@ impl<T: ?Sized> NonNull<T> {\n     /// The resulting lifetime is bound to self so this behaves \"as if\"\n     /// it were actually an instance of T that is getting borrowed. If a longer\n     /// (unbound) lifetime is needed, use `&mut *my_ptr.ptr_mut()`.\n+    #[stable(feature = \"nonnull\", since = \"1.24.0\")]\n     pub unsafe fn as_mut(&mut self) -> &mut T {\n         &mut *self.as_ptr()\n     }\n }\n \n-#[unstable(feature = \"nonnull\", issue = \"27730\")]\n+#[stable(feature = \"nonnull\", since = \"1.24.0\")]\n impl<T: ?Sized> Clone for NonNull<T> {\n     fn clone(&self) -> Self {\n         *self\n     }\n }\n \n-#[unstable(feature = \"nonnull\", issue = \"27730\")]\n+#[stable(feature = \"nonnull\", since = \"1.24.0\")]\n impl<T: ?Sized> Copy for NonNull<T> { }\n \n-#[unstable(feature = \"nonnull\", issue = \"27730\")]\n+#[stable(feature = \"nonnull\", since = \"1.24.0\")]\n impl<T: ?Sized, U: ?Sized> CoerceUnsized<NonNull<U>> for NonNull<T> where T: Unsize<U> { }\n \n-#[unstable(feature = \"nonnull\", issue = \"27730\")]\n+#[stable(feature = \"nonnull\", since = \"1.24.0\")]\n impl<T: ?Sized> fmt::Pointer for NonNull<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         fmt::Pointer::fmt(&self.as_ptr(), f)\n     }\n }\n \n-#[unstable(feature = \"nonnull\", issue = \"27730\")]\n+#[stable(feature = \"nonnull\", since = \"1.24.0\")]\n impl<T: ?Sized> From<Unique<T>> for NonNull<T> {\n     fn from(unique: Unique<T>) -> Self {\n         NonNull { pointer: unique.pointer }\n     }\n }\n \n-#[unstable(feature = \"nonnull\", issue = \"27730\")]\n+#[stable(feature = \"nonnull\", since = \"1.24.0\")]\n impl<'a, T: ?Sized> From<&'a mut T> for NonNull<T> {\n     fn from(reference: &'a mut T) -> Self {\n         NonNull { pointer: NonZero::from(reference) }\n     }\n }\n \n-#[unstable(feature = \"nonnull\", issue = \"27730\")]\n+#[stable(feature = \"nonnull\", since = \"1.24.0\")]\n impl<'a, T: ?Sized> From<&'a T> for NonNull<T> {\n     fn from(reference: &'a T) -> Self {\n         NonNull { pointer: NonZero::from(reference) }"}, {"sha": "1c32452f84635e6b6554b510b8a49199f7aac6d7", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/55c50cd8ac5ed5a799bc9f5aa1fe8fcfbb956706/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55c50cd8ac5ed5a799bc9f5aa1fe8fcfbb956706/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=55c50cd8ac5ed5a799bc9f5aa1fe8fcfbb956706", "patch": "@@ -27,7 +27,6 @@\n #![feature(iterator_try_fold)]\n #![feature(iter_rfind)]\n #![feature(iter_rfold)]\n-#![feature(nonnull)]\n #![feature(nonzero)]\n #![feature(pattern)]\n #![feature(raw)]"}, {"sha": "a35ef2f7ce7baefec130cbd7a9823d3897010390", "filename": "src/librustc_data_structures/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/55c50cd8ac5ed5a799bc9f5aa1fe8fcfbb956706/src%2Flibrustc_data_structures%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55c50cd8ac5ed5a799bc9f5aa1fe8fcfbb956706/src%2Flibrustc_data_structures%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Flib.rs?ref=55c50cd8ac5ed5a799bc9f5aa1fe8fcfbb956706", "patch": "@@ -22,7 +22,6 @@\n #![deny(warnings)]\n \n #![feature(collections_range)]\n-#![feature(nonnull)]\n #![feature(nonzero)]\n #![feature(unboxed_closures)]\n #![feature(fn_traits)]"}, {"sha": "91cc6d25cce01016601c16b1fc0c1a31f024747a", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/55c50cd8ac5ed5a799bc9f5aa1fe8fcfbb956706/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55c50cd8ac5ed5a799bc9f5aa1fe8fcfbb956706/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=55c50cd8ac5ed5a799bc9f5aa1fe8fcfbb956706", "patch": "@@ -283,7 +283,6 @@\n #![feature(macro_vis_matcher)]\n #![feature(needs_panic_runtime)]\n #![feature(never_type)]\n-#![feature(nonnull)]\n #![feature(num_bits_bytes)]\n #![feature(old_wrapping)]\n #![feature(on_unimplemented)]"}, {"sha": "560876006d3f348999cb6568a1381306d7bbc39c", "filename": "src/libstd/panic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55c50cd8ac5ed5a799bc9f5aa1fe8fcfbb956706/src%2Flibstd%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55c50cd8ac5ed5a799bc9f5aa1fe8fcfbb956706/src%2Flibstd%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanic.rs?ref=55c50cd8ac5ed5a799bc9f5aa1fe8fcfbb956706", "patch": "@@ -198,7 +198,7 @@ impl<T: RefUnwindSafe + ?Sized> UnwindSafe for *const T {}\n impl<T: RefUnwindSafe + ?Sized> UnwindSafe for *mut T {}\n #[unstable(feature = \"ptr_internals\", issue = \"0\")]\n impl<T: UnwindSafe + ?Sized> UnwindSafe for Unique<T> {}\n-#[unstable(feature = \"nonnull\", issue = \"27730\")]\n+#[stable(feature = \"nonnull\", since = \"1.24.0\")]\n impl<T: RefUnwindSafe + ?Sized> UnwindSafe for NonNull<T> {}\n #[stable(feature = \"catch_unwind\", since = \"1.9.0\")]\n impl<T: ?Sized> UnwindSafe for Mutex<T> {}"}, {"sha": "7af732f561deb5d68cbdb6fb7d3eb2e5b4b1ef9e", "filename": "src/test/run-pass/issue-23433.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55c50cd8ac5ed5a799bc9f5aa1fe8fcfbb956706/src%2Ftest%2Frun-pass%2Fissue-23433.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55c50cd8ac5ed5a799bc9f5aa1fe8fcfbb956706/src%2Ftest%2Frun-pass%2Fissue-23433.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-23433.rs?ref=55c50cd8ac5ed5a799bc9f5aa1fe8fcfbb956706", "patch": "@@ -10,8 +10,6 @@\n \n // Don't fail if we encounter a NonZero<*T> where T is an unsized type\n \n-#![feature(nonnull)]\n-\n use std::ptr::NonNull;\n \n fn main() {"}]}