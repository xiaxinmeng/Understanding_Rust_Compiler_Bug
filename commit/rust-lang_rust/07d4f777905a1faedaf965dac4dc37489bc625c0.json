{"sha": "07d4f777905a1faedaf965dac4dc37489bc625c0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3ZDRmNzc3OTA1YTFmYWVkYWY5NjVkYWM0ZGMzNzQ4OWJjNjI1YzA=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2015-05-13T22:44:57Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2015-05-13T22:47:56Z"}, "message": "syntax: abstract over the file loading mechanism.", "tree": {"sha": "f398dea94809078c78eabc4c3142ff355e3d729b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f398dea94809078c78eabc4c3142ff355e3d729b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/07d4f777905a1faedaf965dac4dc37489bc625c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/07d4f777905a1faedaf965dac4dc37489bc625c0", "html_url": "https://github.com/rust-lang/rust/commit/07d4f777905a1faedaf965dac4dc37489bc625c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/07d4f777905a1faedaf965dac4dc37489bc625c0/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d50b043f748bf9a07b28a8f734327258204e26b", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d50b043f748bf9a07b28a8f734327258204e26b", "html_url": "https://github.com/rust-lang/rust/commit/0d50b043f748bf9a07b28a8f734327258204e26b"}], "stats": {"total": 73, "additions": 58, "deletions": 15}, "files": [{"sha": "b2a366ec5beb608ff3a8899b0d842ed88e4a1094", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 46, "deletions": 2, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/07d4f777905a1faedaf965dac4dc37489bc625c0/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07d4f777905a1faedaf965dac4dc37489bc625c0/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=07d4f777905a1faedaf965dac4dc37489bc625c0", "patch": "@@ -21,9 +21,11 @@ pub use self::MacroFormat::*;\n \n use std::cell::RefCell;\n use std::ops::{Add, Sub};\n+use std::path::Path;\n use std::rc::Rc;\n \n-use std::fmt;\n+use std::{fmt, fs};\n+use std::io::{self, Read};\n \n use serialize::{Encodable, Decodable, Encoder, Decoder};\n \n@@ -527,24 +529,66 @@ impl FileMap {\n     }\n }\n \n+/// An abstraction over the fs operations used by the Parser.\n+pub trait FileLoader {\n+    /// Query the existence of a file.\n+    fn file_exists(&self, path: &Path) -> bool;\n+\n+    /// Read the contents of an UTF-8 file into memory.\n+    fn read_file(&self, path: &Path) -> io::Result<String>;\n+}\n+\n+/// A FileLoader that uses std::fs to load real files.\n+pub struct RealFileLoader;\n+\n+impl FileLoader for RealFileLoader {\n+    fn file_exists(&self, path: &Path) -> bool {\n+        fs::metadata(path).is_ok()\n+    }\n+\n+    fn read_file(&self, path: &Path) -> io::Result<String> {\n+        let mut src = String::new();\n+        try!(try!(fs::File::open(path)).read_to_string(&mut src));\n+        Ok(src)\n+    }\n+}\n \n // _____________________________________________________________________________\n // CodeMap\n //\n \n pub struct CodeMap {\n     pub files: RefCell<Vec<Rc<FileMap>>>,\n-    expansions: RefCell<Vec<ExpnInfo>>\n+    expansions: RefCell<Vec<ExpnInfo>>,\n+    file_loader: Box<FileLoader>\n }\n \n impl CodeMap {\n     pub fn new() -> CodeMap {\n         CodeMap {\n             files: RefCell::new(Vec::new()),\n             expansions: RefCell::new(Vec::new()),\n+            file_loader: Box::new(RealFileLoader)\n+        }\n+    }\n+\n+    pub fn with_file_loader(file_loader: Box<FileLoader>) -> CodeMap {\n+        CodeMap {\n+            files: RefCell::new(Vec::new()),\n+            expansions: RefCell::new(Vec::new()),\n+            file_loader: file_loader\n         }\n     }\n \n+    pub fn file_exists(&self, path: &Path) -> bool {\n+        self.file_loader.file_exists(path)\n+    }\n+\n+    pub fn load_file(&self, path: &Path) -> io::Result<Rc<FileMap>> {\n+        let src = try!(self.file_loader.read_file(path));\n+        Ok(self.new_filemap(path.to_str().unwrap().to_string(), src))\n+    }\n+\n     pub fn new_filemap(&self, filename: FileName, mut src: String) -> Rc<FileMap> {\n         let mut files = self.files.borrow_mut();\n         let start_pos = match files.last() {"}, {"sha": "68574560533fef8c678e93696715253a4cdb81a8", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/07d4f777905a1faedaf965dac4dc37489bc625c0/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07d4f777905a1faedaf965dac4dc37489bc625c0/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=07d4f777905a1faedaf965dac4dc37489bc625c0", "patch": "@@ -19,7 +19,6 @@ use ptr::P;\n use str::char_at;\n \n use std::cell::RefCell;\n-use std::fs::File;\n use std::io::Read;\n use std::iter;\n use std::path::{Path, PathBuf};\n@@ -220,17 +219,18 @@ pub fn new_parser_from_tts<'a>(sess: &'a ParseSess,\n \n /// Given a session and a path and an optional span (for error reporting),\n /// add the path to the session's codemap and return the new filemap.\n-pub fn file_to_filemap(sess: &ParseSess, path: &Path, spanopt: Option<Span>)\n-                       -> Rc<FileMap> {\n-    let mut contents = String::new();\n-    if let Err(e) = File::open(path).and_then(|mut f| f.read_to_string(&mut contents)) {\n-        let msg = format!(\"couldn't read {:?}: {}\", path.display(), e);\n-        match spanopt {\n-            Some(sp) => panic!(sess.span_diagnostic.span_fatal(sp, &msg)),\n-            None => sess.span_diagnostic.handler().fatal(&msg)\n+fn file_to_filemap(sess: &ParseSess, path: &Path, spanopt: Option<Span>)\n+                   -> Rc<FileMap> {\n+    match sess.codemap().load_file(path) {\n+        Ok(filemap) => filemap,\n+        Err(e) => {\n+            let msg = format!(\"couldn't read {:?}: {}\", path.display(), e);\n+            match spanopt {\n+                Some(sp) => panic!(sess.span_diagnostic.span_fatal(sp, &msg)),\n+                None => sess.span_diagnostic.handler().fatal(&msg)\n+            }\n         }\n     }\n-    sess.codemap().new_filemap(path.to_str().unwrap().to_string(), contents)\n }\n \n /// Given a filemap, produce a sequence of token-trees"}, {"sha": "c9d06423a10973d78036db90d688d9d64c5f222e", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/07d4f777905a1faedaf965dac4dc37489bc625c0/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07d4f777905a1faedaf965dac4dc37489bc625c0/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=07d4f777905a1faedaf965dac4dc37489bc625c0", "patch": "@@ -79,7 +79,6 @@ use parse::PResult;\n use diagnostic::FatalError;\n \n use std::collections::HashSet;\n-use std::fs;\n use std::io::prelude::*;\n use std::mem;\n use std::path::{Path, PathBuf};\n@@ -4851,8 +4850,8 @@ impl<'a> Parser<'a> {\n                 let secondary_path_str = format!(\"{}/mod.rs\", mod_name);\n                 let default_path = dir_path.join(&default_path_str[..]);\n                 let secondary_path = dir_path.join(&secondary_path_str[..]);\n-                let default_exists = fs::metadata(&default_path).is_ok();\n-                let secondary_exists = fs::metadata(&secondary_path).is_ok();\n+                let default_exists = self.sess.codemap().file_exists(&default_path);\n+                let secondary_exists = self.sess.codemap().file_exists(&secondary_path);\n \n                 if !self.owns_directory {\n                     self.span_err(id_sp,"}]}