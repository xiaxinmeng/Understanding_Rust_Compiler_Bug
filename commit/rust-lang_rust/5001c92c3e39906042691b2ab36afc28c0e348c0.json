{"sha": "5001c92c3e39906042691b2ab36afc28c0e348c0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwMDFjOTJjM2UzOTkwNjA0MjY5MWIyYWIzNmFmYzI4YzBlMzQ4YzA=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-07-27T18:42:58Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-08-10T00:28:45Z"}, "message": "stop hashing nested items, and add a test", "tree": {"sha": "e41595c994bb7ad5ba2ff1913ac78b557bbd4035", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e41595c994bb7ad5ba2ff1913ac78b557bbd4035"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5001c92c3e39906042691b2ab36afc28c0e348c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5001c92c3e39906042691b2ab36afc28c0e348c0", "html_url": "https://github.com/rust-lang/rust/commit/5001c92c3e39906042691b2ab36afc28c0e348c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5001c92c3e39906042691b2ab36afc28c0e348c0/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "775bd93d72038d6f5175234576d1ea582f0573a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/775bd93d72038d6f5175234576d1ea582f0573a9", "html_url": "https://github.com/rust-lang/rust/commit/775bd93d72038d6f5175234576d1ea582f0573a9"}], "stats": {"total": 72, "additions": 52, "deletions": 20}, "files": [{"sha": "de53da2fd36ad3ccd823864612b086363270f5ed", "filename": "src/librustc_incremental/calculate_svh.rs", "status": "modified", "additions": 16, "deletions": 20, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/5001c92c3e39906042691b2ab36afc28c0e348c0/src%2Flibrustc_incremental%2Fcalculate_svh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5001c92c3e39906042691b2ab36afc28c0e348c0/src%2Flibrustc_incremental%2Fcalculate_svh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fcalculate_svh.rs?ref=5001c92c3e39906042691b2ab36afc28c0e348c0", "patch": "@@ -182,7 +182,6 @@ mod svh_visitor {\n         SawMod,\n         SawForeignItem,\n         SawItem,\n-        SawDecl,\n         SawTy,\n         SawGenerics,\n         SawFn,\n@@ -285,24 +284,13 @@ mod svh_visitor {\n     /// SawStmtComponent is analogous to SawExprComponent, but for statements.\n     #[derive(Hash)]\n     pub enum SawStmtComponent {\n-        SawStmtDecl,\n         SawStmtExpr,\n         SawStmtSemi,\n     }\n \n-    fn saw_stmt(node: &Stmt_) -> SawStmtComponent {\n-        match *node {\n-            StmtDecl(..) => SawStmtDecl,\n-            StmtExpr(..) => SawStmtExpr,\n-            StmtSemi(..) => SawStmtSemi,\n-        }\n-    }\n-\n     impl<'a, 'tcx> Visitor<'a> for StrictVersionHashVisitor<'a, 'tcx> {\n-        fn visit_nested_item(&mut self, item: ItemId) {\n-            let def_path = self.tcx.map.def_path_from_id(item.id).unwrap();\n-            debug!(\"visit_nested_item: def_path={:?} st={:?}\", def_path, self.st);\n-            self.hash_def_path(&def_path);\n+        fn visit_nested_item(&mut self, _: ItemId) {\n+            // Each item is hashed independently; ignore nested items.\n         }\n \n         fn visit_variant_data(&mut self, s: &'a VariantData, name: Name,\n@@ -362,7 +350,20 @@ mod svh_visitor {\n \n         fn visit_stmt(&mut self, s: &'a Stmt) {\n             debug!(\"visit_stmt: st={:?}\", self.st);\n-            SawStmt(saw_stmt(&s.node)).hash(self.st); visit::walk_stmt(self, s)\n+\n+            // We don't want to modify the hash for decls, because\n+            // they might be item decls (if they are local decls,\n+            // we'll hash that fact in visit_local); but we do want to\n+            // remember if this was a StmtExpr or StmtSemi (the later\n+            // had an explicit semi-colon; this affects the typing\n+            // rules).\n+            match s.node {\n+                StmtDecl(..) => (),\n+                StmtExpr(..) => SawStmt(SawStmtExpr).hash(self.st),\n+                StmtSemi(..) => SawStmt(SawStmtSemi).hash(self.st),\n+            }\n+\n+            visit::walk_stmt(self, s)\n         }\n \n         fn visit_foreign_item(&mut self, i: &'a ForeignItem) {\n@@ -390,11 +391,6 @@ mod svh_visitor {\n             SawMod.hash(self.st); visit::walk_mod(self, m, n)\n         }\n \n-        fn visit_decl(&mut self, d: &'a Decl) {\n-            debug!(\"visit_decl: st={:?}\", self.st);\n-            SawDecl.hash(self.st); visit::walk_decl(self, d)\n-        }\n-\n         fn visit_ty(&mut self, t: &'a Ty) {\n             debug!(\"visit_ty: st={:?}\", self.st);\n             SawTy.hash(self.st); visit::walk_ty(self, t)"}, {"sha": "4466cfb1317d961d6b24919a9a21d1e02a92c37b", "filename": "src/test/incremental/ich_nested_items.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/5001c92c3e39906042691b2ab36afc28c0e348c0/src%2Ftest%2Fincremental%2Fich_nested_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5001c92c3e39906042691b2ab36afc28c0e348c0/src%2Ftest%2Fincremental%2Fich_nested_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fich_nested_items.rs?ref=5001c92c3e39906042691b2ab36afc28c0e348c0", "patch": "@@ -0,0 +1,36 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check that the hash of `foo` doesn't change just because we ordered\n+// the nested items (or even added new ones).\n+\n+// revisions: rpass1 rpass2\n+\n+#![feature(rustc_attrs)]\n+\n+#[cfg(rpass1)]\n+fn foo() {\n+    fn bar() { }\n+    fn baz() { }\n+}\n+\n+#[cfg(rpass2)]\n+#[rustc_clean(label=\"Hir\", cfg=\"rpass2\")]\n+fn foo() {\n+    #[rustc_clean(label=\"Hir\", cfg=\"rpass2\")]\n+    fn baz() { } // order is different...\n+\n+    #[rustc_clean(label=\"Hir\", cfg=\"rpass2\")]\n+    fn bar() { } // but that doesn't matter.\n+\n+    fn bap() { } // neither does adding a new item\n+}\n+\n+fn main() { }"}]}