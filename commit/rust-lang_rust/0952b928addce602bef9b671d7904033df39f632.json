{"sha": "0952b928addce602bef9b671d7904033df39f632", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5NTJiOTI4YWRkY2U2MDJiZWY5YjY3MWQ3OTA0MDMzZGYzOWY2MzI=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-11-07T18:39:33Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-11-07T18:39:33Z"}, "message": "Merge #217\n\n217: Complete paths in use trees r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "8951f181a563fbb08199ab99f383f2d01a756f05", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8951f181a563fbb08199ab99f383f2d01a756f05"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0952b928addce602bef9b671d7904033df39f632", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0952b928addce602bef9b671d7904033df39f632", "html_url": "https://github.com/rust-lang/rust/commit/0952b928addce602bef9b671d7904033df39f632", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0952b928addce602bef9b671d7904033df39f632/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "06fbc6e3edca1e53f1034bf779f2677d87076c1c", "url": "https://api.github.com/repos/rust-lang/rust/commits/06fbc6e3edca1e53f1034bf779f2677d87076c1c", "html_url": "https://github.com/rust-lang/rust/commit/06fbc6e3edca1e53f1034bf779f2677d87076c1c"}, {"sha": "6d253b58da955cee73b0715b91d728df5009937d", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d253b58da955cee73b0715b91d728df5009937d", "html_url": "https://github.com/rust-lang/rust/commit/6d253b58da955cee73b0715b91d728df5009937d"}], "stats": {"total": 71, "additions": 66, "deletions": 5}, "files": [{"sha": "6c5fd0be6c97c2d09e587a8276c981c6ddd7697d", "filename": "crates/ra_analysis/src/completion/reference_completion.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0952b928addce602bef9b671d7904033df39f632/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Freference_completion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0952b928addce602bef9b671d7904033df39f632/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Freference_completion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Freference_completion.rs?ref=0952b928addce602bef9b671d7904033df39f632", "patch": "@@ -105,6 +105,9 @@ fn classify_name_ref(name_ref: ast::NameRef) -> Option<NameRefKind> {\n     let parent = name_ref.syntax().parent()?;\n     if let Some(segment) = ast::PathSegment::cast(parent) {\n         let path = segment.parent_path();\n+        if let Some(crate_path) = crate_path(path) {\n+            return Some(NameRefKind::CratePath(crate_path));\n+        }\n         if path.qualifier().is_none() {\n             let enclosing_fn = name_ref\n                 .syntax()\n@@ -113,9 +116,6 @@ fn classify_name_ref(name_ref: ast::NameRef) -> Option<NameRefKind> {\n                 .find_map(ast::FnDef::cast);\n             return Some(NameRefKind::LocalRef { enclosing_fn });\n         }\n-        if let Some(crate_path) = crate_path(path) {\n-            return Some(NameRefKind::CratePath(crate_path));\n-        }\n     }\n     None\n }\n@@ -129,10 +129,21 @@ fn crate_path(mut path: ast::Path) -> Option<Vec<ast::NameRef>> {\n             ast::PathSegmentKind::CrateKw => break,\n             ast::PathSegmentKind::SelfKw | ast::PathSegmentKind::SuperKw => return None,\n         }\n-        path = path.qualifier()?;\n+        path = qualifier(path)?;\n     }\n     res.reverse();\n-    Some(res)\n+    return Some(res);\n+\n+    fn qualifier(path: ast::Path) -> Option<ast::Path> {\n+        if let Some(q) = path.qualifier() {\n+            return Some(q);\n+        }\n+        // TODO: this bottom up traversal is not too precise.\n+        // Should we handle do a top-down analysiss, recording results?\n+        let use_tree_list = path.syntax().ancestors().find_map(ast::UseTreeList::cast)?;\n+        let use_tree = use_tree_list.parent_use_tree();\n+        use_tree.path()\n+    }\n }\n \n fn complete_fn(name_ref: ast::NameRef, scopes: &FnScopes, acc: &mut Vec<CompletionItem>) {"}, {"sha": "719c166b5cb33a58f63b147b7bf4651a64520c60", "filename": "crates/ra_analysis/tests/tests.rs", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/0952b928addce602bef9b671d7904033df39f632/crates%2Fra_analysis%2Ftests%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0952b928addce602bef9b671d7904033df39f632/crates%2Fra_analysis%2Ftests%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Ftests%2Ftests.rs?ref=0952b928addce602bef9b671d7904033df39f632", "patch": "@@ -452,3 +452,44 @@ fn test_complete_crate_path() {\n         &completions,\n     );\n }\n+\n+#[test]\n+fn test_complete_crate_path_with_braces() {\n+    let (analysis, position) = analysis_and_position(\n+        \"\n+        //- /lib.rs\n+        mod foo;\n+        struct Spam;\n+        //- /foo.rs\n+        use crate::{Sp<|>};\n+    \",\n+    );\n+    let completions = analysis.completions(position).unwrap().unwrap();\n+    assert_eq_dbg(\n+        r#\"[CompletionItem { label: \"foo\", lookup: None, snippet: None },\n+            CompletionItem { label: \"Spam\", lookup: None, snippet: None }]\"#,\n+        &completions,\n+    );\n+}\n+\n+#[test]\n+fn test_complete_crate_path_in_nested_tree() {\n+    let (analysis, position) = analysis_and_position(\n+        \"\n+        //- /lib.rs\n+        mod foo;\n+        pub mod bar {\n+            pub mod baz {\n+                pub struct Spam;\n+            }\n+        }\n+        //- /foo.rs\n+        use crate::{bar::{baz::Sp<|>}};\n+    \",\n+    );\n+    let completions = analysis.completions(position).unwrap().unwrap();\n+    assert_eq_dbg(\n+        r#\"[CompletionItem { label: \"Spam\", lookup: None, snippet: None }]\"#,\n+        &completions,\n+    );\n+}"}, {"sha": "6b0d62610c301845494b44cb74a710ff02963212", "filename": "crates/ra_syntax/src/ast/mod.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0952b928addce602bef9b671d7904033df39f632/crates%2Fra_syntax%2Fsrc%2Fast%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0952b928addce602bef9b671d7904033df39f632/crates%2Fra_syntax%2Fsrc%2Fast%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fmod.rs?ref=0952b928addce602bef9b671d7904033df39f632", "patch": "@@ -296,6 +296,15 @@ impl<'a> PathSegment<'a> {\n     }\n }\n \n+impl<'a> UseTreeList<'a> {\n+    pub fn parent_use_tree(self) -> UseTree<'a> {\n+        self.syntax()\n+            .parent()\n+            .and_then(UseTree::cast)\n+            .expect(\"UseTreeLists are always nested in UseTrees\")\n+    }\n+}\n+\n fn child_opt<'a, P: AstNode<'a>, C: AstNode<'a>>(parent: P) -> Option<C> {\n     children(parent).next()\n }"}]}