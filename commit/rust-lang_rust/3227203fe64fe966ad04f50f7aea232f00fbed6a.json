{"sha": "3227203fe64fe966ad04f50f7aea232f00fbed6a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyMjcyMDNmZTY0ZmU5NjZhZDA0ZjUwZjdhZWEyMzJmMDBmYmVkNmE=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-06-27T09:58:44Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-06-27T12:29:28Z"}, "message": "Don't use a 1-to-1 mapping between mir local and cranelift_frontend variable", "tree": {"sha": "17183a5188ba536dbc8eaf6ea47b58ffe3b79ff4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17183a5188ba536dbc8eaf6ea47b58ffe3b79ff4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3227203fe64fe966ad04f50f7aea232f00fbed6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3227203fe64fe966ad04f50f7aea232f00fbed6a", "html_url": "https://github.com/rust-lang/rust/commit/3227203fe64fe966ad04f50f7aea232f00fbed6a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3227203fe64fe966ad04f50f7aea232f00fbed6a/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4bfc4a14b668fff3aa8fc1500bb27be8c7fefc17", "url": "https://api.github.com/repos/rust-lang/rust/commits/4bfc4a14b668fff3aa8fc1500bb27be8c7fefc17", "html_url": "https://github.com/rust-lang/rust/commit/4bfc4a14b668fff3aa8fc1500bb27be8c7fefc17"}], "stats": {"total": 44, "additions": 25, "deletions": 19}, "files": [{"sha": "0bfc00c83678467ad4b770024cb853b317163284", "filename": "src/abi/comments.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3227203fe64fe966ad04f50f7aea232f00fbed6a/src%2Fabi%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3227203fe64fe966ad04f50f7aea232f00fbed6a/src%2Fabi%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fcomments.rs?ref=3227203fe64fe966ad04f50f7aea232f00fbed6a", "patch": "@@ -2,6 +2,8 @@ use std::borrow::Cow;\n \n use rustc_middle::mir;\n \n+use cranelift_codegen::entity::EntityRef;\n+\n use crate::abi::pass_mode::*;\n use crate::prelude::*;\n \n@@ -72,9 +74,9 @@ pub(super) fn add_local_place_comments<'tcx>(\n     } = layout;\n \n     let (kind, extra) = match *place.inner() {\n-        CPlaceInner::Var(var) => {\n-            assert_eq!(local, var);\n-            (\"ssa\", std::borrow::Cow::Borrowed(\"\"))\n+        CPlaceInner::Var(place_local, var) => {\n+            assert_eq!(local, place_local);\n+            (\"ssa\", Cow::Owned(format!(\",var={}\", var.index())))\n         }\n         CPlaceInner::Addr(ptr, meta) => {\n             let meta = if let Some(meta) = meta {"}, {"sha": "20081a408fe96a8a925ca41a5dd65922b9f52e80", "filename": "src/base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3227203fe64fe966ad04f50f7aea232f00fbed6a/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3227203fe64fe966ad04f50f7aea232f00fbed6a/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=3227203fe64fe966ad04f50f7aea232f00fbed6a", "patch": "@@ -51,6 +51,7 @@ pub(crate) fn trans_fn<'tcx, B: Backend + 'static>(\n         constants_cx: &mut cx.constants_cx,\n         vtables: &mut cx.vtables,\n         source_info_set: indexmap::IndexSet::new(),\n+        next_ssa_var: 0,\n     };\n \n     let arg_uninhabited = fx.mir.args_iter().any(|arg| fx.layout_of(fx.monomorphize(&fx.mir.local_decls[arg].ty)).abi.is_uninhabited());"}, {"sha": "248ac14d7e451ab6951b51a6198b0ca15538e0c7", "filename": "src/common.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3227203fe64fe966ad04f50f7aea232f00fbed6a/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3227203fe64fe966ad04f50f7aea232f00fbed6a/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=3227203fe64fe966ad04f50f7aea232f00fbed6a", "patch": "@@ -6,10 +6,6 @@ use cranelift_codegen::ir::{InstructionData, Opcode, ValueDef};\n \n use crate::prelude::*;\n \n-pub(crate) fn mir_var(loc: Local) -> Variable {\n-    Variable::with_u32(loc.index() as u32)\n-}\n-\n pub(crate) fn pointer_ty(tcx: TyCtxt<'_>) -> types::Type {\n     match tcx.data_layout.pointer_size.bits() {\n         16 => types::I16,\n@@ -258,6 +254,9 @@ pub(crate) struct FunctionCx<'clif, 'tcx, B: Backend + 'static> {\n     pub(crate) vtables: &'clif mut FxHashMap<(Ty<'tcx>, Option<ty::PolyExistentialTraitRef<'tcx>>), DataId>,\n \n     pub(crate) source_info_set: indexmap::IndexSet<SourceInfo>,\n+\n+    /// This should only be accessed by `CPlace::new_var`.\n+    pub(crate) next_ssa_var: u32,\n }\n \n impl<'tcx, B: Backend> LayoutOf for FunctionCx<'_, 'tcx, B> {"}, {"sha": "4b22f06f3d14a451e38dc6dfd8b8bf579db62426", "filename": "src/debuginfo/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3227203fe64fe966ad04f50f7aea232f00fbed6a/src%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3227203fe64fe966ad04f50f7aea232f00fbed6a/src%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Fmod.rs?ref=3227203fe64fe966ad04f50f7aea232f00fbed6a", "patch": "@@ -4,6 +4,7 @@ mod unwind;\n \n use crate::prelude::*;\n \n+use cranelift_codegen::entity::EntityRef;\n use cranelift_codegen::ir::{StackSlots, ValueLabel, ValueLoc};\n use cranelift_codegen::isa::TargetIsa;\n use cranelift_codegen::ValueLocRange;\n@@ -376,8 +377,8 @@ fn place_location<'tcx>(\n     assert!(place.projection.is_empty()); // FIXME implement them\n \n     match local_map[&place.local].inner() {\n-        CPlaceInner::Var(local) => {\n-            let value_label = cranelift_codegen::ir::ValueLabel::from_u32(local.as_u32());\n+        CPlaceInner::Var(_local, var) => {\n+            let value_label = cranelift_codegen::ir::ValueLabel::new(var.index());\n             if let Some(value_loc_ranges) = value_labels_ranges.get(&value_label) {\n                 let loc_list = LocationList(\n                     value_loc_ranges"}, {"sha": "c25458856b68e6bad50718278d00699a944d96ec", "filename": "src/value_and_place.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3227203fe64fe966ad04f50f7aea232f00fbed6a/src%2Fvalue_and_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3227203fe64fe966ad04f50f7aea232f00fbed6a/src%2Fvalue_and_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvalue_and_place.rs?ref=3227203fe64fe966ad04f50f7aea232f00fbed6a", "patch": "@@ -1,5 +1,6 @@\n use crate::prelude::*;\n \n+use cranelift_codegen::entity::EntityRef;\n use cranelift_codegen::ir::immediates::Offset32;\n \n fn codegen_field<'tcx>(\n@@ -256,7 +257,7 @@ pub(crate) struct CPlace<'tcx> {\n \n #[derive(Debug, Copy, Clone)]\n pub(crate) enum CPlaceInner {\n-    Var(Local),\n+    Var(Local, Variable),\n     Addr(Pointer, Option<Value>),\n }\n \n@@ -301,10 +302,12 @@ impl<'tcx> CPlace<'tcx> {\n         local: Local,\n         layout: TyAndLayout<'tcx>,\n     ) -> CPlace<'tcx> {\n+        let var = Variable::with_u32(fx.next_ssa_var);\n+        fx.next_ssa_var += 1;\n         fx.bcx\n-            .declare_var(mir_var(local), fx.clif_type(layout.ty).unwrap());\n+            .declare_var(var, fx.clif_type(layout.ty).unwrap());\n         CPlace {\n-            inner: CPlaceInner::Var(local),\n+            inner: CPlaceInner::Var(local, var),\n             layout,\n         }\n     }\n@@ -326,9 +329,9 @@ impl<'tcx> CPlace<'tcx> {\n     pub(crate) fn to_cvalue(self, fx: &mut FunctionCx<'_, 'tcx, impl Backend>) -> CValue<'tcx> {\n         let layout = self.layout();\n         match self.inner {\n-            CPlaceInner::Var(var) => {\n-                let val = fx.bcx.use_var(mir_var(var));\n-                fx.bcx.set_val_label(val, cranelift_codegen::ir::ValueLabel::from_u32(var.as_u32()));\n+            CPlaceInner::Var(_local, var) => {\n+                let val = fx.bcx.use_var(var);\n+                fx.bcx.set_val_label(val, cranelift_codegen::ir::ValueLabel::new(var.index()));\n                 CValue::by_val(val, layout)\n             }\n             CPlaceInner::Addr(ptr, extra) => {\n@@ -351,7 +354,7 @@ impl<'tcx> CPlace<'tcx> {\n     pub(crate) fn to_ptr_maybe_unsized(self) -> (Pointer, Option<Value>) {\n         match self.inner {\n             CPlaceInner::Addr(ptr, extra) => (ptr, extra),\n-            CPlaceInner::Var(_) => bug!(\"Expected CPlace::Addr, found {:?}\", self),\n+            CPlaceInner::Var(_, _) => bug!(\"Expected CPlace::Addr, found {:?}\", self),\n         }\n     }\n \n@@ -442,7 +445,7 @@ impl<'tcx> CPlace<'tcx> {\n \n         let dst_layout = self.layout();\n         let to_ptr = match self.inner {\n-            CPlaceInner::Var(var) => {\n+            CPlaceInner::Var(_local, var) => {\n                 let data = CValue(from.0, dst_layout).load_scalar(fx);\n                 let src_ty = fx.bcx.func.dfg.value_type(data);\n                 let dst_ty = fx.clif_type(self.layout().ty).unwrap();\n@@ -459,8 +462,8 @@ impl<'tcx> CPlace<'tcx> {\n                     }\n                     _ => unreachable!(\"write_cvalue_transmute: {:?} -> {:?}\", src_ty, dst_ty),\n                 };\n-                fx.bcx.set_val_label(data, cranelift_codegen::ir::ValueLabel::from_u32(var.as_u32()));\n-                fx.bcx.def_var(mir_var(var), data);\n+                fx.bcx.set_val_label(data, cranelift_codegen::ir::ValueLabel::new(var.index()));\n+                fx.bcx.def_var(var, data);\n                 return;\n             }\n             CPlaceInner::Addr(ptr, None) => {"}]}