{"sha": "85a726e7540b801924cfb207e7b5714e00080471", "node_id": "C_kwDOAAsO6NoAKDg1YTcyNmU3NTQwYjgwMTkyNGNmYjIwN2U3YjU3MTRlMDAwODA0NzE", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-09-30T01:38:15Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-09-30T01:39:20Z"}, "message": "Remove expr_parentheses_needed from ParseSess", "tree": {"sha": "5bae06cfc9e67a5bf98a0ec81de89e60452bb811", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5bae06cfc9e67a5bf98a0ec81de89e60452bb811"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85a726e7540b801924cfb207e7b5714e00080471", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85a726e7540b801924cfb207e7b5714e00080471", "html_url": "https://github.com/rust-lang/rust/commit/85a726e7540b801924cfb207e7b5714e00080471", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85a726e7540b801924cfb207e7b5714e00080471/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f1a21ae2bd41b3dd335c44f38f29a1fb8712ddc", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f1a21ae2bd41b3dd335c44f38f29a1fb8712ddc", "html_url": "https://github.com/rust-lang/rust/commit/9f1a21ae2bd41b3dd335c44f38f29a1fb8712ddc"}], "stats": {"total": 31, "additions": 14, "deletions": 17}, "files": [{"sha": "09362eab673e83faf667157c8173e9a8942bb986", "filename": "compiler/rustc_hir_analysis/src/check/expr.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/85a726e7540b801924cfb207e7b5714e00080471/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a726e7540b801924cfb207e7b5714e00080471/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fexpr.rs?ref=85a726e7540b801924cfb207e7b5714e00080471", "patch": "@@ -41,6 +41,7 @@ use rustc_middle::ty::adjustment::{Adjust, Adjustment, AllowTwoPhase};\n use rustc_middle::ty::error::TypeError::FieldMisMatch;\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::{self, AdtKind, Ty, TypeVisitable};\n+use rustc_session::errors::ExprParenthesesNeeded;\n use rustc_session::parse::feature_err;\n use rustc_span::hygiene::DesugaringKind;\n use rustc_span::lev_distance::find_best_match_for_name;\n@@ -394,7 +395,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         if let Some(sp) =\n                             tcx.sess.parse_sess.ambiguous_block_expr_parse.borrow().get(&sp)\n                         {\n-                            tcx.sess.parse_sess.expr_parentheses_needed(&mut err, *sp);\n+                            err.subdiagnostic(ExprParenthesesNeeded::surrounding(*sp));\n                         }\n                         err.emit();\n                         oprnd_t = tcx.ty_error();"}, {"sha": "05ed3b299726c03fceb87b1048f1f5aee9829469", "filename": "compiler/rustc_hir_analysis/src/check/fn_ctxt/suggestions.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/85a726e7540b801924cfb207e7b5714e00080471/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a726e7540b801924cfb207e7b5714e00080471/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs?ref=85a726e7540b801924cfb207e7b5714e00080471", "patch": "@@ -15,6 +15,7 @@ use rustc_infer::infer::{self, TyCtxtInferExt};\n use rustc_infer::traits::{self, StatementAsExpression};\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::{self, Binder, IsSuggestable, ToPredicate, Ty};\n+use rustc_session::errors::ExprParenthesesNeeded;\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n use rustc_trait_selection::infer::InferCtxtExt;\n@@ -895,7 +896,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let sp = self.tcx.sess.source_map().start_point(expr.span);\n         if let Some(sp) = self.tcx.sess.parse_sess.ambiguous_block_expr_parse.borrow().get(&sp) {\n             // `{ 42 } &&x` (#61475) or `{ 42 } && if x { 1 } else { 0 }`\n-            self.tcx.sess.parse_sess.expr_parentheses_needed(err, *sp);\n+            err.subdiagnostic(ExprParenthesesNeeded::surrounding(*sp));\n         }\n     }\n "}, {"sha": "2d7d9020e3ecc9f8afd7087ac5700c3e6940cea5", "filename": "compiler/rustc_hir_analysis/src/check/op.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/85a726e7540b801924cfb207e7b5714e00080471/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a726e7540b801924cfb207e7b5714e00080471/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fop.rs?ref=85a726e7540b801924cfb207e7b5714e00080471", "patch": "@@ -13,6 +13,7 @@ use rustc_middle::ty::adjustment::{\n };\n use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::{self, DefIdTree, Ty, TyCtxt, TypeFolder, TypeSuperFoldable, TypeVisitable};\n+use rustc_session::errors::ExprParenthesesNeeded;\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{sym, Ident};\n use rustc_span::Span;\n@@ -677,7 +678,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         // If the previous expression was a block expression, suggest parentheses\n                         // (turning this into a binary subtraction operation instead.)\n                         // for example, `{2} - 2` -> `({2}) - 2` (see src\\test\\ui\\parser\\expr-as-stmt.rs)\n-                        self.tcx.sess.parse_sess.expr_parentheses_needed(&mut err, *sp);\n+                        err.subdiagnostic(ExprParenthesesNeeded::surrounding(*sp));\n                     } else {\n                         match actual.kind() {\n                             Uint(_) if op == hir::UnOp::Neg => {"}, {"sha": "f57bd9cec19200610617ed28edb52115ef57ec84", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/85a726e7540b801924cfb207e7b5714e00080471/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a726e7540b801924cfb207e7b5714e00080471/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=85a726e7540b801924cfb207e7b5714e00080471", "patch": "@@ -33,6 +33,7 @@ use rustc_errors::{\n     fluent, Applicability, DiagnosticBuilder, DiagnosticMessage, Handler, MultiSpan, PResult,\n };\n use rustc_errors::{pluralize, Diagnostic, ErrorGuaranteed, IntoDiagnostic};\n+use rustc_session::errors::ExprParenthesesNeeded;\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{kw, sym, Ident};\n use rustc_span::{Span, SpanSnippetError, DUMMY_SP};\n@@ -2049,7 +2050,7 @@ impl<'a> Parser<'a> {\n         let mut err = self.struct_span_err(span, &msg);\n         let sp = self.sess.source_map().start_point(self.token.span);\n         if let Some(sp) = self.sess.ambiguous_block_expr_parse.borrow().get(&sp) {\n-            self.sess.expr_parentheses_needed(&mut err, *sp);\n+            err.subdiagnostic(ExprParenthesesNeeded::surrounding(*sp));\n         }\n         err.span_label(span, \"expected expression\");\n         err"}, {"sha": "11301f03e48eb70615f05abbcc8deb3c3e1393f8", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85a726e7540b801924cfb207e7b5714e00080471/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a726e7540b801924cfb207e7b5714e00080471/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=85a726e7540b801924cfb207e7b5714e00080471", "patch": "@@ -1310,7 +1310,7 @@ impl<'a> Parser<'a> {\n                 // If the input is something like `if a { 1 } else { 2 } | if a { 3 } else { 4 }`\n                 // then suggest parens around the lhs.\n                 if let Some(sp) = self.sess.ambiguous_block_expr_parse.borrow().get(&lo) {\n-                    self.sess.expr_parentheses_needed(&mut err, *sp);\n+                    err.subdiagnostic(ExprParenthesesNeeded::surrounding(*sp));\n                 }\n                 err\n             })"}, {"sha": "0250b518243c1ee9dce286102231d377e4e1e731", "filename": "compiler/rustc_parse/src/parser/pat.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/85a726e7540b801924cfb207e7b5714e00080471/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a726e7540b801924cfb207e7b5714e00080471/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs?ref=85a726e7540b801924cfb207e7b5714e00080471", "patch": "@@ -10,6 +10,7 @@ use rustc_ast::{\n };\n use rustc_ast_pretty::pprust;\n use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder, ErrorGuaranteed, PResult};\n+use rustc_session::errors::ExprParenthesesNeeded;\n use rustc_span::source_map::{respan, Span, Spanned};\n use rustc_span::symbol::{kw, sym, Ident};\n \n@@ -693,7 +694,7 @@ impl<'a> Parser<'a> {\n \n         let sp = self.sess.source_map().start_point(self.token.span);\n         if let Some(sp) = self.sess.ambiguous_block_expr_parse.borrow().get(&sp) {\n-            self.sess.expr_parentheses_needed(&mut err, *sp);\n+            err.subdiagnostic(ExprParenthesesNeeded::surrounding(*sp));\n         }\n \n         Err(err)"}, {"sha": "2c3d8d5283b5736c9004d9e86d755746a912e8eb", "filename": "compiler/rustc_session/src/parse.rs", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/85a726e7540b801924cfb207e7b5714e00080471/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a726e7540b801924cfb207e7b5714e00080471/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fparse.rs?ref=85a726e7540b801924cfb207e7b5714e00080471", "patch": "@@ -2,9 +2,7 @@\n //! It also serves as an input to the parser itself.\n \n use crate::config::CheckCfg;\n-use crate::errors::{\n-    ExprParenthesesNeeded, FeatureDiagnosticForIssue, FeatureDiagnosticHelp, FeatureGateError,\n-};\n+use crate::errors::{FeatureDiagnosticForIssue, FeatureDiagnosticHelp, FeatureGateError};\n use crate::lint::{\n     builtin::UNSTABLE_SYNTAX_PRE_EXPANSION, BufferedEarlyLint, BuiltinLintDiagnostics, Lint, LintId,\n };\n@@ -13,8 +11,8 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexSet};\n use rustc_data_structures::sync::{Lock, Lrc};\n use rustc_errors::{emitter::SilentEmitter, ColorConfig, Handler};\n use rustc_errors::{\n-    fallback_fluent_bundle, AddToDiagnostic, Diagnostic, DiagnosticBuilder, DiagnosticId,\n-    DiagnosticMessage, EmissionGuarantee, ErrorGuaranteed, IntoDiagnostic, MultiSpan, StashKey,\n+    fallback_fluent_bundle, Diagnostic, DiagnosticBuilder, DiagnosticId, DiagnosticMessage,\n+    EmissionGuarantee, ErrorGuaranteed, IntoDiagnostic, MultiSpan, StashKey,\n };\n use rustc_feature::{find_feature_issue, GateIssue, UnstableFeatures};\n use rustc_span::edition::Edition;\n@@ -324,12 +322,6 @@ impl ParseSess {\n         });\n     }\n \n-    /// Extend an error with a suggestion to wrap an expression with parentheses to allow the\n-    /// parser to continue parsing the following operation as part of the same expression.\n-    pub fn expr_parentheses_needed(&self, err: &mut Diagnostic, span: Span) {\n-        ExprParenthesesNeeded::surrounding(span).add_to_diagnostic(err);\n-    }\n-\n     pub fn save_proc_macro_span(&self, span: Span) -> usize {\n         let mut spans = self.proc_macro_quoted_spans.lock();\n         spans.push(span);"}]}