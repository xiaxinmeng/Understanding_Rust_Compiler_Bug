{"sha": "92e966e099421654c3a76c6cb39f6b9dd6eececc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyZTk2NmUwOTk0MjE2NTRjM2E3NmM2Y2IzOWY2YjlkZDZlZWNlY2M=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-28T13:13:31Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-29T12:49:02Z"}, "message": "register snaphots", "tree": {"sha": "48a24a596351715d9ff801789ff254a3fae6441d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48a24a596351715d9ff801789ff254a3fae6441d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/92e966e099421654c3a76c6cb39f6b9dd6eececc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/92e966e099421654c3a76c6cb39f6b9dd6eececc", "html_url": "https://github.com/rust-lang/rust/commit/92e966e099421654c3a76c6cb39f6b9dd6eececc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/92e966e099421654c3a76c6cb39f6b9dd6eececc/comments", "author": null, "committer": null, "parents": [{"sha": "16a2503a1c4c99a50ceea148d56dc8a6309be048", "url": "https://api.github.com/repos/rust-lang/rust/commits/16a2503a1c4c99a50ceea148d56dc8a6309be048", "html_url": "https://github.com/rust-lang/rust/commit/16a2503a1c4c99a50ceea148d56dc8a6309be048"}], "stats": {"total": 40, "additions": 10, "deletions": 30}, "files": [{"sha": "b1deb8a36ade4a6399766b4d3f2ccf8ce710e559", "filename": "src/compiletest/common.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/92e966e099421654c3a76c6cb39f6b9dd6eececc/src%2Fcompiletest%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92e966e099421654c3a76c6cb39f6b9dd6eececc/src%2Fcompiletest%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcommon.rs?ref=92e966e099421654c3a76c6cb39f6b9dd6eececc", "patch": "@@ -12,20 +12,6 @@ pub use self::Mode::*;\n use std::fmt;\n use std::str::FromStr;\n \n-#[cfg(stage0)] // NOTE: remove impl after snapshot\n-#[derive(Clone, Copy, PartialEq, Show)]\n-pub enum Mode {\n-    CompileFail,\n-    RunFail,\n-    RunPass,\n-    RunPassValgrind,\n-    Pretty,\n-    DebugInfoGdb,\n-    DebugInfoLldb,\n-    Codegen\n-}\n-\n-#[cfg(not(stage0))] // NOTE: remove cfg after snapshot\n #[derive(Clone, Copy, PartialEq, Debug)]\n pub enum Mode {\n     CompileFail,"}, {"sha": "357ccec7cf3520bb4abad2f6b05a677d09448bf7", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/92e966e099421654c3a76c6cb39f6b9dd6eececc/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92e966e099421654c3a76c6cb39f6b9dd6eececc/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=92e966e099421654c3a76c6cb39f6b9dd6eececc", "patch": "@@ -23,6 +23,7 @@\n #![feature(os)]\n #![feature(unicode)]\n \n+#![allow(unstable)]\n #![deny(warnings)]\n \n extern crate test;"}, {"sha": "858808dd6ba725250b9ce48f847fff76b7bc6270", "filename": "src/libcore/any.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/92e966e099421654c3a76c6cb39f6b9dd6eececc/src%2Flibcore%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92e966e099421654c3a76c6cb39f6b9dd6eececc/src%2Flibcore%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fany.rs?ref=92e966e099421654c3a76c6cb39f6b9dd6eececc", "patch": "@@ -166,7 +166,6 @@ impl Any {\n ///\n /// A `TypeId` is currently only available for types which ascribe to `'static`,\n /// but this limitation may be removed in the future.\n-#[cfg_attr(stage0, lang = \"type_id\")]\n #[derive(Clone, Copy, PartialEq, Eq, Show, Hash)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct TypeId {"}, {"sha": "50021c668d54df344e90e14b9a5c334f60207f6f", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/92e966e099421654c3a76c6cb39f6b9dd6eececc/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92e966e099421654c3a76c6cb39f6b9dd6eececc/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=92e966e099421654c3a76c6cb39f6b9dd6eececc", "patch": "@@ -32,9 +32,6 @@ pub use self::num::radix;\n pub use self::num::Radix;\n pub use self::num::RadixFmt;\n \n-#[cfg(stage0)] pub use self::Debug as Show;\n-#[cfg(stage0)] pub use self::Display as String;\n-\n mod num;\n mod float;\n pub mod rt;\n@@ -243,7 +240,6 @@ impl<'a> Display for Arguments<'a> {\n #[unstable(feature = \"core\",\n            reason = \"I/O and core have yet to be reconciled\")]\n #[deprecated(since = \"1.0.0\", reason = \"renamed to Debug\")]\n-#[cfg(not(stage0))]\n pub trait Show {\n     /// Formats the value using the given formatter.\n     fn fmt(&self, &mut Formatter) -> Result;\n@@ -261,7 +257,6 @@ pub trait Debug {\n     fn fmt(&self, &mut Formatter) -> Result;\n }\n \n-#[cfg(not(stage0))]\n impl<T: Show + ?Sized> Debug for T {\n     #[allow(deprecated)]\n     fn fmt(&self, f: &mut Formatter) -> Result { Show::fmt(self, f) }\n@@ -271,7 +266,6 @@ impl<T: Show + ?Sized> Debug for T {\n /// used. It corresponds to the default format, `{}`.\n #[unstable(feature = \"core\")]\n #[deprecated(since = \"1.0.0\", reason = \"renamed to Display\")]\n-#[cfg(not(stage0))]\n pub trait String {\n     /// Formats the value using the given formatter.\n     fn fmt(&self, &mut Formatter) -> Result;\n@@ -288,7 +282,6 @@ pub trait Display {\n     fn fmt(&self, &mut Formatter) -> Result;\n }\n \n-#[cfg(not(stage0))]\n impl<T: String + ?Sized> Display for T {\n     #[allow(deprecated)]\n     fn fmt(&self, f: &mut Formatter) -> Result { String::fmt(self, f) }"}, {"sha": "125e8a0e81476fe0653d8bf6905bdaced9fe9652", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/92e966e099421654c3a76c6cb39f6b9dd6eececc/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92e966e099421654c3a76c6cb39f6b9dd6eececc/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=92e966e099421654c3a76c6cb39f6b9dd6eececc", "patch": "@@ -197,12 +197,8 @@ extern \"rust-intrinsic\" {\n     pub fn pref_align_of<T>() -> uint;\n \n     /// Get a static pointer to a type descriptor.\n-    #[cfg(not(stage0))]\n     pub fn get_tydesc<T: ?Sized>() -> *const TyDesc;\n \n-    #[cfg(stage0)]\n-    pub fn get_tydesc<T>() -> *const TyDesc;\n-\n     /// Gets an identifier which is globally unique to the specified type. This\n     /// function will return the same value for a type regardless of whichever\n     /// crate it is invoked in."}, {"sha": "2b7a44c172792a3c1de688d0bd3346863ea21bce", "filename": "src/libsyntax/ext/deriving/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/92e966e099421654c3a76c6cb39f6b9dd6eececc/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92e966e099421654c3a76c6cb39f6b9dd6eececc/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs?ref=92e966e099421654c3a76c6cb39f6b9dd6eececc", "patch": "@@ -107,8 +107,6 @@ pub fn expand_meta_derive(cx: &mut ExtCtxt,\n \n                             \"Rand\" => expand!(rand::expand_deriving_rand),\n \n-                            // NOTE(stage0): remove \"Show\"\n-                            \"Show\" => expand!(show::expand_deriving_show),\n                             \"Debug\" => expand!(show::expand_deriving_show),\n \n                             \"Default\" => expand!(default::expand_deriving_default),"}, {"sha": "8d3ab53ef7feb7b88b48ebabe3539ced27ee49d0", "filename": "src/snapshots.txt", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/92e966e099421654c3a76c6cb39f6b9dd6eececc/src%2Fsnapshots.txt", "raw_url": "https://github.com/rust-lang/rust/raw/92e966e099421654c3a76c6cb39f6b9dd6eececc/src%2Fsnapshots.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsnapshots.txt?ref=92e966e099421654c3a76c6cb39f6b9dd6eececc", "patch": "@@ -1,3 +1,12 @@\n+S 2015-01-27 7774359\n+  freebsd-x86_64 63623b632d4f9c33ad3b3cfaeebf8e2dd8395c96\n+  linux-i386 937b0b126aade54dc2c7198cad67f40d711b64ba\n+  linux-x86_64 3a0ed2a90e1e8b3ee7d81ac7d2feddda0b359c9c\n+  macos-i386 3dbed5c058661cab4ece146fb76acd35cc4d333b\n+  macos-x86_64 fc776bc6b9b60cbd25f07fad43e0f01c76663542\n+  winnt-i386 77ed0484b6ceb53e5ffa50028d986af8b09a0441\n+  winnt-x86_64 db1ee5b7939197958e59fe37ce7e123285be64fb\n+\n S 2015-01-20 9006c3c\n   freebsd-x86_64 240b30b33263d175e30f925ed1e1e1a4e553a513\n   linux-i386 544c2063b8d5035342c705b881b8868244c1e9a1"}, {"sha": "99cb2ec2c02e35954098b6564d673497e04f1896", "filename": "src/test/compile-fail/issue-17999.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/92e966e099421654c3a76c6cb39f6b9dd6eececc/src%2Ftest%2Fcompile-fail%2Fissue-17999.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92e966e099421654c3a76c6cb39f6b9dd6eececc/src%2Ftest%2Fcompile-fail%2Fissue-17999.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17999.rs?ref=92e966e099421654c3a76c6cb39f6b9dd6eececc", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n #![deny(unused_variables)]\n-#![feature(core)]\n \n fn main() {\n     for _ in 1is..101 {"}, {"sha": "6262783dd380ed4ccb8534ac291bca91fa0c628a", "filename": "src/test/compile-fail/liveness-unused.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/92e966e099421654c3a76c6cb39f6b9dd6eececc/src%2Ftest%2Fcompile-fail%2Fliveness-unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92e966e099421654c3a76c6cb39f6b9dd6eececc/src%2Ftest%2Fcompile-fail%2Fliveness-unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-unused.rs?ref=92e966e099421654c3a76c6cb39f6b9dd6eececc", "patch": "@@ -11,7 +11,6 @@\n #![deny(unused_variables)]\n #![deny(unused_assignments)]\n #![allow(dead_code, non_camel_case_types)]\n-#![feature(core)]\n #![feature(os)]\n \n fn f1(x: isize) {"}]}