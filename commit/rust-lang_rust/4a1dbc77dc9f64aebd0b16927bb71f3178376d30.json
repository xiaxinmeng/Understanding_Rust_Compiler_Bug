{"sha": "4a1dbc77dc9f64aebd0b16927bb71f3178376d30", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhMWRiYzc3ZGM5ZjY0YWViZDBiMTY5MjdiYjcxZjMxNzgzNzZkMzA=", "commit": {"author": {"name": "Christian Poveda", "email": "git@christianpoveda.xyz", "date": "2020-01-06T21:30:17Z"}, "committer": {"name": "Christian Poveda", "email": "git@christianpoveda.xyz", "date": "2020-01-06T21:30:17Z"}, "message": "Add shim for symbolic link creation", "tree": {"sha": "9058dab207e69616ab6ee5f811b40e2331b2a1c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9058dab207e69616ab6ee5f811b40e2331b2a1c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a1dbc77dc9f64aebd0b16927bb71f3178376d30", "comment_count": 0, "verification": {"verified": false, "reason": "bad_email", "signature": "-----BEGIN PGP SIGNATURE-----\n\niI4EABYIADYWIQRsB8A/3NrzTlMMjT0nUl7150IKUAUCXhOm6RgcZ2l0QGNocmlz\ndGlhbnBvdmVkYS54eXoACgkQJ1Je9edCClDbRAD+IASz3tMsJmntArp46Vxn/XAj\n5hhV0PVvJebSaIMDvFUA+wZVtQZxFImYgI1jq3g8+5i1yHu+vq9IBvi/jGoYyYAH\n=2oC/\n-----END PGP SIGNATURE-----", "payload": "tree 9058dab207e69616ab6ee5f811b40e2331b2a1c0\nparent f3c267d07cfae435e03b0c5878becc74058fe46e\nauthor Christian Poveda <git@christianpoveda.xyz> 1578346217 -0500\ncommitter Christian Poveda <git@christianpoveda.xyz> 1578346217 -0500\n\nAdd shim for symbolic link creation\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a1dbc77dc9f64aebd0b16927bb71f3178376d30", "html_url": "https://github.com/rust-lang/rust/commit/4a1dbc77dc9f64aebd0b16927bb71f3178376d30", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a1dbc77dc9f64aebd0b16927bb71f3178376d30/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3c267d07cfae435e03b0c5878becc74058fe46e", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3c267d07cfae435e03b0c5878becc74058fe46e", "html_url": "https://github.com/rust-lang/rust/commit/f3c267d07cfae435e03b0c5878becc74058fe46e"}], "stats": {"total": 53, "additions": 51, "deletions": 2}, "files": [{"sha": "6a2f42f8321507cf7e61c2fd1d81a2ea96f0dc4d", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4a1dbc77dc9f64aebd0b16927bb71f3178376d30/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a1dbc77dc9f64aebd0b16927bb71f3178376d30/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=4a1dbc77dc9f64aebd0b16927bb71f3178376d30", "patch": "@@ -494,6 +494,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n             }\n \n+            \"symlink\" => {\n+                let result = this.symlink(args[0], args[1])?;\n+                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+            }\n+\n             \"stat$INODE64\" => {\n                 let result = this.stat(args[0], args[1])?;\n                 this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;"}, {"sha": "c5b753f3b6a245ffe8ab98ed4f0333a0117555a0", "filename": "src/shims/fs.rs", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/4a1dbc77dc9f64aebd0b16927bb71f3178376d30/src%2Fshims%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a1dbc77dc9f64aebd0b16927bb71f3178376d30/src%2Fshims%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ffs.rs?ref=4a1dbc77dc9f64aebd0b16927bb71f3178376d30", "patch": "@@ -276,6 +276,36 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         this.try_unwrap_io_result(result)\n     }\n \n+    fn symlink(\n+        &mut self,\n+        target_op: OpTy<'tcx, Tag>,\n+        linkpath_op: OpTy<'tcx, Tag>\n+    ) -> InterpResult<'tcx, i32> {\n+        #[cfg(target_family = \"unix\")]\n+        fn create_link(src: PathBuf, dst: PathBuf) -> std::io::Result<()> {\n+            std::os::unix::fs::symlink(src, dst)\n+        }\n+\n+        #[cfg(target_family = \"windows\")]\n+        fn create_link(src: PathBuf, dst: PathBuf) -> std::io::Result<()> {\n+            use std::os::windows::fs;\n+            if src.is_dir() {\n+                fs::symlink_dir(src, dst)\n+            } else {\n+                fs::symlink(src, dst)\n+            }\n+        }\n+\n+        let this = self.eval_context_mut();\n+\n+        this.check_no_isolation(\"symlink\")?;\n+\n+        let target = this.read_os_str_from_c_str(this.read_scalar(target_op)?.not_undef()?)?.into();\n+        let linkpath = this.read_os_str_from_c_str(this.read_scalar(linkpath_op)?.not_undef()?)?.into();\n+\n+        this.try_unwrap_io_result(create_link(target, linkpath).map(|_| 0))\n+    }\n+\n     fn stat(\n         &mut self,\n         path_op: OpTy<'tcx, Tag>,\n@@ -545,7 +575,6 @@ impl FileMetadata {\n         let metadata = if follow_symlink {\n             std::fs::metadata(path)\n         } else {\n-            // FIXME: metadata for symlinks need testing.\n             std::fs::symlink_metadata(path)\n         };\n "}, {"sha": "9e0428fb57c27513ea0e99da39f4986a53a73a83", "filename": "tests/run-pass/fs.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4a1dbc77dc9f64aebd0b16927bb71f3178376d30/tests%2Frun-pass%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a1dbc77dc9f64aebd0b16927bb71f3178376d30/tests%2Frun-pass%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ffs.rs?ref=4a1dbc77dc9f64aebd0b16927bb71f3178376d30", "patch": "@@ -39,9 +39,24 @@ fn main() {\n     // Test that metadata of an absolute path is correct.\n     test_metadata(bytes, &path).unwrap();\n     // Test that metadata of a relative path is correct.\n-    std::env::set_current_dir(tmp).unwrap();\n+    std::env::set_current_dir(&tmp).unwrap();\n     test_metadata(bytes, &filename).unwrap();\n \n+    // Creating a symbolic link should succeed\n+    let symlink_path = tmp.join(\"miri_test_fs_symlink.txt\");\n+    std::os::unix::fs::symlink(&path, &symlink_path).unwrap();\n+    // Test that the symbolic link has the same contents as the file.\n+    let mut symlink_file = File::open(&symlink_path).unwrap();\n+    let mut contents = Vec::new();\n+    symlink_file.read_to_end(&mut contents).unwrap();\n+    assert_eq!(bytes, contents.as_slice());\n+    // Test that metadata of a symbolic link is correct.\n+    test_metadata(bytes, &symlink_path).unwrap();\n+    // Test that the metadata of a symbolic link is correct when not following it.\n+    assert!(symlink_path.symlink_metadata().unwrap().file_type().is_symlink());\n+    // Removing symbolic link should succeed.\n+    remove_file(&symlink_path).unwrap();\n+\n     // Removing file should succeed.\n     remove_file(&path).unwrap();\n "}]}