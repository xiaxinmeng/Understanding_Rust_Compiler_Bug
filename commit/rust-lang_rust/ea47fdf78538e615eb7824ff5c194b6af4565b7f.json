{"sha": "ea47fdf78538e615eb7824ff5c194b6af4565b7f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhNDdmZGY3ODUzOGU2MTVlYjc4MjRmZjVjMTk0YjZhZjQ1NjViN2Y=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-05-13T09:52:22Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-05-20T07:16:08Z"}, "message": "comment return sites", "tree": {"sha": "63124f2fb7f34746cabeb955d0ae871f62f3f938", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63124f2fb7f34746cabeb955d0ae871f62f3f938"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea47fdf78538e615eb7824ff5c194b6af4565b7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea47fdf78538e615eb7824ff5c194b6af4565b7f", "html_url": "https://github.com/rust-lang/rust/commit/ea47fdf78538e615eb7824ff5c194b6af4565b7f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea47fdf78538e615eb7824ff5c194b6af4565b7f/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a5017ec634cef0ff11b40dd08fdd4572d605d01", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a5017ec634cef0ff11b40dd08fdd4572d605d01", "html_url": "https://github.com/rust-lang/rust/commit/5a5017ec634cef0ff11b40dd08fdd4572d605d01"}], "stats": {"total": 21, "additions": 14, "deletions": 7}, "files": [{"sha": "b877049fcf667b4ea76ce20629bcc475c3835ae8", "filename": "src/librustc_trait_selection/traits/structural_match.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ea47fdf78538e615eb7824ff5c194b6af4565b7f/src%2Flibrustc_trait_selection%2Ftraits%2Fstructural_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea47fdf78538e615eb7824ff5c194b6af4565b7f/src%2Flibrustc_trait_selection%2Ftraits%2Fstructural_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fstructural_match.rs?ref=ea47fdf78538e615eb7824ff5c194b6af4565b7f", "patch": "@@ -149,19 +149,19 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for Search<'a, 'tcx> {\n             }\n             ty::Foreign(_) => {\n                 self.found = Some(NonStructuralMatchTy::Foreign);\n-                return true; // Stop visiting\n+                return true; // Stop visiting.\n             }\n             ty::Opaque(..) => {\n                 self.found = Some(NonStructuralMatchTy::Opaque);\n-                return true;\n+                return true; // Stop visiting.\n             }\n             ty::Projection(..) => {\n                 self.found = Some(NonStructuralMatchTy::Projection);\n-                return true;\n+                return true; // Stop visiting.\n             }\n             ty::Generator(..) | ty::GeneratorWitness(..) => {\n                 self.found = Some(NonStructuralMatchTy::Generator);\n-                return true;\n+                return true; // Stop visiting.\n             }\n             ty::RawPtr(..) => {\n                 // structural-match ignores substructure of\n@@ -179,31 +179,36 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for Search<'a, 'tcx> {\n                 // structural equality on `T` does not recur into the raw\n                 // pointer. Therefore, one can still use `C` in a pattern.\n \n-                // (But still tell caller to continue search.)\n+                // (But still tell the caller to continue search.)\n                 return false;\n             }\n             ty::FnDef(..) | ty::FnPtr(..) => {\n                 // Types of formals and return in `fn(_) -> _` are also irrelevant;\n                 // so we do not recur into them via `super_visit_with`\n                 //\n-                // (But still tell caller to continue search.)\n+                // (But still tell the caller to continue search.)\n                 return false;\n             }\n             ty::Array(_, n)\n                 if { n.try_eval_usize(self.tcx(), ty::ParamEnv::reveal_all()) == Some(0) } =>\n             {\n                 // rust-lang/rust#62336: ignore type of contents\n                 // for empty array.\n+                //\n+                // (But still tell the caller to continue search.)\n                 return false;\n             }\n             ty::Bool | ty::Char | ty::Int(_) | ty::Uint(_) | ty::Float(_) | ty::Str | ty::Never => {\n                 // These primitive types are always structural match.\n                 //\n                 // `Never` is kind of special here, but as it is not inhabitable, this should be fine.\n+                //\n+                // (But still tell the caller to continue search.)\n                 return false;\n             }\n \n             ty::Array(..) | ty::Slice(_) | ty::Ref(..) | ty::Tuple(..) => {\n+                // First check all contained types and then tell the caller to continue searching.\n                 ty.super_visit_with(self);\n                 return false;\n             }\n@@ -214,13 +219,15 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for Search<'a, 'tcx> {\n                 self.tcx().sess.delay_span_bug(self.span, \"ty::Error in structural-match check\");\n                 // We still want to check other types after encountering an error,\n                 // as this may still emit relevant errors.\n+                //\n+                // So we continue searching here.\n                 return false;\n             }\n         };\n \n         if !self.seen.insert(adt_def.did) {\n             debug!(\"Search already seen adt_def: {:?}\", adt_def);\n-            // let caller continue its search\n+            // Let caller continue its search.\n             return false;\n         }\n "}]}