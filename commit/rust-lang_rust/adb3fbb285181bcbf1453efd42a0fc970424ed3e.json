{"sha": "adb3fbb285181bcbf1453efd42a0fc970424ed3e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkYjNmYmIyODUxODFiY2JmMTQ1M2VmZDQyYTBmYzk3MDQyNGVkM2U=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-03-14T10:12:59Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-03-14T10:12:59Z"}, "message": "Add a method that hides the lifetime erasing boilerplate", "tree": {"sha": "f8e7819f4a1f86e9eb766d7fc93d36f6902ee04a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8e7819f4a1f86e9eb766d7fc93d36f6902ee04a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/adb3fbb285181bcbf1453efd42a0fc970424ed3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/adb3fbb285181bcbf1453efd42a0fc970424ed3e", "html_url": "https://github.com/rust-lang/rust/commit/adb3fbb285181bcbf1453efd42a0fc970424ed3e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/adb3fbb285181bcbf1453efd42a0fc970424ed3e/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da6f1369972ad972c60270e073361f727b68d8a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/da6f1369972ad972c60270e073361f727b68d8a6", "html_url": "https://github.com/rust-lang/rust/commit/da6f1369972ad972c60270e073361f727b68d8a6"}], "stats": {"total": 45, "additions": 20, "deletions": 25}, "files": [{"sha": "549530265ee6264e201fb8bf959715d543536db9", "filename": "src/eval_context.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/adb3fbb285181bcbf1453efd42a0fc970424ed3e/src%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adb3fbb285181bcbf1453efd42a0fc970424ed3e/src%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval_context.rs?ref=adb3fbb285181bcbf1453efd42a0fc970424ed3e", "patch": "@@ -9,7 +9,7 @@ use rustc::mir;\n use rustc::traits::Reveal;\n use rustc::ty::layout::{self, Layout, Size};\n use rustc::ty::subst::{self, Subst, Substs};\n-use rustc::ty::{self, Ty, TyCtxt, TypeFoldable};\n+use rustc::ty::{self, Ty, TyCtxt, TypeFoldable, Binder};\n use rustc_data_structures::indexed_vec::Idx;\n use syntax::codemap::{self, DUMMY_SP};\n \n@@ -225,6 +225,13 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         self.tcx.normalize_associated_type(&substituted)\n     }\n \n+    pub fn erase_lifetimes<T>(&self, value: &Binder<T>) -> T\n+        where T : TypeFoldable<'tcx>\n+    {\n+        let value = self.tcx.erase_late_bound_regions(value);\n+        self.tcx.erase_regions(&value)\n+    }\n+\n     pub(super) fn type_size(&self, ty: Ty<'tcx>) -> EvalResult<'tcx, Option<u64>> {\n         self.type_size_with_substs(ty, self.substs())\n     }"}, {"sha": "79682723118cb4ac8cca4fe91285f4cf7df915e4", "filename": "src/terminator/mod.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/adb3fbb285181bcbf1453efd42a0fc970424ed3e/src%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adb3fbb285181bcbf1453efd42a0fc970424ed3e/src%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fterminator%2Fmod.rs?ref=adb3fbb285181bcbf1453efd42a0fc970424ed3e", "patch": "@@ -65,25 +65,22 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 let func_ty = self.operand_ty(func);\n                 let fn_def = match func_ty.sty {\n                     ty::TyFnPtr(bare_sig) => {\n-                        let bare_sig = self.tcx.erase_late_bound_regions(&bare_sig);\n-                        let bare_sig = self.tcx.erase_regions(&bare_sig);\n+                        let bare_sig = self.erase_lifetimes(&bare_sig);\n                         let fn_ptr = self.eval_operand_to_primval(func)?.to_ptr()?;\n                         let fn_def = self.memory.get_fn(fn_ptr.alloc_id)?;\n                         match fn_def {\n                             Function::Concrete(fn_def) => {\n                                 // transmuting function pointers in miri is fine as long as the number of\n                                 // arguments and the abi don't change.\n-                                let sig = self.tcx.erase_late_bound_regions(&fn_def.sig);\n-                                let sig = self.tcx.erase_regions(&sig);\n+                                let sig = self.erase_lifetimes(&fn_def.sig);\n                                 if sig.abi != bare_sig.abi ||\n                                     sig.variadic != bare_sig.variadic ||\n                                     sig.inputs_and_output != bare_sig.inputs_and_output {\n                                     return Err(EvalError::FunctionPointerTyMismatch(sig, bare_sig));\n                                 }\n                             },\n                             Function::NonCaptureClosureAsFnPtr(fn_def) => {\n-                                let sig = self.tcx.erase_late_bound_regions(&fn_def.sig);\n-                                let sig = self.tcx.erase_regions(&sig);\n+                                let sig = self.erase_lifetimes(&fn_def.sig);\n                                 assert_eq!(sig.abi, Abi::RustCall);\n                                 if sig.variadic != bare_sig.variadic ||\n                                     sig.inputs().len() != 1 {\n@@ -170,8 +167,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         match fn_def {\n             // Intrinsics can only be addressed directly\n             Function::Concrete(FunctionDefinition { def_id, substs, sig }) if sig.abi() == Abi::RustIntrinsic => {\n-                let sig = self.tcx.erase_late_bound_regions(&sig);\n-                let sig = self.tcx.erase_regions(&sig);\n+                let sig = self.erase_lifetimes(&sig);\n                 let ty = sig.output();\n                 let layout = self.type_layout(ty)?;\n                 let (ret, target) = match destination {\n@@ -184,8 +180,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             },\n             // C functions can only be addressed directly\n             Function::Concrete(FunctionDefinition { def_id, sig, ..}) if sig.abi() == Abi::C => {\n-                let sig = self.tcx.erase_late_bound_regions(&sig);\n-                let sig = self.tcx.erase_regions(&sig);\n+                let sig = self.erase_lifetimes(&sig);\n                 let ty = sig.output();\n                 let (ret, target) = destination.unwrap();\n                 self.call_c_abi(def_id, arg_operands, ret, ty)?;\n@@ -275,8 +270,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 )\n             },\n             Function::NonCaptureClosureAsFnPtr(FunctionDefinition { def_id, substs, sig }) if sig.abi() == Abi::RustCall => {\n-                let sig = self.tcx.erase_late_bound_regions(&sig);\n-                let sig = self.tcx.erase_regions(&sig);\n+                let sig = self.erase_lifetimes(&sig);\n                 let mut args = Vec::new();\n                 for arg in arg_operands {\n                     let arg_val = self.eval_operand(arg)?;"}, {"sha": "72de17801d5eba13499db45ea71e2e83a915f17e", "filename": "src/traits.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/adb3fbb285181bcbf1453efd42a0fc970424ed3e/src%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adb3fbb285181bcbf1453efd42a0fc970424ed3e/src%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftraits.rs?ref=adb3fbb285181bcbf1453efd42a0fc970424ed3e", "patch": "@@ -123,8 +123,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     },\n                     Function::DropGlue(_) => Err(EvalError::ManuallyCalledDropGlue),\n                     Function::Concrete(fn_def) => {\n-                        let sig = self.tcx.erase_late_bound_regions(&fn_def.sig);\n-                        let sig = self.tcx.erase_regions(&sig);\n+                        let sig = self.erase_lifetimes(&fn_def.sig);\n                         trace!(\"sig: {:#?}\", sig);\n                         args[0] = (\n                             Value::ByVal(PrimVal::Ptr(self_ptr)),\n@@ -133,8 +132,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                         Ok((fn_def.def_id, fn_def.substs, Vec::new()))\n                     },\n                     Function::NonCaptureClosureAsFnPtr(fn_def) => {\n-                        let sig = self.tcx.erase_late_bound_regions(&fn_def.sig);\n-                        let sig = self.tcx.erase_regions(&sig);\n+                        let sig = self.erase_lifetimes(&fn_def.sig);\n                         args.insert(0, (\n                             Value::ByVal(PrimVal::Undef),\n                             sig.inputs()[0],\n@@ -146,23 +144,20 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                         Ok((fn_def.def_id, fn_def.substs, Vec::new()))\n                     }\n                     Function::FnPtrAsTraitObject(sig) => {\n-                        let sig = self.tcx.erase_late_bound_regions(&sig);\n-                        let sig = self.tcx.erase_regions(&sig);\n+                        let sig = self.erase_lifetimes(&sig);\n                         trace!(\"sig: {:#?}\", sig);\n                         // the first argument was the fat ptr\n                         args.remove(0);\n                         self.unpack_fn_args(args)?;\n                         let fn_ptr = self.memory.read_ptr(self_ptr)?;\n                         let fn_def = match self.memory.get_fn(fn_ptr.alloc_id)? {\n                             Function::Concrete(fn_def) => {\n-                                let fn_def_sig = self.tcx.erase_late_bound_regions(&fn_def.sig);\n-                                let fn_def_sig = self.tcx.erase_regions(&fn_def_sig);\n+                                let fn_def_sig = self.erase_lifetimes(&fn_def.sig);\n                                 assert_eq!(sig, fn_def_sig);\n                                 fn_def\n                             },\n                             Function::NonCaptureClosureAsFnPtr(fn_def) => {\n-                                let fn_def_sig = self.tcx.erase_late_bound_regions(&fn_def.sig);\n-                                let fn_def_sig = self.tcx.erase_regions(&fn_def_sig);\n+                                let fn_def_sig = self.erase_lifetimes(&fn_def.sig);\n                                 args.insert(0, (\n                                     Value::ByVal(PrimVal::Undef),\n                                     fn_def_sig.inputs()[0],\n@@ -290,8 +285,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     ty::TyFnDef(_, _, fn_ty) => self.tcx.erase_regions(&fn_ty),\n                     _ => bug!(\"drop method is not a TyFnDef\"),\n                 };\n-                let fn_ty = self.tcx.erase_late_bound_regions(&fn_ty);\n-                let fn_ty = self.tcx.erase_regions(&fn_ty);\n+                let fn_ty = self.erase_lifetimes(&fn_ty);\n                 // The real type is taken from the self argument in `fn drop(&mut self)`\n                 let real_ty = match fn_ty.inputs()[0].sty {\n                     ty::TyRef(_, mt) => self.monomorphize(mt.ty, substs),"}]}