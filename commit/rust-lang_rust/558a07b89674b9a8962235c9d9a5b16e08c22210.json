{"sha": "558a07b89674b9a8962235c9d9a5b16e08c22210", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1OGEwN2I4OTY3NGI5YTg5NjIyMzVjOWQ5YTViMTZlMDhjMjIyMTA=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-03-07T11:18:59Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-03-07T11:18:59Z"}, "message": "hir: remove NodeId from PatKind", "tree": {"sha": "f6fb92e526912356c0570ba61791492f6bacb273", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6fb92e526912356c0570ba61791492f6bacb273"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/558a07b89674b9a8962235c9d9a5b16e08c22210", "comment_count": 3, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/558a07b89674b9a8962235c9d9a5b16e08c22210", "html_url": "https://github.com/rust-lang/rust/commit/558a07b89674b9a8962235c9d9a5b16e08c22210", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/558a07b89674b9a8962235c9d9a5b16e08c22210/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "78f91e39766768248fa77c42a14c3a609be53904", "url": "https://api.github.com/repos/rust-lang/rust/commits/78f91e39766768248fa77c42a14c3a609be53904", "html_url": "https://github.com/rust-lang/rust/commit/78f91e39766768248fa77c42a14c3a609be53904"}], "stats": {"total": 101, "additions": 48, "deletions": 53}, "files": [{"sha": "3c70df7461248968b1400a9d023fe7653c94afc9", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/558a07b89674b9a8962235c9d9a5b16e08c22210/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/558a07b89674b9a8962235c9d9a5b16e08c22210/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=558a07b89674b9a8962235c9d9a5b16e08c22210", "patch": "@@ -697,8 +697,8 @@ pub fn walk_pat<'v, V: Visitor<'v>>(visitor: &mut V, pattern: &'v Pat) {\n         PatKind::Ref(ref subpattern, _) => {\n             visitor.visit_pat(subpattern)\n         }\n-        PatKind::Binding(_, canonical_id, _hir_id, ident, ref optional_subpattern) => {\n-            visitor.visit_def_mention(Def::Local(canonical_id));\n+        PatKind::Binding(_, _hir_id, ident, ref optional_subpattern) => {\n+            // visitor.visit_def_mention(Def::Local(hir_id));\n             visitor.visit_ident(ident);\n             walk_list!(visitor, visit_pat, optional_subpattern);\n         }"}, {"sha": "bcd2e500085cb7fb07701d5b809e55458c9bc3ea", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/558a07b89674b9a8962235c9d9a5b16e08c22210/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/558a07b89674b9a8962235c9d9a5b16e08c22210/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=558a07b89674b9a8962235c9d9a5b16e08c22210", "patch": "@@ -3679,11 +3679,10 @@ impl<'a> LoweringContext<'a> {\n                             Some(Def::Local(id)) => id,\n                             _ => p.id,\n                         };\n-                        let hir_id = self.lower_node_id(canonical_id).hir_id;\n+\n                         hir::PatKind::Binding(\n                             self.lower_binding_mode(binding_mode),\n-                            canonical_id,\n-                            hir_id,\n+                            self.lower_node_id(canonical_id).hir_id,\n                             ident,\n                             sub.as_ref().map(|x| self.lower_pat(x)),\n                         )\n@@ -4985,7 +4984,7 @@ impl<'a> LoweringContext<'a> {\n         (\n             P(hir::Pat {\n                 hir_id,\n-                node: hir::PatKind::Binding(bm, node_id, hir_id, ident.with_span_pos(span), None),\n+                node: hir::PatKind::Binding(bm, hir_id, ident.with_span_pos(span), None),\n                 span,\n             }),\n             node_id"}, {"sha": "1a03ced9b4e005cff4e8540908123f6d034d6f03", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/558a07b89674b9a8962235c9d9a5b16e08c22210/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/558a07b89674b9a8962235c9d9a5b16e08c22210/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=558a07b89674b9a8962235c9d9a5b16e08c22210", "patch": "@@ -1016,7 +1016,7 @@ impl<'hir> Map<'hir> {\n             Node::Field(f) => f.ident.name,\n             Node::Lifetime(lt) => lt.name.ident().name,\n             Node::GenericParam(param) => param.name.ident().name,\n-            Node::Binding(&Pat { node: PatKind::Binding(_, _, _, l, _), .. }) => l.name,\n+            Node::Binding(&Pat { node: PatKind::Binding(_, _, l, _), .. }) => l.name,\n             Node::StructCtor(_) => self.name(self.get_parent(id)),\n             _ => bug!(\"no name for {}\", self.node_to_string(id))\n         }"}, {"sha": "e24940f5f611e1257174d59a2ef33baf1a360929", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/558a07b89674b9a8962235c9d9a5b16e08c22210/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/558a07b89674b9a8962235c9d9a5b16e08c22210/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=558a07b89674b9a8962235c9d9a5b16e08c22210", "patch": "@@ -936,10 +936,10 @@ pub enum PatKind {\n     Wild,\n \n     /// A fresh binding `ref mut binding @ OPT_SUBPATTERN`.\n-    /// The `NodeId` is the canonical ID for the variable being bound,\n+    /// The `HirId` is the canonical ID for the variable being bound,\n     /// (e.g., in `Ok(x) | Err(x)`, both `x` use the same canonical ID),\n     /// which is the pattern ID of the first `x`.\n-    Binding(BindingAnnotation, NodeId, HirId, Ident, Option<P<Pat>>),\n+    Binding(BindingAnnotation, HirId, Ident, Option<P<Pat>>),\n \n     /// A struct or struct variant pattern (e.g., `Variant {x, y, ..}`).\n     /// The `bool` is `true` in the presence of a `..`."}, {"sha": "18a3d6708db64c815a1465b630b44a606c3bb58d", "filename": "src/librustc/hir/pat_util.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/558a07b89674b9a8962235c9d9a5b16e08c22210/src%2Flibrustc%2Fhir%2Fpat_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/558a07b89674b9a8962235c9d9a5b16e08c22210/src%2Flibrustc%2Fhir%2Fpat_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fpat_util.rs?ref=558a07b89674b9a8962235c9d9a5b16e08c22210", "patch": "@@ -70,7 +70,7 @@ impl hir::Pat {\n         where F: FnMut(hir::BindingAnnotation, HirId, Span, ast::Ident),\n     {\n         self.walk(|p| {\n-            if let PatKind::Binding(binding_mode, _, _, ident, _) = p.node {\n+            if let PatKind::Binding(binding_mode, _, ident, _) = p.node {\n                 f(binding_mode, p.hir_id, p.span, ident);\n             }\n             true\n@@ -110,8 +110,8 @@ impl hir::Pat {\n \n     pub fn simple_ident(&self) -> Option<ast::Ident> {\n         match self.node {\n-            PatKind::Binding(hir::BindingAnnotation::Unannotated, _, _, ident, None) |\n-            PatKind::Binding(hir::BindingAnnotation::Mutable, _, _, ident, None) => Some(ident),\n+            PatKind::Binding(hir::BindingAnnotation::Unannotated, _, ident, None) |\n+            PatKind::Binding(hir::BindingAnnotation::Mutable, _, ident, None) => Some(ident),\n             _ => None,\n         }\n     }"}, {"sha": "54a21f2ed5c2a8c519d020d525d2a55ca31c18c0", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/558a07b89674b9a8962235c9d9a5b16e08c22210/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/558a07b89674b9a8962235c9d9a5b16e08c22210/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=558a07b89674b9a8962235c9d9a5b16e08c22210", "patch": "@@ -1765,7 +1765,7 @@ impl<'a> State<'a> {\n         // is that it doesn't matter\n         match pat.node {\n             PatKind::Wild => self.s.word(\"_\")?,\n-            PatKind::Binding(binding_mode, _, _, ident, ref sub) => {\n+            PatKind::Binding(binding_mode, _, ident, ref sub) => {\n                 match binding_mode {\n                     hir::BindingAnnotation::Ref => {\n                         self.word_nbsp(\"ref\")?;"}, {"sha": "68eb242c4dd65792e5856fa16adeb899f5d8f443", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/558a07b89674b9a8962235c9d9a5b16e08c22210/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/558a07b89674b9a8962235c9d9a5b16e08c22210/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=558a07b89674b9a8962235c9d9a5b16e08c22210", "patch": "@@ -448,7 +448,7 @@ impl_stable_hash_for!(enum hir::RangeEnd {\n \n impl_stable_hash_for!(enum hir::PatKind {\n     Wild,\n-    Binding(binding_mode, var, hir_id, name, sub),\n+    Binding(binding_mode, hir_id, name, sub),\n     Struct(path, field_pats, dotdot),\n     TupleStruct(path, field_pats, dotdot),\n     Path(path),"}, {"sha": "78a9e406c95e9bc98c73ce0cb84230c361bf8d6e", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/558a07b89674b9a8962235c9d9a5b16e08c22210/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/558a07b89674b9a8962235c9d9a5b16e08c22210/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=558a07b89674b9a8962235c9d9a5b16e08c22210", "patch": "@@ -860,7 +860,7 @@ impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n \n                     // Each match binding is effectively an assignment to the\n                     // binding being produced.\n-                    let def = Def::Local(canonical_id);\n+                    let def = Def::Local(mc.tcx.hir().hir_to_node_id(canonical_id));\n                     if let Ok(ref binding_cmt) = mc.cat_def(pat.hir_id, pat.span, pat_ty, def) {\n                         delegate.mutate(pat.hir_id, pat.span, binding_cmt, MutateMode::Init);\n                     }"}, {"sha": "35b8e08a5d531fbe6482e0074f7c70d629f5427d", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/558a07b89674b9a8962235c9d9a5b16e08c22210/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/558a07b89674b9a8962235c9d9a5b16e08c22210/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=558a07b89674b9a8962235c9d9a5b16e08c22210", "patch": "@@ -407,7 +407,7 @@ fn add_from_pat<'a, 'tcx>(ir: &mut IrMaps<'a, 'tcx>, pat: &P<hir::Pat>) {\n     while let Some(pat) = pats.pop_front() {\n         use crate::hir::PatKind::*;\n         match pat.node {\n-            Binding(_, _, _, _, ref inner_pat) => {\n+            Binding(_, _, _, ref inner_pat) => {\n                 pats.extend(inner_pat.iter());\n             }\n             Struct(_, ref fields, _) => {"}, {"sha": "a15d3d10adf0ecce96df3fa11b57a83f0b406135", "filename": "src/librustc_borrowck/borrowck/gather_loans/gather_moves.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/558a07b89674b9a8962235c9d9a5b16e08c22210/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/558a07b89674b9a8962235c9d9a5b16e08c22210/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs?ref=558a07b89674b9a8962235c9d9a5b16e08c22210", "patch": "@@ -98,7 +98,7 @@ pub fn gather_move_from_pat<'a, 'c, 'tcx: 'c>(bccx: &BorrowckCtxt<'a, 'tcx>,\n                                               cmt: &'c mc::cmt_<'tcx>) {\n     let source = get_pattern_source(bccx.tcx,move_pat);\n     let pat_span_path_opt = match move_pat.node {\n-        PatKind::Binding(_, _, _, ident, _) => {\n+        PatKind::Binding(_, _, ident, _) => {\n             Some(MovePlace {\n                      span: move_pat.span,\n                      name: ident.name,"}, {"sha": "aafae28b49ea55f84e78549228f362b37519e201", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/558a07b89674b9a8962235c9d9a5b16e08c22210/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/558a07b89674b9a8962235c9d9a5b16e08c22210/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=558a07b89674b9a8962235c9d9a5b16e08c22210", "patch": "@@ -198,7 +198,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonShorthandFieldPatterns {\n                     // (Issue #49588)\n                     continue;\n                 }\n-                if let PatKind::Binding(_, _, _, ident, None) = fieldpat.node.pat.node {\n+                if let PatKind::Binding(_, _, ident, None) = fieldpat.node.pat.node {\n                     if cx.tcx.find_field_index(ident, &variant) ==\n                        Some(cx.tcx.field_index(fieldpat.node.hir_id, cx.tables)) {\n                         let mut err = cx.struct_span_lint(NON_SHORTHAND_FIELD_PATTERNS,"}, {"sha": "fa18dd1eb8ddbd062f37ed2fdafe019ead86019c", "filename": "src/librustc_lint/nonstandard_style.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/558a07b89674b9a8962235c9d9a5b16e08c22210/src%2Flibrustc_lint%2Fnonstandard_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/558a07b89674b9a8962235c9d9a5b16e08c22210/src%2Flibrustc_lint%2Fnonstandard_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fnonstandard_style.rs?ref=558a07b89674b9a8962235c9d9a5b16e08c22210", "patch": "@@ -358,7 +358,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonSnakeCase {\n     }\n \n     fn check_pat(&mut self, cx: &LateContext<'_, '_>, p: &hir::Pat) {\n-        if let &PatKind::Binding(_, _, _, ident, _) = &p.node {\n+        if let &PatKind::Binding(_, _, ident, _) = &p.node {\n             self.check_snake_case(cx, \"variable\", &ident);\n         }\n     }"}, {"sha": "466231347e3e429d6cf9b8a5e5b4fbefed240203", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/558a07b89674b9a8962235c9d9a5b16e08c22210/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/558a07b89674b9a8962235c9d9a5b16e08c22210/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=558a07b89674b9a8962235c9d9a5b16e08c22210", "patch": "@@ -978,7 +978,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n             let body = self.tcx.hir().body(body_id);\n             self.lazy_seq(body.arguments.iter().map(|arg| {\n                 match arg.pat.node {\n-                    PatKind::Binding(_, _, _, ident, _) => ident.name,\n+                    PatKind::Binding(_, _, ident, _) => ident.name,\n                     _ => keywords::Invalid.name(),\n                 }\n             }))"}, {"sha": "65703adfdff70c603e6d2f2e94f8061a4e157799", "filename": "src/librustc_mir/borrow_check/mutability_errors.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/558a07b89674b9a8962235c9d9a5b16e08c22210/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/558a07b89674b9a8962235c9d9a5b16e08c22210/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs?ref=558a07b89674b9a8962235c9d9a5b16e08c22210", "patch": "@@ -314,7 +314,6 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n                     if let hir::PatKind::Binding(\n                         hir::BindingAnnotation::Unannotated,\n                         _,\n-                        _,\n                         upvar_ident,\n                         _,\n                     ) = pat.node"}, {"sha": "d3731e7c1274e3bfd5e4cf703937beab8a2af00c", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/558a07b89674b9a8962235c9d9a5b16e08c22210/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/558a07b89674b9a8962235c9d9a5b16e08c22210/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=558a07b89674b9a8962235c9d9a5b16e08c22210", "patch": "@@ -10,12 +10,13 @@ use crate::build::ForGuard::{self, OutsideGuard, RefWithinGuard};\n use crate::build::{BlockAnd, BlockAndExtension, Builder};\n use crate::build::{GuardFrame, GuardFrameLocal, LocalsForNode};\n use crate::hair::{self, *};\n+use rustc::hir::HirId;\n use rustc::mir::*;\n use rustc::ty::{self, CanonicalUserTypeAnnotation, Ty};\n use rustc::ty::layout::VariantIdx;\n use rustc_data_structures::bit_set::BitSet;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use syntax::ast::{Name, NodeId};\n+use syntax::ast::Name;\n use syntax_pos::Span;\n \n // helper functions, broken out by category:\n@@ -530,7 +531,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n     pub fn storage_live_binding(\n         &mut self,\n         block: BasicBlock,\n-        var: NodeId,\n+        var: HirId,\n         span: Span,\n         for_guard: ForGuard,\n     ) -> Place<'tcx> {\n@@ -545,17 +546,15 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         );\n         let place = Place::Base(PlaceBase::Local(local_id));\n         let var_ty = self.local_decls[local_id].ty;\n-        let hir_id = self.hir.tcx().hir().node_to_hir_id(var);\n-        let region_scope = self.hir.region_scope_tree.var_scope(hir_id.local_id);\n+        let region_scope = self.hir.region_scope_tree.var_scope(var.local_id);\n         self.schedule_drop(span, region_scope, &place, var_ty, DropKind::Storage);\n         place\n     }\n \n-    pub fn schedule_drop_for_binding(&mut self, var: NodeId, span: Span, for_guard: ForGuard) {\n+    pub fn schedule_drop_for_binding(&mut self, var: HirId, span: Span, for_guard: ForGuard) {\n         let local_id = self.var_local_id(var, for_guard);\n         let var_ty = self.local_decls[local_id].ty;\n-        let hir_id = self.hir.tcx().hir().node_to_hir_id(var);\n-        let region_scope = self.hir.region_scope_tree.var_scope(hir_id.local_id);\n+        let region_scope = self.hir.region_scope_tree.var_scope(var.local_id);\n         self.schedule_drop(\n             span,\n             region_scope,\n@@ -576,7 +575,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             Mutability,\n             Name,\n             BindingMode,\n-            NodeId,\n+            HirId,\n             Span,\n             Ty<'tcx>,\n             UserTypeProjections<'tcx>,\n@@ -703,7 +702,7 @@ struct Binding<'tcx> {\n     span: Span,\n     source: Place<'tcx>,\n     name: Name,\n-    var_id: NodeId,\n+    var_id: HirId,\n     var_ty: Ty<'tcx>,\n     mutability: Mutability,\n     binding_mode: BindingMode,\n@@ -1694,7 +1693,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         mutability: Mutability,\n         name: Name,\n         mode: BindingMode,\n-        var_id: NodeId,\n+        var_id: HirId,\n         var_ty: Ty<'tcx>,\n         user_ty: UserTypeProjections<'tcx>,\n         has_guard: ArmHasGuard,"}, {"sha": "c855940cada6796bb14d78088261918c47988df1", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/558a07b89674b9a8962235c9d9a5b16e08c22210/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/558a07b89674b9a8962235c9d9a5b16e08c22210/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=558a07b89674b9a8962235c9d9a5b16e08c22210", "patch": "@@ -13,13 +13,12 @@ use rustc::mir::*;\n use rustc::mir::visit::{MutVisitor, TyContext};\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::subst::SubstsRef;\n-use rustc::util::nodemap::NodeMap;\n+use rustc::util::nodemap::HirIdMap;\n use rustc_target::spec::PanicStrategy;\n use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n use std::mem;\n use std::u32;\n use rustc_target::spec::abi::Abi;\n-use syntax::ast;\n use syntax::attr::{self, UnwindAttr};\n use syntax::symbol::keywords;\n use syntax_pos::Span;\n@@ -376,7 +375,7 @@ struct Builder<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n \n     /// Maps `NodeId`s of variable bindings to the `Local`s created for them.\n     /// (A match binding can have two locals; the 2nd is for the arm's guard.)\n-    var_indices: NodeMap<LocalsForNode>,\n+    var_indices: HirIdMap<LocalsForNode>,\n     local_decls: IndexVec<Local, LocalDecl<'tcx>>,\n     canonical_user_type_annotations: ty::CanonicalUserTypeAnnotations<'tcx>,\n     upvar_decls: Vec<UpvarDecl>,\n@@ -392,11 +391,11 @@ struct Builder<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n }\n \n impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n-    fn is_bound_var_in_guard(&self, id: ast::NodeId) -> bool {\n+    fn is_bound_var_in_guard(&self, id: hir::HirId) -> bool {\n         self.guard_context.iter().any(|frame| frame.locals.iter().any(|local| local.id == id))\n     }\n \n-    fn var_local_id(&self, id: ast::NodeId, for_guard: ForGuard) -> Local {\n+    fn var_local_id(&self, id: hir::HirId, for_guard: ForGuard) -> Local {\n         self.var_indices[&id].local_id(for_guard)\n     }\n }\n@@ -471,11 +470,11 @@ enum LocalsForNode {\n \n #[derive(Debug)]\n struct GuardFrameLocal {\n-    id: ast::NodeId,\n+    id: hir::HirId,\n }\n \n impl GuardFrameLocal {\n-    fn new(id: ast::NodeId, _binding_mode: BindingMode) -> Self {\n+    fn new(id: hir::HirId, _binding_mode: BindingMode) -> Self {\n         GuardFrameLocal {\n             id: id,\n         }\n@@ -650,7 +649,7 @@ fn construct_fn<'a, 'gcx, 'tcx, A>(hir: Cx<'a, 'gcx, 'tcx>,\n                 mutability: Mutability::Not,\n             };\n             if let Some(Node::Binding(pat)) = tcx_hir.find(var_node_id) {\n-                if let hir::PatKind::Binding(_, _, _, ident, _) = pat.node {\n+                if let hir::PatKind::Binding(_, _, ident, _) = pat.node {\n                     decl.debug_name = ident.name;\n                     if let Some(&bm) = hir.tables.pat_binding_modes().get(pat.hir_id) {\n                         if bm == ty::BindByValue(hir::MutMutable) {\n@@ -855,8 +854,8 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             let mut name = None;\n             if let Some(pat) = pattern {\n                 match pat.node {\n-                    hir::PatKind::Binding(hir::BindingAnnotation::Unannotated, _, _, ident, _)\n-                    | hir::PatKind::Binding(hir::BindingAnnotation::Mutable, _, _, ident, _) => {\n+                    hir::PatKind::Binding(hir::BindingAnnotation::Unannotated, _, ident, _)\n+                    | hir::PatKind::Binding(hir::BindingAnnotation::Mutable, _, ident, _) => {\n                         name = Some(ident.name);\n                     }\n                     _ => (),"}, {"sha": "f1a22b222217919e71f0b861b438d6cdf26d02c0", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/558a07b89674b9a8962235c9d9a5b16e08c22210/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/558a07b89674b9a8962235c9d9a5b16e08c22210/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=558a07b89674b9a8962235c9d9a5b16e08c22210", "patch": "@@ -992,7 +992,7 @@ fn convert_var<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n     let temp_lifetime = cx.region_scope_tree.temporary_scope(expr.hir_id.local_id);\n \n     match def {\n-        Def::Local(id) => ExprKind::VarRef { id },\n+        Def::Local(id) => ExprKind::VarRef { id: cx.tcx.hir().node_to_hir_id(id) },\n \n         Def::Upvar(var_id, index, closure_expr_id) => {\n             debug!(\"convert_var(upvar({:?}, {:?}, {:?}))\","}, {"sha": "385249ec1c13b86a79889ec344f3daf11b9ad4e5", "filename": "src/librustc_mir/hair/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/558a07b89674b9a8962235c9d9a5b16e08c22210/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/558a07b89674b9a8962235c9d9a5b16e08c22210/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fmod.rs?ref=558a07b89674b9a8962235c9d9a5b16e08c22210", "patch": "@@ -12,7 +12,6 @@ use rustc::ty::subst::SubstsRef;\n use rustc::ty::{AdtDef, UpvarSubsts, Ty, Const, LazyConst, UserType};\n use rustc::ty::layout::VariantIdx;\n use rustc::hir;\n-use syntax::ast;\n use syntax_pos::Span;\n use self::cx::Cx;\n \n@@ -230,7 +229,7 @@ pub enum ExprKind<'tcx> {\n         index: ExprRef<'tcx>,\n     },\n     VarRef {\n-        id: ast::NodeId,\n+        id: hir::HirId,\n     },\n     /// first argument, used for self in a closure\n     SelfRef,"}, {"sha": "9768706b37eaac78e597197169224cda77998415", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/558a07b89674b9a8962235c9d9a5b16e08c22210/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/558a07b89674b9a8962235c9d9a5b16e08c22210/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=558a07b89674b9a8962235c9d9a5b16e08c22210", "patch": "@@ -315,7 +315,7 @@ impl<'a, 'tcx> MatchVisitor<'a, 'tcx> {\n \n fn check_for_bindings_named_same_as_variants(cx: &MatchVisitor<'_, '_>, pat: &Pat) {\n     pat.walk(|p| {\n-        if let PatKind::Binding(_, _, _, ident, None) = p.node {\n+        if let PatKind::Binding(_, _, ident, None) = p.node {\n             if let Some(&bm) = cx.tables.pat_binding_modes().get(p.hir_id) {\n                 if bm != ty::BindByValue(hir::MutImmutable) {\n                     // Nothing to check.\n@@ -590,7 +590,7 @@ fn check_legality_of_move_bindings(\n \n     for pat in pats {\n         pat.walk(|p| {\n-            if let PatKind::Binding(_, _, _, _, ref sub) = p.node {\n+            if let PatKind::Binding(_, _, _, ref sub) = p.node {\n                 if let Some(&bm) = cx.tables.pat_binding_modes().get(p.hir_id) {\n                     match bm {\n                         ty::BindByValue(..) => {"}, {"sha": "55547cd0bc64e6b2a8c403800950cd7c30c38026", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/558a07b89674b9a8962235c9d9a5b16e08c22210/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/558a07b89674b9a8962235c9d9a5b16e08c22210/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=558a07b89674b9a8962235c9d9a5b16e08c22210", "patch": "@@ -126,7 +126,7 @@ pub enum PatternKind<'tcx> {\n         mutability: Mutability,\n         name: ast::Name,\n         mode: BindingMode,\n-        var: ast::NodeId,\n+        var: hir::HirId,\n         ty: Ty<'tcx>,\n         subpattern: Option<Pattern<'tcx>>,\n     },\n@@ -559,7 +559,7 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                 }\n             }\n \n-            PatKind::Binding(_, id, _, ident, ref sub) => {\n+            PatKind::Binding(_, id, ident, ref sub) => {\n                 let var_ty = self.tables.node_type(pat.hir_id);\n                 if let ty::Error = var_ty.sty {\n                     // Avoid ICE\n@@ -1090,7 +1090,7 @@ macro_rules! CloneImpls {\n }\n \n CloneImpls!{ <'tcx>\n-    Span, Field, Mutability, ast::Name, ast::NodeId, usize, ty::Const<'tcx>,\n+    Span, Field, Mutability, ast::Name, hir::HirId, usize, ty::Const<'tcx>,\n     Region<'tcx>, Ty<'tcx>, BindingMode, &'tcx AdtDef,\n     SubstsRef<'tcx>, &'tcx Kind<'tcx>, UserType<'tcx>,\n     UserTypeProjection<'tcx>, PatternTypeProjection<'tcx>"}, {"sha": "d80f3e5ce759cae9434335eb20e3f886e5d49867", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/558a07b89674b9a8962235c9d9a5b16e08c22210/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/558a07b89674b9a8962235c9d9a5b16e08c22210/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=558a07b89674b9a8962235c9d9a5b16e08c22210", "patch": "@@ -647,7 +647,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n             Node::Binding(&hir::Pat {\n                 node: hir::PatKind::Binding(_, canonical_id, ..),\n                 ..\n-            }) => HirDef::Local(canonical_id),\n+            }) => HirDef::Local(self.tcx.hir().hir_to_node_id(canonical_id)),\n \n             Node::Ty(ty) => if let hir::Ty {\n                 node: hir::TyKind::Path(ref qpath),"}, {"sha": "1a3ade7f8baf6b7d8672af00a834eabdd2fb0892", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/558a07b89674b9a8962235c9d9a5b16e08c22210/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/558a07b89674b9a8962235c9d9a5b16e08c22210/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=558a07b89674b9a8962235c9d9a5b16e08c22210", "patch": "@@ -227,7 +227,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 self.demand_eqtype_pat(pat.span, expected, rhs_ty, match_discrim_span);\n                 common_type\n             }\n-            PatKind::Binding(ba, _, var_id, _, ref sub) => {\n+            PatKind::Binding(ba, var_id, _, ref sub) => {\n                 let bm = if ba == hir::BindingAnnotation::Unannotated {\n                     def_bm\n                 } else {"}, {"sha": "423b2fd00210e17658d490793b72e248172d7531", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/558a07b89674b9a8962235c9d9a5b16e08c22210/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/558a07b89674b9a8962235c9d9a5b16e08c22210/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=558a07b89674b9a8962235c9d9a5b16e08c22210", "patch": "@@ -1004,7 +1004,7 @@ impl<'a, 'gcx, 'tcx> Visitor<'gcx> for GatherLocalsVisitor<'a, 'gcx, 'tcx> {\n \n     // Add pattern bindings.\n     fn visit_pat(&mut self, p: &'gcx hir::Pat) {\n-        if let PatKind::Binding(_, _, _, ident, _) = p.node {\n+        if let PatKind::Binding(_, _, ident, _) = p.node {\n             let var_ty = self.assign(p.span, p.hir_id, None);\n \n             let node_id = self.fcx.tcx.hir().hir_to_node_id(p.hir_id);"}, {"sha": "5a1b4d2f8ce7724b87b9e1abb0467fd0c67025e4", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/558a07b89674b9a8962235c9d9a5b16e08c22210/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/558a07b89674b9a8962235c9d9a5b16e08c22210/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=558a07b89674b9a8962235c9d9a5b16e08c22210", "patch": "@@ -3869,7 +3869,7 @@ fn name_from_pat(p: &hir::Pat) -> String {\n \n     match p.node {\n         PatKind::Wild => \"_\".to_string(),\n-        PatKind::Binding(_, _, _, ident, _) => ident.to_string(),\n+        PatKind::Binding(_, _, ident, _) => ident.to_string(),\n         PatKind::TupleStruct(ref p, ..) | PatKind::Path(ref p) => qpath_to_string(p),\n         PatKind::Struct(ref name, ref fields, etc) => {\n             format!(\"{} {{ {}{} }}\", qpath_to_string(name),"}]}