{"sha": "b02941f2a679381d15a7c735d0c644935c9a62b0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwMjk0MWYyYTY3OTM4MWQxNWE3YzczNWQwYzY0NDkzNWM5YTYyYjA=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-09T07:12:14Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-28T04:53:38Z"}, "message": "Adjust pretty printing accordingly.", "tree": {"sha": "79935db9e6f97474a8b4d939ce8b0a0d8519d5e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79935db9e6f97474a8b4d939ce8b0a0d8519d5e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b02941f2a679381d15a7c735d0c644935c9a62b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b02941f2a679381d15a7c735d0c644935c9a62b0", "html_url": "https://github.com/rust-lang/rust/commit/b02941f2a679381d15a7c735d0c644935c9a62b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b02941f2a679381d15a7c735d0c644935c9a62b0/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12250a2017b1a9837f918905e870761a0a03bfaf", "url": "https://api.github.com/repos/rust-lang/rust/commits/12250a2017b1a9837f918905e870761a0a03bfaf", "html_url": "https://github.com/rust-lang/rust/commit/12250a2017b1a9837f918905e870761a0a03bfaf"}], "stats": {"total": 55, "additions": 8, "deletions": 47}, "files": [{"sha": "36cd656f7277e5b1d78e3a66816d3ecbac7d5c22", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 8, "deletions": 47, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/b02941f2a679381d15a7c735d0c644935c9a62b0/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b02941f2a679381d15a7c735d0c644935c9a62b0/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=b02941f2a679381d15a7c735d0c644935c9a62b0", "patch": "@@ -2369,22 +2369,10 @@ impl<'a> State<'a> {\n                     self.print_pat(p);\n                 }\n             }\n-            PatKind::TupleStruct(ref path, ref elts, ddpos) => {\n+            PatKind::TupleStruct(ref path, ref elts) => {\n                 self.print_path(path, true, 0);\n                 self.popen();\n-                if let Some(ddpos) = ddpos {\n-                    self.commasep(Inconsistent, &elts[..ddpos], |s, p| s.print_pat(p));\n-                    if ddpos != 0 {\n-                        self.word_space(\",\");\n-                    }\n-                    self.s.word(\"..\");\n-                    if ddpos != elts.len() {\n-                        self.s.word(\",\");\n-                        self.commasep(Inconsistent, &elts[ddpos..], |s, p| s.print_pat(p));\n-                    }\n-                } else {\n-                    self.commasep(Inconsistent, &elts[..], |s, p| s.print_pat(p));\n-                }\n+                self.commasep(Inconsistent, &elts[..], |s, p| s.print_pat(p));\n                 self.pclose();\n             }\n             PatKind::Path(None, ref path) => {\n@@ -2416,23 +2404,11 @@ impl<'a> State<'a> {\n                 self.s.space();\n                 self.s.word(\"}\");\n             }\n-            PatKind::Tuple(ref elts, ddpos) => {\n+            PatKind::Tuple(ref elts) => {\n                 self.popen();\n-                if let Some(ddpos) = ddpos {\n-                    self.commasep(Inconsistent, &elts[..ddpos], |s, p| s.print_pat(p));\n-                    if ddpos != 0 {\n-                        self.word_space(\",\");\n-                    }\n-                    self.s.word(\"..\");\n-                    if ddpos != elts.len() {\n-                        self.s.word(\",\");\n-                        self.commasep(Inconsistent, &elts[ddpos..], |s, p| s.print_pat(p));\n-                    }\n-                } else {\n-                    self.commasep(Inconsistent, &elts[..], |s, p| s.print_pat(p));\n-                    if elts.len() == 1 {\n-                        self.s.word(\",\");\n-                    }\n+                self.commasep(Inconsistent, &elts[..], |s, p| s.print_pat(p));\n+                if elts.len() == 1 {\n+                    self.s.word(\",\");\n                 }\n                 self.pclose();\n             }\n@@ -2458,24 +2434,9 @@ impl<'a> State<'a> {\n                 }\n                 self.print_expr(end);\n             }\n-            PatKind::Slice(ref before, ref slice, ref after) => {\n+            PatKind::Slice(ref elts) => {\n                 self.s.word(\"[\");\n-                self.commasep(Inconsistent,\n-                                   &before[..],\n-                                   |s, p| s.print_pat(p));\n-                if let Some(ref p) = *slice {\n-                    if !before.is_empty() { self.word_space(\",\"); }\n-                    if let PatKind::Wild = p.node {\n-                        // Print nothing\n-                    } else {\n-                        self.print_pat(p);\n-                    }\n-                    self.s.word(\"..\");\n-                    if !after.is_empty() { self.word_space(\",\"); }\n-                }\n-                self.commasep(Inconsistent,\n-                                   &after[..],\n-                                   |s, p| s.print_pat(p));\n+                self.commasep(Inconsistent, &elts[..], |s, p| s.print_pat(p));\n                 self.s.word(\"]\");\n             }\n             PatKind::Rest => self.s.word(\"..\"),"}]}