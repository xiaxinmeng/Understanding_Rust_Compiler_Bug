{"sha": "d2d6fa852d22eb4e9259cd708e33e7afaa9211d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyZDZmYTg1MmQyMmViNGU5MjU5Y2Q3MDhlMzNlN2FmYWE5MjExZDA=", "commit": {"author": {"name": "Wesley Wiser", "email": "wesleywiser@microsoft.com", "date": "2021-05-17T15:09:13Z"}, "committer": {"name": "Wesley Wiser", "email": "wesleywiser@microsoft.com", "date": "2021-06-02T14:23:11Z"}, "message": "Respond to review feedback", "tree": {"sha": "59b73c74ecd46959967d567094929d8247fd5192", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59b73c74ecd46959967d567094929d8247fd5192"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2d6fa852d22eb4e9259cd708e33e7afaa9211d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2d6fa852d22eb4e9259cd708e33e7afaa9211d0", "html_url": "https://github.com/rust-lang/rust/commit/d2d6fa852d22eb4e9259cd708e33e7afaa9211d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2d6fa852d22eb4e9259cd708e33e7afaa9211d0/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d65009111734c2a4d89cad5d2fb7bbf08c813b7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d65009111734c2a4d89cad5d2fb7bbf08c813b7c", "html_url": "https://github.com/rust-lang/rust/commit/d65009111734c2a4d89cad5d2fb7bbf08c813b7c"}], "stats": {"total": 36, "additions": 33, "deletions": 3}, "files": [{"sha": "1d81d880b8ded799a34c08db308c4b85bd7b5ce9", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 33, "deletions": 3, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/d2d6fa852d22eb4e9259cd708e33e7afaa9211d0/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2d6fa852d22eb4e9259cd708e33e7afaa9211d0/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=d2d6fa852d22eb4e9259cd708e33e7afaa9211d0", "patch": "@@ -1534,6 +1534,19 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                 ..\n             } => {\n                 let tag_info = if fallback {\n+                    // For MSVC, we generate a union of structs for each variant with an explicit\n+                    // discriminant field roughly equivalent to the following C:\n+                    // ```c\n+                    // union _enum<{name}> {\n+                    //   struct {variant 0 name} {\n+                    //     tag$ variant$;\n+                    //     <variant 0 fields>\n+                    //   } Variant0;\n+                    //   <other variant structs>\n+                    // }\n+                    // ```\n+                    // The natvis in `intrinsic.nativs` then matches on `this.Variant0.variant$` to\n+                    // determine which variant is active and then displays it.\n                     Some(DirectTag {\n                         tag_field: Field::from(tag_field),\n                         tag_type_metadata: self.tag_type_metadata.unwrap(),\n@@ -1613,6 +1626,25 @@ impl EnumMemberDescriptionFactory<'ll, 'tcx> {\n                 // For MSVC, we will generate a union of two structs, one for the dataful variant and one that just points to\n                 // the discriminant field. We also create an enum that contains tag values for the non-dataful variants and\n                 // make the discriminant field that type. We then use natvis to render the enum type correctly in Windbg/VS.\n+                // This will generate debuginfo roughly equivalent to the following C:\n+                // ```c\n+                // union _enum<{name}, {min niche}, {max niche}, {dataful variant name} {\n+                //   struct dataful_variant {\n+                //     <fields in dataful variant>\n+                //   },\n+                //   struct discriminant$ {\n+                //     enum tag$ {\n+                //       <non-dataful variants>\n+                //     } discriminant;\n+                //   }\n+                // }\n+                // ```\n+                // The natvis in `intrinsic.natvis` matches on the type name `_enum<*, *, *, *>`\n+                // and evaluates `this.discriminant$.discriminant`. If the value is between\n+                // the min niche and max niche, then the enum is in the dataful variant and\n+                // `this.dataful_variant` is rendered. Otherwise, the enum is in one of the\n+                // non-dataful variants. In that case, we just need to render the name of the\n+                // `this.discriminant$.discriminant` enum.\n                 if fallback {\n                     let unique_type_id = debug_context(cx)\n                         .type_map\n@@ -1938,9 +1970,7 @@ fn describe_enum_variant(\n                 // We have the layout of an enum variant, we need the layout of the outer enum\n                 let enum_layout = cx.layout_of(layout.ty);\n                 let offset = enum_layout.fields.offset(tag_field.as_usize());\n-                let tag_name =\n-                    if cx.tcx.sess.target.is_like_msvc { \"variant$\" } else { \"RUST$ENUM$DISR\" };\n-                let args = (tag_name.to_owned(), enum_layout.field(cx, tag_field.as_usize()).ty);\n+                let args = (\"variant$\".to_owned(), enum_layout.field(cx, tag_field.as_usize()).ty);\n                 (Some(offset), Some(args))\n             }\n             _ => (None, None),"}]}