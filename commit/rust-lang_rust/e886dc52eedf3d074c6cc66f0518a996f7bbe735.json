{"sha": "e886dc52eedf3d074c6cc66f0518a996f7bbe735", "node_id": "C_kwDOAAsO6NoAKGU4ODZkYzUyZWVkZjNkMDc0YzZjYzY2ZjA1MThhOTk2ZjdiYmU3MzU", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-04-12T15:01:22Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-04-12T15:09:26Z"}, "message": "portable-simd: use simd_arith_offset to avoid ptr-int transmutation", "tree": {"sha": "51e1b45d799453310428aa60df354da9dcf7c111", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51e1b45d799453310428aa60df354da9dcf7c111"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e886dc52eedf3d074c6cc66f0518a996f7bbe735", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e886dc52eedf3d074c6cc66f0518a996f7bbe735", "html_url": "https://github.com/rust-lang/rust/commit/e886dc52eedf3d074c6cc66f0518a996f7bbe735", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e886dc52eedf3d074c6cc66f0518a996f7bbe735/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f945b2b5b0d8123d6031bb655d2a9fe5c71ee01", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f945b2b5b0d8123d6031bb655d2a9fe5c71ee01", "html_url": "https://github.com/rust-lang/rust/commit/7f945b2b5b0d8123d6031bb655d2a9fe5c71ee01"}], "stats": {"total": 15, "additions": 15, "deletions": 0}, "files": [{"sha": "82508c6882daba5340e2be67bd87d84b6c2a363c", "filename": "library/portable-simd/crates/core_simd/src/intrinsics.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e886dc52eedf3d074c6cc66f0518a996f7bbe735/library%2Fportable-simd%2Fcrates%2Fcore_simd%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e886dc52eedf3d074c6cc66f0518a996f7bbe735/library%2Fportable-simd%2Fcrates%2Fcore_simd%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fportable-simd%2Fcrates%2Fcore_simd%2Fsrc%2Fintrinsics.rs?ref=e886dc52eedf3d074c6cc66f0518a996f7bbe735", "patch": "@@ -61,6 +61,10 @@ extern \"platform-intrinsic\" {\n     /// xor\n     pub(crate) fn simd_xor<T>(x: T, y: T) -> T;\n \n+    /// getelementptr (without inbounds)\n+    #[cfg(not(bootstrap))]\n+    pub(crate) fn simd_arith_offset<T, U>(ptrs: T, offsets: U) -> T;\n+\n     /// fptoui/fptosi/uitofp/sitofp\n     /// casting floats to integers is truncating, so it is safe to convert values like e.g. 1.5\n     /// but the truncated value must fit in the target type or the result is poison."}, {"sha": "68a9c67f795af984749230c2934564cee15bfe16", "filename": "library/portable-simd/crates/core_simd/src/vector/ptr.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e886dc52eedf3d074c6cc66f0518a996f7bbe735/library%2Fportable-simd%2Fcrates%2Fcore_simd%2Fsrc%2Fvector%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e886dc52eedf3d074c6cc66f0518a996f7bbe735/library%2Fportable-simd%2Fcrates%2Fcore_simd%2Fsrc%2Fvector%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fportable-simd%2Fcrates%2Fcore_simd%2Fsrc%2Fvector%2Fptr.rs?ref=e886dc52eedf3d074c6cc66f0518a996f7bbe735", "patch": "@@ -1,5 +1,8 @@\n //! Private implementation details of public gather/scatter APIs.\n+#[cfg(not(bootstrap))]\n+use crate::simd::intrinsics;\n use crate::simd::{LaneCount, Simd, SupportedLaneCount};\n+#[cfg(bootstrap)]\n use core::mem;\n \n /// A vector of *const T.\n@@ -21,12 +24,16 @@ where\n     #[inline]\n     #[must_use]\n     pub fn wrapping_add(self, addend: Simd<usize, LANES>) -> Self {\n+        #[cfg(bootstrap)]\n         // Safety: converting pointers to usize and vice-versa is safe\n         // (even if using that pointer is not)\n         unsafe {\n             let x: Simd<usize, LANES> = mem::transmute_copy(&self);\n             mem::transmute_copy(&{ x + (addend * Simd::splat(mem::size_of::<T>())) })\n         }\n+        #[cfg(not(bootstrap))]\n+        // Safety: this intrinsic doesn't have a precondition\n+        unsafe { intrinsics::simd_arith_offset(self, addend) }\n     }\n }\n \n@@ -49,11 +56,15 @@ where\n     #[inline]\n     #[must_use]\n     pub fn wrapping_add(self, addend: Simd<usize, LANES>) -> Self {\n+        #[cfg(bootstrap)]\n         // Safety: converting pointers to usize and vice-versa is safe\n         // (even if using that pointer is not)\n         unsafe {\n             let x: Simd<usize, LANES> = mem::transmute_copy(&self);\n             mem::transmute_copy(&{ x + (addend * Simd::splat(mem::size_of::<T>())) })\n         }\n+        #[cfg(not(bootstrap))]\n+        // Safety: this intrinsic doesn't have a precondition\n+        unsafe { intrinsics::simd_arith_offset(self, addend) }\n     }\n }"}]}