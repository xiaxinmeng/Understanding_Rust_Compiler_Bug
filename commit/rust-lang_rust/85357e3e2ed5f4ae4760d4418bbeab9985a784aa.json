{"sha": "85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "node_id": "C_kwDOAAsO6NoAKDg1MzU3ZTNlMmVkNWY0YWU0NzYwZDQ0MThiYmVhYjk5ODVhNzg0YWE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-17T04:25:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-17T04:25:53Z"}, "message": "Auto merge of #106966 - matthiaskrgr:rollup-e34pevi, r=matthiaskrgr\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #106591 (suggestion for attempted integer identifier in patterns)\n - #106712 (make error emitted on `impl &Trait` nicer)\n - #106829 (Unify `Opaque`/`Projection` handling in region outlives code)\n - #106869 (rustdoc: remove redundant item kind class from `.item-decl > pre`)\n - #106949 (ConstBlocks are poly if their substs are poly)\n - #106953 (Document `EarlyBinder::subst_identity` and `skip_binder`)\n - #106958 (Don't add A-bootstrap to PRs modifying Cargo.lock)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "a06ef4ab57aa35b7ba5f99fd72efa04ad25b8ed9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a06ef4ab57aa35b7ba5f99fd72efa04ad25b8ed9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "html_url": "https://github.com/rust-lang/rust/commit/85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4781233a77e879e49cb5ce3c98d2abba6a6ade7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4781233a77e879e49cb5ce3c98d2abba6a6ade7a", "html_url": "https://github.com/rust-lang/rust/commit/4781233a77e879e49cb5ce3c98d2abba6a6ade7a"}, {"sha": "d6e79ab9c859cb06da0798f24ac31e1e33c932d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6e79ab9c859cb06da0798f24ac31e1e33c932d3", "html_url": "https://github.com/rust-lang/rust/commit/d6e79ab9c859cb06da0798f24ac31e1e33c932d3"}], "stats": {"total": 994, "additions": 634, "deletions": 360}, "files": [{"sha": "9317579f70dd5967cb5e80382c8cab541c58ecea", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "patch": "@@ -2032,7 +2032,8 @@ impl Clone for Ty {\n impl Ty {\n     pub fn peel_refs(&self) -> &Self {\n         let mut final_ty = self;\n-        while let TyKind::Ref(_, MutTy { ty, .. }) = &final_ty.kind {\n+        while let TyKind::Ref(_, MutTy { ty, .. }) | TyKind::Ptr(MutTy { ty, .. }) = &final_ty.kind\n+        {\n             final_ty = ty;\n         }\n         final_ty"}, {"sha": "4976456afcb3195b81880eb5005f3dbc674fa590", "filename": "compiler/rustc_borrowck/src/type_check/free_region_relations.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Ffree_region_relations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Ffree_region_relations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Ffree_region_relations.rs?ref=85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "patch": "@@ -359,14 +359,9 @@ impl<'tcx> UniversalRegionRelationsBuilder<'_, 'tcx> {\n                         .insert(ty::OutlivesPredicate(GenericKind::Param(param_b), r_a));\n                 }\n \n-                OutlivesBound::RegionSubProjection(r_a, projection_b) => {\n+                OutlivesBound::RegionSubAlias(r_a, kind, alias_b) => {\n                     self.region_bound_pairs\n-                        .insert(ty::OutlivesPredicate(GenericKind::Projection(projection_b), r_a));\n-                }\n-\n-                OutlivesBound::RegionSubOpaque(r_a, def_id, substs) => {\n-                    self.region_bound_pairs\n-                        .insert(ty::OutlivesPredicate(GenericKind::Opaque(def_id, substs), r_a));\n+                        .insert(ty::OutlivesPredicate(GenericKind::Alias(kind, alias_b), r_a));\n                 }\n             }\n         }"}, {"sha": "224855fff8b56f35a7e02214a87749dd8cc89890", "filename": "compiler/rustc_error_messages/locales/en-US/mir_build.ftl", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmir_build.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmir_build.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmir_build.ftl?ref=85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "patch": "@@ -364,3 +364,5 @@ mir_build_suggest_let_else = you might want to use `let else` to handle the {$co\n         [one] variant that isn't\n         *[other] variants that aren't\n     } matched\n+\n+mir_build_suggest_attempted_int_lit = alternatively, you could prepend the pattern with an underscore to define a new named variable; identifiers cannot begin with digits"}, {"sha": "abe65a0e3fef06415599478dad5d702316a7a6df", "filename": "compiler/rustc_error_messages/locales/en-US/ty_utils.ftl", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fty_utils.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fty_utils.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fty_utils.ftl?ref=85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "patch": "@@ -10,17 +10,17 @@ ty_utils_address_and_deref_not_supported = dereferencing or taking the address i\n \n ty_utils_array_not_supported = array construction is not supported in generic constants\n \n-ty_utils_block_not_supported = blocks are not supported in generic constant\n+ty_utils_block_not_supported = blocks are not supported in generic constants\n \n-ty_utils_never_to_any_not_supported = converting nevers to any is not supported in generic constant\n+ty_utils_never_to_any_not_supported = converting nevers to any is not supported in generic constants\n \n ty_utils_tuple_not_supported = tuple construction is not supported in generic constants\n \n-ty_utils_index_not_supported = indexing is not supported in generic constant\n+ty_utils_index_not_supported = indexing is not supported in generic constants\n \n-ty_utils_field_not_supported = field access is not supported in generic constant\n+ty_utils_field_not_supported = field access is not supported in generic constants\n \n-ty_utils_const_block_not_supported = const blocks are not supported in generic constant\n+ty_utils_const_block_not_supported = const blocks are not supported in generic constants\n \n ty_utils_adt_not_supported = struct/enum construction is not supported in generic constants\n \n@@ -44,4 +44,4 @@ ty_utils_control_flow_not_supported = control flow is not supported in generic c\n \n ty_utils_inline_asm_not_supported = assembly is not supported in generic constants\n \n-ty_utils_operation_not_supported = unsupported operation in generic constant\n+ty_utils_operation_not_supported = unsupported operation in generic constants"}, {"sha": "7d38a6e5f33c1c66dec3d8903121101e644beb04", "filename": "compiler/rustc_hir_analysis/src/outlives/utils.rs", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Futils.rs?ref=85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "patch": "@@ -80,34 +80,26 @@ pub(crate) fn insert_outlives_predicate<'tcx>(\n                             .or_insert(span);\n                     }\n \n-                    Component::Projection(proj_ty) => {\n-                        // This would arise from something like:\n+                    Component::Alias(kind, alias) => {\n+                        // This would either arise from something like:\n                         //\n                         // ```\n                         // struct Foo<'a, T: Iterator> {\n                         //    x:  &'a <T as Iterator>::Item\n                         // }\n                         // ```\n                         //\n-                        // Here we want to add an explicit `where <T as Iterator>::Item: 'a`.\n-                        let ty: Ty<'tcx> = tcx.mk_projection(proj_ty.def_id, proj_ty.substs);\n-                        required_predicates\n-                            .entry(ty::OutlivesPredicate(ty.into(), outlived_region))\n-                            .or_insert(span);\n-                    }\n-\n-                    Component::Opaque(def_id, substs) => {\n-                        // This would arise from something like:\n+                        // or:\n                         //\n                         // ```rust\n                         // type Opaque<T> = impl Sized;\n                         // fn defining<T>() -> Opaque<T> {}\n                         // struct Ss<'a, T>(&'a Opaque<T>);\n                         // ```\n                         //\n-                        // Here we want to have an implied bound `Opaque<T>: 'a`\n-\n-                        let ty = tcx.mk_opaque(def_id, substs);\n+                        // Here we want to add an explicit `where <T as Iterator>::Item: 'a`\n+                        // or `Opaque<T>: 'a` depending on the alias kind.\n+                        let ty: Ty<'tcx> = tcx.mk_ty(ty::Alias(kind, alias));\n                         required_predicates\n                             .entry(ty::OutlivesPredicate(ty.into(), outlived_region))\n                             .or_insert(span);"}, {"sha": "9c38eb6163f5627043746c3ead3953d998efe121", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "patch": "@@ -2272,9 +2272,12 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n \n         let labeled_user_string = match bound_kind {\n             GenericKind::Param(ref p) => format!(\"the parameter type `{}`\", p),\n-            GenericKind::Projection(ref p) => format!(\"the associated type `{}`\", p),\n-            GenericKind::Opaque(def_id, substs) => {\n-                format!(\"the opaque type `{}`\", self.tcx.def_path_str_with_substs(def_id, substs))\n+            GenericKind::Alias(ty::Projection, ref p) => format!(\"the associated type `{}`\", p),\n+            GenericKind::Alias(ty::Opaque, ref p) => {\n+                format!(\n+                    \"the opaque type `{}`\",\n+                    self.tcx.def_path_str_with_substs(p.def_id, p.substs)\n+                )\n             }\n         };\n "}, {"sha": "31451192bc50e0de68e61b6ed25e545d05f7e15e", "filename": "compiler/rustc_infer/src/infer/outlives/components.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fcomponents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fcomponents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fcomponents.rs?ref=85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "patch": "@@ -3,9 +3,8 @@\n // RFC for reference.\n \n use rustc_data_structures::sso::SsoHashSet;\n-use rustc_hir::def_id::DefId;\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind};\n-use rustc_middle::ty::{self, SubstsRef, Ty, TyCtxt, TypeVisitable};\n+use rustc_middle::ty::{self, Ty, TyCtxt, TypeVisitable};\n use smallvec::{smallvec, SmallVec};\n \n #[derive(Debug)]\n@@ -23,7 +22,7 @@ pub enum Component<'tcx> {\n     // is not in a position to judge which is the best technique, so\n     // we just product the projection as a component and leave it to\n     // the consumer to decide (but see `EscapingProjection` below).\n-    Projection(ty::AliasTy<'tcx>),\n+    Alias(ty::AliasKind, ty::AliasTy<'tcx>),\n \n     // In the case where a projection has escaping regions -- meaning\n     // regions bound within the type itself -- we always use\n@@ -46,8 +45,6 @@ pub enum Component<'tcx> {\n     // them. This gives us room to improve the regionck reasoning in\n     // the future without breaking backwards compat.\n     EscapingProjection(Vec<Component<'tcx>>),\n-\n-    Opaque(DefId, SubstsRef<'tcx>),\n }\n \n /// Push onto `out` all the things that must outlive `'a` for the condition\n@@ -130,8 +127,8 @@ fn compute_components<'tcx>(\n             // outlives any other lifetime, which is unsound.\n             // See https://github.com/rust-lang/rust/issues/84305 for\n             // more details.\n-            ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs, .. }) => {\n-                out.push(Component::Opaque(def_id, substs));\n+            ty::Alias(ty::Opaque, data) => {\n+                out.push(Component::Alias(ty::Opaque, data));\n             },\n \n             // For projections, we prefer to generate an obligation like\n@@ -142,15 +139,15 @@ fn compute_components<'tcx>(\n             // trait-ref. Therefore, if we see any higher-ranked regions,\n             // we simply fallback to the most restrictive rule, which\n             // requires that `Pi: 'a` for all `i`.\n-            ty::Alias(ty::Projection, ref data) => {\n+            ty::Alias(ty::Projection, data) => {\n                 if !data.has_escaping_bound_vars() {\n                     // best case: no escaping regions, so push the\n                     // projection and skip the subtree (thus generating no\n                     // constraints for Pi). This defers the choice between\n                     // the rules OutlivesProjectionEnv,\n                     // OutlivesProjectionTraitDef, and\n                     // OutlivesProjectionComponents to regionck.\n-                    out.push(Component::Projection(*data));\n+                    out.push(Component::Alias(ty::Projection, data));\n                 } else {\n                     // fallback case: hard code\n                     // OutlivesProjectionComponents.  Continue walking"}, {"sha": "52c3d97f24111c6527f9c74ccc3942d2d9380ac4", "filename": "compiler/rustc_infer/src/infer/outlives/env.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fenv.rs?ref=85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "patch": "@@ -138,13 +138,9 @@ impl<'tcx> OutlivesEnvironmentBuilder<'tcx> {\n                     self.region_bound_pairs\n                         .insert(ty::OutlivesPredicate(GenericKind::Param(param_b), r_a));\n                 }\n-                OutlivesBound::RegionSubProjection(r_a, projection_b) => {\n+                OutlivesBound::RegionSubAlias(r_a, kind, projection_b) => {\n                     self.region_bound_pairs\n-                        .insert(ty::OutlivesPredicate(GenericKind::Projection(projection_b), r_a));\n-                }\n-                OutlivesBound::RegionSubOpaque(r_a, def_id, substs) => {\n-                    self.region_bound_pairs\n-                        .insert(ty::OutlivesPredicate(GenericKind::Opaque(def_id, substs), r_a));\n+                        .insert(ty::OutlivesPredicate(GenericKind::Alias(kind, projection_b), r_a));\n                 }\n                 OutlivesBound::RegionSubRegion(r_a, r_b) => {\n                     if let (ReEarlyBound(_) | ReFree(_), ReVar(vid_b)) = (r_a.kind(), r_b.kind()) {"}, {"sha": "4a93597a643f83761a5257db32fc92db956bfd5d", "filename": "compiler/rustc_infer/src/infer/outlives/obligations.rs", "status": "modified", "additions": 13, "deletions": 35, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs?ref=85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "patch": "@@ -266,11 +266,8 @@ where\n                 Component::Param(param_ty) => {\n                     self.param_ty_must_outlive(origin, region, *param_ty);\n                 }\n-                Component::Opaque(def_id, substs) => {\n-                    self.opaque_must_outlive(*def_id, substs, origin, region)\n-                }\n-                Component::Projection(projection_ty) => {\n-                    self.projection_must_outlive(origin, region, *projection_ty);\n+                Component::Alias(kind, data) => {\n+                    self.alias_must_outlive(*kind, *data, origin, region)\n                 }\n                 Component::EscapingProjection(subcomponents) => {\n                     self.components_must_outlive(origin, &subcomponents, region, category);\n@@ -305,44 +302,25 @@ where\n     }\n \n     #[instrument(level = \"debug\", skip(self))]\n-    fn opaque_must_outlive(\n+    fn alias_must_outlive(\n         &mut self,\n-        def_id: DefId,\n-        substs: SubstsRef<'tcx>,\n+        kind: ty::AliasKind,\n+        data: ty::AliasTy<'tcx>,\n         origin: infer::SubregionOrigin<'tcx>,\n         region: ty::Region<'tcx>,\n     ) {\n         self.generic_must_outlive(\n             origin,\n             region,\n-            GenericKind::Opaque(def_id, substs),\n-            def_id,\n-            substs,\n-            true,\n+            GenericKind::Alias(kind, data),\n+            data.def_id,\n+            data.substs,\n+            kind == ty::Opaque,\n             |ty| match *ty.kind() {\n-                ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs, .. }) => (def_id, substs),\n-                _ => bug!(\"expected only projection types from env, not {:?}\", ty),\n-            },\n-        );\n-    }\n-\n-    #[instrument(level = \"debug\", skip(self))]\n-    fn projection_must_outlive(\n-        &mut self,\n-        origin: infer::SubregionOrigin<'tcx>,\n-        region: ty::Region<'tcx>,\n-        projection_ty: ty::AliasTy<'tcx>,\n-    ) {\n-        self.generic_must_outlive(\n-            origin,\n-            region,\n-            GenericKind::Projection(projection_ty),\n-            projection_ty.def_id,\n-            projection_ty.substs,\n-            false,\n-            |ty| match ty.kind() {\n-                ty::Alias(ty::Projection, projection_ty) => {\n-                    (projection_ty.def_id, projection_ty.substs)\n+                ty::Alias(filter_kind, ty::AliasTy { def_id, substs, .. })\n+                    if kind == filter_kind =>\n+                {\n+                    (def_id, substs)\n                 }\n                 _ => bug!(\"expected only projection types from env, not {:?}\", ty),\n             },"}, {"sha": "66bbf47c3b6e6a8ca79b78672de0c656f133cec8", "filename": "compiler/rustc_infer/src/infer/outlives/verify.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fverify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fverify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fverify.rs?ref=85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "patch": "@@ -170,16 +170,10 @@ impl<'cx, 'tcx> VerifyBoundCx<'cx, 'tcx> {\n         match *component {\n             Component::Region(lt) => VerifyBound::OutlivedBy(lt),\n             Component::Param(param_ty) => self.param_bound(param_ty),\n-            Component::Opaque(did, substs) => self.projection_opaque_bounds(\n-                GenericKind::Opaque(did, substs),\n-                did,\n-                substs,\n-                visited,\n-            ),\n-            Component::Projection(projection_ty) => self.projection_opaque_bounds(\n-                GenericKind::Projection(projection_ty),\n-                projection_ty.def_id,\n-                projection_ty.substs,\n+            Component::Alias(kind, data) => self.projection_opaque_bounds(\n+                GenericKind::Alias(kind, data),\n+                data.def_id,\n+                data.substs,\n                 visited,\n             ),\n             Component::EscapingProjection(ref components) => {"}, {"sha": "fda5ffe78467822c5a4a17e566c888339454bfe6", "filename": "compiler/rustc_infer/src/infer/region_constraints/mod.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs?ref=85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "patch": "@@ -12,10 +12,8 @@ use rustc_data_structures::intern::Interned;\n use rustc_data_structures::sync::Lrc;\n use rustc_data_structures::undo_log::UndoLogs;\n use rustc_data_structures::unify as ut;\n-use rustc_hir::def_id::DefId;\n use rustc_index::vec::IndexVec;\n use rustc_middle::infer::unify_key::{RegionVidKey, UnifiedRegion};\n-use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::ReStatic;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_middle::ty::{ReLateBound, ReVar};\n@@ -169,8 +167,7 @@ pub struct Verify<'tcx> {\n #[derive(Copy, Clone, PartialEq, Eq, Hash, TypeFoldable, TypeVisitable)]\n pub enum GenericKind<'tcx> {\n     Param(ty::ParamTy),\n-    Projection(ty::AliasTy<'tcx>),\n-    Opaque(DefId, SubstsRef<'tcx>),\n+    Alias(ty::AliasKind, ty::AliasTy<'tcx>),\n }\n \n /// Describes the things that some `GenericKind` value `G` is known to\n@@ -749,9 +746,9 @@ impl<'tcx> fmt::Debug for GenericKind<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match *self {\n             GenericKind::Param(ref p) => write!(f, \"{:?}\", p),\n-            GenericKind::Projection(ref p) => write!(f, \"{:?}\", p),\n-            GenericKind::Opaque(def_id, substs) => ty::tls::with(|tcx| {\n-                write!(f, \"{}\", tcx.def_path_str_with_substs(def_id, tcx.lift(substs).unwrap()))\n+            GenericKind::Alias(ty::Projection, ref p) => write!(f, \"{:?}\", p),\n+            GenericKind::Alias(ty::Opaque, ref p) => ty::tls::with(|tcx| {\n+                write!(f, \"{}\", tcx.def_path_str_with_substs(p.def_id, tcx.lift(p.substs).unwrap()))\n             }),\n         }\n     }\n@@ -761,9 +758,9 @@ impl<'tcx> fmt::Display for GenericKind<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match *self {\n             GenericKind::Param(ref p) => write!(f, \"{}\", p),\n-            GenericKind::Projection(ref p) => write!(f, \"{}\", p),\n-            GenericKind::Opaque(def_id, substs) => ty::tls::with(|tcx| {\n-                write!(f, \"{}\", tcx.def_path_str_with_substs(def_id, tcx.lift(substs).unwrap()))\n+            GenericKind::Alias(ty::Projection, ref p) => write!(f, \"{}\", p),\n+            GenericKind::Alias(ty::Opaque, ref p) => ty::tls::with(|tcx| {\n+                write!(f, \"{}\", tcx.def_path_str_with_substs(p.def_id, tcx.lift(p.substs).unwrap()))\n             }),\n         }\n     }\n@@ -773,8 +770,7 @@ impl<'tcx> GenericKind<'tcx> {\n     pub fn to_ty(&self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {\n         match *self {\n             GenericKind::Param(ref p) => p.to_ty(tcx),\n-            GenericKind::Projection(ref p) => tcx.mk_projection(p.def_id, p.substs),\n-            GenericKind::Opaque(def_id, substs) => tcx.mk_opaque(def_id, substs),\n+            GenericKind::Alias(kind, data) => tcx.mk_ty(ty::Alias(kind, data)),\n         }\n     }\n }"}, {"sha": "fb448ec0222d8b3f8df6f97288cee776582b7e13", "filename": "compiler/rustc_infer/src/traits/util.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs?ref=85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "patch": "@@ -261,17 +261,8 @@ impl<'tcx> Elaborator<'tcx> {\n \n                             Component::UnresolvedInferenceVariable(_) => None,\n \n-                            Component::Opaque(def_id, substs) => {\n-                                let ty = tcx.mk_opaque(def_id, substs);\n-                                Some(ty::PredicateKind::Clause(ty::Clause::TypeOutlives(\n-                                    ty::OutlivesPredicate(ty, r_min),\n-                                )))\n-                            }\n-\n-                            Component::Projection(projection) => {\n-                                // We might end up here if we have `Foo<<Bar as Baz>::Assoc>: 'a`.\n-                                // With this, we can deduce that `<Bar as Baz>::Assoc: 'a`.\n-                                let ty = tcx.mk_projection(projection.def_id, projection.substs);\n+                            Component::Alias(kind, data) => {\n+                                let ty = tcx.mk_ty(ty::Alias(kind, data));\n                                 Some(ty::PredicateKind::Clause(ty::Clause::TypeOutlives(\n                                     ty::OutlivesPredicate(ty, r_min),\n                                 )))"}, {"sha": "2a68315fefc56862dfab1304ad9e8e7aedccadc2", "filename": "compiler/rustc_middle/src/traits/query.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fquery.rs?ref=85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "patch": "@@ -8,9 +8,8 @@\n use crate::error::DropCheckOverflow;\n use crate::infer::canonical::{Canonical, QueryResponse};\n use crate::ty::error::TypeError;\n-use crate::ty::subst::{GenericArg, SubstsRef};\n+use crate::ty::subst::GenericArg;\n use crate::ty::{self, Ty, TyCtxt};\n-use rustc_hir::def_id::DefId;\n use rustc_span::source_map::Span;\n \n pub mod type_op {\n@@ -214,6 +213,5 @@ pub struct NormalizationResult<'tcx> {\n pub enum OutlivesBound<'tcx> {\n     RegionSubRegion(ty::Region<'tcx>, ty::Region<'tcx>),\n     RegionSubParam(ty::Region<'tcx>, ty::ParamTy),\n-    RegionSubProjection(ty::Region<'tcx>, ty::AliasTy<'tcx>),\n-    RegionSubOpaque(ty::Region<'tcx>, DefId, SubstsRef<'tcx>),\n+    RegionSubAlias(ty::Region<'tcx>, ty::AliasKind, ty::AliasTy<'tcx>),\n }"}, {"sha": "8f64eb3e4baf6f7ba4d8a0d4665deff0f6954e2b", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "patch": "@@ -227,6 +227,7 @@ TrivialTypeTraversalAndLiftImpls! {\n     crate::ty::BoundRegionKind,\n     crate::ty::AssocItem,\n     crate::ty::AssocKind,\n+    crate::ty::AliasKind,\n     crate::ty::Placeholder<crate::ty::BoundRegionKind>,\n     crate::ty::ClosureKind,\n     crate::ty::FreeRegion,"}, {"sha": "a07582fc8ff1ec6e8a859d4642003d90806c8bd0", "filename": "compiler/rustc_middle/src/ty/subst.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs?ref=85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "patch": "@@ -545,6 +545,9 @@ impl<'tcx, T: TypeVisitable<'tcx>> TypeVisitable<'tcx> for &'tcx ty::List<T> {\n /// Similar to [`super::Binder`] except that it tracks early bound generics, i.e. `struct Foo<T>(T)`\n /// needs `T` substituted immediately. This type primarily exists to avoid forgetting to call\n /// `subst`.\n+///\n+/// If you don't have anything to `subst`, you may be looking for\n+/// [`subst_identity`](EarlyBinder::subst_identity) or [`skip_binder`](EarlyBinder::skip_binder).\n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]\n #[derive(Encodable, Decodable, HashStable)]\n pub struct EarlyBinder<T>(pub T);\n@@ -585,6 +588,14 @@ impl<T> EarlyBinder<T> {\n         EarlyBinder(value)\n     }\n \n+    /// Skips the binder and returns the \"bound\" value.\n+    /// This can be used to extract data that does not depend on generic parameters\n+    /// (e.g., getting the `DefId` of the inner value or getting the number of\n+    /// arguments of an `FnSig`). Otherwise, consider using\n+    /// [`subst_identity`](EarlyBinder::subst_identity).\n+    ///\n+    /// See also [`Binder::skip_binder`](super::Binder::skip_binder), which is\n+    /// the analogous operation on [`super::Binder`].\n     pub fn skip_binder(self) -> T {\n         self.0\n     }\n@@ -736,6 +747,14 @@ impl<'tcx, T: TypeFoldable<'tcx>> ty::EarlyBinder<T> {\n         self.0.fold_with(&mut folder)\n     }\n \n+    /// Makes the identity substitution `T0 => T0, ..., TN => TN`.\n+    /// Conceptually, this converts universally bound variables into placeholders\n+    /// when inside of a given item.\n+    ///\n+    /// For example, consider `for<T> fn foo<T>(){ .. }`:\n+    /// - Outside of `foo`, `T` is bound (represented by the presence of `EarlyBinder`).\n+    /// - Inside of the body of `foo`, we treat `T` as a placeholder by calling\n+    /// `subst_identity` to discharge the `EarlyBinder`.\n     pub fn subst_identity(self) -> T {\n         self.0\n     }"}, {"sha": "7f81aef1c73217d57f5013678b162a4bce27b82f", "filename": "compiler/rustc_mir_build/src/errors.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/compiler%2Frustc_mir_build%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/compiler%2Frustc_mir_build%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Ferrors.rs?ref=85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "patch": "@@ -770,6 +770,8 @@ pub(crate) struct PatternNotCovered<'s, 'tcx> {\n     #[subdiagnostic]\n     pub let_suggestion: Option<SuggestLet>,\n     #[subdiagnostic]\n+    pub misc_suggestion: Option<MiscPatternSuggestion>,\n+    #[subdiagnostic]\n     pub res_defined_here: Option<ResDefinedHere>,\n }\n \n@@ -848,3 +850,16 @@ pub enum SuggestLet {\n         count: usize,\n     },\n }\n+\n+#[derive(Subdiagnostic)]\n+pub enum MiscPatternSuggestion {\n+    #[suggestion(\n+        mir_build_suggest_attempted_int_lit,\n+        code = \"_\",\n+        applicability = \"maybe-incorrect\"\n+    )]\n+    AttemptedIntegerLiteral {\n+        #[primary_span]\n+        start_span: Span,\n+    },\n+}"}, {"sha": "34e637f594842687aaec93b1075bacb16eb8df0b", "filename": "compiler/rustc_mir_build/src/thir/pattern/check_match.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs?ref=85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "patch": "@@ -6,8 +6,9 @@ use super::{PatCtxt, PatternError};\n \n use crate::errors::*;\n \n+use hir::{ExprKind, PatKind};\n use rustc_arena::TypedArena;\n-use rustc_ast::Mutability;\n+use rustc_ast::{LitKind, Mutability};\n use rustc_errors::{\n     struct_span_err, Applicability, Diagnostic, DiagnosticBuilder, ErrorGuaranteed, MultiSpan,\n };\n@@ -389,7 +390,7 @@ impl<'p, 'tcx> MatchVisitor<'_, 'p, 'tcx> {\n             return;\n         }\n \n-        let (inform, interpreted_as_const, res_defined_here,let_suggestion) =\n+        let (inform, interpreted_as_const, res_defined_here,let_suggestion, misc_suggestion) =\n             if let hir::PatKind::Path(hir::QPath::Resolved(\n                 None,\n                 hir::Path {\n@@ -413,6 +414,7 @@ impl<'p, 'tcx> MatchVisitor<'_, 'p, 'tcx> {\n                         }\n                     },\n                     None,\n+                    None,\n                 )\n             } else if let Some(span) = sp && self.tcx.sess.source_map().is_span_accessible(span) {\n                 let mut bindings = vec![];\n@@ -426,10 +428,19 @@ impl<'p, 'tcx> MatchVisitor<'_, 'p, 'tcx> {\n                 let end_span = semi_span.shrink_to_lo();\n                 let count = witnesses.len();\n \n+                // If the pattern to match is an integer literal:\n+                let int_suggestion = if\n+                    let PatKind::Lit(expr) = &pat.kind\n+                    && bindings.is_empty()\n+                    && let ExprKind::Lit(Spanned { node: LitKind::Int(_, _), span }) = expr.kind {\n+                    // Then give a suggestion, the user might've meant to create a binding instead.\n+                    Some(MiscPatternSuggestion::AttemptedIntegerLiteral { start_span: span.shrink_to_lo() })\n+                } else { None };\n+\n                 let let_suggestion = if bindings.is_empty() {SuggestLet::If{start_span, semi_span, count}} else{ SuggestLet::Else{end_span, count }};\n-                (sp.map(|_|Inform), None, None, Some(let_suggestion))\n+                (sp.map(|_|Inform), None, None, Some(let_suggestion), int_suggestion)\n             } else{\n-                (sp.map(|_|Inform), None, None,  None)\n+                (sp.map(|_|Inform), None, None,  None, None)\n             };\n \n         let adt_defined_here = try {\n@@ -453,6 +464,7 @@ impl<'p, 'tcx> MatchVisitor<'_, 'p, 'tcx> {\n             _p: (),\n             pattern_ty,\n             let_suggestion,\n+            misc_suggestion,\n             res_defined_here,\n             adt_defined_here,\n         });"}, {"sha": "1766b0293de52a33c2eceb3254ecfe0b44e7f0af", "filename": "compiler/rustc_parse/src/parser/ty.rs", "status": "modified", "additions": 36, "deletions": 4, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs?ref=85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "patch": "@@ -727,11 +727,13 @@ impl<'a> Parser<'a> {\n         let mut bounds = Vec::new();\n         let mut negative_bounds = Vec::new();\n \n+        // In addition to looping while we find generic bounds:\n+        // We continue even if we find a keyword. This is necessary for error recovery on,\n+        // for example, `impl fn()`. The only keyword that can go after generic bounds is\n+        // `where`, so stop if it's it.\n+        // We also continue if we find types (not traits), again for error recovery.\n         while self.can_begin_bound()\n-            // Continue even if we find a keyword.\n-            // This is necessary for error recover on, for example, `impl fn()`.\n-            //\n-            // The only keyword that can go after generic bounds is `where`, so stop if it's it.\n+            || self.token.can_begin_type()\n             || (self.token.is_reserved_ident() && !self.token.is_keyword(kw::Where))\n         {\n             if self.token.is_keyword(kw::Dyn) {\n@@ -938,6 +940,36 @@ impl<'a> Parser<'a> {\n             && self.look_ahead(1, |tok| tok.kind == TokenKind::OpenDelim(Delimiter::Parenthesis))\n             && let Some(path) = self.recover_path_from_fn()\n         {\n+            path\n+        } else if !self.token.is_path_start() && self.token.can_begin_type() {\n+            let ty = self.parse_ty_no_plus()?;\n+            // Instead of finding a path (a trait), we found a type.\n+            let mut err = self.struct_span_err(ty.span, \"expected a trait, found type\");\n+\n+            // If we can recover, try to extract a path from the type. Note\n+            // that we do not use the try operator when parsing the type because\n+            // if it fails then we get a parser error which we don't want (we're trying\n+            // to recover from errors, not make more).\n+            let path = if self.may_recover()\n+                && matches!(ty.kind, TyKind::Ptr(..) | TyKind::Ref(..))\n+                && let TyKind::Path(_, path) = &ty.peel_refs().kind {\n+                // Just get the indirection part of the type.\n+                let span = ty.span.until(path.span);\n+\n+                err.span_suggestion_verbose(\n+                    span,\n+                    \"consider removing the indirection\",\n+                    \"\",\n+                    Applicability::MaybeIncorrect,\n+                );\n+\n+                path.clone()\n+            } else {\n+                return Err(err);\n+            };\n+\n+            err.emit();\n+\n             path\n         } else {\n             self.parse_path(PathStyle::Type)?"}, {"sha": "d457a4a2beaf5c00569ad96931407d841b8ab187", "filename": "compiler/rustc_traits/src/implied_outlives_bounds.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs?ref=85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "patch": "@@ -154,9 +154,8 @@ fn implied_bounds_from_components<'tcx>(\n             match component {\n                 Component::Region(r) => Some(OutlivesBound::RegionSubRegion(sub_region, r)),\n                 Component::Param(p) => Some(OutlivesBound::RegionSubParam(sub_region, p)),\n-                Component::Projection(p) => Some(OutlivesBound::RegionSubProjection(sub_region, p)),\n-                Component::Opaque(def_id, substs) => {\n-                    Some(OutlivesBound::RegionSubOpaque(sub_region, def_id, substs))\n+                Component::Alias(kind, p) => {\n+                    Some(OutlivesBound::RegionSubAlias(sub_region, kind, p))\n                 }\n                 Component::EscapingProjection(_) =>\n                 // If the projection has escaping regions, don't"}, {"sha": "a9fbad55dac5540b6230dd669fdee5926cd06302", "filename": "compiler/rustc_ty_utils/src/consts.rs", "status": "modified", "additions": 42, "deletions": 2, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs?ref=85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "patch": "@@ -302,13 +302,53 @@ impl<'a, 'tcx> IsThirPolymorphic<'a, 'tcx> {\n         }\n \n         match expr.kind {\n-            thir::ExprKind::NamedConst { substs, .. } => substs.has_non_region_param(),\n+            thir::ExprKind::NamedConst { substs, .. }\n+            | thir::ExprKind::ConstBlock { substs, .. } => substs.has_non_region_param(),\n             thir::ExprKind::ConstParam { .. } => true,\n             thir::ExprKind::Repeat { value, count } => {\n                 self.visit_expr(&self.thir()[value]);\n                 count.has_non_region_param()\n             }\n-            _ => false,\n+            thir::ExprKind::Scope { .. }\n+            | thir::ExprKind::Box { .. }\n+            | thir::ExprKind::If { .. }\n+            | thir::ExprKind::Call { .. }\n+            | thir::ExprKind::Deref { .. }\n+            | thir::ExprKind::Binary { .. }\n+            | thir::ExprKind::LogicalOp { .. }\n+            | thir::ExprKind::Unary { .. }\n+            | thir::ExprKind::Cast { .. }\n+            | thir::ExprKind::Use { .. }\n+            | thir::ExprKind::NeverToAny { .. }\n+            | thir::ExprKind::Pointer { .. }\n+            | thir::ExprKind::Loop { .. }\n+            | thir::ExprKind::Let { .. }\n+            | thir::ExprKind::Match { .. }\n+            | thir::ExprKind::Block { .. }\n+            | thir::ExprKind::Assign { .. }\n+            | thir::ExprKind::AssignOp { .. }\n+            | thir::ExprKind::Field { .. }\n+            | thir::ExprKind::Index { .. }\n+            | thir::ExprKind::VarRef { .. }\n+            | thir::ExprKind::UpvarRef { .. }\n+            | thir::ExprKind::Borrow { .. }\n+            | thir::ExprKind::AddressOf { .. }\n+            | thir::ExprKind::Break { .. }\n+            | thir::ExprKind::Continue { .. }\n+            | thir::ExprKind::Return { .. }\n+            | thir::ExprKind::Array { .. }\n+            | thir::ExprKind::Tuple { .. }\n+            | thir::ExprKind::Adt(_)\n+            | thir::ExprKind::PlaceTypeAscription { .. }\n+            | thir::ExprKind::ValueTypeAscription { .. }\n+            | thir::ExprKind::Closure(_)\n+            | thir::ExprKind::Literal { .. }\n+            | thir::ExprKind::NonHirLiteral { .. }\n+            | thir::ExprKind::ZstLiteral { .. }\n+            | thir::ExprKind::StaticRef { .. }\n+            | thir::ExprKind::InlineAsm(_)\n+            | thir::ExprKind::ThreadLocalRef(_)\n+            | thir::ExprKind::Yield { .. } => false,\n         }\n     }\n     fn pat_is_poly(&mut self, pat: &thir::Pat<'tcx>) -> bool {"}, {"sha": "f824c9e3ad2bd5eacbeec79587c137bb728067a9", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "patch": "@@ -531,7 +531,7 @@ fn item_function(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, f: &cle\n         f.decl.output.as_return().and_then(|output| notable_traits_button(output, cx));\n \n     wrap_into_item_decl(w, |w| {\n-        wrap_item(w, \"fn\", |w| {\n+        wrap_item(w, |w| {\n             render_attributes_in_pre(w, it, \"\");\n             w.reserve(header_len);\n             write!(\n@@ -570,7 +570,7 @@ fn item_trait(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, t: &clean:\n \n     // Output the trait definition\n     wrap_into_item_decl(w, |w| {\n-        wrap_item(w, \"trait\", |w| {\n+        wrap_item(w, |w| {\n             render_attributes_in_pre(w, it, \"\");\n             write!(\n                 w,\n@@ -1051,7 +1051,7 @@ fn item_trait(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, t: &clean:\n \n fn item_trait_alias(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, t: &clean::TraitAlias) {\n     wrap_into_item_decl(w, |w| {\n-        wrap_item(w, \"trait-alias\", |w| {\n+        wrap_item(w, |w| {\n             render_attributes_in_pre(w, it, \"\");\n             write!(\n                 w,\n@@ -1075,7 +1075,7 @@ fn item_trait_alias(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, t: &\n \n fn item_opaque_ty(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, t: &clean::OpaqueTy) {\n     wrap_into_item_decl(w, |w| {\n-        wrap_item(w, \"opaque\", |w| {\n+        wrap_item(w, |w| {\n             render_attributes_in_pre(w, it, \"\");\n             write!(\n                 w,\n@@ -1099,7 +1099,7 @@ fn item_opaque_ty(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, t: &cl\n \n fn item_typedef(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, t: &clean::Typedef) {\n     fn write_content(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Typedef) {\n-        wrap_item(w, \"typedef\", |w| {\n+        wrap_item(w, |w| {\n             render_attributes_in_pre(w, it, \"\");\n             write!(w, \"{}\", visibility_print_with_space(it.visibility(cx.tcx()), it.item_id, cx));\n             write!(\n@@ -1128,7 +1128,7 @@ fn item_typedef(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, t: &clea\n \n fn item_union(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, s: &clean::Union) {\n     wrap_into_item_decl(w, |w| {\n-        wrap_item(w, \"union\", |w| {\n+        wrap_item(w, |w| {\n             render_attributes_in_pre(w, it, \"\");\n             render_union(w, it, Some(&s.generics), &s.fields, \"\", cx);\n         });\n@@ -1193,7 +1193,7 @@ fn item_enum(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, e: &clean::\n     let tcx = cx.tcx();\n     let count_variants = e.variants().count();\n     wrap_into_item_decl(w, |w| {\n-        wrap_item(w, \"enum\", |w| {\n+        wrap_item(w, |w| {\n             render_attributes_in_pre(w, it, \"\");\n             write!(\n                 w,\n@@ -1357,17 +1357,17 @@ fn item_proc_macro(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, m: &c\n         let name = it.name.expect(\"proc-macros always have names\");\n         match m.kind {\n             MacroKind::Bang => {\n-                wrap_item(w, \"macro\", |w| {\n+                wrap_item(w, |w| {\n                     write!(w, \"{}!() {{ /* proc-macro */ }}\", name);\n                 });\n             }\n             MacroKind::Attr => {\n-                wrap_item(w, \"attr\", |w| {\n+                wrap_item(w, |w| {\n                     write!(w, \"#[{}]\", name);\n                 });\n             }\n             MacroKind::Derive => {\n-                wrap_item(w, \"derive\", |w| {\n+                wrap_item(w, |w| {\n                     write!(w, \"#[derive({})]\", name);\n                     if !m.helpers.is_empty() {\n                         w.push_str(\"\\n{\\n\");\n@@ -1401,7 +1401,7 @@ fn item_primitive(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item) {\n \n fn item_constant(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, c: &clean::Constant) {\n     wrap_into_item_decl(w, |w| {\n-        wrap_item(w, \"const\", |w| {\n+        wrap_item(w, |w| {\n             let tcx = cx.tcx();\n             render_attributes_in_code(w, it);\n \n@@ -1451,7 +1451,7 @@ fn item_constant(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, c: &cle\n \n fn item_struct(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, s: &clean::Struct) {\n     wrap_into_item_decl(w, |w| {\n-        wrap_item(w, \"struct\", |w| {\n+        wrap_item(w, |w| {\n             render_attributes_in_code(w, it);\n             render_struct(w, it, Some(&s.generics), s.ctor_kind, &s.fields, \"\", true, cx);\n         });\n@@ -1504,7 +1504,7 @@ fn item_struct(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, s: &clean\n \n fn item_static(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, s: &clean::Static) {\n     wrap_into_item_decl(w, |w| {\n-        wrap_item(w, \"static\", |w| {\n+        wrap_item(w, |w| {\n             render_attributes_in_code(w, it);\n             write!(\n                 w,\n@@ -1521,7 +1521,7 @@ fn item_static(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, s: &clean\n \n fn item_foreign_type(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item) {\n     wrap_into_item_decl(w, |w| {\n-        wrap_item(w, \"foreigntype\", |w| {\n+        wrap_item(w, |w| {\n             w.write_str(\"extern {\\n\");\n             render_attributes_in_code(w, it);\n             write!(\n@@ -1618,11 +1618,11 @@ where\n     w.write_str(\"</div>\")\n }\n \n-fn wrap_item<F>(w: &mut Buffer, item_name: &str, f: F)\n+fn wrap_item<F>(w: &mut Buffer, f: F)\n where\n     F: FnOnce(&mut Buffer),\n {\n-    w.write_fmt(format_args!(\"<pre class=\\\"rust {}\\\"><code>\", item_name));\n+    w.write_str(r#\"<pre class=\"rust\"><code>\"#);\n     f(w);\n     w.write_str(\"</code></pre>\");\n }"}, {"sha": "8561f537f3d32a8a18ce237832d04593fdf37be7", "filename": "tests/rustdoc-gui/code-tags.goml", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc-gui%2Fcode-tags.goml", "raw_url": "https://github.com/rust-lang/rust/raw/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc-gui%2Fcode-tags.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-gui%2Fcode-tags.goml?ref=85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "patch": "@@ -9,16 +9,16 @@ size: (1080, 600)\n // Check that their content is inside <pre><code>\n assert-count: (\".example-wrap pre > code\", 4)\n // Check that function signature is inside <pre><code>\n-assert: \"pre.rust.fn > code\"\n+assert: \".item-decl pre.rust > code\"\n \n goto: \"file://\" + |DOC_PATH| + \"/test_docs/struct.Foo.html\"\n-assert: \"pre.rust.struct > code\"\n+assert: \".item-decl pre.rust > code\"\n \n goto: \"file://\" + |DOC_PATH| + \"/test_docs/enum.AnEnum.html\"\n-assert: \"pre.rust.enum > code\"\n+assert: \".item-decl pre.rust > code\"\n \n goto: \"file://\" + |DOC_PATH| + \"/test_docs/trait.AnotherOne.html\"\n-assert: \"pre.rust.trait > code\"\n+assert: \".item-decl pre.rust > code\"\n \n goto: \"file://\" + |DOC_PATH| + \"/test_docs/type.SomeType.html\"\n-assert: \"pre.rust.typedef > code\"\n+assert: \".item-decl pre.rust > code\""}, {"sha": "fafb156317866cc1970c78c0cc1395a0485afdf2", "filename": "tests/rustdoc-gui/font-weight.goml", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc-gui%2Ffont-weight.goml", "raw_url": "https://github.com/rust-lang/rust/raw/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc-gui%2Ffont-weight.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-gui%2Ffont-weight.goml?ref=85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "patch": "@@ -20,7 +20,7 @@ goto: \"file://\" + |DOC_PATH| + \"/lib2/trait.Trait.html\"\n // This is a complex selector, so here's how it works:\n //\n // * //*[@class='item-decl'] \u2014 selects element of any tag with classes docblock and item-decl\n-// * /pre[@class='rust trait'] \u2014 selects immediate child with tag pre and classes rust and trait\n+// * /pre[@class='rust'] \u2014 selects immediate child with tag pre and class rust\n // * /code \u2014 selects immediate child with tag code\n // * /a[@class='constant'] \u2014 selects immediate child with tag a and class constant\n // * //text() \u2014 selects child that is text node\n@@ -29,11 +29,11 @@ goto: \"file://\" + |DOC_PATH| + \"/lib2/trait.Trait.html\"\n // This uses '/parent::*' as a proxy for the style of the text node.\n // We can't just select the '<a>' because intermediate tags could be added.\n assert-count: (\n-    \"//*[@class='item-decl']/pre[@class='rust trait']/code/a[@class='constant']//text()/parent::*\",\n+    \"//*[@class='item-decl']/pre[@class='rust']/code/a[@class='constant']//text()/parent::*\",\n     1,\n )\n assert-css: (\n-    \"//*[@class='item-decl']/pre[@class='rust trait']/code/a[@class='constant']//text()/parent::*\",\n+    \"//*[@class='item-decl']/pre[@class='rust']/code/a[@class='constant']//text()/parent::*\",\n     {\"font-weight\": \"400\"},\n )\n "}, {"sha": "c527cfbfcbc5630558ab81e40d3fd7c0d094d109", "filename": "tests/rustdoc-gui/list_code_block.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc-gui%2Flist_code_block.goml", "raw_url": "https://github.com/rust-lang/rust/raw/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc-gui%2Flist_code_block.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-gui%2Flist_code_block.goml?ref=85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "patch": "@@ -1,4 +1,4 @@\n // This test checks that code blocks in list are supported.\n goto: \"file://\" + |DOC_PATH| + \"/test_docs/index.html\"\n goto: \"./fn.check_list_code_block.html\"\n-assert: (\"pre.rust.fn\")\n+assert: (\".item-decl pre.rust\")"}, {"sha": "e7c0ee2de1a7a9036cc55a6ea9f6aecd588acfd5", "filename": "tests/rustdoc/array-links.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Farray-links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Farray-links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Farray-links.rs?ref=85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "patch": "@@ -4,25 +4,25 @@\n pub struct MyBox<T: ?Sized>(*const T);\n \n // @has 'foo/fn.alpha.html'\n-// @snapshot link_slice_u32 - '//pre[@class=\"rust fn\"]/code'\n+// @snapshot link_slice_u32 - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]/code'\n pub fn alpha() -> &'static [u32; 1] {\n     loop {}\n }\n \n // @has 'foo/fn.beta.html'\n-// @snapshot link_slice_generic - '//pre[@class=\"rust fn\"]/code'\n+// @snapshot link_slice_generic - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]/code'\n pub fn beta<T>() -> &'static [T; 1] {\n     loop {}\n }\n \n // @has 'foo/fn.gamma.html'\n-// @snapshot link_box_u32 - '//pre[@class=\"rust fn\"]/code'\n+// @snapshot link_box_u32 - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]/code'\n pub fn gamma() -> MyBox<[u32; 1]> {\n     loop {}\n }\n \n // @has 'foo/fn.delta.html'\n-// @snapshot link_box_generic - '//pre[@class=\"rust fn\"]/code'\n+// @snapshot link_box_generic - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]/code'\n pub fn delta<T>() -> MyBox<[T; 1]> {\n     loop {}\n }"}, {"sha": "77b139b644f3a8dd97b0cff39336735535d6c22e", "filename": "tests/rustdoc/assoc-consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Fassoc-consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Fassoc-consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fassoc-consts.rs?ref=85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "patch": "@@ -1,5 +1,5 @@\n pub trait Foo {\n-    // @has assoc_consts/trait.Foo.html '//*[@class=\"rust trait\"]' \\\n+    // @has assoc_consts/trait.Foo.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n     //      'const FOO: usize = 13usize;'\n     // @has - '//*[@id=\"associatedconstant.FOO\"]' 'const FOO: usize'\n     const FOO: usize = 12 + 1;"}, {"sha": "ab9702a24f469834a8fba8881cd660977831b744", "filename": "tests/rustdoc/assoc-item-cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Fassoc-item-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Fassoc-item-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fassoc-item-cast.rs?ref=85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "patch": "@@ -10,5 +10,5 @@ pub trait AsExpression<T> {\n }\n \n // @has foo/type.AsExprOf.html\n-// @has - '//pre[@class=\"rust typedef\"]' 'type AsExprOf<Item, Type> = <Item as AsExpression<Type>>::Expression;'\n+// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'type AsExprOf<Item, Type> = <Item as AsExpression<Type>>::Expression;'\n pub type AsExprOf<Item, Type> = <Item as AsExpression<Type>>::Expression;"}, {"sha": "de36c8ffeff0f6121e63f6ef38a24efb28d4ed8b", "filename": "tests/rustdoc/assoc-types.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Fassoc-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Fassoc-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fassoc-types.rs?ref=85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "patch": "@@ -12,8 +12,8 @@ pub trait Index<I: ?Sized> {\n }\n \n // @has assoc_types/fn.use_output.html\n-// @has - '//*[@class=\"rust fn\"]' '-> &T::Output'\n-// @has - '//*[@class=\"rust fn\"]//a[@href=\"trait.Index.html#associatedtype.Output\"]' 'Output'\n+// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' '-> &T::Output'\n+// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]//a[@href=\"trait.Index.html#associatedtype.Output\"]' 'Output'\n pub fn use_output<T: Index<usize>>(obj: &T, index: usize) -> &T::Output {\n     obj.index(index)\n }\n@@ -23,13 +23,13 @@ pub trait Feed {\n }\n \n // @has assoc_types/fn.use_input.html\n-// @has - '//*[@class=\"rust fn\"]' 'T::Input'\n-// @has - '//*[@class=\"rust fn\"]//a[@href=\"trait.Feed.html#associatedtype.Input\"]' 'Input'\n+// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'T::Input'\n+// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]//a[@href=\"trait.Feed.html#associatedtype.Input\"]' 'Input'\n pub fn use_input<T: Feed>(_feed: &T, _element: T::Input) { }\n \n // @has assoc_types/fn.cmp_input.html\n-// @has - '//*[@class=\"rust fn\"]' 'where T::Input: PartialEq<U::Input>'\n-// @has - '//*[@class=\"rust fn\"]//a[@href=\"trait.Feed.html#associatedtype.Input\"]' 'Input'\n+// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'where T::Input: PartialEq<U::Input>'\n+// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]//a[@href=\"trait.Feed.html#associatedtype.Input\"]' 'Input'\n pub fn cmp_input<T: Feed, U: Feed>(a: &T::Input, b: &U::Input) -> bool\n     where T::Input: PartialEq<U::Input>\n {"}, {"sha": "fb7ebb5f82239791039b451f21815eb27a00f443", "filename": "tests/rustdoc/async-fn.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Fasync-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Fasync-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fasync-fn.rs?ref=85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "patch": "@@ -1,35 +1,35 @@\n // edition:2018\n-// @has async_fn/fn.foo.html '//pre[@class=\"rust fn\"]' 'pub async fn foo() -> Option<Foo>'\n+// @has async_fn/fn.foo.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub async fn foo() -> Option<Foo>'\n pub async fn foo() -> Option<Foo> {\n     None\n }\n \n-// @has async_fn/fn.bar.html '//pre[@class=\"rust fn\"]' 'pub async fn bar(a: i32, b: i32) -> i32'\n+// @has async_fn/fn.bar.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub async fn bar(a: i32, b: i32) -> i32'\n pub async fn bar(a: i32, b: i32) -> i32 {\n     0\n }\n \n-// @has async_fn/fn.baz.html '//pre[@class=\"rust fn\"]' 'pub async fn baz<T>(a: T) -> T'\n+// @has async_fn/fn.baz.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub async fn baz<T>(a: T) -> T'\n pub async fn baz<T>(a: T) -> T {\n     a\n }\n \n-// @has async_fn/fn.qux.html '//pre[@class=\"rust fn\"]' 'pub async unsafe fn qux() -> char'\n+// @has async_fn/fn.qux.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub async unsafe fn qux() -> char'\n pub async unsafe fn qux() -> char {\n     '\u26a0'\n }\n \n-// @has async_fn/fn.mut_args.html '//pre[@class=\"rust fn\"]' 'pub async fn mut_args(a: usize)'\n+// @has async_fn/fn.mut_args.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub async fn mut_args(a: usize)'\n pub async fn mut_args(mut a: usize) {}\n \n-// @has async_fn/fn.mut_ref.html '//pre[@class=\"rust fn\"]' 'pub async fn mut_ref(x: i32)'\n+// @has async_fn/fn.mut_ref.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub async fn mut_ref(x: i32)'\n pub async fn mut_ref(ref mut x: i32) {}\n \n trait Bar {}\n \n impl Bar for () {}\n \n-// @has async_fn/fn.quux.html '//pre[@class=\"rust fn\"]' 'pub async fn quux() -> impl Bar'\n+// @has async_fn/fn.quux.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub async fn quux() -> impl Bar'\n pub async fn quux() -> impl Bar {\n     ()\n }\n@@ -50,27 +50,27 @@ pub trait Pattern<'a> {}\n \n pub trait Trait<const N: usize> {}\n // @has async_fn/fn.const_generics.html\n-// @has - '//pre[@class=\"rust fn\"]' 'pub async fn const_generics<const N: usize>(_: impl Trait<N>)'\n+// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub async fn const_generics<const N: usize>(_: impl Trait<N>)'\n pub async fn const_generics<const N: usize>(_: impl Trait<N>) {}\n \n // test that elided lifetimes are properly elided and not displayed as `'_`\n // regression test for #63037\n // @has async_fn/fn.elided.html\n-// @has - '//pre[@class=\"rust fn\"]' 'pub async fn elided(foo: &str) -> &str'\n+// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub async fn elided(foo: &str) -> &str'\n pub async fn elided(foo: &str) -> &str {}\n // This should really be shown as written, but for implementation reasons it's difficult.\n // See `impl Clean for TyKind::Ref`.\n // @has async_fn/fn.user_elided.html\n-// @has - '//pre[@class=\"rust fn\"]' 'pub async fn user_elided(foo: &str) -> &str'\n+// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub async fn user_elided(foo: &str) -> &str'\n pub async fn user_elided(foo: &'_ str) -> &str {}\n // @has async_fn/fn.static_trait.html\n-// @has - '//pre[@class=\"rust fn\"]' 'pub async fn static_trait(foo: &str) -> Box<dyn Bar>'\n+// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub async fn static_trait(foo: &str) -> Box<dyn Bar>'\n pub async fn static_trait(foo: &str) -> Box<dyn Bar> {}\n // @has async_fn/fn.lifetime_for_trait.html\n-// @has - '//pre[@class=\"rust fn\"]' \"pub async fn lifetime_for_trait(foo: &str) -> Box<dyn Bar + '_>\"\n+// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \"pub async fn lifetime_for_trait(foo: &str) -> Box<dyn Bar + '_>\"\n pub async fn lifetime_for_trait(foo: &str) -> Box<dyn Bar + '_> {}\n // @has async_fn/fn.elided_in_input_trait.html\n-// @has - '//pre[@class=\"rust fn\"]' \"pub async fn elided_in_input_trait(t: impl Pattern<'_>)\"\n+// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \"pub async fn elided_in_input_trait(t: impl Pattern<'_>)\"\n pub async fn elided_in_input_trait(t: impl Pattern<'_>) {}\n \n struct AsyncFdReadyGuard<'a, T> { x: &'a T }\n@@ -88,8 +88,8 @@ impl Foo {\n \n // test named lifetimes, just in case\n // @has async_fn/fn.named.html\n-// @has - '//pre[@class=\"rust fn\"]' \"pub async fn named<'a, 'b>(foo: &'a str) -> &'b str\"\n+// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \"pub async fn named<'a, 'b>(foo: &'a str) -> &'b str\"\n pub async fn named<'a, 'b>(foo: &'a str) -> &'b str {}\n // @has async_fn/fn.named_trait.html\n-// @has - '//pre[@class=\"rust fn\"]' \"pub async fn named_trait<'a, 'b>(foo: impl Pattern<'a>) -> impl Pattern<'b>\"\n+// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \"pub async fn named_trait<'a, 'b>(foo: impl Pattern<'a>) -> impl Pattern<'b>\"\n pub async fn named_trait<'a, 'b>(foo: impl Pattern<'a>) -> impl Pattern<'b> {}"}, {"sha": "70e2e5c29508c211b28246df05e984b8fc2167b4", "filename": "tests/rustdoc/attributes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fattributes.rs?ref=85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "patch": "@@ -1,13 +1,13 @@\n #![crate_name = \"foo\"]\n \n-// @has foo/fn.f.html '//*[@class=\"rust fn\"]' '#[no_mangle]'\n+// @has foo/fn.f.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' '#[no_mangle]'\n #[no_mangle]\n pub extern \"C\" fn f() {}\n \n-// @has foo/fn.g.html '//*[@class=\"rust fn\"]' '#[export_name = \"bar\"]'\n+// @has foo/fn.g.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' '#[export_name = \"bar\"]'\n #[export_name = \"bar\"]\n pub extern \"C\" fn g() {}\n \n-// @has foo/struct.Repr.html '//*[@class=\"item-decl\"]' '#[repr(C, align(8))]'\n+// @has foo/struct.Repr.html '//div[@class=\"item-decl\"]' '#[repr(C, align(8))]'\n #[repr(C, align(8))]\n pub struct Repr;"}, {"sha": "5143968bbd4390df0bab4c66cb4eb1f611eeb7c6", "filename": "tests/rustdoc/auxiliary/issue-85454.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Fauxiliary%2Fissue-85454.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Fauxiliary%2Fissue-85454.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fauxiliary%2Fissue-85454.rs?ref=85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "patch": "@@ -1,5 +1,5 @@\n // @has issue_85454/trait.FromResidual.html\n-// @has - '//pre[@class=\"rust trait\"]' 'pub trait FromResidual<R = <Self as Try>::Residual> { fn from_residual(residual: R) -> Self; }'\n+// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub trait FromResidual<R = <Self as Try>::Residual> { fn from_residual(residual: R) -> Self; }'\n pub trait FromResidual<R = <Self as Try>::Residual> {\n     fn from_residual(residual: R) -> Self;\n }"}, {"sha": "4366ad4d0adaca435f5cf5ee8df2b307673e8a37", "filename": "tests/rustdoc/const-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Fconst-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Fconst-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fconst-fn.rs?ref=85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "patch": "@@ -1,7 +1,7 @@\n #![crate_name = \"foo\"]\n \n // @has foo/fn.bar.html\n-// @has - '//*[@class=\"rust fn\"]' 'pub const fn bar() -> '\n+// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub const fn bar() -> '\n /// foo\n pub const fn bar() -> usize {\n     2"}, {"sha": "b5226ad3f78bd6e0199ce2a4629b2207e406fbfa", "filename": "tests/rustdoc/const-generics/add-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Fconst-generics%2Fadd-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Fconst-generics%2Fadd-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fconst-generics%2Fadd-impl.rs?ref=85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "patch": "@@ -2,7 +2,7 @@\n \n use std::ops::Add;\n \n-// @has foo/struct.Simd.html '//pre[@class=\"rust struct\"]' 'pub struct Simd<T, const WIDTH: usize>'\n+// @has foo/struct.Simd.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub struct Simd<T, const WIDTH: usize>'\n pub struct Simd<T, const WIDTH: usize> {\n     inner: T,\n }"}, {"sha": "acc3b853e5679c577696ffb87ff3578e00791293", "filename": "tests/rustdoc/const-generics/const-generic-defaults.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Fconst-generics%2Fconst-generic-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Fconst-generics%2Fconst-generic-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fconst-generics%2Fconst-generic-defaults.rs?ref=85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "patch": "@@ -1,5 +1,5 @@\n #![crate_name = \"foo\"]\n \n-// @has foo/struct.Foo.html '//pre[@class=\"rust struct\"]' \\\n+// @has foo/struct.Foo.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n //      'pub struct Foo<const M: usize = 10, const N: usize = M, T = i32>(_);'\n pub struct Foo<const M: usize = 10, const N: usize = M, T = i32>(T);"}, {"sha": "543332d2c320b8922d18135ee7e27cfe01d25606", "filename": "tests/rustdoc/const-generics/const-generics-docs.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Fconst-generics%2Fconst-generics-docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Fconst-generics%2Fconst-generics-docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fconst-generics%2Fconst-generics-docs.rs?ref=85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "patch": "@@ -3,21 +3,21 @@\n #![crate_name = \"foo\"]\n \n extern crate extern_crate;\n-// @has foo/fn.extern_fn.html '//pre[@class=\"rust fn\"]' \\\n+// @has foo/fn.extern_fn.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n //      'pub fn extern_fn<const N: usize>() -> impl Iterator<Item = [u8; N]>'\n pub use extern_crate::extern_fn;\n-// @has foo/struct.ExternTy.html '//pre[@class=\"rust struct\"]' \\\n+// @has foo/struct.ExternTy.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n //      'pub struct ExternTy<const N: usize> {'\n pub use extern_crate::ExternTy;\n-// @has foo/type.TyAlias.html '//pre[@class=\"rust typedef\"]' \\\n+// @has foo/type.TyAlias.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n //      'type TyAlias<const N: usize> = ExternTy<N>;'\n pub use extern_crate::TyAlias;\n-// @has foo/trait.WTrait.html '//pre[@class=\"rust trait\"]' \\\n+// @has foo/trait.WTrait.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n //      'pub trait WTrait<const N: usize, const M: usize>'\n-// @has - '//*[@class=\"rust trait\"]' 'fn hey<const P: usize>() -> usize'\n+// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'fn hey<const P: usize>() -> usize'\n pub use extern_crate::WTrait;\n \n-// @has foo/trait.Trait.html '//pre[@class=\"rust trait\"]' \\\n+// @has foo/trait.Trait.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n //      'pub trait Trait<const N: usize>'\n // @has - '//*[@id=\"impl-Trait%3C1%3E-for-u8\"]//h3[@class=\"code-header\"]' 'impl Trait<1> for u8'\n // @has - '//*[@id=\"impl-Trait%3C2%3E-for-u8\"]//h3[@class=\"code-header\"]' 'impl Trait<2> for u8'\n@@ -30,10 +30,10 @@ impl Trait<2> for u8 {}\n impl Trait<{1 + 2}> for u8 {}\n impl<const N: usize> Trait<N> for [u8; N] {}\n \n-// @has foo/struct.Foo.html '//pre[@class=\"rust struct\"]' \\\n+// @has foo/struct.Foo.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n //      'pub struct Foo<const N: usize>where u8: Trait<N>'\n pub struct Foo<const N: usize> where u8: Trait<N>;\n-// @has foo/struct.Bar.html '//pre[@class=\"rust struct\"]' 'pub struct Bar<T, const N: usize>(_)'\n+// @has foo/struct.Bar.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub struct Bar<T, const N: usize>(_)'\n pub struct Bar<T, const N: usize>([T; N]);\n \n // @has foo/struct.Foo.html '//*[@id=\"impl-Foo%3CM%3E\"]/h3[@class=\"code-header\"]' 'impl<const M: usize> Foo<M>where u8: Trait<M>'\n@@ -56,32 +56,32 @@ impl<const M: usize> Bar<u8, M> {\n     }\n }\n \n-// @has foo/fn.test.html '//pre[@class=\"rust fn\"]' \\\n+// @has foo/fn.test.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n //      'pub fn test<const N: usize>() -> impl Trait<N>where u8: Trait<N>'\n pub fn test<const N: usize>() -> impl Trait<N> where u8: Trait<N> {\n     2u8\n }\n \n-// @has foo/fn.a_sink.html '//pre[@class=\"rust fn\"]' \\\n+// @has foo/fn.a_sink.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n //      'pub async fn a_sink<const N: usize>(v: [u8; N]) -> impl Trait<N>'\n pub async fn a_sink<const N: usize>(v: [u8; N]) -> impl Trait<N> {\n     v\n }\n \n-// @has foo/fn.b_sink.html '//pre[@class=\"rust fn\"]' \\\n+// @has foo/fn.b_sink.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n //      'pub async fn b_sink<const N: usize>(_: impl Trait<N>)'\n pub async fn b_sink<const N: usize>(_: impl Trait<N>) {}\n \n-// @has foo/fn.concrete.html '//pre[@class=\"rust fn\"]' \\\n+// @has foo/fn.concrete.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n //      'pub fn concrete() -> [u8; 22]'\n pub fn concrete() -> [u8; 3 + std::mem::size_of::<u64>() << 1] {\n     Default::default()\n }\n \n-// @has foo/type.Faz.html '//pre[@class=\"rust typedef\"]' \\\n+// @has foo/type.Faz.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n //      'type Faz<const N: usize> = [u8; N];'\n pub type Faz<const N: usize> = [u8; N];\n-// @has foo/type.Fiz.html '//pre[@class=\"rust typedef\"]' \\\n+// @has foo/type.Fiz.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n //      'type Fiz<const N: usize> = [[u8; N]; 48];'\n pub type Fiz<const N: usize> = [[u8; N]; 3 << 4];\n \n@@ -91,7 +91,7 @@ macro_rules! define_me {\n     }\n }\n \n-// @has foo/struct.Foz.html '//pre[@class=\"rust struct\"]' \\\n+// @has foo/struct.Foz.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n //      'pub struct Foz<const N: usize>(_);'\n define_me!(Foz<N>);\n \n@@ -103,13 +103,13 @@ impl<const N: usize> Q for [u8; N] {\n     const ASSOC: usize = N;\n }\n \n-// @has foo/fn.q_user.html '//pre[@class=\"rust fn\"]' \\\n+// @has foo/fn.q_user.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n //      'pub fn q_user() -> [u8; 13]'\n pub fn q_user() -> [u8; <[u8; 13] as Q>::ASSOC] {\n     [0; <[u8; 13] as Q>::ASSOC]\n }\n \n-// @has foo/union.Union.html '//pre[@class=\"rust union\"]' \\\n+// @has foo/union.Union.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n //      'pub union Union<const N: usize>'\n pub union Union<const N: usize> {\n     // @has - //pre \"pub arr: [u8; N]\"\n@@ -118,7 +118,7 @@ pub union Union<const N: usize> {\n     pub another_arr: [(); N],\n }\n \n-// @has foo/enum.Enum.html '//pre[@class=\"rust enum\"]' \\\n+// @has foo/enum.Enum.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n //      'pub enum Enum<const N: usize>'\n pub enum Enum<const N: usize> {\n     // @has - //pre \"Variant([u8; N])\""}, {"sha": "726fb8f0c341681af2ca5df0b666ee9dc6643c3e", "filename": "tests/rustdoc/const-generics/const-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Fconst-generics%2Fconst-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Fconst-generics%2Fconst-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fconst-generics%2Fconst-impl.rs?ref=85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "patch": "@@ -8,7 +8,7 @@ pub enum Order {\n     Unsorted,\n }\n \n-// @has foo/struct.VSet.html '//pre[@class=\"rust struct\"]' 'pub struct VSet<T, const ORDER: Order>'\n+// @has foo/struct.VSet.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub struct VSet<T, const ORDER: Order>'\n // @has foo/struct.VSet.html '//*[@id=\"impl-Send-for-VSet%3CT%2C%20ORDER%3E\"]/h3[@class=\"code-header\"]' 'impl<T, const ORDER: Order> Send for VSet<T, ORDER>'\n // @has foo/struct.VSet.html '//*[@id=\"impl-Sync-for-VSet%3CT%2C%20ORDER%3E\"]/h3[@class=\"code-header\"]' 'impl<T, const ORDER: Order> Sync for VSet<T, ORDER>'\n pub struct VSet<T, const ORDER: Order> {"}, {"sha": "c53cf6dcd0570b4f0717ca79062cb2f35333ee74", "filename": "tests/rustdoc/const-generics/generic_const_exprs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Fconst-generics%2Fgeneric_const_exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Fconst-generics%2Fgeneric_const_exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fconst-generics%2Fgeneric_const_exprs.rs?ref=85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "patch": "@@ -2,6 +2,6 @@\n #![feature(generic_const_exprs)]\n #![allow(incomplete_features)]\n // make sure that `ConstEvaluatable` predicates dont cause rustdoc to ICE #77647\n-// @has foo/struct.Ice.html '//pre[@class=\"rust struct\"]' \\\n+// @has foo/struct.Ice.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n //      'pub struct Ice<const N: usize>;'\n pub struct Ice<const N: usize> where [(); N + 1]:;"}, {"sha": "72473a112440ce28414f01b479f18dc3e4a789db", "filename": "tests/rustdoc/const-generics/type-alias.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Fconst-generics%2Ftype-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Fconst-generics%2Ftype-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fconst-generics%2Ftype-alias.rs?ref=85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "patch": "@@ -1,4 +1,4 @@\n #![crate_name = \"foo\"]\n \n-// @has foo/type.CellIndex.html '//pre[@class=\"rust typedef\"]' 'type CellIndex<const D: usize> = [i64; D];'\n+// @has foo/type.CellIndex.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'type CellIndex<const D: usize> = [i64; D];'\n pub type CellIndex<const D: usize> = [i64; D];"}, {"sha": "42f6ac7923bf2e12b6a95944a29a69c824ce881c", "filename": "tests/rustdoc/const-intrinsic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Fconst-intrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Fconst-intrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fconst-intrinsic.rs?ref=85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "patch": "@@ -6,20 +6,20 @@\n \n extern \"rust-intrinsic\" {\n     // @has 'foo/fn.transmute.html'\n-    // @has - '//pre[@class=\"rust fn\"]' 'pub const unsafe extern \"rust-intrinsic\" fn transmute<T, U>(_: T) -> U'\n+    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub const unsafe extern \"rust-intrinsic\" fn transmute<T, U>(_: T) -> U'\n     #[stable(since=\"1.0.0\", feature=\"rust1\")]\n     #[rustc_const_stable(feature = \"const_transmute\", since = \"1.56.0\")]\n     pub fn transmute<T, U>(_: T) -> U;\n \n     // @has 'foo/fn.unreachable.html'\n-    // @has - '//pre[@class=\"rust fn\"]' 'pub unsafe extern \"rust-intrinsic\" fn unreachable() -> !'\n+    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub unsafe extern \"rust-intrinsic\" fn unreachable() -> !'\n     #[stable(since=\"1.0.0\", feature=\"rust1\")]\n     pub fn unreachable() -> !;\n }\n \n extern \"C\" {\n     // @has 'foo/fn.needs_drop.html'\n-    // @has - '//pre[@class=\"rust fn\"]' 'pub unsafe extern \"C\" fn needs_drop() -> !'\n+    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub unsafe extern \"C\" fn needs_drop() -> !'\n     #[stable(since=\"1.0.0\", feature=\"rust1\")]\n     pub fn needs_drop() -> !;\n }"}, {"sha": "96c64ac4e0211b2c09873e337208f6913899e1b9", "filename": "tests/rustdoc/fn-pointer-arg-name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Ffn-pointer-arg-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Ffn-pointer-arg-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Ffn-pointer-arg-name.rs?ref=85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "patch": "@@ -1,5 +1,5 @@\n #![crate_name = \"foo\"]\n \n // @has foo/fn.f.html\n-// @has - '//*[@class=\"rust fn\"]' 'pub fn f(callback: fn(len: usize, foo: u32))'\n+// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub fn f(callback: fn(len: usize, foo: u32))'\n pub fn f(callback: fn(len: usize, foo: u32)) {}"}, {"sha": "406157ce26c8093e4de47be334f9d4bf02a03d05", "filename": "tests/rustdoc/hide-complex-unevaluated-const-arguments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Fhide-complex-unevaluated-const-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Fhide-complex-unevaluated-const-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fhide-complex-unevaluated-const-arguments.rs?ref=85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "patch": "@@ -63,7 +63,7 @@ impl<const S: Struct, St: Stage + ?Sized> Helper<S> for St {\n // this test as long as one can ensure that private fields are not leaked!\n //\n // @has hide_complex_unevaluated_const_arguments/trait.Sub.html \\\n-//      '//*[@class=\"rust trait\"]' \\\n+//      '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n //      'pub trait Sub: Sup<{ _ }, { _ }> { }'\n pub trait Sub: Sup<{ 90 * 20 * 4 }, { Struct { private: () } }> {}\n "}, {"sha": "a4ca928f3331b94068dd7cd89d75dc1f8d8d9cc8", "filename": "tests/rustdoc/inline-default-methods.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Finline-default-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Finline-default-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Finline-default-methods.rs?ref=85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "patch": "@@ -4,6 +4,6 @@\n extern crate inline_default_methods;\n \n // @has inline_default_methods/trait.Foo.html\n-// @has - '//*[@class=\"rust trait\"]' 'fn bar(&self);'\n-// @has - '//*[@class=\"rust trait\"]' 'fn foo(&mut self) { ... }'\n+// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'fn bar(&self);'\n+// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'fn foo(&mut self) { ... }'\n pub use inline_default_methods::Foo;"}, {"sha": "0da8bfc3a9ae368460d0c44fb3307b30c6515170", "filename": "tests/rustdoc/inline_cross/dyn_trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Finline_cross%2Fdyn_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Finline_cross%2Fdyn_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Finline_cross%2Fdyn_trait.rs?ref=85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "patch": "@@ -22,10 +22,10 @@ pub use dyn_trait::Ty2;\n pub use dyn_trait::Ty3;\n \n // @has user/fn.func0.html\n-// @has - '//pre[@class=\"rust fn\"]' \"func0(_: &dyn Fn())\"\n+// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \"func0(_: &dyn Fn())\"\n // FIXME(fmease): Show placeholder-lifetime bound, render \"func0(_: &(dyn Fn() + '_))\"\n pub use dyn_trait::func0;\n \n // @has user/fn.func1.html\n-// @has - '//pre[@class=\"rust fn\"]' \"func1<'func>(_: &(dyn Fn() + 'func))\"\n+// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \"func1<'func>(_: &(dyn Fn() + 'func))\"\n pub use dyn_trait::func1;"}, {"sha": "e8587209b61655ea358c161a77580a1c4a2e9d22", "filename": "tests/rustdoc/inline_cross/impl_trait.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Finline_cross%2Fimpl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Finline_cross%2Fimpl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Finline_cross%2Fimpl_trait.rs?ref=85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "patch": "@@ -4,37 +4,37 @@\n extern crate impl_trait_aux;\n \n // @has impl_trait/fn.func.html\n-// @has - '//pre[@class=\"rust fn\"]' \"pub fn func<'a>(_x: impl Clone + Into<Vec<u8, Global>> + 'a)\"\n-// @!has - '//pre[@class=\"rust fn\"]' 'where'\n+// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \"pub fn func<'a>(_x: impl Clone + Into<Vec<u8, Global>> + 'a)\"\n+// @!has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'where'\n pub use impl_trait_aux::func;\n \n // @has impl_trait/fn.func2.html\n-// @has - '//pre[@class=\"rust fn\"]' \"func2<T>(\"\n-// @has - '//pre[@class=\"rust fn\"]' \"_x: impl Deref<Target = Option<T>> + Iterator<Item = T>,\"\n-// @has - '//pre[@class=\"rust fn\"]' \"_y: impl Iterator<Item = u8>)\"\n-// @!has - '//pre[@class=\"rust fn\"]' 'where'\n+// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \"func2<T>(\"\n+// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \"_x: impl Deref<Target = Option<T>> + Iterator<Item = T>,\"\n+// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \"_y: impl Iterator<Item = u8>)\"\n+// @!has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'where'\n pub use impl_trait_aux::func2;\n \n // @has impl_trait/fn.func3.html\n-// @has - '//pre[@class=\"rust fn\"]' \"func3(\"\n-// @has - '//pre[@class=\"rust fn\"]' \"_x: impl Iterator<Item = impl Iterator<Item = u8>> + Clone)\"\n-// @!has - '//pre[@class=\"rust fn\"]' 'where'\n+// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \"func3(\"\n+// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \"_x: impl Iterator<Item = impl Iterator<Item = u8>> + Clone)\"\n+// @!has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'where'\n pub use impl_trait_aux::func3;\n \n // @has impl_trait/fn.func4.html\n-// @has - '//pre[@class=\"rust fn\"]' \"func4<T>(\"\n-// @has - '//pre[@class=\"rust fn\"]' \"T: Iterator<Item = impl Clone>,\"\n+// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \"func4<T>(\"\n+// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \"T: Iterator<Item = impl Clone>,\"\n pub use impl_trait_aux::func4;\n \n // @has impl_trait/fn.func5.html\n-// @has - '//pre[@class=\"rust fn\"]' \"func5(\"\n-// @has - '//pre[@class=\"rust fn\"]' \"_f: impl for<'any> Fn(&'any str, &'any str) -> bool + for<'r> Other<T<'r> = ()>,\"\n-// @has - '//pre[@class=\"rust fn\"]' \"_a: impl for<'alpha, 'beta> Auxiliary<'alpha, Item<'beta> = fn(_: &'beta ())>\"\n-// @!has - '//pre[@class=\"rust fn\"]' 'where'\n+// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \"func5(\"\n+// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \"_f: impl for<'any> Fn(&'any str, &'any str) -> bool + for<'r> Other<T<'r> = ()>,\"\n+// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \"_a: impl for<'alpha, 'beta> Auxiliary<'alpha, Item<'beta> = fn(_: &'beta ())>\"\n+// @!has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'where'\n pub use impl_trait_aux::func5;\n \n // @has impl_trait/fn.async_fn.html\n-// @has - '//pre[@class=\"rust fn\"]' \"pub async fn async_fn()\"\n+// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \"pub async fn async_fn()\"\n pub use impl_trait_aux::async_fn;\n \n // @has impl_trait/struct.Foo.html"}, {"sha": "a774b0ca7cd7a4ca54324b86e49f17406b641a18", "filename": "tests/rustdoc/issue-20646.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Fissue-20646.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Fissue-20646.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fissue-20646.rs?ref=85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "patch": "@@ -13,14 +13,14 @@ pub trait Trait {\n }\n \n // @has issue_20646/fn.fun.html \\\n-//      '//*[@class=\"rust fn\"]' 'where T: Trait<Output = i32>'\n+//      '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'where T: Trait<Output = i32>'\n pub fn fun<T>(_: T) where T: Trait<Output=i32> {}\n \n pub mod reexport {\n     // @has issue_20646/reexport/trait.Trait.html \\\n     //      '//*[@id=\"associatedtype.Output\"]' \\\n     //      'type Output'\n     // @has issue_20646/reexport/fn.fun.html \\\n-    //      '//*[@class=\"rust fn\"]' 'where T: Trait<Output = i32>'\n+    //      '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'where T: Trait<Output = i32>'\n     pub use issue_20646::{Trait, fun};\n }"}, {"sha": "026b4f5acc912d7b2eb6889e81d2f20341e1814b", "filename": "tests/rustdoc/issue-20727-2.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Fissue-20727-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Fissue-20727-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fissue-20727-2.rs?ref=85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "patch": "@@ -5,18 +5,18 @@ extern crate issue_20727;\n \n // @has issue_20727_2/trait.Add.html\n pub trait Add<RHS = Self> {\n-    // @has - '//*[@class=\"rust trait\"]' 'trait Add<RHS = Self> {'\n-    // @has - '//*[@class=\"rust trait\"]' 'type Output;'\n+    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'trait Add<RHS = Self> {'\n+    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'type Output;'\n     type Output;\n \n-    // @has - '//*[@class=\"rust trait\"]' 'fn add(self, rhs: RHS) -> Self::Output;'\n+    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'fn add(self, rhs: RHS) -> Self::Output;'\n     fn add(self, rhs: RHS) -> Self::Output;\n }\n \n // @has issue_20727_2/reexport/trait.Add.html\n pub mod reexport {\n-    // @has - '//*[@class=\"rust trait\"]' 'trait Add<RHS = Self> {'\n-    // @has - '//*[@class=\"rust trait\"]' 'type Output;'\n-    // @has - '//*[@class=\"rust trait\"]' 'fn add(self, rhs: RHS) -> Self::Output;'\n+    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'trait Add<RHS = Self> {'\n+    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'type Output;'\n+    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'fn add(self, rhs: RHS) -> Self::Output;'\n     pub use issue_20727::Add;\n }"}, {"sha": "741ce8023d7e78bfb58fae0d34cd6e7b27baf512", "filename": "tests/rustdoc/issue-20727-3.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Fissue-20727-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Fissue-20727-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fissue-20727-3.rs?ref=85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "patch": "@@ -7,18 +7,18 @@ pub trait Bar {}\n \n // @has issue_20727_3/trait.Deref2.html\n pub trait Deref2 {\n-    // @has - '//*[@class=\"rust trait\"]' 'trait Deref2 {'\n-    // @has - '//*[@class=\"rust trait\"]' 'type Target: Bar;'\n+    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'trait Deref2 {'\n+    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'type Target: Bar;'\n     type Target: Bar;\n \n-    // @has - '//*[@class=\"rust trait\"]' 'fn deref(&self) -> Self::Target;'\n+    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'fn deref(&self) -> Self::Target;'\n     fn deref(&self) -> Self::Target;\n }\n \n // @has issue_20727_3/reexport/trait.Deref2.html\n pub mod reexport {\n-    // @has - '//*[@class=\"rust trait\"]' 'trait Deref2 {'\n-    // @has - '//*[@class=\"rust trait\"]' 'type Target: Bar;'\n-    // @has - '//*[@class=\"rust trait\"]' 'fn deref(&self) -> Self::Target;'\n+    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'trait Deref2 {'\n+    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'type Target: Bar;'\n+    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'fn deref(&self) -> Self::Target;'\n     pub use issue_20727::Deref2;\n }"}, {"sha": "b8fac4da6eadf8288b91c9370d730291873cbed7", "filename": "tests/rustdoc/issue-20727-4.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Fissue-20727-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Fissue-20727-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fissue-20727-4.rs?ref=85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "patch": "@@ -5,36 +5,36 @@ extern crate issue_20727;\n \n // @has issue_20727_4/trait.Index.html\n pub trait Index<Idx: ?Sized> {\n-    // @has - '//*[@class=\"rust trait\"]' 'trait Index<Idx: ?Sized> {'\n-    // @has - '//*[@class=\"rust trait\"]' 'type Output: ?Sized'\n+    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'trait Index<Idx: ?Sized> {'\n+    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'type Output: ?Sized'\n     type Output: ?Sized;\n \n-    // @has - '//*[@class=\"rust trait\"]' \\\n+    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n     //        'fn index(&self, index: Idx) -> &Self::Output'\n     fn index(&self, index: Idx) -> &Self::Output;\n }\n \n // @has issue_20727_4/trait.IndexMut.html\n pub trait IndexMut<Idx: ?Sized>: Index<Idx> {\n-    // @has - '//*[@class=\"rust trait\"]' \\\n+    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n     //        'trait IndexMut<Idx: ?Sized>: Index<Idx> {'\n-    // @has - '//*[@class=\"rust trait\"]' \\\n+    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n     //        'fn index_mut(&mut self, index: Idx) -> &mut Self::Output;'\n     fn index_mut(&mut self, index: Idx) -> &mut Self::Output;\n }\n \n pub mod reexport {\n     // @has issue_20727_4/reexport/trait.Index.html\n-    // @has - '//*[@class=\"rust trait\"]' 'trait Index<Idx>where Idx: ?Sized,{'\n-    // @has - '//*[@class=\"rust trait\"]' 'type Output: ?Sized'\n-    // @has - '//*[@class=\"rust trait\"]' \\\n+    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'trait Index<Idx>where Idx: ?Sized,{'\n+    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'type Output: ?Sized'\n+    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n     //        'fn index(&self, index: Idx) -> &Self::Output'\n     pub use issue_20727::Index;\n \n     // @has issue_20727_4/reexport/trait.IndexMut.html\n-    // @has - '//*[@class=\"rust trait\"]' \\\n+    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n     //        'trait IndexMut<Idx>: Index<Idx>where Idx: ?Sized,{'\n-    // @has - '//*[@class=\"rust trait\"]' \\\n+    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n     //        'fn index_mut(&mut self, index: Idx) -> &mut Self::Output;'\n     pub use issue_20727::IndexMut;\n }"}, {"sha": "df334821cccc97868e71746592ff6e100c7bb6e6", "filename": "tests/rustdoc/issue-20727.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Fissue-20727.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Fissue-20727.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fissue-20727.rs?ref=85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "patch": "@@ -5,20 +5,20 @@ extern crate issue_20727;\n \n // @has issue_20727/trait.Deref.html\n pub trait Deref {\n-    // @has - '//*[@class=\"rust trait\"]' 'trait Deref {'\n-    // @has - '//*[@class=\"rust trait\"]' 'type Target: ?Sized;'\n+    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'trait Deref {'\n+    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'type Target: ?Sized;'\n     type Target: ?Sized;\n \n-    // @has - '//*[@class=\"rust trait\"]' \\\n+    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n     //        \"fn deref<'a>(&'a self) -> &'a Self::Target;\"\n     fn deref<'a>(&'a self) -> &'a Self::Target;\n }\n \n // @has issue_20727/reexport/trait.Deref.html\n pub mod reexport {\n-    // @has - '//*[@class=\"rust trait\"]' 'trait Deref {'\n-    // @has - '//*[@class=\"rust trait\"]' 'type Target: ?Sized;'\n-    // @has - '//*[@class=\"rust trait\"]' \\\n+    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'trait Deref {'\n+    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'type Target: ?Sized;'\n+    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n     //      \"fn deref<'a>(&'a self) -> &'a Self::Target;\"\n     pub use issue_20727::Deref;\n }"}, {"sha": "19e626ba132356d69889be10f1fe80a42849824e", "filename": "tests/rustdoc/issue-22038.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Fissue-22038.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Fissue-22038.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fissue-22038.rs?ref=85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "patch": "@@ -1,19 +1,19 @@\n extern \"C\" {\n     // @has issue_22038/fn.foo1.html \\\n-    //      '//*[@class=\"rust fn\"]' 'pub unsafe extern \"C\" fn foo1()'\n+    //      '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub unsafe extern \"C\" fn foo1()'\n     pub fn foo1();\n }\n \n extern \"system\" {\n     // @has issue_22038/fn.foo2.html \\\n-    //      '//*[@class=\"rust fn\"]' 'pub unsafe extern \"system\" fn foo2()'\n+    //      '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub unsafe extern \"system\" fn foo2()'\n     pub fn foo2();\n }\n \n // @has issue_22038/fn.bar.html \\\n-//      '//*[@class=\"rust fn\"]' 'pub extern \"C\" fn bar()'\n+//      '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub extern \"C\" fn bar()'\n pub extern \"C\" fn bar() {}\n \n // @has issue_22038/fn.baz.html \\\n-//      '//*[@class=\"rust fn\"]' 'pub extern \"system\" fn baz()'\n+//      '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub extern \"system\" fn baz()'\n pub extern \"system\" fn baz() {}"}, {"sha": "b4c52e2f17a6d93fba6a71fba51fa2795939889f", "filename": "tests/rustdoc/issue-33302.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Fissue-33302.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Fissue-33302.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fissue-33302.rs?ref=85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "patch": "@@ -6,17 +6,17 @@ macro_rules! make {\n         pub struct S;\n \n         // @has issue_33302/constant.CST.html \\\n-        //        '//pre[@class=\"rust const\"]' 'pub const CST: i32'\n+        //        '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub const CST: i32'\n         pub const CST: i32 = ($n * $n);\n         // @has issue_33302/static.ST.html \\\n-        //        '//pre[@class=\"rust static\"]' 'pub static ST: i32'\n+        //        '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub static ST: i32'\n         pub static ST: i32 = ($n * $n);\n \n         pub trait T<X> {\n             fn ignore(_: &X) {}\n             const C: X;\n             // @has issue_33302/trait.T.html \\\n-            //        '//*[@class=\"rust trait\"]' 'const D: i32'\n+            //        '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'const D: i32'\n             // @has - '//*[@id=\"associatedconstant.D\"]' 'const D: i32'\n             const D: i32 = ($n * $n);\n         }"}, {"sha": "74fc22b31dc0c84cd6956e52bb6aff5173bfd85e", "filename": "tests/rustdoc/issue-85454.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Fissue-85454.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Fissue-85454.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fissue-85454.rs?ref=85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "patch": "@@ -5,7 +5,7 @@\n extern crate issue_85454;\n \n // @has foo/trait.FromResidual.html\n-// @has - '//pre[@class=\"rust trait\"]' 'pub trait FromResidual<R = <Self as Try>::Residual> { fn from_residual(residual: R) -> Self; }'\n+// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub trait FromResidual<R = <Self as Try>::Residual> { fn from_residual(residual: R) -> Self; }'\n pub trait FromResidual<R = <Self as Try>::Residual> {\n     fn from_residual(residual: R) -> Self;\n }\n@@ -24,6 +24,6 @@ pub enum ControlFlow<B, C = ()> {\n \n pub mod reexport {\n     // @has foo/reexport/trait.FromResidual.html\n-    // @has - '//pre[@class=\"rust trait\"]' 'pub trait FromResidual<R = <Self as Try>::Residual> { fn from_residual(residual: R) -> Self; }'\n+    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub trait FromResidual<R = <Self as Try>::Residual> { fn from_residual(residual: R) -> Self; }'\n     pub use issue_85454::*;\n }"}, {"sha": "884b63ac97ffceee0fc6f6033ed96b742372fcbf", "filename": "tests/rustdoc/issue-98697.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Fissue-98697.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Fissue-98697.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fissue-98697.rs?ref=85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "patch": "@@ -8,8 +8,8 @@\n \n extern crate issue_98697_reexport_with_anonymous_lifetime;\n \n-// @has issue_98697/fn.repro.html '//pre[@class=\"rust fn\"]/code' 'fn repro<F>()where F: Fn(&str)'\n-// @!has issue_98697/fn.repro.html '//pre[@class=\"rust fn\"]/code' 'for<'\n+// @has issue_98697/fn.repro.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]/code' 'fn repro<F>()where F: Fn(&str)'\n+// @!has issue_98697/fn.repro.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]/code' 'for<'\n pub use issue_98697_reexport_with_anonymous_lifetime::repro;\n \n // @has issue_98697/struct.Extra.html '//div[@id=\"trait-implementations-list\"]//h3[@class=\"code-header\"]' 'impl MyTrait<&Extra> for Extra'"}, {"sha": "14533624e448e6f059699be88c56dd554d7b34fc", "filename": "tests/rustdoc/legacy-const-generic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Flegacy-const-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Flegacy-const-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Flegacy-const-generic.rs?ref=85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "patch": "@@ -2,14 +2,14 @@\n #![feature(rustc_attrs)]\n \n // @has 'foo/fn.foo.html'\n-// @has - '//*[@class=\"rust fn\"]' 'fn foo(x: usize, const Y: usize, z: usize) -> [usize; 3]'\n+// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'fn foo(x: usize, const Y: usize, z: usize) -> [usize; 3]'\n #[rustc_legacy_const_generics(1)]\n pub fn foo<const Y: usize>(x: usize, z: usize) -> [usize; 3] {\n     [x, Y, z]\n }\n \n // @has 'foo/fn.bar.html'\n-// @has - '//*[@class=\"rust fn\"]' 'fn bar(x: usize, const Y: usize, const Z: usize) -> [usize; 3]'\n+// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'fn bar(x: usize, const Y: usize, const Z: usize) -> [usize; 3]'\n #[rustc_legacy_const_generics(1, 2)]\n pub fn bar<const Y: usize, const Z: usize>(x: usize) -> [usize; 3] {\n     [x, Y, z]"}, {"sha": "0fb66059109071885e06a42ac2b60cc12db8f26e", "filename": "tests/rustdoc/lifetime-name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Flifetime-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Flifetime-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Flifetime-name.rs?ref=85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "patch": "@@ -1,5 +1,5 @@\n #![crate_name = \"foo\"]\n \n // @has 'foo/type.Resolutions.html'\n-// @has - '//*[@class=\"rust typedef\"]' \"pub type Resolutions<'tcx> = &'tcx u8;\"\n+// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \"pub type Resolutions<'tcx> = &'tcx u8;\"\n pub type Resolutions<'tcx> = &'tcx u8;"}, {"sha": "3b862e651c9098e5989b7208159c8b0f9889fda3", "filename": "tests/rustdoc/mut-params.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Fmut-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Fmut-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fmut-params.rs?ref=85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "patch": "@@ -13,6 +13,6 @@ impl Foo {\n     pub fn bar(mut bar: ()) {}\n }\n \n-// @count foo/fn.baz.html '//*[@class=\"rust fn\"]' 1\n-// @!has - '//*[@class=\"rust fn\"]' 'mut'\n+// @count foo/fn.baz.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 1\n+// @!has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'mut'\n pub fn baz(mut foo: Foo) {}"}, {"sha": "659480479fd13e9dd747eb52294909696ac08891", "filename": "tests/rustdoc/normalize-assoc-item.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Fnormalize-assoc-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Fnormalize-assoc-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fnormalize-assoc-item.rs?ref=85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "patch": "@@ -19,12 +19,12 @@ impl Trait for isize {\n     type X = <() as Trait>::X;\n }\n \n-// @has 'normalize_assoc_item/fn.f.html' '//pre[@class=\"rust fn\"]' 'pub fn f() -> isize'\n+// @has 'normalize_assoc_item/fn.f.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub fn f() -> isize'\n pub fn f() -> <usize as Trait>::X {\n     0\n }\n \n-// @has 'normalize_assoc_item/fn.f2.html' '//pre[@class=\"rust fn\"]' 'pub fn f2() -> fn() -> i32'\n+// @has 'normalize_assoc_item/fn.f2.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub fn f2() -> fn() -> i32'\n pub fn f2() -> <isize as Trait>::X {\n     todo!()\n }\n@@ -49,10 +49,10 @@ impl<Inner: Trait> Trait for Generic<Inner> {\n // These can't be normalized because they depend on a generic parameter.\n // However the user can choose whether the text should be displayed as `Inner::X` or `<Inner as Trait>::X`.\n \n-// @has 'normalize_assoc_item/struct.Unknown.html' '//pre[@class=\"rust struct\"]' 'pub struct Unknown<Inner: Trait>(pub <Inner as Trait>::X);'\n+// @has 'normalize_assoc_item/struct.Unknown.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub struct Unknown<Inner: Trait>(pub <Inner as Trait>::X);'\n pub struct Unknown<Inner: Trait>(pub <Inner as Trait>::X);\n \n-// @has 'normalize_assoc_item/struct.Unknown2.html' '//pre[@class=\"rust struct\"]' 'pub struct Unknown2<Inner: Trait>(pub Inner::X);'\n+// @has 'normalize_assoc_item/struct.Unknown2.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub struct Unknown2<Inner: Trait>(pub Inner::X);'\n pub struct Unknown2<Inner: Trait>(pub Inner::X);\n \n trait Lifetimes<'a> {\n@@ -63,20 +63,20 @@ impl<'a> Lifetimes<'a> for usize {\n     type Y = &'a isize;\n }\n \n-// @has 'normalize_assoc_item/fn.g.html' '//pre[@class=\"rust fn\"]' \"pub fn g() -> &isize\"\n+// @has 'normalize_assoc_item/fn.g.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \"pub fn g() -> &isize\"\n pub fn g() -> <usize as Lifetimes<'static>>::Y {\n     &0\n }\n \n-// @has 'normalize_assoc_item/constant.A.html' '//pre[@class=\"rust const\"]' \"pub const A: &isize\"\n+// @has 'normalize_assoc_item/constant.A.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \"pub const A: &isize\"\n pub const A: <usize as Lifetimes<'static>>::Y = &0;\n \n // test cross-crate re-exports\n extern crate inner;\n-// @has 'normalize_assoc_item/fn.foo.html' '//pre[@class=\"rust fn\"]' \"pub fn foo() -> i32\"\n+// @has 'normalize_assoc_item/fn.foo.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \"pub fn foo() -> i32\"\n pub use inner::foo;\n \n-// @has 'normalize_assoc_item/fn.h.html' '//pre[@class=\"rust fn\"]' \"pub fn h<T>() -> IntoIter<T, Global>\"\n+// @has 'normalize_assoc_item/fn.h.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \"pub fn h<T>() -> IntoIter<T, Global>\"\n pub fn h<T>() -> <Vec<T> as IntoIterator>::IntoIter {\n     vec![].into_iter()\n }"}, {"sha": "0dca3f672cd3c42ca703a80e9112a2298b82084c", "filename": "tests/rustdoc/pub-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Fpub-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Fpub-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fpub-method.rs?ref=85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "patch": "@@ -3,7 +3,7 @@\n #![crate_name = \"foo\"]\n \n // @has foo/fn.bar.html\n-// @has - '//*[@class=\"rust fn\"]' 'pub fn bar() -> '\n+// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub fn bar() -> '\n /// foo\n pub fn bar() -> usize {\n     2"}, {"sha": "bdbcc47c9f28dd4328e3f28c2c9d006277de5efd", "filename": "tests/rustdoc/range-arg-pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Frange-arg-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Frange-arg-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Frange-arg-pattern.rs?ref=85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "patch": "@@ -1,5 +1,5 @@\n #![crate_name = \"foo\"]\n \n // @has foo/fn.f.html\n-// @has - '//*[@class=\"rust fn\"]' 'pub fn f(_: u8)'\n+// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub fn f(_: u8)'\n pub fn f(0u8..=255: u8) {}"}, {"sha": "35c90ba5d7b894fac9f3e5fa9bb81882031d98d4", "filename": "tests/rustdoc/reexports-priv.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Freexports-priv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Freexports-priv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Freexports-priv.rs?ref=85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "patch": "@@ -32,7 +32,7 @@ pub(self) use reexports::BarSelf;\n // @!has 'foo/enum.BarLocal.html'\n use reexports::BarLocal;\n \n-// @has 'foo/fn.foo.html' '//*[@class=\"rust fn\"]' 'pub fn foo()'\n+// @has 'foo/fn.foo.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub fn foo()'\n pub use reexports::foo;\n // @!has 'foo/fn.foo_crate.html'\n pub(crate) use reexports::foo_crate;\n@@ -41,7 +41,7 @@ pub(self) use reexports::foo_self;\n // @!has 'foo/fn.foo_local.html'\n use reexports::foo_local;\n \n-// @has 'foo/type.Type.html' '//*[@class=\"rust typedef\"]' 'pub type Type ='\n+// @has 'foo/type.Type.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub type Type ='\n pub use reexports::Type;\n // @!has 'foo/type.TypeCrate.html'\n pub(crate) use reexports::TypeCrate;\n@@ -94,22 +94,22 @@ pub mod outer {\n         // @!has 'foo/outer/inner/enum.BarLocal.html'\n         use reexports::BarLocal;\n \n-        // @has 'foo/outer/inner/fn.foo.html' '//*[@class=\"rust fn\"]' 'pub fn foo()'\n+        // @has 'foo/outer/inner/fn.foo.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub fn foo()'\n         pub use reexports::foo;\n-        // @has 'foo/outer/inner/fn.foo_crate.html' '//*[@class=\"rust fn\"]' 'pub(crate) fn foo_crate()'\n+        // @has 'foo/outer/inner/fn.foo_crate.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub(crate) fn foo_crate()'\n         pub(crate) use reexports::foo_crate;\n-        // @has 'foo/outer/inner/fn.foo_super.html' '//*[@class=\"rust fn\"]' 'pub(in outer) fn foo_super()'\n+        // @has 'foo/outer/inner/fn.foo_super.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub(in outer) fn foo_super()'\n         pub(super) use::reexports::foo_super;\n         // @!has 'foo/outer/inner/fn.foo_self.html'\n         pub(self) use reexports::foo_self;\n         // @!has 'foo/outer/inner/fn.foo_local.html'\n         use reexports::foo_local;\n \n-        // @has 'foo/outer/inner/type.Type.html' '//*[@class=\"rust typedef\"]' 'pub type Type ='\n+        // @has 'foo/outer/inner/type.Type.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub type Type ='\n         pub use reexports::Type;\n-        // @has 'foo/outer/inner/type.TypeCrate.html' '//*[@class=\"rust typedef\"]' 'pub(crate) type TypeCrate ='\n+        // @has 'foo/outer/inner/type.TypeCrate.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub(crate) type TypeCrate ='\n         pub(crate) use reexports::TypeCrate;\n-        // @has 'foo/outer/inner/type.TypeSuper.html' '//*[@class=\"rust typedef\"]' 'pub(in outer) type TypeSuper ='\n+        // @has 'foo/outer/inner/type.TypeSuper.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub(in outer) type TypeSuper ='\n         pub(super) use reexports::TypeSuper;\n         // @!has 'foo/outer/inner/type.TypeSelf.html'\n         pub(self) use reexports::TypeSelf;"}, {"sha": "65d305c6d2c4202b7a2b6e6f61e59ed74eb68914", "filename": "tests/rustdoc/reexports.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Freexports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Freexports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Freexports.rs?ref=85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "patch": "@@ -31,7 +31,7 @@ pub(self) use reexports::BarSelf;\n // @!has 'foo/enum.BarLocal.html'\n use reexports::BarLocal;\n \n-// @has 'foo/fn.foo.html' '//*[@class=\"rust fn\"]' 'pub fn foo()'\n+// @has 'foo/fn.foo.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub fn foo()'\n pub use reexports::foo;\n // @!has 'foo/fn.foo_crate.html'\n pub(crate) use reexports::foo_crate;\n@@ -40,7 +40,7 @@ pub(self) use reexports::foo_self;\n // @!has 'foo/fn.foo_local.html'\n use reexports::foo_local;\n \n-// @has 'foo/type.Type.html' '//*[@class=\"rust typedef\"]' 'pub type Type ='\n+// @has 'foo/type.Type.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub type Type ='\n pub use reexports::Type;\n // @!has 'foo/type.TypeCrate.html'\n pub(crate) use reexports::TypeCrate;\n@@ -93,7 +93,7 @@ pub mod outer {\n         // @!has 'foo/outer/inner/enum.BarLocal.html'\n         use reexports::BarLocal;\n \n-        // @has 'foo/outer/inner/fn.foo.html' '//*[@class=\"rust fn\"]' 'pub fn foo()'\n+        // @has 'foo/outer/inner/fn.foo.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub fn foo()'\n         pub use reexports::foo;\n         // @!has 'foo/outer/inner/fn.foo_crate.html'\n         pub(crate) use reexports::foo_crate;\n@@ -104,7 +104,7 @@ pub mod outer {\n         // @!has 'foo/outer/inner/fn.foo_local.html'\n         use reexports::foo_local;\n \n-        // @has 'foo/outer/inner/type.Type.html' '//*[@class=\"rust typedef\"]' 'pub type Type ='\n+        // @has 'foo/outer/inner/type.Type.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub type Type ='\n         pub use reexports::Type;\n         // @!has 'foo/outer/inner/type.TypeCrate.html'\n         pub(crate) use reexports::TypeCrate;"}, {"sha": "a229a4e29fefb43a2ec580474fa492e3444dfe99", "filename": "tests/rustdoc/rfc-2632-const-trait-impl.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Frfc-2632-const-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Frfc-2632-const-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Frfc-2632-const-trait-impl.rs?ref=85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "patch": "@@ -12,10 +12,10 @@ use std::marker::Destruct;\n \n pub struct S<T>(T);\n \n-// @!has foo/trait.Tr.html '//pre[@class=\"rust trait\"]/code/a[@class=\"trait\"]' '~const'\n-// @has - '//pre[@class=\"rust trait\"]/code/a[@class=\"trait\"]' 'Clone'\n-// @!has - '//pre[@class=\"rust trait\"]/code/span[@class=\"where\"]' '~const'\n-// @has - '//pre[@class=\"rust trait\"]/code/span[@class=\"where\"]' ': Clone'\n+// @!has foo/trait.Tr.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]/code/a[@class=\"trait\"]' '~const'\n+// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]/code/a[@class=\"trait\"]' 'Clone'\n+// @!has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]/code/span[@class=\"where\"]' '~const'\n+// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]/code/span[@class=\"where\"]' ': Clone'\n #[const_trait]\n pub trait Tr<T> {\n     // @!has - '//section[@id=\"method.a\"]/h4[@class=\"code-header\"]' '~const'\n@@ -45,10 +45,10 @@ where\n     }\n }\n \n-// @!has foo/fn.foo.html '//pre[@class=\"rust fn\"]/code/a[@class=\"trait\"]' '~const'\n-// @has - '//pre[@class=\"rust fn\"]/code/a[@class=\"trait\"]' 'Clone'\n-// @!has - '//pre[@class=\"rust fn\"]/code/span[@class=\"where fmt-newline\"]' '~const'\n-// @has - '//pre[@class=\"rust fn\"]/code/span[@class=\"where fmt-newline\"]' ': Clone'\n+// @!has foo/fn.foo.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]/code/a[@class=\"trait\"]' '~const'\n+// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]/code/a[@class=\"trait\"]' 'Clone'\n+// @!has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]/code/span[@class=\"where fmt-newline\"]' '~const'\n+// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]/code/span[@class=\"where fmt-newline\"]' ': Clone'\n pub const fn foo<F: ~const Clone + ~const Destruct>()\n where\n     Option<F>: ~const Clone + ~const Destruct,"}, {"sha": "0b65bf1dfed0fa5f2d3b85bd3c7cefdaec169f6e", "filename": "tests/rustdoc/safe-intrinsic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Fsafe-intrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Fsafe-intrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fsafe-intrinsic.rs?ref=85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "patch": "@@ -7,16 +7,16 @@\n \n extern \"rust-intrinsic\" {\n     // @has 'foo/fn.abort.html'\n-    // @has - '//pre[@class=\"rust fn\"]' 'pub extern \"rust-intrinsic\" fn abort() -> !'\n+    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub extern \"rust-intrinsic\" fn abort() -> !'\n     #[rustc_safe_intrinsic]\n     pub fn abort() -> !;\n     // @has 'foo/fn.unreachable.html'\n-    // @has - '//pre[@class=\"rust fn\"]' 'pub unsafe extern \"rust-intrinsic\" fn unreachable() -> !'\n+    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub unsafe extern \"rust-intrinsic\" fn unreachable() -> !'\n     pub fn unreachable() -> !;\n }\n \n extern \"C\" {\n     // @has 'foo/fn.needs_drop.html'\n-    // @has - '//pre[@class=\"rust fn\"]' 'pub unsafe extern \"C\" fn needs_drop() -> !'\n+    // @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub unsafe extern \"C\" fn needs_drop() -> !'\n     pub fn needs_drop() -> !;\n }"}, {"sha": "67137fdcab274a75332d87f977bd365ccaf727c7", "filename": "tests/rustdoc/slice-links.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Fslice-links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Fslice-links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fslice-links.rs?ref=85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "patch": "@@ -4,25 +4,25 @@\n pub struct MyBox<T: ?Sized>(*const T);\n \n // @has 'foo/fn.alpha.html'\n-// @snapshot link_slice_u32 - '//pre[@class=\"rust fn\"]/code'\n+// @snapshot link_slice_u32 - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]/code'\n pub fn alpha() -> &'static [u32] {\n     loop {}\n }\n \n // @has 'foo/fn.beta.html'\n-// @snapshot link_slice_generic - '//pre[@class=\"rust fn\"]/code'\n+// @snapshot link_slice_generic - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]/code'\n pub fn beta<T>() -> &'static [T] {\n     loop {}\n }\n \n // @has 'foo/fn.gamma.html'\n-// @snapshot link_box_u32 - '//pre[@class=\"rust fn\"]/code'\n+// @snapshot link_box_u32 - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]/code'\n pub fn gamma() -> MyBox<[u32]> {\n     loop {}\n }\n \n // @has 'foo/fn.delta.html'\n-// @snapshot link_box_generic - '//pre[@class=\"rust fn\"]/code'\n+// @snapshot link_box_generic - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]/code'\n pub fn delta<T>() -> MyBox<[T]> {\n     loop {}\n }"}, {"sha": "3bfb43a0bef2c7fed5758002ec0bf30484a185ce", "filename": "tests/rustdoc/struct-arg-pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Fstruct-arg-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Fstruct-arg-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fstruct-arg-pattern.rs?ref=85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "patch": "@@ -4,7 +4,7 @@ struct BodyId {\n     hir_id: usize,\n }\n \n-// @has 'foo/fn.body_owner.html' '//*[@class=\"rust fn\"]' 'pub fn body_owner(_: BodyId)'\n+// @has 'foo/fn.body_owner.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub fn body_owner(_: BodyId)'\n pub fn body_owner(BodyId { hir_id }: BodyId) {\n     // ...\n }"}, {"sha": "f5fdb1f52bf8ece496e19348de475cee5d5821a1", "filename": "tests/rustdoc/test-parens.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Ftest-parens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Ftest-parens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Ftest-parens.rs?ref=85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "patch": "@@ -1,5 +1,5 @@\n #![crate_name = \"foo\"]\n \n // @has foo/fn.foo.html\n-// @has - '//*[@class=\"rust fn\"]' \"_: &(dyn ToString + 'static)\"\n+// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \"_: &(dyn ToString + 'static)\"\n pub fn foo(_: &(ToString + 'static)) {}"}, {"sha": "5d34ec09b66dc621a2d1bd3b0ddac44acac71f2d", "filename": "tests/rustdoc/toggle-item-contents.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Ftoggle-item-contents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Ftoggle-item-contents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Ftoggle-item-contents.rs?ref=85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "patch": "@@ -81,8 +81,8 @@ pub enum EnumStructVariant {\n }\n \n // @has 'toggle_item_contents/enum.LargeEnum.html'\n-// @count - '//*[@class=\"rust enum\"]//details[@class=\"toggle type-contents-toggle\"]' 1\n-// @has - '//*[@class=\"rust enum\"]//details[@class=\"toggle type-contents-toggle\"]' 'Show 13 variants'\n+// @count - '//div[@class=\"item-decl\"]/pre//details[@class=\"toggle type-contents-toggle\"]' 1\n+// @has - '//div[@class=\"item-decl\"]/pre//details[@class=\"toggle type-contents-toggle\"]' 'Show 13 variants'\n pub enum LargeEnum {\n     A, B, C, D, E, F(u8), G, H, I, J, K, L, M\n }"}, {"sha": "d72c10f2b2542e9a04df62cb6ddd72da877ea208", "filename": "tests/rustdoc/tuple-struct-fields-doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Ftuple-struct-fields-doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Ftuple-struct-fields-doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Ftuple-struct-fields-doc.rs?ref=85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "patch": "@@ -19,7 +19,7 @@ pub struct Foo(\n );\n \n // @has foo/enum.Bar.html\n-// @has - '//pre[@class=\"rust enum\"]' 'BarVariant(String),'\n+// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'BarVariant(String),'\n // @matches - '//*[@id=\"variant.BarVariant.fields\"]/h4' '^Tuple Fields$'\n // @has - '//*[@id=\"variant.BarVariant.field.0\"]' '0: String'\n // @has - '//*[@id=\"variant.BarVariant.fields\"]//*[@class=\"docblock\"]' 'Hello docs'"}, {"sha": "e716de8b55c8fdfe3a037eedee8c4d237c9919fb", "filename": "tests/rustdoc/tuples.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Ftuples.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Ftuples.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Ftuples.rs?ref=85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "patch": "@@ -1,20 +1,20 @@\n #![crate_name = \"foo\"]\n \n // @has foo/fn.tuple0.html //pre 'pub fn tuple0(x: ())'\n-// @snapshot link_unit - '//pre[@class=\"rust fn\"]/code'\n+// @snapshot link_unit - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]/code'\n pub fn tuple0(x: ()) -> () { x }\n // @has foo/fn.tuple1.html //pre 'pub fn tuple1(x: (i32,)) -> (i32,)'\n-// @snapshot link1_i32 - '//pre[@class=\"rust fn\"]/code'\n+// @snapshot link1_i32 - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]/code'\n pub fn tuple1(x: (i32,)) -> (i32,) { x }\n // @has foo/fn.tuple2.html //pre 'pub fn tuple2(x: (i32, i32)) -> (i32, i32)'\n-// @snapshot link2_i32 - '//pre[@class=\"rust fn\"]/code'\n+// @snapshot link2_i32 - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]/code'\n pub fn tuple2(x: (i32, i32)) -> (i32, i32) { x }\n // @has foo/fn.tuple1_t.html //pre 'pub fn tuple1_t<T>(x: (T,)) -> (T,)'\n-// @snapshot link1_t - '//pre[@class=\"rust fn\"]/code'\n+// @snapshot link1_t - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]/code'\n pub fn tuple1_t<T>(x: (T,)) -> (T,) { x }\n // @has foo/fn.tuple2_t.html //pre 'pub fn tuple2_t<T>(x: (T, T)) -> (T, T)'\n-// @snapshot link2_t - '//pre[@class=\"rust fn\"]/code'\n+// @snapshot link2_t - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]/code'\n pub fn tuple2_t<T>(x: (T, T)) -> (T, T) { x }\n // @has foo/fn.tuple2_tu.html //pre 'pub fn tuple2_tu<T, U>(x: (T, U)) -> (T, U)'\n-// @snapshot link2_tu - '//pre[@class=\"rust fn\"]/code'\n+// @snapshot link2_tu - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]/code'\n pub fn tuple2_tu<T, U>(x: (T, U)) -> (T, U) { x }"}, {"sha": "353cd1c477249dae11398e389762048d56f53b9a", "filename": "tests/rustdoc/unit-return.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Funit-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Funit-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Funit-return.rs?ref=85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "patch": "@@ -4,14 +4,14 @@\n \n extern crate unit_return;\n \n-// @has 'foo/fn.f0.html' '//*[@class=\"rust fn\"]' 'F: FnMut(u8) + Clone'\n+// @has 'foo/fn.f0.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'F: FnMut(u8) + Clone'\n pub fn f0<F: FnMut(u8) + Clone>(f: F) {}\n \n-// @has 'foo/fn.f1.html' '//*[@class=\"rust fn\"]' 'F: FnMut(u16) + Clone'\n+// @has 'foo/fn.f1.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'F: FnMut(u16) + Clone'\n pub fn f1<F: FnMut(u16) -> () + Clone>(f: F) {}\n \n-// @has 'foo/fn.f2.html' '//*[@class=\"rust fn\"]' 'F: FnMut(u32) + Clone'\n+// @has 'foo/fn.f2.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'F: FnMut(u32) + Clone'\n pub use unit_return::f2;\n \n-// @has 'foo/fn.f3.html' '//*[@class=\"rust fn\"]' 'F: FnMut(u64) + Clone'\n+// @has 'foo/fn.f3.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'F: FnMut(u64) + Clone'\n pub use unit_return::f3;"}, {"sha": "c0c085e6ac72500d63deb2848063d4f54654b136", "filename": "tests/rustdoc/where-sized.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Fwhere-sized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Fwhere-sized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fwhere-sized.rs?ref=85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "patch": "@@ -1,6 +1,6 @@\n #![crate_name = \"foo\"]\n \n // @has foo/fn.foo.html\n-// @has - '//*[@class=\"rust fn\"]' 'pub fn foo<X, Y: ?Sized>(_: &X)'\n-// @has - '//*[@class=\"rust fn\"]' 'where X: ?Sized,'\n+// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub fn foo<X, Y: ?Sized>(_: &X)'\n+// @has - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'where X: ?Sized,'\n pub fn foo<X, Y: ?Sized>(_: &X) where X: ?Sized {}"}, {"sha": "f84cb3753cb93a119ab72b7fc3a91eb5c76c0c99", "filename": "tests/rustdoc/where.SWhere_Simd_item-decl.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Fwhere.SWhere_Simd_item-decl.html", "raw_url": "https://github.com/rust-lang/rust/raw/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Fwhere.SWhere_Simd_item-decl.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fwhere.SWhere_Simd_item-decl.html?ref=85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "patch": "@@ -1 +1 @@\n-<div class=\"item-decl\"><pre class=\"rust struct\"><code>pub struct Simd&lt;T&gt;(_)<br /><span class=\"where\">where<br />&#160;&#160;&#160;&#160;T: <a class=\"trait\" href=\"trait.MyTrait.html\" title=\"trait foo::MyTrait\">MyTrait</a></span>;</code></pre></div>\n\\ No newline at end of file\n+<div class=\"item-decl\"><pre class=\"rust\"><code>pub struct Simd&lt;T&gt;(_)<br /><span class=\"where\">where<br />&#160;&#160;&#160;&#160;T: <a class=\"trait\" href=\"trait.MyTrait.html\" title=\"trait foo::MyTrait\">MyTrait</a></span>;</code></pre></div>\n\\ No newline at end of file"}, {"sha": "85b626674274cff6f4f4fd53b3c2e7bdcc9f1251", "filename": "tests/rustdoc/where.SWhere_TraitWhere_item-decl.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Fwhere.SWhere_TraitWhere_item-decl.html", "raw_url": "https://github.com/rust-lang/rust/raw/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Fwhere.SWhere_TraitWhere_item-decl.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fwhere.SWhere_TraitWhere_item-decl.html?ref=85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "patch": "@@ -1,4 +1,4 @@\n-<div class=\"item-decl\"><pre class=\"rust trait\"><code>pub trait TraitWhere {\n+<div class=\"item-decl\"><pre class=\"rust\"><code>pub trait TraitWhere {\n     type <a href=\"#associatedtype.Item\" class=\"associatedtype\">Item</a>&lt;'a&gt;<br />&#160;&#160;&#160;&#160;<span class=\"where\">where<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self: 'a</span>;\n \n     fn <a href=\"#method.func\" class=\"fn\">func</a>(self)<br />&#160;&#160;&#160;&#160;<span class=\"where\">where<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self: <a class=\"trait\" href=\"{{channel}}/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a></span>,"}, {"sha": "3ac0c6872a82150c4a621c8919f96a81a7e431ff", "filename": "tests/rustdoc/where.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Fwhere.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Fwhere.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fwhere.rs?ref=85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "patch": "@@ -57,6 +57,6 @@ pub enum Foxtrot<F> { Foxtrot1(F) }\n //          \"impl<F> MyTrait for Foxtrot<F>where F: MyTrait\"\n impl<F> MyTrait for Foxtrot<F>where F: MyTrait {}\n \n-// @has foo/type.Golf.html '//pre[@class=\"rust typedef\"]' \\\n+// @has foo/type.Golf.html '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' \\\n //          \"type Golf<T>where T: Clone, = (T, T)\"\n pub type Golf<T> where T: Clone = (T, T);"}, {"sha": "20bde549a037807f3f0351828177b1e6006899d4", "filename": "tests/rustdoc/whitespace-after-where-clause.enum.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Fwhitespace-after-where-clause.enum.html", "raw_url": "https://github.com/rust-lang/rust/raw/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Fwhitespace-after-where-clause.enum.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fwhitespace-after-where-clause.enum.html?ref=85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "patch": "@@ -1,4 +1,4 @@\n-<div class=\"item-decl\"><pre class=\"rust enum\"><code>pub enum Cow&lt;'a, B&gt;<span class=\"where fmt-newline\">where<br />&#160;&#160;&#160;&#160;B: <a class=\"trait\" href=\"trait.ToOwned.html\" title=\"trait foo::ToOwned\">ToOwned</a>&lt;dyn <a class=\"trait\" href=\"{{channel}}/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; + ?<a class=\"trait\" href=\"{{channel}}/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + 'a,</span>{\n+<div class=\"item-decl\"><pre class=\"rust\"><code>pub enum Cow&lt;'a, B&gt;<span class=\"where fmt-newline\">where<br />&#160;&#160;&#160;&#160;B: <a class=\"trait\" href=\"trait.ToOwned.html\" title=\"trait foo::ToOwned\">ToOwned</a>&lt;dyn <a class=\"trait\" href=\"{{channel}}/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; + ?<a class=\"trait\" href=\"{{channel}}/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + 'a,</span>{\n     Borrowed(<a class=\"primitive\" href=\"{{channel}}/std/primitive.reference.html\">&amp;'a </a>B),\n     Whatever(<a class=\"primitive\" href=\"{{channel}}/std/primitive.u32.html\">u32</a>),\n }</code></pre></div>\n\\ No newline at end of file"}, {"sha": "d9fc0c22309dbc97f4f8c3fdd469bf676063e65f", "filename": "tests/rustdoc/whitespace-after-where-clause.enum2.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Fwhitespace-after-where-clause.enum2.html", "raw_url": "https://github.com/rust-lang/rust/raw/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Fwhitespace-after-where-clause.enum2.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fwhitespace-after-where-clause.enum2.html?ref=85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "patch": "@@ -1,4 +1,4 @@\n-<div class=\"item-decl\"><pre class=\"rust enum\"><code>pub enum Cow2&lt;'a, B:&#160;?<a class=\"trait\" href=\"{{channel}}/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"trait.ToOwned.html\" title=\"trait foo::ToOwned\">ToOwned</a>&lt;dyn <a class=\"trait\" href=\"{{channel}}/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; + 'a&gt; {\n+<div class=\"item-decl\"><pre class=\"rust\"><code>pub enum Cow2&lt;'a, B:&#160;?<a class=\"trait\" href=\"{{channel}}/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"trait.ToOwned.html\" title=\"trait foo::ToOwned\">ToOwned</a>&lt;dyn <a class=\"trait\" href=\"{{channel}}/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; + 'a&gt; {\n     Borrowed(<a class=\"primitive\" href=\"{{channel}}/std/primitive.reference.html\">&amp;'a </a>B),\n     Whatever(<a class=\"primitive\" href=\"{{channel}}/std/primitive.u32.html\">u32</a>),\n }</code></pre></div>\n\\ No newline at end of file"}, {"sha": "f375265d7c183ff57963f75bee1a1f136f2bf82e", "filename": "tests/rustdoc/whitespace-after-where-clause.struct.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Fwhitespace-after-where-clause.struct.html", "raw_url": "https://github.com/rust-lang/rust/raw/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Fwhitespace-after-where-clause.struct.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fwhitespace-after-where-clause.struct.html?ref=85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "patch": "@@ -1,4 +1,4 @@\n-<div class=\"item-decl\"><pre class=\"rust struct\"><code>pub struct Struct&lt;'a, B&gt;<span class=\"where fmt-newline\">where<br />&#160;&#160;&#160;&#160;B: <a class=\"trait\" href=\"trait.ToOwned.html\" title=\"trait foo::ToOwned\">ToOwned</a>&lt;dyn <a class=\"trait\" href=\"{{channel}}/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; + ?<a class=\"trait\" href=\"{{channel}}/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + 'a,</span>{\n+<div class=\"item-decl\"><pre class=\"rust\"><code>pub struct Struct&lt;'a, B&gt;<span class=\"where fmt-newline\">where<br />&#160;&#160;&#160;&#160;B: <a class=\"trait\" href=\"trait.ToOwned.html\" title=\"trait foo::ToOwned\">ToOwned</a>&lt;dyn <a class=\"trait\" href=\"{{channel}}/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; + ?<a class=\"trait\" href=\"{{channel}}/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + 'a,</span>{\n     pub a: <a class=\"primitive\" href=\"{{channel}}/std/primitive.reference.html\">&amp;'a </a>B,\n     pub b: <a class=\"primitive\" href=\"{{channel}}/std/primitive.u32.html\">u32</a>,\n }</code></pre></div>\n\\ No newline at end of file"}, {"sha": "1c59962eb1c58e1b75c0082fb48ec72b065422e6", "filename": "tests/rustdoc/whitespace-after-where-clause.struct2.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Fwhitespace-after-where-clause.struct2.html", "raw_url": "https://github.com/rust-lang/rust/raw/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Fwhitespace-after-where-clause.struct2.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fwhitespace-after-where-clause.struct2.html?ref=85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "patch": "@@ -1,4 +1,4 @@\n-<div class=\"item-decl\"><pre class=\"rust struct\"><code>pub struct Struct2&lt;'a, B:&#160;?<a class=\"trait\" href=\"{{channel}}/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"trait.ToOwned.html\" title=\"trait foo::ToOwned\">ToOwned</a>&lt;dyn <a class=\"trait\" href=\"{{channel}}/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; + 'a&gt; {\n+<div class=\"item-decl\"><pre class=\"rust\"><code>pub struct Struct2&lt;'a, B:&#160;?<a class=\"trait\" href=\"{{channel}}/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"trait.ToOwned.html\" title=\"trait foo::ToOwned\">ToOwned</a>&lt;dyn <a class=\"trait\" href=\"{{channel}}/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; + 'a&gt; {\n     pub a: <a class=\"primitive\" href=\"{{channel}}/std/primitive.reference.html\">&amp;'a </a>B,\n     pub b: <a class=\"primitive\" href=\"{{channel}}/std/primitive.u32.html\">u32</a>,\n }</code></pre></div>\n\\ No newline at end of file"}, {"sha": "a2df06e7736af684b7ed8e12eedded83148491b0", "filename": "tests/rustdoc/whitespace-after-where-clause.trait.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Fwhitespace-after-where-clause.trait.html", "raw_url": "https://github.com/rust-lang/rust/raw/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Fwhitespace-after-where-clause.trait.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fwhitespace-after-where-clause.trait.html?ref=85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "patch": "@@ -1,4 +1,4 @@\n-<div class=\"item-decl\"><pre class=\"rust trait\"><code>pub trait ToOwned&lt;T&gt;<span class=\"where fmt-newline\">where<br />&#160;&#160;&#160;&#160;T: <a class=\"trait\" href=\"{{channel}}/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</span>{\n+<div class=\"item-decl\"><pre class=\"rust\"><code>pub trait ToOwned&lt;T&gt;<span class=\"where fmt-newline\">where<br />&#160;&#160;&#160;&#160;T: <a class=\"trait\" href=\"{{channel}}/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</span>{\n     type <a href=\"#associatedtype.Owned\" class=\"associatedtype\">Owned</a>;\n \n     fn <a href=\"#tymethod.to_owned\" class=\"fn\">to_owned</a>(&amp;self) -&gt; Self::<a class=\"associatedtype\" href=\"trait.ToOwned.html#associatedtype.Owned\" title=\"type foo::ToOwned::Owned\">Owned</a>;"}, {"sha": "2bfd6f7685a6729dc8e1b2ffbe679978f04eaf58", "filename": "tests/rustdoc/whitespace-after-where-clause.trait2.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Fwhitespace-after-where-clause.trait2.html", "raw_url": "https://github.com/rust-lang/rust/raw/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Fwhitespace-after-where-clause.trait2.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fwhitespace-after-where-clause.trait2.html?ref=85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "patch": "@@ -1,4 +1,4 @@\n-<div class=\"item-decl\"><pre class=\"rust trait\"><code>pub trait ToOwned2&lt;T:&#160;<a class=\"trait\" href=\"{{channel}}/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; {\n+<div class=\"item-decl\"><pre class=\"rust\"><code>pub trait ToOwned2&lt;T:&#160;<a class=\"trait\" href=\"{{channel}}/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; {\n     type <a href=\"#associatedtype.Owned\" class=\"associatedtype\">Owned</a>;\n \n     fn <a href=\"#tymethod.to_owned\" class=\"fn\">to_owned</a>(&amp;self) -&gt; Self::<a class=\"associatedtype\" href=\"trait.ToOwned2.html#associatedtype.Owned\" title=\"type foo::ToOwned2::Owned\">Owned</a>;"}, {"sha": "066f8f87b160b6af62cfce0a1955940fd26c7304", "filename": "tests/rustdoc/whitespace-after-where-clause.union.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Fwhitespace-after-where-clause.union.html", "raw_url": "https://github.com/rust-lang/rust/raw/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Fwhitespace-after-where-clause.union.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fwhitespace-after-where-clause.union.html?ref=85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "patch": "@@ -1,3 +1,3 @@\n-<div class=\"item-decl\"><pre class=\"rust union\"><code>pub union Union&lt;'a, B&gt;<span class=\"where fmt-newline\">where<br />&#160;&#160;&#160;&#160;B: <a class=\"trait\" href=\"trait.ToOwned.html\" title=\"trait foo::ToOwned\">ToOwned</a>&lt;dyn <a class=\"trait\" href=\"{{channel}}/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; + ?<a class=\"trait\" href=\"{{channel}}/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + 'a,</span>{\n+<div class=\"item-decl\"><pre class=\"rust\"><code>pub union Union&lt;'a, B&gt;<span class=\"where fmt-newline\">where<br />&#160;&#160;&#160;&#160;B: <a class=\"trait\" href=\"trait.ToOwned.html\" title=\"trait foo::ToOwned\">ToOwned</a>&lt;dyn <a class=\"trait\" href=\"{{channel}}/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; + ?<a class=\"trait\" href=\"{{channel}}/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + 'a,</span>{\n     /* private fields */\n }</code></pre></div>\n\\ No newline at end of file"}, {"sha": "6b48c5dbd3e2803a1027e8eeec408fd1c9f8472f", "filename": "tests/rustdoc/whitespace-after-where-clause.union2.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Fwhitespace-after-where-clause.union2.html", "raw_url": "https://github.com/rust-lang/rust/raw/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Fwhitespace-after-where-clause.union2.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fwhitespace-after-where-clause.union2.html?ref=85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "patch": "@@ -1,3 +1,3 @@\n-<div class=\"item-decl\"><pre class=\"rust union\"><code>pub union Union2&lt;'a, B:&#160;?<a class=\"trait\" href=\"{{channel}}/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"trait.ToOwned.html\" title=\"trait foo::ToOwned\">ToOwned</a>&lt;dyn <a class=\"trait\" href=\"{{channel}}/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; + 'a&gt; {\n+<div class=\"item-decl\"><pre class=\"rust\"><code>pub union Union2&lt;'a, B:&#160;?<a class=\"trait\" href=\"{{channel}}/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"trait.ToOwned.html\" title=\"trait foo::ToOwned\">ToOwned</a>&lt;dyn <a class=\"trait\" href=\"{{channel}}/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; + 'a&gt; {\n     /* private fields */\n }</code></pre></div>\n\\ No newline at end of file"}, {"sha": "178b8adc3f04af8f6de30df590a7de6e7499430e", "filename": "tests/rustdoc/wrapping.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Fwrapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Frustdoc%2Fwrapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fwrapping.rs?ref=85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "patch": "@@ -1,5 +1,5 @@\n use std::fmt::Debug;\n \n-// @has 'wrapping/fn.foo.html' '//pre[@class=\"rust fn\"]' 'pub fn foo() -> impl Debug'\n-// @count - '//pre[@class=\"rust fn\"]/br' 0\n+// @has 'wrapping/fn.foo.html' '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]' 'pub fn foo() -> impl Debug'\n+// @count - '//div[@class=\"item-decl\"]/pre[@class=\"rust\"]/br' 0\n pub fn foo() -> impl Debug {}"}, {"sha": "1d10dfdf10c6ee1575d212655a3709dc0844a149", "filename": "tests/ui/const-generics/generic_const_exprs/array-size-in-generic-struct-param.full.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Farray-size-in-generic-struct-param.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Farray-size-in-generic-struct-param.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Farray-size-in-generic-struct-param.full.stderr?ref=85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "patch": "@@ -10,7 +10,7 @@ error: overly complex generic constant\n   --> $DIR/array-size-in-generic-struct-param.rs:19:15\n    |\n LL |     arr: [u8; CFG.arr_size],\n-   |               ^^^^^^^^^^^^ field access is not supported in generic constant\n+   |               ^^^^^^^^^^^^ field access is not supported in generic constants\n    |\n    = help: consider moving this anonymous constant into a `const` function\n    = note: this operation may be supported in the future"}, {"sha": "7332a8f03c05ff31670e21e8eaf6a7f409884d2c", "filename": "tests/ui/const-generics/generic_const_exprs/const-block-is-poly.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fconst-block-is-poly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fconst-block-is-poly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fconst-block-is-poly.rs?ref=85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "patch": "@@ -0,0 +1,11 @@\n+#![feature(inline_const, generic_const_exprs)]\n+//~^ WARN the feature `generic_const_exprs` is incomplete\n+\n+fn foo<T>() {\n+    let _ = [0u8; const { std::mem::size_of::<T>() }];\n+    //~^ ERROR: overly complex generic constant\n+}\n+\n+fn main() {\n+    foo::<i32>();\n+}"}, {"sha": "f2625990840152b4ee5e2d394ac32b60e9fb6a1c", "filename": "tests/ui/const-generics/generic_const_exprs/const-block-is-poly.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fconst-block-is-poly.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fconst-block-is-poly.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fconst-block-is-poly.stderr?ref=85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "patch": "@@ -0,0 +1,20 @@\n+warning: the feature `generic_const_exprs` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/const-block-is-poly.rs:1:26\n+   |\n+LL | #![feature(inline_const, generic_const_exprs)]\n+   |                          ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #76560 <https://github.com/rust-lang/rust/issues/76560> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error: overly complex generic constant\n+  --> $DIR/const-block-is-poly.rs:5:19\n+   |\n+LL |     let _ = [0u8; const { std::mem::size_of::<T>() }];\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ const blocks are not supported in generic constants\n+   |\n+   = help: consider moving this anonymous constant into a `const` function\n+   = note: this operation may be supported in the future\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "823a4f8a185bb8cc7020063d2568921bbdb4dd17", "filename": "tests/ui/const-generics/generic_const_exprs/let-bindings.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Flet-bindings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Flet-bindings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Flet-bindings.stderr?ref=85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "patch": "@@ -2,7 +2,7 @@ error: overly complex generic constant\n   --> $DIR/let-bindings.rs:6:68\n    |\n LL | fn test<const N: usize>() -> [u8; { let x = N; N + 1 }] where [u8; { let x = N; N + 1 }]: Default {\n-   |                                                                    ^^^^^^^^^^^^^^^^^^^^ blocks are not supported in generic constant\n+   |                                                                    ^^^^^^^^^^^^^^^^^^^^ blocks are not supported in generic constants\n    |\n    = help: consider moving this anonymous constant into a `const` function\n    = note: this operation may be supported in the future\n@@ -11,7 +11,7 @@ error: overly complex generic constant\n   --> $DIR/let-bindings.rs:6:35\n    |\n LL | fn test<const N: usize>() -> [u8; { let x = N; N + 1 }] where [u8; { let x = N; N + 1 }]: Default {\n-   |                                   ^^^^^^^^^^^^^^^^^^^^ blocks are not supported in generic constant\n+   |                                   ^^^^^^^^^^^^^^^^^^^^ blocks are not supported in generic constants\n    |\n    = help: consider moving this anonymous constant into a `const` function\n    = note: this operation may be supported in the future"}, {"sha": "265a3b9d233414912aabdca5085cd03487b76f78", "filename": "tests/ui/const-generics/generic_const_exprs/unused_expr.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Funused_expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Funused_expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Funused_expr.stderr?ref=85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "patch": "@@ -2,7 +2,7 @@ error: overly complex generic constant\n   --> $DIR/unused_expr.rs:4:34\n    |\n LL | fn add<const N: usize>() -> [u8; { N + 1; 5 }] {\n-   |                                  ^^^^^^^^^^^^ blocks are not supported in generic constant\n+   |                                  ^^^^^^^^^^^^ blocks are not supported in generic constants\n    |\n    = help: consider moving this anonymous constant into a `const` function\n    = note: this operation may be supported in the future\n@@ -11,7 +11,7 @@ error: overly complex generic constant\n   --> $DIR/unused_expr.rs:9:34\n    |\n LL | fn div<const N: usize>() -> [u8; { N / 1; 5 }] {\n-   |                                  ^^^^^^^^^^^^ blocks are not supported in generic constant\n+   |                                  ^^^^^^^^^^^^ blocks are not supported in generic constants\n    |\n    = help: consider moving this anonymous constant into a `const` function\n    = note: this operation may be supported in the future\n@@ -20,7 +20,7 @@ error: overly complex generic constant\n   --> $DIR/unused_expr.rs:16:38\n    |\n LL | fn fn_call<const N: usize>() -> [u8; { foo(N); 5 }] {\n-   |                                      ^^^^^^^^^^^^^ blocks are not supported in generic constant\n+   |                                      ^^^^^^^^^^^^^ blocks are not supported in generic constants\n    |\n    = help: consider moving this anonymous constant into a `const` function\n    = note: this operation may be supported in the future"}, {"sha": "47429b7612f94095ec5ab8726964b3a76d34c6de", "filename": "tests/ui/const-generics/issues/issue-67945-2.full.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-67945-2.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-67945-2.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-67945-2.full.stderr?ref=85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "patch": "@@ -8,7 +8,7 @@ LL | |         let x: Option<Box<Self>> = None;\n LL | |\n LL | |         0\n LL | |     }],\n-   | |_____^ blocks are not supported in generic constant\n+   | |_____^ blocks are not supported in generic constants\n    |\n    = help: consider moving this anonymous constant into a `const` function\n    = note: this operation may be supported in the future"}, {"sha": "98f9f83976aa79b63f76e9f798ea2cec18bfaeba", "filename": "tests/ui/const-generics/issues/issue-67945-3.full.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-67945-3.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-67945-3.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-67945-3.full.stderr?ref=85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "patch": "@@ -7,7 +7,7 @@ LL | |         let x: Option<S> = None;\n LL | |\n LL | |         0\n LL | |     }],\n-   | |_____^ blocks are not supported in generic constant\n+   | |_____^ blocks are not supported in generic constants\n    |\n    = help: consider moving this anonymous constant into a `const` function\n    = note: this operation may be supported in the future"}, {"sha": "c03d40a7bb832d80ee7bb2dbdaeeb2745f41150d", "filename": "tests/ui/const-generics/issues/issue-67945-4.full.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-67945-4.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-67945-4.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-67945-4.full.stderr?ref=85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "patch": "@@ -7,7 +7,7 @@ LL | |         let x: Option<Box<S>> = None;\n LL | |\n LL | |         0\n LL | |     }],\n-   | |_____^ blocks are not supported in generic constant\n+   | |_____^ blocks are not supported in generic constants\n    |\n    = help: consider moving this anonymous constant into a `const` function\n    = note: this operation may be supported in the future"}, {"sha": "68b35a38b0f8ada52a5a18342d537854369fe012", "filename": "tests/ui/const-generics/issues/issue-77357.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-77357.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-77357.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-77357.stderr?ref=85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "patch": "@@ -2,7 +2,7 @@ error: overly complex generic constant\n   --> $DIR/issue-77357.rs:6:46\n    |\n LL | fn bug<'a, T>() -> &'static dyn MyTrait<[(); { |x: &'a u32| { x }; 4 }]> {\n-   |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^ blocks are not supported in generic constant\n+   |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^ blocks are not supported in generic constants\n    |\n    = help: consider moving this anonymous constant into a `const` function\n    = note: this operation may be supported in the future"}, {"sha": "08fcd1deab1d337549d3acac3b9050f95792a193", "filename": "tests/ui/consts/const-match-check.eval1.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Fui%2Fconsts%2Fconst-match-check.eval1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Fui%2Fconsts%2Fconst-match-check.eval1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-match-check.eval1.stderr?ref=85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "patch": "@@ -11,6 +11,10 @@ help: you might want to use `if let` to ignore the variants that aren't matched\n    |\n LL |     A = { if let 0 = 0 { todo!() } 0 },\n    |           ++           ~~~~~~~~~~~\n+help: alternatively, you could prepend the pattern with an underscore to define a new named variable; identifiers cannot begin with digits\n+   |\n+LL |     A = { let _0 = 0; 0 },\n+   |               +\n \n error: aborting due to previous error\n "}, {"sha": "5d86ca4bfd17b632efd346068e0603a8afe5ae73", "filename": "tests/ui/consts/const-match-check.eval2.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Fui%2Fconsts%2Fconst-match-check.eval2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Fui%2Fconsts%2Fconst-match-check.eval2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-match-check.eval2.stderr?ref=85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "patch": "@@ -11,6 +11,10 @@ help: you might want to use `if let` to ignore the variants that aren't matched\n    |\n LL |     let x: [i32; { if let 0 = 0 { todo!() } 0 }] = [];\n    |                    ++           ~~~~~~~~~~~\n+help: alternatively, you could prepend the pattern with an underscore to define a new named variable; identifiers cannot begin with digits\n+   |\n+LL |     let x: [i32; { let _0 = 0; 0 }] = [];\n+   |                        +\n \n error: aborting due to previous error\n "}, {"sha": "c8f66bb0fc027f2d0a59322a3d75753c56633cc2", "filename": "tests/ui/consts/const-match-check.matchck.stderr", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Fui%2Fconsts%2Fconst-match-check.matchck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Fui%2Fconsts%2Fconst-match-check.matchck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-match-check.matchck.stderr?ref=85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "patch": "@@ -11,6 +11,10 @@ help: you might want to use `if let` to ignore the variants that aren't matched\n    |\n LL | const X: i32 = { if let 0 = 0 { todo!() } 0 };\n    |                  ++           ~~~~~~~~~~~\n+help: alternatively, you could prepend the pattern with an underscore to define a new named variable; identifiers cannot begin with digits\n+   |\n+LL | const X: i32 = { let _0 = 0; 0 };\n+   |                      +\n \n error[E0005]: refutable pattern in local binding\n   --> $DIR/const-match-check.rs:8:23\n@@ -25,6 +29,10 @@ help: you might want to use `if let` to ignore the variants that aren't matched\n    |\n LL | static Y: i32 = { if let 0 = 0 { todo!() } 0 };\n    |                   ++           ~~~~~~~~~~~\n+help: alternatively, you could prepend the pattern with an underscore to define a new named variable; identifiers cannot begin with digits\n+   |\n+LL | static Y: i32 = { let _0 = 0; 0 };\n+   |                       +\n \n error[E0005]: refutable pattern in local binding\n   --> $DIR/const-match-check.rs:13:26\n@@ -39,6 +47,10 @@ help: you might want to use `if let` to ignore the variants that aren't matched\n    |\n LL |     const X: i32 = { if let 0 = 0 { todo!() } 0 };\n    |                      ++           ~~~~~~~~~~~\n+help: alternatively, you could prepend the pattern with an underscore to define a new named variable; identifiers cannot begin with digits\n+   |\n+LL |     const X: i32 = { let _0 = 0; 0 };\n+   |                          +\n \n error[E0005]: refutable pattern in local binding\n   --> $DIR/const-match-check.rs:19:26\n@@ -53,6 +65,10 @@ help: you might want to use `if let` to ignore the variants that aren't matched\n    |\n LL |     const X: i32 = { if let 0 = 0 { todo!() } 0 };\n    |                      ++           ~~~~~~~~~~~\n+help: alternatively, you could prepend the pattern with an underscore to define a new named variable; identifiers cannot begin with digits\n+   |\n+LL |     const X: i32 = { let _0 = 0; 0 };\n+   |                          +\n \n error: aborting due to 4 previous errors\n "}, {"sha": "c4b02ee81ec8f65e7dce2f0ef064167be0f83625", "filename": "tests/ui/generics/issue-106694.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Fui%2Fgenerics%2Fissue-106694.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Fui%2Fgenerics%2Fissue-106694.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerics%2Fissue-106694.rs?ref=85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "patch": "@@ -0,0 +1,24 @@\n+trait Trait {}\n+\n+fn foo(_: impl &Trait) {}\n+//~^ ERROR expected a trait, found type\n+\n+fn bar<T: &Trait>(_: T) {}\n+//~^ ERROR expected a trait, found type\n+\n+fn partially_correct_impl(_: impl &*const &Trait + Copy) {}\n+//~^ ERROR expected a trait, found type\n+\n+fn foo_bad(_: impl &BadTrait) {}\n+//~^ ERROR expected a trait, found type\n+//~^^ ERROR cannot find trait `BadTrait` in this scope\n+\n+fn bar_bad<T: &BadTrait>(_: T) {}\n+//~^ ERROR expected a trait, found type\n+//~^^ ERROR cannot find trait `BadTrait` in this scope\n+\n+fn partially_correct_impl_bad(_: impl &*const &BadTrait + Copy) {}\n+//~^ ERROR expected a trait, found type\n+//~^^ ERROR cannot find trait `BadTrait` in this scope\n+\n+fn main() {}"}, {"sha": "235b8982a99c6e9346308a20a0ce4327534414b6", "filename": "tests/ui/generics/issue-106694.stderr", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Fui%2Fgenerics%2Fissue-106694.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Fui%2Fgenerics%2Fissue-106694.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerics%2Fissue-106694.stderr?ref=85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "patch": "@@ -0,0 +1,93 @@\n+error: expected a trait, found type\n+  --> $DIR/issue-106694.rs:3:16\n+   |\n+LL | fn foo(_: impl &Trait) {}\n+   |                ^^^^^^\n+   |\n+help: consider removing the indirection\n+   |\n+LL - fn foo(_: impl &Trait) {}\n+LL + fn foo(_: impl Trait) {}\n+   |\n+\n+error: expected a trait, found type\n+  --> $DIR/issue-106694.rs:6:11\n+   |\n+LL | fn bar<T: &Trait>(_: T) {}\n+   |           ^^^^^^\n+   |\n+help: consider removing the indirection\n+   |\n+LL - fn bar<T: &Trait>(_: T) {}\n+LL + fn bar<T: Trait>(_: T) {}\n+   |\n+\n+error: expected a trait, found type\n+  --> $DIR/issue-106694.rs:9:35\n+   |\n+LL | fn partially_correct_impl(_: impl &*const &Trait + Copy) {}\n+   |                                   ^^^^^^^^^^^^^^\n+   |\n+help: consider removing the indirection\n+   |\n+LL - fn partially_correct_impl(_: impl &*const &Trait + Copy) {}\n+LL + fn partially_correct_impl(_: impl Trait + Copy) {}\n+   |\n+\n+error: expected a trait, found type\n+  --> $DIR/issue-106694.rs:12:20\n+   |\n+LL | fn foo_bad(_: impl &BadTrait) {}\n+   |                    ^^^^^^^^^\n+   |\n+help: consider removing the indirection\n+   |\n+LL - fn foo_bad(_: impl &BadTrait) {}\n+LL + fn foo_bad(_: impl BadTrait) {}\n+   |\n+\n+error: expected a trait, found type\n+  --> $DIR/issue-106694.rs:16:15\n+   |\n+LL | fn bar_bad<T: &BadTrait>(_: T) {}\n+   |               ^^^^^^^^^\n+   |\n+help: consider removing the indirection\n+   |\n+LL - fn bar_bad<T: &BadTrait>(_: T) {}\n+LL + fn bar_bad<T: BadTrait>(_: T) {}\n+   |\n+\n+error: expected a trait, found type\n+  --> $DIR/issue-106694.rs:20:39\n+   |\n+LL | fn partially_correct_impl_bad(_: impl &*const &BadTrait + Copy) {}\n+   |                                       ^^^^^^^^^^^^^^^^^\n+   |\n+help: consider removing the indirection\n+   |\n+LL - fn partially_correct_impl_bad(_: impl &*const &BadTrait + Copy) {}\n+LL + fn partially_correct_impl_bad(_: impl BadTrait + Copy) {}\n+   |\n+\n+error[E0405]: cannot find trait `BadTrait` in this scope\n+  --> $DIR/issue-106694.rs:12:21\n+   |\n+LL | fn foo_bad(_: impl &BadTrait) {}\n+   |                     ^^^^^^^^ not found in this scope\n+\n+error[E0405]: cannot find trait `BadTrait` in this scope\n+  --> $DIR/issue-106694.rs:16:16\n+   |\n+LL | fn bar_bad<T: &BadTrait>(_: T) {}\n+   |                ^^^^^^^^ not found in this scope\n+\n+error[E0405]: cannot find trait `BadTrait` in this scope\n+  --> $DIR/issue-106694.rs:20:48\n+   |\n+LL | fn partially_correct_impl_bad(_: impl &*const &BadTrait + Copy) {}\n+   |                                                ^^^^^^^^ not found in this scope\n+\n+error: aborting due to 9 previous errors\n+\n+For more information about this error, try `rustc --explain E0405`."}, {"sha": "aa2c141e05ef268deef8bdcb9fb9bdc3249ae0a7", "filename": "tests/ui/pattern/issue-106552.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Fui%2Fpattern%2Fissue-106552.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Fui%2Fpattern%2Fissue-106552.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern%2Fissue-106552.rs?ref=85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "patch": "@@ -0,0 +1,7 @@\n+fn main() {\n+    let 5 = 6;\n+    //~^ error refutable pattern in local binding [E0005]\n+\n+    let x @ 5 = 6;\n+    //~^ error refutable pattern in local binding [E0005]\n+}"}, {"sha": "ed5d40c0968505c82c3fe00ae42610d8acbeec19", "filename": "tests/ui/pattern/issue-106552.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Fui%2Fpattern%2Fissue-106552.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/tests%2Fui%2Fpattern%2Fissue-106552.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern%2Fissue-106552.stderr?ref=85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "patch": "@@ -0,0 +1,35 @@\n+error[E0005]: refutable pattern in local binding\n+  --> $DIR/issue-106552.rs:2:9\n+   |\n+LL |     let 5 = 6;\n+   |         ^ patterns `i32::MIN..=4_i32` and `6_i32..=i32::MAX` not covered\n+   |\n+   = note: `let` bindings require an \"irrefutable pattern\", like a `struct` or an `enum` with only one variant\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html\n+   = note: the matched value is of type `i32`\n+help: you might want to use `if let` to ignore the variants that aren't matched\n+   |\n+LL |     if let 5 = 6 { todo!() }\n+   |     ++           ~~~~~~~~~~~\n+help: alternatively, you could prepend the pattern with an underscore to define a new named variable; identifiers cannot begin with digits\n+   |\n+LL |     let _5 = 6;\n+   |         +\n+\n+error[E0005]: refutable pattern in local binding\n+  --> $DIR/issue-106552.rs:5:9\n+   |\n+LL |     let x @ 5 = 6;\n+   |         ^^^^^ patterns `i32::MIN..=4_i32` and `6_i32..=i32::MAX` not covered\n+   |\n+   = note: `let` bindings require an \"irrefutable pattern\", like a `struct` or an `enum` with only one variant\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html\n+   = note: the matched value is of type `i32`\n+help: you might want to use `let else` to handle the variants that aren't matched\n+   |\n+LL |     let x @ 5 = 6 else { todo!() };\n+   |                   ++++++++++++++++\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0005`."}, {"sha": "bfbbae6857fa8bc6e304dbcf6888a38cbe6b5d31", "filename": "triagebot.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/triagebot.toml", "raw_url": "https://github.com/rust-lang/rust/raw/85357e3e2ed5f4ae4760d4418bbeab9985a784aa/triagebot.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/triagebot.toml?ref=85357e3e2ed5f4ae4760d4418bbeab9985a784aa", "patch": "@@ -185,7 +185,6 @@ trigger_files = [\n     \"src/tools/x\",\n     \"configure\",\n     \"Cargo.toml\",\n-    \"Cargo.lock\",\n     \"config.toml.example\",\n     \"src/stage0.json\"\n ]"}]}