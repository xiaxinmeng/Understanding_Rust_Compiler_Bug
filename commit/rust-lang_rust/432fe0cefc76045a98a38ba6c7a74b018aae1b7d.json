{"sha": "432fe0cefc76045a98a38ba6c7a74b018aae1b7d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzMmZlMGNlZmM3NjA0NWE5OGEzOGJhNmM3YTc0YjAxOGFhZTFiN2Q=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-25T04:19:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-25T04:19:06Z"}, "message": "Auto merge of #50100 - Manishearth:edition-path-lint, r=nikomatsakis\n\nEdition breakage lint for absolute paths starting with modules\n\nWe plan to enable `extern_absolute_paths` in the 2018 edition. To allow for that, folks must transition their paths in a previous edition to the new one. This makes paths which import module contents via `use module::` or `::module::` obsolete, and we must edition-lint these.\n\nhttps://internals.rust-lang.org/t/the-great-module-adventure-continues/6678/205?u=manishearth is the current plan for paths.\n\nr? @nikomatsakis\n\nFixes #48722", "tree": {"sha": "92e4e30e507b840bff4200b9728b803912410055", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92e4e30e507b840bff4200b9728b803912410055"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/432fe0cefc76045a98a38ba6c7a74b018aae1b7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/432fe0cefc76045a98a38ba6c7a74b018aae1b7d", "html_url": "https://github.com/rust-lang/rust/commit/432fe0cefc76045a98a38ba6c7a74b018aae1b7d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/432fe0cefc76045a98a38ba6c7a74b018aae1b7d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c5740feb24bff4f13b68b565288dd8a42ab93f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c5740feb24bff4f13b68b565288dd8a42ab93f6", "html_url": "https://github.com/rust-lang/rust/commit/0c5740feb24bff4f13b68b565288dd8a42ab93f6"}, {"sha": "2a5ce10dfb20e794d324cb1621e5ac892b7e421a", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a5ce10dfb20e794d324cb1621e5ac892b7e421a", "html_url": "https://github.com/rust-lang/rust/commit/2a5ce10dfb20e794d324cb1621e5ac892b7e421a"}], "stats": {"total": 172, "additions": 157, "deletions": 15}, "files": [{"sha": "109edffcde38a5d3cc9a22804c6b6e3b47ed5d7f", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/432fe0cefc76045a98a38ba6c7a74b018aae1b7d/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/432fe0cefc76045a98a38ba6c7a74b018aae1b7d/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=432fe0cefc76045a98a38ba6c7a74b018aae1b7d", "patch": "@@ -254,6 +254,13 @@ declare_lint! {\n     \"suggest using `dyn Trait` for trait objects\"\n }\n \n+declare_lint! {\n+    pub ABSOLUTE_PATH_STARTING_WITH_MODULE,\n+    Allow,\n+    \"fully qualified paths that start with a module name \\\n+     instead of `crate`, `self`, or an extern crate name\"\n+}\n+\n declare_lint! {\n     pub ILLEGAL_FLOATING_POINT_LITERAL_PATTERN,\n     Warn,\n@@ -314,6 +321,7 @@ impl LintPass for HardwiredLints {\n             TYVAR_BEHIND_RAW_POINTER,\n             ELIDED_LIFETIME_IN_PATH,\n             BARE_TRAIT_OBJECT,\n+            ABSOLUTE_PATH_STARTING_WITH_MODULE,\n             UNSTABLE_NAME_COLLISION,\n         )\n     }\n@@ -324,7 +332,8 @@ impl LintPass for HardwiredLints {\n #[derive(PartialEq, RustcEncodable, RustcDecodable, Debug)]\n pub enum BuiltinLintDiagnostics {\n     Normal,\n-    BareTraitObject(Span, /* is_global */ bool)\n+    BareTraitObject(Span, /* is_global */ bool),\n+    AbsPathWithModule(Span),\n }\n \n impl BuiltinLintDiagnostics {\n@@ -339,6 +348,23 @@ impl BuiltinLintDiagnostics {\n                 };\n                 db.span_suggestion(span, \"use `dyn`\", sugg);\n             }\n+            BuiltinLintDiagnostics::AbsPathWithModule(span) => {\n+                let sugg = match sess.codemap().span_to_snippet(span) {\n+                    Ok(ref s) => {\n+                        // FIXME(Manishearth) ideally the emitting code\n+                        // can tell us whether or not this is global\n+                        let opt_colon = if s.trim_left().starts_with(\"::\") {\n+                            \"\"\n+                        } else {\n+                            \"::\"\n+                        };\n+\n+                        format!(\"crate{}{}\", opt_colon, s)\n+                    }\n+                    Err(_) => format!(\"crate::<path>\")\n+                };\n+                db.span_suggestion(span, \"use `crate`\", sugg);\n+            }\n         }\n     }\n }"}, {"sha": "038d47dd5eae583fc744d3ae3edd203f36aa9b06", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/432fe0cefc76045a98a38ba6c7a74b018aae1b7d/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/432fe0cefc76045a98a38ba6c7a74b018aae1b7d/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=432fe0cefc76045a98a38ba6c7a74b018aae1b7d", "patch": "@@ -40,7 +40,7 @@ extern crate rustc_mir;\n extern crate syntax_pos;\n \n use rustc::lint;\n-use rustc::lint::builtin::BARE_TRAIT_OBJECT;\n+use rustc::lint::builtin::{BARE_TRAIT_OBJECT, ABSOLUTE_PATH_STARTING_WITH_MODULE};\n use rustc::session;\n use rustc::util;\n \n@@ -278,6 +278,11 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n             // Note: this item represents future incompatibility of all unstable functions in the\n             //       standard library, and thus should never be removed or changed to an error.\n         },\n+        FutureIncompatibleInfo {\n+            id: LintId::of(ABSOLUTE_PATH_STARTING_WITH_MODULE),\n+            reference: \"issue TBD\",\n+            edition: Some(Edition::Edition2018),\n+        },\n         ]);\n \n     // Register renamed and removed lints"}, {"sha": "7a87a72afc294635476d2041b5761213d4b3e769", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 42, "deletions": 8, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/432fe0cefc76045a98a38ba6c7a74b018aae1b7d/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/432fe0cefc76045a98a38ba6c7a74b018aae1b7d/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=432fe0cefc76045a98a38ba6c7a74b018aae1b7d", "patch": "@@ -1654,11 +1654,12 @@ impl<'a> Resolver<'a> {\n         let path: Vec<Ident> = segments.iter()\n             .map(|seg| Ident::new(seg.name, span))\n             .collect();\n-        match self.resolve_path(&path, Some(namespace), true, span) {\n+        // FIXME (Manishearth): Intra doc links won't get warned of epoch changes\n+        match self.resolve_path(&path, Some(namespace), true, span, None) {\n             PathResult::Module(module) => *def = module.def().unwrap(),\n             PathResult::NonModule(path_res) if path_res.unresolved_segments() == 0 =>\n                 *def = path_res.base_def(),\n-            PathResult::NonModule(..) => match self.resolve_path(&path, None, true, span) {\n+            PathResult::NonModule(..) => match self.resolve_path(&path, None, true, span, None) {\n                 PathResult::Failed(span, msg, _) => {\n                     error_callback(self, span, ResolutionError::FailedToResolve(&msg));\n                 }\n@@ -2360,7 +2361,8 @@ impl<'a> Resolver<'a> {\n             if def != Def::Err {\n                 new_id = Some(def.def_id());\n                 let span = trait_ref.path.span;\n-                if let PathResult::Module(module) = self.resolve_path(&path, None, false, span) {\n+                if let PathResult::Module(module) = self.resolve_path(&path, None, false, span,\n+                                                                      Some(trait_ref.ref_id)) {\n                     new_val = Some((module, trait_ref.clone()));\n                 }\n             }\n@@ -2819,7 +2821,8 @@ impl<'a> Resolver<'a> {\n                     (format!(\"\"), format!(\"the crate root\"))\n                 } else {\n                     let mod_path = &path[..path.len() - 1];\n-                    let mod_prefix = match this.resolve_path(mod_path, Some(TypeNS), false, span) {\n+                    let mod_prefix = match this.resolve_path(mod_path, Some(TypeNS),\n+                                                             false, span, None) {\n                         PathResult::Module(module) => module.def(),\n                         _ => None,\n                     }.map_or(format!(\"\"), |def| format!(\"{} \", def.kind_name()));\n@@ -3149,7 +3152,7 @@ impl<'a> Resolver<'a> {\n             ));\n         }\n \n-        let result = match self.resolve_path(&path, Some(ns), true, span) {\n+        let result = match self.resolve_path(&path, Some(ns), true, span, Some(id)) {\n             PathResult::NonModule(path_res) => path_res,\n             PathResult::Module(module) if !module.is_normal() => {\n                 PathResolution::new(module.def().unwrap())\n@@ -3186,7 +3189,7 @@ impl<'a> Resolver<'a> {\n            path[0].name != keywords::CrateRoot.name() &&\n            path[0].name != keywords::DollarCrate.name() {\n             let unqualified_result = {\n-                match self.resolve_path(&[*path.last().unwrap()], Some(ns), false, span) {\n+                match self.resolve_path(&[*path.last().unwrap()], Some(ns), false, span, None) {\n                     PathResult::NonModule(path_res) => path_res.base_def(),\n                     PathResult::Module(module) => module.def().unwrap(),\n                     _ => return Some(result),\n@@ -3205,7 +3208,9 @@ impl<'a> Resolver<'a> {\n                     path: &[Ident],\n                     opt_ns: Option<Namespace>, // `None` indicates a module path\n                     record_used: bool,\n-                    path_span: Span)\n+                    path_span: Span,\n+                    node_id: Option<NodeId>) // None indicates that we don't care about linting\n+                                             // `::module` paths\n                     -> PathResult<'a> {\n         let mut module = None;\n         let mut allow_super = true;\n@@ -3253,6 +3258,8 @@ impl<'a> Resolver<'a> {\n                     let prev_name = path[0].name;\n                     if prev_name == keywords::Extern.name() ||\n                        prev_name == keywords::CrateRoot.name() &&\n+                       // Note: When this feature stabilizes, this should\n+                       // be gated on sess.rust_2018()\n                        self.session.features_untracked().extern_absolute_paths {\n                         // `::extern_crate::a::b`\n                         let crate_id = self.crate_loader.process_path_extern(name, ident.span);\n@@ -3324,6 +3331,33 @@ impl<'a> Resolver<'a> {\n                                                   format!(\"Not a module `{}`\", ident),\n                                                   is_last);\n                     }\n+\n+                    if let Some(id) = node_id {\n+                        if i == 1 && self.session.features_untracked().crate_in_paths\n+                                  && !self.session.rust_2018() {\n+                            let prev_name = path[0].name;\n+                            if prev_name == keywords::Extern.name() ||\n+                               prev_name == keywords::CrateRoot.name() {\n+                                let mut is_crate = false;\n+                                if let NameBindingKind::Import { directive: d, .. } = binding.kind {\n+                                    if let ImportDirectiveSubclass::ExternCrate(..) = d.subclass {\n+                                        is_crate = true;\n+                                    }\n+                                }\n+\n+                                if !is_crate {\n+                                    let diag = lint::builtin::BuiltinLintDiagnostics\n+                                                   ::AbsPathWithModule(path_span);\n+                                    self.session.buffer_lint_with_diagnostic(\n+                                        lint::builtin::ABSOLUTE_PATH_STARTING_WITH_MODULE,\n+                                        id, path_span,\n+                                        \"Absolute paths must start with `self`, `super`, \\\n+                                        `crate`, or an external crate name in the 2018 edition\",\n+                                        diag);\n+                                }\n+                            }\n+                        }\n+                    }\n                 }\n                 Err(Undetermined) => return PathResult::Indeterminate,\n                 Err(Determined) => {\n@@ -3571,7 +3605,7 @@ impl<'a> Resolver<'a> {\n             // Search in module.\n             let mod_path = &path[..path.len() - 1];\n             if let PathResult::Module(module) = self.resolve_path(mod_path, Some(TypeNS),\n-                                                                  false, span) {\n+                                                                  false, span, None) {\n                 add_module_candidates(module, &mut names);\n             }\n         }"}, {"sha": "af1e17cd89c090ee903ac95094a8ee4f96e8caa6", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/432fe0cefc76045a98a38ba6c7a74b018aae1b7d/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/432fe0cefc76045a98a38ba6c7a74b018aae1b7d/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=432fe0cefc76045a98a38ba6c7a74b018aae1b7d", "patch": "@@ -438,7 +438,7 @@ impl<'a> Resolver<'a> {\n                 return Err(Determinacy::Determined);\n             }\n \n-            let def = match self.resolve_path(&path, Some(MacroNS), false, span) {\n+            let def = match self.resolve_path(&path, Some(MacroNS), false, span, None) {\n                 PathResult::NonModule(path_res) => match path_res.base_def() {\n                     Def::Err => Err(Determinacy::Determined),\n                     def @ _ => {\n@@ -616,7 +616,7 @@ impl<'a> Resolver<'a> {\n     pub fn finalize_current_module_macro_resolutions(&mut self) {\n         let module = self.current_module;\n         for &(ref path, span) in module.macro_resolutions.borrow().iter() {\n-            match self.resolve_path(&path, Some(MacroNS), true, span) {\n+            match self.resolve_path(&path, Some(MacroNS), true, span, None) {\n                 PathResult::NonModule(_) => {},\n                 PathResult::Failed(span, msg, _) => {\n                     resolve_error(self, span, ResolutionError::FailedToResolve(&msg));"}, {"sha": "e2a7f5668d251b535cdf50f152441328a2b16b4f", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/432fe0cefc76045a98a38ba6c7a74b018aae1b7d/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/432fe0cefc76045a98a38ba6c7a74b018aae1b7d/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=432fe0cefc76045a98a38ba6c7a74b018aae1b7d", "patch": "@@ -535,7 +535,8 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n             // For better failure detection, pretend that the import will not define any names\n             // while resolving its module path.\n             directive.vis.set(ty::Visibility::Invisible);\n-            let result = self.resolve_path(&directive.module_path[..], None, false, directive.span);\n+            let result = self.resolve_path(&directive.module_path[..], None, false,\n+                                           directive.span, Some(directive.id));\n             directive.vis.set(vis);\n \n             match result {\n@@ -663,7 +664,7 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n             }\n         }\n \n-        let module_result = self.resolve_path(&module_path, None, true, span);\n+        let module_result = self.resolve_path(&module_path, None, true, span, Some(directive.id));\n         let module = match module_result {\n             PathResult::Module(module) => module,\n             PathResult::Failed(span, msg, false) => {\n@@ -677,7 +678,8 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n                 if !self_path.is_empty() && !is_special(self_path[0]) &&\n                    !(self_path.len() > 1 && is_special(self_path[1])) {\n                     self_path[0].name = keywords::SelfValue.name();\n-                    self_result = Some(self.resolve_path(&self_path, None, false, span));\n+                    self_result = Some(self.resolve_path(&self_path, None, false,\n+                                                         span, None));\n                 }\n                 return if let Some(PathResult::Module(..)) = self_result {\n                     Some((span, format!(\"Did you mean `{}`?\", names_to_string(&self_path[..]))))"}, {"sha": "0b49e72ccd94c4d57279a657eb799cdcd1b36475", "filename": "src/test/ui/edition-lint-paths.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/432fe0cefc76045a98a38ba6c7a74b018aae1b7d/src%2Ftest%2Fui%2Fedition-lint-paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/432fe0cefc76045a98a38ba6c7a74b018aae1b7d/src%2Ftest%2Fui%2Fedition-lint-paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fedition-lint-paths.rs?ref=432fe0cefc76045a98a38ba6c7a74b018aae1b7d", "patch": "@@ -0,0 +1,41 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(crate_in_paths)]\n+#![deny(absolute_path_starting_with_module)]\n+#![allow(unused)]\n+\n+pub mod foo {\n+    use ::bar::Bar;\n+    //~^ ERROR Absolute\n+    //~| WARN this was previously accepted\n+    use super::bar::Bar2;\n+    use crate::bar::Bar3;\n+}\n+\n+\n+use bar::Bar;\n+//~^ ERROR Absolute\n+//~| WARN this was previously accepted\n+\n+pub mod bar {\n+    pub struct Bar;\n+    pub type Bar2 = Bar;\n+    pub type Bar3 = Bar;\n+}\n+\n+fn main() {\n+    let x = ::bar::Bar;\n+    //~^ ERROR Absolute\n+    //~| WARN this was previously accepted\n+    let x = bar::Bar;\n+    let x = ::crate::bar::Bar;\n+    let x = self::bar::Bar;\n+}"}, {"sha": "509527e03743c7bec5d0bebac7deca9d8ee99846", "filename": "src/test/ui/edition-lint-paths.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/432fe0cefc76045a98a38ba6c7a74b018aae1b7d/src%2Ftest%2Fui%2Fedition-lint-paths.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/432fe0cefc76045a98a38ba6c7a74b018aae1b7d/src%2Ftest%2Fui%2Fedition-lint-paths.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fedition-lint-paths.stderr?ref=432fe0cefc76045a98a38ba6c7a74b018aae1b7d", "patch": "@@ -0,0 +1,34 @@\n+error: Absolute paths must start with `self`, `super`, `crate`, or an external crate name in the 2018 edition\n+  --> $DIR/edition-lint-paths.rs:16:9\n+   |\n+LL |     use ::bar::Bar;\n+   |         ^^^^^^^^^^ help: use `crate`: `crate::bar::Bar`\n+   |\n+note: lint level defined here\n+  --> $DIR/edition-lint-paths.rs:12:9\n+   |\n+LL | #![deny(absolute_path_starting_with_module)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = note: for more information, see issue TBD\n+\n+error: Absolute paths must start with `self`, `super`, `crate`, or an external crate name in the 2018 edition\n+  --> $DIR/edition-lint-paths.rs:24:5\n+   |\n+LL | use bar::Bar;\n+   |     ^^^^^^^^ help: use `crate`: `crate::bar::Bar`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = note: for more information, see issue TBD\n+\n+error: Absolute paths must start with `self`, `super`, `crate`, or an external crate name in the 2018 edition\n+  --> $DIR/edition-lint-paths.rs:35:13\n+   |\n+LL |     let x = ::bar::Bar;\n+   |             ^^^^^^^^^^ help: use `crate`: `crate::bar::Bar`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = note: for more information, see issue TBD\n+\n+error: aborting due to 3 previous errors\n+"}]}