{"sha": "d1364a65c0e064ee12aea8d58aceb403b8200682", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxMzY0YTY1YzBlMDY0ZWUxMmFlYThkNThhY2ViNDAzYjgyMDA2ODI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-01T06:06:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-01T06:06:06Z"}, "message": "Auto merge of #45997 - estebank:pub-ident, r=nikomatsakis\n\nAccount for missing keyword in fn/struct definition\n\nFix #38911.", "tree": {"sha": "4610cdc2a8f401adb2cca09a6594d52fd1c74299", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4610cdc2a8f401adb2cca09a6594d52fd1c74299"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1364a65c0e064ee12aea8d58aceb403b8200682", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1364a65c0e064ee12aea8d58aceb403b8200682", "html_url": "https://github.com/rust-lang/rust/commit/d1364a65c0e064ee12aea8d58aceb403b8200682", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1364a65c0e064ee12aea8d58aceb403b8200682/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "804b15be82ea668d943fab70195eb57a2f942d4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/804b15be82ea668d943fab70195eb57a2f942d4b", "html_url": "https://github.com/rust-lang/rust/commit/804b15be82ea668d943fab70195eb57a2f942d4b"}, {"sha": "cf9283ea9376525c59015a52c729e7a79f576426", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf9283ea9376525c59015a52c729e7a79f576426", "html_url": "https://github.com/rust-lang/rust/commit/cf9283ea9376525c59015a52c729e7a79f576426"}], "stats": {"total": 288, "additions": 267, "deletions": 21}, "files": [{"sha": "63b80a3f3c1e261d742b12690e01daee3d19f0b3", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d1364a65c0e064ee12aea8d58aceb403b8200682/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1364a65c0e064ee12aea8d58aceb403b8200682/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=d1364a65c0e064ee12aea8d58aceb403b8200682", "patch": "@@ -1890,7 +1890,9 @@ impl<'a> LoweringContext<'a> {\n                                bounds,\n                                items)\n             }\n-            ItemKind::MacroDef(..) | ItemKind::Mac(..) => panic!(\"Shouldn't still be around\"),\n+            ItemKind::MacroDef(..) | ItemKind::Mac(..) => {\n+                panic!(\"Shouldn't still be around\")\n+            }\n         }\n \n         // [1] `defaultness.has_value()` is never called for an `impl`, always `true` in order to"}, {"sha": "16bbd755b886934b8ca790ea5ecd118d4d8abf82", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1364a65c0e064ee12aea8d58aceb403b8200682/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1364a65c0e064ee12aea8d58aceb403b8200682/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=d1364a65c0e064ee12aea8d58aceb403b8200682", "patch": "@@ -1156,7 +1156,7 @@ impl EmitterWriter {\n                     let start = parts[0].snippet.len() - parts[0].snippet.trim_left().len();\n                     let sub_len = parts[0].snippet.trim().len();\n                     let underline_start = span_start_pos.col.0 + start;\n-                    let underline_end = span_start_pos.col.0 + sub_len;\n+                    let underline_end = span_start_pos.col.0 + start + sub_len;\n                     for p in underline_start..underline_end {\n                         buffer.putc(row_num,\n                                     max_line_num_len + 3 + p,"}, {"sha": "971e797ba17d40a947e8613028df5d29083a7981", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1364a65c0e064ee12aea8d58aceb403b8200682/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1364a65c0e064ee12aea8d58aceb403b8200682/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=d1364a65c0e064ee12aea8d58aceb403b8200682", "patch": "@@ -1945,7 +1945,7 @@ impl<'a> Resolver<'a> {\n                 self.resolve_use_tree(item, use_tree, &path);\n             }\n \n-            ItemKind::ExternCrate(_) | ItemKind::MacroDef(..) | ItemKind::GlobalAsm(_)=> {\n+            ItemKind::ExternCrate(_) | ItemKind::MacroDef(..) | ItemKind::GlobalAsm(_) => {\n                 // do nothing, these are just around to be encoded\n             }\n "}, {"sha": "072dd9bfb0ced7ebac4dc2633c79981ef294ec69", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 111, "deletions": 10, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/d1364a65c0e064ee12aea8d58aceb403b8200682/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1364a65c0e064ee12aea8d58aceb403b8200682/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=d1364a65c0e064ee12aea8d58aceb403b8200682", "patch": "@@ -1156,6 +1156,7 @@ impl<'a> Parser<'a> {\n             None => token::CloseDelim(self.token_cursor.frame.delim),\n         })\n     }\n+\n     fn look_ahead_span(&self, dist: usize) -> Span {\n         if dist == 0 {\n             return self.span\n@@ -4268,7 +4269,16 @@ impl<'a> Parser<'a> {\n         let mut stmts = vec![];\n \n         while !self.eat(&token::CloseDelim(token::Brace)) {\n-            if let Some(stmt) = self.parse_full_stmt(false)? {\n+            let stmt = match self.parse_full_stmt(false) {\n+                Err(mut err) => {\n+                    err.emit();\n+                    self.recover_stmt_(SemiColonMode::Ignore, BlockMode::Break);\n+                    self.eat(&token::CloseDelim(token::Brace));\n+                    break;\n+                }\n+                Ok(stmt) => stmt,\n+            };\n+            if let Some(stmt) = stmt {\n                 stmts.push(stmt);\n             } else if self.token == token::Eof {\n                 break;\n@@ -4277,7 +4287,6 @@ impl<'a> Parser<'a> {\n                 continue;\n             };\n         }\n-\n         Ok(P(ast::Block {\n             stmts,\n             id: ast::DUMMY_NODE_ID,\n@@ -5325,18 +5334,45 @@ impl<'a> Parser<'a> {\n         Ok((class_name, ItemKind::Union(vdata, generics), None))\n     }\n \n+    fn consume_block(&mut self, delim: token::DelimToken) {\n+        let mut brace_depth = 0;\n+        if !self.eat(&token::OpenDelim(delim)) {\n+            return;\n+        }\n+        loop {\n+            if self.eat(&token::OpenDelim(delim)) {\n+                brace_depth += 1;\n+            } else if self.eat(&token::CloseDelim(delim)) {\n+                if brace_depth == 0 {\n+                    return;\n+                } else {\n+                    brace_depth -= 1;\n+                    continue;\n+                }\n+            } else if self.eat(&token::Eof) || self.eat(&token::CloseDelim(token::NoDelim)) {\n+                return;\n+            } else {\n+                self.bump();\n+            }\n+        }\n+    }\n+\n     pub fn parse_record_struct_body(&mut self) -> PResult<'a, Vec<StructField>> {\n         let mut fields = Vec::new();\n         if self.eat(&token::OpenDelim(token::Brace)) {\n             while self.token != token::CloseDelim(token::Brace) {\n-                fields.push(self.parse_struct_decl_field().map_err(|e| {\n+                let field = self.parse_struct_decl_field().map_err(|e| {\n                     self.recover_stmt();\n-                    self.eat(&token::CloseDelim(token::Brace));\n                     e\n-                })?);\n+                });\n+                match field {\n+                    Ok(field) => fields.push(field),\n+                    Err(mut err) => {\n+                        err.emit();\n+                    }\n+                }\n             }\n-\n-            self.bump();\n+            self.eat(&token::CloseDelim(token::Brace));\n         } else {\n             let token_str = self.this_token_to_string();\n             return Err(self.fatal(&format!(\"expected `where`, or `{{` after struct \\\n@@ -5384,8 +5420,15 @@ impl<'a> Parser<'a> {\n                 self.bump();\n             }\n             token::CloseDelim(token::Brace) => {}\n-            token::DocComment(_) => return Err(self.span_fatal_err(self.span,\n-                                                                   Error::UselessDocComment)),\n+            token::DocComment(_) => {\n+                let mut err = self.span_fatal_err(self.span, Error::UselessDocComment);\n+                self.bump(); // consume the doc comment\n+                if self.eat(&token::Comma) || self.token == token::CloseDelim(token::Brace) {\n+                    err.emit();\n+                } else {\n+                    return Err(err);\n+                }\n+            }\n             _ => return Err(self.span_fatal_help(self.span,\n                     &format!(\"expected `,`, or `}}`, found `{}`\", self.this_token_to_string()),\n                     \"struct fields should be separated by commas\")),\n@@ -6241,7 +6284,65 @@ impl<'a> Parser<'a> {\n             return Ok(Some(macro_def));\n         }\n \n-        self.parse_macro_use_or_failure(attrs,macros_allowed,attributes_allowed,lo,visibility)\n+        // Verify wether we have encountered a struct or method definition where the user forgot to\n+        // add the `struct` or `fn` keyword after writing `pub`: `pub S {}`\n+        if visibility == Visibility::Public &&\n+            self.check_ident() &&\n+            self.look_ahead(1, |t| *t != token::Not)\n+        {\n+            // Space between `pub` keyword and the identifier\n+            //\n+            //     pub   S {}\n+            //        ^^^ `sp` points here\n+            let sp = self.prev_span.between(self.span);\n+            let full_sp = self.prev_span.to(self.span);\n+            let ident_sp = self.span;\n+            if self.look_ahead(1, |t| *t == token::OpenDelim(token::Brace)) {\n+                // possible public struct definition where `struct` was forgotten\n+                let ident = self.parse_ident().unwrap();\n+                let msg = format!(\"add `struct` here to parse `{}` as a public struct\",\n+                                  ident);\n+                let mut err = self.diagnostic()\n+                    .struct_span_err(sp, \"missing `struct` for struct definition\");\n+                err.span_suggestion_short(sp, &msg, \" struct \".into());\n+                return Err(err);\n+            } else if self.look_ahead(1, |t| *t == token::OpenDelim(token::Paren)) {\n+                let ident = self.parse_ident().unwrap();\n+                self.consume_block(token::Paren);\n+                let (kw, kw_name, ambiguous) = if self.check(&token::RArrow) ||\n+                    self.check(&token::OpenDelim(token::Brace))\n+                {\n+                    (\"fn\", \"method\", false)\n+                } else if self.check(&token::Colon) {\n+                    let kw = \"struct\";\n+                    (kw, kw, false)\n+                } else {\n+                    (\"fn` or `struct\", \"method or struct\", true)\n+                };\n+\n+                let msg = format!(\"missing `{}` for {} definition\", kw, kw_name);\n+                let mut err = self.diagnostic().struct_span_err(sp, &msg);\n+                if !ambiguous {\n+                    let suggestion = format!(\"add `{}` here to parse `{}` as a public {}\",\n+                                             kw,\n+                                             ident,\n+                                             kw_name);\n+                    err.span_suggestion_short(sp, &suggestion, format!(\" {} \", kw));\n+                } else {\n+                    if let Ok(snippet) = self.sess.codemap().span_to_snippet(ident_sp) {\n+                        err.span_suggestion(\n+                            full_sp,\n+                            \"if you meant to call a macro, write instead\",\n+                            format!(\"{}!\", snippet));\n+                    } else {\n+                        err.help(\"if you meant to call a macro, remove the `pub` \\\n+                                  and add a trailing `!` after the identifier\");\n+                    }\n+                }\n+                return Err(err);\n+            }\n+        }\n+        self.parse_macro_use_or_failure(attrs, macros_allowed, attributes_allowed, lo, visibility)\n     }\n \n     /// Parse a foreign item."}, {"sha": "f375847e705bc636ffe49b05f603c81a30ff8cbc", "filename": "src/libsyntax_ext/deriving/custom.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d1364a65c0e064ee12aea8d58aceb403b8200682/src%2Flibsyntax_ext%2Fderiving%2Fcustom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1364a65c0e064ee12aea8d58aceb403b8200682/src%2Flibsyntax_ext%2Fderiving%2Fcustom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcustom.rs?ref=d1364a65c0e064ee12aea8d58aceb403b8200682", "patch": "@@ -96,12 +96,18 @@ impl MultiItemModifier for ProcMacroDerive {\n             }\n         };\n \n+        let error_count_before = ecx.parse_sess.span_diagnostic.err_count();\n         __internal::set_sess(ecx, || {\n+            let msg = \"proc-macro derive produced unparseable tokens\";\n             match __internal::token_stream_parse_items(stream) {\n+                // fail if there have been errors emitted\n+                Ok(_) if ecx.parse_sess.span_diagnostic.err_count() > error_count_before => {\n+                    ecx.struct_span_fatal(span, msg).emit();\n+                    panic!(FatalError);\n+                }\n                 Ok(new_items) => new_items.into_iter().map(Annotatable::Item).collect(),\n                 Err(_) => {\n                     // FIXME: handle this better\n-                    let msg = \"proc-macro derive produced unparseable tokens\";\n                     ecx.struct_span_fatal(span, msg).emit();\n                     panic!(FatalError);\n                 }"}, {"sha": "93790f5937298c52423493d359e00d58fd6b82a3", "filename": "src/test/compile-fail-fulldeps/proc-macro/derive-bad.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d1364a65c0e064ee12aea8d58aceb403b8200682/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fderive-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1364a65c0e064ee12aea8d58aceb403b8200682/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fderive-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fderive-bad.rs?ref=d1364a65c0e064ee12aea8d58aceb403b8200682", "patch": "@@ -17,7 +17,8 @@ extern crate derive_bad;\n #[derive(\n     A\n )]\n-//~^^ ERROR: proc-macro derive produced unparseable tokens\n+//~^^ ERROR proc-macro derive produced unparseable tokens\n+//~| ERROR expected `:`, found `}`\n struct A;\n \n fn main() {}"}, {"sha": "a2c60151ac72d549958b938b81e429581bc1bd26", "filename": "src/test/parse-fail/doc-after-struct-field.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d1364a65c0e064ee12aea8d58aceb403b8200682/src%2Ftest%2Fparse-fail%2Fdoc-after-struct-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1364a65c0e064ee12aea8d58aceb403b8200682/src%2Ftest%2Fparse-fail%2Fdoc-after-struct-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fdoc-after-struct-field.rs?ref=d1364a65c0e064ee12aea8d58aceb403b8200682", "patch": "@@ -9,12 +9,20 @@\n // except according to those terms.\n \n // compile-flags: -Z continue-parse-after-error\n+\n struct X {\n     a: u8 /** document a */,\n     //~^ ERROR found a documentation comment that doesn't document anything\n     //~| HELP maybe a comment was intended\n }\n \n+struct Y {\n+    a: u8 /// document a\n+    //~^ ERROR found a documentation comment that doesn't document anything\n+    //~| HELP maybe a comment was intended\n+}\n+\n fn main() {\n-    let y = X {a = 1};\n+    let x = X { a: 1 };\n+    let y = Y { a: 1 };\n }"}, {"sha": "6d9b4b05ad9fa6a69b1fa0ff213975fe962660c4", "filename": "src/test/parse-fail/doc-before-struct-rbrace-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1364a65c0e064ee12aea8d58aceb403b8200682/src%2Ftest%2Fparse-fail%2Fdoc-before-struct-rbrace-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1364a65c0e064ee12aea8d58aceb403b8200682/src%2Ftest%2Fparse-fail%2Fdoc-before-struct-rbrace-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fdoc-before-struct-rbrace-1.rs?ref=d1364a65c0e064ee12aea8d58aceb403b8200682", "patch": "@@ -17,5 +17,5 @@ struct X {\n }\n \n fn main() {\n-    let y = X {a = 1};\n+    let y = X {a: 1};\n }"}, {"sha": "63b2f963799166622a191aac6d5795391bab2c28", "filename": "src/test/parse-fail/doc-before-struct-rbrace-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1364a65c0e064ee12aea8d58aceb403b8200682/src%2Ftest%2Fparse-fail%2Fdoc-before-struct-rbrace-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1364a65c0e064ee12aea8d58aceb403b8200682/src%2Ftest%2Fparse-fail%2Fdoc-before-struct-rbrace-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fdoc-before-struct-rbrace-2.rs?ref=d1364a65c0e064ee12aea8d58aceb403b8200682", "patch": "@@ -16,5 +16,5 @@ struct X {\n }\n \n fn main() {\n-    let y = X {a = 1};\n+    let y = X {a: 1};\n }"}, {"sha": "3da9d1a8712ad0512aa4a41abd85dbe714d8a138", "filename": "src/test/parse-fail/issue-22647.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1364a65c0e064ee12aea8d58aceb403b8200682/src%2Ftest%2Fparse-fail%2Fissue-22647.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1364a65c0e064ee12aea8d58aceb403b8200682/src%2Ftest%2Fparse-fail%2Fissue-22647.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fissue-22647.rs?ref=d1364a65c0e064ee12aea8d58aceb403b8200682", "patch": "@@ -16,6 +16,7 @@ fn main() {\n         println!(\"Y {}\",x);\n         return x;\n     };\n+    //~^ ERROR expected item, found `;`\n \n     caller(bar_handler);\n }"}, {"sha": "93a1468bf7b196938b81670ef334e6e48ff7efaf", "filename": "src/test/parse-fail/issue-37234.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1364a65c0e064ee12aea8d58aceb403b8200682/src%2Ftest%2Fparse-fail%2Fissue-37234.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1364a65c0e064ee12aea8d58aceb403b8200682/src%2Ftest%2Fparse-fail%2Fissue-37234.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fissue-37234.rs?ref=d1364a65c0e064ee12aea8d58aceb403b8200682", "patch": "@@ -11,7 +11,7 @@\n macro_rules! failed {\n     () => {{\n         let x = 5 \"\"; //~ ERROR found `\"\"`\n-    }} //~ ERROR macro expansion ignores token `}`\n+    }}\n }\n \n fn main() {"}, {"sha": "ffb455975521a6fd888a2eff1a82a015a81283e3", "filename": "src/test/parse-fail/mut-patterns.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d1364a65c0e064ee12aea8d58aceb403b8200682/src%2Ftest%2Fparse-fail%2Fmut-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1364a65c0e064ee12aea8d58aceb403b8200682/src%2Ftest%2Fparse-fail%2Fmut-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fmut-patterns.rs?ref=d1364a65c0e064ee12aea8d58aceb403b8200682", "patch": "@@ -15,4 +15,5 @@\n pub fn main() {\n     struct Foo { x: isize }\n     let mut Foo { x: x } = Foo { x: 3 }; //~ ERROR: expected one of `:`, `;`, `=`, or `@`, found `{`\n+    //~^ ERROR expected item, found `=`\n }"}, {"sha": "421d7a05befff11c43f317256056a8d1d2e0809b", "filename": "src/test/parse-fail/pat-lt-bracket-5.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1364a65c0e064ee12aea8d58aceb403b8200682/src%2Ftest%2Fparse-fail%2Fpat-lt-bracket-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1364a65c0e064ee12aea8d58aceb403b8200682/src%2Ftest%2Fparse-fail%2Fpat-lt-bracket-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fpat-lt-bracket-5.rs?ref=d1364a65c0e064ee12aea8d58aceb403b8200682", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n fn main() {\n-    let v[0] = v[1]; //~ error: expected one of `:`, `;`, `=`, or `@`, found `[`\n+    let v[0] = v[1]; //~ ERROR expected one of `:`, `;`, `=`, or `@`, found `[`\n }"}, {"sha": "4822d01a591b8cbcb62048aadf9677406e1a8dca", "filename": "src/test/ui/pub/pub-restricted-error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1364a65c0e064ee12aea8d58aceb403b8200682/src%2Ftest%2Fui%2Fpub%2Fpub-restricted-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1364a65c0e064ee12aea8d58aceb403b8200682/src%2Ftest%2Fui%2Fpub%2Fpub-restricted-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-restricted-error.rs?ref=d1364a65c0e064ee12aea8d58aceb403b8200682", "patch": "@@ -16,4 +16,4 @@ struct Foo {\n     pub(crate) () foo: usize, //~ ERROR expected identifier\n }\n \n-\n+fn main() {}"}, {"sha": "44884bfcdfdce786715d88ae569b82057f69a933", "filename": "src/test/ui/suggestions/pub-ident-fn-2.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d1364a65c0e064ee12aea8d58aceb403b8200682/src%2Ftest%2Fui%2Fsuggestions%2Fpub-ident-fn-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1364a65c0e064ee12aea8d58aceb403b8200682/src%2Ftest%2Fui%2Fsuggestions%2Fpub-ident-fn-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fpub-ident-fn-2.rs?ref=d1364a65c0e064ee12aea8d58aceb403b8200682", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub foo(s: usize) { bar() }\n+//~^ ERROR missing `fn` for method definition\n+\n+fn main() {\n+    foo(2);\n+}"}, {"sha": "7d3abceb11b58cd4f31044c9da519a6cd30a49c8", "filename": "src/test/ui/suggestions/pub-ident-fn-2.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d1364a65c0e064ee12aea8d58aceb403b8200682/src%2Ftest%2Fui%2Fsuggestions%2Fpub-ident-fn-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d1364a65c0e064ee12aea8d58aceb403b8200682/src%2Ftest%2Fui%2Fsuggestions%2Fpub-ident-fn-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fpub-ident-fn-2.stderr?ref=d1364a65c0e064ee12aea8d58aceb403b8200682", "patch": "@@ -0,0 +1,12 @@\n+error: missing `fn` for method definition\n+  --> $DIR/pub-ident-fn-2.rs:11:4\n+   |\n+11 | pub foo(s: usize) { bar() }\n+   |    ^\n+help: add `fn` here to parse `foo` as a public method\n+   |\n+11 | pub fn foo(s: usize) { bar() }\n+   |     ^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "1ccadc8a40b72dd4dc235c66e90e6a1848edc830", "filename": "src/test/ui/suggestions/pub-ident-fn-or-struct-2.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d1364a65c0e064ee12aea8d58aceb403b8200682/src%2Ftest%2Fui%2Fsuggestions%2Fpub-ident-fn-or-struct-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1364a65c0e064ee12aea8d58aceb403b8200682/src%2Ftest%2Fui%2Fsuggestions%2Fpub-ident-fn-or-struct-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fpub-ident-fn-or-struct-2.rs?ref=d1364a65c0e064ee12aea8d58aceb403b8200682", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub S();\n+//~^ ERROR missing `fn` or `struct` for method or struct definition\n+\n+fn main() {}"}, {"sha": "68dea2aec3a54b57ee4bd78b8f90c4ac064eb57b", "filename": "src/test/ui/suggestions/pub-ident-fn-or-struct-2.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d1364a65c0e064ee12aea8d58aceb403b8200682/src%2Ftest%2Fui%2Fsuggestions%2Fpub-ident-fn-or-struct-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d1364a65c0e064ee12aea8d58aceb403b8200682/src%2Ftest%2Fui%2Fsuggestions%2Fpub-ident-fn-or-struct-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fpub-ident-fn-or-struct-2.stderr?ref=d1364a65c0e064ee12aea8d58aceb403b8200682", "patch": "@@ -0,0 +1,8 @@\n+error: missing `fn` or `struct` for method or struct definition\n+  --> $DIR/pub-ident-fn-or-struct-2.rs:11:4\n+   |\n+11 | pub S();\n+   | ---^- help: if you meant to call a macro, write instead: `S!`\n+\n+error: aborting due to previous error\n+"}, {"sha": "0664918945b43157ab0ee862b6700843280ea6e4", "filename": "src/test/ui/suggestions/pub-ident-fn-or-struct.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d1364a65c0e064ee12aea8d58aceb403b8200682/src%2Ftest%2Fui%2Fsuggestions%2Fpub-ident-fn-or-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1364a65c0e064ee12aea8d58aceb403b8200682/src%2Ftest%2Fui%2Fsuggestions%2Fpub-ident-fn-or-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fpub-ident-fn-or-struct.rs?ref=d1364a65c0e064ee12aea8d58aceb403b8200682", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub S (foo) bar\n+//~^ ERROR missing `fn` or `struct` for method or struct definition\n+\n+fn main() {}"}, {"sha": "0c19f776bd18e0a9e72cf101e4a36120e1de57af", "filename": "src/test/ui/suggestions/pub-ident-fn-or-struct.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d1364a65c0e064ee12aea8d58aceb403b8200682/src%2Ftest%2Fui%2Fsuggestions%2Fpub-ident-fn-or-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d1364a65c0e064ee12aea8d58aceb403b8200682/src%2Ftest%2Fui%2Fsuggestions%2Fpub-ident-fn-or-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fpub-ident-fn-or-struct.stderr?ref=d1364a65c0e064ee12aea8d58aceb403b8200682", "patch": "@@ -0,0 +1,8 @@\n+error: missing `fn` or `struct` for method or struct definition\n+  --> $DIR/pub-ident-fn-or-struct.rs:11:4\n+   |\n+11 | pub S (foo) bar\n+   | ---^- help: if you meant to call a macro, write instead: `S!`\n+\n+error: aborting due to previous error\n+"}, {"sha": "1d64199642093bf868c65c3417013b5710a8c164", "filename": "src/test/ui/suggestions/pub-ident-fn.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d1364a65c0e064ee12aea8d58aceb403b8200682/src%2Ftest%2Fui%2Fsuggestions%2Fpub-ident-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1364a65c0e064ee12aea8d58aceb403b8200682/src%2Ftest%2Fui%2Fsuggestions%2Fpub-ident-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fpub-ident-fn.rs?ref=d1364a65c0e064ee12aea8d58aceb403b8200682", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub   foo(s: usize) -> bool { true }\n+//~^ ERROR missing `fn` for method definition\n+\n+fn main() {\n+    foo(2);\n+}"}, {"sha": "d36b9b127e0c1a0ac673d0f3ae345076d41008ee", "filename": "src/test/ui/suggestions/pub-ident-fn.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d1364a65c0e064ee12aea8d58aceb403b8200682/src%2Ftest%2Fui%2Fsuggestions%2Fpub-ident-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d1364a65c0e064ee12aea8d58aceb403b8200682/src%2Ftest%2Fui%2Fsuggestions%2Fpub-ident-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fpub-ident-fn.stderr?ref=d1364a65c0e064ee12aea8d58aceb403b8200682", "patch": "@@ -0,0 +1,12 @@\n+error: missing `fn` for method definition\n+  --> $DIR/pub-ident-fn.rs:11:4\n+   |\n+11 | pub   foo(s: usize) -> bool { true }\n+   |    ^^^\n+help: add `fn` here to parse `foo` as a public method\n+   |\n+11 | pub fn foo(s: usize) -> bool { true }\n+   |     ^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "d08d498f87a01b7d7c6a29af58e22d9d81fc17bb", "filename": "src/test/ui/suggestions/pub-ident-struct.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d1364a65c0e064ee12aea8d58aceb403b8200682/src%2Ftest%2Fui%2Fsuggestions%2Fpub-ident-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1364a65c0e064ee12aea8d58aceb403b8200682/src%2Ftest%2Fui%2Fsuggestions%2Fpub-ident-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fpub-ident-struct.rs?ref=d1364a65c0e064ee12aea8d58aceb403b8200682", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub S {\n+//~^ ERROR missing `struct` for struct definition\n+}\n+fn main() {}"}, {"sha": "36ef307272231802c9e02d35de46b342ebb5acab", "filename": "src/test/ui/suggestions/pub-ident-struct.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d1364a65c0e064ee12aea8d58aceb403b8200682/src%2Ftest%2Fui%2Fsuggestions%2Fpub-ident-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d1364a65c0e064ee12aea8d58aceb403b8200682/src%2Ftest%2Fui%2Fsuggestions%2Fpub-ident-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fpub-ident-struct.stderr?ref=d1364a65c0e064ee12aea8d58aceb403b8200682", "patch": "@@ -0,0 +1,12 @@\n+error: missing `struct` for struct definition\n+  --> $DIR/pub-ident-struct.rs:11:4\n+   |\n+11 | pub S {\n+   |    ^\n+help: add `struct` here to parse `S` as a public struct\n+   |\n+11 | pub struct S {\n+   |     ^^^^^^\n+\n+error: aborting due to previous error\n+"}]}