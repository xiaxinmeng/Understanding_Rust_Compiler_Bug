{"sha": "ac454e9af9389bb41a06ab620599771dcb2e59b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjNDU0ZTlhZjkzODliYjQxYTA2YWI2MjA1OTk3NzFkY2IyZTU5YjY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-30T00:06:55Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-30T02:36:57Z"}, "message": "syntax refactor `parse_self_param` (3)", "tree": {"sha": "8dac0426c290a3e9c873a8b41207b1e33f45df13", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8dac0426c290a3e9c873a8b41207b1e33f45df13"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac454e9af9389bb41a06ab620599771dcb2e59b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac454e9af9389bb41a06ab620599771dcb2e59b6", "html_url": "https://github.com/rust-lang/rust/commit/ac454e9af9389bb41a06ab620599771dcb2e59b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac454e9af9389bb41a06ab620599771dcb2e59b6/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f688f8aedffcd802012b355c182dafbdf5e819f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/f688f8aedffcd802012b355c182dafbdf5e819f5", "html_url": "https://github.com/rust-lang/rust/commit/f688f8aedffcd802012b355c182dafbdf5e819f5"}], "stats": {"total": 48, "additions": 20, "deletions": 28}, "files": [{"sha": "ae4f181a119400ff3e69b79a3cb04e583b537ec3", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 20, "deletions": 28, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/ac454e9af9389bb41a06ab620599771dcb2e59b6/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac454e9af9389bb41a06ab620599771dcb2e59b6/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=ac454e9af9389bb41a06ab620599771dcb2e59b6", "patch": "@@ -1276,6 +1276,18 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n+    /// Parse `self` or `self: TYPE`. We already know the current token is `self`.\n+    fn parse_self_possibly_typed(&mut self, m: Mutability) -> PResult<'a, (SelfKind, Ident, Span)> {\n+        let eself_ident = self.expect_self_ident();\n+        let eself_hi = self.prev_span;\n+        let eself = if self.eat(&token::Colon) {\n+            SelfKind::Explicit(self.parse_ty()?, m)\n+        } else {\n+            SelfKind::Value(m)\n+        };\n+        Ok((eself, eself_ident, eself_hi))\n+    }\n+\n     /// Returns the parsed optional self parameter and whether a self shortcut was used.\n     ///\n     /// See `parse_self_param_with_attrs` to collect attributes.\n@@ -1340,34 +1352,14 @@ impl<'a> Parser<'a> {\n                     return Ok(None);\n                 }, self.expect_self_ident(), self.prev_span)\n             }\n-            token::Ident(..) => {\n-                if self.is_isolated_self(0) {\n-                    // `self`\n-                    // `self: TYPE`\n-                    let eself_ident = self.expect_self_ident();\n-                    let eself_hi = self.prev_span;\n-                    (if self.eat(&token::Colon) {\n-                        let ty = self.parse_ty()?;\n-                        SelfKind::Explicit(ty, Mutability::Immutable)\n-                    } else {\n-                        SelfKind::Value(Mutability::Immutable)\n-                    }, eself_ident, eself_hi)\n-                } else if self.token.is_keyword(kw::Mut) &&\n-                          self.is_isolated_self(1) {\n-                    // `mut self`\n-                    // `mut self: TYPE`\n-                    self.bump();\n-                    let eself_ident = self.expect_self_ident();\n-                    let eself_hi = self.prev_span;\n-                    (if self.eat(&token::Colon) {\n-                        let ty = self.parse_ty()?;\n-                        SelfKind::Explicit(ty, Mutability::Mutable)\n-                    } else {\n-                        SelfKind::Value(Mutability::Mutable)\n-                    }, eself_ident, eself_hi)\n-                } else {\n-                    return Ok(None);\n-                }\n+            // `self` and `self: TYPE`\n+            token::Ident(..) if self.is_isolated_self(0) => {\n+                self.parse_self_possibly_typed(Mutability::Immutable)?\n+            }\n+            // `mut self` and `mut self: TYPE`\n+            token::Ident(..) if self.token.is_keyword(kw::Mut) && self.is_isolated_self(1) => {\n+                self.bump();\n+                self.parse_self_possibly_typed(Mutability::Mutable)?\n             }\n             _ => return Ok(None),\n         };"}]}