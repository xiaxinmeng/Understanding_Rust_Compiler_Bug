{"sha": "a16f60b1173fae1b971b41780288e2dbe005569d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExNmY2MGIxMTczZmFlMWI5NzFiNDE3ODAyODhlMmRiZTAwNTU2OWQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-12-08T18:21:35Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-12-08T18:47:45Z"}, "message": "Add a feature opt `opt_out_copy` that allows people to revert to the older\nbehavior temporarily. This feature will eventually transition to REJECTED.", "tree": {"sha": "54234f214f914bfae06e9e9a12bc705c029e25b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54234f214f914bfae06e9e9a12bc705c029e25b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a16f60b1173fae1b971b41780288e2dbe005569d", "comment_count": 4, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a16f60b1173fae1b971b41780288e2dbe005569d", "html_url": "https://github.com/rust-lang/rust/commit/a16f60b1173fae1b971b41780288e2dbe005569d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a16f60b1173fae1b971b41780288e2dbe005569d/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "url": "https://api.github.com/repos/rust-lang/rust/commits/096a28607fb80c91e6e2ca64d9ef44c4e550e96c", "html_url": "https://github.com/rust-lang/rust/commit/096a28607fb80c91e6e2ca64d9ef44c4e550e96c"}], "stats": {"total": 69, "additions": 66, "deletions": 3}, "files": [{"sha": "302834f3eaca350c6be3c8d81ce7f6a838d2c525", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a16f60b1173fae1b971b41780288e2dbe005569d/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a16f60b1173fae1b971b41780288e2dbe005569d/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=a16f60b1173fae1b971b41780288e2dbe005569d", "patch": "@@ -924,7 +924,14 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             Some(ty::BoundCopy) => {\n                 debug!(\"obligation self ty is {}\",\n                        obligation.self_ty().repr(self.tcx()));\n-                try!(self.assemble_candidates_from_impls(obligation, &mut candidates));\n+\n+                // If the user has asked for the older, compatibility\n+                // behavior, ignore user-defined impls here. This will\n+                // go away by the time 1.0 is released.\n+                if !self.tcx().sess.features.borrow().opt_out_copy {\n+                    try!(self.assemble_candidates_from_impls(obligation, &mut candidates));\n+                }\n+\n                 try!(self.assemble_builtin_bound_candidates(ty::BoundCopy,\n                                                             stack,\n                                                             &mut candidates));\n@@ -1533,8 +1540,12 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 }\n \n                 ty::BoundCopy => {\n-                    // This is an Opt-In Built-In Trait.\n-                    return Ok(ParameterBuiltin)\n+                    // This is an Opt-In Built-In Trait. So, unless\n+                    // the user is asking for the old behavior, we\n+                    // don't supply any form of builtin impl.\n+                    if !this.tcx().sess.features.borrow().opt_out_copy {\n+                        return Ok(ParameterBuiltin)\n+                    }\n                 }\n \n                 ty::BoundSync => {"}, {"sha": "b8f60e77601cfb63b51d53d40073977c5e17877b", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a16f60b1173fae1b971b41780288e2dbe005569d/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a16f60b1173fae1b971b41780288e2dbe005569d/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=a16f60b1173fae1b971b41780288e2dbe005569d", "patch": "@@ -75,6 +75,9 @@ static KNOWN_FEATURES: &'static [(&'static str, Status)] = &[\n     // to bootstrap fix for #5723.\n     (\"issue_5723_bootstrap\", Accepted),\n \n+    // A way to temporary opt out of opt in copy. This will *never* be accepted.\n+    (\"opt_out_copy\", Active),\n+\n     // These are used to test this portion of the compiler, they don't actually\n     // mean anything\n     (\"test_accepted_feature\", Accepted),\n@@ -101,6 +104,7 @@ pub struct Features {\n     pub import_shadowing: bool,\n     pub visible_private_types: bool,\n     pub quote: bool,\n+    pub opt_out_copy: bool,\n }\n \n impl Copy for Features {}\n@@ -114,6 +118,7 @@ impl Features {\n             import_shadowing: false,\n             visible_private_types: false,\n             quote: false,\n+            opt_out_copy: false,\n         }\n     }\n }\n@@ -441,6 +446,7 @@ pub fn check_crate(span_handler: &SpanHandler, krate: &ast::Crate) -> (Features,\n         import_shadowing: cx.has_feature(\"import_shadowing\"),\n         visible_private_types: cx.has_feature(\"visible_private_types\"),\n         quote: cx.has_feature(\"quote\"),\n+        opt_out_copy: cx.has_feature(\"opt_out_copy\"),\n     },\n     unknown_features)\n }"}, {"sha": "8c7072cfdf54532ed18cf3929e6897fc8c098596", "filename": "src/test/run-pass/opt-out-copy.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/a16f60b1173fae1b971b41780288e2dbe005569d/src%2Ftest%2Frun-pass%2Fopt-out-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a16f60b1173fae1b971b41780288e2dbe005569d/src%2Ftest%2Frun-pass%2Fopt-out-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fopt-out-copy.rs?ref=a16f60b1173fae1b971b41780288e2dbe005569d", "patch": "@@ -0,0 +1,46 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(opt_out_copy)]\n+\n+// Test the opt-out-copy feature guard. This is the same as the\n+// \"opt-in-copy.rs\" test from compile-fail, except that it is using\n+// the feature guard, and hence the structureds in this file are\n+// implicitly copyable, and hence we get no errors. This test can be\n+// safely removed once the opt-out-copy \"feature\" is rejected.\n+\n+struct CantCopyThis;\n+\n+struct IWantToCopyThis {\n+    but_i_cant: CantCopyThis,\n+}\n+\n+impl Copy for IWantToCopyThis {}\n+\n+enum CantCopyThisEither {\n+    A,\n+    B,\n+}\n+\n+enum IWantToCopyThisToo {\n+    ButICant(CantCopyThisEither),\n+}\n+\n+impl Copy for IWantToCopyThisToo {}\n+\n+fn is_copy<T:Copy>() { }\n+\n+fn main() {\n+    is_copy::<CantCopyThis>();\n+    is_copy::<CantCopyThisEither>();\n+    is_copy::<IWantToCopyThis>();\n+    is_copy::<IWantToCopyThisToo>();\n+}\n+"}]}