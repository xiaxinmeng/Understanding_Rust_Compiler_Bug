{"sha": "a37b4842220a647902a25fcfe68a7d52cda056ad", "node_id": "C_kwDOAAsO6NoAKGEzN2I0ODQyMjIwYTY0NzkwMmEyNWZjZmU2OGE3ZDUyY2RhMDU2YWQ", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2023-01-13T18:45:26Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2023-01-13T21:42:11Z"}, "message": "Allow fmt::Arguments::as_str() to return more Some(_).", "tree": {"sha": "886fad217eca78158b9818c84d86e6ef9833c177", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/886fad217eca78158b9818c84d86e6ef9833c177"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a37b4842220a647902a25fcfe68a7d52cda056ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a37b4842220a647902a25fcfe68a7d52cda056ad", "html_url": "https://github.com/rust-lang/rust/commit/a37b4842220a647902a25fcfe68a7d52cda056ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a37b4842220a647902a25fcfe68a7d52cda056ad/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "222d1ff68d5bfe1dc2d7f3f0c42811fe12964af9", "url": "https://api.github.com/repos/rust-lang/rust/commits/222d1ff68d5bfe1dc2d7f3f0c42811fe12964af9", "html_url": "https://github.com/rust-lang/rust/commit/222d1ff68d5bfe1dc2d7f3f0c42811fe12964af9"}], "stats": {"total": 23, "additions": 20, "deletions": 3}, "files": [{"sha": "2dacdfd7a0237385ae943cc04eace605dd14d1a9", "filename": "library/core/src/fmt/mod.rs", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a37b4842220a647902a25fcfe68a7d52cda056ad/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a37b4842220a647902a25fcfe68a7d52cda056ad/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs?ref=a37b4842220a647902a25fcfe68a7d52cda056ad", "patch": "@@ -484,9 +484,26 @@ pub struct Arguments<'a> {\n }\n \n impl<'a> Arguments<'a> {\n-    /// Get the formatted string, if it has no arguments to be formatted.\n+    /// Get the formatted string, if it has no arguments to be formatted at runtime.\n     ///\n-    /// This can be used to avoid allocations in the most trivial case.\n+    /// This can be used to avoid allocations in some cases.\n+    ///\n+    /// # Guarantees\n+    ///\n+    /// For `format_args!(\"just a literal\")`, this function is guaranteed to\n+    /// return `Some(\"just a literal\")`.\n+    ///\n+    /// For most cases with placeholders, this function will return `None`.\n+    ///\n+    /// However, the compiler may perform optimizations that can cause this\n+    /// function to return `Some(_)` even if the format string contains\n+    /// placeholders. For example, `format_args!(\"Hello, {}!\", \"world\")` may be\n+    /// optimized to `format_args!(\"Hello, world!\")`, such that `as_str()`\n+    /// returns `Some(\"Hello, world!\")`.\n+    ///\n+    /// The behavior for anything but the trivial case (without placeholders)\n+    /// is not guaranteed, and should not be relied upon for anything other\n+    /// than optimization.\n     ///\n     /// # Examples\n     ///\n@@ -507,7 +524,7 @@ impl<'a> Arguments<'a> {\n     /// ```rust\n     /// assert_eq!(format_args!(\"hello\").as_str(), Some(\"hello\"));\n     /// assert_eq!(format_args!(\"\").as_str(), Some(\"\"));\n-    /// assert_eq!(format_args!(\"{}\", 1).as_str(), None);\n+    /// assert_eq!(format_args!(\"{:?}\", std::env::current_dir()).as_str(), None);\n     /// ```\n     #[stable(feature = \"fmt_as_str\", since = \"1.52.0\")]\n     #[rustc_const_unstable(feature = \"const_arguments_as_str\", issue = \"103900\")]"}]}