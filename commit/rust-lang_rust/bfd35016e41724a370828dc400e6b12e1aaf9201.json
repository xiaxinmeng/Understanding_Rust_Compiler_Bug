{"sha": "bfd35016e41724a370828dc400e6b12e1aaf9201", "node_id": "C_kwDOAAsO6NoAKGJmZDM1MDE2ZTQxNzI0YTM3MDgyOGRjNDAwZTZiMTJlMWFhZjkyMDE", "commit": {"author": {"name": "Ali MJ Al-Nasrawy", "email": "alimjalnasrawy@gmail.com", "date": "2023-03-05T08:54:57Z"}, "committer": {"name": "Ali MJ Al-Nasrawy", "email": "alimjalnasrawy@gmail.com", "date": "2023-03-05T09:49:01Z"}, "message": "fix the new unsoundness", "tree": {"sha": "50d2f0ddecb413639599c17626b9b334ca02e6da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50d2f0ddecb413639599c17626b9b334ca02e6da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bfd35016e41724a370828dc400e6b12e1aaf9201", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bfd35016e41724a370828dc400e6b12e1aaf9201", "html_url": "https://github.com/rust-lang/rust/commit/bfd35016e41724a370828dc400e6b12e1aaf9201", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bfd35016e41724a370828dc400e6b12e1aaf9201/comments", "author": {"login": "aliemjay", "id": 28497461, "node_id": "MDQ6VXNlcjI4NDk3NDYx", "avatar_url": "https://avatars.githubusercontent.com/u/28497461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aliemjay", "html_url": "https://github.com/aliemjay", "followers_url": "https://api.github.com/users/aliemjay/followers", "following_url": "https://api.github.com/users/aliemjay/following{/other_user}", "gists_url": "https://api.github.com/users/aliemjay/gists{/gist_id}", "starred_url": "https://api.github.com/users/aliemjay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aliemjay/subscriptions", "organizations_url": "https://api.github.com/users/aliemjay/orgs", "repos_url": "https://api.github.com/users/aliemjay/repos", "events_url": "https://api.github.com/users/aliemjay/events{/privacy}", "received_events_url": "https://api.github.com/users/aliemjay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aliemjay", "id": 28497461, "node_id": "MDQ6VXNlcjI4NDk3NDYx", "avatar_url": "https://avatars.githubusercontent.com/u/28497461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aliemjay", "html_url": "https://github.com/aliemjay", "followers_url": "https://api.github.com/users/aliemjay/followers", "following_url": "https://api.github.com/users/aliemjay/following{/other_user}", "gists_url": "https://api.github.com/users/aliemjay/gists{/gist_id}", "starred_url": "https://api.github.com/users/aliemjay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aliemjay/subscriptions", "organizations_url": "https://api.github.com/users/aliemjay/orgs", "repos_url": "https://api.github.com/users/aliemjay/repos", "events_url": "https://api.github.com/users/aliemjay/events{/privacy}", "received_events_url": "https://api.github.com/users/aliemjay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eea560494c121bf93f725eb174fc03d34b0e96f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/eea560494c121bf93f725eb174fc03d34b0e96f1", "html_url": "https://github.com/rust-lang/rust/commit/eea560494c121bf93f725eb174fc03d34b0e96f1"}], "stats": {"total": 31, "additions": 26, "deletions": 5}, "files": [{"sha": "022f435b9cb6d9212f324f3b7dd42aa2ab9a011a", "filename": "compiler/rustc_infer/src/infer/region_constraints/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bfd35016e41724a370828dc400e6b12e1aaf9201/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfd35016e41724a370828dc400e6b12e1aaf9201/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs?ref=bfd35016e41724a370828dc400e6b12e1aaf9201", "patch": "@@ -642,7 +642,14 @@ impl<'tcx> RegionConstraintCollector<'_, 'tcx> {\n     ) -> ty::Region<'tcx> {\n         let mut ut = self.unification_table_mut(); // FIXME(rust-lang/ena#42): unnecessary mut\n         let root_vid = ut.find(vid).vid;\n-        ut.probe_value(root_vid).0.unwrap_or_else(|| tcx.mk_re_var(root_vid))\n+        let resolved = ut.probe_value(root_vid).0.unwrap_or_else(|| tcx.mk_re_var(root_vid));\n+\n+        // Don't resolve a variable to a region that it cannot name.\n+        if self.var_universe(vid).can_name(self.universe(resolved)) {\n+            resolved\n+        } else {\n+            tcx.mk_re_var(vid)\n+        }\n     }\n \n     fn combine_map(&mut self, t: CombineMapType) -> &mut CombineMap<'tcx> {"}, {"sha": "9b9e4496a870dc926c88791b9e4aaebc4e54d623", "filename": "tests/ui/higher-rank-trait-bounds/hrtb-exists-forall-trait-invariant.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bfd35016e41724a370828dc400e6b12e1aaf9201/tests%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-exists-forall-trait-invariant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfd35016e41724a370828dc400e6b12e1aaf9201/tests%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-exists-forall-trait-invariant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-exists-forall-trait-invariant.rs?ref=bfd35016e41724a370828dc400e6b12e1aaf9201", "patch": "@@ -2,9 +2,6 @@\n //\n // In particular, we test this pattern in trait solving, where it is not connected\n // to any part of the source code.\n-//\n-// check-pass\n-// Oops!\n \n use std::cell::Cell;\n \n@@ -28,5 +25,5 @@ fn main() {\n     //     yielding `fn(&!b u32)`, in a fresh universe U1\n     //   - So we get `?a = !b` but the universe U0 assigned to `?a` cannot name `!b`.\n \n-    foo::<()>();\n+    foo::<()>(); //~ ERROR implementation of `Trait` is not general enough\n }"}, {"sha": "cb2ce8a4116aa887b5621130f33e9f5e1bbd391d", "filename": "tests/ui/higher-rank-trait-bounds/hrtb-exists-forall-trait-invariant.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bfd35016e41724a370828dc400e6b12e1aaf9201/tests%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-exists-forall-trait-invariant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bfd35016e41724a370828dc400e6b12e1aaf9201/tests%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-exists-forall-trait-invariant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-exists-forall-trait-invariant.stderr?ref=bfd35016e41724a370828dc400e6b12e1aaf9201", "patch": "@@ -0,0 +1,11 @@\n+error: implementation of `Trait` is not general enough\n+  --> $DIR/hrtb-exists-forall-trait-invariant.rs:28:5\n+   |\n+LL |     foo::<()>();\n+   |     ^^^^^^^^^^^ implementation of `Trait` is not general enough\n+   |\n+   = note: `()` must implement `Trait<for<'b> fn(Cell<&'b u32>)>`\n+   = note: ...but it actually implements `Trait<fn(Cell<&'0 u32>)>`, for some specific lifetime `'0`\n+\n+error: aborting due to previous error\n+"}, {"sha": "31e11e12835166a4aca0c219a9cfd58ecc0f3b0b", "filename": "tests/ui/higher-rank-trait-bounds/hrtb-just-for-static.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bfd35016e41724a370828dc400e6b12e1aaf9201/tests%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-just-for-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bfd35016e41724a370828dc400e6b12e1aaf9201/tests%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-just-for-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-just-for-static.stderr?ref=bfd35016e41724a370828dc400e6b12e1aaf9201", "patch": "@@ -14,6 +14,12 @@ LL | fn give_some<'a>() {\n    |              -- lifetime `'a` defined here\n LL |     want_hrtb::<&'a u32>()\n    |     ^^^^^^^^^^^^^^^^^^^^ requires that `'a` must outlive `'static`\n+   |\n+note: due to current limitations in the borrow checker, this implies a `'static` lifetime\n+  --> $DIR/hrtb-just-for-static.rs:9:15\n+   |\n+LL |     where T : for<'a> Foo<&'a isize>\n+   |               ^^^^^^^^^^^^^^^^^^^^^^\n \n error: implementation of `Foo` is not general enough\n   --> $DIR/hrtb-just-for-static.rs:30:5"}]}