{"sha": "01f42d240570fd933fb6407a7b010dbab53563ff", "node_id": "C_kwDOAAsO6NoAKDAxZjQyZDI0MDU3MGZkOTMzZmI2NDA3YTdiMDEwZGJhYjUzNTYzZmY", "commit": {"author": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2023-05-21T12:25:01Z"}, "committer": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2023-05-22T14:13:41Z"}, "message": "fix: introduce new type var when expectation for ref pat is not ref", "tree": {"sha": "5100a06e62806936e69bdb36034122852211de51", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5100a06e62806936e69bdb36034122852211de51"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01f42d240570fd933fb6407a7b010dbab53563ff", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEkSbsQIURluxz4rzf4laYqTBYYXEFAmRreOwACgkQ4laYqTBY\nYXF5ohAAtxOoEvHrVqWE6dre1/jgaL4EP87IaTKZN6wxNNeZrwB8nC5gVgXC5mZM\nCFAxKX/jo2GUUCvPYpzaXRR8uT1PoBCgtFehJ7beZrqKjioxmPJyZPB+rEZr1mKq\n+Zxg5fLg7fWSpp1FcpXF3eAah/++fbidP4z2cxbCCtsidKwYt6koj08SuH8g7jdf\nivmo402Al56tsmgjL1lW0dayXWElGvKCrWwRHpCFE8ZhNZPtaiedtJxHnym2MbVy\nnC/ll5jxUNXfX8PRuh9+oZYSqx1M3qDQMzagLrwAE7vu8UC+SfIbL70ET2f2yBKf\nuWnqMXyJ5BApO1utt/3tSkav6YSG7msavIru0rODZ31biBMm6oxCZ6CAacZvNDQR\nQEoqwLF6br8PUA+JL6o2UfNxqtGNnFwiAeRWLG/69NOkTUalHL1z3Bd6w3yOb0qw\nondE1drlGsnrcdB9wxbPM8aDAcnNWzFJ/GJur9oWd4AQ3vbkGo5k8uIyBiWCbNu6\nXFgdT2dM7Ywwk3DKp5aCb1TTkAuv6IpYIQTa5hBbXlsk34qGYZHt+zYs35IFo0Vd\neAqDao5/yw5VDV9kZDlFXq09URv+ar/CC0bMQCLVL4RI7FwzRLL0TwHcO0bZIdHL\ngyWdC+Zc3Flel7P3e1SlQL4l9vtiPIMMVAlnaZW0Pr+pBazuO5w=\n=hnmq\n-----END PGP SIGNATURE-----", "payload": "tree 5100a06e62806936e69bdb36034122852211de51\nparent a04d8456be1d289c814846178cc1ff63b4fc297b\nauthor Ryo Yoshida <low.ryoshida@gmail.com> 1684671901 +0900\ncommitter Ryo Yoshida <low.ryoshida@gmail.com> 1684764821 +0900\n\nfix: introduce new type var when expectation for ref pat is not ref\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01f42d240570fd933fb6407a7b010dbab53563ff", "html_url": "https://github.com/rust-lang/rust/commit/01f42d240570fd933fb6407a7b010dbab53563ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01f42d240570fd933fb6407a7b010dbab53563ff/comments", "author": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a04d8456be1d289c814846178cc1ff63b4fc297b", "url": "https://api.github.com/repos/rust-lang/rust/commits/a04d8456be1d289c814846178cc1ff63b4fc297b", "html_url": "https://github.com/rust-lang/rust/commit/a04d8456be1d289c814846178cc1ff63b4fc297b"}], "stats": {"total": 30, "additions": 26, "deletions": 4}, "files": [{"sha": "0c2b179a10d6993a17b87a54f68902c8a55cfbb0", "filename": "crates/hir-ty/src/infer/pat.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/01f42d240570fd933fb6407a7b010dbab53563ff/crates%2Fhir-ty%2Fsrc%2Finfer%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01f42d240570fd933fb6407a7b010dbab53563ff/crates%2Fhir-ty%2Fsrc%2Finfer%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer%2Fpat.rs?ref=01f42d240570fd933fb6407a7b010dbab53563ff", "patch": "@@ -313,16 +313,23 @@ impl<'a> InferenceContext<'a> {\n \n     fn infer_ref_pat(\n         &mut self,\n-        pat: PatId,\n+        inner_pat: PatId,\n         mutability: Mutability,\n         expected: &Ty,\n         default_bm: BindingMode,\n     ) -> Ty {\n         let expectation = match expected.as_reference() {\n             Some((inner_ty, _lifetime, _exp_mut)) => inner_ty.clone(),\n-            _ => self.result.standard_types.unknown.clone(),\n+            None => {\n+                let inner_ty = self.table.new_type_var();\n+                let ref_ty =\n+                    TyKind::Ref(mutability, static_lifetime(), inner_ty.clone()).intern(Interner);\n+                // Unification failure will be reported by the caller.\n+                self.unify(&ref_ty, expected);\n+                inner_ty\n+            }\n         };\n-        let subty = self.infer_pat(pat, &expectation, default_bm);\n+        let subty = self.infer_pat(inner_pat, &expectation, default_bm);\n         TyKind::Ref(mutability, static_lifetime(), subty).intern(Interner)\n     }\n "}, {"sha": "b73f0d72a3f911d5630f7951f17b81392b6dfdcd", "filename": "crates/hir-ty/src/tests/patterns.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/01f42d240570fd933fb6407a7b010dbab53563ff/crates%2Fhir-ty%2Fsrc%2Ftests%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01f42d240570fd933fb6407a7b010dbab53563ff/crates%2Fhir-ty%2Fsrc%2Ftests%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests%2Fpatterns.rs?ref=01f42d240570fd933fb6407a7b010dbab53563ff", "patch": "@@ -1,6 +1,6 @@\n use expect_test::expect;\n \n-use super::{check, check_infer, check_infer_with_mismatches, check_types};\n+use super::{check, check_infer, check_infer_with_mismatches, check_no_mismatches, check_types};\n \n #[test]\n fn infer_pattern() {\n@@ -240,6 +240,21 @@ fn infer_pattern_match_ergonomics_ref() {\n     );\n }\n \n+#[test]\n+fn ref_pat_with_inference_variable() {\n+    check_no_mismatches(\n+        r#\"\n+enum E { A }\n+fn test() {\n+    let f = |e| match e {\n+        &E::A => {}\n+    };\n+    f(&E::A);\n+}\n+\"#,\n+    );\n+}\n+\n #[test]\n fn infer_pattern_match_slice() {\n     check_infer("}]}