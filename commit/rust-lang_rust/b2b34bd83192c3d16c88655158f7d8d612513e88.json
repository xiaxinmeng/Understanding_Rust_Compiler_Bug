{"sha": "b2b34bd83192c3d16c88655158f7d8d612513e88", "node_id": "C_kwDOAAsO6NoAKGIyYjM0YmQ4MzE5MmMzZDE2Yzg4NjU1MTU4ZjdkOGQ2MTI1MTNlODg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-06T17:56:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-06T17:56:23Z"}, "message": "Auto merge of #112344 - matthiaskrgr:rollup-tswr83e, r=matthiaskrgr\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #111058 (Correct fortanix LVI test print function)\n - #111369 (Added custom risc32-imac for esp-espidf target)\n - #111962 (Make GDB Python Pretty Printers loadable after spawning GDB, avoiding required `rust-gdb`)\n - #112019 (Don't suggest changing `&self` and `&mut self` in function signature to be mutable when taking `&mut self` in closure)\n - #112199 (Fix suggestion for matching struct with `..` on both ends)\n - #112220 (Cleanup some `EarlyBinder::skip_binder()` -> `EarlyBinder::subst_identity()`)\n - #112325 (diagnostics: do not suggest type name tweaks on type-inferred closure args)\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "de62dc49dde2c871c1bfdf0cb83df727a5c2b4c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de62dc49dde2c871c1bfdf0cb83df727a5c2b4c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b2b34bd83192c3d16c88655158f7d8d612513e88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b2b34bd83192c3d16c88655158f7d8d612513e88", "html_url": "https://github.com/rust-lang/rust/commit/b2b34bd83192c3d16c88655158f7d8d612513e88", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b2b34bd83192c3d16c88655158f7d8d612513e88/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3572d7451d1062e8bccf310af6bbf6255091d296", "url": "https://api.github.com/repos/rust-lang/rust/commits/3572d7451d1062e8bccf310af6bbf6255091d296", "html_url": "https://github.com/rust-lang/rust/commit/3572d7451d1062e8bccf310af6bbf6255091d296"}, {"sha": "38c92cca65041f50c2b62262fa8bff13b034f000", "url": "https://api.github.com/repos/rust-lang/rust/commits/38c92cca65041f50c2b62262fa8bff13b034f000", "html_url": "https://github.com/rust-lang/rust/commit/38c92cca65041f50c2b62262fa8bff13b034f000"}], "stats": {"total": 361, "additions": 320, "deletions": 41}, "files": [{"sha": "34d466db2b4090dc4868ad797a6e5f53d7e027cd", "filename": "compiler/rustc_borrowck/src/diagnostics/mutability_errors.rs", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b2b34bd83192c3d16c88655158f7d8d612513e88/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b34bd83192c3d16c88655158f7d8d612513e88/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs?ref=b2b34bd83192c3d16c88655158f7d8d612513e88", "patch": "@@ -416,12 +416,28 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                         _,\n                     ) = pat.kind\n                 {\n-                    err.span_suggestion(\n-                        upvar_ident.span,\n-                        \"consider changing this to be mutable\",\n-                        format!(\"mut {}\", upvar_ident.name),\n-                        Applicability::MachineApplicable,\n-                    );\n+                    if upvar_ident.name == kw::SelfLower {\n+                        for (_, node) in self.infcx.tcx.hir().parent_iter(upvar_hir_id) {\n+                            if let Some(fn_decl) = node.fn_decl() {\n+                                if !matches!(fn_decl.implicit_self, hir::ImplicitSelfKind::ImmRef | hir::ImplicitSelfKind::MutRef) {\n+                                    err.span_suggestion(\n+                                        upvar_ident.span,\n+                                        \"consider changing this to be mutable\",\n+                                        format!(\"mut {}\", upvar_ident.name),\n+                                        Applicability::MachineApplicable,\n+                                    );\n+                                    break;\n+                                }\n+                            }\n+                        }\n+                    } else {\n+                        err.span_suggestion(\n+                            upvar_ident.span,\n+                            \"consider changing this to be mutable\",\n+                            format!(\"mut {}\", upvar_ident.name),\n+                            Applicability::MachineApplicable,\n+                        );\n+                    }\n                 }\n \n                 let tcx = self.infcx.tcx;"}, {"sha": "69ccbf0b58ff38aa066baf248e1680efe8591d24", "filename": "compiler/rustc_hir_typeck/src/check.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b2b34bd83192c3d16c88655158f7d8d612513e88/compiler%2Frustc_hir_typeck%2Fsrc%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b34bd83192c3d16c88655158f7d8d612513e88/compiler%2Frustc_hir_typeck%2Fsrc%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcheck.rs?ref=b2b34bd83192c3d16c88655158f7d8d612513e88", "patch": "@@ -96,7 +96,19 @@ pub(super) fn check_fn<'a, 'tcx>(\n         // for simple cases like `fn foo(x: Trait)`,\n         // where we would error once on the parameter as a whole, and once on the binding `x`.\n         if param.pat.simple_ident().is_none() && !params_can_be_unsized {\n-            fcx.require_type_is_sized(param_ty, param.pat.span, traits::SizedArgumentType(ty_span));\n+            fcx.require_type_is_sized(\n+                param_ty,\n+                param.pat.span,\n+                // ty_span == binding_span iff this is a closure parameter with no type ascription,\n+                // or if it's an implicit `self` parameter\n+                traits::SizedArgumentType(\n+                    if ty_span == Some(param.span) && tcx.is_closure(fn_def_id.into()) {\n+                        None\n+                    } else {\n+                        ty_span\n+                    },\n+                ),\n+            );\n         }\n \n         fcx.write_ty(param.hir_id, param_ty);"}, {"sha": "d9b9b34ba583be3049b120b7378e604e0157ba5c", "filename": "compiler/rustc_hir_typeck/src/gather_locals.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b2b34bd83192c3d16c88655158f7d8d612513e88/compiler%2Frustc_hir_typeck%2Fsrc%2Fgather_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b34bd83192c3d16c88655158f7d8d612513e88/compiler%2Frustc_hir_typeck%2Fsrc%2Fgather_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fgather_locals.rs?ref=b2b34bd83192c3d16c88655158f7d8d612513e88", "patch": "@@ -129,7 +129,17 @@ impl<'a, 'tcx> Visitor<'tcx> for GatherLocalsVisitor<'a, 'tcx> {\n                     self.fcx.require_type_is_sized(\n                         var_ty,\n                         p.span,\n-                        traits::SizedArgumentType(Some(ty_span)),\n+                        // ty_span == ident.span iff this is a closure parameter with no type\n+                        // ascription, or if it's an implicit `self` parameter\n+                        traits::SizedArgumentType(\n+                            if ty_span == ident.span\n+                                && self.fcx.tcx.is_closure(self.fcx.body_id.into())\n+                            {\n+                                None\n+                            } else {\n+                                Some(ty_span)\n+                            },\n+                        ),\n                     );\n                 }\n             } else {"}, {"sha": "c0d591430f7fc4efff2c6b22aa301e9157ac792b", "filename": "compiler/rustc_middle/src/ty/instance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2b34bd83192c3d16c88655158f7d8d612513e88/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b34bd83192c3d16c88655158f7d8d612513e88/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs?ref=b2b34bd83192c3d16c88655158f7d8d612513e88", "patch": "@@ -586,7 +586,7 @@ impl<'tcx> Instance<'tcx> {\n         if let Some(substs) = self.substs_for_mir_body() {\n             v.subst(tcx, substs)\n         } else {\n-            v.skip_binder()\n+            v.subst_identity()\n         }\n     }\n "}, {"sha": "5f12f1937c06c120895e5b59efd21575d4514187", "filename": "compiler/rustc_mir_transform/src/shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2b34bd83192c3d16c88655158f7d8d612513e88/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b34bd83192c3d16c88655158f7d8d612513e88/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs?ref=b2b34bd83192c3d16c88655158f7d8d612513e88", "patch": "@@ -647,7 +647,7 @@ fn build_call_shim<'tcx>(\n     let mut sig = if let Some(sig_substs) = sig_substs {\n         sig.subst(tcx, &sig_substs)\n     } else {\n-        sig.skip_binder()\n+        sig.subst_identity()\n     };\n \n     if let CallKind::Indirect(fnty) = call_kind {"}, {"sha": "fdf365178474d179e78ea91ec04668f1759f0a5c", "filename": "compiler/rustc_parse/src/parser/pat.rs", "status": "modified", "additions": 45, "deletions": 12, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/b2b34bd83192c3d16c88655158f7d8d612513e88/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b34bd83192c3d16c88655158f7d8d612513e88/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs?ref=b2b34bd83192c3d16c88655158f7d8d612513e88", "patch": "@@ -938,7 +938,8 @@ impl<'a> Parser<'a> {\n         let mut etc = false;\n         let mut ate_comma = true;\n         let mut delayed_err: Option<DiagnosticBuilder<'a, ErrorGuaranteed>> = None;\n-        let mut etc_span = None;\n+        let mut first_etc_and_maybe_comma_span = None;\n+        let mut last_non_comma_dotdot_span = None;\n \n         while self.token != token::CloseDelim(Delimiter::Brace) {\n             let attrs = match self.parse_outer_attributes() {\n@@ -969,12 +970,27 @@ impl<'a> Parser<'a> {\n             {\n                 etc = true;\n                 let mut etc_sp = self.token.span;\n+                if first_etc_and_maybe_comma_span.is_none() {\n+                    if let Some(comma_tok) = self\n+                        .look_ahead(1, |t| if *t == token::Comma { Some(t.clone()) } else { None })\n+                    {\n+                        let nw_span = self\n+                            .sess\n+                            .source_map()\n+                            .span_extend_to_line(comma_tok.span)\n+                            .trim_start(comma_tok.span.shrink_to_lo())\n+                            .map(|s| self.sess.source_map().span_until_non_whitespace(s));\n+                        first_etc_and_maybe_comma_span = nw_span.map(|s| etc_sp.to(s));\n+                    } else {\n+                        first_etc_and_maybe_comma_span =\n+                            Some(self.sess.source_map().span_until_non_whitespace(etc_sp));\n+                    }\n+                }\n \n                 self.recover_bad_dot_dot();\n                 self.bump(); // `..` || `...` || `_`\n \n                 if self.token == token::CloseDelim(Delimiter::Brace) {\n-                    etc_span = Some(etc_sp);\n                     break;\n                 }\n                 let token_str = super::token_descr(&self.token);\n@@ -996,7 +1012,6 @@ impl<'a> Parser<'a> {\n                     ate_comma = true;\n                 }\n \n-                etc_span = Some(etc_sp.until(self.token.span));\n                 if self.token == token::CloseDelim(Delimiter::Brace) {\n                     // If the struct looks otherwise well formed, recover and continue.\n                     if let Some(sp) = comma_sp {\n@@ -1040,6 +1055,9 @@ impl<'a> Parser<'a> {\n                         }\n                     }?;\n                     ate_comma = this.eat(&token::Comma);\n+\n+                    last_non_comma_dotdot_span = Some(this.prev_token.span);\n+\n                     // We just ate a comma, so there's no need to use\n                     // `TrailingToken::Comma`\n                     Ok((field, TrailingToken::None))\n@@ -1049,15 +1067,30 @@ impl<'a> Parser<'a> {\n         }\n \n         if let Some(mut err) = delayed_err {\n-            if let Some(etc_span) = etc_span {\n-                err.multipart_suggestion(\n-                    \"move the `..` to the end of the field list\",\n-                    vec![\n-                        (etc_span, String::new()),\n-                        (self.token.span, format!(\"{}.. }}\", if ate_comma { \"\" } else { \", \" })),\n-                    ],\n-                    Applicability::MachineApplicable,\n-                );\n+            if let Some(first_etc_span) = first_etc_and_maybe_comma_span {\n+                if self.prev_token == token::DotDot {\n+                    // We have `.., x, ..`.\n+                    err.multipart_suggestion(\n+                        \"remove the starting `..`\",\n+                        vec![(first_etc_span, String::new())],\n+                        Applicability::MachineApplicable,\n+                    );\n+                } else {\n+                    if let Some(last_non_comma_dotdot_span) = last_non_comma_dotdot_span {\n+                        // We have `.., x`.\n+                        err.multipart_suggestion(\n+                            \"move the `..` to the end of the field list\",\n+                            vec![\n+                                (first_etc_span, String::new()),\n+                                (\n+                                    self.token.span.to(last_non_comma_dotdot_span.shrink_to_hi()),\n+                                    format!(\"{} .. }}\", if ate_comma { \"\" } else { \",\" }),\n+                                ),\n+                            ],\n+                            Applicability::MachineApplicable,\n+                        );\n+                    }\n+                }\n             }\n             err.emit();\n         }"}, {"sha": "99e4ba24afb1c166c75bacf113fc40fb46f3fcc3", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2b34bd83192c3d16c88655158f7d8d612513e88/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b34bd83192c3d16c88655158f7d8d612513e88/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=b2b34bd83192c3d16c88655158f7d8d612513e88", "patch": "@@ -1284,6 +1284,7 @@ supported_targets! {\n     (\"riscv32im-unknown-none-elf\", riscv32im_unknown_none_elf),\n     (\"riscv32imc-unknown-none-elf\", riscv32imc_unknown_none_elf),\n     (\"riscv32imc-esp-espidf\", riscv32imc_esp_espidf),\n+    (\"riscv32imac-esp-espidf\", riscv32imac_esp_espidf),\n     (\"riscv32imac-unknown-none-elf\", riscv32imac_unknown_none_elf),\n     (\"riscv32imac-unknown-xous-elf\", riscv32imac_unknown_xous_elf),\n     (\"riscv32gc-unknown-linux-gnu\", riscv32gc_unknown_linux_gnu),"}, {"sha": "0795065409ad9d135d4b4a22d8a3bc0c5bf43eb5", "filename": "compiler/rustc_target/src/spec/riscv32imac_esp_espidf.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/b2b34bd83192c3d16c88655158f7d8d612513e88/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32imac_esp_espidf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b34bd83192c3d16c88655158f7d8d612513e88/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32imac_esp_espidf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv32imac_esp_espidf.rs?ref=b2b34bd83192c3d16c88655158f7d8d612513e88", "patch": "@@ -0,0 +1,31 @@\n+use crate::spec::{cvs, PanicStrategy, RelocModel, Target, TargetOptions};\n+\n+pub fn target() -> Target {\n+    Target {\n+        data_layout: \"e-m:e-p:32:32-i64:64-n32-S128\".into(),\n+        llvm_target: \"riscv32\".into(),\n+        pointer_width: 32,\n+        arch: \"riscv32\".into(),\n+\n+        options: TargetOptions {\n+            families: cvs![\"unix\"],\n+            os: \"espidf\".into(),\n+            env: \"newlib\".into(),\n+            vendor: \"espressif\".into(),\n+            linker: Some(\"riscv32-esp-elf-gcc\".into()),\n+            cpu: \"generic-rv32\".into(),\n+\n+            // As RiscV32IMAC architecture does natively support atomics,\n+            // automatically enable the support for the Rust STD library.\n+            max_atomic_width: Some(64),\n+            atomic_cas: true,\n+\n+            features: \"+m,+a,+c\".into(),\n+            panic_strategy: PanicStrategy::Abort,\n+            relocation_model: RelocModel::Static,\n+            emit_debug_gdb_scripts: false,\n+            eh_frame_header: false,\n+            ..Default::default()\n+        },\n+    }\n+}"}, {"sha": "e73d917a8aed163dee1d9f89a6080ac34a5ab311", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2b34bd83192c3d16c88655158f7d8d612513e88/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b34bd83192c3d16c88655158f7d8d612513e88/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=b2b34bd83192c3d16c88655158f7d8d612513e88", "patch": "@@ -2807,8 +2807,8 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     err.help(\"unsized locals are gated as an unstable feature\");\n                 }\n             }\n-            ObligationCauseCode::SizedArgumentType(sp) => {\n-                if let Some(span) = sp {\n+            ObligationCauseCode::SizedArgumentType(ty_span) => {\n+                if let Some(span) = ty_span {\n                     if let ty::PredicateKind::Clause(clause) = predicate.kind().skip_binder()\n                         && let ty::Clause::Trait(trait_pred) = clause\n                         && let ty::Dynamic(..) = trait_pred.self_ty().kind()"}, {"sha": "d0d300010cbdcf98c81b67ed8689ed77b21b3e3c", "filename": "src/doc/rustc/src/platform-support.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2b34bd83192c3d16c88655158f7d8d612513e88/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "raw_url": "https://github.com/rust-lang/rust/raw/b2b34bd83192c3d16c88655158f7d8d612513e88/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md?ref=b2b34bd83192c3d16c88655158f7d8d612513e88", "patch": "@@ -298,6 +298,7 @@ target | std | host | notes\n `riscv32im-unknown-none-elf` | * |  | Bare RISC-V (RV32IM ISA)\n [`riscv32imac-unknown-xous-elf`](platform-support/riscv32imac-unknown-xous-elf.md) | ? |  | RISC-V Xous (RV32IMAC ISA)\n [`riscv32imc-esp-espidf`](platform-support/esp-idf.md) | \u2713 |  | RISC-V ESP-IDF\n+[`riscv32imac-esp-espidf`](platform-support/esp-idf.md) | \u2713 |  | RISC-V ESP-IDF\n `riscv64gc-unknown-freebsd` |   |   | RISC-V FreeBSD\n `riscv64gc-unknown-fuchsia` |   |   | RISC-V Fuchsia\n `riscv64gc-unknown-linux-musl` |   |   | RISC-V Linux (kernel 4.20, musl 1.2.0)"}, {"sha": "4bbe35709b087ef3dea342d6b97f0083b0f1670c", "filename": "src/doc/rustc/src/platform-support/esp-idf.md", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b2b34bd83192c3d16c88655158f7d8d612513e88/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Fesp-idf.md", "raw_url": "https://github.com/rust-lang/rust/raw/b2b34bd83192c3d16c88655158f7d8d612513e88/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Fesp-idf.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Fesp-idf.md?ref=b2b34bd83192c3d16c88655158f7d8d612513e88", "patch": "@@ -13,11 +13,12 @@ Targets for the [ESP-IDF](https://github.com/espressif/esp-idf) development fram\n \n The target names follow this format: `$ARCH-esp-espidf`, where `$ARCH` specifies the target processor architecture. The following targets are currently defined:\n \n-|          Target name           | Target CPU(s)         |\n-|--------------------------------|-----------------------|\n-| `riscv32imc-esp-espidf`        |  [ESP32-C3](https://www.espressif.com/en/products/socs/esp32-c3)             |\n+|          Target name           | Target CPU(s)         | Minimum ESP-IDF version |\n+|--------------------------------|-----------------------|-------------------------|\n+| `riscv32imc-esp-espidf`        |  [ESP32-C3](https://www.espressif.com/en/products/socs/esp32-c3)             | `v4.3`                |\n+| `riscv32imac-esp-espidf`       |  [ESP32-C6](https://www.espressif.com/en/products/socs/esp32-c6)             | `v5.1`                |\n \n-The minimum supported ESP-IDF version is `v4.3`, though it is recommended to use the latest stable release if possible.\n+It is recommended to use the latest ESP-IDF stable release if possible.\n \n ## Building the target\n "}, {"sha": "491b6ba9e9e695b0f70fab3bc0b221da1390d1e3", "filename": "src/etc/gdb_load_rust_pretty_printers.py", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b2b34bd83192c3d16c88655158f7d8d612513e88/src%2Fetc%2Fgdb_load_rust_pretty_printers.py", "raw_url": "https://github.com/rust-lang/rust/raw/b2b34bd83192c3d16c88655158f7d8d612513e88/src%2Fetc%2Fgdb_load_rust_pretty_printers.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fgdb_load_rust_pretty_printers.py?ref=b2b34bd83192c3d16c88655158f7d8d612513e88", "patch": "@@ -1,3 +1,14 @@\n+# Add this folder to the python sys path; GDB Python-interpreter will now find modules in this path\n+import sys\n+from os import path\n+self_dir = path.dirname(path.realpath(__file__))\n+sys.path.append(self_dir)\n+\n import gdb\n import gdb_lookup\n-gdb_lookup.register_printers(gdb.current_objfile())\n+\n+# current_objfile can be none; even with `gdb foo-app`; sourcing this file after gdb init now works\n+try:\n+    gdb_lookup.register_printers(gdb.current_objfile())\n+except Exception:\n+    gdb_lookup.register_printers(gdb.selected_inferior().progspace)"}, {"sha": "9183fdaa08704f1987ef25de6446e05df10cf92e", "filename": "src/librustdoc/clean/blanket_impl.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b2b34bd83192c3d16c88655158f7d8d612513e88/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b34bd83192c3d16c88655158f7d8d612513e88/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs?ref=b2b34bd83192c3d16c88655158f7d8d612513e88", "patch": "@@ -104,10 +104,10 @@ impl<'a, 'tcx> BlanketImplFinder<'a, 'tcx> {\n                         // the post-inference `trait_ref`, as it's more accurate.\n                         trait_: Some(clean_trait_ref_with_bindings(\n                             cx,\n-                            ty::Binder::dummy(trait_ref.skip_binder()),\n+                            ty::Binder::dummy(trait_ref.subst_identity()),\n                             ThinVec::new(),\n                         )),\n-                        for_: clean_middle_ty(ty::Binder::dummy(ty.skip_binder()), cx, None),\n+                        for_: clean_middle_ty(ty::Binder::dummy(ty.subst_identity()), cx, None),\n                         items: cx\n                             .tcx\n                             .associated_items(impl_def_id)\n@@ -116,7 +116,7 @@ impl<'a, 'tcx> BlanketImplFinder<'a, 'tcx> {\n                             .collect::<Vec<_>>(),\n                         polarity: ty::ImplPolarity::Positive,\n                         kind: ImplKind::Blanket(Box::new(clean_middle_ty(\n-                            ty::Binder::dummy(trait_ref.skip_binder().self_ty()),\n+                            ty::Binder::dummy(trait_ref.subst_identity().self_ty()),\n                             cx,\n                             None,\n                         ))),"}, {"sha": "e02fe094889166380e46d159bb8e253af21a5538", "filename": "tests/run-make/x86_64-fortanix-unknown-sgx-lvi/print.checks", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b2b34bd83192c3d16c88655158f7d8d612513e88/tests%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fprint.checks", "raw_url": "https://github.com/rust-lang/rust/raw/b2b34bd83192c3d16c88655158f7d8d612513e88/tests%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fprint.checks", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fprint.checks?ref=b2b34bd83192c3d16c88655158f7d8d612513e88", "patch": "@@ -1,6 +1,6 @@\n CHECK: print\n CHECK:      lfence\n-CHECK:      lfence\n-CHECK:      lfence\n-CHECK:      callq 0x{{[[:xdigit:]]*}} <_Unwind_Resume>\n-CHECK-NEXT: ud2\n+CHECK:      popq\n+CHECK-NEXT: popq [[REGISTER:%[a-z]+]]\n+CHECK-NEXT: lfence\n+CHECK-NEXT: jmpq *[[REGISTER]]"}, {"sha": "04a34724518e84b6fb34ecf3f04af008f0d1ffaa", "filename": "tests/run-make/x86_64-fortanix-unknown-sgx-lvi/script.sh", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b2b34bd83192c3d16c88655158f7d8d612513e88/tests%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fscript.sh", "raw_url": "https://github.com/rust-lang/rust/raw/b2b34bd83192c3d16c88655158f7d8d612513e88/tests%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fscript.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fx86_64-fortanix-unknown-sgx-lvi%2Fscript.sh?ref=b2b34bd83192c3d16c88655158f7d8d612513e88", "patch": "@@ -33,6 +33,15 @@ function check {\n     ${objdump} --disassemble-symbols=\"${func}\" --demangle \\\n       ${enclave} > ${asm}\n     ${filecheck} --input-file ${asm} ${checks}\n+\n+    if [ \"${func_re}\" != \"rust_plus_one_global_asm\" &&\n+         \"${func_re}\" != \"cmake_plus_one_c_global_asm\" ]; then\n+        # The assembler cannot avoid explicit `ret` instructions. Sequences\n+        # of `shlq $0x0, (%rsp); lfence; retq` are used instead.\n+        # https://www.intel.com/content/www/us/en/developer/articles/technical/\n+        #     software-security-guidance/technical-documentation/load-value-injection.html\n+        ${filecheck} --implicit-check-not ret --input-file ${asm} ${checks}\n+    fi\n }\n \n build"}, {"sha": "0dad55be3acffa58eb2b1b76b954037d2a34f34a", "filename": "tests/ui/borrowck/issue-111554.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b2b34bd83192c3d16c88655158f7d8d612513e88/tests%2Fui%2Fborrowck%2Fissue-111554.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b34bd83192c3d16c88655158f7d8d612513e88/tests%2Fui%2Fborrowck%2Fissue-111554.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fissue-111554.rs?ref=b2b34bd83192c3d16c88655158f7d8d612513e88", "patch": "@@ -0,0 +1,28 @@\n+struct Foo {}\n+\n+impl Foo {\n+    pub fn foo(&mut self) {\n+        || bar(&mut self);\n+        //~^ ERROR cannot borrow `self` as mutable, as it is not declared as mutable\n+    }\n+\n+    pub fn baz(&self) {\n+        || bar(&mut self);\n+        //~^ ERROR cannot borrow `self` as mutable, as it is not declared as mutable\n+        //~| ERROR cannot borrow data in a `&` reference as mutable\n+    }\n+\n+    pub fn qux(mut self) {\n+        || bar(&mut self);\n+        // OK\n+    }\n+\n+    pub fn quux(self) {\n+        || bar(&mut self);\n+        //~^ ERROR cannot borrow `self` as mutable, as it is not declared as mutable\n+    }\n+}\n+\n+fn bar(_: &mut Foo) {}\n+\n+fn main() {}"}, {"sha": "6b7a42e4959996fb58ded429475282980f1310e9", "filename": "tests/ui/borrowck/issue-111554.stderr", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/b2b34bd83192c3d16c88655158f7d8d612513e88/tests%2Fui%2Fborrowck%2Fissue-111554.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2b34bd83192c3d16c88655158f7d8d612513e88/tests%2Fui%2Fborrowck%2Fissue-111554.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fissue-111554.stderr?ref=b2b34bd83192c3d16c88655158f7d8d612513e88", "patch": "@@ -0,0 +1,29 @@\n+error[E0596]: cannot borrow `self` as mutable, as it is not declared as mutable\n+  --> $DIR/issue-111554.rs:5:16\n+   |\n+LL |         || bar(&mut self);\n+   |                ^^^^^^^^^ cannot borrow as mutable\n+\n+error[E0596]: cannot borrow `self` as mutable, as it is not declared as mutable\n+  --> $DIR/issue-111554.rs:10:16\n+   |\n+LL |         || bar(&mut self);\n+   |                ^^^^^^^^^ cannot borrow as mutable\n+\n+error[E0596]: cannot borrow data in a `&` reference as mutable\n+  --> $DIR/issue-111554.rs:10:16\n+   |\n+LL |         || bar(&mut self);\n+   |                ^^^^^^^^^ cannot borrow as mutable\n+\n+error[E0596]: cannot borrow `self` as mutable, as it is not declared as mutable\n+  --> $DIR/issue-111554.rs:21:16\n+   |\n+LL |     pub fn quux(self) {\n+   |                 ---- help: consider changing this to be mutable: `mut self`\n+LL |         || bar(&mut self);\n+   |                ^^^^^^^^^ cannot borrow as mutable\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0596`."}, {"sha": "eb3fe08cbc409fe10ada6e7af771403c04e0b9c6", "filename": "tests/ui/closures/issue-111932.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b2b34bd83192c3d16c88655158f7d8d612513e88/tests%2Fui%2Fclosures%2Fissue-111932.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b34bd83192c3d16c88655158f7d8d612513e88/tests%2Fui%2Fclosures%2Fissue-111932.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclosures%2Fissue-111932.rs?ref=b2b34bd83192c3d16c88655158f7d8d612513e88", "patch": "@@ -0,0 +1,9 @@\n+trait Foo: std::fmt::Debug {}\n+\n+fn print_foos(foos: impl Iterator<Item = dyn Foo>) {\n+    foos.for_each(|foo| { //~ ERROR [E0277]\n+        println!(\"{:?}\", foo); //~ ERROR [E0277]\n+    });\n+}\n+\n+fn main() {}"}, {"sha": "937bdf3bea255a829bd855455e9df501c2292cdb", "filename": "tests/ui/closures/issue-111932.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b2b34bd83192c3d16c88655158f7d8d612513e88/tests%2Fui%2Fclosures%2Fissue-111932.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2b34bd83192c3d16c88655158f7d8d612513e88/tests%2Fui%2Fclosures%2Fissue-111932.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclosures%2Fissue-111932.stderr?ref=b2b34bd83192c3d16c88655158f7d8d612513e88", "patch": "@@ -0,0 +1,26 @@\n+error[E0277]: the size for values of type `(dyn Foo + 'static)` cannot be known at compilation time\n+  --> $DIR/issue-111932.rs:4:20\n+   |\n+LL |     foos.for_each(|foo| {\n+   |                    ^^^ doesn't have a size known at compile-time\n+   |\n+   = help: the trait `Sized` is not implemented for `(dyn Foo + 'static)`\n+   = note: all function arguments must have a statically known size\n+   = help: unsized fn params are gated as an unstable feature\n+\n+error[E0277]: the size for values of type `dyn Foo` cannot be known at compilation time\n+  --> $DIR/issue-111932.rs:5:26\n+   |\n+LL |         println!(\"{:?}\", foo);\n+   |                   ----   ^^^ doesn't have a size known at compile-time\n+   |                   |\n+   |                   required by a bound introduced by this call\n+   |\n+   = help: the trait `Sized` is not implemented for `dyn Foo`\n+note: required by a bound in `core::fmt::rt::Argument::<'a>::new_debug`\n+  --> $SRC_DIR/core/src/fmt/rt.rs:LL:COL\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "5e73d8e38de816de29a7779624d2589e35fbc931", "filename": "tests/ui/parser/issue-112188.fixed", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b2b34bd83192c3d16c88655158f7d8d612513e88/tests%2Fui%2Fparser%2Fissue-112188.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/b2b34bd83192c3d16c88655158f7d8d612513e88/tests%2Fui%2Fparser%2Fissue-112188.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fissue-112188.fixed?ref=b2b34bd83192c3d16c88655158f7d8d612513e88", "patch": "@@ -0,0 +1,14 @@\n+// run-rustfix\n+\n+#![allow(unused)]\n+\n+struct Foo { x: i32 }\n+\n+fn main() {\n+    let f = Foo { x: 0 };\n+    let Foo { .. } = f;\n+    let Foo { .. } = f; //~ ERROR expected `}`, found `,`\n+    let Foo { x, .. } = f;\n+    let Foo { x, .. } = f; //~ ERROR expected `}`, found `,`\n+    let Foo { x, .. } = f; //~ ERROR expected `}`, found `,`\n+}"}, {"sha": "27ca192e52263eac3f373878af218d7899a79928", "filename": "tests/ui/parser/issue-112188.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b2b34bd83192c3d16c88655158f7d8d612513e88/tests%2Fui%2Fparser%2Fissue-112188.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2b34bd83192c3d16c88655158f7d8d612513e88/tests%2Fui%2Fparser%2Fissue-112188.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fissue-112188.rs?ref=b2b34bd83192c3d16c88655158f7d8d612513e88", "patch": "@@ -0,0 +1,14 @@\n+// run-rustfix\n+\n+#![allow(unused)]\n+\n+struct Foo { x: i32 }\n+\n+fn main() {\n+    let f = Foo { x: 0 };\n+    let Foo { .. } = f;\n+    let Foo { .., } = f; //~ ERROR expected `}`, found `,`\n+    let Foo { x, .. } = f;\n+    let Foo { .., x } = f; //~ ERROR expected `}`, found `,`\n+    let Foo { .., x, .. } = f; //~ ERROR expected `}`, found `,`\n+}"}, {"sha": "6d2d8e6a3b0554fdbd28ff304edf003c4545cd2f", "filename": "tests/ui/parser/issue-112188.stderr", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/b2b34bd83192c3d16c88655158f7d8d612513e88/tests%2Fui%2Fparser%2Fissue-112188.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2b34bd83192c3d16c88655158f7d8d612513e88/tests%2Fui%2Fparser%2Fissue-112188.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fissue-112188.stderr?ref=b2b34bd83192c3d16c88655158f7d8d612513e88", "patch": "@@ -0,0 +1,37 @@\n+error: expected `}`, found `,`\n+  --> $DIR/issue-112188.rs:10:17\n+   |\n+LL |     let Foo { .., } = f;\n+   |               --^\n+   |               | |\n+   |               | expected `}`\n+   |               | help: remove this comma\n+   |               `..` must be at the end and cannot have a trailing comma\n+\n+error: expected `}`, found `,`\n+  --> $DIR/issue-112188.rs:12:17\n+   |\n+LL |     let Foo { .., x } = f;\n+   |               --^\n+   |               | |\n+   |               | expected `}`\n+   |               `..` must be at the end and cannot have a trailing comma\n+   |\n+help: move the `..` to the end of the field list\n+   |\n+LL -     let Foo { .., x } = f;\n+LL +     let Foo { x, .. } = f;\n+   |\n+\n+error: expected `}`, found `,`\n+  --> $DIR/issue-112188.rs:13:17\n+   |\n+LL |     let Foo { .., x, .. } = f;\n+   |               --^-\n+   |               | |\n+   |               | expected `}`\n+   |               `..` must be at the end and cannot have a trailing comma\n+   |               help: remove the starting `..`\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "97e16f88b8d328e6355820ec9a6a404f58150bbd", "filename": "tests/ui/parser/issue-49257.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2b34bd83192c3d16c88655158f7d8d612513e88/tests%2Fui%2Fparser%2Fissue-49257.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2b34bd83192c3d16c88655158f7d8d612513e88/tests%2Fui%2Fparser%2Fissue-49257.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fissue-49257.stderr?ref=b2b34bd83192c3d16c88655158f7d8d612513e88", "patch": "@@ -25,7 +25,7 @@ LL |     let Point { .., y } = p;\n help: move the `..` to the end of the field list\n    |\n LL -     let Point { .., y } = p;\n-LL +     let Point { y , .. } = p;\n+LL +     let Point { y, .. } = p;\n    |\n \n error: expected `}`, found `,`"}, {"sha": "13fdc037ac5697b3328e32a50e2199827605d9e1", "filename": "tests/ui/unsized-locals/issue-67981.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b2b34bd83192c3d16c88655158f7d8d612513e88/tests%2Fui%2Funsized-locals%2Fissue-67981.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b2b34bd83192c3d16c88655158f7d8d612513e88/tests%2Fui%2Funsized-locals%2Fissue-67981.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funsized-locals%2Fissue-67981.stderr?ref=b2b34bd83192c3d16c88655158f7d8d612513e88", "patch": "@@ -5,10 +5,7 @@ LL |     let f: fn([u8]) = |_| {};\n    |                        ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `Sized` is not implemented for `[u8]`\n-help: function arguments must have a statically known size, borrowed types always have a known size\n-   |\n-LL |     let f: fn([u8]) = |&_| {};\n-   |                        +\n+   = note: all function arguments must have a statically known size\n \n error: aborting due to previous error\n "}]}