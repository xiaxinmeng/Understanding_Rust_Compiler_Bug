{"sha": "d0b98060d44a3cf2900f5d4504389825a9e2856e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwYjk4MDYwZDQ0YTNjZjI5MDBmNWQ0NTA0Mzg5ODI1YTllMjg1NmU=", "commit": {"author": {"name": "Toby Fleming", "email": "sourcecode@tobywf.com", "date": "2021-08-01T05:47:21Z"}, "committer": {"name": "Toby Fleming", "email": "sourcecode@tobywf.com", "date": "2021-08-01T22:00:34Z"}, "message": "Rust project project model smoke tests", "tree": {"sha": "cc2df68508e1e9652e2ed52c3701b1db54fe041f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc2df68508e1e9652e2ed52c3701b1db54fe041f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0b98060d44a3cf2900f5d4504389825a9e2856e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE2QGIyv0iGaSguakcAoK7PXqTUQIFAmEHGYMACgkQAoK7PXqT\nUQLz4w/+Kt8vTj9nZu/A0gDOfjxBdFC5R5dOM4AtueV0JRchme13V11w5k4JxgNE\nJNv5BUZMWMbdExrhq7yKguxBX1CCR4iqJHEn3K7nSUjkqtPrvyKD7Ep/timFfEUb\nkzn4SN2qMYhguYjJ68SfDru2H4wBKP1bsegLVKN/ifpwZNXJBifj+U+7BHiy/SRg\nUVU3J0a6yF2O4bfrLW17kjCL3utMh0h6AMFzO9Rukhi0UdjIc7NXG7zw5tOeZgoH\nOSidBkpaMzoEe6Q8TK8vKMjh29Q8ANjz8ZzQlXs3l2ech7J0B03R/4ocerilK7b6\noKWfgslXyoSOf1RTVURHkVVYh+YptQaSW4glHTElRUzjUVCdnlksdZqU8tz1WbmN\nOONT4JboFVR3Wq3Y3E+HQxZQC0ptxGDx1MU0YS/Z0liq2E/srH1TszP7mpEOiI49\n+iIeReqfTkoBHzVJWX2xquSRfj80fzvF0y5MYoxIKZ1yPFOuatFe2qF7IK/CqzI7\nhafE8AlM9SZlFWYNthZ2PaF26OPvQRmCAMOjlmROBAoO0tTWiyW0+Lr5P/vnVCfV\nfZPjbMHNDbWTSs6W6i+cOuL2dbfoFBbqs43REoa+GF9jG0/KfLWC6B5hqoovTRgm\n81XudzGe17CnQCpUWYqiPAhMtt3qMF9DipkBC3wL5ENZZnALU9k=\n=UvrZ\n-----END PGP SIGNATURE-----", "payload": "tree cc2df68508e1e9652e2ed52c3701b1db54fe041f\nparent cb13e4a2ca6d2f4c19b6a9959288142dffc4c32c\nauthor Toby Fleming <sourcecode@tobywf.com> 1627796841 -0700\ncommitter Toby Fleming <sourcecode@tobywf.com> 1627855234 -0700\n\nRust project project model smoke tests\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0b98060d44a3cf2900f5d4504389825a9e2856e", "html_url": "https://github.com/rust-lang/rust/commit/d0b98060d44a3cf2900f5d4504389825a9e2856e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0b98060d44a3cf2900f5d4504389825a9e2856e/comments", "author": {"login": "tobywf", "id": 2903454, "node_id": "MDQ6VXNlcjI5MDM0NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2903454?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tobywf", "html_url": "https://github.com/tobywf", "followers_url": "https://api.github.com/users/tobywf/followers", "following_url": "https://api.github.com/users/tobywf/following{/other_user}", "gists_url": "https://api.github.com/users/tobywf/gists{/gist_id}", "starred_url": "https://api.github.com/users/tobywf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tobywf/subscriptions", "organizations_url": "https://api.github.com/users/tobywf/orgs", "repos_url": "https://api.github.com/users/tobywf/repos", "events_url": "https://api.github.com/users/tobywf/events{/privacy}", "received_events_url": "https://api.github.com/users/tobywf/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tobywf", "id": 2903454, "node_id": "MDQ6VXNlcjI5MDM0NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2903454?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tobywf", "html_url": "https://github.com/tobywf", "followers_url": "https://api.github.com/users/tobywf/followers", "following_url": "https://api.github.com/users/tobywf/following{/other_user}", "gists_url": "https://api.github.com/users/tobywf/gists{/gist_id}", "starred_url": "https://api.github.com/users/tobywf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tobywf/subscriptions", "organizations_url": "https://api.github.com/users/tobywf/orgs", "repos_url": "https://api.github.com/users/tobywf/repos", "events_url": "https://api.github.com/users/tobywf/events{/privacy}", "received_events_url": "https://api.github.com/users/tobywf/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb13e4a2ca6d2f4c19b6a9959288142dffc4c32c", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb13e4a2ca6d2f4c19b6a9959288142dffc4c32c", "html_url": "https://github.com/rust-lang/rust/commit/cb13e4a2ca6d2f4c19b6a9959288142dffc4c32c"}], "stats": {"total": 576, "additions": 551, "deletions": 25}, "files": [{"sha": "b50db6f3b859d676bcc73f9c4c28df1136feabda", "filename": "crates/project_model/src/tests.rs", "status": "modified", "additions": 526, "deletions": 25, "changes": 551, "blob_url": "https://github.com/rust-lang/rust/blob/d0b98060d44a3cf2900f5d4504389825a9e2856e/crates%2Fproject_model%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0b98060d44a3cf2900f5d4504389825a9e2856e/crates%2Fproject_model%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Ftests.rs?ref=d0b98060d44a3cf2900f5d4504389825a9e2856e", "patch": "@@ -1,12 +1,20 @@\n-use std::path::PathBuf;\n+use std::{\n+    ops::Deref,\n+    path::{Path, PathBuf},\n+};\n \n-use base_db::FileId;\n+use base_db::{CrateGraph, FileId};\n use expect_test::{expect, Expect};\n+use paths::AbsPath;\n+use serde::de::DeserializeOwned;\n \n-use crate::{CargoWorkspace, CfgOverrides, ProjectWorkspace, Sysroot, WorkspaceBuildScripts};\n+use crate::{\n+    CargoWorkspace, CfgOverrides, ProjectJson, ProjectJsonData, ProjectWorkspace, Sysroot,\n+    WorkspaceBuildScripts,\n+};\n \n-fn check(file: &str, expect: Expect) {\n-    let meta = get_test_metadata(file);\n+fn load_cargo(file: &str) -> CrateGraph {\n+    let meta = get_test_json_file(file);\n     let cargo_workspace = CargoWorkspace::new(meta);\n     let project_workspace = ProjectWorkspace::Cargo {\n         cargo: cargo_workspace,\n@@ -16,23 +24,21 @@ fn check(file: &str, expect: Expect) {\n         rustc_cfg: Vec::new(),\n         cfg_overrides: CfgOverrides::default(),\n     };\n+    to_crate_graph(project_workspace)\n+}\n \n-    let crate_graph = project_workspace.to_crate_graph(None, {\n-        let mut counter = 0;\n-        &mut move |_path| {\n-            counter += 1;\n-            Some(FileId(counter))\n-        }\n-    });\n-\n-    let mut crate_graph = format!(\"{:#?}\", crate_graph);\n-    replace_root(&mut crate_graph, false);\n-\n-    expect.assert_eq(&crate_graph);\n+fn load_rust_project(file: &str) -> CrateGraph {\n+    let data = get_test_json_file(file);\n+    let project = rooted_project_json(data);\n+    let sysroot = Some(get_fake_sysroot());\n+    let project_workspace = ProjectWorkspace::Json { project, sysroot, rustc_cfg: Vec::new() };\n+    to_crate_graph(project_workspace)\n }\n \n-fn get_test_metadata(file: &str) -> cargo_metadata::Metadata {\n-    let mut json = get_test_data(file).parse::<serde_json::Value>().unwrap();\n+fn get_test_json_file<T: DeserializeOwned>(file: &str) -> T {\n+    let file = get_test_path(file);\n+    let data = std::fs::read_to_string(file).unwrap();\n+    let mut json = data.parse::<serde_json::Value>().unwrap();\n     fixup_paths(&mut json);\n     return serde_json::from_value(json).unwrap();\n \n@@ -58,16 +64,46 @@ fn replace_root(s: &mut String, direction: bool) {\n     }\n }\n \n-fn get_test_data(file: &str) -> String {\n+fn get_test_path(file: &str) -> PathBuf {\n     let base = PathBuf::from(env!(\"CARGO_MANIFEST_DIR\"));\n-    let file = base.join(\"test_data\").join(file);\n-    std::fs::read_to_string(file).unwrap()\n+    base.join(\"test_data\").join(file)\n+}\n+\n+fn get_fake_sysroot() -> Sysroot {\n+    let sysroot_path = get_test_path(\"fake-sysroot\");\n+    let sysroot_src_dir = AbsPath::assert(&sysroot_path);\n+    Sysroot::load(&sysroot_src_dir).unwrap()\n+}\n+\n+fn rooted_project_json(data: ProjectJsonData) -> ProjectJson {\n+    let mut root = \"$ROOT$\".to_string();\n+    replace_root(&mut root, true);\n+    let path = Path::new(&root);\n+    let base = AbsPath::assert(path);\n+    ProjectJson::new(base, data)\n+}\n+\n+fn to_crate_graph(project_workspace: ProjectWorkspace) -> CrateGraph {\n+    project_workspace.to_crate_graph(None, {\n+        let mut counter = 0;\n+        &mut move |_path| {\n+            counter += 1;\n+            Some(FileId(counter))\n+        }\n+    })\n+}\n+\n+fn check_crate_graph(crate_graph: CrateGraph, expect: Expect) {\n+    let mut crate_graph = format!(\"{:#?}\", crate_graph);\n+    replace_root(&mut crate_graph, false);\n+    expect.assert_eq(&crate_graph);\n }\n \n #[test]\n-fn hello_world_project_model() {\n-    check(\n-        \"hello-world-metadata.json\",\n+fn cargo_hello_world_project_model() {\n+    let crate_graph = load_cargo(\"hello-world-metadata.json\");\n+    check_crate_graph(\n+        crate_graph,\n         expect![[r#\"\n             CrateGraph {\n                 arena: {\n@@ -514,3 +550,468 @@ fn hello_world_project_model() {\n             }\"#]],\n     )\n }\n+\n+#[test]\n+fn rust_project_hello_world_project_model() {\n+    let crate_graph = load_rust_project(\"hello-world-project.json\");\n+    check_crate_graph(\n+        crate_graph,\n+        expect![[r#\"\n+            CrateGraph {\n+                arena: {\n+                    CrateId(\n+                        0,\n+                    ): CrateData {\n+                        root_file_id: FileId(\n+                            1,\n+                        ),\n+                        edition: Edition2018,\n+                        display_name: Some(\n+                            CrateDisplayName {\n+                                crate_name: CrateName(\n+                                    \"alloc\",\n+                                ),\n+                                canonical_name: \"alloc\",\n+                            },\n+                        ),\n+                        cfg_options: CfgOptions(\n+                            [],\n+                        ),\n+                        potential_cfg_options: CfgOptions(\n+                            [],\n+                        ),\n+                        env: Env {\n+                            entries: {},\n+                        },\n+                        dependencies: [\n+                            Dependency {\n+                                crate_id: CrateId(\n+                                    1,\n+                                ),\n+                                name: CrateName(\n+                                    \"core\",\n+                                ),\n+                            },\n+                        ],\n+                        proc_macro: [],\n+                    },\n+                    CrateId(\n+                        10,\n+                    ): CrateData {\n+                        root_file_id: FileId(\n+                            11,\n+                        ),\n+                        edition: Edition2018,\n+                        display_name: Some(\n+                            CrateDisplayName {\n+                                crate_name: CrateName(\n+                                    \"unwind\",\n+                                ),\n+                                canonical_name: \"unwind\",\n+                            },\n+                        ),\n+                        cfg_options: CfgOptions(\n+                            [],\n+                        ),\n+                        potential_cfg_options: CfgOptions(\n+                            [],\n+                        ),\n+                        env: Env {\n+                            entries: {},\n+                        },\n+                        dependencies: [],\n+                        proc_macro: [],\n+                    },\n+                    CrateId(\n+                        7,\n+                    ): CrateData {\n+                        root_file_id: FileId(\n+                            8,\n+                        ),\n+                        edition: Edition2018,\n+                        display_name: Some(\n+                            CrateDisplayName {\n+                                crate_name: CrateName(\n+                                    \"std_detect\",\n+                                ),\n+                                canonical_name: \"std_detect\",\n+                            },\n+                        ),\n+                        cfg_options: CfgOptions(\n+                            [],\n+                        ),\n+                        potential_cfg_options: CfgOptions(\n+                            [],\n+                        ),\n+                        env: Env {\n+                            entries: {},\n+                        },\n+                        dependencies: [],\n+                        proc_macro: [],\n+                    },\n+                    CrateId(\n+                        4,\n+                    ): CrateData {\n+                        root_file_id: FileId(\n+                            5,\n+                        ),\n+                        edition: Edition2018,\n+                        display_name: Some(\n+                            CrateDisplayName {\n+                                crate_name: CrateName(\n+                                    \"proc_macro\",\n+                                ),\n+                                canonical_name: \"proc_macro\",\n+                            },\n+                        ),\n+                        cfg_options: CfgOptions(\n+                            [],\n+                        ),\n+                        potential_cfg_options: CfgOptions(\n+                            [],\n+                        ),\n+                        env: Env {\n+                            entries: {},\n+                        },\n+                        dependencies: [\n+                            Dependency {\n+                                crate_id: CrateId(\n+                                    6,\n+                                ),\n+                                name: CrateName(\n+                                    \"std\",\n+                                ),\n+                            },\n+                        ],\n+                        proc_macro: [],\n+                    },\n+                    CrateId(\n+                        1,\n+                    ): CrateData {\n+                        root_file_id: FileId(\n+                            2,\n+                        ),\n+                        edition: Edition2018,\n+                        display_name: Some(\n+                            CrateDisplayName {\n+                                crate_name: CrateName(\n+                                    \"core\",\n+                                ),\n+                                canonical_name: \"core\",\n+                            },\n+                        ),\n+                        cfg_options: CfgOptions(\n+                            [],\n+                        ),\n+                        potential_cfg_options: CfgOptions(\n+                            [],\n+                        ),\n+                        env: Env {\n+                            entries: {},\n+                        },\n+                        dependencies: [],\n+                        proc_macro: [],\n+                    },\n+                    CrateId(\n+                        11,\n+                    ): CrateData {\n+                        root_file_id: FileId(\n+                            12,\n+                        ),\n+                        edition: Edition2018,\n+                        display_name: Some(\n+                            CrateDisplayName {\n+                                crate_name: CrateName(\n+                                    \"hello_world\",\n+                                ),\n+                                canonical_name: \"hello_world\",\n+                            },\n+                        ),\n+                        cfg_options: CfgOptions(\n+                            [],\n+                        ),\n+                        potential_cfg_options: CfgOptions(\n+                            [],\n+                        ),\n+                        env: Env {\n+                            entries: {},\n+                        },\n+                        dependencies: [\n+                            Dependency {\n+                                crate_id: CrateId(\n+                                    1,\n+                                ),\n+                                name: CrateName(\n+                                    \"core\",\n+                                ),\n+                            },\n+                            Dependency {\n+                                crate_id: CrateId(\n+                                    0,\n+                                ),\n+                                name: CrateName(\n+                                    \"alloc\",\n+                                ),\n+                            },\n+                            Dependency {\n+                                crate_id: CrateId(\n+                                    6,\n+                                ),\n+                                name: CrateName(\n+                                    \"std\",\n+                                ),\n+                            },\n+                        ],\n+                        proc_macro: [],\n+                    },\n+                    CrateId(\n+                        8,\n+                    ): CrateData {\n+                        root_file_id: FileId(\n+                            9,\n+                        ),\n+                        edition: Edition2018,\n+                        display_name: Some(\n+                            CrateDisplayName {\n+                                crate_name: CrateName(\n+                                    \"term\",\n+                                ),\n+                                canonical_name: \"term\",\n+                            },\n+                        ),\n+                        cfg_options: CfgOptions(\n+                            [],\n+                        ),\n+                        potential_cfg_options: CfgOptions(\n+                            [],\n+                        ),\n+                        env: Env {\n+                            entries: {},\n+                        },\n+                        dependencies: [],\n+                        proc_macro: [],\n+                    },\n+                    CrateId(\n+                        5,\n+                    ): CrateData {\n+                        root_file_id: FileId(\n+                            6,\n+                        ),\n+                        edition: Edition2018,\n+                        display_name: Some(\n+                            CrateDisplayName {\n+                                crate_name: CrateName(\n+                                    \"profiler_builtins\",\n+                                ),\n+                                canonical_name: \"profiler_builtins\",\n+                            },\n+                        ),\n+                        cfg_options: CfgOptions(\n+                            [],\n+                        ),\n+                        potential_cfg_options: CfgOptions(\n+                            [],\n+                        ),\n+                        env: Env {\n+                            entries: {},\n+                        },\n+                        dependencies: [],\n+                        proc_macro: [],\n+                    },\n+                    CrateId(\n+                        2,\n+                    ): CrateData {\n+                        root_file_id: FileId(\n+                            3,\n+                        ),\n+                        edition: Edition2018,\n+                        display_name: Some(\n+                            CrateDisplayName {\n+                                crate_name: CrateName(\n+                                    \"panic_abort\",\n+                                ),\n+                                canonical_name: \"panic_abort\",\n+                            },\n+                        ),\n+                        cfg_options: CfgOptions(\n+                            [],\n+                        ),\n+                        potential_cfg_options: CfgOptions(\n+                            [],\n+                        ),\n+                        env: Env {\n+                            entries: {},\n+                        },\n+                        dependencies: [],\n+                        proc_macro: [],\n+                    },\n+                    CrateId(\n+                        9,\n+                    ): CrateData {\n+                        root_file_id: FileId(\n+                            10,\n+                        ),\n+                        edition: Edition2018,\n+                        display_name: Some(\n+                            CrateDisplayName {\n+                                crate_name: CrateName(\n+                                    \"test\",\n+                                ),\n+                                canonical_name: \"test\",\n+                            },\n+                        ),\n+                        cfg_options: CfgOptions(\n+                            [],\n+                        ),\n+                        potential_cfg_options: CfgOptions(\n+                            [],\n+                        ),\n+                        env: Env {\n+                            entries: {},\n+                        },\n+                        dependencies: [],\n+                        proc_macro: [],\n+                    },\n+                    CrateId(\n+                        6,\n+                    ): CrateData {\n+                        root_file_id: FileId(\n+                            7,\n+                        ),\n+                        edition: Edition2018,\n+                        display_name: Some(\n+                            CrateDisplayName {\n+                                crate_name: CrateName(\n+                                    \"std\",\n+                                ),\n+                                canonical_name: \"std\",\n+                            },\n+                        ),\n+                        cfg_options: CfgOptions(\n+                            [],\n+                        ),\n+                        potential_cfg_options: CfgOptions(\n+                            [],\n+                        ),\n+                        env: Env {\n+                            entries: {},\n+                        },\n+                        dependencies: [\n+                            Dependency {\n+                                crate_id: CrateId(\n+                                    0,\n+                                ),\n+                                name: CrateName(\n+                                    \"alloc\",\n+                                ),\n+                            },\n+                            Dependency {\n+                                crate_id: CrateId(\n+                                    1,\n+                                ),\n+                                name: CrateName(\n+                                    \"core\",\n+                                ),\n+                            },\n+                            Dependency {\n+                                crate_id: CrateId(\n+                                    2,\n+                                ),\n+                                name: CrateName(\n+                                    \"panic_abort\",\n+                                ),\n+                            },\n+                            Dependency {\n+                                crate_id: CrateId(\n+                                    3,\n+                                ),\n+                                name: CrateName(\n+                                    \"panic_unwind\",\n+                                ),\n+                            },\n+                            Dependency {\n+                                crate_id: CrateId(\n+                                    5,\n+                                ),\n+                                name: CrateName(\n+                                    \"profiler_builtins\",\n+                                ),\n+                            },\n+                            Dependency {\n+                                crate_id: CrateId(\n+                                    7,\n+                                ),\n+                                name: CrateName(\n+                                    \"std_detect\",\n+                                ),\n+                            },\n+                            Dependency {\n+                                crate_id: CrateId(\n+                                    8,\n+                                ),\n+                                name: CrateName(\n+                                    \"term\",\n+                                ),\n+                            },\n+                            Dependency {\n+                                crate_id: CrateId(\n+                                    9,\n+                                ),\n+                                name: CrateName(\n+                                    \"test\",\n+                                ),\n+                            },\n+                            Dependency {\n+                                crate_id: CrateId(\n+                                    10,\n+                                ),\n+                                name: CrateName(\n+                                    \"unwind\",\n+                                ),\n+                            },\n+                        ],\n+                        proc_macro: [],\n+                    },\n+                    CrateId(\n+                        3,\n+                    ): CrateData {\n+                        root_file_id: FileId(\n+                            4,\n+                        ),\n+                        edition: Edition2018,\n+                        display_name: Some(\n+                            CrateDisplayName {\n+                                crate_name: CrateName(\n+                                    \"panic_unwind\",\n+                                ),\n+                                canonical_name: \"panic_unwind\",\n+                            },\n+                        ),\n+                        cfg_options: CfgOptions(\n+                            [],\n+                        ),\n+                        potential_cfg_options: CfgOptions(\n+                            [],\n+                        ),\n+                        env: Env {\n+                            entries: {},\n+                        },\n+                        dependencies: [],\n+                        proc_macro: [],\n+                    },\n+                },\n+            }\"#]],\n+    );\n+}\n+\n+#[test]\n+fn rust_project_is_proc_macro_has_proc_macro_dep() {\n+    let crate_graph = load_rust_project(\"is-proc-macro-project.json\");\n+    // Since the project only defines one crate (outside the sysroot crates),\n+    // it should be the one with the biggest Id.\n+    let crate_id = crate_graph.iter().max().unwrap();\n+    let crate_data = &crate_graph[crate_id];\n+    // Assert that the project crate with `is_proc_macro` has a dependency\n+    // on the proc_macro sysroot crate.\n+    crate_data.dependencies.iter().find(|&dep| dep.name.deref() == \"proc_macro\").unwrap();\n+}"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "crates/project_model/test_data/fake-sysroot/alloc/src/lib.rs", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d0b98060d44a3cf2900f5d4504389825a9e2856e/crates%2Fproject_model%2Ftest_data%2Ffake-sysroot%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0b98060d44a3cf2900f5d4504389825a9e2856e/crates%2Fproject_model%2Ftest_data%2Ffake-sysroot%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Ftest_data%2Ffake-sysroot%2Falloc%2Fsrc%2Flib.rs?ref=d0b98060d44a3cf2900f5d4504389825a9e2856e"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "crates/project_model/test_data/fake-sysroot/core/src/lib.rs", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d0b98060d44a3cf2900f5d4504389825a9e2856e/crates%2Fproject_model%2Ftest_data%2Ffake-sysroot%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0b98060d44a3cf2900f5d4504389825a9e2856e/crates%2Fproject_model%2Ftest_data%2Ffake-sysroot%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Ftest_data%2Ffake-sysroot%2Fcore%2Fsrc%2Flib.rs?ref=d0b98060d44a3cf2900f5d4504389825a9e2856e"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "crates/project_model/test_data/fake-sysroot/panic_abort/src/lib.rs", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d0b98060d44a3cf2900f5d4504389825a9e2856e/crates%2Fproject_model%2Ftest_data%2Ffake-sysroot%2Fpanic_abort%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0b98060d44a3cf2900f5d4504389825a9e2856e/crates%2Fproject_model%2Ftest_data%2Ffake-sysroot%2Fpanic_abort%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Ftest_data%2Ffake-sysroot%2Fpanic_abort%2Fsrc%2Flib.rs?ref=d0b98060d44a3cf2900f5d4504389825a9e2856e"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "crates/project_model/test_data/fake-sysroot/panic_unwind/src/lib.rs", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d0b98060d44a3cf2900f5d4504389825a9e2856e/crates%2Fproject_model%2Ftest_data%2Ffake-sysroot%2Fpanic_unwind%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0b98060d44a3cf2900f5d4504389825a9e2856e/crates%2Fproject_model%2Ftest_data%2Ffake-sysroot%2Fpanic_unwind%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Ftest_data%2Ffake-sysroot%2Fpanic_unwind%2Fsrc%2Flib.rs?ref=d0b98060d44a3cf2900f5d4504389825a9e2856e"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "crates/project_model/test_data/fake-sysroot/proc_macro/src/lib.rs", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d0b98060d44a3cf2900f5d4504389825a9e2856e/crates%2Fproject_model%2Ftest_data%2Ffake-sysroot%2Fproc_macro%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0b98060d44a3cf2900f5d4504389825a9e2856e/crates%2Fproject_model%2Ftest_data%2Ffake-sysroot%2Fproc_macro%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Ftest_data%2Ffake-sysroot%2Fproc_macro%2Fsrc%2Flib.rs?ref=d0b98060d44a3cf2900f5d4504389825a9e2856e"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "crates/project_model/test_data/fake-sysroot/profiler_builtins/src/lib.rs", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d0b98060d44a3cf2900f5d4504389825a9e2856e/crates%2Fproject_model%2Ftest_data%2Ffake-sysroot%2Fprofiler_builtins%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0b98060d44a3cf2900f5d4504389825a9e2856e/crates%2Fproject_model%2Ftest_data%2Ffake-sysroot%2Fprofiler_builtins%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Ftest_data%2Ffake-sysroot%2Fprofiler_builtins%2Fsrc%2Flib.rs?ref=d0b98060d44a3cf2900f5d4504389825a9e2856e"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "crates/project_model/test_data/fake-sysroot/std/src/lib.rs", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d0b98060d44a3cf2900f5d4504389825a9e2856e/crates%2Fproject_model%2Ftest_data%2Ffake-sysroot%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0b98060d44a3cf2900f5d4504389825a9e2856e/crates%2Fproject_model%2Ftest_data%2Ffake-sysroot%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Ftest_data%2Ffake-sysroot%2Fstd%2Fsrc%2Flib.rs?ref=d0b98060d44a3cf2900f5d4504389825a9e2856e"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "crates/project_model/test_data/fake-sysroot/stdarch/crates/std_detect/src/lib.rs", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d0b98060d44a3cf2900f5d4504389825a9e2856e/crates%2Fproject_model%2Ftest_data%2Ffake-sysroot%2Fstdarch%2Fcrates%2Fstd_detect%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0b98060d44a3cf2900f5d4504389825a9e2856e/crates%2Fproject_model%2Ftest_data%2Ffake-sysroot%2Fstdarch%2Fcrates%2Fstd_detect%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Ftest_data%2Ffake-sysroot%2Fstdarch%2Fcrates%2Fstd_detect%2Fsrc%2Flib.rs?ref=d0b98060d44a3cf2900f5d4504389825a9e2856e"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "crates/project_model/test_data/fake-sysroot/term/src/lib.rs", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d0b98060d44a3cf2900f5d4504389825a9e2856e/crates%2Fproject_model%2Ftest_data%2Ffake-sysroot%2Fterm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0b98060d44a3cf2900f5d4504389825a9e2856e/crates%2Fproject_model%2Ftest_data%2Ffake-sysroot%2Fterm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Ftest_data%2Ffake-sysroot%2Fterm%2Fsrc%2Flib.rs?ref=d0b98060d44a3cf2900f5d4504389825a9e2856e"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "crates/project_model/test_data/fake-sysroot/test/src/lib.rs", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d0b98060d44a3cf2900f5d4504389825a9e2856e/crates%2Fproject_model%2Ftest_data%2Ffake-sysroot%2Ftest%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0b98060d44a3cf2900f5d4504389825a9e2856e/crates%2Fproject_model%2Ftest_data%2Ffake-sysroot%2Ftest%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Ftest_data%2Ffake-sysroot%2Ftest%2Fsrc%2Flib.rs?ref=d0b98060d44a3cf2900f5d4504389825a9e2856e"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "crates/project_model/test_data/fake-sysroot/unwind/src/lib.rs", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d0b98060d44a3cf2900f5d4504389825a9e2856e/crates%2Fproject_model%2Ftest_data%2Ffake-sysroot%2Funwind%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0b98060d44a3cf2900f5d4504389825a9e2856e/crates%2Fproject_model%2Ftest_data%2Ffake-sysroot%2Funwind%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Ftest_data%2Ffake-sysroot%2Funwind%2Fsrc%2Flib.rs?ref=d0b98060d44a3cf2900f5d4504389825a9e2856e"}, {"sha": "b27ab1f42b57705b18701a8a8ed81c6c848d2f69", "filename": "crates/project_model/test_data/hello-world-project.json", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d0b98060d44a3cf2900f5d4504389825a9e2856e/crates%2Fproject_model%2Ftest_data%2Fhello-world-project.json", "raw_url": "https://github.com/rust-lang/rust/raw/d0b98060d44a3cf2900f5d4504389825a9e2856e/crates%2Fproject_model%2Ftest_data%2Fhello-world-project.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Ftest_data%2Fhello-world-project.json?ref=d0b98060d44a3cf2900f5d4504389825a9e2856e", "patch": "@@ -0,0 +1,12 @@\n+{\n+    \"sysroot_src\": null,\n+    \"crates\": [\n+        {\n+            \"display_name\": \"hello_world\",\n+            \"root_module\": \"$ROOT$src/lib.rs\",\n+            \"edition\": \"2018\",\n+            \"deps\": [],\n+            \"is_workspace_member\": true\n+        }\n+    ]\n+}"}, {"sha": "5d500a4729f5713527da74cbc43671e609f9fa3c", "filename": "crates/project_model/test_data/is-proc-macro-project.json", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d0b98060d44a3cf2900f5d4504389825a9e2856e/crates%2Fproject_model%2Ftest_data%2Fis-proc-macro-project.json", "raw_url": "https://github.com/rust-lang/rust/raw/d0b98060d44a3cf2900f5d4504389825a9e2856e/crates%2Fproject_model%2Ftest_data%2Fis-proc-macro-project.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Ftest_data%2Fis-proc-macro-project.json?ref=d0b98060d44a3cf2900f5d4504389825a9e2856e", "patch": "@@ -0,0 +1,13 @@\n+{\n+    \"sysroot_src\": null,\n+    \"crates\": [\n+        {\n+            \"display_name\": \"is_proc_macro\",\n+            \"root_module\": \"$ROOT$src/lib.rs\",\n+            \"edition\": \"2018\",\n+            \"deps\": [],\n+            \"is_workspace_member\": true,\n+            \"is_proc_macro\": true\n+        }\n+    ]\n+}"}]}