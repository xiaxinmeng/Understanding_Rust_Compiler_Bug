{"sha": "45b445e5a3a1f084becad71cd1ffbbff399a6462", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1YjQ0NWU1YTNhMWYwODRiZWNhZDcxY2QxZmZiYmZmMzk5YTY0NjI=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2015-09-22T16:42:51Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2015-09-22T16:58:30Z"}, "message": "Restore `fold_ident` and `visit_ident`", "tree": {"sha": "b22950a56385755f26065b550a9e711b53a52702", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b22950a56385755f26065b550a9e711b53a52702"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45b445e5a3a1f084becad71cd1ffbbff399a6462", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45b445e5a3a1f084becad71cd1ffbbff399a6462", "html_url": "https://github.com/rust-lang/rust/commit/45b445e5a3a1f084becad71cd1ffbbff399a6462", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45b445e5a3a1f084becad71cd1ffbbff399a6462/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a779062d8aaa157d1f9b4244745b980b7e10925", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a779062d8aaa157d1f9b4244745b980b7e10925", "html_url": "https://github.com/rust-lang/rust/commit/2a779062d8aaa157d1f9b4244745b980b7e10925"}], "stats": {"total": 35, "additions": 22, "deletions": 13}, "files": [{"sha": "8ef0b5e6648b9b4e4df79770c6e86e510330a14a", "filename": "src/librustc_front/fold.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/45b445e5a3a1f084becad71cd1ffbbff399a6462/src%2Flibrustc_front%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b445e5a3a1f084becad71cd1ffbbff399a6462/src%2Flibrustc_front%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Ffold.rs?ref=45b445e5a3a1f084becad71cd1ffbbff399a6462", "patch": "@@ -151,6 +151,10 @@ pub trait Folder : Sized {\n         noop_fold_name(n, self)\n     }\n \n+    fn fold_ident(&mut self, i: Ident) -> Ident {\n+        noop_fold_ident(i, self)\n+    }\n+\n     fn fold_usize(&mut self, i: usize) -> usize {\n         noop_fold_usize(i, self)\n     }\n@@ -284,10 +288,6 @@ pub trait Folder : Sized {\n     }\n }\n \n-fn fold_ident<T: Folder>(f: &mut T, i: Ident) -> Ident {\n-    Ident { name: f.fold_name(i.name), ctxt: i.ctxt }\n-}\n-\n pub fn noop_fold_meta_items<T: Folder>(meta_items: Vec<P<MetaItem>>, fld: &mut T)\n                                        -> Vec<P<MetaItem>> {\n     meta_items.move_map(|x| fld.fold_meta_item(x))\n@@ -443,6 +443,10 @@ pub fn noop_fold_name<T: Folder>(n: Name, _: &mut T) -> Name {\n     n\n }\n \n+pub fn noop_fold_ident<T: Folder>(i: Ident, _: &mut T) -> Ident {\n+    i\n+}\n+\n pub fn noop_fold_usize<T: Folder>(i: usize, _: &mut T) -> usize {\n     i\n }\n@@ -451,7 +455,7 @@ pub fn noop_fold_path<T: Folder>(Path {global, segments, span}: Path, fld: &mut\n     Path {\n         global: global,\n         segments: segments.move_map(|PathSegment {identifier, parameters}| PathSegment {\n-            identifier: fold_ident(fld, identifier),\n+            identifier: fld.fold_ident(identifier),\n             parameters: fld.fold_path_parameters(parameters),\n         }),\n         span: fld.new_span(span)\n@@ -992,7 +996,7 @@ pub fn noop_fold_pat<T: Folder>(p: P<Pat>, folder: &mut T) -> P<Pat> {\n             PatIdent(binding_mode, pth1, sub) => {\n                 PatIdent(binding_mode,\n                         Spanned{span: folder.new_span(pth1.span),\n-                                node: fold_ident(folder, pth1.node)},\n+                                node: folder.fold_ident(pth1.node)},\n                         sub.map(|x| folder.fold_pat(x)))\n             }\n             PatLit(e) => PatLit(folder.fold_expr(e)),\n@@ -1077,11 +1081,11 @@ pub fn noop_fold_expr<T: Folder>(Expr {id, node, span}: Expr, folder: &mut T) ->\n             ExprWhile(cond, body, opt_ident) => {\n                 ExprWhile(folder.fold_expr(cond),\n                           folder.fold_block(body),\n-                          opt_ident.map(|i| fold_ident(folder, i)))\n+                          opt_ident.map(|i| folder.fold_ident(i)))\n             }\n             ExprLoop(body, opt_ident) => {\n                 ExprLoop(folder.fold_block(body),\n-                        opt_ident.map(|i| fold_ident(folder, i)))\n+                        opt_ident.map(|i| folder.fold_ident(i)))\n             }\n             ExprMatch(expr, arms, source) => {\n                 ExprMatch(folder.fold_expr(expr),\n@@ -1130,11 +1134,11 @@ pub fn noop_fold_expr<T: Folder>(Expr {id, node, span}: Expr, folder: &mut T) ->\n             }\n             ExprBreak(opt_ident) => ExprBreak(opt_ident.map(|label|\n                 respan(folder.new_span(label.span),\n-                       fold_ident(folder, label.node)))\n+                       folder.fold_ident(label.node)))\n             ),\n             ExprAgain(opt_ident) => ExprAgain(opt_ident.map(|label|\n                 respan(folder.new_span(label.span),\n-                       fold_ident(folder, label.node)))\n+                       folder.fold_ident(label.node)))\n             ),\n             ExprRet(e) => ExprRet(e.map(|x| folder.fold_expr(x))),\n             ExprInlineAsm(InlineAsm {"}, {"sha": "342d2a729c7eff7c6a171d0b407a32b78c7604e5", "filename": "src/librustc_front/visit.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/45b445e5a3a1f084becad71cd1ffbbff399a6462/src%2Flibrustc_front%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b445e5a3a1f084becad71cd1ffbbff399a6462/src%2Flibrustc_front%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Fvisit.rs?ref=45b445e5a3a1f084becad71cd1ffbbff399a6462", "patch": "@@ -24,7 +24,7 @@\n //! those that are created by the expansion of a macro.\n \n use syntax::abi::Abi;\n-use syntax::ast::{NodeId, CRATE_NODE_ID, Name, Attribute};\n+use syntax::ast::{Ident, NodeId, CRATE_NODE_ID, Name, Attribute};\n use hir::*;\n use hir;\n use syntax::codemap::Span;\n@@ -57,6 +57,7 @@ pub trait Visitor<'v> : Sized {\n     fn visit_name(&mut self, _span: Span, _name: Name) {\n         // Nothing to do.\n     }\n+    fn visit_ident(&mut self, span: Span, ident: Ident) { walk_ident(self, span, ident) }\n     fn visit_mod(&mut self, m: &'v Mod, _s: Span, _n: NodeId) { walk_mod(self, m) }\n     fn visit_foreign_item(&mut self, i: &'v ForeignItem) { walk_foreign_item(self, i) }\n     fn visit_item(&mut self, i: &'v Item) { walk_item(self, i) }\n@@ -133,6 +134,10 @@ pub trait Visitor<'v> : Sized {\n     fn visit_attribute(&mut self, _attr: &'v Attribute) {}\n }\n \n+pub fn walk_ident<'v, V: Visitor<'v>>(visitor: &mut V, span: Span, ident: Ident) {\n+    visitor.visit_name(span, ident.name);\n+}\n+\n pub fn walk_crate<'v, V: Visitor<'v>>(visitor: &mut V, krate: &'v Crate) {\n     visitor.visit_mod(&krate.module, krate.span, CRATE_NODE_ID);\n     for attr in &krate.attrs {\n@@ -409,7 +414,7 @@ pub fn walk_path_list_item<'v, V: Visitor<'v>>(visitor: &mut V, prefix: &'v Path\n pub fn walk_path_segment<'v, V: Visitor<'v>>(visitor: &mut V,\n                                              path_span: Span,\n                                              segment: &'v PathSegment) {\n-    visitor.visit_name(path_span, segment.identifier.name);\n+    visitor.visit_ident(path_span, segment.identifier);\n     visitor.visit_path_parameters(path_span, &segment.parameters);\n }\n \n@@ -475,7 +480,7 @@ pub fn walk_pat<'v, V: Visitor<'v>>(visitor: &mut V, pattern: &'v Pat) {\n             visitor.visit_pat(&**subpattern)\n         }\n         PatIdent(_, ref pth1, ref optional_subpattern) => {\n-            visitor.visit_name(pth1.span, pth1.node.name);\n+            visitor.visit_ident(pth1.span, pth1.node);\n             match *optional_subpattern {\n                 None => {}\n                 Some(ref subpattern) => visitor.visit_pat(&**subpattern),"}]}