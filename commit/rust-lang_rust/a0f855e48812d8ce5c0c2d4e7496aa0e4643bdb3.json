{"sha": "a0f855e48812d8ce5c0c2d4e7496aa0e4643bdb3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwZjg1NWU0ODgxMmQ4Y2U1YzBjMmQ0ZTc0OTZhYTBlNDY0M2JkYjM=", "commit": {"author": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2011-05-22T01:48:43Z"}, "committer": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2011-05-22T06:10:09Z"}, "message": "stdlib: Report an error when getopts is given an argument to a flag option", "tree": {"sha": "59ce568617c1367e49db134b4c8df79008af535a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59ce568617c1367e49db134b4c8df79008af535a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a0f855e48812d8ce5c0c2d4e7496aa0e4643bdb3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a0f855e48812d8ce5c0c2d4e7496aa0e4643bdb3", "html_url": "https://github.com/rust-lang/rust/commit/a0f855e48812d8ce5c0c2d4e7496aa0e4643bdb3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a0f855e48812d8ce5c0c2d4e7496aa0e4643bdb3/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "079711d5f62bc440a83066fda87069b611a8e878", "url": "https://api.github.com/repos/rust-lang/rust/commits/079711d5f62bc440a83066fda87069b611a8e878", "html_url": "https://github.com/rust-lang/rust/commit/079711d5f62bc440a83066fda87069b611a8e878"}], "stats": {"total": 20, "additions": 16, "deletions": 4}, "files": [{"sha": "5272357546024e40e22d7b38f958810612e4ac65", "filename": "src/lib/getopts.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a0f855e48812d8ce5c0c2d4e7496aa0e4643bdb3/src%2Flib%2Fgetopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0f855e48812d8ce5c0c2d4e7496aa0e4643bdb3/src%2Flib%2Fgetopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fgetopts.rs?ref=a0f855e48812d8ce5c0c2d4e7496aa0e4643bdb3", "patch": "@@ -98,6 +98,7 @@ tag fail_ {\n     unrecognized_option(str);\n     option_missing(str);\n     option_duplicated(str);\n+    unexpected_argument(str);\n }\n \n fn fail_str(fail_ f) -> str {\n@@ -114,6 +115,9 @@ fn fail_str(fail_ f) -> str {\n         case (option_duplicated(?nm)) {\n             ret \"option '\" + nm + \"' given more than once.\";\n         }\n+        case (unexpected_argument(?nm)) {\n+            ret \"Option \" + nm + \" does not take an argument.\";\n+        }\n     }\n }\n \n@@ -173,6 +177,9 @@ fn getopts(vec[str] args, vec[opt] opts) -> result {\n                 }\n                 alt (opts.(optid).hasarg) {\n                     case (no) {\n+                        if (!option::is_none[str](i_arg)) {\n+                            ret failure(unexpected_argument(name_str(nm)));\n+                        }\n                         vec::push[optval](vals.(optid), given);\n                     }\n                     case (maybe) {"}, {"sha": "044da1ae7ecd0bf175afe2e7ed516c5ae0bb88d0", "filename": "src/test/run-pass/lib-getopts.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a0f855e48812d8ce5c0c2d4e7496aa0e4643bdb3/src%2Ftest%2Frun-pass%2Flib-getopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0f855e48812d8ce5c0c2d4e7496aa0e4643bdb3/src%2Ftest%2Frun-pass%2Flib-getopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flib-getopts.rs?ref=a0f855e48812d8ce5c0c2d4e7496aa0e4643bdb3", "patch": "@@ -9,6 +9,7 @@ tag fail_type {\n   unrecognized_option;\n   option_missing;\n   option_duplicated;\n+  unexpected_argument;\n }\n \n fn check_fail_type(opt::fail_ f, fail_type ft) {\n@@ -25,6 +26,9 @@ fn check_fail_type(opt::fail_ f, fail_type ft) {\n     case (opt::option_duplicated(_)) {\n       assert (ft == option_duplicated);\n     }\n+    case (opt::unexpected_argument(_)) {\n+      assert (ft == unexpected_argument);\n+    }\n     case (_) { fail; }\n   }\n }\n@@ -262,7 +266,10 @@ fn test_optflag_long_arg() {\n   auto opts = [opt::optflag(\"test\")];\n   auto res = opt::getopts(args, opts);\n   alt (res) {\n-    case (opt::failure(?f)) { log_err opt::fail_str(f); }\n+    case (opt::failure(?f)) {\n+      log_err opt::fail_str(f);\n+      check_fail_type(f, unexpected_argument);\n+    }\n     case (_) { fail; }\n   }\n }\n@@ -511,9 +518,7 @@ fn main() {\n \n   test_optflag_long();\n   test_optflag_long_missing();\n-  // FIXME: Currently long flags will silently accept arguments\n-  // when it should probably report an error\n-  //test_optflag_long_arg();\n+  test_optflag_long_arg();\n   test_optflag_long_multi();\n \n   test_optflag_short();"}]}