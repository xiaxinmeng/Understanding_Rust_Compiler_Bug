{"sha": "ee6503a706da6e423b7d5fa88ea41cc2f7f079fe", "node_id": "C_kwDOAAsO6NoAKGVlNjUwM2E3MDZkYTZlNDIzYjdkNWZhODhlYTQxY2MyZjdmMDc5ZmU", "commit": {"author": {"name": "Jakob Degen", "email": "jakob.e.degen@gmail.com", "date": "2023-01-02T06:01:29Z"}, "committer": {"name": "Jakob Degen", "email": "jakob.e.degen@gmail.com", "date": "2023-01-02T06:01:29Z"}, "message": "Reenable limited top-down MIR inlining", "tree": {"sha": "5968386e5f8698b49acf72746f2bc60e049db918", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5968386e5f8698b49acf72746f2bc60e049db918"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee6503a706da6e423b7d5fa88ea41cc2f7f079fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee6503a706da6e423b7d5fa88ea41cc2f7f079fe", "html_url": "https://github.com/rust-lang/rust/commit/ee6503a706da6e423b7d5fa88ea41cc2f7f079fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee6503a706da6e423b7d5fa88ea41cc2f7f079fe/comments", "author": {"login": "JakobDegen", "id": 51179609, "node_id": "MDQ6VXNlcjUxMTc5NjA5", "avatar_url": "https://avatars.githubusercontent.com/u/51179609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JakobDegen", "html_url": "https://github.com/JakobDegen", "followers_url": "https://api.github.com/users/JakobDegen/followers", "following_url": "https://api.github.com/users/JakobDegen/following{/other_user}", "gists_url": "https://api.github.com/users/JakobDegen/gists{/gist_id}", "starred_url": "https://api.github.com/users/JakobDegen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JakobDegen/subscriptions", "organizations_url": "https://api.github.com/users/JakobDegen/orgs", "repos_url": "https://api.github.com/users/JakobDegen/repos", "events_url": "https://api.github.com/users/JakobDegen/events{/privacy}", "received_events_url": "https://api.github.com/users/JakobDegen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JakobDegen", "id": 51179609, "node_id": "MDQ6VXNlcjUxMTc5NjA5", "avatar_url": "https://avatars.githubusercontent.com/u/51179609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JakobDegen", "html_url": "https://github.com/JakobDegen", "followers_url": "https://api.github.com/users/JakobDegen/followers", "following_url": "https://api.github.com/users/JakobDegen/following{/other_user}", "gists_url": "https://api.github.com/users/JakobDegen/gists{/gist_id}", "starred_url": "https://api.github.com/users/JakobDegen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JakobDegen/subscriptions", "organizations_url": "https://api.github.com/users/JakobDegen/orgs", "repos_url": "https://api.github.com/users/JakobDegen/repos", "events_url": "https://api.github.com/users/JakobDegen/events{/privacy}", "received_events_url": "https://api.github.com/users/JakobDegen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb6e76df06dcbdb96e634eb28a49f161d70ab844", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb6e76df06dcbdb96e634eb28a49f161d70ab844", "html_url": "https://github.com/rust-lang/rust/commit/bb6e76df06dcbdb96e634eb28a49f161d70ab844"}], "stats": {"total": 317, "additions": 220, "deletions": 97}, "files": [{"sha": "4219e6280ebbca481424a6b7ee3bbef6ed25d41c", "filename": "compiler/rustc_mir_transform/src/inline.rs", "status": "modified", "additions": 36, "deletions": 6, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/ee6503a706da6e423b7d5fa88ea41cc2f7f079fe/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee6503a706da6e423b7d5fa88ea41cc2f7f079fe/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs?ref=ee6503a706da6e423b7d5fa88ea41cc2f7f079fe", "patch": "@@ -1,6 +1,7 @@\n //! Inlining pass for MIR functions\n use crate::deref_separator::deref_finder;\n use rustc_attr::InlineAttr;\n+use rustc_hir::def_id::DefId;\n use rustc_index::bit_set::BitSet;\n use rustc_index::vec::Idx;\n use rustc_middle::middle::codegen_fn_attrs::{CodegenFnAttrFlags, CodegenFnAttrs};\n@@ -27,6 +28,8 @@ const RESUME_PENALTY: usize = 45;\n \n const UNKNOWN_SIZE_COST: usize = 10;\n \n+const TOP_DOWN_DEPTH_LIMIT: usize = 5;\n+\n pub struct Inline;\n \n #[derive(Copy, Clone, Debug)]\n@@ -86,8 +89,13 @@ fn inline<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) -> bool {\n \n     let param_env = tcx.param_env_reveal_all_normalized(def_id);\n \n-    let mut this =\n-        Inliner { tcx, param_env, codegen_fn_attrs: tcx.codegen_fn_attrs(def_id), changed: false };\n+    let mut this = Inliner {\n+        tcx,\n+        param_env,\n+        codegen_fn_attrs: tcx.codegen_fn_attrs(def_id),\n+        history: Vec::new(),\n+        changed: false,\n+    };\n     let blocks = BasicBlock::new(0)..body.basic_blocks.next_index();\n     this.process_blocks(body, blocks);\n     this.changed\n@@ -98,12 +106,26 @@ struct Inliner<'tcx> {\n     param_env: ParamEnv<'tcx>,\n     /// Caller codegen attributes.\n     codegen_fn_attrs: &'tcx CodegenFnAttrs,\n+    /// Stack of inlined instances.\n+    /// We only check the `DefId` and not the substs because we want to\n+    /// avoid inlining cases of polymorphic recursion.\n+    /// The number of `DefId`s is finite, so checking history is enough\n+    /// to ensure that we do not loop endlessly while inlining.\n+    history: Vec<DefId>,\n     /// Indicates that the caller body has been modified.\n     changed: bool,\n }\n \n impl<'tcx> Inliner<'tcx> {\n     fn process_blocks(&mut self, caller_body: &mut Body<'tcx>, blocks: Range<BasicBlock>) {\n+        // How many callsites in this body are we allowed to inline? We need to limit this in order\n+        // to prevent super-linear growth in MIR size\n+        let inline_limit = match self.history.len() {\n+            0 => usize::MAX,\n+            1..=TOP_DOWN_DEPTH_LIMIT => 1,\n+            _ => return,\n+        };\n+        let mut inlined_count = 0;\n         for bb in blocks {\n             let bb_data = &caller_body[bb];\n             if bb_data.is_cleanup {\n@@ -122,12 +144,16 @@ impl<'tcx> Inliner<'tcx> {\n                     debug!(\"not-inlined {} [{}]\", callsite.callee, reason);\n                     continue;\n                 }\n-                Ok(_) => {\n+                Ok(new_blocks) => {\n                     debug!(\"inlined {}\", callsite.callee);\n                     self.changed = true;\n-                    // We could process the blocks returned by `try_inlining` here. However, that\n-                    // leads to exponential compile times due to the top-down nature of this kind\n-                    // of inlining.\n+                    inlined_count += 1;\n+                    if inlined_count == inline_limit {\n+                        return;\n+                    }\n+                    self.history.push(callsite.callee.def_id());\n+                    self.process_blocks(caller_body, new_blocks);\n+                    self.history.pop();\n                 }\n             }\n         }\n@@ -301,6 +327,10 @@ impl<'tcx> Inliner<'tcx> {\n                     return None;\n                 }\n \n+                if self.history.contains(&callee.def_id()) {\n+                    return None;\n+                }\n+\n                 let fn_sig = self.tcx.bound_fn_sig(def_id).subst(self.tcx, substs);\n                 let source_info = SourceInfo { span: fn_span, ..terminator.source_info };\n "}, {"sha": "5f3ee467c88cb026144d63eff156b74d19306742", "filename": "src/test/mir-opt/inline/cycle.g.Inline.diff", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ee6503a706da6e423b7d5fa88ea41cc2f7f079fe/src%2Ftest%2Fmir-opt%2Finline%2Fcycle.g.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ee6503a706da6e423b7d5fa88ea41cc2f7f079fe/src%2Ftest%2Fmir-opt%2Finline%2Fcycle.g.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fcycle.g.Inline.diff?ref=ee6503a706da6e423b7d5fa88ea41cc2f7f079fe", "patch": "@@ -10,6 +10,8 @@\n +         let _3: ();                      // in scope 1 at $DIR/cycle.rs:6:5: 6:8\n +         let mut _4: &fn() {main};        // in scope 1 at $DIR/cycle.rs:6:5: 6:6\n +         let mut _5: ();                  // in scope 1 at $DIR/cycle.rs:6:5: 6:8\n++         scope 2 (inlined <fn() {main} as Fn<()>>::call - shim(fn() {main})) { // at $DIR/cycle.rs:6:5: 6:8\n++         }\n +     }\n   \n       bb0: {\n@@ -27,10 +29,7 @@\n +         StorageLive(_4);                 // scope 1 at $DIR/cycle.rs:6:5: 6:6\n +         _4 = &_2;                        // scope 1 at $DIR/cycle.rs:6:5: 6:6\n +         StorageLive(_5);                 // scope 1 at $DIR/cycle.rs:6:5: 6:8\n-+         _3 = <fn() {main} as Fn<()>>::call(move _4, move _5) -> [return: bb2, unwind: bb3]; // scope 1 at $DIR/cycle.rs:6:5: 6:8\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/cycle.rs:6:5: 6:6\n-+                                          // + literal: Const { ty: for<'a> extern \"rust-call\" fn(&'a fn() {main}, ()) -> <fn() {main} as FnOnce<()>>::Output {<fn() {main} as Fn<()>>::call}, val: Value(<ZST>) }\n++         _3 = move (*_4)() -> [return: bb4, unwind: bb2]; // scope 2 at $SRC_DIR/core/src/ops/function.rs:LL:COL\n       }\n   \n       bb1: {\n@@ -40,19 +39,19 @@\n           return;                          // scope 0 at $DIR/cycle.rs:+2:2: +2:2\n +     }\n + \n-+     bb2: {\n-+         StorageDead(_5);                 // scope 1 at $DIR/cycle.rs:6:7: 6:8\n-+         StorageDead(_4);                 // scope 1 at $DIR/cycle.rs:6:7: 6:8\n-+         StorageDead(_3);                 // scope 1 at $DIR/cycle.rs:6:8: 6:9\n-+         drop(_2) -> bb1;                 // scope 1 at $DIR/cycle.rs:7:1: 7:2\n++     bb2 (cleanup): {\n++         drop(_2) -> bb3;                 // scope 1 at $DIR/cycle.rs:7:1: 7:2\n +     }\n + \n +     bb3 (cleanup): {\n-+         drop(_2) -> bb4;                 // scope 1 at $DIR/cycle.rs:7:1: 7:2\n++         resume;                          // scope 1 at $DIR/cycle.rs:5:1: 7:2\n +     }\n + \n-+     bb4 (cleanup): {\n-+         resume;                          // scope 1 at $DIR/cycle.rs:5:1: 7:2\n++     bb4: {\n++         StorageDead(_5);                 // scope 1 at $DIR/cycle.rs:6:7: 6:8\n++         StorageDead(_4);                 // scope 1 at $DIR/cycle.rs:6:7: 6:8\n++         StorageDead(_3);                 // scope 1 at $DIR/cycle.rs:6:8: 6:9\n++         drop(_2) -> bb1;                 // scope 1 at $DIR/cycle.rs:7:1: 7:2\n       }\n   }\n   "}, {"sha": "6b4c63bbd917f61b488587ec177c7ec8d02b848a", "filename": "src/test/mir-opt/inline/cycle.main.Inline.diff", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ee6503a706da6e423b7d5fa88ea41cc2f7f079fe/src%2Ftest%2Fmir-opt%2Finline%2Fcycle.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ee6503a706da6e423b7d5fa88ea41cc2f7f079fe/src%2Ftest%2Fmir-opt%2Finline%2Fcycle.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fcycle.main.Inline.diff?ref=ee6503a706da6e423b7d5fa88ea41cc2f7f079fe", "patch": "@@ -10,6 +10,8 @@\n +         let _3: ();                      // in scope 1 at $DIR/cycle.rs:6:5: 6:8\n +         let mut _4: &fn() {g};           // in scope 1 at $DIR/cycle.rs:6:5: 6:6\n +         let mut _5: ();                  // in scope 1 at $DIR/cycle.rs:6:5: 6:8\n++         scope 2 (inlined <fn() {g} as Fn<()>>::call - shim(fn() {g})) { // at $DIR/cycle.rs:6:5: 6:8\n++         }\n +     }\n   \n       bb0: {\n@@ -27,10 +29,7 @@\n +         StorageLive(_4);                 // scope 1 at $DIR/cycle.rs:6:5: 6:6\n +         _4 = &_2;                        // scope 1 at $DIR/cycle.rs:6:5: 6:6\n +         StorageLive(_5);                 // scope 1 at $DIR/cycle.rs:6:5: 6:8\n-+         _3 = <fn() {g} as Fn<()>>::call(move _4, move _5) -> [return: bb2, unwind: bb3]; // scope 1 at $DIR/cycle.rs:6:5: 6:8\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/cycle.rs:6:5: 6:6\n-+                                          // + literal: Const { ty: for<'a> extern \"rust-call\" fn(&'a fn() {g}, ()) -> <fn() {g} as FnOnce<()>>::Output {<fn() {g} as Fn<()>>::call}, val: Value(<ZST>) }\n++         _3 = move (*_4)() -> [return: bb4, unwind: bb2]; // scope 2 at $SRC_DIR/core/src/ops/function.rs:LL:COL\n       }\n   \n       bb1: {\n@@ -40,19 +39,19 @@\n           return;                          // scope 0 at $DIR/cycle.rs:+2:2: +2:2\n +     }\n + \n-+     bb2: {\n-+         StorageDead(_5);                 // scope 1 at $DIR/cycle.rs:6:7: 6:8\n-+         StorageDead(_4);                 // scope 1 at $DIR/cycle.rs:6:7: 6:8\n-+         StorageDead(_3);                 // scope 1 at $DIR/cycle.rs:6:8: 6:9\n-+         drop(_2) -> bb1;                 // scope 1 at $DIR/cycle.rs:7:1: 7:2\n++     bb2 (cleanup): {\n++         drop(_2) -> bb3;                 // scope 1 at $DIR/cycle.rs:7:1: 7:2\n +     }\n + \n +     bb3 (cleanup): {\n-+         drop(_2) -> bb4;                 // scope 1 at $DIR/cycle.rs:7:1: 7:2\n++         resume;                          // scope 1 at $DIR/cycle.rs:5:1: 7:2\n +     }\n + \n-+     bb4 (cleanup): {\n-+         resume;                          // scope 1 at $DIR/cycle.rs:5:1: 7:2\n++     bb4: {\n++         StorageDead(_5);                 // scope 1 at $DIR/cycle.rs:6:7: 6:8\n++         StorageDead(_4);                 // scope 1 at $DIR/cycle.rs:6:7: 6:8\n++         StorageDead(_3);                 // scope 1 at $DIR/cycle.rs:6:8: 6:9\n++         drop(_2) -> bb1;                 // scope 1 at $DIR/cycle.rs:7:1: 7:2\n       }\n   }\n   "}, {"sha": "7fd62be7ab9c35cedea97f6a4727f9742a89d107", "filename": "src/test/mir-opt/inline/exponential_runtime.main.Inline.diff", "status": "modified", "additions": 39, "deletions": 14, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/ee6503a706da6e423b7d5fa88ea41cc2f7f079fe/src%2Ftest%2Fmir-opt%2Finline%2Fexponential_runtime.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ee6503a706da6e423b7d5fa88ea41cc2f7f079fe/src%2Ftest%2Fmir-opt%2Finline%2Fexponential_runtime.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fexponential_runtime.main.Inline.diff?ref=ee6503a706da6e423b7d5fa88ea41cc2f7f079fe", "patch": "@@ -8,43 +8,68 @@\n +         let _2: ();                      // in scope 1 at $DIR/exponential_runtime.rs:73:9: 73:25\n +         let _3: ();                      // in scope 1 at $DIR/exponential_runtime.rs:74:9: 74:25\n +         let _4: ();                      // in scope 1 at $DIR/exponential_runtime.rs:75:9: 75:25\n++         scope 2 (inlined <() as F>::call) { // at $DIR/exponential_runtime.rs:73:9: 73:25\n++             let _5: ();                  // in scope 2 at $DIR/exponential_runtime.rs:61:9: 61:25\n++             let _6: ();                  // in scope 2 at $DIR/exponential_runtime.rs:62:9: 62:25\n++             let _7: ();                  // in scope 2 at $DIR/exponential_runtime.rs:63:9: 63:25\n++         }\n +     }\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/exponential_runtime.rs:+1:5: +1:22\n -         _1 = <() as G>::call() -> bb1;   // scope 0 at $DIR/exponential_runtime.rs:+1:5: +1:22\n +         StorageLive(_2);                 // scope 1 at $DIR/exponential_runtime.rs:73:9: 73:25\n-+         _2 = <() as F>::call() -> bb1;   // scope 1 at $DIR/exponential_runtime.rs:73:9: 73:25\n++         StorageLive(_5);                 // scope 2 at $DIR/exponential_runtime.rs:61:9: 61:25\n++         _5 = <() as E>::call() -> bb3;   // scope 2 at $DIR/exponential_runtime.rs:61:9: 61:25\n                                            // mir::Constant\n -                                          // + span: $DIR/exponential_runtime.rs:86:5: 86:20\n -                                          // + literal: Const { ty: fn() {<() as G>::call}, val: Value(<ZST>) }\n-+                                          // + span: $DIR/exponential_runtime.rs:73:9: 73:23\n-+                                          // + literal: Const { ty: fn() {<() as F>::call}, val: Value(<ZST>) }\n++                                          // + span: $DIR/exponential_runtime.rs:61:9: 61:23\n++                                          // + literal: Const { ty: fn() {<() as E>::call}, val: Value(<ZST>) }\n       }\n   \n       bb1: {\n-+         StorageDead(_2);                 // scope 1 at $DIR/exponential_runtime.rs:73:25: 73:26\n-+         StorageLive(_3);                 // scope 1 at $DIR/exponential_runtime.rs:74:9: 74:25\n-+         _3 = <() as F>::call() -> bb2;   // scope 1 at $DIR/exponential_runtime.rs:74:9: 74:25\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/exponential_runtime.rs:74:9: 74:23\n-+                                          // + literal: Const { ty: fn() {<() as F>::call}, val: Value(<ZST>) }\n-+     }\n-+ \n-+     bb2: {\n +         StorageDead(_3);                 // scope 1 at $DIR/exponential_runtime.rs:74:25: 74:26\n +         StorageLive(_4);                 // scope 1 at $DIR/exponential_runtime.rs:75:9: 75:25\n-+         _4 = <() as F>::call() -> bb3;   // scope 1 at $DIR/exponential_runtime.rs:75:9: 75:25\n++         _4 = <() as F>::call() -> bb2;   // scope 1 at $DIR/exponential_runtime.rs:75:9: 75:25\n +                                          // mir::Constant\n +                                          // + span: $DIR/exponential_runtime.rs:75:9: 75:23\n +                                          // + literal: Const { ty: fn() {<() as F>::call}, val: Value(<ZST>) }\n +     }\n + \n-+     bb3: {\n++     bb2: {\n +         StorageDead(_4);                 // scope 1 at $DIR/exponential_runtime.rs:75:25: 75:26\n           StorageDead(_1);                 // scope 0 at $DIR/exponential_runtime.rs:+1:22: +1:23\n           _0 = const ();                   // scope 0 at $DIR/exponential_runtime.rs:+0:11: +2:2\n           return;                          // scope 0 at $DIR/exponential_runtime.rs:+2:2: +2:2\n++     }\n++ \n++     bb3: {\n++         StorageDead(_5);                 // scope 2 at $DIR/exponential_runtime.rs:61:25: 61:26\n++         StorageLive(_6);                 // scope 2 at $DIR/exponential_runtime.rs:62:9: 62:25\n++         _6 = <() as E>::call() -> bb4;   // scope 2 at $DIR/exponential_runtime.rs:62:9: 62:25\n++                                          // mir::Constant\n++                                          // + span: $DIR/exponential_runtime.rs:62:9: 62:23\n++                                          // + literal: Const { ty: fn() {<() as E>::call}, val: Value(<ZST>) }\n++     }\n++ \n++     bb4: {\n++         StorageDead(_6);                 // scope 2 at $DIR/exponential_runtime.rs:62:25: 62:26\n++         StorageLive(_7);                 // scope 2 at $DIR/exponential_runtime.rs:63:9: 63:25\n++         _7 = <() as E>::call() -> bb5;   // scope 2 at $DIR/exponential_runtime.rs:63:9: 63:25\n++                                          // mir::Constant\n++                                          // + span: $DIR/exponential_runtime.rs:63:9: 63:23\n++                                          // + literal: Const { ty: fn() {<() as E>::call}, val: Value(<ZST>) }\n++     }\n++ \n++     bb5: {\n++         StorageDead(_7);                 // scope 2 at $DIR/exponential_runtime.rs:63:25: 63:26\n++         StorageDead(_2);                 // scope 1 at $DIR/exponential_runtime.rs:73:25: 73:26\n++         StorageLive(_3);                 // scope 1 at $DIR/exponential_runtime.rs:74:9: 74:25\n++         _3 = <() as F>::call() -> bb1;   // scope 1 at $DIR/exponential_runtime.rs:74:9: 74:25\n++                                          // mir::Constant\n++                                          // + span: $DIR/exponential_runtime.rs:74:9: 74:23\n++                                          // + literal: Const { ty: fn() {<() as F>::call}, val: Value(<ZST>) }\n       }\n   }\n   "}, {"sha": "5510cd7bc8ced1d003fbd3b3fd914263c1466c44", "filename": "src/test/mir-opt/inline/inline_cycle.one.Inline.diff", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ee6503a706da6e423b7d5fa88ea41cc2f7f079fe/src%2Ftest%2Fmir-opt%2Finline%2Finline_cycle.one.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ee6503a706da6e423b7d5fa88ea41cc2f7f079fe/src%2Ftest%2Fmir-opt%2Finline%2Finline_cycle.one.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_cycle.one.Inline.diff?ref=ee6503a706da6e423b7d5fa88ea41cc2f7f079fe", "patch": "@@ -5,17 +5,20 @@\n       let mut _0: ();                      // return place in scope 0 at $DIR/inline_cycle.rs:+0:10: +0:10\n       let _1: ();                          // in scope 0 at $DIR/inline_cycle.rs:+1:5: +1:24\n +     scope 1 (inlined <C as Call>::call) { // at $DIR/inline_cycle.rs:14:5: 14:24\n++         scope 2 (inlined <A<C> as Call>::call) { // at $DIR/inline_cycle.rs:43:9: 43:23\n++             scope 3 (inlined <B<C> as Call>::call) { // at $DIR/inline_cycle.rs:28:9: 28:31\n++             }\n++         }\n +     }\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/inline_cycle.rs:+1:5: +1:24\n -         _1 = <C as Call>::call() -> bb1; // scope 0 at $DIR/inline_cycle.rs:+1:5: +1:24\n-+         _1 = <A<C> as Call>::call() -> bb1; // scope 1 at $DIR/inline_cycle.rs:43:9: 43:23\n++         _1 = <C as Call>::call() -> bb1; // scope 3 at $DIR/inline_cycle.rs:36:9: 36:28\n                                            // mir::Constant\n -                                          // + span: $DIR/inline_cycle.rs:14:5: 14:22\n--                                          // + literal: Const { ty: fn() {<C as Call>::call}, val: Value(<ZST>) }\n-+                                          // + span: $DIR/inline_cycle.rs:43:9: 43:21\n-+                                          // + literal: Const { ty: fn() {<A<C> as Call>::call}, val: Value(<ZST>) }\n++                                          // + span: $DIR/inline_cycle.rs:36:9: 36:26\n+                                           // + literal: Const { ty: fn() {<C as Call>::call}, val: Value(<ZST>) }\n       }\n   \n       bb1: {"}, {"sha": "64c0065b5436dea0b630e1879b8a39ec1d2b8e5d", "filename": "src/test/mir-opt/inline/inline_cycle.two.Inline.diff", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ee6503a706da6e423b7d5fa88ea41cc2f7f079fe/src%2Ftest%2Fmir-opt%2Finline%2Finline_cycle.two.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ee6503a706da6e423b7d5fa88ea41cc2f7f079fe/src%2Ftest%2Fmir-opt%2Finline%2Finline_cycle.two.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_cycle.two.Inline.diff?ref=ee6503a706da6e423b7d5fa88ea41cc2f7f079fe", "patch": "@@ -9,6 +9,8 @@\n +         debug f => _2;                   // in scope 1 at $DIR/inline_cycle.rs:53:22: 53:23\n +         let _3: ();                      // in scope 1 at $DIR/inline_cycle.rs:54:5: 54:8\n +         let mut _4: ();                  // in scope 1 at $DIR/inline_cycle.rs:54:5: 54:8\n++         scope 2 (inlined <fn() {f} as FnOnce<()>>::call_once - shim(fn() {f})) { // at $DIR/inline_cycle.rs:54:5: 54:8\n++         }\n +     }\n   \n       bb0: {\n@@ -24,10 +26,7 @@\n                                            // + literal: Const { ty: fn() {f}, val: Value(<ZST>) }\n +         StorageLive(_3);                 // scope 1 at $DIR/inline_cycle.rs:54:5: 54:8\n +         StorageLive(_4);                 // scope 1 at $DIR/inline_cycle.rs:54:5: 54:8\n-+         _3 = <fn() {f} as FnOnce<()>>::call_once(move _2, move _4) -> bb1; // scope 1 at $DIR/inline_cycle.rs:54:5: 54:8\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/inline_cycle.rs:54:5: 54:6\n-+                                          // + literal: Const { ty: extern \"rust-call\" fn(fn() {f}, ()) -> <fn() {f} as FnOnce<()>>::Output {<fn() {f} as FnOnce<()>>::call_once}, val: Value(<ZST>) }\n++         _3 = move _2() -> bb1;           // scope 2 at $SRC_DIR/core/src/ops/function.rs:LL:COL\n       }\n   \n       bb1: {"}, {"sha": "52debab4dd1c0348ed20ea66294415146254c6f6", "filename": "src/test/mir-opt/inline/inline_cycle_generic.main.Inline.diff", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ee6503a706da6e423b7d5fa88ea41cc2f7f079fe/src%2Ftest%2Fmir-opt%2Finline%2Finline_cycle_generic.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ee6503a706da6e423b7d5fa88ea41cc2f7f079fe/src%2Ftest%2Fmir-opt%2Finline%2Finline_cycle_generic.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_cycle_generic.main.Inline.diff?ref=ee6503a706da6e423b7d5fa88ea41cc2f7f079fe", "patch": "@@ -6,18 +6,21 @@\n       let _1: ();                          // in scope 0 at $DIR/inline_cycle_generic.rs:+1:5: +1:24\n +     scope 1 (inlined <C as Call>::call) { // at $DIR/inline_cycle_generic.rs:9:5: 9:24\n +         scope 2 (inlined <B<A> as Call>::call) { // at $DIR/inline_cycle_generic.rs:38:9: 38:31\n++             scope 3 (inlined <A as Call>::call) { // at $DIR/inline_cycle_generic.rs:31:9: 31:28\n++                 scope 4 (inlined <B<C> as Call>::call) { // at $DIR/inline_cycle_generic.rs:23:9: 23:31\n++                 }\n++             }\n +         }\n +     }\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/inline_cycle_generic.rs:+1:5: +1:24\n -         _1 = <C as Call>::call() -> bb1; // scope 0 at $DIR/inline_cycle_generic.rs:+1:5: +1:24\n-+         _1 = <A as Call>::call() -> bb1; // scope 2 at $DIR/inline_cycle_generic.rs:31:9: 31:28\n++         _1 = <C as Call>::call() -> bb1; // scope 4 at $DIR/inline_cycle_generic.rs:31:9: 31:28\n                                            // mir::Constant\n -                                          // + span: $DIR/inline_cycle_generic.rs:9:5: 9:22\n--                                          // + literal: Const { ty: fn() {<C as Call>::call}, val: Value(<ZST>) }\n +                                          // + span: $DIR/inline_cycle_generic.rs:31:9: 31:26\n-+                                          // + literal: Const { ty: fn() {<A as Call>::call}, val: Value(<ZST>) }\n+                                           // + literal: Const { ty: fn() {<C as Call>::call}, val: Value(<ZST>) }\n       }\n   \n       bb1: {"}, {"sha": "f82fcf4c82129634ee7d4a2288e85226031378fe", "filename": "src/test/mir-opt/inline/inline_diverging.h.Inline.diff", "status": "modified", "additions": 21, "deletions": 22, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/ee6503a706da6e423b7d5fa88ea41cc2f7f079fe/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.h.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ee6503a706da6e423b7d5fa88ea41cc2f7f079fe/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.h.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_diverging.h.Inline.diff?ref=ee6503a706da6e423b7d5fa88ea41cc2f7f079fe", "patch": "@@ -20,6 +20,8 @@\n +                 debug b => _9;           // in scope 3 at $DIR/inline_diverging.rs:28:9: 28:10\n +             }\n +         }\n++         scope 4 (inlined <fn() -> ! {sleep} as Fn<()>>::call - shim(fn() -> ! {sleep})) { // at $DIR/inline_diverging.rs:27:13: 27:16\n++         }\n +     }\n   \n       bb0: {\n@@ -38,25 +40,10 @@\n +         StorageLive(_4);                 // scope 1 at $DIR/inline_diverging.rs:27:13: 27:14\n +         _4 = &_2;                        // scope 1 at $DIR/inline_diverging.rs:27:13: 27:14\n +         StorageLive(_5);                 // scope 1 at $DIR/inline_diverging.rs:27:13: 27:16\n-+         _3 = <fn() -> ! {sleep} as Fn<()>>::call(move _4, move _5) -> [return: bb1, unwind: bb5]; // scope 1 at $DIR/inline_diverging.rs:27:13: 27:16\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/inline_diverging.rs:27:13: 27:14\n-+                                          // + literal: Const { ty: for<'a> extern \"rust-call\" fn(&'a fn() -> ! {sleep}, ()) -> <fn() -> ! {sleep} as FnOnce<()>>::Output {<fn() -> ! {sleep} as Fn<()>>::call}, val: Value(<ZST>) }\n++         _3 = move (*_4)() -> [return: bb6, unwind: bb4]; // scope 4 at $SRC_DIR/core/src/ops/function.rs:LL:COL\n +     }\n + \n +     bb1: {\n-+         StorageDead(_5);                 // scope 1 at $DIR/inline_diverging.rs:27:15: 27:16\n-+         StorageDead(_4);                 // scope 1 at $DIR/inline_diverging.rs:27:15: 27:16\n-+         StorageLive(_6);                 // scope 2 at $DIR/inline_diverging.rs:28:13: 28:14\n-+         _6 = &_2;                        // scope 2 at $DIR/inline_diverging.rs:28:13: 28:14\n-+         StorageLive(_7);                 // scope 2 at $DIR/inline_diverging.rs:28:13: 28:16\n-+         _9 = <fn() -> ! {sleep} as Fn<()>>::call(move _6, move _7) -> [return: bb2, unwind: bb4]; // scope 2 at $DIR/inline_diverging.rs:28:13: 28:16\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/inline_diverging.rs:28:13: 28:14\n-+                                          // + literal: Const { ty: for<'a> extern \"rust-call\" fn(&'a fn() -> ! {sleep}, ()) -> <fn() -> ! {sleep} as FnOnce<()>>::Output {<fn() -> ! {sleep} as Fn<()>>::call}, val: Value(<ZST>) }\n-+     }\n-+ \n-+     bb2: {\n +         StorageDead(_7);                 // scope 2 at $DIR/inline_diverging.rs:28:15: 28:16\n +         StorageDead(_6);                 // scope 2 at $DIR/inline_diverging.rs:28:15: 28:16\n +         StorageLive(_8);                 // scope 3 at $DIR/inline_diverging.rs:29:6: 29:7\n@@ -66,23 +53,35 @@\n +         (_1.1: !) = move _9;             // scope 3 at $DIR/inline_diverging.rs:29:5: 29:11\n +         StorageDead(_8);                 // scope 3 at $DIR/inline_diverging.rs:29:10: 29:11\n +         StorageDead(_3);                 // scope 1 at $DIR/inline_diverging.rs:30:1: 30:2\n-+         drop(_2) -> bb3;                 // scope 1 at $DIR/inline_diverging.rs:30:1: 30:2\n++         drop(_2) -> bb2;                 // scope 1 at $DIR/inline_diverging.rs:30:1: 30:2\n +     }\n + \n-+     bb3: {\n++     bb2: {\n +         unreachable;                     // scope 0 at $DIR/inline_diverging.rs:30:2: 30:2\n +     }\n + \n++     bb3 (cleanup): {\n++         drop(_3) -> bb4;                 // scope 1 at $DIR/inline_diverging.rs:30:1: 30:2\n++     }\n++ \n +     bb4 (cleanup): {\n-+         drop(_3) -> bb5;                 // scope 1 at $DIR/inline_diverging.rs:30:1: 30:2\n++         drop(_2) -> bb5;                 // scope 1 at $DIR/inline_diverging.rs:30:1: 30:2\n +     }\n + \n +     bb5 (cleanup): {\n-+         drop(_2) -> bb6;                 // scope 1 at $DIR/inline_diverging.rs:30:1: 30:2\n++         resume;                          // scope 1 at $DIR/inline_diverging.rs:26:1: 30:2\n +     }\n + \n-+     bb6 (cleanup): {\n-+         resume;                          // scope 1 at $DIR/inline_diverging.rs:26:1: 30:2\n++     bb6: {\n++         StorageDead(_5);                 // scope 1 at $DIR/inline_diverging.rs:27:15: 27:16\n++         StorageDead(_4);                 // scope 1 at $DIR/inline_diverging.rs:27:15: 27:16\n++         StorageLive(_6);                 // scope 2 at $DIR/inline_diverging.rs:28:13: 28:14\n++         _6 = &_2;                        // scope 2 at $DIR/inline_diverging.rs:28:13: 28:14\n++         StorageLive(_7);                 // scope 2 at $DIR/inline_diverging.rs:28:13: 28:16\n++         _9 = <fn() -> ! {sleep} as Fn<()>>::call(move _6, move _7) -> [return: bb1, unwind: bb3]; // scope 2 at $DIR/inline_diverging.rs:28:13: 28:16\n++                                          // mir::Constant\n++                                          // + span: $DIR/inline_diverging.rs:28:13: 28:14\n++                                          // + literal: Const { ty: for<'a> extern \"rust-call\" fn(&'a fn() -> ! {sleep}, ()) -> <fn() -> ! {sleep} as FnOnce<()>>::Output {<fn() -> ! {sleep} as Fn<()>>::call}, val: Value(<ZST>) }\n       }\n   }\n   "}, {"sha": "e57544e09e2a0f6a137240c628ad852ebeff31a3", "filename": "src/test/mir-opt/separate_const_switch.identity.SeparateConstSwitch.diff", "status": "modified", "additions": 15, "deletions": 20, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/ee6503a706da6e423b7d5fa88ea41cc2f7f079fe/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.identity.SeparateConstSwitch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ee6503a706da6e423b7d5fa88ea41cc2f7f079fe/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.identity.SeparateConstSwitch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.identity.SeparateConstSwitch.diff?ref=ee6503a706da6e423b7d5fa88ea41cc2f7f079fe", "patch": "@@ -22,6 +22,9 @@\n                   let mut _18: i32;        // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n                   scope 9 {\n                       debug e => _16;      // in scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n+                      scope 10 (inlined <i32 as From<i32>>::from) { // at $SRC_DIR/core/src/result.rs:LL:COL\n+                          debug t => _18;  // in scope 10 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+                      }\n                   }\n               }\n           }\n@@ -92,11 +95,18 @@\n           StorageLive(_17);                // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n           StorageLive(_18);                // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n           _18 = move _16;                  // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n--         _17 = <i32 as From<i32>>::from(move _18) -> bb8; // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n-+         _17 = <i32 as From<i32>>::from(move _18) -> bb7; // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n-                                           // mir::Constant\n-                                           // + span: $SRC_DIR/core/src/result.rs:LL:COL\n-                                           // + literal: Const { ty: fn(i32) -> i32 {<i32 as From<i32>>::from}, val: Value(<ZST>) }\n+          _17 = move _18;                  // scope 10 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+          StorageDead(_18);                // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n+          Deinit(_0);                      // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n+          ((_0 as Err).0: i32) = move _17; // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n+          discriminant(_0) = 1;            // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n+          StorageDead(_17);                // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n+          StorageDead(_16);                // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n+          StorageDead(_8);                 // scope 2 at $DIR/separate_const_switch.rs:+1:9: +1:10\n+          StorageDead(_6);                 // scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10\n+          StorageDead(_2);                 // scope 0 at $DIR/separate_const_switch.rs:+1:10: +1:11\n+          StorageDead(_3);                 // scope 0 at $DIR/separate_const_switch.rs:+2:1: +2:2\n+          return;                          // scope 0 at $DIR/separate_const_switch.rs:+2:2: +2:2\n       }\n   \n -     bb5: {\n@@ -142,20 +152,5 @@\n +         _5 = discriminant(_3);           // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n +         switchInt(move _5) -> [0: bb1, 1: bb3, otherwise: bb2]; // scope 0 at $DIR/separate_const_switch.rs:+1:8: +1:10\n       }\n-  \n--     bb8: {\n-+     bb7: {\n-          StorageDead(_18);                // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n-          Deinit(_0);                      // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n-          ((_0 as Err).0: i32) = move _17; // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n-          discriminant(_0) = 1;            // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n-          StorageDead(_17);                // scope 9 at $SRC_DIR/core/src/result.rs:LL:COL\n-          StorageDead(_16);                // scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n-          StorageDead(_8);                 // scope 2 at $DIR/separate_const_switch.rs:+1:9: +1:10\n-          StorageDead(_6);                 // scope 0 at $DIR/separate_const_switch.rs:+1:9: +1:10\n-          StorageDead(_2);                 // scope 0 at $DIR/separate_const_switch.rs:+1:10: +1:11\n-          StorageDead(_3);                 // scope 0 at $DIR/separate_const_switch.rs:+2:1: +2:2\n-          return;                          // scope 0 at $DIR/separate_const_switch.rs:+2:2: +2:2\n-      }\n   }\n   "}, {"sha": "916f99049c60ab0161473913f89681a1ed0d88d7", "filename": "src/test/mir-opt/simple_option_map_e2e.ezmap.PreCodegen.after.mir", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/ee6503a706da6e423b7d5fa88ea41cc2f7f079fe/src%2Ftest%2Fmir-opt%2Fsimple_option_map_e2e.ezmap.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/ee6503a706da6e423b7d5fa88ea41cc2f7f079fe/src%2Ftest%2Fmir-opt%2Fsimple_option_map_e2e.ezmap.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimple_option_map_e2e.ezmap.PreCodegen.after.mir?ref=ee6503a706da6e423b7d5fa88ea41cc2f7f079fe", "patch": "@@ -0,0 +1,52 @@\n+// MIR for `ezmap` after PreCodegen\n+\n+fn ezmap(_1: Option<i32>) -> Option<i32> {\n+    debug x => _1;                       // in scope 0 at $DIR/simple_option_map_e2e.rs:+0:14: +0:15\n+    let mut _0: std::option::Option<i32>; // return place in scope 0 at $DIR/simple_option_map_e2e.rs:+0:33: +0:44\n+    let mut _2: [closure@$DIR/simple_option_map_e2e.rs:14:12: 14:15]; // in scope 0 at $DIR/simple_option_map_e2e.rs:+1:12: +1:21\n+    scope 1 (inlined map::<i32, i32, [closure@$DIR/simple_option_map_e2e.rs:14:12: 14:15]>) { // at $DIR/simple_option_map_e2e.rs:14:5: 14:22\n+        debug slf => _1;                 // in scope 1 at $DIR/simple_option_map_e2e.rs:2:17: 2:20\n+        debug f => _2;                   // in scope 1 at $DIR/simple_option_map_e2e.rs:2:33: 2:34\n+        let mut _3: isize;               // in scope 1 at $DIR/simple_option_map_e2e.rs:7:9: 7:16\n+        let mut _4: i32;                 // in scope 1 at $DIR/simple_option_map_e2e.rs:7:25: 7:29\n+        let mut _5: i32;                 // in scope 1 at $DIR/simple_option_map_e2e.rs:7:25: 7:29\n+        scope 2 {\n+            debug x => _5;               // in scope 2 at $DIR/simple_option_map_e2e.rs:7:14: 7:15\n+            scope 3 (inlined ezmap::{closure#0}) { // at $DIR/simple_option_map_e2e.rs:7:25: 7:29\n+                debug n => _5;           // in scope 3 at $DIR/simple_option_map_e2e.rs:+1:13: +1:14\n+            }\n+        }\n+    }\n+\n+    bb0: {\n+        StorageLive(_2);                 // scope 0 at $DIR/simple_option_map_e2e.rs:+1:12: +1:21\n+        _3 = discriminant(_1);           // scope 1 at $DIR/simple_option_map_e2e.rs:6:11: 6:14\n+        switchInt(move _3) -> [0: bb1, 1: bb3, otherwise: bb2]; // scope 1 at $DIR/simple_option_map_e2e.rs:6:5: 6:14\n+    }\n+\n+    bb1: {\n+        Deinit(_0);                      // scope 1 at $DIR/simple_option_map_e2e.rs:8:17: 8:21\n+        discriminant(_0) = 0;            // scope 1 at $DIR/simple_option_map_e2e.rs:8:17: 8:21\n+        goto -> bb4;                     // scope 1 at $DIR/simple_option_map_e2e.rs:8:17: 8:21\n+    }\n+\n+    bb2: {\n+        unreachable;                     // scope 1 at $DIR/simple_option_map_e2e.rs:6:11: 6:14\n+    }\n+\n+    bb3: {\n+        _5 = move ((_1 as Some).0: i32); // scope 1 at $DIR/simple_option_map_e2e.rs:7:14: 7:15\n+        StorageLive(_4);                 // scope 2 at $DIR/simple_option_map_e2e.rs:7:25: 7:29\n+        _4 = Add(move _5, const 1_i32);  // scope 3 at $DIR/simple_option_map_e2e.rs:+1:16: +1:21\n+        Deinit(_0);                      // scope 2 at $DIR/simple_option_map_e2e.rs:7:20: 7:30\n+        ((_0 as Some).0: i32) = move _4; // scope 2 at $DIR/simple_option_map_e2e.rs:7:20: 7:30\n+        discriminant(_0) = 1;            // scope 2 at $DIR/simple_option_map_e2e.rs:7:20: 7:30\n+        StorageDead(_4);                 // scope 2 at $DIR/simple_option_map_e2e.rs:7:29: 7:30\n+        goto -> bb4;                     // scope 1 at $DIR/simple_option_map_e2e.rs:10:1: 10:2\n+    }\n+\n+    bb4: {\n+        StorageDead(_2);                 // scope 0 at $DIR/simple_option_map_e2e.rs:+1:21: +1:22\n+        return;                          // scope 0 at $DIR/simple_option_map_e2e.rs:+2:2: +2:2\n+    }\n+}"}, {"sha": "2acd2a227b81f4efd58f76a42842093a8e045bd6", "filename": "src/test/mir-opt/simple_option_map_e2e.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ee6503a706da6e423b7d5fa88ea41cc2f7f079fe/src%2Ftest%2Fmir-opt%2Fsimple_option_map_e2e.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee6503a706da6e423b7d5fa88ea41cc2f7f079fe/src%2Ftest%2Fmir-opt%2Fsimple_option_map_e2e.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimple_option_map_e2e.rs?ref=ee6503a706da6e423b7d5fa88ea41cc2f7f079fe", "patch": "@@ -0,0 +1,19 @@\n+#[inline(always)]\n+fn map<T, U, F>(slf: Option<T>, f: F) -> Option<U>\n+where\n+    F: FnOnce(T) -> U,\n+{\n+    match slf {\n+        Some(x) => Some(f(x)),\n+        None => None,\n+    }\n+}\n+\n+// EMIT_MIR simple_option_map_e2e.ezmap.PreCodegen.after.mir\n+pub fn ezmap(x: Option<i32>) -> Option<i32> {\n+    map(x, |n| n + 1)\n+}\n+\n+fn main() {\n+    assert_eq!(None, ezmap(None));\n+}"}]}