{"sha": "99a44ed086978339d531aa40f84efdaa1bacbb45", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5YTQ0ZWQwODY5NzgzMzlkNTMxYWE0MGY4NGVmZGFhMWJhY2JiNDU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-10-25T17:06:41Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-12-09T08:46:22Z"}, "message": "remove a hack that seems to only benefit a few very special cases", "tree": {"sha": "2f33764822a3b3307f71a43d55e95dec67d96aad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f33764822a3b3307f71a43d55e95dec67d96aad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99a44ed086978339d531aa40f84efdaa1bacbb45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99a44ed086978339d531aa40f84efdaa1bacbb45", "html_url": "https://github.com/rust-lang/rust/commit/99a44ed086978339d531aa40f84efdaa1bacbb45", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99a44ed086978339d531aa40f84efdaa1bacbb45/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd837e899bdb13a6207a0494556380fc4491f2eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd837e899bdb13a6207a0494556380fc4491f2eb", "html_url": "https://github.com/rust-lang/rust/commit/bd837e899bdb13a6207a0494556380fc4491f2eb"}], "stats": {"total": 92, "additions": 37, "deletions": 55}, "files": [{"sha": "8d5ed747c3f8f25ed3f8611096ac72cbb43cdc7b", "filename": "compiler/rustc_mir/src/transform/promote_consts.rs", "status": "modified", "additions": 6, "deletions": 52, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/99a44ed086978339d531aa40f84efdaa1bacbb45/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99a44ed086978339d531aa40f84efdaa1bacbb45/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs?ref=99a44ed086978339d531aa40f84efdaa1bacbb45", "patch": "@@ -22,7 +22,7 @@ use rustc_middle::ty::cast::CastTy;\n use rustc_middle::ty::subst::InternalSubsts;\n use rustc_middle::ty::{self, List, TyCtxt, TypeFoldable};\n use rustc_span::symbol::sym;\n-use rustc_span::{Span, DUMMY_SP};\n+use rustc_span::Span;\n \n use rustc_index::vec::{Idx, IndexVec};\n use rustc_target::spec::abi::Abi;\n@@ -326,41 +326,16 @@ impl<'tcx> Validator<'_, 'tcx> {\n                         if place.projection.contains(&ProjectionElem::Deref) {\n                             return Err(Unpromotable);\n                         }\n-\n-                        let mut has_mut_interior =\n-                            self.qualif_local::<qualifs::HasMutInterior>(place.local);\n-                        // HACK(eddyb) this should compute the same thing as\n-                        // `<HasMutInterior as Qualif>::in_projection` from\n-                        // `check_consts::qualifs` but without recursion.\n-                        if has_mut_interior {\n-                            // This allows borrowing fields which don't have\n-                            // `HasMutInterior`, from a type that does, e.g.:\n-                            // `let _: &'static _ = &(Cell::new(1), 2).1;`\n-                            let mut place_projection = &place.projection[..];\n-                            // FIXME(eddyb) use a forward loop instead of a reverse one.\n-                            while let &[ref proj_base @ .., elem] = place_projection {\n-                                // FIXME(eddyb) this is probably excessive, with\n-                                // the exception of `union` member accesses.\n-                                let ty =\n-                                    Place::ty_from(place.local, proj_base, self.body, self.tcx)\n-                                        .projection_ty(self.tcx, elem)\n-                                        .ty;\n-                                if ty.is_freeze(self.tcx.at(DUMMY_SP), self.param_env) {\n-                                    has_mut_interior = false;\n-                                    break;\n-                                }\n-\n-                                place_projection = proj_base;\n-                            }\n+                        if self.qualif_local::<qualifs::NeedsDrop>(place.local) {\n+                            return Err(Unpromotable);\n                         }\n \n                         // FIXME(eddyb) this duplicates part of `validate_rvalue`.\n+                        let has_mut_interior =\n+                            self.qualif_local::<qualifs::HasMutInterior>(place.local);\n                         if has_mut_interior {\n                             return Err(Unpromotable);\n                         }\n-                        if self.qualif_local::<qualifs::NeedsDrop>(place.local) {\n-                            return Err(Unpromotable);\n-                        }\n \n                         if let BorrowKind::Mut { .. } = kind {\n                             let ty = place.ty(self.body, self.tcx).ty;\n@@ -692,28 +667,7 @@ impl<'tcx> Validator<'_, 'tcx> {\n \n                 self.validate_place(place)?;\n \n-                // HACK(eddyb) this should compute the same thing as\n-                // `<HasMutInterior as Qualif>::in_projection` from\n-                // `check_consts::qualifs` but without recursion.\n-                let mut has_mut_interior =\n-                    self.qualif_local::<qualifs::HasMutInterior>(place.local);\n-                if has_mut_interior {\n-                    let mut place_projection = place.projection;\n-                    // FIXME(eddyb) use a forward loop instead of a reverse one.\n-                    while let &[ref proj_base @ .., elem] = place_projection {\n-                        // FIXME(eddyb) this is probably excessive, with\n-                        // the exception of `union` member accesses.\n-                        let ty = Place::ty_from(place.local, proj_base, self.body, self.tcx)\n-                            .projection_ty(self.tcx, elem)\n-                            .ty;\n-                        if ty.is_freeze(self.tcx.at(DUMMY_SP), self.param_env) {\n-                            has_mut_interior = false;\n-                            break;\n-                        }\n-\n-                        place_projection = proj_base;\n-                    }\n-                }\n+                let has_mut_interior = self.qualif_local::<qualifs::HasMutInterior>(place.local);\n                 if has_mut_interior {\n                     return Err(Unpromotable);\n                 }"}, {"sha": "1e4d8586b872cfd03cb9c0bfca79cc25d834be9b", "filename": "src/test/ui/consts/promote-not.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/99a44ed086978339d531aa40f84efdaa1bacbb45/src%2Ftest%2Fui%2Fconsts%2Fpromote-not.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99a44ed086978339d531aa40f84efdaa1bacbb45/src%2Ftest%2Fui%2Fconsts%2Fpromote-not.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpromote-not.rs?ref=99a44ed086978339d531aa40f84efdaa1bacbb45", "patch": "@@ -34,7 +34,14 @@ const TEST_UNION: () = {\n     let _x: &'static i32 = &unsafe { U { x: 0 }.x }; //~ ERROR temporary value dropped while borrowed\n };\n \n+// In a `const`, we do not promote things with interior mutability. Not even if we \"project it away\".\n+const TEST_INTERIOR_MUT: () = {\n+    // The \"0.\" case is already ruled out by not permitting any interior mutability in `const`.\n+    let _val: &'static _ = &(Cell::new(1), 2).1; //~ ERROR temporary value dropped while borrowed\n+};\n+\n fn main() {\n-    // We must not promote things with interior mutability.\n+    // We must not promote things with interior mutability. Not even if we \"project it away\".\n     let _val: &'static _ = &(Cell::new(1), 2).0; //~ ERROR temporary value dropped while borrowed\n+    let _val: &'static _ = &(Cell::new(1), 2).1; //~ ERROR temporary value dropped while borrowed\n }"}, {"sha": "6e76d9ee6c16536df50cead172582aa8b95681b4", "filename": "src/test/ui/consts/promote-not.stderr", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/99a44ed086978339d531aa40f84efdaa1bacbb45/src%2Ftest%2Fui%2Fconsts%2Fpromote-not.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99a44ed086978339d531aa40f84efdaa1bacbb45/src%2Ftest%2Fui%2Fconsts%2Fpromote-not.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpromote-not.stderr?ref=99a44ed086978339d531aa40f84efdaa1bacbb45", "patch": "@@ -49,15 +49,36 @@ LL | };\n    | - temporary value is freed at the end of this statement\n \n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/promote-not.rs:39:29\n+  --> $DIR/promote-not.rs:40:29\n+   |\n+LL |     let _val: &'static _ = &(Cell::new(1), 2).1;\n+   |               ----------    ^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |               |\n+   |               type annotation requires that borrow lasts for `'static`\n+LL | };\n+   | - temporary value is freed at the end of this statement\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/promote-not.rs:45:29\n    |\n LL |     let _val: &'static _ = &(Cell::new(1), 2).0;\n    |               ----------    ^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n    |               |\n    |               type annotation requires that borrow lasts for `'static`\n+LL |     let _val: &'static _ = &(Cell::new(1), 2).1;\n+LL | }\n+   | - temporary value is freed at the end of this statement\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/promote-not.rs:46:29\n+   |\n+LL |     let _val: &'static _ = &(Cell::new(1), 2).1;\n+   |               ----------    ^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |               |\n+   |               type annotation requires that borrow lasts for `'static`\n LL | }\n    | - temporary value is freed at the end of this statement\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 8 previous errors\n \n For more information about this error, try `rustc --explain E0716`."}]}