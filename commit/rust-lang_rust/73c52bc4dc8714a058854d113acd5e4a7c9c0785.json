{"sha": "73c52bc4dc8714a058854d113acd5e4a7c9c0785", "node_id": "C_kwDOAAsO6NoAKDczYzUyYmM0ZGM4NzE0YTA1ODg1NGQxMTNhY2Q1ZTRhN2M5YzA3ODU", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-09-19T20:53:21Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-09-25T09:30:49Z"}, "message": "Fix scoping for let-else.", "tree": {"sha": "d9da4f64075a29c26cdec720e720a21a190dbff0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9da4f64075a29c26cdec720e720a21a190dbff0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/73c52bc4dc8714a058854d113acd5e4a7c9c0785", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/73c52bc4dc8714a058854d113acd5e4a7c9c0785", "html_url": "https://github.com/rust-lang/rust/commit/73c52bc4dc8714a058854d113acd5e4a7c9c0785", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/73c52bc4dc8714a058854d113acd5e4a7c9c0785/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e20fabb0d04cb25fe3159d58920856533f1b5cf0", "url": "https://api.github.com/repos/rust-lang/rust/commits/e20fabb0d04cb25fe3159d58920856533f1b5cf0", "html_url": "https://github.com/rust-lang/rust/commit/e20fabb0d04cb25fe3159d58920856533f1b5cf0"}], "stats": {"total": 43, "additions": 27, "deletions": 16}, "files": [{"sha": "fc1b301402b73eda661c1716b667a8bf5add038c", "filename": "compiler/rustc_mir_build/src/build/block.rs", "status": "modified", "additions": 27, "deletions": 16, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/73c52bc4dc8714a058854d113acd5e4a7c9c0785/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73c52bc4dc8714a058854d113acd5e4a7c9c0785/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fblock.rs?ref=73c52bc4dc8714a058854d113acd5e4a7c9c0785", "patch": "@@ -221,27 +221,37 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n                     let init = &this.thir[*initializer];\n                     let initializer_span = init.span;\n-                    this.declare_bindings(\n-                        visibility_scope,\n-                        remainder_span,\n-                        pattern,\n-                        ArmHasGuard(false),\n-                        Some((None, initializer_span)),\n-                    );\n-                    this.visit_primary_bindings(\n-                        pattern,\n-                        UserTypeProjections::none(),\n-                        &mut |this, _, _, _, node, span, _, _| {\n-                            this.storage_live_binding(block, node, span, OutsideGuard, true);\n-                            this.schedule_drop_for_binding(node, span, OutsideGuard);\n-                        },\n-                    );\n                     let failure = unpack!(\n                         block = this.in_opt_scope(\n                             opt_destruction_scope.map(|de| (de, source_info)),\n                             |this| {\n                                 let scope = (*init_scope, source_info);\n                                 this.in_scope(scope, *lint_level, |this| {\n+                                    this.declare_bindings(\n+                                        visibility_scope,\n+                                        remainder_span,\n+                                        pattern,\n+                                        ArmHasGuard(false),\n+                                        Some((None, initializer_span)),\n+                                    );\n+                                    this.visit_primary_bindings(\n+                                        pattern,\n+                                        UserTypeProjections::none(),\n+                                        &mut |this, _, _, _, node, span, _, _| {\n+                                            this.storage_live_binding(\n+                                                block,\n+                                                node,\n+                                                span,\n+                                                OutsideGuard,\n+                                                true,\n+                                            );\n+                                            this.schedule_drop_for_binding(\n+                                                node,\n+                                                span,\n+                                                OutsideGuard,\n+                                            );\n+                                        },\n+                                    );\n                                     this.ast_let_else(\n                                         block,\n                                         init,\n@@ -306,7 +316,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                                             ArmHasGuard(false),\n                                             Some((None, initializer_span)),\n                                         );\n-                                        this.expr_into_pattern(block, &pattern, init) // irrefutable pattern\n+                                        this.expr_into_pattern(block, &pattern, init)\n+                                        // irrefutable pattern\n                                     })\n                                 },\n                             )"}]}