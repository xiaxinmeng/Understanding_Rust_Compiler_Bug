{"sha": "2ccc45979cd2057bb88e209474698090fb32bb40", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjY2M0NTk3OWNkMjA1N2JiODhlMjA5NDc0Njk4MDkwZmIzMmJiNDA=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-11-11T09:00:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-11T09:00:27Z"}, "message": "Merge #2209\n\n2209: impl fmt::Display for BuiltinType r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "b3cbebc3d63e1ab1af73cf17434809057a25ec6a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3cbebc3d63e1ab1af73cf17434809057a25ec6a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ccc45979cd2057bb88e209474698090fb32bb40", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdySMrCRBK7hj4Ov3rIwAAdHIIAHhD75STwwPiMLlXKUR28i3R\nQ6cSMgyvm1cKPX5wAw47mh1t1RW9Xz40a9DdAegt1lOTvGyr0BAPE9WkpJUHOCMI\nvYg6wpnBhph5zHacAMitBRxN+D4/xSb8f20TQxaECUmHvY1oKhJ5aUjHjD6Emrcr\nG1d0VNLlSBg2/TllVyN+f/nIRl8y7QFVjTlbDwOCqqfQvXejE0AtClFiPNia+9S8\nIeAJRMNu8VflDM64LMZpfEkEMlcRIXRR3yOdy+In9jprhYbufz+v6lJ+9sRCVAMY\ndOINp5uF8AQ+5JyDRxvA1g2V/ZrNB59O5nDFvZPayO5gD1qCT+jk8NdxT8nsfMk=\n=lA+W\n-----END PGP SIGNATURE-----\n", "payload": "tree b3cbebc3d63e1ab1af73cf17434809057a25ec6a\nparent 113d7e44b7d4dee1be6a3d9fd8c724a3fff37b26\nparent 5bb92c2d1af5f3045617a665d4e5c676700eb3c1\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1573462827 +0000\ncommitter GitHub <noreply@github.com> 1573462827 +0000\n\nMerge #2209\n\n2209: impl fmt::Display for BuiltinType r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ccc45979cd2057bb88e209474698090fb32bb40", "html_url": "https://github.com/rust-lang/rust/commit/2ccc45979cd2057bb88e209474698090fb32bb40", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ccc45979cd2057bb88e209474698090fb32bb40/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "113d7e44b7d4dee1be6a3d9fd8c724a3fff37b26", "url": "https://api.github.com/repos/rust-lang/rust/commits/113d7e44b7d4dee1be6a3d9fd8c724a3fff37b26", "html_url": "https://github.com/rust-lang/rust/commit/113d7e44b7d4dee1be6a3d9fd8c724a3fff37b26"}, {"sha": "5bb92c2d1af5f3045617a665d4e5c676700eb3c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/5bb92c2d1af5f3045617a665d4e5c676700eb3c1", "html_url": "https://github.com/rust-lang/rust/commit/5bb92c2d1af5f3045617a665d4e5c676700eb3c1"}], "stats": {"total": 40, "additions": 34, "deletions": 6}, "files": [{"sha": "2ec0c83fe58ee16f5fa00dc7718957975cd78dfb", "filename": "crates/ra_hir_def/src/builtin_type.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/2ccc45979cd2057bb88e209474698090fb32bb40/crates%2Fra_hir_def%2Fsrc%2Fbuiltin_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ccc45979cd2057bb88e209474698090fb32bb40/crates%2Fra_hir_def%2Fsrc%2Fbuiltin_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbuiltin_type.rs?ref=2ccc45979cd2057bb88e209474698090fb32bb40", "patch": "@@ -3,6 +3,8 @@\n //! A peculiarity of built-in types is that they are always available and are\n //! not associated with any particular crate.\n \n+use std::fmt;\n+\n use hir_expand::name::{self, Name};\n \n #[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]\n@@ -61,3 +63,33 @@ impl BuiltinType {\n         (name::F64, BuiltinType::Float { bitness: FloatBitness::X64 }),\n     ];\n }\n+\n+impl fmt::Display for BuiltinType {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        let type_name = match self {\n+            BuiltinType::Char => \"char\",\n+            BuiltinType::Bool => \"bool\",\n+            BuiltinType::Str => \"str\",\n+            BuiltinType::Int { signedness, bitness } => match (signedness, bitness) {\n+                (Signedness::Signed, IntBitness::Xsize) => \"isize\",\n+                (Signedness::Signed, IntBitness::X8) => \"i8\",\n+                (Signedness::Signed, IntBitness::X16) => \"i16\",\n+                (Signedness::Signed, IntBitness::X32) => \"i32\",\n+                (Signedness::Signed, IntBitness::X64) => \"i64\",\n+                (Signedness::Signed, IntBitness::X128) => \"i128\",\n+\n+                (Signedness::Unsigned, IntBitness::Xsize) => \"usize\",\n+                (Signedness::Unsigned, IntBitness::X8) => \"u8\",\n+                (Signedness::Unsigned, IntBitness::X16) => \"u16\",\n+                (Signedness::Unsigned, IntBitness::X32) => \"u32\",\n+                (Signedness::Unsigned, IntBitness::X64) => \"u64\",\n+                (Signedness::Unsigned, IntBitness::X128) => \"u128\",\n+            },\n+            BuiltinType::Float { bitness } => match bitness {\n+                FloatBitness::X32 => \"f32\",\n+                FloatBitness::X64 => \"f64\",\n+            },\n+        };\n+        f.write_str(type_name)\n+    }\n+}"}, {"sha": "cc41390b25775af7831bdfd6a9196a32d5bdeb76", "filename": "crates/ra_ide_api/src/hover.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2ccc45979cd2057bb88e209474698090fb32bb40/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ccc45979cd2057bb88e209474698090fb32bb40/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fhover.rs?ref=2ccc45979cd2057bb88e209474698090fb32bb40", "patch": "@@ -1,6 +1,6 @@\n //! FIXME: write short doc here\n \n-use hir::{Adt, BuiltinType, HasSource, HirDisplay};\n+use hir::{Adt, HasSource, HirDisplay};\n use ra_db::SourceDatabase;\n use ra_syntax::{\n     algo::{ancestors_at_offset, find_covering_element, find_node_at_offset},\n@@ -132,11 +132,7 @@ pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeIn\n                 hir::ModuleDef::Static(it) => res.extend(from_def_source(db, it)),\n                 hir::ModuleDef::Trait(it) => res.extend(from_def_source(db, it)),\n                 hir::ModuleDef::TypeAlias(it) => res.extend(from_def_source(db, it)),\n-                hir::ModuleDef::BuiltinType(it) => {\n-                    if let Some(b) = BuiltinType::ALL.iter().find(|(_, ty)| *ty == it) {\n-                        res.extend(Some(b.0.to_string()))\n-                    }\n-                }\n+                hir::ModuleDef::BuiltinType(it) => res.extend(Some(it.to_string())),\n             },\n             Some(SelfType(ty)) => {\n                 if let Some((adt_def, _)) = ty.as_adt() {"}]}