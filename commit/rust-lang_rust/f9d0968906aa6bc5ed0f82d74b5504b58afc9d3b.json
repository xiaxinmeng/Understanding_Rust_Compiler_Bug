{"sha": "f9d0968906aa6bc5ed0f82d74b5504b58afc9d3b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5ZDA5Njg5MDZhYTZiYzVlZDBmODJkNzRiNTUwNGI1OGFmYzlkM2I=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-05-16T11:57:45Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-06-20T11:19:04Z"}, "message": "Make method and variable names more consistent", "tree": {"sha": "fc41e825cc102358ba1abfc29c2b3b7f5c2f2c89", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc41e825cc102358ba1abfc29c2b3b7f5c2f2c89"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9d0968906aa6bc5ed0f82d74b5504b58afc9d3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9d0968906aa6bc5ed0f82d74b5504b58afc9d3b", "html_url": "https://github.com/rust-lang/rust/commit/f9d0968906aa6bc5ed0f82d74b5504b58afc9d3b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9d0968906aa6bc5ed0f82d74b5504b58afc9d3b/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76c0d687453cb1da2e76a1c8e007ac080f8aa0d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/76c0d687453cb1da2e76a1c8e007ac080f8aa0d7", "html_url": "https://github.com/rust-lang/rust/commit/76c0d687453cb1da2e76a1c8e007ac080f8aa0d7"}], "stats": {"total": 345, "additions": 182, "deletions": 163}, "files": [{"sha": "d00792be4eb56696e12bf909b376d3e20573c61f", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9d0968906aa6bc5ed0f82d74b5504b58afc9d3b/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9d0968906aa6bc5ed0f82d74b5504b58afc9d3b/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=f9d0968906aa6bc5ed0f82d74b5504b58afc9d3b", "patch": "@@ -1726,7 +1726,7 @@ impl<'a> LoweringContext<'a> {\n         hir::PathSegment::new(\n             self.lower_ident(segment.ident),\n             generic_args,\n-            infer_types\n+            infer_types,\n         )\n     }\n \n@@ -1738,7 +1738,7 @@ impl<'a> LoweringContext<'a> {\n     ) -> (hir::GenericArgs, bool) {\n         let &AngleBracketedArgs { ref args, ref bindings, .. } = data;\n         (hir::GenericArgs {\n-            args: args.iter().map(|p| self.lower_generic_arg(p, itctx)).collect(),\n+            args: args.iter().map(|a| self.lower_generic_arg(a, itctx)).collect(),\n             bindings: bindings.iter().map(|b| self.lower_ty_binding(b, itctx)).collect(),\n             parenthesized: false,\n         },"}, {"sha": "d4785e40b1f8a712e7bef3b26000b437a344c163", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9d0968906aa6bc5ed0f82d74b5504b58afc9d3b/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9d0968906aa6bc5ed0f82d74b5504b58afc9d3b/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=f9d0968906aa6bc5ed0f82d74b5504b58afc9d3b", "patch": "@@ -360,7 +360,7 @@ impl PathSegment {\n \n     // FIXME: hack required because you can't create a static\n     // GenericArgs, so you can't just return a &GenericArgs.\n-    pub fn with_args<F, R>(&self, f: F) -> R\n+    pub fn with_generic_args<F, R>(&self, f: F) -> R\n         where F: FnOnce(&GenericArgs) -> R\n     {\n         let dummy = GenericArgs::none();"}, {"sha": "5420be64ca43ae61190ef14b674f3ab97fde8506", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/f9d0968906aa6bc5ed0f82d74b5504b58afc9d3b/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9d0968906aa6bc5ed0f82d74b5504b58afc9d3b/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=f9d0968906aa6bc5ed0f82d74b5504b58afc9d3b", "patch": "@@ -1269,11 +1269,11 @@ impl<'a> State<'a> {\n         self.s.word(\".\")?;\n         self.print_name(segment.name)?;\n \n-        segment.with_args(|args| {\n-            if !args.args.is_empty() ||\n-                !args.bindings.is_empty()\n+        segment.with_generic_args(|generic_args| {\n+            if !generic_args.args.is_empty() ||\n+                !generic_args.bindings.is_empty()\n             {\n-                self.print_generic_args(&args, segment.infer_types, true)\n+                self.print_generic_args(&generic_args, segment.infer_types, true)\n             } else {\n                 Ok(())\n             }\n@@ -1641,10 +1641,10 @@ impl<'a> State<'a> {\n             if segment.name != keywords::CrateRoot.name() &&\n                segment.name != keywords::DollarCrate.name() {\n                self.print_name(segment.name)?;\n-               segment.with_args(|parameters| {\n-                   self.print_generic_args(parameters,\n-                                              segment.infer_types,\n-                                              colons_before_params)\n+               segment.with_generic_args(|generic_args| {\n+                   self.print_generic_args(generic_args,\n+                                           segment.infer_types,\n+                                           colons_before_params)\n                })?;\n             }\n         }\n@@ -1673,10 +1673,10 @@ impl<'a> State<'a> {\n                     if segment.name != keywords::CrateRoot.name() &&\n                        segment.name != keywords::DollarCrate.name() {\n                         self.print_name(segment.name)?;\n-                        segment.with_args(|parameters| {\n-                            self.print_generic_args(parameters,\n-                                                       segment.infer_types,\n-                                                       colons_before_params)\n+                        segment.with_generic_args(|generic_args| {\n+                            self.print_generic_args(generic_args,\n+                                                    segment.infer_types,\n+                                                    colons_before_params)\n                         })?;\n                     }\n                 }\n@@ -1685,10 +1685,10 @@ impl<'a> State<'a> {\n                 self.s.word(\"::\")?;\n                 let item_segment = path.segments.last().unwrap();\n                 self.print_name(item_segment.name)?;\n-                item_segment.with_args(|parameters| {\n-                    self.print_generic_args(parameters,\n-                                               item_segment.infer_types,\n-                                               colons_before_params)\n+                item_segment.with_generic_args(|generic_args| {\n+                    self.print_generic_args(generic_args,\n+                                            item_segment.infer_types,\n+                                            colons_before_params)\n                 })\n             }\n             hir::QPath::TypeRelative(ref qself, ref item_segment) => {\n@@ -1697,10 +1697,10 @@ impl<'a> State<'a> {\n                 self.s.word(\">\")?;\n                 self.s.word(\"::\")?;\n                 self.print_name(item_segment.name)?;\n-                item_segment.with_args(|parameters| {\n-                    self.print_generic_args(parameters,\n-                                               item_segment.infer_types,\n-                                               colons_before_params)\n+                item_segment.with_generic_args(|generic_args| {\n+                    self.print_generic_args(generic_args,\n+                                            item_segment.infer_types,\n+                                            colons_before_params)\n                 })\n             }\n         }\n@@ -1734,11 +1734,11 @@ impl<'a> State<'a> {\n             let elide_lifetimes = generic_args.lifetimes().all(|lt| lt.is_elided());\n             if !elide_lifetimes {\n                 start_or_comma(self)?;\n-                self.commasep(Inconsistent, &generic_args.args, |s, p| {\n-                    match p {\n+                self.commasep(Inconsistent, &generic_args.args, |s, generic_arg| {\n+                    match generic_arg {\n                         GenericArg::Lifetime(lt) => s.print_lifetime(lt),\n                         GenericArg::Type(ty) => s.print_type(ty),\n-                    }\n+                }\n                 })?;\n             } else if generic_args.types().count() != 0 {\n                 start_or_comma(self)?;"}, {"sha": "8f1cd9bb30ecdde1d5f37de9412ffc1051a68929", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f9d0968906aa6bc5ed0f82d74b5504b58afc9d3b/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9d0968906aa6bc5ed0f82d74b5504b58afc9d3b/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=f9d0968906aa6bc5ed0f82d74b5504b58afc9d3b", "patch": "@@ -1601,20 +1601,21 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         &mut self,\n         def: Def,\n         depth: usize,\n-        args: &'tcx hir::GenericArgs,\n+        generic_args: &'tcx hir::GenericArgs,\n     ) {\n-        if args.parenthesized {\n+        if generic_args.parenthesized {\n             let was_in_fn_syntax = self.is_in_fn_syntax;\n             self.is_in_fn_syntax = true;\n-            self.visit_fn_like_elision(args.inputs(), Some(&args.bindings[0].ty));\n+            self.visit_fn_like_elision(generic_args.inputs(),\n+                                       Some(&generic_args.bindings[0].ty));\n             self.is_in_fn_syntax = was_in_fn_syntax;\n             return;\n         }\n \n-        if args.lifetimes().all(|l| l.is_elided()) {\n-            self.resolve_elided_lifetimes(args.lifetimes().collect(), true);\n+        if generic_args.lifetimes().all(|l| l.is_elided()) {\n+            self.resolve_elided_lifetimes(generic_args.lifetimes().collect(), true);\n         } else {\n-            for l in args.lifetimes() {\n+            for l in generic_args.lifetimes() {\n                 self.visit_lifetime(l);\n             }\n         }\n@@ -1686,13 +1687,13 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                     } else {\n                         Some(Region::Static)\n                     },\n-                    Set1::One(r) => r.subst(args.lifetimes(), map),\n+                    Set1::One(r) => r.subst(generic_args.lifetimes(), map),\n                     Set1::Many => None,\n                 })\n                 .collect()\n         });\n \n-        for (i, ty) in args.types().enumerate() {\n+        for (i, ty) in generic_args.types().enumerate() {\n             if let Some(&lt) = object_lifetime_defaults.get(i) {\n                 let scope = Scope::ObjectLifetimeDefault {\n                     lifetime: lt,\n@@ -1704,7 +1705,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             }\n         }\n \n-        for b in &args.bindings {\n+        for b in &generic_args.bindings {\n             self.visit_assoc_type_binding(b);\n         }\n     }"}, {"sha": "66edbeff749f712f8762bf84f0035bf4c3452a5a", "filename": "src/librustc/ty/instance.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f9d0968906aa6bc5ed0f82d74b5504b58afc9d3b/src%2Flibrustc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9d0968906aa6bc5ed0f82d74b5504b58afc9d3b/src%2Flibrustc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finstance.rs?ref=f9d0968906aa6bc5ed0f82d74b5504b58afc9d3b", "patch": "@@ -10,7 +10,6 @@\n \n use hir::def_id::DefId;\n use ty::{self, Ty, TypeFoldable, Substs, TyCtxt};\n-use ty::subst::Kind;\n use traits;\n use rustc_target::spec::abi::Abi;\n use util::ppaux;"}, {"sha": "2e3c6df9754dfeb82fee896d283e266611ec43d1", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9d0968906aa6bc5ed0f82d74b5504b58afc9d3b/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9d0968906aa6bc5ed0f82d74b5504b58afc9d3b/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=f9d0968906aa6bc5ed0f82d74b5504b58afc9d3b", "patch": "@@ -105,10 +105,6 @@ impl<'tcx> From<Ty<'tcx>> for Kind<'tcx> {\n     }\n }\n \n-impl<'tcx> Into<Kind<'tcx>> for ty::Region<'tcx> {}\n-\n-impl<'tcx> Into<Kind<'tcx>> for Ty<'tcx> {}\n-\n impl<'tcx> Kind<'tcx> {\n     #[inline]\n     pub fn unpack(self) -> UnpackedKind<'tcx> {"}, {"sha": "322924535d1f72baeb5588eecad1f606043e09e3", "filename": "src/librustc_codegen_llvm/base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f9d0968906aa6bc5ed0f82d74b5504b58afc9d3b/src%2Flibrustc_codegen_llvm%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9d0968906aa6bc5ed0f82d74b5504b58afc9d3b/src%2Flibrustc_codegen_llvm%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbase.rs?ref=f9d0968906aa6bc5ed0f82d74b5504b58afc9d3b", "patch": "@@ -40,7 +40,6 @@ use rustc::middle::weak_lang_items;\n use rustc::mir::mono::{Linkage, Visibility, Stats};\n use rustc::middle::cstore::{EncodedMetadata};\n use rustc::ty::{self, Ty, TyCtxt};\n-use rustc::ty::subst::Kind;\n use rustc::ty::layout::{self, Align, TyLayout, LayoutOf};\n use rustc::ty::query::Providers;\n use rustc::dep_graph::{DepNode, DepConstructor};"}, {"sha": "0ea2832bf80d9ad181d035a4e56e09d48bd66798", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9d0968906aa6bc5ed0f82d74b5504b58afc9d3b/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9d0968906aa6bc5ed0f82d74b5504b58afc9d3b/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=f9d0968906aa6bc5ed0f82d74b5504b58afc9d3b", "patch": "@@ -677,7 +677,7 @@ impl<'a> ReplaceBodyWithLoop<'a> {\n                     ast::TyKind::Paren(ref subty) => involves_impl_trait(subty),\n                     ast::TyKind::Tup(ref tys) => any_involves_impl_trait(tys.iter()),\n                     ast::TyKind::Path(_, ref path) => path.segments.iter().any(|seg| {\n-                        match seg.args.as_ref().map(|p| &**p) {\n+                        match seg.args.as_ref().map(|generic_arg| &**generic_arg) {\n                             None => false,\n                             Some(&ast::GenericArgs::AngleBracketed(ref data)) =>\n                                 any_involves_impl_trait(data.types().into_iter()) ||"}, {"sha": "bf544e5120cd81d691e6741c6da186ee4c4db7f8", "filename": "src/librustc_mir/monomorphize/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f9d0968906aa6bc5ed0f82d74b5504b58afc9d3b/src%2Flibrustc_mir%2Fmonomorphize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9d0968906aa6bc5ed0f82d74b5504b58afc9d3b/src%2Flibrustc_mir%2Fmonomorphize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fmod.rs?ref=f9d0968906aa6bc5ed0f82d74b5504b58afc9d3b", "patch": "@@ -13,7 +13,6 @@ use rustc::middle::lang_items::DropInPlaceFnLangItem;\n use rustc::traits;\n use rustc::ty::adjustment::CustomCoerceUnsized;\n use rustc::ty::{self, Ty, TyCtxt};\n-use rustc::ty::subst::Kind;\n \n pub use rustc::ty::Instance;\n pub use self::item::{MonoItem, MonoItemExt};"}, {"sha": "211a45bc3c5d6e077dc4697ca6fce19eca705313", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f9d0968906aa6bc5ed0f82d74b5504b58afc9d3b/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9d0968906aa6bc5ed0f82d74b5504b58afc9d3b/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=f9d0968906aa6bc5ed0f82d74b5504b58afc9d3b", "patch": "@@ -523,21 +523,21 @@ impl<'a> Visitor<'a> for NestedImplTraitVisitor<'a> {\n     }\n     fn visit_generic_args(&mut self, _: Span, generic_args: &'a GenericArgs) {\n         match *generic_args {\n-            GenericArgs::AngleBracketed(ref params) => {\n-                for type_ in params.types() {\n+            GenericArgs::AngleBracketed(ref generic_args) => {\n+                for type_ in generic_args.types() {\n                     self.visit_ty(type_);\n                 }\n-                for type_binding in &params.bindings {\n+                for type_binding in &generic_args.bindings {\n                     // Type bindings such as `Item=impl Debug` in `Iterator<Item=Debug>`\n                     // are allowed to contain nested `impl Trait`.\n                     self.with_impl_trait(None, |this| visit::walk_ty(this, &type_binding.ty));\n                 }\n             }\n-            GenericArgs::Parenthesized(ref params) => {\n-                for type_ in &params.inputs {\n+            GenericArgs::Parenthesized(ref generic_args) => {\n+                for type_ in &generic_args.inputs {\n                     self.visit_ty(type_);\n                 }\n-                if let Some(ref type_) = params.output {\n+                if let Some(ref type_) = generic_args.output {\n                     // `-> Foo` syntax is essentially an associated type binding,\n                     // so it is also allowed to contain nested `impl Trait`.\n                     self.with_impl_trait(None, |this| visit::walk_ty(this, type_));"}, {"sha": "055d58f0b1f5f8f5df2e476162d15936328c76d7", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f9d0968906aa6bc5ed0f82d74b5504b58afc9d3b/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9d0968906aa6bc5ed0f82d74b5504b58afc9d3b/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=f9d0968906aa6bc5ed0f82d74b5504b58afc9d3b", "patch": "@@ -820,8 +820,8 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n \n         // Type arguments\n         for seg in &path.segments {\n-            if let Some(ref args) = seg.args {\n-                match **args {\n+            if let Some(ref generic_args) = seg.args {\n+                match **generic_args {\n                     ast::GenericArgs::AngleBracketed(ref data) => for t in data.types() {\n                         self.visit_ty(t);\n                     },\n@@ -905,8 +905,8 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n         }\n \n         // Explicit types in the turbo-fish.\n-        if let Some(ref args) = seg.args {\n-            if let ast::GenericArgs::AngleBracketed(ref data) = **args {\n+        if let Some(ref generic_args) = seg.args {\n+            if let ast::GenericArgs::AngleBracketed(ref data) = **generic_args {\n                 for t in data.types() {\n                     self.visit_ty(t);\n                 }"}, {"sha": "8a44f271055e2844ea142db35ca933e98bb4b290", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9d0968906aa6bc5ed0f82d74b5504b58afc9d3b/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9d0968906aa6bc5ed0f82d74b5504b58afc9d3b/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=f9d0968906aa6bc5ed0f82d74b5504b58afc9d3b", "patch": "@@ -692,8 +692,8 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n             if path.segments.len() != 1 {\n                 return false;\n             }\n-            if let Some(ref args) = path.segments[0].args {\n-                if let ast::GenericArgs::Parenthesized(_) = **args {\n+            if let Some(ref generic_args) = path.segments[0].args {\n+                if let ast::GenericArgs::Parenthesized(_) = **generic_args {\n                     return true;\n                 }\n             }"}, {"sha": "e4b3b4e60413d2e2a1fe48673d1d66b38114c49c", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 30, "deletions": 20, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/f9d0968906aa6bc5ed0f82d74b5504b58afc9d3b/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9d0968906aa6bc5ed0f82d74b5504b58afc9d3b/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=f9d0968906aa6bc5ed0f82d74b5504b58afc9d3b", "patch": "@@ -177,11 +177,11 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n     {\n \n         let (substs, assoc_bindings) =\n-            item_segment.with_args(|args| {\n+            item_segment.with_generic_args(|generic_args| {\n                 self.create_substs_for_ast_path(\n                     span,\n                     def_id,\n-                    args,\n+                    generic_args,\n                     item_segment.infer_types,\n                     None)\n             });\n@@ -199,23 +199,23 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n     fn create_substs_for_ast_path(&self,\n         span: Span,\n         def_id: DefId,\n-        args: &hir::GenericArgs,\n+        generic_args: &hir::GenericArgs,\n         infer_types: bool,\n         self_ty: Option<Ty<'tcx>>)\n         -> (&'tcx Substs<'tcx>, Vec<ConvertedBinding<'tcx>>)\n     {\n         let tcx = self.tcx();\n \n         debug!(\"create_substs_for_ast_path(def_id={:?}, self_ty={:?}, \\\n-               args={:?})\",\n-               def_id, self_ty, args);\n+               generic_args={:?})\",\n+               def_id, self_ty, generic_args);\n \n         // If the type is parameterized by this region, then replace this\n         // region with the current anon region binding (in other words,\n         // whatever & would get replaced with).\n         let decl_generics = tcx.generics_of(def_id);\n-        let ty_provided = args.types().count();\n-        let lt_provided = args.lifetimes().count();\n+        let ty_provided = generic_args.types().count();\n+        let lt_provided = generic_args.lifetimes().count();\n \n         let mut lt_accepted = 0;\n         let mut ty_params = ParamRange { required: 0, accepted: 0 };\n@@ -269,7 +269,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n             match param.kind {\n                 GenericParamDefKind::Lifetime => {\n                     let i = param.index as usize - own_self;\n-                    if let Some(lifetime) = args.lifetimes().nth(i) {\n+                    if let Some(lifetime) = generic_args.lifetimes().nth(i) {\n                         self.ast_region_to_region(lifetime, Some(param)).into()\n                     } else {\n                         tcx.types.re_static.into()\n@@ -286,7 +286,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                     let i = i - (lt_accepted + own_self);\n                     if i < ty_provided {\n                         // A provided type parameter.\n-                        self.ast_ty_to_ty(&args.types().nth(i).unwrap()).into()\n+                        self.ast_ty_to_ty(&generic_args.types().nth(i).unwrap()).into()\n                     } else if infer_types {\n                         // No type parameters were provided, we can infer all.\n                         if !default_needs_object_self(param) {\n@@ -330,7 +330,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n             }\n         });\n \n-        let assoc_bindings = args.bindings.iter().map(|binding| {\n+        let assoc_bindings = generic_args.bindings.iter().map(|binding| {\n             ConvertedBinding {\n                 item_name: binding.name,\n                 ty: self.ast_ty_to_ty(&binding.ty),\n@@ -451,7 +451,8 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n         let trait_def = self.tcx().trait_def(trait_def_id);\n \n         if !self.tcx().features().unboxed_closures &&\n-           trait_segment.with_args(|p| p.parenthesized) != trait_def.paren_sugar {\n+            trait_segment.with_generic_args(|generic_args| generic_args.parenthesized)\n+            != trait_def.paren_sugar {\n             // For now, require that parenthetical notation be used only with `Fn()` etc.\n             let msg = if trait_def.paren_sugar {\n                 \"the precise format of `Fn`-family traits' type parameters is subject to change. \\\n@@ -463,10 +464,10 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                              span, GateIssue::Language, msg);\n         }\n \n-        trait_segment.with_args(|parameters| {\n+        trait_segment.with_generic_args(|generic_args| {\n             self.create_substs_for_ast_path(span,\n                                             trait_def_id,\n-                                            parameters,\n+                                            generic_args,\n                                             trait_segment.infer_types,\n                                             Some(self_ty))\n         })\n@@ -970,27 +971,36 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n \n     pub fn prohibit_type_params(&self, segments: &[hir::PathSegment]) {\n         for segment in segments {\n-            segment.with_args(|params| {\n-                for p in &params.args {\n-                    let (mut span_err, span, kind) = match p {\n+            segment.with_generic_args(|generic_args| {\n+                let mut err_for_lifetime = false;\n+                let mut err_for_type = false;\n+                for arg in &generic_args.args {\n+                    let (mut span_err, span, kind) = match arg {\n                         hir::GenericArg::Lifetime(lt) => {\n+                            if err_for_lifetime { continue }\n+                            err_for_lifetime = true;\n                             (struct_span_err!(self.tcx().sess, lt.span, E0110,\n-                                              \"lifetime parameters are not allowed on this type\"),\n+                                            \"lifetime parameters are not allowed on \\\n+                                                this type\"),\n                              lt.span,\n                              \"lifetime\")\n                         }\n                         hir::GenericArg::Type(ty) => {\n+                            if err_for_type { continue }\n+                            err_for_type = true;\n                             (struct_span_err!(self.tcx().sess, ty.span, E0109,\n-                                              \"type parameters are not allowed on this type\"),\n+                                            \"type parameters are not allowed on this type\"),\n                              ty.span,\n                              \"type\")\n                         }\n                     };\n                     span_err.span_label(span, format!(\"{} parameter not allowed\", kind))\n                             .emit();\n-                    break;\n+                    if err_for_lifetime && err_for_type {\n+                        break;\n+                    }\n                 }\n-                for binding in &params.bindings {\n+                for binding in &generic_args.bindings {\n                     self.prohibit_projection(binding.span);\n                     break;\n                 }"}, {"sha": "c0779235e8939443edb39bc974588fc947b304ed", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/f9d0968906aa6bc5ed0f82d74b5504b58afc9d3b/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9d0968906aa6bc5ed0f82d74b5504b58afc9d3b/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=f9d0968906aa6bc5ed0f82d74b5504b58afc9d3b", "patch": "@@ -4834,7 +4834,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             match param.kind {\n                 GenericParamDefKind::Lifetime => {\n                     let lifetimes = segment.map_or(vec![], |(s, _)| {\n-                        s.args.as_ref().map_or(vec![], |p| p.lifetimes().collect())\n+                        s.args.as_ref().map_or(vec![], |arg| arg.lifetimes().collect())\n                     });\n \n                     if let Some(lifetime) = lifetimes.get(i) {\n@@ -4845,7 +4845,9 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 }\n                 GenericParamDefKind::Type {..} => {\n                     let (types, infer_types) = segment.map_or((vec![], true), |(s, _)| {\n-                        (s.args.as_ref().map_or(vec![], |p| p.types().collect()), s.infer_types)\n+                        (s.args.as_ref().map_or(vec![], |arg| {\n+                            arg.types().collect()\n+                        }), s.infer_types)\n                     });\n \n                     // Skip over the lifetimes in the same segment.\n@@ -4956,16 +4958,23 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n     /// Report errors if the provided parameters are too few or too many.\n     fn check_generic_arg_count(&self,\n-                                  span: Span,\n-                                  segment: &mut Option<(&hir::PathSegment, &ty::Generics)>,\n-                                  is_method_call: bool,\n-                                  supress_mismatch_error: bool) {\n+                               span: Span,\n+                               segment: &mut Option<(&hir::PathSegment, &ty::Generics)>,\n+                               is_method_call: bool,\n+                               supress_mismatch_error: bool) {\n         let (lifetimes, types, infer_types, bindings) = segment.map_or(\n             (vec![], vec![], true, &[][..]),\n-            |(s, _)| s.args.as_ref().map_or(\n-                (vec![], vec![], s.infer_types, &[][..]),\n-                |p| (p.lifetimes().collect(), p.types().collect(),\n-                     s.infer_types, &p.bindings[..])));\n+            |(s, _)| {\n+                s.args.as_ref().map_or(\n+                    (vec![], vec![], s.infer_types, &[][..]),\n+                    |arg| {\n+                        (arg.lifetimes().collect(),\n+                         arg.types().collect(),\n+                         s.infer_types,\n+                         &arg.bindings[..])\n+                    }\n+                )\n+            });\n         let infer_lifetimes = lifetimes.len() == 0;\n \n         let count_lifetime_params = |n| {"}, {"sha": "0d44c583cffd4283c514a5f8bbb82bc22633ab9d", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f9d0968906aa6bc5ed0f82d74b5504b58afc9d3b/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9d0968906aa6bc5ed0f82d74b5504b58afc9d3b/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=f9d0968906aa6bc5ed0f82d74b5504b58afc9d3b", "patch": "@@ -2851,15 +2851,15 @@ impl Clean<Type> for hir::Ty {\n                     let provided_params = &path.segments.last().unwrap();\n                     let mut ty_substs = FxHashMap();\n                     let mut lt_substs = FxHashMap();\n-                    provided_params.with_args(|provided_params| {\n+                    provided_params.with_generic_args(|generic_args| {\n                         let mut indices = GenericParamCount {\n                             lifetimes: 0,\n                             types: 0\n                         };\n                         for param in generics.params.iter() {\n                             match param {\n                                 hir::GenericParam::Lifetime(lt_param) => {\n-                                    if let Some(lt) = provided_params.lifetimes()\n+                                    if let Some(lt) = generic_args.lifetimes()\n                                         .nth(indices.lifetimes).cloned() {\n                                         if !lt.is_elided() {\n                                             let lt_def_id =\n@@ -2872,7 +2872,7 @@ impl Clean<Type> for hir::Ty {\n                                 hir::GenericParam::Type(ty_param) => {\n                                     let ty_param_def =\n                                         Def::TyParam(cx.tcx.hir.local_def_id(ty_param.id));\n-                                    if let Some(ty) = provided_params.types()\n+                                    if let Some(ty) = generic_args.types()\n                                         .nth(indices.types).cloned() {\n                                         ty_substs.insert(ty_param_def, ty.into_inner().clean(cx));\n                                     } else if let Some(default) = ty_param.default.clone() {\n@@ -3497,9 +3497,9 @@ impl Clean<GenericArgs> for hir::GenericArgs {\n                 lifetimes: if self.lifetimes().all(|lt| lt.is_elided()) {\n                     vec![]\n                 } else {\n-                    self.lifetimes().map(|lp| lp.clean(cx)).collect()\n+                    self.lifetimes().map(|lt| lt.clean(cx)).collect()\n                 },\n-                types: self.types().map(|tp| tp.clean(cx)).collect(),\n+                types: self.types().map(|ty| ty.clean(cx)).collect(),\n                 bindings: self.bindings.clean(cx),\n             }\n         }\n@@ -3516,7 +3516,7 @@ impl Clean<PathSegment> for hir::PathSegment {\n     fn clean(&self, cx: &DocContext) -> PathSegment {\n         PathSegment {\n             name: self.name.clean(cx),\n-            args: self.with_args(|args| args.clean(cx))\n+            args: self.with_generic_args(|generic_args| generic_args.clean(cx))\n         }\n     }\n }"}, {"sha": "5ae520050e59331505f4a78add416be4e57def84", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f9d0968906aa6bc5ed0f82d74b5504b58afc9d3b/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9d0968906aa6bc5ed0f82d74b5504b58afc9d3b/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=f9d0968906aa6bc5ed0f82d74b5504b58afc9d3b", "patch": "@@ -188,8 +188,8 @@ pub struct AngleBracketedArgs {\n \n impl AngleBracketedArgs {\n     pub fn lifetimes(&self) -> impl DoubleEndedIterator<Item = &Lifetime> {\n-        self.args.iter().filter_map(|p| {\n-            if let GenericArg::Lifetime(lt) = p {\n+        self.args.iter().filter_map(|arg| {\n+            if let GenericArg::Lifetime(lt) = arg {\n                 Some(lt)\n             } else {\n                 None\n@@ -198,8 +198,8 @@ impl AngleBracketedArgs {\n     }\n \n     pub fn types(&self) -> impl DoubleEndedIterator<Item = &P<Ty>> {\n-        self.args.iter().filter_map(|p| {\n-            if let GenericArg::Type(ty) = p {\n+        self.args.iter().filter_map(|arg| {\n+            if let GenericArg::Type(ty) = arg {\n                 Some(ty)\n             } else {\n                 None"}, {"sha": "c544adb5c1c868e229514e4edf4e5c6c8db40fe4", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f9d0968906aa6bc5ed0f82d74b5504b58afc9d3b/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9d0968906aa6bc5ed0f82d74b5504b58afc9d3b/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=f9d0968906aa6bc5ed0f82d74b5504b58afc9d3b", "patch": "@@ -31,7 +31,7 @@ pub trait AstBuilder {\n     fn path_all(&self, sp: Span,\n                 global: bool,\n                 idents: Vec<ast::Ident>,\n-                parameters: Vec<ast::GenericArg>,\n+                args: Vec<ast::GenericArg>,\n                 bindings: Vec<ast::TypeBinding>)\n         -> ast::Path;\n \n@@ -42,7 +42,7 @@ pub trait AstBuilder {\n     fn qpath_all(&self, self_type: P<ast::Ty>,\n                 trait_path: ast::Path,\n                 ident: ast::Ident,\n-                parameters: Vec<ast::GenericArg>,\n+                args: Vec<ast::GenericArg>,\n                 bindings: Vec<ast::TypeBinding>)\n                 -> (ast::QSelf, ast::Path);\n \n@@ -302,13 +302,13 @@ pub trait AstBuilder {\n \n impl<'a> AstBuilder for ExtCtxt<'a> {\n     fn path(&self, span: Span, strs: Vec<ast::Ident> ) -> ast::Path {\n-        self.path_all(span, false, strs, Vec::new(), Vec::new())\n+        self.path_all(span, false, strs, vec![], vec![])\n     }\n     fn path_ident(&self, span: Span, id: ast::Ident) -> ast::Path {\n         self.path(span, vec![id])\n     }\n     fn path_global(&self, span: Span, strs: Vec<ast::Ident> ) -> ast::Path {\n-        self.path_all(span, true, strs, Vec::new(), Vec::new())\n+        self.path_all(span, true, strs, vec![], vec![])\n     }\n     fn path_all(&self,\n                 span: Span,\n@@ -318,7 +318,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n                 bindings: Vec<ast::TypeBinding> )\n                 -> ast::Path {\n         let last_ident = idents.pop().unwrap();\n-        let mut segments: Vec<ast::PathSegment> = Vec::new();\n+        let mut segments: Vec<ast::PathSegment> = vec![];\n \n         segments.extend(idents.into_iter().map(|ident| {\n             ast::PathSegment::from_ident(ident.with_span_pos(span))\n@@ -424,7 +424,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n             self.path_all(DUMMY_SP,\n                           true,\n                           self.std_path(&[\"option\", \"Option\"]),\n-                          vec![ ast::GenericArg::Type(ty) ],\n+                          vec![ast::GenericArg::Type(ty)],\n                           Vec::new()))\n     }\n "}, {"sha": "f74fe1feb40c127638be7d0399acd3e933bc0c48", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 24, "deletions": 20, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/f9d0968906aa6bc5ed0f82d74b5504b58afc9d3b/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9d0968906aa6bc5ed0f82d74b5504b58afc9d3b/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=f9d0968906aa6bc5ed0f82d74b5504b58afc9d3b", "patch": "@@ -132,10 +132,9 @@ pub trait Folder : Sized {\n         noop_fold_exprs(es, self)\n     }\n \n-    fn fold_param(&mut self, p: GenericArg) -> GenericArg {\n-        match p {\n-            GenericArg::Lifetime(lt) =>\n-                GenericArg::Lifetime(self.fold_lifetime(lt)),\n+    fn fold_generic_arg(&mut self, arg: GenericArg) -> GenericArg {\n+        match arg {\n+            GenericArg::Lifetime(lt) => GenericArg::Lifetime(self.fold_lifetime(lt)),\n             GenericArg::Type(ty) => GenericArg::Type(self.fold_ty(ty)),\n         }\n     }\n@@ -441,9 +440,9 @@ pub fn noop_fold_usize<T: Folder>(i: usize, _: &mut T) -> usize {\n \n pub fn noop_fold_path<T: Folder>(Path { segments, span }: Path, fld: &mut T) -> Path {\n     Path {\n-        segments: segments.move_map(|PathSegment {ident, args}| PathSegment {\n+        segments: segments.move_map(|PathSegment { ident, args }| PathSegment {\n             ident: fld.fold_ident(ident),\n-            args: args.map(|ps| ps.map(|ps| fld.fold_generic_args(ps))),\n+            args: args.map(|args| args.map(|args| fld.fold_generic_args(args))),\n         }),\n         span: fld.new_span(span)\n     }\n@@ -462,14 +461,15 @@ pub fn noop_fold_qpath<T: Folder>(qself: Option<QSelf>,\n     (qself, fld.fold_path(path))\n }\n \n-pub fn noop_fold_generic_args<T: Folder>(generic_args: GenericArgs, fld: &mut T)\n-                                         -> GenericArgs\n+pub fn noop_fold_generic_args<T: Folder>(generic_args: GenericArgs, fld: &mut T) -> GenericArgs\n {\n     match generic_args {\n-        GenericArgs::AngleBracketed(data) =>\n-            GenericArgs::AngleBracketed(fld.fold_angle_bracketed_parameter_data(data)),\n-        GenericArgs::Parenthesized(data) =>\n-            GenericArgs::Parenthesized(fld.fold_parenthesized_parameter_data(data)),\n+        GenericArgs::AngleBracketed(data) => {\n+            GenericArgs::AngleBracketed(fld.fold_angle_bracketed_parameter_data(data))\n+        }\n+        GenericArgs::Parenthesized(data) => {\n+            GenericArgs::Parenthesized(fld.fold_parenthesized_parameter_data(data))\n+        }\n     }\n }\n \n@@ -478,19 +478,23 @@ pub fn noop_fold_angle_bracketed_parameter_data<T: Folder>(data: AngleBracketedA\n                                                            -> AngleBracketedArgs\n {\n     let AngleBracketedArgs { args, bindings, span } = data;\n-    AngleBracketedArgs { args: args.move_map(|p| fld.fold_param(p)),\n-                                  bindings: bindings.move_map(|b| fld.fold_ty_binding(b)),\n-                                  span: fld.new_span(span) }\n+    AngleBracketedArgs {\n+        args: args.move_map(|arg| fld.fold_generic_arg(arg)),\n+        bindings: bindings.move_map(|b| fld.fold_ty_binding(b)),\n+        span: fld.new_span(span)\n+    }\n }\n \n pub fn noop_fold_parenthesized_parameter_data<T: Folder>(data: ParenthesizedArgData,\n                                                          fld: &mut T)\n                                                          -> ParenthesizedArgData\n {\n     let ParenthesizedArgData { inputs, output, span } = data;\n-    ParenthesizedArgData { inputs: inputs.move_map(|ty| fld.fold_ty(ty)),\n-                                 output: output.map(|ty| fld.fold_ty(ty)),\n-                                 span: fld.new_span(span) }\n+    ParenthesizedArgData {\n+        inputs: inputs.move_map(|ty| fld.fold_ty(ty)),\n+        output: output.map(|ty| fld.fold_ty(ty)),\n+        span: fld.new_span(span)\n+    }\n }\n \n pub fn noop_fold_local<T: Folder>(l: P<Local>, fld: &mut T) -> P<Local> {\n@@ -1191,8 +1195,8 @@ pub fn noop_fold_expr<T: Folder>(Expr {id, node, span, attrs}: Expr, folder: &mu\n                 ExprKind::MethodCall(\n                     PathSegment {\n                         ident: folder.fold_ident(seg.ident),\n-                        args: seg.args.map(|ps| {\n-                            ps.map(|ps| folder.fold_generic_args(ps))\n+                        args: seg.args.map(|args| {\n+                            args.map(|args| folder.fold_generic_args(args))\n                         }),\n                     },\n                     folder.fold_exprs(args))"}, {"sha": "3e0e533bc08a8765ad30160123415df43345f668", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f9d0968906aa6bc5ed0f82d74b5504b58afc9d3b/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9d0968906aa6bc5ed0f82d74b5504b58afc9d3b/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=f9d0968906aa6bc5ed0f82d74b5504b58afc9d3b", "patch": "@@ -1017,8 +1017,8 @@ impl<'a> State<'a> {\n         Ok(())\n     }\n \n-    pub fn print_param(&mut self, param: &GenericArg) -> io::Result<()> {\n-        match param {\n+    pub fn print_generic_arg(&mut self, generic_arg: &GenericArg) -> io::Result<()> {\n+        match generic_arg {\n             GenericArg::Lifetime(lt) => self.print_lifetime(lt),\n             GenericArg::Type(ty) => self.print_type(ty),\n         }\n@@ -2469,9 +2469,9 @@ impl<'a> State<'a> {\n     }\n \n     fn print_generic_args(&mut self,\n-                             args: &ast::GenericArgs,\n-                             colons_before_params: bool)\n-                             -> io::Result<()>\n+                          args: &ast::GenericArgs,\n+                          colons_before_params: bool)\n+                          -> io::Result<()>\n     {\n         if colons_before_params {\n             self.s.word(\"::\")?\n@@ -2481,7 +2481,9 @@ impl<'a> State<'a> {\n             ast::GenericArgs::AngleBracketed(ref data) => {\n                 self.s.word(\"<\")?;\n \n-                self.commasep(Inconsistent, &data.args, |s, p| s.print_param(p))?;\n+                self.commasep(Inconsistent, &data.args, |s, generic_arg| {\n+                    s.print_generic_arg(generic_arg)\n+                })?;\n \n                 let mut comma = data.args.len() != 0;\n "}, {"sha": "5ac33701baf29df4ecce9b1bf61b99fa710f8c13", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f9d0968906aa6bc5ed0f82d74b5504b58afc9d3b/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9d0968906aa6bc5ed0f82d74b5504b58afc9d3b/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=f9d0968906aa6bc5ed0f82d74b5504b58afc9d3b", "patch": "@@ -131,8 +131,8 @@ pub trait Visitor<'ast>: Sized {\n     fn visit_generic_args(&mut self, path_span: Span, generic_args: &'ast GenericArgs) {\n         walk_generic_args(self, path_span, generic_args)\n     }\n-    fn visit_angle_bracketed_param(&mut self, param: &'ast GenericArg) {\n-        match param {\n+    fn visit_generic_arg(&mut self, generic_arg: &'ast GenericArg) {\n+        match generic_arg {\n             GenericArg::Lifetime(lt) => self.visit_lifetime(lt),\n             GenericArg::Type(ty)     => self.visit_ty(ty),\n         }\n@@ -393,7 +393,7 @@ pub fn walk_generic_args<'a, V>(visitor: &mut V,\n {\n     match *generic_args {\n         GenericArgs::AngleBracketed(ref data) => {\n-            walk_list!(visitor, visit_angle_bracketed_param, &data.args);\n+            walk_list!(visitor, visit_generic_arg, &data.args);\n             walk_list!(visitor, visit_assoc_type_binding, &data.bindings);\n         }\n         GenericArgs::Parenthesized(ref data) => {"}, {"sha": "7f5b78684fbc18a9011b7cd6585532a47594279b", "filename": "src/test/ui/error-codes/E0110.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9d0968906aa6bc5ed0f82d74b5504b58afc9d3b/src%2Ftest%2Fui%2Ferror-codes%2FE0110.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9d0968906aa6bc5ed0f82d74b5504b58afc9d3b/src%2Ftest%2Fui%2Ferror-codes%2FE0110.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0110.stderr?ref=f9d0968906aa6bc5ed0f82d74b5504b58afc9d3b", "patch": "@@ -2,7 +2,7 @@ error[E0110]: lifetime parameters are not allowed on this type\n   --> $DIR/E0110.rs:11:14\n    |\n LL | type X = u32<'static>; //~ ERROR E0110\n-   |              ^^^^^^^ lifetime parameter not allowed on this type\n+   |              ^^^^^^^ lifetime parameter not allowed\n \n error: aborting due to previous error\n "}, {"sha": "8c31ab2ca88e4d71a88dda2c6d1b759b1c3444d0", "filename": "src/test/ui/rfc1598-generic-associated-types/collections.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9d0968906aa6bc5ed0f82d74b5504b58afc9d3b/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fcollections.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9d0968906aa6bc5ed0f82d74b5504b58afc9d3b/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fcollections.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fcollections.stderr?ref=f9d0968906aa6bc5ed0f82d74b5504b58afc9d3b", "patch": "@@ -20,13 +20,13 @@ error[E0110]: lifetime parameters are not allowed on this type\n   --> $DIR/collections.rs:33:50\n    |\n LL |     fn iterate<'iter>(&'iter self) -> Self::Iter<'iter>;\n-   |                                                  ^^^^^ lifetime parameter not allowed on this type\n+   |                                                  ^^^^^ lifetime parameter not allowed\n \n error[E0110]: lifetime parameters are not allowed on this type\n   --> $DIR/collections.rs:59:50\n    |\n LL |     fn iterate<'iter>(&'iter self) -> Self::Iter<'iter> {\n-   |                                                  ^^^^^ lifetime parameter not allowed on this type\n+   |                                                  ^^^^^ lifetime parameter not allowed\n \n error: aborting due to 5 previous errors\n "}, {"sha": "1746122eb49f41d68b726acf25b086e6cda7e555", "filename": "src/test/ui/rfc1598-generic-associated-types/construct_with_other_type.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f9d0968906aa6bc5ed0f82d74b5504b58afc9d3b/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fconstruct_with_other_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9d0968906aa6bc5ed0f82d74b5504b58afc9d3b/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fconstruct_with_other_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fconstruct_with_other_type.stderr?ref=f9d0968906aa6bc5ed0f82d74b5504b58afc9d3b", "patch": "@@ -2,19 +2,19 @@ error[E0110]: lifetime parameters are not allowed on this type\n   --> $DIR/construct_with_other_type.rs:26:46\n    |\n LL |     type Baa<'a>: Deref<Target = <Self::Quux<'a> as Foo>::Bar<'a, 'static>>;\n-   |                                              ^^ lifetime parameter not allowed on this type\n+   |                                              ^^ lifetime parameter not allowed\n \n error[E0110]: lifetime parameters are not allowed on this type\n   --> $DIR/construct_with_other_type.rs:26:63\n    |\n LL |     type Baa<'a>: Deref<Target = <Self::Quux<'a> as Foo>::Bar<'a, 'static>>;\n-   |                                                               ^^ lifetime parameter not allowed on this type\n+   |                                                               ^^ lifetime parameter not allowed\n \n error[E0110]: lifetime parameters are not allowed on this type\n   --> $DIR/construct_with_other_type.rs:34:40\n    |\n LL |     type Baa<'a> = &'a <T as Foo>::Bar<'a, 'static>;\n-   |                                        ^^ lifetime parameter not allowed on this type\n+   |                                        ^^ lifetime parameter not allowed\n \n error: aborting due to 3 previous errors\n "}, {"sha": "d48c21477b310668bfa620ace9f6314c561a08e0", "filename": "src/test/ui/rfc1598-generic-associated-types/generic_associated_type_undeclared_lifetimes.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f9d0968906aa6bc5ed0f82d74b5504b58afc9d3b/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgeneric_associated_type_undeclared_lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9d0968906aa6bc5ed0f82d74b5504b58afc9d3b/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgeneric_associated_type_undeclared_lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fgeneric_associated_type_undeclared_lifetimes.stderr?ref=f9d0968906aa6bc5ed0f82d74b5504b58afc9d3b", "patch": "@@ -14,19 +14,19 @@ error[E0110]: lifetime parameters are not allowed on this type\n   --> $DIR/generic_associated_type_undeclared_lifetimes.rs:20:47\n    |\n LL |     type Iter<'a>: Iterator<Item = Self::Item<'a>>\n-   |                                               ^^ lifetime parameter not allowed on this type\n+   |                                               ^^ lifetime parameter not allowed\n \n error[E0110]: lifetime parameters are not allowed on this type\n   --> $DIR/generic_associated_type_undeclared_lifetimes.rs:22:37\n    |\n LL |         + Deref<Target = Self::Item<'b>>;\n-   |                                     ^^ lifetime parameter not allowed on this type\n+   |                                     ^^ lifetime parameter not allowed\n \n error[E0110]: lifetime parameters are not allowed on this type\n   --> $DIR/generic_associated_type_undeclared_lifetimes.rs:26:41\n    |\n LL |     fn iter<'a>(&'a self) -> Self::Iter<'undeclared>;\n-   |                                         ^^^^^^^^^^^ lifetime parameter not allowed on this type\n+   |                                         ^^^^^^^^^^^ lifetime parameter not allowed\n \n error: aborting due to 5 previous errors\n "}, {"sha": "737a29ec2c8be46ced3f82ad9674b416b6ca9b73", "filename": "src/test/ui/rfc1598-generic-associated-types/iterable.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f9d0968906aa6bc5ed0f82d74b5504b58afc9d3b/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fiterable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9d0968906aa6bc5ed0f82d74b5504b58afc9d3b/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fiterable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fiterable.stderr?ref=f9d0968906aa6bc5ed0f82d74b5504b58afc9d3b", "patch": "@@ -2,37 +2,37 @@ error[E0110]: lifetime parameters are not allowed on this type\n   --> $DIR/iterable.rs:20:47\n    |\n LL |     type Iter<'a>: Iterator<Item = Self::Item<'a>>;\n-   |                                               ^^ lifetime parameter not allowed on this type\n+   |                                               ^^ lifetime parameter not allowed\n \n error[E0110]: lifetime parameters are not allowed on this type\n   --> $DIR/iterable.rs:49:53\n    |\n LL | fn make_iter<'a, I: Iterable>(it: &'a I) -> I::Iter<'a> {\n-   |                                                     ^^ lifetime parameter not allowed on this type\n+   |                                                     ^^ lifetime parameter not allowed\n \n error[E0110]: lifetime parameters are not allowed on this type\n   --> $DIR/iterable.rs:54:60\n    |\n LL | fn get_first<'a, I: Iterable>(it: &'a I) -> Option<I::Item<'a>> {\n-   |                                                            ^^ lifetime parameter not allowed on this type\n+   |                                                            ^^ lifetime parameter not allowed\n \n error[E0110]: lifetime parameters are not allowed on this type\n   --> $DIR/iterable.rs:23:41\n    |\n LL |     fn iter<'a>(&'a self) -> Self::Iter<'a>;\n-   |                                         ^^ lifetime parameter not allowed on this type\n+   |                                         ^^ lifetime parameter not allowed\n \n error[E0110]: lifetime parameters are not allowed on this type\n   --> $DIR/iterable.rs:32:41\n    |\n LL |     fn iter<'a>(&'a self) -> Self::Iter<'a> {\n-   |                                         ^^ lifetime parameter not allowed on this type\n+   |                                         ^^ lifetime parameter not allowed\n \n error[E0110]: lifetime parameters are not allowed on this type\n   --> $DIR/iterable.rs:43:41\n    |\n LL |     fn iter<'a>(&'a self) -> Self::Iter<'a> {\n-   |                                         ^^ lifetime parameter not allowed on this type\n+   |                                         ^^ lifetime parameter not allowed\n \n error: aborting due to 6 previous errors\n "}, {"sha": "c8d37a51fa96bd5cd73e1c6161a89c453bca1b62", "filename": "src/test/ui/rfc1598-generic-associated-types/parameter_number_and_kind.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f9d0968906aa6bc5ed0f82d74b5504b58afc9d3b/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fparameter_number_and_kind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9d0968906aa6bc5ed0f82d74b5504b58afc9d3b/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fparameter_number_and_kind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fparameter_number_and_kind.stderr?ref=f9d0968906aa6bc5ed0f82d74b5504b58afc9d3b", "patch": "@@ -1,33 +1,33 @@\n+error[E0110]: lifetime parameters are not allowed on this type\n+  --> $DIR/parameter_number_and_kind.rs:26:27\n+   |\n+LL |     type FOk<T> = Self::E<'static, T>;\n+   |                           ^^^^^^^ lifetime parameter not allowed\n+\n error[E0109]: type parameters are not allowed on this type\n   --> $DIR/parameter_number_and_kind.rs:26:36\n    |\n LL |     type FOk<T> = Self::E<'static, T>;\n    |                                    ^ type parameter not allowed\n \n error[E0110]: lifetime parameters are not allowed on this type\n-  --> $DIR/parameter_number_and_kind.rs:26:27\n+  --> $DIR/parameter_number_and_kind.rs:29:26\n    |\n-LL |     type FOk<T> = Self::E<'static, T>;\n-   |                           ^^^^^^^ lifetime parameter not allowed on this type\n+LL |     type FErr1 = Self::E<'static, 'static>; // Error\n+   |                          ^^^^^^^ lifetime parameter not allowed\n \n error[E0110]: lifetime parameters are not allowed on this type\n-  --> $DIR/parameter_number_and_kind.rs:29:26\n+  --> $DIR/parameter_number_and_kind.rs:31:29\n    |\n-LL |     type FErr1 = Self::E<'static, 'static>; // Error\n-   |                          ^^^^^^^ lifetime parameter not allowed on this type\n+LL |     type FErr2<T> = Self::E<'static, T, u32>; // Error\n+   |                             ^^^^^^^ lifetime parameter not allowed\n \n error[E0109]: type parameters are not allowed on this type\n   --> $DIR/parameter_number_and_kind.rs:31:38\n    |\n LL |     type FErr2<T> = Self::E<'static, T, u32>; // Error\n    |                                      ^ type parameter not allowed\n \n-error[E0110]: lifetime parameters are not allowed on this type\n-  --> $DIR/parameter_number_and_kind.rs:31:29\n-   |\n-LL |     type FErr2<T> = Self::E<'static, T, u32>; // Error\n-   |                             ^^^^^^^ lifetime parameter not allowed on this type\n-\n error: aborting due to 5 previous errors\n \n Some errors occurred: E0109, E0110."}, {"sha": "522ddb5dc135e36e162d34cc5bfb34e2f27f427b", "filename": "src/test/ui/rfc1598-generic-associated-types/streaming_iterator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9d0968906aa6bc5ed0f82d74b5504b58afc9d3b/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fstreaming_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9d0968906aa6bc5ed0f82d74b5504b58afc9d3b/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fstreaming_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fstreaming_iterator.rs?ref=f9d0968906aa6bc5ed0f82d74b5504b58afc9d3b", "patch": "@@ -10,7 +10,7 @@\n \n #![feature(generic_associated_types)]\n \n-//FIXME(#44265): \"lifetime parameter not allowed\" errors will be addressed in a\n+//FIXME(#44265): \"lifetime parameter not allowed on this type\" errors will be addressed in a\n // follow-up PR\n \n use std::fmt::Display;"}, {"sha": "12e206cbd476af56a70098be716d39a69b699fc8", "filename": "src/test/ui/rfc1598-generic-associated-types/streaming_iterator.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f9d0968906aa6bc5ed0f82d74b5504b58afc9d3b/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fstreaming_iterator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9d0968906aa6bc5ed0f82d74b5504b58afc9d3b/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fstreaming_iterator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1598-generic-associated-types%2Fstreaming_iterator.stderr?ref=f9d0968906aa6bc5ed0f82d74b5504b58afc9d3b", "patch": "@@ -2,31 +2,31 @@ error[E0110]: lifetime parameters are not allowed on this type\n   --> $DIR/streaming_iterator.rs:27:41\n    |\n LL |     bar: <T as StreamingIterator>::Item<'static>,\n-   |                                         ^^^^^^^ lifetime parameter not allowed on this type\n+   |                                         ^^^^^^^ lifetime parameter not allowed\n \n error[E0110]: lifetime parameters are not allowed on this type\n   --> $DIR/streaming_iterator.rs:35:64\n    |\n LL | fn foo<T>(iter: T) where T: StreamingIterator, for<'a> T::Item<'a>: Display { /* ... */ }\n-   |                                                                ^^ lifetime parameter not allowed on this type\n+   |                                                                ^^ lifetime parameter not allowed\n \n error[E0110]: lifetime parameters are not allowed on this type\n   --> $DIR/streaming_iterator.rs:21:48\n    |\n LL |     fn next<'a>(&'a self) -> Option<Self::Item<'a>>;\n-   |                                                ^^ lifetime parameter not allowed on this type\n+   |                                                ^^ lifetime parameter not allowed\n \n error[E0110]: lifetime parameters are not allowed on this type\n   --> $DIR/streaming_iterator.rs:47:37\n    |\n LL |     type Item<'a> = (usize, I::Item<'a>);\n-   |                                     ^^ lifetime parameter not allowed on this type\n+   |                                     ^^ lifetime parameter not allowed\n \n error[E0110]: lifetime parameters are not allowed on this type\n   --> $DIR/streaming_iterator.rs:49:48\n    |\n LL |     fn next<'a>(&'a self) -> Option<Self::Item<'a>> {\n-   |                                                ^^ lifetime parameter not allowed on this type\n+   |                                                ^^ lifetime parameter not allowed\n \n error: aborting due to 5 previous errors\n "}]}