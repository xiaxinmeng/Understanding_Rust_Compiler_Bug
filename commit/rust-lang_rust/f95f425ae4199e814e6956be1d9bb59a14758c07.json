{"sha": "f95f425ae4199e814e6956be1d9bb59a14758c07", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5NWY0MjVhZTQxOTllODE0ZTY5NTZiZTFkOWJiNTlhMTQ3NThjMDc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-30T19:02:55Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-30T19:02:55Z"}, "message": "Use ty to access most TypeRefs", "tree": {"sha": "dd3503a2be3a6699a6b111844dbcdc85b37e2425", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd3503a2be3a6699a6b111844dbcdc85b37e2425"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f95f425ae4199e814e6956be1d9bb59a14758c07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f95f425ae4199e814e6956be1d9bb59a14758c07", "html_url": "https://github.com/rust-lang/rust/commit/f95f425ae4199e814e6956be1d9bb59a14758c07", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f95f425ae4199e814e6956be1d9bb59a14758c07/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e2642efccd5855e4158b01a006e7884a96982bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e2642efccd5855e4158b01a006e7884a96982bb", "html_url": "https://github.com/rust-lang/rust/commit/2e2642efccd5855e4158b01a006e7884a96982bb"}], "stats": {"total": 80, "additions": 39, "deletions": 41}, "files": [{"sha": "167e162d804ea5decceb2848d78db8974a1ad1cd", "filename": "crates/ra_assists/src/handlers/change_return_type_to_result.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f95f425ae4199e814e6956be1d9bb59a14758c07/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_return_type_to_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f95f425ae4199e814e6956be1d9bb59a14758c07/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_return_type_to_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_return_type_to_result.rs?ref=f95f425ae4199e814e6956be1d9bb59a14758c07", "patch": "@@ -22,7 +22,7 @@ pub(crate) fn change_return_type_to_result(acc: &mut Assists, ctx: &AssistContex\n     // FIXME: extend to lambdas as well\n     let fn_def = ret_type.syntax().parent().and_then(ast::Fn::cast)?;\n \n-    let type_ref = &ret_type.type_ref()?;\n+    let type_ref = &ret_type.ty()?;\n     let ret_type_str = type_ref.syntax().text().to_string();\n     let first_part_ret_type = ret_type_str.splitn(2, '<').next();\n     if let Some(ret_type_first_part) = first_part_ret_type {"}, {"sha": "9da23640a68d2ccecb2d97be5e7d64e3e28072d6", "filename": "crates/ra_assists/src/handlers/generate_from_impl_for_enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f95f425ae4199e814e6956be1d9bb59a14758c07/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fgenerate_from_impl_for_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f95f425ae4199e814e6956be1d9bb59a14758c07/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fgenerate_from_impl_for_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fgenerate_from_impl_for_enum.rs?ref=f95f425ae4199e814e6956be1d9bb59a14758c07", "patch": "@@ -32,7 +32,7 @@ pub(crate) fn generate_from_impl_for_enum(acc: &mut Assists, ctx: &AssistContext\n     if field_list.fields().count() != 1 {\n         return None;\n     }\n-    let field_type = field_list.fields().next()?.type_ref()?;\n+    let field_type = field_list.fields().next()?.ty()?;\n     let path = match field_type {\n         ast::TypeRef::PathType(it) => it,\n         _ => return None,"}, {"sha": "6cb56a1cd00e6e8dc4d4036801f7cf3b21ba2d6b", "filename": "crates/ra_hir_def/src/adt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f95f425ae4199e814e6956be1d9bb59a14758c07/crates%2Fra_hir_def%2Fsrc%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f95f425ae4199e814e6956be1d9bb59a14758c07/crates%2Fra_hir_def%2Fsrc%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fadt.rs?ref=f95f425ae4199e814e6956be1d9bb59a14758c07", "patch": "@@ -234,7 +234,7 @@ fn lower_struct(\n                     || Either::Left(fd.clone()),\n                     || FieldData {\n                         name: Name::new_tuple_field(i),\n-                        type_ref: TypeRef::from_ast_opt(&ctx, fd.type_ref()),\n+                        type_ref: TypeRef::from_ast_opt(&ctx, fd.ty()),\n                         visibility: RawVisibility::from_ast(db, ast.with_value(fd.visibility())),\n                     },\n                 );"}, {"sha": "827ced4ad211fe2a54d46081eace5fcfc51f6508", "filename": "crates/ra_hir_def/src/body/lower.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f95f425ae4199e814e6956be1d9bb59a14758c07/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f95f425ae4199e814e6956be1d9bb59a14758c07/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs?ref=f95f425ae4199e814e6956be1d9bb59a14758c07", "patch": "@@ -432,7 +432,7 @@ impl ExprCollector<'_> {\n             }\n             ast::Expr::CastExpr(e) => {\n                 let expr = self.collect_expr_opt(e.expr());\n-                let type_ref = TypeRef::from_ast_opt(&self.ctx(), e.type_ref());\n+                let type_ref = TypeRef::from_ast_opt(&self.ctx(), e.ty());\n                 self.alloc_expr(Expr::Cast { expr, type_ref }, syntax_ptr)\n             }\n             ast::Expr::RefExpr(e) => {\n@@ -471,10 +471,8 @@ impl ExprCollector<'_> {\n                         arg_types.push(type_ref);\n                     }\n                 }\n-                let ret_type = e\n-                    .ret_type()\n-                    .and_then(|r| r.type_ref())\n-                    .map(|it| TypeRef::from_ast(&self.ctx(), it));\n+                let ret_type =\n+                    e.ret_type().and_then(|r| r.ty()).map(|it| TypeRef::from_ast(&self.ctx(), it));\n                 let body = self.collect_expr_opt(e.body());\n                 self.alloc_expr(Expr::Lambda { args, arg_types, ret_type, body }, syntax_ptr)\n             }"}, {"sha": "feb31579e5e8cabd206c392d41c25af7f85a1f67", "filename": "crates/ra_hir_def/src/item_tree/lower.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f95f425ae4199e814e6956be1d9bb59a14758c07/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f95f425ae4199e814e6956be1d9bb59a14758c07/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs?ref=f95f425ae4199e814e6956be1d9bb59a14758c07", "patch": "@@ -228,7 +228,7 @@ impl Ctx {\n     fn lower_tuple_field(&mut self, idx: usize, field: &ast::TupleField) -> Field {\n         let name = Name::new_tuple_field(idx);\n         let visibility = self.lower_visibility(field);\n-        let type_ref = self.lower_type_ref_opt(field.type_ref());\n+        let type_ref = self.lower_type_ref_opt(field.ty());\n         let res = Field { name, type_ref, visibility };\n         res\n     }\n@@ -317,7 +317,7 @@ impl Ctx {\n             }\n         }\n \n-        let ret_type = match func.ret_type().and_then(|rt| rt.type_ref()) {\n+        let ret_type = match func.ret_type().and_then(|rt| rt.ty()) {\n             Some(type_ref) => TypeRef::from_ast(&self.body_ctx, type_ref),\n             _ => TypeRef::unit(),\n         };\n@@ -352,7 +352,7 @@ impl Ctx {\n         type_alias: &ast::TypeAlias,\n     ) -> Option<FileItemTreeId<TypeAlias>> {\n         let name = type_alias.name()?.as_name();\n-        let type_ref = type_alias.type_ref().map(|it| self.lower_type_ref(&it));\n+        let type_ref = type_alias.ty().map(|it| self.lower_type_ref(&it));\n         let visibility = self.lower_visibility(type_alias);\n         let bounds = self.lower_type_bounds(type_alias);\n         let generic_params = self.lower_generic_params(GenericsOwner::TypeAlias, type_alias);"}, {"sha": "07d17916ae66f665702784026e91530fe890a9bf", "filename": "crates/ra_hir_def/src/path/lower.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f95f425ae4199e814e6956be1d9bb59a14758c07/crates%2Fra_hir_def%2Fsrc%2Fpath%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f95f425ae4199e814e6956be1d9bb59a14758c07/crates%2Fra_hir_def%2Fsrc%2Fpath%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fpath%2Flower.rs?ref=f95f425ae4199e814e6956be1d9bb59a14758c07", "patch": "@@ -196,7 +196,7 @@ fn lower_generic_args_from_fn_path(\n         args.push(arg);\n     }\n     if let Some(ret_type) = ret_type {\n-        let type_ref = TypeRef::from_ast_opt(&ctx, ret_type.type_ref());\n+        let type_ref = TypeRef::from_ast_opt(&ctx, ret_type.ty());\n         bindings.push(AssociatedTypeBinding {\n             name: name![Output],\n             type_ref: Some(type_ref),"}, {"sha": "a5dc10eac50292a17036f1f83807eed4b980c0e7", "filename": "crates/ra_hir_def/src/type_ref.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f95f425ae4199e814e6956be1d9bb59a14758c07/crates%2Fra_hir_def%2Fsrc%2Ftype_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f95f425ae4199e814e6956be1d9bb59a14758c07/crates%2Fra_hir_def%2Fsrc%2Ftype_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Ftype_ref.rs?ref=f95f425ae4199e814e6956be1d9bb59a14758c07", "patch": "@@ -82,7 +82,7 @@ impl TypeRef {\n     /// Converts an `ast::TypeRef` to a `hir::TypeRef`.\n     pub(crate) fn from_ast(ctx: &LowerCtx, node: ast::TypeRef) -> Self {\n         match node {\n-            ast::TypeRef::ParenType(inner) => TypeRef::from_ast_opt(&ctx, inner.type_ref()),\n+            ast::TypeRef::ParenType(inner) => TypeRef::from_ast_opt(&ctx, inner.ty()),\n             ast::TypeRef::TupleType(inner) => {\n                 TypeRef::Tuple(inner.fields().map(|it| TypeRef::from_ast(ctx, it)).collect())\n             }\n@@ -96,26 +96,26 @@ impl TypeRef {\n                     .unwrap_or(TypeRef::Error)\n             }\n             ast::TypeRef::PointerType(inner) => {\n-                let inner_ty = TypeRef::from_ast_opt(&ctx, inner.type_ref());\n+                let inner_ty = TypeRef::from_ast_opt(&ctx, inner.ty());\n                 let mutability = Mutability::from_mutable(inner.mut_token().is_some());\n                 TypeRef::RawPtr(Box::new(inner_ty), mutability)\n             }\n             ast::TypeRef::ArrayType(inner) => {\n-                TypeRef::Array(Box::new(TypeRef::from_ast_opt(&ctx, inner.type_ref())))\n+                TypeRef::Array(Box::new(TypeRef::from_ast_opt(&ctx, inner.ty())))\n             }\n             ast::TypeRef::SliceType(inner) => {\n-                TypeRef::Slice(Box::new(TypeRef::from_ast_opt(&ctx, inner.type_ref())))\n+                TypeRef::Slice(Box::new(TypeRef::from_ast_opt(&ctx, inner.ty())))\n             }\n             ast::TypeRef::ReferenceType(inner) => {\n-                let inner_ty = TypeRef::from_ast_opt(&ctx, inner.type_ref());\n+                let inner_ty = TypeRef::from_ast_opt(&ctx, inner.ty());\n                 let mutability = Mutability::from_mutable(inner.mut_token().is_some());\n                 TypeRef::Reference(Box::new(inner_ty), mutability)\n             }\n             ast::TypeRef::PlaceholderType(_inner) => TypeRef::Placeholder,\n             ast::TypeRef::FnPointerType(inner) => {\n                 let ret_ty = inner\n                     .ret_type()\n-                    .and_then(|rt| rt.type_ref())\n+                    .and_then(|rt| rt.ty())\n                     .map(|it| TypeRef::from_ast(ctx, it))\n                     .unwrap_or_else(|| TypeRef::Tuple(Vec::new()));\n                 let mut is_varargs = false;\n@@ -132,7 +132,7 @@ impl TypeRef {\n                 TypeRef::Fn(params, is_varargs)\n             }\n             // for types are close enough for our purposes to the inner type for now...\n-            ast::TypeRef::ForType(inner) => TypeRef::from_ast_opt(&ctx, inner.type_ref()),\n+            ast::TypeRef::ForType(inner) => TypeRef::from_ast_opt(&ctx, inner.ty()),\n             ast::TypeRef::ImplTraitType(inner) => {\n                 TypeRef::ImplTrait(type_bounds_from_ast(ctx, inner.type_bound_list()))\n             }"}, {"sha": "fd42aa4352e6280a23a64b2c5a6c85dc7cfe3d33", "filename": "crates/ra_ide/src/display.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f95f425ae4199e814e6956be1d9bb59a14758c07/crates%2Fra_ide%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f95f425ae4199e814e6956be1d9bb59a14758c07/crates%2Fra_ide%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdisplay.rs?ref=f95f425ae4199e814e6956be1d9bb59a14758c07", "patch": "@@ -44,7 +44,7 @@ pub(crate) fn function_declaration(node: &ast::Fn) -> String {\n         format_to!(buf, \"{}\", param_list);\n     }\n     if let Some(ret_type) = node.ret_type() {\n-        if ret_type.type_ref().is_some() {\n+        if ret_type.ty().is_some() {\n             format_to!(buf, \" {}\", ret_type);\n         }\n     }"}, {"sha": "91765140a45671450a30c31abc6a44f11a9d70d9", "filename": "crates/ra_ide/src/file_structure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f95f425ae4199e814e6956be1d9bb59a14758c07/crates%2Fra_ide%2Fsrc%2Ffile_structure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f95f425ae4199e814e6956be1d9bb59a14758c07/crates%2Fra_ide%2Fsrc%2Ffile_structure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Ffile_structure.rs?ref=f95f425ae4199e814e6956be1d9bb59a14758c07", "patch": "@@ -125,7 +125,7 @@ fn structure_node(node: &SyntaxNode) -> Option<StructureNode> {\n             ast::Variant(it) => decl(it),\n             ast::Trait(it) => decl(it),\n             ast::Module(it) => decl(it),\n-            ast::TypeAlias(it) => decl_with_type_ref(&it, it.type_ref()),\n+            ast::TypeAlias(it) => decl_with_type_ref(&it, it.ty()),\n             ast::RecordField(it) => decl_with_type_ref(&it, it.ty()),\n             ast::Const(it) => decl_with_type_ref(&it, it.ty()),\n             ast::Static(it) => decl_with_type_ref(&it, it.ty()),"}, {"sha": "4306efe13624cb942fd8ab656f839f0289ce81b3", "filename": "crates/ra_syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f95f425ae4199e814e6956be1d9bb59a14758c07/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f95f425ae4199e814e6956be1d9bb59a14758c07/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=f95f425ae4199e814e6956be1d9bb59a14758c07", "patch": "@@ -198,7 +198,7 @@ impl TypeAlias {\n     pub fn default_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![default]) }\n     pub fn type_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![type]) }\n     pub fn eq_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![=]) }\n-    pub fn type_ref(&self) -> Option<TypeRef> { support::child(&self.syntax) }\n+    pub fn ty(&self) -> Option<TypeRef> { support::child(&self.syntax) }\n     pub fn semicolon_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![;]) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n@@ -333,7 +333,7 @@ pub struct RetType {\n }\n impl RetType {\n     pub fn thin_arrow_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![->]) }\n-    pub fn type_ref(&self) -> Option<TypeRef> { support::child(&self.syntax) }\n+    pub fn ty(&self) -> Option<TypeRef> { support::child(&self.syntax) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct WhereClause {\n@@ -425,7 +425,7 @@ pub struct TupleField {\n impl ast::AttrsOwner for TupleField {}\n impl ast::VisibilityOwner for TupleField {}\n impl TupleField {\n-    pub fn type_ref(&self) -> Option<TypeRef> { support::child(&self.syntax) }\n+    pub fn ty(&self) -> Option<TypeRef> { support::child(&self.syntax) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct VariantList {\n@@ -525,7 +525,7 @@ pub struct ParenType {\n }\n impl ParenType {\n     pub fn l_paren_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['(']) }\n-    pub fn type_ref(&self) -> Option<TypeRef> { support::child(&self.syntax) }\n+    pub fn ty(&self) -> Option<TypeRef> { support::child(&self.syntax) }\n     pub fn r_paren_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![')']) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n@@ -559,15 +559,15 @@ impl PointerType {\n     pub fn star_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![*]) }\n     pub fn const_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![const]) }\n     pub fn mut_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![mut]) }\n-    pub fn type_ref(&self) -> Option<TypeRef> { support::child(&self.syntax) }\n+    pub fn ty(&self) -> Option<TypeRef> { support::child(&self.syntax) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct ArrayType {\n     pub(crate) syntax: SyntaxNode,\n }\n impl ArrayType {\n     pub fn l_brack_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['[']) }\n-    pub fn type_ref(&self) -> Option<TypeRef> { support::child(&self.syntax) }\n+    pub fn ty(&self) -> Option<TypeRef> { support::child(&self.syntax) }\n     pub fn semicolon_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![;]) }\n     pub fn expr(&self) -> Option<Expr> { support::child(&self.syntax) }\n     pub fn r_brack_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![']']) }\n@@ -578,7 +578,7 @@ pub struct SliceType {\n }\n impl SliceType {\n     pub fn l_brack_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['[']) }\n-    pub fn type_ref(&self) -> Option<TypeRef> { support::child(&self.syntax) }\n+    pub fn ty(&self) -> Option<TypeRef> { support::child(&self.syntax) }\n     pub fn r_brack_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![']']) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n@@ -591,7 +591,7 @@ impl ReferenceType {\n         support::token(&self.syntax, T![lifetime])\n     }\n     pub fn mut_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![mut]) }\n-    pub fn type_ref(&self) -> Option<TypeRef> { support::child(&self.syntax) }\n+    pub fn ty(&self) -> Option<TypeRef> { support::child(&self.syntax) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct PlaceholderType {\n@@ -618,7 +618,7 @@ pub struct ForType {\n impl ForType {\n     pub fn for_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![for]) }\n     pub fn generic_param_list(&self) -> Option<GenericParamList> { support::child(&self.syntax) }\n-    pub fn type_ref(&self) -> Option<TypeRef> { support::child(&self.syntax) }\n+    pub fn ty(&self) -> Option<TypeRef> { support::child(&self.syntax) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct ImplTraitType {\n@@ -882,7 +882,7 @@ impl ast::AttrsOwner for CastExpr {}\n impl CastExpr {\n     pub fn expr(&self) -> Option<Expr> { support::child(&self.syntax) }\n     pub fn as_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![as]) }\n-    pub fn type_ref(&self) -> Option<TypeRef> { support::child(&self.syntax) }\n+    pub fn ty(&self) -> Option<TypeRef> { support::child(&self.syntax) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct RefExpr {"}, {"sha": "375df301f36044e96294a676bea100554b4c695a", "filename": "xtask/src/codegen/rust.ungram", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f95f425ae4199e814e6956be1d9bb59a14758c07/xtask%2Fsrc%2Fcodegen%2Frust.ungram", "raw_url": "https://github.com/rust-lang/rust/raw/f95f425ae4199e814e6956be1d9bb59a14758c07/xtask%2Fsrc%2Fcodegen%2Frust.ungram", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Frust.ungram?ref=f95f425ae4199e814e6956be1d9bb59a14758c07", "patch": "@@ -72,11 +72,11 @@ Param =\n   )\n \n RetType =\n-  '->' TypeRef\n+  '->' ty:TypeRef\n \n TypeAlias =\n   Attr* Visibility? 'default'? 'type' Name GenericParamList? (':' TypeBoundList?)? WhereClause?\n-  '=' TypeRef ';'\n+  '=' ty:TypeRef ';'\n \n Struct =\n   Attr* Visibility? 'struct' Name GenericParamList? (\n@@ -94,7 +94,7 @@ TupleFieldList =\n   '(' fields:(TupleField (',' TupleField)* ','?)? ')'\n \n TupleField =\n-  Attr* Visibility? TypeRef\n+  Attr* Visibility? ty:TypeRef\n \n FieldList =\n   RecordFieldList\n@@ -184,7 +184,7 @@ Attr =\n   '#' '!'? '[' Path ('=' Literal | TokenTree)? ']'\n \n ParenType =\n-  '(' TypeRef ')'\n+  '(' ty:TypeRef ')'\n \n TupleType =\n   '(' fields:TypeRef* ')'\n@@ -196,16 +196,16 @@ PathType =\n   Path\n \n PointerType =\n-  '*' ('const' | 'mut') TypeRef\n+  '*' ('const' | 'mut') ty:TypeRef\n \n ArrayType =\n-  '[' TypeRef ';' Expr ']'\n+  '[' ty:TypeRef ';' Expr ']'\n \n SliceType =\n-  '[' TypeRef ']'\n+  '[' ty:TypeRef ']'\n \n ReferenceType =\n-  '&' 'lifetime'? 'mut'? TypeRef\n+  '&' 'lifetime'? 'mut'? ty:TypeRef\n \n PlaceholderType =\n    '_'\n@@ -214,7 +214,7 @@ FnPointerType =\n    Abi 'unsafe'? 'fn' ParamList RetType?\n \n ForType =\n-   'for' GenericParamList TypeRef\n+   'for' GenericParamList ty:TypeRef\n \n ImplTraitType =\n   'impl' TypeBoundList\n@@ -302,7 +302,7 @@ TryExpr =\n   Attr* Expr '?'\n \n CastExpr =\n-  Attr* Expr 'as' TypeRef\n+  Attr* Expr 'as' ty:TypeRef\n \n RefExpr =\n   Attr* '&' ('raw' | 'mut' | 'const') Expr"}]}