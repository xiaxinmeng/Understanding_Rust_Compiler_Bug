{"sha": "c8820d342f444f76795d926e1e745f44cca08dbf", "node_id": "C_kwDOAAsO6NoAKGM4ODIwZDM0MmY0NDRmNzY3OTVkOTI2ZTFlNzQ1ZjQ0Y2NhMDhkYmY", "commit": {"author": {"name": "Pawe\u0142 Palenica", "email": "pawelpalenica11@gmail.com", "date": "2021-10-21T06:35:14Z"}, "committer": {"name": "Pawe\u0142 Palenica", "email": "pawelpalenica11@gmail.com", "date": "2021-10-21T06:35:14Z"}, "message": "Run cargo fmt", "tree": {"sha": "bf795a44dc660fbbe00a3851a99ed99ae80ee53b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf795a44dc660fbbe00a3851a99ed99ae80ee53b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c8820d342f444f76795d926e1e745f44cca08dbf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c8820d342f444f76795d926e1e745f44cca08dbf", "html_url": "https://github.com/rust-lang/rust/commit/c8820d342f444f76795d926e1e745f44cca08dbf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c8820d342f444f76795d926e1e745f44cca08dbf/comments", "author": {"login": "qepasa", "id": 18561325, "node_id": "MDQ6VXNlcjE4NTYxMzI1", "avatar_url": "https://avatars.githubusercontent.com/u/18561325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qepasa", "html_url": "https://github.com/qepasa", "followers_url": "https://api.github.com/users/qepasa/followers", "following_url": "https://api.github.com/users/qepasa/following{/other_user}", "gists_url": "https://api.github.com/users/qepasa/gists{/gist_id}", "starred_url": "https://api.github.com/users/qepasa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qepasa/subscriptions", "organizations_url": "https://api.github.com/users/qepasa/orgs", "repos_url": "https://api.github.com/users/qepasa/repos", "events_url": "https://api.github.com/users/qepasa/events{/privacy}", "received_events_url": "https://api.github.com/users/qepasa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "qepasa", "id": 18561325, "node_id": "MDQ6VXNlcjE4NTYxMzI1", "avatar_url": "https://avatars.githubusercontent.com/u/18561325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qepasa", "html_url": "https://github.com/qepasa", "followers_url": "https://api.github.com/users/qepasa/followers", "following_url": "https://api.github.com/users/qepasa/following{/other_user}", "gists_url": "https://api.github.com/users/qepasa/gists{/gist_id}", "starred_url": "https://api.github.com/users/qepasa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qepasa/subscriptions", "organizations_url": "https://api.github.com/users/qepasa/orgs", "repos_url": "https://api.github.com/users/qepasa/repos", "events_url": "https://api.github.com/users/qepasa/events{/privacy}", "received_events_url": "https://api.github.com/users/qepasa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb00b09d22d4cd892ce7f4a605a2c8fae5d0095c", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb00b09d22d4cd892ce7f4a605a2c8fae5d0095c", "html_url": "https://github.com/rust-lang/rust/commit/bb00b09d22d4cd892ce7f4a605a2c8fae5d0095c"}], "stats": {"total": 37, "additions": 23, "deletions": 14}, "files": [{"sha": "773e912e25be567b2d3d45f8c404261e46e5aaad", "filename": "crates/ide_assists/src/handlers/qualify_method_call.rs", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c8820d342f444f76795d926e1e745f44cca08dbf/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fqualify_method_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8820d342f444f76795d926e1e745f44cca08dbf/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fqualify_method_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fqualify_method_call.rs?ref=c8820d342f444f76795d926e1e745f44cca08dbf", "patch": "@@ -1,8 +1,14 @@\n use hir::{ItemInNs, ModuleDef};\n-use ide_db::{assists::{AssistId, AssistKind}, helpers::import_assets::item_for_path_search};\n-use syntax::{AstNode, ast};\n+use ide_db::{\n+    assists::{AssistId, AssistKind},\n+    helpers::import_assets::item_for_path_search,\n+};\n+use syntax::{ast, AstNode};\n \n-use crate::{assist_context::{AssistContext, Assists}, handlers::qualify_path::QualifyCandidate};\n+use crate::{\n+    assist_context::{AssistContext, Assists},\n+    handlers::qualify_path::QualifyCandidate,\n+};\n \n // Assist: qualify_method_call\n //\n@@ -11,7 +17,7 @@ use crate::{assist_context::{AssistContext, Assists}, handlers::qualify_path::Qu\n // ```\n // struct Foo;\n // impl Foo {\n-//     fn foo(&self) {}    \n+//     fn foo(&self) {}\n // }\n // fn main() {\n //     let foo = Foo;\n@@ -22,7 +28,7 @@ use crate::{assist_context::{AssistContext, Assists}, handlers::qualify_path::Qu\n // ```\n // struct Foo;\n // impl Foo {\n-//     fn foo(&self) {}    \n+//     fn foo(&self) {}\n // }\n // fn main() {\n //     let foo = Foo;\n@@ -32,18 +38,19 @@ use crate::{assist_context::{AssistContext, Assists}, handlers::qualify_path::Qu\n pub(crate) fn qualify_method_call(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     let call: ast::MethodCallExpr = ctx.find_node_at_offset()?;\n     let fn_name = &call.name_ref()?;\n-    \n+\n     // let callExpr = path_expr.syntax();\n     let range = call.syntax().text_range();\n     let resolved_call = ctx.sema.resolve_method_call(&call)?;\n \n     let current_module = ctx.sema.scope(&call.syntax()).module()?;\n     let target_module_def = ModuleDef::from(resolved_call);\n     let item_in_ns = ItemInNs::from(target_module_def);\n-    let receiver_path = current_module.find_use_path(ctx.sema.db, item_for_path_search(ctx.sema.db, item_in_ns)?)?;\n+    let receiver_path = current_module\n+        .find_use_path(ctx.sema.db, item_for_path_search(ctx.sema.db, item_in_ns)?)?;\n \n     let qualify_candidate = QualifyCandidate::ImplMethod(ctx.sema.db, call, resolved_call);\n-    \n+\n     acc.add(\n         AssistId(\"qualify_method_call\", AssistKind::RefactorInline),\n         format!(\"Qualify call `{}`\", fn_name),\n@@ -52,17 +59,17 @@ pub(crate) fn qualify_method_call(acc: &mut Assists, ctx: &AssistContext) -> Opt\n             qualify_candidate.qualify(\n                 |replace_with: String| builder.replace(range, replace_with),\n                 &receiver_path,\n-                item_in_ns\n+                item_in_ns,\n             )\n-        }\n+        },\n     );\n     Some(())\n }\n \n #[cfg(test)]\n mod tests {\n-    use crate::tests::{check_assist};\n     use super::*;\n+    use crate::tests::check_assist;\n \n     #[test]\n     fn struct_method() {\n@@ -478,4 +485,3 @@ fn main() {\n         );\n     }\n }\n-"}, {"sha": "a0dbf9f7b3356593cf4938832569f4a0c09d00ed", "filename": "crates/ide_assists/src/handlers/qualify_path.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c8820d342f444f76795d926e1e745f44cca08dbf/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fqualify_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8820d342f444f76795d926e1e745f44cca08dbf/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fqualify_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fqualify_path.rs?ref=c8820d342f444f76795d926e1e745f44cca08dbf", "patch": "@@ -1,7 +1,10 @@\n use std::iter;\n \n use hir::AsAssocItem;\n-use ide_db::helpers::{import_assets::{ImportCandidate, LocatedImport}, mod_path_to_ast};\n+use ide_db::helpers::{\n+    import_assets::{ImportCandidate, LocatedImport},\n+    mod_path_to_ast,\n+};\n use ide_db::RootDatabase;\n use syntax::{\n     ast,\n@@ -136,7 +139,7 @@ impl QualifyCandidate<'_> {\n     ) -> Option<()> {\n         let receiver = mcall_expr.receiver()?;\n         let method_name = mcall_expr.name_ref()?;\n-        let generics = \n+        let generics =\n             mcall_expr.generic_arg_list().as_ref().map_or_else(String::new, ToString::to_string);\n         let arg_list = mcall_expr.arg_list().map(|arg_list| arg_list.args());\n "}]}