{"sha": "313854c728c45ce236f23ff7a8834690e06d8306", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxMzg1NGM3MjhjNDVjZTIzNmYyM2ZmN2E4ODM0NjkwZTA2ZDgzMDY=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-04-19T13:15:19Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-04-19T13:15:19Z"}, "message": "Add lifetime matcher", "tree": {"sha": "8009d65f47b8a63d03ec20e64d54e76c6483ddcc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8009d65f47b8a63d03ec20e64d54e76c6483ddcc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/313854c728c45ce236f23ff7a8834690e06d8306", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/313854c728c45ce236f23ff7a8834690e06d8306", "html_url": "https://github.com/rust-lang/rust/commit/313854c728c45ce236f23ff7a8834690e06d8306", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/313854c728c45ce236f23ff7a8834690e06d8306/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59b6cc780b4be6b3706099410ac56f348df46b71", "url": "https://api.github.com/repos/rust-lang/rust/commits/59b6cc780b4be6b3706099410ac56f348df46b71", "html_url": "https://github.com/rust-lang/rust/commit/59b6cc780b4be6b3706099410ac56f348df46b71"}], "stats": {"total": 27, "additions": 25, "deletions": 2}, "files": [{"sha": "a143eaa36da87e9ab4e6179d38a3cc4c75d39966", "filename": "crates/ra_mbe/src/lib.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/313854c728c45ce236f23ff7a8834690e06d8306/crates%2Fra_mbe%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/313854c728c45ce236f23ff7a8834690e06d8306/crates%2Fra_mbe%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Flib.rs?ref=313854c728c45ce236f23ff7a8834690e06d8306", "patch": "@@ -209,7 +209,6 @@ impl_froms!(TokenTree: Leaf, Subtree);\n \n     pub(crate) fn assert_expansion(rules: &MacroRules, invocation: &str, expansion: &str) {\n         let expanded = expand(rules, invocation);\n-        assert_eq!(expanded.to_string(), expansion);\n \n         let tree = token_tree_to_macro_items(&expanded);\n \n@@ -786,4 +785,16 @@ MACRO_ITEMS@[0; 40)\n         );\n         assert_expansion(&rules, r#\"foo! { fn foo() {} }\"#, r#\"fn foo () {}\"#);\n     }\n+\n+    #[test]\n+    fn test_lifetime() {\n+        let rules = create_rules(\n+            r#\"\n+        macro_rules! foo {\n+              ($ lt:lifetime) => { struct Ref<$ lt>{ s: &$ lt str } }\n+        }\n+\"#,\n+        );\n+        assert_expansion(&rules, r#\"foo!{'a}\"#, r#\"struct Ref < 'a > {s : & 'a str}\"#);\n+    }\n }"}, {"sha": "cacc3da1952d98693ade2d2f123220b43f9bfa2b", "filename": "crates/ra_mbe/src/mbe_expander.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/313854c728c45ce236f23ff7a8834690e06d8306/crates%2Fra_mbe%2Fsrc%2Fmbe_expander.rs", "raw_url": "https://github.com/rust-lang/rust/raw/313854c728c45ce236f23ff7a8834690e06d8306/crates%2Fra_mbe%2Fsrc%2Fmbe_expander.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fmbe_expander.rs?ref=313854c728c45ce236f23ff7a8834690e06d8306", "patch": "@@ -180,6 +180,11 @@ fn match_lhs(pattern: &crate::Subtree, input: &mut TtCursor) -> Result<Bindings,\n                                 input.eat_item().ok_or(ExpandError::UnexpectedToken)?.clone();\n                             res.inner.insert(text.clone(), Binding::Simple(item.into()));\n                         }\n+                        \"lifetime\" => {\n+                            let lifetime =\n+                                input.eat_lifetime().ok_or(ExpandError::UnexpectedToken)?.clone();\n+                            res.inner.insert(text.clone(), Binding::Simple(lifetime.into()));\n+                        }\n                         _ => return Err(ExpandError::UnexpectedToken),\n                     }\n                 }"}, {"sha": "38a4810299a99f018ff4037c06455361f89fc7e5", "filename": "crates/ra_mbe/src/syntax_bridge.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/313854c728c45ce236f23ff7a8834690e06d8306/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/313854c728c45ce236f23ff7a8834690e06d8306/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs?ref=313854c728c45ce236f23ff7a8834690e06d8306", "patch": "@@ -157,7 +157,10 @@ fn convert_tt(\n                         );\n                     }\n                 } else {\n-                    let child = if token.kind().is_keyword() || token.kind() == IDENT {\n+                    let child: tt::TokenTree = if token.kind().is_keyword()\n+                        || token.kind() == IDENT\n+                        || token.kind() == LIFETIME\n+                    {\n                         let relative_range = token.range() - global_offset;\n                         let id = token_map.alloc(relative_range);\n                         let text = token.text().clone();"}, {"sha": "9c49648faa6bc514bf8d1206d8df1a57422e9654", "filename": "crates/ra_mbe/src/tt_cursor.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/313854c728c45ce236f23ff7a8834690e06d8306/crates%2Fra_mbe%2Fsrc%2Ftt_cursor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/313854c728c45ce236f23ff7a8834690e06d8306/crates%2Fra_mbe%2Fsrc%2Ftt_cursor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Ftt_cursor.rs?ref=313854c728c45ce236f23ff7a8834690e06d8306", "patch": "@@ -119,6 +119,10 @@ impl<'a> TtCursor<'a> {\n         parser.parse_item()\n     }\n \n+    pub(crate) fn eat_lifetime(&mut self) -> Option<tt::TokenTree> {\n+        self.eat_ident().cloned().map(|ident| tt::Leaf::from(ident).into())\n+    }\n+\n     pub(crate) fn expect_char(&mut self, char: char) -> Result<(), ParseError> {\n         if self.at_char(char) {\n             self.bump();"}]}