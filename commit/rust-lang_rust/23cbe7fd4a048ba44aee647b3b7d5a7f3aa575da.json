{"sha": "23cbe7fd4a048ba44aee647b3b7d5a7f3aa575da", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzY2JlN2ZkNGEwNDhiYTQ0YWVlNjQ3YjNiN2Q1YTdmM2FhNTc1ZGE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-04T13:34:54Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-04T13:34:54Z"}, "message": "Pratt", "tree": {"sha": "9073fdb27f79fc992c89dbaefc9c7ed16341d303", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9073fdb27f79fc992c89dbaefc9c7ed16341d303"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23cbe7fd4a048ba44aee647b3b7d5a7f3aa575da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23cbe7fd4a048ba44aee647b3b7d5a7f3aa575da", "html_url": "https://github.com/rust-lang/rust/commit/23cbe7fd4a048ba44aee647b3b7d5a7f3aa575da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23cbe7fd4a048ba44aee647b3b7d5a7f3aa575da/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e4ad3d27cd662b790395b61f3cda560fd4e2146", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e4ad3d27cd662b790395b61f3cda560fd4e2146", "html_url": "https://github.com/rust-lang/rust/commit/4e4ad3d27cd662b790395b61f3cda560fd4e2146"}], "stats": {"total": 219, "additions": 184, "deletions": 35}, "files": [{"sha": "8ce5ebc49c701fe010fc75d8a1114c2d04a33ba9", "filename": "src/grammar.ron", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/23cbe7fd4a048ba44aee647b3b7d5a7f3aa575da/src%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/23cbe7fd4a048ba44aee647b3b7d5a7f3aa575da/src%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar.ron?ref=23cbe7fd4a048ba44aee647b3b7d5a7f3aa575da", "patch": "@@ -130,23 +130,32 @@ Grammar(\n         \"STRUCT_PAT\",\n         \"TUPLE_PAT\",\n \n+        // atoms\n         \"TUPLE_EXPR\",\n         \"PATH_EXPR\",\n-        \"CALL_EXPR\",\n-        \"METHOD_CALL_EXPR\",\n-        \"FIELD_EXPR\",\n-        \"REF_EXPR\",\n-        \"DEREF_EXPR\",\n-        \"NOT_EXPR\",\n         \"LAMBDA_EXPR\",\n-        \"STRUCT_LIT\",\n-        \"STRUCT_LIT_FIELD\",\n         \"IF_EXPR\",\n         \"BLOCK_EXPR\",\n         \"RETURN_EXPR\",\n         \"MATCH_EXPR\",\n         \"MATCH_ARM\",\n         \"MATCH_GUARD\",\n+        \"STRUCT_LIT\",\n+        \"STRUCT_LIT_FIELD\",\n+\n+        // postfix\n+        \"CALL_EXPR\",\n+        \"METHOD_CALL_EXPR\",\n+        \"FIELD_EXPR\",\n+        \"TRY_EXPR\",\n+\n+        // unary\n+        \"REF_EXPR\",\n+        \"DEREF_EXPR\",\n+        \"NOT_EXPR\",\n+\n+        \"BIN_EXPR\",\n+\n \n         \"EXTERN_BLOCK_EXPR\",\n         \"ENUM_VARIANT\","}, {"sha": "ecca2a3f9d814bd173752d11c44e6d433c101d76", "filename": "src/grammar/expressions.rs", "status": "modified", "additions": 68, "deletions": 11, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/23cbe7fd4a048ba44aee647b3b7d5a7f3aa575da/src%2Fgrammar%2Fexpressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23cbe7fd4a048ba44aee647b3b7d5a7f3aa575da/src%2Fgrammar%2Fexpressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar%2Fexpressions.rs?ref=23cbe7fd4a048ba44aee647b3b7d5a7f3aa575da", "patch": "@@ -29,11 +29,54 @@ pub(super) fn literal(p: &mut Parser) -> Option<CompletedMarker> {\n const EXPR_FIRST: TokenSet = PREFIX_EXPR_FIRST;\n \n pub(super) fn expr(p: &mut Parser) {\n-    let mut lhs = match prefix_expr(p) {\n+    expr_bp(p, 1)\n+}\n+\n+fn bp_of(op: SyntaxKind) -> u8 {\n+    match op {\n+        EQEQ | NEQ => 1,\n+        MINUS | PLUS => 2,\n+        STAR | SLASH => 3,\n+        _ => 0\n+    }\n+}\n+\n+\n+// test expr_binding_power\n+// fn foo() {\n+//     1 + 2 * 3 == 1 * 2 + 3\n+// }\n+\n+// Parses expression with binding power of at least bp.\n+fn expr_bp(p: &mut Parser, bp: u8) {\n+    let mut lhs = match unary_expr(p) {\n         Some(lhs) => lhs,\n         None => return,\n     };\n \n+    loop {\n+        let op_bp = bp_of(p.current());\n+        if op_bp < bp {\n+            break;\n+        }\n+        lhs = bin_expr(p, lhs, op_bp);\n+    }\n+}\n+\n+fn unary_expr(p: &mut Parser) -> Option<CompletedMarker> {\n+    let done = match p.current() {\n+        AMPERSAND => ref_expr(p),\n+        STAR => deref_expr(p),\n+        EXCL => not_expr(p),\n+        _ => {\n+            let lhs = atom_expr(p)?;\n+            postfix_expr(p, lhs)\n+        }\n+    };\n+    Some(done)\n+}\n+\n+fn postfix_expr(p: &mut Parser, mut lhs: CompletedMarker) -> CompletedMarker {\n     loop {\n         lhs = match p.current() {\n             L_PAREN => call_expr(p, lhs),\n@@ -43,9 +86,11 @@ pub(super) fn expr(p: &mut Parser) {\n                 field_expr(p, lhs)\n             },\n             DOT if p.nth(1) == INT_NUMBER => field_expr(p, lhs),\n+            QUESTION => try_expr(p, lhs),\n             _ => break,\n         }\n     }\n+    lhs\n }\n \n // test block\n@@ -89,16 +134,6 @@ const PREFIX_EXPR_FIRST: TokenSet =\n         ATOM_EXPR_FIRST,\n     ];\n \n-fn prefix_expr(p: &mut Parser) -> Option<CompletedMarker> {\n-    let done = match p.current() {\n-        AMPERSAND => ref_expr(p),\n-        STAR => deref_expr(p),\n-        EXCL => not_expr(p),\n-        _ => return atom_expr(p),\n-    };\n-    Some(done)\n-}\n-\n // test ref_expr\n // fn foo() {\n //     let _ = &1;\n@@ -369,6 +404,17 @@ fn field_expr(p: &mut Parser, lhs: CompletedMarker) -> CompletedMarker {\n     m.complete(p, FIELD_EXPR)\n }\n \n+// test try_expr\n+// fn foo() {\n+//     x?;\n+// }\n+fn try_expr(p: &mut Parser, lhs: CompletedMarker) -> CompletedMarker {\n+    assert!(p.at(QUESTION));\n+    let m = lhs.precede(p);\n+    p.bump();\n+    m.complete(p, TRY_EXPR)\n+}\n+\n fn arg_list(p: &mut Parser) {\n     assert!(p.at(L_PAREN));\n     let m = p.start();\n@@ -432,3 +478,14 @@ fn struct_lit(p: &mut Parser) {\n     }\n     p.expect(R_CURLY);\n }\n+\n+fn bin_expr(p: &mut Parser, lhs: CompletedMarker, bp: u8) -> CompletedMarker {\n+    assert!(match p.current() {\n+        MINUS | PLUS | STAR | SLASH | EQEQ | NEQ => true,\n+        _ => false,\n+    });\n+    let m = lhs.precede(p);\n+    p.bump();\n+    expr_bp(p, bp);\n+    m.complete(p, BIN_EXPR)\n+}"}, {"sha": "7bdd0267c92cc3a9b745847b911f8d005b6f7af8", "filename": "src/syntax_kinds/generated.rs", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/23cbe7fd4a048ba44aee647b3b7d5a7f3aa575da/src%2Fsyntax_kinds%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23cbe7fd4a048ba44aee647b3b7d5a7f3aa575da/src%2Fsyntax_kinds%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsyntax_kinds%2Fgenerated.rs?ref=23cbe7fd4a048ba44aee647b3b7d5a7f3aa575da", "patch": "@@ -123,21 +123,23 @@ pub enum SyntaxKind {\n     TUPLE_PAT,\n     TUPLE_EXPR,\n     PATH_EXPR,\n-    CALL_EXPR,\n-    METHOD_CALL_EXPR,\n-    FIELD_EXPR,\n-    REF_EXPR,\n-    DEREF_EXPR,\n-    NOT_EXPR,\n     LAMBDA_EXPR,\n-    STRUCT_LIT,\n-    STRUCT_LIT_FIELD,\n     IF_EXPR,\n     BLOCK_EXPR,\n     RETURN_EXPR,\n     MATCH_EXPR,\n     MATCH_ARM,\n     MATCH_GUARD,\n+    STRUCT_LIT,\n+    STRUCT_LIT_FIELD,\n+    CALL_EXPR,\n+    METHOD_CALL_EXPR,\n+    FIELD_EXPR,\n+    TRY_EXPR,\n+    REF_EXPR,\n+    DEREF_EXPR,\n+    NOT_EXPR,\n+    BIN_EXPR,\n     EXTERN_BLOCK_EXPR,\n     ENUM_VARIANT,\n     NAMED_FIELD,\n@@ -339,21 +341,23 @@ impl SyntaxKind {\n             TUPLE_PAT => &SyntaxInfo { name: \"TUPLE_PAT\" },\n             TUPLE_EXPR => &SyntaxInfo { name: \"TUPLE_EXPR\" },\n             PATH_EXPR => &SyntaxInfo { name: \"PATH_EXPR\" },\n-            CALL_EXPR => &SyntaxInfo { name: \"CALL_EXPR\" },\n-            METHOD_CALL_EXPR => &SyntaxInfo { name: \"METHOD_CALL_EXPR\" },\n-            FIELD_EXPR => &SyntaxInfo { name: \"FIELD_EXPR\" },\n-            REF_EXPR => &SyntaxInfo { name: \"REF_EXPR\" },\n-            DEREF_EXPR => &SyntaxInfo { name: \"DEREF_EXPR\" },\n-            NOT_EXPR => &SyntaxInfo { name: \"NOT_EXPR\" },\n             LAMBDA_EXPR => &SyntaxInfo { name: \"LAMBDA_EXPR\" },\n-            STRUCT_LIT => &SyntaxInfo { name: \"STRUCT_LIT\" },\n-            STRUCT_LIT_FIELD => &SyntaxInfo { name: \"STRUCT_LIT_FIELD\" },\n             IF_EXPR => &SyntaxInfo { name: \"IF_EXPR\" },\n             BLOCK_EXPR => &SyntaxInfo { name: \"BLOCK_EXPR\" },\n             RETURN_EXPR => &SyntaxInfo { name: \"RETURN_EXPR\" },\n             MATCH_EXPR => &SyntaxInfo { name: \"MATCH_EXPR\" },\n             MATCH_ARM => &SyntaxInfo { name: \"MATCH_ARM\" },\n             MATCH_GUARD => &SyntaxInfo { name: \"MATCH_GUARD\" },\n+            STRUCT_LIT => &SyntaxInfo { name: \"STRUCT_LIT\" },\n+            STRUCT_LIT_FIELD => &SyntaxInfo { name: \"STRUCT_LIT_FIELD\" },\n+            CALL_EXPR => &SyntaxInfo { name: \"CALL_EXPR\" },\n+            METHOD_CALL_EXPR => &SyntaxInfo { name: \"METHOD_CALL_EXPR\" },\n+            FIELD_EXPR => &SyntaxInfo { name: \"FIELD_EXPR\" },\n+            TRY_EXPR => &SyntaxInfo { name: \"TRY_EXPR\" },\n+            REF_EXPR => &SyntaxInfo { name: \"REF_EXPR\" },\n+            DEREF_EXPR => &SyntaxInfo { name: \"DEREF_EXPR\" },\n+            NOT_EXPR => &SyntaxInfo { name: \"NOT_EXPR\" },\n+            BIN_EXPR => &SyntaxInfo { name: \"BIN_EXPR\" },\n             EXTERN_BLOCK_EXPR => &SyntaxInfo { name: \"EXTERN_BLOCK_EXPR\" },\n             ENUM_VARIANT => &SyntaxInfo { name: \"ENUM_VARIANT\" },\n             NAMED_FIELD => &SyntaxInfo { name: \"NAMED_FIELD\" },"}, {"sha": "db855fd026f30898cc098384d88f6e2bcf713292", "filename": "tests/data/parser/inline/0074_expr_binding_power.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/23cbe7fd4a048ba44aee647b3b7d5a7f3aa575da/tests%2Fdata%2Fparser%2Finline%2F0074_expr_binding_power.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23cbe7fd4a048ba44aee647b3b7d5a7f3aa575da/tests%2Fdata%2Fparser%2Finline%2F0074_expr_binding_power.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0074_expr_binding_power.rs?ref=23cbe7fd4a048ba44aee647b3b7d5a7f3aa575da", "patch": "@@ -0,0 +1,3 @@\n+fn foo() {\n+    1 + 2 * 3 == 1 * 2 + 3\n+}"}, {"sha": "05aad25e991044ad8c000efbb2d08abe18a20e82", "filename": "tests/data/parser/inline/0074_expr_binding_power.txt", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/23cbe7fd4a048ba44aee647b3b7d5a7f3aa575da/tests%2Fdata%2Fparser%2Finline%2F0074_expr_binding_power.txt", "raw_url": "https://github.com/rust-lang/rust/raw/23cbe7fd4a048ba44aee647b3b7d5a7f3aa575da/tests%2Fdata%2Fparser%2Finline%2F0074_expr_binding_power.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0074_expr_binding_power.txt?ref=23cbe7fd4a048ba44aee647b3b7d5a7f3aa575da", "patch": "@@ -0,0 +1,48 @@\n+FILE@[0; 40)\n+  FN_ITEM@[0; 40)\n+    FN_KW@[0; 2)\n+    NAME@[2; 6)\n+      WHITESPACE@[2; 3)\n+      IDENT@[3; 6) \"foo\"\n+    PARAM_LIST@[6; 9)\n+      L_PAREN@[6; 7)\n+      R_PAREN@[7; 8)\n+      WHITESPACE@[8; 9)\n+    BLOCK_EXPR@[9; 40)\n+      L_CURLY@[9; 10)\n+      BIN_EXPR@[10; 38)\n+        BIN_EXPR@[10; 25)\n+          LITERAL@[10; 17)\n+            WHITESPACE@[10; 15)\n+            INT_NUMBER@[15; 16) \"1\"\n+            WHITESPACE@[16; 17)\n+          PLUS@[17; 18)\n+          BIN_EXPR@[18; 25)\n+            LITERAL@[18; 21)\n+              WHITESPACE@[18; 19)\n+              INT_NUMBER@[19; 20) \"2\"\n+              WHITESPACE@[20; 21)\n+            STAR@[21; 22)\n+            LITERAL@[22; 25)\n+              WHITESPACE@[22; 23)\n+              INT_NUMBER@[23; 24) \"3\"\n+              WHITESPACE@[24; 25)\n+        EQEQ@[25; 27)\n+        BIN_EXPR@[27; 38)\n+          BIN_EXPR@[27; 34)\n+            LITERAL@[27; 30)\n+              WHITESPACE@[27; 28)\n+              INT_NUMBER@[28; 29) \"1\"\n+              WHITESPACE@[29; 30)\n+            STAR@[30; 31)\n+            LITERAL@[31; 34)\n+              WHITESPACE@[31; 32)\n+              INT_NUMBER@[32; 33) \"2\"\n+              WHITESPACE@[33; 34)\n+          PLUS@[34; 35)\n+          LITERAL@[35; 38)\n+            WHITESPACE@[35; 36)\n+            INT_NUMBER@[36; 37) \"3\"\n+            WHITESPACE@[37; 38)\n+      R_CURLY@[38; 39)\n+      WHITESPACE@[39; 40)"}, {"sha": "8b74f7bc814494096174c16c50c3a52a06e033fa", "filename": "tests/data/parser/inline/0075_try_expr.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/23cbe7fd4a048ba44aee647b3b7d5a7f3aa575da/tests%2Fdata%2Fparser%2Finline%2F0075_try_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23cbe7fd4a048ba44aee647b3b7d5a7f3aa575da/tests%2Fdata%2Fparser%2Finline%2F0075_try_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0075_try_expr.rs?ref=23cbe7fd4a048ba44aee647b3b7d5a7f3aa575da", "patch": "@@ -0,0 +1,3 @@\n+fn foo() {\n+    x?;\n+}"}, {"sha": "49edce95615c91ef882c0b971e4cff7b0fb7bc66", "filename": "tests/data/parser/inline/0075_try_expr.txt", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/23cbe7fd4a048ba44aee647b3b7d5a7f3aa575da/tests%2Fdata%2Fparser%2Finline%2F0075_try_expr.txt", "raw_url": "https://github.com/rust-lang/rust/raw/23cbe7fd4a048ba44aee647b3b7d5a7f3aa575da/tests%2Fdata%2Fparser%2Finline%2F0075_try_expr.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0075_try_expr.txt?ref=23cbe7fd4a048ba44aee647b3b7d5a7f3aa575da", "patch": "@@ -0,0 +1,25 @@\n+FILE@[0; 21)\n+  FN_ITEM@[0; 21)\n+    FN_KW@[0; 2)\n+    NAME@[2; 6)\n+      WHITESPACE@[2; 3)\n+      IDENT@[3; 6) \"foo\"\n+    PARAM_LIST@[6; 9)\n+      L_PAREN@[6; 7)\n+      R_PAREN@[7; 8)\n+      WHITESPACE@[8; 9)\n+    BLOCK_EXPR@[9; 21)\n+      L_CURLY@[9; 10)\n+      EXPR_STMT@[10; 19)\n+        TRY_EXPR@[10; 17)\n+          PATH_EXPR@[10; 16)\n+            PATH@[10; 16)\n+              PATH_SEGMENT@[10; 16)\n+                NAME_REF@[10; 16)\n+                  WHITESPACE@[10; 15)\n+                  IDENT@[15; 16) \"x\"\n+          QUESTION@[16; 17)\n+        SEMI@[17; 18)\n+        WHITESPACE@[18; 19)\n+      R_CURLY@[19; 20)\n+      WHITESPACE@[20; 21)"}]}