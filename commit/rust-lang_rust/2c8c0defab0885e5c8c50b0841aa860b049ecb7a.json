{"sha": "2c8c0defab0885e5c8c50b0841aa860b049ecb7a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjOGMwZGVmYWIwODg1ZTVjOGM1MGIwODQxYWE4NjBiMDQ5ZWNiN2E=", "commit": {"author": {"name": "Jonathan Turner", "email": "jonathandturner@users.noreply.github.com", "date": "2016-10-06T15:35:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-10-06T15:35:43Z"}, "message": "Rollup merge of #36974 - MathieuBordere:mb/36812_ICHFunctionInterfaces, r=michaelwoerister\n\nMb/36812 ich function interfaces\n\nr? @michaelwoerister\n\nThis PR contains fixes for #36812 and #36914", "tree": {"sha": "1d6329448f641802511d0e6d8b0be7ada41c2333", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d6329448f641802511d0e6d8b0be7ada41c2333"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c8c0defab0885e5c8c50b0841aa860b049ecb7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c8c0defab0885e5c8c50b0841aa860b049ecb7a", "html_url": "https://github.com/rust-lang/rust/commit/2c8c0defab0885e5c8c50b0841aa860b049ecb7a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c8c0defab0885e5c8c50b0841aa860b049ecb7a/comments", "author": {"login": "jonathandturner", "id": 111457284, "node_id": "O_kgDOBqS0BA", "avatar_url": "https://avatars.githubusercontent.com/u/111457284?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonathandturner", "html_url": "https://github.com/jonathandturner", "followers_url": "https://api.github.com/users/jonathandturner/followers", "following_url": "https://api.github.com/users/jonathandturner/following{/other_user}", "gists_url": "https://api.github.com/users/jonathandturner/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonathandturner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonathandturner/subscriptions", "organizations_url": "https://api.github.com/users/jonathandturner/orgs", "repos_url": "https://api.github.com/users/jonathandturner/repos", "events_url": "https://api.github.com/users/jonathandturner/events{/privacy}", "received_events_url": "https://api.github.com/users/jonathandturner/received_events", "type": "Organization", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ceef4e004a521821d227cf6cfd4726b44e4ac8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ceef4e004a521821d227cf6cfd4726b44e4ac8d", "html_url": "https://github.com/rust-lang/rust/commit/9ceef4e004a521821d227cf6cfd4726b44e4ac8d"}, {"sha": "0e40dbb2f7f4e03bcb59ef9cb057b455cc672926", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e40dbb2f7f4e03bcb59ef9cb057b455cc672926", "html_url": "https://github.com/rust-lang/rust/commit/0e40dbb2f7f4e03bcb59ef9cb057b455cc672926"}], "stats": {"total": 562, "additions": 546, "deletions": 16}, "files": [{"sha": "3df68ac583d46c8792c42d1a32a0ecdf6dae85a4", "filename": "src/librustc_incremental/calculate_svh/svh_visitor.rs", "status": "modified", "additions": 146, "deletions": 16, "changes": 162, "blob_url": "https://github.com/rust-lang/rust/blob/2c8c0defab0885e5c8c50b0841aa860b049ecb7a/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c8c0defab0885e5c8c50b0841aa860b049ecb7a/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs?ref=2c8c0defab0885e5c8c50b0841aa860b049ecb7a", "patch": "@@ -15,6 +15,11 @@\n \n use self::SawExprComponent::*;\n use self::SawAbiComponent::*;\n+use self::SawItemComponent::*;\n+use self::SawPatComponent::*;\n+use self::SawTyComponent::*;\n+use self::SawTraitOrImplItemComponent::*;\n+use syntax::abi::Abi;\n use syntax::ast::{self, Name, NodeId};\n use syntax::parse::token;\n use syntax_pos::{Span, NO_EXPANSION, COMMAND_LINE_EXPN, BytePos};\n@@ -155,19 +160,19 @@ enum SawAbiComponent<'a> {\n \n     SawMod,\n     SawForeignItem,\n-    SawItem,\n-    SawTy,\n+    SawItem(SawItemComponent),\n+    SawTy(SawTyComponent),\n     SawGenerics,\n-    SawTraitItem,\n-    SawImplItem,\n+    SawTraitItem(SawTraitOrImplItemComponent),\n+    SawImplItem(SawTraitOrImplItemComponent),\n     SawStructField,\n     SawVariant,\n     SawPath(bool),\n     SawPathSegment,\n     SawPathParameters,\n     SawPathListItem,\n     SawBlock,\n-    SawPat,\n+    SawPat(SawPatComponent),\n     SawLocal,\n     SawArm,\n     SawExpr(SawExprComponent<'a>),\n@@ -198,6 +203,9 @@ enum SawAbiComponent<'a> {\n /// because the SVH is just a developer convenience; there is no\n /// guarantee of collision-freedom, hash collisions are just\n /// (hopefully) unlikely.)\n+///\n+/// The xxxComponent enums and saw_xxx functions for Item, Pat,\n+/// Ty, TraitItem and ImplItem follow the same methodology.\n #[derive(Hash)]\n enum SawExprComponent<'a> {\n \n@@ -267,6 +275,134 @@ fn saw_expr<'a>(node: &'a Expr_) -> SawExprComponent<'a> {\n     }\n }\n \n+#[derive(Hash)]\n+enum SawItemComponent {\n+    SawItemExternCrate,\n+    SawItemUse,\n+    SawItemStatic(Mutability),\n+    SawItemConst,\n+    SawItemFn(Unsafety, Constness, Abi),\n+    SawItemMod,\n+    SawItemForeignMod,\n+    SawItemTy,\n+    SawItemEnum,\n+    SawItemStruct,\n+    SawItemUnion,\n+    SawItemTrait(Unsafety),\n+    SawItemDefaultImpl(Unsafety),\n+    SawItemImpl(Unsafety, ImplPolarity)\n+}\n+\n+fn saw_item(node: &Item_) -> SawItemComponent {\n+    match *node {\n+        ItemExternCrate(..) => SawItemExternCrate,\n+        ItemUse(..) => SawItemUse,\n+        ItemStatic(_, mutability, _) => SawItemStatic(mutability),\n+        ItemConst(..) =>SawItemConst,\n+        ItemFn(_, unsafety, constness, abi, _, _) => SawItemFn(unsafety, constness, abi),\n+        ItemMod(..) => SawItemMod,\n+        ItemForeignMod(..) => SawItemForeignMod,\n+        ItemTy(..) => SawItemTy,\n+        ItemEnum(..) => SawItemEnum,\n+        ItemStruct(..) => SawItemStruct,\n+        ItemUnion(..) => SawItemUnion,\n+        ItemTrait(unsafety, ..) => SawItemTrait(unsafety),\n+        ItemDefaultImpl(unsafety, _) => SawItemDefaultImpl(unsafety),\n+        ItemImpl(unsafety, implpolarity, ..) => SawItemImpl(unsafety, implpolarity)\n+    }\n+}\n+\n+#[derive(Hash)]\n+enum SawPatComponent {\n+    SawPatWild,\n+    SawPatBinding(BindingMode),\n+    SawPatStruct,\n+    SawPatTupleStruct,\n+    SawPatPath,\n+    SawPatTuple,\n+    SawPatBox,\n+    SawPatRef(Mutability),\n+    SawPatLit,\n+    SawPatRange,\n+    SawPatSlice\n+}\n+\n+fn saw_pat(node: &PatKind) -> SawPatComponent {\n+    match *node {\n+        PatKind::Wild => SawPatWild,\n+        PatKind::Binding(bindingmode, ..) => SawPatBinding(bindingmode),\n+        PatKind::Struct(..) => SawPatStruct,\n+        PatKind::TupleStruct(..) => SawPatTupleStruct,\n+        PatKind::Path(..) => SawPatPath,\n+        PatKind::Tuple(..) => SawPatTuple,\n+        PatKind::Box(..) => SawPatBox,\n+        PatKind::Ref(_, mutability) => SawPatRef(mutability),\n+        PatKind::Lit(..) => SawPatLit,\n+        PatKind::Range(..) => SawPatRange,\n+        PatKind::Slice(..) => SawPatSlice\n+    }\n+}\n+\n+#[derive(Hash)]\n+enum SawTyComponent {\n+    SawTySlice,\n+    SawTyArray,\n+    SawTyPtr(Mutability),\n+    SawTyRptr(Mutability),\n+    SawTyBareFn(Unsafety, Abi),\n+    SawTyNever,\n+    SawTyTup,\n+    SawTyPath,\n+    SawTyObjectSum,\n+    SawTyPolyTraitRef,\n+    SawTyImplTrait,\n+    SawTyTypeof,\n+    SawTyInfer\n+}\n+\n+fn saw_ty(node: &Ty_) -> SawTyComponent {\n+    match *node {\n+      TySlice(..) => SawTySlice,\n+      TyArray(..) => SawTyArray,\n+      TyPtr(ref mty) => SawTyPtr(mty.mutbl),\n+      TyRptr(_, ref mty) => SawTyRptr(mty.mutbl),\n+      TyBareFn(ref barefnty) => SawTyBareFn(barefnty.unsafety, barefnty.abi),\n+      TyNever => SawTyNever,\n+      TyTup(..) => SawTyTup,\n+      TyPath(..) => SawTyPath,\n+      TyObjectSum(..) => SawTyObjectSum,\n+      TyPolyTraitRef(..) => SawTyPolyTraitRef,\n+      TyImplTrait(..) => SawTyImplTrait,\n+      TyTypeof(..) => SawTyTypeof,\n+      TyInfer => SawTyInfer\n+    }\n+}\n+\n+#[derive(Hash)]\n+enum SawTraitOrImplItemComponent {\n+    SawTraitOrImplItemConst,\n+    SawTraitOrImplItemMethod(Unsafety, Constness, Abi),\n+    SawTraitOrImplItemType\n+}\n+\n+fn saw_trait_item(ti: &TraitItem_) -> SawTraitOrImplItemComponent {\n+    match *ti {\n+        ConstTraitItem(..) => SawTraitOrImplItemConst,\n+        MethodTraitItem(ref sig, _) =>\n+            SawTraitOrImplItemMethod(sig.unsafety, sig.constness, sig.abi),\n+        TypeTraitItem(..) => SawTraitOrImplItemType\n+    }\n+}\n+\n+fn saw_impl_item(ii: &ImplItemKind) -> SawTraitOrImplItemComponent {\n+    match *ii {\n+        ImplItemKind::Const(..) => SawTraitOrImplItemConst,\n+        ImplItemKind::Method(ref sig, _) =>\n+            SawTraitOrImplItemMethod(sig.unsafety, sig.constness, sig.abi),\n+        ImplItemKind::Type(..) => SawTraitOrImplItemType\n+    }\n+}\n+\n #[derive(Clone, Copy, Hash, Eq, PartialEq)]\n enum SawSpanExpnKind {\n     NoExpansion,\n@@ -383,10 +519,7 @@ impl<'a, 'hash, 'tcx> visit::Visitor<'tcx> for StrictVersionHashVisitor<'a, 'has\n \n     fn visit_item(&mut self, i: &'tcx Item) {\n         debug!(\"visit_item: {:?} st={:?}\", i, self.st);\n-\n-        SawItem.hash(self.st);\n-        // Hash the value of the discriminant of the Item variant.\n-        self.hash_discriminant(&i.node);\n+        SawItem(saw_item(&i.node)).hash(self.st);\n         hash_span!(self, i.span);\n         hash_attrs!(self, &i.attrs);\n         visit::walk_item(self, i)\n@@ -399,7 +532,7 @@ impl<'a, 'hash, 'tcx> visit::Visitor<'tcx> for StrictVersionHashVisitor<'a, 'has\n \n     fn visit_ty(&mut self, t: &'tcx Ty) {\n         debug!(\"visit_ty: st={:?}\", self.st);\n-        SawTy.hash(self.st);\n+        SawTy(saw_ty(&t.node)).hash(self.st);\n         hash_span!(self, t.span);\n         visit::walk_ty(self, t)\n     }\n@@ -412,17 +545,15 @@ impl<'a, 'hash, 'tcx> visit::Visitor<'tcx> for StrictVersionHashVisitor<'a, 'has\n \n     fn visit_trait_item(&mut self, ti: &'tcx TraitItem) {\n         debug!(\"visit_trait_item: st={:?}\", self.st);\n-        SawTraitItem.hash(self.st);\n-        self.hash_discriminant(&ti.node);\n+        SawTraitItem(saw_trait_item(&ti.node)).hash(self.st);\n         hash_span!(self, ti.span);\n         hash_attrs!(self, &ti.attrs);\n         visit::walk_trait_item(self, ti)\n     }\n \n     fn visit_impl_item(&mut self, ii: &'tcx ImplItem) {\n         debug!(\"visit_impl_item: st={:?}\", self.st);\n-        SawImplItem.hash(self.st);\n-        self.hash_discriminant(&ii.node);\n+        SawImplItem(saw_impl_item(&ii.node)).hash(self.st);\n         hash_span!(self, ii.span);\n         hash_attrs!(self, &ii.attrs);\n         visit::walk_impl_item(self, ii)\n@@ -452,8 +583,7 @@ impl<'a, 'hash, 'tcx> visit::Visitor<'tcx> for StrictVersionHashVisitor<'a, 'has\n \n     fn visit_pat(&mut self, p: &'tcx Pat) {\n         debug!(\"visit_pat: st={:?}\", self.st);\n-        SawPat.hash(self.st);\n-        self.hash_discriminant(&p.node);\n+        SawPat(saw_pat(&p.node)).hash(self.st);\n         hash_span!(self, p.span);\n         visit::walk_pat(self, p)\n     }"}, {"sha": "93d94cd1a19c4b83e20c16bfef8dc6c9921e4139", "filename": "src/test/incremental/hashes/function_interfaces.rs", "status": "added", "additions": 400, "deletions": 0, "changes": 400, "blob_url": "https://github.com/rust-lang/rust/blob/2c8c0defab0885e5c8c50b0841aa860b049ecb7a/src%2Ftest%2Fincremental%2Fhashes%2Ffunction_interfaces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c8c0defab0885e5c8c50b0841aa860b049ecb7a/src%2Ftest%2Fincremental%2Fhashes%2Ffunction_interfaces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Ffunction_interfaces.rs?ref=2c8c0defab0885e5c8c50b0841aa860b049ecb7a", "patch": "@@ -0,0 +1,400 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+\n+// This test case tests the incremental compilation hash (ICH) implementation\n+// for function interfaces.\n+\n+// The general pattern followed here is: Change one thing between rev1 and rev2\n+// and make sure that the hash has changed, then change nothing between rev2 and\n+// rev3 and make sure that the hash has not changed.\n+\n+// must-compile-successfully\n+// revisions: cfail1 cfail2 cfail3\n+// compile-flags: -Z query-dep-graph\n+\n+\n+#![allow(warnings)]\n+#![feature(conservative_impl_trait)]\n+#![feature(intrinsics)]\n+#![feature(linkage)]\n+#![feature(rustc_attrs)]\n+#![crate_type=\"rlib\"]\n+\n+\n+// Add Parameter ---------------------------------------------------------------\n+\n+#[cfg(cfail1)]\n+fn add_parameter() {}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn add_parameter(p: i32) {}\n+\n+\n+// Add Return Type -------------------------------------------------------------\n+\n+#[cfg(cfail1)]\n+fn add_return_type() {}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn add_return_type() -> () {}\n+\n+\n+// Change Parameter Type -------------------------------------------------------\n+\n+#[cfg(cfail1)]\n+fn type_of_parameter(p: i32) {}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn type_of_parameter(p: i64) {}\n+\n+\n+// Change Parameter Type Reference ---------------------------------------------\n+\n+#[cfg(cfail1)]\n+fn type_of_parameter_ref(p: &i32) {}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn type_of_parameter_ref(p: &mut i32) {}\n+\n+\n+// Change Parameter Order ------------------------------------------------------\n+\n+#[cfg(cfail1)]\n+fn order_of_parameters(p1: i32, p2: i64) {}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn order_of_parameters(p2: i64, p1: i32) {}\n+\n+\n+// Unsafe ----------------------------------------------------------------------\n+\n+#[cfg(cfail1)]\n+fn make_unsafe() {}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+unsafe fn make_unsafe() {}\n+\n+\n+// Extern ----------------------------------------------------------------------\n+\n+#[cfg(cfail1)]\n+fn make_extern() {}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+extern fn make_extern() {}\n+\n+\n+// Extern C Extern Rust-Intrinsic ----------------------------------------------\n+\n+#[cfg(cfail1)]\n+extern \"C\" fn make_intrinsic() {}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+extern \"rust-intrinsic\" fn make_intrinsic() {}\n+\n+\n+// Type Parameter --------------------------------------------------------------\n+\n+#[cfg(cfail1)]\n+fn type_parameter() {}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn type_parameter<T>() {}\n+\n+\n+// Lifetime Parameter ----------------------------------------------------------\n+\n+#[cfg(cfail1)]\n+fn lifetime_parameter() {}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn lifetime_parameter<'a>() {}\n+\n+\n+// Trait Bound -----------------------------------------------------------------\n+\n+#[cfg(cfail1)]\n+fn trait_bound<T>() {}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn trait_bound<T: Eq>() {}\n+\n+\n+// Builtin Bound ---------------------------------------------------------------\n+\n+#[cfg(cfail1)]\n+fn builtin_bound<T>() {}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn builtin_bound<T: Send>() {}\n+\n+\n+// Lifetime Bound --------------------------------------------------------------\n+\n+#[cfg(cfail1)]\n+fn lifetime_bound<'a, T>() {}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn lifetime_bound<'a, T: 'a>() {}\n+\n+\n+// Second Trait Bound ----------------------------------------------------------\n+\n+#[cfg(cfail1)]\n+fn second_trait_bound<T: Eq>() {}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn second_trait_bound<T: Eq + Clone>() {}\n+\n+\n+// Second Builtin Bound --------------------------------------------------------\n+\n+#[cfg(cfail1)]\n+fn second_builtin_bound<T: Send>() {}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn second_builtin_bound<T: Send + Sized>() {}\n+\n+\n+// Second Lifetime Bound -------------------------------------------------------\n+\n+#[cfg(cfail1)]\n+fn second_lifetime_bound<'a, 'b, T: 'a>() {}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn second_lifetime_bound<'a, 'b, T: 'a + 'b>() {}\n+\n+\n+// Inline ----------------------------------------------------------------------\n+\n+#[cfg(cfail1)]\n+fn inline() {}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+#[inline]\n+fn inline() {}\n+\n+\n+// Inline Never ----------------------------------------------------------------\n+\n+#[cfg(cfail1)]\n+#[inline(always)]\n+fn inline_never() {}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+#[inline(never)]\n+fn inline_never() {}\n+\n+\n+// No Mangle -------------------------------------------------------------------\n+\n+#[cfg(cfail1)]\n+fn no_mangle() {}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+#[no_mangle]\n+fn no_mangle() {}\n+\n+\n+// Linkage ---------------------------------------------------------------------\n+\n+#[cfg(cfail1)]\n+fn linkage() {}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+#[linkage=\"weak_odr\"]\n+fn linkage() {}\n+\n+\n+// Return Impl Trait -----------------------------------------------------------\n+\n+#[cfg(cfail1)]\n+fn return_impl_trait() -> i32 {\n+    0\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn return_impl_trait() -> impl Clone {\n+    0\n+}\n+\n+\n+// Change Return Impl Trait ----------------------------------------------------\n+\n+#[cfg(cfail1)]\n+fn change_return_impl_trait() -> impl Clone {\n+    0\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+fn change_return_impl_trait() -> impl Copy {\n+    0\n+}\n+\n+\n+// Change Return Type Indirectly -----------------------------------------------\n+\n+struct ReferencedType1;\n+struct ReferencedType2;\n+\n+mod change_return_type_indirectly {\n+    #[cfg(cfail1)]\n+    use super::ReferencedType1 as ReturnType;\n+    #[cfg(not(cfail1))]\n+    use super::ReferencedType2 as ReturnType;\n+\n+    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n+    fn indirect_return_type() -> ReturnType {\n+        ReturnType {}\n+    }\n+}\n+\n+\n+// Change Parameter Type Indirectly --------------------------------------------\n+\n+mod change_parameter_type_indirectly {\n+    #[cfg(cfail1)]\n+    use super::ReferencedType1 as ParameterType;\n+    #[cfg(not(cfail1))]\n+    use super::ReferencedType2 as ParameterType;\n+\n+    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n+    fn indirect_parameter_type(p: ParameterType) {}\n+}\n+\n+\n+// Change Trait Bound Indirectly -----------------------------------------------\n+\n+trait ReferencedTrait1 {}\n+trait ReferencedTrait2 {}\n+\n+mod change_trait_bound_indirectly {\n+    #[cfg(cfail1)]\n+    use super::ReferencedTrait1 as Trait;\n+    #[cfg(not(cfail1))]\n+    use super::ReferencedTrait2 as Trait;\n+\n+    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n+    fn indirect_trait_bound<T: Trait>(p: T) {}\n+}\n+\n+\n+// Change Trait Bound Indirectly In Where Clause -------------------------------\n+\n+mod change_trait_bound_indirectly_in_where_clause {\n+    #[cfg(cfail1)]\n+    use super::ReferencedTrait1 as Trait;\n+    #[cfg(not(cfail1))]\n+    use super::ReferencedTrait2 as Trait;\n+\n+    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n+    fn indirect_trait_bound_where<T>(p: T) where T: Trait {}\n+}"}]}