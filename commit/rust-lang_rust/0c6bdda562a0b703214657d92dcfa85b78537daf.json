{"sha": "0c6bdda562a0b703214657d92dcfa85b78537daf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjNmJkZGE1NjJhMGI3MDMyMTQ2NTdkOTJkY2ZhODViNzg1MzdkYWY=", "commit": {"author": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2019-01-22T06:36:15Z"}, "committer": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2019-01-29T07:19:05Z"}, "message": "Use built-in entry_fn detection over self-built", "tree": {"sha": "cb188aa394e57ebd99d8a5172456261fd637579d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb188aa394e57ebd99d8a5172456261fd637579d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c6bdda562a0b703214657d92dcfa85b78537daf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEvUKv4zqIn2RHUgCKtvoGpuDiZlsFAlxP/mkACgkQtvoGpuDi\nZluUcA/+JTo8RLHZtf67Afy8/a206WWPh5Uf/m3pfxWBjGZ2a/+2KwOsahX/swYt\no87nV/ZTOoUNtsEUEBCBuwJk5V3RgRZ0OvnSUSSjKxd5igcReHOAI11A4MB7ZR88\na/uicV45+7rL9A+6PwKGxqM6KM4ZXoxJjFV6JBy0QN3NskjpP5bQYYVLKjJwpmuB\n5ed6HgOLaJ3w/u6wzrjwxfIRM7qI0tHf0u3g0bu0olzYX8xfLpxpTqBmsIAec63b\nlwMv7M4P4B5unZXlZEUQ7JJkfBrjkkSANlCzBaoHR7CzcUiE/AXPwdVQu2XzNS5R\nlgEiaHx2vuoWmC+K7ceS1C2fzr5eCONq2Y9pvN8SUB/KwvjrXI8KgqmknxAU6vfx\nGSydto3mWQQY3WznplFibX3UmSBdNoQ69vZIUNlm6veCuTBfOiU5iuQg/1EeTdYl\nsF1ABtgn8a6KxiPd4zGhE8p7iDWdJX4pZFKI8ErIpF9vf8EW2u8mwA9j8qBVmmMc\nXRhFOXAh+VRUIdJ+Mk1OfXrgWBpBvwNGct9cdMFIBt73CJ1sOBFsYqUD4tMtvi6X\nJPafkSdWt1T+Q1mp3F7Ah93PIS8QrbnOkV5JunRFJLbJ5Z7opnfKZE4khp/UDXbd\n3Y8YXFpQRNJ1IEEyHAhd8XIkcki7XdmGQBkWtVuoGA/8Z6LVNB8=\n=57LR\n-----END PGP SIGNATURE-----", "payload": "tree cb188aa394e57ebd99d8a5172456261fd637579d\nparent c0a02691d87559cc1f8ff577f6bdb140a619ee7f\nauthor Philipp Hansch <dev@phansch.net> 1548138975 +0100\ncommitter Philipp Hansch <dev@phansch.net> 1548746345 +0100\n\nUse built-in entry_fn detection over self-built\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c6bdda562a0b703214657d92dcfa85b78537daf", "html_url": "https://github.com/rust-lang/rust/commit/0c6bdda562a0b703214657d92dcfa85b78537daf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c6bdda562a0b703214657d92dcfa85b78537daf/comments", "author": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0a02691d87559cc1f8ff577f6bdb140a619ee7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0a02691d87559cc1f8ff577f6bdb140a619ee7f", "html_url": "https://github.com/rust-lang/rust/commit/c0a02691d87559cc1f8ff577f6bdb140a619ee7f"}], "stats": {"total": 64, "additions": 25, "deletions": 39}, "files": [{"sha": "2afde0c931567c152bc043703685850bb46e7f06", "filename": "clippy_lints/src/missing_const_for_fn.rs", "status": "modified", "additions": 14, "deletions": 19, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/0c6bdda562a0b703214657d92dcfa85b78537daf/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c6bdda562a0b703214657d92dcfa85b78537daf/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs?ref=0c6bdda562a0b703214657d92dcfa85b78537daf", "patch": "@@ -6,7 +6,7 @@ use crate::utils::{is_entrypoint_fn, span_lint};\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::{declare_tool_lint, lint_array};\n use rustc_mir::transform::qualify_min_const_fn::is_min_const_fn;\n-use syntax::ast::{Attribute, NodeId};\n+use syntax::ast::NodeId;\n use syntax_pos::Span;\n \n /// **What it does:**\n@@ -82,25 +82,28 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingConstForFn {\n         span: Span,\n         node_id: NodeId,\n     ) {\n+        let def_id = cx.tcx.hir().local_def_id(node_id);\n+\n+        if is_entrypoint_fn(cx, def_id) {\n+            return;\n+        }\n+\n         // Perform some preliminary checks that rule out constness on the Clippy side. This way we\n         // can skip the actual const check and return early.\n         match kind {\n-            FnKind::ItemFn(name, _generics, header, _vis, attrs) => {\n-                if !can_be_const_fn(&name.as_str(), header, attrs) {\n+            FnKind::ItemFn(_, _, header, ..) => {\n+                if already_const(header) {\n                     return;\n                 }\n             },\n-            FnKind::Method(ident, sig, _vis, attrs) => {\n-                let header = sig.header;\n-                let name = ident.name.as_str();\n-                if !can_be_const_fn(&name, header, attrs) {\n+            FnKind::Method(_, sig, ..) => {\n+                if already_const(sig.header) {\n                     return;\n                 }\n             },\n             _ => return,\n         }\n \n-        let def_id = cx.tcx.hir().local_def_id(node_id);\n         let mir = cx.tcx.optimized_mir(def_id);\n \n         if let Err((span, err)) = is_min_const_fn(cx.tcx, def_id, &mir) {\n@@ -113,15 +116,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingConstForFn {\n     }\n }\n \n-fn can_be_const_fn(name: &str, header: hir::FnHeader, attrs: &[Attribute]) -> bool {\n-    // Main and custom entrypoints can't be `const`\n-    if is_entrypoint_fn(name, attrs) {\n-        return false;\n-    }\n-\n-    // We don't have to lint on something that's already `const`\n-    if header.constness == Constness::Const {\n-        return false;\n-    }\n-    true\n+// We don't have to lint on something that's already `const`\n+fn already_const(header: hir::FnHeader) -> bool {\n+    header.constness == Constness::Const\n }"}, {"sha": "8ce28bfed1ff2dc913a88453c846386213510dac", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0c6bdda562a0b703214657d92dcfa85b78537daf/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c6bdda562a0b703214657d92dcfa85b78537daf/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=0c6bdda562a0b703214657d92dcfa85b78537daf", "patch": "@@ -3,7 +3,7 @@ use if_chain::if_chain;\n use matches::matches;\n use rustc::hir;\n use rustc::hir::def::Def;\n-use rustc::hir::def_id::{DefId, CRATE_DEF_INDEX};\n+use rustc::hir::def_id::{DefId, LOCAL_CRATE, CRATE_DEF_INDEX};\n use rustc::hir::intravisit::{NestedVisitorMap, Visitor};\n use rustc::hir::Node;\n use rustc::hir::*;\n@@ -350,15 +350,12 @@ pub fn method_chain_args<'a>(expr: &'a Expr, methods: &[&str]) -> Option<Vec<&'a\n     Some(matched)\n }\n \n-/// Returns true if the function is an entrypoint to a program\n-///\n-/// This is either the usual `main` function or a custom function with the `#[start]` attribute.\n-pub fn is_entrypoint_fn(fn_name: &str, attrs: &[ast::Attribute]) -> bool {\n-    let is_custom_entrypoint = attrs\n-        .iter()\n-        .any(|attr| attr.path.segments.len() == 1 && attr.path.segments[0].ident.to_string() == \"start\");\n-\n-    is_custom_entrypoint || fn_name == \"main\"\n+/// Returns true if the provided `def_id` is an entrypoint to a program\n+pub fn is_entrypoint_fn(cx: &LateContext<'_, '_>, def_id: DefId) -> bool {\n+    if let Some((entry_fn_def_id, _)) = cx.tcx.entry_fn(LOCAL_CRATE) {\n+        return def_id == entry_fn_def_id\n+    }\n+    false\n }\n \n /// Get the name of the item the expression is in, if available."}, {"sha": "36efe16b84f0f855535743f7f7fe054f14fb85d2", "filename": "tests/ui/missing_const_for_fn/cant_be_const.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0c6bdda562a0b703214657d92dcfa85b78537daf/tests%2Fui%2Fmissing_const_for_fn%2Fcant_be_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c6bdda562a0b703214657d92dcfa85b78537daf/tests%2Fui%2Fmissing_const_for_fn%2Fcant_be_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing_const_for_fn%2Fcant_be_const.rs?ref=0c6bdda562a0b703214657d92dcfa85b78537daf", "patch": "@@ -39,10 +39,10 @@ fn get_y() -> u32 {\n     //~^ ERROR E0013\n }\n \n-// Also main should not be suggested to be made const\n-fn main() {\n-    // We should also be sure to not lint on closures\n-    let add_one_v2 = |x: u32| -> u32 { x + 1 };\n+// Don't lint entrypoint functions\n+#[start]\n+fn init(num: isize, something: *const *const u8) -> isize {\n+    1\n }\n \n trait Foo {\n@@ -55,9 +55,3 @@ trait Foo {\n         33\n     }\n }\n-\n-// Don't lint custom entrypoints either\n-#[start]\n-fn init(num: isize, something: *const *const u8) -> isize {\n-    1\n-}"}]}