{"sha": "d2667e4b718e3ded742a095e79eec92beb9bbbd6", "node_id": "C_kwDOAAsO6NoAKGQyNjY3ZTRiNzE4ZTNkZWQ3NDJhMDk1ZTc5ZWVjOTJiZWI5YmJiZDY", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-08-09T18:19:58Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-08-09T18:19:58Z"}, "message": "Move folding into just projection cases", "tree": {"sha": "0d18e723af9eb9f6bd2080cd3cfa39685de84553", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d18e723af9eb9f6bd2080cd3cfa39685de84553"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2667e4b718e3ded742a095e79eec92beb9bbbd6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2667e4b718e3ded742a095e79eec92beb9bbbd6", "html_url": "https://github.com/rust-lang/rust/commit/d2667e4b718e3ded742a095e79eec92beb9bbbd6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2667e4b718e3ded742a095e79eec92beb9bbbd6/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca7e3c4a83e2adddf74d9a45301a84024ce1f730", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca7e3c4a83e2adddf74d9a45301a84024ce1f730", "html_url": "https://github.com/rust-lang/rust/commit/ca7e3c4a83e2adddf74d9a45301a84024ce1f730"}], "stats": {"total": 30, "additions": 20, "deletions": 10}, "files": [{"sha": "fa039f673dcf4eeadbe111ad1abd146bf49aec06", "filename": "compiler/rustc_trait_selection/src/traits/query/normalize.rs", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d2667e4b718e3ded742a095e79eec92beb9bbbd6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2667e4b718e3ded742a095e79eec92beb9bbbd6/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs?ref=d2667e4b718e3ded742a095e79eec92beb9bbbd6", "patch": "@@ -194,7 +194,7 @@ impl<'cx, 'tcx> FallibleTypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n         // wait to fold the substs.\n \n         // Wrap this in a closure so we don't accidentally return from the outer function\n-        let mut res = (|| match *ty.kind() {\n+        let res = (|| match *ty.kind() {\n             // This is really important. While we *can* handle this, this has\n             // severe performance implications for large opaque types with\n             // late-bound regions. See `issue-88862` benchmark.\n@@ -266,7 +266,15 @@ impl<'cx, 'tcx> FallibleTypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n                 debug!(\"QueryNormalizer: result = {:#?}\", result);\n                 debug!(\"QueryNormalizer: obligations = {:#?}\", obligations);\n                 self.obligations.extend(obligations);\n-                Ok(result.normalized_ty)\n+\n+                let res = result.normalized_ty;\n+                // `tcx.normalize_projection_ty` may normalize to a type that still has\n+                // unevaluated consts, so keep normalizing here if that's the case.\n+                if res != ty && res.has_type_flags(ty::TypeFlags::HAS_CT_PROJECTION) {\n+                    Ok(res.try_super_fold_with(self)?)\n+                } else {\n+                    Ok(res)\n+                }\n             }\n \n             ty::Projection(data) => {\n@@ -305,25 +313,27 @@ impl<'cx, 'tcx> FallibleTypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n                 debug!(\"QueryNormalizer: result = {:#?}\", result);\n                 debug!(\"QueryNormalizer: obligations = {:#?}\", obligations);\n                 self.obligations.extend(obligations);\n-                Ok(crate::traits::project::PlaceholderReplacer::replace_placeholders(\n+\n+                let res = crate::traits::project::PlaceholderReplacer::replace_placeholders(\n                     infcx,\n                     mapped_regions,\n                     mapped_types,\n                     mapped_consts,\n                     &self.universes,\n                     result.normalized_ty,\n-                ))\n+                );\n+                // `tcx.normalize_projection_ty` may normalize to a type that still has\n+                // unevaluated consts, so keep normalizing here if that's the case.\n+                if res != ty && res.has_type_flags(ty::TypeFlags::HAS_CT_PROJECTION) {\n+                    Ok(res.try_super_fold_with(self)?)\n+                } else {\n+                    Ok(res)\n+                }\n             }\n \n             _ => ty.try_super_fold_with(self),\n         })()?;\n \n-        // `tcx.normalize_projection_ty` may normalize to a type that still has\n-        // unevaluated consts, so keep normalizing here if that's the case.\n-        if res != ty && res.has_type_flags(ty::TypeFlags::HAS_CT_PROJECTION) {\n-            res = res.try_super_fold_with(self)?;\n-        }\n-\n         self.cache.insert(ty, res);\n         Ok(res)\n     }"}]}