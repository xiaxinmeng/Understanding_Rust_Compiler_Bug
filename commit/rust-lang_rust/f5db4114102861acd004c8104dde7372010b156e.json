{"sha": "f5db4114102861acd004c8104dde7372010b156e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1ZGI0MTE0MTAyODYxYWNkMDA0YzgxMDRkZGU3MzcyMDEwYjE1NmU=", "commit": {"author": {"name": "Andy Russell", "email": "arussell123@gmail.com", "date": "2018-10-04T02:21:05Z"}, "committer": {"name": "Andy Russell", "email": "arussell123@gmail.com", "date": "2018-10-05T14:33:19Z"}, "message": "add suggestion for inverted function parameters\n\nFixes #54065.", "tree": {"sha": "d172d69f72e0f9fca4a2323a5b840c281e01f57f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d172d69f72e0f9fca4a2323a5b840c281e01f57f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f5db4114102861acd004c8104dde7372010b156e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQFKBAABCAA0FiEELriChyEaiMu0yCg7viIhAz7bw3QFAlu3di8WHGFydXNzZWxs\nMTIzQGdtYWlsLmNvbQAKCRC+IiEDPtvDdBtSB/9SA5RUsvDlqjbbAQfBPoHL3VM1\nFE+633T2Zabnu33dUbY+tCw09ECTn1r5baf06GATBN0P4yfI6ikYfg1zEJqVXOS4\n4DGcckr74ozzdVvncAoJgc2+GMrz1OAuad+PxNENW4O+zyOE/hZvgHFMxP63YLLA\nADZtLsMpTvdlKPh8v6WLvRyWrD5cpBl/v0JoSDaCD2P3S8765vDdTTTYC0X7zKIH\ny7LrE/2WwyGoU4saFF2+JwS8VBFVfWYcXETtFW/FYDzaAcq8+gv4rcidB2l1NWly\nJjo8nqTHEk3UDZP8Tf9Ot2shgbK6b71AYYvGx6nzebJr1m+IowaJepVMkE2w\n=B1AJ\n-----END PGP SIGNATURE-----", "payload": "tree d172d69f72e0f9fca4a2323a5b840c281e01f57f\nparent 6ddab3e078bc25bd101d6885427b8a1032f8f60c\nauthor Andy Russell <arussell123@gmail.com> 1538619665 -0400\ncommitter Andy Russell <arussell123@gmail.com> 1538749999 -0400\n\nadd suggestion for inverted function parameters\n\nFixes #54065.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f5db4114102861acd004c8104dde7372010b156e", "html_url": "https://github.com/rust-lang/rust/commit/f5db4114102861acd004c8104dde7372010b156e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f5db4114102861acd004c8104dde7372010b156e/comments", "author": {"login": "euclio", "id": 1372438, "node_id": "MDQ6VXNlcjEzNzI0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1372438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/euclio", "html_url": "https://github.com/euclio", "followers_url": "https://api.github.com/users/euclio/followers", "following_url": "https://api.github.com/users/euclio/following{/other_user}", "gists_url": "https://api.github.com/users/euclio/gists{/gist_id}", "starred_url": "https://api.github.com/users/euclio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/euclio/subscriptions", "organizations_url": "https://api.github.com/users/euclio/orgs", "repos_url": "https://api.github.com/users/euclio/repos", "events_url": "https://api.github.com/users/euclio/events{/privacy}", "received_events_url": "https://api.github.com/users/euclio/received_events", "type": "User", "site_admin": false}, "committer": {"login": "euclio", "id": 1372438, "node_id": "MDQ6VXNlcjEzNzI0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1372438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/euclio", "html_url": "https://github.com/euclio", "followers_url": "https://api.github.com/users/euclio/followers", "following_url": "https://api.github.com/users/euclio/following{/other_user}", "gists_url": "https://api.github.com/users/euclio/gists{/gist_id}", "starred_url": "https://api.github.com/users/euclio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/euclio/subscriptions", "organizations_url": "https://api.github.com/users/euclio/orgs", "repos_url": "https://api.github.com/users/euclio/repos", "events_url": "https://api.github.com/users/euclio/events{/privacy}", "received_events_url": "https://api.github.com/users/euclio/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ddab3e078bc25bd101d6885427b8a1032f8f60c", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ddab3e078bc25bd101d6885427b8a1032f8f60c", "html_url": "https://github.com/rust-lang/rust/commit/6ddab3e078bc25bd101d6885427b8a1032f8f60c"}], "stats": {"total": 107, "additions": 106, "deletions": 1}, "files": [{"sha": "1825ee6eab88c995852d18abb5358fa633f77fcd", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f5db4114102861acd004c8104dde7372010b156e/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5db4114102861acd004c8104dde7372010b156e/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=f5db4114102861acd004c8104dde7372010b156e", "patch": "@@ -1777,7 +1777,26 @@ impl<'a> Parser<'a> {\n                    require_name);\n             let pat = self.parse_pat()?;\n \n-            self.expect(&token::Colon)?;\n+            if let Err(mut err) = self.expect(&token::Colon) {\n+                // If we find a pattern followed by an identifier, it could be an (incorrect)\n+                // C-style parameter declaration.\n+                if self.check_ident() && self.look_ahead(1, |t| {\n+                    *t == token::Comma || *t == token::CloseDelim(token::Paren)\n+                }) {\n+                    let ident = self.parse_ident().unwrap();\n+                    let span = pat.span.with_hi(ident.span.hi());\n+\n+                    err.span_suggestion_with_applicability(\n+                        span,\n+                        \"declare the type after the parameter binding\",\n+                        String::from(\"<identifier>: <type>\"),\n+                        Applicability::HasPlaceholders,\n+                    );\n+                }\n+\n+                return Err(err);\n+            }\n+\n             (pat, self.parse_ty()?)\n         } else {\n             debug!(\"parse_arg_general ident_to_pat\");"}, {"sha": "a100debbf1242a898e2487ec3f3cb54eb7e15681", "filename": "src/test/ui/parser/inverted-parameters.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/f5db4114102861acd004c8104dde7372010b156e/src%2Ftest%2Fui%2Fparser%2Finverted-parameters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5db4114102861acd004c8104dde7372010b156e/src%2Ftest%2Fui%2Fparser%2Finverted-parameters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Finverted-parameters.rs?ref=f5db4114102861acd004c8104dde7372010b156e", "patch": "@@ -0,0 +1,39 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct S;\n+\n+impl S {\n+    fn foo(&self, &str bar) {}\n+    //~^ ERROR expected one of `:` or `@`\n+    //~| HELP declare the type after the parameter binding\n+    //~| SUGGESTION <identifier>: <type>\n+}\n+\n+fn baz(S quux, xyzzy: i32) {}\n+//~^ ERROR expected one of `:` or `@`\n+//~| HELP declare the type after the parameter binding\n+//~| SUGGESTION <identifier>: <type>\n+\n+fn one(i32 a b) {}\n+//~^ ERROR expected one of `:` or `@`\n+\n+fn pattern((i32, i32) (a, b)) {}\n+//~^ ERROR expected `:`\n+\n+fn fizz(i32) {}\n+//~^ ERROR expected one of `:` or `@`\n+\n+fn missing_colon(quux S) {}\n+//~^ ERROR expected one of `:` or `@`\n+//~| HELP declare the type after the parameter binding\n+//~| SUGGESTION <identifier>: <type>\n+\n+fn main() {}"}, {"sha": "3f4f0615bc8f78425d3e8aa4fab6309536c04f5f", "filename": "src/test/ui/parser/inverted-parameters.stderr", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/f5db4114102861acd004c8104dde7372010b156e/src%2Ftest%2Fui%2Fparser%2Finverted-parameters.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f5db4114102861acd004c8104dde7372010b156e/src%2Ftest%2Fui%2Fparser%2Finverted-parameters.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Finverted-parameters.stderr?ref=f5db4114102861acd004c8104dde7372010b156e", "patch": "@@ -0,0 +1,47 @@\n+error: expected one of `:` or `@`, found `bar`\n+  --> $DIR/inverted-parameters.rs:14:24\n+   |\n+LL |     fn foo(&self, &str bar) {}\n+   |                   -----^^^\n+   |                   |    |\n+   |                   |    expected one of `:` or `@` here\n+   |                   help: declare the type after the parameter binding: `<identifier>: <type>`\n+\n+error: expected one of `:` or `@`, found `quux`\n+  --> $DIR/inverted-parameters.rs:20:10\n+   |\n+LL | fn baz(S quux, xyzzy: i32) {}\n+   |        --^^^^\n+   |        | |\n+   |        | expected one of `:` or `@` here\n+   |        help: declare the type after the parameter binding: `<identifier>: <type>`\n+\n+error: expected one of `:` or `@`, found `a`\n+  --> $DIR/inverted-parameters.rs:25:12\n+   |\n+LL | fn one(i32 a b) {}\n+   |            ^ expected one of `:` or `@` here\n+\n+error: expected `:`, found `(`\n+  --> $DIR/inverted-parameters.rs:28:23\n+   |\n+LL | fn pattern((i32, i32) (a, b)) {}\n+   |                       ^ expected `:`\n+\n+error: expected one of `:` or `@`, found `)`\n+  --> $DIR/inverted-parameters.rs:31:12\n+   |\n+LL | fn fizz(i32) {}\n+   |            ^ expected one of `:` or `@` here\n+\n+error: expected one of `:` or `@`, found `S`\n+  --> $DIR/inverted-parameters.rs:34:23\n+   |\n+LL | fn missing_colon(quux S) {}\n+   |                  -----^\n+   |                  |    |\n+   |                  |    expected one of `:` or `@` here\n+   |                  help: declare the type after the parameter binding: `<identifier>: <type>`\n+\n+error: aborting due to 6 previous errors\n+"}]}