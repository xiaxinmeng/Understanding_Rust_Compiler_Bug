{"sha": "6993346e7de0387740693f57046ab9d09741d6db", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5OTMzNDZlN2RlMDM4Nzc0MDY5M2Y1NzA0NmFiOWQwOTc0MWQ2ZGI=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-10-14T22:52:42Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-10-14T22:52:42Z"}, "message": "Stop using bound refs (don't work; leak) and work around auto-deref vec-append bug.", "tree": {"sha": "d190576fdfd85f0fc14bce4a6a5c65ba25566575", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d190576fdfd85f0fc14bce4a6a5c65ba25566575"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6993346e7de0387740693f57046ab9d09741d6db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6993346e7de0387740693f57046ab9d09741d6db", "html_url": "https://github.com/rust-lang/rust/commit/6993346e7de0387740693f57046ab9d09741d6db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6993346e7de0387740693f57046ab9d09741d6db/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a51716790f90de5052b38756f766e4c76882d8c", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a51716790f90de5052b38756f766e4c76882d8c", "html_url": "https://github.com/rust-lang/rust/commit/5a51716790f90de5052b38756f766e4c76882d8c"}], "stats": {"total": 56, "additions": 33, "deletions": 23}, "files": [{"sha": "f775166a5cd9245a6ffac1c019b611eee2684552", "filename": "src/comp/middle/fold.rs", "status": "modified", "additions": 33, "deletions": 23, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/6993346e7de0387740693f57046ab9d09741d6db/src%2Fcomp%2Fmiddle%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6993346e7de0387740693f57046ab9d09741d6db/src%2Fcomp%2Fmiddle%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ffold.rs?ref=6993346e7de0387740693f57046ab9d09741d6db", "patch": "@@ -23,8 +23,6 @@ import front.ast.referent;\n \n import std._vec;\n \n-import std.util.operator;\n-\n type ast_fold[ENV] =\n     @rec\n     (\n@@ -191,9 +189,20 @@ fn fold_lval[ENV](&ENV env, ast_fold[ENV] fld, @lval lv) -> @lval {\n     fail;   // shoudn't be reached\n }\n \n-fn fold_exprs[ENV](&ENV env, ast_fold[ENV] fld, vec[@expr] e) -> vec[@expr] {\n-    let operator[@expr, @expr] fe = bind fold_expr[ENV](env, fld, _);\n-    ret _vec.map[@expr, @expr](fe, e);\n+// FIXME: Weird bug. Due to the way we auto-deref + in +=, we can't append a\n+// boxed value to a vector-of-boxes using +=.  Best to figure out a way to fix\n+// this. Deref-on-demand or something? It's a hazard of the ambiguity between\n+// single-element and vector append.\n+fn append[T](&vec[T] v, &T t) {\n+    v += t;\n+}\n+\n+fn fold_exprs[ENV](&ENV env, ast_fold[ENV] fld, vec[@expr] es) -> vec[@expr] {\n+    let vec[@expr] exprs = vec();\n+    for (@expr e in es) {\n+        append[@expr](exprs, fold_expr(env, fld, e));\n+    }\n+    ret exprs;\n }\n \n fn fold_tup_entry[ENV](&ENV env, ast_fold[ENV] fld, &tup(bool,@expr) e)\n@@ -221,17 +230,19 @@ fn fold_expr[ENV](&ENV env, ast_fold[ENV] fld, &@expr e) -> @expr {\n         }\n \n         case (ast.expr_tup(?es)) {\n-            let operator[tup(bool,@expr), tup(bool,@expr)] fe =\n-                bind fold_tup_entry[ENV](env, fld, _);\n-            auto ees = _vec.map[tup(bool,@expr), tup(bool,@expr)](fe, es);\n-            ret fld.fold_expr_tup(env_, e.span, ees);\n+            let vec[tup(bool,@expr)] entries = vec();\n+            for (tup(bool,@expr) entry in es) {\n+                entries += fold_tup_entry[ENV](env, fld, entry);\n+            }\n+            ret fld.fold_expr_tup(env_, e.span, entries);\n         }\n \n         case (ast.expr_rec(?es)) {\n-            let operator[tup(ident,@expr), tup(ident,@expr)] fe =\n-                bind fold_rec_entry[ENV](env, fld, _);\n-            auto ees = _vec.map[tup(ident,@expr), tup(ident,@expr)](fe, es);\n-            ret fld.fold_expr_rec(env_, e.span, ees);\n+            let vec[tup(ident,@expr)] entries = vec();\n+            for (tup(ident,@expr) entry in es) {\n+                entries += fold_rec_entry(env, fld, entry);\n+            }\n+            ret fld.fold_expr_rec(env_, e.span, entries);\n         }\n \n         case (ast.expr_call(?f, ?args)) {\n@@ -326,27 +337,26 @@ fn fold_stmt[ENV](&ENV env, ast_fold[ENV] fld, &@stmt s) -> @stmt {\n }\n \n fn fold_block[ENV](&ENV env, ast_fold[ENV] fld, &block blk) -> block {\n-    let operator[@stmt, @stmt] fs = bind fold_stmt[ENV](env, fld, _);\n-    auto stmts = _vec.map[@stmt, @stmt](fs, blk.node);\n+    let vec[@ast.stmt] stmts = vec();\n+    for (@ast.stmt s in blk.node) {\n+        append[@ast.stmt](stmts, fold_stmt[ENV](env, fld, s));\n+    }\n     ret respan(blk.span, stmts);\n }\n \n fn fold_slot[ENV](&ENV env, ast_fold[ENV] fld, &slot s) -> slot {\n-    auto ty = fold_ty[ENV](env, fld, s.ty);\n+    auto ty = fold_ty(env, fld, s.ty);\n     ret rec(ty=ty, mode=s.mode, id=s.id);\n }\n \n \n fn fold_fn[ENV](&ENV env, ast_fold[ENV] fld, &ast._fn f) -> ast._fn {\n \n-    fn fold_input[ENV](&ENV env, ast_fold[ENV] fld, &ast.input i)\n-        -> ast.input {\n-        ret rec(slot=fold_slot[ENV](env, fld, i.slot),\n-                ident=i.ident);\n+    let vec[ast.input] inputs = vec();\n+    for (ast.input i in f.inputs) {\n+        inputs += rec(slot=fold_slot(env, fld, i.slot),\n+                      ident=i.ident);\n     }\n-\n-    let operator[ast.input,ast.input] fi = bind fold_input[ENV](env, fld, _);\n-    auto inputs = _vec.map[ast.input, ast.input](fi, f.inputs);\n     auto output = fold_ty[ENV](env, fld, @f.output);\n     auto body = fold_block[ENV](env, fld, f.body);\n "}]}