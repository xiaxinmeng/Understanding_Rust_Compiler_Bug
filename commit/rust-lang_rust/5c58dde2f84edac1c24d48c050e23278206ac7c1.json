{"sha": "5c58dde2f84edac1c24d48c050e23278206ac7c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjNThkZGUyZjg0ZWRhYzFjMjRkNDhjMDUwZTIzMjc4MjA2YWM3YzE=", "commit": {"author": {"name": "Kevin Cantu", "email": "me@kevincantu.org", "date": "2012-02-08T09:52:09Z"}, "committer": {"name": "Kevin Cantu", "email": "me@kevincantu.org", "date": "2012-02-12T00:39:19Z"}, "message": "core: added char::is_digit (matching Nd, Nl, No)", "tree": {"sha": "c32c4743deef0707f46953db0baa033f3416c57c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c32c4743deef0707f46953db0baa033f3416c57c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c58dde2f84edac1c24d48c050e23278206ac7c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c58dde2f84edac1c24d48c050e23278206ac7c1", "html_url": "https://github.com/rust-lang/rust/commit/5c58dde2f84edac1c24d48c050e23278206ac7c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c58dde2f84edac1c24d48c050e23278206ac7c1/comments", "author": {"login": "killerswan", "id": 195060, "node_id": "MDQ6VXNlcjE5NTA2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/195060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/killerswan", "html_url": "https://github.com/killerswan", "followers_url": "https://api.github.com/users/killerswan/followers", "following_url": "https://api.github.com/users/killerswan/following{/other_user}", "gists_url": "https://api.github.com/users/killerswan/gists{/gist_id}", "starred_url": "https://api.github.com/users/killerswan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/killerswan/subscriptions", "organizations_url": "https://api.github.com/users/killerswan/orgs", "repos_url": "https://api.github.com/users/killerswan/repos", "events_url": "https://api.github.com/users/killerswan/events{/privacy}", "received_events_url": "https://api.github.com/users/killerswan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "killerswan", "id": 195060, "node_id": "MDQ6VXNlcjE5NTA2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/195060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/killerswan", "html_url": "https://github.com/killerswan", "followers_url": "https://api.github.com/users/killerswan/followers", "following_url": "https://api.github.com/users/killerswan/following{/other_user}", "gists_url": "https://api.github.com/users/killerswan/gists{/gist_id}", "starred_url": "https://api.github.com/users/killerswan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/killerswan/subscriptions", "organizations_url": "https://api.github.com/users/killerswan/orgs", "repos_url": "https://api.github.com/users/killerswan/repos", "events_url": "https://api.github.com/users/killerswan/events{/privacy}", "received_events_url": "https://api.github.com/users/killerswan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3444db1614a85afd9f306459595c2870a6b2047", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3444db1614a85afd9f306459595c2870a6b2047", "html_url": "https://github.com/rust-lang/rust/commit/b3444db1614a85afd9f306459595c2870a6b2047"}], "stats": {"total": 20, "additions": 19, "deletions": 1}, "files": [{"sha": "87a9b24ce6d8fe82dfe6950b383ae824e214fd4d", "filename": "src/libcore/char.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5c58dde2f84edac1c24d48c050e23278206ac7c1/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c58dde2f84edac1c24d48c050e23278206ac7c1/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=5c58dde2f84edac1c24d48c050e23278206ac7c1", "patch": "@@ -85,10 +85,18 @@ pure fn is_alphanumeric(c: char) -> bool {\n         unicode::general_category::No(c);\n }\n \n+#[doc( brief = \"Indicates whether the character is an ASCII character\" )]\n pure fn is_ascii(c: char) -> bool {\n    c - ('\\x7F' & c) == '\\x00'\n }\n \n+#[doc( brief = \"Indicates whether the character is numeric (Nd, Nl, or No)\" )]\n+pure fn is_digit(c: char) -> bool {\n+    ret unicode::general_category::Nd(c) ||\n+        unicode::general_category::Nl(c) ||\n+        unicode::general_category::No(c);\n+}\n+\n #[doc(\n   brief = \"Convert a char to the corresponding digit. \\\n            Safety note: This function fails if `c` is not a valid char\",\n@@ -227,8 +235,18 @@ fn test_to_upper() {\n }\n \n #[test]\n-fn test_ascii() unsafe {\n+fn test_is_ascii() unsafe {\n    assert str::all(\"banana\", char::is_ascii);\n    assert ! str::all(\"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\", char::is_ascii);\n }\n \n+#[test]\n+fn test_is_digit() {\n+   assert is_digit('2');\n+   assert is_digit('7');\n+   assert ! is_digit('c');\n+   assert ! is_digit('i');\n+   assert ! is_digit('z');\n+   assert ! is_digit('Q');\n+}\n+"}]}