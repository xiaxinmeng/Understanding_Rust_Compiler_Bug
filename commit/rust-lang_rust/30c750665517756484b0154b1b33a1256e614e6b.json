{"sha": "30c750665517756484b0154b1b33a1256e614e6b", "node_id": "C_kwDOAAsO6NoAKDMwYzc1MDY2NTUxNzc1NjQ4NGIwMTU0YjFiMzNhMTI1NmU2MTRlNmI", "commit": {"author": {"name": "Nathan Stocks", "email": "cleancut@github.com", "date": "2022-08-24T22:28:56Z"}, "committer": {"name": "Nathan Stocks", "email": "cleancut@github.com", "date": "2022-08-25T17:06:45Z"}, "message": "allow non-monomorphize modules to access hard-coded error message through new struct, use fluent message in monomorphize", "tree": {"sha": "e1c49c1441edf6a763a92b48a881b8d34ac8c512", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e1c49c1441edf6a763a92b48a881b8d34ac8c512"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/30c750665517756484b0154b1b33a1256e614e6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/30c750665517756484b0154b1b33a1256e614e6b", "html_url": "https://github.com/rust-lang/rust/commit/30c750665517756484b0154b1b33a1256e614e6b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/30c750665517756484b0154b1b33a1256e614e6b/comments", "author": {"login": "CleanCut", "id": 5838512, "node_id": "MDQ6VXNlcjU4Mzg1MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/5838512?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CleanCut", "html_url": "https://github.com/CleanCut", "followers_url": "https://api.github.com/users/CleanCut/followers", "following_url": "https://api.github.com/users/CleanCut/following{/other_user}", "gists_url": "https://api.github.com/users/CleanCut/gists{/gist_id}", "starred_url": "https://api.github.com/users/CleanCut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CleanCut/subscriptions", "organizations_url": "https://api.github.com/users/CleanCut/orgs", "repos_url": "https://api.github.com/users/CleanCut/repos", "events_url": "https://api.github.com/users/CleanCut/events{/privacy}", "received_events_url": "https://api.github.com/users/CleanCut/received_events", "type": "User", "site_admin": true}, "committer": {"login": "CleanCut", "id": 5838512, "node_id": "MDQ6VXNlcjU4Mzg1MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/5838512?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CleanCut", "html_url": "https://github.com/CleanCut", "followers_url": "https://api.github.com/users/CleanCut/followers", "following_url": "https://api.github.com/users/CleanCut/following{/other_user}", "gists_url": "https://api.github.com/users/CleanCut/gists{/gist_id}", "starred_url": "https://api.github.com/users/CleanCut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CleanCut/subscriptions", "organizations_url": "https://api.github.com/users/CleanCut/orgs", "repos_url": "https://api.github.com/users/CleanCut/repos", "events_url": "https://api.github.com/users/CleanCut/events{/privacy}", "received_events_url": "https://api.github.com/users/CleanCut/received_events", "type": "User", "site_admin": true}, "parents": [{"sha": "e9142473dfca7e274d24695e86f9100b020acab5", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9142473dfca7e274d24695e86f9100b020acab5", "html_url": "https://github.com/rust-lang/rust/commit/e9142473dfca7e274d24695e86f9100b020acab5"}], "stats": {"total": 42, "additions": 29, "deletions": 13}, "files": [{"sha": "42c84fdd2d14be92a8ff43dbb3f3768f3a291222", "filename": "compiler/rustc_error_messages/locales/en-US/monomorphize.ftl", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/30c750665517756484b0154b1b33a1256e614e6b/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmonomorphize.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/30c750665517756484b0154b1b33a1256e614e6b/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmonomorphize.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmonomorphize.ftl?ref=30c750665517756484b0154b1b33a1256e614e6b", "patch": "@@ -21,3 +21,6 @@ monomorphize_large_assignments =\n     moving {$size} bytes\n     .label = value moved from here\n     .note = The current maximum size is {$limit}, but it can be customized with the move_size_limit attribute: `#![move_size_limit = \"...\"]`\n+\n+monomorphize_requires_lang_item =\n+    requires `{$lang_item}` lang_item"}, {"sha": "7ed09d3f29366653c99909b5c84251b55f91074c", "filename": "compiler/rustc_hir/src/errors.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/30c750665517756484b0154b1b33a1256e614e6b/compiler%2Frustc_hir%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30c750665517756484b0154b1b33a1256e614e6b/compiler%2Frustc_hir%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Ferrors.rs?ref=30c750665517756484b0154b1b33a1256e614e6b", "patch": "@@ -0,0 +1,9 @@\n+use crate::LangItem;\n+\n+pub struct LangItemError(pub LangItem);\n+\n+impl ToString for LangItemError {\n+    fn to_string(&self) -> String {\n+        format!(\"requires `{}` lang_item\", self.0.name())\n+    }\n+}"}, {"sha": "0c01326d0032ac61842af06569cf493b714d7ed5", "filename": "compiler/rustc_hir/src/lang_items.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/30c750665517756484b0154b1b33a1256e614e6b/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30c750665517756484b0154b1b33a1256e614e6b/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs?ref=30c750665517756484b0154b1b33a1256e614e6b", "patch": "@@ -8,6 +8,7 @@\n //! * Functions called by the compiler itself.\n \n use crate::def_id::DefId;\n+use crate::errors::LangItemError;\n use crate::{MethodKind, Target};\n \n use rustc_ast as ast;\n@@ -115,9 +116,9 @@ macro_rules! language_item_table {\n \n             /// Requires that a given `LangItem` was bound and returns the corresponding `DefId`.\n             /// If it wasn't bound, e.g. due to a missing `#[lang = \"<it.name()>\"]`,\n-            /// returns an error message as a string.\n-            pub fn require(&self, it: LangItem) -> Result<DefId, String> {\n-                self.items[it as usize].ok_or_else(|| format!(\"requires `{}` lang_item\", it.name()))\n+            /// returns an error encapsulating the `LangItem`.\n+            pub fn require(&self, it: LangItem) -> Result<DefId, LangItemError> {\n+                self.items[it as usize].ok_or_else(|| LangItemError(it))\n             }\n \n             /// Returns the [`DefId`]s of all lang items in a group."}, {"sha": "092029ef09ec80e6cab087b6b63838e94ed25f4e", "filename": "compiler/rustc_hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/30c750665517756484b0154b1b33a1256e614e6b/compiler%2Frustc_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30c750665517756484b0154b1b33a1256e614e6b/compiler%2Frustc_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flib.rs?ref=30c750665517756484b0154b1b33a1256e614e6b", "patch": "@@ -27,6 +27,7 @@ pub mod def;\n pub mod def_path_hash_map;\n pub mod definitions;\n pub mod diagnostic_items;\n+pub mod errors;\n pub use rustc_span::def_id;\n mod hir;\n pub mod hir_id;"}, {"sha": "31c20fa14aaf5e819c23f6537fe6298ac2cba740", "filename": "compiler/rustc_middle/src/middle/lang_items.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/30c750665517756484b0154b1b33a1256e614e6b/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30c750665517756484b0154b1b33a1256e614e6b/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Flang_items.rs?ref=30c750665517756484b0154b1b33a1256e614e6b", "patch": "@@ -18,11 +18,11 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// Returns the `DefId` for a given `LangItem`.\n     /// If not found, fatally aborts compilation.\n     pub fn require_lang_item(self, lang_item: LangItem, span: Option<Span>) -> DefId {\n-        self.lang_items().require(lang_item).unwrap_or_else(|msg| {\n+        self.lang_items().require(lang_item).unwrap_or_else(|err| {\n             if let Some(span) = span {\n-                self.sess.span_fatal(span, &msg)\n+                self.sess.span_fatal(span, err.to_string())\n             } else {\n-                self.sess.fatal(&msg)\n+                self.sess.fatal(err.to_string())\n             }\n         })\n     }"}, {"sha": "e0a14738b95480a8890f64cf73ef51d1ff14ed93", "filename": "compiler/rustc_monomorphize/src/collector.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/30c750665517756484b0154b1b33a1256e614e6b/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30c750665517756484b0154b1b33a1256e614e6b/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs?ref=30c750665517756484b0154b1b33a1256e614e6b", "patch": "@@ -207,7 +207,7 @@ use std::iter;\n use std::ops::Range;\n use std::path::PathBuf;\n \n-use crate::errors::{FatalError, LargeAssignmentsLint, RecursionLimit, TypeLengthLimit};\n+use crate::errors::{LargeAssignmentsLint, RecursionLimit, RequiresLangItem, TypeLengthLimit};\n \n #[derive(PartialEq)]\n pub enum MonoItemCollectionMode {\n@@ -1328,8 +1328,10 @@ impl<'v> RootCollector<'_, 'v> {\n \n         let start_def_id = match self.tcx.lang_items().require(LangItem::Start) {\n             Ok(s) => s,\n-            Err(error_message) => {\n-                self.tcx.sess.emit_fatal(FatalError { error_message: error_message.clone() });\n+            Err(lang_item_err) => {\n+                self.tcx\n+                    .sess\n+                    .emit_fatal(RequiresLangItem { lang_item: lang_item_err.0.name().to_string() });\n             }\n         };\n         let main_ret_ty = self.tcx.fn_sig(main_def_id).output();"}, {"sha": "77b6cfa1f69f897822cf65c12146561830a29132", "filename": "compiler/rustc_monomorphize/src/errors.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/30c750665517756484b0154b1b33a1256e614e6b/compiler%2Frustc_monomorphize%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30c750665517756484b0154b1b33a1256e614e6b/compiler%2Frustc_monomorphize%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Ferrors.rs?ref=30c750665517756484b0154b1b33a1256e614e6b", "patch": "@@ -33,9 +33,9 @@ pub struct TypeLengthLimit {\n }\n \n #[derive(SessionDiagnostic)]\n-#[diag(monomorphize::fatal_error)]\n-pub struct FatalError {\n-    pub error_message: String,\n+#[diag(monomorphize::requires_lang_item)]\n+pub struct RequiresLangItem {\n+    pub lang_item: String,\n }\n \n pub struct UnusedGenericParams {"}, {"sha": "d08c0d4dbb72a6b5d12db254d92945dbca97d6bb", "filename": "compiler/rustc_typeck/src/coherence/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30c750665517756484b0154b1b33a1256e614e6b/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30c750665517756484b0154b1b33a1256e614e6b/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fbuiltin.rs?ref=30c750665517756484b0154b1b33a1256e614e6b", "patch": "@@ -359,7 +359,7 @@ pub fn coerce_unsized_info<'tcx>(tcx: TyCtxt<'tcx>, impl_did: DefId) -> CoerceUn\n     let coerce_unsized_trait = tcx.require_lang_item(LangItem::CoerceUnsized, Some(span));\n \n     let unsize_trait = tcx.lang_items().require(LangItem::Unsize).unwrap_or_else(|err| {\n-        tcx.sess.fatal(&format!(\"`CoerceUnsized` implementation {}\", err));\n+        tcx.sess.fatal(&format!(\"`CoerceUnsized` implementation {}\", err.to_string()));\n     });\n \n     let source = tcx.type_of(impl_did);"}]}