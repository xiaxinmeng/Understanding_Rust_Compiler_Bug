{"sha": "569f47e427e0b9181075291c988446b86c5ba8f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2OWY0N2U0MjdlMGI5MTgxMDc1MjkxYzk4ODQ0NmI4NmM1YmE4Zjk=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-03-31T14:02:55Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-03-31T14:05:25Z"}, "message": "Better names for config structs", "tree": {"sha": "b42d2b36b4583f306dbe7fc5a77b7522564cd38a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b42d2b36b4583f306dbe7fc5a77b7522564cd38a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/569f47e427e0b9181075291c988446b86c5ba8f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/569f47e427e0b9181075291c988446b86c5ba8f9", "html_url": "https://github.com/rust-lang/rust/commit/569f47e427e0b9181075291c988446b86c5ba8f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/569f47e427e0b9181075291c988446b86c5ba8f9/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5b01d6544681a9db157b1a9a33c29149d4c590c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5b01d6544681a9db157b1a9a33c29149d4c590c", "html_url": "https://github.com/rust-lang/rust/commit/f5b01d6544681a9db157b1a9a33c29149d4c590c"}], "stats": {"total": 206, "additions": 102, "deletions": 104}, "files": [{"sha": "77ede8f635dab69815a474fc77057214ecafe04c", "filename": "crates/ra_cargo_watch/src/lib.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/569f47e427e0b9181075291c988446b86c5ba8f9/crates%2Fra_cargo_watch%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/569f47e427e0b9181075291c988446b86c5ba8f9/crates%2Fra_cargo_watch%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cargo_watch%2Fsrc%2Flib.rs?ref=569f47e427e0b9181075291c988446b86c5ba8f9", "patch": "@@ -22,7 +22,7 @@ use crate::conv::{map_rust_diagnostic_to_lsp, MappedRustDiagnostic};\n pub use crate::conv::url_from_path_with_drive_lowercasing;\n \n #[derive(Clone, Debug)]\n-pub struct CheckOptions {\n+pub struct CheckConfig {\n     pub enable: bool,\n     pub args: Vec<String>,\n     pub command: String,\n@@ -42,13 +42,11 @@ pub struct CheckWatcher {\n }\n \n impl CheckWatcher {\n-    pub fn new(options: &CheckOptions, workspace_root: PathBuf) -> CheckWatcher {\n-        let options = options.clone();\n-\n+    pub fn new(config: CheckConfig, workspace_root: PathBuf) -> CheckWatcher {\n         let (task_send, task_recv) = unbounded::<CheckTask>();\n         let (cmd_send, cmd_recv) = unbounded::<CheckCommand>();\n         let handle = jod_thread::spawn(move || {\n-            let mut check = CheckWatcherThread::new(options, workspace_root);\n+            let mut check = CheckWatcherThread::new(config, workspace_root);\n             check.run(&task_send, &cmd_recv);\n         });\n         CheckWatcher { task_recv, cmd_send, handle: Some(handle) }\n@@ -78,14 +76,14 @@ pub enum CheckCommand {\n }\n \n struct CheckWatcherThread {\n-    options: CheckOptions,\n+    options: CheckConfig,\n     workspace_root: PathBuf,\n     watcher: WatchThread,\n     last_update_req: Option<Instant>,\n }\n \n impl CheckWatcherThread {\n-    fn new(options: CheckOptions, workspace_root: PathBuf) -> CheckWatcherThread {\n+    fn new(options: CheckConfig, workspace_root: PathBuf) -> CheckWatcherThread {\n         CheckWatcherThread {\n             options,\n             workspace_root,\n@@ -324,7 +322,7 @@ impl WatchThread {\n         WatchThread { message_recv: never(), _handle: None }\n     }\n \n-    fn new(options: &CheckOptions, workspace_root: &Path) -> WatchThread {\n+    fn new(options: &CheckConfig, workspace_root: &Path) -> WatchThread {\n         let mut args: Vec<String> = vec![\n             options.command.clone(),\n             \"--workspace\".to_string(),"}, {"sha": "b683572fbf893c02568ff23b5000cdb0a8005e1d", "filename": "crates/ra_ide/src/completion.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/569f47e427e0b9181075291c988446b86c5ba8f9/crates%2Fra_ide%2Fsrc%2Fcompletion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/569f47e427e0b9181075291c988446b86c5ba8f9/crates%2Fra_ide%2Fsrc%2Fcompletion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion.rs?ref=569f47e427e0b9181075291c988446b86c5ba8f9", "patch": "@@ -34,15 +34,15 @@ pub use crate::completion::completion_item::{\n };\n \n #[derive(Clone, Debug, PartialEq, Eq)]\n-pub struct CompletionOptions {\n+pub struct CompletionConfig {\n     pub enable_postfix_completions: bool,\n     pub add_call_parenthesis: bool,\n     pub add_call_argument_snippets: bool,\n }\n \n-impl Default for CompletionOptions {\n+impl Default for CompletionConfig {\n     fn default() -> Self {\n-        CompletionOptions {\n+        CompletionConfig {\n             enable_postfix_completions: true,\n             add_call_parenthesis: true,\n             add_call_argument_snippets: true,\n@@ -75,9 +75,9 @@ impl Default for CompletionOptions {\n pub(crate) fn completions(\n     db: &RootDatabase,\n     position: FilePosition,\n-    options: &CompletionOptions,\n+    config: &CompletionConfig,\n ) -> Option<Completions> {\n-    let ctx = CompletionContext::new(db, position, options)?;\n+    let ctx = CompletionContext::new(db, position, config)?;\n \n     let mut acc = Completions::default();\n "}, {"sha": "29c2881c621c9fa47543acbbdea646d4b2fda517", "filename": "crates/ra_ide/src/completion/complete_postfix.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/569f47e427e0b9181075291c988446b86c5ba8f9/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_postfix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/569f47e427e0b9181075291c988446b86c5ba8f9/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_postfix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_postfix.rs?ref=569f47e427e0b9181075291c988446b86c5ba8f9", "patch": "@@ -15,7 +15,7 @@ use crate::{\n };\n \n pub(super) fn complete_postfix(acc: &mut Completions, ctx: &CompletionContext) {\n-    if !ctx.options.enable_postfix_completions {\n+    if !ctx.config.enable_postfix_completions {\n         return;\n     }\n "}, {"sha": "fdc0da2c5ed4f5e2e77cb8ddb5a29e1035a37644", "filename": "crates/ra_ide/src/completion/completion_context.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/569f47e427e0b9181075291c988446b86c5ba8f9/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/569f47e427e0b9181075291c988446b86c5ba8f9/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs?ref=569f47e427e0b9181075291c988446b86c5ba8f9", "patch": "@@ -11,15 +11,15 @@ use ra_syntax::{\n };\n use ra_text_edit::AtomTextEdit;\n \n-use crate::{completion::CompletionOptions, FilePosition};\n+use crate::{completion::CompletionConfig, FilePosition};\n \n /// `CompletionContext` is created early during completion to figure out, where\n /// exactly is the cursor, syntax-wise.\n #[derive(Debug)]\n pub(crate) struct CompletionContext<'a> {\n     pub(super) sema: Semantics<'a, RootDatabase>,\n     pub(super) db: &'a RootDatabase,\n-    pub(super) options: &'a CompletionOptions,\n+    pub(super) config: &'a CompletionConfig,\n     pub(super) offset: TextUnit,\n     /// The token before the cursor, in the original file.\n     pub(super) original_token: SyntaxToken,\n@@ -61,7 +61,7 @@ impl<'a> CompletionContext<'a> {\n     pub(super) fn new(\n         db: &'a RootDatabase,\n         position: FilePosition,\n-        options: &'a CompletionOptions,\n+        config: &'a CompletionConfig,\n     ) -> Option<CompletionContext<'a>> {\n         let sema = Semantics::new(db);\n \n@@ -85,7 +85,7 @@ impl<'a> CompletionContext<'a> {\n         let mut ctx = CompletionContext {\n             sema,\n             db,\n-            options,\n+            config,\n             original_token,\n             token,\n             offset: position.offset,"}, {"sha": "1c7c0924db61bddb4ec2b90080d8d28d2100287c", "filename": "crates/ra_ide/src/completion/presentation.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/569f47e427e0b9181075291c988446b86c5ba8f9/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/569f47e427e0b9181075291c988446b86c5ba8f9/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=569f47e427e0b9181075291c988446b86c5ba8f9", "patch": "@@ -106,7 +106,7 @@ impl Completions {\n         };\n \n         // Add `<>` for generic types\n-        if ctx.is_path_type && !ctx.has_type_args && ctx.options.add_call_parenthesis {\n+        if ctx.is_path_type && !ctx.has_type_args && ctx.config.add_call_parenthesis {\n             let has_non_default_type_params = match resolution {\n                 ScopeDef::ModuleDef(Adt(it)) => it.has_non_default_type_params(ctx.db),\n                 ScopeDef::ModuleDef(TypeAlias(it)) => it.has_non_default_type_params(ctx.db),\n@@ -211,14 +211,14 @@ impl Completions {\n                 .detail(function_signature.to_string());\n \n         // If not an import, add parenthesis automatically.\n-        if ctx.use_item_syntax.is_none() && !ctx.is_call && ctx.options.add_call_parenthesis {\n+        if ctx.use_item_syntax.is_none() && !ctx.is_call && ctx.config.add_call_parenthesis {\n             tested_by!(inserts_parens_for_function_calls);\n \n             let (snippet, label) = if params.is_empty() || has_self_param && params.len() == 1 {\n                 (format!(\"{}()$0\", name), format!(\"{}()\", name))\n             } else {\n                 builder = builder.trigger_call_info();\n-                let snippet = if ctx.options.add_call_argument_snippets {\n+                let snippet = if ctx.config.add_call_argument_snippets {\n                     let to_skip = if has_self_param { 1 } else { 0 };\n                     let function_params_snippet = function_signature\n                         .parameter_names\n@@ -311,7 +311,7 @@ mod tests {\n \n     use crate::completion::{\n         test_utils::{do_completion, do_completion_with_options},\n-        CompletionItem, CompletionKind, CompletionOptions,\n+        CompletionConfig, CompletionItem, CompletionKind,\n     };\n \n     fn do_reference_completion(ra_fixture: &str) -> Vec<CompletionItem> {\n@@ -320,7 +320,7 @@ mod tests {\n \n     fn do_reference_completion_with_options(\n         ra_fixture: &str,\n-        options: CompletionOptions,\n+        options: CompletionConfig,\n     ) -> Vec<CompletionItem> {\n         do_completion_with_options(ra_fixture, CompletionKind::Reference, &options)\n     }\n@@ -589,7 +589,7 @@ mod tests {\n                     s.f<|>\n                 }\n                 \",\n-                CompletionOptions {\n+                CompletionConfig {\n                     add_call_argument_snippets: false,\n                     .. Default::default()\n                 }"}, {"sha": "eb90b5279c463e5589fdbf36e96f8e5971169291", "filename": "crates/ra_ide/src/completion/test_utils.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/569f47e427e0b9181075291c988446b86c5ba8f9/crates%2Fra_ide%2Fsrc%2Fcompletion%2Ftest_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/569f47e427e0b9181075291c988446b86c5ba8f9/crates%2Fra_ide%2Fsrc%2Fcompletion%2Ftest_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Ftest_utils.rs?ref=569f47e427e0b9181075291c988446b86c5ba8f9", "patch": "@@ -1,19 +1,19 @@\n //! Runs completion for testing purposes.\n \n use crate::{\n-    completion::{completion_item::CompletionKind, CompletionOptions},\n+    completion::{completion_item::CompletionKind, CompletionConfig},\n     mock_analysis::{analysis_and_position, single_file_with_position},\n     CompletionItem,\n };\n \n pub(crate) fn do_completion(code: &str, kind: CompletionKind) -> Vec<CompletionItem> {\n-    do_completion_with_options(code, kind, &CompletionOptions::default())\n+    do_completion_with_options(code, kind, &CompletionConfig::default())\n }\n \n pub(crate) fn do_completion_with_options(\n     code: &str,\n     kind: CompletionKind,\n-    options: &CompletionOptions,\n+    options: &CompletionConfig,\n ) -> Vec<CompletionItem> {\n     let (analysis, position) = if code.contains(\"//-\") {\n         analysis_and_position(code)"}, {"sha": "d06fc03d3ebd6f313275aa2a28c6d27b37e89ba8", "filename": "crates/ra_ide/src/inlay_hints.rs", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/569f47e427e0b9181075291c988446b86c5ba8f9/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/569f47e427e0b9181075291c988446b86c5ba8f9/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs?ref=569f47e427e0b9181075291c988446b86c5ba8f9", "patch": "@@ -11,14 +11,14 @@ use ra_syntax::{\n use crate::{FileId, FunctionSignature};\n \n #[derive(Clone, Debug, PartialEq, Eq)]\n-pub struct InlayHintsOptions {\n+pub struct InlayHintsConfig {\n     pub type_hints: bool,\n     pub parameter_hints: bool,\n     pub chaining_hints: bool,\n     pub max_length: Option<usize>,\n }\n \n-impl Default for InlayHintsOptions {\n+impl Default for InlayHintsConfig {\n     fn default() -> Self {\n         Self { type_hints: true, parameter_hints: true, chaining_hints: true, max_length: None }\n     }\n@@ -41,7 +41,7 @@ pub struct InlayHint {\n pub(crate) fn inlay_hints(\n     db: &RootDatabase,\n     file_id: FileId,\n-    options: &InlayHintsOptions,\n+    config: &InlayHintsConfig,\n ) -> Vec<InlayHint> {\n     let _p = profile(\"inlay_hints\");\n     let sema = Semantics::new(db);\n@@ -50,14 +50,14 @@ pub(crate) fn inlay_hints(\n     let mut res = Vec::new();\n     for node in file.syntax().descendants() {\n         if let Some(expr) = ast::Expr::cast(node.clone()) {\n-            get_chaining_hints(&mut res, &sema, options, expr);\n+            get_chaining_hints(&mut res, &sema, config, expr);\n         }\n \n         match_ast! {\n             match node {\n-                ast::CallExpr(it) => { get_param_name_hints(&mut res, &sema, options, ast::Expr::from(it)); },\n-                ast::MethodCallExpr(it) => { get_param_name_hints(&mut res, &sema, options, ast::Expr::from(it)); },\n-                ast::BindPat(it) => { get_bind_pat_hints(&mut res, &sema, options, it); },\n+                ast::CallExpr(it) => { get_param_name_hints(&mut res, &sema, config, ast::Expr::from(it)); },\n+                ast::MethodCallExpr(it) => { get_param_name_hints(&mut res, &sema, config, ast::Expr::from(it)); },\n+                ast::BindPat(it) => { get_bind_pat_hints(&mut res, &sema, config, it); },\n                 _ => (),\n             }\n         }\n@@ -68,10 +68,10 @@ pub(crate) fn inlay_hints(\n fn get_chaining_hints(\n     acc: &mut Vec<InlayHint>,\n     sema: &Semantics<RootDatabase>,\n-    options: &InlayHintsOptions,\n+    config: &InlayHintsConfig,\n     expr: ast::Expr,\n ) -> Option<()> {\n-    if !options.chaining_hints {\n+    if !config.chaining_hints {\n         return None;\n     }\n \n@@ -95,7 +95,7 @@ fn get_chaining_hints(\n     let next = tokens.next()?.kind();\n     let next_next = tokens.next()?.kind();\n     if next == SyntaxKind::WHITESPACE && next_next == SyntaxKind::DOT {\n-        let label = ty.display_truncated(sema.db, options.max_length).to_string();\n+        let label = ty.display_truncated(sema.db, config.max_length).to_string();\n         acc.push(InlayHint {\n             range: expr.syntax().text_range(),\n             kind: InlayKind::ChainingHint,\n@@ -108,10 +108,10 @@ fn get_chaining_hints(\n fn get_param_name_hints(\n     acc: &mut Vec<InlayHint>,\n     sema: &Semantics<RootDatabase>,\n-    options: &InlayHintsOptions,\n+    config: &InlayHintsConfig,\n     expr: ast::Expr,\n ) -> Option<()> {\n-    if !options.parameter_hints {\n+    if !config.parameter_hints {\n         return None;\n     }\n \n@@ -148,10 +148,10 @@ fn get_param_name_hints(\n fn get_bind_pat_hints(\n     acc: &mut Vec<InlayHint>,\n     sema: &Semantics<RootDatabase>,\n-    options: &InlayHintsOptions,\n+    config: &InlayHintsConfig,\n     pat: ast::BindPat,\n ) -> Option<()> {\n-    if !options.type_hints {\n+    if !config.type_hints {\n         return None;\n     }\n \n@@ -164,7 +164,7 @@ fn get_bind_pat_hints(\n     acc.push(InlayHint {\n         range: pat.syntax().text_range(),\n         kind: InlayKind::TypeHint,\n-        label: ty.display_truncated(sema.db, options.max_length).to_string().into(),\n+        label: ty.display_truncated(sema.db, config.max_length).to_string().into(),\n     });\n     Some(())\n }\n@@ -270,7 +270,7 @@ fn get_fn_signature(sema: &Semantics<RootDatabase>, expr: &ast::Expr) -> Option<\n \n #[cfg(test)]\n mod tests {\n-    use crate::inlay_hints::InlayHintsOptions;\n+    use crate::inlay_hints::InlayHintsConfig;\n     use insta::assert_debug_snapshot;\n \n     use crate::mock_analysis::single_file;\n@@ -284,7 +284,7 @@ mod tests {\n                 let _x = foo(4, 4);\n             }\"#,\n         );\n-        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintsOptions{ parameter_hints: true, type_hints: false, chaining_hints: false, max_length: None}).unwrap(), @r###\"\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintsConfig{ parameter_hints: true, type_hints: false, chaining_hints: false, max_length: None}).unwrap(), @r###\"\n         [\n             InlayHint {\n                 range: [106; 107),\n@@ -308,7 +308,7 @@ mod tests {\n                 let _x = foo(4, 4);\n             }\"#,\n         );\n-        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintsOptions{ type_hints: false, parameter_hints: false, chaining_hints: false, max_length: None}).unwrap(), @r###\"[]\"###);\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintsConfig{ type_hints: false, parameter_hints: false, chaining_hints: false, max_length: None}).unwrap(), @r###\"[]\"###);\n     }\n \n     #[test]\n@@ -320,7 +320,7 @@ mod tests {\n                 let _x = foo(4, 4);\n             }\"#,\n         );\n-        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintsOptions{ type_hints: true, parameter_hints: false, chaining_hints: false, max_length: None}).unwrap(), @r###\"\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintsConfig{ type_hints: true, parameter_hints: false, chaining_hints: false, max_length: None}).unwrap(), @r###\"\n         [\n             InlayHint {\n                 range: [97; 99),\n@@ -344,7 +344,7 @@ fn main() {\n }\"#,\n         );\n \n-        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintsOptions::default()).unwrap(), @r###\"\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintsConfig::default()).unwrap(), @r###\"\n         [\n             InlayHint {\n                 range: [69; 71),\n@@ -401,7 +401,7 @@ fn main() {\n }\"#,\n         );\n \n-        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintsOptions::default()).unwrap(), @r###\"\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintsConfig::default()).unwrap(), @r###\"\n         [\n             InlayHint {\n                 range: [193; 197),\n@@ -481,7 +481,7 @@ fn main() {\n }\"#,\n         );\n \n-        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintsOptions::default()).unwrap(), @r###\"\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintsConfig::default()).unwrap(), @r###\"\n         [\n             InlayHint {\n                 range: [21; 30),\n@@ -545,7 +545,7 @@ fn main() {\n }\"#,\n         );\n \n-        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintsOptions::default()).unwrap(), @r###\"\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintsConfig::default()).unwrap(), @r###\"\n         [\n             InlayHint {\n                 range: [21; 30),\n@@ -595,7 +595,7 @@ fn main() {\n }\"#,\n         );\n \n-        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintsOptions::default()).unwrap(), @r###\"\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintsConfig::default()).unwrap(), @r###\"\n         [\n             InlayHint {\n                 range: [188; 192),\n@@ -690,7 +690,7 @@ fn main() {\n }\"#,\n         );\n \n-        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintsOptions::default()).unwrap(), @r###\"\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintsConfig::default()).unwrap(), @r###\"\n         [\n             InlayHint {\n                 range: [188; 192),\n@@ -785,7 +785,7 @@ fn main() {\n }\"#,\n         );\n \n-        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintsOptions::default()).unwrap(), @r###\"\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintsConfig::default()).unwrap(), @r###\"\n         [\n             InlayHint {\n                 range: [252; 256),\n@@ -857,7 +857,7 @@ fn main() {\n }\"#,\n         );\n \n-        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintsOptions { max_length: Some(8), ..Default::default() }).unwrap(), @r###\"\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintsConfig { max_length: Some(8), ..Default::default() }).unwrap(), @r###\"\n         [\n             InlayHint {\n                 range: [74; 75),\n@@ -945,7 +945,7 @@ fn main() {\n }\"#,\n         );\n \n-        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintsOptions::default()).unwrap(), @r###\"\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintsConfig::default()).unwrap(), @r###\"\n         [\n             InlayHint {\n                 range: [798; 809),\n@@ -1067,7 +1067,7 @@ fn main() {\n }\"#,\n         );\n \n-        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintsOptions { max_length: Some(8), ..Default::default() }).unwrap(), @r###\"\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintsConfig { max_length: Some(8), ..Default::default() }).unwrap(), @r###\"\n         []\n         \"###\n         );\n@@ -1093,7 +1093,7 @@ fn main() {\n }\"#,\n         );\n \n-        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintsOptions { max_length: Some(8), ..Default::default() }).unwrap(), @r###\"\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintsConfig { max_length: Some(8), ..Default::default() }).unwrap(), @r###\"\n         []\n         \"###\n         );\n@@ -1115,7 +1115,7 @@ fn main() {\n                     .into_c();\n             }\"#,\n         );\n-        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintsOptions{ parameter_hints: false, type_hints: false, chaining_hints: true, max_length: None}).unwrap(), @r###\"\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintsConfig{ parameter_hints: false, type_hints: false, chaining_hints: true, max_length: None}).unwrap(), @r###\"\n         [\n             InlayHint {\n                 range: [232; 269),\n@@ -1144,7 +1144,7 @@ fn main() {\n                 let c = A(B(C)).into_b().into_c();\n             }\"#,\n         );\n-        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintsOptions{ parameter_hints: false, type_hints: false, chaining_hints: true, max_length: None}).unwrap(), @r###\"[]\"###);\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintsConfig{ parameter_hints: false, type_hints: false, chaining_hints: true, max_length: None}).unwrap(), @r###\"[]\"###);\n     }\n \n     #[test]\n@@ -1162,7 +1162,7 @@ fn main() {\n                     .0;\n             }\"#,\n         );\n-        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintsOptions{ parameter_hints: false, type_hints: false, chaining_hints: true, max_length: None}).unwrap(), @r###\"\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintsConfig{ parameter_hints: false, type_hints: false, chaining_hints: true, max_length: None}).unwrap(), @r###\"\n         [\n             InlayHint {\n                 range: [150; 221),\n@@ -1204,7 +1204,7 @@ fn main() {\n                     .into_c();\n             }\"#,\n         );\n-        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintsOptions{ parameter_hints: false, type_hints: false, chaining_hints: true, max_length: None}).unwrap(), @r###\"\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintsConfig{ parameter_hints: false, type_hints: false, chaining_hints: true, max_length: None}).unwrap(), @r###\"\n         [\n             InlayHint {\n                 range: [403; 452),"}, {"sha": "2853810865f9a4d9ede6370374a8e1c2d86609eb", "filename": "crates/ra_ide/src/lib.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/569f47e427e0b9181075291c988446b86c5ba8f9/crates%2Fra_ide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/569f47e427e0b9181075291c988446b86c5ba8f9/crates%2Fra_ide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Flib.rs?ref=569f47e427e0b9181075291c988446b86c5ba8f9", "patch": "@@ -62,13 +62,13 @@ use crate::display::ToNav;\n pub use crate::{\n     assists::{Assist, AssistId},\n     call_hierarchy::CallItem,\n-    completion::{CompletionItem, CompletionItemKind, CompletionOptions, InsertTextFormat},\n+    completion::{CompletionConfig, CompletionItem, CompletionItemKind, InsertTextFormat},\n     diagnostics::Severity,\n     display::{file_structure, FunctionSignature, NavigationTarget, StructureNode},\n     expand_macro::ExpandedMacro,\n     folding_ranges::{Fold, FoldKind},\n     hover::HoverResult,\n-    inlay_hints::{InlayHint, InlayHintsOptions, InlayKind},\n+    inlay_hints::{InlayHint, InlayHintsConfig, InlayKind},\n     references::{Declaration, Reference, ReferenceAccess, ReferenceKind, ReferenceSearchResult},\n     runnables::{Runnable, RunnableKind, TestId},\n     source_change::{FileSystemEdit, SourceChange, SourceFileEdit},\n@@ -325,9 +325,9 @@ impl Analysis {\n     pub fn inlay_hints(\n         &self,\n         file_id: FileId,\n-        inlay_hint_opts: &InlayHintsOptions,\n+        config: &InlayHintsConfig,\n     ) -> Cancelable<Vec<InlayHint>> {\n-        self.with_db(|db| inlay_hints::inlay_hints(db, file_id, inlay_hint_opts))\n+        self.with_db(|db| inlay_hints::inlay_hints(db, file_id, config))\n     }\n \n     /// Returns the set of folding ranges.\n@@ -450,9 +450,9 @@ impl Analysis {\n     pub fn completions(\n         &self,\n         position: FilePosition,\n-        options: &CompletionOptions,\n+        config: &CompletionConfig,\n     ) -> Cancelable<Option<Vec<CompletionItem>>> {\n-        self.with_db(|db| completion::completions(db, position, options).map(Into::into))\n+        self.with_db(|db| completion::completions(db, position, config).map(Into::into))\n     }\n \n     /// Computes assists (aka code actions aka intentions) for the given"}, {"sha": "7667873d5f0cf48cf286cd1fa378bbb1f442b7a1", "filename": "crates/rust-analyzer/src/cli/analysis_bench.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/569f47e427e0b9181075291c988446b86c5ba8f9/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/569f47e427e0b9181075291c988446b86c5ba8f9/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs?ref=569f47e427e0b9181075291c988446b86c5ba8f9", "patch": "@@ -12,7 +12,7 @@ use ra_db::{\n     salsa::{Database, Durability},\n     FileId, SourceDatabaseExt,\n };\n-use ra_ide::{Analysis, AnalysisChange, AnalysisHost, CompletionOptions, FilePosition, LineCol};\n+use ra_ide::{Analysis, AnalysisChange, AnalysisHost, CompletionConfig, FilePosition, LineCol};\n \n use crate::cli::{load_cargo::load_cargo, Verbosity};\n \n@@ -102,7 +102,7 @@ pub fn analysis_bench(\n             let file_position = FilePosition { file_id, offset };\n \n             if is_completion {\n-                let options = CompletionOptions::default();\n+                let options = CompletionConfig::default();\n                 let res = do_work(&mut host, file_id, |analysis| {\n                     analysis.completions(file_position, &options)\n                 });"}, {"sha": "e8dc953c38088f5c9f2183aa35379dcd8e9c5a38", "filename": "crates/rust-analyzer/src/conv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/569f47e427e0b9181075291c988446b86c5ba8f9/crates%2Frust-analyzer%2Fsrc%2Fconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/569f47e427e0b9181075291c988446b86c5ba8f9/crates%2Frust-analyzer%2Fsrc%2Fconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconv.rs?ref=569f47e427e0b9181075291c988446b86c5ba8f9", "patch": "@@ -579,7 +579,7 @@ impl TryConvWith<&WorldSnapshot> for (FileId, RangeInfo<Vec<NavigationTarget>>)\n             .into_iter()\n             .map(|nav| (file_id, RangeInfo::new(range, nav)))\n             .try_conv_with_to_vec(world)?;\n-        if world.options.supports_location_link {\n+        if world.config.supports_location_link {\n             Ok(links.into())\n         } else {\n             let locations: Vec<Location> = links"}, {"sha": "c233f72ffe6beca0c9ebf53e521efdc8676a894d", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/569f47e427e0b9181075291c988446b86c5ba8f9/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/569f47e427e0b9181075291c988446b86c5ba8f9/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=569f47e427e0b9181075291c988446b86c5ba8f9", "patch": "@@ -21,8 +21,8 @@ use lsp_types::{\n     WorkDoneProgressBegin, WorkDoneProgressCreateParams, WorkDoneProgressEnd,\n     WorkDoneProgressReport,\n };\n-use ra_cargo_watch::{url_from_path_with_drive_lowercasing, CheckOptions, CheckTask};\n-use ra_ide::{Canceled, FileId, InlayHintsOptions, LibraryData, SourceRootId};\n+use ra_cargo_watch::{url_from_path_with_drive_lowercasing, CheckConfig, CheckTask};\n+use ra_ide::{Canceled, FileId, InlayHintsConfig, LibraryData, SourceRootId};\n use ra_prof::profile;\n use ra_vfs::{VfsFile, VfsTask, Watch};\n use relative_path::RelativePathBuf;\n@@ -38,7 +38,7 @@ use crate::{\n         subscriptions::Subscriptions,\n     },\n     req,\n-    world::{Options, WorldSnapshot, WorldState},\n+    world::{Config, WorldSnapshot, WorldState},\n     Result, ServerConfig,\n };\n use req::ConfigurationParams;\n@@ -81,11 +81,11 @@ fn get_feature_flags(config: &ServerConfig, connection: &Connection) -> FeatureF\n     ff\n }\n \n-fn get_options(\n+fn get_config(\n     config: &ServerConfig,\n     text_document_caps: Option<&TextDocumentClientCapabilities>,\n-) -> Options {\n-    Options {\n+) -> Config {\n+    Config {\n         publish_decorations: config.publish_decorations,\n         supports_location_link: text_document_caps\n             .and_then(|it| it.definition)\n@@ -95,13 +95,13 @@ fn get_options(\n             .and_then(|it| it.folding_range.as_ref())\n             .and_then(|it| it.line_folding_only)\n             .unwrap_or(false),\n-        inlay_hints: InlayHintsOptions {\n+        inlay_hints: InlayHintsConfig {\n             type_hints: config.inlay_hints_type,\n             parameter_hints: config.inlay_hints_parameter,\n             chaining_hints: config.inlay_hints_chaining,\n             max_length: config.inlay_hints_max_length,\n         },\n-        cargo_watch: CheckOptions {\n+        check: CheckConfig {\n             enable: config.cargo_watch_enable,\n             args: config.cargo_watch_args.clone(),\n             command: config.cargo_watch_command.clone(),\n@@ -210,7 +210,7 @@ pub fn main_loop(\n             config.lru_capacity,\n             &globs,\n             Watch(!config.use_client_watching),\n-            get_options(&config, text_document_caps),\n+            get_config(&config, text_document_caps),\n             feature_flags,\n         )\n     };\n@@ -435,7 +435,7 @@ fn loop_turn(\n                                 .to_owned();\n                             world_state.update_configuration(\n                                 new_config.lru_capacity,\n-                                get_options(&new_config, text_document_caps),\n+                                get_config(&new_config, text_document_caps),\n                                 get_feature_flags(&new_config, connection),\n                             );\n                         }\n@@ -498,7 +498,7 @@ fn loop_turn(\n         update_file_notifications_on_threadpool(\n             pool,\n             world_state.snapshot(),\n-            world_state.options.publish_decorations,\n+            world_state.config.publish_decorations,\n             task_sender.clone(),\n             loop_state.subscriptions.subscriptions(),\n         )"}, {"sha": "d5cb5d13720f06e3d6d77211f46f0e60b54e4c7f", "filename": "crates/rust-analyzer/src/main_loop/handlers.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/569f47e427e0b9181075291c988446b86c5ba8f9/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/569f47e427e0b9181075291c988446b86c5ba8f9/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=569f47e427e0b9181075291c988446b86c5ba8f9", "patch": "@@ -19,7 +19,7 @@ use lsp_types::{\n     TextEdit, WorkspaceEdit,\n };\n use ra_ide::{\n-    Assist, AssistId, CompletionOptions, FileId, FilePosition, FileRange, Query, RangeInfo,\n+    Assist, AssistId, CompletionConfig, FileId, FilePosition, FileRange, Query, RangeInfo,\n     Runnable, RunnableKind, SearchScope,\n };\n use ra_prof::profile;\n@@ -425,15 +425,15 @@ pub fn handle_completion(\n         return Ok(None);\n     }\n \n-    let options = CompletionOptions {\n+    let config = CompletionConfig {\n         enable_postfix_completions: world.feature_flags.get(\"completion.enable-postfix\"),\n         add_call_parenthesis: world.feature_flags.get(\"completion.insertion.add-call-parenthesis\"),\n         add_call_argument_snippets: world\n             .feature_flags\n             .get(\"completion.insertion.add-argument-snippets\"),\n     };\n \n-    let items = match world.analysis().completions(position, &options)? {\n+    let items = match world.analysis().completions(position, &config)? {\n         None => return Ok(None),\n         Some(items) => items,\n     };\n@@ -457,7 +457,7 @@ pub fn handle_folding_range(\n     let ctx = FoldConvCtx {\n         text: &text,\n         line_index: &line_index,\n-        line_folding_only: world.options.line_folding_only,\n+        line_folding_only: world.config.line_folding_only,\n     };\n     let res = Some(folds.into_iter().map_conv_with(&ctx).collect());\n     Ok(res)\n@@ -611,7 +611,7 @@ pub fn handle_formatting(\n     let end_position = TextUnit::of_str(&file).conv_with(&file_line_index);\n \n     let mut rustfmt = process::Command::new(\"rustfmt\");\n-    rustfmt.args(&world.options.rustfmt_args);\n+    rustfmt.args(&world.config.rustfmt_args);\n     if let Some(&crate_id) = crate_ids.first() {\n         // Assume all crates are in the same edition\n         let edition = world.analysis().crate_edition(crate_id)?;\n@@ -815,7 +815,7 @@ pub fn handle_code_lens(\n         };\n         lenses.push(lens);\n \n-        if world.options.vscode_lldb {\n+        if world.config.vscode_lldb {\n             if r.args[0] == \"run\" {\n                 r.args[0] = \"build\".into();\n             } else {\n@@ -1028,7 +1028,7 @@ pub fn handle_inlay_hints(\n     let analysis = world.analysis();\n     let line_index = analysis.file_line_index(file_id)?;\n     Ok(analysis\n-        .inlay_hints(file_id, &world.options.inlay_hints)?\n+        .inlay_hints(file_id, &world.config.inlay_hints)?\n         .into_iter()\n         .map_conv_with(&line_index)\n         .collect())"}, {"sha": "a15a7085f2803ede161395dbb777652494bfb279", "filename": "crates/rust-analyzer/src/world.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/569f47e427e0b9181075291c988446b86c5ba8f9/crates%2Frust-analyzer%2Fsrc%2Fworld.rs", "raw_url": "https://github.com/rust-lang/rust/raw/569f47e427e0b9181075291c988446b86c5ba8f9/crates%2Frust-analyzer%2Fsrc%2Fworld.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fworld.rs?ref=569f47e427e0b9181075291c988446b86c5ba8f9", "patch": "@@ -11,9 +11,9 @@ use std::{\n use crossbeam_channel::{unbounded, Receiver};\n use lsp_types::Url;\n use parking_lot::RwLock;\n-use ra_cargo_watch::{url_from_path_with_drive_lowercasing, CheckOptions, CheckWatcher};\n+use ra_cargo_watch::{url_from_path_with_drive_lowercasing, CheckConfig, CheckWatcher};\n use ra_ide::{\n-    Analysis, AnalysisChange, AnalysisHost, CrateGraph, FileId, InlayHintsOptions, LibraryData,\n+    Analysis, AnalysisChange, AnalysisHost, CrateGraph, FileId, InlayHintsConfig, LibraryData,\n     SourceRootId,\n };\n use ra_project_model::{get_rustc_cfg_options, ProcMacroClient, ProjectWorkspace};\n@@ -31,7 +31,7 @@ use crate::{\n use ra_db::ExternSourceId;\n use rustc_hash::{FxHashMap, FxHashSet};\n \n-fn create_watcher(workspaces: &[ProjectWorkspace], options: &Options) -> Option<CheckWatcher> {\n+fn create_watcher(workspaces: &[ProjectWorkspace], config: &Config) -> Option<CheckWatcher> {\n     // FIXME: Figure out the multi-workspace situation\n     workspaces\n         .iter()\n@@ -41,7 +41,7 @@ fn create_watcher(workspaces: &[ProjectWorkspace], options: &Options) -> Option<\n         })\n         .map(|cargo| {\n             let cargo_project_root = cargo.workspace_root().to_path_buf();\n-            Some(CheckWatcher::new(&options.cargo_watch, cargo_project_root))\n+            Some(CheckWatcher::new(config.check.clone(), cargo_project_root))\n         })\n         .unwrap_or_else(|| {\n             log::warn!(\"Cargo check watching only supported for cargo workspaces, disabling\");\n@@ -50,13 +50,13 @@ fn create_watcher(workspaces: &[ProjectWorkspace], options: &Options) -> Option<\n }\n \n #[derive(Debug, Clone)]\n-pub struct Options {\n+pub struct Config {\n     pub publish_decorations: bool,\n     pub supports_location_link: bool,\n     pub line_folding_only: bool,\n-    pub inlay_hints: InlayHintsOptions,\n+    pub inlay_hints: InlayHintsConfig,\n     pub rustfmt_args: Vec<String>,\n-    pub cargo_watch: CheckOptions,\n+    pub check: CheckConfig,\n     pub vscode_lldb: bool,\n }\n \n@@ -67,7 +67,7 @@ pub struct Options {\n /// incremental salsa database.\n #[derive(Debug)]\n pub struct WorldState {\n-    pub options: Options,\n+    pub config: Config,\n     pub feature_flags: Arc<FeatureFlags>,\n     pub roots: Vec<PathBuf>,\n     pub workspaces: Arc<Vec<ProjectWorkspace>>,\n@@ -81,7 +81,7 @@ pub struct WorldState {\n \n /// An immutable snapshot of the world's state at a point in time.\n pub struct WorldSnapshot {\n-    pub options: Options,\n+    pub config: Config,\n     pub feature_flags: Arc<FeatureFlags>,\n     pub workspaces: Arc<Vec<ProjectWorkspace>>,\n     pub analysis: Analysis,\n@@ -97,7 +97,7 @@ impl WorldState {\n         lru_capacity: Option<usize>,\n         exclude_globs: &[Glob],\n         watch: Watch,\n-        options: Options,\n+        config: Config,\n         feature_flags: FeatureFlags,\n     ) -> WorldState {\n         let mut change = AnalysisChange::new();\n@@ -185,12 +185,12 @@ impl WorldState {\n             });\n         change.set_crate_graph(crate_graph);\n \n-        let check_watcher = create_watcher(&workspaces, &options);\n+        let check_watcher = create_watcher(&workspaces, &config);\n \n         let mut analysis_host = AnalysisHost::new(lru_capacity);\n         analysis_host.apply_change(change);\n         WorldState {\n-            options,\n+            config: config,\n             feature_flags: Arc::new(feature_flags),\n             roots: folder_roots,\n             workspaces: Arc::new(workspaces),\n@@ -206,13 +206,13 @@ impl WorldState {\n     pub fn update_configuration(\n         &mut self,\n         lru_capacity: Option<usize>,\n-        options: Options,\n+        config: Config,\n         feature_flags: FeatureFlags,\n     ) {\n         self.feature_flags = Arc::new(feature_flags);\n         self.analysis_host.update_lru_capacity(lru_capacity);\n-        self.check_watcher = create_watcher(&self.workspaces, &options);\n-        self.options = options;\n+        self.check_watcher = create_watcher(&self.workspaces, &config);\n+        self.config = config;\n     }\n \n     /// Returns a vec of libraries\n@@ -268,7 +268,7 @@ impl WorldState {\n \n     pub fn snapshot(&self) -> WorldSnapshot {\n         WorldSnapshot {\n-            options: self.options.clone(),\n+            config: self.config.clone(),\n             feature_flags: Arc::clone(&self.feature_flags),\n             workspaces: Arc::clone(&self.workspaces),\n             analysis: self.analysis_host.analysis(),"}]}