{"sha": "98e8c2ef21f6aab3dd3d4d328a1c8baf1f074ee4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4ZThjMmVmMjFmNmFhYjNkZDNkNGQzMjhhMWM4YmFmMWYwNzRlZTQ=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-11-25T01:15:54Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-11-25T01:17:42Z"}, "message": "rustc: Parse type-parametric tags", "tree": {"sha": "d787591f3025c242b3dade19d8a1b2297bd243f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d787591f3025c242b3dade19d8a1b2297bd243f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98e8c2ef21f6aab3dd3d4d328a1c8baf1f074ee4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98e8c2ef21f6aab3dd3d4d328a1c8baf1f074ee4", "html_url": "https://github.com/rust-lang/rust/commit/98e8c2ef21f6aab3dd3d4d328a1c8baf1f074ee4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98e8c2ef21f6aab3dd3d4d328a1c8baf1f074ee4/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f809375b163bb108d9193f456f44ca663874380b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f809375b163bb108d9193f456f44ca663874380b", "html_url": "https://github.com/rust-lang/rust/commit/f809375b163bb108d9193f456f44ca663874380b"}], "stats": {"total": 34, "additions": 21, "deletions": 13}, "files": [{"sha": "800d979418beb4f8c3ad037f45fcba6975eff4d4", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98e8c2ef21f6aab3dd3d4d328a1c8baf1f074ee4/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98e8c2ef21f6aab3dd3d4d328a1c8baf1f074ee4/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=98e8c2ef21f6aab3dd3d4d328a1c8baf1f074ee4", "patch": "@@ -171,7 +171,7 @@ tag item_ {\n     item_fn(ident, _fn, vec[ty_param], def_id, ann);\n     item_mod(ident, _mod, def_id);\n     item_ty(ident, @ty, def_id, ann);\n-    item_tag(ident, vec[variant], def_id);\n+    item_tag(ident, vec[variant], vec[ty_param], def_id);\n }\n \n "}, {"sha": "3c640f4a8622e8e11573375a42b1f0a503bfa94a", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/98e8c2ef21f6aab3dd3d4d328a1c8baf1f074ee4/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98e8c2ef21f6aab3dd3d4d328a1c8baf1f074ee4/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=98e8c2ef21f6aab3dd3d4d328a1c8baf1f074ee4", "patch": "@@ -1039,17 +1039,21 @@ impure fn parse_block(parser p) -> ast.block {\n     ret spanned(stmts.span, stmts.span, b);\n }\n \n-impure fn parse_item_fn(parser p) -> tup(ast.ident, @ast.item) {\n-    auto lo = p.get_span();\n-    expect(p, token.FN);\n-    auto id = parse_ident(p);\n-\n+impure fn parse_ty_params(parser p) -> vec[ast.ty_param] {\n     let vec[ast.ty_param] ty_params = vec();\n     if (p.peek() == token.LBRACKET) {\n-        auto pg = parse_ident;  // FIXME: pass as lval directly\n+        auto f = parse_ident;   // FIXME: pass as lval directly\n         ty_params = parse_seq[ast.ty_param](token.LBRACKET, token.RBRACKET,\n-                                            some(token.COMMA), pg, p).node;\n+                                            some(token.COMMA), f, p).node;\n     }\n+    ret ty_params;\n+}\n+\n+impure fn parse_item_fn(parser p) -> tup(ast.ident, @ast.item) {\n+    auto lo = p.get_span();\n+    expect(p, token.FN);\n+    auto id = parse_ident(p);\n+    auto ty_params = parse_ty_params(p);\n \n     auto pf = parse_arg;\n     let util.common.spanned[vec[ast.arg]] inputs =\n@@ -1120,6 +1124,7 @@ impure fn parse_item_tag(parser p) -> tup(ast.ident, @ast.item) {\n     auto lo = p.get_span();\n     expect(p, token.TAG);\n     auto id = parse_ident(p);\n+    auto ty_params = parse_ty_params(p);\n \n     let vec[ast.variant] variants = vec();\n     expect(p, token.LBRACE);\n@@ -1158,7 +1163,7 @@ impure fn parse_item_tag(parser p) -> tup(ast.ident, @ast.item) {\n     p.bump();\n \n     auto hi = p.get_span();\n-    auto item = ast.item_tag(id, variants, p.next_def_id());\n+    auto item = ast.item_tag(id, variants, ty_params, p.next_def_id());\n     ret tup(id, @spanned(lo, hi, item));\n }\n "}, {"sha": "8a8f65eb2db1512bffb907db13615f1de59e011d", "filename": "src/comp/middle/fold.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/98e8c2ef21f6aab3dd3d4d328a1c8baf1f074ee4/src%2Fcomp%2Fmiddle%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98e8c2ef21f6aab3dd3d4d328a1c8baf1f074ee4/src%2Fcomp%2Fmiddle%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ffold.rs?ref=98e8c2ef21f6aab3dd3d4d328a1c8baf1f074ee4", "patch": "@@ -170,6 +170,7 @@ type ast_fold[ENV] =\n \n      (fn(&ENV e, &span sp, ident ident,\n          vec[ast.variant] variants,\n+         vec[ast.ty_param] ty_params,\n          def_id id) -> @item)                     fold_item_tag,\n \n      // Additional nodes.\n@@ -554,7 +555,7 @@ fn fold_item[ENV](&ENV env, ast_fold[ENV] fld, @item i) -> @item {\n             ret fld.fold_item_ty(env_, i.span, ident, ty_, id, ann);\n         }\n \n-        case (ast.item_tag(?ident, ?variants, ?id)) {\n+        case (ast.item_tag(?ident, ?variants, ?ty_params, ?id)) {\n             let vec[ast.variant] new_variants = vec();\n             for (ast.variant v in variants) {\n                 let vec[@ast.ty] new_args = vec();\n@@ -563,7 +564,8 @@ fn fold_item[ENV](&ENV env, ast_fold[ENV] fld, @item i) -> @item {\n                 }\n                 new_variants += rec(name=v.name, args=new_args);\n             }\n-            ret fld.fold_item_tag(env_, i.span, ident, new_variants, id);\n+            ret fld.fold_item_tag(env_, i.span, ident, new_variants,\n+                                  ty_params, id);\n         }\n     }\n \n@@ -817,8 +819,9 @@ fn identity_fold_item_ty[ENV](&ENV e, &span sp, ident i,\n \n fn identity_fold_item_tag[ENV](&ENV e, &span sp, ident i,\n                                vec[ast.variant] variants,\n+                               vec[ast.ty_param] ty_params,\n                                def_id id) -> @item {\n-    ret @respan(sp, ast.item_tag(i, variants, id));\n+    ret @respan(sp, ast.item_tag(i, variants, ty_params, id));\n }\n \n \n@@ -939,7 +942,7 @@ fn new_identity_fold[ENV]() -> ast_fold[ENV] {\n          fold_item_fn   = bind identity_fold_item_fn[ENV](_,_,_,_,_,_,_),\n          fold_item_mod  = bind identity_fold_item_mod[ENV](_,_,_,_,_),\n          fold_item_ty   = bind identity_fold_item_ty[ENV](_,_,_,_,_,_),\n-         fold_item_tag  = bind identity_fold_item_tag[ENV](_,_,_,_,_),\n+         fold_item_tag  = bind identity_fold_item_tag[ENV](_,_,_,_,_,_),\n \n          fold_block = bind identity_fold_block[ENV](_,_,_),\n          fold_fn = bind identity_fold_fn[ENV](_,_,_,_),"}]}