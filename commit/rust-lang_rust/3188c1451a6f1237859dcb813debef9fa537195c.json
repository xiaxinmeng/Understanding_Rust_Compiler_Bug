{"sha": "3188c1451a6f1237859dcb813debef9fa537195c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxODhjMTQ1MWE2ZjEyMzc4NTlkY2I4MTNkZWJlZjlmYTUzNzE5NWM=", "commit": {"author": {"name": "Jeremy Kolb", "email": "kjeremy@gmail.com", "date": "2019-11-10T18:59:39Z"}, "committer": {"name": "Jeremy Kolb", "email": "kjeremy@gmail.com", "date": "2019-11-10T18:59:39Z"}, "message": "Hover for builtins", "tree": {"sha": "205cf0c3d2ab47a32b139b61ec34ca33e2afb782", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/205cf0c3d2ab47a32b139b61ec34ca33e2afb782"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3188c1451a6f1237859dcb813debef9fa537195c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3188c1451a6f1237859dcb813debef9fa537195c", "html_url": "https://github.com/rust-lang/rust/commit/3188c1451a6f1237859dcb813debef9fa537195c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3188c1451a6f1237859dcb813debef9fa537195c/comments", "author": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d786ea221b27fbdf7c7f7beea0290db448e0611", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d786ea221b27fbdf7c7f7beea0290db448e0611", "html_url": "https://github.com/rust-lang/rust/commit/9d786ea221b27fbdf7c7f7beea0290db448e0611"}], "stats": {"total": 50, "additions": 31, "deletions": 19}, "files": [{"sha": "244c6581454b784b9d0c98715a8690c404008c9f", "filename": "crates/ra_ide_api/src/hover.rs", "status": "modified", "additions": 31, "deletions": 19, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/3188c1451a6f1237859dcb813debef9fa537195c/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3188c1451a6f1237859dcb813debef9fa537195c/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fhover.rs?ref=3188c1451a6f1237859dcb813debef9fa537195c", "patch": "@@ -1,6 +1,6 @@\n //! FIXME: write short doc here\n \n-use hir::{Adt, HasSource, HirDisplay};\n+use hir::{Adt, BuiltinType, HasSource, HirDisplay};\n use ra_db::SourceDatabase;\n use ra_syntax::{\n     algo::{ancestors_at_offset, find_covering_element, find_node_at_offset},\n@@ -117,27 +117,27 @@ pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeIn\n                 hir::AssocItem::Const(it) => from_def_source(db, it),\n                 hir::AssocItem::TypeAlias(it) => from_def_source(db, it),\n             }),\n-            Some(Def(it)) => {\n-                match it {\n-                    hir::ModuleDef::Module(it) => {\n-                        if let hir::ModuleSource::Module(it) = it.definition_source(db).ast {\n-                            res.extend(hover_text(it.doc_comment_text(), it.short_label()))\n-                        }\n+            Some(Def(it)) => match it {\n+                hir::ModuleDef::Module(it) => {\n+                    if let hir::ModuleSource::Module(it) = it.definition_source(db).ast {\n+                        res.extend(hover_text(it.doc_comment_text(), it.short_label()))\n                     }\n-                    hir::ModuleDef::Function(it) => res.extend(from_def_source(db, it)),\n-                    hir::ModuleDef::Adt(Adt::Struct(it)) => res.extend(from_def_source(db, it)),\n-                    hir::ModuleDef::Adt(Adt::Union(it)) => res.extend(from_def_source(db, it)),\n-                    hir::ModuleDef::Adt(Adt::Enum(it)) => res.extend(from_def_source(db, it)),\n-                    hir::ModuleDef::EnumVariant(it) => res.extend(from_def_source(db, it)),\n-                    hir::ModuleDef::Const(it) => res.extend(from_def_source(db, it)),\n-                    hir::ModuleDef::Static(it) => res.extend(from_def_source(db, it)),\n-                    hir::ModuleDef::Trait(it) => res.extend(from_def_source(db, it)),\n-                    hir::ModuleDef::TypeAlias(it) => res.extend(from_def_source(db, it)),\n-                    hir::ModuleDef::BuiltinType(_) => {\n-                        // FIXME: hover for builtin Type ?\n+                }\n+                hir::ModuleDef::Function(it) => res.extend(from_def_source(db, it)),\n+                hir::ModuleDef::Adt(Adt::Struct(it)) => res.extend(from_def_source(db, it)),\n+                hir::ModuleDef::Adt(Adt::Union(it)) => res.extend(from_def_source(db, it)),\n+                hir::ModuleDef::Adt(Adt::Enum(it)) => res.extend(from_def_source(db, it)),\n+                hir::ModuleDef::EnumVariant(it) => res.extend(from_def_source(db, it)),\n+                hir::ModuleDef::Const(it) => res.extend(from_def_source(db, it)),\n+                hir::ModuleDef::Static(it) => res.extend(from_def_source(db, it)),\n+                hir::ModuleDef::Trait(it) => res.extend(from_def_source(db, it)),\n+                hir::ModuleDef::TypeAlias(it) => res.extend(from_def_source(db, it)),\n+                hir::ModuleDef::BuiltinType(it) => {\n+                    if let Some(b) = BuiltinType::ALL.iter().find(|(_, ty)| *ty == it) {\n+                        res.extend(Some(b.0.to_string()))\n                     }\n                 }\n-            }\n+            },\n             Some(SelfType(ty)) => {\n                 if let Some((adt_def, _)) = ty.as_adt() {\n                     res.extend(match adt_def {\n@@ -722,4 +722,16 @@ fn func(foo: i32) { if true { <|>foo; }; }\n         assert_eq!(trim_markup_opt(hover.info.first()), Some(\"macro_rules! foo\"));\n         assert_eq!(hover.info.is_exact(), true);\n     }\n+\n+    #[test]\n+    fn test_hover_tuple_field() {\n+        let (analysis, position) = single_file_with_position(\n+            \"\n+            struct TS(String, i32<|>);\n+            \",\n+        );\n+        let hover = analysis.hover(position).unwrap().unwrap();\n+        assert_eq!(trim_markup_opt(hover.info.first()), Some(\"i32\"));\n+        assert_eq!(hover.info.is_exact(), true);\n+    }\n }"}]}