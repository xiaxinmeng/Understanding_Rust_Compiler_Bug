{"sha": "de366b5218974e79c4961e26f063e5fb51039745", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlMzY2YjUyMTg5NzRlNzljNDk2MWUyNmYwNjNlNWZiNTEwMzk3NDU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-02-18T20:46:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-02-18T20:46:28Z"}, "message": "Auto merge of #31600 - nagisa:mir-msvc-seh-2, r=nikomatsakis\n\nr? @alexcrichton for the translator changes and @nikomatsakis for the no-landing-pads pass.", "tree": {"sha": "e48c9fca2a7558e96e8ff7700c755ba425889c82", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e48c9fca2a7558e96e8ff7700c755ba425889c82"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de366b5218974e79c4961e26f063e5fb51039745", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de366b5218974e79c4961e26f063e5fb51039745", "html_url": "https://github.com/rust-lang/rust/commit/de366b5218974e79c4961e26f063e5fb51039745", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de366b5218974e79c4961e26f063e5fb51039745/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b076c2daa36d80c103812c1775cf099ea8ef0bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b076c2daa36d80c103812c1775cf099ea8ef0bf", "html_url": "https://github.com/rust-lang/rust/commit/6b076c2daa36d80c103812c1775cf099ea8ef0bf"}, {"sha": "1752615591ee99939a1c41a638c89d5add295317", "url": "https://api.github.com/repos/rust-lang/rust/commits/1752615591ee99939a1c41a638c89d5add295317", "html_url": "https://github.com/rust-lang/rust/commit/1752615591ee99939a1c41a638c89d5add295317"}], "stats": {"total": 171, "additions": 135, "deletions": 36}, "files": [{"sha": "5b887db7ec08e2e503b313a7377ea8c0ed8f13a8", "filename": "src/librustc_mir/mir_map.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/de366b5218974e79c4961e26f063e5fb51039745/src%2Flibrustc_mir%2Fmir_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de366b5218974e79c4961e26f063e5fb51039745/src%2Flibrustc_mir%2Fmir_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmir_map.rs?ref=de366b5218974e79c4961e26f063e5fb51039745", "patch": "@@ -22,7 +22,7 @@ extern crate rustc_front;\n use build;\n use graphviz;\n use pretty;\n-use transform::simplify_cfg;\n+use transform::{simplify_cfg, no_landing_pads};\n use rustc::dep_graph::DepNode;\n use rustc::mir::repr::Mir;\n use hair::cx::Cx;\n@@ -148,6 +148,7 @@ impl<'a, 'm, 'tcx> Visitor<'tcx> for InnerDump<'a,'m,'tcx> {\n \n         match build_mir(Cx::new(&infcx), implicit_arg_tys, id, span, decl, body) {\n             Ok(mut mir) => {\n+                no_landing_pads::NoLandingPads.run_on_mir(&mut mir, self.tcx);\n                 simplify_cfg::SimplifyCfg::new().run_on_mir(&mut mir, self.tcx);\n \n                 let meta_item_list = self.attr"}, {"sha": "017cf3607161aff1061dcdcdce10b39b1046b292", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/de366b5218974e79c4961e26f063e5fb51039745/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de366b5218974e79c4961e26f063e5fb51039745/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=de366b5218974e79c4961e26f063e5fb51039745", "patch": "@@ -10,4 +10,5 @@\n \n pub mod simplify_cfg;\n pub mod erase_regions;\n+pub mod no_landing_pads;\n mod util;"}, {"sha": "d0ea9f10f2e29aecd917b63ec7dadb758fee3de9", "filename": "src/librustc_mir/transform/no_landing_pads.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/de366b5218974e79c4961e26f063e5fb51039745/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de366b5218974e79c4961e26f063e5fb51039745/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs?ref=de366b5218974e79c4961e26f063e5fb51039745", "patch": "@@ -0,0 +1,49 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! This pass removes the unwind branch of all the terminators when the no-landing-pads option is\n+//! specified.\n+\n+use rustc::middle::ty;\n+use rustc::mir::repr::*;\n+use rustc::mir::visit::MutVisitor;\n+use rustc::mir::transform::MirPass;\n+\n+pub struct NoLandingPads;\n+\n+impl<'tcx> MutVisitor<'tcx> for NoLandingPads {\n+    fn visit_terminator(&mut self, bb: BasicBlock, terminator: &mut Terminator<'tcx>) {\n+        match *terminator {\n+            Terminator::Goto { .. } |\n+            Terminator::Resume |\n+            Terminator::Return |\n+            Terminator::If { .. } |\n+            Terminator::Switch { .. } |\n+            Terminator::SwitchInt { .. } => {\n+                /* nothing to do */\n+            },\n+            Terminator::Drop { ref mut unwind, .. } => {\n+                unwind.take();\n+            },\n+            Terminator::Call { ref mut cleanup, .. } => {\n+                cleanup.take();\n+            },\n+        }\n+        self.super_terminator(bb, terminator);\n+    }\n+}\n+\n+impl MirPass for NoLandingPads {\n+    fn run_on_mir<'tcx>(&mut self, mir: &mut Mir<'tcx>, tcx: &ty::ctxt<'tcx>) {\n+        if tcx.sess.no_landing_pads() {\n+            self.visit_mir(mir);\n+        }\n+    }\n+}"}, {"sha": "bdc0f8539d600a5a8ed9fef9f0408dd08a451080", "filename": "src/librustc_trans/trans/common.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/de366b5218974e79c4961e26f063e5fb51039745/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de366b5218974e79c4961e26f063e5fb51039745/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs?ref=de366b5218974e79c4961e26f063e5fb51039745", "patch": "@@ -767,6 +767,10 @@ impl<'blk, 'tcx> BlockAndBuilder<'blk, 'tcx> {\n     {\n         self.bcx.monomorphize(value)\n     }\n+\n+    pub fn set_lpad(&self, lpad: Option<LandingPad>) {\n+        self.bcx.lpad.set(lpad.map(|p| &*self.fcx().lpad_arena.alloc(p)))\n+    }\n }\n \n impl<'blk, 'tcx> Deref for BlockAndBuilder<'blk, 'tcx> {"}, {"sha": "44ff974dc7fc21f72709c7fa741356c2d60ece8b", "filename": "src/librustc_trans/trans/mir/block.rs", "status": "modified", "additions": 79, "deletions": 31, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/de366b5218974e79c4961e26f063e5fb51039745/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de366b5218974e79c4961e26f063e5fb51039745/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fblock.rs?ref=de366b5218974e79c4961e26f063e5fb51039745", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use llvm::{BasicBlockRef, ValueRef};\n+use llvm::{BasicBlockRef, ValueRef, OperandBundleDef};\n use rustc::middle::ty;\n use rustc::mir::repr as mir;\n use syntax::abi::Abi;\n@@ -34,15 +34,40 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n         let mut bcx = self.bcx(bb);\n         let data = self.mir.basic_block_data(bb);\n \n+        // MSVC SEH bits\n+        let (cleanup_pad, cleanup_bundle) = if let Some((cp, cb)) = self.make_cleanup_pad(bb) {\n+            (Some(cp), Some(cb))\n+        } else {\n+            (None, None)\n+        };\n+        let funclet_br = |bcx: BlockAndBuilder, llbb: BasicBlockRef| if let Some(cp) = cleanup_pad {\n+            bcx.cleanup_ret(cp, Some(llbb));\n+        } else {\n+            bcx.br(llbb);\n+        };\n+\n         for statement in &data.statements {\n             bcx = self.trans_statement(bcx, statement);\n         }\n \n         debug!(\"trans_block: terminator: {:?}\", data.terminator());\n \n         match *data.terminator() {\n+            mir::Terminator::Resume => {\n+                if let Some(cleanup_pad) = cleanup_pad {\n+                    bcx.cleanup_ret(cleanup_pad, None);\n+                } else {\n+                    let ps = self.get_personality_slot(&bcx);\n+                    let lp = bcx.load(ps);\n+                    bcx.with_block(|bcx| {\n+                        base::call_lifetime_end(bcx, ps);\n+                        base::trans_unwind_resume(bcx, lp);\n+                    });\n+                }\n+            }\n+\n             mir::Terminator::Goto { target } => {\n-                bcx.br(self.llblock(target));\n+                funclet_br(bcx, self.llblock(target));\n             }\n \n             mir::Terminator::If { ref cond, targets: (true_bb, false_bb) } => {\n@@ -85,19 +110,10 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                 }\n             }\n \n-            mir::Terminator::Resume => {\n-                let ps = self.get_personality_slot(&bcx);\n-                let lp = bcx.load(ps);\n-                bcx.with_block(|bcx| {\n-                    base::call_lifetime_end(bcx, ps);\n-                    base::trans_unwind_resume(bcx, lp);\n-                });\n-            }\n-\n             mir::Terminator::Return => {\n                 let return_ty = bcx.monomorphize(&self.mir.return_ty);\n                 bcx.with_block(|bcx| {\n-                    base::build_return_block(bcx.fcx, bcx, return_ty, DebugLoc::None);\n+                    base::build_return_block(self.fcx, bcx, return_ty, DebugLoc::None);\n                 })\n             }\n \n@@ -106,7 +122,7 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                 let ty = lvalue.ty.to_ty(bcx.tcx());\n                 // Double check for necessity to drop\n                 if !glue::type_needs_drop(bcx.tcx(), ty) {\n-                    bcx.br(self.llblock(target));\n+                    funclet_br(bcx, self.llblock(target));\n                     return;\n                 }\n                 let drop_fn = glue::get_drop_glue(bcx.ccx(), ty);\n@@ -123,11 +139,11 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                                &[llvalue],\n                                self.llblock(target),\n                                unwind.llbb(),\n-                               None,\n+                               cleanup_bundle.as_ref(),\n                                None);\n                 } else {\n-                    bcx.call(drop_fn, &[llvalue], None, None);\n-                    bcx.br(self.llblock(target));\n+                    bcx.call(drop_fn, &[llvalue], cleanup_bundle.as_ref(), None);\n+                    funclet_br(bcx, self.llblock(target));\n                 }\n             }\n \n@@ -180,34 +196,33 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                     }\n                 }\n \n-                let avoid_invoke = bcx.with_block(|bcx| base::avoid_invoke(bcx));\n                 // Many different ways to call a function handled here\n-                match (is_foreign, avoid_invoke, cleanup, destination) {\n+                match (is_foreign, cleanup, destination) {\n                     // The two cases below are the only ones to use LLVM\u2019s `invoke`.\n-                    (false, false, &Some(cleanup), &None) => {\n+                    (false, &Some(cleanup), &None) => {\n                         let cleanup = self.bcx(cleanup);\n                         let landingpad = self.make_landing_pad(cleanup);\n                         let unreachable_blk = self.unreachable_block();\n                         bcx.invoke(callee.immediate(),\n                                    &llargs[..],\n                                    unreachable_blk.llbb,\n                                    landingpad.llbb(),\n-                                   None,\n+                                   cleanup_bundle.as_ref(),\n                                    Some(attrs));\n                     },\n-                    (false, false, &Some(cleanup), &Some((_, success))) => {\n+                    (false, &Some(cleanup), &Some((_, success))) => {\n                         let cleanup = self.bcx(cleanup);\n                         let landingpad = self.make_landing_pad(cleanup);\n                         let (target, postinvoke) = if must_copy_dest {\n-                            (bcx.fcx().new_block(\"\", None).build(), Some(self.bcx(success)))\n+                            (self.fcx.new_block(\"\", None).build(), Some(self.bcx(success)))\n                         } else {\n                             (self.bcx(success), None)\n                         };\n                         let invokeret = bcx.invoke(callee.immediate(),\n                                                    &llargs[..],\n                                                    target.llbb(),\n                                                    landingpad.llbb(),\n-                                                   None,\n+                                                   cleanup_bundle.as_ref(),\n                                                    Some(attrs));\n                         if let Some(postinvoketarget) = postinvoke {\n                             // We translate the copy into a temporary block. The temporary block is\n@@ -242,14 +257,17 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                             target.br(postinvoketarget.llbb());\n                         }\n                     },\n-                    (false, _, _, &None) => {\n-                        bcx.call(callee.immediate(), &llargs[..], None, Some(attrs));\n+                    (false, _, &None) => {\n+                        bcx.call(callee.immediate(),\n+                                 &llargs[..],\n+                                 cleanup_bundle.as_ref(),\n+                                 Some(attrs));\n                         bcx.unreachable();\n                     }\n-                    (false, _, _, &Some((_, target))) => {\n+                    (false, _, &Some((_, target))) => {\n                         let llret = bcx.call(callee.immediate(),\n                                              &llargs[..],\n-                                             None,\n+                                             cleanup_bundle.as_ref(),\n                                              Some(attrs));\n                         if must_copy_dest {\n                             let (ret_dest, ret_ty) = ret_dest_ty\n@@ -258,10 +276,10 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                                 base::store_ty(bcx, llret, ret_dest.llval, ret_ty);\n                             });\n                         }\n-                        bcx.br(self.llblock(target));\n+                        funclet_br(bcx, self.llblock(target));\n                     }\n                     // Foreign functions\n-                    (true, _, _, destination) => {\n+                    (true, _, destination) => {\n                         let (dest, _) = ret_dest_ty\n                             .expect(\"return destination is not set\");\n                         bcx = bcx.map_block(|bcx| {\n@@ -274,7 +292,7 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                                                        debugloc)\n                         });\n                         if let Some((_, target)) = *destination {\n-                            bcx.br(self.llblock(target));\n+                            funclet_br(bcx, self.llblock(target));\n                         }\n                     },\n                 }\n@@ -297,11 +315,16 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n         }\n     }\n \n+    /// Create a landingpad wrapper around the given Block.\n+    ///\n+    /// No-op in MSVC SEH scheme.\n     fn make_landing_pad(&mut self,\n                         cleanup: BlockAndBuilder<'bcx, 'tcx>)\n                         -> BlockAndBuilder<'bcx, 'tcx>\n     {\n-        // FIXME(#30941) this doesn't handle msvc-style exceptions\n+        if base::wants_msvc_seh(cleanup.sess()) {\n+            return cleanup;\n+        }\n         let bcx = self.fcx.new_block(\"cleanup\", None).build();\n         let ccx = bcx.ccx();\n         let llpersonality = self.fcx.eh_personality();\n@@ -314,6 +337,31 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n         bcx\n     }\n \n+    /// Create prologue cleanuppad instruction under MSVC SEH handling scheme.\n+    ///\n+    /// Also handles setting some state for the original trans and creating an operand bundle for\n+    /// function calls.\n+    fn make_cleanup_pad(&mut self, bb: mir::BasicBlock) -> Option<(ValueRef, OperandBundleDef)> {\n+        let bcx = self.bcx(bb);\n+        let data = self.mir.basic_block_data(bb);\n+        let use_funclets = base::wants_msvc_seh(bcx.sess()) && data.is_cleanup;\n+        let cleanup_pad = if use_funclets {\n+            bcx.set_personality_fn(self.fcx.eh_personality());\n+            Some(bcx.cleanup_pad(None, &[]))\n+        } else {\n+            None\n+        };\n+        // Set the landingpad global-state for old translator, so it knows about the SEH used.\n+        bcx.set_lpad(if let Some(cleanup_pad) = cleanup_pad {\n+            Some(common::LandingPad::msvc(cleanup_pad))\n+        } else if data.is_cleanup {\n+            Some(common::LandingPad::gnu())\n+        } else {\n+            None\n+        });\n+        cleanup_pad.map(|f| (f, OperandBundleDef::new(\"funclet\", &[f])))\n+    }\n+\n     fn unreachable_block(&mut self) -> Block<'bcx, 'tcx> {\n         self.unreachable_block.unwrap_or_else(|| {\n             let bl = self.fcx.new_block(\"unreachable\", None);"}, {"sha": "1a4330523babe968b889fe6e5721278f8fd675c9", "filename": "src/test/run-fail/mir_drop_panics.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/de366b5218974e79c4961e26f063e5fb51039745/src%2Ftest%2Frun-fail%2Fmir_drop_panics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de366b5218974e79c4961e26f063e5fb51039745/src%2Ftest%2Frun-fail%2Fmir_drop_panics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmir_drop_panics.rs?ref=de366b5218974e79c4961e26f063e5fb51039745", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n #![feature(rustc_attrs)]\n \n-// ignore-msvc: FIXME(#30941)\n // error-pattern:panic 1\n // error-pattern:drop 2\n use std::io::{self, Write};"}, {"sha": "5927d802b4560a913a38ddc797ec233e98be6b51", "filename": "src/test/run-fail/mir_trans_calls_converging_drops.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/de366b5218974e79c4961e26f063e5fb51039745/src%2Ftest%2Frun-fail%2Fmir_trans_calls_converging_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de366b5218974e79c4961e26f063e5fb51039745/src%2Ftest%2Frun-fail%2Fmir_trans_calls_converging_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmir_trans_calls_converging_drops.rs?ref=de366b5218974e79c4961e26f063e5fb51039745", "patch": "@@ -10,7 +10,6 @@\n \n #![feature(rustc_attrs)]\n \n-// ignore-msvc: FIXME(#30941)\n // error-pattern:converging_fn called\n // error-pattern:0 dropped\n // error-pattern:exit"}, {"sha": "96a46f47eb565ed2b70239e77446970fe0e63111", "filename": "src/test/run-fail/mir_trans_calls_converging_drops_2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/de366b5218974e79c4961e26f063e5fb51039745/src%2Ftest%2Frun-fail%2Fmir_trans_calls_converging_drops_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de366b5218974e79c4961e26f063e5fb51039745/src%2Ftest%2Frun-fail%2Fmir_trans_calls_converging_drops_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmir_trans_calls_converging_drops_2.rs?ref=de366b5218974e79c4961e26f063e5fb51039745", "patch": "@@ -10,7 +10,6 @@\n \n #![feature(rustc_attrs)]\n \n-// ignore-msvc: FIXME(#30941)\n // error-pattern:complex called\n // error-pattern:dropped\n // error-pattern:exit"}, {"sha": "89b53b18f0619decc280777b09a3a880542b0b97", "filename": "src/test/run-fail/mir_trans_calls_diverging_drops.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/de366b5218974e79c4961e26f063e5fb51039745/src%2Ftest%2Frun-fail%2Fmir_trans_calls_diverging_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de366b5218974e79c4961e26f063e5fb51039745/src%2Ftest%2Frun-fail%2Fmir_trans_calls_diverging_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmir_trans_calls_diverging_drops.rs?ref=de366b5218974e79c4961e26f063e5fb51039745", "patch": "@@ -10,7 +10,6 @@\n \n #![feature(rustc_attrs)]\n \n-// ignore-msvc: FIXME(#30941)\n // error-pattern:diverging_fn called\n // error-pattern:0 dropped\n "}]}