{"sha": "bb8674837a9cc5225020e07fc3f164762bb4c11c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiODY3NDgzN2E5Y2M1MjI1MDIwZTA3ZmMzZjE2NDc2MmJiNGMxMWM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-06-10T00:48:35Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-06-10T00:48:35Z"}, "message": "Auto merge of #73190 - Dylan-DPC:rollup-9wbyh4y, r=Dylan-DPC\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #72417 (Remove `RawVec::reserve_in_place`.)\n - #73098 (Add Item::is_fake for rustdoc)\n - #73122 (Resolve E0584 conflict)\n - #73123 (Clean up E0647 explanation)\n - #73133 (Enforce unwind invariants)\n - #73148 (Fix a typo (size of the size))\n - #73149 (typo: awailable -> available)\n - #73161 (Add mailmap entry)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "f94c254be282b464db805e6fa9042266d66c47b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f94c254be282b464db805e6fa9042266d66c47b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb8674837a9cc5225020e07fc3f164762bb4c11c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb8674837a9cc5225020e07fc3f164762bb4c11c", "html_url": "https://github.com/rust-lang/rust/commit/bb8674837a9cc5225020e07fc3f164762bb4c11c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb8674837a9cc5225020e07fc3f164762bb4c11c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "283522400b5c13dfdf2b7e608e63a70ee8e3d7af", "url": "https://api.github.com/repos/rust-lang/rust/commits/283522400b5c13dfdf2b7e608e63a70ee8e3d7af", "html_url": "https://github.com/rust-lang/rust/commit/283522400b5c13dfdf2b7e608e63a70ee8e3d7af"}, {"sha": "74380d712d76c8bf48493f751ffda745bf78ecbc", "url": "https://api.github.com/repos/rust-lang/rust/commits/74380d712d76c8bf48493f751ffda745bf78ecbc", "html_url": "https://github.com/rust-lang/rust/commit/74380d712d76c8bf48493f751ffda745bf78ecbc"}], "stats": {"total": 340, "additions": 172, "deletions": 168}, "files": [{"sha": "15ca403456a4ede8efd866b41fc16f2a1b104ad3", "filename": ".mailmap", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb8674837a9cc5225020e07fc3f164762bb4c11c/.mailmap", "raw_url": "https://github.com/rust-lang/rust/raw/bb8674837a9cc5225020e07fc3f164762bb4c11c/.mailmap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.mailmap?ref=bb8674837a9cc5225020e07fc3f164762bb4c11c", "patch": "@@ -266,6 +266,7 @@ Tim Chevalier <chevalier@alum.wellesley.edu> <catamorphism@gmail.com>\n Tim JIANG <p90eri@gmail.com>\n Tim Joseph Dumol <tim@timdumol.com>\n Torsten Weber <TorstenWeber12@gmail.com> <torstenweber12@gmail.com>\n+Trevor Spiteri <tspiteri@ieee.org> <trevor.spiteri@um.edu.mt>\n Ty Overby <ty@pre-alpha.com>\n Ulrik Sverdrup <bluss@users.noreply.github.com> bluss <bluss@users.noreply.github.com>\n Ulrik Sverdrup <bluss@users.noreply.github.com> bluss <bluss>"}, {"sha": "68265d8a9e8108562776d0319f30fa2aadb79d14", "filename": "src/doc/unstable-book/src/compiler-flags/report-time.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb8674837a9cc5225020e07fc3f164762bb4c11c/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Freport-time.md", "raw_url": "https://github.com/rust-lang/rust/raw/bb8674837a9cc5225020e07fc3f164762bb4c11c/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Freport-time.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Freport-time.md?ref=bb8674837a9cc5225020e07fc3f164762bb4c11c", "patch": "@@ -22,7 +22,7 @@ Available options:\n \n ```sh\n --report-time [plain|colored]\n-                Show execution time of each test. Awailable values:\n+                Show execution time of each test. Available values:\n                 plain = do not colorize the execution time (default);\n                 colored = colorize output according to the `color`\n                 parameter value;"}, {"sha": "805dbfe277584f58c2c699931dc5bff56174af08", "filename": "src/liballoc/raw_vec.rs", "status": "modified", "additions": 36, "deletions": 86, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/bb8674837a9cc5225020e07fc3f164762bb4c11c/src%2Fliballoc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb8674837a9cc5225020e07fc3f164762bb4c11c/src%2Fliballoc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fraw_vec.rs?ref=bb8674837a9cc5225020e07fc3f164762bb4c11c", "patch": "@@ -9,7 +9,7 @@ use core::ptr::{NonNull, Unique};\n use core::slice;\n \n use crate::alloc::{\n-    handle_alloc_error, AllocErr,\n+    handle_alloc_error,\n     AllocInit::{self, *},\n     AllocRef, Global, Layout,\n     ReallocPlacement::{self, *},\n@@ -235,13 +235,13 @@ impl<T, A: AllocRef> RawVec<T, A> {\n         }\n     }\n \n-    /// Ensures that the buffer contains at least enough space to hold\n-    /// `used_capacity + needed_extra_capacity` elements. If it doesn't already have\n-    /// enough capacity, will reallocate enough space plus comfortable slack\n-    /// space to get amortized `O(1)` behavior. Will limit this behavior\n-    /// if it would needlessly cause itself to panic.\n+    /// Ensures that the buffer contains at least enough space to hold `len +\n+    /// additional` elements. If it doesn't already have enough capacity, will\n+    /// reallocate enough space plus comfortable slack space to get amortized\n+    /// `O(1)` behavior. Will limit this behavior if it would needlessly cause\n+    /// itself to panic.\n     ///\n-    /// If `used_capacity` exceeds `self.capacity()`, this may fail to actually allocate\n+    /// If `len` exceeds `self.capacity()`, this may fail to actually allocate\n     /// the requested space. This is not really unsafe, but the unsafe\n     /// code *you* write that relies on the behavior of this function may break.\n     ///\n@@ -287,64 +287,32 @@ impl<T, A: AllocRef> RawVec<T, A> {\n     /// #   vector.push_all(&[1, 3, 5, 7, 9]);\n     /// # }\n     /// ```\n-    pub fn reserve(&mut self, used_capacity: usize, needed_extra_capacity: usize) {\n-        match self.try_reserve(used_capacity, needed_extra_capacity) {\n+    pub fn reserve(&mut self, len: usize, additional: usize) {\n+        match self.try_reserve(len, additional) {\n             Err(CapacityOverflow) => capacity_overflow(),\n             Err(AllocError { layout, .. }) => handle_alloc_error(layout),\n             Ok(()) => { /* yay */ }\n         }\n     }\n \n     /// The same as `reserve`, but returns on errors instead of panicking or aborting.\n-    pub fn try_reserve(\n-        &mut self,\n-        used_capacity: usize,\n-        needed_extra_capacity: usize,\n-    ) -> Result<(), TryReserveError> {\n-        if self.needs_to_grow(used_capacity, needed_extra_capacity) {\n-            self.grow_amortized(used_capacity, needed_extra_capacity, MayMove)\n+    pub fn try_reserve(&mut self, len: usize, additional: usize) -> Result<(), TryReserveError> {\n+        if self.needs_to_grow(len, additional) {\n+            self.grow_amortized(len, additional)\n         } else {\n             Ok(())\n         }\n     }\n \n-    /// Attempts to ensure that the buffer contains at least enough space to hold\n-    /// `used_capacity + needed_extra_capacity` elements. If it doesn't already have\n-    /// enough capacity, will reallocate in place enough space plus comfortable slack\n-    /// space to get amortized `O(1)` behavior. Will limit this behaviour\n-    /// if it would needlessly cause itself to panic.\n+    /// Ensures that the buffer contains at least enough space to hold `len +\n+    /// additional` elements. If it doesn't already, will reallocate the\n+    /// minimum possible amount of memory necessary. Generally this will be\n+    /// exactly the amount of memory necessary, but in principle the allocator\n+    /// is free to give back more than we asked for.\n     ///\n-    /// If `used_capacity` exceeds `self.capacity()`, this may fail to actually allocate\n-    /// the requested space. This is not really unsafe, but the unsafe\n-    /// code *you* write that relies on the behavior of this function may break.\n-    ///\n-    /// Returns `true` if the reallocation attempt has succeeded.\n-    ///\n-    /// # Panics\n-    ///\n-    /// * Panics if the requested capacity exceeds `usize::MAX` bytes.\n-    /// * Panics on 32-bit platforms if the requested capacity exceeds\n-    ///   `isize::MAX` bytes.\n-    pub fn reserve_in_place(&mut self, used_capacity: usize, needed_extra_capacity: usize) -> bool {\n-        // This is more readable than putting this in one line:\n-        // `!self.needs_to_grow(...) || self.grow(...).is_ok()`\n-        if self.needs_to_grow(used_capacity, needed_extra_capacity) {\n-            self.grow_amortized(used_capacity, needed_extra_capacity, InPlace).is_ok()\n-        } else {\n-            true\n-        }\n-    }\n-\n-    /// Ensures that the buffer contains at least enough space to hold\n-    /// `used_capacity + needed_extra_capacity` elements. If it doesn't already,\n-    /// will reallocate the minimum possible amount of memory necessary.\n-    /// Generally this will be exactly the amount of memory necessary,\n-    /// but in principle the allocator is free to give back more than what\n-    /// we asked for.\n-    ///\n-    /// If `used_capacity` exceeds `self.capacity()`, this may fail to actually allocate\n-    /// the requested space. This is not really unsafe, but the unsafe\n-    /// code *you* write that relies on the behavior of this function may break.\n+    /// If `len` exceeds `self.capacity()`, this may fail to actually allocate\n+    /// the requested space. This is not really unsafe, but the unsafe code\n+    /// *you* write that relies on the behavior of this function may break.\n     ///\n     /// # Panics\n     ///\n@@ -355,8 +323,8 @@ impl<T, A: AllocRef> RawVec<T, A> {\n     /// # Aborts\n     ///\n     /// Aborts on OOM.\n-    pub fn reserve_exact(&mut self, used_capacity: usize, needed_extra_capacity: usize) {\n-        match self.try_reserve_exact(used_capacity, needed_extra_capacity) {\n+    pub fn reserve_exact(&mut self, len: usize, additional: usize) {\n+        match self.try_reserve_exact(len, additional) {\n             Err(CapacityOverflow) => capacity_overflow(),\n             Err(AllocError { layout, .. }) => handle_alloc_error(layout),\n             Ok(()) => { /* yay */ }\n@@ -366,14 +334,10 @@ impl<T, A: AllocRef> RawVec<T, A> {\n     /// The same as `reserve_exact`, but returns on errors instead of panicking or aborting.\n     pub fn try_reserve_exact(\n         &mut self,\n-        used_capacity: usize,\n-        needed_extra_capacity: usize,\n+        len: usize,\n+        additional: usize,\n     ) -> Result<(), TryReserveError> {\n-        if self.needs_to_grow(used_capacity, needed_extra_capacity) {\n-            self.grow_exact(used_capacity, needed_extra_capacity)\n-        } else {\n-            Ok(())\n-        }\n+        if self.needs_to_grow(len, additional) { self.grow_exact(len, additional) } else { Ok(()) }\n     }\n \n     /// Shrinks the allocation down to the specified amount. If the given amount\n@@ -398,8 +362,8 @@ impl<T, A: AllocRef> RawVec<T, A> {\n impl<T, A: AllocRef> RawVec<T, A> {\n     /// Returns if the buffer needs to grow to fulfill the needed extra capacity.\n     /// Mainly used to make inlining reserve-calls possible without inlining `grow`.\n-    fn needs_to_grow(&self, used_capacity: usize, needed_extra_capacity: usize) -> bool {\n-        needed_extra_capacity > self.capacity().wrapping_sub(used_capacity)\n+    fn needs_to_grow(&self, len: usize, additional: usize) -> bool {\n+        additional > self.capacity().wrapping_sub(len)\n     }\n \n     fn capacity_from_bytes(excess: usize) -> usize {\n@@ -419,14 +383,9 @@ impl<T, A: AllocRef> RawVec<T, A> {\n     // so that all of the code that depends on `T` is within it, while as much\n     // of the code that doesn't depend on `T` as possible is in functions that\n     // are non-generic over `T`.\n-    fn grow_amortized(\n-        &mut self,\n-        used_capacity: usize,\n-        needed_extra_capacity: usize,\n-        placement: ReallocPlacement,\n-    ) -> Result<(), TryReserveError> {\n+    fn grow_amortized(&mut self, len: usize, additional: usize) -> Result<(), TryReserveError> {\n         // This is ensured by the calling contexts.\n-        debug_assert!(needed_extra_capacity > 0);\n+        debug_assert!(additional > 0);\n \n         if mem::size_of::<T>() == 0 {\n             // Since we return a capacity of `usize::MAX` when `elem_size` is\n@@ -435,8 +394,7 @@ impl<T, A: AllocRef> RawVec<T, A> {\n         }\n \n         // Nothing we can really do about these checks, sadly.\n-        let required_cap =\n-            used_capacity.checked_add(needed_extra_capacity).ok_or(CapacityOverflow)?;\n+        let required_cap = len.checked_add(additional).ok_or(CapacityOverflow)?;\n \n         // This guarantees exponential growth. The doubling cannot overflow\n         // because `cap <= isize::MAX` and the type of `cap` is `usize`.\n@@ -461,30 +419,26 @@ impl<T, A: AllocRef> RawVec<T, A> {\n         let new_layout = Layout::array::<T>(cap);\n \n         // `finish_grow` is non-generic over `T`.\n-        let memory = finish_grow(new_layout, placement, self.current_memory(), &mut self.alloc)?;\n+        let memory = finish_grow(new_layout, self.current_memory(), &mut self.alloc)?;\n         self.set_memory(memory);\n         Ok(())\n     }\n \n     // The constraints on this method are much the same as those on\n     // `grow_amortized`, but this method is usually instantiated less often so\n     // it's less critical.\n-    fn grow_exact(\n-        &mut self,\n-        used_capacity: usize,\n-        needed_extra_capacity: usize,\n-    ) -> Result<(), TryReserveError> {\n+    fn grow_exact(&mut self, len: usize, additional: usize) -> Result<(), TryReserveError> {\n         if mem::size_of::<T>() == 0 {\n             // Since we return a capacity of `usize::MAX` when the type size is\n             // 0, getting to here necessarily means the `RawVec` is overfull.\n             return Err(CapacityOverflow);\n         }\n \n-        let cap = used_capacity.checked_add(needed_extra_capacity).ok_or(CapacityOverflow)?;\n+        let cap = len.checked_add(additional).ok_or(CapacityOverflow)?;\n         let new_layout = Layout::array::<T>(cap);\n \n         // `finish_grow` is non-generic over `T`.\n-        let memory = finish_grow(new_layout, MayMove, self.current_memory(), &mut self.alloc)?;\n+        let memory = finish_grow(new_layout, self.current_memory(), &mut self.alloc)?;\n         self.set_memory(memory);\n         Ok(())\n     }\n@@ -518,7 +472,6 @@ impl<T, A: AllocRef> RawVec<T, A> {\n // much smaller than the number of `T` types.)\n fn finish_grow<A>(\n     new_layout: Result<Layout, LayoutErr>,\n-    placement: ReallocPlacement,\n     current_memory: Option<(NonNull<u8>, Layout)>,\n     alloc: &mut A,\n ) -> Result<MemoryBlock, TryReserveError>\n@@ -532,12 +485,9 @@ where\n \n     let memory = if let Some((ptr, old_layout)) = current_memory {\n         debug_assert_eq!(old_layout.align(), new_layout.align());\n-        unsafe { alloc.grow(ptr, old_layout, new_layout.size(), placement, Uninitialized) }\n+        unsafe { alloc.grow(ptr, old_layout, new_layout.size(), MayMove, Uninitialized) }\n     } else {\n-        match placement {\n-            MayMove => alloc.alloc(new_layout, Uninitialized),\n-            InPlace => Err(AllocErr),\n-        }\n+        alloc.alloc(new_layout, Uninitialized)\n     }\n     .map_err(|_| AllocError { layout: new_layout, non_exhaustive: () })?;\n "}, {"sha": "2226737757bc5bf91c2d1ef205ce9b03ecdd86ce", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bb8674837a9cc5225020e07fc3f164762bb4c11c/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb8674837a9cc5225020e07fc3f164762bb4c11c/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=bb8674837a9cc5225020e07fc3f164762bb4c11c", "patch": "@@ -2977,12 +2977,12 @@ impl<T> Drain<'_, T> {\n     }\n \n     /// Makes room for inserting more elements before the tail.\n-    unsafe fn move_tail(&mut self, extra_capacity: usize) {\n+    unsafe fn move_tail(&mut self, additional: usize) {\n         let vec = self.vec.as_mut();\n-        let used_capacity = self.tail_start + self.tail_len;\n-        vec.buf.reserve(used_capacity, extra_capacity);\n+        let len = self.tail_start + self.tail_len;\n+        vec.buf.reserve(len, additional);\n \n-        let new_tail_start = self.tail_start + extra_capacity;\n+        let new_tail_start = self.tail_start + additional;\n         let src = vec.as_ptr().add(self.tail_start);\n         let dst = vec.as_mut_ptr().add(new_tail_start);\n         ptr::copy(src, dst, self.tail_len);"}, {"sha": "4efb1db7a1a68b1cb3c7da985ac9719c91804043", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb8674837a9cc5225020e07fc3f164762bb4c11c/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb8674837a9cc5225020e07fc3f164762bb4c11c/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=bb8674837a9cc5225020e07fc3f164762bb4c11c", "patch": "@@ -409,7 +409,7 @@ impl<T> [T] {\n     /// The returned range is half-open, which means that the end pointer\n     /// points *one past* the last element of the slice. This way, an empty\n     /// slice is represented by two equal pointers, and the difference between\n-    /// the two pointers represents the size of the size.\n+    /// the two pointers represents the size of the slice.\n     ///\n     /// See [`as_ptr`] for warnings on using these pointers. The end pointer\n     /// requires extra caution, as it does not point to a valid element in the\n@@ -464,7 +464,7 @@ impl<T> [T] {\n     /// The returned range is half-open, which means that the end pointer\n     /// points *one past* the last element of the slice. This way, an empty\n     /// slice is represented by two equal pointers, and the difference between\n-    /// the two pointers represents the size of the size.\n+    /// the two pointers represents the size of the slice.\n     ///\n     /// See [`as_mut_ptr`] for warnings on using these pointers. The end\n     /// pointer requires extra caution, as it does not point to a valid element"}, {"sha": "4da336f8e288da9eb243b11dec0330e825e274ef", "filename": "src/librustc_arena/lib.rs", "status": "modified", "additions": 39, "deletions": 47, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/bb8674837a9cc5225020e07fc3f164762bb4c11c/src%2Flibrustc_arena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb8674837a9cc5225020e07fc3f164762bb4c11c/src%2Flibrustc_arena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_arena%2Flib.rs?ref=bb8674837a9cc5225020e07fc3f164762bb4c11c", "patch": "@@ -146,18 +146,18 @@ impl<T> TypedArena<T> {\n     }\n \n     #[inline]\n-    fn can_allocate(&self, len: usize) -> bool {\n-        let available_capacity_bytes = self.end.get() as usize - self.ptr.get() as usize;\n-        let at_least_bytes = len.checked_mul(mem::size_of::<T>()).unwrap();\n-        available_capacity_bytes >= at_least_bytes\n+    fn can_allocate(&self, additional: usize) -> bool {\n+        let available_bytes = self.end.get() as usize - self.ptr.get() as usize;\n+        let additional_bytes = additional.checked_mul(mem::size_of::<T>()).unwrap();\n+        available_bytes >= additional_bytes\n     }\n \n     /// Ensures there's enough space in the current chunk to fit `len` objects.\n     #[inline]\n-    fn ensure_capacity(&self, len: usize) {\n-        if !self.can_allocate(len) {\n-            self.grow(len);\n-            debug_assert!(self.can_allocate(len));\n+    fn ensure_capacity(&self, additional: usize) {\n+        if !self.can_allocate(additional) {\n+            self.grow(additional);\n+            debug_assert!(self.can_allocate(additional));\n         }\n     }\n \n@@ -214,36 +214,31 @@ impl<T> TypedArena<T> {\n     /// Grows the arena.\n     #[inline(never)]\n     #[cold]\n-    fn grow(&self, n: usize) {\n+    fn grow(&self, additional: usize) {\n         unsafe {\n-            // We need the element size in to convert chunk sizes (ranging from\n+            // We need the element size to convert chunk sizes (ranging from\n             // PAGE to HUGE_PAGE bytes) to element counts.\n             let elem_size = cmp::max(1, mem::size_of::<T>());\n             let mut chunks = self.chunks.borrow_mut();\n-            let (chunk, mut new_capacity);\n+            let mut new_cap;\n             if let Some(last_chunk) = chunks.last_mut() {\n                 let used_bytes = self.ptr.get() as usize - last_chunk.start() as usize;\n-                let currently_used_cap = used_bytes / mem::size_of::<T>();\n-                last_chunk.entries = currently_used_cap;\n-                if last_chunk.storage.reserve_in_place(currently_used_cap, n) {\n-                    self.end.set(last_chunk.end());\n-                    return;\n-                } else {\n-                    // If the previous chunk's capacity is less than HUGE_PAGE\n-                    // bytes, then this chunk will be least double the previous\n-                    // chunk's size.\n-                    new_capacity = last_chunk.storage.capacity();\n-                    if new_capacity < HUGE_PAGE / elem_size {\n-                        new_capacity = new_capacity.checked_mul(2).unwrap();\n-                    }\n+                last_chunk.entries = used_bytes / mem::size_of::<T>();\n+\n+                // If the previous chunk's capacity is less than HUGE_PAGE\n+                // bytes, then this chunk will be least double the previous\n+                // chunk's size.\n+                new_cap = last_chunk.storage.capacity();\n+                if new_cap < HUGE_PAGE / elem_size {\n+                    new_cap = new_cap.checked_mul(2).unwrap();\n                 }\n             } else {\n-                new_capacity = PAGE / elem_size;\n+                new_cap = PAGE / elem_size;\n             }\n-            // Also ensure that this chunk can fit `n`.\n-            new_capacity = cmp::max(n, new_capacity);\n+            // Also ensure that this chunk can fit `additional`.\n+            new_cap = cmp::max(additional, new_cap);\n \n-            chunk = TypedArenaChunk::<T>::new(new_capacity);\n+            let chunk = TypedArenaChunk::<T>::new(new_cap);\n             self.ptr.set(chunk.start());\n             self.end.set(chunk.end());\n             chunks.push(chunk);\n@@ -347,31 +342,28 @@ impl DroplessArena {\n \n     #[inline(never)]\n     #[cold]\n-    fn grow(&self, needed_bytes: usize) {\n+    fn grow(&self, additional: usize) {\n         unsafe {\n             let mut chunks = self.chunks.borrow_mut();\n-            let (chunk, mut new_capacity);\n+            let mut new_cap;\n             if let Some(last_chunk) = chunks.last_mut() {\n-                let used_bytes = self.ptr.get() as usize - last_chunk.start() as usize;\n-                if last_chunk.storage.reserve_in_place(used_bytes, needed_bytes) {\n-                    self.end.set(last_chunk.end());\n-                    return;\n-                } else {\n-                    // If the previous chunk's capacity is less than HUGE_PAGE\n-                    // bytes, then this chunk will be least double the previous\n-                    // chunk's size.\n-                    new_capacity = last_chunk.storage.capacity();\n-                    if new_capacity < HUGE_PAGE {\n-                        new_capacity = new_capacity.checked_mul(2).unwrap();\n-                    }\n+                // There is no need to update `last_chunk.entries` because that\n+                // field isn't used by `DroplessArena`.\n+\n+                // If the previous chunk's capacity is less than HUGE_PAGE\n+                // bytes, then this chunk will be least double the previous\n+                // chunk's size.\n+                new_cap = last_chunk.storage.capacity();\n+                if new_cap < HUGE_PAGE {\n+                    new_cap = new_cap.checked_mul(2).unwrap();\n                 }\n             } else {\n-                new_capacity = PAGE;\n+                new_cap = PAGE;\n             }\n-            // Also ensure that this chunk can fit `needed_bytes`.\n-            new_capacity = cmp::max(needed_bytes, new_capacity);\n+            // Also ensure that this chunk can fit `additional`.\n+            new_cap = cmp::max(additional, new_cap);\n \n-            chunk = TypedArenaChunk::<u8>::new(new_capacity);\n+            let chunk = TypedArenaChunk::<u8>::new(new_cap);\n             self.ptr.set(chunk.start());\n             self.end.set(chunk.end());\n             chunks.push(chunk);\n@@ -386,7 +378,7 @@ impl DroplessArena {\n             self.align(align);\n \n             let future_end = intrinsics::arith_offset(self.ptr.get(), bytes as isize);\n-            if (future_end as *mut u8) >= self.end.get() {\n+            if (future_end as *mut u8) > self.end.get() {\n                 self.grow(bytes);\n             }\n "}, {"sha": "ec5b3251e6883b250e00a8cc094ba756ddac1568", "filename": "src/librustc_error_codes/error_codes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb8674837a9cc5225020e07fc3f164762bb4c11c/src%2Flibrustc_error_codes%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb8674837a9cc5225020e07fc3f164762bb4c11c/src%2Flibrustc_error_codes%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes.rs?ref=bb8674837a9cc5225020e07fc3f164762bb4c11c", "patch": "@@ -439,6 +439,7 @@ E0753: include_str!(\"./error_codes/E0753.md\"),\n E0754: include_str!(\"./error_codes/E0754.md\"),\n E0758: include_str!(\"./error_codes/E0758.md\"),\n E0760: include_str!(\"./error_codes/E0760.md\"),\n+E0761: include_str!(\"./error_codes/E0761.md\"),\n ;\n //  E0006, // merged with E0005\n //  E0008, // cannot bind by-move into a pattern guard"}, {"sha": "701900bb0cd4be8d966b3ff8c084bd678f2b4a6e", "filename": "src/librustc_error_codes/error_codes/E0583.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb8674837a9cc5225020e07fc3f164762bb4c11c/src%2Flibrustc_error_codes%2Ferror_codes%2FE0583.md", "raw_url": "https://github.com/rust-lang/rust/raw/bb8674837a9cc5225020e07fc3f164762bb4c11c/src%2Flibrustc_error_codes%2Ferror_codes%2FE0583.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0583.md?ref=bb8674837a9cc5225020e07fc3f164762bb4c11c", "patch": "@@ -2,7 +2,7 @@ A file wasn't found for an out-of-line module.\n \n Erroneous code example:\n \n-```ignore (compile_fail not working here; see Issue #43707)\n+```compile_fail,E0583\n mod file_that_doesnt_exist; // error: file not found for module\n \n fn main() {}"}, {"sha": "8ca6e777f301da4d21b1750a07b802f8d47ab946", "filename": "src/librustc_error_codes/error_codes/E0647.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bb8674837a9cc5225020e07fc3f164762bb4c11c/src%2Flibrustc_error_codes%2Ferror_codes%2FE0647.md", "raw_url": "https://github.com/rust-lang/rust/raw/bb8674837a9cc5225020e07fc3f164762bb4c11c/src%2Flibrustc_error_codes%2Ferror_codes%2FE0647.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0647.md?ref=bb8674837a9cc5225020e07fc3f164762bb4c11c", "patch": "@@ -1,4 +1,5 @@\n-It is not possible to define `start` with a where clause.\n+The `start` function was defined with a where clause.\n+\n Erroneous code example:\n \n ```compile_fail,E0647"}, {"sha": "c01574e413cfaa62ec8077e3b6ce3075b373299c", "filename": "src/librustc_error_codes/error_codes/E0761.md", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/bb8674837a9cc5225020e07fc3f164762bb4c11c/src%2Flibrustc_error_codes%2Ferror_codes%2FE0761.md", "raw_url": "https://github.com/rust-lang/rust/raw/bb8674837a9cc5225020e07fc3f164762bb4c11c/src%2Flibrustc_error_codes%2Ferror_codes%2FE0761.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0761.md?ref=bb8674837a9cc5225020e07fc3f164762bb4c11c", "patch": "@@ -0,0 +1,25 @@\n+Multiple candidate files were found for an out-of-line module.\n+\n+Erroneous code example:\n+\n+```rust\n+// file: ambiguous_module/mod.rs\n+\n+fn foo() {}\n+```\n+\n+```rust\n+// file: ambiguous_module.rs\n+\n+fn foo() {}\n+```\n+\n+```ignore (multiple source files required for compile_fail)\n+mod ambiguous_module; // error: file for module `ambiguous_module`\n+                      // found at both ambiguous_module.rs and\n+                      // ambiguous_module.rs/mod.rs\n+\n+fn main() {}\n+```\n+\n+Please remove this ambiguity by deleting/renaming one of the candidate files."}, {"sha": "535c1dbad04a9dab1e3f9a5370795577f6f57715", "filename": "src/librustc_expand/module.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb8674837a9cc5225020e07fc3f164762bb4c11c/src%2Flibrustc_expand%2Fmodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb8674837a9cc5225020e07fc3f164762bb4c11c/src%2Flibrustc_expand%2Fmodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fmodule.rs?ref=bb8674837a9cc5225020e07fc3f164762bb4c11c", "patch": "@@ -291,7 +291,7 @@ pub fn default_submod_path<'a>(\n             let mut err = struct_span_err!(\n                 sess.span_diagnostic,\n                 span,\n-                E0584,\n+                E0761,\n                 \"file for module `{}` found at both {} and {}\",\n                 mod_name,\n                 default_path_str,"}, {"sha": "8150c328316cbb3d9faceeb47064f5bb288d1f52", "filename": "src/librustc_mir/transform/validate.rs", "status": "modified", "additions": 48, "deletions": 19, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/bb8674837a9cc5225020e07fc3f164762bb4c11c/src%2Flibrustc_mir%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb8674837a9cc5225020e07fc3f164762bb4c11c/src%2Flibrustc_mir%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fvalidate.rs?ref=bb8674837a9cc5225020e07fc3f164762bb4c11c", "patch": "@@ -11,6 +11,12 @@ use rustc_middle::{\n };\n use rustc_span::def_id::DefId;\n \n+#[derive(Copy, Clone, Debug)]\n+enum EdgeKind {\n+    Unwind,\n+    Normal,\n+}\n+\n pub struct Validator {\n     /// Describes at which point in the pipeline this validation is happening.\n     pub when: String,\n@@ -49,8 +55,31 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         );\n     }\n \n-    fn check_bb(&self, location: Location, bb: BasicBlock) {\n-        if self.body.basic_blocks().get(bb).is_none() {\n+    fn check_edge(&self, location: Location, bb: BasicBlock, edge_kind: EdgeKind) {\n+        if let Some(bb) = self.body.basic_blocks().get(bb) {\n+            let src = self.body.basic_blocks().get(location.block).unwrap();\n+            match (src.is_cleanup, bb.is_cleanup, edge_kind) {\n+                // Non-cleanup blocks can jump to non-cleanup blocks along non-unwind edges\n+                (false, false, EdgeKind::Normal)\n+                // Non-cleanup blocks can jump to cleanup blocks along unwind edges\n+                | (false, true, EdgeKind::Unwind)\n+                // Cleanup blocks can jump to cleanup blocks along non-unwind edges\n+                | (true, true, EdgeKind::Normal) => {}\n+                // All other jumps are invalid\n+                _ => {\n+                    self.fail(\n+                        location,\n+                        format!(\n+                            \"{:?} edge to {:?} violates unwind invariants (cleanup {:?} -> {:?})\",\n+                            edge_kind,\n+                            bb,\n+                            src.is_cleanup,\n+                            bb.is_cleanup,\n+                        )\n+                    )\n+                }\n+            }\n+        } else {\n             self.fail(location, format!(\"encountered jump to invalid basic block {:?}\", bb))\n         }\n     }\n@@ -92,7 +121,7 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n     fn visit_terminator(&mut self, terminator: &Terminator<'tcx>, location: Location) {\n         match &terminator.kind {\n             TerminatorKind::Goto { target } => {\n-                self.check_bb(location, *target);\n+                self.check_edge(location, *target, EdgeKind::Normal);\n             }\n             TerminatorKind::SwitchInt { targets, values, .. } => {\n                 if targets.len() != values.len() + 1 {\n@@ -106,19 +135,19 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n                     );\n                 }\n                 for target in targets {\n-                    self.check_bb(location, *target);\n+                    self.check_edge(location, *target, EdgeKind::Normal);\n                 }\n             }\n             TerminatorKind::Drop { target, unwind, .. } => {\n-                self.check_bb(location, *target);\n+                self.check_edge(location, *target, EdgeKind::Normal);\n                 if let Some(unwind) = unwind {\n-                    self.check_bb(location, *unwind);\n+                    self.check_edge(location, *unwind, EdgeKind::Unwind);\n                 }\n             }\n             TerminatorKind::DropAndReplace { target, unwind, .. } => {\n-                self.check_bb(location, *target);\n+                self.check_edge(location, *target, EdgeKind::Normal);\n                 if let Some(unwind) = unwind {\n-                    self.check_bb(location, *unwind);\n+                    self.check_edge(location, *unwind, EdgeKind::Unwind);\n                 }\n             }\n             TerminatorKind::Call { func, destination, cleanup, .. } => {\n@@ -131,10 +160,10 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n                     ),\n                 }\n                 if let Some((_, target)) = destination {\n-                    self.check_bb(location, *target);\n+                    self.check_edge(location, *target, EdgeKind::Normal);\n                 }\n                 if let Some(cleanup) = cleanup {\n-                    self.check_bb(location, *cleanup);\n+                    self.check_edge(location, *cleanup, EdgeKind::Unwind);\n                 }\n             }\n             TerminatorKind::Assert { cond, target, cleanup, .. } => {\n@@ -148,30 +177,30 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n                         ),\n                     );\n                 }\n-                self.check_bb(location, *target);\n+                self.check_edge(location, *target, EdgeKind::Normal);\n                 if let Some(cleanup) = cleanup {\n-                    self.check_bb(location, *cleanup);\n+                    self.check_edge(location, *cleanup, EdgeKind::Unwind);\n                 }\n             }\n             TerminatorKind::Yield { resume, drop, .. } => {\n-                self.check_bb(location, *resume);\n+                self.check_edge(location, *resume, EdgeKind::Normal);\n                 if let Some(drop) = drop {\n-                    self.check_bb(location, *drop);\n+                    self.check_edge(location, *drop, EdgeKind::Normal);\n                 }\n             }\n             TerminatorKind::FalseEdge { real_target, imaginary_target } => {\n-                self.check_bb(location, *real_target);\n-                self.check_bb(location, *imaginary_target);\n+                self.check_edge(location, *real_target, EdgeKind::Normal);\n+                self.check_edge(location, *imaginary_target, EdgeKind::Normal);\n             }\n             TerminatorKind::FalseUnwind { real_target, unwind } => {\n-                self.check_bb(location, *real_target);\n+                self.check_edge(location, *real_target, EdgeKind::Normal);\n                 if let Some(unwind) = unwind {\n-                    self.check_bb(location, *unwind);\n+                    self.check_edge(location, *unwind, EdgeKind::Unwind);\n                 }\n             }\n             TerminatorKind::InlineAsm { destination, .. } => {\n                 if let Some(destination) = destination {\n-                    self.check_bb(location, *destination);\n+                    self.check_edge(location, *destination, EdgeKind::Normal);\n                 }\n             }\n             // Nothing to validate for these."}, {"sha": "5c76c840b1ddd1910238457bd4aadbdd011fe404", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bb8674837a9cc5225020e07fc3f164762bb4c11c/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb8674837a9cc5225020e07fc3f164762bb4c11c/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=bb8674837a9cc5225020e07fc3f164762bb4c11c", "patch": "@@ -85,9 +85,7 @@ pub struct Item {\n \n impl fmt::Debug for Item {\n     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        let fake = MAX_DEF_ID.with(|m| {\n-            m.borrow().get(&self.def_id.krate).map(|id| self.def_id >= *id).unwrap_or(false)\n-        });\n+        let fake = self.is_fake();\n         let def_id: &dyn fmt::Debug = if fake { &\"**FAKE**\" } else { &self.def_id };\n \n         fmt.debug_struct(\"Item\")\n@@ -238,6 +236,13 @@ impl Item {\n             _ => false,\n         }\n     }\n+\n+    /// See comments on next_def_id\n+    pub fn is_fake(&self) -> bool {\n+        MAX_DEF_ID.with(|m| {\n+            m.borrow().get(&self.def_id.krate).map(|id| self.def_id >= *id).unwrap_or(false)\n+        })\n+    }\n }\n \n #[derive(Clone, Debug)]"}, {"sha": "97a659f22d7576fb10f426d11dacb0f0140e7cc1", "filename": "src/libtest/cli.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb8674837a9cc5225020e07fc3f164762bb4c11c/src%2Flibtest%2Fcli.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb8674837a9cc5225020e07fc3f164762bb4c11c/src%2Flibtest%2Fcli.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Fcli.rs?ref=bb8674837a9cc5225020e07fc3f164762bb4c11c", "patch": "@@ -115,7 +115,7 @@ fn optgroups() -> getopts::Options {\n         .optflagopt(\n             \"\",\n             \"report-time\",\n-            \"Show execution time of each test. Awailable values:\n+            \"Show execution time of each test. Available values:\n             plain   = do not colorize the execution time (default);\n             colored = colorize output according to the `color` parameter value;\n "}, {"sha": "2cb99b7514277459e04d1a46cfd5727df85df6de", "filename": "src/test/ui/mod/mod_file_disambig.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb8674837a9cc5225020e07fc3f164762bb4c11c/src%2Ftest%2Fui%2Fmod%2Fmod_file_disambig.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb8674837a9cc5225020e07fc3f164762bb4c11c/src%2Ftest%2Fui%2Fmod%2Fmod_file_disambig.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmod%2Fmod_file_disambig.stderr?ref=bb8674837a9cc5225020e07fc3f164762bb4c11c", "patch": "@@ -1,4 +1,4 @@\n-error[E0584]: file for module `mod_file_disambig_aux` found at both mod_file_disambig_aux.rs and mod_file_disambig_aux/mod.rs\n+error[E0761]: file for module `mod_file_disambig_aux` found at both mod_file_disambig_aux.rs and mod_file_disambig_aux/mod.rs\n   --> $DIR/mod_file_disambig.rs:1:1\n    |\n LL | mod mod_file_disambig_aux;\n@@ -14,5 +14,5 @@ LL |     assert_eq!(mod_file_aux::bar(), 10);\n \n error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0433, E0584.\n+Some errors have detailed explanations: E0433, E0761.\n For more information about an error, try `rustc --explain E0433`."}]}