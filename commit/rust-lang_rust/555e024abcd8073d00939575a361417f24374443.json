{"sha": "555e024abcd8073d00939575a361417f24374443", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1NWUwMjRhYmNkODA3M2QwMDkzOTU3NWEzNjE0MTdmMjQzNzQ0NDM=", "commit": {"author": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2020-04-08T14:09:38Z"}, "committer": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2020-04-10T11:13:54Z"}, "message": "librustc_middle: return LocalDefId instead of DefId in local_def_id_from_node_id", "tree": {"sha": "38ea4030b1d929ab2b3d0687912f4df259b8b41d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/38ea4030b1d929ab2b3d0687912f4df259b8b41d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/555e024abcd8073d00939575a361417f24374443", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/555e024abcd8073d00939575a361417f24374443", "html_url": "https://github.com/rust-lang/rust/commit/555e024abcd8073d00939575a361417f24374443", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/555e024abcd8073d00939575a361417f24374443/comments", "author": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f62c6e1c762b60bae0bcc60ed344feee99f5c610", "url": "https://api.github.com/repos/rust-lang/rust/commits/f62c6e1c762b60bae0bcc60ed344feee99f5c610", "html_url": "https://github.com/rust-lang/rust/commit/f62c6e1c762b60bae0bcc60ed344feee99f5c610"}], "stats": {"total": 96, "additions": 59, "deletions": 37}, "files": [{"sha": "6d6cbda5d5ffa375689fa1d9dea81bf62bb8dbf0", "filename": "src/librustc_middle/hir/map/mod.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/555e024abcd8073d00939575a361417f24374443/src%2Flibrustc_middle%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/555e024abcd8073d00939575a361417f24374443/src%2Flibrustc_middle%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fhir%2Fmap%2Fmod.rs?ref=555e024abcd8073d00939575a361417f24374443", "patch": "@@ -157,19 +157,16 @@ impl<'hir> Map<'hir> {\n         self.tcx.definitions.def_path(def_id)\n     }\n \n-    // FIXME(eddyb) this function can and should return `LocalDefId`.\n     #[inline]\n-    pub fn local_def_id_from_node_id(&self, node: NodeId) -> DefId {\n-        self.opt_local_def_id_from_node_id(node)\n-            .unwrap_or_else(|| {\n-                let hir_id = self.node_id_to_hir_id(node);\n-                bug!(\n-                    \"local_def_id_from_node_id: no entry for `{}`, which has a map of `{:?}`\",\n-                    node,\n-                    self.find_entry(hir_id)\n-                )\n-            })\n-            .to_def_id()\n+    pub fn local_def_id_from_node_id(&self, node: NodeId) -> LocalDefId {\n+        self.opt_local_def_id_from_node_id(node).unwrap_or_else(|| {\n+            let hir_id = self.node_id_to_hir_id(node);\n+            bug!(\n+                \"local_def_id_from_node_id: no entry for `{}`, which has a map of `{:?}`\",\n+                node,\n+                self.find_entry(hir_id)\n+            )\n+        })\n     }\n \n     // FIXME(eddyb) this function can and should return `LocalDefId`."}, {"sha": "5b93c73e07ce295a3c233dae0f11cc4e30193343", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/555e024abcd8073d00939575a361417f24374443/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/555e024abcd8073d00939575a361417f24374443/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=555e024abcd8073d00939575a361417f24374443", "patch": "@@ -107,7 +107,7 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n     where\n         F: FnOnce(&mut Self),\n     {\n-        let item_def_id = self.tcx.hir().local_def_id_from_node_id(item_id);\n+        let item_def_id = self.tcx.hir().local_def_id_from_node_id(item_id).to_def_id();\n \n         let tables = if self.tcx.has_typeck_tables(item_def_id) {\n             self.tcx.typeck_tables_of(item_def_id)\n@@ -423,8 +423,10 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n         vis: ast::Visibility,\n         attrs: &'l [Attribute],\n     ) {\n-        let qualname =\n-            format!(\"::{}\", self.tcx.def_path_str(self.tcx.hir().local_def_id_from_node_id(id)));\n+        let qualname = format!(\n+            \"::{}\",\n+            self.tcx.def_path_str(self.tcx.hir().local_def_id_from_node_id(id).to_def_id())\n+        );\n \n         if !self.span.filter_generated(ident.span) {\n             let sig = sig::assoc_const_signature(id, ident.name, typ, expr, &self.save_ctxt);\n@@ -470,7 +472,7 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n         let name = item.ident.to_string();\n         let qualname = format!(\n             \"::{}\",\n-            self.tcx.def_path_str(self.tcx.hir().local_def_id_from_node_id(item.id))\n+            self.tcx.def_path_str(self.tcx.hir().local_def_id_from_node_id(item.id).to_def_id())\n         );\n \n         let kind = match item.kind {\n@@ -670,7 +672,7 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n             }\n             v.process_generic_params(generics, \"\", item.id);\n             for impl_item in impl_items {\n-                v.process_impl_item(impl_item, map.local_def_id_from_node_id(item.id));\n+                v.process_impl_item(impl_item, map.local_def_id_from_node_id(item.id).to_def_id());\n             }\n         });\n     }\n@@ -685,7 +687,7 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n         let name = item.ident.to_string();\n         let qualname = format!(\n             \"::{}\",\n-            self.tcx.def_path_str(self.tcx.hir().local_def_id_from_node_id(item.id))\n+            self.tcx.def_path_str(self.tcx.hir().local_def_id_from_node_id(item.id).to_def_id())\n         );\n         let mut val = name.clone();\n         if !generics.params.is_empty() {\n@@ -751,7 +753,7 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n         self.process_generic_params(generics, &qualname, item.id);\n         for method in methods {\n             let map = &self.tcx.hir();\n-            self.process_trait_item(method, map.local_def_id_from_node_id(item.id))\n+            self.process_trait_item(method, map.local_def_id_from_node_id(item.id).to_def_id())\n         }\n     }\n \n@@ -1030,7 +1032,9 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n                 let name = trait_item.ident.name.to_string();\n                 let qualname = format!(\n                     \"::{}\",\n-                    self.tcx.def_path_str(self.tcx.hir().local_def_id_from_node_id(trait_item.id))\n+                    self.tcx.def_path_str(\n+                        self.tcx.hir().local_def_id_from_node_id(trait_item.id).to_def_id()\n+                    )\n                 );\n \n                 if !self.span.filter_generated(trait_item.ident.span) {\n@@ -1173,7 +1177,7 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n \n                 // Make a comma-separated list of names of imported modules.\n                 let def_id = self.tcx.hir().local_def_id_from_node_id(id);\n-                let names = self.tcx.names_imported_by_glob_use(def_id);\n+                let names = self.tcx.names_imported_by_glob_use(def_id.to_def_id());\n                 let names: Vec<_> = names.iter().map(|n| n.to_string()).collect();\n \n                 // Otherwise it's a span with wrong macro expansion info, which\n@@ -1227,8 +1231,10 @@ impl<'l, 'tcx> Visitor<'l> for DumpVisitor<'l, 'tcx> {\n         // only get called for the root module of a crate.\n         assert_eq!(id, ast::CRATE_NODE_ID);\n \n-        let qualname =\n-            format!(\"::{}\", self.tcx.def_path_str(self.tcx.hir().local_def_id_from_node_id(id)));\n+        let qualname = format!(\n+            \"::{}\",\n+            self.tcx.def_path_str(self.tcx.hir().local_def_id_from_node_id(id).to_def_id())\n+        );\n \n         let sm = self.tcx.sess.source_map();\n         let filename = sm.span_to_filename(span);\n@@ -1311,7 +1317,9 @@ impl<'l, 'tcx> Visitor<'l> for DumpVisitor<'l, 'tcx> {\n             TyAlias(_, ref ty_params, _, ref ty) => {\n                 let qualname = format!(\n                     \"::{}\",\n-                    self.tcx.def_path_str(self.tcx.hir().local_def_id_from_node_id(item.id))\n+                    self.tcx.def_path_str(\n+                        self.tcx.hir().local_def_id_from_node_id(item.id).to_def_id()\n+                    )\n                 );\n                 let value = match ty {\n                     Some(ty) => ty_to_string(&ty),"}, {"sha": "cb3032de83ddbf2d1cfcc331fb7dee99a9c09c18", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 23, "deletions": 10, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/555e024abcd8073d00939575a361417f24374443/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/555e024abcd8073d00939575a361417f24374443/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=555e024abcd8073d00939575a361417f24374443", "patch": "@@ -130,7 +130,7 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n     pub fn get_extern_item_data(&self, item: &ast::ForeignItem) -> Option<Data> {\n         let qualname = format!(\n             \"::{}\",\n-            self.tcx.def_path_str(self.tcx.hir().local_def_id_from_node_id(item.id))\n+            self.tcx.def_path_str(self.tcx.hir().local_def_id_from_node_id(item.id).to_def_id())\n         );\n         match item.kind {\n             ast::ForeignItemKind::Fn(_, ref sig, ref generics, _) => {\n@@ -183,7 +183,9 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n             ast::ItemKind::Fn(_, ref sig, .., ref generics, _) => {\n                 let qualname = format!(\n                     \"::{}\",\n-                    self.tcx.def_path_str(self.tcx.hir().local_def_id_from_node_id(item.id))\n+                    self.tcx.def_path_str(\n+                        self.tcx.hir().local_def_id_from_node_id(item.id).to_def_id()\n+                    )\n                 );\n                 filter!(self.span_utils, item.ident.span);\n                 Some(Data::DefData(Def {\n@@ -204,7 +206,9 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n             ast::ItemKind::Static(ref typ, ..) => {\n                 let qualname = format!(\n                     \"::{}\",\n-                    self.tcx.def_path_str(self.tcx.hir().local_def_id_from_node_id(item.id))\n+                    self.tcx.def_path_str(\n+                        self.tcx.hir().local_def_id_from_node_id(item.id).to_def_id()\n+                    )\n                 );\n \n                 filter!(self.span_utils, item.ident.span);\n@@ -230,7 +234,9 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n             ast::ItemKind::Const(_, ref typ, _) => {\n                 let qualname = format!(\n                     \"::{}\",\n-                    self.tcx.def_path_str(self.tcx.hir().local_def_id_from_node_id(item.id))\n+                    self.tcx.def_path_str(\n+                        self.tcx.hir().local_def_id_from_node_id(item.id).to_def_id()\n+                    )\n                 );\n                 filter!(self.span_utils, item.ident.span);\n \n@@ -255,7 +261,9 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n             ast::ItemKind::Mod(ref m) => {\n                 let qualname = format!(\n                     \"::{}\",\n-                    self.tcx.def_path_str(self.tcx.hir().local_def_id_from_node_id(item.id))\n+                    self.tcx.def_path_str(\n+                        self.tcx.hir().local_def_id_from_node_id(item.id).to_def_id()\n+                    )\n                 );\n \n                 let sm = self.tcx.sess.source_map();\n@@ -282,7 +290,9 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n                 let name = item.ident.to_string();\n                 let qualname = format!(\n                     \"::{}\",\n-                    self.tcx.def_path_str(self.tcx.hir().local_def_id_from_node_id(item.id))\n+                    self.tcx.def_path_str(\n+                        self.tcx.hir().local_def_id_from_node_id(item.id).to_def_id()\n+                    )\n                 );\n                 filter!(self.span_utils, item.ident.span);\n                 let variants_str =\n@@ -363,11 +373,11 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n             let name = ident.to_string();\n             let qualname = format!(\n                 \"::{}::{}\",\n-                self.tcx.def_path_str(self.tcx.hir().local_def_id_from_node_id(scope)),\n+                self.tcx.def_path_str(self.tcx.hir().local_def_id_from_node_id(scope).to_def_id()),\n                 ident\n             );\n             filter!(self.span_utils, ident.span);\n-            let def_id = self.tcx.hir().local_def_id_from_node_id(field.id);\n+            let def_id = self.tcx.hir().local_def_id_from_node_id(field.id).to_def_id();\n             let typ = self.tcx.type_of(def_id).to_string();\n \n             let id = id_from_node_id(field.id, self);\n@@ -399,7 +409,7 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n         // which the method is declared in, followed by the method's name.\n         let (qualname, parent_scope, decl_id, docs, attributes) = match self\n             .tcx\n-            .impl_of_method(self.tcx.hir().local_def_id_from_node_id(id))\n+            .impl_of_method(self.tcx.hir().local_def_id_from_node_id(id).to_def_id())\n         {\n             Some(impl_id) => match self.tcx.hir().get_if_local(impl_id) {\n                 Some(Node::Item(item)) => match item.kind {\n@@ -448,7 +458,10 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n                     );\n                 }\n             },\n-            None => match self.tcx.trait_of_item(self.tcx.hir().local_def_id_from_node_id(id)) {\n+            None => match self\n+                .tcx\n+                .trait_of_item(self.tcx.hir().local_def_id_from_node_id(id).to_def_id())\n+            {\n                 Some(def_id) => {\n                     let mut docs = String::new();\n                     let mut attrs = vec![];"}, {"sha": "a82015dea5fc8daf465c7645877b705f60a5a387", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/555e024abcd8073d00939575a361417f24374443/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/555e024abcd8073d00939575a361417f24374443/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=555e024abcd8073d00939575a361417f24374443", "patch": "@@ -451,7 +451,11 @@ fn build_module(cx: &DocContext<'_>, did: DefId, visited: &mut FxHashSet<DefId>)\n                         name: None,\n                         attrs: clean::Attributes::default(),\n                         source: clean::Span::empty(),\n-                        def_id: cx.tcx.hir().local_def_id_from_node_id(ast::CRATE_NODE_ID),\n+                        def_id: cx\n+                            .tcx\n+                            .hir()\n+                            .local_def_id_from_node_id(ast::CRATE_NODE_ID)\n+                            .to_def_id(),\n                         visibility: clean::Public,\n                         stability: None,\n                         deprecation: None,"}, {"sha": "66df5eb45bb70815680b2289bd556831a34da09b", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/555e024abcd8073d00939575a361417f24374443/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/555e024abcd8073d00939575a361417f24374443/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=555e024abcd8073d00939575a361417f24374443", "patch": "@@ -1554,7 +1554,7 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n                 BareFunction(box BareFunctionDecl {\n                     unsafety: sig.unsafety(),\n                     generic_params: Vec::new(),\n-                    decl: (local_def_id, sig).clean(cx),\n+                    decl: (local_def_id.to_def_id(), sig).clean(cx),\n                     abi: sig.abi(),\n                 })\n             }\n@@ -2264,7 +2264,7 @@ impl Clean<Vec<Item>> for doctree::Import<'_> {\n             name: None,\n             attrs: self.attrs.clean(cx),\n             source: self.whence.clean(cx),\n-            def_id: cx.tcx.hir().local_def_id_from_node_id(ast::CRATE_NODE_ID),\n+            def_id: cx.tcx.hir().local_def_id_from_node_id(ast::CRATE_NODE_ID).to_def_id(),\n             visibility: self.vis.clean(cx),\n             stability: None,\n             deprecation: None,"}]}