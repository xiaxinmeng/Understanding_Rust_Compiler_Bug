{"sha": "054caa81c5b3eb28fb99d508d8bd553d9920053b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1NGNhYTgxYzViM2ViMjhmYjk5ZDUwOGQ4YmQ1NTNkOTkyMDA1M2I=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-02-16T18:24:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-16T18:24:28Z"}, "message": "Merge #7690\n\n7690: Extract `fn load_workspace(\u2026)` from `fn load_cargo(\u2026)` r=matklad a=regexident\n\nUnfortunately in https://github.com/rust-analyzer/rust-analyzer/pull/7595 I forgot to `pub use` (rather than just `use`) the newly introduced `LoadCargoConfig`.\r\n\r\nSo this PR fixes this now.\r\n\r\nIt also:\r\n\r\n- splits up `fn load_cargo` into a \"workspace loading\" and a \"project loading\" phase\r\n- adds a `progress: &dyn Fn(String)` to allow third-parties to provide CLI progress updates, too\r\n\r\nThe motivation behind both of these is the fact that rust-analyzer currently does not support caching.\r\nAs such any third-party making use of `ra_ap_\u2026` needs to providing a caching layer itself.\r\nUnlike for rust-analyzer itself however a common use-pattern of third-parties is to analyze a specific target (`--lib`/`--bin <BIN>`/\u2026) from a specific package (`--package`). The targets/packages of a crate can be obtained via `ProjectWorkspace::load(\u2026)`, which currently is performed inside of `fn load_cargo`, effectively making the returned `ProjectWorkspace` inaccessible to the outer caller. With this information one can then provide early error handling via CLI (in case of ambiguities or invalid arguments, etc), instead of `fn load_cargo` failing with a possibly obscure error message. It also allows for annotating the persisted caches with its specific associated package/target selector and short-circuit quickly if a matching cache is found on disk, significantly cutting load times.\r\n\r\nBefore:\r\n\r\n```rust\r\npub struct LoadCargoConfig {\r\n    pub cargo_config: &CargoConfig,\r\n    pub load_out_dirs_from_check: bool,\r\n    pub with_proc_macro: bool,\r\n}\r\n\r\npub fn load_cargo(\r\n    root: &Path,\r\n    config: &LoadCargoConfig\r\n) -> Result<(AnalysisHost, vfs::Vfs)> {\r\n    // ...\r\n}\r\n```\r\n\r\nAfter:\r\n\r\n```rust\r\npub fn load_workspace(\r\n    root: &Path,\r\n    config: &CargoConfig,\r\n    progress: &dyn Fn(String),\r\n) -> Result<ProjectWorkspace> {\r\n        // ...\r\n}\r\n\r\npub struct LoadCargoConfig {\r\n    pub load_out_dirs_from_check: bool,\r\n    pub with_proc_macro: bool,\r\n}\r\n\r\npub fn load_cargo(\r\n    ws: ProjectWorkspace,\r\n    config: &LoadCargoConfig,\r\n    progress: &dyn Fn(String),\r\n) -> Result<(AnalysisHost, vfs::Vfs)> {\r\n    // ...\r\n}\r\n```\r\n\n\nCo-authored-by: Vincent Esche <regexident@gmail.com>", "tree": {"sha": "552f2252a656d93ed244a650b08073559dfb6a70", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/552f2252a656d93ed244a650b08073559dfb6a70"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/054caa81c5b3eb28fb99d508d8bd553d9920053b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgLA3dCRBK7hj4Ov3rIwAAdHIIAJOS6yxKaQ9g63GkMk2+wWnR\nD07T6lgwwxbka/1op5j98/XrZHfv5bN9aZuV4HiC5FEpcA3R/zl1i60tVseNXb1W\nSIxNl7y9K1bMuog1/nYF3tKr3Ii+6s8W+h2rIYxEb1IfUrylUADiAFSSmetF7CKx\nc/thwYY7AirhOXIdK10VhcCj9cZGv3cZncWbv4lIzxM4jxpgF9vhH9pp6NUE2rqX\ni2OkJopHGC2G7N6v+cdCl/XdDcNLUC5Jf4P+bsZK5W/SY6YVwSgyHEKx2kggqrbs\nrvoU+vwrnlgPquBggbOOJEZj057YoblmI3MUGz+vwT2sPIEm7Y7t+knKkmDFweQ=\n=pC0l\n-----END PGP SIGNATURE-----\n", "payload": "tree 552f2252a656d93ed244a650b08073559dfb6a70\nparent 80f9618f3775d22fddbfa6fac041aed6519eca4e\nparent 1a441682606dc6c5240e2516ac65717cc7f25ecf\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1613499868 +0000\ncommitter GitHub <noreply@github.com> 1613499868 +0000\n\nMerge #7690\n\n7690: Extract `fn load_workspace(\u2026)` from `fn load_cargo(\u2026)` r=matklad a=regexident\n\nUnfortunately in https://github.com/rust-analyzer/rust-analyzer/pull/7595 I forgot to `pub use` (rather than just `use`) the newly introduced `LoadCargoConfig`.\r\n\r\nSo this PR fixes this now.\r\n\r\nIt also:\r\n\r\n- splits up `fn load_cargo` into a \"workspace loading\" and a \"project loading\" phase\r\n- adds a `progress: &dyn Fn(String)` to allow third-parties to provide CLI progress updates, too\r\n\r\nThe motivation behind both of these is the fact that rust-analyzer currently does not support caching.\r\nAs such any third-party making use of `ra_ap_\u2026` needs to providing a caching layer itself.\r\nUnlike for rust-analyzer itself however a common use-pattern of third-parties is to analyze a specific target (`--lib`/`--bin <BIN>`/\u2026) from a specific package (`--package`). The targets/packages of a crate can be obtained via `ProjectWorkspace::load(\u2026)`, which currently is performed inside of `fn load_cargo`, effectively making the returned `ProjectWorkspace` inaccessible to the outer caller. With this information one can then provide early error handling via CLI (in case of ambiguities or invalid arguments, etc), instead of `fn load_cargo` failing with a possibly obscure error message. It also allows for annotating the persisted caches with its specific associated package/target selector and short-circuit quickly if a matching cache is found on disk, significantly cutting load times.\r\n\r\nBefore:\r\n\r\n```rust\r\npub struct LoadCargoConfig {\r\n    pub cargo_config: &CargoConfig,\r\n    pub load_out_dirs_from_check: bool,\r\n    pub with_proc_macro: bool,\r\n}\r\n\r\npub fn load_cargo(\r\n    root: &Path,\r\n    config: &LoadCargoConfig\r\n) -> Result<(AnalysisHost, vfs::Vfs)> {\r\n    // ...\r\n}\r\n```\r\n\r\nAfter:\r\n\r\n```rust\r\npub fn load_workspace(\r\n    root: &Path,\r\n    config: &CargoConfig,\r\n    progress: &dyn Fn(String),\r\n) -> Result<ProjectWorkspace> {\r\n        // ...\r\n}\r\n\r\npub struct LoadCargoConfig {\r\n    pub load_out_dirs_from_check: bool,\r\n    pub with_proc_macro: bool,\r\n}\r\n\r\npub fn load_cargo(\r\n    ws: ProjectWorkspace,\r\n    config: &LoadCargoConfig,\r\n    progress: &dyn Fn(String),\r\n) -> Result<(AnalysisHost, vfs::Vfs)> {\r\n    // ...\r\n}\r\n```\r\n\n\nCo-authored-by: Vincent Esche <regexident@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/054caa81c5b3eb28fb99d508d8bd553d9920053b", "html_url": "https://github.com/rust-lang/rust/commit/054caa81c5b3eb28fb99d508d8bd553d9920053b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/054caa81c5b3eb28fb99d508d8bd553d9920053b/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80f9618f3775d22fddbfa6fac041aed6519eca4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/80f9618f3775d22fddbfa6fac041aed6519eca4e", "html_url": "https://github.com/rust-lang/rust/commit/80f9618f3775d22fddbfa6fac041aed6519eca4e"}, {"sha": "1a441682606dc6c5240e2516ac65717cc7f25ecf", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a441682606dc6c5240e2516ac65717cc7f25ecf", "html_url": "https://github.com/rust-lang/rust/commit/1a441682606dc6c5240e2516ac65717cc7f25ecf"}], "stats": {"total": 91, "additions": 50, "deletions": 41}, "files": [{"sha": "ed732eb387902ebfe5853090035f62288bc457e7", "filename": "crates/rust-analyzer/src/cli.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/054caa81c5b3eb28fb99d508d8bd553d9920053b/crates%2Frust-analyzer%2Fsrc%2Fcli.rs", "raw_url": "https://github.com/rust-lang/rust/raw/054caa81c5b3eb28fb99d508d8bd553d9920053b/crates%2Frust-analyzer%2Fsrc%2Fcli.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli.rs?ref=054caa81c5b3eb28fb99d508d8bd553d9920053b", "patch": "@@ -18,7 +18,7 @@ pub use self::{\n     analysis_bench::{BenchCmd, BenchWhat, Position},\n     analysis_stats::AnalysisStatsCmd,\n     diagnostics::diagnostics,\n-    load_cargo::load_cargo,\n+    load_cargo::{load_workspace, load_workspace_at, LoadCargoConfig},\n     ssr::{apply_ssr_rules, search_for_patterns},\n };\n "}, {"sha": "8991f3bdb6487dd6f10a96bb61b77b7c7955105d", "filename": "crates/rust-analyzer/src/cli/analysis_bench.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/054caa81c5b3eb28fb99d508d8bd553d9920053b/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/054caa81c5b3eb28fb99d508d8bd553d9920053b/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_bench.rs?ref=054caa81c5b3eb28fb99d508d8bd553d9920053b", "patch": "@@ -17,7 +17,7 @@ use ide_db::{\n use vfs::AbsPathBuf;\n \n use crate::cli::{\n-    load_cargo::{load_cargo, LoadCargoConfig},\n+    load_cargo::{load_workspace_at, LoadCargoConfig},\n     print_memory_usage, Verbosity,\n };\n \n@@ -63,13 +63,13 @@ impl BenchCmd {\n         let start = Instant::now();\n         eprint!(\"loading: \");\n \n+        let cargo_config = Default::default();\n         let load_cargo_config = LoadCargoConfig {\n-            cargo_config: Default::default(),\n             load_out_dirs_from_check: self.load_output_dirs,\n             with_proc_macro: self.with_proc_macro,\n         };\n-\n-        let (mut host, vfs) = load_cargo(&self.path, &load_cargo_config)?;\n+        let (mut host, vfs) =\n+            load_workspace_at(&self.path, &cargo_config, &load_cargo_config, &|_| {})?;\n         eprintln!(\"{:?}\\n\", start.elapsed());\n \n         let file_id = {"}, {"sha": "9072d894478cd14fdfcdc430365ffa8de54f2974", "filename": "crates/rust-analyzer/src/cli/analysis_stats.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/054caa81c5b3eb28fb99d508d8bd553d9920053b/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/054caa81c5b3eb28fb99d508d8bd553d9920053b/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs?ref=054caa81c5b3eb28fb99d508d8bd553d9920053b", "patch": "@@ -25,7 +25,7 @@ use stdx::format_to;\n use syntax::AstNode;\n \n use crate::cli::{\n-    load_cargo::{load_cargo, LoadCargoConfig},\n+    load_cargo::{load_workspace_at, LoadCargoConfig},\n     print_memory_usage,\n     progress_report::ProgressReport,\n     report_metric, Result, Verbosity,\n@@ -59,12 +59,13 @@ impl AnalysisStatsCmd {\n         };\n \n         let mut db_load_sw = self.stop_watch();\n+        let cargo_config = Default::default();\n         let load_cargo_config = LoadCargoConfig {\n-            cargo_config: Default::default(),\n             load_out_dirs_from_check: self.load_output_dirs,\n             with_proc_macro: self.with_proc_macro,\n         };\n-        let (host, vfs) = load_cargo(&self.path, &load_cargo_config)?;\n+        let (host, vfs) =\n+            load_workspace_at(&self.path, &cargo_config, &load_cargo_config, &|_| {})?;\n         let db = host.raw_database();\n         eprintln!(\"{:<20} {}\", \"Database loaded:\", db_load_sw.elapsed());\n "}, {"sha": "876f6c44f3e8cdfecadaab22d11be3339f64d343", "filename": "crates/rust-analyzer/src/cli/diagnostics.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/054caa81c5b3eb28fb99d508d8bd553d9920053b/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/054caa81c5b3eb28fb99d508d8bd553d9920053b/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fdiagnostics.rs?ref=054caa81c5b3eb28fb99d508d8bd553d9920053b", "patch": "@@ -11,7 +11,7 @@ use ide::{DiagnosticsConfig, Severity};\n use ide_db::base_db::SourceDatabaseExt;\n \n use crate::cli::{\n-    load_cargo::{load_cargo, LoadCargoConfig},\n+    load_cargo::{load_workspace_at, LoadCargoConfig},\n     Result,\n };\n \n@@ -33,12 +33,9 @@ pub fn diagnostics(\n     load_out_dirs_from_check: bool,\n     with_proc_macro: bool,\n ) -> Result<()> {\n-    let load_cargo_config = LoadCargoConfig {\n-        cargo_config: Default::default(),\n-        load_out_dirs_from_check,\n-        with_proc_macro,\n-    };\n-    let (host, _vfs) = load_cargo(path, &load_cargo_config)?;\n+    let cargo_config = Default::default();\n+    let load_cargo_config = LoadCargoConfig { load_out_dirs_from_check, with_proc_macro };\n+    let (host, _vfs) = load_workspace_at(path, &cargo_config, &load_cargo_config, &|_| {})?;\n     let db = host.raw_database();\n     let analysis = host.analysis();\n "}, {"sha": "23442afacce090853b9e4b51d8e58702c3afc52c", "filename": "crates/rust-analyzer/src/cli/load_cargo.rs", "status": "modified", "additions": 26, "deletions": 13, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/054caa81c5b3eb28fb99d508d8bd553d9920053b/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/054caa81c5b3eb28fb99d508d8bd553d9920053b/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs?ref=054caa81c5b3eb28fb99d508d8bd553d9920053b", "patch": "@@ -14,16 +14,28 @@ use vfs::{loader::Handle, AbsPath, AbsPathBuf};\n use crate::reload::{ProjectFolders, SourceRootConfig};\n \n pub struct LoadCargoConfig {\n-    pub cargo_config: CargoConfig,\n     pub load_out_dirs_from_check: bool,\n     pub with_proc_macro: bool,\n }\n \n-pub fn load_cargo(root: &Path, config: &LoadCargoConfig) -> Result<(AnalysisHost, vfs::Vfs)> {\n+pub fn load_workspace_at(\n+    root: &Path,\n+    cargo_config: &CargoConfig,\n+    load_config: &LoadCargoConfig,\n+    progress: &dyn Fn(String),\n+) -> Result<(AnalysisHost, vfs::Vfs)> {\n     let root = AbsPathBuf::assert(std::env::current_dir()?.join(root));\n     let root = ProjectManifest::discover_single(&root)?;\n-    let ws = ProjectWorkspace::load(root, &config.cargo_config, &|_| {})?;\n+    let workspace = ProjectWorkspace::load(root, cargo_config, progress)?;\n \n+    load_workspace(workspace, load_config, progress)\n+}\n+\n+pub fn load_workspace(\n+    ws: ProjectWorkspace,\n+    config: &LoadCargoConfig,\n+    progress: &dyn Fn(String),\n+) -> Result<(AnalysisHost, vfs::Vfs)> {\n     let (sender, receiver) = unbounded();\n     let mut vfs = vfs::Vfs::default();\n     let mut loader = {\n@@ -42,7 +54,7 @@ pub fn load_cargo(root: &Path, config: &LoadCargoConfig) -> Result<(AnalysisHost\n     let build_data = if config.load_out_dirs_from_check {\n         let mut collector = BuildDataCollector::default();\n         ws.collect_build_data_configs(&mut collector);\n-        Some(collector.collect(&|_| {})?)\n+        Some(collector.collect(progress)?)\n     } else {\n         None\n     };\n@@ -66,11 +78,12 @@ pub fn load_cargo(root: &Path, config: &LoadCargoConfig) -> Result<(AnalysisHost\n     });\n \n     log::debug!(\"crate graph: {:?}\", crate_graph);\n-    let host = load(crate_graph, project_folders.source_root_config, &mut vfs, &receiver);\n+    let host =\n+        load_crate_graph(crate_graph, project_folders.source_root_config, &mut vfs, &receiver);\n     Ok((host, vfs))\n }\n \n-fn load(\n+fn load_crate_graph(\n     crate_graph: CrateGraph,\n     source_root_config: SourceRootConfig,\n     vfs: &mut vfs::Vfs,\n@@ -120,17 +133,17 @@ mod tests {\n     use hir::Crate;\n \n     #[test]\n-    fn test_loading_rust_analyzer() {\n+    fn test_loading_rust_analyzer() -> Result<()> {\n         let path = Path::new(env!(\"CARGO_MANIFEST_DIR\")).parent().unwrap().parent().unwrap();\n-        let load_cargo_config = LoadCargoConfig {\n-            cargo_config: Default::default(),\n-            load_out_dirs_from_check: false,\n-            with_proc_macro: false,\n-        };\n+        let cargo_config = Default::default();\n+        let load_cargo_config =\n+            LoadCargoConfig { load_out_dirs_from_check: false, with_proc_macro: false };\n+        let (host, _vfs) = load_workspace_at(path, &cargo_config, &load_cargo_config, &|_| {})?;\n \n-        let (host, _vfs) = load_cargo(path, &load_cargo_config).unwrap();\n         let n_crates = Crate::all(host.raw_database()).len();\n         // RA has quite a few crates, but the exact count doesn't matter\n         assert!(n_crates > 20);\n+\n+        Ok(())\n     }\n }"}, {"sha": "71c61ed58a40f04898328a6345d07cf965f803e9", "filename": "crates/rust-analyzer/src/cli/ssr.rs", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/054caa81c5b3eb28fb99d508d8bd553d9920053b/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fssr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/054caa81c5b3eb28fb99d508d8bd553d9920053b/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fssr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fssr.rs?ref=054caa81c5b3eb28fb99d508d8bd553d9920053b", "patch": "@@ -1,19 +1,18 @@\n //! Applies structured search replace rules from the command line.\n \n use crate::cli::{\n-    load_cargo::{load_cargo, LoadCargoConfig},\n+    load_cargo::{load_workspace_at, LoadCargoConfig},\n     Result,\n };\n use ssr::{MatchFinder, SsrPattern, SsrRule};\n \n pub fn apply_ssr_rules(rules: Vec<SsrRule>) -> Result<()> {\n     use ide_db::base_db::SourceDatabaseExt;\n-    let load_cargo_config = LoadCargoConfig {\n-        cargo_config: Default::default(),\n-        load_out_dirs_from_check: true,\n-        with_proc_macro: true,\n-    };\n-    let (host, vfs) = load_cargo(&std::env::current_dir()?, &load_cargo_config)?;\n+    let cargo_config = Default::default();\n+    let load_cargo_config =\n+        LoadCargoConfig { load_out_dirs_from_check: true, with_proc_macro: true };\n+    let (host, vfs) =\n+        load_workspace_at(&std::env::current_dir()?, &cargo_config, &load_cargo_config, &|_| {})?;\n     let db = host.raw_database();\n     let mut match_finder = MatchFinder::at_first_file(db)?;\n     for rule in rules {\n@@ -36,12 +35,11 @@ pub fn apply_ssr_rules(rules: Vec<SsrRule>) -> Result<()> {\n pub fn search_for_patterns(patterns: Vec<SsrPattern>, debug_snippet: Option<String>) -> Result<()> {\n     use ide_db::base_db::SourceDatabaseExt;\n     use ide_db::symbol_index::SymbolsDatabase;\n-    let load_cargo_config = LoadCargoConfig {\n-        cargo_config: Default::default(),\n-        load_out_dirs_from_check: true,\n-        with_proc_macro: true,\n-    };\n-    let (host, _vfs) = load_cargo(&std::env::current_dir()?, &load_cargo_config)?;\n+    let cargo_config = Default::default();\n+    let load_cargo_config =\n+        LoadCargoConfig { load_out_dirs_from_check: true, with_proc_macro: true };\n+    let (host, _vfs) =\n+        load_workspace_at(&std::env::current_dir()?, &cargo_config, &load_cargo_config, &|_| {})?;\n     let db = host.raw_database();\n     let mut match_finder = MatchFinder::at_first_file(db)?;\n     for pattern in patterns {"}]}