{"sha": "620d65c661f9d98e958a29c6bad28486cb73e2b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyMGQ2NWM2NjFmOWQ5OGU5NThhMjljNmJhZDI4NDg2Y2I3M2UyYjY=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-08-08T14:00:14Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-08-08T14:00:14Z"}, "message": "Fix some small bugs", "tree": {"sha": "8e5d21f4e46719735d05405fda09c1fc5112b9b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e5d21f4e46719735d05405fda09c1fc5112b9b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/620d65c661f9d98e958a29c6bad28486cb73e2b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/620d65c661f9d98e958a29c6bad28486cb73e2b6", "html_url": "https://github.com/rust-lang/rust/commit/620d65c661f9d98e958a29c6bad28486cb73e2b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/620d65c661f9d98e958a29c6bad28486cb73e2b6/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f2e68e38e210e54034ffd4957c58098a90b7d98", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f2e68e38e210e54034ffd4957c58098a90b7d98", "html_url": "https://github.com/rust-lang/rust/commit/7f2e68e38e210e54034ffd4957c58098a90b7d98"}], "stats": {"total": 94, "additions": 83, "deletions": 11}, "files": [{"sha": "669927ddcce1608277a3a14bd17fd60f39ba54ef", "filename": "0005-Disable-future-and-task-modules-because-they-contain.patch", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/620d65c661f9d98e958a29c6bad28486cb73e2b6/0005-Disable-future-and-task-modules-because-they-contain.patch", "raw_url": "https://github.com/rust-lang/rust/raw/620d65c661f9d98e958a29c6bad28486cb73e2b6/0005-Disable-future-and-task-modules-because-they-contain.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/0005-Disable-future-and-task-modules-because-they-contain.patch?ref=620d65c661f9d98e958a29c6bad28486cb73e2b6", "patch": "@@ -0,0 +1,62 @@\n+From 439444eb7d5557daa5e8cfafd1317816fefdad70 Mon Sep 17 00:00:00 2001\n+From: bjorn3 <bjorn3@users.noreply.github.com>\n+Date: Wed, 8 Aug 2018 15:51:42 +0200\n+Subject: [PATCH] Disable future and task modules, because they contain unsized\n+ types\n+\n+---\n+ src/libcore/lib.rs | 2 ++\n+ src/libcore/mem.rs | 6 ++++--\n+ 2 files changed, 6 insertions(+), 2 deletions(-)\n+\n+diff --git a/src/libcore/lib.rs b/src/libcore/lib.rs\n+index 71fcff2..7dcbb4b 100644\n+--- a/src/libcore/lib.rs\n++++ b/src/libcore/lib.rs\n+@@ -202,9 +202,11 @@ pub mod time;\n+ \n+ pub mod unicode;\n+ \n++/*\n+ /* Async */\n+ pub mod future;\n+ pub mod task;\n++*/\n+ \n+ /* Heap memory allocator trait */\n+ #[allow(missing_docs)]\n+diff --git a/src/libcore/mem.rs b/src/libcore/mem.rs\n+index 642fffa..f5a22ab 100644\n+--- a/src/libcore/mem.rs\n++++ b/src/libcore/mem.rs\n+@@ -18,12 +18,12 @@\n+ use clone;\n+ use cmp;\n+ use fmt;\n+-use future::{Future, UnsafeFutureObj};\n++//use future::{Future, UnsafeFutureObj};\n+ use hash;\n+ use intrinsics;\n+ use marker::{Copy, PhantomData, Sized, Unpin, Unsize};\n+ use ptr;\n+-use task::{Context, Poll};\n++//use task::{Context, Poll};\n+ use ops::{Deref, DerefMut, CoerceUnsized};\n+ \n+ #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+@@ -1148,6 +1148,7 @@ impl<'a, T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<PinMut<'a, U>> for PinM\n+ #[unstable(feature = \"pin\", issue = \"49150\")]\n+ impl<'a, T: ?Sized> Unpin for PinMut<'a, T> {}\n+ \n++/*\n+ #[unstable(feature = \"futures_api\", issue = \"50547\")]\n+ unsafe impl<'a, T, F> UnsafeFutureObj<'a, T> for PinMut<'a, F>\n+     where F: Future<Output = T> + 'a\n+@@ -1162,3 +1163,4 @@ unsafe impl<'a, T, F> UnsafeFutureObj<'a, T> for PinMut<'a, F>\n+ \n+     unsafe fn drop(_ptr: *mut ()) {}\n+ }\n++*/\n+-- \n+2.15.2 (Apple Git-101.1)\n+"}, {"sha": "25aab1940987db16224c39a27861389733eb2ccd", "filename": "src/abi.rs", "status": "modified", "additions": 21, "deletions": 11, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/620d65c661f9d98e958a29c6bad28486cb73e2b6/src%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/620d65c661f9d98e958a29c6bad28486cb73e2b6/src%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi.rs?ref=620d65c661f9d98e958a29c6bad28486cb73e2b6", "patch": "@@ -204,7 +204,7 @@ pub fn codegen_fn_prelude<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx>, start_ebb\n     }\n \n     let func_params = fx.mir.args_iter().map(|local| {\n-        let arg_ty = fx.mir.local_decls[local].ty;\n+        let arg_ty = fx.monomorphize(&fx.mir.local_decls[local].ty);\n \n         // Adapted from https://github.com/rust-lang/rust/blob/145155dc96757002c7b2e9de8489416e2fdbbd57/src/librustc_codegen_llvm/mir/mod.rs#L442-L482\n         if Some(local) == fx.mir.spread_arg {\n@@ -215,7 +215,7 @@ pub fn codegen_fn_prelude<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx>, start_ebb\n \n             let tupled_arg_tys = match arg_ty.sty {\n                 ty::TyTuple(ref tys) => tys,\n-                _ => bug!(\"spread argument isn't a tuple?!\")\n+                _ => bug!(\"spread argument isn't a tuple?! but {:?}\", arg_ty),\n             };\n \n             let mut ebb_params = Vec::new();\n@@ -290,11 +290,7 @@ pub fn codegen_call<'a, 'tcx: 'a>(\n     let fn_ty = func.layout().ty;\n     let sig = ty_fn_sig(fx.tcx, fn_ty);\n \n-    let return_place = if let Some((place, _)) = destination {\n-        Some(trans_place(fx, place))\n-    } else {\n-        None\n-    };\n+    let return_place = destination.as_ref().map(|(place, _)| trans_place(fx, place));\n \n     // Unpack arguments tuple for closures\n     let args = if sig.abi == Abi::RustCall {\n@@ -331,11 +327,25 @@ pub fn codegen_call<'a, 'tcx: 'a>(\n             let nil_ty = fx.tcx.mk_nil();\n             let u64_layout = fx.layout_of(fx.tcx.types.u64);\n             let usize_layout = fx.layout_of(fx.tcx.types.usize);\n-            let ret = return_place.expect(\"return place\");\n-            match intrinsic {\n-                \"abort\" => {\n-                    fx.bcx.ins().trap(TrapCode::User(!0 - 1));\n+\n+            let ret = match return_place {\n+                Some(ret) => ret,\n+                None => {\n+                    println!(\"codegen_call(fx, {:?}, {:?}, {:?})\", func, args, destination);\n+                    // Insert non returning intrinsics here\n+                    match intrinsic {\n+                        \"abort\" => {\n+                            fx.bcx.ins().trap(TrapCode::User(!0 - 1));\n+                        }\n+                        \"unreachable\" => {\n+                            fx.bcx.ins().trap(TrapCode::User(!0 - 1));\n+                        }\n+                        _ => unimplemented!(\"unsupported instrinsic {}\", intrinsic),\n+                    }\n+                    return;\n                 }\n+            };\n+            match intrinsic {\n                 \"assume\" => {\n                     assert_eq!(args.len(), 1);\n                 }"}]}