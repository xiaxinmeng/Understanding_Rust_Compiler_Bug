{"sha": "917d5ab34eabab8e2f39e1c0815d67b583e3d422", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxN2Q1YWIzNGVhYmFiOGUyZjM5ZTFjMDgxNWQ2N2I1ODNlM2Q0MjI=", "commit": {"author": {"name": "Brian Leibig", "email": "brian.leibig@gmail.com", "date": "2013-04-02T20:08:34Z"}, "committer": {"name": "Brian Leibig", "email": "brian.leibig@gmail.com", "date": "2013-04-10T16:45:53Z"}, "message": "Add debug info for vectors", "tree": {"sha": "24b334537a27157323108074a9442c6434dc1cbb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24b334537a27157323108074a9442c6434dc1cbb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/917d5ab34eabab8e2f39e1c0815d67b583e3d422", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/917d5ab34eabab8e2f39e1c0815d67b583e3d422", "html_url": "https://github.com/rust-lang/rust/commit/917d5ab34eabab8e2f39e1c0815d67b583e3d422", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/917d5ab34eabab8e2f39e1c0815d67b583e3d422/comments", "author": {"login": "bleibig", "id": 1253302, "node_id": "MDQ6VXNlcjEyNTMzMDI=", "avatar_url": "https://avatars.githubusercontent.com/u/1253302?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bleibig", "html_url": "https://github.com/bleibig", "followers_url": "https://api.github.com/users/bleibig/followers", "following_url": "https://api.github.com/users/bleibig/following{/other_user}", "gists_url": "https://api.github.com/users/bleibig/gists{/gist_id}", "starred_url": "https://api.github.com/users/bleibig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bleibig/subscriptions", "organizations_url": "https://api.github.com/users/bleibig/orgs", "repos_url": "https://api.github.com/users/bleibig/repos", "events_url": "https://api.github.com/users/bleibig/events{/privacy}", "received_events_url": "https://api.github.com/users/bleibig/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bleibig", "id": 1253302, "node_id": "MDQ6VXNlcjEyNTMzMDI=", "avatar_url": "https://avatars.githubusercontent.com/u/1253302?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bleibig", "html_url": "https://github.com/bleibig", "followers_url": "https://api.github.com/users/bleibig/followers", "following_url": "https://api.github.com/users/bleibig/following{/other_user}", "gists_url": "https://api.github.com/users/bleibig/gists{/gist_id}", "starred_url": "https://api.github.com/users/bleibig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bleibig/subscriptions", "organizations_url": "https://api.github.com/users/bleibig/orgs", "repos_url": "https://api.github.com/users/bleibig/repos", "events_url": "https://api.github.com/users/bleibig/events{/privacy}", "received_events_url": "https://api.github.com/users/bleibig/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c08be9b48f5a4413a35728a0c392df3b0bed785", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c08be9b48f5a4413a35728a0c392df3b0bed785", "html_url": "https://github.com/rust-lang/rust/commit/3c08be9b48f5a4413a35728a0c392df3b0bed785"}], "stats": {"total": 117, "additions": 102, "deletions": 15}, "files": [{"sha": "8daf37260ac2651e3895e1d49a506467731071b3", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 102, "deletions": 15, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/917d5ab34eabab8e2f39e1c0815d67b583e3d422/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/917d5ab34eabab8e2f39e1c0815d67b583e3d422/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=917d5ab34eabab8e2f39e1c0815d67b583e3d422", "patch": "@@ -565,8 +565,8 @@ fn create_boxed_type(cx: @CrateContext, contents: ty::t,\n     let fname = filename_from_span(cx, span);\n     let file_node = create_file(cx, fname);\n     //let cu_node = create_compile_unit_metadata(cx, fname);\n-    let uint_t = ty::mk_uint(cx.tcx);\n-    let refcount_type = create_basic_type(cx, uint_t, span);\n+    let int_t = ty::mk_int(cx.tcx);\n+    let refcount_type = create_basic_type(cx, int_t, span);\n     let name = ty_to_str(cx.tcx, contents);\n     let scx = create_structure(file_node, @fmt!(\"box<%s>\", name), 0);\n     add_member(scx, ~\"refcnt\", 0, sys::size_of::<uint>() as int,\n@@ -621,33 +621,97 @@ fn create_composite_type(type_tag: int, name: &str, file: ValueRef,\n     return llmdnode(lldata);\n }\n \n-fn create_vec(cx: @CrateContext, vec_t: ty::t, elem_t: ty::t,\n-              vec_ty_span: codemap::span) -> @Metadata<TyDescMetadata> {\n+fn create_fixed_vec(cx: @CrateContext, vec_t: ty::t, elem_t: ty::t,\n+                    len: int, span: span) -> @Metadata<TyDescMetadata> {\n+    let t_md = create_ty(cx, elem_t, span);\n+    let fname = filename_from_span(cx, span);\n+    let file_node = create_file(cx, fname);\n+    let (size, align) = size_and_align_of(cx, elem_t);\n+    let subrange = llmdnode(~[lltag(SubrangeTag), lli64(0), lli64(len - 1)]);\n+    let name = fmt!(\"[%s]\", ty_to_str(cx.tcx, elem_t));\n+    let array = create_composite_type(ArrayTypeTag, name, file_node.node, 0,\n+                                      size * len, align, 0, Some(t_md.node),\n+                                      Some(~[subrange]));\n+    @Metadata {\n+        node: array,\n+        data: TyDescMetadata {\n+            hash: ty::type_id(vec_t)\n+        }\n+    }\n+}\n+\n+fn create_boxed_vec(cx: @CrateContext, vec_t: ty::t, elem_t: ty::t,\n+                    vec_ty_span: codemap::span)\n+    -> @Metadata<TyDescMetadata> {\n     let fname = filename_from_span(cx, vec_ty_span);\n     let file_node = create_file(cx, fname);\n     let elem_ty_md = create_ty(cx, elem_t, vec_ty_span);\n-    let scx = create_structure(file_node,\n+    let vec_scx = create_structure(file_node,\n                                @/*bad*/ copy ty_to_str(cx.tcx, vec_t), 0);\n     let size_t_type = create_basic_type(cx, ty::mk_uint(cx.tcx), vec_ty_span);\n-    add_member(scx, ~\"fill\", 0, sys::size_of::<libc::size_t>() as int,\n+    add_member(vec_scx, ~\"fill\", 0, sys::size_of::<libc::size_t>() as int,\n                sys::min_align_of::<libc::size_t>() as int, size_t_type.node);\n-    add_member(scx, ~\"alloc\", 0, sys::size_of::<libc::size_t>() as int,\n+    add_member(vec_scx, ~\"alloc\", 0, sys::size_of::<libc::size_t>() as int,\n                sys::min_align_of::<libc::size_t>() as int, size_t_type.node);\n     let subrange = llmdnode(~[lltag(SubrangeTag), lli64(0), lli64(0)]);\n     let (arr_size, arr_align) = size_and_align_of(cx, elem_t);\n-    let data_ptr = create_composite_type(ArrayTypeTag, ~\"\", file_node.node, 0,\n+    let name = fmt!(\"[%s]\", ty_to_str(cx.tcx, elem_t));\n+    let data_ptr = create_composite_type(ArrayTypeTag, name, file_node.node, 0,\n                                          arr_size, arr_align, 0,\n                                          Some(elem_ty_md.node),\n                                          Some(~[subrange]));\n-    add_member(scx, ~\"data\", 0, 0, // clang says the size should be 0\n+    add_member(vec_scx, ~\"data\", 0, 0, // clang says the size should be 0\n                sys::min_align_of::<u8>() as int, data_ptr);\n+    let llnode = finish_structure(vec_scx);\n+    let vec_md = @Metadata {\n+        node: llnode,\n+        data: TyDescMetadata {\n+            hash: ty::type_id(vec_t)\n+        }\n+    };\n+\n+    let box_scx = create_structure(file_node, @fmt!(\"box<%s>\", name), 0);\n+    let int_t = ty::mk_int(cx.tcx);\n+    let refcount_type = create_basic_type(cx, int_t, vec_ty_span);\n+    add_member(box_scx, ~\"refcnt\", 0, sys::size_of::<uint>() as int,\n+               sys::min_align_of::<uint>() as int, refcount_type.node);\n+    let (vp, vpsize, vpalign) = voidptr();\n+    add_member(box_scx, ~\"tydesc\", 0, vpsize, vpalign, vp);\n+    add_member(box_scx, ~\"prev\", 0, vpsize, vpalign, vp);\n+    add_member(box_scx, ~\"next\", 0, vpsize, vpalign, vp);\n+    let size = 2 * sys::size_of::<int>() as int;\n+    let align = sys::min_align_of::<int>() as int;\n+    add_member(box_scx, ~\"boxed\", 0, size, align, vec_md.node);\n+    let llnode = finish_structure(box_scx);\n+    let mdval = @Metadata {\n+        node: llnode,\n+        data: TyDescMetadata {\n+            hash: ty::type_id(elem_t)\n+        }\n+    };\n+    return mdval;\n+}\n+\n+fn create_vec_slice(cx: @CrateContext, vec_t: ty::t, elem_t: ty::t, span: span)\n+    -> @Metadata<TyDescMetadata> {\n+    let fname = filename_from_span(cx, span);\n+    let file_node = create_file(cx, fname);\n+    let elem_ty_md = create_ty(cx, elem_t, span);\n+    let uint_type = create_basic_type(cx, ty::mk_uint(cx.tcx), span);\n+    let elem_ptr = create_pointer_type(cx, elem_t, span, elem_ty_md);\n+    let scx = create_structure(file_node, @ty_to_str(cx.tcx, vec_t), 0);\n+    let (_, ptr_size, ptr_align) = voidptr();\n+    add_member(scx, ~\"vec\", 0, ptr_size, ptr_align, elem_ptr.node);\n+    add_member(scx, ~\"length\", 0, sys::size_of::<uint>() as int,\n+               sys::min_align_of::<uint>() as int, uint_type.node);\n     let llnode = finish_structure(scx);\n-    @Metadata {\n+    let mdval = @Metadata {\n         node: llnode,\n         data: TyDescMetadata {\n             hash: ty::type_id(vec_t)\n         }\n-    }\n+    };\n+    return mdval;\n }\n \n fn create_ty(cx: @CrateContext, t: ty::t, span: span)\n@@ -664,8 +728,20 @@ fn create_ty(cx: @CrateContext, t: ty::t, span: span)\n     match sty {\n         ty::ty_nil | ty::ty_bot | ty::ty_bool | ty::ty_int(_) | ty::ty_uint(_)\n         | ty::ty_float(_) => create_basic_type(cx, t, span),\n-        ty::ty_estr(_vstore) => {\n-            cx.sess.span_bug(span, ~\"debuginfo for estr NYI\")\n+        ty::ty_estr(ref vstore) => {\n+            let i8_t = ty::mk_i8(cx.tcx);\n+            match *vstore {\n+                ty::vstore_fixed(len) => {\n+                    create_fixed_vec(cx, t, i8_t, len as int + 1, span)\n+                },\n+                ty::vstore_uniq | ty::vstore_box => {\n+                    let box_md = create_boxed_vec(cx, t, i8_t, span);\n+                    create_pointer_type(cx, t, span, box_md)\n+                }\n+                ty::vstore_slice(_region) => {\n+                    create_vec_slice(cx, t, i8_t, span)\n+                }\n+            }\n         },\n         ty::ty_enum(_did, ref _substs) => {\n             cx.sess.span_bug(span, ~\"debuginfo for enum NYI\")\n@@ -675,8 +751,19 @@ fn create_ty(cx: @CrateContext, t: ty::t, span: span)\n             let box_md = create_boxed_type(cx, mt.ty, span, boxed);\n             create_pointer_type(cx, t, span, box_md)\n         },\n-        ty::ty_evec(ref _mt, ref _vstore) => {\n-            cx.sess.span_bug(span, ~\"debuginfo for evec NYI\")\n+        ty::ty_evec(ref mt, ref vstore) => {\n+            match *vstore {\n+                ty::vstore_fixed(len) => {\n+                    create_fixed_vec(cx, t, mt.ty, len as int, span)\n+                },\n+                ty::vstore_uniq | ty::vstore_box => {\n+                    let box_md = create_boxed_vec(cx, t, mt.ty, span);\n+                    create_pointer_type(cx, t, span, box_md)\n+                },\n+                ty::vstore_slice(_region) => {\n+                    create_vec_slice(cx, t, mt.ty, span)\n+                }\n+            }\n         },\n         ty::ty_ptr(ref mt) => {\n             let pointee = create_ty(cx, mt.ty, span);"}]}