{"sha": "0da58007451a154da2480160429e1604a1f5f0ec", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkYTU4MDA3NDUxYTE1NGRhMjQ4MDE2MDQyOWUxNjA0YTFmNWYwZWM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-22T20:35:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-22T20:35:45Z"}, "message": "Auto merge of #76810 - Mark-Simulacrum:fix-lld-macos, r=alexcrichton\n\nDon't dynamically link LLVM tools unless rustc is too\n\nThis PR initially tried to support link-shared on all of our target platforms (other than Windows), but ran into a number of difficulties:\n * LLVM doesn't really support a shared link on macOS (llvm-config runs into problems with the version suffix)\n * LLVM doesn't seem to support a shared link when cross-compiling (the libLLVM.so ends up empty and symbols are not found)\n\nSo, this PR has now been revised such that we don't attempt to dynamically link LLVM tools (even if that would, otherwise, be supported) on targets where LLVM is statically linked to rustc. Currently that's basically everything except for x86_64-unknown-linux-gnu (where we dynamically link to avoid rerunning ThinLTO in each stage).\n\nFollow-up to #76708.\nFixes #76698.", "tree": {"sha": "384aa61fb969f1c432b7fb5985e359092aa4bf80", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/384aa61fb969f1c432b7fb5985e359092aa4bf80"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0da58007451a154da2480160429e1604a1f5f0ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0da58007451a154da2480160429e1604a1f5f0ec", "html_url": "https://github.com/rust-lang/rust/commit/0da58007451a154da2480160429e1604a1f5f0ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0da58007451a154da2480160429e1604a1f5f0ec/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0bc267512fc0cb49c86978192857e8187017f0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0bc267512fc0cb49c86978192857e8187017f0b", "html_url": "https://github.com/rust-lang/rust/commit/e0bc267512fc0cb49c86978192857e8187017f0b"}, {"sha": "389b7ff19074988a3855bbc5ba7b19eb903a6fb4", "url": "https://api.github.com/repos/rust-lang/rust/commits/389b7ff19074988a3855bbc5ba7b19eb903a6fb4", "html_url": "https://github.com/rust-lang/rust/commit/389b7ff19074988a3855bbc5ba7b19eb903a6fb4"}], "stats": {"total": 31, "additions": 13, "deletions": 18}, "files": [{"sha": "c119ae38fc391539bc0a399f900cb43853e78f99", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0da58007451a154da2480160429e1604a1f5f0ec/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0da58007451a154da2480160429e1604a1f5f0ec/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=0da58007451a154da2480160429e1604a1f5f0ec", "patch": "@@ -2400,14 +2400,11 @@ fn maybe_install_llvm(builder: &Builder<'_>, target: TargetSelection, dst_libdir\n         return;\n     }\n \n-    // On macOS for some reason the llvm-config binary behaves differently and\n-    // and fails on missing .a files if run without --link-shared. If run with\n-    // that option, it still fails, but because we only ship a libLLVM.dylib\n-    // rather than libLLVM-11-rust-....dylib file.\n-    //\n-    // For now just don't use llvm-config here on macOS; that will fail to\n-    // support CI-built LLVM, but until we work out the different behavior that\n-    // is fine as it is off by default.\n+    // On macOS, rustc (and LLVM tools) link to an unversioned libLLVM.dylib\n+    // instead of libLLVM-11-rust-....dylib, as on linux. It's not entirely\n+    // clear why this is the case, though. llvm-config will emit the versioned\n+    // paths and we don't want those in the sysroot (as we're expecting\n+    // unversioned paths).\n     if target.contains(\"apple-darwin\") {\n         let src_libdir = builder.llvm_out(target).join(\"lib\");\n         let llvm_dylib_path = src_libdir.join(\"libLLVM.dylib\");"}, {"sha": "bdc58bfbb75ddc9ef0db3ea4c956f21805a6878c", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0da58007451a154da2480160429e1604a1f5f0ec/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0da58007451a154da2480160429e1604a1f5f0ec/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=0da58007451a154da2480160429e1604a1f5f0ec", "patch": "@@ -128,8 +128,10 @@ impl Step for Llvm {\n                 Err(m) => m,\n             };\n \n-        if builder.config.llvm_link_shared && target.contains(\"windows\") {\n-            panic!(\"shared linking to LLVM is not currently supported on Windows\");\n+        if builder.config.llvm_link_shared\n+            && (target.contains(\"windows\") || target.contains(\"apple-darwin\"))\n+        {\n+            panic!(\"shared linking to LLVM is not currently supported on {}\", target.triple);\n         }\n \n         builder.info(&format!(\"Building LLVM for {}\", target));\n@@ -208,7 +210,10 @@ impl Step for Llvm {\n         // which saves both memory during parallel links and overall disk space\n         // for the tools. We don't do this on every platform as it doesn't work\n         // equally well everywhere.\n-        if builder.llvm_link_tools_dynamically(target) {\n+        //\n+        // If we're not linking rustc to a dynamic LLVM, though, then don't link\n+        // tools to it.\n+        if builder.llvm_link_tools_dynamically(target) && builder.config.llvm_link_shared {\n             cfg.define(\"LLVM_LINK_LLVM_DYLIB\", \"ON\");\n         }\n "}, {"sha": "5231aa2e7661979f0ff006deeb5093682900311e", "filename": "src/ci/run.sh", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0da58007451a154da2480160429e1604a1f5f0ec/src%2Fci%2Frun.sh", "raw_url": "https://github.com/rust-lang/rust/raw/0da58007451a154da2480160429e1604a1f5f0ec/src%2Fci%2Frun.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Frun.sh?ref=0da58007451a154da2480160429e1604a1f5f0ec", "patch": "@@ -75,13 +75,6 @@ if [ \"$DEPLOY$DEPLOY_ALT\" = \"1\" ]; then\n   RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --set rust.remap-debuginfo\"\n   RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --debuginfo-level-std=1\"\n \n-  # If we're distributing binaries, we want a shared LLVM link. We're already\n-  # going to link LLVM to the LLVM tools dynamically, so we need to ship a\n-  # libLLVM library anyway.\n-  if !isWindows; then\n-    RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --set llvm.link-shared=true\"\n-  fi\n-\n   if [ \"$NO_LLVM_ASSERTIONS\" = \"1\" ]; then\n     RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --disable-llvm-assertions\"\n   elif [ \"$DEPLOY_ALT\" != \"\" ]; then"}]}