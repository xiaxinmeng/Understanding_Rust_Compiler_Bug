{"sha": "4bcde6bc068b8962d368fc70bd68cb21f5d1013c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiY2RlNmJjMDY4Yjg5NjJkMzY4ZmM3MGJkNjhjYjIxZjVkMTAxM2M=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-11-03T19:02:19Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-11-10T09:37:10Z"}, "message": "uv: Provide a helper fn to Result<(), IoError>", "tree": {"sha": "01b8cb4cf35963b47de7adf072cc81d043226579", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/01b8cb4cf35963b47de7adf072cc81d043226579"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4bcde6bc068b8962d368fc70bd68cb21f5d1013c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4bcde6bc068b8962d368fc70bd68cb21f5d1013c", "html_url": "https://github.com/rust-lang/rust/commit/4bcde6bc068b8962d368fc70bd68cb21f5d1013c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4bcde6bc068b8962d368fc70bd68cb21f5d1013c/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30c885ea52458b361bb8f215c17c384743e6851a", "url": "https://api.github.com/repos/rust-lang/rust/commits/30c885ea52458b361bb8f215c17c384743e6851a", "html_url": "https://github.com/rust-lang/rust/commit/30c885ea52458b361bb8f215c17c384743e6851a"}], "stats": {"total": 93, "additions": 19, "deletions": 74}, "files": [{"sha": "6aa8723a4017dadd1a4d3aa26cc264354d306ac0", "filename": "src/librustuv/lib.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4bcde6bc068b8962d368fc70bd68cb21f5d1013c/src%2Flibrustuv%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bcde6bc068b8962d368fc70bd68cb21f5d1013c/src%2Flibrustuv%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Flib.rs?ref=4bcde6bc068b8962d368fc70bd68cb21f5d1013c", "patch": "@@ -341,16 +341,19 @@ pub fn uv_error_to_io_error(uverr: UvError) -> IoError {\n     }\n }\n \n-/// Given a uv handle, convert a callback status to a UvError\n-pub fn status_to_maybe_uv_error(status: c_int) -> Option<UvError>\n-{\n+/// Given a uv error code, convert a callback status to a UvError\n+pub fn status_to_maybe_uv_error(status: c_int) -> Option<UvError> {\n     if status >= 0 {\n         None\n     } else {\n         Some(UvError(status))\n     }\n }\n \n+pub fn status_to_io_result(status: c_int) -> Result<(), IoError> {\n+    if status >= 0 {Ok(())} else {Err(uv_error_to_io_error(UvError(status)))}\n+}\n+\n /// The uv buffer type\n pub type Buf = uvll::uv_buf_t;\n "}, {"sha": "1dbc7d71543e1aa7a25cfe50ef32a39d25c112f1", "filename": "src/librustuv/uvio.rs", "status": "modified", "additions": 13, "deletions": 71, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/4bcde6bc068b8962d368fc70bd68cb21f5d1013c/src%2Flibrustuv%2Fuvio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bcde6bc068b8962d368fc70bd68cb21f5d1013c/src%2Flibrustuv%2Fuvio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fuvio.rs?ref=4bcde6bc068b8962d368fc70bd68cb21f5d1013c", "patch": "@@ -992,11 +992,7 @@ fn accept_simultaneously(stream: StreamWatcher, a: int) -> Result<(), IoError> {\n     let r = unsafe {\n         uvll::uv_tcp_simultaneous_accepts(stream.native_handle(), a as c_int)\n     };\n-\n-    match status_to_maybe_uv_error(r) {\n-        Some(err) => Err(uv_error_to_io_error(err)),\n-        None => Ok(())\n-    }\n+    status_to_io_result(r)\n }\n \n impl RtioTcpAcceptor for UvTcpAcceptor {\n@@ -1197,11 +1193,7 @@ impl RtioTcpStream for UvTcpStream {\n             let r = unsafe {\n                 uvll::uv_tcp_nodelay(self_.watcher.native_handle(), 0 as c_int)\n             };\n-\n-            match status_to_maybe_uv_error(r) {\n-                Some(err) => Err(uv_error_to_io_error(err)),\n-                None => Ok(())\n-            }\n+            status_to_io_result(r)\n         }\n     }\n \n@@ -1210,11 +1202,7 @@ impl RtioTcpStream for UvTcpStream {\n             let r = unsafe {\n                 uvll::uv_tcp_nodelay(self_.watcher.native_handle(), 1 as c_int)\n             };\n-\n-            match status_to_maybe_uv_error(r) {\n-                Some(err) => Err(uv_error_to_io_error(err)),\n-                None => Ok(())\n-            }\n+            status_to_io_result(r)\n         }\n     }\n \n@@ -1224,11 +1212,7 @@ impl RtioTcpStream for UvTcpStream {\n                 uvll::uv_tcp_keepalive(self_.watcher.native_handle(), 1 as c_int,\n                                        delay_in_seconds as c_uint)\n             };\n-\n-            match status_to_maybe_uv_error(r) {\n-                Some(err) => Err(uv_error_to_io_error(err)),\n-                None => Ok(())\n-            }\n+            status_to_io_result(r)\n         }\n     }\n \n@@ -1238,11 +1222,7 @@ impl RtioTcpStream for UvTcpStream {\n                 uvll::uv_tcp_keepalive(self_.watcher.native_handle(),\n                                        0 as c_int, 0 as c_uint)\n             };\n-\n-            match status_to_maybe_uv_error(r) {\n-                Some(err) => Err(uv_error_to_io_error(err)),\n-                None => Ok(())\n-            }\n+            status_to_io_result(r)\n         }\n     }\n }\n@@ -1348,11 +1328,7 @@ impl RtioUdpSocket for UvUdpSocket {\n                                                 uvll::UV_JOIN_GROUP)\n                 }\n             };\n-\n-            match status_to_maybe_uv_error(r) {\n-                Some(err) => Err(uv_error_to_io_error(err)),\n-                None => Ok(())\n-            }\n+            status_to_io_result(r)\n         }\n     }\n \n@@ -1365,100 +1341,66 @@ impl RtioUdpSocket for UvUdpSocket {\n                                                 uvll::UV_LEAVE_GROUP)\n                 }\n             };\n-\n-            match status_to_maybe_uv_error(r) {\n-                Some(err) => Err(uv_error_to_io_error(err)),\n-                None => Ok(())\n-            }\n+            status_to_io_result(r)\n         }\n     }\n \n     fn loop_multicast_locally(&mut self) -> Result<(), IoError> {\n         do self.home_for_io |self_| {\n-\n             let r = unsafe {\n                 uvll::uv_udp_set_multicast_loop(self_.watcher.native_handle(),\n                                                 1 as c_int)\n             };\n-\n-            match status_to_maybe_uv_error(r) {\n-                Some(err) => Err(uv_error_to_io_error(err)),\n-                None => Ok(())\n-            }\n+            status_to_io_result(r)\n         }\n     }\n \n     fn dont_loop_multicast_locally(&mut self) -> Result<(), IoError> {\n         do self.home_for_io |self_| {\n-\n             let r = unsafe {\n                 uvll::uv_udp_set_multicast_loop(self_.watcher.native_handle(),\n                                                 0 as c_int)\n             };\n-\n-            match status_to_maybe_uv_error(r) {\n-                Some(err) => Err(uv_error_to_io_error(err)),\n-                None => Ok(())\n-            }\n+            status_to_io_result(r)\n         }\n     }\n \n     fn multicast_time_to_live(&mut self, ttl: int) -> Result<(), IoError> {\n         do self.home_for_io |self_| {\n-\n             let r = unsafe {\n                 uvll::uv_udp_set_multicast_ttl(self_.watcher.native_handle(),\n                                                ttl as c_int)\n             };\n-\n-            match status_to_maybe_uv_error(r) {\n-                Some(err) => Err(uv_error_to_io_error(err)),\n-                None => Ok(())\n-            }\n+            status_to_io_result(r)\n         }\n     }\n \n     fn time_to_live(&mut self, ttl: int) -> Result<(), IoError> {\n         do self.home_for_io |self_| {\n-\n             let r = unsafe {\n                 uvll::uv_udp_set_ttl(self_.watcher.native_handle(), ttl as c_int)\n             };\n-\n-            match status_to_maybe_uv_error(r) {\n-                Some(err) => Err(uv_error_to_io_error(err)),\n-                None => Ok(())\n-            }\n+            status_to_io_result(r)\n         }\n     }\n \n     fn hear_broadcasts(&mut self) -> Result<(), IoError> {\n         do self.home_for_io |self_| {\n-\n             let r = unsafe {\n                 uvll::uv_udp_set_broadcast(self_.watcher.native_handle(),\n                                            1 as c_int)\n             };\n-\n-            match status_to_maybe_uv_error(r) {\n-                Some(err) => Err(uv_error_to_io_error(err)),\n-                None => Ok(())\n-            }\n+            status_to_io_result(r)\n         }\n     }\n \n     fn ignore_broadcasts(&mut self) -> Result<(), IoError> {\n         do self.home_for_io |self_| {\n-\n             let r = unsafe {\n                 uvll::uv_udp_set_broadcast(self_.watcher.native_handle(),\n                                            0 as c_int)\n             };\n-\n-            match status_to_maybe_uv_error(r) {\n-                Some(err) => Err(uv_error_to_io_error(err)),\n-                None => Ok(())\n-            }\n+            status_to_io_result(r)\n         }\n     }\n }"}]}