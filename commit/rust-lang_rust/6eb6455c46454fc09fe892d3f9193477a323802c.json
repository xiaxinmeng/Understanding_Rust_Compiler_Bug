{"sha": "6eb6455c46454fc09fe892d3f9193477a323802c", "node_id": "C_kwDOAAsO6NoAKDZlYjY0NTVjNDY0NTRmYzA5ZmU4OTJkM2Y5MTkzNDc3YTMyMzgwMmM", "commit": {"author": {"name": "Le\u00f3n Orell Valerian Liehr", "email": "me@fmease.dev", "date": "2023-02-01T16:20:55Z"}, "committer": {"name": "Le\u00f3n Orell Valerian Liehr", "email": "me@fmease.dev", "date": "2023-02-19T17:35:36Z"}, "message": "Add a test and several known bugs", "tree": {"sha": "2a151e288db7f0f04801432e6f1bd73544910a78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a151e288db7f0f04801432e6f1bd73544910a78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6eb6455c46454fc09fe892d3f9193477a323802c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEXSQFaHGAjVoD5I3F0XoHIV9o5xMFAmPyXegACgkQ0XoHIV9o\n5xPCoQ//RJNQyInYuDDW4stFlBW8ynxv1flLQ4AlrYtutTrVKZPYnQ4RxVt+nZqG\nvRckrj1Qpoi5CeSxq4Ul2Dx8jZqzZEcBcyVrJK2mXB8hMT1jiCtu/LicFxli4U2i\nNy6Ge4NliJ50bMyVzJwK+L2ClrRAa4cF2Iv05bzcJZOPkSn8xF6KR3+m+5PUryEi\n0KmgK5c3MYdGKtshc8IoFYyQqTt3H29oIOqV59z2j+Qol1Ae89TxUYEa12/CNpv/\n5ICJrF64ex21NNTP7aFMh1nzkv8GI1DQIZTqzwh+Ary9T5ptYgHGBwNuI8ShDsJT\nQCef2Ga1LlTHvrVz5jtlEs10L/Kzd8a19WmxdIalMRUGK2BQhe00u5Rkh94QlHL4\nloCLtp1d7mjqFigC3zQ/DaJe+NbmBsWtJ/IG+/9siCC3Xputt9hOEVlTOaUPazMy\n5w9m2m0NuCUVQVroOorsU1x0B6sjOMCrBd/S+7t7KIskCfQ/eyqYwITvJ7KDWe5z\nAWqQXpcKGcCH/pYtyDg9cLK9ba9R17kpuYmWRarheRjwIEpNDkVJoHpVFJ/g2uoO\n1707Vy8vvIFCaxe7ZAQVU3bP/jNzGlgT5oCti1M3zbTyG9IdWACbg6w43sJ/nlAq\nt1mqjZ3m2oopr1PF6Umty+1usbYQL8h/eZHDdKA6Gz1t4oq5mmA=\n=XHEJ\n-----END PGP SIGNATURE-----", "payload": "tree 2a151e288db7f0f04801432e6f1bd73544910a78\nparent 77ea90ec71926df7d478834d34d1fefce40cc456\nauthor Le\u00f3n Orell Valerian Liehr <me@fmease.dev> 1675268455 +0100\ncommitter Le\u00f3n Orell Valerian Liehr <me@fmease.dev> 1676828136 +0100\n\nAdd a test and several known bugs\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6eb6455c46454fc09fe892d3f9193477a323802c", "html_url": "https://github.com/rust-lang/rust/commit/6eb6455c46454fc09fe892d3f9193477a323802c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6eb6455c46454fc09fe892d3f9193477a323802c/comments", "author": {"login": "fmease", "id": 14913065, "node_id": "MDQ6VXNlcjE0OTEzMDY1", "avatar_url": "https://avatars.githubusercontent.com/u/14913065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmease", "html_url": "https://github.com/fmease", "followers_url": "https://api.github.com/users/fmease/followers", "following_url": "https://api.github.com/users/fmease/following{/other_user}", "gists_url": "https://api.github.com/users/fmease/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmease/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmease/subscriptions", "organizations_url": "https://api.github.com/users/fmease/orgs", "repos_url": "https://api.github.com/users/fmease/repos", "events_url": "https://api.github.com/users/fmease/events{/privacy}", "received_events_url": "https://api.github.com/users/fmease/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fmease", "id": 14913065, "node_id": "MDQ6VXNlcjE0OTEzMDY1", "avatar_url": "https://avatars.githubusercontent.com/u/14913065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmease", "html_url": "https://github.com/fmease", "followers_url": "https://api.github.com/users/fmease/followers", "following_url": "https://api.github.com/users/fmease/following{/other_user}", "gists_url": "https://api.github.com/users/fmease/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmease/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmease/subscriptions", "organizations_url": "https://api.github.com/users/fmease/orgs", "repos_url": "https://api.github.com/users/fmease/repos", "events_url": "https://api.github.com/users/fmease/events{/privacy}", "received_events_url": "https://api.github.com/users/fmease/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77ea90ec71926df7d478834d34d1fefce40cc456", "url": "https://api.github.com/repos/rust-lang/rust/commits/77ea90ec71926df7d478834d34d1fefce40cc456", "html_url": "https://github.com/rust-lang/rust/commit/77ea90ec71926df7d478834d34d1fefce40cc456"}], "stats": {"total": 127, "additions": 127, "deletions": 0}, "files": [{"sha": "53ac79e0561baee45614c02ff575e52b27855a20", "filename": "tests/ui/associated-inherent-types/bugs/ice-substitution.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/6eb6455c46454fc09fe892d3f9193477a323802c/tests%2Fui%2Fassociated-inherent-types%2Fbugs%2Fice-substitution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6eb6455c46454fc09fe892d3f9193477a323802c/tests%2Fui%2Fassociated-inherent-types%2Fbugs%2Fice-substitution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-inherent-types%2Fbugs%2Fice-substitution.rs?ref=6eb6455c46454fc09fe892d3f9193477a323802c", "patch": "@@ -0,0 +1,23 @@\n+// known-bug: unknown\n+// failure-status: 101\n+// normalize-stderr-test \"note: .*\\n\\n\" -> \"\"\n+// normalize-stderr-test \"thread 'rustc' panicked.*\\n\" -> \"\"\n+// rustc-env:RUST_BACKTRACE=0\n+\n+// FIXME: I presume a type variable that couldn't be solved by `resolve_vars_if_possible`\n+//        escapes the InferCtxt snapshot.\n+\n+#![feature(inherent_associated_types)]\n+#![allow(incomplete_features)]\n+\n+struct Cont<T>(T);\n+\n+impl<T: Copy> Cont<T> {\n+    type Out = Vec<T>;\n+}\n+\n+pub fn weird<T: Copy>(x: T) {\n+    let _: Cont<_>::Out = vec![true];\n+}\n+\n+fn main() {}"}, {"sha": "7b0d1c50516241ab6984a8872d1feb3d72fb56d1", "filename": "tests/ui/associated-inherent-types/bugs/ice-substitution.stderr", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6eb6455c46454fc09fe892d3f9193477a323802c/tests%2Fui%2Fassociated-inherent-types%2Fbugs%2Fice-substitution.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6eb6455c46454fc09fe892d3f9193477a323802c/tests%2Fui%2Fassociated-inherent-types%2Fbugs%2Fice-substitution.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-inherent-types%2Fbugs%2Fice-substitution.stderr?ref=6eb6455c46454fc09fe892d3f9193477a323802c", "patch": "@@ -0,0 +1,6 @@\n+error: the compiler unexpectedly panicked. this is a bug.\n+\n+query stack during panic:\n+#0 [typeck] type-checking `weird`\n+#1 [typeck_item_bodies] type-checking all item bodies\n+end of query stack"}, {"sha": "a920b412b1a492a9840b0c588299bed9d0838926", "filename": "tests/ui/associated-inherent-types/bugs/inference-fail.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6eb6455c46454fc09fe892d3f9193477a323802c/tests%2Fui%2Fassociated-inherent-types%2Fbugs%2Finference-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6eb6455c46454fc09fe892d3f9193477a323802c/tests%2Fui%2Fassociated-inherent-types%2Fbugs%2Finference-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-inherent-types%2Fbugs%2Finference-fail.rs?ref=6eb6455c46454fc09fe892d3f9193477a323802c", "patch": "@@ -0,0 +1,15 @@\n+// known-bug: unknown\n+\n+#![feature(inherent_associated_types)]\n+#![allow(incomplete_features)]\n+\n+struct S<T>(T);\n+\n+impl S<()> {\n+    type P = i128;\n+}\n+\n+fn main() {\n+    // We fail to infer `_ == ()` here.\n+    let _: S<_>::P;\n+}"}, {"sha": "425691bd6c4f694a860e05181f81a7fdd5e7f84e", "filename": "tests/ui/associated-inherent-types/bugs/inference-fail.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6eb6455c46454fc09fe892d3f9193477a323802c/tests%2Fui%2Fassociated-inherent-types%2Fbugs%2Finference-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6eb6455c46454fc09fe892d3f9193477a323802c/tests%2Fui%2Fassociated-inherent-types%2Fbugs%2Finference-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-inherent-types%2Fbugs%2Finference-fail.stderr?ref=6eb6455c46454fc09fe892d3f9193477a323802c", "patch": "@@ -0,0 +1,9 @@\n+error[E0282]: type annotations needed\n+  --> $DIR/inference-fail.rs:14:14\n+   |\n+LL |     let _: S<_>::P;\n+   |              ^ cannot infer type\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0282`."}, {"sha": "632dbf3854b2b7b0eb5f09225f4be7c938abb462", "filename": "tests/ui/associated-inherent-types/bugs/lack-of-regionck.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6eb6455c46454fc09fe892d3f9193477a323802c/tests%2Fui%2Fassociated-inherent-types%2Fbugs%2Flack-of-regionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6eb6455c46454fc09fe892d3f9193477a323802c/tests%2Fui%2Fassociated-inherent-types%2Fbugs%2Flack-of-regionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-inherent-types%2Fbugs%2Flack-of-regionck.rs?ref=6eb6455c46454fc09fe892d3f9193477a323802c", "patch": "@@ -0,0 +1,19 @@\n+// known-bug: unknown\n+// check-pass\n+\n+// We currently don't region-check inherent associated type projections at all.\n+\n+#![feature(inherent_associated_types)]\n+#![allow(incomplete_features, dead_code)]\n+\n+struct S<T>(T);\n+\n+impl S<&'static ()> {\n+    type T = ();\n+}\n+\n+fn usr<'a>() {\n+    let _: S::<&'a ()>::T; // this should *fail* but it doesn't!\n+}\n+\n+fn main() {}"}, {"sha": "d2efb24c666204850974f2395d46850d79ad4601", "filename": "tests/ui/associated-inherent-types/not-found-self-type-differs-shadowing-trait-item.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/6eb6455c46454fc09fe892d3f9193477a323802c/tests%2Fui%2Fassociated-inherent-types%2Fnot-found-self-type-differs-shadowing-trait-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6eb6455c46454fc09fe892d3f9193477a323802c/tests%2Fui%2Fassociated-inherent-types%2Fnot-found-self-type-differs-shadowing-trait-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-inherent-types%2Fnot-found-self-type-differs-shadowing-trait-item.rs?ref=6eb6455c46454fc09fe892d3f9193477a323802c", "patch": "@@ -0,0 +1,31 @@\n+#![feature(inherent_associated_types)]\n+#![allow(incomplete_features)]\n+\n+// Check that it's okay to report \u201c[inherent] associated type [\u2026] not found\u201d for inherent associated\n+// type candidates that are not applicable (due to unsuitable Self type) even if there exists a\n+// \u201cshadowed\u201d associated type from a trait with the same name since its use would be ambiguous\n+// anyway if the IAT didn't exist.\n+// FIXME(inherent_associated_types): Figure out which error would be more helpful here.\n+\n+// revisions: shadowed uncovered\n+\n+struct S<T>(T);\n+\n+trait Tr {\n+    type Pr;\n+}\n+\n+impl<T> Tr for S<T> {\n+    type Pr = ();\n+}\n+\n+#[cfg(shadowed)]\n+impl S<()> {\n+    type Pr = i32;\n+}\n+\n+fn main() {\n+    let _: S::<bool>::Pr = ();\n+    //[shadowed]~^ ERROR associated type `Pr` not found\n+    //[uncovered]~^^ ERROR ambiguous associated type\n+}"}, {"sha": "3561db354c03f81f7a047cf6d8731381e65c89d0", "filename": "tests/ui/associated-inherent-types/not-found-self-type-differs-shadowing-trait-item.shadowed.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6eb6455c46454fc09fe892d3f9193477a323802c/tests%2Fui%2Fassociated-inherent-types%2Fnot-found-self-type-differs-shadowing-trait-item.shadowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6eb6455c46454fc09fe892d3f9193477a323802c/tests%2Fui%2Fassociated-inherent-types%2Fnot-found-self-type-differs-shadowing-trait-item.shadowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-inherent-types%2Fnot-found-self-type-differs-shadowing-trait-item.shadowed.stderr?ref=6eb6455c46454fc09fe892d3f9193477a323802c", "patch": "@@ -0,0 +1,15 @@\n+error[E0220]: associated type `Pr` not found for `S<bool>` in the current scope\n+  --> $DIR/not-found-self-type-differs-shadowing-trait-item.rs:28:23\n+   |\n+LL | struct S<T>(T);\n+   | ----------- associated item `Pr` not found for this struct\n+...\n+LL |     let _: S::<bool>::Pr = ();\n+   |                       ^^ associated item not found in `S<bool>`\n+   |\n+   = note: the associated type was found for\n+           - `S<()>`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0220`."}, {"sha": "88c72042ce2d0166a06d75e6382dcba692f2de65", "filename": "tests/ui/associated-inherent-types/not-found-self-type-differs-shadowing-trait-item.uncovered.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6eb6455c46454fc09fe892d3f9193477a323802c/tests%2Fui%2Fassociated-inherent-types%2Fnot-found-self-type-differs-shadowing-trait-item.uncovered.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6eb6455c46454fc09fe892d3f9193477a323802c/tests%2Fui%2Fassociated-inherent-types%2Fnot-found-self-type-differs-shadowing-trait-item.uncovered.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-inherent-types%2Fnot-found-self-type-differs-shadowing-trait-item.uncovered.stderr?ref=6eb6455c46454fc09fe892d3f9193477a323802c", "patch": "@@ -0,0 +1,9 @@\n+error[E0223]: ambiguous associated type\n+  --> $DIR/not-found-self-type-differs-shadowing-trait-item.rs:28:12\n+   |\n+LL |     let _: S::<bool>::Pr = ();\n+   |            ^^^^^^^^^^^^^ help: use the fully-qualified path: `<S<bool> as Tr>::Pr`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0223`."}]}