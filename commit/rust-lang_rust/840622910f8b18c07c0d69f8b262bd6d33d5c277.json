{"sha": "840622910f8b18c07c0d69f8b262bd6d33d5c277", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0MDYyMjkxMGY4YjE4YzA3YzBkNjlmOGIyNjJiZDZkMzNkNWMyNzc=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-02-27T20:56:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-27T20:56:17Z"}, "message": "Rollup merge of #82401 - osa1:remove_redundant_macro, r=matthewjasper\n\nRemove a redundant macro\n\nTurn the macro into a function. Also remove unused 'span' argument.", "tree": {"sha": "534675411f436f3d1a5e75b74acfa9ec085265f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/534675411f436f3d1a5e75b74acfa9ec085265f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/840622910f8b18c07c0d69f8b262bd6d33d5c277", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgOrHyCRBK7hj4Ov3rIwAAdHIIAJokcAKz1Ed1quema5F3UFCn\nSrEOFB8Fpat3eJPLSIxCoXbTkIhWoRnia/aOsT/m+FJKURgpQZp3jJ5/4eQz0Zgj\nOLADagePPiDM76AjK1Co0YSo9RjBGB+G529VyoBYB1w0tle9Hd3jxsKVIBDJUIWH\nxoPouLpIP9rkrx+UJRgIfaP43AsdiaZ6Qa0B3vibX2Ux5pwvEtF4L2o104RaCbki\nSreJQNK+K+pymr+qDF0D2ooiN5e/1oAAGFbxVFieyZu+pbGDsK14gQ58W+EOGo84\nhaI/ByMorTyE20FSngJNVPVVdp46UATRmZ34SfkM3IU1JykHJkx9wUv/eBThQaw=\n=UB4L\n-----END PGP SIGNATURE-----\n", "payload": "tree 534675411f436f3d1a5e75b74acfa9ec085265f5\nparent ea43e5e21d8aa61e00124f634a71325e6d3bfaa8\nparent c0c44360112e4574954c8016c59847a3f651bdaa\nauthor Dylan DPC <dylan.dpc@gmail.com> 1614459377 +0100\ncommitter GitHub <noreply@github.com> 1614459377 +0100\n\nRollup merge of #82401 - osa1:remove_redundant_macro, r=matthewjasper\n\nRemove a redundant macro\n\nTurn the macro into a function. Also remove unused 'span' argument.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/840622910f8b18c07c0d69f8b262bd6d33d5c277", "html_url": "https://github.com/rust-lang/rust/commit/840622910f8b18c07c0d69f8b262bd6d33d5c277", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/840622910f8b18c07c0d69f8b262bd6d33d5c277/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea43e5e21d8aa61e00124f634a71325e6d3bfaa8", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea43e5e21d8aa61e00124f634a71325e6d3bfaa8", "html_url": "https://github.com/rust-lang/rust/commit/ea43e5e21d8aa61e00124f634a71325e6d3bfaa8"}, {"sha": "c0c44360112e4574954c8016c59847a3f651bdaa", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0c44360112e4574954c8016c59847a3f651bdaa", "html_url": "https://github.com/rust-lang/rust/commit/c0c44360112e4574954c8016c59847a3f651bdaa"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "e6c551ff4d41bb8b2373dfe53040237cb1a2ee24", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/840622910f8b18c07c0d69f8b262bd6d33d5c277/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/840622910f8b18c07c0d69f8b262bd6d33d5c277/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=840622910f8b18c07c0d69f8b262bd6d33d5c277", "patch": "@@ -517,21 +517,21 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 }\n \n                 if self.is_fn_ty(&rcvr_ty, span) {\n-                    macro_rules! report_function {\n-                        ($span:expr, $name:expr) => {\n-                            err.note(&format!(\n-                                \"`{}` is a function, perhaps you wish to call it\",\n-                                $name\n-                            ));\n-                        };\n+                    fn report_function<T: std::fmt::Display>(\n+                        err: &mut DiagnosticBuilder<'_>,\n+                        name: T,\n+                    ) {\n+                        err.note(\n+                            &format!(\"`{}` is a function, perhaps you wish to call it\", name,),\n+                        );\n                     }\n \n                     if let SelfSource::MethodCall(expr) = source {\n                         if let Ok(expr_string) = tcx.sess.source_map().span_to_snippet(expr.span) {\n-                            report_function!(expr.span, expr_string);\n+                            report_function(&mut err, expr_string);\n                         } else if let ExprKind::Path(QPath::Resolved(_, ref path)) = expr.kind {\n                             if let Some(segment) = path.segments.last() {\n-                                report_function!(expr.span, segment.ident);\n+                                report_function(&mut err, segment.ident);\n                             }\n                         }\n                     }"}]}