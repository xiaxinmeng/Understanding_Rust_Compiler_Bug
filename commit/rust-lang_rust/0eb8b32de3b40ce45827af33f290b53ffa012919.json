{"sha": "0eb8b32de3b40ce45827af33f290b53ffa012919", "node_id": "C_kwDOAAsO6NoAKDBlYjhiMzJkZTNiNDBjZTQ1ODI3YWYzM2YyOTBiNTNmZmEwMTI5MTk", "commit": {"author": {"name": "Caio", "email": "c410.f3r@gmail.com", "date": "2022-02-27T14:10:20Z"}, "committer": {"name": "Caio", "email": "c410.f3r@gmail.com", "date": "2022-02-27T14:10:20Z"}, "message": "3 - Make more use of let_chains\n\nContinuation of #94376.\n\ncc #53667", "tree": {"sha": "79b04d6bfc0e15695ad7bb9fa3b23ee7612cd42f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79b04d6bfc0e15695ad7bb9fa3b23ee7612cd42f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0eb8b32de3b40ce45827af33f290b53ffa012919", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0eb8b32de3b40ce45827af33f290b53ffa012919", "html_url": "https://github.com/rust-lang/rust/commit/0eb8b32de3b40ce45827af33f290b53ffa012919", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0eb8b32de3b40ce45827af33f290b53ffa012919/comments", "author": {"login": "c410-f3r", "id": 17877264, "node_id": "MDQ6VXNlcjE3ODc3MjY0", "avatar_url": "https://avatars.githubusercontent.com/u/17877264?v=4", "gravatar_id": "", "url": "https://api.github.com/users/c410-f3r", "html_url": "https://github.com/c410-f3r", "followers_url": "https://api.github.com/users/c410-f3r/followers", "following_url": "https://api.github.com/users/c410-f3r/following{/other_user}", "gists_url": "https://api.github.com/users/c410-f3r/gists{/gist_id}", "starred_url": "https://api.github.com/users/c410-f3r/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/c410-f3r/subscriptions", "organizations_url": "https://api.github.com/users/c410-f3r/orgs", "repos_url": "https://api.github.com/users/c410-f3r/repos", "events_url": "https://api.github.com/users/c410-f3r/events{/privacy}", "received_events_url": "https://api.github.com/users/c410-f3r/received_events", "type": "User", "site_admin": false}, "committer": {"login": "c410-f3r", "id": 17877264, "node_id": "MDQ6VXNlcjE3ODc3MjY0", "avatar_url": "https://avatars.githubusercontent.com/u/17877264?v=4", "gravatar_id": "", "url": "https://api.github.com/users/c410-f3r", "html_url": "https://github.com/c410-f3r", "followers_url": "https://api.github.com/users/c410-f3r/followers", "following_url": "https://api.github.com/users/c410-f3r/following{/other_user}", "gists_url": "https://api.github.com/users/c410-f3r/gists{/gist_id}", "starred_url": "https://api.github.com/users/c410-f3r/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/c410-f3r/subscriptions", "organizations_url": "https://api.github.com/users/c410-f3r/orgs", "repos_url": "https://api.github.com/users/c410-f3r/repos", "events_url": "https://api.github.com/users/c410-f3r/events{/privacy}", "received_events_url": "https://api.github.com/users/c410-f3r/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bab4c13f64b4197abc1a361796be9940ed5b3904", "url": "https://api.github.com/repos/rust-lang/rust/commits/bab4c13f64b4197abc1a361796be9940ed5b3904", "html_url": "https://github.com/rust-lang/rust/commit/bab4c13f64b4197abc1a361796be9940ed5b3904"}], "stats": {"total": 102, "additions": 44, "deletions": 58}, "files": [{"sha": "eb906d5fde7b4cdecfb7a807b902804e421237e6", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0eb8b32de3b40ce45827af33f290b53ffa012919/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0eb8b32de3b40ce45827af33f290b53ffa012919/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=0eb8b32de3b40ce45827af33f290b53ffa012919", "patch": "@@ -1921,17 +1921,16 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 err.span_label(assigned_span, format!(\"first assignment to {}\", place_description));\n             }\n         }\n-        if let Some(decl) = local_decl {\n-            if let Some(name) = local_name {\n-                if decl.can_be_made_mutable() {\n-                    err.span_suggestion(\n-                        decl.source_info.span,\n-                        \"consider making this binding mutable\",\n-                        format!(\"mut {}\", name),\n-                        Applicability::MachineApplicable,\n-                    );\n-                }\n-            }\n+        if let Some(decl) = local_decl\n+            && let Some(name) = local_name\n+            && decl.can_be_made_mutable()\n+        {\n+            err.span_suggestion(\n+                decl.source_info.span,\n+                \"consider making this binding mutable\",\n+                format!(\"mut {}\", name),\n+                Applicability::MachineApplicable,\n+            );\n         }\n         err.span_label(span, msg);\n         self.buffer_error(err);"}, {"sha": "2217c0e14b2aae0d4ad4930b241f6e5de30008f9", "filename": "compiler/rustc_borrowck/src/diagnostics/explain_borrow.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0eb8b32de3b40ce45827af33f290b53ffa012919/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fexplain_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0eb8b32de3b40ce45827af33f290b53ffa012919/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fexplain_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fexplain_borrow.rs?ref=0eb8b32de3b40ce45827af33f290b53ffa012919", "patch": "@@ -375,15 +375,12 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n \n             Some(Cause::DropVar(local, location)) => {\n                 let mut should_note_order = false;\n-                if self.local_names[local].is_some() {\n-                    if let Some((WriteKind::StorageDeadOrDrop, place)) = kind_place {\n-                        if let Some(borrowed_local) = place.as_local() {\n-                            if self.local_names[borrowed_local].is_some() && local != borrowed_local\n-                            {\n-                                should_note_order = true;\n-                            }\n-                        }\n-                    }\n+                if self.local_names[local].is_some()\n+                    && let Some((WriteKind::StorageDeadOrDrop, place)) = kind_place\n+                    && let Some(borrowed_local) = place.as_local()\n+                    && self.local_names[borrowed_local].is_some() && local != borrowed_local\n+                {\n+                    should_note_order = true;\n                 }\n \n                 BorrowExplanation::UsedLaterWhenDropped {"}, {"sha": "610798c7c05c85a427acf611ae57bcaf3a1018fb", "filename": "compiler/rustc_borrowck/src/diagnostics/mutability_errors.rs", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0eb8b32de3b40ce45827af33f290b53ffa012919/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0eb8b32de3b40ce45827af33f290b53ffa012919/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs?ref=0eb8b32de3b40ce45827af33f290b53ffa012919", "patch": "@@ -1086,21 +1086,17 @@ fn get_mut_span_in_struct_field<'tcx>(\n     field: &mir::Field,\n ) -> Option<Span> {\n     // Expect our local to be a reference to a struct of some kind.\n-    if let ty::Ref(_, ty, _) = ty.kind() {\n-        if let ty::Adt(def, _) = ty.kind() {\n-            let field = def.all_fields().nth(field.index())?;\n-            // Use the HIR types to construct the diagnostic message.\n-            let node = tcx.hir().find_by_def_id(field.did.as_local()?)?;\n-            // Now we're dealing with the actual struct that we're going to suggest a change to,\n-            // we can expect a field that is an immutable reference to a type.\n-            if let hir::Node::Field(field) = node {\n-                if let hir::TyKind::Rptr(lifetime, hir::MutTy { mutbl: hir::Mutability::Not, ty }) =\n-                    field.ty.kind\n-                {\n-                    return Some(lifetime.span.between(ty.span));\n-                }\n-            }\n-        }\n+    if let ty::Ref(_, ty, _) = ty.kind()\n+        && let ty::Adt(def, _) = ty.kind()\n+        && let field = def.all_fields().nth(field.index())?\n+        // Use the HIR types to construct the diagnostic message.\n+        && let node = tcx.hir().find_by_def_id(field.did.as_local()?)?\n+        // Now we're dealing with the actual struct that we're going to suggest a change to,\n+        // we can expect a field that is an immutable reference to a type.\n+        && let hir::Node::Field(field) = node\n+        && let hir::TyKind::Rptr(lt, hir::MutTy { mutbl: hir::Mutability::Not, ty }) = field.ty.kind\n+    {\n+        return Some(lt.span.between(ty.span));\n     }\n \n     None"}, {"sha": "369aef6798ba662ce3cced8cacd8ad368e05180c", "filename": "compiler/rustc_borrowck/src/diagnostics/region_errors.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0eb8b32de3b40ce45827af33f290b53ffa012919/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0eb8b32de3b40ce45827af33f290b53ffa012919/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs?ref=0eb8b32de3b40ce45827af33f290b53ffa012919", "patch": "@@ -140,14 +140,11 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n \n     /// Returns `true` if a closure is inferred to be an `FnMut` closure.\n     fn is_closure_fn_mut(&self, fr: RegionVid) -> bool {\n-        if let Some(ty::ReFree(free_region)) = self.to_error_region(fr).as_deref() {\n-            if let ty::BoundRegionKind::BrEnv = free_region.bound_region {\n-                if let DefiningTy::Closure(_, substs) =\n-                    self.regioncx.universal_regions().defining_ty\n-                {\n-                    return substs.as_closure().kind() == ty::ClosureKind::FnMut;\n-                }\n-            }\n+        if let Some(ty::ReFree(free_region)) = self.to_error_region(fr).as_deref()\n+            && let ty::BoundRegionKind::BrEnv = free_region.bound_region\n+            && let DefiningTy::Closure(_, substs) = self.regioncx.universal_regions().defining_ty\n+        {\n+            return substs.as_closure().kind() == ty::ClosureKind::FnMut;\n         }\n \n         false"}, {"sha": "82d2d0dd4557f757ff8f92b86776f2bae2fa946a", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0eb8b32de3b40ce45827af33f290b53ffa012919/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0eb8b32de3b40ce45827af33f290b53ffa012919/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=0eb8b32de3b40ce45827af33f290b53ffa012919", "patch": "@@ -1,15 +1,16 @@\n //! This query borrow-checks the MIR to (further) ensure it is not broken.\n \n+#![allow(rustc::potential_query_instability)]\n #![feature(bool_to_option)]\n #![feature(box_patterns)]\n #![feature(crate_visibility_modifier)]\n+#![feature(let_chains)]\n #![feature(let_else)]\n #![feature(min_specialization)]\n #![feature(stmt_expr_attributes)]\n #![feature(trusted_step)]\n #![feature(try_blocks)]\n #![recursion_limit = \"256\"]\n-#![allow(rustc::potential_query_instability)]\n \n #[macro_use]\n extern crate rustc_middle;\n@@ -159,16 +160,14 @@ fn do_mir_borrowck<'a, 'tcx>(\n     for var_debug_info in &input_body.var_debug_info {\n         if let VarDebugInfoContents::Place(place) = var_debug_info.value {\n             if let Some(local) = place.as_local() {\n-                if let Some(prev_name) = local_names[local] {\n-                    if var_debug_info.name != prev_name {\n-                        span_bug!(\n-                            var_debug_info.source_info.span,\n-                            \"local {:?} has many names (`{}` vs `{}`)\",\n-                            local,\n-                            prev_name,\n-                            var_debug_info.name\n-                        );\n-                    }\n+                if let Some(prev_name) = local_names[local] && var_debug_info.name != prev_name {\n+                    span_bug!(\n+                        var_debug_info.source_info.span,\n+                        \"local {:?} has many names (`{}` vs `{}`)\",\n+                        local,\n+                        prev_name,\n+                        var_debug_info.name\n+                    );\n                 }\n                 local_names[local] = Some(var_debug_info.name);\n             }"}, {"sha": "5a935c3b8fbfddda7b0bc48445bc4d30ad36b9c5", "filename": "compiler/rustc_borrowck/src/places_conflict.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0eb8b32de3b40ce45827af33f290b53ffa012919/compiler%2Frustc_borrowck%2Fsrc%2Fplaces_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0eb8b32de3b40ce45827af33f290b53ffa012919/compiler%2Frustc_borrowck%2Fsrc%2Fplaces_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fplaces_conflict.rs?ref=0eb8b32de3b40ce45827af33f290b53ffa012919", "patch": "@@ -60,10 +60,8 @@ pub(super) fn borrow_conflicts_with_place<'tcx>(\n \n     // This Local/Local case is handled by the more general code below, but\n     // it's so common that it's a speed win to check for it first.\n-    if let Some(l1) = borrow_place.as_local() {\n-        if let Some(l2) = access_place.as_local() {\n-            return l1 == l2;\n-        }\n+    if let Some(l1) = borrow_place.as_local() && let Some(l2) = access_place.as_local() {\n+        return l1 == l2;\n     }\n \n     place_components_conflict(tcx, body, borrow_place, borrow_kind, access_place, access, bias)"}]}