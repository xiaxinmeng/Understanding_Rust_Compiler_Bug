{"sha": "c5b1e3f2ae5c397eb98d86228186a8e533243bfe", "node_id": "C_kwDOAAsO6NoAKGM1YjFlM2YyYWU1YzM5N2ViOThkODYyMjgxODZhOGU1MzMyNDNiZmU", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-01-20T13:29:12Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-01-20T13:29:12Z"}, "message": "Fix markdown removal in hover handling whitespace weirdly", "tree": {"sha": "cca23e62bdc2bbcf5a52cc5d8d02657df2b9607d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cca23e62bdc2bbcf5a52cc5d8d02657df2b9607d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5b1e3f2ae5c397eb98d86228186a8e533243bfe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5b1e3f2ae5c397eb98d86228186a8e533243bfe", "html_url": "https://github.com/rust-lang/rust/commit/c5b1e3f2ae5c397eb98d86228186a8e533243bfe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5b1e3f2ae5c397eb98d86228186a8e533243bfe/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7385467f2e4652ad32108c16e1e2642289384926", "url": "https://api.github.com/repos/rust-lang/rust/commits/7385467f2e4652ad32108c16e1e2642289384926", "html_url": "https://github.com/rust-lang/rust/commit/7385467f2e4652ad32108c16e1e2642289384926"}], "stats": {"total": 266, "additions": 202, "deletions": 64}, "files": [{"sha": "c46c1c1cd1e055a7d386c4791da2fee930e5d387", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c5b1e3f2ae5c397eb98d86228186a8e533243bfe/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5b1e3f2ae5c397eb98d86228186a8e533243bfe/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=c5b1e3f2ae5c397eb98d86228186a8e533243bfe", "patch": "@@ -19,21 +19,17 @@ use syntax::{ast, match_ast, AstNode, SyntaxKind::*, SyntaxNode, SyntaxToken, T}\n \n use crate::{\n     doc_links::token_as_doc_comment,\n+    markdown_remove::remove_markdown,\n     markup::Markup,\n     runnables::{runnable_fn, runnable_mod},\n     FileId, FilePosition, NavigationTarget, RangeInfo, Runnable, TryToNav,\n };\n #[derive(Clone, Debug, PartialEq, Eq)]\n pub struct HoverConfig {\n     pub links_in_hover: bool,\n-    pub documentation: Option<HoverDocFormat>,\n+    pub documentation: bool,\n     pub keywords: bool,\n-}\n-\n-impl HoverConfig {\n-    fn markdown(&self) -> bool {\n-        matches!(self.documentation, Some(HoverDocFormat::Markdown))\n-    }\n+    pub format: HoverDocFormat,\n }\n \n #[derive(Clone, Debug, PartialEq, Eq)]\n@@ -90,12 +86,23 @@ pub struct HoverResult {\n // image::https://user-images.githubusercontent.com/48062697/113020658-b5f98b80-917a-11eb-9f88-3dbc27320c95.gif[]\n pub(crate) fn hover(\n     db: &RootDatabase,\n-    FileRange { file_id, range }: FileRange,\n+    file_range: FileRange,\n     config: &HoverConfig,\n ) -> Option<RangeInfo<HoverResult>> {\n     let sema = &hir::Semantics::new(db);\n-    let file = sema.parse(file_id).syntax().clone();\n+    let mut res = hover_impl(sema, file_range, config)?;\n+    if let HoverDocFormat::PlainText = config.format {\n+        res.info.markup = remove_markdown(res.info.markup.as_str()).into();\n+    }\n+    Some(res)\n+}\n \n+fn hover_impl(\n+    sema: &Semantics<'_, RootDatabase>,\n+    FileRange { file_id, range }: FileRange,\n+    config: &HoverConfig,\n+) -> Option<RangeInfo<HoverResult>> {\n+    let file = sema.parse(file_id).syntax().clone();\n     if !range.is_empty() {\n         return hover_ranged(&file, range, sema, config);\n     }"}, {"sha": "d7b6264957821d79dc375e0431110ac5abf61cbd", "filename": "crates/ide/src/hover/render.rs", "status": "modified", "additions": 18, "deletions": 39, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/c5b1e3f2ae5c397eb98d86228186a8e533243bfe/crates%2Fide%2Fsrc%2Fhover%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5b1e3f2ae5c397eb98d86228186a8e533243bfe/crates%2Fide%2Fsrc%2Fhover%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover%2Frender.rs?ref=c5b1e3f2ae5c397eb98d86228186a8e533243bfe", "patch": "@@ -26,13 +26,12 @@ use syntax::{\n use crate::{\n     doc_links::{remove_links, rewrite_links},\n     hover::walk_and_push_ty,\n-    markdown_remove::remove_markdown,\n     HoverAction, HoverConfig, HoverResult, Markup,\n };\n \n pub(super) fn type_info(\n     sema: &Semantics<'_, RootDatabase>,\n-    config: &HoverConfig,\n+    _config: &HoverConfig,\n     expr_or_pat: &Either<ast::Expr, ast::Pat>,\n ) -> Option<HoverResult> {\n     let TypeInfo { original, adjusted } = match expr_or_pat {\n@@ -55,27 +54,23 @@ pub(super) fn type_info(\n         let adjusted = adjusted_ty.display(sema.db).to_string();\n         let static_text_diff_len = \"Coerced to: \".len() - \"Type: \".len();\n         format!(\n-            \"{bt_start}Type: {:>apad$}\\nCoerced to: {:>opad$}\\n{bt_end}\",\n+            \"```text\\nType: {:>apad$}\\nCoerced to: {:>opad$}\\n```\\n\",\n             original,\n             adjusted,\n             apad = static_text_diff_len + adjusted.len().max(original.len()),\n             opad = original.len(),\n-            bt_start = if config.markdown() { \"```text\\n\" } else { \"\" },\n-            bt_end = if config.markdown() { \"```\\n\" } else { \"\" }\n         )\n         .into()\n-    } else if config.markdown() {\n-        Markup::fenced_block(&original.display(sema.db))\n     } else {\n-        original.display(sema.db).to_string().into()\n+        Markup::fenced_block(&original.display(sema.db))\n     };\n     res.actions.push(HoverAction::goto_type_from_targets(sema.db, targets));\n     Some(res)\n }\n \n pub(super) fn try_expr(\n     sema: &Semantics<'_, RootDatabase>,\n-    config: &HoverConfig,\n+    _config: &HoverConfig,\n     try_expr: &ast::TryExpr,\n ) -> Option<HoverResult> {\n     let inner_ty = sema.type_of_expr(&try_expr.expr()?)?.original;\n@@ -151,22 +146,20 @@ pub(super) fn try_expr(\n     let ppad = static_text_len_diff.min(0).abs() as usize;\n \n     res.markup = format!(\n-        \"{bt_start}{} Type: {:>pad0$}\\nPropagated as: {:>pad1$}\\n{bt_end}\",\n+        \"```text\\n{} Type: {:>pad0$}\\nPropagated as: {:>pad1$}\\n```\\n\",\n         s,\n         inner_ty,\n         body_ty,\n         pad0 = ty_len_max + tpad,\n         pad1 = ty_len_max + ppad,\n-        bt_start = if config.markdown() { \"```text\\n\" } else { \"\" },\n-        bt_end = if config.markdown() { \"```\\n\" } else { \"\" }\n     )\n     .into();\n     Some(res)\n }\n \n pub(super) fn deref_expr(\n     sema: &Semantics<'_, RootDatabase>,\n-    config: &HoverConfig,\n+    _config: &HoverConfig,\n     deref_expr: &ast::PrefixExpr,\n ) -> Option<HoverResult> {\n     let inner_ty = sema.type_of_expr(&deref_expr.expr()?)?.original;\n@@ -195,15 +188,13 @@ pub(super) fn deref_expr(\n             .max(adjusted.len() + coerced_len)\n             .max(inner.len() + deref_len);\n         format!(\n-            \"{bt_start}Dereferenced from: {:>ipad$}\\nTo type: {:>apad$}\\nCoerced to: {:>opad$}\\n{bt_end}\",\n+            \"```text\\nDereferenced from: {:>ipad$}\\nTo type: {:>apad$}\\nCoerced to: {:>opad$}\\n```\\n\",\n             inner,\n             original,\n             adjusted,\n             ipad = max_len - deref_len,\n             apad = max_len - type_len,\n             opad = max_len - coerced_len,\n-            bt_start = if config.markdown() { \"```text\\n\" } else { \"\" },\n-            bt_end = if config.markdown() { \"```\\n\" } else { \"\" }\n         )\n         .into()\n     } else {\n@@ -213,13 +204,11 @@ pub(super) fn deref_expr(\n         let deref_len = \"Dereferenced from: \".len();\n         let max_len = (original.len() + type_len).max(inner.len() + deref_len);\n         format!(\n-            \"{bt_start}Dereferenced from: {:>ipad$}\\nTo type: {:>apad$}\\n{bt_end}\",\n+            \"```text\\nDereferenced from: {:>ipad$}\\nTo type: {:>apad$}\\n```\\n\",\n             inner,\n             original,\n             ipad = max_len - deref_len,\n             apad = max_len - type_len,\n-            bt_start = if config.markdown() { \"```text\\n\" } else { \"\" },\n-            bt_end = if config.markdown() { \"```\\n\" } else { \"\" }\n         )\n         .into()\n     };\n@@ -233,7 +222,7 @@ pub(super) fn keyword(\n     config: &HoverConfig,\n     token: &SyntaxToken,\n ) -> Option<HoverResult> {\n-    if !token.kind().is_keyword() || !config.documentation.is_some() || !config.keywords {\n+    if !token.kind().is_keyword() || !config.documentation || !config.keywords {\n         return None;\n     }\n     let parent = token.parent()?;\n@@ -257,7 +246,7 @@ pub(super) fn keyword(\n /// i.e. `let S {a, ..} = S {a: 1, b: 2}`\n pub(super) fn struct_rest_pat(\n     sema: &Semantics<'_, RootDatabase>,\n-    config: &HoverConfig,\n+    _config: &HoverConfig,\n     pattern: &RecordPat,\n ) -> HoverResult {\n     let missing_fields = sema.record_pattern_missing_fields(pattern);\n@@ -286,11 +275,7 @@ pub(super) fn struct_rest_pat(\n         // get rid of trailing comma\n         s.truncate(s.len() - 2);\n \n-        if config.markdown() {\n-            Markup::fenced_block(&s)\n-        } else {\n-            s.into()\n-        }\n+        Markup::fenced_block(&s)\n     };\n     res.actions.push(HoverAction::goto_type_from_targets(sema.db, targets));\n     res\n@@ -344,13 +329,8 @@ pub(super) fn process_markup(\n     config: &HoverConfig,\n ) -> Markup {\n     let markup = markup.as_str();\n-    let markup = if !config.markdown() {\n-        remove_markdown(markup)\n-    } else if config.links_in_hover {\n-        rewrite_links(db, markup, def)\n-    } else {\n-        remove_links(markup)\n-    };\n+    let markup =\n+        if config.links_in_hover { rewrite_links(db, markup, def) } else { remove_links(markup) };\n     Markup::from(markup)\n }\n \n@@ -463,19 +443,18 @@ pub(super) fn definition(\n         Definition::DeriveHelper(it) => (format!(\"derive_helper {}\", it.name(db)), None),\n     };\n \n-    let docs = match config.documentation {\n-        Some(_) => docs.or_else(|| {\n+    let docs = docs\n+        .filter(|_| config.documentation)\n+        .or_else(|| {\n             // docs are missing, for assoc items of trait impls try to fall back to the docs of the\n             // original item of the trait\n             let assoc = def.as_assoc_item(db)?;\n             let trait_ = assoc.containing_trait_impl(db)?;\n             let name = Some(assoc.name(db)?);\n             let item = trait_.items(db).into_iter().find(|it| it.name(db) == name)?;\n             item.docs(db)\n-        }),\n-        None => None,\n-    };\n-    let docs = docs.filter(|_| config.documentation.is_some()).map(Into::into);\n+        })\n+        .map(Into::into);\n     markup(docs, label, mod_path)\n }\n "}, {"sha": "db2aaddc0be8d43ba5542fc7fad820ca50c61196", "filename": "crates/ide/src/hover/tests.rs", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c5b1e3f2ae5c397eb98d86228186a8e533243bfe/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5b1e3f2ae5c397eb98d86228186a8e533243bfe/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs?ref=c5b1e3f2ae5c397eb98d86228186a8e533243bfe", "patch": "@@ -2,16 +2,17 @@ use expect_test::{expect, Expect};\n use ide_db::base_db::{FileLoader, FileRange};\n use syntax::TextRange;\n \n-use crate::{fixture, hover::HoverDocFormat, HoverConfig};\n+use crate::{fixture, HoverConfig, HoverDocFormat};\n \n fn check_hover_no_result(ra_fixture: &str) {\n     let (analysis, position) = fixture::position(ra_fixture);\n     let hover = analysis\n         .hover(\n             &HoverConfig {\n                 links_in_hover: true,\n-                documentation: Some(HoverDocFormat::Markdown),\n+                documentation: true,\n                 keywords: true,\n+                format: HoverDocFormat::Markdown,\n             },\n             FileRange { file_id: position.file_id, range: TextRange::empty(position.offset) },\n         )\n@@ -26,8 +27,9 @@ fn check(ra_fixture: &str, expect: Expect) {\n         .hover(\n             &HoverConfig {\n                 links_in_hover: true,\n-                documentation: Some(HoverDocFormat::Markdown),\n+                documentation: true,\n                 keywords: true,\n+                format: HoverDocFormat::Markdown,\n             },\n             FileRange { file_id: position.file_id, range: TextRange::empty(position.offset) },\n         )\n@@ -47,8 +49,9 @@ fn check_hover_no_links(ra_fixture: &str, expect: Expect) {\n         .hover(\n             &HoverConfig {\n                 links_in_hover: false,\n-                documentation: Some(HoverDocFormat::Markdown),\n+                documentation: true,\n                 keywords: true,\n+                format: HoverDocFormat::Markdown,\n             },\n             FileRange { file_id: position.file_id, range: TextRange::empty(position.offset) },\n         )\n@@ -68,8 +71,9 @@ fn check_hover_no_markdown(ra_fixture: &str, expect: Expect) {\n         .hover(\n             &HoverConfig {\n                 links_in_hover: true,\n-                documentation: Some(HoverDocFormat::PlainText),\n+                documentation: true,\n                 keywords: true,\n+                format: HoverDocFormat::PlainText,\n             },\n             FileRange { file_id: position.file_id, range: TextRange::empty(position.offset) },\n         )\n@@ -89,8 +93,9 @@ fn check_actions(ra_fixture: &str, expect: Expect) {\n         .hover(\n             &HoverConfig {\n                 links_in_hover: true,\n-                documentation: Some(HoverDocFormat::Markdown),\n+                documentation: true,\n                 keywords: true,\n+                format: HoverDocFormat::Markdown,\n             },\n             FileRange { file_id, range: position.range_or_empty() },\n         )\n@@ -105,8 +110,9 @@ fn check_hover_range(ra_fixture: &str, expect: Expect) {\n         .hover(\n             &HoverConfig {\n                 links_in_hover: false,\n-                documentation: Some(HoverDocFormat::Markdown),\n+                documentation: true,\n                 keywords: true,\n+                format: HoverDocFormat::Markdown,\n             },\n             range,\n         )\n@@ -121,8 +127,9 @@ fn check_hover_range_no_results(ra_fixture: &str) {\n         .hover(\n             &HoverConfig {\n                 links_in_hover: false,\n-                documentation: Some(HoverDocFormat::Markdown),\n+                documentation: true,\n                 keywords: true,\n+                format: HoverDocFormat::Markdown,\n             },\n             range,\n         )"}, {"sha": "07a3fe3f02b10557ac959adcca68c7a72346879e", "filename": "crates/ide/src/markdown_remove.rs", "status": "modified", "additions": 146, "deletions": 1, "changes": 147, "blob_url": "https://github.com/rust-lang/rust/blob/c5b1e3f2ae5c397eb98d86228186a8e533243bfe/crates%2Fide%2Fsrc%2Fmarkdown_remove.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5b1e3f2ae5c397eb98d86228186a8e533243bfe/crates%2Fide%2Fsrc%2Fmarkdown_remove.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fmarkdown_remove.rs?ref=c5b1e3f2ae5c397eb98d86228186a8e533243bfe", "patch": "@@ -14,9 +14,154 @@ pub(crate) fn remove_markdown(markdown: &str) -> String {\n             Event::SoftBreak | Event::HardBreak | Event::Rule | Event::End(Tag::CodeBlock(_)) => {\n                 out.push('\\n')\n             }\n-            _ => {}\n+            Event::End(Tag::Paragraph) => {\n+                out.push('\\n');\n+                out.push('\\n');\n+            }\n+            Event::Start(_)\n+            | Event::End(_)\n+            | Event::Html(_)\n+            | Event::FootnoteReference(_)\n+            | Event::TaskListMarker(_) => (),\n         }\n     }\n \n+    if let Some(p) = out.rfind(|c| c != '\\n') {\n+        out.drain(p + 1..);\n+    }\n+\n     out\n }\n+\n+#[cfg(test)]\n+mod tests {\n+    use expect_test::expect;\n+\n+    use super::*;\n+\n+    #[test]\n+    fn smoke_test() {\n+        let res = remove_markdown(\n+            r##\"\n+A function or function pointer.\n+\n+Functions are the primary way code is executed within Rust. Function blocks, usually just\n+called functions, can be defined in a variety of different places and be assigned many\n+different attributes and modifiers.\n+\n+Standalone functions that just sit within a module not attached to anything else are common,\n+but most functions will end up being inside [`impl`] blocks, either on another type itself, or\n+as a trait impl for that type.\n+\n+```rust\n+fn standalone_function() {\n+    // code\n+}\n+\n+pub fn public_thing(argument: bool) -> String {\n+    // code\n+    # \"\".to_string()\n+}\n+\n+struct Thing {\n+    foo: i32,\n+}\n+\n+impl Thing {\n+    pub fn new() -> Self {\n+        Self {\n+            foo: 42,\n+        }\n+    }\n+}\n+```\n+\n+In addition to presenting fixed types in the form of `fn name(arg: type, ..) -> return_type`,\n+functions can also declare a list of type parameters along with trait bounds that they fall\n+into.\n+\n+```rust\n+fn generic_function<T: Clone>(x: T) -> (T, T, T) {\n+    (x.clone(), x.clone(), x.clone())\n+}\n+\n+fn generic_where<T>(x: T) -> T\n+    where T: std::ops::Add<Output = T> + Copy\n+{\n+    x + x + x\n+}\n+```\n+\n+Declaring trait bounds in the angle brackets is functionally identical to using a `where`\n+clause. It's up to the programmer to decide which works better in each situation, but `where`\n+tends to be better when things get longer than one line.\n+\n+Along with being made public via `pub`, `fn` can also have an [`extern`] added for use in\n+FFI.\n+\n+For more information on the various types of functions and how they're used, consult the [Rust\n+book] or the [Reference].\n+\n+[`impl`]: keyword.impl.html\n+[`extern`]: keyword.extern.html\n+[Rust book]: ../book/ch03-03-how-functions-work.html\n+[Reference]: ../reference/items/functions.html\n+\"##,\n+        );\n+        expect![[r#\"\n+            A function or function pointer.\n+\n+            Functions are the primary way code is executed within Rust. Function blocks, usually just\n+            called functions, can be defined in a variety of different places and be assigned many\n+            different attributes and modifiers.\n+\n+            Standalone functions that just sit within a module not attached to anything else are common,\n+            but most functions will end up being inside impl blocks, either on another type itself, or\n+            as a trait impl for that type.\n+\n+            fn standalone_function() {\n+                // code\n+            }\n+\n+            pub fn public_thing(argument: bool) -> String {\n+                // code\n+                # \"\".to_string()\n+            }\n+\n+            struct Thing {\n+                foo: i32,\n+            }\n+\n+            impl Thing {\n+                pub fn new() -> Self {\n+                    Self {\n+                        foo: 42,\n+                    }\n+                }\n+            }\n+\n+            In addition to presenting fixed types in the form of fn name(arg: type, ..) -> return_type,\n+            functions can also declare a list of type parameters along with trait bounds that they fall\n+            into.\n+\n+            fn generic_function<T: Clone>(x: T) -> (T, T, T) {\n+                (x.clone(), x.clone(), x.clone())\n+            }\n+\n+            fn generic_where<T>(x: T) -> T\n+                where T: std::ops::Add<Output = T> + Copy\n+            {\n+                x + x + x\n+            }\n+\n+            Declaring trait bounds in the angle brackets is functionally identical to using a where\n+            clause. It's up to the programmer to decide which works better in each situation, but where\n+            tends to be better when things get longer than one line.\n+\n+            Along with being made public via pub, fn can also have an extern added for use in\n+            FFI.\n+\n+            For more information on the various types of functions and how they're used, consult the Rust\n+            book or the Reference.\"#]].assert_eq(&res);\n+    }\n+}"}, {"sha": "3f7f6885f611e3b4a2598f2cd5b15e00dc735801", "filename": "crates/ide/src/static_index.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c5b1e3f2ae5c397eb98d86228186a8e533243bfe/crates%2Fide%2Fsrc%2Fstatic_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5b1e3f2ae5c397eb98d86228186a8e533243bfe/crates%2Fide%2Fsrc%2Fstatic_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fstatic_index.rs?ref=c5b1e3f2ae5c397eb98d86228186a8e533243bfe", "patch": "@@ -16,8 +16,7 @@ use crate::{\n     inlay_hints::AdjustmentHintsMode,\n     moniker::{def_to_moniker, MonikerResult},\n     parent_module::crates_for,\n-    Analysis, Fold, HoverConfig, HoverDocFormat, HoverResult, InlayHint, InlayHintsConfig,\n-    TryToNav,\n+    Analysis, Fold, HoverConfig, HoverResult, InlayHint, InlayHintsConfig, TryToNav,\n };\n \n /// A static representation of fully analyzed source code.\n@@ -137,8 +136,9 @@ impl StaticIndex<'_> {\n         });\n         let hover_config = HoverConfig {\n             links_in_hover: true,\n-            documentation: Some(HoverDocFormat::Markdown),\n+            documentation: true,\n             keywords: true,\n+            format: crate::HoverDocFormat::Markdown,\n         };\n         let tokens = tokens.filter(|token| {\n             matches!("}, {"sha": "c4d9ad7dff573218fa1e96f0723093254913a1cc", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c5b1e3f2ae5c397eb98d86228186a8e533243bfe/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5b1e3f2ae5c397eb98d86228186a8e533243bfe/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=c5b1e3f2ae5c397eb98d86228186a8e533243bfe", "patch": "@@ -1393,7 +1393,8 @@ impl Config {\n     pub fn hover(&self) -> HoverConfig {\n         HoverConfig {\n             links_in_hover: self.data.hover_links_enable,\n-            documentation: self.data.hover_documentation_enable.then(|| {\n+            documentation: self.data.hover_documentation_enable,\n+            format: {\n                 let is_markdown = try_or_def!(self\n                     .caps\n                     .text_document\n@@ -1409,7 +1410,7 @@ impl Config {\n                 } else {\n                     HoverDocFormat::PlainText\n                 }\n-            }),\n+            },\n             keywords: self.data.hover_documentation_keywords_enable,\n         }\n     }"}, {"sha": "4e08bd0a724a205af703ed44cac44f2004450db3", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c5b1e3f2ae5c397eb98d86228186a8e533243bfe/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5b1e3f2ae5c397eb98d86228186a8e533243bfe/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=c5b1e3f2ae5c397eb98d86228186a8e533243bfe", "patch": "@@ -936,8 +936,7 @@ pub(crate) fn handle_hover(\n \n     let line_index = snap.file_line_index(file_range.file_id)?;\n     let range = to_proto::range(&line_index, info.range);\n-    let markup_kind =\n-        snap.config.hover().documentation.map_or(ide::HoverDocFormat::Markdown, |kind| kind);\n+    let markup_kind = snap.config.hover().format;\n     let hover = lsp_ext::Hover {\n         hover: lsp_types::Hover {\n             contents: HoverContents::Markup(to_proto::markup_content("}]}