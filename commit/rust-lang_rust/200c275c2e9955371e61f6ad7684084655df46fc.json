{"sha": "200c275c2e9955371e61f6ad7684084655df46fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwMGMyNzVjMmU5OTU1MzcxZTYxZjZhZDc2ODQwODQ2NTVkZjQ2ZmM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-03-16T10:26:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-16T10:26:31Z"}, "message": "Merge #3534\n\n3534: Feature: vscode impl nightlies download and installation r=Veetaha a=Veetaha\n\nI need to test things more, but the core shape of the code is quite well-formed.\r\nThe main problem is that we save the release date only for nightlies and there are no means to get the release date of the stable extension (i.e. for this we would need to consult the github releases via a network request, or we would need to somehow save this info into package.json or any other file accessible from the extension code during the deployment step, but this will be very hard I guess).\r\nSo there is an invariant that the users can install nightly only from our extension and they can't do it manually, because when installing the nightly `.vsix` we actually save its release date to `globalState`\r\n\r\nCloses: #3402\r\n\r\nTODO:\r\n- [x] More manual tests and documentation\r\n\r\ncc @matklad @lnicola \n\nCo-authored-by: Veetaha <gerzoh1@gmail.com>\nCo-authored-by: Veetaha <veetaha2@gmail.com>", "tree": {"sha": "c4b61de644cec37cffca9010d56afc4136d23ca8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4b61de644cec37cffca9010d56afc4136d23ca8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/200c275c2e9955371e61f6ad7684084655df46fc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeb1RYCRBK7hj4Ov3rIwAAdHIIACGDl/C4ygzlyfosIbG6WiLK\n6McPn4+ey5oNbL0y+VglqzqKOO1660ElVnVehrbHPzDkpWeiLKa+QmO3H9dsvXSb\n4UD5zoRQDlgs8MggC+zlnZr36bqEMtCaJ+2N26MXOLahESuIkQYJGFUpcCR5nbhr\n3By4u1bwH2OqnLJ7le7cOB6bszkOQ0/IJ5hNqGvP5BX9dqlOcJOnzbVMSaLgEUT0\nwTZLT6bcqP04JZx10rPF/LM4aw2FhLoKkEiqc3rZZXmmSQTMUV6443sshSEG6bfq\nZULvfOXDiMMrOg0HbuICh32t8U1iQG9exhpHfkIn69SzaQ6/i6rLSFpsP7sAaFs=\n=rREh\n-----END PGP SIGNATURE-----\n", "payload": "tree c4b61de644cec37cffca9010d56afc4136d23ca8\nparent a99cac671c3e6105a0192acbb1a91cb83e453018\nparent 5a0041c5aaeee49be84ce771fb0360ae55cbd8b2\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1584354391 +0000\ncommitter GitHub <noreply@github.com> 1584354391 +0000\n\nMerge #3534\n\n3534: Feature: vscode impl nightlies download and installation r=Veetaha a=Veetaha\n\nI need to test things more, but the core shape of the code is quite well-formed.\r\nThe main problem is that we save the release date only for nightlies and there are no means to get the release date of the stable extension (i.e. for this we would need to consult the github releases via a network request, or we would need to somehow save this info into package.json or any other file accessible from the extension code during the deployment step, but this will be very hard I guess).\r\nSo there is an invariant that the users can install nightly only from our extension and they can't do it manually, because when installing the nightly `.vsix` we actually save its release date to `globalState`\r\n\r\nCloses: #3402\r\n\r\nTODO:\r\n- [x] More manual tests and documentation\r\n\r\ncc @matklad @lnicola \n\nCo-authored-by: Veetaha <gerzoh1@gmail.com>\nCo-authored-by: Veetaha <veetaha2@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/200c275c2e9955371e61f6ad7684084655df46fc", "html_url": "https://github.com/rust-lang/rust/commit/200c275c2e9955371e61f6ad7684084655df46fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/200c275c2e9955371e61f6ad7684084655df46fc/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a99cac671c3e6105a0192acbb1a91cb83e453018", "url": "https://api.github.com/repos/rust-lang/rust/commits/a99cac671c3e6105a0192acbb1a91cb83e453018", "html_url": "https://github.com/rust-lang/rust/commit/a99cac671c3e6105a0192acbb1a91cb83e453018"}, {"sha": "5a0041c5aaeee49be84ce771fb0360ae55cbd8b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a0041c5aaeee49be84ce771fb0360ae55cbd8b2", "html_url": "https://github.com/rust-lang/rust/commit/5a0041c5aaeee49be84ce771fb0360ae55cbd8b2"}], "stats": {"total": 601, "additions": 454, "deletions": 147}, "files": [{"sha": "2e6c6112fa20663fcdf912c4118a1890a26a4c07", "filename": "docs/user/readme.adoc", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/200c275c2e9955371e61f6ad7684084655df46fc/docs%2Fuser%2Freadme.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/200c275c2e9955371e61f6ad7684084655df46fc/docs%2Fuser%2Freadme.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Freadme.adoc?ref=200c275c2e9955371e61f6ad7684084655df46fc", "patch": "@@ -65,6 +65,25 @@ Note that we only support the latest version of VS Code.\n \n The extension will be updated automatically as new versions become available. It will ask your permission to download the matching language server version binary if needed.\n \n+===== Nightly\n+\n+We ship nightly releases for VS Code. To help us out with testing the newest code and follow the bleeding edge of our `master`, please use the following config:\n+\n+[source,json]\n+----\n+{ \"rust-analyzer.updates.channel\": \"nightly\" }\n+----\n+\n+You will be prompted to install the `nightly` extension version. Just click `Download now` and from that moment you will get automatic updates each 24 hours.\n+\n+If you don't want to be asked for `Download now` every day when the new nightly version is released add the following to your `settings.json`:\n+[source,json]\n+----\n+{ \"rust-analyzer.updates.askBeforeDownload\": false }\n+----\n+\n+NOTE: Nightly extension should **only** be installed via the `Download now` action from VS Code.\n+\n ==== Building From Source\n \n Alternatively, both the server and the plugin can be installed from source:"}, {"sha": "575dc7c4a1f143d9a00df5dc2366fe51a4eb40eb", "filename": "editors/code/package-lock.json", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/200c275c2e9955371e61f6ad7684084655df46fc/editors%2Fcode%2Fpackage-lock.json", "raw_url": "https://github.com/rust-lang/rust/raw/200c275c2e9955371e61f6ad7684084655df46fc/editors%2Fcode%2Fpackage-lock.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage-lock.json?ref=200c275c2e9955371e61f6ad7684084655df46fc", "patch": "@@ -1,6 +1,6 @@\n {\n     \"name\": \"rust-analyzer\",\n-    \"version\": \"0.2.20200211-dev\",\n+    \"version\": \"0.2.20200309-nightly\",\n     \"lockfileVersion\": 1,\n     \"requires\": true,\n     \"dependencies\": {"}, {"sha": "faf10528d530c2a18d5ec7da23d0cb3b4dd6a3f3", "filename": "editors/code/package.json", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/200c275c2e9955371e61f6ad7684084655df46fc/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/200c275c2e9955371e61f6ad7684084655df46fc/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=200c275c2e9955371e61f6ad7684084655df46fc", "patch": "@@ -6,7 +6,7 @@\n     \"private\": true,\n     \"icon\": \"icon.png\",\n     \"//\": \"The real version is in release.yaml, this one just needs to be bigger\",\n-    \"version\": \"0.2.20200211-dev\",\n+    \"version\": \"0.2.20200309-nightly\",\n     \"publisher\": \"matklad\",\n     \"repository\": {\n         \"url\": \"https://github.com/rust-analyzer/rust-analyzer.git\",\n@@ -219,6 +219,19 @@\n                         }\n                     }\n                 },\n+                \"rust-analyzer.updates.channel\": {\n+                    \"type\": \"string\",\n+                    \"enum\": [\n+                        \"stable\",\n+                        \"nightly\"\n+                    ],\n+                    \"default\": \"stable\",\n+                    \"markdownEnumDescriptions\": [\n+                        \"`\\\"stable\\\"` updates are shipped weekly, they don't contain cutting-edge features from VSCode proposed APIs but have less bugs in general\",\n+                        \"`\\\"nightly\\\"` updates are shipped daily, they contain cutting-edge features and latest bug fixes. These releases help us get your feedback very quickly and speed up rust-analyzer development **drastically**\"\n+                    ],\n+                    \"markdownDescription\": \"Choose `\\\"nightly\\\"` updates to get the latest features and bug fixes every day. While `\\\"stable\\\"` releases occur weekly and don't contain cutting-edge features from VSCode proposed APIs\"\n+                },\n                 \"rust-analyzer.updates.askBeforeDownload\": {\n                     \"type\": \"boolean\",\n                     \"default\": true,\n@@ -235,7 +248,7 @@\n                         \"string\"\n                     ],\n                     \"default\": null,\n-                    \"description\": \"Path to rust-analyzer executable (points to bundled binary by default)\"\n+                    \"description\": \"Path to rust-analyzer executable (points to bundled binary by default). If this is set, then \\\"rust-analyzer.updates.channel\\\" setting is not used\"\n                 },\n                 \"rust-analyzer.excludeGlobs\": {\n                     \"type\": \"array\","}, {"sha": "c4d84b4439eec89f906f7f0a3b155b1d7e52f502", "filename": "editors/code/src/commands/server_version.ts", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/200c275c2e9955371e61f6ad7684084655df46fc/editors%2Fcode%2Fsrc%2Fcommands%2Fserver_version.ts", "raw_url": "https://github.com/rust-lang/rust/raw/200c275c2e9955371e61f6ad7684084655df46fc/editors%2Fcode%2Fsrc%2Fcommands%2Fserver_version.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fserver_version.ts?ref=200c275c2e9955371e61f6ad7684084655df46fc", "patch": "@@ -5,7 +5,7 @@ import { spawnSync } from 'child_process';\n \n export function serverVersion(ctx: Ctx): Cmd {\n     return async () => {\n-        const binaryPath = await ensureServerBinary(ctx.config.serverSource);\n+        const binaryPath = await ensureServerBinary(ctx.config);\n \n         if (binaryPath == null) {\n             throw new Error(\n@@ -18,4 +18,3 @@ export function serverVersion(ctx: Ctx): Cmd {\n         vscode.window.showInformationMessage('rust-analyzer version : ' + version);\n     };\n }\n-"}, {"sha": "f63e1d20e850f8834bf2503c39df6b103095d0f7", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 97, "deletions": 20, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/200c275c2e9955371e61f6ad7684084655df46fc/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/200c275c2e9955371e61f6ad7684084655df46fc/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=200c275c2e9955371e61f6ad7684084655df46fc", "patch": "@@ -1,7 +1,7 @@\n import * as os from \"os\";\n import * as vscode from 'vscode';\n import { ArtifactSource } from \"./installation/interfaces\";\n-import { log } from \"./util\";\n+import { log, vscodeReloadWindow } from \"./util\";\n \n const RA_LSP_DEBUG = process.env.__RA_LSP_SERVER_DEBUG;\n \n@@ -23,25 +23,40 @@ export interface CargoFeatures {\n     allFeatures: boolean;\n     features: string[];\n }\n+\n+export const enum UpdatesChannel {\n+    Stable = \"stable\",\n+    Nightly = \"nightly\"\n+}\n+\n+export const NIGHTLY_TAG = \"nightly\";\n export class Config {\n-    private static readonly rootSection = \"rust-analyzer\";\n-    private static readonly requiresReloadOpts = [\n+    readonly extensionId = \"matklad.rust-analyzer\";\n+\n+    private readonly rootSection = \"rust-analyzer\";\n+    private readonly requiresReloadOpts = [\n+        \"serverPath\",\n         \"cargoFeatures\",\n         \"cargo-watch\",\n         \"highlighting.semanticTokens\",\n         \"inlayHints\",\n     ]\n-        .map(opt => `${Config.rootSection}.${opt}`);\n+        .map(opt => `${this.rootSection}.${opt}`);\n \n-    private static readonly extensionVersion: string = (() => {\n-        const packageJsonVersion = vscode\n-            .extensions\n-            .getExtension(\"matklad.rust-analyzer\")!\n-            .packageJSON\n-            .version as string; // n.n.YYYYMMDD\n+    readonly packageJsonVersion = vscode\n+        .extensions\n+        .getExtension(this.extensionId)!\n+        .packageJSON\n+        .version as string; // n.n.YYYYMMDD[-nightly]\n+\n+    /**\n+     * Either `nightly` or `YYYY-MM-DD` (i.e. `stable` release)\n+     */\n+    readonly extensionReleaseTag: string = (() => {\n+        if (this.packageJsonVersion.endsWith(NIGHTLY_TAG)) return NIGHTLY_TAG;\n \n         const realVersionRegexp = /^\\d+\\.\\d+\\.(\\d{4})(\\d{2})(\\d{2})/;\n-        const [, yyyy, mm, dd] = packageJsonVersion.match(realVersionRegexp)!;\n+        const [, yyyy, mm, dd] = this.packageJsonVersion.match(realVersionRegexp)!;\n \n         return `${yyyy}-${mm}-${dd}`;\n     })();\n@@ -54,16 +69,19 @@ export class Config {\n     }\n \n     private refreshConfig() {\n-        this.cfg = vscode.workspace.getConfiguration(Config.rootSection);\n+        this.cfg = vscode.workspace.getConfiguration(this.rootSection);\n         const enableLogging = this.cfg.get(\"trace.extension\") as boolean;\n         log.setEnabled(enableLogging);\n-        log.debug(\"Using configuration:\", this.cfg);\n+        log.debug(\n+            \"Extension version:\", this.packageJsonVersion,\n+            \"using configuration:\", this.cfg\n+        );\n     }\n \n     private async onConfigChange(event: vscode.ConfigurationChangeEvent) {\n         this.refreshConfig();\n \n-        const requiresReloadOpt = Config.requiresReloadOpts.find(\n+        const requiresReloadOpt = this.requiresReloadOpts.find(\n             opt => event.affectsConfiguration(opt)\n         );\n \n@@ -75,7 +93,7 @@ export class Config {\n         );\n \n         if (userResponse === \"Reload now\") {\n-            vscode.commands.executeCommand(\"workbench.action.reloadWindow\");\n+            await vscodeReloadWindow();\n         }\n     }\n \n@@ -121,8 +139,14 @@ export class Config {\n         }\n     }\n \n+    get installedExtensionUpdateChannel(): UpdatesChannel {\n+        return this.extensionReleaseTag === NIGHTLY_TAG\n+            ? UpdatesChannel.Nightly\n+            : UpdatesChannel.Stable;\n+    }\n+\n     get serverSource(): null | ArtifactSource {\n-        const serverPath = RA_LSP_DEBUG ?? this.cfg.get<null | string>(\"serverPath\");\n+        const serverPath = RA_LSP_DEBUG ?? this.serverPath;\n \n         if (serverPath) {\n             return {\n@@ -135,23 +159,42 @@ export class Config {\n \n         if (!prebuiltBinaryName) return null;\n \n+        return this.createGithubReleaseSource(\n+            prebuiltBinaryName,\n+            this.extensionReleaseTag\n+        );\n+    }\n+\n+    private createGithubReleaseSource(file: string, tag: string): ArtifactSource.GithubRelease {\n         return {\n             type: ArtifactSource.Type.GithubRelease,\n+            file,\n+            tag,\n             dir: this.ctx.globalStoragePath,\n-            file: prebuiltBinaryName,\n-            storage: this.ctx.globalState,\n-            tag: Config.extensionVersion,\n-            askBeforeDownload: this.cfg.get(\"updates.askBeforeDownload\") as boolean,\n             repo: {\n                 name: \"rust-analyzer\",\n                 owner: \"rust-analyzer\",\n             }\n         };\n     }\n \n+    get nightlyVsixSource(): ArtifactSource.GithubRelease {\n+        return this.createGithubReleaseSource(\"rust-analyzer.vsix\", NIGHTLY_TAG);\n+    }\n+\n+    readonly installedNightlyExtensionReleaseDate = new DateStorage(\n+        \"installed-nightly-extension-release-date\",\n+        this.ctx.globalState\n+    );\n+    readonly serverReleaseDate = new DateStorage(\"server-release-date\", this.ctx.globalState);\n+    readonly serverReleaseTag = new Storage<null | string>(\"server-release-tag\", this.ctx.globalState, null);\n+\n     // We don't do runtime config validation here for simplicity. More on stackoverflow:\n     // https://stackoverflow.com/questions/60135780/what-is-the-best-way-to-type-check-the-configuration-for-vscode-extension\n \n+    private get serverPath() { return this.cfg.get(\"serverPath\") as null | string; }\n+    get updatesChannel() { return this.cfg.get(\"updates.channel\") as UpdatesChannel; }\n+    get askBeforeDownload() { return this.cfg.get(\"updates.askBeforeDownload\") as boolean; }\n     get highlightingSemanticTokens() { return this.cfg.get(\"highlighting.semanticTokens\") as boolean; }\n     get highlightingOn() { return this.cfg.get(\"highlightingOn\") as boolean; }\n     get rainbowHighlightingOn() { return this.cfg.get(\"rainbowHighlightingOn\") as boolean; }\n@@ -189,3 +232,37 @@ export class Config {\n     // for internal use\n     get withSysroot() { return this.cfg.get(\"withSysroot\", true) as boolean; }\n }\n+\n+export class Storage<T> {\n+    constructor(\n+        private readonly key: string,\n+        private readonly storage: vscode.Memento,\n+        private readonly defaultVal: T\n+    ) { }\n+\n+    get(): T {\n+        const val = this.storage.get(this.key, this.defaultVal);\n+        log.debug(this.key, \"==\", val);\n+        return val;\n+    }\n+    async set(val: T) {\n+        log.debug(this.key, \"=\", val);\n+        await this.storage.update(this.key, val);\n+    }\n+}\n+export class DateStorage {\n+    inner: Storage<null | string>;\n+\n+    constructor(key: string, storage: vscode.Memento) {\n+        this.inner = new Storage(key, storage, null);\n+    }\n+\n+    get(): null | Date {\n+        const dateStr = this.inner.get();\n+        return dateStr ? new Date(dateStr) : null;\n+    }\n+\n+    async set(date: null | Date) {\n+        await this.inner.set(date ? date.toString() : null);\n+    }\n+}"}, {"sha": "97e4d67c21d2f600a9401525e4aa706085c6214a", "filename": "editors/code/src/installation/download_artifact.ts", "status": "removed", "additions": 0, "deletions": 50, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/a99cac671c3e6105a0192acbb1a91cb83e453018/editors%2Fcode%2Fsrc%2Finstallation%2Fdownload_artifact.ts", "raw_url": "https://github.com/rust-lang/rust/raw/a99cac671c3e6105a0192acbb1a91cb83e453018/editors%2Fcode%2Fsrc%2Finstallation%2Fdownload_artifact.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Finstallation%2Fdownload_artifact.ts?ref=a99cac671c3e6105a0192acbb1a91cb83e453018", "patch": "@@ -1,50 +0,0 @@\n-import * as vscode from \"vscode\";\n-import * as path from \"path\";\n-import { promises as fs } from \"fs\";\n-\n-import { ArtifactReleaseInfo } from \"./interfaces\";\n-import { downloadFile } from \"./download_file\";\n-import { assert } from \"../util\";\n-\n-/**\n- * Downloads artifact from given `downloadUrl`.\n- * Creates `installationDir` if it is not yet created and put the artifact under\n- * `artifactFileName`.\n- * Displays info about the download progress in an info message printing the name\n- * of the artifact as `displayName`.\n- */\n-export async function downloadArtifact(\n-    { downloadUrl, releaseName }: ArtifactReleaseInfo,\n-    artifactFileName: string,\n-    installationDir: string,\n-    displayName: string,\n-) {\n-    await fs.mkdir(installationDir).catch(err => assert(\n-        err?.code === \"EEXIST\",\n-        `Couldn't create directory \"${installationDir}\" to download ` +\n-        `${artifactFileName} artifact: ${err?.message}`\n-    ));\n-\n-    const installationPath = path.join(installationDir, artifactFileName);\n-\n-    await vscode.window.withProgress(\n-        {\n-            location: vscode.ProgressLocation.Notification,\n-            cancellable: false, // FIXME: add support for canceling download?\n-            title: `Downloading ${displayName} (${releaseName})`\n-        },\n-        async (progress, _cancellationToken) => {\n-            let lastPrecentage = 0;\n-            const filePermissions = 0o755; // (rwx, r_x, r_x)\n-            await downloadFile(downloadUrl, installationPath, filePermissions, (readBytes, totalBytes) => {\n-                const newPercentage = (readBytes / totalBytes) * 100;\n-                progress.report({\n-                    message: newPercentage.toFixed(0) + \"%\",\n-                    increment: newPercentage - lastPrecentage\n-                });\n-\n-                lastPrecentage = newPercentage;\n-            });\n-        }\n-    );\n-}"}, {"sha": "7ce2e2960f233bc2fa95a1260e903eccdb0a1301", "filename": "editors/code/src/installation/downloads.ts", "status": "renamed", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/200c275c2e9955371e61f6ad7684084655df46fc/editors%2Fcode%2Fsrc%2Finstallation%2Fdownloads.ts", "raw_url": "https://github.com/rust-lang/rust/raw/200c275c2e9955371e61f6ad7684084655df46fc/editors%2Fcode%2Fsrc%2Finstallation%2Fdownloads.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Finstallation%2Fdownloads.ts?ref=200c275c2e9955371e61f6ad7684084655df46fc", "patch": "@@ -1,8 +1,11 @@\n import fetch from \"node-fetch\";\n+import * as vscode from \"vscode\";\n+import * as path from \"path\";\n import * as fs from \"fs\";\n import * as stream from \"stream\";\n import * as util from \"util\";\n import { log, assert } from \"../util\";\n+import { ArtifactReleaseInfo } from \"./interfaces\";\n \n const pipeline = util.promisify(stream.pipeline);\n \n@@ -49,3 +52,46 @@ export async function downloadFile(\n         // Issue at nodejs repo: https://github.com/nodejs/node/issues/31776\n     });\n }\n+\n+/**\n+ * Downloads artifact from given `downloadUrl`.\n+ * Creates `installationDir` if it is not yet created and puts the artifact under\n+ * `artifactFileName`.\n+ * Displays info about the download progress in an info message printing the name\n+ * of the artifact as `displayName`.\n+ */\n+export async function downloadArtifactWithProgressUi(\n+    { downloadUrl, releaseName }: ArtifactReleaseInfo,\n+    artifactFileName: string,\n+    installationDir: string,\n+    displayName: string,\n+) {\n+    await fs.promises.mkdir(installationDir).catch(err => assert(\n+        err?.code === \"EEXIST\",\n+        `Couldn't create directory \"${installationDir}\" to download ` +\n+        `${artifactFileName} artifact: ${err?.message}`\n+    ));\n+\n+    const installationPath = path.join(installationDir, artifactFileName);\n+\n+    await vscode.window.withProgress(\n+        {\n+            location: vscode.ProgressLocation.Notification,\n+            cancellable: false, // FIXME: add support for canceling download?\n+            title: `Downloading rust-analyzer ${displayName} (${releaseName})`\n+        },\n+        async (progress, _cancellationToken) => {\n+            let lastPrecentage = 0;\n+            const filePermissions = 0o755; // (rwx, r_x, r_x)\n+            await downloadFile(downloadUrl, installationPath, filePermissions, (readBytes, totalBytes) => {\n+                const newPercentage = (readBytes / totalBytes) * 100;\n+                progress.report({\n+                    message: newPercentage.toFixed(0) + \"%\",\n+                    increment: newPercentage - lastPrecentage\n+                });\n+\n+                lastPrecentage = newPercentage;\n+            });\n+        }\n+    );\n+}", "previous_filename": "editors/code/src/installation/download_file.ts"}, {"sha": "eea6fded237a5f36d8bd3d21ab3fbedcf4cc3397", "filename": "editors/code/src/installation/extension.ts", "status": "added", "additions": 144, "deletions": 0, "changes": 144, "blob_url": "https://github.com/rust-lang/rust/blob/200c275c2e9955371e61f6ad7684084655df46fc/editors%2Fcode%2Fsrc%2Finstallation%2Fextension.ts", "raw_url": "https://github.com/rust-lang/rust/raw/200c275c2e9955371e61f6ad7684084655df46fc/editors%2Fcode%2Fsrc%2Finstallation%2Fextension.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Finstallation%2Fextension.ts?ref=200c275c2e9955371e61f6ad7684084655df46fc", "patch": "@@ -0,0 +1,144 @@\n+import * as vscode from \"vscode\";\n+import * as path from \"path\";\n+import { promises as fs } from 'fs';\n+\n+import { vscodeReinstallExtension, vscodeReloadWindow, log, vscodeInstallExtensionFromVsix, assert, notReentrant } from \"../util\";\n+import { Config, UpdatesChannel } from \"../config\";\n+import { ArtifactReleaseInfo, ArtifactSource } from \"./interfaces\";\n+import { downloadArtifactWithProgressUi } from \"./downloads\";\n+import { fetchArtifactReleaseInfo } from \"./fetch_artifact_release_info\";\n+\n+const HEURISTIC_NIGHTLY_RELEASE_PERIOD_IN_HOURS = 25;\n+\n+/**\n+ * Installs `stable` or latest `nightly` version or does nothing if the current\n+ * extension version is what's needed according to `desiredUpdateChannel`.\n+ */\n+export async function ensureProperExtensionVersion(config: Config): Promise<never | void> {\n+    // User has built lsp server from sources, she should manage updates manually\n+    if (config.serverSource?.type === ArtifactSource.Type.ExplicitPath) return;\n+\n+    const currentUpdChannel = config.installedExtensionUpdateChannel;\n+    const desiredUpdChannel = config.updatesChannel;\n+\n+    if (currentUpdChannel === UpdatesChannel.Stable) {\n+        // Release date is present only when we are on nightly\n+        await config.installedNightlyExtensionReleaseDate.set(null);\n+    }\n+\n+    if (desiredUpdChannel === UpdatesChannel.Stable) {\n+        // VSCode should handle updates for stable channel\n+        if (currentUpdChannel === UpdatesChannel.Stable) return;\n+\n+        if (!await askToDownloadProperExtensionVersion(config)) return;\n+\n+        await vscodeReinstallExtension(config.extensionId);\n+        await vscodeReloadWindow(); // never returns\n+    }\n+\n+    if (currentUpdChannel === UpdatesChannel.Stable) {\n+        if (!await askToDownloadProperExtensionVersion(config)) return;\n+\n+        return await tryDownloadNightlyExtension(config);\n+    }\n+\n+    const currentExtReleaseDate = config.installedNightlyExtensionReleaseDate.get();\n+\n+    if (currentExtReleaseDate === null) {\n+        void vscode.window.showErrorMessage(\n+            \"Nightly release date must've been set during the installation. \" +\n+            \"Did you download and install the nightly .vsix package manually?\"\n+        );\n+        throw new Error(\"Nightly release date was not set in globalStorage\");\n+    }\n+\n+    const dateNow = new Date;\n+    const hoursSinceLastUpdate = diffInHours(currentExtReleaseDate, dateNow);\n+    log.debug(\n+        \"Current rust-analyzer nightly was downloaded\", hoursSinceLastUpdate,\n+        \"hours ago, namely:\", currentExtReleaseDate, \"and now is\", dateNow\n+    );\n+\n+    if (hoursSinceLastUpdate < HEURISTIC_NIGHTLY_RELEASE_PERIOD_IN_HOURS) {\n+        return;\n+    }\n+    if (!await askToDownloadProperExtensionVersion(config, \"The installed nightly version is most likely outdated. \")) {\n+        return;\n+    }\n+\n+    await tryDownloadNightlyExtension(config, releaseInfo => {\n+        assert(\n+            currentExtReleaseDate.getTime() === config.installedNightlyExtensionReleaseDate.get()?.getTime(),\n+            \"Other active VSCode instance has reinstalled the extension\"\n+        );\n+\n+        if (releaseInfo.releaseDate.getTime() === currentExtReleaseDate.getTime()) {\n+            vscode.window.showInformationMessage(\n+                \"Whoops, it appears that your nightly version is up-to-date. \" +\n+                \"There might be some problems with the upcomming nightly release \" +\n+                \"or you traveled too far into the future. Sorry for that \ud83d\ude05! \"\n+            );\n+            return false;\n+        }\n+        return true;\n+    });\n+}\n+\n+async function askToDownloadProperExtensionVersion(config: Config, reason = \"\") {\n+    if (!config.askBeforeDownload) return true;\n+\n+    const stableOrNightly = config.updatesChannel === UpdatesChannel.Stable ? \"stable\" : \"latest nightly\";\n+\n+    // In case of reentering this function and showing the same info message\n+    // (e.g. after we had shown this message, the user changed the config)\n+    // vscode will dismiss the already shown one (i.e. return undefined).\n+    // This behaviour is what we want, but likely it is not documented\n+\n+    const userResponse = await vscode.window.showInformationMessage(\n+        reason + `Do you want to download the ${stableOrNightly} rust-analyzer extension ` +\n+        `version and reload the window now?`,\n+        \"Download now\", \"Cancel\"\n+    );\n+    return userResponse === \"Download now\";\n+}\n+\n+/**\n+ * Shutdowns the process in case of success (i.e. reloads the window) or throws an error.\n+ *\n+ * ACHTUNG!: this function has a crazy amount of state transitions, handling errors during\n+ * each of them would result in a ton of code (especially accounting for cross-process\n+ * shared mutable `globalState` access). Enforcing no reentrancy for this is best-effort.\n+ */\n+const tryDownloadNightlyExtension = notReentrant(async (\n+    config: Config,\n+    shouldDownload: (releaseInfo: ArtifactReleaseInfo) => boolean = () => true\n+): Promise<never | void> => {\n+    const vsixSource = config.nightlyVsixSource;\n+    try {\n+        const releaseInfo = await fetchArtifactReleaseInfo(vsixSource.repo, vsixSource.file, vsixSource.tag);\n+\n+        if (!shouldDownload(releaseInfo)) return;\n+\n+        await downloadArtifactWithProgressUi(releaseInfo, vsixSource.file, vsixSource.dir, \"nightly extension\");\n+\n+        const vsixPath = path.join(vsixSource.dir, vsixSource.file);\n+\n+        await vscodeInstallExtensionFromVsix(vsixPath);\n+        await config.installedNightlyExtensionReleaseDate.set(releaseInfo.releaseDate);\n+        await fs.unlink(vsixPath);\n+\n+        await vscodeReloadWindow(); // never returns\n+    } catch (err) {\n+        log.downloadError(err, \"nightly extension\", vsixSource.repo.name);\n+    }\n+});\n+\n+function diffInHours(a: Date, b: Date): number {\n+    // Discard the time and time-zone information (to abstract from daylight saving time bugs)\n+    // https://stackoverflow.com/a/15289883/9259330\n+\n+    const utcA = Date.UTC(a.getFullYear(), a.getMonth(), a.getDate());\n+    const utcB = Date.UTC(b.getFullYear(), b.getMonth(), b.getDate());\n+\n+    return (utcA - utcB) / (1000 * 60 * 60);\n+}"}, {"sha": "1ad3b8338ba9b8077650e6c6b93bf62c5976677c", "filename": "editors/code/src/installation/fetch_artifact_release_info.ts", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/200c275c2e9955371e61f6ad7684084655df46fc/editors%2Fcode%2Fsrc%2Finstallation%2Ffetch_artifact_release_info.ts", "raw_url": "https://github.com/rust-lang/rust/raw/200c275c2e9955371e61f6ad7684084655df46fc/editors%2Fcode%2Fsrc%2Finstallation%2Ffetch_artifact_release_info.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Finstallation%2Ffetch_artifact_release_info.ts?ref=200c275c2e9955371e61f6ad7684084655df46fc", "patch": "@@ -59,12 +59,15 @@ export async function fetchArtifactReleaseInfo(\n \n     return {\n         releaseName: release.name,\n+        releaseDate: new Date(release.published_at),\n         downloadUrl: artifact.browser_download_url\n     };\n \n     // We omit declaration of tremendous amount of fields that we are not using here\n     interface GithubRelease {\n         name: string;\n+        // eslint-disable-next-line camelcase\n+        published_at: string;\n         assets: Array<{\n             name: string;\n             // eslint-disable-next-line camelcase"}, {"sha": "1a8ea0884cb6aef08ff95defa6379fff29f3f00c", "filename": "editors/code/src/installation/interfaces.ts", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/200c275c2e9955371e61f6ad7684084655df46fc/editors%2Fcode%2Fsrc%2Finstallation%2Finterfaces.ts", "raw_url": "https://github.com/rust-lang/rust/raw/200c275c2e9955371e61f6ad7684084655df46fc/editors%2Fcode%2Fsrc%2Finstallation%2Finterfaces.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Finstallation%2Finterfaces.ts?ref=200c275c2e9955371e61f6ad7684084655df46fc", "patch": "@@ -1,5 +1,3 @@\n-import * as vscode from \"vscode\";\n-\n export interface GithubRepo {\n     name: string;\n     owner: string;\n@@ -9,6 +7,7 @@ export interface GithubRepo {\n  * Metadata about particular artifact retrieved from GitHub releases.\n  */\n export interface ArtifactReleaseInfo {\n+    releaseDate: Date;\n     releaseName: string;\n     downloadUrl: string;\n }\n@@ -42,6 +41,9 @@ export namespace ArtifactSource {\n          */\n         repo: GithubRepo;\n \n+\n+        // FIXME: add installationPath: string;\n+\n         /**\n          * Directory on the filesystem where the bundled binary is stored.\n          */\n@@ -57,17 +59,5 @@ export namespace ArtifactSource {\n          * Tag of github release that denotes a version required by this extension.\n          */\n         tag: string;\n-\n-        /**\n-         * Object that provides `get()/update()` operations to store metadata\n-         * about the actual binary, e.g. its actual version.\n-         */\n-        storage: vscode.Memento;\n-\n-        /**\n-         * Ask for the user permission before downloading the artifact.\n-         */\n-        askBeforeDownload: boolean;\n     }\n-\n }"}, {"sha": "05730a77885d09e62140cfe571e1047201db8cf1", "filename": "editors/code/src/installation/server.ts", "status": "modified", "additions": 53, "deletions": 51, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/200c275c2e9955371e61f6ad7684084655df46fc/editors%2Fcode%2Fsrc%2Finstallation%2Fserver.ts", "raw_url": "https://github.com/rust-lang/rust/raw/200c275c2e9955371e61f6ad7684084655df46fc/editors%2Fcode%2Fsrc%2Finstallation%2Fserver.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Finstallation%2Fserver.ts?ref=200c275c2e9955371e61f6ad7684084655df46fc", "patch": "@@ -1,14 +1,16 @@\n import * as vscode from \"vscode\";\n import * as path from \"path\";\n-import { promises as dns } from \"dns\";\n import { spawnSync } from \"child_process\";\n \n import { ArtifactSource } from \"./interfaces\";\n import { fetchArtifactReleaseInfo } from \"./fetch_artifact_release_info\";\n-import { downloadArtifact } from \"./download_artifact\";\n-import { log, assert } from \"../util\";\n+import { downloadArtifactWithProgressUi } from \"./downloads\";\n+import { log, assert, notReentrant } from \"../util\";\n+import { Config, NIGHTLY_TAG } from \"../config\";\n+\n+export async function ensureServerBinary(config: Config): Promise<null | string> {\n+    const source = config.serverSource;\n \n-export async function ensureServerBinary(source: null | ArtifactSource): Promise<null | string> {\n     if (!source) {\n         vscode.window.showErrorMessage(\n             \"Unfortunately we don't ship binaries for your platform yet. \" +\n@@ -35,18 +37,11 @@ export async function ensureServerBinary(source: null | ArtifactSource): Promise\n             return null;\n         }\n         case ArtifactSource.Type.GithubRelease: {\n-            const prebuiltBinaryPath = path.join(source.dir, source.file);\n-\n-            const installedVersion: null | string = getServerVersion(source.storage);\n-            const requiredVersion: string = source.tag;\n-\n-            log.debug(\"Installed version:\", installedVersion, \"required:\", requiredVersion);\n-\n-            if (isBinaryAvailable(prebuiltBinaryPath) && installedVersion === requiredVersion) {\n-                return prebuiltBinaryPath;\n+            if (!shouldDownloadServer(source, config)) {\n+                return path.join(source.dir, source.file);\n             }\n \n-            if (source.askBeforeDownload) {\n+            if (config.askBeforeDownload) {\n                 const userResponse = await vscode.window.showInformationMessage(\n                     `Language server version ${source.tag} for rust-analyzer is not installed. ` +\n                     \"Do you want to download it now?\",\n@@ -55,38 +50,56 @@ export async function ensureServerBinary(source: null | ArtifactSource): Promise\n                 if (userResponse !== \"Download now\") return null;\n             }\n \n-            if (!await downloadServer(source)) return null;\n-\n-            return prebuiltBinaryPath;\n+            return await downloadServer(source, config);\n         }\n     }\n }\n \n-async function downloadServer(source: ArtifactSource.GithubRelease): Promise<boolean> {\n+function shouldDownloadServer(\n+    source: ArtifactSource.GithubRelease,\n+    config: Config\n+): boolean {\n+    if (!isBinaryAvailable(path.join(source.dir, source.file))) return true;\n+\n+    const installed = {\n+        tag: config.serverReleaseTag.get(),\n+        date: config.serverReleaseDate.get()\n+    };\n+    const required = {\n+        tag: source.tag,\n+        date: config.installedNightlyExtensionReleaseDate.get()\n+    };\n+\n+    log.debug(\"Installed server:\", installed, \"required:\", required);\n+\n+    if (required.tag !== NIGHTLY_TAG || installed.tag !== NIGHTLY_TAG) {\n+        return required.tag !== installed.tag;\n+    }\n+\n+    assert(required.date !== null, \"Extension release date should have been saved during its installation\");\n+    assert(installed.date !== null, \"Server release date should have been saved during its installation\");\n+\n+    return installed.date.getTime() !== required.date.getTime();\n+}\n+\n+/**\n+ * Enforcing no reentrancy for this is best-effort.\n+ */\n+const downloadServer = notReentrant(async (\n+    source: ArtifactSource.GithubRelease,\n+    config: Config,\n+): Promise<null | string> => {\n     try {\n         const releaseInfo = await fetchArtifactReleaseInfo(source.repo, source.file, source.tag);\n \n-        await downloadArtifact(releaseInfo, source.file, source.dir, \"language server\");\n-        await setServerVersion(source.storage, releaseInfo.releaseName);\n+        await downloadArtifactWithProgressUi(releaseInfo, source.file, source.dir, \"language server\");\n+        await Promise.all([\n+            config.serverReleaseTag.set(releaseInfo.releaseName),\n+            config.serverReleaseDate.set(releaseInfo.releaseDate)\n+        ]);\n     } catch (err) {\n-        vscode.window.showErrorMessage(\n-            `Failed to download language server from ${source.repo.name} ` +\n-            `GitHub repository: ${err.message}`\n-        );\n-\n-        log.error(err);\n-\n-        dns.resolve('example.com').then(\n-            addrs => log.debug(\"DNS resolution for example.com was successful\", addrs),\n-            err => {\n-                log.error(\n-                    \"DNS resolution for example.com failed, \" +\n-                    \"there might be an issue with Internet availability\"\n-                );\n-                log.error(err);\n-            }\n-        );\n-        return false;\n+        log.downloadError(err, \"language server\", source.repo.name);\n+        return null;\n     }\n \n     const binaryPath = path.join(source.dir, source.file);\n@@ -101,8 +114,8 @@ async function downloadServer(source: ArtifactSource.GithubRelease): Promise<boo\n         \"Rust analyzer language server was successfully installed \ud83e\udd80\"\n     );\n \n-    return true;\n-}\n+    return binaryPath;\n+});\n \n function isBinaryAvailable(binaryPath: string): boolean {\n     const res = spawnSync(binaryPath, [\"--version\"]);\n@@ -115,14 +128,3 @@ function isBinaryAvailable(binaryPath: string): boolean {\n \n     return res.status === 0;\n }\n-\n-function getServerVersion(storage: vscode.Memento): null | string {\n-    const version = storage.get<null | string>(\"server-version\", null);\n-    log.debug(\"Get server-version:\", version);\n-    return version;\n-}\n-\n-async function setServerVersion(storage: vscode.Memento, version: string): Promise<void> {\n-    log.debug(\"Set server-version:\", version);\n-    await storage.update(\"server-version\", version.toString());\n-}"}, {"sha": "bd4661a3670c047fdc2d75c7cc6ce5e0435ceca2", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/200c275c2e9955371e61f6ad7684084655df46fc/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/200c275c2e9955371e61f6ad7684084655df46fc/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=200c275c2e9955371e61f6ad7684084655df46fc", "patch": "@@ -8,6 +8,7 @@ import { activateHighlighting } from './highlighting';\n import { ensureServerBinary } from './installation/server';\n import { Config } from './config';\n import { log } from './util';\n+import { ensureProperExtensionVersion } from './installation/extension';\n \n let ctx: Ctx | undefined;\n \n@@ -34,7 +35,13 @@ export async function activate(context: vscode.ExtensionContext) {\n \n     const config = new Config(context);\n \n-    const serverPath = await ensureServerBinary(config.serverSource);\n+    vscode.workspace.onDidChangeConfiguration(() => ensureProperExtensionVersion(config).catch(log.error));\n+\n+    // Don't await the user response here, otherwise we will block the lsp server bootstrap\n+    void ensureProperExtensionVersion(config).catch(log.error);\n+\n+    const serverPath = await ensureServerBinary(config);\n+\n     if (serverPath == null) {\n         throw new Error(\n             \"Rust Analyzer Language Server is not available. \" +"}, {"sha": "2bfc145e6fe574dda566c93eef93244e537e4d97", "filename": "editors/code/src/util.ts", "status": "modified", "additions": 63, "deletions": 6, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/200c275c2e9955371e61f6ad7684084655df46fc/editors%2Fcode%2Fsrc%2Futil.ts", "raw_url": "https://github.com/rust-lang/rust/raw/200c275c2e9955371e61f6ad7684084655df46fc/editors%2Fcode%2Fsrc%2Futil.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Futil.ts?ref=200c275c2e9955371e61f6ad7684084655df46fc", "patch": "@@ -1,5 +1,6 @@\n import * as lc from \"vscode-languageclient\";\n import * as vscode from \"vscode\";\n+import { promises as dns } from \"dns\";\n import { strict as nativeAssert } from \"assert\";\n \n export function assert(condition: boolean, explanation: string): asserts condition {\n@@ -11,21 +12,40 @@ export function assert(condition: boolean, explanation: string): asserts conditi\n     }\n }\n \n-export const log = {\n-    enabled: true,\n+export const log = new class {\n+    private enabled = true;\n+\n+    setEnabled(yes: boolean): void {\n+        log.enabled = yes;\n+    }\n+\n     debug(message?: any, ...optionalParams: any[]): void {\n         if (!log.enabled) return;\n         // eslint-disable-next-line no-console\n         console.log(message, ...optionalParams);\n-    },\n+    }\n+\n     error(message?: any, ...optionalParams: any[]): void {\n         if (!log.enabled) return;\n         debugger;\n         // eslint-disable-next-line no-console\n         console.error(message, ...optionalParams);\n-    },\n-    setEnabled(yes: boolean): void {\n-        log.enabled = yes;\n+    }\n+\n+    downloadError(err: Error, artifactName: string, repoName: string) {\n+        vscode.window.showErrorMessage(\n+            `Failed to download the rust-analyzer ${artifactName} from ${repoName} ` +\n+            `GitHub repository: ${err.message}`\n+        );\n+        log.error(err);\n+        dns.resolve('example.com').then(\n+            addrs => log.debug(\"DNS resolution for example.com was successful\", addrs),\n+            err => log.error(\n+                \"DNS resolution for example.com failed, \" +\n+                \"there might be an issue with Internet availability\",\n+                err\n+            )\n+        );\n     }\n };\n \n@@ -66,6 +86,17 @@ function sleep(ms: number) {\n     return new Promise(resolve => setTimeout(resolve, ms));\n }\n \n+export function notReentrant<TThis, TParams extends any[], TRet>(\n+    fn: (this: TThis, ...params: TParams) => Promise<TRet>\n+): typeof fn {\n+    let entered = false;\n+    return function(...params) {\n+        assert(!entered, `Reentrancy invariant for ${fn.name} is violated`);\n+        entered = true;\n+        return fn.apply(this, params).finally(() => entered = false);\n+    };\n+}\n+\n export type RustDocument = vscode.TextDocument & { languageId: \"rust\" };\n export type RustEditor = vscode.TextEditor & { document: RustDocument; id: string };\n \n@@ -79,3 +110,29 @@ export function isRustDocument(document: vscode.TextDocument): document is RustD\n export function isRustEditor(editor: vscode.TextEditor): editor is RustEditor {\n     return isRustDocument(editor.document);\n }\n+\n+/**\n+ * @param extensionId The canonical extension identifier in the form of: `publisher.name`\n+ */\n+export async function vscodeReinstallExtension(extensionId: string) {\n+    // Unfortunately there is no straightforward way as of now, these commands\n+    // were found in vscode source code.\n+\n+    log.debug(\"Uninstalling extension\", extensionId);\n+    await vscode.commands.executeCommand(\"workbench.extensions.uninstallExtension\", extensionId);\n+    log.debug(\"Installing extension\", extensionId);\n+    await vscode.commands.executeCommand(\"workbench.extensions.installExtension\", extensionId);\n+}\n+\n+export async function vscodeReloadWindow(): Promise<never> {\n+    await vscode.commands.executeCommand(\"workbench.action.reloadWindow\");\n+\n+    assert(false, \"unreachable\");\n+}\n+\n+export async function vscodeInstallExtensionFromVsix(vsixPath: string) {\n+    await vscode.commands.executeCommand(\n+        \"workbench.extensions.installExtension\",\n+        vscode.Uri.file(vsixPath)\n+    );\n+}"}]}