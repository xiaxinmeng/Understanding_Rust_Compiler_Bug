{"sha": "513eb744c0c2ead6b10a3a3e5f0267e4136a9b4f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxM2ViNzQ0YzBjMmVhZDZiMTBhM2EzZTVmMDI2N2U0MTM2YTliNGY=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-01-30T07:53:34Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-02-11T22:15:27Z"}, "message": "Merge rustc::middle::*lang_items.", "tree": {"sha": "ce8816c509bd51b846f4e0832f47861b240dc915", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce8816c509bd51b846f4e0832f47861b240dc915"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/513eb744c0c2ead6b10a3a3e5f0267e4136a9b4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/513eb744c0c2ead6b10a3a3e5f0267e4136a9b4f", "html_url": "https://github.com/rust-lang/rust/commit/513eb744c0c2ead6b10a3a3e5f0267e4136a9b4f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/513eb744c0c2ead6b10a3a3e5f0267e4136a9b4f/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3b2385d40bfed00533b016e4685974b739c2da1", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3b2385d40bfed00533b016e4685974b739c2da1", "html_url": "https://github.com/rust-lang/rust/commit/d3b2385d40bfed00533b016e4685974b739c2da1"}], "stats": {"total": 72, "additions": 30, "deletions": 42}, "files": [{"sha": "9fbb151ccdf5e16bd5e26a0b91f8d72c14b5cb50", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/513eb744c0c2ead6b10a3a3e5f0267e4136a9b4f/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/513eb744c0c2ead6b10a3a3e5f0267e4136a9b4f/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=513eb744c0c2ead6b10a3a3e5f0267e4136a9b4f", "patch": "@@ -13,7 +13,9 @@ use crate::ty::{self, TyCtxt};\n \n use rustc_hir::def_id::DefId;\n use rustc_span::Span;\n+use rustc_target::spec::PanicStrategy;\n \n+pub use rustc_hir::weak_lang_items::link_name;\n pub use rustc_hir::{LangItem, LanguageItems};\n \n impl<'tcx> TyCtxt<'tcx> {\n@@ -38,4 +40,26 @@ impl<'tcx> TyCtxt<'tcx> {\n             _ => None,\n         }\n     }\n+\n+    pub fn is_weak_lang_item(&self, item_def_id: DefId) -> bool {\n+        self.lang_items().is_weak_lang_item(item_def_id)\n+    }\n+}\n+\n+/// Returns `true` if the specified `lang_item` doesn't actually need to be\n+/// present for this compilation.\n+///\n+/// Not all lang items are always required for each compilation, particularly in\n+/// the case of panic=abort. In these situations some lang items are injected by\n+/// crates and don't actually need to be defined in libstd.\n+pub fn whitelisted(tcx: TyCtxt<'_>, lang_item: LangItem) -> bool {\n+    // If we're not compiling with unwinding, we won't actually need these\n+    // symbols. Other panic runtimes ensure that the relevant symbols are\n+    // available to link things together, but they're never exercised.\n+    if tcx.sess.panic_strategy() != PanicStrategy::Unwind {\n+        return lang_item == LangItem::EhPersonalityLangItem\n+            || lang_item == LangItem::EhUnwindResumeLangItem;\n+    }\n+\n+    false\n }"}, {"sha": "b20f2cf3a85c133f53bec53c9ea3b041aa21ff43", "filename": "src/librustc/middle/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/513eb744c0c2ead6b10a3a3e5f0267e4136a9b4f/src%2Flibrustc%2Fmiddle%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/513eb744c0c2ead6b10a3a3e5f0267e4136a9b4f/src%2Flibrustc%2Fmiddle%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmod.rs?ref=513eb744c0c2ead6b10a3a3e5f0267e4136a9b4f", "patch": "@@ -33,4 +33,3 @@ pub mod recursion_limit;\n pub mod region;\n pub mod resolve_lifetime;\n pub mod stability;\n-pub mod weak_lang_items;"}, {"sha": "c04a6f32215c48b2eca00cbe1fe2d1b6d609619d", "filename": "src/librustc/middle/weak_lang_items.rs", "status": "removed", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/d3b2385d40bfed00533b016e4685974b739c2da1/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3b2385d40bfed00533b016e4685974b739c2da1/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs?ref=d3b2385d40bfed00533b016e4685974b739c2da1", "patch": "@@ -1,32 +0,0 @@\n-//! Validity checking for weak lang items\n-\n-use crate::ty::TyCtxt;\n-use rustc_hir::def_id::DefId;\n-use rustc_hir::{lang_items, LangItem};\n-use rustc_target::spec::PanicStrategy;\n-\n-pub use rustc_hir::weak_lang_items::link_name;\n-\n-impl<'tcx> TyCtxt<'tcx> {\n-    pub fn is_weak_lang_item(&self, item_def_id: DefId) -> bool {\n-        self.lang_items().is_weak_lang_item(item_def_id)\n-    }\n-}\n-\n-/// Returns `true` if the specified `lang_item` doesn't actually need to be\n-/// present for this compilation.\n-///\n-/// Not all lang items are always required for each compilation, particularly in\n-/// the case of panic=abort. In these situations some lang items are injected by\n-/// crates and don't actually need to be defined in libstd.\n-pub fn whitelisted(tcx: TyCtxt<'_>, lang_item: LangItem) -> bool {\n-    // If we're not compiling with unwinding, we won't actually need these\n-    // symbols. Other panic runtimes ensure that the relevant symbols are\n-    // available to link things together, but they're never exercised.\n-    if tcx.sess.panic_strategy() != PanicStrategy::Unwind {\n-        return lang_item == lang_items::EhPersonalityLangItem\n-            || lang_item == lang_items::EhUnwindResumeLangItem;\n-    }\n-\n-    false\n-}"}, {"sha": "e9431d94863ef96a4eb87ff4ec1520cfccfa77cd", "filename": "src/librustc_codegen_ssa/base.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/513eb744c0c2ead6b10a3a3e5f0267e4136a9b4f/src%2Flibrustc_codegen_ssa%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/513eb744c0c2ead6b10a3a3e5f0267e4136a9b4f/src%2Flibrustc_codegen_ssa%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fbase.rs?ref=513eb744c0c2ead6b10a3a3e5f0267e4136a9b4f", "patch": "@@ -28,8 +28,8 @@ use crate::{CachedModuleCodegen, CrateInfo, MemFlags, ModuleCodegen, ModuleKind}\n use rustc::middle::codegen_fn_attrs::CodegenFnAttrs;\n use rustc::middle::cstore::EncodedMetadata;\n use rustc::middle::cstore::{self, LinkagePreference};\n+use rustc::middle::lang_items;\n use rustc::middle::lang_items::StartFnLangItem;\n-use rustc::middle::weak_lang_items;\n use rustc::mir::mono::{CodegenUnit, CodegenUnitNameBuilder, MonoItem};\n use rustc::session::config::{self, EntryFnType, Lto};\n use rustc::session::Session;\n@@ -847,11 +847,8 @@ impl CrateInfo {\n \n             // No need to look for lang items that are whitelisted and don't\n             // actually need to exist.\n-            let missing = missing\n-                .iter()\n-                .cloned()\n-                .filter(|&l| !weak_lang_items::whitelisted(tcx, l))\n-                .collect();\n+            let missing =\n+                missing.iter().cloned().filter(|&l| !lang_items::whitelisted(tcx, l)).collect();\n             info.missing_lang_items.insert(cnum, missing);\n         }\n "}, {"sha": "010712c28ba753f1111bf2e4c2e472769b2450b4", "filename": "src/librustc_passes/weak_lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/513eb744c0c2ead6b10a3a3e5f0267e4136a9b4f/src%2Flibrustc_passes%2Fweak_lang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/513eb744c0c2ead6b10a3a3e5f0267e4136a9b4f/src%2Flibrustc_passes%2Fweak_lang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fweak_lang_items.rs?ref=513eb744c0c2ead6b10a3a3e5f0267e4136a9b4f", "patch": "@@ -1,7 +1,7 @@\n //! Validity checking for weak lang items\n \n use rustc::middle::lang_items;\n-use rustc::middle::weak_lang_items::whitelisted;\n+use rustc::middle::lang_items::whitelisted;\n use rustc::session::config;\n \n use rustc::hir::map::Map;"}, {"sha": "ea0e4719a24fd34b004dbc913039d82c2f257b43", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/513eb744c0c2ead6b10a3a3e5f0267e4136a9b4f/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/513eb744c0c2ead6b10a3a3e5f0267e4136a9b4f/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=513eb744c0c2ead6b10a3a3e5f0267e4136a9b4f", "patch": "@@ -20,8 +20,8 @@ use crate::astconv::{AstConv, Bounds, SizedByDefault};\n use crate::check::intrinsic::intrinsic_operation_unsafety;\n use crate::constrained_generic_params as cgp;\n use crate::lint;\n+use crate::middle::lang_items;\n use crate::middle::resolve_lifetime as rl;\n-use crate::middle::weak_lang_items;\n use rustc::hir::map::blocks::FnLikeNode;\n use rustc::hir::map::Map;\n use rustc::middle::codegen_fn_attrs::{CodegenFnAttrFlags, CodegenFnAttrs};\n@@ -2977,7 +2977,7 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n     if tcx.is_weak_lang_item(id) {\n         codegen_fn_attrs.flags |= CodegenFnAttrFlags::RUSTC_STD_INTERNAL_SYMBOL;\n     }\n-    if let Some(name) = weak_lang_items::link_name(&attrs) {\n+    if let Some(name) = lang_items::link_name(&attrs) {\n         codegen_fn_attrs.export_name = Some(name);\n         codegen_fn_attrs.link_name = Some(name);\n     }"}]}