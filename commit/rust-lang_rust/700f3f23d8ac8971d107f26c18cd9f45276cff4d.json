{"sha": "700f3f23d8ac8971d107f26c18cd9f45276cff4d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwMGYzZjIzZDhhYzg5NzFkMTA3ZjI2YzE4Y2Q5ZjQ1Mjc2Y2ZmNGQ=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2021-01-10T07:55:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-10T07:55:59Z"}, "message": "Rollup merge of #80801 - estebank:correct-binding-sugg-span, r=petrochenkov\n\nUse correct span for structured suggestion\n\nOn structured suggestion for `let` -> `const`  and `const` -> `let`, use\na proper `Span` and update tests to check the correct application.\n\nFollow up to #80012.", "tree": {"sha": "7a498005c87d84bd1da84e65a715a86552974ee6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a498005c87d84bd1da84e65a715a86552974ee6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/700f3f23d8ac8971d107f26c18cd9f45276cff4d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf+rMPCRBK7hj4Ov3rIwAAdHIIAKeH/VCXuW5Tvk/3EoaoQNLE\nXAyDde5RmXLXGey+zZttW1YMq87YjviCJdASmd6q5vF2UtbLzzhyucafveVuSpS9\nGOtI4UqcgcL28nQ9QApgxQv+Gu4oiRcy1QvoeNRnn1P7ihCu1ijUiwk5eZ4xH1US\ninesgkL5wCzaMNAPyaTjA6dBI8GEzf0y23GKxtBBkHVer72nz7DKu4FzVIu85otz\nkl9T2HQaGj/+/6Vp90i+osKaQ9nGOA/8zbVVzhA6RKaZlXrtgwvfFHnx6iNPZQPW\nReOSCXyMq924UExK9GK6JLIf2ZJ0rQ5t2dLAdVdLFgFcx17X3/AxuwQETCBchDw=\n=o3Yd\n-----END PGP SIGNATURE-----\n", "payload": "tree 7a498005c87d84bd1da84e65a715a86552974ee6\nparent d64356f06cff6b21c6e13054131d96ec1c6dc077\nparent 9a5dcaab673b5b5a2842b689daeb0b2968fec476\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1610265359 +0900\ncommitter GitHub <noreply@github.com> 1610265359 +0900\n\nRollup merge of #80801 - estebank:correct-binding-sugg-span, r=petrochenkov\n\nUse correct span for structured suggestion\n\nOn structured suggestion for `let` -> `const`  and `const` -> `let`, use\na proper `Span` and update tests to check the correct application.\n\nFollow up to #80012.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/700f3f23d8ac8971d107f26c18cd9f45276cff4d", "html_url": "https://github.com/rust-lang/rust/commit/700f3f23d8ac8971d107f26c18cd9f45276cff4d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/700f3f23d8ac8971d107f26c18cd9f45276cff4d/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d64356f06cff6b21c6e13054131d96ec1c6dc077", "url": "https://api.github.com/repos/rust-lang/rust/commits/d64356f06cff6b21c6e13054131d96ec1c6dc077", "html_url": "https://github.com/rust-lang/rust/commit/d64356f06cff6b21c6e13054131d96ec1c6dc077"}, {"sha": "9a5dcaab673b5b5a2842b689daeb0b2968fec476", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a5dcaab673b5b5a2842b689daeb0b2968fec476", "html_url": "https://github.com/rust-lang/rust/commit/9a5dcaab673b5b5a2842b689daeb0b2968fec476"}], "stats": {"total": 210, "additions": 146, "deletions": 64}, "files": [{"sha": "03b66a3f7b30690471c15828aa1ebd79e39333bf", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/700f3f23d8ac8971d107f26c18cd9f45276cff4d/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/700f3f23d8ac8971d107f26c18cd9f45276cff4d/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=700f3f23d8ac8971d107f26c18cd9f45276cff4d", "patch": "@@ -398,20 +398,30 @@ impl<'a> Resolver<'a> {\n                 err.help(\"use the `|| { ... }` closure form instead\");\n                 err\n             }\n-            ResolutionError::AttemptToUseNonConstantValueInConstant(ident, sugg) => {\n+            ResolutionError::AttemptToUseNonConstantValueInConstant(ident, sugg, current) => {\n                 let mut err = struct_span_err!(\n                     self.session,\n                     span,\n                     E0435,\n                     \"attempt to use a non-constant value in a constant\"\n                 );\n-                err.span_suggestion(\n-                    ident.span,\n-                    &sugg,\n-                    \"\".to_string(),\n-                    Applicability::MaybeIncorrect,\n-                );\n-                err.span_label(span, \"non-constant value\");\n+                // let foo =...\n+                //     ^^^ given this Span\n+                // ------- get this Span to have an applicable suggestion\n+                let sp =\n+                    self.session.source_map().span_extend_to_prev_str(ident.span, current, true);\n+                if sp.lo().0 == 0 {\n+                    err.span_label(ident.span, &format!(\"this would need to be a `{}`\", sugg));\n+                } else {\n+                    let sp = sp.with_lo(BytePos(sp.lo().0 - current.len() as u32));\n+                    err.span_suggestion(\n+                        sp,\n+                        &format!(\"consider using `{}` instead of `{}`\", sugg, current),\n+                        format!(\"{} {}\", sugg, ident),\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                    err.span_label(span, \"non-constant value\");\n+                }\n                 err\n             }\n             ResolutionError::BindingShadowsSomethingUnacceptable(what_binding, name, binding) => {"}, {"sha": "2c68e0418589b6839dbbe513f83bd9f81a3018c9", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/700f3f23d8ac8971d107f26c18cd9f45276cff4d/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/700f3f23d8ac8971d107f26c18cd9f45276cff4d/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=700f3f23d8ac8971d107f26c18cd9f45276cff4d", "patch": "@@ -210,7 +210,11 @@ enum ResolutionError<'a> {\n     /// Error E0434: can't capture dynamic environment in a fn item.\n     CannotCaptureDynamicEnvironmentInFnItem,\n     /// Error E0435: attempt to use a non-constant value in a constant.\n-    AttemptToUseNonConstantValueInConstant(Ident, String),\n+    AttemptToUseNonConstantValueInConstant(\n+        Ident,\n+        /* suggestion */ &'static str,\n+        /* current */ &'static str,\n+    ),\n     /// Error E0530: `X` bindings cannot shadow `Y`s.\n     BindingShadowsSomethingUnacceptable(&'static str, Symbol, &'a NameBinding<'a>),\n     /// Error E0128: type parameters with a default cannot use forward-declared identifiers.\n@@ -2614,18 +2618,19 @@ impl<'a> Resolver<'a> {\n                                             ConstantItemKind::Const => \"const\",\n                                             ConstantItemKind::Static => \"static\",\n                                         };\n-                                        let sugg = format!(\n-                                            \"consider using `let` instead of `{}`\",\n-                                            kind_str\n-                                        );\n-                                        (span, AttemptToUseNonConstantValueInConstant(ident, sugg))\n+                                        (\n+                                            span,\n+                                            AttemptToUseNonConstantValueInConstant(\n+                                                ident, \"let\", kind_str,\n+                                            ),\n+                                        )\n                                     } else {\n-                                        let sugg = \"consider using `const` instead of `let`\";\n                                         (\n                                             rib_ident.span,\n                                             AttemptToUseNonConstantValueInConstant(\n                                                 original_rib_ident_def,\n-                                                sugg.to_string(),\n+                                                \"const\",\n+                                                \"let\",\n                                             ),\n                                         )\n                                     };"}, {"sha": "6635d44496c0302177eed3dae96412c12164353f", "filename": "compiler/rustc_span/src/source_map.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/700f3f23d8ac8971d107f26c18cd9f45276cff4d/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/700f3f23d8ac8971d107f26c18cd9f45276cff4d/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs?ref=700f3f23d8ac8971d107f26c18cd9f45276cff4d", "patch": "@@ -671,7 +671,9 @@ impl SourceMap {\n             let pat = pat.to_owned() + ws;\n             if let Ok(prev_source) = self.span_to_prev_source(sp) {\n                 let prev_source = prev_source.rsplit(&pat).next().unwrap_or(\"\").trim_start();\n-                if !prev_source.is_empty() && (!prev_source.contains('\\n') || accept_newlines) {\n+                if prev_source.is_empty() && sp.lo().0 != 0 {\n+                    return sp.with_lo(BytePos(sp.lo().0 - 1));\n+                } else if !prev_source.contains('\\n') || accept_newlines {\n                     return sp.with_lo(BytePos(sp.lo().0 - prev_source.len() as u32));\n                 }\n             }"}, {"sha": "fdf896d2dbbbd3f0a3aaedf4fbce94d097cb7084", "filename": "src/test/ui/error-codes/E0435.fixed", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/700f3f23d8ac8971d107f26c18cd9f45276cff4d/src%2Ftest%2Fui%2Ferror-codes%2FE0435.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/700f3f23d8ac8971d107f26c18cd9f45276cff4d/src%2Ftest%2Fui%2Ferror-codes%2FE0435.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0435.fixed?ref=700f3f23d8ac8971d107f26c18cd9f45276cff4d", "patch": "@@ -0,0 +1,6 @@\n+// run-rustfix\n+fn main () {\n+    #[allow(non_upper_case_globals)]\n+    const foo: usize = 42;\n+    let _: [u8; foo]; //~ ERROR E0435\n+}"}, {"sha": "d9354efb8fdc4594e4b57509f024178bbbe6ead1", "filename": "src/test/ui/error-codes/E0435.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/700f3f23d8ac8971d107f26c18cd9f45276cff4d/src%2Ftest%2Fui%2Ferror-codes%2FE0435.rs", "raw_url": "https://github.com/rust-lang/rust/raw/700f3f23d8ac8971d107f26c18cd9f45276cff4d/src%2Ftest%2Fui%2Ferror-codes%2FE0435.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0435.rs?ref=700f3f23d8ac8971d107f26c18cd9f45276cff4d", "patch": "@@ -1,4 +1,6 @@\n+// run-rustfix\n fn main () {\n-    let foo = 42u32;\n+    #[allow(non_upper_case_globals)]\n+    let foo: usize = 42;\n     let _: [u8; foo]; //~ ERROR E0435\n }"}, {"sha": "fc08fade91cee5c9f0ce7a5ce08ad9e0721531f4", "filename": "src/test/ui/error-codes/E0435.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/700f3f23d8ac8971d107f26c18cd9f45276cff4d/src%2Ftest%2Fui%2Ferror-codes%2FE0435.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/700f3f23d8ac8971d107f26c18cd9f45276cff4d/src%2Ftest%2Fui%2Ferror-codes%2FE0435.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0435.stderr?ref=700f3f23d8ac8971d107f26c18cd9f45276cff4d", "patch": "@@ -1,8 +1,8 @@\n error[E0435]: attempt to use a non-constant value in a constant\n-  --> $DIR/E0435.rs:3:17\n+  --> $DIR/E0435.rs:5:17\n    |\n-LL |     let foo = 42u32;\n-   |         --- help: consider using `const` instead of `let`\n+LL |     let foo: usize = 42;\n+   |     ------- help: consider using `const` instead of `let`: `const foo`\n LL |     let _: [u8; foo];\n    |                 ^^^ non-constant value\n "}, {"sha": "4da49f4dc7db167fbee93f1f5fa6f7faa6f30709", "filename": "src/test/ui/impl-trait/bindings.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/700f3f23d8ac8971d107f26c18cd9f45276cff4d/src%2Ftest%2Fui%2Fimpl-trait%2Fbindings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/700f3f23d8ac8971d107f26c18cd9f45276cff4d/src%2Ftest%2Fui%2Fimpl-trait%2Fbindings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbindings.stderr?ref=700f3f23d8ac8971d107f26c18cd9f45276cff4d", "patch": "@@ -2,33 +2,33 @@ error[E0435]: attempt to use a non-constant value in a constant\n   --> $DIR/bindings.rs:5:29\n    |\n LL |     const foo: impl Clone = x;\n-   |           ---               ^ non-constant value\n-   |           |\n-   |           help: consider using `let` instead of `const`\n+   |     ---------               ^ non-constant value\n+   |     |\n+   |     help: consider using `let` instead of `const`: `let foo`\n \n error[E0435]: attempt to use a non-constant value in a constant\n   --> $DIR/bindings.rs:11:33\n    |\n LL |         const foo: impl Clone = x;\n-   |               ---               ^ non-constant value\n-   |               |\n-   |               help: consider using `let` instead of `const`\n+   |         ---------               ^ non-constant value\n+   |         |\n+   |         help: consider using `let` instead of `const`: `let foo`\n \n error[E0435]: attempt to use a non-constant value in a constant\n   --> $DIR/bindings.rs:18:33\n    |\n LL |         const foo: impl Clone = x;\n-   |               ---               ^ non-constant value\n-   |               |\n-   |               help: consider using `let` instead of `const`\n+   |         ---------               ^ non-constant value\n+   |         |\n+   |         help: consider using `let` instead of `const`: `let foo`\n \n error[E0435]: attempt to use a non-constant value in a constant\n   --> $DIR/bindings.rs:25:33\n    |\n LL |         const foo: impl Clone = x;\n-   |               ---               ^ non-constant value\n-   |               |\n-   |               help: consider using `let` instead of `const`\n+   |         ---------               ^ non-constant value\n+   |         |\n+   |         help: consider using `let` instead of `const`: `let foo`\n \n warning: the feature `impl_trait_in_bindings` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/bindings.rs:1:12"}, {"sha": "ce31f6bea4bdd7ea331b80ec591e448f52c61abe", "filename": "src/test/ui/issues/issue-27433.fixed", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/700f3f23d8ac8971d107f26c18cd9f45276cff4d/src%2Ftest%2Fui%2Fissues%2Fissue-27433.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/700f3f23d8ac8971d107f26c18cd9f45276cff4d/src%2Ftest%2Fui%2Fissues%2Fissue-27433.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27433.fixed?ref=700f3f23d8ac8971d107f26c18cd9f45276cff4d", "patch": "@@ -0,0 +1,7 @@\n+// run-rustfix\n+fn main() {\n+    let foo = 42u32;\n+    #[allow(unused_variables, non_snake_case)]\n+    let FOO : u32 = foo;\n+                   //~^ ERROR attempt to use a non-constant value in a constant\n+}"}, {"sha": "01411a51c1372c5d5b4d374ce54450bce6b46f17", "filename": "src/test/ui/issues/issue-27433.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/700f3f23d8ac8971d107f26c18cd9f45276cff4d/src%2Ftest%2Fui%2Fissues%2Fissue-27433.rs", "raw_url": "https://github.com/rust-lang/rust/raw/700f3f23d8ac8971d107f26c18cd9f45276cff4d/src%2Ftest%2Fui%2Fissues%2Fissue-27433.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27433.rs?ref=700f3f23d8ac8971d107f26c18cd9f45276cff4d", "patch": "@@ -1,5 +1,7 @@\n+// run-rustfix\n fn main() {\n     let foo = 42u32;\n+    #[allow(unused_variables, non_snake_case)]\n     const FOO : u32 = foo;\n                    //~^ ERROR attempt to use a non-constant value in a constant\n }"}, {"sha": "da751a64957363be2bf1b69a7b16060008273dfd", "filename": "src/test/ui/issues/issue-27433.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/700f3f23d8ac8971d107f26c18cd9f45276cff4d/src%2Ftest%2Fui%2Fissues%2Fissue-27433.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/700f3f23d8ac8971d107f26c18cd9f45276cff4d/src%2Ftest%2Fui%2Fissues%2Fissue-27433.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27433.stderr?ref=700f3f23d8ac8971d107f26c18cd9f45276cff4d", "patch": "@@ -1,10 +1,10 @@\n error[E0435]: attempt to use a non-constant value in a constant\n-  --> $DIR/issue-27433.rs:3:23\n+  --> $DIR/issue-27433.rs:5:23\n    |\n LL |     const FOO : u32 = foo;\n-   |           ---         ^^^ non-constant value\n-   |           |\n-   |           help: consider using `let` instead of `const`\n+   |     ---------         ^^^ non-constant value\n+   |     |\n+   |     help: consider using `let` instead of `const`: `let FOO`\n \n error: aborting due to previous error\n "}, {"sha": "140c24b9395caa642c665a1033b44d16113478b8", "filename": "src/test/ui/issues/issue-3521-2.fixed", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/700f3f23d8ac8971d107f26c18cd9f45276cff4d/src%2Ftest%2Fui%2Fissues%2Fissue-3521-2.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/700f3f23d8ac8971d107f26c18cd9f45276cff4d/src%2Ftest%2Fui%2Fissues%2Fissue-3521-2.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3521-2.fixed?ref=700f3f23d8ac8971d107f26c18cd9f45276cff4d", "patch": "@@ -0,0 +1,9 @@\n+// run-rustfix\n+fn main() {\n+    let foo = 100;\n+\n+    let y: isize = foo + 1;\n+    //~^ ERROR attempt to use a non-constant value in a constant\n+\n+    println!(\"{}\", y);\n+}"}, {"sha": "f66efec45e549ab2d81279f106793d8f8917db9e", "filename": "src/test/ui/issues/issue-3521-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/700f3f23d8ac8971d107f26c18cd9f45276cff4d/src%2Ftest%2Fui%2Fissues%2Fissue-3521-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/700f3f23d8ac8971d107f26c18cd9f45276cff4d/src%2Ftest%2Fui%2Fissues%2Fissue-3521-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3521-2.rs?ref=700f3f23d8ac8971d107f26c18cd9f45276cff4d", "patch": "@@ -1,3 +1,4 @@\n+// run-rustfix\n fn main() {\n     let foo = 100;\n "}, {"sha": "84c7a9efa35bbf61546b7f75d9c26db61f255646", "filename": "src/test/ui/issues/issue-3521-2.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/700f3f23d8ac8971d107f26c18cd9f45276cff4d/src%2Ftest%2Fui%2Fissues%2Fissue-3521-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/700f3f23d8ac8971d107f26c18cd9f45276cff4d/src%2Ftest%2Fui%2Fissues%2Fissue-3521-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3521-2.stderr?ref=700f3f23d8ac8971d107f26c18cd9f45276cff4d", "patch": "@@ -1,10 +1,10 @@\n error[E0435]: attempt to use a non-constant value in a constant\n-  --> $DIR/issue-3521-2.rs:4:23\n+  --> $DIR/issue-3521-2.rs:5:23\n    |\n LL |     static y: isize = foo + 1;\n-   |            -          ^^^ non-constant value\n-   |            |\n-   |            help: consider using `let` instead of `static`\n+   |     --------          ^^^ non-constant value\n+   |     |\n+   |     help: consider using `let` instead of `static`: `let y`\n \n error: aborting due to previous error\n "}, {"sha": "f76106dfff1871a6b784208db9e5561297fd6956", "filename": "src/test/ui/issues/issue-3521.fixed", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/700f3f23d8ac8971d107f26c18cd9f45276cff4d/src%2Ftest%2Fui%2Fissues%2Fissue-3521.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/700f3f23d8ac8971d107f26c18cd9f45276cff4d/src%2Ftest%2Fui%2Fissues%2Fissue-3521.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3521.fixed?ref=700f3f23d8ac8971d107f26c18cd9f45276cff4d", "patch": "@@ -0,0 +1,13 @@\n+// run-rustfix\n+fn main() {\n+    #[allow(non_upper_case_globals)]\n+    const foo: isize = 100;\n+\n+    #[derive(Debug)]\n+    enum Stuff {\n+        Bar = foo\n+        //~^ ERROR attempt to use a non-constant value in a constant\n+    }\n+\n+    println!(\"{:?}\", Stuff::Bar);\n+}"}, {"sha": "c425a22df91737afb327b28247611b3093c96def", "filename": "src/test/ui/issues/issue-3521.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/700f3f23d8ac8971d107f26c18cd9f45276cff4d/src%2Ftest%2Fui%2Fissues%2Fissue-3521.rs", "raw_url": "https://github.com/rust-lang/rust/raw/700f3f23d8ac8971d107f26c18cd9f45276cff4d/src%2Ftest%2Fui%2Fissues%2Fissue-3521.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3521.rs?ref=700f3f23d8ac8971d107f26c18cd9f45276cff4d", "patch": "@@ -1,5 +1,7 @@\n+// run-rustfix\n fn main() {\n-    let foo = 100;\n+    #[allow(non_upper_case_globals)]\n+    let foo: isize = 100;\n \n     #[derive(Debug)]\n     enum Stuff {"}, {"sha": "aa42772f12d8a4c0f5b528ff5c1bb112294afaa6", "filename": "src/test/ui/issues/issue-3521.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/700f3f23d8ac8971d107f26c18cd9f45276cff4d/src%2Ftest%2Fui%2Fissues%2Fissue-3521.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/700f3f23d8ac8971d107f26c18cd9f45276cff4d/src%2Ftest%2Fui%2Fissues%2Fissue-3521.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3521.stderr?ref=700f3f23d8ac8971d107f26c18cd9f45276cff4d", "patch": "@@ -1,8 +1,8 @@\n error[E0435]: attempt to use a non-constant value in a constant\n-  --> $DIR/issue-3521.rs:6:15\n+  --> $DIR/issue-3521.rs:8:15\n    |\n-LL |     let foo = 100;\n-   |         --- help: consider using `const` instead of `let`\n+LL |     let foo: isize = 100;\n+   |     ------- help: consider using `const` instead of `let`: `const foo`\n ...\n LL |         Bar = foo\n    |               ^^^ non-constant value"}, {"sha": "a95781c6edc82c8e2fb98b97d53e3bda867cb40b", "filename": "src/test/ui/issues/issue-3668-2.fixed", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/700f3f23d8ac8971d107f26c18cd9f45276cff4d/src%2Ftest%2Fui%2Fissues%2Fissue-3668-2.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/700f3f23d8ac8971d107f26c18cd9f45276cff4d/src%2Ftest%2Fui%2Fissues%2Fissue-3668-2.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3668-2.fixed?ref=700f3f23d8ac8971d107f26c18cd9f45276cff4d", "patch": "@@ -0,0 +1,8 @@\n+// run-rustfix\n+#![allow(unused_variables, dead_code)]\n+fn f(x:isize) {\n+    let child: isize = x + 1;\n+    //~^ ERROR attempt to use a non-constant value in a constant\n+}\n+\n+fn main() {}"}, {"sha": "8aa0897ecb4dc791cf9990716c99b8f63035143a", "filename": "src/test/ui/issues/issue-3668-2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/700f3f23d8ac8971d107f26c18cd9f45276cff4d/src%2Ftest%2Fui%2Fissues%2Fissue-3668-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/700f3f23d8ac8971d107f26c18cd9f45276cff4d/src%2Ftest%2Fui%2Fissues%2Fissue-3668-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3668-2.rs?ref=700f3f23d8ac8971d107f26c18cd9f45276cff4d", "patch": "@@ -1,3 +1,5 @@\n+// run-rustfix\n+#![allow(unused_variables, dead_code)]\n fn f(x:isize) {\n     static child: isize = x + 1;\n     //~^ ERROR attempt to use a non-constant value in a constant"}, {"sha": "ba96510415435125df33dc53af8a02329baa4a9d", "filename": "src/test/ui/issues/issue-3668-2.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/700f3f23d8ac8971d107f26c18cd9f45276cff4d/src%2Ftest%2Fui%2Fissues%2Fissue-3668-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/700f3f23d8ac8971d107f26c18cd9f45276cff4d/src%2Ftest%2Fui%2Fissues%2Fissue-3668-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3668-2.stderr?ref=700f3f23d8ac8971d107f26c18cd9f45276cff4d", "patch": "@@ -1,10 +1,10 @@\n error[E0435]: attempt to use a non-constant value in a constant\n-  --> $DIR/issue-3668-2.rs:2:27\n+  --> $DIR/issue-3668-2.rs:4:27\n    |\n LL |     static child: isize = x + 1;\n-   |            -----          ^ non-constant value\n-   |            |\n-   |            help: consider using `let` instead of `static`\n+   |     ------------          ^ non-constant value\n+   |     |\n+   |     help: consider using `let` instead of `static`: `let child`\n \n error: aborting due to previous error\n "}, {"sha": "edc49979c10a08abc75429468f23ef8d754213de", "filename": "src/test/ui/issues/issue-3668.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/700f3f23d8ac8971d107f26c18cd9f45276cff4d/src%2Ftest%2Fui%2Fissues%2Fissue-3668.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/700f3f23d8ac8971d107f26c18cd9f45276cff4d/src%2Ftest%2Fui%2Fissues%2Fissue-3668.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3668.stderr?ref=700f3f23d8ac8971d107f26c18cd9f45276cff4d", "patch": "@@ -2,9 +2,9 @@ error[E0435]: attempt to use a non-constant value in a constant\n   --> $DIR/issue-3668.rs:8:34\n    |\n LL |        static childVal: Box<P> = self.child.get();\n-   |               --------           ^^^^ non-constant value\n-   |               |\n-   |               help: consider using `let` instead of `static`\n+   |        ---------------           ^^^^ non-constant value\n+   |        |\n+   |        help: consider using `let` instead of `static`: `let childVal`\n \n error: aborting due to previous error\n "}, {"sha": "effcbe4d7f3e868121aaf41d2f2f0a262e267727", "filename": "src/test/ui/issues/issue-42060.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/700f3f23d8ac8971d107f26c18cd9f45276cff4d/src%2Ftest%2Fui%2Fissues%2Fissue-42060.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/700f3f23d8ac8971d107f26c18cd9f45276cff4d/src%2Ftest%2Fui%2Fissues%2Fissue-42060.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-42060.stderr?ref=700f3f23d8ac8971d107f26c18cd9f45276cff4d", "patch": "@@ -2,15 +2,15 @@ error[E0435]: attempt to use a non-constant value in a constant\n   --> $DIR/issue-42060.rs:3:23\n    |\n LL |     let thing = ();\n-   |         ----- help: consider using `const` instead of `let`\n+   |     --------- help: consider using `const` instead of `let`: `const thing`\n LL |     let other: typeof(thing) = thing;\n    |                       ^^^^^ non-constant value\n \n error[E0435]: attempt to use a non-constant value in a constant\n   --> $DIR/issue-42060.rs:9:13\n    |\n LL |     let q = 1;\n-   |         - help: consider using `const` instead of `let`\n+   |     ----- help: consider using `const` instead of `let`: `const q`\n LL |     <typeof(q)>::N\n    |             ^ non-constant value\n "}, {"sha": "e6c29cee97d2fa5a7c9303bd84d2502783d92a1b", "filename": "src/test/ui/issues/issue-44239.fixed", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/700f3f23d8ac8971d107f26c18cd9f45276cff4d/src%2Ftest%2Fui%2Fissues%2Fissue-44239.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/700f3f23d8ac8971d107f26c18cd9f45276cff4d/src%2Ftest%2Fui%2Fissues%2Fissue-44239.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-44239.fixed?ref=700f3f23d8ac8971d107f26c18cd9f45276cff4d", "patch": "@@ -0,0 +1,11 @@\n+// run-rustfix\n+#![allow(dead_code, non_upper_case_globals)]\n+fn main() {\n+    const n: usize = 0;\n+\n+    struct Foo;\n+    impl Foo {\n+        const N: usize = n;\n+        //~^ ERROR attempt to use a non-constant value\n+    }\n+}"}, {"sha": "482ed194c7a1c117a19ad39219fbdc5691a24eb1", "filename": "src/test/ui/issues/issue-44239.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/700f3f23d8ac8971d107f26c18cd9f45276cff4d/src%2Ftest%2Fui%2Fissues%2Fissue-44239.rs", "raw_url": "https://github.com/rust-lang/rust/raw/700f3f23d8ac8971d107f26c18cd9f45276cff4d/src%2Ftest%2Fui%2Fissues%2Fissue-44239.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-44239.rs?ref=700f3f23d8ac8971d107f26c18cd9f45276cff4d", "patch": "@@ -1,5 +1,7 @@\n+// run-rustfix\n+#![allow(dead_code, non_upper_case_globals)]\n fn main() {\n-    let n = 0;\n+    let n: usize = 0;\n \n     struct Foo;\n     impl Foo {"}, {"sha": "2a245c92c4868ff0be861be7b1b5758eecc5d017", "filename": "src/test/ui/issues/issue-44239.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/700f3f23d8ac8971d107f26c18cd9f45276cff4d/src%2Ftest%2Fui%2Fissues%2Fissue-44239.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/700f3f23d8ac8971d107f26c18cd9f45276cff4d/src%2Ftest%2Fui%2Fissues%2Fissue-44239.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-44239.stderr?ref=700f3f23d8ac8971d107f26c18cd9f45276cff4d", "patch": "@@ -1,8 +1,8 @@\n error[E0435]: attempt to use a non-constant value in a constant\n-  --> $DIR/issue-44239.rs:6:26\n+  --> $DIR/issue-44239.rs:8:26\n    |\n-LL |     let n = 0;\n-   |         - help: consider using `const` instead of `let`\n+LL |     let n: usize = 0;\n+   |     ----- help: consider using `const` instead of `let`: `const n`\n ...\n LL |         const N: usize = n;\n    |                          ^ non-constant value"}, {"sha": "d684b8eaabdfe91652a2824fbdd3c3ede6c2f3ce", "filename": "src/test/ui/non-constant-expr-for-arr-len.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/700f3f23d8ac8971d107f26c18cd9f45276cff4d/src%2Ftest%2Fui%2Fnon-constant-expr-for-arr-len.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/700f3f23d8ac8971d107f26c18cd9f45276cff4d/src%2Ftest%2Fui%2Fnon-constant-expr-for-arr-len.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnon-constant-expr-for-arr-len.stderr?ref=700f3f23d8ac8971d107f26c18cd9f45276cff4d", "patch": "@@ -2,9 +2,9 @@ error[E0435]: attempt to use a non-constant value in a constant\n   --> $DIR/non-constant-expr-for-arr-len.rs:5:22\n    |\n LL |     fn bar(n: usize) {\n-   |            - help: consider using `const` instead of `let`\n+   |            - this would need to be a `const`\n LL |         let _x = [0; n];\n-   |                      ^ non-constant value\n+   |                      ^\n \n error: aborting due to previous error\n "}, {"sha": "e90754e9118d25e9e5728441630e087e22c1e066", "filename": "src/test/ui/repeat_count.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/700f3f23d8ac8971d107f26c18cd9f45276cff4d/src%2Ftest%2Fui%2Frepeat_count.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/700f3f23d8ac8971d107f26c18cd9f45276cff4d/src%2Ftest%2Fui%2Frepeat_count.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepeat_count.stderr?ref=700f3f23d8ac8971d107f26c18cd9f45276cff4d", "patch": "@@ -2,7 +2,7 @@ error[E0435]: attempt to use a non-constant value in a constant\n   --> $DIR/repeat_count.rs:5:17\n    |\n LL |     let n = 1;\n-   |         - help: consider using `const` instead of `let`\n+   |     ----- help: consider using `const` instead of `let`: `const n`\n LL |     let a = [0; n];\n    |                 ^ non-constant value\n "}, {"sha": "64c7687f7a882d600af96e075bc78c7f9aff7afd", "filename": "src/test/ui/type/type-dependent-def-issue-49241.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/700f3f23d8ac8971d107f26c18cd9f45276cff4d/src%2Ftest%2Fui%2Ftype%2Ftype-dependent-def-issue-49241.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/700f3f23d8ac8971d107f26c18cd9f45276cff4d/src%2Ftest%2Fui%2Ftype%2Ftype-dependent-def-issue-49241.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-dependent-def-issue-49241.stderr?ref=700f3f23d8ac8971d107f26c18cd9f45276cff4d", "patch": "@@ -2,9 +2,9 @@ error[E0435]: attempt to use a non-constant value in a constant\n   --> $DIR/type-dependent-def-issue-49241.rs:3:22\n    |\n LL |     const l: usize = v.count();\n-   |           -          ^ non-constant value\n-   |           |\n-   |           help: consider using `let` instead of `const`\n+   |     -------          ^ non-constant value\n+   |     |\n+   |     help: consider using `let` instead of `const`: `let l`\n \n error: aborting due to previous error\n "}]}