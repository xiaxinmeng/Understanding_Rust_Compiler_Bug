{"sha": "72df99a49b565c5e35264f8efb868d5e30f1be02", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyZGY5OWE0OWI1NjVjNWUzNTI2NGY4ZWZiODY4ZDVlMzBmMWJlMDI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-23T22:55:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-23T22:55:19Z"}, "message": "Auto merge of #83302 - camsteffen:write-piece-unchecked, r=dtolnay\n\nGet piece unchecked in `write`\n\nWe already use specialized `zip`, but it seems like we can do a little better by not checking `pieces` length at all.\n\n`Arguments` constructors are now unsafe. So the `format_args!` expansion now includes an `unsafe` block.\n\n<details>\n<summary>Local Bench Diff</summary>\n\n```text\n name                        before ns/iter  after ns/iter  diff ns/iter   diff %  speedup\n fmt::write_str_macro1       22,967          19,718               -3,249  -14.15%   x 1.16\n fmt::write_str_macro2       35,527          32,654               -2,873   -8.09%   x 1.09\n fmt::write_str_macro_debug  571,953         575,973               4,020    0.70%   x 0.99\n fmt::write_str_ref          9,579           9,459                  -120   -1.25%   x 1.01\n fmt::write_str_value        9,573           9,572                    -1   -0.01%   x 1.00\n fmt::write_u128_max         176             173                      -3   -1.70%   x 1.02\n fmt::write_u128_min         138             134                      -4   -2.90%   x 1.03\n fmt::write_u64_max          139             136                      -3   -2.16%   x 1.02\n fmt::write_u64_min          129             135                       6    4.65%   x 0.96\n fmt::write_vec_macro1       24,401          22,273               -2,128   -8.72%   x 1.10\n fmt::write_vec_macro2       37,096          35,602               -1,494   -4.03%   x 1.04\n fmt::write_vec_macro_debug  588,291         589,575               1,284    0.22%   x 1.00\n fmt::write_vec_ref          9,568           9,732                   164    1.71%   x 0.98\n fmt::write_vec_value        9,516           9,625                   109    1.15%   x 0.99\n```\n</details>", "tree": {"sha": "587e9ade117b9e3665e6289abcdb20059698f6ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/587e9ade117b9e3665e6289abcdb20059698f6ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72df99a49b565c5e35264f8efb868d5e30f1be02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72df99a49b565c5e35264f8efb868d5e30f1be02", "html_url": "https://github.com/rust-lang/rust/commit/72df99a49b565c5e35264f8efb868d5e30f1be02", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72df99a49b565c5e35264f8efb868d5e30f1be02/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c847c0dbd9db9ae3fb8ca4698938b2d6c713e83", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c847c0dbd9db9ae3fb8ca4698938b2d6c713e83", "html_url": "https://github.com/rust-lang/rust/commit/4c847c0dbd9db9ae3fb8ca4698938b2d6c713e83"}, {"sha": "d5e51dbf10c116f899abc275a6e36b8977b0ebfa", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5e51dbf10c116f899abc275a6e36b8977b0ebfa", "html_url": "https://github.com/rust-lang/rust/commit/d5e51dbf10c116f899abc275a6e36b8977b0ebfa"}], "stats": {"total": 35, "additions": 20, "deletions": 15}, "files": [{"sha": "c06b894a73871e22b092b464ddb9c994d384cb17", "filename": "clippy_utils/src/higher.rs", "status": "modified", "additions": 20, "deletions": 15, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/72df99a49b565c5e35264f8efb868d5e30f1be02/clippy_utils%2Fsrc%2Fhigher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72df99a49b565c5e35264f8efb868d5e30f1be02/clippy_utils%2Fsrc%2Fhigher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fhigher.rs?ref=72df99a49b565c5e35264f8efb868d5e30f1be02", "patch": "@@ -469,12 +469,28 @@ impl FormatArgsExpn<'tcx> {\n             if let ExpnKind::Macro(_, name) = expr.span.ctxt().outer_expn_data().kind;\n             let name = name.as_str();\n             if name.ends_with(\"format_args\") || name.ends_with(\"format_args_nl\");\n-            if let ExprKind::Call(_, args) = expr.kind;\n-            if let Some((strs_ref, args, fmt_expr)) = match args {\n+\n+            if let ExprKind::Match(inner_match, [arm], _) = expr.kind;\n+\n+            // `match match`, if you will\n+            if let ExprKind::Match(args, [inner_arm], _) = inner_match.kind;\n+            if let ExprKind::Tup(value_args) = args.kind;\n+            if let Some(value_args) = value_args\n+                .iter()\n+                .map(|e| match e.kind {\n+                    ExprKind::AddrOf(_, _, e) => Some(e),\n+                    _ => None,\n+                })\n+                .collect();\n+            if let ExprKind::Array(args) = inner_arm.body.kind;\n+\n+            if let ExprKind::Block(Block { stmts: [], expr: Some(expr), .. }, _) = arm.body.kind;\n+            if let ExprKind::Call(_, call_args) = expr.kind;\n+            if let Some((strs_ref, fmt_expr)) = match call_args {\n                 // Arguments::new_v1\n-                [strs_ref, args] => Some((strs_ref, args, None)),\n+                [strs_ref, _] => Some((strs_ref, None)),\n                 // Arguments::new_v1_formatted\n-                [strs_ref, args, fmt_expr] => Some((strs_ref, args, Some(fmt_expr))),\n+                [strs_ref, _, fmt_expr] => Some((strs_ref, Some(fmt_expr))),\n                 _ => None,\n             };\n             if let ExprKind::AddrOf(BorrowKind::Ref, _, strs_arr) = strs_ref.kind;\n@@ -490,17 +506,6 @@ impl FormatArgsExpn<'tcx> {\n                     None\n                 })\n                 .collect();\n-            if let ExprKind::AddrOf(BorrowKind::Ref, _, args) = args.kind;\n-            if let ExprKind::Match(args, [arm], _) = args.kind;\n-            if let ExprKind::Tup(value_args) = args.kind;\n-            if let Some(value_args) = value_args\n-                .iter()\n-                .map(|e| match e.kind {\n-                    ExprKind::AddrOf(_, _, e) => Some(e),\n-                    _ => None,\n-                })\n-                .collect();\n-            if let ExprKind::Array(args) = arm.body.kind;\n             then {\n                 Some(FormatArgsExpn {\n                     format_string_span: strs_ref.span,"}]}