{"sha": "6f82ddf18e3c13a79e3188591a2c386fc052aed1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmODJkZGYxOGUzYzEzYTc5ZTMxODg1OTFhMmMzODZmYzA1MmFlZDE=", "commit": {"author": {"name": "LinkTed", "email": "LinkTed@users.noreply.github.com", "date": "2020-08-22T18:25:43Z"}, "committer": {"name": "LinkTed", "email": "LinkTed@users.noreply.github.com", "date": "2020-10-10T13:19:11Z"}, "message": "Add AncillaryError", "tree": {"sha": "4fc6e9af3c45c6427a4883c6452c6f8c3b83dda4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4fc6e9af3c45c6427a4883c6452c6f8c3b83dda4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f82ddf18e3c13a79e3188591a2c386fc052aed1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f82ddf18e3c13a79e3188591a2c386fc052aed1", "html_url": "https://github.com/rust-lang/rust/commit/6f82ddf18e3c13a79e3188591a2c386fc052aed1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f82ddf18e3c13a79e3188591a2c386fc052aed1/comments", "author": {"login": "LinkTed", "id": 6806266, "node_id": "MDQ6VXNlcjY4MDYyNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/6806266?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LinkTed", "html_url": "https://github.com/LinkTed", "followers_url": "https://api.github.com/users/LinkTed/followers", "following_url": "https://api.github.com/users/LinkTed/following{/other_user}", "gists_url": "https://api.github.com/users/LinkTed/gists{/gist_id}", "starred_url": "https://api.github.com/users/LinkTed/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LinkTed/subscriptions", "organizations_url": "https://api.github.com/users/LinkTed/orgs", "repos_url": "https://api.github.com/users/LinkTed/repos", "events_url": "https://api.github.com/users/LinkTed/events{/privacy}", "received_events_url": "https://api.github.com/users/LinkTed/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LinkTed", "id": 6806266, "node_id": "MDQ6VXNlcjY4MDYyNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/6806266?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LinkTed", "html_url": "https://github.com/LinkTed", "followers_url": "https://api.github.com/users/LinkTed/followers", "following_url": "https://api.github.com/users/LinkTed/following{/other_user}", "gists_url": "https://api.github.com/users/LinkTed/gists{/gist_id}", "starred_url": "https://api.github.com/users/LinkTed/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LinkTed/subscriptions", "organizations_url": "https://api.github.com/users/LinkTed/orgs", "repos_url": "https://api.github.com/users/LinkTed/repos", "events_url": "https://api.github.com/users/LinkTed/events{/privacy}", "received_events_url": "https://api.github.com/users/LinkTed/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6fa7c3f79ed3775912c9ec5db8a824dee646e4dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/6fa7c3f79ed3775912c9ec5db8a824dee646e4dd", "html_url": "https://github.com/rust-lang/rust/commit/6fa7c3f79ed3775912c9ec5db8a824dee646e4dd"}], "stats": {"total": 73, "additions": 44, "deletions": 29}, "files": [{"sha": "77214801e3e0ed7531b7e58ce1dfb50914a7ba65", "filename": "library/std/src/sys/unix/ext/net/ancillary.rs", "status": "modified", "additions": 33, "deletions": 20, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/6f82ddf18e3c13a79e3188591a2c386fc052aed1/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fancillary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f82ddf18e3c13a79e3188591a2c386fc052aed1/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fancillary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fancillary.rs?ref=6f82ddf18e3c13a79e3188591a2c386fc052aed1", "patch": "@@ -1,3 +1,4 @@\n+use crate::convert::TryFrom;\n use crate::io::{self, IoSliceMut};\n use crate::mem;\n use crate::os::unix::io::RawFd;\n@@ -145,6 +146,13 @@ impl<'a> Iterator for ScmCredentials<'a> {\n     }\n }\n \n+#[non_exhaustive]\n+#[derive(Debug)]\n+#[unstable(feature = \"unix_socket_ancillary_data\", issue = \"none\")]\n+pub enum AncillaryError {\n+    Unknown { cmsg_level: i32, cmsg_type: i32 },\n+}\n+\n #[cfg(any(\n     target_os = \"haiku\",\n     target_os = \"solaris\",\n@@ -240,25 +248,27 @@ impl<'a> AncillaryData<'a> {\n     target_env = \"uclibc\",\n ))]\n #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"none\")]\n-impl<'a> AncillaryData<'a> {\n-    fn from(cmsg: &'a libc::cmsghdr) -> Self {\n+impl<'a> TryFrom<&'a libc::cmsghdr> for AncillaryData<'a> {\n+    type Error = AncillaryError;\n+\n+    fn try_from(cmsg: &'a libc::cmsghdr) -> Result<Self, Self::Error> {\n         unsafe {\n             let cmsg_len_zero = libc::CMSG_LEN(0) as usize;\n             let data_len = (*cmsg).cmsg_len - cmsg_len_zero;\n             let data = libc::CMSG_DATA(cmsg).cast();\n             let data = from_raw_parts(data, data_len);\n \n-            if (*cmsg).cmsg_level == libc::SOL_SOCKET {\n-                match (*cmsg).cmsg_type {\n-                    libc::SCM_RIGHTS => AncillaryData::as_rights(data),\n+            match (*cmsg).cmsg_level {\n+                libc::SOL_SOCKET => match (*cmsg).cmsg_type {\n+                    libc::SCM_RIGHTS => Ok(AncillaryData::as_rights(data)),\n                     #[cfg(any(\n                         target_os = \"linux\",\n                         target_os = \"android\",\n                         target_os = \"emscripten\",\n                         target_os = \"fuchsia\",\n                         target_env = \"uclibc\",\n                     ))]\n-                    libc::SCM_CREDENTIALS => AncillaryData::as_credentials(data),\n+                    libc::SCM_CREDENTIALS => Ok(AncillaryData::as_credentials(data)),\n                     #[cfg(any(\n                         target_os = \"netbsd\",\n                         target_os = \"openbsd\",\n@@ -267,11 +277,14 @@ impl<'a> AncillaryData<'a> {\n                         target_os = \"macos\",\n                         target_os = \"ios\",\n                     ))]\n-                    libc::SCM_CREDS => AncillaryData::as_credentials(data),\n-                    _ => panic!(\"Unknown cmsg type\"),\n+                    libc::SCM_CREDS => Ok(AncillaryData::as_credentials(data)),\n+                    cmsg_type => {\n+                        Err(AncillaryError::Unknown { cmsg_level: libc::SOL_SOCKET, cmsg_type })\n+                    }\n+                },\n+                cmsg_level => {\n+                    Err(AncillaryError::Unknown { cmsg_level, cmsg_type: (*cmsg).cmsg_type })\n                 }\n-            } else {\n-                panic!(\"Unknown cmsg level\");\n             }\n         }\n     }\n@@ -317,9 +330,9 @@ pub struct Messages<'a> {\n ))]\n #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"none\")]\n impl<'a> Iterator for Messages<'a> {\n-    type Item = AncillaryData<'a>;\n+    type Item = Result<AncillaryData<'a>, AncillaryError>;\n \n-    fn next(&mut self) -> Option<AncillaryData<'a>> {\n+    fn next(&mut self) -> Option<Self::Item> {\n         unsafe {\n             let msg = libc::msghdr {\n                 msg_name: null_mut(),\n@@ -339,8 +352,8 @@ impl<'a> Iterator for Messages<'a> {\n \n             let cmsg = cmsg.as_ref()?;\n             self.current = Some(cmsg);\n-            let ancillary_data = AncillaryData::from(cmsg);\n-            Some(ancillary_data)\n+            let ancillary_result = AncillaryData::try_from(cmsg);\n+            Some(ancillary_result)\n         }\n     }\n }\n@@ -364,8 +377,8 @@ impl<'a> Iterator for Messages<'a> {\n ///     let mut bufs = &mut [IoSliceMut::new(&mut buf[..])][..];\n ///     sock.recv_vectored_with_ancillary(bufs, &mut ancillary)?;\n ///\n-///     for ancillary_data in ancillary.messages() {\n-///         if let AncillaryData::ScmRights(scm_rights) = ancillary_data {\n+///     for ancillary_result in ancillary.messages() {\n+///         if let AncillaryData::ScmRights(scm_rights) = ancillary_result.unwrap() {\n ///             for fd in scm_rights {\n ///                 println!(\"receive file descriptor: {}\", fd);\n ///             }\n@@ -585,8 +598,8 @@ impl<'a> SocketAncillary<'a> {\n     ///     let mut bufs = &mut [IoSliceMut::new(&mut buf[..])][..];\n     ///\n     ///     sock.recv_vectored_with_ancillary(bufs, &mut ancillary)?;\n-    ///     for ancillary_data in ancillary.messages() {\n-    ///         if let AncillaryData::ScmRights(scm_rights) = ancillary_data {\n+    ///     for ancillary_result in ancillary.messages() {\n+    ///         if let AncillaryData::ScmRights(scm_rights) = ancillary_result.unwrap() {\n     ///             for fd in scm_rights {\n     ///                 println!(\"receive file descriptor: {}\", fd);\n     ///             }\n@@ -596,8 +609,8 @@ impl<'a> SocketAncillary<'a> {\n     ///     ancillary.clear();\n     ///\n     ///     sock.recv_vectored_with_ancillary(bufs, &mut ancillary)?;\n-    ///     for ancillary_data in ancillary.messages() {\n-    ///         if let AncillaryData::ScmRights(scm_rights) = ancillary_data {\n+    ///     for ancillary_result in ancillary.messages() {\n+    ///         if let AncillaryData::ScmRights(scm_rights) = ancillary_result.unwrap() {\n     ///             for fd in scm_rights {\n     ///                 println!(\"receive file descriptor: {}\", fd);\n     ///             }"}, {"sha": "e2fa65572e1e5464f8426bfb5b369d830adb06be", "filename": "library/std/src/sys/unix/ext/net/datagram.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6f82ddf18e3c13a79e3188591a2c386fc052aed1/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fdatagram.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f82ddf18e3c13a79e3188591a2c386fc052aed1/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fdatagram.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fdatagram.rs?ref=6f82ddf18e3c13a79e3188591a2c386fc052aed1", "patch": "@@ -343,8 +343,8 @@ impl UnixDatagram {\n     ///     let mut ancillary = SocketAncillary::new(&mut ancillary_buffer[..]);\n     ///     let (size, _truncated, sender) = sock.recv_vectored_with_ancillary_from(bufs, &mut ancillary)?;\n     ///     println!(\"received {}\", size);\n-    ///     for ancillary_data in ancillary.messages() {\n-    ///         if let AncillaryData::ScmRights(scm_rights) = ancillary_data {\n+    ///     for ancillary_result in ancillary.messages() {\n+    ///         if let AncillaryData::ScmRights(scm_rights) = ancillary_result.unwrap() {\n     ///             for fd in scm_rights {\n     ///                 println!(\"receive file descriptor: {}\", fd);\n     ///             }\n@@ -391,8 +391,8 @@ impl UnixDatagram {\n     ///     let mut ancillary = SocketAncillary::new(&mut ancillary_buffer[..]);\n     ///     let (size, _truncated) = sock.recv_vectored_with_ancillary(bufs, &mut ancillary)?;\n     ///     println!(\"received {}\", size);\n-    ///     for ancillary_data in ancillary.messages() {\n-    ///         if let AncillaryData::ScmRights(scm_rights) = ancillary_data {\n+    ///     for ancillary_result in ancillary.messages() {\n+    ///         if let AncillaryData::ScmRights(scm_rights) = ancillary_result.unwrap() {\n     ///             for fd in scm_rights {\n     ///                 println!(\"receive file descriptor: {}\", fd);\n     ///             }"}, {"sha": "d144c41de3c81b2ed0221285b2b7aa720e1b7ded", "filename": "library/std/src/sys/unix/ext/net/stream.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f82ddf18e3c13a79e3188591a2c386fc052aed1/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f82ddf18e3c13a79e3188591a2c386fc052aed1/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fstream.rs?ref=6f82ddf18e3c13a79e3188591a2c386fc052aed1", "patch": "@@ -451,8 +451,8 @@ impl UnixStream {\n     ///     let mut ancillary = SocketAncillary::new(&mut ancillary_buffer[..]);\n     ///     let size = socket.recv_vectored_with_ancillary(bufs, &mut ancillary)?;\n     ///     println!(\"received {}\", size);\n-    ///     for ancillary_data in ancillary.messages() {\n-    ///         if let AncillaryData::ScmRights(scm_rights) = ancillary_data {\n+    ///     for ancillary_result in ancillary.messages() {\n+    ///         if let AncillaryData::ScmRights(scm_rights) = ancillary_result.unwrap() {\n     ///             for fd in scm_rights {\n     ///                 println!(\"receive file descriptor: {}\", fd);\n     ///             }"}, {"sha": "3be9bb48583fb6d1a3a87b4b7eb9976b0dd0f8d2", "filename": "library/std/src/sys/unix/ext/net/test.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6f82ddf18e3c13a79e3188591a2c386fc052aed1/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f82ddf18e3c13a79e3188591a2c386fc052aed1/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Ftest.rs?ref=6f82ddf18e3c13a79e3188591a2c386fc052aed1", "patch": "@@ -481,7 +481,7 @@ fn test_send_vectored_fds_unix_stream() {\n \n     let mut ancillary_data_vec = Vec::from_iter(ancillary2.messages());\n     assert_eq!(ancillary_data_vec.len(), 1);\n-    if let AncillaryData::ScmRights(scm_rights) = ancillary_data_vec.pop().unwrap() {\n+    if let AncillaryData::ScmRights(scm_rights) = ancillary_data_vec.pop().unwrap().unwrap() {\n         let fd_vec = Vec::from_iter(scm_rights);\n         assert_eq!(fd_vec.len(), 1);\n         unsafe {\n@@ -551,7 +551,9 @@ fn test_send_vectored_with_ancillary_to_unix_datagram() {\n \n     let mut ancillary_data_vec = Vec::from_iter(ancillary2.messages());\n     assert_eq!(ancillary_data_vec.len(), 1);\n-    if let AncillaryData::ScmCredentials(scm_credentials) = ancillary_data_vec.pop().unwrap() {\n+    if let AncillaryData::ScmCredentials(scm_credentials) =\n+        ancillary_data_vec.pop().unwrap().unwrap()\n+    {\n         let cred_vec = Vec::from_iter(scm_credentials);\n         assert_eq!(cred_vec.len(), 1);\n         assert_eq!(cred1.pid, cred_vec[0].pid);\n@@ -596,7 +598,7 @@ fn test_send_vectored_with_ancillary_unix_datagram() {\n \n     let mut ancillary_data_vec = Vec::from_iter(ancillary2.messages());\n     assert_eq!(ancillary_data_vec.len(), 1);\n-    if let AncillaryData::ScmRights(scm_rights) = ancillary_data_vec.pop().unwrap() {\n+    if let AncillaryData::ScmRights(scm_rights) = ancillary_data_vec.pop().unwrap().unwrap() {\n         let fd_vec = Vec::from_iter(scm_rights);\n         assert_eq!(fd_vec.len(), 1);\n         unsafe {"}]}