{"sha": "372c6df564616dd461b82def5d75428940ca04ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3MmM2ZGY1NjQ2MTZkZDQ2MWI4MmRlZjVkNzU0Mjg5NDBjYTA0YWU=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2016-11-24T17:42:10Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2016-11-28T03:12:41Z"}, "message": "rustc_typeck: don't record associated type resolutions.", "tree": {"sha": "17e0671432bf402af41c108196c8dd016b55ef5f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17e0671432bf402af41c108196c8dd016b55ef5f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/372c6df564616dd461b82def5d75428940ca04ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/372c6df564616dd461b82def5d75428940ca04ae", "html_url": "https://github.com/rust-lang/rust/commit/372c6df564616dd461b82def5d75428940ca04ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/372c6df564616dd461b82def5d75428940ca04ae/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "548e681f2f8c206c04158add722f737940a81269", "url": "https://api.github.com/repos/rust-lang/rust/commits/548e681f2f8c206c04158add722f737940a81269", "html_url": "https://github.com/rust-lang/rust/commit/548e681f2f8c206c04158add722f737940a81269"}], "stats": {"total": 23, "additions": 11, "deletions": 12}, "files": [{"sha": "8d3e734f8c33f8e6735660caf23d152c91d32a25", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/372c6df564616dd461b82def5d75428940ca04ae/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/372c6df564616dd461b82def5d75428940ca04ae/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=372c6df564616dd461b82def5d75428940ca04ae", "patch": "@@ -489,7 +489,7 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n           }\n \n           hir::ExprPath(ref qpath) => {\n-            let def = self.tcx().tables().qpath_def(qpath, expr.id);\n+            let def = self.infcx.tables.borrow().qpath_def(qpath, expr.id);\n             self.cat_def(expr.id, expr.span, expr_ty, def)\n           }\n \n@@ -1087,7 +1087,7 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n \n         match pat.node {\n           PatKind::TupleStruct(ref qpath, ref subpats, ddpos) => {\n-            let def = self.tcx().tables().qpath_def(qpath, pat.id);\n+            let def = self.infcx.tables.borrow().qpath_def(qpath, pat.id);\n             let expected_len = match def {\n                 Def::VariantCtor(def_id, CtorKind::Fn) => {\n                     let enum_def = self.tcx().parent_def_id(def_id).unwrap();"}, {"sha": "bb7b62533001db17b633a294ca0f93615511af6e", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/372c6df564616dd461b82def5d75428940ca04ae/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/372c6df564616dd461b82def5d75428940ca04ae/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=372c6df564616dd461b82def5d75428940ca04ae", "patch": "@@ -1662,13 +1662,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                 } else {\n                     Def::Err\n                 };\n-                let (ty, def) = self.associated_path_def_to_ty(ast_ty.id, ast_ty.span,\n-                                                               ty, def, segment);\n-\n-                // Write back the new resolution.\n-                tcx.tables.borrow_mut().type_relative_path_defs.insert(ast_ty.id, def);\n-\n-                ty\n+                self.associated_path_def_to_ty(ast_ty.id, ast_ty.span, ty, def, segment).0\n             }\n             hir::TyArray(ref ty, ref e) => {\n                 if let Ok(length) = eval_length(tcx.global_tcx(), &e, \"array length\") {"}, {"sha": "6d00f481fa263a4877471f8b7c6880b3eb20cdc8", "filename": "src/librustc_typeck/check/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/372c6df564616dd461b82def5d75428940ca04ae/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/372c6df564616dd461b82def5d75428940ca04ae/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs?ref=372c6df564616dd461b82def5d75428940ca04ae", "patch": "@@ -219,7 +219,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n                 if let hir::ExprCall(ref expr, _) = call_expr.node {\n                     let def = if let hir::ExprPath(ref qpath) = expr.node {\n-                        self.tcx.tables().qpath_def(qpath, expr.id)\n+                        self.tables.borrow().qpath_def(qpath, expr.id)\n                     } else {\n                         Def::Err\n                     };"}, {"sha": "2babb81bc407a47b5b6295e5db99a1bdb79b9f21", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/372c6df564616dd461b82def5d75428940ca04ae/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/372c6df564616dd461b82def5d75428940ca04ae/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=372c6df564616dd461b82def5d75428940ca04ae", "patch": "@@ -4028,7 +4028,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                                                    ty, def, segment);\n \n                 // Write back the new resolution.\n-                self.tcx.tables.borrow_mut().type_relative_path_defs.insert(node_id, def);\n+                self.tables.borrow_mut().type_relative_path_defs.insert(node_id, def);\n \n                 (def, ty)\n             }\n@@ -4069,7 +4069,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         };\n \n         // Write back the new resolution.\n-        self.tcx.tables.borrow_mut().type_relative_path_defs.insert(node_id, def);\n+        self.tables.borrow_mut().type_relative_path_defs.insert(node_id, def);\n         (def, Some(ty), slice::ref_slice(&**item_segment))\n     }\n "}, {"sha": "45b3dae3e9f83cb224204a12625024c3ff9a605e", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/372c6df564616dd461b82def5d75428940ca04ae/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/372c6df564616dd461b82def5d75428940ca04ae/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=372c6df564616dd461b82def5d75428940ca04ae", "patch": "@@ -358,6 +358,11 @@ impl<'cx, 'gcx, 'tcx> WritebackCx<'cx, 'gcx, 'tcx> {\n     }\n \n     fn visit_node_id(&self, reason: ResolveReason, id: ast::NodeId) {\n+        // Export associated path extensions.\n+        if let Some(def) = self.fcx.tables.borrow_mut().type_relative_path_defs.remove(&id) {\n+            self.tcx().tables.borrow_mut().type_relative_path_defs.insert(id, def);\n+        }\n+\n         // Resolve any borrowings for the node with id `id`\n         self.visit_adjustments(reason, id);\n "}]}