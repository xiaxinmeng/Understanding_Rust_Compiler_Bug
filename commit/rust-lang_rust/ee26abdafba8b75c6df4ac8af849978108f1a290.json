{"sha": "ee26abdafba8b75c6df4ac8af849978108f1a290", "node_id": "C_kwDOAAsO6NoAKGVlMjZhYmRhZmJhOGI3NWM2ZGY0YWM4YWY4NDk5NzgxMDhmMWEyOTA", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2023-05-18T12:07:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-18T12:07:08Z"}, "message": "Rollup merge of #111054 - cjgillot:cfg-eval-recover, r=b-naber\n\nDo not recover when parsing stmt in cfg-eval.\n\n`parse_stmt` does recovery on its own. When parsing the statement fails, we always get `Ok(None)` instead of an `Err` variant with the diagnostic that we can emit.\n\nTo avoid this behaviour, we need to opt-out of recovery for cfg_eval.\n\nFixes https://github.com/rust-lang/rust/issues/105228", "tree": {"sha": "c58e8a92613cf471b11e4e7a785f466528cfd653", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c58e8a92613cf471b11e4e7a785f466528cfd653"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee26abdafba8b75c6df4ac8af849978108f1a290", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkZhTsCRBK7hj4Ov3rIwAAqYMIADaUCxRrGsE5nTyfX/CxVEbb\n01G8VJ7LA7Fr6t2MOGVW1I/VWB8sx79xKTf0x5sT4kkZT10P5lAWgX3NuQdlE65y\nAnCC7kTSwjhfvAEofgD9EK7EjIpniimN3mBfFQO9pEMKnR/QLo+fwFdxzM95j8mG\nFYezDL6f+n3gowla9kSx9XCsnxX3C8yQYJoTK776c2HgrQnTRVUMA+DV526Xe+96\ncgg5ZCdY3fUY14zXnaTF/BtP31kHmYbHTN/Qs6ATRUkeLcNfK5UnHQV8z5+bQ5jh\ntFBMJYFq+dHy9AejYzmwFHH+86JZsaOMLtr6q+5f8het2mc9TJH/vw9mtWleEvU=\n=0KPB\n-----END PGP SIGNATURE-----\n", "payload": "tree c58e8a92613cf471b11e4e7a785f466528cfd653\nparent f2b213cfc48f9fed3607317e98c93bb946cc209e\nparent d56ce8e199abec57746286995c7949356e2dfcf2\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1684411628 +0530\ncommitter GitHub <noreply@github.com> 1684411628 +0530\n\nRollup merge of #111054 - cjgillot:cfg-eval-recover, r=b-naber\n\nDo not recover when parsing stmt in cfg-eval.\n\n`parse_stmt` does recovery on its own. When parsing the statement fails, we always get `Ok(None)` instead of an `Err` variant with the diagnostic that we can emit.\n\nTo avoid this behaviour, we need to opt-out of recovery for cfg_eval.\n\nFixes https://github.com/rust-lang/rust/issues/105228\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee26abdafba8b75c6df4ac8af849978108f1a290", "html_url": "https://github.com/rust-lang/rust/commit/ee26abdafba8b75c6df4ac8af849978108f1a290", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee26abdafba8b75c6df4ac8af849978108f1a290/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2b213cfc48f9fed3607317e98c93bb946cc209e", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2b213cfc48f9fed3607317e98c93bb946cc209e", "html_url": "https://github.com/rust-lang/rust/commit/f2b213cfc48f9fed3607317e98c93bb946cc209e"}, {"sha": "d56ce8e199abec57746286995c7949356e2dfcf2", "url": "https://api.github.com/repos/rust-lang/rust/commits/d56ce8e199abec57746286995c7949356e2dfcf2", "html_url": "https://github.com/rust-lang/rust/commit/d56ce8e199abec57746286995c7949356e2dfcf2"}], "stats": {"total": 40, "additions": 38, "deletions": 2}, "files": [{"sha": "ed91cea4ae26ae1dcb29a8cb393386b79a9ce867", "filename": "compiler/rustc_builtin_macros/src/cfg_eval.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee26abdafba8b75c6df4ac8af849978108f1a290/compiler%2Frustc_builtin_macros%2Fsrc%2Fcfg_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee26abdafba8b75c6df4ac8af849978108f1a290/compiler%2Frustc_builtin_macros%2Fsrc%2Fcfg_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fcfg_eval.rs?ref=ee26abdafba8b75c6df4ac8af849978108f1a290", "patch": "@@ -166,7 +166,9 @@ impl CfgEval<'_, '_> {\n                     ))\n                 },\n                 Annotatable::Stmt(_) => |parser| {\n-                    Ok(Annotatable::Stmt(P(parser.parse_stmt(ForceCollect::Yes)?.unwrap())))\n+                    Ok(Annotatable::Stmt(P(parser\n+                        .parse_stmt_without_recovery(false, ForceCollect::Yes)?\n+                        .unwrap())))\n                 },\n                 Annotatable::Expr(_) => {\n                     |parser| Ok(Annotatable::Expr(parser.parse_expr_force_collect()?))"}, {"sha": "54f9fc5d2b99964efadacf27d90df7b1339ae6dc", "filename": "compiler/rustc_parse/src/parser/stmt.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ee26abdafba8b75c6df4ac8af849978108f1a290/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee26abdafba8b75c6df4ac8af849978108f1a290/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs?ref=ee26abdafba8b75c6df4ac8af849978108f1a290", "patch": "@@ -40,7 +40,8 @@ impl<'a> Parser<'a> {\n \n     /// If `force_collect` is [`ForceCollect::Yes`], forces collection of tokens regardless of whether\n     /// or not we have attributes\n-    pub(crate) fn parse_stmt_without_recovery(\n+    // Public for `cfg_eval` macro expansion.\n+    pub fn parse_stmt_without_recovery(\n         &mut self,\n         capture_semi: bool,\n         force_collect: ForceCollect,"}, {"sha": "2e0839d2a153561595cd9fa95587245c7ff358a0", "filename": "tests/ui/cfg/cfg-stmt-recovery.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ee26abdafba8b75c6df4ac8af849978108f1a290/tests%2Fui%2Fcfg%2Fcfg-stmt-recovery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee26abdafba8b75c6df4ac8af849978108f1a290/tests%2Fui%2Fcfg%2Fcfg-stmt-recovery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcfg%2Fcfg-stmt-recovery.rs?ref=ee26abdafba8b75c6df4ac8af849978108f1a290", "patch": "@@ -0,0 +1,13 @@\n+// Verify that we do not ICE when failing to parse a statement in `cfg_eval`.\n+\n+#![feature(cfg_eval)]\n+#![feature(stmt_expr_attributes)]\n+\n+#[cfg_eval]\n+fn main() {\n+    #[cfg_eval]\n+    let _ = #[cfg(FALSE)] 0;\n+    //~^ ERROR removing an expression is not supported in this position\n+    //~| ERROR expected expression, found `;`\n+    //~| ERROR removing an expression is not supported in this position\n+}"}, {"sha": "cb15e21fac698821d2bd88167d913859138d3eb6", "filename": "tests/ui/cfg/cfg-stmt-recovery.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ee26abdafba8b75c6df4ac8af849978108f1a290/tests%2Fui%2Fcfg%2Fcfg-stmt-recovery.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ee26abdafba8b75c6df4ac8af849978108f1a290/tests%2Fui%2Fcfg%2Fcfg-stmt-recovery.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcfg%2Fcfg-stmt-recovery.stderr?ref=ee26abdafba8b75c6df4ac8af849978108f1a290", "patch": "@@ -0,0 +1,20 @@\n+error: removing an expression is not supported in this position\n+  --> $DIR/cfg-stmt-recovery.rs:9:13\n+   |\n+LL |     let _ = #[cfg(FALSE)] 0;\n+   |             ^^^^^^^^^^^^^\n+\n+error: expected expression, found `;`\n+  --> $DIR/cfg-stmt-recovery.rs:9:28\n+   |\n+LL |     let _ = #[cfg(FALSE)] 0;\n+   |                            ^ expected expression\n+\n+error: removing an expression is not supported in this position\n+  --> $DIR/cfg-stmt-recovery.rs:9:13\n+   |\n+LL |     let _ = #[cfg(FALSE)] 0;\n+   |             ^^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+"}]}