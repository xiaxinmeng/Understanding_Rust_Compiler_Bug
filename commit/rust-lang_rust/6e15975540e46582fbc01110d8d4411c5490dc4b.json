{"sha": "6e15975540e46582fbc01110d8d4411c5490dc4b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlMTU5NzU1NDBlNDY1ODJmYmMwMTExMGQ4ZDQ0MTFjNTQ5MGRjNGI=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2020-09-30T12:40:38Z"}, "committer": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2020-09-30T12:40:38Z"}, "message": "build-manifest: split the manifest struct definition in a separate file", "tree": {"sha": "bb3f06815f5e43dfa552f395cce2017faa39b228", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb3f06815f5e43dfa552f395cce2017faa39b228"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e15975540e46582fbc01110d8d4411c5490dc4b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE1JbYPtLJAsc22U9xPgar6Auq8ZwFAl90fNkACgkQPgar6Auq\n8ZzHZBAAxbFYNUu/MmQ3rVv1b/DmgZz3zzGAgsJ6AmTwolGICX8HynyRSbmq9jWN\nGPdwLakj8oC5x9VjrToXKkTmyXWhotj9RJJGfD1vcQqnonHuyPli8na7EiFg7fH4\nFhs702tKxEnjrX/ZPGQklJ9QUQV28ZxFGxAqQnCDf2XH52UUOQH0EOIvf3ccjFY2\nKvytciedmGsSwqwrNa8es/V7UXDzFmq5lqNJXahwLos75iUcsrBlQqNn56BKeLEZ\nc1gvMX8wziqKFaSdgGj7j3mrL75UDvM6/Z2BS2wqf2dwVnhO/6GnUd4Ep88MYBz8\nU2/Jw6HlF3ZQYgBl3LpYWlSJ4H5vvUMzoYG1w+aviO67Vg5/0Q/JVYbCkdssUFvC\nsnCXVbqKyOOlZrNX9ex2icHFs0M59htdzCAF/MM3297uirKL9KuEjvb74a/6bYdp\niy3fr/jDU5D80nVQUG0IHzHkQFO71W3wdzfMMBVUiTlf+SjNbIKYmk8NellRFba6\nzUjYpguSa3hGk6rAH54xqLMU2YZT2WoNSwqqViX4MROnBP18FeGJCarr9HIIpNN7\ncseSiyq9IgolxCUNQAt1xMsbKBKiubUZ7QiOg2rbW+SS1qUt+g3V7m55qcSgZBlY\ntxgiUdXHpeZYWiaWr2U9QwNywooghoMa11iUeSwcoQ2mCjtmAmA=\n=LMyH\n-----END PGP SIGNATURE-----", "payload": "tree bb3f06815f5e43dfa552f395cce2017faa39b228\nparent d4928ad7fd6636f1a1f8d51209a70f0ee7a5f43e\nauthor Pietro Albini <pietro@pietroalbini.org> 1601469638 +0200\ncommitter Pietro Albini <pietro@pietroalbini.org> 1601469638 +0200\n\nbuild-manifest: split the manifest struct definition in a separate file\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e15975540e46582fbc01110d8d4411c5490dc4b", "html_url": "https://github.com/rust-lang/rust/commit/6e15975540e46582fbc01110d8d4411c5490dc4b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e15975540e46582fbc01110d8d4411c5490dc4b/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4928ad7fd6636f1a1f8d51209a70f0ee7a5f43e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4928ad7fd6636f1a1f8d51209a70f0ee7a5f43e", "html_url": "https://github.com/rust-lang/rust/commit/d4928ad7fd6636f1a1f8d51209a70f0ee7a5f43e"}], "stats": {"total": 107, "additions": 55, "deletions": 52}, "files": [{"sha": "240e120037b655487d4fa4228c9fd9d54b300e57", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 2, "deletions": 52, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/6e15975540e46582fbc01110d8d4411c5490dc4b/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e15975540e46582fbc01110d8d4411c5490dc4b/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=6e15975540e46582fbc01110d8d4411c5490dc4b", "patch": "@@ -4,10 +4,11 @@\n //! via `x.py dist hash-and-sign`; the cmdline arguments are set up\n //! by rustbuild (in `src/bootstrap/dist.rs`).\n \n+mod manifest;\n mod versions;\n \n+use crate::manifest::{Component, Manifest, Package, Rename, Target};\n use crate::versions::{PkgType, Versions};\n-use serde::Serialize;\n use std::collections::BTreeMap;\n use std::collections::HashMap;\n use std::env;\n@@ -167,57 +168,6 @@ static MINGW: &[&str] = &[\"i686-pc-windows-gnu\", \"x86_64-pc-windows-gnu\"];\n \n static NIGHTLY_ONLY_COMPONENTS: &[&str] = &[\"miri-preview\", \"rust-analyzer-preview\"];\n \n-#[derive(Serialize)]\n-#[serde(rename_all = \"kebab-case\")]\n-struct Manifest {\n-    manifest_version: String,\n-    date: String,\n-    pkg: BTreeMap<String, Package>,\n-    renames: BTreeMap<String, Rename>,\n-    profiles: BTreeMap<String, Vec<String>>,\n-}\n-\n-#[derive(Serialize)]\n-struct Package {\n-    version: String,\n-    git_commit_hash: Option<String>,\n-    target: BTreeMap<String, Target>,\n-}\n-\n-#[derive(Serialize)]\n-struct Rename {\n-    to: String,\n-}\n-\n-#[derive(Serialize, Default)]\n-struct Target {\n-    available: bool,\n-    url: Option<String>,\n-    hash: Option<String>,\n-    xz_url: Option<String>,\n-    xz_hash: Option<String>,\n-    components: Option<Vec<Component>>,\n-    extensions: Option<Vec<Component>>,\n-}\n-\n-impl Target {\n-    fn unavailable() -> Self {\n-        Self::default()\n-    }\n-}\n-\n-#[derive(Serialize)]\n-struct Component {\n-    pkg: String,\n-    target: String,\n-}\n-\n-impl Component {\n-    fn from_str(pkg: &str, target: &str) -> Self {\n-        Self { pkg: pkg.to_string(), target: target.to_string() }\n-    }\n-}\n-\n macro_rules! t {\n     ($e:expr) => {\n         match $e {"}, {"sha": "4e1890d06c15962a7d52673ddfee5fd24f8c8855", "filename": "src/tools/build-manifest/src/manifest.rs", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/6e15975540e46582fbc01110d8d4411c5490dc4b/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmanifest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e15975540e46582fbc01110d8d4411c5490dc4b/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmanifest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmanifest.rs?ref=6e15975540e46582fbc01110d8d4411c5490dc4b", "patch": "@@ -0,0 +1,53 @@\n+use serde::Serialize;\n+use std::collections::BTreeMap;\n+\n+#[derive(Serialize)]\n+#[serde(rename_all = \"kebab-case\")]\n+pub(crate) struct Manifest {\n+    pub(crate) manifest_version: String,\n+    pub(crate) date: String,\n+    pub(crate) pkg: BTreeMap<String, Package>,\n+    pub(crate) renames: BTreeMap<String, Rename>,\n+    pub(crate) profiles: BTreeMap<String, Vec<String>>,\n+}\n+\n+#[derive(Serialize)]\n+pub(crate) struct Package {\n+    pub(crate) version: String,\n+    pub(crate) git_commit_hash: Option<String>,\n+    pub(crate) target: BTreeMap<String, Target>,\n+}\n+\n+#[derive(Serialize)]\n+pub(crate) struct Rename {\n+    pub(crate) to: String,\n+}\n+\n+#[derive(Serialize, Default)]\n+pub(crate) struct Target {\n+    pub(crate) available: bool,\n+    pub(crate) url: Option<String>,\n+    pub(crate) hash: Option<String>,\n+    pub(crate) xz_url: Option<String>,\n+    pub(crate) xz_hash: Option<String>,\n+    pub(crate) components: Option<Vec<Component>>,\n+    pub(crate) extensions: Option<Vec<Component>>,\n+}\n+\n+impl Target {\n+    pub(crate) fn unavailable() -> Self {\n+        Self::default()\n+    }\n+}\n+\n+#[derive(Serialize)]\n+pub(crate) struct Component {\n+    pub(crate) pkg: String,\n+    pub(crate) target: String,\n+}\n+\n+impl Component {\n+    pub(crate) fn from_str(pkg: &str, target: &str) -> Self {\n+        Self { pkg: pkg.to_string(), target: target.to_string() }\n+    }\n+}"}]}