{"sha": "7d115c94205dd4b937d29c77d1704aa3f801869e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkMTE1Yzk0MjA1ZGQ0YjkzN2QyOWM3N2QxNzA0YWEzZjgwMTg2OWU=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-08-06T21:44:40Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-08-07T03:41:20Z"}, "message": "add an intrinsic for inbounds GEP", "tree": {"sha": "442ecaf695dbb0689805656b178a1c3046468f3b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/442ecaf695dbb0689805656b178a1c3046468f3b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d115c94205dd4b937d29c77d1704aa3f801869e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d115c94205dd4b937d29c77d1704aa3f801869e", "html_url": "https://github.com/rust-lang/rust/commit/7d115c94205dd4b937d29c77d1704aa3f801869e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d115c94205dd4b937d29c77d1704aa3f801869e/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f23fb19ee508515912e136c948a0242cc88a2d4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/f23fb19ee508515912e136c948a0242cc88a2d4e", "html_url": "https://github.com/rust-lang/rust/commit/f23fb19ee508515912e136c948a0242cc88a2d4e"}], "stats": {"total": 55, "additions": 53, "deletions": 2}, "files": [{"sha": "b1e600b9d7376f5466d53ba06a500a948fe8e90d", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7d115c94205dd4b937d29c77d1704aa3f801869e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d115c94205dd4b937d29c77d1704aa3f801869e/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=7d115c94205dd4b937d29c77d1704aa3f801869e", "patch": "@@ -888,6 +888,11 @@ pub fn trans_intrinsic(ccx: @mut CrateContext,\n             let offset = get_param(decl, first_real_arg + 1);\n             Ret(bcx, GEP(bcx, ptr, [offset]));\n         }\n+        \"offset_inbounds\" => {\n+            let ptr = get_param(decl, first_real_arg);\n+            let offset = get_param(decl, first_real_arg + 1);\n+            Ret(bcx, InBoundsGEP(bcx, ptr, [offset]));\n+        }\n         \"memcpy32\" => memcpy_intrinsic(bcx, \"llvm.memcpy.p0i8.p0i8.i32\", substs.tys[0], 32),\n         \"memcpy64\" => memcpy_intrinsic(bcx, \"llvm.memcpy.p0i8.p0i8.i64\", substs.tys[0], 64),\n         \"memmove32\" => memcpy_intrinsic(bcx, \"llvm.memmove.p0i8.p0i8.i32\", substs.tys[0], 32),"}, {"sha": "ad83286c8c1d75a60353ab2a36c2f248f0665f26", "filename": "src/librustc/middle/trans/type_use.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7d115c94205dd4b937d29c77d1704aa3f801869e/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d115c94205dd4b937d29c77d1704aa3f801869e/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=7d115c94205dd4b937d29c77d1704aa3f801869e", "patch": "@@ -148,7 +148,8 @@ pub fn type_uses_for(ccx: @mut CrateContext, fn_id: def_id, n_tps: uint)\n                     \"visit_tydesc\"  | \"forget\" | \"frame_address\" |\n                     \"morestack_addr\" => 0,\n \n-                    \"offset\" | \"memcpy32\" | \"memcpy64\" | \"memmove32\" | \"memmove64\" |\n+                    \"offset\" | \"offset_inbounds\" |\n+                    \"memcpy32\" | \"memcpy64\" | \"memmove32\" | \"memmove64\" |\n                     \"memset32\" | \"memset64\" => use_repr,\n \n                     \"sqrtf32\" | \"sqrtf64\" | \"powif32\" | \"powif64\" |"}, {"sha": "8623ee546d6603a0c6cb2ff52b7e31afb299a16e", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7d115c94205dd4b937d29c77d1704aa3f801869e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d115c94205dd4b937d29c77d1704aa3f801869e/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=7d115c94205dd4b937d29c77d1704aa3f801869e", "patch": "@@ -3481,6 +3481,20 @@ pub fn check_intrinsic_type(ccx: @mut CrateCtxt, it: @ast::foreign_item) {\n                    mutbl: ast::m_imm\n                }))\n             }\n+            \"offset_inbounds\" => {\n+              (1,\n+               ~[\n+                  ty::mk_ptr(tcx, ty::mt {\n+                      ty: param(ccx, 0),\n+                      mutbl: ast::m_imm\n+                  }),\n+                  ty::mk_int()\n+               ],\n+               ty::mk_ptr(tcx, ty::mt {\n+                   ty: param(ccx, 0),\n+                   mutbl: ast::m_imm\n+               }))\n+            }\n             \"memcpy32\" => {\n               (1,\n                ~["}, {"sha": "98fb132672c6e34d09de3c8868ca8123c15dc5bd", "filename": "src/libstd/ptr.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7d115c94205dd4b937d29c77d1704aa3f801869e/src%2Flibstd%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d115c94205dd4b937d29c77d1704aa3f801869e/src%2Flibstd%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fptr.rs?ref=7d115c94205dd4b937d29c77d1704aa3f801869e", "patch": "@@ -272,6 +272,8 @@ pub trait RawPtr<T> {\n     fn is_not_null(&self) -> bool;\n     unsafe fn to_option(&self) -> Option<&T>;\n     fn offset(&self, count: int) -> Self;\n+    #[cfg(not(stage0))]\n+    unsafe fn offset_inbounds(self, count: int) -> Self;\n }\n \n /// Extension methods for immutable pointers\n@@ -304,6 +306,14 @@ impl<T> RawPtr<T> for *T {\n     /// Calculates the offset from a pointer.\n     #[inline]\n     fn offset(&self, count: int) -> *T { offset(*self, count) }\n+\n+    /// Calculates the offset from a pointer. The offset *must* be in-bounds of\n+    /// the object, or one-byte-past-the-end.\n+    #[inline]\n+    #[cfg(not(stage0))]\n+    unsafe fn offset_inbounds(self, count: int) -> *T {\n+        intrinsics::offset_inbounds(self, count)\n+    }\n }\n \n /// Extension methods for mutable pointers\n@@ -336,6 +346,18 @@ impl<T> RawPtr<T> for *mut T {\n     /// Calculates the offset from a mutable pointer.\n     #[inline]\n     fn offset(&self, count: int) -> *mut T { mut_offset(*self, count) }\n+\n+    /// Calculates the offset from a pointer. The offset *must* be in-bounds of\n+    /// the object, or one-byte-past-the-end. An arithmetic overflow is also\n+    /// undefined behaviour.\n+    ///\n+    /// This method should be preferred over `offset` when the guarantee can be\n+    /// satisfied, to enable better optimization.\n+    #[inline]\n+    #[cfg(not(stage0))]\n+    unsafe fn offset_inbounds(self, count: int) -> *mut T {\n+        intrinsics::offset_inbounds(self as *T, count) as *mut T\n+    }\n }\n \n // Equality for pointers"}, {"sha": "c60edad3dbd5683e6ec69cae281376a950089a6c", "filename": "src/libstd/unstable/intrinsics.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7d115c94205dd4b937d29c77d1704aa3f801869e/src%2Flibstd%2Funstable%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d115c94205dd4b937d29c77d1704aa3f801869e/src%2Flibstd%2Funstable%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fintrinsics.rs?ref=7d115c94205dd4b937d29c77d1704aa3f801869e", "patch": "@@ -317,12 +317,21 @@ extern \"rust-intrinsic\" {\n     /// Get the address of the `__morestack` stack growth function.\n     pub fn morestack_addr() -> *();\n \n-    /// Adjust a pointer by an offset.\n+    /// Calculates the offset from a pointer.\n     ///\n     /// This is implemented as an intrinsic to avoid converting to and from an\n     /// integer, since the conversion would throw away aliasing information.\n     pub fn offset<T>(dst: *T, offset: int) -> *T;\n \n+    /// Calculates the offset from a pointer. The offset *must* be in-bounds of\n+    /// the object, or one-byte-past-the-end. An arithmetic overflow is also\n+    /// undefined behaviour.\n+    ///\n+    /// This intrinsic should be preferred over `offset` when the guarantee can\n+    /// be satisfied, to enable better optimization.\n+    #[cfg(not(stage0))]\n+    pub fn offset_inbounds<T>(dst: *T, offset: int) -> *T;\n+\n     /// Equivalent to the `llvm.memcpy.p0i8.0i8.i32` intrinsic, with a size of\n     /// `count` * `size_of::<T>()` and an alignment of `min_align_of::<T>()`\n     pub fn memcpy32<T>(dst: *mut T, src: *T, count: u32);"}]}