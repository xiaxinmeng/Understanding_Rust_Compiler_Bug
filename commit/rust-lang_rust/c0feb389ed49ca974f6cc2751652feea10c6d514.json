{"sha": "c0feb389ed49ca974f6cc2751652feea10c6d514", "node_id": "C_kwDOAAsO6NoAKGMwZmViMzg5ZWQ0OWNhOTc0ZjZjYzI3NTE2NTJmZWVhMTBjNmQ1MTQ", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-05-09T09:52:49Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-05-09T10:12:41Z"}, "message": "fix: Fix import insertion inserting after last comment in a file", "tree": {"sha": "2485f622b74fedb5c0762f91e1599605adca4eec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2485f622b74fedb5c0762f91e1599605adca4eec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0feb389ed49ca974f6cc2751652feea10c6d514", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0feb389ed49ca974f6cc2751652feea10c6d514", "html_url": "https://github.com/rust-lang/rust/commit/c0feb389ed49ca974f6cc2751652feea10c6d514", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0feb389ed49ca974f6cc2751652feea10c6d514/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d5bbec9b60010dd7389a084c56693baf6bda780", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d5bbec9b60010dd7389a084c56693baf6bda780", "html_url": "https://github.com/rust-lang/rust/commit/5d5bbec9b60010dd7389a084c56693baf6bda780"}], "stats": {"total": 32, "additions": 25, "deletions": 7}, "files": [{"sha": "66d0b2ee82c933d2c679149ee5fc5ec8f88b9758", "filename": "crates/ide-db/src/imports/insert_use.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c0feb389ed49ca974f6cc2751652feea10c6d514/crates%2Fide-db%2Fsrc%2Fimports%2Finsert_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0feb389ed49ca974f6cc2751652feea10c6d514/crates%2Fide-db%2Fsrc%2Fimports%2Finsert_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fimports%2Finsert_use.rs?ref=c0feb389ed49ca974f6cc2751652feea10c6d514", "patch": "@@ -8,7 +8,7 @@ use hir::Semantics;\n use syntax::{\n     algo,\n     ast::{self, make, AstNode, HasAttrs, HasModuleItem, HasVisibility, PathSegmentKind},\n-    ted, AstToken, Direction, NodeOrToken, SyntaxNode, SyntaxToken,\n+    ted, Direction, NodeOrToken, SyntaxKind, SyntaxNode,\n };\n \n use crate::{\n@@ -397,12 +397,16 @@ fn insert_use_(\n     }\n \n     // there are no imports in this file at all\n+    // so put the import after all inner module attributes and possible license header comments\n     if let Some(last_inner_element) = scope_syntax\n         .children_with_tokens()\n-        .filter(|child| match child {\n+        .take_while(|child| match child {\n             NodeOrToken::Node(node) => is_inner_attribute(node.clone()),\n-            NodeOrToken::Token(token) => is_comment(token.clone()),\n+            NodeOrToken::Token(token) => {\n+                [SyntaxKind::WHITESPACE, SyntaxKind::COMMENT].contains(&token.kind())\n+            }\n         })\n+        .filter(|child| child.as_token().map_or(true, |t| t.kind() != SyntaxKind::WHITESPACE))\n         .last()\n     {\n         cov_mark::hit!(insert_empty_inner_attr);\n@@ -439,7 +443,3 @@ fn insert_use_(\n fn is_inner_attribute(node: SyntaxNode) -> bool {\n     ast::Attr::cast(node).map(|attr| attr.kind()) == Some(ast::AttrKind::Inner)\n }\n-\n-fn is_comment(token: SyntaxToken) -> bool {\n-    ast::Comment::cast(token).is_some()\n-}"}, {"sha": "6569e4ed8c6acfb40b24df571c8bbb24b64e0ab3", "filename": "crates/ide-db/src/imports/insert_use/tests.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c0feb389ed49ca974f6cc2751652feea10c6d514/crates%2Fide-db%2Fsrc%2Fimports%2Finsert_use%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0feb389ed49ca974f6cc2751652feea10c6d514/crates%2Fide-db%2Fsrc%2Fimports%2Finsert_use%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fimports%2Finsert_use%2Ftests.rs?ref=c0feb389ed49ca974f6cc2751652feea10c6d514", "patch": "@@ -5,6 +5,24 @@ use test_utils::{assert_eq_text, CURSOR_MARKER};\n \n use super::*;\n \n+#[test]\n+fn trailing_comment_in_empty_file() {\n+    check(\n+        \"foo::bar\",\n+        r#\"\n+struct Struct;\n+// 0 = 1\n+\"#,\n+        r#\"\n+use foo::bar;\n+\n+struct Struct;\n+// 0 = 1\n+\"#,\n+        ImportGranularity::Crate,\n+    );\n+}\n+\n #[test]\n fn respects_cfg_attr_fn() {\n     check("}]}