{"sha": "21c5fd8b1b8f9536449325738baea1e48efdefe0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxYzVmZDhiMWI4Zjk1MzY0NDkzMjU3MzhiYWVhMWU0OGVmZGVmZTA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-01-14T13:20:33Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-01-14T13:24:03Z"}, "message": "Push resolver further up", "tree": {"sha": "36fc95b08d825eb55f6621f9ff6bf86164dae157", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36fc95b08d825eb55f6621f9ff6bf86164dae157"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21c5fd8b1b8f9536449325738baea1e48efdefe0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21c5fd8b1b8f9536449325738baea1e48efdefe0", "html_url": "https://github.com/rust-lang/rust/commit/21c5fd8b1b8f9536449325738baea1e48efdefe0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21c5fd8b1b8f9536449325738baea1e48efdefe0/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ec62ea5e686dcb6de5d3fcc413f32af9d1c9cb5", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ec62ea5e686dcb6de5d3fcc413f32af9d1c9cb5", "html_url": "https://github.com/rust-lang/rust/commit/7ec62ea5e686dcb6de5d3fcc413f32af9d1c9cb5"}], "stats": {"total": 87, "additions": 60, "deletions": 27}, "files": [{"sha": "5707a56960fd255e8751faa0476c01f1113a7ca5", "filename": "crates/ra_hir/src/source_analyzer.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/21c5fd8b1b8f9536449325738baea1e48efdefe0/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21c5fd8b1b8f9536449325738baea1e48efdefe0/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs?ref=21c5fd8b1b8f9536449325738baea1e48efdefe0", "patch": "@@ -358,10 +358,17 @@ impl SourceAnalyzer {\n         // FIXME check that?\n         // FIXME replace Unknown by bound vars here\n         let canonical = Canonical { value: ty.ty.value.clone(), num_vars: 0 };\n+\n+        let env = TraitEnvironment::lower(db, &self.resolver);\n+        let krate = self.resolver.krate()?;\n+        let traits_in_scope = self.resolver.traits_in_scope(db);\n+\n         method_resolution::iterate_method_candidates(\n             &canonical,\n             db,\n-            &self.resolver,\n+            env,\n+            krate,\n+            &traits_in_scope,\n             name,\n             method_resolution::LookupMode::MethodCall,\n             |ty, it| match it {\n@@ -382,10 +389,17 @@ impl SourceAnalyzer {\n         // FIXME check that?\n         // FIXME replace Unknown by bound vars here\n         let canonical = Canonical { value: ty.ty.value.clone(), num_vars: 0 };\n+\n+        let env = TraitEnvironment::lower(db, &self.resolver);\n+        let krate = self.resolver.krate()?;\n+        let traits_in_scope = self.resolver.traits_in_scope(db);\n+\n         method_resolution::iterate_method_candidates(\n             &canonical,\n             db,\n-            &self.resolver,\n+            env,\n+            krate,\n+            &traits_in_scope,\n             name,\n             method_resolution::LookupMode::Path,\n             |ty, it| callback(ty, it.into()),"}, {"sha": "d6a17e469d4636b4c9d0e1e8f7df416e51f20880", "filename": "crates/ra_hir_ty/src/infer/expr.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/21c5fd8b1b8f9536449325738baea1e48efdefe0/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21c5fd8b1b8f9536449325738baea1e48efdefe0/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=21c5fd8b1b8f9536449325738baea1e48efdefe0", "patch": "@@ -569,12 +569,19 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n     ) -> Ty {\n         let receiver_ty = self.infer_expr(receiver, &Expectation::none());\n         let canonicalized_receiver = self.canonicalizer().canonicalize_ty(receiver_ty.clone());\n-        let resolved = method_resolution::lookup_method(\n-            &canonicalized_receiver.value,\n-            self.db,\n-            method_name,\n-            &self.resolver,\n-        );\n+\n+        let traits_in_scope = self.resolver.traits_in_scope(self.db);\n+\n+        let resolved = self.resolver.krate().and_then(|krate| {\n+            method_resolution::lookup_method(\n+                &canonicalized_receiver.value,\n+                self.db,\n+                self.trait_env.clone(),\n+                krate,\n+                &traits_in_scope,\n+                method_name,\n+            )\n+        });\n         let (derefed_receiver_ty, method_ty, def_generics) = match resolved {\n             Some((ty, func)) => {\n                 let ty = canonicalized_receiver.decanonicalize_ty(ty);"}, {"sha": "2c1d4831d7e0332a844d780ed41e6f455a7b70f1", "filename": "crates/ra_hir_ty/src/infer/path.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/21c5fd8b1b8f9536449325738baea1e48efdefe0/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21c5fd8b1b8f9536449325738baea1e48efdefe0/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fpath.rs?ref=21c5fd8b1b8f9536449325738baea1e48efdefe0", "patch": "@@ -11,7 +11,7 @@ use hir_expand::name::Name;\n \n use crate::{db::HirDatabase, method_resolution, Substs, Ty, TypeWalk, ValueTyDefId};\n \n-use super::{ExprOrPatId, InferenceContext, TraitRef};\n+use super::{ExprOrPatId, InferenceContext, TraitEnvironment, TraitRef};\n \n impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n     pub(super) fn infer_path(\n@@ -193,11 +193,16 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         }\n \n         let canonical_ty = self.canonicalizer().canonicalize_ty(ty.clone());\n+        let env = TraitEnvironment::lower(self.db, &self.resolver);\n+        let krate = self.resolver.krate()?;\n+        let traits_in_scope = self.resolver.traits_in_scope(self.db);\n \n         method_resolution::iterate_method_candidates(\n             &canonical_ty.value,\n             self.db,\n-            &self.resolver.clone(),\n+            env,\n+            krate,\n+            &traits_in_scope,\n             Some(name),\n             method_resolution::LookupMode::Path,\n             move |_ty, item| {"}, {"sha": "5bacbbd7c7d718e8f804741dbb93aaeb17b68a12", "filename": "crates/ra_hir_ty/src/method_resolution.rs", "status": "modified", "additions": 24, "deletions": 17, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/21c5fd8b1b8f9536449325738baea1e48efdefe0/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21c5fd8b1b8f9536449325738baea1e48efdefe0/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs?ref=21c5fd8b1b8f9536449325738baea1e48efdefe0", "patch": "@@ -6,8 +6,8 @@ use std::sync::Arc;\n \n use arrayvec::ArrayVec;\n use hir_def::{\n-    lang_item::LangItemTarget, resolver::Resolver, type_ref::Mutability, AssocContainerId,\n-    AssocItemId, FunctionId, HasModule, ImplId, Lookup, TraitId,\n+    lang_item::LangItemTarget, type_ref::Mutability, AssocContainerId, AssocItemId, FunctionId,\n+    HasModule, ImplId, Lookup, TraitId,\n };\n use hir_expand::name::Name;\n use ra_db::CrateId;\n@@ -144,14 +144,24 @@ impl Ty {\n pub(crate) fn lookup_method(\n     ty: &Canonical<Ty>,\n     db: &impl HirDatabase,\n+    env: Arc<TraitEnvironment>,\n+    krate: CrateId,\n+    traits_in_scope: &FxHashSet<TraitId>,\n     name: &Name,\n-    resolver: &Resolver,\n ) -> Option<(Ty, FunctionId)> {\n-    iterate_method_candidates(ty, db, resolver, Some(name), LookupMode::MethodCall, |ty, f| match f\n-    {\n-        AssocItemId::FunctionId(f) => Some((ty.clone(), f)),\n-        _ => None,\n-    })\n+    iterate_method_candidates(\n+        ty,\n+        db,\n+        env,\n+        krate,\n+        &traits_in_scope,\n+        Some(name),\n+        LookupMode::MethodCall,\n+        |ty, f| match f {\n+            AssocItemId::FunctionId(f) => Some((ty.clone(), f)),\n+            _ => None,\n+        },\n+    )\n }\n \n /// Whether we're looking up a dotted method call (like `v.len()`) or a path\n@@ -172,14 +182,13 @@ pub enum LookupMode {\n pub fn iterate_method_candidates<T>(\n     ty: &Canonical<Ty>,\n     db: &impl HirDatabase,\n-    resolver: &Resolver,\n+    env: Arc<TraitEnvironment>,\n+    krate: CrateId,\n+    traits_in_scope: &FxHashSet<TraitId>,\n     name: Option<&Name>,\n     mode: LookupMode,\n     mut callback: impl FnMut(&Ty, AssocItemId) -> Option<T>,\n ) -> Option<T> {\n-    let traits_in_scope = resolver.traits_in_scope(db);\n-    let krate = resolver.krate()?;\n-    let env = TraitEnvironment::lower(db, resolver);\n     match mode {\n         LookupMode::MethodCall => {\n             // For method calls, rust first does any number of autoderef, and then one\n@@ -190,9 +199,7 @@ pub fn iterate_method_candidates<T>(\n             // Also note that when we've got a receiver like &S, even if the method we\n             // find in the end takes &self, we still do the autoderef step (just as\n             // rustc does an autoderef and then autoref again).\n-            let environment = TraitEnvironment::lower(db, resolver);\n-            let ty = InEnvironment { value: ty.clone(), environment };\n-            let krate = resolver.krate()?;\n+            let ty = InEnvironment { value: ty.clone(), environment: env.clone() };\n \n             // We have to be careful about the order we're looking at candidates\n             // in here. Consider the case where we're resolving `x.clone()`\n@@ -214,7 +221,7 @@ pub fn iterate_method_candidates<T>(\n                     db,\n                     env.clone(),\n                     krate,\n-                    &traits_in_scope,\n+                    traits_in_scope,\n                     name,\n                     &mut callback,\n                 ) {\n@@ -230,7 +237,7 @@ pub fn iterate_method_candidates<T>(\n                 db,\n                 env,\n                 krate,\n-                &traits_in_scope,\n+                traits_in_scope,\n                 name,\n                 &mut callback,\n             )"}]}