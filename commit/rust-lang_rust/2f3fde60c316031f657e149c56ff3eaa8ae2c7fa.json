{"sha": "2f3fde60c316031f657e149c56ff3eaa8ae2c7fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmM2ZkZTYwYzMxNjAzMWY2NTdlMTQ5YzU2ZmYzZWFhOGFlMmM3ZmE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-08-09T20:47:00Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-08-09T20:49:41Z"}, "message": "Implement an `address_insignificant` attribute\n\nThis can be applied to statics and it will indicate that LLVM will attempt to\nmerge the constant in .data with other statics.\n\nI have preliminarily applied this to all of the statics generated by the new\n`ifmt!` syntax extension. I compiled a file with 1000 calls to `ifmt!` and a\nseparate file with 1000 calls to `fmt!` to compare the sizes, and the results\nwere:\n\nfmt           310k\nifmt (before) 529k\nifmt (after)  202k\n\nThis now means that ifmt! is both faster and smaller than fmt!, yay!", "tree": {"sha": "975c1c1fff6594b5ff56a83f5e13dbeae215f571", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/975c1c1fff6594b5ff56a83f5e13dbeae215f571"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f3fde60c316031f657e149c56ff3eaa8ae2c7fa", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f3fde60c316031f657e149c56ff3eaa8ae2c7fa", "html_url": "https://github.com/rust-lang/rust/commit/2f3fde60c316031f657e149c56ff3eaa8ae2c7fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f3fde60c316031f657e149c56ff3eaa8ae2c7fa/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74efdf6197aaee39bd14f8d97b75dbba08f1d32e", "url": "https://api.github.com/repos/rust-lang/rust/commits/74efdf6197aaee39bd14f8d97b75dbba08f1d32e", "html_url": "https://github.com/rust-lang/rust/commit/74efdf6197aaee39bd14f8d97b75dbba08f1d32e"}], "stats": {"total": 63, "additions": 47, "deletions": 16}, "files": [{"sha": "77c767333a01dde35507b29cb20d866d7bf118e9", "filename": "src/librustc/lib/llvm.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2f3fde60c316031f657e149c56ff3eaa8ae2c7fa/src%2Flibrustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f3fde60c316031f657e149c56ff3eaa8ae2c7fa/src%2Flibrustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvm.rs?ref=2f3fde60c316031f657e149c56ff3eaa8ae2c7fa", "patch": "@@ -2080,6 +2080,9 @@ pub mod llvm {\n                                             Elements: ValueRef,\n                                             RunTimeLang: c_uint)\n                                             -> ValueRef;\n+\n+        #[fast_ffi]\n+        pub fn LLVMSetUnnamedAddr(GlobalVar: ValueRef, UnnamedAddr: Bool);\n     }\n }\n \n@@ -2099,6 +2102,12 @@ pub fn SetLinkage(Global: ValueRef, Link: Linkage) {\n     }\n }\n \n+pub fn SetUnnamedAddr(Global: ValueRef, Unnamed: bool) {\n+    unsafe {\n+        llvm::LLVMSetUnnamedAddr(Global, Unnamed as Bool);\n+    }\n+}\n+\n pub fn ConstICmp(Pred: IntPredicate, V1: ValueRef, V2: ValueRef) -> ValueRef {\n     unsafe {\n         llvm::LLVMConstICmp(Pred as c_ushort, V1, V2)"}, {"sha": "9c2dc1699c58749232a7143cd710e8b95f123575", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 21, "deletions": 13, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/2f3fde60c316031f657e149c56ff3eaa8ae2c7fa/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f3fde60c316031f657e149c56ff3eaa8ae2c7fa/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=2f3fde60c316031f657e149c56ff3eaa8ae2c7fa", "patch": "@@ -2159,19 +2159,18 @@ pub fn trans_item(ccx: @mut CrateContext, item: &ast::item) {\n       }\n       ast::item_static(_, m, expr) => {\n           consts::trans_const(ccx, m, item.id);\n-          // Do static_assert checking. It can't really be done much earlier because we need to get\n-          // the value of the bool out of LLVM\n-          for attr in item.attrs.iter() {\n-              if \"static_assert\" == attr.name() {\n-                  if m == ast::m_mutbl {\n-                      ccx.sess.span_fatal(expr.span,\n-                                          \"cannot have static_assert on a mutable static\");\n-                  }\n-                  let v = ccx.const_values.get_copy(&item.id);\n-                  unsafe {\n-                      if !(llvm::LLVMConstIntGetZExtValue(v) as bool) {\n-                          ccx.sess.span_fatal(expr.span, \"static assertion failed\");\n-                      }\n+          // Do static_assert checking. It can't really be done much earlier\n+          // because we need to get the value of the bool out of LLVM\n+          if attr::contains_name(item.attrs, \"static_assert\") {\n+              if m == ast::m_mutbl {\n+                  ccx.sess.span_fatal(expr.span,\n+                                      \"cannot have static_assert on a mutable \\\n+                                       static\");\n+              }\n+              let v = ccx.const_values.get_copy(&item.id);\n+              unsafe {\n+                  if !(llvm::LLVMConstIntGetZExtValue(v) as bool) {\n+                      ccx.sess.span_fatal(expr.span, \"static assertion failed\");\n                   }\n               }\n           }\n@@ -2432,6 +2431,15 @@ pub fn get_item_val(ccx: @mut CrateContext, id: ast::NodeId) -> ValueRef {\n                                     llvm::LLVMAddGlobal(ccx.llmod, llty, buf)\n                                 };\n \n+                                // Apply the `unnamed_addr` attribute if\n+                                // requested\n+                                if attr::contains_name(i.attrs,\n+                                                       \"address_insignificant\"){\n+                                    lib::llvm::SetUnnamedAddr(g, true);\n+                                    lib::llvm::SetLinkage(g,\n+                                        lib::llvm::InternalLinkage);\n+                                }\n+\n                                 ccx.item_symbols.insert(i.id, sym);\n                                 g\n                             }"}, {"sha": "35fd14568d6b12aa7f393ce559daaa57b9c1ff72", "filename": "src/libsyntax/ext/ifmt.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2f3fde60c316031f657e149c56ff3eaa8ae2c7fa/src%2Flibsyntax%2Fext%2Fifmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f3fde60c316031f657e149c56ff3eaa8ae2c7fa/src%2Flibsyntax%2Fext%2Fifmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fifmt.rs?ref=2f3fde60c316031f657e149c56ff3eaa8ae2c7fa", "patch": "@@ -429,7 +429,12 @@ impl Context {\n             let st = ast::item_static(ty, ast::m_imm, method);\n             let static_name = self.ecx.ident_of(fmt!(\"__static_method_%u\",\n                                                      self.method_statics.len()));\n-            let item = self.ecx.item(sp, static_name, ~[], st);\n+            // Flag these statics as `address_insignificant` so LLVM can\n+            // merge duplicate globals as much as possible (which we're\n+            // generating a whole lot of).\n+            let unnamed = self.ecx.meta_word(self.fmtsp, @\"address_insignificant\");\n+            let unnamed = self.ecx.attribute(self.fmtsp, unnamed);\n+            let item = self.ecx.item(sp, static_name, ~[unnamed], st);\n             self.method_statics.push(item);\n             self.ecx.expr_ident(sp, static_name)\n         };\n@@ -550,7 +555,10 @@ impl Context {\n         let ty = self.ecx.ty(self.fmtsp, ty);\n         let st = ast::item_static(ty, ast::m_imm, fmt);\n         let static_name = self.ecx.ident_of(\"__static_fmtstr\");\n-        let item = self.ecx.item(self.fmtsp, static_name, ~[], st);\n+        // see above comment for `address_insignificant` and why we do it\n+        let unnamed = self.ecx.meta_word(self.fmtsp, @\"address_insignificant\");\n+        let unnamed = self.ecx.attribute(self.fmtsp, unnamed);\n+        let item = self.ecx.item(self.fmtsp, static_name, ~[unnamed], st);\n         let decl = respan(self.fmtsp, ast::decl_item(item));\n         lets.push(@respan(self.fmtsp, ast::stmt_decl(@decl, self.ecx.next_id())));\n \n@@ -613,6 +621,7 @@ impl Context {\n         if ty == Unknown {\n             ty = Known(@\"?\");\n         }\n+\n         let argptr = self.ecx.expr_addr_of(sp, self.ecx.expr_ident(sp, ident));\n         match ty {\n             Known(tyname) => {\n@@ -685,7 +694,7 @@ pub fn expand_syntax_ext(ecx: @ExtCtxt, sp: span,\n     };\n     cx.fmtsp = efmt.span;\n     let fmt = expr_to_str(ecx, efmt,\n-                          ~\"first argument to ifmt! must be a string literal.\");\n+                          \"first argument to ifmt! must be a string literal.\");\n \n     let mut err = false;\n     do parse::parse_error::cond.trap(|m| {"}, {"sha": "db353036336c266f0711812212dc12f7614b3b94", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f3fde60c316031f657e149c56ff3eaa8ae2c7fa/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/2f3fde60c316031f657e149c56ff3eaa8ae2c7fa/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=2f3fde60c316031f657e149c56ff3eaa8ae2c7fa", "patch": "@@ -833,3 +833,7 @@ extern \"C\" LLVMValueRef LLVMDIBuilderCreateUnionType(\n         unwrapDI<DIArray>(Elements),\n         RunTimeLang));\n }\n+\n+extern \"C\" void LLVMSetUnnamedAddr(LLVMValueRef Value, LLVMBool Unnamed) {\n+    unwrap<GlobalValue>(Value)->setUnnamedAddr(Unnamed);\n+}"}, {"sha": "a2af7a18b4f8aca7b715fd4a6be00b30d5620cdd", "filename": "src/rustllvm/rustllvm.def.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f3fde60c316031f657e149c56ff3eaa8ae2c7fa/src%2Frustllvm%2Frustllvm.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/2f3fde60c316031f657e149c56ff3eaa8ae2c7fa/src%2Frustllvm%2Frustllvm.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2Frustllvm.def.in?ref=2f3fde60c316031f657e149c56ff3eaa8ae2c7fa", "patch": "@@ -613,3 +613,4 @@ LLVMDIBuilderInsertDeclareBefore\n LLVMDIBuilderCreateEnumerator\n LLVMDIBuilderCreateEnumerationType\n LLVMDIBuilderCreateUnionType\n+LLVMSetUnnamedAddr"}]}