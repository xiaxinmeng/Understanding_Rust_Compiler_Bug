{"sha": "e4f5b15b8832334eca2c0bd3929eb3969f1d166d", "node_id": "C_kwDOAAsO6NoAKGU0ZjViMTViODgzMjMzNGVjYTJjMGJkMzkyOWViMzk2OWYxZDE2NmQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-08T10:41:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-08T10:41:10Z"}, "message": "Auto merge of #95798 - Dylan-DPC:rollup-51hx1wl, r=Dylan-DPC\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #95102 (Add known-bug for #95034)\n - #95579 (Add `<[[T; N]]>::flatten{_mut}`)\n - #95634 (Mailmap update)\n - #95705 (Promote x86_64-unknown-none target to Tier 2 and distribute build artifacts)\n - #95761 (Kickstart the inner usage of `macro_metavar_expr`)\n - #95782 (Windows: Increase a pipe's buffer capacity to 64kb)\n - #95791 (hide an #[allow] directive from the Arc::new_cyclic doc example)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "9b5684d1a1da8238910873984b75fa03e1bf0c4a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b5684d1a1da8238910873984b75fa03e1bf0c4a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4f5b15b8832334eca2c0bd3929eb3969f1d166d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4f5b15b8832334eca2c0bd3929eb3969f1d166d", "html_url": "https://github.com/rust-lang/rust/commit/e4f5b15b8832334eca2c0bd3929eb3969f1d166d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4f5b15b8832334eca2c0bd3929eb3969f1d166d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a4b9a85634c17a60e8802307510c300a35a4b9b", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a4b9a85634c17a60e8802307510c300a35a4b9b", "html_url": "https://github.com/rust-lang/rust/commit/1a4b9a85634c17a60e8802307510c300a35a4b9b"}, {"sha": "7b285d09e9e4ccf8273cc03dba28e8a428e6084e", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b285d09e9e4ccf8273cc03dba28e8a428e6084e", "html_url": "https://github.com/rust-lang/rust/commit/7b285d09e9e4ccf8273cc03dba28e8a428e6084e"}], "stats": {"total": 679, "additions": 544, "deletions": 135}, "files": [{"sha": "30c3212810cf90baa82da3c6c93d5b0c939b3e81", "filename": ".mailmap", "status": "modified", "additions": 246, "deletions": 4, "changes": 250, "blob_url": "https://github.com/rust-lang/rust/blob/e4f5b15b8832334eca2c0bd3929eb3969f1d166d/.mailmap", "raw_url": "https://github.com/rust-lang/rust/raw/e4f5b15b8832334eca2c0bd3929eb3969f1d166d/.mailmap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.mailmap?ref=e4f5b15b8832334eca2c0bd3929eb3969f1d166d", "patch": "@@ -7,51 +7,98 @@\n \n Aaron Todd <github@opprobrio.us>\n Abhishek Chanda <abhishek.becs@gmail.com> Abhishek Chanda <abhishek@cloudscaling.com>\n+Abhijeet Bhagat <abhijeet.bhagat@gmx.com>\n+Abroskin Alexander <arkweid@evilmartians.com>\n Adolfo Ochagav\u00eda <aochagavia92@gmail.com>\n+Adrian Heine n\u00e9 Lang <mail@adrianheine.de>\n Adrien T\u00e9tar <adri-from-59@hotmail.fr>\n Ahmed Charles <ahmedcharles@gmail.com> <acharles@outlook.com>\n+Alan Egerton <eggyal@gmail.com>\n+Alan Stoate <alan.stoate@gmail.com>\n+Alessandro Decina <alessandro.d@gmail.com>\n Alex Burka <durka42+github@gmail.com> Alex Burka <aburka@seas.upenn.edu>\n+Alex Hansen <ahansen2@trinity.edu>\n Alex Lyon <arcterus@mail.com> <Arcterus@mail.com>\n Alex Newman <posix4e@gmail.com> Alex HotShot Newman <posix4e@gmail.com>\n Alex R\u00f8nne Petersen <alex@lycus.org>\n+Alex Vlasov <alex.m.vlasov@gmail.com>\n+Alex von Gluck IV <kallisti5@unixzen.com>\n Alexander Light <allight@cs.brown.edu> Alexander Light <scialexlight@gmail.com>\n+Alexander Ronald Altman <alexanderaltman@me.com>\n+Alexandre Martin <martin.alex32@hotmail.fr>\n Alexis Beingessner <a.beingessner@gmail.com>\n Alfie John <alfie@alfie.wtf> Alfie John <alfiej@fastmail.fm>\n+Amos Onn <amosonn@gmail.com>\n+Ana-Maria Mihalache <mihalacheana.maria@yahoo.com>\n Anatoly Ikorsky <aikorsky@gmail.com>\n Andre Bogus <bogusandre@gmail.com>\n+Andrea Ciliberti <meziu210@icloud.com>\n Andreas Gal <gal@mozilla.com> <andreas.gal@gmail.com>\n+Andreas Jonson <andjo403@users.noreply.github.com>\n+Andrew Gauger <andygauge@gmail.com>\n Andrew Kuchev <0coming.soon@gmail.com> Andrew <0coming.soon@gmail.com>\n+Andrew Lamb <andrew@nerdnetworks.org>\n Andrew Poelstra <asp11@sfu.ca> <apoelstra@wpsoftware.net>\n+Anhad Singh <andypythonappdeveloper@gmail.com>\n+Antoine Plaskowski <antoine.plaskowski@epitech.eu>\n Anton L\u00f6fgren <anton.lofgren@gmail.com> <alofgren@op5.com>\n+Araam Borhanian <avborhanian@gmail.com>\n+Araam Borhanian <avborhanian@gmail.com> <dobbybabee@gmail.com>\n Areski Belaid <areski@gmail.com> areski <areski@gmail.com>\n Ariel Ben-Yehuda <arielb1@mail.tau.ac.il> Ariel Ben-Yehuda <ariel.byd@gmail.com>\n Ariel Ben-Yehuda <arielb1@mail.tau.ac.il> arielb1 <arielb1@mail.tau.ac.il>\n+Artem Chernyak <artemchernyak@gmail.com>\n+Arthur Cohen <arthur.cohen@epita.fr>\n+Arthur Silva <arthurprs@gmail.com>\n+Arthur Woimb\u00e9e <arthur.woimbee@gmail.com>\n+Artyom Pavlov <newpavlov@gmail.com>\n Austin Seipp <mad.one@gmail.com> <as@hacks.yi.org>\n+Ayaz Hafiz <ayaz.hafiz.1@gmail.com>\n Aydin Kim <ladinjin@hanmail.net> aydin.kim <aydin.kim@samsung.com>\n+Ayush Mishra <ayushmishra2005@gmail.com>\n+asrar <aszenz@gmail.com>\n+BaoshanPang <pangbw@gmail.com>\n Barosl Lee <vcs@barosl.com> Barosl LEE <github@barosl.com>\n+Bastian Kersting <bastian@cmbt.de>\n+Bastien Orivel <eijebong@bananium.fr>\n Ben Alpert <ben@benalpert.com> <spicyjalapeno@gmail.com>\n-Ben Sago <ogham@users.noreply.github.com> Ben S <ogham@bsago.me>\n-Ben Sago <ogham@users.noreply.github.com> Ben S <ogham@users.noreply.github.com>\n+Ben Lewis <benlewisj@gmail.com>\n+Ben Sago <ogham@users.noreply.github.com>\n+Ben Sago <ogham@users.noreply.github.com> <ogham@bsago.me>\n+Ben Striegel <ben.striegel@gmail.com>\n Benjamin Jackman <ben@jackman.biz>\n+Beno\u00eet Cortier <benoit.cortier@fried-world.eu>\n Bheesham Persaud <bheesham123@hotmail.com> Bheesham Persaud <bheesham.persaud@live.ca>\n Bj\u00f6rn Steinbrink <bsteinbr@gmail.com> <B.Steinbrink@gmx.de>\n blake2-ppc <ulrik.sverdrup@gmail.com> <blake2-ppc>\n+boolean_coercion <booleancoercion@gmail.com>\n Boris Egorov <jightuse@gmail.com> <egorov@linux.com>\n+Braden Nelson <moonheart08@users.noreply.github.com>\n Brandon Sanderson <singingboyo@gmail.com> Brandon Sanderson <singingboyo@hotmail.com>\n Brett Cannon <brett@python.org> Brett Cannon <brettcannon@users.noreply.github.com>\n Brian Anderson <banderson@mozilla.com> <andersrb@gmail.com>\n Brian Anderson <banderson@mozilla.com> <banderson@mozilla.org>\n+Brian Bowman <seeker14491@gmail.com>\n+Brian Cain <brian.cain@gmail.com>\n Brian Dawn <brian.t.dawn@gmail.com>\n Brian Leibig <brian@brianleibig.com> Brian Leibig <brian.leibig@gmail.com>\n+Caleb Cartwright <caleb.cartwright@outlook.com>\n+Caleb Jones <code@calebjones.net>\n Noah Lev <camelidcamel@gmail.com>\n Noah Lev <camelidcamel@gmail.com> <37223377+camelid@users.noreply.github.com>\n+cameron1024 <cameron.studdstreet@gmail.com>\n+Camille Gillot <gillot.camille@gmail.com>\n Carl-Anton Ingmarsson <mail@carlanton.se> <ca.ingmarsson@gmail.com>\n+Carlo Teubner <carlo.teubner@gmail.com>\n Carol (Nichols || Goulding) <carol.nichols@gmail.com> <193874+carols10cents@users.noreply.github.com>\n Carol (Nichols || Goulding) <carol.nichols@gmail.com> <carol.nichols@gmail.com>\n Carol (Nichols || Goulding) <carol.nichols@gmail.com> <cnichols@thinkthroughmath.com>\n Carol Willing <carolcode@willingconsulting.com>\n+Chandler Deng <chandde@microsoft.com>\n Charles Lew <crlf0710@gmail.com> CrLF0710 <crlf0710@gmail.com>\n Chris C Cerami <chrisccerami@users.noreply.github.com> Chris C Cerami <chrisccerami@gmail.com>\n+Chris Gregory <czipperz@gmail.com>\n+Chris Pardy <chrispardy36@gmail.com>\n Chris Pressey <cpressey@gmail.com>\n Chris Thorn <chris@thorn.co> Chris Thorn <thorn@thoughtbot.com>\n Chris Vittal <christopher.vittal@gmail.com> Christopher Vittal <christopher.vittal@gmail.com>\n@@ -62,76 +109,136 @@ Christian Poveda <git@christianpoveda.xyz> <christianpoveda@protonmail.com>\n Christian Poveda <git@christianpoveda.xyz> <cn.poveda.ruiz@gmail.com>\n Christian Poveda <git@christianpoveda.xyz> <z1mvader@protonmail.com>\n Christian Poveda <git@christianpoveda.xyz> <cpovedar@fnal.gov>\n+Christian Vallentin <vallentinsource@gmail.com>\n+Christoffer Buchholz <chris@chrisbuchholz.me>\n+Christopher Durham <cad97@cad97.com>\n Clark Gaebel <cg.wowus.cg@gmail.com> <cgaebel@mozilla.com>\n+Clement Miao <clementmiao@gmail.com>\n+Cl\u00e9ment Renault <renault.cle@gmail.com>\n+Cliff Dyer <jcd@sdf.org>\n Clinton Ryan <clint.ryan3@gmail.com>\n Corey Richardson <corey@octayn.net> Elaine \"See More\" Nemo <corey@octayn.net>\n+Crazycolorz5 <Crazycolorz5@gmail.com>\n+csmoe <35686186+csmoe@users.noreply.github.com>\n Cyryl P\u0142otnicki <cyplo@cyplo.net>\n Damien Schoof <damien.schoof@gmail.com>\n+Dan Robertson <danlrobertson89@gmail.com>\n+Daniel Campoverde <alx741@riseup.net>\n Daniel J Rollins <drollins@financialforce.com>\n+Daniel Mueller <deso@posteo.net>\n Daniel Ramos <dan@daramos.com>\n+Daniele D'Orazio <d.dorazio96@gmail.com>\n+Dante Broggi <34220985+Dante-Broggi@users.noreply.github.com>\n+David Carlier <devnexen@gmail.com>\n David Klein <david.klein@baesystemsdetica.com>\n David Manescu <david.manescu@gmail.com> <dman2626@uni.sydney.edu.au>\n David Ross <daboross@daboross.net>\n David Wood <david@davidtw.co> <david.wood@huawei.com>\n+Deadbeef <ent3rm4n@gmail.com>\n Deadbeef <ent3rm4n@gmail.com> <fee1-dead-beef@protonmail.com>\n Derek Chiang <derekchiang93@gmail.com> Derek Chiang (Enchi Jiang) <derekchiang93@gmail.com>\n+DeveloperC <DeveloperC@protonmail.com>\n+Devin Ragotzy <devin.ragotzy@gmail.com>\n+Dharma Saputra Wijaya <dswijj@gmail.com>\n Diggory Hardy <diggory.hardy@gmail.com> Diggory Hardy <github@dhardy.name>\n+Dileep Bapat <dileepbapat@gmail.com>\n Donough Liu <ldm2993593805@163.com> <donoughliu@gmail.com>\n Donough Liu <ldm2993593805@163.com> DingMing Liu <liudingming@bupt.edu.cn>\n Dustin Bensing <dustin.bensing@googlemail.com>\n+DutchGhost <kasper199914@gmail.com>\n Dylan Braithwaite <dylanbraithwaite1@gmail.com> <mail@dylanb.me>\n+Dylan DPC <dylan.dpc@gmail.com>\n+Dylan MacKenzie <ecstaticmorse@gmail.com>\n Dzmitry Malyshau <kvarkus@gmail.com>\n E. Dunham <edunham@mozilla.com> edunham <edunham@mozilla.com>\n+Ed Barnard <eabarnard@gmail.com>\n Eduard-Mihai Burtescu <edy.burt@gmail.com>\n Eduardo Bautista <me@eduardobautista.com> <=>\n Eduardo Bautista <me@eduardobautista.com> <mail@eduardobautista.com>\n+Eduardo Broto <ebroto@tutanota.com>\n Elliott Slaughter <elliottslaughter@gmail.com> <eslaughter@mozilla.com>\n Elly Fong-Jones <elly@leptoquark.net>\n Eric Holk <eric.holk@gmail.com> <eholk@cs.indiana.edu>\n Eric Holk <eric.holk@gmail.com> <eholk@mozilla.com>\n Eric Holmes <eric@ejholmes.net>\n Eric Reed <ecreed@cs.washington.edu> <ereed@mozilla.com>\n Erick Tryzelaar <erick.tryzelaar@gmail.com> <etryzelaar@iqt.org>\n+Erik Desjardins <erikdesjardins@users.noreply.github.com>\n+Erik Jensen <erikjensen@rkjnsn.net>\n+Erin Power <xampprocky@gmail.com>\n Erin Power <xampprocky@gmail.com> <theaaronepower@gmail.com>\n Erin Power <xampprocky@gmail.com> <Aaronepower@users.noreply.github.com>\n+Esteban K\u00fcber <esteban@kuber.com.ar>\n Esteban K\u00fcber <esteban@kuber.com.ar> <esteban@commure.com>\n Esteban K\u00fcber <esteban@kuber.com.ar> <estebank@users.noreply.github.com>\n Esteban K\u00fcber <esteban@kuber.com.ar> <github@kuber.com.ar>\n+Ethan Dagner <napen123@gmail.com>\n Evgeny Sologubov\n+F001 <changchun.fan@qq.com>\n+Fabian K\u00f6ssel <fkjogu@users.noreply.github.com>\n Falco Hirschenberger <falco.hirschenberger@gmail.com> <hirschen@itwm.fhg.de>\n Felix S. Klock II <pnkfelix@pnkfx.org> Felix S Klock II <pnkfelix@pnkfx.org>\n+Fe\u0301lix Saparelli <felix@passcod.name>\n Flaper Fesp <flaper87@gmail.com>\n+Florian Berger <fbergr@gmail.com>\n Florian Wilkens <mrfloya_github@outlook.com> Florian Wilkens <floya@live.de>\n+Franc\u0327ois Mockers <mockersf@gmail.com>\n Frank Steffahn <fdsteffahn@gmail.com> <frank.steffahn@stu.uni-kiel.de>\n+Fridtjof Stoldt <xFrednet@gmail.com>\n+fukatani <nannyakannya@gmail.com>\n+Fuqiao Xue <xfq.free@gmail.com>\n Gareth Daniel Smith <garethdanielsmith@gmail.com> gareth <gareth@gareth-N56VM.(none)>\n Gareth Daniel Smith <garethdanielsmith@gmail.com> Gareth Smith <garethdanielsmith@gmail.com>\n+Gauri Kholkar <f2013002@goa.bits-pilani.ac.in>\n Georges Dubus <georges.dubus@gmail.com> <georges.dubus@compiletoi.net>\n+Giles Cope <gilescope@gmail.com>\n+Glen De Cauwsemaecker <decauwsemaecker.glen@gmail.com>\n Graham Fawcett <graham.fawcett@gmail.com> Graham Fawcett <fawcett@uwindsor.ca>\n Graydon Hoare <graydon@pobox.com> Graydon Hoare <graydon@mozilla.com>\n+Greg V <greg@unrelenting.technology>\n+Gregor Peach <gregorpeach@gmail.com>\n+Grzegorz Bartoszek <grzegorz.bartoszek@thaumatec.com>\n+Guanqun Lu <guanqun.lu@gmail.com>\n Guillaume Gomez <guillaume1.gomez@gmail.com>\n Guillaume Gomez <guillaume1.gomez@gmail.com> ggomez <ggomez@ggo.ifr.lan>\n Guillaume Gomez <guillaume1.gomez@gmail.com> Guillaume Gomez <ggomez@ggo.ifr.lan>\n Guillaume Gomez <guillaume1.gomez@gmail.com> Guillaume Gomez <guillaume.gomez@huawei.com>\n+hamidreza kalbasi <hamidrezakalbasi@protonmail.com>\n Hanna Kruppe <hanna.kruppe@gmail.com> <robin.kruppe@gmail.com>\n Heather <heather@cynede.net> <Cynede@Gentoo.org>\n Heather <heather@cynede.net> <Heather@cynede.net>\n Herman J. Radtke III <herman@hermanradtke.com> Herman J. Radtke III <hermanradtke@gmail.com>\n Hirochika Matsumoto <git@hkmatsumoto.com> <matsujika@gmail.com>\n+Hrvoje Nik\u0161i\u0107 <hniksic@gmail.com>\n+Hsiang-Cheng Yang <rick68@users.noreply.github.com>\n Ian Jackson <ijackson@chiark.greenend.org.uk> <ian.jackson@citrix.com>\n Ian Jackson <ijackson@chiark.greenend.org.uk> <ijackson+github@slimy.greenend.org.uk>\n Ian Jackson <ijackson@chiark.greenend.org.uk> <iwj@xenproject.org>\n+Ibraheem Ahmed <ibrah1440@gmail.com>\n Ilyong Cho <ilyoan@gmail.com>\n inquisitivecrystal <22333129+inquisitivecrystal@users.noreply.github.com>\n+Irina Popa <irinagpopa@gmail.com>\n Ivan Ivaschenko <defuz.net@gmail.com>\n+ivan tkachenko <me@ratijas.tk>\n J. J. Weber <jjweber@gmail.com>\n+Jack Huey <jack.huey@umassmed.edu>\n+Jacob <jacob.macritchie@gmail.com>\n+Jacob Greenfield <xales@naveria.com>\n Jacob Pratt <jacob@jhpratt.dev> <the.z.cuber@gmail.com>\n+Jake Vossen <jake@vossen.dev>\n+Jakob Degen <jakob@degen.com>\n+Jakob Lautrup Nysom <jako3047@gmail.com>\n+Jakub Adam Wieczorek <jakub.adam.wieczorek@gmail.com>\n Jakub Adam Wieczorek <jakub.adam.wieczorek@gmail.com> <jakub.bukaj@yahoo.com>\n Jakub Adam Wieczorek <jakub.adam.wieczorek@gmail.com> <jakub@jakub.cc>\n Jakub Adam Wieczorek <jakub.adam.wieczorek@gmail.com> <jakubw@jakubw.net>\n+James [Undefined] <tpzker@thepuzzlemaker.info>\n James Deng <cnjamesdeng@gmail.com> <cnJamesDeng@gmail.com>\n James Hinshelwood <jameshinshelwood1@gmail.com> <james.hinshelwood@bigpayme.com>\n James Miller <bladeon@gmail.com> <james@aatch.net>\n James Perry <james.austin.perry@gmail.com>\n+James Sanderson <zofrex@gmail.com>\n+Jaro Fietz <jaro.fietz@gmx.de>\n Jason Fager <jfager@gmail.com>\n Jason Liquorish <jason@liquori.sh> <Bassetts@users.noreply.github.com>\n Jason Orendorff <jorendorff@mozilla.com> <jason.orendorff@gmail.com>\n@@ -140,33 +247,60 @@ Jason Toffaletti <toffaletti@gmail.com> Jason Toffaletti <jason@topsy.com>\n Jauhien Piatlicki <jauhien@gentoo.org> Jauhien Piatlicki <jpiatlicki@zertisa.com>\n Jay True <glacjay@gmail.com>\n Jeremy Letang <letang.jeremy@gmail.com>\n+Jeremy Sorensen <jeremy.a.sorensen@gmail.com>\n Jeremy Stucki <dev@jeremystucki.ch> <stucki.jeremy@gmail.com>\n Jeremy Stucki <dev@jeremystucki.ch> <jeremy@myelin.ch>\n Jeremy Stucki <dev@jeremystucki.ch>\n+Jerry Hardee <hardeejj9@gmail.com>\n+Jes\u00fas Rubio <jesusprubio@gmail.com>\n Jethro Beekman <github@jbeekman.nl>\n+Jian Zeng <knight42@mail.ustc.edu.cn>\n Jihyun Yu <j.yu@navercorp.com> <yjh0502@gmail.com>\n Jihyun Yu <j.yu@navercorp.com> jihyun <jihyun@nablecomm.com>\n Jihyun Yu <j.yu@navercorp.com> Jihyun Yu <jihyun@nclab.kaist.ac.kr>\n Jo\u00e3o Oliveira <hello@jxs.pt> joaoxsouls <joaoxsouls@gmail.com>\n+joboet <jonasboettiger@icloud.com>\n Johann Hofmann <git@johann-hofmann.com> Johann <git@johann-hofmann.com>\n John Clements <clements@racket-lang.org> <clements@brinckerhoff.org>\n John Hodge <acessdev@gmail.com> John Hodge <tpg@mutabah.net>\n+John H\u00f6rnvall <trolledwoods@gmail.com>\n John K\u00e5re Alsaker <john.kare.alsaker@gmail.com>\n John Talling <inrustwetrust@users.noreply.github.com>\n+John Van Enk <vanenkj@gmail.com>\n+Jonas Tepe <jonasprogrammer@gmail.com>\n Jonathan Bailey <jbailey@mozilla.com> <jbailey@jbailey-20809.local>\n+Jonathan Chan Kwan Yin <sofe2038@gmail.com>\n+Jonathan L <Xmasreturns@users.noreply.github.com>\n Jonathan S <gereeter@gmail.com> Jonathan S <gereeter+code@gmail.com>\n+Jonathan Sieber <mail@strfry.org>\n Jonathan Turner <probata@hotmail.com>\n Jorge Aparicio <japaric@linux.com> <japaricious@gmail.com>\n+Josef Reinhard Brandl <mail@josefbrandl.de>\n+Joseph Dunne <jd@lambda.tech>\n Joseph Martin <pythoner6@gmail.com>\n+Joseph Richey <joerichey@google.com>\n+Joseph T. Lyons <JosephTLyons@gmail.com>\n Joseph T. Lyons <JosephTLyons@gmail.com> <josephtlyons@gmail.com>\n Joseph T. Lyons <JosephTLyons@gmail.com> <JosephTLyons@users.noreply.github.com>\n+Josh Cotton <jcotton42@outlook.com>\n+Josh Driver <keeperofdakeys@gmail.com>\n+Josh Holmer <jholmer.in@gmail.com>\n Joshua Nelson <jyn514@gmail.com> <joshua@yottadb.com>\n+Julian Knodt <julianknodt@gmail.com>\n jumbatm <jumbatm@gmail.com> <30644300+jumbatm@users.noreply.github.com>\n Junyoung Cho <june0.cho@samsung.com>\n Jyun-Yan You <jyyou.tw@gmail.com> <jyyou@cs.nctu.edu.tw>\n+Kalita Alexey <kalita.alexey@outlook.com>\n+Kampfkarren <boynedmaster@gmail.com>\n Kang Seonghoon <kang.seonghoon@mearie.org> <public+git@mearie.org>\n+Karim Snj <karim.snj@gmail.com>\n+Katze <binary@benary.org>\n Keegan McAllister <mcallister.keegan@gmail.com> <kmcallister@mozilla.com>\n+Kerem Kat <keremkat@gmail.com>\n Kevin Butler <haqkrs@gmail.com>\n+Kevin Jiang <kwj2104@columbia.edu>\n+Kornel Lesin\u0301ski <kornel@geekhood.net>\n+Krishna Sai Veera Reddy <veerareddy@email.arizona.edu>\n Kyeongwoon Lee <kyeongwoon.lee@samsung.com>\n Kyle J Strand <batmanaod@gmail.com> <BatmanAoD@users.noreply.github.com>\n Kyle J Strand <batmanaod@gmail.com> <kyle.j.strand@gmail.com>\n@@ -176,57 +310,102 @@ Lauren\u021biu Nicola <lnicola@dend.ro>\n lcnr <rust@lcnr.de> <bastian_kauschke@hotmail.de>\n Lee Jeffery <leejeffery@gmail.com> Lee Jeffery <lee@leejeffery.co.uk>\n Lee Wondong <wdlee91@gmail.com>\n+lengyijun <sjtu5140809011@gmail.com>\n Lennart Kudling <github@kudling.de>\n L\u00e9o Lanteri Thauvin <leseulartichaut@gmail.com>\n L\u00e9o Lanteri Thauvin <leseulartichaut@gmail.com> <38361244+LeSeulArtichaut@users.noreply.github.com>\n L\u00e9o Testard <leo.testard@gmail.com>\n+Leonardo Yvens <leoyvens@gmail.com>\n+Liigo Zhuang <liigo@qq.com>\n Lily Ballard <lily@ballards.net> <kevin@sb.org>\n Lindsey Kuper <lindsey@composition.al> <lindsey@rockstargirl.org>\n Lindsey Kuper <lindsey@composition.al> <lkuper@mozilla.com>\n+Liu Dingming <liudingming@bytedance.com>\n+Loo Maclin <loo.maclin@protonmail.com>\n+Lo\u00efc BRANSTETT <lolo.branstett@numericable.fr>\n+Lucy <luxx4x@protonmail.com>\n+Lukas H. <lukaramu@users.noreply.github.com>\n+Lukas Lueg <lukas.lueg@gmail.com>\n Luke Metz <luke.metz@students.olin.edu>\n Luqman Aden <me@luqman.ca> <laden@csclub.uwaterloo.ca>\n Luqman Aden <me@luqman.ca> <laden@mozilla.com>\n+Lzu Tao <taolzu@gmail.com>\n+Maik Klein <maikklein@googlemail.com>\n+Malo Jaffr\u00e9 <jaffre.malo@gmail.com>\n Manish Goregaokar <manishsmail@gmail.com>\n+Mara Bos <m-ou.se@m-ou.se>\n Marcell Pardavi <marcell.pardavi@gmail.com>\n+Marcus Klaas de Vries <mail@marcusklaas.nl>\n Margaret Meyerhofer <mmeyerho@andrew.cmu.edu> <mmeyerho@andrew>\n+Mark Mansi <markm@cs.wisc.edu>\n Mark Rousskov <mark.simulacrum@gmail.com>\n Mark Sinclair <mark.edward.x@gmail.com>\n Mark Sinclair <mark.edward.x@gmail.com> =Mark Sinclair <=125axel125@gmail.com>\n+Markus Legner <markus@legner.ch>\n Markus Westerlind <marwes91@gmail.com> Markus <marwes91@gmail.com>\n+Martin Carton <cartonmartin+git@gmail.com>\n+Martin Habov\u0161tiak <martin.habovstiak@gmail.com>\n Martin Hafskjold Thoresen <martinhath@gmail.com>\n Matej Lach <matej.lach@gmail.com> Matej \u013dach <matej.lach@gmail.com>\n+Mateusz Miku\u0142a <mati865@gmail.com>\n Mateusz Miku\u0142a <mati865@gmail.com> <mati865@users.noreply.github.com>\n Mateusz Miku\u0142a <mati865@gmail.com> <matti@marinelayer.io>\n Matt Brubeck <mbrubeck@limpet.net> <mbrubeck@cs.hmc.edu>\n Matthew Auld <matthew.auld@intel.com>\n+Matthew Jasper <mjjasper1@gmail.com>\n Matthew Kraai <kraai@ftbfs.org>\n Matthew Kraai <kraai@ftbfs.org> <matt.kraai@abbott.com>\n Matthew Kraai <kraai@ftbfs.org> <mkraai@its.jnj.com>\n Matthew McPherrin <matthew@mcpherrin.ca> <matt@mcpherrin.ca>\n+Matthew Tran <0e4ef622@gmail.com>\n Matthijs Hofstra <thiezz@gmail.com>\n+Max Sharnoff <github@max.sharnoff.org>\n+Max Wase <max.vvase@gmail.com>\n+Mazdak Farrokhzad <twingoow@gmail.com>\n+Meade Kincke <thedarkula2049@gmail.com>\n Melody Horn <melody@boringcactus.com> <mathphreak@gmail.com>\n+Mendes <pedro.mendes.26@gmail.com>\n+mental <m3nta1@yahoo.com>\n+mibac138 <5672750+mibac138@users.noreply.github.com>\n Michael Williams <m.t.williams@live.com>\n Michael Woerister <michaelwoerister@posteo> <michaelwoerister@gmail>\n Michael Woerister <michaelwoerister@posteo> <michaelwoerister@users.noreply.github.com>\n Michael Woerister <michaelwoerister@posteo> <michaelwoerister@posteo.net>\n+Michael Zhang <hmperson1@gmail.com>\n+Micha\u0142 Krasnoborski <mkrdln@gmail.com>\n+Michiel De Muynck <michieldemuynck@gmail.com>\n Micka\u00ebl Raybaud-Roig <raybaudroigm@gmail.com> m-r-r <raybaudroigm@gmail.com>\n+Mikhail Babenko <misha-babenko@yandex.ru>\n+Milan Landaverde <milanlandaverde@gmail.com>\n+mjptree <michael.prantl@hotmail.de>\n Ms2ger <ms2ger@gmail.com> <Ms2ger@gmail.com>\n+msizanoen1 <qtmlabs@protonmail.com>\n Mukilan Thiagarajan <mukilanthiagarajan@gmail.com>\n+Nadrieril Feneanar <Nadrieril@users.noreply.github.com>\n NAKASHIMA, Makoto <makoto.nksm+github@gmail.com> <makoto.nksm@gmail.com>\n NAKASHIMA, Makoto <makoto.nksm+github@gmail.com> <makoto.nksm+github@gmail.com>\n+Nathan Ringo <remexre@gmail.com>\n Nathan West <Lucretiel@gmail.com> <lucretiel@gmail.com>\n+Nathan Whitaker <nathan.whitaker01@gmail.com>\n Nathan Wilson <wilnathan@gmail.com>\n+Nathaniel Hamovitz <18648574+nhamovitz@users.noreply.github.com>\n Nathaniel Herman <nherman@post.harvard.edu> Nathaniel Herman <nherman@college.harvard.edu>\n Neil Pankey <npankey@gmail.com> <neil@wire.im>\n+Ngo Iok Ui (Wu Yu Wei) <wusyong9104@gmail.com>\n+Nicholas Baron <nicholas.baron.ten@gmail.com>\n Nick Platt <platt.nicholas@gmail.com>\n+Niclas Schwarzlose <15schnic@gmail.com>\n+Nicolas Abram <abramlujan@gmail.com>\n Nicole Mazzuca <npmazzuca@gmail.com>\n Nif Ward <nif.ward@gmail.com>\n Nika Layzell <nika@thelayzells.com> <michael@thelayzells.com>\n+Nixon Enraght-Moony <nixon.emoony@gmail.com>\n+NODA Kai <nodakai@gmail.com>\n+oliver <16816606+o752d@users.noreply.github.com>\n Oliver Middleton <olliemail27@gmail.com> <ollie27@users.noreply.github.com>\n Oliver Scherer <oliver.schneider@kit.edu> <git-spam-no-reply9815368754983@oli-obk.de>\n Oliver Scherer <oliver.schneider@kit.edu> <git-spam9815368754983@oli-obk.de>\n Oliver Scherer <oliver.schneider@kit.edu> <github333195615777966@oli-obk.de>\n-Oliver Scherer <oliver.schneider@kit.edu> <github6541940@oli-obk.de>\n Oliver Scherer <oliver.schneider@kit.edu> <rust19446194516@oli-obk.de>\n Oliver Scherer <oliver.schneider@kit.edu> <git-no-reply-9879165716479413131@oli-obk.de>\n Oliver Scherer <oliver.schneider@kit.edu> <git1984941651981@oli-obk.de>\n@@ -236,76 +415,139 @@ Oliver Scherer <oliver.schneider@kit.edu> <oli-obk@users.noreply.github.com>\n Oliver Scherer <oliver.schneider@kit.edu> <public.oliver.schneider@kit.edu>\n Oliver Scherer <oliver.schneider@kit.edu> <obk8176014uqher834@olio-obk.de>\n Oliver Scherer <oliver.schneider@kit.edu>\n+\u00d6mer Sinan A\u011facan <omeragacan@gmail.com>\n+Ophir LOJKINE <pere.jobs@gmail.com>\n O\u017ebolt Menegatti <ozbolt.menegatti@gmail.com> gareins <ozbolt.menegatti@gmail.com>\n+Pankaj Chaudhary <pankajchaudhary172@gmail.com>\n Paul Faria <paul_faria@ultimatesoftware.com> Paul Faria <Nashenas88@gmail.com>\n Peer Aramillo Irizar <peer.aramillo.irizar@gmail.com> parir <peer.aramillo.irizar@gmail.com>\n Peter Elmers <peter.elmers@yahoo.com> <peter.elmers@rice.edu>\n Peter Liniker <peter.liniker+github@gmail.com>\n Phil Dawes <phil@phildawes.net> Phil Dawes <pdawes@drw.com>\n+Phil Hansch <dev@phansch.net>\n Philipp Br\u00fcschweiler <blei42@gmail.com> <blei42@gmail.com>\n Philipp Br\u00fcschweiler <blei42@gmail.com> <bruphili@student.ethz.ch>\n-Philipp Krones <hello@philkrones.com> flip1995 <hello@philkrones.com>\n+Philipp Krones <hello@philkrones.com>\n+Philipp Krones <hello@philkrones.com> <9744647+flip1995@users.noreply.github.com>\n Philipp Krones <hello@philkrones.com> <philipp.krones@embecosm.com>\n+Philipp Krones <hello@philkrones.com> <uwdkn@student.kit.edu>\n Philipp Matthias Sch\u00e4fer <philipp.matthias.schaefer@posteo.de>\n+phosphorus <steepout@qq.com>\n+Pierre Krieger <pierre.krieger1708@gmail.com>\n pierwill <pierwill@users.noreply.github.com> <19642016+pierwill@users.noreply.github.com>\n+Pradyumna Rahul <prkinformed@gmail.com>\n Przemys\u0142aw Weso\u0142ek <jest@go.art.pl> Przemek Weso\u0142ek <jest@go.art.pl>\n+r00ster <r00ster91@protonmail.com>\n Rafael \u00c1vila de Esp\u00edndola <respindola@mozilla.com> Rafael Avila de Espindola <espindola@dream.(none)>\n+rail <12975677+rail-rain@users.noreply.github.com>\n Ralph Giles <giles@thaumas.net> Ralph Giles <giles@mozilla.com>\n Ramkumar Ramachandra <r@artagnon.com> <artagnon@gmail.com>\n+Rapha\u00ebl Huchet <rap2hpoutre@users.noreply.github.com>\n+rChaser53 <tayoshizawa29@gmail.com>\n+R\u00e9my Rakic <remy.rakic@gmail.com>\n+R\u00e9my Rakic <remy.rakic@gmail.com> <remy.rakic+github@gmail.com>\n Renato Riccieri Santos Zannon <renato@rrsz.com.br>\n Richard Diamond <wichard@vitalitystudios.com> <wichard@hahbee.co>\n+Ricky Hosfelt <ricky@hosfelt.io>\n+Ritiek Malhotra <ritiekmalhotra123@gmail.com>\n Rob Arnold <robarnold@cs.cmu.edu>\n Rob Arnold <robarnold@cs.cmu.edu> Rob Arnold <robarnold@68-26-94-7.pools.spcsdns.net>\n Robert Foss <dev@robertfoss.se> robertfoss <dev@robertfoss.se>\n Robert Gawdzik <rgawdzik@hotmail.com> Robert Gawdzik \u2622 <rgawdzik@hotmail.com>\n+Robert Habermeier <rphmeier@gmail.com>\n Robert Millar <robert.millar@cantab.net>\n+Roc Yu <rocyu@protonmail.com>\n Rohit Joshi <rohitjoshi@users.noreply.github.com> Rohit Joshi <rohit.joshi@capitalone.com>\n+Roxane Fruytier <roxane.fruytier@hotmail.com>\n+Rui <xiongmao86dev@sina.com>\n Russell Johnston <rpjohnst@gmail.com>\n+Rustin-Liu <rustin.liu@gmail.com>\n+Rusty Blitzerr <rusty.blitzerr@gmail.com>\n+RustyYato <krishna.sd.2012@gmail.com>\n Ruud van Asseldonk <dev@veniogames.com> Ruud van Asseldonk <ruuda@google.com>\n+Ryan Leung <rleungx@gmail.com>\n Ryan Scheel <ryan.havvy@gmail.com>\n+Ryan Sullivant <rsulli55@gmail.com>\n+Ryan Wiedemann <Ryan1729@gmail.com>\n S Pradeep Kumar <gohanpra@gmail.com>\n+Sam Radhakrishnan <sk09idm@gmail.com>\n+Scott McMurray <scottmcm@users.noreply.github.com>\n Scott Olson <scott@solson.me> Scott Olson <scott@scott-olson.org>\n Sean Gillespie <sean.william.g@gmail.com> swgillespie <sean.william.g@gmail.com>\n+Seiichi Uchida <seuchida@gmail.com>\n Seonghyun Kim <sh8281.kim@samsung.com>\n+Shohei Wada <pc@wada314.jp>\n+Shotaro Yamada <sinkuu@sinkuu.xyz>\n+Shotaro Yamada <sinkuu@sinkuu.xyz> <sinkuu@users.noreply.github.com>\n Shyam Sundar B <shyambaskaran@outlook.com>\n Simon Barber-Dueck <sbarberdueck@gmail.com> Simon BD <simon@server>\n Simon Sapin <simon@exyr.org> <simon.sapin@exyr.org>\n Simonas Kazlauskas <git@kazlauskas.me> Simonas Kazlauskas <github@kazlauskas.me>\n+Siva Prasad <sivaauturic@gmail.com>\n+Smittyvb <me@smitop.com>\n+Srinivas Reddy Thatiparthy <thatiparthysreenivas@gmail.com>\n+Stanislav Tkach <stanislav.tkach@gmail.com>\n startling <tdixon51793@gmail.com>\n Stepan Koltsov <stepan.koltsov@gmail.com> Stepan Koltsov <nga@yandex-team.ru>\n Steve Klabnik <steve@steveklabnik.com>\n Steven Fackler <sfackler@gmail.com> <sfackler@palantir.com>\n+Steven Malis <smmalis37@gmail.com>\n Steven Stewart-Gallus <sstewartgallus00@langara.bc.ca> <sstewartgallus00@mylangara.bc.ca>\n Stuart Pernsteiner <stuart@pernsteiner.org> Stuart Pernsteiner <spernsteiner@mozilla.com>\n+Suyash458 <suyash.behera458@gmail.com>\n+S\u00e9bastien Marie <semarie@online.fr>\n+Takashi Idobe <idobetakashi@gmail.com>\n+Takayuki Maeda <takoyaki0316@gmail.com>\n Tamir Duberstein <tamird@gmail.com> Tamir Duberstein <tamird@squareup.com>\n+Tatsuyuki Ishi <ishitatsuyuki@gmail.com>\n Tero H\u00e4nninen <lgvz@users.noreply.github.com> Tero H\u00e4nninen <tejohann@kapsi.fi>\n+The8472 <git@infinite-source.de>\n Theo Belaire <theo.belaire@gmail.com> Theo Belaire <tyr.god.of.war.42@gmail.com>\n+Theodore Luo Wang <wangtheo662@gmail.com>\n Thiago Pontes <email@thiago.me> thiagopnts <thiagopnts@gmail.com>\n Thomas Bracht Laumann Jespersen <laumann.thomas@gmail.com>\n+Tibo Delor <delor.thibault@gmail.com>\n Ticki <Ticki@users.noreply.github.com> Ticki <@>\n Tim Brooks <brooks@cern.ch> Tim Brooks <tim.brooks@staples.com>\n Tim Chevalier <chevalier@alum.wellesley.edu> <catamorphism@gmail.com>\n+Tim Diekmann <t.diekmann.3dv@gmail.com>\n+Tim Hutt <tdhutt@gmail.com>\n Tim JIANG <p90eri@gmail.com>\n Tim Joseph Dumol <tim@timdumol.com>\n+Timothy Maloney <tmaloney@pdx.edu>\n+Tomas Koutsky <tomas@stepnivlk.net>\n+Torsten Weber <TorstenWeber12@gmail.com>\n Torsten Weber <TorstenWeber12@gmail.com> <torstenweber12@gmail.com>\n Trevor Spiteri <tspiteri@ieee.org> <trevor.spiteri@um.edu.mt>\n Ty Overby <ty@pre-alpha.com>\n Tyler Mandry <tmandry@gmail.com> <tmandry@google.com>\n+Tyler Ruckinger <t.ruckinger@gmail.com>\n Ulrik Sverdrup <bluss@users.noreply.github.com> bluss <bluss@users.noreply.github.com>\n Ulrik Sverdrup <bluss@users.noreply.github.com> bluss <bluss>\n Ulrik Sverdrup <bluss@users.noreply.github.com> Ulrik Sverdrup <root@localhost>\n Vadim Petrochenkov <vadim.petrochenkov@gmail.com>\n Vadim Petrochenkov <vadim.petrochenkov@gmail.com> petrochenkov <vadim.petrochenkov@gmail.com>\n+Val Markovic <val@markovic.io>\n+Valerii Lashmanov <vflashm@gmail.com>\n Vitali Haravy <HumaneProgrammer@gmail.com> Vitali Haravy <humaneprogrammer@gmail.com>\n+Vitaly Shukela <vi0oss@gmail.com>\n+Waffle Maybe <waffle.lapkin@gmail.com>\n Wesley Wiser <wwiser@gmail.com> <wesleywiser@microsoft.com>\n whitequark <whitequark@whitequark.org>\n William Ting <io@williamting.com> <william.h.ting@gmail.com>\n+Wim Looman <wim@nemo157.com>\n+Without Boats <woboats@gmail.com>\n+Without Boats <woboats@gmail.com> <boats@mozilla.com>\n+Xinye Tao <xy.tao@outlook.com>\n Xuefeng Wu <benewu@gmail.com> Xuefeng Wu <xfwu@thoughtworks.com>\n Xuefeng Wu <benewu@gmail.com> XuefengWu <benewu@gmail.com>\n York Xiang <bombless@126.com>\n Youngsoo Son <ysson83@gmail.com> <ysoo.son@samsung.com>\n+Youngsuk Kim <joseph942010@gmail.com>\n+Yuki Okushi <jtitor@2k36.org>\n Yuki Okushi <jtitor@2k36.org> <huyuumi.dev@gmail.com>\n Yuki Okushi <jtitor@2k36.org> <yuki.okushi@huawei.com>\n+Yuning Zhang <codeworm96@outlook.com>\n Zach Pomerantz <zmp@umich.edu>\n Zack Corr <zack@z0w0.me> <zackcorr95@gmail.com>\n Zack Slayton <zack.slayton@gmail.com>"}, {"sha": "9b224a733568bc0d544c4118c7103bc7093b7fe3", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4f5b15b8832334eca2c0bd3929eb3969f1d166d/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f5b15b8832334eca2c0bd3929eb3969f1d166d/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=e4f5b15b8832334eca2c0bd3929eb3969f1d166d", "patch": "@@ -83,9 +83,7 @@ macro_rules! ast_fragments {\n                 }\n                 match self {\n                     $($(AstFragment::$Kind(ast) => ast.extend(placeholders.iter().flat_map(|id| {\n-                        // We are repeating through arguments with `many`, to do that we have to\n-                        // mention some macro variable from those arguments even if it's not used.\n-                        macro _repeating($flat_map_ast_elt) {}\n+                        ${ignore(flat_map_ast_elt)}\n                         placeholder(AstFragmentKind::$Kind, *id, None).$make_ast()\n                     })),)?)*\n                     _ => panic!(\"unexpected AST fragment kind\")"}, {"sha": "21078f79f634a950ddb6e3765b800270dfc6d082", "filename": "compiler/rustc_expand/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e4f5b15b8832334eca2c0bd3929eb3969f1d166d/compiler%2Frustc_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f5b15b8832334eca2c0bd3929eb3969f1d166d/compiler%2Frustc_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Flib.rs?ref=e4f5b15b8832334eca2c0bd3929eb3969f1d166d", "patch": "@@ -1,16 +1,17 @@\n+#![allow(rustc::potential_query_instability)]\n #![feature(associated_type_bounds)]\n #![feature(associated_type_defaults)]\n #![feature(crate_visibility_modifier)]\n #![feature(decl_macro)]\n #![feature(if_let_guard)]\n #![feature(let_chains)]\n #![feature(let_else)]\n+#![feature(macro_metavar_expr)]\n #![feature(proc_macro_diagnostic)]\n #![feature(proc_macro_internals)]\n #![feature(proc_macro_span)]\n #![feature(try_blocks)]\n #![recursion_limit = \"256\"]\n-#![allow(rustc::potential_query_instability)]\n \n #[macro_use]\n extern crate rustc_macros;"}, {"sha": "2ddb5f231b1d61ee8a84af717d200229fedf367e", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e4f5b15b8832334eca2c0bd3929eb3969f1d166d/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f5b15b8832334eca2c0bd3929eb3969f1d166d/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=e4f5b15b8832334eca2c0bd3929eb3969f1d166d", "patch": "@@ -131,6 +131,7 @@\n #![feature(trusted_len)]\n #![feature(trusted_random_access)]\n #![feature(try_trait_v2)]\n+#![feature(unchecked_math)]\n #![feature(unicode_internals)]\n #![feature(unsize)]\n //"}, {"sha": "a19999cd725807c9860b330aea502ec6d0dc3eb0", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f5b15b8832334eca2c0bd3929eb3969f1d166d/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f5b15b8832334eca2c0bd3929eb3969f1d166d/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=e4f5b15b8832334eca2c0bd3929eb3969f1d166d", "patch": "@@ -369,7 +369,7 @@ impl<T> Arc<T> {\n     ///\n     /// # Example\n     /// ```\n-    /// #![allow(dead_code)]\n+    /// # #![allow(dead_code)]\n     /// use std::sync::{Arc, Weak};\n     ///\n     /// struct Gadget {"}, {"sha": "74bcac2b5414de6886b4666ce9ad524ea1678041", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/e4f5b15b8832334eca2c0bd3929eb3969f1d166d/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f5b15b8832334eca2c0bd3929eb3969f1d166d/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=e4f5b15b8832334eca2c0bd3929eb3969f1d166d", "patch": "@@ -2274,6 +2274,51 @@ impl<T: Clone, A: Allocator> Vec<T, A> {\n     }\n }\n \n+impl<T, A: Allocator, const N: usize> Vec<[T; N], A> {\n+    /// Takes a `Vec<[T; N]>` and flattens it into a `Vec<T>`.\n+    ///\n+    /// # Panics\n+    ///\n+    /// Panics if the length of the resulting vector would overflow a `usize`.\n+    ///\n+    /// This is only possible when flattening a vector of arrays of zero-sized\n+    /// types, and thus tends to be irrelevant in practice. If\n+    /// `size_of::<T>() > 0`, this will never panic.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(slice_flatten)]\n+    ///\n+    /// let mut vec = vec![[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n+    /// assert_eq!(vec.pop(), Some([7, 8, 9]));\n+    ///\n+    /// let mut flattened = vec.into_flattened();\n+    /// assert_eq!(flattened.pop(), Some(6));\n+    /// ```\n+    #[unstable(feature = \"slice_flatten\", issue = \"95629\")]\n+    pub fn into_flattened(self) -> Vec<T, A> {\n+        let (ptr, len, cap, alloc) = self.into_raw_parts_with_alloc();\n+        let (new_len, new_cap) = if mem::size_of::<T>() == 0 {\n+            (len.checked_mul(N).expect(\"vec len overflow\"), usize::MAX)\n+        } else {\n+            // SAFETY:\n+            // - `cap * N` cannot overflow because the allocation is already in\n+            // the address space.\n+            // - Each `[T; N]` has `N` valid elements, so there are `len * N`\n+            // valid elements in the allocation.\n+            unsafe { (len.unchecked_mul(N), cap.unchecked_mul(N)) }\n+        };\n+        // SAFETY:\n+        // - `ptr` was allocated by `self`\n+        // - `ptr` is well-aligned because `[T; N]` has the same alignment as `T`.\n+        // - `new_cap` refers to the same sized allocation as `cap` because\n+        // `new_cap * size_of::<T>()` == `cap * size_of::<[T; N]>()`\n+        // - `len` <= `cap`, so `len * N` <= `cap * N`.\n+        unsafe { Vec::<T, A>::from_raw_parts_in(ptr.cast(), new_len, new_cap, alloc) }\n+    }\n+}\n+\n // This code generalizes `extend_with_{element,default}`.\n trait ExtendWith<T> {\n     fn next(&mut self) -> T;"}, {"sha": "16ceb8e373dcb37b551bcc633f2954e63ad0c1ba", "filename": "library/alloc/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e4f5b15b8832334eca2c0bd3929eb3969f1d166d/library%2Falloc%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f5b15b8832334eca2c0bd3929eb3969f1d166d/library%2Falloc%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Flib.rs?ref=e4f5b15b8832334eca2c0bd3929eb3969f1d166d", "patch": "@@ -38,6 +38,7 @@\n #![feature(const_str_from_utf8)]\n #![feature(nonnull_slice_from_raw_parts)]\n #![feature(panic_update_hook)]\n+#![feature(slice_flatten)]\n \n use std::collections::hash_map::DefaultHasher;\n use std::hash::{Hash, Hasher};"}, {"sha": "bc1397146dda9460c0046cc68c852b4129b3ef23", "filename": "library/alloc/tests/vec.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e4f5b15b8832334eca2c0bd3929eb3969f1d166d/library%2Falloc%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f5b15b8832334eca2c0bd3929eb3969f1d166d/library%2Falloc%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fvec.rs?ref=e4f5b15b8832334eca2c0bd3929eb3969f1d166d", "patch": "@@ -2408,3 +2408,10 @@ fn test_extend_from_within_panicing_clone() {\n \n     assert_eq!(count.load(Ordering::SeqCst), 4);\n }\n+\n+#[test]\n+#[should_panic = \"vec len overflow\"]\n+fn test_into_flattened_size_overflow() {\n+    let v = vec![[(); usize::MAX]; 2];\n+    let _ = v.into_flattened();\n+}"}, {"sha": "6546a5244fd03cb4818c1866d51132d34043099b", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e4f5b15b8832334eca2c0bd3929eb3969f1d166d/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f5b15b8832334eca2c0bd3929eb3969f1d166d/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=e4f5b15b8832334eca2c0bd3929eb3969f1d166d", "patch": "@@ -181,6 +181,7 @@\n #![feature(intrinsics)]\n #![feature(lang_items)]\n #![feature(link_llvm_intrinsics)]\n+#![feature(macro_metavar_expr)]\n #![feature(min_specialization)]\n #![feature(mixed_integer_ops)]\n #![feature(must_not_suspend)]"}, {"sha": "2240c297a253174eb4e6dcfaeed7d4476938874c", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/e4f5b15b8832334eca2c0bd3929eb3969f1d166d/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f5b15b8832334eca2c0bd3929eb3969f1d166d/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=e4f5b15b8832334eca2c0bd3929eb3969f1d166d", "patch": "@@ -3992,6 +3992,88 @@ impl<T> [T] {\n     }\n }\n \n+#[cfg(not(bootstrap))]\n+impl<T, const N: usize> [[T; N]] {\n+    /// Takes a `&[[T; N]]`, and flattens it to a `&[T]`.\n+    ///\n+    /// # Panics\n+    ///\n+    /// This panics if the length of the resulting slice would overflow a `usize`.\n+    ///\n+    /// This is only possible when flattening a slice of arrays of zero-sized\n+    /// types, and thus tends to be irrelevant in practice. If\n+    /// `size_of::<T>() > 0`, this will never panic.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(slice_flatten)]\n+    ///\n+    /// assert_eq!([[1, 2, 3], [4, 5, 6]].flatten(), &[1, 2, 3, 4, 5, 6]);\n+    ///\n+    /// assert_eq!(\n+    ///     [[1, 2, 3], [4, 5, 6]].flatten(),\n+    ///     [[1, 2], [3, 4], [5, 6]].flatten(),\n+    /// );\n+    ///\n+    /// let slice_of_empty_arrays: &[[i32; 0]] = &[[], [], [], [], []];\n+    /// assert!(slice_of_empty_arrays.flatten().is_empty());\n+    ///\n+    /// let empty_slice_of_arrays: &[[u32; 10]] = &[];\n+    /// assert!(empty_slice_of_arrays.flatten().is_empty());\n+    /// ```\n+    #[unstable(feature = \"slice_flatten\", issue = \"95629\")]\n+    pub fn flatten(&self) -> &[T] {\n+        let len = if crate::mem::size_of::<T>() == 0 {\n+            self.len().checked_mul(N).expect(\"slice len overflow\")\n+        } else {\n+            // SAFETY: `self.len() * N` cannot overflow because `self` is\n+            // already in the address space.\n+            unsafe { self.len().unchecked_mul(N) }\n+        };\n+        // SAFETY: `[T]` is layout-identical to `[T; N]`\n+        unsafe { from_raw_parts(self.as_ptr().cast(), len) }\n+    }\n+\n+    /// Takes a `&mut [[T; N]]`, and flattens it to a `&mut [T]`.\n+    ///\n+    /// # Panics\n+    ///\n+    /// This panics if the length of the resulting slice would overflow a `usize`.\n+    ///\n+    /// This is only possible when flattening a slice of arrays of zero-sized\n+    /// types, and thus tends to be irrelevant in practice. If\n+    /// `size_of::<T>() > 0`, this will never panic.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(slice_flatten)]\n+    ///\n+    /// fn add_5_to_all(slice: &mut [i32]) {\n+    ///     for i in slice {\n+    ///         *i += 5;\n+    ///     }\n+    /// }\n+    ///\n+    /// let mut array = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\n+    /// add_5_to_all(array.flatten_mut());\n+    /// assert_eq!(array, [[6, 7, 8], [9, 10, 11], [12, 13, 14]]);\n+    /// ```\n+    #[unstable(feature = \"slice_flatten\", issue = \"95629\")]\n+    pub fn flatten_mut(&mut self) -> &mut [T] {\n+        let len = if crate::mem::size_of::<T>() == 0 {\n+            self.len().checked_mul(N).expect(\"slice len overflow\")\n+        } else {\n+            // SAFETY: `self.len() * N` cannot overflow because `self` is\n+            // already in the address space.\n+            unsafe { self.len().unchecked_mul(N) }\n+        };\n+        // SAFETY: `[T]` is layout-identical to `[T; N]`\n+        unsafe { from_raw_parts_mut(self.as_mut_ptr().cast(), len) }\n+    }\n+}\n+\n trait CloneFromSpec<T> {\n     fn spec_clone_from(&mut self, src: &[T]);\n }"}, {"sha": "fdf58c50e4863e336da9a038fbe3fe0e65192930", "filename": "library/core/src/tuple.rs", "status": "modified", "additions": 24, "deletions": 116, "changes": 140, "blob_url": "https://github.com/rust-lang/rust/blob/e4f5b15b8832334eca2c0bd3929eb3969f1d166d/library%2Fcore%2Fsrc%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f5b15b8832334eca2c0bd3929eb3969f1d166d/library%2Fcore%2Fsrc%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftuple.rs?ref=e4f5b15b8832334eca2c0bd3929eb3969f1d166d", "patch": "@@ -5,21 +5,17 @@ use crate::cmp::*;\n \n // macro for implementing n-ary tuple functions and operations\n macro_rules! tuple_impls {\n-    ($(\n-        $Tuple:ident {\n-            $(($idx:tt) -> $T:ident)+\n-        }\n-    )+) => {\n+    ( $( $Tuple:ident( $( $T:ident )+ ) )+ ) => {\n         $(\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             impl<$($T:PartialEq),+> PartialEq for ($($T,)+) where last_type!($($T,)+): ?Sized {\n                 #[inline]\n                 fn eq(&self, other: &($($T,)+)) -> bool {\n-                    $(self.$idx == other.$idx)&&+\n+                    $( ${ignore(T)} self.${index()} == other.${index()} )&&+\n                 }\n                 #[inline]\n                 fn ne(&self, other: &($($T,)+)) -> bool {\n-                    $(self.$idx != other.$idx)||+\n+                    $( ${ignore(T)} self.${index()} != other.${index()} )||+\n                 }\n             }\n \n@@ -28,34 +24,36 @@ macro_rules! tuple_impls {\n \n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             impl<$($T:PartialOrd + PartialEq),+> PartialOrd for ($($T,)+)\n-                    where last_type!($($T,)+): ?Sized {\n+            where\n+                last_type!($($T,)+): ?Sized\n+            {\n                 #[inline]\n                 fn partial_cmp(&self, other: &($($T,)+)) -> Option<Ordering> {\n-                    lexical_partial_cmp!($(self.$idx, other.$idx),+)\n+                    lexical_partial_cmp!($( ${ignore(T)} self.${index()}, other.${index()} ),+)\n                 }\n                 #[inline]\n                 fn lt(&self, other: &($($T,)+)) -> bool {\n-                    lexical_ord!(lt, $(self.$idx, other.$idx),+)\n+                    lexical_ord!(lt, $( ${ignore(T)} self.${index()}, other.${index()} ),+)\n                 }\n                 #[inline]\n                 fn le(&self, other: &($($T,)+)) -> bool {\n-                    lexical_ord!(le, $(self.$idx, other.$idx),+)\n+                    lexical_ord!(le, $( ${ignore(T)} self.${index()}, other.${index()} ),+)\n                 }\n                 #[inline]\n                 fn ge(&self, other: &($($T,)+)) -> bool {\n-                    lexical_ord!(ge, $(self.$idx, other.$idx),+)\n+                    lexical_ord!(ge, $( ${ignore(T)} self.${index()}, other.${index()} ),+)\n                 }\n                 #[inline]\n                 fn gt(&self, other: &($($T,)+)) -> bool {\n-                    lexical_ord!(gt, $(self.$idx, other.$idx),+)\n+                    lexical_ord!(gt, $( ${ignore(T)} self.${index()}, other.${index()} ),+)\n                 }\n             }\n \n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             impl<$($T:Ord),+> Ord for ($($T,)+) where last_type!($($T,)+): ?Sized {\n                 #[inline]\n                 fn cmp(&self, other: &($($T,)+)) -> Ordering {\n-                    lexical_cmp!($(self.$idx, other.$idx),+)\n+                    lexical_cmp!($( ${ignore(T)} self.${index()}, other.${index()} ),+)\n                 }\n             }\n \n@@ -108,106 +106,16 @@ macro_rules! last_type {\n }\n \n tuple_impls! {\n-    Tuple1 {\n-        (0) -> A\n-    }\n-    Tuple2 {\n-        (0) -> A\n-        (1) -> B\n-    }\n-    Tuple3 {\n-        (0) -> A\n-        (1) -> B\n-        (2) -> C\n-    }\n-    Tuple4 {\n-        (0) -> A\n-        (1) -> B\n-        (2) -> C\n-        (3) -> D\n-    }\n-    Tuple5 {\n-        (0) -> A\n-        (1) -> B\n-        (2) -> C\n-        (3) -> D\n-        (4) -> E\n-    }\n-    Tuple6 {\n-        (0) -> A\n-        (1) -> B\n-        (2) -> C\n-        (3) -> D\n-        (4) -> E\n-        (5) -> F\n-    }\n-    Tuple7 {\n-        (0) -> A\n-        (1) -> B\n-        (2) -> C\n-        (3) -> D\n-        (4) -> E\n-        (5) -> F\n-        (6) -> G\n-    }\n-    Tuple8 {\n-        (0) -> A\n-        (1) -> B\n-        (2) -> C\n-        (3) -> D\n-        (4) -> E\n-        (5) -> F\n-        (6) -> G\n-        (7) -> H\n-    }\n-    Tuple9 {\n-        (0) -> A\n-        (1) -> B\n-        (2) -> C\n-        (3) -> D\n-        (4) -> E\n-        (5) -> F\n-        (6) -> G\n-        (7) -> H\n-        (8) -> I\n-    }\n-    Tuple10 {\n-        (0) -> A\n-        (1) -> B\n-        (2) -> C\n-        (3) -> D\n-        (4) -> E\n-        (5) -> F\n-        (6) -> G\n-        (7) -> H\n-        (8) -> I\n-        (9) -> J\n-    }\n-    Tuple11 {\n-        (0) -> A\n-        (1) -> B\n-        (2) -> C\n-        (3) -> D\n-        (4) -> E\n-        (5) -> F\n-        (6) -> G\n-        (7) -> H\n-        (8) -> I\n-        (9) -> J\n-        (10) -> K\n-    }\n-    Tuple12 {\n-        (0) -> A\n-        (1) -> B\n-        (2) -> C\n-        (3) -> D\n-        (4) -> E\n-        (5) -> F\n-        (6) -> G\n-        (7) -> H\n-        (8) -> I\n-        (9) -> J\n-        (10) -> K\n-        (11) -> L\n-    }\n+    Tuple1(A)\n+    Tuple2(A B)\n+    Tuple3(A B C)\n+    Tuple4(A B C D)\n+    Tuple5(A B C D E)\n+    Tuple6(A B C D E F)\n+    Tuple7(A B C D E F G)\n+    Tuple8(A B C D E F G H)\n+    Tuple9(A B C D E F G H I)\n+    Tuple10(A B C D E F G H I J)\n+    Tuple11(A B C D E F G H I J K)\n+    Tuple12(A B C D E F G H I J K L)\n }"}, {"sha": "09e2e04a1e58402c5b2faab1d274d78db30c1543", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e4f5b15b8832334eca2c0bd3929eb3969f1d166d/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f5b15b8832334eca2c0bd3929eb3969f1d166d/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=e4f5b15b8832334eca2c0bd3929eb3969f1d166d", "patch": "@@ -93,6 +93,7 @@\n #![feature(const_array_from_ref)]\n #![feature(const_slice_from_ref)]\n #![feature(waker_getters)]\n+#![feature(slice_flatten)]\n #![deny(unsafe_op_in_unsafe_fn)]\n \n extern crate test;"}, {"sha": "ada479147db95806c3e638a9ecc36687d91bba9c", "filename": "library/core/tests/slice.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e4f5b15b8832334eca2c0bd3929eb3969f1d166d/library%2Fcore%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f5b15b8832334eca2c0bd3929eb3969f1d166d/library%2Fcore%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fslice.rs?ref=e4f5b15b8832334eca2c0bd3929eb3969f1d166d", "patch": "@@ -2504,3 +2504,19 @@ fn test_slice_from_ptr_range() {\n         assert_eq!(slice::from_ptr_range(range), &arr);\n     }\n }\n+\n+#[test]\n+#[cfg(not(bootstrap))]\n+#[should_panic = \"slice len overflow\"]\n+fn test_flatten_size_overflow() {\n+    let x = &[[(); usize::MAX]; 2][..];\n+    let _ = x.flatten();\n+}\n+\n+#[test]\n+#[cfg(not(bootstrap))]\n+#[should_panic = \"slice len overflow\"]\n+fn test_flatten_mut_size_overflow() {\n+    let x = &mut [[(); usize::MAX]; 2][..];\n+    let _ = x.flatten_mut();\n+}"}, {"sha": "09d1dd55989e19fbab6ad7eb4a0e737b3403ed7f", "filename": "library/std/src/sys/windows/pipe.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e4f5b15b8832334eca2c0bd3929eb3969f1d166d/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f5b15b8832334eca2c0bd3929eb3969f1d166d/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fpipe.rs?ref=e4f5b15b8832334eca2c0bd3929eb3969f1d166d", "patch": "@@ -53,6 +53,9 @@ pub struct Pipes {\n /// with `OVERLAPPED` instances, but also works out ok if it's only ever used\n /// once at a time (which we do indeed guarantee).\n pub fn anon_pipe(ours_readable: bool, their_handle_inheritable: bool) -> io::Result<Pipes> {\n+    // A 64kb pipe capacity is the same as a typical Linux default.\n+    const PIPE_BUFFER_CAPACITY: u32 = 64 * 1024;\n+\n     // Note that we specifically do *not* use `CreatePipe` here because\n     // unfortunately the anonymous pipes returned do not support overlapped\n     // operations. Instead, we create a \"hopefully unique\" name and create a\n@@ -91,8 +94,8 @@ pub fn anon_pipe(ours_readable: bool, their_handle_inheritable: bool) -> io::Res\n                     | c::PIPE_WAIT\n                     | reject_remote_clients_flag,\n                 1,\n-                4096,\n-                4096,\n+                PIPE_BUFFER_CAPACITY,\n+                PIPE_BUFFER_CAPACITY,\n                 0,\n                 ptr::null_mut(),\n             );"}, {"sha": "a045666ca8aa55464218e6819ad2a4f5d1e62c43", "filename": "src/ci/docker/host-x86_64/dist-various-2/Dockerfile", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e4f5b15b8832334eca2c0bd3929eb3969f1d166d/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-various-2%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/e4f5b15b8832334eca2c0bd3929eb3969f1d166d/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-various-2%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-various-2%2FDockerfile?ref=e4f5b15b8832334eca2c0bd3929eb3969f1d166d", "patch": "@@ -111,6 +111,7 @@ ENV TARGETS=$TARGETS,nvptx64-nvidia-cuda\n ENV TARGETS=$TARGETS,armv7-unknown-linux-gnueabi\n ENV TARGETS=$TARGETS,armv7-unknown-linux-musleabi\n ENV TARGETS=$TARGETS,i686-unknown-freebsd\n+ENV TARGETS=$TARGETS,x86_64-unknown-none\n \n # As per https://bugs.launchpad.net/ubuntu/+source/gcc-defaults/+bug/1300211\n # we need asm in the search path for gcc-8 (for gnux32) but not in the search path of the"}, {"sha": "32def67ed65e3a99cc08057a0e2b62a866b3da76", "filename": "src/doc/rustc/src/platform-support.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f5b15b8832334eca2c0bd3929eb3969f1d166d/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "raw_url": "https://github.com/rust-lang/rust/raw/e4f5b15b8832334eca2c0bd3929eb3969f1d166d/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md?ref=e4f5b15b8832334eca2c0bd3929eb3969f1d166d", "patch": "@@ -177,6 +177,7 @@ target | std | notes\n `x86_64-linux-android` | \u2713 | 64-bit x86 Android\n `x86_64-pc-solaris` | \u2713 | 64-bit Solaris 10/11, illumos\n `x86_64-unknown-linux-gnux32` | \u2713 | 64-bit Linux (x32 ABI) (kernel 4.15, glibc 2.27)\n+[`x86_64-unknown-none`](platform-support/x86_64-unknown-none.md) | * | Freestanding/bare-metal x86_64, softfloat\n `x86_64-unknown-redox` | \u2713 | Redox OS\n \n [Fortanix ABI]: https://edp.fortanix.com/\n@@ -291,7 +292,6 @@ target | std | host | notes\n `x86_64-unknown-haiku` | \u2713 | \u2713 | 64-bit Haiku\n `x86_64-unknown-hermit` | \u2713 |  | HermitCore\n `x86_64-unknown-l4re-uclibc` | ? |  |\n-[`x86_64-unknown-none`](platform-support/x86_64-unknown-none.md) | * |  | Freestanding/bare-metal x86_64, softfloat\n `x86_64-unknown-none-linuxkernel` | * |  | Linux kernel modules\n [`x86_64-unknown-openbsd`](platform-support/openbsd.md) | \u2713 | \u2713 | 64-bit OpenBSD\n `x86_64-unknown-uefi` | * |  | 64-bit UEFI"}, {"sha": "bd5fd1d0502303c293c4499e611abc67b1d75089", "filename": "src/doc/rustc/src/platform-support/x86_64-unknown-none.md", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e4f5b15b8832334eca2c0bd3929eb3969f1d166d/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Fx86_64-unknown-none.md", "raw_url": "https://github.com/rust-lang/rust/raw/e4f5b15b8832334eca2c0bd3929eb3969f1d166d/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Fx86_64-unknown-none.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Fx86_64-unknown-none.md?ref=e4f5b15b8832334eca2c0bd3929eb3969f1d166d", "patch": "@@ -1,6 +1,6 @@\n # `x86_64-unknown-none`\n \n-**Tier: 3**\n+**Tier: 2**\n \n Freestanding/bare-metal x86-64 binaries in ELF format: firmware, kernels, etc.\n \n@@ -32,7 +32,7 @@ You can change this using the `-C code-model=` option to rustc.\n On `x86_64-unknown-none`, `extern \"C\"` uses the [standard System V calling\n convention](https://gitlab.com/x86-psABIs/x86-64-ABI), without red zones.\n \n-This target generated binaries in the ELF format. Any alternate formats or\n+This target generates binaries in the ELF format. Any alternate formats or\n special considerations for binary layout will require linker options or linker\n scripts.\n \n@@ -49,15 +49,19 @@ target = [\"x86_64-unknown-none\"]\n \n ## Building Rust programs\n \n-Rust does not yet ship pre-compiled artifacts for this target. To compile for\n-this target, you will either need to build Rust with the target enabled (see\n-\"Building the target\" above), or build your own copy of `core` by using\n-`build-std` or similar.\n+Starting with Rust 1.62, precompiled artifacts are provided via `rustup`:\n+\n+```text\n+# install cross-compile toolchain\n+rustup target add x86_64-unknown-none\n+# target flag may be used with any cargo or rustc command\n+cargo build --target x86_64-unknown-none\n+```\n \n ## Testing\n \n As `x86_64-unknown-none` supports a variety of different environments and does\n-not support `std`, this target does not support running the Rust testsuite.\n+not support `std`, this target does not support running the Rust test suite.\n \n ## Cross-compilation toolchains and C code\n "}, {"sha": "5239e5db11c961562429126d2fa3910d265bda89", "filename": "src/test/ui/hrtb/issue-94034.rs", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/e4f5b15b8832334eca2c0bd3929eb3969f1d166d/src%2Ftest%2Fui%2Fhrtb%2Fissue-94034.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f5b15b8832334eca2c0bd3929eb3969f1d166d/src%2Ftest%2Fui%2Fhrtb%2Fissue-94034.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-94034.rs?ref=e4f5b15b8832334eca2c0bd3929eb3969f1d166d", "patch": "@@ -0,0 +1,96 @@\n+// known-bug\n+// failure-status: 101\n+// compile-flags: --edition=2021 --crate-type=lib\n+// rustc-env:RUST_BACKTRACE=0\n+\n+// normalize-stderr-test \"thread 'rustc' panicked.*\" -> \"thread 'rustc' panicked\"\n+// normalize-stderr-test \"note:.*RUST_BACKTRACE=1.*\\n\" -> \"\"\n+// normalize-stderr-test \"\\nerror: internal compiler error.*\\n\\n\" -> \"\"\n+// normalize-stderr-test \"note:.*unexpectedly panicked.*\\n\\n\" -> \"\"\n+// normalize-stderr-test \"note: we would appreciate a bug report.*\\n\\n\" -> \"\"\n+// normalize-stderr-test \"note: compiler flags.*\\n\\n\" -> \"\"\n+// normalize-stderr-test \"note: rustc.*running on.*\\n\\n\" -> \"\"\n+// normalize-stderr-test \"query stack during panic:\\n\" -> \"\"\n+// normalize-stderr-test \"we're just showing a limited slice of the query stack\\n\" -> \"\"\n+// normalize-stderr-test \"end of query stack\\n\" -> \"\"\n+// normalize-stderr-test \"#.*\\n\" -> \"\"\n+\n+// This should not ICE.\n+\n+use std::{\n+    future::Future,\n+    marker::PhantomData,\n+    pin::Pin,\n+    task::{Context, Poll},\n+};\n+\n+mod object {\n+    use super::*;\n+\n+    pub trait Object<'a> {\n+        type Error;\n+        type Future: Future<Output = Self>;\n+        fn create() -> Self::Future;\n+    }\n+\n+    impl<'a> Object<'a> for u8 {\n+        type Error = ();\n+        type Future = Pin<Box<dyn Future<Output = Self>>>;\n+        fn create() -> Self::Future {\n+            unimplemented!()\n+        }\n+    }\n+\n+    impl<'a, E, A: Object<'a, Error = E>> Object<'a> for (A,) {\n+        type Error = ();\n+        type Future = CustomFut<'a, E, A>;\n+        fn create() -> Self::Future {\n+            unimplemented!()\n+        }\n+    }\n+\n+    pub struct CustomFut<'f, E, A: Object<'f, Error = E>> {\n+        ph: PhantomData<(A::Future,)>,\n+    }\n+\n+    impl<'f, E, A: Object<'f, Error = E>> Future for CustomFut<'f, E, A> {\n+        type Output = (A,);\n+        fn poll(self: Pin<&mut Self>, _: &mut Context<'_>) -> Poll<Self::Output> {\n+            unimplemented!()\n+        }\n+    }\n+}\n+\n+mod async_fn {\n+    use super::*;\n+\n+    pub trait AsyncFn {\n+        type Future: Future<Output = ()>;\n+        fn call(&self) -> Self::Future;\n+    }\n+\n+    impl<F, Fut> AsyncFn for F\n+    where\n+        F: Fn() -> Fut,\n+        Fut: Future<Output = ()>,\n+    {\n+        type Future = Fut;\n+        fn call(&self) -> Self::Future {\n+            (self)()\n+        }\n+    }\n+}\n+\n+pub async fn test() {\n+    use self::{async_fn::AsyncFn, object::Object};\n+\n+    async fn create<T: Object<'static>>() {\n+        T::create().await;\n+    }\n+\n+    async fn call_async_fn(inner: impl AsyncFn) {\n+        inner.call().await;\n+    }\n+\n+    call_async_fn(create::<(u8,)>).await;\n+}"}, {"sha": "1d8329142fc5c0a142f078d1106713135539f7ad", "filename": "src/test/ui/hrtb/issue-94034.stderr", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e4f5b15b8832334eca2c0bd3929eb3969f1d166d/src%2Ftest%2Fui%2Fhrtb%2Fissue-94034.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e4f5b15b8832334eca2c0bd3929eb3969f1d166d/src%2Ftest%2Fui%2Fhrtb%2Fissue-94034.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fissue-94034.stderr?ref=e4f5b15b8832334eca2c0bd3929eb3969f1d166d", "patch": "@@ -0,0 +1 @@\n+thread 'rustc' panicked"}, {"sha": "a1dfbef0601adf5e6a55928b268196806b0bb04e", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e4f5b15b8832334eca2c0bd3929eb3969f1d166d/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f5b15b8832334eca2c0bd3929eb3969f1d166d/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=e4f5b15b8832334eca2c0bd3929eb3969f1d166d", "patch": "@@ -152,6 +152,7 @@ static TARGETS: &[&str] = &[\n     \"x86_64-unknown-linux-gnux32\",\n     \"x86_64-unknown-linux-musl\",\n     \"x86_64-unknown-netbsd\",\n+    \"x86_64-unknown-none\",\n     \"x86_64-unknown-redox\",\n     \"x86_64-unknown-hermit\",\n ];"}]}