{"sha": "cbe96b04ad9a7109febac47e660d993b45542c1f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiZTk2YjA0YWQ5YTcxMDlmZWJhYzQ3ZTY2MGQ5OTNiNDU1NDJjMWY=", "commit": {"author": {"name": "Ivan Tham", "email": "pickfire@riseup.net", "date": "2020-04-13T14:24:58Z"}, "committer": {"name": "Ivan Tham", "email": "pickfire@riseup.net", "date": "2020-04-13T14:24:58Z"}, "message": "Add period to Pattern docs", "tree": {"sha": "065d531198f2d733be31a8631f979a5e0fc184f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/065d531198f2d733be31a8631f979a5e0fc184f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cbe96b04ad9a7109febac47e660d993b45542c1f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cbe96b04ad9a7109febac47e660d993b45542c1f", "html_url": "https://github.com/rust-lang/rust/commit/cbe96b04ad9a7109febac47e660d993b45542c1f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cbe96b04ad9a7109febac47e660d993b45542c1f/comments", "author": {"login": "pickfire", "id": 4687791, "node_id": "MDQ6VXNlcjQ2ODc3OTE=", "avatar_url": "https://avatars.githubusercontent.com/u/4687791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pickfire", "html_url": "https://github.com/pickfire", "followers_url": "https://api.github.com/users/pickfire/followers", "following_url": "https://api.github.com/users/pickfire/following{/other_user}", "gists_url": "https://api.github.com/users/pickfire/gists{/gist_id}", "starred_url": "https://api.github.com/users/pickfire/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pickfire/subscriptions", "organizations_url": "https://api.github.com/users/pickfire/orgs", "repos_url": "https://api.github.com/users/pickfire/repos", "events_url": "https://api.github.com/users/pickfire/events{/privacy}", "received_events_url": "https://api.github.com/users/pickfire/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pickfire", "id": 4687791, "node_id": "MDQ6VXNlcjQ2ODc3OTE=", "avatar_url": "https://avatars.githubusercontent.com/u/4687791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pickfire", "html_url": "https://github.com/pickfire", "followers_url": "https://api.github.com/users/pickfire/followers", "following_url": "https://api.github.com/users/pickfire/following{/other_user}", "gists_url": "https://api.github.com/users/pickfire/gists{/gist_id}", "starred_url": "https://api.github.com/users/pickfire/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pickfire/subscriptions", "organizations_url": "https://api.github.com/users/pickfire/orgs", "repos_url": "https://api.github.com/users/pickfire/repos", "events_url": "https://api.github.com/users/pickfire/events{/privacy}", "received_events_url": "https://api.github.com/users/pickfire/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d28a46444eacf066ea0e7fdf6eda066e315aaa4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d28a46444eacf066ea0e7fdf6eda066e315aaa4a", "html_url": "https://github.com/rust-lang/rust/commit/d28a46444eacf066ea0e7fdf6eda066e315aaa4a"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "cc628fe0f0c1d887c7217182795331118fa2f4ad", "filename": "src/liballoc/string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cbe96b04ad9a7109febac47e660d993b45542c1f/src%2Fliballoc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbe96b04ad9a7109febac47e660d993b45542c1f/src%2Fliballoc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstring.rs?ref=cbe96b04ad9a7109febac47e660d993b45542c1f", "patch": "@@ -1827,7 +1827,7 @@ impl<'a> Extend<Cow<'a, str>> for String {\n     }\n }\n \n-/// A convenience impl that delegates to the impl for `&str`\n+/// A convenience impl that delegates to the impl for `&str`.\n #[unstable(\n     feature = \"pattern\",\n     reason = \"API not fully fleshed out and ready to be stabilized\","}, {"sha": "2f82ba02eb2101b62d1edcc48305b0cc656235db", "filename": "src/libcore/str/pattern.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cbe96b04ad9a7109febac47e660d993b45542c1f/src%2Flibcore%2Fstr%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbe96b04ad9a7109febac47e660d993b45542c1f/src%2Flibcore%2Fstr%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fpattern.rs?ref=cbe96b04ad9a7109febac47e660d993b45542c1f", "patch": "@@ -451,7 +451,7 @@ unsafe impl<'a> ReverseSearcher<'a> for CharSearcher<'a> {\n \n impl<'a> DoubleEndedSearcher<'a> for CharSearcher<'a> {}\n \n-/// Searches for chars that are equal to a given char\n+/// Searches for chars that are equal to a given `char`.\n impl<'a> Pattern<'a> for char {\n     type Searcher = CharSearcher<'a>;\n \n@@ -696,7 +696,7 @@ unsafe impl<'a, 'b> ReverseSearcher<'a> for CharSliceSearcher<'a, 'b> {\n \n impl<'a, 'b> DoubleEndedSearcher<'a> for CharSliceSearcher<'a, 'b> {}\n \n-/// Searches for chars that are equal to any of the chars in the array\n+/// Searches for chars that are equal to any of the chars in the array.\n impl<'a, 'b> Pattern<'a> for &'b [char] {\n     pattern_methods!(CharSliceSearcher<'a, 'b>, MultiCharEqPattern, CharSliceSearcher);\n }\n@@ -738,7 +738,7 @@ where\n \n impl<'a, F> DoubleEndedSearcher<'a> for CharPredicateSearcher<'a, F> where F: FnMut(char) -> bool {}\n \n-/// Searches for chars that match the given predicate\n+/// Searches for chars that match the given predicate.\n impl<'a, F> Pattern<'a> for F\n where\n     F: FnMut(char) -> bool,\n@@ -771,7 +771,7 @@ impl<'a, 'b> Pattern<'a> for &'b str {\n         StrSearcher::new(haystack, self)\n     }\n \n-    /// Checks whether the pattern matches at the front of the haystack\n+    /// Checks whether the pattern matches at the front of the haystack.\n     #[inline]\n     fn is_prefix_of(self, haystack: &'a str) -> bool {\n         haystack.as_bytes().starts_with(self.as_bytes())\n@@ -788,7 +788,7 @@ impl<'a, 'b> Pattern<'a> for &'b str {\n         }\n     }\n \n-    /// Checks whether the pattern matches at the back of the haystack\n+    /// Checks whether the pattern matches at the back of the haystack.\n     #[inline]\n     fn is_suffix_of(self, haystack: &'a str) -> bool {\n         haystack.as_bytes().ends_with(self.as_bytes())"}]}