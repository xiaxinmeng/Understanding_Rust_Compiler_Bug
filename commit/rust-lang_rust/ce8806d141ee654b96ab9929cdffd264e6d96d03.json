{"sha": "ce8806d141ee654b96ab9929cdffd264e6d96d03", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlODgwNmQxNDFlZTY1NGI5NmFiOTkyOWNkZmZkMjY0ZTZkOTZkMDM=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-11-04T08:26:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-11-04T08:26:23Z"}, "message": "Merge pull request #74 from oli-obk/master\n\ncall user defined drop impls", "tree": {"sha": "fc13a716631bfa46c3ab8d60b5aa853f0e78725d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc13a716631bfa46c3ab8d60b5aa853f0e78725d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce8806d141ee654b96ab9929cdffd264e6d96d03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce8806d141ee654b96ab9929cdffd264e6d96d03", "html_url": "https://github.com/rust-lang/rust/commit/ce8806d141ee654b96ab9929cdffd264e6d96d03", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce8806d141ee654b96ab9929cdffd264e6d96d03/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8ba8e974afe769b738f27edea54625b1c79ff97", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8ba8e974afe769b738f27edea54625b1c79ff97", "html_url": "https://github.com/rust-lang/rust/commit/b8ba8e974afe769b738f27edea54625b1c79ff97"}, {"sha": "ff95efc52575c7ef8deb3c6628328d7a07442ec9", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff95efc52575c7ef8deb3c6628328d7a07442ec9", "html_url": "https://github.com/rust-lang/rust/commit/ff95efc52575c7ef8deb3c6628328d7a07442ec9"}], "stats": {"total": 314, "additions": 249, "deletions": 65}, "files": [{"sha": "86f22d33a257e22fce6e4656eae420a6322ba4db", "filename": "src/error.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ce8806d141ee654b96ab9929cdffd264e6d96d03/src%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce8806d141ee654b96ab9929cdffd264e6d96d03/src%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ferror.rs?ref=ce8806d141ee654b96ab9929cdffd264e6d96d03", "patch": "@@ -1,7 +1,7 @@\n use std::error::Error;\n use std::fmt;\n use rustc::mir;\n-use rustc::ty::BareFnTy;\n+use rustc::ty::{BareFnTy, Ty};\n use memory::Pointer;\n use rustc_const_math::ConstMathErr;\n use syntax::codemap::Span;\n@@ -46,6 +46,7 @@ pub enum EvalError<'tcx> {\n     ModifiedConstantMemory,\n     AssumptionNotHeld,\n     InlineAsm,\n+    TypeNotPrimitive(Ty<'tcx>),\n }\n \n pub type EvalResult<'tcx, T> = Result<T, EvalError<'tcx>>;\n@@ -106,6 +107,8 @@ impl<'tcx> Error for EvalError<'tcx> {\n                 \"`assume` argument was false\",\n             EvalError::InlineAsm =>\n                 \"cannot evaluate inline assembly\",\n+            EvalError::TypeNotPrimitive(_) =>\n+                \"expected primitive type, got nonprimitive\",\n         }\n     }\n \n@@ -134,6 +137,8 @@ impl<'tcx> fmt::Display for EvalError<'tcx> {\n             EvalError::AlignmentCheckFailed { required, has } =>\n                write!(f, \"tried to access memory with alignment {}, but alignment {} is required\",\n                       has, required),\n+            EvalError::TypeNotPrimitive(ref ty) =>\n+                write!(f, \"expected primitive type, got {}\", ty),\n             _ => write!(f, \"{}\", self.description()),\n         }\n     }"}, {"sha": "0cd7190db99197bf6b1975e9726d99202f07a742", "filename": "src/interpreter/mod.rs", "status": "modified", "additions": 35, "deletions": 2, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/ce8806d141ee654b96ab9929cdffd264e6d96d03/src%2Finterpreter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce8806d141ee654b96ab9929cdffd264e6d96d03/src%2Finterpreter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fmod.rs?ref=ce8806d141ee654b96ab9929cdffd264e6d96d03", "patch": "@@ -1325,11 +1325,11 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                         PrimValKind::from_uint_size(size)\n                     }\n                 } else {\n-                    bug!(\"primitive read of non-clike enum: {:?}\", ty);\n+                    return Err(EvalError::TypeNotPrimitive(ty));\n                 }\n             },\n \n-            _ => bug!(\"primitive read of non-primitive type: {:?}\", ty),\n+            _ => return Err(EvalError::TypeNotPrimitive(ty)),\n         };\n \n         Ok(kind)\n@@ -1552,6 +1552,39 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             }\n         }\n     }\n+\n+    /// convenience function to ensure correct usage of globals and code-sharing with locals\n+    pub fn modify_global<\n+        F: FnOnce(&mut Self, Option<Value>) -> EvalResult<'tcx, Option<Value>>,\n+    >(\n+        &mut self,\n+        cid: GlobalId<'tcx>,\n+        f: F,\n+    ) -> EvalResult<'tcx, ()> {\n+        let mut val = *self.globals.get(&cid).expect(\"global not cached\");\n+        if !val.mutable {\n+            return Err(EvalError::ModifiedConstantMemory);\n+        }\n+        val.data = f(self, val.data)?;\n+        *self.globals.get_mut(&cid).expect(\"already checked\") = val;\n+        Ok(())\n+    }\n+\n+    /// convenience function to ensure correct usage of locals and code-sharing with globals\n+    pub fn modify_local<\n+        F: FnOnce(&mut Self, Option<Value>) -> EvalResult<'tcx, Option<Value>>,\n+    >(\n+        &mut self,\n+        frame: usize,\n+        local: mir::Local,\n+        f: F,\n+    ) -> EvalResult<'tcx, ()> {\n+        let val = self.stack[frame].get_local(local);\n+        let val = f(self, val)?;\n+        // can't use `set_local` here, because that's only meant for going to an initialized value\n+        self.stack[frame].locals[local.index() - 1] = val;\n+        Ok(())\n+    }\n }\n \n impl<'tcx> Frame<'tcx> {"}, {"sha": "71fb83d580e48c1b02ab8baa4712b741cc52e57a", "filename": "src/interpreter/terminator/intrinsics.rs", "status": "modified", "additions": 81, "deletions": 10, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/ce8806d141ee654b96ab9929cdffd264e6d96d03/src%2Finterpreter%2Fterminator%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce8806d141ee654b96ab9929cdffd264e6d96d03/src%2Finterpreter%2Fterminator%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fterminator%2Fintrinsics.rs?ref=ce8806d141ee654b96ab9929cdffd264e6d96d03", "patch": "@@ -6,7 +6,7 @@ use rustc::ty::{self, Ty};\n \n use error::{EvalError, EvalResult};\n use interpreter::value::Value;\n-use interpreter::{EvalContext, Lvalue};\n+use interpreter::{EvalContext, Lvalue, LvalueExtra};\n use primval::{self, PrimVal, PrimValKind};\n \n impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n@@ -69,6 +69,26 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 self.write_value_to_ptr(arg_vals[1], dest, ty)?;\n             }\n \n+            \"atomic_fence_acq\" => {\n+                // we are inherently singlethreaded and singlecored, this is a nop\n+            }\n+\n+            \"atomic_xsub_rel\" => {\n+                let ty = substs.type_at(0);\n+                let ptr = arg_vals[0].read_ptr(&self.memory)?;\n+                let change = self.value_to_primval(arg_vals[1], ty)?;\n+                let old = self.read_value(ptr, ty)?;\n+                let old = match old {\n+                    Value::ByVal(val) => val,\n+                    Value::ByRef(_) => bug!(\"just read the value, can't be byref\"),\n+                    Value::ByValPair(..) => bug!(\"atomic_xsub_rel doesn't work with nonprimitives\"),\n+                };\n+                self.write_primval(dest, old)?;\n+                // FIXME: what do atomics do on overflow?\n+                let (val, _) = primval::binary_op(mir::BinOp::Sub, old, change)?;\n+                self.write_primval(Lvalue::from_ptr(ptr), val)?;\n+            }\n+\n             \"breakpoint\" => unimplemented!(), // halt miri\n \n             \"copy\" |\n@@ -101,6 +121,14 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 self.write_primval(dest, PrimVal::new(discr_val, PrimValKind::U64))?;\n             }\n \n+            \"drop_in_place\" => {\n+                let ty = substs.type_at(0);\n+                let ptr = arg_vals[0].read_ptr(&self.memory)?;\n+                let mut drops = Vec::new();\n+                self.drop(Lvalue::from_ptr(ptr), ty, &mut drops)?;\n+                self.eval_drop_impls(drops)?;\n+            }\n+\n             \"fabsf32\" => {\n                 let f = self.value_to_primval(arg_vals[2], f32)?\n                     .expect_f32(\"fabsf32 read non f32\");\n@@ -126,11 +154,34 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             \"forget\" => {}\n \n             \"init\" => {\n-                // FIXME(solson)\n-                let dest = self.force_allocation(dest)?.to_ptr();\n-\n                 let size = dest_layout.size(&self.tcx.data_layout).bytes() as usize;\n-                self.memory.write_repeat(dest, 0, size)?;\n+                let init = |this: &mut Self, val: Option<Value>| {\n+                    match val {\n+                        Some(Value::ByRef(ptr)) => {\n+                            this.memory.write_repeat(ptr, 0, size)?;\n+                            Ok(Some(Value::ByRef(ptr)))\n+                        },\n+                        None => match this.ty_to_primval_kind(dest_ty) {\n+                            Ok(kind) => Ok(Some(Value::ByVal(PrimVal::new(0, kind)))),\n+                            Err(_) => {\n+                                let ptr = this.alloc_ptr_with_substs(dest_ty, substs)?;\n+                                this.memory.write_repeat(ptr, 0, size)?;\n+                                Ok(Some(Value::ByRef(ptr)))\n+                            }\n+                        },\n+                        Some(Value::ByVal(value)) => Ok(Some(Value::ByVal(PrimVal::new(0, value.kind)))),\n+                        Some(Value::ByValPair(a, b)) => Ok(Some(Value::ByValPair(\n+                            PrimVal::new(0, a.kind),\n+                            PrimVal::new(0, b.kind),\n+                        ))),\n+                    }\n+                };\n+                match dest {\n+                    Lvalue::Local { frame, local } => self.modify_local(frame, local, init)?,\n+                    Lvalue::Ptr { ptr, extra: LvalueExtra::None } => self.memory.write_repeat(ptr, 0, size)?,\n+                    Lvalue::Ptr { .. } => bug!(\"init intrinsic tried to write to fat ptr target\"),\n+                    Lvalue::Global(cid) => self.modify_global(cid, init)?,\n+                }\n             }\n \n             \"min_align_of\" => {\n@@ -225,6 +276,15 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 let size_val = self.usize_primval(size);\n                 self.write_primval(dest, size_val)?;\n             }\n+\n+            \"min_align_of_val\" |\n+            \"align_of_val\" => {\n+                let ty = substs.type_at(0);\n+                let (_, align) = self.size_and_align_of_dst(ty, arg_vals[0])?;\n+                let align_val = self.usize_primval(align);\n+                self.write_primval(dest, align_val)?;\n+            }\n+\n             \"type_name\" => {\n                 let ty = substs.type_at(0);\n                 let ty_name = ty.to_string();\n@@ -248,12 +308,23 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             }\n \n             \"uninit\" => {\n-                // FIXME(solson): Attempt writing a None over the destination when it's an\n-                // Lvalue::Local (that is not ByRef). Otherwise do the mark_definedness as usual.\n-                let dest = self.force_allocation(dest)?.to_ptr();\n-\n                 let size = dest_layout.size(&self.tcx.data_layout).bytes() as usize;\n-                self.memory.mark_definedness(dest, size, false)?;\n+                let uninit = |this: &mut Self, val: Option<Value>| {\n+                    match val {\n+                        Some(Value::ByRef(ptr)) => {\n+                            this.memory.mark_definedness(ptr, size, false)?;\n+                            Ok(Some(Value::ByRef(ptr)))\n+                        },\n+                        None => Ok(None),\n+                        Some(_) => Ok(None),\n+                    }\n+                };\n+                match dest {\n+                    Lvalue::Local { frame, local } => self.modify_local(frame, local, uninit)?,\n+                    Lvalue::Ptr { ptr, extra: LvalueExtra::None } => self.memory.mark_definedness(ptr, size, false)?,\n+                    Lvalue::Ptr { .. } => bug!(\"uninit intrinsic tried to write to fat ptr target\"),\n+                    Lvalue::Global(cid) => self.modify_global(cid, uninit)?,\n+                }\n             }\n \n             name => return Err(EvalError::Unimplemented(format!(\"unimplemented intrinsic: {}\", name))),"}, {"sha": "fdd703e940bdf97eb56b0a65b9a0f4cbb741448e", "filename": "src/interpreter/terminator/mod.rs", "status": "modified", "additions": 102, "deletions": 15, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/ce8806d141ee654b96ab9929cdffd264e6d96d03/src%2Finterpreter%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce8806d141ee654b96ab9929cdffd264e6d96d03/src%2Finterpreter%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fterminator%2Fmod.rs?ref=ce8806d141ee654b96ab9929cdffd264e6d96d03", "patch": "@@ -104,14 +104,17 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             }\n \n             Drop { ref location, target, .. } => {\n-                // FIXME(solson)\n-                let lvalue = self.eval_lvalue(location)?;\n-                let lvalue = self.force_allocation(lvalue)?;\n+                let lval = self.eval_lvalue(location)?;\n \n-                let ptr = lvalue.to_ptr();\n                 let ty = self.lvalue_ty(location);\n-                self.drop(ptr, ty)?;\n+\n+                // we can't generate the drop stack frames on the fly,\n+                // because that would change our call stack\n+                // and very much confuse the further processing of the drop glue\n+                let mut drops = Vec::new();\n+                self.drop(lval, ty, &mut drops)?;\n                 self.goto_block(target);\n+                self.eval_drop_impls(drops)?;\n             }\n \n             Assert { ref cond, expected, ref msg, target, .. } => {\n@@ -143,6 +146,30 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         Ok(())\n     }\n \n+    fn eval_drop_impls(&mut self, drops: Vec<(DefId, Pointer, &'tcx Substs<'tcx>)>) -> EvalResult<'tcx, ()> {\n+        let span = self.frame().span;\n+        for (drop_def_id, adt_ptr, substs) in drops {\n+            // FIXME: supply a real span\n+            let mir = self.load_mir(drop_def_id)?;\n+            trace!(\"substs for drop glue: {:?}\", substs);\n+            self.push_stack_frame(\n+                drop_def_id,\n+                span,\n+                mir,\n+                substs,\n+                Lvalue::from_ptr(Pointer::zst_ptr()),\n+                StackPopCleanup::None,\n+            )?;\n+            let mut arg_locals = self.frame().mir.args_iter();\n+            let first = arg_locals.next().expect(\"drop impl has self arg\");\n+            assert!(arg_locals.next().is_none(), \"drop impl should have only one arg\");\n+            let dest = self.eval_lvalue(&mir::Lvalue::Local(first))?;\n+            let ty = self.frame().mir.local_decls[first].ty;\n+            self.write_value(Value::ByVal(PrimVal::from_ptr(adt_ptr)), dest, ty)?;\n+        }\n+        Ok(())\n+    }\n+\n     fn eval_fn_call(\n         &mut self,\n         def_id: DefId,\n@@ -294,6 +321,16 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 self.write_primval(dest, PrimVal::from_ptr(ptr))?;\n             }\n \n+            \"__rust_deallocate\" => {\n+                let ptr = args[0].read_ptr(&self.memory)?;\n+                // FIXME: insert sanity check for size and align?\n+                let _old_size = self.value_to_primval(args[1], usize)?\n+                    .expect_uint(\"__rust_deallocate second arg not usize\");\n+                let _align = self.value_to_primval(args[2], usize)?\n+                    .expect_uint(\"__rust_deallocate third arg not usize\");\n+                self.memory.deallocate(ptr)?;\n+            },\n+\n             \"__rust_reallocate\" => {\n                 let ptr = args[0].read_ptr(&self.memory)?;\n                 let size = self.value_to_primval(args[2], usize)?.expect_uint(\"__rust_reallocate third arg not usize\");\n@@ -471,25 +508,75 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         self.tcx.type_needs_drop_given_env(ty, &self.tcx.empty_parameter_environment())\n     }\n \n-    fn drop(&mut self, ptr: Pointer, ty: Ty<'tcx>) -> EvalResult<'tcx, ()> {\n+    /// push DefIds of drop impls and their argument on the given vector\n+    fn drop(\n+        &mut self,\n+        lval: Lvalue<'tcx>,\n+        ty: Ty<'tcx>,\n+        drop: &mut Vec<(DefId, Pointer, &'tcx Substs<'tcx>)>,\n+    ) -> EvalResult<'tcx, ()> {\n         if !self.type_needs_drop(ty) {\n             debug!(\"no need to drop {:?}\", ty);\n             return Ok(());\n         }\n-        trace!(\"-need to drop {:?}\", ty);\n-\n-        // TODO(solson): Call user-defined Drop::drop impls.\n+        trace!(\"-need to drop {:?} at {:?}\", ty, lval);\n \n         match ty.sty {\n-            ty::TyBox(_contents_ty) => {\n-                let contents_ptr = self.memory.read_ptr(ptr)?;\n-                // self.drop(contents_ptr, contents_ty)?;\n+            // special case `Box` to deallocate the inner allocation\n+            ty::TyBox(contents_ty) => {\n+                let val = self.read_lvalue(lval)?;\n+                let contents_ptr = val.read_ptr(&self.memory)?;\n+                self.drop(Lvalue::from_ptr(contents_ptr), contents_ty, drop)?;\n                 trace!(\"-deallocating box\");\n                 self.memory.deallocate(contents_ptr)?;\n-            }\n+            },\n \n-            // TODO(solson): Implement drop for other relevant types (e.g. aggregates).\n-            _ => {}\n+            ty::TyAdt(adt_def, substs) => {\n+                // FIXME: some structs are represented as ByValPair\n+                let adt_ptr = self.force_allocation(lval)?.to_ptr();\n+                // run drop impl before the fields' drop impls\n+                if let Some(drop_def_id) = adt_def.destructor() {\n+                    drop.push((drop_def_id, adt_ptr, substs));\n+                }\n+                let layout = self.type_layout(ty);\n+                let fields = match *layout {\n+                    Layout::Univariant { ref variant, .. } => {\n+                        adt_def.struct_variant().fields.iter().zip(&variant.offsets)\n+                    },\n+                    Layout::General { ref variants, .. } => {\n+                        let discr_val = self.read_discriminant_value(adt_ptr, ty)?;\n+                        match adt_def.variants.iter().position(|v| discr_val == v.disr_val.to_u64_unchecked()) {\n+                            // start at offset 1, to skip over the discriminant\n+                            Some(i) => adt_def.variants[i].fields.iter().zip(&variants[i].offsets[1..]),\n+                            None => return Err(EvalError::InvalidDiscriminant),\n+                        }\n+                    },\n+                    Layout::StructWrappedNullablePointer { nndiscr, ref nonnull, .. } => {\n+                        let discr = self.read_discriminant_value(adt_ptr, ty)?;\n+                        if discr == nndiscr {\n+                            adt_def.variants[discr as usize].fields.iter().zip(&nonnull.offsets)\n+                        } else {\n+                            // FIXME: the zst variant might contain zst types that impl Drop\n+                            return Ok(()); // nothing to do, this is zero sized (e.g. `None`)\n+                        }\n+                    },\n+                    _ => bug!(\"{:?} is not an adt layout\", layout),\n+                };\n+                for (field_ty, offset) in fields {\n+                    let field_ty = self.monomorphize_field_ty(field_ty, substs);\n+                    self.drop(Lvalue::from_ptr(adt_ptr.offset(offset.bytes() as isize)), field_ty, drop)?;\n+                }\n+            },\n+            ty::TyTuple(fields) => {\n+                // FIXME: some tuples are represented as ByValPair\n+                let ptr = self.force_allocation(lval)?.to_ptr();\n+                for (i, field_ty) in fields.iter().enumerate() {\n+                    let offset = self.get_field_offset(ty, i)?.bytes() as isize;\n+                    self.drop(Lvalue::from_ptr(ptr.offset(offset)), field_ty, drop)?;\n+                }\n+            },\n+            // other types do not need to process drop\n+            _ => {},\n         }\n \n         Ok(())"}, {"sha": "d9285a41e41ab545d38105fce596da952d01ab98", "filename": "src/interpreter/value.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ce8806d141ee654b96ab9929cdffd264e6d96d03/src%2Finterpreter%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce8806d141ee654b96ab9929cdffd264e6d96d03/src%2Finterpreter%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fvalue.rs?ref=ce8806d141ee654b96ab9929cdffd264e6d96d03", "patch": "@@ -23,12 +23,9 @@ impl<'a, 'tcx: 'a> Value {\n         match *self {\n             ByRef(ptr) => mem.read_ptr(ptr),\n \n-            ByVal(ptr) if ptr.try_as_ptr().is_some() => {\n-                Ok(ptr.try_as_ptr().unwrap())\n+            ByVal(ptr) | ByValPair(ptr, _) => {\n+                Ok(ptr.try_as_ptr().expect(\"unimplemented: `read_ptr` on non-ptr primval\"))\n             }\n-\n-            ByValPair(..) => unimplemented!(),\n-            ByVal(_other) => unimplemented!(),\n         }\n     }\n "}, {"sha": "b533f916469881a96c23657ea33f4d65f6e2d218", "filename": "tests/run-pass/heap.rs", "status": "modified", "additions": 11, "deletions": 16, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/ce8806d141ee654b96ab9929cdffd264e6d96d03/tests%2Frun-pass%2Fheap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce8806d141ee654b96ab9929cdffd264e6d96d03/tests%2Frun-pass%2Fheap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fheap.rs?ref=ce8806d141ee654b96ab9929cdffd264e6d96d03", "patch": "@@ -11,25 +11,20 @@ fn make_box_syntax() -> Box<(i16, i16)> {\n fn allocate_reallocate() {\n     let mut s = String::new();\n \n-    // 4 byte heap alloc (__rust_allocate)\n-    s.push('f');\n-    assert_eq!(s.len(), 1);\n-    assert_eq!(s.capacity(), 4);\n+    // 6 byte heap alloc (__rust_allocate)\n+    s.push_str(\"foobar\");\n+    assert_eq!(s.len(), 6);\n+    assert_eq!(s.capacity(), 6);\n \n-    // heap size doubled to 8 (__rust_reallocate)\n-    // FIXME: String::push_str is broken because it hits the std::vec::SetLenOnDrop code and we\n-    // don't call destructors in miri yet.\n-    s.push('o');\n-    s.push('o');\n-    s.push('o');\n-    s.push('o');\n-    assert_eq!(s.len(), 5);\n-    assert_eq!(s.capacity(), 8);\n+    // heap size doubled to 12 (__rust_reallocate)\n+    s.push_str(\"baz\");\n+    assert_eq!(s.len(), 9);\n+    assert_eq!(s.capacity(), 12);\n \n-    // heap size reduced to 5 (__rust_reallocate)\n+    // heap size reduced to 9  (__rust_reallocate)\n     s.shrink_to_fit();\n-    assert_eq!(s.len(), 5);\n-    assert_eq!(s.capacity(), 5);\n+    assert_eq!(s.len(), 9);\n+    assert_eq!(s.capacity(), 9);\n }\n \n fn main() {"}, {"sha": "c96818932d777e11effd0397b189aac8112dc499", "filename": "tests/run-pass/rc.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ce8806d141ee654b96ab9929cdffd264e6d96d03/tests%2Frun-pass%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce8806d141ee654b96ab9929cdffd264e6d96d03/tests%2Frun-pass%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Frc.rs?ref=ce8806d141ee654b96ab9929cdffd264e6d96d03", "patch": "@@ -1,5 +1,3 @@\n-//error-pattern: no mir for `std::result::unwrap_failed::__STATIC_FMTSTR`\n-\n use std::cell::RefCell;\n use std::rc::Rc;\n ", "previous_filename": "tests/compile-fail/rc.rs"}, {"sha": "b3a88014e6f9a08f72383b650f3b6970e33d74e9", "filename": "tests/run-pass/vecs.rs", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ce8806d141ee654b96ab9929cdffd264e6d96d03/tests%2Frun-pass%2Fvecs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce8806d141ee654b96ab9929cdffd264e6d96d03/tests%2Frun-pass%2Fvecs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fvecs.rs?ref=ce8806d141ee654b96ab9929cdffd264e6d96d03", "patch": "@@ -1,13 +1,3 @@\n-// FIXME: The normal `vec!` macro is currently broken in Miri because it hits the\n-// std::vec::SetLenOnDrop code and Miri doesn't call destructors yet.\n-macro_rules! miri_vec {\n-    ($($e:expr),*) => ({\n-        let mut v = Vec::new();\n-        $(v.push($e);)*\n-        v\n-    });\n-}\n-\n fn make_vec() -> Vec<u8> {\n     let mut v = Vec::with_capacity(4);\n     v.push(1);\n@@ -16,22 +6,22 @@ fn make_vec() -> Vec<u8> {\n }\n \n fn make_vec_macro() -> Vec<u8> {\n-    miri_vec![1, 2]\n+    vec![1, 2]\n }\n \n fn make_vec_macro_repeat() -> Vec<u8> {\n-    miri_vec![42, 42, 42, 42, 42]\n+    vec![42; 5]\n }\n \n fn vec_into_iter() -> u8 {\n-    miri_vec![1, 2, 3, 4]\n+    vec![1, 2, 3, 4]\n         .into_iter()\n         .map(|x| x * x)\n         .fold(0, |x, y| x + y)\n }\n \n fn vec_reallocate() -> Vec<u8> {\n-    let mut v = miri_vec![1, 2];\n+    let mut v = vec![1, 2];\n     v.push(3);\n     v.push(4);\n     v.push(5);"}, {"sha": "12138be5af9768e6b39423995859dc5952d9e841", "filename": "tests/run-pass/zst_box.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ce8806d141ee654b96ab9929cdffd264e6d96d03/tests%2Frun-pass%2Fzst_box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce8806d141ee654b96ab9929cdffd264e6d96d03/tests%2Frun-pass%2Fzst_box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fzst_box.rs?ref=ce8806d141ee654b96ab9929cdffd264e6d96d03", "patch": "@@ -0,0 +1,8 @@\n+fn main() {\n+    let x = Box::new(());\n+    let y = Box::new(());\n+    drop(y);\n+    let z = Box::new(());\n+    drop(x);\n+    drop(z);\n+}"}]}