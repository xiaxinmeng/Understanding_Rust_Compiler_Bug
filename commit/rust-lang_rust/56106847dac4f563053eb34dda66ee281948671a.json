{"sha": "56106847dac4f563053eb34dda66ee281948671a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2MTA2ODQ3ZGFjNGY1NjMwNTNlYjM0ZGRhNjZlZTI4MTk0ODY3MWE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-18T17:03:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-18T17:03:31Z"}, "message": "Rollup merge of #67749 - gilescope:keyword-in, r=Dylan-DPC\n\nkeyword docs for else and inkeyword docs for else and in.\n\nFirst cut of else and in keyword docs. Comments and suggestions more than welcome.", "tree": {"sha": "eac64f5c8d6b7ab4daac79b1afdf2e639c0bf77a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eac64f5c8d6b7ab4daac79b1afdf2e639c0bf77a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56106847dac4f563053eb34dda66ee281948671a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeclRjCRBK7hj4Ov3rIwAAdHIIAKr5hvEumJwi0fuXghDlRWXS\ncqFJNWEtRXS/rgfJq5mS9pv+YISILrAiRIdvvIEgjTZHROf8k+4+la1kjCAsvZ/T\nNCQtzastQqV1+y5X5MKtQdhrE80A/RL8LtihUGak62gT8LkJKLqnrR1VwJcHIRn/\nfr/mR0grppknKn2RXvyPuBQ9ICEnwHgitHzqz0hdcWf9sQ08iCGMiEDmRcumvN5L\nlVeLRTUzJchYe6QSAwOHt2sPM3csUdypuX36uj4YThTWAzZ2712TLjLIpC2IJLQs\nAUdBMmlGrAFqK+NiYy77939wrI0AFfRtqWnBr26IUFIjWo6IP2yic/pps48OXcM=\n=9rWX\n-----END PGP SIGNATURE-----\n", "payload": "tree eac64f5c8d6b7ab4daac79b1afdf2e639c0bf77a\nparent f509b26a7730d721ef87423a72b3fdf8724b4afa\nparent a113609bdf0f05a3f32ab2f19bed38bde0d7063a\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1584551011 +0100\ncommitter GitHub <noreply@github.com> 1584551011 +0100\n\nRollup merge of #67749 - gilescope:keyword-in, r=Dylan-DPC\n\nkeyword docs for else and inkeyword docs for else and in.\n\nFirst cut of else and in keyword docs. Comments and suggestions more than welcome.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56106847dac4f563053eb34dda66ee281948671a", "html_url": "https://github.com/rust-lang/rust/commit/56106847dac4f563053eb34dda66ee281948671a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56106847dac4f563053eb34dda66ee281948671a/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f509b26a7730d721ef87423a72b3fdf8724b4afa", "url": "https://api.github.com/repos/rust-lang/rust/commits/f509b26a7730d721ef87423a72b3fdf8724b4afa", "html_url": "https://github.com/rust-lang/rust/commit/f509b26a7730d721ef87423a72b3fdf8724b4afa"}, {"sha": "a113609bdf0f05a3f32ab2f19bed38bde0d7063a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a113609bdf0f05a3f32ab2f19bed38bde0d7063a", "html_url": "https://github.com/rust-lang/rust/commit/a113609bdf0f05a3f32ab2f19bed38bde0d7063a"}], "stats": {"total": 61, "additions": 56, "deletions": 5}, "files": [{"sha": "314424631fcbf7a16d4caa5a8ec3cc2c4eb32bbc", "filename": "src/libstd/keyword_docs.rs", "status": "modified", "additions": 56, "deletions": 5, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/56106847dac4f563053eb34dda66ee281948671a/src%2Flibstd%2Fkeyword_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56106847dac4f563053eb34dda66ee281948671a/src%2Flibstd%2Fkeyword_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fkeyword_docs.rs?ref=56106847dac4f563053eb34dda66ee281948671a", "patch": "@@ -234,12 +234,55 @@ mod crate_keyword {}\n \n #[doc(keyword = \"else\")]\n //\n-/// What to do when an [`if`] condition does not hold.\n+/// What expression to evaluate when an [`if`] condition evaluates to [`false`].\n ///\n-/// The documentation for this keyword is [not yet complete]. Pull requests welcome!\n+/// `else` expressions are optional. When no else expressions are supplied it is assumed to evaluate\n+/// to the unit type `()`.\n+///\n+/// The type that the `else` blocks evaluate to must be compatible with the type that the `if` block\n+/// evaluates to.\n+///\n+/// As can be seen below, `else` must be followed by either: `if`, `if let`, or a block `{}` and it\n+/// will return the value of that expression.\n ///\n+/// ```rust\n+/// let result = if true == false {\n+///     \"oh no\"\n+/// } else if \"something\" == \"other thing\" {\n+///     \"oh dear\"\n+/// } else if let Some(200) = \"blarg\".parse::<i32>().ok() {\n+///     \"uh oh\"\n+/// } else {\n+///     println!(\"Sneaky side effect.\");\n+///     \"phew, nothing's broken\"\n+/// };\n+/// ```\n+///\n+/// Here's another example but here we do not try and return an expression:\n+///\n+/// ```rust\n+/// if true == false {\n+///     println!(\"oh no\");\n+/// } else if \"something\" == \"other thing\" {\n+///     println!(\"oh dear\");\n+/// } else if let Some(200) = \"blarg\".parse::<i32>().ok() {\n+///     println!(\"uh oh\");\n+/// } else {\n+///     println!(\"phew, nothing's broken\");\n+/// }\n+/// ```\n+///\n+/// The above is _still_ an expression but it will always evaluate to `()`.\n+///\n+/// There is possibly no limit to the number of `else` blocks that could follow an `if` expression\n+/// however if you have several then a [`match`] expression might be preferable.\n+///\n+/// Read more about control flow in the [Rust Book].\n+///\n+/// [Rust Book]: ../book/ch03-05-control-flow.html#handling-multiple-conditions-with-else-if\n+/// [`match`]: keyword.match.html\n+/// [`false`]: keyword.false.html\n /// [`if`]: keyword.if.html\n-/// [not yet complete]: https://github.com/rust-lang/rust/issues/34601\n mod else_keyword {}\n \n #[doc(keyword = \"enum\")]\n@@ -637,10 +680,18 @@ mod impl_keyword {}\n //\n /// Iterate over a series of values with [`for`].\n ///\n-/// The documentation for this keyword is [not yet complete]. Pull requests welcome!\n+/// The expression immediately following `in` must implement the [`Iterator`] trait.\n ///\n+/// ## Literal Examples:\n+///\n+///    * `for _ **in** 1..3 {}` - Iterate over an exclusive range up to but excluding 3.\n+///    * `for _ **in** 1..=3 {}` - Iterate over an inclusive range up to and includeing 3.\n+///\n+/// (Read more about [range patterns])\n+///\n+/// [`Iterator`]: ../book/ch13-04-performance.html\n+/// [`range patterns`]: ../reference/patterns.html?highlight=range#range-patterns\n /// [`for`]: keyword.for.html\n-/// [not yet complete]: https://github.com/rust-lang/rust/issues/34601\n mod in_keyword {}\n \n #[doc(keyword = \"let\")]"}]}