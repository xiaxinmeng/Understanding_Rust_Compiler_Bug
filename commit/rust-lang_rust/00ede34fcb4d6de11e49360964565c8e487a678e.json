{"sha": "00ede34fcb4d6de11e49360964565c8e487a678e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwZWRlMzRmY2I0ZDZkZTExZTQ5MzYwOTY0NTY1YzhlNDg3YTY3OGU=", "commit": {"author": {"name": "James Miller", "email": "bladeon@gmail.com", "date": "2013-04-29T00:57:49Z"}, "committer": {"name": "James Miller", "email": "bladeon@gmail.com", "date": "2013-04-29T01:08:14Z"}, "message": "Add `--linker` option to pass flags to the linker", "tree": {"sha": "361c4057561fc38d07c1b38222ee174632d9e51b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/361c4057561fc38d07c1b38222ee174632d9e51b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/00ede34fcb4d6de11e49360964565c8e487a678e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/00ede34fcb4d6de11e49360964565c8e487a678e", "html_url": "https://github.com/rust-lang/rust/commit/00ede34fcb4d6de11e49360964565c8e487a678e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/00ede34fcb4d6de11e49360964565c8e487a678e/comments", "author": null, "committer": null, "parents": [{"sha": "9f03d45c56b37b36912c16bd5b4fb4723fd91cb7", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f03d45c56b37b36912c16bd5b4fb4723fd91cb7", "html_url": "https://github.com/rust-lang/rust/commit/9f03d45c56b37b36912c16bd5b4fb4723fd91cb7"}], "stats": {"total": 123, "additions": 70, "deletions": 53}, "files": [{"sha": "aaa425c93348a9ffcad445cafb4d527333036535", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/00ede34fcb4d6de11e49360964565c8e487a678e/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00ede34fcb4d6de11e49360964565c8e487a678e/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=00ede34fcb4d6de11e49360964565c8e487a678e", "patch": "@@ -904,6 +904,9 @@ pub fn link_binary(sess: Session,\n     // extern libraries might live, based on the addl_lib_search_paths\n     cc_args.push_all(rpath::get_rpath_flags(sess, &output));\n \n+    // Finally add all the linker arguments provided on the command line\n+    cc_args.push_all(sess.opts.linker_args);\n+\n     debug!(\"%s link args: %s\", cc_prog, str::connect(cc_args, ~\" \"));\n     // We run 'cc' here\n     let prog = run::program_output(cc_prog, cc_args);"}, {"sha": "fbcbd4461ac109f3e05f70f4e92a7a1fb29b6de5", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 65, "deletions": 53, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/00ede34fcb4d6de11e49360964565c8e487a678e/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00ede34fcb4d6de11e49360964565c8e487a678e/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=00ede34fcb4d6de11e49360964565c8e487a678e", "patch": "@@ -645,9 +645,16 @@ pub fn build_session_options(binary: @~str,\n         Some(s) => s\n     };\n \n-    let addl_lib_search_paths =\n-        getopts::opt_strs(matches, ~\"L\")\n-        .map(|s| Path(*s));\n+    let addl_lib_search_paths = getopts::opt_strs(matches, ~\"L\").map(|s| Path(*s));\n+\n+    let linker_args = getopts::opt_strs(matches, ~\"linker\").flat_map( |a| {\n+        let mut args = ~[];\n+        for str::each_split_char(*a, ',') |arg| {\n+            args.push(str::from_slice(arg));\n+        }\n+        args\n+    });\n+\n     let cfg = parse_cfgspecs(getopts::opt_strs(matches, ~\"cfg\"), demitter);\n     let test = opt_present(matches, ~\"test\");\n     let android_cross_path = getopts::opt_maybe_str(\n@@ -664,6 +671,7 @@ pub fn build_session_options(binary: @~str,\n         jit: jit,\n         output_type: output_type,\n         addl_lib_search_paths: addl_lib_search_paths,\n+        linker_args: linker_args,\n         maybe_sysroot: sysroot_opt,\n         target_triple: target,\n         target_feature: target_feature,\n@@ -737,62 +745,66 @@ pub fn parse_pretty(sess: Session, name: &str) -> pp_mode {\n // rustc command line options\n pub fn optgroups() -> ~[getopts::groups::OptGroup] {\n  ~[\n-  optflag(~\"\",  ~\"bin\", ~\"Compile an executable crate (default)\"),\n-  optflag(~\"c\", ~\"\",    ~\"Compile and assemble, but do not link\"),\n-  optmulti(~\"\", ~\"cfg\", ~\"Configure the compilation\n-                          environment\", ~\"SPEC\"),\n-  optflag(~\"\",  ~\"emit-llvm\",\n-                        ~\"Produce an LLVM bitcode file\"),\n-  optflag(~\"h\", ~\"help\",~\"Display this message\"),\n-  optmulti(~\"L\", ~\"\",   ~\"Add a directory to the library search path\",\n-                              ~\"PATH\"),\n-  optflag(~\"\",  ~\"lib\", ~\"Compile a library crate\"),\n-  optflag(~\"\",  ~\"ls\",  ~\"List the symbols defined by a library crate\"),\n-  optflag(~\"\", ~\"no-trans\",\n-                        ~\"Run all passes except translation; no output\"),\n-  optflag(~\"O\", ~\"\",    ~\"Equivalent to --opt-level=2\"),\n-  optopt(~\"o\", ~\"\",     ~\"Write output to <filename>\", ~\"FILENAME\"),\n-  optopt(~\"\", ~\"opt-level\",\n-                        ~\"Optimize with possible levels 0-3\", ~\"LEVEL\"),\n-  optopt( ~\"\",  ~\"out-dir\",\n-                        ~\"Write output to compiler-chosen filename\n-                          in <dir>\", ~\"DIR\"),\n-  optflag(~\"\", ~\"parse-only\",\n-                        ~\"Parse only; do not compile, assemble, or link\"),\n-  optflagopt(~\"\", ~\"pretty\",\n-                        ~\"Pretty-print the input instead of compiling;\n+  optflag(\"\",  \"bin\", \"Compile an executable crate (default)\"),\n+  optflag(\"c\", \"\",    \"Compile and assemble, but do not link\"),\n+  optmulti(\"\", \"cfg\", \"Configure the compilation\n+                          environment\", \"SPEC\"),\n+  optflag(\"\",  \"emit-llvm\",\n+                        \"Produce an LLVM bitcode file\"),\n+  optflag(\"h\", \"help\",\"Display this message\"),\n+  optmulti(\"L\", \"\",   \"Add a directory to the library search path\",\n+                              \"PATH\"),\n+  optflag(\"\",  \"lib\", \"Compile a library crate\"),\n+  optmulti(\"\",  \"linker\", \"FLAGS is a comma-separated list of flags\n+                            passed to the linker\", \"FLAGS\"),\n+  optflag(\"\",  \"ls\",  \"List the symbols defined by a library crate\"),\n+  optflag(\"\", \"no-trans\",\n+                        \"Run all passes except translation; no output\"),\n+  optflag(\"O\", \"\",    \"Equivalent to --opt-level=2\"),\n+  optopt(\"o\", \"\",     \"Write output to <filename>\", \"FILENAME\"),\n+  optopt(\"\", \"opt-level\",\n+                        \"Optimize with possible levels 0-3\", \"LEVEL\"),\n+  optopt( \"\",  \"out-dir\",\n+                        \"Write output to compiler-chosen filename\n+                          in <dir>\", \"DIR\"),\n+  optflag(\"\", \"parse-only\",\n+                        \"Parse only; do not compile, assemble, or link\"),\n+  optflagopt(\"\", \"pretty\",\n+                        \"Pretty-print the input instead of compiling;\n                           valid types are: normal (un-annotated source),\n                           expanded (crates expanded),\n                           typed (crates expanded, with type annotations),\n                           or identified (fully parenthesized,\n-                          AST nodes and blocks with IDs)\", ~\"TYPE\"),\n-  optflag(~\"S\", ~\"\",    ~\"Compile only; do not assemble or link\"),\n-  optflag(~\"\", ~\"save-temps\",\n-                        ~\"Write intermediate files (.bc, .opt.bc, .o)\n+                          AST nodes and blocks with IDs)\", \"TYPE\"),\n+  optflag(\"\", \"print-link-args\", \"Prints all the arguments that would be\n+                                    passed to the linker.\"),\n+  optflag(\"S\", \"\",    \"Compile only; do not assemble or link\"),\n+  optflag(\"\", \"save-temps\",\n+                        \"Write intermediate files (.bc, .opt.bc, .o)\n                           in addition to normal output\"),\n-  optopt(~\"\", ~\"sysroot\",\n-                        ~\"Override the system root\", ~\"PATH\"),\n-  optflag(~\"\", ~\"test\", ~\"Build a test harness\"),\n-  optopt(~\"\", ~\"target\",\n-                        ~\"Target triple cpu-manufacturer-kernel[-os]\n+  optopt(\"\", \"sysroot\",\n+                        \"Override the system root\", \"PATH\"),\n+  optflag(\"\", \"test\", \"Build a test harness\"),\n+  optopt(\"\", \"target\",\n+                        \"Target triple cpu-manufacturer-kernel[-os]\n                           to compile for (see chapter 3.4 of http://www.sourceware.org/autobook/\n-                          for detail)\", ~\"TRIPLE\"),\n-  optopt(~\"\", ~\"target-feature\",\n-                        ~\"Target specific attributes (llc -mattr=help\n-                          for detail)\", ~\"FEATURE\"),\n-  optopt(~\"\", ~\"android-cross-path\",\n-         ~\"The path to the Android NDK\", \"PATH\"),\n-  optmulti(~\"W\", ~\"warn\",\n-                        ~\"Set lint warnings\", ~\"OPT\"),\n-  optmulti(~\"A\", ~\"allow\",\n-                        ~\"Set lint allowed\", ~\"OPT\"),\n-  optmulti(~\"D\", ~\"deny\",\n-                        ~\"Set lint denied\", ~\"OPT\"),\n-  optmulti(~\"F\", ~\"forbid\",\n-                        ~\"Set lint forbidden\", ~\"OPT\"),\n-  optmulti(~\"Z\", ~\"\",   ~\"Set internal debugging options\", \"FLAG\"),\n-  optflag( ~\"v\", ~\"version\",\n-                        ~\"Print version info and exit\"),\n+                          for detail)\", \"TRIPLE\"),\n+  optopt(\"\", \"target-feature\",\n+                        \"Target specific attributes (llc -mattr=help\n+                          for detail)\", \"FEATURE\"),\n+  optopt(\"\", \"android-cross-path\",\n+         \"The path to the Android NDK\", \"PATH\"),\n+  optmulti(\"W\", \"warn\",\n+                        \"Set lint warnings\", \"OPT\"),\n+  optmulti(\"A\", \"allow\",\n+                        \"Set lint allowed\", \"OPT\"),\n+  optmulti(\"D\", \"deny\",\n+                        \"Set lint denied\", \"OPT\"),\n+  optmulti(\"F\", \"forbid\",\n+                        \"Set lint forbidden\", \"OPT\"),\n+  optmulti(\"Z\", \"\",   \"Set internal debugging options\", \"FLAG\"),\n+  optflag( \"v\", \"version\",\n+                        \"Print version info and exit\"),\n  ]\n }\n "}, {"sha": "94d1da20f9268467b9c4275a5f13da26edc57b04", "filename": "src/librustc/driver/session.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00ede34fcb4d6de11e49360964565c8e487a678e/src%2Flibrustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00ede34fcb4d6de11e49360964565c8e487a678e/src%2Flibrustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fsession.rs?ref=00ede34fcb4d6de11e49360964565c8e487a678e", "patch": "@@ -122,6 +122,7 @@ pub struct options {\n     jit: bool,\n     output_type: back::link::output_type,\n     addl_lib_search_paths: ~[Path],\n+    linker_args: ~[~str],\n     maybe_sysroot: Option<Path>,\n     target_triple: ~str,\n     target_feature: ~str,\n@@ -299,6 +300,7 @@ pub fn basic_options() -> @options {\n         jit: false,\n         output_type: link::output_type_exe,\n         addl_lib_search_paths: ~[],\n+        linker_args:~[],\n         maybe_sysroot: None,\n         target_triple: host_triple(),\n         target_feature: ~\"\","}]}