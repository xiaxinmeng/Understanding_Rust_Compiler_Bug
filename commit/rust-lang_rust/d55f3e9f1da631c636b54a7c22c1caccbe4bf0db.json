{"sha": "d55f3e9f1da631c636b54a7c22c1caccbe4bf0db", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1NWYzZTlmMWRhNjMxYzYzNmI1NGE3YzIyYzFjYWNjYmU0YmYwZGI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-29T01:28:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-29T01:28:55Z"}, "message": "Auto merge of #68625 - JohnTitor:rollup-20pfcru, r=JohnTitor\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #68289 (Don't ICE on path-collision in dep-graph)\n - #68378 (Add BTreeMap::remove_entry)\n - #68553 (Fix run button positionning in case of scrolling)\n - #68556 (rustdoc: Fix re-exporting primitive types)\n - #68582 (Add E0727 long explanation)\n - #68592 (fix: typo in vec.rs)\n - #68619 (Fix a few spelling mistakes)\n - #68620 (Update links to WASI docs in time.rs module)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "c8ece031d2ade32610e37f45cce8665a005b30aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8ece031d2ade32610e37f45cce8665a005b30aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d55f3e9f1da631c636b54a7c22c1caccbe4bf0db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d55f3e9f1da631c636b54a7c22c1caccbe4bf0db", "html_url": "https://github.com/rust-lang/rust/commit/d55f3e9f1da631c636b54a7c22c1caccbe4bf0db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d55f3e9f1da631c636b54a7c22c1caccbe4bf0db/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3761dcd3467441f78939ccb3b341b03b6a7558d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/3761dcd3467441f78939ccb3b341b03b6a7558d7", "html_url": "https://github.com/rust-lang/rust/commit/3761dcd3467441f78939ccb3b341b03b6a7558d7"}, {"sha": "c0df1be21e91067004bfb04e26dc34c8078e6423", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0df1be21e91067004bfb04e26dc34c8078e6423", "html_url": "https://github.com/rust-lang/rust/commit/c0df1be21e91067004bfb04e26dc34c8078e6423"}], "stats": {"total": 244, "additions": 203, "deletions": 41}, "files": [{"sha": "4dc004864fd465988cccfcd5ac575df4320ebf83", "filename": "src/liballoc/collections/btree/map.rs", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/d55f3e9f1da631c636b54a7c22c1caccbe4bf0db/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d55f3e9f1da631c636b54a7c22c1caccbe4bf0db/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs?ref=d55f3e9f1da631c636b54a7c22c1caccbe4bf0db", "patch": "@@ -806,13 +806,42 @@ impl<K: Ord, V> BTreeMap<K, V> {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn remove<Q: ?Sized>(&mut self, key: &Q) -> Option<V>\n+    where\n+        K: Borrow<Q>,\n+        Q: Ord,\n+    {\n+        self.remove_entry(key).map(|(_, v)| v)\n+    }\n+\n+    /// Removes a key from the map, returning the stored key and value if the key\n+    /// was previously in the map.\n+    ///\n+    /// The key may be any borrowed form of the map's key type, but the ordering\n+    /// on the borrowed form *must* match the ordering on the key type.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// #![feature(btreemap_remove_entry)]\n+    /// use std::collections::BTreeMap;\n+    ///\n+    /// let mut map = BTreeMap::new();\n+    /// map.insert(1, \"a\");\n+    /// assert_eq!(map.remove_entry(&1), Some((1, \"a\")));\n+    /// assert_eq!(map.remove_entry(&1), None);\n+    /// ```\n+    #[unstable(feature = \"btreemap_remove_entry\", issue = \"66714\")]\n+    pub fn remove_entry<Q: ?Sized>(&mut self, key: &Q) -> Option<(K, V)>\n     where\n         K: Borrow<Q>,\n         Q: Ord,\n     {\n         match search::search_tree(self.root.as_mut(), key) {\n             Found(handle) => Some(\n-                OccupiedEntry { handle, length: &mut self.length, _marker: PhantomData }.remove(),\n+                OccupiedEntry { handle, length: &mut self.length, _marker: PhantomData }\n+                    .remove_entry(),\n             ),\n             GoDown(_) => None,\n         }"}, {"sha": "26a7812f58e01033d72ce933c1e0e353e926c58c", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d55f3e9f1da631c636b54a7c22c1caccbe4bf0db/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d55f3e9f1da631c636b54a7c22c1caccbe4bf0db/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=d55f3e9f1da631c636b54a7c22c1caccbe4bf0db", "patch": "@@ -176,7 +176,7 @@ use crate::raw_vec::RawVec;\n /// ```\n ///\n /// In Rust, it's more common to pass slices as arguments rather than vectors\n-/// when you just want to provide a read access. The same goes for [`String`] and\n+/// when you just want to provide read access. The same goes for [`String`] and\n /// [`&str`].\n ///\n /// # Capacity and reallocation"}, {"sha": "258723bb39d837308413b5c1c21a97d4b0ef3639", "filename": "src/librustc/dep_graph/graph.rs", "status": "modified", "additions": 30, "deletions": 9, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/d55f3e9f1da631c636b54a7c22c1caccbe4bf0db/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d55f3e9f1da631c636b54a7c22c1caccbe4bf0db/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fgraph.rs?ref=d55f3e9f1da631c636b54a7c22c1caccbe4bf0db", "patch": "@@ -6,6 +6,7 @@ use rustc_data_structures::sharded::{self, Sharded};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::sync::{AtomicU32, AtomicU64, Lock, Lrc, Ordering};\n use rustc_errors::Diagnostic;\n+use rustc_hir::def_id::DefId;\n use rustc_index::vec::{Idx, IndexVec};\n use smallvec::SmallVec;\n use std::collections::hash_map::Entry;\n@@ -677,18 +678,33 @@ impl DepGraph {\n                     } else {\n                         match dep_dep_node.kind {\n                             DepKind::Hir | DepKind::HirBody | DepKind::CrateMetadata => {\n-                                if dep_dep_node.extract_def_id(tcx).is_none() {\n+                                if let Some(def_id) = dep_dep_node.extract_def_id(tcx) {\n+                                    if def_id_corresponds_to_hir_dep_node(tcx, def_id) {\n+                                        // The `DefPath` has corresponding node,\n+                                        // and that node should have been marked\n+                                        // either red or green in `data.colors`.\n+                                        bug!(\n+                                            \"DepNode {:?} should have been \\\n+                                             pre-marked as red or green but wasn't.\",\n+                                            dep_dep_node\n+                                        );\n+                                    } else {\n+                                        // This `DefPath` does not have a\n+                                        // corresponding `DepNode` (e.g. a\n+                                        // struct field), and the ` DefPath`\n+                                        // collided with the `DefPath` of a\n+                                        // proper item that existed in the\n+                                        // previous compilation session.\n+                                        //\n+                                        // Since the given `DefPath` does not\n+                                        // denote the item that previously\n+                                        // existed, we just fail to mark green.\n+                                        return None;\n+                                    }\n+                                } else {\n                                     // If the node does not exist anymore, we\n                                     // just fail to mark green.\n                                     return None;\n-                                } else {\n-                                    // If the node does exist, it should have\n-                                    // been pre-allocated.\n-                                    bug!(\n-                                        \"DepNode {:?} should have been \\\n-                                          pre-allocated but wasn't.\",\n-                                        dep_dep_node\n-                                    )\n                                 }\n                             }\n                             _ => {\n@@ -899,6 +915,11 @@ impl DepGraph {\n     }\n }\n \n+fn def_id_corresponds_to_hir_dep_node(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n+    let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n+    def_id.index == hir_id.owner\n+}\n+\n /// A \"work product\" is an intermediate result that we save into the\n /// incremental directory for later re-use. The primary example are\n /// the object files that we save for each partition at code"}, {"sha": "ed8129b1e09a5eacd0302fb94ddd9fa86d9b7ea2", "filename": "src/librustc/mir/traversal.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d55f3e9f1da631c636b54a7c22c1caccbe4bf0db/src%2Flibrustc%2Fmir%2Ftraversal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d55f3e9f1da631c636b54a7c22c1caccbe4bf0db/src%2Flibrustc%2Fmir%2Ftraversal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftraversal.rs?ref=d55f3e9f1da631c636b54a7c22c1caccbe4bf0db", "patch": "@@ -4,7 +4,7 @@ use super::*;\n \n /// Preorder traversal of a graph.\n ///\n-/// Preorder traversal is when each node is visited before an of it's\n+/// Preorder traversal is when each node is visited before any of its\n /// successors\n ///\n /// ```text\n@@ -82,7 +82,7 @@ impl<'a, 'tcx> Iterator for Preorder<'a, 'tcx> {\n \n /// Postorder traversal of a graph.\n ///\n-/// Postorder traversal is when each node is visited after all of it's\n+/// Postorder traversal is when each node is visited after all of its\n /// successors, except when the successor is only reachable by a back-edge\n ///\n ///"}, {"sha": "c3d9ed088981d432042be43a590de0428b1da85b", "filename": "src/librustc_error_codes/error_codes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d55f3e9f1da631c636b54a7c22c1caccbe4bf0db/src%2Flibrustc_error_codes%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d55f3e9f1da631c636b54a7c22c1caccbe4bf0db/src%2Flibrustc_error_codes%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes.rs?ref=d55f3e9f1da631c636b54a7c22c1caccbe4bf0db", "patch": "@@ -397,6 +397,7 @@ E0718: include_str!(\"./error_codes/E0718.md\"),\n E0720: include_str!(\"./error_codes/E0720.md\"),\n E0723: include_str!(\"./error_codes/E0723.md\"),\n E0725: include_str!(\"./error_codes/E0725.md\"),\n+E0727: include_str!(\"./error_codes/E0727.md\"),\n E0728: include_str!(\"./error_codes/E0728.md\"),\n E0729: include_str!(\"./error_codes/E0729.md\"),\n E0730: include_str!(\"./error_codes/E0730.md\"),\n@@ -607,6 +608,5 @@ E0746: include_str!(\"./error_codes/E0746.md\"),\n     E0722, // Malformed `#[optimize]` attribute\n     E0724, // `#[ffi_returns_twice]` is only allowed in foreign functions\n     E0726, // non-explicit (not `'_`) elided lifetime in unsupported position\n-    E0727, // `async` generators are not yet supported\n     E0739, // invalid track_caller application/syntax\n }"}, {"sha": "528807ee9afe273177bcb35a64899ff112fc97cc", "filename": "src/librustc_error_codes/error_codes/E0727.md", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d55f3e9f1da631c636b54a7c22c1caccbe4bf0db/src%2Flibrustc_error_codes%2Ferror_codes%2FE0727.md", "raw_url": "https://github.com/rust-lang/rust/raw/d55f3e9f1da631c636b54a7c22c1caccbe4bf0db/src%2Flibrustc_error_codes%2Ferror_codes%2FE0727.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0727.md?ref=d55f3e9f1da631c636b54a7c22c1caccbe4bf0db", "patch": "@@ -0,0 +1,26 @@\n+A `yield` clause was used in an `async` context.\n+\n+Example of erroneous code:\n+\n+```compile_fail\n+#![feature(generators)]\n+\n+let generator = || {\n+    async {\n+        yield;\n+    }\n+};\n+```\n+\n+Here, the `yield` keyword is used in an `async` block,\n+which is not yet supported.\n+\n+To fix this error, you have to move `yield` out of the `async` block:\n+\n+```\n+#![feature(generators)]\n+\n+let generator = || {\n+    yield;\n+};\n+```"}, {"sha": "df72bf0b56e61c07fc9ba70b123667ceacced973", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 33, "deletions": 4, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/d55f3e9f1da631c636b54a7c22c1caccbe4bf0db/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d55f3e9f1da631c636b54a7c22c1caccbe4bf0db/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=d55f3e9f1da631c636b54a7c22c1caccbe4bf0db", "patch": "@@ -445,12 +445,41 @@ fn build_module(cx: &DocContext<'_>, did: DefId, visited: &mut FxHashSet<DefId>)\n         // two namespaces, so the target may be listed twice. Make sure we only\n         // visit each node at most once.\n         for &item in cx.tcx.item_children(did).iter() {\n-            let def_id = item.res.def_id();\n             if item.vis == ty::Visibility::Public {\n-                if did == def_id || !visited.insert(def_id) {\n-                    continue;\n+                if let Some(def_id) = item.res.mod_def_id() {\n+                    if did == def_id || !visited.insert(def_id) {\n+                        continue;\n+                    }\n                 }\n-                if let Some(i) = try_inline(cx, item.res, item.ident.name, None, visited) {\n+                if let Res::PrimTy(p) = item.res {\n+                    // Primitive types can't be inlined so generate an import instead.\n+                    items.push(clean::Item {\n+                        name: None,\n+                        attrs: clean::Attributes::default(),\n+                        source: clean::Span::empty(),\n+                        def_id: cx.tcx.hir().local_def_id_from_node_id(ast::CRATE_NODE_ID),\n+                        visibility: clean::Public,\n+                        stability: None,\n+                        deprecation: None,\n+                        inner: clean::ImportItem(clean::Import::Simple(\n+                            item.ident.to_string(),\n+                            clean::ImportSource {\n+                                path: clean::Path {\n+                                    global: false,\n+                                    res: item.res,\n+                                    segments: vec![clean::PathSegment {\n+                                        name: clean::PrimitiveType::from(p).as_str().to_string(),\n+                                        args: clean::GenericArgs::AngleBracketed {\n+                                            args: Vec::new(),\n+                                            bindings: Vec::new(),\n+                                        },\n+                                    }],\n+                                },\n+                                did: None,\n+                            },\n+                        )),\n+                    });\n+                } else if let Some(i) = try_inline(cx, item.res, item.ident.name, None, visited) {\n                     items.extend(i)\n                 }\n             }"}, {"sha": "8501fee56cfaedfd5b41cd8c01d3df1ee2a16282", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d55f3e9f1da631c636b54a7c22c1caccbe4bf0db/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d55f3e9f1da631c636b54a7c22c1caccbe4bf0db/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=d55f3e9f1da631c636b54a7c22c1caccbe4bf0db", "patch": "@@ -1290,6 +1290,19 @@ impl From<ast::FloatTy> for PrimitiveType {\n     }\n }\n \n+impl From<hir::PrimTy> for PrimitiveType {\n+    fn from(prim_ty: hir::PrimTy) -> PrimitiveType {\n+        match prim_ty {\n+            hir::PrimTy::Int(int_ty) => int_ty.into(),\n+            hir::PrimTy::Uint(uint_ty) => uint_ty.into(),\n+            hir::PrimTy::Float(float_ty) => float_ty.into(),\n+            hir::PrimTy::Str => PrimitiveType::Str,\n+            hir::PrimTy::Bool => PrimitiveType::Bool,\n+            hir::PrimTy::Char => PrimitiveType::Char,\n+        }\n+    }\n+}\n+\n #[derive(Clone, PartialEq, Eq, Debug)]\n pub enum Visibility {\n     Public,"}, {"sha": "e110545c6f27b05d67fae5896978d827a3e64213", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d55f3e9f1da631c636b54a7c22c1caccbe4bf0db/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d55f3e9f1da631c636b54a7c22c1caccbe4bf0db/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=d55f3e9f1da631c636b54a7c22c1caccbe4bf0db", "patch": "@@ -570,14 +570,7 @@ pub fn resolve_type(cx: &DocContext<'_>, path: Path, id: hir::HirId) -> Type {\n     }\n \n     let is_generic = match path.res {\n-        Res::PrimTy(p) => match p {\n-            hir::PrimTy::Str => return Primitive(PrimitiveType::Str),\n-            hir::PrimTy::Bool => return Primitive(PrimitiveType::Bool),\n-            hir::PrimTy::Char => return Primitive(PrimitiveType::Char),\n-            hir::PrimTy::Int(int_ty) => return Primitive(int_ty.into()),\n-            hir::PrimTy::Uint(uint_ty) => return Primitive(uint_ty.into()),\n-            hir::PrimTy::Float(float_ty) => return Primitive(float_ty.into()),\n-        },\n+        Res::PrimTy(p) => return Primitive(PrimitiveType::from(p)),\n         Res::SelfTy(..) if path.segments.len() == 1 => {\n             return Generic(kw::SelfUpper.to_string());\n         }"}, {"sha": "c3313ba63ef13785f55ad1b6b1cc63cf86e1836c", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d55f3e9f1da631c636b54a7c22c1caccbe4bf0db/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d55f3e9f1da631c636b54a7c22c1caccbe4bf0db/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=d55f3e9f1da631c636b54a7c22c1caccbe4bf0db", "patch": "@@ -1171,11 +1171,14 @@ impl clean::ImportSource {\n         display_fn(move |f| match self.did {\n             Some(did) => resolved_path(f, did, &self.path, true, false),\n             _ => {\n-                for (i, seg) in self.path.segments.iter().enumerate() {\n-                    if i > 0 {\n-                        write!(f, \"::\")?\n-                    }\n-                    write!(f, \"{}\", seg.name)?;\n+                for seg in &self.path.segments[..self.path.segments.len() - 1] {\n+                    write!(f, \"{}::\", seg.name)?;\n+                }\n+                let name = self.path.last_name();\n+                if let hir::def::Res::PrimTy(p) = self.path.res {\n+                    primitive_link(f, PrimitiveType::from(p), name)?;\n+                } else {\n+                    write!(f, \"{}\", name)?;\n                 }\n                 Ok(())\n             }"}, {"sha": "2a603d9900fb9daaef57645e62ef3f90a8e70c51", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d55f3e9f1da631c636b54a7c22c1caccbe4bf0db/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d55f3e9f1da631c636b54a7c22c1caccbe4bf0db/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=d55f3e9f1da631c636b54a7c22c1caccbe4bf0db", "patch": "@@ -22,7 +22,7 @@ use syntax::token::{self, Token};\n pub fn render_with_highlighting(\n     src: &str,\n     class: Option<&str>,\n-    extension: Option<&str>,\n+    playground_button: Option<&str>,\n     tooltip: Option<(&str, &str)>,\n ) -> String {\n     debug!(\"highlighting: ================\\n{}\\n==============\", src);\n@@ -58,10 +58,7 @@ pub fn render_with_highlighting(\n         Ok(highlighted_source) => {\n             write_header(class, &mut out).unwrap();\n             write!(out, \"{}\", highlighted_source).unwrap();\n-            if let Some(extension) = extension {\n-                write!(out, \"{}\", extension).unwrap();\n-            }\n-            write_footer(&mut out).unwrap();\n+            write_footer(&mut out, playground_button).unwrap();\n         }\n         Err(()) => {\n             // If errors are encountered while trying to highlight, just emit\n@@ -433,6 +430,6 @@ fn write_header(class: Option<&str>, out: &mut dyn Write) -> io::Result<()> {\n     write!(out, \"<div class=\\\"example-wrap\\\"><pre class=\\\"rust {}\\\">\\n\", class.unwrap_or(\"\"))\n }\n \n-fn write_footer(out: &mut dyn Write) -> io::Result<()> {\n-    write!(out, \"</pre></div>\\n\")\n+fn write_footer(out: &mut dyn Write, playground_button: Option<&str>) -> io::Result<()> {\n+    write!(out, \"</pre>{}</div>\\n\", if let Some(button) = playground_button { button } else { \"\" })\n }"}, {"sha": "0dfe82c50146964cefadabac61c91ad9384fb78f", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d55f3e9f1da631c636b54a7c22c1caccbe4bf0db/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/d55f3e9f1da631c636b54a7c22c1caccbe4bf0db/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=d55f3e9f1da631c636b54a7c22c1caccbe4bf0db", "patch": "@@ -136,7 +136,7 @@ summary {\n \toutline: none;\n }\n \n-code, pre {\n+code, pre, a.test-arrow {\n \tfont-family: \"Source Code Pro\", monospace;\n }\n .docblock code, .docblock-short code {\n@@ -305,6 +305,7 @@ nav.sub {\n .rustdoc:not(.source) .example-wrap {\n \tdisplay: inline-flex;\n \tmargin-bottom: 10px;\n+\tposition: relative;\n }\n \n .example-wrap {\n@@ -878,6 +879,7 @@ a.test-arrow {\n \tfont-size: 130%;\n \ttop: 5px;\n \tright: 5px;\n+\tz-index: 1;\n }\n a.test-arrow:hover{\n \ttext-decoration: none;"}, {"sha": "68a549158730da224aa48f2cf984f5aa8cdcd6e3", "filename": "src/libstd/time.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d55f3e9f1da631c636b54a7c22c1caccbe4bf0db/src%2Flibstd%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d55f3e9f1da631c636b54a7c22c1caccbe4bf0db/src%2Flibstd%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime.rs?ref=d55f3e9f1da631c636b54a7c22c1caccbe4bf0db", "patch": "@@ -76,7 +76,7 @@ pub use core::time::Duration;\n /// [QueryPerformanceCounter]: https://docs.microsoft.com/en-us/windows/win32/api/profileapi/nf-profileapi-queryperformancecounter\n /// [`insecure_time` usercall]: https://edp.fortanix.com/docs/api/fortanix_sgx_abi/struct.Usercalls.html#method.insecure_time\n /// [timekeeping in SGX]: https://edp.fortanix.com/docs/concepts/rust-std/#codestdtimecode\n-/// [__wasi_clock_time_get (Monotonic Clock)]: https://github.com/CraneStation/wasmtime/blob/master/docs/WASI-api.md#clock_time_get\n+/// [__wasi_clock_time_get (Monotonic Clock)]: https://github.com/WebAssembly/WASI/blob/master/phases/snapshot/docs.md#clock_time_get\n /// [clock_gettime (Monotonic Clock)]: https://linux.die.net/man/3/clock_gettime\n /// [mach_absolute_time]: https://developer.apple.com/library/archive/documentation/Darwin/Conceptual/KernelProgramming/services/services.html\n /// [clock_time_get (Monotonic Clock)]: https://nuxi.nl/cloudabi/#clock_time_get\n@@ -157,7 +157,7 @@ pub struct Instant(time::Instant);\n /// [timekeeping in SGX]: https://edp.fortanix.com/docs/concepts/rust-std/#codestdtimecode\n /// [gettimeofday]: http://man7.org/linux/man-pages/man2/gettimeofday.2.html\n /// [clock_gettime (Realtime Clock)]: https://linux.die.net/man/3/clock_gettime\n-/// [__wasi_clock_time_get (Realtime Clock)]: https://github.com/CraneStation/wasmtime/blob/master/docs/WASI-api.md#clock_time_get\n+/// [__wasi_clock_time_get (Realtime Clock)]: https://github.com/WebAssembly/WASI/blob/master/phases/snapshot/docs.md#clock_time_get\n /// [GetSystemTimeAsFileTime]: https://docs.microsoft.com/en-us/windows/win32/api/sysinfoapi/nf-sysinfoapi-getsystemtimeasfiletime\n ///\n /// **Disclaimer:** These system calls might change over time."}, {"sha": "ee81be76bafe340b041b2fb545b57cf5067a7127", "filename": "src/test/incremental/issue-62649-path-collisions-happen.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d55f3e9f1da631c636b54a7c22c1caccbe4bf0db/src%2Ftest%2Fincremental%2Fissue-62649-path-collisions-happen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d55f3e9f1da631c636b54a7c22c1caccbe4bf0db/src%2Ftest%2Fincremental%2Fissue-62649-path-collisions-happen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fissue-62649-path-collisions-happen.rs?ref=d55f3e9f1da631c636b54a7c22c1caccbe4bf0db", "patch": "@@ -0,0 +1,13 @@\n+// revisions: rpass1 rpass2\n+\n+#[cfg(rpass1)]\n+pub trait Something {\n+    fn foo();\n+}\n+\n+#[cfg(rpass2)]\n+pub struct Something {\n+    pub foo: u8,\n+}\n+\n+fn main() {}"}, {"sha": "b2e9fa43b395afb4c102228a6a46fa4fb3cfebfa", "filename": "src/test/rustdoc/auxiliary/primitive-reexport.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d55f3e9f1da631c636b54a7c22c1caccbe4bf0db/src%2Ftest%2Frustdoc%2Fauxiliary%2Fprimitive-reexport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d55f3e9f1da631c636b54a7c22c1caccbe4bf0db/src%2Ftest%2Frustdoc%2Fauxiliary%2Fprimitive-reexport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fauxiliary%2Fprimitive-reexport.rs?ref=d55f3e9f1da631c636b54a7c22c1caccbe4bf0db", "patch": "@@ -0,0 +1,8 @@\n+// compile-flags: --emit metadata --crate-type lib --edition 2018\n+\n+#![crate_name = \"foo\"]\n+\n+pub mod bar {\n+    pub use bool;\n+    pub use char as my_char;\n+}"}, {"sha": "de18360d4077c2615a47a5081ee0b0cd647ccf56", "filename": "src/test/rustdoc/primitive-reexport.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d55f3e9f1da631c636b54a7c22c1caccbe4bf0db/src%2Ftest%2Frustdoc%2Fprimitive-reexport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d55f3e9f1da631c636b54a7c22c1caccbe4bf0db/src%2Ftest%2Frustdoc%2Fprimitive-reexport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fprimitive-reexport.rs?ref=d55f3e9f1da631c636b54a7c22c1caccbe4bf0db", "patch": "@@ -0,0 +1,28 @@\n+// aux-build: primitive-reexport.rs\n+// compile-flags:--extern foo --edition 2018\n+\n+#![crate_name = \"bar\"]\n+\n+// @has bar/p/index.html\n+// @has - '//code' 'pub use bool;'\n+// @has - '//code/a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\"]' 'bool'\n+// @has - '//code' 'pub use char as my_char;'\n+// @has - '//code/a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.char.html\"]' 'char'\n+pub mod p {\n+    pub use foo::bar::*;\n+}\n+\n+// @has bar/baz/index.html\n+// @has - '//code' 'pub use bool;'\n+// @has - '//code/a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\"]' 'bool'\n+// @has - '//code' 'pub use char as my_char;'\n+// @has - '//code/a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.char.html\"]' 'char'\n+pub use foo::bar as baz;\n+\n+// @has bar/index.html\n+// @has - '//code' 'pub use str;'\n+// @has - '//code/a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\"]' 'str'\n+// @has - '//code' 'pub use i32 as my_i32;'\n+// @has - '//code/a[@href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\"]' 'i32'\n+pub use str;\n+pub use i32 as my_i32;"}]}