{"sha": "13dc0d7938c0f343dd13240dd316eb3a22036e89", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzZGMwZDc5MzhjMGYzNDNkZDEzMjQwZGQzMTZlYjNhMjIwMzZlODk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-13T04:46:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-13T04:46:31Z"}, "message": "auto merge of #15584 : alexcrichton/rust/warn-annoyances, r=cmr\n\n* Don't warn about `#[crate_name]` if `--crate-name` is specified\r\n* Don't warn about non camel case identifiers on `#[repr(C)]` structs\r\n* Switch `mode` to `mode_t` in libc.", "tree": {"sha": "0120b5923c4939fbad5e67ce9d4ecbbde17c9a78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0120b5923c4939fbad5e67ce9d4ecbbde17c9a78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13dc0d7938c0f343dd13240dd316eb3a22036e89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13dc0d7938c0f343dd13240dd316eb3a22036e89", "html_url": "https://github.com/rust-lang/rust/commit/13dc0d7938c0f343dd13240dd316eb3a22036e89", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13dc0d7938c0f343dd13240dd316eb3a22036e89/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad7ef8c27cffcaf14a6e75fad35d42daee83b8cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad7ef8c27cffcaf14a6e75fad35d42daee83b8cd", "html_url": "https://github.com/rust-lang/rust/commit/ad7ef8c27cffcaf14a6e75fad35d42daee83b8cd"}, {"sha": "2dfbe7f9893ef8ff7efc86345941216e564323e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/2dfbe7f9893ef8ff7efc86345941216e564323e7", "html_url": "https://github.com/rust-lang/rust/commit/2dfbe7f9893ef8ff7efc86345941216e564323e7"}], "stats": {"total": 173, "additions": 109, "deletions": 64}, "files": [{"sha": "fc4144a2868638c2f7598aaf0aabb6ba4347bed5", "filename": "src/liblibc/lib.rs", "status": "modified", "additions": 61, "deletions": 57, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/13dc0d7938c0f343dd13240dd316eb3a22036e89/src%2Fliblibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13dc0d7938c0f343dd13240dd316eb3a22036e89/src%2Fliblibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc%2Flib.rs?ref=13dc0d7938c0f343dd13240dd316eb3a22036e89", "patch": "@@ -2008,6 +2008,7 @@ pub mod consts {\n         pub mod posix88 {\n             use types::os::arch::c95::c_int;\n             use types::common::c95::c_void;\n+            use types::os::arch::posix88::mode_t;\n \n             pub static O_RDONLY : c_int = 0;\n             pub static O_WRONLY : c_int = 1;\n@@ -2016,20 +2017,20 @@ pub mod consts {\n             pub static O_CREAT : c_int = 64;\n             pub static O_EXCL : c_int = 128;\n             pub static O_TRUNC : c_int = 512;\n-            pub static S_IFIFO : c_int = 4096;\n-            pub static S_IFCHR : c_int = 8192;\n-            pub static S_IFBLK : c_int = 24576;\n-            pub static S_IFDIR : c_int = 16384;\n-            pub static S_IFREG : c_int = 32768;\n-            pub static S_IFLNK : c_int = 40960;\n-            pub static S_IFMT : c_int = 61440;\n-            pub static S_IEXEC : c_int = 64;\n-            pub static S_IWRITE : c_int = 128;\n-            pub static S_IREAD : c_int = 256;\n-            pub static S_IRWXU : c_int = 448;\n-            pub static S_IXUSR : c_int = 64;\n-            pub static S_IWUSR : c_int = 128;\n-            pub static S_IRUSR : c_int = 256;\n+            pub static S_IFIFO : mode_t = 4096;\n+            pub static S_IFCHR : mode_t = 8192;\n+            pub static S_IFBLK : mode_t = 24576;\n+            pub static S_IFDIR : mode_t = 16384;\n+            pub static S_IFREG : mode_t = 32768;\n+            pub static S_IFLNK : mode_t = 40960;\n+            pub static S_IFMT : mode_t = 61440;\n+            pub static S_IEXEC : mode_t = 64;\n+            pub static S_IWRITE : mode_t = 128;\n+            pub static S_IREAD : mode_t = 256;\n+            pub static S_IRWXU : mode_t = 448;\n+            pub static S_IXUSR : mode_t = 64;\n+            pub static S_IWUSR : mode_t = 128;\n+            pub static S_IRUSR : mode_t = 256;\n             pub static F_OK : c_int = 0;\n             pub static R_OK : c_int = 4;\n             pub static W_OK : c_int = 2;\n@@ -2220,6 +2221,7 @@ pub mod consts {\n         pub mod posix88 {\n             use types::os::arch::c95::c_int;\n             use types::common::c95::c_void;\n+            use types::os::arch::posix88::mode_t;\n \n             pub static O_RDONLY : c_int = 0;\n             pub static O_WRONLY : c_int = 1;\n@@ -2228,20 +2230,20 @@ pub mod consts {\n             pub static O_CREAT : c_int = 256;\n             pub static O_EXCL : c_int = 1024;\n             pub static O_TRUNC : c_int = 512;\n-            pub static S_IFIFO : c_int = 4096;\n-            pub static S_IFCHR : c_int = 8192;\n-            pub static S_IFBLK : c_int = 24576;\n-            pub static S_IFDIR : c_int = 16384;\n-            pub static S_IFREG : c_int = 32768;\n-            pub static S_IFLNK : c_int = 40960;\n-            pub static S_IFMT : c_int = 61440;\n-            pub static S_IEXEC : c_int = 64;\n-            pub static S_IWRITE : c_int = 128;\n-            pub static S_IREAD : c_int = 256;\n-            pub static S_IRWXU : c_int = 448;\n-            pub static S_IXUSR : c_int = 64;\n-            pub static S_IWUSR : c_int = 128;\n-            pub static S_IRUSR : c_int = 256;\n+            pub static S_IFIFO : mode_t = 4096;\n+            pub static S_IFCHR : mode_t = 8192;\n+            pub static S_IFBLK : mode_t = 24576;\n+            pub static S_IFDIR : mode_t = 16384;\n+            pub static S_IFREG : mode_t = 32768;\n+            pub static S_IFLNK : mode_t = 40960;\n+            pub static S_IFMT : mode_t = 61440;\n+            pub static S_IEXEC : mode_t = 64;\n+            pub static S_IWRITE : mode_t = 128;\n+            pub static S_IREAD : mode_t = 256;\n+            pub static S_IRWXU : mode_t = 448;\n+            pub static S_IXUSR : mode_t = 64;\n+            pub static S_IWUSR : mode_t = 128;\n+            pub static S_IRUSR : mode_t = 256;\n             pub static F_OK : c_int = 0;\n             pub static R_OK : c_int = 4;\n             pub static W_OK : c_int = 2;\n@@ -2759,6 +2761,7 @@ pub mod consts {\n         pub mod posix88 {\n             use types::common::c95::c_void;\n             use types::os::arch::c95::c_int;\n+            use types::os::arch::posix88::mode_t;\n \n             pub static O_RDONLY : c_int = 0;\n             pub static O_WRONLY : c_int = 1;\n@@ -2767,20 +2770,20 @@ pub mod consts {\n             pub static O_CREAT : c_int = 512;\n             pub static O_EXCL : c_int = 2048;\n             pub static O_TRUNC : c_int = 1024;\n-            pub static S_IFIFO : c_int = 4096;\n-            pub static S_IFCHR : c_int = 8192;\n-            pub static S_IFBLK : c_int = 24576;\n-            pub static S_IFDIR : c_int = 16384;\n-            pub static S_IFREG : c_int = 32768;\n-            pub static S_IFLNK : c_int = 40960;\n-            pub static S_IFMT : c_int = 61440;\n-            pub static S_IEXEC : c_int = 64;\n-            pub static S_IWRITE : c_int = 128;\n-            pub static S_IREAD : c_int = 256;\n-            pub static S_IRWXU : c_int = 448;\n-            pub static S_IXUSR : c_int = 64;\n-            pub static S_IWUSR : c_int = 128;\n-            pub static S_IRUSR : c_int = 256;\n+            pub static S_IFIFO : mode_t = 4096;\n+            pub static S_IFCHR : mode_t = 8192;\n+            pub static S_IFBLK : mode_t = 24576;\n+            pub static S_IFDIR : mode_t = 16384;\n+            pub static S_IFREG : mode_t = 32768;\n+            pub static S_IFLNK : mode_t = 40960;\n+            pub static S_IFMT : mode_t = 61440;\n+            pub static S_IEXEC : mode_t = 64;\n+            pub static S_IWRITE : mode_t = 128;\n+            pub static S_IREAD : mode_t = 256;\n+            pub static S_IRWXU : mode_t = 448;\n+            pub static S_IXUSR : mode_t = 64;\n+            pub static S_IWUSR : mode_t = 128;\n+            pub static S_IRUSR : mode_t = 256;\n             pub static F_OK : c_int = 0;\n             pub static R_OK : c_int = 4;\n             pub static W_OK : c_int = 2;\n@@ -3148,6 +3151,7 @@ pub mod consts {\n         pub mod posix88 {\n             use types::common::c95::c_void;\n             use types::os::arch::c95::c_int;\n+            use types::os::arch::posix88::mode_t;\n \n             pub static O_RDONLY : c_int = 0;\n             pub static O_WRONLY : c_int = 1;\n@@ -3156,20 +3160,20 @@ pub mod consts {\n             pub static O_CREAT : c_int = 512;\n             pub static O_EXCL : c_int = 2048;\n             pub static O_TRUNC : c_int = 1024;\n-            pub static S_IFIFO : c_int = 4096;\n-            pub static S_IFCHR : c_int = 8192;\n-            pub static S_IFBLK : c_int = 24576;\n-            pub static S_IFDIR : c_int = 16384;\n-            pub static S_IFREG : c_int = 32768;\n-            pub static S_IFLNK : c_int = 40960;\n-            pub static S_IFMT : c_int = 61440;\n-            pub static S_IEXEC : c_int = 64;\n-            pub static S_IWRITE : c_int = 128;\n-            pub static S_IREAD : c_int = 256;\n-            pub static S_IRWXU : c_int = 448;\n-            pub static S_IXUSR : c_int = 64;\n-            pub static S_IWUSR : c_int = 128;\n-            pub static S_IRUSR : c_int = 256;\n+            pub static S_IFIFO : mode_t = 4096;\n+            pub static S_IFCHR : mode_t = 8192;\n+            pub static S_IFBLK : mode_t = 24576;\n+            pub static S_IFDIR : mode_t = 16384;\n+            pub static S_IFREG : mode_t = 32768;\n+            pub static S_IFLNK : mode_t = 40960;\n+            pub static S_IFMT : mode_t = 61440;\n+            pub static S_IEXEC : mode_t = 64;\n+            pub static S_IWRITE : mode_t = 128;\n+            pub static S_IREAD : mode_t = 256;\n+            pub static S_IRWXU : mode_t = 448;\n+            pub static S_IXUSR : mode_t = 64;\n+            pub static S_IWUSR : mode_t = 128;\n+            pub static S_IRUSR : mode_t = 256;\n             pub static F_OK : c_int = 0;\n             pub static R_OK : c_int = 4;\n             pub static W_OK : c_int = 2;\n@@ -3858,7 +3862,7 @@ pub mod funcs {\n             use types::os::arch::posix88::mode_t;\n \n             extern {\n-                pub fn open(path: *const c_char, oflag: c_int, mode: c_int)\n+                pub fn open(path: *const c_char, oflag: c_int, mode: mode_t)\n                             -> c_int;\n                 pub fn creat(path: *const c_char, mode: mode_t) -> c_int;\n                 pub fn fcntl(fd: c_int, cmd: c_int, ...) -> c_int;"}, {"sha": "a1df360a11b8e2878fd43ca3c33240e828fa7488", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/13dc0d7938c0f343dd13240dd316eb3a22036e89/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13dc0d7938c0f343dd13240dd316eb3a22036e89/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=13dc0d7938c0f343dd13240dd316eb3a22036e89", "patch": "@@ -555,6 +555,12 @@ pub fn find_crate_name(sess: Option<&Session>,\n         s\n     };\n \n+    // Look in attributes 100% of the time to make sure the attribute is marked\n+    // as used. After doing this, however, favor crate names from the command\n+    // line.\n+    let attr_crate_name = attrs.iter().find(|at| at.check_name(\"crate_name\"))\n+                               .and_then(|at| at.value_str().map(|s| (at, s)));\n+\n     match sess {\n         Some(sess) => {\n             match sess.opts.crate_name {\n@@ -565,9 +571,7 @@ pub fn find_crate_name(sess: Option<&Session>,\n         None => {}\n     }\n \n-    let crate_name = attrs.iter().find(|at| at.check_name(\"crate_name\"))\n-                          .and_then(|at| at.value_str().map(|s| (at, s)));\n-    match crate_name {\n+    match attr_crate_name {\n         Some((attr, s)) => return validate(s.get().to_string(), Some(attr.span)),\n         None => {}\n     }"}, {"sha": "62236d753ad26e8dc80ad4b8ac08fae63ce3710b", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/13dc0d7938c0f343dd13240dd316eb3a22036e89/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13dc0d7938c0f343dd13240dd316eb3a22036e89/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=13dc0d7938c0f343dd13240dd316eb3a22036e89", "patch": "@@ -758,6 +758,11 @@ impl LintPass for NonCamelCaseTypes {\n             }\n         }\n \n+        let has_extern_repr = it.attrs.iter().fold(attr::ReprAny, |acc, attr| {\n+            attr::find_repr_attr(cx.tcx.sess.diagnostic(), attr, acc)\n+        }) == attr::ReprExtern;\n+        if has_extern_repr { return }\n+\n         match it.node {\n             ast::ItemTy(..) | ast::ItemStruct(..) => {\n                 check_case(cx, \"type\", it.ident, it.span)"}, {"sha": "26ba601f73ec1cbddf6fa613a3e9c9ac7d0b8a3d", "filename": "src/librustuv/file.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13dc0d7938c0f343dd13240dd316eb3a22036e89/src%2Flibrustuv%2Ffile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13dc0d7938c0f343dd13240dd316eb3a22036e89/src%2Flibrustuv%2Ffile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Ffile.rs?ref=13dc0d7938c0f343dd13240dd316eb3a22036e89", "patch": "@@ -547,7 +547,7 @@ mod test {\n         let path = &\"./tmp/mk_rm_dir\".to_c_str();\n         let mode = S_IWUSR | S_IRUSR;\n \n-        let result = FsRequest::mkdir(l(), path, mode);\n+        let result = FsRequest::mkdir(l(), path, mode as c_int);\n         assert!(result.is_ok());\n \n         let result = FsRequest::rmdir(l(), path);"}, {"sha": "74ab19d0aa67cfce91c0fa05e99ba57fa45a11b7", "filename": "src/libstd/io/fs.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/13dc0d7938c0f343dd13240dd316eb3a22036e89/src%2Flibstd%2Fio%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13dc0d7938c0f343dd13240dd316eb3a22036e89/src%2Flibstd%2Fio%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ffs.rs?ref=13dc0d7938c0f343dd13240dd316eb3a22036e89", "patch": "@@ -330,6 +330,11 @@ pub fn lstat(path: &Path) -> IoResult<FileStat> {\n }\n \n fn from_rtio(s: rtio::FileStat) -> FileStat {\n+    #[cfg(windows)]\n+    type Mode = libc::c_int;\n+    #[cfg(unix)]\n+    type Mode = libc::mode_t;\n+\n     let rtio::FileStat {\n         size, kind, perm, created, modified,\n         accessed, device, inode, rdev,\n@@ -338,7 +343,7 @@ fn from_rtio(s: rtio::FileStat) -> FileStat {\n \n     FileStat {\n         size: size,\n-        kind: match (kind as libc::c_int) & libc::S_IFMT {\n+        kind: match (kind as Mode) & libc::S_IFMT {\n             libc::S_IFREG => io::TypeFile,\n             libc::S_IFDIR => io::TypeDirectory,\n             libc::S_IFIFO => io::TypeNamedPipe,"}, {"sha": "d51054542b9c8a62ad4879a12018a9c562a3cfa9", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/13dc0d7938c0f343dd13240dd316eb3a22036e89/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13dc0d7938c0f343dd13240dd316eb3a22036e89/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=13dc0d7938c0f343dd13240dd316eb3a22036e89", "patch": "@@ -58,7 +58,14 @@ impl Ident {\n \n impl Show for Ident {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        write!(f, \"\\\"{}\\\"#{}\", token::get_ident(*self).get(), self.ctxt)\n+        write!(f, \"{}#{}\", self.name, self.ctxt)\n+    }\n+}\n+\n+impl Show for Name {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        let Name(nm) = *self;\n+        write!(f, \"\\\"{}\\\"({})\", token::get_name(*self).get(), nm)\n     }\n }\n \n@@ -106,7 +113,7 @@ pub static ILLEGAL_CTXT : SyntaxContext = 1;\n \n /// A name is a part of an identifier, representing a string or gensym. It's\n /// the result of interning.\n-#[deriving(Eq, Ord, PartialEq, PartialOrd, Hash, Encodable, Decodable, Clone, Show)]\n+#[deriving(Eq, Ord, PartialEq, PartialOrd, Hash, Encodable, Decodable, Clone)]\n pub struct Name(pub u32);\n \n impl Name {"}, {"sha": "784930003d047570b32b4d7dc027b761983ff824", "filename": "src/test/compile-fail/lint-non-camel-case-types.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/13dc0d7938c0f343dd13240dd316eb3a22036e89/src%2Ftest%2Fcompile-fail%2Flint-non-camel-case-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13dc0d7938c0f343dd13240dd316eb3a22036e89/src%2Ftest%2Fcompile-fail%2Flint-non-camel-case-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-non-camel-case-types.rs?ref=13dc0d7938c0f343dd13240dd316eb3a22036e89", "patch": "@@ -32,4 +32,9 @@ enum Foo5 {\n trait foo6 { //~ ERROR trait `foo6` should have a camel case name such as `Foo6`\n }\n \n+#[repr(C)]\n+struct foo7 {\n+    bar: int,\n+}\n+\n fn main() { }"}, {"sha": "abc565d31758f29ef7b61aa855e6dfe7e3b5f6ec", "filename": "src/test/run-pass/crate-name-attr-used.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/13dc0d7938c0f343dd13240dd316eb3a22036e89/src%2Ftest%2Frun-pass%2Fcrate-name-attr-used.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13dc0d7938c0f343dd13240dd316eb3a22036e89/src%2Ftest%2Frun-pass%2Fcrate-name-attr-used.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcrate-name-attr-used.rs?ref=13dc0d7938c0f343dd13240dd316eb3a22036e89", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags:--crate-name crate-name-attr-used -F unused-attribute\n+\n+#![crate_name = \"test\"]\n+\n+fn main() {}"}]}