{"sha": "6db7e34ab526abdadbff4e85701f55ce707687b8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkYjdlMzRhYjUyNmFiZGFkYmZmNGU4NTcwMWY1NWNlNzA3Njg3Yjg=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-04T12:12:04Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-04T12:12:04Z"}, "message": "use integer assoc consts instead of methods", "tree": {"sha": "55ab377fbed8151b60d88c8fd006002a9df64862", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55ab377fbed8151b60d88c8fd006002a9df64862"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6db7e34ab526abdadbff4e85701f55ce707687b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6db7e34ab526abdadbff4e85701f55ce707687b8", "html_url": "https://github.com/rust-lang/rust/commit/6db7e34ab526abdadbff4e85701f55ce707687b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6db7e34ab526abdadbff4e85701f55ce707687b8/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a3700c37132385e8e965c18e73d0a09f9146335", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a3700c37132385e8e965c18e73d0a09f9146335", "html_url": "https://github.com/rust-lang/rust/commit/7a3700c37132385e8e965c18e73d0a09f9146335"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "c8d35db0adeb2e11dbdb5d28cfb28b4cb8bb0899", "filename": "src/librustc/mir/interpret/allocation.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6db7e34ab526abdadbff4e85701f55ce707687b8/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6db7e34ab526abdadbff4e85701f55ce707687b8/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs?ref=6db7e34ab526abdadbff4e85701f55ce707687b8", "patch": "@@ -818,9 +818,9 @@ impl UndefMask {\n             // First set all bits except the first `bita`,\n             // then unset the last `64 - bitb` bits.\n             let range = if bitb == 0 {\n-                u64::max_value() << bita\n+                u64::MAX << bita\n             } else {\n-                (u64::max_value() << bita) & (u64::max_value() >> (64 - bitb))\n+                (u64::MAX << bita) & (u64::MAX >> (64 - bitb))\n             };\n             if new_state {\n                 self.blocks[blocka] |= range;\n@@ -832,21 +832,21 @@ impl UndefMask {\n         // across block boundaries\n         if new_state {\n             // Set `bita..64` to `1`.\n-            self.blocks[blocka] |= u64::max_value() << bita;\n+            self.blocks[blocka] |= u64::MAX << bita;\n             // Set `0..bitb` to `1`.\n             if bitb != 0 {\n-                self.blocks[blockb] |= u64::max_value() >> (64 - bitb);\n+                self.blocks[blockb] |= u64::MAX >> (64 - bitb);\n             }\n             // Fill in all the other blocks (much faster than one bit at a time).\n             for block in (blocka + 1)..blockb {\n-                self.blocks[block] = u64::max_value();\n+                self.blocks[block] = u64::MAX;\n             }\n         } else {\n             // Set `bita..64` to `0`.\n-            self.blocks[blocka] &= !(u64::max_value() << bita);\n+            self.blocks[blocka] &= !(u64::MAX << bita);\n             // Set `0..bitb` to `0`.\n             if bitb != 0 {\n-                self.blocks[blockb] &= !(u64::max_value() >> (64 - bitb));\n+                self.blocks[blockb] &= !(u64::MAX >> (64 - bitb));\n             }\n             // Fill in all the other blocks (much faster than one bit at a time).\n             for block in (blocka + 1)..blockb {"}, {"sha": "cc3c50b7899f3646f12dfc893e231aab49fdd03a", "filename": "src/librustc/mir/interpret/pointer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6db7e34ab526abdadbff4e85701f55ce707687b8/src%2Flibrustc%2Fmir%2Finterpret%2Fpointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6db7e34ab526abdadbff4e85701f55ce707687b8/src%2Flibrustc%2Fmir%2Finterpret%2Fpointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fpointer.rs?ref=6db7e34ab526abdadbff4e85701f55ce707687b8", "patch": "@@ -78,9 +78,9 @@ pub trait PointerArithmetic: layout::HasDataLayout {\n     fn overflowing_signed_offset(&self, val: u64, i: i128) -> (u64, bool) {\n         // FIXME: is it possible to over/underflow here?\n         if i < 0 {\n-            // Trickery to ensure that `i64::min_value()` works fine: compute `n = -i`.\n+            // Trickery to ensure that `i64::MIN` works fine: compute `n = -i`.\n             // This formula only works for true negative values; it overflows for zero!\n-            let n = u64::max_value() - (i as u64) + 1;\n+            let n = u64::MAX - (i as u64) + 1;\n             let res = val.overflowing_sub(n);\n             self.truncate_to_ptr(res)\n         } else {"}, {"sha": "891afbf437f2be000de5f7d6908a46de93af395f", "filename": "src/librustc_mir/interpret/intrinsics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6db7e34ab526abdadbff4e85701f55ce707687b8/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6db7e34ab526abdadbff4e85701f55ce707687b8/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs?ref=6db7e34ab526abdadbff4e85701f55ce707687b8", "patch": "@@ -203,7 +203,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                         if is_add {\n                             // max unsigned\n                             Scalar::from_uint(\n-                                u128::max_value() >> (128 - num_bits),\n+                                u128::MAX >> (128 - num_bits),\n                                 Size::from_bits(num_bits),\n                             )\n                         } else {\n@@ -381,11 +381,11 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         dest: PlaceTy<'tcx, M::PointerTag>,\n     ) -> InterpResult<'tcx> {\n         // Performs an exact division, resulting in undefined behavior where\n-        // `x % y != 0` or `y == 0` or `x == T::min_value() && y == -1`.\n+        // `x % y != 0` or `y == 0` or `x == T::MIN && y == -1`.\n         // First, check x % y != 0 (or if that computation overflows).\n         let (res, overflow, _ty) = self.overflowing_binary_op(BinOp::Rem, a, b)?;\n         if overflow || res.assert_bits(a.layout.size) != 0 {\n-            // Then, check if `b` is -1, which is the \"min_value / -1\" case.\n+            // Then, check if `b` is -1, which is the \"MIN / -1\" case.\n             let minus1 = Scalar::from_int(-1, dest.layout.size);\n             let b_scalar = b.to_scalar().unwrap();\n             if b_scalar == minus1 {"}, {"sha": "4f99bfe8a852af7ca2806c6853381fd8a609d828", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6db7e34ab526abdadbff4e85701f55ce707687b8/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6db7e34ab526abdadbff4e85701f55ce707687b8/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=6db7e34ab526abdadbff4e85701f55ce707687b8", "patch": "@@ -463,7 +463,7 @@ impl<'rt, 'mir, 'tcx, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, 'tcx, M\n         let (lo, hi) = valid_range.clone().into_inner();\n         // Determine the allowed range\n         // `max_hi` is as big as the size fits\n-        let max_hi = u128::max_value() >> (128 - op.layout.size.bits());\n+        let max_hi = u128::MAX >> (128 - op.layout.size.bits());\n         assert!(hi <= max_hi);\n         // We could also write `(hi + 1) % (max_hi + 1) == lo` but `max_hi + 1` overflows for `u128`\n         if (lo == 0 && hi == max_hi) || (hi + 1 == lo) {"}]}