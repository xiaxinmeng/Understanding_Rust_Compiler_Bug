{"sha": "215b1ab000465481b82a347ed02e4489f061813e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxNWIxYWIwMDA0NjU0ODFiODJhMzQ3ZWQwMmU0NDg5ZjA2MTgxM2U=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2011-10-12T04:21:52Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-12T23:33:07Z"}, "message": "make compiler emit more than 1 error in the case of unsafe", "tree": {"sha": "a4cc6479d7030eb66751d097ed109f7ed943b802", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a4cc6479d7030eb66751d097ed109f7ed943b802"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/215b1ab000465481b82a347ed02e4489f061813e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/215b1ab000465481b82a347ed02e4489f061813e", "html_url": "https://github.com/rust-lang/rust/commit/215b1ab000465481b82a347ed02e4489f061813e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/215b1ab000465481b82a347ed02e4489f061813e/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b668066245bf158ef2b990ac80199117b7097b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b668066245bf158ef2b990ac80199117b7097b5", "html_url": "https://github.com/rust-lang/rust/commit/3b668066245bf158ef2b990ac80199117b7097b5"}], "stats": {"total": 40, "additions": 12, "deletions": 28}, "files": [{"sha": "aed017eeef56e10d9c6ecd386be2c093dae7aa7d", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 8, "deletions": 23, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/215b1ab000465481b82a347ed02e4489f061813e/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/215b1ab000465481b82a347ed02e4489f061813e/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=215b1ab000465481b82a347ed02e4489f061813e", "patch": "@@ -1528,7 +1528,7 @@ fn require_unsafe(sess: session::session, f_purity: ast::purity, sp: span) {\n         alt f_purity {\n           ast::unsafe_fn. { ret; }\n           _ {\n-            sess.span_fatal(\n+            sess.span_err(\n                 sp,\n                 \"unsafe operation requires unsafe function or block\");\n           }\n@@ -1541,7 +1541,7 @@ fn require_impure(sess: session::session, f_purity: ast::purity, sp: span) {\n       ast::unsafe_fn. { ret; }\n       ast::impure_fn. { ret; }\n       ast::pure_fn. {\n-        sess.span_fatal(sp, \"Found impure expression in pure function decl\");\n+        sess.span_err(sp, \"Found impure expression in pure function decl\");\n       }\n     }\n }\n@@ -1556,7 +1556,7 @@ fn require_pure_call(ccx: @crate_ctxt, caller_purity: ast::purity,\n           some(ast::def_fn(_, ast::unsafe_fn.)) |\n           some(ast::def_native_fn(_, ast::unsafe_fn.)) {\n             if sess.get_opts().check_unsafe {\n-                ccx.tcx.sess.span_fatal(\n+                ccx.tcx.sess.span_err(\n                     sp,\n                     \"safe function calls function marked unsafe\");\n             }\n@@ -1570,7 +1570,7 @@ fn require_pure_call(ccx: @crate_ctxt, caller_purity: ast::purity,\n         alt ccx.tcx.def_map.find(callee.id) {\n           some(ast::def_fn(_, ast::pure_fn.)) { ret; }\n           _ {\n-            ccx.tcx.sess.span_fatal\n+            ccx.tcx.sess.span_err\n                 (sp, \"pure function calls function not known to be pure\");\n           }\n         }\n@@ -1591,23 +1591,6 @@ fn check_expr_with(fcx: @fn_ctxt, expr: @ast::expr, expected: ty::t) -> bool {\n     ret check_expr_with_unifier(fcx, expr, demand::simple, expected);\n }\n \n-fn check_for_unsafe_assignments(fcx: @fn_ctxt, lhs: @ast::expr) {\n-    alt lhs.node {\n-      ast::expr_unary(ast::deref., ptr) {\n-        let ty = expr_ty(fcx.ccx.tcx, ptr);\n-        let sty = structure_of(fcx, ptr.span, ty);\n-        alt sty {\n-          ty::ty_ptr(_) {\n-            require_unsafe(fcx.ccx.tcx.sess, fcx.purity, lhs.span);\n-          }\n-          _ {}\n-        }\n-      }\n-      _ {\n-      }\n-    }\n-}\n-\n fn check_expr_with_unifier(fcx: @fn_ctxt, expr: @ast::expr, unify: unifier,\n                            expected: ty::t) -> bool {\n     //log_err \"typechecking expr \" + syntax::print::pprust::expr_to_str(expr);\n@@ -1719,7 +1702,6 @@ fn check_expr_with_unifier(fcx: @fn_ctxt, expr: @ast::expr, unify: unifier,\n                         rhs: @ast::expr, id: ast::node_id) -> bool {\n         let t = next_ty_var(fcx);\n         let bot = check_expr_with(fcx, lhs, t) | check_expr_with(fcx, rhs, t);\n-        check_for_unsafe_assignments(fcx, lhs);\n         write::ty_only_fixup(fcx, id, ty::mk_nil(fcx.ccx.tcx));\n         ret bot;\n     }\n@@ -1872,7 +1854,10 @@ fn check_expr_with_unifier(fcx: @fn_ctxt, expr: @ast::expr, unify: unifier,\n                 oper_t =\n                     ty::substitute_type_params(tcx, tps, variants[0].args[0]);\n               }\n-              ty::ty_ptr(inner) { oper_t = inner.ty; }\n+              ty::ty_ptr(inner) {\n+                oper_t = inner.ty;\n+                require_unsafe(fcx.ccx.tcx.sess, fcx.purity, expr.span);\n+              }\n               _ {\n                 tcx.sess.span_fatal(expr.span,\n                                     \"dereferencing non-\" +"}, {"sha": "238acc8729c2b8103ddcd3e416da23437d1bff46", "filename": "src/test/compile-fail/unsafe-fn-deref-ptr.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/215b1ab000465481b82a347ed02e4489f061813e/src%2Ftest%2Fcompile-fail%2Funsafe-fn-deref-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/215b1ab000465481b82a347ed02e4489f061813e/src%2Ftest%2Fcompile-fail%2Funsafe-fn-deref-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsafe-fn-deref-ptr.rs?ref=215b1ab000465481b82a347ed02e4489f061813e", "patch": "@@ -1,9 +1,8 @@\n // -*- rust -*-\n // error-pattern: unsafe operation requires unsafe function or block\n \n-fn f(p: *u8) {\n-    *p = 0u8;\n-    ret;\n+fn f(p: *u8) -> u8 {\n+    ret *p;\n }\n \n fn main() {"}, {"sha": "470c8daee5e57350b17112c02ff1978db5308007", "filename": "src/test/stdtest/str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/215b1ab000465481b82a347ed02e4489f061813e/src%2Ftest%2Fstdtest%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/215b1ab000465481b82a347ed02e4489f061813e/src%2Ftest%2Fstdtest%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fstr.rs?ref=215b1ab000465481b82a347ed02e4489f061813e", "patch": "@@ -264,14 +264,14 @@ fn str_from_cstr() unsafe {\n }\n \n #[test]\n-fn as_buf() {\n+fn as_buf() unsafe {\n     let a = \"Abcdefg\";\n     let b = str::as_buf(a, {|buf| assert (*buf == 65u8); 100 });\n     assert (b == 100);\n }\n \n #[test]\n-fn as_buf_small() {\n+fn as_buf_small() unsafe {\n     let a = \"A\";\n     let b = str::as_buf(a, {|buf| assert (*buf == 65u8); 100 });\n     assert (b == 100);"}]}