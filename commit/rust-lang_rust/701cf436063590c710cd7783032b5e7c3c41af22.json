{"sha": "701cf436063590c710cd7783032b5e7c3c41af22", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwMWNmNDM2MDYzNTkwYzcxMGNkNzc4MzAzMmI1ZTdjM2M0MWFmMjI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-28T11:06:54Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-28T11:13:37Z"}, "message": "Cleanup highlighting tags", "tree": {"sha": "ff841ad4f60074f76c6d1118799ffc5986d6b7bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff841ad4f60074f76c6d1118799ffc5986d6b7bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/701cf436063590c710cd7783032b5e7c3c41af22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/701cf436063590c710cd7783032b5e7c3c41af22", "html_url": "https://github.com/rust-lang/rust/commit/701cf436063590c710cd7783032b5e7c3c41af22", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/701cf436063590c710cd7783032b5e7c3c41af22/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "996e18846dab8e5c4a2846641289f85fe99eb480", "url": "https://api.github.com/repos/rust-lang/rust/commits/996e18846dab8e5c4a2846641289f85fe99eb480", "html_url": "https://github.com/rust-lang/rust/commit/996e18846dab8e5c4a2846641289f85fe99eb480"}], "stats": {"total": 271, "additions": 169, "deletions": 102}, "files": [{"sha": "30ca9d8b010c08edc596ec17636182e83fa0f8ee", "filename": "crates/ra_ide/src/syntax_highlighting.rs", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/701cf436063590c710cd7783032b5e7c3c41af22/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/701cf436063590c710cd7783032b5e7c3c41af22/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs?ref=701cf436063590c710cd7783032b5e7c3c41af22", "patch": "@@ -177,10 +177,11 @@ fn highlight_element(\n                 }\n             };\n \n-            match name_kind {\n+            let h = match name_kind {\n                 Some(name_kind) => highlight_name(db, name_kind),\n                 None => highlight_name_by_syntax(name),\n-            }\n+            };\n+            h | HighlightModifier::Definition\n         }\n \n         // Highlight references like the definitions they resolve to\n@@ -206,12 +207,13 @@ fn highlight_element(\n \n         // Simple token-based highlighting\n         COMMENT => HighlightTag::Comment.into(),\n-        STRING | RAW_STRING | RAW_BYTE_STRING | BYTE_STRING => HighlightTag::LiteralString.into(),\n+        STRING | RAW_STRING | RAW_BYTE_STRING | BYTE_STRING => HighlightTag::StringLiteral.into(),\n         ATTR => HighlightTag::Attribute.into(),\n-        INT_NUMBER | FLOAT_NUMBER => HighlightTag::LiteralNumeric.into(),\n-        BYTE => HighlightTag::LiteralByte.into(),\n-        CHAR => HighlightTag::LiteralChar.into(),\n-        LIFETIME => HighlightTag::TypeLifetime.into(),\n+        INT_NUMBER | FLOAT_NUMBER => HighlightTag::NumericLiteral.into(),\n+        BYTE => HighlightTag::ByteLiteral.into(),\n+        CHAR => HighlightTag::CharLiteral.into(),\n+        // FIXME: set Declaration for decls\n+        LIFETIME => HighlightTag::Lifetime.into(),\n \n         k if k.is_keyword() => {\n             let h = Highlight::new(HighlightTag::Keyword);\n@@ -258,17 +260,18 @@ fn highlight_name(db: &RootDatabase, def: NameDefinition) -> Highlight {\n             hir::ModuleDef::Adt(hir::Adt::Struct(_)) => HighlightTag::Struct,\n             hir::ModuleDef::Adt(hir::Adt::Enum(_)) => HighlightTag::Enum,\n             hir::ModuleDef::Adt(hir::Adt::Union(_)) => HighlightTag::Union,\n-            hir::ModuleDef::EnumVariant(_) => HighlightTag::Constant,\n+            hir::ModuleDef::EnumVariant(_) => HighlightTag::EnumVariant,\n             hir::ModuleDef::Const(_) => HighlightTag::Constant,\n-            hir::ModuleDef::Static(_) => HighlightTag::Constant,\n+            hir::ModuleDef::Static(_) => HighlightTag::Static,\n             hir::ModuleDef::Trait(_) => HighlightTag::Trait,\n             hir::ModuleDef::TypeAlias(_) => HighlightTag::TypeAlias,\n             hir::ModuleDef::BuiltinType(_) => HighlightTag::BuiltinType,\n         },\n-        NameDefinition::SelfType(_) => HighlightTag::TypeSelf,\n+        NameDefinition::SelfType(_) => HighlightTag::SelfType,\n         NameDefinition::TypeParam(_) => HighlightTag::TypeParam,\n+        // FIXME: distinguish between locals and parameters\n         NameDefinition::Local(local) => {\n-            let mut h = Highlight::new(HighlightTag::Variable);\n+            let mut h = Highlight::new(HighlightTag::Local);\n             if local.is_mut(db) || local.ty(db).is_mutable_reference() {\n                 h |= HighlightModifier::Mutable;\n             }\n@@ -289,6 +292,7 @@ fn highlight_name_by_syntax(name: ast::Name) -> Highlight {\n     match parent.kind() {\n         STRUCT_DEF => HighlightTag::Struct.into(),\n         ENUM_DEF => HighlightTag::Enum.into(),\n+        UNION_KW => HighlightTag::Union.into(),\n         TRAIT_DEF => HighlightTag::Trait.into(),\n         TYPE_ALIAS_DEF => HighlightTag::TypeAlias.into(),\n         TYPE_PARAM => HighlightTag::TypeParam.into(),\n@@ -315,7 +319,7 @@ fn highlight_injection(\n     if let Some(range) = literal.open_quote_text_range() {\n         acc.push(HighlightedRange {\n             range,\n-            highlight: HighlightTag::LiteralString.into(),\n+            highlight: HighlightTag::StringLiteral.into(),\n             binding_hash: None,\n         })\n     }\n@@ -330,7 +334,7 @@ fn highlight_injection(\n     if let Some(range) = literal.close_quote_text_range() {\n         acc.push(HighlightedRange {\n             range,\n-            highlight: HighlightTag::LiteralString.into(),\n+            highlight: HighlightTag::StringLiteral.into(),\n             binding_hash: None,\n         })\n     }"}, {"sha": "0b12bdef5ff7894935be678809c6b34016ade682", "filename": "crates/ra_ide/src/syntax_highlighting/tags.rs", "status": "modified", "additions": 47, "deletions": 45, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/701cf436063590c710cd7783032b5e7c3c41af22/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/701cf436063590c710cd7783032b5e7c3c41af22/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs?ref=701cf436063590c710cd7783032b5e7c3c41af22", "patch": "@@ -14,70 +14,71 @@ pub struct HighlightModifiers(u32);\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]\n pub enum HighlightTag {\n-    Struct,\n-    Enum,\n-    Union,\n-    Trait,\n-    TypeAlias,\n+    Attribute,\n     BuiltinType,\n-\n+    ByteLiteral,\n+    CharLiteral,\n+    Comment,\n+    Constant,\n+    Enum,\n+    EnumVariant,\n     Field,\n     Function,\n-    Module,\n-    Constant,\n+    Keyword,\n+    Lifetime,\n     Macro,\n-    Variable,\n-\n-    TypeSelf,\n+    Module,\n+    NumericLiteral,\n+    SelfType,\n+    Static,\n+    StringLiteral,\n+    Struct,\n+    Trait,\n+    TypeAlias,\n     TypeParam,\n-    TypeLifetime,\n-\n-    LiteralByte,\n-    LiteralNumeric,\n-    LiteralChar,\n-\n-    Comment,\n-    LiteralString,\n-    Attribute,\n-\n-    Keyword,\n+    Union,\n+    Local,\n }\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]\n #[repr(u8)]\n pub enum HighlightModifier {\n-    Mutable = 0,\n-    Unsafe,\n     /// Used with keywords like `if` and `break`.\n-    Control,\n+    Control = 0,\n+    /// `foo` in `fn foo(x: i32)` is a definition, `foo` in `foo(90 + 2)` is\n+    /// not.\n+    Definition,\n+    Mutable,\n+    Unsafe,\n }\n \n impl HighlightTag {\n     fn as_str(self) -> &'static str {\n         match self {\n-            HighlightTag::Struct => \"struct\",\n-            HighlightTag::Enum => \"enum\",\n-            HighlightTag::Union => \"union\",\n-            HighlightTag::Trait => \"trait\",\n-            HighlightTag::TypeAlias => \"type_alias\",\n+            HighlightTag::Attribute => \"attribute\",\n             HighlightTag::BuiltinType => \"builtin_type\",\n-\n+            HighlightTag::ByteLiteral => \"byte_literal\",\n+            HighlightTag::CharLiteral => \"char_literal\",\n+            HighlightTag::Comment => \"comment\",\n+            HighlightTag::Constant => \"constant\",\n+            HighlightTag::Enum => \"enum\",\n+            HighlightTag::EnumVariant => \"enum_variant\",\n             HighlightTag::Field => \"field\",\n             HighlightTag::Function => \"function\",\n-            HighlightTag::Module => \"module\",\n-            HighlightTag::Constant => \"constant\",\n-            HighlightTag::Macro => \"macro\",\n-            HighlightTag::Variable => \"variable\",\n-            HighlightTag::TypeSelf => \"type.self\",\n-            HighlightTag::TypeParam => \"type.param\",\n-            HighlightTag::TypeLifetime => \"type.lifetime\",\n-            HighlightTag::LiteralByte => \"literal.byte\",\n-            HighlightTag::LiteralNumeric => \"literal.numeric\",\n-            HighlightTag::LiteralChar => \"literal.char\",\n-            HighlightTag::Comment => \"comment\",\n-            HighlightTag::LiteralString => \"string\",\n-            HighlightTag::Attribute => \"attribute\",\n             HighlightTag::Keyword => \"keyword\",\n+            HighlightTag::Lifetime => \"lifetime\",\n+            HighlightTag::Macro => \"macro\",\n+            HighlightTag::Module => \"module\",\n+            HighlightTag::NumericLiteral => \"numeric_literal\",\n+            HighlightTag::SelfType => \"self_type\",\n+            HighlightTag::Static => \"static\",\n+            HighlightTag::StringLiteral => \"string\",\n+            HighlightTag::Struct => \"struct\",\n+            HighlightTag::Trait => \"trait\",\n+            HighlightTag::TypeAlias => \"type_alias\",\n+            HighlightTag::TypeParam => \"type_param\",\n+            HighlightTag::Union => \"union\",\n+            HighlightTag::Local => \"variable\",\n         }\n     }\n }\n@@ -94,9 +95,10 @@ impl HighlightModifier {\n \n     fn as_str(self) -> &'static str {\n         match self {\n+            HighlightModifier::Control => \"control\",\n+            HighlightModifier::Definition => \"declaration\",\n             HighlightModifier::Mutable => \"mutable\",\n             HighlightModifier::Unsafe => \"unsafe\",\n-            HighlightModifier::Control => \"control\",\n         }\n     }\n "}, {"sha": "ff156307a55b4d6aacb6a739b648a1114683b020", "filename": "crates/rust-analyzer/src/conv.rs", "status": "modified", "additions": 22, "deletions": 24, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/701cf436063590c710cd7783032b5e7c3c41af22/crates%2Frust-analyzer%2Fsrc%2Fconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/701cf436063590c710cd7783032b5e7c3c41af22/crates%2Frust-analyzer%2Fsrc%2Fconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconv.rs?ref=701cf436063590c710cd7783032b5e7c3c41af22", "patch": "@@ -20,11 +20,11 @@ use ra_vfs::LineEndings;\n \n use crate::{\n     req,\n-    semantic_tokens::{self, ModifierSet, BUILTIN, CONSTANT, CONTROL, MUTABLE, UNSAFE},\n+    semantic_tokens::{self, ModifierSet, CONSTANT, CONTROL, MUTABLE, UNSAFE},\n     world::WorldSnapshot,\n     Result,\n };\n-use semantic_tokens::ATTRIBUTE;\n+use semantic_tokens::{ATTRIBUTE, BUILTIN_TYPE, ENUM_MEMBER, LIFETIME, TYPE_ALIAS, UNION};\n \n pub trait Conv {\n     type Output;\n@@ -316,45 +316,43 @@ impl Conv for Highlight {\n     fn conv(self) -> Self::Output {\n         let mut mods = ModifierSet::default();\n         let type_ = match self.tag {\n-            HighlightTag::Struct\n-            | HighlightTag::Enum\n-            | HighlightTag::Union\n-            | HighlightTag::TypeAlias\n-            | HighlightTag::Trait\n-            | HighlightTag::BuiltinType => SemanticTokenType::TYPE,\n+            HighlightTag::Struct => SemanticTokenType::STRUCT,\n+            HighlightTag::Enum => SemanticTokenType::ENUM,\n+            HighlightTag::Union => UNION,\n+            HighlightTag::TypeAlias => TYPE_ALIAS,\n+            HighlightTag::Trait => SemanticTokenType::INTERFACE,\n+            HighlightTag::BuiltinType => BUILTIN_TYPE,\n+            HighlightTag::SelfType => SemanticTokenType::TYPE,\n             HighlightTag::Field => SemanticTokenType::MEMBER,\n             HighlightTag::Function => SemanticTokenType::FUNCTION,\n             HighlightTag::Module => SemanticTokenType::NAMESPACE,\n             HighlightTag::Constant => {\n+                mods |= CONSTANT;\n                 mods |= SemanticTokenModifier::STATIC;\n-                mods |= SemanticTokenModifier::READONLY;\n-                CONSTANT\n+                SemanticTokenType::VARIABLE\n             }\n-            HighlightTag::Macro => SemanticTokenType::MACRO,\n-            HighlightTag::Variable => SemanticTokenType::VARIABLE,\n-            HighlightTag::TypeSelf => {\n-                mods |= SemanticTokenModifier::REFERENCE;\n-                SemanticTokenType::TYPE\n+            HighlightTag::Static => {\n+                mods |= SemanticTokenModifier::STATIC;\n+                SemanticTokenType::VARIABLE\n             }\n+            HighlightTag::EnumVariant => ENUM_MEMBER,\n+            HighlightTag::Macro => SemanticTokenType::MACRO,\n+            HighlightTag::Local => SemanticTokenType::VARIABLE,\n             HighlightTag::TypeParam => SemanticTokenType::TYPE_PARAMETER,\n-            HighlightTag::TypeLifetime => {\n-                mods |= SemanticTokenModifier::REFERENCE;\n-                SemanticTokenType::LABEL\n-            }\n-            HighlightTag::LiteralByte => SemanticTokenType::NUMBER,\n-            HighlightTag::LiteralNumeric => SemanticTokenType::NUMBER,\n-            HighlightTag::LiteralChar => SemanticTokenType::NUMBER,\n+            HighlightTag::Lifetime => LIFETIME,\n+            HighlightTag::ByteLiteral | HighlightTag::NumericLiteral => SemanticTokenType::NUMBER,\n+            HighlightTag::CharLiteral | HighlightTag::StringLiteral => SemanticTokenType::STRING,\n             HighlightTag::Comment => SemanticTokenType::COMMENT,\n-            HighlightTag::LiteralString => SemanticTokenType::STRING,\n             HighlightTag::Attribute => ATTRIBUTE,\n             HighlightTag::Keyword => SemanticTokenType::KEYWORD,\n         };\n \n         for modifier in self.modifiers.iter() {\n             let modifier = match modifier {\n+                HighlightModifier::Definition => SemanticTokenModifier::DECLARATION,\n+                HighlightModifier::Control => CONTROL,\n                 HighlightModifier::Mutable => MUTABLE,\n                 HighlightModifier::Unsafe => UNSAFE,\n-                HighlightModifier::Control => CONTROL,\n             };\n             mods |= modifier;\n         }"}, {"sha": "1b146e4d87e8647ee6adfeef175588160bcb6293", "filename": "crates/rust-analyzer/src/semantic_tokens.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/701cf436063590c710cd7783032b5e7c3c41af22/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/701cf436063590c710cd7783032b5e7c3c41af22/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs?ref=701cf436063590c710cd7783032b5e7c3c41af22", "patch": "@@ -5,11 +5,16 @@ use std::ops;\n use lsp_types::{Range, SemanticToken, SemanticTokenModifier, SemanticTokenType};\n \n pub(crate) const ATTRIBUTE: SemanticTokenType = SemanticTokenType::new(\"attribute\");\n-pub(crate) const CONSTANT: SemanticTokenType = SemanticTokenType::new(\"constant\");\n+pub(crate) const BUILTIN_TYPE: SemanticTokenType = SemanticTokenType::new(\"builtinType\");\n+pub(crate) const ENUM_MEMBER: SemanticTokenType = SemanticTokenType::new(\"enumMember\");\n+pub(crate) const LIFETIME: SemanticTokenType = SemanticTokenType::new(\"lifetime\");\n+pub(crate) const TYPE_ALIAS: SemanticTokenType = SemanticTokenType::new(\"typeAlias\");\n+pub(crate) const UNION: SemanticTokenType = SemanticTokenType::new(\"union\");\n \n+pub(crate) const CONSTANT: SemanticTokenModifier = SemanticTokenModifier::new(\"constant\");\n+pub(crate) const CONTROL: SemanticTokenModifier = SemanticTokenModifier::new(\"control\");\n pub(crate) const MUTABLE: SemanticTokenModifier = SemanticTokenModifier::new(\"mutable\");\n pub(crate) const UNSAFE: SemanticTokenModifier = SemanticTokenModifier::new(\"unsafe\");\n-pub(crate) const CONTROL: SemanticTokenModifier = SemanticTokenModifier::new(\"control\");\n \n pub(crate) const SUPPORTED_TYPES: &[SemanticTokenType] = &[\n     SemanticTokenType::COMMENT,\n@@ -33,7 +38,11 @@ pub(crate) const SUPPORTED_TYPES: &[SemanticTokenType] = &[\n     SemanticTokenType::PARAMETER,\n     SemanticTokenType::LABEL,\n     ATTRIBUTE,\n-    CONSTANT,\n+    BUILTIN_TYPE,\n+    ENUM_MEMBER,\n+    LIFETIME,\n+    TYPE_ALIAS,\n+    UNION,\n ];\n \n pub(crate) const SUPPORTED_MODIFIERS: &[SemanticTokenModifier] = &[\n@@ -47,6 +56,7 @@ pub(crate) const SUPPORTED_MODIFIERS: &[SemanticTokenModifier] = &[\n     SemanticTokenModifier::ASYNC,\n     SemanticTokenModifier::VOLATILE,\n     SemanticTokenModifier::READONLY,\n+    CONSTANT,\n     MUTABLE,\n     UNSAFE,\n     CONTROL,"}, {"sha": "df8265be1338548661c3fcc4b61277d59aadd165", "filename": "editors/code/package.json", "status": "modified", "additions": 70, "deletions": 17, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/701cf436063590c710cd7783032b5e7c3c41af22/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/701cf436063590c710cd7783032b5e7c3c41af22/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=701cf436063590c710cd7783032b5e7c3c41af22", "patch": "@@ -383,21 +383,42 @@\n         ],\n         \"semanticTokenTypes\": [\n             {\n-                \"id\": \"attribute\"\n+                \"id\": \"attribute\",\n+                \"description\": \"Style for attributes\"\n             },\n             {\n-                \"id\": \"constant\"\n+                \"id\": \"builtinType\",\n+                \"description\": \"Style for builtin types\"\n+            },\n+            {\n+                \"id\": \"lifetime\",\n+                \"description\": \"Style for lifetimes\"\n+            },\n+            {\n+                \"id\": \"typeAlias\",\n+                \"description\": \"Style for type aliases\"\n+            },\n+            {\n+                \"id\": \"union\",\n+                \"description\": \"Style for C-style untagged unions\"\n             }\n         ],\n         \"semanticTokenModifiers\": [\n             {\n-                \"id\": \"mutable\"\n+                \"id\": \"constant\",\n+                \"description\": \"Style for compile-time constants\"\n             },\n             {\n-                \"id\": \"unsafe\"\n+                \"id\": \"control\",\n+                \"description\": \"Style for control flow keywords\"\n             },\n             {\n-                \"id\": \"control\"\n+                \"id\": \"mutable\",\n+                \"description\": \"Style for mutable bindings\"\n+            },\n+            {\n+                \"id\": \"unsafe\",\n+                \"description\": \"Style for unsafe operations\"\n             }\n         ],\n         \"semanticTokenStyleDefaults\": [\n@@ -408,28 +429,60 @@\n                 ]\n             },\n             {\n-                \"selector\": \"*.mutable\",\n-                \"light\": {\n-                    \"fontStyle\": \"underline\"\n-                },\n-                \"dark\": {\n-                    \"fontStyle\": \"underline\"\n-                },\n-                \"highContrast\": {\n-                    \"fontStyle\": \"underline\"\n-                }\n+                \"selector\": \"builtinType\",\n+                \"scope\": [\n+                    \"support.type.primitive\"\n+                ]\n             },\n             {\n-                \"selector\": \"constant\",\n+                \"selector\": \"lifetime\",\n                 \"scope\": [\n-                    \"entity.name.constant\"\n+                    \"entity.name.lifetime.rust\"\n+                ]\n+            },\n+            {\n+                \"selector\": \"typeAlias\",\n+                \"scope\": [\n+                    \"entity.name.type\",\n+                    \"entity.name.typeAlias\"\n+                ]\n+            },\n+            {\n+                \"selector\": \"union\",\n+                \"scope\": [\n+                    \"entity.name.type\",\n+                    \"entity.name.union\"\n                 ]\n             },\n             {\n                 \"selector\": \"keyword.unsafe\",\n                 \"scope\": [\n                     \"keyword.other.unsafe\"\n                 ]\n+            },\n+            {\n+                \"selector\": \"keyword.control\",\n+                \"scope\": [\n+                    \"keyword.control\"\n+                ]\n+            },\n+            {\n+                \"selector\": \"variable.constant\",\n+                \"scope\": [\n+                    \"entity.name.constant\"\n+                ]\n+            },\n+            {\n+                \"selector\": \"*.mutable\",\n+                \"light\": {\n+                    \"fontStyle\": \"underline\"\n+                },\n+                \"dark\": {\n+                    \"fontStyle\": \"underline\"\n+                },\n+                \"highContrast\": {\n+                    \"fontStyle\": \"underline\"\n+                }\n             }\n         ]\n     }"}]}