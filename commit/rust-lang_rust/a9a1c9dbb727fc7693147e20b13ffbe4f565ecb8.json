{"sha": "a9a1c9dbb727fc7693147e20b13ffbe4f565ecb8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5YTFjOWRiYjcyN2ZjNzY5MzE0N2UyMGIxM2ZmYmU0ZjU2NWVjYjg=", "commit": {"author": {"name": "Jubilee", "email": "46493976+workingjubilee@users.noreply.github.com", "date": "2021-04-26T07:12:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-26T07:12:51Z"}, "message": "Merge pull request #100 from rust-lang/fix-sat-math\n\nFix sat math at the cost of Simd{U,I}128 for now", "tree": {"sha": "db21619a161add6014ad84a350365e4e26cdce95", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db21619a161add6014ad84a350365e4e26cdce95"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9a1c9dbb727fc7693147e20b13ffbe4f565ecb8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJghmfzCRBK7hj4Ov3rIwAAyd0IAGvjJBQAaYWKzUAMhy39vcIc\nbJbp3ZARecNhufVvsscuSLvzgGyy3PzT5J9TMjV6OthwVWXDdrER6zM7jYDwTeuk\nbpZTiBUzu1l0TP7NVLICqk6LhjTXZktBJ1mbb1qFBc9bQ4E7YvJrhLA9Z0k9ibuL\n4qxZu9oZOaDMXD0pCTEBq0hUAlKzxoqfOBBM5vTt8KLT0dllcquJ2BGlFW4K8Gks\neAvWBim9Q5YDidfIjRyg2A0rViN4f5g7uQtz6lMlnXBmGe4Fr56Jkc+wlZgyWnWN\ngFeCz7eLJzz947CpAK515hhtwNs+OPiSwWrQOybhrImWa8XtXUYT9Il9RxvDI38=\n=xhTy\n-----END PGP SIGNATURE-----\n", "payload": "tree db21619a161add6014ad84a350365e4e26cdce95\nparent 24ebae870e11ed60a83ca0acccc202387f95f25f\nparent 92d643b6283b0171873de4c46f708005af025f33\nauthor Jubilee <46493976+workingjubilee@users.noreply.github.com> 1619421171 -0700\ncommitter GitHub <noreply@github.com> 1619421171 -0700\n\nMerge pull request #100 from rust-lang/fix-sat-math\n\nFix sat math at the cost of Simd{U,I}128 for now"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9a1c9dbb727fc7693147e20b13ffbe4f565ecb8", "html_url": "https://github.com/rust-lang/rust/commit/a9a1c9dbb727fc7693147e20b13ffbe4f565ecb8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9a1c9dbb727fc7693147e20b13ffbe4f565ecb8/comments", "author": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24ebae870e11ed60a83ca0acccc202387f95f25f", "url": "https://api.github.com/repos/rust-lang/rust/commits/24ebae870e11ed60a83ca0acccc202387f95f25f", "html_url": "https://github.com/rust-lang/rust/commit/24ebae870e11ed60a83ca0acccc202387f95f25f"}, {"sha": "92d643b6283b0171873de4c46f708005af025f33", "url": "https://api.github.com/repos/rust-lang/rust/commits/92d643b6283b0171873de4c46f708005af025f33", "html_url": "https://github.com/rust-lang/rust/commit/92d643b6283b0171873de4c46f708005af025f33"}], "stats": {"total": 118, "additions": 32, "deletions": 86}, "files": [{"sha": "988ff857eab5d5cf5429627bad931fd1bff279fb", "filename": "crates/core_simd/src/comparisons.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9a1c9dbb727fc7693147e20b13ffbe4f565ecb8/crates%2Fcore_simd%2Fsrc%2Fcomparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9a1c9dbb727fc7693147e20b13ffbe4f565ecb8/crates%2Fcore_simd%2Fsrc%2Fcomparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fcomparisons.rs?ref=a9a1c9dbb727fc7693147e20b13ffbe4f565ecb8", "patch": "@@ -71,14 +71,12 @@ implement_mask_ops! {\n     SimdI16 => Mask16 (SimdMask16, SimdI16),\n     SimdI32 => Mask32 (SimdMask32, SimdI32),\n     SimdI64 => Mask64 (SimdMask64, SimdI64),\n-    SimdI128 => Mask128 (SimdMask128, SimdI128),\n     SimdIsize => MaskSize (SimdMaskSize, SimdIsize),\n \n     SimdU8 => Mask8 (SimdMask8, SimdI8),\n     SimdU16 => Mask16 (SimdMask16, SimdI16),\n     SimdU32 => Mask32 (SimdMask32, SimdI32),\n     SimdU64 => Mask64 (SimdMask64, SimdI64),\n-    SimdU128 => Mask128 (SimdMask128, SimdI128),\n     SimdUsize => MaskSize (SimdMaskSize, SimdIsize),\n \n     SimdF32 => Mask32 (SimdMask32, SimdI32),"}, {"sha": "1d5010843eb75b70b0a68cb49053efd0b3a1dec1", "filename": "crates/core_simd/src/fmt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9a1c9dbb727fc7693147e20b13ffbe4f565ecb8/crates%2Fcore_simd%2Fsrc%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9a1c9dbb727fc7693147e20b13ffbe4f565ecb8/crates%2Fcore_simd%2Fsrc%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Ffmt.rs?ref=a9a1c9dbb727fc7693147e20b13ffbe4f565ecb8", "patch": "@@ -77,8 +77,8 @@ macro_rules! impl_fmt_trait {\n \n impl_fmt_trait! {\n     integers:\n-        SimdU8, SimdU16, SimdU32, SimdU64, SimdU128,\n-        SimdI8, SimdI16, SimdI32, SimdI64, SimdI128,\n+        SimdU8, SimdU16, SimdU32, SimdU64,\n+        SimdI8, SimdI16, SimdI32, SimdI64,\n         SimdUsize, SimdIsize,\n }\n "}, {"sha": "1e2f7e952c62cd9917c630ee05648300fcb05936", "filename": "crates/core_simd/src/lanes_at_most_32.rs", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9a1c9dbb727fc7693147e20b13ffbe4f565ecb8/crates%2Fcore_simd%2Fsrc%2Flanes_at_most_32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9a1c9dbb727fc7693147e20b13ffbe4f565ecb8/crates%2Fcore_simd%2Fsrc%2Flanes_at_most_32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Flanes_at_most_32.rs?ref=a9a1c9dbb727fc7693147e20b13ffbe4f565ecb8", "patch": "@@ -18,14 +18,12 @@ impl_for! { SimdU8 }\n impl_for! { SimdU16 }\n impl_for! { SimdU32 }\n impl_for! { SimdU64 }\n-impl_for! { SimdU128 }\n impl_for! { SimdUsize }\n \n impl_for! { SimdI8 }\n impl_for! { SimdI16 }\n impl_for! { SimdI32 }\n impl_for! { SimdI64 }\n-impl_for! { SimdI128 }\n impl_for! { SimdIsize }\n \n impl_for! { SimdF32 }", "previous_filename": "crates/core_simd/src/lanes_at_most_64.rs"}, {"sha": "2d4176ce342c0d451f68a2962935cf19584a0cf8", "filename": "crates/core_simd/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9a1c9dbb727fc7693147e20b13ffbe4f565ecb8/crates%2Fcore_simd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9a1c9dbb727fc7693147e20b13ffbe4f565ecb8/crates%2Fcore_simd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Flib.rs?ref=a9a1c9dbb727fc7693147e20b13ffbe4f565ecb8", "patch": "@@ -22,8 +22,8 @@ mod round;\n \n mod math;\n \n-mod lanes_at_most_64;\n-pub use lanes_at_most_64::LanesAtMost32;\n+mod lanes_at_most_32;\n+pub use lanes_at_most_32::LanesAtMost32;\n \n mod masks;\n pub use masks::*;"}, {"sha": "60a6cb5fdbe8764dc58e146b706fd64dfeaec0bc", "filename": "crates/core_simd/src/masks/full_masks.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a9a1c9dbb727fc7693147e20b13ffbe4f565ecb8/crates%2Fcore_simd%2Fsrc%2Fmasks%2Ffull_masks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9a1c9dbb727fc7693147e20b13ffbe4f565ecb8/crates%2Fcore_simd%2Fsrc%2Fmasks%2Ffull_masks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fmasks%2Ffull_masks.rs?ref=a9a1c9dbb727fc7693147e20b13ffbe4f565ecb8", "patch": "@@ -417,12 +417,6 @@ define_mask! {\n     struct SimdMask64<const LANES: usize>(crate::SimdI64<LANES>);\n }\n \n-define_mask! {\n-    /// A mask equivalent to [SimdI128](crate::SimdI128), where all bits in the lane must be either set\n-    /// or unset.\n-    struct SimdMask128<const LANES: usize>(crate::SimdI128<LANES>);\n-}\n-\n define_mask! {\n     /// A mask equivalent to [SimdIsize](crate::SimdIsize), where all bits in the lane must be either set\n     /// or unset."}, {"sha": "c394c7003a355c5fae8fa8897dfb9a18207a6442", "filename": "crates/core_simd/src/masks/mod.rs", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a9a1c9dbb727fc7693147e20b13ffbe4f565ecb8/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9a1c9dbb727fc7693147e20b13ffbe4f565ecb8/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fmasks%2Fmod.rs?ref=a9a1c9dbb727fc7693147e20b13ffbe4f565ecb8", "patch": "@@ -7,7 +7,7 @@ pub use full_masks::*;\n mod bitmask;\n pub use bitmask::*;\n \n-use crate::{LanesAtMost32, SimdI128, SimdI16, SimdI32, SimdI64, SimdI8, SimdIsize};\n+use crate::{LanesAtMost32, SimdI16, SimdI32, SimdI64, SimdI8, SimdIsize};\n \n macro_rules! define_opaque_mask {\n     {\n@@ -387,14 +387,6 @@ define_opaque_mask! {\n     @bits SimdI64\n }\n \n-define_opaque_mask! {\n-    /// Mask for vectors with `LANES` 128-bit elements.\n-    ///\n-    /// The layout of this type is unspecified.\n-    struct Mask128<const LANES: usize>(SimdMask128<LANES>);\n-    @bits SimdI128\n-}\n-\n define_opaque_mask! {\n     /// Mask for vectors with `LANES` pointer-width elements.\n     ///\n@@ -448,12 +440,6 @@ pub type mask64x4 = Mask64<4>;\n /// Vector of eight 64-bit masks\n pub type mask64x8 = Mask64<8>;\n \n-/// Vector of two 128-bit masks\n-pub type mask128x2 = Mask128<2>;\n-\n-/// Vector of four 128-bit masks\n-pub type mask128x4 = Mask128<4>;\n-\n /// Vector of two pointer-width masks\n pub type masksizex2 = MaskSize<2>;\n "}, {"sha": "6a243dbd1962c697a3f76d1b4696bf7a317225ce", "filename": "crates/core_simd/src/math.rs", "status": "modified", "additions": 27, "deletions": 8, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/a9a1c9dbb727fc7693147e20b13ffbe4f565ecb8/crates%2Fcore_simd%2Fsrc%2Fmath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9a1c9dbb727fc7693147e20b13ffbe4f565ecb8/crates%2Fcore_simd%2Fsrc%2Fmath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fmath.rs?ref=a9a1c9dbb727fc7693147e20b13ffbe4f565ecb8", "patch": "@@ -1,5 +1,5 @@\n macro_rules! impl_uint_arith {\n-    ($(($name:ident, $n:ty)),+) => {\n+    ($(($name:ident, $n:ident)),+) => {\n         $( impl<const LANES: usize> $name<LANES> where Self: crate::LanesAtMost32 {\n \n             /// Lanewise saturating add.\n@@ -41,7 +41,7 @@ macro_rules! impl_uint_arith {\n }\n \n macro_rules! impl_int_arith {\n-    ($(($name:ident, $n:ty)),+) => {\n+    ($(($name:ident, $n:ident)),+) => {\n         $( impl<const LANES: usize> $name<LANES> where Self: crate::LanesAtMost32 {\n \n             /// Lanewise saturating add.\n@@ -79,16 +79,34 @@ macro_rules! impl_int_arith {\n                 unsafe { crate::intrinsics::simd_saturating_sub(self, second) }\n             }\n \n+            /// Lanewise absolute value, implemented in Rust.\n+            /// Every lane becomes its absolute value.\n+            ///\n+            /// # Examples\n+            /// ```\n+            /// # use core_simd::*;\n+            #[doc = concat!(\"# use core::\", stringify!($n), \"::{MIN, MAX};\")]\n+            #[doc = concat!(\"let xs = \", stringify!($name), \"::from_array([MIN, MIN +1, -5, 0]);\")]\n+            #[doc = concat!(\"assert_eq!(xs.abs(), \", stringify!($name), \"::from_array([MIN, MAX, 5, 0]));\")]\n+            /// ```\n+            #[inline]\n+            pub fn abs(self) -> Self {\n+                const SHR: $n = <$n>::BITS as $n - 1;\n+                let m = self >> SHR;\n+                (self^m) - m\n+            }\n+\n             /// Lanewise saturating absolute value, implemented in Rust.\n             /// As abs(), except the MIN value becomes MAX instead of itself.\n             ///\n             /// # Examples\n+            /// ```\n             /// # use core_simd::*;\n             #[doc = concat!(\"# use core::\", stringify!($n), \"::{MIN, MAX};\")]\n-            #[doc = concat!(\"let x = \", stringify!($name), \"::splat([MIN, -2, 0, 3]);\")]\n-            /// let unsat = x.abs();\n-            /// let sat = x.saturating_abs();\n-            #[doc = concat!(\"assert_eq!(unsat, \", stringify!($name), \"::from_array([MIN, 2, 0, 3]);\")]\n+            #[doc = concat!(\"let xs = \", stringify!($name), \"::from_array([MIN, -2, 0, 3]);\")]\n+            /// let unsat = xs.abs();\n+            /// let sat = xs.saturating_abs();\n+            #[doc = concat!(\"assert_eq!(unsat, \", stringify!($name), \"::from_array([MIN, 2, 0, 3]));\")]\n             #[doc = concat!(\"assert_eq!(sat, \", stringify!($name), \"::from_array([MAX, 2, 0, 3]));\")]\n             /// ```\n             #[inline]\n@@ -103,12 +121,13 @@ macro_rules! impl_int_arith {\n             /// As neg(), except the MIN value becomes MAX instead of itself.\n             ///\n             /// # Examples\n+            /// ```\n             /// # use core_simd::*;\n             #[doc = concat!(\"# use core::\", stringify!($n), \"::{MIN, MAX};\")]\n-            #[doc = concat!(\"let x = \", stringify!($name), \"::splat([MIN, -2, 3, MAX]);\")]\n+            #[doc = concat!(\"let x = \", stringify!($name), \"::from_array([MIN, -2, 3, MAX]);\")]\n             /// let unsat = -x;\n             /// let sat = x.saturating_neg();\n-            #[doc = concat!(\"assert_eq!(unsat, \", stringify!($name), \"::from_array([MIN, 2, -3, MIN + 1]);\")]\n+            #[doc = concat!(\"assert_eq!(unsat, \", stringify!($name), \"::from_array([MIN, 2, -3, MIN + 1]));\")]\n             #[doc = concat!(\"assert_eq!(sat, \", stringify!($name), \"::from_array([MAX, 2, -3, MIN + 1]));\")]\n             /// ```\n             #[inline]"}, {"sha": "c7037d2acbc6140a06ab70ab7f98cf1c025fdba7", "filename": "crates/core_simd/src/ops.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9a1c9dbb727fc7693147e20b13ffbe4f565ecb8/crates%2Fcore_simd%2Fsrc%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9a1c9dbb727fc7693147e20b13ffbe4f565ecb8/crates%2Fcore_simd%2Fsrc%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fops.rs?ref=a9a1c9dbb727fc7693147e20b13ffbe4f565ecb8", "patch": "@@ -653,7 +653,6 @@ impl_unsigned_int_ops! {\n     u16 => SimdU16;\n     u32 => SimdU32;\n     u64 => SimdU64;\n-    u128 => SimdU128;\n     usize => SimdUsize;\n }\n \n@@ -662,7 +661,6 @@ impl_signed_int_ops! {\n     i16 => SimdI16;\n     i32 => SimdI32;\n     i64 => SimdI64;\n-    i128 => SimdI128;\n     isize => SimdIsize;\n }\n "}, {"sha": "30b09a229e9b066d027a6867f4cac04d0c371092", "filename": "crates/core_simd/src/vector/int.rs", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a9a1c9dbb727fc7693147e20b13ffbe4f565ecb8/crates%2Fcore_simd%2Fsrc%2Fvector%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9a1c9dbb727fc7693147e20b13ffbe4f565ecb8/crates%2Fcore_simd%2Fsrc%2Fvector%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvector%2Fint.rs?ref=a9a1c9dbb727fc7693147e20b13ffbe4f565ecb8", "patch": "@@ -64,17 +64,6 @@ from_transmute_x86! { unsafe isizex4 => __m256i }\n //#[cfg(target_pointer_width = \"64\")]\n //from_transmute_x86! { unsafe isizex8 => __m512i }\n \n-/// A SIMD vector of containing `LANES` `i128` values.\n-#[repr(simd)]\n-pub struct SimdI128<const LANES: usize>([i128; LANES])\n-where\n-    Self: crate::LanesAtMost32;\n-\n-impl_integer_vector! { SimdI128, i128, Mask128, SimdI128 }\n-\n-from_transmute_x86! { unsafe i128x2 => __m256i }\n-//from_transmute_x86! { unsafe i128x4 => __m512i }\n-\n /// A SIMD vector of containing `LANES` `i16` values.\n #[repr(simd)]\n pub struct SimdI16<const LANES: usize>([i16; LANES])\n@@ -132,12 +121,6 @@ pub type isizex4 = SimdIsize<4>;\n /// Vector of eight `isize` values\n pub type isizex8 = SimdIsize<8>;\n \n-/// Vector of two `i128` values\n-pub type i128x2 = SimdI128<2>;\n-\n-/// Vector of four `i128` values\n-pub type i128x4 = SimdI128<4>;\n-\n /// Vector of four `i16` values\n pub type i16x4 = SimdI16<4>;\n "}, {"sha": "53e780520a79dbeb6e15e0db07ed953741a78175", "filename": "crates/core_simd/src/vector/uint.rs", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a9a1c9dbb727fc7693147e20b13ffbe4f565ecb8/crates%2Fcore_simd%2Fsrc%2Fvector%2Fuint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9a1c9dbb727fc7693147e20b13ffbe4f565ecb8/crates%2Fcore_simd%2Fsrc%2Fvector%2Fuint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvector%2Fuint.rs?ref=a9a1c9dbb727fc7693147e20b13ffbe4f565ecb8", "patch": "@@ -49,17 +49,6 @@ from_transmute_x86! { unsafe usizex4 => __m256i }\n //#[cfg(target_pointer_width = \"64\")]\n //from_transmute_x86! { unsafe usizex8 => __m512i }\n \n-/// A SIMD vector of containing `LANES` `u128` values.\n-#[repr(simd)]\n-pub struct SimdU128<const LANES: usize>([u128; LANES])\n-where\n-    Self: crate::LanesAtMost32;\n-\n-impl_unsigned_vector! { SimdU128, u128 }\n-\n-from_transmute_x86! { unsafe u128x2 => __m256i }\n-//from_transmute_x86! { unsafe u128x4 => __m512i }\n-\n /// A SIMD vector of containing `LANES` `u16` values.\n #[repr(simd)]\n pub struct SimdU16<const LANES: usize>([u16; LANES])\n@@ -117,12 +106,6 @@ pub type usizex4 = SimdUsize<4>;\n /// Vector of eight `usize` values\n pub type usizex8 = SimdUsize<8>;\n \n-/// Vector of two `u128` values\n-pub type u128x2 = SimdU128<2>;\n-\n-/// Vector of four `u128` values\n-pub type u128x4 = SimdU128<4>;\n-\n /// Vector of four `u16` values\n pub type u16x4 = SimdU16<4>;\n "}, {"sha": "3e3fa1d20682babba77f9798e009e80d6e1ebf40", "filename": "crates/core_simd/tests/i128_ops.rs", "status": "removed", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/24ebae870e11ed60a83ca0acccc202387f95f25f/crates%2Fcore_simd%2Ftests%2Fi128_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24ebae870e11ed60a83ca0acccc202387f95f25f/crates%2Fcore_simd%2Ftests%2Fi128_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fi128_ops.rs?ref=24ebae870e11ed60a83ca0acccc202387f95f25f", "patch": "@@ -1,3 +0,0 @@\n-#[macro_use]\n-mod ops_macros;\n-impl_signed_tests! { SimdI128, i128 }"}, {"sha": "27ba4e2d29fe683b1cc3db9cfb03efe52c3446be", "filename": "crates/core_simd/tests/mask_ops_impl/mask128.rs", "status": "removed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/24ebae870e11ed60a83ca0acccc202387f95f25f/crates%2Fcore_simd%2Ftests%2Fmask_ops_impl%2Fmask128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24ebae870e11ed60a83ca0acccc202387f95f25f/crates%2Fcore_simd%2Ftests%2Fmask_ops_impl%2Fmask128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fmask_ops_impl%2Fmask128.rs?ref=24ebae870e11ed60a83ca0acccc202387f95f25f", "patch": "@@ -1,2 +0,0 @@\n-mask_tests! { mask128x2, 2 }\n-mask_tests! { mask128x4, 4 }"}, {"sha": "ff36af956515e9cf1c77737c8fbaf299091bf229", "filename": "crates/core_simd/tests/mask_ops_impl/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a9a1c9dbb727fc7693147e20b13ffbe4f565ecb8/crates%2Fcore_simd%2Ftests%2Fmask_ops_impl%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9a1c9dbb727fc7693147e20b13ffbe4f565ecb8/crates%2Fcore_simd%2Ftests%2Fmask_ops_impl%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fmask_ops_impl%2Fmod.rs?ref=a9a1c9dbb727fc7693147e20b13ffbe4f565ecb8", "patch": "@@ -5,5 +5,4 @@ mod mask8;\n mod mask16;\n mod mask32;\n mod mask64;\n-mod mask128;\n mod masksize;"}, {"sha": "4be7d751ffd8930fe517f030642da11193189774", "filename": "crates/core_simd/tests/u128_ops.rs", "status": "removed", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/24ebae870e11ed60a83ca0acccc202387f95f25f/crates%2Fcore_simd%2Ftests%2Fu128_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24ebae870e11ed60a83ca0acccc202387f95f25f/crates%2Fcore_simd%2Ftests%2Fu128_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fu128_ops.rs?ref=24ebae870e11ed60a83ca0acccc202387f95f25f", "patch": "@@ -1,3 +0,0 @@\n-#[macro_use]\n-mod ops_macros;\n-impl_unsigned_tests! { SimdU128, u128 }"}, {"sha": "9e8790842b492c873419129ec39c0354d75bdd04", "filename": "crates/test_helpers/src/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9a1c9dbb727fc7693147e20b13ffbe4f565ecb8/crates%2Ftest_helpers%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9a1c9dbb727fc7693147e20b13ffbe4f565ecb8/crates%2Ftest_helpers%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_helpers%2Fsrc%2Flib.rs?ref=a9a1c9dbb727fc7693147e20b13ffbe4f565ecb8", "patch": "@@ -273,13 +273,11 @@ macro_rules! test_lanes {\n                     core_simd::SimdU16<$lanes>: core_simd::LanesAtMost32,\n                     core_simd::SimdU32<$lanes>: core_simd::LanesAtMost32,\n                     core_simd::SimdU64<$lanes>: core_simd::LanesAtMost32,\n-                    core_simd::SimdU128<$lanes>: core_simd::LanesAtMost32,\n                     core_simd::SimdUsize<$lanes>: core_simd::LanesAtMost32,\n                     core_simd::SimdI8<$lanes>: core_simd::LanesAtMost32,\n                     core_simd::SimdI16<$lanes>: core_simd::LanesAtMost32,\n                     core_simd::SimdI32<$lanes>: core_simd::LanesAtMost32,\n                     core_simd::SimdI64<$lanes>: core_simd::LanesAtMost32,\n-                    core_simd::SimdI128<$lanes>: core_simd::LanesAtMost32,\n                     core_simd::SimdIsize<$lanes>: core_simd::LanesAtMost32,\n                     core_simd::SimdF32<$lanes>: core_simd::LanesAtMost32,\n                     core_simd::SimdF64<$lanes>: core_simd::LanesAtMost32,\n@@ -345,13 +343,11 @@ macro_rules! test_lanes_panic {\n                     core_simd::SimdU16<$lanes>: core_simd::LanesAtMost32,\n                     core_simd::SimdU32<$lanes>: core_simd::LanesAtMost32,\n                     core_simd::SimdU64<$lanes>: core_simd::LanesAtMost32,\n-                    core_simd::SimdU128<$lanes>: core_simd::LanesAtMost32,\n                     core_simd::SimdUsize<$lanes>: core_simd::LanesAtMost32,\n                     core_simd::SimdI8<$lanes>: core_simd::LanesAtMost32,\n                     core_simd::SimdI16<$lanes>: core_simd::LanesAtMost32,\n                     core_simd::SimdI32<$lanes>: core_simd::LanesAtMost32,\n                     core_simd::SimdI64<$lanes>: core_simd::LanesAtMost32,\n-                    core_simd::SimdI128<$lanes>: core_simd::LanesAtMost32,\n                     core_simd::SimdIsize<$lanes>: core_simd::LanesAtMost32,\n                     core_simd::SimdF32<$lanes>: core_simd::LanesAtMost32,\n                     core_simd::SimdF64<$lanes>: core_simd::LanesAtMost32,"}]}