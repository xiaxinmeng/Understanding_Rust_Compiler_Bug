{"sha": "af5976cf1eb72a35ef196bdf2d174e5f6ce5c30c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmNTk3NmNmMWViNzJhMzVlZjE5NmJkZjJkMTc0ZTVmNmNlNWMzMGM=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2018-04-29T23:07:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-04-29T23:07:33Z"}, "message": "Merge pull request #2659 from topecongiro/issue-2652\n\nDo not add a trailing comma on array inside macro", "tree": {"sha": "15d914fbbc1f5e7d107a6223648b1e7f948f97dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15d914fbbc1f5e7d107a6223648b1e7f948f97dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af5976cf1eb72a35ef196bdf2d174e5f6ce5c30c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJa5lA1CRBK7hj4Ov3rIwAAdHIIAI9Q9Ciktluq1abyUCEg7Oq6\nyhK045oEv6F1TUTBUgFsPpxsc5ke5ZeBTw8PA6/00e6iAb3sbcpszOoKMtyYjHnO\nDFGengNMz+iPq9VrrvcZyESZvw0LOMnzm6orG4GsXjvFHzzOsUeATyQEMSeubhAz\nGYrxQvfrYxjI3Zeym3STyr4avmARTaEzuJqS5YsygZWEsgDf3EJvBNJi1dXjLtW1\nUpa2/6xM7SZWO/zqx77bj5exR/LiYnY6R+pIMQgpJOG0dSQRN3VjVVf9fWW+Lc/v\n/S6SMJ6O+FOqP9hTgN7+i3GLoa3oKl5eT6WCMhgu7bQ6yMRmZj9Aj45afHjgiIk=\n=S3yz\n-----END PGP SIGNATURE-----\n", "payload": "tree 15d914fbbc1f5e7d107a6223648b1e7f948f97dc\nparent dae9fb64b6e9d6acbfe336a0f12689107e05331e\nparent 43890cff6b8e1a93d8d6c4189af7b0fbeb70eab7\nauthor Nick Cameron <nrc@ncameron.org> 1525043253 +1200\ncommitter GitHub <noreply@github.com> 1525043253 +1200\n\nMerge pull request #2659 from topecongiro/issue-2652\n\nDo not add a trailing comma on array inside macro"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af5976cf1eb72a35ef196bdf2d174e5f6ce5c30c", "html_url": "https://github.com/rust-lang/rust/commit/af5976cf1eb72a35ef196bdf2d174e5f6ce5c30c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af5976cf1eb72a35ef196bdf2d174e5f6ce5c30c/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dae9fb64b6e9d6acbfe336a0f12689107e05331e", "url": "https://api.github.com/repos/rust-lang/rust/commits/dae9fb64b6e9d6acbfe336a0f12689107e05331e", "html_url": "https://github.com/rust-lang/rust/commit/dae9fb64b6e9d6acbfe336a0f12689107e05331e"}, {"sha": "43890cff6b8e1a93d8d6c4189af7b0fbeb70eab7", "url": "https://api.github.com/repos/rust-lang/rust/commits/43890cff6b8e1a93d8d6c4189af7b0fbeb70eab7", "html_url": "https://github.com/rust-lang/rust/commit/43890cff6b8e1a93d8d6c4189af7b0fbeb70eab7"}], "stats": {"total": 45, "additions": 34, "deletions": 11}, "files": [{"sha": "7ca74c6ef0e55f48f5b37a830cc47245a63aaa72", "filename": "src/expr.rs", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/af5976cf1eb72a35ef196bdf2d174e5f6ce5c30c/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af5976cf1eb72a35ef196bdf2d174e5f6ce5c30c/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=af5976cf1eb72a35ef196bdf2d174e5f6ce5c30c", "patch": "@@ -70,7 +70,7 @@ pub fn format_expr(\n             expr.span,\n             context,\n             shape,\n-            None,\n+            choose_separator_tactic(context, expr.span),\n             None,\n         ),\n         ast::ExprKind::Lit(ref l) => rewrite_literal(context, l, shape),\n@@ -1336,6 +1336,18 @@ const SPECIAL_MACRO_WHITELIST: &[(&str, usize)] = &[\n     (\"debug_assert_ne!\", 2),\n ];\n \n+fn choose_separator_tactic(context: &RewriteContext, span: Span) -> Option<SeparatorTactic> {\n+    if context.inside_macro() {\n+        if span_ends_with_comma(context, span) {\n+            Some(SeparatorTactic::Always)\n+        } else {\n+            Some(SeparatorTactic::Never)\n+        }\n+    } else {\n+        None\n+    }\n+}\n+\n pub fn rewrite_call(\n     context: &RewriteContext,\n     callee: &str,\n@@ -1350,15 +1362,7 @@ pub fn rewrite_call(\n         shape,\n         span,\n         context.config.width_heuristics().fn_call_width,\n-        if context.inside_macro() {\n-            if span_ends_with_comma(context, span) {\n-                Some(SeparatorTactic::Always)\n-            } else {\n-                Some(SeparatorTactic::Never)\n-            }\n-        } else {\n-            None\n-        },\n+        choose_separator_tactic(context, span),\n     )\n }\n \n@@ -1436,11 +1440,14 @@ pub fn is_nested_call(expr: &ast::Expr) -> bool {\n pub fn span_ends_with_comma(context: &RewriteContext, span: Span) -> bool {\n     let mut result: bool = Default::default();\n     let mut prev_char: char = Default::default();\n+    let closing_delimiters = &[')', '}', ']'];\n \n     for (kind, c) in CharClasses::new(context.snippet(span).chars()) {\n         match c {\n             _ if kind.is_comment() || c.is_whitespace() => continue,\n-            ')' | '}' => result = result && prev_char != ')' && prev_char != '}',\n+            c if closing_delimiters.contains(&c) => {\n+                result &= !closing_delimiters.contains(&prev_char);\n+            }\n             ',' => result = true,\n             _ => result = false,\n         }"}, {"sha": "204c3c98a67e209b16a4bdb8ecd22539756457a8", "filename": "tests/source/macros.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/af5976cf1eb72a35ef196bdf2d174e5f6ce5c30c/tests%2Fsource%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af5976cf1eb72a35ef196bdf2d174e5f6ce5c30c/tests%2Fsource%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fmacros.rs?ref=af5976cf1eb72a35ef196bdf2d174e5f6ce5c30c", "patch": "@@ -380,3 +380,11 @@ fn foo() {\n     foo!(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);\n     foo!(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,);\n }\n+\n+// #2652\n+// Preserve trailing comma inside macro, even if it looks an array.\n+macro_rules! bar {\n+    ($m:ident) => {\n+        $m!([a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z]);\n+    };\n+}"}, {"sha": "f77814b4ee0d224d05eecf39c1c62e9d03ff6dc5", "filename": "tests/target/macros.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/af5976cf1eb72a35ef196bdf2d174e5f6ce5c30c/tests%2Ftarget%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af5976cf1eb72a35ef196bdf2d174e5f6ce5c30c/tests%2Ftarget%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmacros.rs?ref=af5976cf1eb72a35ef196bdf2d174e5f6ce5c30c", "patch": "@@ -961,3 +961,11 @@ fn foo() {\n         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n     );\n }\n+\n+// #2652\n+// Preserve trailing comma inside macro, even if it looks an array.\n+macro_rules! bar {\n+    ($m:ident) => {\n+        $m!([a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z]);\n+    };\n+}"}]}