{"sha": "54efffcec1187f58f92fdd23af1ebd4acff982a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0ZWZmZmNlYzExODdmNThmOTJmZGQyM2FmMWViZDRhY2ZmOTgyYTA=", "commit": {"author": {"name": "Lukas Markeffsky", "email": "markeffsky@outlook.com", "date": "2019-08-09T17:47:25Z"}, "committer": {"name": "Lukas Markeffsky", "email": "markeffsky@outlook.com", "date": "2019-08-09T17:47:25Z"}, "message": "removed unused imports #2", "tree": {"sha": "13bcc42387cbd82ab15a0d8f53c307343baeee62", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13bcc42387cbd82ab15a0d8f53c307343baeee62"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/54efffcec1187f58f92fdd23af1ebd4acff982a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/54efffcec1187f58f92fdd23af1ebd4acff982a0", "html_url": "https://github.com/rust-lang/rust/commit/54efffcec1187f58f92fdd23af1ebd4acff982a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/54efffcec1187f58f92fdd23af1ebd4acff982a0/comments", "author": null, "committer": null, "parents": [{"sha": "1d2c23a2a53bbddcb2948245c94e0affcb9ee2ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d2c23a2a53bbddcb2948245c94e0affcb9ee2ab", "html_url": "https://github.com/rust-lang/rust/commit/1d2c23a2a53bbddcb2948245c94e0affcb9ee2ab"}], "stats": {"total": 41, "additions": 20, "deletions": 21}, "files": [{"sha": "8c7aa837e526e6586b8cdc53ac98d8a06ffbcc8e", "filename": "tests/ui/methods.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/54efffcec1187f58f92fdd23af1ebd4acff982a0/tests%2Fui%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54efffcec1187f58f92fdd23af1ebd4acff982a0/tests%2Fui%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.rs?ref=54efffcec1187f58f92fdd23af1ebd4acff982a0", "patch": "@@ -27,7 +27,6 @@ use std::collections::HashSet;\n use std::collections::VecDeque;\n use std::iter::FromIterator;\n use std::ops::Mul;\n-use std::pin::Pin;\n use std::rc::{self, Rc};\n use std::sync::{self, Arc};\n "}, {"sha": "0cfa4d0fa4e3603c0f6fd9952083d018847b4d78", "filename": "tests/ui/methods.stderr", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/54efffcec1187f58f92fdd23af1ebd4acff982a0/tests%2Fui%2Fmethods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/54efffcec1187f58f92fdd23af1ebd4acff982a0/tests%2Fui%2Fmethods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.stderr?ref=54efffcec1187f58f92fdd23af1ebd4acff982a0", "patch": "@@ -1,5 +1,5 @@\n error: defining a method called `add` on this type; consider implementing the `std::ops::Add` trait or choosing a less ambiguous name\n-  --> $DIR/methods.rs:39:5\n+  --> $DIR/methods.rs:38:5\n    |\n LL | /     pub fn add(self, other: T) -> T {\n LL | |         self\n@@ -9,7 +9,7 @@ LL | |     }\n    = note: `-D clippy::should-implement-trait` implied by `-D warnings`\n \n error: called `map(f).unwrap_or(a)` on an Option value. This can be done more directly by calling `map_or(a, f)` instead\n-  --> $DIR/methods.rs:169:13\n+  --> $DIR/methods.rs:168:13\n    |\n LL |       let _ = opt.map(|x| x + 1)\n    |  _____________^\n@@ -21,7 +21,7 @@ LL | |                .unwrap_or(0);\n    = note: replace `map(|x| x + 1).unwrap_or(0)` with `map_or(0, |x| x + 1)`\n \n error: called `map(f).unwrap_or(a)` on an Option value. This can be done more directly by calling `map_or(a, f)` instead\n-  --> $DIR/methods.rs:173:13\n+  --> $DIR/methods.rs:172:13\n    |\n LL |       let _ = opt.map(|x| {\n    |  _____________^\n@@ -31,7 +31,7 @@ LL | |               ).unwrap_or(0);\n    | |____________________________^\n \n error: called `map(f).unwrap_or(a)` on an Option value. This can be done more directly by calling `map_or(a, f)` instead\n-  --> $DIR/methods.rs:177:13\n+  --> $DIR/methods.rs:176:13\n    |\n LL |       let _ = opt.map(|x| x + 1)\n    |  _____________^\n@@ -41,15 +41,15 @@ LL | |                 });\n    | |__________________^\n \n error: called `map(f).unwrap_or(None)` on an Option value. This can be done more directly by calling `and_then(f)` instead\n-  --> $DIR/methods.rs:182:13\n+  --> $DIR/methods.rs:181:13\n    |\n LL |     let _ = opt.map(|x| Some(x + 1)).unwrap_or(None);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: replace `map(|x| Some(x + 1)).unwrap_or(None)` with `and_then(|x| Some(x + 1))`\n \n error: called `map(f).unwrap_or(None)` on an Option value. This can be done more directly by calling `and_then(f)` instead\n-  --> $DIR/methods.rs:184:13\n+  --> $DIR/methods.rs:183:13\n    |\n LL |       let _ = opt.map(|x| {\n    |  _____________^\n@@ -59,7 +59,7 @@ LL | |     ).unwrap_or(None);\n    | |_____________________^\n \n error: called `map(f).unwrap_or(None)` on an Option value. This can be done more directly by calling `and_then(f)` instead\n-  --> $DIR/methods.rs:188:13\n+  --> $DIR/methods.rs:187:13\n    |\n LL |       let _ = opt\n    |  _____________^\n@@ -70,15 +70,15 @@ LL | |         .unwrap_or(None);\n    = note: replace `map(|x| Some(x + 1)).unwrap_or(None)` with `and_then(|x| Some(x + 1))`\n \n error: called `map(f).unwrap_or(a)` on an Option value. This can be done more directly by calling `map_or(a, f)` instead\n-  --> $DIR/methods.rs:199:13\n+  --> $DIR/methods.rs:198:13\n    |\n LL |     let _ = Some(\"prefix\").map(|p| format!(\"{}.\", p)).unwrap_or(id);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: replace `map(|p| format!(\"{}.\", p)).unwrap_or(id)` with `map_or(id, |p| format!(\"{}.\", p))`\n \n error: called `map(f).unwrap_or_else(g)` on an Option value. This can be done more directly by calling `map_or_else(g, f)` instead\n-  --> $DIR/methods.rs:203:13\n+  --> $DIR/methods.rs:202:13\n    |\n LL |       let _ = opt.map(|x| x + 1)\n    |  _____________^\n@@ -90,7 +90,7 @@ LL | |                .unwrap_or_else(|| 0);\n    = note: replace `map(|x| x + 1).unwrap_or_else(|| 0)` with `map_or_else(|| 0, |x| x + 1)`\n \n error: called `map(f).unwrap_or_else(g)` on an Option value. This can be done more directly by calling `map_or_else(g, f)` instead\n-  --> $DIR/methods.rs:207:13\n+  --> $DIR/methods.rs:206:13\n    |\n LL |       let _ = opt.map(|x| {\n    |  _____________^\n@@ -100,7 +100,7 @@ LL | |               ).unwrap_or_else(|| 0);\n    | |____________________________________^\n \n error: called `map(f).unwrap_or_else(g)` on an Option value. This can be done more directly by calling `map_or_else(g, f)` instead\n-  --> $DIR/methods.rs:211:13\n+  --> $DIR/methods.rs:210:13\n    |\n LL |       let _ = opt.map(|x| x + 1)\n    |  _____________^\n@@ -110,7 +110,7 @@ LL | |                 );\n    | |_________________^\n \n error: called `filter(p).next()` on an `Iterator`. This is more succinctly expressed by calling `.find(p)` instead.\n-  --> $DIR/methods.rs:241:13\n+  --> $DIR/methods.rs:240:13\n    |\n LL |     let _ = v.iter().filter(|&x| *x < 0).next();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -119,7 +119,7 @@ LL |     let _ = v.iter().filter(|&x| *x < 0).next();\n    = note: replace `filter(|&x| *x < 0).next()` with `find(|&x| *x < 0)`\n \n error: called `filter(p).next()` on an `Iterator`. This is more succinctly expressed by calling `.find(p)` instead.\n-  --> $DIR/methods.rs:244:13\n+  --> $DIR/methods.rs:243:13\n    |\n LL |       let _ = v.iter().filter(|&x| {\n    |  _____________^\n@@ -129,7 +129,7 @@ LL | |                    ).next();\n    | |___________________________^\n \n error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:260:13\n+  --> $DIR/methods.rs:259:13\n    |\n LL |     let _ = v.iter().find(|&x| *x < 0).is_some();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -138,7 +138,7 @@ LL |     let _ = v.iter().find(|&x| *x < 0).is_some();\n    = note: replace `find(|&x| *x < 0).is_some()` with `any(|x| *x < 0)`\n \n error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:263:13\n+  --> $DIR/methods.rs:262:13\n    |\n LL |       let _ = v.iter().find(|&x| {\n    |  _____________^\n@@ -148,15 +148,15 @@ LL | |                    ).is_some();\n    | |______________________________^\n \n error: called `is_some()` after searching an `Iterator` with position. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:269:13\n+  --> $DIR/methods.rs:268:13\n    |\n LL |     let _ = v.iter().position(|&x| x < 0).is_some();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: replace `position(|&x| x < 0).is_some()` with `any(|&x| x < 0)`\n \n error: called `is_some()` after searching an `Iterator` with position. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:272:13\n+  --> $DIR/methods.rs:271:13\n    |\n LL |       let _ = v.iter().position(|&x| {\n    |  _____________^\n@@ -166,15 +166,15 @@ LL | |                    ).is_some();\n    | |______________________________^\n \n error: called `is_some()` after searching an `Iterator` with rposition. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:278:13\n+  --> $DIR/methods.rs:277:13\n    |\n LL |     let _ = v.iter().rposition(|&x| x < 0).is_some();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: replace `rposition(|&x| x < 0).is_some()` with `any(|&x| x < 0)`\n \n error: called `is_some()` after searching an `Iterator` with rposition. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:281:13\n+  --> $DIR/methods.rs:280:13\n    |\n LL |       let _ = v.iter().rposition(|&x| {\n    |  _____________^\n@@ -184,7 +184,7 @@ LL | |                    ).is_some();\n    | |______________________________^\n \n error: used unwrap() on an Option value. If you don't want to handle the None case gracefully, consider using expect() to provide a better panic message\n-  --> $DIR/methods.rs:296:13\n+  --> $DIR/methods.rs:295:13\n    |\n LL |     let _ = opt.unwrap();\n    |             ^^^^^^^^^^^^"}]}