{"sha": "763beff5d1bcfb74d2930decd731a43a7d3ad080", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2M2JlZmY1ZDFiY2ZiNzRkMjkzMGRlY2Q3MzFhNDNhN2QzYWQwODA=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2017-04-06T05:04:33Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2017-04-06T05:04:33Z"}, "message": "add documentation to the unstable book", "tree": {"sha": "1937bdf240db551802876bd69a788ec28e4dbf65", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1937bdf240db551802876bd69a788ec28e4dbf65"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/763beff5d1bcfb74d2930decd731a43a7d3ad080", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/763beff5d1bcfb74d2930decd731a43a7d3ad080", "html_url": "https://github.com/rust-lang/rust/commit/763beff5d1bcfb74d2930decd731a43a7d3ad080", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/763beff5d1bcfb74d2930decd731a43a7d3ad080/comments", "author": null, "committer": null, "parents": [{"sha": "bbe54115873eca9d9a889be3d9eff0c01d2ba8be", "url": "https://api.github.com/repos/rust-lang/rust/commits/bbe54115873eca9d9a889be3d9eff0c01d2ba8be", "html_url": "https://github.com/rust-lang/rust/commit/bbe54115873eca9d9a889be3d9eff0c01d2ba8be"}], "stats": {"total": 153, "additions": 153, "deletions": 0}, "files": [{"sha": "0459c6a251995214c093fabb7afba22268676739", "filename": "src/doc/unstable-book/src/SUMMARY.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/763beff5d1bcfb74d2930decd731a43a7d3ad080/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/763beff5d1bcfb74d2930decd731a43a7d3ad080/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md?ref=763beff5d1bcfb74d2930decd731a43a7d3ad080", "patch": "@@ -203,6 +203,7 @@\n - [unwind_attributes](unwind-attributes.md)\n - [update_panic_count](update-panic-count.md)\n - [use_extern_macros](use-extern-macros.md)\n+- [used](used.md)\n - [utf8_error_error_len](utf8-error-error-len.md)\n - [vec_remove_item](vec-remove-item.md)\n - [windows_c](windows-c.md)"}, {"sha": "749c9a8ec288c860c98c2bf3a242f923a0e63280", "filename": "src/doc/unstable-book/src/used.md", "status": "added", "additions": 152, "deletions": 0, "changes": 152, "blob_url": "https://github.com/rust-lang/rust/blob/763beff5d1bcfb74d2930decd731a43a7d3ad080/src%2Fdoc%2Funstable-book%2Fsrc%2Fused.md", "raw_url": "https://github.com/rust-lang/rust/raw/763beff5d1bcfb74d2930decd731a43a7d3ad080/src%2Fdoc%2Funstable-book%2Fsrc%2Fused.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fused.md?ref=763beff5d1bcfb74d2930decd731a43a7d3ad080", "patch": "@@ -0,0 +1,152 @@\n+# `used`\n+\n+The tracking issue for this feature is: 40289.\n+\n+------------------------\n+\n+The `#[used]` attribute can be applied to `static` variables to prevent the Rust\n+compiler from optimizing them away even if they appear to be unused by the crate\n+(appear to be \"dead code\").\n+\n+``` rust\n+#![feature(used)]\n+\n+#[used]\n+static FOO: i32 = 1;\n+\n+static BAR: i32 = 2;\n+\n+fn main() {}\n+```\n+\n+If you compile this program into an object file, you'll see that `FOO` makes it\n+to the object file but `BAR` doesn't. Neither static variable is used by the\n+program.\n+\n+``` text\n+$ rustc -C opt-level=3 --emit=obj used.rs\n+\n+$ nm -C used.o\n+0000000000000000 T main\n+                 U std::rt::lang_start\n+0000000000000000 r used::FOO\n+0000000000000000 t used::main\n+```\n+\n+Note that the *linker* knows nothing about the `#[used]` attribute and will\n+remove `#[used]` symbols if they are not referenced by other parts of the\n+program:\n+\n+``` text\n+$ rustc -C opt-level=3 used.rs\n+\n+$ nm -C used | grep FOO\n+```\n+\n+\"This doesn't sound too useful then!\" you may think but keep reading.\n+\n+To preserve the symbols all the way to the final binary, you'll need the\n+cooperation of the linker. Here's one example:\n+\n+The ELF standard defines two special sections, `.init_array` and\n+`.pre_init_array`, that may contain function pointers which will be executed\n+*before* the `main` function is invoked. The linker will preserve symbols placed\n+in these sections (at least when linking programs that target the `*-*-linux-*`\n+targets).\n+\n+``` rust\n+#![feature(used)]\n+\n+extern \"C\" fn before_main() {\n+    println!(\"Hello, world!\");\n+}\n+\n+#[link_section = \".init_array\"]\n+#[used]\n+static INIT_ARRAY: [extern \"C\" fn(); 1] = [before_main];\n+\n+fn main() {}\n+```\n+\n+So, `#[used]` and `#[link_section]` can be combined to obtain \"life before\n+main\".\n+\n+``` text\n+$ rustc -C opt-level=3 before-main.rs\n+\n+$ ./before-main\n+Hello, world!\n+```\n+\n+Another example: ARM Cortex-M microcontrollers need their reset handler, a\n+pointer to the function that will executed right after the microcontroller is\n+turned on, to be placed near the start of their FLASH memory to boot properly.\n+\n+This condition can be met using `#[used]` and `#[link_section]` plus a linker\n+script.\n+\n+``` rust\n+#![feature(lang_items)]\n+#![feature(used)]\n+#![no_main]\n+#![no_std]\n+\n+extern \"C\" fn reset_handler() -> ! {\n+    loop {}\n+}\n+\n+#[link_section = \".reset_handler\"]\n+#[used]\n+static RESET_HANDLER: extern \"C\" fn() -> ! = reset_handler;\n+\n+#[lang = \"panic_fmt\"]\n+fn panic_fmt() {}\n+```\n+\n+``` text\n+MEMORY\n+{\n+  FLASH : ORIGIN = 0x08000000, LENGTH = 128K\n+  RAM : ORIGIN = 0x20000000, LENGTH = 20K\n+}\n+\n+SECTIONS\n+{\n+  .text ORIGIN(FLASH) :\n+  {\n+    /* Vector table */\n+    LONG(ORIGIN(RAM) + LENGTH(RAM)); /* initial SP value */\n+    KEEP(*(.reset_handler));\n+\n+    /* Omitted: The rest of the vector table */\n+\n+    *(.text.*);\n+  } > FLASH\n+\n+  /DISCARD/ :\n+  {\n+    /* Unused unwinding stuff */\n+    *(.ARM.exidx.*)\n+  }\n+}\n+```\n+\n+``` text\n+$ xargo rustc --target thumbv7m-none-eabi --release -- \\\n+    -C link-arg=-Tlink.x -C link-arg=-nostartfiles\n+\n+$ arm-none-eabi-objdump -Cd target/thumbv7m-none-eabi/release/app\n+./target/thumbv7m-none-eabi/release/app:     file format elf32-littlearm\n+\n+\n+Disassembly of section .text:\n+\n+08000000 <app::RESET_HANDLER-0x4>:\n+ 8000000:       20005000        .word   0x20005000\n+\n+08000004 <app::RESET_HANDLER>:\n+ 8000004:       08000009                                ....\n+\n+08000008 <app::reset_handler>:\n+ 8000008:       e7fe            b.n     8000008 <app::reset_handler>\n+```"}]}