{"sha": "f0c4da49983aa699f715caf681e3154b445fb60b", "node_id": "C_kwDOAAsO6NoAKGYwYzRkYTQ5OTgzYWE2OTlmNzE1Y2FmNjgxZTMxNTRiNDQ1ZmI2MGI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-01T11:24:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-01T11:24:10Z"}, "message": "Auto merge of #94477 - matthiaskrgr:rollup-8h29qek, r=matthiaskrgr\n\nRollup of 3 pull requests\n\nSuccessful merges:\n\n - #94359 (Fix inconsistent symbol mangling of integers constants with -Zverbose)\n - #94465 (6 - Make more use of `let_chains`)\n - #94470 (:arrow_up: rust-analyzer)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "a5666b11116f4b537e9dea4aa656713f2e1078b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5666b11116f4b537e9dea4aa656713f2e1078b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f0c4da49983aa699f715caf681e3154b445fb60b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f0c4da49983aa699f715caf681e3154b445fb60b", "html_url": "https://github.com/rust-lang/rust/commit/f0c4da49983aa699f715caf681e3154b445fb60b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f0c4da49983aa699f715caf681e3154b445fb60b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a56cbec59903a830a5fc06c5c81956de4199584", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a56cbec59903a830a5fc06c5c81956de4199584", "html_url": "https://github.com/rust-lang/rust/commit/4a56cbec59903a830a5fc06c5c81956de4199584"}, {"sha": "2091f2a5d955476f5d7c272843acab8a41badd92", "url": "https://api.github.com/repos/rust-lang/rust/commits/2091f2a5d955476f5d7c272843acab8a41badd92", "html_url": "https://github.com/rust-lang/rust/commit/2091f2a5d955476f5d7c272843acab8a41badd92"}], "stats": {"total": 1655, "additions": 1435, "deletions": 220}, "files": [{"sha": "46c616ff362414a2668c48c22cf3eaf3522f53fa", "filename": "compiler/rustc_mir_build/src/build/expr/stmt.rs", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f0c4da49983aa699f715caf681e3154b445fb60b/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0c4da49983aa699f715caf681e3154b445fb60b/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fstmt.rs?ref=f0c4da49983aa699f715caf681e3154b445fb60b", "patch": "@@ -116,22 +116,20 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 // it is usually better to focus on `the_value` rather\n                 // than the entirety of block(s) surrounding it.\n                 let adjusted_span = (|| {\n-                    if let ExprKind::Block { body } = &expr.kind {\n-                        if let Some(tail_expr) = body.expr {\n-                            let mut expr = &this.thir[tail_expr];\n-                            while let ExprKind::Block {\n-                                body: Block { expr: Some(nested_expr), .. },\n-                            }\n-                            | ExprKind::Scope { value: nested_expr, .. } = expr.kind\n-                            {\n-                                expr = &this.thir[nested_expr];\n-                            }\n-                            this.block_context.push(BlockFrame::TailExpr {\n-                                tail_result_is_ignored: true,\n-                                span: expr.span,\n-                            });\n-                            return Some(expr.span);\n+                    if let ExprKind::Block { body } = &expr.kind && let Some(tail_ex) = body.expr {\n+                        let mut expr = &this.thir[tail_ex];\n+                        while let ExprKind::Block {\n+                            body: Block { expr: Some(nested_expr), .. },\n                         }\n+                        | ExprKind::Scope { value: nested_expr, .. } = expr.kind\n+                        {\n+                            expr = &this.thir[nested_expr];\n+                        }\n+                        this.block_context.push(BlockFrame::TailExpr {\n+                            tail_result_is_ignored: true,\n+                            span: expr.span,\n+                        });\n+                        return Some(expr.span);\n                     }\n                     None\n                 })();"}, {"sha": "44fe93ba3630c96de23c66c015f442c222c367cc", "filename": "compiler/rustc_mir_build/src/build/matches/mod.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f0c4da49983aa699f715caf681e3154b445fb60b/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0c4da49983aa699f715caf681e3154b445fb60b/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs?ref=f0c4da49983aa699f715caf681e3154b445fb60b", "patch": "@@ -1597,13 +1597,11 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         }\n \n         // Insert a Shallow borrow of any places that is switched on.\n-        if let Some(fb) = fake_borrows {\n-            if let Ok(match_place_resolved) =\n-                match_place.clone().try_upvars_resolved(self.tcx, self.typeck_results)\n-            {\n-                let resolved_place = match_place_resolved.into_place(self.tcx, self.typeck_results);\n-                fb.insert(resolved_place);\n-            }\n+        if let Some(fb) = fake_borrows && let Ok(match_place_resolved) =\n+            match_place.clone().try_upvars_resolved(self.tcx, self.typeck_results)\n+        {\n+            let resolved_place = match_place_resolved.into_place(self.tcx, self.typeck_results);\n+            fb.insert(resolved_place);\n         }\n \n         // perform the test, branching to one of N blocks. For each of"}, {"sha": "393e67f21bfe2ee6290aaca41ba7b51c7917fcad", "filename": "compiler/rustc_mir_build/src/build/mod.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f0c4da49983aa699f715caf681e3154b445fb60b/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0c4da49983aa699f715caf681e3154b445fb60b/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs?ref=f0c4da49983aa699f715caf681e3154b445fb60b", "patch": "@@ -877,14 +877,12 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             let arg_local = self.local_decls.push(LocalDecl::with_source_info(ty, source_info));\n \n             // If this is a simple binding pattern, give debuginfo a nice name.\n-            if let Some(arg) = arg_opt {\n-                if let Some(ident) = arg.pat.simple_ident() {\n-                    self.var_debug_info.push(VarDebugInfo {\n-                        name: ident.name,\n-                        source_info,\n-                        value: VarDebugInfoContents::Place(arg_local.into()),\n-                    });\n-                }\n+            if let Some(arg) = arg_opt && let Some(ident) = arg.pat.simple_ident() {\n+                self.var_debug_info.push(VarDebugInfo {\n+                    name: ident.name,\n+                    source_info,\n+                    value: VarDebugInfoContents::Place(arg_local.into()),\n+                });\n             }\n         }\n "}, {"sha": "b40d3e453e931153eb8e8434061bda83ab5f3446", "filename": "compiler/rustc_mir_build/src/check_unsafety.rs", "status": "modified", "additions": 15, "deletions": 19, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f0c4da49983aa699f715caf681e3154b445fb60b/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0c4da49983aa699f715caf681e3154b445fb60b/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs?ref=f0c4da49983aa699f715caf681e3154b445fb60b", "patch": "@@ -416,23 +416,21 @@ impl<'a, 'tcx> Visitor<'a, 'tcx> for UnsafetyVisitor<'a, 'tcx> {\n             }\n             ExprKind::Field { lhs, .. } => {\n                 let lhs = &self.thir[lhs];\n-                if let ty::Adt(adt_def, _) = lhs.ty.kind() {\n-                    if adt_def.is_union() {\n-                        if let Some((assigned_ty, assignment_span)) = self.assignment_info {\n-                            // To avoid semver hazard, we only consider `Copy` and `ManuallyDrop` non-dropping.\n-                            if !(assigned_ty\n-                                .ty_adt_def()\n-                                .map_or(false, |adt| adt.is_manually_drop())\n-                                || assigned_ty\n-                                    .is_copy_modulo_regions(self.tcx.at(expr.span), self.param_env))\n-                            {\n-                                self.requires_unsafe(assignment_span, AssignToDroppingUnionField);\n-                            } else {\n-                                // write to non-drop union field, safe\n-                            }\n+                if let ty::Adt(adt_def, _) = lhs.ty.kind() && adt_def.is_union() {\n+                    if let Some((assigned_ty, assignment_span)) = self.assignment_info {\n+                        // To avoid semver hazard, we only consider `Copy` and `ManuallyDrop` non-dropping.\n+                        if !(assigned_ty\n+                            .ty_adt_def()\n+                            .map_or(false, |adt| adt.is_manually_drop())\n+                            || assigned_ty\n+                                .is_copy_modulo_regions(self.tcx.at(expr.span), self.param_env))\n+                        {\n+                            self.requires_unsafe(assignment_span, AssignToDroppingUnionField);\n                         } else {\n-                            self.requires_unsafe(expr.span, AccessToUnionField);\n+                            // write to non-drop union field, safe\n                         }\n+                    } else {\n+                        self.requires_unsafe(expr.span, AccessToUnionField);\n                     }\n                 }\n             }\n@@ -476,10 +474,8 @@ impl<'a, 'tcx> Visitor<'a, 'tcx> for UnsafetyVisitor<'a, 'tcx> {\n             }\n             ExprKind::Let { expr: expr_id, .. } => {\n                 let let_expr = &self.thir[expr_id];\n-                if let ty::Adt(adt_def, _) = let_expr.ty.kind() {\n-                    if adt_def.is_union() {\n-                        self.requires_unsafe(expr.span, AccessToUnionField);\n-                    }\n+                if let ty::Adt(adt_def, _) = let_expr.ty.kind() && adt_def.is_union() {\n+                    self.requires_unsafe(expr.span, AccessToUnionField);\n                 }\n             }\n             _ => {}"}, {"sha": "6687e1160ede86d639859984f948aacc00d0df8f", "filename": "compiler/rustc_mir_build/src/lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f0c4da49983aa699f715caf681e3154b445fb60b/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0c4da49983aa699f715caf681e3154b445fb60b/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs?ref=f0c4da49983aa699f715caf681e3154b445fb60b", "patch": "@@ -1,15 +1,16 @@\n //! Construction of MIR from HIR.\n //!\n //! This crate also contains the match exhaustiveness and usefulness checking.\n+#![allow(rustc::potential_query_instability)]\n+#![feature(bool_to_option)]\n #![feature(box_patterns)]\n #![feature(control_flow_enum)]\n #![feature(crate_visibility_modifier)]\n-#![feature(bool_to_option)]\n+#![feature(let_chains)]\n #![feature(let_else)]\n-#![feature(once_cell)]\n #![feature(min_specialization)]\n+#![feature(once_cell)]\n #![recursion_limit = \"256\"]\n-#![allow(rustc::potential_query_instability)]\n \n #[macro_use]\n extern crate tracing;"}, {"sha": "c6026a6ab4b965883b55e75eb169b937e83c9dbc", "filename": "compiler/rustc_mir_build/src/thir/pattern/check_match.rs", "status": "modified", "additions": 36, "deletions": 42, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/f0c4da49983aa699f715caf681e3154b445fb60b/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0c4da49983aa699f715caf681e3154b445fb60b/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs?ref=f0c4da49983aa699f715caf681e3154b445fb60b", "patch": "@@ -315,47 +315,43 @@ fn check_for_bindings_named_same_as_variants(\n     rf: RefutableFlag,\n ) {\n     pat.walk_always(|p| {\n-        if let hir::PatKind::Binding(_, _, ident, None) = p.kind {\n-            if let Some(ty::BindByValue(hir::Mutability::Not)) =\n+        if let hir::PatKind::Binding(_, _, ident, None) = p.kind\n+            && let Some(ty::BindByValue(hir::Mutability::Not)) =\n                 cx.typeck_results.extract_binding_mode(cx.tcx.sess, p.hir_id, p.span)\n-            {\n-                let pat_ty = cx.typeck_results.pat_ty(p).peel_refs();\n-                if let ty::Adt(edef, _) = pat_ty.kind() {\n-                    if edef.is_enum()\n-                        && edef.variants.iter().any(|variant| {\n-                            variant.ident(cx.tcx) == ident && variant.ctor_kind == CtorKind::Const\n-                        })\n-                    {\n-                        let variant_count = edef.variants.len();\n-                        cx.tcx.struct_span_lint_hir(\n-                            BINDINGS_WITH_VARIANT_NAME,\n-                            p.hir_id,\n+            && let pat_ty = cx.typeck_results.pat_ty(p).peel_refs()\n+            && let ty::Adt(edef, _) = pat_ty.kind()\n+            && edef.is_enum()\n+            && edef.variants.iter().any(|variant| {\n+                variant.ident(cx.tcx) == ident && variant.ctor_kind == CtorKind::Const\n+            })\n+        {\n+            let variant_count = edef.variants.len();\n+            cx.tcx.struct_span_lint_hir(\n+                BINDINGS_WITH_VARIANT_NAME,\n+                p.hir_id,\n+                p.span,\n+                |lint| {\n+                    let ty_path = cx.tcx.def_path_str(edef.did);\n+                    let mut err = lint.build(&format!(\n+                        \"pattern binding `{}` is named the same as one \\\n+                                        of the variants of the type `{}`\",\n+                        ident, ty_path\n+                    ));\n+                    err.code(error_code!(E0170));\n+                    // If this is an irrefutable pattern, and there's > 1 variant,\n+                    // then we can't actually match on this. Applying the below\n+                    // suggestion would produce code that breaks on `check_irrefutable`.\n+                    if rf == Refutable || variant_count == 1 {\n+                        err.span_suggestion(\n                             p.span,\n-                            |lint| {\n-                                let ty_path = cx.tcx.def_path_str(edef.did);\n-                                let mut err = lint.build(&format!(\n-                                    \"pattern binding `{}` is named the same as one \\\n-                                                    of the variants of the type `{}`\",\n-                                    ident, ty_path\n-                                ));\n-                                err.code(error_code!(E0170));\n-                                // If this is an irrefutable pattern, and there's > 1 variant,\n-                                // then we can't actually match on this. Applying the below\n-                                // suggestion would produce code that breaks on `check_irrefutable`.\n-                                if rf == Refutable || variant_count == 1 {\n-                                    err.span_suggestion(\n-                                        p.span,\n-                                        \"to match on the variant, qualify the path\",\n-                                        format!(\"{}::{}\", ty_path, ident),\n-                                        Applicability::MachineApplicable,\n-                                    );\n-                                }\n-                                err.emit();\n-                            },\n-                        )\n+                            \"to match on the variant, qualify the path\",\n+                            format!(\"{}::{}\", ty_path, ident),\n+                            Applicability::MachineApplicable,\n+                        );\n                     }\n-                }\n-            }\n+                    err.emit();\n+                },\n+            )\n         }\n     });\n }\n@@ -622,10 +618,8 @@ fn maybe_point_at_variant<'a, 'p: 'a, 'tcx: 'a>(\n     let mut covered = vec![];\n     for pattern in patterns {\n         if let Variant(variant_index) = pattern.ctor() {\n-            if let ty::Adt(this_def, _) = pattern.ty().kind() {\n-                if this_def.did != def.did {\n-                    continue;\n-                }\n+            if let ty::Adt(this_def, _) = pattern.ty().kind() && this_def.did != def.did {\n+                continue;\n             }\n             let sp = def.variants[*variant_index].ident(cx.tcx).span;\n             if covered.contains(&sp) {"}, {"sha": "002c0b5f7d8ed3c4b2502dbb1d3ca5d029d0334d", "filename": "compiler/rustc_mir_build/src/thir/pattern/deconstruct_pat.rs", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f0c4da49983aa699f715caf681e3154b445fb60b/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0c4da49983aa699f715caf681e3154b445fb60b/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fdeconstruct_pat.rs?ref=f0c4da49983aa699f715caf681e3154b445fb60b", "patch": "@@ -680,27 +680,23 @@ impl<'tcx> Constructor<'tcx> {\n     ///\n     /// This means that the variant has a stdlib unstable feature marking it.\n     pub(super) fn is_unstable_variant(&self, pcx: PatCtxt<'_, '_, 'tcx>) -> bool {\n-        if let Constructor::Variant(idx) = self {\n-            if let ty::Adt(adt, _) = pcx.ty.kind() {\n-                let variant_def_id = adt.variants[*idx].def_id;\n-                // Filter variants that depend on a disabled unstable feature.\n-                return matches!(\n-                    pcx.cx.tcx.eval_stability(variant_def_id, None, DUMMY_SP, None),\n-                    EvalResult::Deny { .. }\n-                );\n-            }\n+        if let Constructor::Variant(idx) = self && let ty::Adt(adt, _) = pcx.ty.kind() {\n+            let variant_def_id = adt.variants[*idx].def_id;\n+            // Filter variants that depend on a disabled unstable feature.\n+            return matches!(\n+                pcx.cx.tcx.eval_stability(variant_def_id, None, DUMMY_SP, None),\n+                EvalResult::Deny { .. }\n+            );\n         }\n         false\n     }\n \n     /// Checks if the `Constructor` is a `Constructor::Variant` with a `#[doc(hidden)]`\n     /// attribute.\n     pub(super) fn is_doc_hidden_variant(&self, pcx: PatCtxt<'_, '_, 'tcx>) -> bool {\n-        if let Constructor::Variant(idx) = self {\n-            if let ty::Adt(adt, _) = pcx.ty.kind() {\n-                let variant_def_id = adt.variants[*idx].def_id;\n-                return pcx.cx.tcx.is_doc_hidden(variant_def_id);\n-            }\n+        if let Constructor::Variant(idx) = self && let ty::Adt(adt, _) = pcx.ty.kind() {\n+            let variant_def_id = adt.variants[*idx].def_id;\n+            return pcx.cx.tcx.is_doc_hidden(variant_def_id);\n         }\n         false\n     }"}, {"sha": "6282b07e6f086e8fbd6a4f4805c7a05a7d956da7", "filename": "compiler/rustc_mir_build/src/thir/pattern/mod.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f0c4da49983aa699f715caf681e3154b445fb60b/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0c4da49983aa699f715caf681e3154b445fb60b/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs?ref=f0c4da49983aa699f715caf681e3154b445fb60b", "patch": "@@ -790,16 +790,14 @@ crate fn compare_const_vals<'tcx>(\n         };\n     }\n \n-    if let ty::Str = ty.kind() {\n-        if let (\n-            ty::ConstKind::Value(a_val @ ConstValue::Slice { .. }),\n-            ty::ConstKind::Value(b_val @ ConstValue::Slice { .. }),\n-        ) = (a.val(), b.val())\n-        {\n-            let a_bytes = get_slice_bytes(&tcx, a_val);\n-            let b_bytes = get_slice_bytes(&tcx, b_val);\n-            return from_bool(a_bytes == b_bytes);\n-        }\n+    if let ty::Str = ty.kind() && let (\n+        ty::ConstKind::Value(a_val @ ConstValue::Slice { .. }),\n+        ty::ConstKind::Value(b_val @ ConstValue::Slice { .. }),\n+    ) = (a.val(), b.val())\n+    {\n+        let a_bytes = get_slice_bytes(&tcx, a_val);\n+        let b_bytes = get_slice_bytes(&tcx, b_val);\n+        return from_bool(a_bytes == b_bytes);\n     }\n     fallback()\n }"}, {"sha": "6e526bf8fc77a697635ec384017a5dcad38b735e", "filename": "compiler/rustc_symbol_mangling/src/legacy.rs", "status": "modified", "additions": 33, "deletions": 5, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/f0c4da49983aa699f715caf681e3154b445fb60b/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0c4da49983aa699f715caf681e3154b445fb60b/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs?ref=f0c4da49983aa699f715caf681e3154b445fb60b", "patch": "@@ -216,14 +216,32 @@ impl<'tcx> Printer<'tcx> for &mut SymbolPrinter<'tcx> {\n         Ok(self)\n     }\n \n-    fn print_type(self, ty: Ty<'tcx>) -> Result<Self::Type, Self::Error> {\n+    fn print_type(mut self, ty: Ty<'tcx>) -> Result<Self::Type, Self::Error> {\n         match *ty.kind() {\n             // Print all nominal types as paths (unlike `pretty_print_type`).\n             ty::FnDef(def_id, substs)\n             | ty::Opaque(def_id, substs)\n             | ty::Projection(ty::ProjectionTy { item_def_id: def_id, substs })\n             | ty::Closure(def_id, substs)\n             | ty::Generator(def_id, substs, _) => self.print_def_path(def_id, substs),\n+\n+            // The `pretty_print_type` formatting of array size depends on\n+            // -Zverbose flag, so we cannot reuse it here.\n+            ty::Array(ty, size) => {\n+                self.write_str(\"[\")?;\n+                self = self.print_type(ty)?;\n+                self.write_str(\"; \")?;\n+                if let Some(size) = size.val().try_to_bits(self.tcx().data_layout.pointer_size) {\n+                    write!(self, \"{}\", size)?\n+                } else if let ty::ConstKind::Param(param) = size.val() {\n+                    self = param.print(self)?\n+                } else {\n+                    self.write_str(\"_\")?\n+                }\n+                self.write_str(\"]\")?;\n+                Ok(self)\n+            }\n+\n             _ => self.pretty_print_type(ty),\n         }\n     }\n@@ -245,12 +263,22 @@ impl<'tcx> Printer<'tcx> for &mut SymbolPrinter<'tcx> {\n \n     fn print_const(self, ct: ty::Const<'tcx>) -> Result<Self::Const, Self::Error> {\n         // only print integers\n-        if let ty::ConstKind::Value(ConstValue::Scalar(Scalar::Int { .. })) = ct.val() {\n-            if ct.ty().is_integral() {\n-                return self.pretty_print_const(ct, true);\n+        match (ct.val(), ct.ty().kind()) {\n+            (\n+                ty::ConstKind::Value(ConstValue::Scalar(Scalar::Int(scalar))),\n+                ty::Int(_) | ty::Uint(_),\n+            ) => {\n+                // The `pretty_print_const` formatting depends on -Zverbose\n+                // flag, so we cannot reuse it here.\n+                let signed = matches!(ct.ty().kind(), ty::Int(_));\n+                write!(\n+                    self,\n+                    \"{:#?}\",\n+                    ty::ConstInt::new(scalar, signed, ct.ty().is_ptr_sized_integral())\n+                )?;\n             }\n+            _ => self.write_str(\"_\")?,\n         }\n-        self.write_str(\"_\")?;\n         Ok(self)\n     }\n "}, {"sha": "bebbb7aac981c3472edf4fad9f8cc3a97345836f", "filename": "src/test/ui/symbol-names/const-generics-demangling.legacy.stderr", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/f0c4da49983aa699f715caf681e3154b445fb60b/src%2Ftest%2Fui%2Fsymbol-names%2Fconst-generics-demangling.legacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0c4da49983aa699f715caf681e3154b445fb60b/src%2Ftest%2Fui%2Fsymbol-names%2Fconst-generics-demangling.legacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fconst-generics-demangling.legacy.stderr?ref=f0c4da49983aa699f715caf681e3154b445fb60b", "patch": "@@ -0,0 +1,74 @@\n+error: symbol-name(_ZN1c21Unsigned$LT$11_u8$GT$1f17h[HASH]E)\n+  --> $DIR/const-generics-demangling.rs:13:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(c::Unsigned<11_u8>::f::h[HASH])\n+  --> $DIR/const-generics-demangling.rs:13:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(c::Unsigned<11_u8>::f)\n+  --> $DIR/const-generics-demangling.rs:13:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_ZN1c22Signed$LT$.152_i16$GT$1f17h[HASH]E)\n+  --> $DIR/const-generics-demangling.rs:26:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(c::Signed<.152_i16>::f::h[HASH])\n+  --> $DIR/const-generics-demangling.rs:26:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(c::Signed<.152_i16>::f)\n+  --> $DIR/const-generics-demangling.rs:26:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_ZN1c13Bool$LT$_$GT$1f17h[HASH]E)\n+  --> $DIR/const-generics-demangling.rs:39:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(c::Bool<_>::f::h[HASH])\n+  --> $DIR/const-generics-demangling.rs:39:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(c::Bool<_>::f)\n+  --> $DIR/const-generics-demangling.rs:39:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_ZN1c13Char$LT$_$GT$1f17h[HASH]E)\n+  --> $DIR/const-generics-demangling.rs:52:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(c::Char<_>::f::h[HASH])\n+  --> $DIR/const-generics-demangling.rs:52:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(c::Char<_>::f)\n+  --> $DIR/const-generics-demangling.rs:52:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 12 previous errors\n+"}, {"sha": "4a04eca67fd35f191970cb584435aee5bebd3dc5", "filename": "src/test/ui/symbol-names/const-generics-demangling.rs", "status": "modified", "additions": 46, "deletions": 22, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/f0c4da49983aa699f715caf681e3154b445fb60b/src%2Ftest%2Fui%2Fsymbol-names%2Fconst-generics-demangling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0c4da49983aa699f715caf681e3154b445fb60b/src%2Ftest%2Fui%2Fsymbol-names%2Fconst-generics-demangling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fconst-generics-demangling.rs?ref=f0c4da49983aa699f715caf681e3154b445fb60b", "patch": "@@ -1,38 +1,62 @@\n // build-fail\n-// compile-flags: -C symbol-mangling-version=v0 --crate-name=c\n-// normalize-stderr-test: \"c\\[.*?\\]\" -> \"c[HASH]\"\n+// revisions: legacy v0\n+// compile-flags: --crate-name=c\n+//[legacy]compile-flags: -C symbol-mangling-version=legacy -Z unstable-options\n+//    [v0]compile-flags: -C symbol-mangling-version=v0\n+//[legacy]normalize-stderr-test: \"h[[:xdigit:]]{16}\" -> \"h[HASH]\"\n+//    [v0]normalize-stderr-test: \"c\\[.*?\\]\" -> \"c[HASH]\"\n #![feature(rustc_attrs)]\n \n pub struct Unsigned<const F: u8>;\n \n-#[rustc_symbol_name]\n-//~^ ERROR symbol-name(_RMCs\n-//~| ERROR demangling(<c[\n-//~| ERROR demangling-alt(<c::Unsigned<11>>)\n-impl Unsigned<11> {}\n+impl Unsigned<11> {\n+    #[rustc_symbol_name]\n+    //[v0]~^ ERROR symbol-name(_RNvMCs\n+    //[v0]~| ERROR demangling(<c[\n+    //[v0]~| ERROR demangling-alt(<c::Unsigned<11>>::f)\n+    //[legacy]~^^^^ ERROR symbol-name(_ZN1c21Unsigned$LT$11_u8$GT$\n+    //[legacy]~|    ERROR demangling(c::Unsigned<11_u8>::f::\n+    //[legacy]~|    ERROR demangling-alt(c::Unsigned<11_u8>::f)\n+    fn f() {}\n+}\n \n pub struct Signed<const F: i16>;\n \n-#[rustc_symbol_name]\n-//~^ ERROR symbol-name(_RMs_Cs\n-//~| ERROR demangling(<c[\n-//~| ERROR demangling-alt(<c::Signed<-152>>)\n-impl Signed<-152> {}\n+impl Signed<-152> {\n+    #[rustc_symbol_name]\n+    //[v0]~^ ERROR symbol-name(_RNvMs_Cs\n+    //[v0]~| ERROR demangling(<c[\n+    //[v0]~| ERROR demangling-alt(<c::Signed<-152>>::f)\n+    //[legacy]~^^^^ ERROR symbol-name(_ZN1c22Signed$LT$.152_i16$GT$\n+    //[legacy]~|    ERROR demangling(c::Signed<.152_i16>::f::\n+    //[legacy]~|    ERROR demangling-alt(c::Signed<.152_i16>::f)\n+    fn f() {}\n+}\n \n pub struct Bool<const F: bool>;\n \n-#[rustc_symbol_name]\n-//~^ ERROR symbol-name(_RMs0_Cs\n-//~| ERROR demangling(<c[\n-//~| ERROR demangling-alt(<c::Bool<true>>)\n-impl Bool<true> {}\n+impl Bool<true> {\n+    #[rustc_symbol_name]\n+    //[v0]~^ ERROR symbol-name(_RNvMs0_Cs\n+    //[v0]~| ERROR demangling(<c[\n+    //[v0]~| ERROR demangling-alt(<c::Bool<true>>::f)\n+    //[legacy]~^^^^ ERROR symbol-name(_ZN1c13Bool$LT$_$GT$\n+    //[legacy]~|    ERROR demangling(c::Bool<_>::f::\n+    //[legacy]~|    ERROR demangling-alt(c::Bool<_>::f)\n+    fn f() {}\n+}\n \n pub struct Char<const F: char>;\n \n-#[rustc_symbol_name]\n-//~^ ERROR symbol-name(_RMs1_Cs\n-//~| ERROR demangling(<c[\n-//~| ERROR demangling-alt(<c::Char<'\u2202'>>)\n-impl Char<'\u2202'> {}\n+impl Char<'\u2202'> {\n+    #[rustc_symbol_name]\n+    //[v0]~^ ERROR symbol-name(_RNvMs1_Cs\n+    //[v0]~| ERROR demangling(<c[\n+    //[v0]~| ERROR demangling-alt(<c::Char<'\u2202'>>::f)\n+    //[legacy]~^^^^ ERROR symbol-name(_ZN1c13Char$LT$_$GT$\n+    //[legacy]~|    ERROR demangling(c::Char<_>::f::\n+    //[legacy]~|    ERROR demangling-alt(c::Char<_>::f)\n+    fn f() {}\n+}\n \n fn main() {}"}, {"sha": "8aa08b8a22c47ba306c7ab02a6e192377ea5b88c", "filename": "src/test/ui/symbol-names/const-generics-demangling.stderr", "status": "removed", "additions": 0, "deletions": 74, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/4a56cbec59903a830a5fc06c5c81956de4199584/src%2Ftest%2Fui%2Fsymbol-names%2Fconst-generics-demangling.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a56cbec59903a830a5fc06c5c81956de4199584/src%2Ftest%2Fui%2Fsymbol-names%2Fconst-generics-demangling.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fconst-generics-demangling.stderr?ref=4a56cbec59903a830a5fc06c5c81956de4199584", "patch": "@@ -1,74 +0,0 @@\n-error: symbol-name(_RMCsCRATE_HASH_1cINtB<REF>_8UnsignedKhb_E)\n-  --> $DIR/const-generics-demangling.rs:8:1\n-   |\n-LL | #[rustc_symbol_name]\n-   | ^^^^^^^^^^^^^^^^^^^^\n-\n-error: demangling(<c[HASH]::Unsigned<11u8>>)\n-  --> $DIR/const-generics-demangling.rs:8:1\n-   |\n-LL | #[rustc_symbol_name]\n-   | ^^^^^^^^^^^^^^^^^^^^\n-\n-error: demangling-alt(<c::Unsigned<11>>)\n-  --> $DIR/const-generics-demangling.rs:8:1\n-   |\n-LL | #[rustc_symbol_name]\n-   | ^^^^^^^^^^^^^^^^^^^^\n-\n-error: symbol-name(_RMs_CsCRATE_HASH_1cINtB<REF>_6SignedKsn98_E)\n-  --> $DIR/const-generics-demangling.rs:16:1\n-   |\n-LL | #[rustc_symbol_name]\n-   | ^^^^^^^^^^^^^^^^^^^^\n-\n-error: demangling(<c[HASH]::Signed<-152i16>>)\n-  --> $DIR/const-generics-demangling.rs:16:1\n-   |\n-LL | #[rustc_symbol_name]\n-   | ^^^^^^^^^^^^^^^^^^^^\n-\n-error: demangling-alt(<c::Signed<-152>>)\n-  --> $DIR/const-generics-demangling.rs:16:1\n-   |\n-LL | #[rustc_symbol_name]\n-   | ^^^^^^^^^^^^^^^^^^^^\n-\n-error: symbol-name(_RMs0_CsCRATE_HASH_1cINtB<REF>_4BoolKb1_E)\n-  --> $DIR/const-generics-demangling.rs:24:1\n-   |\n-LL | #[rustc_symbol_name]\n-   | ^^^^^^^^^^^^^^^^^^^^\n-\n-error: demangling(<c[HASH]::Bool<true>>)\n-  --> $DIR/const-generics-demangling.rs:24:1\n-   |\n-LL | #[rustc_symbol_name]\n-   | ^^^^^^^^^^^^^^^^^^^^\n-\n-error: demangling-alt(<c::Bool<true>>)\n-  --> $DIR/const-generics-demangling.rs:24:1\n-   |\n-LL | #[rustc_symbol_name]\n-   | ^^^^^^^^^^^^^^^^^^^^\n-\n-error: symbol-name(_RMs1_CsCRATE_HASH_1cINtB<REF>_4CharKc2202_E)\n-  --> $DIR/const-generics-demangling.rs:32:1\n-   |\n-LL | #[rustc_symbol_name]\n-   | ^^^^^^^^^^^^^^^^^^^^\n-\n-error: demangling(<c[HASH]::Char<'\u2202'>>)\n-  --> $DIR/const-generics-demangling.rs:32:1\n-   |\n-LL | #[rustc_symbol_name]\n-   | ^^^^^^^^^^^^^^^^^^^^\n-\n-error: demangling-alt(<c::Char<'\u2202'>>)\n-  --> $DIR/const-generics-demangling.rs:32:1\n-   |\n-LL | #[rustc_symbol_name]\n-   | ^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 12 previous errors\n-"}, {"sha": "7238a849332ad153fb73dfa0ae973a6d67cba902", "filename": "src/test/ui/symbol-names/const-generics-demangling.v0.stderr", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/f0c4da49983aa699f715caf681e3154b445fb60b/src%2Ftest%2Fui%2Fsymbol-names%2Fconst-generics-demangling.v0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0c4da49983aa699f715caf681e3154b445fb60b/src%2Ftest%2Fui%2Fsymbol-names%2Fconst-generics-demangling.v0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fconst-generics-demangling.v0.stderr?ref=f0c4da49983aa699f715caf681e3154b445fb60b", "patch": "@@ -0,0 +1,74 @@\n+error: symbol-name(_RNvMCsCRATE_HASH_1cINtB<REF>_8UnsignedKhb_E1f)\n+  --> $DIR/const-generics-demangling.rs:13:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(<c[HASH]::Unsigned<11u8>>::f)\n+  --> $DIR/const-generics-demangling.rs:13:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(<c::Unsigned<11>>::f)\n+  --> $DIR/const-generics-demangling.rs:13:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_RNvMs_CsCRATE_HASH_1cINtB<REF>_6SignedKsn98_E1f)\n+  --> $DIR/const-generics-demangling.rs:26:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(<c[HASH]::Signed<-152i16>>::f)\n+  --> $DIR/const-generics-demangling.rs:26:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(<c::Signed<-152>>::f)\n+  --> $DIR/const-generics-demangling.rs:26:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_RNvMs0_CsCRATE_HASH_1cINtB<REF>_4BoolKb1_E1f)\n+  --> $DIR/const-generics-demangling.rs:39:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(<c[HASH]::Bool<true>>::f)\n+  --> $DIR/const-generics-demangling.rs:39:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(<c::Bool<true>>::f)\n+  --> $DIR/const-generics-demangling.rs:39:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_RNvMs1_CsCRATE_HASH_1cINtB<REF>_4CharKc2202_E1f)\n+  --> $DIR/const-generics-demangling.rs:52:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(<c[HASH]::Char<'\u2202'>>::f)\n+  --> $DIR/const-generics-demangling.rs:52:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(<c::Char<'\u2202'>>::f)\n+  --> $DIR/const-generics-demangling.rs:52:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 12 previous errors\n+"}, {"sha": "a4984d5629f7d4f734cc46ffceb64234370f636a", "filename": "src/test/ui/symbol-names/types.legacy.stderr", "status": "added", "additions": 470, "deletions": 0, "changes": 470, "blob_url": "https://github.com/rust-lang/rust/blob/f0c4da49983aa699f715caf681e3154b445fb60b/src%2Ftest%2Fui%2Fsymbol-names%2Ftypes.legacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0c4da49983aa699f715caf681e3154b445fb60b/src%2Ftest%2Fui%2Fsymbol-names%2Ftypes.legacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Ftypes.legacy.stderr?ref=f0c4da49983aa699f715caf681e3154b445fb60b", "patch": "@@ -0,0 +1,470 @@\n+error: symbol-name(_ZN1a1b16Type$LT$bool$GT$17h[HASH]E)\n+  --> $DIR/types.rs:13:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(a::b::Type<bool>::h[HASH])\n+  --> $DIR/types.rs:13:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(a::b::Type<bool>)\n+  --> $DIR/types.rs:13:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_ZN1a1b16Type$LT$char$GT$17h[HASH]E)\n+  --> $DIR/types.rs:19:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(a::b::Type<char>::h[HASH])\n+  --> $DIR/types.rs:19:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(a::b::Type<char>)\n+  --> $DIR/types.rs:19:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_ZN1a1b14Type$LT$i8$GT$17h[HASH]E)\n+  --> $DIR/types.rs:25:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(a::b::Type<i8>::h[HASH])\n+  --> $DIR/types.rs:25:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(a::b::Type<i8>)\n+  --> $DIR/types.rs:25:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_ZN1a1b15Type$LT$i16$GT$17h[HASH]E)\n+  --> $DIR/types.rs:31:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(a::b::Type<i16>::h[HASH])\n+  --> $DIR/types.rs:31:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(a::b::Type<i16>)\n+  --> $DIR/types.rs:31:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_ZN1a1b15Type$LT$i32$GT$17h[HASH]E)\n+  --> $DIR/types.rs:37:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(a::b::Type<i32>::h[HASH])\n+  --> $DIR/types.rs:37:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(a::b::Type<i32>)\n+  --> $DIR/types.rs:37:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_ZN1a1b15Type$LT$i64$GT$17h[HASH]E)\n+  --> $DIR/types.rs:43:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(a::b::Type<i64>::h[HASH])\n+  --> $DIR/types.rs:43:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(a::b::Type<i64>)\n+  --> $DIR/types.rs:43:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_ZN1a1b14Type$LT$u8$GT$17h[HASH]E)\n+  --> $DIR/types.rs:49:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(a::b::Type<u8>::h[HASH])\n+  --> $DIR/types.rs:49:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(a::b::Type<u8>)\n+  --> $DIR/types.rs:49:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_ZN1a1b15Type$LT$u16$GT$17h[HASH]E)\n+  --> $DIR/types.rs:55:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(a::b::Type<u16>::h[HASH])\n+  --> $DIR/types.rs:55:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(a::b::Type<u16>)\n+  --> $DIR/types.rs:55:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_ZN1a1b15Type$LT$u32$GT$17h[HASH]E)\n+  --> $DIR/types.rs:61:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(a::b::Type<u32>::h[HASH])\n+  --> $DIR/types.rs:61:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(a::b::Type<u32>)\n+  --> $DIR/types.rs:61:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_ZN1a1b15Type$LT$u64$GT$17h[HASH]E)\n+  --> $DIR/types.rs:67:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(a::b::Type<u64>::h[HASH])\n+  --> $DIR/types.rs:67:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(a::b::Type<u64>)\n+  --> $DIR/types.rs:67:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_ZN1a1b15Type$LT$f32$GT$17h[HASH]E)\n+  --> $DIR/types.rs:73:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(a::b::Type<f32>::h[HASH])\n+  --> $DIR/types.rs:73:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(a::b::Type<f32>)\n+  --> $DIR/types.rs:73:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_ZN1a1b15Type$LT$f64$GT$17h[HASH]E)\n+  --> $DIR/types.rs:79:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(a::b::Type<f64>::h[HASH])\n+  --> $DIR/types.rs:79:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(a::b::Type<f64>)\n+  --> $DIR/types.rs:79:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_ZN1a1b15Type$LT$str$GT$17h[HASH]E)\n+  --> $DIR/types.rs:85:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(a::b::Type<str>::h[HASH])\n+  --> $DIR/types.rs:85:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(a::b::Type<str>)\n+  --> $DIR/types.rs:85:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_ZN1a1b17Type$LT$$u21$$GT$17h[HASH]E)\n+  --> $DIR/types.rs:91:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(a::b::Type<!>::h[HASH])\n+  --> $DIR/types.rs:91:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(a::b::Type<!>)\n+  --> $DIR/types.rs:91:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_ZN1a1b20Type$LT$$LP$$RP$$GT$17h[HASH]E)\n+  --> $DIR/types.rs:97:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(a::b::Type<()>::h[HASH])\n+  --> $DIR/types.rs:97:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(a::b::Type<()>)\n+  --> $DIR/types.rs:97:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_ZN1a1b25Type$LT$$LP$u8$C$$RP$$GT$17h[HASH]E)\n+  --> $DIR/types.rs:103:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(a::b::Type<(u8,)>::h[HASH])\n+  --> $DIR/types.rs:103:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(a::b::Type<(u8,)>)\n+  --> $DIR/types.rs:103:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_ZN1a1b28Type$LT$$LP$u8$C$u16$RP$$GT$17h[HASH]E)\n+  --> $DIR/types.rs:109:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(a::b::Type<(u8,u16)>::h[HASH])\n+  --> $DIR/types.rs:109:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(a::b::Type<(u8,u16)>)\n+  --> $DIR/types.rs:109:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_ZN1a1b34Type$LT$$LP$u8$C$u16$C$u32$RP$$GT$17h[HASH]E)\n+  --> $DIR/types.rs:115:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(a::b::Type<(u8,u16,u32)>::h[HASH])\n+  --> $DIR/types.rs:115:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(a::b::Type<(u8,u16,u32)>)\n+  --> $DIR/types.rs:115:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_ZN1a1b28Type$LT$$BP$const$u20$u8$GT$17h[HASH]E)\n+  --> $DIR/types.rs:121:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(a::b::Type<*const u8>::h[HASH])\n+  --> $DIR/types.rs:121:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(a::b::Type<*const u8>)\n+  --> $DIR/types.rs:121:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_ZN1a1b26Type$LT$$BP$mut$u20$u8$GT$17h[HASH]E)\n+  --> $DIR/types.rs:127:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(a::b::Type<*mut u8>::h[HASH])\n+  --> $DIR/types.rs:127:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(a::b::Type<*mut u8>)\n+  --> $DIR/types.rs:127:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_ZN1a1b19Type$LT$$RF$str$GT$17h[HASH]E)\n+  --> $DIR/types.rs:133:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(a::b::Type<&str>::h[HASH])\n+  --> $DIR/types.rs:133:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(a::b::Type<&str>)\n+  --> $DIR/types.rs:133:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_ZN1a1b27Type$LT$$RF$mut$u20$str$GT$17h[HASH]E)\n+  --> $DIR/types.rs:139:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(a::b::Type<&mut str>::h[HASH])\n+  --> $DIR/types.rs:139:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(a::b::Type<&mut str>)\n+  --> $DIR/types.rs:139:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_ZN1a1b35Type$LT$$u5b$u8$u3b$$u20$0$u5d$$GT$17h[HASH]E)\n+  --> $DIR/types.rs:145:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(a::b::Type<[u8; 0]>::h[HASH])\n+  --> $DIR/types.rs:145:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(a::b::Type<[u8; 0]>)\n+  --> $DIR/types.rs:145:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_ZN1a1b22Type$LT$fn$LP$$RP$$GT$17h[HASH]E)\n+  --> $DIR/types.rs:151:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(a::b::Type<fn()>::h[HASH])\n+  --> $DIR/types.rs:151:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(a::b::Type<fn()>)\n+  --> $DIR/types.rs:151:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_ZN1a1b60Type$LT$unsafe$u20$extern$u20$$u22$C$u22$$u20$fn$LP$$RP$$GT$17h[HASH]E)\n+  --> $DIR/types.rs:157:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(a::b::Type<unsafe extern \"C\" fn()>::h[HASH])\n+  --> $DIR/types.rs:157:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(a::b::Type<unsafe extern \"C\" fn()>)\n+  --> $DIR/types.rs:157:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_ZN1a1b34Type$LT$$u5b$T$u3b$$u20$N$u5d$$GT$17h[HASH]E)\n+  --> $DIR/types.rs:163:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(a::b::Type<[T; N]>::h[HASH])\n+  --> $DIR/types.rs:163:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(a::b::Type<[T; N]>)\n+  --> $DIR/types.rs:163:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 78 previous errors\n+"}, {"sha": "0ae699c93c2de67d3fa189850ee65e1a65449a5b", "filename": "src/test/ui/symbol-names/types.rs", "status": "added", "additions": 170, "deletions": 0, "changes": 170, "blob_url": "https://github.com/rust-lang/rust/blob/f0c4da49983aa699f715caf681e3154b445fb60b/src%2Ftest%2Fui%2Fsymbol-names%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0c4da49983aa699f715caf681e3154b445fb60b/src%2Ftest%2Fui%2Fsymbol-names%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Ftypes.rs?ref=f0c4da49983aa699f715caf681e3154b445fb60b", "patch": "@@ -0,0 +1,170 @@\n+// build-fail\n+// revisions: legacy verbose-legacy\n+// compile-flags: --crate-name=a -C symbol-mangling-version=legacy -Z unstable-options\n+//[verbose-legacy]compile-flags: -Zverbose\n+// normalize-stderr-test: \"h[[:xdigit:]]{16}\" -> \"h[HASH]\"\n+\n+#![feature(never_type)]\n+#![feature(rustc_attrs)]\n+\n+pub fn b() {\n+    struct Type<T: ?Sized>(T);\n+\n+    #[rustc_symbol_name]\n+    //~^ ERROR symbol-name(_ZN1a1b16Type$LT$bool$GT$\n+    //~| ERROR demangling(a::b::Type<bool>::\n+    //~| ERROR demangling-alt(a::b::Type<bool>)\n+    impl Type<bool> {}\n+\n+    #[rustc_symbol_name]\n+    //~^ ERROR symbol-name(_ZN1a1b16Type$LT$char$GT$\n+    //~| ERROR demangling(a::b::Type<char>::\n+    //~| ERROR demangling-alt(a::b::Type<char>)\n+    impl Type<char> {}\n+\n+    #[rustc_symbol_name]\n+    //~^ ERROR symbol-name(_ZN1a1b14Type$LT$i8$GT$\n+    //~| ERROR demangling(a::b::Type<i8>::\n+    //~| ERROR demangling-alt(a::b::Type<i8>)\n+    impl Type<i8> {}\n+\n+    #[rustc_symbol_name]\n+    //~^ ERROR symbol-name(_ZN1a1b15Type$LT$i16$GT$\n+    //~| ERROR demangling(a::b::Type<i16>::\n+    //~| ERROR demangling-alt(a::b::Type<i16>)\n+    impl Type<i16> {}\n+\n+    #[rustc_symbol_name]\n+    //~^ ERROR symbol-name(_ZN1a1b15Type$LT$i32$GT$\n+    //~| ERROR demangling(a::b::Type<i32>::\n+    //~| ERROR demangling-alt(a::b::Type<i32>)\n+    impl Type<i32> {}\n+\n+    #[rustc_symbol_name]\n+    //~^ ERROR symbol-name(_ZN1a1b15Type$LT$i64$GT$\n+    //~| ERROR demangling(a::b::Type<i64>::\n+    //~| ERROR demangling-alt(a::b::Type<i64>)\n+    impl Type<i64> {}\n+\n+    #[rustc_symbol_name]\n+    //~^ ERROR symbol-name(_ZN1a1b14Type$LT$u8$GT$\n+    //~| ERROR demangling(a::b::Type<u8>::\n+    //~| ERROR demangling-alt(a::b::Type<u8>)\n+    impl Type<u8> {}\n+\n+    #[rustc_symbol_name]\n+    //~^ ERROR symbol-name(_ZN1a1b15Type$LT$u16$GT$\n+    //~| ERROR demangling(a::b::Type<u16>::\n+    //~| ERROR demangling-alt(a::b::Type<u16>)\n+    impl Type<u16> {}\n+\n+    #[rustc_symbol_name]\n+    //~^ ERROR symbol-name(_ZN1a1b15Type$LT$u32$GT$\n+    //~| ERROR demangling(a::b::Type<u32>::\n+    //~| ERROR demangling-alt(a::b::Type<u32>)\n+    impl Type<u32> {}\n+\n+    #[rustc_symbol_name]\n+    //~^ ERROR symbol-name(_ZN1a1b15Type$LT$u64$GT$\n+    //~| ERROR demangling(a::b::Type<u64>::\n+    //~| ERROR demangling-alt(a::b::Type<u64>)\n+    impl Type<u64> {}\n+\n+    #[rustc_symbol_name]\n+    //~^ ERROR symbol-name(_ZN1a1b15Type$LT$f32$GT$\n+    //~| ERROR demangling(a::b::Type<f32>::\n+    //~| ERROR demangling-alt(a::b::Type<f32>)\n+    impl Type<f32> {}\n+\n+    #[rustc_symbol_name]\n+    //~^ ERROR symbol-name(_ZN1a1b15Type$LT$f64$GT$\n+    //~| ERROR demangling(a::b::Type<f64>::\n+    //~| ERROR demangling-alt(a::b::Type<f64>)\n+    impl Type<f64> {}\n+\n+    #[rustc_symbol_name]\n+    //~^ ERROR symbol-name(_ZN1a1b15Type$LT$str$GT$\n+    //~| ERROR demangling(a::b::Type<str>::\n+    //~| ERROR demangling-alt(a::b::Type<str>)\n+    impl Type<str> {}\n+\n+    #[rustc_symbol_name]\n+    //~^ ERROR symbol-name(_ZN1a1b17Type$LT$$u21$$GT$\n+    //~| ERROR demangling(a::b::Type<!>::\n+    //~| ERROR demangling-alt(a::b::Type<!>)\n+    impl Type<!> {}\n+\n+    #[rustc_symbol_name]\n+    //~^ ERROR symbol-name(_ZN1a1b20Type$LT$$LP$$RP$$GT\n+    //~| ERROR demangling(a::b::Type<()>::\n+    //~| ERROR demangling-alt(a::b::Type<()>)\n+    impl Type<()> {}\n+\n+    #[rustc_symbol_name]\n+    //~^ ERROR symbol-name(_ZN1a1b25Type$LT$$LP$u8$C$$RP$$GT$\n+    //~| ERROR demangling(a::b::Type<(u8,)>::\n+    //~| ERROR demangling-alt(a::b::Type<(u8,)>)\n+    impl Type<(u8,)> {}\n+\n+    #[rustc_symbol_name]\n+    //~^ ERROR symbol-name(_ZN1a1b28Type$LT$$LP$u8$C$u16$RP$$GT$\n+    //~| ERROR demangling(a::b::Type<(u8,u16)>::\n+    //~| ERROR demangling-alt(a::b::Type<(u8,u16)>)\n+    impl Type<(u8,u16)> {}\n+\n+    #[rustc_symbol_name]\n+    //~^ ERROR symbol-name(_ZN1a1b34Type$LT$$LP$u8$C$u16$C$u32$RP$$GT$\n+    //~| ERROR demangling(a::b::Type<(u8,u16,u32)>::\n+    //~| ERROR demangling-alt(a::b::Type<(u8,u16,u32)>)\n+    impl Type<(u8,u16,u32)> {}\n+\n+    #[rustc_symbol_name]\n+    //~^ ERROR symbol-name(_ZN1a1b28Type$LT$$BP$const$u20$u8$GT$\n+    //~| ERROR demangling(a::b::Type<*const u8>::\n+    //~| ERROR demangling-alt(a::b::Type<*const u8>)\n+    impl Type<*const u8> {}\n+\n+    #[rustc_symbol_name]\n+    //~^ ERROR symbol-name(_ZN1a1b26Type$LT$$BP$mut$u20$u8$GT$\n+    //~| ERROR demangling(a::b::Type<*mut u8>::\n+    //~| ERROR demangling-alt(a::b::Type<*mut u8>)\n+    impl Type<*mut u8> {}\n+\n+    #[rustc_symbol_name]\n+    //~^ ERROR symbol-name(_ZN1a1b19Type$LT$$RF$str$GT$\n+    //~| ERROR demangling(a::b::Type<&str>::\n+    //~| ERROR demangling-alt(a::b::Type<&str>)\n+    impl Type<&str> {}\n+\n+    #[rustc_symbol_name]\n+    //~^ ERROR symbol-name(_ZN1a1b27Type$LT$$RF$mut$u20$str$GT$\n+    //~| ERROR demangling(a::b::Type<&mut str>::\n+    //~| ERROR demangling-alt(a::b::Type<&mut str>)\n+    impl Type<&mut str> {}\n+\n+    #[rustc_symbol_name]\n+    //~^ ERROR symbol-name(_ZN1a1b35Type$LT$$u5b$u8$u3b$$u20$0$u5d$$GT$\n+    //~| ERROR demangling(a::b::Type<[u8; 0]>::\n+    //~| ERROR demangling-alt(a::b::Type<[u8; 0]>)\n+    impl Type<[u8; 0]> {}\n+\n+    #[rustc_symbol_name]\n+    //~^ ERROR symbol-name(_ZN1a1b22Type$LT$fn$LP$$RP$$GT$\n+    //~| ERROR demangling(a::b::Type<fn()>::\n+    //~| ERROR demangling-alt(a::b::Type<fn()>)\n+    impl Type<fn()> {}\n+\n+    #[rustc_symbol_name]\n+    //~^ ERROR symbol-name(_ZN1a1b60Type$LT$unsafe$u20$extern$u20$$u22$C$u22$$u20$fn$LP$$RP$$GT$\n+    //~| ERROR demangling(a::b::Type<unsafe extern \"C\" fn()>::\n+    //~| ERROR demangling-alt(a::b::Type<unsafe extern \"C\" fn()>)\n+    impl Type<unsafe extern \"C\" fn()> {}\n+\n+    #[rustc_symbol_name]\n+    //~^ ERROR symbol-name(_ZN1a1b34Type$LT$$u5b$T$u3b$$u20$N$u5d$$GT$\n+    //~| ERROR demangling(a::b::Type<[T; N]>::\n+    //~| ERROR demangling-alt(a::b::Type<[T; N]>)\n+    impl<const N: usize, T> Type<[T; N]> {}\n+}\n+\n+fn main() {}"}, {"sha": "a4984d5629f7d4f734cc46ffceb64234370f636a", "filename": "src/test/ui/symbol-names/types.verbose-legacy.stderr", "status": "added", "additions": 470, "deletions": 0, "changes": 470, "blob_url": "https://github.com/rust-lang/rust/blob/f0c4da49983aa699f715caf681e3154b445fb60b/src%2Ftest%2Fui%2Fsymbol-names%2Ftypes.verbose-legacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0c4da49983aa699f715caf681e3154b445fb60b/src%2Ftest%2Fui%2Fsymbol-names%2Ftypes.verbose-legacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Ftypes.verbose-legacy.stderr?ref=f0c4da49983aa699f715caf681e3154b445fb60b", "patch": "@@ -0,0 +1,470 @@\n+error: symbol-name(_ZN1a1b16Type$LT$bool$GT$17h[HASH]E)\n+  --> $DIR/types.rs:13:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(a::b::Type<bool>::h[HASH])\n+  --> $DIR/types.rs:13:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(a::b::Type<bool>)\n+  --> $DIR/types.rs:13:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_ZN1a1b16Type$LT$char$GT$17h[HASH]E)\n+  --> $DIR/types.rs:19:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(a::b::Type<char>::h[HASH])\n+  --> $DIR/types.rs:19:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(a::b::Type<char>)\n+  --> $DIR/types.rs:19:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_ZN1a1b14Type$LT$i8$GT$17h[HASH]E)\n+  --> $DIR/types.rs:25:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(a::b::Type<i8>::h[HASH])\n+  --> $DIR/types.rs:25:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(a::b::Type<i8>)\n+  --> $DIR/types.rs:25:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_ZN1a1b15Type$LT$i16$GT$17h[HASH]E)\n+  --> $DIR/types.rs:31:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(a::b::Type<i16>::h[HASH])\n+  --> $DIR/types.rs:31:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(a::b::Type<i16>)\n+  --> $DIR/types.rs:31:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_ZN1a1b15Type$LT$i32$GT$17h[HASH]E)\n+  --> $DIR/types.rs:37:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(a::b::Type<i32>::h[HASH])\n+  --> $DIR/types.rs:37:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(a::b::Type<i32>)\n+  --> $DIR/types.rs:37:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_ZN1a1b15Type$LT$i64$GT$17h[HASH]E)\n+  --> $DIR/types.rs:43:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(a::b::Type<i64>::h[HASH])\n+  --> $DIR/types.rs:43:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(a::b::Type<i64>)\n+  --> $DIR/types.rs:43:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_ZN1a1b14Type$LT$u8$GT$17h[HASH]E)\n+  --> $DIR/types.rs:49:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(a::b::Type<u8>::h[HASH])\n+  --> $DIR/types.rs:49:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(a::b::Type<u8>)\n+  --> $DIR/types.rs:49:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_ZN1a1b15Type$LT$u16$GT$17h[HASH]E)\n+  --> $DIR/types.rs:55:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(a::b::Type<u16>::h[HASH])\n+  --> $DIR/types.rs:55:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(a::b::Type<u16>)\n+  --> $DIR/types.rs:55:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_ZN1a1b15Type$LT$u32$GT$17h[HASH]E)\n+  --> $DIR/types.rs:61:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(a::b::Type<u32>::h[HASH])\n+  --> $DIR/types.rs:61:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(a::b::Type<u32>)\n+  --> $DIR/types.rs:61:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_ZN1a1b15Type$LT$u64$GT$17h[HASH]E)\n+  --> $DIR/types.rs:67:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(a::b::Type<u64>::h[HASH])\n+  --> $DIR/types.rs:67:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(a::b::Type<u64>)\n+  --> $DIR/types.rs:67:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_ZN1a1b15Type$LT$f32$GT$17h[HASH]E)\n+  --> $DIR/types.rs:73:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(a::b::Type<f32>::h[HASH])\n+  --> $DIR/types.rs:73:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(a::b::Type<f32>)\n+  --> $DIR/types.rs:73:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_ZN1a1b15Type$LT$f64$GT$17h[HASH]E)\n+  --> $DIR/types.rs:79:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(a::b::Type<f64>::h[HASH])\n+  --> $DIR/types.rs:79:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(a::b::Type<f64>)\n+  --> $DIR/types.rs:79:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_ZN1a1b15Type$LT$str$GT$17h[HASH]E)\n+  --> $DIR/types.rs:85:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(a::b::Type<str>::h[HASH])\n+  --> $DIR/types.rs:85:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(a::b::Type<str>)\n+  --> $DIR/types.rs:85:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_ZN1a1b17Type$LT$$u21$$GT$17h[HASH]E)\n+  --> $DIR/types.rs:91:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(a::b::Type<!>::h[HASH])\n+  --> $DIR/types.rs:91:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(a::b::Type<!>)\n+  --> $DIR/types.rs:91:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_ZN1a1b20Type$LT$$LP$$RP$$GT$17h[HASH]E)\n+  --> $DIR/types.rs:97:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(a::b::Type<()>::h[HASH])\n+  --> $DIR/types.rs:97:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(a::b::Type<()>)\n+  --> $DIR/types.rs:97:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_ZN1a1b25Type$LT$$LP$u8$C$$RP$$GT$17h[HASH]E)\n+  --> $DIR/types.rs:103:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(a::b::Type<(u8,)>::h[HASH])\n+  --> $DIR/types.rs:103:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(a::b::Type<(u8,)>)\n+  --> $DIR/types.rs:103:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_ZN1a1b28Type$LT$$LP$u8$C$u16$RP$$GT$17h[HASH]E)\n+  --> $DIR/types.rs:109:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(a::b::Type<(u8,u16)>::h[HASH])\n+  --> $DIR/types.rs:109:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(a::b::Type<(u8,u16)>)\n+  --> $DIR/types.rs:109:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_ZN1a1b34Type$LT$$LP$u8$C$u16$C$u32$RP$$GT$17h[HASH]E)\n+  --> $DIR/types.rs:115:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(a::b::Type<(u8,u16,u32)>::h[HASH])\n+  --> $DIR/types.rs:115:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(a::b::Type<(u8,u16,u32)>)\n+  --> $DIR/types.rs:115:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_ZN1a1b28Type$LT$$BP$const$u20$u8$GT$17h[HASH]E)\n+  --> $DIR/types.rs:121:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(a::b::Type<*const u8>::h[HASH])\n+  --> $DIR/types.rs:121:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(a::b::Type<*const u8>)\n+  --> $DIR/types.rs:121:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_ZN1a1b26Type$LT$$BP$mut$u20$u8$GT$17h[HASH]E)\n+  --> $DIR/types.rs:127:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(a::b::Type<*mut u8>::h[HASH])\n+  --> $DIR/types.rs:127:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(a::b::Type<*mut u8>)\n+  --> $DIR/types.rs:127:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_ZN1a1b19Type$LT$$RF$str$GT$17h[HASH]E)\n+  --> $DIR/types.rs:133:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(a::b::Type<&str>::h[HASH])\n+  --> $DIR/types.rs:133:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(a::b::Type<&str>)\n+  --> $DIR/types.rs:133:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_ZN1a1b27Type$LT$$RF$mut$u20$str$GT$17h[HASH]E)\n+  --> $DIR/types.rs:139:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(a::b::Type<&mut str>::h[HASH])\n+  --> $DIR/types.rs:139:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(a::b::Type<&mut str>)\n+  --> $DIR/types.rs:139:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_ZN1a1b35Type$LT$$u5b$u8$u3b$$u20$0$u5d$$GT$17h[HASH]E)\n+  --> $DIR/types.rs:145:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(a::b::Type<[u8; 0]>::h[HASH])\n+  --> $DIR/types.rs:145:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(a::b::Type<[u8; 0]>)\n+  --> $DIR/types.rs:145:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_ZN1a1b22Type$LT$fn$LP$$RP$$GT$17h[HASH]E)\n+  --> $DIR/types.rs:151:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(a::b::Type<fn()>::h[HASH])\n+  --> $DIR/types.rs:151:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(a::b::Type<fn()>)\n+  --> $DIR/types.rs:151:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_ZN1a1b60Type$LT$unsafe$u20$extern$u20$$u22$C$u22$$u20$fn$LP$$RP$$GT$17h[HASH]E)\n+  --> $DIR/types.rs:157:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(a::b::Type<unsafe extern \"C\" fn()>::h[HASH])\n+  --> $DIR/types.rs:157:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(a::b::Type<unsafe extern \"C\" fn()>)\n+  --> $DIR/types.rs:157:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_ZN1a1b34Type$LT$$u5b$T$u3b$$u20$N$u5d$$GT$17h[HASH]E)\n+  --> $DIR/types.rs:163:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling(a::b::Type<[T; N]>::h[HASH])\n+  --> $DIR/types.rs:163:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: demangling-alt(a::b::Type<[T; N]>)\n+  --> $DIR/types.rs:163:5\n+   |\n+LL |     #[rustc_symbol_name]\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 78 previous errors\n+"}, {"sha": "4e72700e38421a12993fe5fa5c33d712652bc6c8", "filename": "src/tools/rust-analyzer", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer?ref=f0c4da49983aa699f715caf681e3154b445fb60b", "patch": "@@ -1 +1 @@\n-Subproject commit d6ed146a1caa41c65a831efbc80d79067c8f5955\n+Subproject commit 4e72700e38421a12993fe5fa5c33d712652bc6c8"}]}