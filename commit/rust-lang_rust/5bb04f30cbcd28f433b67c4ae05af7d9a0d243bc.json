{"sha": "5bb04f30cbcd28f433b67c4ae05af7d9a0d243bc", "node_id": "C_kwDOAAsO6NoAKDViYjA0ZjMwY2JjZDI4ZjQzM2I2N2M0YWUwNWFmN2Q5YTBkMjQzYmM", "commit": {"author": {"name": "Taiki Endo", "email": "te316e89@gmail.com", "date": "2022-08-16T10:52:19Z"}, "committer": {"name": "Taiki Endo", "email": "te316e89@gmail.com", "date": "2022-08-16T10:52:19Z"}, "message": "Support 128-bit atomics on all aarch64 targets", "tree": {"sha": "635dc0d9b59fd7673a958967e913bebef38c358a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/635dc0d9b59fd7673a958967e913bebef38c358a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5bb04f30cbcd28f433b67c4ae05af7d9a0d243bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5bb04f30cbcd28f433b67c4ae05af7d9a0d243bc", "html_url": "https://github.com/rust-lang/rust/commit/5bb04f30cbcd28f433b67c4ae05af7d9a0d243bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5bb04f30cbcd28f433b67c4ae05af7d9a0d243bc/comments", "author": {"login": "taiki-e", "id": 43724913, "node_id": "MDQ6VXNlcjQzNzI0OTEz", "avatar_url": "https://avatars.githubusercontent.com/u/43724913?v=4", "gravatar_id": "", "url": "https://api.github.com/users/taiki-e", "html_url": "https://github.com/taiki-e", "followers_url": "https://api.github.com/users/taiki-e/followers", "following_url": "https://api.github.com/users/taiki-e/following{/other_user}", "gists_url": "https://api.github.com/users/taiki-e/gists{/gist_id}", "starred_url": "https://api.github.com/users/taiki-e/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/taiki-e/subscriptions", "organizations_url": "https://api.github.com/users/taiki-e/orgs", "repos_url": "https://api.github.com/users/taiki-e/repos", "events_url": "https://api.github.com/users/taiki-e/events{/privacy}", "received_events_url": "https://api.github.com/users/taiki-e/received_events", "type": "User", "site_admin": false}, "committer": {"login": "taiki-e", "id": 43724913, "node_id": "MDQ6VXNlcjQzNzI0OTEz", "avatar_url": "https://avatars.githubusercontent.com/u/43724913?v=4", "gravatar_id": "", "url": "https://api.github.com/users/taiki-e", "html_url": "https://github.com/taiki-e", "followers_url": "https://api.github.com/users/taiki-e/followers", "following_url": "https://api.github.com/users/taiki-e/following{/other_user}", "gists_url": "https://api.github.com/users/taiki-e/gists{/gist_id}", "starred_url": "https://api.github.com/users/taiki-e/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/taiki-e/subscriptions", "organizations_url": "https://api.github.com/users/taiki-e/orgs", "repos_url": "https://api.github.com/users/taiki-e/repos", "events_url": "https://api.github.com/users/taiki-e/events{/privacy}", "received_events_url": "https://api.github.com/users/taiki-e/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8556e6620e4866526b3cea767ad8c20ae877a569", "url": "https://api.github.com/repos/rust-lang/rust/commits/8556e6620e4866526b3cea767ad8c20ae877a569", "html_url": "https://github.com/rust-lang/rust/commit/8556e6620e4866526b3cea767ad8c20ae877a569"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "98d3e79c8e97e4fd3d17bfaa1986133f54b3288b", "filename": "compiler/rustc_target/src/spec/aarch64_pc_windows_gnullvm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bb04f30cbcd28f433b67c4ae05af7d9a0d243bc/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_pc_windows_gnullvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bb04f30cbcd28f433b67c4ae05af7d9a0d243bc/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_pc_windows_gnullvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_pc_windows_gnullvm.rs?ref=5bb04f30cbcd28f433b67c4ae05af7d9a0d243bc", "patch": "@@ -2,7 +2,7 @@ use crate::spec::Target;\n \n pub fn target() -> Target {\n     let mut base = super::windows_gnullvm_base::opts();\n-    base.max_atomic_width = Some(64);\n+    base.max_atomic_width = Some(128);\n     base.features = \"+neon,+fp-armv8\".into();\n     base.linker = Some(\"aarch64-w64-mingw32-clang\".into());\n "}, {"sha": "7c4544b3f33c010671fbecd3d3da766c4834d77e", "filename": "compiler/rustc_target/src/spec/aarch64_pc_windows_msvc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bb04f30cbcd28f433b67c4ae05af7d9a0d243bc/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_pc_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bb04f30cbcd28f433b67c4ae05af7d9a0d243bc/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_pc_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_pc_windows_msvc.rs?ref=5bb04f30cbcd28f433b67c4ae05af7d9a0d243bc", "patch": "@@ -2,7 +2,7 @@ use crate::spec::Target;\n \n pub fn target() -> Target {\n     let mut base = super::windows_msvc_base::opts();\n-    base.max_atomic_width = Some(64);\n+    base.max_atomic_width = Some(128);\n     base.features = \"+neon,+fp-armv8\".into();\n \n     Target {"}, {"sha": "3ef04c676687059dcbfa76cc16c765510b9ad749", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_uefi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bb04f30cbcd28f433b67c4ae05af7d9a0d243bc/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_uefi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bb04f30cbcd28f433b67c4ae05af7d9a0d243bc/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_uefi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_uefi.rs?ref=5bb04f30cbcd28f433b67c4ae05af7d9a0d243bc", "patch": "@@ -7,7 +7,7 @@ use crate::spec::{LinkerFlavor, Target};\n pub fn target() -> Target {\n     let mut base = uefi_msvc_base::opts();\n \n-    base.max_atomic_width = Some(64);\n+    base.max_atomic_width = Some(128);\n     base.add_pre_link_args(LinkerFlavor::Msvc, &[\"/machine:arm64\"]);\n \n     Target {"}, {"sha": "db4dbf817b88bc8c17cd96442991db3401a42389", "filename": "compiler/rustc_target/src/spec/aarch64_uwp_windows_msvc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bb04f30cbcd28f433b67c4ae05af7d9a0d243bc/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_uwp_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bb04f30cbcd28f433b67c4ae05af7d9a0d243bc/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_uwp_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_uwp_windows_msvc.rs?ref=5bb04f30cbcd28f433b67c4ae05af7d9a0d243bc", "patch": "@@ -2,7 +2,7 @@ use crate::spec::Target;\n \n pub fn target() -> Target {\n     let mut base = super::windows_uwp_msvc_base::opts();\n-    base.max_atomic_width = Some(64);\n+    base.max_atomic_width = Some(128);\n \n     Target {\n         llvm_target: \"aarch64-pc-windows-msvc\".into(),"}, {"sha": "cb7f5f2a5830bf8b274cc6e8fd2a08816b2f73a0", "filename": "compiler/rustc_target/src/spec/arm64_32_apple_watchos.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bb04f30cbcd28f433b67c4ae05af7d9a0d243bc/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm64_32_apple_watchos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bb04f30cbcd28f433b67c4ae05af7d9a0d243bc/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm64_32_apple_watchos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm64_32_apple_watchos.rs?ref=5bb04f30cbcd28f433b67c4ae05af7d9a0d243bc", "patch": "@@ -10,7 +10,7 @@ pub fn target() -> Target {\n         arch: \"aarch64\".into(),\n         options: TargetOptions {\n             features: \"+neon,+fp-armv8,+apple-a7\".into(),\n-            max_atomic_width: Some(64),\n+            max_atomic_width: Some(128),\n             forces_embed_bitcode: true,\n             // These arguments are not actually invoked - they just have\n             // to look right to pass App Store validation."}]}