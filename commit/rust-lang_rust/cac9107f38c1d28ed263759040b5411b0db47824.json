{"sha": "cac9107f38c1d28ed263759040b5411b0db47824", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhYzkxMDdmMzhjMWQyOGVkMjYzNzU5MDQwYjU0MTFiMGRiNDc4MjQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-02-17T06:40:08Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-02-19T09:10:32Z"}, "message": "rustdoc: Clickable links on methods themselves\n\nUseful for getting the link to a method or function.\n\nCloses #10332", "tree": {"sha": "12834edac6c100f426f0f0147a340862e8cb43d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12834edac6c100f426f0f0147a340862e8cb43d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cac9107f38c1d28ed263759040b5411b0db47824", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cac9107f38c1d28ed263759040b5411b0db47824", "html_url": "https://github.com/rust-lang/rust/commit/cac9107f38c1d28ed263759040b5411b0db47824", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cac9107f38c1d28ed263759040b5411b0db47824/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68d576fd345b197e5be08cc9b84201e5897dc729", "url": "https://api.github.com/repos/rust-lang/rust/commits/68d576fd345b197e5be08cc9b84201e5897dc729", "html_url": "https://github.com/rust-lang/rust/commit/68d576fd345b197e5be08cc9b84201e5897dc729"}], "stats": {"total": 29, "additions": 12, "deletions": 17}, "files": [{"sha": "93feef58307d74a7bf6e2f0526a0acfa63f9520d", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 12, "deletions": 17, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/cac9107f38c1d28ed263759040b5411b0db47824/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cac9107f38c1d28ed263759040b5411b0db47824/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=cac9107f38c1d28ed263759040b5411b0db47824", "patch": "@@ -1111,15 +1111,15 @@ fn item_trait(w: &mut Writer, it: &clean::Item,\n         if_ok!(write!(w, \"\\\\{\\n\"));\n         for m in required.iter() {\n             if_ok!(write!(w, \"    \"));\n-            if_ok!(render_method(w, m.item(), true));\n+            if_ok!(render_method(w, m.item()));\n             if_ok!(write!(w, \";\\n\"));\n         }\n         if required.len() > 0 && provided.len() > 0 {\n             if_ok!(w.write(\"\\n\".as_bytes()));\n         }\n         for m in provided.iter() {\n             if_ok!(write!(w, \"    \"));\n-            if_ok!(render_method(w, m.item(), true));\n+            if_ok!(render_method(w, m.item()));\n             if_ok!(write!(w, \" \\\\{ ... \\\\}\\n\"));\n         }\n         if_ok!(write!(w, \"\\\\}\"));\n@@ -1133,7 +1133,7 @@ fn item_trait(w: &mut Writer, it: &clean::Item,\n         if_ok!(write!(w, \"<h3 id='{}.{}' class='method'><code>\",\n                       shortty(m.item()),\n                       *m.item().name.get_ref()));\n-        if_ok!(render_method(w, m.item(), false));\n+        if_ok!(render_method(w, m.item()));\n         if_ok!(write!(w, \"</code></h3>\"));\n         if_ok!(document(w, m.item()));\n         Ok(())\n@@ -1188,32 +1188,27 @@ fn item_trait(w: &mut Writer, it: &clean::Item,\n     })\n }\n \n-fn render_method(w: &mut Writer, meth: &clean::Item,\n-                 withlink: bool) -> fmt::Result {\n+fn render_method(w: &mut Writer, meth: &clean::Item) -> fmt::Result {\n     fn fun(w: &mut Writer, it: &clean::Item, purity: ast::Purity,\n-           g: &clean::Generics, selfty: &clean::SelfTy, d: &clean::FnDecl,\n-           withlink: bool) -> fmt::Result {\n-        write!(w, \"{}fn {withlink, select,\n-                            true{<a href='\\\\#{ty}.{name}'\n-                                    class='fnname'>{name}</a>}\n-                            other{<span class='fnname'>{name}</span>}\n-                        }{generics}{decl}\",\n+           g: &clean::Generics, selfty: &clean::SelfTy,\n+           d: &clean::FnDecl) -> fmt::Result {\n+        write!(w, \"{}fn <a href='\\\\#{ty}.{name}' class='fnname'>{name}</a>\\\n+                   {generics}{decl}\",\n                match purity {\n                    ast::UnsafeFn => \"unsafe \",\n                    _ => \"\",\n                },\n                ty = shortty(it),\n                name = it.name.get_ref().as_slice(),\n                generics = *g,\n-               decl = Method(selfty, d),\n-               withlink = if withlink {\"true\"} else {\"false\"})\n+               decl = Method(selfty, d))\n     }\n     match meth.inner {\n         clean::TyMethodItem(ref m) => {\n-            fun(w, meth, m.purity, &m.generics, &m.self_, &m.decl, withlink)\n+            fun(w, meth, m.purity, &m.generics, &m.self_, &m.decl)\n         }\n         clean::MethodItem(ref m) => {\n-            fun(w, meth, m.purity, &m.generics, &m.self_, &m.decl, withlink)\n+            fun(w, meth, m.purity, &m.generics, &m.self_, &m.decl)\n         }\n         _ => unreachable!()\n     }\n@@ -1444,7 +1439,7 @@ fn render_impl(w: &mut Writer, i: &clean::Impl,\n     fn docmeth(w: &mut Writer, item: &clean::Item) -> io::IoResult<bool> {\n         if_ok!(write!(w, \"<h4 id='method.{}' class='method'><code>\",\n                       *item.name.get_ref()));\n-        if_ok!(render_method(w, item, false));\n+        if_ok!(render_method(w, item));\n         if_ok!(write!(w, \"</code></h4>\\n\"));\n         match item.doc_value() {\n             Some(s) => {"}]}