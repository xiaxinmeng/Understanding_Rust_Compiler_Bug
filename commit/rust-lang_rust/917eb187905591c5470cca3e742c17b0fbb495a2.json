{"sha": "917eb187905591c5470cca3e742c17b0fbb495a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxN2ViMTg3OTA1NTkxYzU0NzBjY2EzZTc0MmMxN2IwZmJiNDk1YTI=", "commit": {"author": {"name": "Markus Westerlind", "email": "markus.westerlind@imperva.com", "date": "2020-01-08T09:35:51Z"}, "committer": {"name": "Markus Westerlind", "email": "markus.westerlind@distilnetworks.com", "date": "2020-01-17T12:43:41Z"}, "message": "perf: Only search the potentially changed constraints in lexical_region_resolve", "tree": {"sha": "143d3b925be510330e2a1950e84fdd78e18f059c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/143d3b925be510330e2a1950e84fdd78e18f059c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/917eb187905591c5470cca3e742c17b0fbb495a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/917eb187905591c5470cca3e742c17b0fbb495a2", "html_url": "https://github.com/rust-lang/rust/commit/917eb187905591c5470cca3e742c17b0fbb495a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/917eb187905591c5470cca3e742c17b0fbb495a2/comments", "author": {"login": "Marwes", "id": 957312, "node_id": "MDQ6VXNlcjk1NzMxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/957312?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Marwes", "html_url": "https://github.com/Marwes", "followers_url": "https://api.github.com/users/Marwes/followers", "following_url": "https://api.github.com/users/Marwes/following{/other_user}", "gists_url": "https://api.github.com/users/Marwes/gists{/gist_id}", "starred_url": "https://api.github.com/users/Marwes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Marwes/subscriptions", "organizations_url": "https://api.github.com/users/Marwes/orgs", "repos_url": "https://api.github.com/users/Marwes/repos", "events_url": "https://api.github.com/users/Marwes/events{/privacy}", "received_events_url": "https://api.github.com/users/Marwes/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "343eee6082a90016b315b82b048e5a6774472afe", "url": "https://api.github.com/repos/rust-lang/rust/commits/343eee6082a90016b315b82b048e5a6774472afe", "html_url": "https://github.com/rust-lang/rust/commit/343eee6082a90016b315b82b048e5a6774472afe"}], "stats": {"total": 79, "additions": 29, "deletions": 50}, "files": [{"sha": "18c25ef0dd9e1365b555f3259d64bf04a0a8195b", "filename": "src/librustc/infer/lexical_region_resolve/mod.rs", "status": "modified", "additions": 29, "deletions": 50, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/917eb187905591c5470cca3e742c17b0fbb495a2/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/917eb187905591c5470cca3e742c17b0fbb495a2/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs?ref=917eb187905591c5470cca3e742c17b0fbb495a2", "patch": "@@ -19,7 +19,6 @@ use rustc_data_structures::graph::implementation::{\n     Direction, Graph, NodeIndex, INCOMING, OUTGOING,\n };\n use rustc_hir::def_id::DefId;\n-use rustc_index::bit_set::BitSet;\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_span::Span;\n use std::fmt;\n@@ -295,23 +294,19 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n     }\n \n     fn expansion(&self, var_values: &mut LexicalRegionResolutions<'tcx>) {\n-        let mut changed = false;\n-        let mut constraints = Vec::new();\n+        let mut constraints = IndexVec::from_elem_n(Vec::new(), var_values.values.len());\n+        let mut changes = Vec::new();\n         for constraint in self.data.constraints.keys() {\n-            let (a_region, b_vid, b_data) = match *constraint {\n+            let (a_vid, a_region, b_vid, b_data) = match *constraint {\n                 Constraint::RegSubVar(a_region, b_vid) => {\n                     let b_data = var_values.value_mut(b_vid);\n-                    (a_region, b_vid, b_data)\n+                    (None, a_region, b_vid, b_data)\n                 }\n                 Constraint::VarSubVar(a_vid, b_vid) => match *var_values.value(a_vid) {\n                     VarValue::ErrorValue => continue,\n                     VarValue::Value(a_region) => {\n                         let b_data = var_values.value_mut(b_vid);\n-                        match *b_data {\n-                            VarValue::Value(ReStatic) | VarValue::ErrorValue => (),\n-                            _ => constraints.push((a_vid, b_vid)),\n-                        }\n-                        (a_region, b_vid, b_data)\n+                        (Some(a_vid), a_region, b_vid, b_data)\n                     }\n                 },\n                 Constraint::RegSubReg(..) | Constraint::VarSubReg(..) => {\n@@ -320,54 +315,38 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n                     continue;\n                 }\n             };\n-            let edge_changed = self.expand_node(a_region, b_vid, b_data);\n-            if edge_changed {\n-                changed = true\n+            if self.expand_node(a_region, b_vid, b_data) {\n+                changes.push(b_vid);\n+            }\n+            if let Some(a_vid) = a_vid {\n+                match *b_data {\n+                    VarValue::Value(ReStatic) | VarValue::ErrorValue => (),\n+                    _ => {\n+                        constraints[a_vid].push((a_vid, b_vid));\n+                        constraints[b_vid].push((a_vid, b_vid));\n+                    }\n+                }\n             }\n         }\n \n-        let mut process_constraint = |a_vid, b_vid| {\n-            let (a_region, b_data, retain) = match *var_values.value(a_vid) {\n-                VarValue::ErrorValue => return (false, false),\n-                VarValue::Value(a_region) => {\n-                    let b_data = var_values.value_mut(b_vid);\n-                    let retain = match *b_data {\n-                        VarValue::Value(ReStatic) | VarValue::ErrorValue => false,\n-                        _ => true,\n-                    };\n-                    (a_region, b_data, retain)\n+        while let Some(vid) = changes.pop() {\n+            constraints[vid].retain(|&(a_vid, b_vid)| {\n+                let a_region = match *var_values.value(a_vid) {\n+                    VarValue::ErrorValue => return false,\n+                    VarValue::Value(a_region) => a_region,\n+                };\n+                let b_data = var_values.value_mut(b_vid);\n+                if self.expand_node(a_region, b_vid, b_data) {\n+                    changes.push(b_vid);\n                 }\n-            };\n-            let changed = self.expand_node(a_region, b_vid, b_data);\n-            (changed, retain)\n-        };\n-\n-        // Using bitsets to track the remaining elements is faster than using a\n-        // `Vec` by itself (which requires removing elements, which requires\n-        // element shuffling, which is slow).\n-        let mut live_indices: BitSet<usize> = BitSet::new_filled(constraints.len());\n-        let mut killed_indices: BitSet<usize> = BitSet::new_empty(constraints.len());\n-        while changed {\n-            changed = false;\n-            for index in live_indices.iter() {\n-                let (a_vid, b_vid) = constraints[index];\n-                let (edge_changed, retain) = process_constraint(a_vid, b_vid);\n-                changed |= edge_changed;\n-                if !retain {\n-                    let changed = killed_indices.insert(index);\n-                    debug_assert!(changed);\n+                match *b_data {\n+                    VarValue::Value(ReStatic) | VarValue::ErrorValue => false,\n+                    _ => true,\n                 }\n-            }\n-            live_indices.subtract(&killed_indices);\n-\n-            // We could clear `killed_indices` here, but we don't need to and\n-            // it's cheaper not to.\n+            });\n         }\n     }\n \n-    // This function is very hot in some workloads. There's a single callsite\n-    // so always inlining is ok even though it's large.\n-    #[inline(always)]\n     fn expand_node(\n         &self,\n         a_region: Region<'tcx>,"}]}