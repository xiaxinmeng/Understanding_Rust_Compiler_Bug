{"sha": "add766493a580f2c5411d24540bf17032cafa06a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkZDc2NjQ5M2E1ODBmMmM1NDExZDI0NTQwYmYxNzAzMmNhZmEwNmE=", "commit": {"author": {"name": "Andy Russell", "email": "arussell123@gmail.com", "date": "2019-11-03T04:41:22Z"}, "committer": {"name": "Andy Russell", "email": "arussell123@gmail.com", "date": "2019-11-12T13:50:22Z"}, "message": "don't warn on CRLF in `with_newline` lints", "tree": {"sha": "86bcb4d1bb5718d362620c7a71a3b0adc472e784", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86bcb4d1bb5718d362620c7a71a3b0adc472e784"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/add766493a580f2c5411d24540bf17032cafa06a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQFKBAABCAA0FiEELriChyEaiMu0yCg7viIhAz7bw3QFAl3KuKoWHGFydXNzZWxs\nMTIzQGdtYWlsLmNvbQAKCRC+IiEDPtvDdDlfB/93QbD+4FGCYiEdGWMAidbIh0aV\nyISMTvRHrse1sFrYZv20uc94bX/tNe1T4adHubApIzycM/358RxZHvwgqvxdsZEA\notJZo+FJReohbWCCbfk7sISUa/aAT9vNpIB/Y+kv2HjTw0p/1/YHTVwQpb+hriLA\n+gso0IQXJO/UINSIvV6biS3bcBOBpKJbcGUf1vFrSsXYna0rzfR1gmHbEz5Ft+Kg\nvUq1i0Z25Zfa1fdV2+QySqWhbOPFdeOwdoeVhyvoeOeyfIDTi32VfJQjx6eaa5L0\nYWJ4Erh3mHCPzcqcov8HoK/1Q/Xa72q+iykl3dtKJx5+/cztCtTKQLSHqBv8\n=jvN3\n-----END PGP SIGNATURE-----", "payload": "tree 86bcb4d1bb5718d362620c7a71a3b0adc472e784\nparent 2646b108d5900786f1efb6a56d18ca9b951bd015\nauthor Andy Russell <arussell123@gmail.com> 1572756082 -0400\ncommitter Andy Russell <arussell123@gmail.com> 1573566622 -0500\n\ndon't warn on CRLF in `with_newline` lints\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/add766493a580f2c5411d24540bf17032cafa06a", "html_url": "https://github.com/rust-lang/rust/commit/add766493a580f2c5411d24540bf17032cafa06a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/add766493a580f2c5411d24540bf17032cafa06a/comments", "author": {"login": "euclio", "id": 1372438, "node_id": "MDQ6VXNlcjEzNzI0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1372438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/euclio", "html_url": "https://github.com/euclio", "followers_url": "https://api.github.com/users/euclio/followers", "following_url": "https://api.github.com/users/euclio/following{/other_user}", "gists_url": "https://api.github.com/users/euclio/gists{/gist_id}", "starred_url": "https://api.github.com/users/euclio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/euclio/subscriptions", "organizations_url": "https://api.github.com/users/euclio/orgs", "repos_url": "https://api.github.com/users/euclio/repos", "events_url": "https://api.github.com/users/euclio/events{/privacy}", "received_events_url": "https://api.github.com/users/euclio/received_events", "type": "User", "site_admin": false}, "committer": {"login": "euclio", "id": 1372438, "node_id": "MDQ6VXNlcjEzNzI0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1372438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/euclio", "html_url": "https://github.com/euclio", "followers_url": "https://api.github.com/users/euclio/followers", "following_url": "https://api.github.com/users/euclio/following{/other_user}", "gists_url": "https://api.github.com/users/euclio/gists{/gist_id}", "starred_url": "https://api.github.com/users/euclio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/euclio/subscriptions", "organizations_url": "https://api.github.com/users/euclio/orgs", "repos_url": "https://api.github.com/users/euclio/repos", "events_url": "https://api.github.com/users/euclio/events{/privacy}", "received_events_url": "https://api.github.com/users/euclio/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2646b108d5900786f1efb6a56d18ca9b951bd015", "url": "https://api.github.com/repos/rust-lang/rust/commits/2646b108d5900786f1efb6a56d18ca9b951bd015", "html_url": "https://github.com/rust-lang/rust/commit/2646b108d5900786f1efb6a56d18ca9b951bd015"}], "stats": {"total": 116, "additions": 85, "deletions": 31}, "files": [{"sha": "c22693aee3b50fbdc1eae7dd06bdc38d0caad526", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/add766493a580f2c5411d24540bf17032cafa06a/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/add766493a580f2c5411d24540bf17032cafa06a/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=add766493a580f2c5411d24540bf17032cafa06a", "patch": "@@ -29,6 +29,8 @@ extern crate rustc_errors;\n #[allow(unused_extern_crates)]\n extern crate rustc_index;\n #[allow(unused_extern_crates)]\n+extern crate rustc_lexer;\n+#[allow(unused_extern_crates)]\n extern crate rustc_mir;\n #[allow(unused_extern_crates)]\n extern crate rustc_parse;"}, {"sha": "b8773b47a99d58d37050830d3ce7fa43bc224181", "filename": "clippy_lints/src/write.rs", "status": "modified", "additions": 25, "deletions": 29, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/add766493a580f2c5411d24540bf17032cafa06a/clippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/add766493a580f2c5411d24540bf17032cafa06a/clippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwrite.rs?ref=add766493a580f2c5411d24540bf17032cafa06a", "patch": "@@ -1,9 +1,12 @@\n+use std::borrow::Cow;\n+use std::ops::Range;\n+\n use crate::utils::{snippet_with_applicability, span_lint, span_lint_and_sugg, span_lint_and_then};\n use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n use rustc::{declare_lint_pass, declare_tool_lint};\n use rustc_errors::Applicability;\n+use rustc_lexer::unescape::{self, EscapeError};\n use rustc_parse::parser;\n-use std::borrow::Cow;\n use syntax::ast::*;\n use syntax::token;\n use syntax::tokenstream::TokenStream;\n@@ -202,7 +205,7 @@ impl EarlyLintPass for Write {\n         } else if mac.path == sym!(print) {\n             span_lint(cx, PRINT_STDOUT, mac.span, \"use of `print!`\");\n             if let (Some(fmt_str), _) = check_tts(cx, &mac.tts, false) {\n-                if check_newlines(&fmt_str) {\n+                if check_newlines(&fmt_str.contents, fmt_str.style) {\n                     span_lint_and_then(\n                         cx,\n                         PRINT_WITH_NEWLINE,\n@@ -223,7 +226,7 @@ impl EarlyLintPass for Write {\n             }\n         } else if mac.path == sym!(write) {\n             if let (Some(fmt_str), _) = check_tts(cx, &mac.tts, true) {\n-                if check_newlines(&fmt_str) {\n+                if check_newlines(&fmt_str.contents, fmt_str.style) {\n                     span_lint_and_then(\n                         cx,\n                         WRITE_WITH_NEWLINE,\n@@ -442,38 +445,31 @@ fn check_tts<'a>(cx: &EarlyContext<'a>, tts: &TokenStream, is_write: bool) -> (O\n     }\n }\n \n-/// Checks if the format string constains a single newline that terminates it.\n+/// Checks if the format string contains a single newline that terminates it.\n ///\n /// Literal and escaped newlines are both checked (only literal for raw strings).\n-fn check_newlines(fmt_str: &FmtStr) -> bool {\n-    let s = &fmt_str.contents;\n+fn check_newlines(contents: &str, style: StrStyle) -> bool {\n+    let mut has_internal_newline = false;\n+    let mut last_was_cr = false;\n+    let mut should_lint = false;\n \n-    if s.ends_with('\\n') {\n-        return true;\n-    } else if let StrStyle::Raw(_) = fmt_str.style {\n-        return false;\n-    }\n-\n-    if s.len() < 2 {\n-        return false;\n-    }\n+    let mut cb = |r: Range<usize>, c: Result<char, EscapeError>| {\n+        let c = c.unwrap();\n \n-    let bytes = s.as_bytes();\n-    if bytes[bytes.len() - 2] != b'\\\\' || bytes[bytes.len() - 1] != b'n' {\n-        return false;\n-    }\n-\n-    let mut escaping = false;\n-    for (index, &byte) in bytes.iter().enumerate() {\n-        if escaping {\n-            if byte == b'n' {\n-                return index == bytes.len() - 1;\n+        if r.end == contents.len() && c == '\\n' && !last_was_cr && !has_internal_newline {\n+            should_lint = true;\n+        } else {\n+            last_was_cr = c == '\\r';\n+            if c == '\\n' {\n+                has_internal_newline = true;\n             }\n-            escaping = false;\n-        } else if byte == b'\\\\' {\n-            escaping = true;\n         }\n+    };\n+\n+    match style {\n+        StrStyle::Cooked => unescape::unescape_str(contents, &mut cb),\n+        StrStyle::Raw(_) => unescape::unescape_raw_str(contents, &mut cb),\n     }\n \n-    false\n+    should_lint\n }"}, {"sha": "3f710540e9038f1347da79b04555773d239219bd", "filename": "tests/ui/print_with_newline.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/add766493a580f2c5411d24540bf17032cafa06a/tests%2Fui%2Fprint_with_newline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/add766493a580f2c5411d24540bf17032cafa06a/tests%2Fui%2Fprint_with_newline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprint_with_newline.rs?ref=add766493a580f2c5411d24540bf17032cafa06a", "patch": "@@ -42,4 +42,10 @@ fn main() {\n         r\"\n \"\n     );\n+\n+    // Don't warn on CRLF (#4208)\n+    print!(\"\\r\\n\");\n+    print!(\"foo\\r\\n\");\n+    print!(\"\\\\r\\n\"); //~ ERROR\n+    print!(\"foo\\rbar\\n\") // ~ ERROR\n }"}, {"sha": "05fe88915d6efc40bcc5921efb894d83e0642820", "filename": "tests/ui/print_with_newline.stderr", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/add766493a580f2c5411d24540bf17032cafa06a/tests%2Fui%2Fprint_with_newline.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/add766493a580f2c5411d24540bf17032cafa06a/tests%2Fui%2Fprint_with_newline.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprint_with_newline.stderr?ref=add766493a580f2c5411d24540bf17032cafa06a", "patch": "@@ -84,5 +84,27 @@ LL |     println!(\n LL |         r\"\"\n    |\n \n-error: aborting due to 7 previous errors\n+error: using `print!()` with a format string that ends in a single newline\n+  --> $DIR/print_with_newline.rs:49:5\n+   |\n+LL |     print!(\"/r/n\"); //~ ERROR\n+   |     ^^^^^^^^^^^^^^^\n+   |\n+help: use `println!` instead\n+   |\n+LL |     println!(\"/r\"); //~ ERROR\n+   |     ^^^^^^^     --\n+\n+error: using `print!()` with a format string that ends in a single newline\n+  --> $DIR/print_with_newline.rs:50:5\n+   |\n+LL |     print!(\"foo/rbar/n\") // ~ ERROR\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: use `println!` instead\n+   |\n+LL |     println!(\"foo/rbar\") // ~ ERROR\n+   |     ^^^^^^^          --\n+\n+error: aborting due to 9 previous errors\n "}, {"sha": "93afd73d1114d257998089f1c683bfa090c06458", "filename": "tests/ui/write_with_newline.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/add766493a580f2c5411d24540bf17032cafa06a/tests%2Fui%2Fwrite_with_newline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/add766493a580f2c5411d24540bf17032cafa06a/tests%2Fui%2Fwrite_with_newline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwrite_with_newline.rs?ref=add766493a580f2c5411d24540bf17032cafa06a", "patch": "@@ -49,4 +49,10 @@ fn main() {\n         r\"\n \"\n     );\n+\n+    // Don't warn on CRLF (#4208)\n+    write!(&mut v, \"\\r\\n\");\n+    write!(&mut v, \"foo\\r\\n\");\n+    write!(&mut v, \"\\\\r\\n\"); //~ ERROR\n+    write!(&mut v, \"foo\\rbar\\n\");\n }"}, {"sha": "2473329ca7276e149eb6702d32ea76c87de995c6", "filename": "tests/ui/write_with_newline.stderr", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/add766493a580f2c5411d24540bf17032cafa06a/tests%2Fui%2Fwrite_with_newline.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/add766493a580f2c5411d24540bf17032cafa06a/tests%2Fui%2Fwrite_with_newline.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwrite_with_newline.stderr?ref=add766493a580f2c5411d24540bf17032cafa06a", "patch": "@@ -88,5 +88,27 @@ LL |         &mut v,\n LL |         r\"\"\n    |\n \n-error: aborting due to 7 previous errors\n+error: using `write!()` with a format string that ends in a single newline\n+  --> $DIR/write_with_newline.rs:56:5\n+   |\n+LL |     write!(&mut v, \"/r/n\"); //~ ERROR\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: use `writeln!()` instead\n+   |\n+LL |     writeln!(&mut v, \"/r\"); //~ ERROR\n+   |     ^^^^^^^             --\n+\n+error: using `write!()` with a format string that ends in a single newline\n+  --> $DIR/write_with_newline.rs:57:5\n+   |\n+LL |     write!(&mut v, \"foo/rbar/n\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: use `writeln!()` instead\n+   |\n+LL |     writeln!(&mut v, \"foo/rbar\");\n+   |     ^^^^^^^                  --\n+\n+error: aborting due to 9 previous errors\n "}]}