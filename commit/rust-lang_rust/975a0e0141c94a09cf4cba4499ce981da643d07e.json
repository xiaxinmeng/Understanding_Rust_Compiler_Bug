{"sha": "975a0e0141c94a09cf4cba4499ce981da643d07e", "node_id": "C_kwDOAAsO6NoAKDk3NWEwZTAxNDFjOTRhMDljZjRjYmE0NDk5Y2U5ODFkYTY0M2QwN2U", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-02-28T19:05:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-28T19:05:15Z"}, "message": "Rollup merge of #94414 - DrMeepster:box_alloc_ice2, r=tmiasko\n\nFix ICE when using Box<T, A> with large A\n\nA sequel to #94043 that fixes #81270 and #92054 (duplicate).", "tree": {"sha": "5d40487dd9e61409c6077c76191bc9d082b71378", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d40487dd9e61409c6077c76191bc9d082b71378"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/975a0e0141c94a09cf4cba4499ce981da643d07e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiHRzsCRBK7hj4Ov3rIwAAvaUIAK2lhsDIynOSrXeluVnc8kih\nLYNnbO2jjyd1I2vgzsVn2On3ptpXdtlTPzdZScMagPGP5qbxkCE71xd+wcXxuehZ\nBJGSuQnqmQOtxR1BQ+iN094KIwePQAyrbgZRNvqh7DYefACO5yy8Yub1Vx4Y8Rc8\n9J3CtIux/xE7IdUl4Ir5XTiqDDiM5xzW4Rtu8Gb71TJi4BIGDRTCLw8FXUOCHbW0\nSVP7utH8uOCgKii9nn3g064UnS2KJdbOdG2jBFSaO9aBDNHp8q367iaThe4/0AN/\nSX9V2meEr0Kwuj+fQ4vQeU6AgJA5ZMlUKU1s3VS8Pgbo/MGLVDh/9T1ZY8qzXg4=\n=nQ3L\n-----END PGP SIGNATURE-----\n", "payload": "tree 5d40487dd9e61409c6077c76191bc9d082b71378\nparent 934079180da6e75ee2398d0342857797df5c7a49\nparent d316aba04c4644093ba07d1ec8d334b599b8eb01\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1646075115 +0100\ncommitter GitHub <noreply@github.com> 1646075115 +0100\n\nRollup merge of #94414 - DrMeepster:box_alloc_ice2, r=tmiasko\n\nFix ICE when using Box<T, A> with large A\n\nA sequel to #94043 that fixes #81270 and #92054 (duplicate).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/975a0e0141c94a09cf4cba4499ce981da643d07e", "html_url": "https://github.com/rust-lang/rust/commit/975a0e0141c94a09cf4cba4499ce981da643d07e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/975a0e0141c94a09cf4cba4499ce981da643d07e/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "934079180da6e75ee2398d0342857797df5c7a49", "url": "https://api.github.com/repos/rust-lang/rust/commits/934079180da6e75ee2398d0342857797df5c7a49", "html_url": "https://github.com/rust-lang/rust/commit/934079180da6e75ee2398d0342857797df5c7a49"}, {"sha": "d316aba04c4644093ba07d1ec8d334b599b8eb01", "url": "https://api.github.com/repos/rust-lang/rust/commits/d316aba04c4644093ba07d1ec8d334b599b8eb01", "html_url": "https://github.com/rust-lang/rust/commit/d316aba04c4644093ba07d1ec8d334b599b8eb01"}], "stats": {"total": 42, "additions": 35, "deletions": 7}, "files": [{"sha": "809d64479084a389bd617c55846d2918f785227d", "filename": "compiler/rustc_codegen_ssa/src/mir/place.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/975a0e0141c94a09cf4cba4499ce981da643d07e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/975a0e0141c94a09cf4cba4499ce981da643d07e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fplace.rs?ref=975a0e0141c94a09cf4cba4499ce981da643d07e", "patch": "@@ -453,7 +453,18 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         };\n         for elem in place_ref.projection[base..].iter() {\n             cg_base = match elem.clone() {\n-                mir::ProjectionElem::Deref => bx.load_operand(cg_base).deref(bx.cx()),\n+                mir::ProjectionElem::Deref => {\n+                    // custom allocators can change box's abi, making it unable to be derefed directly\n+                    if cg_base.layout.ty.is_box()\n+                        && matches!(cg_base.layout.abi, Abi::Aggregate { .. } | Abi::Uninhabited)\n+                    {\n+                        let ptr = cg_base.project_field(bx, 0).project_field(bx, 0);\n+\n+                        bx.load_operand(ptr).deref(bx.cx())\n+                    } else {\n+                        bx.load_operand(cg_base).deref(bx.cx())\n+                    }\n+                }\n                 mir::ProjectionElem::Field(ref field, _) => {\n                     cg_base.project_field(bx, field.index())\n                 }"}, {"sha": "89f75fea15b1d8cf72a21c71befe2323df64dce9", "filename": "src/test/ui/box/issue-78459-ice.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/934079180da6e75ee2398d0342857797df5c7a49/src%2Ftest%2Fui%2Fbox%2Fissue-78459-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/934079180da6e75ee2398d0342857797df5c7a49/src%2Ftest%2Fui%2Fbox%2Fissue-78459-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbox%2Fissue-78459-ice.rs?ref=934079180da6e75ee2398d0342857797df5c7a49", "patch": "@@ -1,6 +0,0 @@\n-// check-pass\n-#![feature(allocator_api)]\n-\n-fn main() {\n-    Box::new_in((), &std::alloc::Global);\n-}"}, {"sha": "3ef1171ff50d9c8328d596031a684b0fdb9a82cd", "filename": "src/test/ui/box/large-allocator-ice.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/975a0e0141c94a09cf4cba4499ce981da643d07e/src%2Ftest%2Fui%2Fbox%2Flarge-allocator-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/975a0e0141c94a09cf4cba4499ce981da643d07e/src%2Ftest%2Fui%2Fbox%2Flarge-allocator-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbox%2Flarge-allocator-ice.rs?ref=975a0e0141c94a09cf4cba4499ce981da643d07e", "patch": "@@ -0,0 +1,23 @@\n+// build-pass\n+#![feature(allocator_api)]\n+\n+use std::alloc::Allocator;\n+\n+struct BigAllocator([usize; 2]);\n+\n+unsafe impl Allocator for BigAllocator {\n+    fn allocate(\n+        &self,\n+        _: std::alloc::Layout,\n+    ) -> Result<std::ptr::NonNull<[u8]>, std::alloc::AllocError> {\n+        todo!()\n+    }\n+    unsafe fn deallocate(&self, _: std::ptr::NonNull<u8>, _: std::alloc::Layout) {\n+        todo!()\n+    }\n+}\n+\n+fn main() {\n+    Box::new_in((), &std::alloc::Global);\n+    Box::new_in((), BigAllocator([0; 2]));\n+}"}]}