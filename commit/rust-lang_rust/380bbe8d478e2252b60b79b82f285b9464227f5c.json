{"sha": "380bbe8d478e2252b60b79b82f285b9464227f5c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4MGJiZThkNDc4ZTIyNTJiNjBiNzliODJmMjg1Yjk0NjQyMjdmNWM=", "commit": {"author": {"name": "ltdk", "email": "usr@ltdk.xyz", "date": "2021-05-09T00:18:44Z"}, "committer": {"name": "ltdk", "email": "usr@ltdk.xyz", "date": "2021-05-09T20:29:40Z"}, "message": "Make unchecked_{add,sub,mul} inherent methods unstably const", "tree": {"sha": "6c3f40aa51e93bbe1e39d0736781b99815db7699", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c3f40aa51e93bbe1e39d0736781b99815db7699"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/380bbe8d478e2252b60b79b82f285b9464227f5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/380bbe8d478e2252b60b79b82f285b9464227f5c", "html_url": "https://github.com/rust-lang/rust/commit/380bbe8d478e2252b60b79b82f285b9464227f5c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/380bbe8d478e2252b60b79b82f285b9464227f5c/comments", "author": {"login": "clarfonthey", "id": 15850505, "node_id": "MDQ6VXNlcjE1ODUwNTA1", "avatar_url": "https://avatars.githubusercontent.com/u/15850505?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clarfonthey", "html_url": "https://github.com/clarfonthey", "followers_url": "https://api.github.com/users/clarfonthey/followers", "following_url": "https://api.github.com/users/clarfonthey/following{/other_user}", "gists_url": "https://api.github.com/users/clarfonthey/gists{/gist_id}", "starred_url": "https://api.github.com/users/clarfonthey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clarfonthey/subscriptions", "organizations_url": "https://api.github.com/users/clarfonthey/orgs", "repos_url": "https://api.github.com/users/clarfonthey/repos", "events_url": "https://api.github.com/users/clarfonthey/events{/privacy}", "received_events_url": "https://api.github.com/users/clarfonthey/received_events", "type": "User", "site_admin": false}, "committer": {"login": "clarfonthey", "id": 15850505, "node_id": "MDQ6VXNlcjE1ODUwNTA1", "avatar_url": "https://avatars.githubusercontent.com/u/15850505?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clarfonthey", "html_url": "https://github.com/clarfonthey", "followers_url": "https://api.github.com/users/clarfonthey/followers", "following_url": "https://api.github.com/users/clarfonthey/following{/other_user}", "gists_url": "https://api.github.com/users/clarfonthey/gists{/gist_id}", "starred_url": "https://api.github.com/users/clarfonthey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clarfonthey/subscriptions", "organizations_url": "https://api.github.com/users/clarfonthey/orgs", "repos_url": "https://api.github.com/users/clarfonthey/repos", "events_url": "https://api.github.com/users/clarfonthey/events{/privacy}", "received_events_url": "https://api.github.com/users/clarfonthey/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "777bb2f6129e71a88ba030251eb370ef12fe28af", "url": "https://api.github.com/repos/rust-lang/rust/commits/777bb2f6129e71a88ba030251eb370ef12fe28af", "html_url": "https://github.com/rust-lang/rust/commit/777bb2f6129e71a88ba030251eb370ef12fe28af"}], "stats": {"total": 31, "additions": 19, "deletions": 12}, "files": [{"sha": "71008381475d32aa42ea2a491b8ecba512eb3a0d", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/380bbe8d478e2252b60b79b82f285b9464227f5c/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/380bbe8d478e2252b60b79b82f285b9464227f5c/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=380bbe8d478e2252b60b79b82f285b9464227f5c", "patch": "@@ -77,6 +77,7 @@\n #![feature(const_float_classify)]\n #![feature(const_float_bits_conv)]\n #![feature(const_int_unchecked_arith)]\n+#![feature(const_inherent_unchecked_arith)]\n #![feature(const_mut_refs)]\n #![feature(const_refs_to_cell)]\n #![feature(const_panic)]"}, {"sha": "47b2b30563c3a10c2332429be63da74ec6aad550", "filename": "library/core/src/num/int_macros.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/380bbe8d478e2252b60b79b82f285b9464227f5c/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/380bbe8d478e2252b60b79b82f285b9464227f5c/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs?ref=380bbe8d478e2252b60b79b82f285b9464227f5c", "patch": "@@ -412,12 +412,13 @@ macro_rules! int_impl {\n         #[unstable(\n             feature = \"unchecked_math\",\n             reason = \"niche optimization path\",\n-            issue = \"none\",\n+            issue = \"85122\",\n         )]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n+        #[rustc_const_unstable(feature = \"const_inherent_unchecked_arith\", issue = \"85122\")]\n         #[inline(always)]\n-        pub unsafe fn unchecked_add(self, rhs: Self) -> Self {\n+        pub const unsafe fn unchecked_add(self, rhs: Self) -> Self {\n             // SAFETY: the caller must uphold the safety contract for\n             // `unchecked_add`.\n             unsafe { intrinsics::unchecked_add(self, rhs) }\n@@ -450,12 +451,13 @@ macro_rules! int_impl {\n         #[unstable(\n             feature = \"unchecked_math\",\n             reason = \"niche optimization path\",\n-            issue = \"none\",\n+            issue = \"85122\",\n         )]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n+        #[rustc_const_unstable(feature = \"const_inherent_unchecked_arith\", issue = \"85122\")]\n         #[inline(always)]\n-        pub unsafe fn unchecked_sub(self, rhs: Self) -> Self {\n+        pub const unsafe fn unchecked_sub(self, rhs: Self) -> Self {\n             // SAFETY: the caller must uphold the safety contract for\n             // `unchecked_sub`.\n             unsafe { intrinsics::unchecked_sub(self, rhs) }\n@@ -488,12 +490,13 @@ macro_rules! int_impl {\n         #[unstable(\n             feature = \"unchecked_math\",\n             reason = \"niche optimization path\",\n-            issue = \"none\",\n+            issue = \"85122\",\n         )]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n+        #[rustc_const_unstable(feature = \"const_inherent_unchecked_arith\", issue = \"85122\")]\n         #[inline(always)]\n-        pub unsafe fn unchecked_mul(self, rhs: Self) -> Self {\n+        pub const unsafe fn unchecked_mul(self, rhs: Self) -> Self {\n             // SAFETY: the caller must uphold the safety contract for\n             // `unchecked_mul`.\n             unsafe { intrinsics::unchecked_mul(self, rhs) }"}, {"sha": "f9fd28b6a8c2487ab9c4e2f999c5c511644f5baa", "filename": "library/core/src/num/uint_macros.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/380bbe8d478e2252b60b79b82f285b9464227f5c/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/380bbe8d478e2252b60b79b82f285b9464227f5c/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs?ref=380bbe8d478e2252b60b79b82f285b9464227f5c", "patch": "@@ -422,12 +422,13 @@ macro_rules! uint_impl {\n         #[unstable(\n             feature = \"unchecked_math\",\n             reason = \"niche optimization path\",\n-            issue = \"none\",\n+            issue = \"85122\",\n         )]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n+        #[rustc_const_unstable(feature = \"const_inherent_unchecked_arith\", issue = \"85122\")]\n         #[inline(always)]\n-        pub unsafe fn unchecked_add(self, rhs: Self) -> Self {\n+        pub const unsafe fn unchecked_add(self, rhs: Self) -> Self {\n             // SAFETY: the caller must uphold the safety contract for\n             // `unchecked_add`.\n             unsafe { intrinsics::unchecked_add(self, rhs) }\n@@ -460,12 +461,13 @@ macro_rules! uint_impl {\n         #[unstable(\n             feature = \"unchecked_math\",\n             reason = \"niche optimization path\",\n-            issue = \"none\",\n+            issue = \"85122\",\n         )]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n+        #[rustc_const_unstable(feature = \"const_inherent_unchecked_arith\", issue = \"85122\")]\n         #[inline(always)]\n-        pub unsafe fn unchecked_sub(self, rhs: Self) -> Self {\n+        pub const unsafe fn unchecked_sub(self, rhs: Self) -> Self {\n             // SAFETY: the caller must uphold the safety contract for\n             // `unchecked_sub`.\n             unsafe { intrinsics::unchecked_sub(self, rhs) }\n@@ -498,12 +500,13 @@ macro_rules! uint_impl {\n         #[unstable(\n             feature = \"unchecked_math\",\n             reason = \"niche optimization path\",\n-            issue = \"none\",\n+            issue = \"85122\",\n         )]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n+        #[rustc_const_unstable(feature = \"const_inherent_unchecked_arith\", issue = \"85122\")]\n         #[inline(always)]\n-        pub unsafe fn unchecked_mul(self, rhs: Self) -> Self {\n+        pub const unsafe fn unchecked_mul(self, rhs: Self) -> Self {\n             // SAFETY: the caller must uphold the safety contract for\n             // `unchecked_mul`.\n             unsafe { intrinsics::unchecked_mul(self, rhs) }"}]}