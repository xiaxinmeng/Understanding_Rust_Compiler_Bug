{"sha": "88747ffe6344e074b52727d8bcf2416032c2d3f2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4NzQ3ZmZlNjM0NGUwNzRiNTI3MjdkOGJjZjI0MTYwMzJjMmQzZjI=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2020-01-22T23:54:04Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2020-02-10T19:44:12Z"}, "message": "Add `#[repr(no_niche)]`.\n\nThis repr-hint makes a struct/enum hide any niche within from its\nsurrounding type-construction context.\n\nIt is meant (at least initially) as an implementation detail for\nresolving issue 68303. We will not stabilize the repr-hint unless\nsomeone finds motivation for doing so.\n\n(So, declaration of `no_niche` feature lives in section of file\nwhere other internal implementation details are grouped, and\ndeliberately leaves out the tracking issue number.)\n\nincorporated review feedback, and fixed post-rebase.", "tree": {"sha": "34a4b16afac48dd436a394425a879a99661a079d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/34a4b16afac48dd436a394425a879a99661a079d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88747ffe6344e074b52727d8bcf2416032c2d3f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88747ffe6344e074b52727d8bcf2416032c2d3f2", "html_url": "https://github.com/rust-lang/rust/commit/88747ffe6344e074b52727d8bcf2416032c2d3f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88747ffe6344e074b52727d8bcf2416032c2d3f2/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6ec0d125eba4074122b187032474b4174fb9d31", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6ec0d125eba4074122b187032474b4174fb9d31", "html_url": "https://github.com/rust-lang/rust/commit/e6ec0d125eba4074122b187032474b4174fb9d31"}], "stats": {"total": 68, "additions": 56, "deletions": 12}, "files": [{"sha": "e8bf2eb9a12c98413c9e01131e095336492fb7af", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/88747ffe6344e074b52727d8bcf2416032c2d3f2/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88747ffe6344e074b52727d8bcf2416032c2d3f2/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=88747ffe6344e074b52727d8bcf2416032c2d3f2", "patch": "@@ -356,12 +356,14 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n             debug!(\"univariant offset: {:?} field: {:#?}\", offset, field);\n             offsets[i as usize] = offset;\n \n-            if let Some(mut niche) = field.largest_niche.clone() {\n-                let available = niche.available(dl);\n-                if available > largest_niche_available {\n-                    largest_niche_available = available;\n-                    niche.offset += offset;\n-                    largest_niche = Some(niche);\n+            if !repr.hide_niche() {\n+                if let Some(mut niche) = field.largest_niche.clone() {\n+                    let available = niche.available(dl);\n+                    if available > largest_niche_available {\n+                        largest_niche_available = available;\n+                        niche.offset += offset;\n+                        largest_niche = Some(niche);\n+                    }\n                 }\n             }\n \n@@ -838,7 +840,11 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                             }\n \n                             // Update `largest_niche` if we have introduced a larger niche.\n-                            let niche = Niche::from_scalar(dl, Size::ZERO, scalar.clone());\n+                            let niche = if def.repr.hide_niche() {\n+                                None\n+                            } else {\n+                                Niche::from_scalar(dl, Size::ZERO, scalar.clone())\n+                            };\n                             if let Some(niche) = niche {\n                                 match &st.largest_niche {\n                                     Some(largest_niche) => {\n@@ -863,6 +869,11 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                     return Ok(tcx.intern_layout(st));\n                 }\n \n+                // At this point, we have handled all unions and\n+                // structs. (We have also handled univariant enums\n+                // that allow representation optimization.)\n+                assert!(def.is_enum());\n+\n                 // The current code for niche-filling relies on variant indices\n                 // instead of actual discriminants, so dataful enums with\n                 // explicit discriminants (RFC #2363) would misbehave."}, {"sha": "60296b8116d8374f196e03467daddd2a6ba05f64", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/88747ffe6344e074b52727d8bcf2416032c2d3f2/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88747ffe6344e074b52727d8bcf2416032c2d3f2/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=88747ffe6344e074b52727d8bcf2416032c2d3f2", "patch": "@@ -2041,7 +2041,8 @@ bitflags! {\n         const IS_TRANSPARENT     = 1 << 2;\n         // Internal only for now. If true, don't reorder fields.\n         const IS_LINEAR          = 1 << 3;\n-\n+        // If true, don't expose any niche to type's context.\n+        const HIDE_NICHE         = 1 << 4;\n         // Any of these flags being set prevent field reordering optimisation.\n         const IS_UNOPTIMISABLE   = ReprFlags::IS_C.bits |\n                                    ReprFlags::IS_SIMD.bits |\n@@ -2078,6 +2079,7 @@ impl ReprOptions {\n                         ReprFlags::empty()\n                     }\n                     attr::ReprTransparent => ReprFlags::IS_TRANSPARENT,\n+                    attr::ReprNoNiche => ReprFlags::HIDE_NICHE,\n                     attr::ReprSimd => ReprFlags::IS_SIMD,\n                     attr::ReprInt(i) => {\n                         size = Some(i);\n@@ -2118,6 +2120,10 @@ impl ReprOptions {\n     pub fn linear(&self) -> bool {\n         self.flags.contains(ReprFlags::IS_LINEAR)\n     }\n+    #[inline]\n+    pub fn hide_niche(&self) -> bool {\n+        self.flags.contains(ReprFlags::HIDE_NICHE)\n+    }\n \n     pub fn discr_type(&self) -> attr::IntType {\n         self.int.unwrap_or(attr::SignedInt(ast::IntTy::Isize))"}, {"sha": "b9646cbbe6e5f9ac863033dc6b85c86c6bb8c7bc", "filename": "src/librustc_attr/builtin.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88747ffe6344e074b52727d8bcf2416032c2d3f2/src%2Flibrustc_attr%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88747ffe6344e074b52727d8bcf2416032c2d3f2/src%2Flibrustc_attr%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_attr%2Fbuiltin.rs?ref=88747ffe6344e074b52727d8bcf2416032c2d3f2", "patch": "@@ -838,6 +838,7 @@ pub enum ReprAttr {\n     ReprSimd,\n     ReprTransparent,\n     ReprAlign(u32),\n+    ReprNoNiche,\n }\n \n #[derive(Eq, PartialEq, Debug, RustcEncodable, RustcDecodable, Copy, Clone, HashStable_Generic)]\n@@ -893,6 +894,7 @@ pub fn find_repr_attrs(sess: &ParseSess, attr: &Attribute) -> Vec<ReprAttr> {\n                         sym::packed => Some(ReprPacked(1)),\n                         sym::simd => Some(ReprSimd),\n                         sym::transparent => Some(ReprTransparent),\n+                        sym::no_niche => Some(ReprNoNiche),\n                         name => int_type_of_word(name).map(ReprInt),\n                     };\n "}, {"sha": "f99008a6d5c1416a01710a758bb0a00296454377", "filename": "src/librustc_builtin_macros/deriving/generic/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/88747ffe6344e074b52727d8bcf2416032c2d3f2/src%2Flibrustc_builtin_macros%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88747ffe6344e074b52727d8bcf2416032c2d3f2/src%2Flibrustc_builtin_macros%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fderiving%2Fgeneric%2Fmod.rs?ref=88747ffe6344e074b52727d8bcf2416032c2d3f2", "patch": "@@ -825,7 +825,8 @@ fn find_repr_type_name(sess: &ParseSess, type_attrs: &[ast::Attribute]) -> &'sta\n                 attr::ReprPacked(_)\n                 | attr::ReprSimd\n                 | attr::ReprAlign(_)\n-                | attr::ReprTransparent => continue,\n+                | attr::ReprTransparent\n+                | attr::ReprNoNiche => continue,\n \n                 attr::ReprC => \"i32\",\n "}, {"sha": "0082f4f1a6e8985e647b7797c71120d1e96cee95", "filename": "src/librustc_feature/active.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88747ffe6344e074b52727d8bcf2416032c2d3f2/src%2Flibrustc_feature%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88747ffe6344e074b52727d8bcf2416032c2d3f2/src%2Flibrustc_feature%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Factive.rs?ref=88747ffe6344e074b52727d8bcf2416032c2d3f2", "patch": "@@ -204,6 +204,10 @@ declare_features! (\n     /// Added for testing E0705; perma-unstable.\n     (active, test_2018_feature, \"1.31.0\", None, Some(Edition::Edition2018)),\n \n+    /// Allows `#[repr(no_niche)]` (an implementation detail of `rustc`,\n+    /// it is not on path for eventual stabilization).\n+    (active, no_niche, \"1.42.0\", None, None),\n+\n     // no-tracking-issue-end\n \n     // -------------------------------------------------------------------------"}, {"sha": "81c5c3412b1dbdd9394da02a04b0b23e887035bb", "filename": "src/librustc_passes/check_attr.rs", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/88747ffe6344e074b52727d8bcf2416032c2d3f2/src%2Flibrustc_passes%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88747ffe6344e074b52727d8bcf2416032c2d3f2/src%2Flibrustc_passes%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fcheck_attr.rs?ref=88747ffe6344e074b52727d8bcf2416032c2d3f2", "patch": "@@ -16,9 +16,10 @@ use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::DUMMY_HIR_ID;\n use rustc_hir::{self, HirId, Item, ItemKind, TraitItem};\n use rustc_session::lint::builtin::{CONFLICTING_REPR_HINTS, UNUSED_ATTRIBUTES};\n+use rustc_session::parse::feature_err;\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n-use syntax::ast::Attribute;\n+use syntax::ast::{Attribute, NestedMetaItem};\n use syntax::attr;\n \n fn target_from_impl_item<'tcx>(tcx: TyCtxt<'tcx>, impl_item: &hir::ImplItem<'_>) -> Target {\n@@ -287,6 +288,21 @@ impl CheckAttrVisitor<'tcx> {\n                         _ => (\"a\", \"struct, enum, or union\"),\n                     }\n                 }\n+                sym::no_niche => {\n+                    if !self.tcx.features().enabled(sym::no_niche) {\n+                        feature_err(\n+                            &self.tcx.sess.parse_sess,\n+                            sym::no_niche,\n+                            hint.span(),\n+                            \"the attribute `repr(no_niche)` is currently unstable\",\n+                        )\n+                        .emit();\n+                    }\n+                    match target {\n+                        Target::Struct | Target::Enum => continue,\n+                        _ => (\"a\", \"struct or enum\"),\n+                    }\n+                }\n                 sym::i8\n                 | sym::u8\n                 | sym::i16\n@@ -314,8 +330,10 @@ impl CheckAttrVisitor<'tcx> {\n         // This is not ideal, but tracking precisely which ones are at fault is a huge hassle.\n         let hint_spans = hints.iter().map(|hint| hint.span());\n \n-        // Error on repr(transparent, <anything else>).\n-        if is_transparent && hints.len() > 1 {\n+        // Error on repr(transparent, <anything else apart from no_niche>).\n+        let non_no_niche = |hint: &&NestedMetaItem| hint.name_or_empty() != sym::no_niche;\n+        let non_no_niche_count = hints.iter().filter(non_no_niche).count();\n+        if is_transparent && non_no_niche_count > 1 {\n             let hint_spans: Vec<_> = hint_spans.clone().collect();\n             struct_span_err!(\n                 self.tcx.sess,"}, {"sha": "1cc4a27788098e6f54ede20880154705aec51d55", "filename": "src/librustc_span/symbol.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88747ffe6344e074b52727d8bcf2416032c2d3f2/src%2Flibrustc_span%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88747ffe6344e074b52727d8bcf2416032c2d3f2/src%2Flibrustc_span%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsymbol.rs?ref=88747ffe6344e074b52727d8bcf2416032c2d3f2", "patch": "@@ -491,6 +491,7 @@ symbols! {\n         non_exhaustive,\n         non_modrs_mods,\n         no_sanitize,\n+        no_niche,\n         no_stack_check,\n         no_start,\n         no_std,\n@@ -587,6 +588,7 @@ symbols! {\n         repr128,\n         repr_align,\n         repr_align_enum,\n+        repr_no_niche,\n         repr_packed,\n         repr_simd,\n         repr_transparent,"}]}