{"sha": "afd8a4e7ec4c5b6d8296d6d9109389b27e074980", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmZDhhNGU3ZWM0YzViNmQ4Mjk2ZDZkOTEwOTM4OWIyN2UwNzQ5ODA=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-05-06T00:17:38Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-05-06T02:15:26Z"}, "message": "Improve `LocalDecl` creation.\n\nThis commit adds some new `LocalDecl` methods:\n- `with_source_info`, a most general constructor.\n- `new`, a variant of `with_source_info` which represents the most\n  common use case.\n- `internal` a modifying method (like the already present `immutable`).\n\nIt removes some old `LocalDecl` methods:\n- `new_internal` and `new_local`, because they're subsumed by the new\n  methods.\n- `new_return_place`, because it was identical to `new_temp`.\n\nFinally, it cleans up all the use sites.", "tree": {"sha": "1b6629d8c8274d5f23b1ed17963c6dbb5a7a73a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b6629d8c8274d5f23b1ed17963c6dbb5a7a73a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/afd8a4e7ec4c5b6d8296d6d9109389b27e074980", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/afd8a4e7ec4c5b6d8296d6d9109389b27e074980", "html_url": "https://github.com/rust-lang/rust/commit/afd8a4e7ec4c5b6d8296d6d9109389b27e074980", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/afd8a4e7ec4c5b6d8296d6d9109389b27e074980/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a17234ca542f45028d846c7ec95c0a19d96df743", "url": "https://api.github.com/repos/rust-lang/rust/commits/a17234ca542f45028d846c7ec95c0a19d96df743", "html_url": "https://github.com/rust-lang/rust/commit/a17234ca542f45028d846c7ec95c0a19d96df743"}], "stats": {"total": 207, "additions": 70, "deletions": 137}, "files": [{"sha": "adcbaba5a69087a0734803f1d6f88df0cb965c4f", "filename": "src/librustc_middle/mir/mod.rs", "status": "modified", "additions": 24, "deletions": 38, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/afd8a4e7ec4c5b6d8296d6d9109389b27e074980/src%2Flibrustc_middle%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afd8a4e7ec4c5b6d8296d6d9109389b27e074980/src%2Flibrustc_middle%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fmod.rs?ref=afd8a4e7ec4c5b6d8296d6d9109389b27e074980", "patch": "@@ -918,10 +918,31 @@ impl<'tcx> LocalDecl<'tcx> {\n         self.source_info.span.desugaring_kind().is_some()\n     }\n \n-    /// Creates a new `LocalDecl` for a temporary.\n+    /// Creates a new `LocalDecl` for a temporary: mutable, non-internal.\n     #[inline]\n-    pub fn new_temp(ty: Ty<'tcx>, span: Span) -> Self {\n-        Self::new_local(ty, Mutability::Mut, false, span)\n+    pub fn new(ty: Ty<'tcx>, span: Span) -> Self {\n+        Self::with_source_info(ty, SourceInfo::outermost(span))\n+    }\n+\n+    /// Like `LocalDecl::new`, but takes a `SourceInfo` instead of a `Span`.\n+    #[inline]\n+    pub fn with_source_info(ty: Ty<'tcx>, source_info: SourceInfo) -> Self {\n+        LocalDecl {\n+            mutability: Mutability::Mut,\n+            local_info: LocalInfo::Other,\n+            internal: false,\n+            is_block_tail: None,\n+            ty,\n+            user_ty: UserTypeProjections::none(),\n+            source_info,\n+        }\n+    }\n+\n+    /// Converts `self` into same `LocalDecl` except tagged as internal.\n+    #[inline]\n+    pub fn internal(mut self) -> Self {\n+        self.internal = true;\n+        self\n     }\n \n     /// Converts `self` into same `LocalDecl` except tagged as immutable.\n@@ -938,41 +959,6 @@ impl<'tcx> LocalDecl<'tcx> {\n         self.is_block_tail = Some(info);\n         self\n     }\n-\n-    /// Creates a new `LocalDecl` for a internal temporary.\n-    #[inline]\n-    pub fn new_internal(ty: Ty<'tcx>, span: Span) -> Self {\n-        Self::new_local(ty, Mutability::Mut, true, span)\n-    }\n-\n-    #[inline]\n-    fn new_local(ty: Ty<'tcx>, mutability: Mutability, internal: bool, span: Span) -> Self {\n-        LocalDecl {\n-            mutability,\n-            ty,\n-            user_ty: UserTypeProjections::none(),\n-            source_info: SourceInfo::outermost(span),\n-            internal,\n-            local_info: LocalInfo::Other,\n-            is_block_tail: None,\n-        }\n-    }\n-\n-    /// Builds a `LocalDecl` for the return place.\n-    ///\n-    /// This must be inserted into the `local_decls` list as the first local.\n-    #[inline]\n-    pub fn new_return_place(return_ty: Ty<'_>, span: Span) -> LocalDecl<'_> {\n-        LocalDecl {\n-            mutability: Mutability::Mut,\n-            ty: return_ty,\n-            user_ty: UserTypeProjections::none(),\n-            source_info: SourceInfo::outermost(span),\n-            internal: false,\n-            is_block_tail: None,\n-            local_info: LocalInfo::Other,\n-        }\n-    }\n }\n \n /// Debug information pertaining to a user variable."}, {"sha": "847f59b95e95913dcd151aee6dbc8436607a277a", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 19, "deletions": 25, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/afd8a4e7ec4c5b6d8296d6d9109389b27e074980/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afd8a4e7ec4c5b6d8296d6d9109389b27e074980/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=afd8a4e7ec4c5b6d8296d6d9109389b27e074980", "patch": "@@ -145,24 +145,12 @@ enum CallKind {\n     Direct(DefId),\n }\n \n-fn temp_decl(mutability: Mutability, ty: Ty<'_>, span: Span) -> LocalDecl<'_> {\n-    LocalDecl {\n-        mutability,\n-        ty,\n-        user_ty: UserTypeProjections::none(),\n-        source_info: SourceInfo::outermost(span),\n-        internal: false,\n-        local_info: LocalInfo::Other,\n-        is_block_tail: None,\n-    }\n-}\n-\n fn local_decls_for_sig<'tcx>(\n     sig: &ty::FnSig<'tcx>,\n     span: Span,\n ) -> IndexVec<Local, LocalDecl<'tcx>> {\n-    iter::once(temp_decl(Mutability::Mut, sig.output(), span))\n-        .chain(sig.inputs().iter().map(|ity| temp_decl(Mutability::Not, ity, span)))\n+    iter::once(LocalDecl::new(sig.output(), span))\n+        .chain(sig.inputs().iter().map(|ity| LocalDecl::new(ity, span).immutable()))\n         .collect()\n }\n \n@@ -413,7 +401,11 @@ impl CloneShimBuilder<'tcx> {\n \n     fn make_place(&mut self, mutability: Mutability, ty: Ty<'tcx>) -> Place<'tcx> {\n         let span = self.span;\n-        Place::from(self.local_decls.push(temp_decl(mutability, ty, span)))\n+        let mut local = LocalDecl::new(ty, span);\n+        if mutability == Mutability::Not {\n+            local = local.immutable();\n+        }\n+        Place::from(self.local_decls.push(local))\n     }\n \n     fn make_clone_call(\n@@ -497,7 +489,7 @@ impl CloneShimBuilder<'tcx> {\n         let tcx = self.tcx;\n         let span = self.span;\n \n-        let beg = self.local_decls.push(temp_decl(Mutability::Mut, tcx.types.usize, span));\n+        let beg = self.local_decls.push(LocalDecl::new(tcx.types.usize, span));\n         let end = self.make_place(Mutability::Not, tcx.types.usize);\n \n         // BB #0\n@@ -552,7 +544,7 @@ impl CloneShimBuilder<'tcx> {\n         // `let mut beg = 0;`\n         // goto #6;\n         let end = beg;\n-        let beg = self.local_decls.push(temp_decl(Mutability::Mut, tcx.types.usize, span));\n+        let beg = self.local_decls.push(LocalDecl::new(tcx.types.usize, span));\n         let init = self.make_statement(StatementKind::Assign(box (\n             Place::from(beg),\n             Rvalue::Use(Operand::Constant(self.make_usize(0))),\n@@ -700,14 +692,16 @@ fn build_call_shim<'tcx>(\n         Adjustment::DerefMove => Operand::Move(tcx.mk_place_deref(rcvr_place())),\n         Adjustment::RefMut => {\n             // let rcvr = &mut rcvr;\n-            let ref_rcvr = local_decls.push(temp_decl(\n-                Mutability::Not,\n-                tcx.mk_ref(\n-                    tcx.lifetimes.re_erased,\n-                    ty::TypeAndMut { ty: sig.inputs()[0], mutbl: hir::Mutability::Mut },\n-                ),\n-                span,\n-            ));\n+            let ref_rcvr = local_decls.push(\n+                LocalDecl::new(\n+                    tcx.mk_ref(\n+                        tcx.lifetimes.re_erased,\n+                        ty::TypeAndMut { ty: sig.inputs()[0], mutbl: hir::Mutability::Mut },\n+                    ),\n+                    span,\n+                )\n+                .immutable(),\n+            );\n             let borrow_kind = BorrowKind::Mut { allow_two_phase_borrow: false };\n             statements.push(Statement {\n                 source_info,"}, {"sha": "91f0297710e0c7d565a74fde6a165754b24d02ba", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 6, "deletions": 28, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/afd8a4e7ec4c5b6d8296d6d9109389b27e074980/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afd8a4e7ec4c5b6d8296d6d9109389b27e074980/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=afd8a4e7ec4c5b6d8296d6d9109389b27e074980", "patch": "@@ -255,7 +255,7 @@ impl TransformVisitor<'tcx> {\n \n     // Create a statement which reads the discriminant into a temporary\n     fn get_discr(&self, body: &mut Body<'tcx>) -> (Statement<'tcx>, Place<'tcx>) {\n-        let temp_decl = LocalDecl::new_internal(self.tcx.types.isize, body.span);\n+        let temp_decl = LocalDecl::new(self.tcx.types.isize, body.span).internal();\n         let local_decls_len = body.local_decls.push(temp_decl);\n         let temp = Place::from(local_decls_len);\n \n@@ -395,16 +395,7 @@ fn replace_local<'tcx>(\n     body: &mut Body<'tcx>,\n     tcx: TyCtxt<'tcx>,\n ) -> Local {\n-    let source_info = SourceInfo::outermost(body.span);\n-    let new_decl = LocalDecl {\n-        mutability: Mutability::Mut,\n-        ty,\n-        user_ty: UserTypeProjections::none(),\n-        source_info,\n-        internal: false,\n-        is_block_tail: None,\n-        local_info: LocalInfo::Other,\n-    };\n+    let new_decl = LocalDecl::new(ty, body.span);\n     let new_local = body.local_decls.push(new_decl);\n     body.local_decls.swap(local, new_local);\n \n@@ -877,28 +868,15 @@ fn create_generator_drop_shim<'tcx>(\n     }\n \n     // Replace the return variable\n-    body.local_decls[RETURN_PLACE] = LocalDecl {\n-        mutability: Mutability::Mut,\n-        ty: tcx.mk_unit(),\n-        user_ty: UserTypeProjections::none(),\n-        source_info,\n-        internal: false,\n-        is_block_tail: None,\n-        local_info: LocalInfo::Other,\n-    };\n+    body.local_decls[RETURN_PLACE] = LocalDecl::with_source_info(tcx.mk_unit(), source_info);\n \n     make_generator_state_argument_indirect(tcx, &mut body);\n \n     // Change the generator argument from &mut to *mut\n-    body.local_decls[SELF_ARG] = LocalDecl {\n-        mutability: Mutability::Mut,\n-        ty: tcx.mk_ptr(ty::TypeAndMut { ty: gen_ty, mutbl: hir::Mutability::Mut }),\n-        user_ty: UserTypeProjections::none(),\n+    body.local_decls[SELF_ARG] = LocalDecl::with_source_info(\n+        tcx.mk_ptr(ty::TypeAndMut { ty: gen_ty, mutbl: hir::Mutability::Mut }),\n         source_info,\n-        internal: false,\n-        is_block_tail: None,\n-        local_info: LocalInfo::Other,\n-    };\n+    );\n     if tcx.sess.opts.debugging_opts.mir_emit_retag {\n         // Alias tracking must know we changed the type\n         body.basic_blocks_mut()[START_BLOCK].statements.insert("}, {"sha": "a8e949ecb3144cc9ebc4d1af058e23ac0b7db32c", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/afd8a4e7ec4c5b6d8296d6d9109389b27e074980/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afd8a4e7ec4c5b6d8296d6d9109389b27e074980/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=afd8a4e7ec4c5b6d8296d6d9109389b27e074980", "patch": "@@ -480,7 +480,7 @@ impl Inliner<'tcx> {\n \n                     let ty = dest.ty(caller_body, self.tcx);\n \n-                    let temp = LocalDecl::new_temp(ty, callsite.location.span);\n+                    let temp = LocalDecl::new(ty, callsite.location.span);\n \n                     let tmp = caller_body.local_decls.push(temp);\n                     let tmp = Place::from(tmp);\n@@ -631,7 +631,7 @@ impl Inliner<'tcx> {\n \n         let ty = arg.ty(caller_body, self.tcx);\n \n-        let arg_tmp = LocalDecl::new_temp(ty, callsite.location.span);\n+        let arg_tmp = LocalDecl::new(ty, callsite.location.span);\n         let arg_tmp = caller_body.local_decls.push(arg_tmp);\n \n         let stmt = Statement {"}, {"sha": "ebb162eca4654b465e0af801f0ac5e4d772e8792", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/afd8a4e7ec4c5b6d8296d6d9109389b27e074980/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afd8a4e7ec4c5b6d8296d6d9109389b27e074980/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=afd8a4e7ec4c5b6d8296d6d9109389b27e074980", "patch": "@@ -815,7 +815,7 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n         }\n \n         let num_stmts = self.source[loc.block].statements.len();\n-        let new_temp = self.promoted.local_decls.push(LocalDecl::new_temp(\n+        let new_temp = self.promoted.local_decls.push(LocalDecl::new(\n             self.source.local_decls[temp].ty,\n             self.source.local_decls[temp].source_info.span,\n         ));\n@@ -915,7 +915,7 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n             let tcx = self.tcx;\n             let mut promoted_operand = |ty, span| {\n                 promoted.span = span;\n-                promoted.local_decls[RETURN_PLACE] = LocalDecl::new_return_place(ty, span);\n+                promoted.local_decls[RETURN_PLACE] = LocalDecl::new(ty, span);\n \n                 Operand::Constant(Box::new(Constant {\n                     span,\n@@ -963,7 +963,7 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n                             // Create a temp to hold the promoted reference.\n                             // This is because `*r` requires `r` to be a local,\n                             // otherwise we would use the `promoted` directly.\n-                            let mut promoted_ref = LocalDecl::new_temp(ref_ty, span);\n+                            let mut promoted_ref = LocalDecl::new(ref_ty, span);\n                             promoted_ref.source_info = statement.source_info;\n                             let promoted_ref = local_decls.push(promoted_ref);\n                             assert_eq!(self.temps.push(TempState::Unpromotable), promoted_ref);\n@@ -1081,8 +1081,7 @@ pub fn promote_candidates<'tcx>(\n         }\n \n         // Declare return place local so that `mir::Body::new` doesn't complain.\n-        let initial_locals =\n-            iter::once(LocalDecl::new_return_place(tcx.types.never, body.span)).collect();\n+        let initial_locals = iter::once(LocalDecl::new(tcx.types.never, body.span)).collect();\n \n         let mut promoted = Body::new(\n             IndexVec::new(),"}, {"sha": "6566a996fe44285fa1a89ce0844982f2cffd44b5", "filename": "src/librustc_mir/util/patch.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/afd8a4e7ec4c5b6d8296d6d9109389b27e074980/src%2Flibrustc_mir%2Futil%2Fpatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afd8a4e7ec4c5b6d8296d6d9109389b27e074980/src%2Flibrustc_mir%2Futil%2Fpatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpatch.rs?ref=afd8a4e7ec4c5b6d8296d6d9109389b27e074980", "patch": "@@ -83,14 +83,14 @@ impl<'tcx> MirPatch<'tcx> {\n     pub fn new_temp(&mut self, ty: Ty<'tcx>, span: Span) -> Local {\n         let index = self.next_local;\n         self.next_local += 1;\n-        self.new_locals.push(LocalDecl::new_temp(ty, span));\n+        self.new_locals.push(LocalDecl::new(ty, span));\n         Local::new(index as usize)\n     }\n \n     pub fn new_internal(&mut self, ty: Ty<'tcx>, span: Span) -> Local {\n         let index = self.next_local;\n         self.next_local += 1;\n-        self.new_locals.push(LocalDecl::new_internal(ty, span));\n+        self.new_locals.push(LocalDecl::new(ty, span).internal());\n         Local::new(index as usize)\n     }\n "}, {"sha": "e08eedc6b6e916a9d19e9c5d7b295b43cb074877", "filename": "src/librustc_mir_build/build/expr/as_place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afd8a4e7ec4c5b6d8296d6d9109389b27e074980/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afd8a4e7ec4c5b6d8296d6d9109389b27e074980/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_place.rs?ref=afd8a4e7ec4c5b6d8296d6d9109389b27e074980", "patch": "@@ -383,7 +383,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         let fake_borrow_ty =\n                             tcx.mk_imm_ref(tcx.lifetimes.re_erased, fake_borrow_deref_ty);\n                         let fake_borrow_temp =\n-                            self.local_decls.push(LocalDecl::new_temp(fake_borrow_ty, expr_span));\n+                            self.local_decls.push(LocalDecl::new(fake_borrow_ty, expr_span));\n                         let projection = tcx.intern_place_elems(&base_place.projection[..idx]);\n                         self.cfg.push_assign(\n                             block,"}, {"sha": "d934ba1dc841e5ca8522966e218096b159030d5c", "filename": "src/librustc_mir_build/build/expr/as_rvalue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/afd8a4e7ec4c5b6d8296d6d9109389b27e074980/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afd8a4e7ec4c5b6d8296d6d9109389b27e074980/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=afd8a4e7ec4c5b6d8296d6d9109389b27e074980", "patch": "@@ -97,7 +97,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 // The `Box<T>` temporary created here is not a part of the HIR,\n                 // and therefore is not considered during generator OIBIT\n                 // determination. See the comment about `box` at `yield_in_scope`.\n-                let result = this.local_decls.push(LocalDecl::new_internal(expr.ty, expr_span));\n+                let result = this.local_decls.push(LocalDecl::new(expr.ty, expr_span).internal());\n                 this.cfg.push(\n                     block,\n                     Statement { source_info, kind: StatementKind::StorageLive(result) },\n@@ -377,7 +377,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         let this = self;\n \n         let source_info = this.source_info(upvar_span);\n-        let temp = this.local_decls.push(LocalDecl::new_temp(upvar_ty, upvar_span));\n+        let temp = this.local_decls.push(LocalDecl::new(upvar_ty, upvar_span));\n \n         this.cfg.push(block, Statement { source_info, kind: StatementKind::StorageLive(temp) });\n "}, {"sha": "16ca20575849719e7742b0a69ec39cba690466be", "filename": "src/librustc_mir_build/build/expr/as_temp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afd8a4e7ec4c5b6d8296d6d9109389b27e074980/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_temp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afd8a4e7ec4c5b6d8296d6d9109389b27e074980/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_temp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_temp.rs?ref=afd8a4e7ec4c5b6d8296d6d9109389b27e074980", "patch": "@@ -47,7 +47,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n         let expr_ty = expr.ty;\n         let temp = {\n-            let mut local_decl = LocalDecl::new_temp(expr_ty, expr_span);\n+            let mut local_decl = LocalDecl::new(expr_ty, expr_span);\n             if mutability == Mutability::Not {\n                 local_decl = local_decl.immutable();\n             }"}, {"sha": "e26fb48a3f99736e6a7ed69a4990b452876a07a5", "filename": "src/librustc_mir_build/build/expr/into.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/afd8a4e7ec4c5b6d8296d6d9109389b27e074980/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afd8a4e7ec4c5b6d8296d6d9109389b27e074980/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Finto.rs?ref=afd8a4e7ec4c5b6d8296d6d9109389b27e074980", "patch": "@@ -187,15 +187,10 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     let ptr_ty = ptr.ty;\n                     // Create an *internal* temp for the pointer, so that unsafety\n                     // checking won't complain about the raw pointer assignment.\n-                    let ptr_temp = this.local_decls.push(LocalDecl {\n-                        mutability: Mutability::Mut,\n-                        ty: ptr_ty,\n-                        user_ty: UserTypeProjections::none(),\n+                    let ptr_temp = this.local_decls.push(LocalDecl::with_source_info(\n+                        ptr_ty,\n                         source_info,\n-                        internal: true,\n-                        local_info: LocalInfo::Other,\n-                        is_block_tail: None,\n-                    });\n+                    ).internal());\n                     let ptr_temp = Place::from(ptr_temp);\n                     let block = unpack!(this.into(ptr_temp, block, ptr));\n                     this.into(this.hir.tcx().mk_place_deref(ptr_temp), block, val)\n@@ -348,7 +343,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 // value is Sized. Usually, this is caught in type checking, but\n                 // in the case of box expr there is no such check.\n                 if !destination.projection.is_empty() {\n-                    this.local_decls.push(LocalDecl::new_temp(expr.ty, expr.span));\n+                    this.local_decls.push(LocalDecl::new(expr.ty, expr.span));\n                 }\n \n                 debug_assert!(Category::of(&expr.kind) == Some(Category::Place));"}, {"sha": "03fdd2ed8f12e5368cf0b3ad1ec55ab08f6acb2b", "filename": "src/librustc_mir_build/build/matches/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afd8a4e7ec4c5b6d8296d6d9109389b27e074980/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afd8a4e7ec4c5b6d8296d6d9109389b27e074980/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Fmod.rs?ref=afd8a4e7ec4c5b6d8296d6d9109389b27e074980", "patch": "@@ -1539,7 +1539,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 let fake_borrow_deref_ty = matched_place.ty(&self.local_decls, tcx).ty;\n                 let fake_borrow_ty = tcx.mk_imm_ref(tcx.lifetimes.re_erased, fake_borrow_deref_ty);\n                 let fake_borrow_temp =\n-                    self.local_decls.push(LocalDecl::new_temp(fake_borrow_ty, temp_span));\n+                    self.local_decls.push(LocalDecl::new(fake_borrow_ty, temp_span));\n \n                 (matched_place, fake_borrow_temp)\n             })"}, {"sha": "e8933ff8aa749a0db27435c8a481b606dd4ca749", "filename": "src/librustc_mir_build/build/misc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afd8a4e7ec4c5b6d8296d6d9109389b27e074980/src%2Flibrustc_mir_build%2Fbuild%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afd8a4e7ec4c5b6d8296d6d9109389b27e074980/src%2Flibrustc_mir_build%2Fbuild%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmisc.rs?ref=afd8a4e7ec4c5b6d8296d6d9109389b27e074980", "patch": "@@ -15,7 +15,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n     /// N.B., **No cleanup is scheduled for this temporary.** You should\n     /// call `schedule_drop` once the temporary is initialized.\n     crate fn temp(&mut self, ty: Ty<'tcx>, span: Span) -> Place<'tcx> {\n-        let temp = self.local_decls.push(LocalDecl::new_temp(ty, span));\n+        let temp = self.local_decls.push(LocalDecl::new(ty, span));\n         let place = Place::from(temp);\n         debug!(\"temp: created temp {:?} with type {:?}\", place, self.local_decls[temp].ty);\n         place"}, {"sha": "a668cb869106fd1af2dd7684f138291801c0749e", "filename": "src/librustc_mir_build/build/mod.rs", "status": "modified", "additions": 3, "deletions": 22, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/afd8a4e7ec4c5b6d8296d6d9109389b27e074980/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afd8a4e7ec4c5b6d8296d6d9109389b27e074980/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs?ref=afd8a4e7ec4c5b6d8296d6d9109389b27e074980", "patch": "@@ -708,15 +708,7 @@ fn construct_error<'a, 'tcx>(hir: Cx<'a, 'tcx>, body_id: hir::BodyId) -> Body<'t\n     // Some MIR passes will expect the number of parameters to match the\n     // function declaration.\n     for _ in 0..num_params {\n-        builder.local_decls.push(LocalDecl {\n-            mutability: Mutability::Mut,\n-            ty,\n-            user_ty: UserTypeProjections::none(),\n-            source_info,\n-            internal: false,\n-            local_info: LocalInfo::Other,\n-            is_block_tail: None,\n-        });\n+        builder.local_decls.push(LocalDecl::with_source_info(ty, source_info));\n     }\n     builder.cfg.terminate(START_BLOCK, source_info, TerminatorKind::Unreachable);\n     let mut body = builder.finish();\n@@ -750,10 +742,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             guard_context: vec![],\n             push_unsafe_count: 0,\n             unpushed_unsafe: safety,\n-            local_decls: IndexVec::from_elem_n(\n-                LocalDecl::new_return_place(return_ty, return_span),\n-                1,\n-            ),\n+            local_decls: IndexVec::from_elem_n(LocalDecl::new(return_ty, return_span), 1),\n             canonical_user_type_annotations: IndexVec::new(),\n             upvar_mutbls: vec![],\n             var_indices: Default::default(),\n@@ -806,15 +795,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         for &ArgInfo(ty, _, arg_opt, _) in arguments.iter() {\n             let source_info =\n                 SourceInfo::outermost(arg_opt.map_or(self.fn_span, |arg| arg.pat.span));\n-            let arg_local = self.local_decls.push(LocalDecl {\n-                mutability: Mutability::Mut,\n-                ty,\n-                user_ty: UserTypeProjections::none(),\n-                source_info,\n-                internal: false,\n-                local_info: LocalInfo::Other,\n-                is_block_tail: None,\n-            });\n+            let arg_local = self.local_decls.push(LocalDecl::with_source_info(ty, source_info));\n \n             // If this is a simple binding pattern, give debuginfo a nice name.\n             if let Some(arg) = arg_opt {"}]}