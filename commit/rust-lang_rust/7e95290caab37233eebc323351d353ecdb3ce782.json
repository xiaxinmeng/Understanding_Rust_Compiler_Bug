{"sha": "7e95290caab37233eebc323351d353ecdb3ce782", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlOTUyOTBjYWFiMzcyMzNlZWJjMzIzMzUxZDM1M2VjZGIzY2U3ODI=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-07-07T03:17:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-07T03:17:39Z"}, "message": "Rollup merge of #86717 - rylev:rename, r=nikomatsakis\n\nRename some Rust 2021 lints to better names\n\nBased on conversation in https://github.com/rust-lang/rust/issues/85894.\n\nRename a bunch of Rust 2021 related lints:\n\nLints that are officially renamed because they are already in beta or stable:\n* `disjoint_capture_migration` => `rust_2021_incompatible_closure_captures`\n* `or_patterns_back_compat` => `rust_2021_incompatible_or_patterns`\n* `non_fmt_panic` => `non_fmt_panics`\n\nLints that are renamed but don't require any back -compat work since they aren't yet in stable:\n* `future_prelude_collision` => `rust_2021_prelude_collisions`\n* `reserved_prefix` => `rust_2021_token_prefixes`\n\nLints that have been discussed but that I did not rename:\n* ~`non_fmt_panic` and `bare_trait_object`: is making this plural worth the headache we might cause users?~\n* `array_into_iter`: I'm unsure of a good name and whether bothering users with a name change is worth it.\n\nr? `@nikomatsakis`", "tree": {"sha": "74fb4e3975a17a482e356dea4b235482b912d547", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/74fb4e3975a17a482e356dea4b235482b912d547"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e95290caab37233eebc323351d353ecdb3ce782", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg5RzTCRBK7hj4Ov3rIwAAIl8IAG9gYRHne9a0gmM3mfTpnE2X\n8+VuLKYPsdOsCXO/zNw5JzpvJYPpMa7OSMuL1ROrw6ZwsZUxbzSORF/NLlxj1eEn\nOuwaa6IRwpewM5XOpn6qGajfbjBmIhsqArKJ/6LjKrpp1mWfwdouy39V3kEwKQLb\nqUmEOOM7Bp3e5T81NMsN1xbWmX4sjSB0bqqZgjnrb2FB5rdMGWftFI38Twmjgpa2\nLOCY9SYUybcUGsMlYz57q327BSSRbIPdrIhLWorsmxKTU2KEKjHxbcBZMaZnwUEQ\nYYWsWPGZY/iQ274Bgu7JYMxSJRrr43dT/yFm8PlcO/CIDBQQ3acngQM7i2zuVDY=\n=1TVZ\n-----END PGP SIGNATURE-----\n", "payload": "tree 74fb4e3975a17a482e356dea4b235482b912d547\nparent 9bbc470e9779436d787ccda9924826176030b714\nparent d4e384bc1de0c11f3bc6fffc013358de85ad2982\nauthor Yuki Okushi <jtitor@2k36.org> 1625627859 +0900\ncommitter GitHub <noreply@github.com> 1625627859 +0900\n\nRollup merge of #86717 - rylev:rename, r=nikomatsakis\n\nRename some Rust 2021 lints to better names\n\nBased on conversation in https://github.com/rust-lang/rust/issues/85894.\n\nRename a bunch of Rust 2021 related lints:\n\nLints that are officially renamed because they are already in beta or stable:\n* `disjoint_capture_migration` => `rust_2021_incompatible_closure_captures`\n* `or_patterns_back_compat` => `rust_2021_incompatible_or_patterns`\n* `non_fmt_panic` => `non_fmt_panics`\n\nLints that are renamed but don't require any back -compat work since they aren't yet in stable:\n* `future_prelude_collision` => `rust_2021_prelude_collisions`\n* `reserved_prefix` => `rust_2021_token_prefixes`\n\nLints that have been discussed but that I did not rename:\n* ~`non_fmt_panic` and `bare_trait_object`: is making this plural worth the headache we might cause users?~\n* `array_into_iter`: I'm unsure of a good name and whether bothering users with a name change is worth it.\n\nr? `@nikomatsakis`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e95290caab37233eebc323351d353ecdb3ce782", "html_url": "https://github.com/rust-lang/rust/commit/7e95290caab37233eebc323351d353ecdb3ce782", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e95290caab37233eebc323351d353ecdb3ce782/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9bbc470e9779436d787ccda9924826176030b714", "url": "https://api.github.com/repos/rust-lang/rust/commits/9bbc470e9779436d787ccda9924826176030b714", "html_url": "https://github.com/rust-lang/rust/commit/9bbc470e9779436d787ccda9924826176030b714"}, {"sha": "d4e384bc1de0c11f3bc6fffc013358de85ad2982", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4e384bc1de0c11f3bc6fffc013358de85ad2982", "html_url": "https://github.com/rust-lang/rust/commit/d4e384bc1de0c11f3bc6fffc013358de85ad2982"}], "stats": {"total": 576, "additions": 309, "deletions": 267}, "files": [{"sha": "8b68c94e61a384c19603352176b09e396236e31e", "filename": "compiler/rustc_expand/src/mbe/macro_rules.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7e95290caab37233eebc323351d353ecdb3ce782/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e95290caab37233eebc323351d353ecdb3ce782/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs?ref=7e95290caab37233eebc323351d353ecdb3ce782", "patch": "@@ -18,7 +18,9 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_feature::Features;\n-use rustc_lint_defs::builtin::{OR_PATTERNS_BACK_COMPAT, SEMICOLON_IN_EXPRESSIONS_FROM_MACROS};\n+use rustc_lint_defs::builtin::{\n+    RUST_2021_INCOMPATIBLE_OR_PATTERNS, SEMICOLON_IN_EXPRESSIONS_FROM_MACROS,\n+};\n use rustc_lint_defs::BuiltinLintDiagnostics;\n use rustc_parse::parser::Parser;\n use rustc_session::parse::ParseSess;\n@@ -975,7 +977,7 @@ fn check_matcher_core(\n                             Some(NonterminalKind::PatParam { inferred: false }),\n                         ));\n                         sess.buffer_lint_with_diagnostic(\n-                            &OR_PATTERNS_BACK_COMPAT,\n+                            &RUST_2021_INCOMPATIBLE_OR_PATTERNS,\n                             span,\n                             ast::CRATE_NODE_ID,\n                             \"the meaning of the `pat` fragment specifier is changing in Rust 2021, which may affect this macro\","}, {"sha": "6225b71692139da12f2c36352a01fed2b139eaf0", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7e95290caab37233eebc323351d353ecdb3ce782/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e95290caab37233eebc323351d353ecdb3ce782/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=7e95290caab37233eebc323351d353ecdb3ce782", "patch": "@@ -325,6 +325,9 @@ fn register_builtins(store: &mut LintStore, no_interleave_lints: bool) {\n     store.register_renamed(\"redundant_semicolon\", \"redundant_semicolons\");\n     store.register_renamed(\"overlapping_patterns\", \"overlapping_range_endpoints\");\n     store.register_renamed(\"safe_packed_borrows\", \"unaligned_references\");\n+    store.register_renamed(\"disjoint_capture_migration\", \"rust_2021_incompatible_closure_captures\");\n+    store.register_renamed(\"or_patterns_back_compat\", \"rust_2021_incompatible_or_patterns\");\n+    store.register_renamed(\"non_fmt_panic\", \"non_fmt_panics\");\n \n     // These were moved to tool lints, but rustc still sees them when compiling normally, before\n     // tool lints are registered, so `check_tool_name_for_backwards_compat` doesn't work. Use"}, {"sha": "99a88f6bf610d494d1bfb7a0e80ee3230a0a4007", "filename": "compiler/rustc_lint/src/non_fmt_panic.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7e95290caab37233eebc323351d353ecdb3ce782/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e95290caab37233eebc323351d353ecdb3ce782/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs?ref=7e95290caab37233eebc323351d353ecdb3ce782", "patch": "@@ -9,7 +9,7 @@ use rustc_span::edition::Edition;\n use rustc_span::{hygiene, sym, symbol::kw, symbol::SymbolStr, InnerSpan, Span, Symbol};\n \n declare_lint! {\n-    /// The `non_fmt_panic` lint detects `panic!(..)` invocations where the first\n+    /// The `non_fmt_panics` lint detects `panic!(..)` invocations where the first\n     /// argument is not a formatting string.\n     ///\n     /// ### Example\n@@ -29,7 +29,7 @@ declare_lint! {\n     /// an `i32` as message.\n     ///\n     /// Rust 2021 always interprets the first argument as format string.\n-    NON_FMT_PANIC,\n+    NON_FMT_PANICS,\n     Warn,\n     \"detect single-argument panic!() invocations in which the argument is not a format string\",\n     @future_incompatible = FutureIncompatibleInfo {\n@@ -39,7 +39,7 @@ declare_lint! {\n     report_in_external_macro\n }\n \n-declare_lint_pass!(NonPanicFmt => [NON_FMT_PANIC]);\n+declare_lint_pass!(NonPanicFmt => [NON_FMT_PANICS]);\n \n impl<'tcx> LateLintPass<'tcx> for NonPanicFmt {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'tcx>) {\n@@ -91,7 +91,7 @@ fn check_panic<'tcx>(cx: &LateContext<'tcx>, f: &'tcx hir::Expr<'tcx>, arg: &'tc\n         arg_span = expn.call_site;\n     }\n \n-    cx.struct_span_lint(NON_FMT_PANIC, arg_span, |lint| {\n+    cx.struct_span_lint(NON_FMT_PANICS, arg_span, |lint| {\n         let mut l = lint.build(\"panic message is not a string literal\");\n         l.note(\"this usage of panic!() is deprecated; it will be a hard error in Rust 2021\");\n         l.note(\"for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/panic-macro-consistency.html>\");\n@@ -174,7 +174,7 @@ fn check_panic_str<'tcx>(\n             [] => vec![fmt_span],\n             v => v.iter().map(|span| fmt_span.from_inner(*span)).collect(),\n         };\n-        cx.struct_span_lint(NON_FMT_PANIC, arg_spans, |lint| {\n+        cx.struct_span_lint(NON_FMT_PANICS, arg_spans, |lint| {\n             let mut l = lint.build(match n_arguments {\n                 1 => \"panic message contains an unused formatting placeholder\",\n                 _ => \"panic message contains unused formatting placeholders\",\n@@ -208,7 +208,7 @@ fn check_panic_str<'tcx>(\n             Some(v) if v.len() == 1 => \"panic message contains a brace\",\n             _ => \"panic message contains braces\",\n         };\n-        cx.struct_span_lint(NON_FMT_PANIC, brace_spans.unwrap_or_else(|| vec![span]), |lint| {\n+        cx.struct_span_lint(NON_FMT_PANICS, brace_spans.unwrap_or_else(|| vec![span]), |lint| {\n             let mut l = lint.build(msg);\n             l.note(\"this message is not used as a format string, but will be in Rust 2021\");\n             if span.contains(arg.span) {"}, {"sha": "01291de51bdab4024b71099f448b094ccbf0c80e", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/7e95290caab37233eebc323351d353ecdb3ce782/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e95290caab37233eebc323351d353ecdb3ce782/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=7e95290caab37233eebc323351d353ecdb3ce782", "patch": "@@ -2967,13 +2967,13 @@ declare_lint_pass! {\n         MISSING_ABI,\n         INVALID_DOC_ATTRIBUTES,\n         SEMICOLON_IN_EXPRESSIONS_FROM_MACROS,\n-        DISJOINT_CAPTURE_MIGRATION,\n+        RUST_2021_INCOMPATIBLE_CLOSURE_CAPTURES,\n         LEGACY_DERIVE_HELPERS,\n         PROC_MACRO_BACK_COMPAT,\n-        OR_PATTERNS_BACK_COMPAT,\n+        RUST_2021_INCOMPATIBLE_OR_PATTERNS,\n         LARGE_ASSIGNMENTS,\n-        FUTURE_PRELUDE_COLLISION,\n-        RESERVED_PREFIX,\n+        RUST_2021_PRELUDE_COLLISIONS,\n+        RUST_2021_PREFIXES_INCOMPATIBLE_SYNTAX,\n         UNSUPPORTED_CALLING_CONVENTIONS,\n     ]\n }\n@@ -3002,7 +3002,7 @@ declare_lint! {\n }\n \n declare_lint! {\n-    /// The `disjoint_capture_migration` lint detects variables that aren't completely\n+    /// The `rust_2021_incompatible_closure_captures` lint detects variables that aren't completely\n     /// captured in Rust 2021 and affect the Drop order of at least one path starting at this variable.\n     /// It can also detect when a variable implements a trait, but one of its field does not and\n     /// the field is captured by a closure and used with the assumption that said field implements\n@@ -3011,7 +3011,7 @@ declare_lint! {\n     /// ### Example of drop reorder\n     ///\n     /// ```rust,compile_fail\n-    /// # #![deny(disjoint_capture_migration)]\n+    /// # #![deny(rust_2021_incompatible_closure_captures)]\n     /// # #![allow(unused)]\n     /// struct FancyInteger(i32);\n     ///\n@@ -3046,7 +3046,7 @@ declare_lint! {\n     /// ### Example of auto-trait\n     ///\n     /// ```rust,compile_fail\n-    /// #![deny(disjoint_capture_migration)]\n+    /// #![deny(rust_2021_incompatible_closure_captures)]\n     /// use std::thread;\n     ///\n     /// struct Pointer(*mut i32);\n@@ -3068,7 +3068,7 @@ declare_lint! {\n     /// In the above example, only `fptr.0` is captured in Rust 2021.\n     /// The field is of type *mut i32 which doesn't implement Send, making the code invalid as the\n     /// field cannot be sent between thread safely.\n-    pub DISJOINT_CAPTURE_MIGRATION,\n+    pub RUST_2021_INCOMPATIBLE_CLOSURE_CAPTURES,\n     Allow,\n     \"detects closures affected by Rust 2021 changes\",\n     @future_incompatible = FutureIncompatibleInfo {\n@@ -3183,12 +3183,12 @@ declare_lint! {\n }\n \n declare_lint! {\n-    /// The `or_patterns_back_compat` lint detects usage of old versions of or-patterns.\n+    /// The `rust_2021_incompatible_or_patterns` lint detects usage of old versions of or-patterns.\n     ///\n     /// ### Example\n     ///\n     /// ```rust,compile_fail\n-    /// #![deny(or_patterns_back_compat)]\n+    /// #![deny(rust_2021_incompatible_or_patterns)]\n     /// macro_rules! match_any {\n     ///     ( $expr:expr , $( $( $pat:pat )|+ => $expr_arm:expr ),+ ) => {\n     ///         match $expr {\n@@ -3211,7 +3211,7 @@ declare_lint! {\n     /// ### Explanation\n     ///\n     /// In Rust 2021, the pat matcher will match new patterns, which include the | character.\n-    pub OR_PATTERNS_BACK_COMPAT,\n+    pub RUST_2021_INCOMPATIBLE_OR_PATTERNS,\n     Allow,\n     \"detects usage of old versions of or-patterns\",\n     @future_incompatible = FutureIncompatibleInfo {\n@@ -3221,13 +3221,13 @@ declare_lint! {\n }\n \n declare_lint! {\n-    /// The `future_prelude_collision` lint detects the usage of trait methods which are ambiguous\n+    /// The `rust_2021_prelude_collisions` lint detects the usage of trait methods which are ambiguous\n     /// with traits added to the prelude in future editions.\n     ///\n     /// ### Example\n     ///\n     /// ```rust,compile_fail\n-    /// #![deny(future_prelude_collision)]\n+    /// #![deny(rust_2021_prelude_collisions)]\n     ///\n     /// trait Foo {\n     ///     fn try_into(self) -> Result<String, !>;\n@@ -3259,7 +3259,7 @@ declare_lint! {\n     ///  is called directly on a type.\n     ///\n     /// [prelude changes]: https://blog.rust-lang.org/inside-rust/2021/03/04/planning-rust-2021.html#prelude-changes\n-    pub FUTURE_PRELUDE_COLLISION,\n+    pub RUST_2021_PRELUDE_COLLISIONS,\n     Allow,\n     \"detects the usage of trait methods which are ambiguous with traits added to the \\\n         prelude in future editions\",\n@@ -3270,13 +3270,13 @@ declare_lint! {\n }\n \n declare_lint! {\n-    /// The `reserved_prefix` lint detects identifiers that will be parsed as a\n+    /// The `rust_2021_prefixes_incompatible_syntax` lint detects identifiers that will be parsed as a\n     /// prefix instead in Rust 2021.\n     ///\n     /// ### Example\n     ///\n     /// ```rust,compile_fail\n-    /// #![deny(reserved_prefix)]\n+    /// #![deny(rust_2021_prefixes_incompatible_syntax)]\n     ///\n     /// macro_rules! m {\n     ///     (z $x:expr) => ();\n@@ -3295,7 +3295,7 @@ declare_lint! {\n     ///\n     /// This lint suggests to add whitespace between the `z` and `\"hey\"` tokens\n     /// to keep them separated in Rust 2021.\n-    pub RESERVED_PREFIX,\n+    pub RUST_2021_PREFIXES_INCOMPATIBLE_SYNTAX,\n     Allow,\n     \"identifiers that will be parsed as a prefix in Rust 2021\",\n     @future_incompatible = FutureIncompatibleInfo {"}, {"sha": "98befe4066bc57a334d124bf13845855e222517a", "filename": "compiler/rustc_parse/src/lexer/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e95290caab37233eebc323351d353ecdb3ce782/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e95290caab37233eebc323351d353ecdb3ce782/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs?ref=7e95290caab37233eebc323351d353ecdb3ce782", "patch": "@@ -4,7 +4,7 @@ use rustc_ast::tokenstream::{Spacing, TokenStream};\n use rustc_errors::{error_code, Applicability, DiagnosticBuilder, FatalError, PResult};\n use rustc_lexer::unescape::{self, Mode};\n use rustc_lexer::{Base, DocStyle, RawStrError};\n-use rustc_session::lint::builtin::RESERVED_PREFIX;\n+use rustc_session::lint::builtin::RUST_2021_PREFIXES_INCOMPATIBLE_SYNTAX;\n use rustc_session::lint::BuiltinLintDiagnostics;\n use rustc_session::parse::ParseSess;\n use rustc_span::symbol::{sym, Symbol};\n@@ -526,7 +526,7 @@ impl<'a> StringReader<'a> {\n         } else {\n             // Before Rust 2021, only emit a lint for migration.\n             self.sess.buffer_lint_with_diagnostic(\n-                &RESERVED_PREFIX,\n+                &RUST_2021_PREFIXES_INCOMPATIBLE_SYNTAX,\n                 prefix_span,\n                 ast::CRATE_NODE_ID,\n                 &msg,"}, {"sha": "6ca0b3ed66b3933e25198d878e998bb16033c8d7", "filename": "compiler/rustc_typeck/src/check/method/prelude2021.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7e95290caab37233eebc323351d353ecdb3ce782/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprelude2021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e95290caab37233eebc323351d353ecdb3ce782/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprelude2021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprelude2021.rs?ref=7e95290caab37233eebc323351d353ecdb3ce782", "patch": "@@ -5,7 +5,7 @@ use rustc_ast::Mutability;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_middle::ty::{Ref, Ty};\n-use rustc_session::lint::builtin::FUTURE_PRELUDE_COLLISION;\n+use rustc_session::lint::builtin::RUST_2021_PRELUDE_COLLISIONS;\n use rustc_span::symbol::kw::Underscore;\n use rustc_span::symbol::{sym, Ident};\n use rustc_span::Span;\n@@ -67,7 +67,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             // Inherent impls only require not relying on autoref and autoderef in order to\n             // ensure that the trait implementation won't be used\n             self.tcx.struct_span_lint_hir(\n-                FUTURE_PRELUDE_COLLISION,\n+                RUST_2021_PRELUDE_COLLISIONS,\n                 self_expr.hir_id,\n                 self_expr.span,\n                 |lint| {\n@@ -128,7 +128,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             // trait implementations require full disambiguation to not clash with the new prelude\n             // additions (i.e. convert from dot-call to fully-qualified call)\n             self.tcx.struct_span_lint_hir(\n-                FUTURE_PRELUDE_COLLISION,\n+                RUST_2021_PRELUDE_COLLISIONS,\n                 call_expr.hir_id,\n                 call_expr.span,\n                 |lint| {\n@@ -212,7 +212,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             return;\n         }\n \n-        self.tcx.struct_span_lint_hir(FUTURE_PRELUDE_COLLISION, expr_id, span, |lint| {\n+        self.tcx.struct_span_lint_hir(RUST_2021_PRELUDE_COLLISIONS, expr_id, span, |lint| {\n             // \"type\" refers to either a type or, more likely, a trait from which\n             // the associated function or method is from.\n             let trait_path = self.trait_path_or_bare_name(span, expr_id, pick.item.container.id());"}, {"sha": "1dcc4c2f2b8cf501d40a0806630c65049b1c42ae", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7e95290caab37233eebc323351d353ecdb3ce782/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e95290caab37233eebc323351d353ecdb3ce782/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=7e95290caab37233eebc323351d353ecdb3ce782", "patch": "@@ -173,7 +173,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         let closure_hir_id = self.tcx.hir().local_def_id_to_hir_id(local_def_id);\n \n-        if should_do_disjoint_capture_migration_analysis(self.tcx, closure_hir_id) {\n+        if should_do_rust_2021_incompatible_closure_captures_analysis(self.tcx, closure_hir_id) {\n             self.perform_2229_migration_anaysis(closure_def_id, body_id, capture_clause, span);\n         }\n \n@@ -505,7 +505,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             let local_def_id = closure_def_id.expect_local();\n             let closure_hir_id = self.tcx.hir().local_def_id_to_hir_id(local_def_id);\n             self.tcx.struct_span_lint_hir(\n-                lint::builtin::DISJOINT_CAPTURE_MIGRATION,\n+                lint::builtin::RUST_2021_INCOMPATIBLE_CLOSURE_CAPTURES,\n                 closure_hir_id,\n                 span,\n                 |lint| {\n@@ -1829,8 +1829,12 @@ fn var_name(tcx: TyCtxt<'_>, var_hir_id: hir::HirId) -> Symbol {\n     tcx.hir().name(var_hir_id)\n }\n \n-fn should_do_disjoint_capture_migration_analysis(tcx: TyCtxt<'_>, closure_id: hir::HirId) -> bool {\n-    let (level, _) = tcx.lint_level_at_node(lint::builtin::DISJOINT_CAPTURE_MIGRATION, closure_id);\n+fn should_do_rust_2021_incompatible_closure_captures_analysis(\n+    tcx: TyCtxt<'_>,\n+    closure_id: hir::HirId,\n+) -> bool {\n+    let (level, _) =\n+        tcx.lint_level_at_node(lint::builtin::RUST_2021_INCOMPATIBLE_CLOSURE_CAPTURES, closure_id);\n \n     !matches!(level, lint::Level::Allow)\n }"}, {"sha": "3557dbad90cc215f01af0e199f63879b0c2a3183", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7e95290caab37233eebc323351d353ecdb3ce782/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e95290caab37233eebc323351d353ecdb3ce782/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=7e95290caab37233eebc323351d353ecdb3ce782", "patch": "@@ -164,7 +164,8 @@\n #![feature(no_niche)] // rust-lang/rust#68303\n #![feature(no_coverage)] // rust-lang/rust#84605\n #![deny(unsafe_op_in_unsafe_fn)]\n-#![deny(or_patterns_back_compat)]\n+#![cfg_attr(bootstrap, deny(or_patterns_back_compat))]\n+#![cfg_attr(not(bootstrap), deny(rust_2021_incompatible_or_patterns))]\n \n // allow using `core::` in intra-doc links\n #[allow(unused_extern_crates)]"}, {"sha": "134d07c400b3abf8554504ed7f3d4f36334521d7", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/auto_traits.fixed", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.fixed?ref=7e95290caab37233eebc323351d353ecdb3ce782", "patch": "@@ -1,10 +1,10 @@\n // run-rustfix\n-#![deny(disjoint_capture_migration)]\n+#![deny(rust_2021_incompatible_closure_captures)]\n \n use std::thread;\n \n /* Test Send Trait Migration */\n-struct SendPointer (*mut i32);\n+struct SendPointer(*mut i32);\n unsafe impl Send for SendPointer {}\n \n fn test_send_trait() {\n@@ -18,8 +18,8 @@ fn test_send_trait() {\n }\n \n /* Test Sync Trait Migration */\n-struct CustomInt (*mut i32);\n-struct SyncPointer (CustomInt);\n+struct CustomInt(*mut i32);\n+struct SyncPointer(CustomInt);\n unsafe impl Sync for SyncPointer {}\n unsafe impl Send for CustomInt {}\n \n@@ -38,7 +38,7 @@ fn test_sync_trait() {\n struct S(String);\n struct T(i32);\n \n-struct U(S,T);\n+struct U(S, T);\n \n impl Clone for U {\n     fn clone(&self) -> Self {"}, {"sha": "b48a724f052f0afb46461c91cfafa4c5b7e7d364", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/auto_traits.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.rs?ref=7e95290caab37233eebc323351d353ecdb3ce782", "patch": "@@ -1,10 +1,10 @@\n // run-rustfix\n-#![deny(disjoint_capture_migration)]\n+#![deny(rust_2021_incompatible_closure_captures)]\n \n use std::thread;\n \n /* Test Send Trait Migration */\n-struct SendPointer (*mut i32);\n+struct SendPointer(*mut i32);\n unsafe impl Send for SendPointer {}\n \n fn test_send_trait() {\n@@ -18,8 +18,8 @@ fn test_send_trait() {\n }\n \n /* Test Sync Trait Migration */\n-struct CustomInt (*mut i32);\n-struct SyncPointer (CustomInt);\n+struct CustomInt(*mut i32);\n+struct SyncPointer(CustomInt);\n unsafe impl Sync for SyncPointer {}\n unsafe impl Send for CustomInt {}\n \n@@ -38,7 +38,7 @@ fn test_sync_trait() {\n struct S(String);\n struct T(i32);\n \n-struct U(S,T);\n+struct U(S, T);\n \n impl Clone for U {\n     fn clone(&self) -> Self {"}, {"sha": "3d3dde15412bf30d2dac82f08b7c5468608f4511", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/auto_traits.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fauto_traits.stderr?ref=7e95290caab37233eebc323351d353ecdb3ce782", "patch": "@@ -12,8 +12,8 @@ LL | |     });\n note: the lint level is defined here\n   --> $DIR/auto_traits.rs:2:9\n    |\n-LL | #![deny(disjoint_capture_migration)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #![deny(rust_2021_incompatible_closure_captures)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `fptr` to be fully captured\n    |"}, {"sha": "51d9c4881af3fdec51e10e3f6aae778c01adc32a", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/insignificant_drop.fixed", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.fixed?ref=7e95290caab37233eebc323351d353ecdb3ce782", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n \n-#![deny(disjoint_capture_migration)]\n+#![deny(rust_2021_incompatible_closure_captures)]\n //~^ NOTE: the lint level is defined here\n \n // Test cases for types that implement a insignificant drop (stlib defined)\n@@ -13,9 +13,9 @@ fn test1_all_need_migration() {\n     let t2 = (String::new(), String::new());\n \n     let c = || { let _ = (&t, &t1, &t2); \n-    //~^ ERROR: drop order\n-    //~| NOTE: for more information, see\n-    //~| HELP: add a dummy let to cause `t`, `t1`, `t2` to be fully captured\n+        //~^ ERROR: drop order\n+        //~| NOTE: for more information, see\n+        //~| HELP: add a dummy let to cause `t`, `t1`, `t2` to be fully captured\n \n         let _t = t.0;\n         let _t1 = t1.0;\n@@ -33,9 +33,9 @@ fn test2_only_precise_paths_need_migration() {\n     let t2 = (String::new(), String::new());\n \n     let c = || { let _ = (&t, &t1); \n-    //~^ ERROR: drop order\n-    //~| NOTE: for more information, see\n-    //~| HELP: add a dummy let to cause `t`, `t1` to be fully captured\n+        //~^ ERROR: drop order\n+        //~| NOTE: for more information, see\n+        //~| HELP: add a dummy let to cause `t`, `t1` to be fully captured\n         let _t = t.0;\n         let _t1 = t1.0;\n         let _t2 = t2;\n@@ -50,9 +50,9 @@ fn test3_only_by_value_need_migration() {\n     let t = (String::new(), String::new());\n     let t1 = (String::new(), String::new());\n     let c = || { let _ = &t; \n-    //~^ ERROR: drop order\n-    //~| NOTE: for more information, see\n-    //~| HELP: add a dummy let to cause `t` to be fully captured\n+        //~^ ERROR: drop order\n+        //~| NOTE: for more information, see\n+        //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n         println!(\"{}\", t1.1);\n     };\n@@ -69,9 +69,9 @@ fn test4_only_non_copy_types_need_migration() {\n     let t1 = (0i32, 0i32);\n \n     let c = || { let _ = &t; \n-    //~^ ERROR: drop order\n-    //~| NOTE: for more information, see\n-    //~| HELP: add a dummy let to cause `t` to be fully captured\n+        //~^ ERROR: drop order\n+        //~| NOTE: for more information, see\n+        //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n         let _t1 = t1.0;\n     };\n@@ -88,9 +88,9 @@ fn test5_only_drop_types_need_migration() {\n     let s = S(0i32, 0i32);\n \n     let c = || { let _ = &t; \n-    //~^ ERROR: drop order\n-    //~| NOTE: for more information, see\n-    //~| HELP: add a dummy let to cause `t` to be fully captured\n+        //~^ ERROR: drop order\n+        //~| NOTE: for more information, see\n+        //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n         let _s = s.0;\n     };\n@@ -104,9 +104,9 @@ fn test6_move_closures_non_copy_types_might_need_migration() {\n     let t = (String::new(), String::new());\n     let t1 = (String::new(), String::new());\n     let c = move || { let _ = (&t1, &t); \n-    //~^ ERROR: drop order\n-    //~| NOTE: for more information, see\n-    //~| HELP: add a dummy let to cause `t1`, `t` to be fully captured\n+        //~^ ERROR: drop order\n+        //~| NOTE: for more information, see\n+        //~| HELP: add a dummy let to cause `t1`, `t` to be fully captured\n         println!(\"{} {}\", t1.1, t.1);\n     };\n \n@@ -120,9 +120,9 @@ fn test7_drop_non_drop_aggregate_need_migration() {\n     let t = (String::new(), String::new(), 0i32);\n \n     let c = || { let _ = &t; \n-    //~^ ERROR: drop order\n-    //~| NOTE: for more information, see\n-    //~| HELP: add a dummy let to cause `t` to be fully captured\n+        //~^ ERROR: drop order\n+        //~| NOTE: for more information, see\n+        //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n     };\n "}, {"sha": "c732cbb4fa51e0057cb18529f94a084ea1ce6a0e", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/insignificant_drop.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.rs?ref=7e95290caab37233eebc323351d353ecdb3ce782", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n \n-#![deny(disjoint_capture_migration)]\n+#![deny(rust_2021_incompatible_closure_captures)]\n //~^ NOTE: the lint level is defined here\n \n // Test cases for types that implement a insignificant drop (stlib defined)\n@@ -13,9 +13,9 @@ fn test1_all_need_migration() {\n     let t2 = (String::new(), String::new());\n \n     let c = || {\n-    //~^ ERROR: drop order\n-    //~| NOTE: for more information, see\n-    //~| HELP: add a dummy let to cause `t`, `t1`, `t2` to be fully captured\n+        //~^ ERROR: drop order\n+        //~| NOTE: for more information, see\n+        //~| HELP: add a dummy let to cause `t`, `t1`, `t2` to be fully captured\n \n         let _t = t.0;\n         let _t1 = t1.0;\n@@ -33,9 +33,9 @@ fn test2_only_precise_paths_need_migration() {\n     let t2 = (String::new(), String::new());\n \n     let c = || {\n-    //~^ ERROR: drop order\n-    //~| NOTE: for more information, see\n-    //~| HELP: add a dummy let to cause `t`, `t1` to be fully captured\n+        //~^ ERROR: drop order\n+        //~| NOTE: for more information, see\n+        //~| HELP: add a dummy let to cause `t`, `t1` to be fully captured\n         let _t = t.0;\n         let _t1 = t1.0;\n         let _t2 = t2;\n@@ -50,9 +50,9 @@ fn test3_only_by_value_need_migration() {\n     let t = (String::new(), String::new());\n     let t1 = (String::new(), String::new());\n     let c = || {\n-    //~^ ERROR: drop order\n-    //~| NOTE: for more information, see\n-    //~| HELP: add a dummy let to cause `t` to be fully captured\n+        //~^ ERROR: drop order\n+        //~| NOTE: for more information, see\n+        //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n         println!(\"{}\", t1.1);\n     };\n@@ -69,9 +69,9 @@ fn test4_only_non_copy_types_need_migration() {\n     let t1 = (0i32, 0i32);\n \n     let c = || {\n-    //~^ ERROR: drop order\n-    //~| NOTE: for more information, see\n-    //~| HELP: add a dummy let to cause `t` to be fully captured\n+        //~^ ERROR: drop order\n+        //~| NOTE: for more information, see\n+        //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n         let _t1 = t1.0;\n     };\n@@ -88,9 +88,9 @@ fn test5_only_drop_types_need_migration() {\n     let s = S(0i32, 0i32);\n \n     let c = || {\n-    //~^ ERROR: drop order\n-    //~| NOTE: for more information, see\n-    //~| HELP: add a dummy let to cause `t` to be fully captured\n+        //~^ ERROR: drop order\n+        //~| NOTE: for more information, see\n+        //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n         let _s = s.0;\n     };\n@@ -104,9 +104,9 @@ fn test6_move_closures_non_copy_types_might_need_migration() {\n     let t = (String::new(), String::new());\n     let t1 = (String::new(), String::new());\n     let c = move || {\n-    //~^ ERROR: drop order\n-    //~| NOTE: for more information, see\n-    //~| HELP: add a dummy let to cause `t1`, `t` to be fully captured\n+        //~^ ERROR: drop order\n+        //~| NOTE: for more information, see\n+        //~| HELP: add a dummy let to cause `t1`, `t` to be fully captured\n         println!(\"{} {}\", t1.1, t.1);\n     };\n \n@@ -120,9 +120,9 @@ fn test7_drop_non_drop_aggregate_need_migration() {\n     let t = (String::new(), String::new(), 0i32);\n \n     let c = || {\n-    //~^ ERROR: drop order\n-    //~| NOTE: for more information, see\n-    //~| HELP: add a dummy let to cause `t` to be fully captured\n+        //~^ ERROR: drop order\n+        //~| NOTE: for more information, see\n+        //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n     };\n "}, {"sha": "89a2b0eb95366b5bd3a342433f8d3cdf668bf2f6", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/insignificant_drop.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop.stderr?ref=7e95290caab37233eebc323351d353ecdb3ce782", "patch": "@@ -14,8 +14,8 @@ LL | |     };\n note: the lint level is defined here\n   --> $DIR/insignificant_drop.rs:3:9\n    |\n-LL | #![deny(disjoint_capture_migration)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #![deny(rust_2021_incompatible_closure_captures)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t`, `t1`, `t2` to be fully captured\n    |"}, {"sha": "8c85cd990d308d865795828ab2e2703a6535442e", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/insignificant_drop_attr_migrations.fixed", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.fixed?ref=7e95290caab37233eebc323351d353ecdb3ce782", "patch": "@@ -1,8 +1,7 @@\n // run-rustfix\n \n-#![deny(disjoint_capture_migration)]\n+#![deny(rust_2021_incompatible_closure_captures)]\n //~^ NOTE: the lint level is defined here\n-\n #![feature(rustc_attrs)]\n #![allow(unused)]\n \n@@ -36,9 +35,9 @@ fn significant_drop_needs_migration() {\n     let t = (SigDrop {}, SigDrop {});\n \n     let c = || { let _ = &t; \n-    //~^ ERROR: drop order\n-    //~| NOTE: for more information, see\n-    //~| HELP: add a dummy let to cause `t` to be fully captured\n+        //~^ ERROR: drop order\n+        //~| NOTE: for more information, see\n+        //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n     };\n \n@@ -54,9 +53,9 @@ fn generic_struct_with_significant_drop_needs_migration() {\n \n     // move is used to force i32 to be copied instead of being a ref\n     let c = move || { let _ = &t; \n-    //~^ ERROR: drop order\n-    //~| NOTE: for more information, see\n-    //~| HELP: add a dummy let to cause `t` to be fully captured\n+        //~^ ERROR: drop order\n+        //~| NOTE: for more information, see\n+        //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.1;\n     };\n "}, {"sha": "17cee28e3111738a78e9e85b3eb6ca3d16150974", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/insignificant_drop_attr_migrations.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.rs?ref=7e95290caab37233eebc323351d353ecdb3ce782", "patch": "@@ -1,8 +1,7 @@\n // run-rustfix\n \n-#![deny(disjoint_capture_migration)]\n+#![deny(rust_2021_incompatible_closure_captures)]\n //~^ NOTE: the lint level is defined here\n-\n #![feature(rustc_attrs)]\n #![allow(unused)]\n \n@@ -36,9 +35,9 @@ fn significant_drop_needs_migration() {\n     let t = (SigDrop {}, SigDrop {});\n \n     let c = || {\n-    //~^ ERROR: drop order\n-    //~| NOTE: for more information, see\n-    //~| HELP: add a dummy let to cause `t` to be fully captured\n+        //~^ ERROR: drop order\n+        //~| NOTE: for more information, see\n+        //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n     };\n \n@@ -54,9 +53,9 @@ fn generic_struct_with_significant_drop_needs_migration() {\n \n     // move is used to force i32 to be copied instead of being a ref\n     let c = move || {\n-    //~^ ERROR: drop order\n-    //~| NOTE: for more information, see\n-    //~| HELP: add a dummy let to cause `t` to be fully captured\n+        //~^ ERROR: drop order\n+        //~| NOTE: for more information, see\n+        //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.1;\n     };\n "}, {"sha": "1d3bda03d0e164923a9a869c9ef116003ad7abf3", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/insignificant_drop_attr_migrations.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_migrations.stderr?ref=7e95290caab37233eebc323351d353ecdb3ce782", "patch": "@@ -1,5 +1,5 @@\n error: drop order will change in Rust 2021\n-  --> $DIR/insignificant_drop_attr_migrations.rs:38:13\n+  --> $DIR/insignificant_drop_attr_migrations.rs:37:13\n    |\n LL |       let c = || {\n    |  _____________^\n@@ -13,8 +13,8 @@ LL | |     };\n note: the lint level is defined here\n   --> $DIR/insignificant_drop_attr_migrations.rs:3:9\n    |\n-LL | #![deny(disjoint_capture_migration)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #![deny(rust_2021_incompatible_closure_captures)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured\n    |\n@@ -27,7 +27,7 @@ LL |     };\n    |\n \n error: drop order will change in Rust 2021\n-  --> $DIR/insignificant_drop_attr_migrations.rs:56:13\n+  --> $DIR/insignificant_drop_attr_migrations.rs:55:13\n    |\n LL |       let c = move || {\n    |  _____________^"}, {"sha": "a527bf42e574a7b8ce1ccf6140980854ba9e8210", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/insignificant_drop_attr_no_migrations.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_no_migrations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_no_migrations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Finsignificant_drop_attr_no_migrations.rs?ref=7e95290caab37233eebc323351d353ecdb3ce782", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n \n-#![deny(disjoint_capture_migration)]\n+#![deny(rust_2021_incompatible_closure_captures)]\n #![feature(rustc_attrs)]\n #![allow(unused)]\n "}, {"sha": "ff5d284614bf1390d207e690b0c5bb0614ebb213", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/issue-78720.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fissue-78720.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fissue-78720.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fissue-78720.rs?ref=7e95290caab37233eebc323351d353ecdb3ce782", "patch": "@@ -1,10 +1,10 @@\n // run-pass\n \n-#![warn(disjoint_capture_migration)]\n+#![warn(rust_2021_incompatible_closure_captures)]\n \n fn main() {\n     if let a = \"\" {\n-    //~^ WARNING: irrefutable `if let` pattern\n+        //~^ WARNING: irrefutable `if let` pattern\n         drop(|_: ()| drop(a));\n     }\n }"}, {"sha": "c974299c1536bd85c516c7afbdcb42c3894cc495", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/migrations_rustfix.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.fixed?ref=7e95290caab37233eebc323351d353ecdb3ce782", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-#![deny(disjoint_capture_migration)]\n+#![deny(rust_2021_incompatible_closure_captures)]\n //~^ NOTE: the lint level is defined here\n \n // Test the two possible cases for automated migartion using rustfix"}, {"sha": "dd9556aa56784c1b6d7d731b9e1f5fced7218ca5", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/migrations_rustfix.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.rs?ref=7e95290caab37233eebc323351d353ecdb3ce782", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-#![deny(disjoint_capture_migration)]\n+#![deny(rust_2021_incompatible_closure_captures)]\n //~^ NOTE: the lint level is defined here\n \n // Test the two possible cases for automated migartion using rustfix"}, {"sha": "2d5e5e5e55c1413cca14c6fd9fa36169ec1ac4e4", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/migrations_rustfix.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmigrations_rustfix.stderr?ref=7e95290caab37233eebc323351d353ecdb3ce782", "patch": "@@ -13,8 +13,8 @@ LL | |     };\n note: the lint level is defined here\n   --> $DIR/migrations_rustfix.rs:2:9\n    |\n-LL | #![deny(disjoint_capture_migration)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #![deny(rust_2021_incompatible_closure_captures)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured\n    |"}, {"sha": "7f49b460ef63a1f8b1d6bb5a589c1c97661cef25", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/mir_calls_to_shims.fixed", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.fixed?ref=7e95290caab37233eebc323351d353ecdb3ce782", "patch": "@@ -1,16 +1,20 @@\n // run-rustfix\n \n-#![deny(disjoint_capture_migration)]\n+#![deny(rust_2021_incompatible_closure_captures)]\n // ignore-wasm32-bare compiled with panic=abort by default\n-\n #![feature(fn_traits)]\n #![feature(never_type)]\n \n use std::panic;\n \n-fn foo_diverges() -> ! { panic!() }\n+fn foo_diverges() -> ! {\n+    panic!()\n+}\n \n-fn assert_panics<F>(f: F) where F: FnOnce() {\n+fn assert_panics<F>(f: F)\n+where\n+    F: FnOnce(),\n+{\n     let f = panic::AssertUnwindSafe(f);\n     let result = panic::catch_unwind(move || { let _ = &f; \n         //~^ ERROR: `UnwindSafe`, `RefUnwindSafe` trait implementation\n@@ -23,7 +27,8 @@ fn assert_panics<F>(f: F) where F: FnOnce() {\n }\n \n fn test_fn_ptr_panic<T>(mut t: T)\n-    where T: Fn() -> !\n+where\n+    T: Fn() -> !,\n {\n     let as_fn = <T as Fn<()>>::call;\n     assert_panics(|| as_fn(&t, ()));"}, {"sha": "3c654bec52605c8f051bee736c27e84522e32fd8", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/mir_calls_to_shims.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.rs?ref=7e95290caab37233eebc323351d353ecdb3ce782", "patch": "@@ -1,16 +1,20 @@\n // run-rustfix\n \n-#![deny(disjoint_capture_migration)]\n+#![deny(rust_2021_incompatible_closure_captures)]\n // ignore-wasm32-bare compiled with panic=abort by default\n-\n #![feature(fn_traits)]\n #![feature(never_type)]\n \n use std::panic;\n \n-fn foo_diverges() -> ! { panic!() }\n+fn foo_diverges() -> ! {\n+    panic!()\n+}\n \n-fn assert_panics<F>(f: F) where F: FnOnce() {\n+fn assert_panics<F>(f: F)\n+where\n+    F: FnOnce(),\n+{\n     let f = panic::AssertUnwindSafe(f);\n     let result = panic::catch_unwind(move || {\n         //~^ ERROR: `UnwindSafe`, `RefUnwindSafe` trait implementation\n@@ -23,7 +27,8 @@ fn assert_panics<F>(f: F) where F: FnOnce() {\n }\n \n fn test_fn_ptr_panic<T>(mut t: T)\n-    where T: Fn() -> !\n+where\n+    T: Fn() -> !,\n {\n     let as_fn = <T as Fn<()>>::call;\n     assert_panics(|| as_fn(&t, ()));"}, {"sha": "dca5c454b83beaacd5fe86ade3a37c68f2ea1d33", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/mir_calls_to_shims.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fmir_calls_to_shims.stderr?ref=7e95290caab37233eebc323351d353ecdb3ce782", "patch": "@@ -1,5 +1,5 @@\n error: `UnwindSafe`, `RefUnwindSafe` trait implementation will change in Rust 2021\n-  --> $DIR/mir_calls_to_shims.rs:15:38\n+  --> $DIR/mir_calls_to_shims.rs:19:38\n    |\n LL |       let result = panic::catch_unwind(move || {\n    |  ______________________________________^\n@@ -12,8 +12,8 @@ LL | |     });\n note: the lint level is defined here\n   --> $DIR/mir_calls_to_shims.rs:3:9\n    |\n-LL | #![deny(disjoint_capture_migration)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #![deny(rust_2021_incompatible_closure_captures)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `f` to be fully captured\n    |"}, {"sha": "8b75e226ab59bcf2ee64ca663b38d7913c570dac", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/no_migrations.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fno_migrations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fno_migrations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fno_migrations.rs?ref=7e95290caab37233eebc323351d353ecdb3ce782", "patch": "@@ -2,8 +2,7 @@\n \n // Set of test cases that don't need migrations\n \n-#![deny(disjoint_capture_migration)]\n-\n+#![deny(rust_2021_incompatible_closure_captures)]\n \n // Copy types as copied by the closure instead of being moved into the closure\n // Therefore their drop order isn't tied to the closure and won't be requiring any\n@@ -53,7 +52,6 @@ fn test4_insignificant_drop_non_drop_aggregate() {\n     c();\n }\n \n-\n struct Foo(i32);\n impl Drop for Foo {\n     fn drop(&mut self) {\n@@ -80,5 +78,4 @@ fn main() {\n     test3_only_copy_types_move_closure();\n     test4_insignificant_drop_non_drop_aggregate();\n     test5_significant_drop_non_drop_aggregate();\n-\n }"}, {"sha": "16e3cca7b7714703ae5a0e786a3f201588d5d146", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/old_name.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fold_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fold_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fold_name.rs?ref=7e95290caab37233eebc323351d353ecdb3ce782", "patch": "@@ -0,0 +1,9 @@\n+// check-pass\n+\n+// Ensure that the old name for `rust_2021_incompatible_closure_captures` is still\n+// accepted by the compiler\n+\n+#![allow(disjoint_capture_migration)]\n+//~^ WARN lint `disjoint_capture_migration` has been renamed\n+\n+fn main() {}"}, {"sha": "47cb689fa019375a9dc785627c2dda8d6ff84926", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/old_name.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fold_name.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fold_name.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fold_name.stderr?ref=7e95290caab37233eebc323351d353ecdb3ce782", "patch": "@@ -0,0 +1,10 @@\n+warning: lint `disjoint_capture_migration` has been renamed to `rust_2021_incompatible_closure_captures`\n+  --> $DIR/old_name.rs:6:10\n+   |\n+LL | #![allow(disjoint_capture_migration)]\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `rust_2021_incompatible_closure_captures`\n+   |\n+   = note: `#[warn(renamed_and_removed_lints)]` on by default\n+\n+warning: 1 warning emitted\n+"}, {"sha": "ba5e5b573f1d66be3358e5a858e3b75cbc70a8cd", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/precise.fixed", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.fixed?ref=7e95290caab37233eebc323351d353ecdb3ce782", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n \n-#![deny(disjoint_capture_migration)]\n+#![deny(rust_2021_incompatible_closure_captures)]\n \n #[derive(Debug)]\n struct Foo(i32);\n@@ -17,8 +17,8 @@ fn test_precise_analysis_drop_paths_not_captured_by_move() {\n     let t = ConstainsDropField(Foo(10), Foo(20));\n \n     let c = || { let _ = &t; \n-    //~^ ERROR: drop order\n-    //~| HELP: add a dummy let to cause `t` to be fully captured\n+        //~^ ERROR: drop order\n+        //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n         let _t = &t.1;\n     };\n@@ -28,8 +28,7 @@ fn test_precise_analysis_drop_paths_not_captured_by_move() {\n \n struct S;\n impl Drop for S {\n-    fn drop(&mut self) {\n-    }\n+    fn drop(&mut self) {}\n }\n \n struct T(S, S);\n@@ -40,8 +39,8 @@ fn test_precise_analysis_long_path_missing() {\n     let u = U(T(S, S), T(S, S));\n \n     let c = || { let _ = &u; \n-    //~^ ERROR: drop order\n-    //~| HELP: add a dummy let to cause `u` to be fully captured\n+        //~^ ERROR: drop order\n+        //~| HELP: add a dummy let to cause `u` to be fully captured\n         let _x = u.0.0;\n         let _x = u.0.1;\n         let _x = u.1.0;"}, {"sha": "92b6f25c80dad71a36ba919d2d02651983343a46", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/precise.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.rs?ref=7e95290caab37233eebc323351d353ecdb3ce782", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n \n-#![deny(disjoint_capture_migration)]\n+#![deny(rust_2021_incompatible_closure_captures)]\n \n #[derive(Debug)]\n struct Foo(i32);\n@@ -17,8 +17,8 @@ fn test_precise_analysis_drop_paths_not_captured_by_move() {\n     let t = ConstainsDropField(Foo(10), Foo(20));\n \n     let c = || {\n-    //~^ ERROR: drop order\n-    //~| HELP: add a dummy let to cause `t` to be fully captured\n+        //~^ ERROR: drop order\n+        //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n         let _t = &t.1;\n     };\n@@ -28,8 +28,7 @@ fn test_precise_analysis_drop_paths_not_captured_by_move() {\n \n struct S;\n impl Drop for S {\n-    fn drop(&mut self) {\n-    }\n+    fn drop(&mut self) {}\n }\n \n struct T(S, S);\n@@ -40,8 +39,8 @@ fn test_precise_analysis_long_path_missing() {\n     let u = U(T(S, S), T(S, S));\n \n     let c = || {\n-    //~^ ERROR: drop order\n-    //~| HELP: add a dummy let to cause `u` to be fully captured\n+        //~^ ERROR: drop order\n+        //~| HELP: add a dummy let to cause `u` to be fully captured\n         let _x = u.0.0;\n         let _x = u.0.1;\n         let _x = u.1.0;"}, {"sha": "2788207296f1166242c445118687fa0c1ee1d101", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/precise.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise.stderr?ref=7e95290caab37233eebc323351d353ecdb3ce782", "patch": "@@ -13,8 +13,8 @@ LL | |     };\n note: the lint level is defined here\n   --> $DIR/precise.rs:3:9\n    |\n-LL | #![deny(disjoint_capture_migration)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #![deny(rust_2021_incompatible_closure_captures)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t` to be fully captured\n    |\n@@ -27,7 +27,7 @@ LL |     };\n    |\n \n error: drop order will change in Rust 2021\n-  --> $DIR/precise.rs:42:13\n+  --> $DIR/precise.rs:41:13\n    |\n LL |       let c = || {\n    |  _____________^"}, {"sha": "587d71c40fc6986d06364ae4ec36c3ddd0abd517", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/precise_no_migrations.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise_no_migrations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise_no_migrations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fprecise_no_migrations.rs?ref=7e95290caab37233eebc323351d353ecdb3ce782", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n \n-#![deny(disjoint_capture_migration)]\n+#![deny(rust_2021_incompatible_closure_captures)]\n \n #[derive(Debug)]\n struct Foo(i32);\n@@ -73,8 +73,7 @@ fn test_precise_analysis_parent_captured_2() {\n \n struct S;\n impl Drop for S {\n-    fn drop(&mut self) {\n-    }\n+    fn drop(&mut self) {}\n }\n \n struct T(S, S);"}, {"sha": "58ed2de26b3a772217a43285efe7b1cc43cf77da", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/significant_drop.fixed", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.fixed?ref=7e95290caab37233eebc323351d353ecdb3ce782", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-#![deny(disjoint_capture_migration)]\n+#![deny(rust_2021_incompatible_closure_captures)]\n //~^ NOTE: the lint level is defined here\n \n // Test cases for types that implement a significant drop (user defined)\n@@ -23,9 +23,9 @@ fn test1_all_need_migration() {\n     let t2 = (Foo(0), Foo(0));\n \n     let c = || { let _ = (&t, &t1, &t2); \n-    //~^ ERROR: drop order\n-    //~| NOTE: for more information, see\n-    //~| HELP: add a dummy let to cause `t`, `t1`, `t2` to be fully captured\n+        //~^ ERROR: drop order\n+        //~| NOTE: for more information, see\n+        //~| HELP: add a dummy let to cause `t`, `t1`, `t2` to be fully captured\n         let _t = t.0;\n         let _t1 = t1.0;\n         let _t2 = t2.0;\n@@ -42,9 +42,9 @@ fn test2_only_precise_paths_need_migration() {\n     let t2 = (Foo(0), Foo(0));\n \n     let c = || { let _ = (&t, &t1); \n-    //~^ ERROR: drop order\n-    //~| NOTE: for more information, see\n-    //~| HELP: add a dummy let to cause `t`, `t1` to be fully captured\n+        //~^ ERROR: drop order\n+        //~| NOTE: for more information, see\n+        //~| HELP: add a dummy let to cause `t`, `t1` to be fully captured\n         let _t = t.0;\n         let _t1 = t1.0;\n         let _t2 = t2;\n@@ -59,9 +59,9 @@ fn test3_only_by_value_need_migration() {\n     let t = (Foo(0), Foo(0));\n     let t1 = (Foo(0), Foo(0));\n     let c = || { let _ = &t; \n-    //~^ ERROR: drop order\n-    //~| NOTE: for more information, see\n-    //~| HELP: add a dummy let to cause `t` to be fully captured\n+        //~^ ERROR: drop order\n+        //~| NOTE: for more information, see\n+        //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n         println!(\"{:?}\", t1.1);\n     };\n@@ -77,9 +77,9 @@ fn test4_type_contains_drop_need_migration() {\n     let t = ConstainsDropField(Foo(0), Foo(0));\n \n     let c = || { let _ = &t; \n-    //~^ ERROR: drop order\n-    //~| NOTE: for more information, see\n-    //~| HELP: add a dummy let to cause `t` to be fully captured\n+        //~^ ERROR: drop order\n+        //~| NOTE: for more information, see\n+        //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n     };\n \n@@ -93,9 +93,9 @@ fn test5_drop_non_drop_aggregate_need_migration() {\n     let t = (Foo(0), Foo(0), 0i32);\n \n     let c = || { let _ = &t; \n-    //~^ ERROR: drop order\n-    //~| NOTE: for more information, see\n-    //~| HELP: add a dummy let to cause `t` to be fully captured\n+        //~^ ERROR: drop order\n+        //~| NOTE: for more information, see\n+        //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n     };\n \n@@ -107,9 +107,9 @@ fn test6_significant_insignificant_drop_aggregate_need_migration() {\n     let t = (Foo(0), String::new());\n \n     let c = || { let _ = &t; \n-    //~^ ERROR: drop order\n-    //~| NOTE: for more information, see\n-    //~| HELP: add a dummy let to cause `t` to be fully captured\n+        //~^ ERROR: drop order\n+        //~| NOTE: for more information, see\n+        //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.1;\n     };\n \n@@ -123,9 +123,9 @@ fn test7_move_closures_non_copy_types_might_need_migration() {\n     let t1 = (Foo(0), Foo(0), Foo(0));\n \n     let c = move || { let _ = (&t1, &t); \n-    //~^ ERROR: drop order\n-    //~| NOTE: for more information, see\n-    //~| HELP: add a dummy let to cause `t1`, `t` to be fully captured\n+        //~^ ERROR: drop order\n+        //~| NOTE: for more information, see\n+        //~| HELP: add a dummy let to cause `t1`, `t` to be fully captured\n         println!(\"{:?} {:?}\", t1.1, t.1);\n     };\n "}, {"sha": "0890fc1c21256046597d6d6e7850377d492772a2", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/significant_drop.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.rs?ref=7e95290caab37233eebc323351d353ecdb3ce782", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-#![deny(disjoint_capture_migration)]\n+#![deny(rust_2021_incompatible_closure_captures)]\n //~^ NOTE: the lint level is defined here\n \n // Test cases for types that implement a significant drop (user defined)\n@@ -23,9 +23,9 @@ fn test1_all_need_migration() {\n     let t2 = (Foo(0), Foo(0));\n \n     let c = || {\n-    //~^ ERROR: drop order\n-    //~| NOTE: for more information, see\n-    //~| HELP: add a dummy let to cause `t`, `t1`, `t2` to be fully captured\n+        //~^ ERROR: drop order\n+        //~| NOTE: for more information, see\n+        //~| HELP: add a dummy let to cause `t`, `t1`, `t2` to be fully captured\n         let _t = t.0;\n         let _t1 = t1.0;\n         let _t2 = t2.0;\n@@ -42,9 +42,9 @@ fn test2_only_precise_paths_need_migration() {\n     let t2 = (Foo(0), Foo(0));\n \n     let c = || {\n-    //~^ ERROR: drop order\n-    //~| NOTE: for more information, see\n-    //~| HELP: add a dummy let to cause `t`, `t1` to be fully captured\n+        //~^ ERROR: drop order\n+        //~| NOTE: for more information, see\n+        //~| HELP: add a dummy let to cause `t`, `t1` to be fully captured\n         let _t = t.0;\n         let _t1 = t1.0;\n         let _t2 = t2;\n@@ -59,9 +59,9 @@ fn test3_only_by_value_need_migration() {\n     let t = (Foo(0), Foo(0));\n     let t1 = (Foo(0), Foo(0));\n     let c = || {\n-    //~^ ERROR: drop order\n-    //~| NOTE: for more information, see\n-    //~| HELP: add a dummy let to cause `t` to be fully captured\n+        //~^ ERROR: drop order\n+        //~| NOTE: for more information, see\n+        //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n         println!(\"{:?}\", t1.1);\n     };\n@@ -77,9 +77,9 @@ fn test4_type_contains_drop_need_migration() {\n     let t = ConstainsDropField(Foo(0), Foo(0));\n \n     let c = || {\n-    //~^ ERROR: drop order\n-    //~| NOTE: for more information, see\n-    //~| HELP: add a dummy let to cause `t` to be fully captured\n+        //~^ ERROR: drop order\n+        //~| NOTE: for more information, see\n+        //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n     };\n \n@@ -93,9 +93,9 @@ fn test5_drop_non_drop_aggregate_need_migration() {\n     let t = (Foo(0), Foo(0), 0i32);\n \n     let c = || {\n-    //~^ ERROR: drop order\n-    //~| NOTE: for more information, see\n-    //~| HELP: add a dummy let to cause `t` to be fully captured\n+        //~^ ERROR: drop order\n+        //~| NOTE: for more information, see\n+        //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.0;\n     };\n \n@@ -107,9 +107,9 @@ fn test6_significant_insignificant_drop_aggregate_need_migration() {\n     let t = (Foo(0), String::new());\n \n     let c = || {\n-    //~^ ERROR: drop order\n-    //~| NOTE: for more information, see\n-    //~| HELP: add a dummy let to cause `t` to be fully captured\n+        //~^ ERROR: drop order\n+        //~| NOTE: for more information, see\n+        //~| HELP: add a dummy let to cause `t` to be fully captured\n         let _t = t.1;\n     };\n \n@@ -123,9 +123,9 @@ fn test7_move_closures_non_copy_types_might_need_migration() {\n     let t1 = (Foo(0), Foo(0), Foo(0));\n \n     let c = move || {\n-    //~^ ERROR: drop order\n-    //~| NOTE: for more information, see\n-    //~| HELP: add a dummy let to cause `t1`, `t` to be fully captured\n+        //~^ ERROR: drop order\n+        //~| NOTE: for more information, see\n+        //~| HELP: add a dummy let to cause `t1`, `t` to be fully captured\n         println!(\"{:?} {:?}\", t1.1, t.1);\n     };\n "}, {"sha": "ebf9f169fd400e9fe5b0da13b3792f0a39fa89b5", "filename": "src/test/ui/closures/2229_closure_analysis/migrations/significant_drop.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmigrations%2Fsignificant_drop.stderr?ref=7e95290caab37233eebc323351d353ecdb3ce782", "patch": "@@ -14,8 +14,8 @@ LL | |     };\n note: the lint level is defined here\n   --> $DIR/significant_drop.rs:2:9\n    |\n-LL | #![deny(disjoint_capture_migration)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #![deny(rust_2021_incompatible_closure_captures)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/disjoint-capture-in-closures.html>\n help: add a dummy let to cause `t`, `t1`, `t2` to be fully captured\n    |"}, {"sha": "e4455d86a1440b7f183c7d96582f5557bcd6d5f2", "filename": "src/test/ui/consts/const-eval/const_panic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.rs?ref=7e95290caab37233eebc323351d353ecdb3ce782", "patch": "@@ -1,5 +1,5 @@\n #![feature(const_panic)]\n-#![allow(non_fmt_panic)]\n+#![allow(non_fmt_panics)]\n #![crate_type = \"lib\"]\n \n const MSG: &str = \"hello\";"}, {"sha": "b30e9a47a13e8bc4a76d13ae3208fd458cad0445", "filename": "src/test/ui/fmt/format-args-capture.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture.rs?ref=7e95290caab37233eebc323351d353ecdb3ce782", "patch": "@@ -16,13 +16,13 @@ fn main() {\n \n fn named_argument_takes_precedence_to_captured() {\n     let foo = \"captured\";\n-    let s = format!(\"{foo}\", foo=\"named\");\n+    let s = format!(\"{foo}\", foo = \"named\");\n     assert_eq!(&s, \"named\");\n \n-    let s = format!(\"{foo}-{foo}-{foo}\", foo=\"named\");\n+    let s = format!(\"{foo}-{foo}-{foo}\", foo = \"named\");\n     assert_eq!(&s, \"named-named-named\");\n \n-    let s = format!(\"{}-{bar}-{foo}\", \"positional\", bar=\"named\");\n+    let s = format!(\"{}-{bar}-{foo}\", \"positional\", bar = \"named\");\n     assert_eq!(&s, \"positional-named-captured\");\n }\n \n@@ -42,10 +42,11 @@ fn panic_with_single_argument_does_not_get_formatted() {\n     // RFC #2795 suggests that this may need to change so that captured arguments are formatted.\n     // For stability reasons this will need to part of an edition change.\n \n-    #[allow(non_fmt_panic)]\n+    #[allow(non_fmt_panics)]\n     let msg = std::panic::catch_unwind(|| {\n         panic!(\"{foo}\");\n-    }).unwrap_err();\n+    })\n+    .unwrap_err();\n \n     assert_eq!(msg.downcast_ref::<&str>(), Some(&\"{foo}\"))\n }\n@@ -55,8 +56,9 @@ fn panic_with_multiple_arguments_is_formatted() {\n     let foo = \"captured\";\n \n     let msg = std::panic::catch_unwind(|| {\n-        panic!(\"{}-{bar}-{foo}\", \"positional\", bar=\"named\");\n-    }).unwrap_err();\n+        panic!(\"{}-{bar}-{foo}\", \"positional\", bar = \"named\");\n+    })\n+    .unwrap_err();\n \n     assert_eq!(msg.downcast_ref::<String>(), Some(&\"positional-named-captured\".to_string()))\n }"}, {"sha": "753675872b9cac6f39228a89f28785a09c18002a", "filename": "src/test/ui/macros/assert-macro-owned.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Fmacros%2Fassert-macro-owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Fmacros%2Fassert-macro-owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fassert-macro-owned.rs?ref=7e95290caab37233eebc323351d353ecdb3ce782", "patch": "@@ -2,7 +2,7 @@\n // error-pattern:panicked at 'test-assert-owned'\n // ignore-emscripten no processes\n \n-#![allow(non_fmt_panic)]\n+#![allow(non_fmt_panics)]\n \n fn main() {\n     assert!(false, \"test-assert-owned\".to_string());"}, {"sha": "780e158fe0b8f8bf46fd1ee6d961fc06f68d5f5b", "filename": "src/test/ui/macros/macro-comma-behavior-rpass.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Fmacros%2Fmacro-comma-behavior-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Fmacros%2Fmacro-comma-behavior-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-comma-behavior-rpass.rs?ref=7e95290caab37233eebc323351d353ecdb3ce782", "patch": "@@ -14,11 +14,12 @@\n // revisions: std core\n \n // ignore-wasm32-bare compiled with panic=abort by default\n-\n #![cfg_attr(core, no_std)]\n \n-#[cfg(std)] use std::fmt;\n-#[cfg(core)] use core::fmt;\n+#[cfg(core)]\n+use core::fmt;\n+#[cfg(std)]\n+use std::fmt;\n \n // an easy mistake in the implementation of 'assert!'\n // would cause this to say \"explicit panic\"\n@@ -57,7 +58,7 @@ fn writeln_1arg() {\n //\n // (Example: Issue #48042)\n #[test]\n-#[allow(non_fmt_panic)]\n+#[allow(non_fmt_panics)]\n fn to_format_or_not_to_format() {\n     // (\"{}\" is the easiest string to test because if this gets\n     // sent to format_args!, it'll simply fail to compile.\n@@ -80,13 +81,17 @@ fn to_format_or_not_to_format() {\n     // format!(\"{}\",); // see check-fail\n     // format_args!(\"{}\",); // see check-fail\n \n-    if falsum() { panic!(\"{}\",); }\n+    if falsum() {\n+        panic!(\"{}\",);\n+    }\n \n     // print!(\"{}\",); // see check-fail\n     // println!(\"{}\",); // see check-fail\n     // unimplemented!(\"{}\",); // see check-fail\n \n-    if falsum() { unreachable!(\"{}\",); }\n+    if falsum() {\n+        unreachable!(\"{}\",);\n+    }\n \n     // write!(&mut stdout, \"{}\",); // see check-fail\n     // writeln!(&mut stdout, \"{}\",); // see check-fail"}, {"sha": "b0d56e9bb1ef0a5bd97923bf1b572401c1df7e38", "filename": "src/test/ui/macros/macro-or-patterns-back-compat.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Fmacros%2Fmacro-or-patterns-back-compat.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Fmacros%2Fmacro-or-patterns-back-compat.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-or-patterns-back-compat.fixed?ref=7e95290caab37233eebc323351d353ecdb3ce782", "patch": "@@ -1,7 +1,7 @@\n // run-rustfix\n // aux-build:or-pattern.rs\n \n-#![deny(or_patterns_back_compat)]\n+#![deny(rust_2021_incompatible_or_patterns)]\n #![allow(unused_macros)]\n \n #[macro_use]"}, {"sha": "9e24b5106b8bf528fbf3b5fdfdc71745a19ac4d5", "filename": "src/test/ui/macros/macro-or-patterns-back-compat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Fmacros%2Fmacro-or-patterns-back-compat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Fmacros%2Fmacro-or-patterns-back-compat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-or-patterns-back-compat.rs?ref=7e95290caab37233eebc323351d353ecdb3ce782", "patch": "@@ -1,7 +1,7 @@\n // run-rustfix\n // aux-build:or-pattern.rs\n \n-#![deny(or_patterns_back_compat)]\n+#![deny(rust_2021_incompatible_or_patterns)]\n #![allow(unused_macros)]\n \n #[macro_use]"}, {"sha": "eb6204fa02e69221dc89aee8af589b70bbbc1d97", "filename": "src/test/ui/macros/macro-or-patterns-back-compat.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Fmacros%2Fmacro-or-patterns-back-compat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Fmacros%2Fmacro-or-patterns-back-compat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-or-patterns-back-compat.stderr?ref=7e95290caab37233eebc323351d353ecdb3ce782", "patch": "@@ -7,8 +7,8 @@ LL | macro_rules! foo { ($x:pat | $y:pat) => {} }\n note: the lint level is defined here\n   --> $DIR/macro-or-patterns-back-compat.rs:4:9\n    |\n-LL | #![deny(or_patterns_back_compat)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #![deny(rust_2021_incompatible_or_patterns)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see issue #84869 <https://github.com/rust-lang/rust/issues/84869>\n "}, {"sha": "6aa2eb174e922166af0333ce180de8478dfedc85", "filename": "src/test/ui/non-fmt-panic.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Fnon-fmt-panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Fnon-fmt-panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnon-fmt-panic.stderr?ref=7e95290caab37233eebc323351d353ecdb3ce782", "patch": "@@ -4,7 +4,7 @@ warning: panic message contains a brace\n LL |     panic!(\"here's a brace: {\");\n    |                             ^\n    |\n-   = note: `#[warn(non_fmt_panic)]` on by default\n+   = note: `#[warn(non_fmt_panics)]` on by default\n    = note: this message is not used as a format string, but will be in Rust 2021\n help: add a \"{}\" format string to use the message literally\n    |"}, {"sha": "9d80357873488352e8078db797eae2f0c656e43c", "filename": "src/test/ui/panics/explicit-panic-msg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Fpanics%2Fexplicit-panic-msg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Fpanics%2Fexplicit-panic-msg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanics%2Fexplicit-panic-msg.rs?ref=7e95290caab37233eebc323351d353ecdb3ce782", "patch": "@@ -1,6 +1,6 @@\n #![allow(unused_assignments)]\n #![allow(unused_variables)]\n-#![allow(non_fmt_panic)]\n+#![allow(non_fmt_panics)]\n \n // run-fail\n // error-pattern:wooooo"}, {"sha": "663bf6713d090e444e8f900d3687d1e3be383a5e", "filename": "src/test/ui/panics/panic-macro-any-wrapped.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Fpanics%2Fpanic-macro-any-wrapped.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Fpanics%2Fpanic-macro-any-wrapped.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanics%2Fpanic-macro-any-wrapped.rs?ref=7e95290caab37233eebc323351d353ecdb3ce782", "patch": "@@ -2,7 +2,7 @@\n // error-pattern:panicked at 'Box<dyn Any>'\n // ignore-emscripten no processes\n \n-#![allow(non_fmt_panic)]\n+#![allow(non_fmt_panics)]\n \n fn main() {\n     panic!(Box::new(612_i64));"}, {"sha": "08acc6e8078f9b8df2b804ee4a30e019f34f186f", "filename": "src/test/ui/panics/panic-macro-any.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Fpanics%2Fpanic-macro-any.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Fpanics%2Fpanic-macro-any.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanics%2Fpanic-macro-any.rs?ref=7e95290caab37233eebc323351d353ecdb3ce782", "patch": "@@ -3,7 +3,7 @@\n // ignore-emscripten no processes\n \n #![feature(box_syntax)]\n-#![allow(non_fmt_panic)]\n+#![allow(non_fmt_panics)]\n \n fn main() {\n     panic!(box 413 as Box<dyn std::any::Any + Send>);"}, {"sha": "c5ff0b4bcd0f8cb3bdb74fb3d3d15ca4d5316b8a", "filename": "src/test/ui/rust-2021/future-prelude-collision-imported.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-imported.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-imported.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-imported.fixed?ref=7e95290caab37233eebc323351d353ecdb3ce782", "patch": "@@ -1,7 +1,7 @@\n // run-rustfix\n // edition:2018\n // check-pass\n-#![warn(future_prelude_collision)]\n+#![warn(rust_2021_prelude_collisions)]\n #![allow(dead_code)]\n #![allow(unused_imports)]\n "}, {"sha": "cd39eec47f2a4125416440a5053eee6b50d5841f", "filename": "src/test/ui/rust-2021/future-prelude-collision-imported.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-imported.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-imported.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-imported.rs?ref=7e95290caab37233eebc323351d353ecdb3ce782", "patch": "@@ -1,7 +1,7 @@\n // run-rustfix\n // edition:2018\n // check-pass\n-#![warn(future_prelude_collision)]\n+#![warn(rust_2021_prelude_collisions)]\n #![allow(dead_code)]\n #![allow(unused_imports)]\n "}, {"sha": "61975876819229bfbfc8fbe123f3b10a20eff4ad", "filename": "src/test/ui/rust-2021/future-prelude-collision-imported.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-imported.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-imported.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-imported.stderr?ref=7e95290caab37233eebc323351d353ecdb3ce782", "patch": "@@ -7,8 +7,8 @@ LL |         let _: u32 = 3u8.try_into().unwrap();\n note: the lint level is defined here\n   --> $DIR/future-prelude-collision-imported.rs:4:9\n    |\n-LL | #![warn(future_prelude_collision)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #![warn(rust_2021_prelude_collisions)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n    = note: for more information, see issue #85684 <https://github.com/rust-lang/rust/issues/85684>\n "}, {"sha": "27891a8d11db7474a64db2b7defdedc478e0b590", "filename": "src/test/ui/rust-2021/future-prelude-collision-shadow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-shadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-shadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-shadow.rs?ref=7e95290caab37233eebc323351d353ecdb3ce782", "patch": "@@ -1,5 +1,5 @@\n // edition:2018\n-#![warn(future_prelude_collision)]\n+#![warn(rust_2021_prelude_collisions)]\n #![allow(dead_code)]\n #![allow(unused_imports)]\n "}, {"sha": "4be82056ad59bdab71fc3310d7ac2681f67b2d6d", "filename": "src/test/ui/rust-2021/future-prelude-collision-unneeded.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-unneeded.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-unneeded.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-unneeded.rs?ref=7e95290caab37233eebc323351d353ecdb3ce782", "patch": "@@ -1,12 +1,14 @@\n // edition:2018\n // check-pass\n #![allow(unused)]\n-#![deny(future_prelude_collision)]\n+#![deny(rust_2021_prelude_collisions)]\n \n struct S;\n \n impl S {\n-    fn try_into(self) -> S { S }\n+    fn try_into(self) -> S {\n+        S\n+    }\n }\n \n // See https://github.com/rust-lang/rust/issues/86633"}, {"sha": "43b0ec1c3e6a709fab2eefc5670e7c80854b67a2", "filename": "src/test/ui/rust-2021/future-prelude-collision.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision.fixed?ref=7e95290caab37233eebc323351d353ecdb3ce782", "patch": "@@ -1,7 +1,7 @@\n // run-rustfix\n // edition:2018\n // check-pass\n-#![warn(future_prelude_collision)]\n+#![warn(rust_2021_prelude_collisions)]\n \n trait TryIntoU32 {\n     fn try_into(self) -> Result<u32, ()>;"}, {"sha": "4c7a47ffbe28ac0bca9213847beb2379c63c1175", "filename": "src/test/ui/rust-2021/future-prelude-collision.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision.rs?ref=7e95290caab37233eebc323351d353ecdb3ce782", "patch": "@@ -1,7 +1,7 @@\n // run-rustfix\n // edition:2018\n // check-pass\n-#![warn(future_prelude_collision)]\n+#![warn(rust_2021_prelude_collisions)]\n \n trait TryIntoU32 {\n     fn try_into(self) -> Result<u32, ()>;"}, {"sha": "03b89da00d970c934ece61e64ba817bc7f7eb4c4", "filename": "src/test/ui/rust-2021/future-prelude-collision.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision.stderr?ref=7e95290caab37233eebc323351d353ecdb3ce782", "patch": "@@ -7,8 +7,8 @@ LL |     let _: u32 = 3u8.try_into().unwrap();\n note: the lint level is defined here\n   --> $DIR/future-prelude-collision.rs:4:9\n    |\n-LL | #![warn(future_prelude_collision)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #![warn(rust_2021_prelude_collisions)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n    = note: for more information, see issue #85684 <https://github.com/rust-lang/rust/issues/85684>\n "}, {"sha": "feba7d19b6615750da3f1a06fd48fee2f602c823", "filename": "src/test/ui/rust-2021/generic-type-collision.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Frust-2021%2Fgeneric-type-collision.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Frust-2021%2Fgeneric-type-collision.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Fgeneric-type-collision.fixed?ref=7e95290caab37233eebc323351d353ecdb3ce782", "patch": "@@ -1,7 +1,7 @@\n // check-pass\n // run-rustfix\n // edition 2018\n-#![warn(future_prelude_collision)]\n+#![warn(rust_2021_prelude_collisions)]\n \n trait MyTrait<A> {\n     fn from_iter(x: Option<A>);"}, {"sha": "335e7e520a495450d8e9cc2151a1c91afbcc2a0e", "filename": "src/test/ui/rust-2021/generic-type-collision.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Frust-2021%2Fgeneric-type-collision.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Frust-2021%2Fgeneric-type-collision.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Fgeneric-type-collision.rs?ref=7e95290caab37233eebc323351d353ecdb3ce782", "patch": "@@ -1,7 +1,7 @@\n // check-pass\n // run-rustfix\n // edition 2018\n-#![warn(future_prelude_collision)]\n+#![warn(rust_2021_prelude_collisions)]\n \n trait MyTrait<A> {\n     fn from_iter(x: Option<A>);"}, {"sha": "d4999201c27f962bacb9586e0d7687fe91eb296b", "filename": "src/test/ui/rust-2021/generic-type-collision.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Frust-2021%2Fgeneric-type-collision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Frust-2021%2Fgeneric-type-collision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Fgeneric-type-collision.stderr?ref=7e95290caab37233eebc323351d353ecdb3ce782", "patch": "@@ -7,8 +7,8 @@ LL |     <Vec<i32>>::from_iter(None);\n note: the lint level is defined here\n   --> $DIR/generic-type-collision.rs:4:9\n    |\n-LL | #![warn(future_prelude_collision)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #![warn(rust_2021_prelude_collisions)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2021!\n    = note: for more information, see issue #85684 <https://github.com/rust-lang/rust/issues/85684>\n "}, {"sha": "5789a90393bae56106f04d19020c575691bbffc8", "filename": "src/test/ui/rust-2021/inherent-dyn-collision.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Frust-2021%2Finherent-dyn-collision.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Frust-2021%2Finherent-dyn-collision.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Finherent-dyn-collision.fixed?ref=7e95290caab37233eebc323351d353ecdb3ce782", "patch": "@@ -5,7 +5,7 @@\n // run-rustfix\n // edition:2018\n \n-#![warn(future_prelude_collision)]\n+#![warn(rust_2021_prelude_collisions)]\n \n trait TryIntoU32 {\n     fn try_into(&self) -> Result<u32, ()>;"}, {"sha": "a3893c033e942cf1e7c9566ca41a9bcc66ee99f4", "filename": "src/test/ui/rust-2021/inherent-dyn-collision.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Frust-2021%2Finherent-dyn-collision.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Frust-2021%2Finherent-dyn-collision.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Finherent-dyn-collision.rs?ref=7e95290caab37233eebc323351d353ecdb3ce782", "patch": "@@ -5,7 +5,7 @@\n // run-rustfix\n // edition:2018\n \n-#![warn(future_prelude_collision)]\n+#![warn(rust_2021_prelude_collisions)]\n \n trait TryIntoU32 {\n     fn try_into(&self) -> Result<u32, ()>;"}, {"sha": "605f9ced9ebb72e559a81c5ae2d35bacdce59010", "filename": "src/test/ui/rust-2021/inherent-dyn-collision.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Frust-2021%2Finherent-dyn-collision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Frust-2021%2Finherent-dyn-collision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Finherent-dyn-collision.stderr?ref=7e95290caab37233eebc323351d353ecdb3ce782", "patch": "@@ -7,8 +7,8 @@ LL |         get_dyn_trait().try_into().unwrap()\n note: the lint level is defined here\n   --> $DIR/inherent-dyn-collision.rs:8:9\n    |\n-LL | #![warn(future_prelude_collision)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #![warn(rust_2021_prelude_collisions)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n    = note: for more information, see issue #85684 <https://github.com/rust-lang/rust/issues/85684>\n "}, {"sha": "507105207d695e18794c876f7c5390c0cbf890dc", "filename": "src/test/ui/rust-2021/inherent-method-collision.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Frust-2021%2Finherent-method-collision.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Frust-2021%2Finherent-method-collision.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Finherent-method-collision.rs?ref=7e95290caab37233eebc323351d353ecdb3ce782", "patch": "@@ -2,7 +2,7 @@\n //\n // check-pass\n \n-#![deny(future_prelude_collision)]\n+#![deny(rust_2021_prelude_collisions)]\n \n pub struct MySeq {}\n "}, {"sha": "e026f01e93fb038027d0b773c7a4ff53f709e42e", "filename": "src/test/ui/rust-2021/reserved-prefixes-migration.fixed", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Frust-2021%2Freserved-prefixes-migration.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Frust-2021%2Freserved-prefixes-migration.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Freserved-prefixes-migration.fixed?ref=7e95290caab37233eebc323351d353ecdb3ce782", "patch": "@@ -2,7 +2,7 @@\n // run-rustfix\n // compile-flags: -Z unstable-options --edition 2018\n \n-#![warn(reserved_prefix)]\n+#![warn(rust_2021_prefixes_incompatible_syntax)]\n \n macro_rules! m2 {\n     ($a:tt $b:tt) => {};\n@@ -14,16 +14,16 @@ macro_rules! m3 {\n \n fn main() {\n     m2!(z \"hey\");\n-    //~^ WARNING prefix `z` is unknown [reserved_prefix]\n+    //~^ WARNING prefix `z` is unknown [rust_2021_prefixes_incompatible_syntax]\n     //~| WARNING hard error in Rust 2021\n     m2!(prefix \"hey\");\n-    //~^ WARNING prefix `prefix` is unknown [reserved_prefix]\n+    //~^ WARNING prefix `prefix` is unknown [rust_2021_prefixes_incompatible_syntax]\n     //~| WARNING hard error in Rust 2021\n     m3!(hey #123);\n-    //~^ WARNING prefix `hey` is unknown [reserved_prefix]\n+    //~^ WARNING prefix `hey` is unknown [rust_2021_prefixes_incompatible_syntax]\n     //~| WARNING hard error in Rust 2021\n     m3!(hey #hey);\n-    //~^ WARNING prefix `hey` is unknown [reserved_prefix]\n+    //~^ WARNING prefix `hey` is unknown [rust_2021_prefixes_incompatible_syntax]\n     //~| WARNING hard error in Rust 2021\n }\n \n@@ -33,6 +33,6 @@ macro_rules! quote {\n \n quote! {\n     #name = #kind #value\n-    //~^ WARNING prefix `kind` is unknown [reserved_prefix]\n+    //~^ WARNING prefix `kind` is unknown [rust_2021_prefixes_incompatible_syntax]\n     //~| WARNING hard error in Rust 2021\n }"}, {"sha": "d24f29634806d9d70cee029979f0a6258a7b8869", "filename": "src/test/ui/rust-2021/reserved-prefixes-migration.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Frust-2021%2Freserved-prefixes-migration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Frust-2021%2Freserved-prefixes-migration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Freserved-prefixes-migration.rs?ref=7e95290caab37233eebc323351d353ecdb3ce782", "patch": "@@ -2,7 +2,7 @@\n // run-rustfix\n // compile-flags: -Z unstable-options --edition 2018\n \n-#![warn(reserved_prefix)]\n+#![warn(rust_2021_prefixes_incompatible_syntax)]\n \n macro_rules! m2 {\n     ($a:tt $b:tt) => {};\n@@ -14,16 +14,16 @@ macro_rules! m3 {\n \n fn main() {\n     m2!(z\"hey\");\n-    //~^ WARNING prefix `z` is unknown [reserved_prefix]\n+    //~^ WARNING prefix `z` is unknown [rust_2021_prefixes_incompatible_syntax]\n     //~| WARNING hard error in Rust 2021\n     m2!(prefix\"hey\");\n-    //~^ WARNING prefix `prefix` is unknown [reserved_prefix]\n+    //~^ WARNING prefix `prefix` is unknown [rust_2021_prefixes_incompatible_syntax]\n     //~| WARNING hard error in Rust 2021\n     m3!(hey#123);\n-    //~^ WARNING prefix `hey` is unknown [reserved_prefix]\n+    //~^ WARNING prefix `hey` is unknown [rust_2021_prefixes_incompatible_syntax]\n     //~| WARNING hard error in Rust 2021\n     m3!(hey#hey);\n-    //~^ WARNING prefix `hey` is unknown [reserved_prefix]\n+    //~^ WARNING prefix `hey` is unknown [rust_2021_prefixes_incompatible_syntax]\n     //~| WARNING hard error in Rust 2021\n }\n \n@@ -33,6 +33,6 @@ macro_rules! quote {\n \n quote! {\n     #name = #kind#value\n-    //~^ WARNING prefix `kind` is unknown [reserved_prefix]\n+    //~^ WARNING prefix `kind` is unknown [rust_2021_prefixes_incompatible_syntax]\n     //~| WARNING hard error in Rust 2021\n }"}, {"sha": "95105f932dcbd945f9777fba6c998e96b5952550", "filename": "src/test/ui/rust-2021/reserved-prefixes-migration.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Frust-2021%2Freserved-prefixes-migration.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftest%2Fui%2Frust-2021%2Freserved-prefixes-migration.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Freserved-prefixes-migration.stderr?ref=7e95290caab37233eebc323351d353ecdb3ce782", "patch": "@@ -7,8 +7,8 @@ LL |     m2!(z\"hey\");\n note: the lint level is defined here\n   --> $DIR/reserved-prefixes-migration.rs:5:9\n    |\n-LL | #![warn(reserved_prefix)]\n-   |         ^^^^^^^^^^^^^^^\n+LL | #![warn(rust_2021_prefixes_incompatible_syntax)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n    = note: for more information, see issue #84978 <https://github.com/rust-lang/rust/issues/84978>\n help: insert whitespace here to avoid this being parsed as a prefix in Rust 2021"}, {"sha": "421614057c577771c457fc6e129f071ed68e2de3", "filename": "src/tools/clippy/CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftools%2Fclippy%2FCHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftools%2Fclippy%2FCHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2FCHANGELOG.md?ref=7e95290caab37233eebc323351d353ecdb3ce782", "patch": "@@ -592,7 +592,7 @@ Released 2021-02-11\n \n * Previously deprecated [`str_to_string`] and [`string_to_string`] have been un-deprecated\n   as `restriction` lints [#6333](https://github.com/rust-lang/rust-clippy/pull/6333)\n-* Deprecate `panic_params` lint. This is now available in rustc as `non_fmt_panic`\n+* Deprecate `panic_params` lint. This is now available in rustc as `non_fmt_panics`\n   [#6351](https://github.com/rust-lang/rust-clippy/pull/6351)\n * Move [`map_err_ignore`] to `restriction`\n   [#6416](https://github.com/rust-lang/rust-clippy/pull/6416)"}, {"sha": "c29b3e7c74c2c113fd85fbd0893d52ab4aad2f30", "filename": "src/tools/clippy/clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs?ref=7e95290caab37233eebc323351d353ecdb3ce782", "patch": "@@ -2171,7 +2171,7 @@ pub fn register_renamed(ls: &mut rustc_lint::LintStore) {\n     ls.register_renamed(\"clippy::unused_label\", \"unused_labels\");\n     ls.register_renamed(\"clippy::drop_bounds\", \"drop_bounds\");\n     ls.register_renamed(\"clippy::temporary_cstring_as_ptr\", \"temporary_cstring_as_ptr\");\n-    ls.register_renamed(\"clippy::panic_params\", \"non_fmt_panic\");\n+    ls.register_renamed(\"clippy::panic_params\", \"non_fmt_panics\");\n     ls.register_renamed(\"clippy::unknown_clippy_lints\", \"unknown_lints\");\n }\n "}, {"sha": "2180f848d62cd256f7538d100d6cf5c634398ec2", "filename": "src/tools/clippy/tests/ui/assertions_on_constants.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fassertions_on_constants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fassertions_on_constants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fassertions_on_constants.rs?ref=7e95290caab37233eebc323351d353ecdb3ce782", "patch": "@@ -1,4 +1,4 @@\n-#![allow(non_fmt_panic)]\n+#![allow(non_fmt_panics)]\n \n macro_rules! assert_const {\n     ($len:expr) => {"}, {"sha": "c0002e5354310ab9bcc32c2f0753e534c02ff9eb", "filename": "src/tools/clippy/tests/ui/deprecated.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdeprecated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdeprecated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdeprecated.stderr?ref=7e95290caab37233eebc323351d353ecdb3ce782", "patch": "@@ -60,11 +60,11 @@ error: lint `clippy::temporary_cstring_as_ptr` has been renamed to `temporary_cs\n LL | #[warn(clippy::temporary_cstring_as_ptr)]\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `temporary_cstring_as_ptr`\n \n-error: lint `clippy::panic_params` has been renamed to `non_fmt_panic`\n+error: lint `clippy::panic_params` has been renamed to `non_fmt_panics`\n   --> $DIR/deprecated.rs:11:8\n    |\n LL | #[warn(clippy::panic_params)]\n-   |        ^^^^^^^^^^^^^^^^^^^^ help: use the new name: `non_fmt_panic`\n+   |        ^^^^^^^^^^^^^^^^^^^^ help: use the new name: `non_fmt_panics`\n \n error: lint `clippy::unknown_clippy_lints` has been renamed to `unknown_lints`\n   --> $DIR/deprecated.rs:12:8"}, {"sha": "e5c7f1257123801d48a39812cfb003967342ee6d", "filename": "src/tools/lint-docs/src/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftools%2Flint-docs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e95290caab37233eebc323351d353ecdb3ce782/src%2Ftools%2Flint-docs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flint-docs%2Fsrc%2Flib.rs?ref=7e95290caab37233eebc323351d353ecdb3ce782", "patch": "@@ -467,7 +467,9 @@ fn lint_name(line: &str) -> Result<String, &'static str> {\n                 return Err(\"lint name should end with comma\");\n             }\n             let name = &name[..name.len() - 1];\n-            if !name.chars().all(|ch| ch.is_uppercase() || ch == '_') || name.is_empty() {\n+            if !name.chars().all(|ch| ch.is_uppercase() || ch.is_ascii_digit() || ch == '_')\n+                || name.is_empty()\n+            {\n                 return Err(\"lint name did not have expected format\");\n             }\n             Ok(name.to_lowercase().to_string())"}]}