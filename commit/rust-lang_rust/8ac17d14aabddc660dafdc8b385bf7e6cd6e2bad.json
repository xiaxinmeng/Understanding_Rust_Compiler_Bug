{"sha": "8ac17d14aabddc660dafdc8b385bf7e6cd6e2bad", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhYzE3ZDE0YWFiZGRjNjYwZGFmZGM4YjM4NWJmN2U2Y2Q2ZTJiYWQ=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-07-01T14:42:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-01T14:42:46Z"}, "message": "Rollup merge of #73716 - poliorcetics:static-keyword, r=LukasKalbertodt\n\nDocument the static keyword\n\nPartial fix of #34601.\n\nThis documents the `static` keyword. It's basically a simplified version of the reference with more examples.\n\n@rustbot modify labels: T-doc,C-enhancement", "tree": {"sha": "007adb6528d219ee28ebf3f22abe885595f3b127", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/007adb6528d219ee28ebf3f22abe885595f3b127"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ac17d14aabddc660dafdc8b385bf7e6cd6e2bad", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe/KDmCRBK7hj4Ov3rIwAAdHIIABQINdlYFIR0CGXEmOpAEeIJ\n6U2NxaHxYNKtXu1wipAQrKXdVQ+mOtUwnlFZTCNvzk+C6OSsZ48umBimAWfqo20s\n+u0nweIsMKurKBucpLlXc4AalX05QSdSQ6/9+wLBplzYqTGhrZCo2dhlCb/E3Dtt\nDXjfJfd/vdIGOS119+M/F9LG9ae8PCkAkSL+FghDNu3WhkFpzreZLcGn/dSZodvl\nc+WehD6C5SrUZLGxTbqM2XZ9uR0rE1RA3xufnehE94wOYTYVCGoLpjRxKdr6hfZE\nxJO1tLlbMrxIxsXM4AOl9tvMb5prX3dOntSS/Jf2nzZJlUibpQI6PMZwCoVV1Xw=\n=R86B\n-----END PGP SIGNATURE-----\n", "payload": "tree 007adb6528d219ee28ebf3f22abe885595f3b127\nparent 9c6548614be6e4441c4d129897678c1e01cd7717\nparent 4224313e2bc3fc08e5eee0519d7b5813c3cad580\nauthor Manish Goregaokar <manishsmail@gmail.com> 1593614566 -0700\ncommitter GitHub <noreply@github.com> 1593614566 -0700\n\nRollup merge of #73716 - poliorcetics:static-keyword, r=LukasKalbertodt\n\nDocument the static keyword\n\nPartial fix of #34601.\n\nThis documents the `static` keyword. It's basically a simplified version of the reference with more examples.\n\n@rustbot modify labels: T-doc,C-enhancement\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ac17d14aabddc660dafdc8b385bf7e6cd6e2bad", "html_url": "https://github.com/rust-lang/rust/commit/8ac17d14aabddc660dafdc8b385bf7e6cd6e2bad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ac17d14aabddc660dafdc8b385bf7e6cd6e2bad/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c6548614be6e4441c4d129897678c1e01cd7717", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c6548614be6e4441c4d129897678c1e01cd7717", "html_url": "https://github.com/rust-lang/rust/commit/9c6548614be6e4441c4d129897678c1e01cd7717"}, {"sha": "4224313e2bc3fc08e5eee0519d7b5813c3cad580", "url": "https://api.github.com/repos/rust-lang/rust/commits/4224313e2bc3fc08e5eee0519d7b5813c3cad580", "html_url": "https://github.com/rust-lang/rust/commit/4224313e2bc3fc08e5eee0519d7b5813c3cad580"}], "stats": {"total": 79, "additions": 76, "deletions": 3}, "files": [{"sha": "d0716c5205d906535f57fbe770ee437c5f7ebcfc", "filename": "src/libstd/keyword_docs.rs", "status": "modified", "additions": 76, "deletions": 3, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/8ac17d14aabddc660dafdc8b385bf7e6cd6e2bad/src%2Flibstd%2Fkeyword_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ac17d14aabddc660dafdc8b385bf7e6cd6e2bad/src%2Flibstd%2Fkeyword_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fkeyword_docs.rs?ref=8ac17d14aabddc660dafdc8b385bf7e6cd6e2bad", "patch": "@@ -1281,11 +1281,84 @@ mod self_upper_keyword {}\n \n #[doc(keyword = \"static\")]\n //\n-/// A place that is valid for the duration of a program.\n+/// A static item is a value which is valid for the entire duration of your\n+/// program (a `'static` lifetime).\n ///\n-/// The documentation for this keyword is [not yet complete]. Pull requests welcome!\n+/// On the surface, `static` items seem very similar to [`const`]s: both contain\n+/// a value, both require type annotations and both can only be initialized with\n+/// constant functions and values. However, `static`s are notably different in\n+/// that they represent a location in memory. That means that you can have\n+/// references to `static` items and potentially even modify them, making them\n+/// essentially global variables.\n ///\n-/// [not yet complete]: https://github.com/rust-lang/rust/issues/34601\n+/// Static items do not call [`drop`] at the end of the program.\n+///\n+/// There are two types of `static` items: those declared in association with\n+/// the [`mut`] keyword and those without.\n+///\n+/// Static items cannot be moved:\n+///\n+/// ```rust,compile_fail,E0507\n+/// static VEC: Vec<u32> = vec![];\n+///\n+/// fn move_vec(v: Vec<u32>) -> Vec<u32> {\n+///     v\n+/// }\n+///\n+/// // This line causes an error\n+/// move_vec(VEC);\n+/// ```\n+///\n+/// # Simple `static`s\n+///\n+/// Accessing non-[`mut`] `static` items is considered safe, but some\n+/// restrictions apply. Most notably, the type of a `static` value needs to\n+/// implement the [`Sync`] trait, ruling out interior mutability containers\n+/// like [`RefCell`]. See the [Reference] for more information.\n+///\n+/// ```rust\n+/// static FOO: [i32; 5] = [1, 2, 3, 4, 5];\n+///\n+/// let r1 = &FOO as *const _;\n+/// let r2 = &FOO as *const _;\n+/// // With a strictly read-only static, references will have the same adress\n+/// assert_eq!(r1, r2);\n+/// // A static item can be used just like a variable in many cases\n+/// println!(\"{:?}\", FOO);\n+/// ```\n+///\n+/// # Mutable `static`s\n+///\n+/// If a `static` item is declared with the [`mut`] keyword, then it is allowed\n+/// to be modified by the program. However, accessing mutable `static`s can\n+/// cause undefined behavior in a number of ways, for example due to data races\n+/// in a multithreaded context. As such, all accesses to mutable `static`s\n+/// require an [`unsafe`] block.\n+///\n+/// Despite their unsafety, mutable `static`s are necessary in many contexts:\n+/// they can be used to represent global state shared by the whole program or in\n+/// [`extern`] blocks to bind to variables from C libraries.\n+///\n+/// In an [`extern`] block:\n+///\n+/// ```rust,no_run\n+/// # #![allow(dead_code)]\n+/// extern \"C\" {\n+///     static mut ERROR_MESSAGE: *mut std::os::raw::c_char;\n+/// }\n+/// ```\n+///\n+/// Mutable `static`s, just like simple `static`s, have some restrictions that\n+/// apply to them. See the [Reference] for more information.\n+///\n+/// [`const`]: keyword.const.html\n+/// [`extern`]: keyword.extern.html\n+/// [`mut`]: keyword.mut.html\n+/// [`unsafe`]: keyword.unsafe.html\n+/// [`drop`]: mem/fn.drop.html\n+/// [`Sync`]: marker/trait.Sync.html\n+/// [`RefCell`]: cell/struct.RefCell.html\n+/// [Reference]: ../reference/items/static-items.html\n mod static_keyword {}\n \n #[doc(keyword = \"struct\")]"}]}